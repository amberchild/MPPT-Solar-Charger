
MPPT_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd78  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a2c  0800de38  0800de38  0001de38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e864  0800e864  000206c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e864  0800e864  0001e864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e86c  0800e86c  000206c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e86c  0800e86c  0001e86c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e874  0800e874  0001e874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006c4  20000000  0800e878  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c70  200006c8  0800ef3c  000206c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000800  20003338  0800ef3c  00023338  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000206c4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000206ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024412  00000000  00000000  0002072f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000558e  00000000  00000000  00044b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000d2d5  00000000  00000000  0004a0cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001888  00000000  00000000  000573a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001390  00000000  00000000  00058c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001a6c1  00000000  00000000  00059fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00026d80  00000000  00000000  00074681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009446e  00000000  00000000  0009b401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000054d8  00000000  00000000  0012f870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00134d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200006c8 	.word	0x200006c8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800de20 	.word	0x0800de20

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200006cc 	.word	0x200006cc
 8000104:	0800de20 	.word	0x0800de20

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uhi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5a09      	ldrh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fa39 	bl	80018b4 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f989 	bl	8001764 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa2b 	bl	80018b4 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa21 	bl	80018b4 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f9b1 	bl	80017e8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f9a7 	bl	80017e8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f86a 	bl	80005b0 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_f2uiz>:
 8000544:	219e      	movs	r1, #158	; 0x9e
 8000546:	b510      	push	{r4, lr}
 8000548:	05c9      	lsls	r1, r1, #23
 800054a:	1c04      	adds	r4, r0, #0
 800054c:	f002 f9ba 	bl	80028c4 <__aeabi_fcmpge>
 8000550:	2800      	cmp	r0, #0
 8000552:	d103      	bne.n	800055c <__aeabi_f2uiz+0x18>
 8000554:	1c20      	adds	r0, r4, #0
 8000556:	f000 fa97 	bl	8000a88 <__aeabi_f2iz>
 800055a:	bd10      	pop	{r4, pc}
 800055c:	219e      	movs	r1, #158	; 0x9e
 800055e:	1c20      	adds	r0, r4, #0
 8000560:	05c9      	lsls	r1, r1, #23
 8000562:	f000 f8f1 	bl	8000748 <__aeabi_fsub>
 8000566:	f000 fa8f 	bl	8000a88 <__aeabi_f2iz>
 800056a:	2380      	movs	r3, #128	; 0x80
 800056c:	061b      	lsls	r3, r3, #24
 800056e:	469c      	mov	ip, r3
 8000570:	4460      	add	r0, ip
 8000572:	e7f2      	b.n	800055a <__aeabi_f2uiz+0x16>

08000574 <__aeabi_d2uiz>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	2200      	movs	r2, #0
 8000578:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <__aeabi_d2uiz+0x38>)
 800057a:	0004      	movs	r4, r0
 800057c:	000d      	movs	r5, r1
 800057e:	f7ff ff89 	bl	8000494 <__aeabi_dcmpge>
 8000582:	2800      	cmp	r0, #0
 8000584:	d104      	bne.n	8000590 <__aeabi_d2uiz+0x1c>
 8000586:	0020      	movs	r0, r4
 8000588:	0029      	movs	r1, r5
 800058a:	f002 f859 	bl	8002640 <__aeabi_d2iz>
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <__aeabi_d2uiz+0x38>)
 8000592:	2200      	movs	r2, #0
 8000594:	0020      	movs	r0, r4
 8000596:	0029      	movs	r1, r5
 8000598:	f001 fcb2 	bl	8001f00 <__aeabi_dsub>
 800059c:	f002 f850 	bl	8002640 <__aeabi_d2iz>
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	061b      	lsls	r3, r3, #24
 80005a4:	469c      	mov	ip, r3
 80005a6:	4460      	add	r0, ip
 80005a8:	e7f1      	b.n	800058e <__aeabi_d2uiz+0x1a>
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	41e00000 	.word	0x41e00000

080005b0 <__udivmoddi4>:
 80005b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b2:	4657      	mov	r7, sl
 80005b4:	464e      	mov	r6, r9
 80005b6:	4645      	mov	r5, r8
 80005b8:	46de      	mov	lr, fp
 80005ba:	b5e0      	push	{r5, r6, r7, lr}
 80005bc:	0004      	movs	r4, r0
 80005be:	000d      	movs	r5, r1
 80005c0:	4692      	mov	sl, r2
 80005c2:	4699      	mov	r9, r3
 80005c4:	b083      	sub	sp, #12
 80005c6:	428b      	cmp	r3, r1
 80005c8:	d830      	bhi.n	800062c <__udivmoddi4+0x7c>
 80005ca:	d02d      	beq.n	8000628 <__udivmoddi4+0x78>
 80005cc:	4649      	mov	r1, r9
 80005ce:	4650      	mov	r0, sl
 80005d0:	f002 f9a0 	bl	8002914 <__clzdi2>
 80005d4:	0029      	movs	r1, r5
 80005d6:	0006      	movs	r6, r0
 80005d8:	0020      	movs	r0, r4
 80005da:	f002 f99b 	bl	8002914 <__clzdi2>
 80005de:	1a33      	subs	r3, r6, r0
 80005e0:	4698      	mov	r8, r3
 80005e2:	3b20      	subs	r3, #32
 80005e4:	d434      	bmi.n	8000650 <__udivmoddi4+0xa0>
 80005e6:	469b      	mov	fp, r3
 80005e8:	4653      	mov	r3, sl
 80005ea:	465a      	mov	r2, fp
 80005ec:	4093      	lsls	r3, r2
 80005ee:	4642      	mov	r2, r8
 80005f0:	001f      	movs	r7, r3
 80005f2:	4653      	mov	r3, sl
 80005f4:	4093      	lsls	r3, r2
 80005f6:	001e      	movs	r6, r3
 80005f8:	42af      	cmp	r7, r5
 80005fa:	d83b      	bhi.n	8000674 <__udivmoddi4+0xc4>
 80005fc:	42af      	cmp	r7, r5
 80005fe:	d100      	bne.n	8000602 <__udivmoddi4+0x52>
 8000600:	e079      	b.n	80006f6 <__udivmoddi4+0x146>
 8000602:	465b      	mov	r3, fp
 8000604:	1ba4      	subs	r4, r4, r6
 8000606:	41bd      	sbcs	r5, r7
 8000608:	2b00      	cmp	r3, #0
 800060a:	da00      	bge.n	800060e <__udivmoddi4+0x5e>
 800060c:	e076      	b.n	80006fc <__udivmoddi4+0x14c>
 800060e:	2200      	movs	r2, #0
 8000610:	2300      	movs	r3, #0
 8000612:	9200      	str	r2, [sp, #0]
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	2301      	movs	r3, #1
 8000618:	465a      	mov	r2, fp
 800061a:	4093      	lsls	r3, r2
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	2301      	movs	r3, #1
 8000620:	4642      	mov	r2, r8
 8000622:	4093      	lsls	r3, r2
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	e029      	b.n	800067c <__udivmoddi4+0xcc>
 8000628:	4282      	cmp	r2, r0
 800062a:	d9cf      	bls.n	80005cc <__udivmoddi4+0x1c>
 800062c:	2200      	movs	r2, #0
 800062e:	2300      	movs	r3, #0
 8000630:	9200      	str	r2, [sp, #0]
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <__udivmoddi4+0x8e>
 800063a:	601c      	str	r4, [r3, #0]
 800063c:	605d      	str	r5, [r3, #4]
 800063e:	9800      	ldr	r0, [sp, #0]
 8000640:	9901      	ldr	r1, [sp, #4]
 8000642:	b003      	add	sp, #12
 8000644:	bcf0      	pop	{r4, r5, r6, r7}
 8000646:	46bb      	mov	fp, r7
 8000648:	46b2      	mov	sl, r6
 800064a:	46a9      	mov	r9, r5
 800064c:	46a0      	mov	r8, r4
 800064e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000650:	4642      	mov	r2, r8
 8000652:	469b      	mov	fp, r3
 8000654:	2320      	movs	r3, #32
 8000656:	1a9b      	subs	r3, r3, r2
 8000658:	4652      	mov	r2, sl
 800065a:	40da      	lsrs	r2, r3
 800065c:	4641      	mov	r1, r8
 800065e:	0013      	movs	r3, r2
 8000660:	464a      	mov	r2, r9
 8000662:	408a      	lsls	r2, r1
 8000664:	0017      	movs	r7, r2
 8000666:	4642      	mov	r2, r8
 8000668:	431f      	orrs	r7, r3
 800066a:	4653      	mov	r3, sl
 800066c:	4093      	lsls	r3, r2
 800066e:	001e      	movs	r6, r3
 8000670:	42af      	cmp	r7, r5
 8000672:	d9c3      	bls.n	80005fc <__udivmoddi4+0x4c>
 8000674:	2200      	movs	r2, #0
 8000676:	2300      	movs	r3, #0
 8000678:	9200      	str	r2, [sp, #0]
 800067a:	9301      	str	r3, [sp, #4]
 800067c:	4643      	mov	r3, r8
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0d8      	beq.n	8000634 <__udivmoddi4+0x84>
 8000682:	07fb      	lsls	r3, r7, #31
 8000684:	0872      	lsrs	r2, r6, #1
 8000686:	431a      	orrs	r2, r3
 8000688:	4646      	mov	r6, r8
 800068a:	087b      	lsrs	r3, r7, #1
 800068c:	e00e      	b.n	80006ac <__udivmoddi4+0xfc>
 800068e:	42ab      	cmp	r3, r5
 8000690:	d101      	bne.n	8000696 <__udivmoddi4+0xe6>
 8000692:	42a2      	cmp	r2, r4
 8000694:	d80c      	bhi.n	80006b0 <__udivmoddi4+0x100>
 8000696:	1aa4      	subs	r4, r4, r2
 8000698:	419d      	sbcs	r5, r3
 800069a:	2001      	movs	r0, #1
 800069c:	1924      	adds	r4, r4, r4
 800069e:	416d      	adcs	r5, r5
 80006a0:	2100      	movs	r1, #0
 80006a2:	3e01      	subs	r6, #1
 80006a4:	1824      	adds	r4, r4, r0
 80006a6:	414d      	adcs	r5, r1
 80006a8:	2e00      	cmp	r6, #0
 80006aa:	d006      	beq.n	80006ba <__udivmoddi4+0x10a>
 80006ac:	42ab      	cmp	r3, r5
 80006ae:	d9ee      	bls.n	800068e <__udivmoddi4+0xde>
 80006b0:	3e01      	subs	r6, #1
 80006b2:	1924      	adds	r4, r4, r4
 80006b4:	416d      	adcs	r5, r5
 80006b6:	2e00      	cmp	r6, #0
 80006b8:	d1f8      	bne.n	80006ac <__udivmoddi4+0xfc>
 80006ba:	9800      	ldr	r0, [sp, #0]
 80006bc:	9901      	ldr	r1, [sp, #4]
 80006be:	465b      	mov	r3, fp
 80006c0:	1900      	adds	r0, r0, r4
 80006c2:	4169      	adcs	r1, r5
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	db24      	blt.n	8000712 <__udivmoddi4+0x162>
 80006c8:	002b      	movs	r3, r5
 80006ca:	465a      	mov	r2, fp
 80006cc:	4644      	mov	r4, r8
 80006ce:	40d3      	lsrs	r3, r2
 80006d0:	002a      	movs	r2, r5
 80006d2:	40e2      	lsrs	r2, r4
 80006d4:	001c      	movs	r4, r3
 80006d6:	465b      	mov	r3, fp
 80006d8:	0015      	movs	r5, r2
 80006da:	2b00      	cmp	r3, #0
 80006dc:	db2a      	blt.n	8000734 <__udivmoddi4+0x184>
 80006de:	0026      	movs	r6, r4
 80006e0:	409e      	lsls	r6, r3
 80006e2:	0033      	movs	r3, r6
 80006e4:	0026      	movs	r6, r4
 80006e6:	4647      	mov	r7, r8
 80006e8:	40be      	lsls	r6, r7
 80006ea:	0032      	movs	r2, r6
 80006ec:	1a80      	subs	r0, r0, r2
 80006ee:	4199      	sbcs	r1, r3
 80006f0:	9000      	str	r0, [sp, #0]
 80006f2:	9101      	str	r1, [sp, #4]
 80006f4:	e79e      	b.n	8000634 <__udivmoddi4+0x84>
 80006f6:	42a3      	cmp	r3, r4
 80006f8:	d8bc      	bhi.n	8000674 <__udivmoddi4+0xc4>
 80006fa:	e782      	b.n	8000602 <__udivmoddi4+0x52>
 80006fc:	4642      	mov	r2, r8
 80006fe:	2320      	movs	r3, #32
 8000700:	2100      	movs	r1, #0
 8000702:	1a9b      	subs	r3, r3, r2
 8000704:	2200      	movs	r2, #0
 8000706:	9100      	str	r1, [sp, #0]
 8000708:	9201      	str	r2, [sp, #4]
 800070a:	2201      	movs	r2, #1
 800070c:	40da      	lsrs	r2, r3
 800070e:	9201      	str	r2, [sp, #4]
 8000710:	e785      	b.n	800061e <__udivmoddi4+0x6e>
 8000712:	4642      	mov	r2, r8
 8000714:	2320      	movs	r3, #32
 8000716:	1a9b      	subs	r3, r3, r2
 8000718:	002a      	movs	r2, r5
 800071a:	4646      	mov	r6, r8
 800071c:	409a      	lsls	r2, r3
 800071e:	0023      	movs	r3, r4
 8000720:	40f3      	lsrs	r3, r6
 8000722:	4644      	mov	r4, r8
 8000724:	4313      	orrs	r3, r2
 8000726:	002a      	movs	r2, r5
 8000728:	40e2      	lsrs	r2, r4
 800072a:	001c      	movs	r4, r3
 800072c:	465b      	mov	r3, fp
 800072e:	0015      	movs	r5, r2
 8000730:	2b00      	cmp	r3, #0
 8000732:	dad4      	bge.n	80006de <__udivmoddi4+0x12e>
 8000734:	4642      	mov	r2, r8
 8000736:	002f      	movs	r7, r5
 8000738:	2320      	movs	r3, #32
 800073a:	0026      	movs	r6, r4
 800073c:	4097      	lsls	r7, r2
 800073e:	1a9b      	subs	r3, r3, r2
 8000740:	40de      	lsrs	r6, r3
 8000742:	003b      	movs	r3, r7
 8000744:	4333      	orrs	r3, r6
 8000746:	e7cd      	b.n	80006e4 <__udivmoddi4+0x134>

08000748 <__aeabi_fsub>:
 8000748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800074a:	46c6      	mov	lr, r8
 800074c:	0243      	lsls	r3, r0, #9
 800074e:	0a5b      	lsrs	r3, r3, #9
 8000750:	0045      	lsls	r5, r0, #1
 8000752:	00da      	lsls	r2, r3, #3
 8000754:	0fc4      	lsrs	r4, r0, #31
 8000756:	0248      	lsls	r0, r1, #9
 8000758:	004f      	lsls	r7, r1, #1
 800075a:	4694      	mov	ip, r2
 800075c:	0a42      	lsrs	r2, r0, #9
 800075e:	001e      	movs	r6, r3
 8000760:	4690      	mov	r8, r2
 8000762:	b500      	push	{lr}
 8000764:	0e2d      	lsrs	r5, r5, #24
 8000766:	0e3f      	lsrs	r7, r7, #24
 8000768:	0fc9      	lsrs	r1, r1, #31
 800076a:	0980      	lsrs	r0, r0, #6
 800076c:	2fff      	cmp	r7, #255	; 0xff
 800076e:	d059      	beq.n	8000824 <__aeabi_fsub+0xdc>
 8000770:	2201      	movs	r2, #1
 8000772:	4051      	eors	r1, r2
 8000774:	428c      	cmp	r4, r1
 8000776:	d039      	beq.n	80007ec <__aeabi_fsub+0xa4>
 8000778:	1bea      	subs	r2, r5, r7
 800077a:	2a00      	cmp	r2, #0
 800077c:	dd58      	ble.n	8000830 <__aeabi_fsub+0xe8>
 800077e:	2f00      	cmp	r7, #0
 8000780:	d068      	beq.n	8000854 <__aeabi_fsub+0x10c>
 8000782:	2dff      	cmp	r5, #255	; 0xff
 8000784:	d100      	bne.n	8000788 <__aeabi_fsub+0x40>
 8000786:	e0d1      	b.n	800092c <__aeabi_fsub+0x1e4>
 8000788:	2380      	movs	r3, #128	; 0x80
 800078a:	04db      	lsls	r3, r3, #19
 800078c:	4318      	orrs	r0, r3
 800078e:	2a1b      	cmp	r2, #27
 8000790:	dc00      	bgt.n	8000794 <__aeabi_fsub+0x4c>
 8000792:	e0e3      	b.n	800095c <__aeabi_fsub+0x214>
 8000794:	2301      	movs	r3, #1
 8000796:	4662      	mov	r2, ip
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	015a      	lsls	r2, r3, #5
 800079c:	d400      	bmi.n	80007a0 <__aeabi_fsub+0x58>
 800079e:	e0ac      	b.n	80008fa <__aeabi_fsub+0x1b2>
 80007a0:	019b      	lsls	r3, r3, #6
 80007a2:	099e      	lsrs	r6, r3, #6
 80007a4:	0030      	movs	r0, r6
 80007a6:	f002 f897 	bl	80028d8 <__clzsi2>
 80007aa:	0033      	movs	r3, r6
 80007ac:	3805      	subs	r0, #5
 80007ae:	4083      	lsls	r3, r0
 80007b0:	4285      	cmp	r5, r0
 80007b2:	dc00      	bgt.n	80007b6 <__aeabi_fsub+0x6e>
 80007b4:	e0c6      	b.n	8000944 <__aeabi_fsub+0x1fc>
 80007b6:	4ab2      	ldr	r2, [pc, #712]	; (8000a80 <__aeabi_fsub+0x338>)
 80007b8:	1a2d      	subs	r5, r5, r0
 80007ba:	4013      	ands	r3, r2
 80007bc:	075a      	lsls	r2, r3, #29
 80007be:	d004      	beq.n	80007ca <__aeabi_fsub+0x82>
 80007c0:	220f      	movs	r2, #15
 80007c2:	401a      	ands	r2, r3
 80007c4:	2a04      	cmp	r2, #4
 80007c6:	d000      	beq.n	80007ca <__aeabi_fsub+0x82>
 80007c8:	3304      	adds	r3, #4
 80007ca:	015a      	lsls	r2, r3, #5
 80007cc:	d400      	bmi.n	80007d0 <__aeabi_fsub+0x88>
 80007ce:	e097      	b.n	8000900 <__aeabi_fsub+0x1b8>
 80007d0:	1c6a      	adds	r2, r5, #1
 80007d2:	2dfe      	cmp	r5, #254	; 0xfe
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fsub+0x90>
 80007d6:	e084      	b.n	80008e2 <__aeabi_fsub+0x19a>
 80007d8:	019b      	lsls	r3, r3, #6
 80007da:	0a5e      	lsrs	r6, r3, #9
 80007dc:	b2d2      	uxtb	r2, r2
 80007de:	05d0      	lsls	r0, r2, #23
 80007e0:	4330      	orrs	r0, r6
 80007e2:	07e4      	lsls	r4, r4, #31
 80007e4:	4320      	orrs	r0, r4
 80007e6:	bc80      	pop	{r7}
 80007e8:	46b8      	mov	r8, r7
 80007ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ec:	1bea      	subs	r2, r5, r7
 80007ee:	2a00      	cmp	r2, #0
 80007f0:	dd41      	ble.n	8000876 <__aeabi_fsub+0x12e>
 80007f2:	2f00      	cmp	r7, #0
 80007f4:	d06b      	beq.n	80008ce <__aeabi_fsub+0x186>
 80007f6:	2dff      	cmp	r5, #255	; 0xff
 80007f8:	d100      	bne.n	80007fc <__aeabi_fsub+0xb4>
 80007fa:	e097      	b.n	800092c <__aeabi_fsub+0x1e4>
 80007fc:	2380      	movs	r3, #128	; 0x80
 80007fe:	04db      	lsls	r3, r3, #19
 8000800:	4318      	orrs	r0, r3
 8000802:	2a1b      	cmp	r2, #27
 8000804:	dc00      	bgt.n	8000808 <__aeabi_fsub+0xc0>
 8000806:	e0cc      	b.n	80009a2 <__aeabi_fsub+0x25a>
 8000808:	2301      	movs	r3, #1
 800080a:	4463      	add	r3, ip
 800080c:	015a      	lsls	r2, r3, #5
 800080e:	d574      	bpl.n	80008fa <__aeabi_fsub+0x1b2>
 8000810:	3501      	adds	r5, #1
 8000812:	2dff      	cmp	r5, #255	; 0xff
 8000814:	d065      	beq.n	80008e2 <__aeabi_fsub+0x19a>
 8000816:	2201      	movs	r2, #1
 8000818:	499a      	ldr	r1, [pc, #616]	; (8000a84 <__aeabi_fsub+0x33c>)
 800081a:	401a      	ands	r2, r3
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	400b      	ands	r3, r1
 8000820:	4313      	orrs	r3, r2
 8000822:	e7cb      	b.n	80007bc <__aeabi_fsub+0x74>
 8000824:	2800      	cmp	r0, #0
 8000826:	d01f      	beq.n	8000868 <__aeabi_fsub+0x120>
 8000828:	428c      	cmp	r4, r1
 800082a:	d022      	beq.n	8000872 <__aeabi_fsub+0x12a>
 800082c:	002a      	movs	r2, r5
 800082e:	3aff      	subs	r2, #255	; 0xff
 8000830:	2a00      	cmp	r2, #0
 8000832:	d035      	beq.n	80008a0 <__aeabi_fsub+0x158>
 8000834:	1b7a      	subs	r2, r7, r5
 8000836:	2d00      	cmp	r5, #0
 8000838:	d000      	beq.n	800083c <__aeabi_fsub+0xf4>
 800083a:	e099      	b.n	8000970 <__aeabi_fsub+0x228>
 800083c:	4663      	mov	r3, ip
 800083e:	2b00      	cmp	r3, #0
 8000840:	d100      	bne.n	8000844 <__aeabi_fsub+0xfc>
 8000842:	e0dd      	b.n	8000a00 <__aeabi_fsub+0x2b8>
 8000844:	1e53      	subs	r3, r2, #1
 8000846:	2a01      	cmp	r2, #1
 8000848:	d100      	bne.n	800084c <__aeabi_fsub+0x104>
 800084a:	e105      	b.n	8000a58 <__aeabi_fsub+0x310>
 800084c:	2aff      	cmp	r2, #255	; 0xff
 800084e:	d06b      	beq.n	8000928 <__aeabi_fsub+0x1e0>
 8000850:	001a      	movs	r2, r3
 8000852:	e094      	b.n	800097e <__aeabi_fsub+0x236>
 8000854:	2800      	cmp	r0, #0
 8000856:	d073      	beq.n	8000940 <__aeabi_fsub+0x1f8>
 8000858:	1e51      	subs	r1, r2, #1
 800085a:	2a01      	cmp	r2, #1
 800085c:	d100      	bne.n	8000860 <__aeabi_fsub+0x118>
 800085e:	e0df      	b.n	8000a20 <__aeabi_fsub+0x2d8>
 8000860:	2aff      	cmp	r2, #255	; 0xff
 8000862:	d063      	beq.n	800092c <__aeabi_fsub+0x1e4>
 8000864:	000a      	movs	r2, r1
 8000866:	e792      	b.n	800078e <__aeabi_fsub+0x46>
 8000868:	2201      	movs	r2, #1
 800086a:	4051      	eors	r1, r2
 800086c:	42a1      	cmp	r1, r4
 800086e:	d000      	beq.n	8000872 <__aeabi_fsub+0x12a>
 8000870:	e782      	b.n	8000778 <__aeabi_fsub+0x30>
 8000872:	002a      	movs	r2, r5
 8000874:	3aff      	subs	r2, #255	; 0xff
 8000876:	2a00      	cmp	r2, #0
 8000878:	d036      	beq.n	80008e8 <__aeabi_fsub+0x1a0>
 800087a:	1b7a      	subs	r2, r7, r5
 800087c:	2d00      	cmp	r5, #0
 800087e:	d100      	bne.n	8000882 <__aeabi_fsub+0x13a>
 8000880:	e0aa      	b.n	80009d8 <__aeabi_fsub+0x290>
 8000882:	2fff      	cmp	r7, #255	; 0xff
 8000884:	d100      	bne.n	8000888 <__aeabi_fsub+0x140>
 8000886:	e0da      	b.n	8000a3e <__aeabi_fsub+0x2f6>
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	4661      	mov	r1, ip
 800088c:	04db      	lsls	r3, r3, #19
 800088e:	4319      	orrs	r1, r3
 8000890:	468c      	mov	ip, r1
 8000892:	2a1b      	cmp	r2, #27
 8000894:	dc00      	bgt.n	8000898 <__aeabi_fsub+0x150>
 8000896:	e0d4      	b.n	8000a42 <__aeabi_fsub+0x2fa>
 8000898:	2301      	movs	r3, #1
 800089a:	003d      	movs	r5, r7
 800089c:	181b      	adds	r3, r3, r0
 800089e:	e7b5      	b.n	800080c <__aeabi_fsub+0xc4>
 80008a0:	27fe      	movs	r7, #254	; 0xfe
 80008a2:	1c6a      	adds	r2, r5, #1
 80008a4:	4217      	tst	r7, r2
 80008a6:	d171      	bne.n	800098c <__aeabi_fsub+0x244>
 80008a8:	2d00      	cmp	r5, #0
 80008aa:	d000      	beq.n	80008ae <__aeabi_fsub+0x166>
 80008ac:	e09e      	b.n	80009ec <__aeabi_fsub+0x2a4>
 80008ae:	4663      	mov	r3, ip
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d100      	bne.n	80008b6 <__aeabi_fsub+0x16e>
 80008b4:	e0d5      	b.n	8000a62 <__aeabi_fsub+0x31a>
 80008b6:	2200      	movs	r2, #0
 80008b8:	2800      	cmp	r0, #0
 80008ba:	d100      	bne.n	80008be <__aeabi_fsub+0x176>
 80008bc:	e78f      	b.n	80007de <__aeabi_fsub+0x96>
 80008be:	1a1b      	subs	r3, r3, r0
 80008c0:	015e      	lsls	r6, r3, #5
 80008c2:	d400      	bmi.n	80008c6 <__aeabi_fsub+0x17e>
 80008c4:	e0d6      	b.n	8000a74 <__aeabi_fsub+0x32c>
 80008c6:	4663      	mov	r3, ip
 80008c8:	000c      	movs	r4, r1
 80008ca:	1ac3      	subs	r3, r0, r3
 80008cc:	e776      	b.n	80007bc <__aeabi_fsub+0x74>
 80008ce:	2800      	cmp	r0, #0
 80008d0:	d036      	beq.n	8000940 <__aeabi_fsub+0x1f8>
 80008d2:	1e51      	subs	r1, r2, #1
 80008d4:	2a01      	cmp	r2, #1
 80008d6:	d100      	bne.n	80008da <__aeabi_fsub+0x192>
 80008d8:	e09a      	b.n	8000a10 <__aeabi_fsub+0x2c8>
 80008da:	2aff      	cmp	r2, #255	; 0xff
 80008dc:	d026      	beq.n	800092c <__aeabi_fsub+0x1e4>
 80008de:	000a      	movs	r2, r1
 80008e0:	e78f      	b.n	8000802 <__aeabi_fsub+0xba>
 80008e2:	22ff      	movs	r2, #255	; 0xff
 80008e4:	2600      	movs	r6, #0
 80008e6:	e77a      	b.n	80007de <__aeabi_fsub+0x96>
 80008e8:	27fe      	movs	r7, #254	; 0xfe
 80008ea:	1c6a      	adds	r2, r5, #1
 80008ec:	4217      	tst	r7, r2
 80008ee:	d062      	beq.n	80009b6 <__aeabi_fsub+0x26e>
 80008f0:	2aff      	cmp	r2, #255	; 0xff
 80008f2:	d0f6      	beq.n	80008e2 <__aeabi_fsub+0x19a>
 80008f4:	0015      	movs	r5, r2
 80008f6:	4460      	add	r0, ip
 80008f8:	0843      	lsrs	r3, r0, #1
 80008fa:	075a      	lsls	r2, r3, #29
 80008fc:	d000      	beq.n	8000900 <__aeabi_fsub+0x1b8>
 80008fe:	e75f      	b.n	80007c0 <__aeabi_fsub+0x78>
 8000900:	08db      	lsrs	r3, r3, #3
 8000902:	2dff      	cmp	r5, #255	; 0xff
 8000904:	d012      	beq.n	800092c <__aeabi_fsub+0x1e4>
 8000906:	025b      	lsls	r3, r3, #9
 8000908:	0a5e      	lsrs	r6, r3, #9
 800090a:	b2ea      	uxtb	r2, r5
 800090c:	e767      	b.n	80007de <__aeabi_fsub+0x96>
 800090e:	4662      	mov	r2, ip
 8000910:	2a00      	cmp	r2, #0
 8000912:	d100      	bne.n	8000916 <__aeabi_fsub+0x1ce>
 8000914:	e093      	b.n	8000a3e <__aeabi_fsub+0x2f6>
 8000916:	2800      	cmp	r0, #0
 8000918:	d008      	beq.n	800092c <__aeabi_fsub+0x1e4>
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	03d2      	lsls	r2, r2, #15
 800091e:	4213      	tst	r3, r2
 8000920:	d004      	beq.n	800092c <__aeabi_fsub+0x1e4>
 8000922:	4640      	mov	r0, r8
 8000924:	4210      	tst	r0, r2
 8000926:	d101      	bne.n	800092c <__aeabi_fsub+0x1e4>
 8000928:	000c      	movs	r4, r1
 800092a:	4643      	mov	r3, r8
 800092c:	2b00      	cmp	r3, #0
 800092e:	d0d8      	beq.n	80008e2 <__aeabi_fsub+0x19a>
 8000930:	2680      	movs	r6, #128	; 0x80
 8000932:	03f6      	lsls	r6, r6, #15
 8000934:	431e      	orrs	r6, r3
 8000936:	0276      	lsls	r6, r6, #9
 8000938:	22ff      	movs	r2, #255	; 0xff
 800093a:	0a76      	lsrs	r6, r6, #9
 800093c:	e74f      	b.n	80007de <__aeabi_fsub+0x96>
 800093e:	4643      	mov	r3, r8
 8000940:	0015      	movs	r5, r2
 8000942:	e7de      	b.n	8000902 <__aeabi_fsub+0x1ba>
 8000944:	2220      	movs	r2, #32
 8000946:	1b40      	subs	r0, r0, r5
 8000948:	3001      	adds	r0, #1
 800094a:	1a12      	subs	r2, r2, r0
 800094c:	0019      	movs	r1, r3
 800094e:	4093      	lsls	r3, r2
 8000950:	40c1      	lsrs	r1, r0
 8000952:	1e5a      	subs	r2, r3, #1
 8000954:	4193      	sbcs	r3, r2
 8000956:	2500      	movs	r5, #0
 8000958:	430b      	orrs	r3, r1
 800095a:	e72f      	b.n	80007bc <__aeabi_fsub+0x74>
 800095c:	2320      	movs	r3, #32
 800095e:	1a9b      	subs	r3, r3, r2
 8000960:	0001      	movs	r1, r0
 8000962:	4098      	lsls	r0, r3
 8000964:	0003      	movs	r3, r0
 8000966:	40d1      	lsrs	r1, r2
 8000968:	1e5a      	subs	r2, r3, #1
 800096a:	4193      	sbcs	r3, r2
 800096c:	430b      	orrs	r3, r1
 800096e:	e712      	b.n	8000796 <__aeabi_fsub+0x4e>
 8000970:	2fff      	cmp	r7, #255	; 0xff
 8000972:	d0d9      	beq.n	8000928 <__aeabi_fsub+0x1e0>
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	4664      	mov	r4, ip
 8000978:	04db      	lsls	r3, r3, #19
 800097a:	431c      	orrs	r4, r3
 800097c:	46a4      	mov	ip, r4
 800097e:	2a1b      	cmp	r2, #27
 8000980:	dd52      	ble.n	8000a28 <__aeabi_fsub+0x2e0>
 8000982:	2301      	movs	r3, #1
 8000984:	000c      	movs	r4, r1
 8000986:	003d      	movs	r5, r7
 8000988:	1ac3      	subs	r3, r0, r3
 800098a:	e706      	b.n	800079a <__aeabi_fsub+0x52>
 800098c:	4663      	mov	r3, ip
 800098e:	1a1e      	subs	r6, r3, r0
 8000990:	0173      	lsls	r3, r6, #5
 8000992:	d439      	bmi.n	8000a08 <__aeabi_fsub+0x2c0>
 8000994:	2e00      	cmp	r6, #0
 8000996:	d000      	beq.n	800099a <__aeabi_fsub+0x252>
 8000998:	e704      	b.n	80007a4 <__aeabi_fsub+0x5c>
 800099a:	2400      	movs	r4, #0
 800099c:	2200      	movs	r2, #0
 800099e:	2600      	movs	r6, #0
 80009a0:	e71d      	b.n	80007de <__aeabi_fsub+0x96>
 80009a2:	2320      	movs	r3, #32
 80009a4:	1a9b      	subs	r3, r3, r2
 80009a6:	0001      	movs	r1, r0
 80009a8:	4098      	lsls	r0, r3
 80009aa:	0003      	movs	r3, r0
 80009ac:	40d1      	lsrs	r1, r2
 80009ae:	1e5a      	subs	r2, r3, #1
 80009b0:	4193      	sbcs	r3, r2
 80009b2:	430b      	orrs	r3, r1
 80009b4:	e729      	b.n	800080a <__aeabi_fsub+0xc2>
 80009b6:	2d00      	cmp	r5, #0
 80009b8:	d1a9      	bne.n	800090e <__aeabi_fsub+0x1c6>
 80009ba:	4663      	mov	r3, ip
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d056      	beq.n	8000a6e <__aeabi_fsub+0x326>
 80009c0:	2200      	movs	r2, #0
 80009c2:	2800      	cmp	r0, #0
 80009c4:	d100      	bne.n	80009c8 <__aeabi_fsub+0x280>
 80009c6:	e70a      	b.n	80007de <__aeabi_fsub+0x96>
 80009c8:	0003      	movs	r3, r0
 80009ca:	4463      	add	r3, ip
 80009cc:	015a      	lsls	r2, r3, #5
 80009ce:	d594      	bpl.n	80008fa <__aeabi_fsub+0x1b2>
 80009d0:	4a2b      	ldr	r2, [pc, #172]	; (8000a80 <__aeabi_fsub+0x338>)
 80009d2:	3501      	adds	r5, #1
 80009d4:	4013      	ands	r3, r2
 80009d6:	e790      	b.n	80008fa <__aeabi_fsub+0x1b2>
 80009d8:	4663      	mov	r3, ip
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d0af      	beq.n	800093e <__aeabi_fsub+0x1f6>
 80009de:	1e53      	subs	r3, r2, #1
 80009e0:	2a01      	cmp	r2, #1
 80009e2:	d015      	beq.n	8000a10 <__aeabi_fsub+0x2c8>
 80009e4:	2aff      	cmp	r2, #255	; 0xff
 80009e6:	d02a      	beq.n	8000a3e <__aeabi_fsub+0x2f6>
 80009e8:	001a      	movs	r2, r3
 80009ea:	e752      	b.n	8000892 <__aeabi_fsub+0x14a>
 80009ec:	4662      	mov	r2, ip
 80009ee:	2a00      	cmp	r2, #0
 80009f0:	d191      	bne.n	8000916 <__aeabi_fsub+0x1ce>
 80009f2:	2800      	cmp	r0, #0
 80009f4:	d198      	bne.n	8000928 <__aeabi_fsub+0x1e0>
 80009f6:	2680      	movs	r6, #128	; 0x80
 80009f8:	2400      	movs	r4, #0
 80009fa:	22ff      	movs	r2, #255	; 0xff
 80009fc:	03f6      	lsls	r6, r6, #15
 80009fe:	e6ee      	b.n	80007de <__aeabi_fsub+0x96>
 8000a00:	000c      	movs	r4, r1
 8000a02:	4643      	mov	r3, r8
 8000a04:	0015      	movs	r5, r2
 8000a06:	e77c      	b.n	8000902 <__aeabi_fsub+0x1ba>
 8000a08:	4663      	mov	r3, ip
 8000a0a:	000c      	movs	r4, r1
 8000a0c:	1ac6      	subs	r6, r0, r3
 8000a0e:	e6c9      	b.n	80007a4 <__aeabi_fsub+0x5c>
 8000a10:	0003      	movs	r3, r0
 8000a12:	4463      	add	r3, ip
 8000a14:	2501      	movs	r5, #1
 8000a16:	015a      	lsls	r2, r3, #5
 8000a18:	d400      	bmi.n	8000a1c <__aeabi_fsub+0x2d4>
 8000a1a:	e76e      	b.n	80008fa <__aeabi_fsub+0x1b2>
 8000a1c:	2502      	movs	r5, #2
 8000a1e:	e6fa      	b.n	8000816 <__aeabi_fsub+0xce>
 8000a20:	4663      	mov	r3, ip
 8000a22:	2501      	movs	r5, #1
 8000a24:	1a1b      	subs	r3, r3, r0
 8000a26:	e6b8      	b.n	800079a <__aeabi_fsub+0x52>
 8000a28:	4664      	mov	r4, ip
 8000a2a:	2320      	movs	r3, #32
 8000a2c:	40d4      	lsrs	r4, r2
 8000a2e:	1a9b      	subs	r3, r3, r2
 8000a30:	4662      	mov	r2, ip
 8000a32:	409a      	lsls	r2, r3
 8000a34:	0013      	movs	r3, r2
 8000a36:	1e5a      	subs	r2, r3, #1
 8000a38:	4193      	sbcs	r3, r2
 8000a3a:	4323      	orrs	r3, r4
 8000a3c:	e7a2      	b.n	8000984 <__aeabi_fsub+0x23c>
 8000a3e:	4643      	mov	r3, r8
 8000a40:	e774      	b.n	800092c <__aeabi_fsub+0x1e4>
 8000a42:	4661      	mov	r1, ip
 8000a44:	2320      	movs	r3, #32
 8000a46:	40d1      	lsrs	r1, r2
 8000a48:	1a9b      	subs	r3, r3, r2
 8000a4a:	4662      	mov	r2, ip
 8000a4c:	409a      	lsls	r2, r3
 8000a4e:	0013      	movs	r3, r2
 8000a50:	1e5a      	subs	r2, r3, #1
 8000a52:	4193      	sbcs	r3, r2
 8000a54:	430b      	orrs	r3, r1
 8000a56:	e720      	b.n	800089a <__aeabi_fsub+0x152>
 8000a58:	4663      	mov	r3, ip
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	2501      	movs	r5, #1
 8000a5e:	1ac3      	subs	r3, r0, r3
 8000a60:	e69b      	b.n	800079a <__aeabi_fsub+0x52>
 8000a62:	2800      	cmp	r0, #0
 8000a64:	d099      	beq.n	800099a <__aeabi_fsub+0x252>
 8000a66:	000c      	movs	r4, r1
 8000a68:	4646      	mov	r6, r8
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	e6b7      	b.n	80007de <__aeabi_fsub+0x96>
 8000a6e:	4646      	mov	r6, r8
 8000a70:	2200      	movs	r2, #0
 8000a72:	e6b4      	b.n	80007de <__aeabi_fsub+0x96>
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d000      	beq.n	8000a7a <__aeabi_fsub+0x332>
 8000a78:	e73f      	b.n	80008fa <__aeabi_fsub+0x1b2>
 8000a7a:	2400      	movs	r4, #0
 8000a7c:	2600      	movs	r6, #0
 8000a7e:	e6ae      	b.n	80007de <__aeabi_fsub+0x96>
 8000a80:	fbffffff 	.word	0xfbffffff
 8000a84:	7dffffff 	.word	0x7dffffff

08000a88 <__aeabi_f2iz>:
 8000a88:	0241      	lsls	r1, r0, #9
 8000a8a:	0042      	lsls	r2, r0, #1
 8000a8c:	0fc3      	lsrs	r3, r0, #31
 8000a8e:	0a49      	lsrs	r1, r1, #9
 8000a90:	2000      	movs	r0, #0
 8000a92:	0e12      	lsrs	r2, r2, #24
 8000a94:	2a7e      	cmp	r2, #126	; 0x7e
 8000a96:	dd03      	ble.n	8000aa0 <__aeabi_f2iz+0x18>
 8000a98:	2a9d      	cmp	r2, #157	; 0x9d
 8000a9a:	dd02      	ble.n	8000aa2 <__aeabi_f2iz+0x1a>
 8000a9c:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <__aeabi_f2iz+0x3c>)
 8000a9e:	1898      	adds	r0, r3, r2
 8000aa0:	4770      	bx	lr
 8000aa2:	2080      	movs	r0, #128	; 0x80
 8000aa4:	0400      	lsls	r0, r0, #16
 8000aa6:	4301      	orrs	r1, r0
 8000aa8:	2a95      	cmp	r2, #149	; 0x95
 8000aaa:	dc07      	bgt.n	8000abc <__aeabi_f2iz+0x34>
 8000aac:	2096      	movs	r0, #150	; 0x96
 8000aae:	1a82      	subs	r2, r0, r2
 8000ab0:	40d1      	lsrs	r1, r2
 8000ab2:	4248      	negs	r0, r1
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d1f3      	bne.n	8000aa0 <__aeabi_f2iz+0x18>
 8000ab8:	0008      	movs	r0, r1
 8000aba:	e7f1      	b.n	8000aa0 <__aeabi_f2iz+0x18>
 8000abc:	3a96      	subs	r2, #150	; 0x96
 8000abe:	4091      	lsls	r1, r2
 8000ac0:	e7f7      	b.n	8000ab2 <__aeabi_f2iz+0x2a>
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	7fffffff 	.word	0x7fffffff

08000ac8 <__aeabi_dadd>:
 8000ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aca:	464f      	mov	r7, r9
 8000acc:	4646      	mov	r6, r8
 8000ace:	46d6      	mov	lr, sl
 8000ad0:	0004      	movs	r4, r0
 8000ad2:	b5c0      	push	{r6, r7, lr}
 8000ad4:	001f      	movs	r7, r3
 8000ad6:	030b      	lsls	r3, r1, #12
 8000ad8:	0010      	movs	r0, r2
 8000ada:	004e      	lsls	r6, r1, #1
 8000adc:	0a5b      	lsrs	r3, r3, #9
 8000ade:	0fcd      	lsrs	r5, r1, #31
 8000ae0:	0f61      	lsrs	r1, r4, #29
 8000ae2:	007a      	lsls	r2, r7, #1
 8000ae4:	4319      	orrs	r1, r3
 8000ae6:	00e3      	lsls	r3, r4, #3
 8000ae8:	033c      	lsls	r4, r7, #12
 8000aea:	0fff      	lsrs	r7, r7, #31
 8000aec:	46bc      	mov	ip, r7
 8000aee:	0a64      	lsrs	r4, r4, #9
 8000af0:	0f47      	lsrs	r7, r0, #29
 8000af2:	4327      	orrs	r7, r4
 8000af4:	0d76      	lsrs	r6, r6, #21
 8000af6:	0d52      	lsrs	r2, r2, #21
 8000af8:	00c0      	lsls	r0, r0, #3
 8000afa:	46b9      	mov	r9, r7
 8000afc:	4680      	mov	r8, r0
 8000afe:	1ab7      	subs	r7, r6, r2
 8000b00:	4565      	cmp	r5, ip
 8000b02:	d100      	bne.n	8000b06 <__aeabi_dadd+0x3e>
 8000b04:	e09b      	b.n	8000c3e <__aeabi_dadd+0x176>
 8000b06:	2f00      	cmp	r7, #0
 8000b08:	dc00      	bgt.n	8000b0c <__aeabi_dadd+0x44>
 8000b0a:	e084      	b.n	8000c16 <__aeabi_dadd+0x14e>
 8000b0c:	2a00      	cmp	r2, #0
 8000b0e:	d100      	bne.n	8000b12 <__aeabi_dadd+0x4a>
 8000b10:	e0be      	b.n	8000c90 <__aeabi_dadd+0x1c8>
 8000b12:	4ac8      	ldr	r2, [pc, #800]	; (8000e34 <__aeabi_dadd+0x36c>)
 8000b14:	4296      	cmp	r6, r2
 8000b16:	d100      	bne.n	8000b1a <__aeabi_dadd+0x52>
 8000b18:	e124      	b.n	8000d64 <__aeabi_dadd+0x29c>
 8000b1a:	2280      	movs	r2, #128	; 0x80
 8000b1c:	464c      	mov	r4, r9
 8000b1e:	0412      	lsls	r2, r2, #16
 8000b20:	4314      	orrs	r4, r2
 8000b22:	46a1      	mov	r9, r4
 8000b24:	2f38      	cmp	r7, #56	; 0x38
 8000b26:	dd00      	ble.n	8000b2a <__aeabi_dadd+0x62>
 8000b28:	e167      	b.n	8000dfa <__aeabi_dadd+0x332>
 8000b2a:	2f1f      	cmp	r7, #31
 8000b2c:	dd00      	ble.n	8000b30 <__aeabi_dadd+0x68>
 8000b2e:	e1d6      	b.n	8000ede <__aeabi_dadd+0x416>
 8000b30:	2220      	movs	r2, #32
 8000b32:	464c      	mov	r4, r9
 8000b34:	1bd2      	subs	r2, r2, r7
 8000b36:	4094      	lsls	r4, r2
 8000b38:	46a2      	mov	sl, r4
 8000b3a:	4644      	mov	r4, r8
 8000b3c:	40fc      	lsrs	r4, r7
 8000b3e:	0020      	movs	r0, r4
 8000b40:	4654      	mov	r4, sl
 8000b42:	4304      	orrs	r4, r0
 8000b44:	4640      	mov	r0, r8
 8000b46:	4090      	lsls	r0, r2
 8000b48:	1e42      	subs	r2, r0, #1
 8000b4a:	4190      	sbcs	r0, r2
 8000b4c:	464a      	mov	r2, r9
 8000b4e:	40fa      	lsrs	r2, r7
 8000b50:	4304      	orrs	r4, r0
 8000b52:	1a89      	subs	r1, r1, r2
 8000b54:	1b1c      	subs	r4, r3, r4
 8000b56:	42a3      	cmp	r3, r4
 8000b58:	4192      	sbcs	r2, r2
 8000b5a:	4252      	negs	r2, r2
 8000b5c:	1a8b      	subs	r3, r1, r2
 8000b5e:	469a      	mov	sl, r3
 8000b60:	4653      	mov	r3, sl
 8000b62:	021b      	lsls	r3, r3, #8
 8000b64:	d400      	bmi.n	8000b68 <__aeabi_dadd+0xa0>
 8000b66:	e0d4      	b.n	8000d12 <__aeabi_dadd+0x24a>
 8000b68:	4653      	mov	r3, sl
 8000b6a:	025a      	lsls	r2, r3, #9
 8000b6c:	0a53      	lsrs	r3, r2, #9
 8000b6e:	469a      	mov	sl, r3
 8000b70:	4653      	mov	r3, sl
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d100      	bne.n	8000b78 <__aeabi_dadd+0xb0>
 8000b76:	e104      	b.n	8000d82 <__aeabi_dadd+0x2ba>
 8000b78:	4650      	mov	r0, sl
 8000b7a:	f001 fead 	bl	80028d8 <__clzsi2>
 8000b7e:	0003      	movs	r3, r0
 8000b80:	3b08      	subs	r3, #8
 8000b82:	2220      	movs	r2, #32
 8000b84:	0020      	movs	r0, r4
 8000b86:	1ad2      	subs	r2, r2, r3
 8000b88:	4651      	mov	r1, sl
 8000b8a:	40d0      	lsrs	r0, r2
 8000b8c:	4099      	lsls	r1, r3
 8000b8e:	0002      	movs	r2, r0
 8000b90:	409c      	lsls	r4, r3
 8000b92:	430a      	orrs	r2, r1
 8000b94:	42b3      	cmp	r3, r6
 8000b96:	da00      	bge.n	8000b9a <__aeabi_dadd+0xd2>
 8000b98:	e102      	b.n	8000da0 <__aeabi_dadd+0x2d8>
 8000b9a:	1b9b      	subs	r3, r3, r6
 8000b9c:	1c59      	adds	r1, r3, #1
 8000b9e:	291f      	cmp	r1, #31
 8000ba0:	dd00      	ble.n	8000ba4 <__aeabi_dadd+0xdc>
 8000ba2:	e0a7      	b.n	8000cf4 <__aeabi_dadd+0x22c>
 8000ba4:	2320      	movs	r3, #32
 8000ba6:	0010      	movs	r0, r2
 8000ba8:	0026      	movs	r6, r4
 8000baa:	1a5b      	subs	r3, r3, r1
 8000bac:	409c      	lsls	r4, r3
 8000bae:	4098      	lsls	r0, r3
 8000bb0:	40ce      	lsrs	r6, r1
 8000bb2:	40ca      	lsrs	r2, r1
 8000bb4:	1e63      	subs	r3, r4, #1
 8000bb6:	419c      	sbcs	r4, r3
 8000bb8:	4330      	orrs	r0, r6
 8000bba:	4692      	mov	sl, r2
 8000bbc:	2600      	movs	r6, #0
 8000bbe:	4304      	orrs	r4, r0
 8000bc0:	0763      	lsls	r3, r4, #29
 8000bc2:	d009      	beq.n	8000bd8 <__aeabi_dadd+0x110>
 8000bc4:	230f      	movs	r3, #15
 8000bc6:	4023      	ands	r3, r4
 8000bc8:	2b04      	cmp	r3, #4
 8000bca:	d005      	beq.n	8000bd8 <__aeabi_dadd+0x110>
 8000bcc:	1d23      	adds	r3, r4, #4
 8000bce:	42a3      	cmp	r3, r4
 8000bd0:	41a4      	sbcs	r4, r4
 8000bd2:	4264      	negs	r4, r4
 8000bd4:	44a2      	add	sl, r4
 8000bd6:	001c      	movs	r4, r3
 8000bd8:	4653      	mov	r3, sl
 8000bda:	021b      	lsls	r3, r3, #8
 8000bdc:	d400      	bmi.n	8000be0 <__aeabi_dadd+0x118>
 8000bde:	e09b      	b.n	8000d18 <__aeabi_dadd+0x250>
 8000be0:	4b94      	ldr	r3, [pc, #592]	; (8000e34 <__aeabi_dadd+0x36c>)
 8000be2:	3601      	adds	r6, #1
 8000be4:	429e      	cmp	r6, r3
 8000be6:	d100      	bne.n	8000bea <__aeabi_dadd+0x122>
 8000be8:	e0b8      	b.n	8000d5c <__aeabi_dadd+0x294>
 8000bea:	4653      	mov	r3, sl
 8000bec:	4992      	ldr	r1, [pc, #584]	; (8000e38 <__aeabi_dadd+0x370>)
 8000bee:	08e4      	lsrs	r4, r4, #3
 8000bf0:	400b      	ands	r3, r1
 8000bf2:	0019      	movs	r1, r3
 8000bf4:	075b      	lsls	r3, r3, #29
 8000bf6:	4323      	orrs	r3, r4
 8000bf8:	0572      	lsls	r2, r6, #21
 8000bfa:	024c      	lsls	r4, r1, #9
 8000bfc:	0b24      	lsrs	r4, r4, #12
 8000bfe:	0d52      	lsrs	r2, r2, #21
 8000c00:	0512      	lsls	r2, r2, #20
 8000c02:	07ed      	lsls	r5, r5, #31
 8000c04:	4322      	orrs	r2, r4
 8000c06:	432a      	orrs	r2, r5
 8000c08:	0018      	movs	r0, r3
 8000c0a:	0011      	movs	r1, r2
 8000c0c:	bce0      	pop	{r5, r6, r7}
 8000c0e:	46ba      	mov	sl, r7
 8000c10:	46b1      	mov	r9, r6
 8000c12:	46a8      	mov	r8, r5
 8000c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c16:	2f00      	cmp	r7, #0
 8000c18:	d048      	beq.n	8000cac <__aeabi_dadd+0x1e4>
 8000c1a:	1b97      	subs	r7, r2, r6
 8000c1c:	2e00      	cmp	r6, #0
 8000c1e:	d000      	beq.n	8000c22 <__aeabi_dadd+0x15a>
 8000c20:	e10e      	b.n	8000e40 <__aeabi_dadd+0x378>
 8000c22:	000c      	movs	r4, r1
 8000c24:	431c      	orrs	r4, r3
 8000c26:	d100      	bne.n	8000c2a <__aeabi_dadd+0x162>
 8000c28:	e1b7      	b.n	8000f9a <__aeabi_dadd+0x4d2>
 8000c2a:	1e7c      	subs	r4, r7, #1
 8000c2c:	2f01      	cmp	r7, #1
 8000c2e:	d100      	bne.n	8000c32 <__aeabi_dadd+0x16a>
 8000c30:	e226      	b.n	8001080 <__aeabi_dadd+0x5b8>
 8000c32:	4d80      	ldr	r5, [pc, #512]	; (8000e34 <__aeabi_dadd+0x36c>)
 8000c34:	42af      	cmp	r7, r5
 8000c36:	d100      	bne.n	8000c3a <__aeabi_dadd+0x172>
 8000c38:	e1d5      	b.n	8000fe6 <__aeabi_dadd+0x51e>
 8000c3a:	0027      	movs	r7, r4
 8000c3c:	e107      	b.n	8000e4e <__aeabi_dadd+0x386>
 8000c3e:	2f00      	cmp	r7, #0
 8000c40:	dc00      	bgt.n	8000c44 <__aeabi_dadd+0x17c>
 8000c42:	e0b2      	b.n	8000daa <__aeabi_dadd+0x2e2>
 8000c44:	2a00      	cmp	r2, #0
 8000c46:	d047      	beq.n	8000cd8 <__aeabi_dadd+0x210>
 8000c48:	4a7a      	ldr	r2, [pc, #488]	; (8000e34 <__aeabi_dadd+0x36c>)
 8000c4a:	4296      	cmp	r6, r2
 8000c4c:	d100      	bne.n	8000c50 <__aeabi_dadd+0x188>
 8000c4e:	e089      	b.n	8000d64 <__aeabi_dadd+0x29c>
 8000c50:	2280      	movs	r2, #128	; 0x80
 8000c52:	464c      	mov	r4, r9
 8000c54:	0412      	lsls	r2, r2, #16
 8000c56:	4314      	orrs	r4, r2
 8000c58:	46a1      	mov	r9, r4
 8000c5a:	2f38      	cmp	r7, #56	; 0x38
 8000c5c:	dc6b      	bgt.n	8000d36 <__aeabi_dadd+0x26e>
 8000c5e:	2f1f      	cmp	r7, #31
 8000c60:	dc00      	bgt.n	8000c64 <__aeabi_dadd+0x19c>
 8000c62:	e16e      	b.n	8000f42 <__aeabi_dadd+0x47a>
 8000c64:	003a      	movs	r2, r7
 8000c66:	4648      	mov	r0, r9
 8000c68:	3a20      	subs	r2, #32
 8000c6a:	40d0      	lsrs	r0, r2
 8000c6c:	4684      	mov	ip, r0
 8000c6e:	2f20      	cmp	r7, #32
 8000c70:	d007      	beq.n	8000c82 <__aeabi_dadd+0x1ba>
 8000c72:	2240      	movs	r2, #64	; 0x40
 8000c74:	4648      	mov	r0, r9
 8000c76:	1bd2      	subs	r2, r2, r7
 8000c78:	4090      	lsls	r0, r2
 8000c7a:	0002      	movs	r2, r0
 8000c7c:	4640      	mov	r0, r8
 8000c7e:	4310      	orrs	r0, r2
 8000c80:	4680      	mov	r8, r0
 8000c82:	4640      	mov	r0, r8
 8000c84:	1e42      	subs	r2, r0, #1
 8000c86:	4190      	sbcs	r0, r2
 8000c88:	4662      	mov	r2, ip
 8000c8a:	0004      	movs	r4, r0
 8000c8c:	4314      	orrs	r4, r2
 8000c8e:	e057      	b.n	8000d40 <__aeabi_dadd+0x278>
 8000c90:	464a      	mov	r2, r9
 8000c92:	4302      	orrs	r2, r0
 8000c94:	d100      	bne.n	8000c98 <__aeabi_dadd+0x1d0>
 8000c96:	e103      	b.n	8000ea0 <__aeabi_dadd+0x3d8>
 8000c98:	1e7a      	subs	r2, r7, #1
 8000c9a:	2f01      	cmp	r7, #1
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_dadd+0x1d8>
 8000c9e:	e193      	b.n	8000fc8 <__aeabi_dadd+0x500>
 8000ca0:	4c64      	ldr	r4, [pc, #400]	; (8000e34 <__aeabi_dadd+0x36c>)
 8000ca2:	42a7      	cmp	r7, r4
 8000ca4:	d100      	bne.n	8000ca8 <__aeabi_dadd+0x1e0>
 8000ca6:	e18a      	b.n	8000fbe <__aeabi_dadd+0x4f6>
 8000ca8:	0017      	movs	r7, r2
 8000caa:	e73b      	b.n	8000b24 <__aeabi_dadd+0x5c>
 8000cac:	4c63      	ldr	r4, [pc, #396]	; (8000e3c <__aeabi_dadd+0x374>)
 8000cae:	1c72      	adds	r2, r6, #1
 8000cb0:	4222      	tst	r2, r4
 8000cb2:	d000      	beq.n	8000cb6 <__aeabi_dadd+0x1ee>
 8000cb4:	e0e0      	b.n	8000e78 <__aeabi_dadd+0x3b0>
 8000cb6:	000a      	movs	r2, r1
 8000cb8:	431a      	orrs	r2, r3
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	d000      	beq.n	8000cc0 <__aeabi_dadd+0x1f8>
 8000cbe:	e174      	b.n	8000faa <__aeabi_dadd+0x4e2>
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	d100      	bne.n	8000cc6 <__aeabi_dadd+0x1fe>
 8000cc4:	e1d0      	b.n	8001068 <__aeabi_dadd+0x5a0>
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	4302      	orrs	r2, r0
 8000cca:	d000      	beq.n	8000cce <__aeabi_dadd+0x206>
 8000ccc:	e1e3      	b.n	8001096 <__aeabi_dadd+0x5ce>
 8000cce:	074a      	lsls	r2, r1, #29
 8000cd0:	08db      	lsrs	r3, r3, #3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	08c9      	lsrs	r1, r1, #3
 8000cd6:	e029      	b.n	8000d2c <__aeabi_dadd+0x264>
 8000cd8:	464a      	mov	r2, r9
 8000cda:	4302      	orrs	r2, r0
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_dadd+0x218>
 8000cde:	e17d      	b.n	8000fdc <__aeabi_dadd+0x514>
 8000ce0:	1e7a      	subs	r2, r7, #1
 8000ce2:	2f01      	cmp	r7, #1
 8000ce4:	d100      	bne.n	8000ce8 <__aeabi_dadd+0x220>
 8000ce6:	e0e0      	b.n	8000eaa <__aeabi_dadd+0x3e2>
 8000ce8:	4c52      	ldr	r4, [pc, #328]	; (8000e34 <__aeabi_dadd+0x36c>)
 8000cea:	42a7      	cmp	r7, r4
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_dadd+0x228>
 8000cee:	e166      	b.n	8000fbe <__aeabi_dadd+0x4f6>
 8000cf0:	0017      	movs	r7, r2
 8000cf2:	e7b2      	b.n	8000c5a <__aeabi_dadd+0x192>
 8000cf4:	0010      	movs	r0, r2
 8000cf6:	3b1f      	subs	r3, #31
 8000cf8:	40d8      	lsrs	r0, r3
 8000cfa:	2920      	cmp	r1, #32
 8000cfc:	d003      	beq.n	8000d06 <__aeabi_dadd+0x23e>
 8000cfe:	2340      	movs	r3, #64	; 0x40
 8000d00:	1a5b      	subs	r3, r3, r1
 8000d02:	409a      	lsls	r2, r3
 8000d04:	4314      	orrs	r4, r2
 8000d06:	1e63      	subs	r3, r4, #1
 8000d08:	419c      	sbcs	r4, r3
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	469a      	mov	sl, r3
 8000d10:	4304      	orrs	r4, r0
 8000d12:	0763      	lsls	r3, r4, #29
 8000d14:	d000      	beq.n	8000d18 <__aeabi_dadd+0x250>
 8000d16:	e755      	b.n	8000bc4 <__aeabi_dadd+0xfc>
 8000d18:	4652      	mov	r2, sl
 8000d1a:	08e3      	lsrs	r3, r4, #3
 8000d1c:	0752      	lsls	r2, r2, #29
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	4652      	mov	r2, sl
 8000d22:	0037      	movs	r7, r6
 8000d24:	08d1      	lsrs	r1, r2, #3
 8000d26:	4a43      	ldr	r2, [pc, #268]	; (8000e34 <__aeabi_dadd+0x36c>)
 8000d28:	4297      	cmp	r7, r2
 8000d2a:	d01f      	beq.n	8000d6c <__aeabi_dadd+0x2a4>
 8000d2c:	0309      	lsls	r1, r1, #12
 8000d2e:	057a      	lsls	r2, r7, #21
 8000d30:	0b0c      	lsrs	r4, r1, #12
 8000d32:	0d52      	lsrs	r2, r2, #21
 8000d34:	e764      	b.n	8000c00 <__aeabi_dadd+0x138>
 8000d36:	4642      	mov	r2, r8
 8000d38:	464c      	mov	r4, r9
 8000d3a:	4314      	orrs	r4, r2
 8000d3c:	1e62      	subs	r2, r4, #1
 8000d3e:	4194      	sbcs	r4, r2
 8000d40:	18e4      	adds	r4, r4, r3
 8000d42:	429c      	cmp	r4, r3
 8000d44:	4192      	sbcs	r2, r2
 8000d46:	4252      	negs	r2, r2
 8000d48:	4692      	mov	sl, r2
 8000d4a:	448a      	add	sl, r1
 8000d4c:	4653      	mov	r3, sl
 8000d4e:	021b      	lsls	r3, r3, #8
 8000d50:	d5df      	bpl.n	8000d12 <__aeabi_dadd+0x24a>
 8000d52:	4b38      	ldr	r3, [pc, #224]	; (8000e34 <__aeabi_dadd+0x36c>)
 8000d54:	3601      	adds	r6, #1
 8000d56:	429e      	cmp	r6, r3
 8000d58:	d000      	beq.n	8000d5c <__aeabi_dadd+0x294>
 8000d5a:	e0b3      	b.n	8000ec4 <__aeabi_dadd+0x3fc>
 8000d5c:	0032      	movs	r2, r6
 8000d5e:	2400      	movs	r4, #0
 8000d60:	2300      	movs	r3, #0
 8000d62:	e74d      	b.n	8000c00 <__aeabi_dadd+0x138>
 8000d64:	074a      	lsls	r2, r1, #29
 8000d66:	08db      	lsrs	r3, r3, #3
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	08c9      	lsrs	r1, r1, #3
 8000d6c:	001a      	movs	r2, r3
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	d100      	bne.n	8000d74 <__aeabi_dadd+0x2ac>
 8000d72:	e200      	b.n	8001176 <__aeabi_dadd+0x6ae>
 8000d74:	2480      	movs	r4, #128	; 0x80
 8000d76:	0324      	lsls	r4, r4, #12
 8000d78:	430c      	orrs	r4, r1
 8000d7a:	0324      	lsls	r4, r4, #12
 8000d7c:	4a2d      	ldr	r2, [pc, #180]	; (8000e34 <__aeabi_dadd+0x36c>)
 8000d7e:	0b24      	lsrs	r4, r4, #12
 8000d80:	e73e      	b.n	8000c00 <__aeabi_dadd+0x138>
 8000d82:	0020      	movs	r0, r4
 8000d84:	f001 fda8 	bl	80028d8 <__clzsi2>
 8000d88:	0003      	movs	r3, r0
 8000d8a:	3318      	adds	r3, #24
 8000d8c:	2b1f      	cmp	r3, #31
 8000d8e:	dc00      	bgt.n	8000d92 <__aeabi_dadd+0x2ca>
 8000d90:	e6f7      	b.n	8000b82 <__aeabi_dadd+0xba>
 8000d92:	0022      	movs	r2, r4
 8000d94:	3808      	subs	r0, #8
 8000d96:	4082      	lsls	r2, r0
 8000d98:	2400      	movs	r4, #0
 8000d9a:	42b3      	cmp	r3, r6
 8000d9c:	db00      	blt.n	8000da0 <__aeabi_dadd+0x2d8>
 8000d9e:	e6fc      	b.n	8000b9a <__aeabi_dadd+0xd2>
 8000da0:	1af6      	subs	r6, r6, r3
 8000da2:	4b25      	ldr	r3, [pc, #148]	; (8000e38 <__aeabi_dadd+0x370>)
 8000da4:	401a      	ands	r2, r3
 8000da6:	4692      	mov	sl, r2
 8000da8:	e70a      	b.n	8000bc0 <__aeabi_dadd+0xf8>
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d02b      	beq.n	8000e06 <__aeabi_dadd+0x33e>
 8000dae:	1b97      	subs	r7, r2, r6
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d100      	bne.n	8000db6 <__aeabi_dadd+0x2ee>
 8000db4:	e0b8      	b.n	8000f28 <__aeabi_dadd+0x460>
 8000db6:	4c1f      	ldr	r4, [pc, #124]	; (8000e34 <__aeabi_dadd+0x36c>)
 8000db8:	42a2      	cmp	r2, r4
 8000dba:	d100      	bne.n	8000dbe <__aeabi_dadd+0x2f6>
 8000dbc:	e11c      	b.n	8000ff8 <__aeabi_dadd+0x530>
 8000dbe:	2480      	movs	r4, #128	; 0x80
 8000dc0:	0424      	lsls	r4, r4, #16
 8000dc2:	4321      	orrs	r1, r4
 8000dc4:	2f38      	cmp	r7, #56	; 0x38
 8000dc6:	dd00      	ble.n	8000dca <__aeabi_dadd+0x302>
 8000dc8:	e11e      	b.n	8001008 <__aeabi_dadd+0x540>
 8000dca:	2f1f      	cmp	r7, #31
 8000dcc:	dd00      	ble.n	8000dd0 <__aeabi_dadd+0x308>
 8000dce:	e19e      	b.n	800110e <__aeabi_dadd+0x646>
 8000dd0:	2620      	movs	r6, #32
 8000dd2:	000c      	movs	r4, r1
 8000dd4:	1bf6      	subs	r6, r6, r7
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	40b3      	lsls	r3, r6
 8000dda:	40b4      	lsls	r4, r6
 8000ddc:	40f8      	lsrs	r0, r7
 8000dde:	1e5e      	subs	r6, r3, #1
 8000de0:	41b3      	sbcs	r3, r6
 8000de2:	40f9      	lsrs	r1, r7
 8000de4:	4304      	orrs	r4, r0
 8000de6:	431c      	orrs	r4, r3
 8000de8:	4489      	add	r9, r1
 8000dea:	4444      	add	r4, r8
 8000dec:	4544      	cmp	r4, r8
 8000dee:	419b      	sbcs	r3, r3
 8000df0:	425b      	negs	r3, r3
 8000df2:	444b      	add	r3, r9
 8000df4:	469a      	mov	sl, r3
 8000df6:	0016      	movs	r6, r2
 8000df8:	e7a8      	b.n	8000d4c <__aeabi_dadd+0x284>
 8000dfa:	4642      	mov	r2, r8
 8000dfc:	464c      	mov	r4, r9
 8000dfe:	4314      	orrs	r4, r2
 8000e00:	1e62      	subs	r2, r4, #1
 8000e02:	4194      	sbcs	r4, r2
 8000e04:	e6a6      	b.n	8000b54 <__aeabi_dadd+0x8c>
 8000e06:	4c0d      	ldr	r4, [pc, #52]	; (8000e3c <__aeabi_dadd+0x374>)
 8000e08:	1c72      	adds	r2, r6, #1
 8000e0a:	4222      	tst	r2, r4
 8000e0c:	d000      	beq.n	8000e10 <__aeabi_dadd+0x348>
 8000e0e:	e0a8      	b.n	8000f62 <__aeabi_dadd+0x49a>
 8000e10:	000a      	movs	r2, r1
 8000e12:	431a      	orrs	r2, r3
 8000e14:	2e00      	cmp	r6, #0
 8000e16:	d000      	beq.n	8000e1a <__aeabi_dadd+0x352>
 8000e18:	e10a      	b.n	8001030 <__aeabi_dadd+0x568>
 8000e1a:	2a00      	cmp	r2, #0
 8000e1c:	d100      	bne.n	8000e20 <__aeabi_dadd+0x358>
 8000e1e:	e15e      	b.n	80010de <__aeabi_dadd+0x616>
 8000e20:	464a      	mov	r2, r9
 8000e22:	4302      	orrs	r2, r0
 8000e24:	d000      	beq.n	8000e28 <__aeabi_dadd+0x360>
 8000e26:	e161      	b.n	80010ec <__aeabi_dadd+0x624>
 8000e28:	074a      	lsls	r2, r1, #29
 8000e2a:	08db      	lsrs	r3, r3, #3
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	08c9      	lsrs	r1, r1, #3
 8000e30:	e77c      	b.n	8000d2c <__aeabi_dadd+0x264>
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	000007ff 	.word	0x000007ff
 8000e38:	ff7fffff 	.word	0xff7fffff
 8000e3c:	000007fe 	.word	0x000007fe
 8000e40:	4ccf      	ldr	r4, [pc, #828]	; (8001180 <__aeabi_dadd+0x6b8>)
 8000e42:	42a2      	cmp	r2, r4
 8000e44:	d100      	bne.n	8000e48 <__aeabi_dadd+0x380>
 8000e46:	e0ce      	b.n	8000fe6 <__aeabi_dadd+0x51e>
 8000e48:	2480      	movs	r4, #128	; 0x80
 8000e4a:	0424      	lsls	r4, r4, #16
 8000e4c:	4321      	orrs	r1, r4
 8000e4e:	2f38      	cmp	r7, #56	; 0x38
 8000e50:	dc5b      	bgt.n	8000f0a <__aeabi_dadd+0x442>
 8000e52:	2f1f      	cmp	r7, #31
 8000e54:	dd00      	ble.n	8000e58 <__aeabi_dadd+0x390>
 8000e56:	e0dc      	b.n	8001012 <__aeabi_dadd+0x54a>
 8000e58:	2520      	movs	r5, #32
 8000e5a:	000c      	movs	r4, r1
 8000e5c:	1bed      	subs	r5, r5, r7
 8000e5e:	001e      	movs	r6, r3
 8000e60:	40ab      	lsls	r3, r5
 8000e62:	40ac      	lsls	r4, r5
 8000e64:	40fe      	lsrs	r6, r7
 8000e66:	1e5d      	subs	r5, r3, #1
 8000e68:	41ab      	sbcs	r3, r5
 8000e6a:	4334      	orrs	r4, r6
 8000e6c:	40f9      	lsrs	r1, r7
 8000e6e:	431c      	orrs	r4, r3
 8000e70:	464b      	mov	r3, r9
 8000e72:	1a5b      	subs	r3, r3, r1
 8000e74:	4699      	mov	r9, r3
 8000e76:	e04c      	b.n	8000f12 <__aeabi_dadd+0x44a>
 8000e78:	464a      	mov	r2, r9
 8000e7a:	1a1c      	subs	r4, r3, r0
 8000e7c:	1a88      	subs	r0, r1, r2
 8000e7e:	42a3      	cmp	r3, r4
 8000e80:	4192      	sbcs	r2, r2
 8000e82:	4252      	negs	r2, r2
 8000e84:	4692      	mov	sl, r2
 8000e86:	0002      	movs	r2, r0
 8000e88:	4650      	mov	r0, sl
 8000e8a:	1a12      	subs	r2, r2, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0212      	lsls	r2, r2, #8
 8000e90:	d478      	bmi.n	8000f84 <__aeabi_dadd+0x4bc>
 8000e92:	4653      	mov	r3, sl
 8000e94:	4323      	orrs	r3, r4
 8000e96:	d000      	beq.n	8000e9a <__aeabi_dadd+0x3d2>
 8000e98:	e66a      	b.n	8000b70 <__aeabi_dadd+0xa8>
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2500      	movs	r5, #0
 8000e9e:	e745      	b.n	8000d2c <__aeabi_dadd+0x264>
 8000ea0:	074a      	lsls	r2, r1, #29
 8000ea2:	08db      	lsrs	r3, r3, #3
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	08c9      	lsrs	r1, r1, #3
 8000ea8:	e73d      	b.n	8000d26 <__aeabi_dadd+0x25e>
 8000eaa:	181c      	adds	r4, r3, r0
 8000eac:	429c      	cmp	r4, r3
 8000eae:	419b      	sbcs	r3, r3
 8000eb0:	4449      	add	r1, r9
 8000eb2:	468a      	mov	sl, r1
 8000eb4:	425b      	negs	r3, r3
 8000eb6:	449a      	add	sl, r3
 8000eb8:	4653      	mov	r3, sl
 8000eba:	2601      	movs	r6, #1
 8000ebc:	021b      	lsls	r3, r3, #8
 8000ebe:	d400      	bmi.n	8000ec2 <__aeabi_dadd+0x3fa>
 8000ec0:	e727      	b.n	8000d12 <__aeabi_dadd+0x24a>
 8000ec2:	2602      	movs	r6, #2
 8000ec4:	4652      	mov	r2, sl
 8000ec6:	4baf      	ldr	r3, [pc, #700]	; (8001184 <__aeabi_dadd+0x6bc>)
 8000ec8:	2101      	movs	r1, #1
 8000eca:	401a      	ands	r2, r3
 8000ecc:	0013      	movs	r3, r2
 8000ece:	4021      	ands	r1, r4
 8000ed0:	0862      	lsrs	r2, r4, #1
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	07dc      	lsls	r4, r3, #31
 8000ed6:	085b      	lsrs	r3, r3, #1
 8000ed8:	469a      	mov	sl, r3
 8000eda:	4314      	orrs	r4, r2
 8000edc:	e670      	b.n	8000bc0 <__aeabi_dadd+0xf8>
 8000ede:	003a      	movs	r2, r7
 8000ee0:	464c      	mov	r4, r9
 8000ee2:	3a20      	subs	r2, #32
 8000ee4:	40d4      	lsrs	r4, r2
 8000ee6:	46a4      	mov	ip, r4
 8000ee8:	2f20      	cmp	r7, #32
 8000eea:	d007      	beq.n	8000efc <__aeabi_dadd+0x434>
 8000eec:	2240      	movs	r2, #64	; 0x40
 8000eee:	4648      	mov	r0, r9
 8000ef0:	1bd2      	subs	r2, r2, r7
 8000ef2:	4090      	lsls	r0, r2
 8000ef4:	0002      	movs	r2, r0
 8000ef6:	4640      	mov	r0, r8
 8000ef8:	4310      	orrs	r0, r2
 8000efa:	4680      	mov	r8, r0
 8000efc:	4640      	mov	r0, r8
 8000efe:	1e42      	subs	r2, r0, #1
 8000f00:	4190      	sbcs	r0, r2
 8000f02:	4662      	mov	r2, ip
 8000f04:	0004      	movs	r4, r0
 8000f06:	4314      	orrs	r4, r2
 8000f08:	e624      	b.n	8000b54 <__aeabi_dadd+0x8c>
 8000f0a:	4319      	orrs	r1, r3
 8000f0c:	000c      	movs	r4, r1
 8000f0e:	1e63      	subs	r3, r4, #1
 8000f10:	419c      	sbcs	r4, r3
 8000f12:	4643      	mov	r3, r8
 8000f14:	1b1c      	subs	r4, r3, r4
 8000f16:	45a0      	cmp	r8, r4
 8000f18:	419b      	sbcs	r3, r3
 8000f1a:	4649      	mov	r1, r9
 8000f1c:	425b      	negs	r3, r3
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	469a      	mov	sl, r3
 8000f22:	4665      	mov	r5, ip
 8000f24:	0016      	movs	r6, r2
 8000f26:	e61b      	b.n	8000b60 <__aeabi_dadd+0x98>
 8000f28:	000c      	movs	r4, r1
 8000f2a:	431c      	orrs	r4, r3
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_dadd+0x468>
 8000f2e:	e0c7      	b.n	80010c0 <__aeabi_dadd+0x5f8>
 8000f30:	1e7c      	subs	r4, r7, #1
 8000f32:	2f01      	cmp	r7, #1
 8000f34:	d100      	bne.n	8000f38 <__aeabi_dadd+0x470>
 8000f36:	e0f9      	b.n	800112c <__aeabi_dadd+0x664>
 8000f38:	4e91      	ldr	r6, [pc, #580]	; (8001180 <__aeabi_dadd+0x6b8>)
 8000f3a:	42b7      	cmp	r7, r6
 8000f3c:	d05c      	beq.n	8000ff8 <__aeabi_dadd+0x530>
 8000f3e:	0027      	movs	r7, r4
 8000f40:	e740      	b.n	8000dc4 <__aeabi_dadd+0x2fc>
 8000f42:	2220      	movs	r2, #32
 8000f44:	464c      	mov	r4, r9
 8000f46:	4640      	mov	r0, r8
 8000f48:	1bd2      	subs	r2, r2, r7
 8000f4a:	4094      	lsls	r4, r2
 8000f4c:	40f8      	lsrs	r0, r7
 8000f4e:	4304      	orrs	r4, r0
 8000f50:	4640      	mov	r0, r8
 8000f52:	4090      	lsls	r0, r2
 8000f54:	1e42      	subs	r2, r0, #1
 8000f56:	4190      	sbcs	r0, r2
 8000f58:	464a      	mov	r2, r9
 8000f5a:	40fa      	lsrs	r2, r7
 8000f5c:	4304      	orrs	r4, r0
 8000f5e:	1889      	adds	r1, r1, r2
 8000f60:	e6ee      	b.n	8000d40 <__aeabi_dadd+0x278>
 8000f62:	4c87      	ldr	r4, [pc, #540]	; (8001180 <__aeabi_dadd+0x6b8>)
 8000f64:	42a2      	cmp	r2, r4
 8000f66:	d100      	bne.n	8000f6a <__aeabi_dadd+0x4a2>
 8000f68:	e6f9      	b.n	8000d5e <__aeabi_dadd+0x296>
 8000f6a:	1818      	adds	r0, r3, r0
 8000f6c:	4298      	cmp	r0, r3
 8000f6e:	419b      	sbcs	r3, r3
 8000f70:	4449      	add	r1, r9
 8000f72:	425b      	negs	r3, r3
 8000f74:	18cb      	adds	r3, r1, r3
 8000f76:	07dc      	lsls	r4, r3, #31
 8000f78:	0840      	lsrs	r0, r0, #1
 8000f7a:	085b      	lsrs	r3, r3, #1
 8000f7c:	469a      	mov	sl, r3
 8000f7e:	0016      	movs	r6, r2
 8000f80:	4304      	orrs	r4, r0
 8000f82:	e6c6      	b.n	8000d12 <__aeabi_dadd+0x24a>
 8000f84:	4642      	mov	r2, r8
 8000f86:	1ad4      	subs	r4, r2, r3
 8000f88:	45a0      	cmp	r8, r4
 8000f8a:	4180      	sbcs	r0, r0
 8000f8c:	464b      	mov	r3, r9
 8000f8e:	4240      	negs	r0, r0
 8000f90:	1a59      	subs	r1, r3, r1
 8000f92:	1a0b      	subs	r3, r1, r0
 8000f94:	469a      	mov	sl, r3
 8000f96:	4665      	mov	r5, ip
 8000f98:	e5ea      	b.n	8000b70 <__aeabi_dadd+0xa8>
 8000f9a:	464b      	mov	r3, r9
 8000f9c:	464a      	mov	r2, r9
 8000f9e:	08c0      	lsrs	r0, r0, #3
 8000fa0:	075b      	lsls	r3, r3, #29
 8000fa2:	4665      	mov	r5, ip
 8000fa4:	4303      	orrs	r3, r0
 8000fa6:	08d1      	lsrs	r1, r2, #3
 8000fa8:	e6bd      	b.n	8000d26 <__aeabi_dadd+0x25e>
 8000faa:	2a00      	cmp	r2, #0
 8000fac:	d000      	beq.n	8000fb0 <__aeabi_dadd+0x4e8>
 8000fae:	e08e      	b.n	80010ce <__aeabi_dadd+0x606>
 8000fb0:	464b      	mov	r3, r9
 8000fb2:	4303      	orrs	r3, r0
 8000fb4:	d117      	bne.n	8000fe6 <__aeabi_dadd+0x51e>
 8000fb6:	2180      	movs	r1, #128	; 0x80
 8000fb8:	2500      	movs	r5, #0
 8000fba:	0309      	lsls	r1, r1, #12
 8000fbc:	e6da      	b.n	8000d74 <__aeabi_dadd+0x2ac>
 8000fbe:	074a      	lsls	r2, r1, #29
 8000fc0:	08db      	lsrs	r3, r3, #3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	08c9      	lsrs	r1, r1, #3
 8000fc6:	e6d1      	b.n	8000d6c <__aeabi_dadd+0x2a4>
 8000fc8:	1a1c      	subs	r4, r3, r0
 8000fca:	464a      	mov	r2, r9
 8000fcc:	42a3      	cmp	r3, r4
 8000fce:	419b      	sbcs	r3, r3
 8000fd0:	1a89      	subs	r1, r1, r2
 8000fd2:	425b      	negs	r3, r3
 8000fd4:	1acb      	subs	r3, r1, r3
 8000fd6:	469a      	mov	sl, r3
 8000fd8:	2601      	movs	r6, #1
 8000fda:	e5c1      	b.n	8000b60 <__aeabi_dadd+0x98>
 8000fdc:	074a      	lsls	r2, r1, #29
 8000fde:	08db      	lsrs	r3, r3, #3
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	08c9      	lsrs	r1, r1, #3
 8000fe4:	e69f      	b.n	8000d26 <__aeabi_dadd+0x25e>
 8000fe6:	4643      	mov	r3, r8
 8000fe8:	08d8      	lsrs	r0, r3, #3
 8000fea:	464b      	mov	r3, r9
 8000fec:	464a      	mov	r2, r9
 8000fee:	075b      	lsls	r3, r3, #29
 8000ff0:	4665      	mov	r5, ip
 8000ff2:	4303      	orrs	r3, r0
 8000ff4:	08d1      	lsrs	r1, r2, #3
 8000ff6:	e6b9      	b.n	8000d6c <__aeabi_dadd+0x2a4>
 8000ff8:	4643      	mov	r3, r8
 8000ffa:	08d8      	lsrs	r0, r3, #3
 8000ffc:	464b      	mov	r3, r9
 8000ffe:	464a      	mov	r2, r9
 8001000:	075b      	lsls	r3, r3, #29
 8001002:	4303      	orrs	r3, r0
 8001004:	08d1      	lsrs	r1, r2, #3
 8001006:	e6b1      	b.n	8000d6c <__aeabi_dadd+0x2a4>
 8001008:	4319      	orrs	r1, r3
 800100a:	000c      	movs	r4, r1
 800100c:	1e63      	subs	r3, r4, #1
 800100e:	419c      	sbcs	r4, r3
 8001010:	e6eb      	b.n	8000dea <__aeabi_dadd+0x322>
 8001012:	003c      	movs	r4, r7
 8001014:	000d      	movs	r5, r1
 8001016:	3c20      	subs	r4, #32
 8001018:	40e5      	lsrs	r5, r4
 800101a:	2f20      	cmp	r7, #32
 800101c:	d003      	beq.n	8001026 <__aeabi_dadd+0x55e>
 800101e:	2440      	movs	r4, #64	; 0x40
 8001020:	1be4      	subs	r4, r4, r7
 8001022:	40a1      	lsls	r1, r4
 8001024:	430b      	orrs	r3, r1
 8001026:	001c      	movs	r4, r3
 8001028:	1e63      	subs	r3, r4, #1
 800102a:	419c      	sbcs	r4, r3
 800102c:	432c      	orrs	r4, r5
 800102e:	e770      	b.n	8000f12 <__aeabi_dadd+0x44a>
 8001030:	2a00      	cmp	r2, #0
 8001032:	d0e1      	beq.n	8000ff8 <__aeabi_dadd+0x530>
 8001034:	464a      	mov	r2, r9
 8001036:	4302      	orrs	r2, r0
 8001038:	d0c1      	beq.n	8000fbe <__aeabi_dadd+0x4f6>
 800103a:	074a      	lsls	r2, r1, #29
 800103c:	08db      	lsrs	r3, r3, #3
 800103e:	4313      	orrs	r3, r2
 8001040:	2280      	movs	r2, #128	; 0x80
 8001042:	08c9      	lsrs	r1, r1, #3
 8001044:	0312      	lsls	r2, r2, #12
 8001046:	4211      	tst	r1, r2
 8001048:	d008      	beq.n	800105c <__aeabi_dadd+0x594>
 800104a:	4648      	mov	r0, r9
 800104c:	08c4      	lsrs	r4, r0, #3
 800104e:	4214      	tst	r4, r2
 8001050:	d104      	bne.n	800105c <__aeabi_dadd+0x594>
 8001052:	4643      	mov	r3, r8
 8001054:	0021      	movs	r1, r4
 8001056:	08db      	lsrs	r3, r3, #3
 8001058:	0742      	lsls	r2, r0, #29
 800105a:	4313      	orrs	r3, r2
 800105c:	0f5a      	lsrs	r2, r3, #29
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	0752      	lsls	r2, r2, #29
 8001062:	08db      	lsrs	r3, r3, #3
 8001064:	4313      	orrs	r3, r2
 8001066:	e681      	b.n	8000d6c <__aeabi_dadd+0x2a4>
 8001068:	464b      	mov	r3, r9
 800106a:	4303      	orrs	r3, r0
 800106c:	d100      	bne.n	8001070 <__aeabi_dadd+0x5a8>
 800106e:	e714      	b.n	8000e9a <__aeabi_dadd+0x3d2>
 8001070:	464b      	mov	r3, r9
 8001072:	464a      	mov	r2, r9
 8001074:	08c0      	lsrs	r0, r0, #3
 8001076:	075b      	lsls	r3, r3, #29
 8001078:	4665      	mov	r5, ip
 800107a:	4303      	orrs	r3, r0
 800107c:	08d1      	lsrs	r1, r2, #3
 800107e:	e655      	b.n	8000d2c <__aeabi_dadd+0x264>
 8001080:	1ac4      	subs	r4, r0, r3
 8001082:	45a0      	cmp	r8, r4
 8001084:	4180      	sbcs	r0, r0
 8001086:	464b      	mov	r3, r9
 8001088:	4240      	negs	r0, r0
 800108a:	1a59      	subs	r1, r3, r1
 800108c:	1a0b      	subs	r3, r1, r0
 800108e:	469a      	mov	sl, r3
 8001090:	4665      	mov	r5, ip
 8001092:	2601      	movs	r6, #1
 8001094:	e564      	b.n	8000b60 <__aeabi_dadd+0x98>
 8001096:	1a1c      	subs	r4, r3, r0
 8001098:	464a      	mov	r2, r9
 800109a:	42a3      	cmp	r3, r4
 800109c:	4180      	sbcs	r0, r0
 800109e:	1a8a      	subs	r2, r1, r2
 80010a0:	4240      	negs	r0, r0
 80010a2:	1a12      	subs	r2, r2, r0
 80010a4:	4692      	mov	sl, r2
 80010a6:	0212      	lsls	r2, r2, #8
 80010a8:	d549      	bpl.n	800113e <__aeabi_dadd+0x676>
 80010aa:	4642      	mov	r2, r8
 80010ac:	1ad4      	subs	r4, r2, r3
 80010ae:	45a0      	cmp	r8, r4
 80010b0:	4180      	sbcs	r0, r0
 80010b2:	464b      	mov	r3, r9
 80010b4:	4240      	negs	r0, r0
 80010b6:	1a59      	subs	r1, r3, r1
 80010b8:	1a0b      	subs	r3, r1, r0
 80010ba:	469a      	mov	sl, r3
 80010bc:	4665      	mov	r5, ip
 80010be:	e57f      	b.n	8000bc0 <__aeabi_dadd+0xf8>
 80010c0:	464b      	mov	r3, r9
 80010c2:	464a      	mov	r2, r9
 80010c4:	08c0      	lsrs	r0, r0, #3
 80010c6:	075b      	lsls	r3, r3, #29
 80010c8:	4303      	orrs	r3, r0
 80010ca:	08d1      	lsrs	r1, r2, #3
 80010cc:	e62b      	b.n	8000d26 <__aeabi_dadd+0x25e>
 80010ce:	464a      	mov	r2, r9
 80010d0:	08db      	lsrs	r3, r3, #3
 80010d2:	4302      	orrs	r2, r0
 80010d4:	d138      	bne.n	8001148 <__aeabi_dadd+0x680>
 80010d6:	074a      	lsls	r2, r1, #29
 80010d8:	4313      	orrs	r3, r2
 80010da:	08c9      	lsrs	r1, r1, #3
 80010dc:	e646      	b.n	8000d6c <__aeabi_dadd+0x2a4>
 80010de:	464b      	mov	r3, r9
 80010e0:	464a      	mov	r2, r9
 80010e2:	08c0      	lsrs	r0, r0, #3
 80010e4:	075b      	lsls	r3, r3, #29
 80010e6:	4303      	orrs	r3, r0
 80010e8:	08d1      	lsrs	r1, r2, #3
 80010ea:	e61f      	b.n	8000d2c <__aeabi_dadd+0x264>
 80010ec:	181c      	adds	r4, r3, r0
 80010ee:	429c      	cmp	r4, r3
 80010f0:	419b      	sbcs	r3, r3
 80010f2:	4449      	add	r1, r9
 80010f4:	468a      	mov	sl, r1
 80010f6:	425b      	negs	r3, r3
 80010f8:	449a      	add	sl, r3
 80010fa:	4653      	mov	r3, sl
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	d400      	bmi.n	8001102 <__aeabi_dadd+0x63a>
 8001100:	e607      	b.n	8000d12 <__aeabi_dadd+0x24a>
 8001102:	4652      	mov	r2, sl
 8001104:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <__aeabi_dadd+0x6bc>)
 8001106:	2601      	movs	r6, #1
 8001108:	401a      	ands	r2, r3
 800110a:	4692      	mov	sl, r2
 800110c:	e601      	b.n	8000d12 <__aeabi_dadd+0x24a>
 800110e:	003c      	movs	r4, r7
 8001110:	000e      	movs	r6, r1
 8001112:	3c20      	subs	r4, #32
 8001114:	40e6      	lsrs	r6, r4
 8001116:	2f20      	cmp	r7, #32
 8001118:	d003      	beq.n	8001122 <__aeabi_dadd+0x65a>
 800111a:	2440      	movs	r4, #64	; 0x40
 800111c:	1be4      	subs	r4, r4, r7
 800111e:	40a1      	lsls	r1, r4
 8001120:	430b      	orrs	r3, r1
 8001122:	001c      	movs	r4, r3
 8001124:	1e63      	subs	r3, r4, #1
 8001126:	419c      	sbcs	r4, r3
 8001128:	4334      	orrs	r4, r6
 800112a:	e65e      	b.n	8000dea <__aeabi_dadd+0x322>
 800112c:	4443      	add	r3, r8
 800112e:	4283      	cmp	r3, r0
 8001130:	4180      	sbcs	r0, r0
 8001132:	4449      	add	r1, r9
 8001134:	468a      	mov	sl, r1
 8001136:	4240      	negs	r0, r0
 8001138:	001c      	movs	r4, r3
 800113a:	4482      	add	sl, r0
 800113c:	e6bc      	b.n	8000eb8 <__aeabi_dadd+0x3f0>
 800113e:	4653      	mov	r3, sl
 8001140:	4323      	orrs	r3, r4
 8001142:	d100      	bne.n	8001146 <__aeabi_dadd+0x67e>
 8001144:	e6a9      	b.n	8000e9a <__aeabi_dadd+0x3d2>
 8001146:	e5e4      	b.n	8000d12 <__aeabi_dadd+0x24a>
 8001148:	074a      	lsls	r2, r1, #29
 800114a:	4313      	orrs	r3, r2
 800114c:	2280      	movs	r2, #128	; 0x80
 800114e:	08c9      	lsrs	r1, r1, #3
 8001150:	0312      	lsls	r2, r2, #12
 8001152:	4211      	tst	r1, r2
 8001154:	d009      	beq.n	800116a <__aeabi_dadd+0x6a2>
 8001156:	4648      	mov	r0, r9
 8001158:	08c4      	lsrs	r4, r0, #3
 800115a:	4214      	tst	r4, r2
 800115c:	d105      	bne.n	800116a <__aeabi_dadd+0x6a2>
 800115e:	4643      	mov	r3, r8
 8001160:	4665      	mov	r5, ip
 8001162:	0021      	movs	r1, r4
 8001164:	08db      	lsrs	r3, r3, #3
 8001166:	0742      	lsls	r2, r0, #29
 8001168:	4313      	orrs	r3, r2
 800116a:	0f5a      	lsrs	r2, r3, #29
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	08db      	lsrs	r3, r3, #3
 8001170:	0752      	lsls	r2, r2, #29
 8001172:	4313      	orrs	r3, r2
 8001174:	e5fa      	b.n	8000d6c <__aeabi_dadd+0x2a4>
 8001176:	2300      	movs	r3, #0
 8001178:	4a01      	ldr	r2, [pc, #4]	; (8001180 <__aeabi_dadd+0x6b8>)
 800117a:	001c      	movs	r4, r3
 800117c:	e540      	b.n	8000c00 <__aeabi_dadd+0x138>
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	000007ff 	.word	0x000007ff
 8001184:	ff7fffff 	.word	0xff7fffff

08001188 <__aeabi_ddiv>:
 8001188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118a:	4657      	mov	r7, sl
 800118c:	464e      	mov	r6, r9
 800118e:	4645      	mov	r5, r8
 8001190:	46de      	mov	lr, fp
 8001192:	b5e0      	push	{r5, r6, r7, lr}
 8001194:	030c      	lsls	r4, r1, #12
 8001196:	001f      	movs	r7, r3
 8001198:	004b      	lsls	r3, r1, #1
 800119a:	4681      	mov	r9, r0
 800119c:	4692      	mov	sl, r2
 800119e:	0005      	movs	r5, r0
 80011a0:	b085      	sub	sp, #20
 80011a2:	0b24      	lsrs	r4, r4, #12
 80011a4:	0d5b      	lsrs	r3, r3, #21
 80011a6:	0fce      	lsrs	r6, r1, #31
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d100      	bne.n	80011ae <__aeabi_ddiv+0x26>
 80011ac:	e152      	b.n	8001454 <__aeabi_ddiv+0x2cc>
 80011ae:	4ad2      	ldr	r2, [pc, #840]	; (80014f8 <__aeabi_ddiv+0x370>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d100      	bne.n	80011b6 <__aeabi_ddiv+0x2e>
 80011b4:	e16e      	b.n	8001494 <__aeabi_ddiv+0x30c>
 80011b6:	0f42      	lsrs	r2, r0, #29
 80011b8:	00e4      	lsls	r4, r4, #3
 80011ba:	4314      	orrs	r4, r2
 80011bc:	2280      	movs	r2, #128	; 0x80
 80011be:	0412      	lsls	r2, r2, #16
 80011c0:	4322      	orrs	r2, r4
 80011c2:	4690      	mov	r8, r2
 80011c4:	4acd      	ldr	r2, [pc, #820]	; (80014fc <__aeabi_ddiv+0x374>)
 80011c6:	00c5      	lsls	r5, r0, #3
 80011c8:	4693      	mov	fp, r2
 80011ca:	449b      	add	fp, r3
 80011cc:	2300      	movs	r3, #0
 80011ce:	4699      	mov	r9, r3
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	033c      	lsls	r4, r7, #12
 80011d4:	007b      	lsls	r3, r7, #1
 80011d6:	4650      	mov	r0, sl
 80011d8:	0b24      	lsrs	r4, r4, #12
 80011da:	0d5b      	lsrs	r3, r3, #21
 80011dc:	0fff      	lsrs	r7, r7, #31
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d100      	bne.n	80011e4 <__aeabi_ddiv+0x5c>
 80011e2:	e11a      	b.n	800141a <__aeabi_ddiv+0x292>
 80011e4:	4ac4      	ldr	r2, [pc, #784]	; (80014f8 <__aeabi_ddiv+0x370>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d100      	bne.n	80011ec <__aeabi_ddiv+0x64>
 80011ea:	e15e      	b.n	80014aa <__aeabi_ddiv+0x322>
 80011ec:	0f42      	lsrs	r2, r0, #29
 80011ee:	00e4      	lsls	r4, r4, #3
 80011f0:	4322      	orrs	r2, r4
 80011f2:	2480      	movs	r4, #128	; 0x80
 80011f4:	0424      	lsls	r4, r4, #16
 80011f6:	4314      	orrs	r4, r2
 80011f8:	4ac0      	ldr	r2, [pc, #768]	; (80014fc <__aeabi_ddiv+0x374>)
 80011fa:	00c1      	lsls	r1, r0, #3
 80011fc:	4694      	mov	ip, r2
 80011fe:	465a      	mov	r2, fp
 8001200:	4463      	add	r3, ip
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	469b      	mov	fp, r3
 8001206:	2000      	movs	r0, #0
 8001208:	0033      	movs	r3, r6
 800120a:	407b      	eors	r3, r7
 800120c:	469a      	mov	sl, r3
 800120e:	464b      	mov	r3, r9
 8001210:	2b0f      	cmp	r3, #15
 8001212:	d827      	bhi.n	8001264 <__aeabi_ddiv+0xdc>
 8001214:	4aba      	ldr	r2, [pc, #744]	; (8001500 <__aeabi_ddiv+0x378>)
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	58d3      	ldr	r3, [r2, r3]
 800121a:	469f      	mov	pc, r3
 800121c:	46b2      	mov	sl, r6
 800121e:	9b00      	ldr	r3, [sp, #0]
 8001220:	2b02      	cmp	r3, #2
 8001222:	d016      	beq.n	8001252 <__aeabi_ddiv+0xca>
 8001224:	2b03      	cmp	r3, #3
 8001226:	d100      	bne.n	800122a <__aeabi_ddiv+0xa2>
 8001228:	e287      	b.n	800173a <__aeabi_ddiv+0x5b2>
 800122a:	2b01      	cmp	r3, #1
 800122c:	d000      	beq.n	8001230 <__aeabi_ddiv+0xa8>
 800122e:	e0d5      	b.n	80013dc <__aeabi_ddiv+0x254>
 8001230:	2300      	movs	r3, #0
 8001232:	2200      	movs	r2, #0
 8001234:	2500      	movs	r5, #0
 8001236:	051b      	lsls	r3, r3, #20
 8001238:	4313      	orrs	r3, r2
 800123a:	4652      	mov	r2, sl
 800123c:	07d2      	lsls	r2, r2, #31
 800123e:	4313      	orrs	r3, r2
 8001240:	0028      	movs	r0, r5
 8001242:	0019      	movs	r1, r3
 8001244:	b005      	add	sp, #20
 8001246:	bcf0      	pop	{r4, r5, r6, r7}
 8001248:	46bb      	mov	fp, r7
 800124a:	46b2      	mov	sl, r6
 800124c:	46a9      	mov	r9, r5
 800124e:	46a0      	mov	r8, r4
 8001250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001252:	2200      	movs	r2, #0
 8001254:	2500      	movs	r5, #0
 8001256:	4ba8      	ldr	r3, [pc, #672]	; (80014f8 <__aeabi_ddiv+0x370>)
 8001258:	e7ed      	b.n	8001236 <__aeabi_ddiv+0xae>
 800125a:	46ba      	mov	sl, r7
 800125c:	46a0      	mov	r8, r4
 800125e:	000d      	movs	r5, r1
 8001260:	9000      	str	r0, [sp, #0]
 8001262:	e7dc      	b.n	800121e <__aeabi_ddiv+0x96>
 8001264:	4544      	cmp	r4, r8
 8001266:	d200      	bcs.n	800126a <__aeabi_ddiv+0xe2>
 8001268:	e1c4      	b.n	80015f4 <__aeabi_ddiv+0x46c>
 800126a:	d100      	bne.n	800126e <__aeabi_ddiv+0xe6>
 800126c:	e1bf      	b.n	80015ee <__aeabi_ddiv+0x466>
 800126e:	2301      	movs	r3, #1
 8001270:	425b      	negs	r3, r3
 8001272:	469c      	mov	ip, r3
 8001274:	002e      	movs	r6, r5
 8001276:	4640      	mov	r0, r8
 8001278:	2500      	movs	r5, #0
 800127a:	44e3      	add	fp, ip
 800127c:	0223      	lsls	r3, r4, #8
 800127e:	0e0c      	lsrs	r4, r1, #24
 8001280:	431c      	orrs	r4, r3
 8001282:	0c1b      	lsrs	r3, r3, #16
 8001284:	4699      	mov	r9, r3
 8001286:	0423      	lsls	r3, r4, #16
 8001288:	020a      	lsls	r2, r1, #8
 800128a:	0c1f      	lsrs	r7, r3, #16
 800128c:	4649      	mov	r1, r9
 800128e:	9200      	str	r2, [sp, #0]
 8001290:	9701      	str	r7, [sp, #4]
 8001292:	f7fe ffdb 	bl	800024c <__aeabi_uidivmod>
 8001296:	0002      	movs	r2, r0
 8001298:	437a      	muls	r2, r7
 800129a:	040b      	lsls	r3, r1, #16
 800129c:	0c31      	lsrs	r1, r6, #16
 800129e:	4680      	mov	r8, r0
 80012a0:	4319      	orrs	r1, r3
 80012a2:	428a      	cmp	r2, r1
 80012a4:	d907      	bls.n	80012b6 <__aeabi_ddiv+0x12e>
 80012a6:	2301      	movs	r3, #1
 80012a8:	425b      	negs	r3, r3
 80012aa:	469c      	mov	ip, r3
 80012ac:	1909      	adds	r1, r1, r4
 80012ae:	44e0      	add	r8, ip
 80012b0:	428c      	cmp	r4, r1
 80012b2:	d800      	bhi.n	80012b6 <__aeabi_ddiv+0x12e>
 80012b4:	e201      	b.n	80016ba <__aeabi_ddiv+0x532>
 80012b6:	1a88      	subs	r0, r1, r2
 80012b8:	4649      	mov	r1, r9
 80012ba:	f7fe ffc7 	bl	800024c <__aeabi_uidivmod>
 80012be:	9a01      	ldr	r2, [sp, #4]
 80012c0:	0436      	lsls	r6, r6, #16
 80012c2:	4342      	muls	r2, r0
 80012c4:	0409      	lsls	r1, r1, #16
 80012c6:	0c36      	lsrs	r6, r6, #16
 80012c8:	0003      	movs	r3, r0
 80012ca:	430e      	orrs	r6, r1
 80012cc:	42b2      	cmp	r2, r6
 80012ce:	d904      	bls.n	80012da <__aeabi_ddiv+0x152>
 80012d0:	1936      	adds	r6, r6, r4
 80012d2:	3b01      	subs	r3, #1
 80012d4:	42b4      	cmp	r4, r6
 80012d6:	d800      	bhi.n	80012da <__aeabi_ddiv+0x152>
 80012d8:	e1e9      	b.n	80016ae <__aeabi_ddiv+0x526>
 80012da:	1ab0      	subs	r0, r6, r2
 80012dc:	4642      	mov	r2, r8
 80012de:	9e00      	ldr	r6, [sp, #0]
 80012e0:	0412      	lsls	r2, r2, #16
 80012e2:	431a      	orrs	r2, r3
 80012e4:	0c33      	lsrs	r3, r6, #16
 80012e6:	001f      	movs	r7, r3
 80012e8:	0c11      	lsrs	r1, r2, #16
 80012ea:	4690      	mov	r8, r2
 80012ec:	9302      	str	r3, [sp, #8]
 80012ee:	0413      	lsls	r3, r2, #16
 80012f0:	0432      	lsls	r2, r6, #16
 80012f2:	0c16      	lsrs	r6, r2, #16
 80012f4:	0032      	movs	r2, r6
 80012f6:	0c1b      	lsrs	r3, r3, #16
 80012f8:	435a      	muls	r2, r3
 80012fa:	9603      	str	r6, [sp, #12]
 80012fc:	437b      	muls	r3, r7
 80012fe:	434e      	muls	r6, r1
 8001300:	4379      	muls	r1, r7
 8001302:	0c17      	lsrs	r7, r2, #16
 8001304:	46bc      	mov	ip, r7
 8001306:	199b      	adds	r3, r3, r6
 8001308:	4463      	add	r3, ip
 800130a:	429e      	cmp	r6, r3
 800130c:	d903      	bls.n	8001316 <__aeabi_ddiv+0x18e>
 800130e:	2680      	movs	r6, #128	; 0x80
 8001310:	0276      	lsls	r6, r6, #9
 8001312:	46b4      	mov	ip, r6
 8001314:	4461      	add	r1, ip
 8001316:	0c1e      	lsrs	r6, r3, #16
 8001318:	1871      	adds	r1, r6, r1
 800131a:	0416      	lsls	r6, r2, #16
 800131c:	041b      	lsls	r3, r3, #16
 800131e:	0c36      	lsrs	r6, r6, #16
 8001320:	199e      	adds	r6, r3, r6
 8001322:	4288      	cmp	r0, r1
 8001324:	d302      	bcc.n	800132c <__aeabi_ddiv+0x1a4>
 8001326:	d112      	bne.n	800134e <__aeabi_ddiv+0x1c6>
 8001328:	42b5      	cmp	r5, r6
 800132a:	d210      	bcs.n	800134e <__aeabi_ddiv+0x1c6>
 800132c:	4643      	mov	r3, r8
 800132e:	1e5a      	subs	r2, r3, #1
 8001330:	9b00      	ldr	r3, [sp, #0]
 8001332:	469c      	mov	ip, r3
 8001334:	4465      	add	r5, ip
 8001336:	001f      	movs	r7, r3
 8001338:	429d      	cmp	r5, r3
 800133a:	419b      	sbcs	r3, r3
 800133c:	425b      	negs	r3, r3
 800133e:	191b      	adds	r3, r3, r4
 8001340:	18c0      	adds	r0, r0, r3
 8001342:	4284      	cmp	r4, r0
 8001344:	d200      	bcs.n	8001348 <__aeabi_ddiv+0x1c0>
 8001346:	e19e      	b.n	8001686 <__aeabi_ddiv+0x4fe>
 8001348:	d100      	bne.n	800134c <__aeabi_ddiv+0x1c4>
 800134a:	e199      	b.n	8001680 <__aeabi_ddiv+0x4f8>
 800134c:	4690      	mov	r8, r2
 800134e:	1bae      	subs	r6, r5, r6
 8001350:	42b5      	cmp	r5, r6
 8001352:	41ad      	sbcs	r5, r5
 8001354:	1a40      	subs	r0, r0, r1
 8001356:	426d      	negs	r5, r5
 8001358:	1b40      	subs	r0, r0, r5
 800135a:	4284      	cmp	r4, r0
 800135c:	d100      	bne.n	8001360 <__aeabi_ddiv+0x1d8>
 800135e:	e1d2      	b.n	8001706 <__aeabi_ddiv+0x57e>
 8001360:	4649      	mov	r1, r9
 8001362:	f7fe ff73 	bl	800024c <__aeabi_uidivmod>
 8001366:	9a01      	ldr	r2, [sp, #4]
 8001368:	040b      	lsls	r3, r1, #16
 800136a:	4342      	muls	r2, r0
 800136c:	0c31      	lsrs	r1, r6, #16
 800136e:	0005      	movs	r5, r0
 8001370:	4319      	orrs	r1, r3
 8001372:	428a      	cmp	r2, r1
 8001374:	d900      	bls.n	8001378 <__aeabi_ddiv+0x1f0>
 8001376:	e16c      	b.n	8001652 <__aeabi_ddiv+0x4ca>
 8001378:	1a88      	subs	r0, r1, r2
 800137a:	4649      	mov	r1, r9
 800137c:	f7fe ff66 	bl	800024c <__aeabi_uidivmod>
 8001380:	9a01      	ldr	r2, [sp, #4]
 8001382:	0436      	lsls	r6, r6, #16
 8001384:	4342      	muls	r2, r0
 8001386:	0409      	lsls	r1, r1, #16
 8001388:	0c36      	lsrs	r6, r6, #16
 800138a:	0003      	movs	r3, r0
 800138c:	430e      	orrs	r6, r1
 800138e:	42b2      	cmp	r2, r6
 8001390:	d900      	bls.n	8001394 <__aeabi_ddiv+0x20c>
 8001392:	e153      	b.n	800163c <__aeabi_ddiv+0x4b4>
 8001394:	9803      	ldr	r0, [sp, #12]
 8001396:	1ab6      	subs	r6, r6, r2
 8001398:	0002      	movs	r2, r0
 800139a:	042d      	lsls	r5, r5, #16
 800139c:	431d      	orrs	r5, r3
 800139e:	9f02      	ldr	r7, [sp, #8]
 80013a0:	042b      	lsls	r3, r5, #16
 80013a2:	0c1b      	lsrs	r3, r3, #16
 80013a4:	435a      	muls	r2, r3
 80013a6:	437b      	muls	r3, r7
 80013a8:	469c      	mov	ip, r3
 80013aa:	0c29      	lsrs	r1, r5, #16
 80013ac:	4348      	muls	r0, r1
 80013ae:	0c13      	lsrs	r3, r2, #16
 80013b0:	4484      	add	ip, r0
 80013b2:	4463      	add	r3, ip
 80013b4:	4379      	muls	r1, r7
 80013b6:	4298      	cmp	r0, r3
 80013b8:	d903      	bls.n	80013c2 <__aeabi_ddiv+0x23a>
 80013ba:	2080      	movs	r0, #128	; 0x80
 80013bc:	0240      	lsls	r0, r0, #9
 80013be:	4684      	mov	ip, r0
 80013c0:	4461      	add	r1, ip
 80013c2:	0c18      	lsrs	r0, r3, #16
 80013c4:	0412      	lsls	r2, r2, #16
 80013c6:	041b      	lsls	r3, r3, #16
 80013c8:	0c12      	lsrs	r2, r2, #16
 80013ca:	1840      	adds	r0, r0, r1
 80013cc:	189b      	adds	r3, r3, r2
 80013ce:	4286      	cmp	r6, r0
 80013d0:	d200      	bcs.n	80013d4 <__aeabi_ddiv+0x24c>
 80013d2:	e100      	b.n	80015d6 <__aeabi_ddiv+0x44e>
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x250>
 80013d6:	e0fb      	b.n	80015d0 <__aeabi_ddiv+0x448>
 80013d8:	2301      	movs	r3, #1
 80013da:	431d      	orrs	r5, r3
 80013dc:	4b49      	ldr	r3, [pc, #292]	; (8001504 <__aeabi_ddiv+0x37c>)
 80013de:	445b      	add	r3, fp
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	dc00      	bgt.n	80013e6 <__aeabi_ddiv+0x25e>
 80013e4:	e0aa      	b.n	800153c <__aeabi_ddiv+0x3b4>
 80013e6:	076a      	lsls	r2, r5, #29
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x264>
 80013ea:	e13d      	b.n	8001668 <__aeabi_ddiv+0x4e0>
 80013ec:	08e9      	lsrs	r1, r5, #3
 80013ee:	4642      	mov	r2, r8
 80013f0:	01d2      	lsls	r2, r2, #7
 80013f2:	d506      	bpl.n	8001402 <__aeabi_ddiv+0x27a>
 80013f4:	4642      	mov	r2, r8
 80013f6:	4b44      	ldr	r3, [pc, #272]	; (8001508 <__aeabi_ddiv+0x380>)
 80013f8:	401a      	ands	r2, r3
 80013fa:	2380      	movs	r3, #128	; 0x80
 80013fc:	4690      	mov	r8, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	445b      	add	r3, fp
 8001402:	4a42      	ldr	r2, [pc, #264]	; (800150c <__aeabi_ddiv+0x384>)
 8001404:	4293      	cmp	r3, r2
 8001406:	dd00      	ble.n	800140a <__aeabi_ddiv+0x282>
 8001408:	e723      	b.n	8001252 <__aeabi_ddiv+0xca>
 800140a:	4642      	mov	r2, r8
 800140c:	055b      	lsls	r3, r3, #21
 800140e:	0755      	lsls	r5, r2, #29
 8001410:	0252      	lsls	r2, r2, #9
 8001412:	430d      	orrs	r5, r1
 8001414:	0b12      	lsrs	r2, r2, #12
 8001416:	0d5b      	lsrs	r3, r3, #21
 8001418:	e70d      	b.n	8001236 <__aeabi_ddiv+0xae>
 800141a:	4651      	mov	r1, sl
 800141c:	4321      	orrs	r1, r4
 800141e:	d100      	bne.n	8001422 <__aeabi_ddiv+0x29a>
 8001420:	e07c      	b.n	800151c <__aeabi_ddiv+0x394>
 8001422:	2c00      	cmp	r4, #0
 8001424:	d100      	bne.n	8001428 <__aeabi_ddiv+0x2a0>
 8001426:	e0fb      	b.n	8001620 <__aeabi_ddiv+0x498>
 8001428:	0020      	movs	r0, r4
 800142a:	f001 fa55 	bl	80028d8 <__clzsi2>
 800142e:	0002      	movs	r2, r0
 8001430:	3a0b      	subs	r2, #11
 8001432:	231d      	movs	r3, #29
 8001434:	1a9b      	subs	r3, r3, r2
 8001436:	4652      	mov	r2, sl
 8001438:	0001      	movs	r1, r0
 800143a:	40da      	lsrs	r2, r3
 800143c:	4653      	mov	r3, sl
 800143e:	3908      	subs	r1, #8
 8001440:	408b      	lsls	r3, r1
 8001442:	408c      	lsls	r4, r1
 8001444:	0019      	movs	r1, r3
 8001446:	4314      	orrs	r4, r2
 8001448:	4b31      	ldr	r3, [pc, #196]	; (8001510 <__aeabi_ddiv+0x388>)
 800144a:	4458      	add	r0, fp
 800144c:	469b      	mov	fp, r3
 800144e:	4483      	add	fp, r0
 8001450:	2000      	movs	r0, #0
 8001452:	e6d9      	b.n	8001208 <__aeabi_ddiv+0x80>
 8001454:	0003      	movs	r3, r0
 8001456:	4323      	orrs	r3, r4
 8001458:	4698      	mov	r8, r3
 800145a:	d044      	beq.n	80014e6 <__aeabi_ddiv+0x35e>
 800145c:	2c00      	cmp	r4, #0
 800145e:	d100      	bne.n	8001462 <__aeabi_ddiv+0x2da>
 8001460:	e0cf      	b.n	8001602 <__aeabi_ddiv+0x47a>
 8001462:	0020      	movs	r0, r4
 8001464:	f001 fa38 	bl	80028d8 <__clzsi2>
 8001468:	0001      	movs	r1, r0
 800146a:	0002      	movs	r2, r0
 800146c:	390b      	subs	r1, #11
 800146e:	231d      	movs	r3, #29
 8001470:	1a5b      	subs	r3, r3, r1
 8001472:	4649      	mov	r1, r9
 8001474:	0010      	movs	r0, r2
 8001476:	40d9      	lsrs	r1, r3
 8001478:	3808      	subs	r0, #8
 800147a:	4084      	lsls	r4, r0
 800147c:	000b      	movs	r3, r1
 800147e:	464d      	mov	r5, r9
 8001480:	4323      	orrs	r3, r4
 8001482:	4698      	mov	r8, r3
 8001484:	4085      	lsls	r5, r0
 8001486:	4b23      	ldr	r3, [pc, #140]	; (8001514 <__aeabi_ddiv+0x38c>)
 8001488:	1a9b      	subs	r3, r3, r2
 800148a:	469b      	mov	fp, r3
 800148c:	2300      	movs	r3, #0
 800148e:	4699      	mov	r9, r3
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	e69e      	b.n	80011d2 <__aeabi_ddiv+0x4a>
 8001494:	0002      	movs	r2, r0
 8001496:	4322      	orrs	r2, r4
 8001498:	4690      	mov	r8, r2
 800149a:	d11d      	bne.n	80014d8 <__aeabi_ddiv+0x350>
 800149c:	2208      	movs	r2, #8
 800149e:	469b      	mov	fp, r3
 80014a0:	2302      	movs	r3, #2
 80014a2:	2500      	movs	r5, #0
 80014a4:	4691      	mov	r9, r2
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	e693      	b.n	80011d2 <__aeabi_ddiv+0x4a>
 80014aa:	4651      	mov	r1, sl
 80014ac:	4321      	orrs	r1, r4
 80014ae:	d109      	bne.n	80014c4 <__aeabi_ddiv+0x33c>
 80014b0:	2302      	movs	r3, #2
 80014b2:	464a      	mov	r2, r9
 80014b4:	431a      	orrs	r2, r3
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <__aeabi_ddiv+0x390>)
 80014b8:	4691      	mov	r9, r2
 80014ba:	469c      	mov	ip, r3
 80014bc:	2400      	movs	r4, #0
 80014be:	2002      	movs	r0, #2
 80014c0:	44e3      	add	fp, ip
 80014c2:	e6a1      	b.n	8001208 <__aeabi_ddiv+0x80>
 80014c4:	2303      	movs	r3, #3
 80014c6:	464a      	mov	r2, r9
 80014c8:	431a      	orrs	r2, r3
 80014ca:	4b13      	ldr	r3, [pc, #76]	; (8001518 <__aeabi_ddiv+0x390>)
 80014cc:	4691      	mov	r9, r2
 80014ce:	469c      	mov	ip, r3
 80014d0:	4651      	mov	r1, sl
 80014d2:	2003      	movs	r0, #3
 80014d4:	44e3      	add	fp, ip
 80014d6:	e697      	b.n	8001208 <__aeabi_ddiv+0x80>
 80014d8:	220c      	movs	r2, #12
 80014da:	469b      	mov	fp, r3
 80014dc:	2303      	movs	r3, #3
 80014de:	46a0      	mov	r8, r4
 80014e0:	4691      	mov	r9, r2
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	e675      	b.n	80011d2 <__aeabi_ddiv+0x4a>
 80014e6:	2304      	movs	r3, #4
 80014e8:	4699      	mov	r9, r3
 80014ea:	2300      	movs	r3, #0
 80014ec:	469b      	mov	fp, r3
 80014ee:	3301      	adds	r3, #1
 80014f0:	2500      	movs	r5, #0
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	e66d      	b.n	80011d2 <__aeabi_ddiv+0x4a>
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	000007ff 	.word	0x000007ff
 80014fc:	fffffc01 	.word	0xfffffc01
 8001500:	0800dec4 	.word	0x0800dec4
 8001504:	000003ff 	.word	0x000003ff
 8001508:	feffffff 	.word	0xfeffffff
 800150c:	000007fe 	.word	0x000007fe
 8001510:	000003f3 	.word	0x000003f3
 8001514:	fffffc0d 	.word	0xfffffc0d
 8001518:	fffff801 	.word	0xfffff801
 800151c:	464a      	mov	r2, r9
 800151e:	2301      	movs	r3, #1
 8001520:	431a      	orrs	r2, r3
 8001522:	4691      	mov	r9, r2
 8001524:	2400      	movs	r4, #0
 8001526:	2001      	movs	r0, #1
 8001528:	e66e      	b.n	8001208 <__aeabi_ddiv+0x80>
 800152a:	2300      	movs	r3, #0
 800152c:	2280      	movs	r2, #128	; 0x80
 800152e:	469a      	mov	sl, r3
 8001530:	2500      	movs	r5, #0
 8001532:	4b88      	ldr	r3, [pc, #544]	; (8001754 <__aeabi_ddiv+0x5cc>)
 8001534:	0312      	lsls	r2, r2, #12
 8001536:	e67e      	b.n	8001236 <__aeabi_ddiv+0xae>
 8001538:	2501      	movs	r5, #1
 800153a:	426d      	negs	r5, r5
 800153c:	2201      	movs	r2, #1
 800153e:	1ad2      	subs	r2, r2, r3
 8001540:	2a38      	cmp	r2, #56	; 0x38
 8001542:	dd00      	ble.n	8001546 <__aeabi_ddiv+0x3be>
 8001544:	e674      	b.n	8001230 <__aeabi_ddiv+0xa8>
 8001546:	2a1f      	cmp	r2, #31
 8001548:	dc00      	bgt.n	800154c <__aeabi_ddiv+0x3c4>
 800154a:	e0bd      	b.n	80016c8 <__aeabi_ddiv+0x540>
 800154c:	211f      	movs	r1, #31
 800154e:	4249      	negs	r1, r1
 8001550:	1acb      	subs	r3, r1, r3
 8001552:	4641      	mov	r1, r8
 8001554:	40d9      	lsrs	r1, r3
 8001556:	000b      	movs	r3, r1
 8001558:	2a20      	cmp	r2, #32
 800155a:	d004      	beq.n	8001566 <__aeabi_ddiv+0x3de>
 800155c:	4641      	mov	r1, r8
 800155e:	4a7e      	ldr	r2, [pc, #504]	; (8001758 <__aeabi_ddiv+0x5d0>)
 8001560:	445a      	add	r2, fp
 8001562:	4091      	lsls	r1, r2
 8001564:	430d      	orrs	r5, r1
 8001566:	0029      	movs	r1, r5
 8001568:	1e4a      	subs	r2, r1, #1
 800156a:	4191      	sbcs	r1, r2
 800156c:	4319      	orrs	r1, r3
 800156e:	2307      	movs	r3, #7
 8001570:	001d      	movs	r5, r3
 8001572:	2200      	movs	r2, #0
 8001574:	400d      	ands	r5, r1
 8001576:	420b      	tst	r3, r1
 8001578:	d100      	bne.n	800157c <__aeabi_ddiv+0x3f4>
 800157a:	e0d0      	b.n	800171e <__aeabi_ddiv+0x596>
 800157c:	220f      	movs	r2, #15
 800157e:	2300      	movs	r3, #0
 8001580:	400a      	ands	r2, r1
 8001582:	2a04      	cmp	r2, #4
 8001584:	d100      	bne.n	8001588 <__aeabi_ddiv+0x400>
 8001586:	e0c7      	b.n	8001718 <__aeabi_ddiv+0x590>
 8001588:	1d0a      	adds	r2, r1, #4
 800158a:	428a      	cmp	r2, r1
 800158c:	4189      	sbcs	r1, r1
 800158e:	4249      	negs	r1, r1
 8001590:	185b      	adds	r3, r3, r1
 8001592:	0011      	movs	r1, r2
 8001594:	021a      	lsls	r2, r3, #8
 8001596:	d400      	bmi.n	800159a <__aeabi_ddiv+0x412>
 8001598:	e0be      	b.n	8001718 <__aeabi_ddiv+0x590>
 800159a:	2301      	movs	r3, #1
 800159c:	2200      	movs	r2, #0
 800159e:	2500      	movs	r5, #0
 80015a0:	e649      	b.n	8001236 <__aeabi_ddiv+0xae>
 80015a2:	2280      	movs	r2, #128	; 0x80
 80015a4:	4643      	mov	r3, r8
 80015a6:	0312      	lsls	r2, r2, #12
 80015a8:	4213      	tst	r3, r2
 80015aa:	d008      	beq.n	80015be <__aeabi_ddiv+0x436>
 80015ac:	4214      	tst	r4, r2
 80015ae:	d106      	bne.n	80015be <__aeabi_ddiv+0x436>
 80015b0:	4322      	orrs	r2, r4
 80015b2:	0312      	lsls	r2, r2, #12
 80015b4:	46ba      	mov	sl, r7
 80015b6:	000d      	movs	r5, r1
 80015b8:	4b66      	ldr	r3, [pc, #408]	; (8001754 <__aeabi_ddiv+0x5cc>)
 80015ba:	0b12      	lsrs	r2, r2, #12
 80015bc:	e63b      	b.n	8001236 <__aeabi_ddiv+0xae>
 80015be:	2280      	movs	r2, #128	; 0x80
 80015c0:	4643      	mov	r3, r8
 80015c2:	0312      	lsls	r2, r2, #12
 80015c4:	431a      	orrs	r2, r3
 80015c6:	0312      	lsls	r2, r2, #12
 80015c8:	46b2      	mov	sl, r6
 80015ca:	4b62      	ldr	r3, [pc, #392]	; (8001754 <__aeabi_ddiv+0x5cc>)
 80015cc:	0b12      	lsrs	r2, r2, #12
 80015ce:	e632      	b.n	8001236 <__aeabi_ddiv+0xae>
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d100      	bne.n	80015d6 <__aeabi_ddiv+0x44e>
 80015d4:	e702      	b.n	80013dc <__aeabi_ddiv+0x254>
 80015d6:	19a6      	adds	r6, r4, r6
 80015d8:	1e6a      	subs	r2, r5, #1
 80015da:	42a6      	cmp	r6, r4
 80015dc:	d200      	bcs.n	80015e0 <__aeabi_ddiv+0x458>
 80015de:	e089      	b.n	80016f4 <__aeabi_ddiv+0x56c>
 80015e0:	4286      	cmp	r6, r0
 80015e2:	d200      	bcs.n	80015e6 <__aeabi_ddiv+0x45e>
 80015e4:	e09f      	b.n	8001726 <__aeabi_ddiv+0x59e>
 80015e6:	d100      	bne.n	80015ea <__aeabi_ddiv+0x462>
 80015e8:	e0af      	b.n	800174a <__aeabi_ddiv+0x5c2>
 80015ea:	0015      	movs	r5, r2
 80015ec:	e6f4      	b.n	80013d8 <__aeabi_ddiv+0x250>
 80015ee:	42a9      	cmp	r1, r5
 80015f0:	d900      	bls.n	80015f4 <__aeabi_ddiv+0x46c>
 80015f2:	e63c      	b.n	800126e <__aeabi_ddiv+0xe6>
 80015f4:	4643      	mov	r3, r8
 80015f6:	07de      	lsls	r6, r3, #31
 80015f8:	0858      	lsrs	r0, r3, #1
 80015fa:	086b      	lsrs	r3, r5, #1
 80015fc:	431e      	orrs	r6, r3
 80015fe:	07ed      	lsls	r5, r5, #31
 8001600:	e63c      	b.n	800127c <__aeabi_ddiv+0xf4>
 8001602:	f001 f969 	bl	80028d8 <__clzsi2>
 8001606:	0001      	movs	r1, r0
 8001608:	0002      	movs	r2, r0
 800160a:	3115      	adds	r1, #21
 800160c:	3220      	adds	r2, #32
 800160e:	291c      	cmp	r1, #28
 8001610:	dc00      	bgt.n	8001614 <__aeabi_ddiv+0x48c>
 8001612:	e72c      	b.n	800146e <__aeabi_ddiv+0x2e6>
 8001614:	464b      	mov	r3, r9
 8001616:	3808      	subs	r0, #8
 8001618:	4083      	lsls	r3, r0
 800161a:	2500      	movs	r5, #0
 800161c:	4698      	mov	r8, r3
 800161e:	e732      	b.n	8001486 <__aeabi_ddiv+0x2fe>
 8001620:	f001 f95a 	bl	80028d8 <__clzsi2>
 8001624:	0003      	movs	r3, r0
 8001626:	001a      	movs	r2, r3
 8001628:	3215      	adds	r2, #21
 800162a:	3020      	adds	r0, #32
 800162c:	2a1c      	cmp	r2, #28
 800162e:	dc00      	bgt.n	8001632 <__aeabi_ddiv+0x4aa>
 8001630:	e6ff      	b.n	8001432 <__aeabi_ddiv+0x2aa>
 8001632:	4654      	mov	r4, sl
 8001634:	3b08      	subs	r3, #8
 8001636:	2100      	movs	r1, #0
 8001638:	409c      	lsls	r4, r3
 800163a:	e705      	b.n	8001448 <__aeabi_ddiv+0x2c0>
 800163c:	1936      	adds	r6, r6, r4
 800163e:	3b01      	subs	r3, #1
 8001640:	42b4      	cmp	r4, r6
 8001642:	d900      	bls.n	8001646 <__aeabi_ddiv+0x4be>
 8001644:	e6a6      	b.n	8001394 <__aeabi_ddiv+0x20c>
 8001646:	42b2      	cmp	r2, r6
 8001648:	d800      	bhi.n	800164c <__aeabi_ddiv+0x4c4>
 800164a:	e6a3      	b.n	8001394 <__aeabi_ddiv+0x20c>
 800164c:	1e83      	subs	r3, r0, #2
 800164e:	1936      	adds	r6, r6, r4
 8001650:	e6a0      	b.n	8001394 <__aeabi_ddiv+0x20c>
 8001652:	1909      	adds	r1, r1, r4
 8001654:	3d01      	subs	r5, #1
 8001656:	428c      	cmp	r4, r1
 8001658:	d900      	bls.n	800165c <__aeabi_ddiv+0x4d4>
 800165a:	e68d      	b.n	8001378 <__aeabi_ddiv+0x1f0>
 800165c:	428a      	cmp	r2, r1
 800165e:	d800      	bhi.n	8001662 <__aeabi_ddiv+0x4da>
 8001660:	e68a      	b.n	8001378 <__aeabi_ddiv+0x1f0>
 8001662:	1e85      	subs	r5, r0, #2
 8001664:	1909      	adds	r1, r1, r4
 8001666:	e687      	b.n	8001378 <__aeabi_ddiv+0x1f0>
 8001668:	220f      	movs	r2, #15
 800166a:	402a      	ands	r2, r5
 800166c:	2a04      	cmp	r2, #4
 800166e:	d100      	bne.n	8001672 <__aeabi_ddiv+0x4ea>
 8001670:	e6bc      	b.n	80013ec <__aeabi_ddiv+0x264>
 8001672:	1d29      	adds	r1, r5, #4
 8001674:	42a9      	cmp	r1, r5
 8001676:	41ad      	sbcs	r5, r5
 8001678:	426d      	negs	r5, r5
 800167a:	08c9      	lsrs	r1, r1, #3
 800167c:	44a8      	add	r8, r5
 800167e:	e6b6      	b.n	80013ee <__aeabi_ddiv+0x266>
 8001680:	42af      	cmp	r7, r5
 8001682:	d900      	bls.n	8001686 <__aeabi_ddiv+0x4fe>
 8001684:	e662      	b.n	800134c <__aeabi_ddiv+0x1c4>
 8001686:	4281      	cmp	r1, r0
 8001688:	d804      	bhi.n	8001694 <__aeabi_ddiv+0x50c>
 800168a:	d000      	beq.n	800168e <__aeabi_ddiv+0x506>
 800168c:	e65e      	b.n	800134c <__aeabi_ddiv+0x1c4>
 800168e:	42ae      	cmp	r6, r5
 8001690:	d800      	bhi.n	8001694 <__aeabi_ddiv+0x50c>
 8001692:	e65b      	b.n	800134c <__aeabi_ddiv+0x1c4>
 8001694:	2302      	movs	r3, #2
 8001696:	425b      	negs	r3, r3
 8001698:	469c      	mov	ip, r3
 800169a:	9b00      	ldr	r3, [sp, #0]
 800169c:	44e0      	add	r8, ip
 800169e:	469c      	mov	ip, r3
 80016a0:	4465      	add	r5, ip
 80016a2:	429d      	cmp	r5, r3
 80016a4:	419b      	sbcs	r3, r3
 80016a6:	425b      	negs	r3, r3
 80016a8:	191b      	adds	r3, r3, r4
 80016aa:	18c0      	adds	r0, r0, r3
 80016ac:	e64f      	b.n	800134e <__aeabi_ddiv+0x1c6>
 80016ae:	42b2      	cmp	r2, r6
 80016b0:	d800      	bhi.n	80016b4 <__aeabi_ddiv+0x52c>
 80016b2:	e612      	b.n	80012da <__aeabi_ddiv+0x152>
 80016b4:	1e83      	subs	r3, r0, #2
 80016b6:	1936      	adds	r6, r6, r4
 80016b8:	e60f      	b.n	80012da <__aeabi_ddiv+0x152>
 80016ba:	428a      	cmp	r2, r1
 80016bc:	d800      	bhi.n	80016c0 <__aeabi_ddiv+0x538>
 80016be:	e5fa      	b.n	80012b6 <__aeabi_ddiv+0x12e>
 80016c0:	1e83      	subs	r3, r0, #2
 80016c2:	4698      	mov	r8, r3
 80016c4:	1909      	adds	r1, r1, r4
 80016c6:	e5f6      	b.n	80012b6 <__aeabi_ddiv+0x12e>
 80016c8:	4b24      	ldr	r3, [pc, #144]	; (800175c <__aeabi_ddiv+0x5d4>)
 80016ca:	0028      	movs	r0, r5
 80016cc:	445b      	add	r3, fp
 80016ce:	4641      	mov	r1, r8
 80016d0:	409d      	lsls	r5, r3
 80016d2:	4099      	lsls	r1, r3
 80016d4:	40d0      	lsrs	r0, r2
 80016d6:	1e6b      	subs	r3, r5, #1
 80016d8:	419d      	sbcs	r5, r3
 80016da:	4643      	mov	r3, r8
 80016dc:	4301      	orrs	r1, r0
 80016de:	4329      	orrs	r1, r5
 80016e0:	40d3      	lsrs	r3, r2
 80016e2:	074a      	lsls	r2, r1, #29
 80016e4:	d100      	bne.n	80016e8 <__aeabi_ddiv+0x560>
 80016e6:	e755      	b.n	8001594 <__aeabi_ddiv+0x40c>
 80016e8:	220f      	movs	r2, #15
 80016ea:	400a      	ands	r2, r1
 80016ec:	2a04      	cmp	r2, #4
 80016ee:	d000      	beq.n	80016f2 <__aeabi_ddiv+0x56a>
 80016f0:	e74a      	b.n	8001588 <__aeabi_ddiv+0x400>
 80016f2:	e74f      	b.n	8001594 <__aeabi_ddiv+0x40c>
 80016f4:	0015      	movs	r5, r2
 80016f6:	4286      	cmp	r6, r0
 80016f8:	d000      	beq.n	80016fc <__aeabi_ddiv+0x574>
 80016fa:	e66d      	b.n	80013d8 <__aeabi_ddiv+0x250>
 80016fc:	9a00      	ldr	r2, [sp, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d000      	beq.n	8001704 <__aeabi_ddiv+0x57c>
 8001702:	e669      	b.n	80013d8 <__aeabi_ddiv+0x250>
 8001704:	e66a      	b.n	80013dc <__aeabi_ddiv+0x254>
 8001706:	4b16      	ldr	r3, [pc, #88]	; (8001760 <__aeabi_ddiv+0x5d8>)
 8001708:	445b      	add	r3, fp
 800170a:	2b00      	cmp	r3, #0
 800170c:	dc00      	bgt.n	8001710 <__aeabi_ddiv+0x588>
 800170e:	e713      	b.n	8001538 <__aeabi_ddiv+0x3b0>
 8001710:	2501      	movs	r5, #1
 8001712:	2100      	movs	r1, #0
 8001714:	44a8      	add	r8, r5
 8001716:	e66a      	b.n	80013ee <__aeabi_ddiv+0x266>
 8001718:	075d      	lsls	r5, r3, #29
 800171a:	025b      	lsls	r3, r3, #9
 800171c:	0b1a      	lsrs	r2, r3, #12
 800171e:	08c9      	lsrs	r1, r1, #3
 8001720:	2300      	movs	r3, #0
 8001722:	430d      	orrs	r5, r1
 8001724:	e587      	b.n	8001236 <__aeabi_ddiv+0xae>
 8001726:	9900      	ldr	r1, [sp, #0]
 8001728:	3d02      	subs	r5, #2
 800172a:	004a      	lsls	r2, r1, #1
 800172c:	428a      	cmp	r2, r1
 800172e:	41bf      	sbcs	r7, r7
 8001730:	427f      	negs	r7, r7
 8001732:	193f      	adds	r7, r7, r4
 8001734:	19f6      	adds	r6, r6, r7
 8001736:	9200      	str	r2, [sp, #0]
 8001738:	e7dd      	b.n	80016f6 <__aeabi_ddiv+0x56e>
 800173a:	2280      	movs	r2, #128	; 0x80
 800173c:	4643      	mov	r3, r8
 800173e:	0312      	lsls	r2, r2, #12
 8001740:	431a      	orrs	r2, r3
 8001742:	0312      	lsls	r2, r2, #12
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <__aeabi_ddiv+0x5cc>)
 8001746:	0b12      	lsrs	r2, r2, #12
 8001748:	e575      	b.n	8001236 <__aeabi_ddiv+0xae>
 800174a:	9900      	ldr	r1, [sp, #0]
 800174c:	4299      	cmp	r1, r3
 800174e:	d3ea      	bcc.n	8001726 <__aeabi_ddiv+0x59e>
 8001750:	0015      	movs	r5, r2
 8001752:	e7d3      	b.n	80016fc <__aeabi_ddiv+0x574>
 8001754:	000007ff 	.word	0x000007ff
 8001758:	0000043e 	.word	0x0000043e
 800175c:	0000041e 	.word	0x0000041e
 8001760:	000003ff 	.word	0x000003ff

08001764 <__eqdf2>:
 8001764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001766:	464e      	mov	r6, r9
 8001768:	4645      	mov	r5, r8
 800176a:	46de      	mov	lr, fp
 800176c:	4657      	mov	r7, sl
 800176e:	4690      	mov	r8, r2
 8001770:	b5e0      	push	{r5, r6, r7, lr}
 8001772:	0017      	movs	r7, r2
 8001774:	031a      	lsls	r2, r3, #12
 8001776:	0b12      	lsrs	r2, r2, #12
 8001778:	0005      	movs	r5, r0
 800177a:	4684      	mov	ip, r0
 800177c:	4819      	ldr	r0, [pc, #100]	; (80017e4 <__eqdf2+0x80>)
 800177e:	030e      	lsls	r6, r1, #12
 8001780:	004c      	lsls	r4, r1, #1
 8001782:	4691      	mov	r9, r2
 8001784:	005a      	lsls	r2, r3, #1
 8001786:	0fdb      	lsrs	r3, r3, #31
 8001788:	469b      	mov	fp, r3
 800178a:	0b36      	lsrs	r6, r6, #12
 800178c:	0d64      	lsrs	r4, r4, #21
 800178e:	0fc9      	lsrs	r1, r1, #31
 8001790:	0d52      	lsrs	r2, r2, #21
 8001792:	4284      	cmp	r4, r0
 8001794:	d019      	beq.n	80017ca <__eqdf2+0x66>
 8001796:	4282      	cmp	r2, r0
 8001798:	d010      	beq.n	80017bc <__eqdf2+0x58>
 800179a:	2001      	movs	r0, #1
 800179c:	4294      	cmp	r4, r2
 800179e:	d10e      	bne.n	80017be <__eqdf2+0x5a>
 80017a0:	454e      	cmp	r6, r9
 80017a2:	d10c      	bne.n	80017be <__eqdf2+0x5a>
 80017a4:	2001      	movs	r0, #1
 80017a6:	45c4      	cmp	ip, r8
 80017a8:	d109      	bne.n	80017be <__eqdf2+0x5a>
 80017aa:	4559      	cmp	r1, fp
 80017ac:	d017      	beq.n	80017de <__eqdf2+0x7a>
 80017ae:	2c00      	cmp	r4, #0
 80017b0:	d105      	bne.n	80017be <__eqdf2+0x5a>
 80017b2:	0030      	movs	r0, r6
 80017b4:	4328      	orrs	r0, r5
 80017b6:	1e43      	subs	r3, r0, #1
 80017b8:	4198      	sbcs	r0, r3
 80017ba:	e000      	b.n	80017be <__eqdf2+0x5a>
 80017bc:	2001      	movs	r0, #1
 80017be:	bcf0      	pop	{r4, r5, r6, r7}
 80017c0:	46bb      	mov	fp, r7
 80017c2:	46b2      	mov	sl, r6
 80017c4:	46a9      	mov	r9, r5
 80017c6:	46a0      	mov	r8, r4
 80017c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ca:	0033      	movs	r3, r6
 80017cc:	2001      	movs	r0, #1
 80017ce:	432b      	orrs	r3, r5
 80017d0:	d1f5      	bne.n	80017be <__eqdf2+0x5a>
 80017d2:	42a2      	cmp	r2, r4
 80017d4:	d1f3      	bne.n	80017be <__eqdf2+0x5a>
 80017d6:	464b      	mov	r3, r9
 80017d8:	433b      	orrs	r3, r7
 80017da:	d1f0      	bne.n	80017be <__eqdf2+0x5a>
 80017dc:	e7e2      	b.n	80017a4 <__eqdf2+0x40>
 80017de:	2000      	movs	r0, #0
 80017e0:	e7ed      	b.n	80017be <__eqdf2+0x5a>
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	000007ff 	.word	0x000007ff

080017e8 <__gedf2>:
 80017e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ea:	4647      	mov	r7, r8
 80017ec:	46ce      	mov	lr, r9
 80017ee:	0004      	movs	r4, r0
 80017f0:	0018      	movs	r0, r3
 80017f2:	0016      	movs	r6, r2
 80017f4:	031b      	lsls	r3, r3, #12
 80017f6:	0b1b      	lsrs	r3, r3, #12
 80017f8:	4d2d      	ldr	r5, [pc, #180]	; (80018b0 <__gedf2+0xc8>)
 80017fa:	004a      	lsls	r2, r1, #1
 80017fc:	4699      	mov	r9, r3
 80017fe:	b580      	push	{r7, lr}
 8001800:	0043      	lsls	r3, r0, #1
 8001802:	030f      	lsls	r7, r1, #12
 8001804:	46a4      	mov	ip, r4
 8001806:	46b0      	mov	r8, r6
 8001808:	0b3f      	lsrs	r7, r7, #12
 800180a:	0d52      	lsrs	r2, r2, #21
 800180c:	0fc9      	lsrs	r1, r1, #31
 800180e:	0d5b      	lsrs	r3, r3, #21
 8001810:	0fc0      	lsrs	r0, r0, #31
 8001812:	42aa      	cmp	r2, r5
 8001814:	d021      	beq.n	800185a <__gedf2+0x72>
 8001816:	42ab      	cmp	r3, r5
 8001818:	d013      	beq.n	8001842 <__gedf2+0x5a>
 800181a:	2a00      	cmp	r2, #0
 800181c:	d122      	bne.n	8001864 <__gedf2+0x7c>
 800181e:	433c      	orrs	r4, r7
 8001820:	2b00      	cmp	r3, #0
 8001822:	d102      	bne.n	800182a <__gedf2+0x42>
 8001824:	464d      	mov	r5, r9
 8001826:	432e      	orrs	r6, r5
 8001828:	d022      	beq.n	8001870 <__gedf2+0x88>
 800182a:	2c00      	cmp	r4, #0
 800182c:	d010      	beq.n	8001850 <__gedf2+0x68>
 800182e:	4281      	cmp	r1, r0
 8001830:	d022      	beq.n	8001878 <__gedf2+0x90>
 8001832:	2002      	movs	r0, #2
 8001834:	3901      	subs	r1, #1
 8001836:	4008      	ands	r0, r1
 8001838:	3801      	subs	r0, #1
 800183a:	bcc0      	pop	{r6, r7}
 800183c:	46b9      	mov	r9, r7
 800183e:	46b0      	mov	r8, r6
 8001840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001842:	464d      	mov	r5, r9
 8001844:	432e      	orrs	r6, r5
 8001846:	d129      	bne.n	800189c <__gedf2+0xb4>
 8001848:	2a00      	cmp	r2, #0
 800184a:	d1f0      	bne.n	800182e <__gedf2+0x46>
 800184c:	433c      	orrs	r4, r7
 800184e:	d1ee      	bne.n	800182e <__gedf2+0x46>
 8001850:	2800      	cmp	r0, #0
 8001852:	d1f2      	bne.n	800183a <__gedf2+0x52>
 8001854:	2001      	movs	r0, #1
 8001856:	4240      	negs	r0, r0
 8001858:	e7ef      	b.n	800183a <__gedf2+0x52>
 800185a:	003d      	movs	r5, r7
 800185c:	4325      	orrs	r5, r4
 800185e:	d11d      	bne.n	800189c <__gedf2+0xb4>
 8001860:	4293      	cmp	r3, r2
 8001862:	d0ee      	beq.n	8001842 <__gedf2+0x5a>
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1e2      	bne.n	800182e <__gedf2+0x46>
 8001868:	464c      	mov	r4, r9
 800186a:	4326      	orrs	r6, r4
 800186c:	d1df      	bne.n	800182e <__gedf2+0x46>
 800186e:	e7e0      	b.n	8001832 <__gedf2+0x4a>
 8001870:	2000      	movs	r0, #0
 8001872:	2c00      	cmp	r4, #0
 8001874:	d0e1      	beq.n	800183a <__gedf2+0x52>
 8001876:	e7dc      	b.n	8001832 <__gedf2+0x4a>
 8001878:	429a      	cmp	r2, r3
 800187a:	dc0a      	bgt.n	8001892 <__gedf2+0xaa>
 800187c:	dbe8      	blt.n	8001850 <__gedf2+0x68>
 800187e:	454f      	cmp	r7, r9
 8001880:	d8d7      	bhi.n	8001832 <__gedf2+0x4a>
 8001882:	d00e      	beq.n	80018a2 <__gedf2+0xba>
 8001884:	2000      	movs	r0, #0
 8001886:	454f      	cmp	r7, r9
 8001888:	d2d7      	bcs.n	800183a <__gedf2+0x52>
 800188a:	2900      	cmp	r1, #0
 800188c:	d0e2      	beq.n	8001854 <__gedf2+0x6c>
 800188e:	0008      	movs	r0, r1
 8001890:	e7d3      	b.n	800183a <__gedf2+0x52>
 8001892:	4243      	negs	r3, r0
 8001894:	4158      	adcs	r0, r3
 8001896:	0040      	lsls	r0, r0, #1
 8001898:	3801      	subs	r0, #1
 800189a:	e7ce      	b.n	800183a <__gedf2+0x52>
 800189c:	2002      	movs	r0, #2
 800189e:	4240      	negs	r0, r0
 80018a0:	e7cb      	b.n	800183a <__gedf2+0x52>
 80018a2:	45c4      	cmp	ip, r8
 80018a4:	d8c5      	bhi.n	8001832 <__gedf2+0x4a>
 80018a6:	2000      	movs	r0, #0
 80018a8:	45c4      	cmp	ip, r8
 80018aa:	d2c6      	bcs.n	800183a <__gedf2+0x52>
 80018ac:	e7ed      	b.n	800188a <__gedf2+0xa2>
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	000007ff 	.word	0x000007ff

080018b4 <__ledf2>:
 80018b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b6:	4647      	mov	r7, r8
 80018b8:	46ce      	mov	lr, r9
 80018ba:	0004      	movs	r4, r0
 80018bc:	0018      	movs	r0, r3
 80018be:	0016      	movs	r6, r2
 80018c0:	031b      	lsls	r3, r3, #12
 80018c2:	0b1b      	lsrs	r3, r3, #12
 80018c4:	4d2c      	ldr	r5, [pc, #176]	; (8001978 <__ledf2+0xc4>)
 80018c6:	004a      	lsls	r2, r1, #1
 80018c8:	4699      	mov	r9, r3
 80018ca:	b580      	push	{r7, lr}
 80018cc:	0043      	lsls	r3, r0, #1
 80018ce:	030f      	lsls	r7, r1, #12
 80018d0:	46a4      	mov	ip, r4
 80018d2:	46b0      	mov	r8, r6
 80018d4:	0b3f      	lsrs	r7, r7, #12
 80018d6:	0d52      	lsrs	r2, r2, #21
 80018d8:	0fc9      	lsrs	r1, r1, #31
 80018da:	0d5b      	lsrs	r3, r3, #21
 80018dc:	0fc0      	lsrs	r0, r0, #31
 80018de:	42aa      	cmp	r2, r5
 80018e0:	d00d      	beq.n	80018fe <__ledf2+0x4a>
 80018e2:	42ab      	cmp	r3, r5
 80018e4:	d010      	beq.n	8001908 <__ledf2+0x54>
 80018e6:	2a00      	cmp	r2, #0
 80018e8:	d127      	bne.n	800193a <__ledf2+0x86>
 80018ea:	433c      	orrs	r4, r7
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d111      	bne.n	8001914 <__ledf2+0x60>
 80018f0:	464d      	mov	r5, r9
 80018f2:	432e      	orrs	r6, r5
 80018f4:	d10e      	bne.n	8001914 <__ledf2+0x60>
 80018f6:	2000      	movs	r0, #0
 80018f8:	2c00      	cmp	r4, #0
 80018fa:	d015      	beq.n	8001928 <__ledf2+0x74>
 80018fc:	e00e      	b.n	800191c <__ledf2+0x68>
 80018fe:	003d      	movs	r5, r7
 8001900:	4325      	orrs	r5, r4
 8001902:	d110      	bne.n	8001926 <__ledf2+0x72>
 8001904:	4293      	cmp	r3, r2
 8001906:	d118      	bne.n	800193a <__ledf2+0x86>
 8001908:	464d      	mov	r5, r9
 800190a:	432e      	orrs	r6, r5
 800190c:	d10b      	bne.n	8001926 <__ledf2+0x72>
 800190e:	2a00      	cmp	r2, #0
 8001910:	d102      	bne.n	8001918 <__ledf2+0x64>
 8001912:	433c      	orrs	r4, r7
 8001914:	2c00      	cmp	r4, #0
 8001916:	d00b      	beq.n	8001930 <__ledf2+0x7c>
 8001918:	4281      	cmp	r1, r0
 800191a:	d014      	beq.n	8001946 <__ledf2+0x92>
 800191c:	2002      	movs	r0, #2
 800191e:	3901      	subs	r1, #1
 8001920:	4008      	ands	r0, r1
 8001922:	3801      	subs	r0, #1
 8001924:	e000      	b.n	8001928 <__ledf2+0x74>
 8001926:	2002      	movs	r0, #2
 8001928:	bcc0      	pop	{r6, r7}
 800192a:	46b9      	mov	r9, r7
 800192c:	46b0      	mov	r8, r6
 800192e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001930:	2800      	cmp	r0, #0
 8001932:	d1f9      	bne.n	8001928 <__ledf2+0x74>
 8001934:	2001      	movs	r0, #1
 8001936:	4240      	negs	r0, r0
 8001938:	e7f6      	b.n	8001928 <__ledf2+0x74>
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1ec      	bne.n	8001918 <__ledf2+0x64>
 800193e:	464c      	mov	r4, r9
 8001940:	4326      	orrs	r6, r4
 8001942:	d1e9      	bne.n	8001918 <__ledf2+0x64>
 8001944:	e7ea      	b.n	800191c <__ledf2+0x68>
 8001946:	429a      	cmp	r2, r3
 8001948:	dd04      	ble.n	8001954 <__ledf2+0xa0>
 800194a:	4243      	negs	r3, r0
 800194c:	4158      	adcs	r0, r3
 800194e:	0040      	lsls	r0, r0, #1
 8001950:	3801      	subs	r0, #1
 8001952:	e7e9      	b.n	8001928 <__ledf2+0x74>
 8001954:	429a      	cmp	r2, r3
 8001956:	dbeb      	blt.n	8001930 <__ledf2+0x7c>
 8001958:	454f      	cmp	r7, r9
 800195a:	d8df      	bhi.n	800191c <__ledf2+0x68>
 800195c:	d006      	beq.n	800196c <__ledf2+0xb8>
 800195e:	2000      	movs	r0, #0
 8001960:	454f      	cmp	r7, r9
 8001962:	d2e1      	bcs.n	8001928 <__ledf2+0x74>
 8001964:	2900      	cmp	r1, #0
 8001966:	d0e5      	beq.n	8001934 <__ledf2+0x80>
 8001968:	0008      	movs	r0, r1
 800196a:	e7dd      	b.n	8001928 <__ledf2+0x74>
 800196c:	45c4      	cmp	ip, r8
 800196e:	d8d5      	bhi.n	800191c <__ledf2+0x68>
 8001970:	2000      	movs	r0, #0
 8001972:	45c4      	cmp	ip, r8
 8001974:	d2d8      	bcs.n	8001928 <__ledf2+0x74>
 8001976:	e7f5      	b.n	8001964 <__ledf2+0xb0>
 8001978:	000007ff 	.word	0x000007ff

0800197c <__aeabi_dmul>:
 800197c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800197e:	4645      	mov	r5, r8
 8001980:	46de      	mov	lr, fp
 8001982:	4657      	mov	r7, sl
 8001984:	464e      	mov	r6, r9
 8001986:	b5e0      	push	{r5, r6, r7, lr}
 8001988:	001f      	movs	r7, r3
 800198a:	030b      	lsls	r3, r1, #12
 800198c:	0b1b      	lsrs	r3, r3, #12
 800198e:	469b      	mov	fp, r3
 8001990:	004d      	lsls	r5, r1, #1
 8001992:	0fcb      	lsrs	r3, r1, #31
 8001994:	0004      	movs	r4, r0
 8001996:	4691      	mov	r9, r2
 8001998:	4698      	mov	r8, r3
 800199a:	b087      	sub	sp, #28
 800199c:	0d6d      	lsrs	r5, r5, #21
 800199e:	d100      	bne.n	80019a2 <__aeabi_dmul+0x26>
 80019a0:	e1cd      	b.n	8001d3e <__aeabi_dmul+0x3c2>
 80019a2:	4bce      	ldr	r3, [pc, #824]	; (8001cdc <__aeabi_dmul+0x360>)
 80019a4:	429d      	cmp	r5, r3
 80019a6:	d100      	bne.n	80019aa <__aeabi_dmul+0x2e>
 80019a8:	e1e9      	b.n	8001d7e <__aeabi_dmul+0x402>
 80019aa:	465a      	mov	r2, fp
 80019ac:	0f43      	lsrs	r3, r0, #29
 80019ae:	00d2      	lsls	r2, r2, #3
 80019b0:	4313      	orrs	r3, r2
 80019b2:	2280      	movs	r2, #128	; 0x80
 80019b4:	0412      	lsls	r2, r2, #16
 80019b6:	431a      	orrs	r2, r3
 80019b8:	00c3      	lsls	r3, r0, #3
 80019ba:	469a      	mov	sl, r3
 80019bc:	4bc8      	ldr	r3, [pc, #800]	; (8001ce0 <__aeabi_dmul+0x364>)
 80019be:	4693      	mov	fp, r2
 80019c0:	469c      	mov	ip, r3
 80019c2:	2300      	movs	r3, #0
 80019c4:	2600      	movs	r6, #0
 80019c6:	4465      	add	r5, ip
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	033c      	lsls	r4, r7, #12
 80019cc:	007b      	lsls	r3, r7, #1
 80019ce:	4648      	mov	r0, r9
 80019d0:	0b24      	lsrs	r4, r4, #12
 80019d2:	0d5b      	lsrs	r3, r3, #21
 80019d4:	0fff      	lsrs	r7, r7, #31
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d100      	bne.n	80019dc <__aeabi_dmul+0x60>
 80019da:	e189      	b.n	8001cf0 <__aeabi_dmul+0x374>
 80019dc:	4abf      	ldr	r2, [pc, #764]	; (8001cdc <__aeabi_dmul+0x360>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d019      	beq.n	8001a16 <__aeabi_dmul+0x9a>
 80019e2:	0f42      	lsrs	r2, r0, #29
 80019e4:	00e4      	lsls	r4, r4, #3
 80019e6:	4322      	orrs	r2, r4
 80019e8:	2480      	movs	r4, #128	; 0x80
 80019ea:	0424      	lsls	r4, r4, #16
 80019ec:	4314      	orrs	r4, r2
 80019ee:	4abc      	ldr	r2, [pc, #752]	; (8001ce0 <__aeabi_dmul+0x364>)
 80019f0:	2100      	movs	r1, #0
 80019f2:	4694      	mov	ip, r2
 80019f4:	4642      	mov	r2, r8
 80019f6:	4463      	add	r3, ip
 80019f8:	195b      	adds	r3, r3, r5
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	9b01      	ldr	r3, [sp, #4]
 80019fe:	407a      	eors	r2, r7
 8001a00:	3301      	adds	r3, #1
 8001a02:	00c0      	lsls	r0, r0, #3
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	9302      	str	r3, [sp, #8]
 8001a08:	2e0a      	cmp	r6, #10
 8001a0a:	dd1c      	ble.n	8001a46 <__aeabi_dmul+0xca>
 8001a0c:	003a      	movs	r2, r7
 8001a0e:	2e0b      	cmp	r6, #11
 8001a10:	d05e      	beq.n	8001ad0 <__aeabi_dmul+0x154>
 8001a12:	4647      	mov	r7, r8
 8001a14:	e056      	b.n	8001ac4 <__aeabi_dmul+0x148>
 8001a16:	4649      	mov	r1, r9
 8001a18:	4bb0      	ldr	r3, [pc, #704]	; (8001cdc <__aeabi_dmul+0x360>)
 8001a1a:	4321      	orrs	r1, r4
 8001a1c:	18eb      	adds	r3, r5, r3
 8001a1e:	9301      	str	r3, [sp, #4]
 8001a20:	2900      	cmp	r1, #0
 8001a22:	d12a      	bne.n	8001a7a <__aeabi_dmul+0xfe>
 8001a24:	2080      	movs	r0, #128	; 0x80
 8001a26:	2202      	movs	r2, #2
 8001a28:	0100      	lsls	r0, r0, #4
 8001a2a:	002b      	movs	r3, r5
 8001a2c:	4684      	mov	ip, r0
 8001a2e:	4316      	orrs	r6, r2
 8001a30:	4642      	mov	r2, r8
 8001a32:	4463      	add	r3, ip
 8001a34:	407a      	eors	r2, r7
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	9302      	str	r3, [sp, #8]
 8001a3a:	2e0a      	cmp	r6, #10
 8001a3c:	dd00      	ble.n	8001a40 <__aeabi_dmul+0xc4>
 8001a3e:	e231      	b.n	8001ea4 <__aeabi_dmul+0x528>
 8001a40:	2000      	movs	r0, #0
 8001a42:	2400      	movs	r4, #0
 8001a44:	2102      	movs	r1, #2
 8001a46:	2e02      	cmp	r6, #2
 8001a48:	dc26      	bgt.n	8001a98 <__aeabi_dmul+0x11c>
 8001a4a:	3e01      	subs	r6, #1
 8001a4c:	2e01      	cmp	r6, #1
 8001a4e:	d852      	bhi.n	8001af6 <__aeabi_dmul+0x17a>
 8001a50:	2902      	cmp	r1, #2
 8001a52:	d04c      	beq.n	8001aee <__aeabi_dmul+0x172>
 8001a54:	2901      	cmp	r1, #1
 8001a56:	d000      	beq.n	8001a5a <__aeabi_dmul+0xde>
 8001a58:	e118      	b.n	8001c8c <__aeabi_dmul+0x310>
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	2400      	movs	r4, #0
 8001a5e:	2500      	movs	r5, #0
 8001a60:	051b      	lsls	r3, r3, #20
 8001a62:	4323      	orrs	r3, r4
 8001a64:	07d2      	lsls	r2, r2, #31
 8001a66:	4313      	orrs	r3, r2
 8001a68:	0028      	movs	r0, r5
 8001a6a:	0019      	movs	r1, r3
 8001a6c:	b007      	add	sp, #28
 8001a6e:	bcf0      	pop	{r4, r5, r6, r7}
 8001a70:	46bb      	mov	fp, r7
 8001a72:	46b2      	mov	sl, r6
 8001a74:	46a9      	mov	r9, r5
 8001a76:	46a0      	mov	r8, r4
 8001a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a7a:	2180      	movs	r1, #128	; 0x80
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	0109      	lsls	r1, r1, #4
 8001a80:	002b      	movs	r3, r5
 8001a82:	468c      	mov	ip, r1
 8001a84:	4316      	orrs	r6, r2
 8001a86:	4642      	mov	r2, r8
 8001a88:	4463      	add	r3, ip
 8001a8a:	407a      	eors	r2, r7
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	9302      	str	r3, [sp, #8]
 8001a90:	2e0a      	cmp	r6, #10
 8001a92:	dd00      	ble.n	8001a96 <__aeabi_dmul+0x11a>
 8001a94:	e228      	b.n	8001ee8 <__aeabi_dmul+0x56c>
 8001a96:	2103      	movs	r1, #3
 8001a98:	2501      	movs	r5, #1
 8001a9a:	40b5      	lsls	r5, r6
 8001a9c:	46ac      	mov	ip, r5
 8001a9e:	26a6      	movs	r6, #166	; 0xa6
 8001aa0:	4663      	mov	r3, ip
 8001aa2:	00f6      	lsls	r6, r6, #3
 8001aa4:	4035      	ands	r5, r6
 8001aa6:	4233      	tst	r3, r6
 8001aa8:	d10b      	bne.n	8001ac2 <__aeabi_dmul+0x146>
 8001aaa:	2690      	movs	r6, #144	; 0x90
 8001aac:	00b6      	lsls	r6, r6, #2
 8001aae:	4233      	tst	r3, r6
 8001ab0:	d118      	bne.n	8001ae4 <__aeabi_dmul+0x168>
 8001ab2:	3eb9      	subs	r6, #185	; 0xb9
 8001ab4:	3eff      	subs	r6, #255	; 0xff
 8001ab6:	421e      	tst	r6, r3
 8001ab8:	d01d      	beq.n	8001af6 <__aeabi_dmul+0x17a>
 8001aba:	46a3      	mov	fp, r4
 8001abc:	4682      	mov	sl, r0
 8001abe:	9100      	str	r1, [sp, #0]
 8001ac0:	e000      	b.n	8001ac4 <__aeabi_dmul+0x148>
 8001ac2:	0017      	movs	r7, r2
 8001ac4:	9900      	ldr	r1, [sp, #0]
 8001ac6:	003a      	movs	r2, r7
 8001ac8:	2902      	cmp	r1, #2
 8001aca:	d010      	beq.n	8001aee <__aeabi_dmul+0x172>
 8001acc:	465c      	mov	r4, fp
 8001ace:	4650      	mov	r0, sl
 8001ad0:	2903      	cmp	r1, #3
 8001ad2:	d1bf      	bne.n	8001a54 <__aeabi_dmul+0xd8>
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	031b      	lsls	r3, r3, #12
 8001ad8:	431c      	orrs	r4, r3
 8001ada:	0324      	lsls	r4, r4, #12
 8001adc:	0005      	movs	r5, r0
 8001ade:	4b7f      	ldr	r3, [pc, #508]	; (8001cdc <__aeabi_dmul+0x360>)
 8001ae0:	0b24      	lsrs	r4, r4, #12
 8001ae2:	e7bd      	b.n	8001a60 <__aeabi_dmul+0xe4>
 8001ae4:	2480      	movs	r4, #128	; 0x80
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	4b7c      	ldr	r3, [pc, #496]	; (8001cdc <__aeabi_dmul+0x360>)
 8001aea:	0324      	lsls	r4, r4, #12
 8001aec:	e7b8      	b.n	8001a60 <__aeabi_dmul+0xe4>
 8001aee:	2400      	movs	r4, #0
 8001af0:	2500      	movs	r5, #0
 8001af2:	4b7a      	ldr	r3, [pc, #488]	; (8001cdc <__aeabi_dmul+0x360>)
 8001af4:	e7b4      	b.n	8001a60 <__aeabi_dmul+0xe4>
 8001af6:	4653      	mov	r3, sl
 8001af8:	041e      	lsls	r6, r3, #16
 8001afa:	0c36      	lsrs	r6, r6, #16
 8001afc:	0c1f      	lsrs	r7, r3, #16
 8001afe:	0033      	movs	r3, r6
 8001b00:	0c01      	lsrs	r1, r0, #16
 8001b02:	0400      	lsls	r0, r0, #16
 8001b04:	0c00      	lsrs	r0, r0, #16
 8001b06:	4343      	muls	r3, r0
 8001b08:	4698      	mov	r8, r3
 8001b0a:	0003      	movs	r3, r0
 8001b0c:	437b      	muls	r3, r7
 8001b0e:	4699      	mov	r9, r3
 8001b10:	0033      	movs	r3, r6
 8001b12:	434b      	muls	r3, r1
 8001b14:	469c      	mov	ip, r3
 8001b16:	4643      	mov	r3, r8
 8001b18:	000d      	movs	r5, r1
 8001b1a:	0c1b      	lsrs	r3, r3, #16
 8001b1c:	469a      	mov	sl, r3
 8001b1e:	437d      	muls	r5, r7
 8001b20:	44cc      	add	ip, r9
 8001b22:	44d4      	add	ip, sl
 8001b24:	9500      	str	r5, [sp, #0]
 8001b26:	45e1      	cmp	r9, ip
 8001b28:	d904      	bls.n	8001b34 <__aeabi_dmul+0x1b8>
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	025b      	lsls	r3, r3, #9
 8001b2e:	4699      	mov	r9, r3
 8001b30:	444d      	add	r5, r9
 8001b32:	9500      	str	r5, [sp, #0]
 8001b34:	4663      	mov	r3, ip
 8001b36:	0c1b      	lsrs	r3, r3, #16
 8001b38:	001d      	movs	r5, r3
 8001b3a:	4663      	mov	r3, ip
 8001b3c:	041b      	lsls	r3, r3, #16
 8001b3e:	469c      	mov	ip, r3
 8001b40:	4643      	mov	r3, r8
 8001b42:	041b      	lsls	r3, r3, #16
 8001b44:	0c1b      	lsrs	r3, r3, #16
 8001b46:	4698      	mov	r8, r3
 8001b48:	4663      	mov	r3, ip
 8001b4a:	4443      	add	r3, r8
 8001b4c:	9303      	str	r3, [sp, #12]
 8001b4e:	0c23      	lsrs	r3, r4, #16
 8001b50:	4698      	mov	r8, r3
 8001b52:	0033      	movs	r3, r6
 8001b54:	0424      	lsls	r4, r4, #16
 8001b56:	0c24      	lsrs	r4, r4, #16
 8001b58:	4363      	muls	r3, r4
 8001b5a:	469c      	mov	ip, r3
 8001b5c:	0023      	movs	r3, r4
 8001b5e:	437b      	muls	r3, r7
 8001b60:	4699      	mov	r9, r3
 8001b62:	4643      	mov	r3, r8
 8001b64:	435e      	muls	r6, r3
 8001b66:	435f      	muls	r7, r3
 8001b68:	444e      	add	r6, r9
 8001b6a:	4663      	mov	r3, ip
 8001b6c:	46b2      	mov	sl, r6
 8001b6e:	0c1e      	lsrs	r6, r3, #16
 8001b70:	4456      	add	r6, sl
 8001b72:	45b1      	cmp	r9, r6
 8001b74:	d903      	bls.n	8001b7e <__aeabi_dmul+0x202>
 8001b76:	2380      	movs	r3, #128	; 0x80
 8001b78:	025b      	lsls	r3, r3, #9
 8001b7a:	4699      	mov	r9, r3
 8001b7c:	444f      	add	r7, r9
 8001b7e:	0c33      	lsrs	r3, r6, #16
 8001b80:	4699      	mov	r9, r3
 8001b82:	003b      	movs	r3, r7
 8001b84:	444b      	add	r3, r9
 8001b86:	9305      	str	r3, [sp, #20]
 8001b88:	4663      	mov	r3, ip
 8001b8a:	46ac      	mov	ip, r5
 8001b8c:	041f      	lsls	r7, r3, #16
 8001b8e:	0c3f      	lsrs	r7, r7, #16
 8001b90:	0436      	lsls	r6, r6, #16
 8001b92:	19f6      	adds	r6, r6, r7
 8001b94:	44b4      	add	ip, r6
 8001b96:	4663      	mov	r3, ip
 8001b98:	9304      	str	r3, [sp, #16]
 8001b9a:	465b      	mov	r3, fp
 8001b9c:	0c1b      	lsrs	r3, r3, #16
 8001b9e:	469c      	mov	ip, r3
 8001ba0:	465b      	mov	r3, fp
 8001ba2:	041f      	lsls	r7, r3, #16
 8001ba4:	0c3f      	lsrs	r7, r7, #16
 8001ba6:	003b      	movs	r3, r7
 8001ba8:	4343      	muls	r3, r0
 8001baa:	4699      	mov	r9, r3
 8001bac:	4663      	mov	r3, ip
 8001bae:	4343      	muls	r3, r0
 8001bb0:	469a      	mov	sl, r3
 8001bb2:	464b      	mov	r3, r9
 8001bb4:	4660      	mov	r0, ip
 8001bb6:	0c1b      	lsrs	r3, r3, #16
 8001bb8:	469b      	mov	fp, r3
 8001bba:	4348      	muls	r0, r1
 8001bbc:	4379      	muls	r1, r7
 8001bbe:	4451      	add	r1, sl
 8001bc0:	4459      	add	r1, fp
 8001bc2:	458a      	cmp	sl, r1
 8001bc4:	d903      	bls.n	8001bce <__aeabi_dmul+0x252>
 8001bc6:	2380      	movs	r3, #128	; 0x80
 8001bc8:	025b      	lsls	r3, r3, #9
 8001bca:	469a      	mov	sl, r3
 8001bcc:	4450      	add	r0, sl
 8001bce:	0c0b      	lsrs	r3, r1, #16
 8001bd0:	469a      	mov	sl, r3
 8001bd2:	464b      	mov	r3, r9
 8001bd4:	041b      	lsls	r3, r3, #16
 8001bd6:	0c1b      	lsrs	r3, r3, #16
 8001bd8:	4699      	mov	r9, r3
 8001bda:	003b      	movs	r3, r7
 8001bdc:	4363      	muls	r3, r4
 8001bde:	0409      	lsls	r1, r1, #16
 8001be0:	4645      	mov	r5, r8
 8001be2:	4449      	add	r1, r9
 8001be4:	4699      	mov	r9, r3
 8001be6:	4663      	mov	r3, ip
 8001be8:	435c      	muls	r4, r3
 8001bea:	436b      	muls	r3, r5
 8001bec:	469c      	mov	ip, r3
 8001bee:	464b      	mov	r3, r9
 8001bf0:	0c1b      	lsrs	r3, r3, #16
 8001bf2:	4698      	mov	r8, r3
 8001bf4:	436f      	muls	r7, r5
 8001bf6:	193f      	adds	r7, r7, r4
 8001bf8:	4447      	add	r7, r8
 8001bfa:	4450      	add	r0, sl
 8001bfc:	42bc      	cmp	r4, r7
 8001bfe:	d903      	bls.n	8001c08 <__aeabi_dmul+0x28c>
 8001c00:	2380      	movs	r3, #128	; 0x80
 8001c02:	025b      	lsls	r3, r3, #9
 8001c04:	4698      	mov	r8, r3
 8001c06:	44c4      	add	ip, r8
 8001c08:	9b04      	ldr	r3, [sp, #16]
 8001c0a:	9d00      	ldr	r5, [sp, #0]
 8001c0c:	4698      	mov	r8, r3
 8001c0e:	4445      	add	r5, r8
 8001c10:	42b5      	cmp	r5, r6
 8001c12:	41b6      	sbcs	r6, r6
 8001c14:	4273      	negs	r3, r6
 8001c16:	4698      	mov	r8, r3
 8001c18:	464b      	mov	r3, r9
 8001c1a:	041e      	lsls	r6, r3, #16
 8001c1c:	9b05      	ldr	r3, [sp, #20]
 8001c1e:	043c      	lsls	r4, r7, #16
 8001c20:	4699      	mov	r9, r3
 8001c22:	0c36      	lsrs	r6, r6, #16
 8001c24:	19a4      	adds	r4, r4, r6
 8001c26:	444c      	add	r4, r9
 8001c28:	46a1      	mov	r9, r4
 8001c2a:	4683      	mov	fp, r0
 8001c2c:	186e      	adds	r6, r5, r1
 8001c2e:	44c1      	add	r9, r8
 8001c30:	428e      	cmp	r6, r1
 8001c32:	4189      	sbcs	r1, r1
 8001c34:	44cb      	add	fp, r9
 8001c36:	465d      	mov	r5, fp
 8001c38:	4249      	negs	r1, r1
 8001c3a:	186d      	adds	r5, r5, r1
 8001c3c:	429c      	cmp	r4, r3
 8001c3e:	41a4      	sbcs	r4, r4
 8001c40:	45c1      	cmp	r9, r8
 8001c42:	419b      	sbcs	r3, r3
 8001c44:	4583      	cmp	fp, r0
 8001c46:	4180      	sbcs	r0, r0
 8001c48:	428d      	cmp	r5, r1
 8001c4a:	4189      	sbcs	r1, r1
 8001c4c:	425b      	negs	r3, r3
 8001c4e:	4264      	negs	r4, r4
 8001c50:	431c      	orrs	r4, r3
 8001c52:	4240      	negs	r0, r0
 8001c54:	9b03      	ldr	r3, [sp, #12]
 8001c56:	4249      	negs	r1, r1
 8001c58:	4301      	orrs	r1, r0
 8001c5a:	0270      	lsls	r0, r6, #9
 8001c5c:	0c3f      	lsrs	r7, r7, #16
 8001c5e:	4318      	orrs	r0, r3
 8001c60:	19e4      	adds	r4, r4, r7
 8001c62:	1e47      	subs	r7, r0, #1
 8001c64:	41b8      	sbcs	r0, r7
 8001c66:	1864      	adds	r4, r4, r1
 8001c68:	4464      	add	r4, ip
 8001c6a:	0df6      	lsrs	r6, r6, #23
 8001c6c:	0261      	lsls	r1, r4, #9
 8001c6e:	4330      	orrs	r0, r6
 8001c70:	0dec      	lsrs	r4, r5, #23
 8001c72:	026e      	lsls	r6, r5, #9
 8001c74:	430c      	orrs	r4, r1
 8001c76:	4330      	orrs	r0, r6
 8001c78:	01c9      	lsls	r1, r1, #7
 8001c7a:	d400      	bmi.n	8001c7e <__aeabi_dmul+0x302>
 8001c7c:	e0f1      	b.n	8001e62 <__aeabi_dmul+0x4e6>
 8001c7e:	2101      	movs	r1, #1
 8001c80:	0843      	lsrs	r3, r0, #1
 8001c82:	4001      	ands	r1, r0
 8001c84:	430b      	orrs	r3, r1
 8001c86:	07e0      	lsls	r0, r4, #31
 8001c88:	4318      	orrs	r0, r3
 8001c8a:	0864      	lsrs	r4, r4, #1
 8001c8c:	4915      	ldr	r1, [pc, #84]	; (8001ce4 <__aeabi_dmul+0x368>)
 8001c8e:	9b02      	ldr	r3, [sp, #8]
 8001c90:	468c      	mov	ip, r1
 8001c92:	4463      	add	r3, ip
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	dc00      	bgt.n	8001c9a <__aeabi_dmul+0x31e>
 8001c98:	e097      	b.n	8001dca <__aeabi_dmul+0x44e>
 8001c9a:	0741      	lsls	r1, r0, #29
 8001c9c:	d009      	beq.n	8001cb2 <__aeabi_dmul+0x336>
 8001c9e:	210f      	movs	r1, #15
 8001ca0:	4001      	ands	r1, r0
 8001ca2:	2904      	cmp	r1, #4
 8001ca4:	d005      	beq.n	8001cb2 <__aeabi_dmul+0x336>
 8001ca6:	1d01      	adds	r1, r0, #4
 8001ca8:	4281      	cmp	r1, r0
 8001caa:	4180      	sbcs	r0, r0
 8001cac:	4240      	negs	r0, r0
 8001cae:	1824      	adds	r4, r4, r0
 8001cb0:	0008      	movs	r0, r1
 8001cb2:	01e1      	lsls	r1, r4, #7
 8001cb4:	d506      	bpl.n	8001cc4 <__aeabi_dmul+0x348>
 8001cb6:	2180      	movs	r1, #128	; 0x80
 8001cb8:	00c9      	lsls	r1, r1, #3
 8001cba:	468c      	mov	ip, r1
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <__aeabi_dmul+0x36c>)
 8001cbe:	401c      	ands	r4, r3
 8001cc0:	9b02      	ldr	r3, [sp, #8]
 8001cc2:	4463      	add	r3, ip
 8001cc4:	4909      	ldr	r1, [pc, #36]	; (8001cec <__aeabi_dmul+0x370>)
 8001cc6:	428b      	cmp	r3, r1
 8001cc8:	dd00      	ble.n	8001ccc <__aeabi_dmul+0x350>
 8001cca:	e710      	b.n	8001aee <__aeabi_dmul+0x172>
 8001ccc:	0761      	lsls	r1, r4, #29
 8001cce:	08c5      	lsrs	r5, r0, #3
 8001cd0:	0264      	lsls	r4, r4, #9
 8001cd2:	055b      	lsls	r3, r3, #21
 8001cd4:	430d      	orrs	r5, r1
 8001cd6:	0b24      	lsrs	r4, r4, #12
 8001cd8:	0d5b      	lsrs	r3, r3, #21
 8001cda:	e6c1      	b.n	8001a60 <__aeabi_dmul+0xe4>
 8001cdc:	000007ff 	.word	0x000007ff
 8001ce0:	fffffc01 	.word	0xfffffc01
 8001ce4:	000003ff 	.word	0x000003ff
 8001ce8:	feffffff 	.word	0xfeffffff
 8001cec:	000007fe 	.word	0x000007fe
 8001cf0:	464b      	mov	r3, r9
 8001cf2:	4323      	orrs	r3, r4
 8001cf4:	d059      	beq.n	8001daa <__aeabi_dmul+0x42e>
 8001cf6:	2c00      	cmp	r4, #0
 8001cf8:	d100      	bne.n	8001cfc <__aeabi_dmul+0x380>
 8001cfa:	e0a3      	b.n	8001e44 <__aeabi_dmul+0x4c8>
 8001cfc:	0020      	movs	r0, r4
 8001cfe:	f000 fdeb 	bl	80028d8 <__clzsi2>
 8001d02:	0001      	movs	r1, r0
 8001d04:	0003      	movs	r3, r0
 8001d06:	390b      	subs	r1, #11
 8001d08:	221d      	movs	r2, #29
 8001d0a:	1a52      	subs	r2, r2, r1
 8001d0c:	4649      	mov	r1, r9
 8001d0e:	0018      	movs	r0, r3
 8001d10:	40d1      	lsrs	r1, r2
 8001d12:	464a      	mov	r2, r9
 8001d14:	3808      	subs	r0, #8
 8001d16:	4082      	lsls	r2, r0
 8001d18:	4084      	lsls	r4, r0
 8001d1a:	0010      	movs	r0, r2
 8001d1c:	430c      	orrs	r4, r1
 8001d1e:	4a74      	ldr	r2, [pc, #464]	; (8001ef0 <__aeabi_dmul+0x574>)
 8001d20:	1aeb      	subs	r3, r5, r3
 8001d22:	4694      	mov	ip, r2
 8001d24:	4642      	mov	r2, r8
 8001d26:	4463      	add	r3, ip
 8001d28:	9301      	str	r3, [sp, #4]
 8001d2a:	9b01      	ldr	r3, [sp, #4]
 8001d2c:	407a      	eors	r2, r7
 8001d2e:	3301      	adds	r3, #1
 8001d30:	2100      	movs	r1, #0
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	9302      	str	r3, [sp, #8]
 8001d36:	2e0a      	cmp	r6, #10
 8001d38:	dd00      	ble.n	8001d3c <__aeabi_dmul+0x3c0>
 8001d3a:	e667      	b.n	8001a0c <__aeabi_dmul+0x90>
 8001d3c:	e683      	b.n	8001a46 <__aeabi_dmul+0xca>
 8001d3e:	465b      	mov	r3, fp
 8001d40:	4303      	orrs	r3, r0
 8001d42:	469a      	mov	sl, r3
 8001d44:	d02a      	beq.n	8001d9c <__aeabi_dmul+0x420>
 8001d46:	465b      	mov	r3, fp
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d06d      	beq.n	8001e28 <__aeabi_dmul+0x4ac>
 8001d4c:	4658      	mov	r0, fp
 8001d4e:	f000 fdc3 	bl	80028d8 <__clzsi2>
 8001d52:	0001      	movs	r1, r0
 8001d54:	0003      	movs	r3, r0
 8001d56:	390b      	subs	r1, #11
 8001d58:	221d      	movs	r2, #29
 8001d5a:	1a52      	subs	r2, r2, r1
 8001d5c:	0021      	movs	r1, r4
 8001d5e:	0018      	movs	r0, r3
 8001d60:	465d      	mov	r5, fp
 8001d62:	40d1      	lsrs	r1, r2
 8001d64:	3808      	subs	r0, #8
 8001d66:	4085      	lsls	r5, r0
 8001d68:	000a      	movs	r2, r1
 8001d6a:	4084      	lsls	r4, r0
 8001d6c:	432a      	orrs	r2, r5
 8001d6e:	4693      	mov	fp, r2
 8001d70:	46a2      	mov	sl, r4
 8001d72:	4d5f      	ldr	r5, [pc, #380]	; (8001ef0 <__aeabi_dmul+0x574>)
 8001d74:	2600      	movs	r6, #0
 8001d76:	1aed      	subs	r5, r5, r3
 8001d78:	2300      	movs	r3, #0
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	e625      	b.n	80019ca <__aeabi_dmul+0x4e>
 8001d7e:	465b      	mov	r3, fp
 8001d80:	4303      	orrs	r3, r0
 8001d82:	469a      	mov	sl, r3
 8001d84:	d105      	bne.n	8001d92 <__aeabi_dmul+0x416>
 8001d86:	2300      	movs	r3, #0
 8001d88:	469b      	mov	fp, r3
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	2608      	movs	r6, #8
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	e61b      	b.n	80019ca <__aeabi_dmul+0x4e>
 8001d92:	2303      	movs	r3, #3
 8001d94:	4682      	mov	sl, r0
 8001d96:	260c      	movs	r6, #12
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	e616      	b.n	80019ca <__aeabi_dmul+0x4e>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	469b      	mov	fp, r3
 8001da0:	3301      	adds	r3, #1
 8001da2:	2604      	movs	r6, #4
 8001da4:	2500      	movs	r5, #0
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	e60f      	b.n	80019ca <__aeabi_dmul+0x4e>
 8001daa:	4642      	mov	r2, r8
 8001dac:	3301      	adds	r3, #1
 8001dae:	9501      	str	r5, [sp, #4]
 8001db0:	431e      	orrs	r6, r3
 8001db2:	9b01      	ldr	r3, [sp, #4]
 8001db4:	407a      	eors	r2, r7
 8001db6:	3301      	adds	r3, #1
 8001db8:	2400      	movs	r4, #0
 8001dba:	2000      	movs	r0, #0
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	9302      	str	r3, [sp, #8]
 8001dc2:	2e0a      	cmp	r6, #10
 8001dc4:	dd00      	ble.n	8001dc8 <__aeabi_dmul+0x44c>
 8001dc6:	e621      	b.n	8001a0c <__aeabi_dmul+0x90>
 8001dc8:	e63d      	b.n	8001a46 <__aeabi_dmul+0xca>
 8001dca:	2101      	movs	r1, #1
 8001dcc:	1ac9      	subs	r1, r1, r3
 8001dce:	2938      	cmp	r1, #56	; 0x38
 8001dd0:	dd00      	ble.n	8001dd4 <__aeabi_dmul+0x458>
 8001dd2:	e642      	b.n	8001a5a <__aeabi_dmul+0xde>
 8001dd4:	291f      	cmp	r1, #31
 8001dd6:	dd47      	ble.n	8001e68 <__aeabi_dmul+0x4ec>
 8001dd8:	261f      	movs	r6, #31
 8001dda:	0025      	movs	r5, r4
 8001ddc:	4276      	negs	r6, r6
 8001dde:	1af3      	subs	r3, r6, r3
 8001de0:	40dd      	lsrs	r5, r3
 8001de2:	002b      	movs	r3, r5
 8001de4:	2920      	cmp	r1, #32
 8001de6:	d005      	beq.n	8001df4 <__aeabi_dmul+0x478>
 8001de8:	4942      	ldr	r1, [pc, #264]	; (8001ef4 <__aeabi_dmul+0x578>)
 8001dea:	9d02      	ldr	r5, [sp, #8]
 8001dec:	468c      	mov	ip, r1
 8001dee:	4465      	add	r5, ip
 8001df0:	40ac      	lsls	r4, r5
 8001df2:	4320      	orrs	r0, r4
 8001df4:	1e41      	subs	r1, r0, #1
 8001df6:	4188      	sbcs	r0, r1
 8001df8:	4318      	orrs	r0, r3
 8001dfa:	2307      	movs	r3, #7
 8001dfc:	001d      	movs	r5, r3
 8001dfe:	2400      	movs	r4, #0
 8001e00:	4005      	ands	r5, r0
 8001e02:	4203      	tst	r3, r0
 8001e04:	d04a      	beq.n	8001e9c <__aeabi_dmul+0x520>
 8001e06:	230f      	movs	r3, #15
 8001e08:	2400      	movs	r4, #0
 8001e0a:	4003      	ands	r3, r0
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d042      	beq.n	8001e96 <__aeabi_dmul+0x51a>
 8001e10:	1d03      	adds	r3, r0, #4
 8001e12:	4283      	cmp	r3, r0
 8001e14:	4180      	sbcs	r0, r0
 8001e16:	4240      	negs	r0, r0
 8001e18:	1824      	adds	r4, r4, r0
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	0223      	lsls	r3, r4, #8
 8001e1e:	d53a      	bpl.n	8001e96 <__aeabi_dmul+0x51a>
 8001e20:	2301      	movs	r3, #1
 8001e22:	2400      	movs	r4, #0
 8001e24:	2500      	movs	r5, #0
 8001e26:	e61b      	b.n	8001a60 <__aeabi_dmul+0xe4>
 8001e28:	f000 fd56 	bl	80028d8 <__clzsi2>
 8001e2c:	0001      	movs	r1, r0
 8001e2e:	0003      	movs	r3, r0
 8001e30:	3115      	adds	r1, #21
 8001e32:	3320      	adds	r3, #32
 8001e34:	291c      	cmp	r1, #28
 8001e36:	dd8f      	ble.n	8001d58 <__aeabi_dmul+0x3dc>
 8001e38:	3808      	subs	r0, #8
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	4084      	lsls	r4, r0
 8001e3e:	4692      	mov	sl, r2
 8001e40:	46a3      	mov	fp, r4
 8001e42:	e796      	b.n	8001d72 <__aeabi_dmul+0x3f6>
 8001e44:	f000 fd48 	bl	80028d8 <__clzsi2>
 8001e48:	0001      	movs	r1, r0
 8001e4a:	0003      	movs	r3, r0
 8001e4c:	3115      	adds	r1, #21
 8001e4e:	3320      	adds	r3, #32
 8001e50:	291c      	cmp	r1, #28
 8001e52:	dc00      	bgt.n	8001e56 <__aeabi_dmul+0x4da>
 8001e54:	e758      	b.n	8001d08 <__aeabi_dmul+0x38c>
 8001e56:	0002      	movs	r2, r0
 8001e58:	464c      	mov	r4, r9
 8001e5a:	3a08      	subs	r2, #8
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	4094      	lsls	r4, r2
 8001e60:	e75d      	b.n	8001d1e <__aeabi_dmul+0x3a2>
 8001e62:	9b01      	ldr	r3, [sp, #4]
 8001e64:	9302      	str	r3, [sp, #8]
 8001e66:	e711      	b.n	8001c8c <__aeabi_dmul+0x310>
 8001e68:	4b23      	ldr	r3, [pc, #140]	; (8001ef8 <__aeabi_dmul+0x57c>)
 8001e6a:	0026      	movs	r6, r4
 8001e6c:	469c      	mov	ip, r3
 8001e6e:	0003      	movs	r3, r0
 8001e70:	9d02      	ldr	r5, [sp, #8]
 8001e72:	40cb      	lsrs	r3, r1
 8001e74:	4465      	add	r5, ip
 8001e76:	40ae      	lsls	r6, r5
 8001e78:	431e      	orrs	r6, r3
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	40ab      	lsls	r3, r5
 8001e7e:	1e58      	subs	r0, r3, #1
 8001e80:	4183      	sbcs	r3, r0
 8001e82:	0030      	movs	r0, r6
 8001e84:	4318      	orrs	r0, r3
 8001e86:	40cc      	lsrs	r4, r1
 8001e88:	0743      	lsls	r3, r0, #29
 8001e8a:	d0c7      	beq.n	8001e1c <__aeabi_dmul+0x4a0>
 8001e8c:	230f      	movs	r3, #15
 8001e8e:	4003      	ands	r3, r0
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d1bd      	bne.n	8001e10 <__aeabi_dmul+0x494>
 8001e94:	e7c2      	b.n	8001e1c <__aeabi_dmul+0x4a0>
 8001e96:	0765      	lsls	r5, r4, #29
 8001e98:	0264      	lsls	r4, r4, #9
 8001e9a:	0b24      	lsrs	r4, r4, #12
 8001e9c:	08c0      	lsrs	r0, r0, #3
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	4305      	orrs	r5, r0
 8001ea2:	e5dd      	b.n	8001a60 <__aeabi_dmul+0xe4>
 8001ea4:	2500      	movs	r5, #0
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	2e0f      	cmp	r6, #15
 8001eaa:	d10c      	bne.n	8001ec6 <__aeabi_dmul+0x54a>
 8001eac:	2480      	movs	r4, #128	; 0x80
 8001eae:	465b      	mov	r3, fp
 8001eb0:	0324      	lsls	r4, r4, #12
 8001eb2:	4223      	tst	r3, r4
 8001eb4:	d00e      	beq.n	8001ed4 <__aeabi_dmul+0x558>
 8001eb6:	4221      	tst	r1, r4
 8001eb8:	d10c      	bne.n	8001ed4 <__aeabi_dmul+0x558>
 8001eba:	430c      	orrs	r4, r1
 8001ebc:	0324      	lsls	r4, r4, #12
 8001ebe:	003a      	movs	r2, r7
 8001ec0:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <__aeabi_dmul+0x580>)
 8001ec2:	0b24      	lsrs	r4, r4, #12
 8001ec4:	e5cc      	b.n	8001a60 <__aeabi_dmul+0xe4>
 8001ec6:	2e0b      	cmp	r6, #11
 8001ec8:	d000      	beq.n	8001ecc <__aeabi_dmul+0x550>
 8001eca:	e5a2      	b.n	8001a12 <__aeabi_dmul+0x96>
 8001ecc:	468b      	mov	fp, r1
 8001ece:	46aa      	mov	sl, r5
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	e5f7      	b.n	8001ac4 <__aeabi_dmul+0x148>
 8001ed4:	2480      	movs	r4, #128	; 0x80
 8001ed6:	465b      	mov	r3, fp
 8001ed8:	0324      	lsls	r4, r4, #12
 8001eda:	431c      	orrs	r4, r3
 8001edc:	0324      	lsls	r4, r4, #12
 8001ede:	4642      	mov	r2, r8
 8001ee0:	4655      	mov	r5, sl
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <__aeabi_dmul+0x580>)
 8001ee4:	0b24      	lsrs	r4, r4, #12
 8001ee6:	e5bb      	b.n	8001a60 <__aeabi_dmul+0xe4>
 8001ee8:	464d      	mov	r5, r9
 8001eea:	0021      	movs	r1, r4
 8001eec:	2303      	movs	r3, #3
 8001eee:	e7db      	b.n	8001ea8 <__aeabi_dmul+0x52c>
 8001ef0:	fffffc0d 	.word	0xfffffc0d
 8001ef4:	0000043e 	.word	0x0000043e
 8001ef8:	0000041e 	.word	0x0000041e
 8001efc:	000007ff 	.word	0x000007ff

08001f00 <__aeabi_dsub>:
 8001f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f02:	4657      	mov	r7, sl
 8001f04:	464e      	mov	r6, r9
 8001f06:	4645      	mov	r5, r8
 8001f08:	46de      	mov	lr, fp
 8001f0a:	b5e0      	push	{r5, r6, r7, lr}
 8001f0c:	000d      	movs	r5, r1
 8001f0e:	0004      	movs	r4, r0
 8001f10:	0019      	movs	r1, r3
 8001f12:	0010      	movs	r0, r2
 8001f14:	032b      	lsls	r3, r5, #12
 8001f16:	0a5b      	lsrs	r3, r3, #9
 8001f18:	0f62      	lsrs	r2, r4, #29
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	00e3      	lsls	r3, r4, #3
 8001f1e:	030c      	lsls	r4, r1, #12
 8001f20:	0a64      	lsrs	r4, r4, #9
 8001f22:	0f47      	lsrs	r7, r0, #29
 8001f24:	4327      	orrs	r7, r4
 8001f26:	4cd0      	ldr	r4, [pc, #832]	; (8002268 <__aeabi_dsub+0x368>)
 8001f28:	006e      	lsls	r6, r5, #1
 8001f2a:	4691      	mov	r9, r2
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	004a      	lsls	r2, r1, #1
 8001f30:	00c0      	lsls	r0, r0, #3
 8001f32:	4698      	mov	r8, r3
 8001f34:	46a2      	mov	sl, r4
 8001f36:	0d76      	lsrs	r6, r6, #21
 8001f38:	0fed      	lsrs	r5, r5, #31
 8001f3a:	0d52      	lsrs	r2, r2, #21
 8001f3c:	0fc9      	lsrs	r1, r1, #31
 8001f3e:	9001      	str	r0, [sp, #4]
 8001f40:	42a2      	cmp	r2, r4
 8001f42:	d100      	bne.n	8001f46 <__aeabi_dsub+0x46>
 8001f44:	e0b9      	b.n	80020ba <__aeabi_dsub+0x1ba>
 8001f46:	2401      	movs	r4, #1
 8001f48:	4061      	eors	r1, r4
 8001f4a:	468b      	mov	fp, r1
 8001f4c:	428d      	cmp	r5, r1
 8001f4e:	d100      	bne.n	8001f52 <__aeabi_dsub+0x52>
 8001f50:	e08d      	b.n	800206e <__aeabi_dsub+0x16e>
 8001f52:	1ab4      	subs	r4, r6, r2
 8001f54:	46a4      	mov	ip, r4
 8001f56:	2c00      	cmp	r4, #0
 8001f58:	dc00      	bgt.n	8001f5c <__aeabi_dsub+0x5c>
 8001f5a:	e0b7      	b.n	80020cc <__aeabi_dsub+0x1cc>
 8001f5c:	2a00      	cmp	r2, #0
 8001f5e:	d100      	bne.n	8001f62 <__aeabi_dsub+0x62>
 8001f60:	e0cb      	b.n	80020fa <__aeabi_dsub+0x1fa>
 8001f62:	4ac1      	ldr	r2, [pc, #772]	; (8002268 <__aeabi_dsub+0x368>)
 8001f64:	4296      	cmp	r6, r2
 8001f66:	d100      	bne.n	8001f6a <__aeabi_dsub+0x6a>
 8001f68:	e186      	b.n	8002278 <__aeabi_dsub+0x378>
 8001f6a:	2280      	movs	r2, #128	; 0x80
 8001f6c:	0412      	lsls	r2, r2, #16
 8001f6e:	4317      	orrs	r7, r2
 8001f70:	4662      	mov	r2, ip
 8001f72:	2a38      	cmp	r2, #56	; 0x38
 8001f74:	dd00      	ble.n	8001f78 <__aeabi_dsub+0x78>
 8001f76:	e1a4      	b.n	80022c2 <__aeabi_dsub+0x3c2>
 8001f78:	2a1f      	cmp	r2, #31
 8001f7a:	dd00      	ble.n	8001f7e <__aeabi_dsub+0x7e>
 8001f7c:	e21d      	b.n	80023ba <__aeabi_dsub+0x4ba>
 8001f7e:	4661      	mov	r1, ip
 8001f80:	2220      	movs	r2, #32
 8001f82:	003c      	movs	r4, r7
 8001f84:	1a52      	subs	r2, r2, r1
 8001f86:	0001      	movs	r1, r0
 8001f88:	4090      	lsls	r0, r2
 8001f8a:	4094      	lsls	r4, r2
 8001f8c:	1e42      	subs	r2, r0, #1
 8001f8e:	4190      	sbcs	r0, r2
 8001f90:	4662      	mov	r2, ip
 8001f92:	46a0      	mov	r8, r4
 8001f94:	4664      	mov	r4, ip
 8001f96:	40d7      	lsrs	r7, r2
 8001f98:	464a      	mov	r2, r9
 8001f9a:	40e1      	lsrs	r1, r4
 8001f9c:	4644      	mov	r4, r8
 8001f9e:	1bd2      	subs	r2, r2, r7
 8001fa0:	4691      	mov	r9, r2
 8001fa2:	430c      	orrs	r4, r1
 8001fa4:	4304      	orrs	r4, r0
 8001fa6:	1b1c      	subs	r4, r3, r4
 8001fa8:	42a3      	cmp	r3, r4
 8001faa:	4192      	sbcs	r2, r2
 8001fac:	464b      	mov	r3, r9
 8001fae:	4252      	negs	r2, r2
 8001fb0:	1a9b      	subs	r3, r3, r2
 8001fb2:	469a      	mov	sl, r3
 8001fb4:	4653      	mov	r3, sl
 8001fb6:	021b      	lsls	r3, r3, #8
 8001fb8:	d400      	bmi.n	8001fbc <__aeabi_dsub+0xbc>
 8001fba:	e12b      	b.n	8002214 <__aeabi_dsub+0x314>
 8001fbc:	4653      	mov	r3, sl
 8001fbe:	025a      	lsls	r2, r3, #9
 8001fc0:	0a53      	lsrs	r3, r2, #9
 8001fc2:	469a      	mov	sl, r3
 8001fc4:	4653      	mov	r3, sl
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d100      	bne.n	8001fcc <__aeabi_dsub+0xcc>
 8001fca:	e166      	b.n	800229a <__aeabi_dsub+0x39a>
 8001fcc:	4650      	mov	r0, sl
 8001fce:	f000 fc83 	bl	80028d8 <__clzsi2>
 8001fd2:	0003      	movs	r3, r0
 8001fd4:	3b08      	subs	r3, #8
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	0020      	movs	r0, r4
 8001fda:	1ad2      	subs	r2, r2, r3
 8001fdc:	4651      	mov	r1, sl
 8001fde:	40d0      	lsrs	r0, r2
 8001fe0:	4099      	lsls	r1, r3
 8001fe2:	0002      	movs	r2, r0
 8001fe4:	409c      	lsls	r4, r3
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	429e      	cmp	r6, r3
 8001fea:	dd00      	ble.n	8001fee <__aeabi_dsub+0xee>
 8001fec:	e164      	b.n	80022b8 <__aeabi_dsub+0x3b8>
 8001fee:	1b9b      	subs	r3, r3, r6
 8001ff0:	1c59      	adds	r1, r3, #1
 8001ff2:	291f      	cmp	r1, #31
 8001ff4:	dd00      	ble.n	8001ff8 <__aeabi_dsub+0xf8>
 8001ff6:	e0fe      	b.n	80021f6 <__aeabi_dsub+0x2f6>
 8001ff8:	2320      	movs	r3, #32
 8001ffa:	0010      	movs	r0, r2
 8001ffc:	0026      	movs	r6, r4
 8001ffe:	1a5b      	subs	r3, r3, r1
 8002000:	409c      	lsls	r4, r3
 8002002:	4098      	lsls	r0, r3
 8002004:	40ce      	lsrs	r6, r1
 8002006:	40ca      	lsrs	r2, r1
 8002008:	1e63      	subs	r3, r4, #1
 800200a:	419c      	sbcs	r4, r3
 800200c:	4330      	orrs	r0, r6
 800200e:	4692      	mov	sl, r2
 8002010:	2600      	movs	r6, #0
 8002012:	4304      	orrs	r4, r0
 8002014:	0763      	lsls	r3, r4, #29
 8002016:	d009      	beq.n	800202c <__aeabi_dsub+0x12c>
 8002018:	230f      	movs	r3, #15
 800201a:	4023      	ands	r3, r4
 800201c:	2b04      	cmp	r3, #4
 800201e:	d005      	beq.n	800202c <__aeabi_dsub+0x12c>
 8002020:	1d23      	adds	r3, r4, #4
 8002022:	42a3      	cmp	r3, r4
 8002024:	41a4      	sbcs	r4, r4
 8002026:	4264      	negs	r4, r4
 8002028:	44a2      	add	sl, r4
 800202a:	001c      	movs	r4, r3
 800202c:	4653      	mov	r3, sl
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	d400      	bmi.n	8002034 <__aeabi_dsub+0x134>
 8002032:	e0f2      	b.n	800221a <__aeabi_dsub+0x31a>
 8002034:	4b8c      	ldr	r3, [pc, #560]	; (8002268 <__aeabi_dsub+0x368>)
 8002036:	3601      	adds	r6, #1
 8002038:	429e      	cmp	r6, r3
 800203a:	d100      	bne.n	800203e <__aeabi_dsub+0x13e>
 800203c:	e10f      	b.n	800225e <__aeabi_dsub+0x35e>
 800203e:	4653      	mov	r3, sl
 8002040:	498a      	ldr	r1, [pc, #552]	; (800226c <__aeabi_dsub+0x36c>)
 8002042:	08e4      	lsrs	r4, r4, #3
 8002044:	400b      	ands	r3, r1
 8002046:	0019      	movs	r1, r3
 8002048:	075b      	lsls	r3, r3, #29
 800204a:	4323      	orrs	r3, r4
 800204c:	0572      	lsls	r2, r6, #21
 800204e:	024c      	lsls	r4, r1, #9
 8002050:	0b24      	lsrs	r4, r4, #12
 8002052:	0d52      	lsrs	r2, r2, #21
 8002054:	0512      	lsls	r2, r2, #20
 8002056:	4322      	orrs	r2, r4
 8002058:	07ed      	lsls	r5, r5, #31
 800205a:	432a      	orrs	r2, r5
 800205c:	0018      	movs	r0, r3
 800205e:	0011      	movs	r1, r2
 8002060:	b003      	add	sp, #12
 8002062:	bcf0      	pop	{r4, r5, r6, r7}
 8002064:	46bb      	mov	fp, r7
 8002066:	46b2      	mov	sl, r6
 8002068:	46a9      	mov	r9, r5
 800206a:	46a0      	mov	r8, r4
 800206c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800206e:	1ab4      	subs	r4, r6, r2
 8002070:	46a4      	mov	ip, r4
 8002072:	2c00      	cmp	r4, #0
 8002074:	dd59      	ble.n	800212a <__aeabi_dsub+0x22a>
 8002076:	2a00      	cmp	r2, #0
 8002078:	d100      	bne.n	800207c <__aeabi_dsub+0x17c>
 800207a:	e0b0      	b.n	80021de <__aeabi_dsub+0x2de>
 800207c:	4556      	cmp	r6, sl
 800207e:	d100      	bne.n	8002082 <__aeabi_dsub+0x182>
 8002080:	e0fa      	b.n	8002278 <__aeabi_dsub+0x378>
 8002082:	2280      	movs	r2, #128	; 0x80
 8002084:	0412      	lsls	r2, r2, #16
 8002086:	4317      	orrs	r7, r2
 8002088:	4662      	mov	r2, ip
 800208a:	2a38      	cmp	r2, #56	; 0x38
 800208c:	dd00      	ble.n	8002090 <__aeabi_dsub+0x190>
 800208e:	e0d4      	b.n	800223a <__aeabi_dsub+0x33a>
 8002090:	2a1f      	cmp	r2, #31
 8002092:	dc00      	bgt.n	8002096 <__aeabi_dsub+0x196>
 8002094:	e1c0      	b.n	8002418 <__aeabi_dsub+0x518>
 8002096:	0039      	movs	r1, r7
 8002098:	3a20      	subs	r2, #32
 800209a:	40d1      	lsrs	r1, r2
 800209c:	4662      	mov	r2, ip
 800209e:	2a20      	cmp	r2, #32
 80020a0:	d006      	beq.n	80020b0 <__aeabi_dsub+0x1b0>
 80020a2:	4664      	mov	r4, ip
 80020a4:	2240      	movs	r2, #64	; 0x40
 80020a6:	1b12      	subs	r2, r2, r4
 80020a8:	003c      	movs	r4, r7
 80020aa:	4094      	lsls	r4, r2
 80020ac:	4304      	orrs	r4, r0
 80020ae:	9401      	str	r4, [sp, #4]
 80020b0:	9c01      	ldr	r4, [sp, #4]
 80020b2:	1e62      	subs	r2, r4, #1
 80020b4:	4194      	sbcs	r4, r2
 80020b6:	430c      	orrs	r4, r1
 80020b8:	e0c3      	b.n	8002242 <__aeabi_dsub+0x342>
 80020ba:	003c      	movs	r4, r7
 80020bc:	4304      	orrs	r4, r0
 80020be:	d02b      	beq.n	8002118 <__aeabi_dsub+0x218>
 80020c0:	468b      	mov	fp, r1
 80020c2:	428d      	cmp	r5, r1
 80020c4:	d02e      	beq.n	8002124 <__aeabi_dsub+0x224>
 80020c6:	4c6a      	ldr	r4, [pc, #424]	; (8002270 <__aeabi_dsub+0x370>)
 80020c8:	46a4      	mov	ip, r4
 80020ca:	44b4      	add	ip, r6
 80020cc:	4664      	mov	r4, ip
 80020ce:	2c00      	cmp	r4, #0
 80020d0:	d05f      	beq.n	8002192 <__aeabi_dsub+0x292>
 80020d2:	1b94      	subs	r4, r2, r6
 80020d4:	46a4      	mov	ip, r4
 80020d6:	2e00      	cmp	r6, #0
 80020d8:	d000      	beq.n	80020dc <__aeabi_dsub+0x1dc>
 80020da:	e120      	b.n	800231e <__aeabi_dsub+0x41e>
 80020dc:	464c      	mov	r4, r9
 80020de:	431c      	orrs	r4, r3
 80020e0:	d100      	bne.n	80020e4 <__aeabi_dsub+0x1e4>
 80020e2:	e1c7      	b.n	8002474 <__aeabi_dsub+0x574>
 80020e4:	4661      	mov	r1, ip
 80020e6:	1e4c      	subs	r4, r1, #1
 80020e8:	2901      	cmp	r1, #1
 80020ea:	d100      	bne.n	80020ee <__aeabi_dsub+0x1ee>
 80020ec:	e223      	b.n	8002536 <__aeabi_dsub+0x636>
 80020ee:	4d5e      	ldr	r5, [pc, #376]	; (8002268 <__aeabi_dsub+0x368>)
 80020f0:	45ac      	cmp	ip, r5
 80020f2:	d100      	bne.n	80020f6 <__aeabi_dsub+0x1f6>
 80020f4:	e1d8      	b.n	80024a8 <__aeabi_dsub+0x5a8>
 80020f6:	46a4      	mov	ip, r4
 80020f8:	e11a      	b.n	8002330 <__aeabi_dsub+0x430>
 80020fa:	003a      	movs	r2, r7
 80020fc:	4302      	orrs	r2, r0
 80020fe:	d100      	bne.n	8002102 <__aeabi_dsub+0x202>
 8002100:	e0e4      	b.n	80022cc <__aeabi_dsub+0x3cc>
 8002102:	0022      	movs	r2, r4
 8002104:	3a01      	subs	r2, #1
 8002106:	2c01      	cmp	r4, #1
 8002108:	d100      	bne.n	800210c <__aeabi_dsub+0x20c>
 800210a:	e1c3      	b.n	8002494 <__aeabi_dsub+0x594>
 800210c:	4956      	ldr	r1, [pc, #344]	; (8002268 <__aeabi_dsub+0x368>)
 800210e:	428c      	cmp	r4, r1
 8002110:	d100      	bne.n	8002114 <__aeabi_dsub+0x214>
 8002112:	e0b1      	b.n	8002278 <__aeabi_dsub+0x378>
 8002114:	4694      	mov	ip, r2
 8002116:	e72b      	b.n	8001f70 <__aeabi_dsub+0x70>
 8002118:	2401      	movs	r4, #1
 800211a:	4061      	eors	r1, r4
 800211c:	468b      	mov	fp, r1
 800211e:	428d      	cmp	r5, r1
 8002120:	d000      	beq.n	8002124 <__aeabi_dsub+0x224>
 8002122:	e716      	b.n	8001f52 <__aeabi_dsub+0x52>
 8002124:	4952      	ldr	r1, [pc, #328]	; (8002270 <__aeabi_dsub+0x370>)
 8002126:	468c      	mov	ip, r1
 8002128:	44b4      	add	ip, r6
 800212a:	4664      	mov	r4, ip
 800212c:	2c00      	cmp	r4, #0
 800212e:	d100      	bne.n	8002132 <__aeabi_dsub+0x232>
 8002130:	e0d3      	b.n	80022da <__aeabi_dsub+0x3da>
 8002132:	1b91      	subs	r1, r2, r6
 8002134:	468c      	mov	ip, r1
 8002136:	2e00      	cmp	r6, #0
 8002138:	d100      	bne.n	800213c <__aeabi_dsub+0x23c>
 800213a:	e15e      	b.n	80023fa <__aeabi_dsub+0x4fa>
 800213c:	494a      	ldr	r1, [pc, #296]	; (8002268 <__aeabi_dsub+0x368>)
 800213e:	428a      	cmp	r2, r1
 8002140:	d100      	bne.n	8002144 <__aeabi_dsub+0x244>
 8002142:	e1be      	b.n	80024c2 <__aeabi_dsub+0x5c2>
 8002144:	2180      	movs	r1, #128	; 0x80
 8002146:	464c      	mov	r4, r9
 8002148:	0409      	lsls	r1, r1, #16
 800214a:	430c      	orrs	r4, r1
 800214c:	46a1      	mov	r9, r4
 800214e:	4661      	mov	r1, ip
 8002150:	2938      	cmp	r1, #56	; 0x38
 8002152:	dd00      	ble.n	8002156 <__aeabi_dsub+0x256>
 8002154:	e1ba      	b.n	80024cc <__aeabi_dsub+0x5cc>
 8002156:	291f      	cmp	r1, #31
 8002158:	dd00      	ble.n	800215c <__aeabi_dsub+0x25c>
 800215a:	e227      	b.n	80025ac <__aeabi_dsub+0x6ac>
 800215c:	2420      	movs	r4, #32
 800215e:	1a64      	subs	r4, r4, r1
 8002160:	4649      	mov	r1, r9
 8002162:	40a1      	lsls	r1, r4
 8002164:	001e      	movs	r6, r3
 8002166:	4688      	mov	r8, r1
 8002168:	4661      	mov	r1, ip
 800216a:	40a3      	lsls	r3, r4
 800216c:	40ce      	lsrs	r6, r1
 800216e:	4641      	mov	r1, r8
 8002170:	1e5c      	subs	r4, r3, #1
 8002172:	41a3      	sbcs	r3, r4
 8002174:	4331      	orrs	r1, r6
 8002176:	4319      	orrs	r1, r3
 8002178:	000c      	movs	r4, r1
 800217a:	4663      	mov	r3, ip
 800217c:	4649      	mov	r1, r9
 800217e:	40d9      	lsrs	r1, r3
 8002180:	187f      	adds	r7, r7, r1
 8002182:	1824      	adds	r4, r4, r0
 8002184:	4284      	cmp	r4, r0
 8002186:	419b      	sbcs	r3, r3
 8002188:	425b      	negs	r3, r3
 800218a:	469a      	mov	sl, r3
 800218c:	0016      	movs	r6, r2
 800218e:	44ba      	add	sl, r7
 8002190:	e05d      	b.n	800224e <__aeabi_dsub+0x34e>
 8002192:	4c38      	ldr	r4, [pc, #224]	; (8002274 <__aeabi_dsub+0x374>)
 8002194:	1c72      	adds	r2, r6, #1
 8002196:	4222      	tst	r2, r4
 8002198:	d000      	beq.n	800219c <__aeabi_dsub+0x29c>
 800219a:	e0df      	b.n	800235c <__aeabi_dsub+0x45c>
 800219c:	464a      	mov	r2, r9
 800219e:	431a      	orrs	r2, r3
 80021a0:	2e00      	cmp	r6, #0
 80021a2:	d000      	beq.n	80021a6 <__aeabi_dsub+0x2a6>
 80021a4:	e15c      	b.n	8002460 <__aeabi_dsub+0x560>
 80021a6:	2a00      	cmp	r2, #0
 80021a8:	d100      	bne.n	80021ac <__aeabi_dsub+0x2ac>
 80021aa:	e1cf      	b.n	800254c <__aeabi_dsub+0x64c>
 80021ac:	003a      	movs	r2, r7
 80021ae:	4302      	orrs	r2, r0
 80021b0:	d100      	bne.n	80021b4 <__aeabi_dsub+0x2b4>
 80021b2:	e17f      	b.n	80024b4 <__aeabi_dsub+0x5b4>
 80021b4:	1a1c      	subs	r4, r3, r0
 80021b6:	464a      	mov	r2, r9
 80021b8:	42a3      	cmp	r3, r4
 80021ba:	4189      	sbcs	r1, r1
 80021bc:	1bd2      	subs	r2, r2, r7
 80021be:	4249      	negs	r1, r1
 80021c0:	1a52      	subs	r2, r2, r1
 80021c2:	4692      	mov	sl, r2
 80021c4:	0212      	lsls	r2, r2, #8
 80021c6:	d400      	bmi.n	80021ca <__aeabi_dsub+0x2ca>
 80021c8:	e20a      	b.n	80025e0 <__aeabi_dsub+0x6e0>
 80021ca:	1ac4      	subs	r4, r0, r3
 80021cc:	42a0      	cmp	r0, r4
 80021ce:	4180      	sbcs	r0, r0
 80021d0:	464b      	mov	r3, r9
 80021d2:	4240      	negs	r0, r0
 80021d4:	1aff      	subs	r7, r7, r3
 80021d6:	1a3b      	subs	r3, r7, r0
 80021d8:	469a      	mov	sl, r3
 80021da:	465d      	mov	r5, fp
 80021dc:	e71a      	b.n	8002014 <__aeabi_dsub+0x114>
 80021de:	003a      	movs	r2, r7
 80021e0:	4302      	orrs	r2, r0
 80021e2:	d073      	beq.n	80022cc <__aeabi_dsub+0x3cc>
 80021e4:	0022      	movs	r2, r4
 80021e6:	3a01      	subs	r2, #1
 80021e8:	2c01      	cmp	r4, #1
 80021ea:	d100      	bne.n	80021ee <__aeabi_dsub+0x2ee>
 80021ec:	e0cb      	b.n	8002386 <__aeabi_dsub+0x486>
 80021ee:	4554      	cmp	r4, sl
 80021f0:	d042      	beq.n	8002278 <__aeabi_dsub+0x378>
 80021f2:	4694      	mov	ip, r2
 80021f4:	e748      	b.n	8002088 <__aeabi_dsub+0x188>
 80021f6:	0010      	movs	r0, r2
 80021f8:	3b1f      	subs	r3, #31
 80021fa:	40d8      	lsrs	r0, r3
 80021fc:	2920      	cmp	r1, #32
 80021fe:	d003      	beq.n	8002208 <__aeabi_dsub+0x308>
 8002200:	2340      	movs	r3, #64	; 0x40
 8002202:	1a5b      	subs	r3, r3, r1
 8002204:	409a      	lsls	r2, r3
 8002206:	4314      	orrs	r4, r2
 8002208:	1e63      	subs	r3, r4, #1
 800220a:	419c      	sbcs	r4, r3
 800220c:	2300      	movs	r3, #0
 800220e:	2600      	movs	r6, #0
 8002210:	469a      	mov	sl, r3
 8002212:	4304      	orrs	r4, r0
 8002214:	0763      	lsls	r3, r4, #29
 8002216:	d000      	beq.n	800221a <__aeabi_dsub+0x31a>
 8002218:	e6fe      	b.n	8002018 <__aeabi_dsub+0x118>
 800221a:	4652      	mov	r2, sl
 800221c:	08e3      	lsrs	r3, r4, #3
 800221e:	0752      	lsls	r2, r2, #29
 8002220:	4313      	orrs	r3, r2
 8002222:	4652      	mov	r2, sl
 8002224:	46b4      	mov	ip, r6
 8002226:	08d2      	lsrs	r2, r2, #3
 8002228:	490f      	ldr	r1, [pc, #60]	; (8002268 <__aeabi_dsub+0x368>)
 800222a:	458c      	cmp	ip, r1
 800222c:	d02a      	beq.n	8002284 <__aeabi_dsub+0x384>
 800222e:	0312      	lsls	r2, r2, #12
 8002230:	0b14      	lsrs	r4, r2, #12
 8002232:	4662      	mov	r2, ip
 8002234:	0552      	lsls	r2, r2, #21
 8002236:	0d52      	lsrs	r2, r2, #21
 8002238:	e70c      	b.n	8002054 <__aeabi_dsub+0x154>
 800223a:	003c      	movs	r4, r7
 800223c:	4304      	orrs	r4, r0
 800223e:	1e62      	subs	r2, r4, #1
 8002240:	4194      	sbcs	r4, r2
 8002242:	18e4      	adds	r4, r4, r3
 8002244:	429c      	cmp	r4, r3
 8002246:	4192      	sbcs	r2, r2
 8002248:	4252      	negs	r2, r2
 800224a:	444a      	add	r2, r9
 800224c:	4692      	mov	sl, r2
 800224e:	4653      	mov	r3, sl
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	d5df      	bpl.n	8002214 <__aeabi_dsub+0x314>
 8002254:	4b04      	ldr	r3, [pc, #16]	; (8002268 <__aeabi_dsub+0x368>)
 8002256:	3601      	adds	r6, #1
 8002258:	429e      	cmp	r6, r3
 800225a:	d000      	beq.n	800225e <__aeabi_dsub+0x35e>
 800225c:	e0a0      	b.n	80023a0 <__aeabi_dsub+0x4a0>
 800225e:	0032      	movs	r2, r6
 8002260:	2400      	movs	r4, #0
 8002262:	2300      	movs	r3, #0
 8002264:	e6f6      	b.n	8002054 <__aeabi_dsub+0x154>
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	000007ff 	.word	0x000007ff
 800226c:	ff7fffff 	.word	0xff7fffff
 8002270:	fffff801 	.word	0xfffff801
 8002274:	000007fe 	.word	0x000007fe
 8002278:	08db      	lsrs	r3, r3, #3
 800227a:	464a      	mov	r2, r9
 800227c:	0752      	lsls	r2, r2, #29
 800227e:	4313      	orrs	r3, r2
 8002280:	464a      	mov	r2, r9
 8002282:	08d2      	lsrs	r2, r2, #3
 8002284:	0019      	movs	r1, r3
 8002286:	4311      	orrs	r1, r2
 8002288:	d100      	bne.n	800228c <__aeabi_dsub+0x38c>
 800228a:	e1b5      	b.n	80025f8 <__aeabi_dsub+0x6f8>
 800228c:	2480      	movs	r4, #128	; 0x80
 800228e:	0324      	lsls	r4, r4, #12
 8002290:	4314      	orrs	r4, r2
 8002292:	0324      	lsls	r4, r4, #12
 8002294:	4ad5      	ldr	r2, [pc, #852]	; (80025ec <__aeabi_dsub+0x6ec>)
 8002296:	0b24      	lsrs	r4, r4, #12
 8002298:	e6dc      	b.n	8002054 <__aeabi_dsub+0x154>
 800229a:	0020      	movs	r0, r4
 800229c:	f000 fb1c 	bl	80028d8 <__clzsi2>
 80022a0:	0003      	movs	r3, r0
 80022a2:	3318      	adds	r3, #24
 80022a4:	2b1f      	cmp	r3, #31
 80022a6:	dc00      	bgt.n	80022aa <__aeabi_dsub+0x3aa>
 80022a8:	e695      	b.n	8001fd6 <__aeabi_dsub+0xd6>
 80022aa:	0022      	movs	r2, r4
 80022ac:	3808      	subs	r0, #8
 80022ae:	4082      	lsls	r2, r0
 80022b0:	2400      	movs	r4, #0
 80022b2:	429e      	cmp	r6, r3
 80022b4:	dc00      	bgt.n	80022b8 <__aeabi_dsub+0x3b8>
 80022b6:	e69a      	b.n	8001fee <__aeabi_dsub+0xee>
 80022b8:	1af6      	subs	r6, r6, r3
 80022ba:	4bcd      	ldr	r3, [pc, #820]	; (80025f0 <__aeabi_dsub+0x6f0>)
 80022bc:	401a      	ands	r2, r3
 80022be:	4692      	mov	sl, r2
 80022c0:	e6a8      	b.n	8002014 <__aeabi_dsub+0x114>
 80022c2:	003c      	movs	r4, r7
 80022c4:	4304      	orrs	r4, r0
 80022c6:	1e62      	subs	r2, r4, #1
 80022c8:	4194      	sbcs	r4, r2
 80022ca:	e66c      	b.n	8001fa6 <__aeabi_dsub+0xa6>
 80022cc:	464a      	mov	r2, r9
 80022ce:	08db      	lsrs	r3, r3, #3
 80022d0:	0752      	lsls	r2, r2, #29
 80022d2:	4313      	orrs	r3, r2
 80022d4:	464a      	mov	r2, r9
 80022d6:	08d2      	lsrs	r2, r2, #3
 80022d8:	e7a6      	b.n	8002228 <__aeabi_dsub+0x328>
 80022da:	4cc6      	ldr	r4, [pc, #792]	; (80025f4 <__aeabi_dsub+0x6f4>)
 80022dc:	1c72      	adds	r2, r6, #1
 80022de:	4222      	tst	r2, r4
 80022e0:	d000      	beq.n	80022e4 <__aeabi_dsub+0x3e4>
 80022e2:	e0ac      	b.n	800243e <__aeabi_dsub+0x53e>
 80022e4:	464a      	mov	r2, r9
 80022e6:	431a      	orrs	r2, r3
 80022e8:	2e00      	cmp	r6, #0
 80022ea:	d000      	beq.n	80022ee <__aeabi_dsub+0x3ee>
 80022ec:	e105      	b.n	80024fa <__aeabi_dsub+0x5fa>
 80022ee:	2a00      	cmp	r2, #0
 80022f0:	d100      	bne.n	80022f4 <__aeabi_dsub+0x3f4>
 80022f2:	e156      	b.n	80025a2 <__aeabi_dsub+0x6a2>
 80022f4:	003a      	movs	r2, r7
 80022f6:	4302      	orrs	r2, r0
 80022f8:	d100      	bne.n	80022fc <__aeabi_dsub+0x3fc>
 80022fa:	e0db      	b.n	80024b4 <__aeabi_dsub+0x5b4>
 80022fc:	181c      	adds	r4, r3, r0
 80022fe:	429c      	cmp	r4, r3
 8002300:	419b      	sbcs	r3, r3
 8002302:	444f      	add	r7, r9
 8002304:	46ba      	mov	sl, r7
 8002306:	425b      	negs	r3, r3
 8002308:	449a      	add	sl, r3
 800230a:	4653      	mov	r3, sl
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	d400      	bmi.n	8002312 <__aeabi_dsub+0x412>
 8002310:	e780      	b.n	8002214 <__aeabi_dsub+0x314>
 8002312:	4652      	mov	r2, sl
 8002314:	4bb6      	ldr	r3, [pc, #728]	; (80025f0 <__aeabi_dsub+0x6f0>)
 8002316:	2601      	movs	r6, #1
 8002318:	401a      	ands	r2, r3
 800231a:	4692      	mov	sl, r2
 800231c:	e77a      	b.n	8002214 <__aeabi_dsub+0x314>
 800231e:	4cb3      	ldr	r4, [pc, #716]	; (80025ec <__aeabi_dsub+0x6ec>)
 8002320:	42a2      	cmp	r2, r4
 8002322:	d100      	bne.n	8002326 <__aeabi_dsub+0x426>
 8002324:	e0c0      	b.n	80024a8 <__aeabi_dsub+0x5a8>
 8002326:	2480      	movs	r4, #128	; 0x80
 8002328:	464d      	mov	r5, r9
 800232a:	0424      	lsls	r4, r4, #16
 800232c:	4325      	orrs	r5, r4
 800232e:	46a9      	mov	r9, r5
 8002330:	4664      	mov	r4, ip
 8002332:	2c38      	cmp	r4, #56	; 0x38
 8002334:	dc53      	bgt.n	80023de <__aeabi_dsub+0x4de>
 8002336:	4661      	mov	r1, ip
 8002338:	2c1f      	cmp	r4, #31
 800233a:	dd00      	ble.n	800233e <__aeabi_dsub+0x43e>
 800233c:	e0cd      	b.n	80024da <__aeabi_dsub+0x5da>
 800233e:	2520      	movs	r5, #32
 8002340:	001e      	movs	r6, r3
 8002342:	1b2d      	subs	r5, r5, r4
 8002344:	464c      	mov	r4, r9
 8002346:	40ab      	lsls	r3, r5
 8002348:	40ac      	lsls	r4, r5
 800234a:	40ce      	lsrs	r6, r1
 800234c:	1e5d      	subs	r5, r3, #1
 800234e:	41ab      	sbcs	r3, r5
 8002350:	4334      	orrs	r4, r6
 8002352:	4323      	orrs	r3, r4
 8002354:	464c      	mov	r4, r9
 8002356:	40cc      	lsrs	r4, r1
 8002358:	1b3f      	subs	r7, r7, r4
 800235a:	e045      	b.n	80023e8 <__aeabi_dsub+0x4e8>
 800235c:	464a      	mov	r2, r9
 800235e:	1a1c      	subs	r4, r3, r0
 8002360:	1bd1      	subs	r1, r2, r7
 8002362:	42a3      	cmp	r3, r4
 8002364:	4192      	sbcs	r2, r2
 8002366:	4252      	negs	r2, r2
 8002368:	4692      	mov	sl, r2
 800236a:	000a      	movs	r2, r1
 800236c:	4651      	mov	r1, sl
 800236e:	1a52      	subs	r2, r2, r1
 8002370:	4692      	mov	sl, r2
 8002372:	0212      	lsls	r2, r2, #8
 8002374:	d500      	bpl.n	8002378 <__aeabi_dsub+0x478>
 8002376:	e083      	b.n	8002480 <__aeabi_dsub+0x580>
 8002378:	4653      	mov	r3, sl
 800237a:	4323      	orrs	r3, r4
 800237c:	d000      	beq.n	8002380 <__aeabi_dsub+0x480>
 800237e:	e621      	b.n	8001fc4 <__aeabi_dsub+0xc4>
 8002380:	2200      	movs	r2, #0
 8002382:	2500      	movs	r5, #0
 8002384:	e753      	b.n	800222e <__aeabi_dsub+0x32e>
 8002386:	181c      	adds	r4, r3, r0
 8002388:	429c      	cmp	r4, r3
 800238a:	419b      	sbcs	r3, r3
 800238c:	444f      	add	r7, r9
 800238e:	46ba      	mov	sl, r7
 8002390:	425b      	negs	r3, r3
 8002392:	449a      	add	sl, r3
 8002394:	4653      	mov	r3, sl
 8002396:	2601      	movs	r6, #1
 8002398:	021b      	lsls	r3, r3, #8
 800239a:	d400      	bmi.n	800239e <__aeabi_dsub+0x49e>
 800239c:	e73a      	b.n	8002214 <__aeabi_dsub+0x314>
 800239e:	2602      	movs	r6, #2
 80023a0:	4652      	mov	r2, sl
 80023a2:	4b93      	ldr	r3, [pc, #588]	; (80025f0 <__aeabi_dsub+0x6f0>)
 80023a4:	2101      	movs	r1, #1
 80023a6:	401a      	ands	r2, r3
 80023a8:	0013      	movs	r3, r2
 80023aa:	4021      	ands	r1, r4
 80023ac:	0862      	lsrs	r2, r4, #1
 80023ae:	430a      	orrs	r2, r1
 80023b0:	07dc      	lsls	r4, r3, #31
 80023b2:	085b      	lsrs	r3, r3, #1
 80023b4:	469a      	mov	sl, r3
 80023b6:	4314      	orrs	r4, r2
 80023b8:	e62c      	b.n	8002014 <__aeabi_dsub+0x114>
 80023ba:	0039      	movs	r1, r7
 80023bc:	3a20      	subs	r2, #32
 80023be:	40d1      	lsrs	r1, r2
 80023c0:	4662      	mov	r2, ip
 80023c2:	2a20      	cmp	r2, #32
 80023c4:	d006      	beq.n	80023d4 <__aeabi_dsub+0x4d4>
 80023c6:	4664      	mov	r4, ip
 80023c8:	2240      	movs	r2, #64	; 0x40
 80023ca:	1b12      	subs	r2, r2, r4
 80023cc:	003c      	movs	r4, r7
 80023ce:	4094      	lsls	r4, r2
 80023d0:	4304      	orrs	r4, r0
 80023d2:	9401      	str	r4, [sp, #4]
 80023d4:	9c01      	ldr	r4, [sp, #4]
 80023d6:	1e62      	subs	r2, r4, #1
 80023d8:	4194      	sbcs	r4, r2
 80023da:	430c      	orrs	r4, r1
 80023dc:	e5e3      	b.n	8001fa6 <__aeabi_dsub+0xa6>
 80023de:	4649      	mov	r1, r9
 80023e0:	4319      	orrs	r1, r3
 80023e2:	000b      	movs	r3, r1
 80023e4:	1e5c      	subs	r4, r3, #1
 80023e6:	41a3      	sbcs	r3, r4
 80023e8:	1ac4      	subs	r4, r0, r3
 80023ea:	42a0      	cmp	r0, r4
 80023ec:	419b      	sbcs	r3, r3
 80023ee:	425b      	negs	r3, r3
 80023f0:	1afb      	subs	r3, r7, r3
 80023f2:	469a      	mov	sl, r3
 80023f4:	465d      	mov	r5, fp
 80023f6:	0016      	movs	r6, r2
 80023f8:	e5dc      	b.n	8001fb4 <__aeabi_dsub+0xb4>
 80023fa:	4649      	mov	r1, r9
 80023fc:	4319      	orrs	r1, r3
 80023fe:	d100      	bne.n	8002402 <__aeabi_dsub+0x502>
 8002400:	e0ae      	b.n	8002560 <__aeabi_dsub+0x660>
 8002402:	4661      	mov	r1, ip
 8002404:	4664      	mov	r4, ip
 8002406:	3901      	subs	r1, #1
 8002408:	2c01      	cmp	r4, #1
 800240a:	d100      	bne.n	800240e <__aeabi_dsub+0x50e>
 800240c:	e0e0      	b.n	80025d0 <__aeabi_dsub+0x6d0>
 800240e:	4c77      	ldr	r4, [pc, #476]	; (80025ec <__aeabi_dsub+0x6ec>)
 8002410:	45a4      	cmp	ip, r4
 8002412:	d056      	beq.n	80024c2 <__aeabi_dsub+0x5c2>
 8002414:	468c      	mov	ip, r1
 8002416:	e69a      	b.n	800214e <__aeabi_dsub+0x24e>
 8002418:	4661      	mov	r1, ip
 800241a:	2220      	movs	r2, #32
 800241c:	003c      	movs	r4, r7
 800241e:	1a52      	subs	r2, r2, r1
 8002420:	4094      	lsls	r4, r2
 8002422:	0001      	movs	r1, r0
 8002424:	4090      	lsls	r0, r2
 8002426:	46a0      	mov	r8, r4
 8002428:	4664      	mov	r4, ip
 800242a:	1e42      	subs	r2, r0, #1
 800242c:	4190      	sbcs	r0, r2
 800242e:	4662      	mov	r2, ip
 8002430:	40e1      	lsrs	r1, r4
 8002432:	4644      	mov	r4, r8
 8002434:	40d7      	lsrs	r7, r2
 8002436:	430c      	orrs	r4, r1
 8002438:	4304      	orrs	r4, r0
 800243a:	44b9      	add	r9, r7
 800243c:	e701      	b.n	8002242 <__aeabi_dsub+0x342>
 800243e:	496b      	ldr	r1, [pc, #428]	; (80025ec <__aeabi_dsub+0x6ec>)
 8002440:	428a      	cmp	r2, r1
 8002442:	d100      	bne.n	8002446 <__aeabi_dsub+0x546>
 8002444:	e70c      	b.n	8002260 <__aeabi_dsub+0x360>
 8002446:	1818      	adds	r0, r3, r0
 8002448:	4298      	cmp	r0, r3
 800244a:	419b      	sbcs	r3, r3
 800244c:	444f      	add	r7, r9
 800244e:	425b      	negs	r3, r3
 8002450:	18fb      	adds	r3, r7, r3
 8002452:	07dc      	lsls	r4, r3, #31
 8002454:	0840      	lsrs	r0, r0, #1
 8002456:	085b      	lsrs	r3, r3, #1
 8002458:	469a      	mov	sl, r3
 800245a:	0016      	movs	r6, r2
 800245c:	4304      	orrs	r4, r0
 800245e:	e6d9      	b.n	8002214 <__aeabi_dsub+0x314>
 8002460:	2a00      	cmp	r2, #0
 8002462:	d000      	beq.n	8002466 <__aeabi_dsub+0x566>
 8002464:	e081      	b.n	800256a <__aeabi_dsub+0x66a>
 8002466:	003b      	movs	r3, r7
 8002468:	4303      	orrs	r3, r0
 800246a:	d11d      	bne.n	80024a8 <__aeabi_dsub+0x5a8>
 800246c:	2280      	movs	r2, #128	; 0x80
 800246e:	2500      	movs	r5, #0
 8002470:	0312      	lsls	r2, r2, #12
 8002472:	e70b      	b.n	800228c <__aeabi_dsub+0x38c>
 8002474:	08c0      	lsrs	r0, r0, #3
 8002476:	077b      	lsls	r3, r7, #29
 8002478:	465d      	mov	r5, fp
 800247a:	4303      	orrs	r3, r0
 800247c:	08fa      	lsrs	r2, r7, #3
 800247e:	e6d3      	b.n	8002228 <__aeabi_dsub+0x328>
 8002480:	1ac4      	subs	r4, r0, r3
 8002482:	42a0      	cmp	r0, r4
 8002484:	4180      	sbcs	r0, r0
 8002486:	464b      	mov	r3, r9
 8002488:	4240      	negs	r0, r0
 800248a:	1aff      	subs	r7, r7, r3
 800248c:	1a3b      	subs	r3, r7, r0
 800248e:	469a      	mov	sl, r3
 8002490:	465d      	mov	r5, fp
 8002492:	e597      	b.n	8001fc4 <__aeabi_dsub+0xc4>
 8002494:	1a1c      	subs	r4, r3, r0
 8002496:	464a      	mov	r2, r9
 8002498:	42a3      	cmp	r3, r4
 800249a:	419b      	sbcs	r3, r3
 800249c:	1bd7      	subs	r7, r2, r7
 800249e:	425b      	negs	r3, r3
 80024a0:	1afb      	subs	r3, r7, r3
 80024a2:	469a      	mov	sl, r3
 80024a4:	2601      	movs	r6, #1
 80024a6:	e585      	b.n	8001fb4 <__aeabi_dsub+0xb4>
 80024a8:	08c0      	lsrs	r0, r0, #3
 80024aa:	077b      	lsls	r3, r7, #29
 80024ac:	465d      	mov	r5, fp
 80024ae:	4303      	orrs	r3, r0
 80024b0:	08fa      	lsrs	r2, r7, #3
 80024b2:	e6e7      	b.n	8002284 <__aeabi_dsub+0x384>
 80024b4:	464a      	mov	r2, r9
 80024b6:	08db      	lsrs	r3, r3, #3
 80024b8:	0752      	lsls	r2, r2, #29
 80024ba:	4313      	orrs	r3, r2
 80024bc:	464a      	mov	r2, r9
 80024be:	08d2      	lsrs	r2, r2, #3
 80024c0:	e6b5      	b.n	800222e <__aeabi_dsub+0x32e>
 80024c2:	08c0      	lsrs	r0, r0, #3
 80024c4:	077b      	lsls	r3, r7, #29
 80024c6:	4303      	orrs	r3, r0
 80024c8:	08fa      	lsrs	r2, r7, #3
 80024ca:	e6db      	b.n	8002284 <__aeabi_dsub+0x384>
 80024cc:	4649      	mov	r1, r9
 80024ce:	4319      	orrs	r1, r3
 80024d0:	000b      	movs	r3, r1
 80024d2:	1e59      	subs	r1, r3, #1
 80024d4:	418b      	sbcs	r3, r1
 80024d6:	001c      	movs	r4, r3
 80024d8:	e653      	b.n	8002182 <__aeabi_dsub+0x282>
 80024da:	464d      	mov	r5, r9
 80024dc:	3c20      	subs	r4, #32
 80024de:	40e5      	lsrs	r5, r4
 80024e0:	2920      	cmp	r1, #32
 80024e2:	d005      	beq.n	80024f0 <__aeabi_dsub+0x5f0>
 80024e4:	2440      	movs	r4, #64	; 0x40
 80024e6:	1a64      	subs	r4, r4, r1
 80024e8:	4649      	mov	r1, r9
 80024ea:	40a1      	lsls	r1, r4
 80024ec:	430b      	orrs	r3, r1
 80024ee:	4698      	mov	r8, r3
 80024f0:	4643      	mov	r3, r8
 80024f2:	1e5c      	subs	r4, r3, #1
 80024f4:	41a3      	sbcs	r3, r4
 80024f6:	432b      	orrs	r3, r5
 80024f8:	e776      	b.n	80023e8 <__aeabi_dsub+0x4e8>
 80024fa:	2a00      	cmp	r2, #0
 80024fc:	d0e1      	beq.n	80024c2 <__aeabi_dsub+0x5c2>
 80024fe:	003a      	movs	r2, r7
 8002500:	08db      	lsrs	r3, r3, #3
 8002502:	4302      	orrs	r2, r0
 8002504:	d100      	bne.n	8002508 <__aeabi_dsub+0x608>
 8002506:	e6b8      	b.n	800227a <__aeabi_dsub+0x37a>
 8002508:	464a      	mov	r2, r9
 800250a:	0752      	lsls	r2, r2, #29
 800250c:	2480      	movs	r4, #128	; 0x80
 800250e:	4313      	orrs	r3, r2
 8002510:	464a      	mov	r2, r9
 8002512:	0324      	lsls	r4, r4, #12
 8002514:	08d2      	lsrs	r2, r2, #3
 8002516:	4222      	tst	r2, r4
 8002518:	d007      	beq.n	800252a <__aeabi_dsub+0x62a>
 800251a:	08fe      	lsrs	r6, r7, #3
 800251c:	4226      	tst	r6, r4
 800251e:	d104      	bne.n	800252a <__aeabi_dsub+0x62a>
 8002520:	465d      	mov	r5, fp
 8002522:	0032      	movs	r2, r6
 8002524:	08c3      	lsrs	r3, r0, #3
 8002526:	077f      	lsls	r7, r7, #29
 8002528:	433b      	orrs	r3, r7
 800252a:	0f59      	lsrs	r1, r3, #29
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	0749      	lsls	r1, r1, #29
 8002530:	08db      	lsrs	r3, r3, #3
 8002532:	430b      	orrs	r3, r1
 8002534:	e6a6      	b.n	8002284 <__aeabi_dsub+0x384>
 8002536:	1ac4      	subs	r4, r0, r3
 8002538:	42a0      	cmp	r0, r4
 800253a:	4180      	sbcs	r0, r0
 800253c:	464b      	mov	r3, r9
 800253e:	4240      	negs	r0, r0
 8002540:	1aff      	subs	r7, r7, r3
 8002542:	1a3b      	subs	r3, r7, r0
 8002544:	469a      	mov	sl, r3
 8002546:	465d      	mov	r5, fp
 8002548:	2601      	movs	r6, #1
 800254a:	e533      	b.n	8001fb4 <__aeabi_dsub+0xb4>
 800254c:	003b      	movs	r3, r7
 800254e:	4303      	orrs	r3, r0
 8002550:	d100      	bne.n	8002554 <__aeabi_dsub+0x654>
 8002552:	e715      	b.n	8002380 <__aeabi_dsub+0x480>
 8002554:	08c0      	lsrs	r0, r0, #3
 8002556:	077b      	lsls	r3, r7, #29
 8002558:	465d      	mov	r5, fp
 800255a:	4303      	orrs	r3, r0
 800255c:	08fa      	lsrs	r2, r7, #3
 800255e:	e666      	b.n	800222e <__aeabi_dsub+0x32e>
 8002560:	08c0      	lsrs	r0, r0, #3
 8002562:	077b      	lsls	r3, r7, #29
 8002564:	4303      	orrs	r3, r0
 8002566:	08fa      	lsrs	r2, r7, #3
 8002568:	e65e      	b.n	8002228 <__aeabi_dsub+0x328>
 800256a:	003a      	movs	r2, r7
 800256c:	08db      	lsrs	r3, r3, #3
 800256e:	4302      	orrs	r2, r0
 8002570:	d100      	bne.n	8002574 <__aeabi_dsub+0x674>
 8002572:	e682      	b.n	800227a <__aeabi_dsub+0x37a>
 8002574:	464a      	mov	r2, r9
 8002576:	0752      	lsls	r2, r2, #29
 8002578:	2480      	movs	r4, #128	; 0x80
 800257a:	4313      	orrs	r3, r2
 800257c:	464a      	mov	r2, r9
 800257e:	0324      	lsls	r4, r4, #12
 8002580:	08d2      	lsrs	r2, r2, #3
 8002582:	4222      	tst	r2, r4
 8002584:	d007      	beq.n	8002596 <__aeabi_dsub+0x696>
 8002586:	08fe      	lsrs	r6, r7, #3
 8002588:	4226      	tst	r6, r4
 800258a:	d104      	bne.n	8002596 <__aeabi_dsub+0x696>
 800258c:	465d      	mov	r5, fp
 800258e:	0032      	movs	r2, r6
 8002590:	08c3      	lsrs	r3, r0, #3
 8002592:	077f      	lsls	r7, r7, #29
 8002594:	433b      	orrs	r3, r7
 8002596:	0f59      	lsrs	r1, r3, #29
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	08db      	lsrs	r3, r3, #3
 800259c:	0749      	lsls	r1, r1, #29
 800259e:	430b      	orrs	r3, r1
 80025a0:	e670      	b.n	8002284 <__aeabi_dsub+0x384>
 80025a2:	08c0      	lsrs	r0, r0, #3
 80025a4:	077b      	lsls	r3, r7, #29
 80025a6:	4303      	orrs	r3, r0
 80025a8:	08fa      	lsrs	r2, r7, #3
 80025aa:	e640      	b.n	800222e <__aeabi_dsub+0x32e>
 80025ac:	464c      	mov	r4, r9
 80025ae:	3920      	subs	r1, #32
 80025b0:	40cc      	lsrs	r4, r1
 80025b2:	4661      	mov	r1, ip
 80025b4:	2920      	cmp	r1, #32
 80025b6:	d006      	beq.n	80025c6 <__aeabi_dsub+0x6c6>
 80025b8:	4666      	mov	r6, ip
 80025ba:	2140      	movs	r1, #64	; 0x40
 80025bc:	1b89      	subs	r1, r1, r6
 80025be:	464e      	mov	r6, r9
 80025c0:	408e      	lsls	r6, r1
 80025c2:	4333      	orrs	r3, r6
 80025c4:	4698      	mov	r8, r3
 80025c6:	4643      	mov	r3, r8
 80025c8:	1e59      	subs	r1, r3, #1
 80025ca:	418b      	sbcs	r3, r1
 80025cc:	431c      	orrs	r4, r3
 80025ce:	e5d8      	b.n	8002182 <__aeabi_dsub+0x282>
 80025d0:	181c      	adds	r4, r3, r0
 80025d2:	4284      	cmp	r4, r0
 80025d4:	4180      	sbcs	r0, r0
 80025d6:	444f      	add	r7, r9
 80025d8:	46ba      	mov	sl, r7
 80025da:	4240      	negs	r0, r0
 80025dc:	4482      	add	sl, r0
 80025de:	e6d9      	b.n	8002394 <__aeabi_dsub+0x494>
 80025e0:	4653      	mov	r3, sl
 80025e2:	4323      	orrs	r3, r4
 80025e4:	d100      	bne.n	80025e8 <__aeabi_dsub+0x6e8>
 80025e6:	e6cb      	b.n	8002380 <__aeabi_dsub+0x480>
 80025e8:	e614      	b.n	8002214 <__aeabi_dsub+0x314>
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	000007ff 	.word	0x000007ff
 80025f0:	ff7fffff 	.word	0xff7fffff
 80025f4:	000007fe 	.word	0x000007fe
 80025f8:	2300      	movs	r3, #0
 80025fa:	4a01      	ldr	r2, [pc, #4]	; (8002600 <__aeabi_dsub+0x700>)
 80025fc:	001c      	movs	r4, r3
 80025fe:	e529      	b.n	8002054 <__aeabi_dsub+0x154>
 8002600:	000007ff 	.word	0x000007ff

08002604 <__aeabi_dcmpun>:
 8002604:	b570      	push	{r4, r5, r6, lr}
 8002606:	0005      	movs	r5, r0
 8002608:	480c      	ldr	r0, [pc, #48]	; (800263c <__aeabi_dcmpun+0x38>)
 800260a:	031c      	lsls	r4, r3, #12
 800260c:	0016      	movs	r6, r2
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	030a      	lsls	r2, r1, #12
 8002612:	0049      	lsls	r1, r1, #1
 8002614:	0b12      	lsrs	r2, r2, #12
 8002616:	0d49      	lsrs	r1, r1, #21
 8002618:	0b24      	lsrs	r4, r4, #12
 800261a:	0d5b      	lsrs	r3, r3, #21
 800261c:	4281      	cmp	r1, r0
 800261e:	d008      	beq.n	8002632 <__aeabi_dcmpun+0x2e>
 8002620:	4a06      	ldr	r2, [pc, #24]	; (800263c <__aeabi_dcmpun+0x38>)
 8002622:	2000      	movs	r0, #0
 8002624:	4293      	cmp	r3, r2
 8002626:	d103      	bne.n	8002630 <__aeabi_dcmpun+0x2c>
 8002628:	0020      	movs	r0, r4
 800262a:	4330      	orrs	r0, r6
 800262c:	1e43      	subs	r3, r0, #1
 800262e:	4198      	sbcs	r0, r3
 8002630:	bd70      	pop	{r4, r5, r6, pc}
 8002632:	2001      	movs	r0, #1
 8002634:	432a      	orrs	r2, r5
 8002636:	d1fb      	bne.n	8002630 <__aeabi_dcmpun+0x2c>
 8002638:	e7f2      	b.n	8002620 <__aeabi_dcmpun+0x1c>
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	000007ff 	.word	0x000007ff

08002640 <__aeabi_d2iz>:
 8002640:	000a      	movs	r2, r1
 8002642:	b530      	push	{r4, r5, lr}
 8002644:	4c13      	ldr	r4, [pc, #76]	; (8002694 <__aeabi_d2iz+0x54>)
 8002646:	0053      	lsls	r3, r2, #1
 8002648:	0309      	lsls	r1, r1, #12
 800264a:	0005      	movs	r5, r0
 800264c:	0b09      	lsrs	r1, r1, #12
 800264e:	2000      	movs	r0, #0
 8002650:	0d5b      	lsrs	r3, r3, #21
 8002652:	0fd2      	lsrs	r2, r2, #31
 8002654:	42a3      	cmp	r3, r4
 8002656:	dd04      	ble.n	8002662 <__aeabi_d2iz+0x22>
 8002658:	480f      	ldr	r0, [pc, #60]	; (8002698 <__aeabi_d2iz+0x58>)
 800265a:	4283      	cmp	r3, r0
 800265c:	dd02      	ble.n	8002664 <__aeabi_d2iz+0x24>
 800265e:	4b0f      	ldr	r3, [pc, #60]	; (800269c <__aeabi_d2iz+0x5c>)
 8002660:	18d0      	adds	r0, r2, r3
 8002662:	bd30      	pop	{r4, r5, pc}
 8002664:	2080      	movs	r0, #128	; 0x80
 8002666:	0340      	lsls	r0, r0, #13
 8002668:	4301      	orrs	r1, r0
 800266a:	480d      	ldr	r0, [pc, #52]	; (80026a0 <__aeabi_d2iz+0x60>)
 800266c:	1ac0      	subs	r0, r0, r3
 800266e:	281f      	cmp	r0, #31
 8002670:	dd08      	ble.n	8002684 <__aeabi_d2iz+0x44>
 8002672:	480c      	ldr	r0, [pc, #48]	; (80026a4 <__aeabi_d2iz+0x64>)
 8002674:	1ac3      	subs	r3, r0, r3
 8002676:	40d9      	lsrs	r1, r3
 8002678:	000b      	movs	r3, r1
 800267a:	4258      	negs	r0, r3
 800267c:	2a00      	cmp	r2, #0
 800267e:	d1f0      	bne.n	8002662 <__aeabi_d2iz+0x22>
 8002680:	0018      	movs	r0, r3
 8002682:	e7ee      	b.n	8002662 <__aeabi_d2iz+0x22>
 8002684:	4c08      	ldr	r4, [pc, #32]	; (80026a8 <__aeabi_d2iz+0x68>)
 8002686:	40c5      	lsrs	r5, r0
 8002688:	46a4      	mov	ip, r4
 800268a:	4463      	add	r3, ip
 800268c:	4099      	lsls	r1, r3
 800268e:	000b      	movs	r3, r1
 8002690:	432b      	orrs	r3, r5
 8002692:	e7f2      	b.n	800267a <__aeabi_d2iz+0x3a>
 8002694:	000003fe 	.word	0x000003fe
 8002698:	0000041d 	.word	0x0000041d
 800269c:	7fffffff 	.word	0x7fffffff
 80026a0:	00000433 	.word	0x00000433
 80026a4:	00000413 	.word	0x00000413
 80026a8:	fffffbed 	.word	0xfffffbed

080026ac <__aeabi_i2d>:
 80026ac:	b570      	push	{r4, r5, r6, lr}
 80026ae:	2800      	cmp	r0, #0
 80026b0:	d016      	beq.n	80026e0 <__aeabi_i2d+0x34>
 80026b2:	17c3      	asrs	r3, r0, #31
 80026b4:	18c5      	adds	r5, r0, r3
 80026b6:	405d      	eors	r5, r3
 80026b8:	0fc4      	lsrs	r4, r0, #31
 80026ba:	0028      	movs	r0, r5
 80026bc:	f000 f90c 	bl	80028d8 <__clzsi2>
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <__aeabi_i2d+0x5c>)
 80026c2:	1a1b      	subs	r3, r3, r0
 80026c4:	280a      	cmp	r0, #10
 80026c6:	dc16      	bgt.n	80026f6 <__aeabi_i2d+0x4a>
 80026c8:	0002      	movs	r2, r0
 80026ca:	002e      	movs	r6, r5
 80026cc:	3215      	adds	r2, #21
 80026ce:	4096      	lsls	r6, r2
 80026d0:	220b      	movs	r2, #11
 80026d2:	1a12      	subs	r2, r2, r0
 80026d4:	40d5      	lsrs	r5, r2
 80026d6:	055b      	lsls	r3, r3, #21
 80026d8:	032d      	lsls	r5, r5, #12
 80026da:	0b2d      	lsrs	r5, r5, #12
 80026dc:	0d5b      	lsrs	r3, r3, #21
 80026de:	e003      	b.n	80026e8 <__aeabi_i2d+0x3c>
 80026e0:	2400      	movs	r4, #0
 80026e2:	2300      	movs	r3, #0
 80026e4:	2500      	movs	r5, #0
 80026e6:	2600      	movs	r6, #0
 80026e8:	051b      	lsls	r3, r3, #20
 80026ea:	432b      	orrs	r3, r5
 80026ec:	07e4      	lsls	r4, r4, #31
 80026ee:	4323      	orrs	r3, r4
 80026f0:	0030      	movs	r0, r6
 80026f2:	0019      	movs	r1, r3
 80026f4:	bd70      	pop	{r4, r5, r6, pc}
 80026f6:	380b      	subs	r0, #11
 80026f8:	4085      	lsls	r5, r0
 80026fa:	055b      	lsls	r3, r3, #21
 80026fc:	032d      	lsls	r5, r5, #12
 80026fe:	2600      	movs	r6, #0
 8002700:	0b2d      	lsrs	r5, r5, #12
 8002702:	0d5b      	lsrs	r3, r3, #21
 8002704:	e7f0      	b.n	80026e8 <__aeabi_i2d+0x3c>
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	0000041e 	.word	0x0000041e

0800270c <__aeabi_ui2d>:
 800270c:	b510      	push	{r4, lr}
 800270e:	1e04      	subs	r4, r0, #0
 8002710:	d010      	beq.n	8002734 <__aeabi_ui2d+0x28>
 8002712:	f000 f8e1 	bl	80028d8 <__clzsi2>
 8002716:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <__aeabi_ui2d+0x48>)
 8002718:	1a1b      	subs	r3, r3, r0
 800271a:	280a      	cmp	r0, #10
 800271c:	dc11      	bgt.n	8002742 <__aeabi_ui2d+0x36>
 800271e:	220b      	movs	r2, #11
 8002720:	0021      	movs	r1, r4
 8002722:	1a12      	subs	r2, r2, r0
 8002724:	40d1      	lsrs	r1, r2
 8002726:	3015      	adds	r0, #21
 8002728:	030a      	lsls	r2, r1, #12
 800272a:	055b      	lsls	r3, r3, #21
 800272c:	4084      	lsls	r4, r0
 800272e:	0b12      	lsrs	r2, r2, #12
 8002730:	0d5b      	lsrs	r3, r3, #21
 8002732:	e001      	b.n	8002738 <__aeabi_ui2d+0x2c>
 8002734:	2300      	movs	r3, #0
 8002736:	2200      	movs	r2, #0
 8002738:	051b      	lsls	r3, r3, #20
 800273a:	4313      	orrs	r3, r2
 800273c:	0020      	movs	r0, r4
 800273e:	0019      	movs	r1, r3
 8002740:	bd10      	pop	{r4, pc}
 8002742:	0022      	movs	r2, r4
 8002744:	380b      	subs	r0, #11
 8002746:	4082      	lsls	r2, r0
 8002748:	055b      	lsls	r3, r3, #21
 800274a:	0312      	lsls	r2, r2, #12
 800274c:	2400      	movs	r4, #0
 800274e:	0b12      	lsrs	r2, r2, #12
 8002750:	0d5b      	lsrs	r3, r3, #21
 8002752:	e7f1      	b.n	8002738 <__aeabi_ui2d+0x2c>
 8002754:	0000041e 	.word	0x0000041e

08002758 <__aeabi_d2f>:
 8002758:	0002      	movs	r2, r0
 800275a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800275c:	004b      	lsls	r3, r1, #1
 800275e:	030d      	lsls	r5, r1, #12
 8002760:	0f40      	lsrs	r0, r0, #29
 8002762:	0d5b      	lsrs	r3, r3, #21
 8002764:	0fcc      	lsrs	r4, r1, #31
 8002766:	0a6d      	lsrs	r5, r5, #9
 8002768:	493a      	ldr	r1, [pc, #232]	; (8002854 <__aeabi_d2f+0xfc>)
 800276a:	4305      	orrs	r5, r0
 800276c:	1c58      	adds	r0, r3, #1
 800276e:	00d7      	lsls	r7, r2, #3
 8002770:	4208      	tst	r0, r1
 8002772:	d00a      	beq.n	800278a <__aeabi_d2f+0x32>
 8002774:	4938      	ldr	r1, [pc, #224]	; (8002858 <__aeabi_d2f+0x100>)
 8002776:	1859      	adds	r1, r3, r1
 8002778:	29fe      	cmp	r1, #254	; 0xfe
 800277a:	dd16      	ble.n	80027aa <__aeabi_d2f+0x52>
 800277c:	20ff      	movs	r0, #255	; 0xff
 800277e:	2200      	movs	r2, #0
 8002780:	05c0      	lsls	r0, r0, #23
 8002782:	4310      	orrs	r0, r2
 8002784:	07e4      	lsls	r4, r4, #31
 8002786:	4320      	orrs	r0, r4
 8002788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <__aeabi_d2f+0x44>
 800278e:	433d      	orrs	r5, r7
 8002790:	d026      	beq.n	80027e0 <__aeabi_d2f+0x88>
 8002792:	2205      	movs	r2, #5
 8002794:	0192      	lsls	r2, r2, #6
 8002796:	0a52      	lsrs	r2, r2, #9
 8002798:	b2d8      	uxtb	r0, r3
 800279a:	e7f1      	b.n	8002780 <__aeabi_d2f+0x28>
 800279c:	432f      	orrs	r7, r5
 800279e:	d0ed      	beq.n	800277c <__aeabi_d2f+0x24>
 80027a0:	2280      	movs	r2, #128	; 0x80
 80027a2:	03d2      	lsls	r2, r2, #15
 80027a4:	20ff      	movs	r0, #255	; 0xff
 80027a6:	432a      	orrs	r2, r5
 80027a8:	e7ea      	b.n	8002780 <__aeabi_d2f+0x28>
 80027aa:	2900      	cmp	r1, #0
 80027ac:	dd1b      	ble.n	80027e6 <__aeabi_d2f+0x8e>
 80027ae:	0192      	lsls	r2, r2, #6
 80027b0:	1e50      	subs	r0, r2, #1
 80027b2:	4182      	sbcs	r2, r0
 80027b4:	00ed      	lsls	r5, r5, #3
 80027b6:	0f7f      	lsrs	r7, r7, #29
 80027b8:	432a      	orrs	r2, r5
 80027ba:	433a      	orrs	r2, r7
 80027bc:	0753      	lsls	r3, r2, #29
 80027be:	d047      	beq.n	8002850 <__aeabi_d2f+0xf8>
 80027c0:	230f      	movs	r3, #15
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d000      	beq.n	80027ca <__aeabi_d2f+0x72>
 80027c8:	3204      	adds	r2, #4
 80027ca:	2380      	movs	r3, #128	; 0x80
 80027cc:	04db      	lsls	r3, r3, #19
 80027ce:	4013      	ands	r3, r2
 80027d0:	d03e      	beq.n	8002850 <__aeabi_d2f+0xf8>
 80027d2:	1c48      	adds	r0, r1, #1
 80027d4:	29fe      	cmp	r1, #254	; 0xfe
 80027d6:	d0d1      	beq.n	800277c <__aeabi_d2f+0x24>
 80027d8:	0192      	lsls	r2, r2, #6
 80027da:	0a52      	lsrs	r2, r2, #9
 80027dc:	b2c0      	uxtb	r0, r0
 80027de:	e7cf      	b.n	8002780 <__aeabi_d2f+0x28>
 80027e0:	2000      	movs	r0, #0
 80027e2:	2200      	movs	r2, #0
 80027e4:	e7cc      	b.n	8002780 <__aeabi_d2f+0x28>
 80027e6:	000a      	movs	r2, r1
 80027e8:	3217      	adds	r2, #23
 80027ea:	db2f      	blt.n	800284c <__aeabi_d2f+0xf4>
 80027ec:	2680      	movs	r6, #128	; 0x80
 80027ee:	0436      	lsls	r6, r6, #16
 80027f0:	432e      	orrs	r6, r5
 80027f2:	251e      	movs	r5, #30
 80027f4:	1a6d      	subs	r5, r5, r1
 80027f6:	2d1f      	cmp	r5, #31
 80027f8:	dd11      	ble.n	800281e <__aeabi_d2f+0xc6>
 80027fa:	2202      	movs	r2, #2
 80027fc:	4252      	negs	r2, r2
 80027fe:	1a52      	subs	r2, r2, r1
 8002800:	0031      	movs	r1, r6
 8002802:	40d1      	lsrs	r1, r2
 8002804:	2d20      	cmp	r5, #32
 8002806:	d004      	beq.n	8002812 <__aeabi_d2f+0xba>
 8002808:	4a14      	ldr	r2, [pc, #80]	; (800285c <__aeabi_d2f+0x104>)
 800280a:	4694      	mov	ip, r2
 800280c:	4463      	add	r3, ip
 800280e:	409e      	lsls	r6, r3
 8002810:	4337      	orrs	r7, r6
 8002812:	003a      	movs	r2, r7
 8002814:	1e53      	subs	r3, r2, #1
 8002816:	419a      	sbcs	r2, r3
 8002818:	430a      	orrs	r2, r1
 800281a:	2100      	movs	r1, #0
 800281c:	e7ce      	b.n	80027bc <__aeabi_d2f+0x64>
 800281e:	4a10      	ldr	r2, [pc, #64]	; (8002860 <__aeabi_d2f+0x108>)
 8002820:	0038      	movs	r0, r7
 8002822:	4694      	mov	ip, r2
 8002824:	4463      	add	r3, ip
 8002826:	4098      	lsls	r0, r3
 8002828:	003a      	movs	r2, r7
 800282a:	1e41      	subs	r1, r0, #1
 800282c:	4188      	sbcs	r0, r1
 800282e:	409e      	lsls	r6, r3
 8002830:	40ea      	lsrs	r2, r5
 8002832:	4330      	orrs	r0, r6
 8002834:	4302      	orrs	r2, r0
 8002836:	2100      	movs	r1, #0
 8002838:	0753      	lsls	r3, r2, #29
 800283a:	d1c1      	bne.n	80027c0 <__aeabi_d2f+0x68>
 800283c:	2180      	movs	r1, #128	; 0x80
 800283e:	0013      	movs	r3, r2
 8002840:	04c9      	lsls	r1, r1, #19
 8002842:	2001      	movs	r0, #1
 8002844:	400b      	ands	r3, r1
 8002846:	420a      	tst	r2, r1
 8002848:	d1c6      	bne.n	80027d8 <__aeabi_d2f+0x80>
 800284a:	e7a3      	b.n	8002794 <__aeabi_d2f+0x3c>
 800284c:	2300      	movs	r3, #0
 800284e:	e7a0      	b.n	8002792 <__aeabi_d2f+0x3a>
 8002850:	000b      	movs	r3, r1
 8002852:	e79f      	b.n	8002794 <__aeabi_d2f+0x3c>
 8002854:	000007fe 	.word	0x000007fe
 8002858:	fffffc80 	.word	0xfffffc80
 800285c:	fffffca2 	.word	0xfffffca2
 8002860:	fffffc82 	.word	0xfffffc82

08002864 <__aeabi_cfrcmple>:
 8002864:	4684      	mov	ip, r0
 8002866:	0008      	movs	r0, r1
 8002868:	4661      	mov	r1, ip
 800286a:	e7ff      	b.n	800286c <__aeabi_cfcmpeq>

0800286c <__aeabi_cfcmpeq>:
 800286c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800286e:	f000 f8c9 	bl	8002a04 <__lesf2>
 8002872:	2800      	cmp	r0, #0
 8002874:	d401      	bmi.n	800287a <__aeabi_cfcmpeq+0xe>
 8002876:	2100      	movs	r1, #0
 8002878:	42c8      	cmn	r0, r1
 800287a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800287c <__aeabi_fcmpeq>:
 800287c:	b510      	push	{r4, lr}
 800287e:	f000 f855 	bl	800292c <__eqsf2>
 8002882:	4240      	negs	r0, r0
 8002884:	3001      	adds	r0, #1
 8002886:	bd10      	pop	{r4, pc}

08002888 <__aeabi_fcmplt>:
 8002888:	b510      	push	{r4, lr}
 800288a:	f000 f8bb 	bl	8002a04 <__lesf2>
 800288e:	2800      	cmp	r0, #0
 8002890:	db01      	blt.n	8002896 <__aeabi_fcmplt+0xe>
 8002892:	2000      	movs	r0, #0
 8002894:	bd10      	pop	{r4, pc}
 8002896:	2001      	movs	r0, #1
 8002898:	bd10      	pop	{r4, pc}
 800289a:	46c0      	nop			; (mov r8, r8)

0800289c <__aeabi_fcmple>:
 800289c:	b510      	push	{r4, lr}
 800289e:	f000 f8b1 	bl	8002a04 <__lesf2>
 80028a2:	2800      	cmp	r0, #0
 80028a4:	dd01      	ble.n	80028aa <__aeabi_fcmple+0xe>
 80028a6:	2000      	movs	r0, #0
 80028a8:	bd10      	pop	{r4, pc}
 80028aa:	2001      	movs	r0, #1
 80028ac:	bd10      	pop	{r4, pc}
 80028ae:	46c0      	nop			; (mov r8, r8)

080028b0 <__aeabi_fcmpgt>:
 80028b0:	b510      	push	{r4, lr}
 80028b2:	f000 f861 	bl	8002978 <__gesf2>
 80028b6:	2800      	cmp	r0, #0
 80028b8:	dc01      	bgt.n	80028be <__aeabi_fcmpgt+0xe>
 80028ba:	2000      	movs	r0, #0
 80028bc:	bd10      	pop	{r4, pc}
 80028be:	2001      	movs	r0, #1
 80028c0:	bd10      	pop	{r4, pc}
 80028c2:	46c0      	nop			; (mov r8, r8)

080028c4 <__aeabi_fcmpge>:
 80028c4:	b510      	push	{r4, lr}
 80028c6:	f000 f857 	bl	8002978 <__gesf2>
 80028ca:	2800      	cmp	r0, #0
 80028cc:	da01      	bge.n	80028d2 <__aeabi_fcmpge+0xe>
 80028ce:	2000      	movs	r0, #0
 80028d0:	bd10      	pop	{r4, pc}
 80028d2:	2001      	movs	r0, #1
 80028d4:	bd10      	pop	{r4, pc}
 80028d6:	46c0      	nop			; (mov r8, r8)

080028d8 <__clzsi2>:
 80028d8:	211c      	movs	r1, #28
 80028da:	2301      	movs	r3, #1
 80028dc:	041b      	lsls	r3, r3, #16
 80028de:	4298      	cmp	r0, r3
 80028e0:	d301      	bcc.n	80028e6 <__clzsi2+0xe>
 80028e2:	0c00      	lsrs	r0, r0, #16
 80028e4:	3910      	subs	r1, #16
 80028e6:	0a1b      	lsrs	r3, r3, #8
 80028e8:	4298      	cmp	r0, r3
 80028ea:	d301      	bcc.n	80028f0 <__clzsi2+0x18>
 80028ec:	0a00      	lsrs	r0, r0, #8
 80028ee:	3908      	subs	r1, #8
 80028f0:	091b      	lsrs	r3, r3, #4
 80028f2:	4298      	cmp	r0, r3
 80028f4:	d301      	bcc.n	80028fa <__clzsi2+0x22>
 80028f6:	0900      	lsrs	r0, r0, #4
 80028f8:	3904      	subs	r1, #4
 80028fa:	a202      	add	r2, pc, #8	; (adr r2, 8002904 <__clzsi2+0x2c>)
 80028fc:	5c10      	ldrb	r0, [r2, r0]
 80028fe:	1840      	adds	r0, r0, r1
 8002900:	4770      	bx	lr
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	02020304 	.word	0x02020304
 8002908:	01010101 	.word	0x01010101
	...

08002914 <__clzdi2>:
 8002914:	b510      	push	{r4, lr}
 8002916:	2900      	cmp	r1, #0
 8002918:	d103      	bne.n	8002922 <__clzdi2+0xe>
 800291a:	f7ff ffdd 	bl	80028d8 <__clzsi2>
 800291e:	3020      	adds	r0, #32
 8002920:	e002      	b.n	8002928 <__clzdi2+0x14>
 8002922:	0008      	movs	r0, r1
 8002924:	f7ff ffd8 	bl	80028d8 <__clzsi2>
 8002928:	bd10      	pop	{r4, pc}
 800292a:	46c0      	nop			; (mov r8, r8)

0800292c <__eqsf2>:
 800292c:	b570      	push	{r4, r5, r6, lr}
 800292e:	0042      	lsls	r2, r0, #1
 8002930:	0245      	lsls	r5, r0, #9
 8002932:	024e      	lsls	r6, r1, #9
 8002934:	004c      	lsls	r4, r1, #1
 8002936:	0fc3      	lsrs	r3, r0, #31
 8002938:	0a6d      	lsrs	r5, r5, #9
 800293a:	2001      	movs	r0, #1
 800293c:	0e12      	lsrs	r2, r2, #24
 800293e:	0a76      	lsrs	r6, r6, #9
 8002940:	0e24      	lsrs	r4, r4, #24
 8002942:	0fc9      	lsrs	r1, r1, #31
 8002944:	2aff      	cmp	r2, #255	; 0xff
 8002946:	d006      	beq.n	8002956 <__eqsf2+0x2a>
 8002948:	2cff      	cmp	r4, #255	; 0xff
 800294a:	d003      	beq.n	8002954 <__eqsf2+0x28>
 800294c:	42a2      	cmp	r2, r4
 800294e:	d101      	bne.n	8002954 <__eqsf2+0x28>
 8002950:	42b5      	cmp	r5, r6
 8002952:	d006      	beq.n	8002962 <__eqsf2+0x36>
 8002954:	bd70      	pop	{r4, r5, r6, pc}
 8002956:	2d00      	cmp	r5, #0
 8002958:	d1fc      	bne.n	8002954 <__eqsf2+0x28>
 800295a:	2cff      	cmp	r4, #255	; 0xff
 800295c:	d1fa      	bne.n	8002954 <__eqsf2+0x28>
 800295e:	2e00      	cmp	r6, #0
 8002960:	d1f8      	bne.n	8002954 <__eqsf2+0x28>
 8002962:	428b      	cmp	r3, r1
 8002964:	d006      	beq.n	8002974 <__eqsf2+0x48>
 8002966:	2001      	movs	r0, #1
 8002968:	2a00      	cmp	r2, #0
 800296a:	d1f3      	bne.n	8002954 <__eqsf2+0x28>
 800296c:	0028      	movs	r0, r5
 800296e:	1e43      	subs	r3, r0, #1
 8002970:	4198      	sbcs	r0, r3
 8002972:	e7ef      	b.n	8002954 <__eqsf2+0x28>
 8002974:	2000      	movs	r0, #0
 8002976:	e7ed      	b.n	8002954 <__eqsf2+0x28>

08002978 <__gesf2>:
 8002978:	b570      	push	{r4, r5, r6, lr}
 800297a:	0042      	lsls	r2, r0, #1
 800297c:	0245      	lsls	r5, r0, #9
 800297e:	024e      	lsls	r6, r1, #9
 8002980:	004c      	lsls	r4, r1, #1
 8002982:	0fc3      	lsrs	r3, r0, #31
 8002984:	0a6d      	lsrs	r5, r5, #9
 8002986:	0e12      	lsrs	r2, r2, #24
 8002988:	0a76      	lsrs	r6, r6, #9
 800298a:	0e24      	lsrs	r4, r4, #24
 800298c:	0fc8      	lsrs	r0, r1, #31
 800298e:	2aff      	cmp	r2, #255	; 0xff
 8002990:	d01b      	beq.n	80029ca <__gesf2+0x52>
 8002992:	2cff      	cmp	r4, #255	; 0xff
 8002994:	d00e      	beq.n	80029b4 <__gesf2+0x3c>
 8002996:	2a00      	cmp	r2, #0
 8002998:	d11b      	bne.n	80029d2 <__gesf2+0x5a>
 800299a:	2c00      	cmp	r4, #0
 800299c:	d101      	bne.n	80029a2 <__gesf2+0x2a>
 800299e:	2e00      	cmp	r6, #0
 80029a0:	d01c      	beq.n	80029dc <__gesf2+0x64>
 80029a2:	2d00      	cmp	r5, #0
 80029a4:	d00c      	beq.n	80029c0 <__gesf2+0x48>
 80029a6:	4283      	cmp	r3, r0
 80029a8:	d01c      	beq.n	80029e4 <__gesf2+0x6c>
 80029aa:	2102      	movs	r1, #2
 80029ac:	1e58      	subs	r0, r3, #1
 80029ae:	4008      	ands	r0, r1
 80029b0:	3801      	subs	r0, #1
 80029b2:	bd70      	pop	{r4, r5, r6, pc}
 80029b4:	2e00      	cmp	r6, #0
 80029b6:	d122      	bne.n	80029fe <__gesf2+0x86>
 80029b8:	2a00      	cmp	r2, #0
 80029ba:	d1f4      	bne.n	80029a6 <__gesf2+0x2e>
 80029bc:	2d00      	cmp	r5, #0
 80029be:	d1f2      	bne.n	80029a6 <__gesf2+0x2e>
 80029c0:	2800      	cmp	r0, #0
 80029c2:	d1f6      	bne.n	80029b2 <__gesf2+0x3a>
 80029c4:	2001      	movs	r0, #1
 80029c6:	4240      	negs	r0, r0
 80029c8:	e7f3      	b.n	80029b2 <__gesf2+0x3a>
 80029ca:	2d00      	cmp	r5, #0
 80029cc:	d117      	bne.n	80029fe <__gesf2+0x86>
 80029ce:	2cff      	cmp	r4, #255	; 0xff
 80029d0:	d0f0      	beq.n	80029b4 <__gesf2+0x3c>
 80029d2:	2c00      	cmp	r4, #0
 80029d4:	d1e7      	bne.n	80029a6 <__gesf2+0x2e>
 80029d6:	2e00      	cmp	r6, #0
 80029d8:	d1e5      	bne.n	80029a6 <__gesf2+0x2e>
 80029da:	e7e6      	b.n	80029aa <__gesf2+0x32>
 80029dc:	2000      	movs	r0, #0
 80029de:	2d00      	cmp	r5, #0
 80029e0:	d0e7      	beq.n	80029b2 <__gesf2+0x3a>
 80029e2:	e7e2      	b.n	80029aa <__gesf2+0x32>
 80029e4:	42a2      	cmp	r2, r4
 80029e6:	dc05      	bgt.n	80029f4 <__gesf2+0x7c>
 80029e8:	dbea      	blt.n	80029c0 <__gesf2+0x48>
 80029ea:	42b5      	cmp	r5, r6
 80029ec:	d802      	bhi.n	80029f4 <__gesf2+0x7c>
 80029ee:	d3e7      	bcc.n	80029c0 <__gesf2+0x48>
 80029f0:	2000      	movs	r0, #0
 80029f2:	e7de      	b.n	80029b2 <__gesf2+0x3a>
 80029f4:	4243      	negs	r3, r0
 80029f6:	4158      	adcs	r0, r3
 80029f8:	0040      	lsls	r0, r0, #1
 80029fa:	3801      	subs	r0, #1
 80029fc:	e7d9      	b.n	80029b2 <__gesf2+0x3a>
 80029fe:	2002      	movs	r0, #2
 8002a00:	4240      	negs	r0, r0
 8002a02:	e7d6      	b.n	80029b2 <__gesf2+0x3a>

08002a04 <__lesf2>:
 8002a04:	b570      	push	{r4, r5, r6, lr}
 8002a06:	0042      	lsls	r2, r0, #1
 8002a08:	0245      	lsls	r5, r0, #9
 8002a0a:	024e      	lsls	r6, r1, #9
 8002a0c:	004c      	lsls	r4, r1, #1
 8002a0e:	0fc3      	lsrs	r3, r0, #31
 8002a10:	0a6d      	lsrs	r5, r5, #9
 8002a12:	0e12      	lsrs	r2, r2, #24
 8002a14:	0a76      	lsrs	r6, r6, #9
 8002a16:	0e24      	lsrs	r4, r4, #24
 8002a18:	0fc8      	lsrs	r0, r1, #31
 8002a1a:	2aff      	cmp	r2, #255	; 0xff
 8002a1c:	d00b      	beq.n	8002a36 <__lesf2+0x32>
 8002a1e:	2cff      	cmp	r4, #255	; 0xff
 8002a20:	d00d      	beq.n	8002a3e <__lesf2+0x3a>
 8002a22:	2a00      	cmp	r2, #0
 8002a24:	d11f      	bne.n	8002a66 <__lesf2+0x62>
 8002a26:	2c00      	cmp	r4, #0
 8002a28:	d116      	bne.n	8002a58 <__lesf2+0x54>
 8002a2a:	2e00      	cmp	r6, #0
 8002a2c:	d114      	bne.n	8002a58 <__lesf2+0x54>
 8002a2e:	2000      	movs	r0, #0
 8002a30:	2d00      	cmp	r5, #0
 8002a32:	d010      	beq.n	8002a56 <__lesf2+0x52>
 8002a34:	e009      	b.n	8002a4a <__lesf2+0x46>
 8002a36:	2d00      	cmp	r5, #0
 8002a38:	d10c      	bne.n	8002a54 <__lesf2+0x50>
 8002a3a:	2cff      	cmp	r4, #255	; 0xff
 8002a3c:	d113      	bne.n	8002a66 <__lesf2+0x62>
 8002a3e:	2e00      	cmp	r6, #0
 8002a40:	d108      	bne.n	8002a54 <__lesf2+0x50>
 8002a42:	2a00      	cmp	r2, #0
 8002a44:	d008      	beq.n	8002a58 <__lesf2+0x54>
 8002a46:	4283      	cmp	r3, r0
 8002a48:	d012      	beq.n	8002a70 <__lesf2+0x6c>
 8002a4a:	2102      	movs	r1, #2
 8002a4c:	1e58      	subs	r0, r3, #1
 8002a4e:	4008      	ands	r0, r1
 8002a50:	3801      	subs	r0, #1
 8002a52:	e000      	b.n	8002a56 <__lesf2+0x52>
 8002a54:	2002      	movs	r0, #2
 8002a56:	bd70      	pop	{r4, r5, r6, pc}
 8002a58:	2d00      	cmp	r5, #0
 8002a5a:	d1f4      	bne.n	8002a46 <__lesf2+0x42>
 8002a5c:	2800      	cmp	r0, #0
 8002a5e:	d1fa      	bne.n	8002a56 <__lesf2+0x52>
 8002a60:	2001      	movs	r0, #1
 8002a62:	4240      	negs	r0, r0
 8002a64:	e7f7      	b.n	8002a56 <__lesf2+0x52>
 8002a66:	2c00      	cmp	r4, #0
 8002a68:	d1ed      	bne.n	8002a46 <__lesf2+0x42>
 8002a6a:	2e00      	cmp	r6, #0
 8002a6c:	d1eb      	bne.n	8002a46 <__lesf2+0x42>
 8002a6e:	e7ec      	b.n	8002a4a <__lesf2+0x46>
 8002a70:	42a2      	cmp	r2, r4
 8002a72:	dc05      	bgt.n	8002a80 <__lesf2+0x7c>
 8002a74:	dbf2      	blt.n	8002a5c <__lesf2+0x58>
 8002a76:	42b5      	cmp	r5, r6
 8002a78:	d802      	bhi.n	8002a80 <__lesf2+0x7c>
 8002a7a:	d3ef      	bcc.n	8002a5c <__lesf2+0x58>
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	e7ea      	b.n	8002a56 <__lesf2+0x52>
 8002a80:	4243      	negs	r3, r0
 8002a82:	4158      	adcs	r0, r3
 8002a84:	0040      	lsls	r0, r0, #1
 8002a86:	3801      	subs	r0, #1
 8002a88:	e7e5      	b.n	8002a56 <__lesf2+0x52>
 8002a8a:	46c0      	nop			; (mov r8, r8)

08002a8c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a8c:	b510      	push	{r4, lr}
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002a8e:	4a08      	ldr	r2, [pc, #32]	; (8002ab0 <HAL_Init+0x24>)
 8002a90:	6813      	ldr	r3, [r2, #0]
 8002a92:	2140      	movs	r1, #64	; 0x40
 8002a94:	430b      	orrs	r3, r1
 8002a96:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a98:	2003      	movs	r0, #3
 8002a9a:	f006 f93f 	bl	8008d1c <HAL_InitTick>
 8002a9e:	1e04      	subs	r4, r0, #0
 8002aa0:	d002      	beq.n	8002aa8 <HAL_Init+0x1c>
  {
    status = HAL_ERROR;
 8002aa2:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8002aa4:	0020      	movs	r0, r4
 8002aa6:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8002aa8:	f006 f800 	bl	8008aac <HAL_MspInit>
 8002aac:	e7fa      	b.n	8002aa4 <HAL_Init+0x18>
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	40022000 	.word	0x40022000

08002ab4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002ab4:	4a03      	ldr	r2, [pc, #12]	; (8002ac4 <HAL_IncTick+0x10>)
 8002ab6:	6811      	ldr	r1, [r2, #0]
 8002ab8:	4b03      	ldr	r3, [pc, #12]	; (8002ac8 <HAL_IncTick+0x14>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	185b      	adds	r3, r3, r1
 8002abe:	6013      	str	r3, [r2, #0]
}
 8002ac0:	4770      	bx	lr
 8002ac2:	46c0      	nop			; (mov r8, r8)
 8002ac4:	200006e4 	.word	0x200006e4
 8002ac8:	20000000 	.word	0x20000000

08002acc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002acc:	4b01      	ldr	r3, [pc, #4]	; (8002ad4 <HAL_GetTick+0x8>)
 8002ace:	6818      	ldr	r0, [r3, #0]
}
 8002ad0:	4770      	bx	lr
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	200006e4 	.word	0x200006e4

08002ad8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002ad8:	b510      	push	{r4, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	0004      	movs	r4, r0
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002ade:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <ADC_DelayMicroSecond+0x28>)
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	4908      	ldr	r1, [pc, #32]	; (8002b04 <ADC_DelayMicroSecond+0x2c>)
 8002ae4:	f7fd fb2c 	bl	8000140 <__udivsi3>
 8002ae8:	4344      	muls	r4, r0
 8002aea:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 8002aec:	e002      	b.n	8002af4 <ADC_DelayMicroSecond+0x1c>
  {
    waitLoopIndex--;
 8002aee:	9b01      	ldr	r3, [sp, #4]
 8002af0:	3b01      	subs	r3, #1
 8002af2:	9301      	str	r3, [sp, #4]
  while(waitLoopIndex != 0U)
 8002af4:	9b01      	ldr	r3, [sp, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f9      	bne.n	8002aee <ADC_DelayMicroSecond+0x16>
  } 
}
 8002afa:	b002      	add	sp, #8
 8002afc:	bd10      	pop	{r4, pc}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	2000000c 	.word	0x2000000c
 8002b04:	000f4240 	.word	0x000f4240

08002b08 <ADC_Enable>:
{
 8002b08:	b570      	push	{r4, r5, r6, lr}
 8002b0a:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b0c:	6802      	ldr	r2, [r0, #0]
 8002b0e:	6891      	ldr	r1, [r2, #8]
 8002b10:	2303      	movs	r3, #3
 8002b12:	400b      	ands	r3, r1
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d00d      	beq.n	8002b34 <ADC_Enable+0x2c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002b18:	6891      	ldr	r1, [r2, #8]
 8002b1a:	4b1a      	ldr	r3, [pc, #104]	; (8002b84 <ADC_Enable+0x7c>)
 8002b1c:	4219      	tst	r1, r3
 8002b1e:	d00e      	beq.n	8002b3e <ADC_Enable+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b20:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b22:	2210      	movs	r2, #16
 8002b24:	4313      	orrs	r3, r2
 8002b26:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002b2a:	3a0f      	subs	r2, #15
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8002b30:	2001      	movs	r0, #1
}
 8002b32:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b34:	6813      	ldr	r3, [r2, #0]
 8002b36:	07db      	lsls	r3, r3, #31
 8002b38:	d5ee      	bpl.n	8002b18 <ADC_Enable+0x10>
  return HAL_OK;
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	e7f9      	b.n	8002b32 <ADC_Enable+0x2a>
    __HAL_ADC_ENABLE(hadc);
 8002b3e:	6893      	ldr	r3, [r2, #8]
 8002b40:	2101      	movs	r1, #1
 8002b42:	430b      	orrs	r3, r1
 8002b44:	6093      	str	r3, [r2, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002b46:	2001      	movs	r0, #1
 8002b48:	f7ff ffc6 	bl	8002ad8 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 8002b4c:	f7ff ffbe 	bl	8002acc <HAL_GetTick>
 8002b50:	0005      	movs	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b52:	6823      	ldr	r3, [r4, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	07db      	lsls	r3, r3, #31
 8002b58:	d412      	bmi.n	8002b80 <ADC_Enable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b5a:	f7ff ffb7 	bl	8002acc <HAL_GetTick>
 8002b5e:	1b40      	subs	r0, r0, r5
 8002b60:	280a      	cmp	r0, #10
 8002b62:	d9f6      	bls.n	8002b52 <ADC_Enable+0x4a>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b64:	6823      	ldr	r3, [r4, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	07db      	lsls	r3, r3, #31
 8002b6a:	d4f2      	bmi.n	8002b52 <ADC_Enable+0x4a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b6c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b6e:	2210      	movs	r2, #16
 8002b70:	4313      	orrs	r3, r2
 8002b72:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002b76:	3a0f      	subs	r2, #15
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	e7d8      	b.n	8002b32 <ADC_Enable+0x2a>
  return HAL_OK;
 8002b80:	2000      	movs	r0, #0
 8002b82:	e7d6      	b.n	8002b32 <ADC_Enable+0x2a>
 8002b84:	80000017 	.word	0x80000017

08002b88 <HAL_ADC_Init>:
{
 8002b88:	b570      	push	{r4, r5, r6, lr}
 8002b8a:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8002b8c:	d100      	bne.n	8002b90 <HAL_ADC_Init+0x8>
 8002b8e:	e0e2      	b.n	8002d56 <HAL_ADC_Init+0x1ce>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b90:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d030      	beq.n	8002bf8 <HAL_ADC_Init+0x70>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002b96:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b98:	06db      	lsls	r3, r3, #27
 8002b9a:	d433      	bmi.n	8002c04 <HAL_ADC_Init+0x7c>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8002b9c:	6823      	ldr	r3, [r4, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	2104      	movs	r1, #4
 8002ba2:	000d      	movs	r5, r1
 8002ba4:	4015      	ands	r5, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002ba6:	4211      	tst	r1, r2
 8002ba8:	d12c      	bne.n	8002c04 <HAL_ADC_Init+0x7c>
  ADC_STATE_CLR_SET(hadc->State,
 8002baa:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002bac:	496b      	ldr	r1, [pc, #428]	; (8002d5c <HAL_ADC_Init+0x1d4>)
 8002bae:	400a      	ands	r2, r1
 8002bb0:	3106      	adds	r1, #6
 8002bb2:	31ff      	adds	r1, #255	; 0xff
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002bb8:	6899      	ldr	r1, [r3, #8]
 8002bba:	2203      	movs	r2, #3
 8002bbc:	400a      	ands	r2, r1
 8002bbe:	2a01      	cmp	r2, #1
 8002bc0:	d029      	beq.n	8002c16 <HAL_ADC_Init+0x8e>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002bc2:	6862      	ldr	r2, [r4, #4]
 8002bc4:	21c0      	movs	r1, #192	; 0xc0
 8002bc6:	0609      	lsls	r1, r1, #24
 8002bc8:	428a      	cmp	r2, r1
 8002bca:	d028      	beq.n	8002c1e <HAL_ADC_Init+0x96>
 8002bcc:	2180      	movs	r1, #128	; 0x80
 8002bce:	05c9      	lsls	r1, r1, #23
 8002bd0:	428a      	cmp	r2, r1
 8002bd2:	d024      	beq.n	8002c1e <HAL_ADC_Init+0x96>
 8002bd4:	2180      	movs	r1, #128	; 0x80
 8002bd6:	0609      	lsls	r1, r1, #24
 8002bd8:	428a      	cmp	r2, r1
 8002bda:	d020      	beq.n	8002c1e <HAL_ADC_Init+0x96>
 8002bdc:	691a      	ldr	r2, [r3, #16]
 8002bde:	0092      	lsls	r2, r2, #2
 8002be0:	0892      	lsrs	r2, r2, #2
 8002be2:	611a      	str	r2, [r3, #16]
 8002be4:	4b5e      	ldr	r3, [pc, #376]	; (8002d60 <HAL_ADC_Init+0x1d8>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	495e      	ldr	r1, [pc, #376]	; (8002d64 <HAL_ADC_Init+0x1dc>)
 8002bea:	400a      	ands	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	6861      	ldr	r1, [r4, #4]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	e01b      	b.n	8002c30 <HAL_ADC_Init+0xa8>
    ADC_CLEAR_ERRORCODE(hadc);
 8002bf8:	6583      	str	r3, [r0, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8002bfa:	2250      	movs	r2, #80	; 0x50
 8002bfc:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8002bfe:	f005 ff81 	bl	8008b04 <HAL_ADC_MspInit>
 8002c02:	e7c8      	b.n	8002b96 <HAL_ADC_Init+0xe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c04:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c06:	2210      	movs	r2, #16
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8002c0c:	2350      	movs	r3, #80	; 0x50
 8002c0e:	2200      	movs	r2, #0
 8002c10:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 8002c12:	2001      	movs	r0, #1
}
 8002c14:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	07d2      	lsls	r2, r2, #31
 8002c1a:	d413      	bmi.n	8002c44 <HAL_ADC_Init+0xbc>
 8002c1c:	e7d1      	b.n	8002bc2 <HAL_ADC_Init+0x3a>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	0092      	lsls	r2, r2, #2
 8002c22:	0892      	lsrs	r2, r2, #2
 8002c24:	611a      	str	r2, [r3, #16]
 8002c26:	6822      	ldr	r2, [r4, #0]
 8002c28:	6913      	ldr	r3, [r2, #16]
 8002c2a:	6861      	ldr	r1, [r4, #4]
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8002c30:	6822      	ldr	r2, [r4, #0]
 8002c32:	68d3      	ldr	r3, [r2, #12]
 8002c34:	2118      	movs	r1, #24
 8002c36:	438b      	bics	r3, r1
 8002c38:	60d3      	str	r3, [r2, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8002c3a:	6822      	ldr	r2, [r4, #0]
 8002c3c:	68d3      	ldr	r3, [r2, #12]
 8002c3e:	68a1      	ldr	r1, [r4, #8]
 8002c40:	430b      	orrs	r3, r1
 8002c42:	60d3      	str	r3, [r2, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002c44:	4b46      	ldr	r3, [pc, #280]	; (8002d60 <HAL_ADC_Init+0x1d8>)
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	4947      	ldr	r1, [pc, #284]	; (8002d68 <HAL_ADC_Init+0x1e0>)
 8002c4a:	400a      	ands	r2, r1
 8002c4c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c52:	0649      	lsls	r1, r1, #25
 8002c54:	430a      	orrs	r2, r1
 8002c56:	601a      	str	r2, [r3, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002c58:	6823      	ldr	r3, [r4, #0]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	00d2      	lsls	r2, r2, #3
 8002c5e:	d404      	bmi.n	8002c6a <HAL_ADC_Init+0xe2>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002c60:	6899      	ldr	r1, [r3, #8]
 8002c62:	2280      	movs	r2, #128	; 0x80
 8002c64:	0552      	lsls	r2, r2, #21
 8002c66:	430a      	orrs	r2, r1
 8002c68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002c6a:	6822      	ldr	r2, [r4, #0]
 8002c6c:	68d3      	ldr	r3, [r2, #12]
 8002c6e:	493f      	ldr	r1, [pc, #252]	; (8002d6c <HAL_ADC_Init+0x1e4>)
 8002c70:	400b      	ands	r3, r1
 8002c72:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002c74:	6820      	ldr	r0, [r4, #0]
 8002c76:	68c2      	ldr	r2, [r0, #12]
 8002c78:	68e3      	ldr	r3, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002c7a:	6921      	ldr	r1, [r4, #16]
 8002c7c:	2902      	cmp	r1, #2
 8002c7e:	d02d      	beq.n	8002cdc <HAL_ADC_Init+0x154>
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002c80:	432b      	orrs	r3, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002c82:	2120      	movs	r1, #32
 8002c84:	5c61      	ldrb	r1, [r4, r1]
 8002c86:	0349      	lsls	r1, r1, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002c88:	430b      	orrs	r3, r1
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002c8a:	212c      	movs	r1, #44	; 0x2c
 8002c8c:	5c61      	ldrb	r1, [r4, r1]
 8002c8e:	0049      	lsls	r1, r1, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002c90:	430b      	orrs	r3, r1
                            hadc->Init.Overrun                               |
 8002c92:	6b21      	ldr	r1, [r4, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002c94:	430b      	orrs	r3, r1
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002c96:	69a1      	ldr	r1, [r4, #24]
 8002c98:	0389      	lsls	r1, r1, #14
                            hadc->Init.Overrun                               |
 8002c9a:	430b      	orrs	r3, r1
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002c9c:	69e1      	ldr	r1, [r4, #28]
 8002c9e:	03c9      	lsls	r1, r1, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002ca0:	430b      	orrs	r3, r1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	60c3      	str	r3, [r0, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ca8:	22c2      	movs	r2, #194	; 0xc2
 8002caa:	32ff      	adds	r2, #255	; 0xff
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d005      	beq.n	8002cbc <HAL_ADC_Init+0x134>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002cb0:	6821      	ldr	r1, [r4, #0]
 8002cb2:	68ca      	ldr	r2, [r1, #12]
                             hadc->Init.ExternalTrigConvEdge;
 8002cb4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002cb6:	4303      	orrs	r3, r0
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	60cb      	str	r3, [r1, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cbc:	2321      	movs	r3, #33	; 0x21
 8002cbe:	5ce3      	ldrb	r3, [r4, r3]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d00d      	beq.n	8002ce0 <HAL_ADC_Init+0x158>
  if (hadc->Init.OversamplingMode == ENABLE)
 8002cc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d01e      	beq.n	8002d08 <HAL_ADC_Init+0x180>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002cca:	6822      	ldr	r2, [r4, #0]
 8002ccc:	6913      	ldr	r3, [r2, #16]
 8002cce:	07db      	lsls	r3, r3, #31
 8002cd0:	d52d      	bpl.n	8002d2e <HAL_ADC_Init+0x1a6>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002cd2:	6913      	ldr	r3, [r2, #16]
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	438b      	bics	r3, r1
 8002cd8:	6113      	str	r3, [r2, #16]
 8002cda:	e028      	b.n	8002d2e <HAL_ADC_Init+0x1a6>
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002cdc:	2504      	movs	r5, #4
 8002cde:	e7cf      	b.n	8002c80 <HAL_ADC_Init+0xf8>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ce0:	331f      	adds	r3, #31
 8002ce2:	5ce3      	ldrb	r3, [r4, r3]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d106      	bne.n	8002cf6 <HAL_ADC_Init+0x16e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002ce8:	6822      	ldr	r2, [r4, #0]
 8002cea:	68d1      	ldr	r1, [r2, #12]
 8002cec:	2380      	movs	r3, #128	; 0x80
 8002cee:	025b      	lsls	r3, r3, #9
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	60d3      	str	r3, [r2, #12]
 8002cf4:	e7e6      	b.n	8002cc4 <HAL_ADC_Init+0x13c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cf6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d00:	3a1f      	subs	r2, #31
 8002d02:	4313      	orrs	r3, r2
 8002d04:	65a3      	str	r3, [r4, #88]	; 0x58
 8002d06:	e7dd      	b.n	8002cc4 <HAL_ADC_Init+0x13c>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002d08:	6822      	ldr	r2, [r4, #0]
 8002d0a:	6913      	ldr	r3, [r2, #16]
 8002d0c:	4918      	ldr	r1, [pc, #96]	; (8002d70 <HAL_ADC_Init+0x1e8>)
 8002d0e:	400b      	ands	r3, r1
 8002d10:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002d12:	6821      	ldr	r1, [r4, #0]
 8002d14:	690a      	ldr	r2, [r1, #16]
 8002d16:	6c23      	ldr	r3, [r4, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8002d18:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002d1a:	4303      	orrs	r3, r0
                               hadc->Init.Oversample.TriggeredMode );
 8002d1c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8002d1e:	4303      	orrs	r3, r0
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002d20:	4313      	orrs	r3, r2
 8002d22:	610b      	str	r3, [r1, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002d24:	6822      	ldr	r2, [r4, #0]
 8002d26:	6913      	ldr	r3, [r2, #16]
 8002d28:	2101      	movs	r1, #1
 8002d2a:	430b      	orrs	r3, r1
 8002d2c:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002d2e:	6822      	ldr	r2, [r4, #0]
 8002d30:	6953      	ldr	r3, [r2, #20]
 8002d32:	2107      	movs	r1, #7
 8002d34:	438b      	bics	r3, r1
 8002d36:	6153      	str	r3, [r2, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002d38:	6822      	ldr	r2, [r4, #0]
 8002d3a:	6953      	ldr	r3, [r2, #20]
 8002d3c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	6153      	str	r3, [r2, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8002d42:	2300      	movs	r3, #0
 8002d44:	65a3      	str	r3, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8002d46:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d48:	2203      	movs	r2, #3
 8002d4a:	4393      	bics	r3, r2
 8002d4c:	3a02      	subs	r2, #2
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8002d52:	2000      	movs	r0, #0
 8002d54:	e75e      	b.n	8002c14 <HAL_ADC_Init+0x8c>
    return HAL_ERROR;
 8002d56:	2001      	movs	r0, #1
 8002d58:	e75c      	b.n	8002c14 <HAL_ADC_Init+0x8c>
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	fffffefd 	.word	0xfffffefd
 8002d60:	40012708 	.word	0x40012708
 8002d64:	ffc3ffff 	.word	0xffc3ffff
 8002d68:	fdffffff 	.word	0xfdffffff
 8002d6c:	fffe0219 	.word	0xfffe0219
 8002d70:	fffffc03 	.word	0xfffffc03

08002d74 <HAL_ADC_Start_DMA>:
{
 8002d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d76:	0004      	movs	r4, r0
 8002d78:	000d      	movs	r5, r1
 8002d7a:	0016      	movs	r6, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d7c:	6803      	ldr	r3, [r0, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	0752      	lsls	r2, r2, #29
 8002d82:	d43c      	bmi.n	8002dfe <HAL_ADC_Start_DMA+0x8a>
    __HAL_LOCK(hadc);
 8002d84:	2250      	movs	r2, #80	; 0x50
 8002d86:	5c82      	ldrb	r2, [r0, r2]
 8002d88:	2a01      	cmp	r2, #1
 8002d8a:	d03a      	beq.n	8002e02 <HAL_ADC_Start_DMA+0x8e>
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	2250      	movs	r2, #80	; 0x50
 8002d90:	5481      	strb	r1, [r0, r2]
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	60da      	str	r2, [r3, #12]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002d98:	69c3      	ldr	r3, [r0, #28]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d004      	beq.n	8002da8 <HAL_ADC_Start_DMA+0x34>
      tmp_hal_status = ADC_Enable(hadc);
 8002d9e:	f7ff feb3 	bl	8002b08 <ADC_Enable>
 8002da2:	1e07      	subs	r7, r0, #0
    if (tmp_hal_status == HAL_OK)
 8002da4:	d129      	bne.n	8002dfa <HAL_ADC_Start_DMA+0x86>
 8002da6:	e000      	b.n	8002daa <HAL_ADC_Start_DMA+0x36>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002da8:	2700      	movs	r7, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002daa:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002dac:	4b16      	ldr	r3, [pc, #88]	; (8002e08 <HAL_ADC_Start_DMA+0x94>)
 8002dae:	401a      	ands	r2, r3
 8002db0:	2380      	movs	r3, #128	; 0x80
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	4313      	orrs	r3, r2
 8002db6:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8002db8:	2300      	movs	r3, #0
 8002dba:	65a3      	str	r3, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 8002dbc:	2250      	movs	r2, #80	; 0x50
 8002dbe:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002dc0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002dc2:	4a12      	ldr	r2, [pc, #72]	; (8002e0c <HAL_ADC_Start_DMA+0x98>)
 8002dc4:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002dc6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002dc8:	4a11      	ldr	r2, [pc, #68]	; (8002e10 <HAL_ADC_Start_DMA+0x9c>)
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002dcc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002dce:	4a11      	ldr	r2, [pc, #68]	; (8002e14 <HAL_ADC_Start_DMA+0xa0>)
 8002dd0:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002dd2:	6823      	ldr	r3, [r4, #0]
 8002dd4:	221c      	movs	r2, #28
 8002dd6:	601a      	str	r2, [r3, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002dd8:	6822      	ldr	r2, [r4, #0]
 8002dda:	6853      	ldr	r3, [r2, #4]
 8002ddc:	2110      	movs	r1, #16
 8002dde:	430b      	orrs	r3, r1
 8002de0:	6053      	str	r3, [r2, #4]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002de2:	6821      	ldr	r1, [r4, #0]
 8002de4:	3140      	adds	r1, #64	; 0x40
 8002de6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002de8:	0033      	movs	r3, r6
 8002dea:	002a      	movs	r2, r5
 8002dec:	f000 fac6 	bl	800337c <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002df0:	6822      	ldr	r2, [r4, #0]
 8002df2:	6893      	ldr	r3, [r2, #8]
 8002df4:	2104      	movs	r1, #4
 8002df6:	430b      	orrs	r3, r1
 8002df8:	6093      	str	r3, [r2, #8]
}
 8002dfa:	0038      	movs	r0, r7
 8002dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_hal_status = HAL_BUSY;
 8002dfe:	2702      	movs	r7, #2
 8002e00:	e7fb      	b.n	8002dfa <HAL_ADC_Start_DMA+0x86>
    __HAL_LOCK(hadc);
 8002e02:	2702      	movs	r7, #2
 8002e04:	e7f9      	b.n	8002dfa <HAL_ADC_Start_DMA+0x86>
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	fffff0fe 	.word	0xfffff0fe
 8002e0c:	08002e1d 	.word	0x08002e1d
 8002e10:	08002e93 	.word	0x08002e93
 8002e14:	08002ea1 	.word	0x08002ea1

08002e18 <HAL_ADC_ConvCpltCallback>:
}
 8002e18:	4770      	bx	lr
	...

08002e1c <ADC_DMAConvCplt>:
{
 8002e1c:	b510      	push	{r4, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e1e:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002e20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e22:	2150      	movs	r1, #80	; 0x50
 8002e24:	4211      	tst	r1, r2
 8002e26:	d12c      	bne.n	8002e82 <ADC_DMAConvCplt+0x66>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002e2a:	2280      	movs	r2, #128	; 0x80
 8002e2c:	0092      	lsls	r2, r2, #2
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	655a      	str	r2, [r3, #84]	; 0x54
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68d0      	ldr	r0, [r2, #12]
 8002e36:	21c0      	movs	r1, #192	; 0xc0
 8002e38:	0109      	lsls	r1, r1, #4
 8002e3a:	4208      	tst	r0, r1
 8002e3c:	d114      	bne.n	8002e68 <ADC_DMAConvCplt+0x4c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002e3e:	2120      	movs	r1, #32
 8002e40:	5c59      	ldrb	r1, [r3, r1]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e42:	2900      	cmp	r1, #0
 8002e44:	d110      	bne.n	8002e68 <ADC_DMAConvCplt+0x4c>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002e46:	6811      	ldr	r1, [r2, #0]
 8002e48:	0709      	lsls	r1, r1, #28
 8002e4a:	d50d      	bpl.n	8002e68 <ADC_DMAConvCplt+0x4c>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e4c:	6891      	ldr	r1, [r2, #8]
 8002e4e:	0749      	lsls	r1, r1, #29
 8002e50:	d40e      	bmi.n	8002e70 <ADC_DMAConvCplt+0x54>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e52:	6851      	ldr	r1, [r2, #4]
 8002e54:	200c      	movs	r0, #12
 8002e56:	4381      	bics	r1, r0
 8002e58:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8002e5a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e5c:	490b      	ldr	r1, [pc, #44]	; (8002e8c <ADC_DMAConvCplt+0x70>)
 8002e5e:	400a      	ands	r2, r1
 8002e60:	3104      	adds	r1, #4
 8002e62:	31ff      	adds	r1, #255	; 0xff
 8002e64:	430a      	orrs	r2, r1
 8002e66:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f7ff ffd5 	bl	8002e18 <HAL_ADC_ConvCpltCallback>
}
 8002e6e:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e72:	2120      	movs	r1, #32
 8002e74:	430a      	orrs	r2, r1
 8002e76:	655a      	str	r2, [r3, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e7a:	391f      	subs	r1, #31
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	659a      	str	r2, [r3, #88]	; 0x58
 8002e80:	e7f2      	b.n	8002e68 <ADC_DMAConvCplt+0x4c>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e86:	4798      	blx	r3
}
 8002e88:	e7f1      	b.n	8002e6e <ADC_DMAConvCplt+0x52>
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	fffffefe 	.word	0xfffffefe

08002e90 <HAL_ADC_ConvHalfCpltCallback>:
}
 8002e90:	4770      	bx	lr

08002e92 <ADC_DMAHalfConvCplt>:
{
 8002e92:	b510      	push	{r4, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e94:	6a80      	ldr	r0, [r0, #40]	; 0x28
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002e96:	f7ff fffb 	bl	8002e90 <HAL_ADC_ConvHalfCpltCallback>
}
 8002e9a:	bd10      	pop	{r4, pc}

08002e9c <HAL_ADC_LevelOutOfWindowCallback>:
}
 8002e9c:	4770      	bx	lr

08002e9e <HAL_ADC_ErrorCallback>:
}
 8002e9e:	4770      	bx	lr

08002ea0 <ADC_DMAError>:
{
 8002ea0:	b510      	push	{r4, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ea2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ea4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002ea6:	2240      	movs	r2, #64	; 0x40
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	6543      	str	r3, [r0, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002eac:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002eae:	3a3c      	subs	r2, #60	; 0x3c
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	6583      	str	r3, [r0, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc); 
 8002eb4:	f7ff fff3 	bl	8002e9e <HAL_ADC_ErrorCallback>
}
 8002eb8:	bd10      	pop	{r4, pc}
	...

08002ebc <HAL_ADC_IRQHandler>:
{
 8002ebc:	b510      	push	{r4, lr}
 8002ebe:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002ec0:	6803      	ldr	r3, [r0, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	0752      	lsls	r2, r2, #29
 8002ec6:	d502      	bpl.n	8002ece <HAL_ADC_IRQHandler+0x12>
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	0752      	lsls	r2, r2, #29
 8002ecc:	d405      	bmi.n	8002eda <HAL_ADC_IRQHandler+0x1e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002ece:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002ed0:	0712      	lsls	r2, r2, #28
 8002ed2:	d52d      	bpl.n	8002f30 <HAL_ADC_IRQHandler+0x74>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	0712      	lsls	r2, r2, #28
 8002ed8:	d52a      	bpl.n	8002f30 <HAL_ADC_IRQHandler+0x74>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002eda:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002edc:	06d2      	lsls	r2, r2, #27
 8002ede:	d404      	bmi.n	8002eea <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ee0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002ee2:	2280      	movs	r2, #128	; 0x80
 8002ee4:	0092      	lsls	r2, r2, #2
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	6562      	str	r2, [r4, #84]	; 0x54
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002eea:	68d9      	ldr	r1, [r3, #12]
 8002eec:	22c0      	movs	r2, #192	; 0xc0
 8002eee:	0112      	lsls	r2, r2, #4
 8002ef0:	4211      	tst	r1, r2
 8002ef2:	d114      	bne.n	8002f1e <HAL_ADC_IRQHandler+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	5ca2      	ldrb	r2, [r4, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ef8:	2a00      	cmp	r2, #0
 8002efa:	d110      	bne.n	8002f1e <HAL_ADC_IRQHandler+0x62>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	0712      	lsls	r2, r2, #28
 8002f00:	d50d      	bpl.n	8002f1e <HAL_ADC_IRQHandler+0x62>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	0752      	lsls	r2, r2, #29
 8002f06:	d434      	bmi.n	8002f72 <HAL_ADC_IRQHandler+0xb6>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	210c      	movs	r1, #12
 8002f0c:	438a      	bics	r2, r1
 8002f0e:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8002f10:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f12:	4a22      	ldr	r2, [pc, #136]	; (8002f9c <HAL_ADC_IRQHandler+0xe0>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	3204      	adds	r2, #4
 8002f18:	32ff      	adds	r2, #255	; 0xff
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8002f1e:	0020      	movs	r0, r4
 8002f20:	f7ff ff7a 	bl	8002e18 <HAL_ADC_ConvCpltCallback>
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8002f24:	69a3      	ldr	r3, [r4, #24]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d002      	beq.n	8002f30 <HAL_ADC_IRQHandler+0x74>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f2a:	6823      	ldr	r3, [r4, #0]
 8002f2c:	220c      	movs	r2, #12
 8002f2e:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002f30:	6822      	ldr	r2, [r4, #0]
 8002f32:	6813      	ldr	r3, [r2, #0]
 8002f34:	061b      	lsls	r3, r3, #24
 8002f36:	d502      	bpl.n	8002f3e <HAL_ADC_IRQHandler+0x82>
 8002f38:	6853      	ldr	r3, [r2, #4]
 8002f3a:	061b      	lsls	r3, r3, #24
 8002f3c:	d422      	bmi.n	8002f84 <HAL_ADC_IRQHandler+0xc8>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002f3e:	6822      	ldr	r2, [r4, #0]
 8002f40:	6813      	ldr	r3, [r2, #0]
 8002f42:	06db      	lsls	r3, r3, #27
 8002f44:	d514      	bpl.n	8002f70 <HAL_ADC_IRQHandler+0xb4>
 8002f46:	6853      	ldr	r3, [r2, #4]
 8002f48:	06db      	lsls	r3, r3, #27
 8002f4a:	d511      	bpl.n	8002f70 <HAL_ADC_IRQHandler+0xb4>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002f4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <HAL_ADC_IRQHandler+0x9c>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8002f52:	68d3      	ldr	r3, [r2, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002f54:	07db      	lsls	r3, r3, #31
 8002f56:	d508      	bpl.n	8002f6a <HAL_ADC_IRQHandler+0xae>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f5a:	2102      	movs	r1, #2
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	65a3      	str	r3, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f60:	2310      	movs	r3, #16
 8002f62:	6013      	str	r3, [r2, #0]
      HAL_ADC_ErrorCallback(hadc);
 8002f64:	0020      	movs	r0, r4
 8002f66:	f7ff ff9a 	bl	8002e9e <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f6a:	6823      	ldr	r3, [r4, #0]
 8002f6c:	2210      	movs	r2, #16
 8002f6e:	601a      	str	r2, [r3, #0]
}
 8002f70:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f72:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f74:	2220      	movs	r2, #32
 8002f76:	4313      	orrs	r3, r2
 8002f78:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f7c:	3a1f      	subs	r2, #31
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	65a3      	str	r3, [r4, #88]	; 0x58
 8002f82:	e7cc      	b.n	8002f1e <HAL_ADC_IRQHandler+0x62>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f84:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002f86:	2380      	movs	r3, #128	; 0x80
 8002f88:	025b      	lsls	r3, r3, #9
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f8e:	0020      	movs	r0, r4
 8002f90:	f7ff ff84 	bl	8002e9c <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002f94:	6823      	ldr	r3, [r4, #0]
 8002f96:	2280      	movs	r2, #128	; 0x80
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	e7d0      	b.n	8002f3e <HAL_ADC_IRQHandler+0x82>
 8002f9c:	fffffefe 	.word	0xfffffefe

08002fa0 <HAL_ADC_ConfigChannel>:
{
 8002fa0:	b570      	push	{r4, r5, r6, lr}
 8002fa2:	0004      	movs	r4, r0
 8002fa4:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 8002fa6:	2350      	movs	r3, #80	; 0x50
 8002fa8:	5cc3      	ldrb	r3, [r0, r3]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d04b      	beq.n	8003046 <HAL_ADC_ConfigChannel+0xa6>
 8002fae:	2350      	movs	r3, #80	; 0x50
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002fb4:	6803      	ldr	r3, [r0, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	0752      	lsls	r2, r2, #29
 8002fba:	d41a      	bmi.n	8002ff2 <HAL_ADC_ConfigChannel+0x52>
  if (sConfig->Rank != ADC_RANK_NONE)
 8002fbc:	6849      	ldr	r1, [r1, #4]
 8002fbe:	4a23      	ldr	r2, [pc, #140]	; (800304c <HAL_ADC_ConfigChannel+0xac>)
 8002fc0:	4291      	cmp	r1, r2
 8002fc2:	d029      	beq.n	8003018 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002fc4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002fc6:	682a      	ldr	r2, [r5, #0]
 8002fc8:	0352      	lsls	r2, r2, #13
 8002fca:	0b52      	lsrs	r2, r2, #13
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	629a      	str	r2, [r3, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002fd0:	682b      	ldr	r3, [r5, #0]
 8002fd2:	035b      	lsls	r3, r3, #13
 8002fd4:	d416      	bmi.n	8003004 <HAL_ADC_ConfigChannel+0x64>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002fd6:	682b      	ldr	r3, [r5, #0]
 8002fd8:	039b      	lsls	r3, r3, #14
 8002fda:	d505      	bpl.n	8002fe8 <HAL_ADC_ConfigChannel+0x48>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8002fdc:	4a1c      	ldr	r2, [pc, #112]	; (8003050 <HAL_ADC_ConfigChannel+0xb0>)
 8002fde:	6811      	ldr	r1, [r2, #0]
 8002fe0:	2380      	movs	r3, #128	; 0x80
 8002fe2:	03db      	lsls	r3, r3, #15
 8002fe4:	430b      	orrs	r3, r1
 8002fe6:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8002fe8:	2350      	movs	r3, #80	; 0x50
 8002fea:	2200      	movs	r2, #0
 8002fec:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8002fee:	2000      	movs	r0, #0
}
 8002ff0:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ff2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	6543      	str	r3, [r0, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8002ffa:	2350      	movs	r3, #80	; 0x50
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8003000:	2001      	movs	r0, #1
 8003002:	e7f5      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x50>
      ADC->CCR |= ADC_CCR_TSEN;   
 8003004:	4a12      	ldr	r2, [pc, #72]	; (8003050 <HAL_ADC_ConfigChannel+0xb0>)
 8003006:	6811      	ldr	r1, [r2, #0]
 8003008:	2380      	movs	r3, #128	; 0x80
 800300a:	041b      	lsls	r3, r3, #16
 800300c:	430b      	orrs	r3, r1
 800300e:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003010:	200a      	movs	r0, #10
 8003012:	f7ff fd61 	bl	8002ad8 <ADC_DelayMicroSecond>
 8003016:	e7de      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x36>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003018:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800301a:	682a      	ldr	r2, [r5, #0]
 800301c:	0352      	lsls	r2, r2, #13
 800301e:	0b52      	lsrs	r2, r2, #13
 8003020:	4391      	bics	r1, r2
 8003022:	6299      	str	r1, [r3, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003024:	682b      	ldr	r3, [r5, #0]
 8003026:	035b      	lsls	r3, r3, #13
 8003028:	d504      	bpl.n	8003034 <HAL_ADC_ConfigChannel+0x94>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800302a:	4a09      	ldr	r2, [pc, #36]	; (8003050 <HAL_ADC_ConfigChannel+0xb0>)
 800302c:	6813      	ldr	r3, [r2, #0]
 800302e:	4909      	ldr	r1, [pc, #36]	; (8003054 <HAL_ADC_ConfigChannel+0xb4>)
 8003030:	400b      	ands	r3, r1
 8003032:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003034:	682b      	ldr	r3, [r5, #0]
 8003036:	039b      	lsls	r3, r3, #14
 8003038:	d5d6      	bpl.n	8002fe8 <HAL_ADC_ConfigChannel+0x48>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800303a:	4a05      	ldr	r2, [pc, #20]	; (8003050 <HAL_ADC_ConfigChannel+0xb0>)
 800303c:	6813      	ldr	r3, [r2, #0]
 800303e:	4906      	ldr	r1, [pc, #24]	; (8003058 <HAL_ADC_ConfigChannel+0xb8>)
 8003040:	400b      	ands	r3, r1
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	e7d0      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x48>
  __HAL_LOCK(hadc);
 8003046:	2002      	movs	r0, #2
 8003048:	e7d2      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x50>
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	00001001 	.word	0x00001001
 8003050:	40012708 	.word	0x40012708
 8003054:	ff7fffff 	.word	0xff7fffff
 8003058:	ffbfffff 	.word	0xffbfffff

0800305c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800305c:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800305e:	2800      	cmp	r0, #0
 8003060:	db11      	blt.n	8003086 <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003062:	0883      	lsrs	r3, r0, #2
 8003064:	4d13      	ldr	r5, [pc, #76]	; (80030b4 <HAL_NVIC_SetPriority+0x58>)
 8003066:	33c0      	adds	r3, #192	; 0xc0
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	595c      	ldr	r4, [r3, r5]
 800306c:	2203      	movs	r2, #3
 800306e:	4010      	ands	r0, r2
 8003070:	00c0      	lsls	r0, r0, #3
 8003072:	32fc      	adds	r2, #252	; 0xfc
 8003074:	0016      	movs	r6, r2
 8003076:	4086      	lsls	r6, r0
 8003078:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800307a:	0189      	lsls	r1, r1, #6
 800307c:	400a      	ands	r2, r1
 800307e:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003080:	4322      	orrs	r2, r4
 8003082:	515a      	str	r2, [r3, r5]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8003084:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003086:	230f      	movs	r3, #15
 8003088:	4003      	ands	r3, r0
 800308a:	3b08      	subs	r3, #8
 800308c:	089b      	lsrs	r3, r3, #2
 800308e:	3306      	adds	r3, #6
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4a09      	ldr	r2, [pc, #36]	; (80030b8 <HAL_NVIC_SetPriority+0x5c>)
 8003094:	4694      	mov	ip, r2
 8003096:	4463      	add	r3, ip
 8003098:	685c      	ldr	r4, [r3, #4]
 800309a:	2203      	movs	r2, #3
 800309c:	4010      	ands	r0, r2
 800309e:	00c0      	lsls	r0, r0, #3
 80030a0:	32fc      	adds	r2, #252	; 0xfc
 80030a2:	0015      	movs	r5, r2
 80030a4:	4085      	lsls	r5, r0
 80030a6:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80030a8:	0189      	lsls	r1, r1, #6
 80030aa:	400a      	ands	r2, r1
 80030ac:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030ae:	4322      	orrs	r2, r4
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	e7e7      	b.n	8003084 <HAL_NVIC_SetPriority+0x28>
 80030b4:	e000e100 	.word	0xe000e100
 80030b8:	e000ed00 	.word	0xe000ed00

080030bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80030bc:	2800      	cmp	r0, #0
 80030be:	db05      	blt.n	80030cc <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030c0:	231f      	movs	r3, #31
 80030c2:	4018      	ands	r0, r3
 80030c4:	3b1e      	subs	r3, #30
 80030c6:	4083      	lsls	r3, r0
 80030c8:	4a01      	ldr	r2, [pc, #4]	; (80030d0 <HAL_NVIC_EnableIRQ+0x14>)
 80030ca:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80030cc:	4770      	bx	lr
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	e000e100 	.word	0xe000e100

080030d4 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80030d4:	b570      	push	{r4, r5, r6, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80030d6:	2500      	movs	r5, #0
 80030d8:	e00e      	b.n	80030f8 <CRC_Handle_8+0x24>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80030da:	00ac      	lsls	r4, r5, #2
 80030dc:	5d0b      	ldrb	r3, [r1, r4]
 80030de:	061b      	lsls	r3, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80030e0:	190c      	adds	r4, r1, r4
 80030e2:	7866      	ldrb	r6, [r4, #1]
 80030e4:	0436      	lsls	r6, r6, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80030e6:	4333      	orrs	r3, r6
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80030e8:	78a6      	ldrb	r6, [r4, #2]
 80030ea:	0236      	lsls	r6, r6, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80030ec:	4333      	orrs	r3, r6
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80030ee:	78e6      	ldrb	r6, [r4, #3]
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80030f0:	6804      	ldr	r4, [r0, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80030f2:	4333      	orrs	r3, r6
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80030f4:	6023      	str	r3, [r4, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80030f6:	3501      	adds	r5, #1
 80030f8:	0893      	lsrs	r3, r2, #2
 80030fa:	42ab      	cmp	r3, r5
 80030fc:	d8ed      	bhi.n	80030da <CRC_Handle_8+0x6>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80030fe:	2303      	movs	r3, #3
 8003100:	001c      	movs	r4, r3
 8003102:	4014      	ands	r4, r2
 8003104:	4213      	tst	r3, r2
 8003106:	d005      	beq.n	8003114 <CRC_Handle_8+0x40>
  {
    if ((BufferLength % 4U) == 1U)
 8003108:	2c01      	cmp	r4, #1
 800310a:	d006      	beq.n	800311a <CRC_Handle_8+0x46>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
    }
    if ((BufferLength % 4U) == 2U)
 800310c:	2c02      	cmp	r4, #2
 800310e:	d009      	beq.n	8003124 <CRC_Handle_8+0x50>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
      *pReg = data;
    }
    if ((BufferLength % 4U) == 3U)
 8003110:	2c03      	cmp	r4, #3
 8003112:	d010      	beq.n	8003136 <CRC_Handle_8+0x62>
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003114:	6803      	ldr	r3, [r0, #0]
 8003116:	6818      	ldr	r0, [r3, #0]
}
 8003118:	bd70      	pop	{r4, r5, r6, pc}
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800311a:	00ab      	lsls	r3, r5, #2
 800311c:	6802      	ldr	r2, [r0, #0]
 800311e:	5ccb      	ldrb	r3, [r1, r3]
 8003120:	7013      	strb	r3, [r2, #0]
 8003122:	e7f3      	b.n	800310c <CRC_Handle_8+0x38>
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003124:	00ab      	lsls	r3, r5, #2
 8003126:	5cca      	ldrb	r2, [r1, r3]
 8003128:	0212      	lsls	r2, r2, #8
 800312a:	18cb      	adds	r3, r1, r3
 800312c:	785b      	ldrb	r3, [r3, #1]
 800312e:	4313      	orrs	r3, r2
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003130:	6802      	ldr	r2, [r0, #0]
      *pReg = data;
 8003132:	8013      	strh	r3, [r2, #0]
 8003134:	e7ec      	b.n	8003110 <CRC_Handle_8+0x3c>
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003136:	00ad      	lsls	r5, r5, #2
 8003138:	5d4a      	ldrb	r2, [r1, r5]
 800313a:	0212      	lsls	r2, r2, #8
 800313c:	1949      	adds	r1, r1, r5
 800313e:	784b      	ldrb	r3, [r1, #1]
 8003140:	4313      	orrs	r3, r2
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003142:	6802      	ldr	r2, [r0, #0]
      *pReg = data;
 8003144:	8013      	strh	r3, [r2, #0]
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003146:	6803      	ldr	r3, [r0, #0]
 8003148:	788a      	ldrb	r2, [r1, #2]
 800314a:	701a      	strb	r2, [r3, #0]
 800314c:	e7e2      	b.n	8003114 <CRC_Handle_8+0x40>

0800314e <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800314e:	b570      	push	{r4, r5, r6, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003150:	2500      	movs	r5, #0
 8003152:	e008      	b.n	8003166 <CRC_Handle_16+0x18>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8003154:	00ac      	lsls	r4, r5, #2
 8003156:	5b0b      	ldrh	r3, [r1, r4]
 8003158:	041b      	lsls	r3, r3, #16
 800315a:	190c      	adds	r4, r1, r4
 800315c:	8866      	ldrh	r6, [r4, #2]
 800315e:	6804      	ldr	r4, [r0, #0]
 8003160:	4333      	orrs	r3, r6
 8003162:	6023      	str	r3, [r4, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003164:	3501      	adds	r5, #1
 8003166:	0853      	lsrs	r3, r2, #1
 8003168:	42ab      	cmp	r3, r5
 800316a:	d8f3      	bhi.n	8003154 <CRC_Handle_16+0x6>
  }
  if ((BufferLength % 2U) != 0U)
 800316c:	07d2      	lsls	r2, r2, #31
 800316e:	d503      	bpl.n	8003178 <CRC_Handle_16+0x2a>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8003170:	6803      	ldr	r3, [r0, #0]
    *pReg = pBuffer[2U * i];
 8003172:	00ad      	lsls	r5, r5, #2
 8003174:	5a6a      	ldrh	r2, [r5, r1]
 8003176:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003178:	6803      	ldr	r3, [r0, #0]
 800317a:	6818      	ldr	r0, [r3, #0]
}
 800317c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003180 <HAL_CRC_Init>:
{
 8003180:	b510      	push	{r4, lr}
 8003182:	1e04      	subs	r4, r0, #0
  if (hcrc == NULL)
 8003184:	d039      	beq.n	80031fa <HAL_CRC_Init+0x7a>
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003186:	7f43      	ldrb	r3, [r0, #29]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d025      	beq.n	80031d8 <HAL_CRC_Init+0x58>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800318c:	2302      	movs	r3, #2
 800318e:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003190:	7923      	ldrb	r3, [r4, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d124      	bne.n	80031e0 <HAL_CRC_Init+0x60>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003196:	6823      	ldr	r3, [r4, #0]
 8003198:	4a19      	ldr	r2, [pc, #100]	; (8003200 <HAL_CRC_Init+0x80>)
 800319a:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800319c:	6822      	ldr	r2, [r4, #0]
 800319e:	6893      	ldr	r3, [r2, #8]
 80031a0:	2118      	movs	r1, #24
 80031a2:	438b      	bics	r3, r1
 80031a4:	6093      	str	r3, [r2, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80031a6:	7963      	ldrb	r3, [r4, #5]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d122      	bne.n	80031f2 <HAL_CRC_Init+0x72>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80031ac:	6823      	ldr	r3, [r4, #0]
 80031ae:	2201      	movs	r2, #1
 80031b0:	4252      	negs	r2, r2
 80031b2:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80031b4:	6822      	ldr	r2, [r4, #0]
 80031b6:	6893      	ldr	r3, [r2, #8]
 80031b8:	2160      	movs	r1, #96	; 0x60
 80031ba:	438b      	bics	r3, r1
 80031bc:	6961      	ldr	r1, [r4, #20]
 80031be:	430b      	orrs	r3, r1
 80031c0:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80031c2:	6822      	ldr	r2, [r4, #0]
 80031c4:	6893      	ldr	r3, [r2, #8]
 80031c6:	2180      	movs	r1, #128	; 0x80
 80031c8:	438b      	bics	r3, r1
 80031ca:	69a1      	ldr	r1, [r4, #24]
 80031cc:	430b      	orrs	r3, r1
 80031ce:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80031d0:	2301      	movs	r3, #1
 80031d2:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80031d4:	2000      	movs	r0, #0
}
 80031d6:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80031d8:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80031da:	f005 fce7 	bl	8008bac <HAL_CRC_MspInit>
 80031de:	e7d5      	b.n	800318c <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80031e0:	68e2      	ldr	r2, [r4, #12]
 80031e2:	68a1      	ldr	r1, [r4, #8]
 80031e4:	0020      	movs	r0, r4
 80031e6:	f000 f835 	bl	8003254 <HAL_CRCEx_Polynomial_Set>
 80031ea:	2800      	cmp	r0, #0
 80031ec:	d0db      	beq.n	80031a6 <HAL_CRC_Init+0x26>
      return HAL_ERROR;
 80031ee:	2001      	movs	r0, #1
 80031f0:	e7f1      	b.n	80031d6 <HAL_CRC_Init+0x56>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80031f2:	6823      	ldr	r3, [r4, #0]
 80031f4:	6922      	ldr	r2, [r4, #16]
 80031f6:	611a      	str	r2, [r3, #16]
 80031f8:	e7dc      	b.n	80031b4 <HAL_CRC_Init+0x34>
    return HAL_ERROR;
 80031fa:	2001      	movs	r0, #1
 80031fc:	e7eb      	b.n	80031d6 <HAL_CRC_Init+0x56>
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	04c11db7 	.word	0x04c11db7

08003204 <HAL_CRC_Calculate>:
{
 8003204:	b570      	push	{r4, r5, r6, lr}
 8003206:	0004      	movs	r4, r0
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003208:	2302      	movs	r3, #2
 800320a:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 800320c:	6800      	ldr	r0, [r0, #0]
 800320e:	6883      	ldr	r3, [r0, #8]
 8003210:	2501      	movs	r5, #1
 8003212:	432b      	orrs	r3, r5
 8003214:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 8003216:	6a23      	ldr	r3, [r4, #32]
 8003218:	2b02      	cmp	r3, #2
 800321a:	d017      	beq.n	800324c <HAL_CRC_Calculate+0x48>
 800321c:	2b03      	cmp	r3, #3
 800321e:	d00f      	beq.n	8003240 <HAL_CRC_Calculate+0x3c>
 8003220:	2b01      	cmp	r3, #1
 8003222:	d00f      	beq.n	8003244 <HAL_CRC_Calculate+0x40>
 8003224:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8003226:	2301      	movs	r3, #1
 8003228:	7763      	strb	r3, [r4, #29]
}
 800322a:	bd70      	pop	{r4, r5, r6, pc}
        hcrc->Instance->DR = pBuffer[index];
 800322c:	6820      	ldr	r0, [r4, #0]
 800322e:	009d      	lsls	r5, r3, #2
 8003230:	586d      	ldr	r5, [r5, r1]
 8003232:	6005      	str	r5, [r0, #0]
      for (index = 0U; index < BufferLength; index++)
 8003234:	3301      	adds	r3, #1
 8003236:	4293      	cmp	r3, r2
 8003238:	d3f8      	bcc.n	800322c <HAL_CRC_Calculate+0x28>
      temp = hcrc->Instance->DR;
 800323a:	6823      	ldr	r3, [r4, #0]
 800323c:	6818      	ldr	r0, [r3, #0]
      break;
 800323e:	e7f2      	b.n	8003226 <HAL_CRC_Calculate+0x22>
  switch (hcrc->InputDataFormat)
 8003240:	2300      	movs	r3, #0
 8003242:	e7f8      	b.n	8003236 <HAL_CRC_Calculate+0x32>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8003244:	0020      	movs	r0, r4
 8003246:	f7ff ff45 	bl	80030d4 <CRC_Handle_8>
      break;
 800324a:	e7ec      	b.n	8003226 <HAL_CRC_Calculate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800324c:	0020      	movs	r0, r4
 800324e:	f7ff ff7e 	bl	800314e <CRC_Handle_16>
      break;
 8003252:	e7e8      	b.n	8003226 <HAL_CRC_Calculate+0x22>

08003254 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003254:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003256:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003258:	001c      	movs	r4, r3
 800325a:	3b01      	subs	r3, #1
 800325c:	2c00      	cmp	r4, #0
 800325e:	d006      	beq.n	800326e <HAL_CRCEx_Polynomial_Set+0x1a>
 8003260:	241f      	movs	r4, #31
 8003262:	401c      	ands	r4, r3
 8003264:	000d      	movs	r5, r1
 8003266:	40e5      	lsrs	r5, r4
 8003268:	002c      	movs	r4, r5
 800326a:	07e4      	lsls	r4, r4, #31
 800326c:	d5f4      	bpl.n	8003258 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800326e:	2a10      	cmp	r2, #16
 8003270:	d018      	beq.n	80032a4 <HAL_CRCEx_Polynomial_Set+0x50>
 8003272:	d809      	bhi.n	8003288 <HAL_CRCEx_Polynomial_Set+0x34>
 8003274:	2a00      	cmp	r2, #0
 8003276:	d00b      	beq.n	8003290 <HAL_CRCEx_Polynomial_Set+0x3c>
 8003278:	2a08      	cmp	r2, #8
 800327a:	d103      	bne.n	8003284 <HAL_CRCEx_Polynomial_Set+0x30>
      {
        status =   HAL_ERROR;
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800327c:	2b0f      	cmp	r3, #15
 800327e:	d907      	bls.n	8003290 <HAL_CRCEx_Polynomial_Set+0x3c>
      {
        status =   HAL_ERROR;
 8003280:	2001      	movs	r0, #1
 8003282:	e00e      	b.n	80032a2 <HAL_CRCEx_Polynomial_Set+0x4e>
  switch (PolyLength)
 8003284:	2001      	movs	r0, #1
 8003286:	e00c      	b.n	80032a2 <HAL_CRCEx_Polynomial_Set+0x4e>
 8003288:	2a18      	cmp	r2, #24
 800328a:	d10f      	bne.n	80032ac <HAL_CRCEx_Polynomial_Set+0x58>
      if (msb >= HAL_CRC_LENGTH_7B)
 800328c:	2b06      	cmp	r3, #6
 800328e:	d80f      	bhi.n	80032b0 <HAL_CRCEx_Polynomial_Set+0x5c>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003290:	6803      	ldr	r3, [r0, #0]
 8003292:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003294:	6801      	ldr	r1, [r0, #0]
 8003296:	688b      	ldr	r3, [r1, #8]
 8003298:	2018      	movs	r0, #24
 800329a:	4383      	bics	r3, r0
 800329c:	4313      	orrs	r3, r2
 800329e:	608b      	str	r3, [r1, #8]
 80032a0:	2000      	movs	r0, #0
  }
  /* Return function status */
  return status;
}
 80032a2:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 80032a4:	2b07      	cmp	r3, #7
 80032a6:	d9f3      	bls.n	8003290 <HAL_CRCEx_Polynomial_Set+0x3c>
        status =   HAL_ERROR;
 80032a8:	2001      	movs	r0, #1
 80032aa:	e7fa      	b.n	80032a2 <HAL_CRCEx_Polynomial_Set+0x4e>
  switch (PolyLength)
 80032ac:	2001      	movs	r0, #1
 80032ae:	e7f8      	b.n	80032a2 <HAL_CRCEx_Polynomial_Set+0x4e>
        status =   HAL_ERROR;
 80032b0:	2001      	movs	r0, #1
 80032b2:	e7f6      	b.n	80032a2 <HAL_CRCEx_Polynomial_Set+0x4e>

080032b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032b4:	b570      	push	{r4, r5, r6, lr}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80032b6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80032b8:	251c      	movs	r5, #28
 80032ba:	4025      	ands	r5, r4
 80032bc:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80032be:	2401      	movs	r4, #1
 80032c0:	40ac      	lsls	r4, r5
 80032c2:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032c4:	6804      	ldr	r4, [r0, #0]
 80032c6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032c8:	6883      	ldr	r3, [r0, #8]
 80032ca:	2b10      	cmp	r3, #16
 80032cc:	d004      	beq.n	80032d8 <DMA_SetConfig+0x24>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80032ce:	6803      	ldr	r3, [r0, #0]
 80032d0:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80032d2:	6803      	ldr	r3, [r0, #0]
 80032d4:	60da      	str	r2, [r3, #12]
  }
}
 80032d6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 80032d8:	6803      	ldr	r3, [r0, #0]
 80032da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80032dc:	6803      	ldr	r3, [r0, #0]
 80032de:	60d9      	str	r1, [r3, #12]
 80032e0:	e7f9      	b.n	80032d6 <DMA_SetConfig+0x22>
	...

080032e4 <HAL_DMA_Init>:
{
 80032e4:	b570      	push	{r4, r5, r6, lr}
 80032e6:	1e04      	subs	r4, r0, #0
  if(hdma == NULL)
 80032e8:	d03d      	beq.n	8003366 <HAL_DMA_Init+0x82>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80032ea:	6805      	ldr	r5, [r0, #0]
 80032ec:	4b1f      	ldr	r3, [pc, #124]	; (800336c <HAL_DMA_Init+0x88>)
 80032ee:	18e8      	adds	r0, r5, r3
 80032f0:	2114      	movs	r1, #20
 80032f2:	f7fc ff25 	bl	8000140 <__udivsi3>
 80032f6:	0080      	lsls	r0, r0, #2
 80032f8:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80032fa:	4b1d      	ldr	r3, [pc, #116]	; (8003370 <HAL_DMA_Init+0x8c>)
 80032fc:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80032fe:	2325      	movs	r3, #37	; 0x25
 8003300:	2202      	movs	r2, #2
 8003302:	54e2      	strb	r2, [r4, r3]
  tmp = hdma->Instance->CCR;
 8003304:	682a      	ldr	r2, [r5, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003306:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <HAL_DMA_Init+0x90>)
 8003308:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 800330a:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800330c:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 800330e:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003310:	6921      	ldr	r1, [r4, #16]
 8003312:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003314:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003316:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003318:	69a1      	ldr	r1, [r4, #24]
 800331a:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800331c:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800331e:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8003320:	6a21      	ldr	r1, [r4, #32]
 8003322:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8003324:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8003326:	602b      	str	r3, [r5, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003328:	68a2      	ldr	r2, [r4, #8]
 800332a:	2380      	movs	r3, #128	; 0x80
 800332c:	01db      	lsls	r3, r3, #7
 800332e:	429a      	cmp	r2, r3
 8003330:	d010      	beq.n	8003354 <HAL_DMA_Init+0x70>
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003332:	4b11      	ldr	r3, [pc, #68]	; (8003378 <HAL_DMA_Init+0x94>)
 8003334:	6819      	ldr	r1, [r3, #0]
 8003336:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8003338:	221c      	movs	r2, #28
 800333a:	4015      	ands	r5, r2
 800333c:	200f      	movs	r0, #15
 800333e:	40a8      	lsls	r0, r5
 8003340:	4381      	bics	r1, r0
 8003342:	6019      	str	r1, [r3, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003344:	6819      	ldr	r1, [r3, #0]
 8003346:	6860      	ldr	r0, [r4, #4]
 8003348:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800334a:	402a      	ands	r2, r5
 800334c:	4090      	lsls	r0, r2
 800334e:	0002      	movs	r2, r0
 8003350:	430a      	orrs	r2, r1
 8003352:	601a      	str	r2, [r3, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003354:	2300      	movs	r3, #0
 8003356:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8003358:	2225      	movs	r2, #37	; 0x25
 800335a:	2101      	movs	r1, #1
 800335c:	54a1      	strb	r1, [r4, r2]
  hdma->Lock = HAL_UNLOCKED;
 800335e:	3a01      	subs	r2, #1
 8003360:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8003362:	2000      	movs	r0, #0
}
 8003364:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003366:	2001      	movs	r0, #1
 8003368:	e7fc      	b.n	8003364 <HAL_DMA_Init+0x80>
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	bffdfff8 	.word	0xbffdfff8
 8003370:	40020000 	.word	0x40020000
 8003374:	ffff800f 	.word	0xffff800f
 8003378:	400200a8 	.word	0x400200a8

0800337c <HAL_DMA_Start_IT>:
{
 800337c:	b570      	push	{r4, r5, r6, lr}
 800337e:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8003380:	2024      	movs	r0, #36	; 0x24
 8003382:	5c20      	ldrb	r0, [r4, r0]
 8003384:	2801      	cmp	r0, #1
 8003386:	d032      	beq.n	80033ee <HAL_DMA_Start_IT+0x72>
 8003388:	2024      	movs	r0, #36	; 0x24
 800338a:	2501      	movs	r5, #1
 800338c:	5425      	strb	r5, [r4, r0]
  if(HAL_DMA_STATE_READY == hdma->State)
 800338e:	3001      	adds	r0, #1
 8003390:	5c20      	ldrb	r0, [r4, r0]
 8003392:	2801      	cmp	r0, #1
 8003394:	d004      	beq.n	80033a0 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8003396:	2324      	movs	r3, #36	; 0x24
 8003398:	2200      	movs	r2, #0
 800339a:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 800339c:	2002      	movs	r0, #2
}
 800339e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80033a0:	3024      	adds	r0, #36	; 0x24
 80033a2:	3501      	adds	r5, #1
 80033a4:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033a6:	2000      	movs	r0, #0
 80033a8:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80033aa:	6825      	ldr	r5, [r4, #0]
 80033ac:	6828      	ldr	r0, [r5, #0]
 80033ae:	2601      	movs	r6, #1
 80033b0:	43b0      	bics	r0, r6
 80033b2:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033b4:	0020      	movs	r0, r4
 80033b6:	f7ff ff7d 	bl	80032b4 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 80033ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00b      	beq.n	80033d8 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033c0:	6822      	ldr	r2, [r4, #0]
 80033c2:	6813      	ldr	r3, [r2, #0]
 80033c4:	210e      	movs	r1, #14
 80033c6:	430b      	orrs	r3, r1
 80033c8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80033ca:	6822      	ldr	r2, [r4, #0]
 80033cc:	6813      	ldr	r3, [r2, #0]
 80033ce:	2101      	movs	r1, #1
 80033d0:	430b      	orrs	r3, r1
 80033d2:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033d4:	2000      	movs	r0, #0
 80033d6:	e7e2      	b.n	800339e <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033d8:	6822      	ldr	r2, [r4, #0]
 80033da:	6813      	ldr	r3, [r2, #0]
 80033dc:	2104      	movs	r1, #4
 80033de:	438b      	bics	r3, r1
 80033e0:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80033e2:	6822      	ldr	r2, [r4, #0]
 80033e4:	6813      	ldr	r3, [r2, #0]
 80033e6:	3106      	adds	r1, #6
 80033e8:	430b      	orrs	r3, r1
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	e7ed      	b.n	80033ca <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 80033ee:	2002      	movs	r0, #2
 80033f0:	e7d5      	b.n	800339e <HAL_DMA_Start_IT+0x22>

080033f2 <HAL_DMA_Abort>:
{
 80033f2:	b510      	push	{r4, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033f4:	2325      	movs	r3, #37	; 0x25
 80033f6:	5cc3      	ldrb	r3, [r0, r3]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d006      	beq.n	800340a <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033fc:	2304      	movs	r3, #4
 80033fe:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003400:	3320      	adds	r3, #32
 8003402:	2200      	movs	r2, #0
 8003404:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8003406:	2001      	movs	r0, #1
}
 8003408:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800340a:	6802      	ldr	r2, [r0, #0]
 800340c:	6813      	ldr	r3, [r2, #0]
 800340e:	210e      	movs	r1, #14
 8003410:	438b      	bics	r3, r1
 8003412:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003414:	6801      	ldr	r1, [r0, #0]
 8003416:	680a      	ldr	r2, [r1, #0]
 8003418:	2301      	movs	r3, #1
 800341a:	439a      	bics	r2, r3
 800341c:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800341e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003420:	221c      	movs	r2, #28
 8003422:	400a      	ands	r2, r1
 8003424:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003426:	001c      	movs	r4, r3
 8003428:	4094      	lsls	r4, r2
 800342a:	604c      	str	r4, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800342c:	2225      	movs	r2, #37	; 0x25
 800342e:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8003430:	3323      	adds	r3, #35	; 0x23
 8003432:	2200      	movs	r2, #0
 8003434:	54c2      	strb	r2, [r0, r3]
    return status;
 8003436:	2000      	movs	r0, #0
 8003438:	e7e6      	b.n	8003408 <HAL_DMA_Abort+0x16>

0800343a <HAL_DMA_Abort_IT>:
{
 800343a:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800343c:	2325      	movs	r3, #37	; 0x25
 800343e:	5cc3      	ldrb	r3, [r0, r3]
 8003440:	2b02      	cmp	r3, #2
 8003442:	d003      	beq.n	800344c <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003444:	2304      	movs	r3, #4
 8003446:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003448:	2001      	movs	r0, #1
}
 800344a:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800344c:	6802      	ldr	r2, [r0, #0]
 800344e:	6813      	ldr	r3, [r2, #0]
 8003450:	210e      	movs	r1, #14
 8003452:	438b      	bics	r3, r1
 8003454:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003456:	6801      	ldr	r1, [r0, #0]
 8003458:	680a      	ldr	r2, [r1, #0]
 800345a:	2301      	movs	r3, #1
 800345c:	439a      	bics	r2, r3
 800345e:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003460:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003462:	221c      	movs	r2, #28
 8003464:	400a      	ands	r2, r1
 8003466:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003468:	001c      	movs	r4, r3
 800346a:	4094      	lsls	r4, r2
 800346c:	604c      	str	r4, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800346e:	2225      	movs	r2, #37	; 0x25
 8003470:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8003472:	3323      	adds	r3, #35	; 0x23
 8003474:	2200      	movs	r2, #0
 8003476:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 8003478:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <HAL_DMA_Abort_IT+0x4a>
      hdma->XferAbortCallback(hdma);
 800347e:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003480:	2000      	movs	r0, #0
 8003482:	e7e2      	b.n	800344a <HAL_DMA_Abort_IT+0x10>
 8003484:	2000      	movs	r0, #0
 8003486:	e7e0      	b.n	800344a <HAL_DMA_Abort_IT+0x10>

08003488 <HAL_DMA_IRQHandler>:
{
 8003488:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800348a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800348c:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800348e:	6804      	ldr	r4, [r0, #0]
 8003490:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003492:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003494:	231c      	movs	r3, #28
 8003496:	4013      	ands	r3, r2
 8003498:	2204      	movs	r2, #4
 800349a:	409a      	lsls	r2, r3
 800349c:	4211      	tst	r1, r2
 800349e:	d014      	beq.n	80034ca <HAL_DMA_IRQHandler+0x42>
 80034a0:	076a      	lsls	r2, r5, #29
 80034a2:	d512      	bpl.n	80034ca <HAL_DMA_IRQHandler+0x42>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	069b      	lsls	r3, r3, #26
 80034a8:	d403      	bmi.n	80034b2 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034aa:	6823      	ldr	r3, [r4, #0]
 80034ac:	2204      	movs	r2, #4
 80034ae:	4393      	bics	r3, r2
 80034b0:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80034b2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80034b4:	221c      	movs	r2, #28
 80034b6:	401a      	ands	r2, r3
 80034b8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80034ba:	2304      	movs	r3, #4
 80034bc:	4093      	lsls	r3, r2
 80034be:	604b      	str	r3, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 80034c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d000      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x40>
        hdma->XferHalfCpltCallback(hdma);
 80034c6:	4798      	blx	r3
}
 80034c8:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80034ca:	2202      	movs	r2, #2
 80034cc:	409a      	lsls	r2, r3
 80034ce:	4211      	tst	r1, r2
 80034d0:	d01a      	beq.n	8003508 <HAL_DMA_IRQHandler+0x80>
 80034d2:	07aa      	lsls	r2, r5, #30
 80034d4:	d518      	bpl.n	8003508 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034d6:	6823      	ldr	r3, [r4, #0]
 80034d8:	069b      	lsls	r3, r3, #26
 80034da:	d406      	bmi.n	80034ea <HAL_DMA_IRQHandler+0x62>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034dc:	6823      	ldr	r3, [r4, #0]
 80034de:	220a      	movs	r2, #10
 80034e0:	4393      	bics	r3, r2
 80034e2:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80034e4:	2325      	movs	r3, #37	; 0x25
 80034e6:	3a09      	subs	r2, #9
 80034e8:	54c2      	strb	r2, [r0, r3]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80034ea:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80034ec:	221c      	movs	r2, #28
 80034ee:	401a      	ands	r2, r3
 80034f0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80034f2:	2302      	movs	r3, #2
 80034f4:	4093      	lsls	r3, r2
 80034f6:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 80034f8:	2324      	movs	r3, #36	; 0x24
 80034fa:	2200      	movs	r2, #0
 80034fc:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferCpltCallback != NULL)
 80034fe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0e1      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x40>
      hdma->XferCpltCallback(hdma);
 8003504:	4798      	blx	r3
 8003506:	e7df      	b.n	80034c8 <HAL_DMA_IRQHandler+0x40>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003508:	2208      	movs	r2, #8
 800350a:	409a      	lsls	r2, r3
 800350c:	4211      	tst	r1, r2
 800350e:	d0db      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x40>
 8003510:	072d      	lsls	r5, r5, #28
 8003512:	d5d9      	bpl.n	80034c8 <HAL_DMA_IRQHandler+0x40>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003514:	6823      	ldr	r3, [r4, #0]
 8003516:	220e      	movs	r2, #14
 8003518:	4393      	bics	r3, r2
 800351a:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800351c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800351e:	320e      	adds	r2, #14
 8003520:	401a      	ands	r2, r3
 8003522:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003524:	2301      	movs	r3, #1
 8003526:	001c      	movs	r4, r3
 8003528:	4094      	lsls	r4, r2
 800352a:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800352c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800352e:	2225      	movs	r2, #37	; 0x25
 8003530:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8003532:	3323      	adds	r3, #35	; 0x23
 8003534:	2200      	movs	r2, #0
 8003536:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8003538:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0c4      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x40>
      hdma->XferErrorCallback(hdma);
 800353e:	4798      	blx	r3
  return;
 8003540:	e7c2      	b.n	80034c8 <HAL_DMA_IRQHandler+0x40>
	...

08003544 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003544:	4b2b      	ldr	r3, [pc, #172]	; (80035f4 <FLASH_SetErrorCode+0xb0>)
 8003546:	6999      	ldr	r1, [r3, #24]
 8003548:	2280      	movs	r2, #128	; 0x80
 800354a:	0052      	lsls	r2, r2, #1
 800354c:	000b      	movs	r3, r1
 800354e:	4013      	ands	r3, r2
 8003550:	4211      	tst	r1, r2
 8003552:	d006      	beq.n	8003562 <FLASH_SetErrorCode+0x1e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003554:	4a28      	ldr	r2, [pc, #160]	; (80035f8 <FLASH_SetErrorCode+0xb4>)
 8003556:	6953      	ldr	r3, [r2, #20]
 8003558:	2102      	movs	r1, #2
 800355a:	430b      	orrs	r3, r1
 800355c:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 800355e:	2380      	movs	r3, #128	; 0x80
 8003560:	005b      	lsls	r3, r3, #1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8003562:	4a24      	ldr	r2, [pc, #144]	; (80035f4 <FLASH_SetErrorCode+0xb0>)
 8003564:	6992      	ldr	r2, [r2, #24]
 8003566:	0592      	lsls	r2, r2, #22
 8003568:	d507      	bpl.n	800357a <FLASH_SetErrorCode+0x36>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800356a:	4923      	ldr	r1, [pc, #140]	; (80035f8 <FLASH_SetErrorCode+0xb4>)
 800356c:	694a      	ldr	r2, [r1, #20]
 800356e:	2001      	movs	r0, #1
 8003570:	4302      	orrs	r2, r0
 8003572:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_PGAERR;
 8003574:	2280      	movs	r2, #128	; 0x80
 8003576:	0092      	lsls	r2, r2, #2
 8003578:	4313      	orrs	r3, r2
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800357a:	4a1e      	ldr	r2, [pc, #120]	; (80035f4 <FLASH_SetErrorCode+0xb0>)
 800357c:	6992      	ldr	r2, [r2, #24]
 800357e:	0552      	lsls	r2, r2, #21
 8003580:	d507      	bpl.n	8003592 <FLASH_SetErrorCode+0x4e>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8003582:	491d      	ldr	r1, [pc, #116]	; (80035f8 <FLASH_SetErrorCode+0xb4>)
 8003584:	694a      	ldr	r2, [r1, #20]
 8003586:	2008      	movs	r0, #8
 8003588:	4302      	orrs	r2, r0
 800358a:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_SIZERR;
 800358c:	2280      	movs	r2, #128	; 0x80
 800358e:	00d2      	lsls	r2, r2, #3
 8003590:	4313      	orrs	r3, r2
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003592:	4a18      	ldr	r2, [pc, #96]	; (80035f4 <FLASH_SetErrorCode+0xb0>)
 8003594:	6992      	ldr	r2, [r2, #24]
 8003596:	0512      	lsls	r2, r2, #20
 8003598:	d507      	bpl.n	80035aa <FLASH_SetErrorCode+0x66>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800359a:	4917      	ldr	r1, [pc, #92]	; (80035f8 <FLASH_SetErrorCode+0xb4>)
 800359c:	694a      	ldr	r2, [r1, #20]
 800359e:	2004      	movs	r0, #4
 80035a0:	4302      	orrs	r2, r0
 80035a2:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_OPTVERR;
 80035a4:	2280      	movs	r2, #128	; 0x80
 80035a6:	0112      	lsls	r2, r2, #4
 80035a8:	4313      	orrs	r3, r2
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 80035aa:	4a12      	ldr	r2, [pc, #72]	; (80035f4 <FLASH_SetErrorCode+0xb0>)
 80035ac:	6992      	ldr	r2, [r2, #24]
 80035ae:	0492      	lsls	r2, r2, #18
 80035b0:	d507      	bpl.n	80035c2 <FLASH_SetErrorCode+0x7e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80035b2:	4911      	ldr	r1, [pc, #68]	; (80035f8 <FLASH_SetErrorCode+0xb4>)
 80035b4:	694a      	ldr	r2, [r1, #20]
 80035b6:	2010      	movs	r0, #16
 80035b8:	4302      	orrs	r2, r0
 80035ba:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_RDERR;
 80035bc:	2280      	movs	r2, #128	; 0x80
 80035be:	0192      	lsls	r2, r2, #6
 80035c0:	4313      	orrs	r3, r2
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80035c2:	4a0c      	ldr	r2, [pc, #48]	; (80035f4 <FLASH_SetErrorCode+0xb0>)
 80035c4:	6992      	ldr	r2, [r2, #24]
 80035c6:	0392      	lsls	r2, r2, #14
 80035c8:	d505      	bpl.n	80035d6 <FLASH_SetErrorCode+0x92>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80035ca:	480b      	ldr	r0, [pc, #44]	; (80035f8 <FLASH_SetErrorCode+0xb4>)
 80035cc:	6942      	ldr	r2, [r0, #20]
 80035ce:	2120      	movs	r1, #32
 80035d0:	430a      	orrs	r2, r1
 80035d2:	6142      	str	r2, [r0, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 80035d4:	430b      	orrs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 80035d6:	4a07      	ldr	r2, [pc, #28]	; (80035f4 <FLASH_SetErrorCode+0xb0>)
 80035d8:	6992      	ldr	r2, [r2, #24]
 80035da:	03d2      	lsls	r2, r2, #15
 80035dc:	d507      	bpl.n	80035ee <FLASH_SetErrorCode+0xaa>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80035de:	4906      	ldr	r1, [pc, #24]	; (80035f8 <FLASH_SetErrorCode+0xb4>)
 80035e0:	694a      	ldr	r2, [r1, #20]
 80035e2:	2040      	movs	r0, #64	; 0x40
 80035e4:	4302      	orrs	r2, r0
 80035e6:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 80035e8:	2280      	movs	r2, #128	; 0x80
 80035ea:	0252      	lsls	r2, r2, #9
 80035ec:	4313      	orrs	r3, r2
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80035ee:	4a01      	ldr	r2, [pc, #4]	; (80035f4 <FLASH_SetErrorCode+0xb0>)
 80035f0:	6193      	str	r3, [r2, #24]
}  
 80035f2:	4770      	bx	lr
 80035f4:	40022000 	.word	0x40022000
 80035f8:	200006e8 	.word	0x200006e8

080035fc <FLASH_WaitForLastOperation>:
{
 80035fc:	b570      	push	{r4, r5, r6, lr}
 80035fe:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003600:	f7ff fa64 	bl	8002acc <HAL_GetTick>
 8003604:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003606:	4b1c      	ldr	r3, [pc, #112]	; (8003678 <FLASH_WaitForLastOperation+0x7c>)
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	07db      	lsls	r3, r3, #31
 800360c:	d50a      	bpl.n	8003624 <FLASH_WaitForLastOperation+0x28>
    if (Timeout != HAL_MAX_DELAY)
 800360e:	1c63      	adds	r3, r4, #1
 8003610:	d0f9      	beq.n	8003606 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003612:	2c00      	cmp	r4, #0
 8003614:	d004      	beq.n	8003620 <FLASH_WaitForLastOperation+0x24>
 8003616:	f7ff fa59 	bl	8002acc <HAL_GetTick>
 800361a:	1b40      	subs	r0, r0, r5
 800361c:	42a0      	cmp	r0, r4
 800361e:	d9f2      	bls.n	8003606 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8003620:	2003      	movs	r0, #3
 8003622:	e027      	b.n	8003674 <FLASH_WaitForLastOperation+0x78>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003624:	4b14      	ldr	r3, [pc, #80]	; (8003678 <FLASH_WaitForLastOperation+0x7c>)
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	079b      	lsls	r3, r3, #30
 800362a:	d502      	bpl.n	8003632 <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800362c:	4b12      	ldr	r3, [pc, #72]	; (8003678 <FLASH_WaitForLastOperation+0x7c>)
 800362e:	2202      	movs	r2, #2
 8003630:	619a      	str	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8003632:	4b11      	ldr	r3, [pc, #68]	; (8003678 <FLASH_WaitForLastOperation+0x7c>)
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	05db      	lsls	r3, r3, #23
 8003638:	d419      	bmi.n	800366e <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800363a:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <FLASH_WaitForLastOperation+0x7c>)
 800363c:	699b      	ldr	r3, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800363e:	059b      	lsls	r3, r3, #22
 8003640:	d415      	bmi.n	800366e <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8003642:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <FLASH_WaitForLastOperation+0x7c>)
 8003644:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8003646:	055b      	lsls	r3, r3, #21
 8003648:	d411      	bmi.n	800366e <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800364a:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <FLASH_WaitForLastOperation+0x7c>)
 800364c:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800364e:	051b      	lsls	r3, r3, #20
 8003650:	d40d      	bmi.n	800366e <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8003652:	4b09      	ldr	r3, [pc, #36]	; (8003678 <FLASH_WaitForLastOperation+0x7c>)
 8003654:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8003656:	049b      	lsls	r3, r3, #18
 8003658:	d409      	bmi.n	800366e <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800365a:	4b07      	ldr	r3, [pc, #28]	; (8003678 <FLASH_WaitForLastOperation+0x7c>)
 800365c:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800365e:	039b      	lsls	r3, r3, #14
 8003660:	d405      	bmi.n	800366e <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8003662:	4b05      	ldr	r3, [pc, #20]	; (8003678 <FLASH_WaitForLastOperation+0x7c>)
 8003664:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8003666:	03db      	lsls	r3, r3, #15
 8003668:	d401      	bmi.n	800366e <FLASH_WaitForLastOperation+0x72>
  return HAL_OK;
 800366a:	2000      	movs	r0, #0
 800366c:	e002      	b.n	8003674 <FLASH_WaitForLastOperation+0x78>
    FLASH_SetErrorCode();
 800366e:	f7ff ff69 	bl	8003544 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003672:	2001      	movs	r0, #1
}
 8003674:	bd70      	pop	{r4, r5, r6, pc}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	40022000 	.word	0x40022000

0800367c <HAL_FLASHEx_DATAEEPROM_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800367c:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_FLASHEx_DATAEEPROM_Unlock+0x30>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	07db      	lsls	r3, r3, #31
 8003682:	d50e      	bpl.n	80036a2 <HAL_FLASHEx_DATAEEPROM_Unlock+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003684:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003688:	b672      	cpsid	i
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800368a:	4b08      	ldr	r3, [pc, #32]	; (80036ac <HAL_FLASHEx_DATAEEPROM_Unlock+0x30>)
 800368c:	4908      	ldr	r1, [pc, #32]	; (80036b0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x34>)
 800368e:	60d9      	str	r1, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8003690:	4908      	ldr	r1, [pc, #32]	; (80036b4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x38>)
 8003692:	60d9      	str	r1, [r3, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003694:	f382 8810 	msr	PRIMASK, r2

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	07db      	lsls	r3, r3, #31
 800369c:	d403      	bmi.n	80036a6 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2a>
    {
      return HAL_ERROR;
    }
  }

  return HAL_OK;  
 800369e:	2000      	movs	r0, #0
 80036a0:	e000      	b.n	80036a4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>
 80036a2:	2000      	movs	r0, #0
}
 80036a4:	4770      	bx	lr
      return HAL_ERROR;
 80036a6:	2001      	movs	r0, #1
 80036a8:	e7fc      	b.n	80036a4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	40022000 	.word	0x40022000
 80036b0:	89abcdef 	.word	0x89abcdef
 80036b4:	02030405 	.word	0x02030405

080036b8 <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80036b8:	4a03      	ldr	r2, [pc, #12]	; (80036c8 <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
 80036ba:	6853      	ldr	r3, [r2, #4]
 80036bc:	2101      	movs	r1, #1
 80036be:	430b      	orrs	r3, r1
 80036c0:	6053      	str	r3, [r2, #4]
  
  return HAL_OK;
}
 80036c2:	2000      	movs	r0, #0
 80036c4:	4770      	bx	lr
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	40022000 	.word	0x40022000

080036cc <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80036cc:	b570      	push	{r4, r5, r6, lr}
 80036ce:	0006      	movs	r6, r0
 80036d0:	000d      	movs	r5, r1
 80036d2:	0014      	movs	r4, r2
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80036d4:	4b12      	ldr	r3, [pc, #72]	; (8003720 <HAL_FLASHEx_DATAEEPROM_Program+0x54>)
 80036d6:	7c1b      	ldrb	r3, [r3, #16]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d01f      	beq.n	800371c <HAL_FLASHEx_DATAEEPROM_Program+0x50>
 80036dc:	4b10      	ldr	r3, [pc, #64]	; (8003720 <HAL_FLASHEx_DATAEEPROM_Program+0x54>)
 80036de:	2201      	movs	r2, #1
 80036e0:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80036e2:	4810      	ldr	r0, [pc, #64]	; (8003724 <HAL_FLASHEx_DATAEEPROM_Program+0x58>)
 80036e4:	f7ff ff8a 	bl	80035fc <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 80036e8:	2800      	cmp	r0, #0
 80036ea:	d10c      	bne.n	8003706 <HAL_FLASHEx_DATAEEPROM_Program+0x3a>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80036ec:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <HAL_FLASHEx_DATAEEPROM_Program+0x54>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 80036f2:	2e02      	cmp	r6, #2
 80036f4:	d006      	beq.n	8003704 <HAL_FLASHEx_DATAEEPROM_Program+0x38>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 80036f6:	2e01      	cmp	r6, #1
 80036f8:	d009      	beq.n	800370e <HAL_FLASHEx_DATAEEPROM_Program+0x42>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 80036fa:	2e00      	cmp	r6, #0
 80036fc:	d10a      	bne.n	8003714 <HAL_FLASHEx_DATAEEPROM_Program+0x48>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 80036fe:	b2e4      	uxtb	r4, r4
 8003700:	702c      	strb	r4, [r5, #0]
 8003702:	e000      	b.n	8003706 <HAL_FLASHEx_DATAEEPROM_Program+0x3a>
      *(__IO uint32_t *)Address = Data;
 8003704:	602c      	str	r4, [r5, #0]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003706:	4b06      	ldr	r3, [pc, #24]	; (8003720 <HAL_FLASHEx_DATAEEPROM_Program+0x54>)
 8003708:	2200      	movs	r2, #0
 800370a:	741a      	strb	r2, [r3, #16]

  return status;
}
 800370c:	bd70      	pop	{r4, r5, r6, pc}
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800370e:	b2a4      	uxth	r4, r4
 8003710:	802c      	strh	r4, [r5, #0]
 8003712:	e7f8      	b.n	8003706 <HAL_FLASHEx_DATAEEPROM_Program+0x3a>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003714:	4803      	ldr	r0, [pc, #12]	; (8003724 <HAL_FLASHEx_DATAEEPROM_Program+0x58>)
 8003716:	f7ff ff71 	bl	80035fc <FLASH_WaitForLastOperation>
 800371a:	e7f4      	b.n	8003706 <HAL_FLASHEx_DATAEEPROM_Program+0x3a>
  __HAL_LOCK(&pFlash);
 800371c:	2002      	movs	r0, #2
 800371e:	e7f5      	b.n	800370c <HAL_FLASHEx_DATAEEPROM_Program+0x40>
 8003720:	200006e8 	.word	0x200006e8
 8003724:	0000c350 	.word	0x0000c350

08003728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003728:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00U;
 800372a:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800372c:	e056      	b.n	80037dc <HAL_GPIO_Init+0xb4>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800372e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003730:	005f      	lsls	r7, r3, #1
 8003732:	2403      	movs	r4, #3
 8003734:	40bc      	lsls	r4, r7
 8003736:	43a6      	bics	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003738:	68cc      	ldr	r4, [r1, #12]
 800373a:	40bc      	lsls	r4, r7
 800373c:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 800373e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003740:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003742:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003744:	684e      	ldr	r6, [r1, #4]
 8003746:	0936      	lsrs	r6, r6, #4
 8003748:	2201      	movs	r2, #1
 800374a:	4032      	ands	r2, r6
 800374c:	409a      	lsls	r2, r3
 800374e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8003750:	6042      	str	r2, [r0, #4]
 8003752:	e053      	b.n	80037fc <HAL_GPIO_Init+0xd4>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003754:	08de      	lsrs	r6, r3, #3
 8003756:	3608      	adds	r6, #8
 8003758:	00b6      	lsls	r6, r6, #2
 800375a:	5837      	ldr	r7, [r6, r0]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800375c:	3205      	adds	r2, #5
 800375e:	401a      	ands	r2, r3
 8003760:	0092      	lsls	r2, r2, #2
 8003762:	240f      	movs	r4, #15
 8003764:	4094      	lsls	r4, r2
 8003766:	43a7      	bics	r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003768:	690c      	ldr	r4, [r1, #16]
 800376a:	4094      	lsls	r4, r2
 800376c:	0022      	movs	r2, r4
 800376e:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 8003770:	5032      	str	r2, [r6, r0]
 8003772:	e056      	b.n	8003822 <HAL_GPIO_Init+0xfa>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003774:	2605      	movs	r6, #5
 8003776:	e000      	b.n	800377a <HAL_GPIO_Init+0x52>
 8003778:	2600      	movs	r6, #0
 800377a:	40a6      	lsls	r6, r4
 800377c:	0034      	movs	r4, r6
 800377e:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003780:	3202      	adds	r2, #2
 8003782:	0092      	lsls	r2, r2, #2
 8003784:	4e46      	ldr	r6, [pc, #280]	; (80038a0 <HAL_GPIO_Init+0x178>)
 8003786:	5194      	str	r4, [r2, r6]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003788:	4a46      	ldr	r2, [pc, #280]	; (80038a4 <HAL_GPIO_Init+0x17c>)
 800378a:	6817      	ldr	r7, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800378c:	43ea      	mvns	r2, r5
 800378e:	003e      	movs	r6, r7
 8003790:	43ae      	bics	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003792:	684c      	ldr	r4, [r1, #4]
 8003794:	03e4      	lsls	r4, r4, #15
 8003796:	d501      	bpl.n	800379c <HAL_GPIO_Init+0x74>
        {
          temp |= iocurrent;
 8003798:	003e      	movs	r6, r7
 800379a:	432e      	orrs	r6, r5
        }
        EXTI->IMR = temp;
 800379c:	4c41      	ldr	r4, [pc, #260]	; (80038a4 <HAL_GPIO_Init+0x17c>)
 800379e:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 80037a0:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80037a2:	003e      	movs	r6, r7
 80037a4:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037a6:	684c      	ldr	r4, [r1, #4]
 80037a8:	03a4      	lsls	r4, r4, #14
 80037aa:	d501      	bpl.n	80037b0 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 80037ac:	003e      	movs	r6, r7
 80037ae:	432e      	orrs	r6, r5
        }
        EXTI->EMR = temp;
 80037b0:	4c3c      	ldr	r4, [pc, #240]	; (80038a4 <HAL_GPIO_Init+0x17c>)
 80037b2:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037b4:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80037b6:	003e      	movs	r6, r7
 80037b8:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037ba:	684c      	ldr	r4, [r1, #4]
 80037bc:	02e4      	lsls	r4, r4, #11
 80037be:	d501      	bpl.n	80037c4 <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 80037c0:	003e      	movs	r6, r7
 80037c2:	432e      	orrs	r6, r5
        }
        EXTI->RTSR = temp;
 80037c4:	4c37      	ldr	r4, [pc, #220]	; (80038a4 <HAL_GPIO_Init+0x17c>)
 80037c6:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80037c8:	68e6      	ldr	r6, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80037ca:	4032      	ands	r2, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037cc:	684c      	ldr	r4, [r1, #4]
 80037ce:	02a4      	lsls	r4, r4, #10
 80037d0:	d501      	bpl.n	80037d6 <HAL_GPIO_Init+0xae>
        {
          temp |= iocurrent;
 80037d2:	002a      	movs	r2, r5
 80037d4:	4332      	orrs	r2, r6
        }
        EXTI->FTSR = temp;
 80037d6:	4c33      	ldr	r4, [pc, #204]	; (80038a4 <HAL_GPIO_Init+0x17c>)
 80037d8:	60e2      	str	r2, [r4, #12]
      }
    }
    position++;
 80037da:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 80037dc:	680c      	ldr	r4, [r1, #0]
 80037de:	0022      	movs	r2, r4
 80037e0:	40da      	lsrs	r2, r3
 80037e2:	d05c      	beq.n	800389e <HAL_GPIO_Init+0x176>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80037e4:	2201      	movs	r2, #1
 80037e6:	409a      	lsls	r2, r3
 80037e8:	0025      	movs	r5, r4
 80037ea:	4015      	ands	r5, r2
    if (iocurrent)
 80037ec:	4214      	tst	r4, r2
 80037ee:	d0f4      	beq.n	80037da <HAL_GPIO_Init+0xb2>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80037f0:	684e      	ldr	r6, [r1, #4]
 80037f2:	2403      	movs	r4, #3
 80037f4:	4034      	ands	r4, r6
 80037f6:	3c01      	subs	r4, #1
 80037f8:	2c01      	cmp	r4, #1
 80037fa:	d998      	bls.n	800372e <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037fc:	684c      	ldr	r4, [r1, #4]
 80037fe:	2203      	movs	r2, #3
 8003800:	4022      	ands	r2, r4
 8003802:	2a03      	cmp	r2, #3
 8003804:	d008      	beq.n	8003818 <HAL_GPIO_Init+0xf0>
        temp = GPIOx->PUPDR;
 8003806:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003808:	005e      	lsls	r6, r3, #1
 800380a:	2203      	movs	r2, #3
 800380c:	40b2      	lsls	r2, r6
 800380e:	4394      	bics	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003810:	688a      	ldr	r2, [r1, #8]
 8003812:	40b2      	lsls	r2, r6
 8003814:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8003816:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003818:	684c      	ldr	r4, [r1, #4]
 800381a:	2203      	movs	r2, #3
 800381c:	4022      	ands	r2, r4
 800381e:	2a02      	cmp	r2, #2
 8003820:	d098      	beq.n	8003754 <HAL_GPIO_Init+0x2c>
      temp = GPIOx->MODER;
 8003822:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003824:	005e      	lsls	r6, r3, #1
 8003826:	2203      	movs	r2, #3
 8003828:	0017      	movs	r7, r2
 800382a:	40b7      	lsls	r7, r6
 800382c:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800382e:	684f      	ldr	r7, [r1, #4]
 8003830:	403a      	ands	r2, r7
 8003832:	40b2      	lsls	r2, r6
 8003834:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8003836:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003838:	684c      	ldr	r4, [r1, #4]
 800383a:	22c0      	movs	r2, #192	; 0xc0
 800383c:	0292      	lsls	r2, r2, #10
 800383e:	4214      	tst	r4, r2
 8003840:	d0cb      	beq.n	80037da <HAL_GPIO_Init+0xb2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003842:	4c19      	ldr	r4, [pc, #100]	; (80038a8 <HAL_GPIO_Init+0x180>)
 8003844:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003846:	2601      	movs	r6, #1
 8003848:	4332      	orrs	r2, r6
 800384a:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 800384c:	089a      	lsrs	r2, r3, #2
 800384e:	1c94      	adds	r4, r2, #2
 8003850:	00a4      	lsls	r4, r4, #2
 8003852:	4e13      	ldr	r6, [pc, #76]	; (80038a0 <HAL_GPIO_Init+0x178>)
 8003854:	59a7      	ldr	r7, [r4, r6]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003856:	2403      	movs	r4, #3
 8003858:	401c      	ands	r4, r3
 800385a:	00a4      	lsls	r4, r4, #2
 800385c:	260f      	movs	r6, #15
 800385e:	40a6      	lsls	r6, r4
 8003860:	43b7      	bics	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003862:	26a0      	movs	r6, #160	; 0xa0
 8003864:	05f6      	lsls	r6, r6, #23
 8003866:	42b0      	cmp	r0, r6
 8003868:	d086      	beq.n	8003778 <HAL_GPIO_Init+0x50>
 800386a:	4e10      	ldr	r6, [pc, #64]	; (80038ac <HAL_GPIO_Init+0x184>)
 800386c:	42b0      	cmp	r0, r6
 800386e:	d00e      	beq.n	800388e <HAL_GPIO_Init+0x166>
 8003870:	4e0f      	ldr	r6, [pc, #60]	; (80038b0 <HAL_GPIO_Init+0x188>)
 8003872:	42b0      	cmp	r0, r6
 8003874:	d00d      	beq.n	8003892 <HAL_GPIO_Init+0x16a>
 8003876:	4e0f      	ldr	r6, [pc, #60]	; (80038b4 <HAL_GPIO_Init+0x18c>)
 8003878:	42b0      	cmp	r0, r6
 800387a:	d00c      	beq.n	8003896 <HAL_GPIO_Init+0x16e>
 800387c:	4e0e      	ldr	r6, [pc, #56]	; (80038b8 <HAL_GPIO_Init+0x190>)
 800387e:	42b0      	cmp	r0, r6
 8003880:	d00b      	beq.n	800389a <HAL_GPIO_Init+0x172>
 8003882:	4e0e      	ldr	r6, [pc, #56]	; (80038bc <HAL_GPIO_Init+0x194>)
 8003884:	42b0      	cmp	r0, r6
 8003886:	d100      	bne.n	800388a <HAL_GPIO_Init+0x162>
 8003888:	e774      	b.n	8003774 <HAL_GPIO_Init+0x4c>
 800388a:	2606      	movs	r6, #6
 800388c:	e775      	b.n	800377a <HAL_GPIO_Init+0x52>
 800388e:	2601      	movs	r6, #1
 8003890:	e773      	b.n	800377a <HAL_GPIO_Init+0x52>
 8003892:	2602      	movs	r6, #2
 8003894:	e771      	b.n	800377a <HAL_GPIO_Init+0x52>
 8003896:	2603      	movs	r6, #3
 8003898:	e76f      	b.n	800377a <HAL_GPIO_Init+0x52>
 800389a:	2604      	movs	r6, #4
 800389c:	e76d      	b.n	800377a <HAL_GPIO_Init+0x52>
  }
}
 800389e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038a0:	40010000 	.word	0x40010000
 80038a4:	40010400 	.word	0x40010400
 80038a8:	40021000 	.word	0x40021000
 80038ac:	50000400 	.word	0x50000400
 80038b0:	50000800 	.word	0x50000800
 80038b4:	50000c00 	.word	0x50000c00
 80038b8:	50001000 	.word	0x50001000
 80038bc:	50001c00 	.word	0x50001c00

080038c0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038c0:	6903      	ldr	r3, [r0, #16]
 80038c2:	420b      	tst	r3, r1
 80038c4:	d001      	beq.n	80038ca <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80038c6:	2001      	movs	r0, #1
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80038c8:	4770      	bx	lr
    bitstatus = GPIO_PIN_RESET;
 80038ca:	2000      	movs	r0, #0
 80038cc:	e7fc      	b.n	80038c8 <HAL_GPIO_ReadPin+0x8>

080038ce <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038ce:	2a00      	cmp	r2, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038d2:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80038d4:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80038d6:	6281      	str	r1, [r0, #40]	; 0x28
}
 80038d8:	e7fc      	b.n	80038d4 <HAL_GPIO_WritePin+0x6>
	...

080038dc <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80038dc:	b570      	push	{r4, r5, r6, lr}
 80038de:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80038e0:	d028      	beq.n	8003934 <HAL_IWDG_Init+0x58>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80038e2:	6803      	ldr	r3, [r0, #0]
 80038e4:	4a14      	ldr	r2, [pc, #80]	; (8003938 <HAL_IWDG_Init+0x5c>)
 80038e6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80038e8:	6803      	ldr	r3, [r0, #0]
 80038ea:	4a14      	ldr	r2, [pc, #80]	; (800393c <HAL_IWDG_Init+0x60>)
 80038ec:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80038ee:	6803      	ldr	r3, [r0, #0]
 80038f0:	6842      	ldr	r2, [r0, #4]
 80038f2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80038f4:	6803      	ldr	r3, [r0, #0]
 80038f6:	6882      	ldr	r2, [r0, #8]
 80038f8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80038fa:	f7ff f8e7 	bl	8002acc <HAL_GetTick>
 80038fe:	0005      	movs	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003900:	6822      	ldr	r2, [r4, #0]
 8003902:	68d3      	ldr	r3, [r2, #12]
 8003904:	075b      	lsls	r3, r3, #29
 8003906:	d00a      	beq.n	800391e <HAL_IWDG_Init+0x42>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003908:	f7ff f8e0 	bl	8002acc <HAL_GetTick>
 800390c:	1b40      	subs	r0, r0, r5
 800390e:	282a      	cmp	r0, #42	; 0x2a
 8003910:	d9f6      	bls.n	8003900 <HAL_IWDG_Init+0x24>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003912:	6823      	ldr	r3, [r4, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	075b      	lsls	r3, r3, #29
 8003918:	d0f2      	beq.n	8003900 <HAL_IWDG_Init+0x24>
      {
        return HAL_TIMEOUT;
 800391a:	2003      	movs	r0, #3
 800391c:	e00b      	b.n	8003936 <HAL_IWDG_Init+0x5a>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800391e:	6911      	ldr	r1, [r2, #16]
 8003920:	68e3      	ldr	r3, [r4, #12]
 8003922:	4299      	cmp	r1, r3
 8003924:	d002      	beq.n	800392c <HAL_IWDG_Init+0x50>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003926:	6113      	str	r3, [r2, #16]
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
 8003928:	2000      	movs	r0, #0
 800392a:	e004      	b.n	8003936 <HAL_IWDG_Init+0x5a>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800392c:	4b04      	ldr	r3, [pc, #16]	; (8003940 <HAL_IWDG_Init+0x64>)
 800392e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003930:	2000      	movs	r0, #0
 8003932:	e000      	b.n	8003936 <HAL_IWDG_Init+0x5a>
    return HAL_ERROR;
 8003934:	2001      	movs	r0, #1
}
 8003936:	bd70      	pop	{r4, r5, r6, pc}
 8003938:	0000cccc 	.word	0x0000cccc
 800393c:	00005555 	.word	0x00005555
 8003940:	0000aaaa 	.word	0x0000aaaa

08003944 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003944:	6803      	ldr	r3, [r0, #0]
 8003946:	4a02      	ldr	r2, [pc, #8]	; (8003950 <HAL_IWDG_Refresh+0xc>)
 8003948:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 800394a:	2000      	movs	r0, #0
 800394c:	4770      	bx	lr
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	0000aaaa 	.word	0x0000aaaa

08003954 <HAL_PWR_ConfigPVD>:
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 8003954:	4a1c      	ldr	r2, [pc, #112]	; (80039c8 <HAL_PWR_ConfigPVD+0x74>)
 8003956:	6813      	ldr	r3, [r2, #0]
 8003958:	21e0      	movs	r1, #224	; 0xe0
 800395a:	438b      	bics	r3, r1
 800395c:	6801      	ldr	r1, [r0, #0]
 800395e:	430b      	orrs	r3, r1
 8003960:	6013      	str	r3, [r2, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8003962:	4b1a      	ldr	r3, [pc, #104]	; (80039cc <HAL_PWR_ConfigPVD+0x78>)
 8003964:	6859      	ldr	r1, [r3, #4]
 8003966:	4a1a      	ldr	r2, [pc, #104]	; (80039d0 <HAL_PWR_ConfigPVD+0x7c>)
 8003968:	4011      	ands	r1, r2
 800396a:	6059      	str	r1, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800396c:	6819      	ldr	r1, [r3, #0]
 800396e:	4011      	ands	r1, r2
 8003970:	6019      	str	r1, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8003972:	68d9      	ldr	r1, [r3, #12]
 8003974:	4011      	ands	r1, r2
 8003976:	60d9      	str	r1, [r3, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8003978:	6899      	ldr	r1, [r3, #8]
 800397a:	400a      	ands	r2, r1
 800397c:	609a      	str	r2, [r3, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800397e:	6843      	ldr	r3, [r0, #4]
 8003980:	03db      	lsls	r3, r3, #15
 8003982:	d505      	bpl.n	8003990 <HAL_PWR_ConfigPVD+0x3c>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8003984:	4a11      	ldr	r2, [pc, #68]	; (80039cc <HAL_PWR_ConfigPVD+0x78>)
 8003986:	6811      	ldr	r1, [r2, #0]
 8003988:	2380      	movs	r3, #128	; 0x80
 800398a:	025b      	lsls	r3, r3, #9
 800398c:	430b      	orrs	r3, r1
 800398e:	6013      	str	r3, [r2, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8003990:	6843      	ldr	r3, [r0, #4]
 8003992:	039b      	lsls	r3, r3, #14
 8003994:	d505      	bpl.n	80039a2 <HAL_PWR_ConfigPVD+0x4e>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8003996:	4a0d      	ldr	r2, [pc, #52]	; (80039cc <HAL_PWR_ConfigPVD+0x78>)
 8003998:	6851      	ldr	r1, [r2, #4]
 800399a:	2380      	movs	r3, #128	; 0x80
 800399c:	025b      	lsls	r3, r3, #9
 800399e:	430b      	orrs	r3, r1
 80039a0:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80039a2:	6843      	ldr	r3, [r0, #4]
 80039a4:	07db      	lsls	r3, r3, #31
 80039a6:	d505      	bpl.n	80039b4 <HAL_PWR_ConfigPVD+0x60>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80039a8:	4a08      	ldr	r2, [pc, #32]	; (80039cc <HAL_PWR_ConfigPVD+0x78>)
 80039aa:	6891      	ldr	r1, [r2, #8]
 80039ac:	2380      	movs	r3, #128	; 0x80
 80039ae:	025b      	lsls	r3, r3, #9
 80039b0:	430b      	orrs	r3, r1
 80039b2:	6093      	str	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80039b4:	6843      	ldr	r3, [r0, #4]
 80039b6:	079b      	lsls	r3, r3, #30
 80039b8:	d505      	bpl.n	80039c6 <HAL_PWR_ConfigPVD+0x72>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80039ba:	4a04      	ldr	r2, [pc, #16]	; (80039cc <HAL_PWR_ConfigPVD+0x78>)
 80039bc:	68d1      	ldr	r1, [r2, #12]
 80039be:	2380      	movs	r3, #128	; 0x80
 80039c0:	025b      	lsls	r3, r3, #9
 80039c2:	430b      	orrs	r3, r1
 80039c4:	60d3      	str	r3, [r2, #12]
  }
}
 80039c6:	4770      	bx	lr
 80039c8:	40007000 	.word	0x40007000
 80039cc:	40010400 	.word	0x40010400
 80039d0:	fffeffff 	.word	0xfffeffff

080039d4 <HAL_PWR_EnablePVD>:
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR, PWR_CR_PVDE);
 80039d4:	4a02      	ldr	r2, [pc, #8]	; (80039e0 <HAL_PWR_EnablePVD+0xc>)
 80039d6:	6813      	ldr	r3, [r2, #0]
 80039d8:	2110      	movs	r1, #16
 80039da:	430b      	orrs	r3, r1
 80039dc:	6013      	str	r3, [r2, #0]
}
 80039de:	4770      	bx	lr
 80039e0:	40007000 	.word	0x40007000

080039e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e4:	b510      	push	{r4, lr}
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80039e6:	4b26      	ldr	r3, [pc, #152]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x9c>)
 80039e8:	68da      	ldr	r2, [r3, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039ea:	230c      	movs	r3, #12
 80039ec:	4013      	ands	r3, r2
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d042      	beq.n	8003a78 <HAL_RCC_GetSysClockFreq+0x94>
 80039f2:	2b0c      	cmp	r3, #12
 80039f4:	d011      	beq.n	8003a1a <HAL_RCC_GetSysClockFreq+0x36>
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d009      	beq.n	8003a0e <HAL_RCC_GetSysClockFreq+0x2a>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80039fa:	4b21      	ldr	r3, [pc, #132]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x9c>)
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	0b52      	lsrs	r2, r2, #13
 8003a00:	2307      	movs	r3, #7
 8003a02:	4013      	ands	r3, r2
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003a04:	3301      	adds	r3, #1
 8003a06:	2080      	movs	r0, #128	; 0x80
 8003a08:	0200      	lsls	r0, r0, #8
 8003a0a:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 8003a0c:	bd10      	pop	{r4, pc}
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003a0e:	4b1c      	ldr	r3, [pc, #112]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	06db      	lsls	r3, r3, #27
 8003a14:	d532      	bpl.n	8003a7c <HAL_RCC_GetSysClockFreq+0x98>
        sysclockfreq =  (HSI_VALUE >> 2);
 8003a16:	481b      	ldr	r0, [pc, #108]	; (8003a84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a18:	e7f8      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0x28>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003a1a:	0c91      	lsrs	r1, r2, #18
 8003a1c:	230f      	movs	r3, #15
 8003a1e:	400b      	ands	r3, r1
 8003a20:	4919      	ldr	r1, [pc, #100]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a22:	5cc8      	ldrb	r0, [r1, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003a24:	0d92      	lsrs	r2, r2, #22
 8003a26:	2303      	movs	r3, #3
 8003a28:	401a      	ands	r2, r3
 8003a2a:	1c54      	adds	r4, r2, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a2c:	4b14      	ldr	r3, [pc, #80]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	03db      	lsls	r3, r3, #15
 8003a32:	d509      	bpl.n	8003a48 <HAL_RCC_GetSysClockFreq+0x64>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003a34:	4a15      	ldr	r2, [pc, #84]	; (8003a8c <HAL_RCC_GetSysClockFreq+0xa8>)
 8003a36:	2300      	movs	r3, #0
 8003a38:	2100      	movs	r1, #0
 8003a3a:	f7fc fd55 	bl	80004e8 <__aeabi_lmul>
 8003a3e:	0022      	movs	r2, r4
 8003a40:	2300      	movs	r3, #0
 8003a42:	f7fc fd31 	bl	80004a8 <__aeabi_uldivmod>
 8003a46:	e7e1      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0x28>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003a48:	4b0d      	ldr	r3, [pc, #52]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	06db      	lsls	r3, r3, #27
 8003a4e:	d509      	bpl.n	8003a64 <HAL_RCC_GetSysClockFreq+0x80>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003a50:	4a0c      	ldr	r2, [pc, #48]	; (8003a84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a52:	2300      	movs	r3, #0
 8003a54:	2100      	movs	r1, #0
 8003a56:	f7fc fd47 	bl	80004e8 <__aeabi_lmul>
 8003a5a:	0022      	movs	r2, r4
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f7fc fd23 	bl	80004a8 <__aeabi_uldivmod>
 8003a62:	e7d3      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0x28>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003a64:	4a0a      	ldr	r2, [pc, #40]	; (8003a90 <HAL_RCC_GetSysClockFreq+0xac>)
 8003a66:	2300      	movs	r3, #0
 8003a68:	2100      	movs	r1, #0
 8003a6a:	f7fc fd3d 	bl	80004e8 <__aeabi_lmul>
 8003a6e:	0022      	movs	r2, r4
 8003a70:	2300      	movs	r3, #0
 8003a72:	f7fc fd19 	bl	80004a8 <__aeabi_uldivmod>
 8003a76:	e7c9      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0x28>
  switch (tmpreg & RCC_CFGR_SWS)
 8003a78:	4804      	ldr	r0, [pc, #16]	; (8003a8c <HAL_RCC_GetSysClockFreq+0xa8>)
 8003a7a:	e7c7      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0x28>
        sysclockfreq =  HSI_VALUE;
 8003a7c:	4804      	ldr	r0, [pc, #16]	; (8003a90 <HAL_RCC_GetSysClockFreq+0xac>)
  return sysclockfreq;
 8003a7e:	e7c5      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0x28>
 8003a80:	40021000 	.word	0x40021000
 8003a84:	003d0900 	.word	0x003d0900
 8003a88:	0800e4cc 	.word	0x0800e4cc
 8003a8c:	007a1200 	.word	0x007a1200
 8003a90:	00f42400 	.word	0x00f42400

08003a94 <HAL_RCC_OscConfig>:
{
 8003a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a96:	b083      	sub	sp, #12
 8003a98:	1e04      	subs	r4, r0, #0
  if(RCC_OscInitStruct == NULL)
 8003a9a:	d100      	bne.n	8003a9e <HAL_RCC_OscConfig+0xa>
 8003a9c:	e29f      	b.n	8003fde <HAL_RCC_OscConfig+0x54a>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a9e:	4bc5      	ldr	r3, [pc, #788]	; (8003db4 <HAL_RCC_OscConfig+0x320>)
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	250c      	movs	r5, #12
 8003aa4:	4015      	ands	r5, r2
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003aa6:	68de      	ldr	r6, [r3, #12]
 8003aa8:	2380      	movs	r3, #128	; 0x80
 8003aaa:	025b      	lsls	r3, r3, #9
 8003aac:	401e      	ands	r6, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aae:	6803      	ldr	r3, [r0, #0]
 8003ab0:	07db      	lsls	r3, r3, #31
 8003ab2:	d536      	bpl.n	8003b22 <HAL_RCC_OscConfig+0x8e>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ab4:	2d08      	cmp	r5, #8
 8003ab6:	d02c      	beq.n	8003b12 <HAL_RCC_OscConfig+0x7e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ab8:	2d0c      	cmp	r5, #12
 8003aba:	d028      	beq.n	8003b0e <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003abc:	6863      	ldr	r3, [r4, #4]
 8003abe:	2280      	movs	r2, #128	; 0x80
 8003ac0:	0252      	lsls	r2, r2, #9
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d055      	beq.n	8003b72 <HAL_RCC_OscConfig+0xde>
 8003ac6:	22a0      	movs	r2, #160	; 0xa0
 8003ac8:	02d2      	lsls	r2, r2, #11
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d058      	beq.n	8003b80 <HAL_RCC_OscConfig+0xec>
 8003ace:	4bb9      	ldr	r3, [pc, #740]	; (8003db4 <HAL_RCC_OscConfig+0x320>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	49b9      	ldr	r1, [pc, #740]	; (8003db8 <HAL_RCC_OscConfig+0x324>)
 8003ad4:	400a      	ands	r2, r1
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	2180      	movs	r1, #128	; 0x80
 8003adc:	0249      	lsls	r1, r1, #9
 8003ade:	400a      	ands	r2, r1
 8003ae0:	9201      	str	r2, [sp, #4]
 8003ae2:	9a01      	ldr	r2, [sp, #4]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	49b5      	ldr	r1, [pc, #724]	; (8003dbc <HAL_RCC_OscConfig+0x328>)
 8003ae8:	400a      	ands	r2, r1
 8003aea:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003aec:	6863      	ldr	r3, [r4, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d052      	beq.n	8003b98 <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();
 8003af2:	f7fe ffeb 	bl	8002acc <HAL_GetTick>
 8003af6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003af8:	4bae      	ldr	r3, [pc, #696]	; (8003db4 <HAL_RCC_OscConfig+0x320>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	039b      	lsls	r3, r3, #14
 8003afe:	d410      	bmi.n	8003b22 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b00:	f7fe ffe4 	bl	8002acc <HAL_GetTick>
 8003b04:	1bc0      	subs	r0, r0, r7
 8003b06:	2864      	cmp	r0, #100	; 0x64
 8003b08:	d9f6      	bls.n	8003af8 <HAL_RCC_OscConfig+0x64>
            return HAL_TIMEOUT;
 8003b0a:	2003      	movs	r0, #3
 8003b0c:	e268      	b.n	8003fe0 <HAL_RCC_OscConfig+0x54c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b0e:	2e00      	cmp	r6, #0
 8003b10:	d0d4      	beq.n	8003abc <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b12:	4ba8      	ldr	r3, [pc, #672]	; (8003db4 <HAL_RCC_OscConfig+0x320>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	039b      	lsls	r3, r3, #14
 8003b18:	d503      	bpl.n	8003b22 <HAL_RCC_OscConfig+0x8e>
 8003b1a:	6863      	ldr	r3, [r4, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d100      	bne.n	8003b22 <HAL_RCC_OscConfig+0x8e>
 8003b20:	e260      	b.n	8003fe4 <HAL_RCC_OscConfig+0x550>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	079b      	lsls	r3, r3, #30
 8003b26:	d56d      	bpl.n	8003c04 <HAL_RCC_OscConfig+0x170>
    hsi_state = RCC_OscInitStruct->HSIState;
 8003b28:	68e3      	ldr	r3, [r4, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003b2a:	069a      	lsls	r2, r3, #26
 8003b2c:	d505      	bpl.n	8003b3a <HAL_RCC_OscConfig+0xa6>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003b2e:	48a1      	ldr	r0, [pc, #644]	; (8003db4 <HAL_RCC_OscConfig+0x320>)
 8003b30:	6802      	ldr	r2, [r0, #0]
 8003b32:	2120      	movs	r1, #32
 8003b34:	430a      	orrs	r2, r1
 8003b36:	6002      	str	r2, [r0, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003b38:	438b      	bics	r3, r1
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b3a:	2d04      	cmp	r5, #4
 8003b3c:	d03c      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x124>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b3e:	2d0c      	cmp	r5, #12
 8003b40:	d038      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x120>
      if(hsi_state != RCC_HSI_OFF)
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d100      	bne.n	8003b48 <HAL_RCC_OscConfig+0xb4>
 8003b46:	e0b0      	b.n	8003caa <HAL_RCC_OscConfig+0x216>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003b48:	499a      	ldr	r1, [pc, #616]	; (8003db4 <HAL_RCC_OscConfig+0x320>)
 8003b4a:	680a      	ldr	r2, [r1, #0]
 8003b4c:	2009      	movs	r0, #9
 8003b4e:	4382      	bics	r2, r0
 8003b50:	4313      	orrs	r3, r2
 8003b52:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8003b54:	f7fe ffba 	bl	8002acc <HAL_GetTick>
 8003b58:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b5a:	4b96      	ldr	r3, [pc, #600]	; (8003db4 <HAL_RCC_OscConfig+0x320>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	075b      	lsls	r3, r3, #29
 8003b60:	d500      	bpl.n	8003b64 <HAL_RCC_OscConfig+0xd0>
 8003b62:	e099      	b.n	8003c98 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b64:	f7fe ffb2 	bl	8002acc <HAL_GetTick>
 8003b68:	1b80      	subs	r0, r0, r6
 8003b6a:	2802      	cmp	r0, #2
 8003b6c:	d9f5      	bls.n	8003b5a <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8003b6e:	2003      	movs	r0, #3
 8003b70:	e236      	b.n	8003fe0 <HAL_RCC_OscConfig+0x54c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b72:	4a90      	ldr	r2, [pc, #576]	; (8003db4 <HAL_RCC_OscConfig+0x320>)
 8003b74:	6811      	ldr	r1, [r2, #0]
 8003b76:	2380      	movs	r3, #128	; 0x80
 8003b78:	025b      	lsls	r3, r3, #9
 8003b7a:	430b      	orrs	r3, r1
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	e7b5      	b.n	8003aec <HAL_RCC_OscConfig+0x58>
 8003b80:	4b8c      	ldr	r3, [pc, #560]	; (8003db4 <HAL_RCC_OscConfig+0x320>)
 8003b82:	6819      	ldr	r1, [r3, #0]
 8003b84:	2280      	movs	r2, #128	; 0x80
 8003b86:	02d2      	lsls	r2, r2, #11
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	6819      	ldr	r1, [r3, #0]
 8003b8e:	2280      	movs	r2, #128	; 0x80
 8003b90:	0252      	lsls	r2, r2, #9
 8003b92:	430a      	orrs	r2, r1
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	e7a9      	b.n	8003aec <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 8003b98:	f7fe ff98 	bl	8002acc <HAL_GetTick>
 8003b9c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b9e:	4b85      	ldr	r3, [pc, #532]	; (8003db4 <HAL_RCC_OscConfig+0x320>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	039b      	lsls	r3, r3, #14
 8003ba4:	d5bd      	bpl.n	8003b22 <HAL_RCC_OscConfig+0x8e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ba6:	f7fe ff91 	bl	8002acc <HAL_GetTick>
 8003baa:	1bc0      	subs	r0, r0, r7
 8003bac:	2864      	cmp	r0, #100	; 0x64
 8003bae:	d9f6      	bls.n	8003b9e <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8003bb0:	2003      	movs	r0, #3
 8003bb2:	e215      	b.n	8003fe0 <HAL_RCC_OscConfig+0x54c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bb4:	2e00      	cmp	r6, #0
 8003bb6:	d1c4      	bne.n	8003b42 <HAL_RCC_OscConfig+0xae>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003bb8:	4a7e      	ldr	r2, [pc, #504]	; (8003db4 <HAL_RCC_OscConfig+0x320>)
 8003bba:	6812      	ldr	r2, [r2, #0]
 8003bbc:	0752      	lsls	r2, r2, #29
 8003bbe:	d502      	bpl.n	8003bc6 <HAL_RCC_OscConfig+0x132>
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d100      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x132>
 8003bc4:	e210      	b.n	8003fe8 <HAL_RCC_OscConfig+0x554>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc6:	4e7b      	ldr	r6, [pc, #492]	; (8003db4 <HAL_RCC_OscConfig+0x320>)
 8003bc8:	6872      	ldr	r2, [r6, #4]
 8003bca:	497d      	ldr	r1, [pc, #500]	; (8003dc0 <HAL_RCC_OscConfig+0x32c>)
 8003bcc:	400a      	ands	r2, r1
 8003bce:	6921      	ldr	r1, [r4, #16]
 8003bd0:	0209      	lsls	r1, r1, #8
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003bd6:	6832      	ldr	r2, [r6, #0]
 8003bd8:	2109      	movs	r1, #9
 8003bda:	438a      	bics	r2, r1
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003be0:	f7ff ff00 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8003be4:	68f2      	ldr	r2, [r6, #12]
 8003be6:	0912      	lsrs	r2, r2, #4
 8003be8:	230f      	movs	r3, #15
 8003bea:	4013      	ands	r3, r2
 8003bec:	4a75      	ldr	r2, [pc, #468]	; (8003dc4 <HAL_RCC_OscConfig+0x330>)
 8003bee:	5cd3      	ldrb	r3, [r2, r3]
 8003bf0:	40d8      	lsrs	r0, r3
 8003bf2:	4b75      	ldr	r3, [pc, #468]	; (8003dc8 <HAL_RCC_OscConfig+0x334>)
 8003bf4:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8003bf6:	4b75      	ldr	r3, [pc, #468]	; (8003dcc <HAL_RCC_OscConfig+0x338>)
 8003bf8:	6818      	ldr	r0, [r3, #0]
 8003bfa:	f005 f88f 	bl	8008d1c <HAL_InitTick>
      if(status != HAL_OK)
 8003bfe:	2800      	cmp	r0, #0
 8003c00:	d000      	beq.n	8003c04 <HAL_RCC_OscConfig+0x170>
 8003c02:	e1ed      	b.n	8003fe0 <HAL_RCC_OscConfig+0x54c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c04:	6823      	ldr	r3, [r4, #0]
 8003c06:	06db      	lsls	r3, r3, #27
 8003c08:	d52d      	bpl.n	8003c66 <HAL_RCC_OscConfig+0x1d2>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c0a:	2d00      	cmp	r5, #0
 8003c0c:	d160      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x23c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c0e:	4b69      	ldr	r3, [pc, #420]	; (8003db4 <HAL_RCC_OscConfig+0x320>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	059b      	lsls	r3, r3, #22
 8003c14:	d503      	bpl.n	8003c1e <HAL_RCC_OscConfig+0x18a>
 8003c16:	69e3      	ldr	r3, [r4, #28]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d100      	bne.n	8003c1e <HAL_RCC_OscConfig+0x18a>
 8003c1c:	e1e6      	b.n	8003fec <HAL_RCC_OscConfig+0x558>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c1e:	4a65      	ldr	r2, [pc, #404]	; (8003db4 <HAL_RCC_OscConfig+0x320>)
 8003c20:	6853      	ldr	r3, [r2, #4]
 8003c22:	496b      	ldr	r1, [pc, #428]	; (8003dd0 <HAL_RCC_OscConfig+0x33c>)
 8003c24:	400b      	ands	r3, r1
 8003c26:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c2c:	6853      	ldr	r3, [r2, #4]
 8003c2e:	021b      	lsls	r3, r3, #8
 8003c30:	0a1b      	lsrs	r3, r3, #8
 8003c32:	6a21      	ldr	r1, [r4, #32]
 8003c34:	0609      	lsls	r1, r1, #24
 8003c36:	430b      	orrs	r3, r1
 8003c38:	6053      	str	r3, [r2, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c3a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003c3c:	0b49      	lsrs	r1, r1, #13
 8003c3e:	3101      	adds	r1, #1
 8003c40:	2380      	movs	r3, #128	; 0x80
 8003c42:	021b      	lsls	r3, r3, #8
 8003c44:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003c46:	68d1      	ldr	r1, [r2, #12]
 8003c48:	0909      	lsrs	r1, r1, #4
 8003c4a:	220f      	movs	r2, #15
 8003c4c:	400a      	ands	r2, r1
 8003c4e:	495d      	ldr	r1, [pc, #372]	; (8003dc4 <HAL_RCC_OscConfig+0x330>)
 8003c50:	5c8a      	ldrb	r2, [r1, r2]
 8003c52:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c54:	4a5c      	ldr	r2, [pc, #368]	; (8003dc8 <HAL_RCC_OscConfig+0x334>)
 8003c56:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8003c58:	4b5c      	ldr	r3, [pc, #368]	; (8003dcc <HAL_RCC_OscConfig+0x338>)
 8003c5a:	6818      	ldr	r0, [r3, #0]
 8003c5c:	f005 f85e 	bl	8008d1c <HAL_InitTick>
        if(status != HAL_OK)
 8003c60:	2800      	cmp	r0, #0
 8003c62:	d000      	beq.n	8003c66 <HAL_RCC_OscConfig+0x1d2>
 8003c64:	e1bc      	b.n	8003fe0 <HAL_RCC_OscConfig+0x54c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	071b      	lsls	r3, r3, #28
 8003c6a:	d57d      	bpl.n	8003d68 <HAL_RCC_OscConfig+0x2d4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c6c:	6963      	ldr	r3, [r4, #20]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d067      	beq.n	8003d42 <HAL_RCC_OscConfig+0x2ae>
      __HAL_RCC_LSI_ENABLE();
 8003c72:	4a50      	ldr	r2, [pc, #320]	; (8003db4 <HAL_RCC_OscConfig+0x320>)
 8003c74:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003c76:	2101      	movs	r1, #1
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003c7c:	f7fe ff26 	bl	8002acc <HAL_GetTick>
 8003c80:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c82:	4b4c      	ldr	r3, [pc, #304]	; (8003db4 <HAL_RCC_OscConfig+0x320>)
 8003c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c86:	079b      	lsls	r3, r3, #30
 8003c88:	d46e      	bmi.n	8003d68 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c8a:	f7fe ff1f 	bl	8002acc <HAL_GetTick>
 8003c8e:	1b80      	subs	r0, r0, r6
 8003c90:	2802      	cmp	r0, #2
 8003c92:	d9f6      	bls.n	8003c82 <HAL_RCC_OscConfig+0x1ee>
          return HAL_TIMEOUT;
 8003c94:	2003      	movs	r0, #3
 8003c96:	e1a3      	b.n	8003fe0 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c98:	4946      	ldr	r1, [pc, #280]	; (8003db4 <HAL_RCC_OscConfig+0x320>)
 8003c9a:	684b      	ldr	r3, [r1, #4]
 8003c9c:	4a48      	ldr	r2, [pc, #288]	; (8003dc0 <HAL_RCC_OscConfig+0x32c>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	6922      	ldr	r2, [r4, #16]
 8003ca2:	0212      	lsls	r2, r2, #8
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	604b      	str	r3, [r1, #4]
 8003ca8:	e7ac      	b.n	8003c04 <HAL_RCC_OscConfig+0x170>
        __HAL_RCC_HSI_DISABLE();
 8003caa:	4a42      	ldr	r2, [pc, #264]	; (8003db4 <HAL_RCC_OscConfig+0x320>)
 8003cac:	6813      	ldr	r3, [r2, #0]
 8003cae:	2101      	movs	r1, #1
 8003cb0:	438b      	bics	r3, r1
 8003cb2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003cb4:	f7fe ff0a 	bl	8002acc <HAL_GetTick>
 8003cb8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003cba:	4b3e      	ldr	r3, [pc, #248]	; (8003db4 <HAL_RCC_OscConfig+0x320>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	075b      	lsls	r3, r3, #29
 8003cc0:	d5a0      	bpl.n	8003c04 <HAL_RCC_OscConfig+0x170>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cc2:	f7fe ff03 	bl	8002acc <HAL_GetTick>
 8003cc6:	1b80      	subs	r0, r0, r6
 8003cc8:	2802      	cmp	r0, #2
 8003cca:	d9f6      	bls.n	8003cba <HAL_RCC_OscConfig+0x226>
            return HAL_TIMEOUT;
 8003ccc:	2003      	movs	r0, #3
 8003cce:	e187      	b.n	8003fe0 <HAL_RCC_OscConfig+0x54c>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cd0:	69e3      	ldr	r3, [r4, #28]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d022      	beq.n	8003d1c <HAL_RCC_OscConfig+0x288>
        __HAL_RCC_MSI_ENABLE();
 8003cd6:	4a37      	ldr	r2, [pc, #220]	; (8003db4 <HAL_RCC_OscConfig+0x320>)
 8003cd8:	6811      	ldr	r1, [r2, #0]
 8003cda:	2380      	movs	r3, #128	; 0x80
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	430b      	orrs	r3, r1
 8003ce0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003ce2:	f7fe fef3 	bl	8002acc <HAL_GetTick>
 8003ce6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003ce8:	4b32      	ldr	r3, [pc, #200]	; (8003db4 <HAL_RCC_OscConfig+0x320>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	059b      	lsls	r3, r3, #22
 8003cee:	d406      	bmi.n	8003cfe <HAL_RCC_OscConfig+0x26a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cf0:	f7fe feec 	bl	8002acc <HAL_GetTick>
 8003cf4:	1b80      	subs	r0, r0, r6
 8003cf6:	2802      	cmp	r0, #2
 8003cf8:	d9f6      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x254>
            return HAL_TIMEOUT;
 8003cfa:	2003      	movs	r0, #3
 8003cfc:	e170      	b.n	8003fe0 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cfe:	4a2d      	ldr	r2, [pc, #180]	; (8003db4 <HAL_RCC_OscConfig+0x320>)
 8003d00:	6853      	ldr	r3, [r2, #4]
 8003d02:	4933      	ldr	r1, [pc, #204]	; (8003dd0 <HAL_RCC_OscConfig+0x33c>)
 8003d04:	400b      	ands	r3, r1
 8003d06:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d0c:	6853      	ldr	r3, [r2, #4]
 8003d0e:	021b      	lsls	r3, r3, #8
 8003d10:	0a1b      	lsrs	r3, r3, #8
 8003d12:	6a21      	ldr	r1, [r4, #32]
 8003d14:	0609      	lsls	r1, r1, #24
 8003d16:	430b      	orrs	r3, r1
 8003d18:	6053      	str	r3, [r2, #4]
 8003d1a:	e7a4      	b.n	8003c66 <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_MSI_DISABLE();
 8003d1c:	4a25      	ldr	r2, [pc, #148]	; (8003db4 <HAL_RCC_OscConfig+0x320>)
 8003d1e:	6813      	ldr	r3, [r2, #0]
 8003d20:	492c      	ldr	r1, [pc, #176]	; (8003dd4 <HAL_RCC_OscConfig+0x340>)
 8003d22:	400b      	ands	r3, r1
 8003d24:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003d26:	f7fe fed1 	bl	8002acc <HAL_GetTick>
 8003d2a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d2c:	4b21      	ldr	r3, [pc, #132]	; (8003db4 <HAL_RCC_OscConfig+0x320>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	059b      	lsls	r3, r3, #22
 8003d32:	d598      	bpl.n	8003c66 <HAL_RCC_OscConfig+0x1d2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d34:	f7fe feca 	bl	8002acc <HAL_GetTick>
 8003d38:	1b80      	subs	r0, r0, r6
 8003d3a:	2802      	cmp	r0, #2
 8003d3c:	d9f6      	bls.n	8003d2c <HAL_RCC_OscConfig+0x298>
            return HAL_TIMEOUT;
 8003d3e:	2003      	movs	r0, #3
 8003d40:	e14e      	b.n	8003fe0 <HAL_RCC_OscConfig+0x54c>
      __HAL_RCC_LSI_DISABLE();
 8003d42:	4a1c      	ldr	r2, [pc, #112]	; (8003db4 <HAL_RCC_OscConfig+0x320>)
 8003d44:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003d46:	2101      	movs	r1, #1
 8003d48:	438b      	bics	r3, r1
 8003d4a:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003d4c:	f7fe febe 	bl	8002acc <HAL_GetTick>
 8003d50:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d52:	4b18      	ldr	r3, [pc, #96]	; (8003db4 <HAL_RCC_OscConfig+0x320>)
 8003d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d56:	079b      	lsls	r3, r3, #30
 8003d58:	d506      	bpl.n	8003d68 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d5a:	f7fe feb7 	bl	8002acc <HAL_GetTick>
 8003d5e:	1b80      	subs	r0, r0, r6
 8003d60:	2802      	cmp	r0, #2
 8003d62:	d9f6      	bls.n	8003d52 <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 8003d64:	2003      	movs	r0, #3
 8003d66:	e13b      	b.n	8003fe0 <HAL_RCC_OscConfig+0x54c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d68:	6823      	ldr	r3, [r4, #0]
 8003d6a:	075b      	lsls	r3, r3, #29
 8003d6c:	d400      	bmi.n	8003d70 <HAL_RCC_OscConfig+0x2dc>
 8003d6e:	e08e      	b.n	8003e8e <HAL_RCC_OscConfig+0x3fa>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d70:	4b10      	ldr	r3, [pc, #64]	; (8003db4 <HAL_RCC_OscConfig+0x320>)
 8003d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	d41b      	bmi.n	8003db0 <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d78:	4a0e      	ldr	r2, [pc, #56]	; (8003db4 <HAL_RCC_OscConfig+0x320>)
 8003d7a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8003d7c:	2380      	movs	r3, #128	; 0x80
 8003d7e:	055b      	lsls	r3, r3, #21
 8003d80:	430b      	orrs	r3, r1
 8003d82:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 8003d84:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d86:	4b14      	ldr	r3, [pc, #80]	; (8003dd8 <HAL_RCC_OscConfig+0x344>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	05db      	lsls	r3, r3, #23
 8003d8c:	d528      	bpl.n	8003de0 <HAL_RCC_OscConfig+0x34c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d8e:	68a3      	ldr	r3, [r4, #8]
 8003d90:	2280      	movs	r2, #128	; 0x80
 8003d92:	0052      	lsls	r2, r2, #1
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d037      	beq.n	8003e08 <HAL_RCC_OscConfig+0x374>
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d14d      	bne.n	8003e38 <HAL_RCC_OscConfig+0x3a4>
 8003d9c:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <HAL_RCC_OscConfig+0x320>)
 8003d9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003da0:	490c      	ldr	r1, [pc, #48]	; (8003dd4 <HAL_RCC_OscConfig+0x340>)
 8003da2:	400a      	ands	r2, r1
 8003da4:	651a      	str	r2, [r3, #80]	; 0x50
 8003da6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003da8:	490c      	ldr	r1, [pc, #48]	; (8003ddc <HAL_RCC_OscConfig+0x348>)
 8003daa:	400a      	ands	r2, r1
 8003dac:	651a      	str	r2, [r3, #80]	; 0x50
 8003dae:	e031      	b.n	8003e14 <HAL_RCC_OscConfig+0x380>
    FlagStatus       pwrclkchanged = RESET;
 8003db0:	2600      	movs	r6, #0
 8003db2:	e7e8      	b.n	8003d86 <HAL_RCC_OscConfig+0x2f2>
 8003db4:	40021000 	.word	0x40021000
 8003db8:	fffeffff 	.word	0xfffeffff
 8003dbc:	fffbffff 	.word	0xfffbffff
 8003dc0:	ffffe0ff 	.word	0xffffe0ff
 8003dc4:	0800e4b4 	.word	0x0800e4b4
 8003dc8:	2000000c 	.word	0x2000000c
 8003dcc:	20000004 	.word	0x20000004
 8003dd0:	ffff1fff 	.word	0xffff1fff
 8003dd4:	fffffeff 	.word	0xfffffeff
 8003dd8:	40007000 	.word	0x40007000
 8003ddc:	fffffbff 	.word	0xfffffbff
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003de0:	4a88      	ldr	r2, [pc, #544]	; (8004004 <HAL_RCC_OscConfig+0x570>)
 8003de2:	6811      	ldr	r1, [r2, #0]
 8003de4:	2380      	movs	r3, #128	; 0x80
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	430b      	orrs	r3, r1
 8003dea:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003dec:	f7fe fe6e 	bl	8002acc <HAL_GetTick>
 8003df0:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df2:	4b84      	ldr	r3, [pc, #528]	; (8004004 <HAL_RCC_OscConfig+0x570>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	05db      	lsls	r3, r3, #23
 8003df8:	d4c9      	bmi.n	8003d8e <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dfa:	f7fe fe67 	bl	8002acc <HAL_GetTick>
 8003dfe:	1bc0      	subs	r0, r0, r7
 8003e00:	2864      	cmp	r0, #100	; 0x64
 8003e02:	d9f6      	bls.n	8003df2 <HAL_RCC_OscConfig+0x35e>
          return HAL_TIMEOUT;
 8003e04:	2003      	movs	r0, #3
 8003e06:	e0eb      	b.n	8003fe0 <HAL_RCC_OscConfig+0x54c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e08:	4a7f      	ldr	r2, [pc, #508]	; (8004008 <HAL_RCC_OscConfig+0x574>)
 8003e0a:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8003e0c:	2380      	movs	r3, #128	; 0x80
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	430b      	orrs	r3, r1
 8003e12:	6513      	str	r3, [r2, #80]	; 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e14:	68a3      	ldr	r3, [r4, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d028      	beq.n	8003e6c <HAL_RCC_OscConfig+0x3d8>
      tickstart = HAL_GetTick();
 8003e1a:	f7fe fe57 	bl	8002acc <HAL_GetTick>
 8003e1e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e20:	4b79      	ldr	r3, [pc, #484]	; (8004008 <HAL_RCC_OscConfig+0x574>)
 8003e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e24:	059b      	lsls	r3, r3, #22
 8003e26:	d430      	bmi.n	8003e8a <HAL_RCC_OscConfig+0x3f6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e28:	f7fe fe50 	bl	8002acc <HAL_GetTick>
 8003e2c:	1bc0      	subs	r0, r0, r7
 8003e2e:	4b77      	ldr	r3, [pc, #476]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003e30:	4298      	cmp	r0, r3
 8003e32:	d9f5      	bls.n	8003e20 <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 8003e34:	2003      	movs	r0, #3
 8003e36:	e0d3      	b.n	8003fe0 <HAL_RCC_OscConfig+0x54c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e38:	22a0      	movs	r2, #160	; 0xa0
 8003e3a:	00d2      	lsls	r2, r2, #3
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d009      	beq.n	8003e54 <HAL_RCC_OscConfig+0x3c0>
 8003e40:	4b71      	ldr	r3, [pc, #452]	; (8004008 <HAL_RCC_OscConfig+0x574>)
 8003e42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e44:	4972      	ldr	r1, [pc, #456]	; (8004010 <HAL_RCC_OscConfig+0x57c>)
 8003e46:	400a      	ands	r2, r1
 8003e48:	651a      	str	r2, [r3, #80]	; 0x50
 8003e4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e4c:	4971      	ldr	r1, [pc, #452]	; (8004014 <HAL_RCC_OscConfig+0x580>)
 8003e4e:	400a      	ands	r2, r1
 8003e50:	651a      	str	r2, [r3, #80]	; 0x50
 8003e52:	e7df      	b.n	8003e14 <HAL_RCC_OscConfig+0x380>
 8003e54:	4b6c      	ldr	r3, [pc, #432]	; (8004008 <HAL_RCC_OscConfig+0x574>)
 8003e56:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003e58:	3a01      	subs	r2, #1
 8003e5a:	3aff      	subs	r2, #255	; 0xff
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	651a      	str	r2, [r3, #80]	; 0x50
 8003e60:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003e62:	2280      	movs	r2, #128	; 0x80
 8003e64:	0052      	lsls	r2, r2, #1
 8003e66:	430a      	orrs	r2, r1
 8003e68:	651a      	str	r2, [r3, #80]	; 0x50
 8003e6a:	e7d3      	b.n	8003e14 <HAL_RCC_OscConfig+0x380>
      tickstart = HAL_GetTick();
 8003e6c:	f7fe fe2e 	bl	8002acc <HAL_GetTick>
 8003e70:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e72:	4b65      	ldr	r3, [pc, #404]	; (8004008 <HAL_RCC_OscConfig+0x574>)
 8003e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e76:	059b      	lsls	r3, r3, #22
 8003e78:	d507      	bpl.n	8003e8a <HAL_RCC_OscConfig+0x3f6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e7a:	f7fe fe27 	bl	8002acc <HAL_GetTick>
 8003e7e:	1bc0      	subs	r0, r0, r7
 8003e80:	4b62      	ldr	r3, [pc, #392]	; (800400c <HAL_RCC_OscConfig+0x578>)
 8003e82:	4298      	cmp	r0, r3
 8003e84:	d9f5      	bls.n	8003e72 <HAL_RCC_OscConfig+0x3de>
          return HAL_TIMEOUT;
 8003e86:	2003      	movs	r0, #3
 8003e88:	e0aa      	b.n	8003fe0 <HAL_RCC_OscConfig+0x54c>
    if(pwrclkchanged == SET)
 8003e8a:	2e01      	cmp	r6, #1
 8003e8c:	d021      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x43e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	069b      	lsls	r3, r3, #26
 8003e92:	d53c      	bpl.n	8003f0e <HAL_RCC_OscConfig+0x47a>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e94:	69a3      	ldr	r3, [r4, #24]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d021      	beq.n	8003ede <HAL_RCC_OscConfig+0x44a>
        __HAL_RCC_HSI48_ENABLE();
 8003e9a:	4b5b      	ldr	r3, [pc, #364]	; (8004008 <HAL_RCC_OscConfig+0x574>)
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	609a      	str	r2, [r3, #8]
 8003ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	635a      	str	r2, [r3, #52]	; 0x34
 8003eaa:	4a5b      	ldr	r2, [pc, #364]	; (8004018 <HAL_RCC_OscConfig+0x584>)
 8003eac:	6a11      	ldr	r1, [r2, #32]
 8003eae:	2380      	movs	r3, #128	; 0x80
 8003eb0:	019b      	lsls	r3, r3, #6
 8003eb2:	430b      	orrs	r3, r1
 8003eb4:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003eb6:	f7fe fe09 	bl	8002acc <HAL_GetTick>
 8003eba:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ebc:	4b52      	ldr	r3, [pc, #328]	; (8004008 <HAL_RCC_OscConfig+0x574>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	079b      	lsls	r3, r3, #30
 8003ec2:	d424      	bmi.n	8003f0e <HAL_RCC_OscConfig+0x47a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ec4:	f7fe fe02 	bl	8002acc <HAL_GetTick>
 8003ec8:	1b80      	subs	r0, r0, r6
 8003eca:	2802      	cmp	r0, #2
 8003ecc:	d9f6      	bls.n	8003ebc <HAL_RCC_OscConfig+0x428>
            return HAL_TIMEOUT;
 8003ece:	2003      	movs	r0, #3
 8003ed0:	e086      	b.n	8003fe0 <HAL_RCC_OscConfig+0x54c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ed2:	4a4d      	ldr	r2, [pc, #308]	; (8004008 <HAL_RCC_OscConfig+0x574>)
 8003ed4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003ed6:	4951      	ldr	r1, [pc, #324]	; (800401c <HAL_RCC_OscConfig+0x588>)
 8003ed8:	400b      	ands	r3, r1
 8003eda:	6393      	str	r3, [r2, #56]	; 0x38
 8003edc:	e7d7      	b.n	8003e8e <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI48_DISABLE();
 8003ede:	4a4a      	ldr	r2, [pc, #296]	; (8004008 <HAL_RCC_OscConfig+0x574>)
 8003ee0:	6893      	ldr	r3, [r2, #8]
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	438b      	bics	r3, r1
 8003ee6:	6093      	str	r3, [r2, #8]
 8003ee8:	4a4b      	ldr	r2, [pc, #300]	; (8004018 <HAL_RCC_OscConfig+0x584>)
 8003eea:	6a13      	ldr	r3, [r2, #32]
 8003eec:	494c      	ldr	r1, [pc, #304]	; (8004020 <HAL_RCC_OscConfig+0x58c>)
 8003eee:	400b      	ands	r3, r1
 8003ef0:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003ef2:	f7fe fdeb 	bl	8002acc <HAL_GetTick>
 8003ef6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ef8:	4b43      	ldr	r3, [pc, #268]	; (8004008 <HAL_RCC_OscConfig+0x574>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	079b      	lsls	r3, r3, #30
 8003efe:	d506      	bpl.n	8003f0e <HAL_RCC_OscConfig+0x47a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f00:	f7fe fde4 	bl	8002acc <HAL_GetTick>
 8003f04:	1b80      	subs	r0, r0, r6
 8003f06:	2802      	cmp	r0, #2
 8003f08:	d9f6      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x464>
            return HAL_TIMEOUT;
 8003f0a:	2003      	movs	r0, #3
 8003f0c:	e068      	b.n	8003fe0 <HAL_RCC_OscConfig+0x54c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d100      	bne.n	8003f16 <HAL_RCC_OscConfig+0x482>
 8003f14:	e06c      	b.n	8003ff0 <HAL_RCC_OscConfig+0x55c>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f16:	2d0c      	cmp	r5, #12
 8003f18:	d049      	beq.n	8003fae <HAL_RCC_OscConfig+0x51a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d012      	beq.n	8003f44 <HAL_RCC_OscConfig+0x4b0>
        __HAL_RCC_PLL_DISABLE();
 8003f1e:	4a3a      	ldr	r2, [pc, #232]	; (8004008 <HAL_RCC_OscConfig+0x574>)
 8003f20:	6813      	ldr	r3, [r2, #0]
 8003f22:	4940      	ldr	r1, [pc, #256]	; (8004024 <HAL_RCC_OscConfig+0x590>)
 8003f24:	400b      	ands	r3, r1
 8003f26:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003f28:	f7fe fdd0 	bl	8002acc <HAL_GetTick>
 8003f2c:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003f2e:	4b36      	ldr	r3, [pc, #216]	; (8004008 <HAL_RCC_OscConfig+0x574>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	019b      	lsls	r3, r3, #6
 8003f34:	d539      	bpl.n	8003faa <HAL_RCC_OscConfig+0x516>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f36:	f7fe fdc9 	bl	8002acc <HAL_GetTick>
 8003f3a:	1b00      	subs	r0, r0, r4
 8003f3c:	2802      	cmp	r0, #2
 8003f3e:	d9f6      	bls.n	8003f2e <HAL_RCC_OscConfig+0x49a>
            return HAL_TIMEOUT;
 8003f40:	2003      	movs	r0, #3
 8003f42:	e04d      	b.n	8003fe0 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_PLL_DISABLE();
 8003f44:	4a30      	ldr	r2, [pc, #192]	; (8004008 <HAL_RCC_OscConfig+0x574>)
 8003f46:	6813      	ldr	r3, [r2, #0]
 8003f48:	4936      	ldr	r1, [pc, #216]	; (8004024 <HAL_RCC_OscConfig+0x590>)
 8003f4a:	400b      	ands	r3, r1
 8003f4c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003f4e:	f7fe fdbd 	bl	8002acc <HAL_GetTick>
 8003f52:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003f54:	4b2c      	ldr	r3, [pc, #176]	; (8004008 <HAL_RCC_OscConfig+0x574>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	019b      	lsls	r3, r3, #6
 8003f5a:	d506      	bpl.n	8003f6a <HAL_RCC_OscConfig+0x4d6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f5c:	f7fe fdb6 	bl	8002acc <HAL_GetTick>
 8003f60:	1b40      	subs	r0, r0, r5
 8003f62:	2802      	cmp	r0, #2
 8003f64:	d9f6      	bls.n	8003f54 <HAL_RCC_OscConfig+0x4c0>
            return HAL_TIMEOUT;
 8003f66:	2003      	movs	r0, #3
 8003f68:	e03a      	b.n	8003fe0 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f6a:	4927      	ldr	r1, [pc, #156]	; (8004008 <HAL_RCC_OscConfig+0x574>)
 8003f6c:	68cb      	ldr	r3, [r1, #12]
 8003f6e:	4a2e      	ldr	r2, [pc, #184]	; (8004028 <HAL_RCC_OscConfig+0x594>)
 8003f70:	4013      	ands	r3, r2
 8003f72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003f74:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003f76:	4302      	orrs	r2, r0
 8003f78:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003f7a:	4302      	orrs	r2, r0
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60cb      	str	r3, [r1, #12]
        __HAL_RCC_PLL_ENABLE();
 8003f80:	680a      	ldr	r2, [r1, #0]
 8003f82:	2380      	movs	r3, #128	; 0x80
 8003f84:	045b      	lsls	r3, r3, #17
 8003f86:	4313      	orrs	r3, r2
 8003f88:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8003f8a:	f7fe fd9f 	bl	8002acc <HAL_GetTick>
 8003f8e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003f90:	4b1d      	ldr	r3, [pc, #116]	; (8004008 <HAL_RCC_OscConfig+0x574>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	019b      	lsls	r3, r3, #6
 8003f96:	d406      	bmi.n	8003fa6 <HAL_RCC_OscConfig+0x512>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f98:	f7fe fd98 	bl	8002acc <HAL_GetTick>
 8003f9c:	1b00      	subs	r0, r0, r4
 8003f9e:	2802      	cmp	r0, #2
 8003fa0:	d9f6      	bls.n	8003f90 <HAL_RCC_OscConfig+0x4fc>
            return HAL_TIMEOUT;
 8003fa2:	2003      	movs	r0, #3
 8003fa4:	e01c      	b.n	8003fe0 <HAL_RCC_OscConfig+0x54c>
  return HAL_OK;
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	e01a      	b.n	8003fe0 <HAL_RCC_OscConfig+0x54c>
 8003faa:	2000      	movs	r0, #0
 8003fac:	e018      	b.n	8003fe0 <HAL_RCC_OscConfig+0x54c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d020      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x560>
        pll_config = RCC->CFGR;
 8003fb2:	4b15      	ldr	r3, [pc, #84]	; (8004008 <HAL_RCC_OscConfig+0x574>)
 8003fb4:	68da      	ldr	r2, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb6:	2380      	movs	r3, #128	; 0x80
 8003fb8:	025b      	lsls	r3, r3, #9
 8003fba:	4013      	ands	r3, r2
 8003fbc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003fbe:	428b      	cmp	r3, r1
 8003fc0:	d11a      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x564>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003fc2:	23f0      	movs	r3, #240	; 0xf0
 8003fc4:	039b      	lsls	r3, r3, #14
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	6b21      	ldr	r1, [r4, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fca:	428b      	cmp	r3, r1
 8003fcc:	d116      	bne.n	8003ffc <HAL_RCC_OscConfig+0x568>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003fce:	23c0      	movs	r3, #192	; 0xc0
 8003fd0:	041b      	lsls	r3, r3, #16
 8003fd2:	401a      	ands	r2, r3
 8003fd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d112      	bne.n	8004000 <HAL_RCC_OscConfig+0x56c>
  return HAL_OK;
 8003fda:	2000      	movs	r0, #0
 8003fdc:	e000      	b.n	8003fe0 <HAL_RCC_OscConfig+0x54c>
    return HAL_ERROR;
 8003fde:	2001      	movs	r0, #1
}
 8003fe0:	b003      	add	sp, #12
 8003fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8003fe4:	2001      	movs	r0, #1
 8003fe6:	e7fb      	b.n	8003fe0 <HAL_RCC_OscConfig+0x54c>
        return HAL_ERROR;
 8003fe8:	2001      	movs	r0, #1
 8003fea:	e7f9      	b.n	8003fe0 <HAL_RCC_OscConfig+0x54c>
        return HAL_ERROR;
 8003fec:	2001      	movs	r0, #1
 8003fee:	e7f7      	b.n	8003fe0 <HAL_RCC_OscConfig+0x54c>
  return HAL_OK;
 8003ff0:	2000      	movs	r0, #0
 8003ff2:	e7f5      	b.n	8003fe0 <HAL_RCC_OscConfig+0x54c>
        return HAL_ERROR;
 8003ff4:	2001      	movs	r0, #1
 8003ff6:	e7f3      	b.n	8003fe0 <HAL_RCC_OscConfig+0x54c>
          return HAL_ERROR;
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	e7f1      	b.n	8003fe0 <HAL_RCC_OscConfig+0x54c>
 8003ffc:	2001      	movs	r0, #1
 8003ffe:	e7ef      	b.n	8003fe0 <HAL_RCC_OscConfig+0x54c>
 8004000:	2001      	movs	r0, #1
 8004002:	e7ed      	b.n	8003fe0 <HAL_RCC_OscConfig+0x54c>
 8004004:	40007000 	.word	0x40007000
 8004008:	40021000 	.word	0x40021000
 800400c:	00001388 	.word	0x00001388
 8004010:	fffffeff 	.word	0xfffffeff
 8004014:	fffffbff 	.word	0xfffffbff
 8004018:	40010000 	.word	0x40010000
 800401c:	efffffff 	.word	0xefffffff
 8004020:	ffffdfff 	.word	0xffffdfff
 8004024:	feffffff 	.word	0xfeffffff
 8004028:	ff02ffff 	.word	0xff02ffff

0800402c <HAL_RCC_ClockConfig>:
{
 800402c:	b570      	push	{r4, r5, r6, lr}
 800402e:	0005      	movs	r5, r0
 8004030:	000c      	movs	r4, r1
  if(RCC_ClkInitStruct == NULL)
 8004032:	2800      	cmp	r0, #0
 8004034:	d100      	bne.n	8004038 <HAL_RCC_ClockConfig+0xc>
 8004036:	e0d1      	b.n	80041dc <HAL_RCC_ClockConfig+0x1b0>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004038:	4b6a      	ldr	r3, [pc, #424]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	2301      	movs	r3, #1
 800403e:	4013      	ands	r3, r2
 8004040:	428b      	cmp	r3, r1
 8004042:	d319      	bcc.n	8004078 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004044:	682b      	ldr	r3, [r5, #0]
 8004046:	079b      	lsls	r3, r3, #30
 8004048:	d506      	bpl.n	8004058 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800404a:	4a67      	ldr	r2, [pc, #412]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800404c:	68d3      	ldr	r3, [r2, #12]
 800404e:	21f0      	movs	r1, #240	; 0xf0
 8004050:	438b      	bics	r3, r1
 8004052:	68a9      	ldr	r1, [r5, #8]
 8004054:	430b      	orrs	r3, r1
 8004056:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004058:	682b      	ldr	r3, [r5, #0]
 800405a:	07db      	lsls	r3, r3, #31
 800405c:	d57b      	bpl.n	8004156 <HAL_RCC_ClockConfig+0x12a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800405e:	686b      	ldr	r3, [r5, #4]
 8004060:	2b02      	cmp	r3, #2
 8004062:	d020      	beq.n	80040a6 <HAL_RCC_ClockConfig+0x7a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004064:	2b03      	cmp	r3, #3
 8004066:	d040      	beq.n	80040ea <HAL_RCC_ClockConfig+0xbe>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004068:	2b01      	cmp	r3, #1
 800406a:	d044      	beq.n	80040f6 <HAL_RCC_ClockConfig+0xca>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800406c:	4a5e      	ldr	r2, [pc, #376]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	6812      	ldr	r2, [r2, #0]
 8004070:	0592      	lsls	r2, r2, #22
 8004072:	d41d      	bmi.n	80040b0 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8004074:	2001      	movs	r0, #1
 8004076:	e099      	b.n	80041ac <HAL_RCC_ClockConfig+0x180>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004078:	4a5a      	ldr	r2, [pc, #360]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 800407a:	6813      	ldr	r3, [r2, #0]
 800407c:	2101      	movs	r1, #1
 800407e:	438b      	bics	r3, r1
 8004080:	4323      	orrs	r3, r4
 8004082:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004084:	f7fe fd22 	bl	8002acc <HAL_GetTick>
 8004088:	0006      	movs	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800408a:	4b56      	ldr	r3, [pc, #344]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	2301      	movs	r3, #1
 8004090:	4013      	ands	r3, r2
 8004092:	42a3      	cmp	r3, r4
 8004094:	d0d6      	beq.n	8004044 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004096:	f7fe fd19 	bl	8002acc <HAL_GetTick>
 800409a:	1b80      	subs	r0, r0, r6
 800409c:	4a53      	ldr	r2, [pc, #332]	; (80041ec <HAL_RCC_ClockConfig+0x1c0>)
 800409e:	4290      	cmp	r0, r2
 80040a0:	d9f3      	bls.n	800408a <HAL_RCC_ClockConfig+0x5e>
        return HAL_TIMEOUT;
 80040a2:	2003      	movs	r0, #3
 80040a4:	e082      	b.n	80041ac <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040a6:	4a50      	ldr	r2, [pc, #320]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040a8:	6812      	ldr	r2, [r2, #0]
 80040aa:	0392      	lsls	r2, r2, #14
 80040ac:	d400      	bmi.n	80040b0 <HAL_RCC_ClockConfig+0x84>
 80040ae:	e097      	b.n	80041e0 <HAL_RCC_ClockConfig+0x1b4>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040b0:	494d      	ldr	r1, [pc, #308]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	68ca      	ldr	r2, [r1, #12]
 80040b4:	2003      	movs	r0, #3
 80040b6:	4382      	bics	r2, r0
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 80040bc:	f7fe fd06 	bl	8002acc <HAL_GetTick>
 80040c0:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040c2:	686b      	ldr	r3, [r5, #4]
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d01c      	beq.n	8004102 <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d028      	beq.n	800411e <HAL_RCC_ClockConfig+0xf2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d034      	beq.n	800413a <HAL_RCC_ClockConfig+0x10e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80040d0:	4b45      	ldr	r3, [pc, #276]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	220c      	movs	r2, #12
 80040d6:	421a      	tst	r2, r3
 80040d8:	d03d      	beq.n	8004156 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040da:	f7fe fcf7 	bl	8002acc <HAL_GetTick>
 80040de:	1b80      	subs	r0, r0, r6
 80040e0:	4b42      	ldr	r3, [pc, #264]	; (80041ec <HAL_RCC_ClockConfig+0x1c0>)
 80040e2:	4298      	cmp	r0, r3
 80040e4:	d9f4      	bls.n	80040d0 <HAL_RCC_ClockConfig+0xa4>
          return HAL_TIMEOUT;
 80040e6:	2003      	movs	r0, #3
 80040e8:	e060      	b.n	80041ac <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040ea:	4a3f      	ldr	r2, [pc, #252]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	6812      	ldr	r2, [r2, #0]
 80040ee:	0192      	lsls	r2, r2, #6
 80040f0:	d4de      	bmi.n	80040b0 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80040f2:	2001      	movs	r0, #1
 80040f4:	e05a      	b.n	80041ac <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040f6:	4a3c      	ldr	r2, [pc, #240]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040f8:	6812      	ldr	r2, [r2, #0]
 80040fa:	0752      	lsls	r2, r2, #29
 80040fc:	d4d8      	bmi.n	80040b0 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80040fe:	2001      	movs	r0, #1
 8004100:	e054      	b.n	80041ac <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004102:	4b39      	ldr	r3, [pc, #228]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	230c      	movs	r3, #12
 8004108:	4013      	ands	r3, r2
 800410a:	2b08      	cmp	r3, #8
 800410c:	d023      	beq.n	8004156 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800410e:	f7fe fcdd 	bl	8002acc <HAL_GetTick>
 8004112:	1b80      	subs	r0, r0, r6
 8004114:	4a35      	ldr	r2, [pc, #212]	; (80041ec <HAL_RCC_ClockConfig+0x1c0>)
 8004116:	4290      	cmp	r0, r2
 8004118:	d9f3      	bls.n	8004102 <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 800411a:	2003      	movs	r0, #3
 800411c:	e046      	b.n	80041ac <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800411e:	4b32      	ldr	r3, [pc, #200]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	230c      	movs	r3, #12
 8004124:	4013      	ands	r3, r2
 8004126:	2b0c      	cmp	r3, #12
 8004128:	d015      	beq.n	8004156 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800412a:	f7fe fccf 	bl	8002acc <HAL_GetTick>
 800412e:	1b80      	subs	r0, r0, r6
 8004130:	4b2e      	ldr	r3, [pc, #184]	; (80041ec <HAL_RCC_ClockConfig+0x1c0>)
 8004132:	4298      	cmp	r0, r3
 8004134:	d9f3      	bls.n	800411e <HAL_RCC_ClockConfig+0xf2>
          return HAL_TIMEOUT;
 8004136:	2003      	movs	r0, #3
 8004138:	e038      	b.n	80041ac <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800413a:	4b2b      	ldr	r3, [pc, #172]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	230c      	movs	r3, #12
 8004140:	4013      	ands	r3, r2
 8004142:	2b04      	cmp	r3, #4
 8004144:	d007      	beq.n	8004156 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004146:	f7fe fcc1 	bl	8002acc <HAL_GetTick>
 800414a:	1b80      	subs	r0, r0, r6
 800414c:	4b27      	ldr	r3, [pc, #156]	; (80041ec <HAL_RCC_ClockConfig+0x1c0>)
 800414e:	4298      	cmp	r0, r3
 8004150:	d9f3      	bls.n	800413a <HAL_RCC_ClockConfig+0x10e>
          return HAL_TIMEOUT;
 8004152:	2003      	movs	r0, #3
 8004154:	e02a      	b.n	80041ac <HAL_RCC_ClockConfig+0x180>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004156:	4b23      	ldr	r3, [pc, #140]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	2301      	movs	r3, #1
 800415c:	4013      	ands	r3, r2
 800415e:	42a3      	cmp	r3, r4
 8004160:	d825      	bhi.n	80041ae <HAL_RCC_ClockConfig+0x182>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004162:	682b      	ldr	r3, [r5, #0]
 8004164:	075b      	lsls	r3, r3, #29
 8004166:	d506      	bpl.n	8004176 <HAL_RCC_ClockConfig+0x14a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004168:	4a1f      	ldr	r2, [pc, #124]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800416a:	68d3      	ldr	r3, [r2, #12]
 800416c:	4920      	ldr	r1, [pc, #128]	; (80041f0 <HAL_RCC_ClockConfig+0x1c4>)
 800416e:	400b      	ands	r3, r1
 8004170:	68e9      	ldr	r1, [r5, #12]
 8004172:	430b      	orrs	r3, r1
 8004174:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004176:	682b      	ldr	r3, [r5, #0]
 8004178:	071b      	lsls	r3, r3, #28
 800417a:	d507      	bpl.n	800418c <HAL_RCC_ClockConfig+0x160>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800417c:	491a      	ldr	r1, [pc, #104]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	68cb      	ldr	r3, [r1, #12]
 8004180:	4a1c      	ldr	r2, [pc, #112]	; (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 8004182:	4013      	ands	r3, r2
 8004184:	692a      	ldr	r2, [r5, #16]
 8004186:	00d2      	lsls	r2, r2, #3
 8004188:	4313      	orrs	r3, r2
 800418a:	60cb      	str	r3, [r1, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800418c:	f7ff fc2a 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8004190:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	68da      	ldr	r2, [r3, #12]
 8004194:	0912      	lsrs	r2, r2, #4
 8004196:	230f      	movs	r3, #15
 8004198:	4013      	ands	r3, r2
 800419a:	4a17      	ldr	r2, [pc, #92]	; (80041f8 <HAL_RCC_ClockConfig+0x1cc>)
 800419c:	5cd3      	ldrb	r3, [r2, r3]
 800419e:	40d8      	lsrs	r0, r3
 80041a0:	4b16      	ldr	r3, [pc, #88]	; (80041fc <HAL_RCC_ClockConfig+0x1d0>)
 80041a2:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80041a4:	4b16      	ldr	r3, [pc, #88]	; (8004200 <HAL_RCC_ClockConfig+0x1d4>)
 80041a6:	6818      	ldr	r0, [r3, #0]
 80041a8:	f004 fdb8 	bl	8008d1c <HAL_InitTick>
}
 80041ac:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ae:	4a0d      	ldr	r2, [pc, #52]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 80041b0:	6813      	ldr	r3, [r2, #0]
 80041b2:	2101      	movs	r1, #1
 80041b4:	438b      	bics	r3, r1
 80041b6:	4323      	orrs	r3, r4
 80041b8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80041ba:	f7fe fc87 	bl	8002acc <HAL_GetTick>
 80041be:	0006      	movs	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c0:	4b08      	ldr	r3, [pc, #32]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	2301      	movs	r3, #1
 80041c6:	4013      	ands	r3, r2
 80041c8:	42a3      	cmp	r3, r4
 80041ca:	d0ca      	beq.n	8004162 <HAL_RCC_ClockConfig+0x136>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041cc:	f7fe fc7e 	bl	8002acc <HAL_GetTick>
 80041d0:	1b80      	subs	r0, r0, r6
 80041d2:	4b06      	ldr	r3, [pc, #24]	; (80041ec <HAL_RCC_ClockConfig+0x1c0>)
 80041d4:	4298      	cmp	r0, r3
 80041d6:	d9f3      	bls.n	80041c0 <HAL_RCC_ClockConfig+0x194>
        return HAL_TIMEOUT;
 80041d8:	2003      	movs	r0, #3
 80041da:	e7e7      	b.n	80041ac <HAL_RCC_ClockConfig+0x180>
    return HAL_ERROR;
 80041dc:	2001      	movs	r0, #1
 80041de:	e7e5      	b.n	80041ac <HAL_RCC_ClockConfig+0x180>
        return HAL_ERROR;
 80041e0:	2001      	movs	r0, #1
 80041e2:	e7e3      	b.n	80041ac <HAL_RCC_ClockConfig+0x180>
 80041e4:	40022000 	.word	0x40022000
 80041e8:	40021000 	.word	0x40021000
 80041ec:	00001388 	.word	0x00001388
 80041f0:	fffff8ff 	.word	0xfffff8ff
 80041f4:	ffffc7ff 	.word	0xffffc7ff
 80041f8:	0800e4b4 	.word	0x0800e4b4
 80041fc:	2000000c 	.word	0x2000000c
 8004200:	20000004 	.word	0x20000004

08004204 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8004204:	4b01      	ldr	r3, [pc, #4]	; (800420c <HAL_RCC_GetHCLKFreq+0x8>)
 8004206:	6818      	ldr	r0, [r3, #0]
}
 8004208:	4770      	bx	lr
 800420a:	46c0      	nop			; (mov r8, r8)
 800420c:	2000000c 	.word	0x2000000c

08004210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004210:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004212:	f7ff fff7 	bl	8004204 <HAL_RCC_GetHCLKFreq>
 8004216:	4b04      	ldr	r3, [pc, #16]	; (8004228 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	0a12      	lsrs	r2, r2, #8
 800421c:	2307      	movs	r3, #7
 800421e:	4013      	ands	r3, r2
 8004220:	4a02      	ldr	r2, [pc, #8]	; (800422c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004222:	5cd3      	ldrb	r3, [r2, r3]
 8004224:	40d8      	lsrs	r0, r3
}
 8004226:	bd10      	pop	{r4, pc}
 8004228:	40021000 	.word	0x40021000
 800422c:	0800e4c4 	.word	0x0800e4c4

08004230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004230:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004232:	f7ff ffe7 	bl	8004204 <HAL_RCC_GetHCLKFreq>
 8004236:	4b04      	ldr	r3, [pc, #16]	; (8004248 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	0ad2      	lsrs	r2, r2, #11
 800423c:	2307      	movs	r3, #7
 800423e:	4013      	ands	r3, r2
 8004240:	4a02      	ldr	r2, [pc, #8]	; (800424c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004242:	5cd3      	ldrb	r3, [r2, r3]
 8004244:	40d8      	lsrs	r0, r3
}
 8004246:	bd10      	pop	{r4, pc}
 8004248:	40021000 	.word	0x40021000
 800424c:	0800e4c4 	.word	0x0800e4c4

08004250 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004250:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004252:	230f      	movs	r3, #15
 8004254:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004256:	4b0c      	ldr	r3, [pc, #48]	; (8004288 <HAL_RCC_GetClockConfig+0x38>)
 8004258:	68dc      	ldr	r4, [r3, #12]
 800425a:	2203      	movs	r2, #3
 800425c:	4022      	ands	r2, r4
 800425e:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004260:	68dc      	ldr	r4, [r3, #12]
 8004262:	22f0      	movs	r2, #240	; 0xf0
 8004264:	4022      	ands	r2, r4
 8004266:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	24e0      	movs	r4, #224	; 0xe0
 800426c:	00e4      	lsls	r4, r4, #3
 800426e:	4022      	ands	r2, r4
 8004270:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	08db      	lsrs	r3, r3, #3
 8004276:	4023      	ands	r3, r4
 8004278:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800427a:	4b04      	ldr	r3, [pc, #16]	; (800428c <HAL_RCC_GetClockConfig+0x3c>)
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	2301      	movs	r3, #1
 8004280:	4013      	ands	r3, r2
 8004282:	600b      	str	r3, [r1, #0]
}
 8004284:	bd10      	pop	{r4, pc}
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	40021000 	.word	0x40021000
 800428c:	40022000 	.word	0x40022000

08004290 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004290:	b570      	push	{r4, r5, r6, lr}
 8004292:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004294:	6803      	ldr	r3, [r0, #0]
 8004296:	069b      	lsls	r3, r3, #26
 8004298:	d54e      	bpl.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xa8>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800429a:	4b6b      	ldr	r3, [pc, #428]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800429c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	d500      	bpl.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x14>
 80042a2:	e091      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042a4:	4a68      	ldr	r2, [pc, #416]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042a6:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80042a8:	2380      	movs	r3, #128	; 0x80
 80042aa:	055b      	lsls	r3, r3, #21
 80042ac:	430b      	orrs	r3, r1
 80042ae:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 80042b0:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b2:	4b66      	ldr	r3, [pc, #408]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	05db      	lsls	r3, r3, #23
 80042b8:	d400      	bmi.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x2c>
 80042ba:	e087      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80042bc:	4b62      	ldr	r3, [pc, #392]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042be:	681b      	ldr	r3, [r3, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80042c0:	6862      	ldr	r2, [r4, #4]
 80042c2:	4053      	eors	r3, r2
 80042c4:	21c0      	movs	r1, #192	; 0xc0
 80042c6:	0389      	lsls	r1, r1, #14
 80042c8:	420b      	tst	r3, r1
 80042ca:	d006      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x4a>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80042cc:	23c0      	movs	r3, #192	; 0xc0
 80042ce:	029b      	lsls	r3, r3, #10
 80042d0:	0011      	movs	r1, r2
 80042d2:	4019      	ands	r1, r3
 80042d4:	4299      	cmp	r1, r3
 80042d6:	d100      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80042d8:	e08d      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80042da:	4b5b      	ldr	r3, [pc, #364]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042dc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80042de:	23c0      	movs	r3, #192	; 0xc0
 80042e0:	029b      	lsls	r3, r3, #10
 80042e2:	0008      	movs	r0, r1
 80042e4:	4018      	ands	r0, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80042e6:	4219      	tst	r1, r3
 80042e8:	d015      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x86>
 80042ea:	401a      	ands	r2, r3
 80042ec:	4282      	cmp	r2, r0
 80042ee:	d012      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x86>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	069b      	lsls	r3, r3, #26
 80042f4:	d50f      	bpl.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x86>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80042f6:	4b54      	ldr	r3, [pc, #336]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042fa:	4955      	ldr	r1, [pc, #340]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042fc:	4011      	ands	r1, r2

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042fe:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8004300:	2080      	movs	r0, #128	; 0x80
 8004302:	0300      	lsls	r0, r0, #12
 8004304:	4328      	orrs	r0, r5
 8004306:	6518      	str	r0, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004308:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800430a:	4d52      	ldr	r5, [pc, #328]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800430c:	4028      	ands	r0, r5
 800430e:	6518      	str	r0, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004310:	6519      	str	r1, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004312:	05d2      	lsls	r2, r2, #23
 8004314:	d476      	bmi.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x174>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004316:	6863      	ldr	r3, [r4, #4]
 8004318:	22c0      	movs	r2, #192	; 0xc0
 800431a:	0292      	lsls	r2, r2, #10
 800431c:	0019      	movs	r1, r3
 800431e:	4011      	ands	r1, r2
 8004320:	4291      	cmp	r1, r2
 8004322:	d07e      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004324:	4948      	ldr	r1, [pc, #288]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004326:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8004328:	6862      	ldr	r2, [r4, #4]
 800432a:	20c0      	movs	r0, #192	; 0xc0
 800432c:	0280      	lsls	r0, r0, #10
 800432e:	4002      	ands	r2, r0
 8004330:	4313      	orrs	r3, r2
 8004332:	650b      	str	r3, [r1, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004334:	2e01      	cmp	r6, #1
 8004336:	d07e      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	07db      	lsls	r3, r3, #31
 800433c:	d506      	bpl.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800433e:	4a42      	ldr	r2, [pc, #264]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004340:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004342:	2103      	movs	r1, #3
 8004344:	438b      	bics	r3, r1
 8004346:	68a1      	ldr	r1, [r4, #8]
 8004348:	430b      	orrs	r3, r1
 800434a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	079b      	lsls	r3, r3, #30
 8004350:	d506      	bpl.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004352:	4a3d      	ldr	r2, [pc, #244]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004354:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004356:	210c      	movs	r1, #12
 8004358:	438b      	bics	r3, r1
 800435a:	68e1      	ldr	r1, [r4, #12]
 800435c:	430b      	orrs	r3, r1
 800435e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	075b      	lsls	r3, r3, #29
 8004364:	d506      	bpl.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004366:	4a38      	ldr	r2, [pc, #224]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004368:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800436a:	493b      	ldr	r1, [pc, #236]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800436c:	400b      	ands	r3, r1
 800436e:	6921      	ldr	r1, [r4, #16]
 8004370:	430b      	orrs	r3, r1
 8004372:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004374:	6823      	ldr	r3, [r4, #0]
 8004376:	071b      	lsls	r3, r3, #28
 8004378:	d506      	bpl.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800437a:	4a33      	ldr	r2, [pc, #204]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800437c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800437e:	4937      	ldr	r1, [pc, #220]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004380:	400b      	ands	r3, r1
 8004382:	6961      	ldr	r1, [r4, #20]
 8004384:	430b      	orrs	r3, r1
 8004386:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004388:	6823      	ldr	r3, [r4, #0]
 800438a:	05db      	lsls	r3, r3, #23
 800438c:	d506      	bpl.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800438e:	4a2e      	ldr	r2, [pc, #184]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004390:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004392:	492f      	ldr	r1, [pc, #188]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004394:	400b      	ands	r3, r1
 8004396:	69a1      	ldr	r1, [r4, #24]
 8004398:	430b      	orrs	r3, r1
 800439a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800439c:	6823      	ldr	r3, [r4, #0]
 800439e:	065b      	lsls	r3, r3, #25
 80043a0:	d506      	bpl.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043a2:	4a29      	ldr	r2, [pc, #164]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80043a6:	492e      	ldr	r1, [pc, #184]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a8:	400b      	ands	r3, r1
 80043aa:	6a21      	ldr	r1, [r4, #32]
 80043ac:	430b      	orrs	r3, r1
 80043ae:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043b0:	6823      	ldr	r3, [r4, #0]
 80043b2:	061b      	lsls	r3, r3, #24
 80043b4:	d545      	bpl.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80043b6:	4a24      	ldr	r2, [pc, #144]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043b8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80043ba:	492a      	ldr	r1, [pc, #168]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043bc:	400b      	ands	r3, r1
 80043be:	69e1      	ldr	r1, [r4, #28]
 80043c0:	430b      	orrs	r3, r1
 80043c2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  return HAL_OK;
 80043c4:	2000      	movs	r0, #0
 80043c6:	e03d      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  FlagStatus       pwrclkchanged = RESET;
 80043c8:	2600      	movs	r6, #0
 80043ca:	e772      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x22>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043cc:	4a1f      	ldr	r2, [pc, #124]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043ce:	6811      	ldr	r1, [r2, #0]
 80043d0:	2380      	movs	r3, #128	; 0x80
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	430b      	orrs	r3, r1
 80043d6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80043d8:	f7fe fb78 	bl	8002acc <HAL_GetTick>
 80043dc:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043de:	4b1b      	ldr	r3, [pc, #108]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	05db      	lsls	r3, r3, #23
 80043e4:	d500      	bpl.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
 80043e6:	e769      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e8:	f7fe fb70 	bl	8002acc <HAL_GetTick>
 80043ec:	1b40      	subs	r0, r0, r5
 80043ee:	2864      	cmp	r0, #100	; 0x64
 80043f0:	d9f5      	bls.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x14e>
          return HAL_TIMEOUT;
 80043f2:	2003      	movs	r0, #3
 80043f4:	e026      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80043f6:	4b14      	ldr	r3, [pc, #80]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	039b      	lsls	r3, r3, #14
 80043fc:	d400      	bmi.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x170>
 80043fe:	e76c      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x4a>
          return HAL_ERROR;
 8004400:	2001      	movs	r0, #1
 8004402:	e01f      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
        tickstart = HAL_GetTick();
 8004404:	f7fe fb62 	bl	8002acc <HAL_GetTick>
 8004408:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800440a:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800440c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800440e:	059b      	lsls	r3, r3, #22
 8004410:	d481      	bmi.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x86>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004412:	f7fe fb5b 	bl	8002acc <HAL_GetTick>
 8004416:	1b40      	subs	r0, r0, r5
 8004418:	4b13      	ldr	r3, [pc, #76]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800441a:	4298      	cmp	r0, r3
 800441c:	d9f5      	bls.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x17a>
            return HAL_TIMEOUT;
 800441e:	2003      	movs	r0, #3
 8004420:	e010      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004422:	4909      	ldr	r1, [pc, #36]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004424:	680a      	ldr	r2, [r1, #0]
 8004426:	4811      	ldr	r0, [pc, #68]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004428:	4002      	ands	r2, r0
 800442a:	20c0      	movs	r0, #192	; 0xc0
 800442c:	0380      	lsls	r0, r0, #14
 800442e:	4003      	ands	r3, r0
 8004430:	4313      	orrs	r3, r2
 8004432:	600b      	str	r3, [r1, #0]
 8004434:	e776      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004436:	000a      	movs	r2, r1
 8004438:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800443a:	490d      	ldr	r1, [pc, #52]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800443c:	400b      	ands	r3, r1
 800443e:	6393      	str	r3, [r2, #56]	; 0x38
 8004440:	e77a      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  return HAL_OK;
 8004442:	2000      	movs	r0, #0
}
 8004444:	bd70      	pop	{r4, r5, r6, pc}
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	40021000 	.word	0x40021000
 800444c:	40007000 	.word	0x40007000
 8004450:	fffcffff 	.word	0xfffcffff
 8004454:	fff7ffff 	.word	0xfff7ffff
 8004458:	fffff3ff 	.word	0xfffff3ff
 800445c:	ffffcfff 	.word	0xffffcfff
 8004460:	fbffffff 	.word	0xfbffffff
 8004464:	fff3ffff 	.word	0xfff3ffff
 8004468:	00001388 	.word	0x00001388
 800446c:	ffcfffff 	.word	0xffcfffff
 8004470:	efffffff 	.word	0xefffffff

08004474 <TIM_Base_SetConfig>:
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004474:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004476:	2280      	movs	r2, #128	; 0x80
 8004478:	05d2      	lsls	r2, r2, #23
 800447a:	4290      	cmp	r0, r2
 800447c:	d008      	beq.n	8004490 <TIM_Base_SetConfig+0x1c>
 800447e:	4a15      	ldr	r2, [pc, #84]	; (80044d4 <TIM_Base_SetConfig+0x60>)
 8004480:	4290      	cmp	r0, r2
 8004482:	d005      	beq.n	8004490 <TIM_Base_SetConfig+0x1c>
 8004484:	4a14      	ldr	r2, [pc, #80]	; (80044d8 <TIM_Base_SetConfig+0x64>)
 8004486:	4290      	cmp	r0, r2
 8004488:	d002      	beq.n	8004490 <TIM_Base_SetConfig+0x1c>
 800448a:	4a14      	ldr	r2, [pc, #80]	; (80044dc <TIM_Base_SetConfig+0x68>)
 800448c:	4290      	cmp	r0, r2
 800448e:	d103      	bne.n	8004498 <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004490:	2270      	movs	r2, #112	; 0x70
 8004492:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8004494:	684a      	ldr	r2, [r1, #4]
 8004496:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004498:	2280      	movs	r2, #128	; 0x80
 800449a:	05d2      	lsls	r2, r2, #23
 800449c:	4290      	cmp	r0, r2
 800449e:	d008      	beq.n	80044b2 <TIM_Base_SetConfig+0x3e>
 80044a0:	4a0c      	ldr	r2, [pc, #48]	; (80044d4 <TIM_Base_SetConfig+0x60>)
 80044a2:	4290      	cmp	r0, r2
 80044a4:	d005      	beq.n	80044b2 <TIM_Base_SetConfig+0x3e>
 80044a6:	4a0c      	ldr	r2, [pc, #48]	; (80044d8 <TIM_Base_SetConfig+0x64>)
 80044a8:	4290      	cmp	r0, r2
 80044aa:	d002      	beq.n	80044b2 <TIM_Base_SetConfig+0x3e>
 80044ac:	4a0b      	ldr	r2, [pc, #44]	; (80044dc <TIM_Base_SetConfig+0x68>)
 80044ae:	4290      	cmp	r0, r2
 80044b0:	d103      	bne.n	80044ba <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044b2:	4a0b      	ldr	r2, [pc, #44]	; (80044e0 <TIM_Base_SetConfig+0x6c>)
 80044b4:	401a      	ands	r2, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044b6:	68cb      	ldr	r3, [r1, #12]
 80044b8:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044ba:	2280      	movs	r2, #128	; 0x80
 80044bc:	4393      	bics	r3, r2
 80044be:	690a      	ldr	r2, [r1, #16]
 80044c0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80044c2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044c4:	688b      	ldr	r3, [r1, #8]
 80044c6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044c8:	680b      	ldr	r3, [r1, #0]
 80044ca:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044cc:	2301      	movs	r3, #1
 80044ce:	6143      	str	r3, [r0, #20]
}
 80044d0:	4770      	bx	lr
 80044d2:	46c0      	nop			; (mov r8, r8)
 80044d4:	40000400 	.word	0x40000400
 80044d8:	40010800 	.word	0x40010800
 80044dc:	40011400 	.word	0x40011400
 80044e0:	fffffcff 	.word	0xfffffcff

080044e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044e4:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044e6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044e8:	6a04      	ldr	r4, [r0, #32]
 80044ea:	2501      	movs	r5, #1
 80044ec:	43ac      	bics	r4, r5
 80044ee:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044f0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044f2:	35ef      	adds	r5, #239	; 0xef
 80044f4:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044f6:	0112      	lsls	r2, r2, #4
 80044f8:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044fa:	240a      	movs	r4, #10
 80044fc:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 80044fe:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004500:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004502:	6203      	str	r3, [r0, #32]
}
 8004504:	bd30      	pop	{r4, r5, pc}
	...

08004508 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004508:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800450a:	6a03      	ldr	r3, [r0, #32]
 800450c:	2410      	movs	r4, #16
 800450e:	43a3      	bics	r3, r4
 8004510:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004512:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004514:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004516:	4d05      	ldr	r5, [pc, #20]	; (800452c <TIM_TI2_ConfigInputStage+0x24>)
 8004518:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800451a:	0312      	lsls	r2, r2, #12
 800451c:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800451e:	24a0      	movs	r4, #160	; 0xa0
 8004520:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8004522:	0109      	lsls	r1, r1, #4
 8004524:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004526:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004528:	6201      	str	r1, [r0, #32]
}
 800452a:	bd30      	pop	{r4, r5, pc}
 800452c:	ffff0fff 	.word	0xffff0fff

08004530 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004530:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004532:	2270      	movs	r2, #112	; 0x70
 8004534:	4393      	bics	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004536:	430b      	orrs	r3, r1
 8004538:	3a69      	subs	r2, #105	; 0x69
 800453a:	4313      	orrs	r3, r2
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800453c:	6083      	str	r3, [r0, #8]
}
 800453e:	4770      	bx	lr

08004540 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004540:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004542:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004544:	4d03      	ldr	r5, [pc, #12]	; (8004554 <TIM_ETR_SetConfig+0x14>)
 8004546:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004548:	021b      	lsls	r3, r3, #8
 800454a:	4313      	orrs	r3, r2
 800454c:	430b      	orrs	r3, r1
 800454e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004550:	6083      	str	r3, [r0, #8]
}
 8004552:	bd30      	pop	{r4, r5, pc}
 8004554:	ffff00ff 	.word	0xffff00ff

08004558 <HAL_TIM_Base_Init>:
{
 8004558:	b570      	push	{r4, r5, r6, lr}
 800455a:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 800455c:	d01e      	beq.n	800459c <HAL_TIM_Base_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 800455e:	2339      	movs	r3, #57	; 0x39
 8004560:	5cc3      	ldrb	r3, [r0, r3]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d014      	beq.n	8004590 <HAL_TIM_Base_Init+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 8004566:	2539      	movs	r5, #57	; 0x39
 8004568:	2302      	movs	r3, #2
 800456a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800456c:	0021      	movs	r1, r4
 800456e:	c901      	ldmia	r1!, {r0}
 8004570:	f7ff ff80 	bl	8004474 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004574:	2301      	movs	r3, #1
 8004576:	223e      	movs	r2, #62	; 0x3e
 8004578:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800457a:	3a04      	subs	r2, #4
 800457c:	54a3      	strb	r3, [r4, r2]
 800457e:	3201      	adds	r2, #1
 8004580:	54a3      	strb	r3, [r4, r2]
 8004582:	3201      	adds	r2, #1
 8004584:	54a3      	strb	r3, [r4, r2]
 8004586:	3201      	adds	r2, #1
 8004588:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 800458a:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 800458c:	2000      	movs	r0, #0
}
 800458e:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004590:	3338      	adds	r3, #56	; 0x38
 8004592:	2200      	movs	r2, #0
 8004594:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8004596:	f004 fb1f 	bl	8008bd8 <HAL_TIM_Base_MspInit>
 800459a:	e7e4      	b.n	8004566 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 800459c:	2001      	movs	r0, #1
 800459e:	e7f6      	b.n	800458e <HAL_TIM_Base_Init+0x36>

080045a0 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80045a0:	2339      	movs	r3, #57	; 0x39
 80045a2:	5cc3      	ldrb	r3, [r0, r3]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d121      	bne.n	80045ec <HAL_TIM_Base_Start+0x4c>
  htim->State = HAL_TIM_STATE_BUSY;
 80045a8:	3338      	adds	r3, #56	; 0x38
 80045aa:	2202      	movs	r2, #2
 80045ac:	54c2      	strb	r2, [r0, r3]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ae:	6803      	ldr	r3, [r0, #0]
 80045b0:	2280      	movs	r2, #128	; 0x80
 80045b2:	05d2      	lsls	r2, r2, #23
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d00e      	beq.n	80045d6 <HAL_TIM_Base_Start+0x36>
 80045b8:	4a0e      	ldr	r2, [pc, #56]	; (80045f4 <HAL_TIM_Base_Start+0x54>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d00b      	beq.n	80045d6 <HAL_TIM_Base_Start+0x36>
 80045be:	4a0e      	ldr	r2, [pc, #56]	; (80045f8 <HAL_TIM_Base_Start+0x58>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d008      	beq.n	80045d6 <HAL_TIM_Base_Start+0x36>
 80045c4:	4a0d      	ldr	r2, [pc, #52]	; (80045fc <HAL_TIM_Base_Start+0x5c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d005      	beq.n	80045d6 <HAL_TIM_Base_Start+0x36>
    __HAL_TIM_ENABLE(htim);
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	2101      	movs	r1, #1
 80045ce:	430a      	orrs	r2, r1
 80045d0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80045d2:	2000      	movs	r0, #0
 80045d4:	e00b      	b.n	80045ee <HAL_TIM_Base_Start+0x4e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045d6:	6899      	ldr	r1, [r3, #8]
 80045d8:	2207      	movs	r2, #7
 80045da:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045dc:	2a06      	cmp	r2, #6
 80045de:	d007      	beq.n	80045f0 <HAL_TIM_Base_Start+0x50>
      __HAL_TIM_ENABLE(htim);
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	2101      	movs	r1, #1
 80045e4:	430a      	orrs	r2, r1
 80045e6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80045e8:	2000      	movs	r0, #0
 80045ea:	e000      	b.n	80045ee <HAL_TIM_Base_Start+0x4e>
    return HAL_ERROR;
 80045ec:	2001      	movs	r0, #1
}
 80045ee:	4770      	bx	lr
  return HAL_OK;
 80045f0:	2000      	movs	r0, #0
 80045f2:	e7fc      	b.n	80045ee <HAL_TIM_Base_Start+0x4e>
 80045f4:	40000400 	.word	0x40000400
 80045f8:	40010800 	.word	0x40010800
 80045fc:	40011400 	.word	0x40011400

08004600 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004600:	2339      	movs	r3, #57	; 0x39
 8004602:	5cc3      	ldrb	r3, [r0, r3]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d126      	bne.n	8004656 <HAL_TIM_Base_Start_IT+0x56>
  htim->State = HAL_TIM_STATE_BUSY;
 8004608:	3338      	adds	r3, #56	; 0x38
 800460a:	2202      	movs	r2, #2
 800460c:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800460e:	6802      	ldr	r2, [r0, #0]
 8004610:	68d3      	ldr	r3, [r2, #12]
 8004612:	2101      	movs	r1, #1
 8004614:	430b      	orrs	r3, r1
 8004616:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004618:	6803      	ldr	r3, [r0, #0]
 800461a:	2280      	movs	r2, #128	; 0x80
 800461c:	05d2      	lsls	r2, r2, #23
 800461e:	4293      	cmp	r3, r2
 8004620:	d00e      	beq.n	8004640 <HAL_TIM_Base_Start_IT+0x40>
 8004622:	4a0f      	ldr	r2, [pc, #60]	; (8004660 <HAL_TIM_Base_Start_IT+0x60>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d00b      	beq.n	8004640 <HAL_TIM_Base_Start_IT+0x40>
 8004628:	4a0e      	ldr	r2, [pc, #56]	; (8004664 <HAL_TIM_Base_Start_IT+0x64>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d008      	beq.n	8004640 <HAL_TIM_Base_Start_IT+0x40>
 800462e:	4a0e      	ldr	r2, [pc, #56]	; (8004668 <HAL_TIM_Base_Start_IT+0x68>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d005      	beq.n	8004640 <HAL_TIM_Base_Start_IT+0x40>
    __HAL_TIM_ENABLE(htim);
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	2101      	movs	r1, #1
 8004638:	430a      	orrs	r2, r1
 800463a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800463c:	2000      	movs	r0, #0
 800463e:	e00b      	b.n	8004658 <HAL_TIM_Base_Start_IT+0x58>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004640:	6899      	ldr	r1, [r3, #8]
 8004642:	2207      	movs	r2, #7
 8004644:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004646:	2a06      	cmp	r2, #6
 8004648:	d007      	beq.n	800465a <HAL_TIM_Base_Start_IT+0x5a>
      __HAL_TIM_ENABLE(htim);
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	2101      	movs	r1, #1
 800464e:	430a      	orrs	r2, r1
 8004650:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004652:	2000      	movs	r0, #0
 8004654:	e000      	b.n	8004658 <HAL_TIM_Base_Start_IT+0x58>
    return HAL_ERROR;
 8004656:	2001      	movs	r0, #1
}
 8004658:	4770      	bx	lr
  return HAL_OK;
 800465a:	2000      	movs	r0, #0
 800465c:	e7fc      	b.n	8004658 <HAL_TIM_Base_Start_IT+0x58>
 800465e:	46c0      	nop			; (mov r8, r8)
 8004660:	40000400 	.word	0x40000400
 8004664:	40010800 	.word	0x40010800
 8004668:	40011400 	.word	0x40011400

0800466c <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800466c:	6802      	ldr	r2, [r0, #0]
 800466e:	68d3      	ldr	r3, [r2, #12]
 8004670:	2101      	movs	r1, #1
 8004672:	438b      	bics	r3, r1
 8004674:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8004676:	6803      	ldr	r3, [r0, #0]
 8004678:	6a19      	ldr	r1, [r3, #32]
 800467a:	4a06      	ldr	r2, [pc, #24]	; (8004694 <HAL_TIM_Base_Stop_IT+0x28>)
 800467c:	4211      	tst	r1, r2
 800467e:	d103      	bne.n	8004688 <HAL_TIM_Base_Stop_IT+0x1c>
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	2101      	movs	r1, #1
 8004684:	438a      	bics	r2, r1
 8004686:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004688:	2339      	movs	r3, #57	; 0x39
 800468a:	2201      	movs	r2, #1
 800468c:	54c2      	strb	r2, [r0, r3]
}
 800468e:	2000      	movs	r0, #0
 8004690:	4770      	bx	lr
 8004692:	46c0      	nop			; (mov r8, r8)
 8004694:	00001111 	.word	0x00001111

08004698 <HAL_TIM_ConfigClockSource>:
{
 8004698:	b510      	push	{r4, lr}
 800469a:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 800469c:	2338      	movs	r3, #56	; 0x38
 800469e:	5cc3      	ldrb	r3, [r0, r3]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d100      	bne.n	80046a6 <HAL_TIM_ConfigClockSource+0xe>
 80046a4:	e078      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x100>
 80046a6:	2338      	movs	r3, #56	; 0x38
 80046a8:	2201      	movs	r2, #1
 80046aa:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80046ac:	3301      	adds	r3, #1
 80046ae:	3201      	adds	r2, #1
 80046b0:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 80046b2:	6802      	ldr	r2, [r0, #0]
 80046b4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046b6:	4839      	ldr	r0, [pc, #228]	; (800479c <HAL_TIM_ConfigClockSource+0x104>)
 80046b8:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80046ba:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80046bc:	680b      	ldr	r3, [r1, #0]
 80046be:	2b60      	cmp	r3, #96	; 0x60
 80046c0:	d050      	beq.n	8004764 <HAL_TIM_ConfigClockSource+0xcc>
 80046c2:	d82a      	bhi.n	800471a <HAL_TIM_ConfigClockSource+0x82>
 80046c4:	2b40      	cmp	r3, #64	; 0x40
 80046c6:	d058      	beq.n	800477a <HAL_TIM_ConfigClockSource+0xe2>
 80046c8:	d90c      	bls.n	80046e4 <HAL_TIM_ConfigClockSource+0x4c>
 80046ca:	2b50      	cmp	r3, #80	; 0x50
 80046cc:	d123      	bne.n	8004716 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ce:	68ca      	ldr	r2, [r1, #12]
 80046d0:	6849      	ldr	r1, [r1, #4]
 80046d2:	6820      	ldr	r0, [r4, #0]
 80046d4:	f7ff ff06 	bl	80044e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046d8:	6820      	ldr	r0, [r4, #0]
 80046da:	2150      	movs	r1, #80	; 0x50
 80046dc:	f7ff ff28 	bl	8004530 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80046e0:	2000      	movs	r0, #0
      break;
 80046e2:	e005      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 80046e4:	2b20      	cmp	r3, #32
 80046e6:	d00e      	beq.n	8004706 <HAL_TIM_ConfigClockSource+0x6e>
 80046e8:	d909      	bls.n	80046fe <HAL_TIM_ConfigClockSource+0x66>
 80046ea:	2b30      	cmp	r3, #48	; 0x30
 80046ec:	d00b      	beq.n	8004706 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 80046ee:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80046f0:	2339      	movs	r3, #57	; 0x39
 80046f2:	2201      	movs	r2, #1
 80046f4:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 80046f6:	3b01      	subs	r3, #1
 80046f8:	2200      	movs	r2, #0
 80046fa:	54e2      	strb	r2, [r4, r3]
}
 80046fc:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <HAL_TIM_ConfigClockSource+0x6e>
 8004702:	2b10      	cmp	r3, #16
 8004704:	d105      	bne.n	8004712 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004706:	6820      	ldr	r0, [r4, #0]
 8004708:	0019      	movs	r1, r3
 800470a:	f7ff ff11 	bl	8004530 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800470e:	2000      	movs	r0, #0
      break;
 8004710:	e7ee      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x58>
      status = HAL_ERROR;
 8004712:	2001      	movs	r0, #1
 8004714:	e7ec      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x58>
 8004716:	2001      	movs	r0, #1
 8004718:	e7ea      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 800471a:	2280      	movs	r2, #128	; 0x80
 800471c:	0152      	lsls	r2, r2, #5
 800471e:	4293      	cmp	r3, r2
 8004720:	d036      	beq.n	8004790 <HAL_TIM_ConfigClockSource+0xf8>
 8004722:	2280      	movs	r2, #128	; 0x80
 8004724:	0192      	lsls	r2, r2, #6
 8004726:	4293      	cmp	r3, r2
 8004728:	d10d      	bne.n	8004746 <HAL_TIM_ConfigClockSource+0xae>
      TIM_ETR_SetConfig(htim->Instance,
 800472a:	68cb      	ldr	r3, [r1, #12]
 800472c:	684a      	ldr	r2, [r1, #4]
 800472e:	6889      	ldr	r1, [r1, #8]
 8004730:	6820      	ldr	r0, [r4, #0]
 8004732:	f7ff ff05 	bl	8004540 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004736:	6822      	ldr	r2, [r4, #0]
 8004738:	6891      	ldr	r1, [r2, #8]
 800473a:	2380      	movs	r3, #128	; 0x80
 800473c:	01db      	lsls	r3, r3, #7
 800473e:	430b      	orrs	r3, r1
 8004740:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004742:	2000      	movs	r0, #0
      break;
 8004744:	e7d4      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8004746:	2b70      	cmp	r3, #112	; 0x70
 8004748:	d124      	bne.n	8004794 <HAL_TIM_ConfigClockSource+0xfc>
      TIM_ETR_SetConfig(htim->Instance,
 800474a:	68cb      	ldr	r3, [r1, #12]
 800474c:	684a      	ldr	r2, [r1, #4]
 800474e:	6889      	ldr	r1, [r1, #8]
 8004750:	6820      	ldr	r0, [r4, #0]
 8004752:	f7ff fef5 	bl	8004540 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004756:	6822      	ldr	r2, [r4, #0]
 8004758:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800475a:	2177      	movs	r1, #119	; 0x77
 800475c:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 800475e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004760:	2000      	movs	r0, #0
      break;
 8004762:	e7c5      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004764:	68ca      	ldr	r2, [r1, #12]
 8004766:	6849      	ldr	r1, [r1, #4]
 8004768:	6820      	ldr	r0, [r4, #0]
 800476a:	f7ff fecd 	bl	8004508 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800476e:	6820      	ldr	r0, [r4, #0]
 8004770:	2160      	movs	r1, #96	; 0x60
 8004772:	f7ff fedd 	bl	8004530 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004776:	2000      	movs	r0, #0
      break;
 8004778:	e7ba      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800477a:	68ca      	ldr	r2, [r1, #12]
 800477c:	6849      	ldr	r1, [r1, #4]
 800477e:	6820      	ldr	r0, [r4, #0]
 8004780:	f7ff feb0 	bl	80044e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004784:	6820      	ldr	r0, [r4, #0]
 8004786:	2140      	movs	r1, #64	; 0x40
 8004788:	f7ff fed2 	bl	8004530 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800478c:	2000      	movs	r0, #0
      break;
 800478e:	e7af      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8004790:	2000      	movs	r0, #0
 8004792:	e7ad      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x58>
      status = HAL_ERROR;
 8004794:	2001      	movs	r0, #1
 8004796:	e7ab      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x58>
  __HAL_LOCK(htim);
 8004798:	2002      	movs	r0, #2
 800479a:	e7af      	b.n	80046fc <HAL_TIM_ConfigClockSource+0x64>
 800479c:	ffff0088 	.word	0xffff0088

080047a0 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80047a0:	4770      	bx	lr

080047a2 <HAL_TIM_IC_CaptureCallback>:
}
 80047a2:	4770      	bx	lr

080047a4 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80047a4:	4770      	bx	lr

080047a6 <HAL_TIM_TriggerCallback>:
}
 80047a6:	4770      	bx	lr

080047a8 <HAL_TIM_IRQHandler>:
{
 80047a8:	b510      	push	{r4, lr}
 80047aa:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047ac:	6802      	ldr	r2, [r0, #0]
 80047ae:	6913      	ldr	r3, [r2, #16]
 80047b0:	079b      	lsls	r3, r3, #30
 80047b2:	d50f      	bpl.n	80047d4 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047b4:	68d3      	ldr	r3, [r2, #12]
 80047b6:	079b      	lsls	r3, r3, #30
 80047b8:	d50c      	bpl.n	80047d4 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047ba:	2303      	movs	r3, #3
 80047bc:	425b      	negs	r3, r3
 80047be:	6113      	str	r3, [r2, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047c0:	3304      	adds	r3, #4
 80047c2:	7603      	strb	r3, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047c4:	6803      	ldr	r3, [r0, #0]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	079b      	lsls	r3, r3, #30
 80047ca:	d055      	beq.n	8004878 <HAL_TIM_IRQHandler+0xd0>
          HAL_TIM_IC_CaptureCallback(htim);
 80047cc:	f7ff ffe9 	bl	80047a2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047d0:	2300      	movs	r3, #0
 80047d2:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047d4:	6822      	ldr	r2, [r4, #0]
 80047d6:	6913      	ldr	r3, [r2, #16]
 80047d8:	075b      	lsls	r3, r3, #29
 80047da:	d512      	bpl.n	8004802 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047dc:	68d3      	ldr	r3, [r2, #12]
 80047de:	075b      	lsls	r3, r3, #29
 80047e0:	d50f      	bpl.n	8004802 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047e2:	2305      	movs	r3, #5
 80047e4:	425b      	negs	r3, r3
 80047e6:	6113      	str	r3, [r2, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047e8:	3307      	adds	r3, #7
 80047ea:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047ec:	6823      	ldr	r3, [r4, #0]
 80047ee:	699a      	ldr	r2, [r3, #24]
 80047f0:	23c0      	movs	r3, #192	; 0xc0
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	421a      	tst	r2, r3
 80047f6:	d045      	beq.n	8004884 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 80047f8:	0020      	movs	r0, r4
 80047fa:	f7ff ffd2 	bl	80047a2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047fe:	2300      	movs	r3, #0
 8004800:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004802:	6822      	ldr	r2, [r4, #0]
 8004804:	6913      	ldr	r3, [r2, #16]
 8004806:	071b      	lsls	r3, r3, #28
 8004808:	d510      	bpl.n	800482c <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800480a:	68d3      	ldr	r3, [r2, #12]
 800480c:	071b      	lsls	r3, r3, #28
 800480e:	d50d      	bpl.n	800482c <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004810:	2309      	movs	r3, #9
 8004812:	425b      	negs	r3, r3
 8004814:	6113      	str	r3, [r2, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004816:	330d      	adds	r3, #13
 8004818:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	079b      	lsls	r3, r3, #30
 8004820:	d037      	beq.n	8004892 <HAL_TIM_IRQHandler+0xea>
        HAL_TIM_IC_CaptureCallback(htim);
 8004822:	0020      	movs	r0, r4
 8004824:	f7ff ffbd 	bl	80047a2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004828:	2300      	movs	r3, #0
 800482a:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800482c:	6822      	ldr	r2, [r4, #0]
 800482e:	6913      	ldr	r3, [r2, #16]
 8004830:	06db      	lsls	r3, r3, #27
 8004832:	d512      	bpl.n	800485a <HAL_TIM_IRQHandler+0xb2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004834:	68d3      	ldr	r3, [r2, #12]
 8004836:	06db      	lsls	r3, r3, #27
 8004838:	d50f      	bpl.n	800485a <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800483a:	2311      	movs	r3, #17
 800483c:	425b      	negs	r3, r3
 800483e:	6113      	str	r3, [r2, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004840:	3319      	adds	r3, #25
 8004842:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	69da      	ldr	r2, [r3, #28]
 8004848:	23c0      	movs	r3, #192	; 0xc0
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	421a      	tst	r2, r3
 800484e:	d027      	beq.n	80048a0 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8004850:	0020      	movs	r0, r4
 8004852:	f7ff ffa6 	bl	80047a2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004856:	2300      	movs	r3, #0
 8004858:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800485a:	6822      	ldr	r2, [r4, #0]
 800485c:	6913      	ldr	r3, [r2, #16]
 800485e:	07db      	lsls	r3, r3, #31
 8004860:	d502      	bpl.n	8004868 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004862:	68d3      	ldr	r3, [r2, #12]
 8004864:	07db      	lsls	r3, r3, #31
 8004866:	d422      	bmi.n	80048ae <HAL_TIM_IRQHandler+0x106>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004868:	6822      	ldr	r2, [r4, #0]
 800486a:	6913      	ldr	r3, [r2, #16]
 800486c:	065b      	lsls	r3, r3, #25
 800486e:	d502      	bpl.n	8004876 <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004870:	68d3      	ldr	r3, [r2, #12]
 8004872:	065b      	lsls	r3, r3, #25
 8004874:	d422      	bmi.n	80048bc <HAL_TIM_IRQHandler+0x114>
}
 8004876:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004878:	f7ff ff92 	bl	80047a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800487c:	0020      	movs	r0, r4
 800487e:	f7ff ff91 	bl	80047a4 <HAL_TIM_PWM_PulseFinishedCallback>
 8004882:	e7a5      	b.n	80047d0 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004884:	0020      	movs	r0, r4
 8004886:	f7ff ff8b 	bl	80047a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800488a:	0020      	movs	r0, r4
 800488c:	f7ff ff8a 	bl	80047a4 <HAL_TIM_PWM_PulseFinishedCallback>
 8004890:	e7b5      	b.n	80047fe <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004892:	0020      	movs	r0, r4
 8004894:	f7ff ff84 	bl	80047a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004898:	0020      	movs	r0, r4
 800489a:	f7ff ff83 	bl	80047a4 <HAL_TIM_PWM_PulseFinishedCallback>
 800489e:	e7c3      	b.n	8004828 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a0:	0020      	movs	r0, r4
 80048a2:	f7ff ff7d 	bl	80047a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a6:	0020      	movs	r0, r4
 80048a8:	f7ff ff7c 	bl	80047a4 <HAL_TIM_PWM_PulseFinishedCallback>
 80048ac:	e7d3      	b.n	8004856 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048ae:	2302      	movs	r3, #2
 80048b0:	425b      	negs	r3, r3
 80048b2:	6113      	str	r3, [r2, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80048b4:	0020      	movs	r0, r4
 80048b6:	f002 ff45 	bl	8007744 <HAL_TIM_PeriodElapsedCallback>
 80048ba:	e7d5      	b.n	8004868 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048bc:	2341      	movs	r3, #65	; 0x41
 80048be:	425b      	negs	r3, r3
 80048c0:	6113      	str	r3, [r2, #16]
      HAL_TIM_TriggerCallback(htim);
 80048c2:	0020      	movs	r0, r4
 80048c4:	f7ff ff6f 	bl	80047a6 <HAL_TIM_TriggerCallback>
}
 80048c8:	e7d5      	b.n	8004876 <HAL_TIM_IRQHandler+0xce>
	...

080048cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048cc:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ce:	2338      	movs	r3, #56	; 0x38
 80048d0:	5cc3      	ldrb	r3, [r0, r3]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d028      	beq.n	8004928 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 80048d6:	2338      	movs	r3, #56	; 0x38
 80048d8:	2201      	movs	r2, #1
 80048da:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048dc:	3301      	adds	r3, #1
 80048de:	3201      	adds	r2, #1
 80048e0:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048e2:	6803      	ldr	r3, [r0, #0]
 80048e4:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048e6:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048e8:	326e      	adds	r2, #110	; 0x6e
 80048ea:	4394      	bics	r4, r2
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048ec:	680a      	ldr	r2, [r1, #0]
 80048ee:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048f2:	6803      	ldr	r3, [r0, #0]
 80048f4:	2280      	movs	r2, #128	; 0x80
 80048f6:	05d2      	lsls	r2, r2, #23
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d008      	beq.n	800490e <HAL_TIMEx_MasterConfigSynchronization+0x42>
 80048fc:	4a0b      	ldr	r2, [pc, #44]	; (800492c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d005      	beq.n	800490e <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004902:	4a0b      	ldr	r2, [pc, #44]	; (8004930 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d002      	beq.n	800490e <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004908:	4a0a      	ldr	r2, [pc, #40]	; (8004934 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d104      	bne.n	8004918 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800490e:	2280      	movs	r2, #128	; 0x80
 8004910:	4395      	bics	r5, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004912:	684a      	ldr	r2, [r1, #4]
 8004914:	432a      	orrs	r2, r5

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004916:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004918:	2339      	movs	r3, #57	; 0x39
 800491a:	2201      	movs	r2, #1
 800491c:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 800491e:	3b01      	subs	r3, #1
 8004920:	2200      	movs	r2, #0
 8004922:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8004924:	2000      	movs	r0, #0
}
 8004926:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8004928:	2002      	movs	r0, #2
 800492a:	e7fc      	b.n	8004926 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 800492c:	40000400 	.word	0x40000400
 8004930:	40010800 	.word	0x40010800
 8004934:	40011400 	.word	0x40011400

08004938 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004938:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800493a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800493e:	2301      	movs	r3, #1
 8004940:	f383 8810 	msr	PRIMASK, r3
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004944:	6802      	ldr	r2, [r0, #0]
 8004946:	6813      	ldr	r3, [r2, #0]
 8004948:	24c0      	movs	r4, #192	; 0xc0
 800494a:	43a3      	bics	r3, r4
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	f381 8810 	msr	PRIMASK, r1

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004952:	2320      	movs	r3, #32
 8004954:	6783      	str	r3, [r0, #120]	; 0x78
}
 8004956:	bd10      	pop	{r4, pc}

08004958 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004958:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800495a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800495e:	2201      	movs	r2, #1
 8004960:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004964:	6801      	ldr	r1, [r0, #0]
 8004966:	680b      	ldr	r3, [r1, #0]
 8004968:	4c12      	ldr	r4, [pc, #72]	; (80049b4 <UART_EndRxTransfer+0x5c>)
 800496a:	4023      	ands	r3, r4
 800496c:	600b      	str	r3, [r1, #0]
 800496e:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004972:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004976:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497a:	6801      	ldr	r1, [r0, #0]
 800497c:	688b      	ldr	r3, [r1, #8]
 800497e:	4393      	bics	r3, r2
 8004980:	608b      	str	r3, [r1, #8]
 8004982:	f38c 8810 	msr	PRIMASK, ip

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004986:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004988:	2b01      	cmp	r3, #1
 800498a:	d005      	beq.n	8004998 <UART_EndRxTransfer+0x40>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800498c:	2320      	movs	r3, #32
 800498e:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004990:	2300      	movs	r3, #0
 8004992:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004994:	6643      	str	r3, [r0, #100]	; 0x64
}
 8004996:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004998:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800499c:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a0:	6802      	ldr	r2, [r0, #0]
 80049a2:	6813      	ldr	r3, [r2, #0]
 80049a4:	3432      	adds	r4, #50	; 0x32
 80049a6:	34ff      	adds	r4, #255	; 0xff
 80049a8:	43a3      	bics	r3, r4
 80049aa:	6013      	str	r3, [r2, #0]
 80049ac:	f381 8810 	msr	PRIMASK, r1
}
 80049b0:	e7ec      	b.n	800498c <UART_EndRxTransfer+0x34>
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	fffffedf 	.word	0xfffffedf

080049b8 <HAL_UART_Transmit_DMA>:
{
 80049b8:	b510      	push	{r4, lr}
 80049ba:	0004      	movs	r4, r0
 80049bc:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80049be:	6f82      	ldr	r2, [r0, #120]	; 0x78
 80049c0:	2a20      	cmp	r2, #32
 80049c2:	d154      	bne.n	8004a6e <HAL_UART_Transmit_DMA+0xb6>
    if ((pData == NULL) || (Size == 0U))
 80049c4:	2900      	cmp	r1, #0
 80049c6:	d054      	beq.n	8004a72 <HAL_UART_Transmit_DMA+0xba>
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d054      	beq.n	8004a76 <HAL_UART_Transmit_DMA+0xbe>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049cc:	6880      	ldr	r0, [r0, #8]
 80049ce:	2280      	movs	r2, #128	; 0x80
 80049d0:	0152      	lsls	r2, r2, #5
 80049d2:	4290      	cmp	r0, r2
 80049d4:	d030      	beq.n	8004a38 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 80049d6:	2274      	movs	r2, #116	; 0x74
 80049d8:	5ca2      	ldrb	r2, [r4, r2]
 80049da:	2a01      	cmp	r2, #1
 80049dc:	d04d      	beq.n	8004a7a <HAL_UART_Transmit_DMA+0xc2>
 80049de:	2274      	movs	r2, #116	; 0x74
 80049e0:	2001      	movs	r0, #1
 80049e2:	54a0      	strb	r0, [r4, r2]
    huart->pTxBuffPtr  = pData;
 80049e4:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80049e6:	3a24      	subs	r2, #36	; 0x24
 80049e8:	52a3      	strh	r3, [r4, r2]
    huart->TxXferCount = Size;
 80049ea:	3202      	adds	r2, #2
 80049ec:	52a3      	strh	r3, [r4, r2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ee:	322e      	adds	r2, #46	; 0x2e
 80049f0:	2100      	movs	r1, #0
 80049f2:	50a1      	str	r1, [r4, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049f4:	3a5f      	subs	r2, #95	; 0x5f
 80049f6:	67a2      	str	r2, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 80049f8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80049fa:	2a00      	cmp	r2, #0
 80049fc:	d023      	beq.n	8004a46 <HAL_UART_Transmit_DMA+0x8e>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80049fe:	4920      	ldr	r1, [pc, #128]	; (8004a80 <HAL_UART_Transmit_DMA+0xc8>)
 8004a00:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004a02:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004a04:	491f      	ldr	r1, [pc, #124]	; (8004a84 <HAL_UART_Transmit_DMA+0xcc>)
 8004a06:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004a08:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004a0a:	491f      	ldr	r1, [pc, #124]	; (8004a88 <HAL_UART_Transmit_DMA+0xd0>)
 8004a0c:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8004a0e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004a10:	2100      	movs	r1, #0
 8004a12:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004a14:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004a16:	6822      	ldr	r2, [r4, #0]
 8004a18:	3228      	adds	r2, #40	; 0x28
 8004a1a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004a1c:	f7fe fcae 	bl	800337c <HAL_DMA_Start_IT>
 8004a20:	2800      	cmp	r0, #0
 8004a22:	d010      	beq.n	8004a46 <HAL_UART_Transmit_DMA+0x8e>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004a24:	2380      	movs	r3, #128	; 0x80
 8004a26:	2210      	movs	r2, #16
 8004a28:	50e2      	str	r2, [r4, r3]
        __HAL_UNLOCK(huart);
 8004a2a:	3b0c      	subs	r3, #12
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	54e2      	strb	r2, [r4, r3]
        huart->gState = HAL_UART_STATE_READY;
 8004a30:	3b54      	subs	r3, #84	; 0x54
 8004a32:	67a3      	str	r3, [r4, #120]	; 0x78
        return HAL_ERROR;
 8004a34:	2001      	movs	r0, #1
 8004a36:	e01b      	b.n	8004a70 <HAL_UART_Transmit_DMA+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a38:	6922      	ldr	r2, [r4, #16]
 8004a3a:	2a00      	cmp	r2, #0
 8004a3c:	d1cb      	bne.n	80049d6 <HAL_UART_Transmit_DMA+0x1e>
      if ((((uint32_t)pData) & 1U) != 0U)
 8004a3e:	07ca      	lsls	r2, r1, #31
 8004a40:	d5c9      	bpl.n	80049d6 <HAL_UART_Transmit_DMA+0x1e>
        return  HAL_ERROR;
 8004a42:	2001      	movs	r0, #1
 8004a44:	e014      	b.n	8004a70 <HAL_UART_Transmit_DMA+0xb8>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	2240      	movs	r2, #64	; 0x40
 8004a4a:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8004a4c:	2374      	movs	r3, #116	; 0x74
 8004a4e:	2200      	movs	r2, #0
 8004a50:	54e2      	strb	r2, [r4, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a52:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a56:	3b73      	subs	r3, #115	; 0x73
 8004a58:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004a5c:	6822      	ldr	r2, [r4, #0]
 8004a5e:	6893      	ldr	r3, [r2, #8]
 8004a60:	2080      	movs	r0, #128	; 0x80
 8004a62:	4303      	orrs	r3, r0
 8004a64:	6093      	str	r3, [r2, #8]
 8004a66:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	e000      	b.n	8004a70 <HAL_UART_Transmit_DMA+0xb8>
    return HAL_BUSY;
 8004a6e:	2002      	movs	r0, #2
}
 8004a70:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8004a72:	2001      	movs	r0, #1
 8004a74:	e7fc      	b.n	8004a70 <HAL_UART_Transmit_DMA+0xb8>
 8004a76:	2001      	movs	r0, #1
 8004a78:	e7fa      	b.n	8004a70 <HAL_UART_Transmit_DMA+0xb8>
    __HAL_LOCK(huart);
 8004a7a:	2002      	movs	r0, #2
 8004a7c:	e7f8      	b.n	8004a70 <HAL_UART_Transmit_DMA+0xb8>
 8004a7e:	46c0      	nop			; (mov r8, r8)
 8004a80:	08004a8f 	.word	0x08004a8f
 8004a84:	08004b03 	.word	0x08004b03
 8004a88:	08004b11 	.word	0x08004b11

08004a8c <HAL_UART_TxCpltCallback>:
}
 8004a8c:	4770      	bx	lr

08004a8e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a8e:	b510      	push	{r4, lr}
 8004a90:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a92:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	069b      	lsls	r3, r3, #26
 8004a9a:	d41a      	bmi.n	8004ad2 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 8004a9c:	2352      	movs	r3, #82	; 0x52
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aa2:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa6:	3201      	adds	r2, #1
 8004aa8:	f382 8810 	msr	PRIMASK, r2

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004aac:	6801      	ldr	r1, [r0, #0]
 8004aae:	688b      	ldr	r3, [r1, #8]
 8004ab0:	2480      	movs	r4, #128	; 0x80
 8004ab2:	43a3      	bics	r3, r4
 8004ab4:	608b      	str	r3, [r1, #8]
 8004ab6:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aba:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004abe:	f382 8810 	msr	PRIMASK, r2

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ac2:	6802      	ldr	r2, [r0, #0]
 8004ac4:	6813      	ldr	r3, [r2, #0]
 8004ac6:	2040      	movs	r0, #64	; 0x40
 8004ac8:	4303      	orrs	r3, r0
 8004aca:	6013      	str	r3, [r2, #0]
 8004acc:	f381 8810 	msr	PRIMASK, r1
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ad0:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8004ad2:	f7ff ffdb 	bl	8004a8c <HAL_UART_TxCpltCallback>
}
 8004ad6:	e7fb      	b.n	8004ad0 <UART_DMATransmitCplt+0x42>

08004ad8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ad8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ada:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ade:	2301      	movs	r3, #1
 8004ae0:	f383 8810 	msr	PRIMASK, r3
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ae4:	6802      	ldr	r2, [r0, #0]
 8004ae6:	6813      	ldr	r3, [r2, #0]
 8004ae8:	2440      	movs	r4, #64	; 0x40
 8004aea:	43a3      	bics	r3, r4
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	f381 8810 	msr	PRIMASK, r1

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004af2:	2320      	movs	r3, #32
 8004af4:	6783      	str	r3, [r0, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004af6:	2300      	movs	r3, #0
 8004af8:	6683      	str	r3, [r0, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004afa:	f7ff ffc7 	bl	8004a8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004afe:	bd10      	pop	{r4, pc}

08004b00 <HAL_UART_TxHalfCpltCallback>:
}
 8004b00:	4770      	bx	lr

08004b02 <UART_DMATxHalfCplt>:
{
 8004b02:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b04:	6a80      	ldr	r0, [r0, #40]	; 0x28
  HAL_UART_TxHalfCpltCallback(huart);
 8004b06:	f7ff fffb 	bl	8004b00 <HAL_UART_TxHalfCpltCallback>
}
 8004b0a:	bd10      	pop	{r4, pc}

08004b0c <HAL_UART_RxHalfCpltCallback>:
}
 8004b0c:	4770      	bx	lr

08004b0e <HAL_UART_ErrorCallback>:
}
 8004b0e:	4770      	bx	lr

08004b10 <UART_DMAError>:
{
 8004b10:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b12:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004b14:	6fa2      	ldr	r2, [r4, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004b16:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	061b      	lsls	r3, r3, #24
 8004b1e:	d501      	bpl.n	8004b24 <UART_DMAError+0x14>
 8004b20:	2a21      	cmp	r2, #33	; 0x21
 8004b22:	d00e      	beq.n	8004b42 <UART_DMAError+0x32>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	065b      	lsls	r3, r3, #25
 8004b2a:	d501      	bpl.n	8004b30 <UART_DMAError+0x20>
 8004b2c:	2d22      	cmp	r5, #34	; 0x22
 8004b2e:	d00f      	beq.n	8004b50 <UART_DMAError+0x40>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004b30:	2280      	movs	r2, #128	; 0x80
 8004b32:	58a3      	ldr	r3, [r4, r2]
 8004b34:	2110      	movs	r1, #16
 8004b36:	430b      	orrs	r3, r1
 8004b38:	50a3      	str	r3, [r4, r2]
  HAL_UART_ErrorCallback(huart);
 8004b3a:	0020      	movs	r0, r4
 8004b3c:	f7ff ffe7 	bl	8004b0e <HAL_UART_ErrorCallback>
}
 8004b40:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 8004b42:	2352      	movs	r3, #82	; 0x52
 8004b44:	2200      	movs	r2, #0
 8004b46:	52e2      	strh	r2, [r4, r3]
    UART_EndTxTransfer(huart);
 8004b48:	0020      	movs	r0, r4
 8004b4a:	f7ff fef5 	bl	8004938 <UART_EndTxTransfer>
 8004b4e:	e7e9      	b.n	8004b24 <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 8004b50:	235a      	movs	r3, #90	; 0x5a
 8004b52:	2200      	movs	r2, #0
 8004b54:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 8004b56:	0020      	movs	r0, r4
 8004b58:	f7ff fefe 	bl	8004958 <UART_EndRxTransfer>
 8004b5c:	e7e8      	b.n	8004b30 <UART_DMAError+0x20>

08004b5e <UART_DMAAbortOnError>:
{
 8004b5e:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b60:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	225a      	movs	r2, #90	; 0x5a
 8004b66:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8004b68:	3a08      	subs	r2, #8
 8004b6a:	5283      	strh	r3, [r0, r2]
  HAL_UART_ErrorCallback(huart);
 8004b6c:	f7ff ffcf 	bl	8004b0e <HAL_UART_ErrorCallback>
}
 8004b70:	bd10      	pop	{r4, pc}

08004b72 <HAL_UARTEx_RxEventCallback>:
}
 8004b72:	4770      	bx	lr

08004b74 <HAL_UART_IRQHandler>:
{
 8004b74:	b570      	push	{r4, r5, r6, lr}
 8004b76:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b78:	6802      	ldr	r2, [r0, #0]
 8004b7a:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b7c:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b7e:	6895      	ldr	r5, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b80:	49ab      	ldr	r1, [pc, #684]	; (8004e30 <HAL_UART_IRQHandler+0x2bc>)
 8004b82:	001e      	movs	r6, r3
 8004b84:	400e      	ands	r6, r1
  if (errorflags == 0U)
 8004b86:	420b      	tst	r3, r1
 8004b88:	d103      	bne.n	8004b92 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b8a:	0699      	lsls	r1, r3, #26
 8004b8c:	d501      	bpl.n	8004b92 <HAL_UART_IRQHandler+0x1e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b8e:	0681      	lsls	r1, r0, #26
 8004b90:	d41d      	bmi.n	8004bce <HAL_UART_IRQHandler+0x5a>
  if ((errorflags != 0U)
 8004b92:	2e00      	cmp	r6, #0
 8004b94:	d007      	beq.n	8004ba6 <HAL_UART_IRQHandler+0x32>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004b96:	2101      	movs	r1, #1
 8004b98:	000e      	movs	r6, r1
 8004b9a:	402e      	ands	r6, r5
 8004b9c:	4229      	tst	r1, r5
 8004b9e:	d11c      	bne.n	8004bda <HAL_UART_IRQHandler+0x66>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004ba0:	49a4      	ldr	r1, [pc, #656]	; (8004e34 <HAL_UART_IRQHandler+0x2c0>)
 8004ba2:	4208      	tst	r0, r1
 8004ba4:	d119      	bne.n	8004bda <HAL_UART_IRQHandler+0x66>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba6:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004ba8:	2901      	cmp	r1, #1
 8004baa:	d100      	bne.n	8004bae <HAL_UART_IRQHandler+0x3a>
 8004bac:	e098      	b.n	8004ce0 <HAL_UART_IRQHandler+0x16c>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004bae:	02d9      	lsls	r1, r3, #11
 8004bb0:	d502      	bpl.n	8004bb8 <HAL_UART_IRQHandler+0x44>
 8004bb2:	026d      	lsls	r5, r5, #9
 8004bb4:	d500      	bpl.n	8004bb8 <HAL_UART_IRQHandler+0x44>
 8004bb6:	e128      	b.n	8004e0a <HAL_UART_IRQHandler+0x296>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004bb8:	061a      	lsls	r2, r3, #24
 8004bba:	d502      	bpl.n	8004bc2 <HAL_UART_IRQHandler+0x4e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004bbc:	0602      	lsls	r2, r0, #24
 8004bbe:	d500      	bpl.n	8004bc2 <HAL_UART_IRQHandler+0x4e>
 8004bc0:	e12a      	b.n	8004e18 <HAL_UART_IRQHandler+0x2a4>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004bc2:	065b      	lsls	r3, r3, #25
 8004bc4:	d502      	bpl.n	8004bcc <HAL_UART_IRQHandler+0x58>
 8004bc6:	0640      	lsls	r0, r0, #25
 8004bc8:	d500      	bpl.n	8004bcc <HAL_UART_IRQHandler+0x58>
 8004bca:	e12c      	b.n	8004e26 <HAL_UART_IRQHandler+0x2b2>
}
 8004bcc:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8004bce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0fb      	beq.n	8004bcc <HAL_UART_IRQHandler+0x58>
        huart->RxISR(huart);
 8004bd4:	0020      	movs	r0, r4
 8004bd6:	4798      	blx	r3
      return;
 8004bd8:	e7f8      	b.n	8004bcc <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004bda:	07d9      	lsls	r1, r3, #31
 8004bdc:	d507      	bpl.n	8004bee <HAL_UART_IRQHandler+0x7a>
 8004bde:	05c1      	lsls	r1, r0, #23
 8004be0:	d505      	bpl.n	8004bee <HAL_UART_IRQHandler+0x7a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004be2:	2501      	movs	r5, #1
 8004be4:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004be6:	2180      	movs	r1, #128	; 0x80
 8004be8:	5862      	ldr	r2, [r4, r1]
 8004bea:	432a      	orrs	r2, r5
 8004bec:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bee:	079a      	lsls	r2, r3, #30
 8004bf0:	d509      	bpl.n	8004c06 <HAL_UART_IRQHandler+0x92>
 8004bf2:	2e00      	cmp	r6, #0
 8004bf4:	d007      	beq.n	8004c06 <HAL_UART_IRQHandler+0x92>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004bf6:	6822      	ldr	r2, [r4, #0]
 8004bf8:	2102      	movs	r1, #2
 8004bfa:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bfc:	317e      	adds	r1, #126	; 0x7e
 8004bfe:	5862      	ldr	r2, [r4, r1]
 8004c00:	2504      	movs	r5, #4
 8004c02:	432a      	orrs	r2, r5
 8004c04:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c06:	075a      	lsls	r2, r3, #29
 8004c08:	d509      	bpl.n	8004c1e <HAL_UART_IRQHandler+0xaa>
 8004c0a:	2e00      	cmp	r6, #0
 8004c0c:	d007      	beq.n	8004c1e <HAL_UART_IRQHandler+0xaa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c0e:	6822      	ldr	r2, [r4, #0]
 8004c10:	2104      	movs	r1, #4
 8004c12:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c14:	317c      	adds	r1, #124	; 0x7c
 8004c16:	5862      	ldr	r2, [r4, r1]
 8004c18:	2502      	movs	r5, #2
 8004c1a:	432a      	orrs	r2, r5
 8004c1c:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c1e:	071a      	lsls	r2, r3, #28
 8004c20:	d50a      	bpl.n	8004c38 <HAL_UART_IRQHandler+0xc4>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c22:	0682      	lsls	r2, r0, #26
 8004c24:	d401      	bmi.n	8004c2a <HAL_UART_IRQHandler+0xb6>
 8004c26:	2e00      	cmp	r6, #0
 8004c28:	d006      	beq.n	8004c38 <HAL_UART_IRQHandler+0xc4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c2a:	6822      	ldr	r2, [r4, #0]
 8004c2c:	2508      	movs	r5, #8
 8004c2e:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c30:	2180      	movs	r1, #128	; 0x80
 8004c32:	5862      	ldr	r2, [r4, r1]
 8004c34:	432a      	orrs	r2, r5
 8004c36:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c38:	051a      	lsls	r2, r3, #20
 8004c3a:	d50a      	bpl.n	8004c52 <HAL_UART_IRQHandler+0xde>
 8004c3c:	0142      	lsls	r2, r0, #5
 8004c3e:	d508      	bpl.n	8004c52 <HAL_UART_IRQHandler+0xde>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c40:	6822      	ldr	r2, [r4, #0]
 8004c42:	2180      	movs	r1, #128	; 0x80
 8004c44:	0109      	lsls	r1, r1, #4
 8004c46:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c48:	2180      	movs	r1, #128	; 0x80
 8004c4a:	5862      	ldr	r2, [r4, r1]
 8004c4c:	2520      	movs	r5, #32
 8004c4e:	432a      	orrs	r2, r5
 8004c50:	5062      	str	r2, [r4, r1]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c52:	2280      	movs	r2, #128	; 0x80
 8004c54:	58a2      	ldr	r2, [r4, r2]
 8004c56:	2a00      	cmp	r2, #0
 8004c58:	d0b8      	beq.n	8004bcc <HAL_UART_IRQHandler+0x58>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c5a:	069b      	lsls	r3, r3, #26
 8004c5c:	d506      	bpl.n	8004c6c <HAL_UART_IRQHandler+0xf8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c5e:	0680      	lsls	r0, r0, #26
 8004c60:	d504      	bpl.n	8004c6c <HAL_UART_IRQHandler+0xf8>
        if (huart->RxISR != NULL)
 8004c62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <HAL_UART_IRQHandler+0xf8>
          huart->RxISR(huart);
 8004c68:	0020      	movs	r0, r4
 8004c6a:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8004c6c:	2380      	movs	r3, #128	; 0x80
 8004c6e:	58e2      	ldr	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c70:	6823      	ldr	r3, [r4, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	065b      	lsls	r3, r3, #25
 8004c76:	d402      	bmi.n	8004c7e <HAL_UART_IRQHandler+0x10a>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c78:	2328      	movs	r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c7a:	4213      	tst	r3, r2
 8004c7c:	d029      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x15e>
        UART_EndRxTransfer(huart);
 8004c7e:	0020      	movs	r0, r4
 8004c80:	f7ff fe6a 	bl	8004958 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	065b      	lsls	r3, r3, #25
 8004c8a:	d51e      	bpl.n	8004cca <HAL_UART_IRQHandler+0x156>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c8c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c90:	2301      	movs	r3, #1
 8004c92:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c96:	6822      	ldr	r2, [r4, #0]
 8004c98:	6893      	ldr	r3, [r2, #8]
 8004c9a:	2040      	movs	r0, #64	; 0x40
 8004c9c:	4383      	bics	r3, r0
 8004c9e:	6093      	str	r3, [r2, #8]
 8004ca0:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8004ca4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00b      	beq.n	8004cc2 <HAL_UART_IRQHandler+0x14e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004caa:	4a63      	ldr	r2, [pc, #396]	; (8004e38 <HAL_UART_IRQHandler+0x2c4>)
 8004cac:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cae:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004cb0:	f7fe fbc3 	bl	800343a <HAL_DMA_Abort_IT>
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	d100      	bne.n	8004cba <HAL_UART_IRQHandler+0x146>
 8004cb8:	e788      	b.n	8004bcc <HAL_UART_IRQHandler+0x58>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cba:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004cbc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004cbe:	4798      	blx	r3
 8004cc0:	e784      	b.n	8004bcc <HAL_UART_IRQHandler+0x58>
            HAL_UART_ErrorCallback(huart);
 8004cc2:	0020      	movs	r0, r4
 8004cc4:	f7ff ff23 	bl	8004b0e <HAL_UART_ErrorCallback>
 8004cc8:	e780      	b.n	8004bcc <HAL_UART_IRQHandler+0x58>
          HAL_UART_ErrorCallback(huart);
 8004cca:	0020      	movs	r0, r4
 8004ccc:	f7ff ff1f 	bl	8004b0e <HAL_UART_ErrorCallback>
 8004cd0:	e77c      	b.n	8004bcc <HAL_UART_IRQHandler+0x58>
        HAL_UART_ErrorCallback(huart);
 8004cd2:	0020      	movs	r0, r4
 8004cd4:	f7ff ff1b 	bl	8004b0e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd8:	2380      	movs	r3, #128	; 0x80
 8004cda:	2200      	movs	r2, #0
 8004cdc:	50e2      	str	r2, [r4, r3]
    return;
 8004cde:	e775      	b.n	8004bcc <HAL_UART_IRQHandler+0x58>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ce0:	06d9      	lsls	r1, r3, #27
 8004ce2:	d400      	bmi.n	8004ce6 <HAL_UART_IRQHandler+0x172>
 8004ce4:	e763      	b.n	8004bae <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ce6:	06c1      	lsls	r1, r0, #27
 8004ce8:	d400      	bmi.n	8004cec <HAL_UART_IRQHandler+0x178>
 8004cea:	e760      	b.n	8004bae <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cec:	2310      	movs	r3, #16
 8004cee:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	065b      	lsls	r3, r3, #25
 8004cf6:	d550      	bpl.n	8004d9a <HAL_UART_IRQHandler+0x226>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cf8:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8004cfa:	6813      	ldr	r3, [r2, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d100      	bne.n	8004d06 <HAL_UART_IRQHandler+0x192>
 8004d04:	e762      	b.n	8004bcc <HAL_UART_IRQHandler+0x58>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d06:	2158      	movs	r1, #88	; 0x58
 8004d08:	5a61      	ldrh	r1, [r4, r1]
 8004d0a:	4299      	cmp	r1, r3
 8004d0c:	d800      	bhi.n	8004d10 <HAL_UART_IRQHandler+0x19c>
 8004d0e:	e75d      	b.n	8004bcc <HAL_UART_IRQHandler+0x58>
        huart->RxXferCount = nb_remaining_rx_data;
 8004d10:	215a      	movs	r1, #90	; 0x5a
 8004d12:	5263      	strh	r3, [r4, r1]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004d14:	6813      	ldr	r3, [r2, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	069b      	lsls	r3, r3, #26
 8004d1a:	d509      	bpl.n	8004d30 <HAL_UART_IRQHandler+0x1bc>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d1c:	2358      	movs	r3, #88	; 0x58
 8004d1e:	5ae1      	ldrh	r1, [r4, r3]
 8004d20:	3302      	adds	r3, #2
 8004d22:	5ae3      	ldrh	r3, [r4, r3]
 8004d24:	1ac9      	subs	r1, r1, r3
 8004d26:	b289      	uxth	r1, r1
 8004d28:	0020      	movs	r0, r4
 8004d2a:	f7ff ff22 	bl	8004b72 <HAL_UARTEx_RxEventCallback>
      return;
 8004d2e:	e74d      	b.n	8004bcc <HAL_UART_IRQHandler+0x58>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d30:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d34:	2301      	movs	r3, #1
 8004d36:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d3a:	6821      	ldr	r1, [r4, #0]
 8004d3c:	680a      	ldr	r2, [r1, #0]
 8004d3e:	4d3f      	ldr	r5, [pc, #252]	; (8004e3c <HAL_UART_IRQHandler+0x2c8>)
 8004d40:	402a      	ands	r2, r5
 8004d42:	600a      	str	r2, [r1, #0]
 8004d44:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d48:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d4c:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d50:	6821      	ldr	r1, [r4, #0]
 8004d52:	688a      	ldr	r2, [r1, #8]
 8004d54:	439a      	bics	r2, r3
 8004d56:	608a      	str	r2, [r1, #8]
 8004d58:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d5c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d60:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d64:	6821      	ldr	r1, [r4, #0]
 8004d66:	688a      	ldr	r2, [r1, #8]
 8004d68:	3542      	adds	r5, #66	; 0x42
 8004d6a:	35ff      	adds	r5, #255	; 0xff
 8004d6c:	43aa      	bics	r2, r5
 8004d6e:	608a      	str	r2, [r1, #8]
 8004d70:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 8004d74:	2220      	movs	r2, #32
 8004d76:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d78:	2200      	movs	r2, #0
 8004d7a:	6622      	str	r2, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d7c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d80:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d84:	6822      	ldr	r2, [r4, #0]
 8004d86:	6813      	ldr	r3, [r2, #0]
 8004d88:	2010      	movs	r0, #16
 8004d8a:	4383      	bics	r3, r0
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d92:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004d94:	f7fe fb2d 	bl	80033f2 <HAL_DMA_Abort>
 8004d98:	e7c0      	b.n	8004d1c <HAL_UART_IRQHandler+0x1a8>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d9a:	2358      	movs	r3, #88	; 0x58
 8004d9c:	5ae3      	ldrh	r3, [r4, r3]
 8004d9e:	225a      	movs	r2, #90	; 0x5a
 8004da0:	5aa1      	ldrh	r1, [r4, r2]
 8004da2:	1a59      	subs	r1, r3, r1
 8004da4:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8004da6:	5aa3      	ldrh	r3, [r4, r2]
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d100      	bne.n	8004db0 <HAL_UART_IRQHandler+0x23c>
 8004dae:	e70d      	b.n	8004bcc <HAL_UART_IRQHandler+0x58>
          && (nb_rx_data > 0U))
 8004db0:	2900      	cmp	r1, #0
 8004db2:	d100      	bne.n	8004db6 <HAL_UART_IRQHandler+0x242>
 8004db4:	e70a      	b.n	8004bcc <HAL_UART_IRQHandler+0x58>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004db6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dba:	2301      	movs	r3, #1
 8004dbc:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dc0:	6820      	ldr	r0, [r4, #0]
 8004dc2:	6802      	ldr	r2, [r0, #0]
 8004dc4:	4e1e      	ldr	r6, [pc, #120]	; (8004e40 <HAL_UART_IRQHandler+0x2cc>)
 8004dc6:	4032      	ands	r2, r6
 8004dc8:	6002      	str	r2, [r0, #0]
 8004dca:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dce:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd2:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd6:	6820      	ldr	r0, [r4, #0]
 8004dd8:	6882      	ldr	r2, [r0, #8]
 8004dda:	439a      	bics	r2, r3
 8004ddc:	6082      	str	r2, [r0, #8]
 8004dde:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 8004de2:	2220      	movs	r2, #32
 8004de4:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de6:	2200      	movs	r2, #0
 8004de8:	6622      	str	r2, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 8004dea:	6662      	str	r2, [r4, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dec:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df0:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df4:	6822      	ldr	r2, [r4, #0]
 8004df6:	6813      	ldr	r3, [r2, #0]
 8004df8:	2510      	movs	r5, #16
 8004dfa:	43ab      	bics	r3, r5
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	f380 8810 	msr	PRIMASK, r0
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e02:	0020      	movs	r0, r4
 8004e04:	f7ff feb5 	bl	8004b72 <HAL_UARTEx_RxEventCallback>
      return;
 8004e08:	e6e0      	b.n	8004bcc <HAL_UART_IRQHandler+0x58>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e0a:	2380      	movs	r3, #128	; 0x80
 8004e0c:	035b      	lsls	r3, r3, #13
 8004e0e:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8004e10:	0020      	movs	r0, r4
 8004e12:	f000 fbb1 	bl	8005578 <HAL_UARTEx_WakeupCallback>
    return;
 8004e16:	e6d9      	b.n	8004bcc <HAL_UART_IRQHandler+0x58>
    if (huart->TxISR != NULL)
 8004e18:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d100      	bne.n	8004e20 <HAL_UART_IRQHandler+0x2ac>
 8004e1e:	e6d5      	b.n	8004bcc <HAL_UART_IRQHandler+0x58>
      huart->TxISR(huart);
 8004e20:	0020      	movs	r0, r4
 8004e22:	4798      	blx	r3
    return;
 8004e24:	e6d2      	b.n	8004bcc <HAL_UART_IRQHandler+0x58>
    UART_EndTransmit_IT(huart);
 8004e26:	0020      	movs	r0, r4
 8004e28:	f7ff fe56 	bl	8004ad8 <UART_EndTransmit_IT>
    return;
 8004e2c:	e6ce      	b.n	8004bcc <HAL_UART_IRQHandler+0x58>
 8004e2e:	46c0      	nop			; (mov r8, r8)
 8004e30:	0000080f 	.word	0x0000080f
 8004e34:	04000120 	.word	0x04000120
 8004e38:	08004b5f 	.word	0x08004b5f
 8004e3c:	fffffeff 	.word	0xfffffeff
 8004e40:	fffffedf 	.word	0xfffffedf

08004e44 <UART_DMARxHalfCplt>:
{
 8004e44:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e46:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e48:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d002      	beq.n	8004e54 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8004e4e:	f7ff fe5d 	bl	8004b0c <HAL_UART_RxHalfCpltCallback>
}
 8004e52:	bd10      	pop	{r4, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004e54:	3357      	adds	r3, #87	; 0x57
 8004e56:	5ac1      	ldrh	r1, [r0, r3]
 8004e58:	0849      	lsrs	r1, r1, #1
 8004e5a:	f7ff fe8a 	bl	8004b72 <HAL_UARTEx_RxEventCallback>
 8004e5e:	e7f8      	b.n	8004e52 <UART_DMARxHalfCplt+0xe>

08004e60 <UART_DMAReceiveCplt>:
{
 8004e60:	b570      	push	{r4, r5, r6, lr}
 8004e62:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e64:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	069b      	lsls	r3, r3, #26
 8004e6c:	d428      	bmi.n	8004ec0 <UART_DMAReceiveCplt+0x60>
    huart->RxXferCount = 0U;
 8004e6e:	235a      	movs	r3, #90	; 0x5a
 8004e70:	2200      	movs	r2, #0
 8004e72:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e74:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e78:	3b59      	subs	r3, #89	; 0x59
 8004e7a:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e7e:	6801      	ldr	r1, [r0, #0]
 8004e80:	680a      	ldr	r2, [r1, #0]
 8004e82:	4d1b      	ldr	r5, [pc, #108]	; (8004ef0 <UART_DMAReceiveCplt+0x90>)
 8004e84:	402a      	ands	r2, r5
 8004e86:	600a      	str	r2, [r1, #0]
 8004e88:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e8c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e90:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e94:	6801      	ldr	r1, [r0, #0]
 8004e96:	688a      	ldr	r2, [r1, #8]
 8004e98:	439a      	bics	r2, r3
 8004e9a:	608a      	str	r2, [r1, #8]
 8004e9c:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ea0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ea4:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ea8:	6802      	ldr	r2, [r0, #0]
 8004eaa:	6893      	ldr	r3, [r2, #8]
 8004eac:	2440      	movs	r4, #64	; 0x40
 8004eae:	43a3      	bics	r3, r4
 8004eb0:	6093      	str	r3, [r2, #8]
 8004eb2:	f381 8810 	msr	PRIMASK, r1
    huart->RxState = HAL_UART_STATE_READY;
 8004eb6:	2320      	movs	r3, #32
 8004eb8:	67c3      	str	r3, [r0, #124]	; 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eba:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d005      	beq.n	8004ecc <UART_DMAReceiveCplt+0x6c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d00e      	beq.n	8004ee4 <UART_DMAReceiveCplt+0x84>
    HAL_UART_RxCpltCallback(huart);
 8004ec6:	f002 fc2d 	bl	8007724 <HAL_UART_RxCpltCallback>
}
 8004eca:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ecc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed0:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ed4:	6802      	ldr	r2, [r0, #0]
 8004ed6:	6813      	ldr	r3, [r2, #0]
 8004ed8:	3c30      	subs	r4, #48	; 0x30
 8004eda:	43a3      	bics	r3, r4
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	f381 8810 	msr	PRIMASK, r1
}
 8004ee2:	e7ed      	b.n	8004ec0 <UART_DMAReceiveCplt+0x60>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ee4:	3357      	adds	r3, #87	; 0x57
 8004ee6:	5ac1      	ldrh	r1, [r0, r3]
 8004ee8:	f7ff fe43 	bl	8004b72 <HAL_UARTEx_RxEventCallback>
 8004eec:	e7ed      	b.n	8004eca <UART_DMAReceiveCplt+0x6a>
 8004eee:	46c0      	nop			; (mov r8, r8)
 8004ef0:	fffffeff 	.word	0xfffffeff

08004ef4 <UART_SetConfig>:
{
 8004ef4:	b5d0      	push	{r4, r6, r7, lr}
 8004ef6:	0004      	movs	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ef8:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004efa:	6883      	ldr	r3, [r0, #8]
 8004efc:	6902      	ldr	r2, [r0, #16]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	6942      	ldr	r2, [r0, #20]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	69c2      	ldr	r2, [r0, #28]
 8004f06:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f08:	680a      	ldr	r2, [r1, #0]
 8004f0a:	489a      	ldr	r0, [pc, #616]	; (8005174 <UART_SetConfig+0x280>)
 8004f0c:	4002      	ands	r2, r0
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f12:	6822      	ldr	r2, [r4, #0]
 8004f14:	6853      	ldr	r3, [r2, #4]
 8004f16:	4998      	ldr	r1, [pc, #608]	; (8005178 <UART_SetConfig+0x284>)
 8004f18:	400b      	ands	r3, r1
 8004f1a:	68e1      	ldr	r1, [r4, #12]
 8004f1c:	430b      	orrs	r3, r1
 8004f1e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f20:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f22:	6822      	ldr	r2, [r4, #0]
 8004f24:	4b95      	ldr	r3, [pc, #596]	; (800517c <UART_SetConfig+0x288>)
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d001      	beq.n	8004f2e <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8004f2a:	6a23      	ldr	r3, [r4, #32]
 8004f2c:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f2e:	6893      	ldr	r3, [r2, #8]
 8004f30:	4893      	ldr	r0, [pc, #588]	; (8005180 <UART_SetConfig+0x28c>)
 8004f32:	4003      	ands	r3, r0
 8004f34:	430b      	orrs	r3, r1
 8004f36:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f38:	6822      	ldr	r2, [r4, #0]
 8004f3a:	4b92      	ldr	r3, [pc, #584]	; (8005184 <UART_SetConfig+0x290>)
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d00d      	beq.n	8004f5c <UART_SetConfig+0x68>
 8004f40:	4b91      	ldr	r3, [pc, #580]	; (8005188 <UART_SetConfig+0x294>)
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d02a      	beq.n	8004f9c <UART_SetConfig+0xa8>
 8004f46:	4b91      	ldr	r3, [pc, #580]	; (800518c <UART_SetConfig+0x298>)
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d05e      	beq.n	800500a <UART_SetConfig+0x116>
 8004f4c:	4b90      	ldr	r3, [pc, #576]	; (8005190 <UART_SetConfig+0x29c>)
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d05d      	beq.n	800500e <UART_SetConfig+0x11a>
 8004f52:	4b8a      	ldr	r3, [pc, #552]	; (800517c <UART_SetConfig+0x288>)
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d032      	beq.n	8004fbe <UART_SetConfig+0xca>
 8004f58:	2310      	movs	r3, #16
 8004f5a:	e00b      	b.n	8004f74 <UART_SetConfig+0x80>
 8004f5c:	4b8d      	ldr	r3, [pc, #564]	; (8005194 <UART_SetConfig+0x2a0>)
 8004f5e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004f60:	2303      	movs	r3, #3
 8004f62:	400b      	ands	r3, r1
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d042      	beq.n	8004fee <UART_SetConfig+0xfa>
 8004f68:	d814      	bhi.n	8004f94 <UART_SetConfig+0xa0>
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d041      	beq.n	8004ff2 <UART_SetConfig+0xfe>
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d141      	bne.n	8004ff6 <UART_SetConfig+0x102>
 8004f72:	3303      	adds	r3, #3
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f74:	4981      	ldr	r1, [pc, #516]	; (800517c <UART_SetConfig+0x288>)
 8004f76:	428a      	cmp	r2, r1
 8004f78:	d053      	beq.n	8005022 <UART_SetConfig+0x12e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f7a:	69e0      	ldr	r0, [r4, #28]
 8004f7c:	2280      	movs	r2, #128	; 0x80
 8004f7e:	0212      	lsls	r2, r2, #8
 8004f80:	4290      	cmp	r0, r2
 8004f82:	d100      	bne.n	8004f86 <UART_SetConfig+0x92>
 8004f84:	e08a      	b.n	800509c <UART_SetConfig+0x1a8>
    switch (clocksource)
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	d900      	bls.n	8004f8c <UART_SetConfig+0x98>
 8004f8a:	e0ec      	b.n	8005166 <UART_SetConfig+0x272>
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4a82      	ldr	r2, [pc, #520]	; (8005198 <UART_SetConfig+0x2a4>)
 8004f90:	58d3      	ldr	r3, [r2, r3]
 8004f92:	469f      	mov	pc, r3
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f94:	2b03      	cmp	r3, #3
 8004f96:	d130      	bne.n	8004ffa <UART_SetConfig+0x106>
 8004f98:	3305      	adds	r3, #5
 8004f9a:	e7eb      	b.n	8004f74 <UART_SetConfig+0x80>
 8004f9c:	4b7d      	ldr	r3, [pc, #500]	; (8005194 <UART_SetConfig+0x2a0>)
 8004f9e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004fa0:	230c      	movs	r3, #12
 8004fa2:	400b      	ands	r3, r1
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d02a      	beq.n	8004ffe <UART_SetConfig+0x10a>
 8004fa8:	d805      	bhi.n	8004fb6 <UART_SetConfig+0xc2>
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d029      	beq.n	8005002 <UART_SetConfig+0x10e>
 8004fae:	2b04      	cmp	r3, #4
 8004fb0:	d0e0      	beq.n	8004f74 <UART_SetConfig+0x80>
 8004fb2:	2310      	movs	r3, #16
 8004fb4:	e7de      	b.n	8004f74 <UART_SetConfig+0x80>
 8004fb6:	2b0c      	cmp	r3, #12
 8004fb8:	d125      	bne.n	8005006 <UART_SetConfig+0x112>
 8004fba:	3b04      	subs	r3, #4
 8004fbc:	e7da      	b.n	8004f74 <UART_SetConfig+0x80>
 8004fbe:	4b75      	ldr	r3, [pc, #468]	; (8005194 <UART_SetConfig+0x2a0>)
 8004fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc2:	21c0      	movs	r1, #192	; 0xc0
 8004fc4:	0109      	lsls	r1, r1, #4
 8004fc6:	400b      	ands	r3, r1
 8004fc8:	2180      	movs	r1, #128	; 0x80
 8004fca:	0109      	lsls	r1, r1, #4
 8004fcc:	428b      	cmp	r3, r1
 8004fce:	d020      	beq.n	8005012 <UART_SetConfig+0x11e>
 8004fd0:	d807      	bhi.n	8004fe2 <UART_SetConfig+0xee>
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d01f      	beq.n	8005016 <UART_SetConfig+0x122>
 8004fd6:	2180      	movs	r1, #128	; 0x80
 8004fd8:	00c9      	lsls	r1, r1, #3
 8004fda:	428b      	cmp	r3, r1
 8004fdc:	d11d      	bne.n	800501a <UART_SetConfig+0x126>
 8004fde:	2304      	movs	r3, #4
 8004fe0:	e7c8      	b.n	8004f74 <UART_SetConfig+0x80>
 8004fe2:	21c0      	movs	r1, #192	; 0xc0
 8004fe4:	0109      	lsls	r1, r1, #4
 8004fe6:	428b      	cmp	r3, r1
 8004fe8:	d119      	bne.n	800501e <UART_SetConfig+0x12a>
 8004fea:	2308      	movs	r3, #8
 8004fec:	e7c2      	b.n	8004f74 <UART_SetConfig+0x80>
 8004fee:	2302      	movs	r3, #2
 8004ff0:	e7c0      	b.n	8004f74 <UART_SetConfig+0x80>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e7be      	b.n	8004f74 <UART_SetConfig+0x80>
 8004ff6:	2310      	movs	r3, #16
 8004ff8:	e7bc      	b.n	8004f74 <UART_SetConfig+0x80>
 8004ffa:	2310      	movs	r3, #16
 8004ffc:	e7ba      	b.n	8004f74 <UART_SetConfig+0x80>
 8004ffe:	2302      	movs	r3, #2
 8005000:	e7b8      	b.n	8004f74 <UART_SetConfig+0x80>
 8005002:	2300      	movs	r3, #0
 8005004:	e7b6      	b.n	8004f74 <UART_SetConfig+0x80>
 8005006:	2310      	movs	r3, #16
 8005008:	e7b4      	b.n	8004f74 <UART_SetConfig+0x80>
 800500a:	2300      	movs	r3, #0
 800500c:	e7b2      	b.n	8004f74 <UART_SetConfig+0x80>
 800500e:	2300      	movs	r3, #0
 8005010:	e7b0      	b.n	8004f74 <UART_SetConfig+0x80>
 8005012:	2302      	movs	r3, #2
 8005014:	e7ae      	b.n	8004f74 <UART_SetConfig+0x80>
 8005016:	2300      	movs	r3, #0
 8005018:	e7ac      	b.n	8004f74 <UART_SetConfig+0x80>
 800501a:	2310      	movs	r3, #16
 800501c:	e7aa      	b.n	8004f74 <UART_SetConfig+0x80>
 800501e:	2310      	movs	r3, #16
 8005020:	e7a8      	b.n	8004f74 <UART_SetConfig+0x80>
    switch (clocksource)
 8005022:	2b04      	cmp	r3, #4
 8005024:	d035      	beq.n	8005092 <UART_SetConfig+0x19e>
 8005026:	d80b      	bhi.n	8005040 <UART_SetConfig+0x14c>
 8005028:	2b00      	cmp	r3, #0
 800502a:	d02c      	beq.n	8005086 <UART_SetConfig+0x192>
 800502c:	2b02      	cmp	r3, #2
 800502e:	d105      	bne.n	800503c <UART_SetConfig+0x148>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005030:	4b58      	ldr	r3, [pc, #352]	; (8005194 <UART_SetConfig+0x2a0>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	06db      	lsls	r3, r3, #27
 8005036:	d42f      	bmi.n	8005098 <UART_SetConfig+0x1a4>
          pclk = (uint32_t) HSI_VALUE;
 8005038:	4858      	ldr	r0, [pc, #352]	; (800519c <UART_SetConfig+0x2a8>)
 800503a:	e005      	b.n	8005048 <UART_SetConfig+0x154>
    switch (clocksource)
 800503c:	2001      	movs	r0, #1
 800503e:	e071      	b.n	8005124 <UART_SetConfig+0x230>
 8005040:	2b08      	cmp	r3, #8
 8005042:	d11e      	bne.n	8005082 <UART_SetConfig+0x18e>
 8005044:	2080      	movs	r0, #128	; 0x80
 8005046:	0200      	lsls	r0, r0, #8
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005048:	6862      	ldr	r2, [r4, #4]
 800504a:	0053      	lsls	r3, r2, #1
 800504c:	189b      	adds	r3, r3, r2
 800504e:	4283      	cmp	r3, r0
 8005050:	d900      	bls.n	8005054 <UART_SetConfig+0x160>
 8005052:	e07c      	b.n	800514e <UART_SetConfig+0x25a>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005054:	0313      	lsls	r3, r2, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005056:	4283      	cmp	r3, r0
 8005058:	d200      	bcs.n	800505c <UART_SetConfig+0x168>
 800505a:	e07a      	b.n	8005152 <UART_SetConfig+0x25e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800505c:	0e07      	lsrs	r7, r0, #24
 800505e:	0206      	lsls	r6, r0, #8
 8005060:	0850      	lsrs	r0, r2, #1
 8005062:	2100      	movs	r1, #0
 8005064:	1980      	adds	r0, r0, r6
 8005066:	4179      	adcs	r1, r7
 8005068:	2300      	movs	r3, #0
 800506a:	f7fb fa1d 	bl	80004a8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800506e:	4b4c      	ldr	r3, [pc, #304]	; (80051a0 <UART_SetConfig+0x2ac>)
 8005070:	18c2      	adds	r2, r0, r3
 8005072:	4b4c      	ldr	r3, [pc, #304]	; (80051a4 <UART_SetConfig+0x2b0>)
 8005074:	429a      	cmp	r2, r3
 8005076:	d900      	bls.n	800507a <UART_SetConfig+0x186>
 8005078:	e06d      	b.n	8005156 <UART_SetConfig+0x262>
          huart->Instance->BRR = usartdiv;
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	60d8      	str	r0, [r3, #12]
 800507e:	2000      	movs	r0, #0
 8005080:	e050      	b.n	8005124 <UART_SetConfig+0x230>
    switch (clocksource)
 8005082:	2001      	movs	r0, #1
 8005084:	e04e      	b.n	8005124 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005086:	f7ff f8c3 	bl	8004210 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800508a:	2800      	cmp	r0, #0
 800508c:	d1dc      	bne.n	8005048 <UART_SetConfig+0x154>
 800508e:	2000      	movs	r0, #0
 8005090:	e048      	b.n	8005124 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 8005092:	f7fe fca7 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
        break;
 8005096:	e7f8      	b.n	800508a <UART_SetConfig+0x196>
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005098:	4843      	ldr	r0, [pc, #268]	; (80051a8 <UART_SetConfig+0x2b4>)
 800509a:	e7d5      	b.n	8005048 <UART_SetConfig+0x154>
    switch (clocksource)
 800509c:	2b08      	cmp	r3, #8
 800509e:	d85c      	bhi.n	800515a <UART_SetConfig+0x266>
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4a42      	ldr	r2, [pc, #264]	; (80051ac <UART_SetConfig+0x2b8>)
 80050a4:	58d3      	ldr	r3, [r2, r3]
 80050a6:	469f      	mov	pc, r3
        pclk = HAL_RCC_GetPCLK1Freq();
 80050a8:	f7ff f8b2 	bl	8004210 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80050ac:	2800      	cmp	r0, #0
 80050ae:	d056      	beq.n	800515e <UART_SetConfig+0x26a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050b0:	0040      	lsls	r0, r0, #1
 80050b2:	6861      	ldr	r1, [r4, #4]
 80050b4:	084b      	lsrs	r3, r1, #1
 80050b6:	18c0      	adds	r0, r0, r3
 80050b8:	f7fb f842 	bl	8000140 <__udivsi3>
 80050bc:	b283      	uxth	r3, r0
 80050be:	0400      	lsls	r0, r0, #16
 80050c0:	0c00      	lsrs	r0, r0, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050c2:	0001      	movs	r1, r0
 80050c4:	3910      	subs	r1, #16
 80050c6:	4a3a      	ldr	r2, [pc, #232]	; (80051b0 <UART_SetConfig+0x2bc>)
 80050c8:	4291      	cmp	r1, r2
 80050ca:	d84a      	bhi.n	8005162 <UART_SetConfig+0x26e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050cc:	220f      	movs	r2, #15
 80050ce:	4393      	bics	r3, r2
 80050d0:	001a      	movs	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050d2:	0840      	lsrs	r0, r0, #1
 80050d4:	2307      	movs	r3, #7
 80050d6:	4003      	ands	r3, r0
 80050d8:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 80050da:	6822      	ldr	r2, [r4, #0]
 80050dc:	60d3      	str	r3, [r2, #12]
 80050de:	2000      	movs	r0, #0
 80050e0:	e020      	b.n	8005124 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetPCLK2Freq();
 80050e2:	f7ff f8a5 	bl	8004230 <HAL_RCC_GetPCLK2Freq>
        break;
 80050e6:	e7e1      	b.n	80050ac <UART_SetConfig+0x1b8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050e8:	4b2a      	ldr	r3, [pc, #168]	; (8005194 <UART_SetConfig+0x2a0>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	06db      	lsls	r3, r3, #27
 80050ee:	d404      	bmi.n	80050fa <UART_SetConfig+0x206>
          pclk = (uint32_t) HSI_VALUE;
 80050f0:	482a      	ldr	r0, [pc, #168]	; (800519c <UART_SetConfig+0x2a8>)
 80050f2:	e7dd      	b.n	80050b0 <UART_SetConfig+0x1bc>
        pclk = HAL_RCC_GetSysClockFreq();
 80050f4:	f7fe fc76 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
        break;
 80050f8:	e7d8      	b.n	80050ac <UART_SetConfig+0x1b8>
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80050fa:	482b      	ldr	r0, [pc, #172]	; (80051a8 <UART_SetConfig+0x2b4>)
 80050fc:	e7d8      	b.n	80050b0 <UART_SetConfig+0x1bc>
        pclk = HAL_RCC_GetPCLK1Freq();
 80050fe:	f7ff f887 	bl	8004210 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005102:	2800      	cmp	r0, #0
 8005104:	d031      	beq.n	800516a <UART_SetConfig+0x276>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005106:	6861      	ldr	r1, [r4, #4]
 8005108:	084b      	lsrs	r3, r1, #1
 800510a:	1818      	adds	r0, r3, r0
 800510c:	f7fb f818 	bl	8000140 <__udivsi3>
 8005110:	0400      	lsls	r0, r0, #16
 8005112:	0c00      	lsrs	r0, r0, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005114:	0002      	movs	r2, r0
 8005116:	3a10      	subs	r2, #16
 8005118:	4b25      	ldr	r3, [pc, #148]	; (80051b0 <UART_SetConfig+0x2bc>)
 800511a:	429a      	cmp	r2, r3
 800511c:	d827      	bhi.n	800516e <UART_SetConfig+0x27a>
        huart->Instance->BRR = usartdiv;
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	60d8      	str	r0, [r3, #12]
 8005122:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8005124:	2300      	movs	r3, #0
 8005126:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8005128:	66a3      	str	r3, [r4, #104]	; 0x68
}
 800512a:	bdd0      	pop	{r4, r6, r7, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800512c:	f7ff f880 	bl	8004230 <HAL_RCC_GetPCLK2Freq>
        break;
 8005130:	e7e7      	b.n	8005102 <UART_SetConfig+0x20e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005132:	4b18      	ldr	r3, [pc, #96]	; (8005194 <UART_SetConfig+0x2a0>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	06db      	lsls	r3, r3, #27
 8005138:	d407      	bmi.n	800514a <UART_SetConfig+0x256>
          pclk = (uint32_t) HSI_VALUE;
 800513a:	4818      	ldr	r0, [pc, #96]	; (800519c <UART_SetConfig+0x2a8>)
 800513c:	e7e3      	b.n	8005106 <UART_SetConfig+0x212>
        pclk = HAL_RCC_GetSysClockFreq();
 800513e:	f7fe fc51 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
        break;
 8005142:	e7de      	b.n	8005102 <UART_SetConfig+0x20e>
    switch (clocksource)
 8005144:	2080      	movs	r0, #128	; 0x80
 8005146:	0200      	lsls	r0, r0, #8
 8005148:	e7dd      	b.n	8005106 <UART_SetConfig+0x212>
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800514a:	4817      	ldr	r0, [pc, #92]	; (80051a8 <UART_SetConfig+0x2b4>)
 800514c:	e7db      	b.n	8005106 <UART_SetConfig+0x212>
        ret = HAL_ERROR;
 800514e:	2001      	movs	r0, #1
 8005150:	e7e8      	b.n	8005124 <UART_SetConfig+0x230>
 8005152:	2001      	movs	r0, #1
 8005154:	e7e6      	b.n	8005124 <UART_SetConfig+0x230>
          ret = HAL_ERROR;
 8005156:	2001      	movs	r0, #1
 8005158:	e7e4      	b.n	8005124 <UART_SetConfig+0x230>
    switch (clocksource)
 800515a:	2001      	movs	r0, #1
 800515c:	e7e2      	b.n	8005124 <UART_SetConfig+0x230>
 800515e:	2000      	movs	r0, #0
 8005160:	e7e0      	b.n	8005124 <UART_SetConfig+0x230>
        ret = HAL_ERROR;
 8005162:	2001      	movs	r0, #1
 8005164:	e7de      	b.n	8005124 <UART_SetConfig+0x230>
    switch (clocksource)
 8005166:	2001      	movs	r0, #1
 8005168:	e7dc      	b.n	8005124 <UART_SetConfig+0x230>
 800516a:	2000      	movs	r0, #0
 800516c:	e7da      	b.n	8005124 <UART_SetConfig+0x230>
        ret = HAL_ERROR;
 800516e:	2001      	movs	r0, #1
 8005170:	e7d8      	b.n	8005124 <UART_SetConfig+0x230>
 8005172:	46c0      	nop			; (mov r8, r8)
 8005174:	efff69f3 	.word	0xefff69f3
 8005178:	ffffcfff 	.word	0xffffcfff
 800517c:	40004800 	.word	0x40004800
 8005180:	fffff4ff 	.word	0xfffff4ff
 8005184:	40013800 	.word	0x40013800
 8005188:	40004400 	.word	0x40004400
 800518c:	40004c00 	.word	0x40004c00
 8005190:	40005000 	.word	0x40005000
 8005194:	40021000 	.word	0x40021000
 8005198:	0800df04 	.word	0x0800df04
 800519c:	00f42400 	.word	0x00f42400
 80051a0:	fffffd00 	.word	0xfffffd00
 80051a4:	000ffcff 	.word	0x000ffcff
 80051a8:	003d0900 	.word	0x003d0900
 80051ac:	0800df28 	.word	0x0800df28
 80051b0:	0000ffef 	.word	0x0000ffef

080051b4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80051b6:	07db      	lsls	r3, r3, #31
 80051b8:	d506      	bpl.n	80051c8 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051ba:	6802      	ldr	r2, [r0, #0]
 80051bc:	6853      	ldr	r3, [r2, #4]
 80051be:	492c      	ldr	r1, [pc, #176]	; (8005270 <UART_AdvFeatureConfig+0xbc>)
 80051c0:	400b      	ands	r3, r1
 80051c2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80051c4:	430b      	orrs	r3, r1
 80051c6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80051ca:	079b      	lsls	r3, r3, #30
 80051cc:	d506      	bpl.n	80051dc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051ce:	6802      	ldr	r2, [r0, #0]
 80051d0:	6853      	ldr	r3, [r2, #4]
 80051d2:	4928      	ldr	r1, [pc, #160]	; (8005274 <UART_AdvFeatureConfig+0xc0>)
 80051d4:	400b      	ands	r3, r1
 80051d6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80051d8:	430b      	orrs	r3, r1
 80051da:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80051de:	075b      	lsls	r3, r3, #29
 80051e0:	d506      	bpl.n	80051f0 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051e2:	6802      	ldr	r2, [r0, #0]
 80051e4:	6853      	ldr	r3, [r2, #4]
 80051e6:	4924      	ldr	r1, [pc, #144]	; (8005278 <UART_AdvFeatureConfig+0xc4>)
 80051e8:	400b      	ands	r3, r1
 80051ea:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80051ec:	430b      	orrs	r3, r1
 80051ee:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80051f2:	071b      	lsls	r3, r3, #28
 80051f4:	d506      	bpl.n	8005204 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051f6:	6802      	ldr	r2, [r0, #0]
 80051f8:	6853      	ldr	r3, [r2, #4]
 80051fa:	4920      	ldr	r1, [pc, #128]	; (800527c <UART_AdvFeatureConfig+0xc8>)
 80051fc:	400b      	ands	r3, r1
 80051fe:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005200:	430b      	orrs	r3, r1
 8005202:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005204:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005206:	06db      	lsls	r3, r3, #27
 8005208:	d506      	bpl.n	8005218 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800520a:	6802      	ldr	r2, [r0, #0]
 800520c:	6893      	ldr	r3, [r2, #8]
 800520e:	491c      	ldr	r1, [pc, #112]	; (8005280 <UART_AdvFeatureConfig+0xcc>)
 8005210:	400b      	ands	r3, r1
 8005212:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005214:	430b      	orrs	r3, r1
 8005216:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005218:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800521a:	069b      	lsls	r3, r3, #26
 800521c:	d506      	bpl.n	800522c <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800521e:	6802      	ldr	r2, [r0, #0]
 8005220:	6893      	ldr	r3, [r2, #8]
 8005222:	4918      	ldr	r1, [pc, #96]	; (8005284 <UART_AdvFeatureConfig+0xd0>)
 8005224:	400b      	ands	r3, r1
 8005226:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005228:	430b      	orrs	r3, r1
 800522a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800522c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800522e:	065b      	lsls	r3, r3, #25
 8005230:	d50b      	bpl.n	800524a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005232:	6802      	ldr	r2, [r0, #0]
 8005234:	6853      	ldr	r3, [r2, #4]
 8005236:	4914      	ldr	r1, [pc, #80]	; (8005288 <UART_AdvFeatureConfig+0xd4>)
 8005238:	400b      	ands	r3, r1
 800523a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800523c:	430b      	orrs	r3, r1
 800523e:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005240:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005242:	2380      	movs	r3, #128	; 0x80
 8005244:	035b      	lsls	r3, r3, #13
 8005246:	429a      	cmp	r2, r3
 8005248:	d00a      	beq.n	8005260 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800524a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800524c:	061b      	lsls	r3, r3, #24
 800524e:	d506      	bpl.n	800525e <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005250:	6802      	ldr	r2, [r0, #0]
 8005252:	6853      	ldr	r3, [r2, #4]
 8005254:	490d      	ldr	r1, [pc, #52]	; (800528c <UART_AdvFeatureConfig+0xd8>)
 8005256:	400b      	ands	r3, r1
 8005258:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800525a:	430b      	orrs	r3, r1
 800525c:	6053      	str	r3, [r2, #4]
}
 800525e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005260:	6802      	ldr	r2, [r0, #0]
 8005262:	6853      	ldr	r3, [r2, #4]
 8005264:	490a      	ldr	r1, [pc, #40]	; (8005290 <UART_AdvFeatureConfig+0xdc>)
 8005266:	400b      	ands	r3, r1
 8005268:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800526a:	430b      	orrs	r3, r1
 800526c:	6053      	str	r3, [r2, #4]
 800526e:	e7ec      	b.n	800524a <UART_AdvFeatureConfig+0x96>
 8005270:	fffdffff 	.word	0xfffdffff
 8005274:	fffeffff 	.word	0xfffeffff
 8005278:	fffbffff 	.word	0xfffbffff
 800527c:	ffff7fff 	.word	0xffff7fff
 8005280:	ffffefff 	.word	0xffffefff
 8005284:	ffffdfff 	.word	0xffffdfff
 8005288:	ffefffff 	.word	0xffefffff
 800528c:	fff7ffff 	.word	0xfff7ffff
 8005290:	ff9fffff 	.word	0xff9fffff

08005294 <UART_WaitOnFlagUntilTimeout>:
{
 8005294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005296:	46ce      	mov	lr, r9
 8005298:	4647      	mov	r7, r8
 800529a:	b580      	push	{r7, lr}
 800529c:	0006      	movs	r6, r0
 800529e:	000d      	movs	r5, r1
 80052a0:	0017      	movs	r7, r2
 80052a2:	4699      	mov	r9, r3
 80052a4:	9b08      	ldr	r3, [sp, #32]
 80052a6:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052a8:	6833      	ldr	r3, [r6, #0]
 80052aa:	69dc      	ldr	r4, [r3, #28]
 80052ac:	402c      	ands	r4, r5
 80052ae:	1b64      	subs	r4, r4, r5
 80052b0:	4263      	negs	r3, r4
 80052b2:	415c      	adcs	r4, r3
 80052b4:	42bc      	cmp	r4, r7
 80052b6:	d153      	bne.n	8005360 <UART_WaitOnFlagUntilTimeout+0xcc>
    if (Timeout != HAL_MAX_DELAY)
 80052b8:	4643      	mov	r3, r8
 80052ba:	3301      	adds	r3, #1
 80052bc:	d0f4      	beq.n	80052a8 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052be:	f7fd fc05 	bl	8002acc <HAL_GetTick>
 80052c2:	464b      	mov	r3, r9
 80052c4:	1ac0      	subs	r0, r0, r3
 80052c6:	4540      	cmp	r0, r8
 80052c8:	d82c      	bhi.n	8005324 <UART_WaitOnFlagUntilTimeout+0x90>
 80052ca:	4643      	mov	r3, r8
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d029      	beq.n	8005324 <UART_WaitOnFlagUntilTimeout+0x90>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052d0:	6832      	ldr	r2, [r6, #0]
 80052d2:	6813      	ldr	r3, [r2, #0]
 80052d4:	075b      	lsls	r3, r3, #29
 80052d6:	d5e7      	bpl.n	80052a8 <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052d8:	69d3      	ldr	r3, [r2, #28]
 80052da:	051b      	lsls	r3, r3, #20
 80052dc:	d5e4      	bpl.n	80052a8 <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052de:	2380      	movs	r3, #128	; 0x80
 80052e0:	011b      	lsls	r3, r3, #4
 80052e2:	6213      	str	r3, [r2, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052e4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e8:	2201      	movs	r2, #1
 80052ea:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052ee:	6831      	ldr	r1, [r6, #0]
 80052f0:	680b      	ldr	r3, [r1, #0]
 80052f2:	4c1e      	ldr	r4, [pc, #120]	; (800536c <UART_WaitOnFlagUntilTimeout+0xd8>)
 80052f4:	4023      	ands	r3, r4
 80052f6:	600b      	str	r3, [r1, #0]
 80052f8:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052fc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005300:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005304:	6831      	ldr	r1, [r6, #0]
 8005306:	688b      	ldr	r3, [r1, #8]
 8005308:	4393      	bics	r3, r2
 800530a:	608b      	str	r3, [r1, #8]
 800530c:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8005310:	2320      	movs	r3, #32
 8005312:	67b3      	str	r3, [r6, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005314:	67f3      	str	r3, [r6, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005316:	327f      	adds	r2, #127	; 0x7f
 8005318:	50b3      	str	r3, [r6, r2]
          __HAL_UNLOCK(huart);
 800531a:	3354      	adds	r3, #84	; 0x54
 800531c:	2200      	movs	r2, #0
 800531e:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8005320:	2003      	movs	r0, #3
 8005322:	e01e      	b.n	8005362 <UART_WaitOnFlagUntilTimeout+0xce>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005324:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005328:	2201      	movs	r2, #1
 800532a:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800532e:	6831      	ldr	r1, [r6, #0]
 8005330:	680b      	ldr	r3, [r1, #0]
 8005332:	4c0e      	ldr	r4, [pc, #56]	; (800536c <UART_WaitOnFlagUntilTimeout+0xd8>)
 8005334:	4023      	ands	r3, r4
 8005336:	600b      	str	r3, [r1, #0]
 8005338:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800533c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005340:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005344:	6831      	ldr	r1, [r6, #0]
 8005346:	688b      	ldr	r3, [r1, #8]
 8005348:	4393      	bics	r3, r2
 800534a:	608b      	str	r3, [r1, #8]
 800534c:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8005350:	2320      	movs	r3, #32
 8005352:	67b3      	str	r3, [r6, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005354:	67f3      	str	r3, [r6, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8005356:	3354      	adds	r3, #84	; 0x54
 8005358:	2200      	movs	r2, #0
 800535a:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 800535c:	2003      	movs	r0, #3
 800535e:	e000      	b.n	8005362 <UART_WaitOnFlagUntilTimeout+0xce>
  return HAL_OK;
 8005360:	2000      	movs	r0, #0
}
 8005362:	bcc0      	pop	{r6, r7}
 8005364:	46b9      	mov	r9, r7
 8005366:	46b0      	mov	r8, r6
 8005368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800536a:	46c0      	nop			; (mov r8, r8)
 800536c:	fffffe5f 	.word	0xfffffe5f

08005370 <UART_CheckIdleState>:
{
 8005370:	b530      	push	{r4, r5, lr}
 8005372:	b083      	sub	sp, #12
 8005374:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005376:	2380      	movs	r3, #128	; 0x80
 8005378:	2200      	movs	r2, #0
 800537a:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 800537c:	f7fd fba6 	bl	8002acc <HAL_GetTick>
 8005380:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	071b      	lsls	r3, r3, #28
 8005388:	d40d      	bmi.n	80053a6 <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	075b      	lsls	r3, r3, #29
 8005390:	d416      	bmi.n	80053c0 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8005392:	2320      	movs	r3, #32
 8005394:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005396:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005398:	2300      	movs	r3, #0
 800539a:	6623      	str	r3, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 800539c:	2274      	movs	r2, #116	; 0x74
 800539e:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 80053a0:	2000      	movs	r0, #0
}
 80053a2:	b003      	add	sp, #12
 80053a4:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053a6:	2180      	movs	r1, #128	; 0x80
 80053a8:	4b0c      	ldr	r3, [pc, #48]	; (80053dc <UART_CheckIdleState+0x6c>)
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	0003      	movs	r3, r0
 80053ae:	2200      	movs	r2, #0
 80053b0:	0389      	lsls	r1, r1, #14
 80053b2:	0020      	movs	r0, r4
 80053b4:	f7ff ff6e 	bl	8005294 <UART_WaitOnFlagUntilTimeout>
 80053b8:	2800      	cmp	r0, #0
 80053ba:	d0e6      	beq.n	800538a <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80053bc:	2003      	movs	r0, #3
 80053be:	e7f0      	b.n	80053a2 <UART_CheckIdleState+0x32>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053c0:	2180      	movs	r1, #128	; 0x80
 80053c2:	4b06      	ldr	r3, [pc, #24]	; (80053dc <UART_CheckIdleState+0x6c>)
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	002b      	movs	r3, r5
 80053c8:	2200      	movs	r2, #0
 80053ca:	03c9      	lsls	r1, r1, #15
 80053cc:	0020      	movs	r0, r4
 80053ce:	f7ff ff61 	bl	8005294 <UART_WaitOnFlagUntilTimeout>
 80053d2:	2800      	cmp	r0, #0
 80053d4:	d0dd      	beq.n	8005392 <UART_CheckIdleState+0x22>
      return HAL_TIMEOUT;
 80053d6:	2003      	movs	r0, #3
 80053d8:	e7e3      	b.n	80053a2 <UART_CheckIdleState+0x32>
 80053da:	46c0      	nop			; (mov r8, r8)
 80053dc:	01ffffff 	.word	0x01ffffff

080053e0 <HAL_UART_Init>:
{
 80053e0:	b510      	push	{r4, lr}
 80053e2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80053e4:	d02e      	beq.n	8005444 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 80053e6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d021      	beq.n	8005430 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80053ec:	2324      	movs	r3, #36	; 0x24
 80053ee:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80053f0:	6822      	ldr	r2, [r4, #0]
 80053f2:	6813      	ldr	r3, [r2, #0]
 80053f4:	2101      	movs	r1, #1
 80053f6:	438b      	bics	r3, r1
 80053f8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053fa:	0020      	movs	r0, r4
 80053fc:	f7ff fd7a 	bl	8004ef4 <UART_SetConfig>
 8005400:	2801      	cmp	r0, #1
 8005402:	d014      	beq.n	800542e <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005404:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005406:	2b00      	cmp	r3, #0
 8005408:	d118      	bne.n	800543c <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800540a:	6822      	ldr	r2, [r4, #0]
 800540c:	6853      	ldr	r3, [r2, #4]
 800540e:	490e      	ldr	r1, [pc, #56]	; (8005448 <HAL_UART_Init+0x68>)
 8005410:	400b      	ands	r3, r1
 8005412:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005414:	6822      	ldr	r2, [r4, #0]
 8005416:	6893      	ldr	r3, [r2, #8]
 8005418:	212a      	movs	r1, #42	; 0x2a
 800541a:	438b      	bics	r3, r1
 800541c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800541e:	6822      	ldr	r2, [r4, #0]
 8005420:	6813      	ldr	r3, [r2, #0]
 8005422:	3929      	subs	r1, #41	; 0x29
 8005424:	430b      	orrs	r3, r1
 8005426:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005428:	0020      	movs	r0, r4
 800542a:	f7ff ffa1 	bl	8005370 <UART_CheckIdleState>
}
 800542e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005430:	3374      	adds	r3, #116	; 0x74
 8005432:	2200      	movs	r2, #0
 8005434:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8005436:	f003 fbfd 	bl	8008c34 <HAL_UART_MspInit>
 800543a:	e7d7      	b.n	80053ec <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800543c:	0020      	movs	r0, r4
 800543e:	f7ff feb9 	bl	80051b4 <UART_AdvFeatureConfig>
 8005442:	e7e2      	b.n	800540a <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8005444:	2001      	movs	r0, #1
 8005446:	e7f2      	b.n	800542e <HAL_UART_Init+0x4e>
 8005448:	ffffb7ff 	.word	0xffffb7ff

0800544c <UART_Start_Receive_DMA>:
{
 800544c:	b570      	push	{r4, r5, r6, lr}
 800544e:	0004      	movs	r4, r0
 8005450:	0013      	movs	r3, r2
  huart->pRxBuffPtr = pData;
 8005452:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize = Size;
 8005454:	2258      	movs	r2, #88	; 0x58
 8005456:	5283      	strh	r3, [r0, r2]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005458:	3228      	adds	r2, #40	; 0x28
 800545a:	2100      	movs	r1, #0
 800545c:	5081      	str	r1, [r0, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800545e:	3a5e      	subs	r2, #94	; 0x5e
 8005460:	67c2      	str	r2, [r0, #124]	; 0x7c
  if (huart->hdmarx != NULL)
 8005462:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8005464:	2a00      	cmp	r2, #0
 8005466:	d012      	beq.n	800548e <UART_Start_Receive_DMA+0x42>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005468:	4921      	ldr	r1, [pc, #132]	; (80054f0 <UART_Start_Receive_DMA+0xa4>)
 800546a:	62d1      	str	r1, [r2, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800546c:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800546e:	4921      	ldr	r1, [pc, #132]	; (80054f4 <UART_Start_Receive_DMA+0xa8>)
 8005470:	6311      	str	r1, [r2, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005472:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8005474:	4920      	ldr	r1, [pc, #128]	; (80054f8 <UART_Start_Receive_DMA+0xac>)
 8005476:	6351      	str	r1, [r2, #52]	; 0x34
    huart->hdmarx->XferAbortCallback = NULL;
 8005478:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800547a:	2100      	movs	r1, #0
 800547c:	6391      	str	r1, [r2, #56]	; 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800547e:	6801      	ldr	r1, [r0, #0]
 8005480:	3124      	adds	r1, #36	; 0x24
 8005482:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8005484:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8005486:	f7fd ff79 	bl	800337c <HAL_DMA_Start_IT>
 800548a:	2800      	cmp	r0, #0
 800548c:	d126      	bne.n	80054dc <UART_Start_Receive_DMA+0x90>
  __HAL_UNLOCK(huart);
 800548e:	2374      	movs	r3, #116	; 0x74
 8005490:	2200      	movs	r2, #0
 8005492:	54e2      	strb	r2, [r4, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005494:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005498:	3b73      	subs	r3, #115	; 0x73
 800549a:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800549e:	6821      	ldr	r1, [r4, #0]
 80054a0:	680d      	ldr	r5, [r1, #0]
 80054a2:	3201      	adds	r2, #1
 80054a4:	32ff      	adds	r2, #255	; 0xff
 80054a6:	432a      	orrs	r2, r5
 80054a8:	600a      	str	r2, [r1, #0]
 80054aa:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ae:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054b2:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b6:	6821      	ldr	r1, [r4, #0]
 80054b8:	688a      	ldr	r2, [r1, #8]
 80054ba:	431a      	orrs	r2, r3
 80054bc:	608a      	str	r2, [r1, #8]
 80054be:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054c2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c6:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ca:	6822      	ldr	r2, [r4, #0]
 80054cc:	6893      	ldr	r3, [r2, #8]
 80054ce:	2040      	movs	r0, #64	; 0x40
 80054d0:	4303      	orrs	r3, r0
 80054d2:	6093      	str	r3, [r2, #8]
 80054d4:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 80054d8:	2000      	movs	r0, #0
}
 80054da:	bd70      	pop	{r4, r5, r6, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80054dc:	2380      	movs	r3, #128	; 0x80
 80054de:	2210      	movs	r2, #16
 80054e0:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 80054e2:	3b0c      	subs	r3, #12
 80054e4:	2200      	movs	r2, #0
 80054e6:	54e2      	strb	r2, [r4, r3]
      huart->RxState = HAL_UART_STATE_READY;
 80054e8:	3b54      	subs	r3, #84	; 0x54
 80054ea:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_ERROR;
 80054ec:	2001      	movs	r0, #1
 80054ee:	e7f4      	b.n	80054da <UART_Start_Receive_DMA+0x8e>
 80054f0:	08004e61 	.word	0x08004e61
 80054f4:	08004e45 	.word	0x08004e45
 80054f8:	08004b11 	.word	0x08004b11

080054fc <HAL_UART_Receive_DMA>:
{
 80054fc:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80054fe:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8005500:	2b20      	cmp	r3, #32
 8005502:	d12f      	bne.n	8005564 <HAL_UART_Receive_DMA+0x68>
    if ((pData == NULL) || (Size == 0U))
 8005504:	2900      	cmp	r1, #0
 8005506:	d02f      	beq.n	8005568 <HAL_UART_Receive_DMA+0x6c>
 8005508:	2a00      	cmp	r2, #0
 800550a:	d02f      	beq.n	800556c <HAL_UART_Receive_DMA+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800550c:	6884      	ldr	r4, [r0, #8]
 800550e:	2380      	movs	r3, #128	; 0x80
 8005510:	015b      	lsls	r3, r3, #5
 8005512:	429c      	cmp	r4, r3
 8005514:	d01f      	beq.n	8005556 <HAL_UART_Receive_DMA+0x5a>
    __HAL_LOCK(huart);
 8005516:	2374      	movs	r3, #116	; 0x74
 8005518:	5cc3      	ldrb	r3, [r0, r3]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d028      	beq.n	8005570 <HAL_UART_Receive_DMA+0x74>
 800551e:	2374      	movs	r3, #116	; 0x74
 8005520:	2401      	movs	r4, #1
 8005522:	54c4      	strb	r4, [r0, r3]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005524:	2300      	movs	r3, #0
 8005526:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005528:	6803      	ldr	r3, [r0, #0]
 800552a:	4c12      	ldr	r4, [pc, #72]	; (8005574 <HAL_UART_Receive_DMA+0x78>)
 800552c:	42a3      	cmp	r3, r4
 800552e:	d00f      	beq.n	8005550 <HAL_UART_Receive_DMA+0x54>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	021b      	lsls	r3, r3, #8
 8005534:	d50c      	bpl.n	8005550 <HAL_UART_Receive_DMA+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005536:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800553a:	2301      	movs	r3, #1
 800553c:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005540:	6804      	ldr	r4, [r0, #0]
 8005542:	6825      	ldr	r5, [r4, #0]
 8005544:	2380      	movs	r3, #128	; 0x80
 8005546:	04db      	lsls	r3, r3, #19
 8005548:	432b      	orrs	r3, r5
 800554a:	6023      	str	r3, [r4, #0]
 800554c:	f38c 8810 	msr	PRIMASK, ip
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005550:	f7ff ff7c 	bl	800544c <UART_Start_Receive_DMA>
 8005554:	e007      	b.n	8005566 <HAL_UART_Receive_DMA+0x6a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005556:	6903      	ldr	r3, [r0, #16]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1dc      	bne.n	8005516 <HAL_UART_Receive_DMA+0x1a>
      if ((((uint32_t)pData) & 1U) != 0U)
 800555c:	07cb      	lsls	r3, r1, #31
 800555e:	d5da      	bpl.n	8005516 <HAL_UART_Receive_DMA+0x1a>
        return  HAL_ERROR;
 8005560:	2001      	movs	r0, #1
 8005562:	e000      	b.n	8005566 <HAL_UART_Receive_DMA+0x6a>
    return HAL_BUSY;
 8005564:	2002      	movs	r0, #2
}
 8005566:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005568:	2001      	movs	r0, #1
 800556a:	e7fc      	b.n	8005566 <HAL_UART_Receive_DMA+0x6a>
 800556c:	2001      	movs	r0, #1
 800556e:	e7fa      	b.n	8005566 <HAL_UART_Receive_DMA+0x6a>
    __HAL_LOCK(huart);
 8005570:	2002      	movs	r0, #2
 8005572:	e7f8      	b.n	8005566 <HAL_UART_Receive_DMA+0x6a>
 8005574:	40004800 	.word	0x40004800

08005578 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005578:	4770      	bx	lr

0800557a <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 800557a:	2884      	cmp	r0, #132	; 0x84
 800557c:	d001      	beq.n	8005582 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 800557e:	3003      	adds	r0, #3
  }
  
  return fpriority;
}
 8005580:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005582:	2000      	movs	r0, #0
  return fpriority;
 8005584:	e7fc      	b.n	8005580 <makeFreeRtosPriority+0x6>

08005586 <inHandlerMode>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005586:	f3ef 8005 	mrs	r0, IPSR


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
 800558a:	1e43      	subs	r3, r0, #1
 800558c:	4198      	sbcs	r0, r3
}
 800558e:	4770      	bx	lr

08005590 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005590:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 8005592:	f000 fe2d 	bl	80061f0 <vTaskStartScheduler>
  
  return osOK;
}
 8005596:	2000      	movs	r0, #0
 8005598:	bd10      	pop	{r4, pc}

0800559a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800559a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800559c:	46d6      	mov	lr, sl
 800559e:	464f      	mov	r7, r9
 80055a0:	4646      	mov	r6, r8
 80055a2:	b5c0      	push	{r6, r7, lr}
 80055a4:	b086      	sub	sp, #24
 80055a6:	0004      	movs	r4, r0
 80055a8:	000f      	movs	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80055aa:	6945      	ldr	r5, [r0, #20]
 80055ac:	2d00      	cmp	r5, #0
 80055ae:	d01d      	beq.n	80055ec <osThreadCreate+0x52>
 80055b0:	6986      	ldr	r6, [r0, #24]
 80055b2:	2e00      	cmp	r6, #0
 80055b4:	d01a      	beq.n	80055ec <osThreadCreate+0x52>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055b6:	6843      	ldr	r3, [r0, #4]
 80055b8:	4698      	mov	r8, r3
 80055ba:	6803      	ldr	r3, [r0, #0]
 80055bc:	4699      	mov	r9, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80055be:	6903      	ldr	r3, [r0, #16]
 80055c0:	469a      	mov	sl, r3
 80055c2:	2308      	movs	r3, #8
 80055c4:	5ec0      	ldrsh	r0, [r0, r3]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055c6:	f7ff ffd8 	bl	800557a <makeFreeRtosPriority>
 80055ca:	9602      	str	r6, [sp, #8]
 80055cc:	9501      	str	r5, [sp, #4]
 80055ce:	9000      	str	r0, [sp, #0]
 80055d0:	003b      	movs	r3, r7
 80055d2:	4652      	mov	r2, sl
 80055d4:	4649      	mov	r1, r9
 80055d6:	4640      	mov	r0, r8
 80055d8:	f000 fdae 	bl	8006138 <xTaskCreateStatic>
 80055dc:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80055de:	9805      	ldr	r0, [sp, #20]
}
 80055e0:	b006      	add	sp, #24
 80055e2:	bce0      	pop	{r5, r6, r7}
 80055e4:	46ba      	mov	sl, r7
 80055e6:	46b1      	mov	r9, r6
 80055e8:	46a8      	mov	r8, r5
 80055ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055ec:	6865      	ldr	r5, [r4, #4]
 80055ee:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80055f0:	2308      	movs	r3, #8
 80055f2:	5ee0      	ldrsh	r0, [r4, r3]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055f4:	f7ff ffc1 	bl	800557a <makeFreeRtosPriority>
 80055f8:	8a22      	ldrh	r2, [r4, #16]
 80055fa:	ab05      	add	r3, sp, #20
 80055fc:	9301      	str	r3, [sp, #4]
 80055fe:	9000      	str	r0, [sp, #0]
 8005600:	003b      	movs	r3, r7
 8005602:	0031      	movs	r1, r6
 8005604:	0028      	movs	r0, r5
 8005606:	f000 fdc1 	bl	800618c <xTaskCreate>
 800560a:	2801      	cmp	r0, #1
 800560c:	d0e7      	beq.n	80055de <osThreadCreate+0x44>
      return NULL;
 800560e:	2000      	movs	r0, #0
 8005610:	e7e6      	b.n	80055e0 <osThreadCreate+0x46>

08005612 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005612:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005614:	2800      	cmp	r0, #0
 8005616:	d100      	bne.n	800561a <osDelay+0x8>
 8005618:	3001      	adds	r0, #1
 800561a:	f000 ff23 	bl	8006464 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800561e:	2000      	movs	r0, #0
 8005620:	bd10      	pop	{r4, pc}
	...

08005624 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8005624:	b530      	push	{r4, r5, lr}
 8005626:	b085      	sub	sp, #20
 8005628:	0004      	movs	r4, r0
 800562a:	000d      	movs	r5, r1
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800562c:	2300      	movs	r3, #0
 800562e:	9303      	str	r3, [sp, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8005630:	9302      	str	r3, [sp, #8]
  
  if (inHandlerMode())
 8005632:	f7ff ffa8 	bl	8005586 <inHandlerMode>
 8005636:	2800      	cmp	r0, #0
 8005638:	d011      	beq.n	800565e <osSignalSet+0x3a>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800563a:	ab03      	add	r3, sp, #12
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	ab02      	add	r3, sp, #8
 8005640:	2201      	movs	r2, #1
 8005642:	0029      	movs	r1, r5
 8005644:	0020      	movs	r0, r4
 8005646:	f001 f8fd 	bl	8006844 <xTaskGenericNotifyFromISR>
 800564a:	2801      	cmp	r0, #1
 800564c:	d112      	bne.n	8005674 <osSignalSet+0x50>
      return 0x80000000;
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800564e:	9b03      	ldr	r3, [sp, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00c      	beq.n	800566e <osSignalSet+0x4a>
 8005654:	4b0a      	ldr	r3, [pc, #40]	; (8005680 <osSignalSet+0x5c>)
 8005656:	2280      	movs	r2, #128	; 0x80
 8005658:	0552      	lsls	r2, r2, #21
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	e007      	b.n	800566e <osSignalSet+0x4a>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800565e:	ab02      	add	r3, sp, #8
 8005660:	2201      	movs	r2, #1
 8005662:	0029      	movs	r1, r5
 8005664:	0020      	movs	r0, r4
 8005666:	f001 f887 	bl	8006778 <xTaskGenericNotify>
 800566a:	2801      	cmp	r0, #1
 800566c:	d105      	bne.n	800567a <osSignalSet+0x56>
    return 0x80000000;
  
  return ulPreviousNotificationValue;
 800566e:	9802      	ldr	r0, [sp, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8005670:	b005      	add	sp, #20
 8005672:	bd30      	pop	{r4, r5, pc}
      return 0x80000000;
 8005674:	2080      	movs	r0, #128	; 0x80
 8005676:	0600      	lsls	r0, r0, #24
 8005678:	e7fa      	b.n	8005670 <osSignalSet+0x4c>
    return 0x80000000;
 800567a:	2080      	movs	r0, #128	; 0x80
 800567c:	0600      	lsls	r0, r0, #24
 800567e:	e7f7      	b.n	8005670 <osSignalSet+0x4c>
 8005680:	e000ed04 	.word	0xe000ed04

08005684 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8005684:	b570      	push	{r4, r5, r6, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	0004      	movs	r4, r0
 800568a:	000e      	movs	r6, r1
 800568c:	0015      	movs	r5, r2

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800568e:	2300      	movs	r3, #0
 8005690:	9302      	str	r3, [sp, #8]
    if (ticks == 0) {
      ticks = 1;
    }
  }  
  
  if (inHandlerMode())
 8005692:	f7ff ff78 	bl	8005586 <inHandlerMode>
 8005696:	2800      	cmp	r0, #0
 8005698:	d008      	beq.n	80056ac <osSignalWait+0x28>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800569a:	2382      	movs	r3, #130	; 0x82
 800569c:	9301      	str	r3, [sp, #4]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800569e:	ab01      	add	r3, sp, #4
 80056a0:	0022      	movs	r2, r4
 80056a2:	cb23      	ldmia	r3!, {r0, r1, r5}
 80056a4:	c223      	stmia	r2!, {r0, r1, r5}
}
 80056a6:	0020      	movs	r0, r4
 80056a8:	b004      	add	sp, #16
 80056aa:	bd70      	pop	{r4, r5, r6, pc}
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80056ac:	002b      	movs	r3, r5
 80056ae:	aa02      	add	r2, sp, #8
 80056b0:	0031      	movs	r1, r6
 80056b2:	2000      	movs	r0, #0
 80056b4:	f001 f81e 	bl	80066f4 <xTaskNotifyWait>
 80056b8:	2801      	cmp	r0, #1
 80056ba:	d007      	beq.n	80056cc <osSignalWait+0x48>
      if(ticks == 0)  ret.status = osOK;
 80056bc:	2d00      	cmp	r5, #0
 80056be:	d102      	bne.n	80056c6 <osSignalWait+0x42>
 80056c0:	2300      	movs	r3, #0
 80056c2:	9301      	str	r3, [sp, #4]
 80056c4:	e7eb      	b.n	800569e <osSignalWait+0x1a>
      else  ret.status = osEventTimeout;
 80056c6:	2340      	movs	r3, #64	; 0x40
 80056c8:	9301      	str	r3, [sp, #4]
 80056ca:	e7e8      	b.n	800569e <osSignalWait+0x1a>
    else if(ret.value.signals < 0)
 80056cc:	9b02      	ldr	r3, [sp, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	db02      	blt.n	80056d8 <osSignalWait+0x54>
    else  ret.status =  osEventSignal;
 80056d2:	2308      	movs	r3, #8
 80056d4:	9301      	str	r3, [sp, #4]
 80056d6:	e7e2      	b.n	800569e <osSignalWait+0x1a>
      ret.status =  osErrorValue;     
 80056d8:	2386      	movs	r3, #134	; 0x86
 80056da:	9301      	str	r3, [sp, #4]
 80056dc:	e7df      	b.n	800569e <osSignalWait+0x1a>

080056de <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80056de:	b510      	push	{r4, lr}
 80056e0:	b082      	sub	sp, #8
 80056e2:	0001      	movs	r1, r0
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80056e4:	6882      	ldr	r2, [r0, #8]
 80056e6:	2a00      	cmp	r2, #0
 80056e8:	d009      	beq.n	80056fe <osMessageCreate+0x20>
 80056ea:	68c3      	ldr	r3, [r0, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d006      	beq.n	80056fe <osMessageCreate+0x20>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80056f0:	6800      	ldr	r0, [r0, #0]
 80056f2:	6849      	ldr	r1, [r1, #4]
 80056f4:	2400      	movs	r4, #0
 80056f6:	9400      	str	r4, [sp, #0]
 80056f8:	f000 f9ab 	bl	8005a52 <xQueueGenericCreateStatic>
 80056fc:	e004      	b.n	8005708 <osMessageCreate+0x2a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80056fe:	6808      	ldr	r0, [r1, #0]
 8005700:	6849      	ldr	r1, [r1, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f000 f9cf 	bl	8005aa6 <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005708:	b002      	add	sp, #8
 800570a:	bd10      	pop	{r4, pc}

0800570c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800570c:	b530      	push	{r4, r5, lr}
 800570e:	b085      	sub	sp, #20
 8005710:	0005      	movs	r5, r0
 8005712:	9101      	str	r1, [sp, #4]
 8005714:	0014      	movs	r4, r2
  portBASE_TYPE taskWoken = pdFALSE;
 8005716:	2300      	movs	r3, #0
 8005718:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 800571a:	2a00      	cmp	r2, #0
 800571c:	d100      	bne.n	8005720 <osMessagePut+0x14>
    ticks = 1;
 800571e:	3401      	adds	r4, #1
  }
  
  if (inHandlerMode()) {
 8005720:	f7ff ff31 	bl	8005586 <inHandlerMode>
 8005724:	2800      	cmp	r0, #0
 8005726:	d010      	beq.n	800574a <osMessagePut+0x3e>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005728:	2300      	movs	r3, #0
 800572a:	aa03      	add	r2, sp, #12
 800572c:	a901      	add	r1, sp, #4
 800572e:	0028      	movs	r0, r5
 8005730:	f000 fa6d 	bl	8005c0e <xQueueGenericSendFromISR>
 8005734:	2801      	cmp	r0, #1
 8005736:	d113      	bne.n	8005760 <osMessagePut+0x54>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005738:	9b03      	ldr	r3, [sp, #12]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d012      	beq.n	8005764 <osMessagePut+0x58>
 800573e:	4b0b      	ldr	r3, [pc, #44]	; (800576c <osMessagePut+0x60>)
 8005740:	2280      	movs	r2, #128	; 0x80
 8005742:	0552      	lsls	r2, r2, #21
 8005744:	601a      	str	r2, [r3, #0]
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8005746:	2000      	movs	r0, #0
 8005748:	e008      	b.n	800575c <osMessagePut+0x50>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800574a:	2300      	movs	r3, #0
 800574c:	0022      	movs	r2, r4
 800574e:	a901      	add	r1, sp, #4
 8005750:	0028      	movs	r0, r5
 8005752:	f000 f9ca 	bl	8005aea <xQueueGenericSend>
 8005756:	2801      	cmp	r0, #1
 8005758:	d106      	bne.n	8005768 <osMessagePut+0x5c>
  return osOK;
 800575a:	2000      	movs	r0, #0
}
 800575c:	b005      	add	sp, #20
 800575e:	bd30      	pop	{r4, r5, pc}
      return osErrorOS;
 8005760:	20ff      	movs	r0, #255	; 0xff
 8005762:	e7fb      	b.n	800575c <osMessagePut+0x50>
  return osOK;
 8005764:	2000      	movs	r0, #0
 8005766:	e7f9      	b.n	800575c <osMessagePut+0x50>
      return osErrorOS;
 8005768:	20ff      	movs	r0, #255	; 0xff
 800576a:	e7f7      	b.n	800575c <osMessagePut+0x50>
 800576c:	e000ed04 	.word	0xe000ed04

08005770 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005770:	b570      	push	{r4, r5, r6, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	0004      	movs	r4, r0
 8005776:	000d      	movs	r5, r1
 8005778:	0016      	movs	r6, r2
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800577a:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 800577c:	2300      	movs	r3, #0
 800577e:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 8005780:	2900      	cmp	r1, #0
 8005782:	d016      	beq.n	80057b2 <osMessageGet+0x42>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8005784:	2300      	movs	r3, #0
 8005786:	9303      	str	r3, [sp, #12]
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8005788:	f7ff fefd 	bl	8005586 <inHandlerMode>
 800578c:	2800      	cmp	r0, #0
 800578e:	d01a      	beq.n	80057c6 <osMessageGet+0x56>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005790:	aa03      	add	r2, sp, #12
 8005792:	a901      	add	r1, sp, #4
 8005794:	0028      	movs	r0, r5
 8005796:	f000 fb1a 	bl	8005dce <xQueueReceiveFromISR>
 800579a:	2801      	cmp	r0, #1
 800579c:	d010      	beq.n	80057c0 <osMessageGet+0x50>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 800579e:	2300      	movs	r3, #0
 80057a0:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80057a2:	9b03      	ldr	r3, [sp, #12]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d019      	beq.n	80057dc <osMessageGet+0x6c>
 80057a8:	4b11      	ldr	r3, [pc, #68]	; (80057f0 <osMessageGet+0x80>)
 80057aa:	2280      	movs	r2, #128	; 0x80
 80057ac:	0552      	lsls	r2, r2, #21
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	e014      	b.n	80057dc <osMessageGet+0x6c>
    event.status = osErrorParameter;
 80057b2:	466b      	mov	r3, sp
 80057b4:	2280      	movs	r2, #128	; 0x80
 80057b6:	9200      	str	r2, [sp, #0]
    return event;
 80057b8:	0002      	movs	r2, r0
 80057ba:	cb23      	ldmia	r3!, {r0, r1, r5}
 80057bc:	c223      	stmia	r2!, {r0, r1, r5}
 80057be:	e011      	b.n	80057e4 <osMessageGet+0x74>
      event.status = osEventMessage;
 80057c0:	2310      	movs	r3, #16
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	e7ed      	b.n	80057a2 <osMessageGet+0x32>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80057c6:	0032      	movs	r2, r6
 80057c8:	a901      	add	r1, sp, #4
 80057ca:	0028      	movs	r0, r5
 80057cc:	f000 fa74 	bl	8005cb8 <xQueueReceive>
 80057d0:	2801      	cmp	r0, #1
 80057d2:	d00a      	beq.n	80057ea <osMessageGet+0x7a>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80057d4:	2e00      	cmp	r6, #0
 80057d6:	d000      	beq.n	80057da <osMessageGet+0x6a>
 80057d8:	2640      	movs	r6, #64	; 0x40
 80057da:	9600      	str	r6, [sp, #0]
    }
  }
  
  return event;
 80057dc:	466b      	mov	r3, sp
 80057de:	0022      	movs	r2, r4
 80057e0:	cb23      	ldmia	r3!, {r0, r1, r5}
 80057e2:	c223      	stmia	r2!, {r0, r1, r5}
}
 80057e4:	0020      	movs	r0, r4
 80057e6:	b004      	add	sp, #16
 80057e8:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 80057ea:	2310      	movs	r3, #16
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	e7f5      	b.n	80057dc <osMessageGet+0x6c>
 80057f0:	e000ed04 	.word	0xe000ed04

080057f4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057f4:	0003      	movs	r3, r0
 80057f6:	3308      	adds	r3, #8
 80057f8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057fa:	2201      	movs	r2, #1
 80057fc:	4252      	negs	r2, r2
 80057fe:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005800:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005802:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005804:	2300      	movs	r3, #0
 8005806:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005808:	4770      	bx	lr

0800580a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800580a:	2300      	movs	r3, #0
 800580c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800580e:	4770      	bx	lr

08005810 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005810:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005812:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005814:	689a      	ldr	r2, [r3, #8]
 8005816:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005818:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800581a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800581c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800581e:	6803      	ldr	r3, [r0, #0]
 8005820:	3301      	adds	r3, #1
 8005822:	6003      	str	r3, [r0, #0]
}
 8005824:	4770      	bx	lr

08005826 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005826:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005828:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800582a:	1c6b      	adds	r3, r5, #1
 800582c:	d010      	beq.n	8005850 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800582e:	0003      	movs	r3, r0
 8005830:	3308      	adds	r3, #8
 8005832:	001c      	movs	r4, r3
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	42aa      	cmp	r2, r5
 800583a:	d9fa      	bls.n	8005832 <vListInsert+0xc>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800583c:	6863      	ldr	r3, [r4, #4]
 800583e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005840:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005842:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005844:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005846:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005848:	6803      	ldr	r3, [r0, #0]
 800584a:	3301      	adds	r3, #1
 800584c:	6003      	str	r3, [r0, #0]
}
 800584e:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 8005850:	6904      	ldr	r4, [r0, #16]
 8005852:	e7f3      	b.n	800583c <vListInsert+0x16>

08005854 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005854:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005856:	6841      	ldr	r1, [r0, #4]
 8005858:	6882      	ldr	r2, [r0, #8]
 800585a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800585c:	6841      	ldr	r1, [r0, #4]
 800585e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	4282      	cmp	r2, r0
 8005864:	d006      	beq.n	8005874 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005866:	2200      	movs	r2, #0
 8005868:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	3a01      	subs	r2, #1
 800586e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005870:	6818      	ldr	r0, [r3, #0]
}
 8005872:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005874:	6882      	ldr	r2, [r0, #8]
 8005876:	605a      	str	r2, [r3, #4]
 8005878:	e7f5      	b.n	8005866 <uxListRemove+0x12>

0800587a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800587a:	b510      	push	{r4, lr}
 800587c:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800587e:	f001 f8e9 	bl	8006a54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005882:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005884:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005886:	429a      	cmp	r2, r3
 8005888:	d004      	beq.n	8005894 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800588a:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800588c:	f001 f8ee 	bl	8006a6c <vPortExitCritical>

	return xReturn;
}
 8005890:	0020      	movs	r0, r4
 8005892:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8005894:	2401      	movs	r4, #1
 8005896:	e7f9      	b.n	800588c <prvIsQueueFull+0x12>

08005898 <prvIsQueueEmpty>:
{
 8005898:	b510      	push	{r4, lr}
 800589a:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 800589c:	f001 f8da 	bl	8006a54 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80058a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d104      	bne.n	80058b0 <prvIsQueueEmpty+0x18>
			xReturn = pdTRUE;
 80058a6:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 80058a8:	f001 f8e0 	bl	8006a6c <vPortExitCritical>
}
 80058ac:	0020      	movs	r0, r4
 80058ae:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 80058b0:	2400      	movs	r4, #0
 80058b2:	e7f9      	b.n	80058a8 <prvIsQueueEmpty+0x10>

080058b4 <prvCopyDataToQueue>:
{
 80058b4:	b570      	push	{r4, r5, r6, lr}
 80058b6:	0004      	movs	r4, r0
 80058b8:	0015      	movs	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058ba:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80058bc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80058be:	2a00      	cmp	r2, #0
 80058c0:	d10c      	bne.n	80058dc <prvCopyDataToQueue+0x28>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058c2:	6803      	ldr	r3, [r0, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d003      	beq.n	80058d0 <prvCopyDataToQueue+0x1c>
BaseType_t xReturn = pdFALSE;
 80058c8:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058ca:	3601      	adds	r6, #1
 80058cc:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80058ce:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80058d0:	6880      	ldr	r0, [r0, #8]
 80058d2:	f000 fed3 	bl	800667c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80058d6:	2300      	movs	r3, #0
 80058d8:	60a3      	str	r3, [r4, #8]
 80058da:	e7f6      	b.n	80058ca <prvCopyDataToQueue+0x16>
	else if( xPosition == queueSEND_TO_BACK )
 80058dc:	2d00      	cmp	r5, #0
 80058de:	d10d      	bne.n	80058fc <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80058e0:	6840      	ldr	r0, [r0, #4]
 80058e2:	f003 fdc0 	bl	8009466 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80058e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80058e8:	6863      	ldr	r3, [r4, #4]
 80058ea:	189b      	adds	r3, r3, r2
 80058ec:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058ee:	68a2      	ldr	r2, [r4, #8]
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d31a      	bcc.n	800592a <prvCopyDataToQueue+0x76>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80058f4:	6823      	ldr	r3, [r4, #0]
 80058f6:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80058f8:	0028      	movs	r0, r5
 80058fa:	e7e6      	b.n	80058ca <prvCopyDataToQueue+0x16>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80058fc:	68c0      	ldr	r0, [r0, #12]
 80058fe:	f003 fdb2 	bl	8009466 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005902:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005904:	4251      	negs	r1, r2
 8005906:	68e3      	ldr	r3, [r4, #12]
 8005908:	1a9b      	subs	r3, r3, r2
 800590a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800590c:	6822      	ldr	r2, [r4, #0]
 800590e:	4293      	cmp	r3, r2
 8005910:	d202      	bcs.n	8005918 <prvCopyDataToQueue+0x64>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005912:	68a3      	ldr	r3, [r4, #8]
 8005914:	185b      	adds	r3, r3, r1
 8005916:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005918:	2d02      	cmp	r5, #2
 800591a:	d001      	beq.n	8005920 <prvCopyDataToQueue+0x6c>
BaseType_t xReturn = pdFALSE;
 800591c:	2000      	movs	r0, #0
 800591e:	e7d4      	b.n	80058ca <prvCopyDataToQueue+0x16>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005920:	2e00      	cmp	r6, #0
 8005922:	d004      	beq.n	800592e <prvCopyDataToQueue+0x7a>
				--uxMessagesWaiting;
 8005924:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8005926:	2000      	movs	r0, #0
 8005928:	e7cf      	b.n	80058ca <prvCopyDataToQueue+0x16>
 800592a:	0028      	movs	r0, r5
 800592c:	e7cd      	b.n	80058ca <prvCopyDataToQueue+0x16>
 800592e:	2000      	movs	r0, #0
 8005930:	e7cb      	b.n	80058ca <prvCopyDataToQueue+0x16>

08005932 <prvCopyDataFromQueue>:
{
 8005932:	b510      	push	{r4, lr}
 8005934:	0003      	movs	r3, r0
 8005936:	0008      	movs	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800593a:	2a00      	cmp	r2, #0
 800593c:	d00a      	beq.n	8005954 <prvCopyDataFromQueue+0x22>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800593e:	68dc      	ldr	r4, [r3, #12]
 8005940:	18a4      	adds	r4, r4, r2
 8005942:	60dc      	str	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005944:	6899      	ldr	r1, [r3, #8]
 8005946:	428c      	cmp	r4, r1
 8005948:	d301      	bcc.n	800594e <prvCopyDataFromQueue+0x1c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800594a:	6819      	ldr	r1, [r3, #0]
 800594c:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800594e:	68d9      	ldr	r1, [r3, #12]
 8005950:	f003 fd89 	bl	8009466 <memcpy>
}
 8005954:	bd10      	pop	{r4, pc}

08005956 <prvUnlockQueue>:
{
 8005956:	b570      	push	{r4, r5, r6, lr}
 8005958:	0005      	movs	r5, r0
	taskENTER_CRITICAL();
 800595a:	f001 f87b 	bl	8006a54 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800595e:	2345      	movs	r3, #69	; 0x45
 8005960:	5cec      	ldrb	r4, [r5, r3]
 8005962:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005964:	e001      	b.n	800596a <prvUnlockQueue+0x14>
			--cTxLock;
 8005966:	3c01      	subs	r4, #1
 8005968:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800596a:	2c00      	cmp	r4, #0
 800596c:	dd0b      	ble.n	8005986 <prvUnlockQueue+0x30>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800596e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005970:	2b00      	cmp	r3, #0
 8005972:	d008      	beq.n	8005986 <prvUnlockQueue+0x30>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005974:	0028      	movs	r0, r5
 8005976:	3024      	adds	r0, #36	; 0x24
 8005978:	f000 fde6 	bl	8006548 <xTaskRemoveFromEventList>
 800597c:	2800      	cmp	r0, #0
 800597e:	d0f2      	beq.n	8005966 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8005980:	f000 fe64 	bl	800664c <vTaskMissedYield>
 8005984:	e7ef      	b.n	8005966 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8005986:	2345      	movs	r3, #69	; 0x45
 8005988:	22ff      	movs	r2, #255	; 0xff
 800598a:	54ea      	strb	r2, [r5, r3]
	taskEXIT_CRITICAL();
 800598c:	f001 f86e 	bl	8006a6c <vPortExitCritical>
	taskENTER_CRITICAL();
 8005990:	f001 f860 	bl	8006a54 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005994:	2344      	movs	r3, #68	; 0x44
 8005996:	5cec      	ldrb	r4, [r5, r3]
 8005998:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800599a:	e001      	b.n	80059a0 <prvUnlockQueue+0x4a>
				--cRxLock;
 800599c:	3c01      	subs	r4, #1
 800599e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059a0:	2c00      	cmp	r4, #0
 80059a2:	dd0b      	ble.n	80059bc <prvUnlockQueue+0x66>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059a4:	692b      	ldr	r3, [r5, #16]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d008      	beq.n	80059bc <prvUnlockQueue+0x66>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059aa:	0028      	movs	r0, r5
 80059ac:	3010      	adds	r0, #16
 80059ae:	f000 fdcb 	bl	8006548 <xTaskRemoveFromEventList>
 80059b2:	2800      	cmp	r0, #0
 80059b4:	d0f2      	beq.n	800599c <prvUnlockQueue+0x46>
					vTaskMissedYield();
 80059b6:	f000 fe49 	bl	800664c <vTaskMissedYield>
 80059ba:	e7ef      	b.n	800599c <prvUnlockQueue+0x46>
		pxQueue->cRxLock = queueUNLOCKED;
 80059bc:	2344      	movs	r3, #68	; 0x44
 80059be:	22ff      	movs	r2, #255	; 0xff
 80059c0:	54ea      	strb	r2, [r5, r3]
	taskEXIT_CRITICAL();
 80059c2:	f001 f853 	bl	8006a6c <vPortExitCritical>
}
 80059c6:	bd70      	pop	{r4, r5, r6, pc}

080059c8 <xQueueGenericReset>:
{
 80059c8:	b570      	push	{r4, r5, r6, lr}
 80059ca:	0004      	movs	r4, r0
 80059cc:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d01d      	beq.n	8005a0e <xQueueGenericReset+0x46>
	taskENTER_CRITICAL();
 80059d2:	f001 f83f 	bl	8006a54 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059d6:	6822      	ldr	r2, [r4, #0]
 80059d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80059da:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80059dc:	0001      	movs	r1, r0
 80059de:	4359      	muls	r1, r3
 80059e0:	1851      	adds	r1, r2, r1
 80059e2:	60a1      	str	r1, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80059e4:	2100      	movs	r1, #0
 80059e6:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80059e8:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059ea:	3b01      	subs	r3, #1
 80059ec:	4343      	muls	r3, r0
 80059ee:	18d2      	adds	r2, r2, r3
 80059f0:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80059f2:	23ff      	movs	r3, #255	; 0xff
 80059f4:	2244      	movs	r2, #68	; 0x44
 80059f6:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80059f8:	3201      	adds	r2, #1
 80059fa:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
 80059fc:	2d00      	cmp	r5, #0
 80059fe:	d111      	bne.n	8005a24 <xQueueGenericReset+0x5c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a00:	6923      	ldr	r3, [r4, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d105      	bne.n	8005a12 <xQueueGenericReset+0x4a>
	taskEXIT_CRITICAL();
 8005a06:	f001 f831 	bl	8006a6c <vPortExitCritical>
}
 8005a0a:	2001      	movs	r0, #1
 8005a0c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
 8005a0e:	b672      	cpsid	i
 8005a10:	e7fe      	b.n	8005a10 <xQueueGenericReset+0x48>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a12:	0020      	movs	r0, r4
 8005a14:	3010      	adds	r0, #16
 8005a16:	f000 fd97 	bl	8006548 <xTaskRemoveFromEventList>
 8005a1a:	2800      	cmp	r0, #0
 8005a1c:	d0f3      	beq.n	8005a06 <xQueueGenericReset+0x3e>
					queueYIELD_IF_USING_PREEMPTION();
 8005a1e:	f001 f80d 	bl	8006a3c <vPortYield>
 8005a22:	e7f0      	b.n	8005a06 <xQueueGenericReset+0x3e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a24:	0020      	movs	r0, r4
 8005a26:	3010      	adds	r0, #16
 8005a28:	f7ff fee4 	bl	80057f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a2c:	0020      	movs	r0, r4
 8005a2e:	3024      	adds	r0, #36	; 0x24
 8005a30:	f7ff fee0 	bl	80057f4 <vListInitialise>
 8005a34:	e7e7      	b.n	8005a06 <xQueueGenericReset+0x3e>

08005a36 <prvInitialiseNewQueue>:
{
 8005a36:	b510      	push	{r4, lr}
 8005a38:	0003      	movs	r3, r0
 8005a3a:	9802      	ldr	r0, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a3c:	2900      	cmp	r1, #0
 8005a3e:	d106      	bne.n	8005a4e <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a40:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8005a42:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a44:	6401      	str	r1, [r0, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a46:	2101      	movs	r1, #1
 8005a48:	f7ff ffbe 	bl	80059c8 <xQueueGenericReset>
}
 8005a4c:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a4e:	6002      	str	r2, [r0, #0]
 8005a50:	e7f7      	b.n	8005a42 <prvInitialiseNewQueue+0xc>

08005a52 <xQueueGenericCreateStatic>:
	{
 8005a52:	b570      	push	{r4, r5, r6, lr}
 8005a54:	b084      	sub	sp, #16
 8005a56:	001d      	movs	r5, r3
 8005a58:	ac08      	add	r4, sp, #32
 8005a5a:	7823      	ldrb	r3, [r4, #0]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a5c:	2800      	cmp	r0, #0
 8005a5e:	d101      	bne.n	8005a64 <xQueueGenericCreateStatic+0x12>
 8005a60:	b672      	cpsid	i
 8005a62:	e7fe      	b.n	8005a62 <xQueueGenericCreateStatic+0x10>
		configASSERT( pxStaticQueue != NULL );
 8005a64:	2d00      	cmp	r5, #0
 8005a66:	d005      	beq.n	8005a74 <xQueueGenericCreateStatic+0x22>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a68:	2a00      	cmp	r2, #0
 8005a6a:	d005      	beq.n	8005a78 <xQueueGenericCreateStatic+0x26>
 8005a6c:	2900      	cmp	r1, #0
 8005a6e:	d103      	bne.n	8005a78 <xQueueGenericCreateStatic+0x26>
 8005a70:	b672      	cpsid	i
 8005a72:	e7fe      	b.n	8005a72 <xQueueGenericCreateStatic+0x20>
		configASSERT( pxStaticQueue != NULL );
 8005a74:	b672      	cpsid	i
 8005a76:	e7fe      	b.n	8005a76 <xQueueGenericCreateStatic+0x24>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a78:	2a00      	cmp	r2, #0
 8005a7a:	d006      	beq.n	8005a8a <xQueueGenericCreateStatic+0x38>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a7c:	2448      	movs	r4, #72	; 0x48
 8005a7e:	9403      	str	r4, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a80:	9c03      	ldr	r4, [sp, #12]
 8005a82:	2c48      	cmp	r4, #72	; 0x48
 8005a84:	d005      	beq.n	8005a92 <xQueueGenericCreateStatic+0x40>
 8005a86:	b672      	cpsid	i
 8005a88:	e7fe      	b.n	8005a88 <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a8a:	2900      	cmp	r1, #0
 8005a8c:	d0f6      	beq.n	8005a7c <xQueueGenericCreateStatic+0x2a>
 8005a8e:	b672      	cpsid	i
 8005a90:	e7fe      	b.n	8005a90 <xQueueGenericCreateStatic+0x3e>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a92:	9c03      	ldr	r4, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a94:	2446      	movs	r4, #70	; 0x46
 8005a96:	2601      	movs	r6, #1
 8005a98:	552e      	strb	r6, [r5, r4]
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a9a:	9500      	str	r5, [sp, #0]
 8005a9c:	f7ff ffcb 	bl	8005a36 <prvInitialiseNewQueue>
	}
 8005aa0:	0028      	movs	r0, r5
 8005aa2:	b004      	add	sp, #16
 8005aa4:	bd70      	pop	{r4, r5, r6, pc}

08005aa6 <xQueueGenericCreate>:
	{
 8005aa6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aa8:	b083      	sub	sp, #12
 8005aaa:	0004      	movs	r4, r0
 8005aac:	000d      	movs	r5, r1
 8005aae:	0016      	movs	r6, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	d101      	bne.n	8005ab8 <xQueueGenericCreate+0x12>
 8005ab4:	b672      	cpsid	i
 8005ab6:	e7fe      	b.n	8005ab6 <xQueueGenericCreate+0x10>
		if( uxItemSize == ( UBaseType_t ) 0 )
 8005ab8:	2900      	cmp	r1, #0
 8005aba:	d014      	beq.n	8005ae6 <xQueueGenericCreate+0x40>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005abc:	0008      	movs	r0, r1
 8005abe:	4360      	muls	r0, r4
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005ac0:	3048      	adds	r0, #72	; 0x48
 8005ac2:	f001 f87d 	bl	8006bc0 <pvPortMalloc>
 8005ac6:	1e07      	subs	r7, r0, #0
		if( pxNewQueue != NULL )
 8005ac8:	d00a      	beq.n	8005ae0 <xQueueGenericCreate+0x3a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005aca:	0002      	movs	r2, r0
 8005acc:	3248      	adds	r2, #72	; 0x48
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ace:	2346      	movs	r3, #70	; 0x46
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	54c1      	strb	r1, [r0, r3]
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ad4:	9000      	str	r0, [sp, #0]
 8005ad6:	0033      	movs	r3, r6
 8005ad8:	0029      	movs	r1, r5
 8005ada:	0020      	movs	r0, r4
 8005adc:	f7ff ffab 	bl	8005a36 <prvInitialiseNewQueue>
	}
 8005ae0:	0038      	movs	r0, r7
 8005ae2:	b003      	add	sp, #12
 8005ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
 8005ae6:	0008      	movs	r0, r1
 8005ae8:	e7ea      	b.n	8005ac0 <xQueueGenericCreate+0x1a>

08005aea <xQueueGenericSend>:
{
 8005aea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aec:	b085      	sub	sp, #20
 8005aee:	0004      	movs	r4, r0
 8005af0:	000f      	movs	r7, r1
 8005af2:	9201      	str	r2, [sp, #4]
 8005af4:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 8005af6:	2800      	cmp	r0, #0
 8005af8:	d008      	beq.n	8005b0c <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005afa:	2900      	cmp	r1, #0
 8005afc:	d008      	beq.n	8005b10 <xQueueGenericSend+0x26>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005afe:	2d02      	cmp	r5, #2
 8005b00:	d10b      	bne.n	8005b1a <xQueueGenericSend+0x30>
 8005b02:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d008      	beq.n	8005b1a <xQueueGenericSend+0x30>
 8005b08:	b672      	cpsid	i
 8005b0a:	e7fe      	b.n	8005b0a <xQueueGenericSend+0x20>
	configASSERT( pxQueue );
 8005b0c:	b672      	cpsid	i
 8005b0e:	e7fe      	b.n	8005b0e <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b10:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d0f3      	beq.n	8005afe <xQueueGenericSend+0x14>
 8005b16:	b672      	cpsid	i
 8005b18:	e7fe      	b.n	8005b18 <xQueueGenericSend+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b1a:	f000 fd9d 	bl	8006658 <xTaskGetSchedulerState>
 8005b1e:	1e06      	subs	r6, r0, #0
 8005b20:	d104      	bne.n	8005b2c <xQueueGenericSend+0x42>
 8005b22:	9b01      	ldr	r3, [sp, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d032      	beq.n	8005b8e <xQueueGenericSend+0xa4>
 8005b28:	b672      	cpsid	i
 8005b2a:	e7fe      	b.n	8005b2a <xQueueGenericSend+0x40>
 8005b2c:	2600      	movs	r6, #0
 8005b2e:	e02e      	b.n	8005b8e <xQueueGenericSend+0xa4>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b30:	002a      	movs	r2, r5
 8005b32:	0039      	movs	r1, r7
 8005b34:	0020      	movs	r0, r4
 8005b36:	f7ff febd 	bl	80058b4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d106      	bne.n	8005b4e <xQueueGenericSend+0x64>
					else if( xYieldRequired != pdFALSE )
 8005b40:	2800      	cmp	r0, #0
 8005b42:	d10d      	bne.n	8005b60 <xQueueGenericSend+0x76>
				taskEXIT_CRITICAL();
 8005b44:	f000 ff92 	bl	8006a6c <vPortExitCritical>
				return pdPASS;
 8005b48:	2001      	movs	r0, #1
}
 8005b4a:	b005      	add	sp, #20
 8005b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b4e:	0020      	movs	r0, r4
 8005b50:	3024      	adds	r0, #36	; 0x24
 8005b52:	f000 fcf9 	bl	8006548 <xTaskRemoveFromEventList>
 8005b56:	2800      	cmp	r0, #0
 8005b58:	d0f4      	beq.n	8005b44 <xQueueGenericSend+0x5a>
							queueYIELD_IF_USING_PREEMPTION();
 8005b5a:	f000 ff6f 	bl	8006a3c <vPortYield>
 8005b5e:	e7f1      	b.n	8005b44 <xQueueGenericSend+0x5a>
						queueYIELD_IF_USING_PREEMPTION();
 8005b60:	f000 ff6c 	bl	8006a3c <vPortYield>
 8005b64:	e7ee      	b.n	8005b44 <xQueueGenericSend+0x5a>
					taskEXIT_CRITICAL();
 8005b66:	f000 ff81 	bl	8006a6c <vPortExitCritical>
					return errQUEUE_FULL;
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	e7ed      	b.n	8005b4a <xQueueGenericSend+0x60>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b6e:	a802      	add	r0, sp, #8
 8005b70:	f000 fd2c 	bl	80065cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b74:	3601      	adds	r6, #1
 8005b76:	e017      	b.n	8005ba8 <xQueueGenericSend+0xbe>
		prvLockQueue( pxQueue );
 8005b78:	2200      	movs	r2, #0
 8005b7a:	54e2      	strb	r2, [r4, r3]
 8005b7c:	e01f      	b.n	8005bbe <xQueueGenericSend+0xd4>
 8005b7e:	2200      	movs	r2, #0
 8005b80:	54e2      	strb	r2, [r4, r3]
 8005b82:	e021      	b.n	8005bc8 <xQueueGenericSend+0xde>
				prvUnlockQueue( pxQueue );
 8005b84:	0020      	movs	r0, r4
 8005b86:	f7ff fee6 	bl	8005956 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b8a:	f000 fbf7 	bl	800637c <xTaskResumeAll>
		taskENTER_CRITICAL();
 8005b8e:	f000 ff61 	bl	8006a54 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005b94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d3ca      	bcc.n	8005b30 <xQueueGenericSend+0x46>
 8005b9a:	2d02      	cmp	r5, #2
 8005b9c:	d0c8      	beq.n	8005b30 <xQueueGenericSend+0x46>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b9e:	9b01      	ldr	r3, [sp, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d0e0      	beq.n	8005b66 <xQueueGenericSend+0x7c>
				else if( xEntryTimeSet == pdFALSE )
 8005ba4:	2e00      	cmp	r6, #0
 8005ba6:	d0e2      	beq.n	8005b6e <xQueueGenericSend+0x84>
		taskEXIT_CRITICAL();
 8005ba8:	f000 ff60 	bl	8006a6c <vPortExitCritical>
		vTaskSuspendAll();
 8005bac:	f000 fb54 	bl	8006258 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bb0:	f000 ff50 	bl	8006a54 <vPortEnterCritical>
 8005bb4:	2344      	movs	r3, #68	; 0x44
 8005bb6:	5ce2      	ldrb	r2, [r4, r3]
 8005bb8:	b252      	sxtb	r2, r2
 8005bba:	3201      	adds	r2, #1
 8005bbc:	d0dc      	beq.n	8005b78 <xQueueGenericSend+0x8e>
 8005bbe:	2345      	movs	r3, #69	; 0x45
 8005bc0:	5ce2      	ldrb	r2, [r4, r3]
 8005bc2:	b252      	sxtb	r2, r2
 8005bc4:	3201      	adds	r2, #1
 8005bc6:	d0da      	beq.n	8005b7e <xQueueGenericSend+0x94>
 8005bc8:	f000 ff50 	bl	8006a6c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bcc:	a901      	add	r1, sp, #4
 8005bce:	a802      	add	r0, sp, #8
 8005bd0:	f000 fd08 	bl	80065e4 <xTaskCheckForTimeOut>
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	d113      	bne.n	8005c00 <xQueueGenericSend+0x116>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005bd8:	0020      	movs	r0, r4
 8005bda:	f7ff fe4e 	bl	800587a <prvIsQueueFull>
 8005bde:	2800      	cmp	r0, #0
 8005be0:	d0d0      	beq.n	8005b84 <xQueueGenericSend+0x9a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005be2:	9901      	ldr	r1, [sp, #4]
 8005be4:	0020      	movs	r0, r4
 8005be6:	3010      	adds	r0, #16
 8005be8:	f000 fc9c 	bl	8006524 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005bec:	0020      	movs	r0, r4
 8005bee:	f7ff feb2 	bl	8005956 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005bf2:	f000 fbc3 	bl	800637c <xTaskResumeAll>
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	d1c9      	bne.n	8005b8e <xQueueGenericSend+0xa4>
					portYIELD_WITHIN_API();
 8005bfa:	f000 ff1f 	bl	8006a3c <vPortYield>
 8005bfe:	e7c6      	b.n	8005b8e <xQueueGenericSend+0xa4>
			prvUnlockQueue( pxQueue );
 8005c00:	0020      	movs	r0, r4
 8005c02:	f7ff fea8 	bl	8005956 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c06:	f000 fbb9 	bl	800637c <xTaskResumeAll>
			return errQUEUE_FULL;
 8005c0a:	2000      	movs	r0, #0
 8005c0c:	e79d      	b.n	8005b4a <xQueueGenericSend+0x60>

08005c0e <xQueueGenericSendFromISR>:
{
 8005c0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c10:	46c6      	mov	lr, r8
 8005c12:	b500      	push	{lr}
 8005c14:	b082      	sub	sp, #8
 8005c16:	0004      	movs	r4, r0
 8005c18:	000f      	movs	r7, r1
 8005c1a:	9201      	str	r2, [sp, #4]
 8005c1c:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	d008      	beq.n	8005c34 <xQueueGenericSendFromISR+0x26>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c22:	2900      	cmp	r1, #0
 8005c24:	d008      	beq.n	8005c38 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c26:	2d02      	cmp	r5, #2
 8005c28:	d10b      	bne.n	8005c42 <xQueueGenericSendFromISR+0x34>
 8005c2a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d008      	beq.n	8005c42 <xQueueGenericSendFromISR+0x34>
 8005c30:	b672      	cpsid	i
 8005c32:	e7fe      	b.n	8005c32 <xQueueGenericSendFromISR+0x24>
	configASSERT( pxQueue );
 8005c34:	b672      	cpsid	i
 8005c36:	e7fe      	b.n	8005c36 <xQueueGenericSendFromISR+0x28>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c38:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d0f3      	beq.n	8005c26 <xQueueGenericSendFromISR+0x18>
 8005c3e:	b672      	cpsid	i
 8005c40:	e7fe      	b.n	8005c40 <xQueueGenericSendFromISR+0x32>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c42:	f000 ff23 	bl	8006a8c <ulSetInterruptMaskFromISR>
 8005c46:	0006      	movs	r6, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c48:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005c4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d30a      	bcc.n	8005c66 <xQueueGenericSendFromISR+0x58>
 8005c50:	2d02      	cmp	r5, #2
 8005c52:	d008      	beq.n	8005c66 <xQueueGenericSendFromISR+0x58>
			xReturn = errQUEUE_FULL;
 8005c54:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005c56:	0030      	movs	r0, r6
 8005c58:	f000 ff1c 	bl	8006a94 <vClearInterruptMaskFromISR>
}
 8005c5c:	0020      	movs	r0, r4
 8005c5e:	b002      	add	sp, #8
 8005c60:	bc80      	pop	{r7}
 8005c62:	46b8      	mov	r8, r7
 8005c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c66:	2345      	movs	r3, #69	; 0x45
 8005c68:	5ce3      	ldrb	r3, [r4, r3]
 8005c6a:	b25b      	sxtb	r3, r3
 8005c6c:	4698      	mov	r8, r3
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c6e:	002a      	movs	r2, r5
 8005c70:	0039      	movs	r1, r7
 8005c72:	0020      	movs	r0, r4
 8005c74:	f7ff fe1e 	bl	80058b4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8005c78:	4643      	mov	r3, r8
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	d006      	beq.n	8005c8c <xQueueGenericSendFromISR+0x7e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c7e:	4643      	mov	r3, r8
 8005c80:	3301      	adds	r3, #1
 8005c82:	b25b      	sxtb	r3, r3
 8005c84:	2245      	movs	r2, #69	; 0x45
 8005c86:	54a3      	strb	r3, [r4, r2]
			xReturn = pdPASS;
 8005c88:	2401      	movs	r4, #1
 8005c8a:	e7e4      	b.n	8005c56 <xQueueGenericSendFromISR+0x48>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <xQueueGenericSendFromISR+0x88>
			xReturn = pdPASS;
 8005c92:	2401      	movs	r4, #1
 8005c94:	e7df      	b.n	8005c56 <xQueueGenericSendFromISR+0x48>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c96:	0020      	movs	r0, r4
 8005c98:	3024      	adds	r0, #36	; 0x24
 8005c9a:	f000 fc55 	bl	8006548 <xTaskRemoveFromEventList>
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	d006      	beq.n	8005cb0 <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 8005ca2:	9a01      	ldr	r2, [sp, #4]
 8005ca4:	2a00      	cmp	r2, #0
 8005ca6:	d005      	beq.n	8005cb4 <xQueueGenericSendFromISR+0xa6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	6013      	str	r3, [r2, #0]
			xReturn = pdPASS;
 8005cac:	2401      	movs	r4, #1
 8005cae:	e7d2      	b.n	8005c56 <xQueueGenericSendFromISR+0x48>
 8005cb0:	2401      	movs	r4, #1
 8005cb2:	e7d0      	b.n	8005c56 <xQueueGenericSendFromISR+0x48>
 8005cb4:	2401      	movs	r4, #1
 8005cb6:	e7ce      	b.n	8005c56 <xQueueGenericSendFromISR+0x48>

08005cb8 <xQueueReceive>:
{
 8005cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	0004      	movs	r4, r0
 8005cbe:	000e      	movs	r6, r1
 8005cc0:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	d00a      	beq.n	8005cdc <xQueueReceive+0x24>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cc6:	2900      	cmp	r1, #0
 8005cc8:	d00a      	beq.n	8005ce0 <xQueueReceive+0x28>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cca:	f000 fcc5 	bl	8006658 <xTaskGetSchedulerState>
 8005cce:	1e05      	subs	r5, r0, #0
 8005cd0:	d10b      	bne.n	8005cea <xQueueReceive+0x32>
 8005cd2:	9b01      	ldr	r3, [sp, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d042      	beq.n	8005d5e <xQueueReceive+0xa6>
 8005cd8:	b672      	cpsid	i
 8005cda:	e7fe      	b.n	8005cda <xQueueReceive+0x22>
	configASSERT( ( pxQueue ) );
 8005cdc:	b672      	cpsid	i
 8005cde:	e7fe      	b.n	8005cde <xQueueReceive+0x26>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ce0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d0f1      	beq.n	8005cca <xQueueReceive+0x12>
 8005ce6:	b672      	cpsid	i
 8005ce8:	e7fe      	b.n	8005ce8 <xQueueReceive+0x30>
 8005cea:	2500      	movs	r5, #0
 8005cec:	e037      	b.n	8005d5e <xQueueReceive+0xa6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cee:	0031      	movs	r1, r6
 8005cf0:	0020      	movs	r0, r4
 8005cf2:	f7ff fe1e 	bl	8005932 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cf6:	3f01      	subs	r7, #1
 8005cf8:	63a7      	str	r7, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cfa:	6923      	ldr	r3, [r4, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d104      	bne.n	8005d0a <xQueueReceive+0x52>
				taskEXIT_CRITICAL();
 8005d00:	f000 feb4 	bl	8006a6c <vPortExitCritical>
				return pdPASS;
 8005d04:	2001      	movs	r0, #1
}
 8005d06:	b005      	add	sp, #20
 8005d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d0a:	0020      	movs	r0, r4
 8005d0c:	3010      	adds	r0, #16
 8005d0e:	f000 fc1b 	bl	8006548 <xTaskRemoveFromEventList>
 8005d12:	2800      	cmp	r0, #0
 8005d14:	d0f4      	beq.n	8005d00 <xQueueReceive+0x48>
						queueYIELD_IF_USING_PREEMPTION();
 8005d16:	f000 fe91 	bl	8006a3c <vPortYield>
 8005d1a:	e7f1      	b.n	8005d00 <xQueueReceive+0x48>
					taskEXIT_CRITICAL();
 8005d1c:	f000 fea6 	bl	8006a6c <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005d20:	2000      	movs	r0, #0
 8005d22:	e7f0      	b.n	8005d06 <xQueueReceive+0x4e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d24:	a802      	add	r0, sp, #8
 8005d26:	f000 fc51 	bl	80065cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d2a:	3501      	adds	r5, #1
 8005d2c:	e021      	b.n	8005d72 <xQueueReceive+0xba>
		prvLockQueue( pxQueue );
 8005d2e:	2344      	movs	r3, #68	; 0x44
 8005d30:	2200      	movs	r2, #0
 8005d32:	54e2      	strb	r2, [r4, r3]
 8005d34:	e028      	b.n	8005d88 <xQueueReceive+0xd0>
 8005d36:	2345      	movs	r3, #69	; 0x45
 8005d38:	2200      	movs	r2, #0
 8005d3a:	54e2      	strb	r2, [r4, r3]
 8005d3c:	e029      	b.n	8005d92 <xQueueReceive+0xda>
				prvUnlockQueue( pxQueue );
 8005d3e:	0020      	movs	r0, r4
 8005d40:	f7ff fe09 	bl	8005956 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d44:	f000 fb1a 	bl	800637c <xTaskResumeAll>
 8005d48:	e009      	b.n	8005d5e <xQueueReceive+0xa6>
			prvUnlockQueue( pxQueue );
 8005d4a:	0020      	movs	r0, r4
 8005d4c:	f7ff fe03 	bl	8005956 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d50:	f000 fb14 	bl	800637c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d54:	0020      	movs	r0, r4
 8005d56:	f7ff fd9f 	bl	8005898 <prvIsQueueEmpty>
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d135      	bne.n	8005dca <xQueueReceive+0x112>
		taskENTER_CRITICAL();
 8005d5e:	f000 fe79 	bl	8006a54 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d62:	6ba7      	ldr	r7, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d64:	2f00      	cmp	r7, #0
 8005d66:	d1c2      	bne.n	8005cee <xQueueReceive+0x36>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d68:	9b01      	ldr	r3, [sp, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d0d6      	beq.n	8005d1c <xQueueReceive+0x64>
				else if( xEntryTimeSet == pdFALSE )
 8005d6e:	2d00      	cmp	r5, #0
 8005d70:	d0d8      	beq.n	8005d24 <xQueueReceive+0x6c>
		taskEXIT_CRITICAL();
 8005d72:	f000 fe7b 	bl	8006a6c <vPortExitCritical>
		vTaskSuspendAll();
 8005d76:	f000 fa6f 	bl	8006258 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d7a:	f000 fe6b 	bl	8006a54 <vPortEnterCritical>
 8005d7e:	2344      	movs	r3, #68	; 0x44
 8005d80:	5ce3      	ldrb	r3, [r4, r3]
 8005d82:	b25b      	sxtb	r3, r3
 8005d84:	3301      	adds	r3, #1
 8005d86:	d0d2      	beq.n	8005d2e <xQueueReceive+0x76>
 8005d88:	2345      	movs	r3, #69	; 0x45
 8005d8a:	5ce3      	ldrb	r3, [r4, r3]
 8005d8c:	b25b      	sxtb	r3, r3
 8005d8e:	3301      	adds	r3, #1
 8005d90:	d0d1      	beq.n	8005d36 <xQueueReceive+0x7e>
 8005d92:	f000 fe6b 	bl	8006a6c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d96:	a901      	add	r1, sp, #4
 8005d98:	a802      	add	r0, sp, #8
 8005d9a:	f000 fc23 	bl	80065e4 <xTaskCheckForTimeOut>
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	d1d3      	bne.n	8005d4a <xQueueReceive+0x92>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005da2:	0020      	movs	r0, r4
 8005da4:	f7ff fd78 	bl	8005898 <prvIsQueueEmpty>
 8005da8:	2800      	cmp	r0, #0
 8005daa:	d0c8      	beq.n	8005d3e <xQueueReceive+0x86>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005dac:	9901      	ldr	r1, [sp, #4]
 8005dae:	0020      	movs	r0, r4
 8005db0:	3024      	adds	r0, #36	; 0x24
 8005db2:	f000 fbb7 	bl	8006524 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005db6:	0020      	movs	r0, r4
 8005db8:	f7ff fdcd 	bl	8005956 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005dbc:	f000 fade 	bl	800637c <xTaskResumeAll>
 8005dc0:	2800      	cmp	r0, #0
 8005dc2:	d1cc      	bne.n	8005d5e <xQueueReceive+0xa6>
					portYIELD_WITHIN_API();
 8005dc4:	f000 fe3a 	bl	8006a3c <vPortYield>
 8005dc8:	e7c9      	b.n	8005d5e <xQueueReceive+0xa6>
				return errQUEUE_EMPTY;
 8005dca:	2000      	movs	r0, #0
 8005dcc:	e79b      	b.n	8005d06 <xQueueReceive+0x4e>

08005dce <xQueueReceiveFromISR>:
{
 8005dce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dd0:	46ce      	mov	lr, r9
 8005dd2:	b500      	push	{lr}
 8005dd4:	b082      	sub	sp, #8
 8005dd6:	0004      	movs	r4, r0
 8005dd8:	000d      	movs	r5, r1
 8005dda:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	d010      	beq.n	8005e02 <xQueueReceiveFromISR+0x34>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005de0:	2900      	cmp	r1, #0
 8005de2:	d010      	beq.n	8005e06 <xQueueReceiveFromISR+0x38>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005de4:	f000 fe52 	bl	8006a8c <ulSetInterruptMaskFromISR>
 8005de8:	0006      	movs	r6, r0
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dea:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dec:	2f00      	cmp	r7, #0
 8005dee:	d10f      	bne.n	8005e10 <xQueueReceiveFromISR+0x42>
			xReturn = pdFAIL;
 8005df0:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005df2:	0030      	movs	r0, r6
 8005df4:	f000 fe4e 	bl	8006a94 <vClearInterruptMaskFromISR>
}
 8005df8:	0020      	movs	r0, r4
 8005dfa:	b002      	add	sp, #8
 8005dfc:	bc80      	pop	{r7}
 8005dfe:	46b9      	mov	r9, r7
 8005e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
 8005e02:	b672      	cpsid	i
 8005e04:	e7fe      	b.n	8005e04 <xQueueReceiveFromISR+0x36>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e06:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d0eb      	beq.n	8005de4 <xQueueReceiveFromISR+0x16>
 8005e0c:	b672      	cpsid	i
 8005e0e:	e7fe      	b.n	8005e0e <xQueueReceiveFromISR+0x40>
			const int8_t cRxLock = pxQueue->cRxLock;
 8005e10:	2344      	movs	r3, #68	; 0x44
 8005e12:	5ce3      	ldrb	r3, [r4, r3]
 8005e14:	b25b      	sxtb	r3, r3
 8005e16:	4699      	mov	r9, r3
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e18:	0029      	movs	r1, r5
 8005e1a:	0020      	movs	r0, r4
 8005e1c:	f7ff fd89 	bl	8005932 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e20:	1e7b      	subs	r3, r7, #1
 8005e22:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8005e24:	464b      	mov	r3, r9
 8005e26:	3301      	adds	r3, #1
 8005e28:	d006      	beq.n	8005e38 <xQueueReceiveFromISR+0x6a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005e2a:	464b      	mov	r3, r9
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	b25b      	sxtb	r3, r3
 8005e30:	2244      	movs	r2, #68	; 0x44
 8005e32:	54a3      	strb	r3, [r4, r2]
			xReturn = pdPASS;
 8005e34:	2401      	movs	r4, #1
 8005e36:	e7dc      	b.n	8005df2 <xQueueReceiveFromISR+0x24>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e38:	6923      	ldr	r3, [r4, #16]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <xQueueReceiveFromISR+0x74>
			xReturn = pdPASS;
 8005e3e:	2401      	movs	r4, #1
 8005e40:	e7d7      	b.n	8005df2 <xQueueReceiveFromISR+0x24>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e42:	0020      	movs	r0, r4
 8005e44:	3010      	adds	r0, #16
 8005e46:	f000 fb7f 	bl	8006548 <xTaskRemoveFromEventList>
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	d006      	beq.n	8005e5c <xQueueReceiveFromISR+0x8e>
						if( pxHigherPriorityTaskWoken != NULL )
 8005e4e:	9a01      	ldr	r2, [sp, #4]
 8005e50:	2a00      	cmp	r2, #0
 8005e52:	d005      	beq.n	8005e60 <xQueueReceiveFromISR+0x92>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005e54:	2301      	movs	r3, #1
 8005e56:	6013      	str	r3, [r2, #0]
			xReturn = pdPASS;
 8005e58:	2401      	movs	r4, #1
 8005e5a:	e7ca      	b.n	8005df2 <xQueueReceiveFromISR+0x24>
 8005e5c:	2401      	movs	r4, #1
 8005e5e:	e7c8      	b.n	8005df2 <xQueueReceiveFromISR+0x24>
 8005e60:	2401      	movs	r4, #1
 8005e62:	e7c6      	b.n	8005df2 <xQueueReceiveFromISR+0x24>

08005e64 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e64:	4b08      	ldr	r3, [pc, #32]	; (8005e88 <prvResetNextTaskUnblockTime+0x24>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d104      	bne.n	8005e78 <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e6e:	4b07      	ldr	r3, [pc, #28]	; (8005e8c <prvResetNextTaskUnblockTime+0x28>)
 8005e70:	2201      	movs	r2, #1
 8005e72:	4252      	negs	r2, r2
 8005e74:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e76:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e78:	4b03      	ldr	r3, [pc, #12]	; (8005e88 <prvResetNextTaskUnblockTime+0x24>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e80:	685a      	ldr	r2, [r3, #4]
 8005e82:	4b02      	ldr	r3, [pc, #8]	; (8005e8c <prvResetNextTaskUnblockTime+0x28>)
 8005e84:	601a      	str	r2, [r3, #0]
}
 8005e86:	e7f6      	b.n	8005e76 <prvResetNextTaskUnblockTime+0x12>
 8005e88:	20000704 	.word	0x20000704
 8005e8c:	200007dc 	.word	0x200007dc

08005e90 <prvInitialiseNewTask>:
{
 8005e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e92:	46de      	mov	lr, fp
 8005e94:	4657      	mov	r7, sl
 8005e96:	464e      	mov	r6, r9
 8005e98:	b5c0      	push	{r6, r7, lr}
 8005e9a:	4682      	mov	sl, r0
 8005e9c:	469b      	mov	fp, r3
 8005e9e:	9e08      	ldr	r6, [sp, #32]
 8005ea0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea4:	4820      	ldr	r0, [pc, #128]	; (8005f28 <prvInitialiseNewTask+0x98>)
 8005ea6:	4684      	mov	ip, r0
 8005ea8:	4462      	add	r2, ip
 8005eaa:	0092      	lsls	r2, r2, #2
 8005eac:	189b      	adds	r3, r3, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005eae:	2207      	movs	r2, #7
 8005eb0:	4393      	bics	r3, r2
 8005eb2:	4699      	mov	r9, r3
	if( pcName != NULL )
 8005eb4:	2900      	cmp	r1, #0
 8005eb6:	d032      	beq.n	8005f1e <prvInitialiseNewTask+0x8e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005eb8:	2400      	movs	r4, #0
 8005eba:	2c0f      	cmp	r4, #15
 8005ebc:	d807      	bhi.n	8005ece <prvInitialiseNewTask+0x3e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ebe:	5d0b      	ldrb	r3, [r1, r4]
 8005ec0:	193d      	adds	r5, r7, r4
 8005ec2:	3534      	adds	r5, #52	; 0x34
 8005ec4:	702b      	strb	r3, [r5, #0]
			if( pcName[ x ] == ( char ) 0x00 )
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <prvInitialiseNewTask+0x3e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005eca:	3401      	adds	r4, #1
 8005ecc:	e7f5      	b.n	8005eba <prvInitialiseNewTask+0x2a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ece:	2343      	movs	r3, #67	; 0x43
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	54fa      	strb	r2, [r7, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ed4:	2e06      	cmp	r6, #6
 8005ed6:	d900      	bls.n	8005eda <prvInitialiseNewTask+0x4a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ed8:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8005eda:	62fe      	str	r6, [r7, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005edc:	647e      	str	r6, [r7, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005ede:	2400      	movs	r4, #0
 8005ee0:	64bc      	str	r4, [r7, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005ee2:	1d38      	adds	r0, r7, #4
 8005ee4:	f7ff fc91 	bl	800580a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ee8:	0038      	movs	r0, r7
 8005eea:	3018      	adds	r0, #24
 8005eec:	f7ff fc8d 	bl	800580a <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ef0:	613f      	str	r7, [r7, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ef2:	2307      	movs	r3, #7
 8005ef4:	1b9b      	subs	r3, r3, r6
 8005ef6:	61bb      	str	r3, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ef8:	627f      	str	r7, [r7, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8005efa:	64fc      	str	r4, [r7, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005efc:	2350      	movs	r3, #80	; 0x50
 8005efe:	54fc      	strb	r4, [r7, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f00:	465a      	mov	r2, fp
 8005f02:	4651      	mov	r1, sl
 8005f04:	4648      	mov	r0, r9
 8005f06:	f000 fd67 	bl	80069d8 <pxPortInitialiseStack>
 8005f0a:	6038      	str	r0, [r7, #0]
	if( pxCreatedTask != NULL )
 8005f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d000      	beq.n	8005f14 <prvInitialiseNewTask+0x84>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f12:	601f      	str	r7, [r3, #0]
}
 8005f14:	bce0      	pop	{r5, r6, r7}
 8005f16:	46bb      	mov	fp, r7
 8005f18:	46b2      	mov	sl, r6
 8005f1a:	46a9      	mov	r9, r5
 8005f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f1e:	2334      	movs	r3, #52	; 0x34
 8005f20:	2200      	movs	r2, #0
 8005f22:	54fa      	strb	r2, [r7, r3]
 8005f24:	e7d6      	b.n	8005ed4 <prvInitialiseNewTask+0x44>
 8005f26:	46c0      	nop			; (mov r8, r8)
 8005f28:	3fffffff 	.word	0x3fffffff

08005f2c <prvInitialiseTaskLists>:
{
 8005f2c:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f2e:	2400      	movs	r4, #0
 8005f30:	e007      	b.n	8005f42 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f32:	00a3      	lsls	r3, r4, #2
 8005f34:	191b      	adds	r3, r3, r4
 8005f36:	0098      	lsls	r0, r3, #2
 8005f38:	4b0e      	ldr	r3, [pc, #56]	; (8005f74 <prvInitialiseTaskLists+0x48>)
 8005f3a:	18c0      	adds	r0, r0, r3
 8005f3c:	f7ff fc5a 	bl	80057f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f40:	3401      	adds	r4, #1
 8005f42:	2c06      	cmp	r4, #6
 8005f44:	d9f5      	bls.n	8005f32 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8005f46:	4d0c      	ldr	r5, [pc, #48]	; (8005f78 <prvInitialiseTaskLists+0x4c>)
 8005f48:	0028      	movs	r0, r5
 8005f4a:	f7ff fc53 	bl	80057f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f4e:	4c0b      	ldr	r4, [pc, #44]	; (8005f7c <prvInitialiseTaskLists+0x50>)
 8005f50:	0020      	movs	r0, r4
 8005f52:	f7ff fc4f 	bl	80057f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f56:	480a      	ldr	r0, [pc, #40]	; (8005f80 <prvInitialiseTaskLists+0x54>)
 8005f58:	f7ff fc4c 	bl	80057f4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8005f5c:	4809      	ldr	r0, [pc, #36]	; (8005f84 <prvInitialiseTaskLists+0x58>)
 8005f5e:	f7ff fc49 	bl	80057f4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8005f62:	4809      	ldr	r0, [pc, #36]	; (8005f88 <prvInitialiseTaskLists+0x5c>)
 8005f64:	f7ff fc46 	bl	80057f4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f68:	4b08      	ldr	r3, [pc, #32]	; (8005f8c <prvInitialiseTaskLists+0x60>)
 8005f6a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f6c:	4b08      	ldr	r3, [pc, #32]	; (8005f90 <prvInitialiseTaskLists+0x64>)
 8005f6e:	601c      	str	r4, [r3, #0]
}
 8005f70:	bd70      	pop	{r4, r5, r6, pc}
 8005f72:	46c0      	nop			; (mov r8, r8)
 8005f74:	2000070c 	.word	0x2000070c
 8005f78:	200007b0 	.word	0x200007b0
 8005f7c:	200007c4 	.word	0x200007c4
 8005f80:	200007e4 	.word	0x200007e4
 8005f84:	20000810 	.word	0x20000810
 8005f88:	200007fc 	.word	0x200007fc
 8005f8c:	20000704 	.word	0x20000704
 8005f90:	20000708 	.word	0x20000708

08005f94 <prvAddNewTaskToReadyList>:
{
 8005f94:	b510      	push	{r4, lr}
 8005f96:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 8005f98:	f000 fd5c 	bl	8006a54 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8005f9c:	4a1f      	ldr	r2, [pc, #124]	; (800601c <prvAddNewTaskToReadyList+0x88>)
 8005f9e:	6813      	ldr	r3, [r2, #0]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005fa4:	4b1e      	ldr	r3, [pc, #120]	; (8006020 <prvAddNewTaskToReadyList+0x8c>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00c      	beq.n	8005fc6 <prvAddNewTaskToReadyList+0x32>
			if( xSchedulerRunning == pdFALSE )
 8005fac:	4b1d      	ldr	r3, [pc, #116]	; (8006024 <prvAddNewTaskToReadyList+0x90>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10d      	bne.n	8005fd0 <prvAddNewTaskToReadyList+0x3c>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005fb4:	4b1a      	ldr	r3, [pc, #104]	; (8006020 <prvAddNewTaskToReadyList+0x8c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d807      	bhi.n	8005fd0 <prvAddNewTaskToReadyList+0x3c>
					pxCurrentTCB = pxNewTCB;
 8005fc0:	4b17      	ldr	r3, [pc, #92]	; (8006020 <prvAddNewTaskToReadyList+0x8c>)
 8005fc2:	601c      	str	r4, [r3, #0]
 8005fc4:	e004      	b.n	8005fd0 <prvAddNewTaskToReadyList+0x3c>
			pxCurrentTCB = pxNewTCB;
 8005fc6:	4b16      	ldr	r3, [pc, #88]	; (8006020 <prvAddNewTaskToReadyList+0x8c>)
 8005fc8:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005fca:	6813      	ldr	r3, [r2, #0]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d01f      	beq.n	8006010 <prvAddNewTaskToReadyList+0x7c>
		uxTaskNumber++;
 8005fd0:	4a15      	ldr	r2, [pc, #84]	; (8006028 <prvAddNewTaskToReadyList+0x94>)
 8005fd2:	6813      	ldr	r3, [r2, #0]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005fd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005fda:	4a14      	ldr	r2, [pc, #80]	; (800602c <prvAddNewTaskToReadyList+0x98>)
 8005fdc:	6812      	ldr	r2, [r2, #0]
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d901      	bls.n	8005fe6 <prvAddNewTaskToReadyList+0x52>
 8005fe2:	4a12      	ldr	r2, [pc, #72]	; (800602c <prvAddNewTaskToReadyList+0x98>)
 8005fe4:	6013      	str	r3, [r2, #0]
 8005fe6:	1d21      	adds	r1, r4, #4
 8005fe8:	0098      	lsls	r0, r3, #2
 8005fea:	18c0      	adds	r0, r0, r3
 8005fec:	0080      	lsls	r0, r0, #2
 8005fee:	4b10      	ldr	r3, [pc, #64]	; (8006030 <prvAddNewTaskToReadyList+0x9c>)
 8005ff0:	18c0      	adds	r0, r0, r3
 8005ff2:	f7ff fc0d 	bl	8005810 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8005ff6:	f000 fd39 	bl	8006a6c <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8005ffa:	4b0a      	ldr	r3, [pc, #40]	; (8006024 <prvAddNewTaskToReadyList+0x90>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d005      	beq.n	800600e <prvAddNewTaskToReadyList+0x7a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006002:	4b07      	ldr	r3, [pc, #28]	; (8006020 <prvAddNewTaskToReadyList+0x8c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006008:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800600a:	429a      	cmp	r2, r3
 800600c:	d303      	bcc.n	8006016 <prvAddNewTaskToReadyList+0x82>
}
 800600e:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8006010:	f7ff ff8c 	bl	8005f2c <prvInitialiseTaskLists>
 8006014:	e7dc      	b.n	8005fd0 <prvAddNewTaskToReadyList+0x3c>
			taskYIELD_IF_USING_PREEMPTION();
 8006016:	f000 fd11 	bl	8006a3c <vPortYield>
}
 800601a:	e7f8      	b.n	800600e <prvAddNewTaskToReadyList+0x7a>
 800601c:	20000798 	.word	0x20000798
 8006020:	20000700 	.word	0x20000700
 8006024:	200007f8 	.word	0x200007f8
 8006028:	200007a8 	.word	0x200007a8
 800602c:	200007ac 	.word	0x200007ac
 8006030:	2000070c 	.word	0x2000070c

08006034 <prvDeleteTCB>:
	{
 8006034:	b510      	push	{r4, lr}
 8006036:	0004      	movs	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006038:	2351      	movs	r3, #81	; 0x51
 800603a:	5cc3      	ldrb	r3, [r0, r3]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d005      	beq.n	800604c <prvDeleteTCB+0x18>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006040:	2b01      	cmp	r3, #1
 8006042:	d00a      	beq.n	800605a <prvDeleteTCB+0x26>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006044:	2b02      	cmp	r3, #2
 8006046:	d007      	beq.n	8006058 <prvDeleteTCB+0x24>
 8006048:	b672      	cpsid	i
 800604a:	e7fe      	b.n	800604a <prvDeleteTCB+0x16>
				vPortFree( pxTCB->pxStack );
 800604c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800604e:	f000 fe1f 	bl	8006c90 <vPortFree>
				vPortFree( pxTCB );
 8006052:	0020      	movs	r0, r4
 8006054:	f000 fe1c 	bl	8006c90 <vPortFree>
	}
 8006058:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800605a:	f000 fe19 	bl	8006c90 <vPortFree>
 800605e:	e7fb      	b.n	8006058 <prvDeleteTCB+0x24>

08006060 <prvCheckTasksWaitingTermination>:
{
 8006060:	b510      	push	{r4, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006062:	e014      	b.n	800608e <prvCheckTasksWaitingTermination+0x2e>
			taskENTER_CRITICAL();
 8006064:	f000 fcf6 	bl	8006a54 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006068:	4b0b      	ldr	r3, [pc, #44]	; (8006098 <prvCheckTasksWaitingTermination+0x38>)
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800606e:	1d20      	adds	r0, r4, #4
 8006070:	f7ff fbf0 	bl	8005854 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006074:	4a09      	ldr	r2, [pc, #36]	; (800609c <prvCheckTasksWaitingTermination+0x3c>)
 8006076:	6813      	ldr	r3, [r2, #0]
 8006078:	3b01      	subs	r3, #1
 800607a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800607c:	4a08      	ldr	r2, [pc, #32]	; (80060a0 <prvCheckTasksWaitingTermination+0x40>)
 800607e:	6813      	ldr	r3, [r2, #0]
 8006080:	3b01      	subs	r3, #1
 8006082:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8006084:	f000 fcf2 	bl	8006a6c <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8006088:	0020      	movs	r0, r4
 800608a:	f7ff ffd3 	bl	8006034 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800608e:	4b04      	ldr	r3, [pc, #16]	; (80060a0 <prvCheckTasksWaitingTermination+0x40>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1e6      	bne.n	8006064 <prvCheckTasksWaitingTermination+0x4>
}
 8006096:	bd10      	pop	{r4, pc}
 8006098:	20000810 	.word	0x20000810
 800609c:	20000798 	.word	0x20000798
 80060a0:	2000079c 	.word	0x2000079c

080060a4 <prvIdleTask>:
{
 80060a4:	b510      	push	{r4, lr}
		prvCheckTasksWaitingTermination();
 80060a6:	f7ff ffdb 	bl	8006060 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060aa:	4b03      	ldr	r3, [pc, #12]	; (80060b8 <prvIdleTask+0x14>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d9f9      	bls.n	80060a6 <prvIdleTask+0x2>
				taskYIELD();
 80060b2:	f000 fcc3 	bl	8006a3c <vPortYield>
 80060b6:	e7f6      	b.n	80060a6 <prvIdleTask+0x2>
 80060b8:	2000070c 	.word	0x2000070c

080060bc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060bc:	b570      	push	{r4, r5, r6, lr}
 80060be:	0004      	movs	r4, r0
 80060c0:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060c2:	4b17      	ldr	r3, [pc, #92]	; (8006120 <prvAddCurrentTaskToDelayedList+0x64>)
 80060c4:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060c6:	4b17      	ldr	r3, [pc, #92]	; (8006124 <prvAddCurrentTaskToDelayedList+0x68>)
 80060c8:	6818      	ldr	r0, [r3, #0]
 80060ca:	3004      	adds	r0, #4
 80060cc:	f7ff fbc2 	bl	8005854 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060d0:	1c63      	adds	r3, r4, #1
 80060d2:	d00d      	beq.n	80060f0 <prvAddCurrentTaskToDelayedList+0x34>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060d4:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060d6:	4b13      	ldr	r3, [pc, #76]	; (8006124 <prvAddCurrentTaskToDelayedList+0x68>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80060dc:	42a6      	cmp	r6, r4
 80060de:	d910      	bls.n	8006102 <prvAddCurrentTaskToDelayedList+0x46>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060e0:	4b11      	ldr	r3, [pc, #68]	; (8006128 <prvAddCurrentTaskToDelayedList+0x6c>)
 80060e2:	6818      	ldr	r0, [r3, #0]
 80060e4:	4b0f      	ldr	r3, [pc, #60]	; (8006124 <prvAddCurrentTaskToDelayedList+0x68>)
 80060e6:	6819      	ldr	r1, [r3, #0]
 80060e8:	3104      	adds	r1, #4
 80060ea:	f7ff fb9c 	bl	8005826 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060ee:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060f0:	2d00      	cmp	r5, #0
 80060f2:	d0ef      	beq.n	80060d4 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060f4:	4b0b      	ldr	r3, [pc, #44]	; (8006124 <prvAddCurrentTaskToDelayedList+0x68>)
 80060f6:	6819      	ldr	r1, [r3, #0]
 80060f8:	3104      	adds	r1, #4
 80060fa:	480c      	ldr	r0, [pc, #48]	; (800612c <prvAddCurrentTaskToDelayedList+0x70>)
 80060fc:	f7ff fb88 	bl	8005810 <vListInsertEnd>
 8006100:	e7f5      	b.n	80060ee <prvAddCurrentTaskToDelayedList+0x32>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006102:	4b0b      	ldr	r3, [pc, #44]	; (8006130 <prvAddCurrentTaskToDelayedList+0x74>)
 8006104:	6818      	ldr	r0, [r3, #0]
 8006106:	4b07      	ldr	r3, [pc, #28]	; (8006124 <prvAddCurrentTaskToDelayedList+0x68>)
 8006108:	6819      	ldr	r1, [r3, #0]
 800610a:	3104      	adds	r1, #4
 800610c:	f7ff fb8b 	bl	8005826 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006110:	4b08      	ldr	r3, [pc, #32]	; (8006134 <prvAddCurrentTaskToDelayedList+0x78>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	42a3      	cmp	r3, r4
 8006116:	d9ea      	bls.n	80060ee <prvAddCurrentTaskToDelayedList+0x32>
					xNextTaskUnblockTime = xTimeToWake;
 8006118:	4b06      	ldr	r3, [pc, #24]	; (8006134 <prvAddCurrentTaskToDelayedList+0x78>)
 800611a:	601c      	str	r4, [r3, #0]
}
 800611c:	e7e7      	b.n	80060ee <prvAddCurrentTaskToDelayedList+0x32>
 800611e:	46c0      	nop			; (mov r8, r8)
 8006120:	20000824 	.word	0x20000824
 8006124:	20000700 	.word	0x20000700
 8006128:	20000708 	.word	0x20000708
 800612c:	200007fc 	.word	0x200007fc
 8006130:	20000704 	.word	0x20000704
 8006134:	200007dc 	.word	0x200007dc

08006138 <xTaskCreateStatic>:
	{
 8006138:	b570      	push	{r4, r5, r6, lr}
 800613a:	b086      	sub	sp, #24
		configASSERT( puxStackBuffer != NULL );
 800613c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800613e:	2c00      	cmp	r4, #0
 8006140:	d009      	beq.n	8006156 <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 8006142:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006144:	2c00      	cmp	r4, #0
 8006146:	d008      	beq.n	800615a <xTaskCreateStatic+0x22>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006148:	2454      	movs	r4, #84	; 0x54
 800614a:	9404      	str	r4, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800614c:	9c04      	ldr	r4, [sp, #16]
 800614e:	2c54      	cmp	r4, #84	; 0x54
 8006150:	d005      	beq.n	800615e <xTaskCreateStatic+0x26>
 8006152:	b672      	cpsid	i
 8006154:	e7fe      	b.n	8006154 <xTaskCreateStatic+0x1c>
		configASSERT( puxStackBuffer != NULL );
 8006156:	b672      	cpsid	i
 8006158:	e7fe      	b.n	8006158 <xTaskCreateStatic+0x20>
		configASSERT( pxTaskBuffer != NULL );
 800615a:	b672      	cpsid	i
 800615c:	e7fe      	b.n	800615c <xTaskCreateStatic+0x24>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800615e:	9c04      	ldr	r4, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006160:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006162:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006164:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006166:	2451      	movs	r4, #81	; 0x51
 8006168:	2502      	movs	r5, #2
 800616a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800616c:	5535      	strb	r5, [r6, r4]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800616e:	2400      	movs	r4, #0
 8006170:	9403      	str	r4, [sp, #12]
 8006172:	9602      	str	r6, [sp, #8]
 8006174:	ac05      	add	r4, sp, #20
 8006176:	9401      	str	r4, [sp, #4]
 8006178:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800617a:	9400      	str	r4, [sp, #0]
 800617c:	f7ff fe88 	bl	8005e90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006180:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006182:	f7ff ff07 	bl	8005f94 <prvAddNewTaskToReadyList>
		return xReturn;
 8006186:	9805      	ldr	r0, [sp, #20]
	}
 8006188:	b006      	add	sp, #24
 800618a:	bd70      	pop	{r4, r5, r6, pc}

0800618c <xTaskCreate>:
	{
 800618c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800618e:	b087      	sub	sp, #28
 8006190:	9004      	str	r0, [sp, #16]
 8006192:	9105      	str	r1, [sp, #20]
 8006194:	0016      	movs	r6, r2
 8006196:	001f      	movs	r7, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006198:	0090      	lsls	r0, r2, #2
 800619a:	f000 fd11 	bl	8006bc0 <pvPortMalloc>
 800619e:	1e04      	subs	r4, r0, #0
			if( pxStack != NULL )
 80061a0:	d01f      	beq.n	80061e2 <xTaskCreate+0x56>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80061a2:	2054      	movs	r0, #84	; 0x54
 80061a4:	f000 fd0c 	bl	8006bc0 <pvPortMalloc>
 80061a8:	1e05      	subs	r5, r0, #0
				if( pxNewTCB != NULL )
 80061aa:	d016      	beq.n	80061da <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 80061ac:	6304      	str	r4, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80061ae:	2d00      	cmp	r5, #0
 80061b0:	d01b      	beq.n	80061ea <xTaskCreate+0x5e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80061b2:	2300      	movs	r3, #0
 80061b4:	2251      	movs	r2, #81	; 0x51
 80061b6:	54ab      	strb	r3, [r5, r2]
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80061b8:	9303      	str	r3, [sp, #12]
 80061ba:	9502      	str	r5, [sp, #8]
 80061bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061be:	9301      	str	r3, [sp, #4]
 80061c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	003b      	movs	r3, r7
 80061c6:	0032      	movs	r2, r6
 80061c8:	9905      	ldr	r1, [sp, #20]
 80061ca:	9804      	ldr	r0, [sp, #16]
 80061cc:	f7ff fe60 	bl	8005e90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061d0:	0028      	movs	r0, r5
 80061d2:	f7ff fedf 	bl	8005f94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061d6:	2001      	movs	r0, #1
 80061d8:	e005      	b.n	80061e6 <xTaskCreate+0x5a>
					vPortFree( pxStack );
 80061da:	0020      	movs	r0, r4
 80061dc:	f000 fd58 	bl	8006c90 <vPortFree>
 80061e0:	e7e5      	b.n	80061ae <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061e2:	2001      	movs	r0, #1
 80061e4:	4240      	negs	r0, r0
	}
 80061e6:	b007      	add	sp, #28
 80061e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061ea:	2001      	movs	r0, #1
 80061ec:	4240      	negs	r0, r0
		return xReturn;
 80061ee:	e7fa      	b.n	80061e6 <xTaskCreate+0x5a>

080061f0 <vTaskStartScheduler>:
{
 80061f0:	b510      	push	{r4, lr}
 80061f2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80061f4:	2400      	movs	r4, #0
 80061f6:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80061f8:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80061fa:	aa07      	add	r2, sp, #28
 80061fc:	a906      	add	r1, sp, #24
 80061fe:	a805      	add	r0, sp, #20
 8006200:	f000 feb8 	bl	8006f74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006204:	9a07      	ldr	r2, [sp, #28]
 8006206:	490e      	ldr	r1, [pc, #56]	; (8006240 <vTaskStartScheduler+0x50>)
 8006208:	480e      	ldr	r0, [pc, #56]	; (8006244 <vTaskStartScheduler+0x54>)
 800620a:	9b05      	ldr	r3, [sp, #20]
 800620c:	9302      	str	r3, [sp, #8]
 800620e:	9b06      	ldr	r3, [sp, #24]
 8006210:	9301      	str	r3, [sp, #4]
 8006212:	9400      	str	r4, [sp, #0]
 8006214:	2300      	movs	r3, #0
 8006216:	f7ff ff8f 	bl	8006138 <xTaskCreateStatic>
 800621a:	4b0b      	ldr	r3, [pc, #44]	; (8006248 <vTaskStartScheduler+0x58>)
 800621c:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800621e:	2800      	cmp	r0, #0
 8006220:	d00c      	beq.n	800623c <vTaskStartScheduler+0x4c>
		portDISABLE_INTERRUPTS();
 8006222:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8006224:	4b09      	ldr	r3, [pc, #36]	; (800624c <vTaskStartScheduler+0x5c>)
 8006226:	2201      	movs	r2, #1
 8006228:	4252      	negs	r2, r2
 800622a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800622c:	4b08      	ldr	r3, [pc, #32]	; (8006250 <vTaskStartScheduler+0x60>)
 800622e:	3202      	adds	r2, #2
 8006230:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006232:	4b08      	ldr	r3, [pc, #32]	; (8006254 <vTaskStartScheduler+0x64>)
 8006234:	2200      	movs	r2, #0
 8006236:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8006238:	f000 fbe2 	bl	8006a00 <xPortStartScheduler>
}
 800623c:	b008      	add	sp, #32
 800623e:	bd10      	pop	{r4, pc}
 8006240:	0800df4c 	.word	0x0800df4c
 8006244:	080060a5 	.word	0x080060a5
 8006248:	200007d8 	.word	0x200007d8
 800624c:	200007dc 	.word	0x200007dc
 8006250:	200007f8 	.word	0x200007f8
 8006254:	20000824 	.word	0x20000824

08006258 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006258:	4a02      	ldr	r2, [pc, #8]	; (8006264 <vTaskSuspendAll+0xc>)
 800625a:	6813      	ldr	r3, [r2, #0]
 800625c:	3301      	adds	r3, #1
 800625e:	6013      	str	r3, [r2, #0]
}
 8006260:	4770      	bx	lr
 8006262:	46c0      	nop			; (mov r8, r8)
 8006264:	200007a4 	.word	0x200007a4

08006268 <xTaskIncrementTick>:
{
 8006268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800626a:	4b39      	ldr	r3, [pc, #228]	; (8006350 <xTaskIncrementTick+0xe8>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d161      	bne.n	8006336 <xTaskIncrementTick+0xce>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006272:	4b38      	ldr	r3, [pc, #224]	; (8006354 <xTaskIncrementTick+0xec>)
 8006274:	681d      	ldr	r5, [r3, #0]
 8006276:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8006278:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800627a:	2d00      	cmp	r5, #0
 800627c:	d112      	bne.n	80062a4 <xTaskIncrementTick+0x3c>
			taskSWITCH_DELAYED_LISTS();
 800627e:	4b36      	ldr	r3, [pc, #216]	; (8006358 <xTaskIncrementTick+0xf0>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <xTaskIncrementTick+0x24>
 8006288:	b672      	cpsid	i
 800628a:	e7fe      	b.n	800628a <xTaskIncrementTick+0x22>
 800628c:	4a32      	ldr	r2, [pc, #200]	; (8006358 <xTaskIncrementTick+0xf0>)
 800628e:	6811      	ldr	r1, [r2, #0]
 8006290:	4b32      	ldr	r3, [pc, #200]	; (800635c <xTaskIncrementTick+0xf4>)
 8006292:	6818      	ldr	r0, [r3, #0]
 8006294:	6010      	str	r0, [r2, #0]
 8006296:	6019      	str	r1, [r3, #0]
 8006298:	4a31      	ldr	r2, [pc, #196]	; (8006360 <xTaskIncrementTick+0xf8>)
 800629a:	6813      	ldr	r3, [r2, #0]
 800629c:	3301      	adds	r3, #1
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	f7ff fde0 	bl	8005e64 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80062a4:	4b2f      	ldr	r3, [pc, #188]	; (8006364 <xTaskIncrementTick+0xfc>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	42ab      	cmp	r3, r5
 80062aa:	d93a      	bls.n	8006322 <xTaskIncrementTick+0xba>
BaseType_t xSwitchRequired = pdFALSE;
 80062ac:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80062ae:	4b2e      	ldr	r3, [pc, #184]	; (8006368 <xTaskIncrementTick+0x100>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80062b4:	4a2d      	ldr	r2, [pc, #180]	; (800636c <xTaskIncrementTick+0x104>)
 80062b6:	008b      	lsls	r3, r1, #2
 80062b8:	185b      	adds	r3, r3, r1
 80062ba:	0099      	lsls	r1, r3, #2
 80062bc:	588b      	ldr	r3, [r1, r2]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d93e      	bls.n	8006340 <xTaskIncrementTick+0xd8>
				xSwitchRequired = pdTRUE;
 80062c2:	2701      	movs	r7, #1
 80062c4:	e03c      	b.n	8006340 <xTaskIncrementTick+0xd8>
							xSwitchRequired = pdTRUE;
 80062c6:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062c8:	4b23      	ldr	r3, [pc, #140]	; (8006358 <xTaskIncrementTick+0xf0>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d029      	beq.n	8006326 <xTaskIncrementTick+0xbe>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062d2:	4b21      	ldr	r3, [pc, #132]	; (8006358 <xTaskIncrementTick+0xf0>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062da:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 80062dc:	429d      	cmp	r5, r3
 80062de:	d327      	bcc.n	8006330 <xTaskIncrementTick+0xc8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062e0:	1d26      	adds	r6, r4, #4
 80062e2:	0030      	movs	r0, r6
 80062e4:	f7ff fab6 	bl	8005854 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <xTaskIncrementTick+0x8e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062ee:	0020      	movs	r0, r4
 80062f0:	3018      	adds	r0, #24
 80062f2:	f7ff faaf 	bl	8005854 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80062f8:	4b1d      	ldr	r3, [pc, #116]	; (8006370 <xTaskIncrementTick+0x108>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d901      	bls.n	8006304 <xTaskIncrementTick+0x9c>
 8006300:	4b1b      	ldr	r3, [pc, #108]	; (8006370 <xTaskIncrementTick+0x108>)
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	0093      	lsls	r3, r2, #2
 8006306:	189b      	adds	r3, r3, r2
 8006308:	0098      	lsls	r0, r3, #2
 800630a:	4b18      	ldr	r3, [pc, #96]	; (800636c <xTaskIncrementTick+0x104>)
 800630c:	18c0      	adds	r0, r0, r3
 800630e:	0031      	movs	r1, r6
 8006310:	f7ff fa7e 	bl	8005810 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006314:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006316:	4b14      	ldr	r3, [pc, #80]	; (8006368 <xTaskIncrementTick+0x100>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631c:	429a      	cmp	r2, r3
 800631e:	d2d2      	bcs.n	80062c6 <xTaskIncrementTick+0x5e>
 8006320:	e7d2      	b.n	80062c8 <xTaskIncrementTick+0x60>
BaseType_t xSwitchRequired = pdFALSE;
 8006322:	2700      	movs	r7, #0
 8006324:	e7d0      	b.n	80062c8 <xTaskIncrementTick+0x60>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006326:	4b0f      	ldr	r3, [pc, #60]	; (8006364 <xTaskIncrementTick+0xfc>)
 8006328:	2201      	movs	r2, #1
 800632a:	4252      	negs	r2, r2
 800632c:	601a      	str	r2, [r3, #0]
					break;
 800632e:	e7be      	b.n	80062ae <xTaskIncrementTick+0x46>
						xNextTaskUnblockTime = xItemValue;
 8006330:	4a0c      	ldr	r2, [pc, #48]	; (8006364 <xTaskIncrementTick+0xfc>)
 8006332:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006334:	e7bb      	b.n	80062ae <xTaskIncrementTick+0x46>
		++uxPendedTicks;
 8006336:	4a0f      	ldr	r2, [pc, #60]	; (8006374 <xTaskIncrementTick+0x10c>)
 8006338:	6813      	ldr	r3, [r2, #0]
 800633a:	3301      	adds	r3, #1
 800633c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800633e:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 8006340:	4b0d      	ldr	r3, [pc, #52]	; (8006378 <xTaskIncrementTick+0x110>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d000      	beq.n	800634a <xTaskIncrementTick+0xe2>
			xSwitchRequired = pdTRUE;
 8006348:	2701      	movs	r7, #1
}
 800634a:	0038      	movs	r0, r7
 800634c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800634e:	46c0      	nop			; (mov r8, r8)
 8006350:	200007a4 	.word	0x200007a4
 8006354:	20000824 	.word	0x20000824
 8006358:	20000704 	.word	0x20000704
 800635c:	20000708 	.word	0x20000708
 8006360:	200007e0 	.word	0x200007e0
 8006364:	200007dc 	.word	0x200007dc
 8006368:	20000700 	.word	0x20000700
 800636c:	2000070c 	.word	0x2000070c
 8006370:	200007ac 	.word	0x200007ac
 8006374:	200007a0 	.word	0x200007a0
 8006378:	20000828 	.word	0x20000828

0800637c <xTaskResumeAll>:
{
 800637c:	b570      	push	{r4, r5, r6, lr}
	configASSERT( uxSchedulerSuspended );
 800637e:	4b31      	ldr	r3, [pc, #196]	; (8006444 <xTaskResumeAll+0xc8>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <xTaskResumeAll+0xe>
 8006386:	b672      	cpsid	i
 8006388:	e7fe      	b.n	8006388 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 800638a:	f000 fb63 	bl	8006a54 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800638e:	4b2d      	ldr	r3, [pc, #180]	; (8006444 <xTaskResumeAll+0xc8>)
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	3a01      	subs	r2, #1
 8006394:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d14d      	bne.n	8006438 <xTaskResumeAll+0xbc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800639c:	4b2a      	ldr	r3, [pc, #168]	; (8006448 <xTaskResumeAll+0xcc>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <xTaskResumeAll+0x2c>
BaseType_t xAlreadyYielded = pdFALSE;
 80063a4:	2400      	movs	r4, #0
 80063a6:	e048      	b.n	800643a <xTaskResumeAll+0xbe>
TCB_t *pxTCB = NULL;
 80063a8:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063aa:	4b28      	ldr	r3, [pc, #160]	; (800644c <xTaskResumeAll+0xd0>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d023      	beq.n	80063fa <xTaskResumeAll+0x7e>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063b2:	4b26      	ldr	r3, [pc, #152]	; (800644c <xTaskResumeAll+0xd0>)
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063b8:	0020      	movs	r0, r4
 80063ba:	3018      	adds	r0, #24
 80063bc:	f7ff fa4a 	bl	8005854 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063c0:	1d25      	adds	r5, r4, #4
 80063c2:	0028      	movs	r0, r5
 80063c4:	f7ff fa46 	bl	8005854 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80063ca:	4a21      	ldr	r2, [pc, #132]	; (8006450 <xTaskResumeAll+0xd4>)
 80063cc:	6812      	ldr	r2, [r2, #0]
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d901      	bls.n	80063d6 <xTaskResumeAll+0x5a>
 80063d2:	4a1f      	ldr	r2, [pc, #124]	; (8006450 <xTaskResumeAll+0xd4>)
 80063d4:	6013      	str	r3, [r2, #0]
 80063d6:	0098      	lsls	r0, r3, #2
 80063d8:	18c0      	adds	r0, r0, r3
 80063da:	0080      	lsls	r0, r0, #2
 80063dc:	4b1d      	ldr	r3, [pc, #116]	; (8006454 <xTaskResumeAll+0xd8>)
 80063de:	18c0      	adds	r0, r0, r3
 80063e0:	0029      	movs	r1, r5
 80063e2:	f7ff fa15 	bl	8005810 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80063e8:	4b1b      	ldr	r3, [pc, #108]	; (8006458 <xTaskResumeAll+0xdc>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d3db      	bcc.n	80063aa <xTaskResumeAll+0x2e>
						xYieldPending = pdTRUE;
 80063f2:	4b1a      	ldr	r3, [pc, #104]	; (800645c <xTaskResumeAll+0xe0>)
 80063f4:	2201      	movs	r2, #1
 80063f6:	601a      	str	r2, [r3, #0]
 80063f8:	e7d7      	b.n	80063aa <xTaskResumeAll+0x2e>
				if( pxTCB != NULL )
 80063fa:	2c00      	cmp	r4, #0
 80063fc:	d001      	beq.n	8006402 <xTaskResumeAll+0x86>
					prvResetNextTaskUnblockTime();
 80063fe:	f7ff fd31 	bl	8005e64 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006402:	4b17      	ldr	r3, [pc, #92]	; (8006460 <xTaskResumeAll+0xe4>)
 8006404:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006406:	2c00      	cmp	r4, #0
 8006408:	d10a      	bne.n	8006420 <xTaskResumeAll+0xa4>
				if( xYieldPending != pdFALSE )
 800640a:	4b14      	ldr	r3, [pc, #80]	; (800645c <xTaskResumeAll+0xe0>)
 800640c:	681c      	ldr	r4, [r3, #0]
 800640e:	2c00      	cmp	r4, #0
 8006410:	d013      	beq.n	800643a <xTaskResumeAll+0xbe>
					taskYIELD_IF_USING_PREEMPTION();
 8006412:	f000 fb13 	bl	8006a3c <vPortYield>
						xAlreadyYielded = pdTRUE;
 8006416:	2401      	movs	r4, #1
 8006418:	e00f      	b.n	800643a <xTaskResumeAll+0xbe>
							--uxPendedCounts;
 800641a:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800641c:	2c00      	cmp	r4, #0
 800641e:	d007      	beq.n	8006430 <xTaskResumeAll+0xb4>
							if( xTaskIncrementTick() != pdFALSE )
 8006420:	f7ff ff22 	bl	8006268 <xTaskIncrementTick>
 8006424:	2800      	cmp	r0, #0
 8006426:	d0f8      	beq.n	800641a <xTaskResumeAll+0x9e>
								xYieldPending = pdTRUE;
 8006428:	4b0c      	ldr	r3, [pc, #48]	; (800645c <xTaskResumeAll+0xe0>)
 800642a:	2201      	movs	r2, #1
 800642c:	601a      	str	r2, [r3, #0]
 800642e:	e7f4      	b.n	800641a <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8006430:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <xTaskResumeAll+0xe4>)
 8006432:	2200      	movs	r2, #0
 8006434:	601a      	str	r2, [r3, #0]
 8006436:	e7e8      	b.n	800640a <xTaskResumeAll+0x8e>
BaseType_t xAlreadyYielded = pdFALSE;
 8006438:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800643a:	f000 fb17 	bl	8006a6c <vPortExitCritical>
}
 800643e:	0020      	movs	r0, r4
 8006440:	bd70      	pop	{r4, r5, r6, pc}
 8006442:	46c0      	nop			; (mov r8, r8)
 8006444:	200007a4 	.word	0x200007a4
 8006448:	20000798 	.word	0x20000798
 800644c:	200007e4 	.word	0x200007e4
 8006450:	200007ac 	.word	0x200007ac
 8006454:	2000070c 	.word	0x2000070c
 8006458:	20000700 	.word	0x20000700
 800645c:	20000828 	.word	0x20000828
 8006460:	200007a0 	.word	0x200007a0

08006464 <vTaskDelay>:
	{
 8006464:	b510      	push	{r4, lr}
 8006466:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006468:	d00f      	beq.n	800648a <vTaskDelay+0x26>
			configASSERT( uxSchedulerSuspended == 0 );
 800646a:	4b09      	ldr	r3, [pc, #36]	; (8006490 <vTaskDelay+0x2c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <vTaskDelay+0x12>
 8006472:	b672      	cpsid	i
 8006474:	e7fe      	b.n	8006474 <vTaskDelay+0x10>
			vTaskSuspendAll();
 8006476:	f7ff feef 	bl	8006258 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800647a:	2100      	movs	r1, #0
 800647c:	0020      	movs	r0, r4
 800647e:	f7ff fe1d 	bl	80060bc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006482:	f7ff ff7b 	bl	800637c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006486:	2800      	cmp	r0, #0
 8006488:	d101      	bne.n	800648e <vTaskDelay+0x2a>
			portYIELD_WITHIN_API();
 800648a:	f000 fad7 	bl	8006a3c <vPortYield>
	}
 800648e:	bd10      	pop	{r4, pc}
 8006490:	200007a4 	.word	0x200007a4

08006494 <vTaskSwitchContext>:
{
 8006494:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006496:	4b1e      	ldr	r3, [pc, #120]	; (8006510 <vTaskSwitchContext+0x7c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d003      	beq.n	80064a6 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800649e:	4b1d      	ldr	r3, [pc, #116]	; (8006514 <vTaskSwitchContext+0x80>)
 80064a0:	2201      	movs	r2, #1
 80064a2:	601a      	str	r2, [r3, #0]
}
 80064a4:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80064a6:	4b1b      	ldr	r3, [pc, #108]	; (8006514 <vTaskSwitchContext+0x80>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064ac:	4b1a      	ldr	r3, [pc, #104]	; (8006518 <vTaskSwitchContext+0x84>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	491a      	ldr	r1, [pc, #104]	; (800651c <vTaskSwitchContext+0x88>)
 80064b2:	009a      	lsls	r2, r3, #2
 80064b4:	18d2      	adds	r2, r2, r3
 80064b6:	0090      	lsls	r0, r2, #2
 80064b8:	5842      	ldr	r2, [r0, r1]
 80064ba:	2a00      	cmp	r2, #0
 80064bc:	d105      	bne.n	80064ca <vTaskSwitchContext+0x36>
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <vTaskSwitchContext+0x32>
 80064c2:	3b01      	subs	r3, #1
 80064c4:	e7f4      	b.n	80064b0 <vTaskSwitchContext+0x1c>
 80064c6:	b672      	cpsid	i
 80064c8:	e7fe      	b.n	80064c8 <vTaskSwitchContext+0x34>
 80064ca:	0008      	movs	r0, r1
 80064cc:	0099      	lsls	r1, r3, #2
 80064ce:	18cc      	adds	r4, r1, r3
 80064d0:	00a2      	lsls	r2, r4, #2
 80064d2:	1882      	adds	r2, r0, r2
 80064d4:	6854      	ldr	r4, [r2, #4]
 80064d6:	6864      	ldr	r4, [r4, #4]
 80064d8:	6054      	str	r4, [r2, #4]
 80064da:	18c9      	adds	r1, r1, r3
 80064dc:	008a      	lsls	r2, r1, #2
 80064de:	3208      	adds	r2, #8
 80064e0:	1812      	adds	r2, r2, r0
 80064e2:	4294      	cmp	r4, r2
 80064e4:	d00b      	beq.n	80064fe <vTaskSwitchContext+0x6a>
 80064e6:	4a0d      	ldr	r2, [pc, #52]	; (800651c <vTaskSwitchContext+0x88>)
 80064e8:	0099      	lsls	r1, r3, #2
 80064ea:	18c9      	adds	r1, r1, r3
 80064ec:	0088      	lsls	r0, r1, #2
 80064ee:	1812      	adds	r2, r2, r0
 80064f0:	6852      	ldr	r2, [r2, #4]
 80064f2:	68d1      	ldr	r1, [r2, #12]
 80064f4:	4a0a      	ldr	r2, [pc, #40]	; (8006520 <vTaskSwitchContext+0x8c>)
 80064f6:	6011      	str	r1, [r2, #0]
 80064f8:	4a07      	ldr	r2, [pc, #28]	; (8006518 <vTaskSwitchContext+0x84>)
 80064fa:	6013      	str	r3, [r2, #0]
}
 80064fc:	e7d2      	b.n	80064a4 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064fe:	6864      	ldr	r4, [r4, #4]
 8006500:	0002      	movs	r2, r0
 8006502:	0099      	lsls	r1, r3, #2
 8006504:	18c9      	adds	r1, r1, r3
 8006506:	0088      	lsls	r0, r1, #2
 8006508:	1812      	adds	r2, r2, r0
 800650a:	6054      	str	r4, [r2, #4]
 800650c:	e7eb      	b.n	80064e6 <vTaskSwitchContext+0x52>
 800650e:	46c0      	nop			; (mov r8, r8)
 8006510:	200007a4 	.word	0x200007a4
 8006514:	20000828 	.word	0x20000828
 8006518:	200007ac 	.word	0x200007ac
 800651c:	2000070c 	.word	0x2000070c
 8006520:	20000700 	.word	0x20000700

08006524 <vTaskPlaceOnEventList>:
{
 8006524:	b510      	push	{r4, lr}
 8006526:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 8006528:	2800      	cmp	r0, #0
 800652a:	d009      	beq.n	8006540 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800652c:	4b05      	ldr	r3, [pc, #20]	; (8006544 <vTaskPlaceOnEventList+0x20>)
 800652e:	6819      	ldr	r1, [r3, #0]
 8006530:	3118      	adds	r1, #24
 8006532:	f7ff f978 	bl	8005826 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006536:	2101      	movs	r1, #1
 8006538:	0020      	movs	r0, r4
 800653a:	f7ff fdbf 	bl	80060bc <prvAddCurrentTaskToDelayedList>
}
 800653e:	bd10      	pop	{r4, pc}
	configASSERT( pxEventList );
 8006540:	b672      	cpsid	i
 8006542:	e7fe      	b.n	8006542 <vTaskPlaceOnEventList+0x1e>
 8006544:	20000700 	.word	0x20000700

08006548 <xTaskRemoveFromEventList>:
{
 8006548:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800654a:	68c3      	ldr	r3, [r0, #12]
 800654c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800654e:	2c00      	cmp	r4, #0
 8006550:	d026      	beq.n	80065a0 <xTaskRemoveFromEventList+0x58>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006552:	0025      	movs	r5, r4
 8006554:	3518      	adds	r5, #24
 8006556:	0028      	movs	r0, r5
 8006558:	f7ff f97c 	bl	8005854 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800655c:	4b15      	ldr	r3, [pc, #84]	; (80065b4 <xTaskRemoveFromEventList+0x6c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d11f      	bne.n	80065a4 <xTaskRemoveFromEventList+0x5c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006564:	1d25      	adds	r5, r4, #4
 8006566:	0028      	movs	r0, r5
 8006568:	f7ff f974 	bl	8005854 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800656c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800656e:	4a12      	ldr	r2, [pc, #72]	; (80065b8 <xTaskRemoveFromEventList+0x70>)
 8006570:	6812      	ldr	r2, [r2, #0]
 8006572:	4293      	cmp	r3, r2
 8006574:	d901      	bls.n	800657a <xTaskRemoveFromEventList+0x32>
 8006576:	4a10      	ldr	r2, [pc, #64]	; (80065b8 <xTaskRemoveFromEventList+0x70>)
 8006578:	6013      	str	r3, [r2, #0]
 800657a:	0098      	lsls	r0, r3, #2
 800657c:	18c0      	adds	r0, r0, r3
 800657e:	0080      	lsls	r0, r0, #2
 8006580:	4b0e      	ldr	r3, [pc, #56]	; (80065bc <xTaskRemoveFromEventList+0x74>)
 8006582:	18c0      	adds	r0, r0, r3
 8006584:	0029      	movs	r1, r5
 8006586:	f7ff f943 	bl	8005810 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800658a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800658c:	4b0c      	ldr	r3, [pc, #48]	; (80065c0 <xTaskRemoveFromEventList+0x78>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006592:	429a      	cmp	r2, r3
 8006594:	d90b      	bls.n	80065ae <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 8006596:	4b0b      	ldr	r3, [pc, #44]	; (80065c4 <xTaskRemoveFromEventList+0x7c>)
 8006598:	2201      	movs	r2, #1
 800659a:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800659c:	2001      	movs	r0, #1
}
 800659e:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
 80065a0:	b672      	cpsid	i
 80065a2:	e7fe      	b.n	80065a2 <xTaskRemoveFromEventList+0x5a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80065a4:	4808      	ldr	r0, [pc, #32]	; (80065c8 <xTaskRemoveFromEventList+0x80>)
 80065a6:	0029      	movs	r1, r5
 80065a8:	f7ff f932 	bl	8005810 <vListInsertEnd>
 80065ac:	e7ed      	b.n	800658a <xTaskRemoveFromEventList+0x42>
		xReturn = pdFALSE;
 80065ae:	2000      	movs	r0, #0
	return xReturn;
 80065b0:	e7f5      	b.n	800659e <xTaskRemoveFromEventList+0x56>
 80065b2:	46c0      	nop			; (mov r8, r8)
 80065b4:	200007a4 	.word	0x200007a4
 80065b8:	200007ac 	.word	0x200007ac
 80065bc:	2000070c 	.word	0x2000070c
 80065c0:	20000700 	.word	0x20000700
 80065c4:	20000828 	.word	0x20000828
 80065c8:	200007e4 	.word	0x200007e4

080065cc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80065cc:	4b03      	ldr	r3, [pc, #12]	; (80065dc <vTaskInternalSetTimeOutState+0x10>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80065d2:	4b03      	ldr	r3, [pc, #12]	; (80065e0 <vTaskInternalSetTimeOutState+0x14>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6043      	str	r3, [r0, #4]
}
 80065d8:	4770      	bx	lr
 80065da:	46c0      	nop			; (mov r8, r8)
 80065dc:	200007e0 	.word	0x200007e0
 80065e0:	20000824 	.word	0x20000824

080065e4 <xTaskCheckForTimeOut>:
{
 80065e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e6:	0004      	movs	r4, r0
 80065e8:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
 80065ea:	2800      	cmp	r0, #0
 80065ec:	d017      	beq.n	800661e <xTaskCheckForTimeOut+0x3a>
	configASSERT( pxTicksToWait );
 80065ee:	2900      	cmp	r1, #0
 80065f0:	d017      	beq.n	8006622 <xTaskCheckForTimeOut+0x3e>
	taskENTER_CRITICAL();
 80065f2:	f000 fa2f 	bl	8006a54 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80065f6:	4b13      	ldr	r3, [pc, #76]	; (8006644 <xTaskCheckForTimeOut+0x60>)
 80065f8:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80065fa:	6863      	ldr	r3, [r4, #4]
 80065fc:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 80065fe:	682a      	ldr	r2, [r5, #0]
 8006600:	1c56      	adds	r6, r2, #1
 8006602:	d018      	beq.n	8006636 <xTaskCheckForTimeOut+0x52>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006604:	6827      	ldr	r7, [r4, #0]
 8006606:	4e10      	ldr	r6, [pc, #64]	; (8006648 <xTaskCheckForTimeOut+0x64>)
 8006608:	6836      	ldr	r6, [r6, #0]
 800660a:	42b7      	cmp	r7, r6
 800660c:	d001      	beq.n	8006612 <xTaskCheckForTimeOut+0x2e>
 800660e:	428b      	cmp	r3, r1
 8006610:	d916      	bls.n	8006640 <xTaskCheckForTimeOut+0x5c>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006612:	4282      	cmp	r2, r0
 8006614:	d807      	bhi.n	8006626 <xTaskCheckForTimeOut+0x42>
			*pxTicksToWait = 0;
 8006616:	2300      	movs	r3, #0
 8006618:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 800661a:	2401      	movs	r4, #1
 800661c:	e00c      	b.n	8006638 <xTaskCheckForTimeOut+0x54>
	configASSERT( pxTimeOut );
 800661e:	b672      	cpsid	i
 8006620:	e7fe      	b.n	8006620 <xTaskCheckForTimeOut+0x3c>
	configASSERT( pxTicksToWait );
 8006622:	b672      	cpsid	i
 8006624:	e7fe      	b.n	8006624 <xTaskCheckForTimeOut+0x40>
			*pxTicksToWait -= xElapsedTime;
 8006626:	1a5b      	subs	r3, r3, r1
 8006628:	189b      	adds	r3, r3, r2
 800662a:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800662c:	0020      	movs	r0, r4
 800662e:	f7ff ffcd 	bl	80065cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006632:	2400      	movs	r4, #0
 8006634:	e000      	b.n	8006638 <xTaskCheckForTimeOut+0x54>
				xReturn = pdFALSE;
 8006636:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006638:	f000 fa18 	bl	8006a6c <vPortExitCritical>
}
 800663c:	0020      	movs	r0, r4
 800663e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8006640:	2401      	movs	r4, #1
 8006642:	e7f9      	b.n	8006638 <xTaskCheckForTimeOut+0x54>
 8006644:	20000824 	.word	0x20000824
 8006648:	200007e0 	.word	0x200007e0

0800664c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800664c:	4b01      	ldr	r3, [pc, #4]	; (8006654 <vTaskMissedYield+0x8>)
 800664e:	2201      	movs	r2, #1
 8006650:	601a      	str	r2, [r3, #0]
}
 8006652:	4770      	bx	lr
 8006654:	20000828 	.word	0x20000828

08006658 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006658:	4b06      	ldr	r3, [pc, #24]	; (8006674 <xTaskGetSchedulerState+0x1c>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d007      	beq.n	8006670 <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006660:	4b05      	ldr	r3, [pc, #20]	; (8006678 <xTaskGetSchedulerState+0x20>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 8006668:	2000      	movs	r0, #0
		return xReturn;
 800666a:	e002      	b.n	8006672 <xTaskGetSchedulerState+0x1a>
				xReturn = taskSCHEDULER_RUNNING;
 800666c:	2002      	movs	r0, #2
 800666e:	e000      	b.n	8006672 <xTaskGetSchedulerState+0x1a>
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006670:	2001      	movs	r0, #1
	}
 8006672:	4770      	bx	lr
 8006674:	200007f8 	.word	0x200007f8
 8006678:	200007a4 	.word	0x200007a4

0800667c <xTaskPriorityDisinherit>:
	{
 800667c:	b570      	push	{r4, r5, r6, lr}
 800667e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 8006680:	d02d      	beq.n	80066de <xTaskPriorityDisinherit+0x62>
			configASSERT( pxTCB == pxCurrentTCB );
 8006682:	4b19      	ldr	r3, [pc, #100]	; (80066e8 <xTaskPriorityDisinherit+0x6c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4283      	cmp	r3, r0
 8006688:	d001      	beq.n	800668e <xTaskPriorityDisinherit+0x12>
 800668a:	b672      	cpsid	i
 800668c:	e7fe      	b.n	800668c <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 800668e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <xTaskPriorityDisinherit+0x1c>
 8006694:	b672      	cpsid	i
 8006696:	e7fe      	b.n	8006696 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 8006698:	3b01      	subs	r3, #1
 800669a:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800669c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800669e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80066a0:	4291      	cmp	r1, r2
 80066a2:	d01e      	beq.n	80066e2 <xTaskPriorityDisinherit+0x66>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <xTaskPriorityDisinherit+0x30>
	BaseType_t xReturn = pdFALSE;
 80066a8:	2000      	movs	r0, #0
		return xReturn;
 80066aa:	e019      	b.n	80066e0 <xTaskPriorityDisinherit+0x64>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066ac:	1d05      	adds	r5, r0, #4
 80066ae:	0028      	movs	r0, r5
 80066b0:	f7ff f8d0 	bl	8005854 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80066b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80066b6:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066b8:	2207      	movs	r2, #7
 80066ba:	1ad2      	subs	r2, r2, r3
 80066bc:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80066be:	4a0b      	ldr	r2, [pc, #44]	; (80066ec <xTaskPriorityDisinherit+0x70>)
 80066c0:	6812      	ldr	r2, [r2, #0]
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d901      	bls.n	80066ca <xTaskPriorityDisinherit+0x4e>
 80066c6:	4a09      	ldr	r2, [pc, #36]	; (80066ec <xTaskPriorityDisinherit+0x70>)
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	0098      	lsls	r0, r3, #2
 80066cc:	18c0      	adds	r0, r0, r3
 80066ce:	0080      	lsls	r0, r0, #2
 80066d0:	4b07      	ldr	r3, [pc, #28]	; (80066f0 <xTaskPriorityDisinherit+0x74>)
 80066d2:	18c0      	adds	r0, r0, r3
 80066d4:	0029      	movs	r1, r5
 80066d6:	f7ff f89b 	bl	8005810 <vListInsertEnd>
					xReturn = pdTRUE;
 80066da:	2001      	movs	r0, #1
 80066dc:	e000      	b.n	80066e0 <xTaskPriorityDisinherit+0x64>
	BaseType_t xReturn = pdFALSE;
 80066de:	2000      	movs	r0, #0
	}
 80066e0:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 80066e2:	2000      	movs	r0, #0
 80066e4:	e7fc      	b.n	80066e0 <xTaskPriorityDisinherit+0x64>
 80066e6:	46c0      	nop			; (mov r8, r8)
 80066e8:	20000700 	.word	0x20000700
 80066ec:	200007ac 	.word	0x200007ac
 80066f0:	2000070c 	.word	0x2000070c

080066f4 <xTaskNotifyWait>:
	{
 80066f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f6:	0006      	movs	r6, r0
 80066f8:	000f      	movs	r7, r1
 80066fa:	0014      	movs	r4, r2
 80066fc:	001d      	movs	r5, r3
		taskENTER_CRITICAL();
 80066fe:	f000 f9a9 	bl	8006a54 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006702:	4b1c      	ldr	r3, [pc, #112]	; (8006774 <xTaskNotifyWait+0x80>)
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	2350      	movs	r3, #80	; 0x50
 8006708:	5cd3      	ldrb	r3, [r2, r3]
 800670a:	2b02      	cmp	r3, #2
 800670c:	d00a      	beq.n	8006724 <xTaskNotifyWait+0x30>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800670e:	4a19      	ldr	r2, [pc, #100]	; (8006774 <xTaskNotifyWait+0x80>)
 8006710:	6811      	ldr	r1, [r2, #0]
 8006712:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8006714:	43b3      	bics	r3, r6
 8006716:	64cb      	str	r3, [r1, #76]	; 0x4c
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006718:	6812      	ldr	r2, [r2, #0]
 800671a:	2350      	movs	r3, #80	; 0x50
 800671c:	2101      	movs	r1, #1
 800671e:	54d1      	strb	r1, [r2, r3]
				if( xTicksToWait > ( TickType_t ) 0 )
 8006720:	2d00      	cmp	r5, #0
 8006722:	d119      	bne.n	8006758 <xTaskNotifyWait+0x64>
		taskEXIT_CRITICAL();
 8006724:	f000 f9a2 	bl	8006a6c <vPortExitCritical>
		taskENTER_CRITICAL();
 8006728:	f000 f994 	bl	8006a54 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 800672c:	2c00      	cmp	r4, #0
 800672e:	d003      	beq.n	8006738 <xTaskNotifyWait+0x44>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006730:	4b10      	ldr	r3, [pc, #64]	; (8006774 <xTaskNotifyWait+0x80>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006736:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006738:	4b0e      	ldr	r3, [pc, #56]	; (8006774 <xTaskNotifyWait+0x80>)
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	2350      	movs	r3, #80	; 0x50
 800673e:	5cd3      	ldrb	r3, [r2, r3]
 8006740:	2b02      	cmp	r3, #2
 8006742:	d00f      	beq.n	8006764 <xTaskNotifyWait+0x70>
				xReturn = pdFALSE;
 8006744:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006746:	4b0b      	ldr	r3, [pc, #44]	; (8006774 <xTaskNotifyWait+0x80>)
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	2350      	movs	r3, #80	; 0x50
 800674c:	2100      	movs	r1, #0
 800674e:	54d1      	strb	r1, [r2, r3]
		taskEXIT_CRITICAL();
 8006750:	f000 f98c 	bl	8006a6c <vPortExitCritical>
	}
 8006754:	0020      	movs	r0, r4
 8006756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006758:	0028      	movs	r0, r5
 800675a:	f7ff fcaf 	bl	80060bc <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800675e:	f000 f96d 	bl	8006a3c <vPortYield>
 8006762:	e7df      	b.n	8006724 <xTaskNotifyWait+0x30>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8006764:	4b03      	ldr	r3, [pc, #12]	; (8006774 <xTaskNotifyWait+0x80>)
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800676a:	43bb      	bics	r3, r7
 800676c:	64d3      	str	r3, [r2, #76]	; 0x4c
				xReturn = pdTRUE;
 800676e:	2401      	movs	r4, #1
 8006770:	e7e9      	b.n	8006746 <xTaskNotifyWait+0x52>
 8006772:	46c0      	nop			; (mov r8, r8)
 8006774:	20000700 	.word	0x20000700

08006778 <xTaskGenericNotify>:
	{
 8006778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677a:	0004      	movs	r4, r0
 800677c:	000e      	movs	r6, r1
 800677e:	0015      	movs	r5, r2
 8006780:	001f      	movs	r7, r3
		configASSERT( xTaskToNotify );
 8006782:	2800      	cmp	r0, #0
 8006784:	d010      	beq.n	80067a8 <xTaskGenericNotify+0x30>
		taskENTER_CRITICAL();
 8006786:	f000 f965 	bl	8006a54 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 800678a:	2f00      	cmp	r7, #0
 800678c:	d001      	beq.n	8006792 <xTaskGenericNotify+0x1a>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800678e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006790:	603b      	str	r3, [r7, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006792:	2250      	movs	r2, #80	; 0x50
 8006794:	5ca3      	ldrb	r3, [r4, r2]
 8006796:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006798:	2102      	movs	r1, #2
 800679a:	54a1      	strb	r1, [r4, r2]
			switch( eAction )
 800679c:	2d04      	cmp	r5, #4
 800679e:	d817      	bhi.n	80067d0 <xTaskGenericNotify+0x58>
 80067a0:	00ad      	lsls	r5, r5, #2
 80067a2:	4a24      	ldr	r2, [pc, #144]	; (8006834 <xTaskGenericNotify+0xbc>)
 80067a4:	5952      	ldr	r2, [r2, r5]
 80067a6:	4697      	mov	pc, r2
		configASSERT( xTaskToNotify );
 80067a8:	b672      	cpsid	i
 80067aa:	e7fe      	b.n	80067aa <xTaskGenericNotify+0x32>
					pxTCB->ulNotifiedValue |= ulValue;
 80067ac:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80067ae:	4332      	orrs	r2, r6
 80067b0:	64e2      	str	r2, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 80067b2:	2501      	movs	r5, #1
					break;
 80067b4:	e012      	b.n	80067dc <xTaskGenericNotify+0x64>
					( pxTCB->ulNotifiedValue )++;
 80067b6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80067b8:	3201      	adds	r2, #1
 80067ba:	64e2      	str	r2, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 80067bc:	2501      	movs	r5, #1
					break;
 80067be:	e00d      	b.n	80067dc <xTaskGenericNotify+0x64>
					pxTCB->ulNotifiedValue = ulValue;
 80067c0:	64e6      	str	r6, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 80067c2:	2501      	movs	r5, #1
					break;
 80067c4:	e00a      	b.n	80067dc <xTaskGenericNotify+0x64>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d00e      	beq.n	80067e8 <xTaskGenericNotify+0x70>
						pxTCB->ulNotifiedValue = ulValue;
 80067ca:	64e6      	str	r6, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 80067cc:	2501      	movs	r5, #1
 80067ce:	e005      	b.n	80067dc <xTaskGenericNotify+0x64>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80067d0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80067d2:	3201      	adds	r2, #1
 80067d4:	d00a      	beq.n	80067ec <xTaskGenericNotify+0x74>
 80067d6:	b672      	cpsid	i
 80067d8:	e7fe      	b.n	80067d8 <xTaskGenericNotify+0x60>
			switch( eAction )
 80067da:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d007      	beq.n	80067f0 <xTaskGenericNotify+0x78>
		taskEXIT_CRITICAL();
 80067e0:	f000 f944 	bl	8006a6c <vPortExitCritical>
	}
 80067e4:	0028      	movs	r0, r5
 80067e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xReturn = pdFAIL;
 80067e8:	2500      	movs	r5, #0
 80067ea:	e7f7      	b.n	80067dc <xTaskGenericNotify+0x64>
	BaseType_t xReturn = pdPASS;
 80067ec:	2501      	movs	r5, #1
 80067ee:	e7f5      	b.n	80067dc <xTaskGenericNotify+0x64>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067f0:	1d26      	adds	r6, r4, #4
 80067f2:	0030      	movs	r0, r6
 80067f4:	f7ff f82e 	bl	8005854 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80067f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80067fa:	4a0f      	ldr	r2, [pc, #60]	; (8006838 <xTaskGenericNotify+0xc0>)
 80067fc:	6812      	ldr	r2, [r2, #0]
 80067fe:	4293      	cmp	r3, r2
 8006800:	d901      	bls.n	8006806 <xTaskGenericNotify+0x8e>
 8006802:	4a0d      	ldr	r2, [pc, #52]	; (8006838 <xTaskGenericNotify+0xc0>)
 8006804:	6013      	str	r3, [r2, #0]
 8006806:	0098      	lsls	r0, r3, #2
 8006808:	18c0      	adds	r0, r0, r3
 800680a:	0080      	lsls	r0, r0, #2
 800680c:	4b0b      	ldr	r3, [pc, #44]	; (800683c <xTaskGenericNotify+0xc4>)
 800680e:	18c0      	adds	r0, r0, r3
 8006810:	0031      	movs	r1, r6
 8006812:	f7fe fffd 	bl	8005810 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006816:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006818:	2b00      	cmp	r3, #0
 800681a:	d001      	beq.n	8006820 <xTaskGenericNotify+0xa8>
 800681c:	b672      	cpsid	i
 800681e:	e7fe      	b.n	800681e <xTaskGenericNotify+0xa6>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006820:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006822:	4b07      	ldr	r3, [pc, #28]	; (8006840 <xTaskGenericNotify+0xc8>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006828:	429a      	cmp	r2, r3
 800682a:	d9d9      	bls.n	80067e0 <xTaskGenericNotify+0x68>
					taskYIELD_IF_USING_PREEMPTION();
 800682c:	f000 f906 	bl	8006a3c <vPortYield>
 8006830:	e7d6      	b.n	80067e0 <xTaskGenericNotify+0x68>
 8006832:	46c0      	nop			; (mov r8, r8)
 8006834:	0800df54 	.word	0x0800df54
 8006838:	200007ac 	.word	0x200007ac
 800683c:	2000070c 	.word	0x2000070c
 8006840:	20000700 	.word	0x20000700

08006844 <xTaskGenericNotifyFromISR>:
	{
 8006844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006846:	b083      	sub	sp, #12
 8006848:	0004      	movs	r4, r0
 800684a:	9101      	str	r1, [sp, #4]
 800684c:	0015      	movs	r5, r2
 800684e:	001e      	movs	r6, r3
		configASSERT( xTaskToNotify );
 8006850:	2800      	cmp	r0, #0
 8006852:	d011      	beq.n	8006878 <xTaskGenericNotifyFromISR+0x34>
		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006854:	f000 f91a 	bl	8006a8c <ulSetInterruptMaskFromISR>
 8006858:	0007      	movs	r7, r0
			if( pulPreviousNotificationValue != NULL )
 800685a:	2e00      	cmp	r6, #0
 800685c:	d001      	beq.n	8006862 <xTaskGenericNotifyFromISR+0x1e>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800685e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006860:	6033      	str	r3, [r6, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006862:	2250      	movs	r2, #80	; 0x50
 8006864:	5ca3      	ldrb	r3, [r4, r2]
 8006866:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006868:	2102      	movs	r1, #2
 800686a:	54a1      	strb	r1, [r4, r2]
			switch( eAction )
 800686c:	2d04      	cmp	r5, #4
 800686e:	d81a      	bhi.n	80068a6 <xTaskGenericNotifyFromISR+0x62>
 8006870:	00ad      	lsls	r5, r5, #2
 8006872:	4a2e      	ldr	r2, [pc, #184]	; (800692c <xTaskGenericNotifyFromISR+0xe8>)
 8006874:	5952      	ldr	r2, [r2, r5]
 8006876:	4697      	mov	pc, r2
		configASSERT( xTaskToNotify );
 8006878:	b672      	cpsid	i
 800687a:	e7fe      	b.n	800687a <xTaskGenericNotifyFromISR+0x36>
					pxTCB->ulNotifiedValue |= ulValue;
 800687c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800687e:	9901      	ldr	r1, [sp, #4]
 8006880:	430a      	orrs	r2, r1
 8006882:	64e2      	str	r2, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 8006884:	2501      	movs	r5, #1
					break;
 8006886:	e014      	b.n	80068b2 <xTaskGenericNotifyFromISR+0x6e>
					( pxTCB->ulNotifiedValue )++;
 8006888:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800688a:	3201      	adds	r2, #1
 800688c:	64e2      	str	r2, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 800688e:	2501      	movs	r5, #1
					break;
 8006890:	e00f      	b.n	80068b2 <xTaskGenericNotifyFromISR+0x6e>
					pxTCB->ulNotifiedValue = ulValue;
 8006892:	9a01      	ldr	r2, [sp, #4]
 8006894:	64e2      	str	r2, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 8006896:	2501      	movs	r5, #1
					break;
 8006898:	e00b      	b.n	80068b2 <xTaskGenericNotifyFromISR+0x6e>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800689a:	2b02      	cmp	r3, #2
 800689c:	d010      	beq.n	80068c0 <xTaskGenericNotifyFromISR+0x7c>
						pxTCB->ulNotifiedValue = ulValue;
 800689e:	9a01      	ldr	r2, [sp, #4]
 80068a0:	64e2      	str	r2, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 80068a2:	2501      	movs	r5, #1
 80068a4:	e005      	b.n	80068b2 <xTaskGenericNotifyFromISR+0x6e>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80068a6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80068a8:	3201      	adds	r2, #1
 80068aa:	d00b      	beq.n	80068c4 <xTaskGenericNotifyFromISR+0x80>
 80068ac:	b672      	cpsid	i
 80068ae:	e7fe      	b.n	80068ae <xTaskGenericNotifyFromISR+0x6a>
			switch( eAction )
 80068b0:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d12e      	bne.n	8006914 <xTaskGenericNotifyFromISR+0xd0>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80068b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d005      	beq.n	80068c8 <xTaskGenericNotifyFromISR+0x84>
 80068bc:	b672      	cpsid	i
 80068be:	e7fe      	b.n	80068be <xTaskGenericNotifyFromISR+0x7a>
						xReturn = pdFAIL;
 80068c0:	2500      	movs	r5, #0
 80068c2:	e7f6      	b.n	80068b2 <xTaskGenericNotifyFromISR+0x6e>
	BaseType_t xReturn = pdPASS;
 80068c4:	2501      	movs	r5, #1
 80068c6:	e7f4      	b.n	80068b2 <xTaskGenericNotifyFromISR+0x6e>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068c8:	4b19      	ldr	r3, [pc, #100]	; (8006930 <xTaskGenericNotifyFromISR+0xec>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d127      	bne.n	8006920 <xTaskGenericNotifyFromISR+0xdc>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068d0:	1d26      	adds	r6, r4, #4
 80068d2:	0030      	movs	r0, r6
 80068d4:	f7fe ffbe 	bl	8005854 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80068d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80068da:	4a16      	ldr	r2, [pc, #88]	; (8006934 <xTaskGenericNotifyFromISR+0xf0>)
 80068dc:	6812      	ldr	r2, [r2, #0]
 80068de:	4293      	cmp	r3, r2
 80068e0:	d901      	bls.n	80068e6 <xTaskGenericNotifyFromISR+0xa2>
 80068e2:	4a14      	ldr	r2, [pc, #80]	; (8006934 <xTaskGenericNotifyFromISR+0xf0>)
 80068e4:	6013      	str	r3, [r2, #0]
 80068e6:	0098      	lsls	r0, r3, #2
 80068e8:	18c0      	adds	r0, r0, r3
 80068ea:	0080      	lsls	r0, r0, #2
 80068ec:	4b12      	ldr	r3, [pc, #72]	; (8006938 <xTaskGenericNotifyFromISR+0xf4>)
 80068ee:	18c0      	adds	r0, r0, r3
 80068f0:	0031      	movs	r1, r6
 80068f2:	f7fe ff8d 	bl	8005810 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80068f8:	4b10      	ldr	r3, [pc, #64]	; (800693c <xTaskGenericNotifyFromISR+0xf8>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fe:	429a      	cmp	r2, r3
 8006900:	d908      	bls.n	8006914 <xTaskGenericNotifyFromISR+0xd0>
					if( pxHigherPriorityTaskWoken != NULL )
 8006902:	9b08      	ldr	r3, [sp, #32]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d002      	beq.n	800690e <xTaskGenericNotifyFromISR+0xca>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006908:	2301      	movs	r3, #1
 800690a:	9a08      	ldr	r2, [sp, #32]
 800690c:	6013      	str	r3, [r2, #0]
					xYieldPending = pdTRUE;
 800690e:	4b0c      	ldr	r3, [pc, #48]	; (8006940 <xTaskGenericNotifyFromISR+0xfc>)
 8006910:	2201      	movs	r2, #1
 8006912:	601a      	str	r2, [r3, #0]
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8006914:	0038      	movs	r0, r7
 8006916:	f000 f8bd 	bl	8006a94 <vClearInterruptMaskFromISR>
	}
 800691a:	0028      	movs	r0, r5
 800691c:	b003      	add	sp, #12
 800691e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006920:	0021      	movs	r1, r4
 8006922:	3118      	adds	r1, #24
 8006924:	4807      	ldr	r0, [pc, #28]	; (8006944 <xTaskGenericNotifyFromISR+0x100>)
 8006926:	f7fe ff73 	bl	8005810 <vListInsertEnd>
 800692a:	e7e4      	b.n	80068f6 <xTaskGenericNotifyFromISR+0xb2>
 800692c:	0800df68 	.word	0x0800df68
 8006930:	200007a4 	.word	0x200007a4
 8006934:	200007ac 	.word	0x200007ac
 8006938:	2000070c 	.word	0x2000070c
 800693c:	20000700 	.word	0x20000700
 8006940:	20000828 	.word	0x20000828
 8006944:	200007e4 	.word	0x200007e4

08006948 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006948:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800694a:	2300      	movs	r3, #0
 800694c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800694e:	4b06      	ldr	r3, [pc, #24]	; (8006968 <prvTaskExitError+0x20>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3301      	adds	r3, #1
 8006954:	d001      	beq.n	800695a <prvTaskExitError+0x12>
 8006956:	b672      	cpsid	i
 8006958:	e7fe      	b.n	8006958 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
 800695a:	b672      	cpsid	i
	while( ulDummy == 0 )
 800695c:	9b01      	ldr	r3, [sp, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d0fc      	beq.n	800695c <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006962:	b002      	add	sp, #8
 8006964:	4770      	bx	lr
 8006966:	46c0      	nop			; (mov r8, r8)
 8006968:	20000008 	.word	0x20000008
 800696c:	00000000 	.word	0x00000000

08006970 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8006970:	4a0b      	ldr	r2, [pc, #44]	; (80069a0 <pxCurrentTCBConst2>)
 8006972:	6813      	ldr	r3, [r2, #0]
 8006974:	6818      	ldr	r0, [r3, #0]
 8006976:	3020      	adds	r0, #32
 8006978:	f380 8809 	msr	PSP, r0
 800697c:	2002      	movs	r0, #2
 800697e:	f380 8814 	msr	CONTROL, r0
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8006988:	46ae      	mov	lr, r5
 800698a:	bc08      	pop	{r3}
 800698c:	bc04      	pop	{r2}
 800698e:	b662      	cpsie	i
 8006990:	4718      	bx	r3
 8006992:	46c0      	nop			; (mov r8, r8)
 8006994:	46c0      	nop			; (mov r8, r8)
 8006996:	46c0      	nop			; (mov r8, r8)
 8006998:	46c0      	nop			; (mov r8, r8)
 800699a:	46c0      	nop			; (mov r8, r8)
 800699c:	46c0      	nop			; (mov r8, r8)
 800699e:	46c0      	nop			; (mov r8, r8)

080069a0 <pxCurrentTCBConst2>:
 80069a0:	20000700 	.word	0x20000700

080069a4 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80069a4:	b510      	push	{r4, lr}
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80069a6:	4c08      	ldr	r4, [pc, #32]	; (80069c8 <prvSetupTimerInterrupt+0x24>)
 80069a8:	2300      	movs	r3, #0
 80069aa:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80069ac:	4a07      	ldr	r2, [pc, #28]	; (80069cc <prvSetupTimerInterrupt+0x28>)
 80069ae:	6013      	str	r3, [r2, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80069b0:	4b07      	ldr	r3, [pc, #28]	; (80069d0 <prvSetupTimerInterrupt+0x2c>)
 80069b2:	6818      	ldr	r0, [r3, #0]
 80069b4:	21fa      	movs	r1, #250	; 0xfa
 80069b6:	0089      	lsls	r1, r1, #2
 80069b8:	f7f9 fbc2 	bl	8000140 <__udivsi3>
 80069bc:	3801      	subs	r0, #1
 80069be:	4b05      	ldr	r3, [pc, #20]	; (80069d4 <prvSetupTimerInterrupt+0x30>)
 80069c0:	6018      	str	r0, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80069c2:	2307      	movs	r3, #7
 80069c4:	6023      	str	r3, [r4, #0]
}
 80069c6:	bd10      	pop	{r4, pc}
 80069c8:	e000e010 	.word	0xe000e010
 80069cc:	e000e018 	.word	0xe000e018
 80069d0:	2000000c 	.word	0x2000000c
 80069d4:	e000e014 	.word	0xe000e014

080069d8 <pxPortInitialiseStack>:
{
 80069d8:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80069da:	1f03      	subs	r3, r0, #4
 80069dc:	2480      	movs	r4, #128	; 0x80
 80069de:	0464      	lsls	r4, r4, #17
 80069e0:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80069e2:	3b04      	subs	r3, #4
 80069e4:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80069e6:	4b04      	ldr	r3, [pc, #16]	; (80069f8 <pxPortInitialiseStack+0x20>)
 80069e8:	0001      	movs	r1, r0
 80069ea:	390c      	subs	r1, #12
 80069ec:	600b      	str	r3, [r1, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80069ee:	0003      	movs	r3, r0
 80069f0:	3b20      	subs	r3, #32
 80069f2:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80069f4:	3840      	subs	r0, #64	; 0x40
}
 80069f6:	bd10      	pop	{r4, pc}
 80069f8:	08006949 	.word	0x08006949

080069fc <SVC_Handler>:
}
 80069fc:	4770      	bx	lr
	...

08006a00 <xPortStartScheduler>:
{
 8006a00:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8006a02:	4b0c      	ldr	r3, [pc, #48]	; (8006a34 <xPortStartScheduler+0x34>)
 8006a04:	6819      	ldr	r1, [r3, #0]
 8006a06:	22ff      	movs	r2, #255	; 0xff
 8006a08:	0412      	lsls	r2, r2, #16
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8006a0e:	6819      	ldr	r1, [r3, #0]
 8006a10:	22ff      	movs	r2, #255	; 0xff
 8006a12:	0612      	lsls	r2, r2, #24
 8006a14:	430a      	orrs	r2, r1
 8006a16:	601a      	str	r2, [r3, #0]
	prvSetupTimerInterrupt();
 8006a18:	f7ff ffc4 	bl	80069a4 <prvSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006a1c:	4b06      	ldr	r3, [pc, #24]	; (8006a38 <xPortStartScheduler+0x38>)
 8006a1e:	2200      	movs	r2, #0
 8006a20:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 8006a22:	f7ff ffa5 	bl	8006970 <vPortStartFirstTask>
	vTaskSwitchContext();
 8006a26:	f7ff fd35 	bl	8006494 <vTaskSwitchContext>
	prvTaskExitError();
 8006a2a:	f7ff ff8d 	bl	8006948 <prvTaskExitError>
}
 8006a2e:	2000      	movs	r0, #0
 8006a30:	bd10      	pop	{r4, pc}
 8006a32:	46c0      	nop			; (mov r8, r8)
 8006a34:	e000ed20 	.word	0xe000ed20
 8006a38:	20000008 	.word	0x20000008

08006a3c <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8006a3c:	4b04      	ldr	r3, [pc, #16]	; (8006a50 <vPortYield+0x14>)
 8006a3e:	2280      	movs	r2, #128	; 0x80
 8006a40:	0552      	lsls	r2, r2, #21
 8006a42:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8006a44:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006a48:	f3bf 8f6f 	isb	sy
}
 8006a4c:	4770      	bx	lr
 8006a4e:	46c0      	nop			; (mov r8, r8)
 8006a50:	e000ed04 	.word	0xe000ed04

08006a54 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 8006a54:	b672      	cpsid	i
    uxCriticalNesting++;
 8006a56:	4a04      	ldr	r2, [pc, #16]	; (8006a68 <vPortEnterCritical+0x14>)
 8006a58:	6813      	ldr	r3, [r2, #0]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
 8006a5e:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006a62:	f3bf 8f6f 	isb	sy
}
 8006a66:	4770      	bx	lr
 8006a68:	20000008 	.word	0x20000008

08006a6c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006a6c:	4b06      	ldr	r3, [pc, #24]	; (8006a88 <vPortExitCritical+0x1c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <vPortExitCritical+0xc>
 8006a74:	b672      	cpsid	i
 8006a76:	e7fe      	b.n	8006a76 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	4a03      	ldr	r2, [pc, #12]	; (8006a88 <vPortExitCritical+0x1c>)
 8006a7c:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d100      	bne.n	8006a84 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 8006a82:	b662      	cpsie	i
}
 8006a84:	4770      	bx	lr
 8006a86:	46c0      	nop			; (mov r8, r8)
 8006a88:	20000008 	.word	0x20000008

08006a8c <ulSetInterruptMaskFromISR>:
	__asm volatile(
 8006a8c:	f3ef 8010 	mrs	r0, PRIMASK
 8006a90:	b672      	cpsid	i
 8006a92:	4770      	bx	lr

08006a94 <vClearInterruptMaskFromISR>:
	__asm volatile(
 8006a94:	f380 8810 	msr	PRIMASK, r0
 8006a98:	4770      	bx	lr
 8006a9a:	0000      	movs	r0, r0
 8006a9c:	0000      	movs	r0, r0
	...

08006aa0 <PendSV_Handler>:
	__asm volatile
 8006aa0:	f3ef 8009 	mrs	r0, PSP
 8006aa4:	4b0e      	ldr	r3, [pc, #56]	; (8006ae0 <pxCurrentTCBConst>)
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	3820      	subs	r0, #32
 8006aaa:	6010      	str	r0, [r2, #0]
 8006aac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006aae:	4644      	mov	r4, r8
 8006ab0:	464d      	mov	r5, r9
 8006ab2:	4656      	mov	r6, sl
 8006ab4:	465f      	mov	r7, fp
 8006ab6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006ab8:	b508      	push	{r3, lr}
 8006aba:	b672      	cpsid	i
 8006abc:	f7ff fcea 	bl	8006494 <vTaskSwitchContext>
 8006ac0:	b662      	cpsie	i
 8006ac2:	bc0c      	pop	{r2, r3}
 8006ac4:	6811      	ldr	r1, [r2, #0]
 8006ac6:	6808      	ldr	r0, [r1, #0]
 8006ac8:	3010      	adds	r0, #16
 8006aca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8006acc:	46a0      	mov	r8, r4
 8006ace:	46a9      	mov	r9, r5
 8006ad0:	46b2      	mov	sl, r6
 8006ad2:	46bb      	mov	fp, r7
 8006ad4:	f380 8809 	msr	PSP, r0
 8006ad8:	3820      	subs	r0, #32
 8006ada:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8006adc:	4718      	bx	r3
 8006ade:	46c0      	nop			; (mov r8, r8)

08006ae0 <pxCurrentTCBConst>:
 8006ae0:	20000700 	.word	0x20000700

08006ae4 <SysTick_Handler>:
{
 8006ae4:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ae6:	f7ff ffd1 	bl	8006a8c <ulSetInterruptMaskFromISR>
 8006aea:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 8006aec:	f7ff fbbc 	bl	8006268 <xTaskIncrementTick>
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d003      	beq.n	8006afc <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8006af4:	4b03      	ldr	r3, [pc, #12]	; (8006b04 <SysTick_Handler+0x20>)
 8006af6:	2280      	movs	r2, #128	; 0x80
 8006af8:	0552      	lsls	r2, r2, #21
 8006afa:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8006afc:	0020      	movs	r0, r4
 8006afe:	f7ff ffc9 	bl	8006a94 <vClearInterruptMaskFromISR>
}
 8006b02:	bd10      	pop	{r4, pc}
 8006b04:	e000ed04 	.word	0xe000ed04

08006b08 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006b08:	4a12      	ldr	r2, [pc, #72]	; (8006b54 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b0a:	0753      	lsls	r3, r2, #29
 8006b0c:	d01f      	beq.n	8006b4e <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b0e:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b10:	2307      	movs	r3, #7
 8006b12:	4399      	bics	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b14:	23c0      	movs	r3, #192	; 0xc0
 8006b16:	015b      	lsls	r3, r3, #5
 8006b18:	1a5b      	subs	r3, r3, r1
 8006b1a:	189b      	adds	r3, r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b1c:	000a      	movs	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b1e:	480e      	ldr	r0, [pc, #56]	; (8006b58 <prvHeapInit+0x50>)
 8006b20:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006b22:	2100      	movs	r1, #0
 8006b24:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006b26:	18d3      	adds	r3, r2, r3
	uxAddress -= xHeapStructSize;
 8006b28:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b2a:	2007      	movs	r0, #7
 8006b2c:	4383      	bics	r3, r0
	pxEnd = ( void * ) uxAddress;
 8006b2e:	480b      	ldr	r0, [pc, #44]	; (8006b5c <prvHeapInit+0x54>)
 8006b30:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8006b32:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b34:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b36:	1a99      	subs	r1, r3, r2
 8006b38:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b3a:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b3c:	4b08      	ldr	r3, [pc, #32]	; (8006b60 <prvHeapInit+0x58>)
 8006b3e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b40:	4b08      	ldr	r3, [pc, #32]	; (8006b64 <prvHeapInit+0x5c>)
 8006b42:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b44:	4b08      	ldr	r3, [pc, #32]	; (8006b68 <prvHeapInit+0x60>)
 8006b46:	2280      	movs	r2, #128	; 0x80
 8006b48:	0612      	lsls	r2, r2, #24
 8006b4a:	601a      	str	r2, [r3, #0]
}
 8006b4c:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b4e:	23c0      	movs	r3, #192	; 0xc0
 8006b50:	015b      	lsls	r3, r3, #5
 8006b52:	e7e4      	b.n	8006b1e <prvHeapInit+0x16>
 8006b54:	20000830 	.word	0x20000830
 8006b58:	2000203c 	.word	0x2000203c
 8006b5c:	2000082c 	.word	0x2000082c
 8006b60:	20002038 	.word	0x20002038
 8006b64:	20002034 	.word	0x20002034
 8006b68:	20002030 	.word	0x20002030

08006b6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b6c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b6e:	4b12      	ldr	r3, [pc, #72]	; (8006bb8 <prvInsertBlockIntoFreeList+0x4c>)
 8006b70:	001a      	movs	r2, r3
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4283      	cmp	r3, r0
 8006b76:	d3fb      	bcc.n	8006b70 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b78:	6851      	ldr	r1, [r2, #4]
 8006b7a:	1854      	adds	r4, r2, r1
 8006b7c:	4284      	cmp	r4, r0
 8006b7e:	d008      	beq.n	8006b92 <prvInsertBlockIntoFreeList+0x26>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b80:	6841      	ldr	r1, [r0, #4]
 8006b82:	1844      	adds	r4, r0, r1
 8006b84:	42a3      	cmp	r3, r4
 8006b86:	d009      	beq.n	8006b9c <prvInsertBlockIntoFreeList+0x30>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b88:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b8a:	4290      	cmp	r0, r2
 8006b8c:	d000      	beq.n	8006b90 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b8e:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b90:	bd10      	pop	{r4, pc}
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b92:	6840      	ldr	r0, [r0, #4]
 8006b94:	1809      	adds	r1, r1, r0
 8006b96:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8006b98:	0010      	movs	r0, r2
 8006b9a:	e7f1      	b.n	8006b80 <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b9c:	4c07      	ldr	r4, [pc, #28]	; (8006bbc <prvInsertBlockIntoFreeList+0x50>)
 8006b9e:	6824      	ldr	r4, [r4, #0]
 8006ba0:	42a3      	cmp	r3, r4
 8006ba2:	d006      	beq.n	8006bb2 <prvInsertBlockIntoFreeList+0x46>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	18c9      	adds	r1, r1, r3
 8006ba8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006baa:	6813      	ldr	r3, [r2, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	6003      	str	r3, [r0, #0]
 8006bb0:	e7eb      	b.n	8006b8a <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bb2:	6004      	str	r4, [r0, #0]
 8006bb4:	e7e9      	b.n	8006b8a <prvInsertBlockIntoFreeList+0x1e>
 8006bb6:	46c0      	nop			; (mov r8, r8)
 8006bb8:	2000203c 	.word	0x2000203c
 8006bbc:	2000082c 	.word	0x2000082c

08006bc0 <pvPortMalloc>:
{
 8006bc0:	b570      	push	{r4, r5, r6, lr}
 8006bc2:	0005      	movs	r5, r0
	vTaskSuspendAll();
 8006bc4:	f7ff fb48 	bl	8006258 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006bc8:	4b2c      	ldr	r3, [pc, #176]	; (8006c7c <pvPortMalloc+0xbc>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d014      	beq.n	8006bfa <pvPortMalloc+0x3a>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006bd0:	4b2b      	ldr	r3, [pc, #172]	; (8006c80 <pvPortMalloc+0xc0>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	422b      	tst	r3, r5
 8006bd6:	d142      	bne.n	8006c5e <pvPortMalloc+0x9e>
			if( xWantedSize > 0 )
 8006bd8:	2d00      	cmp	r5, #0
 8006bda:	d005      	beq.n	8006be8 <pvPortMalloc+0x28>
				xWantedSize += xHeapStructSize;
 8006bdc:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006bde:	076b      	lsls	r3, r5, #29
 8006be0:	d002      	beq.n	8006be8 <pvPortMalloc+0x28>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006be2:	2307      	movs	r3, #7
 8006be4:	439d      	bics	r5, r3
 8006be6:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006be8:	2d00      	cmp	r5, #0
 8006bea:	d03a      	beq.n	8006c62 <pvPortMalloc+0xa2>
 8006bec:	4b25      	ldr	r3, [pc, #148]	; (8006c84 <pvPortMalloc+0xc4>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	42ab      	cmp	r3, r5
 8006bf2:	d33d      	bcc.n	8006c70 <pvPortMalloc+0xb0>
				pxBlock = xStart.pxNextFreeBlock;
 8006bf4:	4a24      	ldr	r2, [pc, #144]	; (8006c88 <pvPortMalloc+0xc8>)
 8006bf6:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bf8:	e004      	b.n	8006c04 <pvPortMalloc+0x44>
			prvHeapInit();
 8006bfa:	f7ff ff85 	bl	8006b08 <prvHeapInit>
 8006bfe:	e7e7      	b.n	8006bd0 <pvPortMalloc+0x10>
					pxPreviousBlock = pxBlock;
 8006c00:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c02:	001c      	movs	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c04:	6863      	ldr	r3, [r4, #4]
 8006c06:	42ab      	cmp	r3, r5
 8006c08:	d202      	bcs.n	8006c10 <pvPortMalloc+0x50>
 8006c0a:	6823      	ldr	r3, [r4, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1f7      	bne.n	8006c00 <pvPortMalloc+0x40>
				if( pxBlock != pxEnd )
 8006c10:	4b1a      	ldr	r3, [pc, #104]	; (8006c7c <pvPortMalloc+0xbc>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	42a3      	cmp	r3, r4
 8006c16:	d02d      	beq.n	8006c74 <pvPortMalloc+0xb4>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c18:	6816      	ldr	r6, [r2, #0]
 8006c1a:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c1c:	6823      	ldr	r3, [r4, #0]
 8006c1e:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c20:	6863      	ldr	r3, [r4, #4]
 8006c22:	1b5b      	subs	r3, r3, r5
 8006c24:	2b10      	cmp	r3, #16
 8006c26:	d908      	bls.n	8006c3a <pvPortMalloc+0x7a>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c28:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c2a:	0742      	lsls	r2, r0, #29
 8006c2c:	d001      	beq.n	8006c32 <pvPortMalloc+0x72>
 8006c2e:	b672      	cpsid	i
 8006c30:	e7fe      	b.n	8006c30 <pvPortMalloc+0x70>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c32:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c34:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c36:	f7ff ff99 	bl	8006b6c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c3a:	6862      	ldr	r2, [r4, #4]
 8006c3c:	4911      	ldr	r1, [pc, #68]	; (8006c84 <pvPortMalloc+0xc4>)
 8006c3e:	680b      	ldr	r3, [r1, #0]
 8006c40:	1a9b      	subs	r3, r3, r2
 8006c42:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c44:	4911      	ldr	r1, [pc, #68]	; (8006c8c <pvPortMalloc+0xcc>)
 8006c46:	6809      	ldr	r1, [r1, #0]
 8006c48:	428b      	cmp	r3, r1
 8006c4a:	d201      	bcs.n	8006c50 <pvPortMalloc+0x90>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c4c:	490f      	ldr	r1, [pc, #60]	; (8006c8c <pvPortMalloc+0xcc>)
 8006c4e:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c50:	4b0b      	ldr	r3, [pc, #44]	; (8006c80 <pvPortMalloc+0xc0>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	6023      	str	r3, [r4, #0]
 8006c5c:	e002      	b.n	8006c64 <pvPortMalloc+0xa4>
void *pvReturn = NULL;
 8006c5e:	2600      	movs	r6, #0
 8006c60:	e000      	b.n	8006c64 <pvPortMalloc+0xa4>
 8006c62:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 8006c64:	f7ff fb8a 	bl	800637c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c68:	0773      	lsls	r3, r6, #29
 8006c6a:	d005      	beq.n	8006c78 <pvPortMalloc+0xb8>
 8006c6c:	b672      	cpsid	i
 8006c6e:	e7fe      	b.n	8006c6e <pvPortMalloc+0xae>
void *pvReturn = NULL;
 8006c70:	2600      	movs	r6, #0
 8006c72:	e7f7      	b.n	8006c64 <pvPortMalloc+0xa4>
 8006c74:	2600      	movs	r6, #0
 8006c76:	e7f5      	b.n	8006c64 <pvPortMalloc+0xa4>
}
 8006c78:	0030      	movs	r0, r6
 8006c7a:	bd70      	pop	{r4, r5, r6, pc}
 8006c7c:	2000082c 	.word	0x2000082c
 8006c80:	20002030 	.word	0x20002030
 8006c84:	20002034 	.word	0x20002034
 8006c88:	2000203c 	.word	0x2000203c
 8006c8c:	20002038 	.word	0x20002038

08006c90 <vPortFree>:
{
 8006c90:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 8006c92:	2800      	cmp	r0, #0
 8006c94:	d01f      	beq.n	8006cd6 <vPortFree+0x46>
		puc -= xHeapStructSize;
 8006c96:	0005      	movs	r5, r0
 8006c98:	3d08      	subs	r5, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c9a:	686b      	ldr	r3, [r5, #4]
 8006c9c:	4a0e      	ldr	r2, [pc, #56]	; (8006cd8 <vPortFree+0x48>)
 8006c9e:	6812      	ldr	r2, [r2, #0]
 8006ca0:	421a      	tst	r2, r3
 8006ca2:	d101      	bne.n	8006ca8 <vPortFree+0x18>
 8006ca4:	b672      	cpsid	i
 8006ca6:	e7fe      	b.n	8006ca6 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ca8:	0001      	movs	r1, r0
 8006caa:	3908      	subs	r1, #8
 8006cac:	6809      	ldr	r1, [r1, #0]
 8006cae:	2900      	cmp	r1, #0
 8006cb0:	d001      	beq.n	8006cb6 <vPortFree+0x26>
 8006cb2:	b672      	cpsid	i
 8006cb4:	e7fe      	b.n	8006cb4 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006cb6:	3808      	subs	r0, #8
 8006cb8:	0004      	movs	r4, r0
 8006cba:	4393      	bics	r3, r2
 8006cbc:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 8006cbe:	f7ff facb 	bl	8006258 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006cc2:	6861      	ldr	r1, [r4, #4]
 8006cc4:	4a05      	ldr	r2, [pc, #20]	; (8006cdc <vPortFree+0x4c>)
 8006cc6:	6813      	ldr	r3, [r2, #0]
 8006cc8:	185b      	adds	r3, r3, r1
 8006cca:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006ccc:	0028      	movs	r0, r5
 8006cce:	f7ff ff4d 	bl	8006b6c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8006cd2:	f7ff fb53 	bl	800637c <xTaskResumeAll>
}
 8006cd6:	bd70      	pop	{r4, r5, r6, pc}
 8006cd8:	20002030 	.word	0x20002030
 8006cdc:	20002034 	.word	0x20002034

08006ce0 <SCP_Tick>:
    }
}
/************************************************************************************************
************************************************************************************************/
void SCP_Tick(uint32_t msecTick)
 {
 8006ce0:	b530      	push	{r4, r5, lr}
     if (SCPHandler.timer > 0)
 8006ce2:	4b09      	ldr	r3, [pc, #36]	; (8006d08 <SCP_Tick+0x28>)
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	dd07      	ble.n	8006cfc <SCP_Tick+0x1c>
     {
         SCPHandler.timer = SCPHandler.timer - msecTick;
 8006cec:	0004      	movs	r4, r0
 8006cee:	2500      	movs	r5, #0
 8006cf0:	1b12      	subs	r2, r2, r4
 8006cf2:	41ab      	sbcs	r3, r5
 8006cf4:	4904      	ldr	r1, [pc, #16]	; (8006d08 <SCP_Tick+0x28>)
 8006cf6:	600a      	str	r2, [r1, #0]
 8006cf8:	604b      	str	r3, [r1, #4]
     }
 }
 8006cfa:	bd30      	pop	{r4, r5, pc}
     if (SCPHandler.timer > 0)
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1fc      	bne.n	8006cfa <SCP_Tick+0x1a>
 8006d00:	2a00      	cmp	r2, #0
 8006d02:	d1f3      	bne.n	8006cec <SCP_Tick+0xc>
 8006d04:	e7f9      	b.n	8006cfa <SCP_Tick+0x1a>
 8006d06:	46c0      	nop			; (mov r8, r8)
 8006d08:	20002048 	.word	0x20002048

08006d0c <SCP_UpCase>:
/************************************************************************************************
************************************************************************************************/
char SCP_UpCase(char ch )
{
 if ((ch >= 'a')&&(ch <= 'z')) return (ch & ~0x20);
 8006d0c:	0003      	movs	r3, r0
 8006d0e:	3b61      	subs	r3, #97	; 0x61
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b19      	cmp	r3, #25
 8006d14:	d900      	bls.n	8006d18 <SCP_UpCase+0xc>
 return ch;
}
 8006d16:	4770      	bx	lr
 if ((ch >= 'a')&&(ch <= 'z')) return (ch & ~0x20);
 8006d18:	2320      	movs	r3, #32
 8006d1a:	4398      	bics	r0, r3
 8006d1c:	e7fb      	b.n	8006d16 <SCP_UpCase+0xa>
	...

08006d20 <SCP_Init>:

void SCP_Init(uint32_t (*fSendData)(uint8_t *pData, uint32_t lenght), uint32_t (*fReadByte)(uint8_t *pData))
{
 8006d20:	b530      	push	{r4, r5, lr}
    SCPHandler.RxIndex = 0;
 8006d22:	4b0c      	ldr	r3, [pc, #48]	; (8006d54 <SCP_Init+0x34>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	609a      	str	r2, [r3, #8]
    SCPHandler.timer = 0;
 8006d28:	2400      	movs	r4, #0
 8006d2a:	2500      	movs	r5, #0
 8006d2c:	601c      	str	r4, [r3, #0]
 8006d2e:	605d      	str	r5, [r3, #4]
    SCPHandler.fSendData = fSendData;
 8006d30:	4a09      	ldr	r2, [pc, #36]	; (8006d58 <SCP_Init+0x38>)
 8006d32:	5098      	str	r0, [r3, r2]
    SCPHandler.fReadByte = fReadByte;
 8006d34:	3204      	adds	r2, #4
 8006d36:	5099      	str	r1, [r3, r2]

    for (int i = 0; i < SCP_MAX_CALLBACKS; i++)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	e008      	b.n	8006d4e <SCP_Init+0x2e>
    {
        SCPHandler.scpCallbacks[i].fOnExecute = 0;
 8006d3c:	4b05      	ldr	r3, [pc, #20]	; (8006d54 <SCP_Init+0x34>)
 8006d3e:	0011      	movs	r1, r2
 8006d40:	3181      	adds	r1, #129	; 0x81
 8006d42:	00c9      	lsls	r1, r1, #3
 8006d44:	185b      	adds	r3, r3, r1
 8006d46:	2100      	movs	r1, #0
 8006d48:	6099      	str	r1, [r3, #8]
        SCPHandler.scpCallbacks[i].pWaitForString = 0;
 8006d4a:	6059      	str	r1, [r3, #4]
    for (int i = 0; i < SCP_MAX_CALLBACKS; i++)
 8006d4c:	3201      	adds	r2, #1
 8006d4e:	2a09      	cmp	r2, #9
 8006d50:	ddf4      	ble.n	8006d3c <SCP_Init+0x1c>
    }
}
 8006d52:	bd30      	pop	{r4, r5, pc}
 8006d54:	20002048 	.word	0x20002048
 8006d58:	0000060c 	.word	0x0000060c

08006d5c <SCP_CheckCommand>:
 * Returns
 * If success returns pointer to the last byte of found string in rx buffer
 * if fail returns 0
******************************************************************************************/
const char * SCP_CheckCommand(const char * str)
{
 8006d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d5e:	46c6      	mov	lr, r8
 8006d60:	b500      	push	{lr}
 8006d62:	1e07      	subs	r7, r0, #0

uint32_t i=0;
uint32_t rxInx = 0;

 if (str)
 8006d64:	d022      	beq.n	8006dac <SCP_CheckCommand+0x50>
uint32_t rxInx = 0;
 8006d66:	2400      	movs	r4, #0
uint32_t i=0;
 8006d68:	2600      	movs	r6, #0
 8006d6a:	e005      	b.n	8006d78 <SCP_CheckCommand+0x1c>
    {
     /*Low case or Up case characters may occur*/
     if (SCP_UpCase((char)str[i]) == SCP_UpCase((char)SCPHandler.RxBuffer[rxInx++])) // UpCase
      {
       /*Match found*/
       i++;
 8006d6c:	1c73      	adds	r3, r6, #1

       /*If the end of the string reached*/
       if (str[i] == 0)
 8006d6e:	5cfa      	ldrb	r2, [r7, r3]
 8006d70:	2a00      	cmp	r2, #0
 8006d72:	d014      	beq.n	8006d9e <SCP_CheckCommand+0x42>
       i++;
 8006d74:	001e      	movs	r6, r3
 8006d76:	4644      	mov	r4, r8
   while (rxInx < SCPHandler.RxIndex)
 8006d78:	4b0e      	ldr	r3, [pc, #56]	; (8006db4 <SCP_CheckCommand+0x58>)
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	42a3      	cmp	r3, r4
 8006d7e:	d914      	bls.n	8006daa <SCP_CheckCommand+0x4e>
     if (SCP_UpCase((char)str[i]) == SCP_UpCase((char)SCPHandler.RxBuffer[rxInx++])) // UpCase
 8006d80:	5db8      	ldrb	r0, [r7, r6]
 8006d82:	f7ff ffc3 	bl	8006d0c <SCP_UpCase>
 8006d86:	0005      	movs	r5, r0
 8006d88:	1c63      	adds	r3, r4, #1
 8006d8a:	4698      	mov	r8, r3
 8006d8c:	4b09      	ldr	r3, [pc, #36]	; (8006db4 <SCP_CheckCommand+0x58>)
 8006d8e:	191b      	adds	r3, r3, r4
 8006d90:	7b18      	ldrb	r0, [r3, #12]
 8006d92:	f7ff ffbb 	bl	8006d0c <SCP_UpCase>
 8006d96:	4285      	cmp	r5, r0
 8006d98:	d0e8      	beq.n	8006d6c <SCP_CheckCommand+0x10>
       }

      }

     /*No match, reset string pointer*/
     else i=0;
 8006d9a:	2600      	movs	r6, #0
 8006d9c:	e7eb      	b.n	8006d76 <SCP_CheckCommand+0x1a>
           return (const char *)&SCPHandler.RxBuffer[rxInx - i];
 8006d9e:	1ba0      	subs	r0, r4, r6
 8006da0:	3008      	adds	r0, #8
 8006da2:	4b04      	ldr	r3, [pc, #16]	; (8006db4 <SCP_CheckCommand+0x58>)
 8006da4:	18c0      	adds	r0, r0, r3
 8006da6:	3004      	adds	r0, #4
 8006da8:	e000      	b.n	8006dac <SCP_CheckCommand+0x50>
    }
  }
return NULL;
 8006daa:	2000      	movs	r0, #0
}
 8006dac:	bc80      	pop	{r7}
 8006dae:	46b8      	mov	r8, r7
 8006db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006db2:	46c0      	nop			; (mov r8, r8)
 8006db4:	20002048 	.word	0x20002048

08006db8 <SCP_Process>:
{
 8006db8:	b570      	push	{r4, r5, r6, lr}
    for (int i = 0; i < SCP_MAX_CALLBACKS; i++)
 8006dba:	2400      	movs	r4, #0
 8006dbc:	e000      	b.n	8006dc0 <SCP_Process+0x8>
 8006dbe:	3401      	adds	r4, #1
 8006dc0:	2c09      	cmp	r4, #9
 8006dc2:	dc15      	bgt.n	8006df0 <SCP_Process+0x38>
        if (SCPHandler.scpCallbacks[i].pWaitForString && SCPHandler.scpCallbacks[i].fOnExecute)
 8006dc4:	4b0b      	ldr	r3, [pc, #44]	; (8006df4 <SCP_Process+0x3c>)
 8006dc6:	0022      	movs	r2, r4
 8006dc8:	3281      	adds	r2, #129	; 0x81
 8006dca:	00d2      	lsls	r2, r2, #3
 8006dcc:	189b      	adds	r3, r3, r2
 8006dce:	6858      	ldr	r0, [r3, #4]
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	d0f4      	beq.n	8006dbe <SCP_Process+0x6>
 8006dd4:	4b07      	ldr	r3, [pc, #28]	; (8006df4 <SCP_Process+0x3c>)
 8006dd6:	0022      	movs	r2, r4
 8006dd8:	3281      	adds	r2, #129	; 0x81
 8006dda:	00d2      	lsls	r2, r2, #3
 8006ddc:	189b      	adds	r3, r3, r2
 8006dde:	689d      	ldr	r5, [r3, #8]
 8006de0:	2d00      	cmp	r5, #0
 8006de2:	d0ec      	beq.n	8006dbe <SCP_Process+0x6>
            pReceivedString  = SCP_CheckCommand(SCPHandler.scpCallbacks[i].pWaitForString);
 8006de4:	f7ff ffba 	bl	8006d5c <SCP_CheckCommand>
            if(pReceivedString)
 8006de8:	2800      	cmp	r0, #0
 8006dea:	d0e8      	beq.n	8006dbe <SCP_Process+0x6>
                SCPHandler.scpCallbacks[i].fOnExecute(pReceivedString);
 8006dec:	47a8      	blx	r5
 8006dee:	e7e6      	b.n	8006dbe <SCP_Process+0x6>
}
 8006df0:	bd70      	pop	{r4, r5, r6, pc}
 8006df2:	46c0      	nop			; (mov r8, r8)
 8006df4:	20002048 	.word	0x20002048

08006df8 <SCP_SendCommandWaitAnswer>:
* RETURN:
* 0 if error
* pointer to answer if success
************************************************************************************************/
 char * SCP_SendCommandWaitAnswer(char *pCmd, char *pAnswer, uint32_t timeout, uint8_t retry)
 {
 8006df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dfa:	46d6      	mov	lr, sl
 8006dfc:	464f      	mov	r7, r9
 8006dfe:	4646      	mov	r6, r8
 8006e00:	b5c0      	push	{r6, r7, lr}
 8006e02:	0006      	movs	r6, r0
 8006e04:	000d      	movs	r5, r1
 8006e06:	4691      	mov	r9, r2
 8006e08:	4698      	mov	r8, r3
     int    inx =0;
     char * pResult = NULL;

     /* flush RX */
     SCPHandler.RxIndex = 0;
 8006e0a:	481b      	ldr	r0, [pc, #108]	; (8006e78 <SCP_SendCommandWaitAnswer+0x80>)
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	6083      	str	r3, [r0, #8]
     memset(SCPHandler.RxBuffer, 0x00, SCP_RX_BUFF_LENGTH);
 8006e10:	300c      	adds	r0, #12
 8006e12:	2280      	movs	r2, #128	; 0x80
 8006e14:	00d2      	lsls	r2, r2, #3
 8006e16:	2100      	movs	r1, #0
 8006e18:	f002 fa5c 	bl	80092d4 <memset>
     char * pResult = NULL;
 8006e1c:	2400      	movs	r4, #0
     int    inx =0;
 8006e1e:	2300      	movs	r3, #0

     while (!pResult && (inx++ < retry))
 8006e20:	e00f      	b.n	8006e42 <SCP_SendCommandWaitAnswer+0x4a>
     {
             SCPHandler.timer = timeout;
             SCPHandler.fSendData((uint8_t *)pCmd, strlen(pCmd));
             while ( (!pResult) && (SCPHandler.timer))
             {
                 pResult = (char *)SCP_CheckCommand(pAnswer);
 8006e22:	0028      	movs	r0, r5
 8006e24:	f7ff ff9a 	bl	8006d5c <SCP_CheckCommand>
 8006e28:	0004      	movs	r4, r0
                 SCP_Process();
 8006e2a:	f7ff ffc5 	bl	8006db8 <SCP_Process>
             while ( (!pResult) && (SCPHandler.timer))
 8006e2e:	2c00      	cmp	r4, #0
 8006e30:	d106      	bne.n	8006e40 <SCP_SendCommandWaitAnswer+0x48>
 8006e32:	4a11      	ldr	r2, [pc, #68]	; (8006e78 <SCP_SendCommandWaitAnswer+0x80>)
 8006e34:	6813      	ldr	r3, [r2, #0]
 8006e36:	6852      	ldr	r2, [r2, #4]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	d1f2      	bne.n	8006e22 <SCP_SendCommandWaitAnswer+0x2a>
 8006e3c:	003b      	movs	r3, r7
 8006e3e:	e000      	b.n	8006e42 <SCP_SendCommandWaitAnswer+0x4a>
 8006e40:	003b      	movs	r3, r7
     while (!pResult && (inx++ < retry))
 8006e42:	2c00      	cmp	r4, #0
 8006e44:	d111      	bne.n	8006e6a <SCP_SendCommandWaitAnswer+0x72>
 8006e46:	1c5f      	adds	r7, r3, #1
 8006e48:	4598      	cmp	r8, r3
 8006e4a:	dd0e      	ble.n	8006e6a <SCP_SendCommandWaitAnswer+0x72>
             SCPHandler.timer = timeout;
 8006e4c:	4b0a      	ldr	r3, [pc, #40]	; (8006e78 <SCP_SendCommandWaitAnswer+0x80>)
 8006e4e:	464a      	mov	r2, r9
 8006e50:	601a      	str	r2, [r3, #0]
 8006e52:	2200      	movs	r2, #0
 8006e54:	605a      	str	r2, [r3, #4]
             SCPHandler.fSendData((uint8_t *)pCmd, strlen(pCmd));
 8006e56:	4a09      	ldr	r2, [pc, #36]	; (8006e7c <SCP_SendCommandWaitAnswer+0x84>)
 8006e58:	589b      	ldr	r3, [r3, r2]
 8006e5a:	469a      	mov	sl, r3
 8006e5c:	0030      	movs	r0, r6
 8006e5e:	f7f9 f953 	bl	8000108 <strlen>
 8006e62:	0001      	movs	r1, r0
 8006e64:	0030      	movs	r0, r6
 8006e66:	47d0      	blx	sl
             while ( (!pResult) && (SCPHandler.timer))
 8006e68:	e7e1      	b.n	8006e2e <SCP_SendCommandWaitAnswer+0x36>
             }
     }
     return pResult;

 }
 8006e6a:	0020      	movs	r0, r4
 8006e6c:	bce0      	pop	{r5, r6, r7}
 8006e6e:	46ba      	mov	sl, r7
 8006e70:	46b1      	mov	r9, r6
 8006e72:	46a8      	mov	r8, r5
 8006e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e76:	46c0      	nop			; (mov r8, r8)
 8006e78:	20002048 	.word	0x20002048
 8006e7c:	0000060c 	.word	0x0000060c

08006e80 <SCP_InitRx>:

     return pResult;
 }

 void SCP_InitRx(void)
 {
 8006e80:	b510      	push	{r4, lr}
     SCPHandler.RxIndex = 0;
 8006e82:	4805      	ldr	r0, [pc, #20]	; (8006e98 <SCP_InitRx+0x18>)
 8006e84:	2300      	movs	r3, #0
 8006e86:	6083      	str	r3, [r0, #8]
     memset(SCPHandler.RxBuffer, 0x00, SCP_RX_BUFF_LENGTH);
 8006e88:	300c      	adds	r0, #12
 8006e8a:	2280      	movs	r2, #128	; 0x80
 8006e8c:	00d2      	lsls	r2, r2, #3
 8006e8e:	2100      	movs	r1, #0
 8006e90:	f002 fa20 	bl	80092d4 <memset>
 }
 8006e94:	bd10      	pop	{r4, pc}
 8006e96:	46c0      	nop			; (mov r8, r8)
 8006e98:	20002048 	.word	0x20002048

08006e9c <SCP_ByteReceived>:
{
 8006e9c:	b510      	push	{r4, lr}
 8006e9e:	0004      	movs	r4, r0
    if (SCPHandler.RxIndex < SCP_RX_BUFF_LENGTH)
 8006ea0:	4b0a      	ldr	r3, [pc, #40]	; (8006ecc <SCP_ByteReceived+0x30>)
 8006ea2:	689a      	ldr	r2, [r3, #8]
 8006ea4:	2380      	movs	r3, #128	; 0x80
 8006ea6:	00db      	lsls	r3, r3, #3
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d205      	bcs.n	8006eb8 <SCP_ByteReceived+0x1c>
        SCPHandler.RxBuffer[SCPHandler.RxIndex++] = rxByte;
 8006eac:	4b07      	ldr	r3, [pc, #28]	; (8006ecc <SCP_ByteReceived+0x30>)
 8006eae:	1c51      	adds	r1, r2, #1
 8006eb0:	6099      	str	r1, [r3, #8]
 8006eb2:	189b      	adds	r3, r3, r2
 8006eb4:	7318      	strb	r0, [r3, #12]
}
 8006eb6:	bd10      	pop	{r4, pc}
    	SCP_InitRx();
 8006eb8:	f7ff ffe2 	bl	8006e80 <SCP_InitRx>
        SCPHandler.RxBuffer[SCPHandler.RxIndex++] = rxByte;
 8006ebc:	4b03      	ldr	r3, [pc, #12]	; (8006ecc <SCP_ByteReceived+0x30>)
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	1c51      	adds	r1, r2, #1
 8006ec2:	6099      	str	r1, [r3, #8]
 8006ec4:	189b      	adds	r3, r3, r2
 8006ec6:	731c      	strb	r4, [r3, #12]
}
 8006ec8:	e7f5      	b.n	8006eb6 <SCP_ByteReceived+0x1a>
 8006eca:	46c0      	nop			; (mov r8, r8)
 8006ecc:	20002048 	.word	0x20002048

08006ed0 <SCP_SendData>:

 void SCP_SendData(char *pData, uint32_t length)
 {
 8006ed0:	b510      	push	{r4, lr}
     SCPHandler.fSendData((uint8_t *)pData, length);
 8006ed2:	4b02      	ldr	r3, [pc, #8]	; (8006edc <SCP_SendData+0xc>)
 8006ed4:	4a02      	ldr	r2, [pc, #8]	; (8006ee0 <SCP_SendData+0x10>)
 8006ed6:	589b      	ldr	r3, [r3, r2]
 8006ed8:	4798      	blx	r3
 }
 8006eda:	bd10      	pop	{r4, pc}
 8006edc:	20002048 	.word	0x20002048
 8006ee0:	0000060c 	.word	0x0000060c

08006ee4 <SCP_WaitForAnswer>:

 char *SCP_WaitForAnswer(char *pAnswer, uint32_t timeout)
 {
 8006ee4:	b570      	push	{r4, r5, r6, lr}
 8006ee6:	0005      	movs	r5, r0
     char * pResult = NULL;

     SCPHandler.timer = timeout;
 8006ee8:	4b0a      	ldr	r3, [pc, #40]	; (8006f14 <SCP_WaitForAnswer+0x30>)
 8006eea:	6019      	str	r1, [r3, #0]
 8006eec:	2200      	movs	r2, #0
 8006eee:	605a      	str	r2, [r3, #4]
     char * pResult = NULL;
 8006ef0:	2400      	movs	r4, #0
     while ( (!pResult) && (SCPHandler.timer))
 8006ef2:	e005      	b.n	8006f00 <SCP_WaitForAnswer+0x1c>
      {
          pResult = (char *)SCP_CheckCommand(pAnswer);
 8006ef4:	0028      	movs	r0, r5
 8006ef6:	f7ff ff31 	bl	8006d5c <SCP_CheckCommand>
 8006efa:	0004      	movs	r4, r0
          SCP_Process();
 8006efc:	f7ff ff5c 	bl	8006db8 <SCP_Process>
     while ( (!pResult) && (SCPHandler.timer))
 8006f00:	2c00      	cmp	r4, #0
 8006f02:	d104      	bne.n	8006f0e <SCP_WaitForAnswer+0x2a>
 8006f04:	4a03      	ldr	r2, [pc, #12]	; (8006f14 <SCP_WaitForAnswer+0x30>)
 8006f06:	6813      	ldr	r3, [r2, #0]
 8006f08:	6852      	ldr	r2, [r2, #4]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	d1f2      	bne.n	8006ef4 <SCP_WaitForAnswer+0x10>
      }
     return pResult;
 }
 8006f0e:	0020      	movs	r0, r4
 8006f10:	bd70      	pop	{r4, r5, r6, pc}
 8006f12:	46c0      	nop			; (mov r8, r8)
 8006f14:	20002048 	.word	0x20002048

08006f18 <writeEEPROMData>:
  HAL_FLASHEx_DATAEEPROM_Lock();  // Reprotect the EEPROM
  return status;
  }

HAL_StatusTypeDef writeEEPROMData(uint32_t address, uint8_t* data, uint16_t len)
  {
 8006f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f1a:	46c6      	mov	lr, r8
 8006f1c:	b500      	push	{lr}
 8006f1e:	000f      	movs	r7, r1
 8006f20:	4690      	mov	r8, r2
	HAL_StatusTypeDef  status;
	uint16_t i;

	address = address + EEPROM_BASE_ADDRESS;
 8006f22:	4b12      	ldr	r3, [pc, #72]	; (8006f6c <writeEEPROMData+0x54>)
 8006f24:	18c6      	adds	r6, r0, r3

	if(address+len > EEPROM_LAST_ADDR)
 8006f26:	1992      	adds	r2, r2, r6
 8006f28:	4b11      	ldr	r3, [pc, #68]	; (8006f70 <writeEEPROMData+0x58>)
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d904      	bls.n	8006f38 <writeEEPROMData+0x20>
	{return HAL_ERROR;}
 8006f2e:	2501      	movs	r5, #1
		}
	}

	HAL_FLASHEx_DATAEEPROM_Lock();  // Reprotect the EEPROM
	return HAL_OK;
  }
 8006f30:	0028      	movs	r0, r5
 8006f32:	bc80      	pop	{r7}
 8006f34:	46b8      	mov	r8, r7
 8006f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_FLASHEx_DATAEEPROM_Unlock();  //Unprotect the EEPROM to allow writing
 8006f38:	f7fc fba0 	bl	800367c <HAL_FLASHEx_DATAEEPROM_Unlock>
	for(i = 0; i < len; i++)
 8006f3c:	2400      	movs	r4, #0
 8006f3e:	4544      	cmp	r4, r8
 8006f40:	d20f      	bcs.n	8006f62 <writeEEPROMData+0x4a>
		status = HAL_FLASHEx_DATAEEPROM_Program(TYPEPROGRAMDATA_BYTE, address, *data);
 8006f42:	783a      	ldrb	r2, [r7, #0]
 8006f44:	0031      	movs	r1, r6
 8006f46:	2000      	movs	r0, #0
 8006f48:	f7fc fbc0 	bl	80036cc <HAL_FLASHEx_DATAEEPROM_Program>
 8006f4c:	0005      	movs	r5, r0
		data++;
 8006f4e:	3701      	adds	r7, #1
		address++;
 8006f50:	3601      	adds	r6, #1
		if(status != HAL_OK )
 8006f52:	2800      	cmp	r0, #0
 8006f54:	d102      	bne.n	8006f5c <writeEEPROMData+0x44>
	for(i = 0; i < len; i++)
 8006f56:	3401      	adds	r4, #1
 8006f58:	b2a4      	uxth	r4, r4
 8006f5a:	e7f0      	b.n	8006f3e <writeEEPROMData+0x26>
			HAL_FLASHEx_DATAEEPROM_Lock();  // Reprotect the EEPROM
 8006f5c:	f7fc fbac 	bl	80036b8 <HAL_FLASHEx_DATAEEPROM_Lock>
			return status;
 8006f60:	e7e6      	b.n	8006f30 <writeEEPROMData+0x18>
	HAL_FLASHEx_DATAEEPROM_Lock();  // Reprotect the EEPROM
 8006f62:	f7fc fba9 	bl	80036b8 <HAL_FLASHEx_DATAEEPROM_Lock>
	return HAL_OK;
 8006f66:	2500      	movs	r5, #0
 8006f68:	e7e2      	b.n	8006f30 <writeEEPROMData+0x18>
 8006f6a:	46c0      	nop			; (mov r8, r8)
 8006f6c:	08080000 	.word	0x08080000
 8006f70:	080817ff 	.word	0x080817ff

08006f74 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8006f74:	4b03      	ldr	r3, [pc, #12]	; (8006f84 <vApplicationGetIdleTaskMemory+0x10>)
 8006f76:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8006f78:	4b03      	ldr	r3, [pc, #12]	; (8006f88 <vApplicationGetIdleTaskMemory+0x14>)
 8006f7a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8006f7c:	2340      	movs	r3, #64	; 0x40
 8006f7e:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8006f80:	4770      	bx	lr
 8006f82:	46c0      	nop			; (mov r8, r8)
 8006f84:	20002760 	.word	0x20002760
 8006f88:	20002660 	.word	0x20002660

08006f8c <ind_green>:
	}

}

void ind_green(void)
{
 8006f8c:	b530      	push	{r4, r5, lr}
 8006f8e:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f90:	2214      	movs	r2, #20
 8006f92:	2100      	movs	r1, #0
 8006f94:	a801      	add	r0, sp, #4
 8006f96:	f002 f99d 	bl	80092d4 <memset>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8006f9a:	2580      	movs	r5, #128	; 0x80
 8006f9c:	006d      	lsls	r5, r5, #1
 8006f9e:	24a0      	movs	r4, #160	; 0xa0
 8006fa0:	05e4      	lsls	r4, r4, #23
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	0029      	movs	r1, r5
 8006fa6:	0020      	movs	r0, r4
 8006fa8:	f7fc fc91 	bl	80038ce <HAL_GPIO_WritePin>

	/*Configure GPIO pin:*/
	GPIO_InitStruct.Pin = LED_IND_Pin;
 8006fac:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fb6:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fb8:	a901      	add	r1, sp, #4
 8006fba:	0020      	movs	r0, r4
 8006fbc:	f7fc fbb4 	bl	8003728 <HAL_GPIO_Init>
}
 8006fc0:	b007      	add	sp, #28
 8006fc2:	bd30      	pop	{r4, r5, pc}

08006fc4 <ind_red>:

void ind_red(void)
{
 8006fc4:	b530      	push	{r4, r5, lr}
 8006fc6:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fc8:	2214      	movs	r2, #20
 8006fca:	2100      	movs	r1, #0
 8006fcc:	a801      	add	r0, sp, #4
 8006fce:	f002 f981 	bl	80092d4 <memset>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8006fd2:	2580      	movs	r5, #128	; 0x80
 8006fd4:	006d      	lsls	r5, r5, #1
 8006fd6:	24a0      	movs	r4, #160	; 0xa0
 8006fd8:	05e4      	lsls	r4, r4, #23
 8006fda:	2201      	movs	r2, #1
 8006fdc:	0029      	movs	r1, r5
 8006fde:	0020      	movs	r0, r4
 8006fe0:	f7fc fc75 	bl	80038ce <HAL_GPIO_WritePin>

	/*Configure GPIO pin:*/
	GPIO_InitStruct.Pin = LED_IND_Pin;
 8006fe4:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fea:	2300      	movs	r3, #0
 8006fec:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fee:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ff0:	a901      	add	r1, sp, #4
 8006ff2:	0020      	movs	r0, r4
 8006ff4:	f7fc fb98 	bl	8003728 <HAL_GPIO_Init>
}
 8006ff8:	b007      	add	sp, #28
 8006ffa:	bd30      	pop	{r4, r5, pc}

08006ffc <ind_off>:

void ind_off(void)
{
 8006ffc:	b500      	push	{lr}
 8006ffe:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007000:	2214      	movs	r2, #20
 8007002:	2100      	movs	r1, #0
 8007004:	a801      	add	r0, sp, #4
 8007006:	f002 f965 	bl	80092d4 <memset>

	/*Configure GPIO pin:*/
	GPIO_InitStruct.Pin = LED_IND_Pin;
 800700a:	2380      	movs	r3, #128	; 0x80
 800700c:	005b      	lsls	r3, r3, #1
 800700e:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007010:	20a0      	movs	r0, #160	; 0xa0
 8007012:	a901      	add	r1, sp, #4
 8007014:	05c0      	lsls	r0, r0, #23
 8007016:	f7fc fb87 	bl	8003728 <HAL_GPIO_Init>
}
 800701a:	b007      	add	sp, #28
 800701c:	bd00      	pop	{pc}
	...

08007020 <IndicationTask>:
{
 8007020:	b500      	push	{lr}
 8007022:	b085      	sub	sp, #20
 8007024:	e001      	b.n	800702a <IndicationTask+0xa>
			  		  ind_off();
 8007026:	f7ff ffe9 	bl	8006ffc <ind_off>
		  evt = osMessageGet (ind_msg,  osWaitForever);
 800702a:	2201      	movs	r2, #1
 800702c:	4b0c      	ldr	r3, [pc, #48]	; (8007060 <IndicationTask+0x40>)
 800702e:	6819      	ldr	r1, [r3, #0]
 8007030:	4252      	negs	r2, r2
 8007032:	a801      	add	r0, sp, #4
 8007034:	f7fe fb9c 	bl	8005770 <osMessageGet>
		  if (evt.status == osEventMessage)
 8007038:	9b01      	ldr	r3, [sp, #4]
 800703a:	2b10      	cmp	r3, #16
 800703c:	d1f5      	bne.n	800702a <IndicationTask+0xa>
			  switch(evt.value.v)
 800703e:	9b02      	ldr	r3, [sp, #8]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d006      	beq.n	8007052 <IndicationTask+0x32>
 8007044:	2b02      	cmp	r3, #2
 8007046:	d007      	beq.n	8007058 <IndicationTask+0x38>
 8007048:	2b00      	cmp	r3, #0
 800704a:	d0ec      	beq.n	8007026 <IndicationTask+0x6>
			  		  ind_off();
 800704c:	f7ff ffd6 	bl	8006ffc <ind_off>
 8007050:	e7eb      	b.n	800702a <IndicationTask+0xa>
			  		  ind_green();
 8007052:	f7ff ff9b 	bl	8006f8c <ind_green>
			  		  break;
 8007056:	e7e8      	b.n	800702a <IndicationTask+0xa>
			  		  ind_red();
 8007058:	f7ff ffb4 	bl	8006fc4 <ind_red>
			  		  break;
 800705c:	e7e5      	b.n	800702a <IndicationTask+0xa>
 800705e:	46c0      	nop			; (mov r8, r8)
 8007060:	200027b8 	.word	0x200027b8

08007064 <delay_us>:

/*Hardware Timer Microsecond Delay*/
void delay_us (uint16_t us)
{
	/*Set the counter value a 0*/
	__HAL_TIM_SET_COUNTER(&htim22,0);
 8007064:	4b03      	ldr	r3, [pc, #12]	; (8007074 <delay_us+0x10>)
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	2300      	movs	r3, #0
 800706a:	6253      	str	r3, [r2, #36]	; 0x24

	/*Wait for the counter to reach the us input in the parameter*/
	while (__HAL_TIM_GET_COUNTER(&htim22) < us);
 800706c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800706e:	4283      	cmp	r3, r0
 8007070:	d3fc      	bcc.n	800706c <delay_us+0x8>
}
 8007072:	4770      	bx	lr
 8007074:	20002990 	.word	0x20002990

08007078 <set_intensity>:

/*Sets driver current using EasyScale Protocol*/
void set_intensity(uint32_t ref)
{
 8007078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800707a:	b083      	sub	sp, #12
 800707c:	9001      	str	r0, [sp, #4]
  unsigned char byte = 0, j = 0, k = 0;
  byte = 0x72;       //device address byte

  /*Shut down driver and enter into EasyScale control mode*/
  HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 800707e:	4c2f      	ldr	r4, [pc, #188]	; (800713c <set_intensity+0xc4>)
 8007080:	2201      	movs	r2, #1
 8007082:	2102      	movs	r1, #2
 8007084:	0020      	movs	r0, r4
 8007086:	f7fc fc22 	bl	80038ce <HAL_GPIO_WritePin>
  delay_us(110);
 800708a:	206e      	movs	r0, #110	; 0x6e
 800708c:	f7ff ffea 	bl	8007064 <delay_us>
  HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET);
 8007090:	2200      	movs	r2, #0
 8007092:	2102      	movs	r1, #2
 8007094:	0020      	movs	r0, r4
 8007096:	f7fc fc1a 	bl	80038ce <HAL_GPIO_WritePin>
  delay_us(1100);
 800709a:	4829      	ldr	r0, [pc, #164]	; (8007140 <set_intensity+0xc8>)
 800709c:	f7ff ffe2 	bl	8007064 <delay_us>

  /*Send address and data*/
  for(k=2; k>0; k--)
 80070a0:	2602      	movs	r6, #2
  byte = 0x72;       //device address byte
 80070a2:	2572      	movs	r5, #114	; 0x72
  for(k=2; k>0; k--)
 80070a4:	e037      	b.n	8007116 <set_intensity+0x9e>

    for(j=8; j>0; j--)
    {
      if(byte & 0x80)
      {
    	HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET); //encoding bit 1
 80070a6:	4f25      	ldr	r7, [pc, #148]	; (800713c <set_intensity+0xc4>)
 80070a8:	2200      	movs	r2, #0
 80070aa:	2102      	movs	r1, #2
 80070ac:	0038      	movs	r0, r7
 80070ae:	f7fc fc0e 	bl	80038ce <HAL_GPIO_WritePin>
    	delay_us(24);
 80070b2:	2018      	movs	r0, #24
 80070b4:	f7ff ffd6 	bl	8007064 <delay_us>
        HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 80070b8:	2201      	movs	r2, #1
 80070ba:	2102      	movs	r1, #2
 80070bc:	0038      	movs	r0, r7
 80070be:	f7fc fc06 	bl	80038ce <HAL_GPIO_WritePin>
        delay_us(48);
 80070c2:	2030      	movs	r0, #48	; 0x30
 80070c4:	f7ff ffce 	bl	8007064 <delay_us>
    	HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET); //encoding bit 0
    	delay_us(48);
        HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
        delay_us(24);
      }
      byte += byte; //left shift
 80070c8:	006d      	lsls	r5, r5, #1
 80070ca:	b2ed      	uxtb	r5, r5
    for(j=8; j>0; j--)
 80070cc:	3c01      	subs	r4, #1
 80070ce:	b2e4      	uxtb	r4, r4
 80070d0:	2c00      	cmp	r4, #0
 80070d2:	d014      	beq.n	80070fe <set_intensity+0x86>
      if(byte & 0x80)
 80070d4:	b26b      	sxtb	r3, r5
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	dbe5      	blt.n	80070a6 <set_intensity+0x2e>
    	HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET); //encoding bit 0
 80070da:	4f18      	ldr	r7, [pc, #96]	; (800713c <set_intensity+0xc4>)
 80070dc:	2200      	movs	r2, #0
 80070de:	2102      	movs	r1, #2
 80070e0:	0038      	movs	r0, r7
 80070e2:	f7fc fbf4 	bl	80038ce <HAL_GPIO_WritePin>
    	delay_us(48);
 80070e6:	2030      	movs	r0, #48	; 0x30
 80070e8:	f7ff ffbc 	bl	8007064 <delay_us>
        HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 80070ec:	2201      	movs	r2, #1
 80070ee:	2102      	movs	r1, #2
 80070f0:	0038      	movs	r0, r7
 80070f2:	f7fc fbec 	bl	80038ce <HAL_GPIO_WritePin>
        delay_us(24);
 80070f6:	2018      	movs	r0, #24
 80070f8:	f7ff ffb4 	bl	8007064 <delay_us>
 80070fc:	e7e4      	b.n	80070c8 <set_intensity+0x50>
    }

    HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET); //End of stream delay
 80070fe:	2200      	movs	r2, #0
 8007100:	2102      	movs	r1, #2
 8007102:	480e      	ldr	r0, [pc, #56]	; (800713c <set_intensity+0xc4>)
 8007104:	f7fc fbe3 	bl	80038ce <HAL_GPIO_WritePin>
    delay_us(48);
 8007108:	2030      	movs	r0, #48	; 0x30
 800710a:	f7ff ffab 	bl	8007064 <delay_us>

    byte = ref; //read data byte
 800710e:	466b      	mov	r3, sp
 8007110:	791d      	ldrb	r5, [r3, #4]
  for(k=2; k>0; k--)
 8007112:	3e01      	subs	r6, #1
 8007114:	b2f6      	uxtb	r6, r6
 8007116:	2e00      	cmp	r6, #0
 8007118:	d009      	beq.n	800712e <set_intensity+0xb6>
	HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 800711a:	2201      	movs	r2, #1
 800711c:	2102      	movs	r1, #2
 800711e:	4807      	ldr	r0, [pc, #28]	; (800713c <set_intensity+0xc4>)
 8007120:	f7fc fbd5 	bl	80038ce <HAL_GPIO_WritePin>
	delay_us(48);
 8007124:	2030      	movs	r0, #48	; 0x30
 8007126:	f7ff ff9d 	bl	8007064 <delay_us>
    for(j=8; j>0; j--)
 800712a:	2408      	movs	r4, #8
 800712c:	e7d0      	b.n	80070d0 <set_intensity+0x58>
  }
  HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 800712e:	2201      	movs	r2, #1
 8007130:	2102      	movs	r1, #2
 8007132:	4802      	ldr	r0, [pc, #8]	; (800713c <set_intensity+0xc4>)
 8007134:	f7fc fbcb 	bl	80038ce <HAL_GPIO_WritePin>
}
 8007138:	b003      	add	sp, #12
 800713a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800713c:	50000400 	.word	0x50000400
 8007140:	0000044c 	.word	0x0000044c

08007144 <LEDControlTask>:
{
 8007144:	b500      	push	{lr}
 8007146:	b085      	sub	sp, #20
	  evt = osMessageGet (led_msg,  osWaitForever);
 8007148:	2201      	movs	r2, #1
 800714a:	4b06      	ldr	r3, [pc, #24]	; (8007164 <LEDControlTask+0x20>)
 800714c:	6819      	ldr	r1, [r3, #0]
 800714e:	4252      	negs	r2, r2
 8007150:	a801      	add	r0, sp, #4
 8007152:	f7fe fb0d 	bl	8005770 <osMessageGet>
	  if (evt.status == osEventMessage)
 8007156:	9b01      	ldr	r3, [sp, #4]
 8007158:	2b10      	cmp	r3, #16
 800715a:	d1f5      	bne.n	8007148 <LEDControlTask+0x4>
		  set_intensity(evt.value.v);
 800715c:	9802      	ldr	r0, [sp, #8]
 800715e:	f7ff ff8b 	bl	8007078 <set_intensity>
 8007162:	e7f1      	b.n	8007148 <LEDControlTask+0x4>
 8007164:	200027c0 	.word	0x200027c0

08007168 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8007168:	b510      	push	{r4, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800716a:	4806      	ldr	r0, [pc, #24]	; (8007184 <MX_CRC_Init+0x1c>)
 800716c:	4b06      	ldr	r3, [pc, #24]	; (8007188 <MX_CRC_Init+0x20>)
 800716e:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8007170:	2300      	movs	r3, #0
 8007172:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8007174:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8007176:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8007178:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800717a:	3301      	adds	r3, #1
 800717c:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800717e:	f7fb ffff 	bl	8003180 <HAL_CRC_Init>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8007182:	bd10      	pop	{r4, pc}
 8007184:	20002844 	.word	0x20002844
 8007188:	40023000 	.word	0x40023000

0800718c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800718c:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800718e:	4809      	ldr	r0, [pc, #36]	; (80071b4 <MX_USART1_UART_Init+0x28>)
 8007190:	4b09      	ldr	r3, [pc, #36]	; (80071b8 <MX_USART1_UART_Init+0x2c>)
 8007192:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8007194:	23e1      	movs	r3, #225	; 0xe1
 8007196:	025b      	lsls	r3, r3, #9
 8007198:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800719a:	2300      	movs	r3, #0
 800719c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800719e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80071a0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80071a2:	220c      	movs	r2, #12
 80071a4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80071a6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80071a8:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80071aa:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80071ac:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80071ae:	f7fe f917 	bl	80053e0 <HAL_UART_Init>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80071b2:	bd10      	pop	{r4, pc}
 80071b4:	20002a10 	.word	0x20002a10
 80071b8:	40013800 	.word	0x40013800

080071bc <MX_TIM7_Init>:
{
 80071bc:	b530      	push	{r4, r5, lr}
 80071be:	b083      	sub	sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80071c0:	2208      	movs	r2, #8
 80071c2:	2100      	movs	r1, #0
 80071c4:	4668      	mov	r0, sp
 80071c6:	f002 f885 	bl	80092d4 <memset>
  htim7.Instance = TIM7;
 80071ca:	4c0b      	ldr	r4, [pc, #44]	; (80071f8 <MX_TIM7_Init+0x3c>)
 80071cc:	4b0b      	ldr	r3, [pc, #44]	; (80071fc <MX_TIM7_Init+0x40>)
 80071ce:	6023      	str	r3, [r4, #0]
  htim7.Init.Prescaler = 32;
 80071d0:	2320      	movs	r3, #32
 80071d2:	6063      	str	r3, [r4, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80071d4:	2500      	movs	r5, #0
 80071d6:	60a5      	str	r5, [r4, #8]
  htim7.Init.Period = 10000;
 80071d8:	4b09      	ldr	r3, [pc, #36]	; (8007200 <MX_TIM7_Init+0x44>)
 80071da:	60e3      	str	r3, [r4, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80071dc:	2380      	movs	r3, #128	; 0x80
 80071de:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80071e0:	0020      	movs	r0, r4
 80071e2:	f7fd f9b9 	bl	8004558 <HAL_TIM_Base_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80071e6:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80071e8:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80071ea:	4669      	mov	r1, sp
 80071ec:	0020      	movs	r0, r4
 80071ee:	f7fd fb6d 	bl	80048cc <HAL_TIMEx_MasterConfigSynchronization>
}
 80071f2:	b003      	add	sp, #12
 80071f4:	bd30      	pop	{r4, r5, pc}
 80071f6:	46c0      	nop			; (mov r8, r8)
 80071f8:	200029d0 	.word	0x200029d0
 80071fc:	40001400 	.word	0x40001400
 8007200:	00002710 	.word	0x00002710

08007204 <MX_IWDG_Init>:
{
 8007204:	b510      	push	{r4, lr}
  hiwdg.Instance = IWDG;
 8007206:	4805      	ldr	r0, [pc, #20]	; (800721c <MX_IWDG_Init+0x18>)
 8007208:	4b05      	ldr	r3, [pc, #20]	; (8007220 <MX_IWDG_Init+0x1c>)
 800720a:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800720c:	2306      	movs	r3, #6
 800720e:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Window = 4095;
 8007210:	4b04      	ldr	r3, [pc, #16]	; (8007224 <MX_IWDG_Init+0x20>)
 8007212:	60c3      	str	r3, [r0, #12]
  hiwdg.Init.Reload = 4095;
 8007214:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8007216:	f7fc fb61 	bl	80038dc <HAL_IWDG_Init>
}
 800721a:	bd10      	pop	{r4, pc}
 800721c:	20002940 	.word	0x20002940
 8007220:	40003000 	.word	0x40003000
 8007224:	00000fff 	.word	0x00000fff

08007228 <MX_NVIC_Init>:
{
 8007228:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriority(TIM21_IRQn, 3, 0);
 800722a:	2200      	movs	r2, #0
 800722c:	2103      	movs	r1, #3
 800722e:	2014      	movs	r0, #20
 8007230:	f7fb ff14 	bl	800305c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8007234:	2014      	movs	r0, #20
 8007236:	f7fb ff41 	bl	80030bc <HAL_NVIC_EnableIRQ>
}
 800723a:	bd10      	pop	{r4, pc}

0800723c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800723c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800723e:	2001      	movs	r0, #1
 8007240:	f7fe f9e7 	bl	8005612 <osDelay>
  for(;;)
 8007244:	e7fb      	b.n	800723e <StartDefaultTask+0x2>
	...

08007248 <SystemClock_Config>:
{
 8007248:	b570      	push	{r4, r5, r6, lr}
 800724a:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800724c:	2238      	movs	r2, #56	; 0x38
 800724e:	2100      	movs	r1, #0
 8007250:	a80e      	add	r0, sp, #56	; 0x38
 8007252:	f002 f83f 	bl	80092d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007256:	2214      	movs	r2, #20
 8007258:	2100      	movs	r1, #0
 800725a:	a809      	add	r0, sp, #36	; 0x24
 800725c:	f002 f83a 	bl	80092d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007260:	2224      	movs	r2, #36	; 0x24
 8007262:	2100      	movs	r1, #0
 8007264:	4668      	mov	r0, sp
 8007266:	f002 f835 	bl	80092d4 <memset>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800726a:	4917      	ldr	r1, [pc, #92]	; (80072c8 <SystemClock_Config+0x80>)
 800726c:	680a      	ldr	r2, [r1, #0]
 800726e:	4b17      	ldr	r3, [pc, #92]	; (80072cc <SystemClock_Config+0x84>)
 8007270:	401a      	ands	r2, r3
 8007272:	2380      	movs	r3, #128	; 0x80
 8007274:	011b      	lsls	r3, r3, #4
 8007276:	4313      	orrs	r3, r2
 8007278:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800727a:	230a      	movs	r3, #10
 800727c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800727e:	2501      	movs	r5, #1
 8007280:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007282:	3306      	adds	r3, #6
 8007284:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8007286:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007288:	2602      	movs	r6, #2
 800728a:	9618      	str	r6, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800728c:	2400      	movs	r4, #0
 800728e:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8007290:	2380      	movs	r3, #128	; 0x80
 8007292:	02db      	lsls	r3, r3, #11
 8007294:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8007296:	2380      	movs	r3, #128	; 0x80
 8007298:	03db      	lsls	r3, r3, #15
 800729a:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800729c:	a80e      	add	r0, sp, #56	; 0x38
 800729e:	f7fc fbf9 	bl	8003a94 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80072a2:	230f      	movs	r3, #15
 80072a4:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80072a6:	3b0c      	subs	r3, #12
 80072a8:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80072aa:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80072ac:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80072ae:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80072b0:	2101      	movs	r1, #1
 80072b2:	a809      	add	r0, sp, #36	; 0x24
 80072b4:	f7fc feba 	bl	800402c <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80072b8:	9500      	str	r5, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 80072ba:	9602      	str	r6, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80072bc:	4668      	mov	r0, sp
 80072be:	f7fc ffe7 	bl	8004290 <HAL_RCCEx_PeriphCLKConfig>
}
 80072c2:	b01c      	add	sp, #112	; 0x70
 80072c4:	bd70      	pop	{r4, r5, r6, pc}
 80072c6:	46c0      	nop			; (mov r8, r8)
 80072c8:	40007000 	.word	0x40007000
 80072cc:	ffffe7ff 	.word	0xffffe7ff

080072d0 <MX_ADC_Init>:
{
 80072d0:	b570      	push	{r4, r5, r6, lr}
 80072d2:	b082      	sub	sp, #8
  ADC_ChannelConfTypeDef sConfig = {0};
 80072d4:	2208      	movs	r2, #8
 80072d6:	2100      	movs	r1, #0
 80072d8:	4668      	mov	r0, sp
 80072da:	f001 fffb 	bl	80092d4 <memset>
  hadc.Instance = ADC1;
 80072de:	4c22      	ldr	r4, [pc, #136]	; (8007368 <MX_ADC_Init+0x98>)
 80072e0:	4b22      	ldr	r3, [pc, #136]	; (800736c <MX_ADC_Init+0x9c>)
 80072e2:	6023      	str	r3, [r4, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80072e4:	2300      	movs	r3, #0
 80072e6:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80072e8:	2280      	movs	r2, #128	; 0x80
 80072ea:	0312      	lsls	r2, r2, #12
 80072ec:	6062      	str	r2, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80072ee:	60a3      	str	r3, [r4, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_39CYCLES_5;
 80072f0:	2205      	movs	r2, #5
 80072f2:	63a2      	str	r2, [r4, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80072f4:	2501      	movs	r5, #1
 80072f6:	6125      	str	r5, [r4, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80072f8:	60e3      	str	r3, [r4, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 80072fa:	321b      	adds	r2, #27
 80072fc:	54a5      	strb	r5, [r4, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80072fe:	3201      	adds	r2, #1
 8007300:	54a3      	strb	r3, [r4, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007302:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007304:	22c2      	movs	r2, #194	; 0xc2
 8007306:	32ff      	adds	r2, #255	; 0xff
 8007308:	6262      	str	r2, [r4, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 800730a:	3a96      	subs	r2, #150	; 0x96
 800730c:	3aff      	subs	r2, #255	; 0xff
 800730e:	54a5      	strb	r5, [r4, r2]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007310:	3a24      	subs	r2, #36	; 0x24
 8007312:	6162      	str	r2, [r4, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8007314:	2680      	movs	r6, #128	; 0x80
 8007316:	0176      	lsls	r6, r6, #5
 8007318:	6326      	str	r6, [r4, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800731a:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800731c:	6363      	str	r3, [r4, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800731e:	61e3      	str	r3, [r4, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8007320:	0020      	movs	r0, r4
 8007322:	f7fb fc31 	bl	8002b88 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_0;
 8007326:	9500      	str	r5, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8007328:	9601      	str	r6, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800732a:	4669      	mov	r1, sp
 800732c:	0020      	movs	r0, r4
 800732e:	f7fb fe37 	bl	8002fa0 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_1;
 8007332:	4b0f      	ldr	r3, [pc, #60]	; (8007370 <MX_ADC_Init+0xa0>)
 8007334:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007336:	4669      	mov	r1, sp
 8007338:	0020      	movs	r0, r4
 800733a:	f7fb fe31 	bl	8002fa0 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_2;
 800733e:	4b0d      	ldr	r3, [pc, #52]	; (8007374 <MX_ADC_Init+0xa4>)
 8007340:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007342:	4669      	mov	r1, sp
 8007344:	0020      	movs	r0, r4
 8007346:	f7fb fe2b 	bl	8002fa0 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_3;
 800734a:	4b0b      	ldr	r3, [pc, #44]	; (8007378 <MX_ADC_Init+0xa8>)
 800734c:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800734e:	4669      	mov	r1, sp
 8007350:	0020      	movs	r0, r4
 8007352:	f7fb fe25 	bl	8002fa0 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_4;
 8007356:	4b09      	ldr	r3, [pc, #36]	; (800737c <MX_ADC_Init+0xac>)
 8007358:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800735a:	4669      	mov	r1, sp
 800735c:	0020      	movs	r0, r4
 800735e:	f7fb fe1f 	bl	8002fa0 <HAL_ADC_ConfigChannel>
}
 8007362:	b002      	add	sp, #8
 8007364:	bd70      	pop	{r4, r5, r6, pc}
 8007366:	46c0      	nop			; (mov r8, r8)
 8007368:	200027e8 	.word	0x200027e8
 800736c:	40012400 	.word	0x40012400
 8007370:	04000002 	.word	0x04000002
 8007374:	08000004 	.word	0x08000004
 8007378:	0c000008 	.word	0x0c000008
 800737c:	10000010 	.word	0x10000010

08007380 <MX_TIM21_Init>:
{
 8007380:	b530      	push	{r4, r5, lr}
 8007382:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007384:	2210      	movs	r2, #16
 8007386:	2100      	movs	r1, #0
 8007388:	a802      	add	r0, sp, #8
 800738a:	f001 ffa3 	bl	80092d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800738e:	2208      	movs	r2, #8
 8007390:	2100      	movs	r1, #0
 8007392:	4668      	mov	r0, sp
 8007394:	f001 ff9e 	bl	80092d4 <memset>
  htim21.Instance = TIM21;
 8007398:	4c0e      	ldr	r4, [pc, #56]	; (80073d4 <MX_TIM21_Init+0x54>)
 800739a:	4b0f      	ldr	r3, [pc, #60]	; (80073d8 <MX_TIM21_Init+0x58>)
 800739c:	6023      	str	r3, [r4, #0]
  htim21.Init.Prescaler = 32000-1;
 800739e:	4b0f      	ldr	r3, [pc, #60]	; (80073dc <MX_TIM21_Init+0x5c>)
 80073a0:	6063      	str	r3, [r4, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 80073a2:	2500      	movs	r5, #0
 80073a4:	60a5      	str	r5, [r4, #8]
  htim21.Init.Period = 100-1;
 80073a6:	2363      	movs	r3, #99	; 0x63
 80073a8:	60e3      	str	r3, [r4, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80073aa:	6125      	str	r5, [r4, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80073ac:	331d      	adds	r3, #29
 80073ae:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 80073b0:	0020      	movs	r0, r4
 80073b2:	f7fd f8d1 	bl	8004558 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80073b6:	2380      	movs	r3, #128	; 0x80
 80073b8:	015b      	lsls	r3, r3, #5
 80073ba:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80073bc:	a902      	add	r1, sp, #8
 80073be:	0020      	movs	r0, r4
 80073c0:	f7fd f96a 	bl	8004698 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80073c4:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80073c6:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80073c8:	4669      	mov	r1, sp
 80073ca:	0020      	movs	r0, r4
 80073cc:	f7fd fa7e 	bl	80048cc <HAL_TIMEx_MasterConfigSynchronization>
}
 80073d0:	b007      	add	sp, #28
 80073d2:	bd30      	pop	{r4, r5, pc}
 80073d4:	20002950 	.word	0x20002950
 80073d8:	40010800 	.word	0x40010800
 80073dc:	00007cff 	.word	0x00007cff

080073e0 <MX_TIM22_Init>:
{
 80073e0:	b530      	push	{r4, r5, lr}
 80073e2:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80073e4:	2210      	movs	r2, #16
 80073e6:	2100      	movs	r1, #0
 80073e8:	a802      	add	r0, sp, #8
 80073ea:	f001 ff73 	bl	80092d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80073ee:	2208      	movs	r2, #8
 80073f0:	2100      	movs	r1, #0
 80073f2:	4668      	mov	r0, sp
 80073f4:	f001 ff6e 	bl	80092d4 <memset>
  htim22.Instance = TIM22;
 80073f8:	4c0f      	ldr	r4, [pc, #60]	; (8007438 <MX_TIM22_Init+0x58>)
 80073fa:	4b10      	ldr	r3, [pc, #64]	; (800743c <MX_TIM22_Init+0x5c>)
 80073fc:	6023      	str	r3, [r4, #0]
  htim22.Init.Prescaler = 32-1;
 80073fe:	231f      	movs	r3, #31
 8007400:	6063      	str	r3, [r4, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007402:	2500      	movs	r5, #0
 8007404:	60a5      	str	r5, [r4, #8]
  htim22.Init.Period = 0xFFFF-1;
 8007406:	4b0e      	ldr	r3, [pc, #56]	; (8007440 <MX_TIM22_Init+0x60>)
 8007408:	60e3      	str	r3, [r4, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800740a:	6125      	str	r5, [r4, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800740c:	6165      	str	r5, [r4, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 800740e:	0020      	movs	r0, r4
 8007410:	f7fd f8a2 	bl	8004558 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007414:	2380      	movs	r3, #128	; 0x80
 8007416:	015b      	lsls	r3, r3, #5
 8007418:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 800741a:	a902      	add	r1, sp, #8
 800741c:	0020      	movs	r0, r4
 800741e:	f7fd f93b 	bl	8004698 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007422:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007424:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8007426:	4669      	mov	r1, sp
 8007428:	0020      	movs	r0, r4
 800742a:	f7fd fa4f 	bl	80048cc <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Base_Start(&htim22);
 800742e:	0020      	movs	r0, r4
 8007430:	f7fd f8b6 	bl	80045a0 <HAL_TIM_Base_Start>
}
 8007434:	b007      	add	sp, #28
 8007436:	bd30      	pop	{r4, r5, pc}
 8007438:	20002990 	.word	0x20002990
 800743c:	40011400 	.word	0x40011400
 8007440:	0000fffe 	.word	0x0000fffe

08007444 <MX_DMA_Init>:
{
 8007444:	b500      	push	{lr}
 8007446:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007448:	4a0d      	ldr	r2, [pc, #52]	; (8007480 <MX_DMA_Init+0x3c>)
 800744a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800744c:	2301      	movs	r3, #1
 800744e:	4319      	orrs	r1, r3
 8007450:	6311      	str	r1, [r2, #48]	; 0x30
 8007452:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007454:	4013      	ands	r3, r2
 8007456:	9301      	str	r3, [sp, #4]
 8007458:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 800745a:	2200      	movs	r2, #0
 800745c:	2103      	movs	r1, #3
 800745e:	2009      	movs	r0, #9
 8007460:	f7fb fdfc 	bl	800305c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007464:	2009      	movs	r0, #9
 8007466:	f7fb fe29 	bl	80030bc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 800746a:	2200      	movs	r2, #0
 800746c:	2103      	movs	r1, #3
 800746e:	200a      	movs	r0, #10
 8007470:	f7fb fdf4 	bl	800305c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8007474:	200a      	movs	r0, #10
 8007476:	f7fb fe21 	bl	80030bc <HAL_NVIC_EnableIRQ>
}
 800747a:	b003      	add	sp, #12
 800747c:	bd00      	pop	{pc}
 800747e:	46c0      	nop			; (mov r8, r8)
 8007480:	40021000 	.word	0x40021000

08007484 <MX_GPIO_Init>:
{
 8007484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007486:	46c6      	mov	lr, r8
 8007488:	b500      	push	{lr}
 800748a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800748c:	2214      	movs	r2, #20
 800748e:	2100      	movs	r1, #0
 8007490:	a803      	add	r0, sp, #12
 8007492:	f001 ff1f 	bl	80092d4 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007496:	4b2b      	ldr	r3, [pc, #172]	; (8007544 <MX_GPIO_Init+0xc0>)
 8007498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800749a:	2501      	movs	r5, #1
 800749c:	432a      	orrs	r2, r5
 800749e:	62da      	str	r2, [r3, #44]	; 0x2c
 80074a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a2:	402a      	ands	r2, r5
 80074a4:	9201      	str	r2, [sp, #4]
 80074a6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80074a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074aa:	2702      	movs	r7, #2
 80074ac:	433a      	orrs	r2, r7
 80074ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80074b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b2:	403b      	ands	r3, r7
 80074b4:	9302      	str	r3, [sp, #8]
 80074b6:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, WAKE_Pin|RESET_Pin|VMON_CLK_Pin, GPIO_PIN_RESET);
 80074b8:	26a0      	movs	r6, #160	; 0xa0
 80074ba:	05f6      	lsls	r6, r6, #23
 80074bc:	2200      	movs	r2, #0
 80074be:	4922      	ldr	r1, [pc, #136]	; (8007548 <MX_GPIO_Init+0xc4>)
 80074c0:	0030      	movs	r0, r6
 80074c2:	f7fc fa04 	bl	80038ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LDO_OFF_GPIO_Port, LDO_OFF_Pin, GPIO_PIN_SET);
 80074c6:	2201      	movs	r2, #1
 80074c8:	2140      	movs	r1, #64	; 0x40
 80074ca:	0030      	movs	r0, r6
 80074cc:	f7fc f9ff 	bl	80038ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_CTRL_Pin|CHR_CTRL_Pin, GPIO_PIN_RESET);
 80074d0:	4b1e      	ldr	r3, [pc, #120]	; (800754c <MX_GPIO_Init+0xc8>)
 80074d2:	4698      	mov	r8, r3
 80074d4:	2200      	movs	r2, #0
 80074d6:	210a      	movs	r1, #10
 80074d8:	0018      	movs	r0, r3
 80074da:	f7fc f9f8 	bl	80038ce <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = WAKE_Pin|LDO_OFF_Pin|RESET_Pin;
 80074de:	23e0      	movs	r3, #224	; 0xe0
 80074e0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074e2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80074e4:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074e6:	2400      	movs	r4, #0
 80074e8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074ea:	a903      	add	r1, sp, #12
 80074ec:	0030      	movs	r0, r6
 80074ee:	f7fc f91b 	bl	8003728 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LDO_OK_Pin|STAT2_Pin|STAT1_Pin;
 80074f2:	2331      	movs	r3, #49	; 0x31
 80074f4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80074f6:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80074f8:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074fa:	a903      	add	r1, sp, #12
 80074fc:	4640      	mov	r0, r8
 80074fe:	f7fc f913 	bl	8003728 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_CTRL_Pin|CHR_CTRL_Pin;
 8007502:	230a      	movs	r3, #10
 8007504:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007506:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007508:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800750a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800750c:	a903      	add	r1, sp, #12
 800750e:	4640      	mov	r0, r8
 8007510:	f7fc f90a 	bl	8003728 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_IND_Pin;
 8007514:	2380      	movs	r3, #128	; 0x80
 8007516:	005b      	lsls	r3, r3, #1
 8007518:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800751a:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800751c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(LED_IND_GPIO_Port, &GPIO_InitStruct);
 800751e:	a903      	add	r1, sp, #12
 8007520:	0030      	movs	r0, r6
 8007522:	f7fc f901 	bl	8003728 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VMON_CLK_Pin;
 8007526:	2380      	movs	r3, #128	; 0x80
 8007528:	021b      	lsls	r3, r3, #8
 800752a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800752c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800752e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007530:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(VMON_CLK_GPIO_Port, &GPIO_InitStruct);
 8007532:	a903      	add	r1, sp, #12
 8007534:	0030      	movs	r0, r6
 8007536:	f7fc f8f7 	bl	8003728 <HAL_GPIO_Init>
}
 800753a:	b008      	add	sp, #32
 800753c:	bc80      	pop	{r7}
 800753e:	46b8      	mov	r8, r7
 8007540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007542:	46c0      	nop			; (mov r8, r8)
 8007544:	40021000 	.word	0x40021000
 8007548:	000080a0 	.word	0x000080a0
 800754c:	50000400 	.word	0x50000400

08007550 <eeprom_ram_init>:
{
 8007550:	b510      	push	{r4, lr}
 8007552:	0004      	movs	r4, r0
	memcpy(eeprom, (uint32_t*)EEPROM_BASE_ADDRESS, sizeof(EEPROMStorageTypDef));
 8007554:	2218      	movs	r2, #24
 8007556:	4910      	ldr	r1, [pc, #64]	; (8007598 <eeprom_ram_init+0x48>)
 8007558:	f001 ff85 	bl	8009466 <memcpy>
	crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)eeprom, sizeof(EEPROMStorageTypDef)-sizeof(uint32_t));
 800755c:	480f      	ldr	r0, [pc, #60]	; (800759c <eeprom_ram_init+0x4c>)
 800755e:	2214      	movs	r2, #20
 8007560:	0021      	movs	r1, r4
 8007562:	f7fb fe4f 	bl	8003204 <HAL_CRC_Calculate>
	if(crc != eeprom->crc)
 8007566:	6963      	ldr	r3, [r4, #20]
 8007568:	4283      	cmp	r3, r0
 800756a:	d00f      	beq.n	800758c <eeprom_ram_init+0x3c>
		eeprom->batt_full_mah = FULL_BATT_MAH;
 800756c:	23c8      	movs	r3, #200	; 0xc8
 800756e:	019b      	lsls	r3, r3, #6
 8007570:	81e3      	strh	r3, [r4, #14]
		eeprom->batt_full_mv = FULL_BATT_MV;
 8007572:	4b0b      	ldr	r3, [pc, #44]	; (80075a0 <eeprom_ram_init+0x50>)
 8007574:	81a3      	strh	r3, [r4, #12]
		eeprom->batt_low_mv = BATT_LOW_MV;
 8007576:	4b0b      	ldr	r3, [pc, #44]	; (80075a4 <eeprom_ram_init+0x54>)
 8007578:	8223      	strh	r3, [r4, #16]
		eeprom->vin_hys_mv = VINPUT_HYS;
 800757a:	4b0b      	ldr	r3, [pc, #44]	; (80075a8 <eeprom_ram_init+0x58>)
 800757c:	8163      	strh	r3, [r4, #10]
		eeprom->vin_limit_mv = VINPUT_LIMIT;
 800757e:	4b0b      	ldr	r3, [pc, #44]	; (80075ac <eeprom_ram_init+0x5c>)
 8007580:	8123      	strh	r3, [r4, #8]
		eeprom->total_batt_ouput_ah = 0;
 8007582:	2200      	movs	r2, #0
 8007584:	2300      	movs	r3, #0
 8007586:	6022      	str	r2, [r4, #0]
 8007588:	6063      	str	r3, [r4, #4]
}
 800758a:	bd10      	pop	{r4, pc}
		storage.total_batt_ouput_ah = eeprom->total_batt_ouput_ah;
 800758c:	6820      	ldr	r0, [r4, #0]
 800758e:	6861      	ldr	r1, [r4, #4]
 8007590:	4b07      	ldr	r3, [pc, #28]	; (80075b0 <eeprom_ram_init+0x60>)
 8007592:	6318      	str	r0, [r3, #48]	; 0x30
 8007594:	6359      	str	r1, [r3, #52]	; 0x34
}
 8007596:	e7f8      	b.n	800758a <eeprom_ram_init+0x3a>
 8007598:	08080000 	.word	0x08080000
 800759c:	20002844 	.word	0x20002844
 80075a0:	00003138 	.word	0x00003138
 80075a4:	00002710 	.word	0x00002710
 80075a8:	00001388 	.word	0x00001388
 80075ac:	000033f4 	.word	0x000033f4
 80075b0:	20002fa8 	.word	0x20002fa8

080075b4 <eeprom_save>:
{
 80075b4:	b510      	push	{r4, lr}
 80075b6:	0004      	movs	r4, r0
	crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)eeprom, sizeof(EEPROMStorageTypDef)-sizeof(uint32_t));
 80075b8:	4807      	ldr	r0, [pc, #28]	; (80075d8 <eeprom_save+0x24>)
 80075ba:	2214      	movs	r2, #20
 80075bc:	0021      	movs	r1, r4
 80075be:	f7fb fe21 	bl	8003204 <HAL_CRC_Calculate>
	if(eeprom->crc != crc)
 80075c2:	6963      	ldr	r3, [r4, #20]
 80075c4:	4283      	cmp	r3, r0
 80075c6:	d100      	bne.n	80075ca <eeprom_save+0x16>
}
 80075c8:	bd10      	pop	{r4, pc}
		eeprom->crc = crc;
 80075ca:	6160      	str	r0, [r4, #20]
		writeEEPROMData(0, (uint8_t*)eeprom, sizeof(EEPROMStorageTypDef));
 80075cc:	2218      	movs	r2, #24
 80075ce:	0021      	movs	r1, r4
 80075d0:	2000      	movs	r0, #0
 80075d2:	f7ff fca1 	bl	8006f18 <writeEEPROMData>
}
 80075d6:	e7f7      	b.n	80075c8 <eeprom_save+0x14>
 80075d8:	20002844 	.word	0x20002844

080075dc <main>:
{
 80075dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075de:	46c6      	mov	lr, r8
 80075e0:	b500      	push	{lr}
 80075e2:	b0a4      	sub	sp, #144	; 0x90
  HAL_Init();
 80075e4:	f7fb fa52 	bl	8002a8c <HAL_Init>
  SystemClock_Config();
 80075e8:	f7ff fe2e 	bl	8007248 <SystemClock_Config>
  MX_GPIO_Init();
 80075ec:	f7ff ff4a 	bl	8007484 <MX_GPIO_Init>
  MX_DMA_Init();
 80075f0:	f7ff ff28 	bl	8007444 <MX_DMA_Init>
  MX_ADC_Init();
 80075f4:	f7ff fe6c 	bl	80072d0 <MX_ADC_Init>
  MX_TIM22_Init();
 80075f8:	f7ff fef2 	bl	80073e0 <MX_TIM22_Init>
  MX_TIM21_Init();
 80075fc:	f7ff fec0 	bl	8007380 <MX_TIM21_Init>
  MX_CRC_Init();
 8007600:	f7ff fdb2 	bl	8007168 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8007604:	f7ff fdc2 	bl	800718c <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8007608:	f7ff fdd8 	bl	80071bc <MX_TIM7_Init>
  MX_IWDG_Init();
 800760c:	f7ff fdfa 	bl	8007204 <MX_IWDG_Init>
  MX_NVIC_Init();
 8007610:	f7ff fe0a 	bl	8007228 <MX_NVIC_Init>
  eeprom_ram_init(&eeprom_info);
 8007614:	4c35      	ldr	r4, [pc, #212]	; (80076ec <main+0x110>)
 8007616:	0020      	movs	r0, r4
 8007618:	f7ff ff9a 	bl	8007550 <eeprom_ram_init>
  eeprom_save(&eeprom_info);
 800761c:	0020      	movs	r0, r4
 800761e:	f7ff ffc9 	bl	80075b4 <eeprom_save>
  HAL_IWDG_Refresh(&hiwdg);
 8007622:	4833      	ldr	r0, [pc, #204]	; (80076f0 <main+0x114>)
 8007624:	f7fc f98e 	bl	8003944 <HAL_IWDG_Refresh>
 SCP_Init(uart_send_buff, uart_read_byte);
 8007628:	4932      	ldr	r1, [pc, #200]	; (80076f4 <main+0x118>)
 800762a:	4833      	ldr	r0, [pc, #204]	; (80076f8 <main+0x11c>)
 800762c:	f7ff fb78 	bl	8006d20 <SCP_Init>
 SCP_InitRx();
 8007630:	f7ff fc26 	bl	8006e80 <SCP_InitRx>
  led_msg = osMessageCreate (&led_msg_def, LEDControlTaskHandle);
 8007634:	4e31      	ldr	r6, [pc, #196]	; (80076fc <main+0x120>)
 8007636:	6831      	ldr	r1, [r6, #0]
 8007638:	4831      	ldr	r0, [pc, #196]	; (8007700 <main+0x124>)
 800763a:	f7fe f850 	bl	80056de <osMessageCreate>
 800763e:	4b31      	ldr	r3, [pc, #196]	; (8007704 <main+0x128>)
 8007640:	6018      	str	r0, [r3, #0]
  ind_msg = osMessageCreate (&ind_msg_def, IndicationTaskHandle);
 8007642:	4b31      	ldr	r3, [pc, #196]	; (8007708 <main+0x12c>)
 8007644:	4698      	mov	r8, r3
 8007646:	6819      	ldr	r1, [r3, #0]
 8007648:	4830      	ldr	r0, [pc, #192]	; (800770c <main+0x130>)
 800764a:	f7fe f848 	bl	80056de <osMessageCreate>
 800764e:	4b30      	ldr	r3, [pc, #192]	; (8007710 <main+0x134>)
 8007650:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 64);
 8007652:	a81d      	add	r0, sp, #116	; 0x74
 8007654:	4c2f      	ldr	r4, [pc, #188]	; (8007714 <main+0x138>)
 8007656:	0003      	movs	r3, r0
 8007658:	0022      	movs	r2, r4
 800765a:	caa2      	ldmia	r2!, {r1, r5, r7}
 800765c:	c3a2      	stmia	r3!, {r1, r5, r7}
 800765e:	caa2      	ldmia	r2!, {r1, r5, r7}
 8007660:	c3a2      	stmia	r3!, {r1, r5, r7}
 8007662:	6812      	ldr	r2, [r2, #0]
 8007664:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8007666:	2100      	movs	r1, #0
 8007668:	f7fd ff97 	bl	800559a <osThreadCreate>
 800766c:	4b2a      	ldr	r3, [pc, #168]	; (8007718 <main+0x13c>)
 800766e:	6018      	str	r0, [r3, #0]
  osThreadDef(ledcontrol, LEDControlTask, osPriorityAboveNormal, 0, 64);
 8007670:	a816      	add	r0, sp, #88	; 0x58
 8007672:	0023      	movs	r3, r4
 8007674:	331c      	adds	r3, #28
 8007676:	0002      	movs	r2, r0
 8007678:	cba2      	ldmia	r3!, {r1, r5, r7}
 800767a:	c2a2      	stmia	r2!, {r1, r5, r7}
 800767c:	cba2      	ldmia	r3!, {r1, r5, r7}
 800767e:	c2a2      	stmia	r2!, {r1, r5, r7}
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	6013      	str	r3, [r2, #0]
  LEDControlTaskHandle = osThreadCreate(osThread(ledcontrol), NULL);
 8007684:	2100      	movs	r1, #0
 8007686:	f7fd ff88 	bl	800559a <osThreadCreate>
 800768a:	6030      	str	r0, [r6, #0]
  osThreadDef(monitoring, MonitorTask, osPriorityHigh, 0, 64);
 800768c:	a80f      	add	r0, sp, #60	; 0x3c
 800768e:	0023      	movs	r3, r4
 8007690:	3338      	adds	r3, #56	; 0x38
 8007692:	0002      	movs	r2, r0
 8007694:	cbc2      	ldmia	r3!, {r1, r6, r7}
 8007696:	c2c2      	stmia	r2!, {r1, r6, r7}
 8007698:	cbc2      	ldmia	r3!, {r1, r6, r7}
 800769a:	c2c2      	stmia	r2!, {r1, r6, r7}
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6013      	str	r3, [r2, #0]
  MonitorTaskHandle = osThreadCreate(osThread(monitoring), NULL);
 80076a0:	2100      	movs	r1, #0
 80076a2:	f7fd ff7a 	bl	800559a <osThreadCreate>
 80076a6:	4b1d      	ldr	r3, [pc, #116]	; (800771c <main+0x140>)
 80076a8:	6018      	str	r0, [r3, #0]
  osThreadDef(indication, IndicationTask, osPriorityAboveNormal, 0, 64);
 80076aa:	a808      	add	r0, sp, #32
 80076ac:	0023      	movs	r3, r4
 80076ae:	3354      	adds	r3, #84	; 0x54
 80076b0:	0002      	movs	r2, r0
 80076b2:	cbc2      	ldmia	r3!, {r1, r6, r7}
 80076b4:	c2c2      	stmia	r2!, {r1, r6, r7}
 80076b6:	cbc2      	ldmia	r3!, {r1, r6, r7}
 80076b8:	c2c2      	stmia	r2!, {r1, r6, r7}
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6013      	str	r3, [r2, #0]
  IndicationTaskHandle = osThreadCreate(osThread(indication), NULL);
 80076be:	2100      	movs	r1, #0
 80076c0:	f7fd ff6b 	bl	800559a <osThreadCreate>
 80076c4:	4643      	mov	r3, r8
 80076c6:	6018      	str	r0, [r3, #0]
  osThreadDef(management, ManagementTask, osPriorityNormal, 0, 1024);
 80076c8:	a801      	add	r0, sp, #4
 80076ca:	0023      	movs	r3, r4
 80076cc:	3370      	adds	r3, #112	; 0x70
 80076ce:	0002      	movs	r2, r0
 80076d0:	cb32      	ldmia	r3!, {r1, r4, r5}
 80076d2:	c232      	stmia	r2!, {r1, r4, r5}
 80076d4:	cb32      	ldmia	r3!, {r1, r4, r5}
 80076d6:	c232      	stmia	r2!, {r1, r4, r5}
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	6013      	str	r3, [r2, #0]
  ManagementTaskHandle = osThreadCreate(osThread(management), NULL);
 80076dc:	2100      	movs	r1, #0
 80076de:	f7fd ff5c 	bl	800559a <osThreadCreate>
 80076e2:	4b0f      	ldr	r3, [pc, #60]	; (8007720 <main+0x144>)
 80076e4:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80076e6:	f7fd ff53 	bl	8005590 <osKernelStart>
  while (1)
 80076ea:	e7fe      	b.n	80076ea <main+0x10e>
 80076ec:	200027d0 	.word	0x200027d0
 80076f0:	20002940 	.word	0x20002940
 80076f4:	08008459 	.word	0x08008459
 80076f8:	08008445 	.word	0x08008445
 80076fc:	200027bc 	.word	0x200027bc
 8007700:	0800df8c 	.word	0x0800df8c
 8007704:	200027c0 	.word	0x200027c0
 8007708:	200027b4 	.word	0x200027b4
 800770c:	0800df7c 	.word	0x0800df7c
 8007710:	200027b8 	.word	0x200027b8
 8007714:	0800de38 	.word	0x0800de38
 8007718:	200027c8 	.word	0x200027c8
 800771c:	20002f94 	.word	0x20002f94
 8007720:	20002a94 	.word	0x20002a94

08007724 <HAL_UART_RxCpltCallback>:
{
 8007724:	b510      	push	{r4, lr}
  if(huart->Instance == USART1)
 8007726:	6802      	ldr	r2, [r0, #0]
 8007728:	4b04      	ldr	r3, [pc, #16]	; (800773c <HAL_UART_RxCpltCallback+0x18>)
 800772a:	429a      	cmp	r2, r3
 800772c:	d000      	beq.n	8007730 <HAL_UART_RxCpltCallback+0xc>
}
 800772e:	bd10      	pop	{r4, pc}
    SCP_ByteReceived(aRxBuffer);
 8007730:	4b03      	ldr	r3, [pc, #12]	; (8007740 <HAL_UART_RxCpltCallback+0x1c>)
 8007732:	7818      	ldrb	r0, [r3, #0]
 8007734:	f7ff fbb2 	bl	8006e9c <SCP_ByteReceived>
}
 8007738:	e7f9      	b.n	800772e <HAL_UART_RxCpltCallback+0xa>
 800773a:	46c0      	nop			; (mov r8, r8)
 800773c:	40013800 	.word	0x40013800
 8007740:	200027c4 	.word	0x200027c4

08007744 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007744:	b510      	push	{r4, lr}
 8007746:	0004      	movs	r4, r0
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8007748:	6802      	ldr	r2, [r0, #0]
 800774a:	2380      	movs	r3, #128	; 0x80
 800774c:	05db      	lsls	r3, r3, #23
 800774e:	429a      	cmp	r2, r3
 8007750:	d008      	beq.n	8007764 <HAL_TIM_PeriodElapsedCallback+0x20>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM21)
 8007752:	6822      	ldr	r2, [r4, #0]
 8007754:	4b0a      	ldr	r3, [pc, #40]	; (8007780 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8007756:	429a      	cmp	r2, r3
 8007758:	d007      	beq.n	800776a <HAL_TIM_PeriodElapsedCallback+0x26>
  {
	  osSignalSet (MonitorTaskHandle, 0x00000001);
  }

  if (htim->Instance == TIM7)
 800775a:	6822      	ldr	r2, [r4, #0]
 800775c:	4b09      	ldr	r3, [pc, #36]	; (8007784 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800775e:	429a      	cmp	r2, r3
 8007760:	d009      	beq.n	8007776 <HAL_TIM_PeriodElapsedCallback+0x32>
  {
	  SCP_Tick(10);
  }

  /* USER CODE END Callback 1 */
}
 8007762:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8007764:	f7fb f9a6 	bl	8002ab4 <HAL_IncTick>
 8007768:	e7f3      	b.n	8007752 <HAL_TIM_PeriodElapsedCallback+0xe>
	  osSignalSet (MonitorTaskHandle, 0x00000001);
 800776a:	4b07      	ldr	r3, [pc, #28]	; (8007788 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800776c:	6818      	ldr	r0, [r3, #0]
 800776e:	2101      	movs	r1, #1
 8007770:	f7fd ff58 	bl	8005624 <osSignalSet>
 8007774:	e7f1      	b.n	800775a <HAL_TIM_PeriodElapsedCallback+0x16>
	  SCP_Tick(10);
 8007776:	200a      	movs	r0, #10
 8007778:	f7ff fab2 	bl	8006ce0 <SCP_Tick>
}
 800777c:	e7f1      	b.n	8007762 <HAL_TIM_PeriodElapsedCallback+0x1e>
 800777e:	46c0      	nop			; (mov r8, r8)
 8007780:	40010800 	.word	0x40010800
 8007784:	40001400 	.word	0x40001400
 8007788:	20002f94 	.word	0x20002f94

0800778c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800778c:	4770      	bx	lr
	...

08007790 <charger_enable>:
		*/
	}
}

void charger_enable(void)
{
 8007790:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(CHR_CTRL_GPIO_Port, CHR_CTRL_Pin, GPIO_PIN_RESET);
 8007792:	2200      	movs	r2, #0
 8007794:	2108      	movs	r1, #8
 8007796:	4802      	ldr	r0, [pc, #8]	; (80077a0 <charger_enable+0x10>)
 8007798:	f7fc f899 	bl	80038ce <HAL_GPIO_WritePin>
}
 800779c:	bd10      	pop	{r4, pc}
 800779e:	46c0      	nop			; (mov r8, r8)
 80077a0:	50000400 	.word	0x50000400

080077a4 <charger_disable>:
void charger_disable(void)
{
 80077a4:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(CHR_CTRL_GPIO_Port, CHR_CTRL_Pin, GPIO_PIN_SET);
 80077a6:	2201      	movs	r2, #1
 80077a8:	2108      	movs	r1, #8
 80077aa:	4802      	ldr	r0, [pc, #8]	; (80077b4 <charger_disable+0x10>)
 80077ac:	f7fc f88f 	bl	80038ce <HAL_GPIO_WritePin>
}
 80077b0:	bd10      	pop	{r4, pc}
 80077b2:	46c0      	nop			; (mov r8, r8)
 80077b4:	50000400 	.word	0x50000400

080077b8 <charger_status>:

ch_state_t charger_status(void)
{
 80077b8:	b510      	push	{r4, lr}
	_Bool stat1;
	_Bool stat2;

	/*Read STAT1 pin*/
	if(HAL_GPIO_ReadPin(STAT1_GPIO_Port, STAT1_Pin) == GPIO_PIN_RESET)
 80077ba:	2120      	movs	r1, #32
 80077bc:	4813      	ldr	r0, [pc, #76]	; (800780c <charger_status+0x54>)
 80077be:	f7fc f87f 	bl	80038c0 <HAL_GPIO_ReadPin>
 80077c2:	2800      	cmp	r0, #0
 80077c4:	d115      	bne.n	80077f2 <charger_status+0x3a>
		{stat1 = 0;}
 80077c6:	2400      	movs	r4, #0
	else
		{stat1 = 1;}

	/*Read STAT2 pin*/
	if(HAL_GPIO_ReadPin(STAT2_GPIO_Port, STAT2_Pin) == GPIO_PIN_RESET)
 80077c8:	2110      	movs	r1, #16
 80077ca:	4810      	ldr	r0, [pc, #64]	; (800780c <charger_status+0x54>)
 80077cc:	f7fc f878 	bl	80038c0 <HAL_GPIO_ReadPin>
 80077d0:	2800      	cmp	r0, #0
 80077d2:	d110      	bne.n	80077f6 <charger_status+0x3e>
		{stat2 = 0;}
 80077d4:	2300      	movs	r3, #0
	else
		{stat2 = 1;}

	/*Decode logic*/
	if(stat1 && !stat2)
 80077d6:	2c00      	cmp	r4, #0
 80077d8:	d001      	beq.n	80077de <charger_status+0x26>
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00d      	beq.n	80077fa <charger_status+0x42>
	{
		return IN_PROGRESS;
	}
	if(!stat1 && stat2)
 80077de:	2c00      	cmp	r4, #0
 80077e0:	d101      	bne.n	80077e6 <charger_status+0x2e>
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d10b      	bne.n	80077fe <charger_status+0x46>
	{
		return COMPLETED;
	}
	if(!stat1 && !stat2)
 80077e6:	2c00      	cmp	r4, #0
 80077e8:	d10b      	bne.n	8007802 <charger_status+0x4a>
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00b      	beq.n	8007806 <charger_status+0x4e>
	{
		return INACTIVE;
	}

	return UNKNOWN;
 80077ee:	2002      	movs	r0, #2
}
 80077f0:	bd10      	pop	{r4, pc}
		{stat1 = 1;}
 80077f2:	2401      	movs	r4, #1
 80077f4:	e7e8      	b.n	80077c8 <charger_status+0x10>
		{stat2 = 1;}
 80077f6:	2301      	movs	r3, #1
 80077f8:	e7ed      	b.n	80077d6 <charger_status+0x1e>
		return IN_PROGRESS;
 80077fa:	2001      	movs	r0, #1
 80077fc:	e7f8      	b.n	80077f0 <charger_status+0x38>
		return COMPLETED;
 80077fe:	2000      	movs	r0, #0
 8007800:	e7f6      	b.n	80077f0 <charger_status+0x38>
	return UNKNOWN;
 8007802:	2002      	movs	r0, #2
 8007804:	e7f4      	b.n	80077f0 <charger_status+0x38>
		return INACTIVE;
 8007806:	2001      	movs	r0, #1
 8007808:	4240      	negs	r0, r0
 800780a:	e7f1      	b.n	80077f0 <charger_status+0x38>
 800780c:	50000400 	.word	0x50000400

08007810 <load_setup>:

uint32_t load_setup(uint32_t capacity, uint32_t nightitme)
{
 8007810:	b570      	push	{r4, r5, r6, lr}
 8007812:	000e      	movs	r6, r1
	uint32_t intensity;
	uint32_t mAseconds;
	float capfix;

	capfix = 0.70 * capacity;
 8007814:	f7fa ff7a 	bl	800270c <__aeabi_ui2d>
 8007818:	4a15      	ldr	r2, [pc, #84]	; (8007870 <load_setup+0x60>)
 800781a:	4b16      	ldr	r3, [pc, #88]	; (8007874 <load_setup+0x64>)
 800781c:	f7fa f8ae 	bl	800197c <__aeabi_dmul>
 8007820:	f7fa ff9a 	bl	8002758 <__aeabi_d2f>
	capacity = (uint32_t)capfix;
 8007824:	f7f8 fe8e 	bl	8000544 <__aeabi_f2uiz>
		osMessagePut(led_msg, intensity, osWaitForever);
		return intensity;
	}

	/*Convert capacity to mAs*/
	mAseconds = capacity*3600;
 8007828:	0103      	lsls	r3, r0, #4
 800782a:	1a1b      	subs	r3, r3, r0
 800782c:	011d      	lsls	r5, r3, #4
 800782e:	1aed      	subs	r5, r5, r3
 8007830:	012d      	lsls	r5, r5, #4

	/*Look for load to have LEDs operational over night time*/
	for(intensity = 0; intensity < 32; intensity++)
 8007832:	2400      	movs	r4, #0
 8007834:	2c1f      	cmp	r4, #31
 8007836:	d819      	bhi.n	800786c <load_setup+0x5c>
	{
		osMessagePut(led_msg, intensity, osWaitForever);
 8007838:	2201      	movs	r2, #1
 800783a:	4b0f      	ldr	r3, [pc, #60]	; (8007878 <load_setup+0x68>)
 800783c:	6818      	ldr	r0, [r3, #0]
 800783e:	4252      	negs	r2, r2
 8007840:	0021      	movs	r1, r4
 8007842:	f7fd ff63 	bl	800570c <osMessagePut>
		osDelay(300);
 8007846:	2096      	movs	r0, #150	; 0x96
 8007848:	0040      	lsls	r0, r0, #1
 800784a:	f7fd fee2 	bl	8005612 <osDelay>
		if(storage.coutput_ma*nightitme > mAseconds)
 800784e:	4b0b      	ldr	r3, [pc, #44]	; (800787c <load_setup+0x6c>)
 8007850:	69db      	ldr	r3, [r3, #28]
 8007852:	4373      	muls	r3, r6
 8007854:	42ab      	cmp	r3, r5
 8007856:	d801      	bhi.n	800785c <load_setup+0x4c>
	for(intensity = 0; intensity < 32; intensity++)
 8007858:	3401      	adds	r4, #1
 800785a:	e7eb      	b.n	8007834 <load_setup+0x24>
		{
			osMessagePut(led_msg, intensity-1, osWaitForever);
 800785c:	3c01      	subs	r4, #1
 800785e:	2201      	movs	r2, #1
 8007860:	4b05      	ldr	r3, [pc, #20]	; (8007878 <load_setup+0x68>)
 8007862:	6818      	ldr	r0, [r3, #0]
 8007864:	4252      	negs	r2, r2
 8007866:	0021      	movs	r1, r4
 8007868:	f7fd ff50 	bl	800570c <osMessagePut>
			return intensity-1;
		}
	}

	return intensity;
}
 800786c:	0020      	movs	r0, r4
 800786e:	bd70      	pop	{r4, r5, r6, pc}
 8007870:	66666666 	.word	0x66666666
 8007874:	3fe66666 	.word	0x3fe66666
 8007878:	200027c0 	.word	0x200027c0
 800787c:	20002fa8 	.word	0x20002fa8

08007880 <ManagementTask>:
{
 8007880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007882:	e015      	b.n	80078b0 <ManagementTask+0x30>
				if(ch_status == COMPLETED)
 8007884:	2800      	cmp	r0, #0
 8007886:	d14f      	bne.n	8007928 <ManagementTask+0xa8>
					battery_charged = 1;
 8007888:	4bb2      	ldr	r3, [pc, #712]	; (8007b54 <ManagementTask+0x2d4>)
 800788a:	2201      	movs	r2, #1
 800788c:	701a      	strb	r2, [r3, #0]
					discharge_lock = 0;
 800788e:	4bb2      	ldr	r3, [pc, #712]	; (8007b58 <ManagementTask+0x2d8>)
 8007890:	2200      	movs	r2, #0
 8007892:	701a      	strb	r2, [r3, #0]
					osMessagePut(ind_msg, IND_GREEN, osWaitForever);
 8007894:	3201      	adds	r2, #1
 8007896:	4bb1      	ldr	r3, [pc, #708]	; (8007b5c <ManagementTask+0x2dc>)
 8007898:	6818      	ldr	r0, [r3, #0]
 800789a:	4252      	negs	r2, r2
 800789c:	2101      	movs	r1, #1
 800789e:	f7fd ff35 	bl	800570c <osMessagePut>
					storage.energy_stored_mah = eeprom_info.batt_full_mah;
 80078a2:	4baf      	ldr	r3, [pc, #700]	; (8007b60 <ManagementTask+0x2e0>)
 80078a4:	89d8      	ldrh	r0, [r3, #14]
 80078a6:	4caf      	ldr	r4, [pc, #700]	; (8007b64 <ManagementTask+0x2e4>)
 80078a8:	f7fa ff30 	bl	800270c <__aeabi_ui2d>
 80078ac:	6220      	str	r0, [r4, #32]
 80078ae:	6261      	str	r1, [r4, #36]	; 0x24
		osDelay(1000);
 80078b0:	20fa      	movs	r0, #250	; 0xfa
 80078b2:	0080      	lsls	r0, r0, #2
 80078b4:	f7fd fead 	bl	8005612 <osDelay>
		if(storage.daytime_flag)
 80078b8:	4baa      	ldr	r3, [pc, #680]	; (8007b64 <ManagementTask+0x2e4>)
 80078ba:	223d      	movs	r2, #61	; 0x3d
 80078bc:	5c9b      	ldrb	r3, [r3, r2]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d100      	bne.n	80078c4 <ManagementTask+0x44>
 80078c2:	e081      	b.n	80079c8 <ManagementTask+0x148>
			if(storage.vinput_mv+100 > MPPT_MV)
 80078c4:	4ba7      	ldr	r3, [pc, #668]	; (8007b64 <ManagementTask+0x2e4>)
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	0019      	movs	r1, r3
 80078ca:	3164      	adds	r1, #100	; 0x64
 80078cc:	4aa6      	ldr	r2, [pc, #664]	; (8007b68 <ManagementTask+0x2e8>)
 80078ce:	4291      	cmp	r1, r2
 80078d0:	d94e      	bls.n	8007970 <ManagementTask+0xf0>
				charger_enable();
 80078d2:	f7ff ff5d 	bl	8007790 <charger_enable>
				osDelay(5000);
 80078d6:	48a5      	ldr	r0, [pc, #660]	; (8007b6c <ManagementTask+0x2ec>)
 80078d8:	f7fd fe9b 	bl	8005612 <osDelay>
				ch_status = charger_status();
 80078dc:	f7ff ff6c 	bl	80077b8 <charger_status>
				while(ch_status == IN_PROGRESS)
 80078e0:	2801      	cmp	r0, #1
 80078e2:	d1cf      	bne.n	8007884 <ManagementTask+0x4>
					osDelay(500);
 80078e4:	26fa      	movs	r6, #250	; 0xfa
 80078e6:	0076      	lsls	r6, r6, #1
 80078e8:	0030      	movs	r0, r6
 80078ea:	f7fd fe92 	bl	8005612 <osDelay>
					osMessagePut(ind_msg, IND_RED, osWaitForever);
 80078ee:	2401      	movs	r4, #1
 80078f0:	4264      	negs	r4, r4
 80078f2:	4d9a      	ldr	r5, [pc, #616]	; (8007b5c <ManagementTask+0x2dc>)
 80078f4:	6828      	ldr	r0, [r5, #0]
 80078f6:	0022      	movs	r2, r4
 80078f8:	2102      	movs	r1, #2
 80078fa:	f7fd ff07 	bl	800570c <osMessagePut>
					osDelay(500);
 80078fe:	0030      	movs	r0, r6
 8007900:	f7fd fe87 	bl	8005612 <osDelay>
					osMessagePut(ind_msg, IND_GREEN, osWaitForever);
 8007904:	6828      	ldr	r0, [r5, #0]
 8007906:	0022      	movs	r2, r4
 8007908:	2101      	movs	r1, #1
 800790a:	f7fd feff 	bl	800570c <osMessagePut>
					discharge_lock = 0;
 800790e:	4b92      	ldr	r3, [pc, #584]	; (8007b58 <ManagementTask+0x2d8>)
 8007910:	2200      	movs	r2, #0
 8007912:	701a      	strb	r2, [r3, #0]
					battery_charged = 0;
 8007914:	4b8f      	ldr	r3, [pc, #572]	; (8007b54 <ManagementTask+0x2d4>)
 8007916:	701a      	strb	r2, [r3, #0]
					ch_status = charger_status();
 8007918:	f7ff ff4e 	bl	80077b8 <charger_status>
					if(!storage.daytime_flag)/*Fail-safe*/
 800791c:	4b91      	ldr	r3, [pc, #580]	; (8007b64 <ManagementTask+0x2e4>)
 800791e:	223d      	movs	r2, #61	; 0x3d
 8007920:	5c9b      	ldrb	r3, [r3, r2]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1dc      	bne.n	80078e0 <ManagementTask+0x60>
 8007926:	e7ad      	b.n	8007884 <ManagementTask+0x4>
					charger_disable();
 8007928:	f7ff ff3c 	bl	80077a4 <charger_disable>
					osDelay(5000);
 800792c:	488f      	ldr	r0, [pc, #572]	; (8007b6c <ManagementTask+0x2ec>)
 800792e:	f7fd fe70 	bl	8005612 <osDelay>
					for(i = 0; i < 4; i++)
 8007932:	2400      	movs	r4, #0
 8007934:	e014      	b.n	8007960 <ManagementTask+0xe0>
						osMessagePut(ind_msg, IND_RED, osWaitForever);
 8007936:	2501      	movs	r5, #1
 8007938:	426d      	negs	r5, r5
 800793a:	4e88      	ldr	r6, [pc, #544]	; (8007b5c <ManagementTask+0x2dc>)
 800793c:	6830      	ldr	r0, [r6, #0]
 800793e:	002a      	movs	r2, r5
 8007940:	2102      	movs	r1, #2
 8007942:	f7fd fee3 	bl	800570c <osMessagePut>
						osDelay(100);
 8007946:	2064      	movs	r0, #100	; 0x64
 8007948:	f7fd fe63 	bl	8005612 <osDelay>
						osMessagePut(ind_msg, IND_OFF, osWaitForever);
 800794c:	6830      	ldr	r0, [r6, #0]
 800794e:	002a      	movs	r2, r5
 8007950:	2100      	movs	r1, #0
 8007952:	f7fd fedb 	bl	800570c <osMessagePut>
						osDelay(100);
 8007956:	2064      	movs	r0, #100	; 0x64
 8007958:	f7fd fe5b 	bl	8005612 <osDelay>
					for(i = 0; i < 4; i++)
 800795c:	3401      	adds	r4, #1
 800795e:	b2e4      	uxtb	r4, r4
 8007960:	2c03      	cmp	r4, #3
 8007962:	d9e8      	bls.n	8007936 <ManagementTask+0xb6>
					charger_enable();
 8007964:	f7ff ff14 	bl	8007790 <charger_enable>
					osDelay(5000);
 8007968:	4880      	ldr	r0, [pc, #512]	; (8007b6c <ManagementTask+0x2ec>)
 800796a:	f7fd fe52 	bl	8005612 <osDelay>
 800796e:	e79f      	b.n	80078b0 <ManagementTask+0x30>
			else if(storage.vinput_mv-100 < MPPT_MV)
 8007970:	3b64      	subs	r3, #100	; 0x64
 8007972:	4a7f      	ldr	r2, [pc, #508]	; (8007b70 <ManagementTask+0x2f0>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d89b      	bhi.n	80078b0 <ManagementTask+0x30>
				charger_disable();
 8007978:	f7ff ff14 	bl	80077a4 <charger_disable>
				if(battery_charged)
 800797c:	4b75      	ldr	r3, [pc, #468]	; (8007b54 <ManagementTask+0x2d4>)
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d11f      	bne.n	80079c4 <ManagementTask+0x144>
					osMessagePut(ind_msg, IND_OFF, osWaitForever);
 8007984:	2201      	movs	r2, #1
 8007986:	4b75      	ldr	r3, [pc, #468]	; (8007b5c <ManagementTask+0x2dc>)
 8007988:	6818      	ldr	r0, [r3, #0]
 800798a:	4252      	negs	r2, r2
 800798c:	2100      	movs	r1, #0
 800798e:	f7fd febd 	bl	800570c <osMessagePut>
 8007992:	e78d      	b.n	80078b0 <ManagementTask+0x30>
						osMessagePut(ind_msg, IND_GREEN, osWaitForever);
 8007994:	2501      	movs	r5, #1
 8007996:	426d      	negs	r5, r5
 8007998:	4e70      	ldr	r6, [pc, #448]	; (8007b5c <ManagementTask+0x2dc>)
 800799a:	6830      	ldr	r0, [r6, #0]
 800799c:	002a      	movs	r2, r5
 800799e:	2101      	movs	r1, #1
 80079a0:	f7fd feb4 	bl	800570c <osMessagePut>
						osDelay(100);
 80079a4:	2064      	movs	r0, #100	; 0x64
 80079a6:	f7fd fe34 	bl	8005612 <osDelay>
						osMessagePut(ind_msg, IND_OFF, osWaitForever);
 80079aa:	6830      	ldr	r0, [r6, #0]
 80079ac:	002a      	movs	r2, r5
 80079ae:	2100      	movs	r1, #0
 80079b0:	f7fd feac 	bl	800570c <osMessagePut>
						osDelay(100);
 80079b4:	2064      	movs	r0, #100	; 0x64
 80079b6:	f7fd fe2c 	bl	8005612 <osDelay>
					for(i = 0; i < 4; i++)
 80079ba:	3401      	adds	r4, #1
 80079bc:	b2e4      	uxtb	r4, r4
 80079be:	2c03      	cmp	r4, #3
 80079c0:	d9e8      	bls.n	8007994 <ManagementTask+0x114>
 80079c2:	e775      	b.n	80078b0 <ManagementTask+0x30>
 80079c4:	2400      	movs	r4, #0
 80079c6:	e7fa      	b.n	80079be <ManagementTask+0x13e>
			charger_disable();
 80079c8:	f7ff feec 	bl	80077a4 <charger_disable>
			osMessagePut(ind_msg, IND_OFF, osWaitForever);
 80079cc:	2401      	movs	r4, #1
 80079ce:	4264      	negs	r4, r4
 80079d0:	4b62      	ldr	r3, [pc, #392]	; (8007b5c <ManagementTask+0x2dc>)
 80079d2:	6818      	ldr	r0, [r3, #0]
 80079d4:	0022      	movs	r2, r4
 80079d6:	2100      	movs	r1, #0
 80079d8:	f7fd fe98 	bl	800570c <osMessagePut>
			osMessagePut(led_msg, 0, osWaitForever);
 80079dc:	4b65      	ldr	r3, [pc, #404]	; (8007b74 <ManagementTask+0x2f4>)
 80079de:	6818      	ldr	r0, [r3, #0]
 80079e0:	0022      	movs	r2, r4
 80079e2:	2100      	movs	r1, #0
 80079e4:	f7fd fe92 	bl	800570c <osMessagePut>
			if(!discharge_lock)
 80079e8:	4b5b      	ldr	r3, [pc, #364]	; (8007b58 <ManagementTask+0x2d8>)
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d000      	beq.n	80079f2 <ManagementTask+0x172>
 80079f0:	e75e      	b.n	80078b0 <ManagementTask+0x30>
				if(battery_charged)
 80079f2:	4b58      	ldr	r3, [pc, #352]	; (8007b54 <ManagementTask+0x2d4>)
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d126      	bne.n	8007a48 <ManagementTask+0x1c8>
					storage.energy_stored_mah -= storage.energy_released_mah;
 80079fa:	4e5a      	ldr	r6, [pc, #360]	; (8007b64 <ManagementTask+0x2e4>)
 80079fc:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80079fe:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8007a00:	6a30      	ldr	r0, [r6, #32]
 8007a02:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8007a04:	f7fa fa7c 	bl	8001f00 <__aeabi_dsub>
 8007a08:	0004      	movs	r4, r0
 8007a0a:	000d      	movs	r5, r1
 8007a0c:	6234      	str	r4, [r6, #32]
 8007a0e:	6275      	str	r5, [r6, #36]	; 0x24
					storage.energy_released_mah = 0;
 8007a10:	2200      	movs	r2, #0
 8007a12:	2300      	movs	r3, #0
 8007a14:	62b2      	str	r2, [r6, #40]	; 0x28
 8007a16:	62f3      	str	r3, [r6, #44]	; 0x2c
					if(storage.energy_stored_mah > 0)
 8007a18:	f7f8 fd32 	bl	8000480 <__aeabi_dcmpgt>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	d01e      	beq.n	8007a5e <ManagementTask+0x1de>
						storage.led_level = load_setup(storage.energy_stored_mah, HOURS_24 - storage.daylength_s);
 8007a20:	0037      	movs	r7, r6
 8007a22:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8007a24:	4e54      	ldr	r6, [pc, #336]	; (8007b78 <ManagementTask+0x2f8>)
 8007a26:	1af6      	subs	r6, r6, r3
 8007a28:	0020      	movs	r0, r4
 8007a2a:	0029      	movs	r1, r5
 8007a2c:	f7f8 fda2 	bl	8000574 <__aeabi_d2uiz>
 8007a30:	0031      	movs	r1, r6
 8007a32:	f7ff feed 	bl	8007810 <load_setup>
 8007a36:	233c      	movs	r3, #60	; 0x3c
 8007a38:	54f8      	strb	r0, [r7, r3]
				modem_data.day_lenght_store = storage.daylength_s;
 8007a3a:	4b4a      	ldr	r3, [pc, #296]	; (8007b64 <ManagementTask+0x2e4>)
 8007a3c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007a3e:	4a4f      	ldr	r2, [pc, #316]	; (8007b7c <ManagementTask+0x2fc>)
 8007a40:	6691      	str	r1, [r2, #104]	; 0x68
				storage.daylength_s = 0;
 8007a42:	2200      	movs	r2, #0
 8007a44:	639a      	str	r2, [r3, #56]	; 0x38
 8007a46:	e036      	b.n	8007ab6 <ManagementTask+0x236>
					storage.led_level = load_setup(eeprom_info.batt_full_mah, HOURS_24 - storage.daylength_s);
 8007a48:	4b45      	ldr	r3, [pc, #276]	; (8007b60 <ManagementTask+0x2e0>)
 8007a4a:	89d8      	ldrh	r0, [r3, #14]
 8007a4c:	4c45      	ldr	r4, [pc, #276]	; (8007b64 <ManagementTask+0x2e4>)
 8007a4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007a50:	4949      	ldr	r1, [pc, #292]	; (8007b78 <ManagementTask+0x2f8>)
 8007a52:	1ac9      	subs	r1, r1, r3
 8007a54:	f7ff fedc 	bl	8007810 <load_setup>
 8007a58:	233c      	movs	r3, #60	; 0x3c
 8007a5a:	54e0      	strb	r0, [r4, r3]
 8007a5c:	e7ed      	b.n	8007a3a <ManagementTask+0x1ba>
						storage.energy_stored_mah = 0;
 8007a5e:	4b41      	ldr	r3, [pc, #260]	; (8007b64 <ManagementTask+0x2e4>)
 8007a60:	2000      	movs	r0, #0
 8007a62:	2100      	movs	r1, #0
 8007a64:	6218      	str	r0, [r3, #32]
 8007a66:	6259      	str	r1, [r3, #36]	; 0x24
						storage.led_level = 0;
 8007a68:	223c      	movs	r2, #60	; 0x3c
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	5499      	strb	r1, [r3, r2]
						osMessagePut(led_msg, 0, osWaitForever);
 8007a6e:	3a3b      	subs	r2, #59	; 0x3b
 8007a70:	4b40      	ldr	r3, [pc, #256]	; (8007b74 <ManagementTask+0x2f4>)
 8007a72:	6818      	ldr	r0, [r3, #0]
 8007a74:	4252      	negs	r2, r2
 8007a76:	f7fd fe49 	bl	800570c <osMessagePut>
 8007a7a:	e7de      	b.n	8007a3a <ManagementTask+0x1ba>
						osMessagePut(ind_msg, IND_RED, osWaitForever);
 8007a7c:	2401      	movs	r4, #1
 8007a7e:	4264      	negs	r4, r4
 8007a80:	4d36      	ldr	r5, [pc, #216]	; (8007b5c <ManagementTask+0x2dc>)
 8007a82:	6828      	ldr	r0, [r5, #0]
 8007a84:	0022      	movs	r2, r4
 8007a86:	2102      	movs	r1, #2
 8007a88:	f7fd fe40 	bl	800570c <osMessagePut>
						osDelay(50);
 8007a8c:	2032      	movs	r0, #50	; 0x32
 8007a8e:	f7fd fdc0 	bl	8005612 <osDelay>
						osMessagePut(ind_msg, IND_OFF, osWaitForever);
 8007a92:	6828      	ldr	r0, [r5, #0]
 8007a94:	0022      	movs	r2, r4
 8007a96:	2100      	movs	r1, #0
 8007a98:	f7fd fe38 	bl	800570c <osMessagePut>
						osDelay(950);
 8007a9c:	4838      	ldr	r0, [pc, #224]	; (8007b80 <ManagementTask+0x300>)
 8007a9e:	f7fd fdb8 	bl	8005612 <osDelay>
					if(storage.daytime_flag)
 8007aa2:	4b30      	ldr	r3, [pc, #192]	; (8007b64 <ManagementTask+0x2e4>)
 8007aa4:	223d      	movs	r2, #61	; 0x3d
 8007aa6:	5c9b      	ldrb	r3, [r3, r2]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d122      	bne.n	8007af2 <ManagementTask+0x272>
					if(storage.vbatt_mv < BATT_LOW_MV)
 8007aac:	4b2d      	ldr	r3, [pc, #180]	; (8007b64 <ManagementTask+0x2e4>)
 8007aae:	691a      	ldr	r2, [r3, #16]
 8007ab0:	4b34      	ldr	r3, [pc, #208]	; (8007b84 <ManagementTask+0x304>)
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d91a      	bls.n	8007aec <ManagementTask+0x26c>
					if(storage.led_level)
 8007ab6:	4b2b      	ldr	r3, [pc, #172]	; (8007b64 <ManagementTask+0x2e4>)
 8007ab8:	223c      	movs	r2, #60	; 0x3c
 8007aba:	5c9b      	ldrb	r3, [r3, r2]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d0dd      	beq.n	8007a7c <ManagementTask+0x1fc>
						osMessagePut(ind_msg, IND_GREEN, osWaitForever);
 8007ac0:	2501      	movs	r5, #1
 8007ac2:	426d      	negs	r5, r5
 8007ac4:	4e25      	ldr	r6, [pc, #148]	; (8007b5c <ManagementTask+0x2dc>)
 8007ac6:	6830      	ldr	r0, [r6, #0]
 8007ac8:	002a      	movs	r2, r5
 8007aca:	2101      	movs	r1, #1
 8007acc:	f7fd fe1e 	bl	800570c <osMessagePut>
						osDelay(500);
 8007ad0:	24fa      	movs	r4, #250	; 0xfa
 8007ad2:	0064      	lsls	r4, r4, #1
 8007ad4:	0020      	movs	r0, r4
 8007ad6:	f7fd fd9c 	bl	8005612 <osDelay>
						osMessagePut(ind_msg, IND_OFF, osWaitForever);
 8007ada:	6830      	ldr	r0, [r6, #0]
 8007adc:	002a      	movs	r2, r5
 8007ade:	2100      	movs	r1, #0
 8007ae0:	f7fd fe14 	bl	800570c <osMessagePut>
						osDelay(500);
 8007ae4:	0020      	movs	r0, r4
 8007ae6:	f7fd fd94 	bl	8005612 <osDelay>
 8007aea:	e7da      	b.n	8007aa2 <ManagementTask+0x222>
						discharge_lock = 1;
 8007aec:	4b1a      	ldr	r3, [pc, #104]	; (8007b58 <ManagementTask+0x2d8>)
 8007aee:	2201      	movs	r2, #1
 8007af0:	701a      	strb	r2, [r3, #0]
				osMessagePut(led_msg, 0, osWaitForever);
 8007af2:	2401      	movs	r4, #1
 8007af4:	4264      	negs	r4, r4
 8007af6:	4b1f      	ldr	r3, [pc, #124]	; (8007b74 <ManagementTask+0x2f4>)
 8007af8:	6818      	ldr	r0, [r3, #0]
 8007afa:	0022      	movs	r2, r4
 8007afc:	2100      	movs	r1, #0
 8007afe:	f7fd fe05 	bl	800570c <osMessagePut>
				osMessagePut(ind_msg, IND_OFF, osWaitForever);
 8007b02:	4b16      	ldr	r3, [pc, #88]	; (8007b5c <ManagementTask+0x2dc>)
 8007b04:	6818      	ldr	r0, [r3, #0]
 8007b06:	0022      	movs	r2, r4
 8007b08:	2100      	movs	r1, #0
 8007b0a:	f7fd fdff 	bl	800570c <osMessagePut>
				eeprom_info.total_batt_ouput_ah = storage.total_batt_ouput_ah;
 8007b0e:	4c15      	ldr	r4, [pc, #84]	; (8007b64 <ManagementTask+0x2e4>)
 8007b10:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007b12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b14:	4812      	ldr	r0, [pc, #72]	; (8007b60 <ManagementTask+0x2e0>)
 8007b16:	6002      	str	r2, [r0, #0]
 8007b18:	6043      	str	r3, [r0, #4]
				eeprom_save(&eeprom_info);
 8007b1a:	f7ff fd4b 	bl	80075b4 <eeprom_save>
				if(storage.vbatt_mv > BATT_LOW_MV - 500)
 8007b1e:	6922      	ldr	r2, [r4, #16]
 8007b20:	4b19      	ldr	r3, [pc, #100]	; (8007b88 <ManagementTask+0x308>)
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d80a      	bhi.n	8007b3c <ManagementTask+0x2bc>
				battery_charged = 0;
 8007b26:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <ManagementTask+0x2d4>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	701a      	strb	r2, [r3, #0]
				storage.energy_stored_mah = 0;
 8007b2c:	4b0d      	ldr	r3, [pc, #52]	; (8007b64 <ManagementTask+0x2e4>)
 8007b2e:	2000      	movs	r0, #0
 8007b30:	2100      	movs	r1, #0
 8007b32:	6218      	str	r0, [r3, #32]
 8007b34:	6259      	str	r1, [r3, #36]	; 0x24
				storage.energy_released_mah = 0;
 8007b36:	6298      	str	r0, [r3, #40]	; 0x28
 8007b38:	62d9      	str	r1, [r3, #44]	; 0x2c
 8007b3a:	e6b9      	b.n	80078b0 <ManagementTask+0x30>
					for(i = 0; i < 5; i++)
 8007b3c:	2400      	movs	r4, #0
 8007b3e:	2c04      	cmp	r4, #4
 8007b40:	d8f1      	bhi.n	8007b26 <ManagementTask+0x2a6>
						sts = TelitCloudUpload();
 8007b42:	f000 fc93 	bl	800846c <TelitCloudUpload>
						if(sts == UPLOAD_OK)
 8007b46:	2800      	cmp	r0, #0
 8007b48:	d0ed      	beq.n	8007b26 <ManagementTask+0x2a6>
						if(sts == MODEM_NO_OPERATOR_PRESENT)
 8007b4a:	2808      	cmp	r0, #8
 8007b4c:	d0eb      	beq.n	8007b26 <ManagementTask+0x2a6>
					for(i = 0; i < 5; i++)
 8007b4e:	3401      	adds	r4, #1
 8007b50:	b2e4      	uxtb	r4, r4
 8007b52:	e7f4      	b.n	8007b3e <ManagementTask+0x2be>
 8007b54:	20002a98 	.word	0x20002a98
 8007b58:	20002a99 	.word	0x20002a99
 8007b5c:	200027b8 	.word	0x200027b8
 8007b60:	200027d0 	.word	0x200027d0
 8007b64:	20002fa8 	.word	0x20002fa8
 8007b68:	0000445c 	.word	0x0000445c
 8007b6c:	00001388 	.word	0x00001388
 8007b70:	0000445b 	.word	0x0000445b
 8007b74:	200027c0 	.word	0x200027c0
 8007b78:	00015180 	.word	0x00015180
 8007b7c:	20002ac4 	.word	0x20002ac4
 8007b80:	000003b6 	.word	0x000003b6
 8007b84:	0000270f 	.word	0x0000270f
 8007b88:	0000251c 	.word	0x0000251c

08007b8c <ContextDeactivation>:
    }
    return false;
}

static _Bool ContextDeactivation(void)
{
 8007b8c:	b510      	push	{r4, lr}
	char *result = NULL;
	result = SCP_SendCommandWaitAnswer("AT#SGACT=1,0\r\n", "OK", 1000, 1);
 8007b8e:	22fa      	movs	r2, #250	; 0xfa
 8007b90:	4905      	ldr	r1, [pc, #20]	; (8007ba8 <ContextDeactivation+0x1c>)
 8007b92:	4806      	ldr	r0, [pc, #24]	; (8007bac <ContextDeactivation+0x20>)
 8007b94:	2301      	movs	r3, #1
 8007b96:	0092      	lsls	r2, r2, #2
 8007b98:	f7ff f92e 	bl	8006df8 <SCP_SendCommandWaitAnswer>
	if(result)
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	d001      	beq.n	8007ba4 <ContextDeactivation+0x18>
	{
		return true;
 8007ba0:	2001      	movs	r0, #1
	}
	else return false;
}
 8007ba2:	bd10      	pop	{r4, pc}
	else return false;
 8007ba4:	2000      	movs	r0, #0
 8007ba6:	e7fc      	b.n	8007ba2 <ContextDeactivation+0x16>
 8007ba8:	0800dfd8 	.word	0x0800dfd8
 8007bac:	0800dfdc 	.word	0x0800dfdc

08007bb0 <ModemCloseTcpSocket>:
    return false;
}

/* Close socket */
static _Bool ModemCloseTcpSocket(void)
{
 8007bb0:	b570      	push	{r4, r5, r6, lr}
    char *result = NULL;
    /* Form close socket command */
    (void) SCP_SendCommandWaitAnswer("+++\r\n", "OK", 1000, 1);
 8007bb2:	25fa      	movs	r5, #250	; 0xfa
 8007bb4:	00ad      	lsls	r5, r5, #2
 8007bb6:	4c08      	ldr	r4, [pc, #32]	; (8007bd8 <ModemCloseTcpSocket+0x28>)
 8007bb8:	4808      	ldr	r0, [pc, #32]	; (8007bdc <ModemCloseTcpSocket+0x2c>)
 8007bba:	2301      	movs	r3, #1
 8007bbc:	002a      	movs	r2, r5
 8007bbe:	0021      	movs	r1, r4
 8007bc0:	f7ff f91a 	bl	8006df8 <SCP_SendCommandWaitAnswer>

    result = SCP_SendCommandWaitAnswer("AT#SH=1\r\n", "OK", 1000, 1);
 8007bc4:	4806      	ldr	r0, [pc, #24]	; (8007be0 <ModemCloseTcpSocket+0x30>)
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	002a      	movs	r2, r5
 8007bca:	0021      	movs	r1, r4
 8007bcc:	f7ff f914 	bl	8006df8 <SCP_SendCommandWaitAnswer>

    if(result)
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	d000      	beq.n	8007bd6 <ModemCloseTcpSocket+0x26>
    {
        return true;
 8007bd4:	2001      	movs	r0, #1
    }

    return false;
}
 8007bd6:	bd70      	pop	{r4, r5, r6, pc}
 8007bd8:	0800dfd8 	.word	0x0800dfd8
 8007bdc:	0800dfec 	.word	0x0800dfec
 8007be0:	0800dff4 	.word	0x0800dff4

08007be4 <GetIMEI>:
{
 8007be4:	b510      	push	{r4, lr}
    result = SCP_SendCommandWaitAnswer("AT+CGSN\r\n", "OK", 100, 1);
 8007be6:	491b      	ldr	r1, [pc, #108]	; (8007c54 <GetIMEI+0x70>)
 8007be8:	481b      	ldr	r0, [pc, #108]	; (8007c58 <GetIMEI+0x74>)
 8007bea:	2301      	movs	r3, #1
 8007bec:	2264      	movs	r2, #100	; 0x64
 8007bee:	f7ff f903 	bl	8006df8 <SCP_SendCommandWaitAnswer>
 8007bf2:	1e04      	subs	r4, r0, #0
    if(result)
 8007bf4:	d02a      	beq.n	8007c4c <GetIMEI+0x68>
    uint32_t j = 0, i=0;
 8007bf6:	2400      	movs	r4, #0
        while((j < strlen((char*)SCPHandler.RxBuffer)) && (!isDigit))
 8007bf8:	4818      	ldr	r0, [pc, #96]	; (8007c5c <GetIMEI+0x78>)
 8007bfa:	f7f8 fa85 	bl	8000108 <strlen>
 8007bfe:	42a0      	cmp	r0, r4
 8007c00:	d90d      	bls.n	8007c1e <GetIMEI+0x3a>
          if((SCPHandler.RxBuffer[j] > 47) && (SCPHandler.RxBuffer[j] < 58))
 8007c02:	4b17      	ldr	r3, [pc, #92]	; (8007c60 <GetIMEI+0x7c>)
 8007c04:	191b      	adds	r3, r3, r4
 8007c06:	7b1b      	ldrb	r3, [r3, #12]
 8007c08:	3b30      	subs	r3, #48	; 0x30
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	2b09      	cmp	r3, #9
 8007c0e:	d901      	bls.n	8007c14 <GetIMEI+0x30>
          j++;
 8007c10:	3401      	adds	r4, #1
 8007c12:	e7f1      	b.n	8007bf8 <GetIMEI+0x14>
              result = (char*)&SCPHandler.RxBuffer[j];
 8007c14:	3408      	adds	r4, #8
 8007c16:	4b12      	ldr	r3, [pc, #72]	; (8007c60 <GetIMEI+0x7c>)
 8007c18:	18e4      	adds	r4, r4, r3
 8007c1a:	3404      	adds	r4, #4
              break;
 8007c1c:	e000      	b.n	8007c20 <GetIMEI+0x3c>
        result = NULL;
 8007c1e:	2400      	movs	r4, #0
        if(result)
 8007c20:	2c00      	cmp	r4, #0
 8007c22:	d013      	beq.n	8007c4c <GetIMEI+0x68>
            memset(imei, 0x00, 16);
 8007c24:	480f      	ldr	r0, [pc, #60]	; (8007c64 <GetIMEI+0x80>)
 8007c26:	2210      	movs	r2, #16
 8007c28:	2100      	movs	r1, #0
 8007c2a:	f001 fb53 	bl	80092d4 <memset>
            for(i = 0; i < 15; i++)
 8007c2e:	2300      	movs	r3, #0
 8007c30:	2b0e      	cmp	r3, #14
 8007c32:	d80a      	bhi.n	8007c4a <GetIMEI+0x66>
                if(!(*result > 47 && *result < 58))
 8007c34:	7821      	ldrb	r1, [r4, #0]
 8007c36:	000a      	movs	r2, r1
 8007c38:	3a30      	subs	r2, #48	; 0x30
 8007c3a:	b2d2      	uxtb	r2, r2
 8007c3c:	2a09      	cmp	r2, #9
 8007c3e:	d807      	bhi.n	8007c50 <GetIMEI+0x6c>
                imei[i] = *result;
 8007c40:	4a08      	ldr	r2, [pc, #32]	; (8007c64 <GetIMEI+0x80>)
 8007c42:	54d1      	strb	r1, [r2, r3]
                result++;
 8007c44:	3401      	adds	r4, #1
            for(i = 0; i < 15; i++)
 8007c46:	3301      	adds	r3, #1
 8007c48:	e7f2      	b.n	8007c30 <GetIMEI+0x4c>
            return imei;
 8007c4a:	4c06      	ldr	r4, [pc, #24]	; (8007c64 <GetIMEI+0x80>)
}
 8007c4c:	0020      	movs	r0, r4
 8007c4e:	bd10      	pop	{r4, pc}
                    return NULL;
 8007c50:	2400      	movs	r4, #0
 8007c52:	e7fb      	b.n	8007c4c <GetIMEI+0x68>
 8007c54:	0800dfd8 	.word	0x0800dfd8
 8007c58:	0800e000 	.word	0x0800e000
 8007c5c:	20002054 	.word	0x20002054
 8007c60:	20002048 	.word	0x20002048
 8007c64:	20002ab4 	.word	0x20002ab4

08007c68 <GetID>:
{
 8007c68:	b510      	push	{r4, lr}
    result = SCP_SendCommandWaitAnswer("AT+CGMM\r\n", "OK", 100, 1);
 8007c6a:	4912      	ldr	r1, [pc, #72]	; (8007cb4 <GetID+0x4c>)
 8007c6c:	4812      	ldr	r0, [pc, #72]	; (8007cb8 <GetID+0x50>)
 8007c6e:	2301      	movs	r3, #1
 8007c70:	2264      	movs	r2, #100	; 0x64
 8007c72:	f7ff f8c1 	bl	8006df8 <SCP_SendCommandWaitAnswer>
    if(result)
 8007c76:	2800      	cmp	r0, #0
 8007c78:	d01b      	beq.n	8007cb2 <GetID+0x4a>
        result = strchr((char*)SCPHandler.RxBuffer, '\n');
 8007c7a:	4810      	ldr	r0, [pc, #64]	; (8007cbc <GetID+0x54>)
 8007c7c:	210a      	movs	r1, #10
 8007c7e:	f001 fb3e 	bl	80092fe <strchr>
        if(result)
 8007c82:	2800      	cmp	r0, #0
 8007c84:	d015      	beq.n	8007cb2 <GetID+0x4a>
            result++;
 8007c86:	1c44      	adds	r4, r0, #1
            memset(device_id, 0x00, 21);
 8007c88:	480d      	ldr	r0, [pc, #52]	; (8007cc0 <GetID+0x58>)
 8007c8a:	2215      	movs	r2, #21
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	f001 fb21 	bl	80092d4 <memset>
            for(uint8_t i = 0; i < 20; i++)
 8007c92:	2300      	movs	r3, #0
 8007c94:	2b13      	cmp	r3, #19
 8007c96:	d809      	bhi.n	8007cac <GetID+0x44>
                device_id[i] = *result;
 8007c98:	7821      	ldrb	r1, [r4, #0]
 8007c9a:	4a09      	ldr	r2, [pc, #36]	; (8007cc0 <GetID+0x58>)
 8007c9c:	54d1      	strb	r1, [r2, r3]
                result++;
 8007c9e:	3401      	adds	r4, #1
                if(*result == '\r')
 8007ca0:	7822      	ldrb	r2, [r4, #0]
 8007ca2:	2a0d      	cmp	r2, #13
 8007ca4:	d004      	beq.n	8007cb0 <GetID+0x48>
            for(uint8_t i = 0; i < 20; i++)
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	e7f3      	b.n	8007c94 <GetID+0x2c>
    return NULL;
 8007cac:	2000      	movs	r0, #0
 8007cae:	e000      	b.n	8007cb2 <GetID+0x4a>
                    return device_id;
 8007cb0:	4803      	ldr	r0, [pc, #12]	; (8007cc0 <GetID+0x58>)
}
 8007cb2:	bd10      	pop	{r4, pc}
 8007cb4:	0800dfd8 	.word	0x0800dfd8
 8007cb8:	0800e00c 	.word	0x0800e00c
 8007cbc:	20002054 	.word	0x20002054
 8007cc0:	20002a9c 	.word	0x20002a9c

08007cc4 <GetVersion>:
{
 8007cc4:	b510      	push	{r4, lr}
    result = SCP_SendCommandWaitAnswer("AT+CGMR\r\n", "OK", 100, 1);
 8007cc6:	4911      	ldr	r1, [pc, #68]	; (8007d0c <GetVersion+0x48>)
 8007cc8:	4811      	ldr	r0, [pc, #68]	; (8007d10 <GetVersion+0x4c>)
 8007cca:	2301      	movs	r3, #1
 8007ccc:	2264      	movs	r2, #100	; 0x64
 8007cce:	f7ff f893 	bl	8006df8 <SCP_SendCommandWaitAnswer>
    if(result)
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	d018      	beq.n	8007d08 <GetVersion+0x44>
        result = strchr((char*)SCPHandler.RxBuffer, '\n');
 8007cd6:	480f      	ldr	r0, [pc, #60]	; (8007d14 <GetVersion+0x50>)
 8007cd8:	210a      	movs	r1, #10
 8007cda:	f001 fb10 	bl	80092fe <strchr>
        if(result)
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	d012      	beq.n	8007d08 <GetVersion+0x44>
            result++;
 8007ce2:	1c44      	adds	r4, r0, #1
            memset(version, 0x00, 16);
 8007ce4:	480c      	ldr	r0, [pc, #48]	; (8007d18 <GetVersion+0x54>)
 8007ce6:	2210      	movs	r2, #16
 8007ce8:	2100      	movs	r1, #0
 8007cea:	f001 faf3 	bl	80092d4 <memset>
            for(i = 0; i < 15; i++)
 8007cee:	2300      	movs	r3, #0
 8007cf0:	e000      	b.n	8007cf4 <GetVersion+0x30>
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	2b0e      	cmp	r3, #14
 8007cf6:	d806      	bhi.n	8007d06 <GetVersion+0x42>
                version[i] = *result;
 8007cf8:	7821      	ldrb	r1, [r4, #0]
 8007cfa:	4a07      	ldr	r2, [pc, #28]	; (8007d18 <GetVersion+0x54>)
 8007cfc:	54d1      	strb	r1, [r2, r3]
                result++;
 8007cfe:	3401      	adds	r4, #1
                if(*result == '\r')
 8007d00:	7822      	ldrb	r2, [r4, #0]
 8007d02:	2a0d      	cmp	r2, #13
 8007d04:	d1f5      	bne.n	8007cf2 <GetVersion+0x2e>
            return version;
 8007d06:	4804      	ldr	r0, [pc, #16]	; (8007d18 <GetVersion+0x54>)
}
 8007d08:	bd10      	pop	{r4, pc}
 8007d0a:	46c0      	nop			; (mov r8, r8)
 8007d0c:	0800dfd8 	.word	0x0800dfd8
 8007d10:	0800e018 	.word	0x0800e018
 8007d14:	20002054 	.word	0x20002054
 8007d18:	20002f84 	.word	0x20002f84

08007d1c <ModemOpenTcpSocket>:
{
 8007d1c:	b570      	push	{r4, r5, r6, lr}
 8007d1e:	0006      	movs	r6, r0
 8007d20:	000d      	movs	r5, r1
    memset(post_buff, 0, sizeof(post_buff));
 8007d22:	4c0b      	ldr	r4, [pc, #44]	; (8007d50 <ModemOpenTcpSocket+0x34>)
 8007d24:	2280      	movs	r2, #128	; 0x80
 8007d26:	00d2      	lsls	r2, r2, #3
 8007d28:	2100      	movs	r1, #0
 8007d2a:	0020      	movs	r0, r4
 8007d2c:	f001 fad2 	bl	80092d4 <memset>
    sprintf(post_buff, "AT#SD=1,0,%d,\"%s\"\r", (int)port, pAddress);
 8007d30:	4908      	ldr	r1, [pc, #32]	; (8007d54 <ModemOpenTcpSocket+0x38>)
 8007d32:	0033      	movs	r3, r6
 8007d34:	002a      	movs	r2, r5
 8007d36:	0020      	movs	r0, r4
 8007d38:	f001 fa52 	bl	80091e0 <sprintf>
    result = SCP_SendCommandWaitAnswer(post_buff, "CONNECT", 15000, 1);
 8007d3c:	4906      	ldr	r1, [pc, #24]	; (8007d58 <ModemOpenTcpSocket+0x3c>)
 8007d3e:	2301      	movs	r3, #1
 8007d40:	4a06      	ldr	r2, [pc, #24]	; (8007d5c <ModemOpenTcpSocket+0x40>)
 8007d42:	0020      	movs	r0, r4
 8007d44:	f7ff f858 	bl	8006df8 <SCP_SendCommandWaitAnswer>
    if(result)
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	d000      	beq.n	8007d4e <ModemOpenTcpSocket+0x32>
        return true;
 8007d4c:	2001      	movs	r0, #1
}
 8007d4e:	bd70      	pop	{r4, r5, r6, pc}
 8007d50:	20002b44 	.word	0x20002b44
 8007d54:	0800e024 	.word	0x0800e024
 8007d58:	0800e038 	.word	0x0800e038
 8007d5c:	00003a98 	.word	0x00003a98

08007d60 <SetLED>:
{
 8007d60:	b510      	push	{r4, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	0004      	movs	r4, r0
    memset(led_buff, 0, sizeof(led_buff));
 8007d66:	2210      	movs	r2, #16
 8007d68:	2100      	movs	r1, #0
 8007d6a:	4668      	mov	r0, sp
 8007d6c:	f001 fab2 	bl	80092d4 <memset>
    sprintf(led_buff, "AT#GPIO=8,%d,1\r\n",state);
 8007d70:	4906      	ldr	r1, [pc, #24]	; (8007d8c <SetLED+0x2c>)
 8007d72:	0022      	movs	r2, r4
 8007d74:	4668      	mov	r0, sp
 8007d76:	f001 fa33 	bl	80091e0 <sprintf>
    result = SCP_SendCommandWaitAnswer(led_buff, "OK", 2000, 1);
 8007d7a:	22fa      	movs	r2, #250	; 0xfa
 8007d7c:	4904      	ldr	r1, [pc, #16]	; (8007d90 <SetLED+0x30>)
 8007d7e:	2301      	movs	r3, #1
 8007d80:	00d2      	lsls	r2, r2, #3
 8007d82:	4668      	mov	r0, sp
 8007d84:	f7ff f838 	bl	8006df8 <SCP_SendCommandWaitAnswer>
}
 8007d88:	b004      	add	sp, #16
 8007d8a:	bd10      	pop	{r4, pc}
 8007d8c:	0800e040 	.word	0x0800e040
 8007d90:	0800dfd8 	.word	0x0800dfd8

08007d94 <TelitPortalPostData>:
    return false;
}

/*Post data to Telit cloud*/
static _Bool TelitPortalPostData()
{
 8007d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d96:	46ce      	mov	lr, r9
 8007d98:	4647      	mov	r7, r8
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	4c65      	ldr	r4, [pc, #404]	; (8007f34 <TelitPortalPostData+0x1a0>)
 8007d9e:	44a5      	add	sp, r4
	char *result = NULL;
	char local_buff[1024];
  
	memset(post_buff, 0, sizeof(post_buff));
 8007da0:	4c65      	ldr	r4, [pc, #404]	; (8007f38 <TelitPortalPostData+0x1a4>)
 8007da2:	2580      	movs	r5, #128	; 0x80
 8007da4:	00ed      	lsls	r5, r5, #3
 8007da6:	002a      	movs	r2, r5
 8007da8:	2100      	movs	r1, #0
 8007daa:	0020      	movs	r0, r4
 8007dac:	f001 fa92 	bl	80092d4 <memset>
	memset(local_buff, 0, sizeof(local_buff));
 8007db0:	002a      	movs	r2, r5
 8007db2:	2100      	movs	r1, #0
 8007db4:	4668      	mov	r0, sp
 8007db6:	f001 fa8d 	bl	80092d4 <memset>
	memset(post_length, 0, sizeof(post_length));
 8007dba:	4e60      	ldr	r6, [pc, #384]	; (8007f3c <TelitPortalPostData+0x1a8>)
 8007dbc:	2210      	movs	r2, #16
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	0030      	movs	r0, r6
 8007dc2:	f001 fa87 	bl	80092d4 <memset>
  
	/*Reset rx buffer for data reception*/
	SCP_InitRx();
 8007dc6:	f7ff f85b 	bl	8006e80 <SCP_InitRx>
  
	/* Generate the JSON Object */
	memset(post_buff, 0, sizeof(post_buff));
 8007dca:	002a      	movs	r2, r5
 8007dcc:	2100      	movs	r1, #0
 8007dce:	0020      	movs	r0, r4
 8007dd0:	f001 fa80 	bl	80092d4 <memset>
	sprintf((char *)post_buff, fcmd_dw_post_auth, telit_sessionId);
 8007dd4:	4a5a      	ldr	r2, [pc, #360]	; (8007f40 <TelitPortalPostData+0x1ac>)
 8007dd6:	495b      	ldr	r1, [pc, #364]	; (8007f44 <TelitPortalPostData+0x1b0>)
 8007dd8:	0020      	movs	r0, r4
 8007dda:	f001 fa01 	bl	80091e0 <sprintf>
	strcat(local_buff,post_buff);
 8007dde:	0021      	movs	r1, r4
 8007de0:	4668      	mov	r0, sp
 8007de2:	f001 fa7f 	bl	80092e4 <strcat>

	memset(post_buff, 0, sizeof(post_buff));
 8007de6:	002a      	movs	r2, r5
 8007de8:	2100      	movs	r1, #0
 8007dea:	0020      	movs	r0, r4
 8007dec:	f001 fa72 	bl	80092d4 <memset>
	sprintf((char *)post_buff, fcmd_dw_post_p1, modem_data.imei, (int)storage.energy_stored_mah);
 8007df0:	4b55      	ldr	r3, [pc, #340]	; (8007f48 <TelitPortalPostData+0x1b4>)
 8007df2:	4698      	mov	r8, r3
 8007df4:	6a18      	ldr	r0, [r3, #32]
 8007df6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007df8:	f7fa fc22 	bl	8002640 <__aeabi_d2iz>
 8007dfc:	0003      	movs	r3, r0
 8007dfe:	4a53      	ldr	r2, [pc, #332]	; (8007f4c <TelitPortalPostData+0x1b8>)
 8007e00:	4691      	mov	r9, r2
 8007e02:	0017      	movs	r7, r2
 8007e04:	3721      	adds	r7, #33	; 0x21
 8007e06:	4952      	ldr	r1, [pc, #328]	; (8007f50 <TelitPortalPostData+0x1bc>)
 8007e08:	003a      	movs	r2, r7
 8007e0a:	0020      	movs	r0, r4
 8007e0c:	f001 f9e8 	bl	80091e0 <sprintf>
	strcat(local_buff,post_buff);
 8007e10:	0021      	movs	r1, r4
 8007e12:	4668      	mov	r0, sp
 8007e14:	f001 fa66 	bl	80092e4 <strcat>

	memset(post_buff, 0, sizeof(post_buff));
 8007e18:	002a      	movs	r2, r5
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	0020      	movs	r0, r4
 8007e1e:	f001 fa59 	bl	80092d4 <memset>
	sprintf((char *)post_buff, fcmd_dw_post_p2, modem_data.imei, (int)storage.energy_released_mah);
 8007e22:	4643      	mov	r3, r8
 8007e24:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007e26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007e28:	f7fa fc0a 	bl	8002640 <__aeabi_d2iz>
 8007e2c:	0003      	movs	r3, r0
 8007e2e:	4949      	ldr	r1, [pc, #292]	; (8007f54 <TelitPortalPostData+0x1c0>)
 8007e30:	003a      	movs	r2, r7
 8007e32:	0020      	movs	r0, r4
 8007e34:	f001 f9d4 	bl	80091e0 <sprintf>
	strcat(local_buff,post_buff);
 8007e38:	0021      	movs	r1, r4
 8007e3a:	4668      	mov	r0, sp
 8007e3c:	f001 fa52 	bl	80092e4 <strcat>

	memset(post_buff, 0, sizeof(post_buff));
 8007e40:	002a      	movs	r2, r5
 8007e42:	2100      	movs	r1, #0
 8007e44:	0020      	movs	r0, r4
 8007e46:	f001 fa45 	bl	80092d4 <memset>
	sprintf((char *)post_buff, fcmd_dw_post_p3, modem_data.imei, (int)modem_data.day_lenght_store);
 8007e4a:	464b      	mov	r3, r9
 8007e4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e4e:	4942      	ldr	r1, [pc, #264]	; (8007f58 <TelitPortalPostData+0x1c4>)
 8007e50:	003a      	movs	r2, r7
 8007e52:	0020      	movs	r0, r4
 8007e54:	f001 f9c4 	bl	80091e0 <sprintf>
	strcat(local_buff,post_buff);
 8007e58:	0021      	movs	r1, r4
 8007e5a:	4668      	mov	r0, sp
 8007e5c:	f001 fa42 	bl	80092e4 <strcat>

	memset(post_buff, 0, sizeof(post_buff));
 8007e60:	002a      	movs	r2, r5
 8007e62:	2100      	movs	r1, #0
 8007e64:	0020      	movs	r0, r4
 8007e66:	f001 fa35 	bl	80092d4 <memset>
	sprintf((char *)post_buff, fcmd_dw_post_p4, modem_data.imei, (int)storage.total_batt_ouput_ah);
 8007e6a:	4643      	mov	r3, r8
 8007e6c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007e6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007e70:	f7fa fbe6 	bl	8002640 <__aeabi_d2iz>
 8007e74:	0003      	movs	r3, r0
 8007e76:	4939      	ldr	r1, [pc, #228]	; (8007f5c <TelitPortalPostData+0x1c8>)
 8007e78:	003a      	movs	r2, r7
 8007e7a:	0020      	movs	r0, r4
 8007e7c:	f001 f9b0 	bl	80091e0 <sprintf>
	strcat(local_buff,post_buff);
 8007e80:	0021      	movs	r1, r4
 8007e82:	4668      	mov	r0, sp
 8007e84:	f001 fa2e 	bl	80092e4 <strcat>

	memset(post_buff, 0, sizeof(post_buff));
 8007e88:	002a      	movs	r2, r5
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	0020      	movs	r0, r4
 8007e8e:	f001 fa21 	bl	80092d4 <memset>
	sprintf((char *)post_buff, fcmd_dw_post_p5, modem_data.imei, (int)storage.vbatt_mv);
 8007e92:	4643      	mov	r3, r8
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	4932      	ldr	r1, [pc, #200]	; (8007f60 <TelitPortalPostData+0x1cc>)
 8007e98:	003a      	movs	r2, r7
 8007e9a:	0020      	movs	r0, r4
 8007e9c:	f001 f9a0 	bl	80091e0 <sprintf>
	strcat(local_buff,post_buff);
 8007ea0:	0021      	movs	r1, r4
 8007ea2:	4668      	mov	r0, sp
 8007ea4:	f001 fa1e 	bl	80092e4 <strcat>

	/*Generate HTTP post*/
	memset(post_buff, 0, sizeof(post_buff));
 8007ea8:	002a      	movs	r2, r5
 8007eaa:	2100      	movs	r1, #0
 8007eac:	0020      	movs	r0, r4
 8007eae:	f001 fa11 	bl	80092d4 <memset>
	sprintf(post_buff, (char *)fcmd_HTTPPOST);
 8007eb2:	492c      	ldr	r1, [pc, #176]	; (8007f64 <TelitPortalPostData+0x1d0>)
 8007eb4:	2261      	movs	r2, #97	; 0x61
 8007eb6:	0020      	movs	r0, r4
 8007eb8:	f001 fad5 	bl	8009466 <memcpy>
	sprintf(post_length, "%d\r\n\r\n", strlen(local_buff));
 8007ebc:	4668      	mov	r0, sp
 8007ebe:	f7f8 f923 	bl	8000108 <strlen>
 8007ec2:	0002      	movs	r2, r0
 8007ec4:	4928      	ldr	r1, [pc, #160]	; (8007f68 <TelitPortalPostData+0x1d4>)
 8007ec6:	0030      	movs	r0, r6
 8007ec8:	f001 f98a 	bl	80091e0 <sprintf>
	strcat(post_buff,post_length);
 8007ecc:	0031      	movs	r1, r6
 8007ece:	0020      	movs	r0, r4
 8007ed0:	f001 fa08 	bl	80092e4 <strcat>
	strcat(post_buff,local_buff);
 8007ed4:	4669      	mov	r1, sp
 8007ed6:	0020      	movs	r0, r4
 8007ed8:	f001 fa04 	bl	80092e4 <strcat>
	strcat(post_buff,"\r\n");
 8007edc:	0020      	movs	r0, r4
 8007ede:	f7f8 f913 	bl	8000108 <strlen>
 8007ee2:	1820      	adds	r0, r4, r0
 8007ee4:	4921      	ldr	r1, [pc, #132]	; (8007f6c <TelitPortalPostData+0x1d8>)
 8007ee6:	2203      	movs	r2, #3
 8007ee8:	f001 fabd 	bl	8009466 <memcpy>

	/* Send HTTP POST data */
	SCP_SendData((char *)post_buff, strlen(post_buff));
 8007eec:	0020      	movs	r0, r4
 8007eee:	f7f8 f90b 	bl	8000108 <strlen>
 8007ef2:	0001      	movs	r1, r0
 8007ef4:	0020      	movs	r0, r4
 8007ef6:	f7fe ffeb 	bl	8006ed0 <SCP_SendData>
	vTaskDelay(pdMS_TO_TICKS(1000));
 8007efa:	20fa      	movs	r0, #250	; 0xfa
 8007efc:	0080      	lsls	r0, r0, #2
 8007efe:	f7fe fab1 	bl	8006464 <vTaskDelay>

	/*Look for the ending of the JSON object*/
	result = SCP_WaitForAnswer("}}", 60000);
 8007f02:	481b      	ldr	r0, [pc, #108]	; (8007f70 <TelitPortalPostData+0x1dc>)
 8007f04:	491b      	ldr	r1, [pc, #108]	; (8007f74 <TelitPortalPostData+0x1e0>)
 8007f06:	f7fe ffed 	bl	8006ee4 <SCP_WaitForAnswer>
	if (result)
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	d005      	beq.n	8007f1a <TelitPortalPostData+0x186>
	{
		/* We should wait for the server to shut down the connection */
		result = NULL;
		result = SCP_WaitForAnswer("NO CARRIER", 30000);
 8007f0e:	481a      	ldr	r0, [pc, #104]	; (8007f78 <TelitPortalPostData+0x1e4>)
 8007f10:	491a      	ldr	r1, [pc, #104]	; (8007f7c <TelitPortalPostData+0x1e8>)
 8007f12:	f7fe ffe7 	bl	8006ee4 <SCP_WaitForAnswer>
		if(result)
 8007f16:	2800      	cmp	r0, #0
 8007f18:	d108      	bne.n	8007f2c <TelitPortalPostData+0x198>
			return true;
		}
	}

	/*Timeout. In case of error, no }} received*/
	ModemCloseTcpSocket();
 8007f1a:	f7ff fe49 	bl	8007bb0 <ModemCloseTcpSocket>
	return false;
 8007f1e:	2000      	movs	r0, #0
}
 8007f20:	4b17      	ldr	r3, [pc, #92]	; (8007f80 <TelitPortalPostData+0x1ec>)
 8007f22:	449d      	add	sp, r3
 8007f24:	bcc0      	pop	{r6, r7}
 8007f26:	46b9      	mov	r9, r7
 8007f28:	46b0      	mov	r8, r6
 8007f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ModemCloseTcpSocket();
 8007f2c:	f7ff fe40 	bl	8007bb0 <ModemCloseTcpSocket>
			return true;
 8007f30:	2001      	movs	r0, #1
 8007f32:	e7f5      	b.n	8007f20 <TelitPortalPostData+0x18c>
 8007f34:	fffffbfc 	.word	0xfffffbfc
 8007f38:	20002b44 	.word	0x20002b44
 8007f3c:	20002f44 	.word	0x20002f44
 8007f40:	20002f54 	.word	0x20002f54
 8007f44:	0800e298 	.word	0x0800e298
 8007f48:	20002fa8 	.word	0x20002fa8
 8007f4c:	20002ac4 	.word	0x20002ac4
 8007f50:	0800e2b4 	.word	0x0800e2b4
 8007f54:	0800e310 	.word	0x0800e310
 8007f58:	0800e370 	.word	0x0800e370
 8007f5c:	0800e3c8 	.word	0x0800e3c8
 8007f60:	0800e428 	.word	0x0800e428
 8007f64:	0800e1d0 	.word	0x0800e1d0
 8007f68:	0800e054 	.word	0x0800e054
 8007f6c:	0800e058 	.word	0x0800e058
 8007f70:	0800e05c 	.word	0x0800e05c
 8007f74:	0000ea60 	.word	0x0000ea60
 8007f78:	0800e060 	.word	0x0800e060
 8007f7c:	00007530 	.word	0x00007530
 8007f80:	00000404 	.word	0x00000404

08007f84 <TelitPortalAuthenticate>:
{
 8007f84:	b530      	push	{r4, r5, lr}
 8007f86:	4c38      	ldr	r4, [pc, #224]	; (8008068 <TelitPortalAuthenticate+0xe4>)
 8007f88:	44a5      	add	sp, r4
    memset(post_buff, 0, sizeof(post_buff));
 8007f8a:	4c38      	ldr	r4, [pc, #224]	; (800806c <TelitPortalAuthenticate+0xe8>)
 8007f8c:	2580      	movs	r5, #128	; 0x80
 8007f8e:	00ed      	lsls	r5, r5, #3
 8007f90:	002a      	movs	r2, r5
 8007f92:	2100      	movs	r1, #0
 8007f94:	0020      	movs	r0, r4
 8007f96:	f001 f99d 	bl	80092d4 <memset>
    memset(local_buff, 0, sizeof(local_buff));
 8007f9a:	002a      	movs	r2, r5
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	a802      	add	r0, sp, #8
 8007fa0:	f001 f998 	bl	80092d4 <memset>
    memset(post_length, 0, sizeof(post_length));
 8007fa4:	4d32      	ldr	r5, [pc, #200]	; (8008070 <TelitPortalAuthenticate+0xec>)
 8007fa6:	2210      	movs	r2, #16
 8007fa8:	2100      	movs	r1, #0
 8007faa:	0028      	movs	r0, r5
 8007fac:	f001 f992 	bl	80092d4 <memset>
    memset(telit_sessionId, 0, sizeof(telit_sessionId));
 8007fb0:	4830      	ldr	r0, [pc, #192]	; (8008074 <TelitPortalAuthenticate+0xf0>)
 8007fb2:	2230      	movs	r2, #48	; 0x30
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	f001 f98d 	bl	80092d4 <memset>
    sprintf(local_buff, fcmd_dW_auth, telit_appToken, telit_appID, modem_data.imei);
 8007fba:	4b2f      	ldr	r3, [pc, #188]	; (8008078 <TelitPortalAuthenticate+0xf4>)
 8007fbc:	4a2f      	ldr	r2, [pc, #188]	; (800807c <TelitPortalAuthenticate+0xf8>)
 8007fbe:	4930      	ldr	r1, [pc, #192]	; (8008080 <TelitPortalAuthenticate+0xfc>)
 8007fc0:	4830      	ldr	r0, [pc, #192]	; (8008084 <TelitPortalAuthenticate+0x100>)
 8007fc2:	3021      	adds	r0, #33	; 0x21
 8007fc4:	9000      	str	r0, [sp, #0]
 8007fc6:	a802      	add	r0, sp, #8
 8007fc8:	f001 f90a 	bl	80091e0 <sprintf>
    sprintf(post_length, "%d\r\n\r\n", strlen(local_buff));
 8007fcc:	a802      	add	r0, sp, #8
 8007fce:	f7f8 f89b 	bl	8000108 <strlen>
 8007fd2:	0002      	movs	r2, r0
 8007fd4:	492c      	ldr	r1, [pc, #176]	; (8008088 <TelitPortalAuthenticate+0x104>)
 8007fd6:	0028      	movs	r0, r5
 8007fd8:	f001 f902 	bl	80091e0 <sprintf>
    sprintf(post_buff, (char *)fcmd_HTTPPOST);
 8007fdc:	492b      	ldr	r1, [pc, #172]	; (800808c <TelitPortalAuthenticate+0x108>)
 8007fde:	2261      	movs	r2, #97	; 0x61
 8007fe0:	0020      	movs	r0, r4
 8007fe2:	f001 fa40 	bl	8009466 <memcpy>
    strcat(post_buff,post_length);
 8007fe6:	0029      	movs	r1, r5
 8007fe8:	0020      	movs	r0, r4
 8007fea:	f001 f97b 	bl	80092e4 <strcat>
    strcat(post_buff,local_buff);
 8007fee:	a902      	add	r1, sp, #8
 8007ff0:	0020      	movs	r0, r4
 8007ff2:	f001 f977 	bl	80092e4 <strcat>
    strcat(post_buff,"\r\n");
 8007ff6:	0020      	movs	r0, r4
 8007ff8:	f7f8 f886 	bl	8000108 <strlen>
 8007ffc:	1820      	adds	r0, r4, r0
 8007ffe:	4924      	ldr	r1, [pc, #144]	; (8008090 <TelitPortalAuthenticate+0x10c>)
 8008000:	2203      	movs	r2, #3
 8008002:	f001 fa30 	bl	8009466 <memcpy>
    SCP_InitRx();
 8008006:	f7fe ff3b 	bl	8006e80 <SCP_InitRx>
    SCP_SendData(post_buff, strlen(post_buff));
 800800a:	0020      	movs	r0, r4
 800800c:	f7f8 f87c 	bl	8000108 <strlen>
 8008010:	0001      	movs	r1, r0
 8008012:	0020      	movs	r0, r4
 8008014:	f7fe ff5c 	bl	8006ed0 <SCP_SendData>
    result = SCP_WaitForAnswer("}}}", 60000);
 8008018:	481e      	ldr	r0, [pc, #120]	; (8008094 <TelitPortalAuthenticate+0x110>)
 800801a:	491f      	ldr	r1, [pc, #124]	; (8008098 <TelitPortalAuthenticate+0x114>)
 800801c:	f7fe ff62 	bl	8006ee4 <SCP_WaitForAnswer>
    if (result)
 8008020:	2800      	cmp	r0, #0
 8008022:	d017      	beq.n	8008054 <TelitPortalAuthenticate+0xd0>
        result = strstr((char*)SCPHandler.RxBuffer, "sessionId\":\"");
 8008024:	491d      	ldr	r1, [pc, #116]	; (800809c <TelitPortalAuthenticate+0x118>)
 8008026:	481e      	ldr	r0, [pc, #120]	; (80080a0 <TelitPortalAuthenticate+0x11c>)
 8008028:	f001 f977 	bl	800931a <strstr>
        if(result)
 800802c:	2800      	cmp	r0, #0
 800802e:	d011      	beq.n	8008054 <TelitPortalAuthenticate+0xd0>
            result += strlen("sessionId\":\"");
 8008030:	300c      	adds	r0, #12
    int i = 0;
 8008032:	2200      	movs	r2, #0
            while ((*result != '\"')&& (*result != 0))
 8008034:	e003      	b.n	800803e <TelitPortalAuthenticate+0xba>
                telit_sessionId[i++]=*(result++);
 8008036:	3001      	adds	r0, #1
 8008038:	490e      	ldr	r1, [pc, #56]	; (8008074 <TelitPortalAuthenticate+0xf0>)
 800803a:	548b      	strb	r3, [r1, r2]
 800803c:	3201      	adds	r2, #1
            while ((*result != '\"')&& (*result != 0))
 800803e:	7803      	ldrb	r3, [r0, #0]
 8008040:	2b22      	cmp	r3, #34	; 0x22
 8008042:	d001      	beq.n	8008048 <TelitPortalAuthenticate+0xc4>
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1f6      	bne.n	8008036 <TelitPortalAuthenticate+0xb2>
            result = SCP_WaitForAnswer("NO CARRIER", 30000);
 8008048:	4816      	ldr	r0, [pc, #88]	; (80080a4 <TelitPortalAuthenticate+0x120>)
 800804a:	4917      	ldr	r1, [pc, #92]	; (80080a8 <TelitPortalAuthenticate+0x124>)
 800804c:	f7fe ff4a 	bl	8006ee4 <SCP_WaitForAnswer>
            if(result)
 8008050:	2800      	cmp	r0, #0
 8008052:	d105      	bne.n	8008060 <TelitPortalAuthenticate+0xdc>
    ModemCloseTcpSocket();
 8008054:	f7ff fdac 	bl	8007bb0 <ModemCloseTcpSocket>
    return false;
 8008058:	2000      	movs	r0, #0
}
 800805a:	4b14      	ldr	r3, [pc, #80]	; (80080ac <TelitPortalAuthenticate+0x128>)
 800805c:	449d      	add	sp, r3
 800805e:	bd30      	pop	{r4, r5, pc}
                ModemCloseTcpSocket();
 8008060:	f7ff fda6 	bl	8007bb0 <ModemCloseTcpSocket>
                return true;
 8008064:	2001      	movs	r0, #1
 8008066:	e7f8      	b.n	800805a <TelitPortalAuthenticate+0xd6>
 8008068:	fffffbf4 	.word	0xfffffbf4
 800806c:	20002b44 	.word	0x20002b44
 8008070:	20002f44 	.word	0x20002f44
 8008074:	20002f54 	.word	0x20002f54
 8008078:	0800e484 	.word	0x0800e484
 800807c:	0800e4a0 	.word	0x0800e4a0
 8008080:	0800e234 	.word	0x0800e234
 8008084:	20002ac4 	.word	0x20002ac4
 8008088:	0800e054 	.word	0x0800e054
 800808c:	0800e1d0 	.word	0x0800e1d0
 8008090:	0800e058 	.word	0x0800e058
 8008094:	0800e06c 	.word	0x0800e06c
 8008098:	0000ea60 	.word	0x0000ea60
 800809c:	0800e070 	.word	0x0800e070
 80080a0:	20002054 	.word	0x20002054
 80080a4:	0800e060 	.word	0x0800e060
 80080a8:	00007530 	.word	0x00007530
 80080ac:	0000040c 	.word	0x0000040c

080080b0 <memmem>:
{
 80080b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080b2:	0004      	movs	r4, r0
 80080b4:	0016      	movs	r6, r2
 80080b6:	1e1f      	subs	r7, r3, #0
	if (s_len == 0)
 80080b8:	d01d      	beq.n	80080f6 <memmem+0x46>
	if (l_len < s_len)
 80080ba:	428b      	cmp	r3, r1
 80080bc:	d81c      	bhi.n	80080f8 <memmem+0x48>
	if (s_len == 1)
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d002      	beq.n	80080c8 <memmem+0x18>
	last = cl + l_len - s_len;
 80080c2:	1acd      	subs	r5, r1, r3
 80080c4:	1945      	adds	r5, r0, r5
	for (cur = cl; cur <= last; cur++)
 80080c6:	e006      	b.n	80080d6 <memmem+0x26>
		return memchr(l, *cs, l_len);
 80080c8:	7813      	ldrb	r3, [r2, #0]
 80080ca:	000a      	movs	r2, r1
 80080cc:	0019      	movs	r1, r3
 80080ce:	f001 f9bf 	bl	8009450 <memchr>
 80080d2:	e010      	b.n	80080f6 <memmem+0x46>
	for (cur = cl; cur <= last; cur++)
 80080d4:	3401      	adds	r4, #1
 80080d6:	42ac      	cmp	r4, r5
 80080d8:	d80c      	bhi.n	80080f4 <memmem+0x44>
		if (cur[0] == cs[0] && memcmp(cur, cs, s_len) == 0)
 80080da:	7821      	ldrb	r1, [r4, #0]
 80080dc:	7830      	ldrb	r0, [r6, #0]
 80080de:	4281      	cmp	r1, r0
 80080e0:	d1f8      	bne.n	80080d4 <memmem+0x24>
 80080e2:	003a      	movs	r2, r7
 80080e4:	0031      	movs	r1, r6
 80080e6:	0020      	movs	r0, r4
 80080e8:	f001 f8e6 	bl	80092b8 <memcmp>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	d1f1      	bne.n	80080d4 <memmem+0x24>
			return (void *)cur;
 80080f0:	0020      	movs	r0, r4
 80080f2:	e000      	b.n	80080f6 <memmem+0x46>
	return NULL;
 80080f4:	2000      	movs	r0, #0
}
 80080f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
 80080f8:	2000      	movs	r0, #0
 80080fa:	e7fc      	b.n	80080f6 <memmem+0x46>

080080fc <SignalQuality>:
{
 80080fc:	b510      	push	{r4, lr}
    result = SCP_SendCommandWaitAnswer("AT+CSQ\r\n", "OK", 2000, 1);
 80080fe:	22fa      	movs	r2, #250	; 0xfa
 8008100:	490c      	ldr	r1, [pc, #48]	; (8008134 <SignalQuality+0x38>)
 8008102:	480d      	ldr	r0, [pc, #52]	; (8008138 <SignalQuality+0x3c>)
 8008104:	2301      	movs	r3, #1
 8008106:	00d2      	lsls	r2, r2, #3
 8008108:	f7fe fe76 	bl	8006df8 <SCP_SendCommandWaitAnswer>
    if(result)
 800810c:	2800      	cmp	r0, #0
 800810e:	d00c      	beq.n	800812a <SignalQuality+0x2e>
        result = memmem((char*)SCPHandler.RxBuffer, CMD_BUFF_LENGTH, "+CSQ:", sizeof("+CSQ:")-1);
 8008110:	4a0a      	ldr	r2, [pc, #40]	; (800813c <SignalQuality+0x40>)
 8008112:	2180      	movs	r1, #128	; 0x80
 8008114:	480a      	ldr	r0, [pc, #40]	; (8008140 <SignalQuality+0x44>)
 8008116:	2305      	movs	r3, #5
 8008118:	00c9      	lsls	r1, r1, #3
 800811a:	f7ff ffc9 	bl	80080b0 <memmem>
        if(result)
 800811e:	2800      	cmp	r0, #0
 8008120:	d005      	beq.n	800812e <SignalQuality+0x32>
            result += 6;
 8008122:	3006      	adds	r0, #6
            signal_level = atoi(result);
 8008124:	f000 feff 	bl	8008f26 <atoi>
}
 8008128:	bd10      	pop	{r4, pc}
        return 0;
 800812a:	2000      	movs	r0, #0
 800812c:	e7fc      	b.n	8008128 <SignalQuality+0x2c>
    int32_t signal_level = 0;
 800812e:	2000      	movs	r0, #0
 8008130:	e7fa      	b.n	8008128 <SignalQuality+0x2c>
 8008132:	46c0      	nop			; (mov r8, r8)
 8008134:	0800dfd8 	.word	0x0800dfd8
 8008138:	0800e080 	.word	0x0800e080
 800813c:	0800e08c 	.word	0x0800e08c
 8008140:	20002054 	.word	0x20002054

08008144 <NetworkRegistrationCheck>:
{
 8008144:	b570      	push	{r4, r5, r6, lr}
    result = SCP_SendCommandWaitAnswer("AT+COPS?\r\n", "OK", 500, 1);
 8008146:	22fa      	movs	r2, #250	; 0xfa
 8008148:	4933      	ldr	r1, [pc, #204]	; (8008218 <NetworkRegistrationCheck+0xd4>)
 800814a:	4834      	ldr	r0, [pc, #208]	; (800821c <NetworkRegistrationCheck+0xd8>)
 800814c:	2301      	movs	r3, #1
 800814e:	0052      	lsls	r2, r2, #1
 8008150:	f7fe fe52 	bl	8006df8 <SCP_SendCommandWaitAnswer>
 8008154:	0004      	movs	r4, r0
    vTaskDelay(pdMS_TO_TICKS(100));
 8008156:	2064      	movs	r0, #100	; 0x64
 8008158:	f7fe f984 	bl	8006464 <vTaskDelay>
    if(result)
 800815c:	2c00      	cmp	r4, #0
 800815e:	d033      	beq.n	80081c8 <NetworkRegistrationCheck+0x84>
        result = memmem((char*)SCPHandler.RxBuffer, CMD_BUFF_LENGTH, "+COPS:", sizeof("+COPS:")-1);
 8008160:	4a2f      	ldr	r2, [pc, #188]	; (8008220 <NetworkRegistrationCheck+0xdc>)
 8008162:	2180      	movs	r1, #128	; 0x80
 8008164:	482f      	ldr	r0, [pc, #188]	; (8008224 <NetworkRegistrationCheck+0xe0>)
 8008166:	2306      	movs	r3, #6
 8008168:	00c9      	lsls	r1, r1, #3
 800816a:	f7ff ffa1 	bl	80080b0 <memmem>
        for(i = 0; i < 3; i++)
 800816e:	2400      	movs	r4, #0
 8008170:	e002      	b.n	8008178 <NetworkRegistrationCheck+0x34>
            result++;
 8008172:	3001      	adds	r0, #1
        for(i = 0; i < 3; i++)
 8008174:	3401      	adds	r4, #1
 8008176:	b2e4      	uxtb	r4, r4
 8008178:	2c02      	cmp	r4, #2
 800817a:	d806      	bhi.n	800818a <NetworkRegistrationCheck+0x46>
        	result = strchr(result, ',');
 800817c:	212c      	movs	r1, #44	; 0x2c
 800817e:	f001 f8be 	bl	80092fe <strchr>
            if(!result)
 8008182:	2800      	cmp	r0, #0
 8008184:	d1f5      	bne.n	8008172 <NetworkRegistrationCheck+0x2e>
            	return 0;
 8008186:	2400      	movs	r4, #0
 8008188:	e024      	b.n	80081d4 <NetworkRegistrationCheck+0x90>
        ntwrk_stat = atoi(result);
 800818a:	f000 fecc 	bl	8008f26 <atoi>
 800818e:	1e04      	subs	r4, r0, #0
    if(ntwrk_stat == 0)
 8008190:	d11c      	bne.n	80081cc <NetworkRegistrationCheck+0x88>
        result = SCP_SendCommandWaitAnswer("AT+CREG?\r\n", "OK", 500, 5);
 8008192:	22fa      	movs	r2, #250	; 0xfa
 8008194:	4920      	ldr	r1, [pc, #128]	; (8008218 <NetworkRegistrationCheck+0xd4>)
 8008196:	4824      	ldr	r0, [pc, #144]	; (8008228 <NetworkRegistrationCheck+0xe4>)
 8008198:	2305      	movs	r3, #5
 800819a:	0052      	lsls	r2, r2, #1
 800819c:	f7fe fe2c 	bl	8006df8 <SCP_SendCommandWaitAnswer>
 80081a0:	0005      	movs	r5, r0
        vTaskDelay(pdMS_TO_TICKS(100));
 80081a2:	2064      	movs	r0, #100	; 0x64
 80081a4:	f7fe f95e 	bl	8006464 <vTaskDelay>
        if(result)
 80081a8:	2d00      	cmp	r5, #0
 80081aa:	d030      	beq.n	800820e <NetworkRegistrationCheck+0xca>
            result = memmem((char*)SCPHandler.RxBuffer, CMD_BUFF_LENGTH, "+CREG: ", sizeof("+CREG: ")-1);
 80081ac:	4a1f      	ldr	r2, [pc, #124]	; (800822c <NetworkRegistrationCheck+0xe8>)
 80081ae:	2180      	movs	r1, #128	; 0x80
 80081b0:	481c      	ldr	r0, [pc, #112]	; (8008224 <NetworkRegistrationCheck+0xe0>)
 80081b2:	2307      	movs	r3, #7
 80081b4:	00c9      	lsls	r1, r1, #3
 80081b6:	f7ff ff7b 	bl	80080b0 <memmem>
            if(result)
 80081ba:	2800      	cmp	r0, #0
 80081bc:	d00a      	beq.n	80081d4 <NetworkRegistrationCheck+0x90>
                result += 9;
 80081be:	3009      	adds	r0, #9
                ntwrk_stat = atoi(result);
 80081c0:	f000 feb1 	bl	8008f26 <atoi>
 80081c4:	0004      	movs	r4, r0
        return ntwrk_stat;
 80081c6:	e005      	b.n	80081d4 <NetworkRegistrationCheck+0x90>
    int32_t ntwrk_stat = 0;
 80081c8:	2400      	movs	r4, #0
 80081ca:	e7e2      	b.n	8008192 <NetworkRegistrationCheck+0x4e>
    else if(ntwrk_stat == 8 || ntwrk_stat == 9)
 80081cc:	0003      	movs	r3, r0
 80081ce:	3b08      	subs	r3, #8
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d901      	bls.n	80081d8 <NetworkRegistrationCheck+0x94>
}
 80081d4:	0020      	movs	r0, r4
 80081d6:	bd70      	pop	{r4, r5, r6, pc}
        result = SCP_SendCommandWaitAnswer("AT+CEREG?\r\n", "OK", 500, 5);
 80081d8:	22fa      	movs	r2, #250	; 0xfa
 80081da:	490f      	ldr	r1, [pc, #60]	; (8008218 <NetworkRegistrationCheck+0xd4>)
 80081dc:	4814      	ldr	r0, [pc, #80]	; (8008230 <NetworkRegistrationCheck+0xec>)
 80081de:	2305      	movs	r3, #5
 80081e0:	0052      	lsls	r2, r2, #1
 80081e2:	f7fe fe09 	bl	8006df8 <SCP_SendCommandWaitAnswer>
 80081e6:	0005      	movs	r5, r0
        vTaskDelay(pdMS_TO_TICKS(100));
 80081e8:	2064      	movs	r0, #100	; 0x64
 80081ea:	f7fe f93b 	bl	8006464 <vTaskDelay>
        if(result)
 80081ee:	2d00      	cmp	r5, #0
 80081f0:	d00f      	beq.n	8008212 <NetworkRegistrationCheck+0xce>
            result = memmem((char*)SCPHandler.RxBuffer, CMD_BUFF_LENGTH, "+CEREG: ", sizeof("+CEREG: ")-1);
 80081f2:	4a10      	ldr	r2, [pc, #64]	; (8008234 <NetworkRegistrationCheck+0xf0>)
 80081f4:	2180      	movs	r1, #128	; 0x80
 80081f6:	480b      	ldr	r0, [pc, #44]	; (8008224 <NetworkRegistrationCheck+0xe0>)
 80081f8:	2308      	movs	r3, #8
 80081fa:	00c9      	lsls	r1, r1, #3
 80081fc:	f7ff ff58 	bl	80080b0 <memmem>
            if(result)
 8008200:	2800      	cmp	r0, #0
 8008202:	d0e7      	beq.n	80081d4 <NetworkRegistrationCheck+0x90>
                result += 10;
 8008204:	300a      	adds	r0, #10
                ntwrk_stat = atoi(result);
 8008206:	f000 fe8e 	bl	8008f26 <atoi>
 800820a:	0004      	movs	r4, r0
 800820c:	e7e2      	b.n	80081d4 <NetworkRegistrationCheck+0x90>
            return 0;
 800820e:	2400      	movs	r4, #0
 8008210:	e7e0      	b.n	80081d4 <NetworkRegistrationCheck+0x90>
            return 0;
 8008212:	2400      	movs	r4, #0
 8008214:	e7de      	b.n	80081d4 <NetworkRegistrationCheck+0x90>
 8008216:	46c0      	nop			; (mov r8, r8)
 8008218:	0800dfd8 	.word	0x0800dfd8
 800821c:	0800e094 	.word	0x0800e094
 8008220:	0800e0a0 	.word	0x0800e0a0
 8008224:	20002054 	.word	0x20002054
 8008228:	0800e0a8 	.word	0x0800e0a8
 800822c:	0800e0b4 	.word	0x0800e0b4
 8008230:	0800e0bc 	.word	0x0800e0bc
 8008234:	0800e0c8 	.word	0x0800e0c8

08008238 <WaitForNetwork>:
{
 8008238:	b570      	push	{r4, r5, r6, lr}
    for(uint32_t i=0; i < WAIT_FOR_NETWORK_S; i++)
 800823a:	2400      	movs	r4, #0
    _Bool led = false;
 800823c:	2500      	movs	r5, #0
    for(uint32_t i=0; i < WAIT_FOR_NETWORK_S; i++)
 800823e:	e00e      	b.n	800825e <WaitForNetwork+0x26>
          signal = SignalQuality();
 8008240:	f7ff ff5c 	bl	80080fc <SignalQuality>
          if(signal != 99)
 8008244:	2863      	cmp	r0, #99	; 0x63
 8008246:	d119      	bne.n	800827c <WaitForNetwork+0x44>
            osDelay(1000);
 8008248:	20fa      	movs	r0, #250	; 0xfa
 800824a:	0080      	lsls	r0, r0, #2
 800824c:	f7fd f9e1 	bl	8005612 <osDelay>
        led = !led;
 8008250:	2001      	movs	r0, #1
 8008252:	4045      	eors	r5, r0
 8008254:	b2ed      	uxtb	r5, r5
        SetLED(led);
 8008256:	0028      	movs	r0, r5
 8008258:	f7ff fd82 	bl	8007d60 <SetLED>
    for(uint32_t i=0; i < WAIT_FOR_NETWORK_S; i++)
 800825c:	3401      	adds	r4, #1
 800825e:	23e1      	movs	r3, #225	; 0xe1
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	429c      	cmp	r4, r3
 8008264:	d20f      	bcs.n	8008286 <WaitForNetwork+0x4e>
        test = NetworkRegistrationCheck();
 8008266:	f7ff ff6d 	bl	8008144 <NetworkRegistrationCheck>
        if((test == 1) || (test == 5))
 800826a:	2801      	cmp	r0, #1
 800826c:	d0e8      	beq.n	8008240 <WaitForNetwork+0x8>
 800826e:	2805      	cmp	r0, #5
 8008270:	d0e6      	beq.n	8008240 <WaitForNetwork+0x8>
            osDelay(1000);
 8008272:	20fa      	movs	r0, #250	; 0xfa
 8008274:	0080      	lsls	r0, r0, #2
 8008276:	f7fd f9cc 	bl	8005612 <osDelay>
 800827a:	e7e9      	b.n	8008250 <WaitForNetwork+0x18>
        	SetLED(false);
 800827c:	2000      	movs	r0, #0
 800827e:	f7ff fd6f 	bl	8007d60 <SetLED>
            return true;
 8008282:	2001      	movs	r0, #1
}
 8008284:	bd70      	pop	{r4, r5, r6, pc}
    SetLED(false);
 8008286:	2000      	movs	r0, #0
 8008288:	f7ff fd6a 	bl	8007d60 <SetLED>
    return false;
 800828c:	2000      	movs	r0, #0
 800828e:	e7f9      	b.n	8008284 <WaitForNetwork+0x4c>

08008290 <GetOperator>:
{
 8008290:	b510      	push	{r4, lr}
    result = SCP_SendCommandWaitAnswer("AT+COPS?\r\n", "OK", 30000, 1);
 8008292:	4918      	ldr	r1, [pc, #96]	; (80082f4 <GetOperator+0x64>)
 8008294:	4818      	ldr	r0, [pc, #96]	; (80082f8 <GetOperator+0x68>)
 8008296:	2301      	movs	r3, #1
 8008298:	4a18      	ldr	r2, [pc, #96]	; (80082fc <GetOperator+0x6c>)
 800829a:	f7fe fdad 	bl	8006df8 <SCP_SendCommandWaitAnswer>
 800829e:	1e04      	subs	r4, r0, #0
    if(result)
 80082a0:	d025      	beq.n	80082ee <GetOperator+0x5e>
        result = memmem((char*)SCPHandler.RxBuffer, CMD_BUFF_LENGTH, "+COPS:", sizeof("+COPS:")-1);
 80082a2:	4a17      	ldr	r2, [pc, #92]	; (8008300 <GetOperator+0x70>)
 80082a4:	2180      	movs	r1, #128	; 0x80
 80082a6:	4817      	ldr	r0, [pc, #92]	; (8008304 <GetOperator+0x74>)
 80082a8:	2306      	movs	r3, #6
 80082aa:	00c9      	lsls	r1, r1, #3
 80082ac:	f7ff ff00 	bl	80080b0 <memmem>
 80082b0:	1e04      	subs	r4, r0, #0
        if(result)
 80082b2:	d01c      	beq.n	80082ee <GetOperator+0x5e>
            result = strchr(result, '"');
 80082b4:	2122      	movs	r1, #34	; 0x22
 80082b6:	f001 f822 	bl	80092fe <strchr>
 80082ba:	1e04      	subs	r4, r0, #0
            if(result)
 80082bc:	d017      	beq.n	80082ee <GetOperator+0x5e>
                memset(operator, 0x00, 17);
 80082be:	4812      	ldr	r0, [pc, #72]	; (8008308 <GetOperator+0x78>)
 80082c0:	2211      	movs	r2, #17
 80082c2:	2100      	movs	r1, #0
 80082c4:	f001 f806 	bl	80092d4 <memset>
                for(uint8_t i = 0; i < 16; i++)
 80082c8:	2300      	movs	r3, #0
 80082ca:	2b0f      	cmp	r3, #15
 80082cc:	d80e      	bhi.n	80082ec <GetOperator+0x5c>
                    operator[i] = *result;
 80082ce:	7821      	ldrb	r1, [r4, #0]
 80082d0:	4a0d      	ldr	r2, [pc, #52]	; (8008308 <GetOperator+0x78>)
 80082d2:	54d1      	strb	r1, [r2, r3]
                    result++;
 80082d4:	3401      	adds	r4, #1
                    if(*result == '"')
 80082d6:	7822      	ldrb	r2, [r4, #0]
 80082d8:	2a22      	cmp	r2, #34	; 0x22
 80082da:	d002      	beq.n	80082e2 <GetOperator+0x52>
                for(uint8_t i = 0; i < 16; i++)
 80082dc:	3301      	adds	r3, #1
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	e7f3      	b.n	80082ca <GetOperator+0x3a>
                        i++;
 80082e2:	3301      	adds	r3, #1
 80082e4:	b2db      	uxtb	r3, r3
                        operator[i] = *result;
 80082e6:	4c08      	ldr	r4, [pc, #32]	; (8008308 <GetOperator+0x78>)
 80082e8:	54e2      	strb	r2, [r4, r3]
                        return operator;
 80082ea:	e000      	b.n	80082ee <GetOperator+0x5e>
                return operator;
 80082ec:	4c06      	ldr	r4, [pc, #24]	; (8008308 <GetOperator+0x78>)
}
 80082ee:	0020      	movs	r0, r4
 80082f0:	bd10      	pop	{r4, pc}
 80082f2:	46c0      	nop			; (mov r8, r8)
 80082f4:	0800dfd8 	.word	0x0800dfd8
 80082f8:	0800e094 	.word	0x0800e094
 80082fc:	00007530 	.word	0x00007530
 8008300:	0800e0a0 	.word	0x0800e0a0
 8008304:	20002054 	.word	0x20002054
 8008308:	20002b30 	.word	0x20002b30

0800830c <ContextStatusCheck>:
{
 800830c:	b510      	push	{r4, lr}
    result = SCP_SendCommandWaitAnswer("AT#SGACT?\r\n", "OK", 1000, 1);
 800830e:	22fa      	movs	r2, #250	; 0xfa
 8008310:	490e      	ldr	r1, [pc, #56]	; (800834c <ContextStatusCheck+0x40>)
 8008312:	480f      	ldr	r0, [pc, #60]	; (8008350 <ContextStatusCheck+0x44>)
 8008314:	2301      	movs	r3, #1
 8008316:	0092      	lsls	r2, r2, #2
 8008318:	f7fe fd6e 	bl	8006df8 <SCP_SendCommandWaitAnswer>
 800831c:	0004      	movs	r4, r0
    vTaskDelay(pdMS_TO_TICKS(100));
 800831e:	2064      	movs	r0, #100	; 0x64
 8008320:	f7fe f8a0 	bl	8006464 <vTaskDelay>
    if(result)
 8008324:	2c00      	cmp	r4, #0
 8008326:	d00c      	beq.n	8008342 <ContextStatusCheck+0x36>
        result = memmem((char*)SCPHandler.RxBuffer, CMD_BUFF_LENGTH, "#SGACT: 1", sizeof("#SGACT: 1")-1);
 8008328:	4a0a      	ldr	r2, [pc, #40]	; (8008354 <ContextStatusCheck+0x48>)
 800832a:	2180      	movs	r1, #128	; 0x80
 800832c:	480a      	ldr	r0, [pc, #40]	; (8008358 <ContextStatusCheck+0x4c>)
 800832e:	2309      	movs	r3, #9
 8008330:	00c9      	lsls	r1, r1, #3
 8008332:	f7ff febd 	bl	80080b0 <memmem>
        if(result)
 8008336:	2800      	cmp	r0, #0
 8008338:	d005      	beq.n	8008346 <ContextStatusCheck+0x3a>
            result += 10;
 800833a:	300a      	adds	r0, #10
            lte_stat = atoi(result);
 800833c:	f000 fdf3 	bl	8008f26 <atoi>
}
 8008340:	bd10      	pop	{r4, pc}
        return 0;
 8008342:	2000      	movs	r0, #0
 8008344:	e7fc      	b.n	8008340 <ContextStatusCheck+0x34>
    int32_t lte_stat = 0;
 8008346:	2000      	movs	r0, #0
 8008348:	e7fa      	b.n	8008340 <ContextStatusCheck+0x34>
 800834a:	46c0      	nop			; (mov r8, r8)
 800834c:	0800dfd8 	.word	0x0800dfd8
 8008350:	0800e0d4 	.word	0x0800e0d4
 8008354:	0800e0e0 	.word	0x0800e0e0
 8008358:	20002054 	.word	0x20002054

0800835c <ContextActivation>:
{
 800835c:	b570      	push	{r4, r5, r6, lr}
 800835e:	0004      	movs	r4, r0
    check = NetworkRegistrationCheck();
 8008360:	f7ff fef0 	bl	8008144 <NetworkRegistrationCheck>
    if(!check)
 8008364:	2800      	cmp	r0, #0
 8008366:	d02d      	beq.n	80083c4 <ContextActivation+0x68>
    result = SCP_SendCommandWaitAnswer("AT#SGACT?\r\n", "#SGACT: 1,0", 1000, 1);
 8008368:	22fa      	movs	r2, #250	; 0xfa
 800836a:	492e      	ldr	r1, [pc, #184]	; (8008424 <ContextActivation+0xc8>)
 800836c:	482e      	ldr	r0, [pc, #184]	; (8008428 <ContextActivation+0xcc>)
 800836e:	2301      	movs	r3, #1
 8008370:	0092      	lsls	r2, r2, #2
 8008372:	f7fe fd41 	bl	8006df8 <SCP_SendCommandWaitAnswer>
    if (!result) result = SCP_SendCommandWaitAnswer("AT#SGACT=1,0\r\n", "OK", 1000, 1);
 8008376:	2800      	cmp	r0, #0
 8008378:	d027      	beq.n	80083ca <ContextActivation+0x6e>
    if (!result) return false;
 800837a:	2800      	cmp	r0, #0
 800837c:	d04e      	beq.n	800841c <ContextActivation+0xc0>
    vTaskDelay(pdMS_TO_TICKS(1000));
 800837e:	20fa      	movs	r0, #250	; 0xfa
 8008380:	0080      	lsls	r0, r0, #2
 8008382:	f7fe f86f 	bl	8006464 <vTaskDelay>
    result = SCP_SendCommandWaitAnswer("AT#SGACT=1,1\r\n", "OK", 60000, 1);
 8008386:	4929      	ldr	r1, [pc, #164]	; (800842c <ContextActivation+0xd0>)
 8008388:	4829      	ldr	r0, [pc, #164]	; (8008430 <ContextActivation+0xd4>)
 800838a:	2301      	movs	r3, #1
 800838c:	4a29      	ldr	r2, [pc, #164]	; (8008434 <ContextActivation+0xd8>)
 800838e:	f7fe fd33 	bl	8006df8 <SCP_SendCommandWaitAnswer>
 8008392:	0005      	movs	r5, r0
    vTaskDelay(pdMS_TO_TICKS(100));
 8008394:	2064      	movs	r0, #100	; 0x64
 8008396:	f7fe f865 	bl	8006464 <vTaskDelay>
    if(result)
 800839a:	2d00      	cmp	r5, #0
 800839c:	d040      	beq.n	8008420 <ContextActivation+0xc4>
            result = memmem((char*)SCPHandler.RxBuffer, CMD_BUFF_LENGTH, "#SGACT: ", sizeof("#SGACT: ")-1);
 800839e:	4a26      	ldr	r2, [pc, #152]	; (8008438 <ContextActivation+0xdc>)
 80083a0:	2180      	movs	r1, #128	; 0x80
 80083a2:	4826      	ldr	r0, [pc, #152]	; (800843c <ContextActivation+0xe0>)
 80083a4:	2308      	movs	r3, #8
 80083a6:	00c9      	lsls	r1, r1, #3
 80083a8:	f7ff fe82 	bl	80080b0 <memmem>
            result += 8;
 80083ac:	0005      	movs	r5, r0
 80083ae:	3508      	adds	r5, #8
            if(result)
 80083b0:	3008      	adds	r0, #8
 80083b2:	d031      	beq.n	8008418 <ContextActivation+0xbc>
                memset(ip_address, 0x00, 15);
 80083b4:	220f      	movs	r2, #15
 80083b6:	2100      	movs	r1, #0
 80083b8:	0020      	movs	r0, r4
 80083ba:	f000 ff8b 	bl	80092d4 <memset>
    temp = ip_address;
 80083be:	0020      	movs	r0, r4
                for(uint8_t i = 0; i < 15; i++)
 80083c0:	2300      	movs	r3, #0
 80083c2:	e013      	b.n	80083ec <ContextActivation+0x90>
      WaitForNetwork();
 80083c4:	f7ff ff38 	bl	8008238 <WaitForNetwork>
 80083c8:	e7ce      	b.n	8008368 <ContextActivation+0xc>
    if (!result) result = SCP_SendCommandWaitAnswer("AT#SGACT=1,0\r\n", "OK", 1000, 1);
 80083ca:	22fa      	movs	r2, #250	; 0xfa
 80083cc:	4917      	ldr	r1, [pc, #92]	; (800842c <ContextActivation+0xd0>)
 80083ce:	481c      	ldr	r0, [pc, #112]	; (8008440 <ContextActivation+0xe4>)
 80083d0:	2301      	movs	r3, #1
 80083d2:	0092      	lsls	r2, r2, #2
 80083d4:	f7fe fd10 	bl	8006df8 <SCP_SendCommandWaitAnswer>
 80083d8:	e7cf      	b.n	800837a <ContextActivation+0x1e>
                        result++;
 80083da:	3501      	adds	r5, #1
 80083dc:	e00b      	b.n	80083f6 <ContextActivation+0x9a>
                    if(*result == '\r')
 80083de:	2a0d      	cmp	r2, #13
 80083e0:	d01a      	beq.n	8008418 <ContextActivation+0xbc>
                    *temp = *result;
 80083e2:	7002      	strb	r2, [r0, #0]
                    result++;
 80083e4:	3501      	adds	r5, #1
                    temp++;
 80083e6:	3001      	adds	r0, #1
                for(uint8_t i = 0; i < 15; i++)
 80083e8:	3301      	adds	r3, #1
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2b0e      	cmp	r3, #14
 80083ee:	d813      	bhi.n	8008418 <ContextActivation+0xbc>
                    if(*result == '"')
 80083f0:	782a      	ldrb	r2, [r5, #0]
 80083f2:	2a22      	cmp	r2, #34	; 0x22
 80083f4:	d0f1      	beq.n	80083da <ContextActivation+0x7e>
                    if(!(*result > 47 && *result < 58) && !(*result == '.') && (!(*result == '\r')))
 80083f6:	782a      	ldrb	r2, [r5, #0]
 80083f8:	0011      	movs	r1, r2
 80083fa:	3930      	subs	r1, #48	; 0x30
 80083fc:	b2c9      	uxtb	r1, r1
 80083fe:	2909      	cmp	r1, #9
 8008400:	d9ed      	bls.n	80083de <ContextActivation+0x82>
 8008402:	2a2e      	cmp	r2, #46	; 0x2e
 8008404:	d0eb      	beq.n	80083de <ContextActivation+0x82>
 8008406:	2a0d      	cmp	r2, #13
 8008408:	d0e9      	beq.n	80083de <ContextActivation+0x82>
                        memset(ip_address, 0x00, 15);
 800840a:	220f      	movs	r2, #15
 800840c:	2100      	movs	r1, #0
 800840e:	0020      	movs	r0, r4
 8008410:	f000 ff60 	bl	80092d4 <memset>
                        return false;
 8008414:	2000      	movs	r0, #0
 8008416:	e000      	b.n	800841a <ContextActivation+0xbe>
            return true;
 8008418:	2001      	movs	r0, #1
}
 800841a:	bd70      	pop	{r4, r5, r6, pc}
    if (!result) return false;
 800841c:	2000      	movs	r0, #0
 800841e:	e7fc      	b.n	800841a <ContextActivation+0xbe>
    return false;
 8008420:	2000      	movs	r0, #0
 8008422:	e7fa      	b.n	800841a <ContextActivation+0xbe>
 8008424:	0800e0ec 	.word	0x0800e0ec
 8008428:	0800e0d4 	.word	0x0800e0d4
 800842c:	0800dfd8 	.word	0x0800dfd8
 8008430:	0800e0f8 	.word	0x0800e0f8
 8008434:	0000ea60 	.word	0x0000ea60
 8008438:	0800e108 	.word	0x0800e108
 800843c:	20002054 	.word	0x20002054
 8008440:	0800dfdc 	.word	0x0800dfdc

08008444 <uart_send_buff>:
{
 8008444:	b510      	push	{r4, lr}
	return HAL_UART_Transmit_DMA(&huart1, data_out, (uint16_t)size);
 8008446:	b28a      	uxth	r2, r1
 8008448:	4b02      	ldr	r3, [pc, #8]	; (8008454 <uart_send_buff+0x10>)
 800844a:	0001      	movs	r1, r0
 800844c:	0018      	movs	r0, r3
 800844e:	f7fc fab3 	bl	80049b8 <HAL_UART_Transmit_DMA>
}
 8008452:	bd10      	pop	{r4, pc}
 8008454:	20002a10 	.word	0x20002a10

08008458 <uart_read_byte>:
{
 8008458:	b510      	push	{r4, lr}
 800845a:	0001      	movs	r1, r0
	return HAL_UART_Receive_DMA(&huart1, pData, 1);
 800845c:	4b02      	ldr	r3, [pc, #8]	; (8008468 <uart_read_byte+0x10>)
 800845e:	2201      	movs	r2, #1
 8008460:	0018      	movs	r0, r3
 8008462:	f7fd f84b 	bl	80054fc <HAL_UART_Receive_DMA>
}
 8008466:	bd10      	pop	{r4, pc}
 8008468:	20002a10 	.word	0x20002a10

0800846c <TelitCloudUpload>:

upload_error_t TelitCloudUpload(void)
{
 800846c:	b570      	push	{r4, r5, r6, lr}
  if(*pwr_level < PWRONLVL)
 800846e:	4bbd      	ldr	r3, [pc, #756]	; (8008764 <TelitCloudUpload+0x2f8>)
 8008470:	891a      	ldrh	r2, [r3, #8]
 8008472:	23fa      	movs	r3, #250	; 0xfa
 8008474:	00db      	lsls	r3, r3, #3
 8008476:	429a      	cmp	r2, r3
 8008478:	d319      	bcc.n	80084ae <TelitCloudUpload+0x42>
    return true;
 800847a:	2301      	movs	r3, #1
  _Bool result = false;  
  char * scp_result = NULL;
  upload_error_t return_error = UPLOAD_OK;
  
  /*Apply power for IoT LTE module*/
  if(!ModemOn(&storage.adc_data[4]))
 800847c:	2b00      	cmp	r3, #0
 800847e:	d12d      	bne.n	80084dc <TelitCloudUpload+0x70>
  {
    return_error = MODEM_POWER_ON_FAIL;
 8008480:	2401      	movs	r4, #1
  modem_data.modem_power_en = false;
  return return_error;
  
error_exit:
  /*Turn off LED*/
  SetLED(false);
 8008482:	2000      	movs	r0, #0
 8008484:	f7ff fc6c 	bl	8007d60 <SetLED>

  /*Turn off Modem*/
/*Stop Timer*/
HAL_TIM_Base_Stop_IT(&htim7);
 8008488:	48b7      	ldr	r0, [pc, #732]	; (8008768 <TelitCloudUpload+0x2fc>)
 800848a:	f7fc f8ef 	bl	800466c <HAL_TIM_Base_Stop_IT>
  if(*pwr_level >= PWRONLVL)
 800848e:	4bb5      	ldr	r3, [pc, #724]	; (8008764 <TelitCloudUpload+0x2f8>)
 8008490:	891a      	ldrh	r2, [r3, #8]
 8008492:	23fa      	movs	r3, #250	; 0xfa
 8008494:	00db      	lsls	r3, r3, #3
 8008496:	429a      	cmp	r2, r3
 8008498:	d300      	bcc.n	800849c <TelitCloudUpload+0x30>
 800849a:	e18d      	b.n	80087b8 <TelitCloudUpload+0x34c>
    return true;
 800849c:	2301      	movs	r3, #1
  if(!ModemOff(&storage.adc_data[4]))
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d100      	bne.n	80084a4 <TelitCloudUpload+0x38>
 80084a2:	e19c      	b.n	80087de <TelitCloudUpload+0x372>
  {
    return_error = MODEM_POWER_OFF_FAIL;
    modem_data.modem_power_en = false;
    return return_error;
  }
  modem_data.modem_power_en = false;
 80084a4:	4bb1      	ldr	r3, [pc, #708]	; (800876c <TelitCloudUpload+0x300>)
 80084a6:	2200      	movs	r2, #0
 80084a8:	701a      	strb	r2, [r3, #0]
  return return_error;
}
 80084aa:	0020      	movs	r0, r4
 80084ac:	bd70      	pop	{r4, r5, r6, pc}
	HAL_GPIO_WritePin(LDO_OFF_GPIO_Port, LDO_OFF_Pin, GPIO_PIN_RESET);
 80084ae:	20a0      	movs	r0, #160	; 0xa0
 80084b0:	2200      	movs	r2, #0
 80084b2:	2140      	movs	r1, #64	; 0x40
 80084b4:	05c0      	lsls	r0, r0, #23
 80084b6:	f7fb fa0a 	bl	80038ce <HAL_GPIO_WritePin>
	osDelay(3000);
 80084ba:	48ad      	ldr	r0, [pc, #692]	; (8008770 <TelitCloudUpload+0x304>)
 80084bc:	f7fd f8a9 	bl	8005612 <osDelay>
    if(*pwr_level >= PWRONLVL)
 80084c0:	4ba8      	ldr	r3, [pc, #672]	; (8008764 <TelitCloudUpload+0x2f8>)
 80084c2:	891a      	ldrh	r2, [r3, #8]
 80084c4:	23fa      	movs	r3, #250	; 0xfa
 80084c6:	00db      	lsls	r3, r3, #3
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d201      	bcs.n	80084d0 <TelitCloudUpload+0x64>
      return false;
 80084cc:	2300      	movs	r3, #0
 80084ce:	e7d5      	b.n	800847c <TelitCloudUpload+0x10>
      osDelay(1000);
 80084d0:	20fa      	movs	r0, #250	; 0xfa
 80084d2:	0080      	lsls	r0, r0, #2
 80084d4:	f7fd f89d 	bl	8005612 <osDelay>
      return true;
 80084d8:	2301      	movs	r3, #1
 80084da:	e7cf      	b.n	800847c <TelitCloudUpload+0x10>
  HAL_TIM_Base_Start_IT(&htim7);
 80084dc:	48a2      	ldr	r0, [pc, #648]	; (8008768 <TelitCloudUpload+0x2fc>)
 80084de:	f7fc f88f 	bl	8004600 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart1, &aRxBuffer, 1);
 80084e2:	49a4      	ldr	r1, [pc, #656]	; (8008774 <TelitCloudUpload+0x308>)
 80084e4:	48a4      	ldr	r0, [pc, #656]	; (8008778 <TelitCloudUpload+0x30c>)
 80084e6:	2201      	movs	r2, #1
 80084e8:	f7fd f808 	bl	80054fc <HAL_UART_Receive_DMA>
  scp_result = SCP_SendCommandWaitAnswer("AT\r\n", "OK", 200, 1);
 80084ec:	49a3      	ldr	r1, [pc, #652]	; (800877c <TelitCloudUpload+0x310>)
 80084ee:	48a4      	ldr	r0, [pc, #656]	; (8008780 <TelitCloudUpload+0x314>)
 80084f0:	2301      	movs	r3, #1
 80084f2:	22c8      	movs	r2, #200	; 0xc8
 80084f4:	f7fe fc80 	bl	8006df8 <SCP_SendCommandWaitAnswer>
 80084f8:	1e04      	subs	r4, r0, #0
  if(!scp_result)
 80084fa:	d100      	bne.n	80084fe <TelitCloudUpload+0x92>
 80084fc:	e080      	b.n	8008600 <TelitCloudUpload+0x194>
  if (scp_result) modem_data.modem_power_en = true;
 80084fe:	2c00      	cmp	r4, #0
 8008500:	d002      	beq.n	8008508 <TelitCloudUpload+0x9c>
 8008502:	4b9a      	ldr	r3, [pc, #616]	; (800876c <TelitCloudUpload+0x300>)
 8008504:	2201      	movs	r2, #1
 8008506:	701a      	strb	r2, [r3, #0]
  if (scp_result) scp_result = SCP_SendCommandWaitAnswer("AT+CPIN?\r\n", "+CPIN: READY", 2000, 1);
 8008508:	2c00      	cmp	r4, #0
 800850a:	d007      	beq.n	800851c <TelitCloudUpload+0xb0>
 800850c:	22fa      	movs	r2, #250	; 0xfa
 800850e:	499d      	ldr	r1, [pc, #628]	; (8008784 <TelitCloudUpload+0x318>)
 8008510:	489d      	ldr	r0, [pc, #628]	; (8008788 <TelitCloudUpload+0x31c>)
 8008512:	2301      	movs	r3, #1
 8008514:	00d2      	lsls	r2, r2, #3
 8008516:	f7fe fc6f 	bl	8006df8 <SCP_SendCommandWaitAnswer>
 800851a:	0004      	movs	r4, r0
  if (scp_result) scp_result = SCP_SendCommandWaitAnswer("ATE0\r\n", "OK", 2000, 1);
 800851c:	2c00      	cmp	r4, #0
 800851e:	d007      	beq.n	8008530 <TelitCloudUpload+0xc4>
 8008520:	22fa      	movs	r2, #250	; 0xfa
 8008522:	4996      	ldr	r1, [pc, #600]	; (800877c <TelitCloudUpload+0x310>)
 8008524:	4899      	ldr	r0, [pc, #612]	; (800878c <TelitCloudUpload+0x320>)
 8008526:	2301      	movs	r3, #1
 8008528:	00d2      	lsls	r2, r2, #3
 800852a:	f7fe fc65 	bl	8006df8 <SCP_SendCommandWaitAnswer>
 800852e:	0004      	movs	r4, r0
  if (scp_result) scp_result = SCP_SendCommandWaitAnswer("AT+CMEE=2\r\n", "OK", 2000, 1);
 8008530:	2c00      	cmp	r4, #0
 8008532:	d007      	beq.n	8008544 <TelitCloudUpload+0xd8>
 8008534:	22fa      	movs	r2, #250	; 0xfa
 8008536:	4991      	ldr	r1, [pc, #580]	; (800877c <TelitCloudUpload+0x310>)
 8008538:	4895      	ldr	r0, [pc, #596]	; (8008790 <TelitCloudUpload+0x324>)
 800853a:	2301      	movs	r3, #1
 800853c:	00d2      	lsls	r2, r2, #3
 800853e:	f7fe fc5b 	bl	8006df8 <SCP_SendCommandWaitAnswer>
 8008542:	0004      	movs	r4, r0
  osDelay(5000);
 8008544:	4893      	ldr	r0, [pc, #588]	; (8008794 <TelitCloudUpload+0x328>)
 8008546:	f7fd f864 	bl	8005612 <osDelay>
  if(scp_result)
 800854a:	2c00      	cmp	r4, #0
 800854c:	d02c      	beq.n	80085a8 <TelitCloudUpload+0x13c>
    scp_result = GetIMEI();
 800854e:	f7ff fb49 	bl	8007be4 <GetIMEI>
 8008552:	1e04      	subs	r4, r0, #0
    if(scp_result)
 8008554:	d00a      	beq.n	800856c <TelitCloudUpload+0x100>
      memset(modem_data.imei, 0x00, 16);
 8008556:	4d85      	ldr	r5, [pc, #532]	; (800876c <TelitCloudUpload+0x300>)
 8008558:	3521      	adds	r5, #33	; 0x21
 800855a:	2210      	movs	r2, #16
 800855c:	2100      	movs	r1, #0
 800855e:	0028      	movs	r0, r5
 8008560:	f000 feb8 	bl	80092d4 <memset>
      strcpy(modem_data.imei, scp_result);
 8008564:	0021      	movs	r1, r4
 8008566:	0028      	movs	r0, r5
 8008568:	f000 ff6a 	bl	8009440 <strcpy>
    scp_result = GetID();
 800856c:	f7ff fb7c 	bl	8007c68 <GetID>
 8008570:	1e04      	subs	r4, r0, #0
    if(scp_result)
 8008572:	d00a      	beq.n	800858a <TelitCloudUpload+0x11e>
      memset(modem_data.device_name, 0x00, 21);
 8008574:	4d7d      	ldr	r5, [pc, #500]	; (800876c <TelitCloudUpload+0x300>)
 8008576:	3541      	adds	r5, #65	; 0x41
 8008578:	2215      	movs	r2, #21
 800857a:	2100      	movs	r1, #0
 800857c:	0028      	movs	r0, r5
 800857e:	f000 fea9 	bl	80092d4 <memset>
      strcpy(modem_data.device_name, scp_result);
 8008582:	0021      	movs	r1, r4
 8008584:	0028      	movs	r0, r5
 8008586:	f000 ff5b 	bl	8009440 <strcpy>
    scp_result = GetVersion();
 800858a:	f7ff fb9b 	bl	8007cc4 <GetVersion>
 800858e:	1e04      	subs	r4, r0, #0
    if(scp_result)
 8008590:	d00a      	beq.n	80085a8 <TelitCloudUpload+0x13c>
      memset(modem_data.fw_version, 0x00, 16);
 8008592:	4d76      	ldr	r5, [pc, #472]	; (800876c <TelitCloudUpload+0x300>)
 8008594:	3556      	adds	r5, #86	; 0x56
 8008596:	2210      	movs	r2, #16
 8008598:	2100      	movs	r1, #0
 800859a:	0028      	movs	r0, r5
 800859c:	f000 fe9a 	bl	80092d4 <memset>
      strcpy(modem_data.fw_version, scp_result);
 80085a0:	0021      	movs	r1, r4
 80085a2:	0028      	movs	r0, r5
 80085a4:	f000 ff4c 	bl	8009440 <strcpy>
  if(!scp_result)
 80085a8:	2c00      	cmp	r4, #0
 80085aa:	d100      	bne.n	80085ae <TelitCloudUpload+0x142>
 80085ac:	e0d1      	b.n	8008752 <TelitCloudUpload+0x2e6>
  if (scp_result) scp_result = SCP_SendCommandWaitAnswer("AT+CGDCONT?\r\n", "omnitel", 1000, 1);
 80085ae:	22fa      	movs	r2, #250	; 0xfa
 80085b0:	4979      	ldr	r1, [pc, #484]	; (8008798 <TelitCloudUpload+0x32c>)
 80085b2:	487a      	ldr	r0, [pc, #488]	; (800879c <TelitCloudUpload+0x330>)
 80085b4:	2301      	movs	r3, #1
 80085b6:	0092      	lsls	r2, r2, #2
 80085b8:	f7fe fc1e 	bl	8006df8 <SCP_SendCommandWaitAnswer>
  if (!scp_result) scp_result = SCP_SendCommandWaitAnswer("AT+CGDCONT=1,\"IP\",\"omnitel\"\r\n", "OK", 2000, 1);
 80085bc:	2800      	cmp	r0, #0
 80085be:	d032      	beq.n	8008626 <TelitCloudUpload+0x1ba>
  if (scp_result) scp_result = SCP_SendCommandWaitAnswer("AT+WS46?\r\n", "+WS46: 28", 1000, 1);
 80085c0:	2800      	cmp	r0, #0
 80085c2:	d006      	beq.n	80085d2 <TelitCloudUpload+0x166>
 80085c4:	22fa      	movs	r2, #250	; 0xfa
 80085c6:	4976      	ldr	r1, [pc, #472]	; (80087a0 <TelitCloudUpload+0x334>)
 80085c8:	4876      	ldr	r0, [pc, #472]	; (80087a4 <TelitCloudUpload+0x338>)
 80085ca:	2301      	movs	r3, #1
 80085cc:	0092      	lsls	r2, r2, #2
 80085ce:	f7fe fc13 	bl	8006df8 <SCP_SendCommandWaitAnswer>
  if (!scp_result) scp_result = SCP_SendCommandWaitAnswer("AT+WS46=28\r\n", "OK", 1000, 1);
 80085d2:	2800      	cmp	r0, #0
 80085d4:	d02f      	beq.n	8008636 <TelitCloudUpload+0x1ca>
  if (scp_result)
 80085d6:	2800      	cmp	r0, #0
 80085d8:	d009      	beq.n	80085ee <TelitCloudUpload+0x182>
    scp_result = SCP_SendCommandWaitAnswer("AT#WS46=2\r\n", "OK", 1000, 1);
 80085da:	22fa      	movs	r2, #250	; 0xfa
 80085dc:	4967      	ldr	r1, [pc, #412]	; (800877c <TelitCloudUpload+0x310>)
 80085de:	4872      	ldr	r0, [pc, #456]	; (80087a8 <TelitCloudUpload+0x33c>)
 80085e0:	2301      	movs	r3, #1
 80085e2:	0092      	lsls	r2, r2, #2
 80085e4:	f7fe fc08 	bl	8006df8 <SCP_SendCommandWaitAnswer>
    if(!scp_result)
 80085e8:	2800      	cmp	r0, #0
 80085ea:	d100      	bne.n	80085ee <TelitCloudUpload+0x182>
 80085ec:	e0b3      	b.n	8008756 <TelitCloudUpload+0x2ea>
  if (scp_result)
 80085ee:	2800      	cmp	r0, #0
 80085f0:	d100      	bne.n	80085f4 <TelitCloudUpload+0x188>
 80085f2:	e0b2      	b.n	800875a <TelitCloudUpload+0x2ee>
    if(!WaitForNetwork())
 80085f4:	f7ff fe20 	bl	8008238 <WaitForNetwork>
 80085f8:	2800      	cmp	r0, #0
 80085fa:	d124      	bne.n	8008646 <TelitCloudUpload+0x1da>
      return_error = MODEM_NO_OPERATOR_PRESENT;
 80085fc:	2408      	movs	r4, #8
 80085fe:	e740      	b.n	8008482 <TelitCloudUpload+0x16>
    osDelay(5000);
 8008600:	4864      	ldr	r0, [pc, #400]	; (8008794 <TelitCloudUpload+0x328>)
 8008602:	f7fd f806 	bl	8005612 <osDelay>
    HAL_UART_Receive_DMA(&huart1, &aRxBuffer, 1);
 8008606:	495b      	ldr	r1, [pc, #364]	; (8008774 <TelitCloudUpload+0x308>)
 8008608:	485b      	ldr	r0, [pc, #364]	; (8008778 <TelitCloudUpload+0x30c>)
 800860a:	2201      	movs	r2, #1
 800860c:	f7fc ff76 	bl	80054fc <HAL_UART_Receive_DMA>
    scp_result = SCP_SendCommandWaitAnswer("AT\r\n", "OK", 200, 1);
 8008610:	495a      	ldr	r1, [pc, #360]	; (800877c <TelitCloudUpload+0x310>)
 8008612:	485b      	ldr	r0, [pc, #364]	; (8008780 <TelitCloudUpload+0x314>)
 8008614:	2301      	movs	r3, #1
 8008616:	22c8      	movs	r2, #200	; 0xc8
 8008618:	f7fe fbee 	bl	8006df8 <SCP_SendCommandWaitAnswer>
 800861c:	1e04      	subs	r4, r0, #0
    if(!scp_result)
 800861e:	d000      	beq.n	8008622 <TelitCloudUpload+0x1b6>
 8008620:	e76d      	b.n	80084fe <TelitCloudUpload+0x92>
      return_error = MODEM_CMD_NO_RESPONSE;
 8008622:	2403      	movs	r4, #3
 8008624:	e72d      	b.n	8008482 <TelitCloudUpload+0x16>
  if (!scp_result) scp_result = SCP_SendCommandWaitAnswer("AT+CGDCONT=1,\"IP\",\"omnitel\"\r\n", "OK", 2000, 1);
 8008626:	22fa      	movs	r2, #250	; 0xfa
 8008628:	4954      	ldr	r1, [pc, #336]	; (800877c <TelitCloudUpload+0x310>)
 800862a:	4860      	ldr	r0, [pc, #384]	; (80087ac <TelitCloudUpload+0x340>)
 800862c:	2301      	movs	r3, #1
 800862e:	00d2      	lsls	r2, r2, #3
 8008630:	f7fe fbe2 	bl	8006df8 <SCP_SendCommandWaitAnswer>
 8008634:	e7c4      	b.n	80085c0 <TelitCloudUpload+0x154>
  if (!scp_result) scp_result = SCP_SendCommandWaitAnswer("AT+WS46=28\r\n", "OK", 1000, 1);
 8008636:	22fa      	movs	r2, #250	; 0xfa
 8008638:	4950      	ldr	r1, [pc, #320]	; (800877c <TelitCloudUpload+0x310>)
 800863a:	485d      	ldr	r0, [pc, #372]	; (80087b0 <TelitCloudUpload+0x344>)
 800863c:	2301      	movs	r3, #1
 800863e:	0092      	lsls	r2, r2, #2
 8008640:	f7fe fbda 	bl	8006df8 <SCP_SendCommandWaitAnswer>
 8008644:	e7c7      	b.n	80085d6 <TelitCloudUpload+0x16a>
  osDelay(5000);
 8008646:	4853      	ldr	r0, [pc, #332]	; (8008794 <TelitCloudUpload+0x328>)
 8008648:	f7fc ffe3 	bl	8005612 <osDelay>
  modem_data.signal = SignalQuality();
 800864c:	f7ff fd56 	bl	80080fc <SignalQuality>
 8008650:	4c46      	ldr	r4, [pc, #280]	; (800876c <TelitCloudUpload+0x300>)
 8008652:	60e0      	str	r0, [r4, #12]
  modem_data.network_status =  NetworkRegistrationCheck();
 8008654:	f7ff fd76 	bl	8008144 <NetworkRegistrationCheck>
 8008658:	6060      	str	r0, [r4, #4]
  if((modem_data.network_status == 1) || (modem_data.network_status == 5))
 800865a:	2801      	cmp	r0, #1
 800865c:	d001      	beq.n	8008662 <TelitCloudUpload+0x1f6>
 800865e:	2805      	cmp	r0, #5
 8008660:	d130      	bne.n	80086c4 <TelitCloudUpload+0x258>
    scp_result = GetOperator();
 8008662:	f7ff fe15 	bl	8008290 <GetOperator>
 8008666:	1e04      	subs	r4, r0, #0
    if(scp_result)
 8008668:	d079      	beq.n	800875e <TelitCloudUpload+0x2f2>
      memset(modem_data.operator, 0x00, 17);
 800866a:	4d40      	ldr	r5, [pc, #256]	; (800876c <TelitCloudUpload+0x300>)
 800866c:	002e      	movs	r6, r5
 800866e:	3610      	adds	r6, #16
 8008670:	2211      	movs	r2, #17
 8008672:	2100      	movs	r1, #0
 8008674:	0030      	movs	r0, r6
 8008676:	f000 fe2d 	bl	80092d4 <memset>
      strcpy(modem_data.operator, scp_result);
 800867a:	0021      	movs	r1, r4
 800867c:	0030      	movs	r0, r6
 800867e:	f000 fedf 	bl	8009440 <strcpy>
    modem_data.context = ContextStatusCheck();
 8008682:	f7ff fe43 	bl	800830c <ContextStatusCheck>
 8008686:	60a8      	str	r0, [r5, #8]
    if(!modem_data.context)
 8008688:	2800      	cmp	r0, #0
 800868a:	d107      	bne.n	800869c <TelitCloudUpload+0x230>
      modem_data.context = ContextActivation(modem_data.ip_address);
 800868c:	4c37      	ldr	r4, [pc, #220]	; (800876c <TelitCloudUpload+0x300>)
 800868e:	0020      	movs	r0, r4
 8008690:	3031      	adds	r0, #49	; 0x31
 8008692:	f7ff fe63 	bl	800835c <ContextActivation>
 8008696:	60a0      	str	r0, [r4, #8]
      if(!modem_data.context)
 8008698:	2800      	cmp	r0, #0
 800869a:	d00f      	beq.n	80086bc <TelitCloudUpload+0x250>
  SetLED(true);
 800869c:	2001      	movs	r0, #1
 800869e:	f7ff fb5f 	bl	8007d60 <SetLED>
  result = ModemOpenTcpSocket("api-de.devicewise.com", 80);
 80086a2:	4844      	ldr	r0, [pc, #272]	; (80087b4 <TelitCloudUpload+0x348>)
 80086a4:	2150      	movs	r1, #80	; 0x50
 80086a6:	f7ff fb39 	bl	8007d1c <ModemOpenTcpSocket>
 80086aa:	0004      	movs	r4, r0
  osDelay(1000);
 80086ac:	20fa      	movs	r0, #250	; 0xfa
 80086ae:	0080      	lsls	r0, r0, #2
 80086b0:	f7fc ffaf 	bl	8005612 <osDelay>
  if(result)
 80086b4:	2c00      	cmp	r4, #0
 80086b6:	d10a      	bne.n	80086ce <TelitCloudUpload+0x262>
	return_error = CLOUD_OPEN_SOCKET_ERROR;
 80086b8:	2406      	movs	r4, #6
 80086ba:	e6e2      	b.n	8008482 <TelitCloudUpload+0x16>
        ContextDeactivation();
 80086bc:	f7ff fa66 	bl	8007b8c <ContextDeactivation>
        return_error = MODEM_NO_DATA_SERVICE;
 80086c0:	240b      	movs	r4, #11
        goto error_exit;
 80086c2:	e6de      	b.n	8008482 <TelitCloudUpload+0x16>
    modem_data.context = 0;
 80086c4:	4b29      	ldr	r3, [pc, #164]	; (800876c <TelitCloudUpload+0x300>)
 80086c6:	2200      	movs	r2, #0
 80086c8:	609a      	str	r2, [r3, #8]
    return_error = MODEM_NOT_REGISTERED;
 80086ca:	240a      	movs	r4, #10
    goto error_exit;
 80086cc:	e6d9      	b.n	8008482 <TelitCloudUpload+0x16>
	result = TelitPortalAuthenticate();
 80086ce:	f7ff fc59 	bl	8007f84 <TelitPortalAuthenticate>
    if(result)
 80086d2:	2800      	cmp	r0, #0
 80086d4:	d101      	bne.n	80086da <TelitCloudUpload+0x26e>
    	return_error = CLOUD_AUTH_ERROR;
 80086d6:	2404      	movs	r4, #4
 80086d8:	e6d3      	b.n	8008482 <TelitCloudUpload+0x16>
  	  result = ModemOpenTcpSocket("api-de.devicewise.com", 80);
 80086da:	4836      	ldr	r0, [pc, #216]	; (80087b4 <TelitCloudUpload+0x348>)
 80086dc:	2150      	movs	r1, #80	; 0x50
 80086de:	f7ff fb1d 	bl	8007d1c <ModemOpenTcpSocket>
 80086e2:	0004      	movs	r4, r0
  	  osDelay(1000);
 80086e4:	20fa      	movs	r0, #250	; 0xfa
 80086e6:	0080      	lsls	r0, r0, #2
 80086e8:	f7fc ff93 	bl	8005612 <osDelay>
      if (result)
 80086ec:	2c00      	cmp	r4, #0
 80086ee:	d101      	bne.n	80086f4 <TelitCloudUpload+0x288>
    	return_error = CLOUD_OPEN_SOCKET_ERROR;
 80086f0:	2406      	movs	r4, #6
 80086f2:	e6c6      	b.n	8008482 <TelitCloudUpload+0x16>
    	result = TelitPortalPostData();
 80086f4:	f7ff fb4e 	bl	8007d94 <TelitPortalPostData>
 80086f8:	1e04      	subs	r4, r0, #0
        if(!result)
 80086fa:	d101      	bne.n	8008700 <TelitCloudUpload+0x294>
          return_error = CLOUD_POST_ERROR;
 80086fc:	2405      	movs	r4, #5
 80086fe:	e6c0      	b.n	8008482 <TelitCloudUpload+0x16>
  SetLED(false);
 8008700:	2000      	movs	r0, #0
 8008702:	f7ff fb2d 	bl	8007d60 <SetLED>
  HAL_TIM_Base_Stop_IT(&htim7);
 8008706:	4818      	ldr	r0, [pc, #96]	; (8008768 <TelitCloudUpload+0x2fc>)
 8008708:	f7fb ffb0 	bl	800466c <HAL_TIM_Base_Stop_IT>
  if(*pwr_level >= PWRONLVL)
 800870c:	4b15      	ldr	r3, [pc, #84]	; (8008764 <TelitCloudUpload+0x2f8>)
 800870e:	891a      	ldrh	r2, [r3, #8]
 8008710:	23fa      	movs	r3, #250	; 0xfa
 8008712:	00db      	lsls	r3, r3, #3
 8008714:	429a      	cmp	r2, r3
 8008716:	d206      	bcs.n	8008726 <TelitCloudUpload+0x2ba>
  if(!ModemOff(&storage.adc_data[4]))
 8008718:	2c00      	cmp	r4, #0
 800871a:	d015      	beq.n	8008748 <TelitCloudUpload+0x2dc>
  modem_data.modem_power_en = false;
 800871c:	4b13      	ldr	r3, [pc, #76]	; (800876c <TelitCloudUpload+0x300>)
 800871e:	2200      	movs	r2, #0
 8008720:	701a      	strb	r2, [r3, #0]
  return return_error;
 8008722:	2400      	movs	r4, #0
 8008724:	e6c1      	b.n	80084aa <TelitCloudUpload+0x3e>
    HAL_GPIO_WritePin(LDO_OFF_GPIO_Port, LDO_OFF_Pin, GPIO_PIN_SET);
 8008726:	20a0      	movs	r0, #160	; 0xa0
 8008728:	2201      	movs	r2, #1
 800872a:	2140      	movs	r1, #64	; 0x40
 800872c:	05c0      	lsls	r0, r0, #23
 800872e:	f7fb f8ce 	bl	80038ce <HAL_GPIO_WritePin>
    osDelay(3000);
 8008732:	480f      	ldr	r0, [pc, #60]	; (8008770 <TelitCloudUpload+0x304>)
 8008734:	f7fc ff6d 	bl	8005612 <osDelay>
    if(*pwr_level < PWRONLVL)
 8008738:	4b0a      	ldr	r3, [pc, #40]	; (8008764 <TelitCloudUpload+0x2f8>)
 800873a:	891a      	ldrh	r2, [r3, #8]
 800873c:	23fa      	movs	r3, #250	; 0xfa
 800873e:	00db      	lsls	r3, r3, #3
 8008740:	429a      	cmp	r2, r3
 8008742:	d3e9      	bcc.n	8008718 <TelitCloudUpload+0x2ac>
      return false;
 8008744:	2400      	movs	r4, #0
 8008746:	e7e7      	b.n	8008718 <TelitCloudUpload+0x2ac>
    modem_data.modem_power_en = false;
 8008748:	4b08      	ldr	r3, [pc, #32]	; (800876c <TelitCloudUpload+0x300>)
 800874a:	2200      	movs	r2, #0
 800874c:	701a      	strb	r2, [r3, #0]
    return return_error;
 800874e:	3402      	adds	r4, #2
 8008750:	e6ab      	b.n	80084aa <TelitCloudUpload+0x3e>
    return_error = MODEM_CMD_NO_RESPONSE;
 8008752:	2403      	movs	r4, #3
 8008754:	e695      	b.n	8008482 <TelitCloudUpload+0x16>
      return_error = MODEM_NET_SELECT_FAIL;
 8008756:	2407      	movs	r4, #7
 8008758:	e693      	b.n	8008482 <TelitCloudUpload+0x16>
    return_error = MODEM_CMD_NO_RESPONSE;
 800875a:	2403      	movs	r4, #3
 800875c:	e691      	b.n	8008482 <TelitCloudUpload+0x16>
      return_error = MODEM_NO_OPERATOR_PRESENT;
 800875e:	2408      	movs	r4, #8
 8008760:	e68f      	b.n	8008482 <TelitCloudUpload+0x16>
 8008762:	46c0      	nop			; (mov r8, r8)
 8008764:	20002fa8 	.word	0x20002fa8
 8008768:	200029d0 	.word	0x200029d0
 800876c:	20002ac4 	.word	0x20002ac4
 8008770:	00000bb8 	.word	0x00000bb8
 8008774:	200027c4 	.word	0x200027c4
 8008778:	20002a10 	.word	0x20002a10
 800877c:	0800dfd8 	.word	0x0800dfd8
 8008780:	0800e114 	.word	0x0800e114
 8008784:	0800e11c 	.word	0x0800e11c
 8008788:	0800e12c 	.word	0x0800e12c
 800878c:	0800e138 	.word	0x0800e138
 8008790:	0800e140 	.word	0x0800e140
 8008794:	00001388 	.word	0x00001388
 8008798:	0800e14c 	.word	0x0800e14c
 800879c:	0800e154 	.word	0x0800e154
 80087a0:	0800e184 	.word	0x0800e184
 80087a4:	0800e190 	.word	0x0800e190
 80087a8:	0800e1ac 	.word	0x0800e1ac
 80087ac:	0800e164 	.word	0x0800e164
 80087b0:	0800e19c 	.word	0x0800e19c
 80087b4:	0800e1b8 	.word	0x0800e1b8
    HAL_GPIO_WritePin(LDO_OFF_GPIO_Port, LDO_OFF_Pin, GPIO_PIN_SET);
 80087b8:	20a0      	movs	r0, #160	; 0xa0
 80087ba:	2201      	movs	r2, #1
 80087bc:	2140      	movs	r1, #64	; 0x40
 80087be:	05c0      	lsls	r0, r0, #23
 80087c0:	f7fb f885 	bl	80038ce <HAL_GPIO_WritePin>
    osDelay(3000);
 80087c4:	4808      	ldr	r0, [pc, #32]	; (80087e8 <TelitCloudUpload+0x37c>)
 80087c6:	f7fc ff24 	bl	8005612 <osDelay>
    if(*pwr_level < PWRONLVL)
 80087ca:	4b08      	ldr	r3, [pc, #32]	; (80087ec <TelitCloudUpload+0x380>)
 80087cc:	891a      	ldrh	r2, [r3, #8]
 80087ce:	23fa      	movs	r3, #250	; 0xfa
 80087d0:	00db      	lsls	r3, r3, #3
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d201      	bcs.n	80087da <TelitCloudUpload+0x36e>
      return true;
 80087d6:	2301      	movs	r3, #1
 80087d8:	e661      	b.n	800849e <TelitCloudUpload+0x32>
      return false;
 80087da:	2300      	movs	r3, #0
 80087dc:	e65f      	b.n	800849e <TelitCloudUpload+0x32>
    modem_data.modem_power_en = false;
 80087de:	4b04      	ldr	r3, [pc, #16]	; (80087f0 <TelitCloudUpload+0x384>)
 80087e0:	2200      	movs	r2, #0
 80087e2:	701a      	strb	r2, [r3, #0]
    return return_error;
 80087e4:	2402      	movs	r4, #2
 80087e6:	e660      	b.n	80084aa <TelitCloudUpload+0x3e>
 80087e8:	00000bb8 	.word	0x00000bb8
 80087ec:	20002fa8 	.word	0x20002fa8
 80087f0:	20002ac4 	.word	0x20002ac4

080087f4 <MonitorTask>:
extern EEPROMStorageTypDef eeprom_info;
osThreadId MonitorTaskHandle;
DevStorageTypDef storage;

void MonitorTask(void const * argument)
{
 80087f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087f6:	46d6      	mov	lr, sl
 80087f8:	464f      	mov	r7, r9
 80087fa:	4646      	mov	r6, r8
 80087fc:	b5c0      	push	{r6, r7, lr}
 80087fe:	b086      	sub	sp, #24
  static uint32_t mon_dayticks = 0;
  static uint32_t daytime_counter= 0;
  static uint32_t nighttime_counter= 0;

  /*Start ADC DMA Process*/
  if(HAL_ADC_Start_DMA(&hadc, (uint32_t *)storage.adc_data, 5) != HAL_OK)
 8008800:	4996      	ldr	r1, [pc, #600]	; (8008a5c <MonitorTask+0x268>)
 8008802:	4897      	ldr	r0, [pc, #604]	; (8008a60 <MonitorTask+0x26c>)
 8008804:	2205      	movs	r2, #5
 8008806:	f7fa fab5 	bl	8002d74 <HAL_ADC_Start_DMA>
 800880a:	2800      	cmp	r0, #0
 800880c:	d122      	bne.n	8008854 <MonitorTask+0x60>
  {
	  Error_Handler();
  }

  /*Day time flag initialization*/
  osDelay(1000);
 800880e:	20fa      	movs	r0, #250	; 0xfa
 8008810:	0080      	lsls	r0, r0, #2
 8008812:	f7fc fefe 	bl	8005612 <osDelay>
  memcpy(local_adc_data, storage.adc_data, sizeof(storage.adc_data));
 8008816:	4c91      	ldr	r4, [pc, #580]	; (8008a5c <MonitorTask+0x268>)
 8008818:	220a      	movs	r2, #10
 800881a:	0021      	movs	r1, r4
 800881c:	4668      	mov	r0, sp
 800881e:	f000 fe22 	bl	8009466 <memcpy>
  storage.vinput_mv = (uint32_t)(local_adc_data[2] * VINPUT_CONST);
 8008822:	466b      	mov	r3, sp
 8008824:	8898      	ldrh	r0, [r3, #4]
 8008826:	f7f9 ff41 	bl	80026ac <__aeabi_i2d>
 800882a:	4a8e      	ldr	r2, [pc, #568]	; (8008a64 <MonitorTask+0x270>)
 800882c:	4b8e      	ldr	r3, [pc, #568]	; (8008a68 <MonitorTask+0x274>)
 800882e:	f7f9 f8a5 	bl	800197c <__aeabi_dmul>
 8008832:	f7f7 fe9f 	bl	8000574 <__aeabi_d2uiz>
 8008836:	60e0      	str	r0, [r4, #12]
  if((int)(storage.vinput_mv+eeprom_info.vin_hys_mv) > eeprom_info.vin_limit_mv)
 8008838:	4b8c      	ldr	r3, [pc, #560]	; (8008a6c <MonitorTask+0x278>)
 800883a:	895a      	ldrh	r2, [r3, #10]
 800883c:	1880      	adds	r0, r0, r2
 800883e:	891b      	ldrh	r3, [r3, #8]
 8008840:	4298      	cmp	r0, r3
 8008842:	dd0a      	ble.n	800885a <MonitorTask+0x66>
  {storage.daytime_flag = 1;}
 8008844:	4b85      	ldr	r3, [pc, #532]	; (8008a5c <MonitorTask+0x268>)
 8008846:	223d      	movs	r2, #61	; 0x3d
 8008848:	2101      	movs	r1, #1
 800884a:	5499      	strb	r1, [r3, r2]
  else
  {storage.daytime_flag = 0;}

  /*Start timer*/
  HAL_TIM_Base_Start_IT(&htim21);
 800884c:	4888      	ldr	r0, [pc, #544]	; (8008a70 <MonitorTask+0x27c>)
 800884e:	f7fb fed7 	bl	8004600 <HAL_TIM_Base_Start_IT>
 8008852:	e01e      	b.n	8008892 <MonitorTask+0x9e>
	  Error_Handler();
 8008854:	f7fe ff9a 	bl	800778c <Error_Handler>
 8008858:	e7d9      	b.n	800880e <MonitorTask+0x1a>
  {storage.daytime_flag = 0;}
 800885a:	4b80      	ldr	r3, [pc, #512]	; (8008a5c <MonitorTask+0x268>)
 800885c:	223d      	movs	r2, #61	; 0x3d
 800885e:	2100      	movs	r1, #0
 8008860:	5499      	strb	r1, [r3, r2]
 8008862:	e7f3      	b.n	800884c <MonitorTask+0x58>
		  storage.vard_input_mv = (uint32_t)(local_adc_data[4] * VARD_CONST);

		  /*Convert&Store Input Current*/
		  storage.cinput_ma = (int32_t)((local_adc_data[0] - COFFSET_CONST) * CSENSE_CONST);
		  if(storage.cinput_ma < 0)
		  {storage.cinput_ma = 0;}
 8008864:	4b7d      	ldr	r3, [pc, #500]	; (8008a5c <MonitorTask+0x268>)
 8008866:	2200      	movs	r2, #0
 8008868:	619a      	str	r2, [r3, #24]
 800886a:	e054      	b.n	8008916 <MonitorTask+0x122>

		  /*Convert&Store Output Current*/
		  storage.coutput_ma = (int32_t)((local_adc_data[1] -COFFSET_CONST) * CSENSE_CONST);
		  if(storage.coutput_ma < 0)
		  {storage.coutput_ma = 0;}
 800886c:	2200      	movs	r2, #0
 800886e:	61da      	str	r2, [r3, #28]
 8008870:	e060      	b.n	8008934 <MonitorTask+0x140>
		  if((int)(storage.vinput_mv+eeprom_info.vin_hys_mv) > eeprom_info.vin_limit_mv)
		  {
			  daytime_counter++;
			  nighttime_counter= 0;
		  }
		  else if((int)(storage.vinput_mv-eeprom_info.vin_hys_mv) < eeprom_info.vin_limit_mv)
 8008872:	4643      	mov	r3, r8
 8008874:	1a59      	subs	r1, r3, r1
 8008876:	428a      	cmp	r2, r1
 8008878:	dc00      	bgt.n	800887c <MonitorTask+0x88>
 800887a:	e0c0      	b.n	80089fe <MonitorTask+0x20a>
		  {
			  daytime_counter= 0;
 800887c:	4b7d      	ldr	r3, [pc, #500]	; (8008a74 <MonitorTask+0x280>)
 800887e:	2200      	movs	r2, #0
 8008880:	601a      	str	r2, [r3, #0]
			  nighttime_counter++;
 8008882:	4a7d      	ldr	r2, [pc, #500]	; (8008a78 <MonitorTask+0x284>)
 8008884:	6813      	ldr	r3, [r2, #0]
 8008886:	3301      	adds	r3, #1
 8008888:	6013      	str	r3, [r2, #0]
 800888a:	e0b8      	b.n	80089fe <MonitorTask+0x20a>
			  if(storage.daylength_s > HOURS_24)
			  {storage.daylength_s = HOURS_24;}
		  }
		  else
		  {
			  mon_dayticks = 0;
 800888c:	4b7b      	ldr	r3, [pc, #492]	; (8008a7c <MonitorTask+0x288>)
 800888e:	2200      	movs	r2, #0
 8008890:	601a      	str	r2, [r3, #0]
	  evt = osSignalWait (0x00000001, osWaitForever);
 8008892:	2201      	movs	r2, #1
 8008894:	4252      	negs	r2, r2
 8008896:	2101      	movs	r1, #1
 8008898:	a803      	add	r0, sp, #12
 800889a:	f7fc fef3 	bl	8005684 <osSignalWait>
	  if (evt.status == osEventSignal)
 800889e:	9b03      	ldr	r3, [sp, #12]
 80088a0:	2b08      	cmp	r3, #8
 80088a2:	d1f6      	bne.n	8008892 <MonitorTask+0x9e>
		  HAL_IWDG_Refresh(&hiwdg);
 80088a4:	4876      	ldr	r0, [pc, #472]	; (8008a80 <MonitorTask+0x28c>)
 80088a6:	f7fb f84d 	bl	8003944 <HAL_IWDG_Refresh>
		  memcpy(local_adc_data, storage.adc_data, sizeof(storage.adc_data));
 80088aa:	4c6c      	ldr	r4, [pc, #432]	; (8008a5c <MonitorTask+0x268>)
 80088ac:	220a      	movs	r2, #10
 80088ae:	0021      	movs	r1, r4
 80088b0:	4668      	mov	r0, sp
 80088b2:	f000 fdd8 	bl	8009466 <memcpy>
		  storage.vinput_mv = (uint32_t)(local_adc_data[2] * VINPUT_CONST);
 80088b6:	466b      	mov	r3, sp
 80088b8:	8898      	ldrh	r0, [r3, #4]
 80088ba:	f7f9 fef7 	bl	80026ac <__aeabi_i2d>
 80088be:	4a69      	ldr	r2, [pc, #420]	; (8008a64 <MonitorTask+0x270>)
 80088c0:	4b69      	ldr	r3, [pc, #420]	; (8008a68 <MonitorTask+0x274>)
 80088c2:	f7f9 f85b 	bl	800197c <__aeabi_dmul>
 80088c6:	f7f7 fe55 	bl	8000574 <__aeabi_d2uiz>
 80088ca:	4680      	mov	r8, r0
 80088cc:	60e0      	str	r0, [r4, #12]
		  storage.vbatt_mv = (uint32_t)(local_adc_data[3] * VBATT_CONST);
 80088ce:	466b      	mov	r3, sp
 80088d0:	88d8      	ldrh	r0, [r3, #6]
 80088d2:	f7f9 feeb 	bl	80026ac <__aeabi_i2d>
 80088d6:	2200      	movs	r2, #0
 80088d8:	4b6a      	ldr	r3, [pc, #424]	; (8008a84 <MonitorTask+0x290>)
 80088da:	f7f9 f84f 	bl	800197c <__aeabi_dmul>
 80088de:	f7f7 fe49 	bl	8000574 <__aeabi_d2uiz>
 80088e2:	6120      	str	r0, [r4, #16]
		  storage.vard_input_mv = (uint32_t)(local_adc_data[4] * VARD_CONST);
 80088e4:	466b      	mov	r3, sp
 80088e6:	8918      	ldrh	r0, [r3, #8]
 80088e8:	f7f9 fee0 	bl	80026ac <__aeabi_i2d>
 80088ec:	4a66      	ldr	r2, [pc, #408]	; (8008a88 <MonitorTask+0x294>)
 80088ee:	4b67      	ldr	r3, [pc, #412]	; (8008a8c <MonitorTask+0x298>)
 80088f0:	f7f9 f844 	bl	800197c <__aeabi_dmul>
 80088f4:	f7f7 fe3e 	bl	8000574 <__aeabi_d2uiz>
 80088f8:	6160      	str	r0, [r4, #20]
		  storage.cinput_ma = (int32_t)((local_adc_data[0] - COFFSET_CONST) * CSENSE_CONST);
 80088fa:	466b      	mov	r3, sp
 80088fc:	8818      	ldrh	r0, [r3, #0]
 80088fe:	3841      	subs	r0, #65	; 0x41
 8008900:	f7f9 fed4 	bl	80026ac <__aeabi_i2d>
 8008904:	4a62      	ldr	r2, [pc, #392]	; (8008a90 <MonitorTask+0x29c>)
 8008906:	4b63      	ldr	r3, [pc, #396]	; (8008a94 <MonitorTask+0x2a0>)
 8008908:	f7f9 f838 	bl	800197c <__aeabi_dmul>
 800890c:	f7f9 fe98 	bl	8002640 <__aeabi_d2iz>
 8008910:	61a0      	str	r0, [r4, #24]
		  if(storage.cinput_ma < 0)
 8008912:	2800      	cmp	r0, #0
 8008914:	dba6      	blt.n	8008864 <MonitorTask+0x70>
		  storage.coutput_ma = (int32_t)((local_adc_data[1] -COFFSET_CONST) * CSENSE_CONST);
 8008916:	466b      	mov	r3, sp
 8008918:	8858      	ldrh	r0, [r3, #2]
 800891a:	3841      	subs	r0, #65	; 0x41
 800891c:	f7f9 fec6 	bl	80026ac <__aeabi_i2d>
 8008920:	4a5b      	ldr	r2, [pc, #364]	; (8008a90 <MonitorTask+0x29c>)
 8008922:	4b5c      	ldr	r3, [pc, #368]	; (8008a94 <MonitorTask+0x2a0>)
 8008924:	f7f9 f82a 	bl	800197c <__aeabi_dmul>
 8008928:	f7f9 fe8a 	bl	8002640 <__aeabi_d2iz>
 800892c:	4b4b      	ldr	r3, [pc, #300]	; (8008a5c <MonitorTask+0x268>)
 800892e:	61d8      	str	r0, [r3, #28]
		  if(storage.coutput_ma < 0)
 8008930:	2800      	cmp	r0, #0
 8008932:	db9b      	blt.n	800886c <MonitorTask+0x78>
		  storage.energy_stored_mah += (double)(storage.cinput_ma * ETIME_CONST);
 8008934:	4e49      	ldr	r6, [pc, #292]	; (8008a5c <MonitorTask+0x268>)
 8008936:	69b0      	ldr	r0, [r6, #24]
 8008938:	f7f9 feb8 	bl	80026ac <__aeabi_i2d>
 800893c:	4a56      	ldr	r2, [pc, #344]	; (8008a98 <MonitorTask+0x2a4>)
 800893e:	4b57      	ldr	r3, [pc, #348]	; (8008a9c <MonitorTask+0x2a8>)
 8008940:	f7f9 f81c 	bl	800197c <__aeabi_dmul>
 8008944:	6a32      	ldr	r2, [r6, #32]
 8008946:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008948:	f7f8 f8be 	bl	8000ac8 <__aeabi_dadd>
 800894c:	0004      	movs	r4, r0
 800894e:	000d      	movs	r5, r1
 8008950:	6234      	str	r4, [r6, #32]
 8008952:	6275      	str	r5, [r6, #36]	; 0x24
		  if(storage.energy_stored_mah > eeprom_info.batt_full_mah)
 8008954:	4b45      	ldr	r3, [pc, #276]	; (8008a6c <MonitorTask+0x278>)
 8008956:	89db      	ldrh	r3, [r3, #14]
 8008958:	469a      	mov	sl, r3
 800895a:	0018      	movs	r0, r3
 800895c:	f7f9 fea6 	bl	80026ac <__aeabi_i2d>
 8008960:	0006      	movs	r6, r0
 8008962:	000f      	movs	r7, r1
 8008964:	0002      	movs	r2, r0
 8008966:	000b      	movs	r3, r1
 8008968:	0020      	movs	r0, r4
 800896a:	0029      	movs	r1, r5
 800896c:	f7f7 fd88 	bl	8000480 <__aeabi_dcmpgt>
 8008970:	2800      	cmp	r0, #0
 8008972:	d005      	beq.n	8008980 <MonitorTask+0x18c>
		  {storage.energy_stored_mah = eeprom_info.batt_full_mah;}
 8008974:	4c39      	ldr	r4, [pc, #228]	; (8008a5c <MonitorTask+0x268>)
 8008976:	4650      	mov	r0, sl
 8008978:	f7f9 fec8 	bl	800270c <__aeabi_ui2d>
 800897c:	6220      	str	r0, [r4, #32]
 800897e:	6261      	str	r1, [r4, #36]	; 0x24
		  storage.energy_released_mah += (double)(storage.coutput_ma * ETIME_CONST);
 8008980:	4b36      	ldr	r3, [pc, #216]	; (8008a5c <MonitorTask+0x268>)
 8008982:	4699      	mov	r9, r3
 8008984:	69d8      	ldr	r0, [r3, #28]
 8008986:	f7f9 fe91 	bl	80026ac <__aeabi_i2d>
 800898a:	4a43      	ldr	r2, [pc, #268]	; (8008a98 <MonitorTask+0x2a4>)
 800898c:	4b43      	ldr	r3, [pc, #268]	; (8008a9c <MonitorTask+0x2a8>)
 800898e:	f7f8 fff5 	bl	800197c <__aeabi_dmul>
 8008992:	0004      	movs	r4, r0
 8008994:	000d      	movs	r5, r1
 8008996:	464b      	mov	r3, r9
 8008998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800899a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899c:	f7f8 f894 	bl	8000ac8 <__aeabi_dadd>
 80089a0:	0002      	movs	r2, r0
 80089a2:	000b      	movs	r3, r1
 80089a4:	4649      	mov	r1, r9
 80089a6:	628a      	str	r2, [r1, #40]	; 0x28
 80089a8:	62cb      	str	r3, [r1, #44]	; 0x2c
		  if(storage.energy_released_mah > eeprom_info.batt_full_mah)
 80089aa:	0030      	movs	r0, r6
 80089ac:	0039      	movs	r1, r7
 80089ae:	f7f7 fd53 	bl	8000458 <__aeabi_dcmplt>
 80089b2:	2800      	cmp	r0, #0
 80089b4:	d005      	beq.n	80089c2 <MonitorTask+0x1ce>
		  {storage.energy_released_mah = eeprom_info.batt_full_mah;}
 80089b6:	464e      	mov	r6, r9
 80089b8:	4650      	mov	r0, sl
 80089ba:	f7f9 fea7 	bl	800270c <__aeabi_ui2d>
 80089be:	62b0      	str	r0, [r6, #40]	; 0x28
 80089c0:	62f1      	str	r1, [r6, #44]	; 0x2c
		  storage.total_batt_ouput_ah += (double)(storage.coutput_ma * ETIME_CONST/1000);
 80089c2:	2200      	movs	r2, #0
 80089c4:	4b36      	ldr	r3, [pc, #216]	; (8008aa0 <MonitorTask+0x2ac>)
 80089c6:	0020      	movs	r0, r4
 80089c8:	0029      	movs	r1, r5
 80089ca:	f7f8 fbdd 	bl	8001188 <__aeabi_ddiv>
 80089ce:	0002      	movs	r2, r0
 80089d0:	000b      	movs	r3, r1
 80089d2:	4c22      	ldr	r4, [pc, #136]	; (8008a5c <MonitorTask+0x268>)
 80089d4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80089d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089d8:	f7f8 f876 	bl	8000ac8 <__aeabi_dadd>
 80089dc:	6320      	str	r0, [r4, #48]	; 0x30
 80089de:	6361      	str	r1, [r4, #52]	; 0x34
		  if((int)(storage.vinput_mv+eeprom_info.vin_hys_mv) > eeprom_info.vin_limit_mv)
 80089e0:	4b22      	ldr	r3, [pc, #136]	; (8008a6c <MonitorTask+0x278>)
 80089e2:	8959      	ldrh	r1, [r3, #10]
 80089e4:	4642      	mov	r2, r8
 80089e6:	1850      	adds	r0, r2, r1
 80089e8:	891a      	ldrh	r2, [r3, #8]
 80089ea:	4290      	cmp	r0, r2
 80089ec:	dc00      	bgt.n	80089f0 <MonitorTask+0x1fc>
 80089ee:	e740      	b.n	8008872 <MonitorTask+0x7e>
			  daytime_counter++;
 80089f0:	4a20      	ldr	r2, [pc, #128]	; (8008a74 <MonitorTask+0x280>)
 80089f2:	6813      	ldr	r3, [r2, #0]
 80089f4:	3301      	adds	r3, #1
 80089f6:	6013      	str	r3, [r2, #0]
			  nighttime_counter= 0;
 80089f8:	4b1f      	ldr	r3, [pc, #124]	; (8008a78 <MonitorTask+0x284>)
 80089fa:	2200      	movs	r2, #0
 80089fc:	601a      	str	r2, [r3, #0]
		  if(daytime_counter > TIME_INTEG)
 80089fe:	4b1d      	ldr	r3, [pc, #116]	; (8008a74 <MonitorTask+0x280>)
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	4b28      	ldr	r3, [pc, #160]	; (8008aa4 <MonitorTask+0x2b0>)
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d906      	bls.n	8008a16 <MonitorTask+0x222>
			  storage.daytime_flag = 1;
 8008a08:	4b14      	ldr	r3, [pc, #80]	; (8008a5c <MonitorTask+0x268>)
 8008a0a:	223d      	movs	r2, #61	; 0x3d
 8008a0c:	2101      	movs	r1, #1
 8008a0e:	5499      	strb	r1, [r3, r2]
			  daytime_counter= 0;
 8008a10:	4b18      	ldr	r3, [pc, #96]	; (8008a74 <MonitorTask+0x280>)
 8008a12:	2200      	movs	r2, #0
 8008a14:	601a      	str	r2, [r3, #0]
		  if(nighttime_counter > TIME_INTEG)
 8008a16:	4b18      	ldr	r3, [pc, #96]	; (8008a78 <MonitorTask+0x284>)
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	4b22      	ldr	r3, [pc, #136]	; (8008aa4 <MonitorTask+0x2b0>)
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d905      	bls.n	8008a2c <MonitorTask+0x238>
			  storage.daytime_flag = 0;
 8008a20:	4b0e      	ldr	r3, [pc, #56]	; (8008a5c <MonitorTask+0x268>)
 8008a22:	2200      	movs	r2, #0
 8008a24:	213d      	movs	r1, #61	; 0x3d
 8008a26:	545a      	strb	r2, [r3, r1]
			  nighttime_counter= 0;
 8008a28:	4b13      	ldr	r3, [pc, #76]	; (8008a78 <MonitorTask+0x284>)
 8008a2a:	601a      	str	r2, [r3, #0]
		  if(storage.daytime_flag)
 8008a2c:	4b0b      	ldr	r3, [pc, #44]	; (8008a5c <MonitorTask+0x268>)
 8008a2e:	223d      	movs	r2, #61	; 0x3d
 8008a30:	5c9b      	ldrb	r3, [r3, r2]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d100      	bne.n	8008a38 <MonitorTask+0x244>
 8008a36:	e729      	b.n	800888c <MonitorTask+0x98>
			  mon_dayticks++;
 8008a38:	4b10      	ldr	r3, [pc, #64]	; (8008a7c <MonitorTask+0x288>)
 8008a3a:	6818      	ldr	r0, [r3, #0]
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	6018      	str	r0, [r3, #0]
			  storage.daylength_s = (uint32_t)(mon_dayticks/10);
 8008a40:	210a      	movs	r1, #10
 8008a42:	f7f7 fb7d 	bl	8000140 <__udivsi3>
 8008a46:	4b05      	ldr	r3, [pc, #20]	; (8008a5c <MonitorTask+0x268>)
 8008a48:	6398      	str	r0, [r3, #56]	; 0x38
			  if(storage.daylength_s > HOURS_24)
 8008a4a:	4b17      	ldr	r3, [pc, #92]	; (8008aa8 <MonitorTask+0x2b4>)
 8008a4c:	4298      	cmp	r0, r3
 8008a4e:	d800      	bhi.n	8008a52 <MonitorTask+0x25e>
 8008a50:	e71f      	b.n	8008892 <MonitorTask+0x9e>
			  {storage.daylength_s = HOURS_24;}
 8008a52:	4b02      	ldr	r3, [pc, #8]	; (8008a5c <MonitorTask+0x268>)
 8008a54:	4a14      	ldr	r2, [pc, #80]	; (8008aa8 <MonitorTask+0x2b4>)
 8008a56:	639a      	str	r2, [r3, #56]	; 0x38
 8008a58:	e71b      	b.n	8008892 <MonitorTask+0x9e>
 8008a5a:	46c0      	nop			; (mov r8, r8)
 8008a5c:	20002fa8 	.word	0x20002fa8
 8008a60:	200027e8 	.word	0x200027e8
 8008a64:	6c8b4396 	.word	0x6c8b4396
 8008a68:	401d7be7 	.word	0x401d7be7
 8008a6c:	200027d0 	.word	0x200027d0
 8008a70:	20002950 	.word	0x20002950
 8008a74:	20002f98 	.word	0x20002f98
 8008a78:	20002fa0 	.word	0x20002fa0
 8008a7c:	20002f9c 	.word	0x20002f9c
 8008a80:	20002940 	.word	0x20002940
 8008a84:	40100000 	.word	0x40100000
 8008a88:	83126e98 	.word	0x83126e98
 8008a8c:	3fe9cac0 	.word	0x3fe9cac0
 8008a90:	2b020c4a 	.word	0x2b020c4a
 8008a94:	3fff1687 	.word	0x3fff1687
 8008a98:	e1812c13 	.word	0xe1812c13
 8008a9c:	3efd208b 	.word	0x3efd208b
 8008aa0:	408f4000 	.word	0x408f4000
 8008aa4:	00001770 	.word	0x00001770
 8008aa8:	00015180 	.word	0x00015180

08008aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008aac:	b500      	push	{lr}
 8008aae:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8008ab0:	2208      	movs	r2, #8
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	4668      	mov	r0, sp
 8008ab6:	f000 fc0d 	bl	80092d4 <memset>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008aba:	4b11      	ldr	r3, [pc, #68]	; (8008b00 <HAL_MspInit+0x54>)
 8008abc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008abe:	2101      	movs	r1, #1
 8008ac0:	430a      	orrs	r2, r1
 8008ac2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8008ac4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008ac6:	2280      	movs	r2, #128	; 0x80
 8008ac8:	0552      	lsls	r2, r2, #21
 8008aca:	430a      	orrs	r2, r1
 8008acc:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8008ace:	2002      	movs	r0, #2
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	2103      	movs	r1, #3
 8008ad4:	4240      	negs	r0, r0
 8008ad6:	f7fa fac1 	bl	800305c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 3, 0);
 8008ada:	2200      	movs	r2, #0
 8008adc:	2103      	movs	r1, #3
 8008ade:	2004      	movs	r0, #4
 8008ae0:	f7fa fabc 	bl	800305c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8008ae4:	2004      	movs	r0, #4
 8008ae6:	f7fa fae9 	bl	80030bc <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8008aea:	23c0      	movs	r3, #192	; 0xc0
 8008aec:	9300      	str	r3, [sp, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8008aee:	2300      	movs	r3, #0
 8008af0:	9301      	str	r3, [sp, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8008af2:	4668      	mov	r0, sp
 8008af4:	f7fa ff2e 	bl	8003954 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8008af8:	f7fa ff6c 	bl	80039d4 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008afc:	b003      	add	sp, #12
 8008afe:	bd00      	pop	{pc}
 8008b00:	40021000 	.word	0x40021000

08008b04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008b04:	b510      	push	{r4, lr}
 8008b06:	b086      	sub	sp, #24
 8008b08:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b0a:	2214      	movs	r2, #20
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	a801      	add	r0, sp, #4
 8008b10:	f000 fbe0 	bl	80092d4 <memset>
  if(hadc->Instance==ADC1)
 8008b14:	6822      	ldr	r2, [r4, #0]
 8008b16:	4b21      	ldr	r3, [pc, #132]	; (8008b9c <HAL_ADC_MspInit+0x98>)
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d001      	beq.n	8008b20 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8008b1c:	b006      	add	sp, #24
 8008b1e:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008b20:	4b1f      	ldr	r3, [pc, #124]	; (8008ba0 <HAL_ADC_MspInit+0x9c>)
 8008b22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008b24:	2280      	movs	r2, #128	; 0x80
 8008b26:	0092      	lsls	r2, r2, #2
 8008b28:	430a      	orrs	r2, r1
 8008b2a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008b2e:	2201      	movs	r2, #1
 8008b30:	4311      	orrs	r1, r2
 8008b32:	62d9      	str	r1, [r3, #44]	; 0x2c
 8008b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b36:	401a      	ands	r2, r3
 8008b38:	9200      	str	r2, [sp, #0]
 8008b3a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = ISENS1_Pin|ISENS2_Pin|VINPUT_Pin|VBAT_Pin
 8008b3c:	231f      	movs	r3, #31
 8008b3e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008b40:	3b1c      	subs	r3, #28
 8008b42:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b44:	20a0      	movs	r0, #160	; 0xa0
 8008b46:	a901      	add	r1, sp, #4
 8008b48:	05c0      	lsls	r0, r0, #23
 8008b4a:	f7fa fded 	bl	8003728 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8008b4e:	4815      	ldr	r0, [pc, #84]	; (8008ba4 <HAL_ADC_MspInit+0xa0>)
 8008b50:	4b15      	ldr	r3, [pc, #84]	; (8008ba8 <HAL_ADC_MspInit+0xa4>)
 8008b52:	6003      	str	r3, [r0, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8008b54:	2300      	movs	r3, #0
 8008b56:	6043      	str	r3, [r0, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008b58:	6083      	str	r3, [r0, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8008b5a:	60c3      	str	r3, [r0, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8008b5c:	3380      	adds	r3, #128	; 0x80
 8008b5e:	6103      	str	r3, [r0, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008b60:	3380      	adds	r3, #128	; 0x80
 8008b62:	6143      	str	r3, [r0, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008b64:	2380      	movs	r3, #128	; 0x80
 8008b66:	00db      	lsls	r3, r3, #3
 8008b68:	6183      	str	r3, [r0, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8008b6a:	2320      	movs	r3, #32
 8008b6c:	61c3      	str	r3, [r0, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8008b6e:	2380      	movs	r3, #128	; 0x80
 8008b70:	019b      	lsls	r3, r3, #6
 8008b72:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8008b74:	f7fa fbb6 	bl	80032e4 <HAL_DMA_Init>
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	d10b      	bne.n	8008b94 <HAL_ADC_MspInit+0x90>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8008b7c:	4b09      	ldr	r3, [pc, #36]	; (8008ba4 <HAL_ADC_MspInit+0xa0>)
 8008b7e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008b80:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 3, 0);
 8008b82:	2200      	movs	r2, #0
 8008b84:	2103      	movs	r1, #3
 8008b86:	200c      	movs	r0, #12
 8008b88:	f7fa fa68 	bl	800305c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8008b8c:	200c      	movs	r0, #12
 8008b8e:	f7fa fa95 	bl	80030bc <HAL_NVIC_EnableIRQ>
}
 8008b92:	e7c3      	b.n	8008b1c <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8008b94:	f7fe fdfa 	bl	800778c <Error_Handler>
 8008b98:	e7f0      	b.n	8008b7c <HAL_ADC_MspInit+0x78>
 8008b9a:	46c0      	nop			; (mov r8, r8)
 8008b9c:	40012400 	.word	0x40012400
 8008ba0:	40021000 	.word	0x40021000
 8008ba4:	20002868 	.word	0x20002868
 8008ba8:	40020008 	.word	0x40020008

08008bac <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8008bac:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8008bae:	6802      	ldr	r2, [r0, #0]
 8008bb0:	4b07      	ldr	r3, [pc, #28]	; (8008bd0 <HAL_CRC_MspInit+0x24>)
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d001      	beq.n	8008bba <HAL_CRC_MspInit+0xe>
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8008bb6:	b002      	add	sp, #8
 8008bb8:	4770      	bx	lr
    __HAL_RCC_CRC_CLK_ENABLE();
 8008bba:	4b06      	ldr	r3, [pc, #24]	; (8008bd4 <HAL_CRC_MspInit+0x28>)
 8008bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bbe:	2180      	movs	r1, #128	; 0x80
 8008bc0:	0149      	lsls	r1, r1, #5
 8008bc2:	430a      	orrs	r2, r1
 8008bc4:	631a      	str	r2, [r3, #48]	; 0x30
 8008bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc8:	400b      	ands	r3, r1
 8008bca:	9301      	str	r3, [sp, #4]
 8008bcc:	9b01      	ldr	r3, [sp, #4]
}
 8008bce:	e7f2      	b.n	8008bb6 <HAL_CRC_MspInit+0xa>
 8008bd0:	40023000 	.word	0x40023000
 8008bd4:	40021000 	.word	0x40021000

08008bd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008bd8:	b510      	push	{r4, lr}
  if(htim_base->Instance==TIM7)
 8008bda:	6803      	ldr	r3, [r0, #0]
 8008bdc:	4a11      	ldr	r2, [pc, #68]	; (8008c24 <HAL_TIM_Base_MspInit+0x4c>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d006      	beq.n	8008bf0 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(htim_base->Instance==TIM21)
 8008be2:	4a11      	ldr	r2, [pc, #68]	; (8008c28 <HAL_TIM_Base_MspInit+0x50>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d011      	beq.n	8008c0c <HAL_TIM_Base_MspInit+0x34>
    __HAL_RCC_TIM21_CLK_ENABLE();
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
  else if(htim_base->Instance==TIM22)
 8008be8:	4a10      	ldr	r2, [pc, #64]	; (8008c2c <HAL_TIM_Base_MspInit+0x54>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d014      	beq.n	8008c18 <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8008bee:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 8008bf0:	4a0f      	ldr	r2, [pc, #60]	; (8008c30 <HAL_TIM_Base_MspInit+0x58>)
 8008bf2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008bf4:	2120      	movs	r1, #32
 8008bf6:	430b      	orrs	r3, r1
 8008bf8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	391d      	subs	r1, #29
 8008bfe:	2012      	movs	r0, #18
 8008c00:	f7fa fa2c 	bl	800305c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8008c04:	2012      	movs	r0, #18
 8008c06:	f7fa fa59 	bl	80030bc <HAL_NVIC_EnableIRQ>
 8008c0a:	e7f0      	b.n	8008bee <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8008c0c:	4a08      	ldr	r2, [pc, #32]	; (8008c30 <HAL_TIM_Base_MspInit+0x58>)
 8008c0e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8008c10:	2104      	movs	r1, #4
 8008c12:	430b      	orrs	r3, r1
 8008c14:	6353      	str	r3, [r2, #52]	; 0x34
 8008c16:	e7ea      	b.n	8008bee <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8008c18:	4a05      	ldr	r2, [pc, #20]	; (8008c30 <HAL_TIM_Base_MspInit+0x58>)
 8008c1a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8008c1c:	2120      	movs	r1, #32
 8008c1e:	430b      	orrs	r3, r1
 8008c20:	6353      	str	r3, [r2, #52]	; 0x34
}
 8008c22:	e7e4      	b.n	8008bee <HAL_TIM_Base_MspInit+0x16>
 8008c24:	40001400 	.word	0x40001400
 8008c28:	40010800 	.word	0x40010800
 8008c2c:	40011400 	.word	0x40011400
 8008c30:	40021000 	.word	0x40021000

08008c34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008c34:	b510      	push	{r4, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c3a:	2214      	movs	r2, #20
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	a801      	add	r0, sp, #4
 8008c40:	f000 fb48 	bl	80092d4 <memset>
  if(huart->Instance==USART1)
 8008c44:	6822      	ldr	r2, [r4, #0]
 8008c46:	4b2e      	ldr	r3, [pc, #184]	; (8008d00 <HAL_UART_MspInit+0xcc>)
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d001      	beq.n	8008c50 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008c4c:	b006      	add	sp, #24
 8008c4e:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8008c50:	4b2c      	ldr	r3, [pc, #176]	; (8008d04 <HAL_UART_MspInit+0xd0>)
 8008c52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008c54:	2280      	movs	r2, #128	; 0x80
 8008c56:	01d2      	lsls	r2, r2, #7
 8008c58:	430a      	orrs	r2, r1
 8008c5a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008c5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008c5e:	2202      	movs	r2, #2
 8008c60:	4311      	orrs	r1, r2
 8008c62:	62d9      	str	r1, [r3, #44]	; 0x2c
 8008c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c66:	4013      	ands	r3, r2
 8008c68:	9300      	str	r3, [sp, #0]
 8008c6a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008c6c:	23c0      	movs	r3, #192	; 0xc0
 8008c6e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c70:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008c72:	3bbf      	subs	r3, #191	; 0xbf
 8008c74:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8008c76:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008c78:	a901      	add	r1, sp, #4
 8008c7a:	4823      	ldr	r0, [pc, #140]	; (8008d08 <HAL_UART_MspInit+0xd4>)
 8008c7c:	f7fa fd54 	bl	8003728 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8008c80:	4822      	ldr	r0, [pc, #136]	; (8008d0c <HAL_UART_MspInit+0xd8>)
 8008c82:	4b23      	ldr	r3, [pc, #140]	; (8008d10 <HAL_UART_MspInit+0xdc>)
 8008c84:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 8008c86:	2303      	movs	r3, #3
 8008c88:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008c8e:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008c90:	2280      	movs	r2, #128	; 0x80
 8008c92:	6102      	str	r2, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008c94:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008c96:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8008c98:	3320      	adds	r3, #32
 8008c9a:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8008c9c:	2380      	movs	r3, #128	; 0x80
 8008c9e:	019b      	lsls	r3, r3, #6
 8008ca0:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008ca2:	f7fa fb1f 	bl	80032e4 <HAL_DMA_Init>
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d123      	bne.n	8008cf2 <HAL_UART_MspInit+0xbe>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8008caa:	4b18      	ldr	r3, [pc, #96]	; (8008d0c <HAL_UART_MspInit+0xd8>)
 8008cac:	6723      	str	r3, [r4, #112]	; 0x70
 8008cae:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8008cb0:	4818      	ldr	r0, [pc, #96]	; (8008d14 <HAL_UART_MspInit+0xe0>)
 8008cb2:	4b19      	ldr	r3, [pc, #100]	; (8008d18 <HAL_UART_MspInit+0xe4>)
 8008cb4:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008cba:	330d      	adds	r3, #13
 8008cbc:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008cc2:	2280      	movs	r2, #128	; 0x80
 8008cc4:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008cc6:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008cc8:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8008cca:	61c3      	str	r3, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008ccc:	2380      	movs	r3, #128	; 0x80
 8008cce:	015b      	lsls	r3, r3, #5
 8008cd0:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8008cd2:	f7fa fb07 	bl	80032e4 <HAL_DMA_Init>
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	d10e      	bne.n	8008cf8 <HAL_UART_MspInit+0xc4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8008cda:	4b0e      	ldr	r3, [pc, #56]	; (8008d14 <HAL_UART_MspInit+0xe0>)
 8008cdc:	66e3      	str	r3, [r4, #108]	; 0x6c
 8008cde:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	2103      	movs	r1, #3
 8008ce4:	201b      	movs	r0, #27
 8008ce6:	f7fa f9b9 	bl	800305c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008cea:	201b      	movs	r0, #27
 8008cec:	f7fa f9e6 	bl	80030bc <HAL_NVIC_EnableIRQ>
}
 8008cf0:	e7ac      	b.n	8008c4c <HAL_UART_MspInit+0x18>
      Error_Handler();
 8008cf2:	f7fe fd4b 	bl	800778c <Error_Handler>
 8008cf6:	e7d8      	b.n	8008caa <HAL_UART_MspInit+0x76>
      Error_Handler();
 8008cf8:	f7fe fd48 	bl	800778c <Error_Handler>
 8008cfc:	e7ed      	b.n	8008cda <HAL_UART_MspInit+0xa6>
 8008cfe:	46c0      	nop			; (mov r8, r8)
 8008d00:	40013800 	.word	0x40013800
 8008d04:	40021000 	.word	0x40021000
 8008d08:	50000400 	.word	0x50000400
 8008d0c:	200028b0 	.word	0x200028b0
 8008d10:	40020030 	.word	0x40020030
 8008d14:	200028f8 	.word	0x200028f8
 8008d18:	4002001c 	.word	0x4002001c

08008d1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008d1c:	b500      	push	{lr}
 8008d1e:	b087      	sub	sp, #28
 8008d20:	0001      	movs	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8008d22:	2200      	movs	r2, #0
 8008d24:	200f      	movs	r0, #15
 8008d26:	f7fa f999 	bl	800305c <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008d2a:	200f      	movs	r0, #15
 8008d2c:	f7fa f9c6 	bl	80030bc <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8008d30:	4a11      	ldr	r2, [pc, #68]	; (8008d78 <HAL_InitTick+0x5c>)
 8008d32:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008d34:	2101      	movs	r1, #1
 8008d36:	430b      	orrs	r3, r1
 8008d38:	6393      	str	r3, [r2, #56]	; 0x38

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008d3a:	4669      	mov	r1, sp
 8008d3c:	a801      	add	r0, sp, #4
 8008d3e:	f7fb fa87 	bl	8004250 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8008d42:	f7fb fa65 	bl	8004210 <HAL_RCC_GetPCLK1Freq>
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008d46:	490d      	ldr	r1, [pc, #52]	; (8008d7c <HAL_InitTick+0x60>)
 8008d48:	f7f7 f9fa 	bl	8000140 <__udivsi3>
 8008d4c:	1e43      	subs	r3, r0, #1

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8008d4e:	480c      	ldr	r0, [pc, #48]	; (8008d80 <HAL_InitTick+0x64>)
 8008d50:	2280      	movs	r2, #128	; 0x80
 8008d52:	05d2      	lsls	r2, r2, #23
 8008d54:	6002      	str	r2, [r0, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8008d56:	4a0b      	ldr	r2, [pc, #44]	; (8008d84 <HAL_InitTick+0x68>)
 8008d58:	60c2      	str	r2, [r0, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8008d5a:	6043      	str	r3, [r0, #4]
  htim2.Init.ClockDivision = 0;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	6103      	str	r3, [r0, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008d60:	6083      	str	r3, [r0, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8008d62:	f7fb fbf9 	bl	8004558 <HAL_TIM_Base_Init>
 8008d66:	2800      	cmp	r0, #0
 8008d68:	d002      	beq.n	8008d70 <HAL_InitTick+0x54>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
  }

  /* Return function status */
  return HAL_ERROR;
 8008d6a:	2001      	movs	r0, #1
}
 8008d6c:	b007      	add	sp, #28
 8008d6e:	bd00      	pop	{pc}
    return HAL_TIM_Base_Start_IT(&htim2);
 8008d70:	4803      	ldr	r0, [pc, #12]	; (8008d80 <HAL_InitTick+0x64>)
 8008d72:	f7fb fc45 	bl	8004600 <HAL_TIM_Base_Start_IT>
 8008d76:	e7f9      	b.n	8008d6c <HAL_InitTick+0x50>
 8008d78:	40021000 	.word	0x40021000
 8008d7c:	000f4240 	.word	0x000f4240
 8008d80:	20002fe8 	.word	0x20002fe8
 8008d84:	000003e7 	.word	0x000003e7

08008d88 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008d88:	4770      	bx	lr

08008d8a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008d8a:	e7fe      	b.n	8008d8a <HardFault_Handler>

08008d8c <RCC_CRS_IRQHandler>:

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 8008d8c:	4770      	bx	lr
	...

08008d90 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008d90:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8008d92:	4802      	ldr	r0, [pc, #8]	; (8008d9c <DMA1_Channel1_IRQHandler+0xc>)
 8008d94:	f7fa fb78 	bl	8003488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008d98:	bd10      	pop	{r4, pc}
 8008d9a:	46c0      	nop			; (mov r8, r8)
 8008d9c:	20002868 	.word	0x20002868

08008da0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8008da0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8008da2:	4803      	ldr	r0, [pc, #12]	; (8008db0 <DMA1_Channel2_3_IRQHandler+0x10>)
 8008da4:	f7fa fb70 	bl	8003488 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8008da8:	4802      	ldr	r0, [pc, #8]	; (8008db4 <DMA1_Channel2_3_IRQHandler+0x14>)
 8008daa:	f7fa fb6d 	bl	8003488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8008dae:	bd10      	pop	{r4, pc}
 8008db0:	200028f8 	.word	0x200028f8
 8008db4:	200028b0 	.word	0x200028b0

08008db8 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8008db8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8008dba:	4802      	ldr	r0, [pc, #8]	; (8008dc4 <ADC1_COMP_IRQHandler+0xc>)
 8008dbc:	f7fa f87e 	bl	8002ebc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8008dc0:	bd10      	pop	{r4, pc}
 8008dc2:	46c0      	nop			; (mov r8, r8)
 8008dc4:	200027e8 	.word	0x200027e8

08008dc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008dc8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008dca:	4802      	ldr	r0, [pc, #8]	; (8008dd4 <TIM2_IRQHandler+0xc>)
 8008dcc:	f7fb fcec 	bl	80047a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008dd0:	bd10      	pop	{r4, pc}
 8008dd2:	46c0      	nop			; (mov r8, r8)
 8008dd4:	20002fe8 	.word	0x20002fe8

08008dd8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8008dd8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8008dda:	4802      	ldr	r0, [pc, #8]	; (8008de4 <TIM7_IRQHandler+0xc>)
 8008ddc:	f7fb fce4 	bl	80047a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8008de0:	bd10      	pop	{r4, pc}
 8008de2:	46c0      	nop			; (mov r8, r8)
 8008de4:	200029d0 	.word	0x200029d0

08008de8 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8008de8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8008dea:	4802      	ldr	r0, [pc, #8]	; (8008df4 <TIM21_IRQHandler+0xc>)
 8008dec:	f7fb fcdc 	bl	80047a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8008df0:	bd10      	pop	{r4, pc}
 8008df2:	46c0      	nop			; (mov r8, r8)
 8008df4:	20002950 	.word	0x20002950

08008df8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8008df8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008dfa:	4802      	ldr	r0, [pc, #8]	; (8008e04 <USART1_IRQHandler+0xc>)
 8008dfc:	f7fb feba 	bl	8004b74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008e00:	bd10      	pop	{r4, pc}
 8008e02:	46c0      	nop			; (mov r8, r8)
 8008e04:	20002a10 	.word	0x20002a10

08008e08 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8008e08:	2001      	movs	r0, #1
 8008e0a:	4770      	bx	lr

08008e0c <_kill>:

int _kill(int pid, int sig)
{
 8008e0c:	b510      	push	{r4, lr}
	errno = EINVAL;
 8008e0e:	f000 fae9 	bl	80093e4 <__errno>
 8008e12:	2316      	movs	r3, #22
 8008e14:	6003      	str	r3, [r0, #0]
	return -1;
 8008e16:	2001      	movs	r0, #1
}
 8008e18:	4240      	negs	r0, r0
 8008e1a:	bd10      	pop	{r4, pc}

08008e1c <_exit>:

void _exit (int status)
{
 8008e1c:	b510      	push	{r4, lr}
	_kill(status, -1);
 8008e1e:	2101      	movs	r1, #1
 8008e20:	4249      	negs	r1, r1
 8008e22:	f7ff fff3 	bl	8008e0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8008e26:	e7fe      	b.n	8008e26 <_exit+0xa>

08008e28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008e28:	b570      	push	{r4, r5, r6, lr}
 8008e2a:	000c      	movs	r4, r1
 8008e2c:	0016      	movs	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008e2e:	2500      	movs	r5, #0
 8008e30:	e004      	b.n	8008e3c <_read+0x14>
	{
		*ptr++ = __io_getchar();
 8008e32:	e000      	b.n	8008e36 <_read+0xe>
 8008e34:	bf00      	nop
 8008e36:	7020      	strb	r0, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008e38:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8008e3a:	3401      	adds	r4, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008e3c:	42b5      	cmp	r5, r6
 8008e3e:	dbf8      	blt.n	8008e32 <_read+0xa>
	}

return len;
}
 8008e40:	0030      	movs	r0, r6
 8008e42:	bd70      	pop	{r4, r5, r6, pc}

08008e44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008e44:	b570      	push	{r4, r5, r6, lr}
 8008e46:	0016      	movs	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008e48:	2400      	movs	r4, #0
 8008e4a:	e005      	b.n	8008e58 <_write+0x14>
	{
		__io_putchar(*ptr++);
 8008e4c:	1c4d      	adds	r5, r1, #1
 8008e4e:	7808      	ldrb	r0, [r1, #0]
 8008e50:	e000      	b.n	8008e54 <_write+0x10>
 8008e52:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008e54:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 8008e56:	0029      	movs	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008e58:	42b4      	cmp	r4, r6
 8008e5a:	dbf7      	blt.n	8008e4c <_write+0x8>
	}
	return len;
}
 8008e5c:	0030      	movs	r0, r6
 8008e5e:	bd70      	pop	{r4, r5, r6, pc}

08008e60 <_close>:

int _close(int file)
{
	return -1;
 8008e60:	2001      	movs	r0, #1
}
 8008e62:	4240      	negs	r0, r0
 8008e64:	4770      	bx	lr

08008e66 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8008e66:	2380      	movs	r3, #128	; 0x80
 8008e68:	019b      	lsls	r3, r3, #6
 8008e6a:	604b      	str	r3, [r1, #4]
	return 0;
}
 8008e6c:	2000      	movs	r0, #0
 8008e6e:	4770      	bx	lr

08008e70 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8008e70:	2001      	movs	r0, #1
 8008e72:	4770      	bx	lr

08008e74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8008e74:	2000      	movs	r0, #0
 8008e76:	4770      	bx	lr

08008e78 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8008e78:	4b10      	ldr	r3, [pc, #64]	; (8008ebc <SystemInit+0x44>)
 8008e7a:	6819      	ldr	r1, [r3, #0]
 8008e7c:	2280      	movs	r2, #128	; 0x80
 8008e7e:	0052      	lsls	r2, r2, #1
 8008e80:	430a      	orrs	r2, r1
 8008e82:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8008e84:	68da      	ldr	r2, [r3, #12]
 8008e86:	490e      	ldr	r1, [pc, #56]	; (8008ec0 <SystemInit+0x48>)
 8008e88:	400a      	ands	r2, r1
 8008e8a:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	490d      	ldr	r1, [pc, #52]	; (8008ec4 <SystemInit+0x4c>)
 8008e90:	400a      	ands	r2, r1
 8008e92:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8008e94:	689a      	ldr	r2, [r3, #8]
 8008e96:	2101      	movs	r1, #1
 8008e98:	438a      	bics	r2, r1
 8008e9a:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	490a      	ldr	r1, [pc, #40]	; (8008ec8 <SystemInit+0x50>)
 8008ea0:	400a      	ands	r2, r1
 8008ea2:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8008ea4:	68da      	ldr	r2, [r3, #12]
 8008ea6:	4909      	ldr	r1, [pc, #36]	; (8008ecc <SystemInit+0x54>)
 8008ea8:	400a      	ands	r2, r1
 8008eaa:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8008eac:	2200      	movs	r2, #0
 8008eae:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008eb0:	4b07      	ldr	r3, [pc, #28]	; (8008ed0 <SystemInit+0x58>)
 8008eb2:	2280      	movs	r2, #128	; 0x80
 8008eb4:	0512      	lsls	r2, r2, #20
 8008eb6:	609a      	str	r2, [r3, #8]
#endif
}
 8008eb8:	4770      	bx	lr
 8008eba:	46c0      	nop			; (mov r8, r8)
 8008ebc:	40021000 	.word	0x40021000
 8008ec0:	88ff400c 	.word	0x88ff400c
 8008ec4:	fef6fff6 	.word	0xfef6fff6
 8008ec8:	fffbffff 	.word	0xfffbffff
 8008ecc:	ff02ffff 	.word	0xff02ffff
 8008ed0:	e000ed00 	.word	0xe000ed00

08008ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8008ed4:	480d      	ldr	r0, [pc, #52]	; (8008f0c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8008ed6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8008ed8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008eda:	e003      	b.n	8008ee4 <LoopCopyDataInit>

08008edc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008edc:	4b0c      	ldr	r3, [pc, #48]	; (8008f10 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8008ede:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008ee0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008ee2:	3104      	adds	r1, #4

08008ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8008ee4:	480b      	ldr	r0, [pc, #44]	; (8008f14 <LoopForever+0xa>)
  ldr  r3, =_edata
 8008ee6:	4b0c      	ldr	r3, [pc, #48]	; (8008f18 <LoopForever+0xe>)
  adds  r2, r0, r1
 8008ee8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008eea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008eec:	d3f6      	bcc.n	8008edc <CopyDataInit>
  ldr  r2, =_sbss
 8008eee:	4a0b      	ldr	r2, [pc, #44]	; (8008f1c <LoopForever+0x12>)
  b  LoopFillZerobss
 8008ef0:	e002      	b.n	8008ef8 <LoopFillZerobss>

08008ef2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8008ef2:	2300      	movs	r3, #0
  str  r3, [r2]
 8008ef4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008ef6:	3204      	adds	r2, #4

08008ef8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8008ef8:	4b09      	ldr	r3, [pc, #36]	; (8008f20 <LoopForever+0x16>)
  cmp  r2, r3
 8008efa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008efc:	d3f9      	bcc.n	8008ef2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8008efe:	f7ff ffbb 	bl	8008e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008f02:	f000 fa75 	bl	80093f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008f06:	f7fe fb69 	bl	80075dc <main>

08008f0a <LoopForever>:

LoopForever:
    b LoopForever
 8008f0a:	e7fe      	b.n	8008f0a <LoopForever>
   ldr   r0, =_estack
 8008f0c:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8008f10:	0800e878 	.word	0x0800e878
  ldr  r0, =_sdata
 8008f14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008f18:	200006c4 	.word	0x200006c4
  ldr  r2, =_sbss
 8008f1c:	200006c8 	.word	0x200006c8
  ldr  r3, = _ebss
 8008f20:	20003338 	.word	0x20003338

08008f24 <DMA1_Channel4_5_6_7_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008f24:	e7fe      	b.n	8008f24 <DMA1_Channel4_5_6_7_IRQHandler>

08008f26 <atoi>:
 8008f26:	b510      	push	{r4, lr}
 8008f28:	220a      	movs	r2, #10
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	f000 f888 	bl	8009040 <strtol>
 8008f30:	bd10      	pop	{r4, pc}
	...

08008f34 <_strtol_l.constprop.0>:
 8008f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f36:	b087      	sub	sp, #28
 8008f38:	001e      	movs	r6, r3
 8008f3a:	9005      	str	r0, [sp, #20]
 8008f3c:	9101      	str	r1, [sp, #4]
 8008f3e:	9202      	str	r2, [sp, #8]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d048      	beq.n	8008fd6 <_strtol_l.constprop.0+0xa2>
 8008f44:	000b      	movs	r3, r1
 8008f46:	2e24      	cmp	r6, #36	; 0x24
 8008f48:	d845      	bhi.n	8008fd6 <_strtol_l.constprop.0+0xa2>
 8008f4a:	4a3b      	ldr	r2, [pc, #236]	; (8009038 <_strtol_l.constprop.0+0x104>)
 8008f4c:	2108      	movs	r1, #8
 8008f4e:	4694      	mov	ip, r2
 8008f50:	001a      	movs	r2, r3
 8008f52:	4660      	mov	r0, ip
 8008f54:	7814      	ldrb	r4, [r2, #0]
 8008f56:	3301      	adds	r3, #1
 8008f58:	5d00      	ldrb	r0, [r0, r4]
 8008f5a:	001d      	movs	r5, r3
 8008f5c:	0007      	movs	r7, r0
 8008f5e:	400f      	ands	r7, r1
 8008f60:	4208      	tst	r0, r1
 8008f62:	d1f5      	bne.n	8008f50 <_strtol_l.constprop.0+0x1c>
 8008f64:	2c2d      	cmp	r4, #45	; 0x2d
 8008f66:	d13d      	bne.n	8008fe4 <_strtol_l.constprop.0+0xb0>
 8008f68:	2701      	movs	r7, #1
 8008f6a:	781c      	ldrb	r4, [r3, #0]
 8008f6c:	1c95      	adds	r5, r2, #2
 8008f6e:	2e00      	cmp	r6, #0
 8008f70:	d05e      	beq.n	8009030 <_strtol_l.constprop.0+0xfc>
 8008f72:	2e10      	cmp	r6, #16
 8008f74:	d109      	bne.n	8008f8a <_strtol_l.constprop.0+0x56>
 8008f76:	2c30      	cmp	r4, #48	; 0x30
 8008f78:	d107      	bne.n	8008f8a <_strtol_l.constprop.0+0x56>
 8008f7a:	2220      	movs	r2, #32
 8008f7c:	782b      	ldrb	r3, [r5, #0]
 8008f7e:	4393      	bics	r3, r2
 8008f80:	2b58      	cmp	r3, #88	; 0x58
 8008f82:	d150      	bne.n	8009026 <_strtol_l.constprop.0+0xf2>
 8008f84:	2610      	movs	r6, #16
 8008f86:	786c      	ldrb	r4, [r5, #1]
 8008f88:	3502      	adds	r5, #2
 8008f8a:	4b2c      	ldr	r3, [pc, #176]	; (800903c <_strtol_l.constprop.0+0x108>)
 8008f8c:	0031      	movs	r1, r6
 8008f8e:	18fb      	adds	r3, r7, r3
 8008f90:	0018      	movs	r0, r3
 8008f92:	9303      	str	r3, [sp, #12]
 8008f94:	f7f7 f95a 	bl	800024c <__aeabi_uidivmod>
 8008f98:	2200      	movs	r2, #0
 8008f9a:	9104      	str	r1, [sp, #16]
 8008f9c:	2101      	movs	r1, #1
 8008f9e:	4684      	mov	ip, r0
 8008fa0:	0010      	movs	r0, r2
 8008fa2:	4249      	negs	r1, r1
 8008fa4:	0023      	movs	r3, r4
 8008fa6:	3b30      	subs	r3, #48	; 0x30
 8008fa8:	2b09      	cmp	r3, #9
 8008faa:	d903      	bls.n	8008fb4 <_strtol_l.constprop.0+0x80>
 8008fac:	3b11      	subs	r3, #17
 8008fae:	2b19      	cmp	r3, #25
 8008fb0:	d81d      	bhi.n	8008fee <_strtol_l.constprop.0+0xba>
 8008fb2:	330a      	adds	r3, #10
 8008fb4:	429e      	cmp	r6, r3
 8008fb6:	dd1e      	ble.n	8008ff6 <_strtol_l.constprop.0+0xc2>
 8008fb8:	1c54      	adds	r4, r2, #1
 8008fba:	d009      	beq.n	8008fd0 <_strtol_l.constprop.0+0x9c>
 8008fbc:	000a      	movs	r2, r1
 8008fbe:	4584      	cmp	ip, r0
 8008fc0:	d306      	bcc.n	8008fd0 <_strtol_l.constprop.0+0x9c>
 8008fc2:	d102      	bne.n	8008fca <_strtol_l.constprop.0+0x96>
 8008fc4:	9c04      	ldr	r4, [sp, #16]
 8008fc6:	429c      	cmp	r4, r3
 8008fc8:	db02      	blt.n	8008fd0 <_strtol_l.constprop.0+0x9c>
 8008fca:	2201      	movs	r2, #1
 8008fcc:	4370      	muls	r0, r6
 8008fce:	1818      	adds	r0, r3, r0
 8008fd0:	782c      	ldrb	r4, [r5, #0]
 8008fd2:	3501      	adds	r5, #1
 8008fd4:	e7e6      	b.n	8008fa4 <_strtol_l.constprop.0+0x70>
 8008fd6:	f000 fa05 	bl	80093e4 <__errno>
 8008fda:	2316      	movs	r3, #22
 8008fdc:	6003      	str	r3, [r0, #0]
 8008fde:	2000      	movs	r0, #0
 8008fe0:	b007      	add	sp, #28
 8008fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fe4:	2c2b      	cmp	r4, #43	; 0x2b
 8008fe6:	d1c2      	bne.n	8008f6e <_strtol_l.constprop.0+0x3a>
 8008fe8:	781c      	ldrb	r4, [r3, #0]
 8008fea:	1c95      	adds	r5, r2, #2
 8008fec:	e7bf      	b.n	8008f6e <_strtol_l.constprop.0+0x3a>
 8008fee:	0023      	movs	r3, r4
 8008ff0:	3b61      	subs	r3, #97	; 0x61
 8008ff2:	2b19      	cmp	r3, #25
 8008ff4:	d9dd      	bls.n	8008fb2 <_strtol_l.constprop.0+0x7e>
 8008ff6:	1c53      	adds	r3, r2, #1
 8008ff8:	d109      	bne.n	800900e <_strtol_l.constprop.0+0xda>
 8008ffa:	2322      	movs	r3, #34	; 0x22
 8008ffc:	9a05      	ldr	r2, [sp, #20]
 8008ffe:	9803      	ldr	r0, [sp, #12]
 8009000:	6013      	str	r3, [r2, #0]
 8009002:	9b02      	ldr	r3, [sp, #8]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d0eb      	beq.n	8008fe0 <_strtol_l.constprop.0+0xac>
 8009008:	1e6b      	subs	r3, r5, #1
 800900a:	9301      	str	r3, [sp, #4]
 800900c:	e007      	b.n	800901e <_strtol_l.constprop.0+0xea>
 800900e:	2f00      	cmp	r7, #0
 8009010:	d000      	beq.n	8009014 <_strtol_l.constprop.0+0xe0>
 8009012:	4240      	negs	r0, r0
 8009014:	9b02      	ldr	r3, [sp, #8]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d0e2      	beq.n	8008fe0 <_strtol_l.constprop.0+0xac>
 800901a:	2a00      	cmp	r2, #0
 800901c:	d1f4      	bne.n	8009008 <_strtol_l.constprop.0+0xd4>
 800901e:	9b02      	ldr	r3, [sp, #8]
 8009020:	9a01      	ldr	r2, [sp, #4]
 8009022:	601a      	str	r2, [r3, #0]
 8009024:	e7dc      	b.n	8008fe0 <_strtol_l.constprop.0+0xac>
 8009026:	2430      	movs	r4, #48	; 0x30
 8009028:	2e00      	cmp	r6, #0
 800902a:	d1ae      	bne.n	8008f8a <_strtol_l.constprop.0+0x56>
 800902c:	3608      	adds	r6, #8
 800902e:	e7ac      	b.n	8008f8a <_strtol_l.constprop.0+0x56>
 8009030:	2c30      	cmp	r4, #48	; 0x30
 8009032:	d0a2      	beq.n	8008f7a <_strtol_l.constprop.0+0x46>
 8009034:	260a      	movs	r6, #10
 8009036:	e7a8      	b.n	8008f8a <_strtol_l.constprop.0+0x56>
 8009038:	0800e4d6 	.word	0x0800e4d6
 800903c:	7fffffff 	.word	0x7fffffff

08009040 <strtol>:
 8009040:	b510      	push	{r4, lr}
 8009042:	4c04      	ldr	r4, [pc, #16]	; (8009054 <strtol+0x14>)
 8009044:	0013      	movs	r3, r2
 8009046:	000a      	movs	r2, r1
 8009048:	0001      	movs	r1, r0
 800904a:	6820      	ldr	r0, [r4, #0]
 800904c:	f7ff ff72 	bl	8008f34 <_strtol_l.constprop.0>
 8009050:	bd10      	pop	{r4, pc}
 8009052:	46c0      	nop			; (mov r8, r8)
 8009054:	20000140 	.word	0x20000140

08009058 <std>:
 8009058:	2300      	movs	r3, #0
 800905a:	b510      	push	{r4, lr}
 800905c:	0004      	movs	r4, r0
 800905e:	6003      	str	r3, [r0, #0]
 8009060:	6043      	str	r3, [r0, #4]
 8009062:	6083      	str	r3, [r0, #8]
 8009064:	8181      	strh	r1, [r0, #12]
 8009066:	6643      	str	r3, [r0, #100]	; 0x64
 8009068:	81c2      	strh	r2, [r0, #14]
 800906a:	6103      	str	r3, [r0, #16]
 800906c:	6143      	str	r3, [r0, #20]
 800906e:	6183      	str	r3, [r0, #24]
 8009070:	0019      	movs	r1, r3
 8009072:	2208      	movs	r2, #8
 8009074:	305c      	adds	r0, #92	; 0x5c
 8009076:	f000 f92d 	bl	80092d4 <memset>
 800907a:	4b0b      	ldr	r3, [pc, #44]	; (80090a8 <std+0x50>)
 800907c:	61e4      	str	r4, [r4, #28]
 800907e:	6223      	str	r3, [r4, #32]
 8009080:	4b0a      	ldr	r3, [pc, #40]	; (80090ac <std+0x54>)
 8009082:	6263      	str	r3, [r4, #36]	; 0x24
 8009084:	4b0a      	ldr	r3, [pc, #40]	; (80090b0 <std+0x58>)
 8009086:	62a3      	str	r3, [r4, #40]	; 0x28
 8009088:	4b0a      	ldr	r3, [pc, #40]	; (80090b4 <std+0x5c>)
 800908a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800908c:	4b0a      	ldr	r3, [pc, #40]	; (80090b8 <std+0x60>)
 800908e:	429c      	cmp	r4, r3
 8009090:	d005      	beq.n	800909e <std+0x46>
 8009092:	4b0a      	ldr	r3, [pc, #40]	; (80090bc <std+0x64>)
 8009094:	429c      	cmp	r4, r3
 8009096:	d002      	beq.n	800909e <std+0x46>
 8009098:	4b09      	ldr	r3, [pc, #36]	; (80090c0 <std+0x68>)
 800909a:	429c      	cmp	r4, r3
 800909c:	d103      	bne.n	80090a6 <std+0x4e>
 800909e:	0020      	movs	r0, r4
 80090a0:	3058      	adds	r0, #88	; 0x58
 80090a2:	f000 f9c9 	bl	8009438 <__retarget_lock_init_recursive>
 80090a6:	bd10      	pop	{r4, pc}
 80090a8:	08009221 	.word	0x08009221
 80090ac:	08009249 	.word	0x08009249
 80090b0:	08009281 	.word	0x08009281
 80090b4:	080092ad 	.word	0x080092ad
 80090b8:	20003028 	.word	0x20003028
 80090bc:	20003090 	.word	0x20003090
 80090c0:	200030f8 	.word	0x200030f8

080090c4 <stdio_exit_handler>:
 80090c4:	b510      	push	{r4, lr}
 80090c6:	4a03      	ldr	r2, [pc, #12]	; (80090d4 <stdio_exit_handler+0x10>)
 80090c8:	4903      	ldr	r1, [pc, #12]	; (80090d8 <stdio_exit_handler+0x14>)
 80090ca:	4804      	ldr	r0, [pc, #16]	; (80090dc <stdio_exit_handler+0x18>)
 80090cc:	f000 f86c 	bl	80091a8 <_fwalk_sglue>
 80090d0:	bd10      	pop	{r4, pc}
 80090d2:	46c0      	nop			; (mov r8, r8)
 80090d4:	20000010 	.word	0x20000010
 80090d8:	0800af79 	.word	0x0800af79
 80090dc:	20000020 	.word	0x20000020

080090e0 <cleanup_stdio>:
 80090e0:	6841      	ldr	r1, [r0, #4]
 80090e2:	4b0b      	ldr	r3, [pc, #44]	; (8009110 <cleanup_stdio+0x30>)
 80090e4:	b510      	push	{r4, lr}
 80090e6:	0004      	movs	r4, r0
 80090e8:	4299      	cmp	r1, r3
 80090ea:	d001      	beq.n	80090f0 <cleanup_stdio+0x10>
 80090ec:	f001 ff44 	bl	800af78 <_fclose_r>
 80090f0:	68a1      	ldr	r1, [r4, #8]
 80090f2:	4b08      	ldr	r3, [pc, #32]	; (8009114 <cleanup_stdio+0x34>)
 80090f4:	4299      	cmp	r1, r3
 80090f6:	d002      	beq.n	80090fe <cleanup_stdio+0x1e>
 80090f8:	0020      	movs	r0, r4
 80090fa:	f001 ff3d 	bl	800af78 <_fclose_r>
 80090fe:	68e1      	ldr	r1, [r4, #12]
 8009100:	4b05      	ldr	r3, [pc, #20]	; (8009118 <cleanup_stdio+0x38>)
 8009102:	4299      	cmp	r1, r3
 8009104:	d002      	beq.n	800910c <cleanup_stdio+0x2c>
 8009106:	0020      	movs	r0, r4
 8009108:	f001 ff36 	bl	800af78 <_fclose_r>
 800910c:	bd10      	pop	{r4, pc}
 800910e:	46c0      	nop			; (mov r8, r8)
 8009110:	20003028 	.word	0x20003028
 8009114:	20003090 	.word	0x20003090
 8009118:	200030f8 	.word	0x200030f8

0800911c <global_stdio_init.part.0>:
 800911c:	b510      	push	{r4, lr}
 800911e:	4b09      	ldr	r3, [pc, #36]	; (8009144 <global_stdio_init.part.0+0x28>)
 8009120:	4a09      	ldr	r2, [pc, #36]	; (8009148 <global_stdio_init.part.0+0x2c>)
 8009122:	2104      	movs	r1, #4
 8009124:	601a      	str	r2, [r3, #0]
 8009126:	4809      	ldr	r0, [pc, #36]	; (800914c <global_stdio_init.part.0+0x30>)
 8009128:	2200      	movs	r2, #0
 800912a:	f7ff ff95 	bl	8009058 <std>
 800912e:	2201      	movs	r2, #1
 8009130:	2109      	movs	r1, #9
 8009132:	4807      	ldr	r0, [pc, #28]	; (8009150 <global_stdio_init.part.0+0x34>)
 8009134:	f7ff ff90 	bl	8009058 <std>
 8009138:	2202      	movs	r2, #2
 800913a:	2112      	movs	r1, #18
 800913c:	4805      	ldr	r0, [pc, #20]	; (8009154 <global_stdio_init.part.0+0x38>)
 800913e:	f7ff ff8b 	bl	8009058 <std>
 8009142:	bd10      	pop	{r4, pc}
 8009144:	20003160 	.word	0x20003160
 8009148:	080090c5 	.word	0x080090c5
 800914c:	20003028 	.word	0x20003028
 8009150:	20003090 	.word	0x20003090
 8009154:	200030f8 	.word	0x200030f8

08009158 <__sfp_lock_acquire>:
 8009158:	b510      	push	{r4, lr}
 800915a:	4802      	ldr	r0, [pc, #8]	; (8009164 <__sfp_lock_acquire+0xc>)
 800915c:	f000 f96e 	bl	800943c <__retarget_lock_acquire_recursive>
 8009160:	bd10      	pop	{r4, pc}
 8009162:	46c0      	nop			; (mov r8, r8)
 8009164:	2000316a 	.word	0x2000316a

08009168 <__sfp_lock_release>:
 8009168:	b510      	push	{r4, lr}
 800916a:	4802      	ldr	r0, [pc, #8]	; (8009174 <__sfp_lock_release+0xc>)
 800916c:	f000 f967 	bl	800943e <__retarget_lock_release_recursive>
 8009170:	bd10      	pop	{r4, pc}
 8009172:	46c0      	nop			; (mov r8, r8)
 8009174:	2000316a 	.word	0x2000316a

08009178 <__sinit>:
 8009178:	b510      	push	{r4, lr}
 800917a:	0004      	movs	r4, r0
 800917c:	f7ff ffec 	bl	8009158 <__sfp_lock_acquire>
 8009180:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009182:	2b00      	cmp	r3, #0
 8009184:	d002      	beq.n	800918c <__sinit+0x14>
 8009186:	f7ff ffef 	bl	8009168 <__sfp_lock_release>
 800918a:	bd10      	pop	{r4, pc}
 800918c:	4b04      	ldr	r3, [pc, #16]	; (80091a0 <__sinit+0x28>)
 800918e:	6363      	str	r3, [r4, #52]	; 0x34
 8009190:	4b04      	ldr	r3, [pc, #16]	; (80091a4 <__sinit+0x2c>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d1f6      	bne.n	8009186 <__sinit+0xe>
 8009198:	f7ff ffc0 	bl	800911c <global_stdio_init.part.0>
 800919c:	e7f3      	b.n	8009186 <__sinit+0xe>
 800919e:	46c0      	nop			; (mov r8, r8)
 80091a0:	080090e1 	.word	0x080090e1
 80091a4:	20003160 	.word	0x20003160

080091a8 <_fwalk_sglue>:
 80091a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091aa:	0014      	movs	r4, r2
 80091ac:	2600      	movs	r6, #0
 80091ae:	9000      	str	r0, [sp, #0]
 80091b0:	9101      	str	r1, [sp, #4]
 80091b2:	68a5      	ldr	r5, [r4, #8]
 80091b4:	6867      	ldr	r7, [r4, #4]
 80091b6:	3f01      	subs	r7, #1
 80091b8:	d504      	bpl.n	80091c4 <_fwalk_sglue+0x1c>
 80091ba:	6824      	ldr	r4, [r4, #0]
 80091bc:	2c00      	cmp	r4, #0
 80091be:	d1f8      	bne.n	80091b2 <_fwalk_sglue+0xa>
 80091c0:	0030      	movs	r0, r6
 80091c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80091c4:	89ab      	ldrh	r3, [r5, #12]
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d908      	bls.n	80091dc <_fwalk_sglue+0x34>
 80091ca:	220e      	movs	r2, #14
 80091cc:	5eab      	ldrsh	r3, [r5, r2]
 80091ce:	3301      	adds	r3, #1
 80091d0:	d004      	beq.n	80091dc <_fwalk_sglue+0x34>
 80091d2:	0029      	movs	r1, r5
 80091d4:	9800      	ldr	r0, [sp, #0]
 80091d6:	9b01      	ldr	r3, [sp, #4]
 80091d8:	4798      	blx	r3
 80091da:	4306      	orrs	r6, r0
 80091dc:	3568      	adds	r5, #104	; 0x68
 80091de:	e7ea      	b.n	80091b6 <_fwalk_sglue+0xe>

080091e0 <sprintf>:
 80091e0:	b40e      	push	{r1, r2, r3}
 80091e2:	b500      	push	{lr}
 80091e4:	490b      	ldr	r1, [pc, #44]	; (8009214 <sprintf+0x34>)
 80091e6:	b09c      	sub	sp, #112	; 0x70
 80091e8:	ab1d      	add	r3, sp, #116	; 0x74
 80091ea:	9002      	str	r0, [sp, #8]
 80091ec:	9006      	str	r0, [sp, #24]
 80091ee:	9107      	str	r1, [sp, #28]
 80091f0:	9104      	str	r1, [sp, #16]
 80091f2:	4809      	ldr	r0, [pc, #36]	; (8009218 <sprintf+0x38>)
 80091f4:	4909      	ldr	r1, [pc, #36]	; (800921c <sprintf+0x3c>)
 80091f6:	cb04      	ldmia	r3!, {r2}
 80091f8:	9105      	str	r1, [sp, #20]
 80091fa:	6800      	ldr	r0, [r0, #0]
 80091fc:	a902      	add	r1, sp, #8
 80091fe:	9301      	str	r3, [sp, #4]
 8009200:	f000 fc78 	bl	8009af4 <_svfprintf_r>
 8009204:	2200      	movs	r2, #0
 8009206:	9b02      	ldr	r3, [sp, #8]
 8009208:	701a      	strb	r2, [r3, #0]
 800920a:	b01c      	add	sp, #112	; 0x70
 800920c:	bc08      	pop	{r3}
 800920e:	b003      	add	sp, #12
 8009210:	4718      	bx	r3
 8009212:	46c0      	nop			; (mov r8, r8)
 8009214:	7fffffff 	.word	0x7fffffff
 8009218:	20000140 	.word	0x20000140
 800921c:	ffff0208 	.word	0xffff0208

08009220 <__sread>:
 8009220:	b570      	push	{r4, r5, r6, lr}
 8009222:	000c      	movs	r4, r1
 8009224:	250e      	movs	r5, #14
 8009226:	5f49      	ldrsh	r1, [r1, r5]
 8009228:	f000 f8b4 	bl	8009394 <_read_r>
 800922c:	2800      	cmp	r0, #0
 800922e:	db03      	blt.n	8009238 <__sread+0x18>
 8009230:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009232:	181b      	adds	r3, r3, r0
 8009234:	6523      	str	r3, [r4, #80]	; 0x50
 8009236:	bd70      	pop	{r4, r5, r6, pc}
 8009238:	89a3      	ldrh	r3, [r4, #12]
 800923a:	4a02      	ldr	r2, [pc, #8]	; (8009244 <__sread+0x24>)
 800923c:	4013      	ands	r3, r2
 800923e:	81a3      	strh	r3, [r4, #12]
 8009240:	e7f9      	b.n	8009236 <__sread+0x16>
 8009242:	46c0      	nop			; (mov r8, r8)
 8009244:	ffffefff 	.word	0xffffefff

08009248 <__swrite>:
 8009248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800924a:	001f      	movs	r7, r3
 800924c:	898b      	ldrh	r3, [r1, #12]
 800924e:	0005      	movs	r5, r0
 8009250:	000c      	movs	r4, r1
 8009252:	0016      	movs	r6, r2
 8009254:	05db      	lsls	r3, r3, #23
 8009256:	d505      	bpl.n	8009264 <__swrite+0x1c>
 8009258:	230e      	movs	r3, #14
 800925a:	5ec9      	ldrsh	r1, [r1, r3]
 800925c:	2200      	movs	r2, #0
 800925e:	2302      	movs	r3, #2
 8009260:	f000 f884 	bl	800936c <_lseek_r>
 8009264:	89a3      	ldrh	r3, [r4, #12]
 8009266:	4a05      	ldr	r2, [pc, #20]	; (800927c <__swrite+0x34>)
 8009268:	0028      	movs	r0, r5
 800926a:	4013      	ands	r3, r2
 800926c:	81a3      	strh	r3, [r4, #12]
 800926e:	0032      	movs	r2, r6
 8009270:	230e      	movs	r3, #14
 8009272:	5ee1      	ldrsh	r1, [r4, r3]
 8009274:	003b      	movs	r3, r7
 8009276:	f000 f8a1 	bl	80093bc <_write_r>
 800927a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800927c:	ffffefff 	.word	0xffffefff

08009280 <__sseek>:
 8009280:	b570      	push	{r4, r5, r6, lr}
 8009282:	000c      	movs	r4, r1
 8009284:	250e      	movs	r5, #14
 8009286:	5f49      	ldrsh	r1, [r1, r5]
 8009288:	f000 f870 	bl	800936c <_lseek_r>
 800928c:	89a3      	ldrh	r3, [r4, #12]
 800928e:	1c42      	adds	r2, r0, #1
 8009290:	d103      	bne.n	800929a <__sseek+0x1a>
 8009292:	4a05      	ldr	r2, [pc, #20]	; (80092a8 <__sseek+0x28>)
 8009294:	4013      	ands	r3, r2
 8009296:	81a3      	strh	r3, [r4, #12]
 8009298:	bd70      	pop	{r4, r5, r6, pc}
 800929a:	2280      	movs	r2, #128	; 0x80
 800929c:	0152      	lsls	r2, r2, #5
 800929e:	4313      	orrs	r3, r2
 80092a0:	81a3      	strh	r3, [r4, #12]
 80092a2:	6520      	str	r0, [r4, #80]	; 0x50
 80092a4:	e7f8      	b.n	8009298 <__sseek+0x18>
 80092a6:	46c0      	nop			; (mov r8, r8)
 80092a8:	ffffefff 	.word	0xffffefff

080092ac <__sclose>:
 80092ac:	b510      	push	{r4, lr}
 80092ae:	230e      	movs	r3, #14
 80092b0:	5ec9      	ldrsh	r1, [r1, r3]
 80092b2:	f000 f849 	bl	8009348 <_close_r>
 80092b6:	bd10      	pop	{r4, pc}

080092b8 <memcmp>:
 80092b8:	b530      	push	{r4, r5, lr}
 80092ba:	2400      	movs	r4, #0
 80092bc:	3901      	subs	r1, #1
 80092be:	42a2      	cmp	r2, r4
 80092c0:	d101      	bne.n	80092c6 <memcmp+0xe>
 80092c2:	2000      	movs	r0, #0
 80092c4:	e005      	b.n	80092d2 <memcmp+0x1a>
 80092c6:	5d03      	ldrb	r3, [r0, r4]
 80092c8:	3401      	adds	r4, #1
 80092ca:	5d0d      	ldrb	r5, [r1, r4]
 80092cc:	42ab      	cmp	r3, r5
 80092ce:	d0f6      	beq.n	80092be <memcmp+0x6>
 80092d0:	1b58      	subs	r0, r3, r5
 80092d2:	bd30      	pop	{r4, r5, pc}

080092d4 <memset>:
 80092d4:	0003      	movs	r3, r0
 80092d6:	1882      	adds	r2, r0, r2
 80092d8:	4293      	cmp	r3, r2
 80092da:	d100      	bne.n	80092de <memset+0xa>
 80092dc:	4770      	bx	lr
 80092de:	7019      	strb	r1, [r3, #0]
 80092e0:	3301      	adds	r3, #1
 80092e2:	e7f9      	b.n	80092d8 <memset+0x4>

080092e4 <strcat>:
 80092e4:	0002      	movs	r2, r0
 80092e6:	b510      	push	{r4, lr}
 80092e8:	7813      	ldrb	r3, [r2, #0]
 80092ea:	0014      	movs	r4, r2
 80092ec:	3201      	adds	r2, #1
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1fa      	bne.n	80092e8 <strcat+0x4>
 80092f2:	5cca      	ldrb	r2, [r1, r3]
 80092f4:	54e2      	strb	r2, [r4, r3]
 80092f6:	3301      	adds	r3, #1
 80092f8:	2a00      	cmp	r2, #0
 80092fa:	d1fa      	bne.n	80092f2 <strcat+0xe>
 80092fc:	bd10      	pop	{r4, pc}

080092fe <strchr>:
 80092fe:	b2c9      	uxtb	r1, r1
 8009300:	7803      	ldrb	r3, [r0, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d004      	beq.n	8009310 <strchr+0x12>
 8009306:	428b      	cmp	r3, r1
 8009308:	d100      	bne.n	800930c <strchr+0xe>
 800930a:	4770      	bx	lr
 800930c:	3001      	adds	r0, #1
 800930e:	e7f7      	b.n	8009300 <strchr+0x2>
 8009310:	424b      	negs	r3, r1
 8009312:	4159      	adcs	r1, r3
 8009314:	4249      	negs	r1, r1
 8009316:	4008      	ands	r0, r1
 8009318:	e7f7      	b.n	800930a <strchr+0xc>

0800931a <strstr>:
 800931a:	780a      	ldrb	r2, [r1, #0]
 800931c:	b530      	push	{r4, r5, lr}
 800931e:	2a00      	cmp	r2, #0
 8009320:	d10c      	bne.n	800933c <strstr+0x22>
 8009322:	bd30      	pop	{r4, r5, pc}
 8009324:	429a      	cmp	r2, r3
 8009326:	d108      	bne.n	800933a <strstr+0x20>
 8009328:	2301      	movs	r3, #1
 800932a:	5ccc      	ldrb	r4, [r1, r3]
 800932c:	2c00      	cmp	r4, #0
 800932e:	d0f8      	beq.n	8009322 <strstr+0x8>
 8009330:	5cc5      	ldrb	r5, [r0, r3]
 8009332:	42a5      	cmp	r5, r4
 8009334:	d101      	bne.n	800933a <strstr+0x20>
 8009336:	3301      	adds	r3, #1
 8009338:	e7f7      	b.n	800932a <strstr+0x10>
 800933a:	3001      	adds	r0, #1
 800933c:	7803      	ldrb	r3, [r0, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1f0      	bne.n	8009324 <strstr+0xa>
 8009342:	0018      	movs	r0, r3
 8009344:	e7ed      	b.n	8009322 <strstr+0x8>
	...

08009348 <_close_r>:
 8009348:	2300      	movs	r3, #0
 800934a:	b570      	push	{r4, r5, r6, lr}
 800934c:	4d06      	ldr	r5, [pc, #24]	; (8009368 <_close_r+0x20>)
 800934e:	0004      	movs	r4, r0
 8009350:	0008      	movs	r0, r1
 8009352:	602b      	str	r3, [r5, #0]
 8009354:	f7ff fd84 	bl	8008e60 <_close>
 8009358:	1c43      	adds	r3, r0, #1
 800935a:	d103      	bne.n	8009364 <_close_r+0x1c>
 800935c:	682b      	ldr	r3, [r5, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d000      	beq.n	8009364 <_close_r+0x1c>
 8009362:	6023      	str	r3, [r4, #0]
 8009364:	bd70      	pop	{r4, r5, r6, pc}
 8009366:	46c0      	nop			; (mov r8, r8)
 8009368:	20003164 	.word	0x20003164

0800936c <_lseek_r>:
 800936c:	b570      	push	{r4, r5, r6, lr}
 800936e:	0004      	movs	r4, r0
 8009370:	0008      	movs	r0, r1
 8009372:	0011      	movs	r1, r2
 8009374:	001a      	movs	r2, r3
 8009376:	2300      	movs	r3, #0
 8009378:	4d05      	ldr	r5, [pc, #20]	; (8009390 <_lseek_r+0x24>)
 800937a:	602b      	str	r3, [r5, #0]
 800937c:	f7ff fd7a 	bl	8008e74 <_lseek>
 8009380:	1c43      	adds	r3, r0, #1
 8009382:	d103      	bne.n	800938c <_lseek_r+0x20>
 8009384:	682b      	ldr	r3, [r5, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d000      	beq.n	800938c <_lseek_r+0x20>
 800938a:	6023      	str	r3, [r4, #0]
 800938c:	bd70      	pop	{r4, r5, r6, pc}
 800938e:	46c0      	nop			; (mov r8, r8)
 8009390:	20003164 	.word	0x20003164

08009394 <_read_r>:
 8009394:	b570      	push	{r4, r5, r6, lr}
 8009396:	0004      	movs	r4, r0
 8009398:	0008      	movs	r0, r1
 800939a:	0011      	movs	r1, r2
 800939c:	001a      	movs	r2, r3
 800939e:	2300      	movs	r3, #0
 80093a0:	4d05      	ldr	r5, [pc, #20]	; (80093b8 <_read_r+0x24>)
 80093a2:	602b      	str	r3, [r5, #0]
 80093a4:	f7ff fd40 	bl	8008e28 <_read>
 80093a8:	1c43      	adds	r3, r0, #1
 80093aa:	d103      	bne.n	80093b4 <_read_r+0x20>
 80093ac:	682b      	ldr	r3, [r5, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d000      	beq.n	80093b4 <_read_r+0x20>
 80093b2:	6023      	str	r3, [r4, #0]
 80093b4:	bd70      	pop	{r4, r5, r6, pc}
 80093b6:	46c0      	nop			; (mov r8, r8)
 80093b8:	20003164 	.word	0x20003164

080093bc <_write_r>:
 80093bc:	b570      	push	{r4, r5, r6, lr}
 80093be:	0004      	movs	r4, r0
 80093c0:	0008      	movs	r0, r1
 80093c2:	0011      	movs	r1, r2
 80093c4:	001a      	movs	r2, r3
 80093c6:	2300      	movs	r3, #0
 80093c8:	4d05      	ldr	r5, [pc, #20]	; (80093e0 <_write_r+0x24>)
 80093ca:	602b      	str	r3, [r5, #0]
 80093cc:	f7ff fd3a 	bl	8008e44 <_write>
 80093d0:	1c43      	adds	r3, r0, #1
 80093d2:	d103      	bne.n	80093dc <_write_r+0x20>
 80093d4:	682b      	ldr	r3, [r5, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d000      	beq.n	80093dc <_write_r+0x20>
 80093da:	6023      	str	r3, [r4, #0]
 80093dc:	bd70      	pop	{r4, r5, r6, pc}
 80093de:	46c0      	nop			; (mov r8, r8)
 80093e0:	20003164 	.word	0x20003164

080093e4 <__errno>:
 80093e4:	4b01      	ldr	r3, [pc, #4]	; (80093ec <__errno+0x8>)
 80093e6:	6818      	ldr	r0, [r3, #0]
 80093e8:	4770      	bx	lr
 80093ea:	46c0      	nop			; (mov r8, r8)
 80093ec:	20000140 	.word	0x20000140

080093f0 <__libc_init_array>:
 80093f0:	b570      	push	{r4, r5, r6, lr}
 80093f2:	2600      	movs	r6, #0
 80093f4:	4c0c      	ldr	r4, [pc, #48]	; (8009428 <__libc_init_array+0x38>)
 80093f6:	4d0d      	ldr	r5, [pc, #52]	; (800942c <__libc_init_array+0x3c>)
 80093f8:	1b64      	subs	r4, r4, r5
 80093fa:	10a4      	asrs	r4, r4, #2
 80093fc:	42a6      	cmp	r6, r4
 80093fe:	d109      	bne.n	8009414 <__libc_init_array+0x24>
 8009400:	2600      	movs	r6, #0
 8009402:	f004 fd0d 	bl	800de20 <_init>
 8009406:	4c0a      	ldr	r4, [pc, #40]	; (8009430 <__libc_init_array+0x40>)
 8009408:	4d0a      	ldr	r5, [pc, #40]	; (8009434 <__libc_init_array+0x44>)
 800940a:	1b64      	subs	r4, r4, r5
 800940c:	10a4      	asrs	r4, r4, #2
 800940e:	42a6      	cmp	r6, r4
 8009410:	d105      	bne.n	800941e <__libc_init_array+0x2e>
 8009412:	bd70      	pop	{r4, r5, r6, pc}
 8009414:	00b3      	lsls	r3, r6, #2
 8009416:	58eb      	ldr	r3, [r5, r3]
 8009418:	4798      	blx	r3
 800941a:	3601      	adds	r6, #1
 800941c:	e7ee      	b.n	80093fc <__libc_init_array+0xc>
 800941e:	00b3      	lsls	r3, r6, #2
 8009420:	58eb      	ldr	r3, [r5, r3]
 8009422:	4798      	blx	r3
 8009424:	3601      	adds	r6, #1
 8009426:	e7f2      	b.n	800940e <__libc_init_array+0x1e>
 8009428:	0800e86c 	.word	0x0800e86c
 800942c:	0800e86c 	.word	0x0800e86c
 8009430:	0800e874 	.word	0x0800e874
 8009434:	0800e86c 	.word	0x0800e86c

08009438 <__retarget_lock_init_recursive>:
 8009438:	4770      	bx	lr

0800943a <__retarget_lock_close_recursive>:
 800943a:	4770      	bx	lr

0800943c <__retarget_lock_acquire_recursive>:
 800943c:	4770      	bx	lr

0800943e <__retarget_lock_release_recursive>:
 800943e:	4770      	bx	lr

08009440 <strcpy>:
 8009440:	0003      	movs	r3, r0
 8009442:	780a      	ldrb	r2, [r1, #0]
 8009444:	3101      	adds	r1, #1
 8009446:	701a      	strb	r2, [r3, #0]
 8009448:	3301      	adds	r3, #1
 800944a:	2a00      	cmp	r2, #0
 800944c:	d1f9      	bne.n	8009442 <strcpy+0x2>
 800944e:	4770      	bx	lr

08009450 <memchr>:
 8009450:	b2c9      	uxtb	r1, r1
 8009452:	1882      	adds	r2, r0, r2
 8009454:	4290      	cmp	r0, r2
 8009456:	d101      	bne.n	800945c <memchr+0xc>
 8009458:	2000      	movs	r0, #0
 800945a:	4770      	bx	lr
 800945c:	7803      	ldrb	r3, [r0, #0]
 800945e:	428b      	cmp	r3, r1
 8009460:	d0fb      	beq.n	800945a <memchr+0xa>
 8009462:	3001      	adds	r0, #1
 8009464:	e7f6      	b.n	8009454 <memchr+0x4>

08009466 <memcpy>:
 8009466:	2300      	movs	r3, #0
 8009468:	b510      	push	{r4, lr}
 800946a:	429a      	cmp	r2, r3
 800946c:	d100      	bne.n	8009470 <memcpy+0xa>
 800946e:	bd10      	pop	{r4, pc}
 8009470:	5ccc      	ldrb	r4, [r1, r3]
 8009472:	54c4      	strb	r4, [r0, r3]
 8009474:	3301      	adds	r3, #1
 8009476:	e7f8      	b.n	800946a <memcpy+0x4>

08009478 <register_fini>:
 8009478:	4b03      	ldr	r3, [pc, #12]	; (8009488 <register_fini+0x10>)
 800947a:	b510      	push	{r4, lr}
 800947c:	2b00      	cmp	r3, #0
 800947e:	d002      	beq.n	8009486 <register_fini+0xe>
 8009480:	4802      	ldr	r0, [pc, #8]	; (800948c <register_fini+0x14>)
 8009482:	f000 f805 	bl	8009490 <atexit>
 8009486:	bd10      	pop	{r4, pc}
 8009488:	00000000 	.word	0x00000000
 800948c:	0800b205 	.word	0x0800b205

08009490 <atexit>:
 8009490:	2300      	movs	r3, #0
 8009492:	b510      	push	{r4, lr}
 8009494:	0001      	movs	r1, r0
 8009496:	001a      	movs	r2, r3
 8009498:	0018      	movs	r0, r3
 800949a:	f001 ff05 	bl	800b2a8 <__register_exitproc>
 800949e:	bd10      	pop	{r4, pc}

080094a0 <_malloc_trim_r>:
 80094a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094a2:	0004      	movs	r4, r0
 80094a4:	2008      	movs	r0, #8
 80094a6:	000d      	movs	r5, r1
 80094a8:	f001 fec0 	bl	800b22c <sysconf>
 80094ac:	0006      	movs	r6, r0
 80094ae:	0020      	movs	r0, r4
 80094b0:	f000 fb10 	bl	8009ad4 <__malloc_lock>
 80094b4:	2203      	movs	r2, #3
 80094b6:	4f21      	ldr	r7, [pc, #132]	; (800953c <_malloc_trim_r+0x9c>)
 80094b8:	0031      	movs	r1, r6
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	4393      	bics	r3, r2
 80094c0:	1b58      	subs	r0, r3, r5
 80094c2:	3811      	subs	r0, #17
 80094c4:	1980      	adds	r0, r0, r6
 80094c6:	9301      	str	r3, [sp, #4]
 80094c8:	f7f6 fe3a 	bl	8000140 <__udivsi3>
 80094cc:	1e45      	subs	r5, r0, #1
 80094ce:	4375      	muls	r5, r6
 80094d0:	42ae      	cmp	r6, r5
 80094d2:	dd04      	ble.n	80094de <_malloc_trim_r+0x3e>
 80094d4:	0020      	movs	r0, r4
 80094d6:	f000 fb05 	bl	8009ae4 <__malloc_unlock>
 80094da:	2000      	movs	r0, #0
 80094dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80094de:	2100      	movs	r1, #0
 80094e0:	0020      	movs	r0, r4
 80094e2:	f001 fe7d 	bl	800b1e0 <_sbrk_r>
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	9a01      	ldr	r2, [sp, #4]
 80094ea:	189b      	adds	r3, r3, r2
 80094ec:	4298      	cmp	r0, r3
 80094ee:	d1f1      	bne.n	80094d4 <_malloc_trim_r+0x34>
 80094f0:	0020      	movs	r0, r4
 80094f2:	4269      	negs	r1, r5
 80094f4:	f001 fe74 	bl	800b1e0 <_sbrk_r>
 80094f8:	3001      	adds	r0, #1
 80094fa:	d110      	bne.n	800951e <_malloc_trim_r+0x7e>
 80094fc:	2100      	movs	r1, #0
 80094fe:	0020      	movs	r0, r4
 8009500:	f001 fe6e 	bl	800b1e0 <_sbrk_r>
 8009504:	68ba      	ldr	r2, [r7, #8]
 8009506:	1a81      	subs	r1, r0, r2
 8009508:	290f      	cmp	r1, #15
 800950a:	dde3      	ble.n	80094d4 <_malloc_trim_r+0x34>
 800950c:	4d0c      	ldr	r5, [pc, #48]	; (8009540 <_malloc_trim_r+0xa0>)
 800950e:	4b0d      	ldr	r3, [pc, #52]	; (8009544 <_malloc_trim_r+0xa4>)
 8009510:	682d      	ldr	r5, [r5, #0]
 8009512:	1b40      	subs	r0, r0, r5
 8009514:	6018      	str	r0, [r3, #0]
 8009516:	2301      	movs	r3, #1
 8009518:	430b      	orrs	r3, r1
 800951a:	6053      	str	r3, [r2, #4]
 800951c:	e7da      	b.n	80094d4 <_malloc_trim_r+0x34>
 800951e:	2601      	movs	r6, #1
 8009520:	9b01      	ldr	r3, [sp, #4]
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	1b5b      	subs	r3, r3, r5
 8009526:	4333      	orrs	r3, r6
 8009528:	6053      	str	r3, [r2, #4]
 800952a:	4a06      	ldr	r2, [pc, #24]	; (8009544 <_malloc_trim_r+0xa4>)
 800952c:	0020      	movs	r0, r4
 800952e:	6813      	ldr	r3, [r2, #0]
 8009530:	1b5b      	subs	r3, r3, r5
 8009532:	6013      	str	r3, [r2, #0]
 8009534:	f000 fad6 	bl	8009ae4 <__malloc_unlock>
 8009538:	0030      	movs	r0, r6
 800953a:	e7cf      	b.n	80094dc <_malloc_trim_r+0x3c>
 800953c:	20000148 	.word	0x20000148
 8009540:	20000550 	.word	0x20000550
 8009544:	20003170 	.word	0x20003170

08009548 <_free_r>:
 8009548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800954a:	1e0d      	subs	r5, r1, #0
 800954c:	9001      	str	r0, [sp, #4]
 800954e:	d02d      	beq.n	80095ac <_free_r+0x64>
 8009550:	f000 fac0 	bl	8009ad4 <__malloc_lock>
 8009554:	2301      	movs	r3, #1
 8009556:	0029      	movs	r1, r5
 8009558:	469c      	mov	ip, r3
 800955a:	3908      	subs	r1, #8
 800955c:	684f      	ldr	r7, [r1, #4]
 800955e:	4662      	mov	r2, ip
 8009560:	003b      	movs	r3, r7
 8009562:	4664      	mov	r4, ip
 8009564:	4393      	bics	r3, r2
 8009566:	18c8      	adds	r0, r1, r3
 8009568:	6845      	ldr	r5, [r0, #4]
 800956a:	3202      	adds	r2, #2
 800956c:	4395      	bics	r5, r2
 800956e:	4a4a      	ldr	r2, [pc, #296]	; (8009698 <_free_r+0x150>)
 8009570:	4027      	ands	r7, r4
 8009572:	6896      	ldr	r6, [r2, #8]
 8009574:	4286      	cmp	r6, r0
 8009576:	d11a      	bne.n	80095ae <_free_r+0x66>
 8009578:	195b      	adds	r3, r3, r5
 800957a:	2f00      	cmp	r7, #0
 800957c:	d106      	bne.n	800958c <_free_r+0x44>
 800957e:	6808      	ldr	r0, [r1, #0]
 8009580:	1a09      	subs	r1, r1, r0
 8009582:	688d      	ldr	r5, [r1, #8]
 8009584:	181b      	adds	r3, r3, r0
 8009586:	68c8      	ldr	r0, [r1, #12]
 8009588:	60e8      	str	r0, [r5, #12]
 800958a:	6085      	str	r5, [r0, #8]
 800958c:	2001      	movs	r0, #1
 800958e:	4318      	orrs	r0, r3
 8009590:	6048      	str	r0, [r1, #4]
 8009592:	6091      	str	r1, [r2, #8]
 8009594:	4a41      	ldr	r2, [pc, #260]	; (800969c <_free_r+0x154>)
 8009596:	6812      	ldr	r2, [r2, #0]
 8009598:	429a      	cmp	r2, r3
 800959a:	d804      	bhi.n	80095a6 <_free_r+0x5e>
 800959c:	4b40      	ldr	r3, [pc, #256]	; (80096a0 <_free_r+0x158>)
 800959e:	9801      	ldr	r0, [sp, #4]
 80095a0:	6819      	ldr	r1, [r3, #0]
 80095a2:	f7ff ff7d 	bl	80094a0 <_malloc_trim_r>
 80095a6:	9801      	ldr	r0, [sp, #4]
 80095a8:	f000 fa9c 	bl	8009ae4 <__malloc_unlock>
 80095ac:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80095ae:	2600      	movs	r6, #0
 80095b0:	6045      	str	r5, [r0, #4]
 80095b2:	42b7      	cmp	r7, r6
 80095b4:	d109      	bne.n	80095ca <_free_r+0x82>
 80095b6:	680f      	ldr	r7, [r1, #0]
 80095b8:	4c3a      	ldr	r4, [pc, #232]	; (80096a4 <_free_r+0x15c>)
 80095ba:	1bc9      	subs	r1, r1, r7
 80095bc:	19db      	adds	r3, r3, r7
 80095be:	688f      	ldr	r7, [r1, #8]
 80095c0:	42a7      	cmp	r7, r4
 80095c2:	d02c      	beq.n	800961e <_free_r+0xd6>
 80095c4:	68cc      	ldr	r4, [r1, #12]
 80095c6:	60fc      	str	r4, [r7, #12]
 80095c8:	60a7      	str	r7, [r4, #8]
 80095ca:	1947      	adds	r7, r0, r5
 80095cc:	687c      	ldr	r4, [r7, #4]
 80095ce:	2701      	movs	r7, #1
 80095d0:	423c      	tst	r4, r7
 80095d2:	d10b      	bne.n	80095ec <_free_r+0xa4>
 80095d4:	195b      	adds	r3, r3, r5
 80095d6:	6885      	ldr	r5, [r0, #8]
 80095d8:	2e00      	cmp	r6, #0
 80095da:	d122      	bne.n	8009622 <_free_r+0xda>
 80095dc:	4c31      	ldr	r4, [pc, #196]	; (80096a4 <_free_r+0x15c>)
 80095de:	42a5      	cmp	r5, r4
 80095e0:	d11f      	bne.n	8009622 <_free_r+0xda>
 80095e2:	003e      	movs	r6, r7
 80095e4:	6151      	str	r1, [r2, #20]
 80095e6:	6111      	str	r1, [r2, #16]
 80095e8:	60cd      	str	r5, [r1, #12]
 80095ea:	608d      	str	r5, [r1, #8]
 80095ec:	2501      	movs	r5, #1
 80095ee:	0028      	movs	r0, r5
 80095f0:	4318      	orrs	r0, r3
 80095f2:	6048      	str	r0, [r1, #4]
 80095f4:	50cb      	str	r3, [r1, r3]
 80095f6:	2e00      	cmp	r6, #0
 80095f8:	d1d5      	bne.n	80095a6 <_free_r+0x5e>
 80095fa:	2080      	movs	r0, #128	; 0x80
 80095fc:	0080      	lsls	r0, r0, #2
 80095fe:	4283      	cmp	r3, r0
 8009600:	d213      	bcs.n	800962a <_free_r+0xe2>
 8009602:	08d8      	lsrs	r0, r3, #3
 8009604:	095b      	lsrs	r3, r3, #5
 8009606:	409d      	lsls	r5, r3
 8009608:	6853      	ldr	r3, [r2, #4]
 800960a:	431d      	orrs	r5, r3
 800960c:	00c3      	lsls	r3, r0, #3
 800960e:	189b      	adds	r3, r3, r2
 8009610:	6055      	str	r5, [r2, #4]
 8009612:	689a      	ldr	r2, [r3, #8]
 8009614:	60cb      	str	r3, [r1, #12]
 8009616:	608a      	str	r2, [r1, #8]
 8009618:	6099      	str	r1, [r3, #8]
 800961a:	60d1      	str	r1, [r2, #12]
 800961c:	e7c3      	b.n	80095a6 <_free_r+0x5e>
 800961e:	4666      	mov	r6, ip
 8009620:	e7d3      	b.n	80095ca <_free_r+0x82>
 8009622:	68c0      	ldr	r0, [r0, #12]
 8009624:	60e8      	str	r0, [r5, #12]
 8009626:	6085      	str	r5, [r0, #8]
 8009628:	e7e0      	b.n	80095ec <_free_r+0xa4>
 800962a:	0a5d      	lsrs	r5, r3, #9
 800962c:	2d04      	cmp	r5, #4
 800962e:	d812      	bhi.n	8009656 <_free_r+0x10e>
 8009630:	0998      	lsrs	r0, r3, #6
 8009632:	3038      	adds	r0, #56	; 0x38
 8009634:	00c6      	lsls	r6, r0, #3
 8009636:	18b6      	adds	r6, r6, r2
 8009638:	68b5      	ldr	r5, [r6, #8]
 800963a:	2703      	movs	r7, #3
 800963c:	42ae      	cmp	r6, r5
 800963e:	d125      	bne.n	800968c <_free_r+0x144>
 8009640:	2301      	movs	r3, #1
 8009642:	1080      	asrs	r0, r0, #2
 8009644:	4083      	lsls	r3, r0
 8009646:	6850      	ldr	r0, [r2, #4]
 8009648:	4303      	orrs	r3, r0
 800964a:	6053      	str	r3, [r2, #4]
 800964c:	60ce      	str	r6, [r1, #12]
 800964e:	608d      	str	r5, [r1, #8]
 8009650:	60b1      	str	r1, [r6, #8]
 8009652:	60e9      	str	r1, [r5, #12]
 8009654:	e7a7      	b.n	80095a6 <_free_r+0x5e>
 8009656:	2d14      	cmp	r5, #20
 8009658:	d802      	bhi.n	8009660 <_free_r+0x118>
 800965a:	0028      	movs	r0, r5
 800965c:	305b      	adds	r0, #91	; 0x5b
 800965e:	e7e9      	b.n	8009634 <_free_r+0xec>
 8009660:	2d54      	cmp	r5, #84	; 0x54
 8009662:	d802      	bhi.n	800966a <_free_r+0x122>
 8009664:	0b18      	lsrs	r0, r3, #12
 8009666:	306e      	adds	r0, #110	; 0x6e
 8009668:	e7e4      	b.n	8009634 <_free_r+0xec>
 800966a:	20aa      	movs	r0, #170	; 0xaa
 800966c:	0040      	lsls	r0, r0, #1
 800966e:	4285      	cmp	r5, r0
 8009670:	d802      	bhi.n	8009678 <_free_r+0x130>
 8009672:	0bd8      	lsrs	r0, r3, #15
 8009674:	3077      	adds	r0, #119	; 0x77
 8009676:	e7dd      	b.n	8009634 <_free_r+0xec>
 8009678:	4e0b      	ldr	r6, [pc, #44]	; (80096a8 <_free_r+0x160>)
 800967a:	207e      	movs	r0, #126	; 0x7e
 800967c:	42b5      	cmp	r5, r6
 800967e:	d8d9      	bhi.n	8009634 <_free_r+0xec>
 8009680:	0c98      	lsrs	r0, r3, #18
 8009682:	307c      	adds	r0, #124	; 0x7c
 8009684:	e7d6      	b.n	8009634 <_free_r+0xec>
 8009686:	68ad      	ldr	r5, [r5, #8]
 8009688:	42ae      	cmp	r6, r5
 800968a:	d003      	beq.n	8009694 <_free_r+0x14c>
 800968c:	686a      	ldr	r2, [r5, #4]
 800968e:	43ba      	bics	r2, r7
 8009690:	429a      	cmp	r2, r3
 8009692:	d8f8      	bhi.n	8009686 <_free_r+0x13e>
 8009694:	68ee      	ldr	r6, [r5, #12]
 8009696:	e7d9      	b.n	800964c <_free_r+0x104>
 8009698:	20000148 	.word	0x20000148
 800969c:	20000554 	.word	0x20000554
 80096a0:	200031a0 	.word	0x200031a0
 80096a4:	20000150 	.word	0x20000150
 80096a8:	00000554 	.word	0x00000554

080096ac <_malloc_r>:
 80096ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096ae:	000d      	movs	r5, r1
 80096b0:	b087      	sub	sp, #28
 80096b2:	350b      	adds	r5, #11
 80096b4:	9001      	str	r0, [sp, #4]
 80096b6:	2d16      	cmp	r5, #22
 80096b8:	d908      	bls.n	80096cc <_malloc_r+0x20>
 80096ba:	2207      	movs	r2, #7
 80096bc:	4395      	bics	r5, r2
 80096be:	d506      	bpl.n	80096ce <_malloc_r+0x22>
 80096c0:	230c      	movs	r3, #12
 80096c2:	9a01      	ldr	r2, [sp, #4]
 80096c4:	6013      	str	r3, [r2, #0]
 80096c6:	2000      	movs	r0, #0
 80096c8:	b007      	add	sp, #28
 80096ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096cc:	2510      	movs	r5, #16
 80096ce:	42a9      	cmp	r1, r5
 80096d0:	d8f6      	bhi.n	80096c0 <_malloc_r+0x14>
 80096d2:	9801      	ldr	r0, [sp, #4]
 80096d4:	f000 f9fe 	bl	8009ad4 <__malloc_lock>
 80096d8:	23fc      	movs	r3, #252	; 0xfc
 80096da:	4ebe      	ldr	r6, [pc, #760]	; (80099d4 <_malloc_r+0x328>)
 80096dc:	005b      	lsls	r3, r3, #1
 80096de:	429d      	cmp	r5, r3
 80096e0:	d219      	bcs.n	8009716 <_malloc_r+0x6a>
 80096e2:	002a      	movs	r2, r5
 80096e4:	3208      	adds	r2, #8
 80096e6:	18b2      	adds	r2, r6, r2
 80096e8:	0011      	movs	r1, r2
 80096ea:	6854      	ldr	r4, [r2, #4]
 80096ec:	3908      	subs	r1, #8
 80096ee:	08eb      	lsrs	r3, r5, #3
 80096f0:	428c      	cmp	r4, r1
 80096f2:	d103      	bne.n	80096fc <_malloc_r+0x50>
 80096f4:	68d4      	ldr	r4, [r2, #12]
 80096f6:	3302      	adds	r3, #2
 80096f8:	42a2      	cmp	r2, r4
 80096fa:	d022      	beq.n	8009742 <_malloc_r+0x96>
 80096fc:	2203      	movs	r2, #3
 80096fe:	6863      	ldr	r3, [r4, #4]
 8009700:	68a1      	ldr	r1, [r4, #8]
 8009702:	4393      	bics	r3, r2
 8009704:	68e2      	ldr	r2, [r4, #12]
 8009706:	18e3      	adds	r3, r4, r3
 8009708:	60ca      	str	r2, [r1, #12]
 800970a:	6091      	str	r1, [r2, #8]
 800970c:	2201      	movs	r2, #1
 800970e:	6859      	ldr	r1, [r3, #4]
 8009710:	430a      	orrs	r2, r1
 8009712:	605a      	str	r2, [r3, #4]
 8009714:	e02a      	b.n	800976c <_malloc_r+0xc0>
 8009716:	233f      	movs	r3, #63	; 0x3f
 8009718:	0a6a      	lsrs	r2, r5, #9
 800971a:	d003      	beq.n	8009724 <_malloc_r+0x78>
 800971c:	2a04      	cmp	r2, #4
 800971e:	d82b      	bhi.n	8009778 <_malloc_r+0xcc>
 8009720:	09ab      	lsrs	r3, r5, #6
 8009722:	3338      	adds	r3, #56	; 0x38
 8009724:	2203      	movs	r2, #3
 8009726:	4694      	mov	ip, r2
 8009728:	00d9      	lsls	r1, r3, #3
 800972a:	1989      	adds	r1, r1, r6
 800972c:	68cc      	ldr	r4, [r1, #12]
 800972e:	428c      	cmp	r4, r1
 8009730:	d006      	beq.n	8009740 <_malloc_r+0x94>
 8009732:	4660      	mov	r0, ip
 8009734:	6862      	ldr	r2, [r4, #4]
 8009736:	4382      	bics	r2, r0
 8009738:	1b57      	subs	r7, r2, r5
 800973a:	2f0f      	cmp	r7, #15
 800973c:	dd34      	ble.n	80097a8 <_malloc_r+0xfc>
 800973e:	3b01      	subs	r3, #1
 8009740:	3301      	adds	r3, #1
 8009742:	6934      	ldr	r4, [r6, #16]
 8009744:	49a4      	ldr	r1, [pc, #656]	; (80099d8 <_malloc_r+0x32c>)
 8009746:	428c      	cmp	r4, r1
 8009748:	d055      	beq.n	80097f6 <_malloc_r+0x14a>
 800974a:	2003      	movs	r0, #3
 800974c:	6862      	ldr	r2, [r4, #4]
 800974e:	4382      	bics	r2, r0
 8009750:	1b50      	subs	r0, r2, r5
 8009752:	280f      	cmp	r0, #15
 8009754:	dd36      	ble.n	80097c4 <_malloc_r+0x118>
 8009756:	2301      	movs	r3, #1
 8009758:	1967      	adds	r7, r4, r5
 800975a:	431d      	orrs	r5, r3
 800975c:	4303      	orrs	r3, r0
 800975e:	6065      	str	r5, [r4, #4]
 8009760:	6177      	str	r7, [r6, #20]
 8009762:	6137      	str	r7, [r6, #16]
 8009764:	60f9      	str	r1, [r7, #12]
 8009766:	60b9      	str	r1, [r7, #8]
 8009768:	607b      	str	r3, [r7, #4]
 800976a:	50a0      	str	r0, [r4, r2]
 800976c:	9801      	ldr	r0, [sp, #4]
 800976e:	f000 f9b9 	bl	8009ae4 <__malloc_unlock>
 8009772:	0020      	movs	r0, r4
 8009774:	3008      	adds	r0, #8
 8009776:	e7a7      	b.n	80096c8 <_malloc_r+0x1c>
 8009778:	2a14      	cmp	r2, #20
 800977a:	d802      	bhi.n	8009782 <_malloc_r+0xd6>
 800977c:	0013      	movs	r3, r2
 800977e:	335b      	adds	r3, #91	; 0x5b
 8009780:	e7d0      	b.n	8009724 <_malloc_r+0x78>
 8009782:	2a54      	cmp	r2, #84	; 0x54
 8009784:	d802      	bhi.n	800978c <_malloc_r+0xe0>
 8009786:	0b2b      	lsrs	r3, r5, #12
 8009788:	336e      	adds	r3, #110	; 0x6e
 800978a:	e7cb      	b.n	8009724 <_malloc_r+0x78>
 800978c:	23aa      	movs	r3, #170	; 0xaa
 800978e:	005b      	lsls	r3, r3, #1
 8009790:	429a      	cmp	r2, r3
 8009792:	d802      	bhi.n	800979a <_malloc_r+0xee>
 8009794:	0beb      	lsrs	r3, r5, #15
 8009796:	3377      	adds	r3, #119	; 0x77
 8009798:	e7c4      	b.n	8009724 <_malloc_r+0x78>
 800979a:	4990      	ldr	r1, [pc, #576]	; (80099dc <_malloc_r+0x330>)
 800979c:	237e      	movs	r3, #126	; 0x7e
 800979e:	428a      	cmp	r2, r1
 80097a0:	d8c0      	bhi.n	8009724 <_malloc_r+0x78>
 80097a2:	0cab      	lsrs	r3, r5, #18
 80097a4:	337c      	adds	r3, #124	; 0x7c
 80097a6:	e7bd      	b.n	8009724 <_malloc_r+0x78>
 80097a8:	68e0      	ldr	r0, [r4, #12]
 80097aa:	2f00      	cmp	r7, #0
 80097ac:	db08      	blt.n	80097c0 <_malloc_r+0x114>
 80097ae:	68a3      	ldr	r3, [r4, #8]
 80097b0:	60d8      	str	r0, [r3, #12]
 80097b2:	6083      	str	r3, [r0, #8]
 80097b4:	2301      	movs	r3, #1
 80097b6:	18a2      	adds	r2, r4, r2
 80097b8:	6851      	ldr	r1, [r2, #4]
 80097ba:	430b      	orrs	r3, r1
 80097bc:	6053      	str	r3, [r2, #4]
 80097be:	e7d5      	b.n	800976c <_malloc_r+0xc0>
 80097c0:	0004      	movs	r4, r0
 80097c2:	e7b4      	b.n	800972e <_malloc_r+0x82>
 80097c4:	6171      	str	r1, [r6, #20]
 80097c6:	6131      	str	r1, [r6, #16]
 80097c8:	2800      	cmp	r0, #0
 80097ca:	daf3      	bge.n	80097b4 <_malloc_r+0x108>
 80097cc:	6871      	ldr	r1, [r6, #4]
 80097ce:	468c      	mov	ip, r1
 80097d0:	2180      	movs	r1, #128	; 0x80
 80097d2:	0089      	lsls	r1, r1, #2
 80097d4:	428a      	cmp	r2, r1
 80097d6:	d300      	bcc.n	80097da <_malloc_r+0x12e>
 80097d8:	e08c      	b.n	80098f4 <_malloc_r+0x248>
 80097da:	08d1      	lsrs	r1, r2, #3
 80097dc:	0950      	lsrs	r0, r2, #5
 80097de:	2201      	movs	r2, #1
 80097e0:	4082      	lsls	r2, r0
 80097e2:	4660      	mov	r0, ip
 80097e4:	4302      	orrs	r2, r0
 80097e6:	6072      	str	r2, [r6, #4]
 80097e8:	00ca      	lsls	r2, r1, #3
 80097ea:	1992      	adds	r2, r2, r6
 80097ec:	6891      	ldr	r1, [r2, #8]
 80097ee:	60e2      	str	r2, [r4, #12]
 80097f0:	60a1      	str	r1, [r4, #8]
 80097f2:	6094      	str	r4, [r2, #8]
 80097f4:	60cc      	str	r4, [r1, #12]
 80097f6:	2201      	movs	r2, #1
 80097f8:	4876      	ldr	r0, [pc, #472]	; (80099d4 <_malloc_r+0x328>)
 80097fa:	1099      	asrs	r1, r3, #2
 80097fc:	408a      	lsls	r2, r1
 80097fe:	6841      	ldr	r1, [r0, #4]
 8009800:	4291      	cmp	r1, r2
 8009802:	d328      	bcc.n	8009856 <_malloc_r+0x1aa>
 8009804:	420a      	tst	r2, r1
 8009806:	d105      	bne.n	8009814 <_malloc_r+0x168>
 8009808:	2403      	movs	r4, #3
 800980a:	43a3      	bics	r3, r4
 800980c:	0052      	lsls	r2, r2, #1
 800980e:	3304      	adds	r3, #4
 8009810:	420a      	tst	r2, r1
 8009812:	d0fb      	beq.n	800980c <_malloc_r+0x160>
 8009814:	496f      	ldr	r1, [pc, #444]	; (80099d4 <_malloc_r+0x328>)
 8009816:	9104      	str	r1, [sp, #16]
 8009818:	00d9      	lsls	r1, r3, #3
 800981a:	1841      	adds	r1, r0, r1
 800981c:	468c      	mov	ip, r1
 800981e:	000f      	movs	r7, r1
 8009820:	9302      	str	r3, [sp, #8]
 8009822:	68fc      	ldr	r4, [r7, #12]
 8009824:	42bc      	cmp	r4, r7
 8009826:	d000      	beq.n	800982a <_malloc_r+0x17e>
 8009828:	e09b      	b.n	8009962 <_malloc_r+0x2b6>
 800982a:	2403      	movs	r4, #3
 800982c:	9902      	ldr	r1, [sp, #8]
 800982e:	3708      	adds	r7, #8
 8009830:	3101      	adds	r1, #1
 8009832:	9102      	str	r1, [sp, #8]
 8009834:	4221      	tst	r1, r4
 8009836:	d1f4      	bne.n	8009822 <_malloc_r+0x176>
 8009838:	2103      	movs	r1, #3
 800983a:	420b      	tst	r3, r1
 800983c:	d000      	beq.n	8009840 <_malloc_r+0x194>
 800983e:	e0b7      	b.n	80099b0 <_malloc_r+0x304>
 8009840:	6843      	ldr	r3, [r0, #4]
 8009842:	4393      	bics	r3, r2
 8009844:	6043      	str	r3, [r0, #4]
 8009846:	9b04      	ldr	r3, [sp, #16]
 8009848:	0052      	lsls	r2, r2, #1
 800984a:	6859      	ldr	r1, [r3, #4]
 800984c:	4291      	cmp	r1, r2
 800984e:	d302      	bcc.n	8009856 <_malloc_r+0x1aa>
 8009850:	2a00      	cmp	r2, #0
 8009852:	d000      	beq.n	8009856 <_malloc_r+0x1aa>
 8009854:	e0bb      	b.n	80099ce <_malloc_r+0x322>
 8009856:	2203      	movs	r2, #3
 8009858:	6883      	ldr	r3, [r0, #8]
 800985a:	9302      	str	r3, [sp, #8]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	4393      	bics	r3, r2
 8009860:	9303      	str	r3, [sp, #12]
 8009862:	42ab      	cmp	r3, r5
 8009864:	d303      	bcc.n	800986e <_malloc_r+0x1c2>
 8009866:	1b59      	subs	r1, r3, r5
 8009868:	290f      	cmp	r1, #15
 800986a:	dd00      	ble.n	800986e <_malloc_r+0x1c2>
 800986c:	e123      	b.n	8009ab6 <_malloc_r+0x40a>
 800986e:	9b02      	ldr	r3, [sp, #8]
 8009870:	9a03      	ldr	r2, [sp, #12]
 8009872:	2008      	movs	r0, #8
 8009874:	189e      	adds	r6, r3, r2
 8009876:	4b5a      	ldr	r3, [pc, #360]	; (80099e0 <_malloc_r+0x334>)
 8009878:	681f      	ldr	r7, [r3, #0]
 800987a:	f001 fcd7 	bl	800b22c <sysconf>
 800987e:	4b59      	ldr	r3, [pc, #356]	; (80099e4 <_malloc_r+0x338>)
 8009880:	3710      	adds	r7, #16
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	197f      	adds	r7, r7, r5
 8009886:	9004      	str	r0, [sp, #16]
 8009888:	3301      	adds	r3, #1
 800988a:	d003      	beq.n	8009894 <_malloc_r+0x1e8>
 800988c:	1e7b      	subs	r3, r7, #1
 800988e:	181b      	adds	r3, r3, r0
 8009890:	4247      	negs	r7, r0
 8009892:	401f      	ands	r7, r3
 8009894:	0039      	movs	r1, r7
 8009896:	9801      	ldr	r0, [sp, #4]
 8009898:	f001 fca2 	bl	800b1e0 <_sbrk_r>
 800989c:	0004      	movs	r4, r0
 800989e:	1c43      	adds	r3, r0, #1
 80098a0:	d100      	bne.n	80098a4 <_malloc_r+0x1f8>
 80098a2:	e0de      	b.n	8009a62 <_malloc_r+0x3b6>
 80098a4:	4286      	cmp	r6, r0
 80098a6:	d904      	bls.n	80098b2 <_malloc_r+0x206>
 80098a8:	4b4a      	ldr	r3, [pc, #296]	; (80099d4 <_malloc_r+0x328>)
 80098aa:	9a02      	ldr	r2, [sp, #8]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d000      	beq.n	80098b2 <_malloc_r+0x206>
 80098b0:	e0d7      	b.n	8009a62 <_malloc_r+0x3b6>
 80098b2:	4a4d      	ldr	r2, [pc, #308]	; (80099e8 <_malloc_r+0x33c>)
 80098b4:	6813      	ldr	r3, [r2, #0]
 80098b6:	18fb      	adds	r3, r7, r3
 80098b8:	6013      	str	r3, [r2, #0]
 80098ba:	9a04      	ldr	r2, [sp, #16]
 80098bc:	3a01      	subs	r2, #1
 80098be:	42a6      	cmp	r6, r4
 80098c0:	d000      	beq.n	80098c4 <_malloc_r+0x218>
 80098c2:	e097      	b.n	80099f4 <_malloc_r+0x348>
 80098c4:	4216      	tst	r6, r2
 80098c6:	d000      	beq.n	80098ca <_malloc_r+0x21e>
 80098c8:	e094      	b.n	80099f4 <_malloc_r+0x348>
 80098ca:	4b42      	ldr	r3, [pc, #264]	; (80099d4 <_malloc_r+0x328>)
 80098cc:	689a      	ldr	r2, [r3, #8]
 80098ce:	9b03      	ldr	r3, [sp, #12]
 80098d0:	19df      	adds	r7, r3, r7
 80098d2:	2301      	movs	r3, #1
 80098d4:	433b      	orrs	r3, r7
 80098d6:	6053      	str	r3, [r2, #4]
 80098d8:	4b43      	ldr	r3, [pc, #268]	; (80099e8 <_malloc_r+0x33c>)
 80098da:	4a44      	ldr	r2, [pc, #272]	; (80099ec <_malloc_r+0x340>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	6811      	ldr	r1, [r2, #0]
 80098e0:	428b      	cmp	r3, r1
 80098e2:	d900      	bls.n	80098e6 <_malloc_r+0x23a>
 80098e4:	6013      	str	r3, [r2, #0]
 80098e6:	4a42      	ldr	r2, [pc, #264]	; (80099f0 <_malloc_r+0x344>)
 80098e8:	6811      	ldr	r1, [r2, #0]
 80098ea:	428b      	cmp	r3, r1
 80098ec:	d800      	bhi.n	80098f0 <_malloc_r+0x244>
 80098ee:	e0b8      	b.n	8009a62 <_malloc_r+0x3b6>
 80098f0:	6013      	str	r3, [r2, #0]
 80098f2:	e0b6      	b.n	8009a62 <_malloc_r+0x3b6>
 80098f4:	0a50      	lsrs	r0, r2, #9
 80098f6:	2804      	cmp	r0, #4
 80098f8:	d811      	bhi.n	800991e <_malloc_r+0x272>
 80098fa:	0991      	lsrs	r1, r2, #6
 80098fc:	3138      	adds	r1, #56	; 0x38
 80098fe:	00cf      	lsls	r7, r1, #3
 8009900:	19bf      	adds	r7, r7, r6
 8009902:	68b8      	ldr	r0, [r7, #8]
 8009904:	4287      	cmp	r7, r0
 8009906:	d125      	bne.n	8009954 <_malloc_r+0x2a8>
 8009908:	2201      	movs	r2, #1
 800990a:	1089      	asrs	r1, r1, #2
 800990c:	408a      	lsls	r2, r1
 800990e:	4661      	mov	r1, ip
 8009910:	430a      	orrs	r2, r1
 8009912:	6072      	str	r2, [r6, #4]
 8009914:	60e7      	str	r7, [r4, #12]
 8009916:	60a0      	str	r0, [r4, #8]
 8009918:	60bc      	str	r4, [r7, #8]
 800991a:	60c4      	str	r4, [r0, #12]
 800991c:	e76b      	b.n	80097f6 <_malloc_r+0x14a>
 800991e:	2814      	cmp	r0, #20
 8009920:	d802      	bhi.n	8009928 <_malloc_r+0x27c>
 8009922:	0001      	movs	r1, r0
 8009924:	315b      	adds	r1, #91	; 0x5b
 8009926:	e7ea      	b.n	80098fe <_malloc_r+0x252>
 8009928:	2854      	cmp	r0, #84	; 0x54
 800992a:	d802      	bhi.n	8009932 <_malloc_r+0x286>
 800992c:	0b11      	lsrs	r1, r2, #12
 800992e:	316e      	adds	r1, #110	; 0x6e
 8009930:	e7e5      	b.n	80098fe <_malloc_r+0x252>
 8009932:	21aa      	movs	r1, #170	; 0xaa
 8009934:	0049      	lsls	r1, r1, #1
 8009936:	4288      	cmp	r0, r1
 8009938:	d802      	bhi.n	8009940 <_malloc_r+0x294>
 800993a:	0bd1      	lsrs	r1, r2, #15
 800993c:	3177      	adds	r1, #119	; 0x77
 800993e:	e7de      	b.n	80098fe <_malloc_r+0x252>
 8009940:	4f26      	ldr	r7, [pc, #152]	; (80099dc <_malloc_r+0x330>)
 8009942:	217e      	movs	r1, #126	; 0x7e
 8009944:	42b8      	cmp	r0, r7
 8009946:	d8da      	bhi.n	80098fe <_malloc_r+0x252>
 8009948:	0c91      	lsrs	r1, r2, #18
 800994a:	317c      	adds	r1, #124	; 0x7c
 800994c:	e7d7      	b.n	80098fe <_malloc_r+0x252>
 800994e:	6880      	ldr	r0, [r0, #8]
 8009950:	4287      	cmp	r7, r0
 8009952:	d004      	beq.n	800995e <_malloc_r+0x2b2>
 8009954:	2603      	movs	r6, #3
 8009956:	6841      	ldr	r1, [r0, #4]
 8009958:	43b1      	bics	r1, r6
 800995a:	4291      	cmp	r1, r2
 800995c:	d8f7      	bhi.n	800994e <_malloc_r+0x2a2>
 800995e:	68c7      	ldr	r7, [r0, #12]
 8009960:	e7d8      	b.n	8009914 <_malloc_r+0x268>
 8009962:	2603      	movs	r6, #3
 8009964:	6861      	ldr	r1, [r4, #4]
 8009966:	43b1      	bics	r1, r6
 8009968:	9103      	str	r1, [sp, #12]
 800996a:	68e6      	ldr	r6, [r4, #12]
 800996c:	1b49      	subs	r1, r1, r5
 800996e:	290f      	cmp	r1, #15
 8009970:	dd10      	ble.n	8009994 <_malloc_r+0x2e8>
 8009972:	2201      	movs	r2, #1
 8009974:	1963      	adds	r3, r4, r5
 8009976:	4315      	orrs	r5, r2
 8009978:	6065      	str	r5, [r4, #4]
 800997a:	68a5      	ldr	r5, [r4, #8]
 800997c:	430a      	orrs	r2, r1
 800997e:	60ee      	str	r6, [r5, #12]
 8009980:	60b5      	str	r5, [r6, #8]
 8009982:	6143      	str	r3, [r0, #20]
 8009984:	6103      	str	r3, [r0, #16]
 8009986:	4814      	ldr	r0, [pc, #80]	; (80099d8 <_malloc_r+0x32c>)
 8009988:	605a      	str	r2, [r3, #4]
 800998a:	60d8      	str	r0, [r3, #12]
 800998c:	6098      	str	r0, [r3, #8]
 800998e:	9b03      	ldr	r3, [sp, #12]
 8009990:	50e1      	str	r1, [r4, r3]
 8009992:	e6eb      	b.n	800976c <_malloc_r+0xc0>
 8009994:	2900      	cmp	r1, #0
 8009996:	db09      	blt.n	80099ac <_malloc_r+0x300>
 8009998:	9b03      	ldr	r3, [sp, #12]
 800999a:	18e1      	adds	r1, r4, r3
 800999c:	2301      	movs	r3, #1
 800999e:	684a      	ldr	r2, [r1, #4]
 80099a0:	4313      	orrs	r3, r2
 80099a2:	604b      	str	r3, [r1, #4]
 80099a4:	68a3      	ldr	r3, [r4, #8]
 80099a6:	60de      	str	r6, [r3, #12]
 80099a8:	60b3      	str	r3, [r6, #8]
 80099aa:	e6df      	b.n	800976c <_malloc_r+0xc0>
 80099ac:	0034      	movs	r4, r6
 80099ae:	e739      	b.n	8009824 <_malloc_r+0x178>
 80099b0:	2108      	movs	r1, #8
 80099b2:	4249      	negs	r1, r1
 80099b4:	448c      	add	ip, r1
 80099b6:	4661      	mov	r1, ip
 80099b8:	6889      	ldr	r1, [r1, #8]
 80099ba:	3b01      	subs	r3, #1
 80099bc:	4561      	cmp	r1, ip
 80099be:	d100      	bne.n	80099c2 <_malloc_r+0x316>
 80099c0:	e73a      	b.n	8009838 <_malloc_r+0x18c>
 80099c2:	e740      	b.n	8009846 <_malloc_r+0x19a>
 80099c4:	3304      	adds	r3, #4
 80099c6:	0052      	lsls	r2, r2, #1
 80099c8:	420a      	tst	r2, r1
 80099ca:	d0fb      	beq.n	80099c4 <_malloc_r+0x318>
 80099cc:	e724      	b.n	8009818 <_malloc_r+0x16c>
 80099ce:	9b02      	ldr	r3, [sp, #8]
 80099d0:	e7fa      	b.n	80099c8 <_malloc_r+0x31c>
 80099d2:	46c0      	nop			; (mov r8, r8)
 80099d4:	20000148 	.word	0x20000148
 80099d8:	20000150 	.word	0x20000150
 80099dc:	00000554 	.word	0x00000554
 80099e0:	200031a0 	.word	0x200031a0
 80099e4:	20000550 	.word	0x20000550
 80099e8:	20003170 	.word	0x20003170
 80099ec:	20003198 	.word	0x20003198
 80099f0:	2000319c 	.word	0x2000319c
 80099f4:	4934      	ldr	r1, [pc, #208]	; (8009ac8 <_malloc_r+0x41c>)
 80099f6:	6808      	ldr	r0, [r1, #0]
 80099f8:	3001      	adds	r0, #1
 80099fa:	d140      	bne.n	8009a7e <_malloc_r+0x3d2>
 80099fc:	600c      	str	r4, [r1, #0]
 80099fe:	2107      	movs	r1, #7
 8009a00:	0026      	movs	r6, r4
 8009a02:	2300      	movs	r3, #0
 8009a04:	400e      	ands	r6, r1
 8009a06:	420c      	tst	r4, r1
 8009a08:	d002      	beq.n	8009a10 <_malloc_r+0x364>
 8009a0a:	3308      	adds	r3, #8
 8009a0c:	1b9b      	subs	r3, r3, r6
 8009a0e:	18e4      	adds	r4, r4, r3
 8009a10:	19e1      	adds	r1, r4, r7
 8009a12:	9105      	str	r1, [sp, #20]
 8009a14:	9f05      	ldr	r7, [sp, #20]
 8009a16:	9904      	ldr	r1, [sp, #16]
 8009a18:	4017      	ands	r7, r2
 8009a1a:	18cb      	adds	r3, r1, r3
 8009a1c:	1bdf      	subs	r7, r3, r7
 8009a1e:	4017      	ands	r7, r2
 8009a20:	0039      	movs	r1, r7
 8009a22:	9801      	ldr	r0, [sp, #4]
 8009a24:	f001 fbdc 	bl	800b1e0 <_sbrk_r>
 8009a28:	1c43      	adds	r3, r0, #1
 8009a2a:	d107      	bne.n	8009a3c <_malloc_r+0x390>
 8009a2c:	1e37      	subs	r7, r6, #0
 8009a2e:	9805      	ldr	r0, [sp, #20]
 8009a30:	d004      	beq.n	8009a3c <_malloc_r+0x390>
 8009a32:	0030      	movs	r0, r6
 8009a34:	2700      	movs	r7, #0
 8009a36:	9b05      	ldr	r3, [sp, #20]
 8009a38:	3808      	subs	r0, #8
 8009a3a:	1818      	adds	r0, r3, r0
 8009a3c:	4a23      	ldr	r2, [pc, #140]	; (8009acc <_malloc_r+0x420>)
 8009a3e:	1b00      	subs	r0, r0, r4
 8009a40:	6813      	ldr	r3, [r2, #0]
 8009a42:	19c0      	adds	r0, r0, r7
 8009a44:	19db      	adds	r3, r3, r7
 8009a46:	6013      	str	r3, [r2, #0]
 8009a48:	2201      	movs	r2, #1
 8009a4a:	4b21      	ldr	r3, [pc, #132]	; (8009ad0 <_malloc_r+0x424>)
 8009a4c:	9902      	ldr	r1, [sp, #8]
 8009a4e:	4310      	orrs	r0, r2
 8009a50:	609c      	str	r4, [r3, #8]
 8009a52:	6060      	str	r0, [r4, #4]
 8009a54:	4299      	cmp	r1, r3
 8009a56:	d100      	bne.n	8009a5a <_malloc_r+0x3ae>
 8009a58:	e73e      	b.n	80098d8 <_malloc_r+0x22c>
 8009a5a:	9b03      	ldr	r3, [sp, #12]
 8009a5c:	2b0f      	cmp	r3, #15
 8009a5e:	d813      	bhi.n	8009a88 <_malloc_r+0x3dc>
 8009a60:	6062      	str	r2, [r4, #4]
 8009a62:	2203      	movs	r2, #3
 8009a64:	4b1a      	ldr	r3, [pc, #104]	; (8009ad0 <_malloc_r+0x424>)
 8009a66:	689b      	ldr	r3, [r3, #8]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	4393      	bics	r3, r2
 8009a6c:	1b59      	subs	r1, r3, r5
 8009a6e:	42ab      	cmp	r3, r5
 8009a70:	d301      	bcc.n	8009a76 <_malloc_r+0x3ca>
 8009a72:	290f      	cmp	r1, #15
 8009a74:	dc1f      	bgt.n	8009ab6 <_malloc_r+0x40a>
 8009a76:	9801      	ldr	r0, [sp, #4]
 8009a78:	f000 f834 	bl	8009ae4 <__malloc_unlock>
 8009a7c:	e623      	b.n	80096c6 <_malloc_r+0x1a>
 8009a7e:	4913      	ldr	r1, [pc, #76]	; (8009acc <_malloc_r+0x420>)
 8009a80:	1ba6      	subs	r6, r4, r6
 8009a82:	18f6      	adds	r6, r6, r3
 8009a84:	600e      	str	r6, [r1, #0]
 8009a86:	e7ba      	b.n	80099fe <_malloc_r+0x352>
 8009a88:	2107      	movs	r1, #7
 8009a8a:	9b03      	ldr	r3, [sp, #12]
 8009a8c:	3b0c      	subs	r3, #12
 8009a8e:	438b      	bics	r3, r1
 8009a90:	9902      	ldr	r1, [sp, #8]
 8009a92:	6849      	ldr	r1, [r1, #4]
 8009a94:	400a      	ands	r2, r1
 8009a96:	9902      	ldr	r1, [sp, #8]
 8009a98:	431a      	orrs	r2, r3
 8009a9a:	604a      	str	r2, [r1, #4]
 8009a9c:	18ca      	adds	r2, r1, r3
 8009a9e:	2105      	movs	r1, #5
 8009aa0:	6051      	str	r1, [r2, #4]
 8009aa2:	6091      	str	r1, [r2, #8]
 8009aa4:	2b0f      	cmp	r3, #15
 8009aa6:	d800      	bhi.n	8009aaa <_malloc_r+0x3fe>
 8009aa8:	e716      	b.n	80098d8 <_malloc_r+0x22c>
 8009aaa:	9902      	ldr	r1, [sp, #8]
 8009aac:	9801      	ldr	r0, [sp, #4]
 8009aae:	3108      	adds	r1, #8
 8009ab0:	f7ff fd4a 	bl	8009548 <_free_r>
 8009ab4:	e710      	b.n	80098d8 <_malloc_r+0x22c>
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	0013      	movs	r3, r2
 8009aba:	4805      	ldr	r0, [pc, #20]	; (8009ad0 <_malloc_r+0x424>)
 8009abc:	432b      	orrs	r3, r5
 8009abe:	6884      	ldr	r4, [r0, #8]
 8009ac0:	6063      	str	r3, [r4, #4]
 8009ac2:	1963      	adds	r3, r4, r5
 8009ac4:	6083      	str	r3, [r0, #8]
 8009ac6:	e623      	b.n	8009710 <_malloc_r+0x64>
 8009ac8:	20000550 	.word	0x20000550
 8009acc:	20003170 	.word	0x20003170
 8009ad0:	20000148 	.word	0x20000148

08009ad4 <__malloc_lock>:
 8009ad4:	b510      	push	{r4, lr}
 8009ad6:	4802      	ldr	r0, [pc, #8]	; (8009ae0 <__malloc_lock+0xc>)
 8009ad8:	f7ff fcb0 	bl	800943c <__retarget_lock_acquire_recursive>
 8009adc:	bd10      	pop	{r4, pc}
 8009ade:	46c0      	nop			; (mov r8, r8)
 8009ae0:	20003169 	.word	0x20003169

08009ae4 <__malloc_unlock>:
 8009ae4:	b510      	push	{r4, lr}
 8009ae6:	4802      	ldr	r0, [pc, #8]	; (8009af0 <__malloc_unlock+0xc>)
 8009ae8:	f7ff fca9 	bl	800943e <__retarget_lock_release_recursive>
 8009aec:	bd10      	pop	{r4, pc}
 8009aee:	46c0      	nop			; (mov r8, r8)
 8009af0:	20003169 	.word	0x20003169

08009af4 <_svfprintf_r>:
 8009af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009af6:	b0d9      	sub	sp, #356	; 0x164
 8009af8:	001c      	movs	r4, r3
 8009afa:	910b      	str	r1, [sp, #44]	; 0x2c
 8009afc:	9208      	str	r2, [sp, #32]
 8009afe:	900a      	str	r0, [sp, #40]	; 0x28
 8009b00:	f001 fb6a 	bl	800b1d8 <_localeconv_r>
 8009b04:	6803      	ldr	r3, [r0, #0]
 8009b06:	0018      	movs	r0, r3
 8009b08:	931c      	str	r3, [sp, #112]	; 0x70
 8009b0a:	f7f6 fafd 	bl	8000108 <strlen>
 8009b0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b10:	9016      	str	r0, [sp, #88]	; 0x58
 8009b12:	899b      	ldrh	r3, [r3, #12]
 8009b14:	061b      	lsls	r3, r3, #24
 8009b16:	d517      	bpl.n	8009b48 <_svfprintf_r+0x54>
 8009b18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b1a:	691b      	ldr	r3, [r3, #16]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d113      	bne.n	8009b48 <_svfprintf_r+0x54>
 8009b20:	2140      	movs	r1, #64	; 0x40
 8009b22:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009b24:	f7ff fdc2 	bl	80096ac <_malloc_r>
 8009b28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b2a:	6018      	str	r0, [r3, #0]
 8009b2c:	6118      	str	r0, [r3, #16]
 8009b2e:	2800      	cmp	r0, #0
 8009b30:	d107      	bne.n	8009b42 <_svfprintf_r+0x4e>
 8009b32:	230c      	movs	r3, #12
 8009b34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b36:	6013      	str	r3, [r2, #0]
 8009b38:	3b0d      	subs	r3, #13
 8009b3a:	9317      	str	r3, [sp, #92]	; 0x5c
 8009b3c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009b3e:	b059      	add	sp, #356	; 0x164
 8009b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b42:	2340      	movs	r3, #64	; 0x40
 8009b44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b46:	6153      	str	r3, [r2, #20]
 8009b48:	2300      	movs	r3, #0
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	932e      	str	r3, [sp, #184]	; 0xb8
 8009b4e:	932d      	str	r3, [sp, #180]	; 0xb4
 8009b50:	930e      	str	r3, [sp, #56]	; 0x38
 8009b52:	2300      	movs	r3, #0
 8009b54:	9214      	str	r2, [sp, #80]	; 0x50
 8009b56:	9315      	str	r3, [sp, #84]	; 0x54
 8009b58:	2300      	movs	r3, #0
 8009b5a:	af2f      	add	r7, sp, #188	; 0xbc
 8009b5c:	972c      	str	r7, [sp, #176]	; 0xb0
 8009b5e:	931f      	str	r3, [sp, #124]	; 0x7c
 8009b60:	931e      	str	r3, [sp, #120]	; 0x78
 8009b62:	9312      	str	r3, [sp, #72]	; 0x48
 8009b64:	931b      	str	r3, [sp, #108]	; 0x6c
 8009b66:	931d      	str	r3, [sp, #116]	; 0x74
 8009b68:	9317      	str	r3, [sp, #92]	; 0x5c
 8009b6a:	9d08      	ldr	r5, [sp, #32]
 8009b6c:	782b      	ldrb	r3, [r5, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d002      	beq.n	8009b78 <_svfprintf_r+0x84>
 8009b72:	2b25      	cmp	r3, #37	; 0x25
 8009b74:	d000      	beq.n	8009b78 <_svfprintf_r+0x84>
 8009b76:	e091      	b.n	8009c9c <_svfprintf_r+0x1a8>
 8009b78:	9b08      	ldr	r3, [sp, #32]
 8009b7a:	1aee      	subs	r6, r5, r3
 8009b7c:	429d      	cmp	r5, r3
 8009b7e:	d016      	beq.n	8009bae <_svfprintf_r+0xba>
 8009b80:	603b      	str	r3, [r7, #0]
 8009b82:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009b84:	607e      	str	r6, [r7, #4]
 8009b86:	199b      	adds	r3, r3, r6
 8009b88:	932e      	str	r3, [sp, #184]	; 0xb8
 8009b8a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009b8c:	3708      	adds	r7, #8
 8009b8e:	3301      	adds	r3, #1
 8009b90:	932d      	str	r3, [sp, #180]	; 0xb4
 8009b92:	2b07      	cmp	r3, #7
 8009b94:	dd08      	ble.n	8009ba8 <_svfprintf_r+0xb4>
 8009b96:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b98:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009b9a:	aa2c      	add	r2, sp, #176	; 0xb0
 8009b9c:	f002 fd92 	bl	800c6c4 <__ssprint_r>
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	d000      	beq.n	8009ba6 <_svfprintf_r+0xb2>
 8009ba4:	e1cf      	b.n	8009f46 <_svfprintf_r+0x452>
 8009ba6:	af2f      	add	r7, sp, #188	; 0xbc
 8009ba8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009baa:	199b      	adds	r3, r3, r6
 8009bac:	9317      	str	r3, [sp, #92]	; 0x5c
 8009bae:	782b      	ldrb	r3, [r5, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d101      	bne.n	8009bb8 <_svfprintf_r+0xc4>
 8009bb4:	f001 f99e 	bl	800aef4 <_svfprintf_r+0x1400>
 8009bb8:	221b      	movs	r2, #27
 8009bba:	2300      	movs	r3, #0
 8009bbc:	a91e      	add	r1, sp, #120	; 0x78
 8009bbe:	1852      	adds	r2, r2, r1
 8009bc0:	7013      	strb	r3, [r2, #0]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	001e      	movs	r6, r3
 8009bc6:	4252      	negs	r2, r2
 8009bc8:	3501      	adds	r5, #1
 8009bca:	9209      	str	r2, [sp, #36]	; 0x24
 8009bcc:	9318      	str	r3, [sp, #96]	; 0x60
 8009bce:	1c6b      	adds	r3, r5, #1
 8009bd0:	9313      	str	r3, [sp, #76]	; 0x4c
 8009bd2:	782b      	ldrb	r3, [r5, #0]
 8009bd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bd6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009bd8:	3820      	subs	r0, #32
 8009bda:	285a      	cmp	r0, #90	; 0x5a
 8009bdc:	d901      	bls.n	8009be2 <_svfprintf_r+0xee>
 8009bde:	f000 fe20 	bl	800a822 <_svfprintf_r+0xd2e>
 8009be2:	f7f6 faa3 	bl	800012c <__gnu_thumb1_case_uhi>
 8009be6:	0078      	.short	0x0078
 8009be8:	061e061e 	.word	0x061e061e
 8009bec:	061e0082 	.word	0x061e0082
 8009bf0:	061e061e 	.word	0x061e061e
 8009bf4:	061e005d 	.word	0x061e005d
 8009bf8:	0084061e 	.word	0x0084061e
 8009bfc:	061e008c 	.word	0x061e008c
 8009c00:	0091008a 	.word	0x0091008a
 8009c04:	00b2061e 	.word	0x00b2061e
 8009c08:	00b400b4 	.word	0x00b400b4
 8009c0c:	00b400b4 	.word	0x00b400b4
 8009c10:	00b400b4 	.word	0x00b400b4
 8009c14:	00b400b4 	.word	0x00b400b4
 8009c18:	061e00b4 	.word	0x061e00b4
 8009c1c:	061e061e 	.word	0x061e061e
 8009c20:	061e061e 	.word	0x061e061e
 8009c24:	061e061e 	.word	0x061e061e
 8009c28:	061e013b 	.word	0x061e013b
 8009c2c:	00f400e0 	.word	0x00f400e0
 8009c30:	013b013b 	.word	0x013b013b
 8009c34:	061e013b 	.word	0x061e013b
 8009c38:	061e061e 	.word	0x061e061e
 8009c3c:	00c7061e 	.word	0x00c7061e
 8009c40:	061e061e 	.word	0x061e061e
 8009c44:	061e04c7 	.word	0x061e04c7
 8009c48:	061e061e 	.word	0x061e061e
 8009c4c:	061e050a 	.word	0x061e050a
 8009c50:	061e052a 	.word	0x061e052a
 8009c54:	055c061e 	.word	0x055c061e
 8009c58:	061e061e 	.word	0x061e061e
 8009c5c:	061e061e 	.word	0x061e061e
 8009c60:	061e061e 	.word	0x061e061e
 8009c64:	061e061e 	.word	0x061e061e
 8009c68:	061e013b 	.word	0x061e013b
 8009c6c:	00f600e0 	.word	0x00f600e0
 8009c70:	013b013b 	.word	0x013b013b
 8009c74:	00c9013b 	.word	0x00c9013b
 8009c78:	00dc00f6 	.word	0x00dc00f6
 8009c7c:	00d5061e 	.word	0x00d5061e
 8009c80:	04a7061e 	.word	0x04a7061e
 8009c84:	04fa04c9 	.word	0x04fa04c9
 8009c88:	061e00dc 	.word	0x061e00dc
 8009c8c:	0080050a 	.word	0x0080050a
 8009c90:	061e052c 	.word	0x061e052c
 8009c94:	057c061e 	.word	0x057c061e
 8009c98:	0080061e 	.word	0x0080061e
 8009c9c:	3501      	adds	r5, #1
 8009c9e:	e765      	b.n	8009b6c <_svfprintf_r+0x78>
 8009ca0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009ca2:	f001 fa99 	bl	800b1d8 <_localeconv_r>
 8009ca6:	6843      	ldr	r3, [r0, #4]
 8009ca8:	0018      	movs	r0, r3
 8009caa:	931d      	str	r3, [sp, #116]	; 0x74
 8009cac:	f7f6 fa2c 	bl	8000108 <strlen>
 8009cb0:	901b      	str	r0, [sp, #108]	; 0x6c
 8009cb2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009cb4:	f001 fa90 	bl	800b1d8 <_localeconv_r>
 8009cb8:	6883      	ldr	r3, [r0, #8]
 8009cba:	9312      	str	r3, [sp, #72]	; 0x48
 8009cbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d011      	beq.n	8009ce6 <_svfprintf_r+0x1f2>
 8009cc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d00e      	beq.n	8009ce6 <_svfprintf_r+0x1f2>
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d00b      	beq.n	8009ce6 <_svfprintf_r+0x1f2>
 8009cce:	2380      	movs	r3, #128	; 0x80
 8009cd0:	00db      	lsls	r3, r3, #3
 8009cd2:	431e      	orrs	r6, r3
 8009cd4:	e007      	b.n	8009ce6 <_svfprintf_r+0x1f2>
 8009cd6:	231b      	movs	r3, #27
 8009cd8:	aa1e      	add	r2, sp, #120	; 0x78
 8009cda:	189b      	adds	r3, r3, r2
 8009cdc:	781a      	ldrb	r2, [r3, #0]
 8009cde:	2a00      	cmp	r2, #0
 8009ce0:	d101      	bne.n	8009ce6 <_svfprintf_r+0x1f2>
 8009ce2:	3220      	adds	r2, #32
 8009ce4:	701a      	strb	r2, [r3, #0]
 8009ce6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8009ce8:	e771      	b.n	8009bce <_svfprintf_r+0xda>
 8009cea:	2301      	movs	r3, #1
 8009cec:	e7f1      	b.n	8009cd2 <_svfprintf_r+0x1de>
 8009cee:	cc08      	ldmia	r4!, {r3}
 8009cf0:	9318      	str	r3, [sp, #96]	; 0x60
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	daf7      	bge.n	8009ce6 <_svfprintf_r+0x1f2>
 8009cf6:	425b      	negs	r3, r3
 8009cf8:	9318      	str	r3, [sp, #96]	; 0x60
 8009cfa:	2304      	movs	r3, #4
 8009cfc:	e7e9      	b.n	8009cd2 <_svfprintf_r+0x1de>
 8009cfe:	231b      	movs	r3, #27
 8009d00:	aa1e      	add	r2, sp, #120	; 0x78
 8009d02:	189b      	adds	r3, r3, r2
 8009d04:	222b      	movs	r2, #43	; 0x2b
 8009d06:	e7ed      	b.n	8009ce4 <_svfprintf_r+0x1f0>
 8009d08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009d0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d0c:	7812      	ldrb	r2, [r2, #0]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	920f      	str	r2, [sp, #60]	; 0x3c
 8009d12:	2a2a      	cmp	r2, #42	; 0x2a
 8009d14:	d010      	beq.n	8009d38 <_svfprintf_r+0x244>
 8009d16:	2200      	movs	r2, #0
 8009d18:	9209      	str	r2, [sp, #36]	; 0x24
 8009d1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d1e:	3a30      	subs	r2, #48	; 0x30
 8009d20:	2a09      	cmp	r2, #9
 8009d22:	d900      	bls.n	8009d26 <_svfprintf_r+0x232>
 8009d24:	e757      	b.n	8009bd6 <_svfprintf_r+0xe2>
 8009d26:	200a      	movs	r0, #10
 8009d28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d2a:	4341      	muls	r1, r0
 8009d2c:	188a      	adds	r2, r1, r2
 8009d2e:	9209      	str	r2, [sp, #36]	; 0x24
 8009d30:	781a      	ldrb	r2, [r3, #0]
 8009d32:	3301      	adds	r3, #1
 8009d34:	920f      	str	r2, [sp, #60]	; 0x3c
 8009d36:	e7f0      	b.n	8009d1a <_svfprintf_r+0x226>
 8009d38:	cc04      	ldmia	r4!, {r2}
 8009d3a:	9209      	str	r2, [sp, #36]	; 0x24
 8009d3c:	2a00      	cmp	r2, #0
 8009d3e:	da02      	bge.n	8009d46 <_svfprintf_r+0x252>
 8009d40:	2201      	movs	r2, #1
 8009d42:	4252      	negs	r2, r2
 8009d44:	9209      	str	r2, [sp, #36]	; 0x24
 8009d46:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d48:	e7cd      	b.n	8009ce6 <_svfprintf_r+0x1f2>
 8009d4a:	2380      	movs	r3, #128	; 0x80
 8009d4c:	e7c1      	b.n	8009cd2 <_svfprintf_r+0x1de>
 8009d4e:	2200      	movs	r2, #0
 8009d50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d52:	9218      	str	r2, [sp, #96]	; 0x60
 8009d54:	210a      	movs	r1, #10
 8009d56:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009d58:	434a      	muls	r2, r1
 8009d5a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009d5c:	3930      	subs	r1, #48	; 0x30
 8009d5e:	188a      	adds	r2, r1, r2
 8009d60:	9218      	str	r2, [sp, #96]	; 0x60
 8009d62:	001a      	movs	r2, r3
 8009d64:	7812      	ldrb	r2, [r2, #0]
 8009d66:	3301      	adds	r3, #1
 8009d68:	920f      	str	r2, [sp, #60]	; 0x3c
 8009d6a:	3a30      	subs	r2, #48	; 0x30
 8009d6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d6e:	2a09      	cmp	r2, #9
 8009d70:	d9f0      	bls.n	8009d54 <_svfprintf_r+0x260>
 8009d72:	e730      	b.n	8009bd6 <_svfprintf_r+0xe2>
 8009d74:	2308      	movs	r3, #8
 8009d76:	e7ac      	b.n	8009cd2 <_svfprintf_r+0x1de>
 8009d78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	2b68      	cmp	r3, #104	; 0x68
 8009d7e:	d105      	bne.n	8009d8c <_svfprintf_r+0x298>
 8009d80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d82:	3301      	adds	r3, #1
 8009d84:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d86:	2380      	movs	r3, #128	; 0x80
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	e7a2      	b.n	8009cd2 <_svfprintf_r+0x1de>
 8009d8c:	2340      	movs	r3, #64	; 0x40
 8009d8e:	e7a0      	b.n	8009cd2 <_svfprintf_r+0x1de>
 8009d90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	2b6c      	cmp	r3, #108	; 0x6c
 8009d96:	d104      	bne.n	8009da2 <_svfprintf_r+0x2ae>
 8009d98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d9e:	2320      	movs	r3, #32
 8009da0:	e797      	b.n	8009cd2 <_svfprintf_r+0x1de>
 8009da2:	2310      	movs	r3, #16
 8009da4:	e795      	b.n	8009cd2 <_svfprintf_r+0x1de>
 8009da6:	0021      	movs	r1, r4
 8009da8:	c904      	ldmia	r1!, {r2}
 8009daa:	ab3f      	add	r3, sp, #252	; 0xfc
 8009dac:	910d      	str	r1, [sp, #52]	; 0x34
 8009dae:	211b      	movs	r1, #27
 8009db0:	701a      	strb	r2, [r3, #0]
 8009db2:	2200      	movs	r2, #0
 8009db4:	a81e      	add	r0, sp, #120	; 0x78
 8009db6:	1809      	adds	r1, r1, r0
 8009db8:	700a      	strb	r2, [r1, #0]
 8009dba:	920c      	str	r2, [sp, #48]	; 0x30
 8009dbc:	3201      	adds	r2, #1
 8009dbe:	9209      	str	r2, [sp, #36]	; 0x24
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	9308      	str	r3, [sp, #32]
 8009dc4:	0015      	movs	r5, r2
 8009dc6:	9219      	str	r2, [sp, #100]	; 0x64
 8009dc8:	9210      	str	r2, [sp, #64]	; 0x40
 8009dca:	9211      	str	r2, [sp, #68]	; 0x44
 8009dcc:	e1f1      	b.n	800a1b2 <_svfprintf_r+0x6be>
 8009dce:	2310      	movs	r3, #16
 8009dd0:	431e      	orrs	r6, r3
 8009dd2:	06b3      	lsls	r3, r6, #26
 8009dd4:	d531      	bpl.n	8009e3a <_svfprintf_r+0x346>
 8009dd6:	2307      	movs	r3, #7
 8009dd8:	3407      	adds	r4, #7
 8009dda:	439c      	bics	r4, r3
 8009ddc:	0022      	movs	r2, r4
 8009dde:	ca18      	ldmia	r2!, {r3, r4}
 8009de0:	9306      	str	r3, [sp, #24]
 8009de2:	9407      	str	r4, [sp, #28]
 8009de4:	920d      	str	r2, [sp, #52]	; 0x34
 8009de6:	9a07      	ldr	r2, [sp, #28]
 8009de8:	2301      	movs	r3, #1
 8009dea:	2a00      	cmp	r2, #0
 8009dec:	da0b      	bge.n	8009e06 <_svfprintf_r+0x312>
 8009dee:	9c06      	ldr	r4, [sp, #24]
 8009df0:	9d07      	ldr	r5, [sp, #28]
 8009df2:	2200      	movs	r2, #0
 8009df4:	4261      	negs	r1, r4
 8009df6:	41aa      	sbcs	r2, r5
 8009df8:	9106      	str	r1, [sp, #24]
 8009dfa:	9207      	str	r2, [sp, #28]
 8009dfc:	221b      	movs	r2, #27
 8009dfe:	a91e      	add	r1, sp, #120	; 0x78
 8009e00:	1852      	adds	r2, r2, r1
 8009e02:	212d      	movs	r1, #45	; 0x2d
 8009e04:	7011      	strb	r1, [r2, #0]
 8009e06:	9907      	ldr	r1, [sp, #28]
 8009e08:	9a06      	ldr	r2, [sp, #24]
 8009e0a:	430a      	orrs	r2, r1
 8009e0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e0e:	3101      	adds	r1, #1
 8009e10:	d101      	bne.n	8009e16 <_svfprintf_r+0x322>
 8009e12:	f001 f87b 	bl	800af0c <_svfprintf_r+0x1418>
 8009e16:	2180      	movs	r1, #128	; 0x80
 8009e18:	0034      	movs	r4, r6
 8009e1a:	438c      	bics	r4, r1
 8009e1c:	2a00      	cmp	r2, #0
 8009e1e:	d001      	beq.n	8009e24 <_svfprintf_r+0x330>
 8009e20:	f001 f879 	bl	800af16 <_svfprintf_r+0x1422>
 8009e24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e26:	2a00      	cmp	r2, #0
 8009e28:	d101      	bne.n	8009e2e <_svfprintf_r+0x33a>
 8009e2a:	f000 fcef 	bl	800a80c <_svfprintf_r+0xd18>
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d001      	beq.n	8009e36 <_svfprintf_r+0x342>
 8009e32:	f001 f874 	bl	800af1e <_svfprintf_r+0x142a>
 8009e36:	f000 fc79 	bl	800a72c <_svfprintf_r+0xc38>
 8009e3a:	0022      	movs	r2, r4
 8009e3c:	ca08      	ldmia	r2!, {r3}
 8009e3e:	920d      	str	r2, [sp, #52]	; 0x34
 8009e40:	06f2      	lsls	r2, r6, #27
 8009e42:	d503      	bpl.n	8009e4c <_svfprintf_r+0x358>
 8009e44:	9306      	str	r3, [sp, #24]
 8009e46:	17db      	asrs	r3, r3, #31
 8009e48:	9307      	str	r3, [sp, #28]
 8009e4a:	e7cc      	b.n	8009de6 <_svfprintf_r+0x2f2>
 8009e4c:	0672      	lsls	r2, r6, #25
 8009e4e:	d501      	bpl.n	8009e54 <_svfprintf_r+0x360>
 8009e50:	b21b      	sxth	r3, r3
 8009e52:	e7f7      	b.n	8009e44 <_svfprintf_r+0x350>
 8009e54:	05b2      	lsls	r2, r6, #22
 8009e56:	d5f5      	bpl.n	8009e44 <_svfprintf_r+0x350>
 8009e58:	b25b      	sxtb	r3, r3
 8009e5a:	e7f3      	b.n	8009e44 <_svfprintf_r+0x350>
 8009e5c:	2307      	movs	r3, #7
 8009e5e:	3407      	adds	r4, #7
 8009e60:	439c      	bics	r4, r3
 8009e62:	0022      	movs	r2, r4
 8009e64:	ca18      	ldmia	r2!, {r3, r4}
 8009e66:	920d      	str	r2, [sp, #52]	; 0x34
 8009e68:	2201      	movs	r2, #1
 8009e6a:	9314      	str	r3, [sp, #80]	; 0x50
 8009e6c:	9415      	str	r4, [sp, #84]	; 0x54
 8009e6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e70:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8009e72:	005c      	lsls	r4, r3, #1
 8009e74:	0864      	lsrs	r4, r4, #1
 8009e76:	0028      	movs	r0, r5
 8009e78:	0021      	movs	r1, r4
 8009e7a:	4b3e      	ldr	r3, [pc, #248]	; (8009f74 <_svfprintf_r+0x480>)
 8009e7c:	4252      	negs	r2, r2
 8009e7e:	f7f8 fbc1 	bl	8002604 <__aeabi_dcmpun>
 8009e82:	2800      	cmp	r0, #0
 8009e84:	d126      	bne.n	8009ed4 <_svfprintf_r+0x3e0>
 8009e86:	2201      	movs	r2, #1
 8009e88:	0028      	movs	r0, r5
 8009e8a:	0021      	movs	r1, r4
 8009e8c:	4b39      	ldr	r3, [pc, #228]	; (8009f74 <_svfprintf_r+0x480>)
 8009e8e:	4252      	negs	r2, r2
 8009e90:	f7f6 faec 	bl	800046c <__aeabi_dcmple>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d11d      	bne.n	8009ed4 <_svfprintf_r+0x3e0>
 8009e98:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009e9a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	f7f6 fada 	bl	8000458 <__aeabi_dcmplt>
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	d004      	beq.n	8009eb2 <_svfprintf_r+0x3be>
 8009ea8:	231b      	movs	r3, #27
 8009eaa:	aa1e      	add	r2, sp, #120	; 0x78
 8009eac:	189b      	adds	r3, r3, r2
 8009eae:	222d      	movs	r2, #45	; 0x2d
 8009eb0:	701a      	strb	r2, [r3, #0]
 8009eb2:	4b31      	ldr	r3, [pc, #196]	; (8009f78 <_svfprintf_r+0x484>)
 8009eb4:	9308      	str	r3, [sp, #32]
 8009eb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009eb8:	2b47      	cmp	r3, #71	; 0x47
 8009eba:	dd01      	ble.n	8009ec0 <_svfprintf_r+0x3cc>
 8009ebc:	4b2f      	ldr	r3, [pc, #188]	; (8009f7c <_svfprintf_r+0x488>)
 8009ebe:	9308      	str	r3, [sp, #32]
 8009ec0:	2380      	movs	r3, #128	; 0x80
 8009ec2:	439e      	bics	r6, r3
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	930c      	str	r3, [sp, #48]	; 0x30
 8009ec8:	3303      	adds	r3, #3
 8009eca:	9309      	str	r3, [sp, #36]	; 0x24
 8009ecc:	2300      	movs	r3, #0
 8009ece:	9319      	str	r3, [sp, #100]	; 0x64
 8009ed0:	f000 fc78 	bl	800a7c4 <_svfprintf_r+0xcd0>
 8009ed4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009ed6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ed8:	0010      	movs	r0, r2
 8009eda:	0019      	movs	r1, r3
 8009edc:	f7f8 fb92 	bl	8002604 <__aeabi_dcmpun>
 8009ee0:	2800      	cmp	r0, #0
 8009ee2:	d00e      	beq.n	8009f02 <_svfprintf_r+0x40e>
 8009ee4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	da04      	bge.n	8009ef4 <_svfprintf_r+0x400>
 8009eea:	231b      	movs	r3, #27
 8009eec:	aa1e      	add	r2, sp, #120	; 0x78
 8009eee:	189b      	adds	r3, r3, r2
 8009ef0:	222d      	movs	r2, #45	; 0x2d
 8009ef2:	701a      	strb	r2, [r3, #0]
 8009ef4:	4b22      	ldr	r3, [pc, #136]	; (8009f80 <_svfprintf_r+0x48c>)
 8009ef6:	9308      	str	r3, [sp, #32]
 8009ef8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009efa:	2b47      	cmp	r3, #71	; 0x47
 8009efc:	dde0      	ble.n	8009ec0 <_svfprintf_r+0x3cc>
 8009efe:	4b21      	ldr	r3, [pc, #132]	; (8009f84 <_svfprintf_r+0x490>)
 8009f00:	e7dd      	b.n	8009ebe <_svfprintf_r+0x3ca>
 8009f02:	2320      	movs	r3, #32
 8009f04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009f06:	439a      	bics	r2, r3
 8009f08:	9210      	str	r2, [sp, #64]	; 0x40
 8009f0a:	2a41      	cmp	r2, #65	; 0x41
 8009f0c:	d123      	bne.n	8009f56 <_svfprintf_r+0x462>
 8009f0e:	2230      	movs	r2, #48	; 0x30
 8009f10:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009f12:	ab25      	add	r3, sp, #148	; 0x94
 8009f14:	701a      	strb	r2, [r3, #0]
 8009f16:	3248      	adds	r2, #72	; 0x48
 8009f18:	2961      	cmp	r1, #97	; 0x61
 8009f1a:	d000      	beq.n	8009f1e <_svfprintf_r+0x42a>
 8009f1c:	3a20      	subs	r2, #32
 8009f1e:	705a      	strb	r2, [r3, #1]
 8009f20:	2302      	movs	r3, #2
 8009f22:	431e      	orrs	r6, r3
 8009f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f26:	2b63      	cmp	r3, #99	; 0x63
 8009f28:	dd2e      	ble.n	8009f88 <_svfprintf_r+0x494>
 8009f2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009f2c:	1c59      	adds	r1, r3, #1
 8009f2e:	f7ff fbbd 	bl	80096ac <_malloc_r>
 8009f32:	9008      	str	r0, [sp, #32]
 8009f34:	2800      	cmp	r0, #0
 8009f36:	d000      	beq.n	8009f3a <_svfprintf_r+0x446>
 8009f38:	e216      	b.n	800a368 <_svfprintf_r+0x874>
 8009f3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f3c:	899a      	ldrh	r2, [r3, #12]
 8009f3e:	2340      	movs	r3, #64	; 0x40
 8009f40:	4313      	orrs	r3, r2
 8009f42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f44:	8193      	strh	r3, [r2, #12]
 8009f46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f48:	899b      	ldrh	r3, [r3, #12]
 8009f4a:	065b      	lsls	r3, r3, #25
 8009f4c:	d400      	bmi.n	8009f50 <_svfprintf_r+0x45c>
 8009f4e:	e5f5      	b.n	8009b3c <_svfprintf_r+0x48>
 8009f50:	2301      	movs	r3, #1
 8009f52:	425b      	negs	r3, r3
 8009f54:	e5f1      	b.n	8009b3a <_svfprintf_r+0x46>
 8009f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f58:	900c      	str	r0, [sp, #48]	; 0x30
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	d100      	bne.n	8009f60 <_svfprintf_r+0x46c>
 8009f5e:	e206      	b.n	800a36e <_svfprintf_r+0x87a>
 8009f60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f62:	2b47      	cmp	r3, #71	; 0x47
 8009f64:	d114      	bne.n	8009f90 <_svfprintf_r+0x49c>
 8009f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d111      	bne.n	8009f90 <_svfprintf_r+0x49c>
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8009f70:	e00e      	b.n	8009f90 <_svfprintf_r+0x49c>
 8009f72:	46c0      	nop			; (mov r8, r8)
 8009f74:	7fefffff 	.word	0x7fefffff
 8009f78:	0800e5d6 	.word	0x0800e5d6
 8009f7c:	0800e5da 	.word	0x0800e5da
 8009f80:	0800e5de 	.word	0x0800e5de
 8009f84:	0800e5e2 	.word	0x0800e5e2
 8009f88:	2300      	movs	r3, #0
 8009f8a:	930c      	str	r3, [sp, #48]	; 0x30
 8009f8c:	ab3f      	add	r3, sp, #252	; 0xfc
 8009f8e:	9308      	str	r3, [sp, #32]
 8009f90:	2380      	movs	r3, #128	; 0x80
 8009f92:	005b      	lsls	r3, r3, #1
 8009f94:	4333      	orrs	r3, r6
 8009f96:	931a      	str	r3, [sp, #104]	; 0x68
 8009f98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f9a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	db00      	blt.n	8009fa2 <_svfprintf_r+0x4ae>
 8009fa0:	e1e7      	b.n	800a372 <_svfprintf_r+0x87e>
 8009fa2:	2280      	movs	r2, #128	; 0x80
 8009fa4:	0612      	lsls	r2, r2, #24
 8009fa6:	4694      	mov	ip, r2
 8009fa8:	4463      	add	r3, ip
 8009faa:	930e      	str	r3, [sp, #56]	; 0x38
 8009fac:	232d      	movs	r3, #45	; 0x2d
 8009fae:	9322      	str	r3, [sp, #136]	; 0x88
 8009fb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009fb2:	2b41      	cmp	r3, #65	; 0x41
 8009fb4:	d000      	beq.n	8009fb8 <_svfprintf_r+0x4c4>
 8009fb6:	e1f5      	b.n	800a3a4 <_svfprintf_r+0x8b0>
 8009fb8:	0028      	movs	r0, r5
 8009fba:	aa26      	add	r2, sp, #152	; 0x98
 8009fbc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009fbe:	f001 f941 	bl	800b244 <frexp>
 8009fc2:	23ff      	movs	r3, #255	; 0xff
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	059b      	lsls	r3, r3, #22
 8009fc8:	f7f7 fcd8 	bl	800197c <__aeabi_dmul>
 8009fcc:	2200      	movs	r2, #0
 8009fce:	2300      	movs	r3, #0
 8009fd0:	0004      	movs	r4, r0
 8009fd2:	000d      	movs	r5, r1
 8009fd4:	f7f6 fa3a 	bl	800044c <__aeabi_dcmpeq>
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	d001      	beq.n	8009fe0 <_svfprintf_r+0x4ec>
 8009fdc:	2301      	movs	r3, #1
 8009fde:	9326      	str	r3, [sp, #152]	; 0x98
 8009fe0:	4bda      	ldr	r3, [pc, #872]	; (800a34c <_svfprintf_r+0x858>)
 8009fe2:	9319      	str	r3, [sp, #100]	; 0x64
 8009fe4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fe6:	2b61      	cmp	r3, #97	; 0x61
 8009fe8:	d001      	beq.n	8009fee <_svfprintf_r+0x4fa>
 8009fea:	4bd9      	ldr	r3, [pc, #868]	; (800a350 <_svfprintf_r+0x85c>)
 8009fec:	9319      	str	r3, [sp, #100]	; 0x64
 8009fee:	9b08      	ldr	r3, [sp, #32]
 8009ff0:	930e      	str	r3, [sp, #56]	; 0x38
 8009ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	9311      	str	r3, [sp, #68]	; 0x44
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	4bd6      	ldr	r3, [pc, #856]	; (800a354 <_svfprintf_r+0x860>)
 8009ffc:	0020      	movs	r0, r4
 8009ffe:	0029      	movs	r1, r5
 800a000:	f7f7 fcbc 	bl	800197c <__aeabi_dmul>
 800a004:	000d      	movs	r5, r1
 800a006:	0004      	movs	r4, r0
 800a008:	f7f8 fb1a 	bl	8002640 <__aeabi_d2iz>
 800a00c:	9021      	str	r0, [sp, #132]	; 0x84
 800a00e:	f7f8 fb4d 	bl	80026ac <__aeabi_i2d>
 800a012:	0002      	movs	r2, r0
 800a014:	000b      	movs	r3, r1
 800a016:	0020      	movs	r0, r4
 800a018:	0029      	movs	r1, r5
 800a01a:	f7f7 ff71 	bl	8001f00 <__aeabi_dsub>
 800a01e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a020:	000d      	movs	r5, r1
 800a022:	001a      	movs	r2, r3
 800a024:	3201      	adds	r2, #1
 800a026:	9921      	ldr	r1, [sp, #132]	; 0x84
 800a028:	920e      	str	r2, [sp, #56]	; 0x38
 800a02a:	9223      	str	r2, [sp, #140]	; 0x8c
 800a02c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a02e:	0004      	movs	r4, r0
 800a030:	5c52      	ldrb	r2, [r2, r1]
 800a032:	701a      	strb	r2, [r3, #0]
 800a034:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a036:	9320      	str	r3, [sp, #128]	; 0x80
 800a038:	3301      	adds	r3, #1
 800a03a:	d00a      	beq.n	800a052 <_svfprintf_r+0x55e>
 800a03c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a03e:	2200      	movs	r2, #0
 800a040:	3b01      	subs	r3, #1
 800a042:	9311      	str	r3, [sp, #68]	; 0x44
 800a044:	0020      	movs	r0, r4
 800a046:	2300      	movs	r3, #0
 800a048:	0029      	movs	r1, r5
 800a04a:	f7f6 f9ff 	bl	800044c <__aeabi_dcmpeq>
 800a04e:	2800      	cmp	r0, #0
 800a050:	d0d2      	beq.n	8009ff8 <_svfprintf_r+0x504>
 800a052:	2200      	movs	r2, #0
 800a054:	0020      	movs	r0, r4
 800a056:	0029      	movs	r1, r5
 800a058:	4bbf      	ldr	r3, [pc, #764]	; (800a358 <_svfprintf_r+0x864>)
 800a05a:	f7f6 fa11 	bl	8000480 <__aeabi_dcmpgt>
 800a05e:	2800      	cmp	r0, #0
 800a060:	d10c      	bne.n	800a07c <_svfprintf_r+0x588>
 800a062:	2200      	movs	r2, #0
 800a064:	0020      	movs	r0, r4
 800a066:	0029      	movs	r1, r5
 800a068:	4bbb      	ldr	r3, [pc, #748]	; (800a358 <_svfprintf_r+0x864>)
 800a06a:	f7f6 f9ef 	bl	800044c <__aeabi_dcmpeq>
 800a06e:	2800      	cmp	r0, #0
 800a070:	d100      	bne.n	800a074 <_svfprintf_r+0x580>
 800a072:	e191      	b.n	800a398 <_svfprintf_r+0x8a4>
 800a074:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a076:	07db      	lsls	r3, r3, #31
 800a078:	d400      	bmi.n	800a07c <_svfprintf_r+0x588>
 800a07a:	e18d      	b.n	800a398 <_svfprintf_r+0x8a4>
 800a07c:	2030      	movs	r0, #48	; 0x30
 800a07e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a080:	932a      	str	r3, [sp, #168]	; 0xa8
 800a082:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a084:	7bdb      	ldrb	r3, [r3, #15]
 800a086:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800a088:	3a01      	subs	r2, #1
 800a08a:	922a      	str	r2, [sp, #168]	; 0xa8
 800a08c:	7811      	ldrb	r1, [r2, #0]
 800a08e:	4299      	cmp	r1, r3
 800a090:	d100      	bne.n	800a094 <_svfprintf_r+0x5a0>
 800a092:	e171      	b.n	800a378 <_svfprintf_r+0x884>
 800a094:	1c4b      	adds	r3, r1, #1
 800a096:	b2db      	uxtb	r3, r3
 800a098:	2939      	cmp	r1, #57	; 0x39
 800a09a:	d101      	bne.n	800a0a0 <_svfprintf_r+0x5ac>
 800a09c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a09e:	7a9b      	ldrb	r3, [r3, #10]
 800a0a0:	7013      	strb	r3, [r2, #0]
 800a0a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a0a4:	9a08      	ldr	r2, [sp, #32]
 800a0a6:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800a0a8:	1a9b      	subs	r3, r3, r2
 800a0aa:	930e      	str	r3, [sp, #56]	; 0x38
 800a0ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0ae:	2b47      	cmp	r3, #71	; 0x47
 800a0b0:	d000      	beq.n	800a0b4 <_svfprintf_r+0x5c0>
 800a0b2:	e1c4      	b.n	800a43e <_svfprintf_r+0x94a>
 800a0b4:	1ceb      	adds	r3, r5, #3
 800a0b6:	db03      	blt.n	800a0c0 <_svfprintf_r+0x5cc>
 800a0b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ba:	42ab      	cmp	r3, r5
 800a0bc:	db00      	blt.n	800a0c0 <_svfprintf_r+0x5cc>
 800a0be:	e1e6      	b.n	800a48e <_svfprintf_r+0x99a>
 800a0c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0c2:	3b02      	subs	r3, #2
 800a0c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0c6:	223c      	movs	r2, #60	; 0x3c
 800a0c8:	466b      	mov	r3, sp
 800a0ca:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a0cc:	189b      	adds	r3, r3, r2
 800a0ce:	1e6c      	subs	r4, r5, #1
 800a0d0:	3a1c      	subs	r2, #28
 800a0d2:	2000      	movs	r0, #0
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	9426      	str	r4, [sp, #152]	; 0x98
 800a0d8:	4391      	bics	r1, r2
 800a0da:	2941      	cmp	r1, #65	; 0x41
 800a0dc:	d102      	bne.n	800a0e4 <_svfprintf_r+0x5f0>
 800a0de:	330f      	adds	r3, #15
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	3001      	adds	r0, #1
 800a0e4:	a928      	add	r1, sp, #160	; 0xa0
 800a0e6:	700b      	strb	r3, [r1, #0]
 800a0e8:	232b      	movs	r3, #43	; 0x2b
 800a0ea:	2c00      	cmp	r4, #0
 800a0ec:	da02      	bge.n	800a0f4 <_svfprintf_r+0x600>
 800a0ee:	2401      	movs	r4, #1
 800a0f0:	3302      	adds	r3, #2
 800a0f2:	1b64      	subs	r4, r4, r5
 800a0f4:	704b      	strb	r3, [r1, #1]
 800a0f6:	2c09      	cmp	r4, #9
 800a0f8:	dc00      	bgt.n	800a0fc <_svfprintf_r+0x608>
 800a0fa:	e1ba      	b.n	800a472 <_svfprintf_r+0x97e>
 800a0fc:	2337      	movs	r3, #55	; 0x37
 800a0fe:	250a      	movs	r5, #10
 800a100:	aa1e      	add	r2, sp, #120	; 0x78
 800a102:	189b      	adds	r3, r3, r2
 800a104:	9310      	str	r3, [sp, #64]	; 0x40
 800a106:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a108:	0020      	movs	r0, r4
 800a10a:	9309      	str	r3, [sp, #36]	; 0x24
 800a10c:	0029      	movs	r1, r5
 800a10e:	3b01      	subs	r3, #1
 800a110:	9310      	str	r3, [sp, #64]	; 0x40
 800a112:	f7f6 f985 	bl	8000420 <__aeabi_idivmod>
 800a116:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a118:	3130      	adds	r1, #48	; 0x30
 800a11a:	7019      	strb	r1, [r3, #0]
 800a11c:	0020      	movs	r0, r4
 800a11e:	0029      	movs	r1, r5
 800a120:	9411      	str	r4, [sp, #68]	; 0x44
 800a122:	f7f6 f897 	bl	8000254 <__divsi3>
 800a126:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a128:	0004      	movs	r4, r0
 800a12a:	2b63      	cmp	r3, #99	; 0x63
 800a12c:	dceb      	bgt.n	800a106 <_svfprintf_r+0x612>
 800a12e:	222a      	movs	r2, #42	; 0x2a
 800a130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a132:	a81e      	add	r0, sp, #120	; 0x78
 800a134:	1e99      	subs	r1, r3, #2
 800a136:	1812      	adds	r2, r2, r0
 800a138:	2037      	movs	r0, #55	; 0x37
 800a13a:	000b      	movs	r3, r1
 800a13c:	3430      	adds	r4, #48	; 0x30
 800a13e:	700c      	strb	r4, [r1, #0]
 800a140:	ac1e      	add	r4, sp, #120	; 0x78
 800a142:	1900      	adds	r0, r0, r4
 800a144:	4283      	cmp	r3, r0
 800a146:	d200      	bcs.n	800a14a <_svfprintf_r+0x656>
 800a148:	e18e      	b.n	800a468 <_svfprintf_r+0x974>
 800a14a:	2300      	movs	r3, #0
 800a14c:	4281      	cmp	r1, r0
 800a14e:	d804      	bhi.n	800a15a <_svfprintf_r+0x666>
 800a150:	aa1e      	add	r2, sp, #120	; 0x78
 800a152:	3339      	adds	r3, #57	; 0x39
 800a154:	189b      	adds	r3, r3, r2
 800a156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a158:	1a9b      	subs	r3, r3, r2
 800a15a:	222a      	movs	r2, #42	; 0x2a
 800a15c:	a91e      	add	r1, sp, #120	; 0x78
 800a15e:	1852      	adds	r2, r2, r1
 800a160:	18d3      	adds	r3, r2, r3
 800a162:	aa28      	add	r2, sp, #160	; 0xa0
 800a164:	1a9b      	subs	r3, r3, r2
 800a166:	931e      	str	r3, [sp, #120]	; 0x78
 800a168:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a16a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a16c:	4694      	mov	ip, r2
 800a16e:	4463      	add	r3, ip
 800a170:	9309      	str	r3, [sp, #36]	; 0x24
 800a172:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a174:	2b01      	cmp	r3, #1
 800a176:	dc01      	bgt.n	800a17c <_svfprintf_r+0x688>
 800a178:	07f3      	lsls	r3, r6, #31
 800a17a:	d504      	bpl.n	800a186 <_svfprintf_r+0x692>
 800a17c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a17e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a180:	4694      	mov	ip, r2
 800a182:	4463      	add	r3, ip
 800a184:	9309      	str	r3, [sp, #36]	; 0x24
 800a186:	2280      	movs	r2, #128	; 0x80
 800a188:	4b74      	ldr	r3, [pc, #464]	; (800a35c <_svfprintf_r+0x868>)
 800a18a:	0052      	lsls	r2, r2, #1
 800a18c:	4033      	ands	r3, r6
 800a18e:	431a      	orrs	r2, r3
 800a190:	2300      	movs	r3, #0
 800a192:	001d      	movs	r5, r3
 800a194:	921a      	str	r2, [sp, #104]	; 0x68
 800a196:	9310      	str	r3, [sp, #64]	; 0x40
 800a198:	9311      	str	r3, [sp, #68]	; 0x44
 800a19a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a19c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800a19e:	9319      	str	r3, [sp, #100]	; 0x64
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d006      	beq.n	800a1b2 <_svfprintf_r+0x6be>
 800a1a4:	231b      	movs	r3, #27
 800a1a6:	aa1e      	add	r2, sp, #120	; 0x78
 800a1a8:	189b      	adds	r3, r3, r2
 800a1aa:	222d      	movs	r2, #45	; 0x2d
 800a1ac:	701a      	strb	r2, [r3, #0]
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	9319      	str	r3, [sp, #100]	; 0x64
 800a1b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a1b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1b6:	931a      	str	r3, [sp, #104]	; 0x68
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	da00      	bge.n	800a1be <_svfprintf_r+0x6ca>
 800a1bc:	921a      	str	r2, [sp, #104]	; 0x68
 800a1be:	231b      	movs	r3, #27
 800a1c0:	aa1e      	add	r2, sp, #120	; 0x78
 800a1c2:	189b      	adds	r3, r3, r2
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	1e5a      	subs	r2, r3, #1
 800a1c8:	4193      	sbcs	r3, r2
 800a1ca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a1cc:	18d3      	adds	r3, r2, r3
 800a1ce:	931a      	str	r3, [sp, #104]	; 0x68
 800a1d0:	0032      	movs	r2, r6
 800a1d2:	2302      	movs	r3, #2
 800a1d4:	401a      	ands	r2, r3
 800a1d6:	9220      	str	r2, [sp, #128]	; 0x80
 800a1d8:	421e      	tst	r6, r3
 800a1da:	d002      	beq.n	800a1e2 <_svfprintf_r+0x6ee>
 800a1dc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a1de:	3302      	adds	r3, #2
 800a1e0:	931a      	str	r3, [sp, #104]	; 0x68
 800a1e2:	2384      	movs	r3, #132	; 0x84
 800a1e4:	0032      	movs	r2, r6
 800a1e6:	401a      	ands	r2, r3
 800a1e8:	9221      	str	r2, [sp, #132]	; 0x84
 800a1ea:	421e      	tst	r6, r3
 800a1ec:	d11f      	bne.n	800a22e <_svfprintf_r+0x73a>
 800a1ee:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a1f0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a1f2:	1a9c      	subs	r4, r3, r2
 800a1f4:	2c00      	cmp	r4, #0
 800a1f6:	dd1a      	ble.n	800a22e <_svfprintf_r+0x73a>
 800a1f8:	0039      	movs	r1, r7
 800a1fa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a1fc:	4858      	ldr	r0, [pc, #352]	; (800a360 <_svfprintf_r+0x86c>)
 800a1fe:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a200:	3301      	adds	r3, #1
 800a202:	3108      	adds	r1, #8
 800a204:	6038      	str	r0, [r7, #0]
 800a206:	2c10      	cmp	r4, #16
 800a208:	dd00      	ble.n	800a20c <_svfprintf_r+0x718>
 800a20a:	e31c      	b.n	800a846 <_svfprintf_r+0xd52>
 800a20c:	607c      	str	r4, [r7, #4]
 800a20e:	18a4      	adds	r4, r4, r2
 800a210:	000f      	movs	r7, r1
 800a212:	942e      	str	r4, [sp, #184]	; 0xb8
 800a214:	932d      	str	r3, [sp, #180]	; 0xb4
 800a216:	2b07      	cmp	r3, #7
 800a218:	dd09      	ble.n	800a22e <_svfprintf_r+0x73a>
 800a21a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a21c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a21e:	aa2c      	add	r2, sp, #176	; 0xb0
 800a220:	f002 fa50 	bl	800c6c4 <__ssprint_r>
 800a224:	2800      	cmp	r0, #0
 800a226:	d001      	beq.n	800a22c <_svfprintf_r+0x738>
 800a228:	f000 fe43 	bl	800aeb2 <_svfprintf_r+0x13be>
 800a22c:	af2f      	add	r7, sp, #188	; 0xbc
 800a22e:	221b      	movs	r2, #27
 800a230:	a91e      	add	r1, sp, #120	; 0x78
 800a232:	1852      	adds	r2, r2, r1
 800a234:	7811      	ldrb	r1, [r2, #0]
 800a236:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a238:	2900      	cmp	r1, #0
 800a23a:	d014      	beq.n	800a266 <_svfprintf_r+0x772>
 800a23c:	603a      	str	r2, [r7, #0]
 800a23e:	2201      	movs	r2, #1
 800a240:	189b      	adds	r3, r3, r2
 800a242:	932e      	str	r3, [sp, #184]	; 0xb8
 800a244:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a246:	607a      	str	r2, [r7, #4]
 800a248:	189b      	adds	r3, r3, r2
 800a24a:	932d      	str	r3, [sp, #180]	; 0xb4
 800a24c:	3708      	adds	r7, #8
 800a24e:	2b07      	cmp	r3, #7
 800a250:	dd09      	ble.n	800a266 <_svfprintf_r+0x772>
 800a252:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a254:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a256:	aa2c      	add	r2, sp, #176	; 0xb0
 800a258:	f002 fa34 	bl	800c6c4 <__ssprint_r>
 800a25c:	2800      	cmp	r0, #0
 800a25e:	d001      	beq.n	800a264 <_svfprintf_r+0x770>
 800a260:	f000 fe27 	bl	800aeb2 <_svfprintf_r+0x13be>
 800a264:	af2f      	add	r7, sp, #188	; 0xbc
 800a266:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a268:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a26a:	2a00      	cmp	r2, #0
 800a26c:	d015      	beq.n	800a29a <_svfprintf_r+0x7a6>
 800a26e:	aa25      	add	r2, sp, #148	; 0x94
 800a270:	603a      	str	r2, [r7, #0]
 800a272:	2202      	movs	r2, #2
 800a274:	189b      	adds	r3, r3, r2
 800a276:	932e      	str	r3, [sp, #184]	; 0xb8
 800a278:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a27a:	607a      	str	r2, [r7, #4]
 800a27c:	3301      	adds	r3, #1
 800a27e:	932d      	str	r3, [sp, #180]	; 0xb4
 800a280:	3708      	adds	r7, #8
 800a282:	2b07      	cmp	r3, #7
 800a284:	dd09      	ble.n	800a29a <_svfprintf_r+0x7a6>
 800a286:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a288:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a28a:	aa2c      	add	r2, sp, #176	; 0xb0
 800a28c:	f002 fa1a 	bl	800c6c4 <__ssprint_r>
 800a290:	2800      	cmp	r0, #0
 800a292:	d001      	beq.n	800a298 <_svfprintf_r+0x7a4>
 800a294:	f000 fe0d 	bl	800aeb2 <_svfprintf_r+0x13be>
 800a298:	af2f      	add	r7, sp, #188	; 0xbc
 800a29a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a29c:	2b80      	cmp	r3, #128	; 0x80
 800a29e:	d11f      	bne.n	800a2e0 <_svfprintf_r+0x7ec>
 800a2a0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a2a2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a2a4:	1a9c      	subs	r4, r3, r2
 800a2a6:	2c00      	cmp	r4, #0
 800a2a8:	dd1a      	ble.n	800a2e0 <_svfprintf_r+0x7ec>
 800a2aa:	0039      	movs	r1, r7
 800a2ac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a2ae:	482d      	ldr	r0, [pc, #180]	; (800a364 <_svfprintf_r+0x870>)
 800a2b0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	3108      	adds	r1, #8
 800a2b6:	6038      	str	r0, [r7, #0]
 800a2b8:	2c10      	cmp	r4, #16
 800a2ba:	dd00      	ble.n	800a2be <_svfprintf_r+0x7ca>
 800a2bc:	e2d6      	b.n	800a86c <_svfprintf_r+0xd78>
 800a2be:	607c      	str	r4, [r7, #4]
 800a2c0:	18a4      	adds	r4, r4, r2
 800a2c2:	000f      	movs	r7, r1
 800a2c4:	942e      	str	r4, [sp, #184]	; 0xb8
 800a2c6:	932d      	str	r3, [sp, #180]	; 0xb4
 800a2c8:	2b07      	cmp	r3, #7
 800a2ca:	dd09      	ble.n	800a2e0 <_svfprintf_r+0x7ec>
 800a2cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a2d0:	aa2c      	add	r2, sp, #176	; 0xb0
 800a2d2:	f002 f9f7 	bl	800c6c4 <__ssprint_r>
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	d001      	beq.n	800a2de <_svfprintf_r+0x7ea>
 800a2da:	f000 fdea 	bl	800aeb2 <_svfprintf_r+0x13be>
 800a2de:	af2f      	add	r7, sp, #188	; 0xbc
 800a2e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a2e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2e4:	1a9c      	subs	r4, r3, r2
 800a2e6:	2c00      	cmp	r4, #0
 800a2e8:	dd1a      	ble.n	800a320 <_svfprintf_r+0x82c>
 800a2ea:	0039      	movs	r1, r7
 800a2ec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a2ee:	481d      	ldr	r0, [pc, #116]	; (800a364 <_svfprintf_r+0x870>)
 800a2f0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	3108      	adds	r1, #8
 800a2f6:	6038      	str	r0, [r7, #0]
 800a2f8:	2c10      	cmp	r4, #16
 800a2fa:	dd00      	ble.n	800a2fe <_svfprintf_r+0x80a>
 800a2fc:	e2c9      	b.n	800a892 <_svfprintf_r+0xd9e>
 800a2fe:	18a2      	adds	r2, r4, r2
 800a300:	607c      	str	r4, [r7, #4]
 800a302:	922e      	str	r2, [sp, #184]	; 0xb8
 800a304:	000f      	movs	r7, r1
 800a306:	932d      	str	r3, [sp, #180]	; 0xb4
 800a308:	2b07      	cmp	r3, #7
 800a30a:	dd09      	ble.n	800a320 <_svfprintf_r+0x82c>
 800a30c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a30e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a310:	aa2c      	add	r2, sp, #176	; 0xb0
 800a312:	f002 f9d7 	bl	800c6c4 <__ssprint_r>
 800a316:	2800      	cmp	r0, #0
 800a318:	d001      	beq.n	800a31e <_svfprintf_r+0x82a>
 800a31a:	f000 fdca 	bl	800aeb2 <_svfprintf_r+0x13be>
 800a31e:	af2f      	add	r7, sp, #188	; 0xbc
 800a320:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a322:	9319      	str	r3, [sp, #100]	; 0x64
 800a324:	05f3      	lsls	r3, r6, #23
 800a326:	d500      	bpl.n	800a32a <_svfprintf_r+0x836>
 800a328:	e2ce      	b.n	800a8c8 <_svfprintf_r+0xdd4>
 800a32a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a32c:	9b08      	ldr	r3, [sp, #32]
 800a32e:	4694      	mov	ip, r2
 800a330:	603b      	str	r3, [r7, #0]
 800a332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a334:	607b      	str	r3, [r7, #4]
 800a336:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a338:	4463      	add	r3, ip
 800a33a:	932e      	str	r3, [sp, #184]	; 0xb8
 800a33c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a33e:	3301      	adds	r3, #1
 800a340:	932d      	str	r3, [sp, #180]	; 0xb4
 800a342:	2b07      	cmp	r3, #7
 800a344:	dd00      	ble.n	800a348 <_svfprintf_r+0x854>
 800a346:	e3a3      	b.n	800aa90 <_svfprintf_r+0xf9c>
 800a348:	3708      	adds	r7, #8
 800a34a:	e301      	b.n	800a950 <_svfprintf_r+0xe5c>
 800a34c:	0800e5e6 	.word	0x0800e5e6
 800a350:	0800e5f7 	.word	0x0800e5f7
 800a354:	40300000 	.word	0x40300000
 800a358:	3fe00000 	.word	0x3fe00000
 800a35c:	fffffbff 	.word	0xfffffbff
 800a360:	0800e60a 	.word	0x0800e60a
 800a364:	0800e61a 	.word	0x0800e61a
 800a368:	9b08      	ldr	r3, [sp, #32]
 800a36a:	930c      	str	r3, [sp, #48]	; 0x30
 800a36c:	e610      	b.n	8009f90 <_svfprintf_r+0x49c>
 800a36e:	2306      	movs	r3, #6
 800a370:	e5fd      	b.n	8009f6e <_svfprintf_r+0x47a>
 800a372:	930e      	str	r3, [sp, #56]	; 0x38
 800a374:	2300      	movs	r3, #0
 800a376:	e61a      	b.n	8009fae <_svfprintf_r+0x4ba>
 800a378:	7010      	strb	r0, [r2, #0]
 800a37a:	e684      	b.n	800a086 <_svfprintf_r+0x592>
 800a37c:	7018      	strb	r0, [r3, #0]
 800a37e:	3301      	adds	r3, #1
 800a380:	1aca      	subs	r2, r1, r3
 800a382:	d5fb      	bpl.n	800a37c <_svfprintf_r+0x888>
 800a384:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a386:	2300      	movs	r3, #0
 800a388:	3201      	adds	r2, #1
 800a38a:	db01      	blt.n	800a390 <_svfprintf_r+0x89c>
 800a38c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a38e:	3301      	adds	r3, #1
 800a390:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a392:	18d3      	adds	r3, r2, r3
 800a394:	9323      	str	r3, [sp, #140]	; 0x8c
 800a396:	e684      	b.n	800a0a2 <_svfprintf_r+0x5ae>
 800a398:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a39a:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a39c:	2030      	movs	r0, #48	; 0x30
 800a39e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3a0:	1851      	adds	r1, r2, r1
 800a3a2:	e7ed      	b.n	800a380 <_svfprintf_r+0x88c>
 800a3a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a3a6:	2303      	movs	r3, #3
 800a3a8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a3aa:	2a46      	cmp	r2, #70	; 0x46
 800a3ac:	d006      	beq.n	800a3bc <_svfprintf_r+0x8c8>
 800a3ae:	0014      	movs	r4, r2
 800a3b0:	3c45      	subs	r4, #69	; 0x45
 800a3b2:	4262      	negs	r2, r4
 800a3b4:	4154      	adcs	r4, r2
 800a3b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	1914      	adds	r4, r2, r4
 800a3bc:	aa2a      	add	r2, sp, #168	; 0xa8
 800a3be:	9204      	str	r2, [sp, #16]
 800a3c0:	aa27      	add	r2, sp, #156	; 0x9c
 800a3c2:	9203      	str	r2, [sp, #12]
 800a3c4:	aa26      	add	r2, sp, #152	; 0x98
 800a3c6:	9202      	str	r2, [sp, #8]
 800a3c8:	9300      	str	r3, [sp, #0]
 800a3ca:	002a      	movs	r2, r5
 800a3cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a3d0:	9401      	str	r4, [sp, #4]
 800a3d2:	f001 f839 	bl	800b448 <_dtoa_r>
 800a3d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3d8:	9008      	str	r0, [sp, #32]
 800a3da:	2b47      	cmp	r3, #71	; 0x47
 800a3dc:	d103      	bne.n	800a3e6 <_svfprintf_r+0x8f2>
 800a3de:	07f3      	lsls	r3, r6, #31
 800a3e0:	d401      	bmi.n	800a3e6 <_svfprintf_r+0x8f2>
 800a3e2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800a3e4:	e65e      	b.n	800a0a4 <_svfprintf_r+0x5b0>
 800a3e6:	9b08      	ldr	r3, [sp, #32]
 800a3e8:	191b      	adds	r3, r3, r4
 800a3ea:	9311      	str	r3, [sp, #68]	; 0x44
 800a3ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3ee:	2b46      	cmp	r3, #70	; 0x46
 800a3f0:	d112      	bne.n	800a418 <_svfprintf_r+0x924>
 800a3f2:	9b08      	ldr	r3, [sp, #32]
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	2b30      	cmp	r3, #48	; 0x30
 800a3f8:	d10a      	bne.n	800a410 <_svfprintf_r+0x91c>
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	0028      	movs	r0, r5
 800a400:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a402:	f7f6 f823 	bl	800044c <__aeabi_dcmpeq>
 800a406:	2800      	cmp	r0, #0
 800a408:	d102      	bne.n	800a410 <_svfprintf_r+0x91c>
 800a40a:	2301      	movs	r3, #1
 800a40c:	1b1b      	subs	r3, r3, r4
 800a40e:	9326      	str	r3, [sp, #152]	; 0x98
 800a410:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a412:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a414:	18d3      	adds	r3, r2, r3
 800a416:	9311      	str	r3, [sp, #68]	; 0x44
 800a418:	2200      	movs	r2, #0
 800a41a:	2300      	movs	r3, #0
 800a41c:	0028      	movs	r0, r5
 800a41e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a420:	f7f6 f814 	bl	800044c <__aeabi_dcmpeq>
 800a424:	2800      	cmp	r0, #0
 800a426:	d001      	beq.n	800a42c <_svfprintf_r+0x938>
 800a428:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a42a:	932a      	str	r3, [sp, #168]	; 0xa8
 800a42c:	2230      	movs	r2, #48	; 0x30
 800a42e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800a430:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a432:	4299      	cmp	r1, r3
 800a434:	d9d5      	bls.n	800a3e2 <_svfprintf_r+0x8ee>
 800a436:	1c59      	adds	r1, r3, #1
 800a438:	912a      	str	r1, [sp, #168]	; 0xa8
 800a43a:	701a      	strb	r2, [r3, #0]
 800a43c:	e7f7      	b.n	800a42e <_svfprintf_r+0x93a>
 800a43e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a440:	2b46      	cmp	r3, #70	; 0x46
 800a442:	d000      	beq.n	800a446 <_svfprintf_r+0x952>
 800a444:	e63f      	b.n	800a0c6 <_svfprintf_r+0x5d2>
 800a446:	2201      	movs	r2, #1
 800a448:	0033      	movs	r3, r6
 800a44a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a44c:	4013      	ands	r3, r2
 800a44e:	430b      	orrs	r3, r1
 800a450:	2d00      	cmp	r5, #0
 800a452:	dd2c      	ble.n	800a4ae <_svfprintf_r+0x9ba>
 800a454:	2b00      	cmp	r3, #0
 800a456:	d046      	beq.n	800a4e6 <_svfprintf_r+0x9f2>
 800a458:	000a      	movs	r2, r1
 800a45a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a45c:	18eb      	adds	r3, r5, r3
 800a45e:	18d3      	adds	r3, r2, r3
 800a460:	9309      	str	r3, [sp, #36]	; 0x24
 800a462:	2366      	movs	r3, #102	; 0x66
 800a464:	930f      	str	r3, [sp, #60]	; 0x3c
 800a466:	e030      	b.n	800a4ca <_svfprintf_r+0x9d6>
 800a468:	781c      	ldrb	r4, [r3, #0]
 800a46a:	3301      	adds	r3, #1
 800a46c:	7014      	strb	r4, [r2, #0]
 800a46e:	3201      	adds	r2, #1
 800a470:	e668      	b.n	800a144 <_svfprintf_r+0x650>
 800a472:	222a      	movs	r2, #42	; 0x2a
 800a474:	ab1e      	add	r3, sp, #120	; 0x78
 800a476:	18d2      	adds	r2, r2, r3
 800a478:	2800      	cmp	r0, #0
 800a47a:	d104      	bne.n	800a486 <_svfprintf_r+0x992>
 800a47c:	2330      	movs	r3, #48	; 0x30
 800a47e:	222b      	movs	r2, #43	; 0x2b
 800a480:	708b      	strb	r3, [r1, #2]
 800a482:	ab1e      	add	r3, sp, #120	; 0x78
 800a484:	18d2      	adds	r2, r2, r3
 800a486:	3430      	adds	r4, #48	; 0x30
 800a488:	1c53      	adds	r3, r2, #1
 800a48a:	7014      	strb	r4, [r2, #0]
 800a48c:	e669      	b.n	800a162 <_svfprintf_r+0x66e>
 800a48e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a490:	42ab      	cmp	r3, r5
 800a492:	dd12      	ble.n	800a4ba <_svfprintf_r+0x9c6>
 800a494:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a496:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a498:	4694      	mov	ip, r2
 800a49a:	4463      	add	r3, ip
 800a49c:	9309      	str	r3, [sp, #36]	; 0x24
 800a49e:	2367      	movs	r3, #103	; 0x67
 800a4a0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4a2:	2d00      	cmp	r5, #0
 800a4a4:	dc11      	bgt.n	800a4ca <_svfprintf_r+0x9d6>
 800a4a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4a8:	1b5b      	subs	r3, r3, r5
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	e00c      	b.n	800a4c8 <_svfprintf_r+0x9d4>
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d01b      	beq.n	800a4ea <_svfprintf_r+0x9f6>
 800a4b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a4b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	e7d1      	b.n	800a45e <_svfprintf_r+0x96a>
 800a4ba:	2367      	movs	r3, #103	; 0x67
 800a4bc:	9509      	str	r5, [sp, #36]	; 0x24
 800a4be:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4c0:	07f3      	lsls	r3, r6, #31
 800a4c2:	d502      	bpl.n	800a4ca <_svfprintf_r+0x9d6>
 800a4c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a4c6:	18eb      	adds	r3, r5, r3
 800a4c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ca:	2380      	movs	r3, #128	; 0x80
 800a4cc:	0032      	movs	r2, r6
 800a4ce:	00db      	lsls	r3, r3, #3
 800a4d0:	401a      	ands	r2, r3
 800a4d2:	9211      	str	r2, [sp, #68]	; 0x44
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	9210      	str	r2, [sp, #64]	; 0x40
 800a4d8:	421e      	tst	r6, r3
 800a4da:	d100      	bne.n	800a4de <_svfprintf_r+0x9ea>
 800a4dc:	e65d      	b.n	800a19a <_svfprintf_r+0x6a6>
 800a4de:	4295      	cmp	r5, r2
 800a4e0:	dc25      	bgt.n	800a52e <_svfprintf_r+0xa3a>
 800a4e2:	9211      	str	r2, [sp, #68]	; 0x44
 800a4e4:	e659      	b.n	800a19a <_svfprintf_r+0x6a6>
 800a4e6:	9509      	str	r5, [sp, #36]	; 0x24
 800a4e8:	e7bb      	b.n	800a462 <_svfprintf_r+0x96e>
 800a4ea:	2366      	movs	r3, #102	; 0x66
 800a4ec:	9209      	str	r2, [sp, #36]	; 0x24
 800a4ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4f0:	e7eb      	b.n	800a4ca <_svfprintf_r+0x9d6>
 800a4f2:	42ab      	cmp	r3, r5
 800a4f4:	da0e      	bge.n	800a514 <_svfprintf_r+0xa20>
 800a4f6:	1aed      	subs	r5, r5, r3
 800a4f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a4fa:	785b      	ldrb	r3, [r3, #1]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d012      	beq.n	800a526 <_svfprintf_r+0xa32>
 800a500:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a502:	3301      	adds	r3, #1
 800a504:	9311      	str	r3, [sp, #68]	; 0x44
 800a506:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a508:	3301      	adds	r3, #1
 800a50a:	9312      	str	r3, [sp, #72]	; 0x48
 800a50c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	2bff      	cmp	r3, #255	; 0xff
 800a512:	d1ee      	bne.n	800a4f2 <_svfprintf_r+0x9fe>
 800a514:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a516:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a518:	189b      	adds	r3, r3, r2
 800a51a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a51c:	4353      	muls	r3, r2
 800a51e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a520:	189b      	adds	r3, r3, r2
 800a522:	9309      	str	r3, [sp, #36]	; 0x24
 800a524:	e639      	b.n	800a19a <_svfprintf_r+0x6a6>
 800a526:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a528:	3301      	adds	r3, #1
 800a52a:	9310      	str	r3, [sp, #64]	; 0x40
 800a52c:	e7ee      	b.n	800a50c <_svfprintf_r+0xa18>
 800a52e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a530:	9311      	str	r3, [sp, #68]	; 0x44
 800a532:	e7eb      	b.n	800a50c <_svfprintf_r+0xa18>
 800a534:	1d23      	adds	r3, r4, #4
 800a536:	930d      	str	r3, [sp, #52]	; 0x34
 800a538:	06b3      	lsls	r3, r6, #26
 800a53a:	d509      	bpl.n	800a550 <_svfprintf_r+0xa5c>
 800a53c:	6823      	ldr	r3, [r4, #0]
 800a53e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a540:	601a      	str	r2, [r3, #0]
 800a542:	17d2      	asrs	r2, r2, #31
 800a544:	605a      	str	r2, [r3, #4]
 800a546:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a548:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a54a:	9308      	str	r3, [sp, #32]
 800a54c:	f7ff fb0d 	bl	8009b6a <_svfprintf_r+0x76>
 800a550:	06f3      	lsls	r3, r6, #27
 800a552:	d503      	bpl.n	800a55c <_svfprintf_r+0xa68>
 800a554:	6823      	ldr	r3, [r4, #0]
 800a556:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a558:	601a      	str	r2, [r3, #0]
 800a55a:	e7f4      	b.n	800a546 <_svfprintf_r+0xa52>
 800a55c:	0673      	lsls	r3, r6, #25
 800a55e:	d503      	bpl.n	800a568 <_svfprintf_r+0xa74>
 800a560:	6823      	ldr	r3, [r4, #0]
 800a562:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a564:	801a      	strh	r2, [r3, #0]
 800a566:	e7ee      	b.n	800a546 <_svfprintf_r+0xa52>
 800a568:	05b6      	lsls	r6, r6, #22
 800a56a:	d5f3      	bpl.n	800a554 <_svfprintf_r+0xa60>
 800a56c:	6823      	ldr	r3, [r4, #0]
 800a56e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a570:	701a      	strb	r2, [r3, #0]
 800a572:	e7e8      	b.n	800a546 <_svfprintf_r+0xa52>
 800a574:	2310      	movs	r3, #16
 800a576:	431e      	orrs	r6, r3
 800a578:	2320      	movs	r3, #32
 800a57a:	0030      	movs	r0, r6
 800a57c:	4018      	ands	r0, r3
 800a57e:	421e      	tst	r6, r3
 800a580:	d00f      	beq.n	800a5a2 <_svfprintf_r+0xaae>
 800a582:	3b19      	subs	r3, #25
 800a584:	3407      	adds	r4, #7
 800a586:	439c      	bics	r4, r3
 800a588:	0022      	movs	r2, r4
 800a58a:	ca18      	ldmia	r2!, {r3, r4}
 800a58c:	9306      	str	r3, [sp, #24]
 800a58e:	9407      	str	r4, [sp, #28]
 800a590:	920d      	str	r2, [sp, #52]	; 0x34
 800a592:	4bc9      	ldr	r3, [pc, #804]	; (800a8b8 <_svfprintf_r+0xdc4>)
 800a594:	401e      	ands	r6, r3
 800a596:	2300      	movs	r3, #0
 800a598:	221b      	movs	r2, #27
 800a59a:	a91e      	add	r1, sp, #120	; 0x78
 800a59c:	1852      	adds	r2, r2, r1
 800a59e:	2100      	movs	r1, #0
 800a5a0:	e430      	b.n	8009e04 <_svfprintf_r+0x310>
 800a5a2:	0022      	movs	r2, r4
 800a5a4:	ca08      	ldmia	r2!, {r3}
 800a5a6:	0031      	movs	r1, r6
 800a5a8:	920d      	str	r2, [sp, #52]	; 0x34
 800a5aa:	2210      	movs	r2, #16
 800a5ac:	4011      	ands	r1, r2
 800a5ae:	4216      	tst	r6, r2
 800a5b0:	d002      	beq.n	800a5b8 <_svfprintf_r+0xac4>
 800a5b2:	9306      	str	r3, [sp, #24]
 800a5b4:	9007      	str	r0, [sp, #28]
 800a5b6:	e7ec      	b.n	800a592 <_svfprintf_r+0xa9e>
 800a5b8:	2240      	movs	r2, #64	; 0x40
 800a5ba:	0030      	movs	r0, r6
 800a5bc:	4010      	ands	r0, r2
 800a5be:	4216      	tst	r6, r2
 800a5c0:	d003      	beq.n	800a5ca <_svfprintf_r+0xad6>
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	9306      	str	r3, [sp, #24]
 800a5c6:	9107      	str	r1, [sp, #28]
 800a5c8:	e7e3      	b.n	800a592 <_svfprintf_r+0xa9e>
 800a5ca:	2280      	movs	r2, #128	; 0x80
 800a5cc:	0031      	movs	r1, r6
 800a5ce:	0092      	lsls	r2, r2, #2
 800a5d0:	4011      	ands	r1, r2
 800a5d2:	4216      	tst	r6, r2
 800a5d4:	d0f6      	beq.n	800a5c4 <_svfprintf_r+0xad0>
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	e7eb      	b.n	800a5b2 <_svfprintf_r+0xabe>
 800a5da:	0023      	movs	r3, r4
 800a5dc:	cb04      	ldmia	r3!, {r2}
 800a5de:	49b7      	ldr	r1, [pc, #732]	; (800a8bc <_svfprintf_r+0xdc8>)
 800a5e0:	9206      	str	r2, [sp, #24]
 800a5e2:	aa25      	add	r2, sp, #148	; 0x94
 800a5e4:	8011      	strh	r1, [r2, #0]
 800a5e6:	4ab6      	ldr	r2, [pc, #728]	; (800a8c0 <_svfprintf_r+0xdcc>)
 800a5e8:	930d      	str	r3, [sp, #52]	; 0x34
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	921f      	str	r2, [sp, #124]	; 0x7c
 800a5ee:	2278      	movs	r2, #120	; 0x78
 800a5f0:	9307      	str	r3, [sp, #28]
 800a5f2:	3302      	adds	r3, #2
 800a5f4:	431e      	orrs	r6, r3
 800a5f6:	920f      	str	r2, [sp, #60]	; 0x3c
 800a5f8:	e7ce      	b.n	800a598 <_svfprintf_r+0xaa4>
 800a5fa:	0023      	movs	r3, r4
 800a5fc:	cb04      	ldmia	r3!, {r2}
 800a5fe:	2400      	movs	r4, #0
 800a600:	930d      	str	r3, [sp, #52]	; 0x34
 800a602:	231b      	movs	r3, #27
 800a604:	9208      	str	r2, [sp, #32]
 800a606:	aa1e      	add	r2, sp, #120	; 0x78
 800a608:	189b      	adds	r3, r3, r2
 800a60a:	701c      	strb	r4, [r3, #0]
 800a60c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a60e:	3301      	adds	r3, #1
 800a610:	d00e      	beq.n	800a630 <_svfprintf_r+0xb3c>
 800a612:	0021      	movs	r1, r4
 800a614:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a616:	9808      	ldr	r0, [sp, #32]
 800a618:	f7fe ff1a 	bl	8009450 <memchr>
 800a61c:	900c      	str	r0, [sp, #48]	; 0x30
 800a61e:	42a0      	cmp	r0, r4
 800a620:	d100      	bne.n	800a624 <_svfprintf_r+0xb30>
 800a622:	e10d      	b.n	800a840 <_svfprintf_r+0xd4c>
 800a624:	9a08      	ldr	r2, [sp, #32]
 800a626:	1a83      	subs	r3, r0, r2
 800a628:	9309      	str	r3, [sp, #36]	; 0x24
 800a62a:	0023      	movs	r3, r4
 800a62c:	940c      	str	r4, [sp, #48]	; 0x30
 800a62e:	e44e      	b.n	8009ece <_svfprintf_r+0x3da>
 800a630:	9808      	ldr	r0, [sp, #32]
 800a632:	f7f5 fd69 	bl	8000108 <strlen>
 800a636:	9009      	str	r0, [sp, #36]	; 0x24
 800a638:	e7f7      	b.n	800a62a <_svfprintf_r+0xb36>
 800a63a:	2310      	movs	r3, #16
 800a63c:	431e      	orrs	r6, r3
 800a63e:	2320      	movs	r3, #32
 800a640:	0030      	movs	r0, r6
 800a642:	4018      	ands	r0, r3
 800a644:	421e      	tst	r6, r3
 800a646:	d009      	beq.n	800a65c <_svfprintf_r+0xb68>
 800a648:	3b19      	subs	r3, #25
 800a64a:	3407      	adds	r4, #7
 800a64c:	439c      	bics	r4, r3
 800a64e:	0022      	movs	r2, r4
 800a650:	ca18      	ldmia	r2!, {r3, r4}
 800a652:	9306      	str	r3, [sp, #24]
 800a654:	9407      	str	r4, [sp, #28]
 800a656:	920d      	str	r2, [sp, #52]	; 0x34
 800a658:	2301      	movs	r3, #1
 800a65a:	e79d      	b.n	800a598 <_svfprintf_r+0xaa4>
 800a65c:	0023      	movs	r3, r4
 800a65e:	cb04      	ldmia	r3!, {r2}
 800a660:	0031      	movs	r1, r6
 800a662:	930d      	str	r3, [sp, #52]	; 0x34
 800a664:	2310      	movs	r3, #16
 800a666:	4019      	ands	r1, r3
 800a668:	421e      	tst	r6, r3
 800a66a:	d003      	beq.n	800a674 <_svfprintf_r+0xb80>
 800a66c:	9206      	str	r2, [sp, #24]
 800a66e:	9007      	str	r0, [sp, #28]
 800a670:	3b0f      	subs	r3, #15
 800a672:	e791      	b.n	800a598 <_svfprintf_r+0xaa4>
 800a674:	2340      	movs	r3, #64	; 0x40
 800a676:	0030      	movs	r0, r6
 800a678:	4018      	ands	r0, r3
 800a67a:	421e      	tst	r6, r3
 800a67c:	d003      	beq.n	800a686 <_svfprintf_r+0xb92>
 800a67e:	b293      	uxth	r3, r2
 800a680:	9306      	str	r3, [sp, #24]
 800a682:	9107      	str	r1, [sp, #28]
 800a684:	e7e8      	b.n	800a658 <_svfprintf_r+0xb64>
 800a686:	2380      	movs	r3, #128	; 0x80
 800a688:	0031      	movs	r1, r6
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	4019      	ands	r1, r3
 800a68e:	421e      	tst	r6, r3
 800a690:	d003      	beq.n	800a69a <_svfprintf_r+0xba6>
 800a692:	b2d3      	uxtb	r3, r2
 800a694:	9306      	str	r3, [sp, #24]
 800a696:	9007      	str	r0, [sp, #28]
 800a698:	e7de      	b.n	800a658 <_svfprintf_r+0xb64>
 800a69a:	9206      	str	r2, [sp, #24]
 800a69c:	e7f1      	b.n	800a682 <_svfprintf_r+0xb8e>
 800a69e:	4b89      	ldr	r3, [pc, #548]	; (800a8c4 <_svfprintf_r+0xdd0>)
 800a6a0:	0030      	movs	r0, r6
 800a6a2:	931f      	str	r3, [sp, #124]	; 0x7c
 800a6a4:	2320      	movs	r3, #32
 800a6a6:	4018      	ands	r0, r3
 800a6a8:	421e      	tst	r6, r3
 800a6aa:	d01a      	beq.n	800a6e2 <_svfprintf_r+0xbee>
 800a6ac:	3b19      	subs	r3, #25
 800a6ae:	3407      	adds	r4, #7
 800a6b0:	439c      	bics	r4, r3
 800a6b2:	0022      	movs	r2, r4
 800a6b4:	ca18      	ldmia	r2!, {r3, r4}
 800a6b6:	9306      	str	r3, [sp, #24]
 800a6b8:	9407      	str	r4, [sp, #28]
 800a6ba:	920d      	str	r2, [sp, #52]	; 0x34
 800a6bc:	07f3      	lsls	r3, r6, #31
 800a6be:	d50a      	bpl.n	800a6d6 <_svfprintf_r+0xbe2>
 800a6c0:	9b06      	ldr	r3, [sp, #24]
 800a6c2:	9a07      	ldr	r2, [sp, #28]
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	d006      	beq.n	800a6d6 <_svfprintf_r+0xbe2>
 800a6c8:	2230      	movs	r2, #48	; 0x30
 800a6ca:	ab25      	add	r3, sp, #148	; 0x94
 800a6cc:	701a      	strb	r2, [r3, #0]
 800a6ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a6d0:	705a      	strb	r2, [r3, #1]
 800a6d2:	2302      	movs	r3, #2
 800a6d4:	431e      	orrs	r6, r3
 800a6d6:	4b78      	ldr	r3, [pc, #480]	; (800a8b8 <_svfprintf_r+0xdc4>)
 800a6d8:	401e      	ands	r6, r3
 800a6da:	2302      	movs	r3, #2
 800a6dc:	e75c      	b.n	800a598 <_svfprintf_r+0xaa4>
 800a6de:	4b78      	ldr	r3, [pc, #480]	; (800a8c0 <_svfprintf_r+0xdcc>)
 800a6e0:	e7de      	b.n	800a6a0 <_svfprintf_r+0xbac>
 800a6e2:	0023      	movs	r3, r4
 800a6e4:	cb04      	ldmia	r3!, {r2}
 800a6e6:	0031      	movs	r1, r6
 800a6e8:	930d      	str	r3, [sp, #52]	; 0x34
 800a6ea:	2310      	movs	r3, #16
 800a6ec:	4019      	ands	r1, r3
 800a6ee:	421e      	tst	r6, r3
 800a6f0:	d002      	beq.n	800a6f8 <_svfprintf_r+0xc04>
 800a6f2:	9206      	str	r2, [sp, #24]
 800a6f4:	9007      	str	r0, [sp, #28]
 800a6f6:	e7e1      	b.n	800a6bc <_svfprintf_r+0xbc8>
 800a6f8:	2340      	movs	r3, #64	; 0x40
 800a6fa:	0030      	movs	r0, r6
 800a6fc:	4018      	ands	r0, r3
 800a6fe:	421e      	tst	r6, r3
 800a700:	d003      	beq.n	800a70a <_svfprintf_r+0xc16>
 800a702:	b293      	uxth	r3, r2
 800a704:	9306      	str	r3, [sp, #24]
 800a706:	9107      	str	r1, [sp, #28]
 800a708:	e7d8      	b.n	800a6bc <_svfprintf_r+0xbc8>
 800a70a:	2380      	movs	r3, #128	; 0x80
 800a70c:	0031      	movs	r1, r6
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	4019      	ands	r1, r3
 800a712:	421e      	tst	r6, r3
 800a714:	d002      	beq.n	800a71c <_svfprintf_r+0xc28>
 800a716:	b2d3      	uxtb	r3, r2
 800a718:	9306      	str	r3, [sp, #24]
 800a71a:	e7eb      	b.n	800a6f4 <_svfprintf_r+0xc00>
 800a71c:	9206      	str	r2, [sp, #24]
 800a71e:	e7f2      	b.n	800a706 <_svfprintf_r+0xc12>
 800a720:	9b07      	ldr	r3, [sp, #28]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d10a      	bne.n	800a73c <_svfprintf_r+0xc48>
 800a726:	9b06      	ldr	r3, [sp, #24]
 800a728:	2b09      	cmp	r3, #9
 800a72a:	d807      	bhi.n	800a73c <_svfprintf_r+0xc48>
 800a72c:	23e7      	movs	r3, #231	; 0xe7
 800a72e:	aa1e      	add	r2, sp, #120	; 0x78
 800a730:	189b      	adds	r3, r3, r2
 800a732:	9a06      	ldr	r2, [sp, #24]
 800a734:	3230      	adds	r2, #48	; 0x30
 800a736:	701a      	strb	r2, [r3, #0]
 800a738:	f000 fc18 	bl	800af6c <_svfprintf_r+0x1478>
 800a73c:	2680      	movs	r6, #128	; 0x80
 800a73e:	2300      	movs	r3, #0
 800a740:	00f6      	lsls	r6, r6, #3
 800a742:	930e      	str	r3, [sp, #56]	; 0x38
 800a744:	ad58      	add	r5, sp, #352	; 0x160
 800a746:	4026      	ands	r6, r4
 800a748:	220a      	movs	r2, #10
 800a74a:	9806      	ldr	r0, [sp, #24]
 800a74c:	9907      	ldr	r1, [sp, #28]
 800a74e:	2300      	movs	r3, #0
 800a750:	f7f5 feaa 	bl	80004a8 <__aeabi_uldivmod>
 800a754:	1e6b      	subs	r3, r5, #1
 800a756:	3230      	adds	r2, #48	; 0x30
 800a758:	9308      	str	r3, [sp, #32]
 800a75a:	701a      	strb	r2, [r3, #0]
 800a75c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a75e:	900c      	str	r0, [sp, #48]	; 0x30
 800a760:	3301      	adds	r3, #1
 800a762:	9110      	str	r1, [sp, #64]	; 0x40
 800a764:	930e      	str	r3, [sp, #56]	; 0x38
 800a766:	2e00      	cmp	r6, #0
 800a768:	d01d      	beq.n	800a7a6 <_svfprintf_r+0xcb2>
 800a76a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a76c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	429a      	cmp	r2, r3
 800a772:	d118      	bne.n	800a7a6 <_svfprintf_r+0xcb2>
 800a774:	2aff      	cmp	r2, #255	; 0xff
 800a776:	d016      	beq.n	800a7a6 <_svfprintf_r+0xcb2>
 800a778:	9b07      	ldr	r3, [sp, #28]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d102      	bne.n	800a784 <_svfprintf_r+0xc90>
 800a77e:	9b06      	ldr	r3, [sp, #24]
 800a780:	2b09      	cmp	r3, #9
 800a782:	d910      	bls.n	800a7a6 <_svfprintf_r+0xcb2>
 800a784:	9b08      	ldr	r3, [sp, #32]
 800a786:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a788:	991d      	ldr	r1, [sp, #116]	; 0x74
 800a78a:	1a9b      	subs	r3, r3, r2
 800a78c:	0018      	movs	r0, r3
 800a78e:	9308      	str	r3, [sp, #32]
 800a790:	f000 fd0e 	bl	800b1b0 <strncpy>
 800a794:	2200      	movs	r2, #0
 800a796:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a798:	920e      	str	r2, [sp, #56]	; 0x38
 800a79a:	785b      	ldrb	r3, [r3, #1]
 800a79c:	1e5a      	subs	r2, r3, #1
 800a79e:	4193      	sbcs	r3, r2
 800a7a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a7a2:	18d3      	adds	r3, r2, r3
 800a7a4:	9312      	str	r3, [sp, #72]	; 0x48
 800a7a6:	9b07      	ldr	r3, [sp, #28]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d10f      	bne.n	800a7cc <_svfprintf_r+0xcd8>
 800a7ac:	9b06      	ldr	r3, [sp, #24]
 800a7ae:	2b09      	cmp	r3, #9
 800a7b0:	d80c      	bhi.n	800a7cc <_svfprintf_r+0xcd8>
 800a7b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7b4:	9a08      	ldr	r2, [sp, #32]
 800a7b6:	9319      	str	r3, [sp, #100]	; 0x64
 800a7b8:	ab58      	add	r3, sp, #352	; 0x160
 800a7ba:	1a9b      	subs	r3, r3, r2
 800a7bc:	9309      	str	r3, [sp, #36]	; 0x24
 800a7be:	2300      	movs	r3, #0
 800a7c0:	0026      	movs	r6, r4
 800a7c2:	930c      	str	r3, [sp, #48]	; 0x30
 800a7c4:	001d      	movs	r5, r3
 800a7c6:	9310      	str	r3, [sp, #64]	; 0x40
 800a7c8:	9311      	str	r3, [sp, #68]	; 0x44
 800a7ca:	e4f2      	b.n	800a1b2 <_svfprintf_r+0x6be>
 800a7cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7ce:	9d08      	ldr	r5, [sp, #32]
 800a7d0:	9306      	str	r3, [sp, #24]
 800a7d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7d4:	9307      	str	r3, [sp, #28]
 800a7d6:	e7b7      	b.n	800a748 <_svfprintf_r+0xc54>
 800a7d8:	200f      	movs	r0, #15
 800a7da:	ab58      	add	r3, sp, #352	; 0x160
 800a7dc:	9308      	str	r3, [sp, #32]
 800a7de:	9b08      	ldr	r3, [sp, #32]
 800a7e0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a7e2:	3b01      	subs	r3, #1
 800a7e4:	9308      	str	r3, [sp, #32]
 800a7e6:	9b06      	ldr	r3, [sp, #24]
 800a7e8:	4003      	ands	r3, r0
 800a7ea:	5cd3      	ldrb	r3, [r2, r3]
 800a7ec:	9a08      	ldr	r2, [sp, #32]
 800a7ee:	7013      	strb	r3, [r2, #0]
 800a7f0:	9b07      	ldr	r3, [sp, #28]
 800a7f2:	0719      	lsls	r1, r3, #28
 800a7f4:	9b06      	ldr	r3, [sp, #24]
 800a7f6:	091a      	lsrs	r2, r3, #4
 800a7f8:	9b07      	ldr	r3, [sp, #28]
 800a7fa:	4311      	orrs	r1, r2
 800a7fc:	091b      	lsrs	r3, r3, #4
 800a7fe:	9307      	str	r3, [sp, #28]
 800a800:	000b      	movs	r3, r1
 800a802:	9a07      	ldr	r2, [sp, #28]
 800a804:	9106      	str	r1, [sp, #24]
 800a806:	4313      	orrs	r3, r2
 800a808:	d1e9      	bne.n	800a7de <_svfprintf_r+0xcea>
 800a80a:	e7d2      	b.n	800a7b2 <_svfprintf_r+0xcbe>
 800a80c:	aa58      	add	r2, sp, #352	; 0x160
 800a80e:	9208      	str	r2, [sp, #32]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d1ce      	bne.n	800a7b2 <_svfprintf_r+0xcbe>
 800a814:	07f6      	lsls	r6, r6, #31
 800a816:	d5cc      	bpl.n	800a7b2 <_svfprintf_r+0xcbe>
 800a818:	aa1e      	add	r2, sp, #120	; 0x78
 800a81a:	33e7      	adds	r3, #231	; 0xe7
 800a81c:	189b      	adds	r3, r3, r2
 800a81e:	2230      	movs	r2, #48	; 0x30
 800a820:	e789      	b.n	800a736 <_svfprintf_r+0xc42>
 800a822:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a824:	2b00      	cmp	r3, #0
 800a826:	d100      	bne.n	800a82a <_svfprintf_r+0xd36>
 800a828:	e364      	b.n	800aef4 <_svfprintf_r+0x1400>
 800a82a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a82c:	211b      	movs	r1, #27
 800a82e:	ab3f      	add	r3, sp, #252	; 0xfc
 800a830:	701a      	strb	r2, [r3, #0]
 800a832:	2200      	movs	r2, #0
 800a834:	a81e      	add	r0, sp, #120	; 0x78
 800a836:	1809      	adds	r1, r1, r0
 800a838:	700a      	strb	r2, [r1, #0]
 800a83a:	940d      	str	r4, [sp, #52]	; 0x34
 800a83c:	f7ff fabd 	bl	8009dba <_svfprintf_r+0x2c6>
 800a840:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a842:	f7ff fb44 	bl	8009ece <_svfprintf_r+0x3da>
 800a846:	2010      	movs	r0, #16
 800a848:	1812      	adds	r2, r2, r0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	922e      	str	r2, [sp, #184]	; 0xb8
 800a84e:	932d      	str	r3, [sp, #180]	; 0xb4
 800a850:	2b07      	cmp	r3, #7
 800a852:	dd08      	ble.n	800a866 <_svfprintf_r+0xd72>
 800a854:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a856:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a858:	aa2c      	add	r2, sp, #176	; 0xb0
 800a85a:	f001 ff33 	bl	800c6c4 <__ssprint_r>
 800a85e:	2800      	cmp	r0, #0
 800a860:	d000      	beq.n	800a864 <_svfprintf_r+0xd70>
 800a862:	e326      	b.n	800aeb2 <_svfprintf_r+0x13be>
 800a864:	a92f      	add	r1, sp, #188	; 0xbc
 800a866:	000f      	movs	r7, r1
 800a868:	3c10      	subs	r4, #16
 800a86a:	e4c5      	b.n	800a1f8 <_svfprintf_r+0x704>
 800a86c:	2010      	movs	r0, #16
 800a86e:	1812      	adds	r2, r2, r0
 800a870:	6078      	str	r0, [r7, #4]
 800a872:	922e      	str	r2, [sp, #184]	; 0xb8
 800a874:	932d      	str	r3, [sp, #180]	; 0xb4
 800a876:	2b07      	cmp	r3, #7
 800a878:	dd08      	ble.n	800a88c <_svfprintf_r+0xd98>
 800a87a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a87c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a87e:	aa2c      	add	r2, sp, #176	; 0xb0
 800a880:	f001 ff20 	bl	800c6c4 <__ssprint_r>
 800a884:	2800      	cmp	r0, #0
 800a886:	d000      	beq.n	800a88a <_svfprintf_r+0xd96>
 800a888:	e313      	b.n	800aeb2 <_svfprintf_r+0x13be>
 800a88a:	a92f      	add	r1, sp, #188	; 0xbc
 800a88c:	000f      	movs	r7, r1
 800a88e:	3c10      	subs	r4, #16
 800a890:	e50b      	b.n	800a2aa <_svfprintf_r+0x7b6>
 800a892:	2010      	movs	r0, #16
 800a894:	1812      	adds	r2, r2, r0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	922e      	str	r2, [sp, #184]	; 0xb8
 800a89a:	932d      	str	r3, [sp, #180]	; 0xb4
 800a89c:	2b07      	cmp	r3, #7
 800a89e:	dd08      	ble.n	800a8b2 <_svfprintf_r+0xdbe>
 800a8a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a8a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a8a4:	aa2c      	add	r2, sp, #176	; 0xb0
 800a8a6:	f001 ff0d 	bl	800c6c4 <__ssprint_r>
 800a8aa:	2800      	cmp	r0, #0
 800a8ac:	d000      	beq.n	800a8b0 <_svfprintf_r+0xdbc>
 800a8ae:	e300      	b.n	800aeb2 <_svfprintf_r+0x13be>
 800a8b0:	a92f      	add	r1, sp, #188	; 0xbc
 800a8b2:	000f      	movs	r7, r1
 800a8b4:	3c10      	subs	r4, #16
 800a8b6:	e518      	b.n	800a2ea <_svfprintf_r+0x7f6>
 800a8b8:	fffffbff 	.word	0xfffffbff
 800a8bc:	00007830 	.word	0x00007830
 800a8c0:	0800e5e6 	.word	0x0800e5e6
 800a8c4:	0800e5f7 	.word	0x0800e5f7
 800a8c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8ca:	2b65      	cmp	r3, #101	; 0x65
 800a8cc:	dc00      	bgt.n	800a8d0 <_svfprintf_r+0xddc>
 800a8ce:	e241      	b.n	800ad54 <_svfprintf_r+0x1260>
 800a8d0:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a8d2:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	f7f5 fdb8 	bl	800044c <__aeabi_dcmpeq>
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	d077      	beq.n	800a9d0 <_svfprintf_r+0xedc>
 800a8e0:	4bca      	ldr	r3, [pc, #808]	; (800ac0c <_svfprintf_r+0x1118>)
 800a8e2:	603b      	str	r3, [r7, #0]
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	607b      	str	r3, [r7, #4]
 800a8e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a8ea:	3708      	adds	r7, #8
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	932e      	str	r3, [sp, #184]	; 0xb8
 800a8f0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	932d      	str	r3, [sp, #180]	; 0xb4
 800a8f6:	2b07      	cmp	r3, #7
 800a8f8:	dd08      	ble.n	800a90c <_svfprintf_r+0xe18>
 800a8fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a8fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a8fe:	aa2c      	add	r2, sp, #176	; 0xb0
 800a900:	f001 fee0 	bl	800c6c4 <__ssprint_r>
 800a904:	2800      	cmp	r0, #0
 800a906:	d000      	beq.n	800a90a <_svfprintf_r+0xe16>
 800a908:	e2d3      	b.n	800aeb2 <_svfprintf_r+0x13be>
 800a90a:	af2f      	add	r7, sp, #188	; 0xbc
 800a90c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a90e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a910:	4293      	cmp	r3, r2
 800a912:	db01      	blt.n	800a918 <_svfprintf_r+0xe24>
 800a914:	07f3      	lsls	r3, r6, #31
 800a916:	d51b      	bpl.n	800a950 <_svfprintf_r+0xe5c>
 800a918:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a91a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a91c:	603b      	str	r3, [r7, #0]
 800a91e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a920:	607b      	str	r3, [r7, #4]
 800a922:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a924:	3708      	adds	r7, #8
 800a926:	189b      	adds	r3, r3, r2
 800a928:	932e      	str	r3, [sp, #184]	; 0xb8
 800a92a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a92c:	3301      	adds	r3, #1
 800a92e:	932d      	str	r3, [sp, #180]	; 0xb4
 800a930:	2b07      	cmp	r3, #7
 800a932:	dd08      	ble.n	800a946 <_svfprintf_r+0xe52>
 800a934:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a936:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a938:	aa2c      	add	r2, sp, #176	; 0xb0
 800a93a:	f001 fec3 	bl	800c6c4 <__ssprint_r>
 800a93e:	2800      	cmp	r0, #0
 800a940:	d000      	beq.n	800a944 <_svfprintf_r+0xe50>
 800a942:	e2b6      	b.n	800aeb2 <_svfprintf_r+0x13be>
 800a944:	af2f      	add	r7, sp, #188	; 0xbc
 800a946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a948:	2510      	movs	r5, #16
 800a94a:	1e5c      	subs	r4, r3, #1
 800a94c:	2c00      	cmp	r4, #0
 800a94e:	dc2e      	bgt.n	800a9ae <_svfprintf_r+0xeba>
 800a950:	0776      	lsls	r6, r6, #29
 800a952:	d500      	bpl.n	800a956 <_svfprintf_r+0xe62>
 800a954:	e290      	b.n	800ae78 <_svfprintf_r+0x1384>
 800a956:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a958:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a95a:	4293      	cmp	r3, r2
 800a95c:	da00      	bge.n	800a960 <_svfprintf_r+0xe6c>
 800a95e:	0013      	movs	r3, r2
 800a960:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a962:	18d3      	adds	r3, r2, r3
 800a964:	9317      	str	r3, [sp, #92]	; 0x5c
 800a966:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d007      	beq.n	800a97c <_svfprintf_r+0xe88>
 800a96c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a96e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a970:	aa2c      	add	r2, sp, #176	; 0xb0
 800a972:	f001 fea7 	bl	800c6c4 <__ssprint_r>
 800a976:	2800      	cmp	r0, #0
 800a978:	d000      	beq.n	800a97c <_svfprintf_r+0xe88>
 800a97a:	e29a      	b.n	800aeb2 <_svfprintf_r+0x13be>
 800a97c:	2300      	movs	r3, #0
 800a97e:	932d      	str	r3, [sp, #180]	; 0xb4
 800a980:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a982:	2b00      	cmp	r3, #0
 800a984:	d000      	beq.n	800a988 <_svfprintf_r+0xe94>
 800a986:	e2b0      	b.n	800aeea <_svfprintf_r+0x13f6>
 800a988:	af2f      	add	r7, sp, #188	; 0xbc
 800a98a:	e5dc      	b.n	800a546 <_svfprintf_r+0xa52>
 800a98c:	3210      	adds	r2, #16
 800a98e:	607d      	str	r5, [r7, #4]
 800a990:	922e      	str	r2, [sp, #184]	; 0xb8
 800a992:	932d      	str	r3, [sp, #180]	; 0xb4
 800a994:	2b07      	cmp	r3, #7
 800a996:	dd08      	ble.n	800a9aa <_svfprintf_r+0xeb6>
 800a998:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a99a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a99c:	aa2c      	add	r2, sp, #176	; 0xb0
 800a99e:	f001 fe91 	bl	800c6c4 <__ssprint_r>
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	d000      	beq.n	800a9a8 <_svfprintf_r+0xeb4>
 800a9a6:	e284      	b.n	800aeb2 <_svfprintf_r+0x13be>
 800a9a8:	a92f      	add	r1, sp, #188	; 0xbc
 800a9aa:	000f      	movs	r7, r1
 800a9ac:	3c10      	subs	r4, #16
 800a9ae:	0039      	movs	r1, r7
 800a9b0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a9b2:	4897      	ldr	r0, [pc, #604]	; (800ac10 <_svfprintf_r+0x111c>)
 800a9b4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	3108      	adds	r1, #8
 800a9ba:	6038      	str	r0, [r7, #0]
 800a9bc:	2c10      	cmp	r4, #16
 800a9be:	dce5      	bgt.n	800a98c <_svfprintf_r+0xe98>
 800a9c0:	607c      	str	r4, [r7, #4]
 800a9c2:	18a4      	adds	r4, r4, r2
 800a9c4:	942e      	str	r4, [sp, #184]	; 0xb8
 800a9c6:	000f      	movs	r7, r1
 800a9c8:	932d      	str	r3, [sp, #180]	; 0xb4
 800a9ca:	2b07      	cmp	r3, #7
 800a9cc:	ddc0      	ble.n	800a950 <_svfprintf_r+0xe5c>
 800a9ce:	e05f      	b.n	800aa90 <_svfprintf_r+0xf9c>
 800a9d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	dc78      	bgt.n	800aac8 <_svfprintf_r+0xfd4>
 800a9d6:	4b8d      	ldr	r3, [pc, #564]	; (800ac0c <_svfprintf_r+0x1118>)
 800a9d8:	603b      	str	r3, [r7, #0]
 800a9da:	2301      	movs	r3, #1
 800a9dc:	607b      	str	r3, [r7, #4]
 800a9de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a9e0:	3708      	adds	r7, #8
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	932e      	str	r3, [sp, #184]	; 0xb8
 800a9e6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a9e8:	3301      	adds	r3, #1
 800a9ea:	932d      	str	r3, [sp, #180]	; 0xb4
 800a9ec:	2b07      	cmp	r3, #7
 800a9ee:	dd08      	ble.n	800aa02 <_svfprintf_r+0xf0e>
 800a9f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a9f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a9f4:	aa2c      	add	r2, sp, #176	; 0xb0
 800a9f6:	f001 fe65 	bl	800c6c4 <__ssprint_r>
 800a9fa:	2800      	cmp	r0, #0
 800a9fc:	d000      	beq.n	800aa00 <_svfprintf_r+0xf0c>
 800a9fe:	e258      	b.n	800aeb2 <_svfprintf_r+0x13be>
 800aa00:	af2f      	add	r7, sp, #188	; 0xbc
 800aa02:	990e      	ldr	r1, [sp, #56]	; 0x38
 800aa04:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aa06:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800aa08:	430b      	orrs	r3, r1
 800aa0a:	2101      	movs	r1, #1
 800aa0c:	4031      	ands	r1, r6
 800aa0e:	430b      	orrs	r3, r1
 800aa10:	d09e      	beq.n	800a950 <_svfprintf_r+0xe5c>
 800aa12:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800aa14:	603b      	str	r3, [r7, #0]
 800aa16:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aa18:	607b      	str	r3, [r7, #4]
 800aa1a:	189a      	adds	r2, r3, r2
 800aa1c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800aa1e:	922e      	str	r2, [sp, #184]	; 0xb8
 800aa20:	3301      	adds	r3, #1
 800aa22:	932d      	str	r3, [sp, #180]	; 0xb4
 800aa24:	3708      	adds	r7, #8
 800aa26:	2b07      	cmp	r3, #7
 800aa28:	dd08      	ble.n	800aa3c <_svfprintf_r+0xf48>
 800aa2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aa2e:	aa2c      	add	r2, sp, #176	; 0xb0
 800aa30:	f001 fe48 	bl	800c6c4 <__ssprint_r>
 800aa34:	2800      	cmp	r0, #0
 800aa36:	d000      	beq.n	800aa3a <_svfprintf_r+0xf46>
 800aa38:	e23b      	b.n	800aeb2 <_svfprintf_r+0x13be>
 800aa3a:	af2f      	add	r7, sp, #188	; 0xbc
 800aa3c:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800aa3e:	2c00      	cmp	r4, #0
 800aa40:	da19      	bge.n	800aa76 <_svfprintf_r+0xf82>
 800aa42:	0038      	movs	r0, r7
 800aa44:	2510      	movs	r5, #16
 800aa46:	4264      	negs	r4, r4
 800aa48:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800aa4a:	4a71      	ldr	r2, [pc, #452]	; (800ac10 <_svfprintf_r+0x111c>)
 800aa4c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800aa4e:	3101      	adds	r1, #1
 800aa50:	3708      	adds	r7, #8
 800aa52:	6002      	str	r2, [r0, #0]
 800aa54:	2c10      	cmp	r4, #16
 800aa56:	dc25      	bgt.n	800aaa4 <_svfprintf_r+0xfb0>
 800aa58:	6044      	str	r4, [r0, #4]
 800aa5a:	18e4      	adds	r4, r4, r3
 800aa5c:	942e      	str	r4, [sp, #184]	; 0xb8
 800aa5e:	912d      	str	r1, [sp, #180]	; 0xb4
 800aa60:	2907      	cmp	r1, #7
 800aa62:	dd08      	ble.n	800aa76 <_svfprintf_r+0xf82>
 800aa64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa66:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aa68:	aa2c      	add	r2, sp, #176	; 0xb0
 800aa6a:	f001 fe2b 	bl	800c6c4 <__ssprint_r>
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	d000      	beq.n	800aa74 <_svfprintf_r+0xf80>
 800aa72:	e21e      	b.n	800aeb2 <_svfprintf_r+0x13be>
 800aa74:	af2f      	add	r7, sp, #188	; 0xbc
 800aa76:	9b08      	ldr	r3, [sp, #32]
 800aa78:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800aa7a:	603b      	str	r3, [r7, #0]
 800aa7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa7e:	18d2      	adds	r2, r2, r3
 800aa80:	922e      	str	r2, [sp, #184]	; 0xb8
 800aa82:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800aa84:	607b      	str	r3, [r7, #4]
 800aa86:	3201      	adds	r2, #1
 800aa88:	922d      	str	r2, [sp, #180]	; 0xb4
 800aa8a:	2a07      	cmp	r2, #7
 800aa8c:	dc00      	bgt.n	800aa90 <_svfprintf_r+0xf9c>
 800aa8e:	e45b      	b.n	800a348 <_svfprintf_r+0x854>
 800aa90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa92:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aa94:	aa2c      	add	r2, sp, #176	; 0xb0
 800aa96:	f001 fe15 	bl	800c6c4 <__ssprint_r>
 800aa9a:	2800      	cmp	r0, #0
 800aa9c:	d000      	beq.n	800aaa0 <_svfprintf_r+0xfac>
 800aa9e:	e208      	b.n	800aeb2 <_svfprintf_r+0x13be>
 800aaa0:	af2f      	add	r7, sp, #188	; 0xbc
 800aaa2:	e755      	b.n	800a950 <_svfprintf_r+0xe5c>
 800aaa4:	3310      	adds	r3, #16
 800aaa6:	6045      	str	r5, [r0, #4]
 800aaa8:	932e      	str	r3, [sp, #184]	; 0xb8
 800aaaa:	912d      	str	r1, [sp, #180]	; 0xb4
 800aaac:	2907      	cmp	r1, #7
 800aaae:	dd08      	ble.n	800aac2 <_svfprintf_r+0xfce>
 800aab0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aab2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aab4:	aa2c      	add	r2, sp, #176	; 0xb0
 800aab6:	f001 fe05 	bl	800c6c4 <__ssprint_r>
 800aaba:	2800      	cmp	r0, #0
 800aabc:	d000      	beq.n	800aac0 <_svfprintf_r+0xfcc>
 800aabe:	e1f8      	b.n	800aeb2 <_svfprintf_r+0x13be>
 800aac0:	af2f      	add	r7, sp, #188	; 0xbc
 800aac2:	0038      	movs	r0, r7
 800aac4:	3c10      	subs	r4, #16
 800aac6:	e7bf      	b.n	800aa48 <_svfprintf_r+0xf54>
 800aac8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aaca:	002c      	movs	r4, r5
 800aacc:	429d      	cmp	r5, r3
 800aace:	dd00      	ble.n	800aad2 <_svfprintf_r+0xfde>
 800aad0:	001c      	movs	r4, r3
 800aad2:	2c00      	cmp	r4, #0
 800aad4:	dd14      	ble.n	800ab00 <_svfprintf_r+0x100c>
 800aad6:	9b08      	ldr	r3, [sp, #32]
 800aad8:	607c      	str	r4, [r7, #4]
 800aada:	603b      	str	r3, [r7, #0]
 800aadc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aade:	3708      	adds	r7, #8
 800aae0:	18e3      	adds	r3, r4, r3
 800aae2:	932e      	str	r3, [sp, #184]	; 0xb8
 800aae4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800aae6:	3301      	adds	r3, #1
 800aae8:	932d      	str	r3, [sp, #180]	; 0xb4
 800aaea:	2b07      	cmp	r3, #7
 800aaec:	dd08      	ble.n	800ab00 <_svfprintf_r+0x100c>
 800aaee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aaf0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aaf2:	aa2c      	add	r2, sp, #176	; 0xb0
 800aaf4:	f001 fde6 	bl	800c6c4 <__ssprint_r>
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	d000      	beq.n	800aafe <_svfprintf_r+0x100a>
 800aafc:	e1d9      	b.n	800aeb2 <_svfprintf_r+0x13be>
 800aafe:	af2f      	add	r7, sp, #188	; 0xbc
 800ab00:	43e3      	mvns	r3, r4
 800ab02:	17db      	asrs	r3, r3, #31
 800ab04:	401c      	ands	r4, r3
 800ab06:	1b2c      	subs	r4, r5, r4
 800ab08:	2c00      	cmp	r4, #0
 800ab0a:	dd18      	ble.n	800ab3e <_svfprintf_r+0x104a>
 800ab0c:	0039      	movs	r1, r7
 800ab0e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ab10:	483f      	ldr	r0, [pc, #252]	; (800ac10 <_svfprintf_r+0x111c>)
 800ab12:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ab14:	3301      	adds	r3, #1
 800ab16:	3108      	adds	r1, #8
 800ab18:	6038      	str	r0, [r7, #0]
 800ab1a:	2c10      	cmp	r4, #16
 800ab1c:	dc7a      	bgt.n	800ac14 <_svfprintf_r+0x1120>
 800ab1e:	607c      	str	r4, [r7, #4]
 800ab20:	18a4      	adds	r4, r4, r2
 800ab22:	000f      	movs	r7, r1
 800ab24:	942e      	str	r4, [sp, #184]	; 0xb8
 800ab26:	932d      	str	r3, [sp, #180]	; 0xb4
 800ab28:	2b07      	cmp	r3, #7
 800ab2a:	dd08      	ble.n	800ab3e <_svfprintf_r+0x104a>
 800ab2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab2e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ab30:	aa2c      	add	r2, sp, #176	; 0xb0
 800ab32:	f001 fdc7 	bl	800c6c4 <__ssprint_r>
 800ab36:	2800      	cmp	r0, #0
 800ab38:	d000      	beq.n	800ab3c <_svfprintf_r+0x1048>
 800ab3a:	e1ba      	b.n	800aeb2 <_svfprintf_r+0x13be>
 800ab3c:	af2f      	add	r7, sp, #188	; 0xbc
 800ab3e:	9b08      	ldr	r3, [sp, #32]
 800ab40:	195d      	adds	r5, r3, r5
 800ab42:	0573      	lsls	r3, r6, #21
 800ab44:	d50b      	bpl.n	800ab5e <_svfprintf_r+0x106a>
 800ab46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d176      	bne.n	800ac3a <_svfprintf_r+0x1146>
 800ab4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d176      	bne.n	800ac40 <_svfprintf_r+0x114c>
 800ab52:	9b08      	ldr	r3, [sp, #32]
 800ab54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab56:	189b      	adds	r3, r3, r2
 800ab58:	429d      	cmp	r5, r3
 800ab5a:	d900      	bls.n	800ab5e <_svfprintf_r+0x106a>
 800ab5c:	001d      	movs	r5, r3
 800ab5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ab60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab62:	4293      	cmp	r3, r2
 800ab64:	db01      	blt.n	800ab6a <_svfprintf_r+0x1076>
 800ab66:	07f3      	lsls	r3, r6, #31
 800ab68:	d516      	bpl.n	800ab98 <_svfprintf_r+0x10a4>
 800ab6a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ab6c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ab6e:	603b      	str	r3, [r7, #0]
 800ab70:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ab72:	607b      	str	r3, [r7, #4]
 800ab74:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ab76:	3708      	adds	r7, #8
 800ab78:	189b      	adds	r3, r3, r2
 800ab7a:	932e      	str	r3, [sp, #184]	; 0xb8
 800ab7c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ab7e:	3301      	adds	r3, #1
 800ab80:	932d      	str	r3, [sp, #180]	; 0xb4
 800ab82:	2b07      	cmp	r3, #7
 800ab84:	dd08      	ble.n	800ab98 <_svfprintf_r+0x10a4>
 800ab86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab88:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ab8a:	aa2c      	add	r2, sp, #176	; 0xb0
 800ab8c:	f001 fd9a 	bl	800c6c4 <__ssprint_r>
 800ab90:	2800      	cmp	r0, #0
 800ab92:	d000      	beq.n	800ab96 <_svfprintf_r+0x10a2>
 800ab94:	e18d      	b.n	800aeb2 <_svfprintf_r+0x13be>
 800ab96:	af2f      	add	r7, sp, #188	; 0xbc
 800ab98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab9a:	9b08      	ldr	r3, [sp, #32]
 800ab9c:	4694      	mov	ip, r2
 800ab9e:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800aba0:	4463      	add	r3, ip
 800aba2:	1b5b      	subs	r3, r3, r5
 800aba4:	1b14      	subs	r4, r2, r4
 800aba6:	429c      	cmp	r4, r3
 800aba8:	dd00      	ble.n	800abac <_svfprintf_r+0x10b8>
 800abaa:	001c      	movs	r4, r3
 800abac:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800abae:	2c00      	cmp	r4, #0
 800abb0:	dd12      	ble.n	800abd8 <_svfprintf_r+0x10e4>
 800abb2:	18e3      	adds	r3, r4, r3
 800abb4:	932e      	str	r3, [sp, #184]	; 0xb8
 800abb6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800abb8:	603d      	str	r5, [r7, #0]
 800abba:	3301      	adds	r3, #1
 800abbc:	607c      	str	r4, [r7, #4]
 800abbe:	932d      	str	r3, [sp, #180]	; 0xb4
 800abc0:	3708      	adds	r7, #8
 800abc2:	2b07      	cmp	r3, #7
 800abc4:	dd08      	ble.n	800abd8 <_svfprintf_r+0x10e4>
 800abc6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abc8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800abca:	aa2c      	add	r2, sp, #176	; 0xb0
 800abcc:	f001 fd7a 	bl	800c6c4 <__ssprint_r>
 800abd0:	2800      	cmp	r0, #0
 800abd2:	d000      	beq.n	800abd6 <_svfprintf_r+0x10e2>
 800abd4:	e16d      	b.n	800aeb2 <_svfprintf_r+0x13be>
 800abd6:	af2f      	add	r7, sp, #188	; 0xbc
 800abd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800abda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800abdc:	2510      	movs	r5, #16
 800abde:	1ad3      	subs	r3, r2, r3
 800abe0:	43e2      	mvns	r2, r4
 800abe2:	17d2      	asrs	r2, r2, #31
 800abe4:	4014      	ands	r4, r2
 800abe6:	1b1c      	subs	r4, r3, r4
 800abe8:	2c00      	cmp	r4, #0
 800abea:	dc00      	bgt.n	800abee <_svfprintf_r+0x10fa>
 800abec:	e6b0      	b.n	800a950 <_svfprintf_r+0xe5c>
 800abee:	0039      	movs	r1, r7
 800abf0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800abf2:	4807      	ldr	r0, [pc, #28]	; (800ac10 <_svfprintf_r+0x111c>)
 800abf4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800abf6:	3301      	adds	r3, #1
 800abf8:	3108      	adds	r1, #8
 800abfa:	6038      	str	r0, [r7, #0]
 800abfc:	2c10      	cmp	r4, #16
 800abfe:	dd00      	ble.n	800ac02 <_svfprintf_r+0x110e>
 800ac00:	e096      	b.n	800ad30 <_svfprintf_r+0x123c>
 800ac02:	1912      	adds	r2, r2, r4
 800ac04:	607c      	str	r4, [r7, #4]
 800ac06:	922e      	str	r2, [sp, #184]	; 0xb8
 800ac08:	e6dd      	b.n	800a9c6 <_svfprintf_r+0xed2>
 800ac0a:	46c0      	nop			; (mov r8, r8)
 800ac0c:	0800e608 	.word	0x0800e608
 800ac10:	0800e61a 	.word	0x0800e61a
 800ac14:	2010      	movs	r0, #16
 800ac16:	1812      	adds	r2, r2, r0
 800ac18:	6078      	str	r0, [r7, #4]
 800ac1a:	922e      	str	r2, [sp, #184]	; 0xb8
 800ac1c:	932d      	str	r3, [sp, #180]	; 0xb4
 800ac1e:	2b07      	cmp	r3, #7
 800ac20:	dd08      	ble.n	800ac34 <_svfprintf_r+0x1140>
 800ac22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac24:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac26:	aa2c      	add	r2, sp, #176	; 0xb0
 800ac28:	f001 fd4c 	bl	800c6c4 <__ssprint_r>
 800ac2c:	2800      	cmp	r0, #0
 800ac2e:	d000      	beq.n	800ac32 <_svfprintf_r+0x113e>
 800ac30:	e13f      	b.n	800aeb2 <_svfprintf_r+0x13be>
 800ac32:	a92f      	add	r1, sp, #188	; 0xbc
 800ac34:	000f      	movs	r7, r1
 800ac36:	3c10      	subs	r4, #16
 800ac38:	e768      	b.n	800ab0c <_svfprintf_r+0x1018>
 800ac3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d05d      	beq.n	800acfc <_svfprintf_r+0x1208>
 800ac40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac42:	3b01      	subs	r3, #1
 800ac44:	9310      	str	r3, [sp, #64]	; 0x40
 800ac46:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ac48:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ac4a:	603b      	str	r3, [r7, #0]
 800ac4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac4e:	607b      	str	r3, [r7, #4]
 800ac50:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ac52:	3708      	adds	r7, #8
 800ac54:	189b      	adds	r3, r3, r2
 800ac56:	932e      	str	r3, [sp, #184]	; 0xb8
 800ac58:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	932d      	str	r3, [sp, #180]	; 0xb4
 800ac5e:	2b07      	cmp	r3, #7
 800ac60:	dd08      	ble.n	800ac74 <_svfprintf_r+0x1180>
 800ac62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac64:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac66:	aa2c      	add	r2, sp, #176	; 0xb0
 800ac68:	f001 fd2c 	bl	800c6c4 <__ssprint_r>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	d000      	beq.n	800ac72 <_svfprintf_r+0x117e>
 800ac70:	e11f      	b.n	800aeb2 <_svfprintf_r+0x13be>
 800ac72:	af2f      	add	r7, sp, #188	; 0xbc
 800ac74:	9b08      	ldr	r3, [sp, #32]
 800ac76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac78:	189c      	adds	r4, r3, r2
 800ac7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac7c:	1b64      	subs	r4, r4, r5
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	429c      	cmp	r4, r3
 800ac82:	dd00      	ble.n	800ac86 <_svfprintf_r+0x1192>
 800ac84:	001c      	movs	r4, r3
 800ac86:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ac88:	2c00      	cmp	r4, #0
 800ac8a:	dd12      	ble.n	800acb2 <_svfprintf_r+0x11be>
 800ac8c:	18e3      	adds	r3, r4, r3
 800ac8e:	932e      	str	r3, [sp, #184]	; 0xb8
 800ac90:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ac92:	603d      	str	r5, [r7, #0]
 800ac94:	3301      	adds	r3, #1
 800ac96:	607c      	str	r4, [r7, #4]
 800ac98:	932d      	str	r3, [sp, #180]	; 0xb4
 800ac9a:	3708      	adds	r7, #8
 800ac9c:	2b07      	cmp	r3, #7
 800ac9e:	dd08      	ble.n	800acb2 <_svfprintf_r+0x11be>
 800aca0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aca2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aca4:	aa2c      	add	r2, sp, #176	; 0xb0
 800aca6:	f001 fd0d 	bl	800c6c4 <__ssprint_r>
 800acaa:	2800      	cmp	r0, #0
 800acac:	d000      	beq.n	800acb0 <_svfprintf_r+0x11bc>
 800acae:	e100      	b.n	800aeb2 <_svfprintf_r+0x13be>
 800acb0:	af2f      	add	r7, sp, #188	; 0xbc
 800acb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800acb4:	781a      	ldrb	r2, [r3, #0]
 800acb6:	43e3      	mvns	r3, r4
 800acb8:	17db      	asrs	r3, r3, #31
 800acba:	401c      	ands	r4, r3
 800acbc:	1b14      	subs	r4, r2, r4
 800acbe:	2c00      	cmp	r4, #0
 800acc0:	dd18      	ble.n	800acf4 <_svfprintf_r+0x1200>
 800acc2:	0039      	movs	r1, r7
 800acc4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800acc6:	48aa      	ldr	r0, [pc, #680]	; (800af70 <_svfprintf_r+0x147c>)
 800acc8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800acca:	3301      	adds	r3, #1
 800accc:	3108      	adds	r1, #8
 800acce:	6038      	str	r0, [r7, #0]
 800acd0:	2c10      	cmp	r4, #16
 800acd2:	dc1a      	bgt.n	800ad0a <_svfprintf_r+0x1216>
 800acd4:	1912      	adds	r2, r2, r4
 800acd6:	607c      	str	r4, [r7, #4]
 800acd8:	922e      	str	r2, [sp, #184]	; 0xb8
 800acda:	000f      	movs	r7, r1
 800acdc:	932d      	str	r3, [sp, #180]	; 0xb4
 800acde:	2b07      	cmp	r3, #7
 800ace0:	dd08      	ble.n	800acf4 <_svfprintf_r+0x1200>
 800ace2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ace4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ace6:	aa2c      	add	r2, sp, #176	; 0xb0
 800ace8:	f001 fcec 	bl	800c6c4 <__ssprint_r>
 800acec:	2800      	cmp	r0, #0
 800acee:	d000      	beq.n	800acf2 <_svfprintf_r+0x11fe>
 800acf0:	e0df      	b.n	800aeb2 <_svfprintf_r+0x13be>
 800acf2:	af2f      	add	r7, sp, #188	; 0xbc
 800acf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	18ed      	adds	r5, r5, r3
 800acfa:	e724      	b.n	800ab46 <_svfprintf_r+0x1052>
 800acfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800acfe:	3b01      	subs	r3, #1
 800ad00:	9312      	str	r3, [sp, #72]	; 0x48
 800ad02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad04:	3b01      	subs	r3, #1
 800ad06:	9311      	str	r3, [sp, #68]	; 0x44
 800ad08:	e79d      	b.n	800ac46 <_svfprintf_r+0x1152>
 800ad0a:	2010      	movs	r0, #16
 800ad0c:	1812      	adds	r2, r2, r0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	922e      	str	r2, [sp, #184]	; 0xb8
 800ad12:	932d      	str	r3, [sp, #180]	; 0xb4
 800ad14:	2b07      	cmp	r3, #7
 800ad16:	dd08      	ble.n	800ad2a <_svfprintf_r+0x1236>
 800ad18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad1a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ad1c:	aa2c      	add	r2, sp, #176	; 0xb0
 800ad1e:	f001 fcd1 	bl	800c6c4 <__ssprint_r>
 800ad22:	2800      	cmp	r0, #0
 800ad24:	d000      	beq.n	800ad28 <_svfprintf_r+0x1234>
 800ad26:	e0c4      	b.n	800aeb2 <_svfprintf_r+0x13be>
 800ad28:	a92f      	add	r1, sp, #188	; 0xbc
 800ad2a:	000f      	movs	r7, r1
 800ad2c:	3c10      	subs	r4, #16
 800ad2e:	e7c8      	b.n	800acc2 <_svfprintf_r+0x11ce>
 800ad30:	3210      	adds	r2, #16
 800ad32:	607d      	str	r5, [r7, #4]
 800ad34:	922e      	str	r2, [sp, #184]	; 0xb8
 800ad36:	932d      	str	r3, [sp, #180]	; 0xb4
 800ad38:	2b07      	cmp	r3, #7
 800ad3a:	dd08      	ble.n	800ad4e <_svfprintf_r+0x125a>
 800ad3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ad40:	aa2c      	add	r2, sp, #176	; 0xb0
 800ad42:	f001 fcbf 	bl	800c6c4 <__ssprint_r>
 800ad46:	2800      	cmp	r0, #0
 800ad48:	d000      	beq.n	800ad4c <_svfprintf_r+0x1258>
 800ad4a:	e0b2      	b.n	800aeb2 <_svfprintf_r+0x13be>
 800ad4c:	a92f      	add	r1, sp, #188	; 0xbc
 800ad4e:	000f      	movs	r7, r1
 800ad50:	3c10      	subs	r4, #16
 800ad52:	e74c      	b.n	800abee <_svfprintf_r+0x10fa>
 800ad54:	003c      	movs	r4, r7
 800ad56:	9919      	ldr	r1, [sp, #100]	; 0x64
 800ad58:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ad5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad5c:	3101      	adds	r1, #1
 800ad5e:	3301      	adds	r3, #1
 800ad60:	3408      	adds	r4, #8
 800ad62:	2a01      	cmp	r2, #1
 800ad64:	dc03      	bgt.n	800ad6e <_svfprintf_r+0x127a>
 800ad66:	2201      	movs	r2, #1
 800ad68:	4216      	tst	r6, r2
 800ad6a:	d100      	bne.n	800ad6e <_svfprintf_r+0x127a>
 800ad6c:	e07f      	b.n	800ae6e <_svfprintf_r+0x137a>
 800ad6e:	9a08      	ldr	r2, [sp, #32]
 800ad70:	912e      	str	r1, [sp, #184]	; 0xb8
 800ad72:	603a      	str	r2, [r7, #0]
 800ad74:	2201      	movs	r2, #1
 800ad76:	932d      	str	r3, [sp, #180]	; 0xb4
 800ad78:	607a      	str	r2, [r7, #4]
 800ad7a:	2b07      	cmp	r3, #7
 800ad7c:	dd08      	ble.n	800ad90 <_svfprintf_r+0x129c>
 800ad7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad80:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ad82:	aa2c      	add	r2, sp, #176	; 0xb0
 800ad84:	f001 fc9e 	bl	800c6c4 <__ssprint_r>
 800ad88:	2800      	cmp	r0, #0
 800ad8a:	d000      	beq.n	800ad8e <_svfprintf_r+0x129a>
 800ad8c:	e091      	b.n	800aeb2 <_svfprintf_r+0x13be>
 800ad8e:	ac2f      	add	r4, sp, #188	; 0xbc
 800ad90:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ad92:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ad94:	6023      	str	r3, [r4, #0]
 800ad96:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ad98:	6063      	str	r3, [r4, #4]
 800ad9a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ad9c:	3408      	adds	r4, #8
 800ad9e:	189b      	adds	r3, r3, r2
 800ada0:	932e      	str	r3, [sp, #184]	; 0xb8
 800ada2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ada4:	3301      	adds	r3, #1
 800ada6:	932d      	str	r3, [sp, #180]	; 0xb4
 800ada8:	2b07      	cmp	r3, #7
 800adaa:	dd07      	ble.n	800adbc <_svfprintf_r+0x12c8>
 800adac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800adae:	980a      	ldr	r0, [sp, #40]	; 0x28
 800adb0:	aa2c      	add	r2, sp, #176	; 0xb0
 800adb2:	f001 fc87 	bl	800c6c4 <__ssprint_r>
 800adb6:	2800      	cmp	r0, #0
 800adb8:	d17b      	bne.n	800aeb2 <_svfprintf_r+0x13be>
 800adba:	ac2f      	add	r4, sp, #188	; 0xbc
 800adbc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800adbe:	2200      	movs	r2, #0
 800adc0:	9814      	ldr	r0, [sp, #80]	; 0x50
 800adc2:	9915      	ldr	r1, [sp, #84]	; 0x54
 800adc4:	9309      	str	r3, [sp, #36]	; 0x24
 800adc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adc8:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800adca:	1e5d      	subs	r5, r3, #1
 800adcc:	2300      	movs	r3, #0
 800adce:	f7f5 fb3d 	bl	800044c <__aeabi_dcmpeq>
 800add2:	2800      	cmp	r0, #0
 800add4:	d126      	bne.n	800ae24 <_svfprintf_r+0x1330>
 800add6:	9b08      	ldr	r3, [sp, #32]
 800add8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adda:	3301      	adds	r3, #1
 800addc:	990e      	ldr	r1, [sp, #56]	; 0x38
 800adde:	6023      	str	r3, [r4, #0]
 800ade0:	1e7b      	subs	r3, r7, #1
 800ade2:	3201      	adds	r2, #1
 800ade4:	185b      	adds	r3, r3, r1
 800ade6:	6065      	str	r5, [r4, #4]
 800ade8:	932e      	str	r3, [sp, #184]	; 0xb8
 800adea:	922d      	str	r2, [sp, #180]	; 0xb4
 800adec:	3408      	adds	r4, #8
 800adee:	2a07      	cmp	r2, #7
 800adf0:	dd07      	ble.n	800ae02 <_svfprintf_r+0x130e>
 800adf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800adf4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800adf6:	aa2c      	add	r2, sp, #176	; 0xb0
 800adf8:	f001 fc64 	bl	800c6c4 <__ssprint_r>
 800adfc:	2800      	cmp	r0, #0
 800adfe:	d158      	bne.n	800aeb2 <_svfprintf_r+0x13be>
 800ae00:	ac2f      	add	r4, sp, #188	; 0xbc
 800ae02:	ab28      	add	r3, sp, #160	; 0xa0
 800ae04:	6023      	str	r3, [r4, #0]
 800ae06:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ae08:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ae0a:	6063      	str	r3, [r4, #4]
 800ae0c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ae0e:	189b      	adds	r3, r3, r2
 800ae10:	932e      	str	r3, [sp, #184]	; 0xb8
 800ae12:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ae14:	3301      	adds	r3, #1
 800ae16:	932d      	str	r3, [sp, #180]	; 0xb4
 800ae18:	2b07      	cmp	r3, #7
 800ae1a:	dd00      	ble.n	800ae1e <_svfprintf_r+0x132a>
 800ae1c:	e638      	b.n	800aa90 <_svfprintf_r+0xf9c>
 800ae1e:	3408      	adds	r4, #8
 800ae20:	0027      	movs	r7, r4
 800ae22:	e595      	b.n	800a950 <_svfprintf_r+0xe5c>
 800ae24:	2710      	movs	r7, #16
 800ae26:	2d00      	cmp	r5, #0
 800ae28:	ddeb      	ble.n	800ae02 <_svfprintf_r+0x130e>
 800ae2a:	0021      	movs	r1, r4
 800ae2c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ae2e:	4850      	ldr	r0, [pc, #320]	; (800af70 <_svfprintf_r+0x147c>)
 800ae30:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ae32:	3301      	adds	r3, #1
 800ae34:	3108      	adds	r1, #8
 800ae36:	6020      	str	r0, [r4, #0]
 800ae38:	2d10      	cmp	r5, #16
 800ae3a:	dc07      	bgt.n	800ae4c <_svfprintf_r+0x1358>
 800ae3c:	6065      	str	r5, [r4, #4]
 800ae3e:	000c      	movs	r4, r1
 800ae40:	18ad      	adds	r5, r5, r2
 800ae42:	952e      	str	r5, [sp, #184]	; 0xb8
 800ae44:	932d      	str	r3, [sp, #180]	; 0xb4
 800ae46:	2b07      	cmp	r3, #7
 800ae48:	dddb      	ble.n	800ae02 <_svfprintf_r+0x130e>
 800ae4a:	e7d2      	b.n	800adf2 <_svfprintf_r+0x12fe>
 800ae4c:	3210      	adds	r2, #16
 800ae4e:	6067      	str	r7, [r4, #4]
 800ae50:	922e      	str	r2, [sp, #184]	; 0xb8
 800ae52:	932d      	str	r3, [sp, #180]	; 0xb4
 800ae54:	2b07      	cmp	r3, #7
 800ae56:	dd07      	ble.n	800ae68 <_svfprintf_r+0x1374>
 800ae58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae5a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ae5c:	aa2c      	add	r2, sp, #176	; 0xb0
 800ae5e:	f001 fc31 	bl	800c6c4 <__ssprint_r>
 800ae62:	2800      	cmp	r0, #0
 800ae64:	d125      	bne.n	800aeb2 <_svfprintf_r+0x13be>
 800ae66:	a92f      	add	r1, sp, #188	; 0xbc
 800ae68:	000c      	movs	r4, r1
 800ae6a:	3d10      	subs	r5, #16
 800ae6c:	e7dd      	b.n	800ae2a <_svfprintf_r+0x1336>
 800ae6e:	9808      	ldr	r0, [sp, #32]
 800ae70:	912e      	str	r1, [sp, #184]	; 0xb8
 800ae72:	c705      	stmia	r7!, {r0, r2}
 800ae74:	932d      	str	r3, [sp, #180]	; 0xb4
 800ae76:	e7e6      	b.n	800ae46 <_svfprintf_r+0x1352>
 800ae78:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ae7a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ae7c:	2510      	movs	r5, #16
 800ae7e:	1a9c      	subs	r4, r3, r2
 800ae80:	2c00      	cmp	r4, #0
 800ae82:	dc00      	bgt.n	800ae86 <_svfprintf_r+0x1392>
 800ae84:	e567      	b.n	800a956 <_svfprintf_r+0xe62>
 800ae86:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ae88:	493a      	ldr	r1, [pc, #232]	; (800af74 <_svfprintf_r+0x1480>)
 800ae8a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	6039      	str	r1, [r7, #0]
 800ae90:	2c10      	cmp	r4, #16
 800ae92:	dc19      	bgt.n	800aec8 <_svfprintf_r+0x13d4>
 800ae94:	607c      	str	r4, [r7, #4]
 800ae96:	18a4      	adds	r4, r4, r2
 800ae98:	942e      	str	r4, [sp, #184]	; 0xb8
 800ae9a:	932d      	str	r3, [sp, #180]	; 0xb4
 800ae9c:	2b07      	cmp	r3, #7
 800ae9e:	dc00      	bgt.n	800aea2 <_svfprintf_r+0x13ae>
 800aea0:	e559      	b.n	800a956 <_svfprintf_r+0xe62>
 800aea2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aea4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aea6:	aa2c      	add	r2, sp, #176	; 0xb0
 800aea8:	f001 fc0c 	bl	800c6c4 <__ssprint_r>
 800aeac:	2800      	cmp	r0, #0
 800aeae:	d100      	bne.n	800aeb2 <_svfprintf_r+0x13be>
 800aeb0:	e551      	b.n	800a956 <_svfprintf_r+0xe62>
 800aeb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d101      	bne.n	800aebc <_svfprintf_r+0x13c8>
 800aeb8:	f7ff f845 	bl	8009f46 <_svfprintf_r+0x452>
 800aebc:	0019      	movs	r1, r3
 800aebe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aec0:	f7fe fb42 	bl	8009548 <_free_r>
 800aec4:	f7ff f83f 	bl	8009f46 <_svfprintf_r+0x452>
 800aec8:	3210      	adds	r2, #16
 800aeca:	607d      	str	r5, [r7, #4]
 800aecc:	922e      	str	r2, [sp, #184]	; 0xb8
 800aece:	932d      	str	r3, [sp, #180]	; 0xb4
 800aed0:	3708      	adds	r7, #8
 800aed2:	2b07      	cmp	r3, #7
 800aed4:	dd07      	ble.n	800aee6 <_svfprintf_r+0x13f2>
 800aed6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aed8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aeda:	aa2c      	add	r2, sp, #176	; 0xb0
 800aedc:	f001 fbf2 	bl	800c6c4 <__ssprint_r>
 800aee0:	2800      	cmp	r0, #0
 800aee2:	d1e6      	bne.n	800aeb2 <_svfprintf_r+0x13be>
 800aee4:	af2f      	add	r7, sp, #188	; 0xbc
 800aee6:	3c10      	subs	r4, #16
 800aee8:	e7cd      	b.n	800ae86 <_svfprintf_r+0x1392>
 800aeea:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aeec:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aeee:	f7fe fb2b 	bl	8009548 <_free_r>
 800aef2:	e549      	b.n	800a988 <_svfprintf_r+0xe94>
 800aef4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d101      	bne.n	800aefe <_svfprintf_r+0x140a>
 800aefa:	f7ff f824 	bl	8009f46 <_svfprintf_r+0x452>
 800aefe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af00:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af02:	aa2c      	add	r2, sp, #176	; 0xb0
 800af04:	f001 fbde 	bl	800c6c4 <__ssprint_r>
 800af08:	f7ff f81d 	bl	8009f46 <_svfprintf_r+0x452>
 800af0c:	0034      	movs	r4, r6
 800af0e:	2a00      	cmp	r2, #0
 800af10:	d101      	bne.n	800af16 <_svfprintf_r+0x1422>
 800af12:	f7fe ff8c 	bl	8009e2e <_svfprintf_r+0x33a>
 800af16:	2b01      	cmp	r3, #1
 800af18:	d101      	bne.n	800af1e <_svfprintf_r+0x142a>
 800af1a:	f7ff fc01 	bl	800a720 <_svfprintf_r+0xc2c>
 800af1e:	2b02      	cmp	r3, #2
 800af20:	d100      	bne.n	800af24 <_svfprintf_r+0x1430>
 800af22:	e459      	b.n	800a7d8 <_svfprintf_r+0xce4>
 800af24:	2507      	movs	r5, #7
 800af26:	ab58      	add	r3, sp, #352	; 0x160
 800af28:	9308      	str	r3, [sp, #32]
 800af2a:	9a08      	ldr	r2, [sp, #32]
 800af2c:	0013      	movs	r3, r2
 800af2e:	3b01      	subs	r3, #1
 800af30:	9308      	str	r3, [sp, #32]
 800af32:	9b06      	ldr	r3, [sp, #24]
 800af34:	9908      	ldr	r1, [sp, #32]
 800af36:	402b      	ands	r3, r5
 800af38:	3330      	adds	r3, #48	; 0x30
 800af3a:	700b      	strb	r3, [r1, #0]
 800af3c:	9907      	ldr	r1, [sp, #28]
 800af3e:	074e      	lsls	r6, r1, #29
 800af40:	9906      	ldr	r1, [sp, #24]
 800af42:	08c8      	lsrs	r0, r1, #3
 800af44:	9907      	ldr	r1, [sp, #28]
 800af46:	4306      	orrs	r6, r0
 800af48:	08c9      	lsrs	r1, r1, #3
 800af4a:	9107      	str	r1, [sp, #28]
 800af4c:	0031      	movs	r1, r6
 800af4e:	9807      	ldr	r0, [sp, #28]
 800af50:	9606      	str	r6, [sp, #24]
 800af52:	4301      	orrs	r1, r0
 800af54:	d1e9      	bne.n	800af2a <_svfprintf_r+0x1436>
 800af56:	07e1      	lsls	r1, r4, #31
 800af58:	d400      	bmi.n	800af5c <_svfprintf_r+0x1468>
 800af5a:	e42a      	b.n	800a7b2 <_svfprintf_r+0xcbe>
 800af5c:	2b30      	cmp	r3, #48	; 0x30
 800af5e:	d100      	bne.n	800af62 <_svfprintf_r+0x146e>
 800af60:	e427      	b.n	800a7b2 <_svfprintf_r+0xcbe>
 800af62:	2130      	movs	r1, #48	; 0x30
 800af64:	9b08      	ldr	r3, [sp, #32]
 800af66:	3b01      	subs	r3, #1
 800af68:	7019      	strb	r1, [r3, #0]
 800af6a:	1e93      	subs	r3, r2, #2
 800af6c:	9308      	str	r3, [sp, #32]
 800af6e:	e420      	b.n	800a7b2 <_svfprintf_r+0xcbe>
 800af70:	0800e61a 	.word	0x0800e61a
 800af74:	0800e60a 	.word	0x0800e60a

0800af78 <_fclose_r>:
 800af78:	b570      	push	{r4, r5, r6, lr}
 800af7a:	0005      	movs	r5, r0
 800af7c:	1e0c      	subs	r4, r1, #0
 800af7e:	d102      	bne.n	800af86 <_fclose_r+0xe>
 800af80:	2600      	movs	r6, #0
 800af82:	0030      	movs	r0, r6
 800af84:	bd70      	pop	{r4, r5, r6, pc}
 800af86:	2800      	cmp	r0, #0
 800af88:	d004      	beq.n	800af94 <_fclose_r+0x1c>
 800af8a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d101      	bne.n	800af94 <_fclose_r+0x1c>
 800af90:	f7fe f8f2 	bl	8009178 <__sinit>
 800af94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af96:	07db      	lsls	r3, r3, #31
 800af98:	d405      	bmi.n	800afa6 <_fclose_r+0x2e>
 800af9a:	89a3      	ldrh	r3, [r4, #12]
 800af9c:	059b      	lsls	r3, r3, #22
 800af9e:	d402      	bmi.n	800afa6 <_fclose_r+0x2e>
 800afa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afa2:	f7fe fa4b 	bl	800943c <__retarget_lock_acquire_recursive>
 800afa6:	220c      	movs	r2, #12
 800afa8:	5ea3      	ldrsh	r3, [r4, r2]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d109      	bne.n	800afc2 <_fclose_r+0x4a>
 800afae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800afb0:	3301      	adds	r3, #1
 800afb2:	0016      	movs	r6, r2
 800afb4:	401e      	ands	r6, r3
 800afb6:	421a      	tst	r2, r3
 800afb8:	d1e2      	bne.n	800af80 <_fclose_r+0x8>
 800afba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afbc:	f7fe fa3f 	bl	800943e <__retarget_lock_release_recursive>
 800afc0:	e7df      	b.n	800af82 <_fclose_r+0xa>
 800afc2:	0021      	movs	r1, r4
 800afc4:	0028      	movs	r0, r5
 800afc6:	f000 f837 	bl	800b038 <__sflush_r>
 800afca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800afcc:	0006      	movs	r6, r0
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d006      	beq.n	800afe0 <_fclose_r+0x68>
 800afd2:	0028      	movs	r0, r5
 800afd4:	69e1      	ldr	r1, [r4, #28]
 800afd6:	4798      	blx	r3
 800afd8:	2800      	cmp	r0, #0
 800afda:	da01      	bge.n	800afe0 <_fclose_r+0x68>
 800afdc:	2601      	movs	r6, #1
 800afde:	4276      	negs	r6, r6
 800afe0:	89a3      	ldrh	r3, [r4, #12]
 800afe2:	061b      	lsls	r3, r3, #24
 800afe4:	d503      	bpl.n	800afee <_fclose_r+0x76>
 800afe6:	0028      	movs	r0, r5
 800afe8:	6921      	ldr	r1, [r4, #16]
 800afea:	f7fe faad 	bl	8009548 <_free_r>
 800afee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800aff0:	2900      	cmp	r1, #0
 800aff2:	d008      	beq.n	800b006 <_fclose_r+0x8e>
 800aff4:	0023      	movs	r3, r4
 800aff6:	3340      	adds	r3, #64	; 0x40
 800aff8:	4299      	cmp	r1, r3
 800affa:	d002      	beq.n	800b002 <_fclose_r+0x8a>
 800affc:	0028      	movs	r0, r5
 800affe:	f7fe faa3 	bl	8009548 <_free_r>
 800b002:	2300      	movs	r3, #0
 800b004:	6323      	str	r3, [r4, #48]	; 0x30
 800b006:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b008:	2900      	cmp	r1, #0
 800b00a:	d004      	beq.n	800b016 <_fclose_r+0x9e>
 800b00c:	0028      	movs	r0, r5
 800b00e:	f7fe fa9b 	bl	8009548 <_free_r>
 800b012:	2300      	movs	r3, #0
 800b014:	6463      	str	r3, [r4, #68]	; 0x44
 800b016:	f7fe f89f 	bl	8009158 <__sfp_lock_acquire>
 800b01a:	2300      	movs	r3, #0
 800b01c:	81a3      	strh	r3, [r4, #12]
 800b01e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b020:	07db      	lsls	r3, r3, #31
 800b022:	d402      	bmi.n	800b02a <_fclose_r+0xb2>
 800b024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b026:	f7fe fa0a 	bl	800943e <__retarget_lock_release_recursive>
 800b02a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b02c:	f7fe fa05 	bl	800943a <__retarget_lock_close_recursive>
 800b030:	f7fe f89a 	bl	8009168 <__sfp_lock_release>
 800b034:	e7a5      	b.n	800af82 <_fclose_r+0xa>
	...

0800b038 <__sflush_r>:
 800b038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b03a:	230c      	movs	r3, #12
 800b03c:	5eca      	ldrsh	r2, [r1, r3]
 800b03e:	000c      	movs	r4, r1
 800b040:	0005      	movs	r5, r0
 800b042:	b291      	uxth	r1, r2
 800b044:	0713      	lsls	r3, r2, #28
 800b046:	d464      	bmi.n	800b112 <__sflush_r+0xda>
 800b048:	2380      	movs	r3, #128	; 0x80
 800b04a:	011b      	lsls	r3, r3, #4
 800b04c:	4313      	orrs	r3, r2
 800b04e:	6862      	ldr	r2, [r4, #4]
 800b050:	81a3      	strh	r3, [r4, #12]
 800b052:	2a00      	cmp	r2, #0
 800b054:	dc04      	bgt.n	800b060 <__sflush_r+0x28>
 800b056:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b058:	2a00      	cmp	r2, #0
 800b05a:	dc01      	bgt.n	800b060 <__sflush_r+0x28>
 800b05c:	2000      	movs	r0, #0
 800b05e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b060:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800b062:	2f00      	cmp	r7, #0
 800b064:	d0fa      	beq.n	800b05c <__sflush_r+0x24>
 800b066:	2200      	movs	r2, #0
 800b068:	2080      	movs	r0, #128	; 0x80
 800b06a:	682e      	ldr	r6, [r5, #0]
 800b06c:	602a      	str	r2, [r5, #0]
 800b06e:	001a      	movs	r2, r3
 800b070:	0140      	lsls	r0, r0, #5
 800b072:	69e1      	ldr	r1, [r4, #28]
 800b074:	4002      	ands	r2, r0
 800b076:	4203      	tst	r3, r0
 800b078:	d038      	beq.n	800b0ec <__sflush_r+0xb4>
 800b07a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800b07c:	89a3      	ldrh	r3, [r4, #12]
 800b07e:	075b      	lsls	r3, r3, #29
 800b080:	d506      	bpl.n	800b090 <__sflush_r+0x58>
 800b082:	6863      	ldr	r3, [r4, #4]
 800b084:	1ac0      	subs	r0, r0, r3
 800b086:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d001      	beq.n	800b090 <__sflush_r+0x58>
 800b08c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b08e:	1ac0      	subs	r0, r0, r3
 800b090:	0002      	movs	r2, r0
 800b092:	2300      	movs	r3, #0
 800b094:	0028      	movs	r0, r5
 800b096:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800b098:	69e1      	ldr	r1, [r4, #28]
 800b09a:	47b8      	blx	r7
 800b09c:	89a2      	ldrh	r2, [r4, #12]
 800b09e:	1c43      	adds	r3, r0, #1
 800b0a0:	d106      	bne.n	800b0b0 <__sflush_r+0x78>
 800b0a2:	6829      	ldr	r1, [r5, #0]
 800b0a4:	291d      	cmp	r1, #29
 800b0a6:	d830      	bhi.n	800b10a <__sflush_r+0xd2>
 800b0a8:	4b2c      	ldr	r3, [pc, #176]	; (800b15c <__sflush_r+0x124>)
 800b0aa:	410b      	asrs	r3, r1
 800b0ac:	07db      	lsls	r3, r3, #31
 800b0ae:	d42c      	bmi.n	800b10a <__sflush_r+0xd2>
 800b0b0:	4b2b      	ldr	r3, [pc, #172]	; (800b160 <__sflush_r+0x128>)
 800b0b2:	4013      	ands	r3, r2
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	6062      	str	r2, [r4, #4]
 800b0b8:	6922      	ldr	r2, [r4, #16]
 800b0ba:	b21b      	sxth	r3, r3
 800b0bc:	81a3      	strh	r3, [r4, #12]
 800b0be:	6022      	str	r2, [r4, #0]
 800b0c0:	04db      	lsls	r3, r3, #19
 800b0c2:	d505      	bpl.n	800b0d0 <__sflush_r+0x98>
 800b0c4:	1c43      	adds	r3, r0, #1
 800b0c6:	d102      	bne.n	800b0ce <__sflush_r+0x96>
 800b0c8:	682b      	ldr	r3, [r5, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d100      	bne.n	800b0d0 <__sflush_r+0x98>
 800b0ce:	6520      	str	r0, [r4, #80]	; 0x50
 800b0d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b0d2:	602e      	str	r6, [r5, #0]
 800b0d4:	2900      	cmp	r1, #0
 800b0d6:	d0c1      	beq.n	800b05c <__sflush_r+0x24>
 800b0d8:	0023      	movs	r3, r4
 800b0da:	3340      	adds	r3, #64	; 0x40
 800b0dc:	4299      	cmp	r1, r3
 800b0de:	d002      	beq.n	800b0e6 <__sflush_r+0xae>
 800b0e0:	0028      	movs	r0, r5
 800b0e2:	f7fe fa31 	bl	8009548 <_free_r>
 800b0e6:	2000      	movs	r0, #0
 800b0e8:	6320      	str	r0, [r4, #48]	; 0x30
 800b0ea:	e7b8      	b.n	800b05e <__sflush_r+0x26>
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	0028      	movs	r0, r5
 800b0f0:	47b8      	blx	r7
 800b0f2:	1c43      	adds	r3, r0, #1
 800b0f4:	d1c2      	bne.n	800b07c <__sflush_r+0x44>
 800b0f6:	682b      	ldr	r3, [r5, #0]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d0bf      	beq.n	800b07c <__sflush_r+0x44>
 800b0fc:	2b1d      	cmp	r3, #29
 800b0fe:	d001      	beq.n	800b104 <__sflush_r+0xcc>
 800b100:	2b16      	cmp	r3, #22
 800b102:	d101      	bne.n	800b108 <__sflush_r+0xd0>
 800b104:	602e      	str	r6, [r5, #0]
 800b106:	e7a9      	b.n	800b05c <__sflush_r+0x24>
 800b108:	89a2      	ldrh	r2, [r4, #12]
 800b10a:	2340      	movs	r3, #64	; 0x40
 800b10c:	4313      	orrs	r3, r2
 800b10e:	81a3      	strh	r3, [r4, #12]
 800b110:	e7a5      	b.n	800b05e <__sflush_r+0x26>
 800b112:	6926      	ldr	r6, [r4, #16]
 800b114:	2e00      	cmp	r6, #0
 800b116:	d0a1      	beq.n	800b05c <__sflush_r+0x24>
 800b118:	6827      	ldr	r7, [r4, #0]
 800b11a:	6026      	str	r6, [r4, #0]
 800b11c:	1bbb      	subs	r3, r7, r6
 800b11e:	9301      	str	r3, [sp, #4]
 800b120:	2300      	movs	r3, #0
 800b122:	0789      	lsls	r1, r1, #30
 800b124:	d100      	bne.n	800b128 <__sflush_r+0xf0>
 800b126:	6963      	ldr	r3, [r4, #20]
 800b128:	60a3      	str	r3, [r4, #8]
 800b12a:	9b01      	ldr	r3, [sp, #4]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	dc00      	bgt.n	800b132 <__sflush_r+0xfa>
 800b130:	e794      	b.n	800b05c <__sflush_r+0x24>
 800b132:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b134:	0032      	movs	r2, r6
 800b136:	001f      	movs	r7, r3
 800b138:	0028      	movs	r0, r5
 800b13a:	9b01      	ldr	r3, [sp, #4]
 800b13c:	69e1      	ldr	r1, [r4, #28]
 800b13e:	47b8      	blx	r7
 800b140:	2800      	cmp	r0, #0
 800b142:	dc06      	bgt.n	800b152 <__sflush_r+0x11a>
 800b144:	2340      	movs	r3, #64	; 0x40
 800b146:	2001      	movs	r0, #1
 800b148:	89a2      	ldrh	r2, [r4, #12]
 800b14a:	4240      	negs	r0, r0
 800b14c:	4313      	orrs	r3, r2
 800b14e:	81a3      	strh	r3, [r4, #12]
 800b150:	e785      	b.n	800b05e <__sflush_r+0x26>
 800b152:	9b01      	ldr	r3, [sp, #4]
 800b154:	1836      	adds	r6, r6, r0
 800b156:	1a1b      	subs	r3, r3, r0
 800b158:	9301      	str	r3, [sp, #4]
 800b15a:	e7e6      	b.n	800b12a <__sflush_r+0xf2>
 800b15c:	dfbffffe 	.word	0xdfbffffe
 800b160:	fffff7ff 	.word	0xfffff7ff

0800b164 <_fflush_r>:
 800b164:	b570      	push	{r4, r5, r6, lr}
 800b166:	0005      	movs	r5, r0
 800b168:	000c      	movs	r4, r1
 800b16a:	2800      	cmp	r0, #0
 800b16c:	d004      	beq.n	800b178 <_fflush_r+0x14>
 800b16e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b170:	2b00      	cmp	r3, #0
 800b172:	d101      	bne.n	800b178 <_fflush_r+0x14>
 800b174:	f7fe f800 	bl	8009178 <__sinit>
 800b178:	220c      	movs	r2, #12
 800b17a:	5ea3      	ldrsh	r3, [r4, r2]
 800b17c:	1e1e      	subs	r6, r3, #0
 800b17e:	d015      	beq.n	800b1ac <_fflush_r+0x48>
 800b180:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b182:	07d2      	lsls	r2, r2, #31
 800b184:	d404      	bmi.n	800b190 <_fflush_r+0x2c>
 800b186:	059b      	lsls	r3, r3, #22
 800b188:	d402      	bmi.n	800b190 <_fflush_r+0x2c>
 800b18a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b18c:	f7fe f956 	bl	800943c <__retarget_lock_acquire_recursive>
 800b190:	0021      	movs	r1, r4
 800b192:	0028      	movs	r0, r5
 800b194:	f7ff ff50 	bl	800b038 <__sflush_r>
 800b198:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b19a:	0006      	movs	r6, r0
 800b19c:	07db      	lsls	r3, r3, #31
 800b19e:	d405      	bmi.n	800b1ac <_fflush_r+0x48>
 800b1a0:	89a3      	ldrh	r3, [r4, #12]
 800b1a2:	059b      	lsls	r3, r3, #22
 800b1a4:	d402      	bmi.n	800b1ac <_fflush_r+0x48>
 800b1a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1a8:	f7fe f949 	bl	800943e <__retarget_lock_release_recursive>
 800b1ac:	0030      	movs	r0, r6
 800b1ae:	bd70      	pop	{r4, r5, r6, pc}

0800b1b0 <strncpy>:
 800b1b0:	0003      	movs	r3, r0
 800b1b2:	b530      	push	{r4, r5, lr}
 800b1b4:	001d      	movs	r5, r3
 800b1b6:	2a00      	cmp	r2, #0
 800b1b8:	d006      	beq.n	800b1c8 <strncpy+0x18>
 800b1ba:	780c      	ldrb	r4, [r1, #0]
 800b1bc:	3a01      	subs	r2, #1
 800b1be:	3301      	adds	r3, #1
 800b1c0:	702c      	strb	r4, [r5, #0]
 800b1c2:	3101      	adds	r1, #1
 800b1c4:	2c00      	cmp	r4, #0
 800b1c6:	d1f5      	bne.n	800b1b4 <strncpy+0x4>
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	189a      	adds	r2, r3, r2
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d100      	bne.n	800b1d2 <strncpy+0x22>
 800b1d0:	bd30      	pop	{r4, r5, pc}
 800b1d2:	7019      	strb	r1, [r3, #0]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	e7f9      	b.n	800b1cc <strncpy+0x1c>

0800b1d8 <_localeconv_r>:
 800b1d8:	4800      	ldr	r0, [pc, #0]	; (800b1dc <_localeconv_r+0x4>)
 800b1da:	4770      	bx	lr
 800b1dc:	20000648 	.word	0x20000648

0800b1e0 <_sbrk_r>:
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	b570      	push	{r4, r5, r6, lr}
 800b1e4:	4d06      	ldr	r5, [pc, #24]	; (800b200 <_sbrk_r+0x20>)
 800b1e6:	0004      	movs	r4, r0
 800b1e8:	0008      	movs	r0, r1
 800b1ea:	602b      	str	r3, [r5, #0]
 800b1ec:	f002 fe08 	bl	800de00 <_sbrk>
 800b1f0:	1c43      	adds	r3, r0, #1
 800b1f2:	d103      	bne.n	800b1fc <_sbrk_r+0x1c>
 800b1f4:	682b      	ldr	r3, [r5, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d000      	beq.n	800b1fc <_sbrk_r+0x1c>
 800b1fa:	6023      	str	r3, [r4, #0]
 800b1fc:	bd70      	pop	{r4, r5, r6, pc}
 800b1fe:	46c0      	nop			; (mov r8, r8)
 800b200:	20003164 	.word	0x20003164

0800b204 <__libc_fini_array>:
 800b204:	b570      	push	{r4, r5, r6, lr}
 800b206:	4c07      	ldr	r4, [pc, #28]	; (800b224 <__libc_fini_array+0x20>)
 800b208:	4d07      	ldr	r5, [pc, #28]	; (800b228 <__libc_fini_array+0x24>)
 800b20a:	1b64      	subs	r4, r4, r5
 800b20c:	10a4      	asrs	r4, r4, #2
 800b20e:	2c00      	cmp	r4, #0
 800b210:	d102      	bne.n	800b218 <__libc_fini_array+0x14>
 800b212:	f002 fe0b 	bl	800de2c <_fini>
 800b216:	bd70      	pop	{r4, r5, r6, pc}
 800b218:	3c01      	subs	r4, #1
 800b21a:	00a3      	lsls	r3, r4, #2
 800b21c:	58eb      	ldr	r3, [r5, r3]
 800b21e:	4798      	blx	r3
 800b220:	e7f5      	b.n	800b20e <__libc_fini_array+0xa>
 800b222:	46c0      	nop			; (mov r8, r8)
 800b224:	0800e878 	.word	0x0800e878
 800b228:	0800e874 	.word	0x0800e874

0800b22c <sysconf>:
 800b22c:	2380      	movs	r3, #128	; 0x80
 800b22e:	b510      	push	{r4, lr}
 800b230:	2808      	cmp	r0, #8
 800b232:	d004      	beq.n	800b23e <sysconf+0x12>
 800b234:	f7fe f8d6 	bl	80093e4 <__errno>
 800b238:	2316      	movs	r3, #22
 800b23a:	6003      	str	r3, [r0, #0]
 800b23c:	3b17      	subs	r3, #23
 800b23e:	0018      	movs	r0, r3
 800b240:	bd10      	pop	{r4, pc}
	...

0800b244 <frexp>:
 800b244:	b570      	push	{r4, r5, r6, lr}
 800b246:	0014      	movs	r4, r2
 800b248:	2500      	movs	r5, #0
 800b24a:	6025      	str	r5, [r4, #0]
 800b24c:	4d10      	ldr	r5, [pc, #64]	; (800b290 <frexp+0x4c>)
 800b24e:	004b      	lsls	r3, r1, #1
 800b250:	000a      	movs	r2, r1
 800b252:	085b      	lsrs	r3, r3, #1
 800b254:	42ab      	cmp	r3, r5
 800b256:	dc1a      	bgt.n	800b28e <frexp+0x4a>
 800b258:	001d      	movs	r5, r3
 800b25a:	4305      	orrs	r5, r0
 800b25c:	d017      	beq.n	800b28e <frexp+0x4a>
 800b25e:	4d0d      	ldr	r5, [pc, #52]	; (800b294 <frexp+0x50>)
 800b260:	4229      	tst	r1, r5
 800b262:	d109      	bne.n	800b278 <frexp+0x34>
 800b264:	2200      	movs	r2, #0
 800b266:	4b0c      	ldr	r3, [pc, #48]	; (800b298 <frexp+0x54>)
 800b268:	f7f6 fb88 	bl	800197c <__aeabi_dmul>
 800b26c:	2536      	movs	r5, #54	; 0x36
 800b26e:	000a      	movs	r2, r1
 800b270:	004b      	lsls	r3, r1, #1
 800b272:	426d      	negs	r5, r5
 800b274:	085b      	lsrs	r3, r3, #1
 800b276:	6025      	str	r5, [r4, #0]
 800b278:	4d08      	ldr	r5, [pc, #32]	; (800b29c <frexp+0x58>)
 800b27a:	151b      	asrs	r3, r3, #20
 800b27c:	195b      	adds	r3, r3, r5
 800b27e:	6825      	ldr	r5, [r4, #0]
 800b280:	18eb      	adds	r3, r5, r3
 800b282:	6023      	str	r3, [r4, #0]
 800b284:	4b06      	ldr	r3, [pc, #24]	; (800b2a0 <frexp+0x5c>)
 800b286:	401a      	ands	r2, r3
 800b288:	4b06      	ldr	r3, [pc, #24]	; (800b2a4 <frexp+0x60>)
 800b28a:	4313      	orrs	r3, r2
 800b28c:	0019      	movs	r1, r3
 800b28e:	bd70      	pop	{r4, r5, r6, pc}
 800b290:	7fefffff 	.word	0x7fefffff
 800b294:	7ff00000 	.word	0x7ff00000
 800b298:	43500000 	.word	0x43500000
 800b29c:	fffffc02 	.word	0xfffffc02
 800b2a0:	800fffff 	.word	0x800fffff
 800b2a4:	3fe00000 	.word	0x3fe00000

0800b2a8 <__register_exitproc>:
 800b2a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2aa:	4f1c      	ldr	r7, [pc, #112]	; (800b31c <__register_exitproc+0x74>)
 800b2ac:	0004      	movs	r4, r0
 800b2ae:	6838      	ldr	r0, [r7, #0]
 800b2b0:	0016      	movs	r6, r2
 800b2b2:	9301      	str	r3, [sp, #4]
 800b2b4:	9100      	str	r1, [sp, #0]
 800b2b6:	f7fe f8c1 	bl	800943c <__retarget_lock_acquire_recursive>
 800b2ba:	4a19      	ldr	r2, [pc, #100]	; (800b320 <__register_exitproc+0x78>)
 800b2bc:	6813      	ldr	r3, [r2, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d101      	bne.n	800b2c6 <__register_exitproc+0x1e>
 800b2c2:	4b18      	ldr	r3, [pc, #96]	; (800b324 <__register_exitproc+0x7c>)
 800b2c4:	6013      	str	r3, [r2, #0]
 800b2c6:	685a      	ldr	r2, [r3, #4]
 800b2c8:	6838      	ldr	r0, [r7, #0]
 800b2ca:	2a1f      	cmp	r2, #31
 800b2cc:	dd04      	ble.n	800b2d8 <__register_exitproc+0x30>
 800b2ce:	f7fe f8b6 	bl	800943e <__retarget_lock_release_recursive>
 800b2d2:	2001      	movs	r0, #1
 800b2d4:	4240      	negs	r0, r0
 800b2d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b2d8:	2c00      	cmp	r4, #0
 800b2da:	d014      	beq.n	800b306 <__register_exitproc+0x5e>
 800b2dc:	0091      	lsls	r1, r2, #2
 800b2de:	1859      	adds	r1, r3, r1
 800b2e0:	000f      	movs	r7, r1
 800b2e2:	3788      	adds	r7, #136	; 0x88
 800b2e4:	603e      	str	r6, [r7, #0]
 800b2e6:	2701      	movs	r7, #1
 800b2e8:	001e      	movs	r6, r3
 800b2ea:	4097      	lsls	r7, r2
 800b2ec:	3685      	adds	r6, #133	; 0x85
 800b2ee:	36ff      	adds	r6, #255	; 0xff
 800b2f0:	6875      	ldr	r5, [r6, #4]
 800b2f2:	31fc      	adds	r1, #252	; 0xfc
 800b2f4:	433d      	orrs	r5, r7
 800b2f6:	6075      	str	r5, [r6, #4]
 800b2f8:	9d01      	ldr	r5, [sp, #4]
 800b2fa:	60cd      	str	r5, [r1, #12]
 800b2fc:	2c02      	cmp	r4, #2
 800b2fe:	d102      	bne.n	800b306 <__register_exitproc+0x5e>
 800b300:	68b1      	ldr	r1, [r6, #8]
 800b302:	4339      	orrs	r1, r7
 800b304:	60b1      	str	r1, [r6, #8]
 800b306:	1c51      	adds	r1, r2, #1
 800b308:	6059      	str	r1, [r3, #4]
 800b30a:	3202      	adds	r2, #2
 800b30c:	9900      	ldr	r1, [sp, #0]
 800b30e:	0092      	lsls	r2, r2, #2
 800b310:	50d1      	str	r1, [r2, r3]
 800b312:	f7fe f894 	bl	800943e <__retarget_lock_release_recursive>
 800b316:	2000      	movs	r0, #0
 800b318:	e7dd      	b.n	800b2d6 <__register_exitproc+0x2e>
 800b31a:	46c0      	nop			; (mov r8, r8)
 800b31c:	20000144 	.word	0x20000144
 800b320:	2000316c 	.word	0x2000316c
 800b324:	200031a4 	.word	0x200031a4

0800b328 <quorem>:
 800b328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b32a:	6902      	ldr	r2, [r0, #16]
 800b32c:	690b      	ldr	r3, [r1, #16]
 800b32e:	b089      	sub	sp, #36	; 0x24
 800b330:	0007      	movs	r7, r0
 800b332:	9104      	str	r1, [sp, #16]
 800b334:	2000      	movs	r0, #0
 800b336:	429a      	cmp	r2, r3
 800b338:	db69      	blt.n	800b40e <quorem+0xe6>
 800b33a:	3b01      	subs	r3, #1
 800b33c:	009c      	lsls	r4, r3, #2
 800b33e:	9301      	str	r3, [sp, #4]
 800b340:	000b      	movs	r3, r1
 800b342:	3314      	adds	r3, #20
 800b344:	9306      	str	r3, [sp, #24]
 800b346:	191b      	adds	r3, r3, r4
 800b348:	9305      	str	r3, [sp, #20]
 800b34a:	003b      	movs	r3, r7
 800b34c:	3314      	adds	r3, #20
 800b34e:	9303      	str	r3, [sp, #12]
 800b350:	191c      	adds	r4, r3, r4
 800b352:	9b05      	ldr	r3, [sp, #20]
 800b354:	6826      	ldr	r6, [r4, #0]
 800b356:	681d      	ldr	r5, [r3, #0]
 800b358:	0030      	movs	r0, r6
 800b35a:	3501      	adds	r5, #1
 800b35c:	0029      	movs	r1, r5
 800b35e:	f7f4 feef 	bl	8000140 <__udivsi3>
 800b362:	9002      	str	r0, [sp, #8]
 800b364:	42ae      	cmp	r6, r5
 800b366:	d329      	bcc.n	800b3bc <quorem+0x94>
 800b368:	9b06      	ldr	r3, [sp, #24]
 800b36a:	2600      	movs	r6, #0
 800b36c:	469c      	mov	ip, r3
 800b36e:	9d03      	ldr	r5, [sp, #12]
 800b370:	9606      	str	r6, [sp, #24]
 800b372:	4662      	mov	r2, ip
 800b374:	ca08      	ldmia	r2!, {r3}
 800b376:	6828      	ldr	r0, [r5, #0]
 800b378:	4694      	mov	ip, r2
 800b37a:	9a02      	ldr	r2, [sp, #8]
 800b37c:	b299      	uxth	r1, r3
 800b37e:	4351      	muls	r1, r2
 800b380:	0c1b      	lsrs	r3, r3, #16
 800b382:	4353      	muls	r3, r2
 800b384:	1989      	adds	r1, r1, r6
 800b386:	0c0a      	lsrs	r2, r1, #16
 800b388:	189b      	adds	r3, r3, r2
 800b38a:	9307      	str	r3, [sp, #28]
 800b38c:	0c1e      	lsrs	r6, r3, #16
 800b38e:	9b06      	ldr	r3, [sp, #24]
 800b390:	b282      	uxth	r2, r0
 800b392:	18d2      	adds	r2, r2, r3
 800b394:	466b      	mov	r3, sp
 800b396:	b289      	uxth	r1, r1
 800b398:	8b9b      	ldrh	r3, [r3, #28]
 800b39a:	1a52      	subs	r2, r2, r1
 800b39c:	0c01      	lsrs	r1, r0, #16
 800b39e:	1ac9      	subs	r1, r1, r3
 800b3a0:	1413      	asrs	r3, r2, #16
 800b3a2:	18cb      	adds	r3, r1, r3
 800b3a4:	1419      	asrs	r1, r3, #16
 800b3a6:	b292      	uxth	r2, r2
 800b3a8:	041b      	lsls	r3, r3, #16
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	c508      	stmia	r5!, {r3}
 800b3ae:	9b05      	ldr	r3, [sp, #20]
 800b3b0:	9106      	str	r1, [sp, #24]
 800b3b2:	4563      	cmp	r3, ip
 800b3b4:	d2dd      	bcs.n	800b372 <quorem+0x4a>
 800b3b6:	6823      	ldr	r3, [r4, #0]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d030      	beq.n	800b41e <quorem+0xf6>
 800b3bc:	0038      	movs	r0, r7
 800b3be:	9904      	ldr	r1, [sp, #16]
 800b3c0:	f001 f86c 	bl	800c49c <__mcmp>
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	db21      	blt.n	800b40c <quorem+0xe4>
 800b3c8:	0038      	movs	r0, r7
 800b3ca:	2600      	movs	r6, #0
 800b3cc:	9b02      	ldr	r3, [sp, #8]
 800b3ce:	9c04      	ldr	r4, [sp, #16]
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	9302      	str	r3, [sp, #8]
 800b3d4:	3014      	adds	r0, #20
 800b3d6:	3414      	adds	r4, #20
 800b3d8:	6803      	ldr	r3, [r0, #0]
 800b3da:	cc02      	ldmia	r4!, {r1}
 800b3dc:	b29d      	uxth	r5, r3
 800b3de:	19ad      	adds	r5, r5, r6
 800b3e0:	b28a      	uxth	r2, r1
 800b3e2:	1aaa      	subs	r2, r5, r2
 800b3e4:	0c09      	lsrs	r1, r1, #16
 800b3e6:	0c1b      	lsrs	r3, r3, #16
 800b3e8:	1a5b      	subs	r3, r3, r1
 800b3ea:	1411      	asrs	r1, r2, #16
 800b3ec:	185b      	adds	r3, r3, r1
 800b3ee:	141e      	asrs	r6, r3, #16
 800b3f0:	b292      	uxth	r2, r2
 800b3f2:	041b      	lsls	r3, r3, #16
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	c008      	stmia	r0!, {r3}
 800b3f8:	9b05      	ldr	r3, [sp, #20]
 800b3fa:	42a3      	cmp	r3, r4
 800b3fc:	d2ec      	bcs.n	800b3d8 <quorem+0xb0>
 800b3fe:	9b01      	ldr	r3, [sp, #4]
 800b400:	9a03      	ldr	r2, [sp, #12]
 800b402:	009b      	lsls	r3, r3, #2
 800b404:	18d3      	adds	r3, r2, r3
 800b406:	681a      	ldr	r2, [r3, #0]
 800b408:	2a00      	cmp	r2, #0
 800b40a:	d015      	beq.n	800b438 <quorem+0x110>
 800b40c:	9802      	ldr	r0, [sp, #8]
 800b40e:	b009      	add	sp, #36	; 0x24
 800b410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b412:	6823      	ldr	r3, [r4, #0]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d106      	bne.n	800b426 <quorem+0xfe>
 800b418:	9b01      	ldr	r3, [sp, #4]
 800b41a:	3b01      	subs	r3, #1
 800b41c:	9301      	str	r3, [sp, #4]
 800b41e:	9b03      	ldr	r3, [sp, #12]
 800b420:	3c04      	subs	r4, #4
 800b422:	42a3      	cmp	r3, r4
 800b424:	d3f5      	bcc.n	800b412 <quorem+0xea>
 800b426:	9b01      	ldr	r3, [sp, #4]
 800b428:	613b      	str	r3, [r7, #16]
 800b42a:	e7c7      	b.n	800b3bc <quorem+0x94>
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	2a00      	cmp	r2, #0
 800b430:	d106      	bne.n	800b440 <quorem+0x118>
 800b432:	9a01      	ldr	r2, [sp, #4]
 800b434:	3a01      	subs	r2, #1
 800b436:	9201      	str	r2, [sp, #4]
 800b438:	9a03      	ldr	r2, [sp, #12]
 800b43a:	3b04      	subs	r3, #4
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d3f5      	bcc.n	800b42c <quorem+0x104>
 800b440:	9b01      	ldr	r3, [sp, #4]
 800b442:	613b      	str	r3, [r7, #16]
 800b444:	e7e2      	b.n	800b40c <quorem+0xe4>
	...

0800b448 <_dtoa_r>:
 800b448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b44a:	0014      	movs	r4, r2
 800b44c:	001d      	movs	r5, r3
 800b44e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800b450:	b09d      	sub	sp, #116	; 0x74
 800b452:	9408      	str	r4, [sp, #32]
 800b454:	9509      	str	r5, [sp, #36]	; 0x24
 800b456:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800b458:	9004      	str	r0, [sp, #16]
 800b45a:	2900      	cmp	r1, #0
 800b45c:	d009      	beq.n	800b472 <_dtoa_r+0x2a>
 800b45e:	2301      	movs	r3, #1
 800b460:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b462:	4093      	lsls	r3, r2
 800b464:	604a      	str	r2, [r1, #4]
 800b466:	608b      	str	r3, [r1, #8]
 800b468:	f000 fe0a 	bl	800c080 <_Bfree>
 800b46c:	2300      	movs	r3, #0
 800b46e:	9a04      	ldr	r2, [sp, #16]
 800b470:	6393      	str	r3, [r2, #56]	; 0x38
 800b472:	2d00      	cmp	r5, #0
 800b474:	da1e      	bge.n	800b4b4 <_dtoa_r+0x6c>
 800b476:	2301      	movs	r3, #1
 800b478:	6033      	str	r3, [r6, #0]
 800b47a:	006b      	lsls	r3, r5, #1
 800b47c:	085b      	lsrs	r3, r3, #1
 800b47e:	9309      	str	r3, [sp, #36]	; 0x24
 800b480:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b482:	4bb5      	ldr	r3, [pc, #724]	; (800b758 <_dtoa_r+0x310>)
 800b484:	4ab4      	ldr	r2, [pc, #720]	; (800b758 <_dtoa_r+0x310>)
 800b486:	403b      	ands	r3, r7
 800b488:	4293      	cmp	r3, r2
 800b48a:	d116      	bne.n	800b4ba <_dtoa_r+0x72>
 800b48c:	4bb3      	ldr	r3, [pc, #716]	; (800b75c <_dtoa_r+0x314>)
 800b48e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b490:	6013      	str	r3, [r2, #0]
 800b492:	033b      	lsls	r3, r7, #12
 800b494:	0b1b      	lsrs	r3, r3, #12
 800b496:	4323      	orrs	r3, r4
 800b498:	d101      	bne.n	800b49e <_dtoa_r+0x56>
 800b49a:	f000 fdb2 	bl	800c002 <_dtoa_r+0xbba>
 800b49e:	4bb0      	ldr	r3, [pc, #704]	; (800b760 <_dtoa_r+0x318>)
 800b4a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b4a2:	9306      	str	r3, [sp, #24]
 800b4a4:	2a00      	cmp	r2, #0
 800b4a6:	d002      	beq.n	800b4ae <_dtoa_r+0x66>
 800b4a8:	4bae      	ldr	r3, [pc, #696]	; (800b764 <_dtoa_r+0x31c>)
 800b4aa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b4ac:	6013      	str	r3, [r2, #0]
 800b4ae:	9806      	ldr	r0, [sp, #24]
 800b4b0:	b01d      	add	sp, #116	; 0x74
 800b4b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	6033      	str	r3, [r6, #0]
 800b4b8:	e7e2      	b.n	800b480 <_dtoa_r+0x38>
 800b4ba:	9a08      	ldr	r2, [sp, #32]
 800b4bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4be:	9210      	str	r2, [sp, #64]	; 0x40
 800b4c0:	9311      	str	r3, [sp, #68]	; 0x44
 800b4c2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b4c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	f7f4 ffbf 	bl	800044c <__aeabi_dcmpeq>
 800b4ce:	1e06      	subs	r6, r0, #0
 800b4d0:	d009      	beq.n	800b4e6 <_dtoa_r+0x9e>
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b4d6:	6013      	str	r3, [r2, #0]
 800b4d8:	4ba3      	ldr	r3, [pc, #652]	; (800b768 <_dtoa_r+0x320>)
 800b4da:	9306      	str	r3, [sp, #24]
 800b4dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d0e5      	beq.n	800b4ae <_dtoa_r+0x66>
 800b4e2:	4ba2      	ldr	r3, [pc, #648]	; (800b76c <_dtoa_r+0x324>)
 800b4e4:	e7e1      	b.n	800b4aa <_dtoa_r+0x62>
 800b4e6:	ab1a      	add	r3, sp, #104	; 0x68
 800b4e8:	9301      	str	r3, [sp, #4]
 800b4ea:	ab1b      	add	r3, sp, #108	; 0x6c
 800b4ec:	9300      	str	r3, [sp, #0]
 800b4ee:	9804      	ldr	r0, [sp, #16]
 800b4f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b4f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b4f4:	f001 f886 	bl	800c604 <__d2b>
 800b4f8:	007a      	lsls	r2, r7, #1
 800b4fa:	9005      	str	r0, [sp, #20]
 800b4fc:	0d52      	lsrs	r2, r2, #21
 800b4fe:	d100      	bne.n	800b502 <_dtoa_r+0xba>
 800b500:	e07b      	b.n	800b5fa <_dtoa_r+0x1b2>
 800b502:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b504:	9617      	str	r6, [sp, #92]	; 0x5c
 800b506:	0319      	lsls	r1, r3, #12
 800b508:	4b99      	ldr	r3, [pc, #612]	; (800b770 <_dtoa_r+0x328>)
 800b50a:	0b09      	lsrs	r1, r1, #12
 800b50c:	430b      	orrs	r3, r1
 800b50e:	4999      	ldr	r1, [pc, #612]	; (800b774 <_dtoa_r+0x32c>)
 800b510:	1857      	adds	r7, r2, r1
 800b512:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b514:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b516:	0019      	movs	r1, r3
 800b518:	2200      	movs	r2, #0
 800b51a:	4b97      	ldr	r3, [pc, #604]	; (800b778 <_dtoa_r+0x330>)
 800b51c:	f7f6 fcf0 	bl	8001f00 <__aeabi_dsub>
 800b520:	4a96      	ldr	r2, [pc, #600]	; (800b77c <_dtoa_r+0x334>)
 800b522:	4b97      	ldr	r3, [pc, #604]	; (800b780 <_dtoa_r+0x338>)
 800b524:	f7f6 fa2a 	bl	800197c <__aeabi_dmul>
 800b528:	4a96      	ldr	r2, [pc, #600]	; (800b784 <_dtoa_r+0x33c>)
 800b52a:	4b97      	ldr	r3, [pc, #604]	; (800b788 <_dtoa_r+0x340>)
 800b52c:	f7f5 facc 	bl	8000ac8 <__aeabi_dadd>
 800b530:	0004      	movs	r4, r0
 800b532:	0038      	movs	r0, r7
 800b534:	000d      	movs	r5, r1
 800b536:	f7f7 f8b9 	bl	80026ac <__aeabi_i2d>
 800b53a:	4a94      	ldr	r2, [pc, #592]	; (800b78c <_dtoa_r+0x344>)
 800b53c:	4b94      	ldr	r3, [pc, #592]	; (800b790 <_dtoa_r+0x348>)
 800b53e:	f7f6 fa1d 	bl	800197c <__aeabi_dmul>
 800b542:	0002      	movs	r2, r0
 800b544:	000b      	movs	r3, r1
 800b546:	0020      	movs	r0, r4
 800b548:	0029      	movs	r1, r5
 800b54a:	f7f5 fabd 	bl	8000ac8 <__aeabi_dadd>
 800b54e:	0004      	movs	r4, r0
 800b550:	000d      	movs	r5, r1
 800b552:	f7f7 f875 	bl	8002640 <__aeabi_d2iz>
 800b556:	2200      	movs	r2, #0
 800b558:	9003      	str	r0, [sp, #12]
 800b55a:	2300      	movs	r3, #0
 800b55c:	0020      	movs	r0, r4
 800b55e:	0029      	movs	r1, r5
 800b560:	f7f4 ff7a 	bl	8000458 <__aeabi_dcmplt>
 800b564:	2800      	cmp	r0, #0
 800b566:	d00b      	beq.n	800b580 <_dtoa_r+0x138>
 800b568:	9803      	ldr	r0, [sp, #12]
 800b56a:	f7f7 f89f 	bl	80026ac <__aeabi_i2d>
 800b56e:	002b      	movs	r3, r5
 800b570:	0022      	movs	r2, r4
 800b572:	f7f4 ff6b 	bl	800044c <__aeabi_dcmpeq>
 800b576:	4243      	negs	r3, r0
 800b578:	4158      	adcs	r0, r3
 800b57a:	9b03      	ldr	r3, [sp, #12]
 800b57c:	1a1b      	subs	r3, r3, r0
 800b57e:	9303      	str	r3, [sp, #12]
 800b580:	2301      	movs	r3, #1
 800b582:	9316      	str	r3, [sp, #88]	; 0x58
 800b584:	9b03      	ldr	r3, [sp, #12]
 800b586:	2b16      	cmp	r3, #22
 800b588:	d810      	bhi.n	800b5ac <_dtoa_r+0x164>
 800b58a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b58c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b58e:	9a03      	ldr	r2, [sp, #12]
 800b590:	4b80      	ldr	r3, [pc, #512]	; (800b794 <_dtoa_r+0x34c>)
 800b592:	00d2      	lsls	r2, r2, #3
 800b594:	189b      	adds	r3, r3, r2
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	f7f4 ff5d 	bl	8000458 <__aeabi_dcmplt>
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	d047      	beq.n	800b632 <_dtoa_r+0x1ea>
 800b5a2:	9b03      	ldr	r3, [sp, #12]
 800b5a4:	3b01      	subs	r3, #1
 800b5a6:	9303      	str	r3, [sp, #12]
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	9316      	str	r3, [sp, #88]	; 0x58
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b5b0:	920a      	str	r2, [sp, #40]	; 0x28
 800b5b2:	1bdb      	subs	r3, r3, r7
 800b5b4:	1e5a      	subs	r2, r3, #1
 800b5b6:	d53e      	bpl.n	800b636 <_dtoa_r+0x1ee>
 800b5b8:	2201      	movs	r2, #1
 800b5ba:	1ad3      	subs	r3, r2, r3
 800b5bc:	930a      	str	r3, [sp, #40]	; 0x28
 800b5be:	2300      	movs	r3, #0
 800b5c0:	930c      	str	r3, [sp, #48]	; 0x30
 800b5c2:	9b03      	ldr	r3, [sp, #12]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	db38      	blt.n	800b63a <_dtoa_r+0x1f2>
 800b5c8:	9a03      	ldr	r2, [sp, #12]
 800b5ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5cc:	4694      	mov	ip, r2
 800b5ce:	4463      	add	r3, ip
 800b5d0:	930c      	str	r3, [sp, #48]	; 0x30
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	9213      	str	r2, [sp, #76]	; 0x4c
 800b5d6:	930d      	str	r3, [sp, #52]	; 0x34
 800b5d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b5da:	2401      	movs	r4, #1
 800b5dc:	2b09      	cmp	r3, #9
 800b5de:	d867      	bhi.n	800b6b0 <_dtoa_r+0x268>
 800b5e0:	2b05      	cmp	r3, #5
 800b5e2:	dd02      	ble.n	800b5ea <_dtoa_r+0x1a2>
 800b5e4:	2400      	movs	r4, #0
 800b5e6:	3b04      	subs	r3, #4
 800b5e8:	9322      	str	r3, [sp, #136]	; 0x88
 800b5ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b5ec:	1e98      	subs	r0, r3, #2
 800b5ee:	2803      	cmp	r0, #3
 800b5f0:	d867      	bhi.n	800b6c2 <_dtoa_r+0x27a>
 800b5f2:	f7f4 fd91 	bl	8000118 <__gnu_thumb1_case_uqi>
 800b5f6:	3a2b      	.short	0x3a2b
 800b5f8:	5b38      	.short	0x5b38
 800b5fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b5fc:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800b5fe:	18f6      	adds	r6, r6, r3
 800b600:	4b65      	ldr	r3, [pc, #404]	; (800b798 <_dtoa_r+0x350>)
 800b602:	18f2      	adds	r2, r6, r3
 800b604:	2a20      	cmp	r2, #32
 800b606:	dd0f      	ble.n	800b628 <_dtoa_r+0x1e0>
 800b608:	2340      	movs	r3, #64	; 0x40
 800b60a:	1a9b      	subs	r3, r3, r2
 800b60c:	409f      	lsls	r7, r3
 800b60e:	4b63      	ldr	r3, [pc, #396]	; (800b79c <_dtoa_r+0x354>)
 800b610:	0038      	movs	r0, r7
 800b612:	18f3      	adds	r3, r6, r3
 800b614:	40dc      	lsrs	r4, r3
 800b616:	4320      	orrs	r0, r4
 800b618:	f7f7 f878 	bl	800270c <__aeabi_ui2d>
 800b61c:	2201      	movs	r2, #1
 800b61e:	4b60      	ldr	r3, [pc, #384]	; (800b7a0 <_dtoa_r+0x358>)
 800b620:	1e77      	subs	r7, r6, #1
 800b622:	18cb      	adds	r3, r1, r3
 800b624:	9217      	str	r2, [sp, #92]	; 0x5c
 800b626:	e776      	b.n	800b516 <_dtoa_r+0xce>
 800b628:	2320      	movs	r3, #32
 800b62a:	0020      	movs	r0, r4
 800b62c:	1a9b      	subs	r3, r3, r2
 800b62e:	4098      	lsls	r0, r3
 800b630:	e7f2      	b.n	800b618 <_dtoa_r+0x1d0>
 800b632:	9016      	str	r0, [sp, #88]	; 0x58
 800b634:	e7ba      	b.n	800b5ac <_dtoa_r+0x164>
 800b636:	920c      	str	r2, [sp, #48]	; 0x30
 800b638:	e7c3      	b.n	800b5c2 <_dtoa_r+0x17a>
 800b63a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b63c:	9a03      	ldr	r2, [sp, #12]
 800b63e:	1a9b      	subs	r3, r3, r2
 800b640:	930a      	str	r3, [sp, #40]	; 0x28
 800b642:	4253      	negs	r3, r2
 800b644:	930d      	str	r3, [sp, #52]	; 0x34
 800b646:	2300      	movs	r3, #0
 800b648:	9313      	str	r3, [sp, #76]	; 0x4c
 800b64a:	e7c5      	b.n	800b5d8 <_dtoa_r+0x190>
 800b64c:	2300      	movs	r3, #0
 800b64e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b650:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b652:	930b      	str	r3, [sp, #44]	; 0x2c
 800b654:	9307      	str	r3, [sp, #28]
 800b656:	2b00      	cmp	r3, #0
 800b658:	dc13      	bgt.n	800b682 <_dtoa_r+0x23a>
 800b65a:	2301      	movs	r3, #1
 800b65c:	001a      	movs	r2, r3
 800b65e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b660:	9307      	str	r3, [sp, #28]
 800b662:	9223      	str	r2, [sp, #140]	; 0x8c
 800b664:	e00d      	b.n	800b682 <_dtoa_r+0x23a>
 800b666:	2301      	movs	r3, #1
 800b668:	e7f1      	b.n	800b64e <_dtoa_r+0x206>
 800b66a:	2300      	movs	r3, #0
 800b66c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b66e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b670:	4694      	mov	ip, r2
 800b672:	9b03      	ldr	r3, [sp, #12]
 800b674:	4463      	add	r3, ip
 800b676:	930b      	str	r3, [sp, #44]	; 0x2c
 800b678:	3301      	adds	r3, #1
 800b67a:	9307      	str	r3, [sp, #28]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	dc00      	bgt.n	800b682 <_dtoa_r+0x23a>
 800b680:	2301      	movs	r3, #1
 800b682:	2100      	movs	r1, #0
 800b684:	2204      	movs	r2, #4
 800b686:	0010      	movs	r0, r2
 800b688:	3014      	adds	r0, #20
 800b68a:	4298      	cmp	r0, r3
 800b68c:	d91d      	bls.n	800b6ca <_dtoa_r+0x282>
 800b68e:	9b04      	ldr	r3, [sp, #16]
 800b690:	0018      	movs	r0, r3
 800b692:	63d9      	str	r1, [r3, #60]	; 0x3c
 800b694:	f000 fccc 	bl	800c030 <_Balloc>
 800b698:	9006      	str	r0, [sp, #24]
 800b69a:	2800      	cmp	r0, #0
 800b69c:	d118      	bne.n	800b6d0 <_dtoa_r+0x288>
 800b69e:	21b0      	movs	r1, #176	; 0xb0
 800b6a0:	4b40      	ldr	r3, [pc, #256]	; (800b7a4 <_dtoa_r+0x35c>)
 800b6a2:	4841      	ldr	r0, [pc, #260]	; (800b7a8 <_dtoa_r+0x360>)
 800b6a4:	9a06      	ldr	r2, [sp, #24]
 800b6a6:	31ff      	adds	r1, #255	; 0xff
 800b6a8:	f001 f8ac 	bl	800c804 <__assert_func>
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	e7dd      	b.n	800b66c <_dtoa_r+0x224>
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	940f      	str	r4, [sp, #60]	; 0x3c
 800b6b4:	9322      	str	r3, [sp, #136]	; 0x88
 800b6b6:	3b01      	subs	r3, #1
 800b6b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6ba:	9307      	str	r3, [sp, #28]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	3313      	adds	r3, #19
 800b6c0:	e7cf      	b.n	800b662 <_dtoa_r+0x21a>
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6c6:	3b02      	subs	r3, #2
 800b6c8:	e7f6      	b.n	800b6b8 <_dtoa_r+0x270>
 800b6ca:	3101      	adds	r1, #1
 800b6cc:	0052      	lsls	r2, r2, #1
 800b6ce:	e7da      	b.n	800b686 <_dtoa_r+0x23e>
 800b6d0:	9b04      	ldr	r3, [sp, #16]
 800b6d2:	9a06      	ldr	r2, [sp, #24]
 800b6d4:	639a      	str	r2, [r3, #56]	; 0x38
 800b6d6:	9b07      	ldr	r3, [sp, #28]
 800b6d8:	2b0e      	cmp	r3, #14
 800b6da:	d900      	bls.n	800b6de <_dtoa_r+0x296>
 800b6dc:	e0e3      	b.n	800b8a6 <_dtoa_r+0x45e>
 800b6de:	2c00      	cmp	r4, #0
 800b6e0:	d100      	bne.n	800b6e4 <_dtoa_r+0x29c>
 800b6e2:	e0e0      	b.n	800b8a6 <_dtoa_r+0x45e>
 800b6e4:	9b03      	ldr	r3, [sp, #12]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	dd62      	ble.n	800b7b0 <_dtoa_r+0x368>
 800b6ea:	210f      	movs	r1, #15
 800b6ec:	9a03      	ldr	r2, [sp, #12]
 800b6ee:	4b29      	ldr	r3, [pc, #164]	; (800b794 <_dtoa_r+0x34c>)
 800b6f0:	400a      	ands	r2, r1
 800b6f2:	00d2      	lsls	r2, r2, #3
 800b6f4:	189b      	adds	r3, r3, r2
 800b6f6:	681e      	ldr	r6, [r3, #0]
 800b6f8:	685f      	ldr	r7, [r3, #4]
 800b6fa:	9b03      	ldr	r3, [sp, #12]
 800b6fc:	2402      	movs	r4, #2
 800b6fe:	111d      	asrs	r5, r3, #4
 800b700:	05db      	lsls	r3, r3, #23
 800b702:	d50a      	bpl.n	800b71a <_dtoa_r+0x2d2>
 800b704:	4b29      	ldr	r3, [pc, #164]	; (800b7ac <_dtoa_r+0x364>)
 800b706:	400d      	ands	r5, r1
 800b708:	6a1a      	ldr	r2, [r3, #32]
 800b70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b70c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b70e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b710:	f7f5 fd3a 	bl	8001188 <__aeabi_ddiv>
 800b714:	9008      	str	r0, [sp, #32]
 800b716:	9109      	str	r1, [sp, #36]	; 0x24
 800b718:	3401      	adds	r4, #1
 800b71a:	4b24      	ldr	r3, [pc, #144]	; (800b7ac <_dtoa_r+0x364>)
 800b71c:	930e      	str	r3, [sp, #56]	; 0x38
 800b71e:	2d00      	cmp	r5, #0
 800b720:	d108      	bne.n	800b734 <_dtoa_r+0x2ec>
 800b722:	9808      	ldr	r0, [sp, #32]
 800b724:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b726:	0032      	movs	r2, r6
 800b728:	003b      	movs	r3, r7
 800b72a:	f7f5 fd2d 	bl	8001188 <__aeabi_ddiv>
 800b72e:	9008      	str	r0, [sp, #32]
 800b730:	9109      	str	r1, [sp, #36]	; 0x24
 800b732:	e058      	b.n	800b7e6 <_dtoa_r+0x39e>
 800b734:	2301      	movs	r3, #1
 800b736:	421d      	tst	r5, r3
 800b738:	d009      	beq.n	800b74e <_dtoa_r+0x306>
 800b73a:	18e4      	adds	r4, r4, r3
 800b73c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b73e:	0030      	movs	r0, r6
 800b740:	681a      	ldr	r2, [r3, #0]
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	0039      	movs	r1, r7
 800b746:	f7f6 f919 	bl	800197c <__aeabi_dmul>
 800b74a:	0006      	movs	r6, r0
 800b74c:	000f      	movs	r7, r1
 800b74e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b750:	106d      	asrs	r5, r5, #1
 800b752:	3308      	adds	r3, #8
 800b754:	e7e2      	b.n	800b71c <_dtoa_r+0x2d4>
 800b756:	46c0      	nop			; (mov r8, r8)
 800b758:	7ff00000 	.word	0x7ff00000
 800b75c:	0000270f 	.word	0x0000270f
 800b760:	0800e633 	.word	0x0800e633
 800b764:	0800e636 	.word	0x0800e636
 800b768:	0800e608 	.word	0x0800e608
 800b76c:	0800e609 	.word	0x0800e609
 800b770:	3ff00000 	.word	0x3ff00000
 800b774:	fffffc01 	.word	0xfffffc01
 800b778:	3ff80000 	.word	0x3ff80000
 800b77c:	636f4361 	.word	0x636f4361
 800b780:	3fd287a7 	.word	0x3fd287a7
 800b784:	8b60c8b3 	.word	0x8b60c8b3
 800b788:	3fc68a28 	.word	0x3fc68a28
 800b78c:	509f79fb 	.word	0x509f79fb
 800b790:	3fd34413 	.word	0x3fd34413
 800b794:	0800e728 	.word	0x0800e728
 800b798:	00000432 	.word	0x00000432
 800b79c:	00000412 	.word	0x00000412
 800b7a0:	fe100000 	.word	0xfe100000
 800b7a4:	0800e637 	.word	0x0800e637
 800b7a8:	0800e648 	.word	0x0800e648
 800b7ac:	0800e700 	.word	0x0800e700
 800b7b0:	9b03      	ldr	r3, [sp, #12]
 800b7b2:	2402      	movs	r4, #2
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d016      	beq.n	800b7e6 <_dtoa_r+0x39e>
 800b7b8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b7ba:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b7bc:	220f      	movs	r2, #15
 800b7be:	425d      	negs	r5, r3
 800b7c0:	402a      	ands	r2, r5
 800b7c2:	4bdd      	ldr	r3, [pc, #884]	; (800bb38 <_dtoa_r+0x6f0>)
 800b7c4:	00d2      	lsls	r2, r2, #3
 800b7c6:	189b      	adds	r3, r3, r2
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	f7f6 f8d6 	bl	800197c <__aeabi_dmul>
 800b7d0:	2701      	movs	r7, #1
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	9008      	str	r0, [sp, #32]
 800b7d6:	9109      	str	r1, [sp, #36]	; 0x24
 800b7d8:	4ed8      	ldr	r6, [pc, #864]	; (800bb3c <_dtoa_r+0x6f4>)
 800b7da:	112d      	asrs	r5, r5, #4
 800b7dc:	2d00      	cmp	r5, #0
 800b7de:	d000      	beq.n	800b7e2 <_dtoa_r+0x39a>
 800b7e0:	e091      	b.n	800b906 <_dtoa_r+0x4be>
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d1a3      	bne.n	800b72e <_dtoa_r+0x2e6>
 800b7e6:	9e08      	ldr	r6, [sp, #32]
 800b7e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b7ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d100      	bne.n	800b7f2 <_dtoa_r+0x3aa>
 800b7f0:	e094      	b.n	800b91c <_dtoa_r+0x4d4>
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	0030      	movs	r0, r6
 800b7f6:	0039      	movs	r1, r7
 800b7f8:	4bd1      	ldr	r3, [pc, #836]	; (800bb40 <_dtoa_r+0x6f8>)
 800b7fa:	f7f4 fe2d 	bl	8000458 <__aeabi_dcmplt>
 800b7fe:	2800      	cmp	r0, #0
 800b800:	d100      	bne.n	800b804 <_dtoa_r+0x3bc>
 800b802:	e08b      	b.n	800b91c <_dtoa_r+0x4d4>
 800b804:	9b07      	ldr	r3, [sp, #28]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d100      	bne.n	800b80c <_dtoa_r+0x3c4>
 800b80a:	e087      	b.n	800b91c <_dtoa_r+0x4d4>
 800b80c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b80e:	2b00      	cmp	r3, #0
 800b810:	dd45      	ble.n	800b89e <_dtoa_r+0x456>
 800b812:	9b03      	ldr	r3, [sp, #12]
 800b814:	2200      	movs	r2, #0
 800b816:	3b01      	subs	r3, #1
 800b818:	930e      	str	r3, [sp, #56]	; 0x38
 800b81a:	0030      	movs	r0, r6
 800b81c:	4bc9      	ldr	r3, [pc, #804]	; (800bb44 <_dtoa_r+0x6fc>)
 800b81e:	0039      	movs	r1, r7
 800b820:	f7f6 f8ac 	bl	800197c <__aeabi_dmul>
 800b824:	9008      	str	r0, [sp, #32]
 800b826:	9109      	str	r1, [sp, #36]	; 0x24
 800b828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b82a:	3401      	adds	r4, #1
 800b82c:	0020      	movs	r0, r4
 800b82e:	9e08      	ldr	r6, [sp, #32]
 800b830:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b832:	9312      	str	r3, [sp, #72]	; 0x48
 800b834:	f7f6 ff3a 	bl	80026ac <__aeabi_i2d>
 800b838:	0032      	movs	r2, r6
 800b83a:	003b      	movs	r3, r7
 800b83c:	f7f6 f89e 	bl	800197c <__aeabi_dmul>
 800b840:	2200      	movs	r2, #0
 800b842:	4bc1      	ldr	r3, [pc, #772]	; (800bb48 <_dtoa_r+0x700>)
 800b844:	f7f5 f940 	bl	8000ac8 <__aeabi_dadd>
 800b848:	4ac0      	ldr	r2, [pc, #768]	; (800bb4c <_dtoa_r+0x704>)
 800b84a:	9014      	str	r0, [sp, #80]	; 0x50
 800b84c:	9115      	str	r1, [sp, #84]	; 0x54
 800b84e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b850:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800b852:	4694      	mov	ip, r2
 800b854:	9308      	str	r3, [sp, #32]
 800b856:	9409      	str	r4, [sp, #36]	; 0x24
 800b858:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b85a:	4463      	add	r3, ip
 800b85c:	9318      	str	r3, [sp, #96]	; 0x60
 800b85e:	9309      	str	r3, [sp, #36]	; 0x24
 800b860:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b862:	2b00      	cmp	r3, #0
 800b864:	d15e      	bne.n	800b924 <_dtoa_r+0x4dc>
 800b866:	2200      	movs	r2, #0
 800b868:	4bb9      	ldr	r3, [pc, #740]	; (800bb50 <_dtoa_r+0x708>)
 800b86a:	0030      	movs	r0, r6
 800b86c:	0039      	movs	r1, r7
 800b86e:	f7f6 fb47 	bl	8001f00 <__aeabi_dsub>
 800b872:	9a08      	ldr	r2, [sp, #32]
 800b874:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b876:	0004      	movs	r4, r0
 800b878:	000d      	movs	r5, r1
 800b87a:	f7f4 fe01 	bl	8000480 <__aeabi_dcmpgt>
 800b87e:	2800      	cmp	r0, #0
 800b880:	d000      	beq.n	800b884 <_dtoa_r+0x43c>
 800b882:	e2b3      	b.n	800bdec <_dtoa_r+0x9a4>
 800b884:	48b3      	ldr	r0, [pc, #716]	; (800bb54 <_dtoa_r+0x70c>)
 800b886:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b888:	4684      	mov	ip, r0
 800b88a:	4461      	add	r1, ip
 800b88c:	000b      	movs	r3, r1
 800b88e:	0020      	movs	r0, r4
 800b890:	0029      	movs	r1, r5
 800b892:	9a08      	ldr	r2, [sp, #32]
 800b894:	f7f4 fde0 	bl	8000458 <__aeabi_dcmplt>
 800b898:	2800      	cmp	r0, #0
 800b89a:	d000      	beq.n	800b89e <_dtoa_r+0x456>
 800b89c:	e2a3      	b.n	800bde6 <_dtoa_r+0x99e>
 800b89e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b8a0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800b8a2:	9308      	str	r3, [sp, #32]
 800b8a4:	9409      	str	r4, [sp, #36]	; 0x24
 800b8a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	da00      	bge.n	800b8ae <_dtoa_r+0x466>
 800b8ac:	e179      	b.n	800bba2 <_dtoa_r+0x75a>
 800b8ae:	9a03      	ldr	r2, [sp, #12]
 800b8b0:	2a0e      	cmp	r2, #14
 800b8b2:	dd00      	ble.n	800b8b6 <_dtoa_r+0x46e>
 800b8b4:	e175      	b.n	800bba2 <_dtoa_r+0x75a>
 800b8b6:	4ba0      	ldr	r3, [pc, #640]	; (800bb38 <_dtoa_r+0x6f0>)
 800b8b8:	00d2      	lsls	r2, r2, #3
 800b8ba:	189b      	adds	r3, r3, r2
 800b8bc:	681e      	ldr	r6, [r3, #0]
 800b8be:	685f      	ldr	r7, [r3, #4]
 800b8c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	db00      	blt.n	800b8c8 <_dtoa_r+0x480>
 800b8c6:	e0e5      	b.n	800ba94 <_dtoa_r+0x64c>
 800b8c8:	9b07      	ldr	r3, [sp, #28]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	dd00      	ble.n	800b8d0 <_dtoa_r+0x488>
 800b8ce:	e0e1      	b.n	800ba94 <_dtoa_r+0x64c>
 800b8d0:	d000      	beq.n	800b8d4 <_dtoa_r+0x48c>
 800b8d2:	e288      	b.n	800bde6 <_dtoa_r+0x99e>
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	0030      	movs	r0, r6
 800b8d8:	0039      	movs	r1, r7
 800b8da:	4b9d      	ldr	r3, [pc, #628]	; (800bb50 <_dtoa_r+0x708>)
 800b8dc:	f7f6 f84e 	bl	800197c <__aeabi_dmul>
 800b8e0:	9a08      	ldr	r2, [sp, #32]
 800b8e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8e4:	f7f4 fdd6 	bl	8000494 <__aeabi_dcmpge>
 800b8e8:	9e07      	ldr	r6, [sp, #28]
 800b8ea:	0037      	movs	r7, r6
 800b8ec:	2800      	cmp	r0, #0
 800b8ee:	d000      	beq.n	800b8f2 <_dtoa_r+0x4aa>
 800b8f0:	e25f      	b.n	800bdb2 <_dtoa_r+0x96a>
 800b8f2:	9b06      	ldr	r3, [sp, #24]
 800b8f4:	9a06      	ldr	r2, [sp, #24]
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	9308      	str	r3, [sp, #32]
 800b8fa:	2331      	movs	r3, #49	; 0x31
 800b8fc:	7013      	strb	r3, [r2, #0]
 800b8fe:	9b03      	ldr	r3, [sp, #12]
 800b900:	3301      	adds	r3, #1
 800b902:	9303      	str	r3, [sp, #12]
 800b904:	e25a      	b.n	800bdbc <_dtoa_r+0x974>
 800b906:	423d      	tst	r5, r7
 800b908:	d005      	beq.n	800b916 <_dtoa_r+0x4ce>
 800b90a:	6832      	ldr	r2, [r6, #0]
 800b90c:	6873      	ldr	r3, [r6, #4]
 800b90e:	f7f6 f835 	bl	800197c <__aeabi_dmul>
 800b912:	003b      	movs	r3, r7
 800b914:	3401      	adds	r4, #1
 800b916:	106d      	asrs	r5, r5, #1
 800b918:	3608      	adds	r6, #8
 800b91a:	e75f      	b.n	800b7dc <_dtoa_r+0x394>
 800b91c:	9b03      	ldr	r3, [sp, #12]
 800b91e:	930e      	str	r3, [sp, #56]	; 0x38
 800b920:	9b07      	ldr	r3, [sp, #28]
 800b922:	e783      	b.n	800b82c <_dtoa_r+0x3e4>
 800b924:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b926:	4b84      	ldr	r3, [pc, #528]	; (800bb38 <_dtoa_r+0x6f0>)
 800b928:	3a01      	subs	r2, #1
 800b92a:	00d2      	lsls	r2, r2, #3
 800b92c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b92e:	189b      	adds	r3, r3, r2
 800b930:	9c08      	ldr	r4, [sp, #32]
 800b932:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	2900      	cmp	r1, #0
 800b93a:	d051      	beq.n	800b9e0 <_dtoa_r+0x598>
 800b93c:	2000      	movs	r0, #0
 800b93e:	4986      	ldr	r1, [pc, #536]	; (800bb58 <_dtoa_r+0x710>)
 800b940:	f7f5 fc22 	bl	8001188 <__aeabi_ddiv>
 800b944:	0022      	movs	r2, r4
 800b946:	002b      	movs	r3, r5
 800b948:	f7f6 fada 	bl	8001f00 <__aeabi_dsub>
 800b94c:	9a06      	ldr	r2, [sp, #24]
 800b94e:	0004      	movs	r4, r0
 800b950:	4694      	mov	ip, r2
 800b952:	000d      	movs	r5, r1
 800b954:	9b06      	ldr	r3, [sp, #24]
 800b956:	9314      	str	r3, [sp, #80]	; 0x50
 800b958:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b95a:	4463      	add	r3, ip
 800b95c:	9318      	str	r3, [sp, #96]	; 0x60
 800b95e:	0039      	movs	r1, r7
 800b960:	0030      	movs	r0, r6
 800b962:	f7f6 fe6d 	bl	8002640 <__aeabi_d2iz>
 800b966:	9012      	str	r0, [sp, #72]	; 0x48
 800b968:	f7f6 fea0 	bl	80026ac <__aeabi_i2d>
 800b96c:	0002      	movs	r2, r0
 800b96e:	000b      	movs	r3, r1
 800b970:	0030      	movs	r0, r6
 800b972:	0039      	movs	r1, r7
 800b974:	f7f6 fac4 	bl	8001f00 <__aeabi_dsub>
 800b978:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b97a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b97c:	3301      	adds	r3, #1
 800b97e:	9308      	str	r3, [sp, #32]
 800b980:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b982:	0006      	movs	r6, r0
 800b984:	3330      	adds	r3, #48	; 0x30
 800b986:	7013      	strb	r3, [r2, #0]
 800b988:	0022      	movs	r2, r4
 800b98a:	002b      	movs	r3, r5
 800b98c:	000f      	movs	r7, r1
 800b98e:	f7f4 fd63 	bl	8000458 <__aeabi_dcmplt>
 800b992:	2800      	cmp	r0, #0
 800b994:	d174      	bne.n	800ba80 <_dtoa_r+0x638>
 800b996:	0032      	movs	r2, r6
 800b998:	003b      	movs	r3, r7
 800b99a:	2000      	movs	r0, #0
 800b99c:	4968      	ldr	r1, [pc, #416]	; (800bb40 <_dtoa_r+0x6f8>)
 800b99e:	f7f6 faaf 	bl	8001f00 <__aeabi_dsub>
 800b9a2:	0022      	movs	r2, r4
 800b9a4:	002b      	movs	r3, r5
 800b9a6:	f7f4 fd57 	bl	8000458 <__aeabi_dcmplt>
 800b9aa:	2800      	cmp	r0, #0
 800b9ac:	d000      	beq.n	800b9b0 <_dtoa_r+0x568>
 800b9ae:	e0d7      	b.n	800bb60 <_dtoa_r+0x718>
 800b9b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b9b2:	9a08      	ldr	r2, [sp, #32]
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d100      	bne.n	800b9ba <_dtoa_r+0x572>
 800b9b8:	e771      	b.n	800b89e <_dtoa_r+0x456>
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	0020      	movs	r0, r4
 800b9be:	0029      	movs	r1, r5
 800b9c0:	4b60      	ldr	r3, [pc, #384]	; (800bb44 <_dtoa_r+0x6fc>)
 800b9c2:	f7f5 ffdb 	bl	800197c <__aeabi_dmul>
 800b9c6:	4b5f      	ldr	r3, [pc, #380]	; (800bb44 <_dtoa_r+0x6fc>)
 800b9c8:	0004      	movs	r4, r0
 800b9ca:	000d      	movs	r5, r1
 800b9cc:	0030      	movs	r0, r6
 800b9ce:	0039      	movs	r1, r7
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	f7f5 ffd3 	bl	800197c <__aeabi_dmul>
 800b9d6:	9b08      	ldr	r3, [sp, #32]
 800b9d8:	0006      	movs	r6, r0
 800b9da:	000f      	movs	r7, r1
 800b9dc:	9314      	str	r3, [sp, #80]	; 0x50
 800b9de:	e7be      	b.n	800b95e <_dtoa_r+0x516>
 800b9e0:	0020      	movs	r0, r4
 800b9e2:	0029      	movs	r1, r5
 800b9e4:	f7f5 ffca 	bl	800197c <__aeabi_dmul>
 800b9e8:	9a06      	ldr	r2, [sp, #24]
 800b9ea:	9b06      	ldr	r3, [sp, #24]
 800b9ec:	4694      	mov	ip, r2
 800b9ee:	9308      	str	r3, [sp, #32]
 800b9f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b9f2:	9014      	str	r0, [sp, #80]	; 0x50
 800b9f4:	9115      	str	r1, [sp, #84]	; 0x54
 800b9f6:	4463      	add	r3, ip
 800b9f8:	9319      	str	r3, [sp, #100]	; 0x64
 800b9fa:	0030      	movs	r0, r6
 800b9fc:	0039      	movs	r1, r7
 800b9fe:	f7f6 fe1f 	bl	8002640 <__aeabi_d2iz>
 800ba02:	9018      	str	r0, [sp, #96]	; 0x60
 800ba04:	f7f6 fe52 	bl	80026ac <__aeabi_i2d>
 800ba08:	0002      	movs	r2, r0
 800ba0a:	000b      	movs	r3, r1
 800ba0c:	0030      	movs	r0, r6
 800ba0e:	0039      	movs	r1, r7
 800ba10:	f7f6 fa76 	bl	8001f00 <__aeabi_dsub>
 800ba14:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800ba16:	9b08      	ldr	r3, [sp, #32]
 800ba18:	3630      	adds	r6, #48	; 0x30
 800ba1a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ba1c:	701e      	strb	r6, [r3, #0]
 800ba1e:	3301      	adds	r3, #1
 800ba20:	0004      	movs	r4, r0
 800ba22:	000d      	movs	r5, r1
 800ba24:	9308      	str	r3, [sp, #32]
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d12d      	bne.n	800ba86 <_dtoa_r+0x63e>
 800ba2a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ba2c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ba2e:	9a06      	ldr	r2, [sp, #24]
 800ba30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba32:	4694      	mov	ip, r2
 800ba34:	4463      	add	r3, ip
 800ba36:	2200      	movs	r2, #0
 800ba38:	9308      	str	r3, [sp, #32]
 800ba3a:	4b47      	ldr	r3, [pc, #284]	; (800bb58 <_dtoa_r+0x710>)
 800ba3c:	f7f5 f844 	bl	8000ac8 <__aeabi_dadd>
 800ba40:	0002      	movs	r2, r0
 800ba42:	000b      	movs	r3, r1
 800ba44:	0020      	movs	r0, r4
 800ba46:	0029      	movs	r1, r5
 800ba48:	f7f4 fd1a 	bl	8000480 <__aeabi_dcmpgt>
 800ba4c:	2800      	cmp	r0, #0
 800ba4e:	d000      	beq.n	800ba52 <_dtoa_r+0x60a>
 800ba50:	e086      	b.n	800bb60 <_dtoa_r+0x718>
 800ba52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ba54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba56:	2000      	movs	r0, #0
 800ba58:	493f      	ldr	r1, [pc, #252]	; (800bb58 <_dtoa_r+0x710>)
 800ba5a:	f7f6 fa51 	bl	8001f00 <__aeabi_dsub>
 800ba5e:	0002      	movs	r2, r0
 800ba60:	000b      	movs	r3, r1
 800ba62:	0020      	movs	r0, r4
 800ba64:	0029      	movs	r1, r5
 800ba66:	f7f4 fcf7 	bl	8000458 <__aeabi_dcmplt>
 800ba6a:	2800      	cmp	r0, #0
 800ba6c:	d100      	bne.n	800ba70 <_dtoa_r+0x628>
 800ba6e:	e716      	b.n	800b89e <_dtoa_r+0x456>
 800ba70:	9b08      	ldr	r3, [sp, #32]
 800ba72:	001a      	movs	r2, r3
 800ba74:	3a01      	subs	r2, #1
 800ba76:	9208      	str	r2, [sp, #32]
 800ba78:	7812      	ldrb	r2, [r2, #0]
 800ba7a:	2a30      	cmp	r2, #48	; 0x30
 800ba7c:	d0f8      	beq.n	800ba70 <_dtoa_r+0x628>
 800ba7e:	9308      	str	r3, [sp, #32]
 800ba80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba82:	9303      	str	r3, [sp, #12]
 800ba84:	e046      	b.n	800bb14 <_dtoa_r+0x6cc>
 800ba86:	2200      	movs	r2, #0
 800ba88:	4b2e      	ldr	r3, [pc, #184]	; (800bb44 <_dtoa_r+0x6fc>)
 800ba8a:	f7f5 ff77 	bl	800197c <__aeabi_dmul>
 800ba8e:	0006      	movs	r6, r0
 800ba90:	000f      	movs	r7, r1
 800ba92:	e7b2      	b.n	800b9fa <_dtoa_r+0x5b2>
 800ba94:	9b06      	ldr	r3, [sp, #24]
 800ba96:	9a06      	ldr	r2, [sp, #24]
 800ba98:	930a      	str	r3, [sp, #40]	; 0x28
 800ba9a:	9b07      	ldr	r3, [sp, #28]
 800ba9c:	9c08      	ldr	r4, [sp, #32]
 800ba9e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800baa0:	3b01      	subs	r3, #1
 800baa2:	189b      	adds	r3, r3, r2
 800baa4:	930b      	str	r3, [sp, #44]	; 0x2c
 800baa6:	0032      	movs	r2, r6
 800baa8:	003b      	movs	r3, r7
 800baaa:	0020      	movs	r0, r4
 800baac:	0029      	movs	r1, r5
 800baae:	f7f5 fb6b 	bl	8001188 <__aeabi_ddiv>
 800bab2:	f7f6 fdc5 	bl	8002640 <__aeabi_d2iz>
 800bab6:	9007      	str	r0, [sp, #28]
 800bab8:	f7f6 fdf8 	bl	80026ac <__aeabi_i2d>
 800babc:	0032      	movs	r2, r6
 800babe:	003b      	movs	r3, r7
 800bac0:	f7f5 ff5c 	bl	800197c <__aeabi_dmul>
 800bac4:	0002      	movs	r2, r0
 800bac6:	000b      	movs	r3, r1
 800bac8:	0020      	movs	r0, r4
 800baca:	0029      	movs	r1, r5
 800bacc:	f7f6 fa18 	bl	8001f00 <__aeabi_dsub>
 800bad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bad2:	001a      	movs	r2, r3
 800bad4:	3201      	adds	r2, #1
 800bad6:	920a      	str	r2, [sp, #40]	; 0x28
 800bad8:	9208      	str	r2, [sp, #32]
 800bada:	9a07      	ldr	r2, [sp, #28]
 800badc:	3230      	adds	r2, #48	; 0x30
 800bade:	701a      	strb	r2, [r3, #0]
 800bae0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d14f      	bne.n	800bb86 <_dtoa_r+0x73e>
 800bae6:	0002      	movs	r2, r0
 800bae8:	000b      	movs	r3, r1
 800baea:	f7f4 ffed 	bl	8000ac8 <__aeabi_dadd>
 800baee:	0032      	movs	r2, r6
 800baf0:	003b      	movs	r3, r7
 800baf2:	0004      	movs	r4, r0
 800baf4:	000d      	movs	r5, r1
 800baf6:	f7f4 fcc3 	bl	8000480 <__aeabi_dcmpgt>
 800bafa:	2800      	cmp	r0, #0
 800bafc:	d12e      	bne.n	800bb5c <_dtoa_r+0x714>
 800bafe:	0032      	movs	r2, r6
 800bb00:	003b      	movs	r3, r7
 800bb02:	0020      	movs	r0, r4
 800bb04:	0029      	movs	r1, r5
 800bb06:	f7f4 fca1 	bl	800044c <__aeabi_dcmpeq>
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	d002      	beq.n	800bb14 <_dtoa_r+0x6cc>
 800bb0e:	9b07      	ldr	r3, [sp, #28]
 800bb10:	07de      	lsls	r6, r3, #31
 800bb12:	d423      	bmi.n	800bb5c <_dtoa_r+0x714>
 800bb14:	9905      	ldr	r1, [sp, #20]
 800bb16:	9804      	ldr	r0, [sp, #16]
 800bb18:	f000 fab2 	bl	800c080 <_Bfree>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	9a08      	ldr	r2, [sp, #32]
 800bb20:	7013      	strb	r3, [r2, #0]
 800bb22:	9b03      	ldr	r3, [sp, #12]
 800bb24:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bb26:	3301      	adds	r3, #1
 800bb28:	6013      	str	r3, [r2, #0]
 800bb2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d100      	bne.n	800bb32 <_dtoa_r+0x6ea>
 800bb30:	e4bd      	b.n	800b4ae <_dtoa_r+0x66>
 800bb32:	9a08      	ldr	r2, [sp, #32]
 800bb34:	601a      	str	r2, [r3, #0]
 800bb36:	e4ba      	b.n	800b4ae <_dtoa_r+0x66>
 800bb38:	0800e728 	.word	0x0800e728
 800bb3c:	0800e700 	.word	0x0800e700
 800bb40:	3ff00000 	.word	0x3ff00000
 800bb44:	40240000 	.word	0x40240000
 800bb48:	401c0000 	.word	0x401c0000
 800bb4c:	fcc00000 	.word	0xfcc00000
 800bb50:	40140000 	.word	0x40140000
 800bb54:	7cc00000 	.word	0x7cc00000
 800bb58:	3fe00000 	.word	0x3fe00000
 800bb5c:	9b03      	ldr	r3, [sp, #12]
 800bb5e:	930e      	str	r3, [sp, #56]	; 0x38
 800bb60:	9b08      	ldr	r3, [sp, #32]
 800bb62:	9308      	str	r3, [sp, #32]
 800bb64:	3b01      	subs	r3, #1
 800bb66:	781a      	ldrb	r2, [r3, #0]
 800bb68:	2a39      	cmp	r2, #57	; 0x39
 800bb6a:	d108      	bne.n	800bb7e <_dtoa_r+0x736>
 800bb6c:	9a06      	ldr	r2, [sp, #24]
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d1f7      	bne.n	800bb62 <_dtoa_r+0x71a>
 800bb72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb74:	9906      	ldr	r1, [sp, #24]
 800bb76:	3201      	adds	r2, #1
 800bb78:	920e      	str	r2, [sp, #56]	; 0x38
 800bb7a:	2230      	movs	r2, #48	; 0x30
 800bb7c:	700a      	strb	r2, [r1, #0]
 800bb7e:	781a      	ldrb	r2, [r3, #0]
 800bb80:	3201      	adds	r2, #1
 800bb82:	701a      	strb	r2, [r3, #0]
 800bb84:	e77c      	b.n	800ba80 <_dtoa_r+0x638>
 800bb86:	2200      	movs	r2, #0
 800bb88:	4ba9      	ldr	r3, [pc, #676]	; (800be30 <_dtoa_r+0x9e8>)
 800bb8a:	f7f5 fef7 	bl	800197c <__aeabi_dmul>
 800bb8e:	2200      	movs	r2, #0
 800bb90:	2300      	movs	r3, #0
 800bb92:	0004      	movs	r4, r0
 800bb94:	000d      	movs	r5, r1
 800bb96:	f7f4 fc59 	bl	800044c <__aeabi_dcmpeq>
 800bb9a:	2800      	cmp	r0, #0
 800bb9c:	d100      	bne.n	800bba0 <_dtoa_r+0x758>
 800bb9e:	e782      	b.n	800baa6 <_dtoa_r+0x65e>
 800bba0:	e7b8      	b.n	800bb14 <_dtoa_r+0x6cc>
 800bba2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800bba4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800bba6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bba8:	2f00      	cmp	r7, #0
 800bbaa:	d012      	beq.n	800bbd2 <_dtoa_r+0x78a>
 800bbac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bbae:	2a01      	cmp	r2, #1
 800bbb0:	dc6e      	bgt.n	800bc90 <_dtoa_r+0x848>
 800bbb2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bbb4:	2a00      	cmp	r2, #0
 800bbb6:	d065      	beq.n	800bc84 <_dtoa_r+0x83c>
 800bbb8:	4a9e      	ldr	r2, [pc, #632]	; (800be34 <_dtoa_r+0x9ec>)
 800bbba:	189b      	adds	r3, r3, r2
 800bbbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbbe:	2101      	movs	r1, #1
 800bbc0:	18d2      	adds	r2, r2, r3
 800bbc2:	920a      	str	r2, [sp, #40]	; 0x28
 800bbc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bbc6:	9804      	ldr	r0, [sp, #16]
 800bbc8:	18d3      	adds	r3, r2, r3
 800bbca:	930c      	str	r3, [sp, #48]	; 0x30
 800bbcc:	f000 faee 	bl	800c1ac <__i2b>
 800bbd0:	0007      	movs	r7, r0
 800bbd2:	2c00      	cmp	r4, #0
 800bbd4:	d00e      	beq.n	800bbf4 <_dtoa_r+0x7ac>
 800bbd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	dd0b      	ble.n	800bbf4 <_dtoa_r+0x7ac>
 800bbdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bbde:	0023      	movs	r3, r4
 800bbe0:	4294      	cmp	r4, r2
 800bbe2:	dd00      	ble.n	800bbe6 <_dtoa_r+0x79e>
 800bbe4:	0013      	movs	r3, r2
 800bbe6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbe8:	1ae4      	subs	r4, r4, r3
 800bbea:	1ad2      	subs	r2, r2, r3
 800bbec:	920a      	str	r2, [sp, #40]	; 0x28
 800bbee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bbf0:	1ad3      	subs	r3, r2, r3
 800bbf2:	930c      	str	r3, [sp, #48]	; 0x30
 800bbf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d01e      	beq.n	800bc38 <_dtoa_r+0x7f0>
 800bbfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d05c      	beq.n	800bcba <_dtoa_r+0x872>
 800bc00:	2d00      	cmp	r5, #0
 800bc02:	dd10      	ble.n	800bc26 <_dtoa_r+0x7de>
 800bc04:	0039      	movs	r1, r7
 800bc06:	002a      	movs	r2, r5
 800bc08:	9804      	ldr	r0, [sp, #16]
 800bc0a:	f000 fb97 	bl	800c33c <__pow5mult>
 800bc0e:	9a05      	ldr	r2, [sp, #20]
 800bc10:	0001      	movs	r1, r0
 800bc12:	0007      	movs	r7, r0
 800bc14:	9804      	ldr	r0, [sp, #16]
 800bc16:	f000 fae1 	bl	800c1dc <__multiply>
 800bc1a:	0006      	movs	r6, r0
 800bc1c:	9905      	ldr	r1, [sp, #20]
 800bc1e:	9804      	ldr	r0, [sp, #16]
 800bc20:	f000 fa2e 	bl	800c080 <_Bfree>
 800bc24:	9605      	str	r6, [sp, #20]
 800bc26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc28:	1b5a      	subs	r2, r3, r5
 800bc2a:	42ab      	cmp	r3, r5
 800bc2c:	d004      	beq.n	800bc38 <_dtoa_r+0x7f0>
 800bc2e:	9905      	ldr	r1, [sp, #20]
 800bc30:	9804      	ldr	r0, [sp, #16]
 800bc32:	f000 fb83 	bl	800c33c <__pow5mult>
 800bc36:	9005      	str	r0, [sp, #20]
 800bc38:	2101      	movs	r1, #1
 800bc3a:	9804      	ldr	r0, [sp, #16]
 800bc3c:	f000 fab6 	bl	800c1ac <__i2b>
 800bc40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bc42:	0006      	movs	r6, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	dd3a      	ble.n	800bcbe <_dtoa_r+0x876>
 800bc48:	001a      	movs	r2, r3
 800bc4a:	0001      	movs	r1, r0
 800bc4c:	9804      	ldr	r0, [sp, #16]
 800bc4e:	f000 fb75 	bl	800c33c <__pow5mult>
 800bc52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bc54:	0006      	movs	r6, r0
 800bc56:	2500      	movs	r5, #0
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	dc38      	bgt.n	800bcce <_dtoa_r+0x886>
 800bc5c:	2500      	movs	r5, #0
 800bc5e:	9b08      	ldr	r3, [sp, #32]
 800bc60:	42ab      	cmp	r3, r5
 800bc62:	d130      	bne.n	800bcc6 <_dtoa_r+0x87e>
 800bc64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc66:	031b      	lsls	r3, r3, #12
 800bc68:	42ab      	cmp	r3, r5
 800bc6a:	d12c      	bne.n	800bcc6 <_dtoa_r+0x87e>
 800bc6c:	4b72      	ldr	r3, [pc, #456]	; (800be38 <_dtoa_r+0x9f0>)
 800bc6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc70:	4213      	tst	r3, r2
 800bc72:	d028      	beq.n	800bcc6 <_dtoa_r+0x87e>
 800bc74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc76:	3501      	adds	r5, #1
 800bc78:	3301      	adds	r3, #1
 800bc7a:	930a      	str	r3, [sp, #40]	; 0x28
 800bc7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc7e:	3301      	adds	r3, #1
 800bc80:	930c      	str	r3, [sp, #48]	; 0x30
 800bc82:	e020      	b.n	800bcc6 <_dtoa_r+0x87e>
 800bc84:	2336      	movs	r3, #54	; 0x36
 800bc86:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bc88:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800bc8a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bc8c:	1a9b      	subs	r3, r3, r2
 800bc8e:	e795      	b.n	800bbbc <_dtoa_r+0x774>
 800bc90:	9b07      	ldr	r3, [sp, #28]
 800bc92:	1e5d      	subs	r5, r3, #1
 800bc94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc96:	42ab      	cmp	r3, r5
 800bc98:	db07      	blt.n	800bcaa <_dtoa_r+0x862>
 800bc9a:	1b5d      	subs	r5, r3, r5
 800bc9c:	9b07      	ldr	r3, [sp, #28]
 800bc9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	da8b      	bge.n	800bbbc <_dtoa_r+0x774>
 800bca4:	1ae4      	subs	r4, r4, r3
 800bca6:	2300      	movs	r3, #0
 800bca8:	e788      	b.n	800bbbc <_dtoa_r+0x774>
 800bcaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bcae:	1aeb      	subs	r3, r5, r3
 800bcb0:	18d3      	adds	r3, r2, r3
 800bcb2:	950d      	str	r5, [sp, #52]	; 0x34
 800bcb4:	9313      	str	r3, [sp, #76]	; 0x4c
 800bcb6:	2500      	movs	r5, #0
 800bcb8:	e7f0      	b.n	800bc9c <_dtoa_r+0x854>
 800bcba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bcbc:	e7b7      	b.n	800bc2e <_dtoa_r+0x7e6>
 800bcbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bcc0:	2500      	movs	r5, #0
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	ddca      	ble.n	800bc5c <_dtoa_r+0x814>
 800bcc6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bcc8:	2001      	movs	r0, #1
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d008      	beq.n	800bce0 <_dtoa_r+0x898>
 800bcce:	6933      	ldr	r3, [r6, #16]
 800bcd0:	3303      	adds	r3, #3
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	18f3      	adds	r3, r6, r3
 800bcd6:	6858      	ldr	r0, [r3, #4]
 800bcd8:	f000 fa20 	bl	800c11c <__hi0bits>
 800bcdc:	2320      	movs	r3, #32
 800bcde:	1a18      	subs	r0, r3, r0
 800bce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bce2:	1818      	adds	r0, r3, r0
 800bce4:	0002      	movs	r2, r0
 800bce6:	231f      	movs	r3, #31
 800bce8:	401a      	ands	r2, r3
 800bcea:	4218      	tst	r0, r3
 800bcec:	d047      	beq.n	800bd7e <_dtoa_r+0x936>
 800bcee:	3301      	adds	r3, #1
 800bcf0:	1a9b      	subs	r3, r3, r2
 800bcf2:	2b04      	cmp	r3, #4
 800bcf4:	dd3f      	ble.n	800bd76 <_dtoa_r+0x92e>
 800bcf6:	231c      	movs	r3, #28
 800bcf8:	1a9b      	subs	r3, r3, r2
 800bcfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bcfc:	18e4      	adds	r4, r4, r3
 800bcfe:	18d2      	adds	r2, r2, r3
 800bd00:	920a      	str	r2, [sp, #40]	; 0x28
 800bd02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd04:	18d3      	adds	r3, r2, r3
 800bd06:	930c      	str	r3, [sp, #48]	; 0x30
 800bd08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	dd05      	ble.n	800bd1a <_dtoa_r+0x8d2>
 800bd0e:	001a      	movs	r2, r3
 800bd10:	9905      	ldr	r1, [sp, #20]
 800bd12:	9804      	ldr	r0, [sp, #16]
 800bd14:	f000 fb54 	bl	800c3c0 <__lshift>
 800bd18:	9005      	str	r0, [sp, #20]
 800bd1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	dd05      	ble.n	800bd2c <_dtoa_r+0x8e4>
 800bd20:	0031      	movs	r1, r6
 800bd22:	001a      	movs	r2, r3
 800bd24:	9804      	ldr	r0, [sp, #16]
 800bd26:	f000 fb4b 	bl	800c3c0 <__lshift>
 800bd2a:	0006      	movs	r6, r0
 800bd2c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d027      	beq.n	800bd82 <_dtoa_r+0x93a>
 800bd32:	0031      	movs	r1, r6
 800bd34:	9805      	ldr	r0, [sp, #20]
 800bd36:	f000 fbb1 	bl	800c49c <__mcmp>
 800bd3a:	2800      	cmp	r0, #0
 800bd3c:	da21      	bge.n	800bd82 <_dtoa_r+0x93a>
 800bd3e:	9b03      	ldr	r3, [sp, #12]
 800bd40:	220a      	movs	r2, #10
 800bd42:	3b01      	subs	r3, #1
 800bd44:	9303      	str	r3, [sp, #12]
 800bd46:	9905      	ldr	r1, [sp, #20]
 800bd48:	2300      	movs	r3, #0
 800bd4a:	9804      	ldr	r0, [sp, #16]
 800bd4c:	f000 f9a2 	bl	800c094 <__multadd>
 800bd50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd52:	9005      	str	r0, [sp, #20]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d100      	bne.n	800bd5a <_dtoa_r+0x912>
 800bd58:	e15d      	b.n	800c016 <_dtoa_r+0xbce>
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	0039      	movs	r1, r7
 800bd5e:	220a      	movs	r2, #10
 800bd60:	9804      	ldr	r0, [sp, #16]
 800bd62:	f000 f997 	bl	800c094 <__multadd>
 800bd66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd68:	0007      	movs	r7, r0
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	dc49      	bgt.n	800be02 <_dtoa_r+0x9ba>
 800bd6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bd70:	2b02      	cmp	r3, #2
 800bd72:	dc0e      	bgt.n	800bd92 <_dtoa_r+0x94a>
 800bd74:	e045      	b.n	800be02 <_dtoa_r+0x9ba>
 800bd76:	2b04      	cmp	r3, #4
 800bd78:	d0c6      	beq.n	800bd08 <_dtoa_r+0x8c0>
 800bd7a:	331c      	adds	r3, #28
 800bd7c:	e7bd      	b.n	800bcfa <_dtoa_r+0x8b2>
 800bd7e:	0013      	movs	r3, r2
 800bd80:	e7fb      	b.n	800bd7a <_dtoa_r+0x932>
 800bd82:	9b07      	ldr	r3, [sp, #28]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	dc36      	bgt.n	800bdf6 <_dtoa_r+0x9ae>
 800bd88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bd8a:	2b02      	cmp	r3, #2
 800bd8c:	dd33      	ble.n	800bdf6 <_dtoa_r+0x9ae>
 800bd8e:	9b07      	ldr	r3, [sp, #28]
 800bd90:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d10c      	bne.n	800bdb2 <_dtoa_r+0x96a>
 800bd98:	0031      	movs	r1, r6
 800bd9a:	2205      	movs	r2, #5
 800bd9c:	9804      	ldr	r0, [sp, #16]
 800bd9e:	f000 f979 	bl	800c094 <__multadd>
 800bda2:	0006      	movs	r6, r0
 800bda4:	0001      	movs	r1, r0
 800bda6:	9805      	ldr	r0, [sp, #20]
 800bda8:	f000 fb78 	bl	800c49c <__mcmp>
 800bdac:	2800      	cmp	r0, #0
 800bdae:	dd00      	ble.n	800bdb2 <_dtoa_r+0x96a>
 800bdb0:	e59f      	b.n	800b8f2 <_dtoa_r+0x4aa>
 800bdb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bdb4:	43db      	mvns	r3, r3
 800bdb6:	9303      	str	r3, [sp, #12]
 800bdb8:	9b06      	ldr	r3, [sp, #24]
 800bdba:	9308      	str	r3, [sp, #32]
 800bdbc:	2500      	movs	r5, #0
 800bdbe:	0031      	movs	r1, r6
 800bdc0:	9804      	ldr	r0, [sp, #16]
 800bdc2:	f000 f95d 	bl	800c080 <_Bfree>
 800bdc6:	2f00      	cmp	r7, #0
 800bdc8:	d100      	bne.n	800bdcc <_dtoa_r+0x984>
 800bdca:	e6a3      	b.n	800bb14 <_dtoa_r+0x6cc>
 800bdcc:	2d00      	cmp	r5, #0
 800bdce:	d005      	beq.n	800bddc <_dtoa_r+0x994>
 800bdd0:	42bd      	cmp	r5, r7
 800bdd2:	d003      	beq.n	800bddc <_dtoa_r+0x994>
 800bdd4:	0029      	movs	r1, r5
 800bdd6:	9804      	ldr	r0, [sp, #16]
 800bdd8:	f000 f952 	bl	800c080 <_Bfree>
 800bddc:	0039      	movs	r1, r7
 800bdde:	9804      	ldr	r0, [sp, #16]
 800bde0:	f000 f94e 	bl	800c080 <_Bfree>
 800bde4:	e696      	b.n	800bb14 <_dtoa_r+0x6cc>
 800bde6:	2600      	movs	r6, #0
 800bde8:	0037      	movs	r7, r6
 800bdea:	e7e2      	b.n	800bdb2 <_dtoa_r+0x96a>
 800bdec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bdee:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800bdf0:	9303      	str	r3, [sp, #12]
 800bdf2:	0037      	movs	r7, r6
 800bdf4:	e57d      	b.n	800b8f2 <_dtoa_r+0x4aa>
 800bdf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d100      	bne.n	800bdfe <_dtoa_r+0x9b6>
 800bdfc:	e0c3      	b.n	800bf86 <_dtoa_r+0xb3e>
 800bdfe:	9b07      	ldr	r3, [sp, #28]
 800be00:	930b      	str	r3, [sp, #44]	; 0x2c
 800be02:	2c00      	cmp	r4, #0
 800be04:	dd05      	ble.n	800be12 <_dtoa_r+0x9ca>
 800be06:	0039      	movs	r1, r7
 800be08:	0022      	movs	r2, r4
 800be0a:	9804      	ldr	r0, [sp, #16]
 800be0c:	f000 fad8 	bl	800c3c0 <__lshift>
 800be10:	0007      	movs	r7, r0
 800be12:	0038      	movs	r0, r7
 800be14:	2d00      	cmp	r5, #0
 800be16:	d024      	beq.n	800be62 <_dtoa_r+0xa1a>
 800be18:	6879      	ldr	r1, [r7, #4]
 800be1a:	9804      	ldr	r0, [sp, #16]
 800be1c:	f000 f908 	bl	800c030 <_Balloc>
 800be20:	1e04      	subs	r4, r0, #0
 800be22:	d111      	bne.n	800be48 <_dtoa_r+0xa00>
 800be24:	0022      	movs	r2, r4
 800be26:	4b05      	ldr	r3, [pc, #20]	; (800be3c <_dtoa_r+0x9f4>)
 800be28:	4805      	ldr	r0, [pc, #20]	; (800be40 <_dtoa_r+0x9f8>)
 800be2a:	4906      	ldr	r1, [pc, #24]	; (800be44 <_dtoa_r+0x9fc>)
 800be2c:	e43c      	b.n	800b6a8 <_dtoa_r+0x260>
 800be2e:	46c0      	nop			; (mov r8, r8)
 800be30:	40240000 	.word	0x40240000
 800be34:	00000433 	.word	0x00000433
 800be38:	7ff00000 	.word	0x7ff00000
 800be3c:	0800e637 	.word	0x0800e637
 800be40:	0800e648 	.word	0x0800e648
 800be44:	000002ef 	.word	0x000002ef
 800be48:	0039      	movs	r1, r7
 800be4a:	693a      	ldr	r2, [r7, #16]
 800be4c:	310c      	adds	r1, #12
 800be4e:	3202      	adds	r2, #2
 800be50:	0092      	lsls	r2, r2, #2
 800be52:	300c      	adds	r0, #12
 800be54:	f7fd fb07 	bl	8009466 <memcpy>
 800be58:	2201      	movs	r2, #1
 800be5a:	0021      	movs	r1, r4
 800be5c:	9804      	ldr	r0, [sp, #16]
 800be5e:	f000 faaf 	bl	800c3c0 <__lshift>
 800be62:	9b06      	ldr	r3, [sp, #24]
 800be64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be66:	9307      	str	r3, [sp, #28]
 800be68:	3b01      	subs	r3, #1
 800be6a:	189b      	adds	r3, r3, r2
 800be6c:	2201      	movs	r2, #1
 800be6e:	003d      	movs	r5, r7
 800be70:	0007      	movs	r7, r0
 800be72:	930e      	str	r3, [sp, #56]	; 0x38
 800be74:	9b08      	ldr	r3, [sp, #32]
 800be76:	4013      	ands	r3, r2
 800be78:	930d      	str	r3, [sp, #52]	; 0x34
 800be7a:	0031      	movs	r1, r6
 800be7c:	9805      	ldr	r0, [sp, #20]
 800be7e:	f7ff fa53 	bl	800b328 <quorem>
 800be82:	0029      	movs	r1, r5
 800be84:	0004      	movs	r4, r0
 800be86:	900b      	str	r0, [sp, #44]	; 0x2c
 800be88:	9805      	ldr	r0, [sp, #20]
 800be8a:	f000 fb07 	bl	800c49c <__mcmp>
 800be8e:	003a      	movs	r2, r7
 800be90:	900c      	str	r0, [sp, #48]	; 0x30
 800be92:	0031      	movs	r1, r6
 800be94:	9804      	ldr	r0, [sp, #16]
 800be96:	f000 fb1d 	bl	800c4d4 <__mdiff>
 800be9a:	2201      	movs	r2, #1
 800be9c:	68c3      	ldr	r3, [r0, #12]
 800be9e:	3430      	adds	r4, #48	; 0x30
 800bea0:	9008      	str	r0, [sp, #32]
 800bea2:	920a      	str	r2, [sp, #40]	; 0x28
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d104      	bne.n	800beb2 <_dtoa_r+0xa6a>
 800bea8:	0001      	movs	r1, r0
 800beaa:	9805      	ldr	r0, [sp, #20]
 800beac:	f000 faf6 	bl	800c49c <__mcmp>
 800beb0:	900a      	str	r0, [sp, #40]	; 0x28
 800beb2:	9908      	ldr	r1, [sp, #32]
 800beb4:	9804      	ldr	r0, [sp, #16]
 800beb6:	f000 f8e3 	bl	800c080 <_Bfree>
 800beba:	9b07      	ldr	r3, [sp, #28]
 800bebc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bebe:	3301      	adds	r3, #1
 800bec0:	9308      	str	r3, [sp, #32]
 800bec2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bec4:	4313      	orrs	r3, r2
 800bec6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bec8:	4313      	orrs	r3, r2
 800beca:	d109      	bne.n	800bee0 <_dtoa_r+0xa98>
 800becc:	2c39      	cmp	r4, #57	; 0x39
 800bece:	d022      	beq.n	800bf16 <_dtoa_r+0xace>
 800bed0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	dd01      	ble.n	800beda <_dtoa_r+0xa92>
 800bed6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800bed8:	3431      	adds	r4, #49	; 0x31
 800beda:	9b07      	ldr	r3, [sp, #28]
 800bedc:	701c      	strb	r4, [r3, #0]
 800bede:	e76e      	b.n	800bdbe <_dtoa_r+0x976>
 800bee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	db04      	blt.n	800bef0 <_dtoa_r+0xaa8>
 800bee6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bee8:	4313      	orrs	r3, r2
 800beea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800beec:	4313      	orrs	r3, r2
 800beee:	d11e      	bne.n	800bf2e <_dtoa_r+0xae6>
 800bef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	ddf1      	ble.n	800beda <_dtoa_r+0xa92>
 800bef6:	9905      	ldr	r1, [sp, #20]
 800bef8:	2201      	movs	r2, #1
 800befa:	9804      	ldr	r0, [sp, #16]
 800befc:	f000 fa60 	bl	800c3c0 <__lshift>
 800bf00:	0031      	movs	r1, r6
 800bf02:	9005      	str	r0, [sp, #20]
 800bf04:	f000 faca 	bl	800c49c <__mcmp>
 800bf08:	2800      	cmp	r0, #0
 800bf0a:	dc02      	bgt.n	800bf12 <_dtoa_r+0xaca>
 800bf0c:	d1e5      	bne.n	800beda <_dtoa_r+0xa92>
 800bf0e:	07e3      	lsls	r3, r4, #31
 800bf10:	d5e3      	bpl.n	800beda <_dtoa_r+0xa92>
 800bf12:	2c39      	cmp	r4, #57	; 0x39
 800bf14:	d1df      	bne.n	800bed6 <_dtoa_r+0xa8e>
 800bf16:	2339      	movs	r3, #57	; 0x39
 800bf18:	9a07      	ldr	r2, [sp, #28]
 800bf1a:	7013      	strb	r3, [r2, #0]
 800bf1c:	9b08      	ldr	r3, [sp, #32]
 800bf1e:	9308      	str	r3, [sp, #32]
 800bf20:	3b01      	subs	r3, #1
 800bf22:	781a      	ldrb	r2, [r3, #0]
 800bf24:	2a39      	cmp	r2, #57	; 0x39
 800bf26:	d063      	beq.n	800bff0 <_dtoa_r+0xba8>
 800bf28:	3201      	adds	r2, #1
 800bf2a:	701a      	strb	r2, [r3, #0]
 800bf2c:	e747      	b.n	800bdbe <_dtoa_r+0x976>
 800bf2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	dd03      	ble.n	800bf3c <_dtoa_r+0xaf4>
 800bf34:	2c39      	cmp	r4, #57	; 0x39
 800bf36:	d0ee      	beq.n	800bf16 <_dtoa_r+0xace>
 800bf38:	3401      	adds	r4, #1
 800bf3a:	e7ce      	b.n	800beda <_dtoa_r+0xa92>
 800bf3c:	9b07      	ldr	r3, [sp, #28]
 800bf3e:	9a07      	ldr	r2, [sp, #28]
 800bf40:	701c      	strb	r4, [r3, #0]
 800bf42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d03e      	beq.n	800bfc6 <_dtoa_r+0xb7e>
 800bf48:	2300      	movs	r3, #0
 800bf4a:	220a      	movs	r2, #10
 800bf4c:	9905      	ldr	r1, [sp, #20]
 800bf4e:	9804      	ldr	r0, [sp, #16]
 800bf50:	f000 f8a0 	bl	800c094 <__multadd>
 800bf54:	2300      	movs	r3, #0
 800bf56:	9005      	str	r0, [sp, #20]
 800bf58:	220a      	movs	r2, #10
 800bf5a:	0029      	movs	r1, r5
 800bf5c:	9804      	ldr	r0, [sp, #16]
 800bf5e:	42bd      	cmp	r5, r7
 800bf60:	d106      	bne.n	800bf70 <_dtoa_r+0xb28>
 800bf62:	f000 f897 	bl	800c094 <__multadd>
 800bf66:	0005      	movs	r5, r0
 800bf68:	0007      	movs	r7, r0
 800bf6a:	9b08      	ldr	r3, [sp, #32]
 800bf6c:	9307      	str	r3, [sp, #28]
 800bf6e:	e784      	b.n	800be7a <_dtoa_r+0xa32>
 800bf70:	f000 f890 	bl	800c094 <__multadd>
 800bf74:	0039      	movs	r1, r7
 800bf76:	0005      	movs	r5, r0
 800bf78:	2300      	movs	r3, #0
 800bf7a:	220a      	movs	r2, #10
 800bf7c:	9804      	ldr	r0, [sp, #16]
 800bf7e:	f000 f889 	bl	800c094 <__multadd>
 800bf82:	0007      	movs	r7, r0
 800bf84:	e7f1      	b.n	800bf6a <_dtoa_r+0xb22>
 800bf86:	9b07      	ldr	r3, [sp, #28]
 800bf88:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf8a:	2500      	movs	r5, #0
 800bf8c:	0031      	movs	r1, r6
 800bf8e:	9805      	ldr	r0, [sp, #20]
 800bf90:	f7ff f9ca 	bl	800b328 <quorem>
 800bf94:	9b06      	ldr	r3, [sp, #24]
 800bf96:	3030      	adds	r0, #48	; 0x30
 800bf98:	5558      	strb	r0, [r3, r5]
 800bf9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf9c:	3501      	adds	r5, #1
 800bf9e:	0004      	movs	r4, r0
 800bfa0:	42ab      	cmp	r3, r5
 800bfa2:	dd07      	ble.n	800bfb4 <_dtoa_r+0xb6c>
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	220a      	movs	r2, #10
 800bfa8:	9905      	ldr	r1, [sp, #20]
 800bfaa:	9804      	ldr	r0, [sp, #16]
 800bfac:	f000 f872 	bl	800c094 <__multadd>
 800bfb0:	9005      	str	r0, [sp, #20]
 800bfb2:	e7eb      	b.n	800bf8c <_dtoa_r+0xb44>
 800bfb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	2a00      	cmp	r2, #0
 800bfba:	dd00      	ble.n	800bfbe <_dtoa_r+0xb76>
 800bfbc:	0013      	movs	r3, r2
 800bfbe:	2500      	movs	r5, #0
 800bfc0:	9a06      	ldr	r2, [sp, #24]
 800bfc2:	18d3      	adds	r3, r2, r3
 800bfc4:	9308      	str	r3, [sp, #32]
 800bfc6:	9905      	ldr	r1, [sp, #20]
 800bfc8:	2201      	movs	r2, #1
 800bfca:	9804      	ldr	r0, [sp, #16]
 800bfcc:	f000 f9f8 	bl	800c3c0 <__lshift>
 800bfd0:	0031      	movs	r1, r6
 800bfd2:	9005      	str	r0, [sp, #20]
 800bfd4:	f000 fa62 	bl	800c49c <__mcmp>
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	dc9f      	bgt.n	800bf1c <_dtoa_r+0xad4>
 800bfdc:	d101      	bne.n	800bfe2 <_dtoa_r+0xb9a>
 800bfde:	07e4      	lsls	r4, r4, #31
 800bfe0:	d49c      	bmi.n	800bf1c <_dtoa_r+0xad4>
 800bfe2:	9b08      	ldr	r3, [sp, #32]
 800bfe4:	9308      	str	r3, [sp, #32]
 800bfe6:	3b01      	subs	r3, #1
 800bfe8:	781a      	ldrb	r2, [r3, #0]
 800bfea:	2a30      	cmp	r2, #48	; 0x30
 800bfec:	d0fa      	beq.n	800bfe4 <_dtoa_r+0xb9c>
 800bfee:	e6e6      	b.n	800bdbe <_dtoa_r+0x976>
 800bff0:	9a06      	ldr	r2, [sp, #24]
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d193      	bne.n	800bf1e <_dtoa_r+0xad6>
 800bff6:	9b03      	ldr	r3, [sp, #12]
 800bff8:	3301      	adds	r3, #1
 800bffa:	9303      	str	r3, [sp, #12]
 800bffc:	2331      	movs	r3, #49	; 0x31
 800bffe:	7013      	strb	r3, [r2, #0]
 800c000:	e6dd      	b.n	800bdbe <_dtoa_r+0x976>
 800c002:	4b09      	ldr	r3, [pc, #36]	; (800c028 <_dtoa_r+0xbe0>)
 800c004:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c006:	9306      	str	r3, [sp, #24]
 800c008:	4b08      	ldr	r3, [pc, #32]	; (800c02c <_dtoa_r+0xbe4>)
 800c00a:	2a00      	cmp	r2, #0
 800c00c:	d001      	beq.n	800c012 <_dtoa_r+0xbca>
 800c00e:	f7ff fa4c 	bl	800b4aa <_dtoa_r+0x62>
 800c012:	f7ff fa4c 	bl	800b4ae <_dtoa_r+0x66>
 800c016:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c018:	2b00      	cmp	r3, #0
 800c01a:	dcb6      	bgt.n	800bf8a <_dtoa_r+0xb42>
 800c01c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c01e:	2b02      	cmp	r3, #2
 800c020:	dd00      	ble.n	800c024 <_dtoa_r+0xbdc>
 800c022:	e6b6      	b.n	800bd92 <_dtoa_r+0x94a>
 800c024:	e7b1      	b.n	800bf8a <_dtoa_r+0xb42>
 800c026:	46c0      	nop			; (mov r8, r8)
 800c028:	0800e62a 	.word	0x0800e62a
 800c02c:	0800e632 	.word	0x0800e632

0800c030 <_Balloc>:
 800c030:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c032:	b570      	push	{r4, r5, r6, lr}
 800c034:	0006      	movs	r6, r0
 800c036:	000c      	movs	r4, r1
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d012      	beq.n	800c062 <_Balloc+0x32>
 800c03c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800c03e:	00a2      	lsls	r2, r4, #2
 800c040:	189b      	adds	r3, r3, r2
 800c042:	6818      	ldr	r0, [r3, #0]
 800c044:	2800      	cmp	r0, #0
 800c046:	d115      	bne.n	800c074 <_Balloc+0x44>
 800c048:	2101      	movs	r1, #1
 800c04a:	000d      	movs	r5, r1
 800c04c:	40a5      	lsls	r5, r4
 800c04e:	1d6a      	adds	r2, r5, #5
 800c050:	0030      	movs	r0, r6
 800c052:	0092      	lsls	r2, r2, #2
 800c054:	f000 fbf4 	bl	800c840 <_calloc_r>
 800c058:	2800      	cmp	r0, #0
 800c05a:	d009      	beq.n	800c070 <_Balloc+0x40>
 800c05c:	6044      	str	r4, [r0, #4]
 800c05e:	6085      	str	r5, [r0, #8]
 800c060:	e00a      	b.n	800c078 <_Balloc+0x48>
 800c062:	2221      	movs	r2, #33	; 0x21
 800c064:	2104      	movs	r1, #4
 800c066:	f000 fbeb 	bl	800c840 <_calloc_r>
 800c06a:	6470      	str	r0, [r6, #68]	; 0x44
 800c06c:	2800      	cmp	r0, #0
 800c06e:	d1e5      	bne.n	800c03c <_Balloc+0xc>
 800c070:	2000      	movs	r0, #0
 800c072:	bd70      	pop	{r4, r5, r6, pc}
 800c074:	6802      	ldr	r2, [r0, #0]
 800c076:	601a      	str	r2, [r3, #0]
 800c078:	2300      	movs	r3, #0
 800c07a:	6103      	str	r3, [r0, #16]
 800c07c:	60c3      	str	r3, [r0, #12]
 800c07e:	e7f8      	b.n	800c072 <_Balloc+0x42>

0800c080 <_Bfree>:
 800c080:	2900      	cmp	r1, #0
 800c082:	d006      	beq.n	800c092 <_Bfree+0x12>
 800c084:	684a      	ldr	r2, [r1, #4]
 800c086:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c088:	0092      	lsls	r2, r2, #2
 800c08a:	189b      	adds	r3, r3, r2
 800c08c:	681a      	ldr	r2, [r3, #0]
 800c08e:	600a      	str	r2, [r1, #0]
 800c090:	6019      	str	r1, [r3, #0]
 800c092:	4770      	bx	lr

0800c094 <__multadd>:
 800c094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c096:	000e      	movs	r6, r1
 800c098:	9001      	str	r0, [sp, #4]
 800c09a:	000c      	movs	r4, r1
 800c09c:	001d      	movs	r5, r3
 800c09e:	2000      	movs	r0, #0
 800c0a0:	690f      	ldr	r7, [r1, #16]
 800c0a2:	3614      	adds	r6, #20
 800c0a4:	6833      	ldr	r3, [r6, #0]
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	b299      	uxth	r1, r3
 800c0aa:	4351      	muls	r1, r2
 800c0ac:	0c1b      	lsrs	r3, r3, #16
 800c0ae:	4353      	muls	r3, r2
 800c0b0:	1949      	adds	r1, r1, r5
 800c0b2:	0c0d      	lsrs	r5, r1, #16
 800c0b4:	195b      	adds	r3, r3, r5
 800c0b6:	0c1d      	lsrs	r5, r3, #16
 800c0b8:	b289      	uxth	r1, r1
 800c0ba:	041b      	lsls	r3, r3, #16
 800c0bc:	185b      	adds	r3, r3, r1
 800c0be:	c608      	stmia	r6!, {r3}
 800c0c0:	4287      	cmp	r7, r0
 800c0c2:	dcef      	bgt.n	800c0a4 <__multadd+0x10>
 800c0c4:	2d00      	cmp	r5, #0
 800c0c6:	d022      	beq.n	800c10e <__multadd+0x7a>
 800c0c8:	68a3      	ldr	r3, [r4, #8]
 800c0ca:	42bb      	cmp	r3, r7
 800c0cc:	dc19      	bgt.n	800c102 <__multadd+0x6e>
 800c0ce:	6861      	ldr	r1, [r4, #4]
 800c0d0:	9801      	ldr	r0, [sp, #4]
 800c0d2:	3101      	adds	r1, #1
 800c0d4:	f7ff ffac 	bl	800c030 <_Balloc>
 800c0d8:	1e06      	subs	r6, r0, #0
 800c0da:	d105      	bne.n	800c0e8 <__multadd+0x54>
 800c0dc:	0032      	movs	r2, r6
 800c0de:	21ba      	movs	r1, #186	; 0xba
 800c0e0:	4b0c      	ldr	r3, [pc, #48]	; (800c114 <__multadd+0x80>)
 800c0e2:	480d      	ldr	r0, [pc, #52]	; (800c118 <__multadd+0x84>)
 800c0e4:	f000 fb8e 	bl	800c804 <__assert_func>
 800c0e8:	0021      	movs	r1, r4
 800c0ea:	6922      	ldr	r2, [r4, #16]
 800c0ec:	310c      	adds	r1, #12
 800c0ee:	3202      	adds	r2, #2
 800c0f0:	0092      	lsls	r2, r2, #2
 800c0f2:	300c      	adds	r0, #12
 800c0f4:	f7fd f9b7 	bl	8009466 <memcpy>
 800c0f8:	0021      	movs	r1, r4
 800c0fa:	9801      	ldr	r0, [sp, #4]
 800c0fc:	f7ff ffc0 	bl	800c080 <_Bfree>
 800c100:	0034      	movs	r4, r6
 800c102:	1d3b      	adds	r3, r7, #4
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	18e3      	adds	r3, r4, r3
 800c108:	605d      	str	r5, [r3, #4]
 800c10a:	1c7b      	adds	r3, r7, #1
 800c10c:	6123      	str	r3, [r4, #16]
 800c10e:	0020      	movs	r0, r4
 800c110:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c112:	46c0      	nop			; (mov r8, r8)
 800c114:	0800e637 	.word	0x0800e637
 800c118:	0800e6a0 	.word	0x0800e6a0

0800c11c <__hi0bits>:
 800c11c:	0003      	movs	r3, r0
 800c11e:	0c02      	lsrs	r2, r0, #16
 800c120:	2000      	movs	r0, #0
 800c122:	4282      	cmp	r2, r0
 800c124:	d101      	bne.n	800c12a <__hi0bits+0xe>
 800c126:	041b      	lsls	r3, r3, #16
 800c128:	3010      	adds	r0, #16
 800c12a:	0e1a      	lsrs	r2, r3, #24
 800c12c:	d101      	bne.n	800c132 <__hi0bits+0x16>
 800c12e:	3008      	adds	r0, #8
 800c130:	021b      	lsls	r3, r3, #8
 800c132:	0f1a      	lsrs	r2, r3, #28
 800c134:	d101      	bne.n	800c13a <__hi0bits+0x1e>
 800c136:	3004      	adds	r0, #4
 800c138:	011b      	lsls	r3, r3, #4
 800c13a:	0f9a      	lsrs	r2, r3, #30
 800c13c:	d101      	bne.n	800c142 <__hi0bits+0x26>
 800c13e:	3002      	adds	r0, #2
 800c140:	009b      	lsls	r3, r3, #2
 800c142:	2b00      	cmp	r3, #0
 800c144:	db03      	blt.n	800c14e <__hi0bits+0x32>
 800c146:	3001      	adds	r0, #1
 800c148:	005b      	lsls	r3, r3, #1
 800c14a:	d400      	bmi.n	800c14e <__hi0bits+0x32>
 800c14c:	2020      	movs	r0, #32
 800c14e:	4770      	bx	lr

0800c150 <__lo0bits>:
 800c150:	6803      	ldr	r3, [r0, #0]
 800c152:	0001      	movs	r1, r0
 800c154:	2207      	movs	r2, #7
 800c156:	0018      	movs	r0, r3
 800c158:	4010      	ands	r0, r2
 800c15a:	4213      	tst	r3, r2
 800c15c:	d00d      	beq.n	800c17a <__lo0bits+0x2a>
 800c15e:	3a06      	subs	r2, #6
 800c160:	2000      	movs	r0, #0
 800c162:	4213      	tst	r3, r2
 800c164:	d105      	bne.n	800c172 <__lo0bits+0x22>
 800c166:	3002      	adds	r0, #2
 800c168:	4203      	tst	r3, r0
 800c16a:	d003      	beq.n	800c174 <__lo0bits+0x24>
 800c16c:	40d3      	lsrs	r3, r2
 800c16e:	0010      	movs	r0, r2
 800c170:	600b      	str	r3, [r1, #0]
 800c172:	4770      	bx	lr
 800c174:	089b      	lsrs	r3, r3, #2
 800c176:	600b      	str	r3, [r1, #0]
 800c178:	e7fb      	b.n	800c172 <__lo0bits+0x22>
 800c17a:	b29a      	uxth	r2, r3
 800c17c:	2a00      	cmp	r2, #0
 800c17e:	d101      	bne.n	800c184 <__lo0bits+0x34>
 800c180:	2010      	movs	r0, #16
 800c182:	0c1b      	lsrs	r3, r3, #16
 800c184:	b2da      	uxtb	r2, r3
 800c186:	2a00      	cmp	r2, #0
 800c188:	d101      	bne.n	800c18e <__lo0bits+0x3e>
 800c18a:	3008      	adds	r0, #8
 800c18c:	0a1b      	lsrs	r3, r3, #8
 800c18e:	071a      	lsls	r2, r3, #28
 800c190:	d101      	bne.n	800c196 <__lo0bits+0x46>
 800c192:	3004      	adds	r0, #4
 800c194:	091b      	lsrs	r3, r3, #4
 800c196:	079a      	lsls	r2, r3, #30
 800c198:	d101      	bne.n	800c19e <__lo0bits+0x4e>
 800c19a:	3002      	adds	r0, #2
 800c19c:	089b      	lsrs	r3, r3, #2
 800c19e:	07da      	lsls	r2, r3, #31
 800c1a0:	d4e9      	bmi.n	800c176 <__lo0bits+0x26>
 800c1a2:	3001      	adds	r0, #1
 800c1a4:	085b      	lsrs	r3, r3, #1
 800c1a6:	d1e6      	bne.n	800c176 <__lo0bits+0x26>
 800c1a8:	2020      	movs	r0, #32
 800c1aa:	e7e2      	b.n	800c172 <__lo0bits+0x22>

0800c1ac <__i2b>:
 800c1ac:	b510      	push	{r4, lr}
 800c1ae:	000c      	movs	r4, r1
 800c1b0:	2101      	movs	r1, #1
 800c1b2:	f7ff ff3d 	bl	800c030 <_Balloc>
 800c1b6:	2800      	cmp	r0, #0
 800c1b8:	d107      	bne.n	800c1ca <__i2b+0x1e>
 800c1ba:	2146      	movs	r1, #70	; 0x46
 800c1bc:	4c05      	ldr	r4, [pc, #20]	; (800c1d4 <__i2b+0x28>)
 800c1be:	0002      	movs	r2, r0
 800c1c0:	4b05      	ldr	r3, [pc, #20]	; (800c1d8 <__i2b+0x2c>)
 800c1c2:	0020      	movs	r0, r4
 800c1c4:	31ff      	adds	r1, #255	; 0xff
 800c1c6:	f000 fb1d 	bl	800c804 <__assert_func>
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	6144      	str	r4, [r0, #20]
 800c1ce:	6103      	str	r3, [r0, #16]
 800c1d0:	bd10      	pop	{r4, pc}
 800c1d2:	46c0      	nop			; (mov r8, r8)
 800c1d4:	0800e6a0 	.word	0x0800e6a0
 800c1d8:	0800e637 	.word	0x0800e637

0800c1dc <__multiply>:
 800c1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1de:	0015      	movs	r5, r2
 800c1e0:	690a      	ldr	r2, [r1, #16]
 800c1e2:	692b      	ldr	r3, [r5, #16]
 800c1e4:	000c      	movs	r4, r1
 800c1e6:	b08b      	sub	sp, #44	; 0x2c
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	da01      	bge.n	800c1f0 <__multiply+0x14>
 800c1ec:	002c      	movs	r4, r5
 800c1ee:	000d      	movs	r5, r1
 800c1f0:	6927      	ldr	r7, [r4, #16]
 800c1f2:	692e      	ldr	r6, [r5, #16]
 800c1f4:	6861      	ldr	r1, [r4, #4]
 800c1f6:	19bb      	adds	r3, r7, r6
 800c1f8:	9303      	str	r3, [sp, #12]
 800c1fa:	68a3      	ldr	r3, [r4, #8]
 800c1fc:	19ba      	adds	r2, r7, r6
 800c1fe:	4293      	cmp	r3, r2
 800c200:	da00      	bge.n	800c204 <__multiply+0x28>
 800c202:	3101      	adds	r1, #1
 800c204:	f7ff ff14 	bl	800c030 <_Balloc>
 800c208:	9002      	str	r0, [sp, #8]
 800c20a:	2800      	cmp	r0, #0
 800c20c:	d106      	bne.n	800c21c <__multiply+0x40>
 800c20e:	21b1      	movs	r1, #177	; 0xb1
 800c210:	4b48      	ldr	r3, [pc, #288]	; (800c334 <__multiply+0x158>)
 800c212:	4849      	ldr	r0, [pc, #292]	; (800c338 <__multiply+0x15c>)
 800c214:	9a02      	ldr	r2, [sp, #8]
 800c216:	0049      	lsls	r1, r1, #1
 800c218:	f000 faf4 	bl	800c804 <__assert_func>
 800c21c:	9b02      	ldr	r3, [sp, #8]
 800c21e:	2200      	movs	r2, #0
 800c220:	3314      	adds	r3, #20
 800c222:	469c      	mov	ip, r3
 800c224:	19bb      	adds	r3, r7, r6
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	4463      	add	r3, ip
 800c22a:	9304      	str	r3, [sp, #16]
 800c22c:	4663      	mov	r3, ip
 800c22e:	9904      	ldr	r1, [sp, #16]
 800c230:	428b      	cmp	r3, r1
 800c232:	d32a      	bcc.n	800c28a <__multiply+0xae>
 800c234:	0023      	movs	r3, r4
 800c236:	00bf      	lsls	r7, r7, #2
 800c238:	3314      	adds	r3, #20
 800c23a:	3514      	adds	r5, #20
 800c23c:	9308      	str	r3, [sp, #32]
 800c23e:	00b6      	lsls	r6, r6, #2
 800c240:	19db      	adds	r3, r3, r7
 800c242:	9305      	str	r3, [sp, #20]
 800c244:	19ab      	adds	r3, r5, r6
 800c246:	9309      	str	r3, [sp, #36]	; 0x24
 800c248:	2304      	movs	r3, #4
 800c24a:	9306      	str	r3, [sp, #24]
 800c24c:	0023      	movs	r3, r4
 800c24e:	9a05      	ldr	r2, [sp, #20]
 800c250:	3315      	adds	r3, #21
 800c252:	9501      	str	r5, [sp, #4]
 800c254:	429a      	cmp	r2, r3
 800c256:	d305      	bcc.n	800c264 <__multiply+0x88>
 800c258:	1b13      	subs	r3, r2, r4
 800c25a:	3b15      	subs	r3, #21
 800c25c:	089b      	lsrs	r3, r3, #2
 800c25e:	3301      	adds	r3, #1
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	9306      	str	r3, [sp, #24]
 800c264:	9b01      	ldr	r3, [sp, #4]
 800c266:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c268:	4293      	cmp	r3, r2
 800c26a:	d310      	bcc.n	800c28e <__multiply+0xb2>
 800c26c:	9b03      	ldr	r3, [sp, #12]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	dd05      	ble.n	800c27e <__multiply+0xa2>
 800c272:	9b04      	ldr	r3, [sp, #16]
 800c274:	3b04      	subs	r3, #4
 800c276:	9304      	str	r3, [sp, #16]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d056      	beq.n	800c32c <__multiply+0x150>
 800c27e:	9b02      	ldr	r3, [sp, #8]
 800c280:	9a03      	ldr	r2, [sp, #12]
 800c282:	0018      	movs	r0, r3
 800c284:	611a      	str	r2, [r3, #16]
 800c286:	b00b      	add	sp, #44	; 0x2c
 800c288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c28a:	c304      	stmia	r3!, {r2}
 800c28c:	e7cf      	b.n	800c22e <__multiply+0x52>
 800c28e:	9b01      	ldr	r3, [sp, #4]
 800c290:	6818      	ldr	r0, [r3, #0]
 800c292:	b280      	uxth	r0, r0
 800c294:	2800      	cmp	r0, #0
 800c296:	d01e      	beq.n	800c2d6 <__multiply+0xfa>
 800c298:	4667      	mov	r7, ip
 800c29a:	2500      	movs	r5, #0
 800c29c:	9e08      	ldr	r6, [sp, #32]
 800c29e:	ce02      	ldmia	r6!, {r1}
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	9307      	str	r3, [sp, #28]
 800c2a4:	b28b      	uxth	r3, r1
 800c2a6:	4343      	muls	r3, r0
 800c2a8:	001a      	movs	r2, r3
 800c2aa:	466b      	mov	r3, sp
 800c2ac:	8b9b      	ldrh	r3, [r3, #28]
 800c2ae:	18d3      	adds	r3, r2, r3
 800c2b0:	195b      	adds	r3, r3, r5
 800c2b2:	0c0d      	lsrs	r5, r1, #16
 800c2b4:	4345      	muls	r5, r0
 800c2b6:	9a07      	ldr	r2, [sp, #28]
 800c2b8:	0c11      	lsrs	r1, r2, #16
 800c2ba:	1869      	adds	r1, r5, r1
 800c2bc:	0c1a      	lsrs	r2, r3, #16
 800c2be:	188a      	adds	r2, r1, r2
 800c2c0:	b29b      	uxth	r3, r3
 800c2c2:	0c15      	lsrs	r5, r2, #16
 800c2c4:	0412      	lsls	r2, r2, #16
 800c2c6:	431a      	orrs	r2, r3
 800c2c8:	9b05      	ldr	r3, [sp, #20]
 800c2ca:	c704      	stmia	r7!, {r2}
 800c2cc:	42b3      	cmp	r3, r6
 800c2ce:	d8e6      	bhi.n	800c29e <__multiply+0xc2>
 800c2d0:	4663      	mov	r3, ip
 800c2d2:	9a06      	ldr	r2, [sp, #24]
 800c2d4:	509d      	str	r5, [r3, r2]
 800c2d6:	9b01      	ldr	r3, [sp, #4]
 800c2d8:	6818      	ldr	r0, [r3, #0]
 800c2da:	0c00      	lsrs	r0, r0, #16
 800c2dc:	d020      	beq.n	800c320 <__multiply+0x144>
 800c2de:	4663      	mov	r3, ip
 800c2e0:	0025      	movs	r5, r4
 800c2e2:	4661      	mov	r1, ip
 800c2e4:	2700      	movs	r7, #0
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	3514      	adds	r5, #20
 800c2ea:	682a      	ldr	r2, [r5, #0]
 800c2ec:	680e      	ldr	r6, [r1, #0]
 800c2ee:	b292      	uxth	r2, r2
 800c2f0:	4342      	muls	r2, r0
 800c2f2:	0c36      	lsrs	r6, r6, #16
 800c2f4:	1992      	adds	r2, r2, r6
 800c2f6:	19d2      	adds	r2, r2, r7
 800c2f8:	0416      	lsls	r6, r2, #16
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	431e      	orrs	r6, r3
 800c2fe:	600e      	str	r6, [r1, #0]
 800c300:	cd40      	ldmia	r5!, {r6}
 800c302:	684b      	ldr	r3, [r1, #4]
 800c304:	0c36      	lsrs	r6, r6, #16
 800c306:	4346      	muls	r6, r0
 800c308:	b29b      	uxth	r3, r3
 800c30a:	0c12      	lsrs	r2, r2, #16
 800c30c:	18f3      	adds	r3, r6, r3
 800c30e:	189b      	adds	r3, r3, r2
 800c310:	9a05      	ldr	r2, [sp, #20]
 800c312:	0c1f      	lsrs	r7, r3, #16
 800c314:	3104      	adds	r1, #4
 800c316:	42aa      	cmp	r2, r5
 800c318:	d8e7      	bhi.n	800c2ea <__multiply+0x10e>
 800c31a:	4662      	mov	r2, ip
 800c31c:	9906      	ldr	r1, [sp, #24]
 800c31e:	5053      	str	r3, [r2, r1]
 800c320:	9b01      	ldr	r3, [sp, #4]
 800c322:	3304      	adds	r3, #4
 800c324:	9301      	str	r3, [sp, #4]
 800c326:	2304      	movs	r3, #4
 800c328:	449c      	add	ip, r3
 800c32a:	e79b      	b.n	800c264 <__multiply+0x88>
 800c32c:	9b03      	ldr	r3, [sp, #12]
 800c32e:	3b01      	subs	r3, #1
 800c330:	9303      	str	r3, [sp, #12]
 800c332:	e79b      	b.n	800c26c <__multiply+0x90>
 800c334:	0800e637 	.word	0x0800e637
 800c338:	0800e6a0 	.word	0x0800e6a0

0800c33c <__pow5mult>:
 800c33c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c33e:	2303      	movs	r3, #3
 800c340:	0015      	movs	r5, r2
 800c342:	0007      	movs	r7, r0
 800c344:	000e      	movs	r6, r1
 800c346:	401a      	ands	r2, r3
 800c348:	421d      	tst	r5, r3
 800c34a:	d008      	beq.n	800c35e <__pow5mult+0x22>
 800c34c:	491a      	ldr	r1, [pc, #104]	; (800c3b8 <__pow5mult+0x7c>)
 800c34e:	3a01      	subs	r2, #1
 800c350:	0092      	lsls	r2, r2, #2
 800c352:	5852      	ldr	r2, [r2, r1]
 800c354:	2300      	movs	r3, #0
 800c356:	0031      	movs	r1, r6
 800c358:	f7ff fe9c 	bl	800c094 <__multadd>
 800c35c:	0006      	movs	r6, r0
 800c35e:	10ad      	asrs	r5, r5, #2
 800c360:	d027      	beq.n	800c3b2 <__pow5mult+0x76>
 800c362:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800c364:	2c00      	cmp	r4, #0
 800c366:	d107      	bne.n	800c378 <__pow5mult+0x3c>
 800c368:	0038      	movs	r0, r7
 800c36a:	4914      	ldr	r1, [pc, #80]	; (800c3bc <__pow5mult+0x80>)
 800c36c:	f7ff ff1e 	bl	800c1ac <__i2b>
 800c370:	2300      	movs	r3, #0
 800c372:	0004      	movs	r4, r0
 800c374:	6438      	str	r0, [r7, #64]	; 0x40
 800c376:	6003      	str	r3, [r0, #0]
 800c378:	2301      	movs	r3, #1
 800c37a:	421d      	tst	r5, r3
 800c37c:	d00a      	beq.n	800c394 <__pow5mult+0x58>
 800c37e:	0031      	movs	r1, r6
 800c380:	0022      	movs	r2, r4
 800c382:	0038      	movs	r0, r7
 800c384:	f7ff ff2a 	bl	800c1dc <__multiply>
 800c388:	0031      	movs	r1, r6
 800c38a:	9001      	str	r0, [sp, #4]
 800c38c:	0038      	movs	r0, r7
 800c38e:	f7ff fe77 	bl	800c080 <_Bfree>
 800c392:	9e01      	ldr	r6, [sp, #4]
 800c394:	106d      	asrs	r5, r5, #1
 800c396:	d00c      	beq.n	800c3b2 <__pow5mult+0x76>
 800c398:	6820      	ldr	r0, [r4, #0]
 800c39a:	2800      	cmp	r0, #0
 800c39c:	d107      	bne.n	800c3ae <__pow5mult+0x72>
 800c39e:	0022      	movs	r2, r4
 800c3a0:	0021      	movs	r1, r4
 800c3a2:	0038      	movs	r0, r7
 800c3a4:	f7ff ff1a 	bl	800c1dc <__multiply>
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	6020      	str	r0, [r4, #0]
 800c3ac:	6003      	str	r3, [r0, #0]
 800c3ae:	0004      	movs	r4, r0
 800c3b0:	e7e2      	b.n	800c378 <__pow5mult+0x3c>
 800c3b2:	0030      	movs	r0, r6
 800c3b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c3b6:	46c0      	nop			; (mov r8, r8)
 800c3b8:	0800e7f0 	.word	0x0800e7f0
 800c3bc:	00000271 	.word	0x00000271

0800c3c0 <__lshift>:
 800c3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3c2:	000c      	movs	r4, r1
 800c3c4:	0017      	movs	r7, r2
 800c3c6:	6923      	ldr	r3, [r4, #16]
 800c3c8:	1155      	asrs	r5, r2, #5
 800c3ca:	b087      	sub	sp, #28
 800c3cc:	18eb      	adds	r3, r5, r3
 800c3ce:	9302      	str	r3, [sp, #8]
 800c3d0:	3301      	adds	r3, #1
 800c3d2:	9301      	str	r3, [sp, #4]
 800c3d4:	6849      	ldr	r1, [r1, #4]
 800c3d6:	68a3      	ldr	r3, [r4, #8]
 800c3d8:	9004      	str	r0, [sp, #16]
 800c3da:	9a01      	ldr	r2, [sp, #4]
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	db10      	blt.n	800c402 <__lshift+0x42>
 800c3e0:	9804      	ldr	r0, [sp, #16]
 800c3e2:	f7ff fe25 	bl	800c030 <_Balloc>
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	0002      	movs	r2, r0
 800c3ea:	0006      	movs	r6, r0
 800c3ec:	0019      	movs	r1, r3
 800c3ee:	3214      	adds	r2, #20
 800c3f0:	4298      	cmp	r0, r3
 800c3f2:	d10c      	bne.n	800c40e <__lshift+0x4e>
 800c3f4:	31df      	adds	r1, #223	; 0xdf
 800c3f6:	0032      	movs	r2, r6
 800c3f8:	4b26      	ldr	r3, [pc, #152]	; (800c494 <__lshift+0xd4>)
 800c3fa:	4827      	ldr	r0, [pc, #156]	; (800c498 <__lshift+0xd8>)
 800c3fc:	31ff      	adds	r1, #255	; 0xff
 800c3fe:	f000 fa01 	bl	800c804 <__assert_func>
 800c402:	3101      	adds	r1, #1
 800c404:	005b      	lsls	r3, r3, #1
 800c406:	e7e8      	b.n	800c3da <__lshift+0x1a>
 800c408:	0098      	lsls	r0, r3, #2
 800c40a:	5011      	str	r1, [r2, r0]
 800c40c:	3301      	adds	r3, #1
 800c40e:	42ab      	cmp	r3, r5
 800c410:	dbfa      	blt.n	800c408 <__lshift+0x48>
 800c412:	43eb      	mvns	r3, r5
 800c414:	17db      	asrs	r3, r3, #31
 800c416:	401d      	ands	r5, r3
 800c418:	211f      	movs	r1, #31
 800c41a:	0023      	movs	r3, r4
 800c41c:	0038      	movs	r0, r7
 800c41e:	00ad      	lsls	r5, r5, #2
 800c420:	1955      	adds	r5, r2, r5
 800c422:	6922      	ldr	r2, [r4, #16]
 800c424:	3314      	adds	r3, #20
 800c426:	0092      	lsls	r2, r2, #2
 800c428:	4008      	ands	r0, r1
 800c42a:	4684      	mov	ip, r0
 800c42c:	189a      	adds	r2, r3, r2
 800c42e:	420f      	tst	r7, r1
 800c430:	d02a      	beq.n	800c488 <__lshift+0xc8>
 800c432:	3101      	adds	r1, #1
 800c434:	1a09      	subs	r1, r1, r0
 800c436:	9105      	str	r1, [sp, #20]
 800c438:	2100      	movs	r1, #0
 800c43a:	9503      	str	r5, [sp, #12]
 800c43c:	4667      	mov	r7, ip
 800c43e:	6818      	ldr	r0, [r3, #0]
 800c440:	40b8      	lsls	r0, r7
 800c442:	4308      	orrs	r0, r1
 800c444:	9903      	ldr	r1, [sp, #12]
 800c446:	c101      	stmia	r1!, {r0}
 800c448:	9103      	str	r1, [sp, #12]
 800c44a:	9805      	ldr	r0, [sp, #20]
 800c44c:	cb02      	ldmia	r3!, {r1}
 800c44e:	40c1      	lsrs	r1, r0
 800c450:	429a      	cmp	r2, r3
 800c452:	d8f3      	bhi.n	800c43c <__lshift+0x7c>
 800c454:	0020      	movs	r0, r4
 800c456:	3015      	adds	r0, #21
 800c458:	2304      	movs	r3, #4
 800c45a:	4282      	cmp	r2, r0
 800c45c:	d304      	bcc.n	800c468 <__lshift+0xa8>
 800c45e:	1b13      	subs	r3, r2, r4
 800c460:	3b15      	subs	r3, #21
 800c462:	089b      	lsrs	r3, r3, #2
 800c464:	3301      	adds	r3, #1
 800c466:	009b      	lsls	r3, r3, #2
 800c468:	50e9      	str	r1, [r5, r3]
 800c46a:	2900      	cmp	r1, #0
 800c46c:	d002      	beq.n	800c474 <__lshift+0xb4>
 800c46e:	9b02      	ldr	r3, [sp, #8]
 800c470:	3302      	adds	r3, #2
 800c472:	9301      	str	r3, [sp, #4]
 800c474:	9b01      	ldr	r3, [sp, #4]
 800c476:	9804      	ldr	r0, [sp, #16]
 800c478:	3b01      	subs	r3, #1
 800c47a:	0021      	movs	r1, r4
 800c47c:	6133      	str	r3, [r6, #16]
 800c47e:	f7ff fdff 	bl	800c080 <_Bfree>
 800c482:	0030      	movs	r0, r6
 800c484:	b007      	add	sp, #28
 800c486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c488:	cb02      	ldmia	r3!, {r1}
 800c48a:	c502      	stmia	r5!, {r1}
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d8fb      	bhi.n	800c488 <__lshift+0xc8>
 800c490:	e7f0      	b.n	800c474 <__lshift+0xb4>
 800c492:	46c0      	nop			; (mov r8, r8)
 800c494:	0800e637 	.word	0x0800e637
 800c498:	0800e6a0 	.word	0x0800e6a0

0800c49c <__mcmp>:
 800c49c:	b530      	push	{r4, r5, lr}
 800c49e:	690b      	ldr	r3, [r1, #16]
 800c4a0:	6904      	ldr	r4, [r0, #16]
 800c4a2:	0002      	movs	r2, r0
 800c4a4:	1ae0      	subs	r0, r4, r3
 800c4a6:	429c      	cmp	r4, r3
 800c4a8:	d10e      	bne.n	800c4c8 <__mcmp+0x2c>
 800c4aa:	3214      	adds	r2, #20
 800c4ac:	009b      	lsls	r3, r3, #2
 800c4ae:	3114      	adds	r1, #20
 800c4b0:	0014      	movs	r4, r2
 800c4b2:	18c9      	adds	r1, r1, r3
 800c4b4:	18d2      	adds	r2, r2, r3
 800c4b6:	3a04      	subs	r2, #4
 800c4b8:	3904      	subs	r1, #4
 800c4ba:	6815      	ldr	r5, [r2, #0]
 800c4bc:	680b      	ldr	r3, [r1, #0]
 800c4be:	429d      	cmp	r5, r3
 800c4c0:	d003      	beq.n	800c4ca <__mcmp+0x2e>
 800c4c2:	2001      	movs	r0, #1
 800c4c4:	429d      	cmp	r5, r3
 800c4c6:	d303      	bcc.n	800c4d0 <__mcmp+0x34>
 800c4c8:	bd30      	pop	{r4, r5, pc}
 800c4ca:	4294      	cmp	r4, r2
 800c4cc:	d3f3      	bcc.n	800c4b6 <__mcmp+0x1a>
 800c4ce:	e7fb      	b.n	800c4c8 <__mcmp+0x2c>
 800c4d0:	4240      	negs	r0, r0
 800c4d2:	e7f9      	b.n	800c4c8 <__mcmp+0x2c>

0800c4d4 <__mdiff>:
 800c4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4d6:	000e      	movs	r6, r1
 800c4d8:	0007      	movs	r7, r0
 800c4da:	0011      	movs	r1, r2
 800c4dc:	0030      	movs	r0, r6
 800c4de:	b087      	sub	sp, #28
 800c4e0:	0014      	movs	r4, r2
 800c4e2:	f7ff ffdb 	bl	800c49c <__mcmp>
 800c4e6:	1e05      	subs	r5, r0, #0
 800c4e8:	d110      	bne.n	800c50c <__mdiff+0x38>
 800c4ea:	0001      	movs	r1, r0
 800c4ec:	0038      	movs	r0, r7
 800c4ee:	f7ff fd9f 	bl	800c030 <_Balloc>
 800c4f2:	1e02      	subs	r2, r0, #0
 800c4f4:	d104      	bne.n	800c500 <__mdiff+0x2c>
 800c4f6:	4b3f      	ldr	r3, [pc, #252]	; (800c5f4 <__mdiff+0x120>)
 800c4f8:	483f      	ldr	r0, [pc, #252]	; (800c5f8 <__mdiff+0x124>)
 800c4fa:	4940      	ldr	r1, [pc, #256]	; (800c5fc <__mdiff+0x128>)
 800c4fc:	f000 f982 	bl	800c804 <__assert_func>
 800c500:	2301      	movs	r3, #1
 800c502:	6145      	str	r5, [r0, #20]
 800c504:	6103      	str	r3, [r0, #16]
 800c506:	0010      	movs	r0, r2
 800c508:	b007      	add	sp, #28
 800c50a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c50c:	2301      	movs	r3, #1
 800c50e:	9301      	str	r3, [sp, #4]
 800c510:	2800      	cmp	r0, #0
 800c512:	db04      	blt.n	800c51e <__mdiff+0x4a>
 800c514:	0023      	movs	r3, r4
 800c516:	0034      	movs	r4, r6
 800c518:	001e      	movs	r6, r3
 800c51a:	2300      	movs	r3, #0
 800c51c:	9301      	str	r3, [sp, #4]
 800c51e:	0038      	movs	r0, r7
 800c520:	6861      	ldr	r1, [r4, #4]
 800c522:	f7ff fd85 	bl	800c030 <_Balloc>
 800c526:	1e02      	subs	r2, r0, #0
 800c528:	d103      	bne.n	800c532 <__mdiff+0x5e>
 800c52a:	4b32      	ldr	r3, [pc, #200]	; (800c5f4 <__mdiff+0x120>)
 800c52c:	4832      	ldr	r0, [pc, #200]	; (800c5f8 <__mdiff+0x124>)
 800c52e:	4934      	ldr	r1, [pc, #208]	; (800c600 <__mdiff+0x12c>)
 800c530:	e7e4      	b.n	800c4fc <__mdiff+0x28>
 800c532:	9b01      	ldr	r3, [sp, #4]
 800c534:	2700      	movs	r7, #0
 800c536:	60c3      	str	r3, [r0, #12]
 800c538:	6920      	ldr	r0, [r4, #16]
 800c53a:	3414      	adds	r4, #20
 800c53c:	0083      	lsls	r3, r0, #2
 800c53e:	18e3      	adds	r3, r4, r3
 800c540:	0021      	movs	r1, r4
 800c542:	9401      	str	r4, [sp, #4]
 800c544:	0034      	movs	r4, r6
 800c546:	9302      	str	r3, [sp, #8]
 800c548:	6933      	ldr	r3, [r6, #16]
 800c54a:	3414      	adds	r4, #20
 800c54c:	009b      	lsls	r3, r3, #2
 800c54e:	18e3      	adds	r3, r4, r3
 800c550:	9303      	str	r3, [sp, #12]
 800c552:	0013      	movs	r3, r2
 800c554:	3314      	adds	r3, #20
 800c556:	469c      	mov	ip, r3
 800c558:	9305      	str	r3, [sp, #20]
 800c55a:	9104      	str	r1, [sp, #16]
 800c55c:	9b04      	ldr	r3, [sp, #16]
 800c55e:	cc02      	ldmia	r4!, {r1}
 800c560:	cb20      	ldmia	r3!, {r5}
 800c562:	9304      	str	r3, [sp, #16]
 800c564:	b2ab      	uxth	r3, r5
 800c566:	19df      	adds	r7, r3, r7
 800c568:	b28b      	uxth	r3, r1
 800c56a:	1afb      	subs	r3, r7, r3
 800c56c:	0c09      	lsrs	r1, r1, #16
 800c56e:	0c2d      	lsrs	r5, r5, #16
 800c570:	1a6d      	subs	r5, r5, r1
 800c572:	1419      	asrs	r1, r3, #16
 800c574:	1869      	adds	r1, r5, r1
 800c576:	b29b      	uxth	r3, r3
 800c578:	140f      	asrs	r7, r1, #16
 800c57a:	0409      	lsls	r1, r1, #16
 800c57c:	4319      	orrs	r1, r3
 800c57e:	4663      	mov	r3, ip
 800c580:	c302      	stmia	r3!, {r1}
 800c582:	469c      	mov	ip, r3
 800c584:	9b03      	ldr	r3, [sp, #12]
 800c586:	42a3      	cmp	r3, r4
 800c588:	d8e8      	bhi.n	800c55c <__mdiff+0x88>
 800c58a:	0031      	movs	r1, r6
 800c58c:	9c03      	ldr	r4, [sp, #12]
 800c58e:	3115      	adds	r1, #21
 800c590:	2304      	movs	r3, #4
 800c592:	428c      	cmp	r4, r1
 800c594:	d304      	bcc.n	800c5a0 <__mdiff+0xcc>
 800c596:	1ba3      	subs	r3, r4, r6
 800c598:	3b15      	subs	r3, #21
 800c59a:	089b      	lsrs	r3, r3, #2
 800c59c:	3301      	adds	r3, #1
 800c59e:	009b      	lsls	r3, r3, #2
 800c5a0:	9901      	ldr	r1, [sp, #4]
 800c5a2:	18cd      	adds	r5, r1, r3
 800c5a4:	9905      	ldr	r1, [sp, #20]
 800c5a6:	002e      	movs	r6, r5
 800c5a8:	18cb      	adds	r3, r1, r3
 800c5aa:	469c      	mov	ip, r3
 800c5ac:	9902      	ldr	r1, [sp, #8]
 800c5ae:	428e      	cmp	r6, r1
 800c5b0:	d310      	bcc.n	800c5d4 <__mdiff+0x100>
 800c5b2:	9e02      	ldr	r6, [sp, #8]
 800c5b4:	1ee9      	subs	r1, r5, #3
 800c5b6:	2400      	movs	r4, #0
 800c5b8:	428e      	cmp	r6, r1
 800c5ba:	d304      	bcc.n	800c5c6 <__mdiff+0xf2>
 800c5bc:	0031      	movs	r1, r6
 800c5be:	3103      	adds	r1, #3
 800c5c0:	1b49      	subs	r1, r1, r5
 800c5c2:	0889      	lsrs	r1, r1, #2
 800c5c4:	008c      	lsls	r4, r1, #2
 800c5c6:	191b      	adds	r3, r3, r4
 800c5c8:	3b04      	subs	r3, #4
 800c5ca:	6819      	ldr	r1, [r3, #0]
 800c5cc:	2900      	cmp	r1, #0
 800c5ce:	d00f      	beq.n	800c5f0 <__mdiff+0x11c>
 800c5d0:	6110      	str	r0, [r2, #16]
 800c5d2:	e798      	b.n	800c506 <__mdiff+0x32>
 800c5d4:	ce02      	ldmia	r6!, {r1}
 800c5d6:	b28c      	uxth	r4, r1
 800c5d8:	19e4      	adds	r4, r4, r7
 800c5da:	0c0f      	lsrs	r7, r1, #16
 800c5dc:	1421      	asrs	r1, r4, #16
 800c5de:	1879      	adds	r1, r7, r1
 800c5e0:	b2a4      	uxth	r4, r4
 800c5e2:	140f      	asrs	r7, r1, #16
 800c5e4:	0409      	lsls	r1, r1, #16
 800c5e6:	4321      	orrs	r1, r4
 800c5e8:	4664      	mov	r4, ip
 800c5ea:	c402      	stmia	r4!, {r1}
 800c5ec:	46a4      	mov	ip, r4
 800c5ee:	e7dd      	b.n	800c5ac <__mdiff+0xd8>
 800c5f0:	3801      	subs	r0, #1
 800c5f2:	e7e9      	b.n	800c5c8 <__mdiff+0xf4>
 800c5f4:	0800e637 	.word	0x0800e637
 800c5f8:	0800e6a0 	.word	0x0800e6a0
 800c5fc:	00000237 	.word	0x00000237
 800c600:	00000245 	.word	0x00000245

0800c604 <__d2b>:
 800c604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c606:	2101      	movs	r1, #1
 800c608:	0014      	movs	r4, r2
 800c60a:	001d      	movs	r5, r3
 800c60c:	9f08      	ldr	r7, [sp, #32]
 800c60e:	f7ff fd0f 	bl	800c030 <_Balloc>
 800c612:	1e06      	subs	r6, r0, #0
 800c614:	d105      	bne.n	800c622 <__d2b+0x1e>
 800c616:	0032      	movs	r2, r6
 800c618:	4b24      	ldr	r3, [pc, #144]	; (800c6ac <__d2b+0xa8>)
 800c61a:	4825      	ldr	r0, [pc, #148]	; (800c6b0 <__d2b+0xac>)
 800c61c:	4925      	ldr	r1, [pc, #148]	; (800c6b4 <__d2b+0xb0>)
 800c61e:	f000 f8f1 	bl	800c804 <__assert_func>
 800c622:	032b      	lsls	r3, r5, #12
 800c624:	006d      	lsls	r5, r5, #1
 800c626:	0b1b      	lsrs	r3, r3, #12
 800c628:	0d6d      	lsrs	r5, r5, #21
 800c62a:	d125      	bne.n	800c678 <__d2b+0x74>
 800c62c:	9301      	str	r3, [sp, #4]
 800c62e:	2c00      	cmp	r4, #0
 800c630:	d028      	beq.n	800c684 <__d2b+0x80>
 800c632:	4668      	mov	r0, sp
 800c634:	9400      	str	r4, [sp, #0]
 800c636:	f7ff fd8b 	bl	800c150 <__lo0bits>
 800c63a:	9b01      	ldr	r3, [sp, #4]
 800c63c:	9900      	ldr	r1, [sp, #0]
 800c63e:	2800      	cmp	r0, #0
 800c640:	d01e      	beq.n	800c680 <__d2b+0x7c>
 800c642:	2220      	movs	r2, #32
 800c644:	001c      	movs	r4, r3
 800c646:	1a12      	subs	r2, r2, r0
 800c648:	4094      	lsls	r4, r2
 800c64a:	0022      	movs	r2, r4
 800c64c:	40c3      	lsrs	r3, r0
 800c64e:	430a      	orrs	r2, r1
 800c650:	6172      	str	r2, [r6, #20]
 800c652:	9301      	str	r3, [sp, #4]
 800c654:	9c01      	ldr	r4, [sp, #4]
 800c656:	61b4      	str	r4, [r6, #24]
 800c658:	1e63      	subs	r3, r4, #1
 800c65a:	419c      	sbcs	r4, r3
 800c65c:	3401      	adds	r4, #1
 800c65e:	6134      	str	r4, [r6, #16]
 800c660:	2d00      	cmp	r5, #0
 800c662:	d017      	beq.n	800c694 <__d2b+0x90>
 800c664:	2435      	movs	r4, #53	; 0x35
 800c666:	4b14      	ldr	r3, [pc, #80]	; (800c6b8 <__d2b+0xb4>)
 800c668:	18ed      	adds	r5, r5, r3
 800c66a:	182d      	adds	r5, r5, r0
 800c66c:	603d      	str	r5, [r7, #0]
 800c66e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c670:	1a24      	subs	r4, r4, r0
 800c672:	601c      	str	r4, [r3, #0]
 800c674:	0030      	movs	r0, r6
 800c676:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c678:	2280      	movs	r2, #128	; 0x80
 800c67a:	0352      	lsls	r2, r2, #13
 800c67c:	4313      	orrs	r3, r2
 800c67e:	e7d5      	b.n	800c62c <__d2b+0x28>
 800c680:	6171      	str	r1, [r6, #20]
 800c682:	e7e7      	b.n	800c654 <__d2b+0x50>
 800c684:	a801      	add	r0, sp, #4
 800c686:	f7ff fd63 	bl	800c150 <__lo0bits>
 800c68a:	9b01      	ldr	r3, [sp, #4]
 800c68c:	2401      	movs	r4, #1
 800c68e:	6173      	str	r3, [r6, #20]
 800c690:	3020      	adds	r0, #32
 800c692:	e7e4      	b.n	800c65e <__d2b+0x5a>
 800c694:	4b09      	ldr	r3, [pc, #36]	; (800c6bc <__d2b+0xb8>)
 800c696:	18c0      	adds	r0, r0, r3
 800c698:	4b09      	ldr	r3, [pc, #36]	; (800c6c0 <__d2b+0xbc>)
 800c69a:	6038      	str	r0, [r7, #0]
 800c69c:	18e3      	adds	r3, r4, r3
 800c69e:	009b      	lsls	r3, r3, #2
 800c6a0:	18f3      	adds	r3, r6, r3
 800c6a2:	6958      	ldr	r0, [r3, #20]
 800c6a4:	f7ff fd3a 	bl	800c11c <__hi0bits>
 800c6a8:	0164      	lsls	r4, r4, #5
 800c6aa:	e7e0      	b.n	800c66e <__d2b+0x6a>
 800c6ac:	0800e637 	.word	0x0800e637
 800c6b0:	0800e6a0 	.word	0x0800e6a0
 800c6b4:	0000030f 	.word	0x0000030f
 800c6b8:	fffffbcd 	.word	0xfffffbcd
 800c6bc:	fffffbce 	.word	0xfffffbce
 800c6c0:	3fffffff 	.word	0x3fffffff

0800c6c4 <__ssprint_r>:
 800c6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6c6:	6813      	ldr	r3, [r2, #0]
 800c6c8:	b087      	sub	sp, #28
 800c6ca:	0017      	movs	r7, r2
 800c6cc:	9303      	str	r3, [sp, #12]
 800c6ce:	6893      	ldr	r3, [r2, #8]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	000c      	movs	r4, r1
 800c6d4:	9005      	str	r0, [sp, #20]
 800c6d6:	9202      	str	r2, [sp, #8]
 800c6d8:	9201      	str	r2, [sp, #4]
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d10d      	bne.n	800c6fa <__ssprint_r+0x36>
 800c6de:	2000      	movs	r0, #0
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	607b      	str	r3, [r7, #4]
 800c6e4:	b007      	add	sp, #28
 800c6e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6e8:	9b03      	ldr	r3, [sp, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	9302      	str	r3, [sp, #8]
 800c6ee:	9b03      	ldr	r3, [sp, #12]
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	9301      	str	r3, [sp, #4]
 800c6f4:	9b03      	ldr	r3, [sp, #12]
 800c6f6:	3308      	adds	r3, #8
 800c6f8:	9303      	str	r3, [sp, #12]
 800c6fa:	9a01      	ldr	r2, [sp, #4]
 800c6fc:	68a6      	ldr	r6, [r4, #8]
 800c6fe:	6823      	ldr	r3, [r4, #0]
 800c700:	2a00      	cmp	r2, #0
 800c702:	d0f1      	beq.n	800c6e8 <__ssprint_r+0x24>
 800c704:	42b2      	cmp	r2, r6
 800c706:	d32e      	bcc.n	800c766 <__ssprint_r+0xa2>
 800c708:	2190      	movs	r1, #144	; 0x90
 800c70a:	89a2      	ldrh	r2, [r4, #12]
 800c70c:	00c9      	lsls	r1, r1, #3
 800c70e:	420a      	tst	r2, r1
 800c710:	d029      	beq.n	800c766 <__ssprint_r+0xa2>
 800c712:	2003      	movs	r0, #3
 800c714:	6921      	ldr	r1, [r4, #16]
 800c716:	1a5b      	subs	r3, r3, r1
 800c718:	9304      	str	r3, [sp, #16]
 800c71a:	6963      	ldr	r3, [r4, #20]
 800c71c:	4343      	muls	r3, r0
 800c71e:	0fdd      	lsrs	r5, r3, #31
 800c720:	18ed      	adds	r5, r5, r3
 800c722:	9b04      	ldr	r3, [sp, #16]
 800c724:	9801      	ldr	r0, [sp, #4]
 800c726:	3301      	adds	r3, #1
 800c728:	181b      	adds	r3, r3, r0
 800c72a:	106d      	asrs	r5, r5, #1
 800c72c:	42ab      	cmp	r3, r5
 800c72e:	d900      	bls.n	800c732 <__ssprint_r+0x6e>
 800c730:	001d      	movs	r5, r3
 800c732:	0552      	lsls	r2, r2, #21
 800c734:	d532      	bpl.n	800c79c <__ssprint_r+0xd8>
 800c736:	0029      	movs	r1, r5
 800c738:	9805      	ldr	r0, [sp, #20]
 800c73a:	f7fc ffb7 	bl	80096ac <_malloc_r>
 800c73e:	1e06      	subs	r6, r0, #0
 800c740:	d036      	beq.n	800c7b0 <__ssprint_r+0xec>
 800c742:	9a04      	ldr	r2, [sp, #16]
 800c744:	6921      	ldr	r1, [r4, #16]
 800c746:	f7fc fe8e 	bl	8009466 <memcpy>
 800c74a:	89a2      	ldrh	r2, [r4, #12]
 800c74c:	4b1e      	ldr	r3, [pc, #120]	; (800c7c8 <__ssprint_r+0x104>)
 800c74e:	401a      	ands	r2, r3
 800c750:	2380      	movs	r3, #128	; 0x80
 800c752:	4313      	orrs	r3, r2
 800c754:	81a3      	strh	r3, [r4, #12]
 800c756:	9b04      	ldr	r3, [sp, #16]
 800c758:	6126      	str	r6, [r4, #16]
 800c75a:	18f6      	adds	r6, r6, r3
 800c75c:	6026      	str	r6, [r4, #0]
 800c75e:	6165      	str	r5, [r4, #20]
 800c760:	9e01      	ldr	r6, [sp, #4]
 800c762:	1aed      	subs	r5, r5, r3
 800c764:	60a5      	str	r5, [r4, #8]
 800c766:	9b01      	ldr	r3, [sp, #4]
 800c768:	429e      	cmp	r6, r3
 800c76a:	d900      	bls.n	800c76e <__ssprint_r+0xaa>
 800c76c:	001e      	movs	r6, r3
 800c76e:	0032      	movs	r2, r6
 800c770:	9902      	ldr	r1, [sp, #8]
 800c772:	6820      	ldr	r0, [r4, #0]
 800c774:	f000 f82a 	bl	800c7cc <memmove>
 800c778:	9a01      	ldr	r2, [sp, #4]
 800c77a:	68a3      	ldr	r3, [r4, #8]
 800c77c:	4694      	mov	ip, r2
 800c77e:	1b9b      	subs	r3, r3, r6
 800c780:	60a3      	str	r3, [r4, #8]
 800c782:	6823      	ldr	r3, [r4, #0]
 800c784:	199b      	adds	r3, r3, r6
 800c786:	6023      	str	r3, [r4, #0]
 800c788:	9b02      	ldr	r3, [sp, #8]
 800c78a:	4463      	add	r3, ip
 800c78c:	9302      	str	r3, [sp, #8]
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	1a9b      	subs	r3, r3, r2
 800c792:	60bb      	str	r3, [r7, #8]
 800c794:	d0a3      	beq.n	800c6de <__ssprint_r+0x1a>
 800c796:	2300      	movs	r3, #0
 800c798:	9301      	str	r3, [sp, #4]
 800c79a:	e7ae      	b.n	800c6fa <__ssprint_r+0x36>
 800c79c:	002a      	movs	r2, r5
 800c79e:	9805      	ldr	r0, [sp, #20]
 800c7a0:	f000 f8ae 	bl	800c900 <_realloc_r>
 800c7a4:	1e06      	subs	r6, r0, #0
 800c7a6:	d1d6      	bne.n	800c756 <__ssprint_r+0x92>
 800c7a8:	6921      	ldr	r1, [r4, #16]
 800c7aa:	9805      	ldr	r0, [sp, #20]
 800c7ac:	f7fc fecc 	bl	8009548 <_free_r>
 800c7b0:	230c      	movs	r3, #12
 800c7b2:	9a05      	ldr	r2, [sp, #20]
 800c7b4:	2001      	movs	r0, #1
 800c7b6:	6013      	str	r3, [r2, #0]
 800c7b8:	89a2      	ldrh	r2, [r4, #12]
 800c7ba:	3334      	adds	r3, #52	; 0x34
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	81a3      	strh	r3, [r4, #12]
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	4240      	negs	r0, r0
 800c7c4:	60bb      	str	r3, [r7, #8]
 800c7c6:	e78b      	b.n	800c6e0 <__ssprint_r+0x1c>
 800c7c8:	fffffb7f 	.word	0xfffffb7f

0800c7cc <memmove>:
 800c7cc:	b510      	push	{r4, lr}
 800c7ce:	4288      	cmp	r0, r1
 800c7d0:	d902      	bls.n	800c7d8 <memmove+0xc>
 800c7d2:	188b      	adds	r3, r1, r2
 800c7d4:	4298      	cmp	r0, r3
 800c7d6:	d303      	bcc.n	800c7e0 <memmove+0x14>
 800c7d8:	2300      	movs	r3, #0
 800c7da:	e007      	b.n	800c7ec <memmove+0x20>
 800c7dc:	5c8b      	ldrb	r3, [r1, r2]
 800c7de:	5483      	strb	r3, [r0, r2]
 800c7e0:	3a01      	subs	r2, #1
 800c7e2:	d2fb      	bcs.n	800c7dc <memmove+0x10>
 800c7e4:	bd10      	pop	{r4, pc}
 800c7e6:	5ccc      	ldrb	r4, [r1, r3]
 800c7e8:	54c4      	strb	r4, [r0, r3]
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d1fa      	bne.n	800c7e6 <memmove+0x1a>
 800c7f0:	e7f8      	b.n	800c7e4 <memmove+0x18>
	...

0800c7f4 <__locale_mb_cur_max>:
 800c7f4:	2294      	movs	r2, #148	; 0x94
 800c7f6:	4b02      	ldr	r3, [pc, #8]	; (800c800 <__locale_mb_cur_max+0xc>)
 800c7f8:	0052      	lsls	r2, r2, #1
 800c7fa:	5c98      	ldrb	r0, [r3, r2]
 800c7fc:	4770      	bx	lr
 800c7fe:	46c0      	nop			; (mov r8, r8)
 800c800:	20000558 	.word	0x20000558

0800c804 <__assert_func>:
 800c804:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c806:	0014      	movs	r4, r2
 800c808:	001a      	movs	r2, r3
 800c80a:	4b09      	ldr	r3, [pc, #36]	; (800c830 <__assert_func+0x2c>)
 800c80c:	0005      	movs	r5, r0
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	000e      	movs	r6, r1
 800c812:	68d8      	ldr	r0, [r3, #12]
 800c814:	4b07      	ldr	r3, [pc, #28]	; (800c834 <__assert_func+0x30>)
 800c816:	2c00      	cmp	r4, #0
 800c818:	d101      	bne.n	800c81e <__assert_func+0x1a>
 800c81a:	4b07      	ldr	r3, [pc, #28]	; (800c838 <__assert_func+0x34>)
 800c81c:	001c      	movs	r4, r3
 800c81e:	4907      	ldr	r1, [pc, #28]	; (800c83c <__assert_func+0x38>)
 800c820:	9301      	str	r3, [sp, #4]
 800c822:	9402      	str	r4, [sp, #8]
 800c824:	002b      	movs	r3, r5
 800c826:	9600      	str	r6, [sp, #0]
 800c828:	f000 fa1e 	bl	800cc68 <fiprintf>
 800c82c:	f001 f99b 	bl	800db66 <abort>
 800c830:	20000140 	.word	0x20000140
 800c834:	0800e806 	.word	0x0800e806
 800c838:	0800e841 	.word	0x0800e841
 800c83c:	0800e813 	.word	0x0800e813

0800c840 <_calloc_r>:
 800c840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c842:	2400      	movs	r4, #0
 800c844:	0c0b      	lsrs	r3, r1, #16
 800c846:	0c16      	lsrs	r6, r2, #16
 800c848:	42a3      	cmp	r3, r4
 800c84a:	d133      	bne.n	800c8b4 <_calloc_r+0x74>
 800c84c:	42a6      	cmp	r6, r4
 800c84e:	d121      	bne.n	800c894 <_calloc_r+0x54>
 800c850:	b28b      	uxth	r3, r1
 800c852:	b291      	uxth	r1, r2
 800c854:	4359      	muls	r1, r3
 800c856:	f7fc ff29 	bl	80096ac <_malloc_r>
 800c85a:	1e05      	subs	r5, r0, #0
 800c85c:	d033      	beq.n	800c8c6 <_calloc_r+0x86>
 800c85e:	0003      	movs	r3, r0
 800c860:	3b08      	subs	r3, #8
 800c862:	685a      	ldr	r2, [r3, #4]
 800c864:	2303      	movs	r3, #3
 800c866:	439a      	bics	r2, r3
 800c868:	3a04      	subs	r2, #4
 800c86a:	2a24      	cmp	r2, #36	; 0x24
 800c86c:	d832      	bhi.n	800c8d4 <_calloc_r+0x94>
 800c86e:	0003      	movs	r3, r0
 800c870:	2a13      	cmp	r2, #19
 800c872:	d90a      	bls.n	800c88a <_calloc_r+0x4a>
 800c874:	6004      	str	r4, [r0, #0]
 800c876:	6044      	str	r4, [r0, #4]
 800c878:	3308      	adds	r3, #8
 800c87a:	2a1b      	cmp	r2, #27
 800c87c:	d905      	bls.n	800c88a <_calloc_r+0x4a>
 800c87e:	6084      	str	r4, [r0, #8]
 800c880:	60c4      	str	r4, [r0, #12]
 800c882:	2a24      	cmp	r2, #36	; 0x24
 800c884:	d021      	beq.n	800c8ca <_calloc_r+0x8a>
 800c886:	0003      	movs	r3, r0
 800c888:	3310      	adds	r3, #16
 800c88a:	2200      	movs	r2, #0
 800c88c:	601a      	str	r2, [r3, #0]
 800c88e:	605a      	str	r2, [r3, #4]
 800c890:	609a      	str	r2, [r3, #8]
 800c892:	e018      	b.n	800c8c6 <_calloc_r+0x86>
 800c894:	1c33      	adds	r3, r6, #0
 800c896:	1c0d      	adds	r5, r1, #0
 800c898:	b289      	uxth	r1, r1
 800c89a:	b292      	uxth	r2, r2
 800c89c:	434a      	muls	r2, r1
 800c89e:	b2ad      	uxth	r5, r5
 800c8a0:	b299      	uxth	r1, r3
 800c8a2:	4369      	muls	r1, r5
 800c8a4:	0c13      	lsrs	r3, r2, #16
 800c8a6:	18c9      	adds	r1, r1, r3
 800c8a8:	0c0b      	lsrs	r3, r1, #16
 800c8aa:	d107      	bne.n	800c8bc <_calloc_r+0x7c>
 800c8ac:	0409      	lsls	r1, r1, #16
 800c8ae:	b292      	uxth	r2, r2
 800c8b0:	4311      	orrs	r1, r2
 800c8b2:	e7d0      	b.n	800c856 <_calloc_r+0x16>
 800c8b4:	2e00      	cmp	r6, #0
 800c8b6:	d101      	bne.n	800c8bc <_calloc_r+0x7c>
 800c8b8:	1c15      	adds	r5, r2, #0
 800c8ba:	e7ed      	b.n	800c898 <_calloc_r+0x58>
 800c8bc:	f7fc fd92 	bl	80093e4 <__errno>
 800c8c0:	230c      	movs	r3, #12
 800c8c2:	2500      	movs	r5, #0
 800c8c4:	6003      	str	r3, [r0, #0]
 800c8c6:	0028      	movs	r0, r5
 800c8c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8ca:	0003      	movs	r3, r0
 800c8cc:	6104      	str	r4, [r0, #16]
 800c8ce:	3318      	adds	r3, #24
 800c8d0:	6144      	str	r4, [r0, #20]
 800c8d2:	e7da      	b.n	800c88a <_calloc_r+0x4a>
 800c8d4:	2100      	movs	r1, #0
 800c8d6:	f7fc fcfd 	bl	80092d4 <memset>
 800c8da:	e7f4      	b.n	800c8c6 <_calloc_r+0x86>

0800c8dc <__ascii_mbtowc>:
 800c8dc:	b082      	sub	sp, #8
 800c8de:	2900      	cmp	r1, #0
 800c8e0:	d100      	bne.n	800c8e4 <__ascii_mbtowc+0x8>
 800c8e2:	a901      	add	r1, sp, #4
 800c8e4:	1e10      	subs	r0, r2, #0
 800c8e6:	d006      	beq.n	800c8f6 <__ascii_mbtowc+0x1a>
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d006      	beq.n	800c8fa <__ascii_mbtowc+0x1e>
 800c8ec:	7813      	ldrb	r3, [r2, #0]
 800c8ee:	600b      	str	r3, [r1, #0]
 800c8f0:	7810      	ldrb	r0, [r2, #0]
 800c8f2:	1e43      	subs	r3, r0, #1
 800c8f4:	4198      	sbcs	r0, r3
 800c8f6:	b002      	add	sp, #8
 800c8f8:	4770      	bx	lr
 800c8fa:	2002      	movs	r0, #2
 800c8fc:	4240      	negs	r0, r0
 800c8fe:	e7fa      	b.n	800c8f6 <__ascii_mbtowc+0x1a>

0800c900 <_realloc_r>:
 800c900:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c902:	b087      	sub	sp, #28
 800c904:	1e0c      	subs	r4, r1, #0
 800c906:	9001      	str	r0, [sp, #4]
 800c908:	9205      	str	r2, [sp, #20]
 800c90a:	d106      	bne.n	800c91a <_realloc_r+0x1a>
 800c90c:	0011      	movs	r1, r2
 800c90e:	f7fc fecd 	bl	80096ac <_malloc_r>
 800c912:	0007      	movs	r7, r0
 800c914:	0038      	movs	r0, r7
 800c916:	b007      	add	sp, #28
 800c918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c91a:	9801      	ldr	r0, [sp, #4]
 800c91c:	f7fd f8da 	bl	8009ad4 <__malloc_lock>
 800c920:	0023      	movs	r3, r4
 800c922:	3b08      	subs	r3, #8
 800c924:	685f      	ldr	r7, [r3, #4]
 800c926:	9304      	str	r3, [sp, #16]
 800c928:	9b05      	ldr	r3, [sp, #20]
 800c92a:	330b      	adds	r3, #11
 800c92c:	2b16      	cmp	r3, #22
 800c92e:	d908      	bls.n	800c942 <_realloc_r+0x42>
 800c930:	2207      	movs	r2, #7
 800c932:	4393      	bics	r3, r2
 800c934:	9300      	str	r3, [sp, #0]
 800c936:	d506      	bpl.n	800c946 <_realloc_r+0x46>
 800c938:	230c      	movs	r3, #12
 800c93a:	9a01      	ldr	r2, [sp, #4]
 800c93c:	2700      	movs	r7, #0
 800c93e:	6013      	str	r3, [r2, #0]
 800c940:	e7e8      	b.n	800c914 <_realloc_r+0x14>
 800c942:	2310      	movs	r3, #16
 800c944:	9300      	str	r3, [sp, #0]
 800c946:	9b00      	ldr	r3, [sp, #0]
 800c948:	9a05      	ldr	r2, [sp, #20]
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d3f4      	bcc.n	800c938 <_realloc_r+0x38>
 800c94e:	9b04      	ldr	r3, [sp, #16]
 800c950:	003a      	movs	r2, r7
 800c952:	9302      	str	r3, [sp, #8]
 800c954:	2303      	movs	r3, #3
 800c956:	439a      	bics	r2, r3
 800c958:	9b00      	ldr	r3, [sp, #0]
 800c95a:	9203      	str	r2, [sp, #12]
 800c95c:	4293      	cmp	r3, r2
 800c95e:	dc00      	bgt.n	800c962 <_realloc_r+0x62>
 800c960:	e169      	b.n	800cc36 <_realloc_r+0x336>
 800c962:	9b04      	ldr	r3, [sp, #16]
 800c964:	48b8      	ldr	r0, [pc, #736]	; (800cc48 <_realloc_r+0x348>)
 800c966:	189b      	adds	r3, r3, r2
 800c968:	6882      	ldr	r2, [r0, #8]
 800c96a:	4694      	mov	ip, r2
 800c96c:	685a      	ldr	r2, [r3, #4]
 800c96e:	459c      	cmp	ip, r3
 800c970:	d006      	beq.n	800c980 <_realloc_r+0x80>
 800c972:	2501      	movs	r5, #1
 800c974:	0011      	movs	r1, r2
 800c976:	43a9      	bics	r1, r5
 800c978:	1859      	adds	r1, r3, r1
 800c97a:	6849      	ldr	r1, [r1, #4]
 800c97c:	4229      	tst	r1, r5
 800c97e:	d144      	bne.n	800ca0a <_realloc_r+0x10a>
 800c980:	2103      	movs	r1, #3
 800c982:	438a      	bics	r2, r1
 800c984:	9903      	ldr	r1, [sp, #12]
 800c986:	188e      	adds	r6, r1, r2
 800c988:	9900      	ldr	r1, [sp, #0]
 800c98a:	459c      	cmp	ip, r3
 800c98c:	d117      	bne.n	800c9be <_realloc_r+0xbe>
 800c98e:	3110      	adds	r1, #16
 800c990:	42b1      	cmp	r1, r6
 800c992:	dc3c      	bgt.n	800ca0e <_realloc_r+0x10e>
 800c994:	9a00      	ldr	r2, [sp, #0]
 800c996:	2101      	movs	r1, #1
 800c998:	4694      	mov	ip, r2
 800c99a:	1ab6      	subs	r6, r6, r2
 800c99c:	0022      	movs	r2, r4
 800c99e:	9b04      	ldr	r3, [sp, #16]
 800c9a0:	430e      	orrs	r6, r1
 800c9a2:	4463      	add	r3, ip
 800c9a4:	6083      	str	r3, [r0, #8]
 800c9a6:	3a08      	subs	r2, #8
 800c9a8:	605e      	str	r6, [r3, #4]
 800c9aa:	6853      	ldr	r3, [r2, #4]
 800c9ac:	9801      	ldr	r0, [sp, #4]
 800c9ae:	400b      	ands	r3, r1
 800c9b0:	4661      	mov	r1, ip
 800c9b2:	430b      	orrs	r3, r1
 800c9b4:	6053      	str	r3, [r2, #4]
 800c9b6:	f7fd f895 	bl	8009ae4 <__malloc_unlock>
 800c9ba:	0027      	movs	r7, r4
 800c9bc:	e7aa      	b.n	800c914 <_realloc_r+0x14>
 800c9be:	42b1      	cmp	r1, r6
 800c9c0:	dc25      	bgt.n	800ca0e <_realloc_r+0x10e>
 800c9c2:	68da      	ldr	r2, [r3, #12]
 800c9c4:	689b      	ldr	r3, [r3, #8]
 800c9c6:	60da      	str	r2, [r3, #12]
 800c9c8:	6093      	str	r3, [r2, #8]
 800c9ca:	9b00      	ldr	r3, [sp, #0]
 800c9cc:	9a02      	ldr	r2, [sp, #8]
 800c9ce:	1af4      	subs	r4, r6, r3
 800c9d0:	9b02      	ldr	r3, [sp, #8]
 800c9d2:	1992      	adds	r2, r2, r6
 800c9d4:	6858      	ldr	r0, [r3, #4]
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	4018      	ands	r0, r3
 800c9da:	2c0f      	cmp	r4, #15
 800c9dc:	d800      	bhi.n	800c9e0 <_realloc_r+0xe0>
 800c9de:	e12c      	b.n	800cc3a <_realloc_r+0x33a>
 800c9e0:	9d00      	ldr	r5, [sp, #0]
 800c9e2:	9902      	ldr	r1, [sp, #8]
 800c9e4:	4328      	orrs	r0, r5
 800c9e6:	1949      	adds	r1, r1, r5
 800c9e8:	9d02      	ldr	r5, [sp, #8]
 800c9ea:	431c      	orrs	r4, r3
 800c9ec:	6068      	str	r0, [r5, #4]
 800c9ee:	604c      	str	r4, [r1, #4]
 800c9f0:	6850      	ldr	r0, [r2, #4]
 800c9f2:	3108      	adds	r1, #8
 800c9f4:	4303      	orrs	r3, r0
 800c9f6:	6053      	str	r3, [r2, #4]
 800c9f8:	9801      	ldr	r0, [sp, #4]
 800c9fa:	f7fc fda5 	bl	8009548 <_free_r>
 800c9fe:	9801      	ldr	r0, [sp, #4]
 800ca00:	f7fd f870 	bl	8009ae4 <__malloc_unlock>
 800ca04:	9f02      	ldr	r7, [sp, #8]
 800ca06:	3708      	adds	r7, #8
 800ca08:	e784      	b.n	800c914 <_realloc_r+0x14>
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	0013      	movs	r3, r2
 800ca0e:	07ff      	lsls	r7, r7, #31
 800ca10:	d500      	bpl.n	800ca14 <_realloc_r+0x114>
 800ca12:	e0c6      	b.n	800cba2 <_realloc_r+0x2a2>
 800ca14:	0021      	movs	r1, r4
 800ca16:	2003      	movs	r0, #3
 800ca18:	3908      	subs	r1, #8
 800ca1a:	680d      	ldr	r5, [r1, #0]
 800ca1c:	9904      	ldr	r1, [sp, #16]
 800ca1e:	1b4d      	subs	r5, r1, r5
 800ca20:	6869      	ldr	r1, [r5, #4]
 800ca22:	4381      	bics	r1, r0
 800ca24:	9803      	ldr	r0, [sp, #12]
 800ca26:	180f      	adds	r7, r1, r0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d100      	bne.n	800ca2e <_realloc_r+0x12e>
 800ca2c:	e084      	b.n	800cb38 <_realloc_r+0x238>
 800ca2e:	19d6      	adds	r6, r2, r7
 800ca30:	459c      	cmp	ip, r3
 800ca32:	d148      	bne.n	800cac6 <_realloc_r+0x1c6>
 800ca34:	9b00      	ldr	r3, [sp, #0]
 800ca36:	3310      	adds	r3, #16
 800ca38:	42b3      	cmp	r3, r6
 800ca3a:	dc7d      	bgt.n	800cb38 <_realloc_r+0x238>
 800ca3c:	68aa      	ldr	r2, [r5, #8]
 800ca3e:	68eb      	ldr	r3, [r5, #12]
 800ca40:	002f      	movs	r7, r5
 800ca42:	60d3      	str	r3, [r2, #12]
 800ca44:	609a      	str	r2, [r3, #8]
 800ca46:	0002      	movs	r2, r0
 800ca48:	3a04      	subs	r2, #4
 800ca4a:	3708      	adds	r7, #8
 800ca4c:	2a24      	cmp	r2, #36	; 0x24
 800ca4e:	d835      	bhi.n	800cabc <_realloc_r+0x1bc>
 800ca50:	003b      	movs	r3, r7
 800ca52:	2a13      	cmp	r2, #19
 800ca54:	d908      	bls.n	800ca68 <_realloc_r+0x168>
 800ca56:	6823      	ldr	r3, [r4, #0]
 800ca58:	60ab      	str	r3, [r5, #8]
 800ca5a:	6863      	ldr	r3, [r4, #4]
 800ca5c:	60eb      	str	r3, [r5, #12]
 800ca5e:	2a1b      	cmp	r2, #27
 800ca60:	d81a      	bhi.n	800ca98 <_realloc_r+0x198>
 800ca62:	002b      	movs	r3, r5
 800ca64:	3408      	adds	r4, #8
 800ca66:	3310      	adds	r3, #16
 800ca68:	6822      	ldr	r2, [r4, #0]
 800ca6a:	601a      	str	r2, [r3, #0]
 800ca6c:	6862      	ldr	r2, [r4, #4]
 800ca6e:	605a      	str	r2, [r3, #4]
 800ca70:	68a2      	ldr	r2, [r4, #8]
 800ca72:	609a      	str	r2, [r3, #8]
 800ca74:	9b00      	ldr	r3, [sp, #0]
 800ca76:	4a74      	ldr	r2, [pc, #464]	; (800cc48 <_realloc_r+0x348>)
 800ca78:	18eb      	adds	r3, r5, r3
 800ca7a:	6093      	str	r3, [r2, #8]
 800ca7c:	9a00      	ldr	r2, [sp, #0]
 800ca7e:	1ab6      	subs	r6, r6, r2
 800ca80:	2201      	movs	r2, #1
 800ca82:	4316      	orrs	r6, r2
 800ca84:	605e      	str	r6, [r3, #4]
 800ca86:	686b      	ldr	r3, [r5, #4]
 800ca88:	4013      	ands	r3, r2
 800ca8a:	9a00      	ldr	r2, [sp, #0]
 800ca8c:	4313      	orrs	r3, r2
 800ca8e:	606b      	str	r3, [r5, #4]
 800ca90:	9801      	ldr	r0, [sp, #4]
 800ca92:	f7fd f827 	bl	8009ae4 <__malloc_unlock>
 800ca96:	e73d      	b.n	800c914 <_realloc_r+0x14>
 800ca98:	68a3      	ldr	r3, [r4, #8]
 800ca9a:	612b      	str	r3, [r5, #16]
 800ca9c:	68e3      	ldr	r3, [r4, #12]
 800ca9e:	616b      	str	r3, [r5, #20]
 800caa0:	2a24      	cmp	r2, #36	; 0x24
 800caa2:	d003      	beq.n	800caac <_realloc_r+0x1ac>
 800caa4:	002b      	movs	r3, r5
 800caa6:	3410      	adds	r4, #16
 800caa8:	3318      	adds	r3, #24
 800caaa:	e7dd      	b.n	800ca68 <_realloc_r+0x168>
 800caac:	6923      	ldr	r3, [r4, #16]
 800caae:	61ab      	str	r3, [r5, #24]
 800cab0:	002b      	movs	r3, r5
 800cab2:	6962      	ldr	r2, [r4, #20]
 800cab4:	3320      	adds	r3, #32
 800cab6:	61ea      	str	r2, [r5, #28]
 800cab8:	3418      	adds	r4, #24
 800caba:	e7d5      	b.n	800ca68 <_realloc_r+0x168>
 800cabc:	0021      	movs	r1, r4
 800cabe:	0038      	movs	r0, r7
 800cac0:	f7ff fe84 	bl	800c7cc <memmove>
 800cac4:	e7d6      	b.n	800ca74 <_realloc_r+0x174>
 800cac6:	9a00      	ldr	r2, [sp, #0]
 800cac8:	42b2      	cmp	r2, r6
 800caca:	dc35      	bgt.n	800cb38 <_realloc_r+0x238>
 800cacc:	0028      	movs	r0, r5
 800cace:	68da      	ldr	r2, [r3, #12]
 800cad0:	689b      	ldr	r3, [r3, #8]
 800cad2:	3008      	adds	r0, #8
 800cad4:	60da      	str	r2, [r3, #12]
 800cad6:	6093      	str	r3, [r2, #8]
 800cad8:	68aa      	ldr	r2, [r5, #8]
 800cada:	68eb      	ldr	r3, [r5, #12]
 800cadc:	60d3      	str	r3, [r2, #12]
 800cade:	609a      	str	r2, [r3, #8]
 800cae0:	9a03      	ldr	r2, [sp, #12]
 800cae2:	3a04      	subs	r2, #4
 800cae4:	2a24      	cmp	r2, #36	; 0x24
 800cae6:	d823      	bhi.n	800cb30 <_realloc_r+0x230>
 800cae8:	2a13      	cmp	r2, #19
 800caea:	d907      	bls.n	800cafc <_realloc_r+0x1fc>
 800caec:	6823      	ldr	r3, [r4, #0]
 800caee:	60ab      	str	r3, [r5, #8]
 800caf0:	6863      	ldr	r3, [r4, #4]
 800caf2:	60eb      	str	r3, [r5, #12]
 800caf4:	2a1b      	cmp	r2, #27
 800caf6:	d809      	bhi.n	800cb0c <_realloc_r+0x20c>
 800caf8:	3408      	adds	r4, #8
 800cafa:	3008      	adds	r0, #8
 800cafc:	6823      	ldr	r3, [r4, #0]
 800cafe:	6003      	str	r3, [r0, #0]
 800cb00:	6863      	ldr	r3, [r4, #4]
 800cb02:	6043      	str	r3, [r0, #4]
 800cb04:	68a3      	ldr	r3, [r4, #8]
 800cb06:	6083      	str	r3, [r0, #8]
 800cb08:	9502      	str	r5, [sp, #8]
 800cb0a:	e75e      	b.n	800c9ca <_realloc_r+0xca>
 800cb0c:	68a3      	ldr	r3, [r4, #8]
 800cb0e:	612b      	str	r3, [r5, #16]
 800cb10:	68e3      	ldr	r3, [r4, #12]
 800cb12:	616b      	str	r3, [r5, #20]
 800cb14:	2a24      	cmp	r2, #36	; 0x24
 800cb16:	d003      	beq.n	800cb20 <_realloc_r+0x220>
 800cb18:	0028      	movs	r0, r5
 800cb1a:	3410      	adds	r4, #16
 800cb1c:	3018      	adds	r0, #24
 800cb1e:	e7ed      	b.n	800cafc <_realloc_r+0x1fc>
 800cb20:	0028      	movs	r0, r5
 800cb22:	6923      	ldr	r3, [r4, #16]
 800cb24:	3020      	adds	r0, #32
 800cb26:	61ab      	str	r3, [r5, #24]
 800cb28:	6963      	ldr	r3, [r4, #20]
 800cb2a:	3418      	adds	r4, #24
 800cb2c:	61eb      	str	r3, [r5, #28]
 800cb2e:	e7e5      	b.n	800cafc <_realloc_r+0x1fc>
 800cb30:	0021      	movs	r1, r4
 800cb32:	f7ff fe4b 	bl	800c7cc <memmove>
 800cb36:	e7e7      	b.n	800cb08 <_realloc_r+0x208>
 800cb38:	9b00      	ldr	r3, [sp, #0]
 800cb3a:	42bb      	cmp	r3, r7
 800cb3c:	dc31      	bgt.n	800cba2 <_realloc_r+0x2a2>
 800cb3e:	0028      	movs	r0, r5
 800cb40:	68aa      	ldr	r2, [r5, #8]
 800cb42:	68eb      	ldr	r3, [r5, #12]
 800cb44:	3008      	adds	r0, #8
 800cb46:	60d3      	str	r3, [r2, #12]
 800cb48:	609a      	str	r2, [r3, #8]
 800cb4a:	9a03      	ldr	r2, [sp, #12]
 800cb4c:	3a04      	subs	r2, #4
 800cb4e:	2a24      	cmp	r2, #36	; 0x24
 800cb50:	d823      	bhi.n	800cb9a <_realloc_r+0x29a>
 800cb52:	2a13      	cmp	r2, #19
 800cb54:	d907      	bls.n	800cb66 <_realloc_r+0x266>
 800cb56:	6823      	ldr	r3, [r4, #0]
 800cb58:	60ab      	str	r3, [r5, #8]
 800cb5a:	6863      	ldr	r3, [r4, #4]
 800cb5c:	60eb      	str	r3, [r5, #12]
 800cb5e:	2a1b      	cmp	r2, #27
 800cb60:	d809      	bhi.n	800cb76 <_realloc_r+0x276>
 800cb62:	3408      	adds	r4, #8
 800cb64:	3008      	adds	r0, #8
 800cb66:	6823      	ldr	r3, [r4, #0]
 800cb68:	6003      	str	r3, [r0, #0]
 800cb6a:	6863      	ldr	r3, [r4, #4]
 800cb6c:	6043      	str	r3, [r0, #4]
 800cb6e:	68a3      	ldr	r3, [r4, #8]
 800cb70:	6083      	str	r3, [r0, #8]
 800cb72:	003e      	movs	r6, r7
 800cb74:	e7c8      	b.n	800cb08 <_realloc_r+0x208>
 800cb76:	68a3      	ldr	r3, [r4, #8]
 800cb78:	612b      	str	r3, [r5, #16]
 800cb7a:	68e3      	ldr	r3, [r4, #12]
 800cb7c:	616b      	str	r3, [r5, #20]
 800cb7e:	2a24      	cmp	r2, #36	; 0x24
 800cb80:	d003      	beq.n	800cb8a <_realloc_r+0x28a>
 800cb82:	0028      	movs	r0, r5
 800cb84:	3410      	adds	r4, #16
 800cb86:	3018      	adds	r0, #24
 800cb88:	e7ed      	b.n	800cb66 <_realloc_r+0x266>
 800cb8a:	0028      	movs	r0, r5
 800cb8c:	6923      	ldr	r3, [r4, #16]
 800cb8e:	3020      	adds	r0, #32
 800cb90:	61ab      	str	r3, [r5, #24]
 800cb92:	6963      	ldr	r3, [r4, #20]
 800cb94:	3418      	adds	r4, #24
 800cb96:	61eb      	str	r3, [r5, #28]
 800cb98:	e7e5      	b.n	800cb66 <_realloc_r+0x266>
 800cb9a:	0021      	movs	r1, r4
 800cb9c:	f7ff fe16 	bl	800c7cc <memmove>
 800cba0:	e7e7      	b.n	800cb72 <_realloc_r+0x272>
 800cba2:	9905      	ldr	r1, [sp, #20]
 800cba4:	9801      	ldr	r0, [sp, #4]
 800cba6:	f7fc fd81 	bl	80096ac <_malloc_r>
 800cbaa:	1e07      	subs	r7, r0, #0
 800cbac:	d100      	bne.n	800cbb0 <_realloc_r+0x2b0>
 800cbae:	e76f      	b.n	800ca90 <_realloc_r+0x190>
 800cbb0:	0023      	movs	r3, r4
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	3b08      	subs	r3, #8
 800cbb6:	685b      	ldr	r3, [r3, #4]
 800cbb8:	4393      	bics	r3, r2
 800cbba:	9a04      	ldr	r2, [sp, #16]
 800cbbc:	18d3      	adds	r3, r2, r3
 800cbbe:	0002      	movs	r2, r0
 800cbc0:	3a08      	subs	r2, #8
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d105      	bne.n	800cbd2 <_realloc_r+0x2d2>
 800cbc6:	685e      	ldr	r6, [r3, #4]
 800cbc8:	2303      	movs	r3, #3
 800cbca:	439e      	bics	r6, r3
 800cbcc:	9b03      	ldr	r3, [sp, #12]
 800cbce:	18f6      	adds	r6, r6, r3
 800cbd0:	e6fb      	b.n	800c9ca <_realloc_r+0xca>
 800cbd2:	9a03      	ldr	r2, [sp, #12]
 800cbd4:	3a04      	subs	r2, #4
 800cbd6:	2a24      	cmp	r2, #36	; 0x24
 800cbd8:	d829      	bhi.n	800cc2e <_realloc_r+0x32e>
 800cbda:	0003      	movs	r3, r0
 800cbdc:	0021      	movs	r1, r4
 800cbde:	2a13      	cmp	r2, #19
 800cbe0:	d908      	bls.n	800cbf4 <_realloc_r+0x2f4>
 800cbe2:	6823      	ldr	r3, [r4, #0]
 800cbe4:	6003      	str	r3, [r0, #0]
 800cbe6:	6863      	ldr	r3, [r4, #4]
 800cbe8:	6043      	str	r3, [r0, #4]
 800cbea:	2a1b      	cmp	r2, #27
 800cbec:	d80d      	bhi.n	800cc0a <_realloc_r+0x30a>
 800cbee:	0003      	movs	r3, r0
 800cbf0:	3108      	adds	r1, #8
 800cbf2:	3308      	adds	r3, #8
 800cbf4:	680a      	ldr	r2, [r1, #0]
 800cbf6:	601a      	str	r2, [r3, #0]
 800cbf8:	684a      	ldr	r2, [r1, #4]
 800cbfa:	605a      	str	r2, [r3, #4]
 800cbfc:	688a      	ldr	r2, [r1, #8]
 800cbfe:	609a      	str	r2, [r3, #8]
 800cc00:	0021      	movs	r1, r4
 800cc02:	9801      	ldr	r0, [sp, #4]
 800cc04:	f7fc fca0 	bl	8009548 <_free_r>
 800cc08:	e742      	b.n	800ca90 <_realloc_r+0x190>
 800cc0a:	68a3      	ldr	r3, [r4, #8]
 800cc0c:	6083      	str	r3, [r0, #8]
 800cc0e:	68e3      	ldr	r3, [r4, #12]
 800cc10:	60c3      	str	r3, [r0, #12]
 800cc12:	2a24      	cmp	r2, #36	; 0x24
 800cc14:	d003      	beq.n	800cc1e <_realloc_r+0x31e>
 800cc16:	0003      	movs	r3, r0
 800cc18:	3110      	adds	r1, #16
 800cc1a:	3310      	adds	r3, #16
 800cc1c:	e7ea      	b.n	800cbf4 <_realloc_r+0x2f4>
 800cc1e:	6923      	ldr	r3, [r4, #16]
 800cc20:	3118      	adds	r1, #24
 800cc22:	6103      	str	r3, [r0, #16]
 800cc24:	0003      	movs	r3, r0
 800cc26:	6962      	ldr	r2, [r4, #20]
 800cc28:	3318      	adds	r3, #24
 800cc2a:	6142      	str	r2, [r0, #20]
 800cc2c:	e7e2      	b.n	800cbf4 <_realloc_r+0x2f4>
 800cc2e:	0021      	movs	r1, r4
 800cc30:	f7ff fdcc 	bl	800c7cc <memmove>
 800cc34:	e7e4      	b.n	800cc00 <_realloc_r+0x300>
 800cc36:	9e03      	ldr	r6, [sp, #12]
 800cc38:	e6c7      	b.n	800c9ca <_realloc_r+0xca>
 800cc3a:	9902      	ldr	r1, [sp, #8]
 800cc3c:	4306      	orrs	r6, r0
 800cc3e:	604e      	str	r6, [r1, #4]
 800cc40:	6851      	ldr	r1, [r2, #4]
 800cc42:	430b      	orrs	r3, r1
 800cc44:	6053      	str	r3, [r2, #4]
 800cc46:	e6da      	b.n	800c9fe <_realloc_r+0xfe>
 800cc48:	20000148 	.word	0x20000148

0800cc4c <__ascii_wctomb>:
 800cc4c:	0003      	movs	r3, r0
 800cc4e:	1e08      	subs	r0, r1, #0
 800cc50:	d005      	beq.n	800cc5e <__ascii_wctomb+0x12>
 800cc52:	2aff      	cmp	r2, #255	; 0xff
 800cc54:	d904      	bls.n	800cc60 <__ascii_wctomb+0x14>
 800cc56:	228a      	movs	r2, #138	; 0x8a
 800cc58:	2001      	movs	r0, #1
 800cc5a:	601a      	str	r2, [r3, #0]
 800cc5c:	4240      	negs	r0, r0
 800cc5e:	4770      	bx	lr
 800cc60:	2001      	movs	r0, #1
 800cc62:	700a      	strb	r2, [r1, #0]
 800cc64:	e7fb      	b.n	800cc5e <__ascii_wctomb+0x12>
	...

0800cc68 <fiprintf>:
 800cc68:	b40e      	push	{r1, r2, r3}
 800cc6a:	b517      	push	{r0, r1, r2, r4, lr}
 800cc6c:	4c05      	ldr	r4, [pc, #20]	; (800cc84 <fiprintf+0x1c>)
 800cc6e:	ab05      	add	r3, sp, #20
 800cc70:	cb04      	ldmia	r3!, {r2}
 800cc72:	0001      	movs	r1, r0
 800cc74:	6820      	ldr	r0, [r4, #0]
 800cc76:	9301      	str	r3, [sp, #4]
 800cc78:	f000 f83a 	bl	800ccf0 <_vfiprintf_r>
 800cc7c:	bc1e      	pop	{r1, r2, r3, r4}
 800cc7e:	bc08      	pop	{r3}
 800cc80:	b003      	add	sp, #12
 800cc82:	4718      	bx	r3
 800cc84:	20000140 	.word	0x20000140

0800cc88 <__sprint_r>:
 800cc88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc8a:	6893      	ldr	r3, [r2, #8]
 800cc8c:	b085      	sub	sp, #20
 800cc8e:	9001      	str	r0, [sp, #4]
 800cc90:	000d      	movs	r5, r1
 800cc92:	0014      	movs	r4, r2
 800cc94:	1e18      	subs	r0, r3, #0
 800cc96:	d018      	beq.n	800ccca <__sprint_r+0x42>
 800cc98:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800cc9a:	049b      	lsls	r3, r3, #18
 800cc9c:	d524      	bpl.n	800cce8 <__sprint_r+0x60>
 800cc9e:	6817      	ldr	r7, [r2, #0]
 800cca0:	2600      	movs	r6, #0
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	9302      	str	r3, [sp, #8]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	9300      	str	r3, [sp, #0]
 800ccaa:	089b      	lsrs	r3, r3, #2
 800ccac:	9303      	str	r3, [sp, #12]
 800ccae:	9b03      	ldr	r3, [sp, #12]
 800ccb0:	42b3      	cmp	r3, r6
 800ccb2:	dc0e      	bgt.n	800ccd2 <__sprint_r+0x4a>
 800ccb4:	2203      	movs	r2, #3
 800ccb6:	9b00      	ldr	r3, [sp, #0]
 800ccb8:	68a0      	ldr	r0, [r4, #8]
 800ccba:	4393      	bics	r3, r2
 800ccbc:	1ac0      	subs	r0, r0, r3
 800ccbe:	60a0      	str	r0, [r4, #8]
 800ccc0:	3708      	adds	r7, #8
 800ccc2:	2800      	cmp	r0, #0
 800ccc4:	d1ec      	bne.n	800cca0 <__sprint_r+0x18>
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	60a3      	str	r3, [r4, #8]
 800ccca:	2300      	movs	r3, #0
 800cccc:	6063      	str	r3, [r4, #4]
 800ccce:	b005      	add	sp, #20
 800ccd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccd2:	9902      	ldr	r1, [sp, #8]
 800ccd4:	00b3      	lsls	r3, r6, #2
 800ccd6:	58c9      	ldr	r1, [r1, r3]
 800ccd8:	002a      	movs	r2, r5
 800ccda:	9801      	ldr	r0, [sp, #4]
 800ccdc:	f000 ff1a 	bl	800db14 <_fputwc_r>
 800cce0:	1c43      	adds	r3, r0, #1
 800cce2:	d0f0      	beq.n	800ccc6 <__sprint_r+0x3e>
 800cce4:	3601      	adds	r6, #1
 800cce6:	e7e2      	b.n	800ccae <__sprint_r+0x26>
 800cce8:	9801      	ldr	r0, [sp, #4]
 800ccea:	f000 fd13 	bl	800d714 <__sfvwrite_r>
 800ccee:	e7ea      	b.n	800ccc6 <__sprint_r+0x3e>

0800ccf0 <_vfiprintf_r>:
 800ccf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccf2:	b0c1      	sub	sp, #260	; 0x104
 800ccf4:	001c      	movs	r4, r3
 800ccf6:	001f      	movs	r7, r3
 800ccf8:	9006      	str	r0, [sp, #24]
 800ccfa:	9103      	str	r1, [sp, #12]
 800ccfc:	9207      	str	r2, [sp, #28]
 800ccfe:	2800      	cmp	r0, #0
 800cd00:	d004      	beq.n	800cd0c <_vfiprintf_r+0x1c>
 800cd02:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d101      	bne.n	800cd0c <_vfiprintf_r+0x1c>
 800cd08:	f7fc fa36 	bl	8009178 <__sinit>
 800cd0c:	9b03      	ldr	r3, [sp, #12]
 800cd0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd10:	07db      	lsls	r3, r3, #31
 800cd12:	d407      	bmi.n	800cd24 <_vfiprintf_r+0x34>
 800cd14:	9b03      	ldr	r3, [sp, #12]
 800cd16:	899b      	ldrh	r3, [r3, #12]
 800cd18:	059b      	lsls	r3, r3, #22
 800cd1a:	d403      	bmi.n	800cd24 <_vfiprintf_r+0x34>
 800cd1c:	9b03      	ldr	r3, [sp, #12]
 800cd1e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800cd20:	f7fc fb8c 	bl	800943c <__retarget_lock_acquire_recursive>
 800cd24:	9b03      	ldr	r3, [sp, #12]
 800cd26:	220c      	movs	r2, #12
 800cd28:	5e9a      	ldrsh	r2, [r3, r2]
 800cd2a:	2380      	movs	r3, #128	; 0x80
 800cd2c:	019b      	lsls	r3, r3, #6
 800cd2e:	421a      	tst	r2, r3
 800cd30:	d107      	bne.n	800cd42 <_vfiprintf_r+0x52>
 800cd32:	4313      	orrs	r3, r2
 800cd34:	9a03      	ldr	r2, [sp, #12]
 800cd36:	8193      	strh	r3, [r2, #12]
 800cd38:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800cd3a:	4aa3      	ldr	r2, [pc, #652]	; (800cfc8 <_vfiprintf_r+0x2d8>)
 800cd3c:	4013      	ands	r3, r2
 800cd3e:	9a03      	ldr	r2, [sp, #12]
 800cd40:	6653      	str	r3, [r2, #100]	; 0x64
 800cd42:	9b03      	ldr	r3, [sp, #12]
 800cd44:	899b      	ldrh	r3, [r3, #12]
 800cd46:	071b      	lsls	r3, r3, #28
 800cd48:	d503      	bpl.n	800cd52 <_vfiprintf_r+0x62>
 800cd4a:	9b03      	ldr	r3, [sp, #12]
 800cd4c:	691b      	ldr	r3, [r3, #16]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d118      	bne.n	800cd84 <_vfiprintf_r+0x94>
 800cd52:	9903      	ldr	r1, [sp, #12]
 800cd54:	9806      	ldr	r0, [sp, #24]
 800cd56:	f000 fe3b 	bl	800d9d0 <__swsetup_r>
 800cd5a:	2800      	cmp	r0, #0
 800cd5c:	d012      	beq.n	800cd84 <_vfiprintf_r+0x94>
 800cd5e:	9b03      	ldr	r3, [sp, #12]
 800cd60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd62:	07db      	lsls	r3, r3, #31
 800cd64:	d505      	bpl.n	800cd72 <_vfiprintf_r+0x82>
 800cd66:	2301      	movs	r3, #1
 800cd68:	425b      	negs	r3, r3
 800cd6a:	9308      	str	r3, [sp, #32]
 800cd6c:	9808      	ldr	r0, [sp, #32]
 800cd6e:	b041      	add	sp, #260	; 0x104
 800cd70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd72:	9b03      	ldr	r3, [sp, #12]
 800cd74:	899b      	ldrh	r3, [r3, #12]
 800cd76:	059b      	lsls	r3, r3, #22
 800cd78:	d4f5      	bmi.n	800cd66 <_vfiprintf_r+0x76>
 800cd7a:	9b03      	ldr	r3, [sp, #12]
 800cd7c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800cd7e:	f7fc fb5e 	bl	800943e <__retarget_lock_release_recursive>
 800cd82:	e7f0      	b.n	800cd66 <_vfiprintf_r+0x76>
 800cd84:	221a      	movs	r2, #26
 800cd86:	9b03      	ldr	r3, [sp, #12]
 800cd88:	899b      	ldrh	r3, [r3, #12]
 800cd8a:	401a      	ands	r2, r3
 800cd8c:	2a0a      	cmp	r2, #10
 800cd8e:	d116      	bne.n	800cdbe <_vfiprintf_r+0xce>
 800cd90:	9a03      	ldr	r2, [sp, #12]
 800cd92:	210e      	movs	r1, #14
 800cd94:	5e52      	ldrsh	r2, [r2, r1]
 800cd96:	2a00      	cmp	r2, #0
 800cd98:	db11      	blt.n	800cdbe <_vfiprintf_r+0xce>
 800cd9a:	9a03      	ldr	r2, [sp, #12]
 800cd9c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800cd9e:	07d2      	lsls	r2, r2, #31
 800cda0:	d405      	bmi.n	800cdae <_vfiprintf_r+0xbe>
 800cda2:	059b      	lsls	r3, r3, #22
 800cda4:	d403      	bmi.n	800cdae <_vfiprintf_r+0xbe>
 800cda6:	9b03      	ldr	r3, [sp, #12]
 800cda8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800cdaa:	f7fc fb48 	bl	800943e <__retarget_lock_release_recursive>
 800cdae:	0023      	movs	r3, r4
 800cdb0:	9a07      	ldr	r2, [sp, #28]
 800cdb2:	9903      	ldr	r1, [sp, #12]
 800cdb4:	9806      	ldr	r0, [sp, #24]
 800cdb6:	f000 fc69 	bl	800d68c <__sbprintf>
 800cdba:	9008      	str	r0, [sp, #32]
 800cdbc:	e7d6      	b.n	800cd6c <_vfiprintf_r+0x7c>
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	ad17      	add	r5, sp, #92	; 0x5c
 800cdc2:	9514      	str	r5, [sp, #80]	; 0x50
 800cdc4:	9316      	str	r3, [sp, #88]	; 0x58
 800cdc6:	9315      	str	r3, [sp, #84]	; 0x54
 800cdc8:	930c      	str	r3, [sp, #48]	; 0x30
 800cdca:	930d      	str	r3, [sp, #52]	; 0x34
 800cdcc:	930e      	str	r3, [sp, #56]	; 0x38
 800cdce:	930f      	str	r3, [sp, #60]	; 0x3c
 800cdd0:	9308      	str	r3, [sp, #32]
 800cdd2:	9c07      	ldr	r4, [sp, #28]
 800cdd4:	7823      	ldrb	r3, [r4, #0]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d002      	beq.n	800cde0 <_vfiprintf_r+0xf0>
 800cdda:	2b25      	cmp	r3, #37	; 0x25
 800cddc:	d000      	beq.n	800cde0 <_vfiprintf_r+0xf0>
 800cdde:	e08d      	b.n	800cefc <_vfiprintf_r+0x20c>
 800cde0:	9b07      	ldr	r3, [sp, #28]
 800cde2:	1ae6      	subs	r6, r4, r3
 800cde4:	429c      	cmp	r4, r3
 800cde6:	d016      	beq.n	800ce16 <_vfiprintf_r+0x126>
 800cde8:	602b      	str	r3, [r5, #0]
 800cdea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cdec:	606e      	str	r6, [r5, #4]
 800cdee:	199b      	adds	r3, r3, r6
 800cdf0:	9316      	str	r3, [sp, #88]	; 0x58
 800cdf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cdf4:	3508      	adds	r5, #8
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	9315      	str	r3, [sp, #84]	; 0x54
 800cdfa:	2b07      	cmp	r3, #7
 800cdfc:	dd08      	ble.n	800ce10 <_vfiprintf_r+0x120>
 800cdfe:	9903      	ldr	r1, [sp, #12]
 800ce00:	9806      	ldr	r0, [sp, #24]
 800ce02:	aa14      	add	r2, sp, #80	; 0x50
 800ce04:	f7ff ff40 	bl	800cc88 <__sprint_r>
 800ce08:	2800      	cmp	r0, #0
 800ce0a:	d000      	beq.n	800ce0e <_vfiprintf_r+0x11e>
 800ce0c:	e3d9      	b.n	800d5c2 <_vfiprintf_r+0x8d2>
 800ce0e:	ad17      	add	r5, sp, #92	; 0x5c
 800ce10:	9b08      	ldr	r3, [sp, #32]
 800ce12:	199b      	adds	r3, r3, r6
 800ce14:	9308      	str	r3, [sp, #32]
 800ce16:	7823      	ldrb	r3, [r4, #0]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d101      	bne.n	800ce20 <_vfiprintf_r+0x130>
 800ce1c:	f000 fbf6 	bl	800d60c <_vfiprintf_r+0x91c>
 800ce20:	2200      	movs	r2, #0
 800ce22:	a912      	add	r1, sp, #72	; 0x48
 800ce24:	70ca      	strb	r2, [r1, #3]
 800ce26:	2101      	movs	r1, #1
 800ce28:	1c63      	adds	r3, r4, #1
 800ce2a:	0014      	movs	r4, r2
 800ce2c:	4249      	negs	r1, r1
 800ce2e:	9105      	str	r1, [sp, #20]
 800ce30:	9209      	str	r2, [sp, #36]	; 0x24
 800ce32:	1c5a      	adds	r2, r3, #1
 800ce34:	781b      	ldrb	r3, [r3, #0]
 800ce36:	9207      	str	r2, [sp, #28]
 800ce38:	0018      	movs	r0, r3
 800ce3a:	3820      	subs	r0, #32
 800ce3c:	285a      	cmp	r0, #90	; 0x5a
 800ce3e:	d900      	bls.n	800ce42 <_vfiprintf_r+0x152>
 800ce40:	e362      	b.n	800d508 <_vfiprintf_r+0x818>
 800ce42:	f7f3 f973 	bl	800012c <__gnu_thumb1_case_uhi>
 800ce46:	0078      	.short	0x0078
 800ce48:	03610361 	.word	0x03610361
 800ce4c:	03610081 	.word	0x03610081
 800ce50:	03610361 	.word	0x03610361
 800ce54:	0361005d 	.word	0x0361005d
 800ce58:	00830361 	.word	0x00830361
 800ce5c:	0361008b 	.word	0x0361008b
 800ce60:	008f0089 	.word	0x008f0089
 800ce64:	00ad0361 	.word	0x00ad0361
 800ce68:	00af00af 	.word	0x00af00af
 800ce6c:	00af00af 	.word	0x00af00af
 800ce70:	00af00af 	.word	0x00af00af
 800ce74:	00af00af 	.word	0x00af00af
 800ce78:	036100af 	.word	0x036100af
 800ce7c:	03610361 	.word	0x03610361
 800ce80:	03610361 	.word	0x03610361
 800ce84:	03610361 	.word	0x03610361
 800ce88:	03610361 	.word	0x03610361
 800ce8c:	00e600da 	.word	0x00e600da
 800ce90:	03610361 	.word	0x03610361
 800ce94:	03610361 	.word	0x03610361
 800ce98:	03610361 	.word	0x03610361
 800ce9c:	03610361 	.word	0x03610361
 800cea0:	03610361 	.word	0x03610361
 800cea4:	03610143 	.word	0x03610143
 800cea8:	03610361 	.word	0x03610361
 800ceac:	03610182 	.word	0x03610182
 800ceb0:	0361027c 	.word	0x0361027c
 800ceb4:	02ae0361 	.word	0x02ae0361
 800ceb8:	03610361 	.word	0x03610361
 800cebc:	03610361 	.word	0x03610361
 800cec0:	03610361 	.word	0x03610361
 800cec4:	03610361 	.word	0x03610361
 800cec8:	03610361 	.word	0x03610361
 800cecc:	00e800da 	.word	0x00e800da
 800ced0:	03610361 	.word	0x03610361
 800ced4:	00c30361 	.word	0x00c30361
 800ced8:	00d600e8 	.word	0x00d600e8
 800cedc:	00cf0361 	.word	0x00cf0361
 800cee0:	01260361 	.word	0x01260361
 800cee4:	01740145 	.word	0x01740145
 800cee8:	036100d6 	.word	0x036100d6
 800ceec:	007f0182 	.word	0x007f0182
 800cef0:	0361027e 	.word	0x0361027e
 800cef4:	02cd0361 	.word	0x02cd0361
 800cef8:	007f0361 	.word	0x007f0361
 800cefc:	3401      	adds	r4, #1
 800cefe:	e769      	b.n	800cdd4 <_vfiprintf_r+0xe4>
 800cf00:	9806      	ldr	r0, [sp, #24]
 800cf02:	f7fe f969 	bl	800b1d8 <_localeconv_r>
 800cf06:	6843      	ldr	r3, [r0, #4]
 800cf08:	0018      	movs	r0, r3
 800cf0a:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf0c:	f7f3 f8fc 	bl	8000108 <strlen>
 800cf10:	900e      	str	r0, [sp, #56]	; 0x38
 800cf12:	9806      	ldr	r0, [sp, #24]
 800cf14:	f7fe f960 	bl	800b1d8 <_localeconv_r>
 800cf18:	6883      	ldr	r3, [r0, #8]
 800cf1a:	930d      	str	r3, [sp, #52]	; 0x34
 800cf1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d010      	beq.n	800cf44 <_vfiprintf_r+0x254>
 800cf22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d00d      	beq.n	800cf44 <_vfiprintf_r+0x254>
 800cf28:	781b      	ldrb	r3, [r3, #0]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d00a      	beq.n	800cf44 <_vfiprintf_r+0x254>
 800cf2e:	2380      	movs	r3, #128	; 0x80
 800cf30:	00db      	lsls	r3, r3, #3
 800cf32:	431c      	orrs	r4, r3
 800cf34:	e006      	b.n	800cf44 <_vfiprintf_r+0x254>
 800cf36:	ab12      	add	r3, sp, #72	; 0x48
 800cf38:	78da      	ldrb	r2, [r3, #3]
 800cf3a:	3303      	adds	r3, #3
 800cf3c:	2a00      	cmp	r2, #0
 800cf3e:	d101      	bne.n	800cf44 <_vfiprintf_r+0x254>
 800cf40:	3220      	adds	r2, #32
 800cf42:	701a      	strb	r2, [r3, #0]
 800cf44:	9b07      	ldr	r3, [sp, #28]
 800cf46:	e774      	b.n	800ce32 <_vfiprintf_r+0x142>
 800cf48:	2301      	movs	r3, #1
 800cf4a:	e7f2      	b.n	800cf32 <_vfiprintf_r+0x242>
 800cf4c:	cf08      	ldmia	r7!, {r3}
 800cf4e:	9309      	str	r3, [sp, #36]	; 0x24
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	daf7      	bge.n	800cf44 <_vfiprintf_r+0x254>
 800cf54:	425b      	negs	r3, r3
 800cf56:	9309      	str	r3, [sp, #36]	; 0x24
 800cf58:	2304      	movs	r3, #4
 800cf5a:	e7ea      	b.n	800cf32 <_vfiprintf_r+0x242>
 800cf5c:	222b      	movs	r2, #43	; 0x2b
 800cf5e:	ab12      	add	r3, sp, #72	; 0x48
 800cf60:	70da      	strb	r2, [r3, #3]
 800cf62:	e7ef      	b.n	800cf44 <_vfiprintf_r+0x254>
 800cf64:	9b07      	ldr	r3, [sp, #28]
 800cf66:	1c5a      	adds	r2, r3, #1
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	2b2a      	cmp	r3, #42	; 0x2a
 800cf6c:	d00f      	beq.n	800cf8e <_vfiprintf_r+0x29e>
 800cf6e:	2100      	movs	r1, #0
 800cf70:	9105      	str	r1, [sp, #20]
 800cf72:	0019      	movs	r1, r3
 800cf74:	3930      	subs	r1, #48	; 0x30
 800cf76:	9207      	str	r2, [sp, #28]
 800cf78:	2909      	cmp	r1, #9
 800cf7a:	d900      	bls.n	800cf7e <_vfiprintf_r+0x28e>
 800cf7c:	e75c      	b.n	800ce38 <_vfiprintf_r+0x148>
 800cf7e:	200a      	movs	r0, #10
 800cf80:	9b05      	ldr	r3, [sp, #20]
 800cf82:	4343      	muls	r3, r0
 800cf84:	185b      	adds	r3, r3, r1
 800cf86:	9305      	str	r3, [sp, #20]
 800cf88:	7813      	ldrb	r3, [r2, #0]
 800cf8a:	3201      	adds	r2, #1
 800cf8c:	e7f1      	b.n	800cf72 <_vfiprintf_r+0x282>
 800cf8e:	cf08      	ldmia	r7!, {r3}
 800cf90:	9305      	str	r3, [sp, #20]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	da02      	bge.n	800cf9c <_vfiprintf_r+0x2ac>
 800cf96:	2301      	movs	r3, #1
 800cf98:	425b      	negs	r3, r3
 800cf9a:	9305      	str	r3, [sp, #20]
 800cf9c:	9207      	str	r2, [sp, #28]
 800cf9e:	e7d1      	b.n	800cf44 <_vfiprintf_r+0x254>
 800cfa0:	2380      	movs	r3, #128	; 0x80
 800cfa2:	e7c6      	b.n	800cf32 <_vfiprintf_r+0x242>
 800cfa4:	2100      	movs	r1, #0
 800cfa6:	9a07      	ldr	r2, [sp, #28]
 800cfa8:	9109      	str	r1, [sp, #36]	; 0x24
 800cfaa:	200a      	movs	r0, #10
 800cfac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cfae:	3b30      	subs	r3, #48	; 0x30
 800cfb0:	4341      	muls	r1, r0
 800cfb2:	185b      	adds	r3, r3, r1
 800cfb4:	9309      	str	r3, [sp, #36]	; 0x24
 800cfb6:	0013      	movs	r3, r2
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	3201      	adds	r2, #1
 800cfbc:	0019      	movs	r1, r3
 800cfbe:	3930      	subs	r1, #48	; 0x30
 800cfc0:	9207      	str	r2, [sp, #28]
 800cfc2:	2909      	cmp	r1, #9
 800cfc4:	d9f1      	bls.n	800cfaa <_vfiprintf_r+0x2ba>
 800cfc6:	e737      	b.n	800ce38 <_vfiprintf_r+0x148>
 800cfc8:	ffffdfff 	.word	0xffffdfff
 800cfcc:	9b07      	ldr	r3, [sp, #28]
 800cfce:	781b      	ldrb	r3, [r3, #0]
 800cfd0:	2b68      	cmp	r3, #104	; 0x68
 800cfd2:	d105      	bne.n	800cfe0 <_vfiprintf_r+0x2f0>
 800cfd4:	9b07      	ldr	r3, [sp, #28]
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	9307      	str	r3, [sp, #28]
 800cfda:	2380      	movs	r3, #128	; 0x80
 800cfdc:	009b      	lsls	r3, r3, #2
 800cfde:	e7a8      	b.n	800cf32 <_vfiprintf_r+0x242>
 800cfe0:	2340      	movs	r3, #64	; 0x40
 800cfe2:	e7a6      	b.n	800cf32 <_vfiprintf_r+0x242>
 800cfe4:	9b07      	ldr	r3, [sp, #28]
 800cfe6:	781b      	ldrb	r3, [r3, #0]
 800cfe8:	2b6c      	cmp	r3, #108	; 0x6c
 800cfea:	d104      	bne.n	800cff6 <_vfiprintf_r+0x306>
 800cfec:	9b07      	ldr	r3, [sp, #28]
 800cfee:	3301      	adds	r3, #1
 800cff0:	9307      	str	r3, [sp, #28]
 800cff2:	2320      	movs	r3, #32
 800cff4:	e79d      	b.n	800cf32 <_vfiprintf_r+0x242>
 800cff6:	2310      	movs	r3, #16
 800cff8:	e79b      	b.n	800cf32 <_vfiprintf_r+0x242>
 800cffa:	003a      	movs	r2, r7
 800cffc:	ca08      	ldmia	r2!, {r3}
 800cffe:	ae27      	add	r6, sp, #156	; 0x9c
 800d000:	7033      	strb	r3, [r6, #0]
 800d002:	2300      	movs	r3, #0
 800d004:	9204      	str	r2, [sp, #16]
 800d006:	aa12      	add	r2, sp, #72	; 0x48
 800d008:	70d3      	strb	r3, [r2, #3]
 800d00a:	2201      	movs	r2, #1
 800d00c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d00e:	9205      	str	r2, [sp, #20]
 800d010:	e0b0      	b.n	800d174 <_vfiprintf_r+0x484>
 800d012:	2310      	movs	r3, #16
 800d014:	431c      	orrs	r4, r3
 800d016:	06a3      	lsls	r3, r4, #26
 800d018:	d52a      	bpl.n	800d070 <_vfiprintf_r+0x380>
 800d01a:	2307      	movs	r3, #7
 800d01c:	3707      	adds	r7, #7
 800d01e:	439f      	bics	r7, r3
 800d020:	0039      	movs	r1, r7
 800d022:	c90c      	ldmia	r1!, {r2, r3}
 800d024:	9200      	str	r2, [sp, #0]
 800d026:	9301      	str	r3, [sp, #4]
 800d028:	9104      	str	r1, [sp, #16]
 800d02a:	9a01      	ldr	r2, [sp, #4]
 800d02c:	2301      	movs	r3, #1
 800d02e:	2a00      	cmp	r2, #0
 800d030:	da09      	bge.n	800d046 <_vfiprintf_r+0x356>
 800d032:	9e00      	ldr	r6, [sp, #0]
 800d034:	9f01      	ldr	r7, [sp, #4]
 800d036:	2200      	movs	r2, #0
 800d038:	4271      	negs	r1, r6
 800d03a:	41ba      	sbcs	r2, r7
 800d03c:	9100      	str	r1, [sp, #0]
 800d03e:	9201      	str	r2, [sp, #4]
 800d040:	212d      	movs	r1, #45	; 0x2d
 800d042:	aa12      	add	r2, sp, #72	; 0x48
 800d044:	70d1      	strb	r1, [r2, #3]
 800d046:	9901      	ldr	r1, [sp, #4]
 800d048:	9a00      	ldr	r2, [sp, #0]
 800d04a:	430a      	orrs	r2, r1
 800d04c:	9905      	ldr	r1, [sp, #20]
 800d04e:	3101      	adds	r1, #1
 800d050:	d100      	bne.n	800d054 <_vfiprintf_r+0x364>
 800d052:	e2e9      	b.n	800d628 <_vfiprintf_r+0x938>
 800d054:	2180      	movs	r1, #128	; 0x80
 800d056:	0027      	movs	r7, r4
 800d058:	438f      	bics	r7, r1
 800d05a:	2a00      	cmp	r2, #0
 800d05c:	d000      	beq.n	800d060 <_vfiprintf_r+0x370>
 800d05e:	e2e7      	b.n	800d630 <_vfiprintf_r+0x940>
 800d060:	9a05      	ldr	r2, [sp, #20]
 800d062:	2a00      	cmp	r2, #0
 800d064:	d100      	bne.n	800d068 <_vfiprintf_r+0x378>
 800d066:	e243      	b.n	800d4f0 <_vfiprintf_r+0x800>
 800d068:	2b01      	cmp	r3, #1
 800d06a:	d000      	beq.n	800d06e <_vfiprintf_r+0x37e>
 800d06c:	e2e3      	b.n	800d636 <_vfiprintf_r+0x946>
 800d06e:	e1e7      	b.n	800d440 <_vfiprintf_r+0x750>
 800d070:	003a      	movs	r2, r7
 800d072:	ca08      	ldmia	r2!, {r3}
 800d074:	9204      	str	r2, [sp, #16]
 800d076:	06e2      	lsls	r2, r4, #27
 800d078:	d503      	bpl.n	800d082 <_vfiprintf_r+0x392>
 800d07a:	9300      	str	r3, [sp, #0]
 800d07c:	17db      	asrs	r3, r3, #31
 800d07e:	9301      	str	r3, [sp, #4]
 800d080:	e7d3      	b.n	800d02a <_vfiprintf_r+0x33a>
 800d082:	0662      	lsls	r2, r4, #25
 800d084:	d501      	bpl.n	800d08a <_vfiprintf_r+0x39a>
 800d086:	b21b      	sxth	r3, r3
 800d088:	e7f7      	b.n	800d07a <_vfiprintf_r+0x38a>
 800d08a:	05a2      	lsls	r2, r4, #22
 800d08c:	d5f5      	bpl.n	800d07a <_vfiprintf_r+0x38a>
 800d08e:	b25b      	sxtb	r3, r3
 800d090:	e7f3      	b.n	800d07a <_vfiprintf_r+0x38a>
 800d092:	1d3b      	adds	r3, r7, #4
 800d094:	9304      	str	r3, [sp, #16]
 800d096:	06a3      	lsls	r3, r4, #26
 800d098:	d506      	bpl.n	800d0a8 <_vfiprintf_r+0x3b8>
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	9a08      	ldr	r2, [sp, #32]
 800d09e:	601a      	str	r2, [r3, #0]
 800d0a0:	17d2      	asrs	r2, r2, #31
 800d0a2:	605a      	str	r2, [r3, #4]
 800d0a4:	9f04      	ldr	r7, [sp, #16]
 800d0a6:	e694      	b.n	800cdd2 <_vfiprintf_r+0xe2>
 800d0a8:	06e3      	lsls	r3, r4, #27
 800d0aa:	d503      	bpl.n	800d0b4 <_vfiprintf_r+0x3c4>
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	9a08      	ldr	r2, [sp, #32]
 800d0b0:	601a      	str	r2, [r3, #0]
 800d0b2:	e7f7      	b.n	800d0a4 <_vfiprintf_r+0x3b4>
 800d0b4:	0663      	lsls	r3, r4, #25
 800d0b6:	d503      	bpl.n	800d0c0 <_vfiprintf_r+0x3d0>
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	9a08      	ldr	r2, [sp, #32]
 800d0bc:	801a      	strh	r2, [r3, #0]
 800d0be:	e7f1      	b.n	800d0a4 <_vfiprintf_r+0x3b4>
 800d0c0:	05a4      	lsls	r4, r4, #22
 800d0c2:	d5f3      	bpl.n	800d0ac <_vfiprintf_r+0x3bc>
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	9a08      	ldr	r2, [sp, #32]
 800d0c8:	701a      	strb	r2, [r3, #0]
 800d0ca:	e7eb      	b.n	800d0a4 <_vfiprintf_r+0x3b4>
 800d0cc:	2310      	movs	r3, #16
 800d0ce:	431c      	orrs	r4, r3
 800d0d0:	2320      	movs	r3, #32
 800d0d2:	0020      	movs	r0, r4
 800d0d4:	4018      	ands	r0, r3
 800d0d6:	421c      	tst	r4, r3
 800d0d8:	d00d      	beq.n	800d0f6 <_vfiprintf_r+0x406>
 800d0da:	3b19      	subs	r3, #25
 800d0dc:	3707      	adds	r7, #7
 800d0de:	439f      	bics	r7, r3
 800d0e0:	0039      	movs	r1, r7
 800d0e2:	c90c      	ldmia	r1!, {r2, r3}
 800d0e4:	9200      	str	r2, [sp, #0]
 800d0e6:	9301      	str	r3, [sp, #4]
 800d0e8:	9104      	str	r1, [sp, #16]
 800d0ea:	4bcc      	ldr	r3, [pc, #816]	; (800d41c <_vfiprintf_r+0x72c>)
 800d0ec:	401c      	ands	r4, r3
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	2100      	movs	r1, #0
 800d0f2:	aa12      	add	r2, sp, #72	; 0x48
 800d0f4:	e7a6      	b.n	800d044 <_vfiprintf_r+0x354>
 800d0f6:	003a      	movs	r2, r7
 800d0f8:	ca08      	ldmia	r2!, {r3}
 800d0fa:	0021      	movs	r1, r4
 800d0fc:	9204      	str	r2, [sp, #16]
 800d0fe:	2210      	movs	r2, #16
 800d100:	4011      	ands	r1, r2
 800d102:	4214      	tst	r4, r2
 800d104:	d002      	beq.n	800d10c <_vfiprintf_r+0x41c>
 800d106:	9300      	str	r3, [sp, #0]
 800d108:	9001      	str	r0, [sp, #4]
 800d10a:	e7ee      	b.n	800d0ea <_vfiprintf_r+0x3fa>
 800d10c:	2240      	movs	r2, #64	; 0x40
 800d10e:	0020      	movs	r0, r4
 800d110:	4010      	ands	r0, r2
 800d112:	4214      	tst	r4, r2
 800d114:	d003      	beq.n	800d11e <_vfiprintf_r+0x42e>
 800d116:	b29b      	uxth	r3, r3
 800d118:	9300      	str	r3, [sp, #0]
 800d11a:	9101      	str	r1, [sp, #4]
 800d11c:	e7e5      	b.n	800d0ea <_vfiprintf_r+0x3fa>
 800d11e:	2280      	movs	r2, #128	; 0x80
 800d120:	0021      	movs	r1, r4
 800d122:	0092      	lsls	r2, r2, #2
 800d124:	4011      	ands	r1, r2
 800d126:	4214      	tst	r4, r2
 800d128:	d0f6      	beq.n	800d118 <_vfiprintf_r+0x428>
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	e7eb      	b.n	800d106 <_vfiprintf_r+0x416>
 800d12e:	003b      	movs	r3, r7
 800d130:	cb04      	ldmia	r3!, {r2}
 800d132:	49bb      	ldr	r1, [pc, #748]	; (800d420 <_vfiprintf_r+0x730>)
 800d134:	9304      	str	r3, [sp, #16]
 800d136:	2300      	movs	r3, #0
 800d138:	9200      	str	r2, [sp, #0]
 800d13a:	aa13      	add	r2, sp, #76	; 0x4c
 800d13c:	8011      	strh	r1, [r2, #0]
 800d13e:	4ab9      	ldr	r2, [pc, #740]	; (800d424 <_vfiprintf_r+0x734>)
 800d140:	9301      	str	r3, [sp, #4]
 800d142:	3302      	adds	r3, #2
 800d144:	431c      	orrs	r4, r3
 800d146:	920c      	str	r2, [sp, #48]	; 0x30
 800d148:	e7d2      	b.n	800d0f0 <_vfiprintf_r+0x400>
 800d14a:	003b      	movs	r3, r7
 800d14c:	2700      	movs	r7, #0
 800d14e:	cb40      	ldmia	r3!, {r6}
 800d150:	9304      	str	r3, [sp, #16]
 800d152:	ab12      	add	r3, sp, #72	; 0x48
 800d154:	70df      	strb	r7, [r3, #3]
 800d156:	9b05      	ldr	r3, [sp, #20]
 800d158:	3301      	adds	r3, #1
 800d15a:	d100      	bne.n	800d15e <_vfiprintf_r+0x46e>
 800d15c:	e0ea      	b.n	800d334 <_vfiprintf_r+0x644>
 800d15e:	0039      	movs	r1, r7
 800d160:	0030      	movs	r0, r6
 800d162:	9a05      	ldr	r2, [sp, #20]
 800d164:	f7fc f974 	bl	8009450 <memchr>
 800d168:	900b      	str	r0, [sp, #44]	; 0x2c
 800d16a:	42b8      	cmp	r0, r7
 800d16c:	d002      	beq.n	800d174 <_vfiprintf_r+0x484>
 800d16e:	1b83      	subs	r3, r0, r6
 800d170:	9305      	str	r3, [sp, #20]
 800d172:	970b      	str	r7, [sp, #44]	; 0x2c
 800d174:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d176:	9a05      	ldr	r2, [sp, #20]
 800d178:	930a      	str	r3, [sp, #40]	; 0x28
 800d17a:	4293      	cmp	r3, r2
 800d17c:	da00      	bge.n	800d180 <_vfiprintf_r+0x490>
 800d17e:	920a      	str	r2, [sp, #40]	; 0x28
 800d180:	ab12      	add	r3, sp, #72	; 0x48
 800d182:	3303      	adds	r3, #3
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	1e5a      	subs	r2, r3, #1
 800d188:	4193      	sbcs	r3, r2
 800d18a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d18c:	18d3      	adds	r3, r2, r3
 800d18e:	930a      	str	r3, [sp, #40]	; 0x28
 800d190:	0022      	movs	r2, r4
 800d192:	2302      	movs	r3, #2
 800d194:	401a      	ands	r2, r3
 800d196:	9210      	str	r2, [sp, #64]	; 0x40
 800d198:	421c      	tst	r4, r3
 800d19a:	d002      	beq.n	800d1a2 <_vfiprintf_r+0x4b2>
 800d19c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d19e:	3302      	adds	r3, #2
 800d1a0:	930a      	str	r3, [sp, #40]	; 0x28
 800d1a2:	2384      	movs	r3, #132	; 0x84
 800d1a4:	0022      	movs	r2, r4
 800d1a6:	401a      	ands	r2, r3
 800d1a8:	9211      	str	r2, [sp, #68]	; 0x44
 800d1aa:	421c      	tst	r4, r3
 800d1ac:	d11e      	bne.n	800d1ec <_vfiprintf_r+0x4fc>
 800d1ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d1b2:	1a9f      	subs	r7, r3, r2
 800d1b4:	2f00      	cmp	r7, #0
 800d1b6:	dd19      	ble.n	800d1ec <_vfiprintf_r+0x4fc>
 800d1b8:	0029      	movs	r1, r5
 800d1ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1bc:	489a      	ldr	r0, [pc, #616]	; (800d428 <_vfiprintf_r+0x738>)
 800d1be:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d1c0:	3301      	adds	r3, #1
 800d1c2:	3108      	adds	r1, #8
 800d1c4:	6028      	str	r0, [r5, #0]
 800d1c6:	2f10      	cmp	r7, #16
 800d1c8:	dd00      	ble.n	800d1cc <_vfiprintf_r+0x4dc>
 800d1ca:	e1a7      	b.n	800d51c <_vfiprintf_r+0x82c>
 800d1cc:	606f      	str	r7, [r5, #4]
 800d1ce:	18bf      	adds	r7, r7, r2
 800d1d0:	000d      	movs	r5, r1
 800d1d2:	9716      	str	r7, [sp, #88]	; 0x58
 800d1d4:	9315      	str	r3, [sp, #84]	; 0x54
 800d1d6:	2b07      	cmp	r3, #7
 800d1d8:	dd08      	ble.n	800d1ec <_vfiprintf_r+0x4fc>
 800d1da:	9903      	ldr	r1, [sp, #12]
 800d1dc:	9806      	ldr	r0, [sp, #24]
 800d1de:	aa14      	add	r2, sp, #80	; 0x50
 800d1e0:	f7ff fd52 	bl	800cc88 <__sprint_r>
 800d1e4:	2800      	cmp	r0, #0
 800d1e6:	d000      	beq.n	800d1ea <_vfiprintf_r+0x4fa>
 800d1e8:	e1eb      	b.n	800d5c2 <_vfiprintf_r+0x8d2>
 800d1ea:	ad17      	add	r5, sp, #92	; 0x5c
 800d1ec:	a912      	add	r1, sp, #72	; 0x48
 800d1ee:	78c8      	ldrb	r0, [r1, #3]
 800d1f0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d1f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1f4:	3103      	adds	r1, #3
 800d1f6:	2800      	cmp	r0, #0
 800d1f8:	d012      	beq.n	800d220 <_vfiprintf_r+0x530>
 800d1fa:	6029      	str	r1, [r5, #0]
 800d1fc:	2101      	movs	r1, #1
 800d1fe:	3301      	adds	r3, #1
 800d200:	1852      	adds	r2, r2, r1
 800d202:	6069      	str	r1, [r5, #4]
 800d204:	9216      	str	r2, [sp, #88]	; 0x58
 800d206:	9315      	str	r3, [sp, #84]	; 0x54
 800d208:	3508      	adds	r5, #8
 800d20a:	2b07      	cmp	r3, #7
 800d20c:	dd08      	ble.n	800d220 <_vfiprintf_r+0x530>
 800d20e:	9903      	ldr	r1, [sp, #12]
 800d210:	9806      	ldr	r0, [sp, #24]
 800d212:	aa14      	add	r2, sp, #80	; 0x50
 800d214:	f7ff fd38 	bl	800cc88 <__sprint_r>
 800d218:	2800      	cmp	r0, #0
 800d21a:	d000      	beq.n	800d21e <_vfiprintf_r+0x52e>
 800d21c:	e1d1      	b.n	800d5c2 <_vfiprintf_r+0x8d2>
 800d21e:	ad17      	add	r5, sp, #92	; 0x5c
 800d220:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d222:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d224:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d226:	2900      	cmp	r1, #0
 800d228:	d013      	beq.n	800d252 <_vfiprintf_r+0x562>
 800d22a:	a913      	add	r1, sp, #76	; 0x4c
 800d22c:	6029      	str	r1, [r5, #0]
 800d22e:	2102      	movs	r1, #2
 800d230:	3301      	adds	r3, #1
 800d232:	1852      	adds	r2, r2, r1
 800d234:	6069      	str	r1, [r5, #4]
 800d236:	9216      	str	r2, [sp, #88]	; 0x58
 800d238:	9315      	str	r3, [sp, #84]	; 0x54
 800d23a:	3508      	adds	r5, #8
 800d23c:	2b07      	cmp	r3, #7
 800d23e:	dd08      	ble.n	800d252 <_vfiprintf_r+0x562>
 800d240:	9903      	ldr	r1, [sp, #12]
 800d242:	9806      	ldr	r0, [sp, #24]
 800d244:	aa14      	add	r2, sp, #80	; 0x50
 800d246:	f7ff fd1f 	bl	800cc88 <__sprint_r>
 800d24a:	2800      	cmp	r0, #0
 800d24c:	d000      	beq.n	800d250 <_vfiprintf_r+0x560>
 800d24e:	e1b8      	b.n	800d5c2 <_vfiprintf_r+0x8d2>
 800d250:	ad17      	add	r5, sp, #92	; 0x5c
 800d252:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d254:	2b80      	cmp	r3, #128	; 0x80
 800d256:	d11e      	bne.n	800d296 <_vfiprintf_r+0x5a6>
 800d258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d25a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d25c:	1a9f      	subs	r7, r3, r2
 800d25e:	2f00      	cmp	r7, #0
 800d260:	dd19      	ble.n	800d296 <_vfiprintf_r+0x5a6>
 800d262:	0029      	movs	r1, r5
 800d264:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d266:	4871      	ldr	r0, [pc, #452]	; (800d42c <_vfiprintf_r+0x73c>)
 800d268:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d26a:	3301      	adds	r3, #1
 800d26c:	3108      	adds	r1, #8
 800d26e:	6028      	str	r0, [r5, #0]
 800d270:	2f10      	cmp	r7, #16
 800d272:	dd00      	ble.n	800d276 <_vfiprintf_r+0x586>
 800d274:	e164      	b.n	800d540 <_vfiprintf_r+0x850>
 800d276:	606f      	str	r7, [r5, #4]
 800d278:	18bf      	adds	r7, r7, r2
 800d27a:	000d      	movs	r5, r1
 800d27c:	9716      	str	r7, [sp, #88]	; 0x58
 800d27e:	9315      	str	r3, [sp, #84]	; 0x54
 800d280:	2b07      	cmp	r3, #7
 800d282:	dd08      	ble.n	800d296 <_vfiprintf_r+0x5a6>
 800d284:	9903      	ldr	r1, [sp, #12]
 800d286:	9806      	ldr	r0, [sp, #24]
 800d288:	aa14      	add	r2, sp, #80	; 0x50
 800d28a:	f7ff fcfd 	bl	800cc88 <__sprint_r>
 800d28e:	2800      	cmp	r0, #0
 800d290:	d000      	beq.n	800d294 <_vfiprintf_r+0x5a4>
 800d292:	e196      	b.n	800d5c2 <_vfiprintf_r+0x8d2>
 800d294:	ad17      	add	r5, sp, #92	; 0x5c
 800d296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d298:	9a05      	ldr	r2, [sp, #20]
 800d29a:	1a9f      	subs	r7, r3, r2
 800d29c:	2f00      	cmp	r7, #0
 800d29e:	dd19      	ble.n	800d2d4 <_vfiprintf_r+0x5e4>
 800d2a0:	0029      	movs	r1, r5
 800d2a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d2a4:	4861      	ldr	r0, [pc, #388]	; (800d42c <_vfiprintf_r+0x73c>)
 800d2a6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d2a8:	3301      	adds	r3, #1
 800d2aa:	3108      	adds	r1, #8
 800d2ac:	6028      	str	r0, [r5, #0]
 800d2ae:	2f10      	cmp	r7, #16
 800d2b0:	dd00      	ble.n	800d2b4 <_vfiprintf_r+0x5c4>
 800d2b2:	e157      	b.n	800d564 <_vfiprintf_r+0x874>
 800d2b4:	606f      	str	r7, [r5, #4]
 800d2b6:	18bf      	adds	r7, r7, r2
 800d2b8:	000d      	movs	r5, r1
 800d2ba:	9716      	str	r7, [sp, #88]	; 0x58
 800d2bc:	9315      	str	r3, [sp, #84]	; 0x54
 800d2be:	2b07      	cmp	r3, #7
 800d2c0:	dd08      	ble.n	800d2d4 <_vfiprintf_r+0x5e4>
 800d2c2:	9903      	ldr	r1, [sp, #12]
 800d2c4:	9806      	ldr	r0, [sp, #24]
 800d2c6:	aa14      	add	r2, sp, #80	; 0x50
 800d2c8:	f7ff fcde 	bl	800cc88 <__sprint_r>
 800d2cc:	2800      	cmp	r0, #0
 800d2ce:	d000      	beq.n	800d2d2 <_vfiprintf_r+0x5e2>
 800d2d0:	e177      	b.n	800d5c2 <_vfiprintf_r+0x8d2>
 800d2d2:	ad17      	add	r5, sp, #92	; 0x5c
 800d2d4:	9b05      	ldr	r3, [sp, #20]
 800d2d6:	9a05      	ldr	r2, [sp, #20]
 800d2d8:	606b      	str	r3, [r5, #4]
 800d2da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d2dc:	602e      	str	r6, [r5, #0]
 800d2de:	189b      	adds	r3, r3, r2
 800d2e0:	9316      	str	r3, [sp, #88]	; 0x58
 800d2e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d2e4:	3508      	adds	r5, #8
 800d2e6:	3301      	adds	r3, #1
 800d2e8:	9315      	str	r3, [sp, #84]	; 0x54
 800d2ea:	2b07      	cmp	r3, #7
 800d2ec:	dd08      	ble.n	800d300 <_vfiprintf_r+0x610>
 800d2ee:	9903      	ldr	r1, [sp, #12]
 800d2f0:	9806      	ldr	r0, [sp, #24]
 800d2f2:	aa14      	add	r2, sp, #80	; 0x50
 800d2f4:	f7ff fcc8 	bl	800cc88 <__sprint_r>
 800d2f8:	2800      	cmp	r0, #0
 800d2fa:	d000      	beq.n	800d2fe <_vfiprintf_r+0x60e>
 800d2fc:	e161      	b.n	800d5c2 <_vfiprintf_r+0x8d2>
 800d2fe:	ad17      	add	r5, sp, #92	; 0x5c
 800d300:	0764      	lsls	r4, r4, #29
 800d302:	d500      	bpl.n	800d306 <_vfiprintf_r+0x616>
 800d304:	e140      	b.n	800d588 <_vfiprintf_r+0x898>
 800d306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d308:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d30a:	4293      	cmp	r3, r2
 800d30c:	da00      	bge.n	800d310 <_vfiprintf_r+0x620>
 800d30e:	0013      	movs	r3, r2
 800d310:	9a08      	ldr	r2, [sp, #32]
 800d312:	18d3      	adds	r3, r2, r3
 800d314:	9308      	str	r3, [sp, #32]
 800d316:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d007      	beq.n	800d32c <_vfiprintf_r+0x63c>
 800d31c:	9903      	ldr	r1, [sp, #12]
 800d31e:	9806      	ldr	r0, [sp, #24]
 800d320:	aa14      	add	r2, sp, #80	; 0x50
 800d322:	f7ff fcb1 	bl	800cc88 <__sprint_r>
 800d326:	2800      	cmp	r0, #0
 800d328:	d000      	beq.n	800d32c <_vfiprintf_r+0x63c>
 800d32a:	e14a      	b.n	800d5c2 <_vfiprintf_r+0x8d2>
 800d32c:	2300      	movs	r3, #0
 800d32e:	ad17      	add	r5, sp, #92	; 0x5c
 800d330:	9315      	str	r3, [sp, #84]	; 0x54
 800d332:	e6b7      	b.n	800d0a4 <_vfiprintf_r+0x3b4>
 800d334:	0030      	movs	r0, r6
 800d336:	f7f2 fee7 	bl	8000108 <strlen>
 800d33a:	9005      	str	r0, [sp, #20]
 800d33c:	e719      	b.n	800d172 <_vfiprintf_r+0x482>
 800d33e:	2310      	movs	r3, #16
 800d340:	431c      	orrs	r4, r3
 800d342:	2320      	movs	r3, #32
 800d344:	0020      	movs	r0, r4
 800d346:	4018      	ands	r0, r3
 800d348:	421c      	tst	r4, r3
 800d34a:	d009      	beq.n	800d360 <_vfiprintf_r+0x670>
 800d34c:	3b19      	subs	r3, #25
 800d34e:	3707      	adds	r7, #7
 800d350:	439f      	bics	r7, r3
 800d352:	0039      	movs	r1, r7
 800d354:	c90c      	ldmia	r1!, {r2, r3}
 800d356:	9200      	str	r2, [sp, #0]
 800d358:	9301      	str	r3, [sp, #4]
 800d35a:	9104      	str	r1, [sp, #16]
 800d35c:	2301      	movs	r3, #1
 800d35e:	e6c7      	b.n	800d0f0 <_vfiprintf_r+0x400>
 800d360:	003b      	movs	r3, r7
 800d362:	cb04      	ldmia	r3!, {r2}
 800d364:	0021      	movs	r1, r4
 800d366:	9304      	str	r3, [sp, #16]
 800d368:	2310      	movs	r3, #16
 800d36a:	4019      	ands	r1, r3
 800d36c:	421c      	tst	r4, r3
 800d36e:	d003      	beq.n	800d378 <_vfiprintf_r+0x688>
 800d370:	9200      	str	r2, [sp, #0]
 800d372:	9001      	str	r0, [sp, #4]
 800d374:	3b0f      	subs	r3, #15
 800d376:	e6bb      	b.n	800d0f0 <_vfiprintf_r+0x400>
 800d378:	2340      	movs	r3, #64	; 0x40
 800d37a:	0020      	movs	r0, r4
 800d37c:	4018      	ands	r0, r3
 800d37e:	421c      	tst	r4, r3
 800d380:	d003      	beq.n	800d38a <_vfiprintf_r+0x69a>
 800d382:	b293      	uxth	r3, r2
 800d384:	9300      	str	r3, [sp, #0]
 800d386:	9101      	str	r1, [sp, #4]
 800d388:	e7e8      	b.n	800d35c <_vfiprintf_r+0x66c>
 800d38a:	2380      	movs	r3, #128	; 0x80
 800d38c:	0021      	movs	r1, r4
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	4019      	ands	r1, r3
 800d392:	421c      	tst	r4, r3
 800d394:	d003      	beq.n	800d39e <_vfiprintf_r+0x6ae>
 800d396:	b2d3      	uxtb	r3, r2
 800d398:	9300      	str	r3, [sp, #0]
 800d39a:	9001      	str	r0, [sp, #4]
 800d39c:	e7de      	b.n	800d35c <_vfiprintf_r+0x66c>
 800d39e:	9200      	str	r2, [sp, #0]
 800d3a0:	e7f1      	b.n	800d386 <_vfiprintf_r+0x696>
 800d3a2:	4a23      	ldr	r2, [pc, #140]	; (800d430 <_vfiprintf_r+0x740>)
 800d3a4:	0020      	movs	r0, r4
 800d3a6:	920c      	str	r2, [sp, #48]	; 0x30
 800d3a8:	2220      	movs	r2, #32
 800d3aa:	4010      	ands	r0, r2
 800d3ac:	4214      	tst	r4, r2
 800d3ae:	d019      	beq.n	800d3e4 <_vfiprintf_r+0x6f4>
 800d3b0:	3a19      	subs	r2, #25
 800d3b2:	3707      	adds	r7, #7
 800d3b4:	4397      	bics	r7, r2
 800d3b6:	0038      	movs	r0, r7
 800d3b8:	c806      	ldmia	r0!, {r1, r2}
 800d3ba:	9100      	str	r1, [sp, #0]
 800d3bc:	9201      	str	r2, [sp, #4]
 800d3be:	9004      	str	r0, [sp, #16]
 800d3c0:	07e2      	lsls	r2, r4, #31
 800d3c2:	d509      	bpl.n	800d3d8 <_vfiprintf_r+0x6e8>
 800d3c4:	9a00      	ldr	r2, [sp, #0]
 800d3c6:	9901      	ldr	r1, [sp, #4]
 800d3c8:	430a      	orrs	r2, r1
 800d3ca:	d005      	beq.n	800d3d8 <_vfiprintf_r+0x6e8>
 800d3cc:	aa13      	add	r2, sp, #76	; 0x4c
 800d3ce:	2130      	movs	r1, #48	; 0x30
 800d3d0:	7053      	strb	r3, [r2, #1]
 800d3d2:	2302      	movs	r3, #2
 800d3d4:	7011      	strb	r1, [r2, #0]
 800d3d6:	431c      	orrs	r4, r3
 800d3d8:	4b10      	ldr	r3, [pc, #64]	; (800d41c <_vfiprintf_r+0x72c>)
 800d3da:	401c      	ands	r4, r3
 800d3dc:	2302      	movs	r3, #2
 800d3de:	e687      	b.n	800d0f0 <_vfiprintf_r+0x400>
 800d3e0:	4a10      	ldr	r2, [pc, #64]	; (800d424 <_vfiprintf_r+0x734>)
 800d3e2:	e7df      	b.n	800d3a4 <_vfiprintf_r+0x6b4>
 800d3e4:	0039      	movs	r1, r7
 800d3e6:	c904      	ldmia	r1!, {r2}
 800d3e8:	0026      	movs	r6, r4
 800d3ea:	9104      	str	r1, [sp, #16]
 800d3ec:	2110      	movs	r1, #16
 800d3ee:	400e      	ands	r6, r1
 800d3f0:	420c      	tst	r4, r1
 800d3f2:	d002      	beq.n	800d3fa <_vfiprintf_r+0x70a>
 800d3f4:	9200      	str	r2, [sp, #0]
 800d3f6:	9001      	str	r0, [sp, #4]
 800d3f8:	e7e2      	b.n	800d3c0 <_vfiprintf_r+0x6d0>
 800d3fa:	2140      	movs	r1, #64	; 0x40
 800d3fc:	0020      	movs	r0, r4
 800d3fe:	4008      	ands	r0, r1
 800d400:	420c      	tst	r4, r1
 800d402:	d003      	beq.n	800d40c <_vfiprintf_r+0x71c>
 800d404:	b292      	uxth	r2, r2
 800d406:	9200      	str	r2, [sp, #0]
 800d408:	9601      	str	r6, [sp, #4]
 800d40a:	e7d9      	b.n	800d3c0 <_vfiprintf_r+0x6d0>
 800d40c:	2180      	movs	r1, #128	; 0x80
 800d40e:	0026      	movs	r6, r4
 800d410:	0089      	lsls	r1, r1, #2
 800d412:	400e      	ands	r6, r1
 800d414:	420c      	tst	r4, r1
 800d416:	d0f6      	beq.n	800d406 <_vfiprintf_r+0x716>
 800d418:	b2d2      	uxtb	r2, r2
 800d41a:	e7eb      	b.n	800d3f4 <_vfiprintf_r+0x704>
 800d41c:	fffffbff 	.word	0xfffffbff
 800d420:	00007830 	.word	0x00007830
 800d424:	0800e5e6 	.word	0x0800e5e6
 800d428:	0800e842 	.word	0x0800e842
 800d42c:	0800e852 	.word	0x0800e852
 800d430:	0800e5f7 	.word	0x0800e5f7
 800d434:	9b01      	ldr	r3, [sp, #4]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d109      	bne.n	800d44e <_vfiprintf_r+0x75e>
 800d43a:	9b00      	ldr	r3, [sp, #0]
 800d43c:	2b09      	cmp	r3, #9
 800d43e:	d806      	bhi.n	800d44e <_vfiprintf_r+0x75e>
 800d440:	26b7      	movs	r6, #183	; 0xb7
 800d442:	ab12      	add	r3, sp, #72	; 0x48
 800d444:	18f6      	adds	r6, r6, r3
 800d446:	9b00      	ldr	r3, [sp, #0]
 800d448:	3330      	adds	r3, #48	; 0x30
 800d44a:	7033      	strb	r3, [r6, #0]
 800d44c:	e115      	b.n	800d67a <_vfiprintf_r+0x98a>
 800d44e:	2380      	movs	r3, #128	; 0x80
 800d450:	2400      	movs	r4, #0
 800d452:	00db      	lsls	r3, r3, #3
 800d454:	403b      	ands	r3, r7
 800d456:	ae40      	add	r6, sp, #256	; 0x100
 800d458:	930a      	str	r3, [sp, #40]	; 0x28
 800d45a:	220a      	movs	r2, #10
 800d45c:	9800      	ldr	r0, [sp, #0]
 800d45e:	9901      	ldr	r1, [sp, #4]
 800d460:	2300      	movs	r3, #0
 800d462:	f7f3 f821 	bl	80004a8 <__aeabi_uldivmod>
 800d466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d468:	3e01      	subs	r6, #1
 800d46a:	3230      	adds	r2, #48	; 0x30
 800d46c:	900b      	str	r0, [sp, #44]	; 0x2c
 800d46e:	9110      	str	r1, [sp, #64]	; 0x40
 800d470:	7032      	strb	r2, [r6, #0]
 800d472:	3401      	adds	r4, #1
 800d474:	2b00      	cmp	r3, #0
 800d476:	d01a      	beq.n	800d4ae <_vfiprintf_r+0x7be>
 800d478:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	42a3      	cmp	r3, r4
 800d47e:	d116      	bne.n	800d4ae <_vfiprintf_r+0x7be>
 800d480:	2cff      	cmp	r4, #255	; 0xff
 800d482:	d014      	beq.n	800d4ae <_vfiprintf_r+0x7be>
 800d484:	9b01      	ldr	r3, [sp, #4]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d102      	bne.n	800d490 <_vfiprintf_r+0x7a0>
 800d48a:	9b00      	ldr	r3, [sp, #0]
 800d48c:	2b09      	cmp	r3, #9
 800d48e:	d90e      	bls.n	800d4ae <_vfiprintf_r+0x7be>
 800d490:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d492:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d494:	1af6      	subs	r6, r6, r3
 800d496:	001a      	movs	r2, r3
 800d498:	0030      	movs	r0, r6
 800d49a:	f7fd fe89 	bl	800b1b0 <strncpy>
 800d49e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4a0:	2400      	movs	r4, #0
 800d4a2:	785b      	ldrb	r3, [r3, #1]
 800d4a4:	1e5a      	subs	r2, r3, #1
 800d4a6:	4193      	sbcs	r3, r2
 800d4a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d4aa:	18d3      	adds	r3, r2, r3
 800d4ac:	930d      	str	r3, [sp, #52]	; 0x34
 800d4ae:	9b01      	ldr	r3, [sp, #4]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d103      	bne.n	800d4bc <_vfiprintf_r+0x7cc>
 800d4b4:	9b00      	ldr	r3, [sp, #0]
 800d4b6:	2b09      	cmp	r3, #9
 800d4b8:	d800      	bhi.n	800d4bc <_vfiprintf_r+0x7cc>
 800d4ba:	e0de      	b.n	800d67a <_vfiprintf_r+0x98a>
 800d4bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4be:	9300      	str	r3, [sp, #0]
 800d4c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d4c2:	9301      	str	r3, [sp, #4]
 800d4c4:	e7c9      	b.n	800d45a <_vfiprintf_r+0x76a>
 800d4c6:	200f      	movs	r0, #15
 800d4c8:	9b00      	ldr	r3, [sp, #0]
 800d4ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d4cc:	4003      	ands	r3, r0
 800d4ce:	5cd3      	ldrb	r3, [r2, r3]
 800d4d0:	3e01      	subs	r6, #1
 800d4d2:	7033      	strb	r3, [r6, #0]
 800d4d4:	9b01      	ldr	r3, [sp, #4]
 800d4d6:	0719      	lsls	r1, r3, #28
 800d4d8:	9b00      	ldr	r3, [sp, #0]
 800d4da:	091a      	lsrs	r2, r3, #4
 800d4dc:	9b01      	ldr	r3, [sp, #4]
 800d4de:	4311      	orrs	r1, r2
 800d4e0:	091b      	lsrs	r3, r3, #4
 800d4e2:	9301      	str	r3, [sp, #4]
 800d4e4:	000b      	movs	r3, r1
 800d4e6:	9a01      	ldr	r2, [sp, #4]
 800d4e8:	9100      	str	r1, [sp, #0]
 800d4ea:	4313      	orrs	r3, r2
 800d4ec:	d1ec      	bne.n	800d4c8 <_vfiprintf_r+0x7d8>
 800d4ee:	e0c4      	b.n	800d67a <_vfiprintf_r+0x98a>
 800d4f0:	ae40      	add	r6, sp, #256	; 0x100
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d000      	beq.n	800d4f8 <_vfiprintf_r+0x808>
 800d4f6:	e0c0      	b.n	800d67a <_vfiprintf_r+0x98a>
 800d4f8:	07e4      	lsls	r4, r4, #31
 800d4fa:	d400      	bmi.n	800d4fe <_vfiprintf_r+0x80e>
 800d4fc:	e0bd      	b.n	800d67a <_vfiprintf_r+0x98a>
 800d4fe:	26b7      	movs	r6, #183	; 0xb7
 800d500:	ab12      	add	r3, sp, #72	; 0x48
 800d502:	18f6      	adds	r6, r6, r3
 800d504:	2330      	movs	r3, #48	; 0x30
 800d506:	e7a0      	b.n	800d44a <_vfiprintf_r+0x75a>
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d100      	bne.n	800d50e <_vfiprintf_r+0x81e>
 800d50c:	e07e      	b.n	800d60c <_vfiprintf_r+0x91c>
 800d50e:	ae27      	add	r6, sp, #156	; 0x9c
 800d510:	7033      	strb	r3, [r6, #0]
 800d512:	2300      	movs	r3, #0
 800d514:	aa12      	add	r2, sp, #72	; 0x48
 800d516:	70d3      	strb	r3, [r2, #3]
 800d518:	9704      	str	r7, [sp, #16]
 800d51a:	e576      	b.n	800d00a <_vfiprintf_r+0x31a>
 800d51c:	2010      	movs	r0, #16
 800d51e:	1812      	adds	r2, r2, r0
 800d520:	6068      	str	r0, [r5, #4]
 800d522:	9216      	str	r2, [sp, #88]	; 0x58
 800d524:	9315      	str	r3, [sp, #84]	; 0x54
 800d526:	2b07      	cmp	r3, #7
 800d528:	dd07      	ble.n	800d53a <_vfiprintf_r+0x84a>
 800d52a:	9903      	ldr	r1, [sp, #12]
 800d52c:	9806      	ldr	r0, [sp, #24]
 800d52e:	aa14      	add	r2, sp, #80	; 0x50
 800d530:	f7ff fbaa 	bl	800cc88 <__sprint_r>
 800d534:	2800      	cmp	r0, #0
 800d536:	d144      	bne.n	800d5c2 <_vfiprintf_r+0x8d2>
 800d538:	a917      	add	r1, sp, #92	; 0x5c
 800d53a:	000d      	movs	r5, r1
 800d53c:	3f10      	subs	r7, #16
 800d53e:	e63b      	b.n	800d1b8 <_vfiprintf_r+0x4c8>
 800d540:	2010      	movs	r0, #16
 800d542:	1812      	adds	r2, r2, r0
 800d544:	6068      	str	r0, [r5, #4]
 800d546:	9216      	str	r2, [sp, #88]	; 0x58
 800d548:	9315      	str	r3, [sp, #84]	; 0x54
 800d54a:	2b07      	cmp	r3, #7
 800d54c:	dd07      	ble.n	800d55e <_vfiprintf_r+0x86e>
 800d54e:	9903      	ldr	r1, [sp, #12]
 800d550:	9806      	ldr	r0, [sp, #24]
 800d552:	aa14      	add	r2, sp, #80	; 0x50
 800d554:	f7ff fb98 	bl	800cc88 <__sprint_r>
 800d558:	2800      	cmp	r0, #0
 800d55a:	d132      	bne.n	800d5c2 <_vfiprintf_r+0x8d2>
 800d55c:	a917      	add	r1, sp, #92	; 0x5c
 800d55e:	000d      	movs	r5, r1
 800d560:	3f10      	subs	r7, #16
 800d562:	e67e      	b.n	800d262 <_vfiprintf_r+0x572>
 800d564:	2010      	movs	r0, #16
 800d566:	1812      	adds	r2, r2, r0
 800d568:	6068      	str	r0, [r5, #4]
 800d56a:	9216      	str	r2, [sp, #88]	; 0x58
 800d56c:	9315      	str	r3, [sp, #84]	; 0x54
 800d56e:	2b07      	cmp	r3, #7
 800d570:	dd07      	ble.n	800d582 <_vfiprintf_r+0x892>
 800d572:	9903      	ldr	r1, [sp, #12]
 800d574:	9806      	ldr	r0, [sp, #24]
 800d576:	aa14      	add	r2, sp, #80	; 0x50
 800d578:	f7ff fb86 	bl	800cc88 <__sprint_r>
 800d57c:	2800      	cmp	r0, #0
 800d57e:	d120      	bne.n	800d5c2 <_vfiprintf_r+0x8d2>
 800d580:	a917      	add	r1, sp, #92	; 0x5c
 800d582:	000d      	movs	r5, r1
 800d584:	3f10      	subs	r7, #16
 800d586:	e68b      	b.n	800d2a0 <_vfiprintf_r+0x5b0>
 800d588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d58a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d58c:	2610      	movs	r6, #16
 800d58e:	1a9c      	subs	r4, r3, r2
 800d590:	2c00      	cmp	r4, #0
 800d592:	dc00      	bgt.n	800d596 <_vfiprintf_r+0x8a6>
 800d594:	e6b7      	b.n	800d306 <_vfiprintf_r+0x616>
 800d596:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d598:	4a3b      	ldr	r2, [pc, #236]	; (800d688 <_vfiprintf_r+0x998>)
 800d59a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d59c:	3101      	adds	r1, #1
 800d59e:	602a      	str	r2, [r5, #0]
 800d5a0:	2c10      	cmp	r4, #16
 800d5a2:	dc22      	bgt.n	800d5ea <_vfiprintf_r+0x8fa>
 800d5a4:	606c      	str	r4, [r5, #4]
 800d5a6:	18e4      	adds	r4, r4, r3
 800d5a8:	9416      	str	r4, [sp, #88]	; 0x58
 800d5aa:	9115      	str	r1, [sp, #84]	; 0x54
 800d5ac:	2907      	cmp	r1, #7
 800d5ae:	dc00      	bgt.n	800d5b2 <_vfiprintf_r+0x8c2>
 800d5b0:	e6a9      	b.n	800d306 <_vfiprintf_r+0x616>
 800d5b2:	9903      	ldr	r1, [sp, #12]
 800d5b4:	9806      	ldr	r0, [sp, #24]
 800d5b6:	aa14      	add	r2, sp, #80	; 0x50
 800d5b8:	f7ff fb66 	bl	800cc88 <__sprint_r>
 800d5bc:	2800      	cmp	r0, #0
 800d5be:	d100      	bne.n	800d5c2 <_vfiprintf_r+0x8d2>
 800d5c0:	e6a1      	b.n	800d306 <_vfiprintf_r+0x616>
 800d5c2:	9b03      	ldr	r3, [sp, #12]
 800d5c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5c6:	07db      	lsls	r3, r3, #31
 800d5c8:	d407      	bmi.n	800d5da <_vfiprintf_r+0x8ea>
 800d5ca:	9b03      	ldr	r3, [sp, #12]
 800d5cc:	899b      	ldrh	r3, [r3, #12]
 800d5ce:	059b      	lsls	r3, r3, #22
 800d5d0:	d403      	bmi.n	800d5da <_vfiprintf_r+0x8ea>
 800d5d2:	9b03      	ldr	r3, [sp, #12]
 800d5d4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800d5d6:	f7fb ff32 	bl	800943e <__retarget_lock_release_recursive>
 800d5da:	9b03      	ldr	r3, [sp, #12]
 800d5dc:	899b      	ldrh	r3, [r3, #12]
 800d5de:	065b      	lsls	r3, r3, #25
 800d5e0:	d401      	bmi.n	800d5e6 <_vfiprintf_r+0x8f6>
 800d5e2:	f7ff fbc3 	bl	800cd6c <_vfiprintf_r+0x7c>
 800d5e6:	f7ff fbbe 	bl	800cd66 <_vfiprintf_r+0x76>
 800d5ea:	3310      	adds	r3, #16
 800d5ec:	606e      	str	r6, [r5, #4]
 800d5ee:	9316      	str	r3, [sp, #88]	; 0x58
 800d5f0:	9115      	str	r1, [sp, #84]	; 0x54
 800d5f2:	3508      	adds	r5, #8
 800d5f4:	2907      	cmp	r1, #7
 800d5f6:	dd07      	ble.n	800d608 <_vfiprintf_r+0x918>
 800d5f8:	9903      	ldr	r1, [sp, #12]
 800d5fa:	9806      	ldr	r0, [sp, #24]
 800d5fc:	aa14      	add	r2, sp, #80	; 0x50
 800d5fe:	f7ff fb43 	bl	800cc88 <__sprint_r>
 800d602:	2800      	cmp	r0, #0
 800d604:	d1dd      	bne.n	800d5c2 <_vfiprintf_r+0x8d2>
 800d606:	ad17      	add	r5, sp, #92	; 0x5c
 800d608:	3c10      	subs	r4, #16
 800d60a:	e7c4      	b.n	800d596 <_vfiprintf_r+0x8a6>
 800d60c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d102      	bne.n	800d618 <_vfiprintf_r+0x928>
 800d612:	2300      	movs	r3, #0
 800d614:	9315      	str	r3, [sp, #84]	; 0x54
 800d616:	e7d4      	b.n	800d5c2 <_vfiprintf_r+0x8d2>
 800d618:	9903      	ldr	r1, [sp, #12]
 800d61a:	9806      	ldr	r0, [sp, #24]
 800d61c:	aa14      	add	r2, sp, #80	; 0x50
 800d61e:	f7ff fb33 	bl	800cc88 <__sprint_r>
 800d622:	2800      	cmp	r0, #0
 800d624:	d0f5      	beq.n	800d612 <_vfiprintf_r+0x922>
 800d626:	e7cc      	b.n	800d5c2 <_vfiprintf_r+0x8d2>
 800d628:	0027      	movs	r7, r4
 800d62a:	2a00      	cmp	r2, #0
 800d62c:	d100      	bne.n	800d630 <_vfiprintf_r+0x940>
 800d62e:	e51b      	b.n	800d068 <_vfiprintf_r+0x378>
 800d630:	2b01      	cmp	r3, #1
 800d632:	d100      	bne.n	800d636 <_vfiprintf_r+0x946>
 800d634:	e6fe      	b.n	800d434 <_vfiprintf_r+0x744>
 800d636:	ae40      	add	r6, sp, #256	; 0x100
 800d638:	2b02      	cmp	r3, #2
 800d63a:	d100      	bne.n	800d63e <_vfiprintf_r+0x94e>
 800d63c:	e743      	b.n	800d4c6 <_vfiprintf_r+0x7d6>
 800d63e:	2307      	movs	r3, #7
 800d640:	469c      	mov	ip, r3
 800d642:	4663      	mov	r3, ip
 800d644:	9900      	ldr	r1, [sp, #0]
 800d646:	0032      	movs	r2, r6
 800d648:	400b      	ands	r3, r1
 800d64a:	9901      	ldr	r1, [sp, #4]
 800d64c:	3e01      	subs	r6, #1
 800d64e:	074c      	lsls	r4, r1, #29
 800d650:	9900      	ldr	r1, [sp, #0]
 800d652:	3330      	adds	r3, #48	; 0x30
 800d654:	08c8      	lsrs	r0, r1, #3
 800d656:	9901      	ldr	r1, [sp, #4]
 800d658:	4304      	orrs	r4, r0
 800d65a:	08c9      	lsrs	r1, r1, #3
 800d65c:	9101      	str	r1, [sp, #4]
 800d65e:	0021      	movs	r1, r4
 800d660:	9801      	ldr	r0, [sp, #4]
 800d662:	7033      	strb	r3, [r6, #0]
 800d664:	9400      	str	r4, [sp, #0]
 800d666:	4301      	orrs	r1, r0
 800d668:	d1eb      	bne.n	800d642 <_vfiprintf_r+0x952>
 800d66a:	07f9      	lsls	r1, r7, #31
 800d66c:	d505      	bpl.n	800d67a <_vfiprintf_r+0x98a>
 800d66e:	2b30      	cmp	r3, #48	; 0x30
 800d670:	d003      	beq.n	800d67a <_vfiprintf_r+0x98a>
 800d672:	2330      	movs	r3, #48	; 0x30
 800d674:	3e01      	subs	r6, #1
 800d676:	7033      	strb	r3, [r6, #0]
 800d678:	1e96      	subs	r6, r2, #2
 800d67a:	9b05      	ldr	r3, [sp, #20]
 800d67c:	003c      	movs	r4, r7
 800d67e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d680:	ab40      	add	r3, sp, #256	; 0x100
 800d682:	1b9b      	subs	r3, r3, r6
 800d684:	9305      	str	r3, [sp, #20]
 800d686:	e575      	b.n	800d174 <_vfiprintf_r+0x484>
 800d688:	0800e842 	.word	0x0800e842

0800d68c <__sbprintf>:
 800d68c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d68e:	0015      	movs	r5, r2
 800d690:	2202      	movs	r2, #2
 800d692:	4c1e      	ldr	r4, [pc, #120]	; (800d70c <__sbprintf+0x80>)
 800d694:	001f      	movs	r7, r3
 800d696:	898b      	ldrh	r3, [r1, #12]
 800d698:	44a5      	add	sp, r4
 800d69a:	4393      	bics	r3, r2
 800d69c:	466a      	mov	r2, sp
 800d69e:	8193      	strh	r3, [r2, #12]
 800d6a0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800d6a2:	0006      	movs	r6, r0
 800d6a4:	9319      	str	r3, [sp, #100]	; 0x64
 800d6a6:	89cb      	ldrh	r3, [r1, #14]
 800d6a8:	a816      	add	r0, sp, #88	; 0x58
 800d6aa:	81d3      	strh	r3, [r2, #14]
 800d6ac:	69cb      	ldr	r3, [r1, #28]
 800d6ae:	000c      	movs	r4, r1
 800d6b0:	9307      	str	r3, [sp, #28]
 800d6b2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800d6b4:	9309      	str	r3, [sp, #36]	; 0x24
 800d6b6:	ab1a      	add	r3, sp, #104	; 0x68
 800d6b8:	9300      	str	r3, [sp, #0]
 800d6ba:	9304      	str	r3, [sp, #16]
 800d6bc:	2380      	movs	r3, #128	; 0x80
 800d6be:	00db      	lsls	r3, r3, #3
 800d6c0:	9302      	str	r3, [sp, #8]
 800d6c2:	9305      	str	r3, [sp, #20]
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	9306      	str	r3, [sp, #24]
 800d6c8:	f7fb feb6 	bl	8009438 <__retarget_lock_init_recursive>
 800d6cc:	002a      	movs	r2, r5
 800d6ce:	003b      	movs	r3, r7
 800d6d0:	4669      	mov	r1, sp
 800d6d2:	0030      	movs	r0, r6
 800d6d4:	f7ff fb0c 	bl	800ccf0 <_vfiprintf_r>
 800d6d8:	1e05      	subs	r5, r0, #0
 800d6da:	db07      	blt.n	800d6ec <__sbprintf+0x60>
 800d6dc:	4669      	mov	r1, sp
 800d6de:	0030      	movs	r0, r6
 800d6e0:	f7fd fd40 	bl	800b164 <_fflush_r>
 800d6e4:	2800      	cmp	r0, #0
 800d6e6:	d001      	beq.n	800d6ec <__sbprintf+0x60>
 800d6e8:	2501      	movs	r5, #1
 800d6ea:	426d      	negs	r5, r5
 800d6ec:	466b      	mov	r3, sp
 800d6ee:	899a      	ldrh	r2, [r3, #12]
 800d6f0:	2340      	movs	r3, #64	; 0x40
 800d6f2:	421a      	tst	r2, r3
 800d6f4:	d002      	beq.n	800d6fc <__sbprintf+0x70>
 800d6f6:	89a2      	ldrh	r2, [r4, #12]
 800d6f8:	4313      	orrs	r3, r2
 800d6fa:	81a3      	strh	r3, [r4, #12]
 800d6fc:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d6fe:	f7fb fe9c 	bl	800943a <__retarget_lock_close_recursive>
 800d702:	0028      	movs	r0, r5
 800d704:	4b02      	ldr	r3, [pc, #8]	; (800d710 <__sbprintf+0x84>)
 800d706:	449d      	add	sp, r3
 800d708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d70a:	46c0      	nop			; (mov r8, r8)
 800d70c:	fffffb94 	.word	0xfffffb94
 800d710:	0000046c 	.word	0x0000046c

0800d714 <__sfvwrite_r>:
 800d714:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d716:	6893      	ldr	r3, [r2, #8]
 800d718:	b087      	sub	sp, #28
 800d71a:	000c      	movs	r4, r1
 800d71c:	9002      	str	r0, [sp, #8]
 800d71e:	9204      	str	r2, [sp, #16]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d102      	bne.n	800d72a <__sfvwrite_r+0x16>
 800d724:	2000      	movs	r0, #0
 800d726:	b007      	add	sp, #28
 800d728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d72a:	898b      	ldrh	r3, [r1, #12]
 800d72c:	071b      	lsls	r3, r3, #28
 800d72e:	d557      	bpl.n	800d7e0 <__sfvwrite_r+0xcc>
 800d730:	690b      	ldr	r3, [r1, #16]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d054      	beq.n	800d7e0 <__sfvwrite_r+0xcc>
 800d736:	9b04      	ldr	r3, [sp, #16]
 800d738:	2202      	movs	r2, #2
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	9301      	str	r3, [sp, #4]
 800d73e:	89a3      	ldrh	r3, [r4, #12]
 800d740:	001f      	movs	r7, r3
 800d742:	4017      	ands	r7, r2
 800d744:	4213      	tst	r3, r2
 800d746:	d171      	bne.n	800d82c <__sfvwrite_r+0x118>
 800d748:	2201      	movs	r2, #1
 800d74a:	2101      	movs	r1, #1
 800d74c:	401a      	ands	r2, r3
 800d74e:	420b      	tst	r3, r1
 800d750:	d100      	bne.n	800d754 <__sfvwrite_r+0x40>
 800d752:	e0a5      	b.n	800d8a0 <__sfvwrite_r+0x18c>
 800d754:	0038      	movs	r0, r7
 800d756:	003e      	movs	r6, r7
 800d758:	9703      	str	r7, [sp, #12]
 800d75a:	9b03      	ldr	r3, [sp, #12]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d100      	bne.n	800d762 <__sfvwrite_r+0x4e>
 800d760:	e10b      	b.n	800d97a <__sfvwrite_r+0x266>
 800d762:	2800      	cmp	r0, #0
 800d764:	d10a      	bne.n	800d77c <__sfvwrite_r+0x68>
 800d766:	001a      	movs	r2, r3
 800d768:	210a      	movs	r1, #10
 800d76a:	0030      	movs	r0, r6
 800d76c:	f7fb fe70 	bl	8009450 <memchr>
 800d770:	9b03      	ldr	r3, [sp, #12]
 800d772:	1c5f      	adds	r7, r3, #1
 800d774:	2800      	cmp	r0, #0
 800d776:	d001      	beq.n	800d77c <__sfvwrite_r+0x68>
 800d778:	3001      	adds	r0, #1
 800d77a:	1b87      	subs	r7, r0, r6
 800d77c:	9b03      	ldr	r3, [sp, #12]
 800d77e:	9705      	str	r7, [sp, #20]
 800d780:	429f      	cmp	r7, r3
 800d782:	d900      	bls.n	800d786 <__sfvwrite_r+0x72>
 800d784:	9305      	str	r3, [sp, #20]
 800d786:	6820      	ldr	r0, [r4, #0]
 800d788:	6922      	ldr	r2, [r4, #16]
 800d78a:	68a5      	ldr	r5, [r4, #8]
 800d78c:	6963      	ldr	r3, [r4, #20]
 800d78e:	4290      	cmp	r0, r2
 800d790:	d800      	bhi.n	800d794 <__sfvwrite_r+0x80>
 800d792:	e0fb      	b.n	800d98c <__sfvwrite_r+0x278>
 800d794:	9a05      	ldr	r2, [sp, #20]
 800d796:	18ed      	adds	r5, r5, r3
 800d798:	42aa      	cmp	r2, r5
 800d79a:	dc00      	bgt.n	800d79e <__sfvwrite_r+0x8a>
 800d79c:	e0f6      	b.n	800d98c <__sfvwrite_r+0x278>
 800d79e:	0031      	movs	r1, r6
 800d7a0:	002a      	movs	r2, r5
 800d7a2:	f7ff f813 	bl	800c7cc <memmove>
 800d7a6:	6823      	ldr	r3, [r4, #0]
 800d7a8:	0021      	movs	r1, r4
 800d7aa:	195b      	adds	r3, r3, r5
 800d7ac:	9802      	ldr	r0, [sp, #8]
 800d7ae:	6023      	str	r3, [r4, #0]
 800d7b0:	f7fd fcd8 	bl	800b164 <_fflush_r>
 800d7b4:	2800      	cmp	r0, #0
 800d7b6:	d16e      	bne.n	800d896 <__sfvwrite_r+0x182>
 800d7b8:	2001      	movs	r0, #1
 800d7ba:	1b7f      	subs	r7, r7, r5
 800d7bc:	d105      	bne.n	800d7ca <__sfvwrite_r+0xb6>
 800d7be:	0021      	movs	r1, r4
 800d7c0:	9802      	ldr	r0, [sp, #8]
 800d7c2:	f7fd fccf 	bl	800b164 <_fflush_r>
 800d7c6:	2800      	cmp	r0, #0
 800d7c8:	d165      	bne.n	800d896 <__sfvwrite_r+0x182>
 800d7ca:	9b03      	ldr	r3, [sp, #12]
 800d7cc:	9a04      	ldr	r2, [sp, #16]
 800d7ce:	1b5b      	subs	r3, r3, r5
 800d7d0:	9303      	str	r3, [sp, #12]
 800d7d2:	9b04      	ldr	r3, [sp, #16]
 800d7d4:	1976      	adds	r6, r6, r5
 800d7d6:	689b      	ldr	r3, [r3, #8]
 800d7d8:	1b5b      	subs	r3, r3, r5
 800d7da:	6093      	str	r3, [r2, #8]
 800d7dc:	d1bd      	bne.n	800d75a <__sfvwrite_r+0x46>
 800d7de:	e7a1      	b.n	800d724 <__sfvwrite_r+0x10>
 800d7e0:	0021      	movs	r1, r4
 800d7e2:	9802      	ldr	r0, [sp, #8]
 800d7e4:	f000 f8f4 	bl	800d9d0 <__swsetup_r>
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	d0a4      	beq.n	800d736 <__sfvwrite_r+0x22>
 800d7ec:	2001      	movs	r0, #1
 800d7ee:	4240      	negs	r0, r0
 800d7f0:	e799      	b.n	800d726 <__sfvwrite_r+0x12>
 800d7f2:	9b01      	ldr	r3, [sp, #4]
 800d7f4:	681e      	ldr	r6, [r3, #0]
 800d7f6:	685d      	ldr	r5, [r3, #4]
 800d7f8:	3308      	adds	r3, #8
 800d7fa:	9301      	str	r3, [sp, #4]
 800d7fc:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800d7fe:	69e1      	ldr	r1, [r4, #28]
 800d800:	2d00      	cmp	r5, #0
 800d802:	d0f6      	beq.n	800d7f2 <__sfvwrite_r+0xde>
 800d804:	4a6e      	ldr	r2, [pc, #440]	; (800d9c0 <__sfvwrite_r+0x2ac>)
 800d806:	002b      	movs	r3, r5
 800d808:	4295      	cmp	r5, r2
 800d80a:	d900      	bls.n	800d80e <__sfvwrite_r+0xfa>
 800d80c:	0013      	movs	r3, r2
 800d80e:	0032      	movs	r2, r6
 800d810:	9802      	ldr	r0, [sp, #8]
 800d812:	47b8      	blx	r7
 800d814:	2800      	cmp	r0, #0
 800d816:	dd3e      	ble.n	800d896 <__sfvwrite_r+0x182>
 800d818:	9b04      	ldr	r3, [sp, #16]
 800d81a:	9a04      	ldr	r2, [sp, #16]
 800d81c:	689b      	ldr	r3, [r3, #8]
 800d81e:	1836      	adds	r6, r6, r0
 800d820:	1a1b      	subs	r3, r3, r0
 800d822:	1a2d      	subs	r5, r5, r0
 800d824:	6093      	str	r3, [r2, #8]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d1e8      	bne.n	800d7fc <__sfvwrite_r+0xe8>
 800d82a:	e77b      	b.n	800d724 <__sfvwrite_r+0x10>
 800d82c:	2600      	movs	r6, #0
 800d82e:	0035      	movs	r5, r6
 800d830:	e7e4      	b.n	800d7fc <__sfvwrite_r+0xe8>
 800d832:	9b01      	ldr	r3, [sp, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	9303      	str	r3, [sp, #12]
 800d838:	9b01      	ldr	r3, [sp, #4]
 800d83a:	685d      	ldr	r5, [r3, #4]
 800d83c:	3308      	adds	r3, #8
 800d83e:	9301      	str	r3, [sp, #4]
 800d840:	220c      	movs	r2, #12
 800d842:	5ea3      	ldrsh	r3, [r4, r2]
 800d844:	6820      	ldr	r0, [r4, #0]
 800d846:	68a6      	ldr	r6, [r4, #8]
 800d848:	2d00      	cmp	r5, #0
 800d84a:	d0f2      	beq.n	800d832 <__sfvwrite_r+0x11e>
 800d84c:	2180      	movs	r1, #128	; 0x80
 800d84e:	0089      	lsls	r1, r1, #2
 800d850:	b29a      	uxth	r2, r3
 800d852:	420b      	tst	r3, r1
 800d854:	d062      	beq.n	800d91c <__sfvwrite_r+0x208>
 800d856:	42ae      	cmp	r6, r5
 800d858:	d837      	bhi.n	800d8ca <__sfvwrite_r+0x1b6>
 800d85a:	2390      	movs	r3, #144	; 0x90
 800d85c:	00db      	lsls	r3, r3, #3
 800d85e:	421a      	tst	r2, r3
 800d860:	d033      	beq.n	800d8ca <__sfvwrite_r+0x1b6>
 800d862:	6921      	ldr	r1, [r4, #16]
 800d864:	1a43      	subs	r3, r0, r1
 800d866:	2003      	movs	r0, #3
 800d868:	9305      	str	r3, [sp, #20]
 800d86a:	6963      	ldr	r3, [r4, #20]
 800d86c:	4343      	muls	r3, r0
 800d86e:	0fdf      	lsrs	r7, r3, #31
 800d870:	18ff      	adds	r7, r7, r3
 800d872:	9b05      	ldr	r3, [sp, #20]
 800d874:	107f      	asrs	r7, r7, #1
 800d876:	3301      	adds	r3, #1
 800d878:	195b      	adds	r3, r3, r5
 800d87a:	42bb      	cmp	r3, r7
 800d87c:	d900      	bls.n	800d880 <__sfvwrite_r+0x16c>
 800d87e:	001f      	movs	r7, r3
 800d880:	0552      	lsls	r2, r2, #21
 800d882:	d53c      	bpl.n	800d8fe <__sfvwrite_r+0x1ea>
 800d884:	0039      	movs	r1, r7
 800d886:	9802      	ldr	r0, [sp, #8]
 800d888:	f7fb ff10 	bl	80096ac <_malloc_r>
 800d88c:	1e06      	subs	r6, r0, #0
 800d88e:	d10a      	bne.n	800d8a6 <__sfvwrite_r+0x192>
 800d890:	230c      	movs	r3, #12
 800d892:	9a02      	ldr	r2, [sp, #8]
 800d894:	6013      	str	r3, [r2, #0]
 800d896:	2340      	movs	r3, #64	; 0x40
 800d898:	89a2      	ldrh	r2, [r4, #12]
 800d89a:	4313      	orrs	r3, r2
 800d89c:	81a3      	strh	r3, [r4, #12]
 800d89e:	e7a5      	b.n	800d7ec <__sfvwrite_r+0xd8>
 800d8a0:	0015      	movs	r5, r2
 800d8a2:	9203      	str	r2, [sp, #12]
 800d8a4:	e7cc      	b.n	800d840 <__sfvwrite_r+0x12c>
 800d8a6:	9a05      	ldr	r2, [sp, #20]
 800d8a8:	6921      	ldr	r1, [r4, #16]
 800d8aa:	f7fb fddc 	bl	8009466 <memcpy>
 800d8ae:	89a2      	ldrh	r2, [r4, #12]
 800d8b0:	4b44      	ldr	r3, [pc, #272]	; (800d9c4 <__sfvwrite_r+0x2b0>)
 800d8b2:	401a      	ands	r2, r3
 800d8b4:	2380      	movs	r3, #128	; 0x80
 800d8b6:	4313      	orrs	r3, r2
 800d8b8:	81a3      	strh	r3, [r4, #12]
 800d8ba:	9b05      	ldr	r3, [sp, #20]
 800d8bc:	6126      	str	r6, [r4, #16]
 800d8be:	18f6      	adds	r6, r6, r3
 800d8c0:	6026      	str	r6, [r4, #0]
 800d8c2:	002e      	movs	r6, r5
 800d8c4:	6167      	str	r7, [r4, #20]
 800d8c6:	1aff      	subs	r7, r7, r3
 800d8c8:	60a7      	str	r7, [r4, #8]
 800d8ca:	002f      	movs	r7, r5
 800d8cc:	42ae      	cmp	r6, r5
 800d8ce:	d900      	bls.n	800d8d2 <__sfvwrite_r+0x1be>
 800d8d0:	002e      	movs	r6, r5
 800d8d2:	0032      	movs	r2, r6
 800d8d4:	9903      	ldr	r1, [sp, #12]
 800d8d6:	6820      	ldr	r0, [r4, #0]
 800d8d8:	f7fe ff78 	bl	800c7cc <memmove>
 800d8dc:	68a3      	ldr	r3, [r4, #8]
 800d8de:	1b9b      	subs	r3, r3, r6
 800d8e0:	60a3      	str	r3, [r4, #8]
 800d8e2:	6823      	ldr	r3, [r4, #0]
 800d8e4:	199b      	adds	r3, r3, r6
 800d8e6:	6023      	str	r3, [r4, #0]
 800d8e8:	9b03      	ldr	r3, [sp, #12]
 800d8ea:	9a04      	ldr	r2, [sp, #16]
 800d8ec:	19db      	adds	r3, r3, r7
 800d8ee:	9303      	str	r3, [sp, #12]
 800d8f0:	9b04      	ldr	r3, [sp, #16]
 800d8f2:	1bed      	subs	r5, r5, r7
 800d8f4:	689b      	ldr	r3, [r3, #8]
 800d8f6:	1bdb      	subs	r3, r3, r7
 800d8f8:	6093      	str	r3, [r2, #8]
 800d8fa:	d1a1      	bne.n	800d840 <__sfvwrite_r+0x12c>
 800d8fc:	e712      	b.n	800d724 <__sfvwrite_r+0x10>
 800d8fe:	003a      	movs	r2, r7
 800d900:	9802      	ldr	r0, [sp, #8]
 800d902:	f7fe fffd 	bl	800c900 <_realloc_r>
 800d906:	1e06      	subs	r6, r0, #0
 800d908:	d1d7      	bne.n	800d8ba <__sfvwrite_r+0x1a6>
 800d90a:	6921      	ldr	r1, [r4, #16]
 800d90c:	9802      	ldr	r0, [sp, #8]
 800d90e:	f7fb fe1b 	bl	8009548 <_free_r>
 800d912:	2280      	movs	r2, #128	; 0x80
 800d914:	89a3      	ldrh	r3, [r4, #12]
 800d916:	4393      	bics	r3, r2
 800d918:	81a3      	strh	r3, [r4, #12]
 800d91a:	e7b9      	b.n	800d890 <__sfvwrite_r+0x17c>
 800d91c:	6923      	ldr	r3, [r4, #16]
 800d91e:	4283      	cmp	r3, r0
 800d920:	d302      	bcc.n	800d928 <__sfvwrite_r+0x214>
 800d922:	6967      	ldr	r7, [r4, #20]
 800d924:	42af      	cmp	r7, r5
 800d926:	d916      	bls.n	800d956 <__sfvwrite_r+0x242>
 800d928:	42ae      	cmp	r6, r5
 800d92a:	d900      	bls.n	800d92e <__sfvwrite_r+0x21a>
 800d92c:	002e      	movs	r6, r5
 800d92e:	0032      	movs	r2, r6
 800d930:	9903      	ldr	r1, [sp, #12]
 800d932:	f7fe ff4b 	bl	800c7cc <memmove>
 800d936:	68a3      	ldr	r3, [r4, #8]
 800d938:	6822      	ldr	r2, [r4, #0]
 800d93a:	1b9b      	subs	r3, r3, r6
 800d93c:	1992      	adds	r2, r2, r6
 800d93e:	0037      	movs	r7, r6
 800d940:	60a3      	str	r3, [r4, #8]
 800d942:	6022      	str	r2, [r4, #0]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d1cf      	bne.n	800d8e8 <__sfvwrite_r+0x1d4>
 800d948:	0021      	movs	r1, r4
 800d94a:	9802      	ldr	r0, [sp, #8]
 800d94c:	f7fd fc0a 	bl	800b164 <_fflush_r>
 800d950:	2800      	cmp	r0, #0
 800d952:	d0c9      	beq.n	800d8e8 <__sfvwrite_r+0x1d4>
 800d954:	e79f      	b.n	800d896 <__sfvwrite_r+0x182>
 800d956:	4b1c      	ldr	r3, [pc, #112]	; (800d9c8 <__sfvwrite_r+0x2b4>)
 800d958:	0028      	movs	r0, r5
 800d95a:	429d      	cmp	r5, r3
 800d95c:	d900      	bls.n	800d960 <__sfvwrite_r+0x24c>
 800d95e:	481b      	ldr	r0, [pc, #108]	; (800d9cc <__sfvwrite_r+0x2b8>)
 800d960:	0039      	movs	r1, r7
 800d962:	f7f2 fc77 	bl	8000254 <__divsi3>
 800d966:	003b      	movs	r3, r7
 800d968:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d96a:	4343      	muls	r3, r0
 800d96c:	9a03      	ldr	r2, [sp, #12]
 800d96e:	69e1      	ldr	r1, [r4, #28]
 800d970:	9802      	ldr	r0, [sp, #8]
 800d972:	47b0      	blx	r6
 800d974:	1e07      	subs	r7, r0, #0
 800d976:	dcb7      	bgt.n	800d8e8 <__sfvwrite_r+0x1d4>
 800d978:	e78d      	b.n	800d896 <__sfvwrite_r+0x182>
 800d97a:	9b01      	ldr	r3, [sp, #4]
 800d97c:	2000      	movs	r0, #0
 800d97e:	681e      	ldr	r6, [r3, #0]
 800d980:	685b      	ldr	r3, [r3, #4]
 800d982:	9303      	str	r3, [sp, #12]
 800d984:	9b01      	ldr	r3, [sp, #4]
 800d986:	3308      	adds	r3, #8
 800d988:	9301      	str	r3, [sp, #4]
 800d98a:	e6e6      	b.n	800d75a <__sfvwrite_r+0x46>
 800d98c:	9a05      	ldr	r2, [sp, #20]
 800d98e:	4293      	cmp	r3, r2
 800d990:	dc08      	bgt.n	800d9a4 <__sfvwrite_r+0x290>
 800d992:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d994:	0032      	movs	r2, r6
 800d996:	69e1      	ldr	r1, [r4, #28]
 800d998:	9802      	ldr	r0, [sp, #8]
 800d99a:	47a8      	blx	r5
 800d99c:	1e05      	subs	r5, r0, #0
 800d99e:	dd00      	ble.n	800d9a2 <__sfvwrite_r+0x28e>
 800d9a0:	e70a      	b.n	800d7b8 <__sfvwrite_r+0xa4>
 800d9a2:	e778      	b.n	800d896 <__sfvwrite_r+0x182>
 800d9a4:	9a05      	ldr	r2, [sp, #20]
 800d9a6:	0031      	movs	r1, r6
 800d9a8:	f7fe ff10 	bl	800c7cc <memmove>
 800d9ac:	9a05      	ldr	r2, [sp, #20]
 800d9ae:	68a3      	ldr	r3, [r4, #8]
 800d9b0:	0015      	movs	r5, r2
 800d9b2:	1a9b      	subs	r3, r3, r2
 800d9b4:	60a3      	str	r3, [r4, #8]
 800d9b6:	6823      	ldr	r3, [r4, #0]
 800d9b8:	189b      	adds	r3, r3, r2
 800d9ba:	6023      	str	r3, [r4, #0]
 800d9bc:	e6fc      	b.n	800d7b8 <__sfvwrite_r+0xa4>
 800d9be:	46c0      	nop			; (mov r8, r8)
 800d9c0:	7ffffc00 	.word	0x7ffffc00
 800d9c4:	fffffb7f 	.word	0xfffffb7f
 800d9c8:	7ffffffe 	.word	0x7ffffffe
 800d9cc:	7fffffff 	.word	0x7fffffff

0800d9d0 <__swsetup_r>:
 800d9d0:	4b30      	ldr	r3, [pc, #192]	; (800da94 <__swsetup_r+0xc4>)
 800d9d2:	b570      	push	{r4, r5, r6, lr}
 800d9d4:	0005      	movs	r5, r0
 800d9d6:	6818      	ldr	r0, [r3, #0]
 800d9d8:	000c      	movs	r4, r1
 800d9da:	2800      	cmp	r0, #0
 800d9dc:	d004      	beq.n	800d9e8 <__swsetup_r+0x18>
 800d9de:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d101      	bne.n	800d9e8 <__swsetup_r+0x18>
 800d9e4:	f7fb fbc8 	bl	8009178 <__sinit>
 800d9e8:	230c      	movs	r3, #12
 800d9ea:	5ee2      	ldrsh	r2, [r4, r3]
 800d9ec:	b293      	uxth	r3, r2
 800d9ee:	0711      	lsls	r1, r2, #28
 800d9f0:	d423      	bmi.n	800da3a <__swsetup_r+0x6a>
 800d9f2:	06d9      	lsls	r1, r3, #27
 800d9f4:	d407      	bmi.n	800da06 <__swsetup_r+0x36>
 800d9f6:	2309      	movs	r3, #9
 800d9f8:	2001      	movs	r0, #1
 800d9fa:	602b      	str	r3, [r5, #0]
 800d9fc:	3337      	adds	r3, #55	; 0x37
 800d9fe:	4313      	orrs	r3, r2
 800da00:	81a3      	strh	r3, [r4, #12]
 800da02:	4240      	negs	r0, r0
 800da04:	bd70      	pop	{r4, r5, r6, pc}
 800da06:	075b      	lsls	r3, r3, #29
 800da08:	d513      	bpl.n	800da32 <__swsetup_r+0x62>
 800da0a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800da0c:	2900      	cmp	r1, #0
 800da0e:	d008      	beq.n	800da22 <__swsetup_r+0x52>
 800da10:	0023      	movs	r3, r4
 800da12:	3340      	adds	r3, #64	; 0x40
 800da14:	4299      	cmp	r1, r3
 800da16:	d002      	beq.n	800da1e <__swsetup_r+0x4e>
 800da18:	0028      	movs	r0, r5
 800da1a:	f7fb fd95 	bl	8009548 <_free_r>
 800da1e:	2300      	movs	r3, #0
 800da20:	6323      	str	r3, [r4, #48]	; 0x30
 800da22:	2224      	movs	r2, #36	; 0x24
 800da24:	89a3      	ldrh	r3, [r4, #12]
 800da26:	4393      	bics	r3, r2
 800da28:	81a3      	strh	r3, [r4, #12]
 800da2a:	2300      	movs	r3, #0
 800da2c:	6063      	str	r3, [r4, #4]
 800da2e:	6923      	ldr	r3, [r4, #16]
 800da30:	6023      	str	r3, [r4, #0]
 800da32:	2308      	movs	r3, #8
 800da34:	89a2      	ldrh	r2, [r4, #12]
 800da36:	4313      	orrs	r3, r2
 800da38:	81a3      	strh	r3, [r4, #12]
 800da3a:	6923      	ldr	r3, [r4, #16]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d10b      	bne.n	800da58 <__swsetup_r+0x88>
 800da40:	21a0      	movs	r1, #160	; 0xa0
 800da42:	2280      	movs	r2, #128	; 0x80
 800da44:	89a3      	ldrh	r3, [r4, #12]
 800da46:	0089      	lsls	r1, r1, #2
 800da48:	0092      	lsls	r2, r2, #2
 800da4a:	400b      	ands	r3, r1
 800da4c:	4293      	cmp	r3, r2
 800da4e:	d003      	beq.n	800da58 <__swsetup_r+0x88>
 800da50:	0021      	movs	r1, r4
 800da52:	0028      	movs	r0, r5
 800da54:	f000 f8d4 	bl	800dc00 <__smakebuf_r>
 800da58:	220c      	movs	r2, #12
 800da5a:	5ea3      	ldrsh	r3, [r4, r2]
 800da5c:	2001      	movs	r0, #1
 800da5e:	001a      	movs	r2, r3
 800da60:	b299      	uxth	r1, r3
 800da62:	4002      	ands	r2, r0
 800da64:	4203      	tst	r3, r0
 800da66:	d00f      	beq.n	800da88 <__swsetup_r+0xb8>
 800da68:	2200      	movs	r2, #0
 800da6a:	60a2      	str	r2, [r4, #8]
 800da6c:	6962      	ldr	r2, [r4, #20]
 800da6e:	4252      	negs	r2, r2
 800da70:	61a2      	str	r2, [r4, #24]
 800da72:	2000      	movs	r0, #0
 800da74:	6922      	ldr	r2, [r4, #16]
 800da76:	4282      	cmp	r2, r0
 800da78:	d1c4      	bne.n	800da04 <__swsetup_r+0x34>
 800da7a:	0609      	lsls	r1, r1, #24
 800da7c:	d5c2      	bpl.n	800da04 <__swsetup_r+0x34>
 800da7e:	2240      	movs	r2, #64	; 0x40
 800da80:	4313      	orrs	r3, r2
 800da82:	81a3      	strh	r3, [r4, #12]
 800da84:	3801      	subs	r0, #1
 800da86:	e7bd      	b.n	800da04 <__swsetup_r+0x34>
 800da88:	0788      	lsls	r0, r1, #30
 800da8a:	d400      	bmi.n	800da8e <__swsetup_r+0xbe>
 800da8c:	6962      	ldr	r2, [r4, #20]
 800da8e:	60a2      	str	r2, [r4, #8]
 800da90:	e7ef      	b.n	800da72 <__swsetup_r+0xa2>
 800da92:	46c0      	nop			; (mov r8, r8)
 800da94:	20000140 	.word	0x20000140

0800da98 <__fputwc>:
 800da98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da9a:	b085      	sub	sp, #20
 800da9c:	000e      	movs	r6, r1
 800da9e:	0015      	movs	r5, r2
 800daa0:	9001      	str	r0, [sp, #4]
 800daa2:	f7fe fea7 	bl	800c7f4 <__locale_mb_cur_max>
 800daa6:	0004      	movs	r4, r0
 800daa8:	2801      	cmp	r0, #1
 800daaa:	d119      	bne.n	800dae0 <__fputwc+0x48>
 800daac:	1e73      	subs	r3, r6, #1
 800daae:	2bfe      	cmp	r3, #254	; 0xfe
 800dab0:	d816      	bhi.n	800dae0 <__fputwc+0x48>
 800dab2:	ab02      	add	r3, sp, #8
 800dab4:	711e      	strb	r6, [r3, #4]
 800dab6:	2700      	movs	r7, #0
 800dab8:	42a7      	cmp	r7, r4
 800daba:	d020      	beq.n	800dafe <__fputwc+0x66>
 800dabc:	ab03      	add	r3, sp, #12
 800dabe:	5dd9      	ldrb	r1, [r3, r7]
 800dac0:	68ab      	ldr	r3, [r5, #8]
 800dac2:	3b01      	subs	r3, #1
 800dac4:	60ab      	str	r3, [r5, #8]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	da04      	bge.n	800dad4 <__fputwc+0x3c>
 800daca:	69aa      	ldr	r2, [r5, #24]
 800dacc:	4293      	cmp	r3, r2
 800dace:	db19      	blt.n	800db04 <__fputwc+0x6c>
 800dad0:	290a      	cmp	r1, #10
 800dad2:	d017      	beq.n	800db04 <__fputwc+0x6c>
 800dad4:	682b      	ldr	r3, [r5, #0]
 800dad6:	1c5a      	adds	r2, r3, #1
 800dad8:	602a      	str	r2, [r5, #0]
 800dada:	7019      	strb	r1, [r3, #0]
 800dadc:	3701      	adds	r7, #1
 800dade:	e7eb      	b.n	800dab8 <__fputwc+0x20>
 800dae0:	002b      	movs	r3, r5
 800dae2:	0032      	movs	r2, r6
 800dae4:	9801      	ldr	r0, [sp, #4]
 800dae6:	335c      	adds	r3, #92	; 0x5c
 800dae8:	a903      	add	r1, sp, #12
 800daea:	f000 f843 	bl	800db74 <_wcrtomb_r>
 800daee:	0004      	movs	r4, r0
 800daf0:	1c43      	adds	r3, r0, #1
 800daf2:	d1e0      	bne.n	800dab6 <__fputwc+0x1e>
 800daf4:	2340      	movs	r3, #64	; 0x40
 800daf6:	0006      	movs	r6, r0
 800daf8:	89aa      	ldrh	r2, [r5, #12]
 800dafa:	4313      	orrs	r3, r2
 800dafc:	81ab      	strh	r3, [r5, #12]
 800dafe:	0030      	movs	r0, r6
 800db00:	b005      	add	sp, #20
 800db02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db04:	002a      	movs	r2, r5
 800db06:	9801      	ldr	r0, [sp, #4]
 800db08:	f000 f8b8 	bl	800dc7c <__swbuf_r>
 800db0c:	1c43      	adds	r3, r0, #1
 800db0e:	d1e5      	bne.n	800dadc <__fputwc+0x44>
 800db10:	0006      	movs	r6, r0
 800db12:	e7f4      	b.n	800dafe <__fputwc+0x66>

0800db14 <_fputwc_r>:
 800db14:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800db16:	b570      	push	{r4, r5, r6, lr}
 800db18:	0005      	movs	r5, r0
 800db1a:	000e      	movs	r6, r1
 800db1c:	0014      	movs	r4, r2
 800db1e:	07db      	lsls	r3, r3, #31
 800db20:	d405      	bmi.n	800db2e <_fputwc_r+0x1a>
 800db22:	8993      	ldrh	r3, [r2, #12]
 800db24:	059b      	lsls	r3, r3, #22
 800db26:	d402      	bmi.n	800db2e <_fputwc_r+0x1a>
 800db28:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800db2a:	f7fb fc87 	bl	800943c <__retarget_lock_acquire_recursive>
 800db2e:	230c      	movs	r3, #12
 800db30:	5ee2      	ldrsh	r2, [r4, r3]
 800db32:	2380      	movs	r3, #128	; 0x80
 800db34:	019b      	lsls	r3, r3, #6
 800db36:	421a      	tst	r2, r3
 800db38:	d104      	bne.n	800db44 <_fputwc_r+0x30>
 800db3a:	431a      	orrs	r2, r3
 800db3c:	81a2      	strh	r2, [r4, #12]
 800db3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800db40:	4313      	orrs	r3, r2
 800db42:	6663      	str	r3, [r4, #100]	; 0x64
 800db44:	0028      	movs	r0, r5
 800db46:	0022      	movs	r2, r4
 800db48:	0031      	movs	r1, r6
 800db4a:	f7ff ffa5 	bl	800da98 <__fputwc>
 800db4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db50:	0005      	movs	r5, r0
 800db52:	07db      	lsls	r3, r3, #31
 800db54:	d405      	bmi.n	800db62 <_fputwc_r+0x4e>
 800db56:	89a3      	ldrh	r3, [r4, #12]
 800db58:	059b      	lsls	r3, r3, #22
 800db5a:	d402      	bmi.n	800db62 <_fputwc_r+0x4e>
 800db5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db5e:	f7fb fc6e 	bl	800943e <__retarget_lock_release_recursive>
 800db62:	0028      	movs	r0, r5
 800db64:	bd70      	pop	{r4, r5, r6, pc}

0800db66 <abort>:
 800db66:	2006      	movs	r0, #6
 800db68:	b510      	push	{r4, lr}
 800db6a:	f000 f905 	bl	800dd78 <raise>
 800db6e:	2001      	movs	r0, #1
 800db70:	f7fb f954 	bl	8008e1c <_exit>

0800db74 <_wcrtomb_r>:
 800db74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800db76:	001d      	movs	r5, r3
 800db78:	4b09      	ldr	r3, [pc, #36]	; (800dba0 <_wcrtomb_r+0x2c>)
 800db7a:	0004      	movs	r4, r0
 800db7c:	33e0      	adds	r3, #224	; 0xe0
 800db7e:	681e      	ldr	r6, [r3, #0]
 800db80:	002b      	movs	r3, r5
 800db82:	2900      	cmp	r1, #0
 800db84:	d101      	bne.n	800db8a <_wcrtomb_r+0x16>
 800db86:	000a      	movs	r2, r1
 800db88:	a901      	add	r1, sp, #4
 800db8a:	0020      	movs	r0, r4
 800db8c:	47b0      	blx	r6
 800db8e:	1c43      	adds	r3, r0, #1
 800db90:	d103      	bne.n	800db9a <_wcrtomb_r+0x26>
 800db92:	2300      	movs	r3, #0
 800db94:	602b      	str	r3, [r5, #0]
 800db96:	338a      	adds	r3, #138	; 0x8a
 800db98:	6023      	str	r3, [r4, #0]
 800db9a:	b004      	add	sp, #16
 800db9c:	bd70      	pop	{r4, r5, r6, pc}
 800db9e:	46c0      	nop			; (mov r8, r8)
 800dba0:	20000558 	.word	0x20000558

0800dba4 <__swhatbuf_r>:
 800dba4:	b570      	push	{r4, r5, r6, lr}
 800dba6:	000e      	movs	r6, r1
 800dba8:	001d      	movs	r5, r3
 800dbaa:	230e      	movs	r3, #14
 800dbac:	5ec9      	ldrsh	r1, [r1, r3]
 800dbae:	0014      	movs	r4, r2
 800dbb0:	b096      	sub	sp, #88	; 0x58
 800dbb2:	2900      	cmp	r1, #0
 800dbb4:	da09      	bge.n	800dbca <__swhatbuf_r+0x26>
 800dbb6:	89b2      	ldrh	r2, [r6, #12]
 800dbb8:	2380      	movs	r3, #128	; 0x80
 800dbba:	0011      	movs	r1, r2
 800dbbc:	4019      	ands	r1, r3
 800dbbe:	421a      	tst	r2, r3
 800dbc0:	d018      	beq.n	800dbf4 <__swhatbuf_r+0x50>
 800dbc2:	2100      	movs	r1, #0
 800dbc4:	3b40      	subs	r3, #64	; 0x40
 800dbc6:	0008      	movs	r0, r1
 800dbc8:	e010      	b.n	800dbec <__swhatbuf_r+0x48>
 800dbca:	466a      	mov	r2, sp
 800dbcc:	f000 f8de 	bl	800dd8c <_fstat_r>
 800dbd0:	2800      	cmp	r0, #0
 800dbd2:	dbf0      	blt.n	800dbb6 <__swhatbuf_r+0x12>
 800dbd4:	23f0      	movs	r3, #240	; 0xf0
 800dbd6:	9901      	ldr	r1, [sp, #4]
 800dbd8:	021b      	lsls	r3, r3, #8
 800dbda:	4019      	ands	r1, r3
 800dbdc:	4b07      	ldr	r3, [pc, #28]	; (800dbfc <__swhatbuf_r+0x58>)
 800dbde:	2080      	movs	r0, #128	; 0x80
 800dbe0:	18c9      	adds	r1, r1, r3
 800dbe2:	424b      	negs	r3, r1
 800dbe4:	4159      	adcs	r1, r3
 800dbe6:	2380      	movs	r3, #128	; 0x80
 800dbe8:	0100      	lsls	r0, r0, #4
 800dbea:	00db      	lsls	r3, r3, #3
 800dbec:	6029      	str	r1, [r5, #0]
 800dbee:	6023      	str	r3, [r4, #0]
 800dbf0:	b016      	add	sp, #88	; 0x58
 800dbf2:	bd70      	pop	{r4, r5, r6, pc}
 800dbf4:	2380      	movs	r3, #128	; 0x80
 800dbf6:	00db      	lsls	r3, r3, #3
 800dbf8:	e7e5      	b.n	800dbc6 <__swhatbuf_r+0x22>
 800dbfa:	46c0      	nop			; (mov r8, r8)
 800dbfc:	ffffe000 	.word	0xffffe000

0800dc00 <__smakebuf_r>:
 800dc00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc02:	2602      	movs	r6, #2
 800dc04:	898b      	ldrh	r3, [r1, #12]
 800dc06:	0005      	movs	r5, r0
 800dc08:	000c      	movs	r4, r1
 800dc0a:	4233      	tst	r3, r6
 800dc0c:	d006      	beq.n	800dc1c <__smakebuf_r+0x1c>
 800dc0e:	0023      	movs	r3, r4
 800dc10:	3343      	adds	r3, #67	; 0x43
 800dc12:	6023      	str	r3, [r4, #0]
 800dc14:	6123      	str	r3, [r4, #16]
 800dc16:	2301      	movs	r3, #1
 800dc18:	6163      	str	r3, [r4, #20]
 800dc1a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800dc1c:	466a      	mov	r2, sp
 800dc1e:	ab01      	add	r3, sp, #4
 800dc20:	f7ff ffc0 	bl	800dba4 <__swhatbuf_r>
 800dc24:	9900      	ldr	r1, [sp, #0]
 800dc26:	0007      	movs	r7, r0
 800dc28:	0028      	movs	r0, r5
 800dc2a:	f7fb fd3f 	bl	80096ac <_malloc_r>
 800dc2e:	2800      	cmp	r0, #0
 800dc30:	d108      	bne.n	800dc44 <__smakebuf_r+0x44>
 800dc32:	220c      	movs	r2, #12
 800dc34:	5ea3      	ldrsh	r3, [r4, r2]
 800dc36:	059a      	lsls	r2, r3, #22
 800dc38:	d4ef      	bmi.n	800dc1a <__smakebuf_r+0x1a>
 800dc3a:	2203      	movs	r2, #3
 800dc3c:	4393      	bics	r3, r2
 800dc3e:	431e      	orrs	r6, r3
 800dc40:	81a6      	strh	r6, [r4, #12]
 800dc42:	e7e4      	b.n	800dc0e <__smakebuf_r+0xe>
 800dc44:	2380      	movs	r3, #128	; 0x80
 800dc46:	89a2      	ldrh	r2, [r4, #12]
 800dc48:	6020      	str	r0, [r4, #0]
 800dc4a:	4313      	orrs	r3, r2
 800dc4c:	81a3      	strh	r3, [r4, #12]
 800dc4e:	9b00      	ldr	r3, [sp, #0]
 800dc50:	6120      	str	r0, [r4, #16]
 800dc52:	6163      	str	r3, [r4, #20]
 800dc54:	9b01      	ldr	r3, [sp, #4]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d00c      	beq.n	800dc74 <__smakebuf_r+0x74>
 800dc5a:	0028      	movs	r0, r5
 800dc5c:	230e      	movs	r3, #14
 800dc5e:	5ee1      	ldrsh	r1, [r4, r3]
 800dc60:	f000 f8a6 	bl	800ddb0 <_isatty_r>
 800dc64:	2800      	cmp	r0, #0
 800dc66:	d005      	beq.n	800dc74 <__smakebuf_r+0x74>
 800dc68:	2303      	movs	r3, #3
 800dc6a:	89a2      	ldrh	r2, [r4, #12]
 800dc6c:	439a      	bics	r2, r3
 800dc6e:	3b02      	subs	r3, #2
 800dc70:	4313      	orrs	r3, r2
 800dc72:	81a3      	strh	r3, [r4, #12]
 800dc74:	89a3      	ldrh	r3, [r4, #12]
 800dc76:	433b      	orrs	r3, r7
 800dc78:	81a3      	strh	r3, [r4, #12]
 800dc7a:	e7ce      	b.n	800dc1a <__smakebuf_r+0x1a>

0800dc7c <__swbuf_r>:
 800dc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc7e:	0006      	movs	r6, r0
 800dc80:	000d      	movs	r5, r1
 800dc82:	0014      	movs	r4, r2
 800dc84:	2800      	cmp	r0, #0
 800dc86:	d004      	beq.n	800dc92 <__swbuf_r+0x16>
 800dc88:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d101      	bne.n	800dc92 <__swbuf_r+0x16>
 800dc8e:	f7fb fa73 	bl	8009178 <__sinit>
 800dc92:	69a3      	ldr	r3, [r4, #24]
 800dc94:	60a3      	str	r3, [r4, #8]
 800dc96:	89a3      	ldrh	r3, [r4, #12]
 800dc98:	071b      	lsls	r3, r3, #28
 800dc9a:	d52e      	bpl.n	800dcfa <__swbuf_r+0x7e>
 800dc9c:	6923      	ldr	r3, [r4, #16]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d02b      	beq.n	800dcfa <__swbuf_r+0x7e>
 800dca2:	230c      	movs	r3, #12
 800dca4:	5ee2      	ldrsh	r2, [r4, r3]
 800dca6:	2380      	movs	r3, #128	; 0x80
 800dca8:	019b      	lsls	r3, r3, #6
 800dcaa:	b2ef      	uxtb	r7, r5
 800dcac:	b2ed      	uxtb	r5, r5
 800dcae:	421a      	tst	r2, r3
 800dcb0:	d02c      	beq.n	800dd0c <__swbuf_r+0x90>
 800dcb2:	6923      	ldr	r3, [r4, #16]
 800dcb4:	6820      	ldr	r0, [r4, #0]
 800dcb6:	1ac0      	subs	r0, r0, r3
 800dcb8:	6963      	ldr	r3, [r4, #20]
 800dcba:	4283      	cmp	r3, r0
 800dcbc:	dc05      	bgt.n	800dcca <__swbuf_r+0x4e>
 800dcbe:	0021      	movs	r1, r4
 800dcc0:	0030      	movs	r0, r6
 800dcc2:	f7fd fa4f 	bl	800b164 <_fflush_r>
 800dcc6:	2800      	cmp	r0, #0
 800dcc8:	d11d      	bne.n	800dd06 <__swbuf_r+0x8a>
 800dcca:	68a3      	ldr	r3, [r4, #8]
 800dccc:	3001      	adds	r0, #1
 800dcce:	3b01      	subs	r3, #1
 800dcd0:	60a3      	str	r3, [r4, #8]
 800dcd2:	6823      	ldr	r3, [r4, #0]
 800dcd4:	1c5a      	adds	r2, r3, #1
 800dcd6:	6022      	str	r2, [r4, #0]
 800dcd8:	701f      	strb	r7, [r3, #0]
 800dcda:	6963      	ldr	r3, [r4, #20]
 800dcdc:	4283      	cmp	r3, r0
 800dcde:	d004      	beq.n	800dcea <__swbuf_r+0x6e>
 800dce0:	89a3      	ldrh	r3, [r4, #12]
 800dce2:	07db      	lsls	r3, r3, #31
 800dce4:	d507      	bpl.n	800dcf6 <__swbuf_r+0x7a>
 800dce6:	2d0a      	cmp	r5, #10
 800dce8:	d105      	bne.n	800dcf6 <__swbuf_r+0x7a>
 800dcea:	0021      	movs	r1, r4
 800dcec:	0030      	movs	r0, r6
 800dcee:	f7fd fa39 	bl	800b164 <_fflush_r>
 800dcf2:	2800      	cmp	r0, #0
 800dcf4:	d107      	bne.n	800dd06 <__swbuf_r+0x8a>
 800dcf6:	0028      	movs	r0, r5
 800dcf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcfa:	0021      	movs	r1, r4
 800dcfc:	0030      	movs	r0, r6
 800dcfe:	f7ff fe67 	bl	800d9d0 <__swsetup_r>
 800dd02:	2800      	cmp	r0, #0
 800dd04:	d0cd      	beq.n	800dca2 <__swbuf_r+0x26>
 800dd06:	2501      	movs	r5, #1
 800dd08:	426d      	negs	r5, r5
 800dd0a:	e7f4      	b.n	800dcf6 <__swbuf_r+0x7a>
 800dd0c:	4313      	orrs	r3, r2
 800dd0e:	81a3      	strh	r3, [r4, #12]
 800dd10:	4a02      	ldr	r2, [pc, #8]	; (800dd1c <__swbuf_r+0xa0>)
 800dd12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd14:	4013      	ands	r3, r2
 800dd16:	6663      	str	r3, [r4, #100]	; 0x64
 800dd18:	e7cb      	b.n	800dcb2 <__swbuf_r+0x36>
 800dd1a:	46c0      	nop			; (mov r8, r8)
 800dd1c:	ffffdfff 	.word	0xffffdfff

0800dd20 <_raise_r>:
 800dd20:	b570      	push	{r4, r5, r6, lr}
 800dd22:	0004      	movs	r4, r0
 800dd24:	000d      	movs	r5, r1
 800dd26:	291f      	cmp	r1, #31
 800dd28:	d904      	bls.n	800dd34 <_raise_r+0x14>
 800dd2a:	2316      	movs	r3, #22
 800dd2c:	6003      	str	r3, [r0, #0]
 800dd2e:	2001      	movs	r0, #1
 800dd30:	4240      	negs	r0, r0
 800dd32:	bd70      	pop	{r4, r5, r6, pc}
 800dd34:	0003      	movs	r3, r0
 800dd36:	33fc      	adds	r3, #252	; 0xfc
 800dd38:	69db      	ldr	r3, [r3, #28]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d004      	beq.n	800dd48 <_raise_r+0x28>
 800dd3e:	008a      	lsls	r2, r1, #2
 800dd40:	189b      	adds	r3, r3, r2
 800dd42:	681a      	ldr	r2, [r3, #0]
 800dd44:	2a00      	cmp	r2, #0
 800dd46:	d108      	bne.n	800dd5a <_raise_r+0x3a>
 800dd48:	0020      	movs	r0, r4
 800dd4a:	f000 f855 	bl	800ddf8 <_getpid_r>
 800dd4e:	002a      	movs	r2, r5
 800dd50:	0001      	movs	r1, r0
 800dd52:	0020      	movs	r0, r4
 800dd54:	f000 f83e 	bl	800ddd4 <_kill_r>
 800dd58:	e7eb      	b.n	800dd32 <_raise_r+0x12>
 800dd5a:	2000      	movs	r0, #0
 800dd5c:	2a01      	cmp	r2, #1
 800dd5e:	d0e8      	beq.n	800dd32 <_raise_r+0x12>
 800dd60:	1c51      	adds	r1, r2, #1
 800dd62:	d103      	bne.n	800dd6c <_raise_r+0x4c>
 800dd64:	2316      	movs	r3, #22
 800dd66:	3001      	adds	r0, #1
 800dd68:	6023      	str	r3, [r4, #0]
 800dd6a:	e7e2      	b.n	800dd32 <_raise_r+0x12>
 800dd6c:	2400      	movs	r4, #0
 800dd6e:	0028      	movs	r0, r5
 800dd70:	601c      	str	r4, [r3, #0]
 800dd72:	4790      	blx	r2
 800dd74:	0020      	movs	r0, r4
 800dd76:	e7dc      	b.n	800dd32 <_raise_r+0x12>

0800dd78 <raise>:
 800dd78:	b510      	push	{r4, lr}
 800dd7a:	4b03      	ldr	r3, [pc, #12]	; (800dd88 <raise+0x10>)
 800dd7c:	0001      	movs	r1, r0
 800dd7e:	6818      	ldr	r0, [r3, #0]
 800dd80:	f7ff ffce 	bl	800dd20 <_raise_r>
 800dd84:	bd10      	pop	{r4, pc}
 800dd86:	46c0      	nop			; (mov r8, r8)
 800dd88:	20000140 	.word	0x20000140

0800dd8c <_fstat_r>:
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	b570      	push	{r4, r5, r6, lr}
 800dd90:	4d06      	ldr	r5, [pc, #24]	; (800ddac <_fstat_r+0x20>)
 800dd92:	0004      	movs	r4, r0
 800dd94:	0008      	movs	r0, r1
 800dd96:	0011      	movs	r1, r2
 800dd98:	602b      	str	r3, [r5, #0]
 800dd9a:	f7fb f864 	bl	8008e66 <_fstat>
 800dd9e:	1c43      	adds	r3, r0, #1
 800dda0:	d103      	bne.n	800ddaa <_fstat_r+0x1e>
 800dda2:	682b      	ldr	r3, [r5, #0]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d000      	beq.n	800ddaa <_fstat_r+0x1e>
 800dda8:	6023      	str	r3, [r4, #0]
 800ddaa:	bd70      	pop	{r4, r5, r6, pc}
 800ddac:	20003164 	.word	0x20003164

0800ddb0 <_isatty_r>:
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	b570      	push	{r4, r5, r6, lr}
 800ddb4:	4d06      	ldr	r5, [pc, #24]	; (800ddd0 <_isatty_r+0x20>)
 800ddb6:	0004      	movs	r4, r0
 800ddb8:	0008      	movs	r0, r1
 800ddba:	602b      	str	r3, [r5, #0]
 800ddbc:	f7fb f858 	bl	8008e70 <_isatty>
 800ddc0:	1c43      	adds	r3, r0, #1
 800ddc2:	d103      	bne.n	800ddcc <_isatty_r+0x1c>
 800ddc4:	682b      	ldr	r3, [r5, #0]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d000      	beq.n	800ddcc <_isatty_r+0x1c>
 800ddca:	6023      	str	r3, [r4, #0]
 800ddcc:	bd70      	pop	{r4, r5, r6, pc}
 800ddce:	46c0      	nop			; (mov r8, r8)
 800ddd0:	20003164 	.word	0x20003164

0800ddd4 <_kill_r>:
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	b570      	push	{r4, r5, r6, lr}
 800ddd8:	4d06      	ldr	r5, [pc, #24]	; (800ddf4 <_kill_r+0x20>)
 800ddda:	0004      	movs	r4, r0
 800dddc:	0008      	movs	r0, r1
 800ddde:	0011      	movs	r1, r2
 800dde0:	602b      	str	r3, [r5, #0]
 800dde2:	f7fb f813 	bl	8008e0c <_kill>
 800dde6:	1c43      	adds	r3, r0, #1
 800dde8:	d103      	bne.n	800ddf2 <_kill_r+0x1e>
 800ddea:	682b      	ldr	r3, [r5, #0]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d000      	beq.n	800ddf2 <_kill_r+0x1e>
 800ddf0:	6023      	str	r3, [r4, #0]
 800ddf2:	bd70      	pop	{r4, r5, r6, pc}
 800ddf4:	20003164 	.word	0x20003164

0800ddf8 <_getpid_r>:
 800ddf8:	b510      	push	{r4, lr}
 800ddfa:	f7fb f805 	bl	8008e08 <_getpid>
 800ddfe:	bd10      	pop	{r4, pc}

0800de00 <_sbrk>:
 800de00:	4a05      	ldr	r2, [pc, #20]	; (800de18 <_sbrk+0x18>)
 800de02:	0003      	movs	r3, r0
 800de04:	6811      	ldr	r1, [r2, #0]
 800de06:	2900      	cmp	r1, #0
 800de08:	d101      	bne.n	800de0e <_sbrk+0xe>
 800de0a:	4904      	ldr	r1, [pc, #16]	; (800de1c <_sbrk+0x1c>)
 800de0c:	6011      	str	r1, [r2, #0]
 800de0e:	6810      	ldr	r0, [r2, #0]
 800de10:	18c3      	adds	r3, r0, r3
 800de12:	6013      	str	r3, [r2, #0]
 800de14:	4770      	bx	lr
 800de16:	46c0      	nop			; (mov r8, r8)
 800de18:	20003334 	.word	0x20003334
 800de1c:	20003338 	.word	0x20003338

0800de20 <_init>:
 800de20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de22:	46c0      	nop			; (mov r8, r8)
 800de24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de26:	bc08      	pop	{r3}
 800de28:	469e      	mov	lr, r3
 800de2a:	4770      	bx	lr

0800de2c <_fini>:
 800de2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de2e:	46c0      	nop			; (mov r8, r8)
 800de30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de32:	bc08      	pop	{r3}
 800de34:	469e      	mov	lr, r3
 800de36:	4770      	bx	lr
