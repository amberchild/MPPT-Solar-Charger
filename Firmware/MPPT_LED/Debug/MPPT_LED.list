
MPPT_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2a8  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  0800a368  0800a368  0001a368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a570  0800a570  00020434  2**0
                  CONTENTS
  4 .ARM          00000008  0800a570  0800a570  0001a570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a578  0800a578  00020434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a578  0800a578  0001a578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a580  0800a580  0001a580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000434  20000000  0800a584  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002430  20000438  0800a9b8  00020438  2**3
                  ALLOC
 10 ._user_heap_stack 00000800  20002868  0800a9b8  00022868  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001df13  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000047f5  00000000  00000000  0003e36f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016e8  00000000  00000000  00042b68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014c0  00000000  00000000  00044250  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018f6d  00000000  00000000  00045710  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001529c  00000000  00000000  0005e67d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008fd4b  00000000  00000000  00073919  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00103664  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005500  00000000  00000000  001036e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000438 	.word	0x20000438
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a350 	.word	0x0800a350

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000043c 	.word	0x2000043c
 8000104:	0800a350 	.word	0x0800a350

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 f9b5 	bl	80015a0 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f001 f90d 	bl	8001460 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 f9a7 	bl	80015a0 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 f99d 	bl	80015a0 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 f92f 	bl	80014d8 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 f925 	bl	80014d8 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_cfrcmple>:
 800029c:	4684      	mov	ip, r0
 800029e:	1c08      	adds	r0, r1, #0
 80002a0:	4661      	mov	r1, ip
 80002a2:	e7ff      	b.n	80002a4 <__aeabi_cfcmpeq>

080002a4 <__aeabi_cfcmpeq>:
 80002a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002a6:	f000 fb5b 	bl	8000960 <__lesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d401      	bmi.n	80002b2 <__aeabi_cfcmpeq+0xe>
 80002ae:	2100      	movs	r1, #0
 80002b0:	42c8      	cmn	r0, r1
 80002b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002b4 <__aeabi_fcmpeq>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	f000 fadd 	bl	8000874 <__eqsf2>
 80002ba:	4240      	negs	r0, r0
 80002bc:	3001      	adds	r0, #1
 80002be:	bd10      	pop	{r4, pc}

080002c0 <__aeabi_fcmplt>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f000 fb4d 	bl	8000960 <__lesf2>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	db01      	blt.n	80002ce <__aeabi_fcmplt+0xe>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_fcmple>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 fb43 	bl	8000960 <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	dd01      	ble.n	80002e2 <__aeabi_fcmple+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_fcmpgt>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 faeb 	bl	80008c4 <__gesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dc01      	bgt.n	80002f6 <__aeabi_fcmpgt+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmpge>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 fae1 	bl	80008c4 <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	da01      	bge.n	800030a <__aeabi_fcmpge+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__aeabi_uldivmod>:
 8000310:	2b00      	cmp	r3, #0
 8000312:	d111      	bne.n	8000338 <__aeabi_uldivmod+0x28>
 8000314:	2a00      	cmp	r2, #0
 8000316:	d10f      	bne.n	8000338 <__aeabi_uldivmod+0x28>
 8000318:	2900      	cmp	r1, #0
 800031a:	d100      	bne.n	800031e <__aeabi_uldivmod+0xe>
 800031c:	2800      	cmp	r0, #0
 800031e:	d002      	beq.n	8000326 <__aeabi_uldivmod+0x16>
 8000320:	2100      	movs	r1, #0
 8000322:	43c9      	mvns	r1, r1
 8000324:	1c08      	adds	r0, r1, #0
 8000326:	b407      	push	{r0, r1, r2}
 8000328:	4802      	ldr	r0, [pc, #8]	; (8000334 <__aeabi_uldivmod+0x24>)
 800032a:	a102      	add	r1, pc, #8	; (adr r1, 8000334 <__aeabi_uldivmod+0x24>)
 800032c:	1840      	adds	r0, r0, r1
 800032e:	9002      	str	r0, [sp, #8]
 8000330:	bd03      	pop	{r0, r1, pc}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	fffffee9 	.word	0xfffffee9
 8000338:	b403      	push	{r0, r1}
 800033a:	4668      	mov	r0, sp
 800033c:	b501      	push	{r0, lr}
 800033e:	9802      	ldr	r0, [sp, #8]
 8000340:	f000 f83c 	bl	80003bc <__udivmoddi4>
 8000344:	9b01      	ldr	r3, [sp, #4]
 8000346:	469e      	mov	lr, r3
 8000348:	b002      	add	sp, #8
 800034a:	bc0c      	pop	{r2, r3}
 800034c:	4770      	bx	lr
 800034e:	46c0      	nop			; (mov r8, r8)

08000350 <__aeabi_f2uiz>:
 8000350:	219e      	movs	r1, #158	; 0x9e
 8000352:	b510      	push	{r4, lr}
 8000354:	05c9      	lsls	r1, r1, #23
 8000356:	1c04      	adds	r4, r0, #0
 8000358:	f7ff ffd0 	bl	80002fc <__aeabi_fcmpge>
 800035c:	2800      	cmp	r0, #0
 800035e:	d103      	bne.n	8000368 <__aeabi_f2uiz+0x18>
 8000360:	1c20      	adds	r0, r4, #0
 8000362:	f000 fd11 	bl	8000d88 <__aeabi_f2iz>
 8000366:	bd10      	pop	{r4, pc}
 8000368:	219e      	movs	r1, #158	; 0x9e
 800036a:	1c20      	adds	r0, r4, #0
 800036c:	05c9      	lsls	r1, r1, #23
 800036e:	f000 fb47 	bl	8000a00 <__aeabi_fsub>
 8000372:	f000 fd09 	bl	8000d88 <__aeabi_f2iz>
 8000376:	2380      	movs	r3, #128	; 0x80
 8000378:	061b      	lsls	r3, r3, #24
 800037a:	469c      	mov	ip, r3
 800037c:	4460      	add	r0, ip
 800037e:	e7f2      	b.n	8000366 <__aeabi_f2uiz+0x16>

08000380 <__aeabi_d2uiz>:
 8000380:	b570      	push	{r4, r5, r6, lr}
 8000382:	2200      	movs	r2, #0
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <__aeabi_d2uiz+0x38>)
 8000386:	0004      	movs	r4, r0
 8000388:	000d      	movs	r5, r1
 800038a:	f7ff ff7d 	bl	8000288 <__aeabi_dcmpge>
 800038e:	2800      	cmp	r0, #0
 8000390:	d104      	bne.n	800039c <__aeabi_d2uiz+0x1c>
 8000392:	0020      	movs	r0, r4
 8000394:	0029      	movs	r1, r5
 8000396:	f001 ff25 	bl	80021e4 <__aeabi_d2iz>
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <__aeabi_d2uiz+0x38>)
 800039e:	2200      	movs	r2, #0
 80003a0:	0020      	movs	r0, r4
 80003a2:	0029      	movs	r1, r5
 80003a4:	f001 fbd6 	bl	8001b54 <__aeabi_dsub>
 80003a8:	f001 ff1c 	bl	80021e4 <__aeabi_d2iz>
 80003ac:	2380      	movs	r3, #128	; 0x80
 80003ae:	061b      	lsls	r3, r3, #24
 80003b0:	469c      	mov	ip, r3
 80003b2:	4460      	add	r0, ip
 80003b4:	e7f1      	b.n	800039a <__aeabi_d2uiz+0x1a>
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	41e00000 	.word	0x41e00000

080003bc <__udivmoddi4>:
 80003bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003be:	464f      	mov	r7, r9
 80003c0:	4646      	mov	r6, r8
 80003c2:	46d6      	mov	lr, sl
 80003c4:	b5c0      	push	{r6, r7, lr}
 80003c6:	0004      	movs	r4, r0
 80003c8:	b082      	sub	sp, #8
 80003ca:	000d      	movs	r5, r1
 80003cc:	4691      	mov	r9, r2
 80003ce:	4698      	mov	r8, r3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d82f      	bhi.n	8000434 <__udivmoddi4+0x78>
 80003d4:	d02c      	beq.n	8000430 <__udivmoddi4+0x74>
 80003d6:	4641      	mov	r1, r8
 80003d8:	4648      	mov	r0, r9
 80003da:	f002 f847 	bl	800246c <__clzdi2>
 80003de:	0029      	movs	r1, r5
 80003e0:	0006      	movs	r6, r0
 80003e2:	0020      	movs	r0, r4
 80003e4:	f002 f842 	bl	800246c <__clzdi2>
 80003e8:	1a33      	subs	r3, r6, r0
 80003ea:	469c      	mov	ip, r3
 80003ec:	3b20      	subs	r3, #32
 80003ee:	469a      	mov	sl, r3
 80003f0:	d500      	bpl.n	80003f4 <__udivmoddi4+0x38>
 80003f2:	e076      	b.n	80004e2 <__udivmoddi4+0x126>
 80003f4:	464b      	mov	r3, r9
 80003f6:	4652      	mov	r2, sl
 80003f8:	4093      	lsls	r3, r2
 80003fa:	001f      	movs	r7, r3
 80003fc:	464b      	mov	r3, r9
 80003fe:	4662      	mov	r2, ip
 8000400:	4093      	lsls	r3, r2
 8000402:	001e      	movs	r6, r3
 8000404:	42af      	cmp	r7, r5
 8000406:	d828      	bhi.n	800045a <__udivmoddi4+0x9e>
 8000408:	d025      	beq.n	8000456 <__udivmoddi4+0x9a>
 800040a:	4653      	mov	r3, sl
 800040c:	1ba4      	subs	r4, r4, r6
 800040e:	41bd      	sbcs	r5, r7
 8000410:	2b00      	cmp	r3, #0
 8000412:	da00      	bge.n	8000416 <__udivmoddi4+0x5a>
 8000414:	e07b      	b.n	800050e <__udivmoddi4+0x152>
 8000416:	2200      	movs	r2, #0
 8000418:	2300      	movs	r3, #0
 800041a:	9200      	str	r2, [sp, #0]
 800041c:	9301      	str	r3, [sp, #4]
 800041e:	2301      	movs	r3, #1
 8000420:	4652      	mov	r2, sl
 8000422:	4093      	lsls	r3, r2
 8000424:	9301      	str	r3, [sp, #4]
 8000426:	2301      	movs	r3, #1
 8000428:	4662      	mov	r2, ip
 800042a:	4093      	lsls	r3, r2
 800042c:	9300      	str	r3, [sp, #0]
 800042e:	e018      	b.n	8000462 <__udivmoddi4+0xa6>
 8000430:	4282      	cmp	r2, r0
 8000432:	d9d0      	bls.n	80003d6 <__udivmoddi4+0x1a>
 8000434:	2200      	movs	r2, #0
 8000436:	2300      	movs	r3, #0
 8000438:	9200      	str	r2, [sp, #0]
 800043a:	9301      	str	r3, [sp, #4]
 800043c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <__udivmoddi4+0x8a>
 8000442:	601c      	str	r4, [r3, #0]
 8000444:	605d      	str	r5, [r3, #4]
 8000446:	9800      	ldr	r0, [sp, #0]
 8000448:	9901      	ldr	r1, [sp, #4]
 800044a:	b002      	add	sp, #8
 800044c:	bc1c      	pop	{r2, r3, r4}
 800044e:	4690      	mov	r8, r2
 8000450:	4699      	mov	r9, r3
 8000452:	46a2      	mov	sl, r4
 8000454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000456:	42a3      	cmp	r3, r4
 8000458:	d9d7      	bls.n	800040a <__udivmoddi4+0x4e>
 800045a:	2200      	movs	r2, #0
 800045c:	2300      	movs	r3, #0
 800045e:	9200      	str	r2, [sp, #0]
 8000460:	9301      	str	r3, [sp, #4]
 8000462:	4663      	mov	r3, ip
 8000464:	2b00      	cmp	r3, #0
 8000466:	d0e9      	beq.n	800043c <__udivmoddi4+0x80>
 8000468:	07fb      	lsls	r3, r7, #31
 800046a:	4698      	mov	r8, r3
 800046c:	4641      	mov	r1, r8
 800046e:	0872      	lsrs	r2, r6, #1
 8000470:	430a      	orrs	r2, r1
 8000472:	087b      	lsrs	r3, r7, #1
 8000474:	4666      	mov	r6, ip
 8000476:	e00e      	b.n	8000496 <__udivmoddi4+0xda>
 8000478:	42ab      	cmp	r3, r5
 800047a:	d101      	bne.n	8000480 <__udivmoddi4+0xc4>
 800047c:	42a2      	cmp	r2, r4
 800047e:	d80c      	bhi.n	800049a <__udivmoddi4+0xde>
 8000480:	1aa4      	subs	r4, r4, r2
 8000482:	419d      	sbcs	r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	1924      	adds	r4, r4, r4
 8000488:	416d      	adcs	r5, r5
 800048a:	2100      	movs	r1, #0
 800048c:	3e01      	subs	r6, #1
 800048e:	1824      	adds	r4, r4, r0
 8000490:	414d      	adcs	r5, r1
 8000492:	2e00      	cmp	r6, #0
 8000494:	d006      	beq.n	80004a4 <__udivmoddi4+0xe8>
 8000496:	42ab      	cmp	r3, r5
 8000498:	d9ee      	bls.n	8000478 <__udivmoddi4+0xbc>
 800049a:	3e01      	subs	r6, #1
 800049c:	1924      	adds	r4, r4, r4
 800049e:	416d      	adcs	r5, r5
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d1f8      	bne.n	8000496 <__udivmoddi4+0xda>
 80004a4:	9800      	ldr	r0, [sp, #0]
 80004a6:	9901      	ldr	r1, [sp, #4]
 80004a8:	4653      	mov	r3, sl
 80004aa:	1900      	adds	r0, r0, r4
 80004ac:	4169      	adcs	r1, r5
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	db23      	blt.n	80004fa <__udivmoddi4+0x13e>
 80004b2:	002b      	movs	r3, r5
 80004b4:	4652      	mov	r2, sl
 80004b6:	40d3      	lsrs	r3, r2
 80004b8:	002a      	movs	r2, r5
 80004ba:	4664      	mov	r4, ip
 80004bc:	40e2      	lsrs	r2, r4
 80004be:	001c      	movs	r4, r3
 80004c0:	4653      	mov	r3, sl
 80004c2:	0015      	movs	r5, r2
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	db2d      	blt.n	8000524 <__udivmoddi4+0x168>
 80004c8:	0026      	movs	r6, r4
 80004ca:	4657      	mov	r7, sl
 80004cc:	40be      	lsls	r6, r7
 80004ce:	0033      	movs	r3, r6
 80004d0:	0026      	movs	r6, r4
 80004d2:	4667      	mov	r7, ip
 80004d4:	40be      	lsls	r6, r7
 80004d6:	0032      	movs	r2, r6
 80004d8:	1a80      	subs	r0, r0, r2
 80004da:	4199      	sbcs	r1, r3
 80004dc:	9000      	str	r0, [sp, #0]
 80004de:	9101      	str	r1, [sp, #4]
 80004e0:	e7ac      	b.n	800043c <__udivmoddi4+0x80>
 80004e2:	4662      	mov	r2, ip
 80004e4:	2320      	movs	r3, #32
 80004e6:	1a9b      	subs	r3, r3, r2
 80004e8:	464a      	mov	r2, r9
 80004ea:	40da      	lsrs	r2, r3
 80004ec:	4661      	mov	r1, ip
 80004ee:	0013      	movs	r3, r2
 80004f0:	4642      	mov	r2, r8
 80004f2:	408a      	lsls	r2, r1
 80004f4:	0017      	movs	r7, r2
 80004f6:	431f      	orrs	r7, r3
 80004f8:	e780      	b.n	80003fc <__udivmoddi4+0x40>
 80004fa:	4662      	mov	r2, ip
 80004fc:	2320      	movs	r3, #32
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	002a      	movs	r2, r5
 8000502:	4666      	mov	r6, ip
 8000504:	409a      	lsls	r2, r3
 8000506:	0023      	movs	r3, r4
 8000508:	40f3      	lsrs	r3, r6
 800050a:	4313      	orrs	r3, r2
 800050c:	e7d4      	b.n	80004b8 <__udivmoddi4+0xfc>
 800050e:	4662      	mov	r2, ip
 8000510:	2320      	movs	r3, #32
 8000512:	2100      	movs	r1, #0
 8000514:	1a9b      	subs	r3, r3, r2
 8000516:	2200      	movs	r2, #0
 8000518:	9100      	str	r1, [sp, #0]
 800051a:	9201      	str	r2, [sp, #4]
 800051c:	2201      	movs	r2, #1
 800051e:	40da      	lsrs	r2, r3
 8000520:	9201      	str	r2, [sp, #4]
 8000522:	e780      	b.n	8000426 <__udivmoddi4+0x6a>
 8000524:	2320      	movs	r3, #32
 8000526:	4662      	mov	r2, ip
 8000528:	0026      	movs	r6, r4
 800052a:	1a9b      	subs	r3, r3, r2
 800052c:	40de      	lsrs	r6, r3
 800052e:	002f      	movs	r7, r5
 8000530:	46b0      	mov	r8, r6
 8000532:	4666      	mov	r6, ip
 8000534:	40b7      	lsls	r7, r6
 8000536:	4646      	mov	r6, r8
 8000538:	003b      	movs	r3, r7
 800053a:	4333      	orrs	r3, r6
 800053c:	e7c8      	b.n	80004d0 <__udivmoddi4+0x114>
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_fadd>:
 8000540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000542:	4647      	mov	r7, r8
 8000544:	46ce      	mov	lr, r9
 8000546:	0243      	lsls	r3, r0, #9
 8000548:	0a5b      	lsrs	r3, r3, #9
 800054a:	0044      	lsls	r4, r0, #1
 800054c:	0fc2      	lsrs	r2, r0, #31
 800054e:	469c      	mov	ip, r3
 8000550:	0048      	lsls	r0, r1, #1
 8000552:	00dd      	lsls	r5, r3, #3
 8000554:	024b      	lsls	r3, r1, #9
 8000556:	0e24      	lsrs	r4, r4, #24
 8000558:	0a5b      	lsrs	r3, r3, #9
 800055a:	0e00      	lsrs	r0, r0, #24
 800055c:	b580      	push	{r7, lr}
 800055e:	4698      	mov	r8, r3
 8000560:	0026      	movs	r6, r4
 8000562:	4691      	mov	r9, r2
 8000564:	0fc9      	lsrs	r1, r1, #31
 8000566:	00db      	lsls	r3, r3, #3
 8000568:	1a27      	subs	r7, r4, r0
 800056a:	428a      	cmp	r2, r1
 800056c:	d029      	beq.n	80005c2 <__aeabi_fadd+0x82>
 800056e:	2f00      	cmp	r7, #0
 8000570:	dd15      	ble.n	800059e <__aeabi_fadd+0x5e>
 8000572:	2800      	cmp	r0, #0
 8000574:	d14a      	bne.n	800060c <__aeabi_fadd+0xcc>
 8000576:	2b00      	cmp	r3, #0
 8000578:	d000      	beq.n	800057c <__aeabi_fadd+0x3c>
 800057a:	e095      	b.n	80006a8 <__aeabi_fadd+0x168>
 800057c:	08ed      	lsrs	r5, r5, #3
 800057e:	2cff      	cmp	r4, #255	; 0xff
 8000580:	d100      	bne.n	8000584 <__aeabi_fadd+0x44>
 8000582:	e088      	b.n	8000696 <__aeabi_fadd+0x156>
 8000584:	026b      	lsls	r3, r5, #9
 8000586:	0a5b      	lsrs	r3, r3, #9
 8000588:	b2e6      	uxtb	r6, r4
 800058a:	025b      	lsls	r3, r3, #9
 800058c:	05f6      	lsls	r6, r6, #23
 800058e:	0a58      	lsrs	r0, r3, #9
 8000590:	4330      	orrs	r0, r6
 8000592:	07d2      	lsls	r2, r2, #31
 8000594:	4310      	orrs	r0, r2
 8000596:	bc0c      	pop	{r2, r3}
 8000598:	4690      	mov	r8, r2
 800059a:	4699      	mov	r9, r3
 800059c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800059e:	2f00      	cmp	r7, #0
 80005a0:	d000      	beq.n	80005a4 <__aeabi_fadd+0x64>
 80005a2:	e087      	b.n	80006b4 <__aeabi_fadd+0x174>
 80005a4:	1c60      	adds	r0, r4, #1
 80005a6:	b2c0      	uxtb	r0, r0
 80005a8:	2801      	cmp	r0, #1
 80005aa:	dc00      	bgt.n	80005ae <__aeabi_fadd+0x6e>
 80005ac:	e0b6      	b.n	800071c <__aeabi_fadd+0x1dc>
 80005ae:	1aee      	subs	r6, r5, r3
 80005b0:	0172      	lsls	r2, r6, #5
 80005b2:	d500      	bpl.n	80005b6 <__aeabi_fadd+0x76>
 80005b4:	e0c5      	b.n	8000742 <__aeabi_fadd+0x202>
 80005b6:	2e00      	cmp	r6, #0
 80005b8:	d13d      	bne.n	8000636 <__aeabi_fadd+0xf6>
 80005ba:	2200      	movs	r2, #0
 80005bc:	2600      	movs	r6, #0
 80005be:	2300      	movs	r3, #0
 80005c0:	e7e3      	b.n	800058a <__aeabi_fadd+0x4a>
 80005c2:	2f00      	cmp	r7, #0
 80005c4:	dc00      	bgt.n	80005c8 <__aeabi_fadd+0x88>
 80005c6:	e096      	b.n	80006f6 <__aeabi_fadd+0x1b6>
 80005c8:	2800      	cmp	r0, #0
 80005ca:	d05d      	beq.n	8000688 <__aeabi_fadd+0x148>
 80005cc:	2cff      	cmp	r4, #255	; 0xff
 80005ce:	d060      	beq.n	8000692 <__aeabi_fadd+0x152>
 80005d0:	2280      	movs	r2, #128	; 0x80
 80005d2:	04d2      	lsls	r2, r2, #19
 80005d4:	4313      	orrs	r3, r2
 80005d6:	2f1b      	cmp	r7, #27
 80005d8:	dd00      	ble.n	80005dc <__aeabi_fadd+0x9c>
 80005da:	e0ec      	b.n	80007b6 <__aeabi_fadd+0x276>
 80005dc:	2220      	movs	r2, #32
 80005de:	1bd2      	subs	r2, r2, r7
 80005e0:	0018      	movs	r0, r3
 80005e2:	4093      	lsls	r3, r2
 80005e4:	40f8      	lsrs	r0, r7
 80005e6:	1e5a      	subs	r2, r3, #1
 80005e8:	4193      	sbcs	r3, r2
 80005ea:	4303      	orrs	r3, r0
 80005ec:	18ed      	adds	r5, r5, r3
 80005ee:	016b      	lsls	r3, r5, #5
 80005f0:	d57b      	bpl.n	80006ea <__aeabi_fadd+0x1aa>
 80005f2:	3401      	adds	r4, #1
 80005f4:	2cff      	cmp	r4, #255	; 0xff
 80005f6:	d100      	bne.n	80005fa <__aeabi_fadd+0xba>
 80005f8:	e0b7      	b.n	800076a <__aeabi_fadd+0x22a>
 80005fa:	2201      	movs	r2, #1
 80005fc:	2607      	movs	r6, #7
 80005fe:	402a      	ands	r2, r5
 8000600:	086b      	lsrs	r3, r5, #1
 8000602:	4d9a      	ldr	r5, [pc, #616]	; (800086c <__aeabi_fadd+0x32c>)
 8000604:	401d      	ands	r5, r3
 8000606:	4315      	orrs	r5, r2
 8000608:	402e      	ands	r6, r5
 800060a:	e029      	b.n	8000660 <__aeabi_fadd+0x120>
 800060c:	2cff      	cmp	r4, #255	; 0xff
 800060e:	d0b5      	beq.n	800057c <__aeabi_fadd+0x3c>
 8000610:	2280      	movs	r2, #128	; 0x80
 8000612:	04d2      	lsls	r2, r2, #19
 8000614:	4313      	orrs	r3, r2
 8000616:	2f1b      	cmp	r7, #27
 8000618:	dd00      	ble.n	800061c <__aeabi_fadd+0xdc>
 800061a:	e0b2      	b.n	8000782 <__aeabi_fadd+0x242>
 800061c:	2220      	movs	r2, #32
 800061e:	1bd2      	subs	r2, r2, r7
 8000620:	0019      	movs	r1, r3
 8000622:	4093      	lsls	r3, r2
 8000624:	40f9      	lsrs	r1, r7
 8000626:	1e5a      	subs	r2, r3, #1
 8000628:	4193      	sbcs	r3, r2
 800062a:	430b      	orrs	r3, r1
 800062c:	1aed      	subs	r5, r5, r3
 800062e:	016b      	lsls	r3, r5, #5
 8000630:	d55b      	bpl.n	80006ea <__aeabi_fadd+0x1aa>
 8000632:	01ad      	lsls	r5, r5, #6
 8000634:	09ae      	lsrs	r6, r5, #6
 8000636:	0030      	movs	r0, r6
 8000638:	f001 fefa 	bl	8002430 <__clzsi2>
 800063c:	3805      	subs	r0, #5
 800063e:	4086      	lsls	r6, r0
 8000640:	4284      	cmp	r4, r0
 8000642:	dc65      	bgt.n	8000710 <__aeabi_fadd+0x1d0>
 8000644:	1b04      	subs	r4, r0, r4
 8000646:	0033      	movs	r3, r6
 8000648:	2020      	movs	r0, #32
 800064a:	3401      	adds	r4, #1
 800064c:	40e3      	lsrs	r3, r4
 800064e:	1b04      	subs	r4, r0, r4
 8000650:	40a6      	lsls	r6, r4
 8000652:	1e75      	subs	r5, r6, #1
 8000654:	41ae      	sbcs	r6, r5
 8000656:	4333      	orrs	r3, r6
 8000658:	2607      	movs	r6, #7
 800065a:	001d      	movs	r5, r3
 800065c:	2400      	movs	r4, #0
 800065e:	401e      	ands	r6, r3
 8000660:	2201      	movs	r2, #1
 8000662:	464b      	mov	r3, r9
 8000664:	401a      	ands	r2, r3
 8000666:	2e00      	cmp	r6, #0
 8000668:	d004      	beq.n	8000674 <__aeabi_fadd+0x134>
 800066a:	230f      	movs	r3, #15
 800066c:	402b      	ands	r3, r5
 800066e:	2b04      	cmp	r3, #4
 8000670:	d000      	beq.n	8000674 <__aeabi_fadd+0x134>
 8000672:	3504      	adds	r5, #4
 8000674:	016b      	lsls	r3, r5, #5
 8000676:	d400      	bmi.n	800067a <__aeabi_fadd+0x13a>
 8000678:	e780      	b.n	800057c <__aeabi_fadd+0x3c>
 800067a:	3401      	adds	r4, #1
 800067c:	b2e6      	uxtb	r6, r4
 800067e:	2cff      	cmp	r4, #255	; 0xff
 8000680:	d12f      	bne.n	80006e2 <__aeabi_fadd+0x1a2>
 8000682:	26ff      	movs	r6, #255	; 0xff
 8000684:	2300      	movs	r3, #0
 8000686:	e780      	b.n	800058a <__aeabi_fadd+0x4a>
 8000688:	2b00      	cmp	r3, #0
 800068a:	d152      	bne.n	8000732 <__aeabi_fadd+0x1f2>
 800068c:	2cff      	cmp	r4, #255	; 0xff
 800068e:	d000      	beq.n	8000692 <__aeabi_fadd+0x152>
 8000690:	e774      	b.n	800057c <__aeabi_fadd+0x3c>
 8000692:	000a      	movs	r2, r1
 8000694:	08ed      	lsrs	r5, r5, #3
 8000696:	2d00      	cmp	r5, #0
 8000698:	d0f3      	beq.n	8000682 <__aeabi_fadd+0x142>
 800069a:	2380      	movs	r3, #128	; 0x80
 800069c:	03db      	lsls	r3, r3, #15
 800069e:	432b      	orrs	r3, r5
 80006a0:	025b      	lsls	r3, r3, #9
 80006a2:	0a5b      	lsrs	r3, r3, #9
 80006a4:	26ff      	movs	r6, #255	; 0xff
 80006a6:	e770      	b.n	800058a <__aeabi_fadd+0x4a>
 80006a8:	3f01      	subs	r7, #1
 80006aa:	2f00      	cmp	r7, #0
 80006ac:	d0be      	beq.n	800062c <__aeabi_fadd+0xec>
 80006ae:	2cff      	cmp	r4, #255	; 0xff
 80006b0:	d1b1      	bne.n	8000616 <__aeabi_fadd+0xd6>
 80006b2:	e763      	b.n	800057c <__aeabi_fadd+0x3c>
 80006b4:	2c00      	cmp	r4, #0
 80006b6:	d047      	beq.n	8000748 <__aeabi_fadd+0x208>
 80006b8:	28ff      	cmp	r0, #255	; 0xff
 80006ba:	d069      	beq.n	8000790 <__aeabi_fadd+0x250>
 80006bc:	2480      	movs	r4, #128	; 0x80
 80006be:	04e4      	lsls	r4, r4, #19
 80006c0:	427a      	negs	r2, r7
 80006c2:	4325      	orrs	r5, r4
 80006c4:	2a1b      	cmp	r2, #27
 80006c6:	dd00      	ble.n	80006ca <__aeabi_fadd+0x18a>
 80006c8:	e0c5      	b.n	8000856 <__aeabi_fadd+0x316>
 80006ca:	002c      	movs	r4, r5
 80006cc:	2620      	movs	r6, #32
 80006ce:	40d4      	lsrs	r4, r2
 80006d0:	1ab2      	subs	r2, r6, r2
 80006d2:	4095      	lsls	r5, r2
 80006d4:	1e6a      	subs	r2, r5, #1
 80006d6:	4195      	sbcs	r5, r2
 80006d8:	4325      	orrs	r5, r4
 80006da:	1b5d      	subs	r5, r3, r5
 80006dc:	0004      	movs	r4, r0
 80006de:	4689      	mov	r9, r1
 80006e0:	e7a5      	b.n	800062e <__aeabi_fadd+0xee>
 80006e2:	01ab      	lsls	r3, r5, #6
 80006e4:	0a5b      	lsrs	r3, r3, #9
 80006e6:	e750      	b.n	800058a <__aeabi_fadd+0x4a>
 80006e8:	2400      	movs	r4, #0
 80006ea:	2201      	movs	r2, #1
 80006ec:	464b      	mov	r3, r9
 80006ee:	401a      	ands	r2, r3
 80006f0:	076b      	lsls	r3, r5, #29
 80006f2:	d1ba      	bne.n	800066a <__aeabi_fadd+0x12a>
 80006f4:	e742      	b.n	800057c <__aeabi_fadd+0x3c>
 80006f6:	2f00      	cmp	r7, #0
 80006f8:	d13b      	bne.n	8000772 <__aeabi_fadd+0x232>
 80006fa:	3401      	adds	r4, #1
 80006fc:	b2e0      	uxtb	r0, r4
 80006fe:	2801      	cmp	r0, #1
 8000700:	dd4a      	ble.n	8000798 <__aeabi_fadd+0x258>
 8000702:	2cff      	cmp	r4, #255	; 0xff
 8000704:	d0bd      	beq.n	8000682 <__aeabi_fadd+0x142>
 8000706:	2607      	movs	r6, #7
 8000708:	18ed      	adds	r5, r5, r3
 800070a:	086d      	lsrs	r5, r5, #1
 800070c:	402e      	ands	r6, r5
 800070e:	e7a7      	b.n	8000660 <__aeabi_fadd+0x120>
 8000710:	2307      	movs	r3, #7
 8000712:	4d57      	ldr	r5, [pc, #348]	; (8000870 <__aeabi_fadd+0x330>)
 8000714:	1a24      	subs	r4, r4, r0
 8000716:	4035      	ands	r5, r6
 8000718:	401e      	ands	r6, r3
 800071a:	e7a1      	b.n	8000660 <__aeabi_fadd+0x120>
 800071c:	2c00      	cmp	r4, #0
 800071e:	d11b      	bne.n	8000758 <__aeabi_fadd+0x218>
 8000720:	2d00      	cmp	r5, #0
 8000722:	d16e      	bne.n	8000802 <__aeabi_fadd+0x2c2>
 8000724:	2b00      	cmp	r3, #0
 8000726:	d100      	bne.n	800072a <__aeabi_fadd+0x1ea>
 8000728:	e09a      	b.n	8000860 <__aeabi_fadd+0x320>
 800072a:	000a      	movs	r2, r1
 800072c:	001d      	movs	r5, r3
 800072e:	003c      	movs	r4, r7
 8000730:	e724      	b.n	800057c <__aeabi_fadd+0x3c>
 8000732:	3f01      	subs	r7, #1
 8000734:	2f00      	cmp	r7, #0
 8000736:	d100      	bne.n	800073a <__aeabi_fadd+0x1fa>
 8000738:	e758      	b.n	80005ec <__aeabi_fadd+0xac>
 800073a:	2cff      	cmp	r4, #255	; 0xff
 800073c:	d000      	beq.n	8000740 <__aeabi_fadd+0x200>
 800073e:	e74a      	b.n	80005d6 <__aeabi_fadd+0x96>
 8000740:	e7a7      	b.n	8000692 <__aeabi_fadd+0x152>
 8000742:	1b5e      	subs	r6, r3, r5
 8000744:	4689      	mov	r9, r1
 8000746:	e776      	b.n	8000636 <__aeabi_fadd+0xf6>
 8000748:	2d00      	cmp	r5, #0
 800074a:	d11c      	bne.n	8000786 <__aeabi_fadd+0x246>
 800074c:	000a      	movs	r2, r1
 800074e:	28ff      	cmp	r0, #255	; 0xff
 8000750:	d01f      	beq.n	8000792 <__aeabi_fadd+0x252>
 8000752:	0004      	movs	r4, r0
 8000754:	001d      	movs	r5, r3
 8000756:	e711      	b.n	800057c <__aeabi_fadd+0x3c>
 8000758:	2d00      	cmp	r5, #0
 800075a:	d15d      	bne.n	8000818 <__aeabi_fadd+0x2d8>
 800075c:	2b00      	cmp	r3, #0
 800075e:	d117      	bne.n	8000790 <__aeabi_fadd+0x250>
 8000760:	2380      	movs	r3, #128	; 0x80
 8000762:	2200      	movs	r2, #0
 8000764:	03db      	lsls	r3, r3, #15
 8000766:	26ff      	movs	r6, #255	; 0xff
 8000768:	e70f      	b.n	800058a <__aeabi_fadd+0x4a>
 800076a:	000a      	movs	r2, r1
 800076c:	26ff      	movs	r6, #255	; 0xff
 800076e:	2300      	movs	r3, #0
 8000770:	e70b      	b.n	800058a <__aeabi_fadd+0x4a>
 8000772:	2c00      	cmp	r4, #0
 8000774:	d121      	bne.n	80007ba <__aeabi_fadd+0x27a>
 8000776:	2d00      	cmp	r5, #0
 8000778:	d166      	bne.n	8000848 <__aeabi_fadd+0x308>
 800077a:	28ff      	cmp	r0, #255	; 0xff
 800077c:	d1e9      	bne.n	8000752 <__aeabi_fadd+0x212>
 800077e:	001d      	movs	r5, r3
 8000780:	e787      	b.n	8000692 <__aeabi_fadd+0x152>
 8000782:	2301      	movs	r3, #1
 8000784:	e752      	b.n	800062c <__aeabi_fadd+0xec>
 8000786:	1c7a      	adds	r2, r7, #1
 8000788:	d0a7      	beq.n	80006da <__aeabi_fadd+0x19a>
 800078a:	43fa      	mvns	r2, r7
 800078c:	28ff      	cmp	r0, #255	; 0xff
 800078e:	d199      	bne.n	80006c4 <__aeabi_fadd+0x184>
 8000790:	000a      	movs	r2, r1
 8000792:	001d      	movs	r5, r3
 8000794:	24ff      	movs	r4, #255	; 0xff
 8000796:	e6f1      	b.n	800057c <__aeabi_fadd+0x3c>
 8000798:	2e00      	cmp	r6, #0
 800079a:	d121      	bne.n	80007e0 <__aeabi_fadd+0x2a0>
 800079c:	2d00      	cmp	r5, #0
 800079e:	d04f      	beq.n	8000840 <__aeabi_fadd+0x300>
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d04c      	beq.n	800083e <__aeabi_fadd+0x2fe>
 80007a4:	18ed      	adds	r5, r5, r3
 80007a6:	016b      	lsls	r3, r5, #5
 80007a8:	d59e      	bpl.n	80006e8 <__aeabi_fadd+0x1a8>
 80007aa:	4b31      	ldr	r3, [pc, #196]	; (8000870 <__aeabi_fadd+0x330>)
 80007ac:	3607      	adds	r6, #7
 80007ae:	402e      	ands	r6, r5
 80007b0:	2401      	movs	r4, #1
 80007b2:	401d      	ands	r5, r3
 80007b4:	e754      	b.n	8000660 <__aeabi_fadd+0x120>
 80007b6:	2301      	movs	r3, #1
 80007b8:	e718      	b.n	80005ec <__aeabi_fadd+0xac>
 80007ba:	28ff      	cmp	r0, #255	; 0xff
 80007bc:	d0df      	beq.n	800077e <__aeabi_fadd+0x23e>
 80007be:	2480      	movs	r4, #128	; 0x80
 80007c0:	04e4      	lsls	r4, r4, #19
 80007c2:	427f      	negs	r7, r7
 80007c4:	4325      	orrs	r5, r4
 80007c6:	2f1b      	cmp	r7, #27
 80007c8:	dc4d      	bgt.n	8000866 <__aeabi_fadd+0x326>
 80007ca:	2620      	movs	r6, #32
 80007cc:	1bf6      	subs	r6, r6, r7
 80007ce:	002c      	movs	r4, r5
 80007d0:	40b5      	lsls	r5, r6
 80007d2:	40fc      	lsrs	r4, r7
 80007d4:	1e6a      	subs	r2, r5, #1
 80007d6:	4195      	sbcs	r5, r2
 80007d8:	4325      	orrs	r5, r4
 80007da:	18ed      	adds	r5, r5, r3
 80007dc:	0004      	movs	r4, r0
 80007de:	e706      	b.n	80005ee <__aeabi_fadd+0xae>
 80007e0:	2d00      	cmp	r5, #0
 80007e2:	d0cc      	beq.n	800077e <__aeabi_fadd+0x23e>
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d100      	bne.n	80007ea <__aeabi_fadd+0x2aa>
 80007e8:	e753      	b.n	8000692 <__aeabi_fadd+0x152>
 80007ea:	2180      	movs	r1, #128	; 0x80
 80007ec:	4660      	mov	r0, ip
 80007ee:	03c9      	lsls	r1, r1, #15
 80007f0:	4208      	tst	r0, r1
 80007f2:	d003      	beq.n	80007fc <__aeabi_fadd+0x2bc>
 80007f4:	4640      	mov	r0, r8
 80007f6:	4208      	tst	r0, r1
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x2bc>
 80007fa:	001d      	movs	r5, r3
 80007fc:	2101      	movs	r1, #1
 80007fe:	4011      	ands	r1, r2
 8000800:	e747      	b.n	8000692 <__aeabi_fadd+0x152>
 8000802:	2b00      	cmp	r3, #0
 8000804:	d100      	bne.n	8000808 <__aeabi_fadd+0x2c8>
 8000806:	e6b9      	b.n	800057c <__aeabi_fadd+0x3c>
 8000808:	1aea      	subs	r2, r5, r3
 800080a:	0150      	lsls	r0, r2, #5
 800080c:	d525      	bpl.n	800085a <__aeabi_fadd+0x31a>
 800080e:	2607      	movs	r6, #7
 8000810:	1b5d      	subs	r5, r3, r5
 8000812:	402e      	ands	r6, r5
 8000814:	4689      	mov	r9, r1
 8000816:	e723      	b.n	8000660 <__aeabi_fadd+0x120>
 8000818:	24ff      	movs	r4, #255	; 0xff
 800081a:	2b00      	cmp	r3, #0
 800081c:	d100      	bne.n	8000820 <__aeabi_fadd+0x2e0>
 800081e:	e6ad      	b.n	800057c <__aeabi_fadd+0x3c>
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	4660      	mov	r0, ip
 8000824:	03d2      	lsls	r2, r2, #15
 8000826:	4210      	tst	r0, r2
 8000828:	d004      	beq.n	8000834 <__aeabi_fadd+0x2f4>
 800082a:	4640      	mov	r0, r8
 800082c:	4210      	tst	r0, r2
 800082e:	d101      	bne.n	8000834 <__aeabi_fadd+0x2f4>
 8000830:	001d      	movs	r5, r3
 8000832:	4689      	mov	r9, r1
 8000834:	2201      	movs	r2, #1
 8000836:	464b      	mov	r3, r9
 8000838:	24ff      	movs	r4, #255	; 0xff
 800083a:	401a      	ands	r2, r3
 800083c:	e69e      	b.n	800057c <__aeabi_fadd+0x3c>
 800083e:	002b      	movs	r3, r5
 8000840:	08dd      	lsrs	r5, r3, #3
 8000842:	000a      	movs	r2, r1
 8000844:	2400      	movs	r4, #0
 8000846:	e69d      	b.n	8000584 <__aeabi_fadd+0x44>
 8000848:	1c7a      	adds	r2, r7, #1
 800084a:	d0c6      	beq.n	80007da <__aeabi_fadd+0x29a>
 800084c:	43ff      	mvns	r7, r7
 800084e:	28ff      	cmp	r0, #255	; 0xff
 8000850:	d1b9      	bne.n	80007c6 <__aeabi_fadd+0x286>
 8000852:	001d      	movs	r5, r3
 8000854:	e71d      	b.n	8000692 <__aeabi_fadd+0x152>
 8000856:	2501      	movs	r5, #1
 8000858:	e73f      	b.n	80006da <__aeabi_fadd+0x19a>
 800085a:	1e15      	subs	r5, r2, #0
 800085c:	d000      	beq.n	8000860 <__aeabi_fadd+0x320>
 800085e:	e744      	b.n	80006ea <__aeabi_fadd+0x1aa>
 8000860:	2200      	movs	r2, #0
 8000862:	2300      	movs	r3, #0
 8000864:	e691      	b.n	800058a <__aeabi_fadd+0x4a>
 8000866:	2501      	movs	r5, #1
 8000868:	e7b7      	b.n	80007da <__aeabi_fadd+0x29a>
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	7dffffff 	.word	0x7dffffff
 8000870:	fbffffff 	.word	0xfbffffff

08000874 <__eqsf2>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	0042      	lsls	r2, r0, #1
 8000878:	024e      	lsls	r6, r1, #9
 800087a:	004c      	lsls	r4, r1, #1
 800087c:	0245      	lsls	r5, r0, #9
 800087e:	0a6d      	lsrs	r5, r5, #9
 8000880:	0e12      	lsrs	r2, r2, #24
 8000882:	0fc3      	lsrs	r3, r0, #31
 8000884:	0a76      	lsrs	r6, r6, #9
 8000886:	0e24      	lsrs	r4, r4, #24
 8000888:	0fc9      	lsrs	r1, r1, #31
 800088a:	2aff      	cmp	r2, #255	; 0xff
 800088c:	d00f      	beq.n	80008ae <__eqsf2+0x3a>
 800088e:	2cff      	cmp	r4, #255	; 0xff
 8000890:	d011      	beq.n	80008b6 <__eqsf2+0x42>
 8000892:	2001      	movs	r0, #1
 8000894:	42a2      	cmp	r2, r4
 8000896:	d000      	beq.n	800089a <__eqsf2+0x26>
 8000898:	bd70      	pop	{r4, r5, r6, pc}
 800089a:	42b5      	cmp	r5, r6
 800089c:	d1fc      	bne.n	8000898 <__eqsf2+0x24>
 800089e:	428b      	cmp	r3, r1
 80008a0:	d00d      	beq.n	80008be <__eqsf2+0x4a>
 80008a2:	2a00      	cmp	r2, #0
 80008a4:	d1f8      	bne.n	8000898 <__eqsf2+0x24>
 80008a6:	0028      	movs	r0, r5
 80008a8:	1e45      	subs	r5, r0, #1
 80008aa:	41a8      	sbcs	r0, r5
 80008ac:	e7f4      	b.n	8000898 <__eqsf2+0x24>
 80008ae:	2001      	movs	r0, #1
 80008b0:	2d00      	cmp	r5, #0
 80008b2:	d1f1      	bne.n	8000898 <__eqsf2+0x24>
 80008b4:	e7eb      	b.n	800088e <__eqsf2+0x1a>
 80008b6:	2001      	movs	r0, #1
 80008b8:	2e00      	cmp	r6, #0
 80008ba:	d1ed      	bne.n	8000898 <__eqsf2+0x24>
 80008bc:	e7e9      	b.n	8000892 <__eqsf2+0x1e>
 80008be:	2000      	movs	r0, #0
 80008c0:	e7ea      	b.n	8000898 <__eqsf2+0x24>
 80008c2:	46c0      	nop			; (mov r8, r8)

080008c4 <__gesf2>:
 80008c4:	b570      	push	{r4, r5, r6, lr}
 80008c6:	004a      	lsls	r2, r1, #1
 80008c8:	024e      	lsls	r6, r1, #9
 80008ca:	0245      	lsls	r5, r0, #9
 80008cc:	0044      	lsls	r4, r0, #1
 80008ce:	0a6d      	lsrs	r5, r5, #9
 80008d0:	0e24      	lsrs	r4, r4, #24
 80008d2:	0fc3      	lsrs	r3, r0, #31
 80008d4:	0a76      	lsrs	r6, r6, #9
 80008d6:	0e12      	lsrs	r2, r2, #24
 80008d8:	0fc9      	lsrs	r1, r1, #31
 80008da:	2cff      	cmp	r4, #255	; 0xff
 80008dc:	d015      	beq.n	800090a <__gesf2+0x46>
 80008de:	2aff      	cmp	r2, #255	; 0xff
 80008e0:	d00e      	beq.n	8000900 <__gesf2+0x3c>
 80008e2:	2c00      	cmp	r4, #0
 80008e4:	d115      	bne.n	8000912 <__gesf2+0x4e>
 80008e6:	2a00      	cmp	r2, #0
 80008e8:	d101      	bne.n	80008ee <__gesf2+0x2a>
 80008ea:	2e00      	cmp	r6, #0
 80008ec:	d01c      	beq.n	8000928 <__gesf2+0x64>
 80008ee:	2d00      	cmp	r5, #0
 80008f0:	d014      	beq.n	800091c <__gesf2+0x58>
 80008f2:	428b      	cmp	r3, r1
 80008f4:	d027      	beq.n	8000946 <__gesf2+0x82>
 80008f6:	2002      	movs	r0, #2
 80008f8:	3b01      	subs	r3, #1
 80008fa:	4018      	ands	r0, r3
 80008fc:	3801      	subs	r0, #1
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	2e00      	cmp	r6, #0
 8000902:	d0ee      	beq.n	80008e2 <__gesf2+0x1e>
 8000904:	2002      	movs	r0, #2
 8000906:	4240      	negs	r0, r0
 8000908:	e7f9      	b.n	80008fe <__gesf2+0x3a>
 800090a:	2d00      	cmp	r5, #0
 800090c:	d1fa      	bne.n	8000904 <__gesf2+0x40>
 800090e:	2aff      	cmp	r2, #255	; 0xff
 8000910:	d00e      	beq.n	8000930 <__gesf2+0x6c>
 8000912:	2a00      	cmp	r2, #0
 8000914:	d10e      	bne.n	8000934 <__gesf2+0x70>
 8000916:	2e00      	cmp	r6, #0
 8000918:	d0ed      	beq.n	80008f6 <__gesf2+0x32>
 800091a:	e00b      	b.n	8000934 <__gesf2+0x70>
 800091c:	2301      	movs	r3, #1
 800091e:	3901      	subs	r1, #1
 8000920:	4399      	bics	r1, r3
 8000922:	0008      	movs	r0, r1
 8000924:	3001      	adds	r0, #1
 8000926:	e7ea      	b.n	80008fe <__gesf2+0x3a>
 8000928:	2000      	movs	r0, #0
 800092a:	2d00      	cmp	r5, #0
 800092c:	d0e7      	beq.n	80008fe <__gesf2+0x3a>
 800092e:	e7e2      	b.n	80008f6 <__gesf2+0x32>
 8000930:	2e00      	cmp	r6, #0
 8000932:	d1e7      	bne.n	8000904 <__gesf2+0x40>
 8000934:	428b      	cmp	r3, r1
 8000936:	d1de      	bne.n	80008f6 <__gesf2+0x32>
 8000938:	4294      	cmp	r4, r2
 800093a:	dd05      	ble.n	8000948 <__gesf2+0x84>
 800093c:	2102      	movs	r1, #2
 800093e:	1e58      	subs	r0, r3, #1
 8000940:	4008      	ands	r0, r1
 8000942:	3801      	subs	r0, #1
 8000944:	e7db      	b.n	80008fe <__gesf2+0x3a>
 8000946:	2400      	movs	r4, #0
 8000948:	42a2      	cmp	r2, r4
 800094a:	dc04      	bgt.n	8000956 <__gesf2+0x92>
 800094c:	42b5      	cmp	r5, r6
 800094e:	d8d2      	bhi.n	80008f6 <__gesf2+0x32>
 8000950:	2000      	movs	r0, #0
 8000952:	42b5      	cmp	r5, r6
 8000954:	d2d3      	bcs.n	80008fe <__gesf2+0x3a>
 8000956:	1e58      	subs	r0, r3, #1
 8000958:	2301      	movs	r3, #1
 800095a:	4398      	bics	r0, r3
 800095c:	3001      	adds	r0, #1
 800095e:	e7ce      	b.n	80008fe <__gesf2+0x3a>

08000960 <__lesf2>:
 8000960:	b530      	push	{r4, r5, lr}
 8000962:	0042      	lsls	r2, r0, #1
 8000964:	0244      	lsls	r4, r0, #9
 8000966:	024d      	lsls	r5, r1, #9
 8000968:	0fc3      	lsrs	r3, r0, #31
 800096a:	0048      	lsls	r0, r1, #1
 800096c:	0a64      	lsrs	r4, r4, #9
 800096e:	0e12      	lsrs	r2, r2, #24
 8000970:	0a6d      	lsrs	r5, r5, #9
 8000972:	0e00      	lsrs	r0, r0, #24
 8000974:	0fc9      	lsrs	r1, r1, #31
 8000976:	2aff      	cmp	r2, #255	; 0xff
 8000978:	d012      	beq.n	80009a0 <__lesf2+0x40>
 800097a:	28ff      	cmp	r0, #255	; 0xff
 800097c:	d00c      	beq.n	8000998 <__lesf2+0x38>
 800097e:	2a00      	cmp	r2, #0
 8000980:	d112      	bne.n	80009a8 <__lesf2+0x48>
 8000982:	2800      	cmp	r0, #0
 8000984:	d119      	bne.n	80009ba <__lesf2+0x5a>
 8000986:	2d00      	cmp	r5, #0
 8000988:	d117      	bne.n	80009ba <__lesf2+0x5a>
 800098a:	2c00      	cmp	r4, #0
 800098c:	d02b      	beq.n	80009e6 <__lesf2+0x86>
 800098e:	2002      	movs	r0, #2
 8000990:	3b01      	subs	r3, #1
 8000992:	4018      	ands	r0, r3
 8000994:	3801      	subs	r0, #1
 8000996:	e026      	b.n	80009e6 <__lesf2+0x86>
 8000998:	2d00      	cmp	r5, #0
 800099a:	d0f0      	beq.n	800097e <__lesf2+0x1e>
 800099c:	2002      	movs	r0, #2
 800099e:	e022      	b.n	80009e6 <__lesf2+0x86>
 80009a0:	2c00      	cmp	r4, #0
 80009a2:	d1fb      	bne.n	800099c <__lesf2+0x3c>
 80009a4:	28ff      	cmp	r0, #255	; 0xff
 80009a6:	d01f      	beq.n	80009e8 <__lesf2+0x88>
 80009a8:	2800      	cmp	r0, #0
 80009aa:	d11f      	bne.n	80009ec <__lesf2+0x8c>
 80009ac:	2d00      	cmp	r5, #0
 80009ae:	d11d      	bne.n	80009ec <__lesf2+0x8c>
 80009b0:	2002      	movs	r0, #2
 80009b2:	3b01      	subs	r3, #1
 80009b4:	4018      	ands	r0, r3
 80009b6:	3801      	subs	r0, #1
 80009b8:	e015      	b.n	80009e6 <__lesf2+0x86>
 80009ba:	2c00      	cmp	r4, #0
 80009bc:	d00e      	beq.n	80009dc <__lesf2+0x7c>
 80009be:	428b      	cmp	r3, r1
 80009c0:	d1e5      	bne.n	800098e <__lesf2+0x2e>
 80009c2:	2200      	movs	r2, #0
 80009c4:	4290      	cmp	r0, r2
 80009c6:	dc04      	bgt.n	80009d2 <__lesf2+0x72>
 80009c8:	42ac      	cmp	r4, r5
 80009ca:	d8e0      	bhi.n	800098e <__lesf2+0x2e>
 80009cc:	2000      	movs	r0, #0
 80009ce:	42ac      	cmp	r4, r5
 80009d0:	d209      	bcs.n	80009e6 <__lesf2+0x86>
 80009d2:	1e58      	subs	r0, r3, #1
 80009d4:	2301      	movs	r3, #1
 80009d6:	4398      	bics	r0, r3
 80009d8:	3001      	adds	r0, #1
 80009da:	e004      	b.n	80009e6 <__lesf2+0x86>
 80009dc:	2301      	movs	r3, #1
 80009de:	3901      	subs	r1, #1
 80009e0:	4399      	bics	r1, r3
 80009e2:	0008      	movs	r0, r1
 80009e4:	3001      	adds	r0, #1
 80009e6:	bd30      	pop	{r4, r5, pc}
 80009e8:	2d00      	cmp	r5, #0
 80009ea:	d1d7      	bne.n	800099c <__lesf2+0x3c>
 80009ec:	428b      	cmp	r3, r1
 80009ee:	d1ce      	bne.n	800098e <__lesf2+0x2e>
 80009f0:	4282      	cmp	r2, r0
 80009f2:	dde7      	ble.n	80009c4 <__lesf2+0x64>
 80009f4:	2102      	movs	r1, #2
 80009f6:	1e58      	subs	r0, r3, #1
 80009f8:	4008      	ands	r0, r1
 80009fa:	3801      	subs	r0, #1
 80009fc:	e7f3      	b.n	80009e6 <__lesf2+0x86>
 80009fe:	46c0      	nop			; (mov r8, r8)

08000a00 <__aeabi_fsub>:
 8000a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a02:	4647      	mov	r7, r8
 8000a04:	46ce      	mov	lr, r9
 8000a06:	0044      	lsls	r4, r0, #1
 8000a08:	0fc2      	lsrs	r2, r0, #31
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	0247      	lsls	r7, r0, #9
 8000a0e:	0248      	lsls	r0, r1, #9
 8000a10:	0a40      	lsrs	r0, r0, #9
 8000a12:	4684      	mov	ip, r0
 8000a14:	4666      	mov	r6, ip
 8000a16:	0048      	lsls	r0, r1, #1
 8000a18:	0a7f      	lsrs	r7, r7, #9
 8000a1a:	0e24      	lsrs	r4, r4, #24
 8000a1c:	00f6      	lsls	r6, r6, #3
 8000a1e:	0025      	movs	r5, r4
 8000a20:	4690      	mov	r8, r2
 8000a22:	00fb      	lsls	r3, r7, #3
 8000a24:	0e00      	lsrs	r0, r0, #24
 8000a26:	0fc9      	lsrs	r1, r1, #31
 8000a28:	46b1      	mov	r9, r6
 8000a2a:	28ff      	cmp	r0, #255	; 0xff
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_fsub+0x30>
 8000a2e:	e085      	b.n	8000b3c <__aeabi_fsub+0x13c>
 8000a30:	2601      	movs	r6, #1
 8000a32:	4071      	eors	r1, r6
 8000a34:	1a26      	subs	r6, r4, r0
 8000a36:	4291      	cmp	r1, r2
 8000a38:	d057      	beq.n	8000aea <__aeabi_fsub+0xea>
 8000a3a:	2e00      	cmp	r6, #0
 8000a3c:	dd43      	ble.n	8000ac6 <__aeabi_fsub+0xc6>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	d000      	beq.n	8000a44 <__aeabi_fsub+0x44>
 8000a42:	e07f      	b.n	8000b44 <__aeabi_fsub+0x144>
 8000a44:	4649      	mov	r1, r9
 8000a46:	2900      	cmp	r1, #0
 8000a48:	d100      	bne.n	8000a4c <__aeabi_fsub+0x4c>
 8000a4a:	e0aa      	b.n	8000ba2 <__aeabi_fsub+0x1a2>
 8000a4c:	3e01      	subs	r6, #1
 8000a4e:	2e00      	cmp	r6, #0
 8000a50:	d000      	beq.n	8000a54 <__aeabi_fsub+0x54>
 8000a52:	e0f7      	b.n	8000c44 <__aeabi_fsub+0x244>
 8000a54:	1a5b      	subs	r3, r3, r1
 8000a56:	015a      	lsls	r2, r3, #5
 8000a58:	d400      	bmi.n	8000a5c <__aeabi_fsub+0x5c>
 8000a5a:	e08b      	b.n	8000b74 <__aeabi_fsub+0x174>
 8000a5c:	019b      	lsls	r3, r3, #6
 8000a5e:	099c      	lsrs	r4, r3, #6
 8000a60:	0020      	movs	r0, r4
 8000a62:	f001 fce5 	bl	8002430 <__clzsi2>
 8000a66:	3805      	subs	r0, #5
 8000a68:	4084      	lsls	r4, r0
 8000a6a:	4285      	cmp	r5, r0
 8000a6c:	dd00      	ble.n	8000a70 <__aeabi_fsub+0x70>
 8000a6e:	e0d3      	b.n	8000c18 <__aeabi_fsub+0x218>
 8000a70:	1b45      	subs	r5, r0, r5
 8000a72:	0023      	movs	r3, r4
 8000a74:	2020      	movs	r0, #32
 8000a76:	3501      	adds	r5, #1
 8000a78:	40eb      	lsrs	r3, r5
 8000a7a:	1b45      	subs	r5, r0, r5
 8000a7c:	40ac      	lsls	r4, r5
 8000a7e:	1e62      	subs	r2, r4, #1
 8000a80:	4194      	sbcs	r4, r2
 8000a82:	4323      	orrs	r3, r4
 8000a84:	2407      	movs	r4, #7
 8000a86:	2500      	movs	r5, #0
 8000a88:	401c      	ands	r4, r3
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	4641      	mov	r1, r8
 8000a8e:	400a      	ands	r2, r1
 8000a90:	2c00      	cmp	r4, #0
 8000a92:	d004      	beq.n	8000a9e <__aeabi_fsub+0x9e>
 8000a94:	210f      	movs	r1, #15
 8000a96:	4019      	ands	r1, r3
 8000a98:	2904      	cmp	r1, #4
 8000a9a:	d000      	beq.n	8000a9e <__aeabi_fsub+0x9e>
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	0159      	lsls	r1, r3, #5
 8000aa0:	d400      	bmi.n	8000aa4 <__aeabi_fsub+0xa4>
 8000aa2:	e080      	b.n	8000ba6 <__aeabi_fsub+0x1a6>
 8000aa4:	3501      	adds	r5, #1
 8000aa6:	b2ec      	uxtb	r4, r5
 8000aa8:	2dff      	cmp	r5, #255	; 0xff
 8000aaa:	d000      	beq.n	8000aae <__aeabi_fsub+0xae>
 8000aac:	e0a3      	b.n	8000bf6 <__aeabi_fsub+0x1f6>
 8000aae:	24ff      	movs	r4, #255	; 0xff
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	025b      	lsls	r3, r3, #9
 8000ab4:	05e4      	lsls	r4, r4, #23
 8000ab6:	0a58      	lsrs	r0, r3, #9
 8000ab8:	07d2      	lsls	r2, r2, #31
 8000aba:	4320      	orrs	r0, r4
 8000abc:	4310      	orrs	r0, r2
 8000abe:	bc0c      	pop	{r2, r3}
 8000ac0:	4690      	mov	r8, r2
 8000ac2:	4699      	mov	r9, r3
 8000ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ac6:	2e00      	cmp	r6, #0
 8000ac8:	d174      	bne.n	8000bb4 <__aeabi_fsub+0x1b4>
 8000aca:	1c60      	adds	r0, r4, #1
 8000acc:	b2c0      	uxtb	r0, r0
 8000ace:	2801      	cmp	r0, #1
 8000ad0:	dc00      	bgt.n	8000ad4 <__aeabi_fsub+0xd4>
 8000ad2:	e0a7      	b.n	8000c24 <__aeabi_fsub+0x224>
 8000ad4:	464a      	mov	r2, r9
 8000ad6:	1a9c      	subs	r4, r3, r2
 8000ad8:	0162      	lsls	r2, r4, #5
 8000ada:	d500      	bpl.n	8000ade <__aeabi_fsub+0xde>
 8000adc:	e0b6      	b.n	8000c4c <__aeabi_fsub+0x24c>
 8000ade:	2c00      	cmp	r4, #0
 8000ae0:	d1be      	bne.n	8000a60 <__aeabi_fsub+0x60>
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2400      	movs	r4, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e7e3      	b.n	8000ab2 <__aeabi_fsub+0xb2>
 8000aea:	2e00      	cmp	r6, #0
 8000aec:	dc00      	bgt.n	8000af0 <__aeabi_fsub+0xf0>
 8000aee:	e085      	b.n	8000bfc <__aeabi_fsub+0x1fc>
 8000af0:	2800      	cmp	r0, #0
 8000af2:	d046      	beq.n	8000b82 <__aeabi_fsub+0x182>
 8000af4:	2cff      	cmp	r4, #255	; 0xff
 8000af6:	d049      	beq.n	8000b8c <__aeabi_fsub+0x18c>
 8000af8:	2280      	movs	r2, #128	; 0x80
 8000afa:	4648      	mov	r0, r9
 8000afc:	04d2      	lsls	r2, r2, #19
 8000afe:	4310      	orrs	r0, r2
 8000b00:	4681      	mov	r9, r0
 8000b02:	2201      	movs	r2, #1
 8000b04:	2e1b      	cmp	r6, #27
 8000b06:	dc09      	bgt.n	8000b1c <__aeabi_fsub+0x11c>
 8000b08:	2020      	movs	r0, #32
 8000b0a:	464c      	mov	r4, r9
 8000b0c:	1b80      	subs	r0, r0, r6
 8000b0e:	4084      	lsls	r4, r0
 8000b10:	464a      	mov	r2, r9
 8000b12:	0020      	movs	r0, r4
 8000b14:	40f2      	lsrs	r2, r6
 8000b16:	1e44      	subs	r4, r0, #1
 8000b18:	41a0      	sbcs	r0, r4
 8000b1a:	4302      	orrs	r2, r0
 8000b1c:	189b      	adds	r3, r3, r2
 8000b1e:	015a      	lsls	r2, r3, #5
 8000b20:	d528      	bpl.n	8000b74 <__aeabi_fsub+0x174>
 8000b22:	3501      	adds	r5, #1
 8000b24:	2dff      	cmp	r5, #255	; 0xff
 8000b26:	d100      	bne.n	8000b2a <__aeabi_fsub+0x12a>
 8000b28:	e0a8      	b.n	8000c7c <__aeabi_fsub+0x27c>
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	2407      	movs	r4, #7
 8000b2e:	4994      	ldr	r1, [pc, #592]	; (8000d80 <__aeabi_fsub+0x380>)
 8000b30:	401a      	ands	r2, r3
 8000b32:	085b      	lsrs	r3, r3, #1
 8000b34:	400b      	ands	r3, r1
 8000b36:	4313      	orrs	r3, r2
 8000b38:	401c      	ands	r4, r3
 8000b3a:	e7a6      	b.n	8000a8a <__aeabi_fsub+0x8a>
 8000b3c:	2e00      	cmp	r6, #0
 8000b3e:	d000      	beq.n	8000b42 <__aeabi_fsub+0x142>
 8000b40:	e778      	b.n	8000a34 <__aeabi_fsub+0x34>
 8000b42:	e775      	b.n	8000a30 <__aeabi_fsub+0x30>
 8000b44:	2cff      	cmp	r4, #255	; 0xff
 8000b46:	d054      	beq.n	8000bf2 <__aeabi_fsub+0x1f2>
 8000b48:	2280      	movs	r2, #128	; 0x80
 8000b4a:	4649      	mov	r1, r9
 8000b4c:	04d2      	lsls	r2, r2, #19
 8000b4e:	4311      	orrs	r1, r2
 8000b50:	4689      	mov	r9, r1
 8000b52:	2201      	movs	r2, #1
 8000b54:	2e1b      	cmp	r6, #27
 8000b56:	dc09      	bgt.n	8000b6c <__aeabi_fsub+0x16c>
 8000b58:	2120      	movs	r1, #32
 8000b5a:	4648      	mov	r0, r9
 8000b5c:	1b89      	subs	r1, r1, r6
 8000b5e:	4088      	lsls	r0, r1
 8000b60:	464a      	mov	r2, r9
 8000b62:	0001      	movs	r1, r0
 8000b64:	40f2      	lsrs	r2, r6
 8000b66:	1e48      	subs	r0, r1, #1
 8000b68:	4181      	sbcs	r1, r0
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	1a9b      	subs	r3, r3, r2
 8000b6e:	015a      	lsls	r2, r3, #5
 8000b70:	d500      	bpl.n	8000b74 <__aeabi_fsub+0x174>
 8000b72:	e773      	b.n	8000a5c <__aeabi_fsub+0x5c>
 8000b74:	2201      	movs	r2, #1
 8000b76:	4641      	mov	r1, r8
 8000b78:	400a      	ands	r2, r1
 8000b7a:	0759      	lsls	r1, r3, #29
 8000b7c:	d000      	beq.n	8000b80 <__aeabi_fsub+0x180>
 8000b7e:	e789      	b.n	8000a94 <__aeabi_fsub+0x94>
 8000b80:	e011      	b.n	8000ba6 <__aeabi_fsub+0x1a6>
 8000b82:	4648      	mov	r0, r9
 8000b84:	2800      	cmp	r0, #0
 8000b86:	d158      	bne.n	8000c3a <__aeabi_fsub+0x23a>
 8000b88:	2cff      	cmp	r4, #255	; 0xff
 8000b8a:	d10c      	bne.n	8000ba6 <__aeabi_fsub+0x1a6>
 8000b8c:	08db      	lsrs	r3, r3, #3
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d100      	bne.n	8000b94 <__aeabi_fsub+0x194>
 8000b92:	e78c      	b.n	8000aae <__aeabi_fsub+0xae>
 8000b94:	2080      	movs	r0, #128	; 0x80
 8000b96:	03c0      	lsls	r0, r0, #15
 8000b98:	4303      	orrs	r3, r0
 8000b9a:	025b      	lsls	r3, r3, #9
 8000b9c:	0a5b      	lsrs	r3, r3, #9
 8000b9e:	24ff      	movs	r4, #255	; 0xff
 8000ba0:	e787      	b.n	8000ab2 <__aeabi_fsub+0xb2>
 8000ba2:	2cff      	cmp	r4, #255	; 0xff
 8000ba4:	d025      	beq.n	8000bf2 <__aeabi_fsub+0x1f2>
 8000ba6:	08db      	lsrs	r3, r3, #3
 8000ba8:	2dff      	cmp	r5, #255	; 0xff
 8000baa:	d0f0      	beq.n	8000b8e <__aeabi_fsub+0x18e>
 8000bac:	025b      	lsls	r3, r3, #9
 8000bae:	0a5b      	lsrs	r3, r3, #9
 8000bb0:	b2ec      	uxtb	r4, r5
 8000bb2:	e77e      	b.n	8000ab2 <__aeabi_fsub+0xb2>
 8000bb4:	2c00      	cmp	r4, #0
 8000bb6:	d04d      	beq.n	8000c54 <__aeabi_fsub+0x254>
 8000bb8:	28ff      	cmp	r0, #255	; 0xff
 8000bba:	d018      	beq.n	8000bee <__aeabi_fsub+0x1ee>
 8000bbc:	2480      	movs	r4, #128	; 0x80
 8000bbe:	04e4      	lsls	r4, r4, #19
 8000bc0:	4272      	negs	r2, r6
 8000bc2:	4323      	orrs	r3, r4
 8000bc4:	2a1b      	cmp	r2, #27
 8000bc6:	dd00      	ble.n	8000bca <__aeabi_fsub+0x1ca>
 8000bc8:	e0c4      	b.n	8000d54 <__aeabi_fsub+0x354>
 8000bca:	001c      	movs	r4, r3
 8000bcc:	2520      	movs	r5, #32
 8000bce:	40d4      	lsrs	r4, r2
 8000bd0:	1aaa      	subs	r2, r5, r2
 8000bd2:	4093      	lsls	r3, r2
 8000bd4:	1e5a      	subs	r2, r3, #1
 8000bd6:	4193      	sbcs	r3, r2
 8000bd8:	4323      	orrs	r3, r4
 8000bda:	464a      	mov	r2, r9
 8000bdc:	0005      	movs	r5, r0
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	4688      	mov	r8, r1
 8000be2:	e738      	b.n	8000a56 <__aeabi_fsub+0x56>
 8000be4:	1c72      	adds	r2, r6, #1
 8000be6:	d0f8      	beq.n	8000bda <__aeabi_fsub+0x1da>
 8000be8:	43f2      	mvns	r2, r6
 8000bea:	28ff      	cmp	r0, #255	; 0xff
 8000bec:	d1ea      	bne.n	8000bc4 <__aeabi_fsub+0x1c4>
 8000bee:	000a      	movs	r2, r1
 8000bf0:	464b      	mov	r3, r9
 8000bf2:	25ff      	movs	r5, #255	; 0xff
 8000bf4:	e7d7      	b.n	8000ba6 <__aeabi_fsub+0x1a6>
 8000bf6:	019b      	lsls	r3, r3, #6
 8000bf8:	0a5b      	lsrs	r3, r3, #9
 8000bfa:	e75a      	b.n	8000ab2 <__aeabi_fsub+0xb2>
 8000bfc:	2e00      	cmp	r6, #0
 8000bfe:	d141      	bne.n	8000c84 <__aeabi_fsub+0x284>
 8000c00:	1c65      	adds	r5, r4, #1
 8000c02:	b2e9      	uxtb	r1, r5
 8000c04:	2901      	cmp	r1, #1
 8000c06:	dd45      	ble.n	8000c94 <__aeabi_fsub+0x294>
 8000c08:	2dff      	cmp	r5, #255	; 0xff
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_fsub+0x20e>
 8000c0c:	e74f      	b.n	8000aae <__aeabi_fsub+0xae>
 8000c0e:	2407      	movs	r4, #7
 8000c10:	444b      	add	r3, r9
 8000c12:	085b      	lsrs	r3, r3, #1
 8000c14:	401c      	ands	r4, r3
 8000c16:	e738      	b.n	8000a8a <__aeabi_fsub+0x8a>
 8000c18:	2207      	movs	r2, #7
 8000c1a:	4b5a      	ldr	r3, [pc, #360]	; (8000d84 <__aeabi_fsub+0x384>)
 8000c1c:	1a2d      	subs	r5, r5, r0
 8000c1e:	4023      	ands	r3, r4
 8000c20:	4014      	ands	r4, r2
 8000c22:	e732      	b.n	8000a8a <__aeabi_fsub+0x8a>
 8000c24:	2c00      	cmp	r4, #0
 8000c26:	d11d      	bne.n	8000c64 <__aeabi_fsub+0x264>
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d17a      	bne.n	8000d22 <__aeabi_fsub+0x322>
 8000c2c:	464b      	mov	r3, r9
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d100      	bne.n	8000c34 <__aeabi_fsub+0x234>
 8000c32:	e091      	b.n	8000d58 <__aeabi_fsub+0x358>
 8000c34:	000a      	movs	r2, r1
 8000c36:	2500      	movs	r5, #0
 8000c38:	e7b5      	b.n	8000ba6 <__aeabi_fsub+0x1a6>
 8000c3a:	3e01      	subs	r6, #1
 8000c3c:	2e00      	cmp	r6, #0
 8000c3e:	d119      	bne.n	8000c74 <__aeabi_fsub+0x274>
 8000c40:	444b      	add	r3, r9
 8000c42:	e76c      	b.n	8000b1e <__aeabi_fsub+0x11e>
 8000c44:	2cff      	cmp	r4, #255	; 0xff
 8000c46:	d184      	bne.n	8000b52 <__aeabi_fsub+0x152>
 8000c48:	25ff      	movs	r5, #255	; 0xff
 8000c4a:	e7ac      	b.n	8000ba6 <__aeabi_fsub+0x1a6>
 8000c4c:	464a      	mov	r2, r9
 8000c4e:	4688      	mov	r8, r1
 8000c50:	1ad4      	subs	r4, r2, r3
 8000c52:	e705      	b.n	8000a60 <__aeabi_fsub+0x60>
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1c5      	bne.n	8000be4 <__aeabi_fsub+0x1e4>
 8000c58:	000a      	movs	r2, r1
 8000c5a:	28ff      	cmp	r0, #255	; 0xff
 8000c5c:	d0c8      	beq.n	8000bf0 <__aeabi_fsub+0x1f0>
 8000c5e:	0005      	movs	r5, r0
 8000c60:	464b      	mov	r3, r9
 8000c62:	e7a0      	b.n	8000ba6 <__aeabi_fsub+0x1a6>
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d149      	bne.n	8000cfc <__aeabi_fsub+0x2fc>
 8000c68:	464b      	mov	r3, r9
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d077      	beq.n	8000d5e <__aeabi_fsub+0x35e>
 8000c6e:	000a      	movs	r2, r1
 8000c70:	25ff      	movs	r5, #255	; 0xff
 8000c72:	e798      	b.n	8000ba6 <__aeabi_fsub+0x1a6>
 8000c74:	2cff      	cmp	r4, #255	; 0xff
 8000c76:	d000      	beq.n	8000c7a <__aeabi_fsub+0x27a>
 8000c78:	e743      	b.n	8000b02 <__aeabi_fsub+0x102>
 8000c7a:	e787      	b.n	8000b8c <__aeabi_fsub+0x18c>
 8000c7c:	000a      	movs	r2, r1
 8000c7e:	24ff      	movs	r4, #255	; 0xff
 8000c80:	2300      	movs	r3, #0
 8000c82:	e716      	b.n	8000ab2 <__aeabi_fsub+0xb2>
 8000c84:	2c00      	cmp	r4, #0
 8000c86:	d115      	bne.n	8000cb4 <__aeabi_fsub+0x2b4>
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d157      	bne.n	8000d3c <__aeabi_fsub+0x33c>
 8000c8c:	28ff      	cmp	r0, #255	; 0xff
 8000c8e:	d1e6      	bne.n	8000c5e <__aeabi_fsub+0x25e>
 8000c90:	464b      	mov	r3, r9
 8000c92:	e77b      	b.n	8000b8c <__aeabi_fsub+0x18c>
 8000c94:	2c00      	cmp	r4, #0
 8000c96:	d120      	bne.n	8000cda <__aeabi_fsub+0x2da>
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d057      	beq.n	8000d4c <__aeabi_fsub+0x34c>
 8000c9c:	4649      	mov	r1, r9
 8000c9e:	2900      	cmp	r1, #0
 8000ca0:	d053      	beq.n	8000d4a <__aeabi_fsub+0x34a>
 8000ca2:	444b      	add	r3, r9
 8000ca4:	015a      	lsls	r2, r3, #5
 8000ca6:	d568      	bpl.n	8000d7a <__aeabi_fsub+0x37a>
 8000ca8:	2407      	movs	r4, #7
 8000caa:	4a36      	ldr	r2, [pc, #216]	; (8000d84 <__aeabi_fsub+0x384>)
 8000cac:	401c      	ands	r4, r3
 8000cae:	2501      	movs	r5, #1
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	e6ea      	b.n	8000a8a <__aeabi_fsub+0x8a>
 8000cb4:	28ff      	cmp	r0, #255	; 0xff
 8000cb6:	d0eb      	beq.n	8000c90 <__aeabi_fsub+0x290>
 8000cb8:	2280      	movs	r2, #128	; 0x80
 8000cba:	04d2      	lsls	r2, r2, #19
 8000cbc:	4276      	negs	r6, r6
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	2e1b      	cmp	r6, #27
 8000cc2:	dc53      	bgt.n	8000d6c <__aeabi_fsub+0x36c>
 8000cc4:	2520      	movs	r5, #32
 8000cc6:	1bad      	subs	r5, r5, r6
 8000cc8:	001a      	movs	r2, r3
 8000cca:	40ab      	lsls	r3, r5
 8000ccc:	40f2      	lsrs	r2, r6
 8000cce:	1e5c      	subs	r4, r3, #1
 8000cd0:	41a3      	sbcs	r3, r4
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	444b      	add	r3, r9
 8000cd6:	0005      	movs	r5, r0
 8000cd8:	e721      	b.n	8000b1e <__aeabi_fsub+0x11e>
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d0d8      	beq.n	8000c90 <__aeabi_fsub+0x290>
 8000cde:	4649      	mov	r1, r9
 8000ce0:	2900      	cmp	r1, #0
 8000ce2:	d100      	bne.n	8000ce6 <__aeabi_fsub+0x2e6>
 8000ce4:	e752      	b.n	8000b8c <__aeabi_fsub+0x18c>
 8000ce6:	2180      	movs	r1, #128	; 0x80
 8000ce8:	03c9      	lsls	r1, r1, #15
 8000cea:	420f      	tst	r7, r1
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_fsub+0x2f0>
 8000cee:	e74d      	b.n	8000b8c <__aeabi_fsub+0x18c>
 8000cf0:	4660      	mov	r0, ip
 8000cf2:	4208      	tst	r0, r1
 8000cf4:	d000      	beq.n	8000cf8 <__aeabi_fsub+0x2f8>
 8000cf6:	e749      	b.n	8000b8c <__aeabi_fsub+0x18c>
 8000cf8:	464b      	mov	r3, r9
 8000cfa:	e747      	b.n	8000b8c <__aeabi_fsub+0x18c>
 8000cfc:	4648      	mov	r0, r9
 8000cfe:	25ff      	movs	r5, #255	; 0xff
 8000d00:	2800      	cmp	r0, #0
 8000d02:	d100      	bne.n	8000d06 <__aeabi_fsub+0x306>
 8000d04:	e74f      	b.n	8000ba6 <__aeabi_fsub+0x1a6>
 8000d06:	2280      	movs	r2, #128	; 0x80
 8000d08:	03d2      	lsls	r2, r2, #15
 8000d0a:	4217      	tst	r7, r2
 8000d0c:	d004      	beq.n	8000d18 <__aeabi_fsub+0x318>
 8000d0e:	4660      	mov	r0, ip
 8000d10:	4210      	tst	r0, r2
 8000d12:	d101      	bne.n	8000d18 <__aeabi_fsub+0x318>
 8000d14:	464b      	mov	r3, r9
 8000d16:	4688      	mov	r8, r1
 8000d18:	2201      	movs	r2, #1
 8000d1a:	4641      	mov	r1, r8
 8000d1c:	25ff      	movs	r5, #255	; 0xff
 8000d1e:	400a      	ands	r2, r1
 8000d20:	e741      	b.n	8000ba6 <__aeabi_fsub+0x1a6>
 8000d22:	4648      	mov	r0, r9
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d01f      	beq.n	8000d68 <__aeabi_fsub+0x368>
 8000d28:	1a1a      	subs	r2, r3, r0
 8000d2a:	0150      	lsls	r0, r2, #5
 8000d2c:	d520      	bpl.n	8000d70 <__aeabi_fsub+0x370>
 8000d2e:	464a      	mov	r2, r9
 8000d30:	2407      	movs	r4, #7
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	401c      	ands	r4, r3
 8000d36:	4688      	mov	r8, r1
 8000d38:	2500      	movs	r5, #0
 8000d3a:	e6a6      	b.n	8000a8a <__aeabi_fsub+0x8a>
 8000d3c:	1c74      	adds	r4, r6, #1
 8000d3e:	d0c9      	beq.n	8000cd4 <__aeabi_fsub+0x2d4>
 8000d40:	43f6      	mvns	r6, r6
 8000d42:	28ff      	cmp	r0, #255	; 0xff
 8000d44:	d1bc      	bne.n	8000cc0 <__aeabi_fsub+0x2c0>
 8000d46:	464b      	mov	r3, r9
 8000d48:	e720      	b.n	8000b8c <__aeabi_fsub+0x18c>
 8000d4a:	4699      	mov	r9, r3
 8000d4c:	464b      	mov	r3, r9
 8000d4e:	2500      	movs	r5, #0
 8000d50:	08db      	lsrs	r3, r3, #3
 8000d52:	e72b      	b.n	8000bac <__aeabi_fsub+0x1ac>
 8000d54:	2301      	movs	r3, #1
 8000d56:	e740      	b.n	8000bda <__aeabi_fsub+0x1da>
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e6a9      	b.n	8000ab2 <__aeabi_fsub+0xb2>
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	2200      	movs	r2, #0
 8000d62:	03db      	lsls	r3, r3, #15
 8000d64:	24ff      	movs	r4, #255	; 0xff
 8000d66:	e6a4      	b.n	8000ab2 <__aeabi_fsub+0xb2>
 8000d68:	2500      	movs	r5, #0
 8000d6a:	e71c      	b.n	8000ba6 <__aeabi_fsub+0x1a6>
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e7b1      	b.n	8000cd4 <__aeabi_fsub+0x2d4>
 8000d70:	2a00      	cmp	r2, #0
 8000d72:	d0f1      	beq.n	8000d58 <__aeabi_fsub+0x358>
 8000d74:	0013      	movs	r3, r2
 8000d76:	2500      	movs	r5, #0
 8000d78:	e6fc      	b.n	8000b74 <__aeabi_fsub+0x174>
 8000d7a:	2500      	movs	r5, #0
 8000d7c:	e6fa      	b.n	8000b74 <__aeabi_fsub+0x174>
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	7dffffff 	.word	0x7dffffff
 8000d84:	fbffffff 	.word	0xfbffffff

08000d88 <__aeabi_f2iz>:
 8000d88:	0241      	lsls	r1, r0, #9
 8000d8a:	0042      	lsls	r2, r0, #1
 8000d8c:	0fc3      	lsrs	r3, r0, #31
 8000d8e:	0a49      	lsrs	r1, r1, #9
 8000d90:	0e12      	lsrs	r2, r2, #24
 8000d92:	2000      	movs	r0, #0
 8000d94:	2a7e      	cmp	r2, #126	; 0x7e
 8000d96:	d90d      	bls.n	8000db4 <__aeabi_f2iz+0x2c>
 8000d98:	2a9d      	cmp	r2, #157	; 0x9d
 8000d9a:	d80c      	bhi.n	8000db6 <__aeabi_f2iz+0x2e>
 8000d9c:	2080      	movs	r0, #128	; 0x80
 8000d9e:	0400      	lsls	r0, r0, #16
 8000da0:	4301      	orrs	r1, r0
 8000da2:	2a95      	cmp	r2, #149	; 0x95
 8000da4:	dc0a      	bgt.n	8000dbc <__aeabi_f2iz+0x34>
 8000da6:	2096      	movs	r0, #150	; 0x96
 8000da8:	1a82      	subs	r2, r0, r2
 8000daa:	40d1      	lsrs	r1, r2
 8000dac:	4248      	negs	r0, r1
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d100      	bne.n	8000db4 <__aeabi_f2iz+0x2c>
 8000db2:	0008      	movs	r0, r1
 8000db4:	4770      	bx	lr
 8000db6:	4a03      	ldr	r2, [pc, #12]	; (8000dc4 <__aeabi_f2iz+0x3c>)
 8000db8:	1898      	adds	r0, r3, r2
 8000dba:	e7fb      	b.n	8000db4 <__aeabi_f2iz+0x2c>
 8000dbc:	3a96      	subs	r2, #150	; 0x96
 8000dbe:	4091      	lsls	r1, r2
 8000dc0:	e7f4      	b.n	8000dac <__aeabi_f2iz+0x24>
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	7fffffff 	.word	0x7fffffff

08000dc8 <__aeabi_i2f>:
 8000dc8:	b570      	push	{r4, r5, r6, lr}
 8000dca:	2800      	cmp	r0, #0
 8000dcc:	d03d      	beq.n	8000e4a <__aeabi_i2f+0x82>
 8000dce:	17c3      	asrs	r3, r0, #31
 8000dd0:	18c5      	adds	r5, r0, r3
 8000dd2:	405d      	eors	r5, r3
 8000dd4:	0fc4      	lsrs	r4, r0, #31
 8000dd6:	0028      	movs	r0, r5
 8000dd8:	f001 fb2a 	bl	8002430 <__clzsi2>
 8000ddc:	229e      	movs	r2, #158	; 0x9e
 8000dde:	1a12      	subs	r2, r2, r0
 8000de0:	2a96      	cmp	r2, #150	; 0x96
 8000de2:	dc07      	bgt.n	8000df4 <__aeabi_i2f+0x2c>
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	2808      	cmp	r0, #8
 8000de8:	dd33      	ble.n	8000e52 <__aeabi_i2f+0x8a>
 8000dea:	3808      	subs	r0, #8
 8000dec:	4085      	lsls	r5, r0
 8000dee:	0268      	lsls	r0, r5, #9
 8000df0:	0a40      	lsrs	r0, r0, #9
 8000df2:	e023      	b.n	8000e3c <__aeabi_i2f+0x74>
 8000df4:	2a99      	cmp	r2, #153	; 0x99
 8000df6:	dd0b      	ble.n	8000e10 <__aeabi_i2f+0x48>
 8000df8:	2305      	movs	r3, #5
 8000dfa:	0029      	movs	r1, r5
 8000dfc:	1a1b      	subs	r3, r3, r0
 8000dfe:	40d9      	lsrs	r1, r3
 8000e00:	0003      	movs	r3, r0
 8000e02:	331b      	adds	r3, #27
 8000e04:	409d      	lsls	r5, r3
 8000e06:	002b      	movs	r3, r5
 8000e08:	1e5d      	subs	r5, r3, #1
 8000e0a:	41ab      	sbcs	r3, r5
 8000e0c:	4319      	orrs	r1, r3
 8000e0e:	000d      	movs	r5, r1
 8000e10:	2805      	cmp	r0, #5
 8000e12:	dd01      	ble.n	8000e18 <__aeabi_i2f+0x50>
 8000e14:	1f43      	subs	r3, r0, #5
 8000e16:	409d      	lsls	r5, r3
 8000e18:	002b      	movs	r3, r5
 8000e1a:	490f      	ldr	r1, [pc, #60]	; (8000e58 <__aeabi_i2f+0x90>)
 8000e1c:	400b      	ands	r3, r1
 8000e1e:	076e      	lsls	r6, r5, #29
 8000e20:	d009      	beq.n	8000e36 <__aeabi_i2f+0x6e>
 8000e22:	260f      	movs	r6, #15
 8000e24:	4035      	ands	r5, r6
 8000e26:	2d04      	cmp	r5, #4
 8000e28:	d005      	beq.n	8000e36 <__aeabi_i2f+0x6e>
 8000e2a:	3304      	adds	r3, #4
 8000e2c:	015d      	lsls	r5, r3, #5
 8000e2e:	d502      	bpl.n	8000e36 <__aeabi_i2f+0x6e>
 8000e30:	229f      	movs	r2, #159	; 0x9f
 8000e32:	400b      	ands	r3, r1
 8000e34:	1a12      	subs	r2, r2, r0
 8000e36:	019b      	lsls	r3, r3, #6
 8000e38:	0a58      	lsrs	r0, r3, #9
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	0240      	lsls	r0, r0, #9
 8000e3e:	05d2      	lsls	r2, r2, #23
 8000e40:	0a40      	lsrs	r0, r0, #9
 8000e42:	07e4      	lsls	r4, r4, #31
 8000e44:	4310      	orrs	r0, r2
 8000e46:	4320      	orrs	r0, r4
 8000e48:	bd70      	pop	{r4, r5, r6, pc}
 8000e4a:	2400      	movs	r4, #0
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2000      	movs	r0, #0
 8000e50:	e7f4      	b.n	8000e3c <__aeabi_i2f+0x74>
 8000e52:	0268      	lsls	r0, r5, #9
 8000e54:	0a40      	lsrs	r0, r0, #9
 8000e56:	e7f1      	b.n	8000e3c <__aeabi_i2f+0x74>
 8000e58:	fbffffff 	.word	0xfbffffff

08000e5c <__aeabi_ddiv>:
 8000e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e5e:	4657      	mov	r7, sl
 8000e60:	46de      	mov	lr, fp
 8000e62:	464e      	mov	r6, r9
 8000e64:	4645      	mov	r5, r8
 8000e66:	b5e0      	push	{r5, r6, r7, lr}
 8000e68:	4683      	mov	fp, r0
 8000e6a:	0007      	movs	r7, r0
 8000e6c:	030e      	lsls	r6, r1, #12
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	b085      	sub	sp, #20
 8000e72:	4692      	mov	sl, r2
 8000e74:	001c      	movs	r4, r3
 8000e76:	0b36      	lsrs	r6, r6, #12
 8000e78:	0d40      	lsrs	r0, r0, #21
 8000e7a:	0fcd      	lsrs	r5, r1, #31
 8000e7c:	2800      	cmp	r0, #0
 8000e7e:	d100      	bne.n	8000e82 <__aeabi_ddiv+0x26>
 8000e80:	e09d      	b.n	8000fbe <__aeabi_ddiv+0x162>
 8000e82:	4b95      	ldr	r3, [pc, #596]	; (80010d8 <__aeabi_ddiv+0x27c>)
 8000e84:	4298      	cmp	r0, r3
 8000e86:	d039      	beq.n	8000efc <__aeabi_ddiv+0xa0>
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	00f6      	lsls	r6, r6, #3
 8000e8c:	041b      	lsls	r3, r3, #16
 8000e8e:	431e      	orrs	r6, r3
 8000e90:	4a92      	ldr	r2, [pc, #584]	; (80010dc <__aeabi_ddiv+0x280>)
 8000e92:	0f7b      	lsrs	r3, r7, #29
 8000e94:	4333      	orrs	r3, r6
 8000e96:	4699      	mov	r9, r3
 8000e98:	4694      	mov	ip, r2
 8000e9a:	0003      	movs	r3, r0
 8000e9c:	4463      	add	r3, ip
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	00ff      	lsls	r7, r7, #3
 8000ea6:	9302      	str	r3, [sp, #8]
 8000ea8:	0323      	lsls	r3, r4, #12
 8000eaa:	0b1b      	lsrs	r3, r3, #12
 8000eac:	4698      	mov	r8, r3
 8000eae:	0063      	lsls	r3, r4, #1
 8000eb0:	0fe4      	lsrs	r4, r4, #31
 8000eb2:	4652      	mov	r2, sl
 8000eb4:	0d5b      	lsrs	r3, r3, #21
 8000eb6:	9401      	str	r4, [sp, #4]
 8000eb8:	d100      	bne.n	8000ebc <__aeabi_ddiv+0x60>
 8000eba:	e0b3      	b.n	8001024 <__aeabi_ddiv+0x1c8>
 8000ebc:	4986      	ldr	r1, [pc, #536]	; (80010d8 <__aeabi_ddiv+0x27c>)
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d100      	bne.n	8000ec4 <__aeabi_ddiv+0x68>
 8000ec2:	e09e      	b.n	8001002 <__aeabi_ddiv+0x1a6>
 8000ec4:	4642      	mov	r2, r8
 8000ec6:	00d1      	lsls	r1, r2, #3
 8000ec8:	2280      	movs	r2, #128	; 0x80
 8000eca:	0412      	lsls	r2, r2, #16
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	4651      	mov	r1, sl
 8000ed0:	0f49      	lsrs	r1, r1, #29
 8000ed2:	4311      	orrs	r1, r2
 8000ed4:	468b      	mov	fp, r1
 8000ed6:	4981      	ldr	r1, [pc, #516]	; (80010dc <__aeabi_ddiv+0x280>)
 8000ed8:	4652      	mov	r2, sl
 8000eda:	468c      	mov	ip, r1
 8000edc:	9900      	ldr	r1, [sp, #0]
 8000ede:	4463      	add	r3, ip
 8000ee0:	1acb      	subs	r3, r1, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	00d2      	lsls	r2, r2, #3
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	002b      	movs	r3, r5
 8000eea:	4063      	eors	r3, r4
 8000eec:	469a      	mov	sl, r3
 8000eee:	2e0f      	cmp	r6, #15
 8000ef0:	d900      	bls.n	8000ef4 <__aeabi_ddiv+0x98>
 8000ef2:	e105      	b.n	8001100 <__aeabi_ddiv+0x2a4>
 8000ef4:	4b7a      	ldr	r3, [pc, #488]	; (80010e0 <__aeabi_ddiv+0x284>)
 8000ef6:	00b6      	lsls	r6, r6, #2
 8000ef8:	599b      	ldr	r3, [r3, r6]
 8000efa:	469f      	mov	pc, r3
 8000efc:	465b      	mov	r3, fp
 8000efe:	4333      	orrs	r3, r6
 8000f00:	4699      	mov	r9, r3
 8000f02:	d000      	beq.n	8000f06 <__aeabi_ddiv+0xaa>
 8000f04:	e0b8      	b.n	8001078 <__aeabi_ddiv+0x21c>
 8000f06:	2302      	movs	r3, #2
 8000f08:	2608      	movs	r6, #8
 8000f0a:	2700      	movs	r7, #0
 8000f0c:	9000      	str	r0, [sp, #0]
 8000f0e:	9302      	str	r3, [sp, #8]
 8000f10:	e7ca      	b.n	8000ea8 <__aeabi_ddiv+0x4c>
 8000f12:	46cb      	mov	fp, r9
 8000f14:	003a      	movs	r2, r7
 8000f16:	9902      	ldr	r1, [sp, #8]
 8000f18:	9501      	str	r5, [sp, #4]
 8000f1a:	9b01      	ldr	r3, [sp, #4]
 8000f1c:	469a      	mov	sl, r3
 8000f1e:	2902      	cmp	r1, #2
 8000f20:	d027      	beq.n	8000f72 <__aeabi_ddiv+0x116>
 8000f22:	2903      	cmp	r1, #3
 8000f24:	d100      	bne.n	8000f28 <__aeabi_ddiv+0xcc>
 8000f26:	e280      	b.n	800142a <__aeabi_ddiv+0x5ce>
 8000f28:	2901      	cmp	r1, #1
 8000f2a:	d044      	beq.n	8000fb6 <__aeabi_ddiv+0x15a>
 8000f2c:	496d      	ldr	r1, [pc, #436]	; (80010e4 <__aeabi_ddiv+0x288>)
 8000f2e:	9b00      	ldr	r3, [sp, #0]
 8000f30:	468c      	mov	ip, r1
 8000f32:	4463      	add	r3, ip
 8000f34:	001c      	movs	r4, r3
 8000f36:	2c00      	cmp	r4, #0
 8000f38:	dd38      	ble.n	8000fac <__aeabi_ddiv+0x150>
 8000f3a:	0753      	lsls	r3, r2, #29
 8000f3c:	d000      	beq.n	8000f40 <__aeabi_ddiv+0xe4>
 8000f3e:	e213      	b.n	8001368 <__aeabi_ddiv+0x50c>
 8000f40:	08d2      	lsrs	r2, r2, #3
 8000f42:	465b      	mov	r3, fp
 8000f44:	01db      	lsls	r3, r3, #7
 8000f46:	d509      	bpl.n	8000f5c <__aeabi_ddiv+0x100>
 8000f48:	4659      	mov	r1, fp
 8000f4a:	4b67      	ldr	r3, [pc, #412]	; (80010e8 <__aeabi_ddiv+0x28c>)
 8000f4c:	4019      	ands	r1, r3
 8000f4e:	468b      	mov	fp, r1
 8000f50:	2180      	movs	r1, #128	; 0x80
 8000f52:	00c9      	lsls	r1, r1, #3
 8000f54:	468c      	mov	ip, r1
 8000f56:	9b00      	ldr	r3, [sp, #0]
 8000f58:	4463      	add	r3, ip
 8000f5a:	001c      	movs	r4, r3
 8000f5c:	4b63      	ldr	r3, [pc, #396]	; (80010ec <__aeabi_ddiv+0x290>)
 8000f5e:	429c      	cmp	r4, r3
 8000f60:	dc07      	bgt.n	8000f72 <__aeabi_ddiv+0x116>
 8000f62:	465b      	mov	r3, fp
 8000f64:	0564      	lsls	r4, r4, #21
 8000f66:	075f      	lsls	r7, r3, #29
 8000f68:	025b      	lsls	r3, r3, #9
 8000f6a:	4317      	orrs	r7, r2
 8000f6c:	0b1b      	lsrs	r3, r3, #12
 8000f6e:	0d62      	lsrs	r2, r4, #21
 8000f70:	e002      	b.n	8000f78 <__aeabi_ddiv+0x11c>
 8000f72:	2300      	movs	r3, #0
 8000f74:	2700      	movs	r7, #0
 8000f76:	4a58      	ldr	r2, [pc, #352]	; (80010d8 <__aeabi_ddiv+0x27c>)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	031b      	lsls	r3, r3, #12
 8000f7c:	0b1c      	lsrs	r4, r3, #12
 8000f7e:	0d0b      	lsrs	r3, r1, #20
 8000f80:	051b      	lsls	r3, r3, #20
 8000f82:	4323      	orrs	r3, r4
 8000f84:	0514      	lsls	r4, r2, #20
 8000f86:	4a5a      	ldr	r2, [pc, #360]	; (80010f0 <__aeabi_ddiv+0x294>)
 8000f88:	0038      	movs	r0, r7
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	431c      	orrs	r4, r3
 8000f8e:	4653      	mov	r3, sl
 8000f90:	0064      	lsls	r4, r4, #1
 8000f92:	07db      	lsls	r3, r3, #31
 8000f94:	0864      	lsrs	r4, r4, #1
 8000f96:	431c      	orrs	r4, r3
 8000f98:	0021      	movs	r1, r4
 8000f9a:	b005      	add	sp, #20
 8000f9c:	bc3c      	pop	{r2, r3, r4, r5}
 8000f9e:	4690      	mov	r8, r2
 8000fa0:	4699      	mov	r9, r3
 8000fa2:	46a2      	mov	sl, r4
 8000fa4:	46ab      	mov	fp, r5
 8000fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4252      	negs	r2, r2
 8000fac:	2301      	movs	r3, #1
 8000fae:	1b1b      	subs	r3, r3, r4
 8000fb0:	2b38      	cmp	r3, #56	; 0x38
 8000fb2:	dc00      	bgt.n	8000fb6 <__aeabi_ddiv+0x15a>
 8000fb4:	e1ad      	b.n	8001312 <__aeabi_ddiv+0x4b6>
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2300      	movs	r3, #0
 8000fba:	2700      	movs	r7, #0
 8000fbc:	e7dc      	b.n	8000f78 <__aeabi_ddiv+0x11c>
 8000fbe:	465b      	mov	r3, fp
 8000fc0:	4333      	orrs	r3, r6
 8000fc2:	4699      	mov	r9, r3
 8000fc4:	d05e      	beq.n	8001084 <__aeabi_ddiv+0x228>
 8000fc6:	2e00      	cmp	r6, #0
 8000fc8:	d100      	bne.n	8000fcc <__aeabi_ddiv+0x170>
 8000fca:	e18a      	b.n	80012e2 <__aeabi_ddiv+0x486>
 8000fcc:	0030      	movs	r0, r6
 8000fce:	f001 fa2f 	bl	8002430 <__clzsi2>
 8000fd2:	0003      	movs	r3, r0
 8000fd4:	3b0b      	subs	r3, #11
 8000fd6:	2b1c      	cmp	r3, #28
 8000fd8:	dd00      	ble.n	8000fdc <__aeabi_ddiv+0x180>
 8000fda:	e17b      	b.n	80012d4 <__aeabi_ddiv+0x478>
 8000fdc:	221d      	movs	r2, #29
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	465a      	mov	r2, fp
 8000fe2:	0001      	movs	r1, r0
 8000fe4:	40da      	lsrs	r2, r3
 8000fe6:	3908      	subs	r1, #8
 8000fe8:	408e      	lsls	r6, r1
 8000fea:	0013      	movs	r3, r2
 8000fec:	465f      	mov	r7, fp
 8000fee:	4333      	orrs	r3, r6
 8000ff0:	4699      	mov	r9, r3
 8000ff2:	408f      	lsls	r7, r1
 8000ff4:	4b3f      	ldr	r3, [pc, #252]	; (80010f4 <__aeabi_ddiv+0x298>)
 8000ff6:	2600      	movs	r6, #0
 8000ff8:	1a1b      	subs	r3, r3, r0
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	9302      	str	r3, [sp, #8]
 8001000:	e752      	b.n	8000ea8 <__aeabi_ddiv+0x4c>
 8001002:	4641      	mov	r1, r8
 8001004:	4653      	mov	r3, sl
 8001006:	430b      	orrs	r3, r1
 8001008:	493b      	ldr	r1, [pc, #236]	; (80010f8 <__aeabi_ddiv+0x29c>)
 800100a:	469b      	mov	fp, r3
 800100c:	468c      	mov	ip, r1
 800100e:	9b00      	ldr	r3, [sp, #0]
 8001010:	4463      	add	r3, ip
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	465b      	mov	r3, fp
 8001016:	2b00      	cmp	r3, #0
 8001018:	d13b      	bne.n	8001092 <__aeabi_ddiv+0x236>
 800101a:	2302      	movs	r3, #2
 800101c:	2200      	movs	r2, #0
 800101e:	431e      	orrs	r6, r3
 8001020:	2102      	movs	r1, #2
 8001022:	e761      	b.n	8000ee8 <__aeabi_ddiv+0x8c>
 8001024:	4643      	mov	r3, r8
 8001026:	4313      	orrs	r3, r2
 8001028:	469b      	mov	fp, r3
 800102a:	d037      	beq.n	800109c <__aeabi_ddiv+0x240>
 800102c:	4643      	mov	r3, r8
 800102e:	2b00      	cmp	r3, #0
 8001030:	d100      	bne.n	8001034 <__aeabi_ddiv+0x1d8>
 8001032:	e162      	b.n	80012fa <__aeabi_ddiv+0x49e>
 8001034:	4640      	mov	r0, r8
 8001036:	f001 f9fb 	bl	8002430 <__clzsi2>
 800103a:	0003      	movs	r3, r0
 800103c:	3b0b      	subs	r3, #11
 800103e:	2b1c      	cmp	r3, #28
 8001040:	dd00      	ble.n	8001044 <__aeabi_ddiv+0x1e8>
 8001042:	e153      	b.n	80012ec <__aeabi_ddiv+0x490>
 8001044:	0002      	movs	r2, r0
 8001046:	4641      	mov	r1, r8
 8001048:	3a08      	subs	r2, #8
 800104a:	4091      	lsls	r1, r2
 800104c:	4688      	mov	r8, r1
 800104e:	211d      	movs	r1, #29
 8001050:	1acb      	subs	r3, r1, r3
 8001052:	4651      	mov	r1, sl
 8001054:	40d9      	lsrs	r1, r3
 8001056:	000b      	movs	r3, r1
 8001058:	4641      	mov	r1, r8
 800105a:	430b      	orrs	r3, r1
 800105c:	469b      	mov	fp, r3
 800105e:	4653      	mov	r3, sl
 8001060:	4093      	lsls	r3, r2
 8001062:	001a      	movs	r2, r3
 8001064:	9b00      	ldr	r3, [sp, #0]
 8001066:	4925      	ldr	r1, [pc, #148]	; (80010fc <__aeabi_ddiv+0x2a0>)
 8001068:	469c      	mov	ip, r3
 800106a:	4460      	add	r0, ip
 800106c:	0003      	movs	r3, r0
 800106e:	468c      	mov	ip, r1
 8001070:	4463      	add	r3, ip
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2100      	movs	r1, #0
 8001076:	e737      	b.n	8000ee8 <__aeabi_ddiv+0x8c>
 8001078:	2303      	movs	r3, #3
 800107a:	46b1      	mov	r9, r6
 800107c:	9000      	str	r0, [sp, #0]
 800107e:	260c      	movs	r6, #12
 8001080:	9302      	str	r3, [sp, #8]
 8001082:	e711      	b.n	8000ea8 <__aeabi_ddiv+0x4c>
 8001084:	2300      	movs	r3, #0
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	2604      	movs	r6, #4
 800108c:	2700      	movs	r7, #0
 800108e:	9302      	str	r3, [sp, #8]
 8001090:	e70a      	b.n	8000ea8 <__aeabi_ddiv+0x4c>
 8001092:	2303      	movs	r3, #3
 8001094:	46c3      	mov	fp, r8
 8001096:	431e      	orrs	r6, r3
 8001098:	2103      	movs	r1, #3
 800109a:	e725      	b.n	8000ee8 <__aeabi_ddiv+0x8c>
 800109c:	3301      	adds	r3, #1
 800109e:	431e      	orrs	r6, r3
 80010a0:	2200      	movs	r2, #0
 80010a2:	2101      	movs	r1, #1
 80010a4:	e720      	b.n	8000ee8 <__aeabi_ddiv+0x8c>
 80010a6:	2300      	movs	r3, #0
 80010a8:	469a      	mov	sl, r3
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	2700      	movs	r7, #0
 80010ae:	031b      	lsls	r3, r3, #12
 80010b0:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <__aeabi_ddiv+0x27c>)
 80010b2:	e761      	b.n	8000f78 <__aeabi_ddiv+0x11c>
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	4649      	mov	r1, r9
 80010b8:	031b      	lsls	r3, r3, #12
 80010ba:	4219      	tst	r1, r3
 80010bc:	d100      	bne.n	80010c0 <__aeabi_ddiv+0x264>
 80010be:	e0e2      	b.n	8001286 <__aeabi_ddiv+0x42a>
 80010c0:	4659      	mov	r1, fp
 80010c2:	4219      	tst	r1, r3
 80010c4:	d000      	beq.n	80010c8 <__aeabi_ddiv+0x26c>
 80010c6:	e0de      	b.n	8001286 <__aeabi_ddiv+0x42a>
 80010c8:	430b      	orrs	r3, r1
 80010ca:	031b      	lsls	r3, r3, #12
 80010cc:	0017      	movs	r7, r2
 80010ce:	0b1b      	lsrs	r3, r3, #12
 80010d0:	46a2      	mov	sl, r4
 80010d2:	4a01      	ldr	r2, [pc, #4]	; (80010d8 <__aeabi_ddiv+0x27c>)
 80010d4:	e750      	b.n	8000f78 <__aeabi_ddiv+0x11c>
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	000007ff 	.word	0x000007ff
 80010dc:	fffffc01 	.word	0xfffffc01
 80010e0:	0800a438 	.word	0x0800a438
 80010e4:	000003ff 	.word	0x000003ff
 80010e8:	feffffff 	.word	0xfeffffff
 80010ec:	000007fe 	.word	0x000007fe
 80010f0:	800fffff 	.word	0x800fffff
 80010f4:	fffffc0d 	.word	0xfffffc0d
 80010f8:	fffff801 	.word	0xfffff801
 80010fc:	000003f3 	.word	0x000003f3
 8001100:	45d9      	cmp	r9, fp
 8001102:	d900      	bls.n	8001106 <__aeabi_ddiv+0x2aa>
 8001104:	e0cb      	b.n	800129e <__aeabi_ddiv+0x442>
 8001106:	d100      	bne.n	800110a <__aeabi_ddiv+0x2ae>
 8001108:	e0c6      	b.n	8001298 <__aeabi_ddiv+0x43c>
 800110a:	003c      	movs	r4, r7
 800110c:	4648      	mov	r0, r9
 800110e:	2700      	movs	r7, #0
 8001110:	9b00      	ldr	r3, [sp, #0]
 8001112:	3b01      	subs	r3, #1
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	465b      	mov	r3, fp
 8001118:	0e16      	lsrs	r6, r2, #24
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	431e      	orrs	r6, r3
 800111e:	0213      	lsls	r3, r2, #8
 8001120:	4698      	mov	r8, r3
 8001122:	0433      	lsls	r3, r6, #16
 8001124:	0c1b      	lsrs	r3, r3, #16
 8001126:	4699      	mov	r9, r3
 8001128:	0c31      	lsrs	r1, r6, #16
 800112a:	9101      	str	r1, [sp, #4]
 800112c:	f7ff f872 	bl	8000214 <__aeabi_uidivmod>
 8001130:	464a      	mov	r2, r9
 8001132:	4342      	muls	r2, r0
 8001134:	040b      	lsls	r3, r1, #16
 8001136:	0c21      	lsrs	r1, r4, #16
 8001138:	0005      	movs	r5, r0
 800113a:	4319      	orrs	r1, r3
 800113c:	428a      	cmp	r2, r1
 800113e:	d907      	bls.n	8001150 <__aeabi_ddiv+0x2f4>
 8001140:	1989      	adds	r1, r1, r6
 8001142:	3d01      	subs	r5, #1
 8001144:	428e      	cmp	r6, r1
 8001146:	d803      	bhi.n	8001150 <__aeabi_ddiv+0x2f4>
 8001148:	428a      	cmp	r2, r1
 800114a:	d901      	bls.n	8001150 <__aeabi_ddiv+0x2f4>
 800114c:	1e85      	subs	r5, r0, #2
 800114e:	1989      	adds	r1, r1, r6
 8001150:	1a88      	subs	r0, r1, r2
 8001152:	9901      	ldr	r1, [sp, #4]
 8001154:	f7ff f85e 	bl	8000214 <__aeabi_uidivmod>
 8001158:	0409      	lsls	r1, r1, #16
 800115a:	468c      	mov	ip, r1
 800115c:	464a      	mov	r2, r9
 800115e:	0421      	lsls	r1, r4, #16
 8001160:	4664      	mov	r4, ip
 8001162:	4342      	muls	r2, r0
 8001164:	0c09      	lsrs	r1, r1, #16
 8001166:	0003      	movs	r3, r0
 8001168:	4321      	orrs	r1, r4
 800116a:	428a      	cmp	r2, r1
 800116c:	d904      	bls.n	8001178 <__aeabi_ddiv+0x31c>
 800116e:	1989      	adds	r1, r1, r6
 8001170:	3b01      	subs	r3, #1
 8001172:	428e      	cmp	r6, r1
 8001174:	d800      	bhi.n	8001178 <__aeabi_ddiv+0x31c>
 8001176:	e0f1      	b.n	800135c <__aeabi_ddiv+0x500>
 8001178:	042d      	lsls	r5, r5, #16
 800117a:	431d      	orrs	r5, r3
 800117c:	46ab      	mov	fp, r5
 800117e:	4643      	mov	r3, r8
 8001180:	1a89      	subs	r1, r1, r2
 8001182:	4642      	mov	r2, r8
 8001184:	0c28      	lsrs	r0, r5, #16
 8001186:	0412      	lsls	r2, r2, #16
 8001188:	0c1d      	lsrs	r5, r3, #16
 800118a:	465b      	mov	r3, fp
 800118c:	0c14      	lsrs	r4, r2, #16
 800118e:	0022      	movs	r2, r4
 8001190:	041b      	lsls	r3, r3, #16
 8001192:	0c1b      	lsrs	r3, r3, #16
 8001194:	435a      	muls	r2, r3
 8001196:	9403      	str	r4, [sp, #12]
 8001198:	436b      	muls	r3, r5
 800119a:	4344      	muls	r4, r0
 800119c:	9502      	str	r5, [sp, #8]
 800119e:	4368      	muls	r0, r5
 80011a0:	191b      	adds	r3, r3, r4
 80011a2:	0c15      	lsrs	r5, r2, #16
 80011a4:	18eb      	adds	r3, r5, r3
 80011a6:	429c      	cmp	r4, r3
 80011a8:	d903      	bls.n	80011b2 <__aeabi_ddiv+0x356>
 80011aa:	2480      	movs	r4, #128	; 0x80
 80011ac:	0264      	lsls	r4, r4, #9
 80011ae:	46a4      	mov	ip, r4
 80011b0:	4460      	add	r0, ip
 80011b2:	0c1c      	lsrs	r4, r3, #16
 80011b4:	0415      	lsls	r5, r2, #16
 80011b6:	041b      	lsls	r3, r3, #16
 80011b8:	0c2d      	lsrs	r5, r5, #16
 80011ba:	1820      	adds	r0, r4, r0
 80011bc:	195d      	adds	r5, r3, r5
 80011be:	4281      	cmp	r1, r0
 80011c0:	d377      	bcc.n	80012b2 <__aeabi_ddiv+0x456>
 80011c2:	d073      	beq.n	80012ac <__aeabi_ddiv+0x450>
 80011c4:	1a0c      	subs	r4, r1, r0
 80011c6:	4aa2      	ldr	r2, [pc, #648]	; (8001450 <__aeabi_ddiv+0x5f4>)
 80011c8:	1b7d      	subs	r5, r7, r5
 80011ca:	42af      	cmp	r7, r5
 80011cc:	41bf      	sbcs	r7, r7
 80011ce:	4694      	mov	ip, r2
 80011d0:	9b00      	ldr	r3, [sp, #0]
 80011d2:	427f      	negs	r7, r7
 80011d4:	4463      	add	r3, ip
 80011d6:	1be0      	subs	r0, r4, r7
 80011d8:	001c      	movs	r4, r3
 80011da:	4286      	cmp	r6, r0
 80011dc:	d100      	bne.n	80011e0 <__aeabi_ddiv+0x384>
 80011de:	e0db      	b.n	8001398 <__aeabi_ddiv+0x53c>
 80011e0:	9901      	ldr	r1, [sp, #4]
 80011e2:	f7ff f817 	bl	8000214 <__aeabi_uidivmod>
 80011e6:	464a      	mov	r2, r9
 80011e8:	4342      	muls	r2, r0
 80011ea:	040b      	lsls	r3, r1, #16
 80011ec:	0c29      	lsrs	r1, r5, #16
 80011ee:	0007      	movs	r7, r0
 80011f0:	4319      	orrs	r1, r3
 80011f2:	428a      	cmp	r2, r1
 80011f4:	d907      	bls.n	8001206 <__aeabi_ddiv+0x3aa>
 80011f6:	1989      	adds	r1, r1, r6
 80011f8:	3f01      	subs	r7, #1
 80011fa:	428e      	cmp	r6, r1
 80011fc:	d803      	bhi.n	8001206 <__aeabi_ddiv+0x3aa>
 80011fe:	428a      	cmp	r2, r1
 8001200:	d901      	bls.n	8001206 <__aeabi_ddiv+0x3aa>
 8001202:	1e87      	subs	r7, r0, #2
 8001204:	1989      	adds	r1, r1, r6
 8001206:	1a88      	subs	r0, r1, r2
 8001208:	9901      	ldr	r1, [sp, #4]
 800120a:	f7ff f803 	bl	8000214 <__aeabi_uidivmod>
 800120e:	0409      	lsls	r1, r1, #16
 8001210:	464a      	mov	r2, r9
 8001212:	4689      	mov	r9, r1
 8001214:	0429      	lsls	r1, r5, #16
 8001216:	464d      	mov	r5, r9
 8001218:	4342      	muls	r2, r0
 800121a:	0c09      	lsrs	r1, r1, #16
 800121c:	0003      	movs	r3, r0
 800121e:	4329      	orrs	r1, r5
 8001220:	428a      	cmp	r2, r1
 8001222:	d907      	bls.n	8001234 <__aeabi_ddiv+0x3d8>
 8001224:	1989      	adds	r1, r1, r6
 8001226:	3b01      	subs	r3, #1
 8001228:	428e      	cmp	r6, r1
 800122a:	d803      	bhi.n	8001234 <__aeabi_ddiv+0x3d8>
 800122c:	428a      	cmp	r2, r1
 800122e:	d901      	bls.n	8001234 <__aeabi_ddiv+0x3d8>
 8001230:	1e83      	subs	r3, r0, #2
 8001232:	1989      	adds	r1, r1, r6
 8001234:	043f      	lsls	r7, r7, #16
 8001236:	1a89      	subs	r1, r1, r2
 8001238:	003a      	movs	r2, r7
 800123a:	9f03      	ldr	r7, [sp, #12]
 800123c:	431a      	orrs	r2, r3
 800123e:	0038      	movs	r0, r7
 8001240:	0413      	lsls	r3, r2, #16
 8001242:	0c1b      	lsrs	r3, r3, #16
 8001244:	4358      	muls	r0, r3
 8001246:	4681      	mov	r9, r0
 8001248:	9802      	ldr	r0, [sp, #8]
 800124a:	0c15      	lsrs	r5, r2, #16
 800124c:	436f      	muls	r7, r5
 800124e:	4343      	muls	r3, r0
 8001250:	4345      	muls	r5, r0
 8001252:	4648      	mov	r0, r9
 8001254:	0c00      	lsrs	r0, r0, #16
 8001256:	4684      	mov	ip, r0
 8001258:	19db      	adds	r3, r3, r7
 800125a:	4463      	add	r3, ip
 800125c:	429f      	cmp	r7, r3
 800125e:	d903      	bls.n	8001268 <__aeabi_ddiv+0x40c>
 8001260:	2080      	movs	r0, #128	; 0x80
 8001262:	0240      	lsls	r0, r0, #9
 8001264:	4684      	mov	ip, r0
 8001266:	4465      	add	r5, ip
 8001268:	4648      	mov	r0, r9
 800126a:	0c1f      	lsrs	r7, r3, #16
 800126c:	0400      	lsls	r0, r0, #16
 800126e:	041b      	lsls	r3, r3, #16
 8001270:	0c00      	lsrs	r0, r0, #16
 8001272:	197d      	adds	r5, r7, r5
 8001274:	1818      	adds	r0, r3, r0
 8001276:	42a9      	cmp	r1, r5
 8001278:	d200      	bcs.n	800127c <__aeabi_ddiv+0x420>
 800127a:	e084      	b.n	8001386 <__aeabi_ddiv+0x52a>
 800127c:	d100      	bne.n	8001280 <__aeabi_ddiv+0x424>
 800127e:	e07f      	b.n	8001380 <__aeabi_ddiv+0x524>
 8001280:	2301      	movs	r3, #1
 8001282:	431a      	orrs	r2, r3
 8001284:	e657      	b.n	8000f36 <__aeabi_ddiv+0xda>
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	464a      	mov	r2, r9
 800128a:	031b      	lsls	r3, r3, #12
 800128c:	4313      	orrs	r3, r2
 800128e:	031b      	lsls	r3, r3, #12
 8001290:	0b1b      	lsrs	r3, r3, #12
 8001292:	46aa      	mov	sl, r5
 8001294:	4a6f      	ldr	r2, [pc, #444]	; (8001454 <__aeabi_ddiv+0x5f8>)
 8001296:	e66f      	b.n	8000f78 <__aeabi_ddiv+0x11c>
 8001298:	42ba      	cmp	r2, r7
 800129a:	d900      	bls.n	800129e <__aeabi_ddiv+0x442>
 800129c:	e735      	b.n	800110a <__aeabi_ddiv+0x2ae>
 800129e:	464b      	mov	r3, r9
 80012a0:	07dc      	lsls	r4, r3, #31
 80012a2:	0858      	lsrs	r0, r3, #1
 80012a4:	087b      	lsrs	r3, r7, #1
 80012a6:	431c      	orrs	r4, r3
 80012a8:	07ff      	lsls	r7, r7, #31
 80012aa:	e734      	b.n	8001116 <__aeabi_ddiv+0x2ba>
 80012ac:	2400      	movs	r4, #0
 80012ae:	42af      	cmp	r7, r5
 80012b0:	d289      	bcs.n	80011c6 <__aeabi_ddiv+0x36a>
 80012b2:	4447      	add	r7, r8
 80012b4:	4547      	cmp	r7, r8
 80012b6:	41a4      	sbcs	r4, r4
 80012b8:	465b      	mov	r3, fp
 80012ba:	4264      	negs	r4, r4
 80012bc:	19a4      	adds	r4, r4, r6
 80012be:	1864      	adds	r4, r4, r1
 80012c0:	3b01      	subs	r3, #1
 80012c2:	42a6      	cmp	r6, r4
 80012c4:	d21e      	bcs.n	8001304 <__aeabi_ddiv+0x4a8>
 80012c6:	42a0      	cmp	r0, r4
 80012c8:	d86d      	bhi.n	80013a6 <__aeabi_ddiv+0x54a>
 80012ca:	d100      	bne.n	80012ce <__aeabi_ddiv+0x472>
 80012cc:	e0b6      	b.n	800143c <__aeabi_ddiv+0x5e0>
 80012ce:	1a24      	subs	r4, r4, r0
 80012d0:	469b      	mov	fp, r3
 80012d2:	e778      	b.n	80011c6 <__aeabi_ddiv+0x36a>
 80012d4:	0003      	movs	r3, r0
 80012d6:	465a      	mov	r2, fp
 80012d8:	3b28      	subs	r3, #40	; 0x28
 80012da:	409a      	lsls	r2, r3
 80012dc:	2700      	movs	r7, #0
 80012de:	4691      	mov	r9, r2
 80012e0:	e688      	b.n	8000ff4 <__aeabi_ddiv+0x198>
 80012e2:	4658      	mov	r0, fp
 80012e4:	f001 f8a4 	bl	8002430 <__clzsi2>
 80012e8:	3020      	adds	r0, #32
 80012ea:	e672      	b.n	8000fd2 <__aeabi_ddiv+0x176>
 80012ec:	0003      	movs	r3, r0
 80012ee:	4652      	mov	r2, sl
 80012f0:	3b28      	subs	r3, #40	; 0x28
 80012f2:	409a      	lsls	r2, r3
 80012f4:	4693      	mov	fp, r2
 80012f6:	2200      	movs	r2, #0
 80012f8:	e6b4      	b.n	8001064 <__aeabi_ddiv+0x208>
 80012fa:	4650      	mov	r0, sl
 80012fc:	f001 f898 	bl	8002430 <__clzsi2>
 8001300:	3020      	adds	r0, #32
 8001302:	e69a      	b.n	800103a <__aeabi_ddiv+0x1de>
 8001304:	42a6      	cmp	r6, r4
 8001306:	d1e2      	bne.n	80012ce <__aeabi_ddiv+0x472>
 8001308:	45b8      	cmp	r8, r7
 800130a:	d9dc      	bls.n	80012c6 <__aeabi_ddiv+0x46a>
 800130c:	1a34      	subs	r4, r6, r0
 800130e:	469b      	mov	fp, r3
 8001310:	e759      	b.n	80011c6 <__aeabi_ddiv+0x36a>
 8001312:	2b1f      	cmp	r3, #31
 8001314:	dc65      	bgt.n	80013e2 <__aeabi_ddiv+0x586>
 8001316:	4c50      	ldr	r4, [pc, #320]	; (8001458 <__aeabi_ddiv+0x5fc>)
 8001318:	9900      	ldr	r1, [sp, #0]
 800131a:	46a4      	mov	ip, r4
 800131c:	465c      	mov	r4, fp
 800131e:	4461      	add	r1, ip
 8001320:	0008      	movs	r0, r1
 8001322:	408c      	lsls	r4, r1
 8001324:	0011      	movs	r1, r2
 8001326:	4082      	lsls	r2, r0
 8001328:	40d9      	lsrs	r1, r3
 800132a:	1e50      	subs	r0, r2, #1
 800132c:	4182      	sbcs	r2, r0
 800132e:	430c      	orrs	r4, r1
 8001330:	4314      	orrs	r4, r2
 8001332:	465a      	mov	r2, fp
 8001334:	40da      	lsrs	r2, r3
 8001336:	0013      	movs	r3, r2
 8001338:	0762      	lsls	r2, r4, #29
 800133a:	d009      	beq.n	8001350 <__aeabi_ddiv+0x4f4>
 800133c:	220f      	movs	r2, #15
 800133e:	4022      	ands	r2, r4
 8001340:	2a04      	cmp	r2, #4
 8001342:	d005      	beq.n	8001350 <__aeabi_ddiv+0x4f4>
 8001344:	0022      	movs	r2, r4
 8001346:	1d14      	adds	r4, r2, #4
 8001348:	4294      	cmp	r4, r2
 800134a:	4189      	sbcs	r1, r1
 800134c:	4249      	negs	r1, r1
 800134e:	185b      	adds	r3, r3, r1
 8001350:	021a      	lsls	r2, r3, #8
 8001352:	d562      	bpl.n	800141a <__aeabi_ddiv+0x5be>
 8001354:	2201      	movs	r2, #1
 8001356:	2300      	movs	r3, #0
 8001358:	2700      	movs	r7, #0
 800135a:	e60d      	b.n	8000f78 <__aeabi_ddiv+0x11c>
 800135c:	428a      	cmp	r2, r1
 800135e:	d800      	bhi.n	8001362 <__aeabi_ddiv+0x506>
 8001360:	e70a      	b.n	8001178 <__aeabi_ddiv+0x31c>
 8001362:	1e83      	subs	r3, r0, #2
 8001364:	1989      	adds	r1, r1, r6
 8001366:	e707      	b.n	8001178 <__aeabi_ddiv+0x31c>
 8001368:	230f      	movs	r3, #15
 800136a:	4013      	ands	r3, r2
 800136c:	2b04      	cmp	r3, #4
 800136e:	d100      	bne.n	8001372 <__aeabi_ddiv+0x516>
 8001370:	e5e6      	b.n	8000f40 <__aeabi_ddiv+0xe4>
 8001372:	1d17      	adds	r7, r2, #4
 8001374:	4297      	cmp	r7, r2
 8001376:	4192      	sbcs	r2, r2
 8001378:	4253      	negs	r3, r2
 800137a:	449b      	add	fp, r3
 800137c:	08fa      	lsrs	r2, r7, #3
 800137e:	e5e0      	b.n	8000f42 <__aeabi_ddiv+0xe6>
 8001380:	2800      	cmp	r0, #0
 8001382:	d100      	bne.n	8001386 <__aeabi_ddiv+0x52a>
 8001384:	e5d7      	b.n	8000f36 <__aeabi_ddiv+0xda>
 8001386:	1871      	adds	r1, r6, r1
 8001388:	1e53      	subs	r3, r2, #1
 800138a:	42b1      	cmp	r1, r6
 800138c:	d327      	bcc.n	80013de <__aeabi_ddiv+0x582>
 800138e:	42a9      	cmp	r1, r5
 8001390:	d315      	bcc.n	80013be <__aeabi_ddiv+0x562>
 8001392:	d058      	beq.n	8001446 <__aeabi_ddiv+0x5ea>
 8001394:	001a      	movs	r2, r3
 8001396:	e773      	b.n	8001280 <__aeabi_ddiv+0x424>
 8001398:	2b00      	cmp	r3, #0
 800139a:	dc00      	bgt.n	800139e <__aeabi_ddiv+0x542>
 800139c:	e604      	b.n	8000fa8 <__aeabi_ddiv+0x14c>
 800139e:	2301      	movs	r3, #1
 80013a0:	2200      	movs	r2, #0
 80013a2:	449b      	add	fp, r3
 80013a4:	e5cd      	b.n	8000f42 <__aeabi_ddiv+0xe6>
 80013a6:	2302      	movs	r3, #2
 80013a8:	4447      	add	r7, r8
 80013aa:	4547      	cmp	r7, r8
 80013ac:	4189      	sbcs	r1, r1
 80013ae:	425b      	negs	r3, r3
 80013b0:	469c      	mov	ip, r3
 80013b2:	4249      	negs	r1, r1
 80013b4:	1989      	adds	r1, r1, r6
 80013b6:	190c      	adds	r4, r1, r4
 80013b8:	44e3      	add	fp, ip
 80013ba:	1a24      	subs	r4, r4, r0
 80013bc:	e703      	b.n	80011c6 <__aeabi_ddiv+0x36a>
 80013be:	4643      	mov	r3, r8
 80013c0:	005f      	lsls	r7, r3, #1
 80013c2:	4547      	cmp	r7, r8
 80013c4:	419b      	sbcs	r3, r3
 80013c6:	46b8      	mov	r8, r7
 80013c8:	425b      	negs	r3, r3
 80013ca:	199e      	adds	r6, r3, r6
 80013cc:	3a02      	subs	r2, #2
 80013ce:	1989      	adds	r1, r1, r6
 80013d0:	42a9      	cmp	r1, r5
 80013d2:	d000      	beq.n	80013d6 <__aeabi_ddiv+0x57a>
 80013d4:	e754      	b.n	8001280 <__aeabi_ddiv+0x424>
 80013d6:	4540      	cmp	r0, r8
 80013d8:	d000      	beq.n	80013dc <__aeabi_ddiv+0x580>
 80013da:	e751      	b.n	8001280 <__aeabi_ddiv+0x424>
 80013dc:	e5ab      	b.n	8000f36 <__aeabi_ddiv+0xda>
 80013de:	001a      	movs	r2, r3
 80013e0:	e7f6      	b.n	80013d0 <__aeabi_ddiv+0x574>
 80013e2:	211f      	movs	r1, #31
 80013e4:	465f      	mov	r7, fp
 80013e6:	4249      	negs	r1, r1
 80013e8:	1b0c      	subs	r4, r1, r4
 80013ea:	40e7      	lsrs	r7, r4
 80013ec:	2b20      	cmp	r3, #32
 80013ee:	d007      	beq.n	8001400 <__aeabi_ddiv+0x5a4>
 80013f0:	491a      	ldr	r1, [pc, #104]	; (800145c <__aeabi_ddiv+0x600>)
 80013f2:	9b00      	ldr	r3, [sp, #0]
 80013f4:	468c      	mov	ip, r1
 80013f6:	4463      	add	r3, ip
 80013f8:	0018      	movs	r0, r3
 80013fa:	465b      	mov	r3, fp
 80013fc:	4083      	lsls	r3, r0
 80013fe:	431a      	orrs	r2, r3
 8001400:	1e50      	subs	r0, r2, #1
 8001402:	4182      	sbcs	r2, r0
 8001404:	433a      	orrs	r2, r7
 8001406:	2707      	movs	r7, #7
 8001408:	2300      	movs	r3, #0
 800140a:	4017      	ands	r7, r2
 800140c:	d009      	beq.n	8001422 <__aeabi_ddiv+0x5c6>
 800140e:	210f      	movs	r1, #15
 8001410:	2300      	movs	r3, #0
 8001412:	4011      	ands	r1, r2
 8001414:	0014      	movs	r4, r2
 8001416:	2904      	cmp	r1, #4
 8001418:	d195      	bne.n	8001346 <__aeabi_ddiv+0x4ea>
 800141a:	0022      	movs	r2, r4
 800141c:	075f      	lsls	r7, r3, #29
 800141e:	025b      	lsls	r3, r3, #9
 8001420:	0b1b      	lsrs	r3, r3, #12
 8001422:	08d2      	lsrs	r2, r2, #3
 8001424:	4317      	orrs	r7, r2
 8001426:	2200      	movs	r2, #0
 8001428:	e5a6      	b.n	8000f78 <__aeabi_ddiv+0x11c>
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	4659      	mov	r1, fp
 800142e:	031b      	lsls	r3, r3, #12
 8001430:	430b      	orrs	r3, r1
 8001432:	031b      	lsls	r3, r3, #12
 8001434:	0017      	movs	r7, r2
 8001436:	0b1b      	lsrs	r3, r3, #12
 8001438:	4a06      	ldr	r2, [pc, #24]	; (8001454 <__aeabi_ddiv+0x5f8>)
 800143a:	e59d      	b.n	8000f78 <__aeabi_ddiv+0x11c>
 800143c:	42bd      	cmp	r5, r7
 800143e:	d8b2      	bhi.n	80013a6 <__aeabi_ddiv+0x54a>
 8001440:	469b      	mov	fp, r3
 8001442:	2400      	movs	r4, #0
 8001444:	e6bf      	b.n	80011c6 <__aeabi_ddiv+0x36a>
 8001446:	4580      	cmp	r8, r0
 8001448:	d3b9      	bcc.n	80013be <__aeabi_ddiv+0x562>
 800144a:	001a      	movs	r2, r3
 800144c:	e7c3      	b.n	80013d6 <__aeabi_ddiv+0x57a>
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	000003ff 	.word	0x000003ff
 8001454:	000007ff 	.word	0x000007ff
 8001458:	0000041e 	.word	0x0000041e
 800145c:	0000043e 	.word	0x0000043e

08001460 <__eqdf2>:
 8001460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001462:	464f      	mov	r7, r9
 8001464:	4646      	mov	r6, r8
 8001466:	46d6      	mov	lr, sl
 8001468:	4684      	mov	ip, r0
 800146a:	b5c0      	push	{r6, r7, lr}
 800146c:	4680      	mov	r8, r0
 800146e:	4e19      	ldr	r6, [pc, #100]	; (80014d4 <__eqdf2+0x74>)
 8001470:	0318      	lsls	r0, r3, #12
 8001472:	030f      	lsls	r7, r1, #12
 8001474:	004d      	lsls	r5, r1, #1
 8001476:	0b00      	lsrs	r0, r0, #12
 8001478:	005c      	lsls	r4, r3, #1
 800147a:	4682      	mov	sl, r0
 800147c:	0b3f      	lsrs	r7, r7, #12
 800147e:	0d6d      	lsrs	r5, r5, #21
 8001480:	0fc9      	lsrs	r1, r1, #31
 8001482:	4691      	mov	r9, r2
 8001484:	0d64      	lsrs	r4, r4, #21
 8001486:	0fdb      	lsrs	r3, r3, #31
 8001488:	2001      	movs	r0, #1
 800148a:	42b5      	cmp	r5, r6
 800148c:	d00a      	beq.n	80014a4 <__eqdf2+0x44>
 800148e:	42b4      	cmp	r4, r6
 8001490:	d003      	beq.n	800149a <__eqdf2+0x3a>
 8001492:	42a5      	cmp	r5, r4
 8001494:	d101      	bne.n	800149a <__eqdf2+0x3a>
 8001496:	4557      	cmp	r7, sl
 8001498:	d00c      	beq.n	80014b4 <__eqdf2+0x54>
 800149a:	bc1c      	pop	{r2, r3, r4}
 800149c:	4690      	mov	r8, r2
 800149e:	4699      	mov	r9, r3
 80014a0:	46a2      	mov	sl, r4
 80014a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014a4:	4666      	mov	r6, ip
 80014a6:	433e      	orrs	r6, r7
 80014a8:	d1f7      	bne.n	800149a <__eqdf2+0x3a>
 80014aa:	42ac      	cmp	r4, r5
 80014ac:	d1f5      	bne.n	800149a <__eqdf2+0x3a>
 80014ae:	4654      	mov	r4, sl
 80014b0:	4314      	orrs	r4, r2
 80014b2:	d1f2      	bne.n	800149a <__eqdf2+0x3a>
 80014b4:	2001      	movs	r0, #1
 80014b6:	45c8      	cmp	r8, r9
 80014b8:	d1ef      	bne.n	800149a <__eqdf2+0x3a>
 80014ba:	4299      	cmp	r1, r3
 80014bc:	d007      	beq.n	80014ce <__eqdf2+0x6e>
 80014be:	2d00      	cmp	r5, #0
 80014c0:	d1eb      	bne.n	800149a <__eqdf2+0x3a>
 80014c2:	4663      	mov	r3, ip
 80014c4:	431f      	orrs	r7, r3
 80014c6:	0038      	movs	r0, r7
 80014c8:	1e47      	subs	r7, r0, #1
 80014ca:	41b8      	sbcs	r0, r7
 80014cc:	e7e5      	b.n	800149a <__eqdf2+0x3a>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7e3      	b.n	800149a <__eqdf2+0x3a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	464f      	mov	r7, r9
 80014dc:	4646      	mov	r6, r8
 80014de:	46d6      	mov	lr, sl
 80014e0:	004d      	lsls	r5, r1, #1
 80014e2:	b5c0      	push	{r6, r7, lr}
 80014e4:	030e      	lsls	r6, r1, #12
 80014e6:	0fc9      	lsrs	r1, r1, #31
 80014e8:	468a      	mov	sl, r1
 80014ea:	492c      	ldr	r1, [pc, #176]	; (800159c <__gedf2+0xc4>)
 80014ec:	031f      	lsls	r7, r3, #12
 80014ee:	005c      	lsls	r4, r3, #1
 80014f0:	4680      	mov	r8, r0
 80014f2:	0b36      	lsrs	r6, r6, #12
 80014f4:	0d6d      	lsrs	r5, r5, #21
 80014f6:	4691      	mov	r9, r2
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d64      	lsrs	r4, r4, #21
 80014fc:	0fdb      	lsrs	r3, r3, #31
 80014fe:	428d      	cmp	r5, r1
 8001500:	d01e      	beq.n	8001540 <__gedf2+0x68>
 8001502:	428c      	cmp	r4, r1
 8001504:	d016      	beq.n	8001534 <__gedf2+0x5c>
 8001506:	2d00      	cmp	r5, #0
 8001508:	d11e      	bne.n	8001548 <__gedf2+0x70>
 800150a:	4330      	orrs	r0, r6
 800150c:	4684      	mov	ip, r0
 800150e:	2c00      	cmp	r4, #0
 8001510:	d101      	bne.n	8001516 <__gedf2+0x3e>
 8001512:	433a      	orrs	r2, r7
 8001514:	d023      	beq.n	800155e <__gedf2+0x86>
 8001516:	4662      	mov	r2, ip
 8001518:	2a00      	cmp	r2, #0
 800151a:	d01a      	beq.n	8001552 <__gedf2+0x7a>
 800151c:	459a      	cmp	sl, r3
 800151e:	d029      	beq.n	8001574 <__gedf2+0x9c>
 8001520:	4651      	mov	r1, sl
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bc1c      	pop	{r2, r3, r4}
 800152c:	4690      	mov	r8, r2
 800152e:	4699      	mov	r9, r3
 8001530:	46a2      	mov	sl, r4
 8001532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001534:	0039      	movs	r1, r7
 8001536:	4311      	orrs	r1, r2
 8001538:	d0e5      	beq.n	8001506 <__gedf2+0x2e>
 800153a:	2002      	movs	r0, #2
 800153c:	4240      	negs	r0, r0
 800153e:	e7f4      	b.n	800152a <__gedf2+0x52>
 8001540:	4330      	orrs	r0, r6
 8001542:	d1fa      	bne.n	800153a <__gedf2+0x62>
 8001544:	42ac      	cmp	r4, r5
 8001546:	d00f      	beq.n	8001568 <__gedf2+0x90>
 8001548:	2c00      	cmp	r4, #0
 800154a:	d10f      	bne.n	800156c <__gedf2+0x94>
 800154c:	433a      	orrs	r2, r7
 800154e:	d0e7      	beq.n	8001520 <__gedf2+0x48>
 8001550:	e00c      	b.n	800156c <__gedf2+0x94>
 8001552:	2201      	movs	r2, #1
 8001554:	3b01      	subs	r3, #1
 8001556:	4393      	bics	r3, r2
 8001558:	0018      	movs	r0, r3
 800155a:	3001      	adds	r0, #1
 800155c:	e7e5      	b.n	800152a <__gedf2+0x52>
 800155e:	4663      	mov	r3, ip
 8001560:	2000      	movs	r0, #0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7db      	b.n	8001520 <__gedf2+0x48>
 8001568:	433a      	orrs	r2, r7
 800156a:	d1e6      	bne.n	800153a <__gedf2+0x62>
 800156c:	459a      	cmp	sl, r3
 800156e:	d1d7      	bne.n	8001520 <__gedf2+0x48>
 8001570:	42a5      	cmp	r5, r4
 8001572:	dcd5      	bgt.n	8001520 <__gedf2+0x48>
 8001574:	42a5      	cmp	r5, r4
 8001576:	db05      	blt.n	8001584 <__gedf2+0xac>
 8001578:	42be      	cmp	r6, r7
 800157a:	d8d1      	bhi.n	8001520 <__gedf2+0x48>
 800157c:	d008      	beq.n	8001590 <__gedf2+0xb8>
 800157e:	2000      	movs	r0, #0
 8001580:	42be      	cmp	r6, r7
 8001582:	d2d2      	bcs.n	800152a <__gedf2+0x52>
 8001584:	4650      	mov	r0, sl
 8001586:	2301      	movs	r3, #1
 8001588:	3801      	subs	r0, #1
 800158a:	4398      	bics	r0, r3
 800158c:	3001      	adds	r0, #1
 800158e:	e7cc      	b.n	800152a <__gedf2+0x52>
 8001590:	45c8      	cmp	r8, r9
 8001592:	d8c5      	bhi.n	8001520 <__gedf2+0x48>
 8001594:	2000      	movs	r0, #0
 8001596:	45c8      	cmp	r8, r9
 8001598:	d3f4      	bcc.n	8001584 <__gedf2+0xac>
 800159a:	e7c6      	b.n	800152a <__gedf2+0x52>
 800159c:	000007ff 	.word	0x000007ff

080015a0 <__ledf2>:
 80015a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a2:	464f      	mov	r7, r9
 80015a4:	4646      	mov	r6, r8
 80015a6:	46d6      	mov	lr, sl
 80015a8:	004d      	lsls	r5, r1, #1
 80015aa:	b5c0      	push	{r6, r7, lr}
 80015ac:	030e      	lsls	r6, r1, #12
 80015ae:	0fc9      	lsrs	r1, r1, #31
 80015b0:	468a      	mov	sl, r1
 80015b2:	492e      	ldr	r1, [pc, #184]	; (800166c <__ledf2+0xcc>)
 80015b4:	031f      	lsls	r7, r3, #12
 80015b6:	005c      	lsls	r4, r3, #1
 80015b8:	4680      	mov	r8, r0
 80015ba:	0b36      	lsrs	r6, r6, #12
 80015bc:	0d6d      	lsrs	r5, r5, #21
 80015be:	4691      	mov	r9, r2
 80015c0:	0b3f      	lsrs	r7, r7, #12
 80015c2:	0d64      	lsrs	r4, r4, #21
 80015c4:	0fdb      	lsrs	r3, r3, #31
 80015c6:	428d      	cmp	r5, r1
 80015c8:	d018      	beq.n	80015fc <__ledf2+0x5c>
 80015ca:	428c      	cmp	r4, r1
 80015cc:	d011      	beq.n	80015f2 <__ledf2+0x52>
 80015ce:	2d00      	cmp	r5, #0
 80015d0:	d118      	bne.n	8001604 <__ledf2+0x64>
 80015d2:	4330      	orrs	r0, r6
 80015d4:	4684      	mov	ip, r0
 80015d6:	2c00      	cmp	r4, #0
 80015d8:	d11e      	bne.n	8001618 <__ledf2+0x78>
 80015da:	433a      	orrs	r2, r7
 80015dc:	d11c      	bne.n	8001618 <__ledf2+0x78>
 80015de:	4663      	mov	r3, ip
 80015e0:	2000      	movs	r0, #0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d030      	beq.n	8001648 <__ledf2+0xa8>
 80015e6:	4651      	mov	r1, sl
 80015e8:	2002      	movs	r0, #2
 80015ea:	3901      	subs	r1, #1
 80015ec:	4008      	ands	r0, r1
 80015ee:	3801      	subs	r0, #1
 80015f0:	e02a      	b.n	8001648 <__ledf2+0xa8>
 80015f2:	0039      	movs	r1, r7
 80015f4:	4311      	orrs	r1, r2
 80015f6:	d0ea      	beq.n	80015ce <__ledf2+0x2e>
 80015f8:	2002      	movs	r0, #2
 80015fa:	e025      	b.n	8001648 <__ledf2+0xa8>
 80015fc:	4330      	orrs	r0, r6
 80015fe:	d1fb      	bne.n	80015f8 <__ledf2+0x58>
 8001600:	42ac      	cmp	r4, r5
 8001602:	d026      	beq.n	8001652 <__ledf2+0xb2>
 8001604:	2c00      	cmp	r4, #0
 8001606:	d126      	bne.n	8001656 <__ledf2+0xb6>
 8001608:	433a      	orrs	r2, r7
 800160a:	d124      	bne.n	8001656 <__ledf2+0xb6>
 800160c:	4651      	mov	r1, sl
 800160e:	2002      	movs	r0, #2
 8001610:	3901      	subs	r1, #1
 8001612:	4008      	ands	r0, r1
 8001614:	3801      	subs	r0, #1
 8001616:	e017      	b.n	8001648 <__ledf2+0xa8>
 8001618:	4662      	mov	r2, ip
 800161a:	2a00      	cmp	r2, #0
 800161c:	d00f      	beq.n	800163e <__ledf2+0x9e>
 800161e:	459a      	cmp	sl, r3
 8001620:	d1e1      	bne.n	80015e6 <__ledf2+0x46>
 8001622:	42a5      	cmp	r5, r4
 8001624:	db05      	blt.n	8001632 <__ledf2+0x92>
 8001626:	42be      	cmp	r6, r7
 8001628:	d8dd      	bhi.n	80015e6 <__ledf2+0x46>
 800162a:	d019      	beq.n	8001660 <__ledf2+0xc0>
 800162c:	2000      	movs	r0, #0
 800162e:	42be      	cmp	r6, r7
 8001630:	d20a      	bcs.n	8001648 <__ledf2+0xa8>
 8001632:	4650      	mov	r0, sl
 8001634:	2301      	movs	r3, #1
 8001636:	3801      	subs	r0, #1
 8001638:	4398      	bics	r0, r3
 800163a:	3001      	adds	r0, #1
 800163c:	e004      	b.n	8001648 <__ledf2+0xa8>
 800163e:	2201      	movs	r2, #1
 8001640:	3b01      	subs	r3, #1
 8001642:	4393      	bics	r3, r2
 8001644:	0018      	movs	r0, r3
 8001646:	3001      	adds	r0, #1
 8001648:	bc1c      	pop	{r2, r3, r4}
 800164a:	4690      	mov	r8, r2
 800164c:	4699      	mov	r9, r3
 800164e:	46a2      	mov	sl, r4
 8001650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001652:	433a      	orrs	r2, r7
 8001654:	d1d0      	bne.n	80015f8 <__ledf2+0x58>
 8001656:	459a      	cmp	sl, r3
 8001658:	d1c5      	bne.n	80015e6 <__ledf2+0x46>
 800165a:	42a5      	cmp	r5, r4
 800165c:	dcc3      	bgt.n	80015e6 <__ledf2+0x46>
 800165e:	e7e0      	b.n	8001622 <__ledf2+0x82>
 8001660:	45c8      	cmp	r8, r9
 8001662:	d8c0      	bhi.n	80015e6 <__ledf2+0x46>
 8001664:	2000      	movs	r0, #0
 8001666:	45c8      	cmp	r8, r9
 8001668:	d3e3      	bcc.n	8001632 <__ledf2+0x92>
 800166a:	e7ed      	b.n	8001648 <__ledf2+0xa8>
 800166c:	000007ff 	.word	0x000007ff

08001670 <__aeabi_dmul>:
 8001670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001672:	4657      	mov	r7, sl
 8001674:	46de      	mov	lr, fp
 8001676:	464e      	mov	r6, r9
 8001678:	4645      	mov	r5, r8
 800167a:	b5e0      	push	{r5, r6, r7, lr}
 800167c:	4683      	mov	fp, r0
 800167e:	0006      	movs	r6, r0
 8001680:	030f      	lsls	r7, r1, #12
 8001682:	0048      	lsls	r0, r1, #1
 8001684:	b087      	sub	sp, #28
 8001686:	4692      	mov	sl, r2
 8001688:	001d      	movs	r5, r3
 800168a:	0b3f      	lsrs	r7, r7, #12
 800168c:	0d40      	lsrs	r0, r0, #21
 800168e:	0fcc      	lsrs	r4, r1, #31
 8001690:	2800      	cmp	r0, #0
 8001692:	d100      	bne.n	8001696 <__aeabi_dmul+0x26>
 8001694:	e06f      	b.n	8001776 <__aeabi_dmul+0x106>
 8001696:	4bde      	ldr	r3, [pc, #888]	; (8001a10 <__aeabi_dmul+0x3a0>)
 8001698:	4298      	cmp	r0, r3
 800169a:	d038      	beq.n	800170e <__aeabi_dmul+0x9e>
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	00ff      	lsls	r7, r7, #3
 80016a0:	041b      	lsls	r3, r3, #16
 80016a2:	431f      	orrs	r7, r3
 80016a4:	0f73      	lsrs	r3, r6, #29
 80016a6:	433b      	orrs	r3, r7
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	4bda      	ldr	r3, [pc, #872]	; (8001a14 <__aeabi_dmul+0x3a4>)
 80016ac:	2700      	movs	r7, #0
 80016ae:	4699      	mov	r9, r3
 80016b0:	2300      	movs	r3, #0
 80016b2:	469b      	mov	fp, r3
 80016b4:	00f6      	lsls	r6, r6, #3
 80016b6:	4481      	add	r9, r0
 80016b8:	032b      	lsls	r3, r5, #12
 80016ba:	0069      	lsls	r1, r5, #1
 80016bc:	0b1b      	lsrs	r3, r3, #12
 80016be:	4652      	mov	r2, sl
 80016c0:	4698      	mov	r8, r3
 80016c2:	0d49      	lsrs	r1, r1, #21
 80016c4:	0fed      	lsrs	r5, r5, #31
 80016c6:	2900      	cmp	r1, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x5c>
 80016ca:	e085      	b.n	80017d8 <__aeabi_dmul+0x168>
 80016cc:	4bd0      	ldr	r3, [pc, #832]	; (8001a10 <__aeabi_dmul+0x3a0>)
 80016ce:	4299      	cmp	r1, r3
 80016d0:	d100      	bne.n	80016d4 <__aeabi_dmul+0x64>
 80016d2:	e073      	b.n	80017bc <__aeabi_dmul+0x14c>
 80016d4:	4643      	mov	r3, r8
 80016d6:	00da      	lsls	r2, r3, #3
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	041b      	lsls	r3, r3, #16
 80016dc:	4313      	orrs	r3, r2
 80016de:	4652      	mov	r2, sl
 80016e0:	48cc      	ldr	r0, [pc, #816]	; (8001a14 <__aeabi_dmul+0x3a4>)
 80016e2:	0f52      	lsrs	r2, r2, #29
 80016e4:	4684      	mov	ip, r0
 80016e6:	4313      	orrs	r3, r2
 80016e8:	4652      	mov	r2, sl
 80016ea:	2000      	movs	r0, #0
 80016ec:	4461      	add	r1, ip
 80016ee:	00d2      	lsls	r2, r2, #3
 80016f0:	4489      	add	r9, r1
 80016f2:	0021      	movs	r1, r4
 80016f4:	4069      	eors	r1, r5
 80016f6:	9100      	str	r1, [sp, #0]
 80016f8:	468c      	mov	ip, r1
 80016fa:	2101      	movs	r1, #1
 80016fc:	4449      	add	r1, r9
 80016fe:	468a      	mov	sl, r1
 8001700:	2f0f      	cmp	r7, #15
 8001702:	d900      	bls.n	8001706 <__aeabi_dmul+0x96>
 8001704:	e090      	b.n	8001828 <__aeabi_dmul+0x1b8>
 8001706:	49c4      	ldr	r1, [pc, #784]	; (8001a18 <__aeabi_dmul+0x3a8>)
 8001708:	00bf      	lsls	r7, r7, #2
 800170a:	59cf      	ldr	r7, [r1, r7]
 800170c:	46bf      	mov	pc, r7
 800170e:	465b      	mov	r3, fp
 8001710:	433b      	orrs	r3, r7
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	d000      	beq.n	8001718 <__aeabi_dmul+0xa8>
 8001716:	e16a      	b.n	80019ee <__aeabi_dmul+0x37e>
 8001718:	2302      	movs	r3, #2
 800171a:	2708      	movs	r7, #8
 800171c:	2600      	movs	r6, #0
 800171e:	4681      	mov	r9, r0
 8001720:	469b      	mov	fp, r3
 8001722:	e7c9      	b.n	80016b8 <__aeabi_dmul+0x48>
 8001724:	0032      	movs	r2, r6
 8001726:	4658      	mov	r0, fp
 8001728:	9b01      	ldr	r3, [sp, #4]
 800172a:	4661      	mov	r1, ip
 800172c:	9100      	str	r1, [sp, #0]
 800172e:	2802      	cmp	r0, #2
 8001730:	d100      	bne.n	8001734 <__aeabi_dmul+0xc4>
 8001732:	e075      	b.n	8001820 <__aeabi_dmul+0x1b0>
 8001734:	2803      	cmp	r0, #3
 8001736:	d100      	bne.n	800173a <__aeabi_dmul+0xca>
 8001738:	e1fe      	b.n	8001b38 <__aeabi_dmul+0x4c8>
 800173a:	2801      	cmp	r0, #1
 800173c:	d000      	beq.n	8001740 <__aeabi_dmul+0xd0>
 800173e:	e12c      	b.n	800199a <__aeabi_dmul+0x32a>
 8001740:	2300      	movs	r3, #0
 8001742:	2700      	movs	r7, #0
 8001744:	2600      	movs	r6, #0
 8001746:	2500      	movs	r5, #0
 8001748:	033f      	lsls	r7, r7, #12
 800174a:	0d2a      	lsrs	r2, r5, #20
 800174c:	0b3f      	lsrs	r7, r7, #12
 800174e:	48b3      	ldr	r0, [pc, #716]	; (8001a1c <__aeabi_dmul+0x3ac>)
 8001750:	0512      	lsls	r2, r2, #20
 8001752:	433a      	orrs	r2, r7
 8001754:	4002      	ands	r2, r0
 8001756:	051b      	lsls	r3, r3, #20
 8001758:	4313      	orrs	r3, r2
 800175a:	9a00      	ldr	r2, [sp, #0]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	07d1      	lsls	r1, r2, #31
 8001760:	085b      	lsrs	r3, r3, #1
 8001762:	430b      	orrs	r3, r1
 8001764:	0030      	movs	r0, r6
 8001766:	0019      	movs	r1, r3
 8001768:	b007      	add	sp, #28
 800176a:	bc3c      	pop	{r2, r3, r4, r5}
 800176c:	4690      	mov	r8, r2
 800176e:	4699      	mov	r9, r3
 8001770:	46a2      	mov	sl, r4
 8001772:	46ab      	mov	fp, r5
 8001774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001776:	465b      	mov	r3, fp
 8001778:	433b      	orrs	r3, r7
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	d100      	bne.n	8001780 <__aeabi_dmul+0x110>
 800177e:	e12f      	b.n	80019e0 <__aeabi_dmul+0x370>
 8001780:	2f00      	cmp	r7, #0
 8001782:	d100      	bne.n	8001786 <__aeabi_dmul+0x116>
 8001784:	e1a5      	b.n	8001ad2 <__aeabi_dmul+0x462>
 8001786:	0038      	movs	r0, r7
 8001788:	f000 fe52 	bl	8002430 <__clzsi2>
 800178c:	0003      	movs	r3, r0
 800178e:	3b0b      	subs	r3, #11
 8001790:	2b1c      	cmp	r3, #28
 8001792:	dd00      	ble.n	8001796 <__aeabi_dmul+0x126>
 8001794:	e196      	b.n	8001ac4 <__aeabi_dmul+0x454>
 8001796:	221d      	movs	r2, #29
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	465a      	mov	r2, fp
 800179c:	0001      	movs	r1, r0
 800179e:	40da      	lsrs	r2, r3
 80017a0:	465e      	mov	r6, fp
 80017a2:	3908      	subs	r1, #8
 80017a4:	408f      	lsls	r7, r1
 80017a6:	0013      	movs	r3, r2
 80017a8:	408e      	lsls	r6, r1
 80017aa:	433b      	orrs	r3, r7
 80017ac:	9301      	str	r3, [sp, #4]
 80017ae:	4b9c      	ldr	r3, [pc, #624]	; (8001a20 <__aeabi_dmul+0x3b0>)
 80017b0:	2700      	movs	r7, #0
 80017b2:	1a1b      	subs	r3, r3, r0
 80017b4:	4699      	mov	r9, r3
 80017b6:	2300      	movs	r3, #0
 80017b8:	469b      	mov	fp, r3
 80017ba:	e77d      	b.n	80016b8 <__aeabi_dmul+0x48>
 80017bc:	4641      	mov	r1, r8
 80017be:	4653      	mov	r3, sl
 80017c0:	430b      	orrs	r3, r1
 80017c2:	4993      	ldr	r1, [pc, #588]	; (8001a10 <__aeabi_dmul+0x3a0>)
 80017c4:	468c      	mov	ip, r1
 80017c6:	44e1      	add	r9, ip
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d000      	beq.n	80017ce <__aeabi_dmul+0x15e>
 80017cc:	e11a      	b.n	8001a04 <__aeabi_dmul+0x394>
 80017ce:	2202      	movs	r2, #2
 80017d0:	2002      	movs	r0, #2
 80017d2:	4317      	orrs	r7, r2
 80017d4:	2200      	movs	r2, #0
 80017d6:	e78c      	b.n	80016f2 <__aeabi_dmul+0x82>
 80017d8:	4313      	orrs	r3, r2
 80017da:	d100      	bne.n	80017de <__aeabi_dmul+0x16e>
 80017dc:	e10d      	b.n	80019fa <__aeabi_dmul+0x38a>
 80017de:	4643      	mov	r3, r8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d100      	bne.n	80017e6 <__aeabi_dmul+0x176>
 80017e4:	e181      	b.n	8001aea <__aeabi_dmul+0x47a>
 80017e6:	4640      	mov	r0, r8
 80017e8:	f000 fe22 	bl	8002430 <__clzsi2>
 80017ec:	0002      	movs	r2, r0
 80017ee:	3a0b      	subs	r2, #11
 80017f0:	2a1c      	cmp	r2, #28
 80017f2:	dd00      	ble.n	80017f6 <__aeabi_dmul+0x186>
 80017f4:	e172      	b.n	8001adc <__aeabi_dmul+0x46c>
 80017f6:	0001      	movs	r1, r0
 80017f8:	4643      	mov	r3, r8
 80017fa:	3908      	subs	r1, #8
 80017fc:	408b      	lsls	r3, r1
 80017fe:	4698      	mov	r8, r3
 8001800:	231d      	movs	r3, #29
 8001802:	1a9a      	subs	r2, r3, r2
 8001804:	4653      	mov	r3, sl
 8001806:	40d3      	lsrs	r3, r2
 8001808:	001a      	movs	r2, r3
 800180a:	4643      	mov	r3, r8
 800180c:	4313      	orrs	r3, r2
 800180e:	4652      	mov	r2, sl
 8001810:	408a      	lsls	r2, r1
 8001812:	4649      	mov	r1, r9
 8001814:	1a08      	subs	r0, r1, r0
 8001816:	4982      	ldr	r1, [pc, #520]	; (8001a20 <__aeabi_dmul+0x3b0>)
 8001818:	4689      	mov	r9, r1
 800181a:	4481      	add	r9, r0
 800181c:	2000      	movs	r0, #0
 800181e:	e768      	b.n	80016f2 <__aeabi_dmul+0x82>
 8001820:	4b7b      	ldr	r3, [pc, #492]	; (8001a10 <__aeabi_dmul+0x3a0>)
 8001822:	2700      	movs	r7, #0
 8001824:	2600      	movs	r6, #0
 8001826:	e78e      	b.n	8001746 <__aeabi_dmul+0xd6>
 8001828:	0c14      	lsrs	r4, r2, #16
 800182a:	0412      	lsls	r2, r2, #16
 800182c:	0c12      	lsrs	r2, r2, #16
 800182e:	0011      	movs	r1, r2
 8001830:	0c37      	lsrs	r7, r6, #16
 8001832:	0436      	lsls	r6, r6, #16
 8001834:	0c35      	lsrs	r5, r6, #16
 8001836:	4379      	muls	r1, r7
 8001838:	0028      	movs	r0, r5
 800183a:	468c      	mov	ip, r1
 800183c:	002e      	movs	r6, r5
 800183e:	4360      	muls	r0, r4
 8001840:	4460      	add	r0, ip
 8001842:	4683      	mov	fp, r0
 8001844:	4356      	muls	r6, r2
 8001846:	0021      	movs	r1, r4
 8001848:	0c30      	lsrs	r0, r6, #16
 800184a:	4680      	mov	r8, r0
 800184c:	4658      	mov	r0, fp
 800184e:	4379      	muls	r1, r7
 8001850:	4440      	add	r0, r8
 8001852:	9102      	str	r1, [sp, #8]
 8001854:	4584      	cmp	ip, r0
 8001856:	d906      	bls.n	8001866 <__aeabi_dmul+0x1f6>
 8001858:	4688      	mov	r8, r1
 800185a:	2180      	movs	r1, #128	; 0x80
 800185c:	0249      	lsls	r1, r1, #9
 800185e:	468c      	mov	ip, r1
 8001860:	44e0      	add	r8, ip
 8001862:	4641      	mov	r1, r8
 8001864:	9102      	str	r1, [sp, #8]
 8001866:	0436      	lsls	r6, r6, #16
 8001868:	0c01      	lsrs	r1, r0, #16
 800186a:	0c36      	lsrs	r6, r6, #16
 800186c:	0400      	lsls	r0, r0, #16
 800186e:	468b      	mov	fp, r1
 8001870:	1981      	adds	r1, r0, r6
 8001872:	0c1e      	lsrs	r6, r3, #16
 8001874:	041b      	lsls	r3, r3, #16
 8001876:	0c1b      	lsrs	r3, r3, #16
 8001878:	9103      	str	r1, [sp, #12]
 800187a:	0019      	movs	r1, r3
 800187c:	4379      	muls	r1, r7
 800187e:	468c      	mov	ip, r1
 8001880:	0028      	movs	r0, r5
 8001882:	4375      	muls	r5, r6
 8001884:	4465      	add	r5, ip
 8001886:	46a8      	mov	r8, r5
 8001888:	4358      	muls	r0, r3
 800188a:	0c05      	lsrs	r5, r0, #16
 800188c:	4445      	add	r5, r8
 800188e:	4377      	muls	r7, r6
 8001890:	42a9      	cmp	r1, r5
 8001892:	d903      	bls.n	800189c <__aeabi_dmul+0x22c>
 8001894:	2180      	movs	r1, #128	; 0x80
 8001896:	0249      	lsls	r1, r1, #9
 8001898:	468c      	mov	ip, r1
 800189a:	4467      	add	r7, ip
 800189c:	0c29      	lsrs	r1, r5, #16
 800189e:	468c      	mov	ip, r1
 80018a0:	0039      	movs	r1, r7
 80018a2:	0400      	lsls	r0, r0, #16
 80018a4:	0c00      	lsrs	r0, r0, #16
 80018a6:	042d      	lsls	r5, r5, #16
 80018a8:	182d      	adds	r5, r5, r0
 80018aa:	4461      	add	r1, ip
 80018ac:	44ab      	add	fp, r5
 80018ae:	9105      	str	r1, [sp, #20]
 80018b0:	4659      	mov	r1, fp
 80018b2:	9104      	str	r1, [sp, #16]
 80018b4:	9901      	ldr	r1, [sp, #4]
 80018b6:	040f      	lsls	r7, r1, #16
 80018b8:	0c3f      	lsrs	r7, r7, #16
 80018ba:	0c08      	lsrs	r0, r1, #16
 80018bc:	0039      	movs	r1, r7
 80018be:	4351      	muls	r1, r2
 80018c0:	4342      	muls	r2, r0
 80018c2:	4690      	mov	r8, r2
 80018c4:	0002      	movs	r2, r0
 80018c6:	468c      	mov	ip, r1
 80018c8:	0c09      	lsrs	r1, r1, #16
 80018ca:	468b      	mov	fp, r1
 80018cc:	4362      	muls	r2, r4
 80018ce:	437c      	muls	r4, r7
 80018d0:	4444      	add	r4, r8
 80018d2:	445c      	add	r4, fp
 80018d4:	45a0      	cmp	r8, r4
 80018d6:	d903      	bls.n	80018e0 <__aeabi_dmul+0x270>
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	0249      	lsls	r1, r1, #9
 80018dc:	4688      	mov	r8, r1
 80018de:	4442      	add	r2, r8
 80018e0:	0c21      	lsrs	r1, r4, #16
 80018e2:	4688      	mov	r8, r1
 80018e4:	4661      	mov	r1, ip
 80018e6:	0409      	lsls	r1, r1, #16
 80018e8:	0c09      	lsrs	r1, r1, #16
 80018ea:	468c      	mov	ip, r1
 80018ec:	0039      	movs	r1, r7
 80018ee:	4359      	muls	r1, r3
 80018f0:	4343      	muls	r3, r0
 80018f2:	4370      	muls	r0, r6
 80018f4:	437e      	muls	r6, r7
 80018f6:	0c0f      	lsrs	r7, r1, #16
 80018f8:	18f6      	adds	r6, r6, r3
 80018fa:	0424      	lsls	r4, r4, #16
 80018fc:	19be      	adds	r6, r7, r6
 80018fe:	4464      	add	r4, ip
 8001900:	4442      	add	r2, r8
 8001902:	468c      	mov	ip, r1
 8001904:	42b3      	cmp	r3, r6
 8001906:	d903      	bls.n	8001910 <__aeabi_dmul+0x2a0>
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	025b      	lsls	r3, r3, #9
 800190c:	4698      	mov	r8, r3
 800190e:	4440      	add	r0, r8
 8001910:	9b02      	ldr	r3, [sp, #8]
 8001912:	4661      	mov	r1, ip
 8001914:	4698      	mov	r8, r3
 8001916:	9b04      	ldr	r3, [sp, #16]
 8001918:	0437      	lsls	r7, r6, #16
 800191a:	4443      	add	r3, r8
 800191c:	469b      	mov	fp, r3
 800191e:	45ab      	cmp	fp, r5
 8001920:	41ad      	sbcs	r5, r5
 8001922:	426b      	negs	r3, r5
 8001924:	040d      	lsls	r5, r1, #16
 8001926:	9905      	ldr	r1, [sp, #20]
 8001928:	0c2d      	lsrs	r5, r5, #16
 800192a:	468c      	mov	ip, r1
 800192c:	197f      	adds	r7, r7, r5
 800192e:	4467      	add	r7, ip
 8001930:	18fd      	adds	r5, r7, r3
 8001932:	46a8      	mov	r8, r5
 8001934:	465d      	mov	r5, fp
 8001936:	192d      	adds	r5, r5, r4
 8001938:	42a5      	cmp	r5, r4
 800193a:	41a4      	sbcs	r4, r4
 800193c:	4693      	mov	fp, r2
 800193e:	4264      	negs	r4, r4
 8001940:	46a4      	mov	ip, r4
 8001942:	44c3      	add	fp, r8
 8001944:	44dc      	add	ip, fp
 8001946:	428f      	cmp	r7, r1
 8001948:	41bf      	sbcs	r7, r7
 800194a:	4598      	cmp	r8, r3
 800194c:	419b      	sbcs	r3, r3
 800194e:	4593      	cmp	fp, r2
 8001950:	4192      	sbcs	r2, r2
 8001952:	45a4      	cmp	ip, r4
 8001954:	41a4      	sbcs	r4, r4
 8001956:	425b      	negs	r3, r3
 8001958:	427f      	negs	r7, r7
 800195a:	431f      	orrs	r7, r3
 800195c:	0c36      	lsrs	r6, r6, #16
 800195e:	4252      	negs	r2, r2
 8001960:	4264      	negs	r4, r4
 8001962:	19bf      	adds	r7, r7, r6
 8001964:	4322      	orrs	r2, r4
 8001966:	18bf      	adds	r7, r7, r2
 8001968:	4662      	mov	r2, ip
 800196a:	1838      	adds	r0, r7, r0
 800196c:	0243      	lsls	r3, r0, #9
 800196e:	0dd2      	lsrs	r2, r2, #23
 8001970:	9903      	ldr	r1, [sp, #12]
 8001972:	4313      	orrs	r3, r2
 8001974:	026a      	lsls	r2, r5, #9
 8001976:	430a      	orrs	r2, r1
 8001978:	1e50      	subs	r0, r2, #1
 800197a:	4182      	sbcs	r2, r0
 800197c:	4661      	mov	r1, ip
 800197e:	0ded      	lsrs	r5, r5, #23
 8001980:	432a      	orrs	r2, r5
 8001982:	024e      	lsls	r6, r1, #9
 8001984:	4332      	orrs	r2, r6
 8001986:	01d9      	lsls	r1, r3, #7
 8001988:	d400      	bmi.n	800198c <__aeabi_dmul+0x31c>
 800198a:	e0b3      	b.n	8001af4 <__aeabi_dmul+0x484>
 800198c:	2601      	movs	r6, #1
 800198e:	0850      	lsrs	r0, r2, #1
 8001990:	4032      	ands	r2, r6
 8001992:	4302      	orrs	r2, r0
 8001994:	07de      	lsls	r6, r3, #31
 8001996:	4332      	orrs	r2, r6
 8001998:	085b      	lsrs	r3, r3, #1
 800199a:	4c22      	ldr	r4, [pc, #136]	; (8001a24 <__aeabi_dmul+0x3b4>)
 800199c:	4454      	add	r4, sl
 800199e:	2c00      	cmp	r4, #0
 80019a0:	dd62      	ble.n	8001a68 <__aeabi_dmul+0x3f8>
 80019a2:	0751      	lsls	r1, r2, #29
 80019a4:	d009      	beq.n	80019ba <__aeabi_dmul+0x34a>
 80019a6:	200f      	movs	r0, #15
 80019a8:	4010      	ands	r0, r2
 80019aa:	2804      	cmp	r0, #4
 80019ac:	d005      	beq.n	80019ba <__aeabi_dmul+0x34a>
 80019ae:	1d10      	adds	r0, r2, #4
 80019b0:	4290      	cmp	r0, r2
 80019b2:	4192      	sbcs	r2, r2
 80019b4:	4252      	negs	r2, r2
 80019b6:	189b      	adds	r3, r3, r2
 80019b8:	0002      	movs	r2, r0
 80019ba:	01d9      	lsls	r1, r3, #7
 80019bc:	d504      	bpl.n	80019c8 <__aeabi_dmul+0x358>
 80019be:	2480      	movs	r4, #128	; 0x80
 80019c0:	4819      	ldr	r0, [pc, #100]	; (8001a28 <__aeabi_dmul+0x3b8>)
 80019c2:	00e4      	lsls	r4, r4, #3
 80019c4:	4003      	ands	r3, r0
 80019c6:	4454      	add	r4, sl
 80019c8:	4818      	ldr	r0, [pc, #96]	; (8001a2c <__aeabi_dmul+0x3bc>)
 80019ca:	4284      	cmp	r4, r0
 80019cc:	dd00      	ble.n	80019d0 <__aeabi_dmul+0x360>
 80019ce:	e727      	b.n	8001820 <__aeabi_dmul+0x1b0>
 80019d0:	075e      	lsls	r6, r3, #29
 80019d2:	025b      	lsls	r3, r3, #9
 80019d4:	08d2      	lsrs	r2, r2, #3
 80019d6:	0b1f      	lsrs	r7, r3, #12
 80019d8:	0563      	lsls	r3, r4, #21
 80019da:	4316      	orrs	r6, r2
 80019dc:	0d5b      	lsrs	r3, r3, #21
 80019de:	e6b2      	b.n	8001746 <__aeabi_dmul+0xd6>
 80019e0:	2300      	movs	r3, #0
 80019e2:	4699      	mov	r9, r3
 80019e4:	3301      	adds	r3, #1
 80019e6:	2704      	movs	r7, #4
 80019e8:	2600      	movs	r6, #0
 80019ea:	469b      	mov	fp, r3
 80019ec:	e664      	b.n	80016b8 <__aeabi_dmul+0x48>
 80019ee:	2303      	movs	r3, #3
 80019f0:	9701      	str	r7, [sp, #4]
 80019f2:	4681      	mov	r9, r0
 80019f4:	270c      	movs	r7, #12
 80019f6:	469b      	mov	fp, r3
 80019f8:	e65e      	b.n	80016b8 <__aeabi_dmul+0x48>
 80019fa:	2201      	movs	r2, #1
 80019fc:	2001      	movs	r0, #1
 80019fe:	4317      	orrs	r7, r2
 8001a00:	2200      	movs	r2, #0
 8001a02:	e676      	b.n	80016f2 <__aeabi_dmul+0x82>
 8001a04:	2303      	movs	r3, #3
 8001a06:	2003      	movs	r0, #3
 8001a08:	431f      	orrs	r7, r3
 8001a0a:	4643      	mov	r3, r8
 8001a0c:	e671      	b.n	80016f2 <__aeabi_dmul+0x82>
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	000007ff 	.word	0x000007ff
 8001a14:	fffffc01 	.word	0xfffffc01
 8001a18:	0800a478 	.word	0x0800a478
 8001a1c:	800fffff 	.word	0x800fffff
 8001a20:	fffffc0d 	.word	0xfffffc0d
 8001a24:	000003ff 	.word	0x000003ff
 8001a28:	feffffff 	.word	0xfeffffff
 8001a2c:	000007fe 	.word	0x000007fe
 8001a30:	2300      	movs	r3, #0
 8001a32:	2780      	movs	r7, #128	; 0x80
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	033f      	lsls	r7, r7, #12
 8001a38:	2600      	movs	r6, #0
 8001a3a:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <__aeabi_dmul+0x4d8>)
 8001a3c:	e683      	b.n	8001746 <__aeabi_dmul+0xd6>
 8001a3e:	9b01      	ldr	r3, [sp, #4]
 8001a40:	0032      	movs	r2, r6
 8001a42:	46a4      	mov	ip, r4
 8001a44:	4658      	mov	r0, fp
 8001a46:	e670      	b.n	800172a <__aeabi_dmul+0xba>
 8001a48:	46ac      	mov	ip, r5
 8001a4a:	e66e      	b.n	800172a <__aeabi_dmul+0xba>
 8001a4c:	2780      	movs	r7, #128	; 0x80
 8001a4e:	9901      	ldr	r1, [sp, #4]
 8001a50:	033f      	lsls	r7, r7, #12
 8001a52:	4239      	tst	r1, r7
 8001a54:	d02d      	beq.n	8001ab2 <__aeabi_dmul+0x442>
 8001a56:	423b      	tst	r3, r7
 8001a58:	d12b      	bne.n	8001ab2 <__aeabi_dmul+0x442>
 8001a5a:	431f      	orrs	r7, r3
 8001a5c:	033f      	lsls	r7, r7, #12
 8001a5e:	0b3f      	lsrs	r7, r7, #12
 8001a60:	9500      	str	r5, [sp, #0]
 8001a62:	0016      	movs	r6, r2
 8001a64:	4b38      	ldr	r3, [pc, #224]	; (8001b48 <__aeabi_dmul+0x4d8>)
 8001a66:	e66e      	b.n	8001746 <__aeabi_dmul+0xd6>
 8001a68:	2501      	movs	r5, #1
 8001a6a:	1b2d      	subs	r5, r5, r4
 8001a6c:	2d38      	cmp	r5, #56	; 0x38
 8001a6e:	dd00      	ble.n	8001a72 <__aeabi_dmul+0x402>
 8001a70:	e666      	b.n	8001740 <__aeabi_dmul+0xd0>
 8001a72:	2d1f      	cmp	r5, #31
 8001a74:	dc40      	bgt.n	8001af8 <__aeabi_dmul+0x488>
 8001a76:	4835      	ldr	r0, [pc, #212]	; (8001b4c <__aeabi_dmul+0x4dc>)
 8001a78:	001c      	movs	r4, r3
 8001a7a:	4450      	add	r0, sl
 8001a7c:	0016      	movs	r6, r2
 8001a7e:	4082      	lsls	r2, r0
 8001a80:	4084      	lsls	r4, r0
 8001a82:	40ee      	lsrs	r6, r5
 8001a84:	1e50      	subs	r0, r2, #1
 8001a86:	4182      	sbcs	r2, r0
 8001a88:	4334      	orrs	r4, r6
 8001a8a:	4314      	orrs	r4, r2
 8001a8c:	40eb      	lsrs	r3, r5
 8001a8e:	0762      	lsls	r2, r4, #29
 8001a90:	d009      	beq.n	8001aa6 <__aeabi_dmul+0x436>
 8001a92:	220f      	movs	r2, #15
 8001a94:	4022      	ands	r2, r4
 8001a96:	2a04      	cmp	r2, #4
 8001a98:	d005      	beq.n	8001aa6 <__aeabi_dmul+0x436>
 8001a9a:	0022      	movs	r2, r4
 8001a9c:	1d14      	adds	r4, r2, #4
 8001a9e:	4294      	cmp	r4, r2
 8001aa0:	4180      	sbcs	r0, r0
 8001aa2:	4240      	negs	r0, r0
 8001aa4:	181b      	adds	r3, r3, r0
 8001aa6:	021a      	lsls	r2, r3, #8
 8001aa8:	d53e      	bpl.n	8001b28 <__aeabi_dmul+0x4b8>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	2700      	movs	r7, #0
 8001aae:	2600      	movs	r6, #0
 8001ab0:	e649      	b.n	8001746 <__aeabi_dmul+0xd6>
 8001ab2:	2780      	movs	r7, #128	; 0x80
 8001ab4:	9b01      	ldr	r3, [sp, #4]
 8001ab6:	033f      	lsls	r7, r7, #12
 8001ab8:	431f      	orrs	r7, r3
 8001aba:	033f      	lsls	r7, r7, #12
 8001abc:	0b3f      	lsrs	r7, r7, #12
 8001abe:	9400      	str	r4, [sp, #0]
 8001ac0:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <__aeabi_dmul+0x4d8>)
 8001ac2:	e640      	b.n	8001746 <__aeabi_dmul+0xd6>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	465a      	mov	r2, fp
 8001ac8:	3b28      	subs	r3, #40	; 0x28
 8001aca:	409a      	lsls	r2, r3
 8001acc:	2600      	movs	r6, #0
 8001ace:	9201      	str	r2, [sp, #4]
 8001ad0:	e66d      	b.n	80017ae <__aeabi_dmul+0x13e>
 8001ad2:	4658      	mov	r0, fp
 8001ad4:	f000 fcac 	bl	8002430 <__clzsi2>
 8001ad8:	3020      	adds	r0, #32
 8001ada:	e657      	b.n	800178c <__aeabi_dmul+0x11c>
 8001adc:	0003      	movs	r3, r0
 8001ade:	4652      	mov	r2, sl
 8001ae0:	3b28      	subs	r3, #40	; 0x28
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	0013      	movs	r3, r2
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	e693      	b.n	8001812 <__aeabi_dmul+0x1a2>
 8001aea:	4650      	mov	r0, sl
 8001aec:	f000 fca0 	bl	8002430 <__clzsi2>
 8001af0:	3020      	adds	r0, #32
 8001af2:	e67b      	b.n	80017ec <__aeabi_dmul+0x17c>
 8001af4:	46ca      	mov	sl, r9
 8001af6:	e750      	b.n	800199a <__aeabi_dmul+0x32a>
 8001af8:	201f      	movs	r0, #31
 8001afa:	001e      	movs	r6, r3
 8001afc:	4240      	negs	r0, r0
 8001afe:	1b04      	subs	r4, r0, r4
 8001b00:	40e6      	lsrs	r6, r4
 8001b02:	2d20      	cmp	r5, #32
 8001b04:	d003      	beq.n	8001b0e <__aeabi_dmul+0x49e>
 8001b06:	4c12      	ldr	r4, [pc, #72]	; (8001b50 <__aeabi_dmul+0x4e0>)
 8001b08:	4454      	add	r4, sl
 8001b0a:	40a3      	lsls	r3, r4
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	1e50      	subs	r0, r2, #1
 8001b10:	4182      	sbcs	r2, r0
 8001b12:	4332      	orrs	r2, r6
 8001b14:	2607      	movs	r6, #7
 8001b16:	2700      	movs	r7, #0
 8001b18:	4016      	ands	r6, r2
 8001b1a:	d009      	beq.n	8001b30 <__aeabi_dmul+0x4c0>
 8001b1c:	200f      	movs	r0, #15
 8001b1e:	2300      	movs	r3, #0
 8001b20:	4010      	ands	r0, r2
 8001b22:	0014      	movs	r4, r2
 8001b24:	2804      	cmp	r0, #4
 8001b26:	d1b9      	bne.n	8001a9c <__aeabi_dmul+0x42c>
 8001b28:	0022      	movs	r2, r4
 8001b2a:	075e      	lsls	r6, r3, #29
 8001b2c:	025b      	lsls	r3, r3, #9
 8001b2e:	0b1f      	lsrs	r7, r3, #12
 8001b30:	08d2      	lsrs	r2, r2, #3
 8001b32:	4316      	orrs	r6, r2
 8001b34:	2300      	movs	r3, #0
 8001b36:	e606      	b.n	8001746 <__aeabi_dmul+0xd6>
 8001b38:	2780      	movs	r7, #128	; 0x80
 8001b3a:	033f      	lsls	r7, r7, #12
 8001b3c:	431f      	orrs	r7, r3
 8001b3e:	033f      	lsls	r7, r7, #12
 8001b40:	0b3f      	lsrs	r7, r7, #12
 8001b42:	0016      	movs	r6, r2
 8001b44:	4b00      	ldr	r3, [pc, #0]	; (8001b48 <__aeabi_dmul+0x4d8>)
 8001b46:	e5fe      	b.n	8001746 <__aeabi_dmul+0xd6>
 8001b48:	000007ff 	.word	0x000007ff
 8001b4c:	0000041e 	.word	0x0000041e
 8001b50:	0000043e 	.word	0x0000043e

08001b54 <__aeabi_dsub>:
 8001b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b56:	4657      	mov	r7, sl
 8001b58:	464e      	mov	r6, r9
 8001b5a:	4645      	mov	r5, r8
 8001b5c:	46de      	mov	lr, fp
 8001b5e:	000c      	movs	r4, r1
 8001b60:	0309      	lsls	r1, r1, #12
 8001b62:	b5e0      	push	{r5, r6, r7, lr}
 8001b64:	0a49      	lsrs	r1, r1, #9
 8001b66:	0f46      	lsrs	r6, r0, #29
 8001b68:	005f      	lsls	r7, r3, #1
 8001b6a:	4331      	orrs	r1, r6
 8001b6c:	031e      	lsls	r6, r3, #12
 8001b6e:	0fdb      	lsrs	r3, r3, #31
 8001b70:	0a76      	lsrs	r6, r6, #9
 8001b72:	469b      	mov	fp, r3
 8001b74:	0f53      	lsrs	r3, r2, #29
 8001b76:	4333      	orrs	r3, r6
 8001b78:	4ec8      	ldr	r6, [pc, #800]	; (8001e9c <__aeabi_dsub+0x348>)
 8001b7a:	0065      	lsls	r5, r4, #1
 8001b7c:	00c0      	lsls	r0, r0, #3
 8001b7e:	0fe4      	lsrs	r4, r4, #31
 8001b80:	00d2      	lsls	r2, r2, #3
 8001b82:	0d6d      	lsrs	r5, r5, #21
 8001b84:	46a2      	mov	sl, r4
 8001b86:	4681      	mov	r9, r0
 8001b88:	0d7f      	lsrs	r7, r7, #21
 8001b8a:	469c      	mov	ip, r3
 8001b8c:	4690      	mov	r8, r2
 8001b8e:	42b7      	cmp	r7, r6
 8001b90:	d100      	bne.n	8001b94 <__aeabi_dsub+0x40>
 8001b92:	e0b9      	b.n	8001d08 <__aeabi_dsub+0x1b4>
 8001b94:	465b      	mov	r3, fp
 8001b96:	2601      	movs	r6, #1
 8001b98:	4073      	eors	r3, r6
 8001b9a:	469b      	mov	fp, r3
 8001b9c:	1bee      	subs	r6, r5, r7
 8001b9e:	45a3      	cmp	fp, r4
 8001ba0:	d100      	bne.n	8001ba4 <__aeabi_dsub+0x50>
 8001ba2:	e083      	b.n	8001cac <__aeabi_dsub+0x158>
 8001ba4:	2e00      	cmp	r6, #0
 8001ba6:	dd63      	ble.n	8001c70 <__aeabi_dsub+0x11c>
 8001ba8:	2f00      	cmp	r7, #0
 8001baa:	d000      	beq.n	8001bae <__aeabi_dsub+0x5a>
 8001bac:	e0b1      	b.n	8001d12 <__aeabi_dsub+0x1be>
 8001bae:	4663      	mov	r3, ip
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	d100      	bne.n	8001bb6 <__aeabi_dsub+0x62>
 8001bb4:	e123      	b.n	8001dfe <__aeabi_dsub+0x2aa>
 8001bb6:	1e73      	subs	r3, r6, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d000      	beq.n	8001bbe <__aeabi_dsub+0x6a>
 8001bbc:	e1ba      	b.n	8001f34 <__aeabi_dsub+0x3e0>
 8001bbe:	1a86      	subs	r6, r0, r2
 8001bc0:	4663      	mov	r3, ip
 8001bc2:	42b0      	cmp	r0, r6
 8001bc4:	4180      	sbcs	r0, r0
 8001bc6:	2501      	movs	r5, #1
 8001bc8:	1ac9      	subs	r1, r1, r3
 8001bca:	4240      	negs	r0, r0
 8001bcc:	1a09      	subs	r1, r1, r0
 8001bce:	020b      	lsls	r3, r1, #8
 8001bd0:	d400      	bmi.n	8001bd4 <__aeabi_dsub+0x80>
 8001bd2:	e147      	b.n	8001e64 <__aeabi_dsub+0x310>
 8001bd4:	0249      	lsls	r1, r1, #9
 8001bd6:	0a4b      	lsrs	r3, r1, #9
 8001bd8:	4698      	mov	r8, r3
 8001bda:	4643      	mov	r3, r8
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d100      	bne.n	8001be2 <__aeabi_dsub+0x8e>
 8001be0:	e189      	b.n	8001ef6 <__aeabi_dsub+0x3a2>
 8001be2:	4640      	mov	r0, r8
 8001be4:	f000 fc24 	bl	8002430 <__clzsi2>
 8001be8:	0003      	movs	r3, r0
 8001bea:	3b08      	subs	r3, #8
 8001bec:	2b1f      	cmp	r3, #31
 8001bee:	dd00      	ble.n	8001bf2 <__aeabi_dsub+0x9e>
 8001bf0:	e17c      	b.n	8001eec <__aeabi_dsub+0x398>
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	0030      	movs	r0, r6
 8001bf6:	1ad2      	subs	r2, r2, r3
 8001bf8:	4641      	mov	r1, r8
 8001bfa:	40d0      	lsrs	r0, r2
 8001bfc:	4099      	lsls	r1, r3
 8001bfe:	0002      	movs	r2, r0
 8001c00:	409e      	lsls	r6, r3
 8001c02:	430a      	orrs	r2, r1
 8001c04:	429d      	cmp	r5, r3
 8001c06:	dd00      	ble.n	8001c0a <__aeabi_dsub+0xb6>
 8001c08:	e16a      	b.n	8001ee0 <__aeabi_dsub+0x38c>
 8001c0a:	1b5d      	subs	r5, r3, r5
 8001c0c:	1c6b      	adds	r3, r5, #1
 8001c0e:	2b1f      	cmp	r3, #31
 8001c10:	dd00      	ble.n	8001c14 <__aeabi_dsub+0xc0>
 8001c12:	e194      	b.n	8001f3e <__aeabi_dsub+0x3ea>
 8001c14:	2120      	movs	r1, #32
 8001c16:	0010      	movs	r0, r2
 8001c18:	0035      	movs	r5, r6
 8001c1a:	1ac9      	subs	r1, r1, r3
 8001c1c:	408e      	lsls	r6, r1
 8001c1e:	40da      	lsrs	r2, r3
 8001c20:	4088      	lsls	r0, r1
 8001c22:	40dd      	lsrs	r5, r3
 8001c24:	1e71      	subs	r1, r6, #1
 8001c26:	418e      	sbcs	r6, r1
 8001c28:	0011      	movs	r1, r2
 8001c2a:	2207      	movs	r2, #7
 8001c2c:	4328      	orrs	r0, r5
 8001c2e:	2500      	movs	r5, #0
 8001c30:	4306      	orrs	r6, r0
 8001c32:	4032      	ands	r2, r6
 8001c34:	2a00      	cmp	r2, #0
 8001c36:	d009      	beq.n	8001c4c <__aeabi_dsub+0xf8>
 8001c38:	230f      	movs	r3, #15
 8001c3a:	4033      	ands	r3, r6
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d005      	beq.n	8001c4c <__aeabi_dsub+0xf8>
 8001c40:	1d33      	adds	r3, r6, #4
 8001c42:	42b3      	cmp	r3, r6
 8001c44:	41b6      	sbcs	r6, r6
 8001c46:	4276      	negs	r6, r6
 8001c48:	1989      	adds	r1, r1, r6
 8001c4a:	001e      	movs	r6, r3
 8001c4c:	020b      	lsls	r3, r1, #8
 8001c4e:	d400      	bmi.n	8001c52 <__aeabi_dsub+0xfe>
 8001c50:	e23d      	b.n	80020ce <__aeabi_dsub+0x57a>
 8001c52:	1c6a      	adds	r2, r5, #1
 8001c54:	4b91      	ldr	r3, [pc, #580]	; (8001e9c <__aeabi_dsub+0x348>)
 8001c56:	0555      	lsls	r5, r2, #21
 8001c58:	0d6d      	lsrs	r5, r5, #21
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0x10c>
 8001c5e:	e119      	b.n	8001e94 <__aeabi_dsub+0x340>
 8001c60:	4a8f      	ldr	r2, [pc, #572]	; (8001ea0 <__aeabi_dsub+0x34c>)
 8001c62:	08f6      	lsrs	r6, r6, #3
 8001c64:	400a      	ands	r2, r1
 8001c66:	0757      	lsls	r7, r2, #29
 8001c68:	0252      	lsls	r2, r2, #9
 8001c6a:	4337      	orrs	r7, r6
 8001c6c:	0b12      	lsrs	r2, r2, #12
 8001c6e:	e09b      	b.n	8001da8 <__aeabi_dsub+0x254>
 8001c70:	2e00      	cmp	r6, #0
 8001c72:	d000      	beq.n	8001c76 <__aeabi_dsub+0x122>
 8001c74:	e0c5      	b.n	8001e02 <__aeabi_dsub+0x2ae>
 8001c76:	1c6e      	adds	r6, r5, #1
 8001c78:	0576      	lsls	r6, r6, #21
 8001c7a:	0d76      	lsrs	r6, r6, #21
 8001c7c:	2e01      	cmp	r6, #1
 8001c7e:	dc00      	bgt.n	8001c82 <__aeabi_dsub+0x12e>
 8001c80:	e148      	b.n	8001f14 <__aeabi_dsub+0x3c0>
 8001c82:	4667      	mov	r7, ip
 8001c84:	1a86      	subs	r6, r0, r2
 8001c86:	1bcb      	subs	r3, r1, r7
 8001c88:	42b0      	cmp	r0, r6
 8001c8a:	41bf      	sbcs	r7, r7
 8001c8c:	427f      	negs	r7, r7
 8001c8e:	46b8      	mov	r8, r7
 8001c90:	001f      	movs	r7, r3
 8001c92:	4643      	mov	r3, r8
 8001c94:	1aff      	subs	r7, r7, r3
 8001c96:	003b      	movs	r3, r7
 8001c98:	46b8      	mov	r8, r7
 8001c9a:	021b      	lsls	r3, r3, #8
 8001c9c:	d500      	bpl.n	8001ca0 <__aeabi_dsub+0x14c>
 8001c9e:	e15f      	b.n	8001f60 <__aeabi_dsub+0x40c>
 8001ca0:	4337      	orrs	r7, r6
 8001ca2:	d19a      	bne.n	8001bda <__aeabi_dsub+0x86>
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2400      	movs	r4, #0
 8001ca8:	2500      	movs	r5, #0
 8001caa:	e079      	b.n	8001da0 <__aeabi_dsub+0x24c>
 8001cac:	2e00      	cmp	r6, #0
 8001cae:	dc00      	bgt.n	8001cb2 <__aeabi_dsub+0x15e>
 8001cb0:	e0fa      	b.n	8001ea8 <__aeabi_dsub+0x354>
 8001cb2:	2f00      	cmp	r7, #0
 8001cb4:	d100      	bne.n	8001cb8 <__aeabi_dsub+0x164>
 8001cb6:	e08d      	b.n	8001dd4 <__aeabi_dsub+0x280>
 8001cb8:	4b78      	ldr	r3, [pc, #480]	; (8001e9c <__aeabi_dsub+0x348>)
 8001cba:	429d      	cmp	r5, r3
 8001cbc:	d067      	beq.n	8001d8e <__aeabi_dsub+0x23a>
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	4667      	mov	r7, ip
 8001cc2:	041b      	lsls	r3, r3, #16
 8001cc4:	431f      	orrs	r7, r3
 8001cc6:	46bc      	mov	ip, r7
 8001cc8:	2e38      	cmp	r6, #56	; 0x38
 8001cca:	dc00      	bgt.n	8001cce <__aeabi_dsub+0x17a>
 8001ccc:	e152      	b.n	8001f74 <__aeabi_dsub+0x420>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	1e5a      	subs	r2, r3, #1
 8001cd4:	4193      	sbcs	r3, r2
 8001cd6:	181e      	adds	r6, r3, r0
 8001cd8:	4286      	cmp	r6, r0
 8001cda:	4180      	sbcs	r0, r0
 8001cdc:	4240      	negs	r0, r0
 8001cde:	1809      	adds	r1, r1, r0
 8001ce0:	020b      	lsls	r3, r1, #8
 8001ce2:	d400      	bmi.n	8001ce6 <__aeabi_dsub+0x192>
 8001ce4:	e0be      	b.n	8001e64 <__aeabi_dsub+0x310>
 8001ce6:	4b6d      	ldr	r3, [pc, #436]	; (8001e9c <__aeabi_dsub+0x348>)
 8001ce8:	3501      	adds	r5, #1
 8001cea:	429d      	cmp	r5, r3
 8001cec:	d100      	bne.n	8001cf0 <__aeabi_dsub+0x19c>
 8001cee:	e0d2      	b.n	8001e96 <__aeabi_dsub+0x342>
 8001cf0:	4a6b      	ldr	r2, [pc, #428]	; (8001ea0 <__aeabi_dsub+0x34c>)
 8001cf2:	0873      	lsrs	r3, r6, #1
 8001cf4:	400a      	ands	r2, r1
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	400e      	ands	r6, r1
 8001cfa:	431e      	orrs	r6, r3
 8001cfc:	0851      	lsrs	r1, r2, #1
 8001cfe:	07d3      	lsls	r3, r2, #31
 8001d00:	2207      	movs	r2, #7
 8001d02:	431e      	orrs	r6, r3
 8001d04:	4032      	ands	r2, r6
 8001d06:	e795      	b.n	8001c34 <__aeabi_dsub+0xe0>
 8001d08:	001e      	movs	r6, r3
 8001d0a:	4316      	orrs	r6, r2
 8001d0c:	d000      	beq.n	8001d10 <__aeabi_dsub+0x1bc>
 8001d0e:	e745      	b.n	8001b9c <__aeabi_dsub+0x48>
 8001d10:	e740      	b.n	8001b94 <__aeabi_dsub+0x40>
 8001d12:	4b62      	ldr	r3, [pc, #392]	; (8001e9c <__aeabi_dsub+0x348>)
 8001d14:	429d      	cmp	r5, r3
 8001d16:	d03a      	beq.n	8001d8e <__aeabi_dsub+0x23a>
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	4667      	mov	r7, ip
 8001d1c:	041b      	lsls	r3, r3, #16
 8001d1e:	431f      	orrs	r7, r3
 8001d20:	46bc      	mov	ip, r7
 8001d22:	2e38      	cmp	r6, #56	; 0x38
 8001d24:	dd00      	ble.n	8001d28 <__aeabi_dsub+0x1d4>
 8001d26:	e0eb      	b.n	8001f00 <__aeabi_dsub+0x3ac>
 8001d28:	2e1f      	cmp	r6, #31
 8001d2a:	dc00      	bgt.n	8001d2e <__aeabi_dsub+0x1da>
 8001d2c:	e13a      	b.n	8001fa4 <__aeabi_dsub+0x450>
 8001d2e:	0033      	movs	r3, r6
 8001d30:	4667      	mov	r7, ip
 8001d32:	3b20      	subs	r3, #32
 8001d34:	40df      	lsrs	r7, r3
 8001d36:	003b      	movs	r3, r7
 8001d38:	2e20      	cmp	r6, #32
 8001d3a:	d005      	beq.n	8001d48 <__aeabi_dsub+0x1f4>
 8001d3c:	2740      	movs	r7, #64	; 0x40
 8001d3e:	1bbf      	subs	r7, r7, r6
 8001d40:	4666      	mov	r6, ip
 8001d42:	40be      	lsls	r6, r7
 8001d44:	4332      	orrs	r2, r6
 8001d46:	4690      	mov	r8, r2
 8001d48:	4646      	mov	r6, r8
 8001d4a:	1e72      	subs	r2, r6, #1
 8001d4c:	4196      	sbcs	r6, r2
 8001d4e:	4333      	orrs	r3, r6
 8001d50:	e0da      	b.n	8001f08 <__aeabi_dsub+0x3b4>
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dsub+0x204>
 8001d56:	e214      	b.n	8002182 <__aeabi_dsub+0x62e>
 8001d58:	4663      	mov	r3, ip
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_dsub+0x20c>
 8001d5e:	e168      	b.n	8002032 <__aeabi_dsub+0x4de>
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	074e      	lsls	r6, r1, #29
 8001d64:	08c0      	lsrs	r0, r0, #3
 8001d66:	08c9      	lsrs	r1, r1, #3
 8001d68:	031b      	lsls	r3, r3, #12
 8001d6a:	4306      	orrs	r6, r0
 8001d6c:	4219      	tst	r1, r3
 8001d6e:	d008      	beq.n	8001d82 <__aeabi_dsub+0x22e>
 8001d70:	4660      	mov	r0, ip
 8001d72:	08c0      	lsrs	r0, r0, #3
 8001d74:	4218      	tst	r0, r3
 8001d76:	d104      	bne.n	8001d82 <__aeabi_dsub+0x22e>
 8001d78:	4663      	mov	r3, ip
 8001d7a:	0001      	movs	r1, r0
 8001d7c:	08d2      	lsrs	r2, r2, #3
 8001d7e:	075e      	lsls	r6, r3, #29
 8001d80:	4316      	orrs	r6, r2
 8001d82:	00f3      	lsls	r3, r6, #3
 8001d84:	4699      	mov	r9, r3
 8001d86:	00c9      	lsls	r1, r1, #3
 8001d88:	0f72      	lsrs	r2, r6, #29
 8001d8a:	4d44      	ldr	r5, [pc, #272]	; (8001e9c <__aeabi_dsub+0x348>)
 8001d8c:	4311      	orrs	r1, r2
 8001d8e:	464b      	mov	r3, r9
 8001d90:	08de      	lsrs	r6, r3, #3
 8001d92:	4b42      	ldr	r3, [pc, #264]	; (8001e9c <__aeabi_dsub+0x348>)
 8001d94:	074f      	lsls	r7, r1, #29
 8001d96:	4337      	orrs	r7, r6
 8001d98:	08ca      	lsrs	r2, r1, #3
 8001d9a:	429d      	cmp	r5, r3
 8001d9c:	d100      	bne.n	8001da0 <__aeabi_dsub+0x24c>
 8001d9e:	e06e      	b.n	8001e7e <__aeabi_dsub+0x32a>
 8001da0:	0312      	lsls	r2, r2, #12
 8001da2:	056d      	lsls	r5, r5, #21
 8001da4:	0b12      	lsrs	r2, r2, #12
 8001da6:	0d6d      	lsrs	r5, r5, #21
 8001da8:	2100      	movs	r1, #0
 8001daa:	0312      	lsls	r2, r2, #12
 8001dac:	0b13      	lsrs	r3, r2, #12
 8001dae:	0d0a      	lsrs	r2, r1, #20
 8001db0:	0512      	lsls	r2, r2, #20
 8001db2:	431a      	orrs	r2, r3
 8001db4:	4b3b      	ldr	r3, [pc, #236]	; (8001ea4 <__aeabi_dsub+0x350>)
 8001db6:	052d      	lsls	r5, r5, #20
 8001db8:	4013      	ands	r3, r2
 8001dba:	432b      	orrs	r3, r5
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	07e4      	lsls	r4, r4, #31
 8001dc0:	085b      	lsrs	r3, r3, #1
 8001dc2:	4323      	orrs	r3, r4
 8001dc4:	0038      	movs	r0, r7
 8001dc6:	0019      	movs	r1, r3
 8001dc8:	bc3c      	pop	{r2, r3, r4, r5}
 8001dca:	4690      	mov	r8, r2
 8001dcc:	4699      	mov	r9, r3
 8001dce:	46a2      	mov	sl, r4
 8001dd0:	46ab      	mov	fp, r5
 8001dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dd4:	4663      	mov	r3, ip
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	d011      	beq.n	8001dfe <__aeabi_dsub+0x2aa>
 8001dda:	1e73      	subs	r3, r6, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d000      	beq.n	8001de2 <__aeabi_dsub+0x28e>
 8001de0:	e107      	b.n	8001ff2 <__aeabi_dsub+0x49e>
 8001de2:	1886      	adds	r6, r0, r2
 8001de4:	4286      	cmp	r6, r0
 8001de6:	4180      	sbcs	r0, r0
 8001de8:	4461      	add	r1, ip
 8001dea:	4240      	negs	r0, r0
 8001dec:	1809      	adds	r1, r1, r0
 8001dee:	2501      	movs	r5, #1
 8001df0:	020b      	lsls	r3, r1, #8
 8001df2:	d537      	bpl.n	8001e64 <__aeabi_dsub+0x310>
 8001df4:	2502      	movs	r5, #2
 8001df6:	e77b      	b.n	8001cf0 <__aeabi_dsub+0x19c>
 8001df8:	003e      	movs	r6, r7
 8001dfa:	4661      	mov	r1, ip
 8001dfc:	4691      	mov	r9, r2
 8001dfe:	0035      	movs	r5, r6
 8001e00:	e7c5      	b.n	8001d8e <__aeabi_dsub+0x23a>
 8001e02:	465c      	mov	r4, fp
 8001e04:	2d00      	cmp	r5, #0
 8001e06:	d000      	beq.n	8001e0a <__aeabi_dsub+0x2b6>
 8001e08:	e0e1      	b.n	8001fce <__aeabi_dsub+0x47a>
 8001e0a:	000b      	movs	r3, r1
 8001e0c:	4303      	orrs	r3, r0
 8001e0e:	d0f3      	beq.n	8001df8 <__aeabi_dsub+0x2a4>
 8001e10:	1c73      	adds	r3, r6, #1
 8001e12:	d100      	bne.n	8001e16 <__aeabi_dsub+0x2c2>
 8001e14:	e1ac      	b.n	8002170 <__aeabi_dsub+0x61c>
 8001e16:	4b21      	ldr	r3, [pc, #132]	; (8001e9c <__aeabi_dsub+0x348>)
 8001e18:	429f      	cmp	r7, r3
 8001e1a:	d100      	bne.n	8001e1e <__aeabi_dsub+0x2ca>
 8001e1c:	e13a      	b.n	8002094 <__aeabi_dsub+0x540>
 8001e1e:	43f3      	mvns	r3, r6
 8001e20:	2b38      	cmp	r3, #56	; 0x38
 8001e22:	dd00      	ble.n	8001e26 <__aeabi_dsub+0x2d2>
 8001e24:	e16f      	b.n	8002106 <__aeabi_dsub+0x5b2>
 8001e26:	2b1f      	cmp	r3, #31
 8001e28:	dd00      	ble.n	8001e2c <__aeabi_dsub+0x2d8>
 8001e2a:	e18c      	b.n	8002146 <__aeabi_dsub+0x5f2>
 8001e2c:	2520      	movs	r5, #32
 8001e2e:	000e      	movs	r6, r1
 8001e30:	1aed      	subs	r5, r5, r3
 8001e32:	40ae      	lsls	r6, r5
 8001e34:	46b0      	mov	r8, r6
 8001e36:	0006      	movs	r6, r0
 8001e38:	46aa      	mov	sl, r5
 8001e3a:	40de      	lsrs	r6, r3
 8001e3c:	4645      	mov	r5, r8
 8001e3e:	4335      	orrs	r5, r6
 8001e40:	002e      	movs	r6, r5
 8001e42:	4655      	mov	r5, sl
 8001e44:	40d9      	lsrs	r1, r3
 8001e46:	40a8      	lsls	r0, r5
 8001e48:	4663      	mov	r3, ip
 8001e4a:	1e45      	subs	r5, r0, #1
 8001e4c:	41a8      	sbcs	r0, r5
 8001e4e:	1a5b      	subs	r3, r3, r1
 8001e50:	469c      	mov	ip, r3
 8001e52:	4330      	orrs	r0, r6
 8001e54:	1a16      	subs	r6, r2, r0
 8001e56:	42b2      	cmp	r2, r6
 8001e58:	4192      	sbcs	r2, r2
 8001e5a:	4663      	mov	r3, ip
 8001e5c:	4252      	negs	r2, r2
 8001e5e:	1a99      	subs	r1, r3, r2
 8001e60:	003d      	movs	r5, r7
 8001e62:	e6b4      	b.n	8001bce <__aeabi_dsub+0x7a>
 8001e64:	2207      	movs	r2, #7
 8001e66:	4032      	ands	r2, r6
 8001e68:	2a00      	cmp	r2, #0
 8001e6a:	d000      	beq.n	8001e6e <__aeabi_dsub+0x31a>
 8001e6c:	e6e4      	b.n	8001c38 <__aeabi_dsub+0xe4>
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <__aeabi_dsub+0x348>)
 8001e70:	08f6      	lsrs	r6, r6, #3
 8001e72:	074f      	lsls	r7, r1, #29
 8001e74:	4337      	orrs	r7, r6
 8001e76:	08ca      	lsrs	r2, r1, #3
 8001e78:	429d      	cmp	r5, r3
 8001e7a:	d000      	beq.n	8001e7e <__aeabi_dsub+0x32a>
 8001e7c:	e790      	b.n	8001da0 <__aeabi_dsub+0x24c>
 8001e7e:	003b      	movs	r3, r7
 8001e80:	4313      	orrs	r3, r2
 8001e82:	d100      	bne.n	8001e86 <__aeabi_dsub+0x332>
 8001e84:	e1a6      	b.n	80021d4 <__aeabi_dsub+0x680>
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	031b      	lsls	r3, r3, #12
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	0312      	lsls	r2, r2, #12
 8001e8e:	0b12      	lsrs	r2, r2, #12
 8001e90:	4d02      	ldr	r5, [pc, #8]	; (8001e9c <__aeabi_dsub+0x348>)
 8001e92:	e789      	b.n	8001da8 <__aeabi_dsub+0x254>
 8001e94:	0015      	movs	r5, r2
 8001e96:	2200      	movs	r2, #0
 8001e98:	2700      	movs	r7, #0
 8001e9a:	e785      	b.n	8001da8 <__aeabi_dsub+0x254>
 8001e9c:	000007ff 	.word	0x000007ff
 8001ea0:	ff7fffff 	.word	0xff7fffff
 8001ea4:	800fffff 	.word	0x800fffff
 8001ea8:	2e00      	cmp	r6, #0
 8001eaa:	d000      	beq.n	8001eae <__aeabi_dsub+0x35a>
 8001eac:	e0c7      	b.n	800203e <__aeabi_dsub+0x4ea>
 8001eae:	1c6b      	adds	r3, r5, #1
 8001eb0:	055e      	lsls	r6, r3, #21
 8001eb2:	0d76      	lsrs	r6, r6, #21
 8001eb4:	2e01      	cmp	r6, #1
 8001eb6:	dc00      	bgt.n	8001eba <__aeabi_dsub+0x366>
 8001eb8:	e0f0      	b.n	800209c <__aeabi_dsub+0x548>
 8001eba:	4dc8      	ldr	r5, [pc, #800]	; (80021dc <__aeabi_dsub+0x688>)
 8001ebc:	42ab      	cmp	r3, r5
 8001ebe:	d100      	bne.n	8001ec2 <__aeabi_dsub+0x36e>
 8001ec0:	e0b9      	b.n	8002036 <__aeabi_dsub+0x4e2>
 8001ec2:	1885      	adds	r5, r0, r2
 8001ec4:	000a      	movs	r2, r1
 8001ec6:	4285      	cmp	r5, r0
 8001ec8:	4189      	sbcs	r1, r1
 8001eca:	4462      	add	r2, ip
 8001ecc:	4249      	negs	r1, r1
 8001ece:	1851      	adds	r1, r2, r1
 8001ed0:	2207      	movs	r2, #7
 8001ed2:	07ce      	lsls	r6, r1, #31
 8001ed4:	086d      	lsrs	r5, r5, #1
 8001ed6:	432e      	orrs	r6, r5
 8001ed8:	0849      	lsrs	r1, r1, #1
 8001eda:	4032      	ands	r2, r6
 8001edc:	001d      	movs	r5, r3
 8001ede:	e6a9      	b.n	8001c34 <__aeabi_dsub+0xe0>
 8001ee0:	49bf      	ldr	r1, [pc, #764]	; (80021e0 <__aeabi_dsub+0x68c>)
 8001ee2:	1aed      	subs	r5, r5, r3
 8001ee4:	4011      	ands	r1, r2
 8001ee6:	2207      	movs	r2, #7
 8001ee8:	4032      	ands	r2, r6
 8001eea:	e6a3      	b.n	8001c34 <__aeabi_dsub+0xe0>
 8001eec:	0032      	movs	r2, r6
 8001eee:	3828      	subs	r0, #40	; 0x28
 8001ef0:	4082      	lsls	r2, r0
 8001ef2:	2600      	movs	r6, #0
 8001ef4:	e686      	b.n	8001c04 <__aeabi_dsub+0xb0>
 8001ef6:	0030      	movs	r0, r6
 8001ef8:	f000 fa9a 	bl	8002430 <__clzsi2>
 8001efc:	3020      	adds	r0, #32
 8001efe:	e673      	b.n	8001be8 <__aeabi_dsub+0x94>
 8001f00:	4663      	mov	r3, ip
 8001f02:	4313      	orrs	r3, r2
 8001f04:	1e5a      	subs	r2, r3, #1
 8001f06:	4193      	sbcs	r3, r2
 8001f08:	1ac6      	subs	r6, r0, r3
 8001f0a:	42b0      	cmp	r0, r6
 8001f0c:	4180      	sbcs	r0, r0
 8001f0e:	4240      	negs	r0, r0
 8001f10:	1a09      	subs	r1, r1, r0
 8001f12:	e65c      	b.n	8001bce <__aeabi_dsub+0x7a>
 8001f14:	000e      	movs	r6, r1
 8001f16:	4667      	mov	r7, ip
 8001f18:	4306      	orrs	r6, r0
 8001f1a:	4317      	orrs	r7, r2
 8001f1c:	2d00      	cmp	r5, #0
 8001f1e:	d15e      	bne.n	8001fde <__aeabi_dsub+0x48a>
 8001f20:	2e00      	cmp	r6, #0
 8001f22:	d000      	beq.n	8001f26 <__aeabi_dsub+0x3d2>
 8001f24:	e0f3      	b.n	800210e <__aeabi_dsub+0x5ba>
 8001f26:	2f00      	cmp	r7, #0
 8001f28:	d100      	bne.n	8001f2c <__aeabi_dsub+0x3d8>
 8001f2a:	e11e      	b.n	800216a <__aeabi_dsub+0x616>
 8001f2c:	465c      	mov	r4, fp
 8001f2e:	4661      	mov	r1, ip
 8001f30:	4691      	mov	r9, r2
 8001f32:	e72c      	b.n	8001d8e <__aeabi_dsub+0x23a>
 8001f34:	4fa9      	ldr	r7, [pc, #676]	; (80021dc <__aeabi_dsub+0x688>)
 8001f36:	42be      	cmp	r6, r7
 8001f38:	d07b      	beq.n	8002032 <__aeabi_dsub+0x4de>
 8001f3a:	001e      	movs	r6, r3
 8001f3c:	e6f1      	b.n	8001d22 <__aeabi_dsub+0x1ce>
 8001f3e:	0010      	movs	r0, r2
 8001f40:	3d1f      	subs	r5, #31
 8001f42:	40e8      	lsrs	r0, r5
 8001f44:	2b20      	cmp	r3, #32
 8001f46:	d003      	beq.n	8001f50 <__aeabi_dsub+0x3fc>
 8001f48:	2140      	movs	r1, #64	; 0x40
 8001f4a:	1acb      	subs	r3, r1, r3
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	4316      	orrs	r6, r2
 8001f50:	1e73      	subs	r3, r6, #1
 8001f52:	419e      	sbcs	r6, r3
 8001f54:	2207      	movs	r2, #7
 8001f56:	4306      	orrs	r6, r0
 8001f58:	4032      	ands	r2, r6
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	2500      	movs	r5, #0
 8001f5e:	e783      	b.n	8001e68 <__aeabi_dsub+0x314>
 8001f60:	1a16      	subs	r6, r2, r0
 8001f62:	4663      	mov	r3, ip
 8001f64:	42b2      	cmp	r2, r6
 8001f66:	4180      	sbcs	r0, r0
 8001f68:	1a59      	subs	r1, r3, r1
 8001f6a:	4240      	negs	r0, r0
 8001f6c:	1a0b      	subs	r3, r1, r0
 8001f6e:	4698      	mov	r8, r3
 8001f70:	465c      	mov	r4, fp
 8001f72:	e632      	b.n	8001bda <__aeabi_dsub+0x86>
 8001f74:	2e1f      	cmp	r6, #31
 8001f76:	dd00      	ble.n	8001f7a <__aeabi_dsub+0x426>
 8001f78:	e0ab      	b.n	80020d2 <__aeabi_dsub+0x57e>
 8001f7a:	2720      	movs	r7, #32
 8001f7c:	1bbb      	subs	r3, r7, r6
 8001f7e:	469a      	mov	sl, r3
 8001f80:	4663      	mov	r3, ip
 8001f82:	4657      	mov	r7, sl
 8001f84:	40bb      	lsls	r3, r7
 8001f86:	4699      	mov	r9, r3
 8001f88:	0013      	movs	r3, r2
 8001f8a:	464f      	mov	r7, r9
 8001f8c:	40f3      	lsrs	r3, r6
 8001f8e:	431f      	orrs	r7, r3
 8001f90:	003b      	movs	r3, r7
 8001f92:	4657      	mov	r7, sl
 8001f94:	40ba      	lsls	r2, r7
 8001f96:	1e57      	subs	r7, r2, #1
 8001f98:	41ba      	sbcs	r2, r7
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	4662      	mov	r2, ip
 8001f9e:	40f2      	lsrs	r2, r6
 8001fa0:	1889      	adds	r1, r1, r2
 8001fa2:	e698      	b.n	8001cd6 <__aeabi_dsub+0x182>
 8001fa4:	2720      	movs	r7, #32
 8001fa6:	1bbb      	subs	r3, r7, r6
 8001fa8:	469a      	mov	sl, r3
 8001faa:	4663      	mov	r3, ip
 8001fac:	4657      	mov	r7, sl
 8001fae:	40bb      	lsls	r3, r7
 8001fb0:	4699      	mov	r9, r3
 8001fb2:	0013      	movs	r3, r2
 8001fb4:	464f      	mov	r7, r9
 8001fb6:	40f3      	lsrs	r3, r6
 8001fb8:	431f      	orrs	r7, r3
 8001fba:	003b      	movs	r3, r7
 8001fbc:	4657      	mov	r7, sl
 8001fbe:	40ba      	lsls	r2, r7
 8001fc0:	1e57      	subs	r7, r2, #1
 8001fc2:	41ba      	sbcs	r2, r7
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	4662      	mov	r2, ip
 8001fc8:	40f2      	lsrs	r2, r6
 8001fca:	1a89      	subs	r1, r1, r2
 8001fcc:	e79c      	b.n	8001f08 <__aeabi_dsub+0x3b4>
 8001fce:	4b83      	ldr	r3, [pc, #524]	; (80021dc <__aeabi_dsub+0x688>)
 8001fd0:	429f      	cmp	r7, r3
 8001fd2:	d05f      	beq.n	8002094 <__aeabi_dsub+0x540>
 8001fd4:	2580      	movs	r5, #128	; 0x80
 8001fd6:	042d      	lsls	r5, r5, #16
 8001fd8:	4273      	negs	r3, r6
 8001fda:	4329      	orrs	r1, r5
 8001fdc:	e720      	b.n	8001e20 <__aeabi_dsub+0x2cc>
 8001fde:	2e00      	cmp	r6, #0
 8001fe0:	d10c      	bne.n	8001ffc <__aeabi_dsub+0x4a8>
 8001fe2:	2f00      	cmp	r7, #0
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dsub+0x494>
 8001fe6:	e0d0      	b.n	800218a <__aeabi_dsub+0x636>
 8001fe8:	465c      	mov	r4, fp
 8001fea:	4661      	mov	r1, ip
 8001fec:	4691      	mov	r9, r2
 8001fee:	4d7b      	ldr	r5, [pc, #492]	; (80021dc <__aeabi_dsub+0x688>)
 8001ff0:	e6cd      	b.n	8001d8e <__aeabi_dsub+0x23a>
 8001ff2:	4f7a      	ldr	r7, [pc, #488]	; (80021dc <__aeabi_dsub+0x688>)
 8001ff4:	42be      	cmp	r6, r7
 8001ff6:	d01c      	beq.n	8002032 <__aeabi_dsub+0x4de>
 8001ff8:	001e      	movs	r6, r3
 8001ffa:	e665      	b.n	8001cc8 <__aeabi_dsub+0x174>
 8001ffc:	2f00      	cmp	r7, #0
 8001ffe:	d018      	beq.n	8002032 <__aeabi_dsub+0x4de>
 8002000:	08c0      	lsrs	r0, r0, #3
 8002002:	074e      	lsls	r6, r1, #29
 8002004:	4306      	orrs	r6, r0
 8002006:	2080      	movs	r0, #128	; 0x80
 8002008:	08c9      	lsrs	r1, r1, #3
 800200a:	0300      	lsls	r0, r0, #12
 800200c:	4201      	tst	r1, r0
 800200e:	d008      	beq.n	8002022 <__aeabi_dsub+0x4ce>
 8002010:	4663      	mov	r3, ip
 8002012:	08dc      	lsrs	r4, r3, #3
 8002014:	4204      	tst	r4, r0
 8002016:	d104      	bne.n	8002022 <__aeabi_dsub+0x4ce>
 8002018:	0021      	movs	r1, r4
 800201a:	46da      	mov	sl, fp
 800201c:	08d2      	lsrs	r2, r2, #3
 800201e:	075e      	lsls	r6, r3, #29
 8002020:	4316      	orrs	r6, r2
 8002022:	00f3      	lsls	r3, r6, #3
 8002024:	4699      	mov	r9, r3
 8002026:	2401      	movs	r4, #1
 8002028:	4653      	mov	r3, sl
 800202a:	00c9      	lsls	r1, r1, #3
 800202c:	0f72      	lsrs	r2, r6, #29
 800202e:	4311      	orrs	r1, r2
 8002030:	401c      	ands	r4, r3
 8002032:	4d6a      	ldr	r5, [pc, #424]	; (80021dc <__aeabi_dsub+0x688>)
 8002034:	e6ab      	b.n	8001d8e <__aeabi_dsub+0x23a>
 8002036:	001d      	movs	r5, r3
 8002038:	2200      	movs	r2, #0
 800203a:	2700      	movs	r7, #0
 800203c:	e6b4      	b.n	8001da8 <__aeabi_dsub+0x254>
 800203e:	2d00      	cmp	r5, #0
 8002040:	d159      	bne.n	80020f6 <__aeabi_dsub+0x5a2>
 8002042:	000b      	movs	r3, r1
 8002044:	4303      	orrs	r3, r0
 8002046:	d100      	bne.n	800204a <__aeabi_dsub+0x4f6>
 8002048:	e6d6      	b.n	8001df8 <__aeabi_dsub+0x2a4>
 800204a:	1c73      	adds	r3, r6, #1
 800204c:	d100      	bne.n	8002050 <__aeabi_dsub+0x4fc>
 800204e:	e0b2      	b.n	80021b6 <__aeabi_dsub+0x662>
 8002050:	4b62      	ldr	r3, [pc, #392]	; (80021dc <__aeabi_dsub+0x688>)
 8002052:	429f      	cmp	r7, r3
 8002054:	d01e      	beq.n	8002094 <__aeabi_dsub+0x540>
 8002056:	43f3      	mvns	r3, r6
 8002058:	2b38      	cmp	r3, #56	; 0x38
 800205a:	dc6f      	bgt.n	800213c <__aeabi_dsub+0x5e8>
 800205c:	2b1f      	cmp	r3, #31
 800205e:	dd00      	ble.n	8002062 <__aeabi_dsub+0x50e>
 8002060:	e097      	b.n	8002192 <__aeabi_dsub+0x63e>
 8002062:	2520      	movs	r5, #32
 8002064:	000e      	movs	r6, r1
 8002066:	1aed      	subs	r5, r5, r3
 8002068:	40ae      	lsls	r6, r5
 800206a:	46b0      	mov	r8, r6
 800206c:	0006      	movs	r6, r0
 800206e:	46aa      	mov	sl, r5
 8002070:	40de      	lsrs	r6, r3
 8002072:	4645      	mov	r5, r8
 8002074:	4335      	orrs	r5, r6
 8002076:	002e      	movs	r6, r5
 8002078:	4655      	mov	r5, sl
 800207a:	40a8      	lsls	r0, r5
 800207c:	40d9      	lsrs	r1, r3
 800207e:	1e45      	subs	r5, r0, #1
 8002080:	41a8      	sbcs	r0, r5
 8002082:	448c      	add	ip, r1
 8002084:	4306      	orrs	r6, r0
 8002086:	18b6      	adds	r6, r6, r2
 8002088:	4296      	cmp	r6, r2
 800208a:	4192      	sbcs	r2, r2
 800208c:	4251      	negs	r1, r2
 800208e:	4461      	add	r1, ip
 8002090:	003d      	movs	r5, r7
 8002092:	e625      	b.n	8001ce0 <__aeabi_dsub+0x18c>
 8002094:	003d      	movs	r5, r7
 8002096:	4661      	mov	r1, ip
 8002098:	4691      	mov	r9, r2
 800209a:	e678      	b.n	8001d8e <__aeabi_dsub+0x23a>
 800209c:	000b      	movs	r3, r1
 800209e:	4303      	orrs	r3, r0
 80020a0:	2d00      	cmp	r5, #0
 80020a2:	d000      	beq.n	80020a6 <__aeabi_dsub+0x552>
 80020a4:	e655      	b.n	8001d52 <__aeabi_dsub+0x1fe>
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f5      	beq.n	8002096 <__aeabi_dsub+0x542>
 80020aa:	4663      	mov	r3, ip
 80020ac:	4313      	orrs	r3, r2
 80020ae:	d100      	bne.n	80020b2 <__aeabi_dsub+0x55e>
 80020b0:	e66d      	b.n	8001d8e <__aeabi_dsub+0x23a>
 80020b2:	1886      	adds	r6, r0, r2
 80020b4:	4286      	cmp	r6, r0
 80020b6:	4180      	sbcs	r0, r0
 80020b8:	4461      	add	r1, ip
 80020ba:	4240      	negs	r0, r0
 80020bc:	1809      	adds	r1, r1, r0
 80020be:	2200      	movs	r2, #0
 80020c0:	020b      	lsls	r3, r1, #8
 80020c2:	d400      	bmi.n	80020c6 <__aeabi_dsub+0x572>
 80020c4:	e6d0      	b.n	8001e68 <__aeabi_dsub+0x314>
 80020c6:	4b46      	ldr	r3, [pc, #280]	; (80021e0 <__aeabi_dsub+0x68c>)
 80020c8:	3501      	adds	r5, #1
 80020ca:	4019      	ands	r1, r3
 80020cc:	e5b2      	b.n	8001c34 <__aeabi_dsub+0xe0>
 80020ce:	46b1      	mov	r9, r6
 80020d0:	e65d      	b.n	8001d8e <__aeabi_dsub+0x23a>
 80020d2:	0033      	movs	r3, r6
 80020d4:	4667      	mov	r7, ip
 80020d6:	3b20      	subs	r3, #32
 80020d8:	40df      	lsrs	r7, r3
 80020da:	003b      	movs	r3, r7
 80020dc:	2e20      	cmp	r6, #32
 80020de:	d005      	beq.n	80020ec <__aeabi_dsub+0x598>
 80020e0:	2740      	movs	r7, #64	; 0x40
 80020e2:	1bbf      	subs	r7, r7, r6
 80020e4:	4666      	mov	r6, ip
 80020e6:	40be      	lsls	r6, r7
 80020e8:	4332      	orrs	r2, r6
 80020ea:	4690      	mov	r8, r2
 80020ec:	4646      	mov	r6, r8
 80020ee:	1e72      	subs	r2, r6, #1
 80020f0:	4196      	sbcs	r6, r2
 80020f2:	4333      	orrs	r3, r6
 80020f4:	e5ef      	b.n	8001cd6 <__aeabi_dsub+0x182>
 80020f6:	4b39      	ldr	r3, [pc, #228]	; (80021dc <__aeabi_dsub+0x688>)
 80020f8:	429f      	cmp	r7, r3
 80020fa:	d0cb      	beq.n	8002094 <__aeabi_dsub+0x540>
 80020fc:	2580      	movs	r5, #128	; 0x80
 80020fe:	042d      	lsls	r5, r5, #16
 8002100:	4273      	negs	r3, r6
 8002102:	4329      	orrs	r1, r5
 8002104:	e7a8      	b.n	8002058 <__aeabi_dsub+0x504>
 8002106:	4308      	orrs	r0, r1
 8002108:	1e41      	subs	r1, r0, #1
 800210a:	4188      	sbcs	r0, r1
 800210c:	e6a2      	b.n	8001e54 <__aeabi_dsub+0x300>
 800210e:	2f00      	cmp	r7, #0
 8002110:	d100      	bne.n	8002114 <__aeabi_dsub+0x5c0>
 8002112:	e63c      	b.n	8001d8e <__aeabi_dsub+0x23a>
 8002114:	4663      	mov	r3, ip
 8002116:	1a86      	subs	r6, r0, r2
 8002118:	1acf      	subs	r7, r1, r3
 800211a:	42b0      	cmp	r0, r6
 800211c:	419b      	sbcs	r3, r3
 800211e:	425b      	negs	r3, r3
 8002120:	1afb      	subs	r3, r7, r3
 8002122:	4698      	mov	r8, r3
 8002124:	021b      	lsls	r3, r3, #8
 8002126:	d54e      	bpl.n	80021c6 <__aeabi_dsub+0x672>
 8002128:	1a16      	subs	r6, r2, r0
 800212a:	4663      	mov	r3, ip
 800212c:	42b2      	cmp	r2, r6
 800212e:	4192      	sbcs	r2, r2
 8002130:	1a59      	subs	r1, r3, r1
 8002132:	4252      	negs	r2, r2
 8002134:	1a89      	subs	r1, r1, r2
 8002136:	465c      	mov	r4, fp
 8002138:	2200      	movs	r2, #0
 800213a:	e57b      	b.n	8001c34 <__aeabi_dsub+0xe0>
 800213c:	4301      	orrs	r1, r0
 800213e:	000e      	movs	r6, r1
 8002140:	1e71      	subs	r1, r6, #1
 8002142:	418e      	sbcs	r6, r1
 8002144:	e79f      	b.n	8002086 <__aeabi_dsub+0x532>
 8002146:	001d      	movs	r5, r3
 8002148:	000e      	movs	r6, r1
 800214a:	3d20      	subs	r5, #32
 800214c:	40ee      	lsrs	r6, r5
 800214e:	46b0      	mov	r8, r6
 8002150:	2b20      	cmp	r3, #32
 8002152:	d004      	beq.n	800215e <__aeabi_dsub+0x60a>
 8002154:	2540      	movs	r5, #64	; 0x40
 8002156:	1aeb      	subs	r3, r5, r3
 8002158:	4099      	lsls	r1, r3
 800215a:	4308      	orrs	r0, r1
 800215c:	4681      	mov	r9, r0
 800215e:	4648      	mov	r0, r9
 8002160:	4643      	mov	r3, r8
 8002162:	1e41      	subs	r1, r0, #1
 8002164:	4188      	sbcs	r0, r1
 8002166:	4318      	orrs	r0, r3
 8002168:	e674      	b.n	8001e54 <__aeabi_dsub+0x300>
 800216a:	2200      	movs	r2, #0
 800216c:	2400      	movs	r4, #0
 800216e:	e617      	b.n	8001da0 <__aeabi_dsub+0x24c>
 8002170:	1a16      	subs	r6, r2, r0
 8002172:	4663      	mov	r3, ip
 8002174:	42b2      	cmp	r2, r6
 8002176:	4192      	sbcs	r2, r2
 8002178:	1a59      	subs	r1, r3, r1
 800217a:	4252      	negs	r2, r2
 800217c:	1a89      	subs	r1, r1, r2
 800217e:	003d      	movs	r5, r7
 8002180:	e525      	b.n	8001bce <__aeabi_dsub+0x7a>
 8002182:	4661      	mov	r1, ip
 8002184:	4691      	mov	r9, r2
 8002186:	4d15      	ldr	r5, [pc, #84]	; (80021dc <__aeabi_dsub+0x688>)
 8002188:	e601      	b.n	8001d8e <__aeabi_dsub+0x23a>
 800218a:	2280      	movs	r2, #128	; 0x80
 800218c:	2400      	movs	r4, #0
 800218e:	0312      	lsls	r2, r2, #12
 8002190:	e679      	b.n	8001e86 <__aeabi_dsub+0x332>
 8002192:	001d      	movs	r5, r3
 8002194:	000e      	movs	r6, r1
 8002196:	3d20      	subs	r5, #32
 8002198:	40ee      	lsrs	r6, r5
 800219a:	46b0      	mov	r8, r6
 800219c:	2b20      	cmp	r3, #32
 800219e:	d004      	beq.n	80021aa <__aeabi_dsub+0x656>
 80021a0:	2540      	movs	r5, #64	; 0x40
 80021a2:	1aeb      	subs	r3, r5, r3
 80021a4:	4099      	lsls	r1, r3
 80021a6:	4308      	orrs	r0, r1
 80021a8:	4681      	mov	r9, r0
 80021aa:	464e      	mov	r6, r9
 80021ac:	4643      	mov	r3, r8
 80021ae:	1e71      	subs	r1, r6, #1
 80021b0:	418e      	sbcs	r6, r1
 80021b2:	431e      	orrs	r6, r3
 80021b4:	e767      	b.n	8002086 <__aeabi_dsub+0x532>
 80021b6:	1886      	adds	r6, r0, r2
 80021b8:	4296      	cmp	r6, r2
 80021ba:	419b      	sbcs	r3, r3
 80021bc:	4461      	add	r1, ip
 80021be:	425b      	negs	r3, r3
 80021c0:	18c9      	adds	r1, r1, r3
 80021c2:	003d      	movs	r5, r7
 80021c4:	e58c      	b.n	8001ce0 <__aeabi_dsub+0x18c>
 80021c6:	4647      	mov	r7, r8
 80021c8:	4337      	orrs	r7, r6
 80021ca:	d0ce      	beq.n	800216a <__aeabi_dsub+0x616>
 80021cc:	2207      	movs	r2, #7
 80021ce:	4641      	mov	r1, r8
 80021d0:	4032      	ands	r2, r6
 80021d2:	e649      	b.n	8001e68 <__aeabi_dsub+0x314>
 80021d4:	2700      	movs	r7, #0
 80021d6:	003a      	movs	r2, r7
 80021d8:	e5e6      	b.n	8001da8 <__aeabi_dsub+0x254>
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	000007ff 	.word	0x000007ff
 80021e0:	ff7fffff 	.word	0xff7fffff

080021e4 <__aeabi_d2iz>:
 80021e4:	b530      	push	{r4, r5, lr}
 80021e6:	4d14      	ldr	r5, [pc, #80]	; (8002238 <__aeabi_d2iz+0x54>)
 80021e8:	030a      	lsls	r2, r1, #12
 80021ea:	004b      	lsls	r3, r1, #1
 80021ec:	0b12      	lsrs	r2, r2, #12
 80021ee:	0d5b      	lsrs	r3, r3, #21
 80021f0:	0fc9      	lsrs	r1, r1, #31
 80021f2:	2400      	movs	r4, #0
 80021f4:	42ab      	cmp	r3, r5
 80021f6:	dd11      	ble.n	800221c <__aeabi_d2iz+0x38>
 80021f8:	4c10      	ldr	r4, [pc, #64]	; (800223c <__aeabi_d2iz+0x58>)
 80021fa:	42a3      	cmp	r3, r4
 80021fc:	dc10      	bgt.n	8002220 <__aeabi_d2iz+0x3c>
 80021fe:	2480      	movs	r4, #128	; 0x80
 8002200:	0364      	lsls	r4, r4, #13
 8002202:	4322      	orrs	r2, r4
 8002204:	4c0e      	ldr	r4, [pc, #56]	; (8002240 <__aeabi_d2iz+0x5c>)
 8002206:	1ae4      	subs	r4, r4, r3
 8002208:	2c1f      	cmp	r4, #31
 800220a:	dd0c      	ble.n	8002226 <__aeabi_d2iz+0x42>
 800220c:	480d      	ldr	r0, [pc, #52]	; (8002244 <__aeabi_d2iz+0x60>)
 800220e:	1ac3      	subs	r3, r0, r3
 8002210:	40da      	lsrs	r2, r3
 8002212:	0013      	movs	r3, r2
 8002214:	425c      	negs	r4, r3
 8002216:	2900      	cmp	r1, #0
 8002218:	d100      	bne.n	800221c <__aeabi_d2iz+0x38>
 800221a:	001c      	movs	r4, r3
 800221c:	0020      	movs	r0, r4
 800221e:	bd30      	pop	{r4, r5, pc}
 8002220:	4b09      	ldr	r3, [pc, #36]	; (8002248 <__aeabi_d2iz+0x64>)
 8002222:	18cc      	adds	r4, r1, r3
 8002224:	e7fa      	b.n	800221c <__aeabi_d2iz+0x38>
 8002226:	4d09      	ldr	r5, [pc, #36]	; (800224c <__aeabi_d2iz+0x68>)
 8002228:	40e0      	lsrs	r0, r4
 800222a:	46ac      	mov	ip, r5
 800222c:	4463      	add	r3, ip
 800222e:	409a      	lsls	r2, r3
 8002230:	0013      	movs	r3, r2
 8002232:	4303      	orrs	r3, r0
 8002234:	e7ee      	b.n	8002214 <__aeabi_d2iz+0x30>
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	000003fe 	.word	0x000003fe
 800223c:	0000041d 	.word	0x0000041d
 8002240:	00000433 	.word	0x00000433
 8002244:	00000413 	.word	0x00000413
 8002248:	7fffffff 	.word	0x7fffffff
 800224c:	fffffbed 	.word	0xfffffbed

08002250 <__aeabi_i2d>:
 8002250:	b570      	push	{r4, r5, r6, lr}
 8002252:	2800      	cmp	r0, #0
 8002254:	d02d      	beq.n	80022b2 <__aeabi_i2d+0x62>
 8002256:	17c3      	asrs	r3, r0, #31
 8002258:	18c5      	adds	r5, r0, r3
 800225a:	405d      	eors	r5, r3
 800225c:	0fc4      	lsrs	r4, r0, #31
 800225e:	0028      	movs	r0, r5
 8002260:	f000 f8e6 	bl	8002430 <__clzsi2>
 8002264:	4b15      	ldr	r3, [pc, #84]	; (80022bc <__aeabi_i2d+0x6c>)
 8002266:	1a1b      	subs	r3, r3, r0
 8002268:	055b      	lsls	r3, r3, #21
 800226a:	0d5b      	lsrs	r3, r3, #21
 800226c:	280a      	cmp	r0, #10
 800226e:	dd15      	ble.n	800229c <__aeabi_i2d+0x4c>
 8002270:	380b      	subs	r0, #11
 8002272:	4085      	lsls	r5, r0
 8002274:	2200      	movs	r2, #0
 8002276:	032d      	lsls	r5, r5, #12
 8002278:	0b2d      	lsrs	r5, r5, #12
 800227a:	2100      	movs	r1, #0
 800227c:	0010      	movs	r0, r2
 800227e:	032d      	lsls	r5, r5, #12
 8002280:	0d0a      	lsrs	r2, r1, #20
 8002282:	0b2d      	lsrs	r5, r5, #12
 8002284:	0512      	lsls	r2, r2, #20
 8002286:	432a      	orrs	r2, r5
 8002288:	4d0d      	ldr	r5, [pc, #52]	; (80022c0 <__aeabi_i2d+0x70>)
 800228a:	051b      	lsls	r3, r3, #20
 800228c:	402a      	ands	r2, r5
 800228e:	4313      	orrs	r3, r2
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	07e4      	lsls	r4, r4, #31
 8002294:	085b      	lsrs	r3, r3, #1
 8002296:	4323      	orrs	r3, r4
 8002298:	0019      	movs	r1, r3
 800229a:	bd70      	pop	{r4, r5, r6, pc}
 800229c:	0002      	movs	r2, r0
 800229e:	0029      	movs	r1, r5
 80022a0:	3215      	adds	r2, #21
 80022a2:	4091      	lsls	r1, r2
 80022a4:	000a      	movs	r2, r1
 80022a6:	210b      	movs	r1, #11
 80022a8:	1a08      	subs	r0, r1, r0
 80022aa:	40c5      	lsrs	r5, r0
 80022ac:	032d      	lsls	r5, r5, #12
 80022ae:	0b2d      	lsrs	r5, r5, #12
 80022b0:	e7e3      	b.n	800227a <__aeabi_i2d+0x2a>
 80022b2:	2400      	movs	r4, #0
 80022b4:	2300      	movs	r3, #0
 80022b6:	2500      	movs	r5, #0
 80022b8:	2200      	movs	r2, #0
 80022ba:	e7de      	b.n	800227a <__aeabi_i2d+0x2a>
 80022bc:	0000041e 	.word	0x0000041e
 80022c0:	800fffff 	.word	0x800fffff

080022c4 <__aeabi_ui2d>:
 80022c4:	b510      	push	{r4, lr}
 80022c6:	1e04      	subs	r4, r0, #0
 80022c8:	d025      	beq.n	8002316 <__aeabi_ui2d+0x52>
 80022ca:	f000 f8b1 	bl	8002430 <__clzsi2>
 80022ce:	4b14      	ldr	r3, [pc, #80]	; (8002320 <__aeabi_ui2d+0x5c>)
 80022d0:	1a1b      	subs	r3, r3, r0
 80022d2:	055b      	lsls	r3, r3, #21
 80022d4:	0d5b      	lsrs	r3, r3, #21
 80022d6:	280a      	cmp	r0, #10
 80022d8:	dd12      	ble.n	8002300 <__aeabi_ui2d+0x3c>
 80022da:	380b      	subs	r0, #11
 80022dc:	4084      	lsls	r4, r0
 80022de:	2200      	movs	r2, #0
 80022e0:	0324      	lsls	r4, r4, #12
 80022e2:	0b24      	lsrs	r4, r4, #12
 80022e4:	2100      	movs	r1, #0
 80022e6:	0010      	movs	r0, r2
 80022e8:	0324      	lsls	r4, r4, #12
 80022ea:	0d0a      	lsrs	r2, r1, #20
 80022ec:	0b24      	lsrs	r4, r4, #12
 80022ee:	0512      	lsls	r2, r2, #20
 80022f0:	4322      	orrs	r2, r4
 80022f2:	4c0c      	ldr	r4, [pc, #48]	; (8002324 <__aeabi_ui2d+0x60>)
 80022f4:	051b      	lsls	r3, r3, #20
 80022f6:	4022      	ands	r2, r4
 80022f8:	4313      	orrs	r3, r2
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	0859      	lsrs	r1, r3, #1
 80022fe:	bd10      	pop	{r4, pc}
 8002300:	0002      	movs	r2, r0
 8002302:	0021      	movs	r1, r4
 8002304:	3215      	adds	r2, #21
 8002306:	4091      	lsls	r1, r2
 8002308:	000a      	movs	r2, r1
 800230a:	210b      	movs	r1, #11
 800230c:	1a08      	subs	r0, r1, r0
 800230e:	40c4      	lsrs	r4, r0
 8002310:	0324      	lsls	r4, r4, #12
 8002312:	0b24      	lsrs	r4, r4, #12
 8002314:	e7e6      	b.n	80022e4 <__aeabi_ui2d+0x20>
 8002316:	2300      	movs	r3, #0
 8002318:	2400      	movs	r4, #0
 800231a:	2200      	movs	r2, #0
 800231c:	e7e2      	b.n	80022e4 <__aeabi_ui2d+0x20>
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	0000041e 	.word	0x0000041e
 8002324:	800fffff 	.word	0x800fffff

08002328 <__aeabi_d2f>:
 8002328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800232a:	004c      	lsls	r4, r1, #1
 800232c:	0d64      	lsrs	r4, r4, #21
 800232e:	030b      	lsls	r3, r1, #12
 8002330:	1c62      	adds	r2, r4, #1
 8002332:	0a5b      	lsrs	r3, r3, #9
 8002334:	0f46      	lsrs	r6, r0, #29
 8002336:	0552      	lsls	r2, r2, #21
 8002338:	0fc9      	lsrs	r1, r1, #31
 800233a:	431e      	orrs	r6, r3
 800233c:	00c5      	lsls	r5, r0, #3
 800233e:	0d52      	lsrs	r2, r2, #21
 8002340:	2a01      	cmp	r2, #1
 8002342:	dd29      	ble.n	8002398 <__aeabi_d2f+0x70>
 8002344:	4b37      	ldr	r3, [pc, #220]	; (8002424 <__aeabi_d2f+0xfc>)
 8002346:	18e7      	adds	r7, r4, r3
 8002348:	2ffe      	cmp	r7, #254	; 0xfe
 800234a:	dc1c      	bgt.n	8002386 <__aeabi_d2f+0x5e>
 800234c:	2f00      	cmp	r7, #0
 800234e:	dd3b      	ble.n	80023c8 <__aeabi_d2f+0xa0>
 8002350:	0180      	lsls	r0, r0, #6
 8002352:	1e43      	subs	r3, r0, #1
 8002354:	4198      	sbcs	r0, r3
 8002356:	2207      	movs	r2, #7
 8002358:	00f3      	lsls	r3, r6, #3
 800235a:	0f6d      	lsrs	r5, r5, #29
 800235c:	4303      	orrs	r3, r0
 800235e:	432b      	orrs	r3, r5
 8002360:	401a      	ands	r2, r3
 8002362:	2a00      	cmp	r2, #0
 8002364:	d004      	beq.n	8002370 <__aeabi_d2f+0x48>
 8002366:	220f      	movs	r2, #15
 8002368:	401a      	ands	r2, r3
 800236a:	2a04      	cmp	r2, #4
 800236c:	d000      	beq.n	8002370 <__aeabi_d2f+0x48>
 800236e:	3304      	adds	r3, #4
 8002370:	2280      	movs	r2, #128	; 0x80
 8002372:	04d2      	lsls	r2, r2, #19
 8002374:	401a      	ands	r2, r3
 8002376:	d024      	beq.n	80023c2 <__aeabi_d2f+0x9a>
 8002378:	3701      	adds	r7, #1
 800237a:	b2fa      	uxtb	r2, r7
 800237c:	2fff      	cmp	r7, #255	; 0xff
 800237e:	d002      	beq.n	8002386 <__aeabi_d2f+0x5e>
 8002380:	019b      	lsls	r3, r3, #6
 8002382:	0a58      	lsrs	r0, r3, #9
 8002384:	e001      	b.n	800238a <__aeabi_d2f+0x62>
 8002386:	22ff      	movs	r2, #255	; 0xff
 8002388:	2000      	movs	r0, #0
 800238a:	0240      	lsls	r0, r0, #9
 800238c:	05d2      	lsls	r2, r2, #23
 800238e:	0a40      	lsrs	r0, r0, #9
 8002390:	07c9      	lsls	r1, r1, #31
 8002392:	4310      	orrs	r0, r2
 8002394:	4308      	orrs	r0, r1
 8002396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002398:	4335      	orrs	r5, r6
 800239a:	2c00      	cmp	r4, #0
 800239c:	d104      	bne.n	80023a8 <__aeabi_d2f+0x80>
 800239e:	2d00      	cmp	r5, #0
 80023a0:	d10a      	bne.n	80023b8 <__aeabi_d2f+0x90>
 80023a2:	2200      	movs	r2, #0
 80023a4:	2000      	movs	r0, #0
 80023a6:	e7f0      	b.n	800238a <__aeabi_d2f+0x62>
 80023a8:	2d00      	cmp	r5, #0
 80023aa:	d0ec      	beq.n	8002386 <__aeabi_d2f+0x5e>
 80023ac:	2080      	movs	r0, #128	; 0x80
 80023ae:	03c0      	lsls	r0, r0, #15
 80023b0:	4330      	orrs	r0, r6
 80023b2:	22ff      	movs	r2, #255	; 0xff
 80023b4:	e7e9      	b.n	800238a <__aeabi_d2f+0x62>
 80023b6:	2400      	movs	r4, #0
 80023b8:	2300      	movs	r3, #0
 80023ba:	025b      	lsls	r3, r3, #9
 80023bc:	0a58      	lsrs	r0, r3, #9
 80023be:	b2e2      	uxtb	r2, r4
 80023c0:	e7e3      	b.n	800238a <__aeabi_d2f+0x62>
 80023c2:	08db      	lsrs	r3, r3, #3
 80023c4:	003c      	movs	r4, r7
 80023c6:	e7f8      	b.n	80023ba <__aeabi_d2f+0x92>
 80023c8:	003b      	movs	r3, r7
 80023ca:	3317      	adds	r3, #23
 80023cc:	dbf3      	blt.n	80023b6 <__aeabi_d2f+0x8e>
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	041b      	lsls	r3, r3, #16
 80023d2:	4333      	orrs	r3, r6
 80023d4:	261e      	movs	r6, #30
 80023d6:	1bf6      	subs	r6, r6, r7
 80023d8:	2e1f      	cmp	r6, #31
 80023da:	dd14      	ble.n	8002406 <__aeabi_d2f+0xde>
 80023dc:	2202      	movs	r2, #2
 80023de:	4252      	negs	r2, r2
 80023e0:	1bd7      	subs	r7, r2, r7
 80023e2:	001a      	movs	r2, r3
 80023e4:	40fa      	lsrs	r2, r7
 80023e6:	0017      	movs	r7, r2
 80023e8:	2e20      	cmp	r6, #32
 80023ea:	d004      	beq.n	80023f6 <__aeabi_d2f+0xce>
 80023ec:	4a0e      	ldr	r2, [pc, #56]	; (8002428 <__aeabi_d2f+0x100>)
 80023ee:	4694      	mov	ip, r2
 80023f0:	4464      	add	r4, ip
 80023f2:	40a3      	lsls	r3, r4
 80023f4:	431d      	orrs	r5, r3
 80023f6:	002b      	movs	r3, r5
 80023f8:	1e5d      	subs	r5, r3, #1
 80023fa:	41ab      	sbcs	r3, r5
 80023fc:	2207      	movs	r2, #7
 80023fe:	433b      	orrs	r3, r7
 8002400:	401a      	ands	r2, r3
 8002402:	2700      	movs	r7, #0
 8002404:	e7ad      	b.n	8002362 <__aeabi_d2f+0x3a>
 8002406:	4a09      	ldr	r2, [pc, #36]	; (800242c <__aeabi_d2f+0x104>)
 8002408:	0028      	movs	r0, r5
 800240a:	18a2      	adds	r2, r4, r2
 800240c:	4095      	lsls	r5, r2
 800240e:	4093      	lsls	r3, r2
 8002410:	1e6c      	subs	r4, r5, #1
 8002412:	41a5      	sbcs	r5, r4
 8002414:	40f0      	lsrs	r0, r6
 8002416:	2207      	movs	r2, #7
 8002418:	432b      	orrs	r3, r5
 800241a:	4303      	orrs	r3, r0
 800241c:	401a      	ands	r2, r3
 800241e:	2700      	movs	r7, #0
 8002420:	e79f      	b.n	8002362 <__aeabi_d2f+0x3a>
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	fffffc80 	.word	0xfffffc80
 8002428:	fffffca2 	.word	0xfffffca2
 800242c:	fffffc82 	.word	0xfffffc82

08002430 <__clzsi2>:
 8002430:	211c      	movs	r1, #28
 8002432:	2301      	movs	r3, #1
 8002434:	041b      	lsls	r3, r3, #16
 8002436:	4298      	cmp	r0, r3
 8002438:	d301      	bcc.n	800243e <__clzsi2+0xe>
 800243a:	0c00      	lsrs	r0, r0, #16
 800243c:	3910      	subs	r1, #16
 800243e:	0a1b      	lsrs	r3, r3, #8
 8002440:	4298      	cmp	r0, r3
 8002442:	d301      	bcc.n	8002448 <__clzsi2+0x18>
 8002444:	0a00      	lsrs	r0, r0, #8
 8002446:	3908      	subs	r1, #8
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	4298      	cmp	r0, r3
 800244c:	d301      	bcc.n	8002452 <__clzsi2+0x22>
 800244e:	0900      	lsrs	r0, r0, #4
 8002450:	3904      	subs	r1, #4
 8002452:	a202      	add	r2, pc, #8	; (adr r2, 800245c <__clzsi2+0x2c>)
 8002454:	5c10      	ldrb	r0, [r2, r0]
 8002456:	1840      	adds	r0, r0, r1
 8002458:	4770      	bx	lr
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	02020304 	.word	0x02020304
 8002460:	01010101 	.word	0x01010101
	...

0800246c <__clzdi2>:
 800246c:	b510      	push	{r4, lr}
 800246e:	2900      	cmp	r1, #0
 8002470:	d103      	bne.n	800247a <__clzdi2+0xe>
 8002472:	f7ff ffdd 	bl	8002430 <__clzsi2>
 8002476:	3020      	adds	r0, #32
 8002478:	e002      	b.n	8002480 <__clzdi2+0x14>
 800247a:	1c08      	adds	r0, r1, #0
 800247c:	f7ff ffd8 	bl	8002430 <__clzsi2>
 8002480:	bd10      	pop	{r4, pc}
 8002482:	46c0      	nop			; (mov r8, r8)

08002484 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800248a:	1dfb      	adds	r3, r7, #7
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <HAL_Init+0x3c>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <HAL_Init+0x3c>)
 8002496:	2140      	movs	r1, #64	; 0x40
 8002498:	430a      	orrs	r2, r1
 800249a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800249c:	2000      	movs	r0, #0
 800249e:	f007 fd79 	bl	8009f94 <HAL_InitTick>
 80024a2:	1e03      	subs	r3, r0, #0
 80024a4:	d003      	beq.n	80024ae <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80024a6:	1dfb      	adds	r3, r7, #7
 80024a8:	2201      	movs	r2, #1
 80024aa:	701a      	strb	r2, [r3, #0]
 80024ac:	e001      	b.n	80024b2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024ae:	f007 fbd1 	bl	8009c54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024b2:	1dfb      	adds	r3, r7, #7
 80024b4:	781b      	ldrb	r3, [r3, #0]
}
 80024b6:	0018      	movs	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b002      	add	sp, #8
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	40022000 	.word	0x40022000

080024c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  uwTick++;
 80024c8:	4b03      	ldr	r3, [pc, #12]	; (80024d8 <HAL_IncTick+0x14>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	4b02      	ldr	r3, [pc, #8]	; (80024d8 <HAL_IncTick+0x14>)
 80024d0:	601a      	str	r2, [r3, #0]
}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20001ef8 	.word	0x20001ef8

080024dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  return uwTick;
 80024e0:	4b02      	ldr	r3, [pc, #8]	; (80024ec <HAL_GetTick+0x10>)
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	0018      	movs	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	20001ef8 	.word	0x20001ef8

080024f0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e159      	b.n	80027b6 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10a      	bne.n	8002520 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2250      	movs	r2, #80	; 0x50
 8002514:	2100      	movs	r1, #0
 8002516:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	0018      	movs	r0, r3
 800251c:	f007 fbbe 	bl	8009c9c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002524:	2210      	movs	r2, #16
 8002526:	4013      	ands	r3, r2
 8002528:	2b10      	cmp	r3, #16
 800252a:	d005      	beq.n	8002538 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2204      	movs	r2, #4
 8002534:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002536:	d00b      	beq.n	8002550 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253c:	2210      	movs	r2, #16
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2250      	movs	r2, #80	; 0x50
 8002548:	2100      	movs	r1, #0
 800254a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e132      	b.n	80027b6 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002554:	4a9a      	ldr	r2, [pc, #616]	; (80027c0 <HAL_ADC_Init+0x2d0>)
 8002556:	4013      	ands	r3, r2
 8002558:	2202      	movs	r2, #2
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2203      	movs	r2, #3
 8002568:	4013      	ands	r3, r2
 800256a:	2b01      	cmp	r3, #1
 800256c:	d108      	bne.n	8002580 <HAL_ADC_Init+0x90>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2201      	movs	r2, #1
 8002576:	4013      	ands	r3, r2
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <HAL_ADC_Init+0x90>
 800257c:	2301      	movs	r3, #1
 800257e:	e000      	b.n	8002582 <HAL_ADC_Init+0x92>
 8002580:	2300      	movs	r3, #0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d149      	bne.n	800261a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	23c0      	movs	r3, #192	; 0xc0
 800258c:	061b      	lsls	r3, r3, #24
 800258e:	429a      	cmp	r2, r3
 8002590:	d00b      	beq.n	80025aa <HAL_ADC_Init+0xba>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	2380      	movs	r3, #128	; 0x80
 8002598:	05db      	lsls	r3, r3, #23
 800259a:	429a      	cmp	r2, r3
 800259c:	d005      	beq.n	80025aa <HAL_ADC_Init+0xba>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	061b      	lsls	r3, r3, #24
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d111      	bne.n	80025ce <HAL_ADC_Init+0xde>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	0092      	lsls	r2, r2, #2
 80025b6:	0892      	lsrs	r2, r2, #2
 80025b8:	611a      	str	r2, [r3, #16]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6919      	ldr	r1, [r3, #16]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	611a      	str	r2, [r3, #16]
 80025cc:	e014      	b.n	80025f8 <HAL_ADC_Init+0x108>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	0092      	lsls	r2, r2, #2
 80025da:	0892      	lsrs	r2, r2, #2
 80025dc:	611a      	str	r2, [r3, #16]
 80025de:	4b79      	ldr	r3, [pc, #484]	; (80027c4 <HAL_ADC_Init+0x2d4>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	4b78      	ldr	r3, [pc, #480]	; (80027c4 <HAL_ADC_Init+0x2d4>)
 80025e4:	4978      	ldr	r1, [pc, #480]	; (80027c8 <HAL_ADC_Init+0x2d8>)
 80025e6:	400a      	ands	r2, r1
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	4b76      	ldr	r3, [pc, #472]	; (80027c4 <HAL_ADC_Init+0x2d4>)
 80025ec:	6819      	ldr	r1, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	4b74      	ldr	r3, [pc, #464]	; (80027c4 <HAL_ADC_Init+0x2d4>)
 80025f4:	430a      	orrs	r2, r1
 80025f6:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2118      	movs	r1, #24
 8002604:	438a      	bics	r2, r1
 8002606:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68d9      	ldr	r1, [r3, #12]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800261a:	4b6a      	ldr	r3, [pc, #424]	; (80027c4 <HAL_ADC_Init+0x2d4>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	4b69      	ldr	r3, [pc, #420]	; (80027c4 <HAL_ADC_Init+0x2d4>)
 8002620:	496a      	ldr	r1, [pc, #424]	; (80027cc <HAL_ADC_Init+0x2dc>)
 8002622:	400a      	ands	r2, r1
 8002624:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8002626:	4b67      	ldr	r3, [pc, #412]	; (80027c4 <HAL_ADC_Init+0x2d4>)
 8002628:	6819      	ldr	r1, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800262e:	065a      	lsls	r2, r3, #25
 8002630:	4b64      	ldr	r3, [pc, #400]	; (80027c4 <HAL_ADC_Init+0x2d4>)
 8002632:	430a      	orrs	r2, r1
 8002634:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	055b      	lsls	r3, r3, #21
 8002640:	4013      	ands	r3, r2
 8002642:	d108      	bne.n	8002656 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2180      	movs	r1, #128	; 0x80
 8002650:	0549      	lsls	r1, r1, #21
 8002652:	430a      	orrs	r2, r1
 8002654:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68da      	ldr	r2, [r3, #12]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	495b      	ldr	r1, [pc, #364]	; (80027d0 <HAL_ADC_Init+0x2e0>)
 8002662:	400a      	ands	r2, r1
 8002664:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68d9      	ldr	r1, [r3, #12]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d101      	bne.n	800267c <HAL_ADC_Init+0x18c>
 8002678:	2304      	movs	r3, #4
 800267a:	e000      	b.n	800267e <HAL_ADC_Init+0x18e>
 800267c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800267e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2020      	movs	r0, #32
 8002684:	5c1b      	ldrb	r3, [r3, r0]
 8002686:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002688:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	202c      	movs	r0, #44	; 0x2c
 800268e:	5c1b      	ldrb	r3, [r3, r0]
 8002690:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002692:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002698:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80026a0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80026a8:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026b6:	23c2      	movs	r3, #194	; 0xc2
 80026b8:	33ff      	adds	r3, #255	; 0xff
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d00b      	beq.n	80026d6 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68d9      	ldr	r1, [r3, #12]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2221      	movs	r2, #33	; 0x21
 80026da:	5c9b      	ldrb	r3, [r3, r2]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d11a      	bne.n	8002716 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2220      	movs	r2, #32
 80026e4:	5c9b      	ldrb	r3, [r3, r2]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d109      	bne.n	80026fe <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2180      	movs	r1, #128	; 0x80
 80026f6:	0249      	lsls	r1, r1, #9
 80026f8:	430a      	orrs	r2, r1
 80026fa:	60da      	str	r2, [r3, #12]
 80026fc:	e00b      	b.n	8002716 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002702:	2220      	movs	r2, #32
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270e:	2201      	movs	r2, #1
 8002710:	431a      	orrs	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271a:	2b01      	cmp	r3, #1
 800271c:	d11f      	bne.n	800275e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	492a      	ldr	r1, [pc, #168]	; (80027d4 <HAL_ADC_Init+0x2e4>)
 800272a:	400a      	ands	r2, r1
 800272c:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6919      	ldr	r1, [r3, #16]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800273c:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8002742:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691a      	ldr	r2, [r3, #16]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2101      	movs	r1, #1
 8002758:	430a      	orrs	r2, r1
 800275a:	611a      	str	r2, [r3, #16]
 800275c:	e00e      	b.n	800277c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	2201      	movs	r2, #1
 8002766:	4013      	ands	r3, r2
 8002768:	2b01      	cmp	r3, #1
 800276a:	d107      	bne.n	800277c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691a      	ldr	r2, [r3, #16]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2101      	movs	r1, #1
 8002778:	438a      	bics	r2, r1
 800277a:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	695a      	ldr	r2, [r3, #20]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2107      	movs	r1, #7
 8002788:	438a      	bics	r2, r1
 800278a:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6959      	ldr	r1, [r3, #20]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a8:	2203      	movs	r2, #3
 80027aa:	4393      	bics	r3, r2
 80027ac:	2201      	movs	r2, #1
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	0018      	movs	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	b002      	add	sp, #8
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	fffffefd 	.word	0xfffffefd
 80027c4:	40012708 	.word	0x40012708
 80027c8:	ffc3ffff 	.word	0xffc3ffff
 80027cc:	fdffffff 	.word	0xfdffffff
 80027d0:	fffe0219 	.word	0xfffe0219
 80027d4:	fffffc03 	.word	0xfffffc03

080027d8 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80027d8:	b590      	push	{r4, r7, lr}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027e4:	2317      	movs	r3, #23
 80027e6:	18fb      	adds	r3, r7, r3
 80027e8:	2200      	movs	r2, #0
 80027ea:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	2204      	movs	r2, #4
 80027f4:	4013      	ands	r3, r2
 80027f6:	d15e      	bne.n	80028b6 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2250      	movs	r2, #80	; 0x50
 80027fc:	5c9b      	ldrb	r3, [r3, r2]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_ADC_Start_DMA+0x2e>
 8002802:	2302      	movs	r3, #2
 8002804:	e05e      	b.n	80028c4 <HAL_ADC_Start_DMA+0xec>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2250      	movs	r2, #80	; 0x50
 800280a:	2101      	movs	r1, #1
 800280c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d007      	beq.n	8002826 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002816:	2317      	movs	r3, #23
 8002818:	18fc      	adds	r4, r7, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	0018      	movs	r0, r3
 800281e:	f000 f9bf 	bl	8002ba0 <ADC_Enable>
 8002822:	0003      	movs	r3, r0
 8002824:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002826:	2317      	movs	r3, #23
 8002828:	18fb      	adds	r3, r7, r3
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d146      	bne.n	80028be <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002834:	4a25      	ldr	r2, [pc, #148]	; (80028cc <HAL_ADC_Start_DMA+0xf4>)
 8002836:	4013      	ands	r3, r2
 8002838:	2280      	movs	r2, #128	; 0x80
 800283a:	0052      	lsls	r2, r2, #1
 800283c:	431a      	orrs	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2250      	movs	r2, #80	; 0x50
 800284c:	2100      	movs	r1, #0
 800284e:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002854:	4a1e      	ldr	r2, [pc, #120]	; (80028d0 <HAL_ADC_Start_DMA+0xf8>)
 8002856:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285c:	4a1d      	ldr	r2, [pc, #116]	; (80028d4 <HAL_ADC_Start_DMA+0xfc>)
 800285e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002864:	4a1c      	ldr	r2, [pc, #112]	; (80028d8 <HAL_ADC_Start_DMA+0x100>)
 8002866:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	221c      	movs	r2, #28
 800286e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2110      	movs	r1, #16
 800287c:	430a      	orrs	r2, r1
 800287e:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2101      	movs	r1, #1
 800288c:	430a      	orrs	r2, r1
 800288e:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	3340      	adds	r3, #64	; 0x40
 800289a:	0019      	movs	r1, r3
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f000 fd82 	bl	80033a8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2104      	movs	r1, #4
 80028b0:	430a      	orrs	r2, r1
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	e003      	b.n	80028be <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028b6:	2317      	movs	r3, #23
 80028b8:	18fb      	adds	r3, r7, r3
 80028ba:	2202      	movs	r2, #2
 80028bc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028be:	2317      	movs	r3, #23
 80028c0:	18fb      	adds	r3, r7, r3
 80028c2:	781b      	ldrb	r3, [r3, #0]
}
 80028c4:	0018      	movs	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b007      	add	sp, #28
 80028ca:	bd90      	pop	{r4, r7, pc}
 80028cc:	fffff0fe 	.word	0xfffff0fe
 80028d0:	08002c61 	.word	0x08002c61
 80028d4:	08002d15 	.word	0x08002d15
 80028d8:	08002d33 	.word	0x08002d33

080028dc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2204      	movs	r2, #4
 80028ec:	4013      	ands	r3, r2
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d106      	bne.n	8002900 <HAL_ADC_IRQHandler+0x24>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2204      	movs	r2, #4
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d00d      	beq.n	800291c <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2208      	movs	r2, #8
 8002908:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800290a:	2b08      	cmp	r3, #8
 800290c:	d154      	bne.n	80029b8 <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2208      	movs	r2, #8
 8002916:	4013      	ands	r3, r2
 8002918:	2b08      	cmp	r3, #8
 800291a:	d14d      	bne.n	80029b8 <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002920:	2210      	movs	r2, #16
 8002922:	4013      	ands	r3, r2
 8002924:	d106      	bne.n	8002934 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292a:	2280      	movs	r2, #128	; 0x80
 800292c:	0092      	lsls	r2, r2, #2
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	23c0      	movs	r3, #192	; 0xc0
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	4013      	ands	r3, r2
 8002940:	d12e      	bne.n	80029a0 <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2220      	movs	r2, #32
 8002946:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002948:	2b00      	cmp	r3, #0
 800294a:	d129      	bne.n	80029a0 <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2208      	movs	r2, #8
 8002954:	4013      	ands	r3, r2
 8002956:	2b08      	cmp	r3, #8
 8002958:	d122      	bne.n	80029a0 <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2204      	movs	r2, #4
 8002962:	4013      	ands	r3, r2
 8002964:	d110      	bne.n	8002988 <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	210c      	movs	r1, #12
 8002972:	438a      	bics	r2, r1
 8002974:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297a:	4a35      	ldr	r2, [pc, #212]	; (8002a50 <HAL_ADC_IRQHandler+0x174>)
 800297c:	4013      	ands	r3, r2
 800297e:	2201      	movs	r2, #1
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	655a      	str	r2, [r3, #84]	; 0x54
 8002986:	e00b      	b.n	80029a0 <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298c:	2220      	movs	r2, #32
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002998:	2201      	movs	r2, #1
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	0018      	movs	r0, r3
 80029a4:	f000 f856 	bl	8002a54 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d003      	beq.n	80029b8 <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	220c      	movs	r2, #12
 80029b6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2280      	movs	r2, #128	; 0x80
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b80      	cmp	r3, #128	; 0x80
 80029c4:	d115      	bne.n	80029f2 <HAL_ADC_IRQHandler+0x116>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2280      	movs	r2, #128	; 0x80
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b80      	cmp	r3, #128	; 0x80
 80029d2:	d10e      	bne.n	80029f2 <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d8:	2280      	movs	r2, #128	; 0x80
 80029da:	0252      	lsls	r2, r2, #9
 80029dc:	431a      	orrs	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	0018      	movs	r0, r3
 80029e6:	f000 f845 	bl	8002a74 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2280      	movs	r2, #128	; 0x80
 80029f0:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2210      	movs	r2, #16
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b10      	cmp	r3, #16
 80029fe:	d123      	bne.n	8002a48 <HAL_ADC_IRQHandler+0x16c>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2210      	movs	r2, #16
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b10      	cmp	r3, #16
 8002a0c:	d11c      	bne.n	8002a48 <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d006      	beq.n	8002a24 <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d10d      	bne.n	8002a40 <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a28:	2202      	movs	r2, #2
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2210      	movs	r2, #16
 8002a36:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f000 f822 	bl	8002a84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2210      	movs	r2, #16
 8002a46:	601a      	str	r2, [r3, #0]
  }
  
}
 8002a48:	46c0      	nop			; (mov r8, r8)
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b002      	add	sp, #8
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	fffffefe 	.word	0xfffffefe

08002a54 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002a5c:	46c0      	nop			; (mov r8, r8)
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b002      	add	sp, #8
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a6c:	46c0      	nop			; (mov r8, r8)
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b002      	add	sp, #8
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002a7c:	46c0      	nop			; (mov r8, r8)
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	b002      	add	sp, #8
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a8c:	46c0      	nop			; (mov r8, r8)
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b002      	add	sp, #8
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2250      	movs	r2, #80	; 0x50
 8002aa2:	5c9b      	ldrb	r3, [r3, r2]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d101      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x18>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e06c      	b.n	8002b86 <HAL_ADC_ConfigChannel+0xf2>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2250      	movs	r2, #80	; 0x50
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2204      	movs	r2, #4
 8002abc:	4013      	ands	r3, r2
 8002abe:	d00b      	beq.n	8002ad8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2250      	movs	r2, #80	; 0x50
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e056      	b.n	8002b86 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	4a2c      	ldr	r2, [pc, #176]	; (8002b90 <HAL_ADC_ConfigChannel+0xfc>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d028      	beq.n	8002b34 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	035b      	lsls	r3, r3, #13
 8002aee:	0b5a      	lsrs	r2, r3, #13
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	2380      	movs	r3, #128	; 0x80
 8002afe:	02db      	lsls	r3, r3, #11
 8002b00:	4013      	ands	r3, r2
 8002b02:	d009      	beq.n	8002b18 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8002b04:	4b23      	ldr	r3, [pc, #140]	; (8002b94 <HAL_ADC_ConfigChannel+0x100>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4b22      	ldr	r3, [pc, #136]	; (8002b94 <HAL_ADC_ConfigChannel+0x100>)
 8002b0a:	2180      	movs	r1, #128	; 0x80
 8002b0c:	0409      	lsls	r1, r1, #16
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002b12:	200a      	movs	r0, #10
 8002b14:	f000 f928 	bl	8002d68 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	029b      	lsls	r3, r3, #10
 8002b20:	4013      	ands	r3, r2
 8002b22:	d02b      	beq.n	8002b7c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8002b24:	4b1b      	ldr	r3, [pc, #108]	; (8002b94 <HAL_ADC_ConfigChannel+0x100>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <HAL_ADC_ConfigChannel+0x100>)
 8002b2a:	2180      	movs	r1, #128	; 0x80
 8002b2c:	03c9      	lsls	r1, r1, #15
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	e023      	b.n	8002b7c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	035b      	lsls	r3, r3, #13
 8002b40:	0b5b      	lsrs	r3, r3, #13
 8002b42:	43d9      	mvns	r1, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	400a      	ands	r2, r1
 8002b4a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	2380      	movs	r3, #128	; 0x80
 8002b52:	02db      	lsls	r3, r3, #11
 8002b54:	4013      	ands	r3, r2
 8002b56:	d005      	beq.n	8002b64 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8002b58:	4b0e      	ldr	r3, [pc, #56]	; (8002b94 <HAL_ADC_ConfigChannel+0x100>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4b0d      	ldr	r3, [pc, #52]	; (8002b94 <HAL_ADC_ConfigChannel+0x100>)
 8002b5e:	490e      	ldr	r1, [pc, #56]	; (8002b98 <HAL_ADC_ConfigChannel+0x104>)
 8002b60:	400a      	ands	r2, r1
 8002b62:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	2380      	movs	r3, #128	; 0x80
 8002b6a:	029b      	lsls	r3, r3, #10
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	d005      	beq.n	8002b7c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8002b70:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <HAL_ADC_ConfigChannel+0x100>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <HAL_ADC_ConfigChannel+0x100>)
 8002b76:	4909      	ldr	r1, [pc, #36]	; (8002b9c <HAL_ADC_ConfigChannel+0x108>)
 8002b78:	400a      	ands	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2250      	movs	r2, #80	; 0x50
 8002b80:	2100      	movs	r1, #0
 8002b82:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	0018      	movs	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b002      	add	sp, #8
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	00001001 	.word	0x00001001
 8002b94:	40012708 	.word	0x40012708
 8002b98:	ff7fffff 	.word	0xff7fffff
 8002b9c:	ffbfffff 	.word	0xffbfffff

08002ba0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2203      	movs	r2, #3
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d108      	bne.n	8002bcc <ADC_Enable+0x2c>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <ADC_Enable+0x2c>
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e000      	b.n	8002bce <ADC_Enable+0x2e>
 8002bcc:	2300      	movs	r3, #0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d13f      	bne.n	8002c52 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	4a20      	ldr	r2, [pc, #128]	; (8002c5c <ADC_Enable+0xbc>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d00d      	beq.n	8002bfa <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be2:	2210      	movs	r2, #16
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bee:	2201      	movs	r2, #1
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e02c      	b.n	8002c54 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2101      	movs	r1, #1
 8002c06:	430a      	orrs	r2, r1
 8002c08:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002c0a:	2001      	movs	r0, #1
 8002c0c:	f000 f8ac 	bl	8002d68 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c10:	f7ff fc64 	bl	80024dc <HAL_GetTick>
 8002c14:	0003      	movs	r3, r0
 8002c16:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002c18:	e014      	b.n	8002c44 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c1a:	f7ff fc5f 	bl	80024dc <HAL_GetTick>
 8002c1e:	0002      	movs	r2, r0
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b0a      	cmp	r3, #10
 8002c26:	d90d      	bls.n	8002c44 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2c:	2210      	movs	r2, #16
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c38:	2201      	movs	r2, #1
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e007      	b.n	8002c54 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d1e3      	bne.n	8002c1a <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	0018      	movs	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	b004      	add	sp, #16
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	80000017 	.word	0x80000017

08002c60 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c72:	2250      	movs	r2, #80	; 0x50
 8002c74:	4013      	ands	r3, r2
 8002c76:	d141      	bne.n	8002cfc <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7c:	2280      	movs	r2, #128	; 0x80
 8002c7e:	0092      	lsls	r2, r2, #2
 8002c80:	431a      	orrs	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	23c0      	movs	r3, #192	; 0xc0
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	4013      	ands	r3, r2
 8002c92:	d12e      	bne.n	8002cf2 <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2220      	movs	r2, #32
 8002c98:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d129      	bne.n	8002cf2 <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2208      	movs	r2, #8
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d122      	bne.n	8002cf2 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2204      	movs	r2, #4
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d110      	bne.n	8002cda <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	210c      	movs	r1, #12
 8002cc4:	438a      	bics	r2, r1
 8002cc6:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ccc:	4a10      	ldr	r2, [pc, #64]	; (8002d10 <ADC_DMAConvCplt+0xb0>)
 8002cce:	4013      	ands	r3, r2
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	655a      	str	r2, [r3, #84]	; 0x54
 8002cd8:	e00b      	b.n	8002cf2 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cde:	2220      	movs	r2, #32
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cea:	2201      	movs	r2, #1
 8002cec:	431a      	orrs	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f7ff fead 	bl	8002a54 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002cfa:	e005      	b.n	8002d08 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	0010      	movs	r0, r2
 8002d06:	4798      	blx	r3
}
 8002d08:	46c0      	nop			; (mov r8, r8)
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b004      	add	sp, #16
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	fffffefe 	.word	0xfffffefe

08002d14 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d20:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	0018      	movs	r0, r3
 8002d26:	f7ff fe9d 	bl	8002a64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	b004      	add	sp, #16
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d44:	2240      	movs	r2, #64	; 0x40
 8002d46:	431a      	orrs	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d50:	2204      	movs	r2, #4
 8002d52:	431a      	orrs	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f7ff fe92 	bl	8002a84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d60:	46c0      	nop			; (mov r8, r8)
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b004      	add	sp, #16
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002d70:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <ADC_DelayMicroSecond+0x34>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	490a      	ldr	r1, [pc, #40]	; (8002da0 <ADC_DelayMicroSecond+0x38>)
 8002d76:	0018      	movs	r0, r3
 8002d78:	f7fd f9c6 	bl	8000108 <__udivsi3>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	001a      	movs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4353      	muls	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8002d86:	e002      	b.n	8002d8e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1f9      	bne.n	8002d88 <ADC_DelayMicroSecond+0x20>
  } 
}
 8002d94:	46c0      	nop			; (mov r8, r8)
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b004      	add	sp, #16
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	20000004 	.word	0x20000004
 8002da0:	000f4240 	.word	0x000f4240

08002da4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	0002      	movs	r2, r0
 8002dac:	1dfb      	adds	r3, r7, #7
 8002dae:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002db0:	1dfb      	adds	r3, r7, #7
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	001a      	movs	r2, r3
 8002db6:	231f      	movs	r3, #31
 8002db8:	401a      	ands	r2, r3
 8002dba:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <NVIC_EnableIRQ+0x28>)
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	4091      	lsls	r1, r2
 8002dc0:	000a      	movs	r2, r1
 8002dc2:	601a      	str	r2, [r3, #0]
}
 8002dc4:	46c0      	nop			; (mov r8, r8)
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	b002      	add	sp, #8
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	e000e100 	.word	0xe000e100

08002dd0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dd0:	b590      	push	{r4, r7, lr}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	0002      	movs	r2, r0
 8002dd8:	6039      	str	r1, [r7, #0]
 8002dda:	1dfb      	adds	r3, r7, #7
 8002ddc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8002dde:	1dfb      	adds	r3, r7, #7
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b7f      	cmp	r3, #127	; 0x7f
 8002de4:	d932      	bls.n	8002e4c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002de6:	4a2f      	ldr	r2, [pc, #188]	; (8002ea4 <NVIC_SetPriority+0xd4>)
 8002de8:	1dfb      	adds	r3, r7, #7
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	0019      	movs	r1, r3
 8002dee:	230f      	movs	r3, #15
 8002df0:	400b      	ands	r3, r1
 8002df2:	3b08      	subs	r3, #8
 8002df4:	089b      	lsrs	r3, r3, #2
 8002df6:	3306      	adds	r3, #6
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	18d3      	adds	r3, r2, r3
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	1dfa      	adds	r2, r7, #7
 8002e02:	7812      	ldrb	r2, [r2, #0]
 8002e04:	0011      	movs	r1, r2
 8002e06:	2203      	movs	r2, #3
 8002e08:	400a      	ands	r2, r1
 8002e0a:	00d2      	lsls	r2, r2, #3
 8002e0c:	21ff      	movs	r1, #255	; 0xff
 8002e0e:	4091      	lsls	r1, r2
 8002e10:	000a      	movs	r2, r1
 8002e12:	43d2      	mvns	r2, r2
 8002e14:	401a      	ands	r2, r3
 8002e16:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	019b      	lsls	r3, r3, #6
 8002e1c:	22ff      	movs	r2, #255	; 0xff
 8002e1e:	401a      	ands	r2, r3
 8002e20:	1dfb      	adds	r3, r7, #7
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	0018      	movs	r0, r3
 8002e26:	2303      	movs	r3, #3
 8002e28:	4003      	ands	r3, r0
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e2e:	481d      	ldr	r0, [pc, #116]	; (8002ea4 <NVIC_SetPriority+0xd4>)
 8002e30:	1dfb      	adds	r3, r7, #7
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	001c      	movs	r4, r3
 8002e36:	230f      	movs	r3, #15
 8002e38:	4023      	ands	r3, r4
 8002e3a:	3b08      	subs	r3, #8
 8002e3c:	089b      	lsrs	r3, r3, #2
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	3306      	adds	r3, #6
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	18c3      	adds	r3, r0, r3
 8002e46:	3304      	adds	r3, #4
 8002e48:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002e4a:	e027      	b.n	8002e9c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e4c:	4a16      	ldr	r2, [pc, #88]	; (8002ea8 <NVIC_SetPriority+0xd8>)
 8002e4e:	1dfb      	adds	r3, r7, #7
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	b25b      	sxtb	r3, r3
 8002e54:	089b      	lsrs	r3, r3, #2
 8002e56:	33c0      	adds	r3, #192	; 0xc0
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	589b      	ldr	r3, [r3, r2]
 8002e5c:	1dfa      	adds	r2, r7, #7
 8002e5e:	7812      	ldrb	r2, [r2, #0]
 8002e60:	0011      	movs	r1, r2
 8002e62:	2203      	movs	r2, #3
 8002e64:	400a      	ands	r2, r1
 8002e66:	00d2      	lsls	r2, r2, #3
 8002e68:	21ff      	movs	r1, #255	; 0xff
 8002e6a:	4091      	lsls	r1, r2
 8002e6c:	000a      	movs	r2, r1
 8002e6e:	43d2      	mvns	r2, r2
 8002e70:	401a      	ands	r2, r3
 8002e72:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	019b      	lsls	r3, r3, #6
 8002e78:	22ff      	movs	r2, #255	; 0xff
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	1dfb      	adds	r3, r7, #7
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	0018      	movs	r0, r3
 8002e82:	2303      	movs	r3, #3
 8002e84:	4003      	ands	r3, r0
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e8a:	4807      	ldr	r0, [pc, #28]	; (8002ea8 <NVIC_SetPriority+0xd8>)
 8002e8c:	1dfb      	adds	r3, r7, #7
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	b25b      	sxtb	r3, r3
 8002e92:	089b      	lsrs	r3, r3, #2
 8002e94:	430a      	orrs	r2, r1
 8002e96:	33c0      	adds	r3, #192	; 0xc0
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	501a      	str	r2, [r3, r0]
}
 8002e9c:	46c0      	nop			; (mov r8, r8)
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b003      	add	sp, #12
 8002ea2:	bd90      	pop	{r4, r7, pc}
 8002ea4:	e000ed00 	.word	0xe000ed00
 8002ea8:	e000e100 	.word	0xe000e100

08002eac <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
 8002eb6:	210f      	movs	r1, #15
 8002eb8:	187b      	adds	r3, r7, r1
 8002eba:	1c02      	adds	r2, r0, #0
 8002ebc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	187b      	adds	r3, r7, r1
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	b25b      	sxtb	r3, r3
 8002ec6:	0011      	movs	r1, r2
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f7ff ff81 	bl	8002dd0 <NVIC_SetPriority>
}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	b004      	add	sp, #16
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	0002      	movs	r2, r0
 8002ede:	1dfb      	adds	r3, r7, #7
 8002ee0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ee2:	1dfb      	adds	r3, r7, #7
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	b25b      	sxtb	r3, r3
 8002ee8:	0018      	movs	r0, r3
 8002eea:	f7ff ff5b 	bl	8002da4 <NVIC_EnableIRQ>
}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	b002      	add	sp, #8
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e056      	b.n	8002fb8 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	7f5b      	ldrb	r3, [r3, #29]
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d106      	bne.n	8002f22 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f006 ff33 	bl	8009d88 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2202      	movs	r2, #2
 8002f26:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	791b      	ldrb	r3, [r3, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10c      	bne.n	8002f4a <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a22      	ldr	r2, [pc, #136]	; (8002fc0 <HAL_CRC_Init+0xc8>)
 8002f36:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2118      	movs	r1, #24
 8002f44:	438a      	bics	r2, r1
 8002f46:	609a      	str	r2, [r3, #8]
 8002f48:	e00b      	b.n	8002f62 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6899      	ldr	r1, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	0018      	movs	r0, r3
 8002f56:	f000 f94a 	bl	80031ee <HAL_CRCEx_Polynomial_Set>
 8002f5a:	1e03      	subs	r3, r0, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e02a      	b.n	8002fb8 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	795b      	ldrb	r3, [r3, #5]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d105      	bne.n	8002f76 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	4252      	negs	r2, r2
 8002f72:	611a      	str	r2, [r3, #16]
 8002f74:	e004      	b.n	8002f80 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6912      	ldr	r2, [r2, #16]
 8002f7e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2260      	movs	r2, #96	; 0x60
 8002f88:	4393      	bics	r3, r2
 8002f8a:	0019      	movs	r1, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	695a      	ldr	r2, [r3, #20]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2280      	movs	r2, #128	; 0x80
 8002fa0:	4393      	bics	r3, r2
 8002fa2:	0019      	movs	r1, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699a      	ldr	r2, [r3, #24]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	0018      	movs	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b002      	add	sp, #8
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	04c11db7 	.word	0x04c11db7

08002fc4 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d024      	beq.n	800303c <HAL_CRC_Calculate+0x78>
 8002ff2:	2b03      	cmp	r3, #3
 8002ff4:	d002      	beq.n	8002ffc <HAL_CRC_Calculate+0x38>
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d017      	beq.n	800302a <HAL_CRC_Calculate+0x66>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8002ffa:	e028      	b.n	800304e <HAL_CRC_Calculate+0x8a>
      for (index = 0U; index < BufferLength; index++)
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	e00a      	b.n	8003018 <HAL_CRC_Calculate+0x54>
        hcrc->Instance->DR = pBuffer[index];
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	18d2      	adds	r2, r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	3301      	adds	r3, #1
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	429a      	cmp	r2, r3
 800301e:	d3f0      	bcc.n	8003002 <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	613b      	str	r3, [r7, #16]
      break;
 8003028:	e011      	b.n	800304e <HAL_CRC_Calculate+0x8a>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	68b9      	ldr	r1, [r7, #8]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	0018      	movs	r0, r3
 8003032:	f000 f814 	bl	800305e <CRC_Handle_8>
 8003036:	0003      	movs	r3, r0
 8003038:	613b      	str	r3, [r7, #16]
      break;
 800303a:	e008      	b.n	800304e <HAL_CRC_Calculate+0x8a>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	68b9      	ldr	r1, [r7, #8]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	0018      	movs	r0, r3
 8003044:	f000 f89c 	bl	8003180 <CRC_Handle_16>
 8003048:	0003      	movs	r3, r0
 800304a:	613b      	str	r3, [r7, #16]
      break;
 800304c:	46c0      	nop			; (mov r8, r8)
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8003054:	693b      	ldr	r3, [r7, #16]
}
 8003056:	0018      	movs	r0, r3
 8003058:	46bd      	mov	sp, r7
 800305a:	b006      	add	sp, #24
 800305c:	bd80      	pop	{r7, pc}

0800305e <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b088      	sub	sp, #32
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800306a:	2300      	movs	r3, #0
 800306c:	61fb      	str	r3, [r7, #28]
 800306e:	e023      	b.n	80030b8 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	18d3      	adds	r3, r2, r3
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	3301      	adds	r3, #1
 8003082:	68b9      	ldr	r1, [r7, #8]
 8003084:	18cb      	adds	r3, r1, r3
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800308a:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	3302      	adds	r3, #2
 8003092:	68b9      	ldr	r1, [r7, #8]
 8003094:	18cb      	adds	r3, r1, r3
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800309a:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	3303      	adds	r3, #3
 80030a2:	68b9      	ldr	r1, [r7, #8]
 80030a4:	18cb      	adds	r3, r1, r3
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	0019      	movs	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80030ae:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80030b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	3301      	adds	r3, #1
 80030b6:	61fb      	str	r3, [r7, #28]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	089b      	lsrs	r3, r3, #2
 80030bc:	69fa      	ldr	r2, [r7, #28]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d3d6      	bcc.n	8003070 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2203      	movs	r2, #3
 80030c6:	4013      	ands	r3, r2
 80030c8:	d053      	beq.n	8003172 <CRC_Handle_8+0x114>
  {
    if ((BufferLength % 4U) == 1U)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2203      	movs	r2, #3
 80030ce:	4013      	ands	r3, r2
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d107      	bne.n	80030e4 <CRC_Handle_8+0x86>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	18d2      	adds	r2, r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	7812      	ldrb	r2, [r2, #0]
 80030e2:	701a      	strb	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2203      	movs	r2, #3
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d119      	bne.n	8003122 <CRC_Handle_8+0xc4>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	18d3      	adds	r3, r2, r3
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	021b      	lsls	r3, r3, #8
 80030fa:	b21a      	sxth	r2, r3
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	3301      	adds	r3, #1
 8003102:	68b9      	ldr	r1, [r7, #8]
 8003104:	18cb      	adds	r3, r1, r3
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	b21b      	sxth	r3, r3
 800310a:	4313      	orrs	r3, r2
 800310c:	b21a      	sxth	r2, r3
 800310e:	211a      	movs	r1, #26
 8003110:	187b      	adds	r3, r7, r1
 8003112:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	187a      	adds	r2, r7, r1
 800311e:	8812      	ldrh	r2, [r2, #0]
 8003120:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2203      	movs	r2, #3
 8003126:	4013      	ands	r3, r2
 8003128:	2b03      	cmp	r3, #3
 800312a:	d122      	bne.n	8003172 <CRC_Handle_8+0x114>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	18d3      	adds	r3, r2, r3
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	021b      	lsls	r3, r3, #8
 8003138:	b21a      	sxth	r2, r3
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	3301      	adds	r3, #1
 8003140:	68b9      	ldr	r1, [r7, #8]
 8003142:	18cb      	adds	r3, r1, r3
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	b21b      	sxth	r3, r3
 8003148:	4313      	orrs	r3, r2
 800314a:	b21a      	sxth	r2, r3
 800314c:	211a      	movs	r1, #26
 800314e:	187b      	adds	r3, r7, r1
 8003150:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	187a      	adds	r2, r7, r1
 800315c:	8812      	ldrh	r2, [r2, #0]
 800315e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	3302      	adds	r3, #2
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	18d2      	adds	r2, r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	7812      	ldrb	r2, [r2, #0]
 8003170:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
}
 8003178:	0018      	movs	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	b008      	add	sp, #32
 800317e:	bd80      	pop	{r7, pc}

08003180 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800318c:	2300      	movs	r3, #0
 800318e:	617b      	str	r3, [r7, #20]
 8003190:	e013      	b.n	80031ba <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	18d3      	adds	r3, r2, r3
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	041a      	lsls	r2, r3, #16
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	3302      	adds	r3, #2
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	18cb      	adds	r3, r1, r3
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	0019      	movs	r1, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	3301      	adds	r3, #1
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	085b      	lsrs	r3, r3, #1
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d3e6      	bcc.n	8003192 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	4013      	ands	r3, r2
 80031ca:	d009      	beq.n	80031e0 <CRC_Handle_16+0x60>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	18d3      	adds	r3, r2, r3
 80031da:	881a      	ldrh	r2, [r3, #0]
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
}
 80031e6:	0018      	movs	r0, r3
 80031e8:	46bd      	mov	sp, r7
 80031ea:	b006      	add	sp, #24
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b086      	sub	sp, #24
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	60f8      	str	r0, [r7, #12]
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031fa:	2317      	movs	r3, #23
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	2200      	movs	r2, #0
 8003200:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003202:	231f      	movs	r3, #31
 8003204:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1e5a      	subs	r2, r3, #1
 800320c:	613a      	str	r2, [r7, #16]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d008      	beq.n	8003224 <HAL_CRCEx_Polynomial_Set+0x36>
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	221f      	movs	r2, #31
 8003216:	4013      	ands	r3, r2
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	40da      	lsrs	r2, r3
 800321c:	0013      	movs	r3, r2
 800321e:	2201      	movs	r2, #1
 8003220:	4013      	ands	r3, r2
 8003222:	d0f1      	beq.n	8003208 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b08      	cmp	r3, #8
 8003228:	d017      	beq.n	800325a <HAL_CRCEx_Polynomial_Set+0x6c>
 800322a:	d802      	bhi.n	8003232 <HAL_CRCEx_Polynomial_Set+0x44>
 800322c:	2b00      	cmp	r3, #0
 800322e:	d021      	beq.n	8003274 <HAL_CRCEx_Polynomial_Set+0x86>
 8003230:	e01b      	b.n	800326a <HAL_CRCEx_Polynomial_Set+0x7c>
 8003232:	2b10      	cmp	r3, #16
 8003234:	d009      	beq.n	800324a <HAL_CRCEx_Polynomial_Set+0x5c>
 8003236:	2b18      	cmp	r3, #24
 8003238:	d117      	bne.n	800326a <HAL_CRCEx_Polynomial_Set+0x7c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	2b06      	cmp	r3, #6
 800323e:	d91b      	bls.n	8003278 <HAL_CRCEx_Polynomial_Set+0x8a>
      {
        status =   HAL_ERROR;
 8003240:	2317      	movs	r3, #23
 8003242:	18fb      	adds	r3, r7, r3
 8003244:	2201      	movs	r2, #1
 8003246:	701a      	strb	r2, [r3, #0]
      }
      break;
 8003248:	e016      	b.n	8003278 <HAL_CRCEx_Polynomial_Set+0x8a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	2b07      	cmp	r3, #7
 800324e:	d915      	bls.n	800327c <HAL_CRCEx_Polynomial_Set+0x8e>
      {
        status =   HAL_ERROR;
 8003250:	2317      	movs	r3, #23
 8003252:	18fb      	adds	r3, r7, r3
 8003254:	2201      	movs	r2, #1
 8003256:	701a      	strb	r2, [r3, #0]
      }
      break;
 8003258:	e010      	b.n	800327c <HAL_CRCEx_Polynomial_Set+0x8e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	2b0f      	cmp	r3, #15
 800325e:	d90f      	bls.n	8003280 <HAL_CRCEx_Polynomial_Set+0x92>
      {
        status =   HAL_ERROR;
 8003260:	2317      	movs	r3, #23
 8003262:	18fb      	adds	r3, r7, r3
 8003264:	2201      	movs	r2, #1
 8003266:	701a      	strb	r2, [r3, #0]
      }
      break;
 8003268:	e00a      	b.n	8003280 <HAL_CRCEx_Polynomial_Set+0x92>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800326a:	2317      	movs	r3, #23
 800326c:	18fb      	adds	r3, r7, r3
 800326e:	2201      	movs	r2, #1
 8003270:	701a      	strb	r2, [r3, #0]
      break;
 8003272:	e006      	b.n	8003282 <HAL_CRCEx_Polynomial_Set+0x94>
      break;
 8003274:	46c0      	nop			; (mov r8, r8)
 8003276:	e004      	b.n	8003282 <HAL_CRCEx_Polynomial_Set+0x94>
      break;
 8003278:	46c0      	nop			; (mov r8, r8)
 800327a:	e002      	b.n	8003282 <HAL_CRCEx_Polynomial_Set+0x94>
      break;
 800327c:	46c0      	nop			; (mov r8, r8)
 800327e:	e000      	b.n	8003282 <HAL_CRCEx_Polynomial_Set+0x94>
      break;
 8003280:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8003282:	2317      	movs	r3, #23
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10e      	bne.n	80032aa <HAL_CRCEx_Polynomial_Set+0xbc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2218      	movs	r2, #24
 800329c:	4393      	bics	r3, r2
 800329e:	0019      	movs	r1, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80032aa:	2317      	movs	r3, #23
 80032ac:	18fb      	adds	r3, r7, r3
 80032ae:	781b      	ldrb	r3, [r3, #0]
}
 80032b0:	0018      	movs	r0, r3
 80032b2:	46bd      	mov	sp, r7
 80032b4:	b006      	add	sp, #24
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e061      	b.n	800338e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a32      	ldr	r2, [pc, #200]	; (8003398 <HAL_DMA_Init+0xe0>)
 80032d0:	4694      	mov	ip, r2
 80032d2:	4463      	add	r3, ip
 80032d4:	2114      	movs	r1, #20
 80032d6:	0018      	movs	r0, r3
 80032d8:	f7fc ff16 	bl	8000108 <__udivsi3>
 80032dc:	0003      	movs	r3, r0
 80032de:	009a      	lsls	r2, r3, #2
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a2d      	ldr	r2, [pc, #180]	; (800339c <HAL_DMA_Init+0xe4>)
 80032e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2225      	movs	r2, #37	; 0x25
 80032ee:	2102      	movs	r1, #2
 80032f0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4a28      	ldr	r2, [pc, #160]	; (80033a0 <HAL_DMA_Init+0xe8>)
 80032fe:	4013      	ands	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800330a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003316:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003322:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4313      	orrs	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	2380      	movs	r3, #128	; 0x80
 800333e:	01db      	lsls	r3, r3, #7
 8003340:	429a      	cmp	r2, r3
 8003342:	d018      	beq.n	8003376 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003344:	4b17      	ldr	r3, [pc, #92]	; (80033a4 <HAL_DMA_Init+0xec>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334c:	211c      	movs	r1, #28
 800334e:	400b      	ands	r3, r1
 8003350:	210f      	movs	r1, #15
 8003352:	4099      	lsls	r1, r3
 8003354:	000b      	movs	r3, r1
 8003356:	43d9      	mvns	r1, r3
 8003358:	4b12      	ldr	r3, [pc, #72]	; (80033a4 <HAL_DMA_Init+0xec>)
 800335a:	400a      	ands	r2, r1
 800335c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800335e:	4b11      	ldr	r3, [pc, #68]	; (80033a4 <HAL_DMA_Init+0xec>)
 8003360:	6819      	ldr	r1, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	201c      	movs	r0, #28
 800336c:	4003      	ands	r3, r0
 800336e:	409a      	lsls	r2, r3
 8003370:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <HAL_DMA_Init+0xec>)
 8003372:	430a      	orrs	r2, r1
 8003374:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2225      	movs	r2, #37	; 0x25
 8003380:	2101      	movs	r1, #1
 8003382:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2224      	movs	r2, #36	; 0x24
 8003388:	2100      	movs	r1, #0
 800338a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	0018      	movs	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	b004      	add	sp, #16
 8003394:	bd80      	pop	{r7, pc}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	bffdfff8 	.word	0xbffdfff8
 800339c:	40020000 	.word	0x40020000
 80033a0:	ffff800f 	.word	0xffff800f
 80033a4:	400200a8 	.word	0x400200a8

080033a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033b6:	2317      	movs	r3, #23
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	2200      	movs	r2, #0
 80033bc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2224      	movs	r2, #36	; 0x24
 80033c2:	5c9b      	ldrb	r3, [r3, r2]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <HAL_DMA_Start_IT+0x24>
 80033c8:	2302      	movs	r3, #2
 80033ca:	e04f      	b.n	800346c <HAL_DMA_Start_IT+0xc4>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2224      	movs	r2, #36	; 0x24
 80033d0:	2101      	movs	r1, #1
 80033d2:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2225      	movs	r2, #37	; 0x25
 80033d8:	5c9b      	ldrb	r3, [r3, r2]
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d13a      	bne.n	8003456 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2225      	movs	r2, #37	; 0x25
 80033e4:	2102      	movs	r1, #2
 80033e6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2101      	movs	r1, #1
 80033fa:	438a      	bics	r2, r1
 80033fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	68b9      	ldr	r1, [r7, #8]
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 f92b 	bl	8003660 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	2b00      	cmp	r3, #0
 8003410:	d008      	beq.n	8003424 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	210e      	movs	r1, #14
 800341e:	430a      	orrs	r2, r1
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	e00f      	b.n	8003444 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2104      	movs	r1, #4
 8003430:	438a      	bics	r2, r1
 8003432:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	210a      	movs	r1, #10
 8003440:	430a      	orrs	r2, r1
 8003442:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2101      	movs	r1, #1
 8003450:	430a      	orrs	r2, r1
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	e007      	b.n	8003466 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2224      	movs	r2, #36	; 0x24
 800345a:	2100      	movs	r1, #0
 800345c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800345e:	2317      	movs	r3, #23
 8003460:	18fb      	adds	r3, r7, r3
 8003462:	2202      	movs	r2, #2
 8003464:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8003466:	2317      	movs	r3, #23
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	781b      	ldrb	r3, [r3, #0]
}
 800346c:	0018      	movs	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	b006      	add	sp, #24
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800347c:	230f      	movs	r3, #15
 800347e:	18fb      	adds	r3, r7, r3
 8003480:	2200      	movs	r2, #0
 8003482:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2225      	movs	r2, #37	; 0x25
 8003488:	5c9b      	ldrb	r3, [r3, r2]
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d007      	beq.n	80034a0 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2204      	movs	r2, #4
 8003494:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003496:	230f      	movs	r3, #15
 8003498:	18fb      	adds	r3, r7, r3
 800349a:	2201      	movs	r2, #1
 800349c:	701a      	strb	r2, [r3, #0]
 800349e:	e02a      	b.n	80034f6 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	210e      	movs	r1, #14
 80034ac:	438a      	bics	r2, r1
 80034ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2101      	movs	r1, #1
 80034bc:	438a      	bics	r2, r1
 80034be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c4:	221c      	movs	r2, #28
 80034c6:	401a      	ands	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	2101      	movs	r1, #1
 80034ce:	4091      	lsls	r1, r2
 80034d0:	000a      	movs	r2, r1
 80034d2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2225      	movs	r2, #37	; 0x25
 80034d8:	2101      	movs	r1, #1
 80034da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2224      	movs	r2, #36	; 0x24
 80034e0:	2100      	movs	r1, #0
 80034e2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d004      	beq.n	80034f6 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	0010      	movs	r0, r2
 80034f4:	4798      	blx	r3
    }
  }
  return status;
 80034f6:	230f      	movs	r3, #15
 80034f8:	18fb      	adds	r3, r7, r3
 80034fa:	781b      	ldrb	r3, [r3, #0]
}
 80034fc:	0018      	movs	r0, r3
 80034fe:	46bd      	mov	sp, r7
 8003500:	b004      	add	sp, #16
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003520:	221c      	movs	r2, #28
 8003522:	4013      	ands	r3, r2
 8003524:	2204      	movs	r2, #4
 8003526:	409a      	lsls	r2, r3
 8003528:	0013      	movs	r3, r2
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4013      	ands	r3, r2
 800352e:	d026      	beq.n	800357e <HAL_DMA_IRQHandler+0x7a>
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2204      	movs	r2, #4
 8003534:	4013      	ands	r3, r2
 8003536:	d022      	beq.n	800357e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2220      	movs	r2, #32
 8003540:	4013      	ands	r3, r2
 8003542:	d107      	bne.n	8003554 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2104      	movs	r1, #4
 8003550:	438a      	bics	r2, r1
 8003552:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003558:	221c      	movs	r2, #28
 800355a:	401a      	ands	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	2104      	movs	r1, #4
 8003562:	4091      	lsls	r1, r2
 8003564:	000a      	movs	r2, r1
 8003566:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	2b00      	cmp	r3, #0
 800356e:	d100      	bne.n	8003572 <HAL_DMA_IRQHandler+0x6e>
 8003570:	e071      	b.n	8003656 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	0010      	movs	r0, r2
 800357a:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800357c:	e06b      	b.n	8003656 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	221c      	movs	r2, #28
 8003584:	4013      	ands	r3, r2
 8003586:	2202      	movs	r2, #2
 8003588:	409a      	lsls	r2, r3
 800358a:	0013      	movs	r3, r2
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	4013      	ands	r3, r2
 8003590:	d02d      	beq.n	80035ee <HAL_DMA_IRQHandler+0xea>
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2202      	movs	r2, #2
 8003596:	4013      	ands	r3, r2
 8003598:	d029      	beq.n	80035ee <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2220      	movs	r2, #32
 80035a2:	4013      	ands	r3, r2
 80035a4:	d10b      	bne.n	80035be <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	210a      	movs	r1, #10
 80035b2:	438a      	bics	r2, r1
 80035b4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2225      	movs	r2, #37	; 0x25
 80035ba:	2101      	movs	r1, #1
 80035bc:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c2:	221c      	movs	r2, #28
 80035c4:	401a      	ands	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	2102      	movs	r1, #2
 80035cc:	4091      	lsls	r1, r2
 80035ce:	000a      	movs	r2, r1
 80035d0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2224      	movs	r2, #36	; 0x24
 80035d6:	2100      	movs	r1, #0
 80035d8:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d039      	beq.n	8003656 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	0010      	movs	r0, r2
 80035ea:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80035ec:	e033      	b.n	8003656 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f2:	221c      	movs	r2, #28
 80035f4:	4013      	ands	r3, r2
 80035f6:	2208      	movs	r2, #8
 80035f8:	409a      	lsls	r2, r3
 80035fa:	0013      	movs	r3, r2
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	4013      	ands	r3, r2
 8003600:	d02a      	beq.n	8003658 <HAL_DMA_IRQHandler+0x154>
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2208      	movs	r2, #8
 8003606:	4013      	ands	r3, r2
 8003608:	d026      	beq.n	8003658 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	210e      	movs	r1, #14
 8003616:	438a      	bics	r2, r1
 8003618:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361e:	221c      	movs	r2, #28
 8003620:	401a      	ands	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	2101      	movs	r1, #1
 8003628:	4091      	lsls	r1, r2
 800362a:	000a      	movs	r2, r1
 800362c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2225      	movs	r2, #37	; 0x25
 8003638:	2101      	movs	r1, #1
 800363a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2224      	movs	r2, #36	; 0x24
 8003640:	2100      	movs	r1, #0
 8003642:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003648:	2b00      	cmp	r3, #0
 800364a:	d005      	beq.n	8003658 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	0010      	movs	r0, r2
 8003654:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	46c0      	nop			; (mov r8, r8)
}
 800365a:	46bd      	mov	sp, r7
 800365c:	b004      	add	sp, #16
 800365e:	bd80      	pop	{r7, pc}

08003660 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003672:	221c      	movs	r2, #28
 8003674:	401a      	ands	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	2101      	movs	r1, #1
 800367c:	4091      	lsls	r1, r2
 800367e:	000a      	movs	r2, r1
 8003680:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2b10      	cmp	r3, #16
 8003690:	d108      	bne.n	80036a4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80036a2:	e007      	b.n	80036b4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	60da      	str	r2, [r3, #12]
}
 80036b4:	46c0      	nop			; (mov r8, r8)
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b004      	add	sp, #16
 80036ba:	bd80      	pop	{r7, pc}

080036bc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80036c4:	f7fe ff0a 	bl	80024dc <HAL_GetTick>
 80036c8:	0003      	movs	r3, r0
 80036ca:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80036cc:	e00f      	b.n	80036ee <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3301      	adds	r3, #1
 80036d2:	d00c      	beq.n	80036ee <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d007      	beq.n	80036ea <FLASH_WaitForLastOperation+0x2e>
 80036da:	f7fe feff 	bl	80024dc <HAL_GetTick>
 80036de:	0002      	movs	r2, r0
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d201      	bcs.n	80036ee <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e052      	b.n	8003794 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80036ee:	4b2b      	ldr	r3, [pc, #172]	; (800379c <FLASH_WaitForLastOperation+0xe0>)
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	2201      	movs	r2, #1
 80036f4:	4013      	ands	r3, r2
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d0e9      	beq.n	80036ce <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80036fa:	4b28      	ldr	r3, [pc, #160]	; (800379c <FLASH_WaitForLastOperation+0xe0>)
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	2202      	movs	r2, #2
 8003700:	4013      	ands	r3, r2
 8003702:	2b02      	cmp	r3, #2
 8003704:	d102      	bne.n	800370c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003706:	4b25      	ldr	r3, [pc, #148]	; (800379c <FLASH_WaitForLastOperation+0xe0>)
 8003708:	2202      	movs	r2, #2
 800370a:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800370c:	4b23      	ldr	r3, [pc, #140]	; (800379c <FLASH_WaitForLastOperation+0xe0>)
 800370e:	699a      	ldr	r2, [r3, #24]
 8003710:	2380      	movs	r3, #128	; 0x80
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	401a      	ands	r2, r3
 8003716:	2380      	movs	r3, #128	; 0x80
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	429a      	cmp	r2, r3
 800371c:	d035      	beq.n	800378a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800371e:	4b1f      	ldr	r3, [pc, #124]	; (800379c <FLASH_WaitForLastOperation+0xe0>)
 8003720:	699a      	ldr	r2, [r3, #24]
 8003722:	2380      	movs	r3, #128	; 0x80
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8003728:	2380      	movs	r3, #128	; 0x80
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	429a      	cmp	r2, r3
 800372e:	d02c      	beq.n	800378a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8003730:	4b1a      	ldr	r3, [pc, #104]	; (800379c <FLASH_WaitForLastOperation+0xe0>)
 8003732:	699a      	ldr	r2, [r3, #24]
 8003734:	2380      	movs	r3, #128	; 0x80
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800373a:	2380      	movs	r3, #128	; 0x80
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	429a      	cmp	r2, r3
 8003740:	d023      	beq.n	800378a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8003742:	4b16      	ldr	r3, [pc, #88]	; (800379c <FLASH_WaitForLastOperation+0xe0>)
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	2380      	movs	r3, #128	; 0x80
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800374c:	2380      	movs	r3, #128	; 0x80
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	429a      	cmp	r2, r3
 8003752:	d01a      	beq.n	800378a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8003754:	4b11      	ldr	r3, [pc, #68]	; (800379c <FLASH_WaitForLastOperation+0xe0>)
 8003756:	699a      	ldr	r2, [r3, #24]
 8003758:	2380      	movs	r3, #128	; 0x80
 800375a:	019b      	lsls	r3, r3, #6
 800375c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800375e:	2380      	movs	r3, #128	; 0x80
 8003760:	019b      	lsls	r3, r3, #6
 8003762:	429a      	cmp	r2, r3
 8003764:	d011      	beq.n	800378a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8003766:	4b0d      	ldr	r3, [pc, #52]	; (800379c <FLASH_WaitForLastOperation+0xe0>)
 8003768:	699a      	ldr	r2, [r3, #24]
 800376a:	2380      	movs	r3, #128	; 0x80
 800376c:	029b      	lsls	r3, r3, #10
 800376e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8003770:	2380      	movs	r3, #128	; 0x80
 8003772:	029b      	lsls	r3, r3, #10
 8003774:	429a      	cmp	r2, r3
 8003776:	d008      	beq.n	800378a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8003778:	4b08      	ldr	r3, [pc, #32]	; (800379c <FLASH_WaitForLastOperation+0xe0>)
 800377a:	699a      	ldr	r2, [r3, #24]
 800377c:	2380      	movs	r3, #128	; 0x80
 800377e:	025b      	lsls	r3, r3, #9
 8003780:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8003782:	2380      	movs	r3, #128	; 0x80
 8003784:	025b      	lsls	r3, r3, #9
 8003786:	429a      	cmp	r2, r3
 8003788:	d103      	bne.n	8003792 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800378a:	f000 f809 	bl	80037a0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	0018      	movs	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	b004      	add	sp, #16
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40022000 	.word	0x40022000

080037a0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 80037a6:	2300      	movs	r3, #0
 80037a8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80037aa:	4b49      	ldr	r3, [pc, #292]	; (80038d0 <FLASH_SetErrorCode+0x130>)
 80037ac:	699a      	ldr	r2, [r3, #24]
 80037ae:	2380      	movs	r3, #128	; 0x80
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	401a      	ands	r2, r3
 80037b4:	2380      	movs	r3, #128	; 0x80
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d10a      	bne.n	80037d2 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80037bc:	4b45      	ldr	r3, [pc, #276]	; (80038d4 <FLASH_SetErrorCode+0x134>)
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	2202      	movs	r2, #2
 80037c2:	431a      	orrs	r2, r3
 80037c4:	4b43      	ldr	r3, [pc, #268]	; (80038d4 <FLASH_SetErrorCode+0x134>)
 80037c6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2280      	movs	r2, #128	; 0x80
 80037cc:	0052      	lsls	r2, r2, #1
 80037ce:	4313      	orrs	r3, r2
 80037d0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80037d2:	4b3f      	ldr	r3, [pc, #252]	; (80038d0 <FLASH_SetErrorCode+0x130>)
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	2380      	movs	r3, #128	; 0x80
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	401a      	ands	r2, r3
 80037dc:	2380      	movs	r3, #128	; 0x80
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d10a      	bne.n	80037fa <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80037e4:	4b3b      	ldr	r3, [pc, #236]	; (80038d4 <FLASH_SetErrorCode+0x134>)
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	2201      	movs	r2, #1
 80037ea:	431a      	orrs	r2, r3
 80037ec:	4b39      	ldr	r3, [pc, #228]	; (80038d4 <FLASH_SetErrorCode+0x134>)
 80037ee:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2280      	movs	r2, #128	; 0x80
 80037f4:	0092      	lsls	r2, r2, #2
 80037f6:	4313      	orrs	r3, r2
 80037f8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80037fa:	4b35      	ldr	r3, [pc, #212]	; (80038d0 <FLASH_SetErrorCode+0x130>)
 80037fc:	699a      	ldr	r2, [r3, #24]
 80037fe:	2380      	movs	r3, #128	; 0x80
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	401a      	ands	r2, r3
 8003804:	2380      	movs	r3, #128	; 0x80
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	429a      	cmp	r2, r3
 800380a:	d10a      	bne.n	8003822 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800380c:	4b31      	ldr	r3, [pc, #196]	; (80038d4 <FLASH_SetErrorCode+0x134>)
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	2208      	movs	r2, #8
 8003812:	431a      	orrs	r2, r3
 8003814:	4b2f      	ldr	r3, [pc, #188]	; (80038d4 <FLASH_SetErrorCode+0x134>)
 8003816:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2280      	movs	r2, #128	; 0x80
 800381c:	00d2      	lsls	r2, r2, #3
 800381e:	4313      	orrs	r3, r2
 8003820:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003822:	4b2b      	ldr	r3, [pc, #172]	; (80038d0 <FLASH_SetErrorCode+0x130>)
 8003824:	699a      	ldr	r2, [r3, #24]
 8003826:	2380      	movs	r3, #128	; 0x80
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	401a      	ands	r2, r3
 800382c:	2380      	movs	r3, #128	; 0x80
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	429a      	cmp	r2, r3
 8003832:	d10a      	bne.n	800384a <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003834:	4b27      	ldr	r3, [pc, #156]	; (80038d4 <FLASH_SetErrorCode+0x134>)
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	2204      	movs	r2, #4
 800383a:	431a      	orrs	r2, r3
 800383c:	4b25      	ldr	r3, [pc, #148]	; (80038d4 <FLASH_SetErrorCode+0x134>)
 800383e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2280      	movs	r2, #128	; 0x80
 8003844:	0112      	lsls	r2, r2, #4
 8003846:	4313      	orrs	r3, r2
 8003848:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800384a:	4b21      	ldr	r3, [pc, #132]	; (80038d0 <FLASH_SetErrorCode+0x130>)
 800384c:	699a      	ldr	r2, [r3, #24]
 800384e:	2380      	movs	r3, #128	; 0x80
 8003850:	019b      	lsls	r3, r3, #6
 8003852:	401a      	ands	r2, r3
 8003854:	2380      	movs	r3, #128	; 0x80
 8003856:	019b      	lsls	r3, r3, #6
 8003858:	429a      	cmp	r2, r3
 800385a:	d10a      	bne.n	8003872 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800385c:	4b1d      	ldr	r3, [pc, #116]	; (80038d4 <FLASH_SetErrorCode+0x134>)
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	2210      	movs	r2, #16
 8003862:	431a      	orrs	r2, r3
 8003864:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <FLASH_SetErrorCode+0x134>)
 8003866:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2280      	movs	r2, #128	; 0x80
 800386c:	0192      	lsls	r2, r2, #6
 800386e:	4313      	orrs	r3, r2
 8003870:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8003872:	4b17      	ldr	r3, [pc, #92]	; (80038d0 <FLASH_SetErrorCode+0x130>)
 8003874:	699a      	ldr	r2, [r3, #24]
 8003876:	2380      	movs	r3, #128	; 0x80
 8003878:	029b      	lsls	r3, r3, #10
 800387a:	401a      	ands	r2, r3
 800387c:	2380      	movs	r3, #128	; 0x80
 800387e:	029b      	lsls	r3, r3, #10
 8003880:	429a      	cmp	r2, r3
 8003882:	d109      	bne.n	8003898 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8003884:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <FLASH_SetErrorCode+0x134>)
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	2220      	movs	r2, #32
 800388a:	431a      	orrs	r2, r3
 800388c:	4b11      	ldr	r3, [pc, #68]	; (80038d4 <FLASH_SetErrorCode+0x134>)
 800388e:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2220      	movs	r2, #32
 8003894:	4313      	orrs	r3, r2
 8003896:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8003898:	4b0d      	ldr	r3, [pc, #52]	; (80038d0 <FLASH_SetErrorCode+0x130>)
 800389a:	699a      	ldr	r2, [r3, #24]
 800389c:	2380      	movs	r3, #128	; 0x80
 800389e:	025b      	lsls	r3, r3, #9
 80038a0:	401a      	ands	r2, r3
 80038a2:	2380      	movs	r3, #128	; 0x80
 80038a4:	025b      	lsls	r3, r3, #9
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d10a      	bne.n	80038c0 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80038aa:	4b0a      	ldr	r3, [pc, #40]	; (80038d4 <FLASH_SetErrorCode+0x134>)
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	2240      	movs	r2, #64	; 0x40
 80038b0:	431a      	orrs	r2, r3
 80038b2:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <FLASH_SetErrorCode+0x134>)
 80038b4:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2280      	movs	r2, #128	; 0x80
 80038ba:	0252      	lsls	r2, r2, #9
 80038bc:	4313      	orrs	r3, r2
 80038be:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80038c0:	4b03      	ldr	r3, [pc, #12]	; (80038d0 <FLASH_SetErrorCode+0x130>)
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	619a      	str	r2, [r3, #24]
}  
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	46bd      	mov	sp, r7
 80038ca:	b002      	add	sp, #8
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	40022000 	.word	0x40022000
 80038d4:	20001efc 	.word	0x20001efc

080038d8 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80038de:	4b11      	ldr	r3, [pc, #68]	; (8003924 <HAL_FLASHEx_DATAEEPROM_Unlock+0x4c>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	4013      	ands	r3, r2
 80038e6:	d017      	beq.n	8003918 <HAL_FLASHEx_DATAEEPROM_Unlock+0x40>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80038e8:	f3ef 8310 	mrs	r3, PRIMASK
 80038ec:	607b      	str	r3, [r7, #4]
  return(result);
 80038ee:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 80038f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80038f2:	b672      	cpsid	i
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 80038f4:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <HAL_FLASHEx_DATAEEPROM_Unlock+0x4c>)
 80038f6:	4a0c      	ldr	r2, [pc, #48]	; (8003928 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80038f8:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 80038fa:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <HAL_FLASHEx_DATAEEPROM_Unlock+0x4c>)
 80038fc:	4a0b      	ldr	r2, [pc, #44]	; (800392c <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 80038fe:	60da      	str	r2, [r3, #12]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f383 8810 	msr	PRIMASK, r3

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800390a:	4b06      	ldr	r3, [pc, #24]	; (8003924 <HAL_FLASHEx_DATAEEPROM_Unlock+0x4c>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	4013      	ands	r3, r2
 8003912:	d001      	beq.n	8003918 <HAL_FLASHEx_DATAEEPROM_Unlock+0x40>
    {
      return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e000      	b.n	800391a <HAL_FLASHEx_DATAEEPROM_Unlock+0x42>
    }
  }

  return HAL_OK;  
 8003918:	2300      	movs	r3, #0
}
 800391a:	0018      	movs	r0, r3
 800391c:	46bd      	mov	sp, r7
 800391e:	b004      	add	sp, #16
 8003920:	bd80      	pop	{r7, pc}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	40022000 	.word	0x40022000
 8003928:	89abcdef 	.word	0x89abcdef
 800392c:	02030405 	.word	0x02030405

08003930 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8003934:	4b04      	ldr	r3, [pc, #16]	; (8003948 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	4b03      	ldr	r3, [pc, #12]	; (8003948 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800393a:	2101      	movs	r1, #1
 800393c:	430a      	orrs	r2, r1
 800393e:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	0018      	movs	r0, r3
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40022000 	.word	0x40022000

0800394c <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800394c:	b5b0      	push	{r4, r5, r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003958:	2317      	movs	r3, #23
 800395a:	18fb      	adds	r3, r7, r3
 800395c:	2201      	movs	r2, #1
 800395e:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003960:	4b24      	ldr	r3, [pc, #144]	; (80039f4 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8003962:	7c1b      	ldrb	r3, [r3, #16]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 8003968:	2302      	movs	r3, #2
 800396a:	e03f      	b.n	80039ec <HAL_FLASHEx_DATAEEPROM_Program+0xa0>
 800396c:	4b21      	ldr	r3, [pc, #132]	; (80039f4 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800396e:	2201      	movs	r2, #1
 8003970:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003972:	2517      	movs	r5, #23
 8003974:	197c      	adds	r4, r7, r5
 8003976:	4b20      	ldr	r3, [pc, #128]	; (80039f8 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8003978:	0018      	movs	r0, r3
 800397a:	f7ff fe9f 	bl	80036bc <FLASH_WaitForLastOperation>
 800397e:	0003      	movs	r3, r0
 8003980:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8003982:	197b      	adds	r3, r7, r5
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d12a      	bne.n	80039e0 <HAL_FLASHEx_DATAEEPROM_Program+0x94>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800398a:	4b1a      	ldr	r3, [pc, #104]	; (80039f4 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800398c:	2200      	movs	r2, #0
 800398e:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d103      	bne.n	800399e <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	e013      	b.n	80039c6 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d104      	bne.n	80039ae <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	b292      	uxth	r2, r2
 80039aa:	801a      	strh	r2, [r3, #0]
 80039ac:	e00b      	b.n	80039c6 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d104      	bne.n	80039be <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	701a      	strb	r2, [r3, #0]
 80039bc:	e003      	b.n	80039c6 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 80039be:	2317      	movs	r3, #23
 80039c0:	18fb      	adds	r3, r7, r3
 80039c2:	2201      	movs	r2, #1
 80039c4:	701a      	strb	r2, [r3, #0]
    }

    if (status != HAL_OK)
 80039c6:	2317      	movs	r3, #23
 80039c8:	18fb      	adds	r3, r7, r3
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d007      	beq.n	80039e0 <HAL_FLASHEx_DATAEEPROM_Program+0x94>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80039d0:	2317      	movs	r3, #23
 80039d2:	18fc      	adds	r4, r7, r3
 80039d4:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 80039d6:	0018      	movs	r0, r3
 80039d8:	f7ff fe70 	bl	80036bc <FLASH_WaitForLastOperation>
 80039dc:	0003      	movs	r3, r0
 80039de:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80039e0:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	741a      	strb	r2, [r3, #16]

  return status;
 80039e6:	2317      	movs	r3, #23
 80039e8:	18fb      	adds	r3, r7, r3
 80039ea:	781b      	ldrb	r3, [r3, #0]
}
 80039ec:	0018      	movs	r0, r3
 80039ee:	46bd      	mov	sp, r7
 80039f0:	b006      	add	sp, #24
 80039f2:	bdb0      	pop	{r4, r5, r7, pc}
 80039f4:	20001efc 	.word	0x20001efc
 80039f8:	0000c350 	.word	0x0000c350

080039fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003a12:	e155      	b.n	8003cc0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2101      	movs	r1, #1
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	4091      	lsls	r1, r2
 8003a1e:	000a      	movs	r2, r1
 8003a20:	4013      	ands	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d100      	bne.n	8003a2c <HAL_GPIO_Init+0x30>
 8003a2a:	e146      	b.n	8003cba <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d003      	beq.n	8003a3c <HAL_GPIO_Init+0x40>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b12      	cmp	r3, #18
 8003a3a:	d123      	bne.n	8003a84 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	08da      	lsrs	r2, r3, #3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3208      	adds	r2, #8
 8003a44:	0092      	lsls	r2, r2, #2
 8003a46:	58d3      	ldr	r3, [r2, r3]
 8003a48:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2207      	movs	r2, #7
 8003a4e:	4013      	ands	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	220f      	movs	r2, #15
 8003a54:	409a      	lsls	r2, r3
 8003a56:	0013      	movs	r3, r2
 8003a58:	43da      	mvns	r2, r3
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	2107      	movs	r1, #7
 8003a68:	400b      	ands	r3, r1
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	409a      	lsls	r2, r3
 8003a6e:	0013      	movs	r3, r2
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	08da      	lsrs	r2, r3, #3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3208      	adds	r2, #8
 8003a7e:	0092      	lsls	r2, r2, #2
 8003a80:	6939      	ldr	r1, [r7, #16]
 8003a82:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d00b      	beq.n	8003aa4 <HAL_GPIO_Init+0xa8>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d007      	beq.n	8003aa4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a98:	2b11      	cmp	r3, #17
 8003a9a:	d003      	beq.n	8003aa4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b12      	cmp	r3, #18
 8003aa2:	d130      	bne.n	8003b06 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	2203      	movs	r2, #3
 8003ab0:	409a      	lsls	r2, r3
 8003ab2:	0013      	movs	r3, r2
 8003ab4:	43da      	mvns	r2, r3
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	68da      	ldr	r2, [r3, #12]
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	409a      	lsls	r2, r3
 8003ac6:	0013      	movs	r3, r2
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ada:	2201      	movs	r2, #1
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	0013      	movs	r3, r2
 8003ae2:	43da      	mvns	r2, r3
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	091b      	lsrs	r3, r3, #4
 8003af0:	2201      	movs	r2, #1
 8003af2:	401a      	ands	r2, r3
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	409a      	lsls	r2, r3
 8003af8:	0013      	movs	r3, r2
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	2203      	movs	r2, #3
 8003b12:	409a      	lsls	r2, r3
 8003b14:	0013      	movs	r3, r2
 8003b16:	43da      	mvns	r2, r3
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2203      	movs	r2, #3
 8003b24:	401a      	ands	r2, r3
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	409a      	lsls	r2, r3
 8003b2c:	0013      	movs	r3, r2
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	2203      	movs	r2, #3
 8003b46:	409a      	lsls	r2, r3
 8003b48:	0013      	movs	r3, r2
 8003b4a:	43da      	mvns	r2, r3
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	409a      	lsls	r2, r3
 8003b5c:	0013      	movs	r3, r2
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	2380      	movs	r3, #128	; 0x80
 8003b70:	055b      	lsls	r3, r3, #21
 8003b72:	4013      	ands	r3, r2
 8003b74:	d100      	bne.n	8003b78 <HAL_GPIO_Init+0x17c>
 8003b76:	e0a0      	b.n	8003cba <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b78:	4b57      	ldr	r3, [pc, #348]	; (8003cd8 <HAL_GPIO_Init+0x2dc>)
 8003b7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b7c:	4b56      	ldr	r3, [pc, #344]	; (8003cd8 <HAL_GPIO_Init+0x2dc>)
 8003b7e:	2101      	movs	r1, #1
 8003b80:	430a      	orrs	r2, r1
 8003b82:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8003b84:	4a55      	ldr	r2, [pc, #340]	; (8003cdc <HAL_GPIO_Init+0x2e0>)
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	089b      	lsrs	r3, r3, #2
 8003b8a:	3302      	adds	r3, #2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	589b      	ldr	r3, [r3, r2]
 8003b90:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2203      	movs	r2, #3
 8003b96:	4013      	ands	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	220f      	movs	r2, #15
 8003b9c:	409a      	lsls	r2, r3
 8003b9e:	0013      	movs	r3, r2
 8003ba0:	43da      	mvns	r2, r3
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	23a0      	movs	r3, #160	; 0xa0
 8003bac:	05db      	lsls	r3, r3, #23
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d01f      	beq.n	8003bf2 <HAL_GPIO_Init+0x1f6>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a4a      	ldr	r2, [pc, #296]	; (8003ce0 <HAL_GPIO_Init+0x2e4>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d019      	beq.n	8003bee <HAL_GPIO_Init+0x1f2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a49      	ldr	r2, [pc, #292]	; (8003ce4 <HAL_GPIO_Init+0x2e8>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d013      	beq.n	8003bea <HAL_GPIO_Init+0x1ee>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a48      	ldr	r2, [pc, #288]	; (8003ce8 <HAL_GPIO_Init+0x2ec>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d00d      	beq.n	8003be6 <HAL_GPIO_Init+0x1ea>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a47      	ldr	r2, [pc, #284]	; (8003cec <HAL_GPIO_Init+0x2f0>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d007      	beq.n	8003be2 <HAL_GPIO_Init+0x1e6>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a46      	ldr	r2, [pc, #280]	; (8003cf0 <HAL_GPIO_Init+0x2f4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d101      	bne.n	8003bde <HAL_GPIO_Init+0x1e2>
 8003bda:	2305      	movs	r3, #5
 8003bdc:	e00a      	b.n	8003bf4 <HAL_GPIO_Init+0x1f8>
 8003bde:	2306      	movs	r3, #6
 8003be0:	e008      	b.n	8003bf4 <HAL_GPIO_Init+0x1f8>
 8003be2:	2304      	movs	r3, #4
 8003be4:	e006      	b.n	8003bf4 <HAL_GPIO_Init+0x1f8>
 8003be6:	2303      	movs	r3, #3
 8003be8:	e004      	b.n	8003bf4 <HAL_GPIO_Init+0x1f8>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e002      	b.n	8003bf4 <HAL_GPIO_Init+0x1f8>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <HAL_GPIO_Init+0x1f8>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	2103      	movs	r1, #3
 8003bf8:	400a      	ands	r2, r1
 8003bfa:	0092      	lsls	r2, r2, #2
 8003bfc:	4093      	lsls	r3, r2
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c04:	4935      	ldr	r1, [pc, #212]	; (8003cdc <HAL_GPIO_Init+0x2e0>)
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	089b      	lsrs	r3, r3, #2
 8003c0a:	3302      	adds	r3, #2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c12:	4b38      	ldr	r3, [pc, #224]	; (8003cf4 <HAL_GPIO_Init+0x2f8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	43da      	mvns	r2, r3
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	2380      	movs	r3, #128	; 0x80
 8003c28:	025b      	lsls	r3, r3, #9
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	d003      	beq.n	8003c36 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003c36:	4b2f      	ldr	r3, [pc, #188]	; (8003cf4 <HAL_GPIO_Init+0x2f8>)
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003c3c:	4b2d      	ldr	r3, [pc, #180]	; (8003cf4 <HAL_GPIO_Init+0x2f8>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	43da      	mvns	r2, r3
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	2380      	movs	r3, #128	; 0x80
 8003c52:	029b      	lsls	r3, r3, #10
 8003c54:	4013      	ands	r3, r2
 8003c56:	d003      	beq.n	8003c60 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003c60:	4b24      	ldr	r3, [pc, #144]	; (8003cf4 <HAL_GPIO_Init+0x2f8>)
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c66:	4b23      	ldr	r3, [pc, #140]	; (8003cf4 <HAL_GPIO_Init+0x2f8>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	43da      	mvns	r2, r3
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	4013      	ands	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	2380      	movs	r3, #128	; 0x80
 8003c7c:	035b      	lsls	r3, r3, #13
 8003c7e:	4013      	ands	r3, r2
 8003c80:	d003      	beq.n	8003c8a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003c8a:	4b1a      	ldr	r3, [pc, #104]	; (8003cf4 <HAL_GPIO_Init+0x2f8>)
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003c90:	4b18      	ldr	r3, [pc, #96]	; (8003cf4 <HAL_GPIO_Init+0x2f8>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	43da      	mvns	r2, r3
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	2380      	movs	r3, #128	; 0x80
 8003ca6:	039b      	lsls	r3, r3, #14
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d003      	beq.n	8003cb4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003cb4:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <HAL_GPIO_Init+0x2f8>)
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	40da      	lsrs	r2, r3
 8003cc8:	1e13      	subs	r3, r2, #0
 8003cca:	d000      	beq.n	8003cce <HAL_GPIO_Init+0x2d2>
 8003ccc:	e6a2      	b.n	8003a14 <HAL_GPIO_Init+0x18>
  }
}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	b006      	add	sp, #24
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	40010000 	.word	0x40010000
 8003ce0:	50000400 	.word	0x50000400
 8003ce4:	50000800 	.word	0x50000800
 8003ce8:	50000c00 	.word	0x50000c00
 8003cec:	50001000 	.word	0x50001000
 8003cf0:	50001c00 	.word	0x50001c00
 8003cf4:	40010400 	.word	0x40010400

08003cf8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	000a      	movs	r2, r1
 8003d02:	1cbb      	adds	r3, r7, #2
 8003d04:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	1cba      	adds	r2, r7, #2
 8003d0c:	8812      	ldrh	r2, [r2, #0]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	d004      	beq.n	8003d1c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003d12:	230f      	movs	r3, #15
 8003d14:	18fb      	adds	r3, r7, r3
 8003d16:	2201      	movs	r2, #1
 8003d18:	701a      	strb	r2, [r3, #0]
 8003d1a:	e003      	b.n	8003d24 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d1c:	230f      	movs	r3, #15
 8003d1e:	18fb      	adds	r3, r7, r3
 8003d20:	2200      	movs	r2, #0
 8003d22:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003d24:	230f      	movs	r3, #15
 8003d26:	18fb      	adds	r3, r7, r3
 8003d28:	781b      	ldrb	r3, [r3, #0]
}
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	b004      	add	sp, #16
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
 8003d3a:	0008      	movs	r0, r1
 8003d3c:	0011      	movs	r1, r2
 8003d3e:	1cbb      	adds	r3, r7, #2
 8003d40:	1c02      	adds	r2, r0, #0
 8003d42:	801a      	strh	r2, [r3, #0]
 8003d44:	1c7b      	adds	r3, r7, #1
 8003d46:	1c0a      	adds	r2, r1, #0
 8003d48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8003d4a:	1c7b      	adds	r3, r7, #1
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d004      	beq.n	8003d5c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d52:	1cbb      	adds	r3, r7, #2
 8003d54:	881a      	ldrh	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003d5a:	e003      	b.n	8003d64 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003d5c:	1cbb      	adds	r3, r7, #2
 8003d5e:	881a      	ldrh	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d64:	46c0      	nop			; (mov r8, r8)
 8003d66:	46bd      	mov	sp, r7
 8003d68:	b002      	add	sp, #8
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	000a      	movs	r2, r1
 8003d76:	1cbb      	adds	r3, r7, #2
 8003d78:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695a      	ldr	r2, [r3, #20]
 8003d7e:	1cbb      	adds	r3, r7, #2
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	405a      	eors	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	615a      	str	r2, [r3, #20]
}
 8003d88:	46c0      	nop			; (mov r8, r8)
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	b002      	add	sp, #8
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d90:	b5b0      	push	{r4, r5, r7, lr}
 8003d92:	b08a      	sub	sp, #40	; 0x28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d102      	bne.n	8003da4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f000 fbbc 	bl	800451c <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003da4:	4bc8      	ldr	r3, [pc, #800]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	220c      	movs	r2, #12
 8003daa:	4013      	ands	r3, r2
 8003dac:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dae:	4bc6      	ldr	r3, [pc, #792]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	2380      	movs	r3, #128	; 0x80
 8003db4:	025b      	lsls	r3, r3, #9
 8003db6:	4013      	ands	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	d100      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x36>
 8003dc4:	e07e      	b.n	8003ec4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d007      	beq.n	8003ddc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	2b0c      	cmp	r3, #12
 8003dd0:	d112      	bne.n	8003df8 <HAL_RCC_OscConfig+0x68>
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	2380      	movs	r3, #128	; 0x80
 8003dd6:	025b      	lsls	r3, r3, #9
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d10d      	bne.n	8003df8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ddc:	4bba      	ldr	r3, [pc, #744]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	2380      	movs	r3, #128	; 0x80
 8003de2:	029b      	lsls	r3, r3, #10
 8003de4:	4013      	ands	r3, r2
 8003de6:	d100      	bne.n	8003dea <HAL_RCC_OscConfig+0x5a>
 8003de8:	e06b      	b.n	8003ec2 <HAL_RCC_OscConfig+0x132>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d167      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	f000 fb92 	bl	800451c <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	2380      	movs	r3, #128	; 0x80
 8003dfe:	025b      	lsls	r3, r3, #9
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d107      	bne.n	8003e14 <HAL_RCC_OscConfig+0x84>
 8003e04:	4bb0      	ldr	r3, [pc, #704]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	4baf      	ldr	r3, [pc, #700]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003e0a:	2180      	movs	r1, #128	; 0x80
 8003e0c:	0249      	lsls	r1, r1, #9
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	e027      	b.n	8003e64 <HAL_RCC_OscConfig+0xd4>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	23a0      	movs	r3, #160	; 0xa0
 8003e1a:	02db      	lsls	r3, r3, #11
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d10e      	bne.n	8003e3e <HAL_RCC_OscConfig+0xae>
 8003e20:	4ba9      	ldr	r3, [pc, #676]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4ba8      	ldr	r3, [pc, #672]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003e26:	2180      	movs	r1, #128	; 0x80
 8003e28:	02c9      	lsls	r1, r1, #11
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	4ba6      	ldr	r3, [pc, #664]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	4ba5      	ldr	r3, [pc, #660]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003e34:	2180      	movs	r1, #128	; 0x80
 8003e36:	0249      	lsls	r1, r1, #9
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	e012      	b.n	8003e64 <HAL_RCC_OscConfig+0xd4>
 8003e3e:	4ba2      	ldr	r3, [pc, #648]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4ba1      	ldr	r3, [pc, #644]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003e44:	49a1      	ldr	r1, [pc, #644]	; (80040cc <HAL_RCC_OscConfig+0x33c>)
 8003e46:	400a      	ands	r2, r1
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	4b9f      	ldr	r3, [pc, #636]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	2380      	movs	r3, #128	; 0x80
 8003e50:	025b      	lsls	r3, r3, #9
 8003e52:	4013      	ands	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	4b9b      	ldr	r3, [pc, #620]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	4b9a      	ldr	r3, [pc, #616]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003e5e:	499c      	ldr	r1, [pc, #624]	; (80040d0 <HAL_RCC_OscConfig+0x340>)
 8003e60:	400a      	ands	r2, r1
 8003e62:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d015      	beq.n	8003e98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6c:	f7fe fb36 	bl	80024dc <HAL_GetTick>
 8003e70:	0003      	movs	r3, r0
 8003e72:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e74:	e009      	b.n	8003e8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e76:	f7fe fb31 	bl	80024dc <HAL_GetTick>
 8003e7a:	0002      	movs	r2, r0
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b64      	cmp	r3, #100	; 0x64
 8003e82:	d902      	bls.n	8003e8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	f000 fb49 	bl	800451c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e8a:	4b8f      	ldr	r3, [pc, #572]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	2380      	movs	r3, #128	; 0x80
 8003e90:	029b      	lsls	r3, r3, #10
 8003e92:	4013      	ands	r3, r2
 8003e94:	d0ef      	beq.n	8003e76 <HAL_RCC_OscConfig+0xe6>
 8003e96:	e015      	b.n	8003ec4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e98:	f7fe fb20 	bl	80024dc <HAL_GetTick>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ea2:	f7fe fb1b 	bl	80024dc <HAL_GetTick>
 8003ea6:	0002      	movs	r2, r0
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b64      	cmp	r3, #100	; 0x64
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e333      	b.n	800451c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003eb4:	4b84      	ldr	r3, [pc, #528]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	2380      	movs	r3, #128	; 0x80
 8003eba:	029b      	lsls	r3, r3, #10
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	d1f0      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x112>
 8003ec0:	e000      	b.n	8003ec4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2202      	movs	r2, #2
 8003eca:	4013      	ands	r3, r2
 8003ecc:	d100      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x140>
 8003ece:	e098      	b.n	8004002 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	2220      	movs	r2, #32
 8003eda:	4013      	ands	r3, r2
 8003edc:	d009      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003ede:	4b7a      	ldr	r3, [pc, #488]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	4b79      	ldr	r3, [pc, #484]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003ee4:	2120      	movs	r1, #32
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	2220      	movs	r2, #32
 8003eee:	4393      	bics	r3, r2
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	d005      	beq.n	8003f04 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	2b0c      	cmp	r3, #12
 8003efc:	d13d      	bne.n	8003f7a <HAL_RCC_OscConfig+0x1ea>
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d13a      	bne.n	8003f7a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003f04:	4b70      	ldr	r3, [pc, #448]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2204      	movs	r2, #4
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	d004      	beq.n	8003f18 <HAL_RCC_OscConfig+0x188>
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e301      	b.n	800451c <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f18:	4b6b      	ldr	r3, [pc, #428]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	4a6d      	ldr	r2, [pc, #436]	; (80040d4 <HAL_RCC_OscConfig+0x344>)
 8003f1e:	4013      	ands	r3, r2
 8003f20:	0019      	movs	r1, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	021a      	lsls	r2, r3, #8
 8003f28:	4b67      	ldr	r3, [pc, #412]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003f2e:	4b66      	ldr	r3, [pc, #408]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2209      	movs	r2, #9
 8003f34:	4393      	bics	r3, r2
 8003f36:	0019      	movs	r1, r3
 8003f38:	4b63      	ldr	r3, [pc, #396]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f40:	f000 fc20 	bl	8004784 <HAL_RCC_GetSysClockFreq>
 8003f44:	0001      	movs	r1, r0
 8003f46:	4b60      	ldr	r3, [pc, #384]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	091b      	lsrs	r3, r3, #4
 8003f4c:	220f      	movs	r2, #15
 8003f4e:	4013      	ands	r3, r2
 8003f50:	4a61      	ldr	r2, [pc, #388]	; (80040d8 <HAL_RCC_OscConfig+0x348>)
 8003f52:	5cd3      	ldrb	r3, [r2, r3]
 8003f54:	000a      	movs	r2, r1
 8003f56:	40da      	lsrs	r2, r3
 8003f58:	4b60      	ldr	r3, [pc, #384]	; (80040dc <HAL_RCC_OscConfig+0x34c>)
 8003f5a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8003f5c:	2513      	movs	r5, #19
 8003f5e:	197c      	adds	r4, r7, r5
 8003f60:	2000      	movs	r0, #0
 8003f62:	f006 f817 	bl	8009f94 <HAL_InitTick>
 8003f66:	0003      	movs	r3, r0
 8003f68:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003f6a:	197b      	adds	r3, r7, r5
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d047      	beq.n	8004002 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8003f72:	2313      	movs	r3, #19
 8003f74:	18fb      	adds	r3, r7, r3
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	e2d0      	b.n	800451c <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d027      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003f80:	4b51      	ldr	r3, [pc, #324]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2209      	movs	r2, #9
 8003f86:	4393      	bics	r3, r2
 8003f88:	0019      	movs	r1, r3
 8003f8a:	4b4f      	ldr	r3, [pc, #316]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f92:	f7fe faa3 	bl	80024dc <HAL_GetTick>
 8003f96:	0003      	movs	r3, r0
 8003f98:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f9c:	f7fe fa9e 	bl	80024dc <HAL_GetTick>
 8003fa0:	0002      	movs	r2, r0
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e2b6      	b.n	800451c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fae:	4b46      	ldr	r3, [pc, #280]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2204      	movs	r2, #4
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	d0f1      	beq.n	8003f9c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb8:	4b43      	ldr	r3, [pc, #268]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	4a45      	ldr	r2, [pc, #276]	; (80040d4 <HAL_RCC_OscConfig+0x344>)
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	0019      	movs	r1, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	021a      	lsls	r2, r3, #8
 8003fc8:	4b3f      	ldr	r3, [pc, #252]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	605a      	str	r2, [r3, #4]
 8003fce:	e018      	b.n	8004002 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fd0:	4b3d      	ldr	r3, [pc, #244]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	4b3c      	ldr	r3, [pc, #240]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	438a      	bics	r2, r1
 8003fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fdc:	f7fe fa7e 	bl	80024dc <HAL_GetTick>
 8003fe0:	0003      	movs	r3, r0
 8003fe2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fe6:	f7fe fa79 	bl	80024dc <HAL_GetTick>
 8003fea:	0002      	movs	r2, r0
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e291      	b.n	800451c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ff8:	4b33      	ldr	r3, [pc, #204]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2204      	movs	r2, #4
 8003ffe:	4013      	ands	r3, r2
 8004000:	d1f1      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2210      	movs	r2, #16
 8004008:	4013      	ands	r3, r2
 800400a:	d100      	bne.n	800400e <HAL_RCC_OscConfig+0x27e>
 800400c:	e09f      	b.n	800414e <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d13f      	bne.n	8004094 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004014:	4b2c      	ldr	r3, [pc, #176]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	2380      	movs	r3, #128	; 0x80
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4013      	ands	r3, r2
 800401e:	d005      	beq.n	800402c <HAL_RCC_OscConfig+0x29c>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e277      	b.n	800451c <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800402c:	4b26      	ldr	r3, [pc, #152]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	4a2b      	ldr	r2, [pc, #172]	; (80040e0 <HAL_RCC_OscConfig+0x350>)
 8004032:	4013      	ands	r3, r2
 8004034:	0019      	movs	r1, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800403a:	4b23      	ldr	r3, [pc, #140]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 800403c:	430a      	orrs	r2, r1
 800403e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004040:	4b21      	ldr	r3, [pc, #132]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	021b      	lsls	r3, r3, #8
 8004046:	0a19      	lsrs	r1, r3, #8
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	061a      	lsls	r2, r3, #24
 800404e:	4b1e      	ldr	r3, [pc, #120]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8004050:	430a      	orrs	r2, r1
 8004052:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	0b5b      	lsrs	r3, r3, #13
 800405a:	3301      	adds	r3, #1
 800405c:	2280      	movs	r2, #128	; 0x80
 800405e:	0212      	lsls	r2, r2, #8
 8004060:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004062:	4b19      	ldr	r3, [pc, #100]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	091b      	lsrs	r3, r3, #4
 8004068:	210f      	movs	r1, #15
 800406a:	400b      	ands	r3, r1
 800406c:	491a      	ldr	r1, [pc, #104]	; (80040d8 <HAL_RCC_OscConfig+0x348>)
 800406e:	5ccb      	ldrb	r3, [r1, r3]
 8004070:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004072:	4b1a      	ldr	r3, [pc, #104]	; (80040dc <HAL_RCC_OscConfig+0x34c>)
 8004074:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8004076:	2513      	movs	r5, #19
 8004078:	197c      	adds	r4, r7, r5
 800407a:	2000      	movs	r0, #0
 800407c:	f005 ff8a 	bl	8009f94 <HAL_InitTick>
 8004080:	0003      	movs	r3, r0
 8004082:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004084:	197b      	adds	r3, r7, r5
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d060      	beq.n	800414e <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 800408c:	2313      	movs	r3, #19
 800408e:	18fb      	adds	r3, r7, r3
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	e243      	b.n	800451c <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d03e      	beq.n	800411a <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800409c:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 80040a2:	2180      	movs	r1, #128	; 0x80
 80040a4:	0049      	lsls	r1, r1, #1
 80040a6:	430a      	orrs	r2, r1
 80040a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040aa:	f7fe fa17 	bl	80024dc <HAL_GetTick>
 80040ae:	0003      	movs	r3, r0
 80040b0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80040b2:	e017      	b.n	80040e4 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040b4:	f7fe fa12 	bl	80024dc <HAL_GetTick>
 80040b8:	0002      	movs	r2, r0
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d910      	bls.n	80040e4 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e22a      	b.n	800451c <HAL_RCC_OscConfig+0x78c>
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	40021000 	.word	0x40021000
 80040cc:	fffeffff 	.word	0xfffeffff
 80040d0:	fffbffff 	.word	0xfffbffff
 80040d4:	ffffe0ff 	.word	0xffffe0ff
 80040d8:	0800a548 	.word	0x0800a548
 80040dc:	20000004 	.word	0x20000004
 80040e0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80040e4:	4bc6      	ldr	r3, [pc, #792]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	2380      	movs	r3, #128	; 0x80
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4013      	ands	r3, r2
 80040ee:	d0e1      	beq.n	80040b4 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040f0:	4bc3      	ldr	r3, [pc, #780]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	4ac3      	ldr	r2, [pc, #780]	; (8004404 <HAL_RCC_OscConfig+0x674>)
 80040f6:	4013      	ands	r3, r2
 80040f8:	0019      	movs	r1, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040fe:	4bc0      	ldr	r3, [pc, #768]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 8004100:	430a      	orrs	r2, r1
 8004102:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004104:	4bbe      	ldr	r3, [pc, #760]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	021b      	lsls	r3, r3, #8
 800410a:	0a19      	lsrs	r1, r3, #8
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	061a      	lsls	r2, r3, #24
 8004112:	4bbb      	ldr	r3, [pc, #748]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 8004114:	430a      	orrs	r2, r1
 8004116:	605a      	str	r2, [r3, #4]
 8004118:	e019      	b.n	800414e <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800411a:	4bb9      	ldr	r3, [pc, #740]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	4bb8      	ldr	r3, [pc, #736]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 8004120:	49b9      	ldr	r1, [pc, #740]	; (8004408 <HAL_RCC_OscConfig+0x678>)
 8004122:	400a      	ands	r2, r1
 8004124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004126:	f7fe f9d9 	bl	80024dc <HAL_GetTick>
 800412a:	0003      	movs	r3, r0
 800412c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004130:	f7fe f9d4 	bl	80024dc <HAL_GetTick>
 8004134:	0002      	movs	r2, r0
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e1ec      	b.n	800451c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004142:	4baf      	ldr	r3, [pc, #700]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	2380      	movs	r3, #128	; 0x80
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4013      	ands	r3, r2
 800414c:	d1f0      	bne.n	8004130 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2208      	movs	r2, #8
 8004154:	4013      	ands	r3, r2
 8004156:	d036      	beq.n	80041c6 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d019      	beq.n	8004194 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004160:	4ba7      	ldr	r3, [pc, #668]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 8004162:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004164:	4ba6      	ldr	r3, [pc, #664]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 8004166:	2101      	movs	r1, #1
 8004168:	430a      	orrs	r2, r1
 800416a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800416c:	f7fe f9b6 	bl	80024dc <HAL_GetTick>
 8004170:	0003      	movs	r3, r0
 8004172:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004176:	f7fe f9b1 	bl	80024dc <HAL_GetTick>
 800417a:	0002      	movs	r2, r0
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e1c9      	b.n	800451c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004188:	4b9d      	ldr	r3, [pc, #628]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 800418a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800418c:	2202      	movs	r2, #2
 800418e:	4013      	ands	r3, r2
 8004190:	d0f1      	beq.n	8004176 <HAL_RCC_OscConfig+0x3e6>
 8004192:	e018      	b.n	80041c6 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004194:	4b9a      	ldr	r3, [pc, #616]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 8004196:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004198:	4b99      	ldr	r3, [pc, #612]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 800419a:	2101      	movs	r1, #1
 800419c:	438a      	bics	r2, r1
 800419e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a0:	f7fe f99c 	bl	80024dc <HAL_GetTick>
 80041a4:	0003      	movs	r3, r0
 80041a6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041aa:	f7fe f997 	bl	80024dc <HAL_GetTick>
 80041ae:	0002      	movs	r2, r0
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e1af      	b.n	800451c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041bc:	4b90      	ldr	r3, [pc, #576]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 80041be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c0:	2202      	movs	r2, #2
 80041c2:	4013      	ands	r3, r2
 80041c4:	d1f1      	bne.n	80041aa <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2204      	movs	r2, #4
 80041cc:	4013      	ands	r3, r2
 80041ce:	d100      	bne.n	80041d2 <HAL_RCC_OscConfig+0x442>
 80041d0:	e0af      	b.n	8004332 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041d2:	2323      	movs	r3, #35	; 0x23
 80041d4:	18fb      	adds	r3, r7, r3
 80041d6:	2200      	movs	r2, #0
 80041d8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041da:	4b89      	ldr	r3, [pc, #548]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 80041dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041de:	2380      	movs	r3, #128	; 0x80
 80041e0:	055b      	lsls	r3, r3, #21
 80041e2:	4013      	ands	r3, r2
 80041e4:	d10a      	bne.n	80041fc <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041e6:	4b86      	ldr	r3, [pc, #536]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 80041e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ea:	4b85      	ldr	r3, [pc, #532]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 80041ec:	2180      	movs	r1, #128	; 0x80
 80041ee:	0549      	lsls	r1, r1, #21
 80041f0:	430a      	orrs	r2, r1
 80041f2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80041f4:	2323      	movs	r3, #35	; 0x23
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	2201      	movs	r2, #1
 80041fa:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fc:	4b83      	ldr	r3, [pc, #524]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	2380      	movs	r3, #128	; 0x80
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	4013      	ands	r3, r2
 8004206:	d11a      	bne.n	800423e <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004208:	4b80      	ldr	r3, [pc, #512]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	4b7f      	ldr	r3, [pc, #508]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 800420e:	2180      	movs	r1, #128	; 0x80
 8004210:	0049      	lsls	r1, r1, #1
 8004212:	430a      	orrs	r2, r1
 8004214:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004216:	f7fe f961 	bl	80024dc <HAL_GetTick>
 800421a:	0003      	movs	r3, r0
 800421c:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004220:	f7fe f95c 	bl	80024dc <HAL_GetTick>
 8004224:	0002      	movs	r2, r0
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b64      	cmp	r3, #100	; 0x64
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e174      	b.n	800451c <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004232:	4b76      	ldr	r3, [pc, #472]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	2380      	movs	r3, #128	; 0x80
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	4013      	ands	r3, r2
 800423c:	d0f0      	beq.n	8004220 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	2380      	movs	r3, #128	; 0x80
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	429a      	cmp	r2, r3
 8004248:	d107      	bne.n	800425a <HAL_RCC_OscConfig+0x4ca>
 800424a:	4b6d      	ldr	r3, [pc, #436]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 800424c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800424e:	4b6c      	ldr	r3, [pc, #432]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 8004250:	2180      	movs	r1, #128	; 0x80
 8004252:	0049      	lsls	r1, r1, #1
 8004254:	430a      	orrs	r2, r1
 8004256:	651a      	str	r2, [r3, #80]	; 0x50
 8004258:	e031      	b.n	80042be <HAL_RCC_OscConfig+0x52e>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10c      	bne.n	800427c <HAL_RCC_OscConfig+0x4ec>
 8004262:	4b67      	ldr	r3, [pc, #412]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 8004264:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004266:	4b66      	ldr	r3, [pc, #408]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 8004268:	4967      	ldr	r1, [pc, #412]	; (8004408 <HAL_RCC_OscConfig+0x678>)
 800426a:	400a      	ands	r2, r1
 800426c:	651a      	str	r2, [r3, #80]	; 0x50
 800426e:	4b64      	ldr	r3, [pc, #400]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 8004270:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004272:	4b63      	ldr	r3, [pc, #396]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 8004274:	4966      	ldr	r1, [pc, #408]	; (8004410 <HAL_RCC_OscConfig+0x680>)
 8004276:	400a      	ands	r2, r1
 8004278:	651a      	str	r2, [r3, #80]	; 0x50
 800427a:	e020      	b.n	80042be <HAL_RCC_OscConfig+0x52e>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	23a0      	movs	r3, #160	; 0xa0
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	429a      	cmp	r2, r3
 8004286:	d10e      	bne.n	80042a6 <HAL_RCC_OscConfig+0x516>
 8004288:	4b5d      	ldr	r3, [pc, #372]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 800428a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800428c:	4b5c      	ldr	r3, [pc, #368]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 800428e:	2180      	movs	r1, #128	; 0x80
 8004290:	00c9      	lsls	r1, r1, #3
 8004292:	430a      	orrs	r2, r1
 8004294:	651a      	str	r2, [r3, #80]	; 0x50
 8004296:	4b5a      	ldr	r3, [pc, #360]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 8004298:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800429a:	4b59      	ldr	r3, [pc, #356]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 800429c:	2180      	movs	r1, #128	; 0x80
 800429e:	0049      	lsls	r1, r1, #1
 80042a0:	430a      	orrs	r2, r1
 80042a2:	651a      	str	r2, [r3, #80]	; 0x50
 80042a4:	e00b      	b.n	80042be <HAL_RCC_OscConfig+0x52e>
 80042a6:	4b56      	ldr	r3, [pc, #344]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 80042a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042aa:	4b55      	ldr	r3, [pc, #340]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 80042ac:	4956      	ldr	r1, [pc, #344]	; (8004408 <HAL_RCC_OscConfig+0x678>)
 80042ae:	400a      	ands	r2, r1
 80042b0:	651a      	str	r2, [r3, #80]	; 0x50
 80042b2:	4b53      	ldr	r3, [pc, #332]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 80042b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042b6:	4b52      	ldr	r3, [pc, #328]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 80042b8:	4955      	ldr	r1, [pc, #340]	; (8004410 <HAL_RCC_OscConfig+0x680>)
 80042ba:	400a      	ands	r2, r1
 80042bc:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d015      	beq.n	80042f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c6:	f7fe f909 	bl	80024dc <HAL_GetTick>
 80042ca:	0003      	movs	r3, r0
 80042cc:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042ce:	e009      	b.n	80042e4 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042d0:	f7fe f904 	bl	80024dc <HAL_GetTick>
 80042d4:	0002      	movs	r2, r0
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	4a4e      	ldr	r2, [pc, #312]	; (8004414 <HAL_RCC_OscConfig+0x684>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e11b      	b.n	800451c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042e4:	4b46      	ldr	r3, [pc, #280]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 80042e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042e8:	2380      	movs	r3, #128	; 0x80
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4013      	ands	r3, r2
 80042ee:	d0ef      	beq.n	80042d0 <HAL_RCC_OscConfig+0x540>
 80042f0:	e014      	b.n	800431c <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f2:	f7fe f8f3 	bl	80024dc <HAL_GetTick>
 80042f6:	0003      	movs	r3, r0
 80042f8:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042fa:	e009      	b.n	8004310 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042fc:	f7fe f8ee 	bl	80024dc <HAL_GetTick>
 8004300:	0002      	movs	r2, r0
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	4a43      	ldr	r2, [pc, #268]	; (8004414 <HAL_RCC_OscConfig+0x684>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e105      	b.n	800451c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004310:	4b3b      	ldr	r3, [pc, #236]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 8004312:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4013      	ands	r3, r2
 800431a:	d1ef      	bne.n	80042fc <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800431c:	2323      	movs	r3, #35	; 0x23
 800431e:	18fb      	adds	r3, r7, r3
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d105      	bne.n	8004332 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004326:	4b36      	ldr	r3, [pc, #216]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 8004328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800432a:	4b35      	ldr	r3, [pc, #212]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 800432c:	493a      	ldr	r1, [pc, #232]	; (8004418 <HAL_RCC_OscConfig+0x688>)
 800432e:	400a      	ands	r2, r1
 8004330:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2220      	movs	r2, #32
 8004338:	4013      	ands	r3, r2
 800433a:	d049      	beq.n	80043d0 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d026      	beq.n	8004392 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004344:	4b2e      	ldr	r3, [pc, #184]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	4b2d      	ldr	r3, [pc, #180]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 800434a:	2101      	movs	r1, #1
 800434c:	430a      	orrs	r2, r1
 800434e:	609a      	str	r2, [r3, #8]
 8004350:	4b2b      	ldr	r3, [pc, #172]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 8004352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004354:	4b2a      	ldr	r3, [pc, #168]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 8004356:	2101      	movs	r1, #1
 8004358:	430a      	orrs	r2, r1
 800435a:	635a      	str	r2, [r3, #52]	; 0x34
 800435c:	4b2f      	ldr	r3, [pc, #188]	; (800441c <HAL_RCC_OscConfig+0x68c>)
 800435e:	6a1a      	ldr	r2, [r3, #32]
 8004360:	4b2e      	ldr	r3, [pc, #184]	; (800441c <HAL_RCC_OscConfig+0x68c>)
 8004362:	2180      	movs	r1, #128	; 0x80
 8004364:	0189      	lsls	r1, r1, #6
 8004366:	430a      	orrs	r2, r1
 8004368:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436a:	f7fe f8b7 	bl	80024dc <HAL_GetTick>
 800436e:	0003      	movs	r3, r0
 8004370:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004374:	f7fe f8b2 	bl	80024dc <HAL_GetTick>
 8004378:	0002      	movs	r2, r0
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e0ca      	b.n	800451c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004386:	4b1e      	ldr	r3, [pc, #120]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	2202      	movs	r2, #2
 800438c:	4013      	ands	r3, r2
 800438e:	d0f1      	beq.n	8004374 <HAL_RCC_OscConfig+0x5e4>
 8004390:	e01e      	b.n	80043d0 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004392:	4b1b      	ldr	r3, [pc, #108]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 8004394:	689a      	ldr	r2, [r3, #8]
 8004396:	4b1a      	ldr	r3, [pc, #104]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 8004398:	2101      	movs	r1, #1
 800439a:	438a      	bics	r2, r1
 800439c:	609a      	str	r2, [r3, #8]
 800439e:	4b1f      	ldr	r3, [pc, #124]	; (800441c <HAL_RCC_OscConfig+0x68c>)
 80043a0:	6a1a      	ldr	r2, [r3, #32]
 80043a2:	4b1e      	ldr	r3, [pc, #120]	; (800441c <HAL_RCC_OscConfig+0x68c>)
 80043a4:	491e      	ldr	r1, [pc, #120]	; (8004420 <HAL_RCC_OscConfig+0x690>)
 80043a6:	400a      	ands	r2, r1
 80043a8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043aa:	f7fe f897 	bl	80024dc <HAL_GetTick>
 80043ae:	0003      	movs	r3, r0
 80043b0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043b4:	f7fe f892 	bl	80024dc <HAL_GetTick>
 80043b8:	0002      	movs	r2, r0
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e0aa      	b.n	800451c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043c6:	4b0e      	ldr	r3, [pc, #56]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	2202      	movs	r2, #2
 80043cc:	4013      	ands	r3, r2
 80043ce:	d1f1      	bne.n	80043b4 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d100      	bne.n	80043da <HAL_RCC_OscConfig+0x64a>
 80043d8:	e09f      	b.n	800451a <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	2b0c      	cmp	r3, #12
 80043de:	d100      	bne.n	80043e2 <HAL_RCC_OscConfig+0x652>
 80043e0:	e078      	b.n	80044d4 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d159      	bne.n	800449e <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ea:	4b05      	ldr	r3, [pc, #20]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	4b04      	ldr	r3, [pc, #16]	; (8004400 <HAL_RCC_OscConfig+0x670>)
 80043f0:	490c      	ldr	r1, [pc, #48]	; (8004424 <HAL_RCC_OscConfig+0x694>)
 80043f2:	400a      	ands	r2, r1
 80043f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f6:	f7fe f871 	bl	80024dc <HAL_GetTick>
 80043fa:	0003      	movs	r3, r0
 80043fc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80043fe:	e01c      	b.n	800443a <HAL_RCC_OscConfig+0x6aa>
 8004400:	40021000 	.word	0x40021000
 8004404:	ffff1fff 	.word	0xffff1fff
 8004408:	fffffeff 	.word	0xfffffeff
 800440c:	40007000 	.word	0x40007000
 8004410:	fffffbff 	.word	0xfffffbff
 8004414:	00001388 	.word	0x00001388
 8004418:	efffffff 	.word	0xefffffff
 800441c:	40010000 	.word	0x40010000
 8004420:	ffffdfff 	.word	0xffffdfff
 8004424:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004428:	f7fe f858 	bl	80024dc <HAL_GetTick>
 800442c:	0002      	movs	r2, r0
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e070      	b.n	800451c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800443a:	4b3a      	ldr	r3, [pc, #232]	; (8004524 <HAL_RCC_OscConfig+0x794>)
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	2380      	movs	r3, #128	; 0x80
 8004440:	049b      	lsls	r3, r3, #18
 8004442:	4013      	ands	r3, r2
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004446:	4b37      	ldr	r3, [pc, #220]	; (8004524 <HAL_RCC_OscConfig+0x794>)
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	4a37      	ldr	r2, [pc, #220]	; (8004528 <HAL_RCC_OscConfig+0x798>)
 800444c:	4013      	ands	r3, r2
 800444e:	0019      	movs	r1, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004458:	431a      	orrs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800445e:	431a      	orrs	r2, r3
 8004460:	4b30      	ldr	r3, [pc, #192]	; (8004524 <HAL_RCC_OscConfig+0x794>)
 8004462:	430a      	orrs	r2, r1
 8004464:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004466:	4b2f      	ldr	r3, [pc, #188]	; (8004524 <HAL_RCC_OscConfig+0x794>)
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	4b2e      	ldr	r3, [pc, #184]	; (8004524 <HAL_RCC_OscConfig+0x794>)
 800446c:	2180      	movs	r1, #128	; 0x80
 800446e:	0449      	lsls	r1, r1, #17
 8004470:	430a      	orrs	r2, r1
 8004472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004474:	f7fe f832 	bl	80024dc <HAL_GetTick>
 8004478:	0003      	movs	r3, r0
 800447a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800447e:	f7fe f82d 	bl	80024dc <HAL_GetTick>
 8004482:	0002      	movs	r2, r0
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e045      	b.n	800451c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004490:	4b24      	ldr	r3, [pc, #144]	; (8004524 <HAL_RCC_OscConfig+0x794>)
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	2380      	movs	r3, #128	; 0x80
 8004496:	049b      	lsls	r3, r3, #18
 8004498:	4013      	ands	r3, r2
 800449a:	d0f0      	beq.n	800447e <HAL_RCC_OscConfig+0x6ee>
 800449c:	e03d      	b.n	800451a <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800449e:	4b21      	ldr	r3, [pc, #132]	; (8004524 <HAL_RCC_OscConfig+0x794>)
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	4b20      	ldr	r3, [pc, #128]	; (8004524 <HAL_RCC_OscConfig+0x794>)
 80044a4:	4921      	ldr	r1, [pc, #132]	; (800452c <HAL_RCC_OscConfig+0x79c>)
 80044a6:	400a      	ands	r2, r1
 80044a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044aa:	f7fe f817 	bl	80024dc <HAL_GetTick>
 80044ae:	0003      	movs	r3, r0
 80044b0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b4:	f7fe f812 	bl	80024dc <HAL_GetTick>
 80044b8:	0002      	movs	r2, r0
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e02a      	b.n	800451c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80044c6:	4b17      	ldr	r3, [pc, #92]	; (8004524 <HAL_RCC_OscConfig+0x794>)
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	2380      	movs	r3, #128	; 0x80
 80044cc:	049b      	lsls	r3, r3, #18
 80044ce:	4013      	ands	r3, r2
 80044d0:	d1f0      	bne.n	80044b4 <HAL_RCC_OscConfig+0x724>
 80044d2:	e022      	b.n	800451a <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d101      	bne.n	80044e0 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e01d      	b.n	800451c <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044e0:	4b10      	ldr	r3, [pc, #64]	; (8004524 <HAL_RCC_OscConfig+0x794>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	2380      	movs	r3, #128	; 0x80
 80044ea:	025b      	lsls	r3, r3, #9
 80044ec:	401a      	ands	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d10f      	bne.n	8004516 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	23f0      	movs	r3, #240	; 0xf0
 80044fa:	039b      	lsls	r3, r3, #14
 80044fc:	401a      	ands	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004502:	429a      	cmp	r2, r3
 8004504:	d107      	bne.n	8004516 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	23c0      	movs	r3, #192	; 0xc0
 800450a:	041b      	lsls	r3, r3, #16
 800450c:	401a      	ands	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004512:	429a      	cmp	r2, r3
 8004514:	d001      	beq.n	800451a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	0018      	movs	r0, r3
 800451e:	46bd      	mov	sp, r7
 8004520:	b00a      	add	sp, #40	; 0x28
 8004522:	bdb0      	pop	{r4, r5, r7, pc}
 8004524:	40021000 	.word	0x40021000
 8004528:	ff02ffff 	.word	0xff02ffff
 800452c:	feffffff 	.word	0xfeffffff

08004530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004530:	b5b0      	push	{r4, r5, r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e10d      	b.n	8004760 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004544:	4b88      	ldr	r3, [pc, #544]	; (8004768 <HAL_RCC_ClockConfig+0x238>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2201      	movs	r2, #1
 800454a:	4013      	ands	r3, r2
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	429a      	cmp	r2, r3
 8004550:	d911      	bls.n	8004576 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004552:	4b85      	ldr	r3, [pc, #532]	; (8004768 <HAL_RCC_ClockConfig+0x238>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2201      	movs	r2, #1
 8004558:	4393      	bics	r3, r2
 800455a:	0019      	movs	r1, r3
 800455c:	4b82      	ldr	r3, [pc, #520]	; (8004768 <HAL_RCC_ClockConfig+0x238>)
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004564:	4b80      	ldr	r3, [pc, #512]	; (8004768 <HAL_RCC_ClockConfig+0x238>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2201      	movs	r2, #1
 800456a:	4013      	ands	r3, r2
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d001      	beq.n	8004576 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e0f4      	b.n	8004760 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2202      	movs	r2, #2
 800457c:	4013      	ands	r3, r2
 800457e:	d009      	beq.n	8004594 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004580:	4b7a      	ldr	r3, [pc, #488]	; (800476c <HAL_RCC_ClockConfig+0x23c>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	22f0      	movs	r2, #240	; 0xf0
 8004586:	4393      	bics	r3, r2
 8004588:	0019      	movs	r1, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	4b77      	ldr	r3, [pc, #476]	; (800476c <HAL_RCC_ClockConfig+0x23c>)
 8004590:	430a      	orrs	r2, r1
 8004592:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2201      	movs	r2, #1
 800459a:	4013      	ands	r3, r2
 800459c:	d100      	bne.n	80045a0 <HAL_RCC_ClockConfig+0x70>
 800459e:	e089      	b.n	80046b4 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d107      	bne.n	80045b8 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045a8:	4b70      	ldr	r3, [pc, #448]	; (800476c <HAL_RCC_ClockConfig+0x23c>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	2380      	movs	r3, #128	; 0x80
 80045ae:	029b      	lsls	r3, r3, #10
 80045b0:	4013      	ands	r3, r2
 80045b2:	d120      	bne.n	80045f6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e0d3      	b.n	8004760 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	2b03      	cmp	r3, #3
 80045be:	d107      	bne.n	80045d0 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045c0:	4b6a      	ldr	r3, [pc, #424]	; (800476c <HAL_RCC_ClockConfig+0x23c>)
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	2380      	movs	r3, #128	; 0x80
 80045c6:	049b      	lsls	r3, r3, #18
 80045c8:	4013      	ands	r3, r2
 80045ca:	d114      	bne.n	80045f6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e0c7      	b.n	8004760 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d106      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045d8:	4b64      	ldr	r3, [pc, #400]	; (800476c <HAL_RCC_ClockConfig+0x23c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2204      	movs	r2, #4
 80045de:	4013      	ands	r3, r2
 80045e0:	d109      	bne.n	80045f6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e0bc      	b.n	8004760 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80045e6:	4b61      	ldr	r3, [pc, #388]	; (800476c <HAL_RCC_ClockConfig+0x23c>)
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	2380      	movs	r3, #128	; 0x80
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4013      	ands	r3, r2
 80045f0:	d101      	bne.n	80045f6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e0b4      	b.n	8004760 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045f6:	4b5d      	ldr	r3, [pc, #372]	; (800476c <HAL_RCC_ClockConfig+0x23c>)
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	2203      	movs	r2, #3
 80045fc:	4393      	bics	r3, r2
 80045fe:	0019      	movs	r1, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	4b59      	ldr	r3, [pc, #356]	; (800476c <HAL_RCC_ClockConfig+0x23c>)
 8004606:	430a      	orrs	r2, r1
 8004608:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800460a:	f7fd ff67 	bl	80024dc <HAL_GetTick>
 800460e:	0003      	movs	r3, r0
 8004610:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2b02      	cmp	r3, #2
 8004618:	d111      	bne.n	800463e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800461a:	e009      	b.n	8004630 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800461c:	f7fd ff5e 	bl	80024dc <HAL_GetTick>
 8004620:	0002      	movs	r2, r0
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	4a52      	ldr	r2, [pc, #328]	; (8004770 <HAL_RCC_ClockConfig+0x240>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e097      	b.n	8004760 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004630:	4b4e      	ldr	r3, [pc, #312]	; (800476c <HAL_RCC_ClockConfig+0x23c>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	220c      	movs	r2, #12
 8004636:	4013      	ands	r3, r2
 8004638:	2b08      	cmp	r3, #8
 800463a:	d1ef      	bne.n	800461c <HAL_RCC_ClockConfig+0xec>
 800463c:	e03a      	b.n	80046b4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b03      	cmp	r3, #3
 8004644:	d111      	bne.n	800466a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004646:	e009      	b.n	800465c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004648:	f7fd ff48 	bl	80024dc <HAL_GetTick>
 800464c:	0002      	movs	r2, r0
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	4a47      	ldr	r2, [pc, #284]	; (8004770 <HAL_RCC_ClockConfig+0x240>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d901      	bls.n	800465c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e081      	b.n	8004760 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800465c:	4b43      	ldr	r3, [pc, #268]	; (800476c <HAL_RCC_ClockConfig+0x23c>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	220c      	movs	r2, #12
 8004662:	4013      	ands	r3, r2
 8004664:	2b0c      	cmp	r3, #12
 8004666:	d1ef      	bne.n	8004648 <HAL_RCC_ClockConfig+0x118>
 8004668:	e024      	b.n	80046b4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d11b      	bne.n	80046aa <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004672:	e009      	b.n	8004688 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004674:	f7fd ff32 	bl	80024dc <HAL_GetTick>
 8004678:	0002      	movs	r2, r0
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	4a3c      	ldr	r2, [pc, #240]	; (8004770 <HAL_RCC_ClockConfig+0x240>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e06b      	b.n	8004760 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004688:	4b38      	ldr	r3, [pc, #224]	; (800476c <HAL_RCC_ClockConfig+0x23c>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	220c      	movs	r2, #12
 800468e:	4013      	ands	r3, r2
 8004690:	2b04      	cmp	r3, #4
 8004692:	d1ef      	bne.n	8004674 <HAL_RCC_ClockConfig+0x144>
 8004694:	e00e      	b.n	80046b4 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004696:	f7fd ff21 	bl	80024dc <HAL_GetTick>
 800469a:	0002      	movs	r2, r0
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	4a33      	ldr	r2, [pc, #204]	; (8004770 <HAL_RCC_ClockConfig+0x240>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e05a      	b.n	8004760 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80046aa:	4b30      	ldr	r3, [pc, #192]	; (800476c <HAL_RCC_ClockConfig+0x23c>)
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	220c      	movs	r2, #12
 80046b0:	4013      	ands	r3, r2
 80046b2:	d1f0      	bne.n	8004696 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046b4:	4b2c      	ldr	r3, [pc, #176]	; (8004768 <HAL_RCC_ClockConfig+0x238>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2201      	movs	r2, #1
 80046ba:	4013      	ands	r3, r2
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d211      	bcs.n	80046e6 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c2:	4b29      	ldr	r3, [pc, #164]	; (8004768 <HAL_RCC_ClockConfig+0x238>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2201      	movs	r2, #1
 80046c8:	4393      	bics	r3, r2
 80046ca:	0019      	movs	r1, r3
 80046cc:	4b26      	ldr	r3, [pc, #152]	; (8004768 <HAL_RCC_ClockConfig+0x238>)
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d4:	4b24      	ldr	r3, [pc, #144]	; (8004768 <HAL_RCC_ClockConfig+0x238>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2201      	movs	r2, #1
 80046da:	4013      	ands	r3, r2
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d001      	beq.n	80046e6 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e03c      	b.n	8004760 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2204      	movs	r2, #4
 80046ec:	4013      	ands	r3, r2
 80046ee:	d009      	beq.n	8004704 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046f0:	4b1e      	ldr	r3, [pc, #120]	; (800476c <HAL_RCC_ClockConfig+0x23c>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	4a1f      	ldr	r2, [pc, #124]	; (8004774 <HAL_RCC_ClockConfig+0x244>)
 80046f6:	4013      	ands	r3, r2
 80046f8:	0019      	movs	r1, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	4b1b      	ldr	r3, [pc, #108]	; (800476c <HAL_RCC_ClockConfig+0x23c>)
 8004700:	430a      	orrs	r2, r1
 8004702:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2208      	movs	r2, #8
 800470a:	4013      	ands	r3, r2
 800470c:	d00a      	beq.n	8004724 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800470e:	4b17      	ldr	r3, [pc, #92]	; (800476c <HAL_RCC_ClockConfig+0x23c>)
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	4a19      	ldr	r2, [pc, #100]	; (8004778 <HAL_RCC_ClockConfig+0x248>)
 8004714:	4013      	ands	r3, r2
 8004716:	0019      	movs	r1, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	00da      	lsls	r2, r3, #3
 800471e:	4b13      	ldr	r3, [pc, #76]	; (800476c <HAL_RCC_ClockConfig+0x23c>)
 8004720:	430a      	orrs	r2, r1
 8004722:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004724:	f000 f82e 	bl	8004784 <HAL_RCC_GetSysClockFreq>
 8004728:	0001      	movs	r1, r0
 800472a:	4b10      	ldr	r3, [pc, #64]	; (800476c <HAL_RCC_ClockConfig+0x23c>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	091b      	lsrs	r3, r3, #4
 8004730:	220f      	movs	r2, #15
 8004732:	4013      	ands	r3, r2
 8004734:	4a11      	ldr	r2, [pc, #68]	; (800477c <HAL_RCC_ClockConfig+0x24c>)
 8004736:	5cd3      	ldrb	r3, [r2, r3]
 8004738:	000a      	movs	r2, r1
 800473a:	40da      	lsrs	r2, r3
 800473c:	4b10      	ldr	r3, [pc, #64]	; (8004780 <HAL_RCC_ClockConfig+0x250>)
 800473e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8004740:	250b      	movs	r5, #11
 8004742:	197c      	adds	r4, r7, r5
 8004744:	2000      	movs	r0, #0
 8004746:	f005 fc25 	bl	8009f94 <HAL_InitTick>
 800474a:	0003      	movs	r3, r0
 800474c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800474e:	197b      	adds	r3, r7, r5
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8004756:	230b      	movs	r3, #11
 8004758:	18fb      	adds	r3, r7, r3
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	e000      	b.n	8004760 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	0018      	movs	r0, r3
 8004762:	46bd      	mov	sp, r7
 8004764:	b004      	add	sp, #16
 8004766:	bdb0      	pop	{r4, r5, r7, pc}
 8004768:	40022000 	.word	0x40022000
 800476c:	40021000 	.word	0x40021000
 8004770:	00001388 	.word	0x00001388
 8004774:	fffff8ff 	.word	0xfffff8ff
 8004778:	ffffc7ff 	.word	0xffffc7ff
 800477c:	0800a548 	.word	0x0800a548
 8004780:	20000004 	.word	0x20000004

08004784 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800478a:	4b3b      	ldr	r3, [pc, #236]	; (8004878 <HAL_RCC_GetSysClockFreq+0xf4>)
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	220c      	movs	r2, #12
 8004794:	4013      	ands	r3, r2
 8004796:	2b08      	cmp	r3, #8
 8004798:	d00e      	beq.n	80047b8 <HAL_RCC_GetSysClockFreq+0x34>
 800479a:	2b0c      	cmp	r3, #12
 800479c:	d00f      	beq.n	80047be <HAL_RCC_GetSysClockFreq+0x3a>
 800479e:	2b04      	cmp	r3, #4
 80047a0:	d157      	bne.n	8004852 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80047a2:	4b35      	ldr	r3, [pc, #212]	; (8004878 <HAL_RCC_GetSysClockFreq+0xf4>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2210      	movs	r2, #16
 80047a8:	4013      	ands	r3, r2
 80047aa:	d002      	beq.n	80047b2 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80047ac:	4b33      	ldr	r3, [pc, #204]	; (800487c <HAL_RCC_GetSysClockFreq+0xf8>)
 80047ae:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80047b0:	e05d      	b.n	800486e <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80047b2:	4b33      	ldr	r3, [pc, #204]	; (8004880 <HAL_RCC_GetSysClockFreq+0xfc>)
 80047b4:	613b      	str	r3, [r7, #16]
      break;
 80047b6:	e05a      	b.n	800486e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047b8:	4b32      	ldr	r3, [pc, #200]	; (8004884 <HAL_RCC_GetSysClockFreq+0x100>)
 80047ba:	613b      	str	r3, [r7, #16]
      break;
 80047bc:	e057      	b.n	800486e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	0c9b      	lsrs	r3, r3, #18
 80047c2:	220f      	movs	r2, #15
 80047c4:	4013      	ands	r3, r2
 80047c6:	4a30      	ldr	r2, [pc, #192]	; (8004888 <HAL_RCC_GetSysClockFreq+0x104>)
 80047c8:	5cd3      	ldrb	r3, [r2, r3]
 80047ca:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	0d9b      	lsrs	r3, r3, #22
 80047d0:	2203      	movs	r2, #3
 80047d2:	4013      	ands	r3, r2
 80047d4:	3301      	adds	r3, #1
 80047d6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047d8:	4b27      	ldr	r3, [pc, #156]	; (8004878 <HAL_RCC_GetSysClockFreq+0xf4>)
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	2380      	movs	r3, #128	; 0x80
 80047de:	025b      	lsls	r3, r3, #9
 80047e0:	4013      	ands	r3, r2
 80047e2:	d00f      	beq.n	8004804 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80047e4:	68b9      	ldr	r1, [r7, #8]
 80047e6:	000a      	movs	r2, r1
 80047e8:	0152      	lsls	r2, r2, #5
 80047ea:	1a52      	subs	r2, r2, r1
 80047ec:	0193      	lsls	r3, r2, #6
 80047ee:	1a9b      	subs	r3, r3, r2
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	185b      	adds	r3, r3, r1
 80047f4:	025b      	lsls	r3, r3, #9
 80047f6:	6879      	ldr	r1, [r7, #4]
 80047f8:	0018      	movs	r0, r3
 80047fa:	f7fb fc85 	bl	8000108 <__udivsi3>
 80047fe:	0003      	movs	r3, r0
 8004800:	617b      	str	r3, [r7, #20]
 8004802:	e023      	b.n	800484c <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004804:	4b1c      	ldr	r3, [pc, #112]	; (8004878 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2210      	movs	r2, #16
 800480a:	4013      	ands	r3, r2
 800480c:	d00f      	beq.n	800482e <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800480e:	68b9      	ldr	r1, [r7, #8]
 8004810:	000a      	movs	r2, r1
 8004812:	0152      	lsls	r2, r2, #5
 8004814:	1a52      	subs	r2, r2, r1
 8004816:	0193      	lsls	r3, r2, #6
 8004818:	1a9b      	subs	r3, r3, r2
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	185b      	adds	r3, r3, r1
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	0018      	movs	r0, r3
 8004824:	f7fb fc70 	bl	8000108 <__udivsi3>
 8004828:	0003      	movs	r3, r0
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	e00e      	b.n	800484c <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800482e:	68b9      	ldr	r1, [r7, #8]
 8004830:	000a      	movs	r2, r1
 8004832:	0152      	lsls	r2, r2, #5
 8004834:	1a52      	subs	r2, r2, r1
 8004836:	0193      	lsls	r3, r2, #6
 8004838:	1a9b      	subs	r3, r3, r2
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	185b      	adds	r3, r3, r1
 800483e:	029b      	lsls	r3, r3, #10
 8004840:	6879      	ldr	r1, [r7, #4]
 8004842:	0018      	movs	r0, r3
 8004844:	f7fb fc60 	bl	8000108 <__udivsi3>
 8004848:	0003      	movs	r3, r0
 800484a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	613b      	str	r3, [r7, #16]
      break;
 8004850:	e00d      	b.n	800486e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004852:	4b09      	ldr	r3, [pc, #36]	; (8004878 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	0b5b      	lsrs	r3, r3, #13
 8004858:	2207      	movs	r2, #7
 800485a:	4013      	ands	r3, r2
 800485c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	3301      	adds	r3, #1
 8004862:	2280      	movs	r2, #128	; 0x80
 8004864:	0212      	lsls	r2, r2, #8
 8004866:	409a      	lsls	r2, r3
 8004868:	0013      	movs	r3, r2
 800486a:	613b      	str	r3, [r7, #16]
      break;
 800486c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800486e:	693b      	ldr	r3, [r7, #16]
}
 8004870:	0018      	movs	r0, r3
 8004872:	46bd      	mov	sp, r7
 8004874:	b006      	add	sp, #24
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40021000 	.word	0x40021000
 800487c:	003d0900 	.word	0x003d0900
 8004880:	00f42400 	.word	0x00f42400
 8004884:	007a1200 	.word	0x007a1200
 8004888:	0800a560 	.word	0x0800a560

0800488c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004890:	4b02      	ldr	r3, [pc, #8]	; (800489c <HAL_RCC_GetHCLKFreq+0x10>)
 8004892:	681b      	ldr	r3, [r3, #0]
}
 8004894:	0018      	movs	r0, r3
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	46c0      	nop			; (mov r8, r8)
 800489c:	20000004 	.word	0x20000004

080048a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048a4:	f7ff fff2 	bl	800488c <HAL_RCC_GetHCLKFreq>
 80048a8:	0001      	movs	r1, r0
 80048aa:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	0a1b      	lsrs	r3, r3, #8
 80048b0:	2207      	movs	r2, #7
 80048b2:	4013      	ands	r3, r2
 80048b4:	4a04      	ldr	r2, [pc, #16]	; (80048c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048b6:	5cd3      	ldrb	r3, [r2, r3]
 80048b8:	40d9      	lsrs	r1, r3
 80048ba:	000b      	movs	r3, r1
}
 80048bc:	0018      	movs	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	46c0      	nop			; (mov r8, r8)
 80048c4:	40021000 	.word	0x40021000
 80048c8:	0800a558 	.word	0x0800a558

080048cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048d0:	f7ff ffdc 	bl	800488c <HAL_RCC_GetHCLKFreq>
 80048d4:	0001      	movs	r1, r0
 80048d6:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	0adb      	lsrs	r3, r3, #11
 80048dc:	2207      	movs	r2, #7
 80048de:	4013      	ands	r3, r2
 80048e0:	4a04      	ldr	r2, [pc, #16]	; (80048f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048e2:	5cd3      	ldrb	r3, [r2, r3]
 80048e4:	40d9      	lsrs	r1, r3
 80048e6:	000b      	movs	r3, r1
}
 80048e8:	0018      	movs	r0, r3
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	46c0      	nop			; (mov r8, r8)
 80048f0:	40021000 	.word	0x40021000
 80048f4:	0800a558 	.word	0x0800a558

080048f8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	220f      	movs	r2, #15
 8004906:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004908:	4b12      	ldr	r3, [pc, #72]	; (8004954 <HAL_RCC_GetClockConfig+0x5c>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	2203      	movs	r2, #3
 800490e:	401a      	ands	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004914:	4b0f      	ldr	r3, [pc, #60]	; (8004954 <HAL_RCC_GetClockConfig+0x5c>)
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	22f0      	movs	r2, #240	; 0xf0
 800491a:	401a      	ands	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004920:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <HAL_RCC_GetClockConfig+0x5c>)
 8004922:	68da      	ldr	r2, [r3, #12]
 8004924:	23e0      	movs	r3, #224	; 0xe0
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	401a      	ands	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800492e:	4b09      	ldr	r3, [pc, #36]	; (8004954 <HAL_RCC_GetClockConfig+0x5c>)
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	08da      	lsrs	r2, r3, #3
 8004934:	23e0      	movs	r3, #224	; 0xe0
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	401a      	ands	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800493e:	4b06      	ldr	r3, [pc, #24]	; (8004958 <HAL_RCC_GetClockConfig+0x60>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2201      	movs	r2, #1
 8004944:	401a      	ands	r2, r3
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	601a      	str	r2, [r3, #0]
}
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	46bd      	mov	sp, r7
 800494e:	b002      	add	sp, #8
 8004950:	bd80      	pop	{r7, pc}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	40021000 	.word	0x40021000
 8004958:	40022000 	.word	0x40022000

0800495c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2220      	movs	r2, #32
 800496a:	4013      	ands	r3, r2
 800496c:	d100      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x14>
 800496e:	e0c7      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8004970:	2317      	movs	r3, #23
 8004972:	18fb      	adds	r3, r7, r3
 8004974:	2200      	movs	r2, #0
 8004976:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004978:	4b99      	ldr	r3, [pc, #612]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800497a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800497c:	2380      	movs	r3, #128	; 0x80
 800497e:	055b      	lsls	r3, r3, #21
 8004980:	4013      	ands	r3, r2
 8004982:	d10a      	bne.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004984:	4b96      	ldr	r3, [pc, #600]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004988:	4b95      	ldr	r3, [pc, #596]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800498a:	2180      	movs	r1, #128	; 0x80
 800498c:	0549      	lsls	r1, r1, #21
 800498e:	430a      	orrs	r2, r1
 8004990:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004992:	2317      	movs	r3, #23
 8004994:	18fb      	adds	r3, r7, r3
 8004996:	2201      	movs	r2, #1
 8004998:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800499a:	4b92      	ldr	r3, [pc, #584]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	2380      	movs	r3, #128	; 0x80
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	4013      	ands	r3, r2
 80049a4:	d11a      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049a6:	4b8f      	ldr	r3, [pc, #572]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	4b8e      	ldr	r3, [pc, #568]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80049ac:	2180      	movs	r1, #128	; 0x80
 80049ae:	0049      	lsls	r1, r1, #1
 80049b0:	430a      	orrs	r2, r1
 80049b2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049b4:	f7fd fd92 	bl	80024dc <HAL_GetTick>
 80049b8:	0003      	movs	r3, r0
 80049ba:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049bc:	e008      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049be:	f7fd fd8d 	bl	80024dc <HAL_GetTick>
 80049c2:	0002      	movs	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b64      	cmp	r3, #100	; 0x64
 80049ca:	d901      	bls.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e102      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d0:	4b84      	ldr	r3, [pc, #528]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	2380      	movs	r3, #128	; 0x80
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	4013      	ands	r3, r2
 80049da:	d0f0      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80049dc:	4b80      	ldr	r3, [pc, #512]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	23c0      	movs	r3, #192	; 0xc0
 80049e2:	039b      	lsls	r3, r3, #14
 80049e4:	4013      	ands	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	23c0      	movs	r3, #192	; 0xc0
 80049ee:	039b      	lsls	r3, r3, #14
 80049f0:	4013      	ands	r3, r2
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d013      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	23c0      	movs	r3, #192	; 0xc0
 80049fe:	029b      	lsls	r3, r3, #10
 8004a00:	401a      	ands	r2, r3
 8004a02:	23c0      	movs	r3, #192	; 0xc0
 8004a04:	029b      	lsls	r3, r3, #10
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d10a      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004a0a:	4b75      	ldr	r3, [pc, #468]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	2380      	movs	r3, #128	; 0x80
 8004a10:	029b      	lsls	r3, r3, #10
 8004a12:	401a      	ands	r2, r3
 8004a14:	2380      	movs	r3, #128	; 0x80
 8004a16:	029b      	lsls	r3, r3, #10
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d101      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e0da      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004a20:	4b6f      	ldr	r3, [pc, #444]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004a22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a24:	23c0      	movs	r3, #192	; 0xc0
 8004a26:	029b      	lsls	r3, r3, #10
 8004a28:	4013      	ands	r3, r2
 8004a2a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d03b      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	23c0      	movs	r3, #192	; 0xc0
 8004a38:	029b      	lsls	r3, r3, #10
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d033      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2220      	movs	r2, #32
 8004a48:	4013      	ands	r3, r2
 8004a4a:	d02e      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004a4c:	4b64      	ldr	r3, [pc, #400]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a50:	4a65      	ldr	r2, [pc, #404]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004a52:	4013      	ands	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a56:	4b62      	ldr	r3, [pc, #392]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004a58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a5a:	4b61      	ldr	r3, [pc, #388]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004a5c:	2180      	movs	r1, #128	; 0x80
 8004a5e:	0309      	lsls	r1, r1, #12
 8004a60:	430a      	orrs	r2, r1
 8004a62:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a64:	4b5e      	ldr	r3, [pc, #376]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004a66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a68:	4b5d      	ldr	r3, [pc, #372]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004a6a:	4960      	ldr	r1, [pc, #384]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004a6c:	400a      	ands	r2, r1
 8004a6e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004a70:	4b5b      	ldr	r3, [pc, #364]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	2380      	movs	r3, #128	; 0x80
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	d014      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a80:	f7fd fd2c 	bl	80024dc <HAL_GetTick>
 8004a84:	0003      	movs	r3, r0
 8004a86:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a88:	e009      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a8a:	f7fd fd27 	bl	80024dc <HAL_GetTick>
 8004a8e:	0002      	movs	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	4a56      	ldr	r2, [pc, #344]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e09b      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a9e:	4b50      	ldr	r3, [pc, #320]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004aa0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004aa2:	2380      	movs	r3, #128	; 0x80
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	d0ef      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	23c0      	movs	r3, #192	; 0xc0
 8004ab0:	029b      	lsls	r3, r3, #10
 8004ab2:	401a      	ands	r2, r3
 8004ab4:	23c0      	movs	r3, #192	; 0xc0
 8004ab6:	029b      	lsls	r3, r3, #10
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d10c      	bne.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004abc:	4b48      	ldr	r3, [pc, #288]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a4c      	ldr	r2, [pc, #304]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	0019      	movs	r1, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	23c0      	movs	r3, #192	; 0xc0
 8004acc:	039b      	lsls	r3, r3, #14
 8004ace:	401a      	ands	r2, r3
 8004ad0:	4b43      	ldr	r3, [pc, #268]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	4b42      	ldr	r3, [pc, #264]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ad8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	23c0      	movs	r3, #192	; 0xc0
 8004ae0:	029b      	lsls	r3, r3, #10
 8004ae2:	401a      	ands	r2, r3
 8004ae4:	4b3e      	ldr	r3, [pc, #248]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004aea:	2317      	movs	r3, #23
 8004aec:	18fb      	adds	r3, r7, r3
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d105      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004af4:	4b3a      	ldr	r3, [pc, #232]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004af8:	4b39      	ldr	r3, [pc, #228]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004afa:	493f      	ldr	r1, [pc, #252]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004afc:	400a      	ands	r2, r1
 8004afe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2201      	movs	r2, #1
 8004b06:	4013      	ands	r3, r2
 8004b08:	d009      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b0a:	4b35      	ldr	r3, [pc, #212]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0e:	2203      	movs	r2, #3
 8004b10:	4393      	bics	r3, r2
 8004b12:	0019      	movs	r1, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	4b31      	ldr	r3, [pc, #196]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2202      	movs	r2, #2
 8004b24:	4013      	ands	r3, r2
 8004b26:	d009      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b28:	4b2d      	ldr	r3, [pc, #180]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b2c:	220c      	movs	r2, #12
 8004b2e:	4393      	bics	r3, r2
 8004b30:	0019      	movs	r1, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	4b2a      	ldr	r3, [pc, #168]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2204      	movs	r2, #4
 8004b42:	4013      	ands	r3, r2
 8004b44:	d009      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b46:	4b26      	ldr	r3, [pc, #152]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b4a:	4a2c      	ldr	r2, [pc, #176]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	0019      	movs	r1, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	4b22      	ldr	r3, [pc, #136]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004b56:	430a      	orrs	r2, r1
 8004b58:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2208      	movs	r2, #8
 8004b60:	4013      	ands	r3, r2
 8004b62:	d009      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b64:	4b1e      	ldr	r3, [pc, #120]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b68:	4a25      	ldr	r2, [pc, #148]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	0019      	movs	r1, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695a      	ldr	r2, [r3, #20]
 8004b72:	4b1b      	ldr	r3, [pc, #108]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004b74:	430a      	orrs	r2, r1
 8004b76:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	2380      	movs	r3, #128	; 0x80
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	4013      	ands	r3, r2
 8004b82:	d009      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b84:	4b16      	ldr	r3, [pc, #88]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b88:	4a17      	ldr	r2, [pc, #92]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	0019      	movs	r1, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699a      	ldr	r2, [r3, #24]
 8004b92:	4b13      	ldr	r3, [pc, #76]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004b94:	430a      	orrs	r2, r1
 8004b96:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2240      	movs	r2, #64	; 0x40
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	d009      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ba2:	4b0f      	ldr	r3, [pc, #60]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba6:	4a17      	ldr	r2, [pc, #92]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004ba8:	4013      	ands	r3, r2
 8004baa:	0019      	movs	r1, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a1a      	ldr	r2, [r3, #32]
 8004bb0:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2280      	movs	r2, #128	; 0x80
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	d009      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004bc0:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bc4:	4a10      	ldr	r2, [pc, #64]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	0019      	movs	r1, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	69da      	ldr	r2, [r3, #28]
 8004bce:	4b04      	ldr	r3, [pc, #16]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	b006      	add	sp, #24
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	40021000 	.word	0x40021000
 8004be4:	40007000 	.word	0x40007000
 8004be8:	fffcffff 	.word	0xfffcffff
 8004bec:	fff7ffff 	.word	0xfff7ffff
 8004bf0:	00001388 	.word	0x00001388
 8004bf4:	ffcfffff 	.word	0xffcfffff
 8004bf8:	efffffff 	.word	0xefffffff
 8004bfc:	fffff3ff 	.word	0xfffff3ff
 8004c00:	ffffcfff 	.word	0xffffcfff
 8004c04:	fbffffff 	.word	0xfbffffff
 8004c08:	fff3ffff 	.word	0xfff3ffff

08004c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e01e      	b.n	8004c5c <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2239      	movs	r2, #57	; 0x39
 8004c22:	5c9b      	ldrb	r3, [r3, r2]
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d107      	bne.n	8004c3a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2238      	movs	r2, #56	; 0x38
 8004c2e:	2100      	movs	r1, #0
 8004c30:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	0018      	movs	r0, r3
 8004c36:	f005 f8c7 	bl	8009dc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2239      	movs	r2, #57	; 0x39
 8004c3e:	2102      	movs	r1, #2
 8004c40:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	0019      	movs	r1, r3
 8004c4c:	0010      	movs	r0, r2
 8004c4e:	f000 fa13 	bl	8005078 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2239      	movs	r2, #57	; 0x39
 8004c56:	2101      	movs	r1, #1
 8004c58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	b002      	add	sp, #8
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2239      	movs	r2, #57	; 0x39
 8004c70:	2102      	movs	r1, #2
 8004c72:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	2207      	movs	r2, #7
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2b06      	cmp	r3, #6
 8004c84:	d007      	beq.n	8004c96 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2101      	movs	r1, #1
 8004c92:	430a      	orrs	r2, r1
 8004c94:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2239      	movs	r2, #57	; 0x39
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	b004      	add	sp, #16
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2101      	movs	r1, #1
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	2207      	movs	r2, #7
 8004cc8:	4013      	ands	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b06      	cmp	r3, #6
 8004cd0:	d007      	beq.n	8004ce2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2101      	movs	r1, #1
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	b004      	add	sp, #16
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d124      	bne.n	8004d4c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	2202      	movs	r2, #2
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d11d      	bne.n	8004d4c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2203      	movs	r2, #3
 8004d16:	4252      	negs	r2, r2
 8004d18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	2203      	movs	r2, #3
 8004d28:	4013      	ands	r3, r2
 8004d2a:	d004      	beq.n	8004d36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	0018      	movs	r0, r3
 8004d30:	f000 f98a 	bl	8005048 <HAL_TIM_IC_CaptureCallback>
 8004d34:	e007      	b.n	8004d46 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	0018      	movs	r0, r3
 8004d3a:	f000 f97d 	bl	8005038 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	0018      	movs	r0, r3
 8004d42:	f000 f989 	bl	8005058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	2204      	movs	r2, #4
 8004d54:	4013      	ands	r3, r2
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d125      	bne.n	8004da6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	2204      	movs	r2, #4
 8004d62:	4013      	ands	r3, r2
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d11e      	bne.n	8004da6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2205      	movs	r2, #5
 8004d6e:	4252      	negs	r2, r2
 8004d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2202      	movs	r2, #2
 8004d76:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699a      	ldr	r2, [r3, #24]
 8004d7e:	23c0      	movs	r3, #192	; 0xc0
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4013      	ands	r3, r2
 8004d84:	d004      	beq.n	8004d90 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	0018      	movs	r0, r3
 8004d8a:	f000 f95d 	bl	8005048 <HAL_TIM_IC_CaptureCallback>
 8004d8e:	e007      	b.n	8004da0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	0018      	movs	r0, r3
 8004d94:	f000 f950 	bl	8005038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	f000 f95c 	bl	8005058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	2208      	movs	r2, #8
 8004dae:	4013      	ands	r3, r2
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	d124      	bne.n	8004dfe <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	2208      	movs	r2, #8
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	2b08      	cmp	r3, #8
 8004dc0:	d11d      	bne.n	8004dfe <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2209      	movs	r2, #9
 8004dc8:	4252      	negs	r2, r2
 8004dca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2204      	movs	r2, #4
 8004dd0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	2203      	movs	r2, #3
 8004dda:	4013      	ands	r3, r2
 8004ddc:	d004      	beq.n	8004de8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	0018      	movs	r0, r3
 8004de2:	f000 f931 	bl	8005048 <HAL_TIM_IC_CaptureCallback>
 8004de6:	e007      	b.n	8004df8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	0018      	movs	r0, r3
 8004dec:	f000 f924 	bl	8005038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	0018      	movs	r0, r3
 8004df4:	f000 f930 	bl	8005058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	2210      	movs	r2, #16
 8004e06:	4013      	ands	r3, r2
 8004e08:	2b10      	cmp	r3, #16
 8004e0a:	d125      	bne.n	8004e58 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	2210      	movs	r2, #16
 8004e14:	4013      	ands	r3, r2
 8004e16:	2b10      	cmp	r3, #16
 8004e18:	d11e      	bne.n	8004e58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2211      	movs	r2, #17
 8004e20:	4252      	negs	r2, r2
 8004e22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2208      	movs	r2, #8
 8004e28:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69da      	ldr	r2, [r3, #28]
 8004e30:	23c0      	movs	r3, #192	; 0xc0
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4013      	ands	r3, r2
 8004e36:	d004      	beq.n	8004e42 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	f000 f904 	bl	8005048 <HAL_TIM_IC_CaptureCallback>
 8004e40:	e007      	b.n	8004e52 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	0018      	movs	r0, r3
 8004e46:	f000 f8f7 	bl	8005038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	f000 f903 	bl	8005058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	4013      	ands	r3, r2
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d10f      	bne.n	8004e86 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	4013      	ands	r3, r2
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d108      	bne.n	8004e86 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2202      	movs	r2, #2
 8004e7a:	4252      	negs	r2, r2
 8004e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	0018      	movs	r0, r3
 8004e82:	f004 fac1 	bl	8009408 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	2240      	movs	r2, #64	; 0x40
 8004e8e:	4013      	ands	r3, r2
 8004e90:	2b40      	cmp	r3, #64	; 0x40
 8004e92:	d10f      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	2240      	movs	r2, #64	; 0x40
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	2b40      	cmp	r3, #64	; 0x40
 8004ea0:	d108      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2241      	movs	r2, #65	; 0x41
 8004ea8:	4252      	negs	r2, r2
 8004eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	0018      	movs	r0, r3
 8004eb0:	f000 f8da 	bl	8005068 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eb4:	46c0      	nop			; (mov r8, r8)
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	b002      	add	sp, #8
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2238      	movs	r2, #56	; 0x38
 8004eca:	5c9b      	ldrb	r3, [r3, r2]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_TIM_ConfigClockSource+0x18>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e0ab      	b.n	800502c <HAL_TIM_ConfigClockSource+0x170>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2238      	movs	r2, #56	; 0x38
 8004ed8:	2101      	movs	r1, #1
 8004eda:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2239      	movs	r2, #57	; 0x39
 8004ee0:	2102      	movs	r1, #2
 8004ee2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2277      	movs	r2, #119	; 0x77
 8004ef0:	4393      	bics	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4a4f      	ldr	r2, [pc, #316]	; (8005034 <HAL_TIM_ConfigClockSource+0x178>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b40      	cmp	r3, #64	; 0x40
 8004f0a:	d100      	bne.n	8004f0e <HAL_TIM_ConfigClockSource+0x52>
 8004f0c:	e06b      	b.n	8004fe6 <HAL_TIM_ConfigClockSource+0x12a>
 8004f0e:	d80e      	bhi.n	8004f2e <HAL_TIM_ConfigClockSource+0x72>
 8004f10:	2b10      	cmp	r3, #16
 8004f12:	d100      	bne.n	8004f16 <HAL_TIM_ConfigClockSource+0x5a>
 8004f14:	e077      	b.n	8005006 <HAL_TIM_ConfigClockSource+0x14a>
 8004f16:	d803      	bhi.n	8004f20 <HAL_TIM_ConfigClockSource+0x64>
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d100      	bne.n	8004f1e <HAL_TIM_ConfigClockSource+0x62>
 8004f1c:	e073      	b.n	8005006 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004f1e:	e07c      	b.n	800501a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004f20:	2b20      	cmp	r3, #32
 8004f22:	d100      	bne.n	8004f26 <HAL_TIM_ConfigClockSource+0x6a>
 8004f24:	e06f      	b.n	8005006 <HAL_TIM_ConfigClockSource+0x14a>
 8004f26:	2b30      	cmp	r3, #48	; 0x30
 8004f28:	d100      	bne.n	8004f2c <HAL_TIM_ConfigClockSource+0x70>
 8004f2a:	e06c      	b.n	8005006 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8004f2c:	e075      	b.n	800501a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004f2e:	2b70      	cmp	r3, #112	; 0x70
 8004f30:	d00e      	beq.n	8004f50 <HAL_TIM_ConfigClockSource+0x94>
 8004f32:	d804      	bhi.n	8004f3e <HAL_TIM_ConfigClockSource+0x82>
 8004f34:	2b50      	cmp	r3, #80	; 0x50
 8004f36:	d036      	beq.n	8004fa6 <HAL_TIM_ConfigClockSource+0xea>
 8004f38:	2b60      	cmp	r3, #96	; 0x60
 8004f3a:	d044      	beq.n	8004fc6 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8004f3c:	e06d      	b.n	800501a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004f3e:	2280      	movs	r2, #128	; 0x80
 8004f40:	0152      	lsls	r2, r2, #5
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d068      	beq.n	8005018 <HAL_TIM_ConfigClockSource+0x15c>
 8004f46:	2280      	movs	r2, #128	; 0x80
 8004f48:	0192      	lsls	r2, r2, #6
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d017      	beq.n	8004f7e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8004f4e:	e064      	b.n	800501a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6818      	ldr	r0, [r3, #0]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	6899      	ldr	r1, [r3, #8]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f000 f962 	bl	8005228 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2277      	movs	r2, #119	; 0x77
 8004f70:	4313      	orrs	r3, r2
 8004f72:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	609a      	str	r2, [r3, #8]
      break;
 8004f7c:	e04d      	b.n	800501a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6818      	ldr	r0, [r3, #0]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	6899      	ldr	r1, [r3, #8]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f000 f94b 	bl	8005228 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2180      	movs	r1, #128	; 0x80
 8004f9e:	01c9      	lsls	r1, r1, #7
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	609a      	str	r2, [r3, #8]
      break;
 8004fa4:	e039      	b.n	800501a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6818      	ldr	r0, [r3, #0]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	6859      	ldr	r1, [r3, #4]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	001a      	movs	r2, r3
 8004fb4:	f000 f8be 	bl	8005134 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2150      	movs	r1, #80	; 0x50
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	f000 f918 	bl	80051f4 <TIM_ITRx_SetConfig>
      break;
 8004fc4:	e029      	b.n	800501a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6818      	ldr	r0, [r3, #0]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	6859      	ldr	r1, [r3, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	001a      	movs	r2, r3
 8004fd4:	f000 f8dc 	bl	8005190 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2160      	movs	r1, #96	; 0x60
 8004fde:	0018      	movs	r0, r3
 8004fe0:	f000 f908 	bl	80051f4 <TIM_ITRx_SetConfig>
      break;
 8004fe4:	e019      	b.n	800501a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6818      	ldr	r0, [r3, #0]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	6859      	ldr	r1, [r3, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	001a      	movs	r2, r3
 8004ff4:	f000 f89e 	bl	8005134 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2140      	movs	r1, #64	; 0x40
 8004ffe:	0018      	movs	r0, r3
 8005000:	f000 f8f8 	bl	80051f4 <TIM_ITRx_SetConfig>
      break;
 8005004:	e009      	b.n	800501a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	0019      	movs	r1, r3
 8005010:	0010      	movs	r0, r2
 8005012:	f000 f8ef 	bl	80051f4 <TIM_ITRx_SetConfig>
      break;
 8005016:	e000      	b.n	800501a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8005018:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2239      	movs	r2, #57	; 0x39
 800501e:	2101      	movs	r1, #1
 8005020:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2238      	movs	r2, #56	; 0x38
 8005026:	2100      	movs	r1, #0
 8005028:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	0018      	movs	r0, r3
 800502e:	46bd      	mov	sp, r7
 8005030:	b004      	add	sp, #16
 8005032:	bd80      	pop	{r7, pc}
 8005034:	ffff00ff 	.word	0xffff00ff

08005038 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005040:	46c0      	nop			; (mov r8, r8)
 8005042:	46bd      	mov	sp, r7
 8005044:	b002      	add	sp, #8
 8005046:	bd80      	pop	{r7, pc}

08005048 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005050:	46c0      	nop			; (mov r8, r8)
 8005052:	46bd      	mov	sp, r7
 8005054:	b002      	add	sp, #8
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005060:	46c0      	nop			; (mov r8, r8)
 8005062:	46bd      	mov	sp, r7
 8005064:	b002      	add	sp, #8
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005070:	46c0      	nop			; (mov r8, r8)
 8005072:	46bd      	mov	sp, r7
 8005074:	b002      	add	sp, #8
 8005076:	bd80      	pop	{r7, pc}

08005078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	2380      	movs	r3, #128	; 0x80
 800508c:	05db      	lsls	r3, r3, #23
 800508e:	429a      	cmp	r2, r3
 8005090:	d00b      	beq.n	80050aa <TIM_Base_SetConfig+0x32>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a23      	ldr	r2, [pc, #140]	; (8005124 <TIM_Base_SetConfig+0xac>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d007      	beq.n	80050aa <TIM_Base_SetConfig+0x32>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a22      	ldr	r2, [pc, #136]	; (8005128 <TIM_Base_SetConfig+0xb0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d003      	beq.n	80050aa <TIM_Base_SetConfig+0x32>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a21      	ldr	r2, [pc, #132]	; (800512c <TIM_Base_SetConfig+0xb4>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d108      	bne.n	80050bc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2270      	movs	r2, #112	; 0x70
 80050ae:	4393      	bics	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	2380      	movs	r3, #128	; 0x80
 80050c0:	05db      	lsls	r3, r3, #23
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d00b      	beq.n	80050de <TIM_Base_SetConfig+0x66>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a16      	ldr	r2, [pc, #88]	; (8005124 <TIM_Base_SetConfig+0xac>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d007      	beq.n	80050de <TIM_Base_SetConfig+0x66>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a15      	ldr	r2, [pc, #84]	; (8005128 <TIM_Base_SetConfig+0xb0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d003      	beq.n	80050de <TIM_Base_SetConfig+0x66>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a14      	ldr	r2, [pc, #80]	; (800512c <TIM_Base_SetConfig+0xb4>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d108      	bne.n	80050f0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4a13      	ldr	r2, [pc, #76]	; (8005130 <TIM_Base_SetConfig+0xb8>)
 80050e2:	4013      	ands	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2280      	movs	r2, #128	; 0x80
 80050f4:	4393      	bics	r3, r2
 80050f6:	001a      	movs	r2, r3
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	615a      	str	r2, [r3, #20]
}
 800511c:	46c0      	nop			; (mov r8, r8)
 800511e:	46bd      	mov	sp, r7
 8005120:	b004      	add	sp, #16
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40000400 	.word	0x40000400
 8005128:	40010800 	.word	0x40010800
 800512c:	40011400 	.word	0x40011400
 8005130:	fffffcff 	.word	0xfffffcff

08005134 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	2201      	movs	r2, #1
 800514c:	4393      	bics	r3, r2
 800514e:	001a      	movs	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	22f0      	movs	r2, #240	; 0xf0
 800515e:	4393      	bics	r3, r2
 8005160:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	4313      	orrs	r3, r2
 800516a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	220a      	movs	r2, #10
 8005170:	4393      	bics	r3, r2
 8005172:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	4313      	orrs	r3, r2
 800517a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	621a      	str	r2, [r3, #32]
}
 8005188:	46c0      	nop			; (mov r8, r8)
 800518a:	46bd      	mov	sp, r7
 800518c:	b006      	add	sp, #24
 800518e:	bd80      	pop	{r7, pc}

08005190 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	2210      	movs	r2, #16
 80051a2:	4393      	bics	r3, r2
 80051a4:	001a      	movs	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	4a0d      	ldr	r2, [pc, #52]	; (80051f0 <TIM_TI2_ConfigInputStage+0x60>)
 80051ba:	4013      	ands	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	031b      	lsls	r3, r3, #12
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	22a0      	movs	r2, #160	; 0xa0
 80051cc:	4393      	bics	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	621a      	str	r2, [r3, #32]
}
 80051e6:	46c0      	nop			; (mov r8, r8)
 80051e8:	46bd      	mov	sp, r7
 80051ea:	b006      	add	sp, #24
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	46c0      	nop			; (mov r8, r8)
 80051f0:	ffff0fff 	.word	0xffff0fff

080051f4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2270      	movs	r2, #112	; 0x70
 8005208:	4393      	bics	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4313      	orrs	r3, r2
 8005212:	2207      	movs	r2, #7
 8005214:	4313      	orrs	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	609a      	str	r2, [r3, #8]
}
 800521e:	46c0      	nop			; (mov r8, r8)
 8005220:	46bd      	mov	sp, r7
 8005222:	b004      	add	sp, #16
 8005224:	bd80      	pop	{r7, pc}
	...

08005228 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	4a09      	ldr	r2, [pc, #36]	; (8005264 <TIM_ETR_SetConfig+0x3c>)
 8005240:	4013      	ands	r3, r2
 8005242:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	021a      	lsls	r2, r3, #8
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	431a      	orrs	r2, r3
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4313      	orrs	r3, r2
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	4313      	orrs	r3, r2
 8005254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	609a      	str	r2, [r3, #8]
}
 800525c:	46c0      	nop			; (mov r8, r8)
 800525e:	46bd      	mov	sp, r7
 8005260:	b006      	add	sp, #24
 8005262:	bd80      	pop	{r7, pc}
 8005264:	ffff00ff 	.word	0xffff00ff

08005268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2238      	movs	r2, #56	; 0x38
 8005276:	5c9b      	ldrb	r3, [r3, r2]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d101      	bne.n	8005280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800527c:	2302      	movs	r3, #2
 800527e:	e032      	b.n	80052e6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2238      	movs	r2, #56	; 0x38
 8005284:	2101      	movs	r1, #1
 8005286:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2239      	movs	r2, #57	; 0x39
 800528c:	2102      	movs	r1, #2
 800528e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2270      	movs	r2, #112	; 0x70
 80052a4:	4393      	bics	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2280      	movs	r2, #128	; 0x80
 80052b6:	4393      	bics	r3, r2
 80052b8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2239      	movs	r2, #57	; 0x39
 80052d8:	2101      	movs	r1, #1
 80052da:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2238      	movs	r2, #56	; 0x38
 80052e0:	2100      	movs	r1, #0
 80052e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	0018      	movs	r0, r3
 80052e8:	46bd      	mov	sp, r7
 80052ea:	b004      	add	sp, #16
 80052ec:	bd80      	pop	{r7, pc}
	...

080052f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e044      	b.n	800538c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005306:	2b00      	cmp	r3, #0
 8005308:	d107      	bne.n	800531a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2270      	movs	r2, #112	; 0x70
 800530e:	2100      	movs	r1, #0
 8005310:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	0018      	movs	r0, r3
 8005316:	f004 fd93 	bl	8009e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2224      	movs	r2, #36	; 0x24
 800531e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2101      	movs	r1, #1
 800532c:	438a      	bics	r2, r1
 800532e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	0018      	movs	r0, r3
 8005334:	f000 fa9e 	bl	8005874 <UART_SetConfig>
 8005338:	0003      	movs	r3, r0
 800533a:	2b01      	cmp	r3, #1
 800533c:	d101      	bne.n	8005342 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e024      	b.n	800538c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	0018      	movs	r0, r3
 800534e:	f000 fdc5 	bl	8005edc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	490d      	ldr	r1, [pc, #52]	; (8005394 <HAL_UART_Init+0xa4>)
 800535e:	400a      	ands	r2, r1
 8005360:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	212a      	movs	r1, #42	; 0x2a
 800536e:	438a      	bics	r2, r1
 8005370:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2101      	movs	r1, #1
 800537e:	430a      	orrs	r2, r1
 8005380:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	0018      	movs	r0, r3
 8005386:	f000 fe5d 	bl	8006044 <UART_CheckIdleState>
 800538a:	0003      	movs	r3, r0
}
 800538c:	0018      	movs	r0, r3
 800538e:	46bd      	mov	sp, r7
 8005390:	b002      	add	sp, #8
 8005392:	bd80      	pop	{r7, pc}
 8005394:	ffffb7ff 	.word	0xffffb7ff

08005398 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	1dbb      	adds	r3, r7, #6
 80053a4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053aa:	2b20      	cmp	r3, #32
 80053ac:	d000      	beq.n	80053b0 <HAL_UART_Transmit_DMA+0x18>
 80053ae:	e077      	b.n	80054a0 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <HAL_UART_Transmit_DMA+0x26>
 80053b6:	1dbb      	adds	r3, r7, #6
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e06f      	b.n	80054a2 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	689a      	ldr	r2, [r3, #8]
 80053c6:	2380      	movs	r3, #128	; 0x80
 80053c8:	015b      	lsls	r3, r3, #5
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d109      	bne.n	80053e2 <HAL_UART_Transmit_DMA+0x4a>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d105      	bne.n	80053e2 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1) != 0)
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2201      	movs	r2, #1
 80053da:	4013      	ands	r3, r2
 80053dc:	d001      	beq.n	80053e2 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e05f      	b.n	80054a2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2270      	movs	r2, #112	; 0x70
 80053e6:	5c9b      	ldrb	r3, [r3, r2]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d101      	bne.n	80053f0 <HAL_UART_Transmit_DMA+0x58>
 80053ec:	2302      	movs	r3, #2
 80053ee:	e058      	b.n	80054a2 <HAL_UART_Transmit_DMA+0x10a>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2270      	movs	r2, #112	; 0x70
 80053f4:	2101      	movs	r1, #1
 80053f6:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	1dba      	adds	r2, r7, #6
 8005402:	2150      	movs	r1, #80	; 0x50
 8005404:	8812      	ldrh	r2, [r2, #0]
 8005406:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	1dba      	adds	r2, r7, #6
 800540c:	2152      	movs	r1, #82	; 0x52
 800540e:	8812      	ldrh	r2, [r2, #0]
 8005410:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2221      	movs	r2, #33	; 0x21
 800541c:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005422:	2b00      	cmp	r3, #0
 8005424:	d02a      	beq.n	800547c <HAL_UART_Transmit_DMA+0xe4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800542a:	4a20      	ldr	r2, [pc, #128]	; (80054ac <HAL_UART_Transmit_DMA+0x114>)
 800542c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005432:	4a1f      	ldr	r2, [pc, #124]	; (80054b0 <HAL_UART_Transmit_DMA+0x118>)
 8005434:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800543a:	4a1e      	ldr	r2, [pc, #120]	; (80054b4 <HAL_UART_Transmit_DMA+0x11c>)
 800543c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005442:	2200      	movs	r2, #0
 8005444:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800544e:	0019      	movs	r1, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3328      	adds	r3, #40	; 0x28
 8005456:	001a      	movs	r2, r3
 8005458:	1dbb      	adds	r3, r7, #6
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	f7fd ffa4 	bl	80033a8 <HAL_DMA_Start_IT>
 8005460:	1e03      	subs	r3, r0, #0
 8005462:	d00b      	beq.n	800547c <HAL_UART_Transmit_DMA+0xe4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2210      	movs	r2, #16
 8005468:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2270      	movs	r2, #112	; 0x70
 800546e:	2100      	movs	r1, #0
 8005470:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2220      	movs	r2, #32
 8005476:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e012      	b.n	80054a2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2240      	movs	r2, #64	; 0x40
 8005482:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2270      	movs	r2, #112	; 0x70
 8005488:	2100      	movs	r1, #0
 800548a:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689a      	ldr	r2, [r3, #8]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2180      	movs	r1, #128	; 0x80
 8005498:	430a      	orrs	r2, r1
 800549a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800549c:	2300      	movs	r3, #0
 800549e:	e000      	b.n	80054a2 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80054a0:	2302      	movs	r3, #2
  }
}
 80054a2:	0018      	movs	r0, r3
 80054a4:	46bd      	mov	sp, r7
 80054a6:	b004      	add	sp, #16
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	46c0      	nop			; (mov r8, r8)
 80054ac:	080061cd 	.word	0x080061cd
 80054b0:	08006221 	.word	0x08006221
 80054b4:	080062cb 	.word	0x080062cb

080054b8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	1dbb      	adds	r3, r7, #6
 80054c4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054ca:	2b20      	cmp	r3, #32
 80054cc:	d000      	beq.n	80054d0 <HAL_UART_Receive_DMA+0x18>
 80054ce:	e07f      	b.n	80055d0 <HAL_UART_Receive_DMA+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <HAL_UART_Receive_DMA+0x26>
 80054d6:	1dbb      	adds	r3, r7, #6
 80054d8:	881b      	ldrh	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e077      	b.n	80055d2 <HAL_UART_Receive_DMA+0x11a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	689a      	ldr	r2, [r3, #8]
 80054e6:	2380      	movs	r3, #128	; 0x80
 80054e8:	015b      	lsls	r3, r3, #5
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d109      	bne.n	8005502 <HAL_UART_Receive_DMA+0x4a>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d105      	bne.n	8005502 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1) != 0)
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2201      	movs	r2, #1
 80054fa:	4013      	ands	r3, r2
 80054fc:	d001      	beq.n	8005502 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e067      	b.n	80055d2 <HAL_UART_Receive_DMA+0x11a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2270      	movs	r2, #112	; 0x70
 8005506:	5c9b      	ldrb	r3, [r3, r2]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d101      	bne.n	8005510 <HAL_UART_Receive_DMA+0x58>
 800550c:	2302      	movs	r3, #2
 800550e:	e060      	b.n	80055d2 <HAL_UART_Receive_DMA+0x11a>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2270      	movs	r2, #112	; 0x70
 8005514:	2101      	movs	r1, #1
 8005516:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	1dba      	adds	r2, r7, #6
 8005522:	2158      	movs	r1, #88	; 0x58
 8005524:	8812      	ldrh	r2, [r2, #0]
 8005526:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2222      	movs	r2, #34	; 0x22
 8005532:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005538:	2b00      	cmp	r3, #0
 800553a:	d02a      	beq.n	8005592 <HAL_UART_Receive_DMA+0xda>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005540:	4a26      	ldr	r2, [pc, #152]	; (80055dc <HAL_UART_Receive_DMA+0x124>)
 8005542:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005548:	4a25      	ldr	r2, [pc, #148]	; (80055e0 <HAL_UART_Receive_DMA+0x128>)
 800554a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005550:	4a24      	ldr	r2, [pc, #144]	; (80055e4 <HAL_UART_Receive_DMA+0x12c>)
 8005552:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005558:	2200      	movs	r2, #0
 800555a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3324      	adds	r3, #36	; 0x24
 8005566:	0019      	movs	r1, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800556c:	001a      	movs	r2, r3
 800556e:	1dbb      	adds	r3, r7, #6
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	f7fd ff19 	bl	80033a8 <HAL_DMA_Start_IT>
 8005576:	1e03      	subs	r3, r0, #0
 8005578:	d00b      	beq.n	8005592 <HAL_UART_Receive_DMA+0xda>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2210      	movs	r2, #16
 800557e:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2270      	movs	r2, #112	; 0x70
 8005584:	2100      	movs	r1, #0
 8005586:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2220      	movs	r2, #32
 800558c:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e01f      	b.n	80055d2 <HAL_UART_Receive_DMA+0x11a>
      }
    }
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2270      	movs	r2, #112	; 0x70
 8005596:	2100      	movs	r1, #0
 8005598:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2180      	movs	r1, #128	; 0x80
 80055a6:	0049      	lsls	r1, r1, #1
 80055a8:	430a      	orrs	r2, r1
 80055aa:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2101      	movs	r1, #1
 80055b8:	430a      	orrs	r2, r1
 80055ba:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2140      	movs	r1, #64	; 0x40
 80055c8:	430a      	orrs	r2, r1
 80055ca:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	e000      	b.n	80055d2 <HAL_UART_Receive_DMA+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80055d0:	2302      	movs	r3, #2
  }
}
 80055d2:	0018      	movs	r0, r3
 80055d4:	46bd      	mov	sp, r7
 80055d6:	b004      	add	sp, #16
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	46c0      	nop			; (mov r8, r8)
 80055dc:	08006241 	.word	0x08006241
 80055e0:	080062ad 	.word	0x080062ad
 80055e4:	080062cb 	.word	0x080062cb

080055e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b088      	sub	sp, #32
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	220f      	movs	r2, #15
 800560c:	4013      	ands	r3, r2
 800560e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d112      	bne.n	800563c <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	2220      	movs	r2, #32
 800561a:	4013      	ands	r3, r2
 800561c:	d00e      	beq.n	800563c <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	2220      	movs	r2, #32
 8005622:	4013      	ands	r3, r2
 8005624:	d00a      	beq.n	800563c <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800562a:	2b00      	cmp	r3, #0
 800562c:	d100      	bne.n	8005630 <HAL_UART_IRQHandler+0x48>
 800562e:	e0f6      	b.n	800581e <HAL_UART_IRQHandler+0x236>
      {
        huart->RxISR(huart);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	0010      	movs	r0, r2
 8005638:	4798      	blx	r3
      }
      return;
 800563a:	e0f0      	b.n	800581e <HAL_UART_IRQHandler+0x236>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d100      	bne.n	8005644 <HAL_UART_IRQHandler+0x5c>
 8005642:	e0b8      	b.n	80057b6 <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	2201      	movs	r2, #1
 8005648:	4013      	ands	r3, r2
 800564a:	d105      	bne.n	8005658 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	2390      	movs	r3, #144	; 0x90
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	4013      	ands	r3, r2
 8005654:	d100      	bne.n	8005658 <HAL_UART_IRQHandler+0x70>
 8005656:	e0ae      	b.n	80057b6 <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	2201      	movs	r2, #1
 800565c:	4013      	ands	r3, r2
 800565e:	d00e      	beq.n	800567e <HAL_UART_IRQHandler+0x96>
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	2380      	movs	r3, #128	; 0x80
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	4013      	ands	r3, r2
 8005668:	d009      	beq.n	800567e <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2201      	movs	r2, #1
 8005670:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005676:	2201      	movs	r2, #1
 8005678:	431a      	orrs	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	2202      	movs	r2, #2
 8005682:	4013      	ands	r3, r2
 8005684:	d00d      	beq.n	80056a2 <HAL_UART_IRQHandler+0xba>
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2201      	movs	r2, #1
 800568a:	4013      	ands	r3, r2
 800568c:	d009      	beq.n	80056a2 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2202      	movs	r2, #2
 8005694:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800569a:	2204      	movs	r2, #4
 800569c:	431a      	orrs	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	2204      	movs	r2, #4
 80056a6:	4013      	ands	r3, r2
 80056a8:	d00d      	beq.n	80056c6 <HAL_UART_IRQHandler+0xde>
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2201      	movs	r2, #1
 80056ae:	4013      	ands	r3, r2
 80056b0:	d009      	beq.n	80056c6 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2204      	movs	r2, #4
 80056b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056be:	2202      	movs	r2, #2
 80056c0:	431a      	orrs	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	2208      	movs	r2, #8
 80056ca:	4013      	ands	r3, r2
 80056cc:	d011      	beq.n	80056f2 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	2220      	movs	r2, #32
 80056d2:	4013      	ands	r3, r2
 80056d4:	d103      	bne.n	80056de <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2201      	movs	r2, #1
 80056da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056dc:	d009      	beq.n	80056f2 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2208      	movs	r2, #8
 80056e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056ea:	2208      	movs	r2, #8
 80056ec:	431a      	orrs	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d100      	bne.n	80056fc <HAL_UART_IRQHandler+0x114>
 80056fa:	e092      	b.n	8005822 <HAL_UART_IRQHandler+0x23a>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	2220      	movs	r2, #32
 8005700:	4013      	ands	r3, r2
 8005702:	d00c      	beq.n	800571e <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	2220      	movs	r2, #32
 8005708:	4013      	ands	r3, r2
 800570a:	d008      	beq.n	800571e <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005710:	2b00      	cmp	r3, #0
 8005712:	d004      	beq.n	800571e <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	0010      	movs	r0, r2
 800571c:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005722:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	2240      	movs	r2, #64	; 0x40
 800572c:	4013      	ands	r3, r2
 800572e:	2b40      	cmp	r3, #64	; 0x40
 8005730:	d003      	beq.n	800573a <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2208      	movs	r2, #8
 8005736:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005738:	d033      	beq.n	80057a2 <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	0018      	movs	r0, r3
 800573e:	f000 fd25 	bl	800618c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	2240      	movs	r2, #64	; 0x40
 800574a:	4013      	ands	r3, r2
 800574c:	2b40      	cmp	r3, #64	; 0x40
 800574e:	d123      	bne.n	8005798 <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689a      	ldr	r2, [r3, #8]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2140      	movs	r1, #64	; 0x40
 800575c:	438a      	bics	r2, r1
 800575e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005764:	2b00      	cmp	r3, #0
 8005766:	d012      	beq.n	800578e <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800576c:	4a30      	ldr	r2, [pc, #192]	; (8005830 <HAL_UART_IRQHandler+0x248>)
 800576e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005774:	0018      	movs	r0, r3
 8005776:	f7fd fe7d 	bl	8003474 <HAL_DMA_Abort_IT>
 800577a:	1e03      	subs	r3, r0, #0
 800577c:	d019      	beq.n	80057b2 <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005788:	0018      	movs	r0, r3
 800578a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800578c:	e011      	b.n	80057b2 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	0018      	movs	r0, r3
 8005792:	f000 f867 	bl	8005864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005796:	e00c      	b.n	80057b2 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	0018      	movs	r0, r3
 800579c:	f000 f862 	bl	8005864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a0:	e007      	b.n	80057b2 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	0018      	movs	r0, r3
 80057a6:	f000 f85d 	bl	8005864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80057b0:	e037      	b.n	8005822 <HAL_UART_IRQHandler+0x23a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b2:	46c0      	nop			; (mov r8, r8)
    return;
 80057b4:	e035      	b.n	8005822 <HAL_UART_IRQHandler+0x23a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80057b6:	69fa      	ldr	r2, [r7, #28]
 80057b8:	2380      	movs	r3, #128	; 0x80
 80057ba:	035b      	lsls	r3, r3, #13
 80057bc:	4013      	ands	r3, r2
 80057be:	d00e      	beq.n	80057de <HAL_UART_IRQHandler+0x1f6>
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	2380      	movs	r3, #128	; 0x80
 80057c4:	03db      	lsls	r3, r3, #15
 80057c6:	4013      	ands	r3, r2
 80057c8:	d009      	beq.n	80057de <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2280      	movs	r2, #128	; 0x80
 80057d0:	0352      	lsls	r2, r2, #13
 80057d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	0018      	movs	r0, r3
 80057d8:	f000 fde7 	bl	80063aa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057dc:	e024      	b.n	8005828 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	2280      	movs	r2, #128	; 0x80
 80057e2:	4013      	ands	r3, r2
 80057e4:	d00d      	beq.n	8005802 <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	2280      	movs	r2, #128	; 0x80
 80057ea:	4013      	ands	r3, r2
 80057ec:	d009      	beq.n	8005802 <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d017      	beq.n	8005826 <HAL_UART_IRQHandler+0x23e>
    {
      huart->TxISR(huart);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	0010      	movs	r0, r2
 80057fe:	4798      	blx	r3
    }
    return;
 8005800:	e011      	b.n	8005826 <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	2240      	movs	r2, #64	; 0x40
 8005806:	4013      	ands	r3, r2
 8005808:	d00e      	beq.n	8005828 <HAL_UART_IRQHandler+0x240>
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	2240      	movs	r2, #64	; 0x40
 800580e:	4013      	ands	r3, r2
 8005810:	d00a      	beq.n	8005828 <HAL_UART_IRQHandler+0x240>
  {
    UART_EndTransmit_IT(huart);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	0018      	movs	r0, r3
 8005816:	f000 fdae 	bl	8006376 <UART_EndTransmit_IT>
    return;
 800581a:	46c0      	nop			; (mov r8, r8)
 800581c:	e004      	b.n	8005828 <HAL_UART_IRQHandler+0x240>
      return;
 800581e:	46c0      	nop			; (mov r8, r8)
 8005820:	e002      	b.n	8005828 <HAL_UART_IRQHandler+0x240>
    return;
 8005822:	46c0      	nop			; (mov r8, r8)
 8005824:	e000      	b.n	8005828 <HAL_UART_IRQHandler+0x240>
    return;
 8005826:	46c0      	nop			; (mov r8, r8)
  }

}
 8005828:	46bd      	mov	sp, r7
 800582a:	b008      	add	sp, #32
 800582c:	bd80      	pop	{r7, pc}
 800582e:	46c0      	nop			; (mov r8, r8)
 8005830:	08006349 	.word	0x08006349

08005834 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800583c:	46c0      	nop			; (mov r8, r8)
 800583e:	46bd      	mov	sp, r7
 8005840:	b002      	add	sp, #8
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800584c:	46c0      	nop			; (mov r8, r8)
 800584e:	46bd      	mov	sp, r7
 8005850:	b002      	add	sp, #8
 8005852:	bd80      	pop	{r7, pc}

08005854 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800585c:	46c0      	nop			; (mov r8, r8)
 800585e:	46bd      	mov	sp, r7
 8005860:	b002      	add	sp, #8
 8005862:	bd80      	pop	{r7, pc}

08005864 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800586c:	46c0      	nop			; (mov r8, r8)
 800586e:	46bd      	mov	sp, r7
 8005870:	b002      	add	sp, #8
 8005872:	bd80      	pop	{r7, pc}

08005874 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005874:	b5b0      	push	{r4, r5, r7, lr}
 8005876:	b08e      	sub	sp, #56	; 0x38
 8005878:	af00      	add	r7, sp, #0
 800587a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800587c:	231b      	movs	r3, #27
 800587e:	2218      	movs	r2, #24
 8005880:	4694      	mov	ip, r2
 8005882:	44bc      	add	ip, r7
 8005884:	4463      	add	r3, ip
 8005886:	2210      	movs	r2, #16
 8005888:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 800588a:	2300      	movs	r3, #0
 800588c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 800588e:	2313      	movs	r3, #19
 8005890:	2218      	movs	r2, #24
 8005892:	4694      	mov	ip, r2
 8005894:	44bc      	add	ip, r7
 8005896:	4463      	add	r3, ip
 8005898:	2200      	movs	r2, #0
 800589a:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800589c:	2300      	movs	r3, #0
 800589e:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	431a      	orrs	r2, r3
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	431a      	orrs	r2, r3
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4aca      	ldr	r2, [pc, #808]	; (8005be8 <UART_SetConfig+0x374>)
 80058c0:	4013      	ands	r3, r2
 80058c2:	0019      	movs	r1, r3
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058ca:	430a      	orrs	r2, r1
 80058cc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	4ac5      	ldr	r2, [pc, #788]	; (8005bec <UART_SetConfig+0x378>)
 80058d6:	4013      	ands	r3, r2
 80058d8:	0019      	movs	r1, r3
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	430a      	orrs	r2, r1
 80058e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4abf      	ldr	r2, [pc, #764]	; (8005bf0 <UART_SetConfig+0x37c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d004      	beq.n	8005900 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058fc:	4313      	orrs	r3, r2
 80058fe:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	4abb      	ldr	r2, [pc, #748]	; (8005bf4 <UART_SetConfig+0x380>)
 8005908:	4013      	ands	r3, r2
 800590a:	0019      	movs	r1, r3
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005912:	430a      	orrs	r2, r1
 8005914:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4ab7      	ldr	r2, [pc, #732]	; (8005bf8 <UART_SetConfig+0x384>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d134      	bne.n	800598a <UART_SetConfig+0x116>
 8005920:	4bb6      	ldr	r3, [pc, #728]	; (8005bfc <UART_SetConfig+0x388>)
 8005922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005924:	2203      	movs	r2, #3
 8005926:	4013      	ands	r3, r2
 8005928:	2b01      	cmp	r3, #1
 800592a:	d015      	beq.n	8005958 <UART_SetConfig+0xe4>
 800592c:	d304      	bcc.n	8005938 <UART_SetConfig+0xc4>
 800592e:	2b02      	cmp	r3, #2
 8005930:	d00a      	beq.n	8005948 <UART_SetConfig+0xd4>
 8005932:	2b03      	cmp	r3, #3
 8005934:	d018      	beq.n	8005968 <UART_SetConfig+0xf4>
 8005936:	e01f      	b.n	8005978 <UART_SetConfig+0x104>
 8005938:	231b      	movs	r3, #27
 800593a:	2218      	movs	r2, #24
 800593c:	4694      	mov	ip, r2
 800593e:	44bc      	add	ip, r7
 8005940:	4463      	add	r3, ip
 8005942:	2201      	movs	r2, #1
 8005944:	701a      	strb	r2, [r3, #0]
 8005946:	e0c5      	b.n	8005ad4 <UART_SetConfig+0x260>
 8005948:	231b      	movs	r3, #27
 800594a:	2218      	movs	r2, #24
 800594c:	4694      	mov	ip, r2
 800594e:	44bc      	add	ip, r7
 8005950:	4463      	add	r3, ip
 8005952:	2202      	movs	r2, #2
 8005954:	701a      	strb	r2, [r3, #0]
 8005956:	e0bd      	b.n	8005ad4 <UART_SetConfig+0x260>
 8005958:	231b      	movs	r3, #27
 800595a:	2218      	movs	r2, #24
 800595c:	4694      	mov	ip, r2
 800595e:	44bc      	add	ip, r7
 8005960:	4463      	add	r3, ip
 8005962:	2204      	movs	r2, #4
 8005964:	701a      	strb	r2, [r3, #0]
 8005966:	e0b5      	b.n	8005ad4 <UART_SetConfig+0x260>
 8005968:	231b      	movs	r3, #27
 800596a:	2218      	movs	r2, #24
 800596c:	4694      	mov	ip, r2
 800596e:	44bc      	add	ip, r7
 8005970:	4463      	add	r3, ip
 8005972:	2208      	movs	r2, #8
 8005974:	701a      	strb	r2, [r3, #0]
 8005976:	e0ad      	b.n	8005ad4 <UART_SetConfig+0x260>
 8005978:	231b      	movs	r3, #27
 800597a:	2218      	movs	r2, #24
 800597c:	4694      	mov	ip, r2
 800597e:	44bc      	add	ip, r7
 8005980:	4463      	add	r3, ip
 8005982:	2210      	movs	r2, #16
 8005984:	701a      	strb	r2, [r3, #0]
 8005986:	46c0      	nop			; (mov r8, r8)
 8005988:	e0a4      	b.n	8005ad4 <UART_SetConfig+0x260>
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a9c      	ldr	r2, [pc, #624]	; (8005c00 <UART_SetConfig+0x38c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d137      	bne.n	8005a04 <UART_SetConfig+0x190>
 8005994:	4b99      	ldr	r3, [pc, #612]	; (8005bfc <UART_SetConfig+0x388>)
 8005996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005998:	220c      	movs	r2, #12
 800599a:	4013      	ands	r3, r2
 800599c:	2b04      	cmp	r3, #4
 800599e:	d018      	beq.n	80059d2 <UART_SetConfig+0x15e>
 80059a0:	d802      	bhi.n	80059a8 <UART_SetConfig+0x134>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d005      	beq.n	80059b2 <UART_SetConfig+0x13e>
 80059a6:	e024      	b.n	80059f2 <UART_SetConfig+0x17e>
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	d00a      	beq.n	80059c2 <UART_SetConfig+0x14e>
 80059ac:	2b0c      	cmp	r3, #12
 80059ae:	d018      	beq.n	80059e2 <UART_SetConfig+0x16e>
 80059b0:	e01f      	b.n	80059f2 <UART_SetConfig+0x17e>
 80059b2:	231b      	movs	r3, #27
 80059b4:	2218      	movs	r2, #24
 80059b6:	4694      	mov	ip, r2
 80059b8:	44bc      	add	ip, r7
 80059ba:	4463      	add	r3, ip
 80059bc:	2200      	movs	r2, #0
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	e088      	b.n	8005ad4 <UART_SetConfig+0x260>
 80059c2:	231b      	movs	r3, #27
 80059c4:	2218      	movs	r2, #24
 80059c6:	4694      	mov	ip, r2
 80059c8:	44bc      	add	ip, r7
 80059ca:	4463      	add	r3, ip
 80059cc:	2202      	movs	r2, #2
 80059ce:	701a      	strb	r2, [r3, #0]
 80059d0:	e080      	b.n	8005ad4 <UART_SetConfig+0x260>
 80059d2:	231b      	movs	r3, #27
 80059d4:	2218      	movs	r2, #24
 80059d6:	4694      	mov	ip, r2
 80059d8:	44bc      	add	ip, r7
 80059da:	4463      	add	r3, ip
 80059dc:	2204      	movs	r2, #4
 80059de:	701a      	strb	r2, [r3, #0]
 80059e0:	e078      	b.n	8005ad4 <UART_SetConfig+0x260>
 80059e2:	231b      	movs	r3, #27
 80059e4:	2218      	movs	r2, #24
 80059e6:	4694      	mov	ip, r2
 80059e8:	44bc      	add	ip, r7
 80059ea:	4463      	add	r3, ip
 80059ec:	2208      	movs	r2, #8
 80059ee:	701a      	strb	r2, [r3, #0]
 80059f0:	e070      	b.n	8005ad4 <UART_SetConfig+0x260>
 80059f2:	231b      	movs	r3, #27
 80059f4:	2218      	movs	r2, #24
 80059f6:	4694      	mov	ip, r2
 80059f8:	44bc      	add	ip, r7
 80059fa:	4463      	add	r3, ip
 80059fc:	2210      	movs	r2, #16
 80059fe:	701a      	strb	r2, [r3, #0]
 8005a00:	46c0      	nop			; (mov r8, r8)
 8005a02:	e067      	b.n	8005ad4 <UART_SetConfig+0x260>
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a7e      	ldr	r2, [pc, #504]	; (8005c04 <UART_SetConfig+0x390>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d107      	bne.n	8005a1e <UART_SetConfig+0x1aa>
 8005a0e:	231b      	movs	r3, #27
 8005a10:	2218      	movs	r2, #24
 8005a12:	4694      	mov	ip, r2
 8005a14:	44bc      	add	ip, r7
 8005a16:	4463      	add	r3, ip
 8005a18:	2200      	movs	r2, #0
 8005a1a:	701a      	strb	r2, [r3, #0]
 8005a1c:	e05a      	b.n	8005ad4 <UART_SetConfig+0x260>
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a79      	ldr	r2, [pc, #484]	; (8005c08 <UART_SetConfig+0x394>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d107      	bne.n	8005a38 <UART_SetConfig+0x1c4>
 8005a28:	231b      	movs	r3, #27
 8005a2a:	2218      	movs	r2, #24
 8005a2c:	4694      	mov	ip, r2
 8005a2e:	44bc      	add	ip, r7
 8005a30:	4463      	add	r3, ip
 8005a32:	2200      	movs	r2, #0
 8005a34:	701a      	strb	r2, [r3, #0]
 8005a36:	e04d      	b.n	8005ad4 <UART_SetConfig+0x260>
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a6c      	ldr	r2, [pc, #432]	; (8005bf0 <UART_SetConfig+0x37c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d141      	bne.n	8005ac6 <UART_SetConfig+0x252>
 8005a42:	4b6e      	ldr	r3, [pc, #440]	; (8005bfc <UART_SetConfig+0x388>)
 8005a44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a46:	23c0      	movs	r3, #192	; 0xc0
 8005a48:	011b      	lsls	r3, r3, #4
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	2280      	movs	r2, #128	; 0x80
 8005a4e:	00d2      	lsls	r2, r2, #3
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d01f      	beq.n	8005a94 <UART_SetConfig+0x220>
 8005a54:	2280      	movs	r2, #128	; 0x80
 8005a56:	00d2      	lsls	r2, r2, #3
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d802      	bhi.n	8005a62 <UART_SetConfig+0x1ee>
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d009      	beq.n	8005a74 <UART_SetConfig+0x200>
 8005a60:	e028      	b.n	8005ab4 <UART_SetConfig+0x240>
 8005a62:	2280      	movs	r2, #128	; 0x80
 8005a64:	0112      	lsls	r2, r2, #4
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d00c      	beq.n	8005a84 <UART_SetConfig+0x210>
 8005a6a:	22c0      	movs	r2, #192	; 0xc0
 8005a6c:	0112      	lsls	r2, r2, #4
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d018      	beq.n	8005aa4 <UART_SetConfig+0x230>
 8005a72:	e01f      	b.n	8005ab4 <UART_SetConfig+0x240>
 8005a74:	231b      	movs	r3, #27
 8005a76:	2218      	movs	r2, #24
 8005a78:	4694      	mov	ip, r2
 8005a7a:	44bc      	add	ip, r7
 8005a7c:	4463      	add	r3, ip
 8005a7e:	2200      	movs	r2, #0
 8005a80:	701a      	strb	r2, [r3, #0]
 8005a82:	e027      	b.n	8005ad4 <UART_SetConfig+0x260>
 8005a84:	231b      	movs	r3, #27
 8005a86:	2218      	movs	r2, #24
 8005a88:	4694      	mov	ip, r2
 8005a8a:	44bc      	add	ip, r7
 8005a8c:	4463      	add	r3, ip
 8005a8e:	2202      	movs	r2, #2
 8005a90:	701a      	strb	r2, [r3, #0]
 8005a92:	e01f      	b.n	8005ad4 <UART_SetConfig+0x260>
 8005a94:	231b      	movs	r3, #27
 8005a96:	2218      	movs	r2, #24
 8005a98:	4694      	mov	ip, r2
 8005a9a:	44bc      	add	ip, r7
 8005a9c:	4463      	add	r3, ip
 8005a9e:	2204      	movs	r2, #4
 8005aa0:	701a      	strb	r2, [r3, #0]
 8005aa2:	e017      	b.n	8005ad4 <UART_SetConfig+0x260>
 8005aa4:	231b      	movs	r3, #27
 8005aa6:	2218      	movs	r2, #24
 8005aa8:	4694      	mov	ip, r2
 8005aaa:	44bc      	add	ip, r7
 8005aac:	4463      	add	r3, ip
 8005aae:	2208      	movs	r2, #8
 8005ab0:	701a      	strb	r2, [r3, #0]
 8005ab2:	e00f      	b.n	8005ad4 <UART_SetConfig+0x260>
 8005ab4:	231b      	movs	r3, #27
 8005ab6:	2218      	movs	r2, #24
 8005ab8:	4694      	mov	ip, r2
 8005aba:	44bc      	add	ip, r7
 8005abc:	4463      	add	r3, ip
 8005abe:	2210      	movs	r2, #16
 8005ac0:	701a      	strb	r2, [r3, #0]
 8005ac2:	46c0      	nop			; (mov r8, r8)
 8005ac4:	e006      	b.n	8005ad4 <UART_SetConfig+0x260>
 8005ac6:	231b      	movs	r3, #27
 8005ac8:	2218      	movs	r2, #24
 8005aca:	4694      	mov	ip, r2
 8005acc:	44bc      	add	ip, r7
 8005ace:	4463      	add	r3, ip
 8005ad0:	2210      	movs	r2, #16
 8005ad2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a45      	ldr	r2, [pc, #276]	; (8005bf0 <UART_SetConfig+0x37c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d000      	beq.n	8005ae0 <UART_SetConfig+0x26c>
 8005ade:	e09d      	b.n	8005c1c <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ae0:	231b      	movs	r3, #27
 8005ae2:	2218      	movs	r2, #24
 8005ae4:	4694      	mov	ip, r2
 8005ae6:	44bc      	add	ip, r7
 8005ae8:	4463      	add	r3, ip
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d00d      	beq.n	8005b0c <UART_SetConfig+0x298>
 8005af0:	dc02      	bgt.n	8005af8 <UART_SetConfig+0x284>
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d005      	beq.n	8005b02 <UART_SetConfig+0x28e>
 8005af6:	e01d      	b.n	8005b34 <UART_SetConfig+0x2c0>
 8005af8:	2b04      	cmp	r3, #4
 8005afa:	d012      	beq.n	8005b22 <UART_SetConfig+0x2ae>
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d015      	beq.n	8005b2c <UART_SetConfig+0x2b8>
 8005b00:	e018      	b.n	8005b34 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005b02:	f7fe fecd 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 8005b06:	0003      	movs	r3, r0
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b0a:	e01b      	b.n	8005b44 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b0c:	4b3b      	ldr	r3, [pc, #236]	; (8005bfc <UART_SetConfig+0x388>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2210      	movs	r2, #16
 8005b12:	4013      	ands	r3, r2
 8005b14:	d002      	beq.n	8005b1c <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8005b16:	4b3d      	ldr	r3, [pc, #244]	; (8005c0c <UART_SetConfig+0x398>)
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8005b1a:	e013      	b.n	8005b44 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005b1c:	4b3c      	ldr	r3, [pc, #240]	; (8005c10 <UART_SetConfig+0x39c>)
 8005b1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b20:	e010      	b.n	8005b44 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005b22:	f7fe fe2f 	bl	8004784 <HAL_RCC_GetSysClockFreq>
 8005b26:	0003      	movs	r3, r0
 8005b28:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b2a:	e00b      	b.n	8005b44 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005b2c:	2380      	movs	r3, #128	; 0x80
 8005b2e:	021b      	lsls	r3, r3, #8
 8005b30:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b32:	e007      	b.n	8005b44 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005b34:	2313      	movs	r3, #19
 8005b36:	2218      	movs	r2, #24
 8005b38:	4694      	mov	ip, r2
 8005b3a:	44bc      	add	ip, r7
 8005b3c:	4463      	add	r3, ip
 8005b3e:	2201      	movs	r2, #1
 8005b40:	701a      	strb	r2, [r3, #0]
        break;
 8005b42:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d100      	bne.n	8005b4c <UART_SetConfig+0x2d8>
 8005b4a:	e1a6      	b.n	8005e9a <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	0013      	movs	r3, r2
 8005b52:	005b      	lsls	r3, r3, #1
 8005b54:	189b      	adds	r3, r3, r2
 8005b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d305      	bcc.n	8005b68 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d907      	bls.n	8005b78 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 8005b68:	2313      	movs	r3, #19
 8005b6a:	2218      	movs	r2, #24
 8005b6c:	4694      	mov	ip, r2
 8005b6e:	44bc      	add	ip, r7
 8005b70:	4463      	add	r3, ip
 8005b72:	2201      	movs	r2, #1
 8005b74:	701a      	strb	r2, [r3, #0]
 8005b76:	e190      	b.n	8005e9a <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	613b      	str	r3, [r7, #16]
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	617b      	str	r3, [r7, #20]
 8005b80:	6939      	ldr	r1, [r7, #16]
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	000b      	movs	r3, r1
 8005b86:	0e1b      	lsrs	r3, r3, #24
 8005b88:	0010      	movs	r0, r2
 8005b8a:	0205      	lsls	r5, r0, #8
 8005b8c:	431d      	orrs	r5, r3
 8005b8e:	000b      	movs	r3, r1
 8005b90:	021c      	lsls	r4, r3, #8
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	085b      	lsrs	r3, r3, #1
 8005b98:	60bb      	str	r3, [r7, #8]
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	60fb      	str	r3, [r7, #12]
 8005b9e:	68b8      	ldr	r0, [r7, #8]
 8005ba0:	68f9      	ldr	r1, [r7, #12]
 8005ba2:	1900      	adds	r0, r0, r4
 8005ba4:	4169      	adcs	r1, r5
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	603b      	str	r3, [r7, #0]
 8005bac:	2300      	movs	r3, #0
 8005bae:	607b      	str	r3, [r7, #4]
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f7fa fbac 	bl	8000310 <__aeabi_uldivmod>
 8005bb8:	0003      	movs	r3, r0
 8005bba:	000c      	movs	r4, r1
 8005bbc:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc0:	4a14      	ldr	r2, [pc, #80]	; (8005c14 <UART_SetConfig+0x3a0>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d908      	bls.n	8005bd8 <UART_SetConfig+0x364>
 8005bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc8:	4a13      	ldr	r2, [pc, #76]	; (8005c18 <UART_SetConfig+0x3a4>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d804      	bhi.n	8005bd8 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bd4:	60da      	str	r2, [r3, #12]
 8005bd6:	e160      	b.n	8005e9a <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 8005bd8:	2313      	movs	r3, #19
 8005bda:	2218      	movs	r2, #24
 8005bdc:	4694      	mov	ip, r2
 8005bde:	44bc      	add	ip, r7
 8005be0:	4463      	add	r3, ip
 8005be2:	2201      	movs	r2, #1
 8005be4:	701a      	strb	r2, [r3, #0]
 8005be6:	e158      	b.n	8005e9a <UART_SetConfig+0x626>
 8005be8:	efff69f3 	.word	0xefff69f3
 8005bec:	ffffcfff 	.word	0xffffcfff
 8005bf0:	40004800 	.word	0x40004800
 8005bf4:	fffff4ff 	.word	0xfffff4ff
 8005bf8:	40013800 	.word	0x40013800
 8005bfc:	40021000 	.word	0x40021000
 8005c00:	40004400 	.word	0x40004400
 8005c04:	40004c00 	.word	0x40004c00
 8005c08:	40005000 	.word	0x40005000
 8005c0c:	003d0900 	.word	0x003d0900
 8005c10:	00f42400 	.word	0x00f42400
 8005c14:	000002ff 	.word	0x000002ff
 8005c18:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	69da      	ldr	r2, [r3, #28]
 8005c20:	2380      	movs	r3, #128	; 0x80
 8005c22:	021b      	lsls	r3, r3, #8
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d000      	beq.n	8005c2a <UART_SetConfig+0x3b6>
 8005c28:	e0a9      	b.n	8005d7e <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 8005c2a:	231b      	movs	r3, #27
 8005c2c:	2218      	movs	r2, #24
 8005c2e:	4694      	mov	ip, r2
 8005c30:	44bc      	add	ip, r7
 8005c32:	4463      	add	r3, ip
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	2b08      	cmp	r3, #8
 8005c38:	d86d      	bhi.n	8005d16 <UART_SetConfig+0x4a2>
 8005c3a:	009a      	lsls	r2, r3, #2
 8005c3c:	4b9f      	ldr	r3, [pc, #636]	; (8005ebc <UART_SetConfig+0x648>)
 8005c3e:	18d3      	adds	r3, r2, r3
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005c44:	f7fe fe2c 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 8005c48:	0003      	movs	r3, r0
 8005c4a:	005a      	lsls	r2, r3, #1
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	085b      	lsrs	r3, r3, #1
 8005c52:	18d2      	adds	r2, r2, r3
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	0019      	movs	r1, r3
 8005c5a:	0010      	movs	r0, r2
 8005c5c:	f7fa fa54 	bl	8000108 <__udivsi3>
 8005c60:	0003      	movs	r3, r0
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c66:	e05e      	b.n	8005d26 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005c68:	f7fe fe30 	bl	80048cc <HAL_RCC_GetPCLK2Freq>
 8005c6c:	0003      	movs	r3, r0
 8005c6e:	005a      	lsls	r2, r3, #1
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	085b      	lsrs	r3, r3, #1
 8005c76:	18d2      	adds	r2, r2, r3
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	0019      	movs	r1, r3
 8005c7e:	0010      	movs	r0, r2
 8005c80:	f7fa fa42 	bl	8000108 <__udivsi3>
 8005c84:	0003      	movs	r3, r0
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c8a:	e04c      	b.n	8005d26 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c8c:	4b8c      	ldr	r3, [pc, #560]	; (8005ec0 <UART_SetConfig+0x64c>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2210      	movs	r2, #16
 8005c92:	4013      	ands	r3, r2
 8005c94:	d00e      	beq.n	8005cb4 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	085b      	lsrs	r3, r3, #1
 8005c9c:	4a89      	ldr	r2, [pc, #548]	; (8005ec4 <UART_SetConfig+0x650>)
 8005c9e:	189a      	adds	r2, r3, r2
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	0019      	movs	r1, r3
 8005ca6:	0010      	movs	r0, r2
 8005ca8:	f7fa fa2e 	bl	8000108 <__udivsi3>
 8005cac:	0003      	movs	r3, r0
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8005cb2:	e038      	b.n	8005d26 <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	085b      	lsrs	r3, r3, #1
 8005cba:	4a83      	ldr	r2, [pc, #524]	; (8005ec8 <UART_SetConfig+0x654>)
 8005cbc:	189a      	adds	r2, r3, r2
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	0019      	movs	r1, r3
 8005cc4:	0010      	movs	r0, r2
 8005cc6:	f7fa fa1f 	bl	8000108 <__udivsi3>
 8005cca:	0003      	movs	r3, r0
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cd0:	e029      	b.n	8005d26 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005cd2:	f7fe fd57 	bl	8004784 <HAL_RCC_GetSysClockFreq>
 8005cd6:	0003      	movs	r3, r0
 8005cd8:	005a      	lsls	r2, r3, #1
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	085b      	lsrs	r3, r3, #1
 8005ce0:	18d2      	adds	r2, r2, r3
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	0019      	movs	r1, r3
 8005ce8:	0010      	movs	r0, r2
 8005cea:	f7fa fa0d 	bl	8000108 <__udivsi3>
 8005cee:	0003      	movs	r3, r0
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cf4:	e017      	b.n	8005d26 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	085b      	lsrs	r3, r3, #1
 8005cfc:	2280      	movs	r2, #128	; 0x80
 8005cfe:	0252      	lsls	r2, r2, #9
 8005d00:	189a      	adds	r2, r3, r2
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	0019      	movs	r1, r3
 8005d08:	0010      	movs	r0, r2
 8005d0a:	f7fa f9fd 	bl	8000108 <__udivsi3>
 8005d0e:	0003      	movs	r3, r0
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d14:	e007      	b.n	8005d26 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005d16:	2313      	movs	r3, #19
 8005d18:	2218      	movs	r2, #24
 8005d1a:	4694      	mov	ip, r2
 8005d1c:	44bc      	add	ip, r7
 8005d1e:	4463      	add	r3, ip
 8005d20:	2201      	movs	r2, #1
 8005d22:	701a      	strb	r2, [r3, #0]
        break;
 8005d24:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d28:	2b0f      	cmp	r3, #15
 8005d2a:	d920      	bls.n	8005d6e <UART_SetConfig+0x4fa>
 8005d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2e:	4a67      	ldr	r2, [pc, #412]	; (8005ecc <UART_SetConfig+0x658>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d81c      	bhi.n	8005d6e <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	200a      	movs	r0, #10
 8005d3a:	2418      	movs	r4, #24
 8005d3c:	193b      	adds	r3, r7, r4
 8005d3e:	181b      	adds	r3, r3, r0
 8005d40:	210f      	movs	r1, #15
 8005d42:	438a      	bics	r2, r1
 8005d44:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d48:	085b      	lsrs	r3, r3, #1
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	2207      	movs	r2, #7
 8005d4e:	4013      	ands	r3, r2
 8005d50:	b299      	uxth	r1, r3
 8005d52:	193b      	adds	r3, r7, r4
 8005d54:	181b      	adds	r3, r3, r0
 8005d56:	193a      	adds	r2, r7, r4
 8005d58:	1812      	adds	r2, r2, r0
 8005d5a:	8812      	ldrh	r2, [r2, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	193a      	adds	r2, r7, r4
 8005d66:	1812      	adds	r2, r2, r0
 8005d68:	8812      	ldrh	r2, [r2, #0]
 8005d6a:	60da      	str	r2, [r3, #12]
 8005d6c:	e095      	b.n	8005e9a <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8005d6e:	2313      	movs	r3, #19
 8005d70:	2218      	movs	r2, #24
 8005d72:	4694      	mov	ip, r2
 8005d74:	44bc      	add	ip, r7
 8005d76:	4463      	add	r3, ip
 8005d78:	2201      	movs	r2, #1
 8005d7a:	701a      	strb	r2, [r3, #0]
 8005d7c:	e08d      	b.n	8005e9a <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 8005d7e:	231b      	movs	r3, #27
 8005d80:	2218      	movs	r2, #24
 8005d82:	4694      	mov	ip, r2
 8005d84:	44bc      	add	ip, r7
 8005d86:	4463      	add	r3, ip
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b08      	cmp	r3, #8
 8005d8c:	d86a      	bhi.n	8005e64 <UART_SetConfig+0x5f0>
 8005d8e:	009a      	lsls	r2, r3, #2
 8005d90:	4b4f      	ldr	r3, [pc, #316]	; (8005ed0 <UART_SetConfig+0x65c>)
 8005d92:	18d3      	adds	r3, r2, r3
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005d98:	f7fe fd82 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 8005d9c:	0002      	movs	r2, r0
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	085b      	lsrs	r3, r3, #1
 8005da4:	18d2      	adds	r2, r2, r3
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	0019      	movs	r1, r3
 8005dac:	0010      	movs	r0, r2
 8005dae:	f7fa f9ab 	bl	8000108 <__udivsi3>
 8005db2:	0003      	movs	r3, r0
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005db8:	e05c      	b.n	8005e74 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005dba:	f7fe fd87 	bl	80048cc <HAL_RCC_GetPCLK2Freq>
 8005dbe:	0002      	movs	r2, r0
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	085b      	lsrs	r3, r3, #1
 8005dc6:	18d2      	adds	r2, r2, r3
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	0019      	movs	r1, r3
 8005dce:	0010      	movs	r0, r2
 8005dd0:	f7fa f99a 	bl	8000108 <__udivsi3>
 8005dd4:	0003      	movs	r3, r0
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005dda:	e04b      	b.n	8005e74 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ddc:	4b38      	ldr	r3, [pc, #224]	; (8005ec0 <UART_SetConfig+0x64c>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2210      	movs	r2, #16
 8005de2:	4013      	ands	r3, r2
 8005de4:	d00e      	beq.n	8005e04 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	085b      	lsrs	r3, r3, #1
 8005dec:	4a39      	ldr	r2, [pc, #228]	; (8005ed4 <UART_SetConfig+0x660>)
 8005dee:	189a      	adds	r2, r3, r2
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	0019      	movs	r1, r3
 8005df6:	0010      	movs	r0, r2
 8005df8:	f7fa f986 	bl	8000108 <__udivsi3>
 8005dfc:	0003      	movs	r3, r0
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8005e02:	e037      	b.n	8005e74 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	085b      	lsrs	r3, r3, #1
 8005e0a:	4a33      	ldr	r2, [pc, #204]	; (8005ed8 <UART_SetConfig+0x664>)
 8005e0c:	189a      	adds	r2, r3, r2
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	0019      	movs	r1, r3
 8005e14:	0010      	movs	r0, r2
 8005e16:	f7fa f977 	bl	8000108 <__udivsi3>
 8005e1a:	0003      	movs	r3, r0
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e20:	e028      	b.n	8005e74 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005e22:	f7fe fcaf 	bl	8004784 <HAL_RCC_GetSysClockFreq>
 8005e26:	0002      	movs	r2, r0
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	085b      	lsrs	r3, r3, #1
 8005e2e:	18d2      	adds	r2, r2, r3
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	0019      	movs	r1, r3
 8005e36:	0010      	movs	r0, r2
 8005e38:	f7fa f966 	bl	8000108 <__udivsi3>
 8005e3c:	0003      	movs	r3, r0
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e42:	e017      	b.n	8005e74 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	085b      	lsrs	r3, r3, #1
 8005e4a:	2280      	movs	r2, #128	; 0x80
 8005e4c:	0212      	lsls	r2, r2, #8
 8005e4e:	189a      	adds	r2, r3, r2
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	0019      	movs	r1, r3
 8005e56:	0010      	movs	r0, r2
 8005e58:	f7fa f956 	bl	8000108 <__udivsi3>
 8005e5c:	0003      	movs	r3, r0
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e62:	e007      	b.n	8005e74 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005e64:	2313      	movs	r3, #19
 8005e66:	2218      	movs	r2, #24
 8005e68:	4694      	mov	ip, r2
 8005e6a:	44bc      	add	ip, r7
 8005e6c:	4463      	add	r3, ip
 8005e6e:	2201      	movs	r2, #1
 8005e70:	701a      	strb	r2, [r3, #0]
        break;
 8005e72:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e76:	2b0f      	cmp	r3, #15
 8005e78:	d908      	bls.n	8005e8c <UART_SetConfig+0x618>
 8005e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7c:	4a13      	ldr	r2, [pc, #76]	; (8005ecc <UART_SetConfig+0x658>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d804      	bhi.n	8005e8c <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e88:	60da      	str	r2, [r3, #12]
 8005e8a:	e006      	b.n	8005e9a <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8005e8c:	2313      	movs	r3, #19
 8005e8e:	2218      	movs	r2, #24
 8005e90:	4694      	mov	ip, r2
 8005e92:	44bc      	add	ip, r7
 8005e94:	4463      	add	r3, ip
 8005e96:	2201      	movs	r2, #1
 8005e98:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005ea6:	2313      	movs	r3, #19
 8005ea8:	2218      	movs	r2, #24
 8005eaa:	4694      	mov	ip, r2
 8005eac:	44bc      	add	ip, r7
 8005eae:	4463      	add	r3, ip
 8005eb0:	781b      	ldrb	r3, [r3, #0]
}
 8005eb2:	0018      	movs	r0, r3
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	b00e      	add	sp, #56	; 0x38
 8005eb8:	bdb0      	pop	{r4, r5, r7, pc}
 8005eba:	46c0      	nop			; (mov r8, r8)
 8005ebc:	0800a4b8 	.word	0x0800a4b8
 8005ec0:	40021000 	.word	0x40021000
 8005ec4:	007a1200 	.word	0x007a1200
 8005ec8:	01e84800 	.word	0x01e84800
 8005ecc:	0000ffff 	.word	0x0000ffff
 8005ed0:	0800a4dc 	.word	0x0800a4dc
 8005ed4:	003d0900 	.word	0x003d0900
 8005ed8:	00f42400 	.word	0x00f42400

08005edc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee8:	2201      	movs	r2, #1
 8005eea:	4013      	ands	r3, r2
 8005eec:	d00b      	beq.n	8005f06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	4a4a      	ldr	r2, [pc, #296]	; (8006020 <UART_AdvFeatureConfig+0x144>)
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	0019      	movs	r1, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	430a      	orrs	r2, r1
 8005f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	d00b      	beq.n	8005f28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	4a43      	ldr	r2, [pc, #268]	; (8006024 <UART_AdvFeatureConfig+0x148>)
 8005f18:	4013      	ands	r3, r2
 8005f1a:	0019      	movs	r1, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	430a      	orrs	r2, r1
 8005f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2c:	2204      	movs	r2, #4
 8005f2e:	4013      	ands	r3, r2
 8005f30:	d00b      	beq.n	8005f4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	4a3b      	ldr	r2, [pc, #236]	; (8006028 <UART_AdvFeatureConfig+0x14c>)
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	0019      	movs	r1, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	2208      	movs	r2, #8
 8005f50:	4013      	ands	r3, r2
 8005f52:	d00b      	beq.n	8005f6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	4a34      	ldr	r2, [pc, #208]	; (800602c <UART_AdvFeatureConfig+0x150>)
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	0019      	movs	r1, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f70:	2210      	movs	r2, #16
 8005f72:	4013      	ands	r3, r2
 8005f74:	d00b      	beq.n	8005f8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	4a2c      	ldr	r2, [pc, #176]	; (8006030 <UART_AdvFeatureConfig+0x154>)
 8005f7e:	4013      	ands	r3, r2
 8005f80:	0019      	movs	r1, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f92:	2220      	movs	r2, #32
 8005f94:	4013      	ands	r3, r2
 8005f96:	d00b      	beq.n	8005fb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	4a25      	ldr	r2, [pc, #148]	; (8006034 <UART_AdvFeatureConfig+0x158>)
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	0019      	movs	r1, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	430a      	orrs	r2, r1
 8005fae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	2240      	movs	r2, #64	; 0x40
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	d01d      	beq.n	8005ff6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	4a1d      	ldr	r2, [pc, #116]	; (8006038 <UART_AdvFeatureConfig+0x15c>)
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	0019      	movs	r1, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fd6:	2380      	movs	r3, #128	; 0x80
 8005fd8:	035b      	lsls	r3, r3, #13
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d10b      	bne.n	8005ff6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	4a15      	ldr	r2, [pc, #84]	; (800603c <UART_AdvFeatureConfig+0x160>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	0019      	movs	r1, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffa:	2280      	movs	r2, #128	; 0x80
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	d00b      	beq.n	8006018 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	4a0e      	ldr	r2, [pc, #56]	; (8006040 <UART_AdvFeatureConfig+0x164>)
 8006008:	4013      	ands	r3, r2
 800600a:	0019      	movs	r1, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	430a      	orrs	r2, r1
 8006016:	605a      	str	r2, [r3, #4]
  }
}
 8006018:	46c0      	nop			; (mov r8, r8)
 800601a:	46bd      	mov	sp, r7
 800601c:	b002      	add	sp, #8
 800601e:	bd80      	pop	{r7, pc}
 8006020:	fffdffff 	.word	0xfffdffff
 8006024:	fffeffff 	.word	0xfffeffff
 8006028:	fffbffff 	.word	0xfffbffff
 800602c:	ffff7fff 	.word	0xffff7fff
 8006030:	ffffefff 	.word	0xffffefff
 8006034:	ffffdfff 	.word	0xffffdfff
 8006038:	ffefffff 	.word	0xffefffff
 800603c:	ff9fffff 	.word	0xff9fffff
 8006040:	fff7ffff 	.word	0xfff7ffff

08006044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af02      	add	r7, sp, #8
 800604a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006052:	f7fc fa43 	bl	80024dc <HAL_GetTick>
 8006056:	0003      	movs	r3, r0
 8006058:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2208      	movs	r2, #8
 8006062:	4013      	ands	r3, r2
 8006064:	2b08      	cmp	r3, #8
 8006066:	d10d      	bne.n	8006084 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	2380      	movs	r3, #128	; 0x80
 800606c:	0399      	lsls	r1, r3, #14
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	4b16      	ldr	r3, [pc, #88]	; (80060cc <UART_CheckIdleState+0x88>)
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	0013      	movs	r3, r2
 8006076:	2200      	movs	r2, #0
 8006078:	f000 f82a 	bl	80060d0 <UART_WaitOnFlagUntilTimeout>
 800607c:	1e03      	subs	r3, r0, #0
 800607e:	d001      	beq.n	8006084 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e01f      	b.n	80060c4 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2204      	movs	r2, #4
 800608c:	4013      	ands	r3, r2
 800608e:	2b04      	cmp	r3, #4
 8006090:	d10d      	bne.n	80060ae <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	2380      	movs	r3, #128	; 0x80
 8006096:	03d9      	lsls	r1, r3, #15
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	4b0c      	ldr	r3, [pc, #48]	; (80060cc <UART_CheckIdleState+0x88>)
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	0013      	movs	r3, r2
 80060a0:	2200      	movs	r2, #0
 80060a2:	f000 f815 	bl	80060d0 <UART_WaitOnFlagUntilTimeout>
 80060a6:	1e03      	subs	r3, r0, #0
 80060a8:	d001      	beq.n	80060ae <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e00a      	b.n	80060c4 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2220      	movs	r2, #32
 80060b2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2220      	movs	r2, #32
 80060b8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2270      	movs	r2, #112	; 0x70
 80060be:	2100      	movs	r1, #0
 80060c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	0018      	movs	r0, r3
 80060c6:	46bd      	mov	sp, r7
 80060c8:	b004      	add	sp, #16
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	01ffffff 	.word	0x01ffffff

080060d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	603b      	str	r3, [r7, #0]
 80060dc:	1dfb      	adds	r3, r7, #7
 80060de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060e0:	e029      	b.n	8006136 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	3301      	adds	r3, #1
 80060e6:	d026      	beq.n	8006136 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060e8:	f7fc f9f8 	bl	80024dc <HAL_GetTick>
 80060ec:	0002      	movs	r2, r0
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d302      	bcc.n	80060fe <UART_WaitOnFlagUntilTimeout+0x2e>
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d11b      	bne.n	8006136 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4915      	ldr	r1, [pc, #84]	; (8006160 <UART_WaitOnFlagUntilTimeout+0x90>)
 800610a:	400a      	ands	r2, r1
 800610c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2101      	movs	r1, #1
 800611a:	438a      	bics	r2, r1
 800611c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2220      	movs	r2, #32
 8006122:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2220      	movs	r2, #32
 8006128:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2270      	movs	r2, #112	; 0x70
 800612e:	2100      	movs	r1, #0
 8006130:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e00f      	b.n	8006156 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	4013      	ands	r3, r2
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	425a      	negs	r2, r3
 8006146:	4153      	adcs	r3, r2
 8006148:	b2db      	uxtb	r3, r3
 800614a:	001a      	movs	r2, r3
 800614c:	1dfb      	adds	r3, r7, #7
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	429a      	cmp	r2, r3
 8006152:	d0c6      	beq.n	80060e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	0018      	movs	r0, r3
 8006158:	46bd      	mov	sp, r7
 800615a:	b004      	add	sp, #16
 800615c:	bd80      	pop	{r7, pc}
 800615e:	46c0      	nop			; (mov r8, r8)
 8006160:	fffffe5f 	.word	0xfffffe5f

08006164 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	21c0      	movs	r1, #192	; 0xc0
 8006178:	438a      	bics	r2, r1
 800617a:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2220      	movs	r2, #32
 8006180:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006182:	46c0      	nop			; (mov r8, r8)
 8006184:	46bd      	mov	sp, r7
 8006186:	b002      	add	sp, #8
 8006188:	bd80      	pop	{r7, pc}
	...

0800618c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	490a      	ldr	r1, [pc, #40]	; (80061c8 <UART_EndRxTransfer+0x3c>)
 80061a0:	400a      	ands	r2, r1
 80061a2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689a      	ldr	r2, [r3, #8]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2101      	movs	r1, #1
 80061b0:	438a      	bics	r2, r1
 80061b2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2220      	movs	r2, #32
 80061b8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	661a      	str	r2, [r3, #96]	; 0x60
}
 80061c0:	46c0      	nop			; (mov r8, r8)
 80061c2:	46bd      	mov	sp, r7
 80061c4:	b002      	add	sp, #8
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	fffffedf 	.word	0xfffffedf

080061cc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2220      	movs	r2, #32
 80061e2:	4013      	ands	r3, r2
 80061e4:	d114      	bne.n	8006210 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2252      	movs	r2, #82	; 0x52
 80061ea:	2100      	movs	r1, #0
 80061ec:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689a      	ldr	r2, [r3, #8]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2180      	movs	r1, #128	; 0x80
 80061fa:	438a      	bics	r2, r1
 80061fc:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2140      	movs	r1, #64	; 0x40
 800620a:	430a      	orrs	r2, r1
 800620c:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800620e:	e003      	b.n	8006218 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	0018      	movs	r0, r3
 8006214:	f7ff fb0e 	bl	8005834 <HAL_UART_TxCpltCallback>
}
 8006218:	46c0      	nop			; (mov r8, r8)
 800621a:	46bd      	mov	sp, r7
 800621c:	b004      	add	sp, #16
 800621e:	bd80      	pop	{r7, pc}

08006220 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	0018      	movs	r0, r3
 8006232:	f7ff fb07 	bl	8005844 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006236:	46c0      	nop			; (mov r8, r8)
 8006238:	46bd      	mov	sp, r7
 800623a:	b004      	add	sp, #16
 800623c:	bd80      	pop	{r7, pc}
	...

08006240 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2220      	movs	r2, #32
 8006256:	4013      	ands	r3, r2
 8006258:	d11e      	bne.n	8006298 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	225a      	movs	r2, #90	; 0x5a
 800625e:	2100      	movs	r1, #0
 8006260:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	490e      	ldr	r1, [pc, #56]	; (80062a8 <UART_DMAReceiveCplt+0x68>)
 800626e:	400a      	ands	r2, r1
 8006270:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2101      	movs	r1, #1
 800627e:	438a      	bics	r2, r1
 8006280:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	689a      	ldr	r2, [r3, #8]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2140      	movs	r1, #64	; 0x40
 800628e:	438a      	bics	r2, r1
 8006290:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2220      	movs	r2, #32
 8006296:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	0018      	movs	r0, r3
 800629c:	f003 f896 	bl	80093cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062a0:	46c0      	nop			; (mov r8, r8)
 80062a2:	46bd      	mov	sp, r7
 80062a4:	b004      	add	sp, #16
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	fffffeff 	.word	0xfffffeff

080062ac <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	0018      	movs	r0, r3
 80062be:	f7ff fac9 	bl	8005854 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062c2:	46c0      	nop			; (mov r8, r8)
 80062c4:	46bd      	mov	sp, r7
 80062c6:	b004      	add	sp, #16
 80062c8:	bd80      	pop	{r7, pc}

080062ca <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b086      	sub	sp, #24
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062dc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	2280      	movs	r2, #128	; 0x80
 80062ec:	4013      	ands	r3, r2
 80062ee:	2b80      	cmp	r3, #128	; 0x80
 80062f0:	d10a      	bne.n	8006308 <UART_DMAError+0x3e>
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	2b21      	cmp	r3, #33	; 0x21
 80062f6:	d107      	bne.n	8006308 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	2252      	movs	r2, #82	; 0x52
 80062fc:	2100      	movs	r1, #0
 80062fe:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	0018      	movs	r0, r3
 8006304:	f7ff ff2e 	bl	8006164 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	2240      	movs	r2, #64	; 0x40
 8006310:	4013      	ands	r3, r2
 8006312:	2b40      	cmp	r3, #64	; 0x40
 8006314:	d10a      	bne.n	800632c <UART_DMAError+0x62>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2b22      	cmp	r3, #34	; 0x22
 800631a:	d107      	bne.n	800632c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	225a      	movs	r2, #90	; 0x5a
 8006320:	2100      	movs	r1, #0
 8006322:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	0018      	movs	r0, r3
 8006328:	f7ff ff30 	bl	800618c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006330:	2210      	movs	r2, #16
 8006332:	431a      	orrs	r2, r3
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	0018      	movs	r0, r3
 800633c:	f7ff fa92 	bl	8005864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006340:	46c0      	nop			; (mov r8, r8)
 8006342:	46bd      	mov	sp, r7
 8006344:	b006      	add	sp, #24
 8006346:	bd80      	pop	{r7, pc}

08006348 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006354:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	225a      	movs	r2, #90	; 0x5a
 800635a:	2100      	movs	r1, #0
 800635c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2252      	movs	r2, #82	; 0x52
 8006362:	2100      	movs	r1, #0
 8006364:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	0018      	movs	r0, r3
 800636a:	f7ff fa7b 	bl	8005864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800636e:	46c0      	nop			; (mov r8, r8)
 8006370:	46bd      	mov	sp, r7
 8006372:	b004      	add	sp, #16
 8006374:	bd80      	pop	{r7, pc}

08006376 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b082      	sub	sp, #8
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2140      	movs	r1, #64	; 0x40
 800638a:	438a      	bics	r2, r1
 800638c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2220      	movs	r2, #32
 8006392:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	0018      	movs	r0, r3
 800639e:	f7ff fa49 	bl	8005834 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063a2:	46c0      	nop			; (mov r8, r8)
 80063a4:	46bd      	mov	sp, r7
 80063a6:	b002      	add	sp, #8
 80063a8:	bd80      	pop	{r7, pc}

080063aa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b082      	sub	sp, #8
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80063b2:	46c0      	nop			; (mov r8, r8)
 80063b4:	46bd      	mov	sp, r7
 80063b6:	b002      	add	sp, #8
 80063b8:	bd80      	pop	{r7, pc}

080063ba <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b084      	sub	sp, #16
 80063be:	af00      	add	r7, sp, #0
 80063c0:	0002      	movs	r2, r0
 80063c2:	1dbb      	adds	r3, r7, #6
 80063c4:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80063c6:	2300      	movs	r3, #0
 80063c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80063ca:	1dbb      	adds	r3, r7, #6
 80063cc:	2200      	movs	r2, #0
 80063ce:	5e9b      	ldrsh	r3, [r3, r2]
 80063d0:	2b84      	cmp	r3, #132	; 0x84
 80063d2:	d006      	beq.n	80063e2 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80063d4:	1dbb      	adds	r3, r7, #6
 80063d6:	2200      	movs	r2, #0
 80063d8:	5e9a      	ldrsh	r2, [r3, r2]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	18d3      	adds	r3, r2, r3
 80063de:	3303      	adds	r3, #3
 80063e0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80063e2:	68fb      	ldr	r3, [r7, #12]
}
 80063e4:	0018      	movs	r0, r3
 80063e6:	46bd      	mov	sp, r7
 80063e8:	b004      	add	sp, #16
 80063ea:	bd80      	pop	{r7, pc}

080063ec <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063f2:	f3ef 8305 	mrs	r3, IPSR
 80063f6:	607b      	str	r3, [r7, #4]
  return(result);
 80063f8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80063fa:	1e5a      	subs	r2, r3, #1
 80063fc:	4193      	sbcs	r3, r2
 80063fe:	b2db      	uxtb	r3, r3
}
 8006400:	0018      	movs	r0, r3
 8006402:	46bd      	mov	sp, r7
 8006404:	b002      	add	sp, #8
 8006406:	bd80      	pop	{r7, pc}

08006408 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800640c:	f001 f86e 	bl	80074ec <vTaskStartScheduler>
  
  return osOK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	0018      	movs	r0, r3
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800641a:	b089      	sub	sp, #36	; 0x24
 800641c:	af04      	add	r7, sp, #16
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d020      	beq.n	800646c <osThreadCreate+0x54>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d01c      	beq.n	800646c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685c      	ldr	r4, [r3, #4]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681d      	ldr	r5, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691e      	ldr	r6, [r3, #16]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2208      	movs	r2, #8
 8006442:	5e9b      	ldrsh	r3, [r3, r2]
 8006444:	0018      	movs	r0, r3
 8006446:	f7ff ffb8 	bl	80063ba <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	695a      	ldr	r2, [r3, #20]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006452:	6839      	ldr	r1, [r7, #0]
 8006454:	9302      	str	r3, [sp, #8]
 8006456:	9201      	str	r2, [sp, #4]
 8006458:	9000      	str	r0, [sp, #0]
 800645a:	000b      	movs	r3, r1
 800645c:	0032      	movs	r2, r6
 800645e:	0029      	movs	r1, r5
 8006460:	0020      	movs	r0, r4
 8006462:	f000 feaf 	bl	80071c4 <xTaskCreateStatic>
 8006466:	0003      	movs	r3, r0
 8006468:	60fb      	str	r3, [r7, #12]
 800646a:	e01d      	b.n	80064a8 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685c      	ldr	r4, [r3, #4]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006478:	b29e      	uxth	r6, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2208      	movs	r2, #8
 800647e:	5e9b      	ldrsh	r3, [r3, r2]
 8006480:	0018      	movs	r0, r3
 8006482:	f7ff ff9a 	bl	80063ba <makeFreeRtosPriority>
 8006486:	0001      	movs	r1, r0
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	230c      	movs	r3, #12
 800648c:	18fb      	adds	r3, r7, r3
 800648e:	9301      	str	r3, [sp, #4]
 8006490:	9100      	str	r1, [sp, #0]
 8006492:	0013      	movs	r3, r2
 8006494:	0032      	movs	r2, r6
 8006496:	0029      	movs	r1, r5
 8006498:	0020      	movs	r0, r4
 800649a:	f000 fed6 	bl	800724a <xTaskCreate>
 800649e:	0003      	movs	r3, r0
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d001      	beq.n	80064a8 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 80064a4:	2300      	movs	r3, #0
 80064a6:	e000      	b.n	80064aa <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80064a8:	68fb      	ldr	r3, [r7, #12]
}
 80064aa:	0018      	movs	r0, r3
 80064ac:	46bd      	mov	sp, r7
 80064ae:	b005      	add	sp, #20
 80064b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080064b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b084      	sub	sp, #16
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <osDelay+0x16>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	e000      	b.n	80064ca <osDelay+0x18>
 80064c8:	2301      	movs	r3, #1
 80064ca:	0018      	movs	r0, r3
 80064cc:	f000 ffe8 	bl	80074a0 <vTaskDelay>
  
  return osOK;
 80064d0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80064d2:	0018      	movs	r0, r3
 80064d4:	46bd      	mov	sp, r7
 80064d6:	b004      	add	sp, #16
 80064d8:	bd80      	pop	{r7, pc}
	...

080064dc <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af02      	add	r7, sp, #8
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80064e6:	2300      	movs	r3, #0
 80064e8:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80064ea:	2300      	movs	r3, #0
 80064ec:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80064ee:	f7ff ff7d 	bl	80063ec <inHandlerMode>
 80064f2:	1e03      	subs	r3, r0, #0
 80064f4:	d018      	beq.n	8006528 <osSignalSet+0x4c>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80064f6:	6839      	ldr	r1, [r7, #0]
 80064f8:	2308      	movs	r3, #8
 80064fa:	18fa      	adds	r2, r7, r3
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	230c      	movs	r3, #12
 8006500:	18fb      	adds	r3, r7, r3
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	0013      	movs	r3, r2
 8006506:	2201      	movs	r2, #1
 8006508:	f001 fcea 	bl	8007ee0 <xTaskGenericNotifyFromISR>
 800650c:	0003      	movs	r3, r0
 800650e:	2b01      	cmp	r3, #1
 8006510:	d002      	beq.n	8006518 <osSignalSet+0x3c>
      return 0x80000000;
 8006512:	2380      	movs	r3, #128	; 0x80
 8006514:	061b      	lsls	r3, r3, #24
 8006516:	e015      	b.n	8006544 <osSignalSet+0x68>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d011      	beq.n	8006542 <osSignalSet+0x66>
 800651e:	4b0b      	ldr	r3, [pc, #44]	; (800654c <osSignalSet+0x70>)
 8006520:	2280      	movs	r2, #128	; 0x80
 8006522:	0552      	lsls	r2, r2, #21
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	e00c      	b.n	8006542 <osSignalSet+0x66>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	2308      	movs	r3, #8
 800652c:	18fb      	adds	r3, r7, r3
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	f001 fc49 	bl	8007dc8 <xTaskGenericNotify>
 8006536:	0003      	movs	r3, r0
 8006538:	2b01      	cmp	r3, #1
 800653a:	d002      	beq.n	8006542 <osSignalSet+0x66>
    return 0x80000000;
 800653c:	2380      	movs	r3, #128	; 0x80
 800653e:	061b      	lsls	r3, r3, #24
 8006540:	e000      	b.n	8006544 <osSignalSet+0x68>
  
  return ulPreviousNotificationValue;
 8006542:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8006544:	0018      	movs	r0, r3
 8006546:	46bd      	mov	sp, r7
 8006548:	b004      	add	sp, #16
 800654a:	bd80      	pop	{r7, pc}
 800654c:	e000ed04 	.word	0xe000ed04

08006550 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8006550:	b590      	push	{r4, r7, lr}
 8006552:	b089      	sub	sp, #36	; 0x24
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800655c:	2310      	movs	r3, #16
 800655e:	18fb      	adds	r3, r7, r3
 8006560:	2200      	movs	r2, #0
 8006562:	605a      	str	r2, [r3, #4]
  ticks = 0;
 8006564:	2300      	movs	r3, #0
 8006566:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	3301      	adds	r3, #1
 800656c:	d103      	bne.n	8006576 <osSignalWait+0x26>
    ticks = portMAX_DELAY;
 800656e:	2301      	movs	r3, #1
 8006570:	425b      	negs	r3, r3
 8006572:	61fb      	str	r3, [r7, #28]
 8006574:	e009      	b.n	800658a <osSignalWait+0x3a>
  }
  else if (millisec != 0) {
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d006      	beq.n	800658a <osSignalWait+0x3a>
    ticks = millisec / portTICK_PERIOD_MS;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d101      	bne.n	800658a <osSignalWait+0x3a>
      ticks = 1;
 8006586:	2301      	movs	r3, #1
 8006588:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800658a:	f7ff ff2f 	bl	80063ec <inHandlerMode>
 800658e:	1e03      	subs	r3, r0, #0
 8006590:	d004      	beq.n	800659c <osSignalWait+0x4c>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8006592:	2310      	movs	r3, #16
 8006594:	18fb      	adds	r3, r7, r3
 8006596:	2282      	movs	r2, #130	; 0x82
 8006598:	601a      	str	r2, [r3, #0]
 800659a:	e026      	b.n	80065ea <osSignalWait+0x9a>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800659c:	68b9      	ldr	r1, [r7, #8]
 800659e:	69f8      	ldr	r0, [r7, #28]
 80065a0:	2310      	movs	r3, #16
 80065a2:	18fb      	adds	r3, r7, r3
 80065a4:	1d1a      	adds	r2, r3, #4
 80065a6:	0003      	movs	r3, r0
 80065a8:	2000      	movs	r0, #0
 80065aa:	f001 fbb9 	bl	8007d20 <xTaskNotifyWait>
 80065ae:	0003      	movs	r3, r0
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d00c      	beq.n	80065ce <osSignalWait+0x7e>
    {
      if(ticks == 0)  ret.status = osOK;
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d104      	bne.n	80065c4 <osSignalWait+0x74>
 80065ba:	2310      	movs	r3, #16
 80065bc:	18fb      	adds	r3, r7, r3
 80065be:	2200      	movs	r2, #0
 80065c0:	601a      	str	r2, [r3, #0]
 80065c2:	e012      	b.n	80065ea <osSignalWait+0x9a>
      else  ret.status = osEventTimeout;
 80065c4:	2310      	movs	r3, #16
 80065c6:	18fb      	adds	r3, r7, r3
 80065c8:	2240      	movs	r2, #64	; 0x40
 80065ca:	601a      	str	r2, [r3, #0]
 80065cc:	e00d      	b.n	80065ea <osSignalWait+0x9a>
    }
    else if(ret.value.signals < 0)
 80065ce:	2310      	movs	r3, #16
 80065d0:	18fb      	adds	r3, r7, r3
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	da04      	bge.n	80065e2 <osSignalWait+0x92>
    {
      ret.status =  osErrorValue;     
 80065d8:	2310      	movs	r3, #16
 80065da:	18fb      	adds	r3, r7, r3
 80065dc:	2286      	movs	r2, #134	; 0x86
 80065de:	601a      	str	r2, [r3, #0]
 80065e0:	e003      	b.n	80065ea <osSignalWait+0x9a>
    }
    else  ret.status =  osEventSignal;
 80065e2:	2310      	movs	r3, #16
 80065e4:	18fb      	adds	r3, r7, r3
 80065e6:	2208      	movs	r2, #8
 80065e8:	601a      	str	r2, [r3, #0]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2210      	movs	r2, #16
 80065ee:	18ba      	adds	r2, r7, r2
 80065f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80065f2:	c313      	stmia	r3!, {r0, r1, r4}
}
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	46bd      	mov	sp, r7
 80065f8:	b009      	add	sp, #36	; 0x24
 80065fa:	bd90      	pop	{r4, r7, pc}

080065fc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80065fc:	b590      	push	{r4, r7, lr}
 80065fe:	b085      	sub	sp, #20
 8006600:	af02      	add	r7, sp, #8
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d012      	beq.n	8006634 <osMessageCreate+0x38>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00e      	beq.n	8006634 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6818      	ldr	r0, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6859      	ldr	r1, [r3, #4]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689a      	ldr	r2, [r3, #8]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68dc      	ldr	r4, [r3, #12]
 8006626:	2300      	movs	r3, #0
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	0023      	movs	r3, r4
 800662c:	f000 f9bd 	bl	80069aa <xQueueGenericCreateStatic>
 8006630:	0003      	movs	r3, r0
 8006632:	e008      	b.n	8006646 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6818      	ldr	r0, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	0019      	movs	r1, r3
 8006640:	f000 f9fe 	bl	8006a40 <xQueueGenericCreate>
 8006644:	0003      	movs	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006646:	0018      	movs	r0, r3
 8006648:	46bd      	mov	sp, r7
 800664a:	b003      	add	sp, #12
 800664c:	bd90      	pop	{r4, r7, pc}
	...

08006650 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800665c:	2300      	movs	r3, #0
 800665e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d101      	bne.n	800666e <osMessagePut+0x1e>
    ticks = 1;
 800666a:	2301      	movs	r3, #1
 800666c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800666e:	f7ff febd 	bl	80063ec <inHandlerMode>
 8006672:	1e03      	subs	r3, r0, #0
 8006674:	d014      	beq.n	80066a0 <osMessagePut+0x50>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006676:	2310      	movs	r3, #16
 8006678:	18fa      	adds	r2, r7, r3
 800667a:	2308      	movs	r3, #8
 800667c:	18f9      	adds	r1, r7, r3
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	2300      	movs	r3, #0
 8006682:	f000 faf9 	bl	8006c78 <xQueueGenericSendFromISR>
 8006686:	0003      	movs	r3, r0
 8006688:	2b01      	cmp	r3, #1
 800668a:	d001      	beq.n	8006690 <osMessagePut+0x40>
      return osErrorOS;
 800668c:	23ff      	movs	r3, #255	; 0xff
 800668e:	e014      	b.n	80066ba <osMessagePut+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d010      	beq.n	80066b8 <osMessagePut+0x68>
 8006696:	4b0b      	ldr	r3, [pc, #44]	; (80066c4 <osMessagePut+0x74>)
 8006698:	2280      	movs	r2, #128	; 0x80
 800669a:	0552      	lsls	r2, r2, #21
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	e00b      	b.n	80066b8 <osMessagePut+0x68>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	2308      	movs	r3, #8
 80066a4:	18f9      	adds	r1, r7, r3
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	2300      	movs	r3, #0
 80066aa:	f000 fa21 	bl	8006af0 <xQueueGenericSend>
 80066ae:	0003      	movs	r3, r0
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d001      	beq.n	80066b8 <osMessagePut+0x68>
      return osErrorOS;
 80066b4:	23ff      	movs	r3, #255	; 0xff
 80066b6:	e000      	b.n	80066ba <osMessagePut+0x6a>
    }
  }
  
  return osOK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	0018      	movs	r0, r3
 80066bc:	46bd      	mov	sp, r7
 80066be:	b006      	add	sp, #24
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	46c0      	nop			; (mov r8, r8)
 80066c4:	e000ed04 	.word	0xe000ed04

080066c8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80066c8:	b590      	push	{r4, r7, lr}
 80066ca:	b08b      	sub	sp, #44	; 0x2c
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80066d4:	2114      	movs	r1, #20
 80066d6:	187b      	adds	r3, r7, r1
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	609a      	str	r2, [r3, #8]
  event.value.v = 0;
 80066dc:	187b      	adds	r3, r7, r1
 80066de:	2200      	movs	r2, #0
 80066e0:	605a      	str	r2, [r3, #4]
  
  if (queue_id == NULL) {
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d108      	bne.n	80066fa <osMessageGet+0x32>
    event.status = osErrorParameter;
 80066e8:	2114      	movs	r1, #20
 80066ea:	187b      	adds	r3, r7, r1
 80066ec:	2280      	movs	r2, #128	; 0x80
 80066ee:	601a      	str	r2, [r3, #0]
    return event;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	187a      	adds	r2, r7, r1
 80066f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80066f6:	c313      	stmia	r3!, {r0, r1, r4}
 80066f8:	e053      	b.n	80067a2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80066fa:	2300      	movs	r3, #0
 80066fc:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80066fe:	2300      	movs	r3, #0
 8006700:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	3301      	adds	r3, #1
 8006706:	d103      	bne.n	8006710 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006708:	2301      	movs	r3, #1
 800670a:	425b      	negs	r3, r3
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
 800670e:	e009      	b.n	8006724 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d006      	beq.n	8006724 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	2b00      	cmp	r3, #0
 800671e:	d101      	bne.n	8006724 <osMessageGet+0x5c>
      ticks = 1;
 8006720:	2301      	movs	r3, #1
 8006722:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006724:	f7ff fe62 	bl	80063ec <inHandlerMode>
 8006728:	1e03      	subs	r3, r0, #0
 800672a:	d01c      	beq.n	8006766 <osMessageGet+0x9e>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800672c:	2320      	movs	r3, #32
 800672e:	18fa      	adds	r2, r7, r3
 8006730:	2314      	movs	r3, #20
 8006732:	18fb      	adds	r3, r7, r3
 8006734:	1d19      	adds	r1, r3, #4
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	0018      	movs	r0, r3
 800673a:	f000 fbc3 	bl	8006ec4 <xQueueReceiveFromISR>
 800673e:	0003      	movs	r3, r0
 8006740:	2b01      	cmp	r3, #1
 8006742:	d104      	bne.n	800674e <osMessageGet+0x86>
      /* We have mail */
      event.status = osEventMessage;
 8006744:	2314      	movs	r3, #20
 8006746:	18fb      	adds	r3, r7, r3
 8006748:	2210      	movs	r2, #16
 800674a:	601a      	str	r2, [r3, #0]
 800674c:	e003      	b.n	8006756 <osMessageGet+0x8e>
    }
    else {
      event.status = osOK;
 800674e:	2314      	movs	r3, #20
 8006750:	18fb      	adds	r3, r7, r3
 8006752:	2200      	movs	r2, #0
 8006754:	601a      	str	r2, [r3, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d01d      	beq.n	8006798 <osMessageGet+0xd0>
 800675c:	4b13      	ldr	r3, [pc, #76]	; (80067ac <osMessageGet+0xe4>)
 800675e:	2280      	movs	r2, #128	; 0x80
 8006760:	0552      	lsls	r2, r2, #21
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	e018      	b.n	8006798 <osMessageGet+0xd0>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006768:	2314      	movs	r3, #20
 800676a:	18fb      	adds	r3, r7, r3
 800676c:	1d19      	adds	r1, r3, #4
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	0018      	movs	r0, r3
 8006772:	f000 faf2 	bl	8006d5a <xQueueReceive>
 8006776:	0003      	movs	r3, r0
 8006778:	2b01      	cmp	r3, #1
 800677a:	d104      	bne.n	8006786 <osMessageGet+0xbe>
      /* We have mail */
      event.status = osEventMessage;
 800677c:	2314      	movs	r3, #20
 800677e:	18fb      	adds	r3, r7, r3
 8006780:	2210      	movs	r2, #16
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	e008      	b.n	8006798 <osMessageGet+0xd0>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	2b00      	cmp	r3, #0
 800678a:	d101      	bne.n	8006790 <osMessageGet+0xc8>
 800678c:	2200      	movs	r2, #0
 800678e:	e000      	b.n	8006792 <osMessageGet+0xca>
 8006790:	2240      	movs	r2, #64	; 0x40
 8006792:	2314      	movs	r3, #20
 8006794:	18fb      	adds	r3, r7, r3
 8006796:	601a      	str	r2, [r3, #0]
    }
  }
  
  return event;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2214      	movs	r2, #20
 800679c:	18ba      	adds	r2, r7, r2
 800679e:	ca13      	ldmia	r2!, {r0, r1, r4}
 80067a0:	c313      	stmia	r3!, {r0, r1, r4}
}
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	46bd      	mov	sp, r7
 80067a6:	b00b      	add	sp, #44	; 0x2c
 80067a8:	bd90      	pop	{r4, r7, pc}
 80067aa:	46c0      	nop			; (mov r8, r8)
 80067ac:	e000ed04 	.word	0xe000ed04

080067b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	3308      	adds	r3, #8
 80067bc:	001a      	movs	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	4252      	negs	r2, r2
 80067c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	3308      	adds	r3, #8
 80067ce:	001a      	movs	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	3308      	adds	r3, #8
 80067d8:	001a      	movs	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067e4:	46c0      	nop			; (mov r8, r8)
 80067e6:	46bd      	mov	sp, r7
 80067e8:	b002      	add	sp, #8
 80067ea:	bd80      	pop	{r7, pc}

080067ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067fa:	46c0      	nop			; (mov r8, r8)
 80067fc:	46bd      	mov	sp, r7
 80067fe:	b002      	add	sp, #8
 8006800:	bd80      	pop	{r7, pc}

08006802 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b084      	sub	sp, #16
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	689a      	ldr	r2, [r3, #8]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	683a      	ldr	r2, [r7, #0]
 8006826:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	1c5a      	adds	r2, r3, #1
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	601a      	str	r2, [r3, #0]
}
 800683e:	46c0      	nop			; (mov r8, r8)
 8006840:	46bd      	mov	sp, r7
 8006842:	b004      	add	sp, #16
 8006844:	bd80      	pop	{r7, pc}

08006846 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b084      	sub	sp, #16
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
 800684e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	3301      	adds	r3, #1
 800685a:	d103      	bne.n	8006864 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	60fb      	str	r3, [r7, #12]
 8006862:	e00c      	b.n	800687e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	3308      	adds	r3, #8
 8006868:	60fb      	str	r3, [r7, #12]
 800686a:	e002      	b.n	8006872 <vListInsert+0x2c>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	60fb      	str	r3, [r7, #12]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	429a      	cmp	r2, r3
 800687c:	d2f6      	bcs.n	800686c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	685a      	ldr	r2, [r3, #4]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	1c5a      	adds	r2, r3, #1
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	601a      	str	r2, [r3, #0]
}
 80068aa:	46c0      	nop			; (mov r8, r8)
 80068ac:	46bd      	mov	sp, r7
 80068ae:	b004      	add	sp, #16
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b084      	sub	sp, #16
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	6892      	ldr	r2, [r2, #8]
 80068c8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	6852      	ldr	r2, [r2, #4]
 80068d2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d103      	bne.n	80068e6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	689a      	ldr	r2, [r3, #8]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	1e5a      	subs	r2, r3, #1
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
}
 80068fa:	0018      	movs	r0, r3
 80068fc:	46bd      	mov	sp, r7
 80068fe:	b004      	add	sp, #16
 8006900:	bd80      	pop	{r7, pc}

08006902 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b084      	sub	sp, #16
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
 800690a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <xQueueGenericReset+0x18>
 8006916:	b672      	cpsid	i
 8006918:	e7fe      	b.n	8006918 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800691a:	f001 fc79 	bl	8008210 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692a:	434b      	muls	r3, r1
 800692c:	18d2      	adds	r2, r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006948:	1e59      	subs	r1, r3, #1
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694e:	434b      	muls	r3, r1
 8006950:	18d2      	adds	r2, r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2244      	movs	r2, #68	; 0x44
 800695a:	21ff      	movs	r1, #255	; 0xff
 800695c:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2245      	movs	r2, #69	; 0x45
 8006962:	21ff      	movs	r1, #255	; 0xff
 8006964:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10d      	bne.n	8006988 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d013      	beq.n	800699c <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	3310      	adds	r3, #16
 8006978:	0018      	movs	r0, r3
 800697a:	f000 ffc1 	bl	8007900 <xTaskRemoveFromEventList>
 800697e:	1e03      	subs	r3, r0, #0
 8006980:	d00c      	beq.n	800699c <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006982:	f001 fc35 	bl	80081f0 <vPortYield>
 8006986:	e009      	b.n	800699c <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	3310      	adds	r3, #16
 800698c:	0018      	movs	r0, r3
 800698e:	f7ff ff0f 	bl	80067b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	3324      	adds	r3, #36	; 0x24
 8006996:	0018      	movs	r0, r3
 8006998:	f7ff ff0a 	bl	80067b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800699c:	f001 fc4a 	bl	8008234 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80069a0:	2301      	movs	r3, #1
}
 80069a2:	0018      	movs	r0, r3
 80069a4:	46bd      	mov	sp, r7
 80069a6:	b004      	add	sp, #16
 80069a8:	bd80      	pop	{r7, pc}

080069aa <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80069aa:	b590      	push	{r4, r7, lr}
 80069ac:	b089      	sub	sp, #36	; 0x24
 80069ae:	af02      	add	r7, sp, #8
 80069b0:	60f8      	str	r0, [r7, #12]
 80069b2:	60b9      	str	r1, [r7, #8]
 80069b4:	607a      	str	r2, [r7, #4]
 80069b6:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <xQueueGenericCreateStatic+0x18>
 80069be:	b672      	cpsid	i
 80069c0:	e7fe      	b.n	80069c0 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d101      	bne.n	80069cc <xQueueGenericCreateStatic+0x22>
 80069c8:	b672      	cpsid	i
 80069ca:	e7fe      	b.n	80069ca <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d002      	beq.n	80069d8 <xQueueGenericCreateStatic+0x2e>
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d001      	beq.n	80069dc <xQueueGenericCreateStatic+0x32>
 80069d8:	2301      	movs	r3, #1
 80069da:	e000      	b.n	80069de <xQueueGenericCreateStatic+0x34>
 80069dc:	2300      	movs	r3, #0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <xQueueGenericCreateStatic+0x3c>
 80069e2:	b672      	cpsid	i
 80069e4:	e7fe      	b.n	80069e4 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d102      	bne.n	80069f2 <xQueueGenericCreateStatic+0x48>
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <xQueueGenericCreateStatic+0x4c>
 80069f2:	2301      	movs	r3, #1
 80069f4:	e000      	b.n	80069f8 <xQueueGenericCreateStatic+0x4e>
 80069f6:	2300      	movs	r3, #0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d101      	bne.n	8006a00 <xQueueGenericCreateStatic+0x56>
 80069fc:	b672      	cpsid	i
 80069fe:	e7fe      	b.n	80069fe <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a00:	2348      	movs	r3, #72	; 0x48
 8006a02:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	2b48      	cmp	r3, #72	; 0x48
 8006a08:	d001      	beq.n	8006a0e <xQueueGenericCreateStatic+0x64>
 8006a0a:	b672      	cpsid	i
 8006a0c:	e7fe      	b.n	8006a0c <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00e      	beq.n	8006a36 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	2246      	movs	r2, #70	; 0x46
 8006a1c:	2101      	movs	r1, #1
 8006a1e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a20:	2328      	movs	r3, #40	; 0x28
 8006a22:	18fb      	adds	r3, r7, r3
 8006a24:	781c      	ldrb	r4, [r3, #0]
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	68b9      	ldr	r1, [r7, #8]
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	0023      	movs	r3, r4
 8006a32:	f000 f83b 	bl	8006aac <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006a36:	697b      	ldr	r3, [r7, #20]
	}
 8006a38:	0018      	movs	r0, r3
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	b007      	add	sp, #28
 8006a3e:	bd90      	pop	{r4, r7, pc}

08006a40 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006a40:	b590      	push	{r4, r7, lr}
 8006a42:	b08b      	sub	sp, #44	; 0x2c
 8006a44:	af02      	add	r7, sp, #8
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	1dfb      	adds	r3, r7, #7
 8006a4c:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d101      	bne.n	8006a58 <xQueueGenericCreate+0x18>
 8006a54:	b672      	cpsid	i
 8006a56:	e7fe      	b.n	8006a56 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d102      	bne.n	8006a64 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	61fb      	str	r3, [r7, #28]
 8006a62:	e003      	b.n	8006a6c <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	4353      	muls	r3, r2
 8006a6a:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	3348      	adds	r3, #72	; 0x48
 8006a70:	0018      	movs	r0, r3
 8006a72:	f001 fc65 	bl	8008340 <pvPortMalloc>
 8006a76:	0003      	movs	r3, r0
 8006a78:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d010      	beq.n	8006aa2 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	3348      	adds	r3, #72	; 0x48
 8006a84:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	2246      	movs	r2, #70	; 0x46
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a8e:	1dfb      	adds	r3, r7, #7
 8006a90:	781c      	ldrb	r4, [r3, #0]
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	68b9      	ldr	r1, [r7, #8]
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	0023      	movs	r3, r4
 8006a9e:	f000 f805 	bl	8006aac <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006aa2:	69bb      	ldr	r3, [r7, #24]
	}
 8006aa4:	0018      	movs	r0, r3
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	b009      	add	sp, #36	; 0x24
 8006aaa:	bd90      	pop	{r4, r7, pc}

08006aac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
 8006ab8:	001a      	movs	r2, r3
 8006aba:	1cfb      	adds	r3, r7, #3
 8006abc:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d103      	bne.n	8006acc <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	69ba      	ldr	r2, [r7, #24]
 8006ac8:	601a      	str	r2, [r3, #0]
 8006aca:	e002      	b.n	8006ad2 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	0018      	movs	r0, r3
 8006ae4:	f7ff ff0d 	bl	8006902 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006ae8:	46c0      	nop			; (mov r8, r8)
 8006aea:	46bd      	mov	sp, r7
 8006aec:	b004      	add	sp, #16
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b08a      	sub	sp, #40	; 0x28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
 8006afc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006afe:	2300      	movs	r3, #0
 8006b00:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8006b06:	6a3b      	ldr	r3, [r7, #32]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d101      	bne.n	8006b10 <xQueueGenericSend+0x20>
 8006b0c:	b672      	cpsid	i
 8006b0e:	e7fe      	b.n	8006b0e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d103      	bne.n	8006b1e <xQueueGenericSend+0x2e>
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d101      	bne.n	8006b22 <xQueueGenericSend+0x32>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e000      	b.n	8006b24 <xQueueGenericSend+0x34>
 8006b22:	2300      	movs	r3, #0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d101      	bne.n	8006b2c <xQueueGenericSend+0x3c>
 8006b28:	b672      	cpsid	i
 8006b2a:	e7fe      	b.n	8006b2a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d103      	bne.n	8006b3a <xQueueGenericSend+0x4a>
 8006b32:	6a3b      	ldr	r3, [r7, #32]
 8006b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d101      	bne.n	8006b3e <xQueueGenericSend+0x4e>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e000      	b.n	8006b40 <xQueueGenericSend+0x50>
 8006b3e:	2300      	movs	r3, #0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <xQueueGenericSend+0x58>
 8006b44:	b672      	cpsid	i
 8006b46:	e7fe      	b.n	8006b46 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b48:	f001 f872 	bl	8007c30 <xTaskGetSchedulerState>
 8006b4c:	1e03      	subs	r3, r0, #0
 8006b4e:	d102      	bne.n	8006b56 <xQueueGenericSend+0x66>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <xQueueGenericSend+0x6a>
 8006b56:	2301      	movs	r3, #1
 8006b58:	e000      	b.n	8006b5c <xQueueGenericSend+0x6c>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <xQueueGenericSend+0x74>
 8006b60:	b672      	cpsid	i
 8006b62:	e7fe      	b.n	8006b62 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b64:	f001 fb54 	bl	8008210 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d302      	bcc.n	8006b7a <xQueueGenericSend+0x8a>
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d11e      	bne.n	8006bb8 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	68b9      	ldr	r1, [r7, #8]
 8006b7e:	6a3b      	ldr	r3, [r7, #32]
 8006b80:	0018      	movs	r0, r3
 8006b82:	f000 fa02 	bl	8006f8a <prvCopyDataToQueue>
 8006b86:	0003      	movs	r3, r0
 8006b88:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d009      	beq.n	8006ba6 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b92:	6a3b      	ldr	r3, [r7, #32]
 8006b94:	3324      	adds	r3, #36	; 0x24
 8006b96:	0018      	movs	r0, r3
 8006b98:	f000 feb2 	bl	8007900 <xTaskRemoveFromEventList>
 8006b9c:	1e03      	subs	r3, r0, #0
 8006b9e:	d007      	beq.n	8006bb0 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006ba0:	f001 fb26 	bl	80081f0 <vPortYield>
 8006ba4:	e004      	b.n	8006bb0 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006bac:	f001 fb20 	bl	80081f0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006bb0:	f001 fb40 	bl	8008234 <vPortExitCritical>
				return pdPASS;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e05b      	b.n	8006c70 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d103      	bne.n	8006bc6 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006bbe:	f001 fb39 	bl	8008234 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	e054      	b.n	8006c70 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d106      	bne.n	8006bda <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bcc:	2314      	movs	r3, #20
 8006bce:	18fb      	adds	r3, r7, r3
 8006bd0:	0018      	movs	r0, r3
 8006bd2:	f000 fef1 	bl	80079b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bda:	f001 fb2b 	bl	8008234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bde:	f000 fcd3 	bl	8007588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006be2:	f001 fb15 	bl	8008210 <vPortEnterCritical>
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	2244      	movs	r2, #68	; 0x44
 8006bea:	5c9b      	ldrb	r3, [r3, r2]
 8006bec:	b25b      	sxtb	r3, r3
 8006bee:	3301      	adds	r3, #1
 8006bf0:	d103      	bne.n	8006bfa <xQueueGenericSend+0x10a>
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	2244      	movs	r2, #68	; 0x44
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	5499      	strb	r1, [r3, r2]
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	2245      	movs	r2, #69	; 0x45
 8006bfe:	5c9b      	ldrb	r3, [r3, r2]
 8006c00:	b25b      	sxtb	r3, r3
 8006c02:	3301      	adds	r3, #1
 8006c04:	d103      	bne.n	8006c0e <xQueueGenericSend+0x11e>
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	2245      	movs	r2, #69	; 0x45
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	5499      	strb	r1, [r3, r2]
 8006c0e:	f001 fb11 	bl	8008234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c12:	1d3a      	adds	r2, r7, #4
 8006c14:	2314      	movs	r3, #20
 8006c16:	18fb      	adds	r3, r7, r3
 8006c18:	0011      	movs	r1, r2
 8006c1a:	0018      	movs	r0, r3
 8006c1c:	f000 fee0 	bl	80079e0 <xTaskCheckForTimeOut>
 8006c20:	1e03      	subs	r3, r0, #0
 8006c22:	d11e      	bne.n	8006c62 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	0018      	movs	r0, r3
 8006c28:	f000 fab4 	bl	8007194 <prvIsQueueFull>
 8006c2c:	1e03      	subs	r3, r0, #0
 8006c2e:	d011      	beq.n	8006c54 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c30:	6a3b      	ldr	r3, [r7, #32]
 8006c32:	3310      	adds	r3, #16
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	0011      	movs	r1, r2
 8006c38:	0018      	movs	r0, r3
 8006c3a:	f000 fe43 	bl	80078c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	0018      	movs	r0, r3
 8006c42:	f000 fa33 	bl	80070ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c46:	f000 fcab 	bl	80075a0 <xTaskResumeAll>
 8006c4a:	1e03      	subs	r3, r0, #0
 8006c4c:	d18a      	bne.n	8006b64 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8006c4e:	f001 facf 	bl	80081f0 <vPortYield>
 8006c52:	e787      	b.n	8006b64 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	0018      	movs	r0, r3
 8006c58:	f000 fa28 	bl	80070ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c5c:	f000 fca0 	bl	80075a0 <xTaskResumeAll>
 8006c60:	e780      	b.n	8006b64 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006c62:	6a3b      	ldr	r3, [r7, #32]
 8006c64:	0018      	movs	r0, r3
 8006c66:	f000 fa21 	bl	80070ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c6a:	f000 fc99 	bl	80075a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c6e:	2300      	movs	r3, #0
		}
	}
}
 8006c70:	0018      	movs	r0, r3
 8006c72:	46bd      	mov	sp, r7
 8006c74:	b00a      	add	sp, #40	; 0x28
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006c78:	b590      	push	{r4, r7, lr}
 8006c7a:	b089      	sub	sp, #36	; 0x24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]
 8006c84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <xQueueGenericSendFromISR+0x1c>
 8006c90:	b672      	cpsid	i
 8006c92:	e7fe      	b.n	8006c92 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d103      	bne.n	8006ca2 <xQueueGenericSendFromISR+0x2a>
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <xQueueGenericSendFromISR+0x2e>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e000      	b.n	8006ca8 <xQueueGenericSendFromISR+0x30>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d101      	bne.n	8006cb0 <xQueueGenericSendFromISR+0x38>
 8006cac:	b672      	cpsid	i
 8006cae:	e7fe      	b.n	8006cae <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d103      	bne.n	8006cbe <xQueueGenericSendFromISR+0x46>
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d101      	bne.n	8006cc2 <xQueueGenericSendFromISR+0x4a>
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e000      	b.n	8006cc4 <xQueueGenericSendFromISR+0x4c>
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <xQueueGenericSendFromISR+0x54>
 8006cc8:	b672      	cpsid	i
 8006cca:	e7fe      	b.n	8006cca <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ccc:	f001 faca 	bl	8008264 <ulSetInterruptMaskFromISR>
 8006cd0:	0003      	movs	r3, r0
 8006cd2:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d302      	bcc.n	8006ce6 <xQueueGenericSendFromISR+0x6e>
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d12e      	bne.n	8006d44 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ce6:	2413      	movs	r4, #19
 8006ce8:	193b      	adds	r3, r7, r4
 8006cea:	69ba      	ldr	r2, [r7, #24]
 8006cec:	2145      	movs	r1, #69	; 0x45
 8006cee:	5c52      	ldrb	r2, [r2, r1]
 8006cf0:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	68b9      	ldr	r1, [r7, #8]
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	0018      	movs	r0, r3
 8006cfa:	f000 f946 	bl	8006f8a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006cfe:	193b      	adds	r3, r7, r4
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	b25b      	sxtb	r3, r3
 8006d04:	3301      	adds	r3, #1
 8006d06:	d111      	bne.n	8006d2c <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d016      	beq.n	8006d3e <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	3324      	adds	r3, #36	; 0x24
 8006d14:	0018      	movs	r0, r3
 8006d16:	f000 fdf3 	bl	8007900 <xTaskRemoveFromEventList>
 8006d1a:	1e03      	subs	r3, r0, #0
 8006d1c:	d00f      	beq.n	8006d3e <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00c      	beq.n	8006d3e <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	601a      	str	r2, [r3, #0]
 8006d2a:	e008      	b.n	8006d3e <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d2c:	2313      	movs	r3, #19
 8006d2e:	18fb      	adds	r3, r7, r3
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	3301      	adds	r3, #1
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	b259      	sxtb	r1, r3
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	2245      	movs	r2, #69	; 0x45
 8006d3c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	61fb      	str	r3, [r7, #28]
		{
 8006d42:	e001      	b.n	8006d48 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d44:	2300      	movs	r3, #0
 8006d46:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	0018      	movs	r0, r3
 8006d4c:	f001 fa90 	bl	8008270 <vClearInterruptMaskFromISR>

	return xReturn;
 8006d50:	69fb      	ldr	r3, [r7, #28]
}
 8006d52:	0018      	movs	r0, r3
 8006d54:	46bd      	mov	sp, r7
 8006d56:	b009      	add	sp, #36	; 0x24
 8006d58:	bd90      	pop	{r4, r7, pc}

08006d5a <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b08a      	sub	sp, #40	; 0x28
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	60f8      	str	r0, [r7, #12]
 8006d62:	60b9      	str	r1, [r7, #8]
 8006d64:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d66:	2300      	movs	r3, #0
 8006d68:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <xQueueReceive+0x1e>
 8006d74:	b672      	cpsid	i
 8006d76:	e7fe      	b.n	8006d76 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d103      	bne.n	8006d86 <xQueueReceive+0x2c>
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <xQueueReceive+0x30>
 8006d86:	2301      	movs	r3, #1
 8006d88:	e000      	b.n	8006d8c <xQueueReceive+0x32>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <xQueueReceive+0x3a>
 8006d90:	b672      	cpsid	i
 8006d92:	e7fe      	b.n	8006d92 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d94:	f000 ff4c 	bl	8007c30 <xTaskGetSchedulerState>
 8006d98:	1e03      	subs	r3, r0, #0
 8006d9a:	d102      	bne.n	8006da2 <xQueueReceive+0x48>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <xQueueReceive+0x4c>
 8006da2:	2301      	movs	r3, #1
 8006da4:	e000      	b.n	8006da8 <xQueueReceive+0x4e>
 8006da6:	2300      	movs	r3, #0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d101      	bne.n	8006db0 <xQueueReceive+0x56>
 8006dac:	b672      	cpsid	i
 8006dae:	e7fe      	b.n	8006dae <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006db0:	f001 fa2e 	bl	8008210 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db8:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d01a      	beq.n	8006df6 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	6a3b      	ldr	r3, [r7, #32]
 8006dc4:	0011      	movs	r1, r2
 8006dc6:	0018      	movs	r0, r3
 8006dc8:	f000 f94a 	bl	8007060 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	1e5a      	subs	r2, r3, #1
 8006dd0:	6a3b      	ldr	r3, [r7, #32]
 8006dd2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dd4:	6a3b      	ldr	r3, [r7, #32]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d008      	beq.n	8006dee <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	3310      	adds	r3, #16
 8006de0:	0018      	movs	r0, r3
 8006de2:	f000 fd8d 	bl	8007900 <xTaskRemoveFromEventList>
 8006de6:	1e03      	subs	r3, r0, #0
 8006de8:	d001      	beq.n	8006dee <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006dea:	f001 fa01 	bl	80081f0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006dee:	f001 fa21 	bl	8008234 <vPortExitCritical>
				return pdPASS;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e062      	b.n	8006ebc <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d103      	bne.n	8006e04 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006dfc:	f001 fa1a 	bl	8008234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e00:	2300      	movs	r3, #0
 8006e02:	e05b      	b.n	8006ebc <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d106      	bne.n	8006e18 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e0a:	2314      	movs	r3, #20
 8006e0c:	18fb      	adds	r3, r7, r3
 8006e0e:	0018      	movs	r0, r3
 8006e10:	f000 fdd2 	bl	80079b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e14:	2301      	movs	r3, #1
 8006e16:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e18:	f001 fa0c 	bl	8008234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e1c:	f000 fbb4 	bl	8007588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e20:	f001 f9f6 	bl	8008210 <vPortEnterCritical>
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	2244      	movs	r2, #68	; 0x44
 8006e28:	5c9b      	ldrb	r3, [r3, r2]
 8006e2a:	b25b      	sxtb	r3, r3
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	d103      	bne.n	8006e38 <xQueueReceive+0xde>
 8006e30:	6a3b      	ldr	r3, [r7, #32]
 8006e32:	2244      	movs	r2, #68	; 0x44
 8006e34:	2100      	movs	r1, #0
 8006e36:	5499      	strb	r1, [r3, r2]
 8006e38:	6a3b      	ldr	r3, [r7, #32]
 8006e3a:	2245      	movs	r2, #69	; 0x45
 8006e3c:	5c9b      	ldrb	r3, [r3, r2]
 8006e3e:	b25b      	sxtb	r3, r3
 8006e40:	3301      	adds	r3, #1
 8006e42:	d103      	bne.n	8006e4c <xQueueReceive+0xf2>
 8006e44:	6a3b      	ldr	r3, [r7, #32]
 8006e46:	2245      	movs	r2, #69	; 0x45
 8006e48:	2100      	movs	r1, #0
 8006e4a:	5499      	strb	r1, [r3, r2]
 8006e4c:	f001 f9f2 	bl	8008234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e50:	1d3a      	adds	r2, r7, #4
 8006e52:	2314      	movs	r3, #20
 8006e54:	18fb      	adds	r3, r7, r3
 8006e56:	0011      	movs	r1, r2
 8006e58:	0018      	movs	r0, r3
 8006e5a:	f000 fdc1 	bl	80079e0 <xTaskCheckForTimeOut>
 8006e5e:	1e03      	subs	r3, r0, #0
 8006e60:	d11e      	bne.n	8006ea0 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	0018      	movs	r0, r3
 8006e66:	f000 f97f 	bl	8007168 <prvIsQueueEmpty>
 8006e6a:	1e03      	subs	r3, r0, #0
 8006e6c:	d011      	beq.n	8006e92 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e6e:	6a3b      	ldr	r3, [r7, #32]
 8006e70:	3324      	adds	r3, #36	; 0x24
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	0011      	movs	r1, r2
 8006e76:	0018      	movs	r0, r3
 8006e78:	f000 fd24 	bl	80078c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e7c:	6a3b      	ldr	r3, [r7, #32]
 8006e7e:	0018      	movs	r0, r3
 8006e80:	f000 f914 	bl	80070ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e84:	f000 fb8c 	bl	80075a0 <xTaskResumeAll>
 8006e88:	1e03      	subs	r3, r0, #0
 8006e8a:	d191      	bne.n	8006db0 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8006e8c:	f001 f9b0 	bl	80081f0 <vPortYield>
 8006e90:	e78e      	b.n	8006db0 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006e92:	6a3b      	ldr	r3, [r7, #32]
 8006e94:	0018      	movs	r0, r3
 8006e96:	f000 f909 	bl	80070ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e9a:	f000 fb81 	bl	80075a0 <xTaskResumeAll>
 8006e9e:	e787      	b.n	8006db0 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ea0:	6a3b      	ldr	r3, [r7, #32]
 8006ea2:	0018      	movs	r0, r3
 8006ea4:	f000 f902 	bl	80070ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ea8:	f000 fb7a 	bl	80075a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006eac:	6a3b      	ldr	r3, [r7, #32]
 8006eae:	0018      	movs	r0, r3
 8006eb0:	f000 f95a 	bl	8007168 <prvIsQueueEmpty>
 8006eb4:	1e03      	subs	r3, r0, #0
 8006eb6:	d100      	bne.n	8006eba <xQueueReceive+0x160>
 8006eb8:	e77a      	b.n	8006db0 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006eba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006ebc:	0018      	movs	r0, r3
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	b00a      	add	sp, #40	; 0x28
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006ec4:	b590      	push	{r4, r7, lr}
 8006ec6:	b08b      	sub	sp, #44	; 0x2c
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <xQueueReceiveFromISR+0x1a>
 8006eda:	b672      	cpsid	i
 8006edc:	e7fe      	b.n	8006edc <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d103      	bne.n	8006eec <xQueueReceiveFromISR+0x28>
 8006ee4:	6a3b      	ldr	r3, [r7, #32]
 8006ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d101      	bne.n	8006ef0 <xQueueReceiveFromISR+0x2c>
 8006eec:	2301      	movs	r3, #1
 8006eee:	e000      	b.n	8006ef2 <xQueueReceiveFromISR+0x2e>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <xQueueReceiveFromISR+0x36>
 8006ef6:	b672      	cpsid	i
 8006ef8:	e7fe      	b.n	8006ef8 <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006efa:	f001 f9b3 	bl	8008264 <ulSetInterruptMaskFromISR>
 8006efe:	0003      	movs	r3, r0
 8006f00:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f06:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d032      	beq.n	8006f74 <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006f0e:	2417      	movs	r4, #23
 8006f10:	193b      	adds	r3, r7, r4
 8006f12:	6a3a      	ldr	r2, [r7, #32]
 8006f14:	2144      	movs	r1, #68	; 0x44
 8006f16:	5c52      	ldrb	r2, [r2, r1]
 8006f18:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	0011      	movs	r1, r2
 8006f20:	0018      	movs	r0, r3
 8006f22:	f000 f89d 	bl	8007060 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	1e5a      	subs	r2, r3, #1
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006f2e:	193b      	adds	r3, r7, r4
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	b25b      	sxtb	r3, r3
 8006f34:	3301      	adds	r3, #1
 8006f36:	d111      	bne.n	8006f5c <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d016      	beq.n	8006f6e <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f40:	6a3b      	ldr	r3, [r7, #32]
 8006f42:	3310      	adds	r3, #16
 8006f44:	0018      	movs	r0, r3
 8006f46:	f000 fcdb 	bl	8007900 <xTaskRemoveFromEventList>
 8006f4a:	1e03      	subs	r3, r0, #0
 8006f4c:	d00f      	beq.n	8006f6e <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00c      	beq.n	8006f6e <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	e008      	b.n	8006f6e <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006f5c:	2317      	movs	r3, #23
 8006f5e:	18fb      	adds	r3, r7, r3
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	3301      	adds	r3, #1
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	b259      	sxtb	r1, r3
 8006f68:	6a3b      	ldr	r3, [r7, #32]
 8006f6a:	2244      	movs	r2, #68	; 0x44
 8006f6c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	627b      	str	r3, [r7, #36]	; 0x24
 8006f72:	e001      	b.n	8006f78 <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 8006f74:	2300      	movs	r3, #0
 8006f76:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	0018      	movs	r0, r3
 8006f7c:	f001 f978 	bl	8008270 <vClearInterruptMaskFromISR>

	return xReturn;
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f82:	0018      	movs	r0, r3
 8006f84:	46bd      	mov	sp, r7
 8006f86:	b00b      	add	sp, #44	; 0x2c
 8006f88:	bd90      	pop	{r4, r7, pc}

08006f8a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b086      	sub	sp, #24
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	60f8      	str	r0, [r7, #12]
 8006f92:	60b9      	str	r1, [r7, #8]
 8006f94:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006f96:	2300      	movs	r3, #0
 8006f98:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10e      	bne.n	8006fc6 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d14e      	bne.n	800704e <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	0018      	movs	r0, r3
 8006fb6:	f000 fe57 	bl	8007c68 <xTaskPriorityDisinherit>
 8006fba:	0003      	movs	r3, r0
 8006fbc:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	605a      	str	r2, [r3, #4]
 8006fc4:	e043      	b.n	800704e <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d119      	bne.n	8007000 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6898      	ldr	r0, [r3, #8]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	0019      	movs	r1, r3
 8006fd8:	f003 f924 	bl	800a224 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe4:	18d2      	adds	r2, r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	689a      	ldr	r2, [r3, #8]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d32b      	bcc.n	800704e <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	609a      	str	r2, [r3, #8]
 8006ffe:	e026      	b.n	800704e <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	68d8      	ldr	r0, [r3, #12]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	0019      	movs	r1, r3
 800700c:	f003 f90a 	bl	800a224 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	68da      	ldr	r2, [r3, #12]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007018:	425b      	negs	r3, r3
 800701a:	18d2      	adds	r2, r2, r3
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	68da      	ldr	r2, [r3, #12]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	429a      	cmp	r2, r3
 800702a:	d207      	bcs.n	800703c <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007034:	425b      	negs	r3, r3
 8007036:	18d2      	adds	r2, r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b02      	cmp	r3, #2
 8007040:	d105      	bne.n	800704e <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d002      	beq.n	800704e <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	3b01      	subs	r3, #1
 800704c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	1c5a      	adds	r2, r3, #1
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007056:	697b      	ldr	r3, [r7, #20]
}
 8007058:	0018      	movs	r0, r3
 800705a:	46bd      	mov	sp, r7
 800705c:	b006      	add	sp, #24
 800705e:	bd80      	pop	{r7, pc}

08007060 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706e:	2b00      	cmp	r3, #0
 8007070:	d018      	beq.n	80070a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68da      	ldr	r2, [r3, #12]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707a:	18d2      	adds	r2, r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	68da      	ldr	r2, [r3, #12]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	429a      	cmp	r2, r3
 800708a:	d303      	bcc.n	8007094 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68d9      	ldr	r1, [r3, #12]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	0018      	movs	r0, r3
 80070a0:	f003 f8c0 	bl	800a224 <memcpy>
	}
}
 80070a4:	46c0      	nop			; (mov r8, r8)
 80070a6:	46bd      	mov	sp, r7
 80070a8:	b002      	add	sp, #8
 80070aa:	bd80      	pop	{r7, pc}

080070ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80070b4:	f001 f8ac 	bl	8008210 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80070b8:	230f      	movs	r3, #15
 80070ba:	18fb      	adds	r3, r7, r3
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	2145      	movs	r1, #69	; 0x45
 80070c0:	5c52      	ldrb	r2, [r2, r1]
 80070c2:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070c4:	e013      	b.n	80070ee <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d016      	beq.n	80070fc <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	3324      	adds	r3, #36	; 0x24
 80070d2:	0018      	movs	r0, r3
 80070d4:	f000 fc14 	bl	8007900 <xTaskRemoveFromEventList>
 80070d8:	1e03      	subs	r3, r0, #0
 80070da:	d001      	beq.n	80070e0 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80070dc:	f000 fcd0 	bl	8007a80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80070e0:	210f      	movs	r1, #15
 80070e2:	187b      	adds	r3, r7, r1
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	3b01      	subs	r3, #1
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	187b      	adds	r3, r7, r1
 80070ec:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070ee:	230f      	movs	r3, #15
 80070f0:	18fb      	adds	r3, r7, r3
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	b25b      	sxtb	r3, r3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	dce5      	bgt.n	80070c6 <prvUnlockQueue+0x1a>
 80070fa:	e000      	b.n	80070fe <prvUnlockQueue+0x52>
					break;
 80070fc:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2245      	movs	r2, #69	; 0x45
 8007102:	21ff      	movs	r1, #255	; 0xff
 8007104:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8007106:	f001 f895 	bl	8008234 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800710a:	f001 f881 	bl	8008210 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800710e:	230e      	movs	r3, #14
 8007110:	18fb      	adds	r3, r7, r3
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	2144      	movs	r1, #68	; 0x44
 8007116:	5c52      	ldrb	r2, [r2, r1]
 8007118:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800711a:	e013      	b.n	8007144 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d016      	beq.n	8007152 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	3310      	adds	r3, #16
 8007128:	0018      	movs	r0, r3
 800712a:	f000 fbe9 	bl	8007900 <xTaskRemoveFromEventList>
 800712e:	1e03      	subs	r3, r0, #0
 8007130:	d001      	beq.n	8007136 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8007132:	f000 fca5 	bl	8007a80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007136:	210e      	movs	r1, #14
 8007138:	187b      	adds	r3, r7, r1
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	3b01      	subs	r3, #1
 800713e:	b2da      	uxtb	r2, r3
 8007140:	187b      	adds	r3, r7, r1
 8007142:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007144:	230e      	movs	r3, #14
 8007146:	18fb      	adds	r3, r7, r3
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	b25b      	sxtb	r3, r3
 800714c:	2b00      	cmp	r3, #0
 800714e:	dce5      	bgt.n	800711c <prvUnlockQueue+0x70>
 8007150:	e000      	b.n	8007154 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8007152:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2244      	movs	r2, #68	; 0x44
 8007158:	21ff      	movs	r1, #255	; 0xff
 800715a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800715c:	f001 f86a 	bl	8008234 <vPortExitCritical>
}
 8007160:	46c0      	nop			; (mov r8, r8)
 8007162:	46bd      	mov	sp, r7
 8007164:	b004      	add	sp, #16
 8007166:	bd80      	pop	{r7, pc}

08007168 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007170:	f001 f84e 	bl	8008210 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007178:	2b00      	cmp	r3, #0
 800717a:	d102      	bne.n	8007182 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800717c:	2301      	movs	r3, #1
 800717e:	60fb      	str	r3, [r7, #12]
 8007180:	e001      	b.n	8007186 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007182:	2300      	movs	r3, #0
 8007184:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007186:	f001 f855 	bl	8008234 <vPortExitCritical>

	return xReturn;
 800718a:	68fb      	ldr	r3, [r7, #12]
}
 800718c:	0018      	movs	r0, r3
 800718e:	46bd      	mov	sp, r7
 8007190:	b004      	add	sp, #16
 8007192:	bd80      	pop	{r7, pc}

08007194 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800719c:	f001 f838 	bl	8008210 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d102      	bne.n	80071b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80071ac:	2301      	movs	r3, #1
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	e001      	b.n	80071b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80071b2:	2300      	movs	r3, #0
 80071b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071b6:	f001 f83d 	bl	8008234 <vPortExitCritical>

	return xReturn;
 80071ba:	68fb      	ldr	r3, [r7, #12]
}
 80071bc:	0018      	movs	r0, r3
 80071be:	46bd      	mov	sp, r7
 80071c0:	b004      	add	sp, #16
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80071c4:	b590      	push	{r4, r7, lr}
 80071c6:	b08d      	sub	sp, #52	; 0x34
 80071c8:	af04      	add	r7, sp, #16
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
 80071d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80071d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d101      	bne.n	80071dc <xTaskCreateStatic+0x18>
 80071d8:	b672      	cpsid	i
 80071da:	e7fe      	b.n	80071da <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80071dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <xTaskCreateStatic+0x22>
 80071e2:	b672      	cpsid	i
 80071e4:	e7fe      	b.n	80071e4 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80071e6:	2354      	movs	r3, #84	; 0x54
 80071e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	2b54      	cmp	r3, #84	; 0x54
 80071ee:	d001      	beq.n	80071f4 <xTaskCreateStatic+0x30>
 80071f0:	b672      	cpsid	i
 80071f2:	e7fe      	b.n	80071f2 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80071f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d020      	beq.n	800723c <xTaskCreateStatic+0x78>
 80071fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d01d      	beq.n	800723c <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007202:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007208:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	2251      	movs	r2, #81	; 0x51
 800720e:	2102      	movs	r1, #2
 8007210:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007212:	683c      	ldr	r4, [r7, #0]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	68b9      	ldr	r1, [r7, #8]
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	2300      	movs	r3, #0
 800721c:	9303      	str	r3, [sp, #12]
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	9302      	str	r3, [sp, #8]
 8007222:	2318      	movs	r3, #24
 8007224:	18fb      	adds	r3, r7, r3
 8007226:	9301      	str	r3, [sp, #4]
 8007228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	0023      	movs	r3, r4
 800722e:	f000 f859 	bl	80072e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	0018      	movs	r0, r3
 8007236:	f000 f8cf 	bl	80073d8 <prvAddNewTaskToReadyList>
 800723a:	e001      	b.n	8007240 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800723c:	2300      	movs	r3, #0
 800723e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007240:	69bb      	ldr	r3, [r7, #24]
	}
 8007242:	0018      	movs	r0, r3
 8007244:	46bd      	mov	sp, r7
 8007246:	b009      	add	sp, #36	; 0x24
 8007248:	bd90      	pop	{r4, r7, pc}

0800724a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800724a:	b590      	push	{r4, r7, lr}
 800724c:	b08d      	sub	sp, #52	; 0x34
 800724e:	af04      	add	r7, sp, #16
 8007250:	60f8      	str	r0, [r7, #12]
 8007252:	60b9      	str	r1, [r7, #8]
 8007254:	603b      	str	r3, [r7, #0]
 8007256:	1dbb      	adds	r3, r7, #6
 8007258:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800725a:	1dbb      	adds	r3, r7, #6
 800725c:	881b      	ldrh	r3, [r3, #0]
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	0018      	movs	r0, r3
 8007262:	f001 f86d 	bl	8008340 <pvPortMalloc>
 8007266:	0003      	movs	r3, r0
 8007268:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d010      	beq.n	8007292 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007270:	2054      	movs	r0, #84	; 0x54
 8007272:	f001 f865 	bl	8008340 <pvPortMalloc>
 8007276:	0003      	movs	r3, r0
 8007278:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d003      	beq.n	8007288 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	631a      	str	r2, [r3, #48]	; 0x30
 8007286:	e006      	b.n	8007296 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	0018      	movs	r0, r3
 800728c:	f001 f8fe 	bl	800848c <vPortFree>
 8007290:	e001      	b.n	8007296 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007292:	2300      	movs	r3, #0
 8007294:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d01a      	beq.n	80072d2 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	2251      	movs	r2, #81	; 0x51
 80072a0:	2100      	movs	r1, #0
 80072a2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072a4:	1dbb      	adds	r3, r7, #6
 80072a6:	881a      	ldrh	r2, [r3, #0]
 80072a8:	683c      	ldr	r4, [r7, #0]
 80072aa:	68b9      	ldr	r1, [r7, #8]
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	2300      	movs	r3, #0
 80072b0:	9303      	str	r3, [sp, #12]
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	9302      	str	r3, [sp, #8]
 80072b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b8:	9301      	str	r3, [sp, #4]
 80072ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	0023      	movs	r3, r4
 80072c0:	f000 f810 	bl	80072e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	0018      	movs	r0, r3
 80072c8:	f000 f886 	bl	80073d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072cc:	2301      	movs	r3, #1
 80072ce:	61bb      	str	r3, [r7, #24]
 80072d0:	e002      	b.n	80072d8 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80072d2:	2301      	movs	r3, #1
 80072d4:	425b      	negs	r3, r3
 80072d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072d8:	69bb      	ldr	r3, [r7, #24]
	}
 80072da:	0018      	movs	r0, r3
 80072dc:	46bd      	mov	sp, r7
 80072de:	b009      	add	sp, #36	; 0x24
 80072e0:	bd90      	pop	{r4, r7, pc}
	...

080072e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
 80072f0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80072f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4936      	ldr	r1, [pc, #216]	; (80073d4 <prvInitialiseNewTask+0xf0>)
 80072fa:	468c      	mov	ip, r1
 80072fc:	4463      	add	r3, ip
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	18d3      	adds	r3, r2, r3
 8007302:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	2207      	movs	r2, #7
 8007308:	4393      	bics	r3, r2
 800730a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	2207      	movs	r2, #7
 8007310:	4013      	ands	r3, r2
 8007312:	d001      	beq.n	8007318 <prvInitialiseNewTask+0x34>
 8007314:	b672      	cpsid	i
 8007316:	e7fe      	b.n	8007316 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007318:	2300      	movs	r3, #0
 800731a:	617b      	str	r3, [r7, #20]
 800731c:	e013      	b.n	8007346 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	18d3      	adds	r3, r2, r3
 8007324:	7818      	ldrb	r0, [r3, #0]
 8007326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007328:	2134      	movs	r1, #52	; 0x34
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	18d3      	adds	r3, r2, r3
 800732e:	185b      	adds	r3, r3, r1
 8007330:	1c02      	adds	r2, r0, #0
 8007332:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	18d3      	adds	r3, r2, r3
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d006      	beq.n	800734e <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	3301      	adds	r3, #1
 8007344:	617b      	str	r3, [r7, #20]
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2b0f      	cmp	r3, #15
 800734a:	d9e8      	bls.n	800731e <prvInitialiseNewTask+0x3a>
 800734c:	e000      	b.n	8007350 <prvInitialiseNewTask+0x6c>
		{
			break;
 800734e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007352:	2243      	movs	r2, #67	; 0x43
 8007354:	2100      	movs	r1, #0
 8007356:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	2b06      	cmp	r3, #6
 800735c:	d901      	bls.n	8007362 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800735e:	2306      	movs	r3, #6
 8007360:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007364:	6a3a      	ldr	r2, [r7, #32]
 8007366:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736a:	6a3a      	ldr	r2, [r7, #32]
 800736c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800736e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007370:	2200      	movs	r2, #0
 8007372:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007376:	3304      	adds	r3, #4
 8007378:	0018      	movs	r0, r3
 800737a:	f7ff fa37 	bl	80067ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800737e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007380:	3318      	adds	r3, #24
 8007382:	0018      	movs	r0, r3
 8007384:	f7ff fa32 	bl	80067ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800738c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	2207      	movs	r2, #7
 8007392:	1ad2      	subs	r2, r2, r3
 8007394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007396:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800739c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800739e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a0:	2200      	movs	r2, #0
 80073a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a6:	2250      	movs	r2, #80	; 0x50
 80073a8:	2100      	movs	r1, #0
 80073aa:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	68f9      	ldr	r1, [r7, #12]
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	0018      	movs	r0, r3
 80073b4:	f000 fe92 	bl	80080dc <pxPortInitialiseStack>
 80073b8:	0002      	movs	r2, r0
 80073ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073bc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d002      	beq.n	80073ca <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80073c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073ca:	46c0      	nop			; (mov r8, r8)
 80073cc:	46bd      	mov	sp, r7
 80073ce:	b006      	add	sp, #24
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	46c0      	nop			; (mov r8, r8)
 80073d4:	3fffffff 	.word	0x3fffffff

080073d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80073e0:	f000 ff16 	bl	8008210 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80073e4:	4b28      	ldr	r3, [pc, #160]	; (8007488 <prvAddNewTaskToReadyList+0xb0>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	1c5a      	adds	r2, r3, #1
 80073ea:	4b27      	ldr	r3, [pc, #156]	; (8007488 <prvAddNewTaskToReadyList+0xb0>)
 80073ec:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80073ee:	4b27      	ldr	r3, [pc, #156]	; (800748c <prvAddNewTaskToReadyList+0xb4>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d109      	bne.n	800740a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80073f6:	4b25      	ldr	r3, [pc, #148]	; (800748c <prvAddNewTaskToReadyList+0xb4>)
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80073fc:	4b22      	ldr	r3, [pc, #136]	; (8007488 <prvAddNewTaskToReadyList+0xb0>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d110      	bne.n	8007426 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007404:	f000 fb56 	bl	8007ab4 <prvInitialiseTaskLists>
 8007408:	e00d      	b.n	8007426 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800740a:	4b21      	ldr	r3, [pc, #132]	; (8007490 <prvAddNewTaskToReadyList+0xb8>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d109      	bne.n	8007426 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007412:	4b1e      	ldr	r3, [pc, #120]	; (800748c <prvAddNewTaskToReadyList+0xb4>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741c:	429a      	cmp	r2, r3
 800741e:	d802      	bhi.n	8007426 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007420:	4b1a      	ldr	r3, [pc, #104]	; (800748c <prvAddNewTaskToReadyList+0xb4>)
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007426:	4b1b      	ldr	r3, [pc, #108]	; (8007494 <prvAddNewTaskToReadyList+0xbc>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	1c5a      	adds	r2, r3, #1
 800742c:	4b19      	ldr	r3, [pc, #100]	; (8007494 <prvAddNewTaskToReadyList+0xbc>)
 800742e:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007434:	4b18      	ldr	r3, [pc, #96]	; (8007498 <prvAddNewTaskToReadyList+0xc0>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	429a      	cmp	r2, r3
 800743a:	d903      	bls.n	8007444 <prvAddNewTaskToReadyList+0x6c>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007440:	4b15      	ldr	r3, [pc, #84]	; (8007498 <prvAddNewTaskToReadyList+0xc0>)
 8007442:	601a      	str	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007448:	0013      	movs	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	189b      	adds	r3, r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	4a12      	ldr	r2, [pc, #72]	; (800749c <prvAddNewTaskToReadyList+0xc4>)
 8007452:	189a      	adds	r2, r3, r2
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	3304      	adds	r3, #4
 8007458:	0019      	movs	r1, r3
 800745a:	0010      	movs	r0, r2
 800745c:	f7ff f9d1 	bl	8006802 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007460:	f000 fee8 	bl	8008234 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007464:	4b0a      	ldr	r3, [pc, #40]	; (8007490 <prvAddNewTaskToReadyList+0xb8>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d008      	beq.n	800747e <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800746c:	4b07      	ldr	r3, [pc, #28]	; (800748c <prvAddNewTaskToReadyList+0xb4>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007476:	429a      	cmp	r2, r3
 8007478:	d201      	bcs.n	800747e <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800747a:	f000 feb9 	bl	80081f0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800747e:	46c0      	nop			; (mov r8, r8)
 8007480:	46bd      	mov	sp, r7
 8007482:	b002      	add	sp, #8
 8007484:	bd80      	pop	{r7, pc}
 8007486:	46c0      	nop			; (mov r8, r8)
 8007488:	20000554 	.word	0x20000554
 800748c:	20000454 	.word	0x20000454
 8007490:	20000560 	.word	0x20000560
 8007494:	20000570 	.word	0x20000570
 8007498:	2000055c 	.word	0x2000055c
 800749c:	20000458 	.word	0x20000458

080074a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80074a8:	2300      	movs	r3, #0
 80074aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d010      	beq.n	80074d4 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80074b2:	4b0d      	ldr	r3, [pc, #52]	; (80074e8 <vTaskDelay+0x48>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d001      	beq.n	80074be <vTaskDelay+0x1e>
 80074ba:	b672      	cpsid	i
 80074bc:	e7fe      	b.n	80074bc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80074be:	f000 f863 	bl	8007588 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2100      	movs	r1, #0
 80074c6:	0018      	movs	r0, r3
 80074c8:	f000 fdb4 	bl	8008034 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80074cc:	f000 f868 	bl	80075a0 <xTaskResumeAll>
 80074d0:	0003      	movs	r3, r0
 80074d2:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d101      	bne.n	80074de <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80074da:	f000 fe89 	bl	80081f0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074de:	46c0      	nop			; (mov r8, r8)
 80074e0:	46bd      	mov	sp, r7
 80074e2:	b004      	add	sp, #16
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	46c0      	nop			; (mov r8, r8)
 80074e8:	2000057c 	.word	0x2000057c

080074ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80074ec:	b590      	push	{r4, r7, lr}
 80074ee:	b089      	sub	sp, #36	; 0x24
 80074f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80074f6:	2300      	movs	r3, #0
 80074f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80074fa:	003a      	movs	r2, r7
 80074fc:	1d39      	adds	r1, r7, #4
 80074fe:	2308      	movs	r3, #8
 8007500:	18fb      	adds	r3, r7, r3
 8007502:	0018      	movs	r0, r3
 8007504:	f001 f9a8 	bl	8008858 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007508:	683c      	ldr	r4, [r7, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	4918      	ldr	r1, [pc, #96]	; (8007570 <vTaskStartScheduler+0x84>)
 8007510:	4818      	ldr	r0, [pc, #96]	; (8007574 <vTaskStartScheduler+0x88>)
 8007512:	9202      	str	r2, [sp, #8]
 8007514:	9301      	str	r3, [sp, #4]
 8007516:	2300      	movs	r3, #0
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	2300      	movs	r3, #0
 800751c:	0022      	movs	r2, r4
 800751e:	f7ff fe51 	bl	80071c4 <xTaskCreateStatic>
 8007522:	0002      	movs	r2, r0
 8007524:	4b14      	ldr	r3, [pc, #80]	; (8007578 <vTaskStartScheduler+0x8c>)
 8007526:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007528:	4b13      	ldr	r3, [pc, #76]	; (8007578 <vTaskStartScheduler+0x8c>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007530:	2301      	movs	r3, #1
 8007532:	60fb      	str	r3, [r7, #12]
 8007534:	e001      	b.n	800753a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007536:	2300      	movs	r3, #0
 8007538:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d10d      	bne.n	800755c <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8007540:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007542:	4b0e      	ldr	r3, [pc, #56]	; (800757c <vTaskStartScheduler+0x90>)
 8007544:	2201      	movs	r2, #1
 8007546:	4252      	negs	r2, r2
 8007548:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800754a:	4b0d      	ldr	r3, [pc, #52]	; (8007580 <vTaskStartScheduler+0x94>)
 800754c:	2201      	movs	r2, #1
 800754e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007550:	4b0c      	ldr	r3, [pc, #48]	; (8007584 <vTaskStartScheduler+0x98>)
 8007552:	2200      	movs	r2, #0
 8007554:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007556:	f000 fe27 	bl	80081a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800755a:	e004      	b.n	8007566 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	3301      	adds	r3, #1
 8007560:	d101      	bne.n	8007566 <vTaskStartScheduler+0x7a>
 8007562:	b672      	cpsid	i
 8007564:	e7fe      	b.n	8007564 <vTaskStartScheduler+0x78>
}
 8007566:	46c0      	nop			; (mov r8, r8)
 8007568:	46bd      	mov	sp, r7
 800756a:	b005      	add	sp, #20
 800756c:	bd90      	pop	{r4, r7, pc}
 800756e:	46c0      	nop			; (mov r8, r8)
 8007570:	0800a368 	.word	0x0800a368
 8007574:	08007a95 	.word	0x08007a95
 8007578:	20000578 	.word	0x20000578
 800757c:	20000574 	.word	0x20000574
 8007580:	20000560 	.word	0x20000560
 8007584:	20000558 	.word	0x20000558

08007588 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007588:	b580      	push	{r7, lr}
 800758a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800758c:	4b03      	ldr	r3, [pc, #12]	; (800759c <vTaskSuspendAll+0x14>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	1c5a      	adds	r2, r3, #1
 8007592:	4b02      	ldr	r3, [pc, #8]	; (800759c <vTaskSuspendAll+0x14>)
 8007594:	601a      	str	r2, [r3, #0]
}
 8007596:	46c0      	nop			; (mov r8, r8)
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	2000057c 	.word	0x2000057c

080075a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80075a6:	2300      	movs	r3, #0
 80075a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80075aa:	2300      	movs	r3, #0
 80075ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80075ae:	4b3a      	ldr	r3, [pc, #232]	; (8007698 <xTaskResumeAll+0xf8>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <xTaskResumeAll+0x1a>
 80075b6:	b672      	cpsid	i
 80075b8:	e7fe      	b.n	80075b8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80075ba:	f000 fe29 	bl	8008210 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80075be:	4b36      	ldr	r3, [pc, #216]	; (8007698 <xTaskResumeAll+0xf8>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	1e5a      	subs	r2, r3, #1
 80075c4:	4b34      	ldr	r3, [pc, #208]	; (8007698 <xTaskResumeAll+0xf8>)
 80075c6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075c8:	4b33      	ldr	r3, [pc, #204]	; (8007698 <xTaskResumeAll+0xf8>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d15b      	bne.n	8007688 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80075d0:	4b32      	ldr	r3, [pc, #200]	; (800769c <xTaskResumeAll+0xfc>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d057      	beq.n	8007688 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075d8:	e02f      	b.n	800763a <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80075da:	4b31      	ldr	r3, [pc, #196]	; (80076a0 <xTaskResumeAll+0x100>)
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	3318      	adds	r3, #24
 80075e6:	0018      	movs	r0, r3
 80075e8:	f7ff f963 	bl	80068b2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	3304      	adds	r3, #4
 80075f0:	0018      	movs	r0, r3
 80075f2:	f7ff f95e 	bl	80068b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075fa:	4b2a      	ldr	r3, [pc, #168]	; (80076a4 <xTaskResumeAll+0x104>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d903      	bls.n	800760a <xTaskResumeAll+0x6a>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007606:	4b27      	ldr	r3, [pc, #156]	; (80076a4 <xTaskResumeAll+0x104>)
 8007608:	601a      	str	r2, [r3, #0]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800760e:	0013      	movs	r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	189b      	adds	r3, r3, r2
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	4a24      	ldr	r2, [pc, #144]	; (80076a8 <xTaskResumeAll+0x108>)
 8007618:	189a      	adds	r2, r3, r2
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	3304      	adds	r3, #4
 800761e:	0019      	movs	r1, r3
 8007620:	0010      	movs	r0, r2
 8007622:	f7ff f8ee 	bl	8006802 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800762a:	4b20      	ldr	r3, [pc, #128]	; (80076ac <xTaskResumeAll+0x10c>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007630:	429a      	cmp	r2, r3
 8007632:	d302      	bcc.n	800763a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8007634:	4b1e      	ldr	r3, [pc, #120]	; (80076b0 <xTaskResumeAll+0x110>)
 8007636:	2201      	movs	r2, #1
 8007638:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800763a:	4b19      	ldr	r3, [pc, #100]	; (80076a0 <xTaskResumeAll+0x100>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1cb      	bne.n	80075da <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d001      	beq.n	800764c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007648:	f000 face 	bl	8007be8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800764c:	4b19      	ldr	r3, [pc, #100]	; (80076b4 <xTaskResumeAll+0x114>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00f      	beq.n	8007678 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007658:	f000 f82e 	bl	80076b8 <xTaskIncrementTick>
 800765c:	1e03      	subs	r3, r0, #0
 800765e:	d002      	beq.n	8007666 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8007660:	4b13      	ldr	r3, [pc, #76]	; (80076b0 <xTaskResumeAll+0x110>)
 8007662:	2201      	movs	r2, #1
 8007664:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	3b01      	subs	r3, #1
 800766a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1f2      	bne.n	8007658 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8007672:	4b10      	ldr	r3, [pc, #64]	; (80076b4 <xTaskResumeAll+0x114>)
 8007674:	2200      	movs	r2, #0
 8007676:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007678:	4b0d      	ldr	r3, [pc, #52]	; (80076b0 <xTaskResumeAll+0x110>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d003      	beq.n	8007688 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007680:	2301      	movs	r3, #1
 8007682:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007684:	f000 fdb4 	bl	80081f0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007688:	f000 fdd4 	bl	8008234 <vPortExitCritical>

	return xAlreadyYielded;
 800768c:	68bb      	ldr	r3, [r7, #8]
}
 800768e:	0018      	movs	r0, r3
 8007690:	46bd      	mov	sp, r7
 8007692:	b004      	add	sp, #16
 8007694:	bd80      	pop	{r7, pc}
 8007696:	46c0      	nop			; (mov r8, r8)
 8007698:	2000057c 	.word	0x2000057c
 800769c:	20000554 	.word	0x20000554
 80076a0:	20000514 	.word	0x20000514
 80076a4:	2000055c 	.word	0x2000055c
 80076a8:	20000458 	.word	0x20000458
 80076ac:	20000454 	.word	0x20000454
 80076b0:	20000568 	.word	0x20000568
 80076b4:	20000564 	.word	0x20000564

080076b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80076be:	2300      	movs	r3, #0
 80076c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076c2:	4b4c      	ldr	r3, [pc, #304]	; (80077f4 <xTaskIncrementTick+0x13c>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d000      	beq.n	80076cc <xTaskIncrementTick+0x14>
 80076ca:	e083      	b.n	80077d4 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80076cc:	4b4a      	ldr	r3, [pc, #296]	; (80077f8 <xTaskIncrementTick+0x140>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3301      	adds	r3, #1
 80076d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80076d4:	4b48      	ldr	r3, [pc, #288]	; (80077f8 <xTaskIncrementTick+0x140>)
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d117      	bne.n	8007710 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80076e0:	4b46      	ldr	r3, [pc, #280]	; (80077fc <xTaskIncrementTick+0x144>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <xTaskIncrementTick+0x36>
 80076ea:	b672      	cpsid	i
 80076ec:	e7fe      	b.n	80076ec <xTaskIncrementTick+0x34>
 80076ee:	4b43      	ldr	r3, [pc, #268]	; (80077fc <xTaskIncrementTick+0x144>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	60fb      	str	r3, [r7, #12]
 80076f4:	4b42      	ldr	r3, [pc, #264]	; (8007800 <xTaskIncrementTick+0x148>)
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	4b40      	ldr	r3, [pc, #256]	; (80077fc <xTaskIncrementTick+0x144>)
 80076fa:	601a      	str	r2, [r3, #0]
 80076fc:	4b40      	ldr	r3, [pc, #256]	; (8007800 <xTaskIncrementTick+0x148>)
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	601a      	str	r2, [r3, #0]
 8007702:	4b40      	ldr	r3, [pc, #256]	; (8007804 <xTaskIncrementTick+0x14c>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	1c5a      	adds	r2, r3, #1
 8007708:	4b3e      	ldr	r3, [pc, #248]	; (8007804 <xTaskIncrementTick+0x14c>)
 800770a:	601a      	str	r2, [r3, #0]
 800770c:	f000 fa6c 	bl	8007be8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007710:	4b3d      	ldr	r3, [pc, #244]	; (8007808 <xTaskIncrementTick+0x150>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	429a      	cmp	r2, r3
 8007718:	d34e      	bcc.n	80077b8 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800771a:	4b38      	ldr	r3, [pc, #224]	; (80077fc <xTaskIncrementTick+0x144>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d101      	bne.n	8007728 <xTaskIncrementTick+0x70>
 8007724:	2301      	movs	r3, #1
 8007726:	e000      	b.n	800772a <xTaskIncrementTick+0x72>
 8007728:	2300      	movs	r3, #0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d004      	beq.n	8007738 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800772e:	4b36      	ldr	r3, [pc, #216]	; (8007808 <xTaskIncrementTick+0x150>)
 8007730:	2201      	movs	r2, #1
 8007732:	4252      	negs	r2, r2
 8007734:	601a      	str	r2, [r3, #0]
					break;
 8007736:	e03f      	b.n	80077b8 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007738:	4b30      	ldr	r3, [pc, #192]	; (80077fc <xTaskIncrementTick+0x144>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	429a      	cmp	r2, r3
 800774e:	d203      	bcs.n	8007758 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007750:	4b2d      	ldr	r3, [pc, #180]	; (8007808 <xTaskIncrementTick+0x150>)
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	601a      	str	r2, [r3, #0]
						break;
 8007756:	e02f      	b.n	80077b8 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	3304      	adds	r3, #4
 800775c:	0018      	movs	r0, r3
 800775e:	f7ff f8a8 	bl	80068b2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007766:	2b00      	cmp	r3, #0
 8007768:	d004      	beq.n	8007774 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	3318      	adds	r3, #24
 800776e:	0018      	movs	r0, r3
 8007770:	f7ff f89f 	bl	80068b2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007778:	4b24      	ldr	r3, [pc, #144]	; (800780c <xTaskIncrementTick+0x154>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	429a      	cmp	r2, r3
 800777e:	d903      	bls.n	8007788 <xTaskIncrementTick+0xd0>
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007784:	4b21      	ldr	r3, [pc, #132]	; (800780c <xTaskIncrementTick+0x154>)
 8007786:	601a      	str	r2, [r3, #0]
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800778c:	0013      	movs	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	189b      	adds	r3, r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	4a1e      	ldr	r2, [pc, #120]	; (8007810 <xTaskIncrementTick+0x158>)
 8007796:	189a      	adds	r2, r3, r2
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	3304      	adds	r3, #4
 800779c:	0019      	movs	r1, r3
 800779e:	0010      	movs	r0, r2
 80077a0:	f7ff f82f 	bl	8006802 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a8:	4b1a      	ldr	r3, [pc, #104]	; (8007814 <xTaskIncrementTick+0x15c>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d3b3      	bcc.n	800771a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80077b2:	2301      	movs	r3, #1
 80077b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077b6:	e7b0      	b.n	800771a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80077b8:	4b16      	ldr	r3, [pc, #88]	; (8007814 <xTaskIncrementTick+0x15c>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077be:	4914      	ldr	r1, [pc, #80]	; (8007810 <xTaskIncrementTick+0x158>)
 80077c0:	0013      	movs	r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	189b      	adds	r3, r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	585b      	ldr	r3, [r3, r1]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d907      	bls.n	80077de <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80077ce:	2301      	movs	r3, #1
 80077d0:	617b      	str	r3, [r7, #20]
 80077d2:	e004      	b.n	80077de <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80077d4:	4b10      	ldr	r3, [pc, #64]	; (8007818 <xTaskIncrementTick+0x160>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	1c5a      	adds	r2, r3, #1
 80077da:	4b0f      	ldr	r3, [pc, #60]	; (8007818 <xTaskIncrementTick+0x160>)
 80077dc:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80077de:	4b0f      	ldr	r3, [pc, #60]	; (800781c <xTaskIncrementTick+0x164>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 80077e6:	2301      	movs	r3, #1
 80077e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80077ea:	697b      	ldr	r3, [r7, #20]
}
 80077ec:	0018      	movs	r0, r3
 80077ee:	46bd      	mov	sp, r7
 80077f0:	b006      	add	sp, #24
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	2000057c 	.word	0x2000057c
 80077f8:	20000558 	.word	0x20000558
 80077fc:	2000050c 	.word	0x2000050c
 8007800:	20000510 	.word	0x20000510
 8007804:	2000056c 	.word	0x2000056c
 8007808:	20000574 	.word	0x20000574
 800780c:	2000055c 	.word	0x2000055c
 8007810:	20000458 	.word	0x20000458
 8007814:	20000454 	.word	0x20000454
 8007818:	20000564 	.word	0x20000564
 800781c:	20000568 	.word	0x20000568

08007820 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007826:	4b22      	ldr	r3, [pc, #136]	; (80078b0 <vTaskSwitchContext+0x90>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800782e:	4b21      	ldr	r3, [pc, #132]	; (80078b4 <vTaskSwitchContext+0x94>)
 8007830:	2201      	movs	r2, #1
 8007832:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007834:	e037      	b.n	80078a6 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8007836:	4b1f      	ldr	r3, [pc, #124]	; (80078b4 <vTaskSwitchContext+0x94>)
 8007838:	2200      	movs	r2, #0
 800783a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800783c:	4b1e      	ldr	r3, [pc, #120]	; (80078b8 <vTaskSwitchContext+0x98>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	607b      	str	r3, [r7, #4]
 8007842:	e007      	b.n	8007854 <vTaskSwitchContext+0x34>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d101      	bne.n	800784e <vTaskSwitchContext+0x2e>
 800784a:	b672      	cpsid	i
 800784c:	e7fe      	b.n	800784c <vTaskSwitchContext+0x2c>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	3b01      	subs	r3, #1
 8007852:	607b      	str	r3, [r7, #4]
 8007854:	4919      	ldr	r1, [pc, #100]	; (80078bc <vTaskSwitchContext+0x9c>)
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	0013      	movs	r3, r2
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	189b      	adds	r3, r3, r2
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	585b      	ldr	r3, [r3, r1]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d0ee      	beq.n	8007844 <vTaskSwitchContext+0x24>
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	0013      	movs	r3, r2
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	189b      	adds	r3, r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	4a12      	ldr	r2, [pc, #72]	; (80078bc <vTaskSwitchContext+0x9c>)
 8007872:	189b      	adds	r3, r3, r2
 8007874:	603b      	str	r3, [r7, #0]
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	605a      	str	r2, [r3, #4]
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	685a      	ldr	r2, [r3, #4]
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	3308      	adds	r3, #8
 8007888:	429a      	cmp	r2, r3
 800788a:	d104      	bne.n	8007896 <vTaskSwitchContext+0x76>
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	685a      	ldr	r2, [r3, #4]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	605a      	str	r2, [r3, #4]
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	68da      	ldr	r2, [r3, #12]
 800789c:	4b08      	ldr	r3, [pc, #32]	; (80078c0 <vTaskSwitchContext+0xa0>)
 800789e:	601a      	str	r2, [r3, #0]
 80078a0:	4b05      	ldr	r3, [pc, #20]	; (80078b8 <vTaskSwitchContext+0x98>)
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	601a      	str	r2, [r3, #0]
}
 80078a6:	46c0      	nop			; (mov r8, r8)
 80078a8:	46bd      	mov	sp, r7
 80078aa:	b002      	add	sp, #8
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	46c0      	nop			; (mov r8, r8)
 80078b0:	2000057c 	.word	0x2000057c
 80078b4:	20000568 	.word	0x20000568
 80078b8:	2000055c 	.word	0x2000055c
 80078bc:	20000458 	.word	0x20000458
 80078c0:	20000454 	.word	0x20000454

080078c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d101      	bne.n	80078d8 <vTaskPlaceOnEventList+0x14>
 80078d4:	b672      	cpsid	i
 80078d6:	e7fe      	b.n	80078d6 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078d8:	4b08      	ldr	r3, [pc, #32]	; (80078fc <vTaskPlaceOnEventList+0x38>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3318      	adds	r3, #24
 80078de:	001a      	movs	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	0011      	movs	r1, r2
 80078e4:	0018      	movs	r0, r3
 80078e6:	f7fe ffae 	bl	8006846 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2101      	movs	r1, #1
 80078ee:	0018      	movs	r0, r3
 80078f0:	f000 fba0 	bl	8008034 <prvAddCurrentTaskToDelayedList>
}
 80078f4:	46c0      	nop			; (mov r8, r8)
 80078f6:	46bd      	mov	sp, r7
 80078f8:	b002      	add	sp, #8
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	20000454 	.word	0x20000454

08007900 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <xTaskRemoveFromEventList+0x1a>
 8007916:	b672      	cpsid	i
 8007918:	e7fe      	b.n	8007918 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	3318      	adds	r3, #24
 800791e:	0018      	movs	r0, r3
 8007920:	f7fe ffc7 	bl	80068b2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007924:	4b1e      	ldr	r3, [pc, #120]	; (80079a0 <xTaskRemoveFromEventList+0xa0>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d11d      	bne.n	8007968 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	3304      	adds	r3, #4
 8007930:	0018      	movs	r0, r3
 8007932:	f7fe ffbe 	bl	80068b2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800793a:	4b1a      	ldr	r3, [pc, #104]	; (80079a4 <xTaskRemoveFromEventList+0xa4>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	429a      	cmp	r2, r3
 8007940:	d903      	bls.n	800794a <xTaskRemoveFromEventList+0x4a>
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007946:	4b17      	ldr	r3, [pc, #92]	; (80079a4 <xTaskRemoveFromEventList+0xa4>)
 8007948:	601a      	str	r2, [r3, #0]
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794e:	0013      	movs	r3, r2
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	189b      	adds	r3, r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4a14      	ldr	r2, [pc, #80]	; (80079a8 <xTaskRemoveFromEventList+0xa8>)
 8007958:	189a      	adds	r2, r3, r2
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	3304      	adds	r3, #4
 800795e:	0019      	movs	r1, r3
 8007960:	0010      	movs	r0, r2
 8007962:	f7fe ff4e 	bl	8006802 <vListInsertEnd>
 8007966:	e007      	b.n	8007978 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	3318      	adds	r3, #24
 800796c:	001a      	movs	r2, r3
 800796e:	4b0f      	ldr	r3, [pc, #60]	; (80079ac <xTaskRemoveFromEventList+0xac>)
 8007970:	0011      	movs	r1, r2
 8007972:	0018      	movs	r0, r3
 8007974:	f7fe ff45 	bl	8006802 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800797c:	4b0c      	ldr	r3, [pc, #48]	; (80079b0 <xTaskRemoveFromEventList+0xb0>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007982:	429a      	cmp	r2, r3
 8007984:	d905      	bls.n	8007992 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007986:	2301      	movs	r3, #1
 8007988:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800798a:	4b0a      	ldr	r3, [pc, #40]	; (80079b4 <xTaskRemoveFromEventList+0xb4>)
 800798c:	2201      	movs	r2, #1
 800798e:	601a      	str	r2, [r3, #0]
 8007990:	e001      	b.n	8007996 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8007992:	2300      	movs	r3, #0
 8007994:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007996:	68fb      	ldr	r3, [r7, #12]
}
 8007998:	0018      	movs	r0, r3
 800799a:	46bd      	mov	sp, r7
 800799c:	b004      	add	sp, #16
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	2000057c 	.word	0x2000057c
 80079a4:	2000055c 	.word	0x2000055c
 80079a8:	20000458 	.word	0x20000458
 80079ac:	20000514 	.word	0x20000514
 80079b0:	20000454 	.word	0x20000454
 80079b4:	20000568 	.word	0x20000568

080079b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80079c0:	4b05      	ldr	r3, [pc, #20]	; (80079d8 <vTaskInternalSetTimeOutState+0x20>)
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80079c8:	4b04      	ldr	r3, [pc, #16]	; (80079dc <vTaskInternalSetTimeOutState+0x24>)
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	605a      	str	r2, [r3, #4]
}
 80079d0:	46c0      	nop			; (mov r8, r8)
 80079d2:	46bd      	mov	sp, r7
 80079d4:	b002      	add	sp, #8
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	2000056c 	.word	0x2000056c
 80079dc:	20000558 	.word	0x20000558

080079e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d101      	bne.n	80079f4 <xTaskCheckForTimeOut+0x14>
 80079f0:	b672      	cpsid	i
 80079f2:	e7fe      	b.n	80079f2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d101      	bne.n	80079fe <xTaskCheckForTimeOut+0x1e>
 80079fa:	b672      	cpsid	i
 80079fc:	e7fe      	b.n	80079fc <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80079fe:	f000 fc07 	bl	8008210 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007a02:	4b1d      	ldr	r3, [pc, #116]	; (8007a78 <xTaskCheckForTimeOut+0x98>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3301      	adds	r3, #1
 8007a18:	d102      	bne.n	8007a20 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	617b      	str	r3, [r7, #20]
 8007a1e:	e024      	b.n	8007a6a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	4b15      	ldr	r3, [pc, #84]	; (8007a7c <xTaskCheckForTimeOut+0x9c>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d007      	beq.n	8007a3c <xTaskCheckForTimeOut+0x5c>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d302      	bcc.n	8007a3c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a36:	2301      	movs	r3, #1
 8007a38:	617b      	str	r3, [r7, #20]
 8007a3a:	e016      	b.n	8007a6a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d20c      	bcs.n	8007a60 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	1ad2      	subs	r2, r2, r3
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	0018      	movs	r0, r3
 8007a56:	f7ff ffaf 	bl	80079b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	617b      	str	r3, [r7, #20]
 8007a5e:	e004      	b.n	8007a6a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	2200      	movs	r2, #0
 8007a64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a66:	2301      	movs	r3, #1
 8007a68:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8007a6a:	f000 fbe3 	bl	8008234 <vPortExitCritical>

	return xReturn;
 8007a6e:	697b      	ldr	r3, [r7, #20]
}
 8007a70:	0018      	movs	r0, r3
 8007a72:	46bd      	mov	sp, r7
 8007a74:	b006      	add	sp, #24
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	20000558 	.word	0x20000558
 8007a7c:	2000056c 	.word	0x2000056c

08007a80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a84:	4b02      	ldr	r3, [pc, #8]	; (8007a90 <vTaskMissedYield+0x10>)
 8007a86:	2201      	movs	r2, #1
 8007a88:	601a      	str	r2, [r3, #0]
}
 8007a8a:	46c0      	nop			; (mov r8, r8)
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	20000568 	.word	0x20000568

08007a94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a9c:	f000 f84e 	bl	8007b3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007aa0:	4b03      	ldr	r3, [pc, #12]	; (8007ab0 <prvIdleTask+0x1c>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d9f9      	bls.n	8007a9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007aa8:	f000 fba2 	bl	80081f0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8007aac:	e7f6      	b.n	8007a9c <prvIdleTask+0x8>
 8007aae:	46c0      	nop			; (mov r8, r8)
 8007ab0:	20000458 	.word	0x20000458

08007ab4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007aba:	2300      	movs	r3, #0
 8007abc:	607b      	str	r3, [r7, #4]
 8007abe:	e00c      	b.n	8007ada <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	0013      	movs	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	189b      	adds	r3, r3, r2
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	4a14      	ldr	r2, [pc, #80]	; (8007b1c <prvInitialiseTaskLists+0x68>)
 8007acc:	189b      	adds	r3, r3, r2
 8007ace:	0018      	movs	r0, r3
 8007ad0:	f7fe fe6e 	bl	80067b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	607b      	str	r3, [r7, #4]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b06      	cmp	r3, #6
 8007ade:	d9ef      	bls.n	8007ac0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ae0:	4b0f      	ldr	r3, [pc, #60]	; (8007b20 <prvInitialiseTaskLists+0x6c>)
 8007ae2:	0018      	movs	r0, r3
 8007ae4:	f7fe fe64 	bl	80067b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ae8:	4b0e      	ldr	r3, [pc, #56]	; (8007b24 <prvInitialiseTaskLists+0x70>)
 8007aea:	0018      	movs	r0, r3
 8007aec:	f7fe fe60 	bl	80067b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007af0:	4b0d      	ldr	r3, [pc, #52]	; (8007b28 <prvInitialiseTaskLists+0x74>)
 8007af2:	0018      	movs	r0, r3
 8007af4:	f7fe fe5c 	bl	80067b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007af8:	4b0c      	ldr	r3, [pc, #48]	; (8007b2c <prvInitialiseTaskLists+0x78>)
 8007afa:	0018      	movs	r0, r3
 8007afc:	f7fe fe58 	bl	80067b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b00:	4b0b      	ldr	r3, [pc, #44]	; (8007b30 <prvInitialiseTaskLists+0x7c>)
 8007b02:	0018      	movs	r0, r3
 8007b04:	f7fe fe54 	bl	80067b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b08:	4b0a      	ldr	r3, [pc, #40]	; (8007b34 <prvInitialiseTaskLists+0x80>)
 8007b0a:	4a05      	ldr	r2, [pc, #20]	; (8007b20 <prvInitialiseTaskLists+0x6c>)
 8007b0c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b0e:	4b0a      	ldr	r3, [pc, #40]	; (8007b38 <prvInitialiseTaskLists+0x84>)
 8007b10:	4a04      	ldr	r2, [pc, #16]	; (8007b24 <prvInitialiseTaskLists+0x70>)
 8007b12:	601a      	str	r2, [r3, #0]
}
 8007b14:	46c0      	nop			; (mov r8, r8)
 8007b16:	46bd      	mov	sp, r7
 8007b18:	b002      	add	sp, #8
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	20000458 	.word	0x20000458
 8007b20:	200004e4 	.word	0x200004e4
 8007b24:	200004f8 	.word	0x200004f8
 8007b28:	20000514 	.word	0x20000514
 8007b2c:	20000528 	.word	0x20000528
 8007b30:	20000540 	.word	0x20000540
 8007b34:	2000050c 	.word	0x2000050c
 8007b38:	20000510 	.word	0x20000510

08007b3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b42:	e01a      	b.n	8007b7a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8007b44:	f000 fb64 	bl	8008210 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007b48:	4b10      	ldr	r3, [pc, #64]	; (8007b8c <prvCheckTasksWaitingTermination+0x50>)
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	3304      	adds	r3, #4
 8007b54:	0018      	movs	r0, r3
 8007b56:	f7fe feac 	bl	80068b2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b5a:	4b0d      	ldr	r3, [pc, #52]	; (8007b90 <prvCheckTasksWaitingTermination+0x54>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	1e5a      	subs	r2, r3, #1
 8007b60:	4b0b      	ldr	r3, [pc, #44]	; (8007b90 <prvCheckTasksWaitingTermination+0x54>)
 8007b62:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b64:	4b0b      	ldr	r3, [pc, #44]	; (8007b94 <prvCheckTasksWaitingTermination+0x58>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	1e5a      	subs	r2, r3, #1
 8007b6a:	4b0a      	ldr	r3, [pc, #40]	; (8007b94 <prvCheckTasksWaitingTermination+0x58>)
 8007b6c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8007b6e:	f000 fb61 	bl	8008234 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	0018      	movs	r0, r3
 8007b76:	f000 f80f 	bl	8007b98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b7a:	4b06      	ldr	r3, [pc, #24]	; (8007b94 <prvCheckTasksWaitingTermination+0x58>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1e0      	bne.n	8007b44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b82:	46c0      	nop			; (mov r8, r8)
 8007b84:	46bd      	mov	sp, r7
 8007b86:	b002      	add	sp, #8
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	46c0      	nop			; (mov r8, r8)
 8007b8c:	20000528 	.word	0x20000528
 8007b90:	20000554 	.word	0x20000554
 8007b94:	2000053c 	.word	0x2000053c

08007b98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2251      	movs	r2, #81	; 0x51
 8007ba4:	5c9b      	ldrb	r3, [r3, r2]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d109      	bne.n	8007bbe <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bae:	0018      	movs	r0, r3
 8007bb0:	f000 fc6c 	bl	800848c <vPortFree>
				vPortFree( pxTCB );
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	0018      	movs	r0, r3
 8007bb8:	f000 fc68 	bl	800848c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007bbc:	e010      	b.n	8007be0 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2251      	movs	r2, #81	; 0x51
 8007bc2:	5c9b      	ldrb	r3, [r3, r2]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d104      	bne.n	8007bd2 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	0018      	movs	r0, r3
 8007bcc:	f000 fc5e 	bl	800848c <vPortFree>
	}
 8007bd0:	e006      	b.n	8007be0 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2251      	movs	r2, #81	; 0x51
 8007bd6:	5c9b      	ldrb	r3, [r3, r2]
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d001      	beq.n	8007be0 <prvDeleteTCB+0x48>
 8007bdc:	b672      	cpsid	i
 8007bde:	e7fe      	b.n	8007bde <prvDeleteTCB+0x46>
	}
 8007be0:	46c0      	nop			; (mov r8, r8)
 8007be2:	46bd      	mov	sp, r7
 8007be4:	b002      	add	sp, #8
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bee:	4b0e      	ldr	r3, [pc, #56]	; (8007c28 <prvResetNextTaskUnblockTime+0x40>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d101      	bne.n	8007bfc <prvResetNextTaskUnblockTime+0x14>
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e000      	b.n	8007bfe <prvResetNextTaskUnblockTime+0x16>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d004      	beq.n	8007c0c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c02:	4b0a      	ldr	r3, [pc, #40]	; (8007c2c <prvResetNextTaskUnblockTime+0x44>)
 8007c04:	2201      	movs	r2, #1
 8007c06:	4252      	negs	r2, r2
 8007c08:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c0a:	e008      	b.n	8007c1e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007c0c:	4b06      	ldr	r3, [pc, #24]	; (8007c28 <prvResetNextTaskUnblockTime+0x40>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685a      	ldr	r2, [r3, #4]
 8007c1a:	4b04      	ldr	r3, [pc, #16]	; (8007c2c <prvResetNextTaskUnblockTime+0x44>)
 8007c1c:	601a      	str	r2, [r3, #0]
}
 8007c1e:	46c0      	nop			; (mov r8, r8)
 8007c20:	46bd      	mov	sp, r7
 8007c22:	b002      	add	sp, #8
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	46c0      	nop			; (mov r8, r8)
 8007c28:	2000050c 	.word	0x2000050c
 8007c2c:	20000574 	.word	0x20000574

08007c30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c36:	4b0a      	ldr	r3, [pc, #40]	; (8007c60 <xTaskGetSchedulerState+0x30>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d102      	bne.n	8007c44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	607b      	str	r3, [r7, #4]
 8007c42:	e008      	b.n	8007c56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c44:	4b07      	ldr	r3, [pc, #28]	; (8007c64 <xTaskGetSchedulerState+0x34>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d102      	bne.n	8007c52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c4c:	2302      	movs	r3, #2
 8007c4e:	607b      	str	r3, [r7, #4]
 8007c50:	e001      	b.n	8007c56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c52:	2300      	movs	r3, #0
 8007c54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c56:	687b      	ldr	r3, [r7, #4]
	}
 8007c58:	0018      	movs	r0, r3
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	b002      	add	sp, #8
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	20000560 	.word	0x20000560
 8007c64:	2000057c 	.word	0x2000057c

08007c68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007c74:	2300      	movs	r3, #0
 8007c76:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d044      	beq.n	8007d08 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c7e:	4b25      	ldr	r3, [pc, #148]	; (8007d14 <xTaskPriorityDisinherit+0xac>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d001      	beq.n	8007c8c <xTaskPriorityDisinherit+0x24>
 8007c88:	b672      	cpsid	i
 8007c8a:	e7fe      	b.n	8007c8a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d101      	bne.n	8007c98 <xTaskPriorityDisinherit+0x30>
 8007c94:	b672      	cpsid	i
 8007c96:	e7fe      	b.n	8007c96 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c9c:	1e5a      	subs	r2, r3, #1
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d02c      	beq.n	8007d08 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d128      	bne.n	8007d08 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	3304      	adds	r3, #4
 8007cba:	0018      	movs	r0, r3
 8007cbc:	f7fe fdf9 	bl	80068b2 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ccc:	2207      	movs	r2, #7
 8007cce:	1ad2      	subs	r2, r2, r3
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd8:	4b0f      	ldr	r3, [pc, #60]	; (8007d18 <xTaskPriorityDisinherit+0xb0>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d903      	bls.n	8007ce8 <xTaskPriorityDisinherit+0x80>
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce4:	4b0c      	ldr	r3, [pc, #48]	; (8007d18 <xTaskPriorityDisinherit+0xb0>)
 8007ce6:	601a      	str	r2, [r3, #0]
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cec:	0013      	movs	r3, r2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	189b      	adds	r3, r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4a09      	ldr	r2, [pc, #36]	; (8007d1c <xTaskPriorityDisinherit+0xb4>)
 8007cf6:	189a      	adds	r2, r3, r2
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	3304      	adds	r3, #4
 8007cfc:	0019      	movs	r1, r3
 8007cfe:	0010      	movs	r0, r2
 8007d00:	f7fe fd7f 	bl	8006802 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d04:	2301      	movs	r3, #1
 8007d06:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d08:	68fb      	ldr	r3, [r7, #12]
	}
 8007d0a:	0018      	movs	r0, r3
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	b004      	add	sp, #16
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	46c0      	nop			; (mov r8, r8)
 8007d14:	20000454 	.word	0x20000454
 8007d18:	2000055c 	.word	0x2000055c
 8007d1c:	20000458 	.word	0x20000458

08007d20 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
 8007d2c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007d2e:	f000 fa6f 	bl	8008210 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007d32:	4b24      	ldr	r3, [pc, #144]	; (8007dc4 <xTaskNotifyWait+0xa4>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2250      	movs	r2, #80	; 0x50
 8007d38:	5c9b      	ldrb	r3, [r3, r2]
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d015      	beq.n	8007d6c <xTaskNotifyWait+0x4c>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007d40:	4b20      	ldr	r3, [pc, #128]	; (8007dc4 <xTaskNotifyWait+0xa4>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d46:	68f9      	ldr	r1, [r7, #12]
 8007d48:	43c9      	mvns	r1, r1
 8007d4a:	400a      	ands	r2, r1
 8007d4c:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007d4e:	4b1d      	ldr	r3, [pc, #116]	; (8007dc4 <xTaskNotifyWait+0xa4>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2250      	movs	r2, #80	; 0x50
 8007d54:	2101      	movs	r1, #1
 8007d56:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d006      	beq.n	8007d6c <xTaskNotifyWait+0x4c>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2101      	movs	r1, #1
 8007d62:	0018      	movs	r0, r3
 8007d64:	f000 f966 	bl	8008034 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007d68:	f000 fa42 	bl	80081f0 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007d6c:	f000 fa62 	bl	8008234 <vPortExitCritical>

		taskENTER_CRITICAL();
 8007d70:	f000 fa4e 	bl	8008210 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d004      	beq.n	8007d84 <xTaskNotifyWait+0x64>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007d7a:	4b12      	ldr	r3, [pc, #72]	; (8007dc4 <xTaskNotifyWait+0xa4>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007d84:	4b0f      	ldr	r3, [pc, #60]	; (8007dc4 <xTaskNotifyWait+0xa4>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2250      	movs	r2, #80	; 0x50
 8007d8a:	5c9b      	ldrb	r3, [r3, r2]
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d002      	beq.n	8007d98 <xTaskNotifyWait+0x78>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8007d92:	2300      	movs	r3, #0
 8007d94:	617b      	str	r3, [r7, #20]
 8007d96:	e008      	b.n	8007daa <xTaskNotifyWait+0x8a>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8007d98:	4b0a      	ldr	r3, [pc, #40]	; (8007dc4 <xTaskNotifyWait+0xa4>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d9e:	68b9      	ldr	r1, [r7, #8]
 8007da0:	43c9      	mvns	r1, r1
 8007da2:	400a      	ands	r2, r1
 8007da4:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8007da6:	2301      	movs	r3, #1
 8007da8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007daa:	4b06      	ldr	r3, [pc, #24]	; (8007dc4 <xTaskNotifyWait+0xa4>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2250      	movs	r2, #80	; 0x50
 8007db0:	2100      	movs	r1, #0
 8007db2:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
 8007db4:	f000 fa3e 	bl	8008234 <vPortExitCritical>

		return xReturn;
 8007db8:	697b      	ldr	r3, [r7, #20]
	}
 8007dba:	0018      	movs	r0, r3
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	b006      	add	sp, #24
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	46c0      	nop			; (mov r8, r8)
 8007dc4:	20000454 	.word	0x20000454

08007dc8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b088      	sub	sp, #32
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	603b      	str	r3, [r7, #0]
 8007dd4:	1dfb      	adds	r3, r7, #7
 8007dd6:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	61fb      	str	r3, [r7, #28]
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d101      	bne.n	8007de6 <xTaskGenericNotify+0x1e>
 8007de2:	b672      	cpsid	i
 8007de4:	e7fe      	b.n	8007de4 <xTaskGenericNotify+0x1c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
 8007dea:	f000 fa11 	bl	8008210 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d003      	beq.n	8007dfc <xTaskGenericNotify+0x34>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007dfc:	2317      	movs	r3, #23
 8007dfe:	18fb      	adds	r3, r7, r3
 8007e00:	69ba      	ldr	r2, [r7, #24]
 8007e02:	2150      	movs	r1, #80	; 0x50
 8007e04:	5c52      	ldrb	r2, [r2, r1]
 8007e06:	701a      	strb	r2, [r3, #0]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	2250      	movs	r2, #80	; 0x50
 8007e0c:	2102      	movs	r1, #2
 8007e0e:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 8007e10:	1dfb      	adds	r3, r7, #7
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	2b04      	cmp	r3, #4
 8007e16:	d822      	bhi.n	8007e5e <xTaskGenericNotify+0x96>
 8007e18:	009a      	lsls	r2, r3, #2
 8007e1a:	4b2d      	ldr	r3, [pc, #180]	; (8007ed0 <xTaskGenericNotify+0x108>)
 8007e1c:	18d3      	adds	r3, r2, r3
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	431a      	orrs	r2, r3
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8007e2e:	e016      	b.n	8007e5e <xTaskGenericNotify+0x96>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e34:	1c5a      	adds	r2, r3, #1
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8007e3a:	e010      	b.n	8007e5e <xTaskGenericNotify+0x96>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8007e42:	e00c      	b.n	8007e5e <xTaskGenericNotify+0x96>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007e44:	2317      	movs	r3, #23
 8007e46:	18fb      	adds	r3, r7, r3
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d003      	beq.n	8007e56 <xTaskGenericNotify+0x8e>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	68ba      	ldr	r2, [r7, #8]
 8007e52:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007e54:	e003      	b.n	8007e5e <xTaskGenericNotify+0x96>
						xReturn = pdFAIL;
 8007e56:	2300      	movs	r3, #0
 8007e58:	61fb      	str	r3, [r7, #28]
					break;
 8007e5a:	e000      	b.n	8007e5e <xTaskGenericNotify+0x96>

				case eNoAction:
					/* The task is being notified without its notify value being
					updated. */
					break;
 8007e5c:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007e5e:	2317      	movs	r3, #23
 8007e60:	18fb      	adds	r3, r7, r3
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d12b      	bne.n	8007ec0 <xTaskGenericNotify+0xf8>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	3304      	adds	r3, #4
 8007e6c:	0018      	movs	r0, r3
 8007e6e:	f7fe fd20 	bl	80068b2 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e76:	4b17      	ldr	r3, [pc, #92]	; (8007ed4 <xTaskGenericNotify+0x10c>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d903      	bls.n	8007e86 <xTaskGenericNotify+0xbe>
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e82:	4b14      	ldr	r3, [pc, #80]	; (8007ed4 <xTaskGenericNotify+0x10c>)
 8007e84:	601a      	str	r2, [r3, #0]
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e8a:	0013      	movs	r3, r2
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	189b      	adds	r3, r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4a11      	ldr	r2, [pc, #68]	; (8007ed8 <xTaskGenericNotify+0x110>)
 8007e94:	189a      	adds	r2, r3, r2
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	3304      	adds	r3, #4
 8007e9a:	0019      	movs	r1, r3
 8007e9c:	0010      	movs	r0, r2
 8007e9e:	f7fe fcb0 	bl	8006802 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d001      	beq.n	8007eae <xTaskGenericNotify+0xe6>
 8007eaa:	b672      	cpsid	i
 8007eac:	e7fe      	b.n	8007eac <xTaskGenericNotify+0xe4>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb2:	4b0a      	ldr	r3, [pc, #40]	; (8007edc <xTaskGenericNotify+0x114>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d901      	bls.n	8007ec0 <xTaskGenericNotify+0xf8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007ebc:	f000 f998 	bl	80081f0 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007ec0:	f000 f9b8 	bl	8008234 <vPortExitCritical>

		return xReturn;
 8007ec4:	69fb      	ldr	r3, [r7, #28]
	}
 8007ec6:	0018      	movs	r0, r3
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	b008      	add	sp, #32
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	46c0      	nop			; (mov r8, r8)
 8007ed0:	0800a500 	.word	0x0800a500
 8007ed4:	2000055c 	.word	0x2000055c
 8007ed8:	20000458 	.word	0x20000458
 8007edc:	20000454 	.word	0x20000454

08007ee0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b088      	sub	sp, #32
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	603b      	str	r3, [r7, #0]
 8007eec:	1dfb      	adds	r3, r7, #7
 8007eee:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	61fb      	str	r3, [r7, #28]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <xTaskGenericNotifyFromISR+0x1e>
 8007efa:	b672      	cpsid	i
 8007efc:	e7fe      	b.n	8007efc <xTaskGenericNotifyFromISR+0x1c>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	61bb      	str	r3, [r7, #24]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f02:	f000 f9af 	bl	8008264 <ulSetInterruptMaskFromISR>
 8007f06:	0003      	movs	r3, r0
 8007f08:	617b      	str	r3, [r7, #20]
		{
			if( pulPreviousNotificationValue != NULL )
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d003      	beq.n	8007f18 <xTaskGenericNotifyFromISR+0x38>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007f18:	2313      	movs	r3, #19
 8007f1a:	18fb      	adds	r3, r7, r3
 8007f1c:	69ba      	ldr	r2, [r7, #24]
 8007f1e:	2150      	movs	r1, #80	; 0x50
 8007f20:	5c52      	ldrb	r2, [r2, r1]
 8007f22:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	2250      	movs	r2, #80	; 0x50
 8007f28:	2102      	movs	r1, #2
 8007f2a:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 8007f2c:	1dfb      	adds	r3, r7, #7
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	2b04      	cmp	r3, #4
 8007f32:	d822      	bhi.n	8007f7a <xTaskGenericNotifyFromISR+0x9a>
 8007f34:	009a      	lsls	r2, r3, #2
 8007f36:	4b38      	ldr	r3, [pc, #224]	; (8008018 <xTaskGenericNotifyFromISR+0x138>)
 8007f38:	18d3      	adds	r3, r2, r3
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	431a      	orrs	r2, r3
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8007f4a:	e016      	b.n	8007f7a <xTaskGenericNotifyFromISR+0x9a>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f50:	1c5a      	adds	r2, r3, #1
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8007f56:	e010      	b.n	8007f7a <xTaskGenericNotifyFromISR+0x9a>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8007f5e:	e00c      	b.n	8007f7a <xTaskGenericNotifyFromISR+0x9a>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007f60:	2313      	movs	r3, #19
 8007f62:	18fb      	adds	r3, r7, r3
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d003      	beq.n	8007f72 <xTaskGenericNotifyFromISR+0x92>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	68ba      	ldr	r2, [r7, #8]
 8007f6e:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007f70:	e003      	b.n	8007f7a <xTaskGenericNotifyFromISR+0x9a>
						xReturn = pdFAIL;
 8007f72:	2300      	movs	r3, #0
 8007f74:	61fb      	str	r3, [r7, #28]
					break;
 8007f76:	e000      	b.n	8007f7a <xTaskGenericNotifyFromISR+0x9a>

				case eNoAction :
					/* The task is being notified without its notify value being
					updated. */
					break;
 8007f78:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007f7a:	2313      	movs	r3, #19
 8007f7c:	18fb      	adds	r3, r7, r3
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d140      	bne.n	8008006 <xTaskGenericNotifyFromISR+0x126>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <xTaskGenericNotifyFromISR+0xb0>
 8007f8c:	b672      	cpsid	i
 8007f8e:	e7fe      	b.n	8007f8e <xTaskGenericNotifyFromISR+0xae>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f90:	4b22      	ldr	r3, [pc, #136]	; (800801c <xTaskGenericNotifyFromISR+0x13c>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d11d      	bne.n	8007fd4 <xTaskGenericNotifyFromISR+0xf4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	3304      	adds	r3, #4
 8007f9c:	0018      	movs	r0, r3
 8007f9e:	f7fe fc88 	bl	80068b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa6:	4b1e      	ldr	r3, [pc, #120]	; (8008020 <xTaskGenericNotifyFromISR+0x140>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d903      	bls.n	8007fb6 <xTaskGenericNotifyFromISR+0xd6>
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb2:	4b1b      	ldr	r3, [pc, #108]	; (8008020 <xTaskGenericNotifyFromISR+0x140>)
 8007fb4:	601a      	str	r2, [r3, #0]
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fba:	0013      	movs	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	189b      	adds	r3, r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4a18      	ldr	r2, [pc, #96]	; (8008024 <xTaskGenericNotifyFromISR+0x144>)
 8007fc4:	189a      	adds	r2, r3, r2
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	3304      	adds	r3, #4
 8007fca:	0019      	movs	r1, r3
 8007fcc:	0010      	movs	r0, r2
 8007fce:	f7fe fc18 	bl	8006802 <vListInsertEnd>
 8007fd2:	e007      	b.n	8007fe4 <xTaskGenericNotifyFromISR+0x104>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	3318      	adds	r3, #24
 8007fd8:	001a      	movs	r2, r3
 8007fda:	4b13      	ldr	r3, [pc, #76]	; (8008028 <xTaskGenericNotifyFromISR+0x148>)
 8007fdc:	0011      	movs	r1, r2
 8007fde:	0018      	movs	r0, r3
 8007fe0:	f7fe fc0f 	bl	8006802 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe8:	4b10      	ldr	r3, [pc, #64]	; (800802c <xTaskGenericNotifyFromISR+0x14c>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d909      	bls.n	8008006 <xTaskGenericNotifyFromISR+0x126>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d003      	beq.n	8008000 <xTaskGenericNotifyFromISR+0x120>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	601a      	str	r2, [r3, #0]
 8007ffe:	e002      	b.n	8008006 <xTaskGenericNotifyFromISR+0x126>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8008000:	4b0b      	ldr	r3, [pc, #44]	; (8008030 <xTaskGenericNotifyFromISR+0x150>)
 8008002:	2201      	movs	r2, #1
 8008004:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	0018      	movs	r0, r3
 800800a:	f000 f931 	bl	8008270 <vClearInterruptMaskFromISR>

		return xReturn;
 800800e:	69fb      	ldr	r3, [r7, #28]
	}
 8008010:	0018      	movs	r0, r3
 8008012:	46bd      	mov	sp, r7
 8008014:	b008      	add	sp, #32
 8008016:	bd80      	pop	{r7, pc}
 8008018:	0800a514 	.word	0x0800a514
 800801c:	2000057c 	.word	0x2000057c
 8008020:	2000055c 	.word	0x2000055c
 8008024:	20000458 	.word	0x20000458
 8008028:	20000514 	.word	0x20000514
 800802c:	20000454 	.word	0x20000454
 8008030:	20000568 	.word	0x20000568

08008034 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800803e:	4b21      	ldr	r3, [pc, #132]	; (80080c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008044:	4b20      	ldr	r3, [pc, #128]	; (80080c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	3304      	adds	r3, #4
 800804a:	0018      	movs	r0, r3
 800804c:	f7fe fc31 	bl	80068b2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	3301      	adds	r3, #1
 8008054:	d10b      	bne.n	800806e <prvAddCurrentTaskToDelayedList+0x3a>
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d008      	beq.n	800806e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800805c:	4b1a      	ldr	r3, [pc, #104]	; (80080c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	1d1a      	adds	r2, r3, #4
 8008062:	4b1a      	ldr	r3, [pc, #104]	; (80080cc <prvAddCurrentTaskToDelayedList+0x98>)
 8008064:	0011      	movs	r1, r2
 8008066:	0018      	movs	r0, r3
 8008068:	f7fe fbcb 	bl	8006802 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800806c:	e026      	b.n	80080bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	18d3      	adds	r3, r2, r3
 8008074:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008076:	4b14      	ldr	r3, [pc, #80]	; (80080c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68ba      	ldr	r2, [r7, #8]
 800807c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	429a      	cmp	r2, r3
 8008084:	d209      	bcs.n	800809a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008086:	4b12      	ldr	r3, [pc, #72]	; (80080d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	4b0f      	ldr	r3, [pc, #60]	; (80080c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	3304      	adds	r3, #4
 8008090:	0019      	movs	r1, r3
 8008092:	0010      	movs	r0, r2
 8008094:	f7fe fbd7 	bl	8006846 <vListInsert>
}
 8008098:	e010      	b.n	80080bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800809a:	4b0e      	ldr	r3, [pc, #56]	; (80080d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	4b0a      	ldr	r3, [pc, #40]	; (80080c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	3304      	adds	r3, #4
 80080a4:	0019      	movs	r1, r3
 80080a6:	0010      	movs	r0, r2
 80080a8:	f7fe fbcd 	bl	8006846 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80080ac:	4b0a      	ldr	r3, [pc, #40]	; (80080d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d202      	bcs.n	80080bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80080b6:	4b08      	ldr	r3, [pc, #32]	; (80080d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80080b8:	68ba      	ldr	r2, [r7, #8]
 80080ba:	601a      	str	r2, [r3, #0]
}
 80080bc:	46c0      	nop			; (mov r8, r8)
 80080be:	46bd      	mov	sp, r7
 80080c0:	b004      	add	sp, #16
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	20000558 	.word	0x20000558
 80080c8:	20000454 	.word	0x20000454
 80080cc:	20000540 	.word	0x20000540
 80080d0:	20000510 	.word	0x20000510
 80080d4:	2000050c 	.word	0x2000050c
 80080d8:	20000574 	.word	0x20000574

080080dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	3b04      	subs	r3, #4
 80080ec:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2280      	movs	r2, #128	; 0x80
 80080f2:	0452      	lsls	r2, r2, #17
 80080f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	3b04      	subs	r3, #4
 80080fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	3b04      	subs	r3, #4
 8008106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008108:	4a08      	ldr	r2, [pc, #32]	; (800812c <pxPortInitialiseStack+0x50>)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	3b14      	subs	r3, #20
 8008112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	3b20      	subs	r3, #32
 800811e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008120:	68fb      	ldr	r3, [r7, #12]
}
 8008122:	0018      	movs	r0, r3
 8008124:	46bd      	mov	sp, r7
 8008126:	b004      	add	sp, #16
 8008128:	bd80      	pop	{r7, pc}
 800812a:	46c0      	nop			; (mov r8, r8)
 800812c:	08008131 	.word	0x08008131

08008130 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008136:	2300      	movs	r3, #0
 8008138:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800813a:	4b07      	ldr	r3, [pc, #28]	; (8008158 <prvTaskExitError+0x28>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	3301      	adds	r3, #1
 8008140:	d001      	beq.n	8008146 <prvTaskExitError+0x16>
 8008142:	b672      	cpsid	i
 8008144:	e7fe      	b.n	8008144 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8008146:	b672      	cpsid	i
	while( ulDummy == 0 )
 8008148:	46c0      	nop			; (mov r8, r8)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d0fc      	beq.n	800814a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008150:	46c0      	nop			; (mov r8, r8)
 8008152:	46bd      	mov	sp, r7
 8008154:	b002      	add	sp, #8
 8008156:	bd80      	pop	{r7, pc}
 8008158:	20000000 	.word	0x20000000

0800815c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800815c:	b580      	push	{r7, lr}
 800815e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8008160:	46c0      	nop			; (mov r8, r8)
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
	...

08008170 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8008170:	4a0b      	ldr	r2, [pc, #44]	; (80081a0 <pxCurrentTCBConst2>)
 8008172:	6813      	ldr	r3, [r2, #0]
 8008174:	6818      	ldr	r0, [r3, #0]
 8008176:	3020      	adds	r0, #32
 8008178:	f380 8809 	msr	PSP, r0
 800817c:	2002      	movs	r0, #2
 800817e:	f380 8814 	msr	CONTROL, r0
 8008182:	f3bf 8f6f 	isb	sy
 8008186:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8008188:	46ae      	mov	lr, r5
 800818a:	bc08      	pop	{r3}
 800818c:	bc04      	pop	{r2}
 800818e:	b662      	cpsie	i
 8008190:	4718      	bx	r3
 8008192:	46c0      	nop			; (mov r8, r8)
 8008194:	46c0      	nop			; (mov r8, r8)
 8008196:	46c0      	nop			; (mov r8, r8)
 8008198:	46c0      	nop			; (mov r8, r8)
 800819a:	46c0      	nop			; (mov r8, r8)
 800819c:	46c0      	nop			; (mov r8, r8)
 800819e:	46c0      	nop			; (mov r8, r8)

080081a0 <pxCurrentTCBConst2>:
 80081a0:	20000454 	.word	0x20000454
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80081a4:	46c0      	nop			; (mov r8, r8)
 80081a6:	46c0      	nop			; (mov r8, r8)

080081a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80081ac:	4b0e      	ldr	r3, [pc, #56]	; (80081e8 <xPortStartScheduler+0x40>)
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	4b0d      	ldr	r3, [pc, #52]	; (80081e8 <xPortStartScheduler+0x40>)
 80081b2:	21ff      	movs	r1, #255	; 0xff
 80081b4:	0409      	lsls	r1, r1, #16
 80081b6:	430a      	orrs	r2, r1
 80081b8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80081ba:	4b0b      	ldr	r3, [pc, #44]	; (80081e8 <xPortStartScheduler+0x40>)
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	4b0a      	ldr	r3, [pc, #40]	; (80081e8 <xPortStartScheduler+0x40>)
 80081c0:	21ff      	movs	r1, #255	; 0xff
 80081c2:	0609      	lsls	r1, r1, #24
 80081c4:	430a      	orrs	r2, r1
 80081c6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80081c8:	f000 f898 	bl	80082fc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80081cc:	4b07      	ldr	r3, [pc, #28]	; (80081ec <xPortStartScheduler+0x44>)
 80081ce:	2200      	movs	r2, #0
 80081d0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80081d2:	f7ff ffcd 	bl	8008170 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80081d6:	f7ff fb23 	bl	8007820 <vTaskSwitchContext>
	prvTaskExitError();
 80081da:	f7ff ffa9 	bl	8008130 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	0018      	movs	r0, r3
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	46c0      	nop			; (mov r8, r8)
 80081e8:	e000ed20 	.word	0xe000ed20
 80081ec:	20000000 	.word	0x20000000

080081f0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80081f4:	4b05      	ldr	r3, [pc, #20]	; (800820c <vPortYield+0x1c>)
 80081f6:	2280      	movs	r2, #128	; 0x80
 80081f8:	0552      	lsls	r2, r2, #21
 80081fa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80081fc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008200:	f3bf 8f6f 	isb	sy
}
 8008204:	46c0      	nop			; (mov r8, r8)
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	46c0      	nop			; (mov r8, r8)
 800820c:	e000ed04 	.word	0xe000ed04

08008210 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8008214:	b672      	cpsid	i
    uxCriticalNesting++;
 8008216:	4b06      	ldr	r3, [pc, #24]	; (8008230 <vPortEnterCritical+0x20>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	1c5a      	adds	r2, r3, #1
 800821c:	4b04      	ldr	r3, [pc, #16]	; (8008230 <vPortEnterCritical+0x20>)
 800821e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8008220:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008224:	f3bf 8f6f 	isb	sy
}
 8008228:	46c0      	nop			; (mov r8, r8)
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	46c0      	nop			; (mov r8, r8)
 8008230:	20000000 	.word	0x20000000

08008234 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008234:	b580      	push	{r7, lr}
 8008236:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008238:	4b09      	ldr	r3, [pc, #36]	; (8008260 <vPortExitCritical+0x2c>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d101      	bne.n	8008244 <vPortExitCritical+0x10>
 8008240:	b672      	cpsid	i
 8008242:	e7fe      	b.n	8008242 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8008244:	4b06      	ldr	r3, [pc, #24]	; (8008260 <vPortExitCritical+0x2c>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	1e5a      	subs	r2, r3, #1
 800824a:	4b05      	ldr	r3, [pc, #20]	; (8008260 <vPortExitCritical+0x2c>)
 800824c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800824e:	4b04      	ldr	r3, [pc, #16]	; (8008260 <vPortExitCritical+0x2c>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d100      	bne.n	8008258 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8008256:	b662      	cpsie	i
    }
}
 8008258:	46c0      	nop			; (mov r8, r8)
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	46c0      	nop			; (mov r8, r8)
 8008260:	20000000 	.word	0x20000000

08008264 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8008264:	f3ef 8010 	mrs	r0, PRIMASK
 8008268:	b672      	cpsid	i
 800826a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800826c:	46c0      	nop			; (mov r8, r8)
 800826e:	0018      	movs	r0, r3

08008270 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8008270:	f380 8810 	msr	PRIMASK, r0
 8008274:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8008276:	46c0      	nop			; (mov r8, r8)
	...

08008280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008280:	f3ef 8009 	mrs	r0, PSP
 8008284:	4b0e      	ldr	r3, [pc, #56]	; (80082c0 <pxCurrentTCBConst>)
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	3820      	subs	r0, #32
 800828a:	6010      	str	r0, [r2, #0]
 800828c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800828e:	4644      	mov	r4, r8
 8008290:	464d      	mov	r5, r9
 8008292:	4656      	mov	r6, sl
 8008294:	465f      	mov	r7, fp
 8008296:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8008298:	b508      	push	{r3, lr}
 800829a:	b672      	cpsid	i
 800829c:	f7ff fac0 	bl	8007820 <vTaskSwitchContext>
 80082a0:	b662      	cpsie	i
 80082a2:	bc0c      	pop	{r2, r3}
 80082a4:	6811      	ldr	r1, [r2, #0]
 80082a6:	6808      	ldr	r0, [r1, #0]
 80082a8:	3010      	adds	r0, #16
 80082aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80082ac:	46a0      	mov	r8, r4
 80082ae:	46a9      	mov	r9, r5
 80082b0:	46b2      	mov	sl, r6
 80082b2:	46bb      	mov	fp, r7
 80082b4:	f380 8809 	msr	PSP, r0
 80082b8:	3820      	subs	r0, #32
 80082ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80082bc:	4718      	bx	r3
 80082be:	46c0      	nop			; (mov r8, r8)

080082c0 <pxCurrentTCBConst>:
 80082c0:	20000454 	.word	0x20000454
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80082c4:	46c0      	nop			; (mov r8, r8)
 80082c6:	46c0      	nop			; (mov r8, r8)

080082c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80082ce:	f7ff ffc9 	bl	8008264 <ulSetInterruptMaskFromISR>
 80082d2:	0003      	movs	r3, r0
 80082d4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80082d6:	f7ff f9ef 	bl	80076b8 <xTaskIncrementTick>
 80082da:	1e03      	subs	r3, r0, #0
 80082dc:	d003      	beq.n	80082e6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80082de:	4b06      	ldr	r3, [pc, #24]	; (80082f8 <SysTick_Handler+0x30>)
 80082e0:	2280      	movs	r2, #128	; 0x80
 80082e2:	0552      	lsls	r2, r2, #21
 80082e4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	0018      	movs	r0, r3
 80082ea:	f7ff ffc1 	bl	8008270 <vClearInterruptMaskFromISR>
}
 80082ee:	46c0      	nop			; (mov r8, r8)
 80082f0:	46bd      	mov	sp, r7
 80082f2:	b002      	add	sp, #8
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	46c0      	nop			; (mov r8, r8)
 80082f8:	e000ed04 	.word	0xe000ed04

080082fc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8008300:	4b0b      	ldr	r3, [pc, #44]	; (8008330 <prvSetupTimerInterrupt+0x34>)
 8008302:	2200      	movs	r2, #0
 8008304:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8008306:	4b0b      	ldr	r3, [pc, #44]	; (8008334 <prvSetupTimerInterrupt+0x38>)
 8008308:	2200      	movs	r2, #0
 800830a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800830c:	4b0a      	ldr	r3, [pc, #40]	; (8008338 <prvSetupTimerInterrupt+0x3c>)
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	23fa      	movs	r3, #250	; 0xfa
 8008312:	0099      	lsls	r1, r3, #2
 8008314:	0010      	movs	r0, r2
 8008316:	f7f7 fef7 	bl	8000108 <__udivsi3>
 800831a:	0003      	movs	r3, r0
 800831c:	001a      	movs	r2, r3
 800831e:	4b07      	ldr	r3, [pc, #28]	; (800833c <prvSetupTimerInterrupt+0x40>)
 8008320:	3a01      	subs	r2, #1
 8008322:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8008324:	4b02      	ldr	r3, [pc, #8]	; (8008330 <prvSetupTimerInterrupt+0x34>)
 8008326:	2207      	movs	r2, #7
 8008328:	601a      	str	r2, [r3, #0]
}
 800832a:	46c0      	nop			; (mov r8, r8)
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	e000e010 	.word	0xe000e010
 8008334:	e000e018 	.word	0xe000e018
 8008338:	20000004 	.word	0x20000004
 800833c:	e000e014 	.word	0xe000e014

08008340 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008348:	2300      	movs	r3, #0
 800834a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800834c:	f7ff f91c 	bl	8007588 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008350:	4b49      	ldr	r3, [pc, #292]	; (8008478 <pvPortMalloc+0x138>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d101      	bne.n	800835c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008358:	f000 f8e0 	bl	800851c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800835c:	4b47      	ldr	r3, [pc, #284]	; (800847c <pvPortMalloc+0x13c>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	4013      	ands	r3, r2
 8008364:	d000      	beq.n	8008368 <pvPortMalloc+0x28>
 8008366:	e079      	b.n	800845c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d012      	beq.n	8008394 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800836e:	2208      	movs	r2, #8
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	189b      	adds	r3, r3, r2
 8008374:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2207      	movs	r2, #7
 800837a:	4013      	ands	r3, r2
 800837c:	d00a      	beq.n	8008394 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2207      	movs	r2, #7
 8008382:	4393      	bics	r3, r2
 8008384:	3308      	adds	r3, #8
 8008386:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2207      	movs	r2, #7
 800838c:	4013      	ands	r3, r2
 800838e:	d001      	beq.n	8008394 <pvPortMalloc+0x54>
 8008390:	b672      	cpsid	i
 8008392:	e7fe      	b.n	8008392 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d060      	beq.n	800845c <pvPortMalloc+0x11c>
 800839a:	4b39      	ldr	r3, [pc, #228]	; (8008480 <pvPortMalloc+0x140>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d85b      	bhi.n	800845c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80083a4:	4b37      	ldr	r3, [pc, #220]	; (8008484 <pvPortMalloc+0x144>)
 80083a6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80083a8:	4b36      	ldr	r3, [pc, #216]	; (8008484 <pvPortMalloc+0x144>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083ae:	e004      	b.n	80083ba <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d903      	bls.n	80083cc <pvPortMalloc+0x8c>
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1f1      	bne.n	80083b0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80083cc:	4b2a      	ldr	r3, [pc, #168]	; (8008478 <pvPortMalloc+0x138>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	697a      	ldr	r2, [r7, #20]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d042      	beq.n	800845c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2208      	movs	r2, #8
 80083dc:	189b      	adds	r3, r3, r2
 80083de:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	685a      	ldr	r2, [r3, #4]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	1ad2      	subs	r2, r2, r3
 80083f0:	2308      	movs	r3, #8
 80083f2:	005b      	lsls	r3, r3, #1
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d916      	bls.n	8008426 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80083f8:	697a      	ldr	r2, [r7, #20]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	18d3      	adds	r3, r2, r3
 80083fe:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	2207      	movs	r2, #7
 8008404:	4013      	ands	r3, r2
 8008406:	d001      	beq.n	800840c <pvPortMalloc+0xcc>
 8008408:	b672      	cpsid	i
 800840a:	e7fe      	b.n	800840a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	685a      	ldr	r2, [r3, #4]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	1ad2      	subs	r2, r2, r3
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	0018      	movs	r0, r3
 8008422:	f000 f8db 	bl	80085dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008426:	4b16      	ldr	r3, [pc, #88]	; (8008480 <pvPortMalloc+0x140>)
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	1ad2      	subs	r2, r2, r3
 8008430:	4b13      	ldr	r3, [pc, #76]	; (8008480 <pvPortMalloc+0x140>)
 8008432:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008434:	4b12      	ldr	r3, [pc, #72]	; (8008480 <pvPortMalloc+0x140>)
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	4b13      	ldr	r3, [pc, #76]	; (8008488 <pvPortMalloc+0x148>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	429a      	cmp	r2, r3
 800843e:	d203      	bcs.n	8008448 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008440:	4b0f      	ldr	r3, [pc, #60]	; (8008480 <pvPortMalloc+0x140>)
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	4b10      	ldr	r3, [pc, #64]	; (8008488 <pvPortMalloc+0x148>)
 8008446:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	685a      	ldr	r2, [r3, #4]
 800844c:	4b0b      	ldr	r3, [pc, #44]	; (800847c <pvPortMalloc+0x13c>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	431a      	orrs	r2, r3
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	2200      	movs	r2, #0
 800845a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800845c:	f7ff f8a0 	bl	80075a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2207      	movs	r2, #7
 8008464:	4013      	ands	r3, r2
 8008466:	d001      	beq.n	800846c <pvPortMalloc+0x12c>
 8008468:	b672      	cpsid	i
 800846a:	e7fe      	b.n	800846a <pvPortMalloc+0x12a>
	return pvReturn;
 800846c:	68fb      	ldr	r3, [r7, #12]
}
 800846e:	0018      	movs	r0, r3
 8008470:	46bd      	mov	sp, r7
 8008472:	b006      	add	sp, #24
 8008474:	bd80      	pop	{r7, pc}
 8008476:	46c0      	nop			; (mov r8, r8)
 8008478:	20001d88 	.word	0x20001d88
 800847c:	20001d94 	.word	0x20001d94
 8008480:	20001d8c 	.word	0x20001d8c
 8008484:	20001d80 	.word	0x20001d80
 8008488:	20001d90 	.word	0x20001d90

0800848c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d035      	beq.n	800850a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800849e:	2308      	movs	r3, #8
 80084a0:	425b      	negs	r3, r3
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	18d3      	adds	r3, r2, r3
 80084a6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	685a      	ldr	r2, [r3, #4]
 80084b0:	4b18      	ldr	r3, [pc, #96]	; (8008514 <vPortFree+0x88>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4013      	ands	r3, r2
 80084b6:	d101      	bne.n	80084bc <vPortFree+0x30>
 80084b8:	b672      	cpsid	i
 80084ba:	e7fe      	b.n	80084ba <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d001      	beq.n	80084c8 <vPortFree+0x3c>
 80084c4:	b672      	cpsid	i
 80084c6:	e7fe      	b.n	80084c6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	685a      	ldr	r2, [r3, #4]
 80084cc:	4b11      	ldr	r3, [pc, #68]	; (8008514 <vPortFree+0x88>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4013      	ands	r3, r2
 80084d2:	d01a      	beq.n	800850a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d116      	bne.n	800850a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	685a      	ldr	r2, [r3, #4]
 80084e0:	4b0c      	ldr	r3, [pc, #48]	; (8008514 <vPortFree+0x88>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	43db      	mvns	r3, r3
 80084e6:	401a      	ands	r2, r3
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80084ec:	f7ff f84c 	bl	8007588 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	685a      	ldr	r2, [r3, #4]
 80084f4:	4b08      	ldr	r3, [pc, #32]	; (8008518 <vPortFree+0x8c>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	18d2      	adds	r2, r2, r3
 80084fa:	4b07      	ldr	r3, [pc, #28]	; (8008518 <vPortFree+0x8c>)
 80084fc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	0018      	movs	r0, r3
 8008502:	f000 f86b 	bl	80085dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008506:	f7ff f84b 	bl	80075a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800850a:	46c0      	nop			; (mov r8, r8)
 800850c:	46bd      	mov	sp, r7
 800850e:	b004      	add	sp, #16
 8008510:	bd80      	pop	{r7, pc}
 8008512:	46c0      	nop			; (mov r8, r8)
 8008514:	20001d94 	.word	0x20001d94
 8008518:	20001d8c 	.word	0x20001d8c

0800851c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008522:	23c0      	movs	r3, #192	; 0xc0
 8008524:	015b      	lsls	r3, r3, #5
 8008526:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008528:	4b26      	ldr	r3, [pc, #152]	; (80085c4 <prvHeapInit+0xa8>)
 800852a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2207      	movs	r2, #7
 8008530:	4013      	ands	r3, r2
 8008532:	d00c      	beq.n	800854e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	3307      	adds	r3, #7
 8008538:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2207      	movs	r2, #7
 800853e:	4393      	bics	r3, r2
 8008540:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008542:	68ba      	ldr	r2, [r7, #8]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	1ad2      	subs	r2, r2, r3
 8008548:	4b1e      	ldr	r3, [pc, #120]	; (80085c4 <prvHeapInit+0xa8>)
 800854a:	18d3      	adds	r3, r2, r3
 800854c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008552:	4b1d      	ldr	r3, [pc, #116]	; (80085c8 <prvHeapInit+0xac>)
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008558:	4b1b      	ldr	r3, [pc, #108]	; (80085c8 <prvHeapInit+0xac>)
 800855a:	2200      	movs	r2, #0
 800855c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	68ba      	ldr	r2, [r7, #8]
 8008562:	18d3      	adds	r3, r2, r3
 8008564:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008566:	2208      	movs	r2, #8
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	1a9b      	subs	r3, r3, r2
 800856c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2207      	movs	r2, #7
 8008572:	4393      	bics	r3, r2
 8008574:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	4b14      	ldr	r3, [pc, #80]	; (80085cc <prvHeapInit+0xb0>)
 800857a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800857c:	4b13      	ldr	r3, [pc, #76]	; (80085cc <prvHeapInit+0xb0>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2200      	movs	r2, #0
 8008582:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008584:	4b11      	ldr	r3, [pc, #68]	; (80085cc <prvHeapInit+0xb0>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2200      	movs	r2, #0
 800858a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	1ad2      	subs	r2, r2, r3
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800859a:	4b0c      	ldr	r3, [pc, #48]	; (80085cc <prvHeapInit+0xb0>)
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	685a      	ldr	r2, [r3, #4]
 80085a6:	4b0a      	ldr	r3, [pc, #40]	; (80085d0 <prvHeapInit+0xb4>)
 80085a8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	685a      	ldr	r2, [r3, #4]
 80085ae:	4b09      	ldr	r3, [pc, #36]	; (80085d4 <prvHeapInit+0xb8>)
 80085b0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80085b2:	4b09      	ldr	r3, [pc, #36]	; (80085d8 <prvHeapInit+0xbc>)
 80085b4:	2280      	movs	r2, #128	; 0x80
 80085b6:	0612      	lsls	r2, r2, #24
 80085b8:	601a      	str	r2, [r3, #0]
}
 80085ba:	46c0      	nop			; (mov r8, r8)
 80085bc:	46bd      	mov	sp, r7
 80085be:	b004      	add	sp, #16
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	46c0      	nop			; (mov r8, r8)
 80085c4:	20000580 	.word	0x20000580
 80085c8:	20001d80 	.word	0x20001d80
 80085cc:	20001d88 	.word	0x20001d88
 80085d0:	20001d90 	.word	0x20001d90
 80085d4:	20001d8c 	.word	0x20001d8c
 80085d8:	20001d94 	.word	0x20001d94

080085dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80085e4:	4b27      	ldr	r3, [pc, #156]	; (8008684 <prvInsertBlockIntoFreeList+0xa8>)
 80085e6:	60fb      	str	r3, [r7, #12]
 80085e8:	e002      	b.n	80085f0 <prvInsertBlockIntoFreeList+0x14>
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	60fb      	str	r3, [r7, #12]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d8f7      	bhi.n	80085ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	18d3      	adds	r3, r2, r3
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	429a      	cmp	r2, r3
 800860a:	d108      	bne.n	800861e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	685a      	ldr	r2, [r3, #4]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	18d2      	adds	r2, r2, r3
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	68ba      	ldr	r2, [r7, #8]
 8008628:	18d2      	adds	r2, r2, r3
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	429a      	cmp	r2, r3
 8008630:	d118      	bne.n	8008664 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	4b14      	ldr	r3, [pc, #80]	; (8008688 <prvInsertBlockIntoFreeList+0xac>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	429a      	cmp	r2, r3
 800863c:	d00d      	beq.n	800865a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	685a      	ldr	r2, [r3, #4]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	18d2      	adds	r2, r2, r3
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	601a      	str	r2, [r3, #0]
 8008658:	e008      	b.n	800866c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800865a:	4b0b      	ldr	r3, [pc, #44]	; (8008688 <prvInsertBlockIntoFreeList+0xac>)
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	601a      	str	r2, [r3, #0]
 8008662:	e003      	b.n	800866c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	429a      	cmp	r2, r3
 8008672:	d002      	beq.n	800867a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800867a:	46c0      	nop			; (mov r8, r8)
 800867c:	46bd      	mov	sp, r7
 800867e:	b004      	add	sp, #16
 8008680:	bd80      	pop	{r7, pc}
 8008682:	46c0      	nop			; (mov r8, r8)
 8008684:	20001d80 	.word	0x20001d80
 8008688:	20001d88 	.word	0x20001d88

0800868c <SCP_ByteReceived>:
void SCP_GetBuff(void);

/************************************************************************************************
************************************************************************************************/
void SCP_ByteReceived(uint8_t rxByte)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
 8008692:	0002      	movs	r2, r0
 8008694:	1dfb      	adds	r3, r7, #7
 8008696:	701a      	strb	r2, [r3, #0]
    /*Put the byte into the buffer */
    if (SCPHandler.RxIndex < SCP_RX_BUFF_LENGTH)
 8008698:	4b0f      	ldr	r3, [pc, #60]	; (80086d8 <SCP_ByteReceived+0x4c>)
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	4a0f      	ldr	r2, [pc, #60]	; (80086dc <SCP_ByteReceived+0x50>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d80a      	bhi.n	80086b8 <SCP_ByteReceived+0x2c>
    {
        SCPHandler.RxBuffer[SCPHandler.RxIndex++] = rxByte;
 80086a2:	4b0d      	ldr	r3, [pc, #52]	; (80086d8 <SCP_ByteReceived+0x4c>)
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	1c59      	adds	r1, r3, #1
 80086a8:	4a0b      	ldr	r2, [pc, #44]	; (80086d8 <SCP_ByteReceived+0x4c>)
 80086aa:	6091      	str	r1, [r2, #8]
 80086ac:	4a0a      	ldr	r2, [pc, #40]	; (80086d8 <SCP_ByteReceived+0x4c>)
 80086ae:	18d3      	adds	r3, r2, r3
 80086b0:	1dfa      	adds	r2, r7, #7
 80086b2:	7812      	ldrb	r2, [r2, #0]
 80086b4:	731a      	strb	r2, [r3, #12]
    	SCP_InitRx();

        /*Write first byte at the beginning and exit*/
        SCPHandler.RxBuffer[SCPHandler.RxIndex++] = rxByte;
    }
}
 80086b6:	e00b      	b.n	80086d0 <SCP_ByteReceived+0x44>
    	SCP_InitRx();
 80086b8:	f000 f86a 	bl	8008790 <SCP_InitRx>
        SCPHandler.RxBuffer[SCPHandler.RxIndex++] = rxByte;
 80086bc:	4b06      	ldr	r3, [pc, #24]	; (80086d8 <SCP_ByteReceived+0x4c>)
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	1c59      	adds	r1, r3, #1
 80086c2:	4a05      	ldr	r2, [pc, #20]	; (80086d8 <SCP_ByteReceived+0x4c>)
 80086c4:	6091      	str	r1, [r2, #8]
 80086c6:	4a04      	ldr	r2, [pc, #16]	; (80086d8 <SCP_ByteReceived+0x4c>)
 80086c8:	18d3      	adds	r3, r2, r3
 80086ca:	1dfa      	adds	r2, r7, #7
 80086cc:	7812      	ldrb	r2, [r2, #0]
 80086ce:	731a      	strb	r2, [r3, #12]
}
 80086d0:	46c0      	nop			; (mov r8, r8)
 80086d2:	46bd      	mov	sp, r7
 80086d4:	b002      	add	sp, #8
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	20001f18 	.word	0x20001f18
 80086dc:	000003ff 	.word	0x000003ff

080086e0 <SCP_Tick>:
/************************************************************************************************
************************************************************************************************/
void SCP_Tick(uint32_t msecTick)
 {
 80086e0:	b590      	push	{r4, r7, lr}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
     if (SCPHandler.timer > 0)
 80086e8:	4b0c      	ldr	r3, [pc, #48]	; (800871c <SCP_Tick+0x3c>)
 80086ea:	685c      	ldr	r4, [r3, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2c00      	cmp	r4, #0
 80086f0:	dc03      	bgt.n	80086fa <SCP_Tick+0x1a>
 80086f2:	d10e      	bne.n	8008712 <SCP_Tick+0x32>
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d100      	bne.n	80086fa <SCP_Tick+0x1a>
     {
         SCPHandler.timer = SCPHandler.timer - msecTick;
     }
 }
 80086f8:	e00b      	b.n	8008712 <SCP_Tick+0x32>
         SCPHandler.timer = SCPHandler.timer - msecTick;
 80086fa:	4b08      	ldr	r3, [pc, #32]	; (800871c <SCP_Tick+0x3c>)
 80086fc:	685c      	ldr	r4, [r3, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	0001      	movs	r1, r0
 8008704:	2000      	movs	r0, #0
 8008706:	0002      	movs	r2, r0
 8008708:	1a5b      	subs	r3, r3, r1
 800870a:	4194      	sbcs	r4, r2
 800870c:	4a03      	ldr	r2, [pc, #12]	; (800871c <SCP_Tick+0x3c>)
 800870e:	6013      	str	r3, [r2, #0]
 8008710:	6054      	str	r4, [r2, #4]
 }
 8008712:	46c0      	nop			; (mov r8, r8)
 8008714:	46bd      	mov	sp, r7
 8008716:	b003      	add	sp, #12
 8008718:	bd90      	pop	{r4, r7, pc}
 800871a:	46c0      	nop			; (mov r8, r8)
 800871c:	20001f18 	.word	0x20001f18

08008720 <SCP_Init>:
 if ((ch >= 'a')&&(ch <= 'z')) return (ch & ~0x20);
 return ch;
}

void SCP_Init(uint32_t (*fSendData)(uint8_t *pData, uint32_t lenght), uint32_t (*fReadByte)(uint8_t *pData))
{
 8008720:	b590      	push	{r4, r7, lr}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
    SCPHandler.RxIndex = 0;
 800872a:	4b17      	ldr	r3, [pc, #92]	; (8008788 <SCP_Init+0x68>)
 800872c:	2200      	movs	r2, #0
 800872e:	609a      	str	r2, [r3, #8]
    SCPHandler.timer = 0;
 8008730:	4a15      	ldr	r2, [pc, #84]	; (8008788 <SCP_Init+0x68>)
 8008732:	2300      	movs	r3, #0
 8008734:	2400      	movs	r4, #0
 8008736:	6013      	str	r3, [r2, #0]
 8008738:	6054      	str	r4, [r2, #4]
    SCPHandler.fSendData = fSendData;
 800873a:	4b13      	ldr	r3, [pc, #76]	; (8008788 <SCP_Init+0x68>)
 800873c:	4913      	ldr	r1, [pc, #76]	; (800878c <SCP_Init+0x6c>)
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	505a      	str	r2, [r3, r1]
    SCPHandler.fReadByte = fReadByte;
 8008742:	4a11      	ldr	r2, [pc, #68]	; (8008788 <SCP_Init+0x68>)
 8008744:	23c2      	movs	r3, #194	; 0xc2
 8008746:	00db      	lsls	r3, r3, #3
 8008748:	6839      	ldr	r1, [r7, #0]
 800874a:	50d1      	str	r1, [r2, r3]

    for (int i = 0; i < SCP_MAX_CALLBACKS; i++)
 800874c:	2300      	movs	r3, #0
 800874e:	60fb      	str	r3, [r7, #12]
 8008750:	e012      	b.n	8008778 <SCP_Init+0x58>
    {
        SCPHandler.scpCallbacks[i].fOnExecute = 0;
 8008752:	4a0d      	ldr	r2, [pc, #52]	; (8008788 <SCP_Init+0x68>)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	3381      	adds	r3, #129	; 0x81
 8008758:	00db      	lsls	r3, r3, #3
 800875a:	18d3      	adds	r3, r2, r3
 800875c:	3308      	adds	r3, #8
 800875e:	2200      	movs	r2, #0
 8008760:	601a      	str	r2, [r3, #0]
        SCPHandler.scpCallbacks[i].pWaitForString = 0;
 8008762:	4a09      	ldr	r2, [pc, #36]	; (8008788 <SCP_Init+0x68>)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	3381      	adds	r3, #129	; 0x81
 8008768:	00db      	lsls	r3, r3, #3
 800876a:	18d3      	adds	r3, r2, r3
 800876c:	3304      	adds	r3, #4
 800876e:	2200      	movs	r2, #0
 8008770:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < SCP_MAX_CALLBACKS; i++)
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	3301      	adds	r3, #1
 8008776:	60fb      	str	r3, [r7, #12]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2b09      	cmp	r3, #9
 800877c:	dde9      	ble.n	8008752 <SCP_Init+0x32>
    }
}
 800877e:	46c0      	nop			; (mov r8, r8)
 8008780:	46bd      	mov	sp, r7
 8008782:	b005      	add	sp, #20
 8008784:	bd90      	pop	{r4, r7, pc}
 8008786:	46c0      	nop			; (mov r8, r8)
 8008788:	20001f18 	.word	0x20001f18
 800878c:	0000060c 	.word	0x0000060c

08008790 <SCP_InitRx>:

     return pResult;
 }

 void SCP_InitRx(void)
 {
 8008790:	b580      	push	{r7, lr}
 8008792:	af00      	add	r7, sp, #0
     SCPHandler.RxIndex = 0;
 8008794:	4b06      	ldr	r3, [pc, #24]	; (80087b0 <SCP_InitRx+0x20>)
 8008796:	2200      	movs	r2, #0
 8008798:	609a      	str	r2, [r3, #8]
     memset(SCPHandler.RxBuffer, 0x00, SCP_RX_BUFF_LENGTH);
 800879a:	2380      	movs	r3, #128	; 0x80
 800879c:	00da      	lsls	r2, r3, #3
 800879e:	4b05      	ldr	r3, [pc, #20]	; (80087b4 <SCP_InitRx+0x24>)
 80087a0:	2100      	movs	r1, #0
 80087a2:	0018      	movs	r0, r3
 80087a4:	f001 fd47 	bl	800a236 <memset>
 }
 80087a8:	46c0      	nop			; (mov r8, r8)
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	46c0      	nop			; (mov r8, r8)
 80087b0:	20001f18 	.word	0x20001f18
 80087b4:	20001f24 	.word	0x20001f24

080087b8 <writeEEPROMData>:
  HAL_FLASHEx_DATAEEPROM_Lock();  // Reprotect the EEPROM
  return status;
  }

HAL_StatusTypeDef writeEEPROMData(uint32_t address, uint8_t* data, uint16_t len)
  {
 80087b8:	b5b0      	push	{r4, r5, r7, lr}
 80087ba:	b086      	sub	sp, #24
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	1dbb      	adds	r3, r7, #6
 80087c4:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef  status;
	uint16_t i;

	address = address + EEPROM_BASE_ADDRESS;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	4a21      	ldr	r2, [pc, #132]	; (8008850 <writeEEPROMData+0x98>)
 80087ca:	4694      	mov	ip, r2
 80087cc:	4463      	add	r3, ip
 80087ce:	60fb      	str	r3, [r7, #12]

	if(address+len > EEPROM_LAST_ADDR)
 80087d0:	1dbb      	adds	r3, r7, #6
 80087d2:	881a      	ldrh	r2, [r3, #0]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	18d3      	adds	r3, r2, r3
 80087d8:	4a1e      	ldr	r2, [pc, #120]	; (8008854 <writeEEPROMData+0x9c>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d901      	bls.n	80087e2 <writeEEPROMData+0x2a>
	{return HAL_ERROR;}
 80087de:	2301      	movs	r3, #1
 80087e0:	e032      	b.n	8008848 <writeEEPROMData+0x90>

	HAL_FLASHEx_DATAEEPROM_Unlock();  //Unprotect the EEPROM to allow writing
 80087e2:	f7fb f879 	bl	80038d8 <HAL_FLASHEx_DATAEEPROM_Unlock>
	for(i = 0; i < len; i++)
 80087e6:	2316      	movs	r3, #22
 80087e8:	18fb      	adds	r3, r7, r3
 80087ea:	2200      	movs	r2, #0
 80087ec:	801a      	strh	r2, [r3, #0]
 80087ee:	e021      	b.n	8008834 <writeEEPROMData+0x7c>
	{
		status = HAL_FLASHEx_DATAEEPROM_Program(TYPEPROGRAMDATA_BYTE, address, *data);
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	001a      	movs	r2, r3
 80087f6:	2515      	movs	r5, #21
 80087f8:	197c      	adds	r4, r7, r5
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	0019      	movs	r1, r3
 80087fe:	2000      	movs	r0, #0
 8008800:	f7fb f8a4 	bl	800394c <HAL_FLASHEx_DATAEEPROM_Program>
 8008804:	0003      	movs	r3, r0
 8008806:	7023      	strb	r3, [r4, #0]
		data++;
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	3301      	adds	r3, #1
 800880c:	60bb      	str	r3, [r7, #8]
		address++;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	3301      	adds	r3, #1
 8008812:	60fb      	str	r3, [r7, #12]
		if(status != HAL_OK )
 8008814:	197b      	adds	r3, r7, r5
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d005      	beq.n	8008828 <writeEEPROMData+0x70>
		{
			HAL_FLASHEx_DATAEEPROM_Lock();  // Reprotect the EEPROM
 800881c:	f7fb f888 	bl	8003930 <HAL_FLASHEx_DATAEEPROM_Lock>
			return status;
 8008820:	2315      	movs	r3, #21
 8008822:	18fb      	adds	r3, r7, r3
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	e00f      	b.n	8008848 <writeEEPROMData+0x90>
	for(i = 0; i < len; i++)
 8008828:	2116      	movs	r1, #22
 800882a:	187b      	adds	r3, r7, r1
 800882c:	881a      	ldrh	r2, [r3, #0]
 800882e:	187b      	adds	r3, r7, r1
 8008830:	3201      	adds	r2, #1
 8008832:	801a      	strh	r2, [r3, #0]
 8008834:	2316      	movs	r3, #22
 8008836:	18fa      	adds	r2, r7, r3
 8008838:	1dbb      	adds	r3, r7, #6
 800883a:	8812      	ldrh	r2, [r2, #0]
 800883c:	881b      	ldrh	r3, [r3, #0]
 800883e:	429a      	cmp	r2, r3
 8008840:	d3d6      	bcc.n	80087f0 <writeEEPROMData+0x38>
		}
	}

	HAL_FLASHEx_DATAEEPROM_Lock();  // Reprotect the EEPROM
 8008842:	f7fb f875 	bl	8003930 <HAL_FLASHEx_DATAEEPROM_Lock>
	return HAL_OK;
 8008846:	2300      	movs	r3, #0
  }
 8008848:	0018      	movs	r0, r3
 800884a:	46bd      	mov	sp, r7
 800884c:	b006      	add	sp, #24
 800884e:	bdb0      	pop	{r4, r5, r7, pc}
 8008850:	08080000 	.word	0x08080000
 8008854:	080817ff 	.word	0x080817ff

08008858 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	4a06      	ldr	r2, [pc, #24]	; (8008880 <vApplicationGetIdleTaskMemory+0x28>)
 8008868:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	4a05      	ldr	r2, [pc, #20]	; (8008884 <vApplicationGetIdleTaskMemory+0x2c>)
 800886e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2240      	movs	r2, #64	; 0x40
 8008874:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8008876:	46c0      	nop			; (mov r8, r8)
 8008878:	46bd      	mov	sp, r7
 800887a:	b004      	add	sp, #16
 800887c:	bd80      	pop	{r7, pc}
 800887e:	46c0      	nop			; (mov r8, r8)
 8008880:	20001d98 	.word	0x20001d98
 8008884:	20001dec 	.word	0x20001dec

08008888 <IndicationTask>:
				.queue_sz = 1,
				.item_sz = 1
		};

void IndicationTask(void const * argument)
{
 8008888:	b590      	push	{r4, r7, lr}
 800888a:	b087      	sub	sp, #28
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
	osEvent  evt;

	for(;;)
	{
		  /*Always wait for a message with intensity value*/
		  evt = osMessageGet (ind_msg,  osWaitForever);
 8008890:	4b11      	ldr	r3, [pc, #68]	; (80088d8 <IndicationTask+0x50>)
 8008892:	6819      	ldr	r1, [r3, #0]
 8008894:	240c      	movs	r4, #12
 8008896:	1938      	adds	r0, r7, r4
 8008898:	2301      	movs	r3, #1
 800889a:	425b      	negs	r3, r3
 800889c:	001a      	movs	r2, r3
 800889e:	f7fd ff13 	bl	80066c8 <osMessageGet>
		  if (evt.status == osEventMessage)
 80088a2:	193b      	adds	r3, r7, r4
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2b10      	cmp	r3, #16
 80088a8:	d114      	bne.n	80088d4 <IndicationTask+0x4c>
		  {
			  switch(evt.value.v)
 80088aa:	230c      	movs	r3, #12
 80088ac:	18fb      	adds	r3, r7, r3
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d006      	beq.n	80088c2 <IndicationTask+0x3a>
 80088b4:	d302      	bcc.n	80088bc <IndicationTask+0x34>
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d006      	beq.n	80088c8 <IndicationTask+0x40>
 80088ba:	e008      	b.n	80088ce <IndicationTask+0x46>
			  {
			  	  case IND_OFF:
			  	  {
			  		  ind_off();
 80088bc:	f000 f862 	bl	8008984 <ind_off>
			  		  break;
 80088c0:	e009      	b.n	80088d6 <IndicationTask+0x4e>
			  	  }
			  	  case IND_GREEN:
			  	  {
			  		  ind_green();
 80088c2:	f000 f80b 	bl	80088dc <ind_green>
			  		  break;
 80088c6:	e006      	b.n	80088d6 <IndicationTask+0x4e>
			  	  }
			  	  case IND_RED:
			  	  {
			  		  ind_red();
 80088c8:	f000 f832 	bl	8008930 <ind_red>
			  		  break;
 80088cc:	e003      	b.n	80088d6 <IndicationTask+0x4e>
			  	  }
			  	  default:
			  	  {
			  		  ind_off();
 80088ce:	f000 f859 	bl	8008984 <ind_off>
 80088d2:	e7dd      	b.n	8008890 <IndicationTask+0x8>
			  	  }
			  }
		  }
 80088d4:	46c0      	nop			; (mov r8, r8)
		  evt = osMessageGet (ind_msg,  osWaitForever);
 80088d6:	e7db      	b.n	8008890 <IndicationTask+0x8>
 80088d8:	20002534 	.word	0x20002534

080088dc <ind_green>:
	}

}

void ind_green(void)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088e2:	1d3b      	adds	r3, r7, #4
 80088e4:	0018      	movs	r0, r3
 80088e6:	2314      	movs	r3, #20
 80088e8:	001a      	movs	r2, r3
 80088ea:	2100      	movs	r1, #0
 80088ec:	f001 fca3 	bl	800a236 <memset>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80088f0:	2380      	movs	r3, #128	; 0x80
 80088f2:	0059      	lsls	r1, r3, #1
 80088f4:	23a0      	movs	r3, #160	; 0xa0
 80088f6:	05db      	lsls	r3, r3, #23
 80088f8:	2200      	movs	r2, #0
 80088fa:	0018      	movs	r0, r3
 80088fc:	f7fb fa19 	bl	8003d32 <HAL_GPIO_WritePin>

	/*Configure GPIO pin:*/
	GPIO_InitStruct.Pin = LED_IND_Pin;
 8008900:	1d3b      	adds	r3, r7, #4
 8008902:	2280      	movs	r2, #128	; 0x80
 8008904:	0052      	lsls	r2, r2, #1
 8008906:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008908:	1d3b      	adds	r3, r7, #4
 800890a:	2201      	movs	r2, #1
 800890c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800890e:	1d3b      	adds	r3, r7, #4
 8008910:	2200      	movs	r2, #0
 8008912:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008914:	1d3b      	adds	r3, r7, #4
 8008916:	2200      	movs	r2, #0
 8008918:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800891a:	1d3a      	adds	r2, r7, #4
 800891c:	23a0      	movs	r3, #160	; 0xa0
 800891e:	05db      	lsls	r3, r3, #23
 8008920:	0011      	movs	r1, r2
 8008922:	0018      	movs	r0, r3
 8008924:	f7fb f86a 	bl	80039fc <HAL_GPIO_Init>
}
 8008928:	46c0      	nop			; (mov r8, r8)
 800892a:	46bd      	mov	sp, r7
 800892c:	b006      	add	sp, #24
 800892e:	bd80      	pop	{r7, pc}

08008930 <ind_red>:

void ind_red(void)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008936:	1d3b      	adds	r3, r7, #4
 8008938:	0018      	movs	r0, r3
 800893a:	2314      	movs	r3, #20
 800893c:	001a      	movs	r2, r3
 800893e:	2100      	movs	r1, #0
 8008940:	f001 fc79 	bl	800a236 <memset>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8008944:	2380      	movs	r3, #128	; 0x80
 8008946:	0059      	lsls	r1, r3, #1
 8008948:	23a0      	movs	r3, #160	; 0xa0
 800894a:	05db      	lsls	r3, r3, #23
 800894c:	2201      	movs	r2, #1
 800894e:	0018      	movs	r0, r3
 8008950:	f7fb f9ef 	bl	8003d32 <HAL_GPIO_WritePin>

	/*Configure GPIO pin:*/
	GPIO_InitStruct.Pin = LED_IND_Pin;
 8008954:	1d3b      	adds	r3, r7, #4
 8008956:	2280      	movs	r2, #128	; 0x80
 8008958:	0052      	lsls	r2, r2, #1
 800895a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800895c:	1d3b      	adds	r3, r7, #4
 800895e:	2201      	movs	r2, #1
 8008960:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008962:	1d3b      	adds	r3, r7, #4
 8008964:	2200      	movs	r2, #0
 8008966:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008968:	1d3b      	adds	r3, r7, #4
 800896a:	2200      	movs	r2, #0
 800896c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800896e:	1d3a      	adds	r2, r7, #4
 8008970:	23a0      	movs	r3, #160	; 0xa0
 8008972:	05db      	lsls	r3, r3, #23
 8008974:	0011      	movs	r1, r2
 8008976:	0018      	movs	r0, r3
 8008978:	f7fb f840 	bl	80039fc <HAL_GPIO_Init>
}
 800897c:	46c0      	nop			; (mov r8, r8)
 800897e:	46bd      	mov	sp, r7
 8008980:	b006      	add	sp, #24
 8008982:	bd80      	pop	{r7, pc}

08008984 <ind_off>:

void ind_off(void)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b086      	sub	sp, #24
 8008988:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800898a:	1d3b      	adds	r3, r7, #4
 800898c:	0018      	movs	r0, r3
 800898e:	2314      	movs	r3, #20
 8008990:	001a      	movs	r2, r3
 8008992:	2100      	movs	r1, #0
 8008994:	f001 fc4f 	bl	800a236 <memset>

	/*Configure GPIO pin:*/
	GPIO_InitStruct.Pin = LED_IND_Pin;
 8008998:	1d3b      	adds	r3, r7, #4
 800899a:	2280      	movs	r2, #128	; 0x80
 800899c:	0052      	lsls	r2, r2, #1
 800899e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80089a0:	1d3b      	adds	r3, r7, #4
 80089a2:	2200      	movs	r2, #0
 80089a4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089a6:	1d3b      	adds	r3, r7, #4
 80089a8:	2200      	movs	r2, #0
 80089aa:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089ac:	1d3b      	adds	r3, r7, #4
 80089ae:	2200      	movs	r2, #0
 80089b0:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089b2:	1d3a      	adds	r2, r7, #4
 80089b4:	23a0      	movs	r3, #160	; 0xa0
 80089b6:	05db      	lsls	r3, r3, #23
 80089b8:	0011      	movs	r1, r2
 80089ba:	0018      	movs	r0, r3
 80089bc:	f7fb f81e 	bl	80039fc <HAL_GPIO_Init>
}
 80089c0:	46c0      	nop			; (mov r8, r8)
 80089c2:	46bd      	mov	sp, r7
 80089c4:	b006      	add	sp, #24
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <LEDControlTask>:
				.item_sz = 1
		};


void LEDControlTask(void const * argument)
{
 80089c8:	b590      	push	{r4, r7, lr}
 80089ca:	b087      	sub	sp, #28
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  osEvent  evt;

  for(;;)
  {
	  /*Always wait for a message with intensity value*/
	  evt = osMessageGet (led_msg,  osWaitForever);
 80089d0:	4b09      	ldr	r3, [pc, #36]	; (80089f8 <LEDControlTask+0x30>)
 80089d2:	6819      	ldr	r1, [r3, #0]
 80089d4:	240c      	movs	r4, #12
 80089d6:	1938      	adds	r0, r7, r4
 80089d8:	2301      	movs	r3, #1
 80089da:	425b      	negs	r3, r3
 80089dc:	001a      	movs	r2, r3
 80089de:	f7fd fe73 	bl	80066c8 <osMessageGet>
	  if (evt.status == osEventMessage)
 80089e2:	193b      	adds	r3, r7, r4
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2b10      	cmp	r3, #16
 80089e8:	d1f2      	bne.n	80089d0 <LEDControlTask+0x8>
	  {
		  set_intensity(evt.value.v);
 80089ea:	230c      	movs	r3, #12
 80089ec:	18fb      	adds	r3, r7, r3
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	0018      	movs	r0, r3
 80089f2:	f000 f81b 	bl	8008a2c <set_intensity>
	  evt = osMessageGet (led_msg,  osWaitForever);
 80089f6:	e7eb      	b.n	80089d0 <LEDControlTask+0x8>
 80089f8:	2000253c 	.word	0x2000253c

080089fc <delay_us>:
  }
}

/*Hardware Timer Microsecond Delay*/
void delay_us (uint16_t us)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	0002      	movs	r2, r0
 8008a04:	1dbb      	adds	r3, r7, #6
 8008a06:	801a      	strh	r2, [r3, #0]
	/*Set the counter value a 0*/
	__HAL_TIM_SET_COUNTER(&htim22,0);
 8008a08:	4b07      	ldr	r3, [pc, #28]	; (8008a28 <delay_us+0x2c>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	625a      	str	r2, [r3, #36]	; 0x24

	/*Wait for the counter to reach the us input in the parameter*/
	while (__HAL_TIM_GET_COUNTER(&htim22) < us);
 8008a10:	46c0      	nop			; (mov r8, r8)
 8008a12:	4b05      	ldr	r3, [pc, #20]	; (8008a28 <delay_us+0x2c>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a18:	1dbb      	adds	r3, r7, #6
 8008a1a:	881b      	ldrh	r3, [r3, #0]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d3f8      	bcc.n	8008a12 <delay_us+0x16>
}
 8008a20:	46c0      	nop			; (mov r8, r8)
 8008a22:	46bd      	mov	sp, r7
 8008a24:	b002      	add	sp, #8
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	2000260c 	.word	0x2000260c

08008a2c <set_intensity>:

/*Sets driver current using EasyScale Protocol*/
void set_intensity(uint32_t ref)
{
 8008a2c:	b590      	push	{r4, r7, lr}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  unsigned char byte = 0, j = 0, k = 0;
 8008a34:	210f      	movs	r1, #15
 8008a36:	187b      	adds	r3, r7, r1
 8008a38:	2200      	movs	r2, #0
 8008a3a:	701a      	strb	r2, [r3, #0]
 8008a3c:	230e      	movs	r3, #14
 8008a3e:	18fb      	adds	r3, r7, r3
 8008a40:	2200      	movs	r2, #0
 8008a42:	701a      	strb	r2, [r3, #0]
 8008a44:	240d      	movs	r4, #13
 8008a46:	193b      	adds	r3, r7, r4
 8008a48:	2200      	movs	r2, #0
 8008a4a:	701a      	strb	r2, [r3, #0]
  byte = 0x72;       //device adress byte
 8008a4c:	187b      	adds	r3, r7, r1
 8008a4e:	2272      	movs	r2, #114	; 0x72
 8008a50:	701a      	strb	r2, [r3, #0]

  /*Shut down driver and enter into EasyScale control mode*/
  HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 8008a52:	4b41      	ldr	r3, [pc, #260]	; (8008b58 <set_intensity+0x12c>)
 8008a54:	2201      	movs	r2, #1
 8008a56:	2102      	movs	r1, #2
 8008a58:	0018      	movs	r0, r3
 8008a5a:	f7fb f96a 	bl	8003d32 <HAL_GPIO_WritePin>
  delay_us(110);
 8008a5e:	206e      	movs	r0, #110	; 0x6e
 8008a60:	f7ff ffcc 	bl	80089fc <delay_us>
  HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET);
 8008a64:	4b3c      	ldr	r3, [pc, #240]	; (8008b58 <set_intensity+0x12c>)
 8008a66:	2200      	movs	r2, #0
 8008a68:	2102      	movs	r1, #2
 8008a6a:	0018      	movs	r0, r3
 8008a6c:	f7fb f961 	bl	8003d32 <HAL_GPIO_WritePin>
  delay_us(1100);
 8008a70:	4b3a      	ldr	r3, [pc, #232]	; (8008b5c <set_intensity+0x130>)
 8008a72:	0018      	movs	r0, r3
 8008a74:	f7ff ffc2 	bl	80089fc <delay_us>

  /*Send address and data*/
  for(k=2; k>0; k--)
 8008a78:	193b      	adds	r3, r7, r4
 8008a7a:	2202      	movs	r2, #2
 8008a7c:	701a      	strb	r2, [r3, #0]
 8008a7e:	e05c      	b.n	8008b3a <set_intensity+0x10e>
  {
	HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 8008a80:	4b35      	ldr	r3, [pc, #212]	; (8008b58 <set_intensity+0x12c>)
 8008a82:	2201      	movs	r2, #1
 8008a84:	2102      	movs	r1, #2
 8008a86:	0018      	movs	r0, r3
 8008a88:	f7fb f953 	bl	8003d32 <HAL_GPIO_WritePin>
	delay_us(48);
 8008a8c:	2030      	movs	r0, #48	; 0x30
 8008a8e:	f7ff ffb5 	bl	80089fc <delay_us>

    for(j=8; j>0; j--)
 8008a92:	230e      	movs	r3, #14
 8008a94:	18fb      	adds	r3, r7, r3
 8008a96:	2208      	movs	r2, #8
 8008a98:	701a      	strb	r2, [r3, #0]
 8008a9a:	e036      	b.n	8008b0a <set_intensity+0xde>
    {
      if(byte & 0x80)
 8008a9c:	230f      	movs	r3, #15
 8008a9e:	18fb      	adds	r3, r7, r3
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	b25b      	sxtb	r3, r3
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	da12      	bge.n	8008ace <set_intensity+0xa2>
      {
    	HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET); //encoding bit 1
 8008aa8:	4b2b      	ldr	r3, [pc, #172]	; (8008b58 <set_intensity+0x12c>)
 8008aaa:	2200      	movs	r2, #0
 8008aac:	2102      	movs	r1, #2
 8008aae:	0018      	movs	r0, r3
 8008ab0:	f7fb f93f 	bl	8003d32 <HAL_GPIO_WritePin>
    	delay_us(24);
 8008ab4:	2018      	movs	r0, #24
 8008ab6:	f7ff ffa1 	bl	80089fc <delay_us>
        HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 8008aba:	4b27      	ldr	r3, [pc, #156]	; (8008b58 <set_intensity+0x12c>)
 8008abc:	2201      	movs	r2, #1
 8008abe:	2102      	movs	r1, #2
 8008ac0:	0018      	movs	r0, r3
 8008ac2:	f7fb f936 	bl	8003d32 <HAL_GPIO_WritePin>
        delay_us(48);
 8008ac6:	2030      	movs	r0, #48	; 0x30
 8008ac8:	f7ff ff98 	bl	80089fc <delay_us>
 8008acc:	e011      	b.n	8008af2 <set_intensity+0xc6>
      }
      else
      {
    	HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET); //encoding bit 0
 8008ace:	4b22      	ldr	r3, [pc, #136]	; (8008b58 <set_intensity+0x12c>)
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	2102      	movs	r1, #2
 8008ad4:	0018      	movs	r0, r3
 8008ad6:	f7fb f92c 	bl	8003d32 <HAL_GPIO_WritePin>
    	delay_us(48);
 8008ada:	2030      	movs	r0, #48	; 0x30
 8008adc:	f7ff ff8e 	bl	80089fc <delay_us>
        HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 8008ae0:	4b1d      	ldr	r3, [pc, #116]	; (8008b58 <set_intensity+0x12c>)
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	2102      	movs	r1, #2
 8008ae6:	0018      	movs	r0, r3
 8008ae8:	f7fb f923 	bl	8003d32 <HAL_GPIO_WritePin>
        delay_us(24);
 8008aec:	2018      	movs	r0, #24
 8008aee:	f7ff ff85 	bl	80089fc <delay_us>
      }
      byte += byte; //left shift
 8008af2:	230f      	movs	r3, #15
 8008af4:	18fa      	adds	r2, r7, r3
 8008af6:	18fb      	adds	r3, r7, r3
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	18db      	adds	r3, r3, r3
 8008afc:	7013      	strb	r3, [r2, #0]
    for(j=8; j>0; j--)
 8008afe:	210e      	movs	r1, #14
 8008b00:	187b      	adds	r3, r7, r1
 8008b02:	781a      	ldrb	r2, [r3, #0]
 8008b04:	187b      	adds	r3, r7, r1
 8008b06:	3a01      	subs	r2, #1
 8008b08:	701a      	strb	r2, [r3, #0]
 8008b0a:	230e      	movs	r3, #14
 8008b0c:	18fb      	adds	r3, r7, r3
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1c3      	bne.n	8008a9c <set_intensity+0x70>
    }

    HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET); //End of stream delay
 8008b14:	4b10      	ldr	r3, [pc, #64]	; (8008b58 <set_intensity+0x12c>)
 8008b16:	2200      	movs	r2, #0
 8008b18:	2102      	movs	r1, #2
 8008b1a:	0018      	movs	r0, r3
 8008b1c:	f7fb f909 	bl	8003d32 <HAL_GPIO_WritePin>
    delay_us(48);
 8008b20:	2030      	movs	r0, #48	; 0x30
 8008b22:	f7ff ff6b 	bl	80089fc <delay_us>

    byte = ref; //read data byte
 8008b26:	230f      	movs	r3, #15
 8008b28:	18fb      	adds	r3, r7, r3
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	701a      	strb	r2, [r3, #0]
  for(k=2; k>0; k--)
 8008b2e:	210d      	movs	r1, #13
 8008b30:	187b      	adds	r3, r7, r1
 8008b32:	781a      	ldrb	r2, [r3, #0]
 8008b34:	187b      	adds	r3, r7, r1
 8008b36:	3a01      	subs	r2, #1
 8008b38:	701a      	strb	r2, [r3, #0]
 8008b3a:	230d      	movs	r3, #13
 8008b3c:	18fb      	adds	r3, r7, r3
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d19d      	bne.n	8008a80 <set_intensity+0x54>
  }
  HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 8008b44:	4b04      	ldr	r3, [pc, #16]	; (8008b58 <set_intensity+0x12c>)
 8008b46:	2201      	movs	r2, #1
 8008b48:	2102      	movs	r1, #2
 8008b4a:	0018      	movs	r0, r3
 8008b4c:	f7fb f8f1 	bl	8003d32 <HAL_GPIO_WritePin>
}
 8008b50:	46c0      	nop			; (mov r8, r8)
 8008b52:	46bd      	mov	sp, r7
 8008b54:	b005      	add	sp, #20
 8008b56:	bd90      	pop	{r4, r7, pc}
 8008b58:	50000400 	.word	0x50000400
 8008b5c:	0000044c 	.word	0x0000044c

08008b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008b60:	b5b0      	push	{r4, r5, r7, lr}
 8008b62:	b0a4      	sub	sp, #144	; 0x90
 8008b64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008b66:	f7f9 fc8d 	bl	8002484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008b6a:	f000 f8ab 	bl	8008cc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008b6e:	f000 fb2f 	bl	80091d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8008b72:	f000 fb07 	bl	8009184 <MX_DMA_Init>
  MX_ADC_Init();
 8008b76:	f000 f925 	bl	8008dc4 <MX_ADC_Init>
  MX_TIM22_Init();
 8008b7a:	f000 fa79 	bl	8009070 <MX_TIM22_Init>
  MX_TIM21_Init();
 8008b7e:	f000 fa21 	bl	8008fc4 <MX_TIM21_Init>
  MX_CRC_Init();
 8008b82:	f000 f9bf 	bl	8008f04 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8008b86:	f000 facd 	bl	8009124 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8008b8a:	f000 f9df 	bl	8008f4c <MX_TIM7_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8008b8e:	f000 f90b 	bl	8008da8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  eeprom_ram_init(&eeprom_info);
 8008b92:	4b3b      	ldr	r3, [pc, #236]	; (8008c80 <main+0x120>)
 8008b94:	0018      	movs	r0, r3
 8008b96:	f000 fbb7 	bl	8009308 <eeprom_ram_init>

  /*AT parser initialisation*/
 SCP_Init(uart_send_buff, uart_read_byte);
 8008b9a:	4a3a      	ldr	r2, [pc, #232]	; (8008c84 <main+0x124>)
 8008b9c:	4b3a      	ldr	r3, [pc, #232]	; (8008c88 <main+0x128>)
 8008b9e:	0011      	movs	r1, r2
 8008ba0:	0018      	movs	r0, r3
 8008ba2:	f7ff fdbd 	bl	8008720 <SCP_Init>

 /*Reset AT Parser rx buffer */
 SCP_InitRx();
 8008ba6:	f7ff fdf3 	bl	8008790 <SCP_InitRx>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  led_msg = osMessageCreate (&led_msg_def, LEDControlTaskHandle);
 8008baa:	4b38      	ldr	r3, [pc, #224]	; (8008c8c <main+0x12c>)
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	4b38      	ldr	r3, [pc, #224]	; (8008c90 <main+0x130>)
 8008bb0:	0011      	movs	r1, r2
 8008bb2:	0018      	movs	r0, r3
 8008bb4:	f7fd fd22 	bl	80065fc <osMessageCreate>
 8008bb8:	0002      	movs	r2, r0
 8008bba:	4b36      	ldr	r3, [pc, #216]	; (8008c94 <main+0x134>)
 8008bbc:	601a      	str	r2, [r3, #0]
  ind_msg = osMessageCreate (&ind_msg_def, IndicationTaskHandle);
 8008bbe:	4b36      	ldr	r3, [pc, #216]	; (8008c98 <main+0x138>)
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	4b36      	ldr	r3, [pc, #216]	; (8008c9c <main+0x13c>)
 8008bc4:	0011      	movs	r1, r2
 8008bc6:	0018      	movs	r0, r3
 8008bc8:	f7fd fd18 	bl	80065fc <osMessageCreate>
 8008bcc:	0002      	movs	r2, r0
 8008bce:	4b34      	ldr	r3, [pc, #208]	; (8008ca0 <main+0x140>)
 8008bd0:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 64);
 8008bd2:	2174      	movs	r1, #116	; 0x74
 8008bd4:	187b      	adds	r3, r7, r1
 8008bd6:	4a33      	ldr	r2, [pc, #204]	; (8008ca4 <main+0x144>)
 8008bd8:	ca31      	ldmia	r2!, {r0, r4, r5}
 8008bda:	c331      	stmia	r3!, {r0, r4, r5}
 8008bdc:	ca31      	ldmia	r2!, {r0, r4, r5}
 8008bde:	c331      	stmia	r3!, {r0, r4, r5}
 8008be0:	6812      	ldr	r2, [r2, #0]
 8008be2:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8008be4:	187b      	adds	r3, r7, r1
 8008be6:	2100      	movs	r1, #0
 8008be8:	0018      	movs	r0, r3
 8008bea:	f7fd fc15 	bl	8006418 <osThreadCreate>
 8008bee:	0002      	movs	r2, r0
 8008bf0:	4b2d      	ldr	r3, [pc, #180]	; (8008ca8 <main+0x148>)
 8008bf2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  /* LED Control Task */
  osThreadDef(ledcontrol, LEDControlTask, osPriorityAboveNormal, 0, 64);
 8008bf4:	2158      	movs	r1, #88	; 0x58
 8008bf6:	187b      	adds	r3, r7, r1
 8008bf8:	4a2c      	ldr	r2, [pc, #176]	; (8008cac <main+0x14c>)
 8008bfa:	ca31      	ldmia	r2!, {r0, r4, r5}
 8008bfc:	c331      	stmia	r3!, {r0, r4, r5}
 8008bfe:	ca31      	ldmia	r2!, {r0, r4, r5}
 8008c00:	c331      	stmia	r3!, {r0, r4, r5}
 8008c02:	6812      	ldr	r2, [r2, #0]
 8008c04:	601a      	str	r2, [r3, #0]
  LEDControlTaskHandle = osThreadCreate(osThread(ledcontrol), NULL);
 8008c06:	187b      	adds	r3, r7, r1
 8008c08:	2100      	movs	r1, #0
 8008c0a:	0018      	movs	r0, r3
 8008c0c:	f7fd fc04 	bl	8006418 <osThreadCreate>
 8008c10:	0002      	movs	r2, r0
 8008c12:	4b1e      	ldr	r3, [pc, #120]	; (8008c8c <main+0x12c>)
 8008c14:	601a      	str	r2, [r3, #0]

  /* Monitoring Task */
  osThreadDef(monitoring, MonitorTask, osPriorityHigh, 0, 64);
 8008c16:	213c      	movs	r1, #60	; 0x3c
 8008c18:	187b      	adds	r3, r7, r1
 8008c1a:	4a25      	ldr	r2, [pc, #148]	; (8008cb0 <main+0x150>)
 8008c1c:	ca31      	ldmia	r2!, {r0, r4, r5}
 8008c1e:	c331      	stmia	r3!, {r0, r4, r5}
 8008c20:	ca31      	ldmia	r2!, {r0, r4, r5}
 8008c22:	c331      	stmia	r3!, {r0, r4, r5}
 8008c24:	6812      	ldr	r2, [r2, #0]
 8008c26:	601a      	str	r2, [r3, #0]
  MonitorTaskHandle = osThreadCreate(osThread(monitoring), NULL);
 8008c28:	187b      	adds	r3, r7, r1
 8008c2a:	2100      	movs	r1, #0
 8008c2c:	0018      	movs	r0, r3
 8008c2e:	f7fd fbf3 	bl	8006418 <osThreadCreate>
 8008c32:	0002      	movs	r2, r0
 8008c34:	4b1f      	ldr	r3, [pc, #124]	; (8008cb4 <main+0x154>)
 8008c36:	601a      	str	r2, [r3, #0]

  /* Indication Task */
  osThreadDef(indication, IndicationTask, osPriorityAboveNormal, 0, 64);
 8008c38:	2120      	movs	r1, #32
 8008c3a:	187b      	adds	r3, r7, r1
 8008c3c:	4a1e      	ldr	r2, [pc, #120]	; (8008cb8 <main+0x158>)
 8008c3e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8008c40:	c331      	stmia	r3!, {r0, r4, r5}
 8008c42:	ca31      	ldmia	r2!, {r0, r4, r5}
 8008c44:	c331      	stmia	r3!, {r0, r4, r5}
 8008c46:	6812      	ldr	r2, [r2, #0]
 8008c48:	601a      	str	r2, [r3, #0]
  IndicationTaskHandle = osThreadCreate(osThread(indication), NULL);
 8008c4a:	187b      	adds	r3, r7, r1
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	0018      	movs	r0, r3
 8008c50:	f7fd fbe2 	bl	8006418 <osThreadCreate>
 8008c54:	0002      	movs	r2, r0
 8008c56:	4b10      	ldr	r3, [pc, #64]	; (8008c98 <main+0x138>)
 8008c58:	601a      	str	r2, [r3, #0]

  /* Management Task */
  osThreadDef(management, ManagementTask, osPriorityNormal, 0, 1024);
 8008c5a:	1d3b      	adds	r3, r7, #4
 8008c5c:	4a17      	ldr	r2, [pc, #92]	; (8008cbc <main+0x15c>)
 8008c5e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008c60:	c313      	stmia	r3!, {r0, r1, r4}
 8008c62:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008c64:	c313      	stmia	r3!, {r0, r1, r4}
 8008c66:	6812      	ldr	r2, [r2, #0]
 8008c68:	601a      	str	r2, [r3, #0]
  ManagementTaskHandle = osThreadCreate(osThread(management), NULL);
 8008c6a:	1d3b      	adds	r3, r7, #4
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	0018      	movs	r0, r3
 8008c70:	f7fd fbd2 	bl	8006418 <osThreadCreate>
 8008c74:	0002      	movs	r2, r0
 8008c76:	4b12      	ldr	r3, [pc, #72]	; (8008cc0 <main+0x160>)
 8008c78:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8008c7a:	f7fd fbc5 	bl	8006408 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008c7e:	e7fe      	b.n	8008c7e <main+0x11e>
 8008c80:	20002544 	.word	0x20002544
 8008c84:	080099a9 	.word	0x080099a9
 8008c88:	08009981 	.word	0x08009981
 8008c8c:	20002538 	.word	0x20002538
 8008c90:	0800a538 	.word	0x0800a538
 8008c94:	2000253c 	.word	0x2000253c
 8008c98:	20002530 	.word	0x20002530
 8008c9c:	0800a528 	.word	0x0800a528
 8008ca0:	20002534 	.word	0x20002534
 8008ca4:	0800a37c 	.word	0x0800a37c
 8008ca8:	20002540 	.word	0x20002540
 8008cac:	0800a3a4 	.word	0x0800a3a4
 8008cb0:	0800a3cc 	.word	0x0800a3cc
 8008cb4:	2000281c 	.word	0x2000281c
 8008cb8:	0800a3f4 	.word	0x0800a3f4
 8008cbc:	0800a41c 	.word	0x0800a41c
 8008cc0:	200027e8 	.word	0x200027e8

08008cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008cc4:	b590      	push	{r4, r7, lr}
 8008cc6:	b09d      	sub	sp, #116	; 0x74
 8008cc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008cca:	2438      	movs	r4, #56	; 0x38
 8008ccc:	193b      	adds	r3, r7, r4
 8008cce:	0018      	movs	r0, r3
 8008cd0:	2338      	movs	r3, #56	; 0x38
 8008cd2:	001a      	movs	r2, r3
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	f001 faae 	bl	800a236 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008cda:	2324      	movs	r3, #36	; 0x24
 8008cdc:	18fb      	adds	r3, r7, r3
 8008cde:	0018      	movs	r0, r3
 8008ce0:	2314      	movs	r3, #20
 8008ce2:	001a      	movs	r2, r3
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	f001 faa6 	bl	800a236 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008cea:	003b      	movs	r3, r7
 8008cec:	0018      	movs	r0, r3
 8008cee:	2324      	movs	r3, #36	; 0x24
 8008cf0:	001a      	movs	r2, r3
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	f001 fa9f 	bl	800a236 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008cf8:	4b29      	ldr	r3, [pc, #164]	; (8008da0 <SystemClock_Config+0xdc>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a29      	ldr	r2, [pc, #164]	; (8008da4 <SystemClock_Config+0xe0>)
 8008cfe:	401a      	ands	r2, r3
 8008d00:	4b27      	ldr	r3, [pc, #156]	; (8008da0 <SystemClock_Config+0xdc>)
 8008d02:	2180      	movs	r1, #128	; 0x80
 8008d04:	0109      	lsls	r1, r1, #4
 8008d06:	430a      	orrs	r2, r1
 8008d08:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008d0a:	0021      	movs	r1, r4
 8008d0c:	187b      	adds	r3, r7, r1
 8008d0e:	2202      	movs	r2, #2
 8008d10:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008d12:	187b      	adds	r3, r7, r1
 8008d14:	2201      	movs	r2, #1
 8008d16:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008d18:	187b      	adds	r3, r7, r1
 8008d1a:	2210      	movs	r2, #16
 8008d1c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008d1e:	187b      	adds	r3, r7, r1
 8008d20:	2202      	movs	r2, #2
 8008d22:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008d24:	187b      	adds	r3, r7, r1
 8008d26:	2200      	movs	r2, #0
 8008d28:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8008d2a:	187b      	adds	r3, r7, r1
 8008d2c:	2280      	movs	r2, #128	; 0x80
 8008d2e:	02d2      	lsls	r2, r2, #11
 8008d30:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8008d32:	187b      	adds	r3, r7, r1
 8008d34:	2280      	movs	r2, #128	; 0x80
 8008d36:	03d2      	lsls	r2, r2, #15
 8008d38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008d3a:	187b      	adds	r3, r7, r1
 8008d3c:	0018      	movs	r0, r3
 8008d3e:	f7fb f827 	bl	8003d90 <HAL_RCC_OscConfig>
 8008d42:	1e03      	subs	r3, r0, #0
 8008d44:	d001      	beq.n	8008d4a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8008d46:	f000 fb91 	bl	800946c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008d4a:	2124      	movs	r1, #36	; 0x24
 8008d4c:	187b      	adds	r3, r7, r1
 8008d4e:	220f      	movs	r2, #15
 8008d50:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008d52:	187b      	adds	r3, r7, r1
 8008d54:	2203      	movs	r2, #3
 8008d56:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008d58:	187b      	adds	r3, r7, r1
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008d5e:	187b      	adds	r3, r7, r1
 8008d60:	2200      	movs	r2, #0
 8008d62:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008d64:	187b      	adds	r3, r7, r1
 8008d66:	2200      	movs	r2, #0
 8008d68:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8008d6a:	187b      	adds	r3, r7, r1
 8008d6c:	2101      	movs	r1, #1
 8008d6e:	0018      	movs	r0, r3
 8008d70:	f7fb fbde 	bl	8004530 <HAL_RCC_ClockConfig>
 8008d74:	1e03      	subs	r3, r0, #0
 8008d76:	d001      	beq.n	8008d7c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8008d78:	f000 fb78 	bl	800946c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008d7c:	003b      	movs	r3, r7
 8008d7e:	2201      	movs	r2, #1
 8008d80:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008d82:	003b      	movs	r3, r7
 8008d84:	2200      	movs	r2, #0
 8008d86:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008d88:	003b      	movs	r3, r7
 8008d8a:	0018      	movs	r0, r3
 8008d8c:	f7fb fde6 	bl	800495c <HAL_RCCEx_PeriphCLKConfig>
 8008d90:	1e03      	subs	r3, r0, #0
 8008d92:	d001      	beq.n	8008d98 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8008d94:	f000 fb6a 	bl	800946c <Error_Handler>
  }
}
 8008d98:	46c0      	nop			; (mov r8, r8)
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	b01d      	add	sp, #116	; 0x74
 8008d9e:	bd90      	pop	{r4, r7, pc}
 8008da0:	40007000 	.word	0x40007000
 8008da4:	ffffe7ff 	.word	0xffffe7ff

08008da8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	af00      	add	r7, sp, #0
  /* TIM21_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM21_IRQn, 3, 0);
 8008dac:	2200      	movs	r2, #0
 8008dae:	2103      	movs	r1, #3
 8008db0:	2014      	movs	r0, #20
 8008db2:	f7fa f87b 	bl	8002eac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8008db6:	2014      	movs	r0, #20
 8008db8:	f7fa f88d 	bl	8002ed6 <HAL_NVIC_EnableIRQ>
}
 8008dbc:	46c0      	nop			; (mov r8, r8)
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
	...

08008dc4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC_Init(void)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008dca:	003b      	movs	r3, r7
 8008dcc:	0018      	movs	r0, r3
 8008dce:	2308      	movs	r3, #8
 8008dd0:	001a      	movs	r2, r3
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	f001 fa2f 	bl	800a236 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8008dd8:	4b44      	ldr	r3, [pc, #272]	; (8008eec <MX_ADC_Init+0x128>)
 8008dda:	4a45      	ldr	r2, [pc, #276]	; (8008ef0 <MX_ADC_Init+0x12c>)
 8008ddc:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8008dde:	4b43      	ldr	r3, [pc, #268]	; (8008eec <MX_ADC_Init+0x128>)
 8008de0:	2200      	movs	r2, #0
 8008de2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8008de4:	4b41      	ldr	r3, [pc, #260]	; (8008eec <MX_ADC_Init+0x128>)
 8008de6:	2280      	movs	r2, #128	; 0x80
 8008de8:	0312      	lsls	r2, r2, #12
 8008dea:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8008dec:	4b3f      	ldr	r3, [pc, #252]	; (8008eec <MX_ADC_Init+0x128>)
 8008dee:	2200      	movs	r2, #0
 8008df0:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_39CYCLES_5;
 8008df2:	4b3e      	ldr	r3, [pc, #248]	; (8008eec <MX_ADC_Init+0x128>)
 8008df4:	2205      	movs	r2, #5
 8008df6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8008df8:	4b3c      	ldr	r3, [pc, #240]	; (8008eec <MX_ADC_Init+0x128>)
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008dfe:	4b3b      	ldr	r3, [pc, #236]	; (8008eec <MX_ADC_Init+0x128>)
 8008e00:	2200      	movs	r2, #0
 8008e02:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8008e04:	4b39      	ldr	r3, [pc, #228]	; (8008eec <MX_ADC_Init+0x128>)
 8008e06:	2220      	movs	r2, #32
 8008e08:	2101      	movs	r1, #1
 8008e0a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8008e0c:	4b37      	ldr	r3, [pc, #220]	; (8008eec <MX_ADC_Init+0x128>)
 8008e0e:	2221      	movs	r2, #33	; 0x21
 8008e10:	2100      	movs	r1, #0
 8008e12:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008e14:	4b35      	ldr	r3, [pc, #212]	; (8008eec <MX_ADC_Init+0x128>)
 8008e16:	2200      	movs	r2, #0
 8008e18:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008e1a:	4b34      	ldr	r3, [pc, #208]	; (8008eec <MX_ADC_Init+0x128>)
 8008e1c:	22c2      	movs	r2, #194	; 0xc2
 8008e1e:	32ff      	adds	r2, #255	; 0xff
 8008e20:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8008e22:	4b32      	ldr	r3, [pc, #200]	; (8008eec <MX_ADC_Init+0x128>)
 8008e24:	222c      	movs	r2, #44	; 0x2c
 8008e26:	2101      	movs	r1, #1
 8008e28:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8008e2a:	4b30      	ldr	r3, [pc, #192]	; (8008eec <MX_ADC_Init+0x128>)
 8008e2c:	2208      	movs	r2, #8
 8008e2e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8008e30:	4b2e      	ldr	r3, [pc, #184]	; (8008eec <MX_ADC_Init+0x128>)
 8008e32:	2280      	movs	r2, #128	; 0x80
 8008e34:	0152      	lsls	r2, r2, #5
 8008e36:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8008e38:	4b2c      	ldr	r3, [pc, #176]	; (8008eec <MX_ADC_Init+0x128>)
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8008e3e:	4b2b      	ldr	r3, [pc, #172]	; (8008eec <MX_ADC_Init+0x128>)
 8008e40:	2200      	movs	r2, #0
 8008e42:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8008e44:	4b29      	ldr	r3, [pc, #164]	; (8008eec <MX_ADC_Init+0x128>)
 8008e46:	2200      	movs	r2, #0
 8008e48:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8008e4a:	4b28      	ldr	r3, [pc, #160]	; (8008eec <MX_ADC_Init+0x128>)
 8008e4c:	0018      	movs	r0, r3
 8008e4e:	f7f9 fb4f 	bl	80024f0 <HAL_ADC_Init>
 8008e52:	1e03      	subs	r3, r0, #0
 8008e54:	d001      	beq.n	8008e5a <MX_ADC_Init+0x96>
  {
    Error_Handler();
 8008e56:	f000 fb09 	bl	800946c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8008e5a:	003b      	movs	r3, r7
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008e60:	003b      	movs	r3, r7
 8008e62:	2280      	movs	r2, #128	; 0x80
 8008e64:	0152      	lsls	r2, r2, #5
 8008e66:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8008e68:	003a      	movs	r2, r7
 8008e6a:	4b20      	ldr	r3, [pc, #128]	; (8008eec <MX_ADC_Init+0x128>)
 8008e6c:	0011      	movs	r1, r2
 8008e6e:	0018      	movs	r0, r3
 8008e70:	f7f9 fe10 	bl	8002a94 <HAL_ADC_ConfigChannel>
 8008e74:	1e03      	subs	r3, r0, #0
 8008e76:	d001      	beq.n	8008e7c <MX_ADC_Init+0xb8>
  {
    Error_Handler();
 8008e78:	f000 faf8 	bl	800946c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8008e7c:	003b      	movs	r3, r7
 8008e7e:	4a1d      	ldr	r2, [pc, #116]	; (8008ef4 <MX_ADC_Init+0x130>)
 8008e80:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8008e82:	003a      	movs	r2, r7
 8008e84:	4b19      	ldr	r3, [pc, #100]	; (8008eec <MX_ADC_Init+0x128>)
 8008e86:	0011      	movs	r1, r2
 8008e88:	0018      	movs	r0, r3
 8008e8a:	f7f9 fe03 	bl	8002a94 <HAL_ADC_ConfigChannel>
 8008e8e:	1e03      	subs	r3, r0, #0
 8008e90:	d001      	beq.n	8008e96 <MX_ADC_Init+0xd2>
  {
    Error_Handler();
 8008e92:	f000 faeb 	bl	800946c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8008e96:	003b      	movs	r3, r7
 8008e98:	4a17      	ldr	r2, [pc, #92]	; (8008ef8 <MX_ADC_Init+0x134>)
 8008e9a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8008e9c:	003a      	movs	r2, r7
 8008e9e:	4b13      	ldr	r3, [pc, #76]	; (8008eec <MX_ADC_Init+0x128>)
 8008ea0:	0011      	movs	r1, r2
 8008ea2:	0018      	movs	r0, r3
 8008ea4:	f7f9 fdf6 	bl	8002a94 <HAL_ADC_ConfigChannel>
 8008ea8:	1e03      	subs	r3, r0, #0
 8008eaa:	d001      	beq.n	8008eb0 <MX_ADC_Init+0xec>
  {
    Error_Handler();
 8008eac:	f000 fade 	bl	800946c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8008eb0:	003b      	movs	r3, r7
 8008eb2:	4a12      	ldr	r2, [pc, #72]	; (8008efc <MX_ADC_Init+0x138>)
 8008eb4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8008eb6:	003a      	movs	r2, r7
 8008eb8:	4b0c      	ldr	r3, [pc, #48]	; (8008eec <MX_ADC_Init+0x128>)
 8008eba:	0011      	movs	r1, r2
 8008ebc:	0018      	movs	r0, r3
 8008ebe:	f7f9 fde9 	bl	8002a94 <HAL_ADC_ConfigChannel>
 8008ec2:	1e03      	subs	r3, r0, #0
 8008ec4:	d001      	beq.n	8008eca <MX_ADC_Init+0x106>
  {
    Error_Handler();
 8008ec6:	f000 fad1 	bl	800946c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8008eca:	003b      	movs	r3, r7
 8008ecc:	4a0c      	ldr	r2, [pc, #48]	; (8008f00 <MX_ADC_Init+0x13c>)
 8008ece:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8008ed0:	003a      	movs	r2, r7
 8008ed2:	4b06      	ldr	r3, [pc, #24]	; (8008eec <MX_ADC_Init+0x128>)
 8008ed4:	0011      	movs	r1, r2
 8008ed6:	0018      	movs	r0, r3
 8008ed8:	f7f9 fddc 	bl	8002a94 <HAL_ADC_ConfigChannel>
 8008edc:	1e03      	subs	r3, r0, #0
 8008ede:	d001      	beq.n	8008ee4 <MX_ADC_Init+0x120>
  {
    Error_Handler();
 8008ee0:	f000 fac4 	bl	800946c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8008ee4:	46c0      	nop			; (mov r8, r8)
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	b002      	add	sp, #8
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	20002714 	.word	0x20002714
 8008ef0:	40012400 	.word	0x40012400
 8008ef4:	04000002 	.word	0x04000002
 8008ef8:	08000004 	.word	0x08000004
 8008efc:	0c000008 	.word	0x0c000008
 8008f00:	10000010 	.word	0x10000010

08008f04 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8008f08:	4b0e      	ldr	r3, [pc, #56]	; (8008f44 <MX_CRC_Init+0x40>)
 8008f0a:	4a0f      	ldr	r2, [pc, #60]	; (8008f48 <MX_CRC_Init+0x44>)
 8008f0c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8008f0e:	4b0d      	ldr	r3, [pc, #52]	; (8008f44 <MX_CRC_Init+0x40>)
 8008f10:	2200      	movs	r2, #0
 8008f12:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8008f14:	4b0b      	ldr	r3, [pc, #44]	; (8008f44 <MX_CRC_Init+0x40>)
 8008f16:	2200      	movs	r2, #0
 8008f18:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8008f1a:	4b0a      	ldr	r3, [pc, #40]	; (8008f44 <MX_CRC_Init+0x40>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8008f20:	4b08      	ldr	r3, [pc, #32]	; (8008f44 <MX_CRC_Init+0x40>)
 8008f22:	2200      	movs	r2, #0
 8008f24:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8008f26:	4b07      	ldr	r3, [pc, #28]	; (8008f44 <MX_CRC_Init+0x40>)
 8008f28:	2201      	movs	r2, #1
 8008f2a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8008f2c:	4b05      	ldr	r3, [pc, #20]	; (8008f44 <MX_CRC_Init+0x40>)
 8008f2e:	0018      	movs	r0, r3
 8008f30:	f7f9 ffe2 	bl	8002ef8 <HAL_CRC_Init>
 8008f34:	1e03      	subs	r3, r0, #0
 8008f36:	d001      	beq.n	8008f3c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8008f38:	f000 fa98 	bl	800946c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8008f3c:	46c0      	nop			; (mov r8, r8)
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	46c0      	nop			; (mov r8, r8)
 8008f44:	20002558 	.word	0x20002558
 8008f48:	40023000 	.word	0x40023000

08008f4c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008f52:	003b      	movs	r3, r7
 8008f54:	0018      	movs	r0, r3
 8008f56:	2308      	movs	r3, #8
 8008f58:	001a      	movs	r2, r3
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	f001 f96b 	bl	800a236 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8008f60:	4b15      	ldr	r3, [pc, #84]	; (8008fb8 <MX_TIM7_Init+0x6c>)
 8008f62:	4a16      	ldr	r2, [pc, #88]	; (8008fbc <MX_TIM7_Init+0x70>)
 8008f64:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 32;
 8008f66:	4b14      	ldr	r3, [pc, #80]	; (8008fb8 <MX_TIM7_Init+0x6c>)
 8008f68:	2220      	movs	r2, #32
 8008f6a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008f6c:	4b12      	ldr	r3, [pc, #72]	; (8008fb8 <MX_TIM7_Init+0x6c>)
 8008f6e:	2200      	movs	r2, #0
 8008f70:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000;
 8008f72:	4b11      	ldr	r3, [pc, #68]	; (8008fb8 <MX_TIM7_Init+0x6c>)
 8008f74:	4a12      	ldr	r2, [pc, #72]	; (8008fc0 <MX_TIM7_Init+0x74>)
 8008f76:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008f78:	4b0f      	ldr	r3, [pc, #60]	; (8008fb8 <MX_TIM7_Init+0x6c>)
 8008f7a:	2280      	movs	r2, #128	; 0x80
 8008f7c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8008f7e:	4b0e      	ldr	r3, [pc, #56]	; (8008fb8 <MX_TIM7_Init+0x6c>)
 8008f80:	0018      	movs	r0, r3
 8008f82:	f7fb fe43 	bl	8004c0c <HAL_TIM_Base_Init>
 8008f86:	1e03      	subs	r3, r0, #0
 8008f88:	d001      	beq.n	8008f8e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8008f8a:	f000 fa6f 	bl	800946c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008f8e:	003b      	movs	r3, r7
 8008f90:	2200      	movs	r2, #0
 8008f92:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008f94:	003b      	movs	r3, r7
 8008f96:	2200      	movs	r2, #0
 8008f98:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8008f9a:	003a      	movs	r2, r7
 8008f9c:	4b06      	ldr	r3, [pc, #24]	; (8008fb8 <MX_TIM7_Init+0x6c>)
 8008f9e:	0011      	movs	r1, r2
 8008fa0:	0018      	movs	r0, r3
 8008fa2:	f7fc f961 	bl	8005268 <HAL_TIMEx_MasterConfigSynchronization>
 8008fa6:	1e03      	subs	r3, r0, #0
 8008fa8:	d001      	beq.n	8008fae <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8008faa:	f000 fa5f 	bl	800946c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8008fae:	46c0      	nop			; (mov r8, r8)
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	b002      	add	sp, #8
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	46c0      	nop			; (mov r8, r8)
 8008fb8:	20002770 	.word	0x20002770
 8008fbc:	40001400 	.word	0x40001400
 8008fc0:	00002710 	.word	0x00002710

08008fc4 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM21_Init(void)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008fca:	2308      	movs	r3, #8
 8008fcc:	18fb      	adds	r3, r7, r3
 8008fce:	0018      	movs	r0, r3
 8008fd0:	2310      	movs	r3, #16
 8008fd2:	001a      	movs	r2, r3
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	f001 f92e 	bl	800a236 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008fda:	003b      	movs	r3, r7
 8008fdc:	0018      	movs	r0, r3
 8008fde:	2308      	movs	r3, #8
 8008fe0:	001a      	movs	r2, r3
 8008fe2:	2100      	movs	r1, #0
 8008fe4:	f001 f927 	bl	800a236 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8008fe8:	4b1e      	ldr	r3, [pc, #120]	; (8009064 <MX_TIM21_Init+0xa0>)
 8008fea:	4a1f      	ldr	r2, [pc, #124]	; (8009068 <MX_TIM21_Init+0xa4>)
 8008fec:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 32000-1;
 8008fee:	4b1d      	ldr	r3, [pc, #116]	; (8009064 <MX_TIM21_Init+0xa0>)
 8008ff0:	4a1e      	ldr	r2, [pc, #120]	; (800906c <MX_TIM21_Init+0xa8>)
 8008ff2:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ff4:	4b1b      	ldr	r3, [pc, #108]	; (8009064 <MX_TIM21_Init+0xa0>)
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 100-1;
 8008ffa:	4b1a      	ldr	r3, [pc, #104]	; (8009064 <MX_TIM21_Init+0xa0>)
 8008ffc:	2263      	movs	r2, #99	; 0x63
 8008ffe:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009000:	4b18      	ldr	r3, [pc, #96]	; (8009064 <MX_TIM21_Init+0xa0>)
 8009002:	2200      	movs	r2, #0
 8009004:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009006:	4b17      	ldr	r3, [pc, #92]	; (8009064 <MX_TIM21_Init+0xa0>)
 8009008:	2280      	movs	r2, #128	; 0x80
 800900a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 800900c:	4b15      	ldr	r3, [pc, #84]	; (8009064 <MX_TIM21_Init+0xa0>)
 800900e:	0018      	movs	r0, r3
 8009010:	f7fb fdfc 	bl	8004c0c <HAL_TIM_Base_Init>
 8009014:	1e03      	subs	r3, r0, #0
 8009016:	d001      	beq.n	800901c <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8009018:	f000 fa28 	bl	800946c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800901c:	2108      	movs	r1, #8
 800901e:	187b      	adds	r3, r7, r1
 8009020:	2280      	movs	r2, #128	; 0x80
 8009022:	0152      	lsls	r2, r2, #5
 8009024:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8009026:	187a      	adds	r2, r7, r1
 8009028:	4b0e      	ldr	r3, [pc, #56]	; (8009064 <MX_TIM21_Init+0xa0>)
 800902a:	0011      	movs	r1, r2
 800902c:	0018      	movs	r0, r3
 800902e:	f7fb ff45 	bl	8004ebc <HAL_TIM_ConfigClockSource>
 8009032:	1e03      	subs	r3, r0, #0
 8009034:	d001      	beq.n	800903a <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 8009036:	f000 fa19 	bl	800946c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800903a:	003b      	movs	r3, r7
 800903c:	2200      	movs	r2, #0
 800903e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009040:	003b      	movs	r3, r7
 8009042:	2200      	movs	r2, #0
 8009044:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8009046:	003a      	movs	r2, r7
 8009048:	4b06      	ldr	r3, [pc, #24]	; (8009064 <MX_TIM21_Init+0xa0>)
 800904a:	0011      	movs	r1, r2
 800904c:	0018      	movs	r0, r3
 800904e:	f7fc f90b 	bl	8005268 <HAL_TIMEx_MasterConfigSynchronization>
 8009052:	1e03      	subs	r3, r0, #0
 8009054:	d001      	beq.n	800905a <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8009056:	f000 fa09 	bl	800946c <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 800905a:	46c0      	nop			; (mov r8, r8)
 800905c:	46bd      	mov	sp, r7
 800905e:	b006      	add	sp, #24
 8009060:	bd80      	pop	{r7, pc}
 8009062:	46c0      	nop			; (mov r8, r8)
 8009064:	200027ac 	.word	0x200027ac
 8009068:	40010800 	.word	0x40010800
 800906c:	00007cff 	.word	0x00007cff

08009070 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM22_Init(void)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b086      	sub	sp, #24
 8009074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009076:	2308      	movs	r3, #8
 8009078:	18fb      	adds	r3, r7, r3
 800907a:	0018      	movs	r0, r3
 800907c:	2310      	movs	r3, #16
 800907e:	001a      	movs	r2, r3
 8009080:	2100      	movs	r1, #0
 8009082:	f001 f8d8 	bl	800a236 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009086:	003b      	movs	r3, r7
 8009088:	0018      	movs	r0, r3
 800908a:	2308      	movs	r3, #8
 800908c:	001a      	movs	r2, r3
 800908e:	2100      	movs	r1, #0
 8009090:	f001 f8d1 	bl	800a236 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8009094:	4b20      	ldr	r3, [pc, #128]	; (8009118 <MX_TIM22_Init+0xa8>)
 8009096:	4a21      	ldr	r2, [pc, #132]	; (800911c <MX_TIM22_Init+0xac>)
 8009098:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 32-1;
 800909a:	4b1f      	ldr	r3, [pc, #124]	; (8009118 <MX_TIM22_Init+0xa8>)
 800909c:	221f      	movs	r2, #31
 800909e:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 80090a0:	4b1d      	ldr	r3, [pc, #116]	; (8009118 <MX_TIM22_Init+0xa8>)
 80090a2:	2200      	movs	r2, #0
 80090a4:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 0xFFFF-1;
 80090a6:	4b1c      	ldr	r3, [pc, #112]	; (8009118 <MX_TIM22_Init+0xa8>)
 80090a8:	4a1d      	ldr	r2, [pc, #116]	; (8009120 <MX_TIM22_Init+0xb0>)
 80090aa:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80090ac:	4b1a      	ldr	r3, [pc, #104]	; (8009118 <MX_TIM22_Init+0xa8>)
 80090ae:	2200      	movs	r2, #0
 80090b0:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80090b2:	4b19      	ldr	r3, [pc, #100]	; (8009118 <MX_TIM22_Init+0xa8>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 80090b8:	4b17      	ldr	r3, [pc, #92]	; (8009118 <MX_TIM22_Init+0xa8>)
 80090ba:	0018      	movs	r0, r3
 80090bc:	f7fb fda6 	bl	8004c0c <HAL_TIM_Base_Init>
 80090c0:	1e03      	subs	r3, r0, #0
 80090c2:	d001      	beq.n	80090c8 <MX_TIM22_Init+0x58>
  {
    Error_Handler();
 80090c4:	f000 f9d2 	bl	800946c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80090c8:	2108      	movs	r1, #8
 80090ca:	187b      	adds	r3, r7, r1
 80090cc:	2280      	movs	r2, #128	; 0x80
 80090ce:	0152      	lsls	r2, r2, #5
 80090d0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 80090d2:	187a      	adds	r2, r7, r1
 80090d4:	4b10      	ldr	r3, [pc, #64]	; (8009118 <MX_TIM22_Init+0xa8>)
 80090d6:	0011      	movs	r1, r2
 80090d8:	0018      	movs	r0, r3
 80090da:	f7fb feef 	bl	8004ebc <HAL_TIM_ConfigClockSource>
 80090de:	1e03      	subs	r3, r0, #0
 80090e0:	d001      	beq.n	80090e6 <MX_TIM22_Init+0x76>
  {
    Error_Handler();
 80090e2:	f000 f9c3 	bl	800946c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80090e6:	003b      	movs	r3, r7
 80090e8:	2200      	movs	r2, #0
 80090ea:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80090ec:	003b      	movs	r3, r7
 80090ee:	2200      	movs	r2, #0
 80090f0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 80090f2:	003a      	movs	r2, r7
 80090f4:	4b08      	ldr	r3, [pc, #32]	; (8009118 <MX_TIM22_Init+0xa8>)
 80090f6:	0011      	movs	r1, r2
 80090f8:	0018      	movs	r0, r3
 80090fa:	f7fc f8b5 	bl	8005268 <HAL_TIMEx_MasterConfigSynchronization>
 80090fe:	1e03      	subs	r3, r0, #0
 8009100:	d001      	beq.n	8009106 <MX_TIM22_Init+0x96>
  {
    Error_Handler();
 8009102:	f000 f9b3 	bl	800946c <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */
  HAL_TIM_Base_Start(&htim22);
 8009106:	4b04      	ldr	r3, [pc, #16]	; (8009118 <MX_TIM22_Init+0xa8>)
 8009108:	0018      	movs	r0, r3
 800910a:	f7fb fdab 	bl	8004c64 <HAL_TIM_Base_Start>
  /* USER CODE END TIM22_Init 2 */

}
 800910e:	46c0      	nop			; (mov r8, r8)
 8009110:	46bd      	mov	sp, r7
 8009112:	b006      	add	sp, #24
 8009114:	bd80      	pop	{r7, pc}
 8009116:	46c0      	nop			; (mov r8, r8)
 8009118:	2000260c 	.word	0x2000260c
 800911c:	40011400 	.word	0x40011400
 8009120:	0000fffe 	.word	0x0000fffe

08009124 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009128:	4b14      	ldr	r3, [pc, #80]	; (800917c <MX_USART1_UART_Init+0x58>)
 800912a:	4a15      	ldr	r2, [pc, #84]	; (8009180 <MX_USART1_UART_Init+0x5c>)
 800912c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800912e:	4b13      	ldr	r3, [pc, #76]	; (800917c <MX_USART1_UART_Init+0x58>)
 8009130:	22e1      	movs	r2, #225	; 0xe1
 8009132:	0252      	lsls	r2, r2, #9
 8009134:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009136:	4b11      	ldr	r3, [pc, #68]	; (800917c <MX_USART1_UART_Init+0x58>)
 8009138:	2200      	movs	r2, #0
 800913a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800913c:	4b0f      	ldr	r3, [pc, #60]	; (800917c <MX_USART1_UART_Init+0x58>)
 800913e:	2200      	movs	r2, #0
 8009140:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009142:	4b0e      	ldr	r3, [pc, #56]	; (800917c <MX_USART1_UART_Init+0x58>)
 8009144:	2200      	movs	r2, #0
 8009146:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009148:	4b0c      	ldr	r3, [pc, #48]	; (800917c <MX_USART1_UART_Init+0x58>)
 800914a:	220c      	movs	r2, #12
 800914c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800914e:	4b0b      	ldr	r3, [pc, #44]	; (800917c <MX_USART1_UART_Init+0x58>)
 8009150:	2200      	movs	r2, #0
 8009152:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009154:	4b09      	ldr	r3, [pc, #36]	; (800917c <MX_USART1_UART_Init+0x58>)
 8009156:	2200      	movs	r2, #0
 8009158:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800915a:	4b08      	ldr	r3, [pc, #32]	; (800917c <MX_USART1_UART_Init+0x58>)
 800915c:	2200      	movs	r2, #0
 800915e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009160:	4b06      	ldr	r3, [pc, #24]	; (800917c <MX_USART1_UART_Init+0x58>)
 8009162:	2200      	movs	r2, #0
 8009164:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009166:	4b05      	ldr	r3, [pc, #20]	; (800917c <MX_USART1_UART_Init+0x58>)
 8009168:	0018      	movs	r0, r3
 800916a:	f7fc f8c1 	bl	80052f0 <HAL_UART_Init>
 800916e:	1e03      	subs	r3, r0, #0
 8009170:	d001      	beq.n	8009176 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8009172:	f000 f97b 	bl	800946c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009176:	46c0      	nop			; (mov r8, r8)
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	20002648 	.word	0x20002648
 8009180:	40013800 	.word	0x40013800

08009184 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800918a:	4b10      	ldr	r3, [pc, #64]	; (80091cc <MX_DMA_Init+0x48>)
 800918c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800918e:	4b0f      	ldr	r3, [pc, #60]	; (80091cc <MX_DMA_Init+0x48>)
 8009190:	2101      	movs	r1, #1
 8009192:	430a      	orrs	r2, r1
 8009194:	631a      	str	r2, [r3, #48]	; 0x30
 8009196:	4b0d      	ldr	r3, [pc, #52]	; (80091cc <MX_DMA_Init+0x48>)
 8009198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800919a:	2201      	movs	r2, #1
 800919c:	4013      	ands	r3, r2
 800919e:	607b      	str	r3, [r7, #4]
 80091a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80091a2:	2200      	movs	r2, #0
 80091a4:	2103      	movs	r1, #3
 80091a6:	2009      	movs	r0, #9
 80091a8:	f7f9 fe80 	bl	8002eac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80091ac:	2009      	movs	r0, #9
 80091ae:	f7f9 fe92 	bl	8002ed6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 80091b2:	2200      	movs	r2, #0
 80091b4:	2103      	movs	r1, #3
 80091b6:	200a      	movs	r0, #10
 80091b8:	f7f9 fe78 	bl	8002eac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80091bc:	200a      	movs	r0, #10
 80091be:	f7f9 fe8a 	bl	8002ed6 <HAL_NVIC_EnableIRQ>

}
 80091c2:	46c0      	nop			; (mov r8, r8)
 80091c4:	46bd      	mov	sp, r7
 80091c6:	b002      	add	sp, #8
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	46c0      	nop			; (mov r8, r8)
 80091cc:	40021000 	.word	0x40021000

080091d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80091d0:	b590      	push	{r4, r7, lr}
 80091d2:	b089      	sub	sp, #36	; 0x24
 80091d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091d6:	240c      	movs	r4, #12
 80091d8:	193b      	adds	r3, r7, r4
 80091da:	0018      	movs	r0, r3
 80091dc:	2314      	movs	r3, #20
 80091de:	001a      	movs	r2, r3
 80091e0:	2100      	movs	r1, #0
 80091e2:	f001 f828 	bl	800a236 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80091e6:	4b45      	ldr	r3, [pc, #276]	; (80092fc <MX_GPIO_Init+0x12c>)
 80091e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ea:	4b44      	ldr	r3, [pc, #272]	; (80092fc <MX_GPIO_Init+0x12c>)
 80091ec:	2101      	movs	r1, #1
 80091ee:	430a      	orrs	r2, r1
 80091f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80091f2:	4b42      	ldr	r3, [pc, #264]	; (80092fc <MX_GPIO_Init+0x12c>)
 80091f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f6:	2201      	movs	r2, #1
 80091f8:	4013      	ands	r3, r2
 80091fa:	60bb      	str	r3, [r7, #8]
 80091fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80091fe:	4b3f      	ldr	r3, [pc, #252]	; (80092fc <MX_GPIO_Init+0x12c>)
 8009200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009202:	4b3e      	ldr	r3, [pc, #248]	; (80092fc <MX_GPIO_Init+0x12c>)
 8009204:	2102      	movs	r1, #2
 8009206:	430a      	orrs	r2, r1
 8009208:	62da      	str	r2, [r3, #44]	; 0x2c
 800920a:	4b3c      	ldr	r3, [pc, #240]	; (80092fc <MX_GPIO_Init+0x12c>)
 800920c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920e:	2202      	movs	r2, #2
 8009210:	4013      	ands	r3, r2
 8009212:	607b      	str	r3, [r7, #4]
 8009214:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ON_OFF_Pin|RESET_Pin|VMON_CLK_Pin, GPIO_PIN_RESET);
 8009216:	493a      	ldr	r1, [pc, #232]	; (8009300 <MX_GPIO_Init+0x130>)
 8009218:	23a0      	movs	r3, #160	; 0xa0
 800921a:	05db      	lsls	r3, r3, #23
 800921c:	2200      	movs	r2, #0
 800921e:	0018      	movs	r0, r3
 8009220:	f7fa fd87 	bl	8003d32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDO_OFF_GPIO_Port, LDO_OFF_Pin, GPIO_PIN_SET);
 8009224:	23a0      	movs	r3, #160	; 0xa0
 8009226:	05db      	lsls	r3, r3, #23
 8009228:	2201      	movs	r2, #1
 800922a:	2140      	movs	r1, #64	; 0x40
 800922c:	0018      	movs	r0, r3
 800922e:	f7fa fd80 	bl	8003d32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_CTRL_Pin|CHR_CTRL_Pin, GPIO_PIN_RESET);
 8009232:	4b34      	ldr	r3, [pc, #208]	; (8009304 <MX_GPIO_Init+0x134>)
 8009234:	2200      	movs	r2, #0
 8009236:	210a      	movs	r1, #10
 8009238:	0018      	movs	r0, r3
 800923a:	f7fa fd7a 	bl	8003d32 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ON_OFF_Pin LDO_OFF_Pin RESET_Pin */
  GPIO_InitStruct.Pin = ON_OFF_Pin|LDO_OFF_Pin|RESET_Pin;
 800923e:	193b      	adds	r3, r7, r4
 8009240:	22e0      	movs	r2, #224	; 0xe0
 8009242:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009244:	193b      	adds	r3, r7, r4
 8009246:	2201      	movs	r2, #1
 8009248:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800924a:	193b      	adds	r3, r7, r4
 800924c:	2202      	movs	r2, #2
 800924e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009250:	193b      	adds	r3, r7, r4
 8009252:	2200      	movs	r2, #0
 8009254:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009256:	193a      	adds	r2, r7, r4
 8009258:	23a0      	movs	r3, #160	; 0xa0
 800925a:	05db      	lsls	r3, r3, #23
 800925c:	0011      	movs	r1, r2
 800925e:	0018      	movs	r0, r3
 8009260:	f7fa fbcc 	bl	80039fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LDO_OK_Pin STAT2_Pin STAT1_Pin */
  GPIO_InitStruct.Pin = LDO_OK_Pin|STAT2_Pin|STAT1_Pin;
 8009264:	193b      	adds	r3, r7, r4
 8009266:	2231      	movs	r2, #49	; 0x31
 8009268:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800926a:	193b      	adds	r3, r7, r4
 800926c:	2200      	movs	r2, #0
 800926e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009270:	193b      	adds	r3, r7, r4
 8009272:	2201      	movs	r2, #1
 8009274:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009276:	193b      	adds	r3, r7, r4
 8009278:	4a22      	ldr	r2, [pc, #136]	; (8009304 <MX_GPIO_Init+0x134>)
 800927a:	0019      	movs	r1, r3
 800927c:	0010      	movs	r0, r2
 800927e:	f7fa fbbd 	bl	80039fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_CTRL_Pin CHR_CTRL_Pin */
  GPIO_InitStruct.Pin = LED_CTRL_Pin|CHR_CTRL_Pin;
 8009282:	193b      	adds	r3, r7, r4
 8009284:	220a      	movs	r2, #10
 8009286:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009288:	193b      	adds	r3, r7, r4
 800928a:	2201      	movs	r2, #1
 800928c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800928e:	193b      	adds	r3, r7, r4
 8009290:	2202      	movs	r2, #2
 8009292:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009294:	193b      	adds	r3, r7, r4
 8009296:	2200      	movs	r2, #0
 8009298:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800929a:	193b      	adds	r3, r7, r4
 800929c:	4a19      	ldr	r2, [pc, #100]	; (8009304 <MX_GPIO_Init+0x134>)
 800929e:	0019      	movs	r1, r3
 80092a0:	0010      	movs	r0, r2
 80092a2:	f7fa fbab 	bl	80039fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_IND_Pin */
  GPIO_InitStruct.Pin = LED_IND_Pin;
 80092a6:	193b      	adds	r3, r7, r4
 80092a8:	2280      	movs	r2, #128	; 0x80
 80092aa:	0052      	lsls	r2, r2, #1
 80092ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80092ae:	193b      	adds	r3, r7, r4
 80092b0:	2200      	movs	r2, #0
 80092b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092b4:	193b      	adds	r3, r7, r4
 80092b6:	2200      	movs	r2, #0
 80092b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LED_IND_GPIO_Port, &GPIO_InitStruct);
 80092ba:	193a      	adds	r2, r7, r4
 80092bc:	23a0      	movs	r3, #160	; 0xa0
 80092be:	05db      	lsls	r3, r3, #23
 80092c0:	0011      	movs	r1, r2
 80092c2:	0018      	movs	r0, r3
 80092c4:	f7fa fb9a 	bl	80039fc <HAL_GPIO_Init>

  /*Configure GPIO pin : VMON_CLK_Pin */
  GPIO_InitStruct.Pin = VMON_CLK_Pin;
 80092c8:	0021      	movs	r1, r4
 80092ca:	187b      	adds	r3, r7, r1
 80092cc:	2280      	movs	r2, #128	; 0x80
 80092ce:	0212      	lsls	r2, r2, #8
 80092d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80092d2:	187b      	adds	r3, r7, r1
 80092d4:	2201      	movs	r2, #1
 80092d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092d8:	187b      	adds	r3, r7, r1
 80092da:	2200      	movs	r2, #0
 80092dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092de:	187b      	adds	r3, r7, r1
 80092e0:	2200      	movs	r2, #0
 80092e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(VMON_CLK_GPIO_Port, &GPIO_InitStruct);
 80092e4:	187a      	adds	r2, r7, r1
 80092e6:	23a0      	movs	r3, #160	; 0xa0
 80092e8:	05db      	lsls	r3, r3, #23
 80092ea:	0011      	movs	r1, r2
 80092ec:	0018      	movs	r0, r3
 80092ee:	f7fa fb85 	bl	80039fc <HAL_GPIO_Init>

}
 80092f2:	46c0      	nop			; (mov r8, r8)
 80092f4:	46bd      	mov	sp, r7
 80092f6:	b009      	add	sp, #36	; 0x24
 80092f8:	bd90      	pop	{r4, r7, pc}
 80092fa:	46c0      	nop			; (mov r8, r8)
 80092fc:	40021000 	.word	0x40021000
 8009300:	000080a0 	.word	0x000080a0
 8009304:	50000400 	.word	0x50000400

08009308 <eeprom_ram_init>:

/* USER CODE BEGIN 4 */
void eeprom_ram_init(EEPROMStorageTypDef *eeprom)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
	uint32_t crc;

	/*Copy data from EEPROM*/
	memcpy(eeprom, (uint32_t*)EEPROM_BASE_ADDRESS, sizeof(EEPROMStorageTypDef));
 8009310:	4918      	ldr	r1, [pc, #96]	; (8009374 <eeprom_ram_init+0x6c>)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2214      	movs	r2, #20
 8009316:	0018      	movs	r0, r3
 8009318:	f000 ff84 	bl	800a224 <memcpy>

	/*Calculate the CRC*/
	crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)eeprom, sizeof(EEPROMStorageTypDef)-sizeof(uint32_t));
 800931c:	6879      	ldr	r1, [r7, #4]
 800931e:	4b16      	ldr	r3, [pc, #88]	; (8009378 <eeprom_ram_init+0x70>)
 8009320:	2210      	movs	r2, #16
 8009322:	0018      	movs	r0, r3
 8009324:	f7f9 fe4e 	bl	8002fc4 <HAL_CRC_Calculate>
 8009328:	0003      	movs	r3, r0
 800932a:	60fb      	str	r3, [r7, #12]

	/*Initialize defaults if CRC is wrong*/
	if(crc != eeprom->crc)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	68fa      	ldr	r2, [r7, #12]
 8009332:	429a      	cmp	r2, r3
 8009334:	d015      	beq.n	8009362 <eeprom_ram_init+0x5a>
	{
		eeprom->batt_full_mah = FULL_BATT_MAH;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	22c8      	movs	r2, #200	; 0xc8
 800933a:	0192      	lsls	r2, r2, #6
 800933c:	815a      	strh	r2, [r3, #10]
		eeprom->batt_full_mv = FULL_BATT_MV;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4a0e      	ldr	r2, [pc, #56]	; (800937c <eeprom_ram_init+0x74>)
 8009342:	811a      	strh	r2, [r3, #8]
		eeprom->batt_low_mv = BATT_LOW_MV;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a0e      	ldr	r2, [pc, #56]	; (8009380 <eeprom_ram_init+0x78>)
 8009348:	819a      	strh	r2, [r3, #12]
		eeprom->vin_hys_mv = eeprom_info.vin_hys_mv;
 800934a:	4b0e      	ldr	r3, [pc, #56]	; (8009384 <eeprom_ram_init+0x7c>)
 800934c:	88da      	ldrh	r2, [r3, #6]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	80da      	strh	r2, [r3, #6]
		eeprom->vin_limit_mv = eeprom_info.vin_limit_mv;
 8009352:	4b0c      	ldr	r3, [pc, #48]	; (8009384 <eeprom_ram_init+0x7c>)
 8009354:	889a      	ldrh	r2, [r3, #4]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	809a      	strh	r2, [r3, #4]
		eeprom->total_batt_ouput_ah = 0;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2200      	movs	r2, #0
 800935e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		storage.total_batt_ouput_ah = eeprom->total_batt_ouput_ah;
	}
}
 8009360:	e003      	b.n	800936a <eeprom_ram_init+0x62>
		storage.total_batt_ouput_ah = eeprom->total_batt_ouput_ah;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	4b08      	ldr	r3, [pc, #32]	; (8009388 <eeprom_ram_init+0x80>)
 8009368:	629a      	str	r2, [r3, #40]	; 0x28
}
 800936a:	46c0      	nop			; (mov r8, r8)
 800936c:	46bd      	mov	sp, r7
 800936e:	b004      	add	sp, #16
 8009370:	bd80      	pop	{r7, pc}
 8009372:	46c0      	nop			; (mov r8, r8)
 8009374:	08080000 	.word	0x08080000
 8009378:	20002558 	.word	0x20002558
 800937c:	00003138 	.word	0x00003138
 8009380:	00002328 	.word	0x00002328
 8009384:	20002544 	.word	0x20002544
 8009388:	200027ec 	.word	0x200027ec

0800938c <eeprom_save>:

void eeprom_save(EEPROMStorageTypDef *eeprom)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
	uint32_t crc;

	/*Calculate the CRC*/
	crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)eeprom, sizeof(EEPROMStorageTypDef)-sizeof(uint32_t));
 8009394:	6879      	ldr	r1, [r7, #4]
 8009396:	4b0c      	ldr	r3, [pc, #48]	; (80093c8 <eeprom_save+0x3c>)
 8009398:	2210      	movs	r2, #16
 800939a:	0018      	movs	r0, r3
 800939c:	f7f9 fe12 	bl	8002fc4 <HAL_CRC_Calculate>
 80093a0:	0003      	movs	r3, r0
 80093a2:	60fb      	str	r3, [r7, #12]

	if(eeprom->crc != crc)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d008      	beq.n	80093c0 <eeprom_save+0x34>
	{
		eeprom->crc = crc;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	611a      	str	r2, [r3, #16]

		/*Write to EEPROM*/
		writeEEPROMData(0, (uint8_t*)eeprom, sizeof(EEPROMStorageTypDef));
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2214      	movs	r2, #20
 80093b8:	0019      	movs	r1, r3
 80093ba:	2000      	movs	r0, #0
 80093bc:	f7ff f9fc 	bl	80087b8 <writeEEPROMData>
	}
}
 80093c0:	46c0      	nop			; (mov r8, r8)
 80093c2:	46bd      	mov	sp, r7
 80093c4:	b004      	add	sp, #16
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	20002558 	.word	0x20002558

080093cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a05      	ldr	r2, [pc, #20]	; (80093f0 <HAL_UART_RxCpltCallback+0x24>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d104      	bne.n	80093e8 <HAL_UART_RxCpltCallback+0x1c>
  {
    /*Byte received, forward to AT parser*/
    SCP_ByteReceived(aRxBuffer);
 80093de:	4b05      	ldr	r3, [pc, #20]	; (80093f4 <HAL_UART_RxCpltCallback+0x28>)
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	0018      	movs	r0, r3
 80093e4:	f7ff f952 	bl	800868c <SCP_ByteReceived>
  }
}
 80093e8:	46c0      	nop			; (mov r8, r8)
 80093ea:	46bd      	mov	sp, r7
 80093ec:	b002      	add	sp, #8
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	40013800 	.word	0x40013800
 80093f4:	200026c8 	.word	0x200026c8

080093f8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8009400:	2001      	movs	r0, #1
 8009402:	f7fd f856 	bl	80064b2 <osDelay>
 8009406:	e7fb      	b.n	8009400 <StartDefaultTask+0x8>

08009408 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	2380      	movs	r3, #128	; 0x80
 8009416:	05db      	lsls	r3, r3, #23
 8009418:	429a      	cmp	r2, r3
 800941a:	d101      	bne.n	8009420 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800941c:	f7f9 f852 	bl	80024c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM21)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a0e      	ldr	r2, [pc, #56]	; (8009460 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d10d      	bne.n	8009446 <HAL_TIM_PeriodElapsedCallback+0x3e>
  {
	  HAL_GPIO_TogglePin(VMON_CLK_GPIO_Port, VMON_CLK_Pin);
 800942a:	2380      	movs	r3, #128	; 0x80
 800942c:	021a      	lsls	r2, r3, #8
 800942e:	23a0      	movs	r3, #160	; 0xa0
 8009430:	05db      	lsls	r3, r3, #23
 8009432:	0011      	movs	r1, r2
 8009434:	0018      	movs	r0, r3
 8009436:	f7fa fc99 	bl	8003d6c <HAL_GPIO_TogglePin>
	  osSignalSet (MonitorTaskHandle, 0x00000001);
 800943a:	4b0a      	ldr	r3, [pc, #40]	; (8009464 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2101      	movs	r1, #1
 8009440:	0018      	movs	r0, r3
 8009442:	f7fd f84b 	bl	80064dc <osSignalSet>
  }

  if (htim->Instance == TIM7)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a07      	ldr	r2, [pc, #28]	; (8009468 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d102      	bne.n	8009456 <HAL_TIM_PeriodElapsedCallback+0x4e>
  {
	  SCP_Tick(10);
 8009450:	200a      	movs	r0, #10
 8009452:	f7ff f945 	bl	80086e0 <SCP_Tick>
  }

  /* USER CODE END Callback 1 */
}
 8009456:	46c0      	nop			; (mov r8, r8)
 8009458:	46bd      	mov	sp, r7
 800945a:	b002      	add	sp, #8
 800945c:	bd80      	pop	{r7, pc}
 800945e:	46c0      	nop			; (mov r8, r8)
 8009460:	40010800 	.word	0x40010800
 8009464:	2000281c 	.word	0x2000281c
 8009468:	40001400 	.word	0x40001400

0800946c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009470:	46c0      	nop			; (mov r8, r8)
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
	...

08009478 <ManagementTask>:
#include "StringCommandParser.h"

osThreadId ManagementTaskHandle;

void ManagementTask(void const * argument)
{
 8009478:	b590      	push	{r4, r7, lr}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
	ch_state_t ch_status = UNKNOWN;
 8009480:	230f      	movs	r3, #15
 8009482:	18fb      	adds	r3, r7, r3
 8009484:	2202      	movs	r2, #2
 8009486:	701a      	strb	r2, [r3, #0]
	static _Bool battery_charged = 0;
	static _Bool discharge_lock = 0;
	static int32_t max_idle_current = 0;
	storage.total_batt_ouput_ah = eeprom_info.total_batt_ouput_ah;
 8009488:	4bcd      	ldr	r3, [pc, #820]	; (80097c0 <ManagementTask+0x348>)
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	4bcd      	ldr	r3, [pc, #820]	; (80097c4 <ManagementTask+0x34c>)
 800948e:	629a      	str	r2, [r3, #40]	; 0x28

	for(;;)
	{
		osDelay(1000);
 8009490:	23fa      	movs	r3, #250	; 0xfa
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	0018      	movs	r0, r3
 8009496:	f7fd f80c 	bl	80064b2 <osDelay>

		/*Check if it is a day time*/
		if(storage.vinput_mv+eeprom_info.vin_hys_mv > eeprom_info.vin_limit_mv)
 800949a:	4bca      	ldr	r3, [pc, #808]	; (80097c4 <ManagementTask+0x34c>)
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	4ac8      	ldr	r2, [pc, #800]	; (80097c0 <ManagementTask+0x348>)
 80094a0:	88d2      	ldrh	r2, [r2, #6]
 80094a2:	189b      	adds	r3, r3, r2
 80094a4:	4ac6      	ldr	r2, [pc, #792]	; (80097c0 <ManagementTask+0x348>)
 80094a6:	8892      	ldrh	r2, [r2, #4]
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d96e      	bls.n	800958a <ManagementTask+0x112>
		{
			/*If input is more than MPPT, enable charger*/
			if(storage.vinput_mv+eeprom_info.vin_hys_mv > MPPT_MV)
 80094ac:	4bc5      	ldr	r3, [pc, #788]	; (80097c4 <ManagementTask+0x34c>)
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	4ac3      	ldr	r2, [pc, #780]	; (80097c0 <ManagementTask+0x348>)
 80094b2:	88d2      	ldrh	r2, [r2, #6]
 80094b4:	189b      	adds	r3, r3, r2
 80094b6:	4ac4      	ldr	r2, [pc, #784]	; (80097c8 <ManagementTask+0x350>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d952      	bls.n	8009562 <ManagementTask+0xea>
			{
				charger_enable();
 80094bc:	f000 f99e 	bl	80097fc <charger_enable>
				osDelay(5000);
 80094c0:	4bc2      	ldr	r3, [pc, #776]	; (80097cc <ManagementTask+0x354>)
 80094c2:	0018      	movs	r0, r3
 80094c4:	f7fc fff5 	bl	80064b2 <osDelay>
				ch_status = charger_status();
 80094c8:	230f      	movs	r3, #15
 80094ca:	18fc      	adds	r4, r7, r3
 80094cc:	f000 f9b2 	bl	8009834 <charger_status>
 80094d0:	0003      	movs	r3, r0
 80094d2:	7023      	strb	r3, [r4, #0]

				while(ch_status == IN_PROGRESS)
 80094d4:	e018      	b.n	8009508 <ManagementTask+0x90>
				{
					osDelay(1000);
 80094d6:	23fa      	movs	r3, #250	; 0xfa
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	0018      	movs	r0, r3
 80094dc:	f7fc ffe9 	bl	80064b2 <osDelay>
					discharge_lock = 0;
 80094e0:	4bbb      	ldr	r3, [pc, #748]	; (80097d0 <ManagementTask+0x358>)
 80094e2:	2200      	movs	r2, #0
 80094e4:	701a      	strb	r2, [r3, #0]
					battery_charged = 0;
 80094e6:	4bbb      	ldr	r3, [pc, #748]	; (80097d4 <ManagementTask+0x35c>)
 80094e8:	2200      	movs	r2, #0
 80094ea:	701a      	strb	r2, [r3, #0]
					osMessagePut(ind_msg, IND_RED, osWaitForever);
 80094ec:	4bba      	ldr	r3, [pc, #744]	; (80097d8 <ManagementTask+0x360>)
 80094ee:	6818      	ldr	r0, [r3, #0]
 80094f0:	2301      	movs	r3, #1
 80094f2:	425b      	negs	r3, r3
 80094f4:	001a      	movs	r2, r3
 80094f6:	2102      	movs	r1, #2
 80094f8:	f7fd f8aa 	bl	8006650 <osMessagePut>
					ch_status = charger_status();
 80094fc:	230f      	movs	r3, #15
 80094fe:	18fc      	adds	r4, r7, r3
 8009500:	f000 f998 	bl	8009834 <charger_status>
 8009504:	0003      	movs	r3, r0
 8009506:	7023      	strb	r3, [r4, #0]
				while(ch_status == IN_PROGRESS)
 8009508:	230f      	movs	r3, #15
 800950a:	18fb      	adds	r3, r7, r3
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	b25b      	sxtb	r3, r3
 8009510:	2b01      	cmp	r3, #1
 8009512:	d0e0      	beq.n	80094d6 <ManagementTask+0x5e>
				}

				if(ch_status == COMPLETED)
 8009514:	230f      	movs	r3, #15
 8009516:	18fb      	adds	r3, r7, r3
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	b25b      	sxtb	r3, r3
 800951c:	2b00      	cmp	r3, #0
 800951e:	d10e      	bne.n	800953e <ManagementTask+0xc6>
				{
					battery_charged = 1;
 8009520:	4bac      	ldr	r3, [pc, #688]	; (80097d4 <ManagementTask+0x35c>)
 8009522:	2201      	movs	r2, #1
 8009524:	701a      	strb	r2, [r3, #0]
					discharge_lock = 0;
 8009526:	4baa      	ldr	r3, [pc, #680]	; (80097d0 <ManagementTask+0x358>)
 8009528:	2200      	movs	r2, #0
 800952a:	701a      	strb	r2, [r3, #0]
					osMessagePut(ind_msg, IND_GREEN, osWaitForever);
 800952c:	4baa      	ldr	r3, [pc, #680]	; (80097d8 <ManagementTask+0x360>)
 800952e:	6818      	ldr	r0, [r3, #0]
 8009530:	2301      	movs	r3, #1
 8009532:	425b      	negs	r3, r3
 8009534:	001a      	movs	r2, r3
 8009536:	2101      	movs	r1, #1
 8009538:	f7fd f88a 	bl	8006650 <osMessagePut>
 800953c:	e11b      	b.n	8009776 <ManagementTask+0x2fe>
				}
				else
				{
					osMessagePut(ind_msg, IND_OFF, osWaitForever);
 800953e:	4ba6      	ldr	r3, [pc, #664]	; (80097d8 <ManagementTask+0x360>)
 8009540:	6818      	ldr	r0, [r3, #0]
 8009542:	2301      	movs	r3, #1
 8009544:	425b      	negs	r3, r3
 8009546:	001a      	movs	r2, r3
 8009548:	2100      	movs	r1, #0
 800954a:	f7fd f881 	bl	8006650 <osMessagePut>
					if(storage.vbatt_mv < FULL_BATT_MV)
 800954e:	4b9d      	ldr	r3, [pc, #628]	; (80097c4 <ManagementTask+0x34c>)
 8009550:	691b      	ldr	r3, [r3, #16]
 8009552:	4aa2      	ldr	r2, [pc, #648]	; (80097dc <ManagementTask+0x364>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d900      	bls.n	800955a <ManagementTask+0xe2>
 8009558:	e10d      	b.n	8009776 <ManagementTask+0x2fe>
					{
						battery_charged = 0;
 800955a:	4b9e      	ldr	r3, [pc, #632]	; (80097d4 <ManagementTask+0x35c>)
 800955c:	2200      	movs	r2, #0
 800955e:	701a      	strb	r2, [r3, #0]
 8009560:	e109      	b.n	8009776 <ManagementTask+0x2fe>
					}
				}

			}
			/*If input is less than MPPT, disable charger*/
			else if(storage.vinput_mv-eeprom_info.vin_hys_mv < MPPT_MV)
 8009562:	4b98      	ldr	r3, [pc, #608]	; (80097c4 <ManagementTask+0x34c>)
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	4a96      	ldr	r2, [pc, #600]	; (80097c0 <ManagementTask+0x348>)
 8009568:	88d2      	ldrh	r2, [r2, #6]
 800956a:	1a9b      	subs	r3, r3, r2
 800956c:	4a9c      	ldr	r2, [pc, #624]	; (80097e0 <ManagementTask+0x368>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d900      	bls.n	8009574 <ManagementTask+0xfc>
 8009572:	e100      	b.n	8009776 <ManagementTask+0x2fe>
			{
				charger_disable();
 8009574:	f000 f950 	bl	8009818 <charger_disable>
				osMessagePut(ind_msg, IND_OFF, osWaitForever);
 8009578:	4b97      	ldr	r3, [pc, #604]	; (80097d8 <ManagementTask+0x360>)
 800957a:	6818      	ldr	r0, [r3, #0]
 800957c:	2301      	movs	r3, #1
 800957e:	425b      	negs	r3, r3
 8009580:	001a      	movs	r2, r3
 8009582:	2100      	movs	r1, #0
 8009584:	f7fd f864 	bl	8006650 <osMessagePut>
 8009588:	e0f5      	b.n	8009776 <ManagementTask+0x2fe>
			}

		}
		/*Check if it is a night time*/
		else if(storage.vinput_mv-eeprom_info.vin_hys_mv < eeprom_info.vin_limit_mv)
 800958a:	4b8e      	ldr	r3, [pc, #568]	; (80097c4 <ManagementTask+0x34c>)
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	4a8c      	ldr	r2, [pc, #560]	; (80097c0 <ManagementTask+0x348>)
 8009590:	88d2      	ldrh	r2, [r2, #6]
 8009592:	1a9b      	subs	r3, r3, r2
 8009594:	4a8a      	ldr	r2, [pc, #552]	; (80097c0 <ManagementTask+0x348>)
 8009596:	8892      	ldrh	r2, [r2, #4]
 8009598:	4293      	cmp	r3, r2
 800959a:	d300      	bcc.n	800959e <ManagementTask+0x126>
 800959c:	e0eb      	b.n	8009776 <ManagementTask+0x2fe>
		{
			charger_disable();
 800959e:	f000 f93b 	bl	8009818 <charger_disable>
			osMessagePut(ind_msg, IND_OFF, osWaitForever);
 80095a2:	4b8d      	ldr	r3, [pc, #564]	; (80097d8 <ManagementTask+0x360>)
 80095a4:	6818      	ldr	r0, [r3, #0]
 80095a6:	2301      	movs	r3, #1
 80095a8:	425b      	negs	r3, r3
 80095aa:	001a      	movs	r2, r3
 80095ac:	2100      	movs	r1, #0
 80095ae:	f7fd f84f 	bl	8006650 <osMessagePut>
			osMessagePut(led_msg, 0, osWaitForever);
 80095b2:	4b8c      	ldr	r3, [pc, #560]	; (80097e4 <ManagementTask+0x36c>)
 80095b4:	6818      	ldr	r0, [r3, #0]
 80095b6:	2301      	movs	r3, #1
 80095b8:	425b      	negs	r3, r3
 80095ba:	001a      	movs	r2, r3
 80095bc:	2100      	movs	r1, #0
 80095be:	f7fd f847 	bl	8006650 <osMessagePut>

			if(!discharge_lock)
 80095c2:	4b83      	ldr	r3, [pc, #524]	; (80097d0 <ManagementTask+0x358>)
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	2201      	movs	r2, #1
 80095c8:	4053      	eors	r3, r2
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d100      	bne.n	80095d2 <ManagementTask+0x15a>
 80095d0:	e0d1      	b.n	8009776 <ManagementTask+0x2fe>
			{
				/*Load the battery with LEDs*/
				if(battery_charged)
 80095d2:	4b80      	ldr	r3, [pc, #512]	; (80097d4 <ManagementTask+0x35c>)
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d00d      	beq.n	80095f6 <ManagementTask+0x17e>
				{
					load_setup(FULL_BATT_MAH, HOURS_24 - storage.daylength_s);
 80095da:	4b7a      	ldr	r3, [pc, #488]	; (80097c4 <ManagementTask+0x34c>)
 80095dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095de:	4a82      	ldr	r2, [pc, #520]	; (80097e8 <ManagementTask+0x370>)
 80095e0:	1ad2      	subs	r2, r2, r3
 80095e2:	23c8      	movs	r3, #200	; 0xc8
 80095e4:	019b      	lsls	r3, r3, #6
 80095e6:	0011      	movs	r1, r2
 80095e8:	0018      	movs	r0, r3
 80095ea:	f000 f975 	bl	80098d8 <load_setup>
					storage.energy_released_mah = 0;
 80095ee:	4b75      	ldr	r3, [pc, #468]	; (80097c4 <ManagementTask+0x34c>)
 80095f0:	2200      	movs	r2, #0
 80095f2:	625a      	str	r2, [r3, #36]	; 0x24
 80095f4:	e035      	b.n	8009662 <ManagementTask+0x1ea>
				}
				/*Fully load the battery if charging time is too short */
				else if(storage.daylength_s < MIN_DAY_DUR)
 80095f6:	4b73      	ldr	r3, [pc, #460]	; (80097c4 <ManagementTask+0x34c>)
 80095f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095fa:	4a7c      	ldr	r2, [pc, #496]	; (80097ec <ManagementTask+0x374>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d809      	bhi.n	8009614 <ManagementTask+0x19c>
				{
					load_setup(FULL_BATT_MAH, 0);
 8009600:	23c8      	movs	r3, #200	; 0xc8
 8009602:	019b      	lsls	r3, r3, #6
 8009604:	2100      	movs	r1, #0
 8009606:	0018      	movs	r0, r3
 8009608:	f000 f966 	bl	80098d8 <load_setup>
					storage.energy_released_mah = 0;
 800960c:	4b6d      	ldr	r3, [pc, #436]	; (80097c4 <ManagementTask+0x34c>)
 800960e:	2200      	movs	r2, #0
 8009610:	625a      	str	r2, [r3, #36]	; 0x24
 8009612:	e026      	b.n	8009662 <ManagementTask+0x1ea>
				}
				else
				{
					storage.energy_stored_mah = storage.energy_stored_mah - storage.energy_released_mah;
 8009614:	4b6b      	ldr	r3, [pc, #428]	; (80097c4 <ManagementTask+0x34c>)
 8009616:	6a1a      	ldr	r2, [r3, #32]
 8009618:	4b6a      	ldr	r3, [pc, #424]	; (80097c4 <ManagementTask+0x34c>)
 800961a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961c:	1c19      	adds	r1, r3, #0
 800961e:	1c10      	adds	r0, r2, #0
 8009620:	f7f7 f9ee 	bl	8000a00 <__aeabi_fsub>
 8009624:	1c03      	adds	r3, r0, #0
 8009626:	1c1a      	adds	r2, r3, #0
 8009628:	4b66      	ldr	r3, [pc, #408]	; (80097c4 <ManagementTask+0x34c>)
 800962a:	621a      	str	r2, [r3, #32]
					storage.energy_released_mah = 0;
 800962c:	4b65      	ldr	r3, [pc, #404]	; (80097c4 <ManagementTask+0x34c>)
 800962e:	2200      	movs	r2, #0
 8009630:	625a      	str	r2, [r3, #36]	; 0x24
					if(storage.energy_stored_mah > 0)
 8009632:	4b64      	ldr	r3, [pc, #400]	; (80097c4 <ManagementTask+0x34c>)
 8009634:	6a1b      	ldr	r3, [r3, #32]
 8009636:	2100      	movs	r1, #0
 8009638:	1c18      	adds	r0, r3, #0
 800963a:	f7f6 fe55 	bl	80002e8 <__aeabi_fcmpgt>
 800963e:	1e03      	subs	r3, r0, #0
 8009640:	d00c      	beq.n	800965c <ManagementTask+0x1e4>
					{
						load_setup(storage.energy_stored_mah, HOURS_24 - storage.daylength_s);
 8009642:	4b60      	ldr	r3, [pc, #384]	; (80097c4 <ManagementTask+0x34c>)
 8009644:	6a1b      	ldr	r3, [r3, #32]
 8009646:	1c18      	adds	r0, r3, #0
 8009648:	f7f6 fe82 	bl	8000350 <__aeabi_f2uiz>
 800964c:	4b5d      	ldr	r3, [pc, #372]	; (80097c4 <ManagementTask+0x34c>)
 800964e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009650:	4a65      	ldr	r2, [pc, #404]	; (80097e8 <ManagementTask+0x370>)
 8009652:	1ad3      	subs	r3, r2, r3
 8009654:	0019      	movs	r1, r3
 8009656:	f000 f93f 	bl	80098d8 <load_setup>
 800965a:	e002      	b.n	8009662 <ManagementTask+0x1ea>
					}
					else
					{
						storage.energy_stored_mah = 0;
 800965c:	4b59      	ldr	r3, [pc, #356]	; (80097c4 <ManagementTask+0x34c>)
 800965e:	2200      	movs	r2, #0
 8009660:	621a      	str	r2, [r3, #32]
					}
				}

				/*Discharge battery with LEDs*/
				osMessagePut(ind_msg, IND_RED, osWaitForever);
 8009662:	4b5d      	ldr	r3, [pc, #372]	; (80097d8 <ManagementTask+0x360>)
 8009664:	6818      	ldr	r0, [r3, #0]
 8009666:	2301      	movs	r3, #1
 8009668:	425b      	negs	r3, r3
 800966a:	001a      	movs	r2, r3
 800966c:	2102      	movs	r1, #2
 800966e:	f7fc ffef 	bl	8006650 <osMessagePut>
				while(1)
				{
					osDelay(1000);
 8009672:	23fa      	movs	r3, #250	; 0xfa
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	0018      	movs	r0, r3
 8009678:	f7fc ff1b 	bl	80064b2 <osDelay>

					/*Day time?*/
					if(storage.vinput_mv+eeprom_info.vin_hys_mv > eeprom_info.vin_limit_mv)
 800967c:	4b51      	ldr	r3, [pc, #324]	; (80097c4 <ManagementTask+0x34c>)
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	4a4f      	ldr	r2, [pc, #316]	; (80097c0 <ManagementTask+0x348>)
 8009682:	88d2      	ldrh	r2, [r2, #6]
 8009684:	189b      	adds	r3, r3, r2
 8009686:	4a4e      	ldr	r2, [pc, #312]	; (80097c0 <ManagementTask+0x348>)
 8009688:	8892      	ldrh	r2, [r2, #4]
 800968a:	4293      	cmp	r3, r2
 800968c:	d83d      	bhi.n	800970a <ManagementTask+0x292>
					{
						break;
					}

					/*Low battery?*/
					if(storage.vbatt_mv < BATT_LOW_MV)
 800968e:	4b4d      	ldr	r3, [pc, #308]	; (80097c4 <ManagementTask+0x34c>)
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	4a57      	ldr	r2, [pc, #348]	; (80097f0 <ManagementTask+0x378>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d803      	bhi.n	80096a0 <ManagementTask+0x228>
					{
						discharge_lock = 1;
 8009698:	4b4d      	ldr	r3, [pc, #308]	; (80097d0 <ManagementTask+0x358>)
 800969a:	2201      	movs	r2, #1
 800969c:	701a      	strb	r2, [r3, #0]
						break;
 800969e:	e035      	b.n	800970c <ManagementTask+0x294>
					}

					/*Out of energy check*/
					if(battery_charged)
 80096a0:	4b4c      	ldr	r3, [pc, #304]	; (80097d4 <ManagementTask+0x35c>)
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d016      	beq.n	80096d6 <ManagementTask+0x25e>
					{
						if(eeprom_info.batt_full_mah - storage.energy_released_mah < 0)
 80096a8:	4b45      	ldr	r3, [pc, #276]	; (80097c0 <ManagementTask+0x348>)
 80096aa:	895b      	ldrh	r3, [r3, #10]
 80096ac:	0018      	movs	r0, r3
 80096ae:	f7f7 fb8b 	bl	8000dc8 <__aeabi_i2f>
 80096b2:	1c02      	adds	r2, r0, #0
 80096b4:	4b43      	ldr	r3, [pc, #268]	; (80097c4 <ManagementTask+0x34c>)
 80096b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b8:	1c19      	adds	r1, r3, #0
 80096ba:	1c10      	adds	r0, r2, #0
 80096bc:	f7f7 f9a0 	bl	8000a00 <__aeabi_fsub>
 80096c0:	1c03      	adds	r3, r0, #0
 80096c2:	2100      	movs	r1, #0
 80096c4:	1c18      	adds	r0, r3, #0
 80096c6:	f7f6 fdfb 	bl	80002c0 <__aeabi_fcmplt>
 80096ca:	1e03      	subs	r3, r0, #0
 80096cc:	d01c      	beq.n	8009708 <ManagementTask+0x290>
						{
							discharge_lock = 1;
 80096ce:	4b40      	ldr	r3, [pc, #256]	; (80097d0 <ManagementTask+0x358>)
 80096d0:	2201      	movs	r2, #1
 80096d2:	701a      	strb	r2, [r3, #0]
							break;
 80096d4:	e01a      	b.n	800970c <ManagementTask+0x294>
						}
					}
					else
					{
						if(storage.daylength_s > MIN_DAY_DUR)
 80096d6:	4b3b      	ldr	r3, [pc, #236]	; (80097c4 <ManagementTask+0x34c>)
 80096d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096da:	23e1      	movs	r3, #225	; 0xe1
 80096dc:	011b      	lsls	r3, r3, #4
 80096de:	429a      	cmp	r2, r3
 80096e0:	d9c7      	bls.n	8009672 <ManagementTask+0x1fa>
						{
							if(storage.energy_stored_mah - storage.energy_released_mah < 0)
 80096e2:	4b38      	ldr	r3, [pc, #224]	; (80097c4 <ManagementTask+0x34c>)
 80096e4:	6a1a      	ldr	r2, [r3, #32]
 80096e6:	4b37      	ldr	r3, [pc, #220]	; (80097c4 <ManagementTask+0x34c>)
 80096e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ea:	1c19      	adds	r1, r3, #0
 80096ec:	1c10      	adds	r0, r2, #0
 80096ee:	f7f7 f987 	bl	8000a00 <__aeabi_fsub>
 80096f2:	1c03      	adds	r3, r0, #0
 80096f4:	2100      	movs	r1, #0
 80096f6:	1c18      	adds	r0, r3, #0
 80096f8:	f7f6 fde2 	bl	80002c0 <__aeabi_fcmplt>
 80096fc:	1e03      	subs	r3, r0, #0
 80096fe:	d003      	beq.n	8009708 <ManagementTask+0x290>
							{
								discharge_lock = 1;
 8009700:	4b33      	ldr	r3, [pc, #204]	; (80097d0 <ManagementTask+0x358>)
 8009702:	2201      	movs	r2, #1
 8009704:	701a      	strb	r2, [r3, #0]
								break;
 8009706:	e001      	b.n	800970c <ManagementTask+0x294>
					osDelay(1000);
 8009708:	e7b3      	b.n	8009672 <ManagementTask+0x1fa>
						break;
 800970a:	46c0      	nop			; (mov r8, r8)
						}
					}
				}

				/*End discharge process*/
				osMessagePut(led_msg, 0, osWaitForever);
 800970c:	4b35      	ldr	r3, [pc, #212]	; (80097e4 <ManagementTask+0x36c>)
 800970e:	6818      	ldr	r0, [r3, #0]
 8009710:	2301      	movs	r3, #1
 8009712:	425b      	negs	r3, r3
 8009714:	001a      	movs	r2, r3
 8009716:	2100      	movs	r1, #0
 8009718:	f7fc ff9a 	bl	8006650 <osMessagePut>
				osMessagePut(ind_msg, IND_OFF, osWaitForever);
 800971c:	4b2e      	ldr	r3, [pc, #184]	; (80097d8 <ManagementTask+0x360>)
 800971e:	6818      	ldr	r0, [r3, #0]
 8009720:	2301      	movs	r3, #1
 8009722:	425b      	negs	r3, r3
 8009724:	001a      	movs	r2, r3
 8009726:	2100      	movs	r1, #0
 8009728:	f7fc ff92 	bl	8006650 <osMessagePut>
				eeprom_info.total_batt_ouput_ah = storage.total_batt_ouput_ah;
 800972c:	4b25      	ldr	r3, [pc, #148]	; (80097c4 <ManagementTask+0x34c>)
 800972e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009730:	4b23      	ldr	r3, [pc, #140]	; (80097c0 <ManagementTask+0x348>)
 8009732:	601a      	str	r2, [r3, #0]
				battery_charged = 0;
 8009734:	4b27      	ldr	r3, [pc, #156]	; (80097d4 <ManagementTask+0x35c>)
 8009736:	2200      	movs	r2, #0
 8009738:	701a      	strb	r2, [r3, #0]
				storage.daylength_s = 0;
 800973a:	4b22      	ldr	r3, [pc, #136]	; (80097c4 <ManagementTask+0x34c>)
 800973c:	2200      	movs	r2, #0
 800973e:	62da      	str	r2, [r3, #44]	; 0x2c
				storage.energy_stored_mah = storage.energy_stored_mah - storage.energy_released_mah;
 8009740:	4b20      	ldr	r3, [pc, #128]	; (80097c4 <ManagementTask+0x34c>)
 8009742:	6a1a      	ldr	r2, [r3, #32]
 8009744:	4b1f      	ldr	r3, [pc, #124]	; (80097c4 <ManagementTask+0x34c>)
 8009746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009748:	1c19      	adds	r1, r3, #0
 800974a:	1c10      	adds	r0, r2, #0
 800974c:	f7f7 f958 	bl	8000a00 <__aeabi_fsub>
 8009750:	1c03      	adds	r3, r0, #0
 8009752:	1c1a      	adds	r2, r3, #0
 8009754:	4b1b      	ldr	r3, [pc, #108]	; (80097c4 <ManagementTask+0x34c>)
 8009756:	621a      	str	r2, [r3, #32]
				if(storage.energy_stored_mah < 0)
 8009758:	4b1a      	ldr	r3, [pc, #104]	; (80097c4 <ManagementTask+0x34c>)
 800975a:	6a1b      	ldr	r3, [r3, #32]
 800975c:	2100      	movs	r1, #0
 800975e:	1c18      	adds	r0, r3, #0
 8009760:	f7f6 fdae 	bl	80002c0 <__aeabi_fcmplt>
 8009764:	1e03      	subs	r3, r0, #0
 8009766:	d002      	beq.n	800976e <ManagementTask+0x2f6>
				{storage.energy_stored_mah = 0;}
 8009768:	4b16      	ldr	r3, [pc, #88]	; (80097c4 <ManagementTask+0x34c>)
 800976a:	2200      	movs	r2, #0
 800976c:	621a      	str	r2, [r3, #32]
				eeprom_save(&eeprom_info);
 800976e:	4b14      	ldr	r3, [pc, #80]	; (80097c0 <ManagementTask+0x348>)
 8009770:	0018      	movs	r0, r3
 8009772:	f7ff fe0b 	bl	800938c <eeprom_save>
				//TelitCloudUpload();
			}
		}

		/*Energy bleed check in idle state*/
		if(battery_charged)
 8009776:	4b17      	ldr	r3, [pc, #92]	; (80097d4 <ManagementTask+0x35c>)
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d100      	bne.n	8009780 <ManagementTask+0x308>
 800977e:	e687      	b.n	8009490 <ManagementTask+0x18>
		{
			if(storage.coutput_ma > max_idle_current)
 8009780:	4b10      	ldr	r3, [pc, #64]	; (80097c4 <ManagementTask+0x34c>)
 8009782:	69da      	ldr	r2, [r3, #28]
 8009784:	4b1b      	ldr	r3, [pc, #108]	; (80097f4 <ManagementTask+0x37c>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	429a      	cmp	r2, r3
 800978a:	dd03      	ble.n	8009794 <ManagementTask+0x31c>
			{
				max_idle_current = storage.coutput_ma;
 800978c:	4b0d      	ldr	r3, [pc, #52]	; (80097c4 <ManagementTask+0x34c>)
 800978e:	69da      	ldr	r2, [r3, #28]
 8009790:	4b18      	ldr	r3, [pc, #96]	; (80097f4 <ManagementTask+0x37c>)
 8009792:	601a      	str	r2, [r3, #0]
			}
			if(max_idle_current > IDLE_CURR_MA)
 8009794:	4b17      	ldr	r3, [pc, #92]	; (80097f4 <ManagementTask+0x37c>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2b14      	cmp	r3, #20
 800979a:	dd05      	ble.n	80097a8 <ManagementTask+0x330>
			{
				max_idle_current = 0;
 800979c:	4b15      	ldr	r3, [pc, #84]	; (80097f4 <ManagementTask+0x37c>)
 800979e:	2200      	movs	r2, #0
 80097a0:	601a      	str	r2, [r3, #0]
				battery_charged = 0;
 80097a2:	4b0c      	ldr	r3, [pc, #48]	; (80097d4 <ManagementTask+0x35c>)
 80097a4:	2200      	movs	r2, #0
 80097a6:	701a      	strb	r2, [r3, #0]
			}
			if(storage.energy_released_mah > IDLE_CURR_MAH)
 80097a8:	4b06      	ldr	r3, [pc, #24]	; (80097c4 <ManagementTask+0x34c>)
 80097aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ac:	4912      	ldr	r1, [pc, #72]	; (80097f8 <ManagementTask+0x380>)
 80097ae:	1c18      	adds	r0, r3, #0
 80097b0:	f7f6 fd9a 	bl	80002e8 <__aeabi_fcmpgt>
 80097b4:	1e03      	subs	r3, r0, #0
 80097b6:	d002      	beq.n	80097be <ManagementTask+0x346>
			{
				battery_charged = 0;
 80097b8:	4b06      	ldr	r3, [pc, #24]	; (80097d4 <ManagementTask+0x35c>)
 80097ba:	2200      	movs	r2, #0
 80097bc:	701a      	strb	r2, [r3, #0]
		osDelay(1000);
 80097be:	e667      	b.n	8009490 <ManagementTask+0x18>
 80097c0:	20002544 	.word	0x20002544
 80097c4:	200027ec 	.word	0x200027ec
 80097c8:	0000445c 	.word	0x0000445c
 80097cc:	00001388 	.word	0x00001388
 80097d0:	20001eec 	.word	0x20001eec
 80097d4:	20001eed 	.word	0x20001eed
 80097d8:	20002534 	.word	0x20002534
 80097dc:	00003137 	.word	0x00003137
 80097e0:	0000445b 	.word	0x0000445b
 80097e4:	2000253c 	.word	0x2000253c
 80097e8:	00015180 	.word	0x00015180
 80097ec:	00000e0f 	.word	0x00000e0f
 80097f0:	00002327 	.word	0x00002327
 80097f4:	20001ef0 	.word	0x20001ef0
 80097f8:	42f00000 	.word	0x42f00000

080097fc <charger_enable>:
		}
	}
}

void charger_enable(void)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CHR_CTRL_GPIO_Port, CHR_CTRL_Pin, GPIO_PIN_RESET);
 8009800:	4b04      	ldr	r3, [pc, #16]	; (8009814 <charger_enable+0x18>)
 8009802:	2200      	movs	r2, #0
 8009804:	2108      	movs	r1, #8
 8009806:	0018      	movs	r0, r3
 8009808:	f7fa fa93 	bl	8003d32 <HAL_GPIO_WritePin>
}
 800980c:	46c0      	nop			; (mov r8, r8)
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	46c0      	nop			; (mov r8, r8)
 8009814:	50000400 	.word	0x50000400

08009818 <charger_disable>:
void charger_disable(void)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CHR_CTRL_GPIO_Port, CHR_CTRL_Pin, GPIO_PIN_SET);
 800981c:	4b04      	ldr	r3, [pc, #16]	; (8009830 <charger_disable+0x18>)
 800981e:	2201      	movs	r2, #1
 8009820:	2108      	movs	r1, #8
 8009822:	0018      	movs	r0, r3
 8009824:	f7fa fa85 	bl	8003d32 <HAL_GPIO_WritePin>
}
 8009828:	46c0      	nop			; (mov r8, r8)
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	46c0      	nop			; (mov r8, r8)
 8009830:	50000400 	.word	0x50000400

08009834 <charger_status>:

ch_state_t charger_status(void)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
	_Bool stat1;
	_Bool stat2;

	/*Read STAT1 pin*/
	if(HAL_GPIO_ReadPin(STAT1_GPIO_Port, STAT1_Pin) == GPIO_PIN_RESET)
 800983a:	4b26      	ldr	r3, [pc, #152]	; (80098d4 <charger_status+0xa0>)
 800983c:	2120      	movs	r1, #32
 800983e:	0018      	movs	r0, r3
 8009840:	f7fa fa5a 	bl	8003cf8 <HAL_GPIO_ReadPin>
 8009844:	1e03      	subs	r3, r0, #0
 8009846:	d103      	bne.n	8009850 <charger_status+0x1c>
		{stat1 = 0;}
 8009848:	1dfb      	adds	r3, r7, #7
 800984a:	2200      	movs	r2, #0
 800984c:	701a      	strb	r2, [r3, #0]
 800984e:	e002      	b.n	8009856 <charger_status+0x22>
	else
		{stat1 = 1;}
 8009850:	1dfb      	adds	r3, r7, #7
 8009852:	2201      	movs	r2, #1
 8009854:	701a      	strb	r2, [r3, #0]

	/*Read STAT2 pin*/
	if(HAL_GPIO_ReadPin(STAT2_GPIO_Port, STAT2_Pin) == GPIO_PIN_RESET)
 8009856:	4b1f      	ldr	r3, [pc, #124]	; (80098d4 <charger_status+0xa0>)
 8009858:	2110      	movs	r1, #16
 800985a:	0018      	movs	r0, r3
 800985c:	f7fa fa4c 	bl	8003cf8 <HAL_GPIO_ReadPin>
 8009860:	1e03      	subs	r3, r0, #0
 8009862:	d103      	bne.n	800986c <charger_status+0x38>
		{stat2 = 0;}
 8009864:	1dbb      	adds	r3, r7, #6
 8009866:	2200      	movs	r2, #0
 8009868:	701a      	strb	r2, [r3, #0]
 800986a:	e002      	b.n	8009872 <charger_status+0x3e>
	else
		{stat2 = 1;}
 800986c:	1dbb      	adds	r3, r7, #6
 800986e:	2201      	movs	r2, #1
 8009870:	701a      	strb	r2, [r3, #0]

	/*Decode logic*/
	if(stat1 && !stat2)
 8009872:	1dfb      	adds	r3, r7, #7
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d008      	beq.n	800988c <charger_status+0x58>
 800987a:	1dbb      	adds	r3, r7, #6
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	2201      	movs	r2, #1
 8009880:	4053      	eors	r3, r2
 8009882:	b2db      	uxtb	r3, r3
 8009884:	2b00      	cmp	r3, #0
 8009886:	d001      	beq.n	800988c <charger_status+0x58>
	{
		return IN_PROGRESS;
 8009888:	2301      	movs	r3, #1
 800988a:	e01e      	b.n	80098ca <charger_status+0x96>
	}
	if(!stat1 && stat2)
 800988c:	1dfb      	adds	r3, r7, #7
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	2201      	movs	r2, #1
 8009892:	4053      	eors	r3, r2
 8009894:	b2db      	uxtb	r3, r3
 8009896:	2b00      	cmp	r3, #0
 8009898:	d005      	beq.n	80098a6 <charger_status+0x72>
 800989a:	1dbb      	adds	r3, r7, #6
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d001      	beq.n	80098a6 <charger_status+0x72>
	{
		return COMPLETED;
 80098a2:	2300      	movs	r3, #0
 80098a4:	e011      	b.n	80098ca <charger_status+0x96>
	}
	if(!stat1 && !stat2)
 80098a6:	1dfb      	adds	r3, r7, #7
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	2201      	movs	r2, #1
 80098ac:	4053      	eors	r3, r2
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d009      	beq.n	80098c8 <charger_status+0x94>
 80098b4:	1dbb      	adds	r3, r7, #6
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	2201      	movs	r2, #1
 80098ba:	4053      	eors	r3, r2
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d002      	beq.n	80098c8 <charger_status+0x94>
	{
		return INACTIVE;
 80098c2:	2301      	movs	r3, #1
 80098c4:	425b      	negs	r3, r3
 80098c6:	e000      	b.n	80098ca <charger_status+0x96>
	}

	return UNKNOWN;
 80098c8:	2302      	movs	r3, #2
}
 80098ca:	0018      	movs	r0, r3
 80098cc:	46bd      	mov	sp, r7
 80098ce:	b002      	add	sp, #8
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	46c0      	nop			; (mov r8, r8)
 80098d4:	50000400 	.word	0x50000400

080098d8 <load_setup>:

uint32_t load_setup(uint32_t capacity, uint32_t nightitme)
{
 80098d8:	b590      	push	{r4, r7, lr}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
	uint32_t intensity;
	uint32_t mAseconds;

	/*Decrease capacity to have more realistic results*/
	capacity = capacity * DRIVER_EFF;
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f7f8 fcee 	bl	80022c4 <__aeabi_ui2d>
 80098e8:	4a21      	ldr	r2, [pc, #132]	; (8009970 <load_setup+0x98>)
 80098ea:	4b22      	ldr	r3, [pc, #136]	; (8009974 <load_setup+0x9c>)
 80098ec:	f7f7 fec0 	bl	8001670 <__aeabi_dmul>
 80098f0:	0003      	movs	r3, r0
 80098f2:	000c      	movs	r4, r1
 80098f4:	0018      	movs	r0, r3
 80098f6:	0021      	movs	r1, r4
 80098f8:	f7f6 fd42 	bl	8000380 <__aeabi_d2uiz>
 80098fc:	0003      	movs	r3, r0
 80098fe:	607b      	str	r3, [r7, #4]

	/*Convert capacity to mAs*/
	mAseconds = capacity*3600;
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	0013      	movs	r3, r2
 8009904:	011b      	lsls	r3, r3, #4
 8009906:	1a9b      	subs	r3, r3, r2
 8009908:	011a      	lsls	r2, r3, #4
 800990a:	1ad2      	subs	r2, r2, r3
 800990c:	0113      	lsls	r3, r2, #4
 800990e:	001a      	movs	r2, r3
 8009910:	60ba      	str	r2, [r7, #8]

	/*Look for load to have LEDs operational over night time*/
	for(intensity = 0; intensity < 32; intensity++)
 8009912:	2300      	movs	r3, #0
 8009914:	60fb      	str	r3, [r7, #12]
 8009916:	e022      	b.n	800995e <load_setup+0x86>
	{
		osMessagePut(led_msg, intensity, osWaitForever);
 8009918:	4b17      	ldr	r3, [pc, #92]	; (8009978 <load_setup+0xa0>)
 800991a:	6818      	ldr	r0, [r3, #0]
 800991c:	2301      	movs	r3, #1
 800991e:	425a      	negs	r2, r3
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	0019      	movs	r1, r3
 8009924:	f7fc fe94 	bl	8006650 <osMessagePut>
		osDelay(300);
 8009928:	2396      	movs	r3, #150	; 0x96
 800992a:	005b      	lsls	r3, r3, #1
 800992c:	0018      	movs	r0, r3
 800992e:	f7fc fdc0 	bl	80064b2 <osDelay>
		if(storage.coutput_ma*nightitme > mAseconds)
 8009932:	4b12      	ldr	r3, [pc, #72]	; (800997c <load_setup+0xa4>)
 8009934:	69db      	ldr	r3, [r3, #28]
 8009936:	001a      	movs	r2, r3
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	4353      	muls	r3, r2
 800993c:	68ba      	ldr	r2, [r7, #8]
 800993e:	429a      	cmp	r2, r3
 8009940:	d20a      	bcs.n	8009958 <load_setup+0x80>
		{
			osMessagePut(led_msg, intensity-1, osWaitForever);
 8009942:	4b0d      	ldr	r3, [pc, #52]	; (8009978 <load_setup+0xa0>)
 8009944:	6818      	ldr	r0, [r3, #0]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	1e59      	subs	r1, r3, #1
 800994a:	2301      	movs	r3, #1
 800994c:	425b      	negs	r3, r3
 800994e:	001a      	movs	r2, r3
 8009950:	f7fc fe7e 	bl	8006650 <osMessagePut>
			return intensity;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	e006      	b.n	8009966 <load_setup+0x8e>
	for(intensity = 0; intensity < 32; intensity++)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	3301      	adds	r3, #1
 800995c:	60fb      	str	r3, [r7, #12]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2b1f      	cmp	r3, #31
 8009962:	d9d9      	bls.n	8009918 <load_setup+0x40>
		}
	}

	return intensity;
 8009964:	68fb      	ldr	r3, [r7, #12]
}
 8009966:	0018      	movs	r0, r3
 8009968:	46bd      	mov	sp, r7
 800996a:	b005      	add	sp, #20
 800996c:	bd90      	pop	{r4, r7, pc}
 800996e:	46c0      	nop			; (mov r8, r8)
 8009970:	33333333 	.word	0x33333333
 8009974:	3feb3333 	.word	0x3feb3333
 8009978:	2000253c 	.word	0x2000253c
 800997c:	200027ec 	.word	0x200027ec

08009980 <uart_send_buff>:
    return true;
  }
}

uint32_t uart_send_buff(uint8_t *data_out, uint32_t size)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
	return HAL_UART_Transmit_DMA(&huart1, data_out, (uint16_t)size);
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	b29a      	uxth	r2, r3
 800998e:	6879      	ldr	r1, [r7, #4]
 8009990:	4b04      	ldr	r3, [pc, #16]	; (80099a4 <uart_send_buff+0x24>)
 8009992:	0018      	movs	r0, r3
 8009994:	f7fb fd00 	bl	8005398 <HAL_UART_Transmit_DMA>
 8009998:	0003      	movs	r3, r0
}
 800999a:	0018      	movs	r0, r3
 800999c:	46bd      	mov	sp, r7
 800999e:	b002      	add	sp, #8
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	46c0      	nop			; (mov r8, r8)
 80099a4:	20002648 	.word	0x20002648

080099a8 <uart_read_byte>:

uint32_t uart_read_byte(uint8_t *pData)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
	return HAL_UART_Receive_DMA(&huart1, pData, 1);
 80099b0:	6879      	ldr	r1, [r7, #4]
 80099b2:	4b05      	ldr	r3, [pc, #20]	; (80099c8 <uart_read_byte+0x20>)
 80099b4:	2201      	movs	r2, #1
 80099b6:	0018      	movs	r0, r3
 80099b8:	f7fb fd7e 	bl	80054b8 <HAL_UART_Receive_DMA>
 80099bc:	0003      	movs	r3, r0
}
 80099be:	0018      	movs	r0, r3
 80099c0:	46bd      	mov	sp, r7
 80099c2:	b002      	add	sp, #8
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	46c0      	nop			; (mov r8, r8)
 80099c8:	20002648 	.word	0x20002648

080099cc <MonitorTask>:
extern EEPROMStorageTypDef eeprom_info;
osThreadId MonitorTaskHandle;
DevStorageTypDef storage;

void MonitorTask(void const * argument)
{
 80099cc:	b5b0      	push	{r4, r5, r7, lr}
 80099ce:	b088      	sub	sp, #32
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  osEvent evt;
  uint16_t  local_adc_data[5];
  static uint32_t mon_dayticks = 0;

  /*Start ADC DMA Process*/
  if(HAL_ADC_Start_DMA(&hadc, (uint32_t *)storage.adc_data, 5) != HAL_OK)
 80099d4:	498e      	ldr	r1, [pc, #568]	; (8009c10 <MonitorTask+0x244>)
 80099d6:	4b8f      	ldr	r3, [pc, #572]	; (8009c14 <MonitorTask+0x248>)
 80099d8:	2205      	movs	r2, #5
 80099da:	0018      	movs	r0, r3
 80099dc:	f7f8 fefc 	bl	80027d8 <HAL_ADC_Start_DMA>
 80099e0:	1e03      	subs	r3, r0, #0
 80099e2:	d001      	beq.n	80099e8 <MonitorTask+0x1c>
  {
	  Error_Handler();
 80099e4:	f7ff fd42 	bl	800946c <Error_Handler>
  }

  /*Start timer*/
  HAL_TIM_Base_Start_IT(&htim21);
 80099e8:	4b8b      	ldr	r3, [pc, #556]	; (8009c18 <MonitorTask+0x24c>)
 80099ea:	0018      	movs	r0, r3
 80099ec:	f7fb f95c 	bl	8004ca8 <HAL_TIM_Base_Start_IT>

  for(;;)
  {
	  /*Wait for signal from timer interrupt*/
	  evt = osSignalWait (0x00000001, osWaitForever);
 80099f0:	2414      	movs	r4, #20
 80099f2:	1938      	adds	r0, r7, r4
 80099f4:	2301      	movs	r3, #1
 80099f6:	425b      	negs	r3, r3
 80099f8:	001a      	movs	r2, r3
 80099fa:	2101      	movs	r1, #1
 80099fc:	f7fc fda8 	bl	8006550 <osSignalWait>
	  if (evt.status == osEventSignal)
 8009a00:	193b      	adds	r3, r7, r4
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2b08      	cmp	r3, #8
 8009a06:	d1f3      	bne.n	80099f0 <MonitorTask+0x24>
	  {
		  /*Copy all ADC data measured with DMA*/
		  memcpy(local_adc_data, storage.adc_data, sizeof(storage.adc_data));
 8009a08:	2508      	movs	r5, #8
 8009a0a:	197b      	adds	r3, r7, r5
 8009a0c:	4a80      	ldr	r2, [pc, #512]	; (8009c10 <MonitorTask+0x244>)
 8009a0e:	ca03      	ldmia	r2!, {r0, r1}
 8009a10:	c303      	stmia	r3!, {r0, r1}
 8009a12:	8812      	ldrh	r2, [r2, #0]
 8009a14:	801a      	strh	r2, [r3, #0]

		  /*Convert&Store Input Voltage*/
		  storage.vinput_mv = (uint32_t)(local_adc_data[2] * VINPUT_CONST);
 8009a16:	197b      	adds	r3, r7, r5
 8009a18:	889b      	ldrh	r3, [r3, #4]
 8009a1a:	0018      	movs	r0, r3
 8009a1c:	f7f8 fc18 	bl	8002250 <__aeabi_i2d>
 8009a20:	4a7e      	ldr	r2, [pc, #504]	; (8009c1c <MonitorTask+0x250>)
 8009a22:	4b7f      	ldr	r3, [pc, #508]	; (8009c20 <MonitorTask+0x254>)
 8009a24:	f7f7 fe24 	bl	8001670 <__aeabi_dmul>
 8009a28:	0003      	movs	r3, r0
 8009a2a:	000c      	movs	r4, r1
 8009a2c:	0018      	movs	r0, r3
 8009a2e:	0021      	movs	r1, r4
 8009a30:	f7f6 fca6 	bl	8000380 <__aeabi_d2uiz>
 8009a34:	0002      	movs	r2, r0
 8009a36:	4b76      	ldr	r3, [pc, #472]	; (8009c10 <MonitorTask+0x244>)
 8009a38:	60da      	str	r2, [r3, #12]

		  /*Convert&Store Battery Voltage*/
		  storage.vbatt_mv = (uint32_t)(local_adc_data[3] * VBATT_CONST);
 8009a3a:	197b      	adds	r3, r7, r5
 8009a3c:	88db      	ldrh	r3, [r3, #6]
 8009a3e:	0018      	movs	r0, r3
 8009a40:	f7f8 fc06 	bl	8002250 <__aeabi_i2d>
 8009a44:	2200      	movs	r2, #0
 8009a46:	4b77      	ldr	r3, [pc, #476]	; (8009c24 <MonitorTask+0x258>)
 8009a48:	f7f7 fe12 	bl	8001670 <__aeabi_dmul>
 8009a4c:	0003      	movs	r3, r0
 8009a4e:	000c      	movs	r4, r1
 8009a50:	0018      	movs	r0, r3
 8009a52:	0021      	movs	r1, r4
 8009a54:	f7f6 fc94 	bl	8000380 <__aeabi_d2uiz>
 8009a58:	0002      	movs	r2, r0
 8009a5a:	4b6d      	ldr	r3, [pc, #436]	; (8009c10 <MonitorTask+0x244>)
 8009a5c:	611a      	str	r2, [r3, #16]

		  /*Convert&Store Arduino Input Voltage*/
		  storage.vard_input_mv = (uint32_t)(local_adc_data[4] * VARD_CONST);
 8009a5e:	197b      	adds	r3, r7, r5
 8009a60:	891b      	ldrh	r3, [r3, #8]
 8009a62:	0018      	movs	r0, r3
 8009a64:	f7f8 fbf4 	bl	8002250 <__aeabi_i2d>
 8009a68:	4a6f      	ldr	r2, [pc, #444]	; (8009c28 <MonitorTask+0x25c>)
 8009a6a:	4b70      	ldr	r3, [pc, #448]	; (8009c2c <MonitorTask+0x260>)
 8009a6c:	f7f7 fe00 	bl	8001670 <__aeabi_dmul>
 8009a70:	0003      	movs	r3, r0
 8009a72:	000c      	movs	r4, r1
 8009a74:	0018      	movs	r0, r3
 8009a76:	0021      	movs	r1, r4
 8009a78:	f7f6 fc82 	bl	8000380 <__aeabi_d2uiz>
 8009a7c:	0002      	movs	r2, r0
 8009a7e:	4b64      	ldr	r3, [pc, #400]	; (8009c10 <MonitorTask+0x244>)
 8009a80:	615a      	str	r2, [r3, #20]

		  /*Convert&Store Input Current*/
		  storage.cinput_ma = (int32_t)((local_adc_data[0] - COFFSET_CONST) * CSENSE_CONST);
 8009a82:	197b      	adds	r3, r7, r5
 8009a84:	881b      	ldrh	r3, [r3, #0]
 8009a86:	3b41      	subs	r3, #65	; 0x41
 8009a88:	0018      	movs	r0, r3
 8009a8a:	f7f8 fbe1 	bl	8002250 <__aeabi_i2d>
 8009a8e:	4a68      	ldr	r2, [pc, #416]	; (8009c30 <MonitorTask+0x264>)
 8009a90:	4b68      	ldr	r3, [pc, #416]	; (8009c34 <MonitorTask+0x268>)
 8009a92:	f7f7 fded 	bl	8001670 <__aeabi_dmul>
 8009a96:	0003      	movs	r3, r0
 8009a98:	000c      	movs	r4, r1
 8009a9a:	0018      	movs	r0, r3
 8009a9c:	0021      	movs	r1, r4
 8009a9e:	f7f8 fba1 	bl	80021e4 <__aeabi_d2iz>
 8009aa2:	0002      	movs	r2, r0
 8009aa4:	4b5a      	ldr	r3, [pc, #360]	; (8009c10 <MonitorTask+0x244>)
 8009aa6:	619a      	str	r2, [r3, #24]
		  if(storage.cinput_ma < 0)
 8009aa8:	4b59      	ldr	r3, [pc, #356]	; (8009c10 <MonitorTask+0x244>)
 8009aaa:	699b      	ldr	r3, [r3, #24]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	da02      	bge.n	8009ab6 <MonitorTask+0xea>
		  {storage.cinput_ma = 0;}
 8009ab0:	4b57      	ldr	r3, [pc, #348]	; (8009c10 <MonitorTask+0x244>)
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	619a      	str	r2, [r3, #24]

		  /*Convert&Store Output Current*/
		  storage.coutput_ma = (int32_t)((local_adc_data[1] -COFFSET_CONST) * CSENSE_CONST);
 8009ab6:	2308      	movs	r3, #8
 8009ab8:	18fb      	adds	r3, r7, r3
 8009aba:	885b      	ldrh	r3, [r3, #2]
 8009abc:	3b41      	subs	r3, #65	; 0x41
 8009abe:	0018      	movs	r0, r3
 8009ac0:	f7f8 fbc6 	bl	8002250 <__aeabi_i2d>
 8009ac4:	4a5a      	ldr	r2, [pc, #360]	; (8009c30 <MonitorTask+0x264>)
 8009ac6:	4b5b      	ldr	r3, [pc, #364]	; (8009c34 <MonitorTask+0x268>)
 8009ac8:	f7f7 fdd2 	bl	8001670 <__aeabi_dmul>
 8009acc:	0003      	movs	r3, r0
 8009ace:	000c      	movs	r4, r1
 8009ad0:	0018      	movs	r0, r3
 8009ad2:	0021      	movs	r1, r4
 8009ad4:	f7f8 fb86 	bl	80021e4 <__aeabi_d2iz>
 8009ad8:	0002      	movs	r2, r0
 8009ada:	4b4d      	ldr	r3, [pc, #308]	; (8009c10 <MonitorTask+0x244>)
 8009adc:	61da      	str	r2, [r3, #28]
		  if(storage.coutput_ma < 0)
 8009ade:	4b4c      	ldr	r3, [pc, #304]	; (8009c10 <MonitorTask+0x244>)
 8009ae0:	69db      	ldr	r3, [r3, #28]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	da02      	bge.n	8009aec <MonitorTask+0x120>
		  {storage.coutput_ma = 0;}
 8009ae6:	4b4a      	ldr	r3, [pc, #296]	; (8009c10 <MonitorTask+0x244>)
 8009ae8:	2200      	movs	r2, #0
 8009aea:	61da      	str	r2, [r3, #28]

		  /*Convert&Store Energy Accumulated*/
		  storage.energy_stored_mah += (float)(storage.cinput_ma * ETIME_CONST);
 8009aec:	4b48      	ldr	r3, [pc, #288]	; (8009c10 <MonitorTask+0x244>)
 8009aee:	6a1c      	ldr	r4, [r3, #32]
 8009af0:	4b47      	ldr	r3, [pc, #284]	; (8009c10 <MonitorTask+0x244>)
 8009af2:	699b      	ldr	r3, [r3, #24]
 8009af4:	0018      	movs	r0, r3
 8009af6:	f7f8 fbab 	bl	8002250 <__aeabi_i2d>
 8009afa:	4a4f      	ldr	r2, [pc, #316]	; (8009c38 <MonitorTask+0x26c>)
 8009afc:	4b4f      	ldr	r3, [pc, #316]	; (8009c3c <MonitorTask+0x270>)
 8009afe:	f7f7 fdb7 	bl	8001670 <__aeabi_dmul>
 8009b02:	0002      	movs	r2, r0
 8009b04:	000b      	movs	r3, r1
 8009b06:	0010      	movs	r0, r2
 8009b08:	0019      	movs	r1, r3
 8009b0a:	f7f8 fc0d 	bl	8002328 <__aeabi_d2f>
 8009b0e:	1c03      	adds	r3, r0, #0
 8009b10:	1c19      	adds	r1, r3, #0
 8009b12:	1c20      	adds	r0, r4, #0
 8009b14:	f7f6 fd14 	bl	8000540 <__aeabi_fadd>
 8009b18:	1c03      	adds	r3, r0, #0
 8009b1a:	1c1a      	adds	r2, r3, #0
 8009b1c:	4b3c      	ldr	r3, [pc, #240]	; (8009c10 <MonitorTask+0x244>)
 8009b1e:	621a      	str	r2, [r3, #32]
		  if(storage.energy_stored_mah > FULL_BATT_MAH)
 8009b20:	4b3b      	ldr	r3, [pc, #236]	; (8009c10 <MonitorTask+0x244>)
 8009b22:	6a1b      	ldr	r3, [r3, #32]
 8009b24:	4946      	ldr	r1, [pc, #280]	; (8009c40 <MonitorTask+0x274>)
 8009b26:	1c18      	adds	r0, r3, #0
 8009b28:	f7f6 fbde 	bl	80002e8 <__aeabi_fcmpgt>
 8009b2c:	1e03      	subs	r3, r0, #0
 8009b2e:	d002      	beq.n	8009b36 <MonitorTask+0x16a>
		  {storage.energy_stored_mah = FULL_BATT_MAH;}
 8009b30:	4b37      	ldr	r3, [pc, #220]	; (8009c10 <MonitorTask+0x244>)
 8009b32:	4a43      	ldr	r2, [pc, #268]	; (8009c40 <MonitorTask+0x274>)
 8009b34:	621a      	str	r2, [r3, #32]

		  /*Convert&Store Energy Released*/
		  storage.energy_released_mah += (float)(storage.coutput_ma * ETIME_CONST);
 8009b36:	4b36      	ldr	r3, [pc, #216]	; (8009c10 <MonitorTask+0x244>)
 8009b38:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009b3a:	4b35      	ldr	r3, [pc, #212]	; (8009c10 <MonitorTask+0x244>)
 8009b3c:	69db      	ldr	r3, [r3, #28]
 8009b3e:	0018      	movs	r0, r3
 8009b40:	f7f8 fb86 	bl	8002250 <__aeabi_i2d>
 8009b44:	4a3c      	ldr	r2, [pc, #240]	; (8009c38 <MonitorTask+0x26c>)
 8009b46:	4b3d      	ldr	r3, [pc, #244]	; (8009c3c <MonitorTask+0x270>)
 8009b48:	f7f7 fd92 	bl	8001670 <__aeabi_dmul>
 8009b4c:	0002      	movs	r2, r0
 8009b4e:	000b      	movs	r3, r1
 8009b50:	0010      	movs	r0, r2
 8009b52:	0019      	movs	r1, r3
 8009b54:	f7f8 fbe8 	bl	8002328 <__aeabi_d2f>
 8009b58:	1c03      	adds	r3, r0, #0
 8009b5a:	1c19      	adds	r1, r3, #0
 8009b5c:	1c20      	adds	r0, r4, #0
 8009b5e:	f7f6 fcef 	bl	8000540 <__aeabi_fadd>
 8009b62:	1c03      	adds	r3, r0, #0
 8009b64:	1c1a      	adds	r2, r3, #0
 8009b66:	4b2a      	ldr	r3, [pc, #168]	; (8009c10 <MonitorTask+0x244>)
 8009b68:	625a      	str	r2, [r3, #36]	; 0x24
		  if(storage.energy_released_mah > FULL_BATT_MAH)
 8009b6a:	4b29      	ldr	r3, [pc, #164]	; (8009c10 <MonitorTask+0x244>)
 8009b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6e:	4934      	ldr	r1, [pc, #208]	; (8009c40 <MonitorTask+0x274>)
 8009b70:	1c18      	adds	r0, r3, #0
 8009b72:	f7f6 fbb9 	bl	80002e8 <__aeabi_fcmpgt>
 8009b76:	1e03      	subs	r3, r0, #0
 8009b78:	d002      	beq.n	8009b80 <MonitorTask+0x1b4>
		  {storage.energy_released_mah = FULL_BATT_MAH;}
 8009b7a:	4b25      	ldr	r3, [pc, #148]	; (8009c10 <MonitorTask+0x244>)
 8009b7c:	4a30      	ldr	r2, [pc, #192]	; (8009c40 <MonitorTask+0x274>)
 8009b7e:	625a      	str	r2, [r3, #36]	; 0x24

		  /*Convert&Store Total Battery Energy Output*/
		  storage.total_batt_ouput_ah += (float)((storage.coutput_ma * ETIME_CONST)/1000);
 8009b80:	4b23      	ldr	r3, [pc, #140]	; (8009c10 <MonitorTask+0x244>)
 8009b82:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8009b84:	4b22      	ldr	r3, [pc, #136]	; (8009c10 <MonitorTask+0x244>)
 8009b86:	69db      	ldr	r3, [r3, #28]
 8009b88:	0018      	movs	r0, r3
 8009b8a:	f7f8 fb61 	bl	8002250 <__aeabi_i2d>
 8009b8e:	4a2a      	ldr	r2, [pc, #168]	; (8009c38 <MonitorTask+0x26c>)
 8009b90:	4b2a      	ldr	r3, [pc, #168]	; (8009c3c <MonitorTask+0x270>)
 8009b92:	f7f7 fd6d 	bl	8001670 <__aeabi_dmul>
 8009b96:	0002      	movs	r2, r0
 8009b98:	000b      	movs	r3, r1
 8009b9a:	0010      	movs	r0, r2
 8009b9c:	0019      	movs	r1, r3
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	4b28      	ldr	r3, [pc, #160]	; (8009c44 <MonitorTask+0x278>)
 8009ba2:	f7f7 f95b 	bl	8000e5c <__aeabi_ddiv>
 8009ba6:	0002      	movs	r2, r0
 8009ba8:	000b      	movs	r3, r1
 8009baa:	0010      	movs	r0, r2
 8009bac:	0019      	movs	r1, r3
 8009bae:	f7f8 fbbb 	bl	8002328 <__aeabi_d2f>
 8009bb2:	1c03      	adds	r3, r0, #0
 8009bb4:	1c19      	adds	r1, r3, #0
 8009bb6:	1c20      	adds	r0, r4, #0
 8009bb8:	f7f6 fcc2 	bl	8000540 <__aeabi_fadd>
 8009bbc:	1c03      	adds	r3, r0, #0
 8009bbe:	1c1a      	adds	r2, r3, #0
 8009bc0:	4b13      	ldr	r3, [pc, #76]	; (8009c10 <MonitorTask+0x244>)
 8009bc2:	629a      	str	r2, [r3, #40]	; 0x28

		  /*Do the day length time tracking*/
		  if(storage.vinput_mv+eeprom_info.vin_hys_mv > eeprom_info.vin_limit_mv)
 8009bc4:	4b12      	ldr	r3, [pc, #72]	; (8009c10 <MonitorTask+0x244>)
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	4a1f      	ldr	r2, [pc, #124]	; (8009c48 <MonitorTask+0x27c>)
 8009bca:	88d2      	ldrh	r2, [r2, #6]
 8009bcc:	189b      	adds	r3, r3, r2
 8009bce:	4a1e      	ldr	r2, [pc, #120]	; (8009c48 <MonitorTask+0x27c>)
 8009bd0:	8892      	ldrh	r2, [r2, #4]
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d918      	bls.n	8009c08 <MonitorTask+0x23c>
		  {
			  mon_dayticks++;
 8009bd6:	4b1d      	ldr	r3, [pc, #116]	; (8009c4c <MonitorTask+0x280>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	1c5a      	adds	r2, r3, #1
 8009bdc:	4b1b      	ldr	r3, [pc, #108]	; (8009c4c <MonitorTask+0x280>)
 8009bde:	601a      	str	r2, [r3, #0]
			  storage.daylength_s = (uint32_t)(mon_dayticks/10);
 8009be0:	4b1a      	ldr	r3, [pc, #104]	; (8009c4c <MonitorTask+0x280>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	210a      	movs	r1, #10
 8009be6:	0018      	movs	r0, r3
 8009be8:	f7f6 fa8e 	bl	8000108 <__udivsi3>
 8009bec:	0003      	movs	r3, r0
 8009bee:	001a      	movs	r2, r3
 8009bf0:	4b07      	ldr	r3, [pc, #28]	; (8009c10 <MonitorTask+0x244>)
 8009bf2:	62da      	str	r2, [r3, #44]	; 0x2c
			  if(storage.daylength_s > HOURS_24)
 8009bf4:	4b06      	ldr	r3, [pc, #24]	; (8009c10 <MonitorTask+0x244>)
 8009bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf8:	4a15      	ldr	r2, [pc, #84]	; (8009c50 <MonitorTask+0x284>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d800      	bhi.n	8009c00 <MonitorTask+0x234>
 8009bfe:	e6f7      	b.n	80099f0 <MonitorTask+0x24>
			  {storage.daylength_s = HOURS_24;}
 8009c00:	4b03      	ldr	r3, [pc, #12]	; (8009c10 <MonitorTask+0x244>)
 8009c02:	4a13      	ldr	r2, [pc, #76]	; (8009c50 <MonitorTask+0x284>)
 8009c04:	62da      	str	r2, [r3, #44]	; 0x2c
 8009c06:	e6f3      	b.n	80099f0 <MonitorTask+0x24>
		  }
		  else
		  {
			  mon_dayticks = 0;
 8009c08:	4b10      	ldr	r3, [pc, #64]	; (8009c4c <MonitorTask+0x280>)
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	601a      	str	r2, [r3, #0]
	  evt = osSignalWait (0x00000001, osWaitForever);
 8009c0e:	e6ef      	b.n	80099f0 <MonitorTask+0x24>
 8009c10:	200027ec 	.word	0x200027ec
 8009c14:	20002714 	.word	0x20002714
 8009c18:	200027ac 	.word	0x200027ac
 8009c1c:	6c8b4396 	.word	0x6c8b4396
 8009c20:	401d7be7 	.word	0x401d7be7
 8009c24:	40100000 	.word	0x40100000
 8009c28:	83126e98 	.word	0x83126e98
 8009c2c:	3fe9cac0 	.word	0x3fe9cac0
 8009c30:	2b020c4a 	.word	0x2b020c4a
 8009c34:	3fff1687 	.word	0x3fff1687
 8009c38:	e1812c13 	.word	0xe1812c13
 8009c3c:	3efd208b 	.word	0x3efd208b
 8009c40:	46480000 	.word	0x46480000
 8009c44:	408f4000 	.word	0x408f4000
 8009c48:	20002544 	.word	0x20002544
 8009c4c:	20001ef4 	.word	0x20001ef4
 8009c50:	00015180 	.word	0x00015180

08009c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c58:	4b0f      	ldr	r3, [pc, #60]	; (8009c98 <HAL_MspInit+0x44>)
 8009c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c5c:	4b0e      	ldr	r3, [pc, #56]	; (8009c98 <HAL_MspInit+0x44>)
 8009c5e:	2101      	movs	r1, #1
 8009c60:	430a      	orrs	r2, r1
 8009c62:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8009c64:	4b0c      	ldr	r3, [pc, #48]	; (8009c98 <HAL_MspInit+0x44>)
 8009c66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c68:	4b0b      	ldr	r3, [pc, #44]	; (8009c98 <HAL_MspInit+0x44>)
 8009c6a:	2180      	movs	r1, #128	; 0x80
 8009c6c:	0549      	lsls	r1, r1, #21
 8009c6e:	430a      	orrs	r2, r1
 8009c70:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8009c72:	2302      	movs	r3, #2
 8009c74:	425b      	negs	r3, r3
 8009c76:	2200      	movs	r2, #0
 8009c78:	2103      	movs	r1, #3
 8009c7a:	0018      	movs	r0, r3
 8009c7c:	f7f9 f916 	bl	8002eac <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 3, 0);
 8009c80:	2200      	movs	r2, #0
 8009c82:	2103      	movs	r1, #3
 8009c84:	2004      	movs	r0, #4
 8009c86:	f7f9 f911 	bl	8002eac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8009c8a:	2004      	movs	r0, #4
 8009c8c:	f7f9 f923 	bl	8002ed6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009c90:	46c0      	nop			; (mov r8, r8)
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	46c0      	nop			; (mov r8, r8)
 8009c98:	40021000 	.word	0x40021000

08009c9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b088      	sub	sp, #32
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ca4:	230c      	movs	r3, #12
 8009ca6:	18fb      	adds	r3, r7, r3
 8009ca8:	0018      	movs	r0, r3
 8009caa:	2314      	movs	r3, #20
 8009cac:	001a      	movs	r2, r3
 8009cae:	2100      	movs	r1, #0
 8009cb0:	f000 fac1 	bl	800a236 <memset>
  if(hadc->Instance==ADC1)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a2f      	ldr	r2, [pc, #188]	; (8009d78 <HAL_ADC_MspInit+0xdc>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d157      	bne.n	8009d6e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009cbe:	4b2f      	ldr	r3, [pc, #188]	; (8009d7c <HAL_ADC_MspInit+0xe0>)
 8009cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cc2:	4b2e      	ldr	r3, [pc, #184]	; (8009d7c <HAL_ADC_MspInit+0xe0>)
 8009cc4:	2180      	movs	r1, #128	; 0x80
 8009cc6:	0089      	lsls	r1, r1, #2
 8009cc8:	430a      	orrs	r2, r1
 8009cca:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ccc:	4b2b      	ldr	r3, [pc, #172]	; (8009d7c <HAL_ADC_MspInit+0xe0>)
 8009cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd0:	4b2a      	ldr	r3, [pc, #168]	; (8009d7c <HAL_ADC_MspInit+0xe0>)
 8009cd2:	2101      	movs	r1, #1
 8009cd4:	430a      	orrs	r2, r1
 8009cd6:	62da      	str	r2, [r3, #44]	; 0x2c
 8009cd8:	4b28      	ldr	r3, [pc, #160]	; (8009d7c <HAL_ADC_MspInit+0xe0>)
 8009cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cdc:	2201      	movs	r2, #1
 8009cde:	4013      	ands	r3, r2
 8009ce0:	60bb      	str	r3, [r7, #8]
 8009ce2:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4 
    */
    GPIO_InitStruct.Pin = ISENS1_Pin|ISENS2_Pin|VINPUT_Pin|VBAT_Pin 
 8009ce4:	210c      	movs	r1, #12
 8009ce6:	187b      	adds	r3, r7, r1
 8009ce8:	221f      	movs	r2, #31
 8009cea:	601a      	str	r2, [r3, #0]
                          |VAUX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009cec:	187b      	adds	r3, r7, r1
 8009cee:	2203      	movs	r2, #3
 8009cf0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cf2:	187b      	adds	r3, r7, r1
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009cf8:	187a      	adds	r2, r7, r1
 8009cfa:	23a0      	movs	r3, #160	; 0xa0
 8009cfc:	05db      	lsls	r3, r3, #23
 8009cfe:	0011      	movs	r1, r2
 8009d00:	0018      	movs	r0, r3
 8009d02:	f7f9 fe7b 	bl	80039fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8009d06:	4b1e      	ldr	r3, [pc, #120]	; (8009d80 <HAL_ADC_MspInit+0xe4>)
 8009d08:	4a1e      	ldr	r2, [pc, #120]	; (8009d84 <HAL_ADC_MspInit+0xe8>)
 8009d0a:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8009d0c:	4b1c      	ldr	r3, [pc, #112]	; (8009d80 <HAL_ADC_MspInit+0xe4>)
 8009d0e:	2200      	movs	r2, #0
 8009d10:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009d12:	4b1b      	ldr	r3, [pc, #108]	; (8009d80 <HAL_ADC_MspInit+0xe4>)
 8009d14:	2200      	movs	r2, #0
 8009d16:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8009d18:	4b19      	ldr	r3, [pc, #100]	; (8009d80 <HAL_ADC_MspInit+0xe4>)
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8009d1e:	4b18      	ldr	r3, [pc, #96]	; (8009d80 <HAL_ADC_MspInit+0xe4>)
 8009d20:	2280      	movs	r2, #128	; 0x80
 8009d22:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009d24:	4b16      	ldr	r3, [pc, #88]	; (8009d80 <HAL_ADC_MspInit+0xe4>)
 8009d26:	2280      	movs	r2, #128	; 0x80
 8009d28:	0052      	lsls	r2, r2, #1
 8009d2a:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009d2c:	4b14      	ldr	r3, [pc, #80]	; (8009d80 <HAL_ADC_MspInit+0xe4>)
 8009d2e:	2280      	movs	r2, #128	; 0x80
 8009d30:	00d2      	lsls	r2, r2, #3
 8009d32:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8009d34:	4b12      	ldr	r3, [pc, #72]	; (8009d80 <HAL_ADC_MspInit+0xe4>)
 8009d36:	2220      	movs	r2, #32
 8009d38:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8009d3a:	4b11      	ldr	r3, [pc, #68]	; (8009d80 <HAL_ADC_MspInit+0xe4>)
 8009d3c:	2280      	movs	r2, #128	; 0x80
 8009d3e:	0192      	lsls	r2, r2, #6
 8009d40:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8009d42:	4b0f      	ldr	r3, [pc, #60]	; (8009d80 <HAL_ADC_MspInit+0xe4>)
 8009d44:	0018      	movs	r0, r3
 8009d46:	f7f9 fab7 	bl	80032b8 <HAL_DMA_Init>
 8009d4a:	1e03      	subs	r3, r0, #0
 8009d4c:	d001      	beq.n	8009d52 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8009d4e:	f7ff fb8d 	bl	800946c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4a0a      	ldr	r2, [pc, #40]	; (8009d80 <HAL_ADC_MspInit+0xe4>)
 8009d56:	64da      	str	r2, [r3, #76]	; 0x4c
 8009d58:	4b09      	ldr	r3, [pc, #36]	; (8009d80 <HAL_ADC_MspInit+0xe4>)
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 3, 0);
 8009d5e:	2200      	movs	r2, #0
 8009d60:	2103      	movs	r1, #3
 8009d62:	200c      	movs	r0, #12
 8009d64:	f7f9 f8a2 	bl	8002eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8009d68:	200c      	movs	r0, #12
 8009d6a:	f7f9 f8b4 	bl	8002ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8009d6e:	46c0      	nop			; (mov r8, r8)
 8009d70:	46bd      	mov	sp, r7
 8009d72:	b008      	add	sp, #32
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	46c0      	nop			; (mov r8, r8)
 8009d78:	40012400 	.word	0x40012400
 8009d7c:	40021000 	.word	0x40021000
 8009d80:	200026cc 	.word	0x200026cc
 8009d84:	40020008 	.word	0x40020008

08009d88 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a0a      	ldr	r2, [pc, #40]	; (8009dc0 <HAL_CRC_MspInit+0x38>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d10d      	bne.n	8009db6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8009d9a:	4b0a      	ldr	r3, [pc, #40]	; (8009dc4 <HAL_CRC_MspInit+0x3c>)
 8009d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d9e:	4b09      	ldr	r3, [pc, #36]	; (8009dc4 <HAL_CRC_MspInit+0x3c>)
 8009da0:	2180      	movs	r1, #128	; 0x80
 8009da2:	0149      	lsls	r1, r1, #5
 8009da4:	430a      	orrs	r2, r1
 8009da6:	631a      	str	r2, [r3, #48]	; 0x30
 8009da8:	4b06      	ldr	r3, [pc, #24]	; (8009dc4 <HAL_CRC_MspInit+0x3c>)
 8009daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dac:	2380      	movs	r3, #128	; 0x80
 8009dae:	015b      	lsls	r3, r3, #5
 8009db0:	4013      	ands	r3, r2
 8009db2:	60fb      	str	r3, [r7, #12]
 8009db4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8009db6:	46c0      	nop			; (mov r8, r8)
 8009db8:	46bd      	mov	sp, r7
 8009dba:	b004      	add	sp, #16
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	46c0      	nop			; (mov r8, r8)
 8009dc0:	40023000 	.word	0x40023000
 8009dc4:	40021000 	.word	0x40021000

08009dc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a16      	ldr	r2, [pc, #88]	; (8009e30 <HAL_TIM_Base_MspInit+0x68>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d10e      	bne.n	8009df8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8009dda:	4b16      	ldr	r3, [pc, #88]	; (8009e34 <HAL_TIM_Base_MspInit+0x6c>)
 8009ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dde:	4b15      	ldr	r3, [pc, #84]	; (8009e34 <HAL_TIM_Base_MspInit+0x6c>)
 8009de0:	2120      	movs	r1, #32
 8009de2:	430a      	orrs	r2, r1
 8009de4:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 8009de6:	2200      	movs	r2, #0
 8009de8:	2103      	movs	r1, #3
 8009dea:	2012      	movs	r0, #18
 8009dec:	f7f9 f85e 	bl	8002eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8009df0:	2012      	movs	r0, #18
 8009df2:	f7f9 f870 	bl	8002ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8009df6:	e016      	b.n	8009e26 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM21)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a0e      	ldr	r2, [pc, #56]	; (8009e38 <HAL_TIM_Base_MspInit+0x70>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d106      	bne.n	8009e10 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8009e02:	4b0c      	ldr	r3, [pc, #48]	; (8009e34 <HAL_TIM_Base_MspInit+0x6c>)
 8009e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e06:	4b0b      	ldr	r3, [pc, #44]	; (8009e34 <HAL_TIM_Base_MspInit+0x6c>)
 8009e08:	2104      	movs	r1, #4
 8009e0a:	430a      	orrs	r2, r1
 8009e0c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8009e0e:	e00a      	b.n	8009e26 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM22)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a09      	ldr	r2, [pc, #36]	; (8009e3c <HAL_TIM_Base_MspInit+0x74>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d105      	bne.n	8009e26 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8009e1a:	4b06      	ldr	r3, [pc, #24]	; (8009e34 <HAL_TIM_Base_MspInit+0x6c>)
 8009e1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e1e:	4b05      	ldr	r3, [pc, #20]	; (8009e34 <HAL_TIM_Base_MspInit+0x6c>)
 8009e20:	2120      	movs	r1, #32
 8009e22:	430a      	orrs	r2, r1
 8009e24:	635a      	str	r2, [r3, #52]	; 0x34
}
 8009e26:	46c0      	nop			; (mov r8, r8)
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	b002      	add	sp, #8
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	46c0      	nop			; (mov r8, r8)
 8009e30:	40001400 	.word	0x40001400
 8009e34:	40021000 	.word	0x40021000
 8009e38:	40010800 	.word	0x40010800
 8009e3c:	40011400 	.word	0x40011400

08009e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b088      	sub	sp, #32
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e48:	230c      	movs	r3, #12
 8009e4a:	18fb      	adds	r3, r7, r3
 8009e4c:	0018      	movs	r0, r3
 8009e4e:	2314      	movs	r3, #20
 8009e50:	001a      	movs	r2, r3
 8009e52:	2100      	movs	r1, #0
 8009e54:	f000 f9ef 	bl	800a236 <memset>
  if(huart->Instance==USART1)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a46      	ldr	r2, [pc, #280]	; (8009f78 <HAL_UART_MspInit+0x138>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d000      	beq.n	8009e64 <HAL_UART_MspInit+0x24>
 8009e62:	e084      	b.n	8009f6e <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009e64:	4b45      	ldr	r3, [pc, #276]	; (8009f7c <HAL_UART_MspInit+0x13c>)
 8009e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e68:	4b44      	ldr	r3, [pc, #272]	; (8009f7c <HAL_UART_MspInit+0x13c>)
 8009e6a:	2180      	movs	r1, #128	; 0x80
 8009e6c:	01c9      	lsls	r1, r1, #7
 8009e6e:	430a      	orrs	r2, r1
 8009e70:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009e72:	4b42      	ldr	r3, [pc, #264]	; (8009f7c <HAL_UART_MspInit+0x13c>)
 8009e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e76:	4b41      	ldr	r3, [pc, #260]	; (8009f7c <HAL_UART_MspInit+0x13c>)
 8009e78:	2102      	movs	r1, #2
 8009e7a:	430a      	orrs	r2, r1
 8009e7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8009e7e:	4b3f      	ldr	r3, [pc, #252]	; (8009f7c <HAL_UART_MspInit+0x13c>)
 8009e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e82:	2202      	movs	r2, #2
 8009e84:	4013      	ands	r3, r2
 8009e86:	60bb      	str	r3, [r7, #8]
 8009e88:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009e8a:	210c      	movs	r1, #12
 8009e8c:	187b      	adds	r3, r7, r1
 8009e8e:	22c0      	movs	r2, #192	; 0xc0
 8009e90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e92:	187b      	adds	r3, r7, r1
 8009e94:	2202      	movs	r2, #2
 8009e96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009e98:	187b      	adds	r3, r7, r1
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8009e9e:	187b      	adds	r3, r7, r1
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8009ea4:	187b      	adds	r3, r7, r1
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009eaa:	187b      	adds	r3, r7, r1
 8009eac:	4a34      	ldr	r2, [pc, #208]	; (8009f80 <HAL_UART_MspInit+0x140>)
 8009eae:	0019      	movs	r1, r3
 8009eb0:	0010      	movs	r0, r2
 8009eb2:	f7f9 fda3 	bl	80039fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8009eb6:	4b33      	ldr	r3, [pc, #204]	; (8009f84 <HAL_UART_MspInit+0x144>)
 8009eb8:	4a33      	ldr	r2, [pc, #204]	; (8009f88 <HAL_UART_MspInit+0x148>)
 8009eba:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 8009ebc:	4b31      	ldr	r3, [pc, #196]	; (8009f84 <HAL_UART_MspInit+0x144>)
 8009ebe:	2203      	movs	r2, #3
 8009ec0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009ec2:	4b30      	ldr	r3, [pc, #192]	; (8009f84 <HAL_UART_MspInit+0x144>)
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009ec8:	4b2e      	ldr	r3, [pc, #184]	; (8009f84 <HAL_UART_MspInit+0x144>)
 8009eca:	2200      	movs	r2, #0
 8009ecc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009ece:	4b2d      	ldr	r3, [pc, #180]	; (8009f84 <HAL_UART_MspInit+0x144>)
 8009ed0:	2280      	movs	r2, #128	; 0x80
 8009ed2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009ed4:	4b2b      	ldr	r3, [pc, #172]	; (8009f84 <HAL_UART_MspInit+0x144>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009eda:	4b2a      	ldr	r3, [pc, #168]	; (8009f84 <HAL_UART_MspInit+0x144>)
 8009edc:	2200      	movs	r2, #0
 8009ede:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8009ee0:	4b28      	ldr	r3, [pc, #160]	; (8009f84 <HAL_UART_MspInit+0x144>)
 8009ee2:	2220      	movs	r2, #32
 8009ee4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8009ee6:	4b27      	ldr	r3, [pc, #156]	; (8009f84 <HAL_UART_MspInit+0x144>)
 8009ee8:	2280      	movs	r2, #128	; 0x80
 8009eea:	0192      	lsls	r2, r2, #6
 8009eec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8009eee:	4b25      	ldr	r3, [pc, #148]	; (8009f84 <HAL_UART_MspInit+0x144>)
 8009ef0:	0018      	movs	r0, r3
 8009ef2:	f7f9 f9e1 	bl	80032b8 <HAL_DMA_Init>
 8009ef6:	1e03      	subs	r3, r0, #0
 8009ef8:	d001      	beq.n	8009efe <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8009efa:	f7ff fab7 	bl	800946c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	4a20      	ldr	r2, [pc, #128]	; (8009f84 <HAL_UART_MspInit+0x144>)
 8009f02:	66da      	str	r2, [r3, #108]	; 0x6c
 8009f04:	4b1f      	ldr	r3, [pc, #124]	; (8009f84 <HAL_UART_MspInit+0x144>)
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8009f0a:	4b20      	ldr	r3, [pc, #128]	; (8009f8c <HAL_UART_MspInit+0x14c>)
 8009f0c:	4a20      	ldr	r2, [pc, #128]	; (8009f90 <HAL_UART_MspInit+0x150>)
 8009f0e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
 8009f10:	4b1e      	ldr	r3, [pc, #120]	; (8009f8c <HAL_UART_MspInit+0x14c>)
 8009f12:	2203      	movs	r2, #3
 8009f14:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009f16:	4b1d      	ldr	r3, [pc, #116]	; (8009f8c <HAL_UART_MspInit+0x14c>)
 8009f18:	2210      	movs	r2, #16
 8009f1a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009f1c:	4b1b      	ldr	r3, [pc, #108]	; (8009f8c <HAL_UART_MspInit+0x14c>)
 8009f1e:	2200      	movs	r2, #0
 8009f20:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009f22:	4b1a      	ldr	r3, [pc, #104]	; (8009f8c <HAL_UART_MspInit+0x14c>)
 8009f24:	2280      	movs	r2, #128	; 0x80
 8009f26:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009f28:	4b18      	ldr	r3, [pc, #96]	; (8009f8c <HAL_UART_MspInit+0x14c>)
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009f2e:	4b17      	ldr	r3, [pc, #92]	; (8009f8c <HAL_UART_MspInit+0x14c>)
 8009f30:	2200      	movs	r2, #0
 8009f32:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8009f34:	4b15      	ldr	r3, [pc, #84]	; (8009f8c <HAL_UART_MspInit+0x14c>)
 8009f36:	2200      	movs	r2, #0
 8009f38:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8009f3a:	4b14      	ldr	r3, [pc, #80]	; (8009f8c <HAL_UART_MspInit+0x14c>)
 8009f3c:	2280      	movs	r2, #128	; 0x80
 8009f3e:	0152      	lsls	r2, r2, #5
 8009f40:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8009f42:	4b12      	ldr	r3, [pc, #72]	; (8009f8c <HAL_UART_MspInit+0x14c>)
 8009f44:	0018      	movs	r0, r3
 8009f46:	f7f9 f9b7 	bl	80032b8 <HAL_DMA_Init>
 8009f4a:	1e03      	subs	r3, r0, #0
 8009f4c:	d001      	beq.n	8009f52 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8009f4e:	f7ff fa8d 	bl	800946c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a0d      	ldr	r2, [pc, #52]	; (8009f8c <HAL_UART_MspInit+0x14c>)
 8009f56:	669a      	str	r2, [r3, #104]	; 0x68
 8009f58:	4b0c      	ldr	r3, [pc, #48]	; (8009f8c <HAL_UART_MspInit+0x14c>)
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8009f5e:	2200      	movs	r2, #0
 8009f60:	2103      	movs	r1, #3
 8009f62:	201b      	movs	r0, #27
 8009f64:	f7f8 ffa2 	bl	8002eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009f68:	201b      	movs	r0, #27
 8009f6a:	f7f8 ffb4 	bl	8002ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8009f6e:	46c0      	nop			; (mov r8, r8)
 8009f70:	46bd      	mov	sp, r7
 8009f72:	b008      	add	sp, #32
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	46c0      	nop			; (mov r8, r8)
 8009f78:	40013800 	.word	0x40013800
 8009f7c:	40021000 	.word	0x40021000
 8009f80:	50000400 	.word	0x50000400
 8009f84:	200025c4 	.word	0x200025c4
 8009f88:	40020030 	.word	0x40020030
 8009f8c:	2000257c 	.word	0x2000257c
 8009f90:	4002001c 	.word	0x4002001c

08009f94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b08a      	sub	sp, #40	; 0x28
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	0019      	movs	r1, r3
 8009faa:	200f      	movs	r0, #15
 8009fac:	f7f8 ff7e 	bl	8002eac <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8009fb0:	200f      	movs	r0, #15
 8009fb2:	f7f8 ff90 	bl	8002ed6 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8009fb6:	4b1d      	ldr	r3, [pc, #116]	; (800a02c <HAL_InitTick+0x98>)
 8009fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fba:	4b1c      	ldr	r3, [pc, #112]	; (800a02c <HAL_InitTick+0x98>)
 8009fbc:	2101      	movs	r1, #1
 8009fbe:	430a      	orrs	r2, r1
 8009fc0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009fc2:	2308      	movs	r3, #8
 8009fc4:	18fa      	adds	r2, r7, r3
 8009fc6:	230c      	movs	r3, #12
 8009fc8:	18fb      	adds	r3, r7, r3
 8009fca:	0011      	movs	r1, r2
 8009fcc:	0018      	movs	r0, r3
 8009fce:	f7fa fc93 	bl	80048f8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8009fd2:	f7fa fc65 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 8009fd6:	0003      	movs	r3, r0
 8009fd8:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8009fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fdc:	4914      	ldr	r1, [pc, #80]	; (800a030 <HAL_InitTick+0x9c>)
 8009fde:	0018      	movs	r0, r3
 8009fe0:	f7f6 f892 	bl	8000108 <__udivsi3>
 8009fe4:	0003      	movs	r3, r0
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8009fea:	4b12      	ldr	r3, [pc, #72]	; (800a034 <HAL_InitTick+0xa0>)
 8009fec:	2280      	movs	r2, #128	; 0x80
 8009fee:	05d2      	lsls	r2, r2, #23
 8009ff0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8009ff2:	4b10      	ldr	r3, [pc, #64]	; (800a034 <HAL_InitTick+0xa0>)
 8009ff4:	4a10      	ldr	r2, [pc, #64]	; (800a038 <HAL_InitTick+0xa4>)
 8009ff6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8009ff8:	4b0e      	ldr	r3, [pc, #56]	; (800a034 <HAL_InitTick+0xa0>)
 8009ffa:	6a3a      	ldr	r2, [r7, #32]
 8009ffc:	605a      	str	r2, [r3, #4]
  htim2.Init.ClockDivision = 0;
 8009ffe:	4b0d      	ldr	r3, [pc, #52]	; (800a034 <HAL_InitTick+0xa0>)
 800a000:	2200      	movs	r2, #0
 800a002:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a004:	4b0b      	ldr	r3, [pc, #44]	; (800a034 <HAL_InitTick+0xa0>)
 800a006:	2200      	movs	r2, #0
 800a008:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800a00a:	4b0a      	ldr	r3, [pc, #40]	; (800a034 <HAL_InitTick+0xa0>)
 800a00c:	0018      	movs	r0, r3
 800a00e:	f7fa fdfd 	bl	8004c0c <HAL_TIM_Base_Init>
 800a012:	1e03      	subs	r3, r0, #0
 800a014:	d105      	bne.n	800a022 <HAL_InitTick+0x8e>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800a016:	4b07      	ldr	r3, [pc, #28]	; (800a034 <HAL_InitTick+0xa0>)
 800a018:	0018      	movs	r0, r3
 800a01a:	f7fa fe45 	bl	8004ca8 <HAL_TIM_Base_Start_IT>
 800a01e:	0003      	movs	r3, r0
 800a020:	e000      	b.n	800a024 <HAL_InitTick+0x90>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800a022:	2301      	movs	r3, #1
}
 800a024:	0018      	movs	r0, r3
 800a026:	46bd      	mov	sp, r7
 800a028:	b00a      	add	sp, #40	; 0x28
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	40021000 	.word	0x40021000
 800a030:	000f4240 	.word	0x000f4240
 800a034:	20002820 	.word	0x20002820
 800a038:	000003e7 	.word	0x000003e7

0800a03c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a040:	46c0      	nop			; (mov r8, r8)
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a046:	b580      	push	{r7, lr}
 800a048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a04a:	e7fe      	b.n	800a04a <HardFault_Handler+0x4>

0800a04c <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupt.
  */
void RCC_CRS_IRQHandler(void)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 800a050:	46c0      	nop			; (mov r8, r8)
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
	...

0800a058 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800a05c:	4b03      	ldr	r3, [pc, #12]	; (800a06c <DMA1_Channel1_IRQHandler+0x14>)
 800a05e:	0018      	movs	r0, r3
 800a060:	f7f9 fa50 	bl	8003504 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800a064:	46c0      	nop			; (mov r8, r8)
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	46c0      	nop			; (mov r8, r8)
 800a06c:	200026cc 	.word	0x200026cc

0800a070 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800a074:	4b05      	ldr	r3, [pc, #20]	; (800a08c <DMA1_Channel2_3_IRQHandler+0x1c>)
 800a076:	0018      	movs	r0, r3
 800a078:	f7f9 fa44 	bl	8003504 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800a07c:	4b04      	ldr	r3, [pc, #16]	; (800a090 <DMA1_Channel2_3_IRQHandler+0x20>)
 800a07e:	0018      	movs	r0, r3
 800a080:	f7f9 fa40 	bl	8003504 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800a084:	46c0      	nop			; (mov r8, r8)
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	46c0      	nop			; (mov r8, r8)
 800a08c:	2000257c 	.word	0x2000257c
 800a090:	200025c4 	.word	0x200025c4

0800a094 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800a098:	4b03      	ldr	r3, [pc, #12]	; (800a0a8 <ADC1_COMP_IRQHandler+0x14>)
 800a09a:	0018      	movs	r0, r3
 800a09c:	f7f8 fc1e 	bl	80028dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800a0a0:	46c0      	nop			; (mov r8, r8)
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	46c0      	nop			; (mov r8, r8)
 800a0a8:	20002714 	.word	0x20002714

0800a0ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800a0b0:	4b03      	ldr	r3, [pc, #12]	; (800a0c0 <TIM2_IRQHandler+0x14>)
 800a0b2:	0018      	movs	r0, r3
 800a0b4:	f7fa fe1a 	bl	8004cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800a0b8:	46c0      	nop			; (mov r8, r8)
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	46c0      	nop			; (mov r8, r8)
 800a0c0:	20002820 	.word	0x20002820

0800a0c4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800a0c8:	4b03      	ldr	r3, [pc, #12]	; (800a0d8 <TIM7_IRQHandler+0x14>)
 800a0ca:	0018      	movs	r0, r3
 800a0cc:	f7fa fe0e 	bl	8004cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800a0d0:	46c0      	nop			; (mov r8, r8)
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	46c0      	nop			; (mov r8, r8)
 800a0d8:	20002770 	.word	0x20002770

0800a0dc <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 800a0e0:	4b03      	ldr	r3, [pc, #12]	; (800a0f0 <TIM21_IRQHandler+0x14>)
 800a0e2:	0018      	movs	r0, r3
 800a0e4:	f7fa fe02 	bl	8004cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 800a0e8:	46c0      	nop			; (mov r8, r8)
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	46c0      	nop			; (mov r8, r8)
 800a0f0:	200027ac 	.word	0x200027ac

0800a0f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a0f8:	4b03      	ldr	r3, [pc, #12]	; (800a108 <USART1_IRQHandler+0x14>)
 800a0fa:	0018      	movs	r0, r3
 800a0fc:	f7fb fa74 	bl	80055e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a100:	46c0      	nop			; (mov r8, r8)
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
 800a106:	46c0      	nop			; (mov r8, r8)
 800a108:	20002648 	.word	0x20002648

0800a10c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800a110:	4b17      	ldr	r3, [pc, #92]	; (800a170 <SystemInit+0x64>)
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	4b16      	ldr	r3, [pc, #88]	; (800a170 <SystemInit+0x64>)
 800a116:	2180      	movs	r1, #128	; 0x80
 800a118:	0049      	lsls	r1, r1, #1
 800a11a:	430a      	orrs	r2, r1
 800a11c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800a11e:	4b14      	ldr	r3, [pc, #80]	; (800a170 <SystemInit+0x64>)
 800a120:	68da      	ldr	r2, [r3, #12]
 800a122:	4b13      	ldr	r3, [pc, #76]	; (800a170 <SystemInit+0x64>)
 800a124:	4913      	ldr	r1, [pc, #76]	; (800a174 <SystemInit+0x68>)
 800a126:	400a      	ands	r2, r1
 800a128:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800a12a:	4b11      	ldr	r3, [pc, #68]	; (800a170 <SystemInit+0x64>)
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	4b10      	ldr	r3, [pc, #64]	; (800a170 <SystemInit+0x64>)
 800a130:	4911      	ldr	r1, [pc, #68]	; (800a178 <SystemInit+0x6c>)
 800a132:	400a      	ands	r2, r1
 800a134:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800a136:	4b0e      	ldr	r3, [pc, #56]	; (800a170 <SystemInit+0x64>)
 800a138:	689a      	ldr	r2, [r3, #8]
 800a13a:	4b0d      	ldr	r3, [pc, #52]	; (800a170 <SystemInit+0x64>)
 800a13c:	2101      	movs	r1, #1
 800a13e:	438a      	bics	r2, r1
 800a140:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800a142:	4b0b      	ldr	r3, [pc, #44]	; (800a170 <SystemInit+0x64>)
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	4b0a      	ldr	r3, [pc, #40]	; (800a170 <SystemInit+0x64>)
 800a148:	490c      	ldr	r1, [pc, #48]	; (800a17c <SystemInit+0x70>)
 800a14a:	400a      	ands	r2, r1
 800a14c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800a14e:	4b08      	ldr	r3, [pc, #32]	; (800a170 <SystemInit+0x64>)
 800a150:	68da      	ldr	r2, [r3, #12]
 800a152:	4b07      	ldr	r3, [pc, #28]	; (800a170 <SystemInit+0x64>)
 800a154:	490a      	ldr	r1, [pc, #40]	; (800a180 <SystemInit+0x74>)
 800a156:	400a      	ands	r2, r1
 800a158:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800a15a:	4b05      	ldr	r3, [pc, #20]	; (800a170 <SystemInit+0x64>)
 800a15c:	2200      	movs	r2, #0
 800a15e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a160:	4b08      	ldr	r3, [pc, #32]	; (800a184 <SystemInit+0x78>)
 800a162:	2280      	movs	r2, #128	; 0x80
 800a164:	0512      	lsls	r2, r2, #20
 800a166:	609a      	str	r2, [r3, #8]
#endif
}
 800a168:	46c0      	nop			; (mov r8, r8)
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	46c0      	nop			; (mov r8, r8)
 800a170:	40021000 	.word	0x40021000
 800a174:	88ff400c 	.word	0x88ff400c
 800a178:	fef6fff6 	.word	0xfef6fff6
 800a17c:	fffbffff 	.word	0xfffbffff
 800a180:	ff02ffff 	.word	0xff02ffff
 800a184:	e000ed00 	.word	0xe000ed00

0800a188 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800a188:	480d      	ldr	r0, [pc, #52]	; (800a1c0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800a18a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800a18c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a18e:	e003      	b.n	800a198 <LoopCopyDataInit>

0800a190 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a190:	4b0c      	ldr	r3, [pc, #48]	; (800a1c4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800a192:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a194:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a196:	3104      	adds	r1, #4

0800a198 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800a198:	480b      	ldr	r0, [pc, #44]	; (800a1c8 <LoopForever+0xa>)
  ldr  r3, =_edata
 800a19a:	4b0c      	ldr	r3, [pc, #48]	; (800a1cc <LoopForever+0xe>)
  adds  r2, r0, r1
 800a19c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a19e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a1a0:	d3f6      	bcc.n	800a190 <CopyDataInit>
  ldr  r2, =_sbss
 800a1a2:	4a0b      	ldr	r2, [pc, #44]	; (800a1d0 <LoopForever+0x12>)
  b  LoopFillZerobss
 800a1a4:	e002      	b.n	800a1ac <LoopFillZerobss>

0800a1a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800a1a6:	2300      	movs	r3, #0
  str  r3, [r2]
 800a1a8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a1aa:	3204      	adds	r2, #4

0800a1ac <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800a1ac:	4b09      	ldr	r3, [pc, #36]	; (800a1d4 <LoopForever+0x16>)
  cmp  r2, r3
 800a1ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a1b0:	d3f9      	bcc.n	800a1a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800a1b2:	f7ff ffab 	bl	800a10c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a1b6:	f000 f811 	bl	800a1dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a1ba:	f7fe fcd1 	bl	8008b60 <main>

0800a1be <LoopForever>:

LoopForever:
    b LoopForever
 800a1be:	e7fe      	b.n	800a1be <LoopForever>
   ldr   r0, =_estack
 800a1c0:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 800a1c4:	0800a584 	.word	0x0800a584
  ldr  r0, =_sdata
 800a1c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a1cc:	20000434 	.word	0x20000434
  ldr  r2, =_sbss
 800a1d0:	20000438 	.word	0x20000438
  ldr  r3, = _ebss
 800a1d4:	20002868 	.word	0x20002868

0800a1d8 <DMA1_Channel4_5_6_7_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a1d8:	e7fe      	b.n	800a1d8 <DMA1_Channel4_5_6_7_IRQHandler>
	...

0800a1dc <__libc_init_array>:
 800a1dc:	b570      	push	{r4, r5, r6, lr}
 800a1de:	2600      	movs	r6, #0
 800a1e0:	4d0c      	ldr	r5, [pc, #48]	; (800a214 <__libc_init_array+0x38>)
 800a1e2:	4c0d      	ldr	r4, [pc, #52]	; (800a218 <__libc_init_array+0x3c>)
 800a1e4:	1b64      	subs	r4, r4, r5
 800a1e6:	10a4      	asrs	r4, r4, #2
 800a1e8:	42a6      	cmp	r6, r4
 800a1ea:	d109      	bne.n	800a200 <__libc_init_array+0x24>
 800a1ec:	2600      	movs	r6, #0
 800a1ee:	f000 f8af 	bl	800a350 <_init>
 800a1f2:	4d0a      	ldr	r5, [pc, #40]	; (800a21c <__libc_init_array+0x40>)
 800a1f4:	4c0a      	ldr	r4, [pc, #40]	; (800a220 <__libc_init_array+0x44>)
 800a1f6:	1b64      	subs	r4, r4, r5
 800a1f8:	10a4      	asrs	r4, r4, #2
 800a1fa:	42a6      	cmp	r6, r4
 800a1fc:	d105      	bne.n	800a20a <__libc_init_array+0x2e>
 800a1fe:	bd70      	pop	{r4, r5, r6, pc}
 800a200:	00b3      	lsls	r3, r6, #2
 800a202:	58eb      	ldr	r3, [r5, r3]
 800a204:	4798      	blx	r3
 800a206:	3601      	adds	r6, #1
 800a208:	e7ee      	b.n	800a1e8 <__libc_init_array+0xc>
 800a20a:	00b3      	lsls	r3, r6, #2
 800a20c:	58eb      	ldr	r3, [r5, r3]
 800a20e:	4798      	blx	r3
 800a210:	3601      	adds	r6, #1
 800a212:	e7f2      	b.n	800a1fa <__libc_init_array+0x1e>
 800a214:	0800a578 	.word	0x0800a578
 800a218:	0800a578 	.word	0x0800a578
 800a21c:	0800a578 	.word	0x0800a578
 800a220:	0800a580 	.word	0x0800a580

0800a224 <memcpy>:
 800a224:	2300      	movs	r3, #0
 800a226:	b510      	push	{r4, lr}
 800a228:	429a      	cmp	r2, r3
 800a22a:	d100      	bne.n	800a22e <memcpy+0xa>
 800a22c:	bd10      	pop	{r4, pc}
 800a22e:	5ccc      	ldrb	r4, [r1, r3]
 800a230:	54c4      	strb	r4, [r0, r3]
 800a232:	3301      	adds	r3, #1
 800a234:	e7f8      	b.n	800a228 <memcpy+0x4>

0800a236 <memset>:
 800a236:	0003      	movs	r3, r0
 800a238:	1812      	adds	r2, r2, r0
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d100      	bne.n	800a240 <memset+0xa>
 800a23e:	4770      	bx	lr
 800a240:	7019      	strb	r1, [r3, #0]
 800a242:	3301      	adds	r3, #1
 800a244:	e7f9      	b.n	800a23a <memset+0x4>
	...

0800a248 <register_fini>:
 800a248:	4b03      	ldr	r3, [pc, #12]	; (800a258 <register_fini+0x10>)
 800a24a:	b510      	push	{r4, lr}
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d002      	beq.n	800a256 <register_fini+0xe>
 800a250:	4802      	ldr	r0, [pc, #8]	; (800a25c <register_fini+0x14>)
 800a252:	f000 f805 	bl	800a260 <atexit>
 800a256:	bd10      	pop	{r4, pc}
 800a258:	00000000 	.word	0x00000000
 800a25c:	0800a271 	.word	0x0800a271

0800a260 <atexit>:
 800a260:	2300      	movs	r3, #0
 800a262:	b510      	push	{r4, lr}
 800a264:	0001      	movs	r1, r0
 800a266:	001a      	movs	r2, r3
 800a268:	0018      	movs	r0, r3
 800a26a:	f000 f817 	bl	800a29c <__register_exitproc>
 800a26e:	bd10      	pop	{r4, pc}

0800a270 <__libc_fini_array>:
 800a270:	b570      	push	{r4, r5, r6, lr}
 800a272:	4d07      	ldr	r5, [pc, #28]	; (800a290 <__libc_fini_array+0x20>)
 800a274:	4c07      	ldr	r4, [pc, #28]	; (800a294 <__libc_fini_array+0x24>)
 800a276:	1b64      	subs	r4, r4, r5
 800a278:	10a4      	asrs	r4, r4, #2
 800a27a:	2c00      	cmp	r4, #0
 800a27c:	d102      	bne.n	800a284 <__libc_fini_array+0x14>
 800a27e:	f000 f86d 	bl	800a35c <_fini>
 800a282:	bd70      	pop	{r4, r5, r6, pc}
 800a284:	3c01      	subs	r4, #1
 800a286:	00a3      	lsls	r3, r4, #2
 800a288:	58eb      	ldr	r3, [r5, r3]
 800a28a:	4798      	blx	r3
 800a28c:	e7f5      	b.n	800a27a <__libc_fini_array+0xa>
 800a28e:	46c0      	nop			; (mov r8, r8)
 800a290:	0800a580 	.word	0x0800a580
 800a294:	0800a584 	.word	0x0800a584

0800a298 <__retarget_lock_acquire_recursive>:
 800a298:	4770      	bx	lr

0800a29a <__retarget_lock_release_recursive>:
 800a29a:	4770      	bx	lr

0800a29c <__register_exitproc>:
 800a29c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a29e:	4d29      	ldr	r5, [pc, #164]	; (800a344 <__register_exitproc+0xa8>)
 800a2a0:	0006      	movs	r6, r0
 800a2a2:	6828      	ldr	r0, [r5, #0]
 800a2a4:	9301      	str	r3, [sp, #4]
 800a2a6:	9100      	str	r1, [sp, #0]
 800a2a8:	0017      	movs	r7, r2
 800a2aa:	f7ff fff5 	bl	800a298 <__retarget_lock_acquire_recursive>
 800a2ae:	4b26      	ldr	r3, [pc, #152]	; (800a348 <__register_exitproc+0xac>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	001c      	movs	r4, r3
 800a2b4:	34fc      	adds	r4, #252	; 0xfc
 800a2b6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	d103      	bne.n	800a2c4 <__register_exitproc+0x28>
 800a2bc:	334d      	adds	r3, #77	; 0x4d
 800a2be:	33ff      	adds	r3, #255	; 0xff
 800a2c0:	0018      	movs	r0, r3
 800a2c2:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a2c4:	6843      	ldr	r3, [r0, #4]
 800a2c6:	2b1f      	cmp	r3, #31
 800a2c8:	dd18      	ble.n	800a2fc <__register_exitproc+0x60>
 800a2ca:	4b20      	ldr	r3, [pc, #128]	; (800a34c <__register_exitproc+0xb0>)
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d105      	bne.n	800a2dc <__register_exitproc+0x40>
 800a2d0:	6828      	ldr	r0, [r5, #0]
 800a2d2:	f7ff ffe2 	bl	800a29a <__retarget_lock_release_recursive>
 800a2d6:	2001      	movs	r0, #1
 800a2d8:	4240      	negs	r0, r0
 800a2da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a2dc:	20c8      	movs	r0, #200	; 0xc8
 800a2de:	0040      	lsls	r0, r0, #1
 800a2e0:	e000      	b.n	800a2e4 <__register_exitproc+0x48>
 800a2e2:	bf00      	nop
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	d0f3      	beq.n	800a2d0 <__register_exitproc+0x34>
 800a2e8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	6002      	str	r2, [r0, #0]
 800a2ee:	22c4      	movs	r2, #196	; 0xc4
 800a2f0:	0052      	lsls	r2, r2, #1
 800a2f2:	6043      	str	r3, [r0, #4]
 800a2f4:	64e0      	str	r0, [r4, #76]	; 0x4c
 800a2f6:	5083      	str	r3, [r0, r2]
 800a2f8:	3204      	adds	r2, #4
 800a2fa:	5083      	str	r3, [r0, r2]
 800a2fc:	6843      	ldr	r3, [r0, #4]
 800a2fe:	2e00      	cmp	r6, #0
 800a300:	d014      	beq.n	800a32c <__register_exitproc+0x90>
 800a302:	009a      	lsls	r2, r3, #2
 800a304:	1882      	adds	r2, r0, r2
 800a306:	0011      	movs	r1, r2
 800a308:	3188      	adds	r1, #136	; 0x88
 800a30a:	600f      	str	r7, [r1, #0]
 800a30c:	2101      	movs	r1, #1
 800a30e:	0004      	movs	r4, r0
 800a310:	4099      	lsls	r1, r3
 800a312:	3485      	adds	r4, #133	; 0x85
 800a314:	34ff      	adds	r4, #255	; 0xff
 800a316:	6865      	ldr	r5, [r4, #4]
 800a318:	32fc      	adds	r2, #252	; 0xfc
 800a31a:	430d      	orrs	r5, r1
 800a31c:	6065      	str	r5, [r4, #4]
 800a31e:	9d01      	ldr	r5, [sp, #4]
 800a320:	60d5      	str	r5, [r2, #12]
 800a322:	2e02      	cmp	r6, #2
 800a324:	d102      	bne.n	800a32c <__register_exitproc+0x90>
 800a326:	68a2      	ldr	r2, [r4, #8]
 800a328:	4311      	orrs	r1, r2
 800a32a:	60a1      	str	r1, [r4, #8]
 800a32c:	1c5a      	adds	r2, r3, #1
 800a32e:	6042      	str	r2, [r0, #4]
 800a330:	3302      	adds	r3, #2
 800a332:	9a00      	ldr	r2, [sp, #0]
 800a334:	009b      	lsls	r3, r3, #2
 800a336:	501a      	str	r2, [r3, r0]
 800a338:	4b02      	ldr	r3, [pc, #8]	; (800a344 <__register_exitproc+0xa8>)
 800a33a:	6818      	ldr	r0, [r3, #0]
 800a33c:	f7ff ffad 	bl	800a29a <__retarget_lock_release_recursive>
 800a340:	2000      	movs	r0, #0
 800a342:	e7ca      	b.n	800a2da <__register_exitproc+0x3e>
 800a344:	20000430 	.word	0x20000430
 800a348:	0800a56c 	.word	0x0800a56c
 800a34c:	00000000 	.word	0x00000000

0800a350 <_init>:
 800a350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a352:	46c0      	nop			; (mov r8, r8)
 800a354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a356:	bc08      	pop	{r3}
 800a358:	469e      	mov	lr, r3
 800a35a:	4770      	bx	lr

0800a35c <_fini>:
 800a35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a35e:	46c0      	nop			; (mov r8, r8)
 800a360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a362:	bc08      	pop	{r3}
 800a364:	469e      	mov	lr, r3
 800a366:	4770      	bx	lr
