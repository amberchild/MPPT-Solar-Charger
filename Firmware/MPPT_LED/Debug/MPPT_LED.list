
MPPT_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1fc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000988  0800c2c0  0800c2c0  0001c2c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc48  0800cc48  000209b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc48  0800cc48  0001cc48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc50  0800cc50  000209b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800cc50  0800cc50  0001cc50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc58  0800cc58  0001cc58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009b8  20000000  0800cc5c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d5c  200009b8  0800d614  000209b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000804  20004714  0800d614  00024714  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000250b4  00000000  00000000  000209e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000512c  00000000  00000000  00045a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000fc34  00000000  00000000  0004abc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000016b0  00000000  00000000  0005a7f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001700  00000000  00000000  0005bea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00019364  00000000  00000000  0005d5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001564a  00000000  00000000  0007690c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0009014e  00000000  00000000  0008bf56  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0011c0a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000485c  00000000  00000000  0011c120  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200009b8 	.word	0x200009b8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c2a4 	.word	0x0800c2a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200009bc 	.word	0x200009bc
 8000104:	0800c2a4 	.word	0x0800c2a4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fcd1 	bl	8001de4 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fc29 	bl	8001ca4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fcc3 	bl	8001de4 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fcb9 	bl	8001de4 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fc4b 	bl	8001d1c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fc41 	bl	8001d1c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	1c08      	adds	r0, r1, #0
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fb5b 	bl	8000b6c <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fadd 	bl	8000a80 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb4d 	bl	8000b6c <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fb43 	bl	8000b6c <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 faeb 	bl	8000ad0 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fae1 	bl	8000ad0 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	1c08      	adds	r0, r1, #0
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f83c 	bl	80005c8 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__aeabi_f2uiz>:
 800055c:	219e      	movs	r1, #158	; 0x9e
 800055e:	b510      	push	{r4, lr}
 8000560:	05c9      	lsls	r1, r1, #23
 8000562:	1c04      	adds	r4, r0, #0
 8000564:	f7ff ffd0 	bl	8000508 <__aeabi_fcmpge>
 8000568:	2800      	cmp	r0, #0
 800056a:	d103      	bne.n	8000574 <__aeabi_f2uiz+0x18>
 800056c:	1c20      	adds	r0, r4, #0
 800056e:	f000 fd11 	bl	8000f94 <__aeabi_f2iz>
 8000572:	bd10      	pop	{r4, pc}
 8000574:	219e      	movs	r1, #158	; 0x9e
 8000576:	1c20      	adds	r0, r4, #0
 8000578:	05c9      	lsls	r1, r1, #23
 800057a:	f000 fb47 	bl	8000c0c <__aeabi_fsub>
 800057e:	f000 fd09 	bl	8000f94 <__aeabi_f2iz>
 8000582:	2380      	movs	r3, #128	; 0x80
 8000584:	061b      	lsls	r3, r3, #24
 8000586:	469c      	mov	ip, r3
 8000588:	4460      	add	r0, ip
 800058a:	e7f2      	b.n	8000572 <__aeabi_f2uiz+0x16>

0800058c <__aeabi_d2uiz>:
 800058c:	b570      	push	{r4, r5, r6, lr}
 800058e:	2200      	movs	r2, #0
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <__aeabi_d2uiz+0x38>)
 8000592:	0004      	movs	r4, r0
 8000594:	000d      	movs	r5, r1
 8000596:	f7ff ff7d 	bl	8000494 <__aeabi_dcmpge>
 800059a:	2800      	cmp	r0, #0
 800059c:	d104      	bne.n	80005a8 <__aeabi_d2uiz+0x1c>
 800059e:	0020      	movs	r0, r4
 80005a0:	0029      	movs	r1, r5
 80005a2:	f002 fa5d 	bl	8002a60 <__aeabi_d2iz>
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <__aeabi_d2uiz+0x38>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	0020      	movs	r0, r4
 80005ae:	0029      	movs	r1, r5
 80005b0:	f001 fef2 	bl	8002398 <__aeabi_dsub>
 80005b4:	f002 fa54 	bl	8002a60 <__aeabi_d2iz>
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	061b      	lsls	r3, r3, #24
 80005bc:	469c      	mov	ip, r3
 80005be:	4460      	add	r0, ip
 80005c0:	e7f1      	b.n	80005a6 <__aeabi_d2uiz+0x1a>
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	41e00000 	.word	0x41e00000

080005c8 <__udivmoddi4>:
 80005c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ca:	464f      	mov	r7, r9
 80005cc:	4646      	mov	r6, r8
 80005ce:	46d6      	mov	lr, sl
 80005d0:	b5c0      	push	{r6, r7, lr}
 80005d2:	0004      	movs	r4, r0
 80005d4:	b082      	sub	sp, #8
 80005d6:	000d      	movs	r5, r1
 80005d8:	4691      	mov	r9, r2
 80005da:	4698      	mov	r8, r3
 80005dc:	428b      	cmp	r3, r1
 80005de:	d82f      	bhi.n	8000640 <__udivmoddi4+0x78>
 80005e0:	d02c      	beq.n	800063c <__udivmoddi4+0x74>
 80005e2:	4641      	mov	r1, r8
 80005e4:	4648      	mov	r0, r9
 80005e6:	f002 fb7f 	bl	8002ce8 <__clzdi2>
 80005ea:	0029      	movs	r1, r5
 80005ec:	0006      	movs	r6, r0
 80005ee:	0020      	movs	r0, r4
 80005f0:	f002 fb7a 	bl	8002ce8 <__clzdi2>
 80005f4:	1a33      	subs	r3, r6, r0
 80005f6:	469c      	mov	ip, r3
 80005f8:	3b20      	subs	r3, #32
 80005fa:	469a      	mov	sl, r3
 80005fc:	d500      	bpl.n	8000600 <__udivmoddi4+0x38>
 80005fe:	e076      	b.n	80006ee <__udivmoddi4+0x126>
 8000600:	464b      	mov	r3, r9
 8000602:	4652      	mov	r2, sl
 8000604:	4093      	lsls	r3, r2
 8000606:	001f      	movs	r7, r3
 8000608:	464b      	mov	r3, r9
 800060a:	4662      	mov	r2, ip
 800060c:	4093      	lsls	r3, r2
 800060e:	001e      	movs	r6, r3
 8000610:	42af      	cmp	r7, r5
 8000612:	d828      	bhi.n	8000666 <__udivmoddi4+0x9e>
 8000614:	d025      	beq.n	8000662 <__udivmoddi4+0x9a>
 8000616:	4653      	mov	r3, sl
 8000618:	1ba4      	subs	r4, r4, r6
 800061a:	41bd      	sbcs	r5, r7
 800061c:	2b00      	cmp	r3, #0
 800061e:	da00      	bge.n	8000622 <__udivmoddi4+0x5a>
 8000620:	e07b      	b.n	800071a <__udivmoddi4+0x152>
 8000622:	2200      	movs	r2, #0
 8000624:	2300      	movs	r3, #0
 8000626:	9200      	str	r2, [sp, #0]
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2301      	movs	r3, #1
 800062c:	4652      	mov	r2, sl
 800062e:	4093      	lsls	r3, r2
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2301      	movs	r3, #1
 8000634:	4662      	mov	r2, ip
 8000636:	4093      	lsls	r3, r2
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	e018      	b.n	800066e <__udivmoddi4+0xa6>
 800063c:	4282      	cmp	r2, r0
 800063e:	d9d0      	bls.n	80005e2 <__udivmoddi4+0x1a>
 8000640:	2200      	movs	r2, #0
 8000642:	2300      	movs	r3, #0
 8000644:	9200      	str	r2, [sp, #0]
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <__udivmoddi4+0x8a>
 800064e:	601c      	str	r4, [r3, #0]
 8000650:	605d      	str	r5, [r3, #4]
 8000652:	9800      	ldr	r0, [sp, #0]
 8000654:	9901      	ldr	r1, [sp, #4]
 8000656:	b002      	add	sp, #8
 8000658:	bc1c      	pop	{r2, r3, r4}
 800065a:	4690      	mov	r8, r2
 800065c:	4699      	mov	r9, r3
 800065e:	46a2      	mov	sl, r4
 8000660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000662:	42a3      	cmp	r3, r4
 8000664:	d9d7      	bls.n	8000616 <__udivmoddi4+0x4e>
 8000666:	2200      	movs	r2, #0
 8000668:	2300      	movs	r3, #0
 800066a:	9200      	str	r2, [sp, #0]
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	4663      	mov	r3, ip
 8000670:	2b00      	cmp	r3, #0
 8000672:	d0e9      	beq.n	8000648 <__udivmoddi4+0x80>
 8000674:	07fb      	lsls	r3, r7, #31
 8000676:	4698      	mov	r8, r3
 8000678:	4641      	mov	r1, r8
 800067a:	0872      	lsrs	r2, r6, #1
 800067c:	430a      	orrs	r2, r1
 800067e:	087b      	lsrs	r3, r7, #1
 8000680:	4666      	mov	r6, ip
 8000682:	e00e      	b.n	80006a2 <__udivmoddi4+0xda>
 8000684:	42ab      	cmp	r3, r5
 8000686:	d101      	bne.n	800068c <__udivmoddi4+0xc4>
 8000688:	42a2      	cmp	r2, r4
 800068a:	d80c      	bhi.n	80006a6 <__udivmoddi4+0xde>
 800068c:	1aa4      	subs	r4, r4, r2
 800068e:	419d      	sbcs	r5, r3
 8000690:	2001      	movs	r0, #1
 8000692:	1924      	adds	r4, r4, r4
 8000694:	416d      	adcs	r5, r5
 8000696:	2100      	movs	r1, #0
 8000698:	3e01      	subs	r6, #1
 800069a:	1824      	adds	r4, r4, r0
 800069c:	414d      	adcs	r5, r1
 800069e:	2e00      	cmp	r6, #0
 80006a0:	d006      	beq.n	80006b0 <__udivmoddi4+0xe8>
 80006a2:	42ab      	cmp	r3, r5
 80006a4:	d9ee      	bls.n	8000684 <__udivmoddi4+0xbc>
 80006a6:	3e01      	subs	r6, #1
 80006a8:	1924      	adds	r4, r4, r4
 80006aa:	416d      	adcs	r5, r5
 80006ac:	2e00      	cmp	r6, #0
 80006ae:	d1f8      	bne.n	80006a2 <__udivmoddi4+0xda>
 80006b0:	9800      	ldr	r0, [sp, #0]
 80006b2:	9901      	ldr	r1, [sp, #4]
 80006b4:	4653      	mov	r3, sl
 80006b6:	1900      	adds	r0, r0, r4
 80006b8:	4169      	adcs	r1, r5
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	db23      	blt.n	8000706 <__udivmoddi4+0x13e>
 80006be:	002b      	movs	r3, r5
 80006c0:	4652      	mov	r2, sl
 80006c2:	40d3      	lsrs	r3, r2
 80006c4:	002a      	movs	r2, r5
 80006c6:	4664      	mov	r4, ip
 80006c8:	40e2      	lsrs	r2, r4
 80006ca:	001c      	movs	r4, r3
 80006cc:	4653      	mov	r3, sl
 80006ce:	0015      	movs	r5, r2
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	db2d      	blt.n	8000730 <__udivmoddi4+0x168>
 80006d4:	0026      	movs	r6, r4
 80006d6:	4657      	mov	r7, sl
 80006d8:	40be      	lsls	r6, r7
 80006da:	0033      	movs	r3, r6
 80006dc:	0026      	movs	r6, r4
 80006de:	4667      	mov	r7, ip
 80006e0:	40be      	lsls	r6, r7
 80006e2:	0032      	movs	r2, r6
 80006e4:	1a80      	subs	r0, r0, r2
 80006e6:	4199      	sbcs	r1, r3
 80006e8:	9000      	str	r0, [sp, #0]
 80006ea:	9101      	str	r1, [sp, #4]
 80006ec:	e7ac      	b.n	8000648 <__udivmoddi4+0x80>
 80006ee:	4662      	mov	r2, ip
 80006f0:	2320      	movs	r3, #32
 80006f2:	1a9b      	subs	r3, r3, r2
 80006f4:	464a      	mov	r2, r9
 80006f6:	40da      	lsrs	r2, r3
 80006f8:	4661      	mov	r1, ip
 80006fa:	0013      	movs	r3, r2
 80006fc:	4642      	mov	r2, r8
 80006fe:	408a      	lsls	r2, r1
 8000700:	0017      	movs	r7, r2
 8000702:	431f      	orrs	r7, r3
 8000704:	e780      	b.n	8000608 <__udivmoddi4+0x40>
 8000706:	4662      	mov	r2, ip
 8000708:	2320      	movs	r3, #32
 800070a:	1a9b      	subs	r3, r3, r2
 800070c:	002a      	movs	r2, r5
 800070e:	4666      	mov	r6, ip
 8000710:	409a      	lsls	r2, r3
 8000712:	0023      	movs	r3, r4
 8000714:	40f3      	lsrs	r3, r6
 8000716:	4313      	orrs	r3, r2
 8000718:	e7d4      	b.n	80006c4 <__udivmoddi4+0xfc>
 800071a:	4662      	mov	r2, ip
 800071c:	2320      	movs	r3, #32
 800071e:	2100      	movs	r1, #0
 8000720:	1a9b      	subs	r3, r3, r2
 8000722:	2200      	movs	r2, #0
 8000724:	9100      	str	r1, [sp, #0]
 8000726:	9201      	str	r2, [sp, #4]
 8000728:	2201      	movs	r2, #1
 800072a:	40da      	lsrs	r2, r3
 800072c:	9201      	str	r2, [sp, #4]
 800072e:	e780      	b.n	8000632 <__udivmoddi4+0x6a>
 8000730:	2320      	movs	r3, #32
 8000732:	4662      	mov	r2, ip
 8000734:	0026      	movs	r6, r4
 8000736:	1a9b      	subs	r3, r3, r2
 8000738:	40de      	lsrs	r6, r3
 800073a:	002f      	movs	r7, r5
 800073c:	46b0      	mov	r8, r6
 800073e:	4666      	mov	r6, ip
 8000740:	40b7      	lsls	r7, r6
 8000742:	4646      	mov	r6, r8
 8000744:	003b      	movs	r3, r7
 8000746:	4333      	orrs	r3, r6
 8000748:	e7c8      	b.n	80006dc <__udivmoddi4+0x114>
 800074a:	46c0      	nop			; (mov r8, r8)

0800074c <__aeabi_fadd>:
 800074c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800074e:	4647      	mov	r7, r8
 8000750:	46ce      	mov	lr, r9
 8000752:	0243      	lsls	r3, r0, #9
 8000754:	0a5b      	lsrs	r3, r3, #9
 8000756:	0044      	lsls	r4, r0, #1
 8000758:	0fc2      	lsrs	r2, r0, #31
 800075a:	469c      	mov	ip, r3
 800075c:	0048      	lsls	r0, r1, #1
 800075e:	00dd      	lsls	r5, r3, #3
 8000760:	024b      	lsls	r3, r1, #9
 8000762:	0e24      	lsrs	r4, r4, #24
 8000764:	0a5b      	lsrs	r3, r3, #9
 8000766:	0e00      	lsrs	r0, r0, #24
 8000768:	b580      	push	{r7, lr}
 800076a:	4698      	mov	r8, r3
 800076c:	0026      	movs	r6, r4
 800076e:	4691      	mov	r9, r2
 8000770:	0fc9      	lsrs	r1, r1, #31
 8000772:	00db      	lsls	r3, r3, #3
 8000774:	1a27      	subs	r7, r4, r0
 8000776:	428a      	cmp	r2, r1
 8000778:	d029      	beq.n	80007ce <__aeabi_fadd+0x82>
 800077a:	2f00      	cmp	r7, #0
 800077c:	dd15      	ble.n	80007aa <__aeabi_fadd+0x5e>
 800077e:	2800      	cmp	r0, #0
 8000780:	d14a      	bne.n	8000818 <__aeabi_fadd+0xcc>
 8000782:	2b00      	cmp	r3, #0
 8000784:	d000      	beq.n	8000788 <__aeabi_fadd+0x3c>
 8000786:	e095      	b.n	80008b4 <__aeabi_fadd+0x168>
 8000788:	08ed      	lsrs	r5, r5, #3
 800078a:	2cff      	cmp	r4, #255	; 0xff
 800078c:	d100      	bne.n	8000790 <__aeabi_fadd+0x44>
 800078e:	e088      	b.n	80008a2 <__aeabi_fadd+0x156>
 8000790:	026b      	lsls	r3, r5, #9
 8000792:	0a5b      	lsrs	r3, r3, #9
 8000794:	b2e6      	uxtb	r6, r4
 8000796:	025b      	lsls	r3, r3, #9
 8000798:	05f6      	lsls	r6, r6, #23
 800079a:	0a58      	lsrs	r0, r3, #9
 800079c:	4330      	orrs	r0, r6
 800079e:	07d2      	lsls	r2, r2, #31
 80007a0:	4310      	orrs	r0, r2
 80007a2:	bc0c      	pop	{r2, r3}
 80007a4:	4690      	mov	r8, r2
 80007a6:	4699      	mov	r9, r3
 80007a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007aa:	2f00      	cmp	r7, #0
 80007ac:	d000      	beq.n	80007b0 <__aeabi_fadd+0x64>
 80007ae:	e087      	b.n	80008c0 <__aeabi_fadd+0x174>
 80007b0:	1c60      	adds	r0, r4, #1
 80007b2:	b2c0      	uxtb	r0, r0
 80007b4:	2801      	cmp	r0, #1
 80007b6:	dc00      	bgt.n	80007ba <__aeabi_fadd+0x6e>
 80007b8:	e0b6      	b.n	8000928 <__aeabi_fadd+0x1dc>
 80007ba:	1aee      	subs	r6, r5, r3
 80007bc:	0172      	lsls	r2, r6, #5
 80007be:	d500      	bpl.n	80007c2 <__aeabi_fadd+0x76>
 80007c0:	e0c5      	b.n	800094e <__aeabi_fadd+0x202>
 80007c2:	2e00      	cmp	r6, #0
 80007c4:	d13d      	bne.n	8000842 <__aeabi_fadd+0xf6>
 80007c6:	2200      	movs	r2, #0
 80007c8:	2600      	movs	r6, #0
 80007ca:	2300      	movs	r3, #0
 80007cc:	e7e3      	b.n	8000796 <__aeabi_fadd+0x4a>
 80007ce:	2f00      	cmp	r7, #0
 80007d0:	dc00      	bgt.n	80007d4 <__aeabi_fadd+0x88>
 80007d2:	e096      	b.n	8000902 <__aeabi_fadd+0x1b6>
 80007d4:	2800      	cmp	r0, #0
 80007d6:	d05d      	beq.n	8000894 <__aeabi_fadd+0x148>
 80007d8:	2cff      	cmp	r4, #255	; 0xff
 80007da:	d060      	beq.n	800089e <__aeabi_fadd+0x152>
 80007dc:	2280      	movs	r2, #128	; 0x80
 80007de:	04d2      	lsls	r2, r2, #19
 80007e0:	4313      	orrs	r3, r2
 80007e2:	2f1b      	cmp	r7, #27
 80007e4:	dd00      	ble.n	80007e8 <__aeabi_fadd+0x9c>
 80007e6:	e0ec      	b.n	80009c2 <__aeabi_fadd+0x276>
 80007e8:	2220      	movs	r2, #32
 80007ea:	1bd2      	subs	r2, r2, r7
 80007ec:	0018      	movs	r0, r3
 80007ee:	4093      	lsls	r3, r2
 80007f0:	40f8      	lsrs	r0, r7
 80007f2:	1e5a      	subs	r2, r3, #1
 80007f4:	4193      	sbcs	r3, r2
 80007f6:	4303      	orrs	r3, r0
 80007f8:	18ed      	adds	r5, r5, r3
 80007fa:	016b      	lsls	r3, r5, #5
 80007fc:	d57b      	bpl.n	80008f6 <__aeabi_fadd+0x1aa>
 80007fe:	3401      	adds	r4, #1
 8000800:	2cff      	cmp	r4, #255	; 0xff
 8000802:	d100      	bne.n	8000806 <__aeabi_fadd+0xba>
 8000804:	e0b7      	b.n	8000976 <__aeabi_fadd+0x22a>
 8000806:	2201      	movs	r2, #1
 8000808:	2607      	movs	r6, #7
 800080a:	402a      	ands	r2, r5
 800080c:	086b      	lsrs	r3, r5, #1
 800080e:	4d9a      	ldr	r5, [pc, #616]	; (8000a78 <__aeabi_fadd+0x32c>)
 8000810:	401d      	ands	r5, r3
 8000812:	4315      	orrs	r5, r2
 8000814:	402e      	ands	r6, r5
 8000816:	e029      	b.n	800086c <__aeabi_fadd+0x120>
 8000818:	2cff      	cmp	r4, #255	; 0xff
 800081a:	d0b5      	beq.n	8000788 <__aeabi_fadd+0x3c>
 800081c:	2280      	movs	r2, #128	; 0x80
 800081e:	04d2      	lsls	r2, r2, #19
 8000820:	4313      	orrs	r3, r2
 8000822:	2f1b      	cmp	r7, #27
 8000824:	dd00      	ble.n	8000828 <__aeabi_fadd+0xdc>
 8000826:	e0b2      	b.n	800098e <__aeabi_fadd+0x242>
 8000828:	2220      	movs	r2, #32
 800082a:	1bd2      	subs	r2, r2, r7
 800082c:	0019      	movs	r1, r3
 800082e:	4093      	lsls	r3, r2
 8000830:	40f9      	lsrs	r1, r7
 8000832:	1e5a      	subs	r2, r3, #1
 8000834:	4193      	sbcs	r3, r2
 8000836:	430b      	orrs	r3, r1
 8000838:	1aed      	subs	r5, r5, r3
 800083a:	016b      	lsls	r3, r5, #5
 800083c:	d55b      	bpl.n	80008f6 <__aeabi_fadd+0x1aa>
 800083e:	01ad      	lsls	r5, r5, #6
 8000840:	09ae      	lsrs	r6, r5, #6
 8000842:	0030      	movs	r0, r6
 8000844:	f002 fa32 	bl	8002cac <__clzsi2>
 8000848:	3805      	subs	r0, #5
 800084a:	4086      	lsls	r6, r0
 800084c:	4284      	cmp	r4, r0
 800084e:	dc65      	bgt.n	800091c <__aeabi_fadd+0x1d0>
 8000850:	1b04      	subs	r4, r0, r4
 8000852:	0033      	movs	r3, r6
 8000854:	2020      	movs	r0, #32
 8000856:	3401      	adds	r4, #1
 8000858:	40e3      	lsrs	r3, r4
 800085a:	1b04      	subs	r4, r0, r4
 800085c:	40a6      	lsls	r6, r4
 800085e:	1e75      	subs	r5, r6, #1
 8000860:	41ae      	sbcs	r6, r5
 8000862:	4333      	orrs	r3, r6
 8000864:	2607      	movs	r6, #7
 8000866:	001d      	movs	r5, r3
 8000868:	2400      	movs	r4, #0
 800086a:	401e      	ands	r6, r3
 800086c:	2201      	movs	r2, #1
 800086e:	464b      	mov	r3, r9
 8000870:	401a      	ands	r2, r3
 8000872:	2e00      	cmp	r6, #0
 8000874:	d004      	beq.n	8000880 <__aeabi_fadd+0x134>
 8000876:	230f      	movs	r3, #15
 8000878:	402b      	ands	r3, r5
 800087a:	2b04      	cmp	r3, #4
 800087c:	d000      	beq.n	8000880 <__aeabi_fadd+0x134>
 800087e:	3504      	adds	r5, #4
 8000880:	016b      	lsls	r3, r5, #5
 8000882:	d400      	bmi.n	8000886 <__aeabi_fadd+0x13a>
 8000884:	e780      	b.n	8000788 <__aeabi_fadd+0x3c>
 8000886:	3401      	adds	r4, #1
 8000888:	b2e6      	uxtb	r6, r4
 800088a:	2cff      	cmp	r4, #255	; 0xff
 800088c:	d12f      	bne.n	80008ee <__aeabi_fadd+0x1a2>
 800088e:	26ff      	movs	r6, #255	; 0xff
 8000890:	2300      	movs	r3, #0
 8000892:	e780      	b.n	8000796 <__aeabi_fadd+0x4a>
 8000894:	2b00      	cmp	r3, #0
 8000896:	d152      	bne.n	800093e <__aeabi_fadd+0x1f2>
 8000898:	2cff      	cmp	r4, #255	; 0xff
 800089a:	d000      	beq.n	800089e <__aeabi_fadd+0x152>
 800089c:	e774      	b.n	8000788 <__aeabi_fadd+0x3c>
 800089e:	000a      	movs	r2, r1
 80008a0:	08ed      	lsrs	r5, r5, #3
 80008a2:	2d00      	cmp	r5, #0
 80008a4:	d0f3      	beq.n	800088e <__aeabi_fadd+0x142>
 80008a6:	2380      	movs	r3, #128	; 0x80
 80008a8:	03db      	lsls	r3, r3, #15
 80008aa:	432b      	orrs	r3, r5
 80008ac:	025b      	lsls	r3, r3, #9
 80008ae:	0a5b      	lsrs	r3, r3, #9
 80008b0:	26ff      	movs	r6, #255	; 0xff
 80008b2:	e770      	b.n	8000796 <__aeabi_fadd+0x4a>
 80008b4:	3f01      	subs	r7, #1
 80008b6:	2f00      	cmp	r7, #0
 80008b8:	d0be      	beq.n	8000838 <__aeabi_fadd+0xec>
 80008ba:	2cff      	cmp	r4, #255	; 0xff
 80008bc:	d1b1      	bne.n	8000822 <__aeabi_fadd+0xd6>
 80008be:	e763      	b.n	8000788 <__aeabi_fadd+0x3c>
 80008c0:	2c00      	cmp	r4, #0
 80008c2:	d047      	beq.n	8000954 <__aeabi_fadd+0x208>
 80008c4:	28ff      	cmp	r0, #255	; 0xff
 80008c6:	d069      	beq.n	800099c <__aeabi_fadd+0x250>
 80008c8:	2480      	movs	r4, #128	; 0x80
 80008ca:	04e4      	lsls	r4, r4, #19
 80008cc:	427a      	negs	r2, r7
 80008ce:	4325      	orrs	r5, r4
 80008d0:	2a1b      	cmp	r2, #27
 80008d2:	dd00      	ble.n	80008d6 <__aeabi_fadd+0x18a>
 80008d4:	e0c5      	b.n	8000a62 <__aeabi_fadd+0x316>
 80008d6:	002c      	movs	r4, r5
 80008d8:	2620      	movs	r6, #32
 80008da:	40d4      	lsrs	r4, r2
 80008dc:	1ab2      	subs	r2, r6, r2
 80008de:	4095      	lsls	r5, r2
 80008e0:	1e6a      	subs	r2, r5, #1
 80008e2:	4195      	sbcs	r5, r2
 80008e4:	4325      	orrs	r5, r4
 80008e6:	1b5d      	subs	r5, r3, r5
 80008e8:	0004      	movs	r4, r0
 80008ea:	4689      	mov	r9, r1
 80008ec:	e7a5      	b.n	800083a <__aeabi_fadd+0xee>
 80008ee:	01ab      	lsls	r3, r5, #6
 80008f0:	0a5b      	lsrs	r3, r3, #9
 80008f2:	e750      	b.n	8000796 <__aeabi_fadd+0x4a>
 80008f4:	2400      	movs	r4, #0
 80008f6:	2201      	movs	r2, #1
 80008f8:	464b      	mov	r3, r9
 80008fa:	401a      	ands	r2, r3
 80008fc:	076b      	lsls	r3, r5, #29
 80008fe:	d1ba      	bne.n	8000876 <__aeabi_fadd+0x12a>
 8000900:	e742      	b.n	8000788 <__aeabi_fadd+0x3c>
 8000902:	2f00      	cmp	r7, #0
 8000904:	d13b      	bne.n	800097e <__aeabi_fadd+0x232>
 8000906:	3401      	adds	r4, #1
 8000908:	b2e0      	uxtb	r0, r4
 800090a:	2801      	cmp	r0, #1
 800090c:	dd4a      	ble.n	80009a4 <__aeabi_fadd+0x258>
 800090e:	2cff      	cmp	r4, #255	; 0xff
 8000910:	d0bd      	beq.n	800088e <__aeabi_fadd+0x142>
 8000912:	2607      	movs	r6, #7
 8000914:	18ed      	adds	r5, r5, r3
 8000916:	086d      	lsrs	r5, r5, #1
 8000918:	402e      	ands	r6, r5
 800091a:	e7a7      	b.n	800086c <__aeabi_fadd+0x120>
 800091c:	2307      	movs	r3, #7
 800091e:	4d57      	ldr	r5, [pc, #348]	; (8000a7c <__aeabi_fadd+0x330>)
 8000920:	1a24      	subs	r4, r4, r0
 8000922:	4035      	ands	r5, r6
 8000924:	401e      	ands	r6, r3
 8000926:	e7a1      	b.n	800086c <__aeabi_fadd+0x120>
 8000928:	2c00      	cmp	r4, #0
 800092a:	d11b      	bne.n	8000964 <__aeabi_fadd+0x218>
 800092c:	2d00      	cmp	r5, #0
 800092e:	d16e      	bne.n	8000a0e <__aeabi_fadd+0x2c2>
 8000930:	2b00      	cmp	r3, #0
 8000932:	d100      	bne.n	8000936 <__aeabi_fadd+0x1ea>
 8000934:	e09a      	b.n	8000a6c <__aeabi_fadd+0x320>
 8000936:	000a      	movs	r2, r1
 8000938:	001d      	movs	r5, r3
 800093a:	003c      	movs	r4, r7
 800093c:	e724      	b.n	8000788 <__aeabi_fadd+0x3c>
 800093e:	3f01      	subs	r7, #1
 8000940:	2f00      	cmp	r7, #0
 8000942:	d100      	bne.n	8000946 <__aeabi_fadd+0x1fa>
 8000944:	e758      	b.n	80007f8 <__aeabi_fadd+0xac>
 8000946:	2cff      	cmp	r4, #255	; 0xff
 8000948:	d000      	beq.n	800094c <__aeabi_fadd+0x200>
 800094a:	e74a      	b.n	80007e2 <__aeabi_fadd+0x96>
 800094c:	e7a7      	b.n	800089e <__aeabi_fadd+0x152>
 800094e:	1b5e      	subs	r6, r3, r5
 8000950:	4689      	mov	r9, r1
 8000952:	e776      	b.n	8000842 <__aeabi_fadd+0xf6>
 8000954:	2d00      	cmp	r5, #0
 8000956:	d11c      	bne.n	8000992 <__aeabi_fadd+0x246>
 8000958:	000a      	movs	r2, r1
 800095a:	28ff      	cmp	r0, #255	; 0xff
 800095c:	d01f      	beq.n	800099e <__aeabi_fadd+0x252>
 800095e:	0004      	movs	r4, r0
 8000960:	001d      	movs	r5, r3
 8000962:	e711      	b.n	8000788 <__aeabi_fadd+0x3c>
 8000964:	2d00      	cmp	r5, #0
 8000966:	d15d      	bne.n	8000a24 <__aeabi_fadd+0x2d8>
 8000968:	2b00      	cmp	r3, #0
 800096a:	d117      	bne.n	800099c <__aeabi_fadd+0x250>
 800096c:	2380      	movs	r3, #128	; 0x80
 800096e:	2200      	movs	r2, #0
 8000970:	03db      	lsls	r3, r3, #15
 8000972:	26ff      	movs	r6, #255	; 0xff
 8000974:	e70f      	b.n	8000796 <__aeabi_fadd+0x4a>
 8000976:	000a      	movs	r2, r1
 8000978:	26ff      	movs	r6, #255	; 0xff
 800097a:	2300      	movs	r3, #0
 800097c:	e70b      	b.n	8000796 <__aeabi_fadd+0x4a>
 800097e:	2c00      	cmp	r4, #0
 8000980:	d121      	bne.n	80009c6 <__aeabi_fadd+0x27a>
 8000982:	2d00      	cmp	r5, #0
 8000984:	d166      	bne.n	8000a54 <__aeabi_fadd+0x308>
 8000986:	28ff      	cmp	r0, #255	; 0xff
 8000988:	d1e9      	bne.n	800095e <__aeabi_fadd+0x212>
 800098a:	001d      	movs	r5, r3
 800098c:	e787      	b.n	800089e <__aeabi_fadd+0x152>
 800098e:	2301      	movs	r3, #1
 8000990:	e752      	b.n	8000838 <__aeabi_fadd+0xec>
 8000992:	1c7a      	adds	r2, r7, #1
 8000994:	d0a7      	beq.n	80008e6 <__aeabi_fadd+0x19a>
 8000996:	43fa      	mvns	r2, r7
 8000998:	28ff      	cmp	r0, #255	; 0xff
 800099a:	d199      	bne.n	80008d0 <__aeabi_fadd+0x184>
 800099c:	000a      	movs	r2, r1
 800099e:	001d      	movs	r5, r3
 80009a0:	24ff      	movs	r4, #255	; 0xff
 80009a2:	e6f1      	b.n	8000788 <__aeabi_fadd+0x3c>
 80009a4:	2e00      	cmp	r6, #0
 80009a6:	d121      	bne.n	80009ec <__aeabi_fadd+0x2a0>
 80009a8:	2d00      	cmp	r5, #0
 80009aa:	d04f      	beq.n	8000a4c <__aeabi_fadd+0x300>
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d04c      	beq.n	8000a4a <__aeabi_fadd+0x2fe>
 80009b0:	18ed      	adds	r5, r5, r3
 80009b2:	016b      	lsls	r3, r5, #5
 80009b4:	d59e      	bpl.n	80008f4 <__aeabi_fadd+0x1a8>
 80009b6:	4b31      	ldr	r3, [pc, #196]	; (8000a7c <__aeabi_fadd+0x330>)
 80009b8:	3607      	adds	r6, #7
 80009ba:	402e      	ands	r6, r5
 80009bc:	2401      	movs	r4, #1
 80009be:	401d      	ands	r5, r3
 80009c0:	e754      	b.n	800086c <__aeabi_fadd+0x120>
 80009c2:	2301      	movs	r3, #1
 80009c4:	e718      	b.n	80007f8 <__aeabi_fadd+0xac>
 80009c6:	28ff      	cmp	r0, #255	; 0xff
 80009c8:	d0df      	beq.n	800098a <__aeabi_fadd+0x23e>
 80009ca:	2480      	movs	r4, #128	; 0x80
 80009cc:	04e4      	lsls	r4, r4, #19
 80009ce:	427f      	negs	r7, r7
 80009d0:	4325      	orrs	r5, r4
 80009d2:	2f1b      	cmp	r7, #27
 80009d4:	dc4d      	bgt.n	8000a72 <__aeabi_fadd+0x326>
 80009d6:	2620      	movs	r6, #32
 80009d8:	1bf6      	subs	r6, r6, r7
 80009da:	002c      	movs	r4, r5
 80009dc:	40b5      	lsls	r5, r6
 80009de:	40fc      	lsrs	r4, r7
 80009e0:	1e6a      	subs	r2, r5, #1
 80009e2:	4195      	sbcs	r5, r2
 80009e4:	4325      	orrs	r5, r4
 80009e6:	18ed      	adds	r5, r5, r3
 80009e8:	0004      	movs	r4, r0
 80009ea:	e706      	b.n	80007fa <__aeabi_fadd+0xae>
 80009ec:	2d00      	cmp	r5, #0
 80009ee:	d0cc      	beq.n	800098a <__aeabi_fadd+0x23e>
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d100      	bne.n	80009f6 <__aeabi_fadd+0x2aa>
 80009f4:	e753      	b.n	800089e <__aeabi_fadd+0x152>
 80009f6:	2180      	movs	r1, #128	; 0x80
 80009f8:	4660      	mov	r0, ip
 80009fa:	03c9      	lsls	r1, r1, #15
 80009fc:	4208      	tst	r0, r1
 80009fe:	d003      	beq.n	8000a08 <__aeabi_fadd+0x2bc>
 8000a00:	4640      	mov	r0, r8
 8000a02:	4208      	tst	r0, r1
 8000a04:	d100      	bne.n	8000a08 <__aeabi_fadd+0x2bc>
 8000a06:	001d      	movs	r5, r3
 8000a08:	2101      	movs	r1, #1
 8000a0a:	4011      	ands	r1, r2
 8000a0c:	e747      	b.n	800089e <__aeabi_fadd+0x152>
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d100      	bne.n	8000a14 <__aeabi_fadd+0x2c8>
 8000a12:	e6b9      	b.n	8000788 <__aeabi_fadd+0x3c>
 8000a14:	1aea      	subs	r2, r5, r3
 8000a16:	0150      	lsls	r0, r2, #5
 8000a18:	d525      	bpl.n	8000a66 <__aeabi_fadd+0x31a>
 8000a1a:	2607      	movs	r6, #7
 8000a1c:	1b5d      	subs	r5, r3, r5
 8000a1e:	402e      	ands	r6, r5
 8000a20:	4689      	mov	r9, r1
 8000a22:	e723      	b.n	800086c <__aeabi_fadd+0x120>
 8000a24:	24ff      	movs	r4, #255	; 0xff
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d100      	bne.n	8000a2c <__aeabi_fadd+0x2e0>
 8000a2a:	e6ad      	b.n	8000788 <__aeabi_fadd+0x3c>
 8000a2c:	2280      	movs	r2, #128	; 0x80
 8000a2e:	4660      	mov	r0, ip
 8000a30:	03d2      	lsls	r2, r2, #15
 8000a32:	4210      	tst	r0, r2
 8000a34:	d004      	beq.n	8000a40 <__aeabi_fadd+0x2f4>
 8000a36:	4640      	mov	r0, r8
 8000a38:	4210      	tst	r0, r2
 8000a3a:	d101      	bne.n	8000a40 <__aeabi_fadd+0x2f4>
 8000a3c:	001d      	movs	r5, r3
 8000a3e:	4689      	mov	r9, r1
 8000a40:	2201      	movs	r2, #1
 8000a42:	464b      	mov	r3, r9
 8000a44:	24ff      	movs	r4, #255	; 0xff
 8000a46:	401a      	ands	r2, r3
 8000a48:	e69e      	b.n	8000788 <__aeabi_fadd+0x3c>
 8000a4a:	002b      	movs	r3, r5
 8000a4c:	08dd      	lsrs	r5, r3, #3
 8000a4e:	000a      	movs	r2, r1
 8000a50:	2400      	movs	r4, #0
 8000a52:	e69d      	b.n	8000790 <__aeabi_fadd+0x44>
 8000a54:	1c7a      	adds	r2, r7, #1
 8000a56:	d0c6      	beq.n	80009e6 <__aeabi_fadd+0x29a>
 8000a58:	43ff      	mvns	r7, r7
 8000a5a:	28ff      	cmp	r0, #255	; 0xff
 8000a5c:	d1b9      	bne.n	80009d2 <__aeabi_fadd+0x286>
 8000a5e:	001d      	movs	r5, r3
 8000a60:	e71d      	b.n	800089e <__aeabi_fadd+0x152>
 8000a62:	2501      	movs	r5, #1
 8000a64:	e73f      	b.n	80008e6 <__aeabi_fadd+0x19a>
 8000a66:	1e15      	subs	r5, r2, #0
 8000a68:	d000      	beq.n	8000a6c <__aeabi_fadd+0x320>
 8000a6a:	e744      	b.n	80008f6 <__aeabi_fadd+0x1aa>
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e691      	b.n	8000796 <__aeabi_fadd+0x4a>
 8000a72:	2501      	movs	r5, #1
 8000a74:	e7b7      	b.n	80009e6 <__aeabi_fadd+0x29a>
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	7dffffff 	.word	0x7dffffff
 8000a7c:	fbffffff 	.word	0xfbffffff

08000a80 <__eqsf2>:
 8000a80:	b570      	push	{r4, r5, r6, lr}
 8000a82:	0042      	lsls	r2, r0, #1
 8000a84:	024e      	lsls	r6, r1, #9
 8000a86:	004c      	lsls	r4, r1, #1
 8000a88:	0245      	lsls	r5, r0, #9
 8000a8a:	0a6d      	lsrs	r5, r5, #9
 8000a8c:	0e12      	lsrs	r2, r2, #24
 8000a8e:	0fc3      	lsrs	r3, r0, #31
 8000a90:	0a76      	lsrs	r6, r6, #9
 8000a92:	0e24      	lsrs	r4, r4, #24
 8000a94:	0fc9      	lsrs	r1, r1, #31
 8000a96:	2aff      	cmp	r2, #255	; 0xff
 8000a98:	d00f      	beq.n	8000aba <__eqsf2+0x3a>
 8000a9a:	2cff      	cmp	r4, #255	; 0xff
 8000a9c:	d011      	beq.n	8000ac2 <__eqsf2+0x42>
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	42a2      	cmp	r2, r4
 8000aa2:	d000      	beq.n	8000aa6 <__eqsf2+0x26>
 8000aa4:	bd70      	pop	{r4, r5, r6, pc}
 8000aa6:	42b5      	cmp	r5, r6
 8000aa8:	d1fc      	bne.n	8000aa4 <__eqsf2+0x24>
 8000aaa:	428b      	cmp	r3, r1
 8000aac:	d00d      	beq.n	8000aca <__eqsf2+0x4a>
 8000aae:	2a00      	cmp	r2, #0
 8000ab0:	d1f8      	bne.n	8000aa4 <__eqsf2+0x24>
 8000ab2:	0028      	movs	r0, r5
 8000ab4:	1e45      	subs	r5, r0, #1
 8000ab6:	41a8      	sbcs	r0, r5
 8000ab8:	e7f4      	b.n	8000aa4 <__eqsf2+0x24>
 8000aba:	2001      	movs	r0, #1
 8000abc:	2d00      	cmp	r5, #0
 8000abe:	d1f1      	bne.n	8000aa4 <__eqsf2+0x24>
 8000ac0:	e7eb      	b.n	8000a9a <__eqsf2+0x1a>
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	2e00      	cmp	r6, #0
 8000ac6:	d1ed      	bne.n	8000aa4 <__eqsf2+0x24>
 8000ac8:	e7e9      	b.n	8000a9e <__eqsf2+0x1e>
 8000aca:	2000      	movs	r0, #0
 8000acc:	e7ea      	b.n	8000aa4 <__eqsf2+0x24>
 8000ace:	46c0      	nop			; (mov r8, r8)

08000ad0 <__gesf2>:
 8000ad0:	b570      	push	{r4, r5, r6, lr}
 8000ad2:	004a      	lsls	r2, r1, #1
 8000ad4:	024e      	lsls	r6, r1, #9
 8000ad6:	0245      	lsls	r5, r0, #9
 8000ad8:	0044      	lsls	r4, r0, #1
 8000ada:	0a6d      	lsrs	r5, r5, #9
 8000adc:	0e24      	lsrs	r4, r4, #24
 8000ade:	0fc3      	lsrs	r3, r0, #31
 8000ae0:	0a76      	lsrs	r6, r6, #9
 8000ae2:	0e12      	lsrs	r2, r2, #24
 8000ae4:	0fc9      	lsrs	r1, r1, #31
 8000ae6:	2cff      	cmp	r4, #255	; 0xff
 8000ae8:	d015      	beq.n	8000b16 <__gesf2+0x46>
 8000aea:	2aff      	cmp	r2, #255	; 0xff
 8000aec:	d00e      	beq.n	8000b0c <__gesf2+0x3c>
 8000aee:	2c00      	cmp	r4, #0
 8000af0:	d115      	bne.n	8000b1e <__gesf2+0x4e>
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	d101      	bne.n	8000afa <__gesf2+0x2a>
 8000af6:	2e00      	cmp	r6, #0
 8000af8:	d01c      	beq.n	8000b34 <__gesf2+0x64>
 8000afa:	2d00      	cmp	r5, #0
 8000afc:	d014      	beq.n	8000b28 <__gesf2+0x58>
 8000afe:	428b      	cmp	r3, r1
 8000b00:	d027      	beq.n	8000b52 <__gesf2+0x82>
 8000b02:	2002      	movs	r0, #2
 8000b04:	3b01      	subs	r3, #1
 8000b06:	4018      	ands	r0, r3
 8000b08:	3801      	subs	r0, #1
 8000b0a:	bd70      	pop	{r4, r5, r6, pc}
 8000b0c:	2e00      	cmp	r6, #0
 8000b0e:	d0ee      	beq.n	8000aee <__gesf2+0x1e>
 8000b10:	2002      	movs	r0, #2
 8000b12:	4240      	negs	r0, r0
 8000b14:	e7f9      	b.n	8000b0a <__gesf2+0x3a>
 8000b16:	2d00      	cmp	r5, #0
 8000b18:	d1fa      	bne.n	8000b10 <__gesf2+0x40>
 8000b1a:	2aff      	cmp	r2, #255	; 0xff
 8000b1c:	d00e      	beq.n	8000b3c <__gesf2+0x6c>
 8000b1e:	2a00      	cmp	r2, #0
 8000b20:	d10e      	bne.n	8000b40 <__gesf2+0x70>
 8000b22:	2e00      	cmp	r6, #0
 8000b24:	d0ed      	beq.n	8000b02 <__gesf2+0x32>
 8000b26:	e00b      	b.n	8000b40 <__gesf2+0x70>
 8000b28:	2301      	movs	r3, #1
 8000b2a:	3901      	subs	r1, #1
 8000b2c:	4399      	bics	r1, r3
 8000b2e:	0008      	movs	r0, r1
 8000b30:	3001      	adds	r0, #1
 8000b32:	e7ea      	b.n	8000b0a <__gesf2+0x3a>
 8000b34:	2000      	movs	r0, #0
 8000b36:	2d00      	cmp	r5, #0
 8000b38:	d0e7      	beq.n	8000b0a <__gesf2+0x3a>
 8000b3a:	e7e2      	b.n	8000b02 <__gesf2+0x32>
 8000b3c:	2e00      	cmp	r6, #0
 8000b3e:	d1e7      	bne.n	8000b10 <__gesf2+0x40>
 8000b40:	428b      	cmp	r3, r1
 8000b42:	d1de      	bne.n	8000b02 <__gesf2+0x32>
 8000b44:	4294      	cmp	r4, r2
 8000b46:	dd05      	ble.n	8000b54 <__gesf2+0x84>
 8000b48:	2102      	movs	r1, #2
 8000b4a:	1e58      	subs	r0, r3, #1
 8000b4c:	4008      	ands	r0, r1
 8000b4e:	3801      	subs	r0, #1
 8000b50:	e7db      	b.n	8000b0a <__gesf2+0x3a>
 8000b52:	2400      	movs	r4, #0
 8000b54:	42a2      	cmp	r2, r4
 8000b56:	dc04      	bgt.n	8000b62 <__gesf2+0x92>
 8000b58:	42b5      	cmp	r5, r6
 8000b5a:	d8d2      	bhi.n	8000b02 <__gesf2+0x32>
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	42b5      	cmp	r5, r6
 8000b60:	d2d3      	bcs.n	8000b0a <__gesf2+0x3a>
 8000b62:	1e58      	subs	r0, r3, #1
 8000b64:	2301      	movs	r3, #1
 8000b66:	4398      	bics	r0, r3
 8000b68:	3001      	adds	r0, #1
 8000b6a:	e7ce      	b.n	8000b0a <__gesf2+0x3a>

08000b6c <__lesf2>:
 8000b6c:	b530      	push	{r4, r5, lr}
 8000b6e:	0042      	lsls	r2, r0, #1
 8000b70:	0244      	lsls	r4, r0, #9
 8000b72:	024d      	lsls	r5, r1, #9
 8000b74:	0fc3      	lsrs	r3, r0, #31
 8000b76:	0048      	lsls	r0, r1, #1
 8000b78:	0a64      	lsrs	r4, r4, #9
 8000b7a:	0e12      	lsrs	r2, r2, #24
 8000b7c:	0a6d      	lsrs	r5, r5, #9
 8000b7e:	0e00      	lsrs	r0, r0, #24
 8000b80:	0fc9      	lsrs	r1, r1, #31
 8000b82:	2aff      	cmp	r2, #255	; 0xff
 8000b84:	d012      	beq.n	8000bac <__lesf2+0x40>
 8000b86:	28ff      	cmp	r0, #255	; 0xff
 8000b88:	d00c      	beq.n	8000ba4 <__lesf2+0x38>
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	d112      	bne.n	8000bb4 <__lesf2+0x48>
 8000b8e:	2800      	cmp	r0, #0
 8000b90:	d119      	bne.n	8000bc6 <__lesf2+0x5a>
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	d117      	bne.n	8000bc6 <__lesf2+0x5a>
 8000b96:	2c00      	cmp	r4, #0
 8000b98:	d02b      	beq.n	8000bf2 <__lesf2+0x86>
 8000b9a:	2002      	movs	r0, #2
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	4018      	ands	r0, r3
 8000ba0:	3801      	subs	r0, #1
 8000ba2:	e026      	b.n	8000bf2 <__lesf2+0x86>
 8000ba4:	2d00      	cmp	r5, #0
 8000ba6:	d0f0      	beq.n	8000b8a <__lesf2+0x1e>
 8000ba8:	2002      	movs	r0, #2
 8000baa:	e022      	b.n	8000bf2 <__lesf2+0x86>
 8000bac:	2c00      	cmp	r4, #0
 8000bae:	d1fb      	bne.n	8000ba8 <__lesf2+0x3c>
 8000bb0:	28ff      	cmp	r0, #255	; 0xff
 8000bb2:	d01f      	beq.n	8000bf4 <__lesf2+0x88>
 8000bb4:	2800      	cmp	r0, #0
 8000bb6:	d11f      	bne.n	8000bf8 <__lesf2+0x8c>
 8000bb8:	2d00      	cmp	r5, #0
 8000bba:	d11d      	bne.n	8000bf8 <__lesf2+0x8c>
 8000bbc:	2002      	movs	r0, #2
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	4018      	ands	r0, r3
 8000bc2:	3801      	subs	r0, #1
 8000bc4:	e015      	b.n	8000bf2 <__lesf2+0x86>
 8000bc6:	2c00      	cmp	r4, #0
 8000bc8:	d00e      	beq.n	8000be8 <__lesf2+0x7c>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	d1e5      	bne.n	8000b9a <__lesf2+0x2e>
 8000bce:	2200      	movs	r2, #0
 8000bd0:	4290      	cmp	r0, r2
 8000bd2:	dc04      	bgt.n	8000bde <__lesf2+0x72>
 8000bd4:	42ac      	cmp	r4, r5
 8000bd6:	d8e0      	bhi.n	8000b9a <__lesf2+0x2e>
 8000bd8:	2000      	movs	r0, #0
 8000bda:	42ac      	cmp	r4, r5
 8000bdc:	d209      	bcs.n	8000bf2 <__lesf2+0x86>
 8000bde:	1e58      	subs	r0, r3, #1
 8000be0:	2301      	movs	r3, #1
 8000be2:	4398      	bics	r0, r3
 8000be4:	3001      	adds	r0, #1
 8000be6:	e004      	b.n	8000bf2 <__lesf2+0x86>
 8000be8:	2301      	movs	r3, #1
 8000bea:	3901      	subs	r1, #1
 8000bec:	4399      	bics	r1, r3
 8000bee:	0008      	movs	r0, r1
 8000bf0:	3001      	adds	r0, #1
 8000bf2:	bd30      	pop	{r4, r5, pc}
 8000bf4:	2d00      	cmp	r5, #0
 8000bf6:	d1d7      	bne.n	8000ba8 <__lesf2+0x3c>
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	d1ce      	bne.n	8000b9a <__lesf2+0x2e>
 8000bfc:	4282      	cmp	r2, r0
 8000bfe:	dde7      	ble.n	8000bd0 <__lesf2+0x64>
 8000c00:	2102      	movs	r1, #2
 8000c02:	1e58      	subs	r0, r3, #1
 8000c04:	4008      	ands	r0, r1
 8000c06:	3801      	subs	r0, #1
 8000c08:	e7f3      	b.n	8000bf2 <__lesf2+0x86>
 8000c0a:	46c0      	nop			; (mov r8, r8)

08000c0c <__aeabi_fsub>:
 8000c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c0e:	4647      	mov	r7, r8
 8000c10:	46ce      	mov	lr, r9
 8000c12:	0044      	lsls	r4, r0, #1
 8000c14:	0fc2      	lsrs	r2, r0, #31
 8000c16:	b580      	push	{r7, lr}
 8000c18:	0247      	lsls	r7, r0, #9
 8000c1a:	0248      	lsls	r0, r1, #9
 8000c1c:	0a40      	lsrs	r0, r0, #9
 8000c1e:	4684      	mov	ip, r0
 8000c20:	4666      	mov	r6, ip
 8000c22:	0048      	lsls	r0, r1, #1
 8000c24:	0a7f      	lsrs	r7, r7, #9
 8000c26:	0e24      	lsrs	r4, r4, #24
 8000c28:	00f6      	lsls	r6, r6, #3
 8000c2a:	0025      	movs	r5, r4
 8000c2c:	4690      	mov	r8, r2
 8000c2e:	00fb      	lsls	r3, r7, #3
 8000c30:	0e00      	lsrs	r0, r0, #24
 8000c32:	0fc9      	lsrs	r1, r1, #31
 8000c34:	46b1      	mov	r9, r6
 8000c36:	28ff      	cmp	r0, #255	; 0xff
 8000c38:	d100      	bne.n	8000c3c <__aeabi_fsub+0x30>
 8000c3a:	e085      	b.n	8000d48 <__aeabi_fsub+0x13c>
 8000c3c:	2601      	movs	r6, #1
 8000c3e:	4071      	eors	r1, r6
 8000c40:	1a26      	subs	r6, r4, r0
 8000c42:	4291      	cmp	r1, r2
 8000c44:	d057      	beq.n	8000cf6 <__aeabi_fsub+0xea>
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	dd43      	ble.n	8000cd2 <__aeabi_fsub+0xc6>
 8000c4a:	2800      	cmp	r0, #0
 8000c4c:	d000      	beq.n	8000c50 <__aeabi_fsub+0x44>
 8000c4e:	e07f      	b.n	8000d50 <__aeabi_fsub+0x144>
 8000c50:	4649      	mov	r1, r9
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d100      	bne.n	8000c58 <__aeabi_fsub+0x4c>
 8000c56:	e0aa      	b.n	8000dae <__aeabi_fsub+0x1a2>
 8000c58:	3e01      	subs	r6, #1
 8000c5a:	2e00      	cmp	r6, #0
 8000c5c:	d000      	beq.n	8000c60 <__aeabi_fsub+0x54>
 8000c5e:	e0f7      	b.n	8000e50 <__aeabi_fsub+0x244>
 8000c60:	1a5b      	subs	r3, r3, r1
 8000c62:	015a      	lsls	r2, r3, #5
 8000c64:	d400      	bmi.n	8000c68 <__aeabi_fsub+0x5c>
 8000c66:	e08b      	b.n	8000d80 <__aeabi_fsub+0x174>
 8000c68:	019b      	lsls	r3, r3, #6
 8000c6a:	099c      	lsrs	r4, r3, #6
 8000c6c:	0020      	movs	r0, r4
 8000c6e:	f002 f81d 	bl	8002cac <__clzsi2>
 8000c72:	3805      	subs	r0, #5
 8000c74:	4084      	lsls	r4, r0
 8000c76:	4285      	cmp	r5, r0
 8000c78:	dd00      	ble.n	8000c7c <__aeabi_fsub+0x70>
 8000c7a:	e0d3      	b.n	8000e24 <__aeabi_fsub+0x218>
 8000c7c:	1b45      	subs	r5, r0, r5
 8000c7e:	0023      	movs	r3, r4
 8000c80:	2020      	movs	r0, #32
 8000c82:	3501      	adds	r5, #1
 8000c84:	40eb      	lsrs	r3, r5
 8000c86:	1b45      	subs	r5, r0, r5
 8000c88:	40ac      	lsls	r4, r5
 8000c8a:	1e62      	subs	r2, r4, #1
 8000c8c:	4194      	sbcs	r4, r2
 8000c8e:	4323      	orrs	r3, r4
 8000c90:	2407      	movs	r4, #7
 8000c92:	2500      	movs	r5, #0
 8000c94:	401c      	ands	r4, r3
 8000c96:	2201      	movs	r2, #1
 8000c98:	4641      	mov	r1, r8
 8000c9a:	400a      	ands	r2, r1
 8000c9c:	2c00      	cmp	r4, #0
 8000c9e:	d004      	beq.n	8000caa <__aeabi_fsub+0x9e>
 8000ca0:	210f      	movs	r1, #15
 8000ca2:	4019      	ands	r1, r3
 8000ca4:	2904      	cmp	r1, #4
 8000ca6:	d000      	beq.n	8000caa <__aeabi_fsub+0x9e>
 8000ca8:	3304      	adds	r3, #4
 8000caa:	0159      	lsls	r1, r3, #5
 8000cac:	d400      	bmi.n	8000cb0 <__aeabi_fsub+0xa4>
 8000cae:	e080      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000cb0:	3501      	adds	r5, #1
 8000cb2:	b2ec      	uxtb	r4, r5
 8000cb4:	2dff      	cmp	r5, #255	; 0xff
 8000cb6:	d000      	beq.n	8000cba <__aeabi_fsub+0xae>
 8000cb8:	e0a3      	b.n	8000e02 <__aeabi_fsub+0x1f6>
 8000cba:	24ff      	movs	r4, #255	; 0xff
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	025b      	lsls	r3, r3, #9
 8000cc0:	05e4      	lsls	r4, r4, #23
 8000cc2:	0a58      	lsrs	r0, r3, #9
 8000cc4:	07d2      	lsls	r2, r2, #31
 8000cc6:	4320      	orrs	r0, r4
 8000cc8:	4310      	orrs	r0, r2
 8000cca:	bc0c      	pop	{r2, r3}
 8000ccc:	4690      	mov	r8, r2
 8000cce:	4699      	mov	r9, r3
 8000cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d174      	bne.n	8000dc0 <__aeabi_fsub+0x1b4>
 8000cd6:	1c60      	adds	r0, r4, #1
 8000cd8:	b2c0      	uxtb	r0, r0
 8000cda:	2801      	cmp	r0, #1
 8000cdc:	dc00      	bgt.n	8000ce0 <__aeabi_fsub+0xd4>
 8000cde:	e0a7      	b.n	8000e30 <__aeabi_fsub+0x224>
 8000ce0:	464a      	mov	r2, r9
 8000ce2:	1a9c      	subs	r4, r3, r2
 8000ce4:	0162      	lsls	r2, r4, #5
 8000ce6:	d500      	bpl.n	8000cea <__aeabi_fsub+0xde>
 8000ce8:	e0b6      	b.n	8000e58 <__aeabi_fsub+0x24c>
 8000cea:	2c00      	cmp	r4, #0
 8000cec:	d1be      	bne.n	8000c6c <__aeabi_fsub+0x60>
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2400      	movs	r4, #0
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e7e3      	b.n	8000cbe <__aeabi_fsub+0xb2>
 8000cf6:	2e00      	cmp	r6, #0
 8000cf8:	dc00      	bgt.n	8000cfc <__aeabi_fsub+0xf0>
 8000cfa:	e085      	b.n	8000e08 <__aeabi_fsub+0x1fc>
 8000cfc:	2800      	cmp	r0, #0
 8000cfe:	d046      	beq.n	8000d8e <__aeabi_fsub+0x182>
 8000d00:	2cff      	cmp	r4, #255	; 0xff
 8000d02:	d049      	beq.n	8000d98 <__aeabi_fsub+0x18c>
 8000d04:	2280      	movs	r2, #128	; 0x80
 8000d06:	4648      	mov	r0, r9
 8000d08:	04d2      	lsls	r2, r2, #19
 8000d0a:	4310      	orrs	r0, r2
 8000d0c:	4681      	mov	r9, r0
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2e1b      	cmp	r6, #27
 8000d12:	dc09      	bgt.n	8000d28 <__aeabi_fsub+0x11c>
 8000d14:	2020      	movs	r0, #32
 8000d16:	464c      	mov	r4, r9
 8000d18:	1b80      	subs	r0, r0, r6
 8000d1a:	4084      	lsls	r4, r0
 8000d1c:	464a      	mov	r2, r9
 8000d1e:	0020      	movs	r0, r4
 8000d20:	40f2      	lsrs	r2, r6
 8000d22:	1e44      	subs	r4, r0, #1
 8000d24:	41a0      	sbcs	r0, r4
 8000d26:	4302      	orrs	r2, r0
 8000d28:	189b      	adds	r3, r3, r2
 8000d2a:	015a      	lsls	r2, r3, #5
 8000d2c:	d528      	bpl.n	8000d80 <__aeabi_fsub+0x174>
 8000d2e:	3501      	adds	r5, #1
 8000d30:	2dff      	cmp	r5, #255	; 0xff
 8000d32:	d100      	bne.n	8000d36 <__aeabi_fsub+0x12a>
 8000d34:	e0a8      	b.n	8000e88 <__aeabi_fsub+0x27c>
 8000d36:	2201      	movs	r2, #1
 8000d38:	2407      	movs	r4, #7
 8000d3a:	4994      	ldr	r1, [pc, #592]	; (8000f8c <__aeabi_fsub+0x380>)
 8000d3c:	401a      	ands	r2, r3
 8000d3e:	085b      	lsrs	r3, r3, #1
 8000d40:	400b      	ands	r3, r1
 8000d42:	4313      	orrs	r3, r2
 8000d44:	401c      	ands	r4, r3
 8000d46:	e7a6      	b.n	8000c96 <__aeabi_fsub+0x8a>
 8000d48:	2e00      	cmp	r6, #0
 8000d4a:	d000      	beq.n	8000d4e <__aeabi_fsub+0x142>
 8000d4c:	e778      	b.n	8000c40 <__aeabi_fsub+0x34>
 8000d4e:	e775      	b.n	8000c3c <__aeabi_fsub+0x30>
 8000d50:	2cff      	cmp	r4, #255	; 0xff
 8000d52:	d054      	beq.n	8000dfe <__aeabi_fsub+0x1f2>
 8000d54:	2280      	movs	r2, #128	; 0x80
 8000d56:	4649      	mov	r1, r9
 8000d58:	04d2      	lsls	r2, r2, #19
 8000d5a:	4311      	orrs	r1, r2
 8000d5c:	4689      	mov	r9, r1
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2e1b      	cmp	r6, #27
 8000d62:	dc09      	bgt.n	8000d78 <__aeabi_fsub+0x16c>
 8000d64:	2120      	movs	r1, #32
 8000d66:	4648      	mov	r0, r9
 8000d68:	1b89      	subs	r1, r1, r6
 8000d6a:	4088      	lsls	r0, r1
 8000d6c:	464a      	mov	r2, r9
 8000d6e:	0001      	movs	r1, r0
 8000d70:	40f2      	lsrs	r2, r6
 8000d72:	1e48      	subs	r0, r1, #1
 8000d74:	4181      	sbcs	r1, r0
 8000d76:	430a      	orrs	r2, r1
 8000d78:	1a9b      	subs	r3, r3, r2
 8000d7a:	015a      	lsls	r2, r3, #5
 8000d7c:	d500      	bpl.n	8000d80 <__aeabi_fsub+0x174>
 8000d7e:	e773      	b.n	8000c68 <__aeabi_fsub+0x5c>
 8000d80:	2201      	movs	r2, #1
 8000d82:	4641      	mov	r1, r8
 8000d84:	400a      	ands	r2, r1
 8000d86:	0759      	lsls	r1, r3, #29
 8000d88:	d000      	beq.n	8000d8c <__aeabi_fsub+0x180>
 8000d8a:	e789      	b.n	8000ca0 <__aeabi_fsub+0x94>
 8000d8c:	e011      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000d8e:	4648      	mov	r0, r9
 8000d90:	2800      	cmp	r0, #0
 8000d92:	d158      	bne.n	8000e46 <__aeabi_fsub+0x23a>
 8000d94:	2cff      	cmp	r4, #255	; 0xff
 8000d96:	d10c      	bne.n	8000db2 <__aeabi_fsub+0x1a6>
 8000d98:	08db      	lsrs	r3, r3, #3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d100      	bne.n	8000da0 <__aeabi_fsub+0x194>
 8000d9e:	e78c      	b.n	8000cba <__aeabi_fsub+0xae>
 8000da0:	2080      	movs	r0, #128	; 0x80
 8000da2:	03c0      	lsls	r0, r0, #15
 8000da4:	4303      	orrs	r3, r0
 8000da6:	025b      	lsls	r3, r3, #9
 8000da8:	0a5b      	lsrs	r3, r3, #9
 8000daa:	24ff      	movs	r4, #255	; 0xff
 8000dac:	e787      	b.n	8000cbe <__aeabi_fsub+0xb2>
 8000dae:	2cff      	cmp	r4, #255	; 0xff
 8000db0:	d025      	beq.n	8000dfe <__aeabi_fsub+0x1f2>
 8000db2:	08db      	lsrs	r3, r3, #3
 8000db4:	2dff      	cmp	r5, #255	; 0xff
 8000db6:	d0f0      	beq.n	8000d9a <__aeabi_fsub+0x18e>
 8000db8:	025b      	lsls	r3, r3, #9
 8000dba:	0a5b      	lsrs	r3, r3, #9
 8000dbc:	b2ec      	uxtb	r4, r5
 8000dbe:	e77e      	b.n	8000cbe <__aeabi_fsub+0xb2>
 8000dc0:	2c00      	cmp	r4, #0
 8000dc2:	d04d      	beq.n	8000e60 <__aeabi_fsub+0x254>
 8000dc4:	28ff      	cmp	r0, #255	; 0xff
 8000dc6:	d018      	beq.n	8000dfa <__aeabi_fsub+0x1ee>
 8000dc8:	2480      	movs	r4, #128	; 0x80
 8000dca:	04e4      	lsls	r4, r4, #19
 8000dcc:	4272      	negs	r2, r6
 8000dce:	4323      	orrs	r3, r4
 8000dd0:	2a1b      	cmp	r2, #27
 8000dd2:	dd00      	ble.n	8000dd6 <__aeabi_fsub+0x1ca>
 8000dd4:	e0c4      	b.n	8000f60 <__aeabi_fsub+0x354>
 8000dd6:	001c      	movs	r4, r3
 8000dd8:	2520      	movs	r5, #32
 8000dda:	40d4      	lsrs	r4, r2
 8000ddc:	1aaa      	subs	r2, r5, r2
 8000dde:	4093      	lsls	r3, r2
 8000de0:	1e5a      	subs	r2, r3, #1
 8000de2:	4193      	sbcs	r3, r2
 8000de4:	4323      	orrs	r3, r4
 8000de6:	464a      	mov	r2, r9
 8000de8:	0005      	movs	r5, r0
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	4688      	mov	r8, r1
 8000dee:	e738      	b.n	8000c62 <__aeabi_fsub+0x56>
 8000df0:	1c72      	adds	r2, r6, #1
 8000df2:	d0f8      	beq.n	8000de6 <__aeabi_fsub+0x1da>
 8000df4:	43f2      	mvns	r2, r6
 8000df6:	28ff      	cmp	r0, #255	; 0xff
 8000df8:	d1ea      	bne.n	8000dd0 <__aeabi_fsub+0x1c4>
 8000dfa:	000a      	movs	r2, r1
 8000dfc:	464b      	mov	r3, r9
 8000dfe:	25ff      	movs	r5, #255	; 0xff
 8000e00:	e7d7      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000e02:	019b      	lsls	r3, r3, #6
 8000e04:	0a5b      	lsrs	r3, r3, #9
 8000e06:	e75a      	b.n	8000cbe <__aeabi_fsub+0xb2>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d141      	bne.n	8000e90 <__aeabi_fsub+0x284>
 8000e0c:	1c65      	adds	r5, r4, #1
 8000e0e:	b2e9      	uxtb	r1, r5
 8000e10:	2901      	cmp	r1, #1
 8000e12:	dd45      	ble.n	8000ea0 <__aeabi_fsub+0x294>
 8000e14:	2dff      	cmp	r5, #255	; 0xff
 8000e16:	d100      	bne.n	8000e1a <__aeabi_fsub+0x20e>
 8000e18:	e74f      	b.n	8000cba <__aeabi_fsub+0xae>
 8000e1a:	2407      	movs	r4, #7
 8000e1c:	444b      	add	r3, r9
 8000e1e:	085b      	lsrs	r3, r3, #1
 8000e20:	401c      	ands	r4, r3
 8000e22:	e738      	b.n	8000c96 <__aeabi_fsub+0x8a>
 8000e24:	2207      	movs	r2, #7
 8000e26:	4b5a      	ldr	r3, [pc, #360]	; (8000f90 <__aeabi_fsub+0x384>)
 8000e28:	1a2d      	subs	r5, r5, r0
 8000e2a:	4023      	ands	r3, r4
 8000e2c:	4014      	ands	r4, r2
 8000e2e:	e732      	b.n	8000c96 <__aeabi_fsub+0x8a>
 8000e30:	2c00      	cmp	r4, #0
 8000e32:	d11d      	bne.n	8000e70 <__aeabi_fsub+0x264>
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d17a      	bne.n	8000f2e <__aeabi_fsub+0x322>
 8000e38:	464b      	mov	r3, r9
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d100      	bne.n	8000e40 <__aeabi_fsub+0x234>
 8000e3e:	e091      	b.n	8000f64 <__aeabi_fsub+0x358>
 8000e40:	000a      	movs	r2, r1
 8000e42:	2500      	movs	r5, #0
 8000e44:	e7b5      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000e46:	3e01      	subs	r6, #1
 8000e48:	2e00      	cmp	r6, #0
 8000e4a:	d119      	bne.n	8000e80 <__aeabi_fsub+0x274>
 8000e4c:	444b      	add	r3, r9
 8000e4e:	e76c      	b.n	8000d2a <__aeabi_fsub+0x11e>
 8000e50:	2cff      	cmp	r4, #255	; 0xff
 8000e52:	d184      	bne.n	8000d5e <__aeabi_fsub+0x152>
 8000e54:	25ff      	movs	r5, #255	; 0xff
 8000e56:	e7ac      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000e58:	464a      	mov	r2, r9
 8000e5a:	4688      	mov	r8, r1
 8000e5c:	1ad4      	subs	r4, r2, r3
 8000e5e:	e705      	b.n	8000c6c <__aeabi_fsub+0x60>
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1c5      	bne.n	8000df0 <__aeabi_fsub+0x1e4>
 8000e64:	000a      	movs	r2, r1
 8000e66:	28ff      	cmp	r0, #255	; 0xff
 8000e68:	d0c8      	beq.n	8000dfc <__aeabi_fsub+0x1f0>
 8000e6a:	0005      	movs	r5, r0
 8000e6c:	464b      	mov	r3, r9
 8000e6e:	e7a0      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d149      	bne.n	8000f08 <__aeabi_fsub+0x2fc>
 8000e74:	464b      	mov	r3, r9
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d077      	beq.n	8000f6a <__aeabi_fsub+0x35e>
 8000e7a:	000a      	movs	r2, r1
 8000e7c:	25ff      	movs	r5, #255	; 0xff
 8000e7e:	e798      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000e80:	2cff      	cmp	r4, #255	; 0xff
 8000e82:	d000      	beq.n	8000e86 <__aeabi_fsub+0x27a>
 8000e84:	e743      	b.n	8000d0e <__aeabi_fsub+0x102>
 8000e86:	e787      	b.n	8000d98 <__aeabi_fsub+0x18c>
 8000e88:	000a      	movs	r2, r1
 8000e8a:	24ff      	movs	r4, #255	; 0xff
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	e716      	b.n	8000cbe <__aeabi_fsub+0xb2>
 8000e90:	2c00      	cmp	r4, #0
 8000e92:	d115      	bne.n	8000ec0 <__aeabi_fsub+0x2b4>
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d157      	bne.n	8000f48 <__aeabi_fsub+0x33c>
 8000e98:	28ff      	cmp	r0, #255	; 0xff
 8000e9a:	d1e6      	bne.n	8000e6a <__aeabi_fsub+0x25e>
 8000e9c:	464b      	mov	r3, r9
 8000e9e:	e77b      	b.n	8000d98 <__aeabi_fsub+0x18c>
 8000ea0:	2c00      	cmp	r4, #0
 8000ea2:	d120      	bne.n	8000ee6 <__aeabi_fsub+0x2da>
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d057      	beq.n	8000f58 <__aeabi_fsub+0x34c>
 8000ea8:	4649      	mov	r1, r9
 8000eaa:	2900      	cmp	r1, #0
 8000eac:	d053      	beq.n	8000f56 <__aeabi_fsub+0x34a>
 8000eae:	444b      	add	r3, r9
 8000eb0:	015a      	lsls	r2, r3, #5
 8000eb2:	d568      	bpl.n	8000f86 <__aeabi_fsub+0x37a>
 8000eb4:	2407      	movs	r4, #7
 8000eb6:	4a36      	ldr	r2, [pc, #216]	; (8000f90 <__aeabi_fsub+0x384>)
 8000eb8:	401c      	ands	r4, r3
 8000eba:	2501      	movs	r5, #1
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	e6ea      	b.n	8000c96 <__aeabi_fsub+0x8a>
 8000ec0:	28ff      	cmp	r0, #255	; 0xff
 8000ec2:	d0eb      	beq.n	8000e9c <__aeabi_fsub+0x290>
 8000ec4:	2280      	movs	r2, #128	; 0x80
 8000ec6:	04d2      	lsls	r2, r2, #19
 8000ec8:	4276      	negs	r6, r6
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	2e1b      	cmp	r6, #27
 8000ece:	dc53      	bgt.n	8000f78 <__aeabi_fsub+0x36c>
 8000ed0:	2520      	movs	r5, #32
 8000ed2:	1bad      	subs	r5, r5, r6
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	40ab      	lsls	r3, r5
 8000ed8:	40f2      	lsrs	r2, r6
 8000eda:	1e5c      	subs	r4, r3, #1
 8000edc:	41a3      	sbcs	r3, r4
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	444b      	add	r3, r9
 8000ee2:	0005      	movs	r5, r0
 8000ee4:	e721      	b.n	8000d2a <__aeabi_fsub+0x11e>
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0d8      	beq.n	8000e9c <__aeabi_fsub+0x290>
 8000eea:	4649      	mov	r1, r9
 8000eec:	2900      	cmp	r1, #0
 8000eee:	d100      	bne.n	8000ef2 <__aeabi_fsub+0x2e6>
 8000ef0:	e752      	b.n	8000d98 <__aeabi_fsub+0x18c>
 8000ef2:	2180      	movs	r1, #128	; 0x80
 8000ef4:	03c9      	lsls	r1, r1, #15
 8000ef6:	420f      	tst	r7, r1
 8000ef8:	d100      	bne.n	8000efc <__aeabi_fsub+0x2f0>
 8000efa:	e74d      	b.n	8000d98 <__aeabi_fsub+0x18c>
 8000efc:	4660      	mov	r0, ip
 8000efe:	4208      	tst	r0, r1
 8000f00:	d000      	beq.n	8000f04 <__aeabi_fsub+0x2f8>
 8000f02:	e749      	b.n	8000d98 <__aeabi_fsub+0x18c>
 8000f04:	464b      	mov	r3, r9
 8000f06:	e747      	b.n	8000d98 <__aeabi_fsub+0x18c>
 8000f08:	4648      	mov	r0, r9
 8000f0a:	25ff      	movs	r5, #255	; 0xff
 8000f0c:	2800      	cmp	r0, #0
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_fsub+0x306>
 8000f10:	e74f      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000f12:	2280      	movs	r2, #128	; 0x80
 8000f14:	03d2      	lsls	r2, r2, #15
 8000f16:	4217      	tst	r7, r2
 8000f18:	d004      	beq.n	8000f24 <__aeabi_fsub+0x318>
 8000f1a:	4660      	mov	r0, ip
 8000f1c:	4210      	tst	r0, r2
 8000f1e:	d101      	bne.n	8000f24 <__aeabi_fsub+0x318>
 8000f20:	464b      	mov	r3, r9
 8000f22:	4688      	mov	r8, r1
 8000f24:	2201      	movs	r2, #1
 8000f26:	4641      	mov	r1, r8
 8000f28:	25ff      	movs	r5, #255	; 0xff
 8000f2a:	400a      	ands	r2, r1
 8000f2c:	e741      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000f2e:	4648      	mov	r0, r9
 8000f30:	2800      	cmp	r0, #0
 8000f32:	d01f      	beq.n	8000f74 <__aeabi_fsub+0x368>
 8000f34:	1a1a      	subs	r2, r3, r0
 8000f36:	0150      	lsls	r0, r2, #5
 8000f38:	d520      	bpl.n	8000f7c <__aeabi_fsub+0x370>
 8000f3a:	464a      	mov	r2, r9
 8000f3c:	2407      	movs	r4, #7
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	401c      	ands	r4, r3
 8000f42:	4688      	mov	r8, r1
 8000f44:	2500      	movs	r5, #0
 8000f46:	e6a6      	b.n	8000c96 <__aeabi_fsub+0x8a>
 8000f48:	1c74      	adds	r4, r6, #1
 8000f4a:	d0c9      	beq.n	8000ee0 <__aeabi_fsub+0x2d4>
 8000f4c:	43f6      	mvns	r6, r6
 8000f4e:	28ff      	cmp	r0, #255	; 0xff
 8000f50:	d1bc      	bne.n	8000ecc <__aeabi_fsub+0x2c0>
 8000f52:	464b      	mov	r3, r9
 8000f54:	e720      	b.n	8000d98 <__aeabi_fsub+0x18c>
 8000f56:	4699      	mov	r9, r3
 8000f58:	464b      	mov	r3, r9
 8000f5a:	2500      	movs	r5, #0
 8000f5c:	08db      	lsrs	r3, r3, #3
 8000f5e:	e72b      	b.n	8000db8 <__aeabi_fsub+0x1ac>
 8000f60:	2301      	movs	r3, #1
 8000f62:	e740      	b.n	8000de6 <__aeabi_fsub+0x1da>
 8000f64:	2200      	movs	r2, #0
 8000f66:	2300      	movs	r3, #0
 8000f68:	e6a9      	b.n	8000cbe <__aeabi_fsub+0xb2>
 8000f6a:	2380      	movs	r3, #128	; 0x80
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	03db      	lsls	r3, r3, #15
 8000f70:	24ff      	movs	r4, #255	; 0xff
 8000f72:	e6a4      	b.n	8000cbe <__aeabi_fsub+0xb2>
 8000f74:	2500      	movs	r5, #0
 8000f76:	e71c      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e7b1      	b.n	8000ee0 <__aeabi_fsub+0x2d4>
 8000f7c:	2a00      	cmp	r2, #0
 8000f7e:	d0f1      	beq.n	8000f64 <__aeabi_fsub+0x358>
 8000f80:	0013      	movs	r3, r2
 8000f82:	2500      	movs	r5, #0
 8000f84:	e6fc      	b.n	8000d80 <__aeabi_fsub+0x174>
 8000f86:	2500      	movs	r5, #0
 8000f88:	e6fa      	b.n	8000d80 <__aeabi_fsub+0x174>
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	7dffffff 	.word	0x7dffffff
 8000f90:	fbffffff 	.word	0xfbffffff

08000f94 <__aeabi_f2iz>:
 8000f94:	0241      	lsls	r1, r0, #9
 8000f96:	0042      	lsls	r2, r0, #1
 8000f98:	0fc3      	lsrs	r3, r0, #31
 8000f9a:	0a49      	lsrs	r1, r1, #9
 8000f9c:	0e12      	lsrs	r2, r2, #24
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	2a7e      	cmp	r2, #126	; 0x7e
 8000fa2:	d90d      	bls.n	8000fc0 <__aeabi_f2iz+0x2c>
 8000fa4:	2a9d      	cmp	r2, #157	; 0x9d
 8000fa6:	d80c      	bhi.n	8000fc2 <__aeabi_f2iz+0x2e>
 8000fa8:	2080      	movs	r0, #128	; 0x80
 8000faa:	0400      	lsls	r0, r0, #16
 8000fac:	4301      	orrs	r1, r0
 8000fae:	2a95      	cmp	r2, #149	; 0x95
 8000fb0:	dc0a      	bgt.n	8000fc8 <__aeabi_f2iz+0x34>
 8000fb2:	2096      	movs	r0, #150	; 0x96
 8000fb4:	1a82      	subs	r2, r0, r2
 8000fb6:	40d1      	lsrs	r1, r2
 8000fb8:	4248      	negs	r0, r1
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d100      	bne.n	8000fc0 <__aeabi_f2iz+0x2c>
 8000fbe:	0008      	movs	r0, r1
 8000fc0:	4770      	bx	lr
 8000fc2:	4a03      	ldr	r2, [pc, #12]	; (8000fd0 <__aeabi_f2iz+0x3c>)
 8000fc4:	1898      	adds	r0, r3, r2
 8000fc6:	e7fb      	b.n	8000fc0 <__aeabi_f2iz+0x2c>
 8000fc8:	3a96      	subs	r2, #150	; 0x96
 8000fca:	4091      	lsls	r1, r2
 8000fcc:	e7f4      	b.n	8000fb8 <__aeabi_f2iz+0x24>
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	7fffffff 	.word	0x7fffffff

08000fd4 <__aeabi_i2f>:
 8000fd4:	b570      	push	{r4, r5, r6, lr}
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	d03d      	beq.n	8001056 <__aeabi_i2f+0x82>
 8000fda:	17c3      	asrs	r3, r0, #31
 8000fdc:	18c5      	adds	r5, r0, r3
 8000fde:	405d      	eors	r5, r3
 8000fe0:	0fc4      	lsrs	r4, r0, #31
 8000fe2:	0028      	movs	r0, r5
 8000fe4:	f001 fe62 	bl	8002cac <__clzsi2>
 8000fe8:	229e      	movs	r2, #158	; 0x9e
 8000fea:	1a12      	subs	r2, r2, r0
 8000fec:	2a96      	cmp	r2, #150	; 0x96
 8000fee:	dc07      	bgt.n	8001000 <__aeabi_i2f+0x2c>
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	2808      	cmp	r0, #8
 8000ff4:	dd33      	ble.n	800105e <__aeabi_i2f+0x8a>
 8000ff6:	3808      	subs	r0, #8
 8000ff8:	4085      	lsls	r5, r0
 8000ffa:	0268      	lsls	r0, r5, #9
 8000ffc:	0a40      	lsrs	r0, r0, #9
 8000ffe:	e023      	b.n	8001048 <__aeabi_i2f+0x74>
 8001000:	2a99      	cmp	r2, #153	; 0x99
 8001002:	dd0b      	ble.n	800101c <__aeabi_i2f+0x48>
 8001004:	2305      	movs	r3, #5
 8001006:	0029      	movs	r1, r5
 8001008:	1a1b      	subs	r3, r3, r0
 800100a:	40d9      	lsrs	r1, r3
 800100c:	0003      	movs	r3, r0
 800100e:	331b      	adds	r3, #27
 8001010:	409d      	lsls	r5, r3
 8001012:	002b      	movs	r3, r5
 8001014:	1e5d      	subs	r5, r3, #1
 8001016:	41ab      	sbcs	r3, r5
 8001018:	4319      	orrs	r1, r3
 800101a:	000d      	movs	r5, r1
 800101c:	2805      	cmp	r0, #5
 800101e:	dd01      	ble.n	8001024 <__aeabi_i2f+0x50>
 8001020:	1f43      	subs	r3, r0, #5
 8001022:	409d      	lsls	r5, r3
 8001024:	002b      	movs	r3, r5
 8001026:	490f      	ldr	r1, [pc, #60]	; (8001064 <__aeabi_i2f+0x90>)
 8001028:	400b      	ands	r3, r1
 800102a:	076e      	lsls	r6, r5, #29
 800102c:	d009      	beq.n	8001042 <__aeabi_i2f+0x6e>
 800102e:	260f      	movs	r6, #15
 8001030:	4035      	ands	r5, r6
 8001032:	2d04      	cmp	r5, #4
 8001034:	d005      	beq.n	8001042 <__aeabi_i2f+0x6e>
 8001036:	3304      	adds	r3, #4
 8001038:	015d      	lsls	r5, r3, #5
 800103a:	d502      	bpl.n	8001042 <__aeabi_i2f+0x6e>
 800103c:	229f      	movs	r2, #159	; 0x9f
 800103e:	400b      	ands	r3, r1
 8001040:	1a12      	subs	r2, r2, r0
 8001042:	019b      	lsls	r3, r3, #6
 8001044:	0a58      	lsrs	r0, r3, #9
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	0240      	lsls	r0, r0, #9
 800104a:	05d2      	lsls	r2, r2, #23
 800104c:	0a40      	lsrs	r0, r0, #9
 800104e:	07e4      	lsls	r4, r4, #31
 8001050:	4310      	orrs	r0, r2
 8001052:	4320      	orrs	r0, r4
 8001054:	bd70      	pop	{r4, r5, r6, pc}
 8001056:	2400      	movs	r4, #0
 8001058:	2200      	movs	r2, #0
 800105a:	2000      	movs	r0, #0
 800105c:	e7f4      	b.n	8001048 <__aeabi_i2f+0x74>
 800105e:	0268      	lsls	r0, r5, #9
 8001060:	0a40      	lsrs	r0, r0, #9
 8001062:	e7f1      	b.n	8001048 <__aeabi_i2f+0x74>
 8001064:	fbffffff 	.word	0xfbffffff

08001068 <__aeabi_dadd>:
 8001068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800106a:	464f      	mov	r7, r9
 800106c:	4646      	mov	r6, r8
 800106e:	46d6      	mov	lr, sl
 8001070:	000c      	movs	r4, r1
 8001072:	0309      	lsls	r1, r1, #12
 8001074:	b5c0      	push	{r6, r7, lr}
 8001076:	0a49      	lsrs	r1, r1, #9
 8001078:	0f47      	lsrs	r7, r0, #29
 800107a:	005e      	lsls	r6, r3, #1
 800107c:	4339      	orrs	r1, r7
 800107e:	031f      	lsls	r7, r3, #12
 8001080:	0fdb      	lsrs	r3, r3, #31
 8001082:	469c      	mov	ip, r3
 8001084:	0065      	lsls	r5, r4, #1
 8001086:	0a7b      	lsrs	r3, r7, #9
 8001088:	0f57      	lsrs	r7, r2, #29
 800108a:	431f      	orrs	r7, r3
 800108c:	0d6d      	lsrs	r5, r5, #21
 800108e:	0fe4      	lsrs	r4, r4, #31
 8001090:	0d76      	lsrs	r6, r6, #21
 8001092:	46a1      	mov	r9, r4
 8001094:	00c0      	lsls	r0, r0, #3
 8001096:	46b8      	mov	r8, r7
 8001098:	00d2      	lsls	r2, r2, #3
 800109a:	1bab      	subs	r3, r5, r6
 800109c:	4564      	cmp	r4, ip
 800109e:	d07b      	beq.n	8001198 <__aeabi_dadd+0x130>
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	dd5f      	ble.n	8001164 <__aeabi_dadd+0xfc>
 80010a4:	2e00      	cmp	r6, #0
 80010a6:	d000      	beq.n	80010aa <__aeabi_dadd+0x42>
 80010a8:	e0a4      	b.n	80011f4 <__aeabi_dadd+0x18c>
 80010aa:	003e      	movs	r6, r7
 80010ac:	4316      	orrs	r6, r2
 80010ae:	d100      	bne.n	80010b2 <__aeabi_dadd+0x4a>
 80010b0:	e112      	b.n	80012d8 <__aeabi_dadd+0x270>
 80010b2:	1e5e      	subs	r6, r3, #1
 80010b4:	2e00      	cmp	r6, #0
 80010b6:	d000      	beq.n	80010ba <__aeabi_dadd+0x52>
 80010b8:	e19e      	b.n	80013f8 <__aeabi_dadd+0x390>
 80010ba:	1a87      	subs	r7, r0, r2
 80010bc:	4643      	mov	r3, r8
 80010be:	42b8      	cmp	r0, r7
 80010c0:	4180      	sbcs	r0, r0
 80010c2:	2501      	movs	r5, #1
 80010c4:	1ac9      	subs	r1, r1, r3
 80010c6:	4240      	negs	r0, r0
 80010c8:	1a09      	subs	r1, r1, r0
 80010ca:	020b      	lsls	r3, r1, #8
 80010cc:	d400      	bmi.n	80010d0 <__aeabi_dadd+0x68>
 80010ce:	e131      	b.n	8001334 <__aeabi_dadd+0x2cc>
 80010d0:	0249      	lsls	r1, r1, #9
 80010d2:	0a4e      	lsrs	r6, r1, #9
 80010d4:	2e00      	cmp	r6, #0
 80010d6:	d100      	bne.n	80010da <__aeabi_dadd+0x72>
 80010d8:	e16e      	b.n	80013b8 <__aeabi_dadd+0x350>
 80010da:	0030      	movs	r0, r6
 80010dc:	f001 fde6 	bl	8002cac <__clzsi2>
 80010e0:	0003      	movs	r3, r0
 80010e2:	3b08      	subs	r3, #8
 80010e4:	2b1f      	cmp	r3, #31
 80010e6:	dd00      	ble.n	80010ea <__aeabi_dadd+0x82>
 80010e8:	e161      	b.n	80013ae <__aeabi_dadd+0x346>
 80010ea:	2220      	movs	r2, #32
 80010ec:	0039      	movs	r1, r7
 80010ee:	1ad2      	subs	r2, r2, r3
 80010f0:	409e      	lsls	r6, r3
 80010f2:	40d1      	lsrs	r1, r2
 80010f4:	409f      	lsls	r7, r3
 80010f6:	430e      	orrs	r6, r1
 80010f8:	429d      	cmp	r5, r3
 80010fa:	dd00      	ble.n	80010fe <__aeabi_dadd+0x96>
 80010fc:	e151      	b.n	80013a2 <__aeabi_dadd+0x33a>
 80010fe:	1b5d      	subs	r5, r3, r5
 8001100:	1c6b      	adds	r3, r5, #1
 8001102:	2b1f      	cmp	r3, #31
 8001104:	dd00      	ble.n	8001108 <__aeabi_dadd+0xa0>
 8001106:	e17c      	b.n	8001402 <__aeabi_dadd+0x39a>
 8001108:	2120      	movs	r1, #32
 800110a:	1ac9      	subs	r1, r1, r3
 800110c:	003d      	movs	r5, r7
 800110e:	0030      	movs	r0, r6
 8001110:	408f      	lsls	r7, r1
 8001112:	4088      	lsls	r0, r1
 8001114:	40dd      	lsrs	r5, r3
 8001116:	1e79      	subs	r1, r7, #1
 8001118:	418f      	sbcs	r7, r1
 800111a:	0031      	movs	r1, r6
 800111c:	2207      	movs	r2, #7
 800111e:	4328      	orrs	r0, r5
 8001120:	40d9      	lsrs	r1, r3
 8001122:	2500      	movs	r5, #0
 8001124:	4307      	orrs	r7, r0
 8001126:	403a      	ands	r2, r7
 8001128:	2a00      	cmp	r2, #0
 800112a:	d009      	beq.n	8001140 <__aeabi_dadd+0xd8>
 800112c:	230f      	movs	r3, #15
 800112e:	403b      	ands	r3, r7
 8001130:	2b04      	cmp	r3, #4
 8001132:	d005      	beq.n	8001140 <__aeabi_dadd+0xd8>
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	42bb      	cmp	r3, r7
 8001138:	41bf      	sbcs	r7, r7
 800113a:	427f      	negs	r7, r7
 800113c:	19c9      	adds	r1, r1, r7
 800113e:	001f      	movs	r7, r3
 8001140:	020b      	lsls	r3, r1, #8
 8001142:	d400      	bmi.n	8001146 <__aeabi_dadd+0xde>
 8001144:	e226      	b.n	8001594 <__aeabi_dadd+0x52c>
 8001146:	1c6a      	adds	r2, r5, #1
 8001148:	4bc6      	ldr	r3, [pc, #792]	; (8001464 <__aeabi_dadd+0x3fc>)
 800114a:	0555      	lsls	r5, r2, #21
 800114c:	0d6d      	lsrs	r5, r5, #21
 800114e:	429a      	cmp	r2, r3
 8001150:	d100      	bne.n	8001154 <__aeabi_dadd+0xec>
 8001152:	e106      	b.n	8001362 <__aeabi_dadd+0x2fa>
 8001154:	4ac4      	ldr	r2, [pc, #784]	; (8001468 <__aeabi_dadd+0x400>)
 8001156:	08ff      	lsrs	r7, r7, #3
 8001158:	400a      	ands	r2, r1
 800115a:	0753      	lsls	r3, r2, #29
 800115c:	0252      	lsls	r2, r2, #9
 800115e:	433b      	orrs	r3, r7
 8001160:	0b12      	lsrs	r2, r2, #12
 8001162:	e08e      	b.n	8001282 <__aeabi_dadd+0x21a>
 8001164:	2b00      	cmp	r3, #0
 8001166:	d000      	beq.n	800116a <__aeabi_dadd+0x102>
 8001168:	e0b8      	b.n	80012dc <__aeabi_dadd+0x274>
 800116a:	1c6b      	adds	r3, r5, #1
 800116c:	055b      	lsls	r3, r3, #21
 800116e:	0d5b      	lsrs	r3, r3, #21
 8001170:	2b01      	cmp	r3, #1
 8001172:	dc00      	bgt.n	8001176 <__aeabi_dadd+0x10e>
 8001174:	e130      	b.n	80013d8 <__aeabi_dadd+0x370>
 8001176:	1a87      	subs	r7, r0, r2
 8001178:	4643      	mov	r3, r8
 800117a:	42b8      	cmp	r0, r7
 800117c:	41b6      	sbcs	r6, r6
 800117e:	1acb      	subs	r3, r1, r3
 8001180:	4276      	negs	r6, r6
 8001182:	1b9e      	subs	r6, r3, r6
 8001184:	0233      	lsls	r3, r6, #8
 8001186:	d500      	bpl.n	800118a <__aeabi_dadd+0x122>
 8001188:	e14c      	b.n	8001424 <__aeabi_dadd+0x3bc>
 800118a:	003b      	movs	r3, r7
 800118c:	4333      	orrs	r3, r6
 800118e:	d1a1      	bne.n	80010d4 <__aeabi_dadd+0x6c>
 8001190:	2200      	movs	r2, #0
 8001192:	2400      	movs	r4, #0
 8001194:	2500      	movs	r5, #0
 8001196:	e070      	b.n	800127a <__aeabi_dadd+0x212>
 8001198:	2b00      	cmp	r3, #0
 800119a:	dc00      	bgt.n	800119e <__aeabi_dadd+0x136>
 800119c:	e0e5      	b.n	800136a <__aeabi_dadd+0x302>
 800119e:	2e00      	cmp	r6, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_dadd+0x13c>
 80011a2:	e083      	b.n	80012ac <__aeabi_dadd+0x244>
 80011a4:	4eaf      	ldr	r6, [pc, #700]	; (8001464 <__aeabi_dadd+0x3fc>)
 80011a6:	42b5      	cmp	r5, r6
 80011a8:	d060      	beq.n	800126c <__aeabi_dadd+0x204>
 80011aa:	2680      	movs	r6, #128	; 0x80
 80011ac:	0436      	lsls	r6, r6, #16
 80011ae:	4337      	orrs	r7, r6
 80011b0:	46b8      	mov	r8, r7
 80011b2:	2b38      	cmp	r3, #56	; 0x38
 80011b4:	dc00      	bgt.n	80011b8 <__aeabi_dadd+0x150>
 80011b6:	e13e      	b.n	8001436 <__aeabi_dadd+0x3ce>
 80011b8:	4643      	mov	r3, r8
 80011ba:	4313      	orrs	r3, r2
 80011bc:	001f      	movs	r7, r3
 80011be:	1e7a      	subs	r2, r7, #1
 80011c0:	4197      	sbcs	r7, r2
 80011c2:	183f      	adds	r7, r7, r0
 80011c4:	4287      	cmp	r7, r0
 80011c6:	4180      	sbcs	r0, r0
 80011c8:	4240      	negs	r0, r0
 80011ca:	1809      	adds	r1, r1, r0
 80011cc:	020b      	lsls	r3, r1, #8
 80011ce:	d400      	bmi.n	80011d2 <__aeabi_dadd+0x16a>
 80011d0:	e0b0      	b.n	8001334 <__aeabi_dadd+0x2cc>
 80011d2:	4ba4      	ldr	r3, [pc, #656]	; (8001464 <__aeabi_dadd+0x3fc>)
 80011d4:	3501      	adds	r5, #1
 80011d6:	429d      	cmp	r5, r3
 80011d8:	d100      	bne.n	80011dc <__aeabi_dadd+0x174>
 80011da:	e0c3      	b.n	8001364 <__aeabi_dadd+0x2fc>
 80011dc:	4aa2      	ldr	r2, [pc, #648]	; (8001468 <__aeabi_dadd+0x400>)
 80011de:	087b      	lsrs	r3, r7, #1
 80011e0:	400a      	ands	r2, r1
 80011e2:	2101      	movs	r1, #1
 80011e4:	400f      	ands	r7, r1
 80011e6:	431f      	orrs	r7, r3
 80011e8:	0851      	lsrs	r1, r2, #1
 80011ea:	07d3      	lsls	r3, r2, #31
 80011ec:	2207      	movs	r2, #7
 80011ee:	431f      	orrs	r7, r3
 80011f0:	403a      	ands	r2, r7
 80011f2:	e799      	b.n	8001128 <__aeabi_dadd+0xc0>
 80011f4:	4e9b      	ldr	r6, [pc, #620]	; (8001464 <__aeabi_dadd+0x3fc>)
 80011f6:	42b5      	cmp	r5, r6
 80011f8:	d038      	beq.n	800126c <__aeabi_dadd+0x204>
 80011fa:	2680      	movs	r6, #128	; 0x80
 80011fc:	0436      	lsls	r6, r6, #16
 80011fe:	4337      	orrs	r7, r6
 8001200:	46b8      	mov	r8, r7
 8001202:	2b38      	cmp	r3, #56	; 0x38
 8001204:	dd00      	ble.n	8001208 <__aeabi_dadd+0x1a0>
 8001206:	e0dc      	b.n	80013c2 <__aeabi_dadd+0x35a>
 8001208:	2b1f      	cmp	r3, #31
 800120a:	dc00      	bgt.n	800120e <__aeabi_dadd+0x1a6>
 800120c:	e130      	b.n	8001470 <__aeabi_dadd+0x408>
 800120e:	001e      	movs	r6, r3
 8001210:	4647      	mov	r7, r8
 8001212:	3e20      	subs	r6, #32
 8001214:	40f7      	lsrs	r7, r6
 8001216:	46bc      	mov	ip, r7
 8001218:	2b20      	cmp	r3, #32
 800121a:	d004      	beq.n	8001226 <__aeabi_dadd+0x1be>
 800121c:	2640      	movs	r6, #64	; 0x40
 800121e:	1af3      	subs	r3, r6, r3
 8001220:	4646      	mov	r6, r8
 8001222:	409e      	lsls	r6, r3
 8001224:	4332      	orrs	r2, r6
 8001226:	0017      	movs	r7, r2
 8001228:	4663      	mov	r3, ip
 800122a:	1e7a      	subs	r2, r7, #1
 800122c:	4197      	sbcs	r7, r2
 800122e:	431f      	orrs	r7, r3
 8001230:	e0cc      	b.n	80013cc <__aeabi_dadd+0x364>
 8001232:	2b00      	cmp	r3, #0
 8001234:	d100      	bne.n	8001238 <__aeabi_dadd+0x1d0>
 8001236:	e204      	b.n	8001642 <__aeabi_dadd+0x5da>
 8001238:	4643      	mov	r3, r8
 800123a:	4313      	orrs	r3, r2
 800123c:	d100      	bne.n	8001240 <__aeabi_dadd+0x1d8>
 800123e:	e159      	b.n	80014f4 <__aeabi_dadd+0x48c>
 8001240:	074b      	lsls	r3, r1, #29
 8001242:	08c0      	lsrs	r0, r0, #3
 8001244:	4318      	orrs	r0, r3
 8001246:	2380      	movs	r3, #128	; 0x80
 8001248:	08c9      	lsrs	r1, r1, #3
 800124a:	031b      	lsls	r3, r3, #12
 800124c:	4219      	tst	r1, r3
 800124e:	d008      	beq.n	8001262 <__aeabi_dadd+0x1fa>
 8001250:	4645      	mov	r5, r8
 8001252:	08ed      	lsrs	r5, r5, #3
 8001254:	421d      	tst	r5, r3
 8001256:	d104      	bne.n	8001262 <__aeabi_dadd+0x1fa>
 8001258:	4643      	mov	r3, r8
 800125a:	08d0      	lsrs	r0, r2, #3
 800125c:	0759      	lsls	r1, r3, #29
 800125e:	4308      	orrs	r0, r1
 8001260:	0029      	movs	r1, r5
 8001262:	0f42      	lsrs	r2, r0, #29
 8001264:	00c9      	lsls	r1, r1, #3
 8001266:	4d7f      	ldr	r5, [pc, #508]	; (8001464 <__aeabi_dadd+0x3fc>)
 8001268:	4311      	orrs	r1, r2
 800126a:	00c0      	lsls	r0, r0, #3
 800126c:	074b      	lsls	r3, r1, #29
 800126e:	08ca      	lsrs	r2, r1, #3
 8001270:	497c      	ldr	r1, [pc, #496]	; (8001464 <__aeabi_dadd+0x3fc>)
 8001272:	08c0      	lsrs	r0, r0, #3
 8001274:	4303      	orrs	r3, r0
 8001276:	428d      	cmp	r5, r1
 8001278:	d068      	beq.n	800134c <__aeabi_dadd+0x2e4>
 800127a:	0312      	lsls	r2, r2, #12
 800127c:	056d      	lsls	r5, r5, #21
 800127e:	0b12      	lsrs	r2, r2, #12
 8001280:	0d6d      	lsrs	r5, r5, #21
 8001282:	2100      	movs	r1, #0
 8001284:	0312      	lsls	r2, r2, #12
 8001286:	0018      	movs	r0, r3
 8001288:	0b13      	lsrs	r3, r2, #12
 800128a:	0d0a      	lsrs	r2, r1, #20
 800128c:	0512      	lsls	r2, r2, #20
 800128e:	431a      	orrs	r2, r3
 8001290:	4b76      	ldr	r3, [pc, #472]	; (800146c <__aeabi_dadd+0x404>)
 8001292:	052d      	lsls	r5, r5, #20
 8001294:	4013      	ands	r3, r2
 8001296:	432b      	orrs	r3, r5
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	07e4      	lsls	r4, r4, #31
 800129c:	085b      	lsrs	r3, r3, #1
 800129e:	4323      	orrs	r3, r4
 80012a0:	0019      	movs	r1, r3
 80012a2:	bc1c      	pop	{r2, r3, r4}
 80012a4:	4690      	mov	r8, r2
 80012a6:	4699      	mov	r9, r3
 80012a8:	46a2      	mov	sl, r4
 80012aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ac:	003e      	movs	r6, r7
 80012ae:	4316      	orrs	r6, r2
 80012b0:	d012      	beq.n	80012d8 <__aeabi_dadd+0x270>
 80012b2:	1e5e      	subs	r6, r3, #1
 80012b4:	2e00      	cmp	r6, #0
 80012b6:	d000      	beq.n	80012ba <__aeabi_dadd+0x252>
 80012b8:	e100      	b.n	80014bc <__aeabi_dadd+0x454>
 80012ba:	1887      	adds	r7, r0, r2
 80012bc:	4287      	cmp	r7, r0
 80012be:	4180      	sbcs	r0, r0
 80012c0:	4441      	add	r1, r8
 80012c2:	4240      	negs	r0, r0
 80012c4:	1809      	adds	r1, r1, r0
 80012c6:	2501      	movs	r5, #1
 80012c8:	020b      	lsls	r3, r1, #8
 80012ca:	d533      	bpl.n	8001334 <__aeabi_dadd+0x2cc>
 80012cc:	2502      	movs	r5, #2
 80012ce:	e785      	b.n	80011dc <__aeabi_dadd+0x174>
 80012d0:	4664      	mov	r4, ip
 80012d2:	0033      	movs	r3, r6
 80012d4:	4641      	mov	r1, r8
 80012d6:	0010      	movs	r0, r2
 80012d8:	001d      	movs	r5, r3
 80012da:	e7c7      	b.n	800126c <__aeabi_dadd+0x204>
 80012dc:	2d00      	cmp	r5, #0
 80012de:	d000      	beq.n	80012e2 <__aeabi_dadd+0x27a>
 80012e0:	e0da      	b.n	8001498 <__aeabi_dadd+0x430>
 80012e2:	000c      	movs	r4, r1
 80012e4:	4304      	orrs	r4, r0
 80012e6:	d0f3      	beq.n	80012d0 <__aeabi_dadd+0x268>
 80012e8:	1c5c      	adds	r4, r3, #1
 80012ea:	d100      	bne.n	80012ee <__aeabi_dadd+0x286>
 80012ec:	e19f      	b.n	800162e <__aeabi_dadd+0x5c6>
 80012ee:	4c5d      	ldr	r4, [pc, #372]	; (8001464 <__aeabi_dadd+0x3fc>)
 80012f0:	42a6      	cmp	r6, r4
 80012f2:	d100      	bne.n	80012f6 <__aeabi_dadd+0x28e>
 80012f4:	e12f      	b.n	8001556 <__aeabi_dadd+0x4ee>
 80012f6:	43db      	mvns	r3, r3
 80012f8:	2b38      	cmp	r3, #56	; 0x38
 80012fa:	dd00      	ble.n	80012fe <__aeabi_dadd+0x296>
 80012fc:	e166      	b.n	80015cc <__aeabi_dadd+0x564>
 80012fe:	2b1f      	cmp	r3, #31
 8001300:	dd00      	ble.n	8001304 <__aeabi_dadd+0x29c>
 8001302:	e183      	b.n	800160c <__aeabi_dadd+0x5a4>
 8001304:	2420      	movs	r4, #32
 8001306:	0005      	movs	r5, r0
 8001308:	1ae4      	subs	r4, r4, r3
 800130a:	000f      	movs	r7, r1
 800130c:	40dd      	lsrs	r5, r3
 800130e:	40d9      	lsrs	r1, r3
 8001310:	40a0      	lsls	r0, r4
 8001312:	4643      	mov	r3, r8
 8001314:	40a7      	lsls	r7, r4
 8001316:	1a5b      	subs	r3, r3, r1
 8001318:	1e44      	subs	r4, r0, #1
 800131a:	41a0      	sbcs	r0, r4
 800131c:	4698      	mov	r8, r3
 800131e:	432f      	orrs	r7, r5
 8001320:	4338      	orrs	r0, r7
 8001322:	1a17      	subs	r7, r2, r0
 8001324:	42ba      	cmp	r2, r7
 8001326:	4192      	sbcs	r2, r2
 8001328:	4643      	mov	r3, r8
 800132a:	4252      	negs	r2, r2
 800132c:	1a99      	subs	r1, r3, r2
 800132e:	4664      	mov	r4, ip
 8001330:	0035      	movs	r5, r6
 8001332:	e6ca      	b.n	80010ca <__aeabi_dadd+0x62>
 8001334:	2207      	movs	r2, #7
 8001336:	403a      	ands	r2, r7
 8001338:	2a00      	cmp	r2, #0
 800133a:	d000      	beq.n	800133e <__aeabi_dadd+0x2d6>
 800133c:	e6f6      	b.n	800112c <__aeabi_dadd+0xc4>
 800133e:	074b      	lsls	r3, r1, #29
 8001340:	08ca      	lsrs	r2, r1, #3
 8001342:	4948      	ldr	r1, [pc, #288]	; (8001464 <__aeabi_dadd+0x3fc>)
 8001344:	08ff      	lsrs	r7, r7, #3
 8001346:	433b      	orrs	r3, r7
 8001348:	428d      	cmp	r5, r1
 800134a:	d196      	bne.n	800127a <__aeabi_dadd+0x212>
 800134c:	0019      	movs	r1, r3
 800134e:	4311      	orrs	r1, r2
 8001350:	d100      	bne.n	8001354 <__aeabi_dadd+0x2ec>
 8001352:	e19e      	b.n	8001692 <__aeabi_dadd+0x62a>
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	0309      	lsls	r1, r1, #12
 8001358:	430a      	orrs	r2, r1
 800135a:	0312      	lsls	r2, r2, #12
 800135c:	0b12      	lsrs	r2, r2, #12
 800135e:	4d41      	ldr	r5, [pc, #260]	; (8001464 <__aeabi_dadd+0x3fc>)
 8001360:	e78f      	b.n	8001282 <__aeabi_dadd+0x21a>
 8001362:	0015      	movs	r5, r2
 8001364:	2200      	movs	r2, #0
 8001366:	2300      	movs	r3, #0
 8001368:	e78b      	b.n	8001282 <__aeabi_dadd+0x21a>
 800136a:	2b00      	cmp	r3, #0
 800136c:	d000      	beq.n	8001370 <__aeabi_dadd+0x308>
 800136e:	e0c7      	b.n	8001500 <__aeabi_dadd+0x498>
 8001370:	1c6b      	adds	r3, r5, #1
 8001372:	055f      	lsls	r7, r3, #21
 8001374:	0d7f      	lsrs	r7, r7, #21
 8001376:	2f01      	cmp	r7, #1
 8001378:	dc00      	bgt.n	800137c <__aeabi_dadd+0x314>
 800137a:	e0f1      	b.n	8001560 <__aeabi_dadd+0x4f8>
 800137c:	4d39      	ldr	r5, [pc, #228]	; (8001464 <__aeabi_dadd+0x3fc>)
 800137e:	42ab      	cmp	r3, r5
 8001380:	d100      	bne.n	8001384 <__aeabi_dadd+0x31c>
 8001382:	e0b9      	b.n	80014f8 <__aeabi_dadd+0x490>
 8001384:	1885      	adds	r5, r0, r2
 8001386:	000a      	movs	r2, r1
 8001388:	4285      	cmp	r5, r0
 800138a:	4189      	sbcs	r1, r1
 800138c:	4442      	add	r2, r8
 800138e:	4249      	negs	r1, r1
 8001390:	1851      	adds	r1, r2, r1
 8001392:	2207      	movs	r2, #7
 8001394:	07cf      	lsls	r7, r1, #31
 8001396:	086d      	lsrs	r5, r5, #1
 8001398:	432f      	orrs	r7, r5
 800139a:	0849      	lsrs	r1, r1, #1
 800139c:	403a      	ands	r2, r7
 800139e:	001d      	movs	r5, r3
 80013a0:	e6c2      	b.n	8001128 <__aeabi_dadd+0xc0>
 80013a2:	2207      	movs	r2, #7
 80013a4:	4930      	ldr	r1, [pc, #192]	; (8001468 <__aeabi_dadd+0x400>)
 80013a6:	1aed      	subs	r5, r5, r3
 80013a8:	4031      	ands	r1, r6
 80013aa:	403a      	ands	r2, r7
 80013ac:	e6bc      	b.n	8001128 <__aeabi_dadd+0xc0>
 80013ae:	003e      	movs	r6, r7
 80013b0:	3828      	subs	r0, #40	; 0x28
 80013b2:	4086      	lsls	r6, r0
 80013b4:	2700      	movs	r7, #0
 80013b6:	e69f      	b.n	80010f8 <__aeabi_dadd+0x90>
 80013b8:	0038      	movs	r0, r7
 80013ba:	f001 fc77 	bl	8002cac <__clzsi2>
 80013be:	3020      	adds	r0, #32
 80013c0:	e68e      	b.n	80010e0 <__aeabi_dadd+0x78>
 80013c2:	4643      	mov	r3, r8
 80013c4:	4313      	orrs	r3, r2
 80013c6:	001f      	movs	r7, r3
 80013c8:	1e7a      	subs	r2, r7, #1
 80013ca:	4197      	sbcs	r7, r2
 80013cc:	1bc7      	subs	r7, r0, r7
 80013ce:	42b8      	cmp	r0, r7
 80013d0:	4180      	sbcs	r0, r0
 80013d2:	4240      	negs	r0, r0
 80013d4:	1a09      	subs	r1, r1, r0
 80013d6:	e678      	b.n	80010ca <__aeabi_dadd+0x62>
 80013d8:	000e      	movs	r6, r1
 80013da:	003b      	movs	r3, r7
 80013dc:	4306      	orrs	r6, r0
 80013de:	4313      	orrs	r3, r2
 80013e0:	2d00      	cmp	r5, #0
 80013e2:	d161      	bne.n	80014a8 <__aeabi_dadd+0x440>
 80013e4:	2e00      	cmp	r6, #0
 80013e6:	d000      	beq.n	80013ea <__aeabi_dadd+0x382>
 80013e8:	e0f4      	b.n	80015d4 <__aeabi_dadd+0x56c>
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d100      	bne.n	80013f0 <__aeabi_dadd+0x388>
 80013ee:	e11b      	b.n	8001628 <__aeabi_dadd+0x5c0>
 80013f0:	4664      	mov	r4, ip
 80013f2:	0039      	movs	r1, r7
 80013f4:	0010      	movs	r0, r2
 80013f6:	e739      	b.n	800126c <__aeabi_dadd+0x204>
 80013f8:	4f1a      	ldr	r7, [pc, #104]	; (8001464 <__aeabi_dadd+0x3fc>)
 80013fa:	42bb      	cmp	r3, r7
 80013fc:	d07a      	beq.n	80014f4 <__aeabi_dadd+0x48c>
 80013fe:	0033      	movs	r3, r6
 8001400:	e6ff      	b.n	8001202 <__aeabi_dadd+0x19a>
 8001402:	0030      	movs	r0, r6
 8001404:	3d1f      	subs	r5, #31
 8001406:	40e8      	lsrs	r0, r5
 8001408:	2b20      	cmp	r3, #32
 800140a:	d003      	beq.n	8001414 <__aeabi_dadd+0x3ac>
 800140c:	2140      	movs	r1, #64	; 0x40
 800140e:	1acb      	subs	r3, r1, r3
 8001410:	409e      	lsls	r6, r3
 8001412:	4337      	orrs	r7, r6
 8001414:	1e7b      	subs	r3, r7, #1
 8001416:	419f      	sbcs	r7, r3
 8001418:	2207      	movs	r2, #7
 800141a:	4307      	orrs	r7, r0
 800141c:	403a      	ands	r2, r7
 800141e:	2100      	movs	r1, #0
 8001420:	2500      	movs	r5, #0
 8001422:	e789      	b.n	8001338 <__aeabi_dadd+0x2d0>
 8001424:	1a17      	subs	r7, r2, r0
 8001426:	4643      	mov	r3, r8
 8001428:	42ba      	cmp	r2, r7
 800142a:	41b6      	sbcs	r6, r6
 800142c:	1a59      	subs	r1, r3, r1
 800142e:	4276      	negs	r6, r6
 8001430:	1b8e      	subs	r6, r1, r6
 8001432:	4664      	mov	r4, ip
 8001434:	e64e      	b.n	80010d4 <__aeabi_dadd+0x6c>
 8001436:	2b1f      	cmp	r3, #31
 8001438:	dd00      	ble.n	800143c <__aeabi_dadd+0x3d4>
 800143a:	e0ad      	b.n	8001598 <__aeabi_dadd+0x530>
 800143c:	2620      	movs	r6, #32
 800143e:	4647      	mov	r7, r8
 8001440:	1af6      	subs	r6, r6, r3
 8001442:	40b7      	lsls	r7, r6
 8001444:	46b9      	mov	r9, r7
 8001446:	0017      	movs	r7, r2
 8001448:	46b2      	mov	sl, r6
 800144a:	40df      	lsrs	r7, r3
 800144c:	464e      	mov	r6, r9
 800144e:	433e      	orrs	r6, r7
 8001450:	0037      	movs	r7, r6
 8001452:	4656      	mov	r6, sl
 8001454:	40b2      	lsls	r2, r6
 8001456:	1e56      	subs	r6, r2, #1
 8001458:	41b2      	sbcs	r2, r6
 800145a:	4317      	orrs	r7, r2
 800145c:	4642      	mov	r2, r8
 800145e:	40da      	lsrs	r2, r3
 8001460:	1889      	adds	r1, r1, r2
 8001462:	e6ae      	b.n	80011c2 <__aeabi_dadd+0x15a>
 8001464:	000007ff 	.word	0x000007ff
 8001468:	ff7fffff 	.word	0xff7fffff
 800146c:	800fffff 	.word	0x800fffff
 8001470:	2620      	movs	r6, #32
 8001472:	4647      	mov	r7, r8
 8001474:	1af6      	subs	r6, r6, r3
 8001476:	40b7      	lsls	r7, r6
 8001478:	46b9      	mov	r9, r7
 800147a:	0017      	movs	r7, r2
 800147c:	46b2      	mov	sl, r6
 800147e:	40df      	lsrs	r7, r3
 8001480:	464e      	mov	r6, r9
 8001482:	433e      	orrs	r6, r7
 8001484:	0037      	movs	r7, r6
 8001486:	4656      	mov	r6, sl
 8001488:	40b2      	lsls	r2, r6
 800148a:	1e56      	subs	r6, r2, #1
 800148c:	41b2      	sbcs	r2, r6
 800148e:	4317      	orrs	r7, r2
 8001490:	4642      	mov	r2, r8
 8001492:	40da      	lsrs	r2, r3
 8001494:	1a89      	subs	r1, r1, r2
 8001496:	e799      	b.n	80013cc <__aeabi_dadd+0x364>
 8001498:	4c7f      	ldr	r4, [pc, #508]	; (8001698 <__aeabi_dadd+0x630>)
 800149a:	42a6      	cmp	r6, r4
 800149c:	d05b      	beq.n	8001556 <__aeabi_dadd+0x4ee>
 800149e:	2480      	movs	r4, #128	; 0x80
 80014a0:	0424      	lsls	r4, r4, #16
 80014a2:	425b      	negs	r3, r3
 80014a4:	4321      	orrs	r1, r4
 80014a6:	e727      	b.n	80012f8 <__aeabi_dadd+0x290>
 80014a8:	2e00      	cmp	r6, #0
 80014aa:	d10c      	bne.n	80014c6 <__aeabi_dadd+0x45e>
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d100      	bne.n	80014b2 <__aeabi_dadd+0x44a>
 80014b0:	e0cb      	b.n	800164a <__aeabi_dadd+0x5e2>
 80014b2:	4664      	mov	r4, ip
 80014b4:	0039      	movs	r1, r7
 80014b6:	0010      	movs	r0, r2
 80014b8:	4d77      	ldr	r5, [pc, #476]	; (8001698 <__aeabi_dadd+0x630>)
 80014ba:	e6d7      	b.n	800126c <__aeabi_dadd+0x204>
 80014bc:	4f76      	ldr	r7, [pc, #472]	; (8001698 <__aeabi_dadd+0x630>)
 80014be:	42bb      	cmp	r3, r7
 80014c0:	d018      	beq.n	80014f4 <__aeabi_dadd+0x48c>
 80014c2:	0033      	movs	r3, r6
 80014c4:	e675      	b.n	80011b2 <__aeabi_dadd+0x14a>
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d014      	beq.n	80014f4 <__aeabi_dadd+0x48c>
 80014ca:	074b      	lsls	r3, r1, #29
 80014cc:	08c0      	lsrs	r0, r0, #3
 80014ce:	4318      	orrs	r0, r3
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	08c9      	lsrs	r1, r1, #3
 80014d4:	031b      	lsls	r3, r3, #12
 80014d6:	4219      	tst	r1, r3
 80014d8:	d007      	beq.n	80014ea <__aeabi_dadd+0x482>
 80014da:	08fc      	lsrs	r4, r7, #3
 80014dc:	421c      	tst	r4, r3
 80014de:	d104      	bne.n	80014ea <__aeabi_dadd+0x482>
 80014e0:	0779      	lsls	r1, r7, #29
 80014e2:	08d0      	lsrs	r0, r2, #3
 80014e4:	4308      	orrs	r0, r1
 80014e6:	46e1      	mov	r9, ip
 80014e8:	0021      	movs	r1, r4
 80014ea:	464c      	mov	r4, r9
 80014ec:	0f42      	lsrs	r2, r0, #29
 80014ee:	00c9      	lsls	r1, r1, #3
 80014f0:	4311      	orrs	r1, r2
 80014f2:	00c0      	lsls	r0, r0, #3
 80014f4:	4d68      	ldr	r5, [pc, #416]	; (8001698 <__aeabi_dadd+0x630>)
 80014f6:	e6b9      	b.n	800126c <__aeabi_dadd+0x204>
 80014f8:	001d      	movs	r5, r3
 80014fa:	2200      	movs	r2, #0
 80014fc:	2300      	movs	r3, #0
 80014fe:	e6c0      	b.n	8001282 <__aeabi_dadd+0x21a>
 8001500:	2d00      	cmp	r5, #0
 8001502:	d15b      	bne.n	80015bc <__aeabi_dadd+0x554>
 8001504:	000d      	movs	r5, r1
 8001506:	4305      	orrs	r5, r0
 8001508:	d100      	bne.n	800150c <__aeabi_dadd+0x4a4>
 800150a:	e6e2      	b.n	80012d2 <__aeabi_dadd+0x26a>
 800150c:	1c5d      	adds	r5, r3, #1
 800150e:	d100      	bne.n	8001512 <__aeabi_dadd+0x4aa>
 8001510:	e0b0      	b.n	8001674 <__aeabi_dadd+0x60c>
 8001512:	4d61      	ldr	r5, [pc, #388]	; (8001698 <__aeabi_dadd+0x630>)
 8001514:	42ae      	cmp	r6, r5
 8001516:	d01f      	beq.n	8001558 <__aeabi_dadd+0x4f0>
 8001518:	43db      	mvns	r3, r3
 800151a:	2b38      	cmp	r3, #56	; 0x38
 800151c:	dc71      	bgt.n	8001602 <__aeabi_dadd+0x59a>
 800151e:	2b1f      	cmp	r3, #31
 8001520:	dd00      	ble.n	8001524 <__aeabi_dadd+0x4bc>
 8001522:	e096      	b.n	8001652 <__aeabi_dadd+0x5ea>
 8001524:	2520      	movs	r5, #32
 8001526:	000f      	movs	r7, r1
 8001528:	1aed      	subs	r5, r5, r3
 800152a:	40af      	lsls	r7, r5
 800152c:	46b9      	mov	r9, r7
 800152e:	0007      	movs	r7, r0
 8001530:	46aa      	mov	sl, r5
 8001532:	40df      	lsrs	r7, r3
 8001534:	464d      	mov	r5, r9
 8001536:	433d      	orrs	r5, r7
 8001538:	002f      	movs	r7, r5
 800153a:	4655      	mov	r5, sl
 800153c:	40a8      	lsls	r0, r5
 800153e:	40d9      	lsrs	r1, r3
 8001540:	1e45      	subs	r5, r0, #1
 8001542:	41a8      	sbcs	r0, r5
 8001544:	4488      	add	r8, r1
 8001546:	4307      	orrs	r7, r0
 8001548:	18bf      	adds	r7, r7, r2
 800154a:	4297      	cmp	r7, r2
 800154c:	4192      	sbcs	r2, r2
 800154e:	4251      	negs	r1, r2
 8001550:	4441      	add	r1, r8
 8001552:	0035      	movs	r5, r6
 8001554:	e63a      	b.n	80011cc <__aeabi_dadd+0x164>
 8001556:	4664      	mov	r4, ip
 8001558:	0035      	movs	r5, r6
 800155a:	4641      	mov	r1, r8
 800155c:	0010      	movs	r0, r2
 800155e:	e685      	b.n	800126c <__aeabi_dadd+0x204>
 8001560:	000b      	movs	r3, r1
 8001562:	4303      	orrs	r3, r0
 8001564:	2d00      	cmp	r5, #0
 8001566:	d000      	beq.n	800156a <__aeabi_dadd+0x502>
 8001568:	e663      	b.n	8001232 <__aeabi_dadd+0x1ca>
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f5      	beq.n	800155a <__aeabi_dadd+0x4f2>
 800156e:	4643      	mov	r3, r8
 8001570:	4313      	orrs	r3, r2
 8001572:	d100      	bne.n	8001576 <__aeabi_dadd+0x50e>
 8001574:	e67a      	b.n	800126c <__aeabi_dadd+0x204>
 8001576:	1887      	adds	r7, r0, r2
 8001578:	4287      	cmp	r7, r0
 800157a:	4180      	sbcs	r0, r0
 800157c:	2207      	movs	r2, #7
 800157e:	4441      	add	r1, r8
 8001580:	4240      	negs	r0, r0
 8001582:	1809      	adds	r1, r1, r0
 8001584:	403a      	ands	r2, r7
 8001586:	020b      	lsls	r3, r1, #8
 8001588:	d400      	bmi.n	800158c <__aeabi_dadd+0x524>
 800158a:	e6d5      	b.n	8001338 <__aeabi_dadd+0x2d0>
 800158c:	4b43      	ldr	r3, [pc, #268]	; (800169c <__aeabi_dadd+0x634>)
 800158e:	3501      	adds	r5, #1
 8001590:	4019      	ands	r1, r3
 8001592:	e5c9      	b.n	8001128 <__aeabi_dadd+0xc0>
 8001594:	0038      	movs	r0, r7
 8001596:	e669      	b.n	800126c <__aeabi_dadd+0x204>
 8001598:	001e      	movs	r6, r3
 800159a:	4647      	mov	r7, r8
 800159c:	3e20      	subs	r6, #32
 800159e:	40f7      	lsrs	r7, r6
 80015a0:	46bc      	mov	ip, r7
 80015a2:	2b20      	cmp	r3, #32
 80015a4:	d004      	beq.n	80015b0 <__aeabi_dadd+0x548>
 80015a6:	2640      	movs	r6, #64	; 0x40
 80015a8:	1af3      	subs	r3, r6, r3
 80015aa:	4646      	mov	r6, r8
 80015ac:	409e      	lsls	r6, r3
 80015ae:	4332      	orrs	r2, r6
 80015b0:	0017      	movs	r7, r2
 80015b2:	4663      	mov	r3, ip
 80015b4:	1e7a      	subs	r2, r7, #1
 80015b6:	4197      	sbcs	r7, r2
 80015b8:	431f      	orrs	r7, r3
 80015ba:	e602      	b.n	80011c2 <__aeabi_dadd+0x15a>
 80015bc:	4d36      	ldr	r5, [pc, #216]	; (8001698 <__aeabi_dadd+0x630>)
 80015be:	42ae      	cmp	r6, r5
 80015c0:	d0ca      	beq.n	8001558 <__aeabi_dadd+0x4f0>
 80015c2:	2580      	movs	r5, #128	; 0x80
 80015c4:	042d      	lsls	r5, r5, #16
 80015c6:	425b      	negs	r3, r3
 80015c8:	4329      	orrs	r1, r5
 80015ca:	e7a6      	b.n	800151a <__aeabi_dadd+0x4b2>
 80015cc:	4308      	orrs	r0, r1
 80015ce:	1e41      	subs	r1, r0, #1
 80015d0:	4188      	sbcs	r0, r1
 80015d2:	e6a6      	b.n	8001322 <__aeabi_dadd+0x2ba>
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d100      	bne.n	80015da <__aeabi_dadd+0x572>
 80015d8:	e648      	b.n	800126c <__aeabi_dadd+0x204>
 80015da:	1a87      	subs	r7, r0, r2
 80015dc:	4643      	mov	r3, r8
 80015de:	42b8      	cmp	r0, r7
 80015e0:	41b6      	sbcs	r6, r6
 80015e2:	1acb      	subs	r3, r1, r3
 80015e4:	4276      	negs	r6, r6
 80015e6:	1b9e      	subs	r6, r3, r6
 80015e8:	0233      	lsls	r3, r6, #8
 80015ea:	d54b      	bpl.n	8001684 <__aeabi_dadd+0x61c>
 80015ec:	1a17      	subs	r7, r2, r0
 80015ee:	4643      	mov	r3, r8
 80015f0:	42ba      	cmp	r2, r7
 80015f2:	4192      	sbcs	r2, r2
 80015f4:	1a59      	subs	r1, r3, r1
 80015f6:	4252      	negs	r2, r2
 80015f8:	1a89      	subs	r1, r1, r2
 80015fa:	2207      	movs	r2, #7
 80015fc:	4664      	mov	r4, ip
 80015fe:	403a      	ands	r2, r7
 8001600:	e592      	b.n	8001128 <__aeabi_dadd+0xc0>
 8001602:	4301      	orrs	r1, r0
 8001604:	000f      	movs	r7, r1
 8001606:	1e79      	subs	r1, r7, #1
 8001608:	418f      	sbcs	r7, r1
 800160a:	e79d      	b.n	8001548 <__aeabi_dadd+0x4e0>
 800160c:	001c      	movs	r4, r3
 800160e:	000f      	movs	r7, r1
 8001610:	3c20      	subs	r4, #32
 8001612:	40e7      	lsrs	r7, r4
 8001614:	2b20      	cmp	r3, #32
 8001616:	d003      	beq.n	8001620 <__aeabi_dadd+0x5b8>
 8001618:	2440      	movs	r4, #64	; 0x40
 800161a:	1ae3      	subs	r3, r4, r3
 800161c:	4099      	lsls	r1, r3
 800161e:	4308      	orrs	r0, r1
 8001620:	1e41      	subs	r1, r0, #1
 8001622:	4188      	sbcs	r0, r1
 8001624:	4338      	orrs	r0, r7
 8001626:	e67c      	b.n	8001322 <__aeabi_dadd+0x2ba>
 8001628:	2200      	movs	r2, #0
 800162a:	2400      	movs	r4, #0
 800162c:	e625      	b.n	800127a <__aeabi_dadd+0x212>
 800162e:	1a17      	subs	r7, r2, r0
 8001630:	4643      	mov	r3, r8
 8001632:	42ba      	cmp	r2, r7
 8001634:	4192      	sbcs	r2, r2
 8001636:	1a59      	subs	r1, r3, r1
 8001638:	4252      	negs	r2, r2
 800163a:	1a89      	subs	r1, r1, r2
 800163c:	4664      	mov	r4, ip
 800163e:	0035      	movs	r5, r6
 8001640:	e543      	b.n	80010ca <__aeabi_dadd+0x62>
 8001642:	4641      	mov	r1, r8
 8001644:	0010      	movs	r0, r2
 8001646:	4d14      	ldr	r5, [pc, #80]	; (8001698 <__aeabi_dadd+0x630>)
 8001648:	e610      	b.n	800126c <__aeabi_dadd+0x204>
 800164a:	2280      	movs	r2, #128	; 0x80
 800164c:	2400      	movs	r4, #0
 800164e:	0312      	lsls	r2, r2, #12
 8001650:	e680      	b.n	8001354 <__aeabi_dadd+0x2ec>
 8001652:	001d      	movs	r5, r3
 8001654:	000f      	movs	r7, r1
 8001656:	3d20      	subs	r5, #32
 8001658:	40ef      	lsrs	r7, r5
 800165a:	46bc      	mov	ip, r7
 800165c:	2b20      	cmp	r3, #32
 800165e:	d003      	beq.n	8001668 <__aeabi_dadd+0x600>
 8001660:	2540      	movs	r5, #64	; 0x40
 8001662:	1aeb      	subs	r3, r5, r3
 8001664:	4099      	lsls	r1, r3
 8001666:	4308      	orrs	r0, r1
 8001668:	0007      	movs	r7, r0
 800166a:	4663      	mov	r3, ip
 800166c:	1e78      	subs	r0, r7, #1
 800166e:	4187      	sbcs	r7, r0
 8001670:	431f      	orrs	r7, r3
 8001672:	e769      	b.n	8001548 <__aeabi_dadd+0x4e0>
 8001674:	1887      	adds	r7, r0, r2
 8001676:	4297      	cmp	r7, r2
 8001678:	419b      	sbcs	r3, r3
 800167a:	4441      	add	r1, r8
 800167c:	425b      	negs	r3, r3
 800167e:	18c9      	adds	r1, r1, r3
 8001680:	0035      	movs	r5, r6
 8001682:	e5a3      	b.n	80011cc <__aeabi_dadd+0x164>
 8001684:	003b      	movs	r3, r7
 8001686:	4333      	orrs	r3, r6
 8001688:	d0ce      	beq.n	8001628 <__aeabi_dadd+0x5c0>
 800168a:	2207      	movs	r2, #7
 800168c:	0031      	movs	r1, r6
 800168e:	403a      	ands	r2, r7
 8001690:	e652      	b.n	8001338 <__aeabi_dadd+0x2d0>
 8001692:	2300      	movs	r3, #0
 8001694:	001a      	movs	r2, r3
 8001696:	e5f4      	b.n	8001282 <__aeabi_dadd+0x21a>
 8001698:	000007ff 	.word	0x000007ff
 800169c:	ff7fffff 	.word	0xff7fffff

080016a0 <__aeabi_ddiv>:
 80016a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a2:	4657      	mov	r7, sl
 80016a4:	46de      	mov	lr, fp
 80016a6:	464e      	mov	r6, r9
 80016a8:	4645      	mov	r5, r8
 80016aa:	b5e0      	push	{r5, r6, r7, lr}
 80016ac:	4683      	mov	fp, r0
 80016ae:	0007      	movs	r7, r0
 80016b0:	030e      	lsls	r6, r1, #12
 80016b2:	0048      	lsls	r0, r1, #1
 80016b4:	b085      	sub	sp, #20
 80016b6:	4692      	mov	sl, r2
 80016b8:	001c      	movs	r4, r3
 80016ba:	0b36      	lsrs	r6, r6, #12
 80016bc:	0d40      	lsrs	r0, r0, #21
 80016be:	0fcd      	lsrs	r5, r1, #31
 80016c0:	2800      	cmp	r0, #0
 80016c2:	d100      	bne.n	80016c6 <__aeabi_ddiv+0x26>
 80016c4:	e09d      	b.n	8001802 <__aeabi_ddiv+0x162>
 80016c6:	4b95      	ldr	r3, [pc, #596]	; (800191c <__aeabi_ddiv+0x27c>)
 80016c8:	4298      	cmp	r0, r3
 80016ca:	d039      	beq.n	8001740 <__aeabi_ddiv+0xa0>
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	00f6      	lsls	r6, r6, #3
 80016d0:	041b      	lsls	r3, r3, #16
 80016d2:	431e      	orrs	r6, r3
 80016d4:	4a92      	ldr	r2, [pc, #584]	; (8001920 <__aeabi_ddiv+0x280>)
 80016d6:	0f7b      	lsrs	r3, r7, #29
 80016d8:	4333      	orrs	r3, r6
 80016da:	4699      	mov	r9, r3
 80016dc:	4694      	mov	ip, r2
 80016de:	0003      	movs	r3, r0
 80016e0:	4463      	add	r3, ip
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	2300      	movs	r3, #0
 80016e6:	2600      	movs	r6, #0
 80016e8:	00ff      	lsls	r7, r7, #3
 80016ea:	9302      	str	r3, [sp, #8]
 80016ec:	0323      	lsls	r3, r4, #12
 80016ee:	0b1b      	lsrs	r3, r3, #12
 80016f0:	4698      	mov	r8, r3
 80016f2:	0063      	lsls	r3, r4, #1
 80016f4:	0fe4      	lsrs	r4, r4, #31
 80016f6:	4652      	mov	r2, sl
 80016f8:	0d5b      	lsrs	r3, r3, #21
 80016fa:	9401      	str	r4, [sp, #4]
 80016fc:	d100      	bne.n	8001700 <__aeabi_ddiv+0x60>
 80016fe:	e0b3      	b.n	8001868 <__aeabi_ddiv+0x1c8>
 8001700:	4986      	ldr	r1, [pc, #536]	; (800191c <__aeabi_ddiv+0x27c>)
 8001702:	428b      	cmp	r3, r1
 8001704:	d100      	bne.n	8001708 <__aeabi_ddiv+0x68>
 8001706:	e09e      	b.n	8001846 <__aeabi_ddiv+0x1a6>
 8001708:	4642      	mov	r2, r8
 800170a:	00d1      	lsls	r1, r2, #3
 800170c:	2280      	movs	r2, #128	; 0x80
 800170e:	0412      	lsls	r2, r2, #16
 8001710:	430a      	orrs	r2, r1
 8001712:	4651      	mov	r1, sl
 8001714:	0f49      	lsrs	r1, r1, #29
 8001716:	4311      	orrs	r1, r2
 8001718:	468b      	mov	fp, r1
 800171a:	4981      	ldr	r1, [pc, #516]	; (8001920 <__aeabi_ddiv+0x280>)
 800171c:	4652      	mov	r2, sl
 800171e:	468c      	mov	ip, r1
 8001720:	9900      	ldr	r1, [sp, #0]
 8001722:	4463      	add	r3, ip
 8001724:	1acb      	subs	r3, r1, r3
 8001726:	2100      	movs	r1, #0
 8001728:	00d2      	lsls	r2, r2, #3
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	002b      	movs	r3, r5
 800172e:	4063      	eors	r3, r4
 8001730:	469a      	mov	sl, r3
 8001732:	2e0f      	cmp	r6, #15
 8001734:	d900      	bls.n	8001738 <__aeabi_ddiv+0x98>
 8001736:	e105      	b.n	8001944 <__aeabi_ddiv+0x2a4>
 8001738:	4b7a      	ldr	r3, [pc, #488]	; (8001924 <__aeabi_ddiv+0x284>)
 800173a:	00b6      	lsls	r6, r6, #2
 800173c:	599b      	ldr	r3, [r3, r6]
 800173e:	469f      	mov	pc, r3
 8001740:	465b      	mov	r3, fp
 8001742:	4333      	orrs	r3, r6
 8001744:	4699      	mov	r9, r3
 8001746:	d000      	beq.n	800174a <__aeabi_ddiv+0xaa>
 8001748:	e0b8      	b.n	80018bc <__aeabi_ddiv+0x21c>
 800174a:	2302      	movs	r3, #2
 800174c:	2608      	movs	r6, #8
 800174e:	2700      	movs	r7, #0
 8001750:	9000      	str	r0, [sp, #0]
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	e7ca      	b.n	80016ec <__aeabi_ddiv+0x4c>
 8001756:	46cb      	mov	fp, r9
 8001758:	003a      	movs	r2, r7
 800175a:	9902      	ldr	r1, [sp, #8]
 800175c:	9501      	str	r5, [sp, #4]
 800175e:	9b01      	ldr	r3, [sp, #4]
 8001760:	469a      	mov	sl, r3
 8001762:	2902      	cmp	r1, #2
 8001764:	d027      	beq.n	80017b6 <__aeabi_ddiv+0x116>
 8001766:	2903      	cmp	r1, #3
 8001768:	d100      	bne.n	800176c <__aeabi_ddiv+0xcc>
 800176a:	e280      	b.n	8001c6e <__aeabi_ddiv+0x5ce>
 800176c:	2901      	cmp	r1, #1
 800176e:	d044      	beq.n	80017fa <__aeabi_ddiv+0x15a>
 8001770:	496d      	ldr	r1, [pc, #436]	; (8001928 <__aeabi_ddiv+0x288>)
 8001772:	9b00      	ldr	r3, [sp, #0]
 8001774:	468c      	mov	ip, r1
 8001776:	4463      	add	r3, ip
 8001778:	001c      	movs	r4, r3
 800177a:	2c00      	cmp	r4, #0
 800177c:	dd38      	ble.n	80017f0 <__aeabi_ddiv+0x150>
 800177e:	0753      	lsls	r3, r2, #29
 8001780:	d000      	beq.n	8001784 <__aeabi_ddiv+0xe4>
 8001782:	e213      	b.n	8001bac <__aeabi_ddiv+0x50c>
 8001784:	08d2      	lsrs	r2, r2, #3
 8001786:	465b      	mov	r3, fp
 8001788:	01db      	lsls	r3, r3, #7
 800178a:	d509      	bpl.n	80017a0 <__aeabi_ddiv+0x100>
 800178c:	4659      	mov	r1, fp
 800178e:	4b67      	ldr	r3, [pc, #412]	; (800192c <__aeabi_ddiv+0x28c>)
 8001790:	4019      	ands	r1, r3
 8001792:	468b      	mov	fp, r1
 8001794:	2180      	movs	r1, #128	; 0x80
 8001796:	00c9      	lsls	r1, r1, #3
 8001798:	468c      	mov	ip, r1
 800179a:	9b00      	ldr	r3, [sp, #0]
 800179c:	4463      	add	r3, ip
 800179e:	001c      	movs	r4, r3
 80017a0:	4b63      	ldr	r3, [pc, #396]	; (8001930 <__aeabi_ddiv+0x290>)
 80017a2:	429c      	cmp	r4, r3
 80017a4:	dc07      	bgt.n	80017b6 <__aeabi_ddiv+0x116>
 80017a6:	465b      	mov	r3, fp
 80017a8:	0564      	lsls	r4, r4, #21
 80017aa:	075f      	lsls	r7, r3, #29
 80017ac:	025b      	lsls	r3, r3, #9
 80017ae:	4317      	orrs	r7, r2
 80017b0:	0b1b      	lsrs	r3, r3, #12
 80017b2:	0d62      	lsrs	r2, r4, #21
 80017b4:	e002      	b.n	80017bc <__aeabi_ddiv+0x11c>
 80017b6:	2300      	movs	r3, #0
 80017b8:	2700      	movs	r7, #0
 80017ba:	4a58      	ldr	r2, [pc, #352]	; (800191c <__aeabi_ddiv+0x27c>)
 80017bc:	2100      	movs	r1, #0
 80017be:	031b      	lsls	r3, r3, #12
 80017c0:	0b1c      	lsrs	r4, r3, #12
 80017c2:	0d0b      	lsrs	r3, r1, #20
 80017c4:	051b      	lsls	r3, r3, #20
 80017c6:	4323      	orrs	r3, r4
 80017c8:	0514      	lsls	r4, r2, #20
 80017ca:	4a5a      	ldr	r2, [pc, #360]	; (8001934 <__aeabi_ddiv+0x294>)
 80017cc:	0038      	movs	r0, r7
 80017ce:	4013      	ands	r3, r2
 80017d0:	431c      	orrs	r4, r3
 80017d2:	4653      	mov	r3, sl
 80017d4:	0064      	lsls	r4, r4, #1
 80017d6:	07db      	lsls	r3, r3, #31
 80017d8:	0864      	lsrs	r4, r4, #1
 80017da:	431c      	orrs	r4, r3
 80017dc:	0021      	movs	r1, r4
 80017de:	b005      	add	sp, #20
 80017e0:	bc3c      	pop	{r2, r3, r4, r5}
 80017e2:	4690      	mov	r8, r2
 80017e4:	4699      	mov	r9, r3
 80017e6:	46a2      	mov	sl, r4
 80017e8:	46ab      	mov	fp, r5
 80017ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ec:	2201      	movs	r2, #1
 80017ee:	4252      	negs	r2, r2
 80017f0:	2301      	movs	r3, #1
 80017f2:	1b1b      	subs	r3, r3, r4
 80017f4:	2b38      	cmp	r3, #56	; 0x38
 80017f6:	dc00      	bgt.n	80017fa <__aeabi_ddiv+0x15a>
 80017f8:	e1ad      	b.n	8001b56 <__aeabi_ddiv+0x4b6>
 80017fa:	2200      	movs	r2, #0
 80017fc:	2300      	movs	r3, #0
 80017fe:	2700      	movs	r7, #0
 8001800:	e7dc      	b.n	80017bc <__aeabi_ddiv+0x11c>
 8001802:	465b      	mov	r3, fp
 8001804:	4333      	orrs	r3, r6
 8001806:	4699      	mov	r9, r3
 8001808:	d05e      	beq.n	80018c8 <__aeabi_ddiv+0x228>
 800180a:	2e00      	cmp	r6, #0
 800180c:	d100      	bne.n	8001810 <__aeabi_ddiv+0x170>
 800180e:	e18a      	b.n	8001b26 <__aeabi_ddiv+0x486>
 8001810:	0030      	movs	r0, r6
 8001812:	f001 fa4b 	bl	8002cac <__clzsi2>
 8001816:	0003      	movs	r3, r0
 8001818:	3b0b      	subs	r3, #11
 800181a:	2b1c      	cmp	r3, #28
 800181c:	dd00      	ble.n	8001820 <__aeabi_ddiv+0x180>
 800181e:	e17b      	b.n	8001b18 <__aeabi_ddiv+0x478>
 8001820:	221d      	movs	r2, #29
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	465a      	mov	r2, fp
 8001826:	0001      	movs	r1, r0
 8001828:	40da      	lsrs	r2, r3
 800182a:	3908      	subs	r1, #8
 800182c:	408e      	lsls	r6, r1
 800182e:	0013      	movs	r3, r2
 8001830:	465f      	mov	r7, fp
 8001832:	4333      	orrs	r3, r6
 8001834:	4699      	mov	r9, r3
 8001836:	408f      	lsls	r7, r1
 8001838:	4b3f      	ldr	r3, [pc, #252]	; (8001938 <__aeabi_ddiv+0x298>)
 800183a:	2600      	movs	r6, #0
 800183c:	1a1b      	subs	r3, r3, r0
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	2300      	movs	r3, #0
 8001842:	9302      	str	r3, [sp, #8]
 8001844:	e752      	b.n	80016ec <__aeabi_ddiv+0x4c>
 8001846:	4641      	mov	r1, r8
 8001848:	4653      	mov	r3, sl
 800184a:	430b      	orrs	r3, r1
 800184c:	493b      	ldr	r1, [pc, #236]	; (800193c <__aeabi_ddiv+0x29c>)
 800184e:	469b      	mov	fp, r3
 8001850:	468c      	mov	ip, r1
 8001852:	9b00      	ldr	r3, [sp, #0]
 8001854:	4463      	add	r3, ip
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	465b      	mov	r3, fp
 800185a:	2b00      	cmp	r3, #0
 800185c:	d13b      	bne.n	80018d6 <__aeabi_ddiv+0x236>
 800185e:	2302      	movs	r3, #2
 8001860:	2200      	movs	r2, #0
 8001862:	431e      	orrs	r6, r3
 8001864:	2102      	movs	r1, #2
 8001866:	e761      	b.n	800172c <__aeabi_ddiv+0x8c>
 8001868:	4643      	mov	r3, r8
 800186a:	4313      	orrs	r3, r2
 800186c:	469b      	mov	fp, r3
 800186e:	d037      	beq.n	80018e0 <__aeabi_ddiv+0x240>
 8001870:	4643      	mov	r3, r8
 8001872:	2b00      	cmp	r3, #0
 8001874:	d100      	bne.n	8001878 <__aeabi_ddiv+0x1d8>
 8001876:	e162      	b.n	8001b3e <__aeabi_ddiv+0x49e>
 8001878:	4640      	mov	r0, r8
 800187a:	f001 fa17 	bl	8002cac <__clzsi2>
 800187e:	0003      	movs	r3, r0
 8001880:	3b0b      	subs	r3, #11
 8001882:	2b1c      	cmp	r3, #28
 8001884:	dd00      	ble.n	8001888 <__aeabi_ddiv+0x1e8>
 8001886:	e153      	b.n	8001b30 <__aeabi_ddiv+0x490>
 8001888:	0002      	movs	r2, r0
 800188a:	4641      	mov	r1, r8
 800188c:	3a08      	subs	r2, #8
 800188e:	4091      	lsls	r1, r2
 8001890:	4688      	mov	r8, r1
 8001892:	211d      	movs	r1, #29
 8001894:	1acb      	subs	r3, r1, r3
 8001896:	4651      	mov	r1, sl
 8001898:	40d9      	lsrs	r1, r3
 800189a:	000b      	movs	r3, r1
 800189c:	4641      	mov	r1, r8
 800189e:	430b      	orrs	r3, r1
 80018a0:	469b      	mov	fp, r3
 80018a2:	4653      	mov	r3, sl
 80018a4:	4093      	lsls	r3, r2
 80018a6:	001a      	movs	r2, r3
 80018a8:	9b00      	ldr	r3, [sp, #0]
 80018aa:	4925      	ldr	r1, [pc, #148]	; (8001940 <__aeabi_ddiv+0x2a0>)
 80018ac:	469c      	mov	ip, r3
 80018ae:	4460      	add	r0, ip
 80018b0:	0003      	movs	r3, r0
 80018b2:	468c      	mov	ip, r1
 80018b4:	4463      	add	r3, ip
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	2100      	movs	r1, #0
 80018ba:	e737      	b.n	800172c <__aeabi_ddiv+0x8c>
 80018bc:	2303      	movs	r3, #3
 80018be:	46b1      	mov	r9, r6
 80018c0:	9000      	str	r0, [sp, #0]
 80018c2:	260c      	movs	r6, #12
 80018c4:	9302      	str	r3, [sp, #8]
 80018c6:	e711      	b.n	80016ec <__aeabi_ddiv+0x4c>
 80018c8:	2300      	movs	r3, #0
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	3301      	adds	r3, #1
 80018ce:	2604      	movs	r6, #4
 80018d0:	2700      	movs	r7, #0
 80018d2:	9302      	str	r3, [sp, #8]
 80018d4:	e70a      	b.n	80016ec <__aeabi_ddiv+0x4c>
 80018d6:	2303      	movs	r3, #3
 80018d8:	46c3      	mov	fp, r8
 80018da:	431e      	orrs	r6, r3
 80018dc:	2103      	movs	r1, #3
 80018de:	e725      	b.n	800172c <__aeabi_ddiv+0x8c>
 80018e0:	3301      	adds	r3, #1
 80018e2:	431e      	orrs	r6, r3
 80018e4:	2200      	movs	r2, #0
 80018e6:	2101      	movs	r1, #1
 80018e8:	e720      	b.n	800172c <__aeabi_ddiv+0x8c>
 80018ea:	2300      	movs	r3, #0
 80018ec:	469a      	mov	sl, r3
 80018ee:	2380      	movs	r3, #128	; 0x80
 80018f0:	2700      	movs	r7, #0
 80018f2:	031b      	lsls	r3, r3, #12
 80018f4:	4a09      	ldr	r2, [pc, #36]	; (800191c <__aeabi_ddiv+0x27c>)
 80018f6:	e761      	b.n	80017bc <__aeabi_ddiv+0x11c>
 80018f8:	2380      	movs	r3, #128	; 0x80
 80018fa:	4649      	mov	r1, r9
 80018fc:	031b      	lsls	r3, r3, #12
 80018fe:	4219      	tst	r1, r3
 8001900:	d100      	bne.n	8001904 <__aeabi_ddiv+0x264>
 8001902:	e0e2      	b.n	8001aca <__aeabi_ddiv+0x42a>
 8001904:	4659      	mov	r1, fp
 8001906:	4219      	tst	r1, r3
 8001908:	d000      	beq.n	800190c <__aeabi_ddiv+0x26c>
 800190a:	e0de      	b.n	8001aca <__aeabi_ddiv+0x42a>
 800190c:	430b      	orrs	r3, r1
 800190e:	031b      	lsls	r3, r3, #12
 8001910:	0017      	movs	r7, r2
 8001912:	0b1b      	lsrs	r3, r3, #12
 8001914:	46a2      	mov	sl, r4
 8001916:	4a01      	ldr	r2, [pc, #4]	; (800191c <__aeabi_ddiv+0x27c>)
 8001918:	e750      	b.n	80017bc <__aeabi_ddiv+0x11c>
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	000007ff 	.word	0x000007ff
 8001920:	fffffc01 	.word	0xfffffc01
 8001924:	0800c34c 	.word	0x0800c34c
 8001928:	000003ff 	.word	0x000003ff
 800192c:	feffffff 	.word	0xfeffffff
 8001930:	000007fe 	.word	0x000007fe
 8001934:	800fffff 	.word	0x800fffff
 8001938:	fffffc0d 	.word	0xfffffc0d
 800193c:	fffff801 	.word	0xfffff801
 8001940:	000003f3 	.word	0x000003f3
 8001944:	45d9      	cmp	r9, fp
 8001946:	d900      	bls.n	800194a <__aeabi_ddiv+0x2aa>
 8001948:	e0cb      	b.n	8001ae2 <__aeabi_ddiv+0x442>
 800194a:	d100      	bne.n	800194e <__aeabi_ddiv+0x2ae>
 800194c:	e0c6      	b.n	8001adc <__aeabi_ddiv+0x43c>
 800194e:	003c      	movs	r4, r7
 8001950:	4648      	mov	r0, r9
 8001952:	2700      	movs	r7, #0
 8001954:	9b00      	ldr	r3, [sp, #0]
 8001956:	3b01      	subs	r3, #1
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	465b      	mov	r3, fp
 800195c:	0e16      	lsrs	r6, r2, #24
 800195e:	021b      	lsls	r3, r3, #8
 8001960:	431e      	orrs	r6, r3
 8001962:	0213      	lsls	r3, r2, #8
 8001964:	4698      	mov	r8, r3
 8001966:	0433      	lsls	r3, r6, #16
 8001968:	0c1b      	lsrs	r3, r3, #16
 800196a:	4699      	mov	r9, r3
 800196c:	0c31      	lsrs	r1, r6, #16
 800196e:	9101      	str	r1, [sp, #4]
 8001970:	f7fe fc6c 	bl	800024c <__aeabi_uidivmod>
 8001974:	464a      	mov	r2, r9
 8001976:	4342      	muls	r2, r0
 8001978:	040b      	lsls	r3, r1, #16
 800197a:	0c21      	lsrs	r1, r4, #16
 800197c:	0005      	movs	r5, r0
 800197e:	4319      	orrs	r1, r3
 8001980:	428a      	cmp	r2, r1
 8001982:	d907      	bls.n	8001994 <__aeabi_ddiv+0x2f4>
 8001984:	1989      	adds	r1, r1, r6
 8001986:	3d01      	subs	r5, #1
 8001988:	428e      	cmp	r6, r1
 800198a:	d803      	bhi.n	8001994 <__aeabi_ddiv+0x2f4>
 800198c:	428a      	cmp	r2, r1
 800198e:	d901      	bls.n	8001994 <__aeabi_ddiv+0x2f4>
 8001990:	1e85      	subs	r5, r0, #2
 8001992:	1989      	adds	r1, r1, r6
 8001994:	1a88      	subs	r0, r1, r2
 8001996:	9901      	ldr	r1, [sp, #4]
 8001998:	f7fe fc58 	bl	800024c <__aeabi_uidivmod>
 800199c:	0409      	lsls	r1, r1, #16
 800199e:	468c      	mov	ip, r1
 80019a0:	464a      	mov	r2, r9
 80019a2:	0421      	lsls	r1, r4, #16
 80019a4:	4664      	mov	r4, ip
 80019a6:	4342      	muls	r2, r0
 80019a8:	0c09      	lsrs	r1, r1, #16
 80019aa:	0003      	movs	r3, r0
 80019ac:	4321      	orrs	r1, r4
 80019ae:	428a      	cmp	r2, r1
 80019b0:	d904      	bls.n	80019bc <__aeabi_ddiv+0x31c>
 80019b2:	1989      	adds	r1, r1, r6
 80019b4:	3b01      	subs	r3, #1
 80019b6:	428e      	cmp	r6, r1
 80019b8:	d800      	bhi.n	80019bc <__aeabi_ddiv+0x31c>
 80019ba:	e0f1      	b.n	8001ba0 <__aeabi_ddiv+0x500>
 80019bc:	042d      	lsls	r5, r5, #16
 80019be:	431d      	orrs	r5, r3
 80019c0:	46ab      	mov	fp, r5
 80019c2:	4643      	mov	r3, r8
 80019c4:	1a89      	subs	r1, r1, r2
 80019c6:	4642      	mov	r2, r8
 80019c8:	0c28      	lsrs	r0, r5, #16
 80019ca:	0412      	lsls	r2, r2, #16
 80019cc:	0c1d      	lsrs	r5, r3, #16
 80019ce:	465b      	mov	r3, fp
 80019d0:	0c14      	lsrs	r4, r2, #16
 80019d2:	0022      	movs	r2, r4
 80019d4:	041b      	lsls	r3, r3, #16
 80019d6:	0c1b      	lsrs	r3, r3, #16
 80019d8:	435a      	muls	r2, r3
 80019da:	9403      	str	r4, [sp, #12]
 80019dc:	436b      	muls	r3, r5
 80019de:	4344      	muls	r4, r0
 80019e0:	9502      	str	r5, [sp, #8]
 80019e2:	4368      	muls	r0, r5
 80019e4:	191b      	adds	r3, r3, r4
 80019e6:	0c15      	lsrs	r5, r2, #16
 80019e8:	18eb      	adds	r3, r5, r3
 80019ea:	429c      	cmp	r4, r3
 80019ec:	d903      	bls.n	80019f6 <__aeabi_ddiv+0x356>
 80019ee:	2480      	movs	r4, #128	; 0x80
 80019f0:	0264      	lsls	r4, r4, #9
 80019f2:	46a4      	mov	ip, r4
 80019f4:	4460      	add	r0, ip
 80019f6:	0c1c      	lsrs	r4, r3, #16
 80019f8:	0415      	lsls	r5, r2, #16
 80019fa:	041b      	lsls	r3, r3, #16
 80019fc:	0c2d      	lsrs	r5, r5, #16
 80019fe:	1820      	adds	r0, r4, r0
 8001a00:	195d      	adds	r5, r3, r5
 8001a02:	4281      	cmp	r1, r0
 8001a04:	d377      	bcc.n	8001af6 <__aeabi_ddiv+0x456>
 8001a06:	d073      	beq.n	8001af0 <__aeabi_ddiv+0x450>
 8001a08:	1a0c      	subs	r4, r1, r0
 8001a0a:	4aa2      	ldr	r2, [pc, #648]	; (8001c94 <__aeabi_ddiv+0x5f4>)
 8001a0c:	1b7d      	subs	r5, r7, r5
 8001a0e:	42af      	cmp	r7, r5
 8001a10:	41bf      	sbcs	r7, r7
 8001a12:	4694      	mov	ip, r2
 8001a14:	9b00      	ldr	r3, [sp, #0]
 8001a16:	427f      	negs	r7, r7
 8001a18:	4463      	add	r3, ip
 8001a1a:	1be0      	subs	r0, r4, r7
 8001a1c:	001c      	movs	r4, r3
 8001a1e:	4286      	cmp	r6, r0
 8001a20:	d100      	bne.n	8001a24 <__aeabi_ddiv+0x384>
 8001a22:	e0db      	b.n	8001bdc <__aeabi_ddiv+0x53c>
 8001a24:	9901      	ldr	r1, [sp, #4]
 8001a26:	f7fe fc11 	bl	800024c <__aeabi_uidivmod>
 8001a2a:	464a      	mov	r2, r9
 8001a2c:	4342      	muls	r2, r0
 8001a2e:	040b      	lsls	r3, r1, #16
 8001a30:	0c29      	lsrs	r1, r5, #16
 8001a32:	0007      	movs	r7, r0
 8001a34:	4319      	orrs	r1, r3
 8001a36:	428a      	cmp	r2, r1
 8001a38:	d907      	bls.n	8001a4a <__aeabi_ddiv+0x3aa>
 8001a3a:	1989      	adds	r1, r1, r6
 8001a3c:	3f01      	subs	r7, #1
 8001a3e:	428e      	cmp	r6, r1
 8001a40:	d803      	bhi.n	8001a4a <__aeabi_ddiv+0x3aa>
 8001a42:	428a      	cmp	r2, r1
 8001a44:	d901      	bls.n	8001a4a <__aeabi_ddiv+0x3aa>
 8001a46:	1e87      	subs	r7, r0, #2
 8001a48:	1989      	adds	r1, r1, r6
 8001a4a:	1a88      	subs	r0, r1, r2
 8001a4c:	9901      	ldr	r1, [sp, #4]
 8001a4e:	f7fe fbfd 	bl	800024c <__aeabi_uidivmod>
 8001a52:	0409      	lsls	r1, r1, #16
 8001a54:	464a      	mov	r2, r9
 8001a56:	4689      	mov	r9, r1
 8001a58:	0429      	lsls	r1, r5, #16
 8001a5a:	464d      	mov	r5, r9
 8001a5c:	4342      	muls	r2, r0
 8001a5e:	0c09      	lsrs	r1, r1, #16
 8001a60:	0003      	movs	r3, r0
 8001a62:	4329      	orrs	r1, r5
 8001a64:	428a      	cmp	r2, r1
 8001a66:	d907      	bls.n	8001a78 <__aeabi_ddiv+0x3d8>
 8001a68:	1989      	adds	r1, r1, r6
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	428e      	cmp	r6, r1
 8001a6e:	d803      	bhi.n	8001a78 <__aeabi_ddiv+0x3d8>
 8001a70:	428a      	cmp	r2, r1
 8001a72:	d901      	bls.n	8001a78 <__aeabi_ddiv+0x3d8>
 8001a74:	1e83      	subs	r3, r0, #2
 8001a76:	1989      	adds	r1, r1, r6
 8001a78:	043f      	lsls	r7, r7, #16
 8001a7a:	1a89      	subs	r1, r1, r2
 8001a7c:	003a      	movs	r2, r7
 8001a7e:	9f03      	ldr	r7, [sp, #12]
 8001a80:	431a      	orrs	r2, r3
 8001a82:	0038      	movs	r0, r7
 8001a84:	0413      	lsls	r3, r2, #16
 8001a86:	0c1b      	lsrs	r3, r3, #16
 8001a88:	4358      	muls	r0, r3
 8001a8a:	4681      	mov	r9, r0
 8001a8c:	9802      	ldr	r0, [sp, #8]
 8001a8e:	0c15      	lsrs	r5, r2, #16
 8001a90:	436f      	muls	r7, r5
 8001a92:	4343      	muls	r3, r0
 8001a94:	4345      	muls	r5, r0
 8001a96:	4648      	mov	r0, r9
 8001a98:	0c00      	lsrs	r0, r0, #16
 8001a9a:	4684      	mov	ip, r0
 8001a9c:	19db      	adds	r3, r3, r7
 8001a9e:	4463      	add	r3, ip
 8001aa0:	429f      	cmp	r7, r3
 8001aa2:	d903      	bls.n	8001aac <__aeabi_ddiv+0x40c>
 8001aa4:	2080      	movs	r0, #128	; 0x80
 8001aa6:	0240      	lsls	r0, r0, #9
 8001aa8:	4684      	mov	ip, r0
 8001aaa:	4465      	add	r5, ip
 8001aac:	4648      	mov	r0, r9
 8001aae:	0c1f      	lsrs	r7, r3, #16
 8001ab0:	0400      	lsls	r0, r0, #16
 8001ab2:	041b      	lsls	r3, r3, #16
 8001ab4:	0c00      	lsrs	r0, r0, #16
 8001ab6:	197d      	adds	r5, r7, r5
 8001ab8:	1818      	adds	r0, r3, r0
 8001aba:	42a9      	cmp	r1, r5
 8001abc:	d200      	bcs.n	8001ac0 <__aeabi_ddiv+0x420>
 8001abe:	e084      	b.n	8001bca <__aeabi_ddiv+0x52a>
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_ddiv+0x424>
 8001ac2:	e07f      	b.n	8001bc4 <__aeabi_ddiv+0x524>
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	e657      	b.n	800177a <__aeabi_ddiv+0xda>
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	464a      	mov	r2, r9
 8001ace:	031b      	lsls	r3, r3, #12
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	031b      	lsls	r3, r3, #12
 8001ad4:	0b1b      	lsrs	r3, r3, #12
 8001ad6:	46aa      	mov	sl, r5
 8001ad8:	4a6f      	ldr	r2, [pc, #444]	; (8001c98 <__aeabi_ddiv+0x5f8>)
 8001ada:	e66f      	b.n	80017bc <__aeabi_ddiv+0x11c>
 8001adc:	42ba      	cmp	r2, r7
 8001ade:	d900      	bls.n	8001ae2 <__aeabi_ddiv+0x442>
 8001ae0:	e735      	b.n	800194e <__aeabi_ddiv+0x2ae>
 8001ae2:	464b      	mov	r3, r9
 8001ae4:	07dc      	lsls	r4, r3, #31
 8001ae6:	0858      	lsrs	r0, r3, #1
 8001ae8:	087b      	lsrs	r3, r7, #1
 8001aea:	431c      	orrs	r4, r3
 8001aec:	07ff      	lsls	r7, r7, #31
 8001aee:	e734      	b.n	800195a <__aeabi_ddiv+0x2ba>
 8001af0:	2400      	movs	r4, #0
 8001af2:	42af      	cmp	r7, r5
 8001af4:	d289      	bcs.n	8001a0a <__aeabi_ddiv+0x36a>
 8001af6:	4447      	add	r7, r8
 8001af8:	4547      	cmp	r7, r8
 8001afa:	41a4      	sbcs	r4, r4
 8001afc:	465b      	mov	r3, fp
 8001afe:	4264      	negs	r4, r4
 8001b00:	19a4      	adds	r4, r4, r6
 8001b02:	1864      	adds	r4, r4, r1
 8001b04:	3b01      	subs	r3, #1
 8001b06:	42a6      	cmp	r6, r4
 8001b08:	d21e      	bcs.n	8001b48 <__aeabi_ddiv+0x4a8>
 8001b0a:	42a0      	cmp	r0, r4
 8001b0c:	d86d      	bhi.n	8001bea <__aeabi_ddiv+0x54a>
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_ddiv+0x472>
 8001b10:	e0b6      	b.n	8001c80 <__aeabi_ddiv+0x5e0>
 8001b12:	1a24      	subs	r4, r4, r0
 8001b14:	469b      	mov	fp, r3
 8001b16:	e778      	b.n	8001a0a <__aeabi_ddiv+0x36a>
 8001b18:	0003      	movs	r3, r0
 8001b1a:	465a      	mov	r2, fp
 8001b1c:	3b28      	subs	r3, #40	; 0x28
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	2700      	movs	r7, #0
 8001b22:	4691      	mov	r9, r2
 8001b24:	e688      	b.n	8001838 <__aeabi_ddiv+0x198>
 8001b26:	4658      	mov	r0, fp
 8001b28:	f001 f8c0 	bl	8002cac <__clzsi2>
 8001b2c:	3020      	adds	r0, #32
 8001b2e:	e672      	b.n	8001816 <__aeabi_ddiv+0x176>
 8001b30:	0003      	movs	r3, r0
 8001b32:	4652      	mov	r2, sl
 8001b34:	3b28      	subs	r3, #40	; 0x28
 8001b36:	409a      	lsls	r2, r3
 8001b38:	4693      	mov	fp, r2
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	e6b4      	b.n	80018a8 <__aeabi_ddiv+0x208>
 8001b3e:	4650      	mov	r0, sl
 8001b40:	f001 f8b4 	bl	8002cac <__clzsi2>
 8001b44:	3020      	adds	r0, #32
 8001b46:	e69a      	b.n	800187e <__aeabi_ddiv+0x1de>
 8001b48:	42a6      	cmp	r6, r4
 8001b4a:	d1e2      	bne.n	8001b12 <__aeabi_ddiv+0x472>
 8001b4c:	45b8      	cmp	r8, r7
 8001b4e:	d9dc      	bls.n	8001b0a <__aeabi_ddiv+0x46a>
 8001b50:	1a34      	subs	r4, r6, r0
 8001b52:	469b      	mov	fp, r3
 8001b54:	e759      	b.n	8001a0a <__aeabi_ddiv+0x36a>
 8001b56:	2b1f      	cmp	r3, #31
 8001b58:	dc65      	bgt.n	8001c26 <__aeabi_ddiv+0x586>
 8001b5a:	4c50      	ldr	r4, [pc, #320]	; (8001c9c <__aeabi_ddiv+0x5fc>)
 8001b5c:	9900      	ldr	r1, [sp, #0]
 8001b5e:	46a4      	mov	ip, r4
 8001b60:	465c      	mov	r4, fp
 8001b62:	4461      	add	r1, ip
 8001b64:	0008      	movs	r0, r1
 8001b66:	408c      	lsls	r4, r1
 8001b68:	0011      	movs	r1, r2
 8001b6a:	4082      	lsls	r2, r0
 8001b6c:	40d9      	lsrs	r1, r3
 8001b6e:	1e50      	subs	r0, r2, #1
 8001b70:	4182      	sbcs	r2, r0
 8001b72:	430c      	orrs	r4, r1
 8001b74:	4314      	orrs	r4, r2
 8001b76:	465a      	mov	r2, fp
 8001b78:	40da      	lsrs	r2, r3
 8001b7a:	0013      	movs	r3, r2
 8001b7c:	0762      	lsls	r2, r4, #29
 8001b7e:	d009      	beq.n	8001b94 <__aeabi_ddiv+0x4f4>
 8001b80:	220f      	movs	r2, #15
 8001b82:	4022      	ands	r2, r4
 8001b84:	2a04      	cmp	r2, #4
 8001b86:	d005      	beq.n	8001b94 <__aeabi_ddiv+0x4f4>
 8001b88:	0022      	movs	r2, r4
 8001b8a:	1d14      	adds	r4, r2, #4
 8001b8c:	4294      	cmp	r4, r2
 8001b8e:	4189      	sbcs	r1, r1
 8001b90:	4249      	negs	r1, r1
 8001b92:	185b      	adds	r3, r3, r1
 8001b94:	021a      	lsls	r2, r3, #8
 8001b96:	d562      	bpl.n	8001c5e <__aeabi_ddiv+0x5be>
 8001b98:	2201      	movs	r2, #1
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	2700      	movs	r7, #0
 8001b9e:	e60d      	b.n	80017bc <__aeabi_ddiv+0x11c>
 8001ba0:	428a      	cmp	r2, r1
 8001ba2:	d800      	bhi.n	8001ba6 <__aeabi_ddiv+0x506>
 8001ba4:	e70a      	b.n	80019bc <__aeabi_ddiv+0x31c>
 8001ba6:	1e83      	subs	r3, r0, #2
 8001ba8:	1989      	adds	r1, r1, r6
 8001baa:	e707      	b.n	80019bc <__aeabi_ddiv+0x31c>
 8001bac:	230f      	movs	r3, #15
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d100      	bne.n	8001bb6 <__aeabi_ddiv+0x516>
 8001bb4:	e5e6      	b.n	8001784 <__aeabi_ddiv+0xe4>
 8001bb6:	1d17      	adds	r7, r2, #4
 8001bb8:	4297      	cmp	r7, r2
 8001bba:	4192      	sbcs	r2, r2
 8001bbc:	4253      	negs	r3, r2
 8001bbe:	449b      	add	fp, r3
 8001bc0:	08fa      	lsrs	r2, r7, #3
 8001bc2:	e5e0      	b.n	8001786 <__aeabi_ddiv+0xe6>
 8001bc4:	2800      	cmp	r0, #0
 8001bc6:	d100      	bne.n	8001bca <__aeabi_ddiv+0x52a>
 8001bc8:	e5d7      	b.n	800177a <__aeabi_ddiv+0xda>
 8001bca:	1871      	adds	r1, r6, r1
 8001bcc:	1e53      	subs	r3, r2, #1
 8001bce:	42b1      	cmp	r1, r6
 8001bd0:	d327      	bcc.n	8001c22 <__aeabi_ddiv+0x582>
 8001bd2:	42a9      	cmp	r1, r5
 8001bd4:	d315      	bcc.n	8001c02 <__aeabi_ddiv+0x562>
 8001bd6:	d058      	beq.n	8001c8a <__aeabi_ddiv+0x5ea>
 8001bd8:	001a      	movs	r2, r3
 8001bda:	e773      	b.n	8001ac4 <__aeabi_ddiv+0x424>
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	dc00      	bgt.n	8001be2 <__aeabi_ddiv+0x542>
 8001be0:	e604      	b.n	80017ec <__aeabi_ddiv+0x14c>
 8001be2:	2301      	movs	r3, #1
 8001be4:	2200      	movs	r2, #0
 8001be6:	449b      	add	fp, r3
 8001be8:	e5cd      	b.n	8001786 <__aeabi_ddiv+0xe6>
 8001bea:	2302      	movs	r3, #2
 8001bec:	4447      	add	r7, r8
 8001bee:	4547      	cmp	r7, r8
 8001bf0:	4189      	sbcs	r1, r1
 8001bf2:	425b      	negs	r3, r3
 8001bf4:	469c      	mov	ip, r3
 8001bf6:	4249      	negs	r1, r1
 8001bf8:	1989      	adds	r1, r1, r6
 8001bfa:	190c      	adds	r4, r1, r4
 8001bfc:	44e3      	add	fp, ip
 8001bfe:	1a24      	subs	r4, r4, r0
 8001c00:	e703      	b.n	8001a0a <__aeabi_ddiv+0x36a>
 8001c02:	4643      	mov	r3, r8
 8001c04:	005f      	lsls	r7, r3, #1
 8001c06:	4547      	cmp	r7, r8
 8001c08:	419b      	sbcs	r3, r3
 8001c0a:	46b8      	mov	r8, r7
 8001c0c:	425b      	negs	r3, r3
 8001c0e:	199e      	adds	r6, r3, r6
 8001c10:	3a02      	subs	r2, #2
 8001c12:	1989      	adds	r1, r1, r6
 8001c14:	42a9      	cmp	r1, r5
 8001c16:	d000      	beq.n	8001c1a <__aeabi_ddiv+0x57a>
 8001c18:	e754      	b.n	8001ac4 <__aeabi_ddiv+0x424>
 8001c1a:	4540      	cmp	r0, r8
 8001c1c:	d000      	beq.n	8001c20 <__aeabi_ddiv+0x580>
 8001c1e:	e751      	b.n	8001ac4 <__aeabi_ddiv+0x424>
 8001c20:	e5ab      	b.n	800177a <__aeabi_ddiv+0xda>
 8001c22:	001a      	movs	r2, r3
 8001c24:	e7f6      	b.n	8001c14 <__aeabi_ddiv+0x574>
 8001c26:	211f      	movs	r1, #31
 8001c28:	465f      	mov	r7, fp
 8001c2a:	4249      	negs	r1, r1
 8001c2c:	1b0c      	subs	r4, r1, r4
 8001c2e:	40e7      	lsrs	r7, r4
 8001c30:	2b20      	cmp	r3, #32
 8001c32:	d007      	beq.n	8001c44 <__aeabi_ddiv+0x5a4>
 8001c34:	491a      	ldr	r1, [pc, #104]	; (8001ca0 <__aeabi_ddiv+0x600>)
 8001c36:	9b00      	ldr	r3, [sp, #0]
 8001c38:	468c      	mov	ip, r1
 8001c3a:	4463      	add	r3, ip
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	465b      	mov	r3, fp
 8001c40:	4083      	lsls	r3, r0
 8001c42:	431a      	orrs	r2, r3
 8001c44:	1e50      	subs	r0, r2, #1
 8001c46:	4182      	sbcs	r2, r0
 8001c48:	433a      	orrs	r2, r7
 8001c4a:	2707      	movs	r7, #7
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	4017      	ands	r7, r2
 8001c50:	d009      	beq.n	8001c66 <__aeabi_ddiv+0x5c6>
 8001c52:	210f      	movs	r1, #15
 8001c54:	2300      	movs	r3, #0
 8001c56:	4011      	ands	r1, r2
 8001c58:	0014      	movs	r4, r2
 8001c5a:	2904      	cmp	r1, #4
 8001c5c:	d195      	bne.n	8001b8a <__aeabi_ddiv+0x4ea>
 8001c5e:	0022      	movs	r2, r4
 8001c60:	075f      	lsls	r7, r3, #29
 8001c62:	025b      	lsls	r3, r3, #9
 8001c64:	0b1b      	lsrs	r3, r3, #12
 8001c66:	08d2      	lsrs	r2, r2, #3
 8001c68:	4317      	orrs	r7, r2
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	e5a6      	b.n	80017bc <__aeabi_ddiv+0x11c>
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	4659      	mov	r1, fp
 8001c72:	031b      	lsls	r3, r3, #12
 8001c74:	430b      	orrs	r3, r1
 8001c76:	031b      	lsls	r3, r3, #12
 8001c78:	0017      	movs	r7, r2
 8001c7a:	0b1b      	lsrs	r3, r3, #12
 8001c7c:	4a06      	ldr	r2, [pc, #24]	; (8001c98 <__aeabi_ddiv+0x5f8>)
 8001c7e:	e59d      	b.n	80017bc <__aeabi_ddiv+0x11c>
 8001c80:	42bd      	cmp	r5, r7
 8001c82:	d8b2      	bhi.n	8001bea <__aeabi_ddiv+0x54a>
 8001c84:	469b      	mov	fp, r3
 8001c86:	2400      	movs	r4, #0
 8001c88:	e6bf      	b.n	8001a0a <__aeabi_ddiv+0x36a>
 8001c8a:	4580      	cmp	r8, r0
 8001c8c:	d3b9      	bcc.n	8001c02 <__aeabi_ddiv+0x562>
 8001c8e:	001a      	movs	r2, r3
 8001c90:	e7c3      	b.n	8001c1a <__aeabi_ddiv+0x57a>
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	000003ff 	.word	0x000003ff
 8001c98:	000007ff 	.word	0x000007ff
 8001c9c:	0000041e 	.word	0x0000041e
 8001ca0:	0000043e 	.word	0x0000043e

08001ca4 <__eqdf2>:
 8001ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ca6:	464f      	mov	r7, r9
 8001ca8:	4646      	mov	r6, r8
 8001caa:	46d6      	mov	lr, sl
 8001cac:	4684      	mov	ip, r0
 8001cae:	b5c0      	push	{r6, r7, lr}
 8001cb0:	4680      	mov	r8, r0
 8001cb2:	4e19      	ldr	r6, [pc, #100]	; (8001d18 <__eqdf2+0x74>)
 8001cb4:	0318      	lsls	r0, r3, #12
 8001cb6:	030f      	lsls	r7, r1, #12
 8001cb8:	004d      	lsls	r5, r1, #1
 8001cba:	0b00      	lsrs	r0, r0, #12
 8001cbc:	005c      	lsls	r4, r3, #1
 8001cbe:	4682      	mov	sl, r0
 8001cc0:	0b3f      	lsrs	r7, r7, #12
 8001cc2:	0d6d      	lsrs	r5, r5, #21
 8001cc4:	0fc9      	lsrs	r1, r1, #31
 8001cc6:	4691      	mov	r9, r2
 8001cc8:	0d64      	lsrs	r4, r4, #21
 8001cca:	0fdb      	lsrs	r3, r3, #31
 8001ccc:	2001      	movs	r0, #1
 8001cce:	42b5      	cmp	r5, r6
 8001cd0:	d00a      	beq.n	8001ce8 <__eqdf2+0x44>
 8001cd2:	42b4      	cmp	r4, r6
 8001cd4:	d003      	beq.n	8001cde <__eqdf2+0x3a>
 8001cd6:	42a5      	cmp	r5, r4
 8001cd8:	d101      	bne.n	8001cde <__eqdf2+0x3a>
 8001cda:	4557      	cmp	r7, sl
 8001cdc:	d00c      	beq.n	8001cf8 <__eqdf2+0x54>
 8001cde:	bc1c      	pop	{r2, r3, r4}
 8001ce0:	4690      	mov	r8, r2
 8001ce2:	4699      	mov	r9, r3
 8001ce4:	46a2      	mov	sl, r4
 8001ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ce8:	4666      	mov	r6, ip
 8001cea:	433e      	orrs	r6, r7
 8001cec:	d1f7      	bne.n	8001cde <__eqdf2+0x3a>
 8001cee:	42ac      	cmp	r4, r5
 8001cf0:	d1f5      	bne.n	8001cde <__eqdf2+0x3a>
 8001cf2:	4654      	mov	r4, sl
 8001cf4:	4314      	orrs	r4, r2
 8001cf6:	d1f2      	bne.n	8001cde <__eqdf2+0x3a>
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	45c8      	cmp	r8, r9
 8001cfc:	d1ef      	bne.n	8001cde <__eqdf2+0x3a>
 8001cfe:	4299      	cmp	r1, r3
 8001d00:	d007      	beq.n	8001d12 <__eqdf2+0x6e>
 8001d02:	2d00      	cmp	r5, #0
 8001d04:	d1eb      	bne.n	8001cde <__eqdf2+0x3a>
 8001d06:	4663      	mov	r3, ip
 8001d08:	431f      	orrs	r7, r3
 8001d0a:	0038      	movs	r0, r7
 8001d0c:	1e47      	subs	r7, r0, #1
 8001d0e:	41b8      	sbcs	r0, r7
 8001d10:	e7e5      	b.n	8001cde <__eqdf2+0x3a>
 8001d12:	2000      	movs	r0, #0
 8001d14:	e7e3      	b.n	8001cde <__eqdf2+0x3a>
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	000007ff 	.word	0x000007ff

08001d1c <__gedf2>:
 8001d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d1e:	464f      	mov	r7, r9
 8001d20:	4646      	mov	r6, r8
 8001d22:	46d6      	mov	lr, sl
 8001d24:	004d      	lsls	r5, r1, #1
 8001d26:	b5c0      	push	{r6, r7, lr}
 8001d28:	030e      	lsls	r6, r1, #12
 8001d2a:	0fc9      	lsrs	r1, r1, #31
 8001d2c:	468a      	mov	sl, r1
 8001d2e:	492c      	ldr	r1, [pc, #176]	; (8001de0 <__gedf2+0xc4>)
 8001d30:	031f      	lsls	r7, r3, #12
 8001d32:	005c      	lsls	r4, r3, #1
 8001d34:	4680      	mov	r8, r0
 8001d36:	0b36      	lsrs	r6, r6, #12
 8001d38:	0d6d      	lsrs	r5, r5, #21
 8001d3a:	4691      	mov	r9, r2
 8001d3c:	0b3f      	lsrs	r7, r7, #12
 8001d3e:	0d64      	lsrs	r4, r4, #21
 8001d40:	0fdb      	lsrs	r3, r3, #31
 8001d42:	428d      	cmp	r5, r1
 8001d44:	d01e      	beq.n	8001d84 <__gedf2+0x68>
 8001d46:	428c      	cmp	r4, r1
 8001d48:	d016      	beq.n	8001d78 <__gedf2+0x5c>
 8001d4a:	2d00      	cmp	r5, #0
 8001d4c:	d11e      	bne.n	8001d8c <__gedf2+0x70>
 8001d4e:	4330      	orrs	r0, r6
 8001d50:	4684      	mov	ip, r0
 8001d52:	2c00      	cmp	r4, #0
 8001d54:	d101      	bne.n	8001d5a <__gedf2+0x3e>
 8001d56:	433a      	orrs	r2, r7
 8001d58:	d023      	beq.n	8001da2 <__gedf2+0x86>
 8001d5a:	4662      	mov	r2, ip
 8001d5c:	2a00      	cmp	r2, #0
 8001d5e:	d01a      	beq.n	8001d96 <__gedf2+0x7a>
 8001d60:	459a      	cmp	sl, r3
 8001d62:	d029      	beq.n	8001db8 <__gedf2+0x9c>
 8001d64:	4651      	mov	r1, sl
 8001d66:	2002      	movs	r0, #2
 8001d68:	3901      	subs	r1, #1
 8001d6a:	4008      	ands	r0, r1
 8001d6c:	3801      	subs	r0, #1
 8001d6e:	bc1c      	pop	{r2, r3, r4}
 8001d70:	4690      	mov	r8, r2
 8001d72:	4699      	mov	r9, r3
 8001d74:	46a2      	mov	sl, r4
 8001d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d78:	0039      	movs	r1, r7
 8001d7a:	4311      	orrs	r1, r2
 8001d7c:	d0e5      	beq.n	8001d4a <__gedf2+0x2e>
 8001d7e:	2002      	movs	r0, #2
 8001d80:	4240      	negs	r0, r0
 8001d82:	e7f4      	b.n	8001d6e <__gedf2+0x52>
 8001d84:	4330      	orrs	r0, r6
 8001d86:	d1fa      	bne.n	8001d7e <__gedf2+0x62>
 8001d88:	42ac      	cmp	r4, r5
 8001d8a:	d00f      	beq.n	8001dac <__gedf2+0x90>
 8001d8c:	2c00      	cmp	r4, #0
 8001d8e:	d10f      	bne.n	8001db0 <__gedf2+0x94>
 8001d90:	433a      	orrs	r2, r7
 8001d92:	d0e7      	beq.n	8001d64 <__gedf2+0x48>
 8001d94:	e00c      	b.n	8001db0 <__gedf2+0x94>
 8001d96:	2201      	movs	r2, #1
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	4393      	bics	r3, r2
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	3001      	adds	r0, #1
 8001da0:	e7e5      	b.n	8001d6e <__gedf2+0x52>
 8001da2:	4663      	mov	r3, ip
 8001da4:	2000      	movs	r0, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0e1      	beq.n	8001d6e <__gedf2+0x52>
 8001daa:	e7db      	b.n	8001d64 <__gedf2+0x48>
 8001dac:	433a      	orrs	r2, r7
 8001dae:	d1e6      	bne.n	8001d7e <__gedf2+0x62>
 8001db0:	459a      	cmp	sl, r3
 8001db2:	d1d7      	bne.n	8001d64 <__gedf2+0x48>
 8001db4:	42a5      	cmp	r5, r4
 8001db6:	dcd5      	bgt.n	8001d64 <__gedf2+0x48>
 8001db8:	42a5      	cmp	r5, r4
 8001dba:	db05      	blt.n	8001dc8 <__gedf2+0xac>
 8001dbc:	42be      	cmp	r6, r7
 8001dbe:	d8d1      	bhi.n	8001d64 <__gedf2+0x48>
 8001dc0:	d008      	beq.n	8001dd4 <__gedf2+0xb8>
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	42be      	cmp	r6, r7
 8001dc6:	d2d2      	bcs.n	8001d6e <__gedf2+0x52>
 8001dc8:	4650      	mov	r0, sl
 8001dca:	2301      	movs	r3, #1
 8001dcc:	3801      	subs	r0, #1
 8001dce:	4398      	bics	r0, r3
 8001dd0:	3001      	adds	r0, #1
 8001dd2:	e7cc      	b.n	8001d6e <__gedf2+0x52>
 8001dd4:	45c8      	cmp	r8, r9
 8001dd6:	d8c5      	bhi.n	8001d64 <__gedf2+0x48>
 8001dd8:	2000      	movs	r0, #0
 8001dda:	45c8      	cmp	r8, r9
 8001ddc:	d3f4      	bcc.n	8001dc8 <__gedf2+0xac>
 8001dde:	e7c6      	b.n	8001d6e <__gedf2+0x52>
 8001de0:	000007ff 	.word	0x000007ff

08001de4 <__ledf2>:
 8001de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001de6:	464f      	mov	r7, r9
 8001de8:	4646      	mov	r6, r8
 8001dea:	46d6      	mov	lr, sl
 8001dec:	004d      	lsls	r5, r1, #1
 8001dee:	b5c0      	push	{r6, r7, lr}
 8001df0:	030e      	lsls	r6, r1, #12
 8001df2:	0fc9      	lsrs	r1, r1, #31
 8001df4:	468a      	mov	sl, r1
 8001df6:	492e      	ldr	r1, [pc, #184]	; (8001eb0 <__ledf2+0xcc>)
 8001df8:	031f      	lsls	r7, r3, #12
 8001dfa:	005c      	lsls	r4, r3, #1
 8001dfc:	4680      	mov	r8, r0
 8001dfe:	0b36      	lsrs	r6, r6, #12
 8001e00:	0d6d      	lsrs	r5, r5, #21
 8001e02:	4691      	mov	r9, r2
 8001e04:	0b3f      	lsrs	r7, r7, #12
 8001e06:	0d64      	lsrs	r4, r4, #21
 8001e08:	0fdb      	lsrs	r3, r3, #31
 8001e0a:	428d      	cmp	r5, r1
 8001e0c:	d018      	beq.n	8001e40 <__ledf2+0x5c>
 8001e0e:	428c      	cmp	r4, r1
 8001e10:	d011      	beq.n	8001e36 <__ledf2+0x52>
 8001e12:	2d00      	cmp	r5, #0
 8001e14:	d118      	bne.n	8001e48 <__ledf2+0x64>
 8001e16:	4330      	orrs	r0, r6
 8001e18:	4684      	mov	ip, r0
 8001e1a:	2c00      	cmp	r4, #0
 8001e1c:	d11e      	bne.n	8001e5c <__ledf2+0x78>
 8001e1e:	433a      	orrs	r2, r7
 8001e20:	d11c      	bne.n	8001e5c <__ledf2+0x78>
 8001e22:	4663      	mov	r3, ip
 8001e24:	2000      	movs	r0, #0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d030      	beq.n	8001e8c <__ledf2+0xa8>
 8001e2a:	4651      	mov	r1, sl
 8001e2c:	2002      	movs	r0, #2
 8001e2e:	3901      	subs	r1, #1
 8001e30:	4008      	ands	r0, r1
 8001e32:	3801      	subs	r0, #1
 8001e34:	e02a      	b.n	8001e8c <__ledf2+0xa8>
 8001e36:	0039      	movs	r1, r7
 8001e38:	4311      	orrs	r1, r2
 8001e3a:	d0ea      	beq.n	8001e12 <__ledf2+0x2e>
 8001e3c:	2002      	movs	r0, #2
 8001e3e:	e025      	b.n	8001e8c <__ledf2+0xa8>
 8001e40:	4330      	orrs	r0, r6
 8001e42:	d1fb      	bne.n	8001e3c <__ledf2+0x58>
 8001e44:	42ac      	cmp	r4, r5
 8001e46:	d026      	beq.n	8001e96 <__ledf2+0xb2>
 8001e48:	2c00      	cmp	r4, #0
 8001e4a:	d126      	bne.n	8001e9a <__ledf2+0xb6>
 8001e4c:	433a      	orrs	r2, r7
 8001e4e:	d124      	bne.n	8001e9a <__ledf2+0xb6>
 8001e50:	4651      	mov	r1, sl
 8001e52:	2002      	movs	r0, #2
 8001e54:	3901      	subs	r1, #1
 8001e56:	4008      	ands	r0, r1
 8001e58:	3801      	subs	r0, #1
 8001e5a:	e017      	b.n	8001e8c <__ledf2+0xa8>
 8001e5c:	4662      	mov	r2, ip
 8001e5e:	2a00      	cmp	r2, #0
 8001e60:	d00f      	beq.n	8001e82 <__ledf2+0x9e>
 8001e62:	459a      	cmp	sl, r3
 8001e64:	d1e1      	bne.n	8001e2a <__ledf2+0x46>
 8001e66:	42a5      	cmp	r5, r4
 8001e68:	db05      	blt.n	8001e76 <__ledf2+0x92>
 8001e6a:	42be      	cmp	r6, r7
 8001e6c:	d8dd      	bhi.n	8001e2a <__ledf2+0x46>
 8001e6e:	d019      	beq.n	8001ea4 <__ledf2+0xc0>
 8001e70:	2000      	movs	r0, #0
 8001e72:	42be      	cmp	r6, r7
 8001e74:	d20a      	bcs.n	8001e8c <__ledf2+0xa8>
 8001e76:	4650      	mov	r0, sl
 8001e78:	2301      	movs	r3, #1
 8001e7a:	3801      	subs	r0, #1
 8001e7c:	4398      	bics	r0, r3
 8001e7e:	3001      	adds	r0, #1
 8001e80:	e004      	b.n	8001e8c <__ledf2+0xa8>
 8001e82:	2201      	movs	r2, #1
 8001e84:	3b01      	subs	r3, #1
 8001e86:	4393      	bics	r3, r2
 8001e88:	0018      	movs	r0, r3
 8001e8a:	3001      	adds	r0, #1
 8001e8c:	bc1c      	pop	{r2, r3, r4}
 8001e8e:	4690      	mov	r8, r2
 8001e90:	4699      	mov	r9, r3
 8001e92:	46a2      	mov	sl, r4
 8001e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e96:	433a      	orrs	r2, r7
 8001e98:	d1d0      	bne.n	8001e3c <__ledf2+0x58>
 8001e9a:	459a      	cmp	sl, r3
 8001e9c:	d1c5      	bne.n	8001e2a <__ledf2+0x46>
 8001e9e:	42a5      	cmp	r5, r4
 8001ea0:	dcc3      	bgt.n	8001e2a <__ledf2+0x46>
 8001ea2:	e7e0      	b.n	8001e66 <__ledf2+0x82>
 8001ea4:	45c8      	cmp	r8, r9
 8001ea6:	d8c0      	bhi.n	8001e2a <__ledf2+0x46>
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	45c8      	cmp	r8, r9
 8001eac:	d3e3      	bcc.n	8001e76 <__ledf2+0x92>
 8001eae:	e7ed      	b.n	8001e8c <__ledf2+0xa8>
 8001eb0:	000007ff 	.word	0x000007ff

08001eb4 <__aeabi_dmul>:
 8001eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eb6:	4657      	mov	r7, sl
 8001eb8:	46de      	mov	lr, fp
 8001eba:	464e      	mov	r6, r9
 8001ebc:	4645      	mov	r5, r8
 8001ebe:	b5e0      	push	{r5, r6, r7, lr}
 8001ec0:	4683      	mov	fp, r0
 8001ec2:	0006      	movs	r6, r0
 8001ec4:	030f      	lsls	r7, r1, #12
 8001ec6:	0048      	lsls	r0, r1, #1
 8001ec8:	b087      	sub	sp, #28
 8001eca:	4692      	mov	sl, r2
 8001ecc:	001d      	movs	r5, r3
 8001ece:	0b3f      	lsrs	r7, r7, #12
 8001ed0:	0d40      	lsrs	r0, r0, #21
 8001ed2:	0fcc      	lsrs	r4, r1, #31
 8001ed4:	2800      	cmp	r0, #0
 8001ed6:	d100      	bne.n	8001eda <__aeabi_dmul+0x26>
 8001ed8:	e06f      	b.n	8001fba <__aeabi_dmul+0x106>
 8001eda:	4bde      	ldr	r3, [pc, #888]	; (8002254 <__aeabi_dmul+0x3a0>)
 8001edc:	4298      	cmp	r0, r3
 8001ede:	d038      	beq.n	8001f52 <__aeabi_dmul+0x9e>
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	00ff      	lsls	r7, r7, #3
 8001ee4:	041b      	lsls	r3, r3, #16
 8001ee6:	431f      	orrs	r7, r3
 8001ee8:	0f73      	lsrs	r3, r6, #29
 8001eea:	433b      	orrs	r3, r7
 8001eec:	9301      	str	r3, [sp, #4]
 8001eee:	4bda      	ldr	r3, [pc, #872]	; (8002258 <__aeabi_dmul+0x3a4>)
 8001ef0:	2700      	movs	r7, #0
 8001ef2:	4699      	mov	r9, r3
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	469b      	mov	fp, r3
 8001ef8:	00f6      	lsls	r6, r6, #3
 8001efa:	4481      	add	r9, r0
 8001efc:	032b      	lsls	r3, r5, #12
 8001efe:	0069      	lsls	r1, r5, #1
 8001f00:	0b1b      	lsrs	r3, r3, #12
 8001f02:	4652      	mov	r2, sl
 8001f04:	4698      	mov	r8, r3
 8001f06:	0d49      	lsrs	r1, r1, #21
 8001f08:	0fed      	lsrs	r5, r5, #31
 8001f0a:	2900      	cmp	r1, #0
 8001f0c:	d100      	bne.n	8001f10 <__aeabi_dmul+0x5c>
 8001f0e:	e085      	b.n	800201c <__aeabi_dmul+0x168>
 8001f10:	4bd0      	ldr	r3, [pc, #832]	; (8002254 <__aeabi_dmul+0x3a0>)
 8001f12:	4299      	cmp	r1, r3
 8001f14:	d100      	bne.n	8001f18 <__aeabi_dmul+0x64>
 8001f16:	e073      	b.n	8002000 <__aeabi_dmul+0x14c>
 8001f18:	4643      	mov	r3, r8
 8001f1a:	00da      	lsls	r2, r3, #3
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	041b      	lsls	r3, r3, #16
 8001f20:	4313      	orrs	r3, r2
 8001f22:	4652      	mov	r2, sl
 8001f24:	48cc      	ldr	r0, [pc, #816]	; (8002258 <__aeabi_dmul+0x3a4>)
 8001f26:	0f52      	lsrs	r2, r2, #29
 8001f28:	4684      	mov	ip, r0
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	4652      	mov	r2, sl
 8001f2e:	2000      	movs	r0, #0
 8001f30:	4461      	add	r1, ip
 8001f32:	00d2      	lsls	r2, r2, #3
 8001f34:	4489      	add	r9, r1
 8001f36:	0021      	movs	r1, r4
 8001f38:	4069      	eors	r1, r5
 8001f3a:	9100      	str	r1, [sp, #0]
 8001f3c:	468c      	mov	ip, r1
 8001f3e:	2101      	movs	r1, #1
 8001f40:	4449      	add	r1, r9
 8001f42:	468a      	mov	sl, r1
 8001f44:	2f0f      	cmp	r7, #15
 8001f46:	d900      	bls.n	8001f4a <__aeabi_dmul+0x96>
 8001f48:	e090      	b.n	800206c <__aeabi_dmul+0x1b8>
 8001f4a:	49c4      	ldr	r1, [pc, #784]	; (800225c <__aeabi_dmul+0x3a8>)
 8001f4c:	00bf      	lsls	r7, r7, #2
 8001f4e:	59cf      	ldr	r7, [r1, r7]
 8001f50:	46bf      	mov	pc, r7
 8001f52:	465b      	mov	r3, fp
 8001f54:	433b      	orrs	r3, r7
 8001f56:	9301      	str	r3, [sp, #4]
 8001f58:	d000      	beq.n	8001f5c <__aeabi_dmul+0xa8>
 8001f5a:	e16a      	b.n	8002232 <__aeabi_dmul+0x37e>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	2708      	movs	r7, #8
 8001f60:	2600      	movs	r6, #0
 8001f62:	4681      	mov	r9, r0
 8001f64:	469b      	mov	fp, r3
 8001f66:	e7c9      	b.n	8001efc <__aeabi_dmul+0x48>
 8001f68:	0032      	movs	r2, r6
 8001f6a:	4658      	mov	r0, fp
 8001f6c:	9b01      	ldr	r3, [sp, #4]
 8001f6e:	4661      	mov	r1, ip
 8001f70:	9100      	str	r1, [sp, #0]
 8001f72:	2802      	cmp	r0, #2
 8001f74:	d100      	bne.n	8001f78 <__aeabi_dmul+0xc4>
 8001f76:	e075      	b.n	8002064 <__aeabi_dmul+0x1b0>
 8001f78:	2803      	cmp	r0, #3
 8001f7a:	d100      	bne.n	8001f7e <__aeabi_dmul+0xca>
 8001f7c:	e1fe      	b.n	800237c <__aeabi_dmul+0x4c8>
 8001f7e:	2801      	cmp	r0, #1
 8001f80:	d000      	beq.n	8001f84 <__aeabi_dmul+0xd0>
 8001f82:	e12c      	b.n	80021de <__aeabi_dmul+0x32a>
 8001f84:	2300      	movs	r3, #0
 8001f86:	2700      	movs	r7, #0
 8001f88:	2600      	movs	r6, #0
 8001f8a:	2500      	movs	r5, #0
 8001f8c:	033f      	lsls	r7, r7, #12
 8001f8e:	0d2a      	lsrs	r2, r5, #20
 8001f90:	0b3f      	lsrs	r7, r7, #12
 8001f92:	48b3      	ldr	r0, [pc, #716]	; (8002260 <__aeabi_dmul+0x3ac>)
 8001f94:	0512      	lsls	r2, r2, #20
 8001f96:	433a      	orrs	r2, r7
 8001f98:	4002      	ands	r2, r0
 8001f9a:	051b      	lsls	r3, r3, #20
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	9a00      	ldr	r2, [sp, #0]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	07d1      	lsls	r1, r2, #31
 8001fa4:	085b      	lsrs	r3, r3, #1
 8001fa6:	430b      	orrs	r3, r1
 8001fa8:	0030      	movs	r0, r6
 8001faa:	0019      	movs	r1, r3
 8001fac:	b007      	add	sp, #28
 8001fae:	bc3c      	pop	{r2, r3, r4, r5}
 8001fb0:	4690      	mov	r8, r2
 8001fb2:	4699      	mov	r9, r3
 8001fb4:	46a2      	mov	sl, r4
 8001fb6:	46ab      	mov	fp, r5
 8001fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fba:	465b      	mov	r3, fp
 8001fbc:	433b      	orrs	r3, r7
 8001fbe:	9301      	str	r3, [sp, #4]
 8001fc0:	d100      	bne.n	8001fc4 <__aeabi_dmul+0x110>
 8001fc2:	e12f      	b.n	8002224 <__aeabi_dmul+0x370>
 8001fc4:	2f00      	cmp	r7, #0
 8001fc6:	d100      	bne.n	8001fca <__aeabi_dmul+0x116>
 8001fc8:	e1a5      	b.n	8002316 <__aeabi_dmul+0x462>
 8001fca:	0038      	movs	r0, r7
 8001fcc:	f000 fe6e 	bl	8002cac <__clzsi2>
 8001fd0:	0003      	movs	r3, r0
 8001fd2:	3b0b      	subs	r3, #11
 8001fd4:	2b1c      	cmp	r3, #28
 8001fd6:	dd00      	ble.n	8001fda <__aeabi_dmul+0x126>
 8001fd8:	e196      	b.n	8002308 <__aeabi_dmul+0x454>
 8001fda:	221d      	movs	r2, #29
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	465a      	mov	r2, fp
 8001fe0:	0001      	movs	r1, r0
 8001fe2:	40da      	lsrs	r2, r3
 8001fe4:	465e      	mov	r6, fp
 8001fe6:	3908      	subs	r1, #8
 8001fe8:	408f      	lsls	r7, r1
 8001fea:	0013      	movs	r3, r2
 8001fec:	408e      	lsls	r6, r1
 8001fee:	433b      	orrs	r3, r7
 8001ff0:	9301      	str	r3, [sp, #4]
 8001ff2:	4b9c      	ldr	r3, [pc, #624]	; (8002264 <__aeabi_dmul+0x3b0>)
 8001ff4:	2700      	movs	r7, #0
 8001ff6:	1a1b      	subs	r3, r3, r0
 8001ff8:	4699      	mov	r9, r3
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	469b      	mov	fp, r3
 8001ffe:	e77d      	b.n	8001efc <__aeabi_dmul+0x48>
 8002000:	4641      	mov	r1, r8
 8002002:	4653      	mov	r3, sl
 8002004:	430b      	orrs	r3, r1
 8002006:	4993      	ldr	r1, [pc, #588]	; (8002254 <__aeabi_dmul+0x3a0>)
 8002008:	468c      	mov	ip, r1
 800200a:	44e1      	add	r9, ip
 800200c:	2b00      	cmp	r3, #0
 800200e:	d000      	beq.n	8002012 <__aeabi_dmul+0x15e>
 8002010:	e11a      	b.n	8002248 <__aeabi_dmul+0x394>
 8002012:	2202      	movs	r2, #2
 8002014:	2002      	movs	r0, #2
 8002016:	4317      	orrs	r7, r2
 8002018:	2200      	movs	r2, #0
 800201a:	e78c      	b.n	8001f36 <__aeabi_dmul+0x82>
 800201c:	4313      	orrs	r3, r2
 800201e:	d100      	bne.n	8002022 <__aeabi_dmul+0x16e>
 8002020:	e10d      	b.n	800223e <__aeabi_dmul+0x38a>
 8002022:	4643      	mov	r3, r8
 8002024:	2b00      	cmp	r3, #0
 8002026:	d100      	bne.n	800202a <__aeabi_dmul+0x176>
 8002028:	e181      	b.n	800232e <__aeabi_dmul+0x47a>
 800202a:	4640      	mov	r0, r8
 800202c:	f000 fe3e 	bl	8002cac <__clzsi2>
 8002030:	0002      	movs	r2, r0
 8002032:	3a0b      	subs	r2, #11
 8002034:	2a1c      	cmp	r2, #28
 8002036:	dd00      	ble.n	800203a <__aeabi_dmul+0x186>
 8002038:	e172      	b.n	8002320 <__aeabi_dmul+0x46c>
 800203a:	0001      	movs	r1, r0
 800203c:	4643      	mov	r3, r8
 800203e:	3908      	subs	r1, #8
 8002040:	408b      	lsls	r3, r1
 8002042:	4698      	mov	r8, r3
 8002044:	231d      	movs	r3, #29
 8002046:	1a9a      	subs	r2, r3, r2
 8002048:	4653      	mov	r3, sl
 800204a:	40d3      	lsrs	r3, r2
 800204c:	001a      	movs	r2, r3
 800204e:	4643      	mov	r3, r8
 8002050:	4313      	orrs	r3, r2
 8002052:	4652      	mov	r2, sl
 8002054:	408a      	lsls	r2, r1
 8002056:	4649      	mov	r1, r9
 8002058:	1a08      	subs	r0, r1, r0
 800205a:	4982      	ldr	r1, [pc, #520]	; (8002264 <__aeabi_dmul+0x3b0>)
 800205c:	4689      	mov	r9, r1
 800205e:	4481      	add	r9, r0
 8002060:	2000      	movs	r0, #0
 8002062:	e768      	b.n	8001f36 <__aeabi_dmul+0x82>
 8002064:	4b7b      	ldr	r3, [pc, #492]	; (8002254 <__aeabi_dmul+0x3a0>)
 8002066:	2700      	movs	r7, #0
 8002068:	2600      	movs	r6, #0
 800206a:	e78e      	b.n	8001f8a <__aeabi_dmul+0xd6>
 800206c:	0c14      	lsrs	r4, r2, #16
 800206e:	0412      	lsls	r2, r2, #16
 8002070:	0c12      	lsrs	r2, r2, #16
 8002072:	0011      	movs	r1, r2
 8002074:	0c37      	lsrs	r7, r6, #16
 8002076:	0436      	lsls	r6, r6, #16
 8002078:	0c35      	lsrs	r5, r6, #16
 800207a:	4379      	muls	r1, r7
 800207c:	0028      	movs	r0, r5
 800207e:	468c      	mov	ip, r1
 8002080:	002e      	movs	r6, r5
 8002082:	4360      	muls	r0, r4
 8002084:	4460      	add	r0, ip
 8002086:	4683      	mov	fp, r0
 8002088:	4356      	muls	r6, r2
 800208a:	0021      	movs	r1, r4
 800208c:	0c30      	lsrs	r0, r6, #16
 800208e:	4680      	mov	r8, r0
 8002090:	4658      	mov	r0, fp
 8002092:	4379      	muls	r1, r7
 8002094:	4440      	add	r0, r8
 8002096:	9102      	str	r1, [sp, #8]
 8002098:	4584      	cmp	ip, r0
 800209a:	d906      	bls.n	80020aa <__aeabi_dmul+0x1f6>
 800209c:	4688      	mov	r8, r1
 800209e:	2180      	movs	r1, #128	; 0x80
 80020a0:	0249      	lsls	r1, r1, #9
 80020a2:	468c      	mov	ip, r1
 80020a4:	44e0      	add	r8, ip
 80020a6:	4641      	mov	r1, r8
 80020a8:	9102      	str	r1, [sp, #8]
 80020aa:	0436      	lsls	r6, r6, #16
 80020ac:	0c01      	lsrs	r1, r0, #16
 80020ae:	0c36      	lsrs	r6, r6, #16
 80020b0:	0400      	lsls	r0, r0, #16
 80020b2:	468b      	mov	fp, r1
 80020b4:	1981      	adds	r1, r0, r6
 80020b6:	0c1e      	lsrs	r6, r3, #16
 80020b8:	041b      	lsls	r3, r3, #16
 80020ba:	0c1b      	lsrs	r3, r3, #16
 80020bc:	9103      	str	r1, [sp, #12]
 80020be:	0019      	movs	r1, r3
 80020c0:	4379      	muls	r1, r7
 80020c2:	468c      	mov	ip, r1
 80020c4:	0028      	movs	r0, r5
 80020c6:	4375      	muls	r5, r6
 80020c8:	4465      	add	r5, ip
 80020ca:	46a8      	mov	r8, r5
 80020cc:	4358      	muls	r0, r3
 80020ce:	0c05      	lsrs	r5, r0, #16
 80020d0:	4445      	add	r5, r8
 80020d2:	4377      	muls	r7, r6
 80020d4:	42a9      	cmp	r1, r5
 80020d6:	d903      	bls.n	80020e0 <__aeabi_dmul+0x22c>
 80020d8:	2180      	movs	r1, #128	; 0x80
 80020da:	0249      	lsls	r1, r1, #9
 80020dc:	468c      	mov	ip, r1
 80020de:	4467      	add	r7, ip
 80020e0:	0c29      	lsrs	r1, r5, #16
 80020e2:	468c      	mov	ip, r1
 80020e4:	0039      	movs	r1, r7
 80020e6:	0400      	lsls	r0, r0, #16
 80020e8:	0c00      	lsrs	r0, r0, #16
 80020ea:	042d      	lsls	r5, r5, #16
 80020ec:	182d      	adds	r5, r5, r0
 80020ee:	4461      	add	r1, ip
 80020f0:	44ab      	add	fp, r5
 80020f2:	9105      	str	r1, [sp, #20]
 80020f4:	4659      	mov	r1, fp
 80020f6:	9104      	str	r1, [sp, #16]
 80020f8:	9901      	ldr	r1, [sp, #4]
 80020fa:	040f      	lsls	r7, r1, #16
 80020fc:	0c3f      	lsrs	r7, r7, #16
 80020fe:	0c08      	lsrs	r0, r1, #16
 8002100:	0039      	movs	r1, r7
 8002102:	4351      	muls	r1, r2
 8002104:	4342      	muls	r2, r0
 8002106:	4690      	mov	r8, r2
 8002108:	0002      	movs	r2, r0
 800210a:	468c      	mov	ip, r1
 800210c:	0c09      	lsrs	r1, r1, #16
 800210e:	468b      	mov	fp, r1
 8002110:	4362      	muls	r2, r4
 8002112:	437c      	muls	r4, r7
 8002114:	4444      	add	r4, r8
 8002116:	445c      	add	r4, fp
 8002118:	45a0      	cmp	r8, r4
 800211a:	d903      	bls.n	8002124 <__aeabi_dmul+0x270>
 800211c:	2180      	movs	r1, #128	; 0x80
 800211e:	0249      	lsls	r1, r1, #9
 8002120:	4688      	mov	r8, r1
 8002122:	4442      	add	r2, r8
 8002124:	0c21      	lsrs	r1, r4, #16
 8002126:	4688      	mov	r8, r1
 8002128:	4661      	mov	r1, ip
 800212a:	0409      	lsls	r1, r1, #16
 800212c:	0c09      	lsrs	r1, r1, #16
 800212e:	468c      	mov	ip, r1
 8002130:	0039      	movs	r1, r7
 8002132:	4359      	muls	r1, r3
 8002134:	4343      	muls	r3, r0
 8002136:	4370      	muls	r0, r6
 8002138:	437e      	muls	r6, r7
 800213a:	0c0f      	lsrs	r7, r1, #16
 800213c:	18f6      	adds	r6, r6, r3
 800213e:	0424      	lsls	r4, r4, #16
 8002140:	19be      	adds	r6, r7, r6
 8002142:	4464      	add	r4, ip
 8002144:	4442      	add	r2, r8
 8002146:	468c      	mov	ip, r1
 8002148:	42b3      	cmp	r3, r6
 800214a:	d903      	bls.n	8002154 <__aeabi_dmul+0x2a0>
 800214c:	2380      	movs	r3, #128	; 0x80
 800214e:	025b      	lsls	r3, r3, #9
 8002150:	4698      	mov	r8, r3
 8002152:	4440      	add	r0, r8
 8002154:	9b02      	ldr	r3, [sp, #8]
 8002156:	4661      	mov	r1, ip
 8002158:	4698      	mov	r8, r3
 800215a:	9b04      	ldr	r3, [sp, #16]
 800215c:	0437      	lsls	r7, r6, #16
 800215e:	4443      	add	r3, r8
 8002160:	469b      	mov	fp, r3
 8002162:	45ab      	cmp	fp, r5
 8002164:	41ad      	sbcs	r5, r5
 8002166:	426b      	negs	r3, r5
 8002168:	040d      	lsls	r5, r1, #16
 800216a:	9905      	ldr	r1, [sp, #20]
 800216c:	0c2d      	lsrs	r5, r5, #16
 800216e:	468c      	mov	ip, r1
 8002170:	197f      	adds	r7, r7, r5
 8002172:	4467      	add	r7, ip
 8002174:	18fd      	adds	r5, r7, r3
 8002176:	46a8      	mov	r8, r5
 8002178:	465d      	mov	r5, fp
 800217a:	192d      	adds	r5, r5, r4
 800217c:	42a5      	cmp	r5, r4
 800217e:	41a4      	sbcs	r4, r4
 8002180:	4693      	mov	fp, r2
 8002182:	4264      	negs	r4, r4
 8002184:	46a4      	mov	ip, r4
 8002186:	44c3      	add	fp, r8
 8002188:	44dc      	add	ip, fp
 800218a:	428f      	cmp	r7, r1
 800218c:	41bf      	sbcs	r7, r7
 800218e:	4598      	cmp	r8, r3
 8002190:	419b      	sbcs	r3, r3
 8002192:	4593      	cmp	fp, r2
 8002194:	4192      	sbcs	r2, r2
 8002196:	45a4      	cmp	ip, r4
 8002198:	41a4      	sbcs	r4, r4
 800219a:	425b      	negs	r3, r3
 800219c:	427f      	negs	r7, r7
 800219e:	431f      	orrs	r7, r3
 80021a0:	0c36      	lsrs	r6, r6, #16
 80021a2:	4252      	negs	r2, r2
 80021a4:	4264      	negs	r4, r4
 80021a6:	19bf      	adds	r7, r7, r6
 80021a8:	4322      	orrs	r2, r4
 80021aa:	18bf      	adds	r7, r7, r2
 80021ac:	4662      	mov	r2, ip
 80021ae:	1838      	adds	r0, r7, r0
 80021b0:	0243      	lsls	r3, r0, #9
 80021b2:	0dd2      	lsrs	r2, r2, #23
 80021b4:	9903      	ldr	r1, [sp, #12]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	026a      	lsls	r2, r5, #9
 80021ba:	430a      	orrs	r2, r1
 80021bc:	1e50      	subs	r0, r2, #1
 80021be:	4182      	sbcs	r2, r0
 80021c0:	4661      	mov	r1, ip
 80021c2:	0ded      	lsrs	r5, r5, #23
 80021c4:	432a      	orrs	r2, r5
 80021c6:	024e      	lsls	r6, r1, #9
 80021c8:	4332      	orrs	r2, r6
 80021ca:	01d9      	lsls	r1, r3, #7
 80021cc:	d400      	bmi.n	80021d0 <__aeabi_dmul+0x31c>
 80021ce:	e0b3      	b.n	8002338 <__aeabi_dmul+0x484>
 80021d0:	2601      	movs	r6, #1
 80021d2:	0850      	lsrs	r0, r2, #1
 80021d4:	4032      	ands	r2, r6
 80021d6:	4302      	orrs	r2, r0
 80021d8:	07de      	lsls	r6, r3, #31
 80021da:	4332      	orrs	r2, r6
 80021dc:	085b      	lsrs	r3, r3, #1
 80021de:	4c22      	ldr	r4, [pc, #136]	; (8002268 <__aeabi_dmul+0x3b4>)
 80021e0:	4454      	add	r4, sl
 80021e2:	2c00      	cmp	r4, #0
 80021e4:	dd62      	ble.n	80022ac <__aeabi_dmul+0x3f8>
 80021e6:	0751      	lsls	r1, r2, #29
 80021e8:	d009      	beq.n	80021fe <__aeabi_dmul+0x34a>
 80021ea:	200f      	movs	r0, #15
 80021ec:	4010      	ands	r0, r2
 80021ee:	2804      	cmp	r0, #4
 80021f0:	d005      	beq.n	80021fe <__aeabi_dmul+0x34a>
 80021f2:	1d10      	adds	r0, r2, #4
 80021f4:	4290      	cmp	r0, r2
 80021f6:	4192      	sbcs	r2, r2
 80021f8:	4252      	negs	r2, r2
 80021fa:	189b      	adds	r3, r3, r2
 80021fc:	0002      	movs	r2, r0
 80021fe:	01d9      	lsls	r1, r3, #7
 8002200:	d504      	bpl.n	800220c <__aeabi_dmul+0x358>
 8002202:	2480      	movs	r4, #128	; 0x80
 8002204:	4819      	ldr	r0, [pc, #100]	; (800226c <__aeabi_dmul+0x3b8>)
 8002206:	00e4      	lsls	r4, r4, #3
 8002208:	4003      	ands	r3, r0
 800220a:	4454      	add	r4, sl
 800220c:	4818      	ldr	r0, [pc, #96]	; (8002270 <__aeabi_dmul+0x3bc>)
 800220e:	4284      	cmp	r4, r0
 8002210:	dd00      	ble.n	8002214 <__aeabi_dmul+0x360>
 8002212:	e727      	b.n	8002064 <__aeabi_dmul+0x1b0>
 8002214:	075e      	lsls	r6, r3, #29
 8002216:	025b      	lsls	r3, r3, #9
 8002218:	08d2      	lsrs	r2, r2, #3
 800221a:	0b1f      	lsrs	r7, r3, #12
 800221c:	0563      	lsls	r3, r4, #21
 800221e:	4316      	orrs	r6, r2
 8002220:	0d5b      	lsrs	r3, r3, #21
 8002222:	e6b2      	b.n	8001f8a <__aeabi_dmul+0xd6>
 8002224:	2300      	movs	r3, #0
 8002226:	4699      	mov	r9, r3
 8002228:	3301      	adds	r3, #1
 800222a:	2704      	movs	r7, #4
 800222c:	2600      	movs	r6, #0
 800222e:	469b      	mov	fp, r3
 8002230:	e664      	b.n	8001efc <__aeabi_dmul+0x48>
 8002232:	2303      	movs	r3, #3
 8002234:	9701      	str	r7, [sp, #4]
 8002236:	4681      	mov	r9, r0
 8002238:	270c      	movs	r7, #12
 800223a:	469b      	mov	fp, r3
 800223c:	e65e      	b.n	8001efc <__aeabi_dmul+0x48>
 800223e:	2201      	movs	r2, #1
 8002240:	2001      	movs	r0, #1
 8002242:	4317      	orrs	r7, r2
 8002244:	2200      	movs	r2, #0
 8002246:	e676      	b.n	8001f36 <__aeabi_dmul+0x82>
 8002248:	2303      	movs	r3, #3
 800224a:	2003      	movs	r0, #3
 800224c:	431f      	orrs	r7, r3
 800224e:	4643      	mov	r3, r8
 8002250:	e671      	b.n	8001f36 <__aeabi_dmul+0x82>
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	000007ff 	.word	0x000007ff
 8002258:	fffffc01 	.word	0xfffffc01
 800225c:	0800c38c 	.word	0x0800c38c
 8002260:	800fffff 	.word	0x800fffff
 8002264:	fffffc0d 	.word	0xfffffc0d
 8002268:	000003ff 	.word	0x000003ff
 800226c:	feffffff 	.word	0xfeffffff
 8002270:	000007fe 	.word	0x000007fe
 8002274:	2300      	movs	r3, #0
 8002276:	2780      	movs	r7, #128	; 0x80
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	033f      	lsls	r7, r7, #12
 800227c:	2600      	movs	r6, #0
 800227e:	4b43      	ldr	r3, [pc, #268]	; (800238c <__aeabi_dmul+0x4d8>)
 8002280:	e683      	b.n	8001f8a <__aeabi_dmul+0xd6>
 8002282:	9b01      	ldr	r3, [sp, #4]
 8002284:	0032      	movs	r2, r6
 8002286:	46a4      	mov	ip, r4
 8002288:	4658      	mov	r0, fp
 800228a:	e670      	b.n	8001f6e <__aeabi_dmul+0xba>
 800228c:	46ac      	mov	ip, r5
 800228e:	e66e      	b.n	8001f6e <__aeabi_dmul+0xba>
 8002290:	2780      	movs	r7, #128	; 0x80
 8002292:	9901      	ldr	r1, [sp, #4]
 8002294:	033f      	lsls	r7, r7, #12
 8002296:	4239      	tst	r1, r7
 8002298:	d02d      	beq.n	80022f6 <__aeabi_dmul+0x442>
 800229a:	423b      	tst	r3, r7
 800229c:	d12b      	bne.n	80022f6 <__aeabi_dmul+0x442>
 800229e:	431f      	orrs	r7, r3
 80022a0:	033f      	lsls	r7, r7, #12
 80022a2:	0b3f      	lsrs	r7, r7, #12
 80022a4:	9500      	str	r5, [sp, #0]
 80022a6:	0016      	movs	r6, r2
 80022a8:	4b38      	ldr	r3, [pc, #224]	; (800238c <__aeabi_dmul+0x4d8>)
 80022aa:	e66e      	b.n	8001f8a <__aeabi_dmul+0xd6>
 80022ac:	2501      	movs	r5, #1
 80022ae:	1b2d      	subs	r5, r5, r4
 80022b0:	2d38      	cmp	r5, #56	; 0x38
 80022b2:	dd00      	ble.n	80022b6 <__aeabi_dmul+0x402>
 80022b4:	e666      	b.n	8001f84 <__aeabi_dmul+0xd0>
 80022b6:	2d1f      	cmp	r5, #31
 80022b8:	dc40      	bgt.n	800233c <__aeabi_dmul+0x488>
 80022ba:	4835      	ldr	r0, [pc, #212]	; (8002390 <__aeabi_dmul+0x4dc>)
 80022bc:	001c      	movs	r4, r3
 80022be:	4450      	add	r0, sl
 80022c0:	0016      	movs	r6, r2
 80022c2:	4082      	lsls	r2, r0
 80022c4:	4084      	lsls	r4, r0
 80022c6:	40ee      	lsrs	r6, r5
 80022c8:	1e50      	subs	r0, r2, #1
 80022ca:	4182      	sbcs	r2, r0
 80022cc:	4334      	orrs	r4, r6
 80022ce:	4314      	orrs	r4, r2
 80022d0:	40eb      	lsrs	r3, r5
 80022d2:	0762      	lsls	r2, r4, #29
 80022d4:	d009      	beq.n	80022ea <__aeabi_dmul+0x436>
 80022d6:	220f      	movs	r2, #15
 80022d8:	4022      	ands	r2, r4
 80022da:	2a04      	cmp	r2, #4
 80022dc:	d005      	beq.n	80022ea <__aeabi_dmul+0x436>
 80022de:	0022      	movs	r2, r4
 80022e0:	1d14      	adds	r4, r2, #4
 80022e2:	4294      	cmp	r4, r2
 80022e4:	4180      	sbcs	r0, r0
 80022e6:	4240      	negs	r0, r0
 80022e8:	181b      	adds	r3, r3, r0
 80022ea:	021a      	lsls	r2, r3, #8
 80022ec:	d53e      	bpl.n	800236c <__aeabi_dmul+0x4b8>
 80022ee:	2301      	movs	r3, #1
 80022f0:	2700      	movs	r7, #0
 80022f2:	2600      	movs	r6, #0
 80022f4:	e649      	b.n	8001f8a <__aeabi_dmul+0xd6>
 80022f6:	2780      	movs	r7, #128	; 0x80
 80022f8:	9b01      	ldr	r3, [sp, #4]
 80022fa:	033f      	lsls	r7, r7, #12
 80022fc:	431f      	orrs	r7, r3
 80022fe:	033f      	lsls	r7, r7, #12
 8002300:	0b3f      	lsrs	r7, r7, #12
 8002302:	9400      	str	r4, [sp, #0]
 8002304:	4b21      	ldr	r3, [pc, #132]	; (800238c <__aeabi_dmul+0x4d8>)
 8002306:	e640      	b.n	8001f8a <__aeabi_dmul+0xd6>
 8002308:	0003      	movs	r3, r0
 800230a:	465a      	mov	r2, fp
 800230c:	3b28      	subs	r3, #40	; 0x28
 800230e:	409a      	lsls	r2, r3
 8002310:	2600      	movs	r6, #0
 8002312:	9201      	str	r2, [sp, #4]
 8002314:	e66d      	b.n	8001ff2 <__aeabi_dmul+0x13e>
 8002316:	4658      	mov	r0, fp
 8002318:	f000 fcc8 	bl	8002cac <__clzsi2>
 800231c:	3020      	adds	r0, #32
 800231e:	e657      	b.n	8001fd0 <__aeabi_dmul+0x11c>
 8002320:	0003      	movs	r3, r0
 8002322:	4652      	mov	r2, sl
 8002324:	3b28      	subs	r3, #40	; 0x28
 8002326:	409a      	lsls	r2, r3
 8002328:	0013      	movs	r3, r2
 800232a:	2200      	movs	r2, #0
 800232c:	e693      	b.n	8002056 <__aeabi_dmul+0x1a2>
 800232e:	4650      	mov	r0, sl
 8002330:	f000 fcbc 	bl	8002cac <__clzsi2>
 8002334:	3020      	adds	r0, #32
 8002336:	e67b      	b.n	8002030 <__aeabi_dmul+0x17c>
 8002338:	46ca      	mov	sl, r9
 800233a:	e750      	b.n	80021de <__aeabi_dmul+0x32a>
 800233c:	201f      	movs	r0, #31
 800233e:	001e      	movs	r6, r3
 8002340:	4240      	negs	r0, r0
 8002342:	1b04      	subs	r4, r0, r4
 8002344:	40e6      	lsrs	r6, r4
 8002346:	2d20      	cmp	r5, #32
 8002348:	d003      	beq.n	8002352 <__aeabi_dmul+0x49e>
 800234a:	4c12      	ldr	r4, [pc, #72]	; (8002394 <__aeabi_dmul+0x4e0>)
 800234c:	4454      	add	r4, sl
 800234e:	40a3      	lsls	r3, r4
 8002350:	431a      	orrs	r2, r3
 8002352:	1e50      	subs	r0, r2, #1
 8002354:	4182      	sbcs	r2, r0
 8002356:	4332      	orrs	r2, r6
 8002358:	2607      	movs	r6, #7
 800235a:	2700      	movs	r7, #0
 800235c:	4016      	ands	r6, r2
 800235e:	d009      	beq.n	8002374 <__aeabi_dmul+0x4c0>
 8002360:	200f      	movs	r0, #15
 8002362:	2300      	movs	r3, #0
 8002364:	4010      	ands	r0, r2
 8002366:	0014      	movs	r4, r2
 8002368:	2804      	cmp	r0, #4
 800236a:	d1b9      	bne.n	80022e0 <__aeabi_dmul+0x42c>
 800236c:	0022      	movs	r2, r4
 800236e:	075e      	lsls	r6, r3, #29
 8002370:	025b      	lsls	r3, r3, #9
 8002372:	0b1f      	lsrs	r7, r3, #12
 8002374:	08d2      	lsrs	r2, r2, #3
 8002376:	4316      	orrs	r6, r2
 8002378:	2300      	movs	r3, #0
 800237a:	e606      	b.n	8001f8a <__aeabi_dmul+0xd6>
 800237c:	2780      	movs	r7, #128	; 0x80
 800237e:	033f      	lsls	r7, r7, #12
 8002380:	431f      	orrs	r7, r3
 8002382:	033f      	lsls	r7, r7, #12
 8002384:	0b3f      	lsrs	r7, r7, #12
 8002386:	0016      	movs	r6, r2
 8002388:	4b00      	ldr	r3, [pc, #0]	; (800238c <__aeabi_dmul+0x4d8>)
 800238a:	e5fe      	b.n	8001f8a <__aeabi_dmul+0xd6>
 800238c:	000007ff 	.word	0x000007ff
 8002390:	0000041e 	.word	0x0000041e
 8002394:	0000043e 	.word	0x0000043e

08002398 <__aeabi_dsub>:
 8002398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800239a:	4657      	mov	r7, sl
 800239c:	464e      	mov	r6, r9
 800239e:	4645      	mov	r5, r8
 80023a0:	46de      	mov	lr, fp
 80023a2:	000c      	movs	r4, r1
 80023a4:	0309      	lsls	r1, r1, #12
 80023a6:	b5e0      	push	{r5, r6, r7, lr}
 80023a8:	0a49      	lsrs	r1, r1, #9
 80023aa:	0f46      	lsrs	r6, r0, #29
 80023ac:	005f      	lsls	r7, r3, #1
 80023ae:	4331      	orrs	r1, r6
 80023b0:	031e      	lsls	r6, r3, #12
 80023b2:	0fdb      	lsrs	r3, r3, #31
 80023b4:	0a76      	lsrs	r6, r6, #9
 80023b6:	469b      	mov	fp, r3
 80023b8:	0f53      	lsrs	r3, r2, #29
 80023ba:	4333      	orrs	r3, r6
 80023bc:	4ec8      	ldr	r6, [pc, #800]	; (80026e0 <__aeabi_dsub+0x348>)
 80023be:	0065      	lsls	r5, r4, #1
 80023c0:	00c0      	lsls	r0, r0, #3
 80023c2:	0fe4      	lsrs	r4, r4, #31
 80023c4:	00d2      	lsls	r2, r2, #3
 80023c6:	0d6d      	lsrs	r5, r5, #21
 80023c8:	46a2      	mov	sl, r4
 80023ca:	4681      	mov	r9, r0
 80023cc:	0d7f      	lsrs	r7, r7, #21
 80023ce:	469c      	mov	ip, r3
 80023d0:	4690      	mov	r8, r2
 80023d2:	42b7      	cmp	r7, r6
 80023d4:	d100      	bne.n	80023d8 <__aeabi_dsub+0x40>
 80023d6:	e0b9      	b.n	800254c <__aeabi_dsub+0x1b4>
 80023d8:	465b      	mov	r3, fp
 80023da:	2601      	movs	r6, #1
 80023dc:	4073      	eors	r3, r6
 80023de:	469b      	mov	fp, r3
 80023e0:	1bee      	subs	r6, r5, r7
 80023e2:	45a3      	cmp	fp, r4
 80023e4:	d100      	bne.n	80023e8 <__aeabi_dsub+0x50>
 80023e6:	e083      	b.n	80024f0 <__aeabi_dsub+0x158>
 80023e8:	2e00      	cmp	r6, #0
 80023ea:	dd63      	ble.n	80024b4 <__aeabi_dsub+0x11c>
 80023ec:	2f00      	cmp	r7, #0
 80023ee:	d000      	beq.n	80023f2 <__aeabi_dsub+0x5a>
 80023f0:	e0b1      	b.n	8002556 <__aeabi_dsub+0x1be>
 80023f2:	4663      	mov	r3, ip
 80023f4:	4313      	orrs	r3, r2
 80023f6:	d100      	bne.n	80023fa <__aeabi_dsub+0x62>
 80023f8:	e123      	b.n	8002642 <__aeabi_dsub+0x2aa>
 80023fa:	1e73      	subs	r3, r6, #1
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d000      	beq.n	8002402 <__aeabi_dsub+0x6a>
 8002400:	e1ba      	b.n	8002778 <__aeabi_dsub+0x3e0>
 8002402:	1a86      	subs	r6, r0, r2
 8002404:	4663      	mov	r3, ip
 8002406:	42b0      	cmp	r0, r6
 8002408:	4180      	sbcs	r0, r0
 800240a:	2501      	movs	r5, #1
 800240c:	1ac9      	subs	r1, r1, r3
 800240e:	4240      	negs	r0, r0
 8002410:	1a09      	subs	r1, r1, r0
 8002412:	020b      	lsls	r3, r1, #8
 8002414:	d400      	bmi.n	8002418 <__aeabi_dsub+0x80>
 8002416:	e147      	b.n	80026a8 <__aeabi_dsub+0x310>
 8002418:	0249      	lsls	r1, r1, #9
 800241a:	0a4b      	lsrs	r3, r1, #9
 800241c:	4698      	mov	r8, r3
 800241e:	4643      	mov	r3, r8
 8002420:	2b00      	cmp	r3, #0
 8002422:	d100      	bne.n	8002426 <__aeabi_dsub+0x8e>
 8002424:	e189      	b.n	800273a <__aeabi_dsub+0x3a2>
 8002426:	4640      	mov	r0, r8
 8002428:	f000 fc40 	bl	8002cac <__clzsi2>
 800242c:	0003      	movs	r3, r0
 800242e:	3b08      	subs	r3, #8
 8002430:	2b1f      	cmp	r3, #31
 8002432:	dd00      	ble.n	8002436 <__aeabi_dsub+0x9e>
 8002434:	e17c      	b.n	8002730 <__aeabi_dsub+0x398>
 8002436:	2220      	movs	r2, #32
 8002438:	0030      	movs	r0, r6
 800243a:	1ad2      	subs	r2, r2, r3
 800243c:	4641      	mov	r1, r8
 800243e:	40d0      	lsrs	r0, r2
 8002440:	4099      	lsls	r1, r3
 8002442:	0002      	movs	r2, r0
 8002444:	409e      	lsls	r6, r3
 8002446:	430a      	orrs	r2, r1
 8002448:	429d      	cmp	r5, r3
 800244a:	dd00      	ble.n	800244e <__aeabi_dsub+0xb6>
 800244c:	e16a      	b.n	8002724 <__aeabi_dsub+0x38c>
 800244e:	1b5d      	subs	r5, r3, r5
 8002450:	1c6b      	adds	r3, r5, #1
 8002452:	2b1f      	cmp	r3, #31
 8002454:	dd00      	ble.n	8002458 <__aeabi_dsub+0xc0>
 8002456:	e194      	b.n	8002782 <__aeabi_dsub+0x3ea>
 8002458:	2120      	movs	r1, #32
 800245a:	0010      	movs	r0, r2
 800245c:	0035      	movs	r5, r6
 800245e:	1ac9      	subs	r1, r1, r3
 8002460:	408e      	lsls	r6, r1
 8002462:	40da      	lsrs	r2, r3
 8002464:	4088      	lsls	r0, r1
 8002466:	40dd      	lsrs	r5, r3
 8002468:	1e71      	subs	r1, r6, #1
 800246a:	418e      	sbcs	r6, r1
 800246c:	0011      	movs	r1, r2
 800246e:	2207      	movs	r2, #7
 8002470:	4328      	orrs	r0, r5
 8002472:	2500      	movs	r5, #0
 8002474:	4306      	orrs	r6, r0
 8002476:	4032      	ands	r2, r6
 8002478:	2a00      	cmp	r2, #0
 800247a:	d009      	beq.n	8002490 <__aeabi_dsub+0xf8>
 800247c:	230f      	movs	r3, #15
 800247e:	4033      	ands	r3, r6
 8002480:	2b04      	cmp	r3, #4
 8002482:	d005      	beq.n	8002490 <__aeabi_dsub+0xf8>
 8002484:	1d33      	adds	r3, r6, #4
 8002486:	42b3      	cmp	r3, r6
 8002488:	41b6      	sbcs	r6, r6
 800248a:	4276      	negs	r6, r6
 800248c:	1989      	adds	r1, r1, r6
 800248e:	001e      	movs	r6, r3
 8002490:	020b      	lsls	r3, r1, #8
 8002492:	d400      	bmi.n	8002496 <__aeabi_dsub+0xfe>
 8002494:	e23d      	b.n	8002912 <__aeabi_dsub+0x57a>
 8002496:	1c6a      	adds	r2, r5, #1
 8002498:	4b91      	ldr	r3, [pc, #580]	; (80026e0 <__aeabi_dsub+0x348>)
 800249a:	0555      	lsls	r5, r2, #21
 800249c:	0d6d      	lsrs	r5, r5, #21
 800249e:	429a      	cmp	r2, r3
 80024a0:	d100      	bne.n	80024a4 <__aeabi_dsub+0x10c>
 80024a2:	e119      	b.n	80026d8 <__aeabi_dsub+0x340>
 80024a4:	4a8f      	ldr	r2, [pc, #572]	; (80026e4 <__aeabi_dsub+0x34c>)
 80024a6:	08f6      	lsrs	r6, r6, #3
 80024a8:	400a      	ands	r2, r1
 80024aa:	0757      	lsls	r7, r2, #29
 80024ac:	0252      	lsls	r2, r2, #9
 80024ae:	4337      	orrs	r7, r6
 80024b0:	0b12      	lsrs	r2, r2, #12
 80024b2:	e09b      	b.n	80025ec <__aeabi_dsub+0x254>
 80024b4:	2e00      	cmp	r6, #0
 80024b6:	d000      	beq.n	80024ba <__aeabi_dsub+0x122>
 80024b8:	e0c5      	b.n	8002646 <__aeabi_dsub+0x2ae>
 80024ba:	1c6e      	adds	r6, r5, #1
 80024bc:	0576      	lsls	r6, r6, #21
 80024be:	0d76      	lsrs	r6, r6, #21
 80024c0:	2e01      	cmp	r6, #1
 80024c2:	dc00      	bgt.n	80024c6 <__aeabi_dsub+0x12e>
 80024c4:	e148      	b.n	8002758 <__aeabi_dsub+0x3c0>
 80024c6:	4667      	mov	r7, ip
 80024c8:	1a86      	subs	r6, r0, r2
 80024ca:	1bcb      	subs	r3, r1, r7
 80024cc:	42b0      	cmp	r0, r6
 80024ce:	41bf      	sbcs	r7, r7
 80024d0:	427f      	negs	r7, r7
 80024d2:	46b8      	mov	r8, r7
 80024d4:	001f      	movs	r7, r3
 80024d6:	4643      	mov	r3, r8
 80024d8:	1aff      	subs	r7, r7, r3
 80024da:	003b      	movs	r3, r7
 80024dc:	46b8      	mov	r8, r7
 80024de:	021b      	lsls	r3, r3, #8
 80024e0:	d500      	bpl.n	80024e4 <__aeabi_dsub+0x14c>
 80024e2:	e15f      	b.n	80027a4 <__aeabi_dsub+0x40c>
 80024e4:	4337      	orrs	r7, r6
 80024e6:	d19a      	bne.n	800241e <__aeabi_dsub+0x86>
 80024e8:	2200      	movs	r2, #0
 80024ea:	2400      	movs	r4, #0
 80024ec:	2500      	movs	r5, #0
 80024ee:	e079      	b.n	80025e4 <__aeabi_dsub+0x24c>
 80024f0:	2e00      	cmp	r6, #0
 80024f2:	dc00      	bgt.n	80024f6 <__aeabi_dsub+0x15e>
 80024f4:	e0fa      	b.n	80026ec <__aeabi_dsub+0x354>
 80024f6:	2f00      	cmp	r7, #0
 80024f8:	d100      	bne.n	80024fc <__aeabi_dsub+0x164>
 80024fa:	e08d      	b.n	8002618 <__aeabi_dsub+0x280>
 80024fc:	4b78      	ldr	r3, [pc, #480]	; (80026e0 <__aeabi_dsub+0x348>)
 80024fe:	429d      	cmp	r5, r3
 8002500:	d067      	beq.n	80025d2 <__aeabi_dsub+0x23a>
 8002502:	2380      	movs	r3, #128	; 0x80
 8002504:	4667      	mov	r7, ip
 8002506:	041b      	lsls	r3, r3, #16
 8002508:	431f      	orrs	r7, r3
 800250a:	46bc      	mov	ip, r7
 800250c:	2e38      	cmp	r6, #56	; 0x38
 800250e:	dc00      	bgt.n	8002512 <__aeabi_dsub+0x17a>
 8002510:	e152      	b.n	80027b8 <__aeabi_dsub+0x420>
 8002512:	4663      	mov	r3, ip
 8002514:	4313      	orrs	r3, r2
 8002516:	1e5a      	subs	r2, r3, #1
 8002518:	4193      	sbcs	r3, r2
 800251a:	181e      	adds	r6, r3, r0
 800251c:	4286      	cmp	r6, r0
 800251e:	4180      	sbcs	r0, r0
 8002520:	4240      	negs	r0, r0
 8002522:	1809      	adds	r1, r1, r0
 8002524:	020b      	lsls	r3, r1, #8
 8002526:	d400      	bmi.n	800252a <__aeabi_dsub+0x192>
 8002528:	e0be      	b.n	80026a8 <__aeabi_dsub+0x310>
 800252a:	4b6d      	ldr	r3, [pc, #436]	; (80026e0 <__aeabi_dsub+0x348>)
 800252c:	3501      	adds	r5, #1
 800252e:	429d      	cmp	r5, r3
 8002530:	d100      	bne.n	8002534 <__aeabi_dsub+0x19c>
 8002532:	e0d2      	b.n	80026da <__aeabi_dsub+0x342>
 8002534:	4a6b      	ldr	r2, [pc, #428]	; (80026e4 <__aeabi_dsub+0x34c>)
 8002536:	0873      	lsrs	r3, r6, #1
 8002538:	400a      	ands	r2, r1
 800253a:	2101      	movs	r1, #1
 800253c:	400e      	ands	r6, r1
 800253e:	431e      	orrs	r6, r3
 8002540:	0851      	lsrs	r1, r2, #1
 8002542:	07d3      	lsls	r3, r2, #31
 8002544:	2207      	movs	r2, #7
 8002546:	431e      	orrs	r6, r3
 8002548:	4032      	ands	r2, r6
 800254a:	e795      	b.n	8002478 <__aeabi_dsub+0xe0>
 800254c:	001e      	movs	r6, r3
 800254e:	4316      	orrs	r6, r2
 8002550:	d000      	beq.n	8002554 <__aeabi_dsub+0x1bc>
 8002552:	e745      	b.n	80023e0 <__aeabi_dsub+0x48>
 8002554:	e740      	b.n	80023d8 <__aeabi_dsub+0x40>
 8002556:	4b62      	ldr	r3, [pc, #392]	; (80026e0 <__aeabi_dsub+0x348>)
 8002558:	429d      	cmp	r5, r3
 800255a:	d03a      	beq.n	80025d2 <__aeabi_dsub+0x23a>
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	4667      	mov	r7, ip
 8002560:	041b      	lsls	r3, r3, #16
 8002562:	431f      	orrs	r7, r3
 8002564:	46bc      	mov	ip, r7
 8002566:	2e38      	cmp	r6, #56	; 0x38
 8002568:	dd00      	ble.n	800256c <__aeabi_dsub+0x1d4>
 800256a:	e0eb      	b.n	8002744 <__aeabi_dsub+0x3ac>
 800256c:	2e1f      	cmp	r6, #31
 800256e:	dc00      	bgt.n	8002572 <__aeabi_dsub+0x1da>
 8002570:	e13a      	b.n	80027e8 <__aeabi_dsub+0x450>
 8002572:	0033      	movs	r3, r6
 8002574:	4667      	mov	r7, ip
 8002576:	3b20      	subs	r3, #32
 8002578:	40df      	lsrs	r7, r3
 800257a:	003b      	movs	r3, r7
 800257c:	2e20      	cmp	r6, #32
 800257e:	d005      	beq.n	800258c <__aeabi_dsub+0x1f4>
 8002580:	2740      	movs	r7, #64	; 0x40
 8002582:	1bbf      	subs	r7, r7, r6
 8002584:	4666      	mov	r6, ip
 8002586:	40be      	lsls	r6, r7
 8002588:	4332      	orrs	r2, r6
 800258a:	4690      	mov	r8, r2
 800258c:	4646      	mov	r6, r8
 800258e:	1e72      	subs	r2, r6, #1
 8002590:	4196      	sbcs	r6, r2
 8002592:	4333      	orrs	r3, r6
 8002594:	e0da      	b.n	800274c <__aeabi_dsub+0x3b4>
 8002596:	2b00      	cmp	r3, #0
 8002598:	d100      	bne.n	800259c <__aeabi_dsub+0x204>
 800259a:	e214      	b.n	80029c6 <__aeabi_dsub+0x62e>
 800259c:	4663      	mov	r3, ip
 800259e:	4313      	orrs	r3, r2
 80025a0:	d100      	bne.n	80025a4 <__aeabi_dsub+0x20c>
 80025a2:	e168      	b.n	8002876 <__aeabi_dsub+0x4de>
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	074e      	lsls	r6, r1, #29
 80025a8:	08c0      	lsrs	r0, r0, #3
 80025aa:	08c9      	lsrs	r1, r1, #3
 80025ac:	031b      	lsls	r3, r3, #12
 80025ae:	4306      	orrs	r6, r0
 80025b0:	4219      	tst	r1, r3
 80025b2:	d008      	beq.n	80025c6 <__aeabi_dsub+0x22e>
 80025b4:	4660      	mov	r0, ip
 80025b6:	08c0      	lsrs	r0, r0, #3
 80025b8:	4218      	tst	r0, r3
 80025ba:	d104      	bne.n	80025c6 <__aeabi_dsub+0x22e>
 80025bc:	4663      	mov	r3, ip
 80025be:	0001      	movs	r1, r0
 80025c0:	08d2      	lsrs	r2, r2, #3
 80025c2:	075e      	lsls	r6, r3, #29
 80025c4:	4316      	orrs	r6, r2
 80025c6:	00f3      	lsls	r3, r6, #3
 80025c8:	4699      	mov	r9, r3
 80025ca:	00c9      	lsls	r1, r1, #3
 80025cc:	0f72      	lsrs	r2, r6, #29
 80025ce:	4d44      	ldr	r5, [pc, #272]	; (80026e0 <__aeabi_dsub+0x348>)
 80025d0:	4311      	orrs	r1, r2
 80025d2:	464b      	mov	r3, r9
 80025d4:	08de      	lsrs	r6, r3, #3
 80025d6:	4b42      	ldr	r3, [pc, #264]	; (80026e0 <__aeabi_dsub+0x348>)
 80025d8:	074f      	lsls	r7, r1, #29
 80025da:	4337      	orrs	r7, r6
 80025dc:	08ca      	lsrs	r2, r1, #3
 80025de:	429d      	cmp	r5, r3
 80025e0:	d100      	bne.n	80025e4 <__aeabi_dsub+0x24c>
 80025e2:	e06e      	b.n	80026c2 <__aeabi_dsub+0x32a>
 80025e4:	0312      	lsls	r2, r2, #12
 80025e6:	056d      	lsls	r5, r5, #21
 80025e8:	0b12      	lsrs	r2, r2, #12
 80025ea:	0d6d      	lsrs	r5, r5, #21
 80025ec:	2100      	movs	r1, #0
 80025ee:	0312      	lsls	r2, r2, #12
 80025f0:	0b13      	lsrs	r3, r2, #12
 80025f2:	0d0a      	lsrs	r2, r1, #20
 80025f4:	0512      	lsls	r2, r2, #20
 80025f6:	431a      	orrs	r2, r3
 80025f8:	4b3b      	ldr	r3, [pc, #236]	; (80026e8 <__aeabi_dsub+0x350>)
 80025fa:	052d      	lsls	r5, r5, #20
 80025fc:	4013      	ands	r3, r2
 80025fe:	432b      	orrs	r3, r5
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	07e4      	lsls	r4, r4, #31
 8002604:	085b      	lsrs	r3, r3, #1
 8002606:	4323      	orrs	r3, r4
 8002608:	0038      	movs	r0, r7
 800260a:	0019      	movs	r1, r3
 800260c:	bc3c      	pop	{r2, r3, r4, r5}
 800260e:	4690      	mov	r8, r2
 8002610:	4699      	mov	r9, r3
 8002612:	46a2      	mov	sl, r4
 8002614:	46ab      	mov	fp, r5
 8002616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002618:	4663      	mov	r3, ip
 800261a:	4313      	orrs	r3, r2
 800261c:	d011      	beq.n	8002642 <__aeabi_dsub+0x2aa>
 800261e:	1e73      	subs	r3, r6, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d000      	beq.n	8002626 <__aeabi_dsub+0x28e>
 8002624:	e107      	b.n	8002836 <__aeabi_dsub+0x49e>
 8002626:	1886      	adds	r6, r0, r2
 8002628:	4286      	cmp	r6, r0
 800262a:	4180      	sbcs	r0, r0
 800262c:	4461      	add	r1, ip
 800262e:	4240      	negs	r0, r0
 8002630:	1809      	adds	r1, r1, r0
 8002632:	2501      	movs	r5, #1
 8002634:	020b      	lsls	r3, r1, #8
 8002636:	d537      	bpl.n	80026a8 <__aeabi_dsub+0x310>
 8002638:	2502      	movs	r5, #2
 800263a:	e77b      	b.n	8002534 <__aeabi_dsub+0x19c>
 800263c:	003e      	movs	r6, r7
 800263e:	4661      	mov	r1, ip
 8002640:	4691      	mov	r9, r2
 8002642:	0035      	movs	r5, r6
 8002644:	e7c5      	b.n	80025d2 <__aeabi_dsub+0x23a>
 8002646:	465c      	mov	r4, fp
 8002648:	2d00      	cmp	r5, #0
 800264a:	d000      	beq.n	800264e <__aeabi_dsub+0x2b6>
 800264c:	e0e1      	b.n	8002812 <__aeabi_dsub+0x47a>
 800264e:	000b      	movs	r3, r1
 8002650:	4303      	orrs	r3, r0
 8002652:	d0f3      	beq.n	800263c <__aeabi_dsub+0x2a4>
 8002654:	1c73      	adds	r3, r6, #1
 8002656:	d100      	bne.n	800265a <__aeabi_dsub+0x2c2>
 8002658:	e1ac      	b.n	80029b4 <__aeabi_dsub+0x61c>
 800265a:	4b21      	ldr	r3, [pc, #132]	; (80026e0 <__aeabi_dsub+0x348>)
 800265c:	429f      	cmp	r7, r3
 800265e:	d100      	bne.n	8002662 <__aeabi_dsub+0x2ca>
 8002660:	e13a      	b.n	80028d8 <__aeabi_dsub+0x540>
 8002662:	43f3      	mvns	r3, r6
 8002664:	2b38      	cmp	r3, #56	; 0x38
 8002666:	dd00      	ble.n	800266a <__aeabi_dsub+0x2d2>
 8002668:	e16f      	b.n	800294a <__aeabi_dsub+0x5b2>
 800266a:	2b1f      	cmp	r3, #31
 800266c:	dd00      	ble.n	8002670 <__aeabi_dsub+0x2d8>
 800266e:	e18c      	b.n	800298a <__aeabi_dsub+0x5f2>
 8002670:	2520      	movs	r5, #32
 8002672:	000e      	movs	r6, r1
 8002674:	1aed      	subs	r5, r5, r3
 8002676:	40ae      	lsls	r6, r5
 8002678:	46b0      	mov	r8, r6
 800267a:	0006      	movs	r6, r0
 800267c:	46aa      	mov	sl, r5
 800267e:	40de      	lsrs	r6, r3
 8002680:	4645      	mov	r5, r8
 8002682:	4335      	orrs	r5, r6
 8002684:	002e      	movs	r6, r5
 8002686:	4655      	mov	r5, sl
 8002688:	40d9      	lsrs	r1, r3
 800268a:	40a8      	lsls	r0, r5
 800268c:	4663      	mov	r3, ip
 800268e:	1e45      	subs	r5, r0, #1
 8002690:	41a8      	sbcs	r0, r5
 8002692:	1a5b      	subs	r3, r3, r1
 8002694:	469c      	mov	ip, r3
 8002696:	4330      	orrs	r0, r6
 8002698:	1a16      	subs	r6, r2, r0
 800269a:	42b2      	cmp	r2, r6
 800269c:	4192      	sbcs	r2, r2
 800269e:	4663      	mov	r3, ip
 80026a0:	4252      	negs	r2, r2
 80026a2:	1a99      	subs	r1, r3, r2
 80026a4:	003d      	movs	r5, r7
 80026a6:	e6b4      	b.n	8002412 <__aeabi_dsub+0x7a>
 80026a8:	2207      	movs	r2, #7
 80026aa:	4032      	ands	r2, r6
 80026ac:	2a00      	cmp	r2, #0
 80026ae:	d000      	beq.n	80026b2 <__aeabi_dsub+0x31a>
 80026b0:	e6e4      	b.n	800247c <__aeabi_dsub+0xe4>
 80026b2:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <__aeabi_dsub+0x348>)
 80026b4:	08f6      	lsrs	r6, r6, #3
 80026b6:	074f      	lsls	r7, r1, #29
 80026b8:	4337      	orrs	r7, r6
 80026ba:	08ca      	lsrs	r2, r1, #3
 80026bc:	429d      	cmp	r5, r3
 80026be:	d000      	beq.n	80026c2 <__aeabi_dsub+0x32a>
 80026c0:	e790      	b.n	80025e4 <__aeabi_dsub+0x24c>
 80026c2:	003b      	movs	r3, r7
 80026c4:	4313      	orrs	r3, r2
 80026c6:	d100      	bne.n	80026ca <__aeabi_dsub+0x332>
 80026c8:	e1a6      	b.n	8002a18 <__aeabi_dsub+0x680>
 80026ca:	2380      	movs	r3, #128	; 0x80
 80026cc:	031b      	lsls	r3, r3, #12
 80026ce:	431a      	orrs	r2, r3
 80026d0:	0312      	lsls	r2, r2, #12
 80026d2:	0b12      	lsrs	r2, r2, #12
 80026d4:	4d02      	ldr	r5, [pc, #8]	; (80026e0 <__aeabi_dsub+0x348>)
 80026d6:	e789      	b.n	80025ec <__aeabi_dsub+0x254>
 80026d8:	0015      	movs	r5, r2
 80026da:	2200      	movs	r2, #0
 80026dc:	2700      	movs	r7, #0
 80026de:	e785      	b.n	80025ec <__aeabi_dsub+0x254>
 80026e0:	000007ff 	.word	0x000007ff
 80026e4:	ff7fffff 	.word	0xff7fffff
 80026e8:	800fffff 	.word	0x800fffff
 80026ec:	2e00      	cmp	r6, #0
 80026ee:	d000      	beq.n	80026f2 <__aeabi_dsub+0x35a>
 80026f0:	e0c7      	b.n	8002882 <__aeabi_dsub+0x4ea>
 80026f2:	1c6b      	adds	r3, r5, #1
 80026f4:	055e      	lsls	r6, r3, #21
 80026f6:	0d76      	lsrs	r6, r6, #21
 80026f8:	2e01      	cmp	r6, #1
 80026fa:	dc00      	bgt.n	80026fe <__aeabi_dsub+0x366>
 80026fc:	e0f0      	b.n	80028e0 <__aeabi_dsub+0x548>
 80026fe:	4dc8      	ldr	r5, [pc, #800]	; (8002a20 <__aeabi_dsub+0x688>)
 8002700:	42ab      	cmp	r3, r5
 8002702:	d100      	bne.n	8002706 <__aeabi_dsub+0x36e>
 8002704:	e0b9      	b.n	800287a <__aeabi_dsub+0x4e2>
 8002706:	1885      	adds	r5, r0, r2
 8002708:	000a      	movs	r2, r1
 800270a:	4285      	cmp	r5, r0
 800270c:	4189      	sbcs	r1, r1
 800270e:	4462      	add	r2, ip
 8002710:	4249      	negs	r1, r1
 8002712:	1851      	adds	r1, r2, r1
 8002714:	2207      	movs	r2, #7
 8002716:	07ce      	lsls	r6, r1, #31
 8002718:	086d      	lsrs	r5, r5, #1
 800271a:	432e      	orrs	r6, r5
 800271c:	0849      	lsrs	r1, r1, #1
 800271e:	4032      	ands	r2, r6
 8002720:	001d      	movs	r5, r3
 8002722:	e6a9      	b.n	8002478 <__aeabi_dsub+0xe0>
 8002724:	49bf      	ldr	r1, [pc, #764]	; (8002a24 <__aeabi_dsub+0x68c>)
 8002726:	1aed      	subs	r5, r5, r3
 8002728:	4011      	ands	r1, r2
 800272a:	2207      	movs	r2, #7
 800272c:	4032      	ands	r2, r6
 800272e:	e6a3      	b.n	8002478 <__aeabi_dsub+0xe0>
 8002730:	0032      	movs	r2, r6
 8002732:	3828      	subs	r0, #40	; 0x28
 8002734:	4082      	lsls	r2, r0
 8002736:	2600      	movs	r6, #0
 8002738:	e686      	b.n	8002448 <__aeabi_dsub+0xb0>
 800273a:	0030      	movs	r0, r6
 800273c:	f000 fab6 	bl	8002cac <__clzsi2>
 8002740:	3020      	adds	r0, #32
 8002742:	e673      	b.n	800242c <__aeabi_dsub+0x94>
 8002744:	4663      	mov	r3, ip
 8002746:	4313      	orrs	r3, r2
 8002748:	1e5a      	subs	r2, r3, #1
 800274a:	4193      	sbcs	r3, r2
 800274c:	1ac6      	subs	r6, r0, r3
 800274e:	42b0      	cmp	r0, r6
 8002750:	4180      	sbcs	r0, r0
 8002752:	4240      	negs	r0, r0
 8002754:	1a09      	subs	r1, r1, r0
 8002756:	e65c      	b.n	8002412 <__aeabi_dsub+0x7a>
 8002758:	000e      	movs	r6, r1
 800275a:	4667      	mov	r7, ip
 800275c:	4306      	orrs	r6, r0
 800275e:	4317      	orrs	r7, r2
 8002760:	2d00      	cmp	r5, #0
 8002762:	d15e      	bne.n	8002822 <__aeabi_dsub+0x48a>
 8002764:	2e00      	cmp	r6, #0
 8002766:	d000      	beq.n	800276a <__aeabi_dsub+0x3d2>
 8002768:	e0f3      	b.n	8002952 <__aeabi_dsub+0x5ba>
 800276a:	2f00      	cmp	r7, #0
 800276c:	d100      	bne.n	8002770 <__aeabi_dsub+0x3d8>
 800276e:	e11e      	b.n	80029ae <__aeabi_dsub+0x616>
 8002770:	465c      	mov	r4, fp
 8002772:	4661      	mov	r1, ip
 8002774:	4691      	mov	r9, r2
 8002776:	e72c      	b.n	80025d2 <__aeabi_dsub+0x23a>
 8002778:	4fa9      	ldr	r7, [pc, #676]	; (8002a20 <__aeabi_dsub+0x688>)
 800277a:	42be      	cmp	r6, r7
 800277c:	d07b      	beq.n	8002876 <__aeabi_dsub+0x4de>
 800277e:	001e      	movs	r6, r3
 8002780:	e6f1      	b.n	8002566 <__aeabi_dsub+0x1ce>
 8002782:	0010      	movs	r0, r2
 8002784:	3d1f      	subs	r5, #31
 8002786:	40e8      	lsrs	r0, r5
 8002788:	2b20      	cmp	r3, #32
 800278a:	d003      	beq.n	8002794 <__aeabi_dsub+0x3fc>
 800278c:	2140      	movs	r1, #64	; 0x40
 800278e:	1acb      	subs	r3, r1, r3
 8002790:	409a      	lsls	r2, r3
 8002792:	4316      	orrs	r6, r2
 8002794:	1e73      	subs	r3, r6, #1
 8002796:	419e      	sbcs	r6, r3
 8002798:	2207      	movs	r2, #7
 800279a:	4306      	orrs	r6, r0
 800279c:	4032      	ands	r2, r6
 800279e:	2100      	movs	r1, #0
 80027a0:	2500      	movs	r5, #0
 80027a2:	e783      	b.n	80026ac <__aeabi_dsub+0x314>
 80027a4:	1a16      	subs	r6, r2, r0
 80027a6:	4663      	mov	r3, ip
 80027a8:	42b2      	cmp	r2, r6
 80027aa:	4180      	sbcs	r0, r0
 80027ac:	1a59      	subs	r1, r3, r1
 80027ae:	4240      	negs	r0, r0
 80027b0:	1a0b      	subs	r3, r1, r0
 80027b2:	4698      	mov	r8, r3
 80027b4:	465c      	mov	r4, fp
 80027b6:	e632      	b.n	800241e <__aeabi_dsub+0x86>
 80027b8:	2e1f      	cmp	r6, #31
 80027ba:	dd00      	ble.n	80027be <__aeabi_dsub+0x426>
 80027bc:	e0ab      	b.n	8002916 <__aeabi_dsub+0x57e>
 80027be:	2720      	movs	r7, #32
 80027c0:	1bbb      	subs	r3, r7, r6
 80027c2:	469a      	mov	sl, r3
 80027c4:	4663      	mov	r3, ip
 80027c6:	4657      	mov	r7, sl
 80027c8:	40bb      	lsls	r3, r7
 80027ca:	4699      	mov	r9, r3
 80027cc:	0013      	movs	r3, r2
 80027ce:	464f      	mov	r7, r9
 80027d0:	40f3      	lsrs	r3, r6
 80027d2:	431f      	orrs	r7, r3
 80027d4:	003b      	movs	r3, r7
 80027d6:	4657      	mov	r7, sl
 80027d8:	40ba      	lsls	r2, r7
 80027da:	1e57      	subs	r7, r2, #1
 80027dc:	41ba      	sbcs	r2, r7
 80027de:	4313      	orrs	r3, r2
 80027e0:	4662      	mov	r2, ip
 80027e2:	40f2      	lsrs	r2, r6
 80027e4:	1889      	adds	r1, r1, r2
 80027e6:	e698      	b.n	800251a <__aeabi_dsub+0x182>
 80027e8:	2720      	movs	r7, #32
 80027ea:	1bbb      	subs	r3, r7, r6
 80027ec:	469a      	mov	sl, r3
 80027ee:	4663      	mov	r3, ip
 80027f0:	4657      	mov	r7, sl
 80027f2:	40bb      	lsls	r3, r7
 80027f4:	4699      	mov	r9, r3
 80027f6:	0013      	movs	r3, r2
 80027f8:	464f      	mov	r7, r9
 80027fa:	40f3      	lsrs	r3, r6
 80027fc:	431f      	orrs	r7, r3
 80027fe:	003b      	movs	r3, r7
 8002800:	4657      	mov	r7, sl
 8002802:	40ba      	lsls	r2, r7
 8002804:	1e57      	subs	r7, r2, #1
 8002806:	41ba      	sbcs	r2, r7
 8002808:	4313      	orrs	r3, r2
 800280a:	4662      	mov	r2, ip
 800280c:	40f2      	lsrs	r2, r6
 800280e:	1a89      	subs	r1, r1, r2
 8002810:	e79c      	b.n	800274c <__aeabi_dsub+0x3b4>
 8002812:	4b83      	ldr	r3, [pc, #524]	; (8002a20 <__aeabi_dsub+0x688>)
 8002814:	429f      	cmp	r7, r3
 8002816:	d05f      	beq.n	80028d8 <__aeabi_dsub+0x540>
 8002818:	2580      	movs	r5, #128	; 0x80
 800281a:	042d      	lsls	r5, r5, #16
 800281c:	4273      	negs	r3, r6
 800281e:	4329      	orrs	r1, r5
 8002820:	e720      	b.n	8002664 <__aeabi_dsub+0x2cc>
 8002822:	2e00      	cmp	r6, #0
 8002824:	d10c      	bne.n	8002840 <__aeabi_dsub+0x4a8>
 8002826:	2f00      	cmp	r7, #0
 8002828:	d100      	bne.n	800282c <__aeabi_dsub+0x494>
 800282a:	e0d0      	b.n	80029ce <__aeabi_dsub+0x636>
 800282c:	465c      	mov	r4, fp
 800282e:	4661      	mov	r1, ip
 8002830:	4691      	mov	r9, r2
 8002832:	4d7b      	ldr	r5, [pc, #492]	; (8002a20 <__aeabi_dsub+0x688>)
 8002834:	e6cd      	b.n	80025d2 <__aeabi_dsub+0x23a>
 8002836:	4f7a      	ldr	r7, [pc, #488]	; (8002a20 <__aeabi_dsub+0x688>)
 8002838:	42be      	cmp	r6, r7
 800283a:	d01c      	beq.n	8002876 <__aeabi_dsub+0x4de>
 800283c:	001e      	movs	r6, r3
 800283e:	e665      	b.n	800250c <__aeabi_dsub+0x174>
 8002840:	2f00      	cmp	r7, #0
 8002842:	d018      	beq.n	8002876 <__aeabi_dsub+0x4de>
 8002844:	08c0      	lsrs	r0, r0, #3
 8002846:	074e      	lsls	r6, r1, #29
 8002848:	4306      	orrs	r6, r0
 800284a:	2080      	movs	r0, #128	; 0x80
 800284c:	08c9      	lsrs	r1, r1, #3
 800284e:	0300      	lsls	r0, r0, #12
 8002850:	4201      	tst	r1, r0
 8002852:	d008      	beq.n	8002866 <__aeabi_dsub+0x4ce>
 8002854:	4663      	mov	r3, ip
 8002856:	08dc      	lsrs	r4, r3, #3
 8002858:	4204      	tst	r4, r0
 800285a:	d104      	bne.n	8002866 <__aeabi_dsub+0x4ce>
 800285c:	0021      	movs	r1, r4
 800285e:	46da      	mov	sl, fp
 8002860:	08d2      	lsrs	r2, r2, #3
 8002862:	075e      	lsls	r6, r3, #29
 8002864:	4316      	orrs	r6, r2
 8002866:	00f3      	lsls	r3, r6, #3
 8002868:	4699      	mov	r9, r3
 800286a:	2401      	movs	r4, #1
 800286c:	4653      	mov	r3, sl
 800286e:	00c9      	lsls	r1, r1, #3
 8002870:	0f72      	lsrs	r2, r6, #29
 8002872:	4311      	orrs	r1, r2
 8002874:	401c      	ands	r4, r3
 8002876:	4d6a      	ldr	r5, [pc, #424]	; (8002a20 <__aeabi_dsub+0x688>)
 8002878:	e6ab      	b.n	80025d2 <__aeabi_dsub+0x23a>
 800287a:	001d      	movs	r5, r3
 800287c:	2200      	movs	r2, #0
 800287e:	2700      	movs	r7, #0
 8002880:	e6b4      	b.n	80025ec <__aeabi_dsub+0x254>
 8002882:	2d00      	cmp	r5, #0
 8002884:	d159      	bne.n	800293a <__aeabi_dsub+0x5a2>
 8002886:	000b      	movs	r3, r1
 8002888:	4303      	orrs	r3, r0
 800288a:	d100      	bne.n	800288e <__aeabi_dsub+0x4f6>
 800288c:	e6d6      	b.n	800263c <__aeabi_dsub+0x2a4>
 800288e:	1c73      	adds	r3, r6, #1
 8002890:	d100      	bne.n	8002894 <__aeabi_dsub+0x4fc>
 8002892:	e0b2      	b.n	80029fa <__aeabi_dsub+0x662>
 8002894:	4b62      	ldr	r3, [pc, #392]	; (8002a20 <__aeabi_dsub+0x688>)
 8002896:	429f      	cmp	r7, r3
 8002898:	d01e      	beq.n	80028d8 <__aeabi_dsub+0x540>
 800289a:	43f3      	mvns	r3, r6
 800289c:	2b38      	cmp	r3, #56	; 0x38
 800289e:	dc6f      	bgt.n	8002980 <__aeabi_dsub+0x5e8>
 80028a0:	2b1f      	cmp	r3, #31
 80028a2:	dd00      	ble.n	80028a6 <__aeabi_dsub+0x50e>
 80028a4:	e097      	b.n	80029d6 <__aeabi_dsub+0x63e>
 80028a6:	2520      	movs	r5, #32
 80028a8:	000e      	movs	r6, r1
 80028aa:	1aed      	subs	r5, r5, r3
 80028ac:	40ae      	lsls	r6, r5
 80028ae:	46b0      	mov	r8, r6
 80028b0:	0006      	movs	r6, r0
 80028b2:	46aa      	mov	sl, r5
 80028b4:	40de      	lsrs	r6, r3
 80028b6:	4645      	mov	r5, r8
 80028b8:	4335      	orrs	r5, r6
 80028ba:	002e      	movs	r6, r5
 80028bc:	4655      	mov	r5, sl
 80028be:	40a8      	lsls	r0, r5
 80028c0:	40d9      	lsrs	r1, r3
 80028c2:	1e45      	subs	r5, r0, #1
 80028c4:	41a8      	sbcs	r0, r5
 80028c6:	448c      	add	ip, r1
 80028c8:	4306      	orrs	r6, r0
 80028ca:	18b6      	adds	r6, r6, r2
 80028cc:	4296      	cmp	r6, r2
 80028ce:	4192      	sbcs	r2, r2
 80028d0:	4251      	negs	r1, r2
 80028d2:	4461      	add	r1, ip
 80028d4:	003d      	movs	r5, r7
 80028d6:	e625      	b.n	8002524 <__aeabi_dsub+0x18c>
 80028d8:	003d      	movs	r5, r7
 80028da:	4661      	mov	r1, ip
 80028dc:	4691      	mov	r9, r2
 80028de:	e678      	b.n	80025d2 <__aeabi_dsub+0x23a>
 80028e0:	000b      	movs	r3, r1
 80028e2:	4303      	orrs	r3, r0
 80028e4:	2d00      	cmp	r5, #0
 80028e6:	d000      	beq.n	80028ea <__aeabi_dsub+0x552>
 80028e8:	e655      	b.n	8002596 <__aeabi_dsub+0x1fe>
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f5      	beq.n	80028da <__aeabi_dsub+0x542>
 80028ee:	4663      	mov	r3, ip
 80028f0:	4313      	orrs	r3, r2
 80028f2:	d100      	bne.n	80028f6 <__aeabi_dsub+0x55e>
 80028f4:	e66d      	b.n	80025d2 <__aeabi_dsub+0x23a>
 80028f6:	1886      	adds	r6, r0, r2
 80028f8:	4286      	cmp	r6, r0
 80028fa:	4180      	sbcs	r0, r0
 80028fc:	4461      	add	r1, ip
 80028fe:	4240      	negs	r0, r0
 8002900:	1809      	adds	r1, r1, r0
 8002902:	2200      	movs	r2, #0
 8002904:	020b      	lsls	r3, r1, #8
 8002906:	d400      	bmi.n	800290a <__aeabi_dsub+0x572>
 8002908:	e6d0      	b.n	80026ac <__aeabi_dsub+0x314>
 800290a:	4b46      	ldr	r3, [pc, #280]	; (8002a24 <__aeabi_dsub+0x68c>)
 800290c:	3501      	adds	r5, #1
 800290e:	4019      	ands	r1, r3
 8002910:	e5b2      	b.n	8002478 <__aeabi_dsub+0xe0>
 8002912:	46b1      	mov	r9, r6
 8002914:	e65d      	b.n	80025d2 <__aeabi_dsub+0x23a>
 8002916:	0033      	movs	r3, r6
 8002918:	4667      	mov	r7, ip
 800291a:	3b20      	subs	r3, #32
 800291c:	40df      	lsrs	r7, r3
 800291e:	003b      	movs	r3, r7
 8002920:	2e20      	cmp	r6, #32
 8002922:	d005      	beq.n	8002930 <__aeabi_dsub+0x598>
 8002924:	2740      	movs	r7, #64	; 0x40
 8002926:	1bbf      	subs	r7, r7, r6
 8002928:	4666      	mov	r6, ip
 800292a:	40be      	lsls	r6, r7
 800292c:	4332      	orrs	r2, r6
 800292e:	4690      	mov	r8, r2
 8002930:	4646      	mov	r6, r8
 8002932:	1e72      	subs	r2, r6, #1
 8002934:	4196      	sbcs	r6, r2
 8002936:	4333      	orrs	r3, r6
 8002938:	e5ef      	b.n	800251a <__aeabi_dsub+0x182>
 800293a:	4b39      	ldr	r3, [pc, #228]	; (8002a20 <__aeabi_dsub+0x688>)
 800293c:	429f      	cmp	r7, r3
 800293e:	d0cb      	beq.n	80028d8 <__aeabi_dsub+0x540>
 8002940:	2580      	movs	r5, #128	; 0x80
 8002942:	042d      	lsls	r5, r5, #16
 8002944:	4273      	negs	r3, r6
 8002946:	4329      	orrs	r1, r5
 8002948:	e7a8      	b.n	800289c <__aeabi_dsub+0x504>
 800294a:	4308      	orrs	r0, r1
 800294c:	1e41      	subs	r1, r0, #1
 800294e:	4188      	sbcs	r0, r1
 8002950:	e6a2      	b.n	8002698 <__aeabi_dsub+0x300>
 8002952:	2f00      	cmp	r7, #0
 8002954:	d100      	bne.n	8002958 <__aeabi_dsub+0x5c0>
 8002956:	e63c      	b.n	80025d2 <__aeabi_dsub+0x23a>
 8002958:	4663      	mov	r3, ip
 800295a:	1a86      	subs	r6, r0, r2
 800295c:	1acf      	subs	r7, r1, r3
 800295e:	42b0      	cmp	r0, r6
 8002960:	419b      	sbcs	r3, r3
 8002962:	425b      	negs	r3, r3
 8002964:	1afb      	subs	r3, r7, r3
 8002966:	4698      	mov	r8, r3
 8002968:	021b      	lsls	r3, r3, #8
 800296a:	d54e      	bpl.n	8002a0a <__aeabi_dsub+0x672>
 800296c:	1a16      	subs	r6, r2, r0
 800296e:	4663      	mov	r3, ip
 8002970:	42b2      	cmp	r2, r6
 8002972:	4192      	sbcs	r2, r2
 8002974:	1a59      	subs	r1, r3, r1
 8002976:	4252      	negs	r2, r2
 8002978:	1a89      	subs	r1, r1, r2
 800297a:	465c      	mov	r4, fp
 800297c:	2200      	movs	r2, #0
 800297e:	e57b      	b.n	8002478 <__aeabi_dsub+0xe0>
 8002980:	4301      	orrs	r1, r0
 8002982:	000e      	movs	r6, r1
 8002984:	1e71      	subs	r1, r6, #1
 8002986:	418e      	sbcs	r6, r1
 8002988:	e79f      	b.n	80028ca <__aeabi_dsub+0x532>
 800298a:	001d      	movs	r5, r3
 800298c:	000e      	movs	r6, r1
 800298e:	3d20      	subs	r5, #32
 8002990:	40ee      	lsrs	r6, r5
 8002992:	46b0      	mov	r8, r6
 8002994:	2b20      	cmp	r3, #32
 8002996:	d004      	beq.n	80029a2 <__aeabi_dsub+0x60a>
 8002998:	2540      	movs	r5, #64	; 0x40
 800299a:	1aeb      	subs	r3, r5, r3
 800299c:	4099      	lsls	r1, r3
 800299e:	4308      	orrs	r0, r1
 80029a0:	4681      	mov	r9, r0
 80029a2:	4648      	mov	r0, r9
 80029a4:	4643      	mov	r3, r8
 80029a6:	1e41      	subs	r1, r0, #1
 80029a8:	4188      	sbcs	r0, r1
 80029aa:	4318      	orrs	r0, r3
 80029ac:	e674      	b.n	8002698 <__aeabi_dsub+0x300>
 80029ae:	2200      	movs	r2, #0
 80029b0:	2400      	movs	r4, #0
 80029b2:	e617      	b.n	80025e4 <__aeabi_dsub+0x24c>
 80029b4:	1a16      	subs	r6, r2, r0
 80029b6:	4663      	mov	r3, ip
 80029b8:	42b2      	cmp	r2, r6
 80029ba:	4192      	sbcs	r2, r2
 80029bc:	1a59      	subs	r1, r3, r1
 80029be:	4252      	negs	r2, r2
 80029c0:	1a89      	subs	r1, r1, r2
 80029c2:	003d      	movs	r5, r7
 80029c4:	e525      	b.n	8002412 <__aeabi_dsub+0x7a>
 80029c6:	4661      	mov	r1, ip
 80029c8:	4691      	mov	r9, r2
 80029ca:	4d15      	ldr	r5, [pc, #84]	; (8002a20 <__aeabi_dsub+0x688>)
 80029cc:	e601      	b.n	80025d2 <__aeabi_dsub+0x23a>
 80029ce:	2280      	movs	r2, #128	; 0x80
 80029d0:	2400      	movs	r4, #0
 80029d2:	0312      	lsls	r2, r2, #12
 80029d4:	e679      	b.n	80026ca <__aeabi_dsub+0x332>
 80029d6:	001d      	movs	r5, r3
 80029d8:	000e      	movs	r6, r1
 80029da:	3d20      	subs	r5, #32
 80029dc:	40ee      	lsrs	r6, r5
 80029de:	46b0      	mov	r8, r6
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	d004      	beq.n	80029ee <__aeabi_dsub+0x656>
 80029e4:	2540      	movs	r5, #64	; 0x40
 80029e6:	1aeb      	subs	r3, r5, r3
 80029e8:	4099      	lsls	r1, r3
 80029ea:	4308      	orrs	r0, r1
 80029ec:	4681      	mov	r9, r0
 80029ee:	464e      	mov	r6, r9
 80029f0:	4643      	mov	r3, r8
 80029f2:	1e71      	subs	r1, r6, #1
 80029f4:	418e      	sbcs	r6, r1
 80029f6:	431e      	orrs	r6, r3
 80029f8:	e767      	b.n	80028ca <__aeabi_dsub+0x532>
 80029fa:	1886      	adds	r6, r0, r2
 80029fc:	4296      	cmp	r6, r2
 80029fe:	419b      	sbcs	r3, r3
 8002a00:	4461      	add	r1, ip
 8002a02:	425b      	negs	r3, r3
 8002a04:	18c9      	adds	r1, r1, r3
 8002a06:	003d      	movs	r5, r7
 8002a08:	e58c      	b.n	8002524 <__aeabi_dsub+0x18c>
 8002a0a:	4647      	mov	r7, r8
 8002a0c:	4337      	orrs	r7, r6
 8002a0e:	d0ce      	beq.n	80029ae <__aeabi_dsub+0x616>
 8002a10:	2207      	movs	r2, #7
 8002a12:	4641      	mov	r1, r8
 8002a14:	4032      	ands	r2, r6
 8002a16:	e649      	b.n	80026ac <__aeabi_dsub+0x314>
 8002a18:	2700      	movs	r7, #0
 8002a1a:	003a      	movs	r2, r7
 8002a1c:	e5e6      	b.n	80025ec <__aeabi_dsub+0x254>
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	000007ff 	.word	0x000007ff
 8002a24:	ff7fffff 	.word	0xff7fffff

08002a28 <__aeabi_dcmpun>:
 8002a28:	b570      	push	{r4, r5, r6, lr}
 8002a2a:	4e0c      	ldr	r6, [pc, #48]	; (8002a5c <__aeabi_dcmpun+0x34>)
 8002a2c:	030d      	lsls	r5, r1, #12
 8002a2e:	031c      	lsls	r4, r3, #12
 8002a30:	0049      	lsls	r1, r1, #1
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	0b2d      	lsrs	r5, r5, #12
 8002a36:	0d49      	lsrs	r1, r1, #21
 8002a38:	0b24      	lsrs	r4, r4, #12
 8002a3a:	0d5b      	lsrs	r3, r3, #21
 8002a3c:	42b1      	cmp	r1, r6
 8002a3e:	d008      	beq.n	8002a52 <__aeabi_dcmpun+0x2a>
 8002a40:	4906      	ldr	r1, [pc, #24]	; (8002a5c <__aeabi_dcmpun+0x34>)
 8002a42:	2000      	movs	r0, #0
 8002a44:	428b      	cmp	r3, r1
 8002a46:	d103      	bne.n	8002a50 <__aeabi_dcmpun+0x28>
 8002a48:	4314      	orrs	r4, r2
 8002a4a:	0020      	movs	r0, r4
 8002a4c:	1e44      	subs	r4, r0, #1
 8002a4e:	41a0      	sbcs	r0, r4
 8002a50:	bd70      	pop	{r4, r5, r6, pc}
 8002a52:	4305      	orrs	r5, r0
 8002a54:	2001      	movs	r0, #1
 8002a56:	2d00      	cmp	r5, #0
 8002a58:	d1fa      	bne.n	8002a50 <__aeabi_dcmpun+0x28>
 8002a5a:	e7f1      	b.n	8002a40 <__aeabi_dcmpun+0x18>
 8002a5c:	000007ff 	.word	0x000007ff

08002a60 <__aeabi_d2iz>:
 8002a60:	b530      	push	{r4, r5, lr}
 8002a62:	4d14      	ldr	r5, [pc, #80]	; (8002ab4 <__aeabi_d2iz+0x54>)
 8002a64:	030a      	lsls	r2, r1, #12
 8002a66:	004b      	lsls	r3, r1, #1
 8002a68:	0b12      	lsrs	r2, r2, #12
 8002a6a:	0d5b      	lsrs	r3, r3, #21
 8002a6c:	0fc9      	lsrs	r1, r1, #31
 8002a6e:	2400      	movs	r4, #0
 8002a70:	42ab      	cmp	r3, r5
 8002a72:	dd11      	ble.n	8002a98 <__aeabi_d2iz+0x38>
 8002a74:	4c10      	ldr	r4, [pc, #64]	; (8002ab8 <__aeabi_d2iz+0x58>)
 8002a76:	42a3      	cmp	r3, r4
 8002a78:	dc10      	bgt.n	8002a9c <__aeabi_d2iz+0x3c>
 8002a7a:	2480      	movs	r4, #128	; 0x80
 8002a7c:	0364      	lsls	r4, r4, #13
 8002a7e:	4322      	orrs	r2, r4
 8002a80:	4c0e      	ldr	r4, [pc, #56]	; (8002abc <__aeabi_d2iz+0x5c>)
 8002a82:	1ae4      	subs	r4, r4, r3
 8002a84:	2c1f      	cmp	r4, #31
 8002a86:	dd0c      	ble.n	8002aa2 <__aeabi_d2iz+0x42>
 8002a88:	480d      	ldr	r0, [pc, #52]	; (8002ac0 <__aeabi_d2iz+0x60>)
 8002a8a:	1ac3      	subs	r3, r0, r3
 8002a8c:	40da      	lsrs	r2, r3
 8002a8e:	0013      	movs	r3, r2
 8002a90:	425c      	negs	r4, r3
 8002a92:	2900      	cmp	r1, #0
 8002a94:	d100      	bne.n	8002a98 <__aeabi_d2iz+0x38>
 8002a96:	001c      	movs	r4, r3
 8002a98:	0020      	movs	r0, r4
 8002a9a:	bd30      	pop	{r4, r5, pc}
 8002a9c:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <__aeabi_d2iz+0x64>)
 8002a9e:	18cc      	adds	r4, r1, r3
 8002aa0:	e7fa      	b.n	8002a98 <__aeabi_d2iz+0x38>
 8002aa2:	4d09      	ldr	r5, [pc, #36]	; (8002ac8 <__aeabi_d2iz+0x68>)
 8002aa4:	40e0      	lsrs	r0, r4
 8002aa6:	46ac      	mov	ip, r5
 8002aa8:	4463      	add	r3, ip
 8002aaa:	409a      	lsls	r2, r3
 8002aac:	0013      	movs	r3, r2
 8002aae:	4303      	orrs	r3, r0
 8002ab0:	e7ee      	b.n	8002a90 <__aeabi_d2iz+0x30>
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	000003fe 	.word	0x000003fe
 8002ab8:	0000041d 	.word	0x0000041d
 8002abc:	00000433 	.word	0x00000433
 8002ac0:	00000413 	.word	0x00000413
 8002ac4:	7fffffff 	.word	0x7fffffff
 8002ac8:	fffffbed 	.word	0xfffffbed

08002acc <__aeabi_i2d>:
 8002acc:	b570      	push	{r4, r5, r6, lr}
 8002ace:	2800      	cmp	r0, #0
 8002ad0:	d02d      	beq.n	8002b2e <__aeabi_i2d+0x62>
 8002ad2:	17c3      	asrs	r3, r0, #31
 8002ad4:	18c5      	adds	r5, r0, r3
 8002ad6:	405d      	eors	r5, r3
 8002ad8:	0fc4      	lsrs	r4, r0, #31
 8002ada:	0028      	movs	r0, r5
 8002adc:	f000 f8e6 	bl	8002cac <__clzsi2>
 8002ae0:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <__aeabi_i2d+0x6c>)
 8002ae2:	1a1b      	subs	r3, r3, r0
 8002ae4:	055b      	lsls	r3, r3, #21
 8002ae6:	0d5b      	lsrs	r3, r3, #21
 8002ae8:	280a      	cmp	r0, #10
 8002aea:	dd15      	ble.n	8002b18 <__aeabi_i2d+0x4c>
 8002aec:	380b      	subs	r0, #11
 8002aee:	4085      	lsls	r5, r0
 8002af0:	2200      	movs	r2, #0
 8002af2:	032d      	lsls	r5, r5, #12
 8002af4:	0b2d      	lsrs	r5, r5, #12
 8002af6:	2100      	movs	r1, #0
 8002af8:	0010      	movs	r0, r2
 8002afa:	032d      	lsls	r5, r5, #12
 8002afc:	0d0a      	lsrs	r2, r1, #20
 8002afe:	0b2d      	lsrs	r5, r5, #12
 8002b00:	0512      	lsls	r2, r2, #20
 8002b02:	432a      	orrs	r2, r5
 8002b04:	4d0d      	ldr	r5, [pc, #52]	; (8002b3c <__aeabi_i2d+0x70>)
 8002b06:	051b      	lsls	r3, r3, #20
 8002b08:	402a      	ands	r2, r5
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	07e4      	lsls	r4, r4, #31
 8002b10:	085b      	lsrs	r3, r3, #1
 8002b12:	4323      	orrs	r3, r4
 8002b14:	0019      	movs	r1, r3
 8002b16:	bd70      	pop	{r4, r5, r6, pc}
 8002b18:	0002      	movs	r2, r0
 8002b1a:	0029      	movs	r1, r5
 8002b1c:	3215      	adds	r2, #21
 8002b1e:	4091      	lsls	r1, r2
 8002b20:	000a      	movs	r2, r1
 8002b22:	210b      	movs	r1, #11
 8002b24:	1a08      	subs	r0, r1, r0
 8002b26:	40c5      	lsrs	r5, r0
 8002b28:	032d      	lsls	r5, r5, #12
 8002b2a:	0b2d      	lsrs	r5, r5, #12
 8002b2c:	e7e3      	b.n	8002af6 <__aeabi_i2d+0x2a>
 8002b2e:	2400      	movs	r4, #0
 8002b30:	2300      	movs	r3, #0
 8002b32:	2500      	movs	r5, #0
 8002b34:	2200      	movs	r2, #0
 8002b36:	e7de      	b.n	8002af6 <__aeabi_i2d+0x2a>
 8002b38:	0000041e 	.word	0x0000041e
 8002b3c:	800fffff 	.word	0x800fffff

08002b40 <__aeabi_ui2d>:
 8002b40:	b510      	push	{r4, lr}
 8002b42:	1e04      	subs	r4, r0, #0
 8002b44:	d025      	beq.n	8002b92 <__aeabi_ui2d+0x52>
 8002b46:	f000 f8b1 	bl	8002cac <__clzsi2>
 8002b4a:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <__aeabi_ui2d+0x5c>)
 8002b4c:	1a1b      	subs	r3, r3, r0
 8002b4e:	055b      	lsls	r3, r3, #21
 8002b50:	0d5b      	lsrs	r3, r3, #21
 8002b52:	280a      	cmp	r0, #10
 8002b54:	dd12      	ble.n	8002b7c <__aeabi_ui2d+0x3c>
 8002b56:	380b      	subs	r0, #11
 8002b58:	4084      	lsls	r4, r0
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	0324      	lsls	r4, r4, #12
 8002b5e:	0b24      	lsrs	r4, r4, #12
 8002b60:	2100      	movs	r1, #0
 8002b62:	0010      	movs	r0, r2
 8002b64:	0324      	lsls	r4, r4, #12
 8002b66:	0d0a      	lsrs	r2, r1, #20
 8002b68:	0b24      	lsrs	r4, r4, #12
 8002b6a:	0512      	lsls	r2, r2, #20
 8002b6c:	4322      	orrs	r2, r4
 8002b6e:	4c0c      	ldr	r4, [pc, #48]	; (8002ba0 <__aeabi_ui2d+0x60>)
 8002b70:	051b      	lsls	r3, r3, #20
 8002b72:	4022      	ands	r2, r4
 8002b74:	4313      	orrs	r3, r2
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	0859      	lsrs	r1, r3, #1
 8002b7a:	bd10      	pop	{r4, pc}
 8002b7c:	0002      	movs	r2, r0
 8002b7e:	0021      	movs	r1, r4
 8002b80:	3215      	adds	r2, #21
 8002b82:	4091      	lsls	r1, r2
 8002b84:	000a      	movs	r2, r1
 8002b86:	210b      	movs	r1, #11
 8002b88:	1a08      	subs	r0, r1, r0
 8002b8a:	40c4      	lsrs	r4, r0
 8002b8c:	0324      	lsls	r4, r4, #12
 8002b8e:	0b24      	lsrs	r4, r4, #12
 8002b90:	e7e6      	b.n	8002b60 <__aeabi_ui2d+0x20>
 8002b92:	2300      	movs	r3, #0
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e7e2      	b.n	8002b60 <__aeabi_ui2d+0x20>
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	0000041e 	.word	0x0000041e
 8002ba0:	800fffff 	.word	0x800fffff

08002ba4 <__aeabi_d2f>:
 8002ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ba6:	004c      	lsls	r4, r1, #1
 8002ba8:	0d64      	lsrs	r4, r4, #21
 8002baa:	030b      	lsls	r3, r1, #12
 8002bac:	1c62      	adds	r2, r4, #1
 8002bae:	0a5b      	lsrs	r3, r3, #9
 8002bb0:	0f46      	lsrs	r6, r0, #29
 8002bb2:	0552      	lsls	r2, r2, #21
 8002bb4:	0fc9      	lsrs	r1, r1, #31
 8002bb6:	431e      	orrs	r6, r3
 8002bb8:	00c5      	lsls	r5, r0, #3
 8002bba:	0d52      	lsrs	r2, r2, #21
 8002bbc:	2a01      	cmp	r2, #1
 8002bbe:	dd29      	ble.n	8002c14 <__aeabi_d2f+0x70>
 8002bc0:	4b37      	ldr	r3, [pc, #220]	; (8002ca0 <__aeabi_d2f+0xfc>)
 8002bc2:	18e7      	adds	r7, r4, r3
 8002bc4:	2ffe      	cmp	r7, #254	; 0xfe
 8002bc6:	dc1c      	bgt.n	8002c02 <__aeabi_d2f+0x5e>
 8002bc8:	2f00      	cmp	r7, #0
 8002bca:	dd3b      	ble.n	8002c44 <__aeabi_d2f+0xa0>
 8002bcc:	0180      	lsls	r0, r0, #6
 8002bce:	1e43      	subs	r3, r0, #1
 8002bd0:	4198      	sbcs	r0, r3
 8002bd2:	2207      	movs	r2, #7
 8002bd4:	00f3      	lsls	r3, r6, #3
 8002bd6:	0f6d      	lsrs	r5, r5, #29
 8002bd8:	4303      	orrs	r3, r0
 8002bda:	432b      	orrs	r3, r5
 8002bdc:	401a      	ands	r2, r3
 8002bde:	2a00      	cmp	r2, #0
 8002be0:	d004      	beq.n	8002bec <__aeabi_d2f+0x48>
 8002be2:	220f      	movs	r2, #15
 8002be4:	401a      	ands	r2, r3
 8002be6:	2a04      	cmp	r2, #4
 8002be8:	d000      	beq.n	8002bec <__aeabi_d2f+0x48>
 8002bea:	3304      	adds	r3, #4
 8002bec:	2280      	movs	r2, #128	; 0x80
 8002bee:	04d2      	lsls	r2, r2, #19
 8002bf0:	401a      	ands	r2, r3
 8002bf2:	d024      	beq.n	8002c3e <__aeabi_d2f+0x9a>
 8002bf4:	3701      	adds	r7, #1
 8002bf6:	b2fa      	uxtb	r2, r7
 8002bf8:	2fff      	cmp	r7, #255	; 0xff
 8002bfa:	d002      	beq.n	8002c02 <__aeabi_d2f+0x5e>
 8002bfc:	019b      	lsls	r3, r3, #6
 8002bfe:	0a58      	lsrs	r0, r3, #9
 8002c00:	e001      	b.n	8002c06 <__aeabi_d2f+0x62>
 8002c02:	22ff      	movs	r2, #255	; 0xff
 8002c04:	2000      	movs	r0, #0
 8002c06:	0240      	lsls	r0, r0, #9
 8002c08:	05d2      	lsls	r2, r2, #23
 8002c0a:	0a40      	lsrs	r0, r0, #9
 8002c0c:	07c9      	lsls	r1, r1, #31
 8002c0e:	4310      	orrs	r0, r2
 8002c10:	4308      	orrs	r0, r1
 8002c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c14:	4335      	orrs	r5, r6
 8002c16:	2c00      	cmp	r4, #0
 8002c18:	d104      	bne.n	8002c24 <__aeabi_d2f+0x80>
 8002c1a:	2d00      	cmp	r5, #0
 8002c1c:	d10a      	bne.n	8002c34 <__aeabi_d2f+0x90>
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2000      	movs	r0, #0
 8002c22:	e7f0      	b.n	8002c06 <__aeabi_d2f+0x62>
 8002c24:	2d00      	cmp	r5, #0
 8002c26:	d0ec      	beq.n	8002c02 <__aeabi_d2f+0x5e>
 8002c28:	2080      	movs	r0, #128	; 0x80
 8002c2a:	03c0      	lsls	r0, r0, #15
 8002c2c:	4330      	orrs	r0, r6
 8002c2e:	22ff      	movs	r2, #255	; 0xff
 8002c30:	e7e9      	b.n	8002c06 <__aeabi_d2f+0x62>
 8002c32:	2400      	movs	r4, #0
 8002c34:	2300      	movs	r3, #0
 8002c36:	025b      	lsls	r3, r3, #9
 8002c38:	0a58      	lsrs	r0, r3, #9
 8002c3a:	b2e2      	uxtb	r2, r4
 8002c3c:	e7e3      	b.n	8002c06 <__aeabi_d2f+0x62>
 8002c3e:	08db      	lsrs	r3, r3, #3
 8002c40:	003c      	movs	r4, r7
 8002c42:	e7f8      	b.n	8002c36 <__aeabi_d2f+0x92>
 8002c44:	003b      	movs	r3, r7
 8002c46:	3317      	adds	r3, #23
 8002c48:	dbf3      	blt.n	8002c32 <__aeabi_d2f+0x8e>
 8002c4a:	2380      	movs	r3, #128	; 0x80
 8002c4c:	041b      	lsls	r3, r3, #16
 8002c4e:	4333      	orrs	r3, r6
 8002c50:	261e      	movs	r6, #30
 8002c52:	1bf6      	subs	r6, r6, r7
 8002c54:	2e1f      	cmp	r6, #31
 8002c56:	dd14      	ble.n	8002c82 <__aeabi_d2f+0xde>
 8002c58:	2202      	movs	r2, #2
 8002c5a:	4252      	negs	r2, r2
 8002c5c:	1bd7      	subs	r7, r2, r7
 8002c5e:	001a      	movs	r2, r3
 8002c60:	40fa      	lsrs	r2, r7
 8002c62:	0017      	movs	r7, r2
 8002c64:	2e20      	cmp	r6, #32
 8002c66:	d004      	beq.n	8002c72 <__aeabi_d2f+0xce>
 8002c68:	4a0e      	ldr	r2, [pc, #56]	; (8002ca4 <__aeabi_d2f+0x100>)
 8002c6a:	4694      	mov	ip, r2
 8002c6c:	4464      	add	r4, ip
 8002c6e:	40a3      	lsls	r3, r4
 8002c70:	431d      	orrs	r5, r3
 8002c72:	002b      	movs	r3, r5
 8002c74:	1e5d      	subs	r5, r3, #1
 8002c76:	41ab      	sbcs	r3, r5
 8002c78:	2207      	movs	r2, #7
 8002c7a:	433b      	orrs	r3, r7
 8002c7c:	401a      	ands	r2, r3
 8002c7e:	2700      	movs	r7, #0
 8002c80:	e7ad      	b.n	8002bde <__aeabi_d2f+0x3a>
 8002c82:	4a09      	ldr	r2, [pc, #36]	; (8002ca8 <__aeabi_d2f+0x104>)
 8002c84:	0028      	movs	r0, r5
 8002c86:	18a2      	adds	r2, r4, r2
 8002c88:	4095      	lsls	r5, r2
 8002c8a:	4093      	lsls	r3, r2
 8002c8c:	1e6c      	subs	r4, r5, #1
 8002c8e:	41a5      	sbcs	r5, r4
 8002c90:	40f0      	lsrs	r0, r6
 8002c92:	2207      	movs	r2, #7
 8002c94:	432b      	orrs	r3, r5
 8002c96:	4303      	orrs	r3, r0
 8002c98:	401a      	ands	r2, r3
 8002c9a:	2700      	movs	r7, #0
 8002c9c:	e79f      	b.n	8002bde <__aeabi_d2f+0x3a>
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	fffffc80 	.word	0xfffffc80
 8002ca4:	fffffca2 	.word	0xfffffca2
 8002ca8:	fffffc82 	.word	0xfffffc82

08002cac <__clzsi2>:
 8002cac:	211c      	movs	r1, #28
 8002cae:	2301      	movs	r3, #1
 8002cb0:	041b      	lsls	r3, r3, #16
 8002cb2:	4298      	cmp	r0, r3
 8002cb4:	d301      	bcc.n	8002cba <__clzsi2+0xe>
 8002cb6:	0c00      	lsrs	r0, r0, #16
 8002cb8:	3910      	subs	r1, #16
 8002cba:	0a1b      	lsrs	r3, r3, #8
 8002cbc:	4298      	cmp	r0, r3
 8002cbe:	d301      	bcc.n	8002cc4 <__clzsi2+0x18>
 8002cc0:	0a00      	lsrs	r0, r0, #8
 8002cc2:	3908      	subs	r1, #8
 8002cc4:	091b      	lsrs	r3, r3, #4
 8002cc6:	4298      	cmp	r0, r3
 8002cc8:	d301      	bcc.n	8002cce <__clzsi2+0x22>
 8002cca:	0900      	lsrs	r0, r0, #4
 8002ccc:	3904      	subs	r1, #4
 8002cce:	a202      	add	r2, pc, #8	; (adr r2, 8002cd8 <__clzsi2+0x2c>)
 8002cd0:	5c10      	ldrb	r0, [r2, r0]
 8002cd2:	1840      	adds	r0, r0, r1
 8002cd4:	4770      	bx	lr
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	02020304 	.word	0x02020304
 8002cdc:	01010101 	.word	0x01010101
	...

08002ce8 <__clzdi2>:
 8002ce8:	b510      	push	{r4, lr}
 8002cea:	2900      	cmp	r1, #0
 8002cec:	d103      	bne.n	8002cf6 <__clzdi2+0xe>
 8002cee:	f7ff ffdd 	bl	8002cac <__clzsi2>
 8002cf2:	3020      	adds	r0, #32
 8002cf4:	e002      	b.n	8002cfc <__clzdi2+0x14>
 8002cf6:	1c08      	adds	r0, r1, #0
 8002cf8:	f7ff ffd8 	bl	8002cac <__clzsi2>
 8002cfc:	bd10      	pop	{r4, pc}
 8002cfe:	46c0      	nop			; (mov r8, r8)

08002d00 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d00:	b510      	push	{r4, lr}
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002d02:	4a08      	ldr	r2, [pc, #32]	; (8002d24 <HAL_Init+0x24>)
 8002d04:	6813      	ldr	r3, [r2, #0]
 8002d06:	2140      	movs	r1, #64	; 0x40
 8002d08:	430b      	orrs	r3, r1
 8002d0a:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f005 fe79 	bl	8008a04 <HAL_InitTick>
 8002d12:	1e04      	subs	r4, r0, #0
 8002d14:	d002      	beq.n	8002d1c <HAL_Init+0x1c>
  {
    status = HAL_ERROR;
 8002d16:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8002d18:	0020      	movs	r0, r4
 8002d1a:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8002d1c:	f005 fd4a 	bl	80087b4 <HAL_MspInit>
 8002d20:	e7fa      	b.n	8002d18 <HAL_Init+0x18>
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	40022000 	.word	0x40022000

08002d28 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8002d28:	4a02      	ldr	r2, [pc, #8]	; (8002d34 <HAL_IncTick+0xc>)
 8002d2a:	6813      	ldr	r3, [r2, #0]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	6013      	str	r3, [r2, #0]
}
 8002d30:	4770      	bx	lr
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	20003904 	.word	0x20003904

08002d38 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002d38:	4b01      	ldr	r3, [pc, #4]	; (8002d40 <HAL_GetTick+0x8>)
 8002d3a:	6818      	ldr	r0, [r3, #0]
}
 8002d3c:	4770      	bx	lr
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	20003904 	.word	0x20003904

08002d44 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002d44:	b510      	push	{r4, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	0004      	movs	r4, r0
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002d4a:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <ADC_DelayMicroSecond+0x28>)
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	4908      	ldr	r1, [pc, #32]	; (8002d70 <ADC_DelayMicroSecond+0x2c>)
 8002d50:	f7fd f9f6 	bl	8000140 <__udivsi3>
 8002d54:	4344      	muls	r4, r0
 8002d56:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 8002d58:	e002      	b.n	8002d60 <ADC_DelayMicroSecond+0x1c>
  {
    waitLoopIndex--;
 8002d5a:	9b01      	ldr	r3, [sp, #4]
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	9301      	str	r3, [sp, #4]
  while(waitLoopIndex != 0U)
 8002d60:	9b01      	ldr	r3, [sp, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f9      	bne.n	8002d5a <ADC_DelayMicroSecond+0x16>
  } 
}
 8002d66:	b002      	add	sp, #8
 8002d68:	bd10      	pop	{r4, pc}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	20000004 	.word	0x20000004
 8002d70:	000f4240 	.word	0x000f4240

08002d74 <ADC_Enable>:
{
 8002d74:	b570      	push	{r4, r5, r6, lr}
 8002d76:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d78:	6802      	ldr	r2, [r0, #0]
 8002d7a:	6891      	ldr	r1, [r2, #8]
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	400b      	ands	r3, r1
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d00d      	beq.n	8002da0 <ADC_Enable+0x2c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002d84:	6891      	ldr	r1, [r2, #8]
 8002d86:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <ADC_Enable+0x74>)
 8002d88:	4219      	tst	r1, r3
 8002d8a:	d00e      	beq.n	8002daa <ADC_Enable+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d8e:	2210      	movs	r2, #16
 8002d90:	4313      	orrs	r3, r2
 8002d92:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d96:	3a0f      	subs	r2, #15
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8002d9c:	2001      	movs	r0, #1
}
 8002d9e:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002da0:	6813      	ldr	r3, [r2, #0]
 8002da2:	07db      	lsls	r3, r3, #31
 8002da4:	d5ee      	bpl.n	8002d84 <ADC_Enable+0x10>
  return HAL_OK;
 8002da6:	2000      	movs	r0, #0
 8002da8:	e7f9      	b.n	8002d9e <ADC_Enable+0x2a>
    __HAL_ADC_ENABLE(hadc);
 8002daa:	6893      	ldr	r3, [r2, #8]
 8002dac:	2101      	movs	r1, #1
 8002dae:	430b      	orrs	r3, r1
 8002db0:	6093      	str	r3, [r2, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002db2:	2001      	movs	r0, #1
 8002db4:	f7ff ffc6 	bl	8002d44 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 8002db8:	f7ff ffbe 	bl	8002d38 <HAL_GetTick>
 8002dbc:	0005      	movs	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002dbe:	6823      	ldr	r3, [r4, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	07db      	lsls	r3, r3, #31
 8002dc4:	d40e      	bmi.n	8002de4 <ADC_Enable+0x70>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002dc6:	f7ff ffb7 	bl	8002d38 <HAL_GetTick>
 8002dca:	1b40      	subs	r0, r0, r5
 8002dcc:	280a      	cmp	r0, #10
 8002dce:	d9f6      	bls.n	8002dbe <ADC_Enable+0x4a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dd0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002dd2:	2210      	movs	r2, #16
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002dda:	3a0f      	subs	r2, #15
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8002de0:	2001      	movs	r0, #1
 8002de2:	e7dc      	b.n	8002d9e <ADC_Enable+0x2a>
  return HAL_OK;
 8002de4:	2000      	movs	r0, #0
 8002de6:	e7da      	b.n	8002d9e <ADC_Enable+0x2a>
 8002de8:	80000017 	.word	0x80000017

08002dec <HAL_ADC_Init>:
{
 8002dec:	b570      	push	{r4, r5, r6, lr}
 8002dee:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8002df0:	d100      	bne.n	8002df4 <HAL_ADC_Init+0x8>
 8002df2:	e0e0      	b.n	8002fb6 <HAL_ADC_Init+0x1ca>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002df4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d02e      	beq.n	8002e58 <HAL_ADC_Init+0x6c>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002dfa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002dfc:	06db      	lsls	r3, r3, #27
 8002dfe:	d431      	bmi.n	8002e64 <HAL_ADC_Init+0x78>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8002e00:	6821      	ldr	r1, [r4, #0]
 8002e02:	688b      	ldr	r3, [r1, #8]
 8002e04:	2204      	movs	r2, #4
 8002e06:	401a      	ands	r2, r3
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002e08:	d12c      	bne.n	8002e64 <HAL_ADC_Init+0x78>
  ADC_STATE_CLR_SET(hadc->State,
 8002e0a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e0c:	486b      	ldr	r0, [pc, #428]	; (8002fbc <HAL_ADC_Init+0x1d0>)
 8002e0e:	4003      	ands	r3, r0
 8002e10:	3006      	adds	r0, #6
 8002e12:	30ff      	adds	r0, #255	; 0xff
 8002e14:	4303      	orrs	r3, r0
 8002e16:	6563      	str	r3, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e18:	6888      	ldr	r0, [r1, #8]
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	4003      	ands	r3, r0
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d029      	beq.n	8002e76 <HAL_ADC_Init+0x8a>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002e22:	6863      	ldr	r3, [r4, #4]
 8002e24:	20c0      	movs	r0, #192	; 0xc0
 8002e26:	0600      	lsls	r0, r0, #24
 8002e28:	4283      	cmp	r3, r0
 8002e2a:	d028      	beq.n	8002e7e <HAL_ADC_Init+0x92>
 8002e2c:	2080      	movs	r0, #128	; 0x80
 8002e2e:	05c0      	lsls	r0, r0, #23
 8002e30:	4283      	cmp	r3, r0
 8002e32:	d024      	beq.n	8002e7e <HAL_ADC_Init+0x92>
 8002e34:	2080      	movs	r0, #128	; 0x80
 8002e36:	0600      	lsls	r0, r0, #24
 8002e38:	4283      	cmp	r3, r0
 8002e3a:	d020      	beq.n	8002e7e <HAL_ADC_Init+0x92>
 8002e3c:	690b      	ldr	r3, [r1, #16]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	089b      	lsrs	r3, r3, #2
 8002e42:	610b      	str	r3, [r1, #16]
 8002e44:	4b5e      	ldr	r3, [pc, #376]	; (8002fc0 <HAL_ADC_Init+0x1d4>)
 8002e46:	6819      	ldr	r1, [r3, #0]
 8002e48:	485e      	ldr	r0, [pc, #376]	; (8002fc4 <HAL_ADC_Init+0x1d8>)
 8002e4a:	4001      	ands	r1, r0
 8002e4c:	6019      	str	r1, [r3, #0]
 8002e4e:	6819      	ldr	r1, [r3, #0]
 8002e50:	6860      	ldr	r0, [r4, #4]
 8002e52:	4301      	orrs	r1, r0
 8002e54:	6019      	str	r1, [r3, #0]
 8002e56:	e01b      	b.n	8002e90 <HAL_ADC_Init+0xa4>
    ADC_CLEAR_ERRORCODE(hadc);
 8002e58:	6583      	str	r3, [r0, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8002e5a:	2250      	movs	r2, #80	; 0x50
 8002e5c:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8002e5e:	f005 fcc5 	bl	80087ec <HAL_ADC_MspInit>
 8002e62:	e7ca      	b.n	8002dfa <HAL_ADC_Init+0xe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e66:	2210      	movs	r2, #16
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8002e6c:	2350      	movs	r3, #80	; 0x50
 8002e6e:	2200      	movs	r2, #0
 8002e70:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 8002e72:	2001      	movs	r0, #1
}
 8002e74:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e76:	680b      	ldr	r3, [r1, #0]
 8002e78:	07db      	lsls	r3, r3, #31
 8002e7a:	d413      	bmi.n	8002ea4 <HAL_ADC_Init+0xb8>
 8002e7c:	e7d1      	b.n	8002e22 <HAL_ADC_Init+0x36>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002e7e:	690b      	ldr	r3, [r1, #16]
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	089b      	lsrs	r3, r3, #2
 8002e84:	610b      	str	r3, [r1, #16]
 8002e86:	6821      	ldr	r1, [r4, #0]
 8002e88:	690b      	ldr	r3, [r1, #16]
 8002e8a:	6860      	ldr	r0, [r4, #4]
 8002e8c:	4303      	orrs	r3, r0
 8002e8e:	610b      	str	r3, [r1, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8002e90:	6821      	ldr	r1, [r4, #0]
 8002e92:	68cb      	ldr	r3, [r1, #12]
 8002e94:	2018      	movs	r0, #24
 8002e96:	4383      	bics	r3, r0
 8002e98:	60cb      	str	r3, [r1, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8002e9a:	6821      	ldr	r1, [r4, #0]
 8002e9c:	68cb      	ldr	r3, [r1, #12]
 8002e9e:	68a0      	ldr	r0, [r4, #8]
 8002ea0:	4303      	orrs	r3, r0
 8002ea2:	60cb      	str	r3, [r1, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002ea4:	4b46      	ldr	r3, [pc, #280]	; (8002fc0 <HAL_ADC_Init+0x1d4>)
 8002ea6:	6819      	ldr	r1, [r3, #0]
 8002ea8:	4847      	ldr	r0, [pc, #284]	; (8002fc8 <HAL_ADC_Init+0x1dc>)
 8002eaa:	4001      	ands	r1, r0
 8002eac:	6019      	str	r1, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8002eae:	6819      	ldr	r1, [r3, #0]
 8002eb0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002eb2:	0640      	lsls	r0, r0, #25
 8002eb4:	4301      	orrs	r1, r0
 8002eb6:	6019      	str	r1, [r3, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002eb8:	6823      	ldr	r3, [r4, #0]
 8002eba:	6899      	ldr	r1, [r3, #8]
 8002ebc:	00c9      	lsls	r1, r1, #3
 8002ebe:	d404      	bmi.n	8002eca <HAL_ADC_Init+0xde>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002ec0:	6898      	ldr	r0, [r3, #8]
 8002ec2:	2180      	movs	r1, #128	; 0x80
 8002ec4:	0549      	lsls	r1, r1, #21
 8002ec6:	4301      	orrs	r1, r0
 8002ec8:	6099      	str	r1, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002eca:	6821      	ldr	r1, [r4, #0]
 8002ecc:	68cb      	ldr	r3, [r1, #12]
 8002ece:	483f      	ldr	r0, [pc, #252]	; (8002fcc <HAL_ADC_Init+0x1e0>)
 8002ed0:	4003      	ands	r3, r0
 8002ed2:	60cb      	str	r3, [r1, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002ed4:	6820      	ldr	r0, [r4, #0]
 8002ed6:	68c1      	ldr	r1, [r0, #12]
 8002ed8:	68e3      	ldr	r3, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002eda:	6925      	ldr	r5, [r4, #16]
 8002edc:	2d02      	cmp	r5, #2
 8002ede:	d02d      	beq.n	8002f3c <HAL_ADC_Init+0x150>
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002ee0:	4313      	orrs	r3, r2
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	5ca2      	ldrb	r2, [r4, r2]
 8002ee6:	0352      	lsls	r2, r2, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002ee8:	4313      	orrs	r3, r2
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002eea:	222c      	movs	r2, #44	; 0x2c
 8002eec:	5ca2      	ldrb	r2, [r4, r2]
 8002eee:	0052      	lsls	r2, r2, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002ef0:	4313      	orrs	r3, r2
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002ef2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002ef4:	4313      	orrs	r3, r2
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002ef6:	69a2      	ldr	r2, [r4, #24]
 8002ef8:	0392      	lsls	r2, r2, #14
                            hadc->Init.Overrun                               |
 8002efa:	4313      	orrs	r3, r2
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002efc:	69e2      	ldr	r2, [r4, #28]
 8002efe:	03d2      	lsls	r2, r2, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002f00:	4313      	orrs	r3, r2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002f02:	430b      	orrs	r3, r1
 8002f04:	60c3      	str	r3, [r0, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f08:	22c2      	movs	r2, #194	; 0xc2
 8002f0a:	32ff      	adds	r2, #255	; 0xff
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d005      	beq.n	8002f1c <HAL_ADC_Init+0x130>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002f10:	6821      	ldr	r1, [r4, #0]
 8002f12:	68ca      	ldr	r2, [r1, #12]
 8002f14:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002f16:	4303      	orrs	r3, r0
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	60cb      	str	r3, [r1, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f1c:	2321      	movs	r3, #33	; 0x21
 8002f1e:	5ce3      	ldrb	r3, [r4, r3]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d00d      	beq.n	8002f40 <HAL_ADC_Init+0x154>
  if (hadc->Init.OversamplingMode == ENABLE)
 8002f24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d01e      	beq.n	8002f68 <HAL_ADC_Init+0x17c>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002f2a:	6823      	ldr	r3, [r4, #0]
 8002f2c:	691a      	ldr	r2, [r3, #16]
 8002f2e:	07d2      	lsls	r2, r2, #31
 8002f30:	d52d      	bpl.n	8002f8e <HAL_ADC_Init+0x1a2>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	2101      	movs	r1, #1
 8002f36:	438a      	bics	r2, r1
 8002f38:	611a      	str	r2, [r3, #16]
 8002f3a:	e028      	b.n	8002f8e <HAL_ADC_Init+0x1a2>
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	e7cf      	b.n	8002ee0 <HAL_ADC_Init+0xf4>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f40:	331f      	adds	r3, #31
 8002f42:	5ce3      	ldrb	r3, [r4, r3]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d106      	bne.n	8002f56 <HAL_ADC_Init+0x16a>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002f48:	6822      	ldr	r2, [r4, #0]
 8002f4a:	68d1      	ldr	r1, [r2, #12]
 8002f4c:	2380      	movs	r3, #128	; 0x80
 8002f4e:	025b      	lsls	r3, r3, #9
 8002f50:	430b      	orrs	r3, r1
 8002f52:	60d3      	str	r3, [r2, #12]
 8002f54:	e7e6      	b.n	8002f24 <HAL_ADC_Init+0x138>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f56:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f58:	2220      	movs	r2, #32
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f60:	3a1f      	subs	r2, #31
 8002f62:	4313      	orrs	r3, r2
 8002f64:	65a3      	str	r3, [r4, #88]	; 0x58
 8002f66:	e7dd      	b.n	8002f24 <HAL_ADC_Init+0x138>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002f68:	6822      	ldr	r2, [r4, #0]
 8002f6a:	6913      	ldr	r3, [r2, #16]
 8002f6c:	4918      	ldr	r1, [pc, #96]	; (8002fd0 <HAL_ADC_Init+0x1e4>)
 8002f6e:	400b      	ands	r3, r1
 8002f70:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002f72:	6821      	ldr	r1, [r4, #0]
 8002f74:	690a      	ldr	r2, [r1, #16]
 8002f76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f78:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002f7a:	4303      	orrs	r3, r0
                               hadc->Init.Oversample.RightBitShift             |
 8002f7c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002f7e:	4303      	orrs	r3, r0
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002f80:	4313      	orrs	r3, r2
 8002f82:	610b      	str	r3, [r1, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002f84:	6822      	ldr	r2, [r4, #0]
 8002f86:	6913      	ldr	r3, [r2, #16]
 8002f88:	2101      	movs	r1, #1
 8002f8a:	430b      	orrs	r3, r1
 8002f8c:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002f8e:	6822      	ldr	r2, [r4, #0]
 8002f90:	6953      	ldr	r3, [r2, #20]
 8002f92:	2107      	movs	r1, #7
 8002f94:	438b      	bics	r3, r1
 8002f96:	6153      	str	r3, [r2, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002f98:	6822      	ldr	r2, [r4, #0]
 8002f9a:	6953      	ldr	r3, [r2, #20]
 8002f9c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002f9e:	430b      	orrs	r3, r1
 8002fa0:	6153      	str	r3, [r2, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	65a3      	str	r3, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8002fa6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002fa8:	2203      	movs	r2, #3
 8002faa:	4393      	bics	r3, r2
 8002fac:	3a02      	subs	r2, #2
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	e75e      	b.n	8002e74 <HAL_ADC_Init+0x88>
    return HAL_ERROR;
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	e75c      	b.n	8002e74 <HAL_ADC_Init+0x88>
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	fffffefd 	.word	0xfffffefd
 8002fc0:	40012708 	.word	0x40012708
 8002fc4:	ffc3ffff 	.word	0xffc3ffff
 8002fc8:	fdffffff 	.word	0xfdffffff
 8002fcc:	fffe0219 	.word	0xfffe0219
 8002fd0:	fffffc03 	.word	0xfffffc03

08002fd4 <HAL_ADC_Start_DMA>:
{
 8002fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fd6:	0004      	movs	r4, r0
 8002fd8:	000e      	movs	r6, r1
 8002fda:	0017      	movs	r7, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002fdc:	6803      	ldr	r3, [r0, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	075b      	lsls	r3, r3, #29
 8002fe2:	d43e      	bmi.n	8003062 <HAL_ADC_Start_DMA+0x8e>
    __HAL_LOCK(hadc);
 8002fe4:	2350      	movs	r3, #80	; 0x50
 8002fe6:	5cc3      	ldrb	r3, [r0, r3]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d03c      	beq.n	8003066 <HAL_ADC_Start_DMA+0x92>
 8002fec:	2350      	movs	r3, #80	; 0x50
 8002fee:	2201      	movs	r2, #1
 8002ff0:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002ff2:	69c3      	ldr	r3, [r0, #28]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d032      	beq.n	800305e <HAL_ADC_Start_DMA+0x8a>
      tmp_hal_status = ADC_Enable(hadc);
 8002ff8:	f7ff febc 	bl	8002d74 <ADC_Enable>
 8002ffc:	1e05      	subs	r5, r0, #0
    if (tmp_hal_status == HAL_OK)
 8002ffe:	d12c      	bne.n	800305a <HAL_ADC_Start_DMA+0x86>
      ADC_STATE_CLR_SET(hadc->State,
 8003000:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003002:	4a1a      	ldr	r2, [pc, #104]	; (800306c <HAL_ADC_Start_DMA+0x98>)
 8003004:	401a      	ands	r2, r3
 8003006:	2380      	movs	r3, #128	; 0x80
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	4313      	orrs	r3, r2
 800300c:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 800300e:	2300      	movs	r3, #0
 8003010:	65a3      	str	r3, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 8003012:	2250      	movs	r2, #80	; 0x50
 8003014:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003016:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003018:	4a15      	ldr	r2, [pc, #84]	; (8003070 <HAL_ADC_Start_DMA+0x9c>)
 800301a:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800301c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800301e:	4a15      	ldr	r2, [pc, #84]	; (8003074 <HAL_ADC_Start_DMA+0xa0>)
 8003020:	631a      	str	r2, [r3, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003022:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003024:	4a14      	ldr	r2, [pc, #80]	; (8003078 <HAL_ADC_Start_DMA+0xa4>)
 8003026:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003028:	6823      	ldr	r3, [r4, #0]
 800302a:	221c      	movs	r2, #28
 800302c:	601a      	str	r2, [r3, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800302e:	6822      	ldr	r2, [r4, #0]
 8003030:	6853      	ldr	r3, [r2, #4]
 8003032:	2110      	movs	r1, #16
 8003034:	430b      	orrs	r3, r1
 8003036:	6053      	str	r3, [r2, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003038:	6822      	ldr	r2, [r4, #0]
 800303a:	68d3      	ldr	r3, [r2, #12]
 800303c:	390f      	subs	r1, #15
 800303e:	430b      	orrs	r3, r1
 8003040:	60d3      	str	r3, [r2, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003042:	6821      	ldr	r1, [r4, #0]
 8003044:	3140      	adds	r1, #64	; 0x40
 8003046:	003b      	movs	r3, r7
 8003048:	0032      	movs	r2, r6
 800304a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800304c:	f000 fac0 	bl	80035d0 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003050:	6822      	ldr	r2, [r4, #0]
 8003052:	6893      	ldr	r3, [r2, #8]
 8003054:	2104      	movs	r1, #4
 8003056:	430b      	orrs	r3, r1
 8003058:	6093      	str	r3, [r2, #8]
}
 800305a:	0028      	movs	r0, r5
 800305c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800305e:	2500      	movs	r5, #0
 8003060:	e7ce      	b.n	8003000 <HAL_ADC_Start_DMA+0x2c>
    tmp_hal_status = HAL_BUSY;
 8003062:	2502      	movs	r5, #2
 8003064:	e7f9      	b.n	800305a <HAL_ADC_Start_DMA+0x86>
    __HAL_LOCK(hadc);
 8003066:	2502      	movs	r5, #2
 8003068:	e7f7      	b.n	800305a <HAL_ADC_Start_DMA+0x86>
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	fffff0fe 	.word	0xfffff0fe
 8003070:	08003081 	.word	0x08003081
 8003074:	080030f7 	.word	0x080030f7
 8003078:	08003105 	.word	0x08003105

0800307c <HAL_ADC_ConvCpltCallback>:
}
 800307c:	4770      	bx	lr
	...

08003080 <ADC_DMAConvCplt>:
{
 8003080:	b510      	push	{r4, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003082:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003084:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003086:	2150      	movs	r1, #80	; 0x50
 8003088:	4211      	tst	r1, r2
 800308a:	d003      	beq.n	8003094 <ADC_DMAConvCplt+0x14>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800308c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003090:	4798      	blx	r3
}
 8003092:	bd10      	pop	{r4, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003094:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003096:	2280      	movs	r2, #128	; 0x80
 8003098:	0092      	lsls	r2, r2, #2
 800309a:	430a      	orrs	r2, r1
 800309c:	655a      	str	r2, [r3, #84]	; 0x54
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68d0      	ldr	r0, [r2, #12]
 80030a2:	21c0      	movs	r1, #192	; 0xc0
 80030a4:	0109      	lsls	r1, r1, #4
 80030a6:	4208      	tst	r0, r1
 80030a8:	d114      	bne.n	80030d4 <ADC_DMAConvCplt+0x54>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80030aa:	2120      	movs	r1, #32
 80030ac:	5c59      	ldrb	r1, [r3, r1]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030ae:	2900      	cmp	r1, #0
 80030b0:	d110      	bne.n	80030d4 <ADC_DMAConvCplt+0x54>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80030b2:	6811      	ldr	r1, [r2, #0]
 80030b4:	0709      	lsls	r1, r1, #28
 80030b6:	d50d      	bpl.n	80030d4 <ADC_DMAConvCplt+0x54>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80030b8:	6891      	ldr	r1, [r2, #8]
 80030ba:	0749      	lsls	r1, r1, #29
 80030bc:	d40e      	bmi.n	80030dc <ADC_DMAConvCplt+0x5c>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80030be:	6851      	ldr	r1, [r2, #4]
 80030c0:	200c      	movs	r0, #12
 80030c2:	4381      	bics	r1, r0
 80030c4:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 80030c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030c8:	4909      	ldr	r1, [pc, #36]	; (80030f0 <ADC_DMAConvCplt+0x70>)
 80030ca:	400a      	ands	r2, r1
 80030cc:	3104      	adds	r1, #4
 80030ce:	31ff      	adds	r1, #255	; 0xff
 80030d0:	430a      	orrs	r2, r1
 80030d2:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80030d4:	0018      	movs	r0, r3
 80030d6:	f7ff ffd1 	bl	800307c <HAL_ADC_ConvCpltCallback>
 80030da:	e7da      	b.n	8003092 <ADC_DMAConvCplt+0x12>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030de:	2120      	movs	r1, #32
 80030e0:	430a      	orrs	r2, r1
 80030e2:	655a      	str	r2, [r3, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80030e6:	391f      	subs	r1, #31
 80030e8:	430a      	orrs	r2, r1
 80030ea:	659a      	str	r2, [r3, #88]	; 0x58
 80030ec:	e7f2      	b.n	80030d4 <ADC_DMAConvCplt+0x54>
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	fffffefe 	.word	0xfffffefe

080030f4 <HAL_ADC_ConvHalfCpltCallback>:
}
 80030f4:	4770      	bx	lr

080030f6 <ADC_DMAHalfConvCplt>:
{
 80030f6:	b510      	push	{r4, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030f8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80030fa:	f7ff fffb 	bl	80030f4 <HAL_ADC_ConvHalfCpltCallback>
}
 80030fe:	bd10      	pop	{r4, pc}

08003100 <HAL_ADC_LevelOutOfWindowCallback>:
}
 8003100:	4770      	bx	lr

08003102 <HAL_ADC_ErrorCallback>:
}
 8003102:	4770      	bx	lr

08003104 <ADC_DMAError>:
{
 8003104:	b510      	push	{r4, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003106:	6a80      	ldr	r0, [r0, #40]	; 0x28
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003108:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800310a:	2240      	movs	r2, #64	; 0x40
 800310c:	4313      	orrs	r3, r2
 800310e:	6543      	str	r3, [r0, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003110:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003112:	3a3c      	subs	r2, #60	; 0x3c
 8003114:	4313      	orrs	r3, r2
 8003116:	6583      	str	r3, [r0, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc); 
 8003118:	f7ff fff3 	bl	8003102 <HAL_ADC_ErrorCallback>
}
 800311c:	bd10      	pop	{r4, pc}
	...

08003120 <HAL_ADC_IRQHandler>:
{
 8003120:	b510      	push	{r4, lr}
 8003122:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003124:	6803      	ldr	r3, [r0, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	0752      	lsls	r2, r2, #29
 800312a:	d502      	bpl.n	8003132 <HAL_ADC_IRQHandler+0x12>
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	0752      	lsls	r2, r2, #29
 8003130:	d405      	bmi.n	800313e <HAL_ADC_IRQHandler+0x1e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8003132:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003134:	0712      	lsls	r2, r2, #28
 8003136:	d52d      	bpl.n	8003194 <HAL_ADC_IRQHandler+0x74>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	0712      	lsls	r2, r2, #28
 800313c:	d52a      	bpl.n	8003194 <HAL_ADC_IRQHandler+0x74>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800313e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003140:	06d2      	lsls	r2, r2, #27
 8003142:	d404      	bmi.n	800314e <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003144:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003146:	2280      	movs	r2, #128	; 0x80
 8003148:	0092      	lsls	r2, r2, #2
 800314a:	430a      	orrs	r2, r1
 800314c:	6562      	str	r2, [r4, #84]	; 0x54
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800314e:	68d9      	ldr	r1, [r3, #12]
 8003150:	22c0      	movs	r2, #192	; 0xc0
 8003152:	0112      	lsls	r2, r2, #4
 8003154:	4211      	tst	r1, r2
 8003156:	d114      	bne.n	8003182 <HAL_ADC_IRQHandler+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003158:	2220      	movs	r2, #32
 800315a:	5ca2      	ldrb	r2, [r4, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800315c:	2a00      	cmp	r2, #0
 800315e:	d110      	bne.n	8003182 <HAL_ADC_IRQHandler+0x62>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	0712      	lsls	r2, r2, #28
 8003164:	d50d      	bpl.n	8003182 <HAL_ADC_IRQHandler+0x62>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	0752      	lsls	r2, r2, #29
 800316a:	d434      	bmi.n	80031d6 <HAL_ADC_IRQHandler+0xb6>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	210c      	movs	r1, #12
 8003170:	438a      	bics	r2, r1
 8003172:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8003174:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003176:	4a22      	ldr	r2, [pc, #136]	; (8003200 <HAL_ADC_IRQHandler+0xe0>)
 8003178:	4013      	ands	r3, r2
 800317a:	3204      	adds	r2, #4
 800317c:	32ff      	adds	r2, #255	; 0xff
 800317e:	4313      	orrs	r3, r2
 8003180:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8003182:	0020      	movs	r0, r4
 8003184:	f7ff ff7a 	bl	800307c <HAL_ADC_ConvCpltCallback>
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8003188:	69a3      	ldr	r3, [r4, #24]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d002      	beq.n	8003194 <HAL_ADC_IRQHandler+0x74>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800318e:	6823      	ldr	r3, [r4, #0]
 8003190:	220c      	movs	r2, #12
 8003192:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8003194:	6823      	ldr	r3, [r4, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	0612      	lsls	r2, r2, #24
 800319a:	d502      	bpl.n	80031a2 <HAL_ADC_IRQHandler+0x82>
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	061b      	lsls	r3, r3, #24
 80031a0:	d422      	bmi.n	80031e8 <HAL_ADC_IRQHandler+0xc8>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80031a2:	6823      	ldr	r3, [r4, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	06d2      	lsls	r2, r2, #27
 80031a8:	d514      	bpl.n	80031d4 <HAL_ADC_IRQHandler+0xb4>
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	06d2      	lsls	r2, r2, #27
 80031ae:	d511      	bpl.n	80031d4 <HAL_ADC_IRQHandler+0xb4>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80031b0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80031b2:	2a00      	cmp	r2, #0
 80031b4:	d002      	beq.n	80031bc <HAL_ADC_IRQHandler+0x9c>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80031b6:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80031b8:	07d2      	lsls	r2, r2, #31
 80031ba:	d508      	bpl.n	80031ce <HAL_ADC_IRQHandler+0xae>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80031bc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80031be:	2102      	movs	r1, #2
 80031c0:	430a      	orrs	r2, r1
 80031c2:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031c4:	2210      	movs	r2, #16
 80031c6:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 80031c8:	0020      	movs	r0, r4
 80031ca:	f7ff ff9a 	bl	8003102 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031ce:	6823      	ldr	r3, [r4, #0]
 80031d0:	2210      	movs	r2, #16
 80031d2:	601a      	str	r2, [r3, #0]
}
 80031d4:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80031d8:	2220      	movs	r2, #32
 80031da:	4313      	orrs	r3, r2
 80031dc:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80031e0:	3a1f      	subs	r2, #31
 80031e2:	4313      	orrs	r3, r2
 80031e4:	65a3      	str	r3, [r4, #88]	; 0x58
 80031e6:	e7cc      	b.n	8003182 <HAL_ADC_IRQHandler+0x62>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80031e8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80031ea:	2380      	movs	r3, #128	; 0x80
 80031ec:	025b      	lsls	r3, r3, #9
 80031ee:	4313      	orrs	r3, r2
 80031f0:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80031f2:	0020      	movs	r0, r4
 80031f4:	f7ff ff84 	bl	8003100 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80031f8:	6823      	ldr	r3, [r4, #0]
 80031fa:	2280      	movs	r2, #128	; 0x80
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	e7d0      	b.n	80031a2 <HAL_ADC_IRQHandler+0x82>
 8003200:	fffffefe 	.word	0xfffffefe

08003204 <HAL_ADC_ConfigChannel>:
{
 8003204:	b570      	push	{r4, r5, r6, lr}
 8003206:	0004      	movs	r4, r0
 8003208:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 800320a:	2350      	movs	r3, #80	; 0x50
 800320c:	5cc3      	ldrb	r3, [r0, r3]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d04b      	beq.n	80032aa <HAL_ADC_ConfigChannel+0xa6>
 8003212:	2350      	movs	r3, #80	; 0x50
 8003214:	2201      	movs	r2, #1
 8003216:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003218:	6803      	ldr	r3, [r0, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	0752      	lsls	r2, r2, #29
 800321e:	d41a      	bmi.n	8003256 <HAL_ADC_ConfigChannel+0x52>
  if (sConfig->Rank != ADC_RANK_NONE)
 8003220:	4a23      	ldr	r2, [pc, #140]	; (80032b0 <HAL_ADC_ConfigChannel+0xac>)
 8003222:	6849      	ldr	r1, [r1, #4]
 8003224:	4291      	cmp	r1, r2
 8003226:	d029      	beq.n	800327c <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003228:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800322a:	682a      	ldr	r2, [r5, #0]
 800322c:	0352      	lsls	r2, r2, #13
 800322e:	0b52      	lsrs	r2, r2, #13
 8003230:	430a      	orrs	r2, r1
 8003232:	629a      	str	r2, [r3, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003234:	682b      	ldr	r3, [r5, #0]
 8003236:	035b      	lsls	r3, r3, #13
 8003238:	d416      	bmi.n	8003268 <HAL_ADC_ConfigChannel+0x64>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800323a:	682b      	ldr	r3, [r5, #0]
 800323c:	039b      	lsls	r3, r3, #14
 800323e:	d505      	bpl.n	800324c <HAL_ADC_ConfigChannel+0x48>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8003240:	4a1c      	ldr	r2, [pc, #112]	; (80032b4 <HAL_ADC_ConfigChannel+0xb0>)
 8003242:	6811      	ldr	r1, [r2, #0]
 8003244:	2380      	movs	r3, #128	; 0x80
 8003246:	03db      	lsls	r3, r3, #15
 8003248:	430b      	orrs	r3, r1
 800324a:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 800324c:	2350      	movs	r3, #80	; 0x50
 800324e:	2200      	movs	r2, #0
 8003250:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8003252:	2000      	movs	r0, #0
}
 8003254:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003256:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003258:	2220      	movs	r2, #32
 800325a:	4313      	orrs	r3, r2
 800325c:	6543      	str	r3, [r0, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 800325e:	2350      	movs	r3, #80	; 0x50
 8003260:	2200      	movs	r2, #0
 8003262:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8003264:	2001      	movs	r0, #1
 8003266:	e7f5      	b.n	8003254 <HAL_ADC_ConfigChannel+0x50>
      ADC->CCR |= ADC_CCR_TSEN;   
 8003268:	4a12      	ldr	r2, [pc, #72]	; (80032b4 <HAL_ADC_ConfigChannel+0xb0>)
 800326a:	6811      	ldr	r1, [r2, #0]
 800326c:	2380      	movs	r3, #128	; 0x80
 800326e:	041b      	lsls	r3, r3, #16
 8003270:	430b      	orrs	r3, r1
 8003272:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003274:	200a      	movs	r0, #10
 8003276:	f7ff fd65 	bl	8002d44 <ADC_DelayMicroSecond>
 800327a:	e7de      	b.n	800323a <HAL_ADC_ConfigChannel+0x36>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800327c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800327e:	682a      	ldr	r2, [r5, #0]
 8003280:	0352      	lsls	r2, r2, #13
 8003282:	0b52      	lsrs	r2, r2, #13
 8003284:	4391      	bics	r1, r2
 8003286:	6299      	str	r1, [r3, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003288:	682b      	ldr	r3, [r5, #0]
 800328a:	035b      	lsls	r3, r3, #13
 800328c:	d504      	bpl.n	8003298 <HAL_ADC_ConfigChannel+0x94>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800328e:	4a09      	ldr	r2, [pc, #36]	; (80032b4 <HAL_ADC_ConfigChannel+0xb0>)
 8003290:	6813      	ldr	r3, [r2, #0]
 8003292:	4909      	ldr	r1, [pc, #36]	; (80032b8 <HAL_ADC_ConfigChannel+0xb4>)
 8003294:	400b      	ands	r3, r1
 8003296:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003298:	682b      	ldr	r3, [r5, #0]
 800329a:	039b      	lsls	r3, r3, #14
 800329c:	d5d6      	bpl.n	800324c <HAL_ADC_ConfigChannel+0x48>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800329e:	4a05      	ldr	r2, [pc, #20]	; (80032b4 <HAL_ADC_ConfigChannel+0xb0>)
 80032a0:	6813      	ldr	r3, [r2, #0]
 80032a2:	4906      	ldr	r1, [pc, #24]	; (80032bc <HAL_ADC_ConfigChannel+0xb8>)
 80032a4:	400b      	ands	r3, r1
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	e7d0      	b.n	800324c <HAL_ADC_ConfigChannel+0x48>
  __HAL_LOCK(hadc);
 80032aa:	2002      	movs	r0, #2
 80032ac:	e7d2      	b.n	8003254 <HAL_ADC_ConfigChannel+0x50>
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	00001001 	.word	0x00001001
 80032b4:	40012708 	.word	0x40012708
 80032b8:	ff7fffff 	.word	0xff7fffff
 80032bc:	ffbfffff 	.word	0xffbfffff

080032c0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032c0:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80032c2:	2800      	cmp	r0, #0
 80032c4:	db11      	blt.n	80032ea <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032c6:	0884      	lsrs	r4, r0, #2
 80032c8:	4d13      	ldr	r5, [pc, #76]	; (8003318 <HAL_NVIC_SetPriority+0x58>)
 80032ca:	34c0      	adds	r4, #192	; 0xc0
 80032cc:	00a4      	lsls	r4, r4, #2
 80032ce:	5962      	ldr	r2, [r4, r5]
 80032d0:	2303      	movs	r3, #3
 80032d2:	4018      	ands	r0, r3
 80032d4:	00c0      	lsls	r0, r0, #3
 80032d6:	33fc      	adds	r3, #252	; 0xfc
 80032d8:	001e      	movs	r6, r3
 80032da:	4086      	lsls	r6, r0
 80032dc:	43b2      	bics	r2, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032de:	0189      	lsls	r1, r1, #6
 80032e0:	400b      	ands	r3, r1
 80032e2:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032e4:	4313      	orrs	r3, r2
 80032e6:	5163      	str	r3, [r4, r5]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80032e8:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032ea:	b2c0      	uxtb	r0, r0
 80032ec:	220f      	movs	r2, #15
 80032ee:	4002      	ands	r2, r0
 80032f0:	3a08      	subs	r2, #8
 80032f2:	0892      	lsrs	r2, r2, #2
 80032f4:	3206      	adds	r2, #6
 80032f6:	0092      	lsls	r2, r2, #2
 80032f8:	4b08      	ldr	r3, [pc, #32]	; (800331c <HAL_NVIC_SetPriority+0x5c>)
 80032fa:	18d3      	adds	r3, r2, r3
 80032fc:	685d      	ldr	r5, [r3, #4]
 80032fe:	2403      	movs	r4, #3
 8003300:	4020      	ands	r0, r4
 8003302:	00c0      	lsls	r0, r0, #3
 8003304:	22ff      	movs	r2, #255	; 0xff
 8003306:	0014      	movs	r4, r2
 8003308:	4084      	lsls	r4, r0
 800330a:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800330c:	0189      	lsls	r1, r1, #6
 800330e:	400a      	ands	r2, r1
 8003310:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003312:	432a      	orrs	r2, r5
 8003314:	605a      	str	r2, [r3, #4]
 8003316:	e7e7      	b.n	80032e8 <HAL_NVIC_SetPriority+0x28>
 8003318:	e000e100 	.word	0xe000e100
 800331c:	e000ed00 	.word	0xe000ed00

08003320 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003320:	231f      	movs	r3, #31
 8003322:	4018      	ands	r0, r3
 8003324:	3b1e      	subs	r3, #30
 8003326:	4083      	lsls	r3, r0
 8003328:	4a01      	ldr	r2, [pc, #4]	; (8003330 <HAL_NVIC_EnableIRQ+0x10>)
 800332a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800332c:	4770      	bx	lr
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	e000e100 	.word	0xe000e100

08003334 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8003334:	b570      	push	{r4, r5, r6, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003336:	2500      	movs	r5, #0
 8003338:	e00e      	b.n	8003358 <CRC_Handle_8+0x24>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800333a:	00ac      	lsls	r4, r5, #2
 800333c:	5d0b      	ldrb	r3, [r1, r4]
 800333e:	061b      	lsls	r3, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003340:	190c      	adds	r4, r1, r4
 8003342:	7866      	ldrb	r6, [r4, #1]
 8003344:	0436      	lsls	r6, r6, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003346:	4333      	orrs	r3, r6
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003348:	78a6      	ldrb	r6, [r4, #2]
 800334a:	0236      	lsls	r6, r6, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800334c:	4333      	orrs	r3, r6
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800334e:	78e6      	ldrb	r6, [r4, #3]
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003350:	6804      	ldr	r4, [r0, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003352:	4333      	orrs	r3, r6
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003354:	6023      	str	r3, [r4, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003356:	3501      	adds	r5, #1
 8003358:	0893      	lsrs	r3, r2, #2
 800335a:	42ab      	cmp	r3, r5
 800335c:	d8ed      	bhi.n	800333a <CRC_Handle_8+0x6>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800335e:	2303      	movs	r3, #3
 8003360:	401a      	ands	r2, r3
 8003362:	d005      	beq.n	8003370 <CRC_Handle_8+0x3c>
  {
    if ((BufferLength % 4U) == 1U)
 8003364:	2a01      	cmp	r2, #1
 8003366:	d006      	beq.n	8003376 <CRC_Handle_8+0x42>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
    }
    if ((BufferLength % 4U) == 2U)
 8003368:	2a02      	cmp	r2, #2
 800336a:	d009      	beq.n	8003380 <CRC_Handle_8+0x4c>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
      *pReg = data;
    }
    if ((BufferLength % 4U) == 3U)
 800336c:	2a03      	cmp	r2, #3
 800336e:	d010      	beq.n	8003392 <CRC_Handle_8+0x5e>
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003370:	6803      	ldr	r3, [r0, #0]
 8003372:	6818      	ldr	r0, [r3, #0]
}
 8003374:	bd70      	pop	{r4, r5, r6, pc}
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8003376:	00ab      	lsls	r3, r5, #2
 8003378:	5ccb      	ldrb	r3, [r1, r3]
 800337a:	6804      	ldr	r4, [r0, #0]
 800337c:	7023      	strb	r3, [r4, #0]
 800337e:	e7f3      	b.n	8003368 <CRC_Handle_8+0x34>
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003380:	00ab      	lsls	r3, r5, #2
 8003382:	5ccc      	ldrb	r4, [r1, r3]
 8003384:	0224      	lsls	r4, r4, #8
 8003386:	18cb      	adds	r3, r1, r3
 8003388:	785b      	ldrb	r3, [r3, #1]
 800338a:	4323      	orrs	r3, r4
      *pReg = data;
 800338c:	6804      	ldr	r4, [r0, #0]
 800338e:	8023      	strh	r3, [r4, #0]
 8003390:	e7ec      	b.n	800336c <CRC_Handle_8+0x38>
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003392:	00ad      	lsls	r5, r5, #2
 8003394:	5d4a      	ldrb	r2, [r1, r5]
 8003396:	0212      	lsls	r2, r2, #8
 8003398:	194d      	adds	r5, r1, r5
 800339a:	786b      	ldrb	r3, [r5, #1]
 800339c:	4313      	orrs	r3, r2
      *pReg = data;
 800339e:	6802      	ldr	r2, [r0, #0]
 80033a0:	8013      	strh	r3, [r2, #0]
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80033a2:	78ab      	ldrb	r3, [r5, #2]
 80033a4:	6802      	ldr	r2, [r0, #0]
 80033a6:	7013      	strb	r3, [r2, #0]
 80033a8:	e7e2      	b.n	8003370 <CRC_Handle_8+0x3c>

080033aa <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80033aa:	b570      	push	{r4, r5, r6, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80033ac:	2500      	movs	r5, #0
 80033ae:	e008      	b.n	80033c2 <CRC_Handle_16+0x18>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80033b0:	00ac      	lsls	r4, r5, #2
 80033b2:	5b0b      	ldrh	r3, [r1, r4]
 80033b4:	041b      	lsls	r3, r3, #16
 80033b6:	190c      	adds	r4, r1, r4
 80033b8:	8866      	ldrh	r6, [r4, #2]
 80033ba:	6804      	ldr	r4, [r0, #0]
 80033bc:	4333      	orrs	r3, r6
 80033be:	6023      	str	r3, [r4, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80033c0:	3501      	adds	r5, #1
 80033c2:	0853      	lsrs	r3, r2, #1
 80033c4:	42ab      	cmp	r3, r5
 80033c6:	d8f3      	bhi.n	80033b0 <CRC_Handle_16+0x6>
  }
  if ((BufferLength % 2U) != 0U)
 80033c8:	07d3      	lsls	r3, r2, #31
 80033ca:	d503      	bpl.n	80033d4 <CRC_Handle_16+0x2a>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
    *pReg = pBuffer[2U * i];
 80033cc:	00ad      	lsls	r5, r5, #2
 80033ce:	5a6b      	ldrh	r3, [r5, r1]
 80033d0:	6802      	ldr	r2, [r0, #0]
 80033d2:	8013      	strh	r3, [r2, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80033d4:	6803      	ldr	r3, [r0, #0]
 80033d6:	6818      	ldr	r0, [r3, #0]
}
 80033d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080033dc <HAL_CRC_Init>:
{
 80033dc:	b510      	push	{r4, lr}
 80033de:	1e04      	subs	r4, r0, #0
  if (hcrc == NULL)
 80033e0:	d039      	beq.n	8003456 <HAL_CRC_Init+0x7a>
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80033e2:	7f43      	ldrb	r3, [r0, #29]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d025      	beq.n	8003434 <HAL_CRC_Init+0x58>
  hcrc->State = HAL_CRC_STATE_BUSY;
 80033e8:	2302      	movs	r3, #2
 80033ea:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80033ec:	7923      	ldrb	r3, [r4, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d124      	bne.n	800343c <HAL_CRC_Init+0x60>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80033f2:	6823      	ldr	r3, [r4, #0]
 80033f4:	4a19      	ldr	r2, [pc, #100]	; (800345c <HAL_CRC_Init+0x80>)
 80033f6:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80033f8:	6822      	ldr	r2, [r4, #0]
 80033fa:	6893      	ldr	r3, [r2, #8]
 80033fc:	2118      	movs	r1, #24
 80033fe:	438b      	bics	r3, r1
 8003400:	6093      	str	r3, [r2, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003402:	7963      	ldrb	r3, [r4, #5]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d122      	bne.n	800344e <HAL_CRC_Init+0x72>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003408:	6823      	ldr	r3, [r4, #0]
 800340a:	2201      	movs	r2, #1
 800340c:	4252      	negs	r2, r2
 800340e:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003410:	6822      	ldr	r2, [r4, #0]
 8003412:	6893      	ldr	r3, [r2, #8]
 8003414:	2160      	movs	r1, #96	; 0x60
 8003416:	438b      	bics	r3, r1
 8003418:	6961      	ldr	r1, [r4, #20]
 800341a:	430b      	orrs	r3, r1
 800341c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800341e:	6822      	ldr	r2, [r4, #0]
 8003420:	6893      	ldr	r3, [r2, #8]
 8003422:	2180      	movs	r1, #128	; 0x80
 8003424:	438b      	bics	r3, r1
 8003426:	69a1      	ldr	r1, [r4, #24]
 8003428:	430b      	orrs	r3, r1
 800342a:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800342c:	2301      	movs	r3, #1
 800342e:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8003430:	2000      	movs	r0, #0
}
 8003432:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8003434:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8003436:	f005 fa2d 	bl	8008894 <HAL_CRC_MspInit>
 800343a:	e7d5      	b.n	80033e8 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800343c:	68e2      	ldr	r2, [r4, #12]
 800343e:	68a1      	ldr	r1, [r4, #8]
 8003440:	0020      	movs	r0, r4
 8003442:	f000 f835 	bl	80034b0 <HAL_CRCEx_Polynomial_Set>
 8003446:	2800      	cmp	r0, #0
 8003448:	d0db      	beq.n	8003402 <HAL_CRC_Init+0x26>
      return HAL_ERROR;
 800344a:	2001      	movs	r0, #1
 800344c:	e7f1      	b.n	8003432 <HAL_CRC_Init+0x56>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	6922      	ldr	r2, [r4, #16]
 8003452:	611a      	str	r2, [r3, #16]
 8003454:	e7dc      	b.n	8003410 <HAL_CRC_Init+0x34>
    return HAL_ERROR;
 8003456:	2001      	movs	r0, #1
 8003458:	e7eb      	b.n	8003432 <HAL_CRC_Init+0x56>
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	04c11db7 	.word	0x04c11db7

08003460 <HAL_CRC_Calculate>:
{
 8003460:	b570      	push	{r4, r5, r6, lr}
 8003462:	0004      	movs	r4, r0
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003464:	2302      	movs	r3, #2
 8003466:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8003468:	6800      	ldr	r0, [r0, #0]
 800346a:	6883      	ldr	r3, [r0, #8]
 800346c:	2501      	movs	r5, #1
 800346e:	432b      	orrs	r3, r5
 8003470:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 8003472:	6a23      	ldr	r3, [r4, #32]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d017      	beq.n	80034a8 <HAL_CRC_Calculate+0x48>
 8003478:	2b03      	cmp	r3, #3
 800347a:	d00f      	beq.n	800349c <HAL_CRC_Calculate+0x3c>
 800347c:	2b01      	cmp	r3, #1
 800347e:	d00f      	beq.n	80034a0 <HAL_CRC_Calculate+0x40>
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003480:	2000      	movs	r0, #0
 8003482:	e008      	b.n	8003496 <HAL_CRC_Calculate+0x36>
        hcrc->Instance->DR = pBuffer[index];
 8003484:	6820      	ldr	r0, [r4, #0]
 8003486:	009d      	lsls	r5, r3, #2
 8003488:	586d      	ldr	r5, [r5, r1]
 800348a:	6005      	str	r5, [r0, #0]
      for (index = 0U; index < BufferLength; index++)
 800348c:	3301      	adds	r3, #1
 800348e:	4293      	cmp	r3, r2
 8003490:	d3f8      	bcc.n	8003484 <HAL_CRC_Calculate+0x24>
      temp = hcrc->Instance->DR;
 8003492:	6823      	ldr	r3, [r4, #0]
 8003494:	6818      	ldr	r0, [r3, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 8003496:	2301      	movs	r3, #1
 8003498:	7763      	strb	r3, [r4, #29]
}
 800349a:	bd70      	pop	{r4, r5, r6, pc}
      for (index = 0U; index < BufferLength; index++)
 800349c:	2300      	movs	r3, #0
 800349e:	e7f6      	b.n	800348e <HAL_CRC_Calculate+0x2e>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80034a0:	0020      	movs	r0, r4
 80034a2:	f7ff ff47 	bl	8003334 <CRC_Handle_8>
      break;
 80034a6:	e7f6      	b.n	8003496 <HAL_CRC_Calculate+0x36>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80034a8:	0020      	movs	r0, r4
 80034aa:	f7ff ff7e 	bl	80033aa <CRC_Handle_16>
      break;
 80034ae:	e7f2      	b.n	8003496 <HAL_CRC_Calculate+0x36>

080034b0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80034b0:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80034b2:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80034b4:	1e5c      	subs	r4, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d006      	beq.n	80034c8 <HAL_CRCEx_Polynomial_Set+0x18>
 80034ba:	231f      	movs	r3, #31
 80034bc:	4023      	ands	r3, r4
 80034be:	000d      	movs	r5, r1
 80034c0:	40dd      	lsrs	r5, r3
 80034c2:	0023      	movs	r3, r4
 80034c4:	07ed      	lsls	r5, r5, #31
 80034c6:	d5f5      	bpl.n	80034b4 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 80034c8:	2a08      	cmp	r2, #8
 80034ca:	d018      	beq.n	80034fe <HAL_CRCEx_Polynomial_Set+0x4e>
 80034cc:	d907      	bls.n	80034de <HAL_CRCEx_Polynomial_Set+0x2e>
 80034ce:	2a10      	cmp	r2, #16
 80034d0:	d011      	beq.n	80034f6 <HAL_CRCEx_Polynomial_Set+0x46>
 80034d2:	2a18      	cmp	r2, #24
 80034d4:	d117      	bne.n	8003506 <HAL_CRCEx_Polynomial_Set+0x56>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80034d6:	2c06      	cmp	r4, #6
 80034d8:	d903      	bls.n	80034e2 <HAL_CRCEx_Polynomial_Set+0x32>
      {
        status =   HAL_ERROR;
 80034da:	2001      	movs	r0, #1
 80034dc:	e00a      	b.n	80034f4 <HAL_CRCEx_Polynomial_Set+0x44>
  switch (PolyLength)
 80034de:	2a00      	cmp	r2, #0
 80034e0:	d111      	bne.n	8003506 <HAL_CRCEx_Polynomial_Set+0x56>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80034e2:	6803      	ldr	r3, [r0, #0]
 80034e4:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80034e6:	6801      	ldr	r1, [r0, #0]
 80034e8:	688b      	ldr	r3, [r1, #8]
 80034ea:	2018      	movs	r0, #24
 80034ec:	4383      	bics	r3, r0
 80034ee:	431a      	orrs	r2, r3
 80034f0:	608a      	str	r2, [r1, #8]
 80034f2:	2000      	movs	r0, #0
  }
  /* Return function status */
  return status;
}
 80034f4:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 80034f6:	2c07      	cmp	r4, #7
 80034f8:	d9f3      	bls.n	80034e2 <HAL_CRCEx_Polynomial_Set+0x32>
        status =   HAL_ERROR;
 80034fa:	2001      	movs	r0, #1
 80034fc:	e7fa      	b.n	80034f4 <HAL_CRCEx_Polynomial_Set+0x44>
      if (msb >= HAL_CRC_LENGTH_16B)
 80034fe:	2c0f      	cmp	r4, #15
 8003500:	d9ef      	bls.n	80034e2 <HAL_CRCEx_Polynomial_Set+0x32>
        status =   HAL_ERROR;
 8003502:	2001      	movs	r0, #1
 8003504:	e7f6      	b.n	80034f4 <HAL_CRCEx_Polynomial_Set+0x44>
      status =  HAL_ERROR;
 8003506:	2001      	movs	r0, #1
 8003508:	e7f4      	b.n	80034f4 <HAL_CRCEx_Polynomial_Set+0x44>

0800350a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800350a:	b570      	push	{r4, r5, r6, lr}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800350c:	251c      	movs	r5, #28
 800350e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003510:	4025      	ands	r5, r4
 8003512:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8003514:	2401      	movs	r4, #1
 8003516:	40ac      	lsls	r4, r5
 8003518:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800351a:	6804      	ldr	r4, [r0, #0]
 800351c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800351e:	6883      	ldr	r3, [r0, #8]
 8003520:	2b10      	cmp	r3, #16
 8003522:	d004      	beq.n	800352e <DMA_SetConfig+0x24>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003524:	6803      	ldr	r3, [r0, #0]
 8003526:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003528:	6803      	ldr	r3, [r0, #0]
 800352a:	60da      	str	r2, [r3, #12]
  }
}
 800352c:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 800352e:	6803      	ldr	r3, [r0, #0]
 8003530:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003532:	6803      	ldr	r3, [r0, #0]
 8003534:	60d9      	str	r1, [r3, #12]
 8003536:	e7f9      	b.n	800352c <DMA_SetConfig+0x22>

08003538 <HAL_DMA_Init>:
{
 8003538:	b570      	push	{r4, r5, r6, lr}
 800353a:	1e04      	subs	r4, r0, #0
  if(hdma == NULL)
 800353c:	d03d      	beq.n	80035ba <HAL_DMA_Init+0x82>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800353e:	6805      	ldr	r5, [r0, #0]
 8003540:	4b1f      	ldr	r3, [pc, #124]	; (80035c0 <HAL_DMA_Init+0x88>)
 8003542:	18e8      	adds	r0, r5, r3
 8003544:	2114      	movs	r1, #20
 8003546:	f7fc fdfb 	bl	8000140 <__udivsi3>
 800354a:	0080      	lsls	r0, r0, #2
 800354c:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 800354e:	4b1d      	ldr	r3, [pc, #116]	; (80035c4 <HAL_DMA_Init+0x8c>)
 8003550:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003552:	2325      	movs	r3, #37	; 0x25
 8003554:	2202      	movs	r2, #2
 8003556:	54e2      	strb	r2, [r4, r3]
  tmp = hdma->Instance->CCR;
 8003558:	682b      	ldr	r3, [r5, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800355a:	4a1b      	ldr	r2, [pc, #108]	; (80035c8 <HAL_DMA_Init+0x90>)
 800355c:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 800355e:	68a3      	ldr	r3, [r4, #8]
 8003560:	68e1      	ldr	r1, [r4, #12]
 8003562:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003564:	6921      	ldr	r1, [r4, #16]
 8003566:	430b      	orrs	r3, r1
 8003568:	6961      	ldr	r1, [r4, #20]
 800356a:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800356c:	69a1      	ldr	r1, [r4, #24]
 800356e:	430b      	orrs	r3, r1
 8003570:	69e1      	ldr	r1, [r4, #28]
 8003572:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8003574:	6a21      	ldr	r1, [r4, #32]
 8003576:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8003578:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 800357a:	602b      	str	r3, [r5, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800357c:	2380      	movs	r3, #128	; 0x80
 800357e:	01db      	lsls	r3, r3, #7
 8003580:	68a2      	ldr	r2, [r4, #8]
 8003582:	429a      	cmp	r2, r3
 8003584:	d010      	beq.n	80035a8 <HAL_DMA_Init+0x70>
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003586:	4b11      	ldr	r3, [pc, #68]	; (80035cc <HAL_DMA_Init+0x94>)
 8003588:	6819      	ldr	r1, [r3, #0]
 800358a:	221c      	movs	r2, #28
 800358c:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800358e:	4015      	ands	r5, r2
 8003590:	200f      	movs	r0, #15
 8003592:	40a8      	lsls	r0, r5
 8003594:	4381      	bics	r1, r0
 8003596:	6019      	str	r1, [r3, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003598:	6819      	ldr	r1, [r3, #0]
 800359a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800359c:	4002      	ands	r2, r0
 800359e:	6860      	ldr	r0, [r4, #4]
 80035a0:	4090      	lsls	r0, r2
 80035a2:	0002      	movs	r2, r0
 80035a4:	430a      	orrs	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035a8:	2300      	movs	r3, #0
 80035aa:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 80035ac:	2225      	movs	r2, #37	; 0x25
 80035ae:	2101      	movs	r1, #1
 80035b0:	54a1      	strb	r1, [r4, r2]
  hdma->Lock = HAL_UNLOCKED;
 80035b2:	3a01      	subs	r2, #1
 80035b4:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 80035b6:	2000      	movs	r0, #0
}
 80035b8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80035ba:	2001      	movs	r0, #1
 80035bc:	e7fc      	b.n	80035b8 <HAL_DMA_Init+0x80>
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	bffdfff8 	.word	0xbffdfff8
 80035c4:	40020000 	.word	0x40020000
 80035c8:	ffff800f 	.word	0xffff800f
 80035cc:	400200a8 	.word	0x400200a8

080035d0 <HAL_DMA_Start_IT>:
{
 80035d0:	b570      	push	{r4, r5, r6, lr}
 80035d2:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 80035d4:	2024      	movs	r0, #36	; 0x24
 80035d6:	5c20      	ldrb	r0, [r4, r0]
 80035d8:	2801      	cmp	r0, #1
 80035da:	d032      	beq.n	8003642 <HAL_DMA_Start_IT+0x72>
 80035dc:	2024      	movs	r0, #36	; 0x24
 80035de:	2501      	movs	r5, #1
 80035e0:	5425      	strb	r5, [r4, r0]
  if(HAL_DMA_STATE_READY == hdma->State)
 80035e2:	3001      	adds	r0, #1
 80035e4:	5c20      	ldrb	r0, [r4, r0]
 80035e6:	2801      	cmp	r0, #1
 80035e8:	d004      	beq.n	80035f4 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 80035ea:	2324      	movs	r3, #36	; 0x24
 80035ec:	2200      	movs	r2, #0
 80035ee:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 80035f0:	2002      	movs	r0, #2
}
 80035f2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80035f4:	3024      	adds	r0, #36	; 0x24
 80035f6:	3501      	adds	r5, #1
 80035f8:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035fa:	2000      	movs	r0, #0
 80035fc:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80035fe:	6825      	ldr	r5, [r4, #0]
 8003600:	6828      	ldr	r0, [r5, #0]
 8003602:	2601      	movs	r6, #1
 8003604:	43b0      	bics	r0, r6
 8003606:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003608:	0020      	movs	r0, r4
 800360a:	f7ff ff7e 	bl	800350a <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 800360e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00b      	beq.n	800362c <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003614:	6822      	ldr	r2, [r4, #0]
 8003616:	6813      	ldr	r3, [r2, #0]
 8003618:	210e      	movs	r1, #14
 800361a:	430b      	orrs	r3, r1
 800361c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800361e:	6822      	ldr	r2, [r4, #0]
 8003620:	6813      	ldr	r3, [r2, #0]
 8003622:	2101      	movs	r1, #1
 8003624:	430b      	orrs	r3, r1
 8003626:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003628:	2000      	movs	r0, #0
 800362a:	e7e2      	b.n	80035f2 <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800362c:	6822      	ldr	r2, [r4, #0]
 800362e:	6813      	ldr	r3, [r2, #0]
 8003630:	2104      	movs	r1, #4
 8003632:	438b      	bics	r3, r1
 8003634:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003636:	6822      	ldr	r2, [r4, #0]
 8003638:	6813      	ldr	r3, [r2, #0]
 800363a:	3106      	adds	r1, #6
 800363c:	430b      	orrs	r3, r1
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	e7ed      	b.n	800361e <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8003642:	2002      	movs	r0, #2
 8003644:	e7d5      	b.n	80035f2 <HAL_DMA_Start_IT+0x22>

08003646 <HAL_DMA_Abort_IT>:
{
 8003646:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003648:	2325      	movs	r3, #37	; 0x25
 800364a:	5cc3      	ldrb	r3, [r0, r3]
 800364c:	2b02      	cmp	r3, #2
 800364e:	d003      	beq.n	8003658 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003650:	2304      	movs	r3, #4
 8003652:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003654:	2001      	movs	r0, #1
}
 8003656:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003658:	6802      	ldr	r2, [r0, #0]
 800365a:	6813      	ldr	r3, [r2, #0]
 800365c:	210e      	movs	r1, #14
 800365e:	438b      	bics	r3, r1
 8003660:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003662:	6801      	ldr	r1, [r0, #0]
 8003664:	680a      	ldr	r2, [r1, #0]
 8003666:	2301      	movs	r3, #1
 8003668:	439a      	bics	r2, r3
 800366a:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800366c:	221c      	movs	r2, #28
 800366e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003670:	400a      	ands	r2, r1
 8003672:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003674:	001c      	movs	r4, r3
 8003676:	4094      	lsls	r4, r2
 8003678:	604c      	str	r4, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800367a:	2225      	movs	r2, #37	; 0x25
 800367c:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 800367e:	3323      	adds	r3, #35	; 0x23
 8003680:	2200      	movs	r2, #0
 8003682:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 8003684:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <HAL_DMA_Abort_IT+0x4a>
      hdma->XferAbortCallback(hdma);
 800368a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800368c:	2000      	movs	r0, #0
 800368e:	e7e2      	b.n	8003656 <HAL_DMA_Abort_IT+0x10>
 8003690:	2000      	movs	r0, #0
 8003692:	e7e0      	b.n	8003656 <HAL_DMA_Abort_IT+0x10>

08003694 <HAL_DMA_IRQHandler>:
{
 8003694:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003696:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003698:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800369a:	6804      	ldr	r4, [r0, #0]
 800369c:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800369e:	231c      	movs	r3, #28
 80036a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80036a2:	4013      	ands	r3, r2
 80036a4:	2204      	movs	r2, #4
 80036a6:	409a      	lsls	r2, r3
 80036a8:	4211      	tst	r1, r2
 80036aa:	d014      	beq.n	80036d6 <HAL_DMA_IRQHandler+0x42>
 80036ac:	076a      	lsls	r2, r5, #29
 80036ae:	d512      	bpl.n	80036d6 <HAL_DMA_IRQHandler+0x42>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	069b      	lsls	r3, r3, #26
 80036b4:	d403      	bmi.n	80036be <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036b6:	6823      	ldr	r3, [r4, #0]
 80036b8:	2204      	movs	r2, #4
 80036ba:	4393      	bics	r3, r2
 80036bc:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80036be:	221c      	movs	r2, #28
 80036c0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80036c2:	401a      	ands	r2, r3
 80036c4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80036c6:	2304      	movs	r3, #4
 80036c8:	4093      	lsls	r3, r2
 80036ca:	604b      	str	r3, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 80036cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d000      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x40>
        hdma->XferHalfCpltCallback(hdma);
 80036d2:	4798      	blx	r3
}
 80036d4:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80036d6:	2202      	movs	r2, #2
 80036d8:	409a      	lsls	r2, r3
 80036da:	4211      	tst	r1, r2
 80036dc:	d01a      	beq.n	8003714 <HAL_DMA_IRQHandler+0x80>
 80036de:	07aa      	lsls	r2, r5, #30
 80036e0:	d518      	bpl.n	8003714 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	069b      	lsls	r3, r3, #26
 80036e6:	d406      	bmi.n	80036f6 <HAL_DMA_IRQHandler+0x62>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036e8:	6823      	ldr	r3, [r4, #0]
 80036ea:	220a      	movs	r2, #10
 80036ec:	4393      	bics	r3, r2
 80036ee:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80036f0:	2325      	movs	r3, #37	; 0x25
 80036f2:	3a09      	subs	r2, #9
 80036f4:	54c2      	strb	r2, [r0, r3]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80036f6:	221c      	movs	r2, #28
 80036f8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80036fa:	401a      	ands	r2, r3
 80036fc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80036fe:	2302      	movs	r3, #2
 8003700:	4093      	lsls	r3, r2
 8003702:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003704:	2324      	movs	r3, #36	; 0x24
 8003706:	2200      	movs	r2, #0
 8003708:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferCpltCallback != NULL)
 800370a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0e1      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x40>
      hdma->XferCpltCallback(hdma);
 8003710:	4798      	blx	r3
 8003712:	e7df      	b.n	80036d4 <HAL_DMA_IRQHandler+0x40>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003714:	2208      	movs	r2, #8
 8003716:	409a      	lsls	r2, r3
 8003718:	4211      	tst	r1, r2
 800371a:	d0db      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x40>
 800371c:	072b      	lsls	r3, r5, #28
 800371e:	d5d9      	bpl.n	80036d4 <HAL_DMA_IRQHandler+0x40>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003720:	6823      	ldr	r3, [r4, #0]
 8003722:	220e      	movs	r2, #14
 8003724:	4393      	bics	r3, r2
 8003726:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003728:	320e      	adds	r2, #14
 800372a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800372c:	401a      	ands	r2, r3
 800372e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003730:	2301      	movs	r3, #1
 8003732:	001c      	movs	r4, r3
 8003734:	4094      	lsls	r4, r2
 8003736:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003738:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800373a:	2225      	movs	r2, #37	; 0x25
 800373c:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 800373e:	3323      	adds	r3, #35	; 0x23
 8003740:	2200      	movs	r2, #0
 8003742:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8003744:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0c4      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x40>
      hdma->XferErrorCallback(hdma);
 800374a:	4798      	blx	r3
  return;
 800374c:	e7c2      	b.n	80036d4 <HAL_DMA_IRQHandler+0x40>
	...

08003750 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003750:	4b2a      	ldr	r3, [pc, #168]	; (80037fc <FLASH_SetErrorCode+0xac>)
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	05db      	lsls	r3, r3, #23
 8003756:	d54f      	bpl.n	80037f8 <FLASH_SetErrorCode+0xa8>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003758:	4a29      	ldr	r2, [pc, #164]	; (8003800 <FLASH_SetErrorCode+0xb0>)
 800375a:	6953      	ldr	r3, [r2, #20]
 800375c:	2102      	movs	r1, #2
 800375e:	430b      	orrs	r3, r1
 8003760:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 8003762:	2380      	movs	r3, #128	; 0x80
 8003764:	005b      	lsls	r3, r3, #1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8003766:	4a25      	ldr	r2, [pc, #148]	; (80037fc <FLASH_SetErrorCode+0xac>)
 8003768:	6992      	ldr	r2, [r2, #24]
 800376a:	0592      	lsls	r2, r2, #22
 800376c:	d507      	bpl.n	800377e <FLASH_SetErrorCode+0x2e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800376e:	4924      	ldr	r1, [pc, #144]	; (8003800 <FLASH_SetErrorCode+0xb0>)
 8003770:	694a      	ldr	r2, [r1, #20]
 8003772:	2001      	movs	r0, #1
 8003774:	4302      	orrs	r2, r0
 8003776:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_PGAERR;
 8003778:	2280      	movs	r2, #128	; 0x80
 800377a:	0092      	lsls	r2, r2, #2
 800377c:	4313      	orrs	r3, r2
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800377e:	4a1f      	ldr	r2, [pc, #124]	; (80037fc <FLASH_SetErrorCode+0xac>)
 8003780:	6992      	ldr	r2, [r2, #24]
 8003782:	0552      	lsls	r2, r2, #21
 8003784:	d507      	bpl.n	8003796 <FLASH_SetErrorCode+0x46>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8003786:	491e      	ldr	r1, [pc, #120]	; (8003800 <FLASH_SetErrorCode+0xb0>)
 8003788:	694a      	ldr	r2, [r1, #20]
 800378a:	2008      	movs	r0, #8
 800378c:	4302      	orrs	r2, r0
 800378e:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_SIZERR;
 8003790:	2280      	movs	r2, #128	; 0x80
 8003792:	00d2      	lsls	r2, r2, #3
 8003794:	4313      	orrs	r3, r2
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003796:	4a19      	ldr	r2, [pc, #100]	; (80037fc <FLASH_SetErrorCode+0xac>)
 8003798:	6992      	ldr	r2, [r2, #24]
 800379a:	0512      	lsls	r2, r2, #20
 800379c:	d507      	bpl.n	80037ae <FLASH_SetErrorCode+0x5e>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800379e:	4918      	ldr	r1, [pc, #96]	; (8003800 <FLASH_SetErrorCode+0xb0>)
 80037a0:	694a      	ldr	r2, [r1, #20]
 80037a2:	2004      	movs	r0, #4
 80037a4:	4302      	orrs	r2, r0
 80037a6:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_OPTVERR;
 80037a8:	2280      	movs	r2, #128	; 0x80
 80037aa:	0112      	lsls	r2, r2, #4
 80037ac:	4313      	orrs	r3, r2
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 80037ae:	4a13      	ldr	r2, [pc, #76]	; (80037fc <FLASH_SetErrorCode+0xac>)
 80037b0:	6992      	ldr	r2, [r2, #24]
 80037b2:	0492      	lsls	r2, r2, #18
 80037b4:	d507      	bpl.n	80037c6 <FLASH_SetErrorCode+0x76>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80037b6:	4912      	ldr	r1, [pc, #72]	; (8003800 <FLASH_SetErrorCode+0xb0>)
 80037b8:	694a      	ldr	r2, [r1, #20]
 80037ba:	2010      	movs	r0, #16
 80037bc:	4302      	orrs	r2, r0
 80037be:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_RDERR;
 80037c0:	2280      	movs	r2, #128	; 0x80
 80037c2:	0192      	lsls	r2, r2, #6
 80037c4:	4313      	orrs	r3, r2
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80037c6:	4a0d      	ldr	r2, [pc, #52]	; (80037fc <FLASH_SetErrorCode+0xac>)
 80037c8:	6992      	ldr	r2, [r2, #24]
 80037ca:	0392      	lsls	r2, r2, #14
 80037cc:	d505      	bpl.n	80037da <FLASH_SetErrorCode+0x8a>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80037ce:	480c      	ldr	r0, [pc, #48]	; (8003800 <FLASH_SetErrorCode+0xb0>)
 80037d0:	6942      	ldr	r2, [r0, #20]
 80037d2:	2120      	movs	r1, #32
 80037d4:	430a      	orrs	r2, r1
 80037d6:	6142      	str	r2, [r0, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 80037d8:	430b      	orrs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 80037da:	4a08      	ldr	r2, [pc, #32]	; (80037fc <FLASH_SetErrorCode+0xac>)
 80037dc:	6992      	ldr	r2, [r2, #24]
 80037de:	03d2      	lsls	r2, r2, #15
 80037e0:	d507      	bpl.n	80037f2 <FLASH_SetErrorCode+0xa2>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80037e2:	4907      	ldr	r1, [pc, #28]	; (8003800 <FLASH_SetErrorCode+0xb0>)
 80037e4:	694a      	ldr	r2, [r1, #20]
 80037e6:	2040      	movs	r0, #64	; 0x40
 80037e8:	4302      	orrs	r2, r0
 80037ea:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 80037ec:	2280      	movs	r2, #128	; 0x80
 80037ee:	0252      	lsls	r2, r2, #9
 80037f0:	4313      	orrs	r3, r2
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80037f2:	4a02      	ldr	r2, [pc, #8]	; (80037fc <FLASH_SetErrorCode+0xac>)
 80037f4:	6193      	str	r3, [r2, #24]
}  
 80037f6:	4770      	bx	lr
  uint32_t flags = 0;
 80037f8:	2300      	movs	r3, #0
 80037fa:	e7b4      	b.n	8003766 <FLASH_SetErrorCode+0x16>
 80037fc:	40022000 	.word	0x40022000
 8003800:	20003908 	.word	0x20003908

08003804 <FLASH_WaitForLastOperation>:
{
 8003804:	b570      	push	{r4, r5, r6, lr}
 8003806:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003808:	f7ff fa96 	bl	8002d38 <HAL_GetTick>
 800380c:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800380e:	4b1d      	ldr	r3, [pc, #116]	; (8003884 <FLASH_WaitForLastOperation+0x80>)
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	07db      	lsls	r3, r3, #31
 8003814:	d50a      	bpl.n	800382c <FLASH_WaitForLastOperation+0x28>
    if (Timeout != HAL_MAX_DELAY)
 8003816:	1c63      	adds	r3, r4, #1
 8003818:	d0f9      	beq.n	800380e <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800381a:	2c00      	cmp	r4, #0
 800381c:	d02d      	beq.n	800387a <FLASH_WaitForLastOperation+0x76>
 800381e:	f7ff fa8b 	bl	8002d38 <HAL_GetTick>
 8003822:	1b40      	subs	r0, r0, r5
 8003824:	42a0      	cmp	r0, r4
 8003826:	d9f2      	bls.n	800380e <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8003828:	2003      	movs	r0, #3
 800382a:	e025      	b.n	8003878 <FLASH_WaitForLastOperation+0x74>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800382c:	4b15      	ldr	r3, [pc, #84]	; (8003884 <FLASH_WaitForLastOperation+0x80>)
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	079b      	lsls	r3, r3, #30
 8003832:	d502      	bpl.n	800383a <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003834:	4b13      	ldr	r3, [pc, #76]	; (8003884 <FLASH_WaitForLastOperation+0x80>)
 8003836:	2202      	movs	r2, #2
 8003838:	619a      	str	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800383a:	4b12      	ldr	r3, [pc, #72]	; (8003884 <FLASH_WaitForLastOperation+0x80>)
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	05db      	lsls	r3, r3, #23
 8003840:	d417      	bmi.n	8003872 <FLASH_WaitForLastOperation+0x6e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8003842:	4b10      	ldr	r3, [pc, #64]	; (8003884 <FLASH_WaitForLastOperation+0x80>)
 8003844:	699b      	ldr	r3, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8003846:	059b      	lsls	r3, r3, #22
 8003848:	d413      	bmi.n	8003872 <FLASH_WaitForLastOperation+0x6e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800384a:	4b0e      	ldr	r3, [pc, #56]	; (8003884 <FLASH_WaitForLastOperation+0x80>)
 800384c:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800384e:	055b      	lsls	r3, r3, #21
 8003850:	d40f      	bmi.n	8003872 <FLASH_WaitForLastOperation+0x6e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8003852:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <FLASH_WaitForLastOperation+0x80>)
 8003854:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8003856:	051b      	lsls	r3, r3, #20
 8003858:	d40b      	bmi.n	8003872 <FLASH_WaitForLastOperation+0x6e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800385a:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <FLASH_WaitForLastOperation+0x80>)
 800385c:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800385e:	049b      	lsls	r3, r3, #18
 8003860:	d407      	bmi.n	8003872 <FLASH_WaitForLastOperation+0x6e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8003862:	4b08      	ldr	r3, [pc, #32]	; (8003884 <FLASH_WaitForLastOperation+0x80>)
 8003864:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8003866:	039b      	lsls	r3, r3, #14
 8003868:	d403      	bmi.n	8003872 <FLASH_WaitForLastOperation+0x6e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800386a:	4b06      	ldr	r3, [pc, #24]	; (8003884 <FLASH_WaitForLastOperation+0x80>)
 800386c:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800386e:	03db      	lsls	r3, r3, #15
 8003870:	d505      	bpl.n	800387e <FLASH_WaitForLastOperation+0x7a>
    FLASH_SetErrorCode();
 8003872:	f7ff ff6d 	bl	8003750 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003876:	2001      	movs	r0, #1
}
 8003878:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 800387a:	2003      	movs	r0, #3
 800387c:	e7fc      	b.n	8003878 <FLASH_WaitForLastOperation+0x74>
  return HAL_OK;
 800387e:	2000      	movs	r0, #0
 8003880:	e7fa      	b.n	8003878 <FLASH_WaitForLastOperation+0x74>
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	40022000 	.word	0x40022000

08003888 <HAL_FLASHEx_DATAEEPROM_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8003888:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x30>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	07db      	lsls	r3, r3, #31
 800388e:	d510      	bpl.n	80038b2 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003890:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003894:	b672      	cpsid	i
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8003896:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x30>)
 8003898:	4908      	ldr	r1, [pc, #32]	; (80038bc <HAL_FLASHEx_DATAEEPROM_Unlock+0x34>)
 800389a:	60d9      	str	r1, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800389c:	4908      	ldr	r1, [pc, #32]	; (80038c0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x38>)
 800389e:	60d9      	str	r1, [r3, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a0:	f382 8810 	msr	PRIMASK, r2

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	07db      	lsls	r3, r3, #31
 80038a8:	d401      	bmi.n	80038ae <HAL_FLASHEx_DATAEEPROM_Unlock+0x26>
    {
      return HAL_ERROR;
    }
  }

  return HAL_OK;  
 80038aa:	2000      	movs	r0, #0
 80038ac:	e002      	b.n	80038b4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>
      return HAL_ERROR;
 80038ae:	2001      	movs	r0, #1
 80038b0:	e000      	b.n	80038b4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>
  return HAL_OK;  
 80038b2:	2000      	movs	r0, #0
}
 80038b4:	4770      	bx	lr
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	40022000 	.word	0x40022000
 80038bc:	89abcdef 	.word	0x89abcdef
 80038c0:	02030405 	.word	0x02030405

080038c4 <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80038c4:	4a03      	ldr	r2, [pc, #12]	; (80038d4 <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
 80038c6:	6853      	ldr	r3, [r2, #4]
 80038c8:	2101      	movs	r1, #1
 80038ca:	430b      	orrs	r3, r1
 80038cc:	6053      	str	r3, [r2, #4]
  
  return HAL_OK;
}
 80038ce:	2000      	movs	r0, #0
 80038d0:	4770      	bx	lr
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	40022000 	.word	0x40022000

080038d8 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80038d8:	b570      	push	{r4, r5, r6, lr}
 80038da:	0004      	movs	r4, r0
 80038dc:	000e      	movs	r6, r1
 80038de:	0015      	movs	r5, r2
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80038e0:	4b12      	ldr	r3, [pc, #72]	; (800392c <HAL_FLASHEx_DATAEEPROM_Program+0x54>)
 80038e2:	7c1b      	ldrb	r3, [r3, #16]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d01f      	beq.n	8003928 <HAL_FLASHEx_DATAEEPROM_Program+0x50>
 80038e8:	4b10      	ldr	r3, [pc, #64]	; (800392c <HAL_FLASHEx_DATAEEPROM_Program+0x54>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80038ee:	4810      	ldr	r0, [pc, #64]	; (8003930 <HAL_FLASHEx_DATAEEPROM_Program+0x58>)
 80038f0:	f7ff ff88 	bl	8003804 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 80038f4:	2800      	cmp	r0, #0
 80038f6:	d10c      	bne.n	8003912 <HAL_FLASHEx_DATAEEPROM_Program+0x3a>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80038f8:	4b0c      	ldr	r3, [pc, #48]	; (800392c <HAL_FLASHEx_DATAEEPROM_Program+0x54>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 80038fe:	2c02      	cmp	r4, #2
 8003900:	d006      	beq.n	8003910 <HAL_FLASHEx_DATAEEPROM_Program+0x38>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8003902:	2c01      	cmp	r4, #1
 8003904:	d009      	beq.n	800391a <HAL_FLASHEx_DATAEEPROM_Program+0x42>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8003906:	2c00      	cmp	r4, #0
 8003908:	d10a      	bne.n	8003920 <HAL_FLASHEx_DATAEEPROM_Program+0x48>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800390a:	b2ed      	uxtb	r5, r5
 800390c:	7035      	strb	r5, [r6, #0]
 800390e:	e000      	b.n	8003912 <HAL_FLASHEx_DATAEEPROM_Program+0x3a>
      *(__IO uint32_t *)Address = Data;
 8003910:	6035      	str	r5, [r6, #0]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003912:	4b06      	ldr	r3, [pc, #24]	; (800392c <HAL_FLASHEx_DATAEEPROM_Program+0x54>)
 8003914:	2200      	movs	r2, #0
 8003916:	741a      	strb	r2, [r3, #16]

  return status;
}
 8003918:	bd70      	pop	{r4, r5, r6, pc}
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800391a:	b2ad      	uxth	r5, r5
 800391c:	8035      	strh	r5, [r6, #0]
 800391e:	e7f8      	b.n	8003912 <HAL_FLASHEx_DATAEEPROM_Program+0x3a>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003920:	4803      	ldr	r0, [pc, #12]	; (8003930 <HAL_FLASHEx_DATAEEPROM_Program+0x58>)
 8003922:	f7ff ff6f 	bl	8003804 <FLASH_WaitForLastOperation>
 8003926:	e7f4      	b.n	8003912 <HAL_FLASHEx_DATAEEPROM_Program+0x3a>
  __HAL_LOCK(&pFlash);
 8003928:	2002      	movs	r0, #2
 800392a:	e7f5      	b.n	8003918 <HAL_FLASHEx_DATAEEPROM_Program+0x40>
 800392c:	20003908 	.word	0x20003908
 8003930:	0000c350 	.word	0x0000c350

08003934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003936:	46c6      	mov	lr, r8
 8003938:	b500      	push	{lr}
  uint32_t position = 0x00U;
 800393a:	2300      	movs	r3, #0
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800393c:	e038      	b.n	80039b0 <HAL_GPIO_Init+0x7c>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800393e:	2605      	movs	r6, #5
 8003940:	e000      	b.n	8003944 <HAL_GPIO_Init+0x10>
 8003942:	2600      	movs	r6, #0
 8003944:	40ae      	lsls	r6, r5
 8003946:	0035      	movs	r5, r6
 8003948:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800394a:	3402      	adds	r4, #2
 800394c:	00a4      	lsls	r4, r4, #2
 800394e:	4e58      	ldr	r6, [pc, #352]	; (8003ab0 <HAL_GPIO_Init+0x17c>)
 8003950:	51a5      	str	r5, [r4, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003952:	4c58      	ldr	r4, [pc, #352]	; (8003ab4 <HAL_GPIO_Init+0x180>)
 8003954:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8003956:	4642      	mov	r2, r8
 8003958:	43d4      	mvns	r4, r2
 800395a:	002e      	movs	r6, r5
 800395c:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800395e:	684a      	ldr	r2, [r1, #4]
 8003960:	03d2      	lsls	r2, r2, #15
 8003962:	d502      	bpl.n	800396a <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8003964:	4642      	mov	r2, r8
 8003966:	4315      	orrs	r5, r2
 8003968:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 800396a:	4d52      	ldr	r5, [pc, #328]	; (8003ab4 <HAL_GPIO_Init+0x180>)
 800396c:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 800396e:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8003970:	002e      	movs	r6, r5
 8003972:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003974:	684a      	ldr	r2, [r1, #4]
 8003976:	0392      	lsls	r2, r2, #14
 8003978:	d502      	bpl.n	8003980 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 800397a:	4642      	mov	r2, r8
 800397c:	4315      	orrs	r5, r2
 800397e:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 8003980:	4d4c      	ldr	r5, [pc, #304]	; (8003ab4 <HAL_GPIO_Init+0x180>)
 8003982:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003984:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8003986:	002e      	movs	r6, r5
 8003988:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800398a:	684a      	ldr	r2, [r1, #4]
 800398c:	02d2      	lsls	r2, r2, #11
 800398e:	d502      	bpl.n	8003996 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8003990:	4642      	mov	r2, r8
 8003992:	4315      	orrs	r5, r2
 8003994:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 8003996:	4d47      	ldr	r5, [pc, #284]	; (8003ab4 <HAL_GPIO_Init+0x180>)
 8003998:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 800399a:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 800399c:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800399e:	684a      	ldr	r2, [r1, #4]
 80039a0:	0292      	lsls	r2, r2, #10
 80039a2:	d502      	bpl.n	80039aa <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80039a4:	4642      	mov	r2, r8
 80039a6:	432a      	orrs	r2, r5
 80039a8:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 80039aa:	4a42      	ldr	r2, [pc, #264]	; (8003ab4 <HAL_GPIO_Init+0x180>)
 80039ac:	60d4      	str	r4, [r2, #12]
      }
    }
    position++;
 80039ae:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 80039b0:	680a      	ldr	r2, [r1, #0]
 80039b2:	0014      	movs	r4, r2
 80039b4:	40dc      	lsrs	r4, r3
 80039b6:	d077      	beq.n	8003aa8 <HAL_GPIO_Init+0x174>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80039b8:	2401      	movs	r4, #1
 80039ba:	409c      	lsls	r4, r3
 80039bc:	4022      	ands	r2, r4
 80039be:	4690      	mov	r8, r2
    if(iocurrent)
 80039c0:	d0f5      	beq.n	80039ae <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80039c2:	684d      	ldr	r5, [r1, #4]
 80039c4:	2d02      	cmp	r5, #2
 80039c6:	d001      	beq.n	80039cc <HAL_GPIO_Init+0x98>
 80039c8:	2d12      	cmp	r5, #18
 80039ca:	d10e      	bne.n	80039ea <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 80039cc:	08dd      	lsrs	r5, r3, #3
 80039ce:	3508      	adds	r5, #8
 80039d0:	00ad      	lsls	r5, r5, #2
 80039d2:	582f      	ldr	r7, [r5, r0]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80039d4:	2607      	movs	r6, #7
 80039d6:	401e      	ands	r6, r3
 80039d8:	00b6      	lsls	r6, r6, #2
 80039da:	220f      	movs	r2, #15
 80039dc:	40b2      	lsls	r2, r6
 80039de:	4397      	bics	r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80039e0:	690a      	ldr	r2, [r1, #16]
 80039e2:	40b2      	lsls	r2, r6
 80039e4:	0016      	movs	r6, r2
 80039e6:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 80039e8:	502e      	str	r6, [r5, r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039ea:	684d      	ldr	r5, [r1, #4]
 80039ec:	1e6e      	subs	r6, r5, #1
 80039ee:	2e01      	cmp	r6, #1
 80039f0:	d903      	bls.n	80039fa <HAL_GPIO_Init+0xc6>
 80039f2:	2d11      	cmp	r5, #17
 80039f4:	d001      	beq.n	80039fa <HAL_GPIO_Init+0xc6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039f6:	2d12      	cmp	r5, #18
 80039f8:	d112      	bne.n	8003a20 <HAL_GPIO_Init+0xec>
        temp = GPIOx->OSPEEDR;
 80039fa:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80039fc:	005f      	lsls	r7, r3, #1
 80039fe:	2603      	movs	r6, #3
 8003a00:	40be      	lsls	r6, r7
 8003a02:	43b5      	bics	r5, r6
 8003a04:	002e      	movs	r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a06:	68cd      	ldr	r5, [r1, #12]
 8003a08:	40bd      	lsls	r5, r7
 8003a0a:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8003a0c:	6085      	str	r5, [r0, #8]
        temp= GPIOx->OTYPER;
 8003a0e:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a10:	43a5      	bics	r5, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a12:	684a      	ldr	r2, [r1, #4]
 8003a14:	0916      	lsrs	r6, r2, #4
 8003a16:	2401      	movs	r4, #1
 8003a18:	4034      	ands	r4, r6
 8003a1a:	409c      	lsls	r4, r3
 8003a1c:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8003a1e:	6044      	str	r4, [r0, #4]
      temp = GPIOx->MODER;
 8003a20:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a22:	005e      	lsls	r6, r3, #1
 8003a24:	2403      	movs	r4, #3
 8003a26:	0025      	movs	r5, r4
 8003a28:	40b5      	lsls	r5, r6
 8003a2a:	43ed      	mvns	r5, r5
 8003a2c:	402f      	ands	r7, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a2e:	684a      	ldr	r2, [r1, #4]
 8003a30:	4014      	ands	r4, r2
 8003a32:	40b4      	lsls	r4, r6
 8003a34:	433c      	orrs	r4, r7
      GPIOx->MODER = temp;
 8003a36:	6004      	str	r4, [r0, #0]
      temp = GPIOx->PUPDR;
 8003a38:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a3a:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8003a3c:	688c      	ldr	r4, [r1, #8]
 8003a3e:	40b4      	lsls	r4, r6
 8003a40:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8003a42:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003a44:	684a      	ldr	r2, [r1, #4]
 8003a46:	00d2      	lsls	r2, r2, #3
 8003a48:	d5b1      	bpl.n	80039ae <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a4a:	4d1b      	ldr	r5, [pc, #108]	; (8003ab8 <HAL_GPIO_Init+0x184>)
 8003a4c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8003a4e:	2601      	movs	r6, #1
 8003a50:	4334      	orrs	r4, r6
 8003a52:	636c      	str	r4, [r5, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8003a54:	089c      	lsrs	r4, r3, #2
 8003a56:	1ca5      	adds	r5, r4, #2
 8003a58:	00ad      	lsls	r5, r5, #2
 8003a5a:	4e15      	ldr	r6, [pc, #84]	; (8003ab0 <HAL_GPIO_Init+0x17c>)
 8003a5c:	59af      	ldr	r7, [r5, r6]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8003a5e:	2603      	movs	r6, #3
 8003a60:	401e      	ands	r6, r3
 8003a62:	00b5      	lsls	r5, r6, #2
 8003a64:	260f      	movs	r6, #15
 8003a66:	40ae      	lsls	r6, r5
 8003a68:	43b7      	bics	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003a6a:	26a0      	movs	r6, #160	; 0xa0
 8003a6c:	05f6      	lsls	r6, r6, #23
 8003a6e:	42b0      	cmp	r0, r6
 8003a70:	d100      	bne.n	8003a74 <HAL_GPIO_Init+0x140>
 8003a72:	e766      	b.n	8003942 <HAL_GPIO_Init+0xe>
 8003a74:	4e11      	ldr	r6, [pc, #68]	; (8003abc <HAL_GPIO_Init+0x188>)
 8003a76:	42b0      	cmp	r0, r6
 8003a78:	d00e      	beq.n	8003a98 <HAL_GPIO_Init+0x164>
 8003a7a:	4e11      	ldr	r6, [pc, #68]	; (8003ac0 <HAL_GPIO_Init+0x18c>)
 8003a7c:	42b0      	cmp	r0, r6
 8003a7e:	d00d      	beq.n	8003a9c <HAL_GPIO_Init+0x168>
 8003a80:	4e10      	ldr	r6, [pc, #64]	; (8003ac4 <HAL_GPIO_Init+0x190>)
 8003a82:	42b0      	cmp	r0, r6
 8003a84:	d00c      	beq.n	8003aa0 <HAL_GPIO_Init+0x16c>
 8003a86:	4e10      	ldr	r6, [pc, #64]	; (8003ac8 <HAL_GPIO_Init+0x194>)
 8003a88:	42b0      	cmp	r0, r6
 8003a8a:	d00b      	beq.n	8003aa4 <HAL_GPIO_Init+0x170>
 8003a8c:	4e0f      	ldr	r6, [pc, #60]	; (8003acc <HAL_GPIO_Init+0x198>)
 8003a8e:	42b0      	cmp	r0, r6
 8003a90:	d100      	bne.n	8003a94 <HAL_GPIO_Init+0x160>
 8003a92:	e754      	b.n	800393e <HAL_GPIO_Init+0xa>
 8003a94:	2606      	movs	r6, #6
 8003a96:	e755      	b.n	8003944 <HAL_GPIO_Init+0x10>
 8003a98:	2601      	movs	r6, #1
 8003a9a:	e753      	b.n	8003944 <HAL_GPIO_Init+0x10>
 8003a9c:	2602      	movs	r6, #2
 8003a9e:	e751      	b.n	8003944 <HAL_GPIO_Init+0x10>
 8003aa0:	2603      	movs	r6, #3
 8003aa2:	e74f      	b.n	8003944 <HAL_GPIO_Init+0x10>
 8003aa4:	2604      	movs	r6, #4
 8003aa6:	e74d      	b.n	8003944 <HAL_GPIO_Init+0x10>
  }
}
 8003aa8:	bc04      	pop	{r2}
 8003aaa:	4690      	mov	r8, r2
 8003aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	40010000 	.word	0x40010000
 8003ab4:	40010400 	.word	0x40010400
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	50000400 	.word	0x50000400
 8003ac0:	50000800 	.word	0x50000800
 8003ac4:	50000c00 	.word	0x50000c00
 8003ac8:	50001000 	.word	0x50001000
 8003acc:	50001c00 	.word	0x50001c00

08003ad0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ad0:	6903      	ldr	r3, [r0, #16]
 8003ad2:	420b      	tst	r3, r1
 8003ad4:	d101      	bne.n	8003ada <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ad6:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8003ad8:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8003ada:	2001      	movs	r0, #1
 8003adc:	e7fc      	b.n	8003ad8 <HAL_GPIO_ReadPin+0x8>

08003ade <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8003ade:	2a00      	cmp	r2, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 8003ae2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003ae4:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8003ae6:	6181      	str	r1, [r0, #24]
 8003ae8:	e7fc      	b.n	8003ae4 <HAL_GPIO_WritePin+0x6>
	...

08003aec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aec:	b510      	push	{r4, lr}
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003aee:	4b26      	ldr	r3, [pc, #152]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003af0:	68d9      	ldr	r1, [r3, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003af2:	230c      	movs	r3, #12
 8003af4:	400b      	ands	r3, r1
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d042      	beq.n	8003b80 <HAL_RCC_GetSysClockFreq+0x94>
 8003afa:	2b0c      	cmp	r3, #12
 8003afc:	d011      	beq.n	8003b22 <HAL_RCC_GetSysClockFreq+0x36>
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d009      	beq.n	8003b16 <HAL_RCC_GetSysClockFreq+0x2a>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003b02:	4b21      	ldr	r3, [pc, #132]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	0b52      	lsrs	r2, r2, #13
 8003b08:	2307      	movs	r3, #7
 8003b0a:	4013      	ands	r3, r2
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	2080      	movs	r0, #128	; 0x80
 8003b10:	0200      	lsls	r0, r0, #8
 8003b12:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 8003b14:	bd10      	pop	{r4, pc}
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003b16:	4b1c      	ldr	r3, [pc, #112]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	06db      	lsls	r3, r3, #27
 8003b1c:	d532      	bpl.n	8003b84 <HAL_RCC_GetSysClockFreq+0x98>
        sysclockfreq =  (HSI_VALUE >> 2);
 8003b1e:	481b      	ldr	r0, [pc, #108]	; (8003b8c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b20:	e7f8      	b.n	8003b14 <HAL_RCC_GetSysClockFreq+0x28>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003b22:	0c8a      	lsrs	r2, r1, #18
 8003b24:	230f      	movs	r3, #15
 8003b26:	4013      	ands	r3, r2
 8003b28:	4a19      	ldr	r2, [pc, #100]	; (8003b90 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b2a:	5cd0      	ldrb	r0, [r2, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003b2c:	0d89      	lsrs	r1, r1, #22
 8003b2e:	2203      	movs	r2, #3
 8003b30:	4011      	ands	r1, r2
 8003b32:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b34:	4b14      	ldr	r3, [pc, #80]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	03db      	lsls	r3, r3, #15
 8003b3a:	d40d      	bmi.n	8003b58 <HAL_RCC_GetSysClockFreq+0x6c>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003b3c:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	06db      	lsls	r3, r3, #27
 8003b42:	d513      	bpl.n	8003b6c <HAL_RCC_GetSysClockFreq+0x80>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8003b44:	0142      	lsls	r2, r0, #5
 8003b46:	1a12      	subs	r2, r2, r0
 8003b48:	0193      	lsls	r3, r2, #6
 8003b4a:	1a9b      	subs	r3, r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	181b      	adds	r3, r3, r0
 8003b50:	0218      	lsls	r0, r3, #8
 8003b52:	f7fc faf5 	bl	8000140 <__udivsi3>
 8003b56:	e7dd      	b.n	8003b14 <HAL_RCC_GetSysClockFreq+0x28>
        pllvco = (HSE_VALUE * pllm) / plld;
 8003b58:	0142      	lsls	r2, r0, #5
 8003b5a:	1a12      	subs	r2, r2, r0
 8003b5c:	0193      	lsls	r3, r2, #6
 8003b5e:	1a9b      	subs	r3, r3, r2
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	181b      	adds	r3, r3, r0
 8003b64:	0258      	lsls	r0, r3, #9
 8003b66:	f7fc faeb 	bl	8000140 <__udivsi3>
 8003b6a:	e7d3      	b.n	8003b14 <HAL_RCC_GetSysClockFreq+0x28>
         pllvco = (HSI_VALUE * pllm) / plld;
 8003b6c:	0142      	lsls	r2, r0, #5
 8003b6e:	1a12      	subs	r2, r2, r0
 8003b70:	0193      	lsls	r3, r2, #6
 8003b72:	1a9b      	subs	r3, r3, r2
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	181b      	adds	r3, r3, r0
 8003b78:	0298      	lsls	r0, r3, #10
 8003b7a:	f7fc fae1 	bl	8000140 <__udivsi3>
 8003b7e:	e7c9      	b.n	8003b14 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8003b80:	4804      	ldr	r0, [pc, #16]	; (8003b94 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003b82:	e7c7      	b.n	8003b14 <HAL_RCC_GetSysClockFreq+0x28>
        sysclockfreq =  HSI_VALUE;
 8003b84:	4804      	ldr	r0, [pc, #16]	; (8003b98 <HAL_RCC_GetSysClockFreq+0xac>)
  return sysclockfreq;
 8003b86:	e7c5      	b.n	8003b14 <HAL_RCC_GetSysClockFreq+0x28>
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	003d0900 	.word	0x003d0900
 8003b90:	0800c9cc 	.word	0x0800c9cc
 8003b94:	007a1200 	.word	0x007a1200
 8003b98:	00f42400 	.word	0x00f42400

08003b9c <HAL_RCC_OscConfig>:
{
 8003b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	1e04      	subs	r4, r0, #0
  if(RCC_OscInitStruct == NULL)
 8003ba2:	d100      	bne.n	8003ba6 <HAL_RCC_OscConfig+0xa>
 8003ba4:	e29f      	b.n	80040e6 <HAL_RCC_OscConfig+0x54a>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ba6:	4bc4      	ldr	r3, [pc, #784]	; (8003eb8 <HAL_RCC_OscConfig+0x31c>)
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	250c      	movs	r5, #12
 8003bac:	4015      	ands	r5, r2
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	2680      	movs	r6, #128	; 0x80
 8003bb2:	0276      	lsls	r6, r6, #9
 8003bb4:	4016      	ands	r6, r2
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bb6:	6803      	ldr	r3, [r0, #0]
 8003bb8:	07db      	lsls	r3, r3, #31
 8003bba:	d536      	bpl.n	8003c2a <HAL_RCC_OscConfig+0x8e>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bbc:	2d08      	cmp	r5, #8
 8003bbe:	d02c      	beq.n	8003c1a <HAL_RCC_OscConfig+0x7e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bc0:	2d0c      	cmp	r5, #12
 8003bc2:	d028      	beq.n	8003c16 <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bc4:	6863      	ldr	r3, [r4, #4]
 8003bc6:	2280      	movs	r2, #128	; 0x80
 8003bc8:	0252      	lsls	r2, r2, #9
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d055      	beq.n	8003c7a <HAL_RCC_OscConfig+0xde>
 8003bce:	22a0      	movs	r2, #160	; 0xa0
 8003bd0:	02d2      	lsls	r2, r2, #11
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d058      	beq.n	8003c88 <HAL_RCC_OscConfig+0xec>
 8003bd6:	4bb8      	ldr	r3, [pc, #736]	; (8003eb8 <HAL_RCC_OscConfig+0x31c>)
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	49b8      	ldr	r1, [pc, #736]	; (8003ebc <HAL_RCC_OscConfig+0x320>)
 8003bdc:	400a      	ands	r2, r1
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	2180      	movs	r1, #128	; 0x80
 8003be4:	0249      	lsls	r1, r1, #9
 8003be6:	400a      	ands	r2, r1
 8003be8:	9201      	str	r2, [sp, #4]
 8003bea:	9a01      	ldr	r2, [sp, #4]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	49b4      	ldr	r1, [pc, #720]	; (8003ec0 <HAL_RCC_OscConfig+0x324>)
 8003bf0:	400a      	ands	r2, r1
 8003bf2:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bf4:	6863      	ldr	r3, [r4, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d052      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();
 8003bfa:	f7ff f89d 	bl	8002d38 <HAL_GetTick>
 8003bfe:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c00:	4bad      	ldr	r3, [pc, #692]	; (8003eb8 <HAL_RCC_OscConfig+0x31c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	039b      	lsls	r3, r3, #14
 8003c06:	d410      	bmi.n	8003c2a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c08:	f7ff f896 	bl	8002d38 <HAL_GetTick>
 8003c0c:	1bc0      	subs	r0, r0, r7
 8003c0e:	2864      	cmp	r0, #100	; 0x64
 8003c10:	d9f6      	bls.n	8003c00 <HAL_RCC_OscConfig+0x64>
            return HAL_TIMEOUT;
 8003c12:	2003      	movs	r0, #3
 8003c14:	e268      	b.n	80040e8 <HAL_RCC_OscConfig+0x54c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c16:	2e00      	cmp	r6, #0
 8003c18:	d0d4      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c1a:	4ba7      	ldr	r3, [pc, #668]	; (8003eb8 <HAL_RCC_OscConfig+0x31c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	039b      	lsls	r3, r3, #14
 8003c20:	d503      	bpl.n	8003c2a <HAL_RCC_OscConfig+0x8e>
 8003c22:	6863      	ldr	r3, [r4, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d100      	bne.n	8003c2a <HAL_RCC_OscConfig+0x8e>
 8003c28:	e260      	b.n	80040ec <HAL_RCC_OscConfig+0x550>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c2a:	6823      	ldr	r3, [r4, #0]
 8003c2c:	079b      	lsls	r3, r3, #30
 8003c2e:	d56c      	bpl.n	8003d0a <HAL_RCC_OscConfig+0x16e>
    hsi_state = RCC_OscInitStruct->HSIState;
 8003c30:	68e3      	ldr	r3, [r4, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003c32:	069a      	lsls	r2, r3, #26
 8003c34:	d505      	bpl.n	8003c42 <HAL_RCC_OscConfig+0xa6>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003c36:	48a0      	ldr	r0, [pc, #640]	; (8003eb8 <HAL_RCC_OscConfig+0x31c>)
 8003c38:	6802      	ldr	r2, [r0, #0]
 8003c3a:	2120      	movs	r1, #32
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	6002      	str	r2, [r0, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003c40:	438b      	bics	r3, r1
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c42:	2d04      	cmp	r5, #4
 8003c44:	d03c      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x124>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c46:	2d0c      	cmp	r5, #12
 8003c48:	d038      	beq.n	8003cbc <HAL_RCC_OscConfig+0x120>
      if(hsi_state != RCC_HSI_OFF)
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d100      	bne.n	8003c50 <HAL_RCC_OscConfig+0xb4>
 8003c4e:	e0ae      	b.n	8003dae <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003c50:	4999      	ldr	r1, [pc, #612]	; (8003eb8 <HAL_RCC_OscConfig+0x31c>)
 8003c52:	680a      	ldr	r2, [r1, #0]
 8003c54:	2009      	movs	r0, #9
 8003c56:	4382      	bics	r2, r0
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8003c5c:	f7ff f86c 	bl	8002d38 <HAL_GetTick>
 8003c60:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c62:	4b95      	ldr	r3, [pc, #596]	; (8003eb8 <HAL_RCC_OscConfig+0x31c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	075b      	lsls	r3, r3, #29
 8003c68:	d500      	bpl.n	8003c6c <HAL_RCC_OscConfig+0xd0>
 8003c6a:	e097      	b.n	8003d9c <HAL_RCC_OscConfig+0x200>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c6c:	f7ff f864 	bl	8002d38 <HAL_GetTick>
 8003c70:	1b80      	subs	r0, r0, r6
 8003c72:	2802      	cmp	r0, #2
 8003c74:	d9f5      	bls.n	8003c62 <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8003c76:	2003      	movs	r0, #3
 8003c78:	e236      	b.n	80040e8 <HAL_RCC_OscConfig+0x54c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c7a:	4a8f      	ldr	r2, [pc, #572]	; (8003eb8 <HAL_RCC_OscConfig+0x31c>)
 8003c7c:	6811      	ldr	r1, [r2, #0]
 8003c7e:	2380      	movs	r3, #128	; 0x80
 8003c80:	025b      	lsls	r3, r3, #9
 8003c82:	430b      	orrs	r3, r1
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	e7b5      	b.n	8003bf4 <HAL_RCC_OscConfig+0x58>
 8003c88:	4b8b      	ldr	r3, [pc, #556]	; (8003eb8 <HAL_RCC_OscConfig+0x31c>)
 8003c8a:	6819      	ldr	r1, [r3, #0]
 8003c8c:	2280      	movs	r2, #128	; 0x80
 8003c8e:	02d2      	lsls	r2, r2, #11
 8003c90:	430a      	orrs	r2, r1
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	6819      	ldr	r1, [r3, #0]
 8003c96:	2280      	movs	r2, #128	; 0x80
 8003c98:	0252      	lsls	r2, r2, #9
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	e7a9      	b.n	8003bf4 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 8003ca0:	f7ff f84a 	bl	8002d38 <HAL_GetTick>
 8003ca4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ca6:	4b84      	ldr	r3, [pc, #528]	; (8003eb8 <HAL_RCC_OscConfig+0x31c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	039b      	lsls	r3, r3, #14
 8003cac:	d5bd      	bpl.n	8003c2a <HAL_RCC_OscConfig+0x8e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cae:	f7ff f843 	bl	8002d38 <HAL_GetTick>
 8003cb2:	1bc0      	subs	r0, r0, r7
 8003cb4:	2864      	cmp	r0, #100	; 0x64
 8003cb6:	d9f6      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8003cb8:	2003      	movs	r0, #3
 8003cba:	e215      	b.n	80040e8 <HAL_RCC_OscConfig+0x54c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003cbc:	2e00      	cmp	r6, #0
 8003cbe:	d1c4      	bne.n	8003c4a <HAL_RCC_OscConfig+0xae>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003cc0:	4a7d      	ldr	r2, [pc, #500]	; (8003eb8 <HAL_RCC_OscConfig+0x31c>)
 8003cc2:	6812      	ldr	r2, [r2, #0]
 8003cc4:	0752      	lsls	r2, r2, #29
 8003cc6:	d502      	bpl.n	8003cce <HAL_RCC_OscConfig+0x132>
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d100      	bne.n	8003cce <HAL_RCC_OscConfig+0x132>
 8003ccc:	e210      	b.n	80040f0 <HAL_RCC_OscConfig+0x554>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cce:	4e7a      	ldr	r6, [pc, #488]	; (8003eb8 <HAL_RCC_OscConfig+0x31c>)
 8003cd0:	6872      	ldr	r2, [r6, #4]
 8003cd2:	497c      	ldr	r1, [pc, #496]	; (8003ec4 <HAL_RCC_OscConfig+0x328>)
 8003cd4:	400a      	ands	r2, r1
 8003cd6:	6921      	ldr	r1, [r4, #16]
 8003cd8:	0209      	lsls	r1, r1, #8
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003cde:	6832      	ldr	r2, [r6, #0]
 8003ce0:	2109      	movs	r1, #9
 8003ce2:	438a      	bics	r2, r1
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ce8:	f7ff ff00 	bl	8003aec <HAL_RCC_GetSysClockFreq>
 8003cec:	68f2      	ldr	r2, [r6, #12]
 8003cee:	0912      	lsrs	r2, r2, #4
 8003cf0:	230f      	movs	r3, #15
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	4a74      	ldr	r2, [pc, #464]	; (8003ec8 <HAL_RCC_OscConfig+0x32c>)
 8003cf6:	5cd3      	ldrb	r3, [r2, r3]
 8003cf8:	40d8      	lsrs	r0, r3
 8003cfa:	4b74      	ldr	r3, [pc, #464]	; (8003ecc <HAL_RCC_OscConfig+0x330>)
 8003cfc:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8003cfe:	2000      	movs	r0, #0
 8003d00:	f004 fe80 	bl	8008a04 <HAL_InitTick>
      if(status != HAL_OK)
 8003d04:	2800      	cmp	r0, #0
 8003d06:	d000      	beq.n	8003d0a <HAL_RCC_OscConfig+0x16e>
 8003d08:	e1ee      	b.n	80040e8 <HAL_RCC_OscConfig+0x54c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	06db      	lsls	r3, r3, #27
 8003d0e:	d52c      	bpl.n	8003d6a <HAL_RCC_OscConfig+0x1ce>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8003d10:	2d00      	cmp	r5, #0
 8003d12:	d15f      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x238>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d14:	4b68      	ldr	r3, [pc, #416]	; (8003eb8 <HAL_RCC_OscConfig+0x31c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	059b      	lsls	r3, r3, #22
 8003d1a:	d503      	bpl.n	8003d24 <HAL_RCC_OscConfig+0x188>
 8003d1c:	69e3      	ldr	r3, [r4, #28]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d100      	bne.n	8003d24 <HAL_RCC_OscConfig+0x188>
 8003d22:	e1e7      	b.n	80040f4 <HAL_RCC_OscConfig+0x558>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d24:	4a64      	ldr	r2, [pc, #400]	; (8003eb8 <HAL_RCC_OscConfig+0x31c>)
 8003d26:	6853      	ldr	r3, [r2, #4]
 8003d28:	4969      	ldr	r1, [pc, #420]	; (8003ed0 <HAL_RCC_OscConfig+0x334>)
 8003d2a:	400b      	ands	r3, r1
 8003d2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003d2e:	430b      	orrs	r3, r1
 8003d30:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d32:	6853      	ldr	r3, [r2, #4]
 8003d34:	021b      	lsls	r3, r3, #8
 8003d36:	0a1b      	lsrs	r3, r3, #8
 8003d38:	6a21      	ldr	r1, [r4, #32]
 8003d3a:	0609      	lsls	r1, r1, #24
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	6053      	str	r3, [r2, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003d40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d42:	0b59      	lsrs	r1, r3, #13
 8003d44:	3101      	adds	r1, #1
 8003d46:	2380      	movs	r3, #128	; 0x80
 8003d48:	021b      	lsls	r3, r3, #8
 8003d4a:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003d4c:	68d1      	ldr	r1, [r2, #12]
 8003d4e:	0909      	lsrs	r1, r1, #4
 8003d50:	220f      	movs	r2, #15
 8003d52:	400a      	ands	r2, r1
 8003d54:	495c      	ldr	r1, [pc, #368]	; (8003ec8 <HAL_RCC_OscConfig+0x32c>)
 8003d56:	5c8a      	ldrb	r2, [r1, r2]
 8003d58:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003d5a:	4a5c      	ldr	r2, [pc, #368]	; (8003ecc <HAL_RCC_OscConfig+0x330>)
 8003d5c:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8003d5e:	2000      	movs	r0, #0
 8003d60:	f004 fe50 	bl	8008a04 <HAL_InitTick>
        if(status != HAL_OK)
 8003d64:	2800      	cmp	r0, #0
 8003d66:	d000      	beq.n	8003d6a <HAL_RCC_OscConfig+0x1ce>
 8003d68:	e1be      	b.n	80040e8 <HAL_RCC_OscConfig+0x54c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d6a:	6823      	ldr	r3, [r4, #0]
 8003d6c:	071b      	lsls	r3, r3, #28
 8003d6e:	d57d      	bpl.n	8003e6c <HAL_RCC_OscConfig+0x2d0>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d70:	6963      	ldr	r3, [r4, #20]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d067      	beq.n	8003e46 <HAL_RCC_OscConfig+0x2aa>
      __HAL_RCC_LSI_ENABLE();
 8003d76:	4a50      	ldr	r2, [pc, #320]	; (8003eb8 <HAL_RCC_OscConfig+0x31c>)
 8003d78:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003d80:	f7fe ffda 	bl	8002d38 <HAL_GetTick>
 8003d84:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d86:	4b4c      	ldr	r3, [pc, #304]	; (8003eb8 <HAL_RCC_OscConfig+0x31c>)
 8003d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d8a:	079b      	lsls	r3, r3, #30
 8003d8c:	d46e      	bmi.n	8003e6c <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d8e:	f7fe ffd3 	bl	8002d38 <HAL_GetTick>
 8003d92:	1b80      	subs	r0, r0, r6
 8003d94:	2802      	cmp	r0, #2
 8003d96:	d9f6      	bls.n	8003d86 <HAL_RCC_OscConfig+0x1ea>
          return HAL_TIMEOUT;
 8003d98:	2003      	movs	r0, #3
 8003d9a:	e1a5      	b.n	80040e8 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d9c:	4946      	ldr	r1, [pc, #280]	; (8003eb8 <HAL_RCC_OscConfig+0x31c>)
 8003d9e:	684b      	ldr	r3, [r1, #4]
 8003da0:	4a48      	ldr	r2, [pc, #288]	; (8003ec4 <HAL_RCC_OscConfig+0x328>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	6922      	ldr	r2, [r4, #16]
 8003da6:	0212      	lsls	r2, r2, #8
 8003da8:	4313      	orrs	r3, r2
 8003daa:	604b      	str	r3, [r1, #4]
 8003dac:	e7ad      	b.n	8003d0a <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 8003dae:	4a42      	ldr	r2, [pc, #264]	; (8003eb8 <HAL_RCC_OscConfig+0x31c>)
 8003db0:	6813      	ldr	r3, [r2, #0]
 8003db2:	2101      	movs	r1, #1
 8003db4:	438b      	bics	r3, r1
 8003db6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003db8:	f7fe ffbe 	bl	8002d38 <HAL_GetTick>
 8003dbc:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003dbe:	4b3e      	ldr	r3, [pc, #248]	; (8003eb8 <HAL_RCC_OscConfig+0x31c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	075b      	lsls	r3, r3, #29
 8003dc4:	d5a1      	bpl.n	8003d0a <HAL_RCC_OscConfig+0x16e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dc6:	f7fe ffb7 	bl	8002d38 <HAL_GetTick>
 8003dca:	1b80      	subs	r0, r0, r6
 8003dcc:	2802      	cmp	r0, #2
 8003dce:	d9f6      	bls.n	8003dbe <HAL_RCC_OscConfig+0x222>
            return HAL_TIMEOUT;
 8003dd0:	2003      	movs	r0, #3
 8003dd2:	e189      	b.n	80040e8 <HAL_RCC_OscConfig+0x54c>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003dd4:	69e3      	ldr	r3, [r4, #28]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d022      	beq.n	8003e20 <HAL_RCC_OscConfig+0x284>
        __HAL_RCC_MSI_ENABLE();
 8003dda:	4a37      	ldr	r2, [pc, #220]	; (8003eb8 <HAL_RCC_OscConfig+0x31c>)
 8003ddc:	6811      	ldr	r1, [r2, #0]
 8003dde:	2380      	movs	r3, #128	; 0x80
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	430b      	orrs	r3, r1
 8003de4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003de6:	f7fe ffa7 	bl	8002d38 <HAL_GetTick>
 8003dea:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003dec:	4b32      	ldr	r3, [pc, #200]	; (8003eb8 <HAL_RCC_OscConfig+0x31c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	059b      	lsls	r3, r3, #22
 8003df2:	d406      	bmi.n	8003e02 <HAL_RCC_OscConfig+0x266>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003df4:	f7fe ffa0 	bl	8002d38 <HAL_GetTick>
 8003df8:	1b80      	subs	r0, r0, r6
 8003dfa:	2802      	cmp	r0, #2
 8003dfc:	d9f6      	bls.n	8003dec <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 8003dfe:	2003      	movs	r0, #3
 8003e00:	e172      	b.n	80040e8 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e02:	4a2d      	ldr	r2, [pc, #180]	; (8003eb8 <HAL_RCC_OscConfig+0x31c>)
 8003e04:	6853      	ldr	r3, [r2, #4]
 8003e06:	4932      	ldr	r1, [pc, #200]	; (8003ed0 <HAL_RCC_OscConfig+0x334>)
 8003e08:	400b      	ands	r3, r1
 8003e0a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003e0c:	430b      	orrs	r3, r1
 8003e0e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e10:	6853      	ldr	r3, [r2, #4]
 8003e12:	021b      	lsls	r3, r3, #8
 8003e14:	0a1b      	lsrs	r3, r3, #8
 8003e16:	6a21      	ldr	r1, [r4, #32]
 8003e18:	0609      	lsls	r1, r1, #24
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	6053      	str	r3, [r2, #4]
 8003e1e:	e7a4      	b.n	8003d6a <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_MSI_DISABLE();
 8003e20:	4a25      	ldr	r2, [pc, #148]	; (8003eb8 <HAL_RCC_OscConfig+0x31c>)
 8003e22:	6813      	ldr	r3, [r2, #0]
 8003e24:	492b      	ldr	r1, [pc, #172]	; (8003ed4 <HAL_RCC_OscConfig+0x338>)
 8003e26:	400b      	ands	r3, r1
 8003e28:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003e2a:	f7fe ff85 	bl	8002d38 <HAL_GetTick>
 8003e2e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003e30:	4b21      	ldr	r3, [pc, #132]	; (8003eb8 <HAL_RCC_OscConfig+0x31c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	059b      	lsls	r3, r3, #22
 8003e36:	d598      	bpl.n	8003d6a <HAL_RCC_OscConfig+0x1ce>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e38:	f7fe ff7e 	bl	8002d38 <HAL_GetTick>
 8003e3c:	1b80      	subs	r0, r0, r6
 8003e3e:	2802      	cmp	r0, #2
 8003e40:	d9f6      	bls.n	8003e30 <HAL_RCC_OscConfig+0x294>
            return HAL_TIMEOUT;
 8003e42:	2003      	movs	r0, #3
 8003e44:	e150      	b.n	80040e8 <HAL_RCC_OscConfig+0x54c>
      __HAL_RCC_LSI_DISABLE();
 8003e46:	4a1c      	ldr	r2, [pc, #112]	; (8003eb8 <HAL_RCC_OscConfig+0x31c>)
 8003e48:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	438b      	bics	r3, r1
 8003e4e:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003e50:	f7fe ff72 	bl	8002d38 <HAL_GetTick>
 8003e54:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e56:	4b18      	ldr	r3, [pc, #96]	; (8003eb8 <HAL_RCC_OscConfig+0x31c>)
 8003e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5a:	079b      	lsls	r3, r3, #30
 8003e5c:	d506      	bpl.n	8003e6c <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e5e:	f7fe ff6b 	bl	8002d38 <HAL_GetTick>
 8003e62:	1b80      	subs	r0, r0, r6
 8003e64:	2802      	cmp	r0, #2
 8003e66:	d9f6      	bls.n	8003e56 <HAL_RCC_OscConfig+0x2ba>
          return HAL_TIMEOUT;
 8003e68:	2003      	movs	r0, #3
 8003e6a:	e13d      	b.n	80040e8 <HAL_RCC_OscConfig+0x54c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	075b      	lsls	r3, r3, #29
 8003e70:	d400      	bmi.n	8003e74 <HAL_RCC_OscConfig+0x2d8>
 8003e72:	e08c      	b.n	8003f8e <HAL_RCC_OscConfig+0x3f2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e74:	4b10      	ldr	r3, [pc, #64]	; (8003eb8 <HAL_RCC_OscConfig+0x31c>)
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	d41b      	bmi.n	8003eb4 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e7c:	4a0e      	ldr	r2, [pc, #56]	; (8003eb8 <HAL_RCC_OscConfig+0x31c>)
 8003e7e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8003e80:	2380      	movs	r3, #128	; 0x80
 8003e82:	055b      	lsls	r3, r3, #21
 8003e84:	430b      	orrs	r3, r1
 8003e86:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 8003e88:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8a:	4b13      	ldr	r3, [pc, #76]	; (8003ed8 <HAL_RCC_OscConfig+0x33c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	05db      	lsls	r3, r3, #23
 8003e90:	d526      	bpl.n	8003ee0 <HAL_RCC_OscConfig+0x344>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e92:	68a3      	ldr	r3, [r4, #8]
 8003e94:	2280      	movs	r2, #128	; 0x80
 8003e96:	0052      	lsls	r2, r2, #1
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d035      	beq.n	8003f08 <HAL_RCC_OscConfig+0x36c>
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d14b      	bne.n	8003f38 <HAL_RCC_OscConfig+0x39c>
 8003ea0:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <HAL_RCC_OscConfig+0x31c>)
 8003ea2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ea4:	490b      	ldr	r1, [pc, #44]	; (8003ed4 <HAL_RCC_OscConfig+0x338>)
 8003ea6:	400a      	ands	r2, r1
 8003ea8:	651a      	str	r2, [r3, #80]	; 0x50
 8003eaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003eac:	490b      	ldr	r1, [pc, #44]	; (8003edc <HAL_RCC_OscConfig+0x340>)
 8003eae:	400a      	ands	r2, r1
 8003eb0:	651a      	str	r2, [r3, #80]	; 0x50
 8003eb2:	e02f      	b.n	8003f14 <HAL_RCC_OscConfig+0x378>
    FlagStatus       pwrclkchanged = RESET;
 8003eb4:	2600      	movs	r6, #0
 8003eb6:	e7e8      	b.n	8003e8a <HAL_RCC_OscConfig+0x2ee>
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	fffeffff 	.word	0xfffeffff
 8003ec0:	fffbffff 	.word	0xfffbffff
 8003ec4:	ffffe0ff 	.word	0xffffe0ff
 8003ec8:	0800c9b4 	.word	0x0800c9b4
 8003ecc:	20000004 	.word	0x20000004
 8003ed0:	ffff1fff 	.word	0xffff1fff
 8003ed4:	fffffeff 	.word	0xfffffeff
 8003ed8:	40007000 	.word	0x40007000
 8003edc:	fffffbff 	.word	0xfffffbff
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ee0:	4a88      	ldr	r2, [pc, #544]	; (8004104 <HAL_RCC_OscConfig+0x568>)
 8003ee2:	6811      	ldr	r1, [r2, #0]
 8003ee4:	2380      	movs	r3, #128	; 0x80
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	430b      	orrs	r3, r1
 8003eea:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003eec:	f7fe ff24 	bl	8002d38 <HAL_GetTick>
 8003ef0:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef2:	4b84      	ldr	r3, [pc, #528]	; (8004104 <HAL_RCC_OscConfig+0x568>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	05db      	lsls	r3, r3, #23
 8003ef8:	d4cb      	bmi.n	8003e92 <HAL_RCC_OscConfig+0x2f6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003efa:	f7fe ff1d 	bl	8002d38 <HAL_GetTick>
 8003efe:	1bc0      	subs	r0, r0, r7
 8003f00:	2864      	cmp	r0, #100	; 0x64
 8003f02:	d9f6      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x356>
          return HAL_TIMEOUT;
 8003f04:	2003      	movs	r0, #3
 8003f06:	e0ef      	b.n	80040e8 <HAL_RCC_OscConfig+0x54c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f08:	4a7f      	ldr	r2, [pc, #508]	; (8004108 <HAL_RCC_OscConfig+0x56c>)
 8003f0a:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8003f0c:	2380      	movs	r3, #128	; 0x80
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	430b      	orrs	r3, r1
 8003f12:	6513      	str	r3, [r2, #80]	; 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f14:	68a3      	ldr	r3, [r4, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d028      	beq.n	8003f6c <HAL_RCC_OscConfig+0x3d0>
      tickstart = HAL_GetTick();
 8003f1a:	f7fe ff0d 	bl	8002d38 <HAL_GetTick>
 8003f1e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f20:	4b79      	ldr	r3, [pc, #484]	; (8004108 <HAL_RCC_OscConfig+0x56c>)
 8003f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f24:	059b      	lsls	r3, r3, #22
 8003f26:	d430      	bmi.n	8003f8a <HAL_RCC_OscConfig+0x3ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f28:	f7fe ff06 	bl	8002d38 <HAL_GetTick>
 8003f2c:	1bc0      	subs	r0, r0, r7
 8003f2e:	4b77      	ldr	r3, [pc, #476]	; (800410c <HAL_RCC_OscConfig+0x570>)
 8003f30:	4298      	cmp	r0, r3
 8003f32:	d9f5      	bls.n	8003f20 <HAL_RCC_OscConfig+0x384>
          return HAL_TIMEOUT;
 8003f34:	2003      	movs	r0, #3
 8003f36:	e0d7      	b.n	80040e8 <HAL_RCC_OscConfig+0x54c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f38:	22a0      	movs	r2, #160	; 0xa0
 8003f3a:	00d2      	lsls	r2, r2, #3
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d009      	beq.n	8003f54 <HAL_RCC_OscConfig+0x3b8>
 8003f40:	4b71      	ldr	r3, [pc, #452]	; (8004108 <HAL_RCC_OscConfig+0x56c>)
 8003f42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f44:	4972      	ldr	r1, [pc, #456]	; (8004110 <HAL_RCC_OscConfig+0x574>)
 8003f46:	400a      	ands	r2, r1
 8003f48:	651a      	str	r2, [r3, #80]	; 0x50
 8003f4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f4c:	4971      	ldr	r1, [pc, #452]	; (8004114 <HAL_RCC_OscConfig+0x578>)
 8003f4e:	400a      	ands	r2, r1
 8003f50:	651a      	str	r2, [r3, #80]	; 0x50
 8003f52:	e7df      	b.n	8003f14 <HAL_RCC_OscConfig+0x378>
 8003f54:	4b6c      	ldr	r3, [pc, #432]	; (8004108 <HAL_RCC_OscConfig+0x56c>)
 8003f56:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003f58:	3a01      	subs	r2, #1
 8003f5a:	3aff      	subs	r2, #255	; 0xff
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	651a      	str	r2, [r3, #80]	; 0x50
 8003f60:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003f62:	2280      	movs	r2, #128	; 0x80
 8003f64:	0052      	lsls	r2, r2, #1
 8003f66:	430a      	orrs	r2, r1
 8003f68:	651a      	str	r2, [r3, #80]	; 0x50
 8003f6a:	e7d3      	b.n	8003f14 <HAL_RCC_OscConfig+0x378>
      tickstart = HAL_GetTick();
 8003f6c:	f7fe fee4 	bl	8002d38 <HAL_GetTick>
 8003f70:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f72:	4b65      	ldr	r3, [pc, #404]	; (8004108 <HAL_RCC_OscConfig+0x56c>)
 8003f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f76:	059b      	lsls	r3, r3, #22
 8003f78:	d507      	bpl.n	8003f8a <HAL_RCC_OscConfig+0x3ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f7a:	f7fe fedd 	bl	8002d38 <HAL_GetTick>
 8003f7e:	1bc0      	subs	r0, r0, r7
 8003f80:	4b62      	ldr	r3, [pc, #392]	; (800410c <HAL_RCC_OscConfig+0x570>)
 8003f82:	4298      	cmp	r0, r3
 8003f84:	d9f5      	bls.n	8003f72 <HAL_RCC_OscConfig+0x3d6>
          return HAL_TIMEOUT;
 8003f86:	2003      	movs	r0, #3
 8003f88:	e0ae      	b.n	80040e8 <HAL_RCC_OscConfig+0x54c>
    if(pwrclkchanged == SET)
 8003f8a:	2e01      	cmp	r6, #1
 8003f8c:	d021      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x436>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	069b      	lsls	r3, r3, #26
 8003f92:	d53c      	bpl.n	800400e <HAL_RCC_OscConfig+0x472>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f94:	69a3      	ldr	r3, [r4, #24]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d021      	beq.n	8003fde <HAL_RCC_OscConfig+0x442>
        __HAL_RCC_HSI48_ENABLE();
 8003f9a:	4b5b      	ldr	r3, [pc, #364]	; (8004108 <HAL_RCC_OscConfig+0x56c>)
 8003f9c:	6899      	ldr	r1, [r3, #8]
 8003f9e:	2001      	movs	r0, #1
 8003fa0:	4301      	orrs	r1, r0
 8003fa2:	6099      	str	r1, [r3, #8]
 8003fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fa6:	4302      	orrs	r2, r0
 8003fa8:	635a      	str	r2, [r3, #52]	; 0x34
 8003faa:	4a5b      	ldr	r2, [pc, #364]	; (8004118 <HAL_RCC_OscConfig+0x57c>)
 8003fac:	6a11      	ldr	r1, [r2, #32]
 8003fae:	2380      	movs	r3, #128	; 0x80
 8003fb0:	019b      	lsls	r3, r3, #6
 8003fb2:	430b      	orrs	r3, r1
 8003fb4:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003fb6:	f7fe febf 	bl	8002d38 <HAL_GetTick>
 8003fba:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003fbc:	4b52      	ldr	r3, [pc, #328]	; (8004108 <HAL_RCC_OscConfig+0x56c>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	079b      	lsls	r3, r3, #30
 8003fc2:	d424      	bmi.n	800400e <HAL_RCC_OscConfig+0x472>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fc4:	f7fe feb8 	bl	8002d38 <HAL_GetTick>
 8003fc8:	1b80      	subs	r0, r0, r6
 8003fca:	2802      	cmp	r0, #2
 8003fcc:	d9f6      	bls.n	8003fbc <HAL_RCC_OscConfig+0x420>
            return HAL_TIMEOUT;
 8003fce:	2003      	movs	r0, #3
 8003fd0:	e08a      	b.n	80040e8 <HAL_RCC_OscConfig+0x54c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd2:	4a4d      	ldr	r2, [pc, #308]	; (8004108 <HAL_RCC_OscConfig+0x56c>)
 8003fd4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003fd6:	4951      	ldr	r1, [pc, #324]	; (800411c <HAL_RCC_OscConfig+0x580>)
 8003fd8:	400b      	ands	r3, r1
 8003fda:	6393      	str	r3, [r2, #56]	; 0x38
 8003fdc:	e7d7      	b.n	8003f8e <HAL_RCC_OscConfig+0x3f2>
        __HAL_RCC_HSI48_DISABLE();
 8003fde:	4a4a      	ldr	r2, [pc, #296]	; (8004108 <HAL_RCC_OscConfig+0x56c>)
 8003fe0:	6893      	ldr	r3, [r2, #8]
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	438b      	bics	r3, r1
 8003fe6:	6093      	str	r3, [r2, #8]
 8003fe8:	4a4b      	ldr	r2, [pc, #300]	; (8004118 <HAL_RCC_OscConfig+0x57c>)
 8003fea:	6a13      	ldr	r3, [r2, #32]
 8003fec:	494c      	ldr	r1, [pc, #304]	; (8004120 <HAL_RCC_OscConfig+0x584>)
 8003fee:	400b      	ands	r3, r1
 8003ff0:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003ff2:	f7fe fea1 	bl	8002d38 <HAL_GetTick>
 8003ff6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ff8:	4b43      	ldr	r3, [pc, #268]	; (8004108 <HAL_RCC_OscConfig+0x56c>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	079b      	lsls	r3, r3, #30
 8003ffe:	d506      	bpl.n	800400e <HAL_RCC_OscConfig+0x472>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004000:	f7fe fe9a 	bl	8002d38 <HAL_GetTick>
 8004004:	1b80      	subs	r0, r0, r6
 8004006:	2802      	cmp	r0, #2
 8004008:	d9f6      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x45c>
            return HAL_TIMEOUT;
 800400a:	2003      	movs	r0, #3
 800400c:	e06c      	b.n	80040e8 <HAL_RCC_OscConfig+0x54c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800400e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004010:	2b00      	cmp	r3, #0
 8004012:	d100      	bne.n	8004016 <HAL_RCC_OscConfig+0x47a>
 8004014:	e070      	b.n	80040f8 <HAL_RCC_OscConfig+0x55c>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004016:	2d0c      	cmp	r5, #12
 8004018:	d049      	beq.n	80040ae <HAL_RCC_OscConfig+0x512>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800401a:	2b02      	cmp	r3, #2
 800401c:	d012      	beq.n	8004044 <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_DISABLE();
 800401e:	4a3a      	ldr	r2, [pc, #232]	; (8004108 <HAL_RCC_OscConfig+0x56c>)
 8004020:	6813      	ldr	r3, [r2, #0]
 8004022:	4940      	ldr	r1, [pc, #256]	; (8004124 <HAL_RCC_OscConfig+0x588>)
 8004024:	400b      	ands	r3, r1
 8004026:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004028:	f7fe fe86 	bl	8002d38 <HAL_GetTick>
 800402c:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800402e:	4b36      	ldr	r3, [pc, #216]	; (8004108 <HAL_RCC_OscConfig+0x56c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	019b      	lsls	r3, r3, #6
 8004034:	d539      	bpl.n	80040aa <HAL_RCC_OscConfig+0x50e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004036:	f7fe fe7f 	bl	8002d38 <HAL_GetTick>
 800403a:	1b00      	subs	r0, r0, r4
 800403c:	2802      	cmp	r0, #2
 800403e:	d9f6      	bls.n	800402e <HAL_RCC_OscConfig+0x492>
            return HAL_TIMEOUT;
 8004040:	2003      	movs	r0, #3
 8004042:	e051      	b.n	80040e8 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_PLL_DISABLE();
 8004044:	4a30      	ldr	r2, [pc, #192]	; (8004108 <HAL_RCC_OscConfig+0x56c>)
 8004046:	6813      	ldr	r3, [r2, #0]
 8004048:	4936      	ldr	r1, [pc, #216]	; (8004124 <HAL_RCC_OscConfig+0x588>)
 800404a:	400b      	ands	r3, r1
 800404c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800404e:	f7fe fe73 	bl	8002d38 <HAL_GetTick>
 8004052:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004054:	4b2c      	ldr	r3, [pc, #176]	; (8004108 <HAL_RCC_OscConfig+0x56c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	019b      	lsls	r3, r3, #6
 800405a:	d506      	bpl.n	800406a <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800405c:	f7fe fe6c 	bl	8002d38 <HAL_GetTick>
 8004060:	1b40      	subs	r0, r0, r5
 8004062:	2802      	cmp	r0, #2
 8004064:	d9f6      	bls.n	8004054 <HAL_RCC_OscConfig+0x4b8>
            return HAL_TIMEOUT;
 8004066:	2003      	movs	r0, #3
 8004068:	e03e      	b.n	80040e8 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800406a:	4927      	ldr	r1, [pc, #156]	; (8004108 <HAL_RCC_OscConfig+0x56c>)
 800406c:	68cb      	ldr	r3, [r1, #12]
 800406e:	4a2e      	ldr	r2, [pc, #184]	; (8004128 <HAL_RCC_OscConfig+0x58c>)
 8004070:	4013      	ands	r3, r2
 8004072:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004074:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004076:	4302      	orrs	r2, r0
 8004078:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800407a:	4302      	orrs	r2, r0
 800407c:	4313      	orrs	r3, r2
 800407e:	60cb      	str	r3, [r1, #12]
        __HAL_RCC_PLL_ENABLE();
 8004080:	680a      	ldr	r2, [r1, #0]
 8004082:	2380      	movs	r3, #128	; 0x80
 8004084:	045b      	lsls	r3, r3, #17
 8004086:	4313      	orrs	r3, r2
 8004088:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 800408a:	f7fe fe55 	bl	8002d38 <HAL_GetTick>
 800408e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004090:	4b1d      	ldr	r3, [pc, #116]	; (8004108 <HAL_RCC_OscConfig+0x56c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	019b      	lsls	r3, r3, #6
 8004096:	d406      	bmi.n	80040a6 <HAL_RCC_OscConfig+0x50a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004098:	f7fe fe4e 	bl	8002d38 <HAL_GetTick>
 800409c:	1b00      	subs	r0, r0, r4
 800409e:	2802      	cmp	r0, #2
 80040a0:	d9f6      	bls.n	8004090 <HAL_RCC_OscConfig+0x4f4>
            return HAL_TIMEOUT;
 80040a2:	2003      	movs	r0, #3
 80040a4:	e020      	b.n	80040e8 <HAL_RCC_OscConfig+0x54c>
  return HAL_OK;
 80040a6:	2000      	movs	r0, #0
 80040a8:	e01e      	b.n	80040e8 <HAL_RCC_OscConfig+0x54c>
 80040aa:	2000      	movs	r0, #0
 80040ac:	e01c      	b.n	80040e8 <HAL_RCC_OscConfig+0x54c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d024      	beq.n	80040fc <HAL_RCC_OscConfig+0x560>
        pll_config = RCC->CFGR;
 80040b2:	4b15      	ldr	r3, [pc, #84]	; (8004108 <HAL_RCC_OscConfig+0x56c>)
 80040b4:	68da      	ldr	r2, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b6:	2380      	movs	r3, #128	; 0x80
 80040b8:	025b      	lsls	r3, r3, #9
 80040ba:	4013      	ands	r3, r2
 80040bc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80040be:	428b      	cmp	r3, r1
 80040c0:	d001      	beq.n	80040c6 <HAL_RCC_OscConfig+0x52a>
          return HAL_ERROR;
 80040c2:	2001      	movs	r0, #1
 80040c4:	e010      	b.n	80040e8 <HAL_RCC_OscConfig+0x54c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80040c6:	23f0      	movs	r3, #240	; 0xf0
 80040c8:	039b      	lsls	r3, r3, #14
 80040ca:	4013      	ands	r3, r2
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80040ce:	428b      	cmp	r3, r1
 80040d0:	d001      	beq.n	80040d6 <HAL_RCC_OscConfig+0x53a>
          return HAL_ERROR;
 80040d2:	2001      	movs	r0, #1
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x54c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80040d6:	23c0      	movs	r3, #192	; 0xc0
 80040d8:	041b      	lsls	r3, r3, #16
 80040da:	401a      	ands	r2, r3
 80040dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80040de:	429a      	cmp	r2, r3
 80040e0:	d00e      	beq.n	8004100 <HAL_RCC_OscConfig+0x564>
          return HAL_ERROR;
 80040e2:	2001      	movs	r0, #1
 80040e4:	e000      	b.n	80040e8 <HAL_RCC_OscConfig+0x54c>
    return HAL_ERROR;
 80040e6:	2001      	movs	r0, #1
}
 80040e8:	b003      	add	sp, #12
 80040ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 80040ec:	2001      	movs	r0, #1
 80040ee:	e7fb      	b.n	80040e8 <HAL_RCC_OscConfig+0x54c>
        return HAL_ERROR;
 80040f0:	2001      	movs	r0, #1
 80040f2:	e7f9      	b.n	80040e8 <HAL_RCC_OscConfig+0x54c>
        return HAL_ERROR;
 80040f4:	2001      	movs	r0, #1
 80040f6:	e7f7      	b.n	80040e8 <HAL_RCC_OscConfig+0x54c>
  return HAL_OK;
 80040f8:	2000      	movs	r0, #0
 80040fa:	e7f5      	b.n	80040e8 <HAL_RCC_OscConfig+0x54c>
        return HAL_ERROR;
 80040fc:	2001      	movs	r0, #1
 80040fe:	e7f3      	b.n	80040e8 <HAL_RCC_OscConfig+0x54c>
  return HAL_OK;
 8004100:	2000      	movs	r0, #0
 8004102:	e7f1      	b.n	80040e8 <HAL_RCC_OscConfig+0x54c>
 8004104:	40007000 	.word	0x40007000
 8004108:	40021000 	.word	0x40021000
 800410c:	00001388 	.word	0x00001388
 8004110:	fffffeff 	.word	0xfffffeff
 8004114:	fffffbff 	.word	0xfffffbff
 8004118:	40010000 	.word	0x40010000
 800411c:	efffffff 	.word	0xefffffff
 8004120:	ffffdfff 	.word	0xffffdfff
 8004124:	feffffff 	.word	0xfeffffff
 8004128:	ff02ffff 	.word	0xff02ffff

0800412c <HAL_RCC_ClockConfig>:
{
 800412c:	b570      	push	{r4, r5, r6, lr}
 800412e:	0004      	movs	r4, r0
 8004130:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8004132:	2800      	cmp	r0, #0
 8004134:	d100      	bne.n	8004138 <HAL_RCC_ClockConfig+0xc>
 8004136:	e0ba      	b.n	80042ae <HAL_RCC_ClockConfig+0x182>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004138:	4b5f      	ldr	r3, [pc, #380]	; (80042b8 <HAL_RCC_ClockConfig+0x18c>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	2301      	movs	r3, #1
 800413e:	4013      	ands	r3, r2
 8004140:	428b      	cmp	r3, r1
 8004142:	d20b      	bcs.n	800415c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004144:	495c      	ldr	r1, [pc, #368]	; (80042b8 <HAL_RCC_ClockConfig+0x18c>)
 8004146:	680b      	ldr	r3, [r1, #0]
 8004148:	2201      	movs	r2, #1
 800414a:	4393      	bics	r3, r2
 800414c:	432b      	orrs	r3, r5
 800414e:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004150:	680b      	ldr	r3, [r1, #0]
 8004152:	401a      	ands	r2, r3
 8004154:	42aa      	cmp	r2, r5
 8004156:	d001      	beq.n	800415c <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8004158:	2001      	movs	r0, #1
 800415a:	e0a9      	b.n	80042b0 <HAL_RCC_ClockConfig+0x184>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	079b      	lsls	r3, r3, #30
 8004160:	d506      	bpl.n	8004170 <HAL_RCC_ClockConfig+0x44>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004162:	4a56      	ldr	r2, [pc, #344]	; (80042bc <HAL_RCC_ClockConfig+0x190>)
 8004164:	68d3      	ldr	r3, [r2, #12]
 8004166:	21f0      	movs	r1, #240	; 0xf0
 8004168:	438b      	bics	r3, r1
 800416a:	68a1      	ldr	r1, [r4, #8]
 800416c:	430b      	orrs	r3, r1
 800416e:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004170:	6823      	ldr	r3, [r4, #0]
 8004172:	07db      	lsls	r3, r3, #31
 8004174:	d564      	bpl.n	8004240 <HAL_RCC_ClockConfig+0x114>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004176:	6863      	ldr	r3, [r4, #4]
 8004178:	2b02      	cmp	r3, #2
 800417a:	d009      	beq.n	8004190 <HAL_RCC_ClockConfig+0x64>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800417c:	2b03      	cmp	r3, #3
 800417e:	d029      	beq.n	80041d4 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004180:	2b01      	cmp	r3, #1
 8004182:	d02d      	beq.n	80041e0 <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004184:	4a4d      	ldr	r2, [pc, #308]	; (80042bc <HAL_RCC_ClockConfig+0x190>)
 8004186:	6812      	ldr	r2, [r2, #0]
 8004188:	0592      	lsls	r2, r2, #22
 800418a:	d406      	bmi.n	800419a <HAL_RCC_ClockConfig+0x6e>
        return HAL_ERROR;
 800418c:	2001      	movs	r0, #1
 800418e:	e08f      	b.n	80042b0 <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004190:	4a4a      	ldr	r2, [pc, #296]	; (80042bc <HAL_RCC_ClockConfig+0x190>)
 8004192:	6812      	ldr	r2, [r2, #0]
 8004194:	0392      	lsls	r2, r2, #14
 8004196:	d400      	bmi.n	800419a <HAL_RCC_ClockConfig+0x6e>
 8004198:	e08b      	b.n	80042b2 <HAL_RCC_ClockConfig+0x186>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800419a:	4948      	ldr	r1, [pc, #288]	; (80042bc <HAL_RCC_ClockConfig+0x190>)
 800419c:	68ca      	ldr	r2, [r1, #12]
 800419e:	2003      	movs	r0, #3
 80041a0:	4382      	bics	r2, r0
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 80041a6:	f7fe fdc7 	bl	8002d38 <HAL_GetTick>
 80041aa:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ac:	6863      	ldr	r3, [r4, #4]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d01c      	beq.n	80041ec <HAL_RCC_ClockConfig+0xc0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041b2:	2b03      	cmp	r3, #3
 80041b4:	d028      	beq.n	8004208 <HAL_RCC_ClockConfig+0xdc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d034      	beq.n	8004224 <HAL_RCC_ClockConfig+0xf8>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80041ba:	4b40      	ldr	r3, [pc, #256]	; (80042bc <HAL_RCC_ClockConfig+0x190>)
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	220c      	movs	r2, #12
 80041c0:	421a      	tst	r2, r3
 80041c2:	d03d      	beq.n	8004240 <HAL_RCC_ClockConfig+0x114>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c4:	f7fe fdb8 	bl	8002d38 <HAL_GetTick>
 80041c8:	1b80      	subs	r0, r0, r6
 80041ca:	4b3d      	ldr	r3, [pc, #244]	; (80042c0 <HAL_RCC_ClockConfig+0x194>)
 80041cc:	4298      	cmp	r0, r3
 80041ce:	d9f4      	bls.n	80041ba <HAL_RCC_ClockConfig+0x8e>
          return HAL_TIMEOUT;
 80041d0:	2003      	movs	r0, #3
 80041d2:	e06d      	b.n	80042b0 <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041d4:	4a39      	ldr	r2, [pc, #228]	; (80042bc <HAL_RCC_ClockConfig+0x190>)
 80041d6:	6812      	ldr	r2, [r2, #0]
 80041d8:	0192      	lsls	r2, r2, #6
 80041da:	d4de      	bmi.n	800419a <HAL_RCC_ClockConfig+0x6e>
        return HAL_ERROR;
 80041dc:	2001      	movs	r0, #1
 80041de:	e067      	b.n	80042b0 <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041e0:	4a36      	ldr	r2, [pc, #216]	; (80042bc <HAL_RCC_ClockConfig+0x190>)
 80041e2:	6812      	ldr	r2, [r2, #0]
 80041e4:	0752      	lsls	r2, r2, #29
 80041e6:	d4d8      	bmi.n	800419a <HAL_RCC_ClockConfig+0x6e>
        return HAL_ERROR;
 80041e8:	2001      	movs	r0, #1
 80041ea:	e061      	b.n	80042b0 <HAL_RCC_ClockConfig+0x184>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80041ec:	4b33      	ldr	r3, [pc, #204]	; (80042bc <HAL_RCC_ClockConfig+0x190>)
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	230c      	movs	r3, #12
 80041f2:	4013      	ands	r3, r2
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d023      	beq.n	8004240 <HAL_RCC_ClockConfig+0x114>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f8:	f7fe fd9e 	bl	8002d38 <HAL_GetTick>
 80041fc:	1b80      	subs	r0, r0, r6
 80041fe:	4b30      	ldr	r3, [pc, #192]	; (80042c0 <HAL_RCC_ClockConfig+0x194>)
 8004200:	4298      	cmp	r0, r3
 8004202:	d9f3      	bls.n	80041ec <HAL_RCC_ClockConfig+0xc0>
          return HAL_TIMEOUT;
 8004204:	2003      	movs	r0, #3
 8004206:	e053      	b.n	80042b0 <HAL_RCC_ClockConfig+0x184>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004208:	4b2c      	ldr	r3, [pc, #176]	; (80042bc <HAL_RCC_ClockConfig+0x190>)
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	230c      	movs	r3, #12
 800420e:	4013      	ands	r3, r2
 8004210:	2b0c      	cmp	r3, #12
 8004212:	d015      	beq.n	8004240 <HAL_RCC_ClockConfig+0x114>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004214:	f7fe fd90 	bl	8002d38 <HAL_GetTick>
 8004218:	1b80      	subs	r0, r0, r6
 800421a:	4b29      	ldr	r3, [pc, #164]	; (80042c0 <HAL_RCC_ClockConfig+0x194>)
 800421c:	4298      	cmp	r0, r3
 800421e:	d9f3      	bls.n	8004208 <HAL_RCC_ClockConfig+0xdc>
          return HAL_TIMEOUT;
 8004220:	2003      	movs	r0, #3
 8004222:	e045      	b.n	80042b0 <HAL_RCC_ClockConfig+0x184>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004224:	4b25      	ldr	r3, [pc, #148]	; (80042bc <HAL_RCC_ClockConfig+0x190>)
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	230c      	movs	r3, #12
 800422a:	4013      	ands	r3, r2
 800422c:	2b04      	cmp	r3, #4
 800422e:	d007      	beq.n	8004240 <HAL_RCC_ClockConfig+0x114>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004230:	f7fe fd82 	bl	8002d38 <HAL_GetTick>
 8004234:	1b80      	subs	r0, r0, r6
 8004236:	4b22      	ldr	r3, [pc, #136]	; (80042c0 <HAL_RCC_ClockConfig+0x194>)
 8004238:	4298      	cmp	r0, r3
 800423a:	d9f3      	bls.n	8004224 <HAL_RCC_ClockConfig+0xf8>
          return HAL_TIMEOUT;
 800423c:	2003      	movs	r0, #3
 800423e:	e037      	b.n	80042b0 <HAL_RCC_ClockConfig+0x184>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004240:	4b1d      	ldr	r3, [pc, #116]	; (80042b8 <HAL_RCC_ClockConfig+0x18c>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	2301      	movs	r3, #1
 8004246:	4013      	ands	r3, r2
 8004248:	42ab      	cmp	r3, r5
 800424a:	d90b      	bls.n	8004264 <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424c:	491a      	ldr	r1, [pc, #104]	; (80042b8 <HAL_RCC_ClockConfig+0x18c>)
 800424e:	680b      	ldr	r3, [r1, #0]
 8004250:	2201      	movs	r2, #1
 8004252:	4393      	bics	r3, r2
 8004254:	432b      	orrs	r3, r5
 8004256:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004258:	680b      	ldr	r3, [r1, #0]
 800425a:	401a      	ands	r2, r3
 800425c:	42aa      	cmp	r2, r5
 800425e:	d001      	beq.n	8004264 <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 8004260:	2001      	movs	r0, #1
 8004262:	e025      	b.n	80042b0 <HAL_RCC_ClockConfig+0x184>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004264:	6823      	ldr	r3, [r4, #0]
 8004266:	075b      	lsls	r3, r3, #29
 8004268:	d506      	bpl.n	8004278 <HAL_RCC_ClockConfig+0x14c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800426a:	4a14      	ldr	r2, [pc, #80]	; (80042bc <HAL_RCC_ClockConfig+0x190>)
 800426c:	68d3      	ldr	r3, [r2, #12]
 800426e:	4915      	ldr	r1, [pc, #84]	; (80042c4 <HAL_RCC_ClockConfig+0x198>)
 8004270:	400b      	ands	r3, r1
 8004272:	68e1      	ldr	r1, [r4, #12]
 8004274:	430b      	orrs	r3, r1
 8004276:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004278:	6823      	ldr	r3, [r4, #0]
 800427a:	071b      	lsls	r3, r3, #28
 800427c:	d507      	bpl.n	800428e <HAL_RCC_ClockConfig+0x162>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800427e:	490f      	ldr	r1, [pc, #60]	; (80042bc <HAL_RCC_ClockConfig+0x190>)
 8004280:	68cb      	ldr	r3, [r1, #12]
 8004282:	4a11      	ldr	r2, [pc, #68]	; (80042c8 <HAL_RCC_ClockConfig+0x19c>)
 8004284:	4013      	ands	r3, r2
 8004286:	6922      	ldr	r2, [r4, #16]
 8004288:	00d2      	lsls	r2, r2, #3
 800428a:	4313      	orrs	r3, r2
 800428c:	60cb      	str	r3, [r1, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800428e:	f7ff fc2d 	bl	8003aec <HAL_RCC_GetSysClockFreq>
 8004292:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <HAL_RCC_ClockConfig+0x190>)
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	0912      	lsrs	r2, r2, #4
 8004298:	230f      	movs	r3, #15
 800429a:	4013      	ands	r3, r2
 800429c:	4a0b      	ldr	r2, [pc, #44]	; (80042cc <HAL_RCC_ClockConfig+0x1a0>)
 800429e:	5cd3      	ldrb	r3, [r2, r3]
 80042a0:	40d8      	lsrs	r0, r3
 80042a2:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <HAL_RCC_ClockConfig+0x1a4>)
 80042a4:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80042a6:	2000      	movs	r0, #0
 80042a8:	f004 fbac 	bl	8008a04 <HAL_InitTick>
 80042ac:	e000      	b.n	80042b0 <HAL_RCC_ClockConfig+0x184>
    return HAL_ERROR;
 80042ae:	2001      	movs	r0, #1
}
 80042b0:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80042b2:	2001      	movs	r0, #1
 80042b4:	e7fc      	b.n	80042b0 <HAL_RCC_ClockConfig+0x184>
 80042b6:	46c0      	nop			; (mov r8, r8)
 80042b8:	40022000 	.word	0x40022000
 80042bc:	40021000 	.word	0x40021000
 80042c0:	00001388 	.word	0x00001388
 80042c4:	fffff8ff 	.word	0xfffff8ff
 80042c8:	ffffc7ff 	.word	0xffffc7ff
 80042cc:	0800c9b4 	.word	0x0800c9b4
 80042d0:	20000004 	.word	0x20000004

080042d4 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80042d4:	4b01      	ldr	r3, [pc, #4]	; (80042dc <HAL_RCC_GetHCLKFreq+0x8>)
 80042d6:	6818      	ldr	r0, [r3, #0]
}
 80042d8:	4770      	bx	lr
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	20000004 	.word	0x20000004

080042e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042e0:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042e2:	f7ff fff7 	bl	80042d4 <HAL_RCC_GetHCLKFreq>
 80042e6:	4b04      	ldr	r3, [pc, #16]	; (80042f8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80042e8:	68da      	ldr	r2, [r3, #12]
 80042ea:	0a12      	lsrs	r2, r2, #8
 80042ec:	2307      	movs	r3, #7
 80042ee:	4013      	ands	r3, r2
 80042f0:	4a02      	ldr	r2, [pc, #8]	; (80042fc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80042f2:	5cd3      	ldrb	r3, [r2, r3]
 80042f4:	40d8      	lsrs	r0, r3
}
 80042f6:	bd10      	pop	{r4, pc}
 80042f8:	40021000 	.word	0x40021000
 80042fc:	0800c9c4 	.word	0x0800c9c4

08004300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004300:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004302:	f7ff ffe7 	bl	80042d4 <HAL_RCC_GetHCLKFreq>
 8004306:	4b04      	ldr	r3, [pc, #16]	; (8004318 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	0ad2      	lsrs	r2, r2, #11
 800430c:	2307      	movs	r3, #7
 800430e:	4013      	ands	r3, r2
 8004310:	4a02      	ldr	r2, [pc, #8]	; (800431c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004312:	5cd3      	ldrb	r3, [r2, r3]
 8004314:	40d8      	lsrs	r0, r3
}
 8004316:	bd10      	pop	{r4, pc}
 8004318:	40021000 	.word	0x40021000
 800431c:	0800c9c4 	.word	0x0800c9c4

08004320 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004320:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004322:	230f      	movs	r3, #15
 8004324:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004326:	4a0c      	ldr	r2, [pc, #48]	; (8004358 <HAL_RCC_GetClockConfig+0x38>)
 8004328:	68d4      	ldr	r4, [r2, #12]
 800432a:	3b0c      	subs	r3, #12
 800432c:	4023      	ands	r3, r4
 800432e:	6043      	str	r3, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004330:	68d4      	ldr	r4, [r2, #12]
 8004332:	23f0      	movs	r3, #240	; 0xf0
 8004334:	4023      	ands	r3, r4
 8004336:	6083      	str	r3, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004338:	68d4      	ldr	r4, [r2, #12]
 800433a:	25e0      	movs	r5, #224	; 0xe0
 800433c:	00ed      	lsls	r5, r5, #3
 800433e:	402c      	ands	r4, r5
 8004340:	60c4      	str	r4, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004342:	68d3      	ldr	r3, [r2, #12]
 8004344:	08db      	lsrs	r3, r3, #3
 8004346:	402b      	ands	r3, r5
 8004348:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800434a:	4b04      	ldr	r3, [pc, #16]	; (800435c <HAL_RCC_GetClockConfig+0x3c>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	2301      	movs	r3, #1
 8004350:	4013      	ands	r3, r2
 8004352:	600b      	str	r3, [r1, #0]
}
 8004354:	bd30      	pop	{r4, r5, pc}
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	40021000 	.word	0x40021000
 800435c:	40022000 	.word	0x40022000

08004360 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004360:	b570      	push	{r4, r5, r6, lr}
 8004362:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004364:	6803      	ldr	r3, [r0, #0]
 8004366:	069b      	lsls	r3, r3, #26
 8004368:	d550      	bpl.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xac>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800436a:	4b6c      	ldr	r3, [pc, #432]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800436c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	d500      	bpl.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8004372:	e093      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004374:	4a69      	ldr	r2, [pc, #420]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004376:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8004378:	2380      	movs	r3, #128	; 0x80
 800437a:	055b      	lsls	r3, r3, #21
 800437c:	430b      	orrs	r3, r1
 800437e:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 8004380:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004382:	4b67      	ldr	r3, [pc, #412]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	05db      	lsls	r3, r3, #23
 8004388:	d400      	bmi.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x2c>
 800438a:	e089      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800438c:	4b63      	ldr	r3, [pc, #396]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800438e:	6819      	ldr	r1, [r3, #0]
 8004390:	23c0      	movs	r3, #192	; 0xc0
 8004392:	039b      	lsls	r3, r3, #14
 8004394:	4019      	ands	r1, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004396:	6862      	ldr	r2, [r4, #4]
 8004398:	4013      	ands	r3, r2
 800439a:	428b      	cmp	r3, r1
 800439c:	d006      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x4c>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800439e:	23c0      	movs	r3, #192	; 0xc0
 80043a0:	029b      	lsls	r3, r3, #10
 80043a2:	0011      	movs	r1, r2
 80043a4:	4019      	ands	r1, r3
 80043a6:	4299      	cmp	r1, r3
 80043a8:	d100      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x4c>
 80043aa:	e08e      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x16a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80043ac:	4b5b      	ldr	r3, [pc, #364]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b0:	21c0      	movs	r1, #192	; 0xc0
 80043b2:	0289      	lsls	r1, r1, #10
 80043b4:	400b      	ands	r3, r1

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80043b6:	d016      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
 80043b8:	400a      	ands	r2, r1
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d013      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80043be:	6823      	ldr	r3, [r4, #0]
 80043c0:	069b      	lsls	r3, r3, #26
 80043c2:	d510      	bpl.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80043c4:	4b55      	ldr	r3, [pc, #340]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043c6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80043c8:	4a56      	ldr	r2, [pc, #344]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80043ca:	4002      	ands	r2, r0

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043cc:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 80043ce:	2180      	movs	r1, #128	; 0x80
 80043d0:	0309      	lsls	r1, r1, #12
 80043d2:	4331      	orrs	r1, r6
 80043d4:	6519      	str	r1, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043d6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80043d8:	4e53      	ldr	r6, [pc, #332]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80043da:	4031      	ands	r1, r6
 80043dc:	6519      	str	r1, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80043de:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80043e0:	05c3      	lsls	r3, r0, #23
 80043e2:	d500      	bpl.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
 80043e4:	e078      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043e6:	6863      	ldr	r3, [r4, #4]
 80043e8:	22c0      	movs	r2, #192	; 0xc0
 80043ea:	0292      	lsls	r2, r2, #10
 80043ec:	0019      	movs	r1, r3
 80043ee:	4011      	ands	r1, r2
 80043f0:	4291      	cmp	r1, r2
 80043f2:	d100      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x96>
 80043f4:	e080      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80043f6:	4949      	ldr	r1, [pc, #292]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043f8:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 80043fa:	22c0      	movs	r2, #192	; 0xc0
 80043fc:	0292      	lsls	r2, r2, #10
 80043fe:	6860      	ldr	r0, [r4, #4]
 8004400:	4002      	ands	r2, r0
 8004402:	4313      	orrs	r3, r2
 8004404:	650b      	str	r3, [r1, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004406:	2d01      	cmp	r5, #1
 8004408:	d100      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xac>
 800440a:	e07f      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800440c:	6823      	ldr	r3, [r4, #0]
 800440e:	07db      	lsls	r3, r3, #31
 8004410:	d506      	bpl.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004412:	4a42      	ldr	r2, [pc, #264]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004414:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004416:	2103      	movs	r1, #3
 8004418:	438b      	bics	r3, r1
 800441a:	68a1      	ldr	r1, [r4, #8]
 800441c:	430b      	orrs	r3, r1
 800441e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	079b      	lsls	r3, r3, #30
 8004424:	d506      	bpl.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004426:	4a3d      	ldr	r2, [pc, #244]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004428:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800442a:	210c      	movs	r1, #12
 800442c:	438b      	bics	r3, r1
 800442e:	68e1      	ldr	r1, [r4, #12]
 8004430:	430b      	orrs	r3, r1
 8004432:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	075b      	lsls	r3, r3, #29
 8004438:	d506      	bpl.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800443a:	4a38      	ldr	r2, [pc, #224]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800443c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800443e:	493b      	ldr	r1, [pc, #236]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004440:	400b      	ands	r3, r1
 8004442:	6921      	ldr	r1, [r4, #16]
 8004444:	430b      	orrs	r3, r1
 8004446:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004448:	6823      	ldr	r3, [r4, #0]
 800444a:	071b      	lsls	r3, r3, #28
 800444c:	d506      	bpl.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800444e:	4a33      	ldr	r2, [pc, #204]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004450:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004452:	4937      	ldr	r1, [pc, #220]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004454:	400b      	ands	r3, r1
 8004456:	6961      	ldr	r1, [r4, #20]
 8004458:	430b      	orrs	r3, r1
 800445a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800445c:	6823      	ldr	r3, [r4, #0]
 800445e:	05db      	lsls	r3, r3, #23
 8004460:	d506      	bpl.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004462:	4a2e      	ldr	r2, [pc, #184]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004464:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004466:	492f      	ldr	r1, [pc, #188]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004468:	400b      	ands	r3, r1
 800446a:	69a1      	ldr	r1, [r4, #24]
 800446c:	430b      	orrs	r3, r1
 800446e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004470:	6823      	ldr	r3, [r4, #0]
 8004472:	065b      	lsls	r3, r3, #25
 8004474:	d506      	bpl.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004476:	4a29      	ldr	r2, [pc, #164]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004478:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800447a:	492e      	ldr	r1, [pc, #184]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800447c:	400b      	ands	r3, r1
 800447e:	6a21      	ldr	r1, [r4, #32]
 8004480:	430b      	orrs	r3, r1
 8004482:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004484:	6823      	ldr	r3, [r4, #0]
 8004486:	061b      	lsls	r3, r3, #24
 8004488:	d546      	bpl.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800448a:	4a24      	ldr	r2, [pc, #144]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800448c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800448e:	492a      	ldr	r1, [pc, #168]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004490:	400b      	ands	r3, r1
 8004492:	69e1      	ldr	r1, [r4, #28]
 8004494:	430b      	orrs	r3, r1
 8004496:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  return HAL_OK;
 8004498:	2000      	movs	r0, #0
}
 800449a:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 800449c:	2500      	movs	r5, #0
 800449e:	e770      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x22>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044a0:	4a1f      	ldr	r2, [pc, #124]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80044a2:	6811      	ldr	r1, [r2, #0]
 80044a4:	2380      	movs	r3, #128	; 0x80
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	430b      	orrs	r3, r1
 80044aa:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80044ac:	f7fe fc44 	bl	8002d38 <HAL_GetTick>
 80044b0:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b2:	4b1b      	ldr	r3, [pc, #108]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	05db      	lsls	r3, r3, #23
 80044b8:	d500      	bpl.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80044ba:	e767      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044bc:	f7fe fc3c 	bl	8002d38 <HAL_GetTick>
 80044c0:	1b80      	subs	r0, r0, r6
 80044c2:	2864      	cmp	r0, #100	; 0x64
 80044c4:	d9f5      	bls.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
          return HAL_TIMEOUT;
 80044c6:	2003      	movs	r0, #3
 80044c8:	e7e7      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x13a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80044ca:	4b14      	ldr	r3, [pc, #80]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	039b      	lsls	r3, r3, #14
 80044d0:	d400      	bmi.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80044d2:	e76b      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x4c>
          return HAL_ERROR;
 80044d4:	2001      	movs	r0, #1
 80044d6:	e7e0      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 80044d8:	f7fe fc2e 	bl	8002d38 <HAL_GetTick>
 80044dc:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044de:	4b0f      	ldr	r3, [pc, #60]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e2:	059b      	lsls	r3, r3, #22
 80044e4:	d500      	bpl.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80044e6:	e77e      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e8:	f7fe fc26 	bl	8002d38 <HAL_GetTick>
 80044ec:	1b80      	subs	r0, r0, r6
 80044ee:	4b13      	ldr	r3, [pc, #76]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80044f0:	4298      	cmp	r0, r3
 80044f2:	d9f4      	bls.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x17e>
            return HAL_TIMEOUT;
 80044f4:	2003      	movs	r0, #3
 80044f6:	e7d0      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044f8:	4908      	ldr	r1, [pc, #32]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044fa:	680a      	ldr	r2, [r1, #0]
 80044fc:	4810      	ldr	r0, [pc, #64]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80044fe:	4002      	ands	r2, r0
 8004500:	20c0      	movs	r0, #192	; 0xc0
 8004502:	0380      	lsls	r0, r0, #14
 8004504:	4003      	ands	r3, r0
 8004506:	4313      	orrs	r3, r2
 8004508:	600b      	str	r3, [r1, #0]
 800450a:	e774      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x96>
      __HAL_RCC_PWR_CLK_DISABLE();
 800450c:	000a      	movs	r2, r1
 800450e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8004510:	490c      	ldr	r1, [pc, #48]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004512:	400b      	ands	r3, r1
 8004514:	6393      	str	r3, [r2, #56]	; 0x38
 8004516:	e779      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xac>
  return HAL_OK;
 8004518:	2000      	movs	r0, #0
 800451a:	e7be      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x13a>
 800451c:	40021000 	.word	0x40021000
 8004520:	40007000 	.word	0x40007000
 8004524:	fffcffff 	.word	0xfffcffff
 8004528:	fff7ffff 	.word	0xfff7ffff
 800452c:	fffff3ff 	.word	0xfffff3ff
 8004530:	ffffcfff 	.word	0xffffcfff
 8004534:	fbffffff 	.word	0xfbffffff
 8004538:	fff3ffff 	.word	0xfff3ffff
 800453c:	00001388 	.word	0x00001388
 8004540:	ffcfffff 	.word	0xffcfffff
 8004544:	efffffff 	.word	0xefffffff

08004548 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004548:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800454a:	2280      	movs	r2, #128	; 0x80
 800454c:	05d2      	lsls	r2, r2, #23
 800454e:	4290      	cmp	r0, r2
 8004550:	d008      	beq.n	8004564 <TIM_Base_SetConfig+0x1c>
 8004552:	4a15      	ldr	r2, [pc, #84]	; (80045a8 <TIM_Base_SetConfig+0x60>)
 8004554:	4290      	cmp	r0, r2
 8004556:	d005      	beq.n	8004564 <TIM_Base_SetConfig+0x1c>
 8004558:	4a14      	ldr	r2, [pc, #80]	; (80045ac <TIM_Base_SetConfig+0x64>)
 800455a:	4290      	cmp	r0, r2
 800455c:	d002      	beq.n	8004564 <TIM_Base_SetConfig+0x1c>
 800455e:	4a14      	ldr	r2, [pc, #80]	; (80045b0 <TIM_Base_SetConfig+0x68>)
 8004560:	4290      	cmp	r0, r2
 8004562:	d103      	bne.n	800456c <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004564:	2270      	movs	r2, #112	; 0x70
 8004566:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8004568:	684a      	ldr	r2, [r1, #4]
 800456a:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800456c:	2280      	movs	r2, #128	; 0x80
 800456e:	05d2      	lsls	r2, r2, #23
 8004570:	4290      	cmp	r0, r2
 8004572:	d008      	beq.n	8004586 <TIM_Base_SetConfig+0x3e>
 8004574:	4a0c      	ldr	r2, [pc, #48]	; (80045a8 <TIM_Base_SetConfig+0x60>)
 8004576:	4290      	cmp	r0, r2
 8004578:	d005      	beq.n	8004586 <TIM_Base_SetConfig+0x3e>
 800457a:	4a0c      	ldr	r2, [pc, #48]	; (80045ac <TIM_Base_SetConfig+0x64>)
 800457c:	4290      	cmp	r0, r2
 800457e:	d002      	beq.n	8004586 <TIM_Base_SetConfig+0x3e>
 8004580:	4a0b      	ldr	r2, [pc, #44]	; (80045b0 <TIM_Base_SetConfig+0x68>)
 8004582:	4290      	cmp	r0, r2
 8004584:	d103      	bne.n	800458e <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004586:	4a0b      	ldr	r2, [pc, #44]	; (80045b4 <TIM_Base_SetConfig+0x6c>)
 8004588:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800458a:	68ca      	ldr	r2, [r1, #12]
 800458c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800458e:	2280      	movs	r2, #128	; 0x80
 8004590:	4393      	bics	r3, r2
 8004592:	690a      	ldr	r2, [r1, #16]
 8004594:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004596:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004598:	688b      	ldr	r3, [r1, #8]
 800459a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800459c:	680b      	ldr	r3, [r1, #0]
 800459e:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045a0:	2301      	movs	r3, #1
 80045a2:	6143      	str	r3, [r0, #20]
}
 80045a4:	4770      	bx	lr
 80045a6:	46c0      	nop			; (mov r8, r8)
 80045a8:	40000400 	.word	0x40000400
 80045ac:	40010800 	.word	0x40010800
 80045b0:	40011400 	.word	0x40011400
 80045b4:	fffffcff 	.word	0xfffffcff

080045b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045b8:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045ba:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045bc:	6a04      	ldr	r4, [r0, #32]
 80045be:	2501      	movs	r5, #1
 80045c0:	43ac      	bics	r4, r5
 80045c2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045c4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045c6:	35ef      	adds	r5, #239	; 0xef
 80045c8:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045ca:	0112      	lsls	r2, r2, #4
 80045cc:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045ce:	240a      	movs	r4, #10
 80045d0:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 80045d2:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045d4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80045d6:	6201      	str	r1, [r0, #32]
}
 80045d8:	bd30      	pop	{r4, r5, pc}
	...

080045dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045dc:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045de:	6a03      	ldr	r3, [r0, #32]
 80045e0:	2410      	movs	r4, #16
 80045e2:	43a3      	bics	r3, r4
 80045e4:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045e6:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80045e8:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045ea:	4d05      	ldr	r5, [pc, #20]	; (8004600 <TIM_TI2_ConfigInputStage+0x24>)
 80045ec:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045ee:	0312      	lsls	r2, r2, #12
 80045f0:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045f2:	24a0      	movs	r4, #160	; 0xa0
 80045f4:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 80045f6:	0109      	lsls	r1, r1, #4
 80045f8:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045fa:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80045fc:	6201      	str	r1, [r0, #32]
}
 80045fe:	bd30      	pop	{r4, r5, pc}
 8004600:	ffff0fff 	.word	0xffff0fff

08004604 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004604:	000b      	movs	r3, r1
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004606:	6881      	ldr	r1, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004608:	2270      	movs	r2, #112	; 0x70
 800460a:	4391      	bics	r1, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800460c:	4319      	orrs	r1, r3
 800460e:	2307      	movs	r3, #7
 8004610:	4319      	orrs	r1, r3
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004612:	6081      	str	r1, [r0, #8]
}
 8004614:	4770      	bx	lr
	...

08004618 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004618:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800461a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800461c:	4d03      	ldr	r5, [pc, #12]	; (800462c <TIM_ETR_SetConfig+0x14>)
 800461e:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004620:	021b      	lsls	r3, r3, #8
 8004622:	431a      	orrs	r2, r3
 8004624:	4311      	orrs	r1, r2
 8004626:	4321      	orrs	r1, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004628:	6081      	str	r1, [r0, #8]
}
 800462a:	bd30      	pop	{r4, r5, pc}
 800462c:	ffff00ff 	.word	0xffff00ff

08004630 <HAL_TIM_Base_Init>:
{
 8004630:	b570      	push	{r4, r5, r6, lr}
 8004632:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8004634:	d014      	beq.n	8004660 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004636:	2339      	movs	r3, #57	; 0x39
 8004638:	5cc3      	ldrb	r3, [r0, r3]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800463e:	2539      	movs	r5, #57	; 0x39
 8004640:	2302      	movs	r3, #2
 8004642:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004644:	1d21      	adds	r1, r4, #4
 8004646:	6820      	ldr	r0, [r4, #0]
 8004648:	f7ff ff7e 	bl	8004548 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800464c:	2301      	movs	r3, #1
 800464e:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8004650:	2000      	movs	r0, #0
}
 8004652:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004654:	3338      	adds	r3, #56	; 0x38
 8004656:	2200      	movs	r2, #0
 8004658:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 800465a:	f004 f931 	bl	80088c0 <HAL_TIM_Base_MspInit>
 800465e:	e7ee      	b.n	800463e <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8004660:	2001      	movs	r0, #1
 8004662:	e7f6      	b.n	8004652 <HAL_TIM_Base_Init+0x22>

08004664 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8004664:	2339      	movs	r3, #57	; 0x39
 8004666:	2202      	movs	r2, #2
 8004668:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800466a:	6802      	ldr	r2, [r0, #0]
 800466c:	6891      	ldr	r1, [r2, #8]
 800466e:	3b32      	subs	r3, #50	; 0x32
 8004670:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004672:	2b06      	cmp	r3, #6
 8004674:	d003      	beq.n	800467e <HAL_TIM_Base_Start+0x1a>
    __HAL_TIM_ENABLE(htim);
 8004676:	6813      	ldr	r3, [r2, #0]
 8004678:	2101      	movs	r1, #1
 800467a:	430b      	orrs	r3, r1
 800467c:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800467e:	2339      	movs	r3, #57	; 0x39
 8004680:	2201      	movs	r2, #1
 8004682:	54c2      	strb	r2, [r0, r3]
}
 8004684:	2000      	movs	r0, #0
 8004686:	4770      	bx	lr

08004688 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004688:	6802      	ldr	r2, [r0, #0]
 800468a:	68d3      	ldr	r3, [r2, #12]
 800468c:	2101      	movs	r1, #1
 800468e:	430b      	orrs	r3, r1
 8004690:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004692:	6802      	ldr	r2, [r0, #0]
 8004694:	6891      	ldr	r1, [r2, #8]
 8004696:	2307      	movs	r3, #7
 8004698:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800469a:	2b06      	cmp	r3, #6
 800469c:	d003      	beq.n	80046a6 <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 800469e:	6813      	ldr	r3, [r2, #0]
 80046a0:	2101      	movs	r1, #1
 80046a2:	430b      	orrs	r3, r1
 80046a4:	6013      	str	r3, [r2, #0]
}
 80046a6:	2000      	movs	r0, #0
 80046a8:	4770      	bx	lr
	...

080046ac <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80046ac:	6802      	ldr	r2, [r0, #0]
 80046ae:	68d3      	ldr	r3, [r2, #12]
 80046b0:	2101      	movs	r1, #1
 80046b2:	438b      	bics	r3, r1
 80046b4:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 80046b6:	6803      	ldr	r3, [r0, #0]
 80046b8:	6a19      	ldr	r1, [r3, #32]
 80046ba:	4a04      	ldr	r2, [pc, #16]	; (80046cc <HAL_TIM_Base_Stop_IT+0x20>)
 80046bc:	4211      	tst	r1, r2
 80046be:	d103      	bne.n	80046c8 <HAL_TIM_Base_Stop_IT+0x1c>
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	2101      	movs	r1, #1
 80046c4:	438a      	bics	r2, r1
 80046c6:	601a      	str	r2, [r3, #0]
}
 80046c8:	2000      	movs	r0, #0
 80046ca:	4770      	bx	lr
 80046cc:	00001111 	.word	0x00001111

080046d0 <HAL_TIM_ConfigClockSource>:
{
 80046d0:	b510      	push	{r4, lr}
 80046d2:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80046d4:	2338      	movs	r3, #56	; 0x38
 80046d6:	5cc3      	ldrb	r3, [r0, r3]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d066      	beq.n	80047aa <HAL_TIM_ConfigClockSource+0xda>
 80046dc:	2338      	movs	r3, #56	; 0x38
 80046de:	2201      	movs	r2, #1
 80046e0:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80046e2:	3301      	adds	r3, #1
 80046e4:	3201      	adds	r2, #1
 80046e6:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 80046e8:	6802      	ldr	r2, [r0, #0]
 80046ea:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046ec:	4830      	ldr	r0, [pc, #192]	; (80047b0 <HAL_TIM_ConfigClockSource+0xe0>)
 80046ee:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80046f0:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80046f2:	680b      	ldr	r3, [r1, #0]
 80046f4:	2b40      	cmp	r3, #64	; 0x40
 80046f6:	d04e      	beq.n	8004796 <HAL_TIM_ConfigClockSource+0xc6>
 80046f8:	d915      	bls.n	8004726 <HAL_TIM_ConfigClockSource+0x56>
 80046fa:	2b60      	cmp	r3, #96	; 0x60
 80046fc:	d041      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0xb2>
 80046fe:	d921      	bls.n	8004744 <HAL_TIM_ConfigClockSource+0x74>
 8004700:	2b70      	cmp	r3, #112	; 0x70
 8004702:	d02b      	beq.n	800475c <HAL_TIM_ConfigClockSource+0x8c>
 8004704:	2280      	movs	r2, #128	; 0x80
 8004706:	0192      	lsls	r2, r2, #6
 8004708:	4293      	cmp	r3, r2
 800470a:	d132      	bne.n	8004772 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ETR_SetConfig(htim->Instance,
 800470c:	68cb      	ldr	r3, [r1, #12]
 800470e:	684a      	ldr	r2, [r1, #4]
 8004710:	6889      	ldr	r1, [r1, #8]
 8004712:	6820      	ldr	r0, [r4, #0]
 8004714:	f7ff ff80 	bl	8004618 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004718:	6822      	ldr	r2, [r4, #0]
 800471a:	6891      	ldr	r1, [r2, #8]
 800471c:	2380      	movs	r3, #128	; 0x80
 800471e:	01db      	lsls	r3, r3, #7
 8004720:	430b      	orrs	r3, r1
 8004722:	6093      	str	r3, [r2, #8]
      break;
 8004724:	e025      	b.n	8004772 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8004726:	2b10      	cmp	r3, #16
 8004728:	d007      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x6a>
 800472a:	d904      	bls.n	8004736 <HAL_TIM_ConfigClockSource+0x66>
 800472c:	2b20      	cmp	r3, #32
 800472e:	d004      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x6a>
 8004730:	2b30      	cmp	r3, #48	; 0x30
 8004732:	d002      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x6a>
 8004734:	e01d      	b.n	8004772 <HAL_TIM_ConfigClockSource+0xa2>
 8004736:	2b00      	cmp	r3, #0
 8004738:	d11b      	bne.n	8004772 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800473a:	0019      	movs	r1, r3
 800473c:	6820      	ldr	r0, [r4, #0]
 800473e:	f7ff ff61 	bl	8004604 <TIM_ITRx_SetConfig>
      break;
 8004742:	e016      	b.n	8004772 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8004744:	2b50      	cmp	r3, #80	; 0x50
 8004746:	d114      	bne.n	8004772 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004748:	68ca      	ldr	r2, [r1, #12]
 800474a:	6849      	ldr	r1, [r1, #4]
 800474c:	6820      	ldr	r0, [r4, #0]
 800474e:	f7ff ff33 	bl	80045b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004752:	2150      	movs	r1, #80	; 0x50
 8004754:	6820      	ldr	r0, [r4, #0]
 8004756:	f7ff ff55 	bl	8004604 <TIM_ITRx_SetConfig>
      break;
 800475a:	e00a      	b.n	8004772 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ETR_SetConfig(htim->Instance,
 800475c:	68cb      	ldr	r3, [r1, #12]
 800475e:	684a      	ldr	r2, [r1, #4]
 8004760:	6889      	ldr	r1, [r1, #8]
 8004762:	6820      	ldr	r0, [r4, #0]
 8004764:	f7ff ff58 	bl	8004618 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004768:	6822      	ldr	r2, [r4, #0]
 800476a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800476c:	2177      	movs	r1, #119	; 0x77
 800476e:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8004770:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004772:	2339      	movs	r3, #57	; 0x39
 8004774:	2201      	movs	r2, #1
 8004776:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8004778:	3b01      	subs	r3, #1
 800477a:	2200      	movs	r2, #0
 800477c:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800477e:	2000      	movs	r0, #0
}
 8004780:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004782:	68ca      	ldr	r2, [r1, #12]
 8004784:	6849      	ldr	r1, [r1, #4]
 8004786:	6820      	ldr	r0, [r4, #0]
 8004788:	f7ff ff28 	bl	80045dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800478c:	2160      	movs	r1, #96	; 0x60
 800478e:	6820      	ldr	r0, [r4, #0]
 8004790:	f7ff ff38 	bl	8004604 <TIM_ITRx_SetConfig>
      break;
 8004794:	e7ed      	b.n	8004772 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004796:	68ca      	ldr	r2, [r1, #12]
 8004798:	6849      	ldr	r1, [r1, #4]
 800479a:	6820      	ldr	r0, [r4, #0]
 800479c:	f7ff ff0c 	bl	80045b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047a0:	2140      	movs	r1, #64	; 0x40
 80047a2:	6820      	ldr	r0, [r4, #0]
 80047a4:	f7ff ff2e 	bl	8004604 <TIM_ITRx_SetConfig>
      break;
 80047a8:	e7e3      	b.n	8004772 <HAL_TIM_ConfigClockSource+0xa2>
  __HAL_LOCK(htim);
 80047aa:	2002      	movs	r0, #2
 80047ac:	e7e8      	b.n	8004780 <HAL_TIM_ConfigClockSource+0xb0>
 80047ae:	46c0      	nop			; (mov r8, r8)
 80047b0:	ffff0088 	.word	0xffff0088

080047b4 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80047b4:	4770      	bx	lr

080047b6 <HAL_TIM_IC_CaptureCallback>:
}
 80047b6:	4770      	bx	lr

080047b8 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80047b8:	4770      	bx	lr

080047ba <HAL_TIM_TriggerCallback>:
}
 80047ba:	4770      	bx	lr

080047bc <HAL_TIM_IRQHandler>:
{
 80047bc:	b510      	push	{r4, lr}
 80047be:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047c0:	6803      	ldr	r3, [r0, #0]
 80047c2:	691a      	ldr	r2, [r3, #16]
 80047c4:	0792      	lsls	r2, r2, #30
 80047c6:	d50f      	bpl.n	80047e8 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047c8:	68da      	ldr	r2, [r3, #12]
 80047ca:	0792      	lsls	r2, r2, #30
 80047cc:	d50c      	bpl.n	80047e8 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047ce:	2203      	movs	r2, #3
 80047d0:	4252      	negs	r2, r2
 80047d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047d4:	2301      	movs	r3, #1
 80047d6:	7603      	strb	r3, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047d8:	6803      	ldr	r3, [r0, #0]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	079b      	lsls	r3, r3, #30
 80047de:	d055      	beq.n	800488c <HAL_TIM_IRQHandler+0xd0>
          HAL_TIM_IC_CaptureCallback(htim);
 80047e0:	f7ff ffe9 	bl	80047b6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e4:	2300      	movs	r3, #0
 80047e6:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	0752      	lsls	r2, r2, #29
 80047ee:	d512      	bpl.n	8004816 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	0752      	lsls	r2, r2, #29
 80047f4:	d50f      	bpl.n	8004816 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047f6:	2205      	movs	r2, #5
 80047f8:	4252      	negs	r2, r2
 80047fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047fc:	2302      	movs	r3, #2
 80047fe:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004800:	6823      	ldr	r3, [r4, #0]
 8004802:	699a      	ldr	r2, [r3, #24]
 8004804:	23c0      	movs	r3, #192	; 0xc0
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	421a      	tst	r2, r3
 800480a:	d045      	beq.n	8004898 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800480c:	0020      	movs	r0, r4
 800480e:	f7ff ffd2 	bl	80047b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004812:	2300      	movs	r3, #0
 8004814:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	691a      	ldr	r2, [r3, #16]
 800481a:	0712      	lsls	r2, r2, #28
 800481c:	d510      	bpl.n	8004840 <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800481e:	68da      	ldr	r2, [r3, #12]
 8004820:	0712      	lsls	r2, r2, #28
 8004822:	d50d      	bpl.n	8004840 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004824:	2209      	movs	r2, #9
 8004826:	4252      	negs	r2, r2
 8004828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800482a:	2304      	movs	r3, #4
 800482c:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	079b      	lsls	r3, r3, #30
 8004834:	d037      	beq.n	80048a6 <HAL_TIM_IRQHandler+0xea>
        HAL_TIM_IC_CaptureCallback(htim);
 8004836:	0020      	movs	r0, r4
 8004838:	f7ff ffbd 	bl	80047b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800483c:	2300      	movs	r3, #0
 800483e:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004840:	6823      	ldr	r3, [r4, #0]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	06d2      	lsls	r2, r2, #27
 8004846:	d512      	bpl.n	800486e <HAL_TIM_IRQHandler+0xb2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	06d2      	lsls	r2, r2, #27
 800484c:	d50f      	bpl.n	800486e <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800484e:	2211      	movs	r2, #17
 8004850:	4252      	negs	r2, r2
 8004852:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004854:	2308      	movs	r3, #8
 8004856:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004858:	6823      	ldr	r3, [r4, #0]
 800485a:	69da      	ldr	r2, [r3, #28]
 800485c:	23c0      	movs	r3, #192	; 0xc0
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	421a      	tst	r2, r3
 8004862:	d027      	beq.n	80048b4 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8004864:	0020      	movs	r0, r4
 8004866:	f7ff ffa6 	bl	80047b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486a:	2300      	movs	r3, #0
 800486c:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	691a      	ldr	r2, [r3, #16]
 8004872:	07d2      	lsls	r2, r2, #31
 8004874:	d502      	bpl.n	800487c <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	07d2      	lsls	r2, r2, #31
 800487a:	d422      	bmi.n	80048c2 <HAL_TIM_IRQHandler+0x106>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	691a      	ldr	r2, [r3, #16]
 8004880:	0652      	lsls	r2, r2, #25
 8004882:	d502      	bpl.n	800488a <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	0652      	lsls	r2, r2, #25
 8004888:	d422      	bmi.n	80048d0 <HAL_TIM_IRQHandler+0x114>
}
 800488a:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800488c:	f7ff ff92 	bl	80047b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004890:	0020      	movs	r0, r4
 8004892:	f7ff ff91 	bl	80047b8 <HAL_TIM_PWM_PulseFinishedCallback>
 8004896:	e7a5      	b.n	80047e4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004898:	0020      	movs	r0, r4
 800489a:	f7ff ff8b 	bl	80047b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800489e:	0020      	movs	r0, r4
 80048a0:	f7ff ff8a 	bl	80047b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80048a4:	e7b5      	b.n	8004812 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a6:	0020      	movs	r0, r4
 80048a8:	f7ff ff84 	bl	80047b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ac:	0020      	movs	r0, r4
 80048ae:	f7ff ff83 	bl	80047b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80048b2:	e7c3      	b.n	800483c <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b4:	0020      	movs	r0, r4
 80048b6:	f7ff ff7d 	bl	80047b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ba:	0020      	movs	r0, r4
 80048bc:	f7ff ff7c 	bl	80047b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80048c0:	e7d3      	b.n	800486a <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048c2:	2202      	movs	r2, #2
 80048c4:	4252      	negs	r2, r2
 80048c6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80048c8:	0020      	movs	r0, r4
 80048ca:	f002 fd9b 	bl	8007404 <HAL_TIM_PeriodElapsedCallback>
 80048ce:	e7d5      	b.n	800487c <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048d0:	2241      	movs	r2, #65	; 0x41
 80048d2:	4252      	negs	r2, r2
 80048d4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80048d6:	0020      	movs	r0, r4
 80048d8:	f7ff ff6f 	bl	80047ba <HAL_TIM_TriggerCallback>
}
 80048dc:	e7d5      	b.n	800488a <HAL_TIM_IRQHandler+0xce>

080048de <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048de:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048e0:	2338      	movs	r3, #56	; 0x38
 80048e2:	5cc3      	ldrb	r3, [r0, r3]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d01b      	beq.n	8004920 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 80048e8:	2638      	movs	r6, #56	; 0x38
 80048ea:	2301      	movs	r3, #1
 80048ec:	469c      	mov	ip, r3
 80048ee:	5583      	strb	r3, [r0, r6]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f0:	2739      	movs	r7, #57	; 0x39
 80048f2:	3301      	adds	r3, #1
 80048f4:	55c3      	strb	r3, [r0, r7]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048f6:	6802      	ldr	r2, [r0, #0]
 80048f8:	6854      	ldr	r4, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048fa:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048fc:	2570      	movs	r5, #112	; 0x70
 80048fe:	43ac      	bics	r4, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004900:	680d      	ldr	r5, [r1, #0]
 8004902:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004904:	2580      	movs	r5, #128	; 0x80
 8004906:	43ab      	bics	r3, r5
 8004908:	001d      	movs	r5, r3
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800490a:	684b      	ldr	r3, [r1, #4]
 800490c:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800490e:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004910:	6802      	ldr	r2, [r0, #0]
 8004912:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004914:	4663      	mov	r3, ip
 8004916:	55c3      	strb	r3, [r0, r7]

  __HAL_UNLOCK(htim);
 8004918:	2300      	movs	r3, #0
 800491a:	5583      	strb	r3, [r0, r6]

  return HAL_OK;
 800491c:	2000      	movs	r0, #0
}
 800491e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8004920:	2002      	movs	r0, #2
 8004922:	e7fc      	b.n	800491e <HAL_TIMEx_MasterConfigSynchronization+0x40>

08004924 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004924:	6802      	ldr	r2, [r0, #0]
 8004926:	6813      	ldr	r3, [r2, #0]
 8004928:	21c0      	movs	r1, #192	; 0xc0
 800492a:	438b      	bics	r3, r1
 800492c:	6013      	str	r3, [r2, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800492e:	2320      	movs	r3, #32
 8004930:	6743      	str	r3, [r0, #116]	; 0x74
}
 8004932:	4770      	bx	lr

08004934 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004934:	6802      	ldr	r2, [r0, #0]
 8004936:	6813      	ldr	r3, [r2, #0]
 8004938:	4906      	ldr	r1, [pc, #24]	; (8004954 <UART_EndRxTransfer+0x20>)
 800493a:	400b      	ands	r3, r1
 800493c:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800493e:	6802      	ldr	r2, [r0, #0]
 8004940:	6893      	ldr	r3, [r2, #8]
 8004942:	3123      	adds	r1, #35	; 0x23
 8004944:	31ff      	adds	r1, #255	; 0xff
 8004946:	438b      	bics	r3, r1
 8004948:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800494a:	2320      	movs	r3, #32
 800494c:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800494e:	2300      	movs	r3, #0
 8004950:	6603      	str	r3, [r0, #96]	; 0x60
}
 8004952:	4770      	bx	lr
 8004954:	fffffedf 	.word	0xfffffedf

08004958 <HAL_UART_Transmit_DMA>:
{
 8004958:	b510      	push	{r4, lr}
 800495a:	0004      	movs	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800495c:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800495e:	2820      	cmp	r0, #32
 8004960:	d14d      	bne.n	80049fe <HAL_UART_Transmit_DMA+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8004962:	2900      	cmp	r1, #0
 8004964:	d04d      	beq.n	8004a02 <HAL_UART_Transmit_DMA+0xaa>
 8004966:	2a00      	cmp	r2, #0
 8004968:	d04d      	beq.n	8004a06 <HAL_UART_Transmit_DMA+0xae>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800496a:	2380      	movs	r3, #128	; 0x80
 800496c:	015b      	lsls	r3, r3, #5
 800496e:	68a0      	ldr	r0, [r4, #8]
 8004970:	4298      	cmp	r0, r3
 8004972:	d034      	beq.n	80049de <HAL_UART_Transmit_DMA+0x86>
    __HAL_LOCK(huart);
 8004974:	2370      	movs	r3, #112	; 0x70
 8004976:	5ce3      	ldrb	r3, [r4, r3]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d046      	beq.n	8004a0a <HAL_UART_Transmit_DMA+0xb2>
 800497c:	2370      	movs	r3, #112	; 0x70
 800497e:	2001      	movs	r0, #1
 8004980:	54e0      	strb	r0, [r4, r3]
    huart->pTxBuffPtr  = pData;
 8004982:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004984:	3b20      	subs	r3, #32
 8004986:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8004988:	3302      	adds	r3, #2
 800498a:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800498c:	2300      	movs	r3, #0
 800498e:	67e3      	str	r3, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004990:	3321      	adds	r3, #33	; 0x21
 8004992:	6763      	str	r3, [r4, #116]	; 0x74
    if (huart->hdmatx != NULL)
 8004994:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004996:	2b00      	cmp	r3, #0
 8004998:	d014      	beq.n	80049c4 <HAL_UART_Transmit_DMA+0x6c>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800499a:	491d      	ldr	r1, [pc, #116]	; (8004a10 <HAL_UART_Transmit_DMA+0xb8>)
 800499c:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800499e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80049a0:	491c      	ldr	r1, [pc, #112]	; (8004a14 <HAL_UART_Transmit_DMA+0xbc>)
 80049a2:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80049a4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80049a6:	491c      	ldr	r1, [pc, #112]	; (8004a18 <HAL_UART_Transmit_DMA+0xc0>)
 80049a8:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 80049aa:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80049ac:	2100      	movs	r1, #0
 80049ae:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80049b0:	6821      	ldr	r1, [r4, #0]
 80049b2:	3128      	adds	r1, #40	; 0x28
 80049b4:	0013      	movs	r3, r2
 80049b6:	000a      	movs	r2, r1
 80049b8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80049ba:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80049bc:	f7fe fe08 	bl	80035d0 <HAL_DMA_Start_IT>
 80049c0:	2800      	cmp	r0, #0
 80049c2:	d113      	bne.n	80049ec <HAL_UART_Transmit_DMA+0x94>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80049c4:	6823      	ldr	r3, [r4, #0]
 80049c6:	2240      	movs	r2, #64	; 0x40
 80049c8:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 80049ca:	2370      	movs	r3, #112	; 0x70
 80049cc:	2200      	movs	r2, #0
 80049ce:	54e2      	strb	r2, [r4, r3]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80049d0:	6822      	ldr	r2, [r4, #0]
 80049d2:	6893      	ldr	r3, [r2, #8]
 80049d4:	2180      	movs	r1, #128	; 0x80
 80049d6:	430b      	orrs	r3, r1
 80049d8:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 80049da:	2000      	movs	r0, #0
 80049dc:	e010      	b.n	8004a00 <HAL_UART_Transmit_DMA+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049de:	6923      	ldr	r3, [r4, #16]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1c7      	bne.n	8004974 <HAL_UART_Transmit_DMA+0x1c>
      if ((((uint32_t)pData) & 1) != 0)
 80049e4:	07cb      	lsls	r3, r1, #31
 80049e6:	d5c5      	bpl.n	8004974 <HAL_UART_Transmit_DMA+0x1c>
        return  HAL_ERROR;
 80049e8:	2001      	movs	r0, #1
 80049ea:	e009      	b.n	8004a00 <HAL_UART_Transmit_DMA+0xa8>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80049ec:	2310      	movs	r3, #16
 80049ee:	67e3      	str	r3, [r4, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 80049f0:	3360      	adds	r3, #96	; 0x60
 80049f2:	2200      	movs	r2, #0
 80049f4:	54e2      	strb	r2, [r4, r3]
        huart->gState = HAL_UART_STATE_READY;
 80049f6:	3b50      	subs	r3, #80	; 0x50
 80049f8:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_ERROR;
 80049fa:	2001      	movs	r0, #1
 80049fc:	e000      	b.n	8004a00 <HAL_UART_Transmit_DMA+0xa8>
    return HAL_BUSY;
 80049fe:	2002      	movs	r0, #2
}
 8004a00:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8004a02:	2001      	movs	r0, #1
 8004a04:	e7fc      	b.n	8004a00 <HAL_UART_Transmit_DMA+0xa8>
 8004a06:	2001      	movs	r0, #1
 8004a08:	e7fa      	b.n	8004a00 <HAL_UART_Transmit_DMA+0xa8>
    __HAL_LOCK(huart);
 8004a0a:	2002      	movs	r0, #2
 8004a0c:	e7f8      	b.n	8004a00 <HAL_UART_Transmit_DMA+0xa8>
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	08004aeb 	.word	0x08004aeb
 8004a14:	08004b37 	.word	0x08004b37
 8004a18:	08004b93 	.word	0x08004b93

08004a1c <HAL_UART_Receive_DMA>:
{
 8004a1c:	b510      	push	{r4, lr}
 8004a1e:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a20:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8004a22:	2820      	cmp	r0, #32
 8004a24:	d151      	bne.n	8004aca <HAL_UART_Receive_DMA+0xae>
    if ((pData == NULL) || (Size == 0U))
 8004a26:	2900      	cmp	r1, #0
 8004a28:	d051      	beq.n	8004ace <HAL_UART_Receive_DMA+0xb2>
 8004a2a:	2a00      	cmp	r2, #0
 8004a2c:	d051      	beq.n	8004ad2 <HAL_UART_Receive_DMA+0xb6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a2e:	2380      	movs	r3, #128	; 0x80
 8004a30:	015b      	lsls	r3, r3, #5
 8004a32:	68a0      	ldr	r0, [r4, #8]
 8004a34:	4298      	cmp	r0, r3
 8004a36:	d038      	beq.n	8004aaa <HAL_UART_Receive_DMA+0x8e>
    __HAL_LOCK(huart);
 8004a38:	2370      	movs	r3, #112	; 0x70
 8004a3a:	5ce3      	ldrb	r3, [r4, r3]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d04a      	beq.n	8004ad6 <HAL_UART_Receive_DMA+0xba>
 8004a40:	2370      	movs	r3, #112	; 0x70
 8004a42:	2001      	movs	r0, #1
 8004a44:	54e0      	strb	r0, [r4, r3]
    huart->pRxBuffPtr = pData;
 8004a46:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8004a48:	3b18      	subs	r3, #24
 8004a4a:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	67e3      	str	r3, [r4, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a50:	3322      	adds	r3, #34	; 0x22
 8004a52:	67a3      	str	r3, [r4, #120]	; 0x78
    if (huart->hdmarx != NULL)
 8004a54:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d013      	beq.n	8004a82 <HAL_UART_Receive_DMA+0x66>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004a5a:	4920      	ldr	r1, [pc, #128]	; (8004adc <HAL_UART_Receive_DMA+0xc0>)
 8004a5c:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004a5e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004a60:	491f      	ldr	r1, [pc, #124]	; (8004ae0 <HAL_UART_Receive_DMA+0xc4>)
 8004a62:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004a64:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004a66:	491f      	ldr	r1, [pc, #124]	; (8004ae4 <HAL_UART_Receive_DMA+0xc8>)
 8004a68:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmarx->XferAbortCallback = NULL;
 8004a6a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004a70:	6821      	ldr	r1, [r4, #0]
 8004a72:	3124      	adds	r1, #36	; 0x24
 8004a74:	0013      	movs	r3, r2
 8004a76:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004a78:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004a7a:	f7fe fda9 	bl	80035d0 <HAL_DMA_Start_IT>
 8004a7e:	2800      	cmp	r0, #0
 8004a80:	d11a      	bne.n	8004ab8 <HAL_UART_Receive_DMA+0x9c>
    __HAL_UNLOCK(huart);
 8004a82:	2370      	movs	r3, #112	; 0x70
 8004a84:	2200      	movs	r2, #0
 8004a86:	54e2      	strb	r2, [r4, r3]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a88:	6822      	ldr	r2, [r4, #0]
 8004a8a:	6811      	ldr	r1, [r2, #0]
 8004a8c:	3390      	adds	r3, #144	; 0x90
 8004a8e:	430b      	orrs	r3, r1
 8004a90:	6013      	str	r3, [r2, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a92:	6822      	ldr	r2, [r4, #0]
 8004a94:	6893      	ldr	r3, [r2, #8]
 8004a96:	2101      	movs	r1, #1
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	6093      	str	r3, [r2, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a9c:	6822      	ldr	r2, [r4, #0]
 8004a9e:	6893      	ldr	r3, [r2, #8]
 8004aa0:	313f      	adds	r1, #63	; 0x3f
 8004aa2:	430b      	orrs	r3, r1
 8004aa4:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 8004aa6:	2000      	movs	r0, #0
 8004aa8:	e010      	b.n	8004acc <HAL_UART_Receive_DMA+0xb0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aaa:	6923      	ldr	r3, [r4, #16]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1c3      	bne.n	8004a38 <HAL_UART_Receive_DMA+0x1c>
      if ((((uint32_t)pData) & 1) != 0)
 8004ab0:	07cb      	lsls	r3, r1, #31
 8004ab2:	d5c1      	bpl.n	8004a38 <HAL_UART_Receive_DMA+0x1c>
        return  HAL_ERROR;
 8004ab4:	2001      	movs	r0, #1
 8004ab6:	e009      	b.n	8004acc <HAL_UART_Receive_DMA+0xb0>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004ab8:	2310      	movs	r3, #16
 8004aba:	67e3      	str	r3, [r4, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8004abc:	3360      	adds	r3, #96	; 0x60
 8004abe:	2200      	movs	r2, #0
 8004ac0:	54e2      	strb	r2, [r4, r3]
        huart->gState = HAL_UART_STATE_READY;
 8004ac2:	3b50      	subs	r3, #80	; 0x50
 8004ac4:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_ERROR;
 8004ac6:	2001      	movs	r0, #1
 8004ac8:	e000      	b.n	8004acc <HAL_UART_Receive_DMA+0xb0>
    return HAL_BUSY;
 8004aca:	2002      	movs	r0, #2
}
 8004acc:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8004ace:	2001      	movs	r0, #1
 8004ad0:	e7fc      	b.n	8004acc <HAL_UART_Receive_DMA+0xb0>
 8004ad2:	2001      	movs	r0, #1
 8004ad4:	e7fa      	b.n	8004acc <HAL_UART_Receive_DMA+0xb0>
    __HAL_LOCK(huart);
 8004ad6:	2002      	movs	r0, #2
 8004ad8:	e7f8      	b.n	8004acc <HAL_UART_Receive_DMA+0xb0>
 8004ada:	46c0      	nop			; (mov r8, r8)
 8004adc:	08004b41 	.word	0x08004b41
 8004ae0:	08004b87 	.word	0x08004b87
 8004ae4:	08004b93 	.word	0x08004b93

08004ae8 <HAL_UART_TxCpltCallback>:
}
 8004ae8:	4770      	bx	lr

08004aea <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004aea:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004aec:	6a83      	ldr	r3, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004aee:	6802      	ldr	r2, [r0, #0]
 8004af0:	6812      	ldr	r2, [r2, #0]
 8004af2:	0692      	lsls	r2, r2, #26
 8004af4:	d40d      	bmi.n	8004b12 <UART_DMATransmitCplt+0x28>
  {
    huart->TxXferCount = 0U;
 8004af6:	2252      	movs	r2, #82	; 0x52
 8004af8:	2100      	movs	r1, #0
 8004afa:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004afc:	6819      	ldr	r1, [r3, #0]
 8004afe:	688a      	ldr	r2, [r1, #8]
 8004b00:	2080      	movs	r0, #128	; 0x80
 8004b02:	4382      	bics	r2, r0
 8004b04:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	6813      	ldr	r3, [r2, #0]
 8004b0a:	2140      	movs	r1, #64	; 0x40
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	6013      	str	r3, [r2, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b10:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8004b12:	0018      	movs	r0, r3
 8004b14:	f7ff ffe8 	bl	8004ae8 <HAL_UART_TxCpltCallback>
}
 8004b18:	e7fa      	b.n	8004b10 <UART_DMATransmitCplt+0x26>

08004b1a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b1a:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b1c:	6802      	ldr	r2, [r0, #0]
 8004b1e:	6813      	ldr	r3, [r2, #0]
 8004b20:	2140      	movs	r1, #64	; 0x40
 8004b22:	438b      	bics	r3, r1
 8004b24:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b26:	2320      	movs	r3, #32
 8004b28:	6743      	str	r3, [r0, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	6643      	str	r3, [r0, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b2e:	f7ff ffdb 	bl	8004ae8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b32:	bd10      	pop	{r4, pc}

08004b34 <HAL_UART_TxHalfCpltCallback>:
}
 8004b34:	4770      	bx	lr

08004b36 <UART_DMATxHalfCplt>:
{
 8004b36:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b38:	6a80      	ldr	r0, [r0, #40]	; 0x28
  HAL_UART_TxHalfCpltCallback(huart);
 8004b3a:	f7ff fffb 	bl	8004b34 <HAL_UART_TxHalfCpltCallback>
}
 8004b3e:	bd10      	pop	{r4, pc}

08004b40 <UART_DMAReceiveCplt>:
{
 8004b40:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b42:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004b44:	6802      	ldr	r2, [r0, #0]
 8004b46:	6812      	ldr	r2, [r2, #0]
 8004b48:	0692      	lsls	r2, r2, #26
 8004b4a:	d414      	bmi.n	8004b76 <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 8004b4c:	225a      	movs	r2, #90	; 0x5a
 8004b4e:	2100      	movs	r1, #0
 8004b50:	5299      	strh	r1, [r3, r2]
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b52:	6819      	ldr	r1, [r3, #0]
 8004b54:	680a      	ldr	r2, [r1, #0]
 8004b56:	480a      	ldr	r0, [pc, #40]	; (8004b80 <UART_DMAReceiveCplt+0x40>)
 8004b58:	4002      	ands	r2, r0
 8004b5a:	600a      	str	r2, [r1, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5c:	6819      	ldr	r1, [r3, #0]
 8004b5e:	688a      	ldr	r2, [r1, #8]
 8004b60:	3003      	adds	r0, #3
 8004b62:	30ff      	adds	r0, #255	; 0xff
 8004b64:	4382      	bics	r2, r0
 8004b66:	608a      	str	r2, [r1, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b68:	6819      	ldr	r1, [r3, #0]
 8004b6a:	688a      	ldr	r2, [r1, #8]
 8004b6c:	303f      	adds	r0, #63	; 0x3f
 8004b6e:	4382      	bics	r2, r0
 8004b70:	608a      	str	r2, [r1, #8]
    huart->RxState = HAL_UART_STATE_READY;
 8004b72:	2220      	movs	r2, #32
 8004b74:	679a      	str	r2, [r3, #120]	; 0x78
  HAL_UART_RxCpltCallback(huart);
 8004b76:	0018      	movs	r0, r3
 8004b78:	f002 fc34 	bl	80073e4 <HAL_UART_RxCpltCallback>
}
 8004b7c:	bd10      	pop	{r4, pc}
 8004b7e:	46c0      	nop			; (mov r8, r8)
 8004b80:	fffffeff 	.word	0xfffffeff

08004b84 <HAL_UART_RxHalfCpltCallback>:
}
 8004b84:	4770      	bx	lr

08004b86 <UART_DMARxHalfCplt>:
{
 8004b86:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b88:	6a80      	ldr	r0, [r0, #40]	; 0x28
  HAL_UART_RxHalfCpltCallback(huart);
 8004b8a:	f7ff fffb 	bl	8004b84 <HAL_UART_RxHalfCpltCallback>
}
 8004b8e:	bd10      	pop	{r4, pc}

08004b90 <HAL_UART_ErrorCallback>:
}
 8004b90:	4770      	bx	lr

08004b92 <UART_DMAError>:
{
 8004b92:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b94:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004b96:	6f62      	ldr	r2, [r4, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004b98:	6fa5      	ldr	r5, [r4, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	061b      	lsls	r3, r3, #24
 8004ba0:	d501      	bpl.n	8004ba6 <UART_DMAError+0x14>
 8004ba2:	2a21      	cmp	r2, #33	; 0x21
 8004ba4:	d00d      	beq.n	8004bc2 <UART_DMAError+0x30>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004ba6:	6823      	ldr	r3, [r4, #0]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	065b      	lsls	r3, r3, #25
 8004bac:	d501      	bpl.n	8004bb2 <UART_DMAError+0x20>
 8004bae:	2d22      	cmp	r5, #34	; 0x22
 8004bb0:	d00e      	beq.n	8004bd0 <UART_DMAError+0x3e>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004bb2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004bb4:	2210      	movs	r2, #16
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	67e3      	str	r3, [r4, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 8004bba:	0020      	movs	r0, r4
 8004bbc:	f7ff ffe8 	bl	8004b90 <HAL_UART_ErrorCallback>
}
 8004bc0:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 8004bc2:	2352      	movs	r3, #82	; 0x52
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	52e2      	strh	r2, [r4, r3]
    UART_EndTxTransfer(huart);
 8004bc8:	0020      	movs	r0, r4
 8004bca:	f7ff feab 	bl	8004924 <UART_EndTxTransfer>
 8004bce:	e7ea      	b.n	8004ba6 <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 8004bd0:	235a      	movs	r3, #90	; 0x5a
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 8004bd6:	0020      	movs	r0, r4
 8004bd8:	f7ff feac 	bl	8004934 <UART_EndRxTransfer>
 8004bdc:	e7e9      	b.n	8004bb2 <UART_DMAError+0x20>
	...

08004be0 <HAL_UART_IRQHandler>:
{
 8004be0:	b570      	push	{r4, r5, r6, lr}
 8004be2:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004be4:	6801      	ldr	r1, [r0, #0]
 8004be6:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004be8:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bea:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004bec:	220f      	movs	r2, #15
 8004bee:	401a      	ands	r2, r3
  if (errorflags == 0U)
 8004bf0:	d10a      	bne.n	8004c08 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004bf2:	069e      	lsls	r6, r3, #26
 8004bf4:	d508      	bpl.n	8004c08 <HAL_UART_IRQHandler+0x28>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004bf6:	0686      	lsls	r6, r0, #26
 8004bf8:	d506      	bpl.n	8004c08 <HAL_UART_IRQHandler+0x28>
      if (huart->RxISR != NULL)
 8004bfa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d100      	bne.n	8004c02 <HAL_UART_IRQHandler+0x22>
 8004c00:	e089      	b.n	8004d16 <HAL_UART_IRQHandler+0x136>
        huart->RxISR(huart);
 8004c02:	0020      	movs	r0, r4
 8004c04:	4798      	blx	r3
 8004c06:	e086      	b.n	8004d16 <HAL_UART_IRQHandler+0x136>
  if ((errorflags != 0U)
 8004c08:	2a00      	cmp	r2, #0
 8004c0a:	d06b      	beq.n	8004ce4 <HAL_UART_IRQHandler+0x104>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	402a      	ands	r2, r5
 8004c10:	d103      	bne.n	8004c1a <HAL_UART_IRQHandler+0x3a>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004c12:	2690      	movs	r6, #144	; 0x90
 8004c14:	0076      	lsls	r6, r6, #1
 8004c16:	4230      	tst	r0, r6
 8004c18:	d064      	beq.n	8004ce4 <HAL_UART_IRQHandler+0x104>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c1a:	07dd      	lsls	r5, r3, #31
 8004c1c:	d506      	bpl.n	8004c2c <HAL_UART_IRQHandler+0x4c>
 8004c1e:	05c5      	lsls	r5, r0, #23
 8004c20:	d504      	bpl.n	8004c2c <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c22:	2501      	movs	r5, #1
 8004c24:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c26:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004c28:	4329      	orrs	r1, r5
 8004c2a:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c2c:	0799      	lsls	r1, r3, #30
 8004c2e:	d508      	bpl.n	8004c42 <HAL_UART_IRQHandler+0x62>
 8004c30:	2a00      	cmp	r2, #0
 8004c32:	d006      	beq.n	8004c42 <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c34:	6821      	ldr	r1, [r4, #0]
 8004c36:	2502      	movs	r5, #2
 8004c38:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c3a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004c3c:	3502      	adds	r5, #2
 8004c3e:	4329      	orrs	r1, r5
 8004c40:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c42:	0759      	lsls	r1, r3, #29
 8004c44:	d508      	bpl.n	8004c58 <HAL_UART_IRQHandler+0x78>
 8004c46:	2a00      	cmp	r2, #0
 8004c48:	d006      	beq.n	8004c58 <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c4a:	6821      	ldr	r1, [r4, #0]
 8004c4c:	2504      	movs	r5, #4
 8004c4e:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c50:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004c52:	3d02      	subs	r5, #2
 8004c54:	4329      	orrs	r1, r5
 8004c56:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c58:	0719      	lsls	r1, r3, #28
 8004c5a:	d509      	bpl.n	8004c70 <HAL_UART_IRQHandler+0x90>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c5c:	0681      	lsls	r1, r0, #26
 8004c5e:	d401      	bmi.n	8004c64 <HAL_UART_IRQHandler+0x84>
 8004c60:	2a00      	cmp	r2, #0
 8004c62:	d005      	beq.n	8004c70 <HAL_UART_IRQHandler+0x90>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c64:	6822      	ldr	r2, [r4, #0]
 8004c66:	2108      	movs	r1, #8
 8004c68:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c6a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c70:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8004c72:	2a00      	cmp	r2, #0
 8004c74:	d04f      	beq.n	8004d16 <HAL_UART_IRQHandler+0x136>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c76:	069b      	lsls	r3, r3, #26
 8004c78:	d506      	bpl.n	8004c88 <HAL_UART_IRQHandler+0xa8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c7a:	0683      	lsls	r3, r0, #26
 8004c7c:	d504      	bpl.n	8004c88 <HAL_UART_IRQHandler+0xa8>
        if (huart->RxISR != NULL)
 8004c7e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <HAL_UART_IRQHandler+0xa8>
          huart->RxISR(huart);
 8004c84:	0020      	movs	r0, r4
 8004c86:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8004c88:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	065b      	lsls	r3, r3, #25
 8004c90:	d401      	bmi.n	8004c96 <HAL_UART_IRQHandler+0xb6>
 8004c92:	0713      	lsls	r3, r2, #28
 8004c94:	d520      	bpl.n	8004cd8 <HAL_UART_IRQHandler+0xf8>
        UART_EndRxTransfer(huart);
 8004c96:	0020      	movs	r0, r4
 8004c98:	f7ff fe4c 	bl	8004934 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c9c:	6823      	ldr	r3, [r4, #0]
 8004c9e:	689a      	ldr	r2, [r3, #8]
 8004ca0:	0652      	lsls	r2, r2, #25
 8004ca2:	d515      	bpl.n	8004cd0 <HAL_UART_IRQHandler+0xf0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ca4:	689a      	ldr	r2, [r3, #8]
 8004ca6:	2140      	movs	r1, #64	; 0x40
 8004ca8:	438a      	bics	r2, r1
 8004caa:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8004cac:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <HAL_UART_IRQHandler+0xe8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cb2:	4a1b      	ldr	r2, [pc, #108]	; (8004d20 <HAL_UART_IRQHandler+0x140>)
 8004cb4:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cb6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004cb8:	f7fe fcc5 	bl	8003646 <HAL_DMA_Abort_IT>
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	d02a      	beq.n	8004d16 <HAL_UART_IRQHandler+0x136>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cc0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004cc2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004cc4:	4798      	blx	r3
 8004cc6:	e026      	b.n	8004d16 <HAL_UART_IRQHandler+0x136>
            HAL_UART_ErrorCallback(huart);
 8004cc8:	0020      	movs	r0, r4
 8004cca:	f7ff ff61 	bl	8004b90 <HAL_UART_ErrorCallback>
 8004cce:	e022      	b.n	8004d16 <HAL_UART_IRQHandler+0x136>
          HAL_UART_ErrorCallback(huart);
 8004cd0:	0020      	movs	r0, r4
 8004cd2:	f7ff ff5d 	bl	8004b90 <HAL_UART_ErrorCallback>
 8004cd6:	e01e      	b.n	8004d16 <HAL_UART_IRQHandler+0x136>
        HAL_UART_ErrorCallback(huart);
 8004cd8:	0020      	movs	r0, r4
 8004cda:	f7ff ff59 	bl	8004b90 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	67e3      	str	r3, [r4, #124]	; 0x7c
 8004ce2:	e018      	b.n	8004d16 <HAL_UART_IRQHandler+0x136>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ce4:	02da      	lsls	r2, r3, #11
 8004ce6:	d501      	bpl.n	8004cec <HAL_UART_IRQHandler+0x10c>
 8004ce8:	026a      	lsls	r2, r5, #9
 8004cea:	d409      	bmi.n	8004d00 <HAL_UART_IRQHandler+0x120>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004cec:	061a      	lsls	r2, r3, #24
 8004cee:	d50e      	bpl.n	8004d0e <HAL_UART_IRQHandler+0x12e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004cf0:	0602      	lsls	r2, r0, #24
 8004cf2:	d50c      	bpl.n	8004d0e <HAL_UART_IRQHandler+0x12e>
    if (huart->TxISR != NULL)
 8004cf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00d      	beq.n	8004d16 <HAL_UART_IRQHandler+0x136>
      huart->TxISR(huart);
 8004cfa:	0020      	movs	r0, r4
 8004cfc:	4798      	blx	r3
 8004cfe:	e00a      	b.n	8004d16 <HAL_UART_IRQHandler+0x136>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d00:	2380      	movs	r3, #128	; 0x80
 8004d02:	035b      	lsls	r3, r3, #13
 8004d04:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8004d06:	0020      	movs	r0, r4
 8004d08:	f000 fae8 	bl	80052dc <HAL_UARTEx_WakeupCallback>
    return;
 8004d0c:	e003      	b.n	8004d16 <HAL_UART_IRQHandler+0x136>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d0e:	065b      	lsls	r3, r3, #25
 8004d10:	d501      	bpl.n	8004d16 <HAL_UART_IRQHandler+0x136>
 8004d12:	0643      	lsls	r3, r0, #25
 8004d14:	d400      	bmi.n	8004d18 <HAL_UART_IRQHandler+0x138>
}
 8004d16:	bd70      	pop	{r4, r5, r6, pc}
    UART_EndTransmit_IT(huart);
 8004d18:	0020      	movs	r0, r4
 8004d1a:	f7ff fefe 	bl	8004b1a <UART_EndTransmit_IT>
    return;
 8004d1e:	e7fa      	b.n	8004d16 <HAL_UART_IRQHandler+0x136>
 8004d20:	08004d25 	.word	0x08004d25

08004d24 <UART_DMAAbortOnError>:
{
 8004d24:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d26:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	225a      	movs	r2, #90	; 0x5a
 8004d2c:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8004d2e:	3a08      	subs	r2, #8
 8004d30:	5283      	strh	r3, [r0, r2]
  HAL_UART_ErrorCallback(huart);
 8004d32:	f7ff ff2d 	bl	8004b90 <HAL_UART_ErrorCallback>
}
 8004d36:	bd10      	pop	{r4, pc}

08004d38 <UART_SetConfig>:
{
 8004d38:	b5d0      	push	{r4, r6, r7, lr}
 8004d3a:	0004      	movs	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d3c:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d3e:	6883      	ldr	r3, [r0, #8]
 8004d40:	6902      	ldr	r2, [r0, #16]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	6942      	ldr	r2, [r0, #20]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	69c2      	ldr	r2, [r0, #28]
 8004d4a:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d4c:	680a      	ldr	r2, [r1, #0]
 8004d4e:	48ba      	ldr	r0, [pc, #744]	; (8005038 <UART_SetConfig+0x300>)
 8004d50:	4002      	ands	r2, r0
 8004d52:	4313      	orrs	r3, r2
 8004d54:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d56:	6822      	ldr	r2, [r4, #0]
 8004d58:	6853      	ldr	r3, [r2, #4]
 8004d5a:	49b8      	ldr	r1, [pc, #736]	; (800503c <UART_SetConfig+0x304>)
 8004d5c:	400b      	ands	r3, r1
 8004d5e:	68e1      	ldr	r1, [r4, #12]
 8004d60:	430b      	orrs	r3, r1
 8004d62:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d64:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d66:	6822      	ldr	r2, [r4, #0]
 8004d68:	4bb5      	ldr	r3, [pc, #724]	; (8005040 <UART_SetConfig+0x308>)
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d001      	beq.n	8004d72 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8004d6e:	6a23      	ldr	r3, [r4, #32]
 8004d70:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d72:	6893      	ldr	r3, [r2, #8]
 8004d74:	48b3      	ldr	r0, [pc, #716]	; (8005044 <UART_SetConfig+0x30c>)
 8004d76:	4003      	ands	r3, r0
 8004d78:	430b      	orrs	r3, r1
 8004d7a:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	4ab2      	ldr	r2, [pc, #712]	; (8005048 <UART_SetConfig+0x310>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d01c      	beq.n	8004dbe <UART_SetConfig+0x86>
 8004d84:	4ab1      	ldr	r2, [pc, #708]	; (800504c <UART_SetConfig+0x314>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d02d      	beq.n	8004de6 <UART_SetConfig+0xae>
 8004d8a:	4ab1      	ldr	r2, [pc, #708]	; (8005050 <UART_SetConfig+0x318>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d05f      	beq.n	8004e50 <UART_SetConfig+0x118>
 8004d90:	4ab0      	ldr	r2, [pc, #704]	; (8005054 <UART_SetConfig+0x31c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d05e      	beq.n	8004e54 <UART_SetConfig+0x11c>
 8004d96:	4aaa      	ldr	r2, [pc, #680]	; (8005040 <UART_SetConfig+0x308>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d039      	beq.n	8004e10 <UART_SetConfig+0xd8>
 8004d9c:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d9e:	49a8      	ldr	r1, [pc, #672]	; (8005040 <UART_SetConfig+0x308>)
 8004da0:	428b      	cmp	r3, r1
 8004da2:	d05b      	beq.n	8004e5c <UART_SetConfig+0x124>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004da4:	2380      	movs	r3, #128	; 0x80
 8004da6:	021b      	lsls	r3, r3, #8
 8004da8:	69e1      	ldr	r1, [r4, #28]
 8004daa:	4299      	cmp	r1, r3
 8004dac:	d100      	bne.n	8004db0 <UART_SetConfig+0x78>
 8004dae:	e090      	b.n	8004ed2 <UART_SetConfig+0x19a>
    switch (clocksource)
 8004db0:	2a08      	cmp	r2, #8
 8004db2:	d900      	bls.n	8004db6 <UART_SetConfig+0x7e>
 8004db4:	e171      	b.n	800509a <UART_SetConfig+0x362>
 8004db6:	0092      	lsls	r2, r2, #2
 8004db8:	4ba7      	ldr	r3, [pc, #668]	; (8005058 <UART_SetConfig+0x320>)
 8004dba:	589b      	ldr	r3, [r3, r2]
 8004dbc:	469f      	mov	pc, r3
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dbe:	4aa7      	ldr	r2, [pc, #668]	; (800505c <UART_SetConfig+0x324>)
 8004dc0:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8004dc2:	2203      	movs	r2, #3
 8004dc4:	400a      	ands	r2, r1
 8004dc6:	2a01      	cmp	r2, #1
 8004dc8:	d009      	beq.n	8004dde <UART_SetConfig+0xa6>
 8004dca:	2a00      	cmp	r2, #0
 8004dcc:	d005      	beq.n	8004dda <UART_SetConfig+0xa2>
 8004dce:	2a02      	cmp	r2, #2
 8004dd0:	d03a      	beq.n	8004e48 <UART_SetConfig+0x110>
 8004dd2:	2a03      	cmp	r2, #3
 8004dd4:	d005      	beq.n	8004de2 <UART_SetConfig+0xaa>
 8004dd6:	2210      	movs	r2, #16
 8004dd8:	e7e1      	b.n	8004d9e <UART_SetConfig+0x66>
 8004dda:	2201      	movs	r2, #1
 8004ddc:	e7df      	b.n	8004d9e <UART_SetConfig+0x66>
 8004dde:	2204      	movs	r2, #4
 8004de0:	e7dd      	b.n	8004d9e <UART_SetConfig+0x66>
 8004de2:	2208      	movs	r2, #8
 8004de4:	e7db      	b.n	8004d9e <UART_SetConfig+0x66>
 8004de6:	4a9d      	ldr	r2, [pc, #628]	; (800505c <UART_SetConfig+0x324>)
 8004de8:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8004dea:	220c      	movs	r2, #12
 8004dec:	400a      	ands	r2, r1
 8004dee:	2a04      	cmp	r2, #4
 8004df0:	d00a      	beq.n	8004e08 <UART_SetConfig+0xd0>
 8004df2:	d905      	bls.n	8004e00 <UART_SetConfig+0xc8>
 8004df4:	2a08      	cmp	r2, #8
 8004df6:	d029      	beq.n	8004e4c <UART_SetConfig+0x114>
 8004df8:	2a0c      	cmp	r2, #12
 8004dfa:	d107      	bne.n	8004e0c <UART_SetConfig+0xd4>
 8004dfc:	2208      	movs	r2, #8
 8004dfe:	e7ce      	b.n	8004d9e <UART_SetConfig+0x66>
 8004e00:	2a00      	cmp	r2, #0
 8004e02:	d103      	bne.n	8004e0c <UART_SetConfig+0xd4>
 8004e04:	2200      	movs	r2, #0
 8004e06:	e7ca      	b.n	8004d9e <UART_SetConfig+0x66>
 8004e08:	2204      	movs	r2, #4
 8004e0a:	e7c8      	b.n	8004d9e <UART_SetConfig+0x66>
 8004e0c:	2210      	movs	r2, #16
 8004e0e:	e7c6      	b.n	8004d9e <UART_SetConfig+0x66>
 8004e10:	4a92      	ldr	r2, [pc, #584]	; (800505c <UART_SetConfig+0x324>)
 8004e12:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004e14:	21c0      	movs	r1, #192	; 0xc0
 8004e16:	0109      	lsls	r1, r1, #4
 8004e18:	400a      	ands	r2, r1
 8004e1a:	2180      	movs	r1, #128	; 0x80
 8004e1c:	00c9      	lsls	r1, r1, #3
 8004e1e:	428a      	cmp	r2, r1
 8004e20:	d00e      	beq.n	8004e40 <UART_SetConfig+0x108>
 8004e22:	d909      	bls.n	8004e38 <UART_SetConfig+0x100>
 8004e24:	2180      	movs	r1, #128	; 0x80
 8004e26:	0109      	lsls	r1, r1, #4
 8004e28:	428a      	cmp	r2, r1
 8004e2a:	d015      	beq.n	8004e58 <UART_SetConfig+0x120>
 8004e2c:	21c0      	movs	r1, #192	; 0xc0
 8004e2e:	0109      	lsls	r1, r1, #4
 8004e30:	428a      	cmp	r2, r1
 8004e32:	d107      	bne.n	8004e44 <UART_SetConfig+0x10c>
 8004e34:	2208      	movs	r2, #8
 8004e36:	e7b2      	b.n	8004d9e <UART_SetConfig+0x66>
 8004e38:	2a00      	cmp	r2, #0
 8004e3a:	d103      	bne.n	8004e44 <UART_SetConfig+0x10c>
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	e7ae      	b.n	8004d9e <UART_SetConfig+0x66>
 8004e40:	2204      	movs	r2, #4
 8004e42:	e7ac      	b.n	8004d9e <UART_SetConfig+0x66>
 8004e44:	2210      	movs	r2, #16
 8004e46:	e7aa      	b.n	8004d9e <UART_SetConfig+0x66>
 8004e48:	2202      	movs	r2, #2
 8004e4a:	e7a8      	b.n	8004d9e <UART_SetConfig+0x66>
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	e7a6      	b.n	8004d9e <UART_SetConfig+0x66>
 8004e50:	2200      	movs	r2, #0
 8004e52:	e7a4      	b.n	8004d9e <UART_SetConfig+0x66>
 8004e54:	2200      	movs	r2, #0
 8004e56:	e7a2      	b.n	8004d9e <UART_SetConfig+0x66>
 8004e58:	2202      	movs	r2, #2
 8004e5a:	e7a0      	b.n	8004d9e <UART_SetConfig+0x66>
    switch (clocksource)
 8004e5c:	2a02      	cmp	r2, #2
 8004e5e:	d02d      	beq.n	8004ebc <UART_SetConfig+0x184>
 8004e60:	d907      	bls.n	8004e72 <UART_SetConfig+0x13a>
 8004e62:	2a04      	cmp	r2, #4
 8004e64:	d030      	beq.n	8004ec8 <UART_SetConfig+0x190>
 8004e66:	2a08      	cmp	r2, #8
 8004e68:	d000      	beq.n	8004e6c <UART_SetConfig+0x134>
 8004e6a:	e119      	b.n	80050a0 <UART_SetConfig+0x368>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004e6c:	2080      	movs	r0, #128	; 0x80
 8004e6e:	0200      	lsls	r0, r0, #8
 8004e70:	e007      	b.n	8004e82 <UART_SetConfig+0x14a>
    switch (clocksource)
 8004e72:	2a00      	cmp	r2, #0
 8004e74:	d000      	beq.n	8004e78 <UART_SetConfig+0x140>
 8004e76:	e113      	b.n	80050a0 <UART_SetConfig+0x368>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004e78:	f7ff fa32 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 8004e7c:	2800      	cmp	r0, #0
 8004e7e:	d100      	bne.n	8004e82 <UART_SetConfig+0x14a>
 8004e80:	e110      	b.n	80050a4 <UART_SetConfig+0x36c>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e82:	6862      	ldr	r2, [r4, #4]
 8004e84:	0053      	lsls	r3, r2, #1
 8004e86:	189b      	adds	r3, r3, r2
 8004e88:	4283      	cmp	r3, r0
 8004e8a:	d900      	bls.n	8004e8e <UART_SetConfig+0x156>
 8004e8c:	e10c      	b.n	80050a8 <UART_SetConfig+0x370>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e8e:	0313      	lsls	r3, r2, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e90:	4283      	cmp	r3, r0
 8004e92:	d200      	bcs.n	8004e96 <UART_SetConfig+0x15e>
 8004e94:	e10a      	b.n	80050ac <UART_SetConfig+0x374>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8004e96:	0e07      	lsrs	r7, r0, #24
 8004e98:	0206      	lsls	r6, r0, #8
 8004e9a:	0850      	lsrs	r0, r2, #1
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	1980      	adds	r0, r0, r6
 8004ea0:	4179      	adcs	r1, r7
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f7fb fb3a 	bl	800051c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ea8:	4b6d      	ldr	r3, [pc, #436]	; (8005060 <UART_SetConfig+0x328>)
 8004eaa:	18c2      	adds	r2, r0, r3
 8004eac:	4b6d      	ldr	r3, [pc, #436]	; (8005064 <UART_SetConfig+0x32c>)
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d900      	bls.n	8004eb4 <UART_SetConfig+0x17c>
 8004eb2:	e0fd      	b.n	80050b0 <UART_SetConfig+0x378>
          huart->Instance->BRR = usartdiv;
 8004eb4:	6823      	ldr	r3, [r4, #0]
 8004eb6:	60d8      	str	r0, [r3, #12]
 8004eb8:	2000      	movs	r0, #0
 8004eba:	e085      	b.n	8004fc8 <UART_SetConfig+0x290>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ebc:	4b67      	ldr	r3, [pc, #412]	; (800505c <UART_SetConfig+0x324>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	06db      	lsls	r3, r3, #27
 8004ec2:	d404      	bmi.n	8004ece <UART_SetConfig+0x196>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004ec4:	4868      	ldr	r0, [pc, #416]	; (8005068 <UART_SetConfig+0x330>)
 8004ec6:	e7dc      	b.n	8004e82 <UART_SetConfig+0x14a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004ec8:	f7fe fe10 	bl	8003aec <HAL_RCC_GetSysClockFreq>
        break;
 8004ecc:	e7d6      	b.n	8004e7c <UART_SetConfig+0x144>
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8004ece:	4867      	ldr	r0, [pc, #412]	; (800506c <UART_SetConfig+0x334>)
 8004ed0:	e7d7      	b.n	8004e82 <UART_SetConfig+0x14a>
    switch (clocksource)
 8004ed2:	2a08      	cmp	r2, #8
 8004ed4:	d862      	bhi.n	8004f9c <UART_SetConfig+0x264>
 8004ed6:	0092      	lsls	r2, r2, #2
 8004ed8:	4b65      	ldr	r3, [pc, #404]	; (8005070 <UART_SetConfig+0x338>)
 8004eda:	589b      	ldr	r3, [r3, r2]
 8004edc:	469f      	mov	pc, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004ede:	f7ff f9ff 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 8004ee2:	0040      	lsls	r0, r0, #1
 8004ee4:	6863      	ldr	r3, [r4, #4]
 8004ee6:	085b      	lsrs	r3, r3, #1
 8004ee8:	18c0      	adds	r0, r0, r3
 8004eea:	6861      	ldr	r1, [r4, #4]
 8004eec:	f7fb f928 	bl	8000140 <__udivsi3>
 8004ef0:	0403      	lsls	r3, r0, #16
 8004ef2:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ef4:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ef6:	495f      	ldr	r1, [pc, #380]	; (8005074 <UART_SetConfig+0x33c>)
 8004ef8:	001a      	movs	r2, r3
 8004efa:	3a10      	subs	r2, #16
 8004efc:	428a      	cmp	r2, r1
 8004efe:	d900      	bls.n	8004f02 <UART_SetConfig+0x1ca>
 8004f00:	e0d8      	b.n	80050b4 <UART_SetConfig+0x37c>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f02:	220f      	movs	r2, #15
 8004f04:	0019      	movs	r1, r3
 8004f06:	4391      	bics	r1, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f08:	085b      	lsrs	r3, r3, #1
 8004f0a:	3a08      	subs	r2, #8
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	430b      	orrs	r3, r1
      huart->Instance->BRR = brrtemp;
 8004f10:	6822      	ldr	r2, [r4, #0]
 8004f12:	60d3      	str	r3, [r2, #12]
 8004f14:	e058      	b.n	8004fc8 <UART_SetConfig+0x290>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004f16:	f7ff f9f3 	bl	8004300 <HAL_RCC_GetPCLK2Freq>
 8004f1a:	0040      	lsls	r0, r0, #1
 8004f1c:	6863      	ldr	r3, [r4, #4]
 8004f1e:	085b      	lsrs	r3, r3, #1
 8004f20:	18c0      	adds	r0, r0, r3
 8004f22:	6861      	ldr	r1, [r4, #4]
 8004f24:	f7fb f90c 	bl	8000140 <__udivsi3>
 8004f28:	0403      	lsls	r3, r0, #16
 8004f2a:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f2c:	2000      	movs	r0, #0
        break;
 8004f2e:	e7e2      	b.n	8004ef6 <UART_SetConfig+0x1be>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f30:	4b4a      	ldr	r3, [pc, #296]	; (800505c <UART_SetConfig+0x324>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	06db      	lsls	r3, r3, #27
 8004f36:	d50b      	bpl.n	8004f50 <UART_SetConfig+0x218>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004f38:	6863      	ldr	r3, [r4, #4]
 8004f3a:	0858      	lsrs	r0, r3, #1
 8004f3c:	4b4e      	ldr	r3, [pc, #312]	; (8005078 <UART_SetConfig+0x340>)
 8004f3e:	469c      	mov	ip, r3
 8004f40:	4460      	add	r0, ip
 8004f42:	6861      	ldr	r1, [r4, #4]
 8004f44:	f7fb f8fc 	bl	8000140 <__udivsi3>
 8004f48:	0403      	lsls	r3, r0, #16
 8004f4a:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	e7d2      	b.n	8004ef6 <UART_SetConfig+0x1be>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004f50:	6863      	ldr	r3, [r4, #4]
 8004f52:	0858      	lsrs	r0, r3, #1
 8004f54:	4b49      	ldr	r3, [pc, #292]	; (800507c <UART_SetConfig+0x344>)
 8004f56:	469c      	mov	ip, r3
 8004f58:	4460      	add	r0, ip
 8004f5a:	6861      	ldr	r1, [r4, #4]
 8004f5c:	f7fb f8f0 	bl	8000140 <__udivsi3>
 8004f60:	0403      	lsls	r3, r0, #16
 8004f62:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f64:	2000      	movs	r0, #0
 8004f66:	e7c6      	b.n	8004ef6 <UART_SetConfig+0x1be>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004f68:	f7fe fdc0 	bl	8003aec <HAL_RCC_GetSysClockFreq>
 8004f6c:	0040      	lsls	r0, r0, #1
 8004f6e:	6863      	ldr	r3, [r4, #4]
 8004f70:	085b      	lsrs	r3, r3, #1
 8004f72:	18c0      	adds	r0, r0, r3
 8004f74:	6861      	ldr	r1, [r4, #4]
 8004f76:	f7fb f8e3 	bl	8000140 <__udivsi3>
 8004f7a:	0403      	lsls	r3, r0, #16
 8004f7c:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f7e:	2000      	movs	r0, #0
        break;
 8004f80:	e7b9      	b.n	8004ef6 <UART_SetConfig+0x1be>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004f82:	6863      	ldr	r3, [r4, #4]
 8004f84:	0858      	lsrs	r0, r3, #1
 8004f86:	2380      	movs	r3, #128	; 0x80
 8004f88:	025b      	lsls	r3, r3, #9
 8004f8a:	469c      	mov	ip, r3
 8004f8c:	4460      	add	r0, ip
 8004f8e:	6861      	ldr	r1, [r4, #4]
 8004f90:	f7fb f8d6 	bl	8000140 <__udivsi3>
 8004f94:	0403      	lsls	r3, r0, #16
 8004f96:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f98:	2000      	movs	r0, #0
        break;
 8004f9a:	e7ac      	b.n	8004ef6 <UART_SetConfig+0x1be>
        ret = HAL_ERROR;
 8004f9c:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	e7a9      	b.n	8004ef6 <UART_SetConfig+0x1be>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004fa2:	f7ff f99d 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 8004fa6:	6863      	ldr	r3, [r4, #4]
 8004fa8:	085b      	lsrs	r3, r3, #1
 8004faa:	18c0      	adds	r0, r0, r3
 8004fac:	6861      	ldr	r1, [r4, #4]
 8004fae:	f7fb f8c7 	bl	8000140 <__udivsi3>
 8004fb2:	0403      	lsls	r3, r0, #16
 8004fb4:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fb6:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fb8:	492e      	ldr	r1, [pc, #184]	; (8005074 <UART_SetConfig+0x33c>)
 8004fba:	001a      	movs	r2, r3
 8004fbc:	3a10      	subs	r2, #16
 8004fbe:	428a      	cmp	r2, r1
 8004fc0:	d900      	bls.n	8004fc4 <UART_SetConfig+0x28c>
 8004fc2:	e079      	b.n	80050b8 <UART_SetConfig+0x380>
      huart->Instance->BRR = usartdiv;
 8004fc4:	6822      	ldr	r2, [r4, #0]
 8004fc6:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8004fcc:	6663      	str	r3, [r4, #100]	; 0x64
}
 8004fce:	bdd0      	pop	{r4, r6, r7, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004fd0:	f7ff f996 	bl	8004300 <HAL_RCC_GetPCLK2Freq>
 8004fd4:	6863      	ldr	r3, [r4, #4]
 8004fd6:	085b      	lsrs	r3, r3, #1
 8004fd8:	18c0      	adds	r0, r0, r3
 8004fda:	6861      	ldr	r1, [r4, #4]
 8004fdc:	f7fb f8b0 	bl	8000140 <__udivsi3>
 8004fe0:	0403      	lsls	r3, r0, #16
 8004fe2:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fe4:	2000      	movs	r0, #0
        break;
 8004fe6:	e7e7      	b.n	8004fb8 <UART_SetConfig+0x280>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fe8:	4b1c      	ldr	r3, [pc, #112]	; (800505c <UART_SetConfig+0x324>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	06db      	lsls	r3, r3, #27
 8004fee:	d50b      	bpl.n	8005008 <UART_SetConfig+0x2d0>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004ff0:	6863      	ldr	r3, [r4, #4]
 8004ff2:	0858      	lsrs	r0, r3, #1
 8004ff4:	4b1d      	ldr	r3, [pc, #116]	; (800506c <UART_SetConfig+0x334>)
 8004ff6:	469c      	mov	ip, r3
 8004ff8:	4460      	add	r0, ip
 8004ffa:	6861      	ldr	r1, [r4, #4]
 8004ffc:	f7fb f8a0 	bl	8000140 <__udivsi3>
 8005000:	0403      	lsls	r3, r0, #16
 8005002:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8005004:	2000      	movs	r0, #0
 8005006:	e7d7      	b.n	8004fb8 <UART_SetConfig+0x280>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005008:	6863      	ldr	r3, [r4, #4]
 800500a:	0858      	lsrs	r0, r3, #1
 800500c:	4b16      	ldr	r3, [pc, #88]	; (8005068 <UART_SetConfig+0x330>)
 800500e:	469c      	mov	ip, r3
 8005010:	4460      	add	r0, ip
 8005012:	6861      	ldr	r1, [r4, #4]
 8005014:	f7fb f894 	bl	8000140 <__udivsi3>
 8005018:	0403      	lsls	r3, r0, #16
 800501a:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800501c:	2000      	movs	r0, #0
 800501e:	e7cb      	b.n	8004fb8 <UART_SetConfig+0x280>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005020:	f7fe fd64 	bl	8003aec <HAL_RCC_GetSysClockFreq>
 8005024:	6863      	ldr	r3, [r4, #4]
 8005026:	085b      	lsrs	r3, r3, #1
 8005028:	18c0      	adds	r0, r0, r3
 800502a:	6861      	ldr	r1, [r4, #4]
 800502c:	f7fb f888 	bl	8000140 <__udivsi3>
 8005030:	0403      	lsls	r3, r0, #16
 8005032:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8005034:	2000      	movs	r0, #0
        break;
 8005036:	e7bf      	b.n	8004fb8 <UART_SetConfig+0x280>
 8005038:	efff69f3 	.word	0xefff69f3
 800503c:	ffffcfff 	.word	0xffffcfff
 8005040:	40004800 	.word	0x40004800
 8005044:	fffff4ff 	.word	0xfffff4ff
 8005048:	40013800 	.word	0x40013800
 800504c:	40004400 	.word	0x40004400
 8005050:	40004c00 	.word	0x40004c00
 8005054:	40005000 	.word	0x40005000
 8005058:	0800c3cc 	.word	0x0800c3cc
 800505c:	40021000 	.word	0x40021000
 8005060:	fffffd00 	.word	0xfffffd00
 8005064:	000ffcff 	.word	0x000ffcff
 8005068:	00f42400 	.word	0x00f42400
 800506c:	003d0900 	.word	0x003d0900
 8005070:	0800c3f0 	.word	0x0800c3f0
 8005074:	0000ffef 	.word	0x0000ffef
 8005078:	007a1200 	.word	0x007a1200
 800507c:	01e84800 	.word	0x01e84800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005080:	6863      	ldr	r3, [r4, #4]
 8005082:	0858      	lsrs	r0, r3, #1
 8005084:	2380      	movs	r3, #128	; 0x80
 8005086:	021b      	lsls	r3, r3, #8
 8005088:	469c      	mov	ip, r3
 800508a:	4460      	add	r0, ip
 800508c:	6861      	ldr	r1, [r4, #4]
 800508e:	f7fb f857 	bl	8000140 <__udivsi3>
 8005092:	0403      	lsls	r3, r0, #16
 8005094:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8005096:	2000      	movs	r0, #0
        break;
 8005098:	e78e      	b.n	8004fb8 <UART_SetConfig+0x280>
        ret = HAL_ERROR;
 800509a:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800509c:	2300      	movs	r3, #0
 800509e:	e78b      	b.n	8004fb8 <UART_SetConfig+0x280>
        ret = HAL_ERROR;
 80050a0:	2001      	movs	r0, #1
 80050a2:	e791      	b.n	8004fc8 <UART_SetConfig+0x290>
 80050a4:	2000      	movs	r0, #0
 80050a6:	e78f      	b.n	8004fc8 <UART_SetConfig+0x290>
        ret = HAL_ERROR;
 80050a8:	2001      	movs	r0, #1
 80050aa:	e78d      	b.n	8004fc8 <UART_SetConfig+0x290>
 80050ac:	2001      	movs	r0, #1
 80050ae:	e78b      	b.n	8004fc8 <UART_SetConfig+0x290>
          ret = HAL_ERROR;
 80050b0:	2001      	movs	r0, #1
 80050b2:	e789      	b.n	8004fc8 <UART_SetConfig+0x290>
      ret = HAL_ERROR;
 80050b4:	2001      	movs	r0, #1
 80050b6:	e787      	b.n	8004fc8 <UART_SetConfig+0x290>
      ret = HAL_ERROR;
 80050b8:	2001      	movs	r0, #1
 80050ba:	e785      	b.n	8004fc8 <UART_SetConfig+0x290>

080050bc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80050be:	07db      	lsls	r3, r3, #31
 80050c0:	d506      	bpl.n	80050d0 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050c2:	6802      	ldr	r2, [r0, #0]
 80050c4:	6853      	ldr	r3, [r2, #4]
 80050c6:	492c      	ldr	r1, [pc, #176]	; (8005178 <UART_AdvFeatureConfig+0xbc>)
 80050c8:	400b      	ands	r3, r1
 80050ca:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80050cc:	430b      	orrs	r3, r1
 80050ce:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80050d2:	079b      	lsls	r3, r3, #30
 80050d4:	d506      	bpl.n	80050e4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050d6:	6802      	ldr	r2, [r0, #0]
 80050d8:	6853      	ldr	r3, [r2, #4]
 80050da:	4928      	ldr	r1, [pc, #160]	; (800517c <UART_AdvFeatureConfig+0xc0>)
 80050dc:	400b      	ands	r3, r1
 80050de:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80050e0:	430b      	orrs	r3, r1
 80050e2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80050e6:	075b      	lsls	r3, r3, #29
 80050e8:	d506      	bpl.n	80050f8 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050ea:	6802      	ldr	r2, [r0, #0]
 80050ec:	6853      	ldr	r3, [r2, #4]
 80050ee:	4924      	ldr	r1, [pc, #144]	; (8005180 <UART_AdvFeatureConfig+0xc4>)
 80050f0:	400b      	ands	r3, r1
 80050f2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80050f4:	430b      	orrs	r3, r1
 80050f6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80050fa:	071b      	lsls	r3, r3, #28
 80050fc:	d506      	bpl.n	800510c <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050fe:	6802      	ldr	r2, [r0, #0]
 8005100:	6853      	ldr	r3, [r2, #4]
 8005102:	4920      	ldr	r1, [pc, #128]	; (8005184 <UART_AdvFeatureConfig+0xc8>)
 8005104:	400b      	ands	r3, r1
 8005106:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005108:	430b      	orrs	r3, r1
 800510a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800510c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800510e:	06db      	lsls	r3, r3, #27
 8005110:	d506      	bpl.n	8005120 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005112:	6802      	ldr	r2, [r0, #0]
 8005114:	6893      	ldr	r3, [r2, #8]
 8005116:	491c      	ldr	r1, [pc, #112]	; (8005188 <UART_AdvFeatureConfig+0xcc>)
 8005118:	400b      	ands	r3, r1
 800511a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800511c:	430b      	orrs	r3, r1
 800511e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005120:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005122:	069b      	lsls	r3, r3, #26
 8005124:	d506      	bpl.n	8005134 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005126:	6802      	ldr	r2, [r0, #0]
 8005128:	6893      	ldr	r3, [r2, #8]
 800512a:	4918      	ldr	r1, [pc, #96]	; (800518c <UART_AdvFeatureConfig+0xd0>)
 800512c:	400b      	ands	r3, r1
 800512e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005130:	430b      	orrs	r3, r1
 8005132:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005134:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005136:	065b      	lsls	r3, r3, #25
 8005138:	d50b      	bpl.n	8005152 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800513a:	6802      	ldr	r2, [r0, #0]
 800513c:	6853      	ldr	r3, [r2, #4]
 800513e:	4914      	ldr	r1, [pc, #80]	; (8005190 <UART_AdvFeatureConfig+0xd4>)
 8005140:	400b      	ands	r3, r1
 8005142:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005144:	430b      	orrs	r3, r1
 8005146:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005148:	2380      	movs	r3, #128	; 0x80
 800514a:	035b      	lsls	r3, r3, #13
 800514c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800514e:	429a      	cmp	r2, r3
 8005150:	d00a      	beq.n	8005168 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005152:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005154:	061b      	lsls	r3, r3, #24
 8005156:	d506      	bpl.n	8005166 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005158:	6802      	ldr	r2, [r0, #0]
 800515a:	6853      	ldr	r3, [r2, #4]
 800515c:	490d      	ldr	r1, [pc, #52]	; (8005194 <UART_AdvFeatureConfig+0xd8>)
 800515e:	400b      	ands	r3, r1
 8005160:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005162:	430b      	orrs	r3, r1
 8005164:	6053      	str	r3, [r2, #4]
}
 8005166:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005168:	6802      	ldr	r2, [r0, #0]
 800516a:	6853      	ldr	r3, [r2, #4]
 800516c:	490a      	ldr	r1, [pc, #40]	; (8005198 <UART_AdvFeatureConfig+0xdc>)
 800516e:	400b      	ands	r3, r1
 8005170:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8005172:	430b      	orrs	r3, r1
 8005174:	6053      	str	r3, [r2, #4]
 8005176:	e7ec      	b.n	8005152 <UART_AdvFeatureConfig+0x96>
 8005178:	fffdffff 	.word	0xfffdffff
 800517c:	fffeffff 	.word	0xfffeffff
 8005180:	fffbffff 	.word	0xfffbffff
 8005184:	ffff7fff 	.word	0xffff7fff
 8005188:	ffffefff 	.word	0xffffefff
 800518c:	ffffdfff 	.word	0xffffdfff
 8005190:	ffefffff 	.word	0xffefffff
 8005194:	fff7ffff 	.word	0xfff7ffff
 8005198:	ff9fffff 	.word	0xff9fffff

0800519c <UART_WaitOnFlagUntilTimeout>:
{
 800519c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800519e:	46c6      	mov	lr, r8
 80051a0:	b500      	push	{lr}
 80051a2:	0006      	movs	r6, r0
 80051a4:	000c      	movs	r4, r1
 80051a6:	0017      	movs	r7, r2
 80051a8:	4698      	mov	r8, r3
 80051aa:	9d06      	ldr	r5, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ac:	6833      	ldr	r3, [r6, #0]
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	4023      	ands	r3, r4
 80051b2:	1b1b      	subs	r3, r3, r4
 80051b4:	425a      	negs	r2, r3
 80051b6:	4153      	adcs	r3, r2
 80051b8:	42bb      	cmp	r3, r7
 80051ba:	d11c      	bne.n	80051f6 <UART_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80051bc:	1c6b      	adds	r3, r5, #1
 80051be:	d0f5      	beq.n	80051ac <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c0:	f7fd fdba 	bl	8002d38 <HAL_GetTick>
 80051c4:	4643      	mov	r3, r8
 80051c6:	1ac0      	subs	r0, r0, r3
 80051c8:	42a8      	cmp	r0, r5
 80051ca:	d801      	bhi.n	80051d0 <UART_WaitOnFlagUntilTimeout+0x34>
 80051cc:	2d00      	cmp	r5, #0
 80051ce:	d1ed      	bne.n	80051ac <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051d0:	6832      	ldr	r2, [r6, #0]
 80051d2:	6813      	ldr	r3, [r2, #0]
 80051d4:	490a      	ldr	r1, [pc, #40]	; (8005200 <UART_WaitOnFlagUntilTimeout+0x64>)
 80051d6:	400b      	ands	r3, r1
 80051d8:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051da:	6832      	ldr	r2, [r6, #0]
 80051dc:	6893      	ldr	r3, [r2, #8]
 80051de:	31a3      	adds	r1, #163	; 0xa3
 80051e0:	31ff      	adds	r1, #255	; 0xff
 80051e2:	438b      	bics	r3, r1
 80051e4:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 80051e6:	2320      	movs	r3, #32
 80051e8:	6773      	str	r3, [r6, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80051ea:	67b3      	str	r3, [r6, #120]	; 0x78
        __HAL_UNLOCK(huart);
 80051ec:	3350      	adds	r3, #80	; 0x50
 80051ee:	2200      	movs	r2, #0
 80051f0:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 80051f2:	2003      	movs	r0, #3
 80051f4:	e000      	b.n	80051f8 <UART_WaitOnFlagUntilTimeout+0x5c>
  return HAL_OK;
 80051f6:	2000      	movs	r0, #0
}
 80051f8:	bc04      	pop	{r2}
 80051fa:	4690      	mov	r8, r2
 80051fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	fffffe5f 	.word	0xfffffe5f

08005204 <UART_CheckIdleState>:
{
 8005204:	b530      	push	{r4, r5, lr}
 8005206:	b083      	sub	sp, #12
 8005208:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800520a:	2300      	movs	r3, #0
 800520c:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800520e:	f7fd fd93 	bl	8002d38 <HAL_GetTick>
 8005212:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	071b      	lsls	r3, r3, #28
 800521a:	d40c      	bmi.n	8005236 <UART_CheckIdleState+0x32>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	075b      	lsls	r3, r3, #29
 8005222:	d415      	bmi.n	8005250 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 8005224:	2320      	movs	r3, #32
 8005226:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005228:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800522a:	3350      	adds	r3, #80	; 0x50
 800522c:	2200      	movs	r2, #0
 800522e:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8005230:	2000      	movs	r0, #0
}
 8005232:	b003      	add	sp, #12
 8005234:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005236:	2180      	movs	r1, #128	; 0x80
 8005238:	4b0c      	ldr	r3, [pc, #48]	; (800526c <UART_CheckIdleState+0x68>)
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	0003      	movs	r3, r0
 800523e:	2200      	movs	r2, #0
 8005240:	0389      	lsls	r1, r1, #14
 8005242:	0020      	movs	r0, r4
 8005244:	f7ff ffaa 	bl	800519c <UART_WaitOnFlagUntilTimeout>
 8005248:	2800      	cmp	r0, #0
 800524a:	d0e7      	beq.n	800521c <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800524c:	2003      	movs	r0, #3
 800524e:	e7f0      	b.n	8005232 <UART_CheckIdleState+0x2e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005250:	2180      	movs	r1, #128	; 0x80
 8005252:	4b06      	ldr	r3, [pc, #24]	; (800526c <UART_CheckIdleState+0x68>)
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	002b      	movs	r3, r5
 8005258:	2200      	movs	r2, #0
 800525a:	03c9      	lsls	r1, r1, #15
 800525c:	0020      	movs	r0, r4
 800525e:	f7ff ff9d 	bl	800519c <UART_WaitOnFlagUntilTimeout>
 8005262:	2800      	cmp	r0, #0
 8005264:	d0de      	beq.n	8005224 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 8005266:	2003      	movs	r0, #3
 8005268:	e7e3      	b.n	8005232 <UART_CheckIdleState+0x2e>
 800526a:	46c0      	nop			; (mov r8, r8)
 800526c:	01ffffff 	.word	0x01ffffff

08005270 <HAL_UART_Init>:
{
 8005270:	b510      	push	{r4, lr}
 8005272:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8005274:	d02e      	beq.n	80052d4 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005276:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8005278:	2b00      	cmp	r3, #0
 800527a:	d021      	beq.n	80052c0 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800527c:	2324      	movs	r3, #36	; 0x24
 800527e:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8005280:	6822      	ldr	r2, [r4, #0]
 8005282:	6813      	ldr	r3, [r2, #0]
 8005284:	2101      	movs	r1, #1
 8005286:	438b      	bics	r3, r1
 8005288:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800528a:	0020      	movs	r0, r4
 800528c:	f7ff fd54 	bl	8004d38 <UART_SetConfig>
 8005290:	2801      	cmp	r0, #1
 8005292:	d014      	beq.n	80052be <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005294:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005296:	2b00      	cmp	r3, #0
 8005298:	d118      	bne.n	80052cc <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800529a:	6822      	ldr	r2, [r4, #0]
 800529c:	6853      	ldr	r3, [r2, #4]
 800529e:	490e      	ldr	r1, [pc, #56]	; (80052d8 <HAL_UART_Init+0x68>)
 80052a0:	400b      	ands	r3, r1
 80052a2:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052a4:	6822      	ldr	r2, [r4, #0]
 80052a6:	6893      	ldr	r3, [r2, #8]
 80052a8:	212a      	movs	r1, #42	; 0x2a
 80052aa:	438b      	bics	r3, r1
 80052ac:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80052ae:	6822      	ldr	r2, [r4, #0]
 80052b0:	6813      	ldr	r3, [r2, #0]
 80052b2:	3929      	subs	r1, #41	; 0x29
 80052b4:	430b      	orrs	r3, r1
 80052b6:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80052b8:	0020      	movs	r0, r4
 80052ba:	f7ff ffa3 	bl	8005204 <UART_CheckIdleState>
}
 80052be:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80052c0:	3370      	adds	r3, #112	; 0x70
 80052c2:	2200      	movs	r2, #0
 80052c4:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80052c6:	f003 fb29 	bl	800891c <HAL_UART_MspInit>
 80052ca:	e7d7      	b.n	800527c <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80052cc:	0020      	movs	r0, r4
 80052ce:	f7ff fef5 	bl	80050bc <UART_AdvFeatureConfig>
 80052d2:	e7e2      	b.n	800529a <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80052d4:	2001      	movs	r0, #1
 80052d6:	e7f2      	b.n	80052be <HAL_UART_Init+0x4e>
 80052d8:	ffffb7ff 	.word	0xffffb7ff

080052dc <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80052dc:	4770      	bx	lr

080052de <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 80052de:	2884      	cmp	r0, #132	; 0x84
 80052e0:	d001      	beq.n	80052e6 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 80052e2:	3003      	adds	r0, #3
  }
  
  return fpriority;
}
 80052e4:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80052e6:	2000      	movs	r0, #0
  return fpriority;
 80052e8:	e7fc      	b.n	80052e4 <makeFreeRtosPriority+0x6>

080052ea <inHandlerMode>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052ea:	f3ef 8005 	mrs	r0, IPSR


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
 80052ee:	1e43      	subs	r3, r0, #1
 80052f0:	4198      	sbcs	r0, r3
}
 80052f2:	4770      	bx	lr

080052f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80052f4:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 80052f6:	f000 fe1f 	bl	8005f38 <vTaskStartScheduler>
  
  return osOK;
}
 80052fa:	2000      	movs	r0, #0
 80052fc:	bd10      	pop	{r4, pc}

080052fe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80052fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005300:	46ce      	mov	lr, r9
 8005302:	b500      	push	{lr}
 8005304:	b088      	sub	sp, #32
 8005306:	0004      	movs	r4, r0
 8005308:	9105      	str	r1, [sp, #20]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800530a:	6945      	ldr	r5, [r0, #20]
 800530c:	2d00      	cmp	r5, #0
 800530e:	d014      	beq.n	800533a <osThreadCreate+0x3c>
 8005310:	6987      	ldr	r7, [r0, #24]
 8005312:	2f00      	cmp	r7, #0
 8005314:	d011      	beq.n	800533a <osThreadCreate+0x3c>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005316:	6846      	ldr	r6, [r0, #4]
 8005318:	6802      	ldr	r2, [r0, #0]
 800531a:	4691      	mov	r9, r2
 800531c:	2208      	movs	r2, #8
 800531e:	5e80      	ldrsh	r0, [r0, r2]
 8005320:	f7ff ffdd 	bl	80052de <makeFreeRtosPriority>
 8005324:	6922      	ldr	r2, [r4, #16]
 8005326:	9702      	str	r7, [sp, #8]
 8005328:	9501      	str	r5, [sp, #4]
 800532a:	9000      	str	r0, [sp, #0]
 800532c:	9b05      	ldr	r3, [sp, #20]
 800532e:	4649      	mov	r1, r9
 8005330:	0030      	movs	r0, r6
 8005332:	f000 fda9 	bl	8005e88 <xTaskCreateStatic>
 8005336:	9007      	str	r0, [sp, #28]
 8005338:	e011      	b.n	800535e <osThreadCreate+0x60>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800533a:	6867      	ldr	r7, [r4, #4]
 800533c:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800533e:	6925      	ldr	r5, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005340:	2308      	movs	r3, #8
 8005342:	5ee0      	ldrsh	r0, [r4, r3]
 8005344:	f7ff ffcb 	bl	80052de <makeFreeRtosPriority>
 8005348:	b2aa      	uxth	r2, r5
 800534a:	ab07      	add	r3, sp, #28
 800534c:	9301      	str	r3, [sp, #4]
 800534e:	9000      	str	r0, [sp, #0]
 8005350:	9b05      	ldr	r3, [sp, #20]
 8005352:	0031      	movs	r1, r6
 8005354:	0038      	movs	r0, r7
 8005356:	f000 fdbd 	bl	8005ed4 <xTaskCreate>
 800535a:	2801      	cmp	r0, #1
 800535c:	d104      	bne.n	8005368 <osThreadCreate+0x6a>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800535e:	9807      	ldr	r0, [sp, #28]
}
 8005360:	b008      	add	sp, #32
 8005362:	bc04      	pop	{r2}
 8005364:	4691      	mov	r9, r2
 8005366:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return NULL;
 8005368:	2000      	movs	r0, #0
 800536a:	e7f9      	b.n	8005360 <osThreadCreate+0x62>

0800536c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800536c:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800536e:	2800      	cmp	r0, #0
 8005370:	d100      	bne.n	8005374 <osDelay+0x8>
 8005372:	3001      	adds	r0, #1
 8005374:	f000 ff18 	bl	80061a8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005378:	2000      	movs	r0, #0
 800537a:	bd10      	pop	{r4, pc}

0800537c <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800537c:	b530      	push	{r4, r5, lr}
 800537e:	b085      	sub	sp, #20
 8005380:	0004      	movs	r4, r0
 8005382:	000d      	movs	r5, r1
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8005384:	2300      	movs	r3, #0
 8005386:	9303      	str	r3, [sp, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8005388:	9302      	str	r3, [sp, #8]
  
  if (inHandlerMode())
 800538a:	f7ff ffae 	bl	80052ea <inHandlerMode>
 800538e:	2800      	cmp	r0, #0
 8005390:	d011      	beq.n	80053b6 <osSignalSet+0x3a>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8005392:	ab03      	add	r3, sp, #12
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	ab02      	add	r3, sp, #8
 8005398:	2201      	movs	r2, #1
 800539a:	0029      	movs	r1, r5
 800539c:	0020      	movs	r0, r4
 800539e:	f001 f8e7 	bl	8006570 <xTaskGenericNotifyFromISR>
 80053a2:	2801      	cmp	r0, #1
 80053a4:	d112      	bne.n	80053cc <osSignalSet+0x50>
      return 0x80000000;
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80053a6:	9b03      	ldr	r3, [sp, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00c      	beq.n	80053c6 <osSignalSet+0x4a>
 80053ac:	4b0a      	ldr	r3, [pc, #40]	; (80053d8 <osSignalSet+0x5c>)
 80053ae:	2280      	movs	r2, #128	; 0x80
 80053b0:	0552      	lsls	r2, r2, #21
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	e007      	b.n	80053c6 <osSignalSet+0x4a>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80053b6:	ab02      	add	r3, sp, #8
 80053b8:	2201      	movs	r2, #1
 80053ba:	0029      	movs	r1, r5
 80053bc:	0020      	movs	r0, r4
 80053be:	f001 f879 	bl	80064b4 <xTaskGenericNotify>
 80053c2:	2801      	cmp	r0, #1
 80053c4:	d105      	bne.n	80053d2 <osSignalSet+0x56>
    return 0x80000000;
  
  return ulPreviousNotificationValue;
 80053c6:	9802      	ldr	r0, [sp, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80053c8:	b005      	add	sp, #20
 80053ca:	bd30      	pop	{r4, r5, pc}
      return 0x80000000;
 80053cc:	2080      	movs	r0, #128	; 0x80
 80053ce:	0600      	lsls	r0, r0, #24
 80053d0:	e7fa      	b.n	80053c8 <osSignalSet+0x4c>
    return 0x80000000;
 80053d2:	2080      	movs	r0, #128	; 0x80
 80053d4:	0600      	lsls	r0, r0, #24
 80053d6:	e7f7      	b.n	80053c8 <osSignalSet+0x4c>
 80053d8:	e000ed04 	.word	0xe000ed04

080053dc <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80053dc:	b570      	push	{r4, r5, r6, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	0004      	movs	r4, r0
 80053e2:	000e      	movs	r6, r1
 80053e4:	0015      	movs	r5, r2

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80053e6:	2300      	movs	r3, #0
 80053e8:	9302      	str	r3, [sp, #8]
  ticks = 0;
  if (millisec == osWaitForever) {
 80053ea:	1c53      	adds	r3, r2, #1
 80053ec:	d00c      	beq.n	8005408 <osSignalWait+0x2c>
    if (ticks == 0) {
      ticks = 1;
    }
  }  
  
  if (inHandlerMode())
 80053ee:	f7ff ff7c 	bl	80052ea <inHandlerMode>
 80053f2:	2800      	cmp	r0, #0
 80053f4:	d00b      	beq.n	800540e <osSignalWait+0x32>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80053f6:	2382      	movs	r3, #130	; 0x82
 80053f8:	9301      	str	r3, [sp, #4]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80053fa:	ab01      	add	r3, sp, #4
 80053fc:	0022      	movs	r2, r4
 80053fe:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005400:	c223      	stmia	r2!, {r0, r1, r5}
}
 8005402:	0020      	movs	r0, r4
 8005404:	b004      	add	sp, #16
 8005406:	bd70      	pop	{r4, r5, r6, pc}
    ticks = portMAX_DELAY;
 8005408:	2501      	movs	r5, #1
 800540a:	426d      	negs	r5, r5
 800540c:	e7ef      	b.n	80053ee <osSignalWait+0x12>
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800540e:	002b      	movs	r3, r5
 8005410:	aa02      	add	r2, sp, #8
 8005412:	0031      	movs	r1, r6
 8005414:	2000      	movs	r0, #0
 8005416:	f001 f80b 	bl	8006430 <xTaskNotifyWait>
 800541a:	2801      	cmp	r0, #1
 800541c:	d007      	beq.n	800542e <osSignalWait+0x52>
      if(ticks == 0)  ret.status = osOK;
 800541e:	2d00      	cmp	r5, #0
 8005420:	d102      	bne.n	8005428 <osSignalWait+0x4c>
 8005422:	2300      	movs	r3, #0
 8005424:	9301      	str	r3, [sp, #4]
 8005426:	e7e8      	b.n	80053fa <osSignalWait+0x1e>
      else  ret.status = osEventTimeout;
 8005428:	2340      	movs	r3, #64	; 0x40
 800542a:	9301      	str	r3, [sp, #4]
 800542c:	e7e5      	b.n	80053fa <osSignalWait+0x1e>
    else if(ret.value.signals < 0)
 800542e:	9b02      	ldr	r3, [sp, #8]
 8005430:	2b00      	cmp	r3, #0
 8005432:	db02      	blt.n	800543a <osSignalWait+0x5e>
    else  ret.status =  osEventSignal;
 8005434:	2308      	movs	r3, #8
 8005436:	9301      	str	r3, [sp, #4]
 8005438:	e7df      	b.n	80053fa <osSignalWait+0x1e>
      ret.status =  osErrorValue;     
 800543a:	2386      	movs	r3, #134	; 0x86
 800543c:	9301      	str	r3, [sp, #4]
 800543e:	e7dc      	b.n	80053fa <osSignalWait+0x1e>

08005440 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005440:	b510      	push	{r4, lr}
 8005442:	b082      	sub	sp, #8
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005444:	6882      	ldr	r2, [r0, #8]
 8005446:	2a00      	cmp	r2, #0
 8005448:	d002      	beq.n	8005450 <osMessageCreate+0x10>
 800544a:	68c3      	ldr	r3, [r0, #12]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d106      	bne.n	800545e <osMessageCreate+0x1e>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005450:	6841      	ldr	r1, [r0, #4]
 8005452:	6800      	ldr	r0, [r0, #0]
 8005454:	2200      	movs	r2, #0
 8005456:	f000 f9e2 	bl	800581e <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800545a:	b002      	add	sp, #8
 800545c:	bd10      	pop	{r4, pc}
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800545e:	6841      	ldr	r1, [r0, #4]
 8005460:	6800      	ldr	r0, [r0, #0]
 8005462:	2400      	movs	r4, #0
 8005464:	9400      	str	r4, [sp, #0]
 8005466:	f000 f9b1 	bl	80057cc <xQueueGenericCreateStatic>
 800546a:	e7f6      	b.n	800545a <osMessageCreate+0x1a>

0800546c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800546c:	b530      	push	{r4, r5, lr}
 800546e:	b085      	sub	sp, #20
 8005470:	0005      	movs	r5, r0
 8005472:	9101      	str	r1, [sp, #4]
 8005474:	0014      	movs	r4, r2
  portBASE_TYPE taskWoken = pdFALSE;
 8005476:	2300      	movs	r3, #0
 8005478:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 800547a:	2a00      	cmp	r2, #0
 800547c:	d100      	bne.n	8005480 <osMessagePut+0x14>
    ticks = 1;
 800547e:	3401      	adds	r4, #1
  }
  
  if (inHandlerMode()) {
 8005480:	f7ff ff33 	bl	80052ea <inHandlerMode>
 8005484:	2800      	cmp	r0, #0
 8005486:	d010      	beq.n	80054aa <osMessagePut+0x3e>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005488:	2300      	movs	r3, #0
 800548a:	aa03      	add	r2, sp, #12
 800548c:	a901      	add	r1, sp, #4
 800548e:	0028      	movs	r0, r5
 8005490:	f000 fa7c 	bl	800598c <xQueueGenericSendFromISR>
 8005494:	2801      	cmp	r0, #1
 8005496:	d115      	bne.n	80054c4 <osMessagePut+0x58>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005498:	9b03      	ldr	r3, [sp, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d014      	beq.n	80054c8 <osMessagePut+0x5c>
 800549e:	4b0b      	ldr	r3, [pc, #44]	; (80054cc <osMessagePut+0x60>)
 80054a0:	2280      	movs	r2, #128	; 0x80
 80054a2:	0552      	lsls	r2, r2, #21
 80054a4:	601a      	str	r2, [r3, #0]
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 80054a6:	2000      	movs	r0, #0
 80054a8:	e008      	b.n	80054bc <osMessagePut+0x50>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80054aa:	2300      	movs	r3, #0
 80054ac:	0022      	movs	r2, r4
 80054ae:	a901      	add	r1, sp, #4
 80054b0:	0028      	movs	r0, r5
 80054b2:	f000 f9d6 	bl	8005862 <xQueueGenericSend>
 80054b6:	2801      	cmp	r0, #1
 80054b8:	d102      	bne.n	80054c0 <osMessagePut+0x54>
  return osOK;
 80054ba:	2000      	movs	r0, #0
}
 80054bc:	b005      	add	sp, #20
 80054be:	bd30      	pop	{r4, r5, pc}
      return osErrorOS;
 80054c0:	20ff      	movs	r0, #255	; 0xff
 80054c2:	e7fb      	b.n	80054bc <osMessagePut+0x50>
      return osErrorOS;
 80054c4:	20ff      	movs	r0, #255	; 0xff
 80054c6:	e7f9      	b.n	80054bc <osMessagePut+0x50>
  return osOK;
 80054c8:	2000      	movs	r0, #0
 80054ca:	e7f7      	b.n	80054bc <osMessagePut+0x50>
 80054cc:	e000ed04 	.word	0xe000ed04

080054d0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80054d0:	b570      	push	{r4, r5, r6, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	0004      	movs	r4, r0
 80054d6:	000d      	movs	r5, r1
 80054d8:	0016      	movs	r6, r2
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80054da:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 80054dc:	2300      	movs	r3, #0
 80054de:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 80054e0:	2900      	cmp	r1, #0
 80054e2:	d018      	beq.n	8005516 <osMessageGet+0x46>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 80054e4:	2300      	movs	r3, #0
 80054e6:	9303      	str	r3, [sp, #12]
  
  ticks = 0;
  if (millisec == osWaitForever) {
 80054e8:	1c53      	adds	r3, r2, #1
 80054ea:	d01b      	beq.n	8005524 <osMessageGet+0x54>
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80054ec:	f7ff fefd 	bl	80052ea <inHandlerMode>
 80054f0:	2800      	cmp	r0, #0
 80054f2:	d01d      	beq.n	8005530 <osMessageGet+0x60>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80054f4:	aa03      	add	r2, sp, #12
 80054f6:	a901      	add	r1, sp, #4
 80054f8:	0028      	movs	r0, r5
 80054fa:	f000 fb21 	bl	8005b40 <xQueueReceiveFromISR>
 80054fe:	2801      	cmp	r0, #1
 8005500:	d013      	beq.n	800552a <osMessageGet+0x5a>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8005502:	2300      	movs	r3, #0
 8005504:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005506:	9b03      	ldr	r3, [sp, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d01c      	beq.n	8005546 <osMessageGet+0x76>
 800550c:	4b14      	ldr	r3, [pc, #80]	; (8005560 <osMessageGet+0x90>)
 800550e:	2280      	movs	r2, #128	; 0x80
 8005510:	0552      	lsls	r2, r2, #21
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	e017      	b.n	8005546 <osMessageGet+0x76>
    event.status = osErrorParameter;
 8005516:	466b      	mov	r3, sp
 8005518:	2280      	movs	r2, #128	; 0x80
 800551a:	9200      	str	r2, [sp, #0]
    return event;
 800551c:	0002      	movs	r2, r0
 800551e:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005520:	c223      	stmia	r2!, {r0, r1, r5}
 8005522:	e014      	b.n	800554e <osMessageGet+0x7e>
    ticks = portMAX_DELAY;
 8005524:	2601      	movs	r6, #1
 8005526:	4276      	negs	r6, r6
 8005528:	e7e0      	b.n	80054ec <osMessageGet+0x1c>
      event.status = osEventMessage;
 800552a:	2310      	movs	r3, #16
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	e7ea      	b.n	8005506 <osMessageGet+0x36>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005530:	0032      	movs	r2, r6
 8005532:	a901      	add	r1, sp, #4
 8005534:	0028      	movs	r0, r5
 8005536:	f000 fa76 	bl	8005a26 <xQueueReceive>
 800553a:	2801      	cmp	r0, #1
 800553c:	d00a      	beq.n	8005554 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800553e:	2e00      	cmp	r6, #0
 8005540:	d10b      	bne.n	800555a <osMessageGet+0x8a>
 8005542:	2300      	movs	r3, #0
 8005544:	9300      	str	r3, [sp, #0]
    }
  }
  
  return event;
 8005546:	466b      	mov	r3, sp
 8005548:	0022      	movs	r2, r4
 800554a:	cb23      	ldmia	r3!, {r0, r1, r5}
 800554c:	c223      	stmia	r2!, {r0, r1, r5}
}
 800554e:	0020      	movs	r0, r4
 8005550:	b004      	add	sp, #16
 8005552:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 8005554:	2310      	movs	r3, #16
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	e7f5      	b.n	8005546 <osMessageGet+0x76>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800555a:	2340      	movs	r3, #64	; 0x40
 800555c:	e7f2      	b.n	8005544 <osMessageGet+0x74>
 800555e:	46c0      	nop			; (mov r8, r8)
 8005560:	e000ed04 	.word	0xe000ed04

08005564 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005564:	0003      	movs	r3, r0
 8005566:	3308      	adds	r3, #8
 8005568:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800556a:	2201      	movs	r2, #1
 800556c:	4252      	negs	r2, r2
 800556e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005570:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005572:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005574:	2300      	movs	r3, #0
 8005576:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005578:	4770      	bx	lr

0800557a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800557a:	2300      	movs	r3, #0
 800557c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800557e:	4770      	bx	lr

08005580 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005580:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005582:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005588:	689a      	ldr	r2, [r3, #8]
 800558a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800558c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800558e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005590:	6803      	ldr	r3, [r0, #0]
 8005592:	3301      	adds	r3, #1
 8005594:	6003      	str	r3, [r0, #0]
}
 8005596:	4770      	bx	lr

08005598 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005598:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800559a:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800559c:	1c63      	adds	r3, r4, #1
 800559e:	d002      	beq.n	80055a6 <vListInsert+0xe>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055a0:	0002      	movs	r2, r0
 80055a2:	3208      	adds	r2, #8
 80055a4:	e002      	b.n	80055ac <vListInsert+0x14>
		pxIterator = pxList->xListEnd.pxPrevious;
 80055a6:	6902      	ldr	r2, [r0, #16]
 80055a8:	e004      	b.n	80055b4 <vListInsert+0x1c>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055aa:	001a      	movs	r2, r3
 80055ac:	6853      	ldr	r3, [r2, #4]
 80055ae:	681d      	ldr	r5, [r3, #0]
 80055b0:	42a5      	cmp	r5, r4
 80055b2:	d9fa      	bls.n	80055aa <vListInsert+0x12>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80055b4:	6853      	ldr	r3, [r2, #4]
 80055b6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80055b8:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80055ba:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80055bc:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80055be:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80055c0:	6803      	ldr	r3, [r0, #0]
 80055c2:	3301      	adds	r3, #1
 80055c4:	6003      	str	r3, [r0, #0]
}
 80055c6:	bd30      	pop	{r4, r5, pc}

080055c8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80055c8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80055ca:	6842      	ldr	r2, [r0, #4]
 80055cc:	6881      	ldr	r1, [r0, #8]
 80055ce:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80055d0:	6882      	ldr	r2, [r0, #8]
 80055d2:	6841      	ldr	r1, [r0, #4]
 80055d4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	4282      	cmp	r2, r0
 80055da:	d006      	beq.n	80055ea <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80055dc:	2200      	movs	r2, #0
 80055de:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	3a01      	subs	r2, #1
 80055e4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80055e6:	6818      	ldr	r0, [r3, #0]
}
 80055e8:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80055ea:	6882      	ldr	r2, [r0, #8]
 80055ec:	605a      	str	r2, [r3, #4]
 80055ee:	e7f5      	b.n	80055dc <uxListRemove+0x14>

080055f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80055f0:	b510      	push	{r4, lr}
 80055f2:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055f4:	f001 f8bc 	bl	8006770 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80055f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80055fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d004      	beq.n	800560a <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8005600:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8005602:	f001 f8c1 	bl	8006788 <vPortExitCritical>

	return xReturn;
}
 8005606:	0020      	movs	r0, r4
 8005608:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800560a:	2401      	movs	r4, #1
 800560c:	e7f9      	b.n	8005602 <prvIsQueueFull+0x12>

0800560e <prvIsQueueEmpty>:
{
 800560e:	b510      	push	{r4, lr}
 8005610:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 8005612:	f001 f8ad 	bl	8006770 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005616:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005618:	2b00      	cmp	r3, #0
 800561a:	d004      	beq.n	8005626 <prvIsQueueEmpty+0x18>
			xReturn = pdFALSE;
 800561c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800561e:	f001 f8b3 	bl	8006788 <vPortExitCritical>
}
 8005622:	0020      	movs	r0, r4
 8005624:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8005626:	2401      	movs	r4, #1
 8005628:	e7f9      	b.n	800561e <prvIsQueueEmpty+0x10>

0800562a <prvCopyDataToQueue>:
{
 800562a:	b570      	push	{r4, r5, r6, lr}
 800562c:	0004      	movs	r4, r0
 800562e:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005630:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005632:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005634:	2a00      	cmp	r2, #0
 8005636:	d10c      	bne.n	8005652 <prvCopyDataToQueue+0x28>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005638:	6803      	ldr	r3, [r0, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <prvCopyDataToQueue+0x1c>
BaseType_t xReturn = pdFALSE;
 800563e:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005640:	3501      	adds	r5, #1
 8005642:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8005644:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005646:	6840      	ldr	r0, [r0, #4]
 8005648:	f000 feb8 	bl	80063bc <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800564c:	2300      	movs	r3, #0
 800564e:	6063      	str	r3, [r4, #4]
 8005650:	e7f6      	b.n	8005640 <prvCopyDataToQueue+0x16>
	else if( xPosition == queueSEND_TO_BACK )
 8005652:	2e00      	cmp	r6, #0
 8005654:	d10e      	bne.n	8005674 <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005656:	6880      	ldr	r0, [r0, #8]
 8005658:	f003 fb0a 	bl	8008c70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800565c:	68a3      	ldr	r3, [r4, #8]
 800565e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005660:	4694      	mov	ip, r2
 8005662:	4463      	add	r3, ip
 8005664:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005666:	6862      	ldr	r2, [r4, #4]
 8005668:	4293      	cmp	r3, r2
 800566a:	d31b      	bcc.n	80056a4 <prvCopyDataToQueue+0x7a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800566c:	6823      	ldr	r3, [r4, #0]
 800566e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8005670:	2000      	movs	r0, #0
 8005672:	e7e5      	b.n	8005640 <prvCopyDataToQueue+0x16>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005674:	68c0      	ldr	r0, [r0, #12]
 8005676:	f003 fafb 	bl	8008c70 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800567a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800567c:	425a      	negs	r2, r3
 800567e:	68e3      	ldr	r3, [r4, #12]
 8005680:	189b      	adds	r3, r3, r2
 8005682:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005684:	6821      	ldr	r1, [r4, #0]
 8005686:	428b      	cmp	r3, r1
 8005688:	d203      	bcs.n	8005692 <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800568a:	6863      	ldr	r3, [r4, #4]
 800568c:	469c      	mov	ip, r3
 800568e:	4462      	add	r2, ip
 8005690:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005692:	2e02      	cmp	r6, #2
 8005694:	d001      	beq.n	800569a <prvCopyDataToQueue+0x70>
BaseType_t xReturn = pdFALSE;
 8005696:	2000      	movs	r0, #0
 8005698:	e7d2      	b.n	8005640 <prvCopyDataToQueue+0x16>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800569a:	2d00      	cmp	r5, #0
 800569c:	d004      	beq.n	80056a8 <prvCopyDataToQueue+0x7e>
				--uxMessagesWaiting;
 800569e:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 80056a0:	2000      	movs	r0, #0
 80056a2:	e7cd      	b.n	8005640 <prvCopyDataToQueue+0x16>
 80056a4:	2000      	movs	r0, #0
 80056a6:	e7cb      	b.n	8005640 <prvCopyDataToQueue+0x16>
 80056a8:	2000      	movs	r0, #0
 80056aa:	e7c9      	b.n	8005640 <prvCopyDataToQueue+0x16>

080056ac <prvCopyDataFromQueue>:
{
 80056ac:	b510      	push	{r4, lr}
 80056ae:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80056b0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80056b2:	2a00      	cmp	r2, #0
 80056b4:	d00b      	beq.n	80056ce <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80056b6:	68c3      	ldr	r3, [r0, #12]
 80056b8:	189b      	adds	r3, r3, r2
 80056ba:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80056bc:	6841      	ldr	r1, [r0, #4]
 80056be:	428b      	cmp	r3, r1
 80056c0:	d301      	bcc.n	80056c6 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80056c2:	6803      	ldr	r3, [r0, #0]
 80056c4:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80056c6:	68c1      	ldr	r1, [r0, #12]
 80056c8:	0020      	movs	r0, r4
 80056ca:	f003 fad1 	bl	8008c70 <memcpy>
}
 80056ce:	bd10      	pop	{r4, pc}

080056d0 <prvUnlockQueue>:
{
 80056d0:	b570      	push	{r4, r5, r6, lr}
 80056d2:	0005      	movs	r5, r0
	taskENTER_CRITICAL();
 80056d4:	f001 f84c 	bl	8006770 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80056d8:	2345      	movs	r3, #69	; 0x45
 80056da:	5cec      	ldrb	r4, [r5, r3]
 80056dc:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056de:	e003      	b.n	80056e8 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 80056e0:	f000 fe54 	bl	800638c <vTaskMissedYield>
			--cTxLock;
 80056e4:	3c01      	subs	r4, #1
 80056e6:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056e8:	2c00      	cmp	r4, #0
 80056ea:	dd09      	ble.n	8005700 <prvUnlockQueue+0x30>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d006      	beq.n	8005700 <prvUnlockQueue+0x30>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056f2:	0028      	movs	r0, r5
 80056f4:	3024      	adds	r0, #36	; 0x24
 80056f6:	f000 fdc7 	bl	8006288 <xTaskRemoveFromEventList>
 80056fa:	2800      	cmp	r0, #0
 80056fc:	d0f2      	beq.n	80056e4 <prvUnlockQueue+0x14>
 80056fe:	e7ef      	b.n	80056e0 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8005700:	2345      	movs	r3, #69	; 0x45
 8005702:	22ff      	movs	r2, #255	; 0xff
 8005704:	54ea      	strb	r2, [r5, r3]
	taskEXIT_CRITICAL();
 8005706:	f001 f83f 	bl	8006788 <vPortExitCritical>
	taskENTER_CRITICAL();
 800570a:	f001 f831 	bl	8006770 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800570e:	2344      	movs	r3, #68	; 0x44
 8005710:	5cec      	ldrb	r4, [r5, r3]
 8005712:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005714:	e003      	b.n	800571e <prvUnlockQueue+0x4e>
					vTaskMissedYield();
 8005716:	f000 fe39 	bl	800638c <vTaskMissedYield>
				--cRxLock;
 800571a:	3c01      	subs	r4, #1
 800571c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800571e:	2c00      	cmp	r4, #0
 8005720:	dd09      	ble.n	8005736 <prvUnlockQueue+0x66>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005722:	692b      	ldr	r3, [r5, #16]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d006      	beq.n	8005736 <prvUnlockQueue+0x66>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005728:	0028      	movs	r0, r5
 800572a:	3010      	adds	r0, #16
 800572c:	f000 fdac 	bl	8006288 <xTaskRemoveFromEventList>
 8005730:	2800      	cmp	r0, #0
 8005732:	d0f2      	beq.n	800571a <prvUnlockQueue+0x4a>
 8005734:	e7ef      	b.n	8005716 <prvUnlockQueue+0x46>
		pxQueue->cRxLock = queueUNLOCKED;
 8005736:	2344      	movs	r3, #68	; 0x44
 8005738:	22ff      	movs	r2, #255	; 0xff
 800573a:	54ea      	strb	r2, [r5, r3]
	taskEXIT_CRITICAL();
 800573c:	f001 f824 	bl	8006788 <vPortExitCritical>
}
 8005740:	bd70      	pop	{r4, r5, r6, pc}

08005742 <xQueueGenericReset>:
{
 8005742:	b570      	push	{r4, r5, r6, lr}
 8005744:	0004      	movs	r4, r0
 8005746:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 8005748:	2800      	cmp	r0, #0
 800574a:	d101      	bne.n	8005750 <xQueueGenericReset+0xe>
 800574c:	b672      	cpsid	i
 800574e:	e7fe      	b.n	800574e <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 8005750:	f001 f80e 	bl	8006770 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005754:	6822      	ldr	r2, [r4, #0]
 8005756:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005758:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800575a:	0001      	movs	r1, r0
 800575c:	4359      	muls	r1, r3
 800575e:	1851      	adds	r1, r2, r1
 8005760:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005762:	2100      	movs	r1, #0
 8005764:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005766:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005768:	3b01      	subs	r3, #1
 800576a:	4343      	muls	r3, r0
 800576c:	18d3      	adds	r3, r2, r3
 800576e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005770:	23ff      	movs	r3, #255	; 0xff
 8005772:	2244      	movs	r2, #68	; 0x44
 8005774:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8005776:	3201      	adds	r2, #1
 8005778:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
 800577a:	2d00      	cmp	r5, #0
 800577c:	d10f      	bne.n	800579e <xQueueGenericReset+0x5c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800577e:	6923      	ldr	r3, [r4, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d103      	bne.n	800578c <xQueueGenericReset+0x4a>
	taskEXIT_CRITICAL();
 8005784:	f001 f800 	bl	8006788 <vPortExitCritical>
}
 8005788:	2001      	movs	r0, #1
 800578a:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800578c:	0020      	movs	r0, r4
 800578e:	3010      	adds	r0, #16
 8005790:	f000 fd7a 	bl	8006288 <xTaskRemoveFromEventList>
 8005794:	2800      	cmp	r0, #0
 8005796:	d0f5      	beq.n	8005784 <xQueueGenericReset+0x42>
					queueYIELD_IF_USING_PREEMPTION();
 8005798:	f000 ffde 	bl	8006758 <vPortYield>
 800579c:	e7f2      	b.n	8005784 <xQueueGenericReset+0x42>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800579e:	0020      	movs	r0, r4
 80057a0:	3010      	adds	r0, #16
 80057a2:	f7ff fedf 	bl	8005564 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80057a6:	0020      	movs	r0, r4
 80057a8:	3024      	adds	r0, #36	; 0x24
 80057aa:	f7ff fedb 	bl	8005564 <vListInitialise>
 80057ae:	e7e9      	b.n	8005784 <xQueueGenericReset+0x42>

080057b0 <prvInitialiseNewQueue>:
{
 80057b0:	b510      	push	{r4, lr}
 80057b2:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80057b4:	2900      	cmp	r1, #0
 80057b6:	d007      	beq.n	80057c8 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80057b8:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80057ba:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80057bc:	6419      	str	r1, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80057be:	2101      	movs	r1, #1
 80057c0:	0018      	movs	r0, r3
 80057c2:	f7ff ffbe 	bl	8005742 <xQueueGenericReset>
}
 80057c6:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80057c8:	601b      	str	r3, [r3, #0]
 80057ca:	e7f6      	b.n	80057ba <prvInitialiseNewQueue+0xa>

080057cc <xQueueGenericCreateStatic>:
	{
 80057cc:	b570      	push	{r4, r5, r6, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	001c      	movs	r4, r3
 80057d2:	ab08      	add	r3, sp, #32
 80057d4:	781b      	ldrb	r3, [r3, #0]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057d6:	2800      	cmp	r0, #0
 80057d8:	d101      	bne.n	80057de <xQueueGenericCreateStatic+0x12>
 80057da:	b672      	cpsid	i
 80057dc:	e7fe      	b.n	80057dc <xQueueGenericCreateStatic+0x10>
		configASSERT( pxStaticQueue != NULL );
 80057de:	2c00      	cmp	r4, #0
 80057e0:	d005      	beq.n	80057ee <xQueueGenericCreateStatic+0x22>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80057e2:	2a00      	cmp	r2, #0
 80057e4:	d005      	beq.n	80057f2 <xQueueGenericCreateStatic+0x26>
 80057e6:	2900      	cmp	r1, #0
 80057e8:	d103      	bne.n	80057f2 <xQueueGenericCreateStatic+0x26>
 80057ea:	b672      	cpsid	i
 80057ec:	e7fe      	b.n	80057ec <xQueueGenericCreateStatic+0x20>
		configASSERT( pxStaticQueue != NULL );
 80057ee:	b672      	cpsid	i
 80057f0:	e7fe      	b.n	80057f0 <xQueueGenericCreateStatic+0x24>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80057f2:	2a00      	cmp	r2, #0
 80057f4:	d103      	bne.n	80057fe <xQueueGenericCreateStatic+0x32>
 80057f6:	2900      	cmp	r1, #0
 80057f8:	d001      	beq.n	80057fe <xQueueGenericCreateStatic+0x32>
 80057fa:	b672      	cpsid	i
 80057fc:	e7fe      	b.n	80057fc <xQueueGenericCreateStatic+0x30>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80057fe:	2548      	movs	r5, #72	; 0x48
 8005800:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005802:	9d03      	ldr	r5, [sp, #12]
 8005804:	2d48      	cmp	r5, #72	; 0x48
 8005806:	d001      	beq.n	800580c <xQueueGenericCreateStatic+0x40>
 8005808:	b672      	cpsid	i
 800580a:	e7fe      	b.n	800580a <xQueueGenericCreateStatic+0x3e>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800580c:	2546      	movs	r5, #70	; 0x46
 800580e:	2601      	movs	r6, #1
 8005810:	5566      	strb	r6, [r4, r5]
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005812:	9400      	str	r4, [sp, #0]
 8005814:	f7ff ffcc 	bl	80057b0 <prvInitialiseNewQueue>
	}
 8005818:	0020      	movs	r0, r4
 800581a:	b004      	add	sp, #16
 800581c:	bd70      	pop	{r4, r5, r6, pc}

0800581e <xQueueGenericCreate>:
	{
 800581e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005820:	b083      	sub	sp, #12
 8005822:	0006      	movs	r6, r0
 8005824:	000f      	movs	r7, r1
 8005826:	0015      	movs	r5, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005828:	2800      	cmp	r0, #0
 800582a:	d101      	bne.n	8005830 <xQueueGenericCreate+0x12>
 800582c:	b672      	cpsid	i
 800582e:	e7fe      	b.n	800582e <xQueueGenericCreate+0x10>
		if( uxItemSize == ( UBaseType_t ) 0 )
 8005830:	2900      	cmp	r1, #0
 8005832:	d002      	beq.n	800583a <xQueueGenericCreate+0x1c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005834:	0008      	movs	r0, r1
 8005836:	4370      	muls	r0, r6
 8005838:	e000      	b.n	800583c <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) 0;
 800583a:	2000      	movs	r0, #0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800583c:	3048      	adds	r0, #72	; 0x48
 800583e:	f001 f84f 	bl	80068e0 <pvPortMalloc>
 8005842:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
 8005844:	d00a      	beq.n	800585c <xQueueGenericCreate+0x3e>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005846:	0002      	movs	r2, r0
 8005848:	3248      	adds	r2, #72	; 0x48
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800584a:	2346      	movs	r3, #70	; 0x46
 800584c:	2100      	movs	r1, #0
 800584e:	54c1      	strb	r1, [r0, r3]
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005850:	9000      	str	r0, [sp, #0]
 8005852:	002b      	movs	r3, r5
 8005854:	0039      	movs	r1, r7
 8005856:	0030      	movs	r0, r6
 8005858:	f7ff ffaa 	bl	80057b0 <prvInitialiseNewQueue>
	}
 800585c:	0020      	movs	r0, r4
 800585e:	b003      	add	sp, #12
 8005860:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005862 <xQueueGenericSend>:
{
 8005862:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005864:	b085      	sub	sp, #20
 8005866:	0004      	movs	r4, r0
 8005868:	000f      	movs	r7, r1
 800586a:	9201      	str	r2, [sp, #4]
 800586c:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800586e:	2800      	cmp	r0, #0
 8005870:	d006      	beq.n	8005880 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005872:	2900      	cmp	r1, #0
 8005874:	d106      	bne.n	8005884 <xQueueGenericSend+0x22>
 8005876:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <xQueueGenericSend+0x22>
 800587c:	b672      	cpsid	i
 800587e:	e7fe      	b.n	800587e <xQueueGenericSend+0x1c>
	configASSERT( pxQueue );
 8005880:	b672      	cpsid	i
 8005882:	e7fe      	b.n	8005882 <xQueueGenericSend+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005884:	2d02      	cmp	r5, #2
 8005886:	d104      	bne.n	8005892 <xQueueGenericSend+0x30>
 8005888:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800588a:	2b01      	cmp	r3, #1
 800588c:	d001      	beq.n	8005892 <xQueueGenericSend+0x30>
 800588e:	b672      	cpsid	i
 8005890:	e7fe      	b.n	8005890 <xQueueGenericSend+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005892:	f000 fd81 	bl	8006398 <xTaskGetSchedulerState>
 8005896:	2800      	cmp	r0, #0
 8005898:	d104      	bne.n	80058a4 <xQueueGenericSend+0x42>
 800589a:	9b01      	ldr	r3, [sp, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <xQueueGenericSend+0x46>
 80058a0:	b672      	cpsid	i
 80058a2:	e7fe      	b.n	80058a2 <xQueueGenericSend+0x40>
 80058a4:	2600      	movs	r6, #0
 80058a6:	e031      	b.n	800590c <xQueueGenericSend+0xaa>
 80058a8:	2600      	movs	r6, #0
 80058aa:	e02f      	b.n	800590c <xQueueGenericSend+0xaa>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058ac:	002a      	movs	r2, r5
 80058ae:	0039      	movs	r1, r7
 80058b0:	0020      	movs	r0, r4
 80058b2:	f7ff feba 	bl	800562a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d104      	bne.n	80058c6 <xQueueGenericSend+0x64>
					else if( xYieldRequired != pdFALSE )
 80058bc:	2800      	cmp	r0, #0
 80058be:	d00a      	beq.n	80058d6 <xQueueGenericSend+0x74>
						queueYIELD_IF_USING_PREEMPTION();
 80058c0:	f000 ff4a 	bl	8006758 <vPortYield>
 80058c4:	e007      	b.n	80058d6 <xQueueGenericSend+0x74>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058c6:	0020      	movs	r0, r4
 80058c8:	3024      	adds	r0, #36	; 0x24
 80058ca:	f000 fcdd 	bl	8006288 <xTaskRemoveFromEventList>
 80058ce:	2800      	cmp	r0, #0
 80058d0:	d001      	beq.n	80058d6 <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
 80058d2:	f000 ff41 	bl	8006758 <vPortYield>
				taskEXIT_CRITICAL();
 80058d6:	f000 ff57 	bl	8006788 <vPortExitCritical>
				return pdPASS;
 80058da:	2001      	movs	r0, #1
}
 80058dc:	b005      	add	sp, #20
 80058de:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 80058e0:	f000 ff52 	bl	8006788 <vPortExitCritical>
					return errQUEUE_FULL;
 80058e4:	2000      	movs	r0, #0
 80058e6:	e7f9      	b.n	80058dc <xQueueGenericSend+0x7a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058e8:	a802      	add	r0, sp, #8
 80058ea:	f000 fd0f 	bl	800630c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058ee:	3601      	adds	r6, #1
 80058f0:	e019      	b.n	8005926 <xQueueGenericSend+0xc4>
		prvLockQueue( pxQueue );
 80058f2:	2344      	movs	r3, #68	; 0x44
 80058f4:	2200      	movs	r2, #0
 80058f6:	54e2      	strb	r2, [r4, r3]
 80058f8:	e020      	b.n	800593c <xQueueGenericSend+0xda>
 80058fa:	2345      	movs	r3, #69	; 0x45
 80058fc:	2200      	movs	r2, #0
 80058fe:	54e2      	strb	r2, [r4, r3]
 8005900:	e021      	b.n	8005946 <xQueueGenericSend+0xe4>
				prvUnlockQueue( pxQueue );
 8005902:	0020      	movs	r0, r4
 8005904:	f7ff fee4 	bl	80056d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005908:	f000 fbda 	bl	80060c0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800590c:	f000 ff30 	bl	8006770 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005910:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005912:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005914:	4293      	cmp	r3, r2
 8005916:	d3c9      	bcc.n	80058ac <xQueueGenericSend+0x4a>
 8005918:	2d02      	cmp	r5, #2
 800591a:	d0c7      	beq.n	80058ac <xQueueGenericSend+0x4a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800591c:	9b01      	ldr	r3, [sp, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d0de      	beq.n	80058e0 <xQueueGenericSend+0x7e>
				else if( xEntryTimeSet == pdFALSE )
 8005922:	2e00      	cmp	r6, #0
 8005924:	d0e0      	beq.n	80058e8 <xQueueGenericSend+0x86>
		taskEXIT_CRITICAL();
 8005926:	f000 ff2f 	bl	8006788 <vPortExitCritical>
		vTaskSuspendAll();
 800592a:	f000 fb37 	bl	8005f9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800592e:	f000 ff1f 	bl	8006770 <vPortEnterCritical>
 8005932:	2344      	movs	r3, #68	; 0x44
 8005934:	5ce3      	ldrb	r3, [r4, r3]
 8005936:	b25b      	sxtb	r3, r3
 8005938:	3301      	adds	r3, #1
 800593a:	d0da      	beq.n	80058f2 <xQueueGenericSend+0x90>
 800593c:	2345      	movs	r3, #69	; 0x45
 800593e:	5ce3      	ldrb	r3, [r4, r3]
 8005940:	b25b      	sxtb	r3, r3
 8005942:	3301      	adds	r3, #1
 8005944:	d0d9      	beq.n	80058fa <xQueueGenericSend+0x98>
 8005946:	f000 ff1f 	bl	8006788 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800594a:	a901      	add	r1, sp, #4
 800594c:	a802      	add	r0, sp, #8
 800594e:	f000 fce9 	bl	8006324 <xTaskCheckForTimeOut>
 8005952:	2800      	cmp	r0, #0
 8005954:	d113      	bne.n	800597e <xQueueGenericSend+0x11c>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005956:	0020      	movs	r0, r4
 8005958:	f7ff fe4a 	bl	80055f0 <prvIsQueueFull>
 800595c:	2800      	cmp	r0, #0
 800595e:	d0d0      	beq.n	8005902 <xQueueGenericSend+0xa0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005960:	0020      	movs	r0, r4
 8005962:	3010      	adds	r0, #16
 8005964:	9901      	ldr	r1, [sp, #4]
 8005966:	f000 fc7d 	bl	8006264 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800596a:	0020      	movs	r0, r4
 800596c:	f7ff feb0 	bl	80056d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005970:	f000 fba6 	bl	80060c0 <xTaskResumeAll>
 8005974:	2800      	cmp	r0, #0
 8005976:	d1c9      	bne.n	800590c <xQueueGenericSend+0xaa>
					portYIELD_WITHIN_API();
 8005978:	f000 feee 	bl	8006758 <vPortYield>
 800597c:	e7c6      	b.n	800590c <xQueueGenericSend+0xaa>
			prvUnlockQueue( pxQueue );
 800597e:	0020      	movs	r0, r4
 8005980:	f7ff fea6 	bl	80056d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005984:	f000 fb9c 	bl	80060c0 <xTaskResumeAll>
			return errQUEUE_FULL;
 8005988:	2000      	movs	r0, #0
 800598a:	e7a7      	b.n	80058dc <xQueueGenericSend+0x7a>

0800598c <xQueueGenericSendFromISR>:
{
 800598c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800598e:	b083      	sub	sp, #12
 8005990:	0004      	movs	r4, r0
 8005992:	9100      	str	r1, [sp, #0]
 8005994:	0015      	movs	r5, r2
 8005996:	001f      	movs	r7, r3
	configASSERT( pxQueue );
 8005998:	2800      	cmp	r0, #0
 800599a:	d007      	beq.n	80059ac <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800599c:	9b00      	ldr	r3, [sp, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d106      	bne.n	80059b0 <xQueueGenericSendFromISR+0x24>
 80059a2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <xQueueGenericSendFromISR+0x24>
 80059a8:	b672      	cpsid	i
 80059aa:	e7fe      	b.n	80059aa <xQueueGenericSendFromISR+0x1e>
	configASSERT( pxQueue );
 80059ac:	b672      	cpsid	i
 80059ae:	e7fe      	b.n	80059ae <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059b0:	2f02      	cmp	r7, #2
 80059b2:	d104      	bne.n	80059be <xQueueGenericSendFromISR+0x32>
 80059b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d001      	beq.n	80059be <xQueueGenericSendFromISR+0x32>
 80059ba:	b672      	cpsid	i
 80059bc:	e7fe      	b.n	80059bc <xQueueGenericSendFromISR+0x30>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059be:	f000 fef3 	bl	80067a8 <ulSetInterruptMaskFromISR>
 80059c2:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80059c6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d303      	bcc.n	80059d4 <xQueueGenericSendFromISR+0x48>
 80059cc:	2f02      	cmp	r7, #2
 80059ce:	d001      	beq.n	80059d4 <xQueueGenericSendFromISR+0x48>
			xReturn = errQUEUE_FULL;
 80059d0:	2400      	movs	r4, #0
 80059d2:	e00e      	b.n	80059f2 <xQueueGenericSendFromISR+0x66>
			const int8_t cTxLock = pxQueue->cTxLock;
 80059d4:	2345      	movs	r3, #69	; 0x45
 80059d6:	5ce6      	ldrb	r6, [r4, r3]
 80059d8:	b276      	sxtb	r6, r6
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059da:	003a      	movs	r2, r7
 80059dc:	9900      	ldr	r1, [sp, #0]
 80059de:	0020      	movs	r0, r4
 80059e0:	f7ff fe23 	bl	800562a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80059e4:	1c73      	adds	r3, r6, #1
 80059e6:	d00a      	beq.n	80059fe <xQueueGenericSendFromISR+0x72>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059e8:	3601      	adds	r6, #1
 80059ea:	b276      	sxtb	r6, r6
 80059ec:	2345      	movs	r3, #69	; 0x45
 80059ee:	54e6      	strb	r6, [r4, r3]
			xReturn = pdPASS;
 80059f0:	2401      	movs	r4, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80059f2:	9801      	ldr	r0, [sp, #4]
 80059f4:	f000 fedc 	bl	80067b0 <vClearInterruptMaskFromISR>
}
 80059f8:	0020      	movs	r0, r4
 80059fa:	b003      	add	sp, #12
 80059fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00a      	beq.n	8005a1a <xQueueGenericSendFromISR+0x8e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a04:	0020      	movs	r0, r4
 8005a06:	3024      	adds	r0, #36	; 0x24
 8005a08:	f000 fc3e 	bl	8006288 <xTaskRemoveFromEventList>
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	d006      	beq.n	8005a1e <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 8005a10:	2d00      	cmp	r5, #0
 8005a12:	d006      	beq.n	8005a22 <xQueueGenericSendFromISR+0x96>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a14:	2401      	movs	r4, #1
 8005a16:	602c      	str	r4, [r5, #0]
 8005a18:	e7eb      	b.n	80059f2 <xQueueGenericSendFromISR+0x66>
			xReturn = pdPASS;
 8005a1a:	2401      	movs	r4, #1
 8005a1c:	e7e9      	b.n	80059f2 <xQueueGenericSendFromISR+0x66>
 8005a1e:	2401      	movs	r4, #1
 8005a20:	e7e7      	b.n	80059f2 <xQueueGenericSendFromISR+0x66>
 8005a22:	2401      	movs	r4, #1
 8005a24:	e7e5      	b.n	80059f2 <xQueueGenericSendFromISR+0x66>

08005a26 <xQueueReceive>:
{
 8005a26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a28:	b085      	sub	sp, #20
 8005a2a:	0004      	movs	r4, r0
 8005a2c:	000f      	movs	r7, r1
 8005a2e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005a30:	2800      	cmp	r0, #0
 8005a32:	d006      	beq.n	8005a42 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a34:	2900      	cmp	r1, #0
 8005a36:	d106      	bne.n	8005a46 <xQueueReceive+0x20>
 8005a38:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <xQueueReceive+0x20>
 8005a3e:	b672      	cpsid	i
 8005a40:	e7fe      	b.n	8005a40 <xQueueReceive+0x1a>
	configASSERT( ( pxQueue ) );
 8005a42:	b672      	cpsid	i
 8005a44:	e7fe      	b.n	8005a44 <xQueueReceive+0x1e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a46:	f000 fca7 	bl	8006398 <xTaskGetSchedulerState>
 8005a4a:	2800      	cmp	r0, #0
 8005a4c:	d104      	bne.n	8005a58 <xQueueReceive+0x32>
 8005a4e:	9b01      	ldr	r3, [sp, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <xQueueReceive+0x36>
 8005a54:	b672      	cpsid	i
 8005a56:	e7fe      	b.n	8005a56 <xQueueReceive+0x30>
 8005a58:	2600      	movs	r6, #0
 8005a5a:	e039      	b.n	8005ad0 <xQueueReceive+0xaa>
 8005a5c:	2600      	movs	r6, #0
 8005a5e:	e037      	b.n	8005ad0 <xQueueReceive+0xaa>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a60:	0039      	movs	r1, r7
 8005a62:	0020      	movs	r0, r4
 8005a64:	f7ff fe22 	bl	80056ac <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a68:	3d01      	subs	r5, #1
 8005a6a:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a6c:	6923      	ldr	r3, [r4, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d104      	bne.n	8005a7c <xQueueReceive+0x56>
				taskEXIT_CRITICAL();
 8005a72:	f000 fe89 	bl	8006788 <vPortExitCritical>
				return pdPASS;
 8005a76:	2001      	movs	r0, #1
}
 8005a78:	b005      	add	sp, #20
 8005a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a7c:	0020      	movs	r0, r4
 8005a7e:	3010      	adds	r0, #16
 8005a80:	f000 fc02 	bl	8006288 <xTaskRemoveFromEventList>
 8005a84:	2800      	cmp	r0, #0
 8005a86:	d0f4      	beq.n	8005a72 <xQueueReceive+0x4c>
						queueYIELD_IF_USING_PREEMPTION();
 8005a88:	f000 fe66 	bl	8006758 <vPortYield>
 8005a8c:	e7f1      	b.n	8005a72 <xQueueReceive+0x4c>
					taskEXIT_CRITICAL();
 8005a8e:	f000 fe7b 	bl	8006788 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005a92:	2000      	movs	r0, #0
 8005a94:	e7f0      	b.n	8005a78 <xQueueReceive+0x52>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a96:	a802      	add	r0, sp, #8
 8005a98:	f000 fc38 	bl	800630c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a9c:	3601      	adds	r6, #1
 8005a9e:	e021      	b.n	8005ae4 <xQueueReceive+0xbe>
		prvLockQueue( pxQueue );
 8005aa0:	2344      	movs	r3, #68	; 0x44
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	54e2      	strb	r2, [r4, r3]
 8005aa6:	e028      	b.n	8005afa <xQueueReceive+0xd4>
 8005aa8:	2345      	movs	r3, #69	; 0x45
 8005aaa:	2200      	movs	r2, #0
 8005aac:	54e2      	strb	r2, [r4, r3]
 8005aae:	e029      	b.n	8005b04 <xQueueReceive+0xde>
				prvUnlockQueue( pxQueue );
 8005ab0:	0020      	movs	r0, r4
 8005ab2:	f7ff fe0d 	bl	80056d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ab6:	f000 fb03 	bl	80060c0 <xTaskResumeAll>
 8005aba:	e009      	b.n	8005ad0 <xQueueReceive+0xaa>
			prvUnlockQueue( pxQueue );
 8005abc:	0020      	movs	r0, r4
 8005abe:	f7ff fe07 	bl	80056d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ac2:	f000 fafd 	bl	80060c0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ac6:	0020      	movs	r0, r4
 8005ac8:	f7ff fda1 	bl	800560e <prvIsQueueEmpty>
 8005acc:	2800      	cmp	r0, #0
 8005ace:	d135      	bne.n	8005b3c <xQueueReceive+0x116>
		taskENTER_CRITICAL();
 8005ad0:	f000 fe4e 	bl	8006770 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ad4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ad6:	2d00      	cmp	r5, #0
 8005ad8:	d1c2      	bne.n	8005a60 <xQueueReceive+0x3a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ada:	9b01      	ldr	r3, [sp, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0d6      	beq.n	8005a8e <xQueueReceive+0x68>
				else if( xEntryTimeSet == pdFALSE )
 8005ae0:	2e00      	cmp	r6, #0
 8005ae2:	d0d8      	beq.n	8005a96 <xQueueReceive+0x70>
		taskEXIT_CRITICAL();
 8005ae4:	f000 fe50 	bl	8006788 <vPortExitCritical>
		vTaskSuspendAll();
 8005ae8:	f000 fa58 	bl	8005f9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005aec:	f000 fe40 	bl	8006770 <vPortEnterCritical>
 8005af0:	2344      	movs	r3, #68	; 0x44
 8005af2:	5ce3      	ldrb	r3, [r4, r3]
 8005af4:	b25b      	sxtb	r3, r3
 8005af6:	3301      	adds	r3, #1
 8005af8:	d0d2      	beq.n	8005aa0 <xQueueReceive+0x7a>
 8005afa:	2345      	movs	r3, #69	; 0x45
 8005afc:	5ce3      	ldrb	r3, [r4, r3]
 8005afe:	b25b      	sxtb	r3, r3
 8005b00:	3301      	adds	r3, #1
 8005b02:	d0d1      	beq.n	8005aa8 <xQueueReceive+0x82>
 8005b04:	f000 fe40 	bl	8006788 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b08:	a901      	add	r1, sp, #4
 8005b0a:	a802      	add	r0, sp, #8
 8005b0c:	f000 fc0a 	bl	8006324 <xTaskCheckForTimeOut>
 8005b10:	2800      	cmp	r0, #0
 8005b12:	d1d3      	bne.n	8005abc <xQueueReceive+0x96>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b14:	0020      	movs	r0, r4
 8005b16:	f7ff fd7a 	bl	800560e <prvIsQueueEmpty>
 8005b1a:	2800      	cmp	r0, #0
 8005b1c:	d0c8      	beq.n	8005ab0 <xQueueReceive+0x8a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b1e:	0020      	movs	r0, r4
 8005b20:	3024      	adds	r0, #36	; 0x24
 8005b22:	9901      	ldr	r1, [sp, #4]
 8005b24:	f000 fb9e 	bl	8006264 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b28:	0020      	movs	r0, r4
 8005b2a:	f7ff fdd1 	bl	80056d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b2e:	f000 fac7 	bl	80060c0 <xTaskResumeAll>
 8005b32:	2800      	cmp	r0, #0
 8005b34:	d1cc      	bne.n	8005ad0 <xQueueReceive+0xaa>
					portYIELD_WITHIN_API();
 8005b36:	f000 fe0f 	bl	8006758 <vPortYield>
 8005b3a:	e7c9      	b.n	8005ad0 <xQueueReceive+0xaa>
				return errQUEUE_EMPTY;
 8005b3c:	2000      	movs	r0, #0
 8005b3e:	e79b      	b.n	8005a78 <xQueueReceive+0x52>

08005b40 <xQueueReceiveFromISR>:
{
 8005b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b42:	b083      	sub	sp, #12
 8005b44:	0004      	movs	r4, r0
 8005b46:	9100      	str	r1, [sp, #0]
 8005b48:	0015      	movs	r5, r2
	configASSERT( pxQueue );
 8005b4a:	2800      	cmp	r0, #0
 8005b4c:	d007      	beq.n	8005b5e <xQueueReceiveFromISR+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b4e:	9b00      	ldr	r3, [sp, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d106      	bne.n	8005b62 <xQueueReceiveFromISR+0x22>
 8005b54:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <xQueueReceiveFromISR+0x22>
 8005b5a:	b672      	cpsid	i
 8005b5c:	e7fe      	b.n	8005b5c <xQueueReceiveFromISR+0x1c>
	configASSERT( pxQueue );
 8005b5e:	b672      	cpsid	i
 8005b60:	e7fe      	b.n	8005b60 <xQueueReceiveFromISR+0x20>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b62:	f000 fe21 	bl	80067a8 <ulSetInterruptMaskFromISR>
 8005b66:	9001      	str	r0, [sp, #4]
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b68:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b6a:	2f00      	cmp	r7, #0
 8005b6c:	d01e      	beq.n	8005bac <xQueueReceiveFromISR+0x6c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8005b6e:	2344      	movs	r3, #68	; 0x44
 8005b70:	5ce6      	ldrb	r6, [r4, r3]
 8005b72:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b74:	9900      	ldr	r1, [sp, #0]
 8005b76:	0020      	movs	r0, r4
 8005b78:	f7ff fd98 	bl	80056ac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b7c:	1e7b      	subs	r3, r7, #1
 8005b7e:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8005b80:	1c73      	adds	r3, r6, #1
 8005b82:	d005      	beq.n	8005b90 <xQueueReceiveFromISR+0x50>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005b84:	3601      	adds	r6, #1
 8005b86:	b276      	sxtb	r6, r6
 8005b88:	2344      	movs	r3, #68	; 0x44
 8005b8a:	54e6      	strb	r6, [r4, r3]
			xReturn = pdPASS;
 8005b8c:	2401      	movs	r4, #1
 8005b8e:	e00e      	b.n	8005bae <xQueueReceiveFromISR+0x6e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b90:	6923      	ldr	r3, [r4, #16]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d011      	beq.n	8005bba <xQueueReceiveFromISR+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b96:	0020      	movs	r0, r4
 8005b98:	3010      	adds	r0, #16
 8005b9a:	f000 fb75 	bl	8006288 <xTaskRemoveFromEventList>
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	d00d      	beq.n	8005bbe <xQueueReceiveFromISR+0x7e>
						if( pxHigherPriorityTaskWoken != NULL )
 8005ba2:	2d00      	cmp	r5, #0
 8005ba4:	d00d      	beq.n	8005bc2 <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005ba6:	2401      	movs	r4, #1
 8005ba8:	602c      	str	r4, [r5, #0]
 8005baa:	e000      	b.n	8005bae <xQueueReceiveFromISR+0x6e>
			xReturn = pdFAIL;
 8005bac:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005bae:	9801      	ldr	r0, [sp, #4]
 8005bb0:	f000 fdfe 	bl	80067b0 <vClearInterruptMaskFromISR>
}
 8005bb4:	0020      	movs	r0, r4
 8005bb6:	b003      	add	sp, #12
 8005bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 8005bba:	2401      	movs	r4, #1
 8005bbc:	e7f7      	b.n	8005bae <xQueueReceiveFromISR+0x6e>
 8005bbe:	2401      	movs	r4, #1
 8005bc0:	e7f5      	b.n	8005bae <xQueueReceiveFromISR+0x6e>
 8005bc2:	2401      	movs	r4, #1
 8005bc4:	e7f3      	b.n	8005bae <xQueueReceiveFromISR+0x6e>
	...

08005bc8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bc8:	4b08      	ldr	r3, [pc, #32]	; (8005bec <prvResetNextTaskUnblockTime+0x24>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d007      	beq.n	8005be2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005bd2:	4b06      	ldr	r3, [pc, #24]	; (8005bec <prvResetNextTaskUnblockTime+0x24>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	4b04      	ldr	r3, [pc, #16]	; (8005bf0 <prvResetNextTaskUnblockTime+0x28>)
 8005bde:	601a      	str	r2, [r3, #0]
	}
}
 8005be0:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 8005be2:	4b03      	ldr	r3, [pc, #12]	; (8005bf0 <prvResetNextTaskUnblockTime+0x28>)
 8005be4:	2201      	movs	r2, #1
 8005be6:	4252      	negs	r2, r2
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	e7f9      	b.n	8005be0 <prvResetNextTaskUnblockTime+0x18>
 8005bec:	200009d8 	.word	0x200009d8
 8005bf0:	20000aac 	.word	0x20000aac

08005bf4 <prvInitialiseNewTask>:
{
 8005bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	9000      	str	r0, [sp, #0]
 8005bfa:	9301      	str	r3, [sp, #4]
 8005bfc:	9c08      	ldr	r4, [sp, #32]
 8005bfe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005c00:	4b1d      	ldr	r3, [pc, #116]	; (8005c78 <prvInitialiseNewTask+0x84>)
 8005c02:	469c      	mov	ip, r3
 8005c04:	4462      	add	r2, ip
 8005c06:	0092      	lsls	r2, r2, #2
 8005c08:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8005c0a:	469c      	mov	ip, r3
 8005c0c:	4462      	add	r2, ip
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005c0e:	2307      	movs	r3, #7
 8005c10:	439a      	bics	r2, r3
 8005c12:	0017      	movs	r7, r2
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c14:	2300      	movs	r3, #0
 8005c16:	2b0f      	cmp	r3, #15
 8005c18:	d809      	bhi.n	8005c2e <prvInitialiseNewTask+0x3a>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c1a:	18c8      	adds	r0, r1, r3
 8005c1c:	7805      	ldrb	r5, [r0, #0]
 8005c1e:	18f2      	adds	r2, r6, r3
 8005c20:	3234      	adds	r2, #52	; 0x34
 8005c22:	7015      	strb	r5, [r2, #0]
		if( pcName[ x ] == 0x00 )
 8005c24:	7802      	ldrb	r2, [r0, #0]
 8005c26:	2a00      	cmp	r2, #0
 8005c28:	d001      	beq.n	8005c2e <prvInitialiseNewTask+0x3a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	e7f3      	b.n	8005c16 <prvInitialiseNewTask+0x22>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c2e:	2343      	movs	r3, #67	; 0x43
 8005c30:	2200      	movs	r2, #0
 8005c32:	54f2      	strb	r2, [r6, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c34:	2c06      	cmp	r4, #6
 8005c36:	d900      	bls.n	8005c3a <prvInitialiseNewTask+0x46>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c38:	2406      	movs	r4, #6
	pxNewTCB->uxPriority = uxPriority;
 8005c3a:	62f4      	str	r4, [r6, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005c3c:	6474      	str	r4, [r6, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005c3e:	2500      	movs	r5, #0
 8005c40:	64b5      	str	r5, [r6, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c42:	1d30      	adds	r0, r6, #4
 8005c44:	f7ff fc99 	bl	800557a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c48:	0030      	movs	r0, r6
 8005c4a:	3018      	adds	r0, #24
 8005c4c:	f7ff fc95 	bl	800557a <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c50:	6136      	str	r6, [r6, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c52:	2307      	movs	r3, #7
 8005c54:	1b1c      	subs	r4, r3, r4
 8005c56:	61b4      	str	r4, [r6, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c58:	6276      	str	r6, [r6, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8005c5a:	64f5      	str	r5, [r6, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c5c:	3349      	adds	r3, #73	; 0x49
 8005c5e:	54f5      	strb	r5, [r6, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c60:	9a01      	ldr	r2, [sp, #4]
 8005c62:	9900      	ldr	r1, [sp, #0]
 8005c64:	0038      	movs	r0, r7
 8005c66:	f000 fd47 	bl	80066f8 <pxPortInitialiseStack>
 8005c6a:	6030      	str	r0, [r6, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8005c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d000      	beq.n	8005c74 <prvInitialiseNewTask+0x80>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c72:	601e      	str	r6, [r3, #0]
}
 8005c74:	b003      	add	sp, #12
 8005c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c78:	3fffffff 	.word	0x3fffffff

08005c7c <prvInitialiseTaskLists>:
{
 8005c7c:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c7e:	2400      	movs	r4, #0
 8005c80:	e007      	b.n	8005c92 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c82:	00a3      	lsls	r3, r4, #2
 8005c84:	191b      	adds	r3, r3, r4
 8005c86:	0098      	lsls	r0, r3, #2
 8005c88:	4b0e      	ldr	r3, [pc, #56]	; (8005cc4 <prvInitialiseTaskLists+0x48>)
 8005c8a:	18c0      	adds	r0, r0, r3
 8005c8c:	f7ff fc6a 	bl	8005564 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c90:	3401      	adds	r4, #1
 8005c92:	2c06      	cmp	r4, #6
 8005c94:	d9f5      	bls.n	8005c82 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8005c96:	4d0c      	ldr	r5, [pc, #48]	; (8005cc8 <prvInitialiseTaskLists+0x4c>)
 8005c98:	0028      	movs	r0, r5
 8005c9a:	f7ff fc63 	bl	8005564 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c9e:	4c0b      	ldr	r4, [pc, #44]	; (8005ccc <prvInitialiseTaskLists+0x50>)
 8005ca0:	0020      	movs	r0, r4
 8005ca2:	f7ff fc5f 	bl	8005564 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ca6:	480a      	ldr	r0, [pc, #40]	; (8005cd0 <prvInitialiseTaskLists+0x54>)
 8005ca8:	f7ff fc5c 	bl	8005564 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8005cac:	4809      	ldr	r0, [pc, #36]	; (8005cd4 <prvInitialiseTaskLists+0x58>)
 8005cae:	f7ff fc59 	bl	8005564 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8005cb2:	4809      	ldr	r0, [pc, #36]	; (8005cd8 <prvInitialiseTaskLists+0x5c>)
 8005cb4:	f7ff fc56 	bl	8005564 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8005cb8:	4b08      	ldr	r3, [pc, #32]	; (8005cdc <prvInitialiseTaskLists+0x60>)
 8005cba:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005cbc:	4b08      	ldr	r3, [pc, #32]	; (8005ce0 <prvInitialiseTaskLists+0x64>)
 8005cbe:	601c      	str	r4, [r3, #0]
}
 8005cc0:	bd70      	pop	{r4, r5, r6, pc}
 8005cc2:	46c0      	nop			; (mov r8, r8)
 8005cc4:	200009e0 	.word	0x200009e0
 8005cc8:	20000a84 	.word	0x20000a84
 8005ccc:	20000a98 	.word	0x20000a98
 8005cd0:	20000ab4 	.word	0x20000ab4
 8005cd4:	20000ae0 	.word	0x20000ae0
 8005cd8:	20000acc 	.word	0x20000acc
 8005cdc:	200009d8 	.word	0x200009d8
 8005ce0:	200009dc 	.word	0x200009dc

08005ce4 <prvAddNewTaskToReadyList>:
{
 8005ce4:	b510      	push	{r4, lr}
 8005ce6:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 8005ce8:	f000 fd42 	bl	8006770 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8005cec:	4a1f      	ldr	r2, [pc, #124]	; (8005d6c <prvAddNewTaskToReadyList+0x88>)
 8005cee:	6813      	ldr	r3, [r2, #0]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005cf4:	4b1e      	ldr	r3, [pc, #120]	; (8005d70 <prvAddNewTaskToReadyList+0x8c>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00c      	beq.n	8005d16 <prvAddNewTaskToReadyList+0x32>
			if( xSchedulerRunning == pdFALSE )
 8005cfc:	4b1d      	ldr	r3, [pc, #116]	; (8005d74 <prvAddNewTaskToReadyList+0x90>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10d      	bne.n	8005d20 <prvAddNewTaskToReadyList+0x3c>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d04:	4b1a      	ldr	r3, [pc, #104]	; (8005d70 <prvAddNewTaskToReadyList+0x8c>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d807      	bhi.n	8005d20 <prvAddNewTaskToReadyList+0x3c>
					pxCurrentTCB = pxNewTCB;
 8005d10:	4b17      	ldr	r3, [pc, #92]	; (8005d70 <prvAddNewTaskToReadyList+0x8c>)
 8005d12:	601c      	str	r4, [r3, #0]
 8005d14:	e004      	b.n	8005d20 <prvAddNewTaskToReadyList+0x3c>
			pxCurrentTCB = pxNewTCB;
 8005d16:	4b16      	ldr	r3, [pc, #88]	; (8005d70 <prvAddNewTaskToReadyList+0x8c>)
 8005d18:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d1a:	6813      	ldr	r3, [r2, #0]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d01f      	beq.n	8005d60 <prvAddNewTaskToReadyList+0x7c>
		uxTaskNumber++;
 8005d20:	4a15      	ldr	r2, [pc, #84]	; (8005d78 <prvAddNewTaskToReadyList+0x94>)
 8005d22:	6813      	ldr	r3, [r2, #0]
 8005d24:	3301      	adds	r3, #1
 8005d26:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005d28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005d2a:	4b14      	ldr	r3, [pc, #80]	; (8005d7c <prvAddNewTaskToReadyList+0x98>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d901      	bls.n	8005d36 <prvAddNewTaskToReadyList+0x52>
 8005d32:	4b12      	ldr	r3, [pc, #72]	; (8005d7c <prvAddNewTaskToReadyList+0x98>)
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	1d21      	adds	r1, r4, #4
 8005d38:	0093      	lsls	r3, r2, #2
 8005d3a:	189b      	adds	r3, r3, r2
 8005d3c:	0098      	lsls	r0, r3, #2
 8005d3e:	4b10      	ldr	r3, [pc, #64]	; (8005d80 <prvAddNewTaskToReadyList+0x9c>)
 8005d40:	18c0      	adds	r0, r0, r3
 8005d42:	f7ff fc1d 	bl	8005580 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8005d46:	f000 fd1f 	bl	8006788 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8005d4a:	4b0a      	ldr	r3, [pc, #40]	; (8005d74 <prvAddNewTaskToReadyList+0x90>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d005      	beq.n	8005d5e <prvAddNewTaskToReadyList+0x7a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d52:	4b07      	ldr	r3, [pc, #28]	; (8005d70 <prvAddNewTaskToReadyList+0x8c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d303      	bcc.n	8005d66 <prvAddNewTaskToReadyList+0x82>
}
 8005d5e:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8005d60:	f7ff ff8c 	bl	8005c7c <prvInitialiseTaskLists>
 8005d64:	e7dc      	b.n	8005d20 <prvAddNewTaskToReadyList+0x3c>
			taskYIELD_IF_USING_PREEMPTION();
 8005d66:	f000 fcf7 	bl	8006758 <vPortYield>
}
 8005d6a:	e7f8      	b.n	8005d5e <prvAddNewTaskToReadyList+0x7a>
 8005d6c:	20000a6c 	.word	0x20000a6c
 8005d70:	200009d4 	.word	0x200009d4
 8005d74:	20000ac8 	.word	0x20000ac8
 8005d78:	20000a7c 	.word	0x20000a7c
 8005d7c:	20000a80 	.word	0x20000a80
 8005d80:	200009e0 	.word	0x200009e0

08005d84 <prvDeleteTCB>:
	{
 8005d84:	b510      	push	{r4, lr}
 8005d86:	0004      	movs	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d88:	2351      	movs	r3, #81	; 0x51
 8005d8a:	5cc3      	ldrb	r3, [r0, r3]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d106      	bne.n	8005d9e <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8005d90:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8005d92:	f000 fe11 	bl	80069b8 <vPortFree>
				vPortFree( pxTCB );
 8005d96:	0020      	movs	r0, r4
 8005d98:	f000 fe0e 	bl	80069b8 <vPortFree>
	}
 8005d9c:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d003      	beq.n	8005daa <prvDeleteTCB+0x26>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d0fa      	beq.n	8005d9c <prvDeleteTCB+0x18>
 8005da6:	b672      	cpsid	i
 8005da8:	e7fe      	b.n	8005da8 <prvDeleteTCB+0x24>
				vPortFree( pxTCB );
 8005daa:	f000 fe05 	bl	80069b8 <vPortFree>
 8005dae:	e7f5      	b.n	8005d9c <prvDeleteTCB+0x18>

08005db0 <prvCheckTasksWaitingTermination>:
{
 8005db0:	b510      	push	{r4, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005db2:	e014      	b.n	8005dde <prvCheckTasksWaitingTermination+0x2e>
			taskENTER_CRITICAL();
 8005db4:	f000 fcdc 	bl	8006770 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005db8:	4b0b      	ldr	r3, [pc, #44]	; (8005de8 <prvCheckTasksWaitingTermination+0x38>)
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dbe:	1d20      	adds	r0, r4, #4
 8005dc0:	f7ff fc02 	bl	80055c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005dc4:	4a09      	ldr	r2, [pc, #36]	; (8005dec <prvCheckTasksWaitingTermination+0x3c>)
 8005dc6:	6813      	ldr	r3, [r2, #0]
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005dcc:	4a08      	ldr	r2, [pc, #32]	; (8005df0 <prvCheckTasksWaitingTermination+0x40>)
 8005dce:	6813      	ldr	r3, [r2, #0]
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8005dd4:	f000 fcd8 	bl	8006788 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8005dd8:	0020      	movs	r0, r4
 8005dda:	f7ff ffd3 	bl	8005d84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dde:	4b04      	ldr	r3, [pc, #16]	; (8005df0 <prvCheckTasksWaitingTermination+0x40>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1e6      	bne.n	8005db4 <prvCheckTasksWaitingTermination+0x4>
}
 8005de6:	bd10      	pop	{r4, pc}
 8005de8:	20000ae0 	.word	0x20000ae0
 8005dec:	20000a6c 	.word	0x20000a6c
 8005df0:	20000a70 	.word	0x20000a70

08005df4 <prvIdleTask>:
{
 8005df4:	b510      	push	{r4, lr}
		prvCheckTasksWaitingTermination();
 8005df6:	f7ff ffdb 	bl	8005db0 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005dfa:	4b03      	ldr	r3, [pc, #12]	; (8005e08 <prvIdleTask+0x14>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d9f9      	bls.n	8005df6 <prvIdleTask+0x2>
				taskYIELD();
 8005e02:	f000 fca9 	bl	8006758 <vPortYield>
 8005e06:	e7f6      	b.n	8005df6 <prvIdleTask+0x2>
 8005e08:	200009e0 	.word	0x200009e0

08005e0c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e0c:	b570      	push	{r4, r5, r6, lr}
 8005e0e:	0004      	movs	r4, r0
 8005e10:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e12:	4b17      	ldr	r3, [pc, #92]	; (8005e70 <prvAddCurrentTaskToDelayedList+0x64>)
 8005e14:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e16:	4b17      	ldr	r3, [pc, #92]	; (8005e74 <prvAddCurrentTaskToDelayedList+0x68>)
 8005e18:	6818      	ldr	r0, [r3, #0]
 8005e1a:	3004      	adds	r0, #4
 8005e1c:	f7ff fbd4 	bl	80055c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e20:	1c63      	adds	r3, r4, #1
 8005e22:	d013      	beq.n	8005e4c <prvAddCurrentTaskToDelayedList+0x40>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e24:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e26:	4b13      	ldr	r3, [pc, #76]	; (8005e74 <prvAddCurrentTaskToDelayedList+0x68>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8005e2c:	42a6      	cmp	r6, r4
 8005e2e:	d816      	bhi.n	8005e5e <prvAddCurrentTaskToDelayedList+0x52>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e30:	4b11      	ldr	r3, [pc, #68]	; (8005e78 <prvAddCurrentTaskToDelayedList+0x6c>)
 8005e32:	6818      	ldr	r0, [r3, #0]
 8005e34:	4b0f      	ldr	r3, [pc, #60]	; (8005e74 <prvAddCurrentTaskToDelayedList+0x68>)
 8005e36:	6819      	ldr	r1, [r3, #0]
 8005e38:	3104      	adds	r1, #4
 8005e3a:	f7ff fbad 	bl	8005598 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e3e:	4b0f      	ldr	r3, [pc, #60]	; (8005e7c <prvAddCurrentTaskToDelayedList+0x70>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	42a3      	cmp	r3, r4
 8005e44:	d912      	bls.n	8005e6c <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8005e46:	4b0d      	ldr	r3, [pc, #52]	; (8005e7c <prvAddCurrentTaskToDelayedList+0x70>)
 8005e48:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e4a:	e00f      	b.n	8005e6c <prvAddCurrentTaskToDelayedList+0x60>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e4c:	2d00      	cmp	r5, #0
 8005e4e:	d0e9      	beq.n	8005e24 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e50:	4b08      	ldr	r3, [pc, #32]	; (8005e74 <prvAddCurrentTaskToDelayedList+0x68>)
 8005e52:	6819      	ldr	r1, [r3, #0]
 8005e54:	3104      	adds	r1, #4
 8005e56:	480a      	ldr	r0, [pc, #40]	; (8005e80 <prvAddCurrentTaskToDelayedList+0x74>)
 8005e58:	f7ff fb92 	bl	8005580 <vListInsertEnd>
 8005e5c:	e006      	b.n	8005e6c <prvAddCurrentTaskToDelayedList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e5e:	4b09      	ldr	r3, [pc, #36]	; (8005e84 <prvAddCurrentTaskToDelayedList+0x78>)
 8005e60:	6818      	ldr	r0, [r3, #0]
 8005e62:	4b04      	ldr	r3, [pc, #16]	; (8005e74 <prvAddCurrentTaskToDelayedList+0x68>)
 8005e64:	6819      	ldr	r1, [r3, #0]
 8005e66:	3104      	adds	r1, #4
 8005e68:	f7ff fb96 	bl	8005598 <vListInsert>
}
 8005e6c:	bd70      	pop	{r4, r5, r6, pc}
 8005e6e:	46c0      	nop			; (mov r8, r8)
 8005e70:	20000af4 	.word	0x20000af4
 8005e74:	200009d4 	.word	0x200009d4
 8005e78:	200009d8 	.word	0x200009d8
 8005e7c:	20000aac 	.word	0x20000aac
 8005e80:	20000acc 	.word	0x20000acc
 8005e84:	200009dc 	.word	0x200009dc

08005e88 <xTaskCreateStatic>:
	{
 8005e88:	b570      	push	{r4, r5, r6, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005e8e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8005e90:	2d00      	cmp	r5, #0
 8005e92:	d101      	bne.n	8005e98 <xTaskCreateStatic+0x10>
 8005e94:	b672      	cpsid	i
 8005e96:	e7fe      	b.n	8005e96 <xTaskCreateStatic+0xe>
		configASSERT( pxTaskBuffer != NULL );
 8005e98:	2c00      	cmp	r4, #0
 8005e9a:	d101      	bne.n	8005ea0 <xTaskCreateStatic+0x18>
 8005e9c:	b672      	cpsid	i
 8005e9e:	e7fe      	b.n	8005e9e <xTaskCreateStatic+0x16>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ea0:	2654      	movs	r6, #84	; 0x54
 8005ea2:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ea4:	9e04      	ldr	r6, [sp, #16]
 8005ea6:	2e54      	cmp	r6, #84	; 0x54
 8005ea8:	d001      	beq.n	8005eae <xTaskCreateStatic+0x26>
 8005eaa:	b672      	cpsid	i
 8005eac:	e7fe      	b.n	8005eac <xTaskCreateStatic+0x24>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005eae:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005eb0:	2551      	movs	r5, #81	; 0x51
 8005eb2:	2602      	movs	r6, #2
 8005eb4:	5566      	strb	r6, [r4, r5]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005eb6:	2500      	movs	r5, #0
 8005eb8:	9503      	str	r5, [sp, #12]
 8005eba:	9402      	str	r4, [sp, #8]
 8005ebc:	ad05      	add	r5, sp, #20
 8005ebe:	9501      	str	r5, [sp, #4]
 8005ec0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005ec2:	9500      	str	r5, [sp, #0]
 8005ec4:	f7ff fe96 	bl	8005bf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ec8:	0020      	movs	r0, r4
 8005eca:	f7ff ff0b 	bl	8005ce4 <prvAddNewTaskToReadyList>
	}
 8005ece:	9805      	ldr	r0, [sp, #20]
 8005ed0:	b006      	add	sp, #24
 8005ed2:	bd70      	pop	{r4, r5, r6, pc}

08005ed4 <xTaskCreate>:
	{
 8005ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	9004      	str	r0, [sp, #16]
 8005eda:	9105      	str	r1, [sp, #20]
 8005edc:	0014      	movs	r4, r2
 8005ede:	001f      	movs	r7, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ee0:	0090      	lsls	r0, r2, #2
 8005ee2:	f000 fcfd 	bl	80068e0 <pvPortMalloc>
 8005ee6:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
 8005ee8:	d020      	beq.n	8005f2c <xTaskCreate+0x58>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005eea:	2054      	movs	r0, #84	; 0x54
 8005eec:	f000 fcf8 	bl	80068e0 <pvPortMalloc>
 8005ef0:	1e05      	subs	r5, r0, #0
				if( pxNewTCB != NULL )
 8005ef2:	d017      	beq.n	8005f24 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8005ef4:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8005ef6:	2d00      	cmp	r5, #0
 8005ef8:	d01b      	beq.n	8005f32 <xTaskCreate+0x5e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005efa:	2300      	movs	r3, #0
 8005efc:	2251      	movs	r2, #81	; 0x51
 8005efe:	54ab      	strb	r3, [r5, r2]
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f00:	9303      	str	r3, [sp, #12]
 8005f02:	9502      	str	r5, [sp, #8]
 8005f04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f06:	9301      	str	r3, [sp, #4]
 8005f08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	003b      	movs	r3, r7
 8005f0e:	0022      	movs	r2, r4
 8005f10:	9905      	ldr	r1, [sp, #20]
 8005f12:	9804      	ldr	r0, [sp, #16]
 8005f14:	f7ff fe6e 	bl	8005bf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f18:	0028      	movs	r0, r5
 8005f1a:	f7ff fee3 	bl	8005ce4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f1e:	2001      	movs	r0, #1
	}
 8005f20:	b007      	add	sp, #28
 8005f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
 8005f24:	0030      	movs	r0, r6
 8005f26:	f000 fd47 	bl	80069b8 <vPortFree>
 8005f2a:	e7e4      	b.n	8005ef6 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f2c:	2001      	movs	r0, #1
 8005f2e:	4240      	negs	r0, r0
 8005f30:	e7f6      	b.n	8005f20 <xTaskCreate+0x4c>
 8005f32:	2001      	movs	r0, #1
 8005f34:	4240      	negs	r0, r0
		return xReturn;
 8005f36:	e7f3      	b.n	8005f20 <xTaskCreate+0x4c>

08005f38 <vTaskStartScheduler>:
{
 8005f38:	b510      	push	{r4, lr}
 8005f3a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005f3c:	2400      	movs	r4, #0
 8005f3e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f40:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f42:	aa07      	add	r2, sp, #28
 8005f44:	a906      	add	r1, sp, #24
 8005f46:	a805      	add	r0, sp, #20
 8005f48:	f000 fe9a 	bl	8006c80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f4c:	9b05      	ldr	r3, [sp, #20]
 8005f4e:	9302      	str	r3, [sp, #8]
 8005f50:	9b06      	ldr	r3, [sp, #24]
 8005f52:	9301      	str	r3, [sp, #4]
 8005f54:	9400      	str	r4, [sp, #0]
 8005f56:	2300      	movs	r3, #0
 8005f58:	9a07      	ldr	r2, [sp, #28]
 8005f5a:	490b      	ldr	r1, [pc, #44]	; (8005f88 <vTaskStartScheduler+0x50>)
 8005f5c:	480b      	ldr	r0, [pc, #44]	; (8005f8c <vTaskStartScheduler+0x54>)
 8005f5e:	f7ff ff93 	bl	8005e88 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8005f62:	2800      	cmp	r0, #0
 8005f64:	d101      	bne.n	8005f6a <vTaskStartScheduler+0x32>
}
 8005f66:	b008      	add	sp, #32
 8005f68:	bd10      	pop	{r4, pc}
		portDISABLE_INTERRUPTS();
 8005f6a:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f6c:	4b08      	ldr	r3, [pc, #32]	; (8005f90 <vTaskStartScheduler+0x58>)
 8005f6e:	2201      	movs	r2, #1
 8005f70:	4252      	negs	r2, r2
 8005f72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f74:	4b07      	ldr	r3, [pc, #28]	; (8005f94 <vTaskStartScheduler+0x5c>)
 8005f76:	3202      	adds	r2, #2
 8005f78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005f7a:	4b07      	ldr	r3, [pc, #28]	; (8005f98 <vTaskStartScheduler+0x60>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8005f80:	f000 fbcc 	bl	800671c <xPortStartScheduler>
 8005f84:	e7ef      	b.n	8005f66 <vTaskStartScheduler+0x2e>
 8005f86:	46c0      	nop			; (mov r8, r8)
 8005f88:	0800c414 	.word	0x0800c414
 8005f8c:	08005df5 	.word	0x08005df5
 8005f90:	20000aac 	.word	0x20000aac
 8005f94:	20000ac8 	.word	0x20000ac8
 8005f98:	20000af4 	.word	0x20000af4

08005f9c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005f9c:	4a02      	ldr	r2, [pc, #8]	; (8005fa8 <vTaskSuspendAll+0xc>)
 8005f9e:	6813      	ldr	r3, [r2, #0]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	6013      	str	r3, [r2, #0]
}
 8005fa4:	4770      	bx	lr
 8005fa6:	46c0      	nop			; (mov r8, r8)
 8005fa8:	20000a78 	.word	0x20000a78

08005fac <xTaskIncrementTick>:
{
 8005fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fae:	4b39      	ldr	r3, [pc, #228]	; (8006094 <xTaskIncrementTick+0xe8>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d161      	bne.n	800607a <xTaskIncrementTick+0xce>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005fb6:	4b38      	ldr	r3, [pc, #224]	; (8006098 <xTaskIncrementTick+0xec>)
 8005fb8:	681d      	ldr	r5, [r3, #0]
 8005fba:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8005fbc:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005fbe:	2d00      	cmp	r5, #0
 8005fc0:	d112      	bne.n	8005fe8 <xTaskIncrementTick+0x3c>
			taskSWITCH_DELAYED_LISTS();
 8005fc2:	4b36      	ldr	r3, [pc, #216]	; (800609c <xTaskIncrementTick+0xf0>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <xTaskIncrementTick+0x24>
 8005fcc:	b672      	cpsid	i
 8005fce:	e7fe      	b.n	8005fce <xTaskIncrementTick+0x22>
 8005fd0:	4a32      	ldr	r2, [pc, #200]	; (800609c <xTaskIncrementTick+0xf0>)
 8005fd2:	6811      	ldr	r1, [r2, #0]
 8005fd4:	4b32      	ldr	r3, [pc, #200]	; (80060a0 <xTaskIncrementTick+0xf4>)
 8005fd6:	6818      	ldr	r0, [r3, #0]
 8005fd8:	6010      	str	r0, [r2, #0]
 8005fda:	6019      	str	r1, [r3, #0]
 8005fdc:	4a31      	ldr	r2, [pc, #196]	; (80060a4 <xTaskIncrementTick+0xf8>)
 8005fde:	6813      	ldr	r3, [r2, #0]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	6013      	str	r3, [r2, #0]
 8005fe4:	f7ff fdf0 	bl	8005bc8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005fe8:	4b2f      	ldr	r3, [pc, #188]	; (80060a8 <xTaskIncrementTick+0xfc>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	42ab      	cmp	r3, r5
 8005fee:	d93a      	bls.n	8006066 <xTaskIncrementTick+0xba>
BaseType_t xSwitchRequired = pdFALSE;
 8005ff0:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ff2:	4b2e      	ldr	r3, [pc, #184]	; (80060ac <xTaskIncrementTick+0x100>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff8:	0093      	lsls	r3, r2, #2
 8005ffa:	189b      	adds	r3, r3, r2
 8005ffc:	009a      	lsls	r2, r3, #2
 8005ffe:	4b2c      	ldr	r3, [pc, #176]	; (80060b0 <xTaskIncrementTick+0x104>)
 8006000:	58d3      	ldr	r3, [r2, r3]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d93e      	bls.n	8006084 <xTaskIncrementTick+0xd8>
				xSwitchRequired = pdTRUE;
 8006006:	2401      	movs	r4, #1
 8006008:	e03c      	b.n	8006084 <xTaskIncrementTick+0xd8>
							xSwitchRequired = pdTRUE;
 800600a:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800600c:	4b23      	ldr	r3, [pc, #140]	; (800609c <xTaskIncrementTick+0xf0>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d029      	beq.n	800606a <xTaskIncrementTick+0xbe>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006016:	4b21      	ldr	r3, [pc, #132]	; (800609c <xTaskIncrementTick+0xf0>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800601e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8006020:	429d      	cmp	r5, r3
 8006022:	d327      	bcc.n	8006074 <xTaskIncrementTick+0xc8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006024:	1d37      	adds	r7, r6, #4
 8006026:	0038      	movs	r0, r7
 8006028:	f7ff face 	bl	80055c8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800602c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800602e:	2b00      	cmp	r3, #0
 8006030:	d003      	beq.n	800603a <xTaskIncrementTick+0x8e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006032:	0030      	movs	r0, r6
 8006034:	3018      	adds	r0, #24
 8006036:	f7ff fac7 	bl	80055c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800603a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800603c:	4b1d      	ldr	r3, [pc, #116]	; (80060b4 <xTaskIncrementTick+0x108>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	429a      	cmp	r2, r3
 8006042:	d901      	bls.n	8006048 <xTaskIncrementTick+0x9c>
 8006044:	4b1b      	ldr	r3, [pc, #108]	; (80060b4 <xTaskIncrementTick+0x108>)
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	0093      	lsls	r3, r2, #2
 800604a:	189b      	adds	r3, r3, r2
 800604c:	0098      	lsls	r0, r3, #2
 800604e:	4b18      	ldr	r3, [pc, #96]	; (80060b0 <xTaskIncrementTick+0x104>)
 8006050:	18c0      	adds	r0, r0, r3
 8006052:	0039      	movs	r1, r7
 8006054:	f7ff fa94 	bl	8005580 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006058:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800605a:	4b14      	ldr	r3, [pc, #80]	; (80060ac <xTaskIncrementTick+0x100>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006060:	429a      	cmp	r2, r3
 8006062:	d2d2      	bcs.n	800600a <xTaskIncrementTick+0x5e>
 8006064:	e7d2      	b.n	800600c <xTaskIncrementTick+0x60>
BaseType_t xSwitchRequired = pdFALSE;
 8006066:	2400      	movs	r4, #0
 8006068:	e7d0      	b.n	800600c <xTaskIncrementTick+0x60>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800606a:	4b0f      	ldr	r3, [pc, #60]	; (80060a8 <xTaskIncrementTick+0xfc>)
 800606c:	2201      	movs	r2, #1
 800606e:	4252      	negs	r2, r2
 8006070:	601a      	str	r2, [r3, #0]
					break;
 8006072:	e7be      	b.n	8005ff2 <xTaskIncrementTick+0x46>
						xNextTaskUnblockTime = xItemValue;
 8006074:	4a0c      	ldr	r2, [pc, #48]	; (80060a8 <xTaskIncrementTick+0xfc>)
 8006076:	6013      	str	r3, [r2, #0]
						break;
 8006078:	e7bb      	b.n	8005ff2 <xTaskIncrementTick+0x46>
		++uxPendedTicks;
 800607a:	4a0f      	ldr	r2, [pc, #60]	; (80060b8 <xTaskIncrementTick+0x10c>)
 800607c:	6813      	ldr	r3, [r2, #0]
 800607e:	3301      	adds	r3, #1
 8006080:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8006082:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8006084:	4b0d      	ldr	r3, [pc, #52]	; (80060bc <xTaskIncrementTick+0x110>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d000      	beq.n	800608e <xTaskIncrementTick+0xe2>
			xSwitchRequired = pdTRUE;
 800608c:	2401      	movs	r4, #1
}
 800608e:	0020      	movs	r0, r4
 8006090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006092:	46c0      	nop			; (mov r8, r8)
 8006094:	20000a78 	.word	0x20000a78
 8006098:	20000af4 	.word	0x20000af4
 800609c:	200009d8 	.word	0x200009d8
 80060a0:	200009dc 	.word	0x200009dc
 80060a4:	20000ab0 	.word	0x20000ab0
 80060a8:	20000aac 	.word	0x20000aac
 80060ac:	200009d4 	.word	0x200009d4
 80060b0:	200009e0 	.word	0x200009e0
 80060b4:	20000a80 	.word	0x20000a80
 80060b8:	20000a74 	.word	0x20000a74
 80060bc:	20000af8 	.word	0x20000af8

080060c0 <xTaskResumeAll>:
{
 80060c0:	b570      	push	{r4, r5, r6, lr}
	configASSERT( uxSchedulerSuspended );
 80060c2:	4b31      	ldr	r3, [pc, #196]	; (8006188 <xTaskResumeAll+0xc8>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <xTaskResumeAll+0xe>
 80060ca:	b672      	cpsid	i
 80060cc:	e7fe      	b.n	80060cc <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 80060ce:	f000 fb4f 	bl	8006770 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80060d2:	4b2d      	ldr	r3, [pc, #180]	; (8006188 <xTaskResumeAll+0xc8>)
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	3a01      	subs	r2, #1
 80060d8:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d14e      	bne.n	800617e <xTaskResumeAll+0xbe>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80060e0:	4b2a      	ldr	r3, [pc, #168]	; (800618c <xTaskResumeAll+0xcc>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d104      	bne.n	80060f2 <xTaskResumeAll+0x32>
BaseType_t xAlreadyYielded = pdFALSE;
 80060e8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80060ea:	f000 fb4d 	bl	8006788 <vPortExitCritical>
}
 80060ee:	0020      	movs	r0, r4
 80060f0:	bd70      	pop	{r4, r5, r6, pc}
TCB_t *pxTCB = NULL;
 80060f2:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060f4:	4b26      	ldr	r3, [pc, #152]	; (8006190 <xTaskResumeAll+0xd0>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d023      	beq.n	8006144 <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80060fc:	4b24      	ldr	r3, [pc, #144]	; (8006190 <xTaskResumeAll+0xd0>)
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006102:	0020      	movs	r0, r4
 8006104:	3018      	adds	r0, #24
 8006106:	f7ff fa5f 	bl	80055c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800610a:	1d25      	adds	r5, r4, #4
 800610c:	0028      	movs	r0, r5
 800610e:	f7ff fa5b 	bl	80055c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006112:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006114:	4b1f      	ldr	r3, [pc, #124]	; (8006194 <xTaskResumeAll+0xd4>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	429a      	cmp	r2, r3
 800611a:	d901      	bls.n	8006120 <xTaskResumeAll+0x60>
 800611c:	4b1d      	ldr	r3, [pc, #116]	; (8006194 <xTaskResumeAll+0xd4>)
 800611e:	601a      	str	r2, [r3, #0]
 8006120:	0093      	lsls	r3, r2, #2
 8006122:	189b      	adds	r3, r3, r2
 8006124:	0098      	lsls	r0, r3, #2
 8006126:	4b1c      	ldr	r3, [pc, #112]	; (8006198 <xTaskResumeAll+0xd8>)
 8006128:	18c0      	adds	r0, r0, r3
 800612a:	0029      	movs	r1, r5
 800612c:	f7ff fa28 	bl	8005580 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006130:	4b1a      	ldr	r3, [pc, #104]	; (800619c <xTaskResumeAll+0xdc>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006136:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006138:	429a      	cmp	r2, r3
 800613a:	d3db      	bcc.n	80060f4 <xTaskResumeAll+0x34>
						xYieldPending = pdTRUE;
 800613c:	4b18      	ldr	r3, [pc, #96]	; (80061a0 <xTaskResumeAll+0xe0>)
 800613e:	2201      	movs	r2, #1
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	e7d7      	b.n	80060f4 <xTaskResumeAll+0x34>
				if( pxTCB != NULL )
 8006144:	2c00      	cmp	r4, #0
 8006146:	d001      	beq.n	800614c <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8006148:	f7ff fd3e 	bl	8005bc8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800614c:	4b15      	ldr	r3, [pc, #84]	; (80061a4 <xTaskResumeAll+0xe4>)
 800614e:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006150:	2c00      	cmp	r4, #0
 8006152:	d00c      	beq.n	800616e <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 8006154:	f7ff ff2a 	bl	8005fac <xTaskIncrementTick>
 8006158:	2800      	cmp	r0, #0
 800615a:	d002      	beq.n	8006162 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800615c:	4b10      	ldr	r3, [pc, #64]	; (80061a0 <xTaskResumeAll+0xe0>)
 800615e:	2201      	movs	r2, #1
 8006160:	601a      	str	r2, [r3, #0]
							--uxPendedCounts;
 8006162:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006164:	2c00      	cmp	r4, #0
 8006166:	d1f5      	bne.n	8006154 <xTaskResumeAll+0x94>
						uxPendedTicks = 0;
 8006168:	4b0e      	ldr	r3, [pc, #56]	; (80061a4 <xTaskResumeAll+0xe4>)
 800616a:	2200      	movs	r2, #0
 800616c:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 800616e:	4b0c      	ldr	r3, [pc, #48]	; (80061a0 <xTaskResumeAll+0xe0>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d005      	beq.n	8006182 <xTaskResumeAll+0xc2>
					taskYIELD_IF_USING_PREEMPTION();
 8006176:	f000 faef 	bl	8006758 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800617a:	2401      	movs	r4, #1
 800617c:	e7b5      	b.n	80060ea <xTaskResumeAll+0x2a>
BaseType_t xAlreadyYielded = pdFALSE;
 800617e:	2400      	movs	r4, #0
 8006180:	e7b3      	b.n	80060ea <xTaskResumeAll+0x2a>
 8006182:	2400      	movs	r4, #0
 8006184:	e7b1      	b.n	80060ea <xTaskResumeAll+0x2a>
 8006186:	46c0      	nop			; (mov r8, r8)
 8006188:	20000a78 	.word	0x20000a78
 800618c:	20000a6c 	.word	0x20000a6c
 8006190:	20000ab4 	.word	0x20000ab4
 8006194:	20000a80 	.word	0x20000a80
 8006198:	200009e0 	.word	0x200009e0
 800619c:	200009d4 	.word	0x200009d4
 80061a0:	20000af8 	.word	0x20000af8
 80061a4:	20000a74 	.word	0x20000a74

080061a8 <vTaskDelay>:
	{
 80061a8:	b510      	push	{r4, lr}
 80061aa:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061ac:	d00f      	beq.n	80061ce <vTaskDelay+0x26>
			configASSERT( uxSchedulerSuspended == 0 );
 80061ae:	4b09      	ldr	r3, [pc, #36]	; (80061d4 <vTaskDelay+0x2c>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <vTaskDelay+0x12>
 80061b6:	b672      	cpsid	i
 80061b8:	e7fe      	b.n	80061b8 <vTaskDelay+0x10>
			vTaskSuspendAll();
 80061ba:	f7ff feef 	bl	8005f9c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061be:	2100      	movs	r1, #0
 80061c0:	0020      	movs	r0, r4
 80061c2:	f7ff fe23 	bl	8005e0c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80061c6:	f7ff ff7b 	bl	80060c0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80061ca:	2800      	cmp	r0, #0
 80061cc:	d101      	bne.n	80061d2 <vTaskDelay+0x2a>
			portYIELD_WITHIN_API();
 80061ce:	f000 fac3 	bl	8006758 <vPortYield>
	}
 80061d2:	bd10      	pop	{r4, pc}
 80061d4:	20000a78 	.word	0x20000a78

080061d8 <vTaskSwitchContext>:
{
 80061d8:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061da:	4b1d      	ldr	r3, [pc, #116]	; (8006250 <vTaskSwitchContext+0x78>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 80061e2:	4b1c      	ldr	r3, [pc, #112]	; (8006254 <vTaskSwitchContext+0x7c>)
 80061e4:	2201      	movs	r2, #1
 80061e6:	601a      	str	r2, [r3, #0]
}
 80061e8:	bd30      	pop	{r4, r5, pc}
		xYieldPending = pdFALSE;
 80061ea:	4b1a      	ldr	r3, [pc, #104]	; (8006254 <vTaskSwitchContext+0x7c>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80061f0:	4b19      	ldr	r3, [pc, #100]	; (8006258 <vTaskSwitchContext+0x80>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	009a      	lsls	r2, r3, #2
 80061f6:	18d2      	adds	r2, r2, r3
 80061f8:	0091      	lsls	r1, r2, #2
 80061fa:	4a18      	ldr	r2, [pc, #96]	; (800625c <vTaskSwitchContext+0x84>)
 80061fc:	588a      	ldr	r2, [r1, r2]
 80061fe:	2a00      	cmp	r2, #0
 8006200:	d105      	bne.n	800620e <vTaskSwitchContext+0x36>
 8006202:	2b00      	cmp	r3, #0
 8006204:	d001      	beq.n	800620a <vTaskSwitchContext+0x32>
 8006206:	3b01      	subs	r3, #1
 8006208:	e7f4      	b.n	80061f4 <vTaskSwitchContext+0x1c>
 800620a:	b672      	cpsid	i
 800620c:	e7fe      	b.n	800620c <vTaskSwitchContext+0x34>
 800620e:	4d13      	ldr	r5, [pc, #76]	; (800625c <vTaskSwitchContext+0x84>)
 8006210:	0099      	lsls	r1, r3, #2
 8006212:	18ca      	adds	r2, r1, r3
 8006214:	0090      	lsls	r0, r2, #2
 8006216:	1828      	adds	r0, r5, r0
 8006218:	6842      	ldr	r2, [r0, #4]
 800621a:	6854      	ldr	r4, [r2, #4]
 800621c:	6044      	str	r4, [r0, #4]
 800621e:	18c9      	adds	r1, r1, r3
 8006220:	008a      	lsls	r2, r1, #2
 8006222:	3208      	adds	r2, #8
 8006224:	1952      	adds	r2, r2, r5
 8006226:	4294      	cmp	r4, r2
 8006228:	d00b      	beq.n	8006242 <vTaskSwitchContext+0x6a>
 800622a:	009a      	lsls	r2, r3, #2
 800622c:	18d2      	adds	r2, r2, r3
 800622e:	0091      	lsls	r1, r2, #2
 8006230:	4a0a      	ldr	r2, [pc, #40]	; (800625c <vTaskSwitchContext+0x84>)
 8006232:	1852      	adds	r2, r2, r1
 8006234:	6852      	ldr	r2, [r2, #4]
 8006236:	68d1      	ldr	r1, [r2, #12]
 8006238:	4a09      	ldr	r2, [pc, #36]	; (8006260 <vTaskSwitchContext+0x88>)
 800623a:	6011      	str	r1, [r2, #0]
 800623c:	4a06      	ldr	r2, [pc, #24]	; (8006258 <vTaskSwitchContext+0x80>)
 800623e:	6013      	str	r3, [r2, #0]
}
 8006240:	e7d2      	b.n	80061e8 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006242:	6860      	ldr	r0, [r4, #4]
 8006244:	2114      	movs	r1, #20
 8006246:	4359      	muls	r1, r3
 8006248:	186a      	adds	r2, r5, r1
 800624a:	6050      	str	r0, [r2, #4]
 800624c:	e7ed      	b.n	800622a <vTaskSwitchContext+0x52>
 800624e:	46c0      	nop			; (mov r8, r8)
 8006250:	20000a78 	.word	0x20000a78
 8006254:	20000af8 	.word	0x20000af8
 8006258:	20000a80 	.word	0x20000a80
 800625c:	200009e0 	.word	0x200009e0
 8006260:	200009d4 	.word	0x200009d4

08006264 <vTaskPlaceOnEventList>:
{
 8006264:	b510      	push	{r4, lr}
 8006266:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 8006268:	2800      	cmp	r0, #0
 800626a:	d101      	bne.n	8006270 <vTaskPlaceOnEventList+0xc>
 800626c:	b672      	cpsid	i
 800626e:	e7fe      	b.n	800626e <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006270:	4b04      	ldr	r3, [pc, #16]	; (8006284 <vTaskPlaceOnEventList+0x20>)
 8006272:	6819      	ldr	r1, [r3, #0]
 8006274:	3118      	adds	r1, #24
 8006276:	f7ff f98f 	bl	8005598 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800627a:	2101      	movs	r1, #1
 800627c:	0020      	movs	r0, r4
 800627e:	f7ff fdc5 	bl	8005e0c <prvAddCurrentTaskToDelayedList>
}
 8006282:	bd10      	pop	{r4, pc}
 8006284:	200009d4 	.word	0x200009d4

08006288 <xTaskRemoveFromEventList>:
{
 8006288:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800628a:	68c3      	ldr	r3, [r0, #12]
 800628c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800628e:	2c00      	cmp	r4, #0
 8006290:	d101      	bne.n	8006296 <xTaskRemoveFromEventList+0xe>
 8006292:	b672      	cpsid	i
 8006294:	e7fe      	b.n	8006294 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006296:	0025      	movs	r5, r4
 8006298:	3518      	adds	r5, #24
 800629a:	0028      	movs	r0, r5
 800629c:	f7ff f994 	bl	80055c8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062a0:	4b14      	ldr	r3, [pc, #80]	; (80062f4 <xTaskRemoveFromEventList+0x6c>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d11d      	bne.n	80062e4 <xTaskRemoveFromEventList+0x5c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80062a8:	1d25      	adds	r5, r4, #4
 80062aa:	0028      	movs	r0, r5
 80062ac:	f7ff f98c 	bl	80055c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80062b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80062b2:	4b11      	ldr	r3, [pc, #68]	; (80062f8 <xTaskRemoveFromEventList+0x70>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d901      	bls.n	80062be <xTaskRemoveFromEventList+0x36>
 80062ba:	4b0f      	ldr	r3, [pc, #60]	; (80062f8 <xTaskRemoveFromEventList+0x70>)
 80062bc:	601a      	str	r2, [r3, #0]
 80062be:	0093      	lsls	r3, r2, #2
 80062c0:	189b      	adds	r3, r3, r2
 80062c2:	0098      	lsls	r0, r3, #2
 80062c4:	4b0d      	ldr	r3, [pc, #52]	; (80062fc <xTaskRemoveFromEventList+0x74>)
 80062c6:	18c0      	adds	r0, r0, r3
 80062c8:	0029      	movs	r1, r5
 80062ca:	f7ff f959 	bl	8005580 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80062d0:	4b0b      	ldr	r3, [pc, #44]	; (8006300 <xTaskRemoveFromEventList+0x78>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d909      	bls.n	80062ee <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 80062da:	4b0a      	ldr	r3, [pc, #40]	; (8006304 <xTaskRemoveFromEventList+0x7c>)
 80062dc:	2201      	movs	r2, #1
 80062de:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 80062e0:	2001      	movs	r0, #1
}
 80062e2:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80062e4:	0029      	movs	r1, r5
 80062e6:	4808      	ldr	r0, [pc, #32]	; (8006308 <xTaskRemoveFromEventList+0x80>)
 80062e8:	f7ff f94a 	bl	8005580 <vListInsertEnd>
 80062ec:	e7ef      	b.n	80062ce <xTaskRemoveFromEventList+0x46>
		xReturn = pdFALSE;
 80062ee:	2000      	movs	r0, #0
	return xReturn;
 80062f0:	e7f7      	b.n	80062e2 <xTaskRemoveFromEventList+0x5a>
 80062f2:	46c0      	nop			; (mov r8, r8)
 80062f4:	20000a78 	.word	0x20000a78
 80062f8:	20000a80 	.word	0x20000a80
 80062fc:	200009e0 	.word	0x200009e0
 8006300:	200009d4 	.word	0x200009d4
 8006304:	20000af8 	.word	0x20000af8
 8006308:	20000ab4 	.word	0x20000ab4

0800630c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800630c:	4b03      	ldr	r3, [pc, #12]	; (800631c <vTaskInternalSetTimeOutState+0x10>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006312:	4b03      	ldr	r3, [pc, #12]	; (8006320 <vTaskInternalSetTimeOutState+0x14>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	6043      	str	r3, [r0, #4]
}
 8006318:	4770      	bx	lr
 800631a:	46c0      	nop			; (mov r8, r8)
 800631c:	20000ab0 	.word	0x20000ab0
 8006320:	20000af4 	.word	0x20000af4

08006324 <xTaskCheckForTimeOut>:
{
 8006324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006326:	0005      	movs	r5, r0
 8006328:	000c      	movs	r4, r1
	configASSERT( pxTimeOut );
 800632a:	2800      	cmp	r0, #0
 800632c:	d003      	beq.n	8006336 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800632e:	2900      	cmp	r1, #0
 8006330:	d103      	bne.n	800633a <xTaskCheckForTimeOut+0x16>
 8006332:	b672      	cpsid	i
 8006334:	e7fe      	b.n	8006334 <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTimeOut );
 8006336:	b672      	cpsid	i
 8006338:	e7fe      	b.n	8006338 <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 800633a:	f000 fa19 	bl	8006770 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800633e:	4b11      	ldr	r3, [pc, #68]	; (8006384 <xTaskCheckForTimeOut+0x60>)
 8006340:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006342:	6868      	ldr	r0, [r5, #4]
 8006344:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	1c5e      	adds	r6, r3, #1
 800634a:	d016      	beq.n	800637a <xTaskCheckForTimeOut+0x56>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800634c:	4e0e      	ldr	r6, [pc, #56]	; (8006388 <xTaskCheckForTimeOut+0x64>)
 800634e:	6836      	ldr	r6, [r6, #0]
 8006350:	682f      	ldr	r7, [r5, #0]
 8006352:	42b7      	cmp	r7, r6
 8006354:	d001      	beq.n	800635a <xTaskCheckForTimeOut+0x36>
 8006356:	4288      	cmp	r0, r1
 8006358:	d911      	bls.n	800637e <xTaskCheckForTimeOut+0x5a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800635a:	4293      	cmp	r3, r2
 800635c:	d803      	bhi.n	8006366 <xTaskCheckForTimeOut+0x42>
			*pxTicksToWait = 0;
 800635e:	2300      	movs	r3, #0
 8006360:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8006362:	2401      	movs	r4, #1
 8006364:	e005      	b.n	8006372 <xTaskCheckForTimeOut+0x4e>
			*pxTicksToWait -= xElapsedTime;
 8006366:	1a9b      	subs	r3, r3, r2
 8006368:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800636a:	0028      	movs	r0, r5
 800636c:	f7ff ffce 	bl	800630c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006370:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006372:	f000 fa09 	bl	8006788 <vPortExitCritical>
}
 8006376:	0020      	movs	r0, r4
 8006378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 800637a:	2400      	movs	r4, #0
 800637c:	e7f9      	b.n	8006372 <xTaskCheckForTimeOut+0x4e>
			xReturn = pdTRUE;
 800637e:	2401      	movs	r4, #1
 8006380:	e7f7      	b.n	8006372 <xTaskCheckForTimeOut+0x4e>
 8006382:	46c0      	nop			; (mov r8, r8)
 8006384:	20000af4 	.word	0x20000af4
 8006388:	20000ab0 	.word	0x20000ab0

0800638c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800638c:	4b01      	ldr	r3, [pc, #4]	; (8006394 <vTaskMissedYield+0x8>)
 800638e:	2201      	movs	r2, #1
 8006390:	601a      	str	r2, [r3, #0]
}
 8006392:	4770      	bx	lr
 8006394:	20000af8 	.word	0x20000af8

08006398 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006398:	4b06      	ldr	r3, [pc, #24]	; (80063b4 <xTaskGetSchedulerState+0x1c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d007      	beq.n	80063b0 <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063a0:	4b05      	ldr	r3, [pc, #20]	; (80063b8 <xTaskGetSchedulerState+0x20>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d001      	beq.n	80063ac <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 80063a8:	2000      	movs	r0, #0
		return xReturn;
 80063aa:	e002      	b.n	80063b2 <xTaskGetSchedulerState+0x1a>
				xReturn = taskSCHEDULER_RUNNING;
 80063ac:	2002      	movs	r0, #2
 80063ae:	e000      	b.n	80063b2 <xTaskGetSchedulerState+0x1a>
			xReturn = taskSCHEDULER_NOT_STARTED;
 80063b0:	2001      	movs	r0, #1
	}
 80063b2:	4770      	bx	lr
 80063b4:	20000ac8 	.word	0x20000ac8
 80063b8:	20000a78 	.word	0x20000a78

080063bc <xTaskPriorityDisinherit>:
	{
 80063bc:	b570      	push	{r4, r5, r6, lr}
 80063be:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 80063c0:	d02a      	beq.n	8006418 <xTaskPriorityDisinherit+0x5c>
			configASSERT( pxTCB == pxCurrentTCB );
 80063c2:	4b18      	ldr	r3, [pc, #96]	; (8006424 <xTaskPriorityDisinherit+0x68>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4283      	cmp	r3, r0
 80063c8:	d001      	beq.n	80063ce <xTaskPriorityDisinherit+0x12>
 80063ca:	b672      	cpsid	i
 80063cc:	e7fe      	b.n	80063cc <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 80063ce:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <xTaskPriorityDisinherit+0x1c>
 80063d4:	b672      	cpsid	i
 80063d6:	e7fe      	b.n	80063d6 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 80063d8:	3b01      	subs	r3, #1
 80063da:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80063dc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80063de:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80063e0:	428a      	cmp	r2, r1
 80063e2:	d01b      	beq.n	800641c <xTaskPriorityDisinherit+0x60>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d11b      	bne.n	8006420 <xTaskPriorityDisinherit+0x64>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063e8:	1d05      	adds	r5, r0, #4
 80063ea:	0028      	movs	r0, r5
 80063ec:	f7ff f8ec 	bl	80055c8 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80063f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80063f2:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063f4:	2207      	movs	r2, #7
 80063f6:	1ad2      	subs	r2, r2, r3
 80063f8:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80063fa:	4a0b      	ldr	r2, [pc, #44]	; (8006428 <xTaskPriorityDisinherit+0x6c>)
 80063fc:	6812      	ldr	r2, [r2, #0]
 80063fe:	4293      	cmp	r3, r2
 8006400:	d901      	bls.n	8006406 <xTaskPriorityDisinherit+0x4a>
 8006402:	4a09      	ldr	r2, [pc, #36]	; (8006428 <xTaskPriorityDisinherit+0x6c>)
 8006404:	6013      	str	r3, [r2, #0]
 8006406:	2014      	movs	r0, #20
 8006408:	4358      	muls	r0, r3
 800640a:	4b08      	ldr	r3, [pc, #32]	; (800642c <xTaskPriorityDisinherit+0x70>)
 800640c:	18c0      	adds	r0, r0, r3
 800640e:	0029      	movs	r1, r5
 8006410:	f7ff f8b6 	bl	8005580 <vListInsertEnd>
					xReturn = pdTRUE;
 8006414:	2001      	movs	r0, #1
 8006416:	e000      	b.n	800641a <xTaskPriorityDisinherit+0x5e>
	BaseType_t xReturn = pdFALSE;
 8006418:	2000      	movs	r0, #0
	}
 800641a:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 800641c:	2000      	movs	r0, #0
 800641e:	e7fc      	b.n	800641a <xTaskPriorityDisinherit+0x5e>
 8006420:	2000      	movs	r0, #0
		return xReturn;
 8006422:	e7fa      	b.n	800641a <xTaskPriorityDisinherit+0x5e>
 8006424:	200009d4 	.word	0x200009d4
 8006428:	20000a80 	.word	0x20000a80
 800642c:	200009e0 	.word	0x200009e0

08006430 <xTaskNotifyWait>:
	{
 8006430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006432:	0007      	movs	r7, r0
 8006434:	000e      	movs	r6, r1
 8006436:	0014      	movs	r4, r2
 8006438:	001d      	movs	r5, r3
		taskENTER_CRITICAL();
 800643a:	f000 f999 	bl	8006770 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800643e:	4b1c      	ldr	r3, [pc, #112]	; (80064b0 <xTaskNotifyWait+0x80>)
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	2350      	movs	r3, #80	; 0x50
 8006444:	5cd3      	ldrb	r3, [r2, r3]
 8006446:	2b02      	cmp	r3, #2
 8006448:	d00a      	beq.n	8006460 <xTaskNotifyWait+0x30>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800644a:	4a19      	ldr	r2, [pc, #100]	; (80064b0 <xTaskNotifyWait+0x80>)
 800644c:	6811      	ldr	r1, [r2, #0]
 800644e:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8006450:	43bb      	bics	r3, r7
 8006452:	64cb      	str	r3, [r1, #76]	; 0x4c
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006454:	6812      	ldr	r2, [r2, #0]
 8006456:	2350      	movs	r3, #80	; 0x50
 8006458:	2101      	movs	r1, #1
 800645a:	54d1      	strb	r1, [r2, r3]
				if( xTicksToWait > ( TickType_t ) 0 )
 800645c:	2d00      	cmp	r5, #0
 800645e:	d119      	bne.n	8006494 <xTaskNotifyWait+0x64>
		taskEXIT_CRITICAL();
 8006460:	f000 f992 	bl	8006788 <vPortExitCritical>
		taskENTER_CRITICAL();
 8006464:	f000 f984 	bl	8006770 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 8006468:	2c00      	cmp	r4, #0
 800646a:	d003      	beq.n	8006474 <xTaskNotifyWait+0x44>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800646c:	4b10      	ldr	r3, [pc, #64]	; (80064b0 <xTaskNotifyWait+0x80>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006472:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006474:	4b0e      	ldr	r3, [pc, #56]	; (80064b0 <xTaskNotifyWait+0x80>)
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	2350      	movs	r3, #80	; 0x50
 800647a:	5cd3      	ldrb	r3, [r2, r3]
 800647c:	2b02      	cmp	r3, #2
 800647e:	d00f      	beq.n	80064a0 <xTaskNotifyWait+0x70>
				xReturn = pdFALSE;
 8006480:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006482:	4b0b      	ldr	r3, [pc, #44]	; (80064b0 <xTaskNotifyWait+0x80>)
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	2350      	movs	r3, #80	; 0x50
 8006488:	2100      	movs	r1, #0
 800648a:	54d1      	strb	r1, [r2, r3]
		taskEXIT_CRITICAL();
 800648c:	f000 f97c 	bl	8006788 <vPortExitCritical>
	}
 8006490:	0020      	movs	r0, r4
 8006492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006494:	0028      	movs	r0, r5
 8006496:	f7ff fcb9 	bl	8005e0c <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800649a:	f000 f95d 	bl	8006758 <vPortYield>
 800649e:	e7df      	b.n	8006460 <xTaskNotifyWait+0x30>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80064a0:	4b03      	ldr	r3, [pc, #12]	; (80064b0 <xTaskNotifyWait+0x80>)
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80064a6:	43b3      	bics	r3, r6
 80064a8:	64d3      	str	r3, [r2, #76]	; 0x4c
				xReturn = pdTRUE;
 80064aa:	2401      	movs	r4, #1
 80064ac:	e7e9      	b.n	8006482 <xTaskNotifyWait+0x52>
 80064ae:	46c0      	nop			; (mov r8, r8)
 80064b0:	200009d4 	.word	0x200009d4

080064b4 <xTaskGenericNotify>:
	{
 80064b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b6:	0004      	movs	r4, r0
 80064b8:	000e      	movs	r6, r1
 80064ba:	0015      	movs	r5, r2
 80064bc:	001f      	movs	r7, r3
		configASSERT( xTaskToNotify );
 80064be:	2800      	cmp	r0, #0
 80064c0:	d101      	bne.n	80064c6 <xTaskGenericNotify+0x12>
 80064c2:	b672      	cpsid	i
 80064c4:	e7fe      	b.n	80064c4 <xTaskGenericNotify+0x10>
		taskENTER_CRITICAL();
 80064c6:	f000 f953 	bl	8006770 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 80064ca:	2f00      	cmp	r7, #0
 80064cc:	d001      	beq.n	80064d2 <xTaskGenericNotify+0x1e>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80064ce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80064d0:	603b      	str	r3, [r7, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80064d2:	2250      	movs	r2, #80	; 0x50
 80064d4:	5ca3      	ldrb	r3, [r4, r2]
 80064d6:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80064d8:	2102      	movs	r1, #2
 80064da:	54a1      	strb	r1, [r4, r2]
			switch( eAction )
 80064dc:	2d02      	cmp	r5, #2
 80064de:	d017      	beq.n	8006510 <xTaskGenericNotify+0x5c>
 80064e0:	d908      	bls.n	80064f4 <xTaskGenericNotify+0x40>
 80064e2:	2d03      	cmp	r5, #3
 80064e4:	d019      	beq.n	800651a <xTaskGenericNotify+0x66>
 80064e6:	2d04      	cmp	r5, #4
 80064e8:	d106      	bne.n	80064f8 <xTaskGenericNotify+0x44>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d018      	beq.n	8006520 <xTaskGenericNotify+0x6c>
						pxTCB->ulNotifiedValue = ulValue;
 80064ee:	64e6      	str	r6, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 80064f0:	2501      	movs	r5, #1
 80064f2:	e007      	b.n	8006504 <xTaskGenericNotify+0x50>
			switch( eAction )
 80064f4:	2d01      	cmp	r5, #1
 80064f6:	d001      	beq.n	80064fc <xTaskGenericNotify+0x48>
	BaseType_t xReturn = pdPASS;
 80064f8:	2501      	movs	r5, #1
 80064fa:	e003      	b.n	8006504 <xTaskGenericNotify+0x50>
					pxTCB->ulNotifiedValue |= ulValue;
 80064fc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80064fe:	4316      	orrs	r6, r2
 8006500:	64e6      	str	r6, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 8006502:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006504:	2b01      	cmp	r3, #1
 8006506:	d00d      	beq.n	8006524 <xTaskGenericNotify+0x70>
		taskEXIT_CRITICAL();
 8006508:	f000 f93e 	bl	8006788 <vPortExitCritical>
	}
 800650c:	0028      	movs	r0, r5
 800650e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 8006510:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006512:	3201      	adds	r2, #1
 8006514:	64e2      	str	r2, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 8006516:	2501      	movs	r5, #1
					break;
 8006518:	e7f4      	b.n	8006504 <xTaskGenericNotify+0x50>
					pxTCB->ulNotifiedValue = ulValue;
 800651a:	64e6      	str	r6, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 800651c:	2501      	movs	r5, #1
					break;
 800651e:	e7f1      	b.n	8006504 <xTaskGenericNotify+0x50>
						xReturn = pdFAIL;
 8006520:	2500      	movs	r5, #0
 8006522:	e7ef      	b.n	8006504 <xTaskGenericNotify+0x50>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006524:	1d26      	adds	r6, r4, #4
 8006526:	0030      	movs	r0, r6
 8006528:	f7ff f84e 	bl	80055c8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800652c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800652e:	4a0d      	ldr	r2, [pc, #52]	; (8006564 <xTaskGenericNotify+0xb0>)
 8006530:	6812      	ldr	r2, [r2, #0]
 8006532:	4293      	cmp	r3, r2
 8006534:	d901      	bls.n	800653a <xTaskGenericNotify+0x86>
 8006536:	4a0b      	ldr	r2, [pc, #44]	; (8006564 <xTaskGenericNotify+0xb0>)
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	2014      	movs	r0, #20
 800653c:	4358      	muls	r0, r3
 800653e:	4b0a      	ldr	r3, [pc, #40]	; (8006568 <xTaskGenericNotify+0xb4>)
 8006540:	18c0      	adds	r0, r0, r3
 8006542:	0031      	movs	r1, r6
 8006544:	f7ff f81c 	bl	8005580 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006548:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <xTaskGenericNotify+0x9e>
 800654e:	b672      	cpsid	i
 8006550:	e7fe      	b.n	8006550 <xTaskGenericNotify+0x9c>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006552:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006554:	4b05      	ldr	r3, [pc, #20]	; (800656c <xTaskGenericNotify+0xb8>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655a:	429a      	cmp	r2, r3
 800655c:	d9d4      	bls.n	8006508 <xTaskGenericNotify+0x54>
					taskYIELD_IF_USING_PREEMPTION();
 800655e:	f000 f8fb 	bl	8006758 <vPortYield>
 8006562:	e7d1      	b.n	8006508 <xTaskGenericNotify+0x54>
 8006564:	20000a80 	.word	0x20000a80
 8006568:	200009e0 	.word	0x200009e0
 800656c:	200009d4 	.word	0x200009d4

08006570 <xTaskGenericNotifyFromISR>:
	{
 8006570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006572:	b083      	sub	sp, #12
 8006574:	0004      	movs	r4, r0
 8006576:	000f      	movs	r7, r1
 8006578:	0016      	movs	r6, r2
 800657a:	001d      	movs	r5, r3
		configASSERT( xTaskToNotify );
 800657c:	2800      	cmp	r0, #0
 800657e:	d101      	bne.n	8006584 <xTaskGenericNotifyFromISR+0x14>
 8006580:	b672      	cpsid	i
 8006582:	e7fe      	b.n	8006582 <xTaskGenericNotifyFromISR+0x12>
		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006584:	f000 f910 	bl	80067a8 <ulSetInterruptMaskFromISR>
 8006588:	9001      	str	r0, [sp, #4]
			if( pulPreviousNotificationValue != NULL )
 800658a:	2d00      	cmp	r5, #0
 800658c:	d001      	beq.n	8006592 <xTaskGenericNotifyFromISR+0x22>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800658e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006590:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006592:	2250      	movs	r2, #80	; 0x50
 8006594:	5ca3      	ldrb	r3, [r4, r2]
 8006596:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006598:	2102      	movs	r1, #2
 800659a:	54a1      	strb	r1, [r4, r2]
			switch( eAction )
 800659c:	2e02      	cmp	r6, #2
 800659e:	d018      	beq.n	80065d2 <xTaskGenericNotifyFromISR+0x62>
 80065a0:	d908      	bls.n	80065b4 <xTaskGenericNotifyFromISR+0x44>
 80065a2:	2e03      	cmp	r6, #3
 80065a4:	d01a      	beq.n	80065dc <xTaskGenericNotifyFromISR+0x6c>
 80065a6:	2e04      	cmp	r6, #4
 80065a8:	d106      	bne.n	80065b8 <xTaskGenericNotifyFromISR+0x48>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d019      	beq.n	80065e2 <xTaskGenericNotifyFromISR+0x72>
						pxTCB->ulNotifiedValue = ulValue;
 80065ae:	64e7      	str	r7, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 80065b0:	2701      	movs	r7, #1
 80065b2:	e007      	b.n	80065c4 <xTaskGenericNotifyFromISR+0x54>
			switch( eAction )
 80065b4:	2e01      	cmp	r6, #1
 80065b6:	d001      	beq.n	80065bc <xTaskGenericNotifyFromISR+0x4c>
	BaseType_t xReturn = pdPASS;
 80065b8:	2701      	movs	r7, #1
 80065ba:	e003      	b.n	80065c4 <xTaskGenericNotifyFromISR+0x54>
					pxTCB->ulNotifiedValue |= ulValue;
 80065bc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80065be:	433a      	orrs	r2, r7
 80065c0:	64e2      	str	r2, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 80065c2:	2701      	movs	r7, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d130      	bne.n	800662a <xTaskGenericNotifyFromISR+0xba>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80065c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00b      	beq.n	80065e6 <xTaskGenericNotifyFromISR+0x76>
 80065ce:	b672      	cpsid	i
 80065d0:	e7fe      	b.n	80065d0 <xTaskGenericNotifyFromISR+0x60>
					( pxTCB->ulNotifiedValue )++;
 80065d2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80065d4:	3201      	adds	r2, #1
 80065d6:	64e2      	str	r2, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 80065d8:	2701      	movs	r7, #1
					break;
 80065da:	e7f3      	b.n	80065c4 <xTaskGenericNotifyFromISR+0x54>
					pxTCB->ulNotifiedValue = ulValue;
 80065dc:	64e7      	str	r7, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 80065de:	2701      	movs	r7, #1
					break;
 80065e0:	e7f0      	b.n	80065c4 <xTaskGenericNotifyFromISR+0x54>
						xReturn = pdFAIL;
 80065e2:	2700      	movs	r7, #0
 80065e4:	e7ee      	b.n	80065c4 <xTaskGenericNotifyFromISR+0x54>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065e6:	4b19      	ldr	r3, [pc, #100]	; (800664c <xTaskGenericNotifyFromISR+0xdc>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d123      	bne.n	8006636 <xTaskGenericNotifyFromISR+0xc6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065ee:	1d26      	adds	r6, r4, #4
 80065f0:	0030      	movs	r0, r6
 80065f2:	f7fe ffe9 	bl	80055c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80065f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80065f8:	4a15      	ldr	r2, [pc, #84]	; (8006650 <xTaskGenericNotifyFromISR+0xe0>)
 80065fa:	6812      	ldr	r2, [r2, #0]
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d901      	bls.n	8006604 <xTaskGenericNotifyFromISR+0x94>
 8006600:	4a13      	ldr	r2, [pc, #76]	; (8006650 <xTaskGenericNotifyFromISR+0xe0>)
 8006602:	6013      	str	r3, [r2, #0]
 8006604:	2014      	movs	r0, #20
 8006606:	4358      	muls	r0, r3
 8006608:	4b12      	ldr	r3, [pc, #72]	; (8006654 <xTaskGenericNotifyFromISR+0xe4>)
 800660a:	18c0      	adds	r0, r0, r3
 800660c:	0031      	movs	r1, r6
 800660e:	f7fe ffb7 	bl	8005580 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006612:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006614:	4b10      	ldr	r3, [pc, #64]	; (8006658 <xTaskGenericNotifyFromISR+0xe8>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661a:	429a      	cmp	r2, r3
 800661c:	d905      	bls.n	800662a <xTaskGenericNotifyFromISR+0xba>
					if( pxHigherPriorityTaskWoken != NULL )
 800661e:	9b08      	ldr	r3, [sp, #32]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00e      	beq.n	8006642 <xTaskGenericNotifyFromISR+0xd2>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006624:	2301      	movs	r3, #1
 8006626:	9a08      	ldr	r2, [sp, #32]
 8006628:	6013      	str	r3, [r2, #0]
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800662a:	9801      	ldr	r0, [sp, #4]
 800662c:	f000 f8c0 	bl	80067b0 <vClearInterruptMaskFromISR>
	}
 8006630:	0038      	movs	r0, r7
 8006632:	b003      	add	sp, #12
 8006634:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006636:	0021      	movs	r1, r4
 8006638:	3118      	adds	r1, #24
 800663a:	4808      	ldr	r0, [pc, #32]	; (800665c <xTaskGenericNotifyFromISR+0xec>)
 800663c:	f7fe ffa0 	bl	8005580 <vListInsertEnd>
 8006640:	e7e7      	b.n	8006612 <xTaskGenericNotifyFromISR+0xa2>
						xYieldPending = pdTRUE;
 8006642:	4b07      	ldr	r3, [pc, #28]	; (8006660 <xTaskGenericNotifyFromISR+0xf0>)
 8006644:	2201      	movs	r2, #1
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	e7ef      	b.n	800662a <xTaskGenericNotifyFromISR+0xba>
 800664a:	46c0      	nop			; (mov r8, r8)
 800664c:	20000a78 	.word	0x20000a78
 8006650:	20000a80 	.word	0x20000a80
 8006654:	200009e0 	.word	0x200009e0
 8006658:	200009d4 	.word	0x200009d4
 800665c:	20000ab4 	.word	0x20000ab4
 8006660:	20000af8 	.word	0x20000af8

08006664 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006664:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8006666:	2300      	movs	r3, #0
 8006668:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800666a:	4b06      	ldr	r3, [pc, #24]	; (8006684 <prvTaskExitError+0x20>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	3301      	adds	r3, #1
 8006670:	d001      	beq.n	8006676 <prvTaskExitError+0x12>
 8006672:	b672      	cpsid	i
 8006674:	e7fe      	b.n	8006674 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
 8006676:	b672      	cpsid	i
	while( ulDummy == 0 )
 8006678:	9b01      	ldr	r3, [sp, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d0fc      	beq.n	8006678 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800667e:	b002      	add	sp, #8
 8006680:	4770      	bx	lr
 8006682:	46c0      	nop			; (mov r8, r8)
 8006684:	20000000 	.word	0x20000000
	...

08006690 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8006690:	4a0b      	ldr	r2, [pc, #44]	; (80066c0 <pxCurrentTCBConst2>)
 8006692:	6813      	ldr	r3, [r2, #0]
 8006694:	6818      	ldr	r0, [r3, #0]
 8006696:	3020      	adds	r0, #32
 8006698:	f380 8809 	msr	PSP, r0
 800669c:	2002      	movs	r0, #2
 800669e:	f380 8814 	msr	CONTROL, r0
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80066a8:	46ae      	mov	lr, r5
 80066aa:	bc08      	pop	{r3}
 80066ac:	bc04      	pop	{r2}
 80066ae:	b662      	cpsie	i
 80066b0:	4718      	bx	r3
 80066b2:	46c0      	nop			; (mov r8, r8)
 80066b4:	46c0      	nop			; (mov r8, r8)
 80066b6:	46c0      	nop			; (mov r8, r8)
 80066b8:	46c0      	nop			; (mov r8, r8)
 80066ba:	46c0      	nop			; (mov r8, r8)
 80066bc:	46c0      	nop			; (mov r8, r8)
 80066be:	46c0      	nop			; (mov r8, r8)

080066c0 <pxCurrentTCBConst2>:
 80066c0:	200009d4 	.word	0x200009d4

080066c4 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80066c4:	b510      	push	{r4, lr}
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80066c6:	4c08      	ldr	r4, [pc, #32]	; (80066e8 <prvSetupTimerInterrupt+0x24>)
 80066c8:	2300      	movs	r3, #0
 80066ca:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80066cc:	4a07      	ldr	r2, [pc, #28]	; (80066ec <prvSetupTimerInterrupt+0x28>)
 80066ce:	6013      	str	r3, [r2, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80066d0:	4b07      	ldr	r3, [pc, #28]	; (80066f0 <prvSetupTimerInterrupt+0x2c>)
 80066d2:	6818      	ldr	r0, [r3, #0]
 80066d4:	21fa      	movs	r1, #250	; 0xfa
 80066d6:	0089      	lsls	r1, r1, #2
 80066d8:	f7f9 fd32 	bl	8000140 <__udivsi3>
 80066dc:	3801      	subs	r0, #1
 80066de:	4b05      	ldr	r3, [pc, #20]	; (80066f4 <prvSetupTimerInterrupt+0x30>)
 80066e0:	6018      	str	r0, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80066e2:	2307      	movs	r3, #7
 80066e4:	6023      	str	r3, [r4, #0]
}
 80066e6:	bd10      	pop	{r4, pc}
 80066e8:	e000e010 	.word	0xe000e010
 80066ec:	e000e018 	.word	0xe000e018
 80066f0:	20000004 	.word	0x20000004
 80066f4:	e000e014 	.word	0xe000e014

080066f8 <pxPortInitialiseStack>:
{
 80066f8:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80066fa:	1f03      	subs	r3, r0, #4
 80066fc:	2480      	movs	r4, #128	; 0x80
 80066fe:	0464      	lsls	r4, r4, #17
 8006700:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8006702:	3b04      	subs	r3, #4
 8006704:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006706:	3b04      	subs	r3, #4
 8006708:	4902      	ldr	r1, [pc, #8]	; (8006714 <pxPortInitialiseStack+0x1c>)
 800670a:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800670c:	3b14      	subs	r3, #20
 800670e:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8006710:	3840      	subs	r0, #64	; 0x40
}
 8006712:	bd10      	pop	{r4, pc}
 8006714:	08006665 	.word	0x08006665

08006718 <SVC_Handler>:
}
 8006718:	4770      	bx	lr
	...

0800671c <xPortStartScheduler>:
{
 800671c:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800671e:	4b0c      	ldr	r3, [pc, #48]	; (8006750 <xPortStartScheduler+0x34>)
 8006720:	6819      	ldr	r1, [r3, #0]
 8006722:	22ff      	movs	r2, #255	; 0xff
 8006724:	0412      	lsls	r2, r2, #16
 8006726:	430a      	orrs	r2, r1
 8006728:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800672a:	6819      	ldr	r1, [r3, #0]
 800672c:	22ff      	movs	r2, #255	; 0xff
 800672e:	0612      	lsls	r2, r2, #24
 8006730:	430a      	orrs	r2, r1
 8006732:	601a      	str	r2, [r3, #0]
	prvSetupTimerInterrupt();
 8006734:	f7ff ffc6 	bl	80066c4 <prvSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006738:	4b06      	ldr	r3, [pc, #24]	; (8006754 <xPortStartScheduler+0x38>)
 800673a:	2200      	movs	r2, #0
 800673c:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800673e:	f7ff ffa7 	bl	8006690 <vPortStartFirstTask>
	vTaskSwitchContext();
 8006742:	f7ff fd49 	bl	80061d8 <vTaskSwitchContext>
	prvTaskExitError();
 8006746:	f7ff ff8d 	bl	8006664 <prvTaskExitError>
}
 800674a:	2000      	movs	r0, #0
 800674c:	bd10      	pop	{r4, pc}
 800674e:	46c0      	nop			; (mov r8, r8)
 8006750:	e000ed20 	.word	0xe000ed20
 8006754:	20000000 	.word	0x20000000

08006758 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8006758:	4b04      	ldr	r3, [pc, #16]	; (800676c <vPortYield+0x14>)
 800675a:	2280      	movs	r2, #128	; 0x80
 800675c:	0552      	lsls	r2, r2, #21
 800675e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8006760:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006764:	f3bf 8f6f 	isb	sy
}
 8006768:	4770      	bx	lr
 800676a:	46c0      	nop			; (mov r8, r8)
 800676c:	e000ed04 	.word	0xe000ed04

08006770 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 8006770:	b672      	cpsid	i
    uxCriticalNesting++;
 8006772:	4a04      	ldr	r2, [pc, #16]	; (8006784 <vPortEnterCritical+0x14>)
 8006774:	6813      	ldr	r3, [r2, #0]
 8006776:	3301      	adds	r3, #1
 8006778:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
 800677a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800677e:	f3bf 8f6f 	isb	sy
}
 8006782:	4770      	bx	lr
 8006784:	20000000 	.word	0x20000000

08006788 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006788:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <vPortExitCritical+0x1c>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d101      	bne.n	8006794 <vPortExitCritical+0xc>
 8006790:	b672      	cpsid	i
 8006792:	e7fe      	b.n	8006792 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 8006794:	3b01      	subs	r3, #1
 8006796:	4a03      	ldr	r2, [pc, #12]	; (80067a4 <vPortExitCritical+0x1c>)
 8006798:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800679a:	2b00      	cmp	r3, #0
 800679c:	d100      	bne.n	80067a0 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 800679e:	b662      	cpsie	i
}
 80067a0:	4770      	bx	lr
 80067a2:	46c0      	nop			; (mov r8, r8)
 80067a4:	20000000 	.word	0x20000000

080067a8 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 80067a8:	f3ef 8010 	mrs	r0, PRIMASK
 80067ac:	b672      	cpsid	i
 80067ae:	4770      	bx	lr

080067b0 <vClearInterruptMaskFromISR>:
	__asm volatile(
 80067b0:	f380 8810 	msr	PRIMASK, r0
 80067b4:	4770      	bx	lr
	...

080067c0 <PendSV_Handler>:
	__asm volatile
 80067c0:	f3ef 8009 	mrs	r0, PSP
 80067c4:	4b0e      	ldr	r3, [pc, #56]	; (8006800 <pxCurrentTCBConst>)
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	3820      	subs	r0, #32
 80067ca:	6010      	str	r0, [r2, #0]
 80067cc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80067ce:	4644      	mov	r4, r8
 80067d0:	464d      	mov	r5, r9
 80067d2:	4656      	mov	r6, sl
 80067d4:	465f      	mov	r7, fp
 80067d6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80067d8:	b508      	push	{r3, lr}
 80067da:	b672      	cpsid	i
 80067dc:	f7ff fcfc 	bl	80061d8 <vTaskSwitchContext>
 80067e0:	b662      	cpsie	i
 80067e2:	bc0c      	pop	{r2, r3}
 80067e4:	6811      	ldr	r1, [r2, #0]
 80067e6:	6808      	ldr	r0, [r1, #0]
 80067e8:	3010      	adds	r0, #16
 80067ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80067ec:	46a0      	mov	r8, r4
 80067ee:	46a9      	mov	r9, r5
 80067f0:	46b2      	mov	sl, r6
 80067f2:	46bb      	mov	fp, r7
 80067f4:	f380 8809 	msr	PSP, r0
 80067f8:	3820      	subs	r0, #32
 80067fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80067fc:	4718      	bx	r3
 80067fe:	46c0      	nop			; (mov r8, r8)

08006800 <pxCurrentTCBConst>:
 8006800:	200009d4 	.word	0x200009d4

08006804 <SysTick_Handler>:
{
 8006804:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8006806:	f7ff ffcf 	bl	80067a8 <ulSetInterruptMaskFromISR>
 800680a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800680c:	f7ff fbce 	bl	8005fac <xTaskIncrementTick>
 8006810:	2800      	cmp	r0, #0
 8006812:	d003      	beq.n	800681c <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8006814:	4b03      	ldr	r3, [pc, #12]	; (8006824 <SysTick_Handler+0x20>)
 8006816:	2280      	movs	r2, #128	; 0x80
 8006818:	0552      	lsls	r2, r2, #21
 800681a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800681c:	0020      	movs	r0, r4
 800681e:	f7ff ffc7 	bl	80067b0 <vClearInterruptMaskFromISR>
}
 8006822:	bd10      	pop	{r4, pc}
 8006824:	e000ed04 	.word	0xe000ed04

08006828 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006828:	4a12      	ldr	r2, [pc, #72]	; (8006874 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800682a:	0753      	lsls	r3, r2, #29
 800682c:	d01f      	beq.n	800686e <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800682e:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006830:	2307      	movs	r3, #7
 8006832:	4399      	bics	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006834:	23c0      	movs	r3, #192	; 0xc0
 8006836:	015b      	lsls	r3, r3, #5
 8006838:	1a5b      	subs	r3, r3, r1
 800683a:	189b      	adds	r3, r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800683c:	000a      	movs	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800683e:	480e      	ldr	r0, [pc, #56]	; (8006878 <prvHeapInit+0x50>)
 8006840:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006842:	2100      	movs	r1, #0
 8006844:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006846:	18d3      	adds	r3, r2, r3
	uxAddress -= xHeapStructSize;
 8006848:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800684a:	2007      	movs	r0, #7
 800684c:	4383      	bics	r3, r0
	pxEnd = ( void * ) uxAddress;
 800684e:	480b      	ldr	r0, [pc, #44]	; (800687c <prvHeapInit+0x54>)
 8006850:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8006852:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006854:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006856:	1a99      	subs	r1, r3, r2
 8006858:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800685a:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800685c:	4b08      	ldr	r3, [pc, #32]	; (8006880 <prvHeapInit+0x58>)
 800685e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006860:	4b08      	ldr	r3, [pc, #32]	; (8006884 <prvHeapInit+0x5c>)
 8006862:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006864:	4b08      	ldr	r3, [pc, #32]	; (8006888 <prvHeapInit+0x60>)
 8006866:	2280      	movs	r2, #128	; 0x80
 8006868:	0612      	lsls	r2, r2, #24
 800686a:	601a      	str	r2, [r3, #0]
}
 800686c:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800686e:	23c0      	movs	r3, #192	; 0xc0
 8006870:	015b      	lsls	r3, r3, #5
 8006872:	e7e4      	b.n	800683e <prvHeapInit+0x16>
 8006874:	20000b00 	.word	0x20000b00
 8006878:	2000230c 	.word	0x2000230c
 800687c:	20000afc 	.word	0x20000afc
 8006880:	20002308 	.word	0x20002308
 8006884:	20002304 	.word	0x20002304
 8006888:	20002300 	.word	0x20002300

0800688c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800688c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800688e:	4b12      	ldr	r3, [pc, #72]	; (80068d8 <prvInsertBlockIntoFreeList+0x4c>)
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	4282      	cmp	r2, r0
 8006894:	d319      	bcc.n	80068ca <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006896:	6859      	ldr	r1, [r3, #4]
 8006898:	185c      	adds	r4, r3, r1
 800689a:	4284      	cmp	r4, r0
 800689c:	d103      	bne.n	80068a6 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800689e:	6840      	ldr	r0, [r0, #4]
 80068a0:	1809      	adds	r1, r1, r0
 80068a2:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 80068a4:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80068a6:	6841      	ldr	r1, [r0, #4]
 80068a8:	1844      	adds	r4, r0, r1
 80068aa:	42a2      	cmp	r2, r4
 80068ac:	d111      	bne.n	80068d2 <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80068ae:	4c0b      	ldr	r4, [pc, #44]	; (80068dc <prvInsertBlockIntoFreeList+0x50>)
 80068b0:	6824      	ldr	r4, [r4, #0]
 80068b2:	42a2      	cmp	r2, r4
 80068b4:	d00b      	beq.n	80068ce <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80068b6:	6852      	ldr	r2, [r2, #4]
 80068b8:	1889      	adds	r1, r1, r2
 80068ba:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	6812      	ldr	r2, [r2, #0]
 80068c0:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80068c2:	4298      	cmp	r0, r3
 80068c4:	d000      	beq.n	80068c8 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80068c6:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068c8:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80068ca:	0013      	movs	r3, r2
 80068cc:	e7e0      	b.n	8006890 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80068ce:	6004      	str	r4, [r0, #0]
 80068d0:	e7f7      	b.n	80068c2 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80068d2:	6002      	str	r2, [r0, #0]
 80068d4:	e7f5      	b.n	80068c2 <prvInsertBlockIntoFreeList+0x36>
 80068d6:	46c0      	nop			; (mov r8, r8)
 80068d8:	2000230c 	.word	0x2000230c
 80068dc:	20000afc 	.word	0x20000afc

080068e0 <pvPortMalloc>:
{
 80068e0:	b570      	push	{r4, r5, r6, lr}
 80068e2:	0004      	movs	r4, r0
	vTaskSuspendAll();
 80068e4:	f7ff fb5a 	bl	8005f9c <vTaskSuspendAll>
		if( pxEnd == NULL )
 80068e8:	4b2e      	ldr	r3, [pc, #184]	; (80069a4 <pvPortMalloc+0xc4>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00f      	beq.n	8006910 <pvPortMalloc+0x30>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80068f0:	4b2d      	ldr	r3, [pc, #180]	; (80069a8 <pvPortMalloc+0xc8>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4223      	tst	r3, r4
 80068f6:	d14b      	bne.n	8006990 <pvPortMalloc+0xb0>
			if( xWantedSize > 0 )
 80068f8:	2c00      	cmp	r4, #0
 80068fa:	d00c      	beq.n	8006916 <pvPortMalloc+0x36>
				xWantedSize += xHeapStructSize;
 80068fc:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80068fe:	0763      	lsls	r3, r4, #29
 8006900:	d009      	beq.n	8006916 <pvPortMalloc+0x36>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006902:	2307      	movs	r3, #7
 8006904:	439c      	bics	r4, r3
 8006906:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006908:	4223      	tst	r3, r4
 800690a:	d004      	beq.n	8006916 <pvPortMalloc+0x36>
 800690c:	b672      	cpsid	i
 800690e:	e7fe      	b.n	800690e <pvPortMalloc+0x2e>
			prvHeapInit();
 8006910:	f7ff ff8a 	bl	8006828 <prvHeapInit>
 8006914:	e7ec      	b.n	80068f0 <pvPortMalloc+0x10>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006916:	2c00      	cmp	r4, #0
 8006918:	d03c      	beq.n	8006994 <pvPortMalloc+0xb4>
 800691a:	4b24      	ldr	r3, [pc, #144]	; (80069ac <pvPortMalloc+0xcc>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	42a3      	cmp	r3, r4
 8006920:	d33a      	bcc.n	8006998 <pvPortMalloc+0xb8>
				pxBlock = xStart.pxNextFreeBlock;
 8006922:	4b23      	ldr	r3, [pc, #140]	; (80069b0 <pvPortMalloc+0xd0>)
 8006924:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006926:	e001      	b.n	800692c <pvPortMalloc+0x4c>
					pxPreviousBlock = pxBlock;
 8006928:	002b      	movs	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800692a:	0015      	movs	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800692c:	686a      	ldr	r2, [r5, #4]
 800692e:	42a2      	cmp	r2, r4
 8006930:	d202      	bcs.n	8006938 <pvPortMalloc+0x58>
 8006932:	682a      	ldr	r2, [r5, #0]
 8006934:	2a00      	cmp	r2, #0
 8006936:	d1f7      	bne.n	8006928 <pvPortMalloc+0x48>
				if( pxBlock != pxEnd )
 8006938:	4a1a      	ldr	r2, [pc, #104]	; (80069a4 <pvPortMalloc+0xc4>)
 800693a:	6812      	ldr	r2, [r2, #0]
 800693c:	42aa      	cmp	r2, r5
 800693e:	d02d      	beq.n	800699c <pvPortMalloc+0xbc>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006940:	681e      	ldr	r6, [r3, #0]
 8006942:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006944:	682a      	ldr	r2, [r5, #0]
 8006946:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006948:	686b      	ldr	r3, [r5, #4]
 800694a:	1b1b      	subs	r3, r3, r4
 800694c:	2b10      	cmp	r3, #16
 800694e:	d908      	bls.n	8006962 <pvPortMalloc+0x82>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006950:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006952:	0742      	lsls	r2, r0, #29
 8006954:	d001      	beq.n	800695a <pvPortMalloc+0x7a>
 8006956:	b672      	cpsid	i
 8006958:	e7fe      	b.n	8006958 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800695a:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800695c:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800695e:	f7ff ff95 	bl	800688c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006962:	686a      	ldr	r2, [r5, #4]
 8006964:	4911      	ldr	r1, [pc, #68]	; (80069ac <pvPortMalloc+0xcc>)
 8006966:	680b      	ldr	r3, [r1, #0]
 8006968:	1a9b      	subs	r3, r3, r2
 800696a:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800696c:	4911      	ldr	r1, [pc, #68]	; (80069b4 <pvPortMalloc+0xd4>)
 800696e:	6809      	ldr	r1, [r1, #0]
 8006970:	428b      	cmp	r3, r1
 8006972:	d201      	bcs.n	8006978 <pvPortMalloc+0x98>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006974:	490f      	ldr	r1, [pc, #60]	; (80069b4 <pvPortMalloc+0xd4>)
 8006976:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006978:	4b0b      	ldr	r3, [pc, #44]	; (80069a8 <pvPortMalloc+0xc8>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4313      	orrs	r3, r2
 800697e:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006980:	2300      	movs	r3, #0
 8006982:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8006984:	f7ff fb9c 	bl	80060c0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006988:	0773      	lsls	r3, r6, #29
 800698a:	d009      	beq.n	80069a0 <pvPortMalloc+0xc0>
 800698c:	b672      	cpsid	i
 800698e:	e7fe      	b.n	800698e <pvPortMalloc+0xae>
void *pvReturn = NULL;
 8006990:	2600      	movs	r6, #0
 8006992:	e7f7      	b.n	8006984 <pvPortMalloc+0xa4>
 8006994:	2600      	movs	r6, #0
 8006996:	e7f5      	b.n	8006984 <pvPortMalloc+0xa4>
 8006998:	2600      	movs	r6, #0
 800699a:	e7f3      	b.n	8006984 <pvPortMalloc+0xa4>
 800699c:	2600      	movs	r6, #0
 800699e:	e7f1      	b.n	8006984 <pvPortMalloc+0xa4>
}
 80069a0:	0030      	movs	r0, r6
 80069a2:	bd70      	pop	{r4, r5, r6, pc}
 80069a4:	20000afc 	.word	0x20000afc
 80069a8:	20002300 	.word	0x20002300
 80069ac:	20002304 	.word	0x20002304
 80069b0:	2000230c 	.word	0x2000230c
 80069b4:	20002308 	.word	0x20002308

080069b8 <vPortFree>:
{
 80069b8:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 80069ba:	2800      	cmp	r0, #0
 80069bc:	d020      	beq.n	8006a00 <vPortFree+0x48>
		puc -= xHeapStructSize;
 80069be:	0005      	movs	r5, r0
 80069c0:	3d08      	subs	r5, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069c2:	686b      	ldr	r3, [r5, #4]
 80069c4:	4a0f      	ldr	r2, [pc, #60]	; (8006a04 <vPortFree+0x4c>)
 80069c6:	6812      	ldr	r2, [r2, #0]
 80069c8:	421a      	tst	r2, r3
 80069ca:	d101      	bne.n	80069d0 <vPortFree+0x18>
 80069cc:	b672      	cpsid	i
 80069ce:	e7fe      	b.n	80069ce <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069d0:	0001      	movs	r1, r0
 80069d2:	3908      	subs	r1, #8
 80069d4:	6809      	ldr	r1, [r1, #0]
 80069d6:	2900      	cmp	r1, #0
 80069d8:	d001      	beq.n	80069de <vPortFree+0x26>
 80069da:	b672      	cpsid	i
 80069dc:	e7fe      	b.n	80069dc <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069de:	3808      	subs	r0, #8
 80069e0:	0004      	movs	r4, r0
 80069e2:	4393      	bics	r3, r2
 80069e4:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 80069e6:	f7ff fad9 	bl	8005f9c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069ea:	6863      	ldr	r3, [r4, #4]
 80069ec:	4a06      	ldr	r2, [pc, #24]	; (8006a08 <vPortFree+0x50>)
 80069ee:	6811      	ldr	r1, [r2, #0]
 80069f0:	468c      	mov	ip, r1
 80069f2:	4463      	add	r3, ip
 80069f4:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069f6:	0028      	movs	r0, r5
 80069f8:	f7ff ff48 	bl	800688c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80069fc:	f7ff fb60 	bl	80060c0 <xTaskResumeAll>
}
 8006a00:	bd70      	pop	{r4, r5, r6, pc}
 8006a02:	46c0      	nop			; (mov r8, r8)
 8006a04:	20002300 	.word	0x20002300
 8006a08:	20002304 	.word	0x20002304

08006a0c <SCP_Tick>:
    }
}
/************************************************************************************************
************************************************************************************************/
void SCP_Tick(uint32_t msecTick)
 {
 8006a0c:	b530      	push	{r4, r5, lr}
     if (SCPHandler.timer > 0)
 8006a0e:	4b09      	ldr	r3, [pc, #36]	; (8006a34 <SCP_Tick+0x28>)
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	dd07      	ble.n	8006a28 <SCP_Tick+0x1c>
     {
         SCPHandler.timer = SCPHandler.timer - msecTick;
 8006a18:	0004      	movs	r4, r0
 8006a1a:	2500      	movs	r5, #0
 8006a1c:	1b12      	subs	r2, r2, r4
 8006a1e:	41ab      	sbcs	r3, r5
 8006a20:	4904      	ldr	r1, [pc, #16]	; (8006a34 <SCP_Tick+0x28>)
 8006a22:	600a      	str	r2, [r1, #0]
 8006a24:	604b      	str	r3, [r1, #4]
     }
 }
 8006a26:	bd30      	pop	{r4, r5, pc}
     if (SCPHandler.timer > 0)
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1fc      	bne.n	8006a26 <SCP_Tick+0x1a>
 8006a2c:	2a00      	cmp	r2, #0
 8006a2e:	d1f3      	bne.n	8006a18 <SCP_Tick+0xc>
 8006a30:	e7f9      	b.n	8006a26 <SCP_Tick+0x1a>
 8006a32:	46c0      	nop			; (mov r8, r8)
 8006a34:	20003920 	.word	0x20003920

08006a38 <SCP_UpCase>:
/************************************************************************************************
************************************************************************************************/
char SCP_UpCase(char ch )
{
 if ((ch >= 'a')&&(ch <= 'z')) return (ch & ~0x20);
 8006a38:	0003      	movs	r3, r0
 8006a3a:	3b61      	subs	r3, #97	; 0x61
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b19      	cmp	r3, #25
 8006a40:	d801      	bhi.n	8006a46 <SCP_UpCase+0xe>
 8006a42:	2320      	movs	r3, #32
 8006a44:	4398      	bics	r0, r3
 return ch;
}
 8006a46:	4770      	bx	lr

08006a48 <SCP_Init>:

void SCP_Init(uint32_t (*fSendData)(uint8_t *pData, uint32_t lenght), uint32_t (*fReadByte)(uint8_t *pData))
{
 8006a48:	b530      	push	{r4, r5, lr}
    SCPHandler.RxIndex = 0;
 8006a4a:	4b0c      	ldr	r3, [pc, #48]	; (8006a7c <SCP_Init+0x34>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	609a      	str	r2, [r3, #8]
    SCPHandler.timer = 0;
 8006a50:	2400      	movs	r4, #0
 8006a52:	2500      	movs	r5, #0
 8006a54:	601c      	str	r4, [r3, #0]
 8006a56:	605d      	str	r5, [r3, #4]
    SCPHandler.fSendData = fSendData;
 8006a58:	4a09      	ldr	r2, [pc, #36]	; (8006a80 <SCP_Init+0x38>)
 8006a5a:	5098      	str	r0, [r3, r2]
    SCPHandler.fReadByte = fReadByte;
 8006a5c:	3204      	adds	r2, #4
 8006a5e:	5099      	str	r1, [r3, r2]

    for (int i = 0; i < SCP_MAX_CALLBACKS; i++)
 8006a60:	2200      	movs	r2, #0
 8006a62:	e008      	b.n	8006a76 <SCP_Init+0x2e>
    {
        SCPHandler.scpCallbacks[i].fOnExecute = 0;
 8006a64:	0011      	movs	r1, r2
 8006a66:	3181      	adds	r1, #129	; 0x81
 8006a68:	00c9      	lsls	r1, r1, #3
 8006a6a:	4b04      	ldr	r3, [pc, #16]	; (8006a7c <SCP_Init+0x34>)
 8006a6c:	185b      	adds	r3, r3, r1
 8006a6e:	2100      	movs	r1, #0
 8006a70:	6099      	str	r1, [r3, #8]
        SCPHandler.scpCallbacks[i].pWaitForString = 0;
 8006a72:	6059      	str	r1, [r3, #4]
    for (int i = 0; i < SCP_MAX_CALLBACKS; i++)
 8006a74:	3201      	adds	r2, #1
 8006a76:	2a09      	cmp	r2, #9
 8006a78:	ddf4      	ble.n	8006a64 <SCP_Init+0x1c>
    }
}
 8006a7a:	bd30      	pop	{r4, r5, pc}
 8006a7c:	20003920 	.word	0x20003920
 8006a80:	0000060c 	.word	0x0000060c

08006a84 <SCP_CheckCommand>:
 * Returns
 * If success returns pointer to the last byte of found string in rx buffer
 * if fail returns 0
******************************************************************************************/
const char * SCP_CheckCommand(const char * str)
{
 8006a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a86:	46c6      	mov	lr, r8
 8006a88:	b500      	push	{lr}
 8006a8a:	1e07      	subs	r7, r0, #0

uint32_t i=0;
uint32_t rxInx = 0;

 if (str)
 8006a8c:	d020      	beq.n	8006ad0 <SCP_CheckCommand+0x4c>
uint32_t rxInx = 0;
 8006a8e:	2400      	movs	r4, #0
uint32_t i=0;
 8006a90:	2500      	movs	r5, #0
 8006a92:	e004      	b.n	8006a9e <SCP_CheckCommand+0x1a>
    {
     /*Low case or Up case characters may occur*/
     if (SCP_UpCase((char)str[i]) == SCP_UpCase((char)SCPHandler.RxBuffer[rxInx++])) // UpCase
      {
       /*Match found*/
       i++;
 8006a94:	3501      	adds	r5, #1

       /*If the end of the string reached*/
       if (str[i] == 0)
 8006a96:	5d7b      	ldrb	r3, [r7, r5]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d012      	beq.n	8006ac2 <SCP_CheckCommand+0x3e>
       }

      }

     /*No match, reset string pointer*/
     else i=0;
 8006a9c:	0034      	movs	r4, r6
   while (rxInx < SCPHandler.RxIndex)
 8006a9e:	4b0e      	ldr	r3, [pc, #56]	; (8006ad8 <SCP_CheckCommand+0x54>)
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	42a3      	cmp	r3, r4
 8006aa4:	d913      	bls.n	8006ace <SCP_CheckCommand+0x4a>
     if (SCP_UpCase((char)str[i]) == SCP_UpCase((char)SCPHandler.RxBuffer[rxInx++])) // UpCase
 8006aa6:	5d78      	ldrb	r0, [r7, r5]
 8006aa8:	f7ff ffc6 	bl	8006a38 <SCP_UpCase>
 8006aac:	4680      	mov	r8, r0
 8006aae:	1c66      	adds	r6, r4, #1
 8006ab0:	4b09      	ldr	r3, [pc, #36]	; (8006ad8 <SCP_CheckCommand+0x54>)
 8006ab2:	191c      	adds	r4, r3, r4
 8006ab4:	7b20      	ldrb	r0, [r4, #12]
 8006ab6:	f7ff ffbf 	bl	8006a38 <SCP_UpCase>
 8006aba:	4580      	cmp	r8, r0
 8006abc:	d0ea      	beq.n	8006a94 <SCP_CheckCommand+0x10>
     else i=0;
 8006abe:	2500      	movs	r5, #0
 8006ac0:	e7ec      	b.n	8006a9c <SCP_CheckCommand+0x18>
           return (const char *)&SCPHandler.RxBuffer[rxInx - i];
 8006ac2:	1b75      	subs	r5, r6, r5
 8006ac4:	3508      	adds	r5, #8
 8006ac6:	4804      	ldr	r0, [pc, #16]	; (8006ad8 <SCP_CheckCommand+0x54>)
 8006ac8:	1828      	adds	r0, r5, r0
 8006aca:	3004      	adds	r0, #4
 8006acc:	e000      	b.n	8006ad0 <SCP_CheckCommand+0x4c>
    }
  }
return NULL;
 8006ace:	2000      	movs	r0, #0
}
 8006ad0:	bc04      	pop	{r2}
 8006ad2:	4690      	mov	r8, r2
 8006ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ad6:	46c0      	nop			; (mov r8, r8)
 8006ad8:	20003920 	.word	0x20003920

08006adc <SCP_Process>:
{
 8006adc:	b570      	push	{r4, r5, r6, lr}
    for (int i = 0; i < SCP_MAX_CALLBACKS; i++)
 8006ade:	2400      	movs	r4, #0
 8006ae0:	e000      	b.n	8006ae4 <SCP_Process+0x8>
 8006ae2:	3401      	adds	r4, #1
 8006ae4:	2c09      	cmp	r4, #9
 8006ae6:	dc15      	bgt.n	8006b14 <SCP_Process+0x38>
        if (SCPHandler.scpCallbacks[i].pWaitForString && SCPHandler.scpCallbacks[i].fOnExecute)
 8006ae8:	0022      	movs	r2, r4
 8006aea:	3281      	adds	r2, #129	; 0x81
 8006aec:	00d2      	lsls	r2, r2, #3
 8006aee:	4b0a      	ldr	r3, [pc, #40]	; (8006b18 <SCP_Process+0x3c>)
 8006af0:	189b      	adds	r3, r3, r2
 8006af2:	6858      	ldr	r0, [r3, #4]
 8006af4:	2800      	cmp	r0, #0
 8006af6:	d0f4      	beq.n	8006ae2 <SCP_Process+0x6>
 8006af8:	0022      	movs	r2, r4
 8006afa:	3281      	adds	r2, #129	; 0x81
 8006afc:	00d2      	lsls	r2, r2, #3
 8006afe:	4b06      	ldr	r3, [pc, #24]	; (8006b18 <SCP_Process+0x3c>)
 8006b00:	189b      	adds	r3, r3, r2
 8006b02:	689d      	ldr	r5, [r3, #8]
 8006b04:	2d00      	cmp	r5, #0
 8006b06:	d0ec      	beq.n	8006ae2 <SCP_Process+0x6>
            pReceivedString  = SCP_CheckCommand(SCPHandler.scpCallbacks[i].pWaitForString);
 8006b08:	f7ff ffbc 	bl	8006a84 <SCP_CheckCommand>
            if(pReceivedString)
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	d0e8      	beq.n	8006ae2 <SCP_Process+0x6>
                SCPHandler.scpCallbacks[i].fOnExecute(pReceivedString);
 8006b10:	47a8      	blx	r5
 8006b12:	e7e6      	b.n	8006ae2 <SCP_Process+0x6>
}
 8006b14:	bd70      	pop	{r4, r5, r6, pc}
 8006b16:	46c0      	nop			; (mov r8, r8)
 8006b18:	20003920 	.word	0x20003920

08006b1c <SCP_SendCommandWaitAnswer>:
* RETURN:
* 0 if error
* pointer to answer if success
************************************************************************************************/
 char * SCP_SendCommandWaitAnswer(char *pCmd, char *pAnswer, uint32_t timeout, uint8_t retry)
 {
 8006b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b1e:	46ce      	mov	lr, r9
 8006b20:	b500      	push	{lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	9001      	str	r0, [sp, #4]
 8006b26:	9100      	str	r1, [sp, #0]
 8006b28:	4691      	mov	r9, r2
 8006b2a:	001d      	movs	r5, r3
     int    inx =0;
     char * pResult = NULL;

     /* flush RX */
     SCPHandler.RxIndex = 0;
 8006b2c:	481a      	ldr	r0, [pc, #104]	; (8006b98 <SCP_SendCommandWaitAnswer+0x7c>)
 8006b2e:	2300      	movs	r3, #0
 8006b30:	6083      	str	r3, [r0, #8]
     memset(SCPHandler.RxBuffer, 0x00, SCP_RX_BUFF_LENGTH);
 8006b32:	300c      	adds	r0, #12
 8006b34:	2280      	movs	r2, #128	; 0x80
 8006b36:	00d2      	lsls	r2, r2, #3
 8006b38:	2100      	movs	r1, #0
 8006b3a:	f002 f8a2 	bl	8008c82 <memset>
     char * pResult = NULL;
 8006b3e:	2600      	movs	r6, #0
     int    inx =0;
 8006b40:	2300      	movs	r3, #0

     while (!pResult && (inx++ < retry))
 8006b42:	e010      	b.n	8006b66 <SCP_SendCommandWaitAnswer+0x4a>
     {
             SCPHandler.timer = timeout;
             SCPHandler.fSendData((uint8_t *)pCmd, strlen(pCmd));
             while ( (!pResult) && (SCPHandler.timer))
             {
                 pResult = (char *)SCP_CheckCommand(pAnswer);
 8006b44:	9800      	ldr	r0, [sp, #0]
 8006b46:	f7ff ff9d 	bl	8006a84 <SCP_CheckCommand>
 8006b4a:	0006      	movs	r6, r0
                 SCP_Process();
 8006b4c:	f7ff ffc6 	bl	8006adc <SCP_Process>
             while ( (!pResult) && (SCPHandler.timer))
 8006b50:	2e00      	cmp	r6, #0
 8006b52:	d107      	bne.n	8006b64 <SCP_SendCommandWaitAnswer+0x48>
 8006b54:	4b10      	ldr	r3, [pc, #64]	; (8006b98 <SCP_SendCommandWaitAnswer+0x7c>)
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	6859      	ldr	r1, [r3, #4]
 8006b5a:	0013      	movs	r3, r2
 8006b5c:	430b      	orrs	r3, r1
 8006b5e:	d1f1      	bne.n	8006b44 <SCP_SendCommandWaitAnswer+0x28>
 8006b60:	003b      	movs	r3, r7
 8006b62:	e000      	b.n	8006b66 <SCP_SendCommandWaitAnswer+0x4a>
 8006b64:	003b      	movs	r3, r7
     while (!pResult && (inx++ < retry))
 8006b66:	2e00      	cmp	r6, #0
 8006b68:	d110      	bne.n	8006b8c <SCP_SendCommandWaitAnswer+0x70>
 8006b6a:	1c5f      	adds	r7, r3, #1
 8006b6c:	429d      	cmp	r5, r3
 8006b6e:	dd0d      	ble.n	8006b8c <SCP_SendCommandWaitAnswer+0x70>
             SCPHandler.timer = timeout;
 8006b70:	4b09      	ldr	r3, [pc, #36]	; (8006b98 <SCP_SendCommandWaitAnswer+0x7c>)
 8006b72:	464a      	mov	r2, r9
 8006b74:	601a      	str	r2, [r3, #0]
 8006b76:	2200      	movs	r2, #0
 8006b78:	605a      	str	r2, [r3, #4]
             SCPHandler.fSendData((uint8_t *)pCmd, strlen(pCmd));
 8006b7a:	4a08      	ldr	r2, [pc, #32]	; (8006b9c <SCP_SendCommandWaitAnswer+0x80>)
 8006b7c:	589c      	ldr	r4, [r3, r2]
 8006b7e:	9801      	ldr	r0, [sp, #4]
 8006b80:	f7f9 fac2 	bl	8000108 <strlen>
 8006b84:	0001      	movs	r1, r0
 8006b86:	9801      	ldr	r0, [sp, #4]
 8006b88:	47a0      	blx	r4
             while ( (!pResult) && (SCPHandler.timer))
 8006b8a:	e7e1      	b.n	8006b50 <SCP_SendCommandWaitAnswer+0x34>
             }
     }
     return pResult;

 }
 8006b8c:	0030      	movs	r0, r6
 8006b8e:	b002      	add	sp, #8
 8006b90:	bc04      	pop	{r2}
 8006b92:	4691      	mov	r9, r2
 8006b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b96:	46c0      	nop			; (mov r8, r8)
 8006b98:	20003920 	.word	0x20003920
 8006b9c:	0000060c 	.word	0x0000060c

08006ba0 <SCP_InitRx>:

     return pResult;
 }

 void SCP_InitRx(void)
 {
 8006ba0:	b510      	push	{r4, lr}
     SCPHandler.RxIndex = 0;
 8006ba2:	4805      	ldr	r0, [pc, #20]	; (8006bb8 <SCP_InitRx+0x18>)
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	6083      	str	r3, [r0, #8]
     memset(SCPHandler.RxBuffer, 0x00, SCP_RX_BUFF_LENGTH);
 8006ba8:	300c      	adds	r0, #12
 8006baa:	2280      	movs	r2, #128	; 0x80
 8006bac:	00d2      	lsls	r2, r2, #3
 8006bae:	2100      	movs	r1, #0
 8006bb0:	f002 f867 	bl	8008c82 <memset>
 }
 8006bb4:	bd10      	pop	{r4, pc}
 8006bb6:	46c0      	nop			; (mov r8, r8)
 8006bb8:	20003920 	.word	0x20003920

08006bbc <SCP_ByteReceived>:
{
 8006bbc:	b510      	push	{r4, lr}
 8006bbe:	0004      	movs	r4, r0
    if (SCPHandler.RxIndex < SCP_RX_BUFF_LENGTH)
 8006bc0:	4b09      	ldr	r3, [pc, #36]	; (8006be8 <SCP_ByteReceived+0x2c>)
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	4a09      	ldr	r2, [pc, #36]	; (8006bec <SCP_ByteReceived+0x30>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d805      	bhi.n	8006bd6 <SCP_ByteReceived+0x1a>
        SCPHandler.RxBuffer[SCPHandler.RxIndex++] = rxByte;
 8006bca:	4a07      	ldr	r2, [pc, #28]	; (8006be8 <SCP_ByteReceived+0x2c>)
 8006bcc:	1c59      	adds	r1, r3, #1
 8006bce:	6091      	str	r1, [r2, #8]
 8006bd0:	18d3      	adds	r3, r2, r3
 8006bd2:	7318      	strb	r0, [r3, #12]
}
 8006bd4:	bd10      	pop	{r4, pc}
    	SCP_InitRx();
 8006bd6:	f7ff ffe3 	bl	8006ba0 <SCP_InitRx>
        SCPHandler.RxBuffer[SCPHandler.RxIndex++] = rxByte;
 8006bda:	4b03      	ldr	r3, [pc, #12]	; (8006be8 <SCP_ByteReceived+0x2c>)
 8006bdc:	689a      	ldr	r2, [r3, #8]
 8006bde:	1c51      	adds	r1, r2, #1
 8006be0:	6099      	str	r1, [r3, #8]
 8006be2:	189b      	adds	r3, r3, r2
 8006be4:	731c      	strb	r4, [r3, #12]
}
 8006be6:	e7f5      	b.n	8006bd4 <SCP_ByteReceived+0x18>
 8006be8:	20003920 	.word	0x20003920
 8006bec:	000003ff 	.word	0x000003ff

08006bf0 <SCP_WaitForAnswer>:
 {
     SCPHandler.fSendData((uint8_t *)pData, length);
 }

 char *SCP_WaitForAnswer(char *pAnswer, uint32_t timeout)
 {
 8006bf0:	b570      	push	{r4, r5, r6, lr}
 8006bf2:	0004      	movs	r4, r0
     char * pResult = NULL;

     SCPHandler.timer = timeout;
 8006bf4:	4b0a      	ldr	r3, [pc, #40]	; (8006c20 <SCP_WaitForAnswer+0x30>)
 8006bf6:	6019      	str	r1, [r3, #0]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	605a      	str	r2, [r3, #4]
     char * pResult = NULL;
 8006bfc:	2500      	movs	r5, #0
     while ( (!pResult) && (SCPHandler.timer))
 8006bfe:	e005      	b.n	8006c0c <SCP_WaitForAnswer+0x1c>
      {
          pResult = (char *)SCP_CheckCommand(pAnswer);
 8006c00:	0020      	movs	r0, r4
 8006c02:	f7ff ff3f 	bl	8006a84 <SCP_CheckCommand>
 8006c06:	0005      	movs	r5, r0
          SCP_Process();
 8006c08:	f7ff ff68 	bl	8006adc <SCP_Process>
     while ( (!pResult) && (SCPHandler.timer))
 8006c0c:	2d00      	cmp	r5, #0
 8006c0e:	d105      	bne.n	8006c1c <SCP_WaitForAnswer+0x2c>
 8006c10:	4b03      	ldr	r3, [pc, #12]	; (8006c20 <SCP_WaitForAnswer+0x30>)
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	6859      	ldr	r1, [r3, #4]
 8006c16:	0013      	movs	r3, r2
 8006c18:	430b      	orrs	r3, r1
 8006c1a:	d1f1      	bne.n	8006c00 <SCP_WaitForAnswer+0x10>
      }
     return pResult;
 }
 8006c1c:	0028      	movs	r0, r5
 8006c1e:	bd70      	pop	{r4, r5, r6, pc}
 8006c20:	20003920 	.word	0x20003920

08006c24 <writeEEPROMData>:
  HAL_FLASHEx_DATAEEPROM_Lock();  // Reprotect the EEPROM
  return status;
  }

HAL_StatusTypeDef writeEEPROMData(uint32_t address, uint8_t* data, uint16_t len)
  {
 8006c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c26:	46c6      	mov	lr, r8
 8006c28:	b500      	push	{lr}
 8006c2a:	000f      	movs	r7, r1
 8006c2c:	4690      	mov	r8, r2
	HAL_StatusTypeDef  status;
	uint16_t i;

	address = address + EEPROM_BASE_ADDRESS;
 8006c2e:	4b12      	ldr	r3, [pc, #72]	; (8006c78 <writeEEPROMData+0x54>)
 8006c30:	18c6      	adds	r6, r0, r3

	if(address+len > EEPROM_LAST_ADDR)
 8006c32:	1992      	adds	r2, r2, r6
 8006c34:	4b11      	ldr	r3, [pc, #68]	; (8006c7c <writeEEPROMData+0x58>)
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d904      	bls.n	8006c44 <writeEEPROMData+0x20>
	{return HAL_ERROR;}
 8006c3a:	2501      	movs	r5, #1
		}
	}

	HAL_FLASHEx_DATAEEPROM_Lock();  // Reprotect the EEPROM
	return HAL_OK;
  }
 8006c3c:	0028      	movs	r0, r5
 8006c3e:	bc04      	pop	{r2}
 8006c40:	4690      	mov	r8, r2
 8006c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_FLASHEx_DATAEEPROM_Unlock();  //Unprotect the EEPROM to allow writing
 8006c44:	f7fc fe20 	bl	8003888 <HAL_FLASHEx_DATAEEPROM_Unlock>
	for(i = 0; i < len; i++)
 8006c48:	2400      	movs	r4, #0
 8006c4a:	4544      	cmp	r4, r8
 8006c4c:	d20f      	bcs.n	8006c6e <writeEEPROMData+0x4a>
		status = HAL_FLASHEx_DATAEEPROM_Program(TYPEPROGRAMDATA_BYTE, address, *data);
 8006c4e:	783a      	ldrb	r2, [r7, #0]
 8006c50:	0031      	movs	r1, r6
 8006c52:	2000      	movs	r0, #0
 8006c54:	f7fc fe40 	bl	80038d8 <HAL_FLASHEx_DATAEEPROM_Program>
 8006c58:	0005      	movs	r5, r0
		data++;
 8006c5a:	3701      	adds	r7, #1
		address++;
 8006c5c:	3601      	adds	r6, #1
		if(status != HAL_OK )
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	d102      	bne.n	8006c68 <writeEEPROMData+0x44>
	for(i = 0; i < len; i++)
 8006c62:	3401      	adds	r4, #1
 8006c64:	b2a4      	uxth	r4, r4
 8006c66:	e7f0      	b.n	8006c4a <writeEEPROMData+0x26>
			HAL_FLASHEx_DATAEEPROM_Lock();  // Reprotect the EEPROM
 8006c68:	f7fc fe2c 	bl	80038c4 <HAL_FLASHEx_DATAEEPROM_Lock>
			return status;
 8006c6c:	e7e6      	b.n	8006c3c <writeEEPROMData+0x18>
	HAL_FLASHEx_DATAEEPROM_Lock();  // Reprotect the EEPROM
 8006c6e:	f7fc fe29 	bl	80038c4 <HAL_FLASHEx_DATAEEPROM_Lock>
	return HAL_OK;
 8006c72:	2500      	movs	r5, #0
 8006c74:	e7e2      	b.n	8006c3c <writeEEPROMData+0x18>
 8006c76:	46c0      	nop			; (mov r8, r8)
 8006c78:	08080000 	.word	0x08080000
 8006c7c:	080817ff 	.word	0x080817ff

08006c80 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8006c80:	4b03      	ldr	r3, [pc, #12]	; (8006c90 <vApplicationGetIdleTaskMemory+0x10>)
 8006c82:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8006c84:	4b03      	ldr	r3, [pc, #12]	; (8006c94 <vApplicationGetIdleTaskMemory+0x14>)
 8006c86:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8006c88:	2340      	movs	r3, #64	; 0x40
 8006c8a:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 8006c8c:	4770      	bx	lr
 8006c8e:	46c0      	nop			; (mov r8, r8)
 8006c90:	20002414 	.word	0x20002414
 8006c94:	20002314 	.word	0x20002314

08006c98 <ind_green>:
	}

}

void ind_green(void)
{
 8006c98:	b530      	push	{r4, r5, lr}
 8006c9a:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c9c:	2214      	movs	r2, #20
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	a801      	add	r0, sp, #4
 8006ca2:	f001 ffee 	bl	8008c82 <memset>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8006ca6:	2580      	movs	r5, #128	; 0x80
 8006ca8:	006d      	lsls	r5, r5, #1
 8006caa:	24a0      	movs	r4, #160	; 0xa0
 8006cac:	05e4      	lsls	r4, r4, #23
 8006cae:	2200      	movs	r2, #0
 8006cb0:	0029      	movs	r1, r5
 8006cb2:	0020      	movs	r0, r4
 8006cb4:	f7fc ff13 	bl	8003ade <HAL_GPIO_WritePin>

	/*Configure GPIO pin:*/
	GPIO_InitStruct.Pin = LED_IND_Pin;
 8006cb8:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cc2:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cc4:	a901      	add	r1, sp, #4
 8006cc6:	0020      	movs	r0, r4
 8006cc8:	f7fc fe34 	bl	8003934 <HAL_GPIO_Init>
}
 8006ccc:	b007      	add	sp, #28
 8006cce:	bd30      	pop	{r4, r5, pc}

08006cd0 <ind_red>:

void ind_red(void)
{
 8006cd0:	b530      	push	{r4, r5, lr}
 8006cd2:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cd4:	2214      	movs	r2, #20
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	a801      	add	r0, sp, #4
 8006cda:	f001 ffd2 	bl	8008c82 <memset>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8006cde:	2580      	movs	r5, #128	; 0x80
 8006ce0:	006d      	lsls	r5, r5, #1
 8006ce2:	24a0      	movs	r4, #160	; 0xa0
 8006ce4:	05e4      	lsls	r4, r4, #23
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	0029      	movs	r1, r5
 8006cea:	0020      	movs	r0, r4
 8006cec:	f7fc fef7 	bl	8003ade <HAL_GPIO_WritePin>

	/*Configure GPIO pin:*/
	GPIO_InitStruct.Pin = LED_IND_Pin;
 8006cf0:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cfa:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cfc:	a901      	add	r1, sp, #4
 8006cfe:	0020      	movs	r0, r4
 8006d00:	f7fc fe18 	bl	8003934 <HAL_GPIO_Init>
}
 8006d04:	b007      	add	sp, #28
 8006d06:	bd30      	pop	{r4, r5, pc}

08006d08 <ind_off>:

void ind_off(void)
{
 8006d08:	b500      	push	{lr}
 8006d0a:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d0c:	2210      	movs	r2, #16
 8006d0e:	2100      	movs	r1, #0
 8006d10:	a802      	add	r0, sp, #8
 8006d12:	f001 ffb6 	bl	8008c82 <memset>

	/*Configure GPIO pin:*/
	GPIO_InitStruct.Pin = LED_IND_Pin;
 8006d16:	2380      	movs	r3, #128	; 0x80
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d1c:	20a0      	movs	r0, #160	; 0xa0
 8006d1e:	a901      	add	r1, sp, #4
 8006d20:	05c0      	lsls	r0, r0, #23
 8006d22:	f7fc fe07 	bl	8003934 <HAL_GPIO_Init>
}
 8006d26:	b007      	add	sp, #28
 8006d28:	bd00      	pop	{pc}
	...

08006d2c <IndicationTask>:
{
 8006d2c:	b500      	push	{lr}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	e001      	b.n	8006d36 <IndicationTask+0xa>
			  		  ind_off();
 8006d32:	f7ff ffe9 	bl	8006d08 <ind_off>
		  evt = osMessageGet (ind_msg,  osWaitForever);
 8006d36:	4b0d      	ldr	r3, [pc, #52]	; (8006d6c <IndicationTask+0x40>)
 8006d38:	6819      	ldr	r1, [r3, #0]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	4252      	negs	r2, r2
 8006d3e:	a801      	add	r0, sp, #4
 8006d40:	f7fe fbc6 	bl	80054d0 <osMessageGet>
		  if (evt.status == osEventMessage)
 8006d44:	9b01      	ldr	r3, [sp, #4]
 8006d46:	2b10      	cmp	r3, #16
 8006d48:	d1f5      	bne.n	8006d36 <IndicationTask+0xa>
			  switch(evt.value.v)
 8006d4a:	9b02      	ldr	r3, [sp, #8]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d006      	beq.n	8006d5e <IndicationTask+0x32>
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d0ee      	beq.n	8006d32 <IndicationTask+0x6>
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d005      	beq.n	8006d64 <IndicationTask+0x38>
			  		  ind_off();
 8006d58:	f7ff ffd6 	bl	8006d08 <ind_off>
 8006d5c:	e7eb      	b.n	8006d36 <IndicationTask+0xa>
			  		  ind_green();
 8006d5e:	f7ff ff9b 	bl	8006c98 <ind_green>
			  		  break;
 8006d62:	e7e8      	b.n	8006d36 <IndicationTask+0xa>
			  		  ind_red();
 8006d64:	f7ff ffb4 	bl	8006cd0 <ind_red>
			  		  break;
 8006d68:	e7e5      	b.n	8006d36 <IndicationTask+0xa>
 8006d6a:	46c0      	nop			; (mov r8, r8)
 8006d6c:	20003f3c 	.word	0x20003f3c

08006d70 <delay_us>:

/*Hardware Timer Microsecond Delay*/
void delay_us (uint16_t us)
{
	/*Set the counter value a 0*/
	__HAL_TIM_SET_COUNTER(&htim22,0);
 8006d70:	4b03      	ldr	r3, [pc, #12]	; (8006d80 <delay_us+0x10>)
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	2300      	movs	r3, #0
 8006d76:	6253      	str	r3, [r2, #36]	; 0x24

	/*Wait for the counter to reach the us input in the parameter*/
	while (__HAL_TIM_GET_COUNTER(&htim22) < us);
 8006d78:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006d7a:	4283      	cmp	r3, r0
 8006d7c:	d3fc      	bcc.n	8006d78 <delay_us+0x8>
}
 8006d7e:	4770      	bx	lr
 8006d80:	20004014 	.word	0x20004014

08006d84 <set_intensity>:

/*Sets driver current using EasyScale Protocol*/
void set_intensity(uint32_t ref)
{
 8006d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d86:	b083      	sub	sp, #12
 8006d88:	9001      	str	r0, [sp, #4]
  unsigned char byte = 0, j = 0, k = 0;
  byte = 0x72;       //device adress byte

  /*Shut down driver and enter into EasyScale control mode*/
  HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 8006d8a:	4c2f      	ldr	r4, [pc, #188]	; (8006e48 <set_intensity+0xc4>)
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	2102      	movs	r1, #2
 8006d90:	0020      	movs	r0, r4
 8006d92:	f7fc fea4 	bl	8003ade <HAL_GPIO_WritePin>
  delay_us(110);
 8006d96:	206e      	movs	r0, #110	; 0x6e
 8006d98:	f7ff ffea 	bl	8006d70 <delay_us>
  HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET);
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	2102      	movs	r1, #2
 8006da0:	0020      	movs	r0, r4
 8006da2:	f7fc fe9c 	bl	8003ade <HAL_GPIO_WritePin>
  delay_us(1100);
 8006da6:	4829      	ldr	r0, [pc, #164]	; (8006e4c <set_intensity+0xc8>)
 8006da8:	f7ff ffe2 	bl	8006d70 <delay_us>

  /*Send address and data*/
  for(k=2; k>0; k--)
 8006dac:	2602      	movs	r6, #2
  byte = 0x72;       //device adress byte
 8006dae:	2572      	movs	r5, #114	; 0x72
  for(k=2; k>0; k--)
 8006db0:	e037      	b.n	8006e22 <set_intensity+0x9e>

    for(j=8; j>0; j--)
    {
      if(byte & 0x80)
      {
    	HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET); //encoding bit 1
 8006db2:	4f25      	ldr	r7, [pc, #148]	; (8006e48 <set_intensity+0xc4>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	2102      	movs	r1, #2
 8006db8:	0038      	movs	r0, r7
 8006dba:	f7fc fe90 	bl	8003ade <HAL_GPIO_WritePin>
    	delay_us(24);
 8006dbe:	2018      	movs	r0, #24
 8006dc0:	f7ff ffd6 	bl	8006d70 <delay_us>
        HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	2102      	movs	r1, #2
 8006dc8:	0038      	movs	r0, r7
 8006dca:	f7fc fe88 	bl	8003ade <HAL_GPIO_WritePin>
        delay_us(48);
 8006dce:	2030      	movs	r0, #48	; 0x30
 8006dd0:	f7ff ffce 	bl	8006d70 <delay_us>
    	HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET); //encoding bit 0
    	delay_us(48);
        HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
        delay_us(24);
      }
      byte += byte; //left shift
 8006dd4:	006d      	lsls	r5, r5, #1
 8006dd6:	b2ed      	uxtb	r5, r5
    for(j=8; j>0; j--)
 8006dd8:	3c01      	subs	r4, #1
 8006dda:	b2e4      	uxtb	r4, r4
 8006ddc:	2c00      	cmp	r4, #0
 8006dde:	d014      	beq.n	8006e0a <set_intensity+0x86>
      if(byte & 0x80)
 8006de0:	b26b      	sxtb	r3, r5
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	dbe5      	blt.n	8006db2 <set_intensity+0x2e>
    	HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET); //encoding bit 0
 8006de6:	4f18      	ldr	r7, [pc, #96]	; (8006e48 <set_intensity+0xc4>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	2102      	movs	r1, #2
 8006dec:	0038      	movs	r0, r7
 8006dee:	f7fc fe76 	bl	8003ade <HAL_GPIO_WritePin>
    	delay_us(48);
 8006df2:	2030      	movs	r0, #48	; 0x30
 8006df4:	f7ff ffbc 	bl	8006d70 <delay_us>
        HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 8006df8:	2201      	movs	r2, #1
 8006dfa:	2102      	movs	r1, #2
 8006dfc:	0038      	movs	r0, r7
 8006dfe:	f7fc fe6e 	bl	8003ade <HAL_GPIO_WritePin>
        delay_us(24);
 8006e02:	2018      	movs	r0, #24
 8006e04:	f7ff ffb4 	bl	8006d70 <delay_us>
 8006e08:	e7e4      	b.n	8006dd4 <set_intensity+0x50>
    }

    HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET); //End of stream delay
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	2102      	movs	r1, #2
 8006e0e:	480e      	ldr	r0, [pc, #56]	; (8006e48 <set_intensity+0xc4>)
 8006e10:	f7fc fe65 	bl	8003ade <HAL_GPIO_WritePin>
    delay_us(48);
 8006e14:	2030      	movs	r0, #48	; 0x30
 8006e16:	f7ff ffab 	bl	8006d70 <delay_us>

    byte = ref; //read data byte
 8006e1a:	466b      	mov	r3, sp
 8006e1c:	791d      	ldrb	r5, [r3, #4]
  for(k=2; k>0; k--)
 8006e1e:	3e01      	subs	r6, #1
 8006e20:	b2f6      	uxtb	r6, r6
 8006e22:	2e00      	cmp	r6, #0
 8006e24:	d009      	beq.n	8006e3a <set_intensity+0xb6>
	HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 8006e26:	2201      	movs	r2, #1
 8006e28:	2102      	movs	r1, #2
 8006e2a:	4807      	ldr	r0, [pc, #28]	; (8006e48 <set_intensity+0xc4>)
 8006e2c:	f7fc fe57 	bl	8003ade <HAL_GPIO_WritePin>
	delay_us(48);
 8006e30:	2030      	movs	r0, #48	; 0x30
 8006e32:	f7ff ff9d 	bl	8006d70 <delay_us>
    for(j=8; j>0; j--)
 8006e36:	2408      	movs	r4, #8
 8006e38:	e7d0      	b.n	8006ddc <set_intensity+0x58>
  }
  HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	2102      	movs	r1, #2
 8006e3e:	4802      	ldr	r0, [pc, #8]	; (8006e48 <set_intensity+0xc4>)
 8006e40:	f7fc fe4d 	bl	8003ade <HAL_GPIO_WritePin>
}
 8006e44:	b003      	add	sp, #12
 8006e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e48:	50000400 	.word	0x50000400
 8006e4c:	0000044c 	.word	0x0000044c

08006e50 <LEDControlTask>:
{
 8006e50:	b500      	push	{lr}
 8006e52:	b085      	sub	sp, #20
	  evt = osMessageGet (led_msg,  osWaitForever);
 8006e54:	4b06      	ldr	r3, [pc, #24]	; (8006e70 <LEDControlTask+0x20>)
 8006e56:	6819      	ldr	r1, [r3, #0]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	4252      	negs	r2, r2
 8006e5c:	a801      	add	r0, sp, #4
 8006e5e:	f7fe fb37 	bl	80054d0 <osMessageGet>
	  if (evt.status == osEventMessage)
 8006e62:	9b01      	ldr	r3, [sp, #4]
 8006e64:	2b10      	cmp	r3, #16
 8006e66:	d1f5      	bne.n	8006e54 <LEDControlTask+0x4>
		  set_intensity(evt.value.v);
 8006e68:	9802      	ldr	r0, [sp, #8]
 8006e6a:	f7ff ff8b 	bl	8006d84 <set_intensity>
 8006e6e:	e7f1      	b.n	8006e54 <LEDControlTask+0x4>
 8006e70:	20003f44 	.word	0x20003f44

08006e74 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8006e74:	b510      	push	{r4, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8006e76:	4806      	ldr	r0, [pc, #24]	; (8006e90 <MX_CRC_Init+0x1c>)
 8006e78:	4b06      	ldr	r3, [pc, #24]	; (8006e94 <MX_CRC_Init+0x20>)
 8006e7a:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8006e80:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8006e82:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8006e84:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8006e86:	3301      	adds	r3, #1
 8006e88:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8006e8a:	f7fc faa7 	bl	80033dc <HAL_CRC_Init>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8006e8e:	bd10      	pop	{r4, pc}
 8006e90:	20003f60 	.word	0x20003f60
 8006e94:	40023000 	.word	0x40023000

08006e98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006e98:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006e9a:	4809      	ldr	r0, [pc, #36]	; (8006ec0 <MX_USART1_UART_Init+0x28>)
 8006e9c:	4b09      	ldr	r3, [pc, #36]	; (8006ec4 <MX_USART1_UART_Init+0x2c>)
 8006e9e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8006ea0:	23e1      	movs	r3, #225	; 0xe1
 8006ea2:	025b      	lsls	r3, r3, #9
 8006ea4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006eaa:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006eac:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006eae:	220c      	movs	r2, #12
 8006eb0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006eb2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006eb4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006eb6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006eb8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006eba:	f7fe f9d9 	bl	8005270 <HAL_UART_Init>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006ebe:	bd10      	pop	{r4, pc}
 8006ec0:	20004050 	.word	0x20004050
 8006ec4:	40013800 	.word	0x40013800

08006ec8 <MX_TIM7_Init>:
{
 8006ec8:	b530      	push	{r4, r5, lr}
 8006eca:	b083      	sub	sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006ecc:	2208      	movs	r2, #8
 8006ece:	2100      	movs	r1, #0
 8006ed0:	4668      	mov	r0, sp
 8006ed2:	f001 fed6 	bl	8008c82 <memset>
  htim7.Instance = TIM7;
 8006ed6:	4c0b      	ldr	r4, [pc, #44]	; (8006f04 <MX_TIM7_Init+0x3c>)
 8006ed8:	4b0b      	ldr	r3, [pc, #44]	; (8006f08 <MX_TIM7_Init+0x40>)
 8006eda:	6023      	str	r3, [r4, #0]
  htim7.Init.Prescaler = 32;
 8006edc:	2320      	movs	r3, #32
 8006ede:	6063      	str	r3, [r4, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ee0:	2500      	movs	r5, #0
 8006ee2:	60a5      	str	r5, [r4, #8]
  htim7.Init.Period = 10000;
 8006ee4:	4b09      	ldr	r3, [pc, #36]	; (8006f0c <MX_TIM7_Init+0x44>)
 8006ee6:	60e3      	str	r3, [r4, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006ee8:	2380      	movs	r3, #128	; 0x80
 8006eea:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006eec:	0020      	movs	r0, r4
 8006eee:	f7fd fb9f 	bl	8004630 <HAL_TIM_Base_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006ef2:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006ef4:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006ef6:	4669      	mov	r1, sp
 8006ef8:	0020      	movs	r0, r4
 8006efa:	f7fd fcf0 	bl	80048de <HAL_TIMEx_MasterConfigSynchronization>
}
 8006efe:	b003      	add	sp, #12
 8006f00:	bd30      	pop	{r4, r5, pc}
 8006f02:	46c0      	nop			; (mov r8, r8)
 8006f04:	20004178 	.word	0x20004178
 8006f08:	40001400 	.word	0x40001400
 8006f0c:	00002710 	.word	0x00002710

08006f10 <MX_NVIC_Init>:
{
 8006f10:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriority(TIM21_IRQn, 3, 0);
 8006f12:	2200      	movs	r2, #0
 8006f14:	2103      	movs	r1, #3
 8006f16:	2014      	movs	r0, #20
 8006f18:	f7fc f9d2 	bl	80032c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8006f1c:	2014      	movs	r0, #20
 8006f1e:	f7fc f9ff 	bl	8003320 <HAL_NVIC_EnableIRQ>
}
 8006f22:	bd10      	pop	{r4, pc}

08006f24 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8006f24:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8006f26:	2001      	movs	r0, #1
 8006f28:	f7fe fa20 	bl	800536c <osDelay>
 8006f2c:	e7fb      	b.n	8006f26 <StartDefaultTask+0x2>
	...

08006f30 <SystemClock_Config>:
{
 8006f30:	b530      	push	{r4, r5, lr}
 8006f32:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006f34:	2238      	movs	r2, #56	; 0x38
 8006f36:	2100      	movs	r1, #0
 8006f38:	a80e      	add	r0, sp, #56	; 0x38
 8006f3a:	f001 fea2 	bl	8008c82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006f3e:	2214      	movs	r2, #20
 8006f40:	2100      	movs	r1, #0
 8006f42:	a809      	add	r0, sp, #36	; 0x24
 8006f44:	f001 fe9d 	bl	8008c82 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006f48:	2224      	movs	r2, #36	; 0x24
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	4668      	mov	r0, sp
 8006f4e:	f001 fe98 	bl	8008c82 <memset>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006f52:	4916      	ldr	r1, [pc, #88]	; (8006fac <SystemClock_Config+0x7c>)
 8006f54:	680b      	ldr	r3, [r1, #0]
 8006f56:	4a16      	ldr	r2, [pc, #88]	; (8006fb0 <SystemClock_Config+0x80>)
 8006f58:	401a      	ands	r2, r3
 8006f5a:	2380      	movs	r3, #128	; 0x80
 8006f5c:	011b      	lsls	r3, r3, #4
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006f62:	2302      	movs	r3, #2
 8006f64:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006f66:	2501      	movs	r5, #1
 8006f68:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006f6a:	2210      	movs	r2, #16
 8006f6c:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006f6e:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006f70:	2400      	movs	r4, #0
 8006f72:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8006f74:	2380      	movs	r3, #128	; 0x80
 8006f76:	02db      	lsls	r3, r3, #11
 8006f78:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8006f7a:	2380      	movs	r3, #128	; 0x80
 8006f7c:	03db      	lsls	r3, r3, #15
 8006f7e:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006f80:	a80e      	add	r0, sp, #56	; 0x38
 8006f82:	f7fc fe0b 	bl	8003b9c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006f86:	230f      	movs	r3, #15
 8006f88:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006f8a:	3b0c      	subs	r3, #12
 8006f8c:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006f8e:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006f90:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006f92:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006f94:	2101      	movs	r1, #1
 8006f96:	a809      	add	r0, sp, #36	; 0x24
 8006f98:	f7fd f8c8 	bl	800412c <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006f9c:	9500      	str	r5, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006f9e:	9402      	str	r4, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006fa0:	4668      	mov	r0, sp
 8006fa2:	f7fd f9dd 	bl	8004360 <HAL_RCCEx_PeriphCLKConfig>
}
 8006fa6:	b01d      	add	sp, #116	; 0x74
 8006fa8:	bd30      	pop	{r4, r5, pc}
 8006faa:	46c0      	nop			; (mov r8, r8)
 8006fac:	40007000 	.word	0x40007000
 8006fb0:	ffffe7ff 	.word	0xffffe7ff

08006fb4 <MX_ADC_Init>:
{
 8006fb4:	b570      	push	{r4, r5, r6, lr}
 8006fb6:	b082      	sub	sp, #8
  ADC_ChannelConfTypeDef sConfig = {0};
 8006fb8:	2208      	movs	r2, #8
 8006fba:	2100      	movs	r1, #0
 8006fbc:	4668      	mov	r0, sp
 8006fbe:	f001 fe60 	bl	8008c82 <memset>
  hadc.Instance = ADC1;
 8006fc2:	4c22      	ldr	r4, [pc, #136]	; (800704c <MX_ADC_Init+0x98>)
 8006fc4:	4b22      	ldr	r3, [pc, #136]	; (8007050 <MX_ADC_Init+0x9c>)
 8006fc6:	6023      	str	r3, [r4, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8006fcc:	2280      	movs	r2, #128	; 0x80
 8006fce:	0312      	lsls	r2, r2, #12
 8006fd0:	6062      	str	r2, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8006fd2:	60a3      	str	r3, [r4, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_39CYCLES_5;
 8006fd4:	2205      	movs	r2, #5
 8006fd6:	63a2      	str	r2, [r4, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8006fd8:	2501      	movs	r5, #1
 8006fda:	6125      	str	r5, [r4, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006fdc:	60e3      	str	r3, [r4, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8006fde:	321b      	adds	r2, #27
 8006fe0:	54a5      	strb	r5, [r4, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8006fe2:	3201      	adds	r2, #1
 8006fe4:	54a3      	strb	r3, [r4, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006fe6:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006fe8:	22c2      	movs	r2, #194	; 0xc2
 8006fea:	32ff      	adds	r2, #255	; 0xff
 8006fec:	6262      	str	r2, [r4, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8006fee:	3a96      	subs	r2, #150	; 0x96
 8006ff0:	3aff      	subs	r2, #255	; 0xff
 8006ff2:	54a5      	strb	r5, [r4, r2]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8006ff4:	3a24      	subs	r2, #36	; 0x24
 8006ff6:	6162      	str	r2, [r4, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006ff8:	2680      	movs	r6, #128	; 0x80
 8006ffa:	0176      	lsls	r6, r6, #5
 8006ffc:	6326      	str	r6, [r4, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8006ffe:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8007000:	6363      	str	r3, [r4, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8007002:	61e3      	str	r3, [r4, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8007004:	0020      	movs	r0, r4
 8007006:	f7fb fef1 	bl	8002dec <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_0;
 800700a:	9500      	str	r5, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800700c:	9601      	str	r6, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800700e:	4669      	mov	r1, sp
 8007010:	0020      	movs	r0, r4
 8007012:	f7fc f8f7 	bl	8003204 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_1;
 8007016:	4b0f      	ldr	r3, [pc, #60]	; (8007054 <MX_ADC_Init+0xa0>)
 8007018:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800701a:	4669      	mov	r1, sp
 800701c:	0020      	movs	r0, r4
 800701e:	f7fc f8f1 	bl	8003204 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_2;
 8007022:	4b0d      	ldr	r3, [pc, #52]	; (8007058 <MX_ADC_Init+0xa4>)
 8007024:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007026:	4669      	mov	r1, sp
 8007028:	0020      	movs	r0, r4
 800702a:	f7fc f8eb 	bl	8003204 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_3;
 800702e:	4b0b      	ldr	r3, [pc, #44]	; (800705c <MX_ADC_Init+0xa8>)
 8007030:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007032:	4669      	mov	r1, sp
 8007034:	0020      	movs	r0, r4
 8007036:	f7fc f8e5 	bl	8003204 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_4;
 800703a:	4b09      	ldr	r3, [pc, #36]	; (8007060 <MX_ADC_Init+0xac>)
 800703c:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800703e:	4669      	mov	r1, sp
 8007040:	0020      	movs	r0, r4
 8007042:	f7fc f8df 	bl	8003204 <HAL_ADC_ConfigChannel>
}
 8007046:	b002      	add	sp, #8
 8007048:	bd70      	pop	{r4, r5, r6, pc}
 800704a:	46c0      	nop			; (mov r8, r8)
 800704c:	2000411c 	.word	0x2000411c
 8007050:	40012400 	.word	0x40012400
 8007054:	04000002 	.word	0x04000002
 8007058:	08000004 	.word	0x08000004
 800705c:	0c000008 	.word	0x0c000008
 8007060:	10000010 	.word	0x10000010

08007064 <MX_TIM21_Init>:
{
 8007064:	b530      	push	{r4, r5, lr}
 8007066:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007068:	2210      	movs	r2, #16
 800706a:	2100      	movs	r1, #0
 800706c:	a802      	add	r0, sp, #8
 800706e:	f001 fe08 	bl	8008c82 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007072:	2208      	movs	r2, #8
 8007074:	2100      	movs	r1, #0
 8007076:	4668      	mov	r0, sp
 8007078:	f001 fe03 	bl	8008c82 <memset>
  htim21.Instance = TIM21;
 800707c:	4c0e      	ldr	r4, [pc, #56]	; (80070b8 <MX_TIM21_Init+0x54>)
 800707e:	4b0f      	ldr	r3, [pc, #60]	; (80070bc <MX_TIM21_Init+0x58>)
 8007080:	6023      	str	r3, [r4, #0]
  htim21.Init.Prescaler = 32000-1;
 8007082:	4b0f      	ldr	r3, [pc, #60]	; (80070c0 <MX_TIM21_Init+0x5c>)
 8007084:	6063      	str	r3, [r4, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007086:	2500      	movs	r5, #0
 8007088:	60a5      	str	r5, [r4, #8]
  htim21.Init.Period = 100-1;
 800708a:	2363      	movs	r3, #99	; 0x63
 800708c:	60e3      	str	r3, [r4, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800708e:	6125      	str	r5, [r4, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007090:	331d      	adds	r3, #29
 8007092:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8007094:	0020      	movs	r0, r4
 8007096:	f7fd facb 	bl	8004630 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800709a:	2380      	movs	r3, #128	; 0x80
 800709c:	015b      	lsls	r3, r3, #5
 800709e:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80070a0:	a902      	add	r1, sp, #8
 80070a2:	0020      	movs	r0, r4
 80070a4:	f7fd fb14 	bl	80046d0 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80070a8:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80070aa:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80070ac:	4669      	mov	r1, sp
 80070ae:	0020      	movs	r0, r4
 80070b0:	f7fd fc15 	bl	80048de <HAL_TIMEx_MasterConfigSynchronization>
}
 80070b4:	b007      	add	sp, #28
 80070b6:	bd30      	pop	{r4, r5, pc}
 80070b8:	200041b4 	.word	0x200041b4
 80070bc:	40010800 	.word	0x40010800
 80070c0:	00007cff 	.word	0x00007cff

080070c4 <MX_TIM22_Init>:
{
 80070c4:	b530      	push	{r4, r5, lr}
 80070c6:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80070c8:	2210      	movs	r2, #16
 80070ca:	2100      	movs	r1, #0
 80070cc:	a802      	add	r0, sp, #8
 80070ce:	f001 fdd8 	bl	8008c82 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80070d2:	2208      	movs	r2, #8
 80070d4:	2100      	movs	r1, #0
 80070d6:	4668      	mov	r0, sp
 80070d8:	f001 fdd3 	bl	8008c82 <memset>
  htim22.Instance = TIM22;
 80070dc:	4c0f      	ldr	r4, [pc, #60]	; (800711c <MX_TIM22_Init+0x58>)
 80070de:	4b10      	ldr	r3, [pc, #64]	; (8007120 <MX_TIM22_Init+0x5c>)
 80070e0:	6023      	str	r3, [r4, #0]
  htim22.Init.Prescaler = 32-1;
 80070e2:	231f      	movs	r3, #31
 80070e4:	6063      	str	r3, [r4, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 80070e6:	2500      	movs	r5, #0
 80070e8:	60a5      	str	r5, [r4, #8]
  htim22.Init.Period = 0xFFFF-1;
 80070ea:	4b0e      	ldr	r3, [pc, #56]	; (8007124 <MX_TIM22_Init+0x60>)
 80070ec:	60e3      	str	r3, [r4, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80070ee:	6125      	str	r5, [r4, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80070f0:	6165      	str	r5, [r4, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 80070f2:	0020      	movs	r0, r4
 80070f4:	f7fd fa9c 	bl	8004630 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80070f8:	2380      	movs	r3, #128	; 0x80
 80070fa:	015b      	lsls	r3, r3, #5
 80070fc:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 80070fe:	a902      	add	r1, sp, #8
 8007100:	0020      	movs	r0, r4
 8007102:	f7fd fae5 	bl	80046d0 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007106:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007108:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 800710a:	4669      	mov	r1, sp
 800710c:	0020      	movs	r0, r4
 800710e:	f7fd fbe6 	bl	80048de <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Base_Start(&htim22);
 8007112:	0020      	movs	r0, r4
 8007114:	f7fd faa6 	bl	8004664 <HAL_TIM_Base_Start>
}
 8007118:	b007      	add	sp, #28
 800711a:	bd30      	pop	{r4, r5, pc}
 800711c:	20004014 	.word	0x20004014
 8007120:	40011400 	.word	0x40011400
 8007124:	0000fffe 	.word	0x0000fffe

08007128 <MX_DMA_Init>:
{
 8007128:	b500      	push	{lr}
 800712a:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 800712c:	4a0d      	ldr	r2, [pc, #52]	; (8007164 <MX_DMA_Init+0x3c>)
 800712e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007130:	2301      	movs	r3, #1
 8007132:	4319      	orrs	r1, r3
 8007134:	6311      	str	r1, [r2, #48]	; 0x30
 8007136:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007138:	4013      	ands	r3, r2
 800713a:	9301      	str	r3, [sp, #4]
 800713c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 800713e:	2200      	movs	r2, #0
 8007140:	2103      	movs	r1, #3
 8007142:	2009      	movs	r0, #9
 8007144:	f7fc f8bc 	bl	80032c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007148:	2009      	movs	r0, #9
 800714a:	f7fc f8e9 	bl	8003320 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 800714e:	2200      	movs	r2, #0
 8007150:	2103      	movs	r1, #3
 8007152:	200a      	movs	r0, #10
 8007154:	f7fc f8b4 	bl	80032c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8007158:	200a      	movs	r0, #10
 800715a:	f7fc f8e1 	bl	8003320 <HAL_NVIC_EnableIRQ>
}
 800715e:	b003      	add	sp, #12
 8007160:	bd00      	pop	{pc}
 8007162:	46c0      	nop			; (mov r8, r8)
 8007164:	40021000 	.word	0x40021000

08007168 <MX_GPIO_Init>:
{
 8007168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800716a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800716c:	2214      	movs	r2, #20
 800716e:	2100      	movs	r1, #0
 8007170:	a803      	add	r0, sp, #12
 8007172:	f001 fd86 	bl	8008c82 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007176:	4b29      	ldr	r3, [pc, #164]	; (800721c <MX_GPIO_Init+0xb4>)
 8007178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800717a:	2501      	movs	r5, #1
 800717c:	432a      	orrs	r2, r5
 800717e:	62da      	str	r2, [r3, #44]	; 0x2c
 8007180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007182:	402a      	ands	r2, r5
 8007184:	9201      	str	r2, [sp, #4]
 8007186:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800718a:	2702      	movs	r7, #2
 800718c:	433a      	orrs	r2, r7
 800718e:	62da      	str	r2, [r3, #44]	; 0x2c
 8007190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007192:	403b      	ands	r3, r7
 8007194:	9302      	str	r3, [sp, #8]
 8007196:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, ON_OFF_Pin|RESET_Pin|VMON_CLK_Pin, GPIO_PIN_RESET);
 8007198:	26a0      	movs	r6, #160	; 0xa0
 800719a:	05f6      	lsls	r6, r6, #23
 800719c:	2200      	movs	r2, #0
 800719e:	4920      	ldr	r1, [pc, #128]	; (8007220 <MX_GPIO_Init+0xb8>)
 80071a0:	0030      	movs	r0, r6
 80071a2:	f7fc fc9c 	bl	8003ade <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LDO_OFF_GPIO_Port, LDO_OFF_Pin, GPIO_PIN_SET);
 80071a6:	2201      	movs	r2, #1
 80071a8:	2140      	movs	r1, #64	; 0x40
 80071aa:	0030      	movs	r0, r6
 80071ac:	f7fc fc97 	bl	8003ade <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_CTRL_Pin|CHR_CTRL_Pin, GPIO_PIN_RESET);
 80071b0:	2200      	movs	r2, #0
 80071b2:	210a      	movs	r1, #10
 80071b4:	481b      	ldr	r0, [pc, #108]	; (8007224 <MX_GPIO_Init+0xbc>)
 80071b6:	f7fc fc92 	bl	8003ade <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = ON_OFF_Pin|LDO_OFF_Pin|RESET_Pin;
 80071ba:	23e0      	movs	r3, #224	; 0xe0
 80071bc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80071be:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80071c0:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071c2:	2400      	movs	r4, #0
 80071c4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071c6:	a903      	add	r1, sp, #12
 80071c8:	0030      	movs	r0, r6
 80071ca:	f7fc fbb3 	bl	8003934 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LDO_OK_Pin|STAT2_Pin|STAT1_Pin;
 80071ce:	2331      	movs	r3, #49	; 0x31
 80071d0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80071d2:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80071d4:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071d6:	a903      	add	r1, sp, #12
 80071d8:	4812      	ldr	r0, [pc, #72]	; (8007224 <MX_GPIO_Init+0xbc>)
 80071da:	f7fc fbab 	bl	8003934 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_CTRL_Pin|CHR_CTRL_Pin;
 80071de:	230a      	movs	r3, #10
 80071e0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80071e2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80071e4:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071e6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071e8:	a903      	add	r1, sp, #12
 80071ea:	480e      	ldr	r0, [pc, #56]	; (8007224 <MX_GPIO_Init+0xbc>)
 80071ec:	f7fc fba2 	bl	8003934 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_IND_Pin;
 80071f0:	2380      	movs	r3, #128	; 0x80
 80071f2:	005b      	lsls	r3, r3, #1
 80071f4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80071f6:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071f8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(LED_IND_GPIO_Port, &GPIO_InitStruct);
 80071fa:	a903      	add	r1, sp, #12
 80071fc:	0030      	movs	r0, r6
 80071fe:	f7fc fb99 	bl	8003934 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VMON_CLK_Pin;
 8007202:	2380      	movs	r3, #128	; 0x80
 8007204:	021b      	lsls	r3, r3, #8
 8007206:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007208:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800720a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800720c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(VMON_CLK_GPIO_Port, &GPIO_InitStruct);
 800720e:	a903      	add	r1, sp, #12
 8007210:	0030      	movs	r0, r6
 8007212:	f7fc fb8f 	bl	8003934 <HAL_GPIO_Init>
}
 8007216:	b009      	add	sp, #36	; 0x24
 8007218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800721a:	46c0      	nop			; (mov r8, r8)
 800721c:	40021000 	.word	0x40021000
 8007220:	000080a0 	.word	0x000080a0
 8007224:	50000400 	.word	0x50000400

08007228 <eeprom_ram_init>:
{
 8007228:	b510      	push	{r4, lr}
 800722a:	0004      	movs	r4, r0
	memcpy(eeprom, (uint32_t*)EEPROM_BASE_ADDRESS, sizeof(EEPROMStorageTypDef));
 800722c:	2214      	movs	r2, #20
 800722e:	490e      	ldr	r1, [pc, #56]	; (8007268 <eeprom_ram_init+0x40>)
 8007230:	f001 fd1e 	bl	8008c70 <memcpy>
	crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)eeprom, sizeof(EEPROMStorageTypDef)-sizeof(uint32_t));
 8007234:	2210      	movs	r2, #16
 8007236:	0021      	movs	r1, r4
 8007238:	480c      	ldr	r0, [pc, #48]	; (800726c <eeprom_ram_init+0x44>)
 800723a:	f7fc f911 	bl	8003460 <HAL_CRC_Calculate>
	if(crc != eeprom->crc)
 800723e:	6923      	ldr	r3, [r4, #16]
 8007240:	4283      	cmp	r3, r0
 8007242:	d00d      	beq.n	8007260 <eeprom_ram_init+0x38>
		eeprom->batt_full_mah = FULL_BATT_MAH;
 8007244:	23c8      	movs	r3, #200	; 0xc8
 8007246:	019b      	lsls	r3, r3, #6
 8007248:	8163      	strh	r3, [r4, #10]
		eeprom->batt_full_mv = FULL_BATT_MV;
 800724a:	4b09      	ldr	r3, [pc, #36]	; (8007270 <eeprom_ram_init+0x48>)
 800724c:	8123      	strh	r3, [r4, #8]
		eeprom->batt_low_mv = BATT_LOW_MV;
 800724e:	4b09      	ldr	r3, [pc, #36]	; (8007274 <eeprom_ram_init+0x4c>)
 8007250:	81a3      	strh	r3, [r4, #12]
		eeprom->vin_hys_mv = VINPUT_HYS;
 8007252:	4b09      	ldr	r3, [pc, #36]	; (8007278 <eeprom_ram_init+0x50>)
 8007254:	80e3      	strh	r3, [r4, #6]
		eeprom->vin_limit_mv = VINPUT_LIMIT;
 8007256:	4b09      	ldr	r3, [pc, #36]	; (800727c <eeprom_ram_init+0x54>)
 8007258:	80a3      	strh	r3, [r4, #4]
		eeprom->total_batt_ouput_ah = 0;
 800725a:	2300      	movs	r3, #0
 800725c:	6023      	str	r3, [r4, #0]
}
 800725e:	bd10      	pop	{r4, pc}
		storage.total_batt_ouput_ah = eeprom->total_batt_ouput_ah;
 8007260:	6822      	ldr	r2, [r4, #0]
 8007262:	4b07      	ldr	r3, [pc, #28]	; (8007280 <eeprom_ram_init+0x58>)
 8007264:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007266:	e7fa      	b.n	800725e <eeprom_ram_init+0x36>
 8007268:	08080000 	.word	0x08080000
 800726c:	20003f60 	.word	0x20003f60
 8007270:	00003138 	.word	0x00003138
 8007274:	00002328 	.word	0x00002328
 8007278:	00001388 	.word	0x00001388
 800727c:	000033f4 	.word	0x000033f4
 8007280:	20004690 	.word	0x20004690

08007284 <eeprom_save>:
{
 8007284:	b510      	push	{r4, lr}
 8007286:	0004      	movs	r4, r0
	crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)eeprom, sizeof(EEPROMStorageTypDef)-sizeof(uint32_t));
 8007288:	2210      	movs	r2, #16
 800728a:	0001      	movs	r1, r0
 800728c:	4806      	ldr	r0, [pc, #24]	; (80072a8 <eeprom_save+0x24>)
 800728e:	f7fc f8e7 	bl	8003460 <HAL_CRC_Calculate>
	if(eeprom->crc != crc)
 8007292:	6923      	ldr	r3, [r4, #16]
 8007294:	4283      	cmp	r3, r0
 8007296:	d005      	beq.n	80072a4 <eeprom_save+0x20>
		eeprom->crc = crc;
 8007298:	6120      	str	r0, [r4, #16]
		writeEEPROMData(0, (uint8_t*)eeprom, sizeof(EEPROMStorageTypDef));
 800729a:	2214      	movs	r2, #20
 800729c:	0021      	movs	r1, r4
 800729e:	2000      	movs	r0, #0
 80072a0:	f7ff fcc0 	bl	8006c24 <writeEEPROMData>
}
 80072a4:	bd10      	pop	{r4, pc}
 80072a6:	46c0      	nop			; (mov r8, r8)
 80072a8:	20003f60 	.word	0x20003f60

080072ac <main>:
{
 80072ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ae:	46c6      	mov	lr, r8
 80072b0:	b500      	push	{lr}
 80072b2:	b0a4      	sub	sp, #144	; 0x90
  HAL_Init();
 80072b4:	f7fb fd24 	bl	8002d00 <HAL_Init>
  SystemClock_Config();
 80072b8:	f7ff fe3a 	bl	8006f30 <SystemClock_Config>
  MX_GPIO_Init();
 80072bc:	f7ff ff54 	bl	8007168 <MX_GPIO_Init>
  MX_DMA_Init();
 80072c0:	f7ff ff32 	bl	8007128 <MX_DMA_Init>
  MX_ADC_Init();
 80072c4:	f7ff fe76 	bl	8006fb4 <MX_ADC_Init>
  MX_TIM22_Init();
 80072c8:	f7ff fefc 	bl	80070c4 <MX_TIM22_Init>
  MX_TIM21_Init();
 80072cc:	f7ff feca 	bl	8007064 <MX_TIM21_Init>
  MX_CRC_Init();
 80072d0:	f7ff fdd0 	bl	8006e74 <MX_CRC_Init>
  MX_USART1_UART_Init();
 80072d4:	f7ff fde0 	bl	8006e98 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 80072d8:	f7ff fdf6 	bl	8006ec8 <MX_TIM7_Init>
  MX_NVIC_Init();
 80072dc:	f7ff fe18 	bl	8006f10 <MX_NVIC_Init>
  eeprom_ram_init(&eeprom_info);
 80072e0:	4c33      	ldr	r4, [pc, #204]	; (80073b0 <main+0x104>)
 80072e2:	0020      	movs	r0, r4
 80072e4:	f7ff ffa0 	bl	8007228 <eeprom_ram_init>
  eeprom_save(&eeprom_info);
 80072e8:	0020      	movs	r0, r4
 80072ea:	f7ff ffcb 	bl	8007284 <eeprom_save>
 SCP_Init(uart_send_buff, uart_read_byte);
 80072ee:	4931      	ldr	r1, [pc, #196]	; (80073b4 <main+0x108>)
 80072f0:	4831      	ldr	r0, [pc, #196]	; (80073b8 <main+0x10c>)
 80072f2:	f7ff fba9 	bl	8006a48 <SCP_Init>
 SCP_InitRx();
 80072f6:	f7ff fc53 	bl	8006ba0 <SCP_InitRx>
  led_msg = osMessageCreate (&led_msg_def, LEDControlTaskHandle);
 80072fa:	4e30      	ldr	r6, [pc, #192]	; (80073bc <main+0x110>)
 80072fc:	6831      	ldr	r1, [r6, #0]
 80072fe:	4830      	ldr	r0, [pc, #192]	; (80073c0 <main+0x114>)
 8007300:	f7fe f89e 	bl	8005440 <osMessageCreate>
 8007304:	4b2f      	ldr	r3, [pc, #188]	; (80073c4 <main+0x118>)
 8007306:	6018      	str	r0, [r3, #0]
  ind_msg = osMessageCreate (&ind_msg_def, IndicationTaskHandle);
 8007308:	4b2f      	ldr	r3, [pc, #188]	; (80073c8 <main+0x11c>)
 800730a:	4698      	mov	r8, r3
 800730c:	6819      	ldr	r1, [r3, #0]
 800730e:	482f      	ldr	r0, [pc, #188]	; (80073cc <main+0x120>)
 8007310:	f7fe f896 	bl	8005440 <osMessageCreate>
 8007314:	4b2e      	ldr	r3, [pc, #184]	; (80073d0 <main+0x124>)
 8007316:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 64);
 8007318:	a81d      	add	r0, sp, #116	; 0x74
 800731a:	4c2e      	ldr	r4, [pc, #184]	; (80073d4 <main+0x128>)
 800731c:	0003      	movs	r3, r0
 800731e:	0022      	movs	r2, r4
 8007320:	caa2      	ldmia	r2!, {r1, r5, r7}
 8007322:	c3a2      	stmia	r3!, {r1, r5, r7}
 8007324:	caa2      	ldmia	r2!, {r1, r5, r7}
 8007326:	c3a2      	stmia	r3!, {r1, r5, r7}
 8007328:	6812      	ldr	r2, [r2, #0]
 800732a:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800732c:	2100      	movs	r1, #0
 800732e:	f7fd ffe6 	bl	80052fe <osThreadCreate>
 8007332:	4b29      	ldr	r3, [pc, #164]	; (80073d8 <main+0x12c>)
 8007334:	6018      	str	r0, [r3, #0]
  osThreadDef(ledcontrol, LEDControlTask, osPriorityAboveNormal, 0, 64);
 8007336:	a816      	add	r0, sp, #88	; 0x58
 8007338:	0002      	movs	r2, r0
 800733a:	0023      	movs	r3, r4
 800733c:	331c      	adds	r3, #28
 800733e:	cba2      	ldmia	r3!, {r1, r5, r7}
 8007340:	c2a2      	stmia	r2!, {r1, r5, r7}
 8007342:	cba2      	ldmia	r3!, {r1, r5, r7}
 8007344:	c2a2      	stmia	r2!, {r1, r5, r7}
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6013      	str	r3, [r2, #0]
  LEDControlTaskHandle = osThreadCreate(osThread(ledcontrol), NULL);
 800734a:	2100      	movs	r1, #0
 800734c:	f7fd ffd7 	bl	80052fe <osThreadCreate>
 8007350:	6030      	str	r0, [r6, #0]
  osThreadDef(monitoring, MonitorTask, osPriorityHigh, 0, 64);
 8007352:	a80f      	add	r0, sp, #60	; 0x3c
 8007354:	0002      	movs	r2, r0
 8007356:	0023      	movs	r3, r4
 8007358:	3338      	adds	r3, #56	; 0x38
 800735a:	cb62      	ldmia	r3!, {r1, r5, r6}
 800735c:	c262      	stmia	r2!, {r1, r5, r6}
 800735e:	cb62      	ldmia	r3!, {r1, r5, r6}
 8007360:	c262      	stmia	r2!, {r1, r5, r6}
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6013      	str	r3, [r2, #0]
  MonitorTaskHandle = osThreadCreate(osThread(monitoring), NULL);
 8007366:	2100      	movs	r1, #0
 8007368:	f7fd ffc9 	bl	80052fe <osThreadCreate>
 800736c:	4b1b      	ldr	r3, [pc, #108]	; (80073dc <main+0x130>)
 800736e:	6018      	str	r0, [r3, #0]
  osThreadDef(indication, IndicationTask, osPriorityAboveNormal, 0, 64);
 8007370:	a808      	add	r0, sp, #32
 8007372:	0002      	movs	r2, r0
 8007374:	0023      	movs	r3, r4
 8007376:	3354      	adds	r3, #84	; 0x54
 8007378:	cb62      	ldmia	r3!, {r1, r5, r6}
 800737a:	c262      	stmia	r2!, {r1, r5, r6}
 800737c:	cb62      	ldmia	r3!, {r1, r5, r6}
 800737e:	c262      	stmia	r2!, {r1, r5, r6}
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6013      	str	r3, [r2, #0]
  IndicationTaskHandle = osThreadCreate(osThread(indication), NULL);
 8007384:	2100      	movs	r1, #0
 8007386:	f7fd ffba 	bl	80052fe <osThreadCreate>
 800738a:	4643      	mov	r3, r8
 800738c:	6018      	str	r0, [r3, #0]
  osThreadDef(management, ManagementTask, osPriorityNormal, 0, 1024);
 800738e:	a801      	add	r0, sp, #4
 8007390:	0002      	movs	r2, r0
 8007392:	3470      	adds	r4, #112	; 0x70
 8007394:	cc2a      	ldmia	r4!, {r1, r3, r5}
 8007396:	c22a      	stmia	r2!, {r1, r3, r5}
 8007398:	cc2a      	ldmia	r4!, {r1, r3, r5}
 800739a:	c22a      	stmia	r2!, {r1, r3, r5}
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	6013      	str	r3, [r2, #0]
  ManagementTaskHandle = osThreadCreate(osThread(management), NULL);
 80073a0:	2100      	movs	r1, #0
 80073a2:	f7fd ffac 	bl	80052fe <osThreadCreate>
 80073a6:	4b0e      	ldr	r3, [pc, #56]	; (80073e0 <main+0x134>)
 80073a8:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80073aa:	f7fd ffa3 	bl	80052f4 <osKernelStart>
 80073ae:	e7fe      	b.n	80073ae <main+0x102>
 80073b0:	20003f4c 	.word	0x20003f4c
 80073b4:	08008199 	.word	0x08008199
 80073b8:	08008185 	.word	0x08008185
 80073bc:	20003f40 	.word	0x20003f40
 80073c0:	0800c42c 	.word	0x0800c42c
 80073c4:	20003f44 	.word	0x20003f44
 80073c8:	20003f38 	.word	0x20003f38
 80073cc:	0800c41c 	.word	0x0800c41c
 80073d0:	20003f3c 	.word	0x20003f3c
 80073d4:	0800c2c0 	.word	0x0800c2c0
 80073d8:	20003f48 	.word	0x20003f48
 80073dc:	200046c4 	.word	0x200046c4
 80073e0:	200041f0 	.word	0x200041f0

080073e4 <HAL_UART_RxCpltCallback>:
{
 80073e4:	b510      	push	{r4, lr}
  if(huart->Instance == USART1)
 80073e6:	6802      	ldr	r2, [r0, #0]
 80073e8:	4b04      	ldr	r3, [pc, #16]	; (80073fc <HAL_UART_RxCpltCallback+0x18>)
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d000      	beq.n	80073f0 <HAL_UART_RxCpltCallback+0xc>
}
 80073ee:	bd10      	pop	{r4, pc}
    SCP_ByteReceived(aRxBuffer);
 80073f0:	4b03      	ldr	r3, [pc, #12]	; (8007400 <HAL_UART_RxCpltCallback+0x1c>)
 80073f2:	7818      	ldrb	r0, [r3, #0]
 80073f4:	f7ff fbe2 	bl	8006bbc <SCP_ByteReceived>
}
 80073f8:	e7f9      	b.n	80073ee <HAL_UART_RxCpltCallback+0xa>
 80073fa:	46c0      	nop			; (mov r8, r8)
 80073fc:	40013800 	.word	0x40013800
 8007400:	200040d0 	.word	0x200040d0

08007404 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007404:	b510      	push	{r4, lr}
 8007406:	0004      	movs	r4, r0
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8007408:	2380      	movs	r3, #128	; 0x80
 800740a:	05db      	lsls	r3, r3, #23
 800740c:	6802      	ldr	r2, [r0, #0]
 800740e:	429a      	cmp	r2, r3
 8007410:	d008      	beq.n	8007424 <HAL_TIM_PeriodElapsedCallback+0x20>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM21)
 8007412:	4b0b      	ldr	r3, [pc, #44]	; (8007440 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8007414:	6822      	ldr	r2, [r4, #0]
 8007416:	429a      	cmp	r2, r3
 8007418:	d007      	beq.n	800742a <HAL_TIM_PeriodElapsedCallback+0x26>
  {
	  osSignalSet (MonitorTaskHandle, 0x00000001);
  }

  if (htim->Instance == TIM7)
 800741a:	6822      	ldr	r2, [r4, #0]
 800741c:	4b09      	ldr	r3, [pc, #36]	; (8007444 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800741e:	429a      	cmp	r2, r3
 8007420:	d009      	beq.n	8007436 <HAL_TIM_PeriodElapsedCallback+0x32>
  {
	  SCP_Tick(10);
  }

  /* USER CODE END Callback 1 */
}
 8007422:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8007424:	f7fb fc80 	bl	8002d28 <HAL_IncTick>
 8007428:	e7f3      	b.n	8007412 <HAL_TIM_PeriodElapsedCallback+0xe>
	  osSignalSet (MonitorTaskHandle, 0x00000001);
 800742a:	4b07      	ldr	r3, [pc, #28]	; (8007448 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800742c:	6818      	ldr	r0, [r3, #0]
 800742e:	2101      	movs	r1, #1
 8007430:	f7fd ffa4 	bl	800537c <osSignalSet>
 8007434:	e7f1      	b.n	800741a <HAL_TIM_PeriodElapsedCallback+0x16>
	  SCP_Tick(10);
 8007436:	200a      	movs	r0, #10
 8007438:	f7ff fae8 	bl	8006a0c <SCP_Tick>
}
 800743c:	e7f1      	b.n	8007422 <HAL_TIM_PeriodElapsedCallback+0x1e>
 800743e:	46c0      	nop			; (mov r8, r8)
 8007440:	40010800 	.word	0x40010800
 8007444:	40001400 	.word	0x40001400
 8007448:	200046c4 	.word	0x200046c4

0800744c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800744c:	4770      	bx	lr
	...

08007450 <charger_enable>:
		}
	}
}

void charger_enable(void)
{
 8007450:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(CHR_CTRL_GPIO_Port, CHR_CTRL_Pin, GPIO_PIN_RESET);
 8007452:	2200      	movs	r2, #0
 8007454:	2108      	movs	r1, #8
 8007456:	4802      	ldr	r0, [pc, #8]	; (8007460 <charger_enable+0x10>)
 8007458:	f7fc fb41 	bl	8003ade <HAL_GPIO_WritePin>
}
 800745c:	bd10      	pop	{r4, pc}
 800745e:	46c0      	nop			; (mov r8, r8)
 8007460:	50000400 	.word	0x50000400

08007464 <charger_disable>:
void charger_disable(void)
{
 8007464:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(CHR_CTRL_GPIO_Port, CHR_CTRL_Pin, GPIO_PIN_SET);
 8007466:	2201      	movs	r2, #1
 8007468:	2108      	movs	r1, #8
 800746a:	4802      	ldr	r0, [pc, #8]	; (8007474 <charger_disable+0x10>)
 800746c:	f7fc fb37 	bl	8003ade <HAL_GPIO_WritePin>
}
 8007470:	bd10      	pop	{r4, pc}
 8007472:	46c0      	nop			; (mov r8, r8)
 8007474:	50000400 	.word	0x50000400

08007478 <charger_status>:

ch_state_t charger_status(void)
{
 8007478:	b510      	push	{r4, lr}
	_Bool stat1;
	_Bool stat2;

	/*Read STAT1 pin*/
	if(HAL_GPIO_ReadPin(STAT1_GPIO_Port, STAT1_Pin) == GPIO_PIN_RESET)
 800747a:	2120      	movs	r1, #32
 800747c:	4813      	ldr	r0, [pc, #76]	; (80074cc <charger_status+0x54>)
 800747e:	f7fc fb27 	bl	8003ad0 <HAL_GPIO_ReadPin>
 8007482:	2800      	cmp	r0, #0
 8007484:	d115      	bne.n	80074b2 <charger_status+0x3a>
		{stat1 = 0;}
 8007486:	2400      	movs	r4, #0
	else
		{stat1 = 1;}

	/*Read STAT2 pin*/
	if(HAL_GPIO_ReadPin(STAT2_GPIO_Port, STAT2_Pin) == GPIO_PIN_RESET)
 8007488:	2110      	movs	r1, #16
 800748a:	4810      	ldr	r0, [pc, #64]	; (80074cc <charger_status+0x54>)
 800748c:	f7fc fb20 	bl	8003ad0 <HAL_GPIO_ReadPin>
 8007490:	2800      	cmp	r0, #0
 8007492:	d110      	bne.n	80074b6 <charger_status+0x3e>
		{stat2 = 0;}
 8007494:	2300      	movs	r3, #0
	else
		{stat2 = 1;}

	/*Decode logic*/
	if(stat1 && !stat2)
 8007496:	2c00      	cmp	r4, #0
 8007498:	d001      	beq.n	800749e <charger_status+0x26>
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00d      	beq.n	80074ba <charger_status+0x42>
	{
		return IN_PROGRESS;
	}
	if(!stat1 && stat2)
 800749e:	2c00      	cmp	r4, #0
 80074a0:	d101      	bne.n	80074a6 <charger_status+0x2e>
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10b      	bne.n	80074be <charger_status+0x46>
	{
		return COMPLETED;
	}
	if(!stat1 && !stat2)
 80074a6:	2c00      	cmp	r4, #0
 80074a8:	d10b      	bne.n	80074c2 <charger_status+0x4a>
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00b      	beq.n	80074c6 <charger_status+0x4e>
	{
		return INACTIVE;
	}

	return UNKNOWN;
 80074ae:	2002      	movs	r0, #2
}
 80074b0:	bd10      	pop	{r4, pc}
		{stat1 = 1;}
 80074b2:	2401      	movs	r4, #1
 80074b4:	e7e8      	b.n	8007488 <charger_status+0x10>
		{stat2 = 1;}
 80074b6:	2301      	movs	r3, #1
 80074b8:	e7ed      	b.n	8007496 <charger_status+0x1e>
		return IN_PROGRESS;
 80074ba:	2001      	movs	r0, #1
 80074bc:	e7f8      	b.n	80074b0 <charger_status+0x38>
		return COMPLETED;
 80074be:	2000      	movs	r0, #0
 80074c0:	e7f6      	b.n	80074b0 <charger_status+0x38>
	return UNKNOWN;
 80074c2:	2002      	movs	r0, #2
 80074c4:	e7f4      	b.n	80074b0 <charger_status+0x38>
		return INACTIVE;
 80074c6:	2001      	movs	r0, #1
 80074c8:	4240      	negs	r0, r0
 80074ca:	e7f1      	b.n	80074b0 <charger_status+0x38>
 80074cc:	50000400 	.word	0x50000400

080074d0 <load_setup>:

uint32_t load_setup(uint32_t capacity, uint32_t nightitme)
{
 80074d0:	b570      	push	{r4, r5, r6, lr}
 80074d2:	000e      	movs	r6, r1
	uint32_t intensity;
	uint32_t mAseconds;

	/*Decrease capacity to have more realistic results*/
	capacity = capacity * DRIVER_EFF;
 80074d4:	f7fb fb34 	bl	8002b40 <__aeabi_ui2d>
 80074d8:	4a15      	ldr	r2, [pc, #84]	; (8007530 <load_setup+0x60>)
 80074da:	4b16      	ldr	r3, [pc, #88]	; (8007534 <load_setup+0x64>)
 80074dc:	f7fa fcea 	bl	8001eb4 <__aeabi_dmul>
 80074e0:	f7f9 f854 	bl	800058c <__aeabi_d2uiz>

	/*Convert capacity to mAs*/
	mAseconds = capacity*3600;
 80074e4:	0103      	lsls	r3, r0, #4
 80074e6:	1a1b      	subs	r3, r3, r0
 80074e8:	0118      	lsls	r0, r3, #4
 80074ea:	1ac0      	subs	r0, r0, r3
 80074ec:	0105      	lsls	r5, r0, #4

	/*Look for load to have LEDs operational over night time*/
	for(intensity = 0; intensity < 32; intensity++)
 80074ee:	2400      	movs	r4, #0
 80074f0:	2c1f      	cmp	r4, #31
 80074f2:	d81a      	bhi.n	800752a <load_setup+0x5a>
	{
		osMessagePut(led_msg, intensity, osWaitForever);
 80074f4:	2201      	movs	r2, #1
 80074f6:	4b10      	ldr	r3, [pc, #64]	; (8007538 <load_setup+0x68>)
 80074f8:	6818      	ldr	r0, [r3, #0]
 80074fa:	4252      	negs	r2, r2
 80074fc:	0021      	movs	r1, r4
 80074fe:	f7fd ffb5 	bl	800546c <osMessagePut>
		osDelay(300);
 8007502:	2096      	movs	r0, #150	; 0x96
 8007504:	0040      	lsls	r0, r0, #1
 8007506:	f7fd ff31 	bl	800536c <osDelay>
		if(storage.coutput_ma*nightitme > mAseconds)
 800750a:	4b0c      	ldr	r3, [pc, #48]	; (800753c <load_setup+0x6c>)
 800750c:	69db      	ldr	r3, [r3, #28]
 800750e:	4373      	muls	r3, r6
 8007510:	42ab      	cmp	r3, r5
 8007512:	d801      	bhi.n	8007518 <load_setup+0x48>
	for(intensity = 0; intensity < 32; intensity++)
 8007514:	3401      	adds	r4, #1
 8007516:	e7eb      	b.n	80074f0 <load_setup+0x20>
		{
			osMessagePut(led_msg, intensity-1, osWaitForever);
 8007518:	2201      	movs	r2, #1
 800751a:	1e61      	subs	r1, r4, #1
 800751c:	4b06      	ldr	r3, [pc, #24]	; (8007538 <load_setup+0x68>)
 800751e:	6818      	ldr	r0, [r3, #0]
 8007520:	4252      	negs	r2, r2
 8007522:	f7fd ffa3 	bl	800546c <osMessagePut>
			return intensity;
		}
	}

	return intensity-1;
}
 8007526:	0020      	movs	r0, r4
 8007528:	bd70      	pop	{r4, r5, r6, pc}
	return intensity-1;
 800752a:	3c01      	subs	r4, #1
 800752c:	e7fb      	b.n	8007526 <load_setup+0x56>
 800752e:	46c0      	nop			; (mov r8, r8)
 8007530:	33333333 	.word	0x33333333
 8007534:	3feb3333 	.word	0x3feb3333
 8007538:	20003f44 	.word	0x20003f44
 800753c:	20004690 	.word	0x20004690

08007540 <ManagementTask>:
{
 8007540:	b570      	push	{r4, r5, r6, lr}
 8007542:	e053      	b.n	80075ec <ManagementTask+0xac>
				charger_enable();
 8007544:	f7ff ff84 	bl	8007450 <charger_enable>
				osDelay(5000);
 8007548:	489f      	ldr	r0, [pc, #636]	; (80077c8 <ManagementTask+0x288>)
 800754a:	f7fd ff0f 	bl	800536c <osDelay>
				ch_status = charger_status();
 800754e:	f7ff ff93 	bl	8007478 <charger_status>
				while(ch_status == IN_PROGRESS)
 8007552:	2801      	cmp	r0, #1
 8007554:	d116      	bne.n	8007584 <ManagementTask+0x44>
					osDelay(1000);
 8007556:	20fa      	movs	r0, #250	; 0xfa
 8007558:	0080      	lsls	r0, r0, #2
 800755a:	f7fd ff07 	bl	800536c <osDelay>
					discharge_lock = 0;
 800755e:	2300      	movs	r3, #0
 8007560:	4a9a      	ldr	r2, [pc, #616]	; (80077cc <ManagementTask+0x28c>)
 8007562:	7013      	strb	r3, [r2, #0]
					battery_charged = 0;
 8007564:	4a9a      	ldr	r2, [pc, #616]	; (80077d0 <ManagementTask+0x290>)
 8007566:	7013      	strb	r3, [r2, #0]
					osMessagePut(ind_msg, IND_RED, osWaitForever);
 8007568:	2201      	movs	r2, #1
 800756a:	4b9a      	ldr	r3, [pc, #616]	; (80077d4 <ManagementTask+0x294>)
 800756c:	6818      	ldr	r0, [r3, #0]
 800756e:	4252      	negs	r2, r2
 8007570:	2102      	movs	r1, #2
 8007572:	f7fd ff7b 	bl	800546c <osMessagePut>
					ch_status = charger_status();
 8007576:	f7ff ff7f 	bl	8007478 <charger_status>
					if(!storage.daytime_flag)/*Fail-safe*/
 800757a:	4a97      	ldr	r2, [pc, #604]	; (80077d8 <ManagementTask+0x298>)
 800757c:	2331      	movs	r3, #49	; 0x31
 800757e:	5cd3      	ldrb	r3, [r2, r3]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1e6      	bne.n	8007552 <ManagementTask+0x12>
				if(ch_status == COMPLETED)
 8007584:	2800      	cmp	r0, #0
 8007586:	d110      	bne.n	80075aa <ManagementTask+0x6a>
					battery_charged = 1;
 8007588:	4b91      	ldr	r3, [pc, #580]	; (80077d0 <ManagementTask+0x290>)
 800758a:	2201      	movs	r2, #1
 800758c:	701a      	strb	r2, [r3, #0]
					discharge_lock = 0;
 800758e:	4b8f      	ldr	r3, [pc, #572]	; (80077cc <ManagementTask+0x28c>)
 8007590:	2200      	movs	r2, #0
 8007592:	701a      	strb	r2, [r3, #0]
					osMessagePut(ind_msg, IND_GREEN, osWaitForever);
 8007594:	3201      	adds	r2, #1
 8007596:	4b8f      	ldr	r3, [pc, #572]	; (80077d4 <ManagementTask+0x294>)
 8007598:	6818      	ldr	r0, [r3, #0]
 800759a:	4252      	negs	r2, r2
 800759c:	2101      	movs	r1, #1
 800759e:	f7fd ff65 	bl	800546c <osMessagePut>
					storage.energy_stored_mah = FULL_BATT_MAH;
 80075a2:	4b8d      	ldr	r3, [pc, #564]	; (80077d8 <ManagementTask+0x298>)
 80075a4:	4a8d      	ldr	r2, [pc, #564]	; (80077dc <ManagementTask+0x29c>)
 80075a6:	621a      	str	r2, [r3, #32]
 80075a8:	e01b      	b.n	80075e2 <ManagementTask+0xa2>
					osMessagePut(ind_msg, IND_OFF, osWaitForever);
 80075aa:	2201      	movs	r2, #1
 80075ac:	4b89      	ldr	r3, [pc, #548]	; (80077d4 <ManagementTask+0x294>)
 80075ae:	6818      	ldr	r0, [r3, #0]
 80075b0:	4252      	negs	r2, r2
 80075b2:	2100      	movs	r1, #0
 80075b4:	f7fd ff5a 	bl	800546c <osMessagePut>
 80075b8:	e013      	b.n	80075e2 <ManagementTask+0xa2>
			charger_disable();
 80075ba:	f7ff ff53 	bl	8007464 <charger_disable>
			osMessagePut(ind_msg, IND_OFF, osWaitForever);
 80075be:	2401      	movs	r4, #1
 80075c0:	4264      	negs	r4, r4
 80075c2:	4b84      	ldr	r3, [pc, #528]	; (80077d4 <ManagementTask+0x294>)
 80075c4:	6818      	ldr	r0, [r3, #0]
 80075c6:	0022      	movs	r2, r4
 80075c8:	2100      	movs	r1, #0
 80075ca:	f7fd ff4f 	bl	800546c <osMessagePut>
			osMessagePut(led_msg, 0, osWaitForever);
 80075ce:	4b84      	ldr	r3, [pc, #528]	; (80077e0 <ManagementTask+0x2a0>)
 80075d0:	6818      	ldr	r0, [r3, #0]
 80075d2:	0022      	movs	r2, r4
 80075d4:	2100      	movs	r1, #0
 80075d6:	f7fd ff49 	bl	800546c <osMessagePut>
			if(!discharge_lock)
 80075da:	4b7c      	ldr	r3, [pc, #496]	; (80077cc <ManagementTask+0x28c>)
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d021      	beq.n	8007626 <ManagementTask+0xe6>
		if(battery_charged)
 80075e2:	4b7b      	ldr	r3, [pc, #492]	; (80077d0 <ManagementTask+0x290>)
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d000      	beq.n	80075ec <ManagementTask+0xac>
 80075ea:	e0cf      	b.n	800778c <ManagementTask+0x24c>
		osDelay(1000);
 80075ec:	20fa      	movs	r0, #250	; 0xfa
 80075ee:	0080      	lsls	r0, r0, #2
 80075f0:	f7fd febc 	bl	800536c <osDelay>
		if(storage.daytime_flag)
 80075f4:	4a78      	ldr	r2, [pc, #480]	; (80077d8 <ManagementTask+0x298>)
 80075f6:	2331      	movs	r3, #49	; 0x31
 80075f8:	5cd3      	ldrb	r3, [r2, r3]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d0dd      	beq.n	80075ba <ManagementTask+0x7a>
			if(storage.vinput_mv+100 > MPPT_MV)
 80075fe:	68d3      	ldr	r3, [r2, #12]
 8007600:	0019      	movs	r1, r3
 8007602:	3164      	adds	r1, #100	; 0x64
 8007604:	4a77      	ldr	r2, [pc, #476]	; (80077e4 <ManagementTask+0x2a4>)
 8007606:	4291      	cmp	r1, r2
 8007608:	d89c      	bhi.n	8007544 <ManagementTask+0x4>
			else if(storage.vinput_mv-100 < MPPT_MV)
 800760a:	3b64      	subs	r3, #100	; 0x64
 800760c:	4a76      	ldr	r2, [pc, #472]	; (80077e8 <ManagementTask+0x2a8>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d8e7      	bhi.n	80075e2 <ManagementTask+0xa2>
				charger_disable();
 8007612:	f7ff ff27 	bl	8007464 <charger_disable>
				osMessagePut(ind_msg, IND_OFF, osWaitForever);
 8007616:	2201      	movs	r2, #1
 8007618:	4b6e      	ldr	r3, [pc, #440]	; (80077d4 <ManagementTask+0x294>)
 800761a:	6818      	ldr	r0, [r3, #0]
 800761c:	4252      	negs	r2, r2
 800761e:	2100      	movs	r1, #0
 8007620:	f7fd ff24 	bl	800546c <osMessagePut>
 8007624:	e7dd      	b.n	80075e2 <ManagementTask+0xa2>
				if(storage.daylength_s < MIN_DAY_DUR)
 8007626:	4b6c      	ldr	r3, [pc, #432]	; (80077d8 <ManagementTask+0x298>)
 8007628:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800762a:	4b70      	ldr	r3, [pc, #448]	; (80077ec <ManagementTask+0x2ac>)
 800762c:	429c      	cmp	r4, r3
 800762e:	d914      	bls.n	800765a <ManagementTask+0x11a>
				else if(battery_charged)
 8007630:	4b67      	ldr	r3, [pc, #412]	; (80077d0 <ManagementTask+0x290>)
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d124      	bne.n	8007682 <ManagementTask+0x142>
					storage.energy_stored_mah -= storage.energy_released_mah;
 8007638:	4d67      	ldr	r5, [pc, #412]	; (80077d8 <ManagementTask+0x298>)
 800763a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800763c:	6a28      	ldr	r0, [r5, #32]
 800763e:	f7f9 fae5 	bl	8000c0c <__aeabi_fsub>
 8007642:	1c06      	adds	r6, r0, #0
 8007644:	6228      	str	r0, [r5, #32]
					storage.energy_released_mah = 0;
 8007646:	2100      	movs	r1, #0
 8007648:	6269      	str	r1, [r5, #36]	; 0x24
					if(storage.energy_stored_mah > 0)
 800764a:	f7f8 ff53 	bl	80004f4 <__aeabi_fcmpgt>
 800764e:	2800      	cmp	r0, #0
 8007650:	d121      	bne.n	8007696 <ManagementTask+0x156>
						storage.energy_stored_mah = 0;
 8007652:	4b61      	ldr	r3, [pc, #388]	; (80077d8 <ManagementTask+0x298>)
 8007654:	2200      	movs	r2, #0
 8007656:	621a      	str	r2, [r3, #32]
 8007658:	e007      	b.n	800766a <ManagementTask+0x12a>
					storage.led_level = load_setup(FULL_BATT_MAH, 0);
 800765a:	20c8      	movs	r0, #200	; 0xc8
 800765c:	2100      	movs	r1, #0
 800765e:	0180      	lsls	r0, r0, #6
 8007660:	f7ff ff36 	bl	80074d0 <load_setup>
 8007664:	4a5c      	ldr	r2, [pc, #368]	; (80077d8 <ManagementTask+0x298>)
 8007666:	2330      	movs	r3, #48	; 0x30
 8007668:	54d0      	strb	r0, [r2, r3]
				osMessagePut(ind_msg, IND_RED, osWaitForever);
 800766a:	2201      	movs	r2, #1
 800766c:	4b59      	ldr	r3, [pc, #356]	; (80077d4 <ManagementTask+0x294>)
 800766e:	6818      	ldr	r0, [r3, #0]
 8007670:	4252      	negs	r2, r2
 8007672:	2102      	movs	r1, #2
 8007674:	f7fd fefa 	bl	800546c <osMessagePut>
				modem_data.day_lenght_store = storage.daylength_s;
 8007678:	4b57      	ldr	r3, [pc, #348]	; (80077d8 <ManagementTask+0x298>)
 800767a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800767c:	4b5c      	ldr	r3, [pc, #368]	; (80077f0 <ManagementTask+0x2b0>)
 800767e:	66da      	str	r2, [r3, #108]	; 0x6c
 8007680:	e047      	b.n	8007712 <ManagementTask+0x1d2>
					storage.led_level = load_setup(FULL_BATT_MAH, HOURS_24 - storage.daylength_s);
 8007682:	495c      	ldr	r1, [pc, #368]	; (80077f4 <ManagementTask+0x2b4>)
 8007684:	1b09      	subs	r1, r1, r4
 8007686:	20c8      	movs	r0, #200	; 0xc8
 8007688:	0180      	lsls	r0, r0, #6
 800768a:	f7ff ff21 	bl	80074d0 <load_setup>
 800768e:	4a52      	ldr	r2, [pc, #328]	; (80077d8 <ManagementTask+0x298>)
 8007690:	2330      	movs	r3, #48	; 0x30
 8007692:	54d0      	strb	r0, [r2, r3]
 8007694:	e7e9      	b.n	800766a <ManagementTask+0x12a>
						storage.led_level = load_setup(storage.energy_stored_mah, HOURS_24 - storage.daylength_s);
 8007696:	4b57      	ldr	r3, [pc, #348]	; (80077f4 <ManagementTask+0x2b4>)
 8007698:	1b1c      	subs	r4, r3, r4
 800769a:	1c30      	adds	r0, r6, #0
 800769c:	f7f8 ff5e 	bl	800055c <__aeabi_f2uiz>
 80076a0:	0021      	movs	r1, r4
 80076a2:	f7ff ff15 	bl	80074d0 <load_setup>
 80076a6:	4a4c      	ldr	r2, [pc, #304]	; (80077d8 <ManagementTask+0x298>)
 80076a8:	2330      	movs	r3, #48	; 0x30
 80076aa:	54d0      	strb	r0, [r2, r3]
 80076ac:	e7dd      	b.n	800766a <ManagementTask+0x12a>
						discharge_lock = 1;
 80076ae:	4b47      	ldr	r3, [pc, #284]	; (80077cc <ManagementTask+0x28c>)
 80076b0:	2201      	movs	r2, #1
 80076b2:	701a      	strb	r2, [r3, #0]
				osMessagePut(led_msg, 0, osWaitForever);
 80076b4:	2401      	movs	r4, #1
 80076b6:	4264      	negs	r4, r4
 80076b8:	4b49      	ldr	r3, [pc, #292]	; (80077e0 <ManagementTask+0x2a0>)
 80076ba:	6818      	ldr	r0, [r3, #0]
 80076bc:	0022      	movs	r2, r4
 80076be:	2100      	movs	r1, #0
 80076c0:	f7fd fed4 	bl	800546c <osMessagePut>
				osMessagePut(ind_msg, IND_OFF, osWaitForever);
 80076c4:	4b43      	ldr	r3, [pc, #268]	; (80077d4 <ManagementTask+0x294>)
 80076c6:	6818      	ldr	r0, [r3, #0]
 80076c8:	0022      	movs	r2, r4
 80076ca:	2100      	movs	r1, #0
 80076cc:	f7fd fece 	bl	800546c <osMessagePut>
				eeprom_info.total_batt_ouput_ah = storage.total_batt_ouput_ah;
 80076d0:	4b41      	ldr	r3, [pc, #260]	; (80077d8 <ManagementTask+0x298>)
 80076d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d4:	4848      	ldr	r0, [pc, #288]	; (80077f8 <ManagementTask+0x2b8>)
 80076d6:	6003      	str	r3, [r0, #0]
				eeprom_save(&eeprom_info);
 80076d8:	f7ff fdd4 	bl	8007284 <eeprom_save>
				for(i = 0; i < 5; i++)
 80076dc:	2400      	movs	r4, #0
 80076de:	2c04      	cmp	r4, #4
 80076e0:	d83e      	bhi.n	8007760 <ManagementTask+0x220>
					sts = TelitCloudUpload();
 80076e2:	f000 fd63 	bl	80081ac <TelitCloudUpload>
					if(sts == UPLOAD_OK)
 80076e6:	2800      	cmp	r0, #0
 80076e8:	d03a      	beq.n	8007760 <ManagementTask+0x220>
					if(sts == MODEM_NO_OPERATOR_PRESENT)
 80076ea:	2806      	cmp	r0, #6
 80076ec:	d038      	beq.n	8007760 <ManagementTask+0x220>
				for(i = 0; i < 5; i++)
 80076ee:	3401      	adds	r4, #1
 80076f0:	b2e4      	uxtb	r4, r4
 80076f2:	e7f4      	b.n	80076de <ManagementTask+0x19e>
						if(storage.daylength_s > MIN_DAY_DUR)
 80076f4:	4b38      	ldr	r3, [pc, #224]	; (80077d8 <ManagementTask+0x298>)
 80076f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f8:	4b40      	ldr	r3, [pc, #256]	; (80077fc <ManagementTask+0x2bc>)
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d909      	bls.n	8007712 <ManagementTask+0x1d2>
							if(storage.energy_stored_mah - storage.energy_released_mah <= 0)
 80076fe:	4b36      	ldr	r3, [pc, #216]	; (80077d8 <ManagementTask+0x298>)
 8007700:	6a18      	ldr	r0, [r3, #32]
 8007702:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007704:	f7f9 fa82 	bl	8000c0c <__aeabi_fsub>
 8007708:	2100      	movs	r1, #0
 800770a:	f7f8 fee9 	bl	80004e0 <__aeabi_fcmple>
 800770e:	2800      	cmp	r0, #0
 8007710:	d122      	bne.n	8007758 <ManagementTask+0x218>
					osDelay(1000);
 8007712:	20fa      	movs	r0, #250	; 0xfa
 8007714:	0080      	lsls	r0, r0, #2
 8007716:	f7fd fe29 	bl	800536c <osDelay>
					if(storage.daytime_flag)
 800771a:	4a2f      	ldr	r2, [pc, #188]	; (80077d8 <ManagementTask+0x298>)
 800771c:	2331      	movs	r3, #49	; 0x31
 800771e:	5cd3      	ldrb	r3, [r2, r3]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1c7      	bne.n	80076b4 <ManagementTask+0x174>
					if(storage.vbatt_mv < BATT_LOW_MV)
 8007724:	6912      	ldr	r2, [r2, #16]
 8007726:	4b36      	ldr	r3, [pc, #216]	; (8007800 <ManagementTask+0x2c0>)
 8007728:	429a      	cmp	r2, r3
 800772a:	d9c0      	bls.n	80076ae <ManagementTask+0x16e>
					if(battery_charged)
 800772c:	4b28      	ldr	r3, [pc, #160]	; (80077d0 <ManagementTask+0x290>)
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d0df      	beq.n	80076f4 <ManagementTask+0x1b4>
						if(eeprom_info.batt_full_mah - storage.energy_released_mah <= 0)
 8007734:	4b30      	ldr	r3, [pc, #192]	; (80077f8 <ManagementTask+0x2b8>)
 8007736:	8958      	ldrh	r0, [r3, #10]
 8007738:	4b27      	ldr	r3, [pc, #156]	; (80077d8 <ManagementTask+0x298>)
 800773a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800773c:	f7f9 fc4a 	bl	8000fd4 <__aeabi_i2f>
 8007740:	1c21      	adds	r1, r4, #0
 8007742:	f7f9 fa63 	bl	8000c0c <__aeabi_fsub>
 8007746:	2100      	movs	r1, #0
 8007748:	f7f8 feca 	bl	80004e0 <__aeabi_fcmple>
 800774c:	2800      	cmp	r0, #0
 800774e:	d0e0      	beq.n	8007712 <ManagementTask+0x1d2>
							discharge_lock = 1;
 8007750:	4b1e      	ldr	r3, [pc, #120]	; (80077cc <ManagementTask+0x28c>)
 8007752:	2201      	movs	r2, #1
 8007754:	701a      	strb	r2, [r3, #0]
							break;
 8007756:	e7ad      	b.n	80076b4 <ManagementTask+0x174>
								discharge_lock = 1;
 8007758:	4b1c      	ldr	r3, [pc, #112]	; (80077cc <ManagementTask+0x28c>)
 800775a:	2201      	movs	r2, #1
 800775c:	701a      	strb	r2, [r3, #0]
								break;
 800775e:	e7a9      	b.n	80076b4 <ManagementTask+0x174>
				battery_charged = 0;
 8007760:	2300      	movs	r3, #0
 8007762:	4a1b      	ldr	r2, [pc, #108]	; (80077d0 <ManagementTask+0x290>)
 8007764:	7013      	strb	r3, [r2, #0]
				storage.daylength_s = 0;
 8007766:	4c1c      	ldr	r4, [pc, #112]	; (80077d8 <ManagementTask+0x298>)
 8007768:	62e3      	str	r3, [r4, #44]	; 0x2c
				storage.energy_stored_mah = storage.energy_stored_mah - storage.energy_released_mah;
 800776a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800776c:	6a20      	ldr	r0, [r4, #32]
 800776e:	f7f9 fa4d 	bl	8000c0c <__aeabi_fsub>
 8007772:	6220      	str	r0, [r4, #32]
				if(storage.energy_stored_mah < 0)
 8007774:	2100      	movs	r1, #0
 8007776:	f7f8 fea9 	bl	80004cc <__aeabi_fcmplt>
 800777a:	2800      	cmp	r0, #0
 800777c:	d103      	bne.n	8007786 <ManagementTask+0x246>
				storage.energy_released_mah = 0;
 800777e:	4b16      	ldr	r3, [pc, #88]	; (80077d8 <ManagementTask+0x298>)
 8007780:	2200      	movs	r2, #0
 8007782:	625a      	str	r2, [r3, #36]	; 0x24
 8007784:	e72d      	b.n	80075e2 <ManagementTask+0xa2>
				{storage.energy_stored_mah = 0;}
 8007786:	2200      	movs	r2, #0
 8007788:	6222      	str	r2, [r4, #32]
 800778a:	e7f8      	b.n	800777e <ManagementTask+0x23e>
			if(storage.coutput_ma > max_idle_current)
 800778c:	4b12      	ldr	r3, [pc, #72]	; (80077d8 <ManagementTask+0x298>)
 800778e:	69db      	ldr	r3, [r3, #28]
 8007790:	4a1c      	ldr	r2, [pc, #112]	; (8007804 <ManagementTask+0x2c4>)
 8007792:	6812      	ldr	r2, [r2, #0]
 8007794:	4293      	cmp	r3, r2
 8007796:	dd01      	ble.n	800779c <ManagementTask+0x25c>
				max_idle_current = storage.coutput_ma;
 8007798:	4a1a      	ldr	r2, [pc, #104]	; (8007804 <ManagementTask+0x2c4>)
 800779a:	6013      	str	r3, [r2, #0]
			if(max_idle_current > IDLE_CURR_MA)
 800779c:	4b19      	ldr	r3, [pc, #100]	; (8007804 <ManagementTask+0x2c4>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2b14      	cmp	r3, #20
 80077a2:	dd04      	ble.n	80077ae <ManagementTask+0x26e>
				max_idle_current = 0;
 80077a4:	2300      	movs	r3, #0
 80077a6:	4a17      	ldr	r2, [pc, #92]	; (8007804 <ManagementTask+0x2c4>)
 80077a8:	6013      	str	r3, [r2, #0]
				battery_charged = 0;
 80077aa:	4a09      	ldr	r2, [pc, #36]	; (80077d0 <ManagementTask+0x290>)
 80077ac:	7013      	strb	r3, [r2, #0]
			if(storage.energy_released_mah > IDLE_CURR_MAH)
 80077ae:	4b0a      	ldr	r3, [pc, #40]	; (80077d8 <ManagementTask+0x298>)
 80077b0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80077b2:	4915      	ldr	r1, [pc, #84]	; (8007808 <ManagementTask+0x2c8>)
 80077b4:	f7f8 fe9e 	bl	80004f4 <__aeabi_fcmpgt>
 80077b8:	2800      	cmp	r0, #0
 80077ba:	d100      	bne.n	80077be <ManagementTask+0x27e>
 80077bc:	e716      	b.n	80075ec <ManagementTask+0xac>
				battery_charged = 0;
 80077be:	4b04      	ldr	r3, [pc, #16]	; (80077d0 <ManagementTask+0x290>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	701a      	strb	r2, [r3, #0]
 80077c4:	e712      	b.n	80075ec <ManagementTask+0xac>
 80077c6:	46c0      	nop			; (mov r8, r8)
 80077c8:	00001388 	.word	0x00001388
 80077cc:	20002469 	.word	0x20002469
 80077d0:	20002468 	.word	0x20002468
 80077d4:	20003f3c 	.word	0x20003f3c
 80077d8:	20004690 	.word	0x20004690
 80077dc:	46480000 	.word	0x46480000
 80077e0:	20003f44 	.word	0x20003f44
 80077e4:	0000445c 	.word	0x0000445c
 80077e8:	0000445b 	.word	0x0000445b
 80077ec:	0000464f 	.word	0x0000464f
 80077f0:	200045f4 	.word	0x200045f4
 80077f4:	00015180 	.word	0x00015180
 80077f8:	20003f4c 	.word	0x20003f4c
 80077fc:	00004650 	.word	0x00004650
 8007800:	00002327 	.word	0x00002327
 8007804:	2000246c 	.word	0x2000246c
 8007808:	43480000 	.word	0x43480000

0800780c <LTE_Disconnect>:
    } 
    return false;
}

static _Bool LTE_Disconnect(void)
{
 800780c:	b510      	push	{r4, lr}
  char *result = NULL;
  result = SCP_SendCommandWaitAnswer("AT+CGACT=1,0\r\n", "OK", 1000, 1);
 800780e:	22fa      	movs	r2, #250	; 0xfa
 8007810:	2301      	movs	r3, #1
 8007812:	0092      	lsls	r2, r2, #2
 8007814:	4904      	ldr	r1, [pc, #16]	; (8007828 <LTE_Disconnect+0x1c>)
 8007816:	4805      	ldr	r0, [pc, #20]	; (800782c <LTE_Disconnect+0x20>)
 8007818:	f7ff f980 	bl	8006b1c <SCP_SendCommandWaitAnswer>
  if(result)
 800781c:	2800      	cmp	r0, #0
 800781e:	d001      	beq.n	8007824 <LTE_Disconnect+0x18>
  {
    return true;
 8007820:	2001      	movs	r0, #1
  }
  else return false;
}
 8007822:	bd10      	pop	{r4, pc}
  else return false;
 8007824:	2000      	movs	r0, #0
 8007826:	e7fc      	b.n	8007822 <LTE_Disconnect+0x16>
 8007828:	0800c514 	.word	0x0800c514
 800782c:	0800c518 	.word	0x0800c518

08007830 <GetIMEI>:
    return NULL;
}

/*Returns pointer to IMEI string of 15 numbers*/
static char* GetIMEI(void)
{
 8007830:	b510      	push	{r4, lr}
    static char imei[16];
    _Bool isDigit = false;
    uint32_t j = 0, i=0;

    /*Request IMEI*/
    result = SCP_SendCommandWaitAnswer("AT+CGSN=1\r\n", "OK", 100, 1);
 8007832:	2301      	movs	r3, #1
 8007834:	2264      	movs	r2, #100	; 0x64
 8007836:	491a      	ldr	r1, [pc, #104]	; (80078a0 <GetIMEI+0x70>)
 8007838:	481a      	ldr	r0, [pc, #104]	; (80078a4 <GetIMEI+0x74>)
 800783a:	f7ff f96f 	bl	8006b1c <SCP_SendCommandWaitAnswer>
 800783e:	1e04      	subs	r4, r0, #0

    /*We have response, lets look for the info in the receiver buffer*/
    if(result)
 8007840:	d02c      	beq.n	800789c <GetIMEI+0x6c>
    uint32_t j = 0, i=0;
 8007842:	2400      	movs	r4, #0
    {
        result = NULL;

        /*Lets look for a ASCII number...*/
        while((j < strlen((char*)SCPHandler.RxBuffer)) && (!isDigit))
 8007844:	4818      	ldr	r0, [pc, #96]	; (80078a8 <GetIMEI+0x78>)
 8007846:	f7f8 fc5f 	bl	8000108 <strlen>
 800784a:	42a0      	cmp	r0, r4
 800784c:	d90d      	bls.n	800786a <GetIMEI+0x3a>
        {
          if((SCPHandler.RxBuffer[j] > 47) && (SCPHandler.RxBuffer[j] < 58))
 800784e:	4b17      	ldr	r3, [pc, #92]	; (80078ac <GetIMEI+0x7c>)
 8007850:	191b      	adds	r3, r3, r4
 8007852:	7b1b      	ldrb	r3, [r3, #12]
 8007854:	3b30      	subs	r3, #48	; 0x30
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2b09      	cmp	r3, #9
 800785a:	d901      	bls.n	8007860 <GetIMEI+0x30>
              isDigit = true;
              result = (char*)&SCPHandler.RxBuffer[j];
              break;
          }

          j++;
 800785c:	3401      	adds	r4, #1
 800785e:	e7f1      	b.n	8007844 <GetIMEI+0x14>
              result = (char*)&SCPHandler.RxBuffer[j];
 8007860:	3408      	adds	r4, #8
 8007862:	4b12      	ldr	r3, [pc, #72]	; (80078ac <GetIMEI+0x7c>)
 8007864:	18e4      	adds	r4, r4, r3
 8007866:	3404      	adds	r4, #4
              break;
 8007868:	e000      	b.n	800786c <GetIMEI+0x3c>
        result = NULL;
 800786a:	2400      	movs	r4, #0
        }

        /*First number of IMEI found, copy the number to the RAM and return */
        if(result)
 800786c:	2c00      	cmp	r4, #0
 800786e:	d015      	beq.n	800789c <GetIMEI+0x6c>
        {
            memset(imei, 0x00, 16);
 8007870:	2210      	movs	r2, #16
 8007872:	2100      	movs	r1, #0
 8007874:	480e      	ldr	r0, [pc, #56]	; (80078b0 <GetIMEI+0x80>)
 8007876:	f001 fa04 	bl	8008c82 <memset>

            /*Maximum 15 chars for IMEI is allowed*/
            for(i = 0; i < 15; i++)
 800787a:	2200      	movs	r2, #0
 800787c:	2a0e      	cmp	r2, #14
 800787e:	d80a      	bhi.n	8007896 <GetIMEI+0x66>
            {
                /*Not a number in IMEI shall be treated as error*/
                if(!(*result > 47 && *result < 58))
 8007880:	7821      	ldrb	r1, [r4, #0]
 8007882:	000b      	movs	r3, r1
 8007884:	3b30      	subs	r3, #48	; 0x30
 8007886:	b2db      	uxtb	r3, r3
 8007888:	2b09      	cmp	r3, #9
 800788a:	d806      	bhi.n	800789a <GetIMEI+0x6a>
                {
                    return NULL;
                }

                imei[i] = *result;
 800788c:	4b08      	ldr	r3, [pc, #32]	; (80078b0 <GetIMEI+0x80>)
 800788e:	5499      	strb	r1, [r3, r2]

                result++;
 8007890:	3401      	adds	r4, #1
            for(i = 0; i < 15; i++)
 8007892:	3201      	adds	r2, #1
 8007894:	e7f2      	b.n	800787c <GetIMEI+0x4c>
            }

            return imei;
 8007896:	4c06      	ldr	r4, [pc, #24]	; (80078b0 <GetIMEI+0x80>)
 8007898:	e000      	b.n	800789c <GetIMEI+0x6c>
                    return NULL;
 800789a:	2400      	movs	r4, #0
        }
    }

    return NULL;
}
 800789c:	0020      	movs	r0, r4
 800789e:	bd10      	pop	{r4, pc}
 80078a0:	0800c514 	.word	0x0800c514
 80078a4:	0800c484 	.word	0x0800c484
 80078a8:	2000392c 	.word	0x2000392c
 80078ac:	20003920 	.word	0x20003920
 80078b0:	2000348c 	.word	0x2000348c

080078b4 <GetID>:

/*Request model identification*/
static char* GetID(void)
{
 80078b4:	b510      	push	{r4, lr}
    char *result = NULL;
    static char device_id[21];

    /*Request model identification*/
    result = SCP_SendCommandWaitAnswer("AT+CGMM\r\n", "OK", 100, 1);
 80078b6:	2301      	movs	r3, #1
 80078b8:	2264      	movs	r2, #100	; 0x64
 80078ba:	4911      	ldr	r1, [pc, #68]	; (8007900 <GetID+0x4c>)
 80078bc:	4811      	ldr	r0, [pc, #68]	; (8007904 <GetID+0x50>)
 80078be:	f7ff f92d 	bl	8006b1c <SCP_SendCommandWaitAnswer>

    /*We have response, lets look for the info in the receiver buffer*/
    if(result)
 80078c2:	2800      	cmp	r0, #0
 80078c4:	d01b      	beq.n	80078fe <GetID+0x4a>
    {
        result = NULL;
        /*Lets look for a (\n) char as the begining of device name*/
        result = strchr((char*)SCPHandler.RxBuffer, '\n');
 80078c6:	210a      	movs	r1, #10
 80078c8:	480f      	ldr	r0, [pc, #60]	; (8007908 <GetID+0x54>)
 80078ca:	f001 fa11 	bl	8008cf0 <strchr>

        if(result)
 80078ce:	2800      	cmp	r0, #0
 80078d0:	d015      	beq.n	80078fe <GetID+0x4a>
        {
            result++;
 80078d2:	1c44      	adds	r4, r0, #1

            /*Copy operator to the RAM and return*/
            memset(device_id, 0x00, 21);
 80078d4:	2215      	movs	r2, #21
 80078d6:	2100      	movs	r1, #0
 80078d8:	480c      	ldr	r0, [pc, #48]	; (800790c <GetID+0x58>)
 80078da:	f001 f9d2 	bl	8008c82 <memset>

            /*Maximum 20 chars for model identification allowed*/
            for(uint8_t i = 0; i < 20; i++)
 80078de:	2300      	movs	r3, #0
 80078e0:	2b13      	cmp	r3, #19
 80078e2:	d809      	bhi.n	80078f8 <GetID+0x44>
            {
                device_id[i] = *result;
 80078e4:	7821      	ldrb	r1, [r4, #0]
 80078e6:	4a09      	ldr	r2, [pc, #36]	; (800790c <GetID+0x58>)
 80078e8:	54d1      	strb	r1, [r2, r3]
                result++;
 80078ea:	3401      	adds	r4, #1

                /*Device_id end*/
                if(*result == '\r')
 80078ec:	7822      	ldrb	r2, [r4, #0]
 80078ee:	2a0d      	cmp	r2, #13
 80078f0:	d004      	beq.n	80078fc <GetID+0x48>
            for(uint8_t i = 0; i < 20; i++)
 80078f2:	3301      	adds	r3, #1
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	e7f3      	b.n	80078e0 <GetID+0x2c>
            }
        }

    }

    return NULL;
 80078f8:	2000      	movs	r0, #0
 80078fa:	e000      	b.n	80078fe <GetID+0x4a>
                    return device_id;
 80078fc:	4803      	ldr	r0, [pc, #12]	; (800790c <GetID+0x58>)
}
 80078fe:	bd10      	pop	{r4, pc}
 8007900:	0800c514 	.word	0x0800c514
 8007904:	0800c478 	.word	0x0800c478
 8007908:	2000392c 	.word	0x2000392c
 800790c:	20003474 	.word	0x20003474

08007910 <GetVersion>:

/*Returns pointer to firmware version*/
static char* GetVersion(void)
{
 8007910:	b510      	push	{r4, lr}
    char *result = NULL;
    static char version[16];
    uint32_t i=0;

    /*Request IMEI*/
    result = SCP_SendCommandWaitAnswer("AT+CGMR\r\n", "OK", 100, 1);
 8007912:	2301      	movs	r3, #1
 8007914:	2264      	movs	r2, #100	; 0x64
 8007916:	4911      	ldr	r1, [pc, #68]	; (800795c <GetVersion+0x4c>)
 8007918:	4811      	ldr	r0, [pc, #68]	; (8007960 <GetVersion+0x50>)
 800791a:	f7ff f8ff 	bl	8006b1c <SCP_SendCommandWaitAnswer>

    /*We have response, lets look for the info in the receiver buffer*/
    if(result)
 800791e:	2800      	cmp	r0, #0
 8007920:	d01a      	beq.n	8007958 <GetVersion+0x48>
    {
        result = NULL;

        /*Lets look for a (\n) char as the begining of firmware version string*/
        result = strchr((char*)SCPHandler.RxBuffer, '\n');
 8007922:	210a      	movs	r1, #10
 8007924:	480f      	ldr	r0, [pc, #60]	; (8007964 <GetVersion+0x54>)
 8007926:	f001 f9e3 	bl	8008cf0 <strchr>

        /*Copy string to RAM */
        if(result)
 800792a:	2800      	cmp	r0, #0
 800792c:	d014      	beq.n	8007958 <GetVersion+0x48>
        {
            result++;
 800792e:	1c44      	adds	r4, r0, #1
            memset(version, 0x00, 16);
 8007930:	2210      	movs	r2, #16
 8007932:	2100      	movs	r1, #0
 8007934:	480c      	ldr	r0, [pc, #48]	; (8007968 <GetVersion+0x58>)
 8007936:	f001 f9a4 	bl	8008c82 <memset>

            /*Maximum 15 chars limit*/
            for(i = 0; i < 15; i++)
 800793a:	2300      	movs	r3, #0
 800793c:	2b0e      	cmp	r3, #14
 800793e:	d808      	bhi.n	8007952 <GetVersion+0x42>
            {

                version[i] = *result;
 8007940:	7821      	ldrb	r1, [r4, #0]
 8007942:	4a09      	ldr	r2, [pc, #36]	; (8007968 <GetVersion+0x58>)
 8007944:	54d1      	strb	r1, [r2, r3]
                result++;
 8007946:	3401      	adds	r4, #1

                if(*result == '\r')
 8007948:	7822      	ldrb	r2, [r4, #0]
 800794a:	2a0d      	cmp	r2, #13
 800794c:	d003      	beq.n	8007956 <GetVersion+0x46>
            for(i = 0; i < 15; i++)
 800794e:	3301      	adds	r3, #1
 8007950:	e7f4      	b.n	800793c <GetVersion+0x2c>
                {
                    break;
                }
            }

            return version;
 8007952:	4805      	ldr	r0, [pc, #20]	; (8007968 <GetVersion+0x58>)
 8007954:	e000      	b.n	8007958 <GetVersion+0x48>
 8007956:	4804      	ldr	r0, [pc, #16]	; (8007968 <GetVersion+0x58>)
        }
    }

    return NULL;
}
 8007958:	bd10      	pop	{r4, pc}
 800795a:	46c0      	nop			; (mov r8, r8)
 800795c:	0800c514 	.word	0x0800c514
 8007960:	0800c4a4 	.word	0x0800c4a4
 8007964:	2000392c 	.word	0x2000392c
 8007968:	200038b0 	.word	0x200038b0

0800796c <ModemCloseTcpSocket>:
  return false;
}

/* Close socket */
static _Bool ModemCloseTcpSocket(int socket_id)
{
 800796c:	b500      	push	{lr}
 800796e:	b085      	sub	sp, #20
 8007970:	0002      	movs	r2, r0
    char *result = NULL;
    char buff[15];
    
    /* Close selected socket */
    sprintf(buff, "AT+ESOCL=%d\r\n", socket_id);
 8007972:	4909      	ldr	r1, [pc, #36]	; (8007998 <ModemCloseTcpSocket+0x2c>)
 8007974:	4668      	mov	r0, sp
 8007976:	f001 f98d 	bl	8008c94 <sprintf>
    result = SCP_SendCommandWaitAnswer(buff, "OK", 1000, 1);
 800797a:	22fa      	movs	r2, #250	; 0xfa
 800797c:	2301      	movs	r3, #1
 800797e:	0092      	lsls	r2, r2, #2
 8007980:	4906      	ldr	r1, [pc, #24]	; (800799c <ModemCloseTcpSocket+0x30>)
 8007982:	4668      	mov	r0, sp
 8007984:	f7ff f8ca 	bl	8006b1c <SCP_SendCommandWaitAnswer>
    if(result)
 8007988:	2800      	cmp	r0, #0
 800798a:	d002      	beq.n	8007992 <ModemCloseTcpSocket+0x26>
    {
        return true;
 800798c:	2001      	movs	r0, #1
    }

    return false;
}
 800798e:	b005      	add	sp, #20
 8007990:	bd00      	pop	{pc}
    return false;
 8007992:	2000      	movs	r0, #0
 8007994:	e7fb      	b.n	800798e <ModemCloseTcpSocket+0x22>
 8007996:	46c0      	nop			; (mov r8, r8)
 8007998:	0800c540 	.word	0x0800c540
 800799c:	0800c514 	.word	0x0800c514

080079a0 <SocketSend>:

/*NE310H2 Socket send procedure*/
static char* SocketSend(int socket_id, char *string, unsigned int length)
{
 80079a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079a2:	b085      	sub	sp, #20
 80079a4:	0006      	movs	r6, r0
 80079a6:	000d      	movs	r5, r1
 80079a8:	0017      	movs	r7, r2
    char symbol[3];
    static char buffer[2048];
    static char cmd_buffer[2048];

    /*Limitation*/
    if(length > 512)
 80079aa:	2380      	movs	r3, #128	; 0x80
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d830      	bhi.n	8007a14 <SocketSend+0x74>
    {
        return NULL;
    }

    /*Clean buffers to be used*/
    memset(symbol, 0, sizeof(symbol));
 80079b2:	2203      	movs	r2, #3
 80079b4:	2100      	movs	r1, #0
 80079b6:	a803      	add	r0, sp, #12
 80079b8:	f001 f963 	bl	8008c82 <memset>
    memset(buffer, 0, sizeof(buffer));
 80079bc:	2480      	movs	r4, #128	; 0x80
 80079be:	0124      	lsls	r4, r4, #4
 80079c0:	0022      	movs	r2, r4
 80079c2:	2100      	movs	r1, #0
 80079c4:	4814      	ldr	r0, [pc, #80]	; (8007a18 <SocketSend+0x78>)
 80079c6:	f001 f95c 	bl	8008c82 <memset>
    memset(cmd_buffer, 0, sizeof(cmd_buffer));
 80079ca:	0022      	movs	r2, r4
 80079cc:	2100      	movs	r1, #0
 80079ce:	4813      	ldr	r0, [pc, #76]	; (8007a1c <SocketSend+0x7c>)
 80079d0:	f001 f957 	bl	8008c82 <memset>

    /*Convert data to Hex format string*/
    for(i = 0; i < length; i++)
 80079d4:	2400      	movs	r4, #0
 80079d6:	e00a      	b.n	80079ee <SocketSend+0x4e>
    {
        sprintf(symbol, "%02X", *string);
 80079d8:	782a      	ldrb	r2, [r5, #0]
 80079da:	4911      	ldr	r1, [pc, #68]	; (8007a20 <SocketSend+0x80>)
 80079dc:	a803      	add	r0, sp, #12
 80079de:	f001 f959 	bl	8008c94 <sprintf>
        strcat(buffer,symbol);
 80079e2:	a903      	add	r1, sp, #12
 80079e4:	480c      	ldr	r0, [pc, #48]	; (8007a18 <SocketSend+0x78>)
 80079e6:	f001 f975 	bl	8008cd4 <strcat>
        string++;
 80079ea:	3501      	adds	r5, #1
    for(i = 0; i < length; i++)
 80079ec:	3401      	adds	r4, #1
 80079ee:	42bc      	cmp	r4, r7
 80079f0:	d3f2      	bcc.n	80079d8 <SocketSend+0x38>
    }

    /*Create command to be sent*/
    sprintf(cmd_buffer, "AT+ESOSEND=%d,%d,%s\r\n", socket_id, length, buffer);
 80079f2:	4c0a      	ldr	r4, [pc, #40]	; (8007a1c <SocketSend+0x7c>)
 80079f4:	4b08      	ldr	r3, [pc, #32]	; (8007a18 <SocketSend+0x78>)
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	003b      	movs	r3, r7
 80079fa:	0032      	movs	r2, r6
 80079fc:	4909      	ldr	r1, [pc, #36]	; (8007a24 <SocketSend+0x84>)
 80079fe:	0020      	movs	r0, r4
 8007a00:	f001 f948 	bl	8008c94 <sprintf>

    /*attempt to send*/
    result = SCP_SendCommandWaitAnswer(cmd_buffer, "OK", 60000, 1);
 8007a04:	2301      	movs	r3, #1
 8007a06:	4a08      	ldr	r2, [pc, #32]	; (8007a28 <SocketSend+0x88>)
 8007a08:	4908      	ldr	r1, [pc, #32]	; (8007a2c <SocketSend+0x8c>)
 8007a0a:	0020      	movs	r0, r4
 8007a0c:	f7ff f886 	bl	8006b1c <SCP_SendCommandWaitAnswer>

    return result;

}
 8007a10:	b005      	add	sp, #20
 8007a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return NULL;
 8007a14:	2000      	movs	r0, #0
 8007a16:	e7fb      	b.n	8007a10 <SocketSend+0x70>
 8007a18:	20002474 	.word	0x20002474
 8007a1c:	20002c74 	.word	0x20002c74
 8007a20:	0800c5b8 	.word	0x0800c5b8
 8007a24:	0800c5c0 	.word	0x0800c5c0
 8007a28:	0000ea60 	.word	0x0000ea60
 8007a2c:	0800c514 	.word	0x0800c514

08007a30 <SocketReceive>:

/*NE310H2 Socket receive procedure*/
static char* SocketReceive(int socket_id, int *data_lenght)
{
 8007a30:	b570      	push	{r4, r5, r6, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	0006      	movs	r6, r0
 8007a36:	000d      	movs	r5, r1
  char *result = NULL;
  unsigned int i;
  long number;
  char symbol[3];
  
  memset(post_buff, 0, sizeof(post_buff));
 8007a38:	2280      	movs	r2, #128	; 0x80
 8007a3a:	00d2      	lsls	r2, r2, #3
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	4825      	ldr	r0, [pc, #148]	; (8007ad4 <SocketReceive+0xa4>)
 8007a40:	f001 f91f 	bl	8008c82 <memset>
  memset(symbol, 0, sizeof(symbol));
 8007a44:	2203      	movs	r2, #3
 8007a46:	2100      	movs	r1, #0
 8007a48:	a801      	add	r0, sp, #4
 8007a4a:	f001 f91a 	bl	8008c82 <memset>
  *data_lenght = 0;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	602b      	str	r3, [r5, #0]
  
  /*Wait for Socket message arrived indicator*/
  result = SCP_WaitForAnswer("+ESONMI=", 60000);
 8007a52:	4921      	ldr	r1, [pc, #132]	; (8007ad8 <SocketReceive+0xa8>)
 8007a54:	4821      	ldr	r0, [pc, #132]	; (8007adc <SocketReceive+0xac>)
 8007a56:	f7ff f8cb 	bl	8006bf0 <SCP_WaitForAnswer>
 8007a5a:	0004      	movs	r4, r0
  osDelay(1000);
 8007a5c:	20fa      	movs	r0, #250	; 0xfa
 8007a5e:	0080      	lsls	r0, r0, #2
 8007a60:	f7fd fc84 	bl	800536c <osDelay>
  if(result)
 8007a64:	2c00      	cmp	r4, #0
 8007a66:	d02d      	beq.n	8007ac4 <SocketReceive+0x94>
  {
    result += 8;
 8007a68:	3408      	adds	r4, #8
    if(atoi(result) == socket_id)
 8007a6a:	0020      	movs	r0, r4
 8007a6c:	f001 f8b5 	bl	8008bda <atoi>
 8007a70:	42b0      	cmp	r0, r6
 8007a72:	d12a      	bne.n	8007aca <SocketReceive+0x9a>
    {
      result = strchr(result, ',');
 8007a74:	212c      	movs	r1, #44	; 0x2c
 8007a76:	0020      	movs	r0, r4
 8007a78:	f001 f93a 	bl	8008cf0 <strchr>
 8007a7c:	1e04      	subs	r4, r0, #0
      if(result)
 8007a7e:	d021      	beq.n	8007ac4 <SocketReceive+0x94>
      {
        result++;
 8007a80:	3401      	adds	r4, #1
        *data_lenght = atoi(result);
 8007a82:	0020      	movs	r0, r4
 8007a84:	f001 f8a9 	bl	8008bda <atoi>
 8007a88:	6028      	str	r0, [r5, #0]
        
        result = strchr(result, ',');
 8007a8a:	212c      	movs	r1, #44	; 0x2c
 8007a8c:	0020      	movs	r0, r4
 8007a8e:	f001 f92f 	bl	8008cf0 <strchr>
 8007a92:	1e04      	subs	r4, r0, #0
        if(result)
 8007a94:	d016      	beq.n	8007ac4 <SocketReceive+0x94>
        {
          result++;
 8007a96:	3401      	adds	r4, #1
          
          i = 0;
 8007a98:	2500      	movs	r5, #0
          while(*result != '\0')
 8007a9a:	7823      	ldrb	r3, [r4, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d010      	beq.n	8007ac2 <SocketReceive+0x92>
          {
            symbol[0] = *result;
 8007aa0:	a801      	add	r0, sp, #4
 8007aa2:	7003      	strb	r3, [r0, #0]
            result++;
            symbol[1] = *result;
 8007aa4:	7863      	ldrb	r3, [r4, #1]
 8007aa6:	7043      	strb	r3, [r0, #1]
            result++;
 8007aa8:	3402      	adds	r4, #2
            
            number = strtol(symbol, (char **)NULL,16);
 8007aaa:	2210      	movs	r2, #16
 8007aac:	2100      	movs	r1, #0
 8007aae:	f001 f9d1 	bl	8008e54 <strtol>
            post_buff[i] = (char)number;
 8007ab2:	4b08      	ldr	r3, [pc, #32]	; (8007ad4 <SocketReceive+0xa4>)
 8007ab4:	5558      	strb	r0, [r3, r5]
            
            if(i > CMD_BUFF_LENGTH)
 8007ab6:	2380      	movs	r3, #128	; 0x80
 8007ab8:	00db      	lsls	r3, r3, #3
 8007aba:	429d      	cmp	r5, r3
 8007abc:	d807      	bhi.n	8007ace <SocketReceive+0x9e>
            {
              return NULL;
            }
            i++;
 8007abe:	3501      	adds	r5, #1
 8007ac0:	e7eb      	b.n	8007a9a <SocketReceive+0x6a>
          }
          return post_buff;
 8007ac2:	4c04      	ldr	r4, [pc, #16]	; (8007ad4 <SocketReceive+0xa4>)
      
    }
    else return NULL;
  }
  return NULL;
}
 8007ac4:	0020      	movs	r0, r4
 8007ac6:	b002      	add	sp, #8
 8007ac8:	bd70      	pop	{r4, r5, r6, pc}
    else return NULL;
 8007aca:	2400      	movs	r4, #0
 8007acc:	e7fa      	b.n	8007ac4 <SocketReceive+0x94>
              return NULL;
 8007ace:	2400      	movs	r4, #0
 8007ad0:	e7f8      	b.n	8007ac4 <SocketReceive+0x94>
 8007ad2:	46c0      	nop			; (mov r8, r8)
 8007ad4:	200041f4 	.word	0x200041f4
 8007ad8:	0000ea60 	.word	0x0000ea60
 8007adc:	0800c5ac 	.word	0x0800c5ac

08007ae0 <TelitPortalAuthenticate>:

/* Authentication */
static _Bool TelitPortalAuthenticate(void)
{
 8007ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ae2:	b085      	sub	sp, #20
  char *result = NULL;
  int i = 0;
  int data_length = 0;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	9303      	str	r3, [sp, #12]
  
  memset(post_buff, 0, sizeof(post_buff));
 8007ae8:	4c33      	ldr	r4, [pc, #204]	; (8007bb8 <TelitPortalAuthenticate+0xd8>)
 8007aea:	2580      	movs	r5, #128	; 0x80
 8007aec:	00ed      	lsls	r5, r5, #3
 8007aee:	002a      	movs	r2, r5
 8007af0:	2100      	movs	r1, #0
 8007af2:	0020      	movs	r0, r4
 8007af4:	f001 f8c5 	bl	8008c82 <memset>
  memset(local_buff, 0, sizeof(local_buff));
 8007af8:	4e30      	ldr	r6, [pc, #192]	; (8007bbc <TelitPortalAuthenticate+0xdc>)
 8007afa:	002a      	movs	r2, r5
 8007afc:	2100      	movs	r1, #0
 8007afe:	0030      	movs	r0, r6
 8007b00:	f001 f8bf 	bl	8008c82 <memset>
  memset(telit_sessionId, 0, sizeof(telit_sessionId));
 8007b04:	2219      	movs	r2, #25
 8007b06:	2100      	movs	r1, #0
 8007b08:	482d      	ldr	r0, [pc, #180]	; (8007bc0 <TelitPortalAuthenticate+0xe0>)
 8007b0a:	f001 f8ba 	bl	8008c82 <memset>
  
  /*Reset rx buffer for data reception*/
  SCP_InitRx();
 8007b0e:	f7ff f847 	bl	8006ba0 <SCP_InitRx>
  
  /* Form data for lenght calculation*/
  sprintf(local_buff, fcmd_dW_auth, telit_appToken, telit_appID, modem_data.imei);
 8007b12:	4d2c      	ldr	r5, [pc, #176]	; (8007bc4 <TelitPortalAuthenticate+0xe4>)
 8007b14:	9500      	str	r5, [sp, #0]
 8007b16:	4b2c      	ldr	r3, [pc, #176]	; (8007bc8 <TelitPortalAuthenticate+0xe8>)
 8007b18:	4a2c      	ldr	r2, [pc, #176]	; (8007bcc <TelitPortalAuthenticate+0xec>)
 8007b1a:	492d      	ldr	r1, [pc, #180]	; (8007bd0 <TelitPortalAuthenticate+0xf0>)
 8007b1c:	0030      	movs	r0, r6
 8007b1e:	f001 f8b9 	bl	8008c94 <sprintf>
  
  /* Get data length */
  sprintf(post_length, "%d\r\n\r\n", strlen(local_buff));
 8007b22:	0030      	movs	r0, r6
 8007b24:	f7f8 faf0 	bl	8000108 <strlen>
 8007b28:	0002      	movs	r2, r0
 8007b2a:	4f2a      	ldr	r7, [pc, #168]	; (8007bd4 <TelitPortalAuthenticate+0xf4>)
 8007b2c:	492a      	ldr	r1, [pc, #168]	; (8007bd8 <TelitPortalAuthenticate+0xf8>)
 8007b2e:	0038      	movs	r0, r7
 8007b30:	f001 f8b0 	bl	8008c94 <sprintf>
  
  /*Generate full HTTP post*/
  sprintf(post_buff, (char *)fcmd_HTTPPOST, strlen(fcmd_HTTPPOST));
 8007b34:	2260      	movs	r2, #96	; 0x60
 8007b36:	4929      	ldr	r1, [pc, #164]	; (8007bdc <TelitPortalAuthenticate+0xfc>)
 8007b38:	0020      	movs	r0, r4
 8007b3a:	f001 f8ab 	bl	8008c94 <sprintf>
  strcat(post_buff,post_length);
 8007b3e:	0039      	movs	r1, r7
 8007b40:	0020      	movs	r0, r4
 8007b42:	f001 f8c7 	bl	8008cd4 <strcat>
  strcat(post_buff,local_buff);
 8007b46:	0031      	movs	r1, r6
 8007b48:	0020      	movs	r0, r4
 8007b4a:	f001 f8c3 	bl	8008cd4 <strcat>
  
  /* Send HTTP POST data */
  result = SocketSend(modem_data.socket_id, post_buff, strlen(post_buff));
 8007b4e:	3d25      	subs	r5, #37	; 0x25
 8007b50:	68ed      	ldr	r5, [r5, #12]
 8007b52:	0020      	movs	r0, r4
 8007b54:	f7f8 fad8 	bl	8000108 <strlen>
 8007b58:	0002      	movs	r2, r0
 8007b5a:	0021      	movs	r1, r4
 8007b5c:	0028      	movs	r0, r5
 8007b5e:	f7ff ff1f 	bl	80079a0 <SocketSend>
  
  /*Receive data and extract the Session ID*/
  if(result)
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d021      	beq.n	8007baa <TelitPortalAuthenticate+0xca>
  {
    result = NULL;
    result = SocketReceive(modem_data.socket_id, &data_length);
 8007b66:	4b1e      	ldr	r3, [pc, #120]	; (8007be0 <TelitPortalAuthenticate+0x100>)
 8007b68:	68d8      	ldr	r0, [r3, #12]
 8007b6a:	a903      	add	r1, sp, #12
 8007b6c:	f7ff ff60 	bl	8007a30 <SocketReceive>
    if(result)
 8007b70:	2800      	cmp	r0, #0
 8007b72:	d01d      	beq.n	8007bb0 <TelitPortalAuthenticate+0xd0>
    {
      result = strstr(result, "sessionId\":\"");
 8007b74:	491b      	ldr	r1, [pc, #108]	; (8007be4 <TelitPortalAuthenticate+0x104>)
 8007b76:	f001 f8d1 	bl	8008d1c <strstr>
      if(result)
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	d01a      	beq.n	8007bb4 <TelitPortalAuthenticate+0xd4>
      {
        result += strlen("sessionId\":\"");
 8007b7e:	300c      	adds	r0, #12
        
        i=0;
 8007b80:	2300      	movs	r3, #0
        while ((*result != '\"')&& (i < SESSIONID_LENGTH))
 8007b82:	e003      	b.n	8007b8c <TelitPortalAuthenticate+0xac>
        {
          telit_sessionId[i++]=*(result++);
 8007b84:	3001      	adds	r0, #1
 8007b86:	490e      	ldr	r1, [pc, #56]	; (8007bc0 <TelitPortalAuthenticate+0xe0>)
 8007b88:	54ca      	strb	r2, [r1, r3]
 8007b8a:	3301      	adds	r3, #1
        while ((*result != '\"')&& (i < SESSIONID_LENGTH))
 8007b8c:	7802      	ldrb	r2, [r0, #0]
 8007b8e:	2a22      	cmp	r2, #34	; 0x22
 8007b90:	d001      	beq.n	8007b96 <TelitPortalAuthenticate+0xb6>
 8007b92:	2b17      	cmp	r3, #23
 8007b94:	ddf6      	ble.n	8007b84 <TelitPortalAuthenticate+0xa4>
          
        }
        if (i <= SESSIONID_LENGTH)
 8007b96:	2b18      	cmp	r3, #24
 8007b98:	dd01      	ble.n	8007b9e <TelitPortalAuthenticate+0xbe>
          return true;
        }
      }
    }
  }
  return false;
 8007b9a:	2000      	movs	r0, #0
 8007b9c:	e006      	b.n	8007bac <TelitPortalAuthenticate+0xcc>
          ModemCloseTcpSocket(modem_data.socket_id);
 8007b9e:	4b10      	ldr	r3, [pc, #64]	; (8007be0 <TelitPortalAuthenticate+0x100>)
 8007ba0:	68d8      	ldr	r0, [r3, #12]
 8007ba2:	f7ff fee3 	bl	800796c <ModemCloseTcpSocket>
          return true;
 8007ba6:	2001      	movs	r0, #1
 8007ba8:	e000      	b.n	8007bac <TelitPortalAuthenticate+0xcc>
  return false;
 8007baa:	2000      	movs	r0, #0
}
 8007bac:	b005      	add	sp, #20
 8007bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return false;
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	e7fb      	b.n	8007bac <TelitPortalAuthenticate+0xcc>
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	e7f9      	b.n	8007bac <TelitPortalAuthenticate+0xcc>
 8007bb8:	200041f4 	.word	0x200041f4
 8007bbc:	2000349c 	.word	0x2000349c
 8007bc0:	20004674 	.word	0x20004674
 8007bc4:	20004619 	.word	0x20004619
 8007bc8:	0800c984 	.word	0x0800c984
 8007bcc:	0800c9a0 	.word	0x0800c9a0
 8007bd0:	0800c734 	.word	0x0800c734
 8007bd4:	20004664 	.word	0x20004664
 8007bd8:	0800c69c 	.word	0x0800c69c
 8007bdc:	0800c6d0 	.word	0x0800c6d0
 8007be0:	200045f4 	.word	0x200045f4
 8007be4:	0800c6a4 	.word	0x0800c6a4

08007be8 <TelitPortalPostData>:

/*Post*/
static _Bool TelitPortalPostData(void)
{
 8007be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bea:	46de      	mov	lr, fp
 8007bec:	4657      	mov	r7, sl
 8007bee:	4646      	mov	r6, r8
 8007bf0:	b5c0      	push	{r6, r7, lr}
 8007bf2:	b08c      	sub	sp, #48	; 0x30
  char *result = NULL;
  uint32_t len;
  int data_length = 0;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	930b      	str	r3, [sp, #44]	; 0x2c
  
  memset(post_buff, 0, sizeof(post_buff));
 8007bf8:	2280      	movs	r2, #128	; 0x80
 8007bfa:	00d2      	lsls	r2, r2, #3
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	4874      	ldr	r0, [pc, #464]	; (8007dd0 <TelitPortalPostData+0x1e8>)
 8007c00:	f001 f83f 	bl	8008c82 <memset>
  memset(local_buff, 0, sizeof(local_buff));
 8007c04:	4c73      	ldr	r4, [pc, #460]	; (8007dd4 <TelitPortalPostData+0x1ec>)
 8007c06:	2280      	movs	r2, #128	; 0x80
 8007c08:	00d2      	lsls	r2, r2, #3
 8007c0a:	2100      	movs	r1, #0
 8007c0c:	0020      	movs	r0, r4
 8007c0e:	f001 f838 	bl	8008c82 <memset>
  
  /*Reset rx buffer for data reception*/
  SCP_InitRx();
 8007c12:	f7fe ffc5 	bl	8006ba0 <SCP_InitRx>
            modem_data.imei,
            modem_data.imei,
            modem_data.imei,
            modem_data.imei,
            modem_data.imei,
			(int)storage.energy_stored_mah,
 8007c16:	4d70      	ldr	r5, [pc, #448]	; (8007dd8 <TelitPortalPostData+0x1f0>)
 8007c18:	6a2b      	ldr	r3, [r5, #32]
 8007c1a:	469a      	mov	sl, r3
			(int)storage.energy_released_mah,
 8007c1c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c1e:	469b      	mov	fp, r3
			(int)modem_data.day_lenght_store,
 8007c20:	4f6e      	ldr	r7, [pc, #440]	; (8007ddc <TelitPortalPostData+0x1f4>)
 8007c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c24:	4698      	mov	r8, r3
			(int)storage.total_batt_ouput_ah,
 8007c26:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    sprintf(
 8007c28:	003e      	movs	r6, r7
 8007c2a:	3625      	adds	r6, #37	; 0x25
 8007c2c:	692b      	ldr	r3, [r5, #16]
 8007c2e:	9308      	str	r3, [sp, #32]
 8007c30:	f7f9 f9b0 	bl	8000f94 <__aeabi_f2iz>
 8007c34:	9007      	str	r0, [sp, #28]
 8007c36:	4643      	mov	r3, r8
 8007c38:	9306      	str	r3, [sp, #24]
 8007c3a:	4658      	mov	r0, fp
 8007c3c:	f7f9 f9aa 	bl	8000f94 <__aeabi_f2iz>
 8007c40:	9005      	str	r0, [sp, #20]
 8007c42:	4650      	mov	r0, sl
 8007c44:	f7f9 f9a6 	bl	8000f94 <__aeabi_f2iz>
 8007c48:	9004      	str	r0, [sp, #16]
 8007c4a:	9603      	str	r6, [sp, #12]
 8007c4c:	9602      	str	r6, [sp, #8]
 8007c4e:	9601      	str	r6, [sp, #4]
 8007c50:	9600      	str	r6, [sp, #0]
 8007c52:	0033      	movs	r3, r6
 8007c54:	4a62      	ldr	r2, [pc, #392]	; (8007de0 <TelitPortalPostData+0x1f8>)
 8007c56:	4963      	ldr	r1, [pc, #396]	; (8007de4 <TelitPortalPostData+0x1fc>)
 8007c58:	485d      	ldr	r0, [pc, #372]	; (8007dd0 <TelitPortalPostData+0x1e8>)
 8007c5a:	f001 f81b 	bl	8008c94 <sprintf>
			(int)storage.vbatt_mv
              );

    len += strlen((char *)post_buff);
 8007c5e:	485c      	ldr	r0, [pc, #368]	; (8007dd0 <TelitPortalPostData+0x1e8>)
 8007c60:	f7f8 fa52 	bl	8000108 <strlen>
 8007c64:	23c8      	movs	r3, #200	; 0xc8
 8007c66:	33ff      	adds	r3, #255	; 0xff
 8007c68:	469a      	mov	sl, r3
 8007c6a:	4482      	add	sl, r0
    
    /*Generate full HTTP post*/
    memset(post_buff, 0, sizeof(post_buff));
 8007c6c:	2280      	movs	r2, #128	; 0x80
 8007c6e:	00d2      	lsls	r2, r2, #3
 8007c70:	2100      	movs	r1, #0
 8007c72:	4857      	ldr	r0, [pc, #348]	; (8007dd0 <TelitPortalPostData+0x1e8>)
 8007c74:	f001 f805 	bl	8008c82 <memset>
    sprintf(post_buff, (char *)fcmd_HTTPPOST, strlen(fcmd_HTTPPOST));
 8007c78:	2260      	movs	r2, #96	; 0x60
 8007c7a:	495b      	ldr	r1, [pc, #364]	; (8007de8 <TelitPortalPostData+0x200>)
 8007c7c:	4854      	ldr	r0, [pc, #336]	; (8007dd0 <TelitPortalPostData+0x1e8>)
 8007c7e:	f001 f809 	bl	8008c94 <sprintf>
    sprintf((char *)local_buff,"%d\r\n\r\n", (int)len);
 8007c82:	4652      	mov	r2, sl
 8007c84:	4959      	ldr	r1, [pc, #356]	; (8007dec <TelitPortalPostData+0x204>)
 8007c86:	0020      	movs	r0, r4
 8007c88:	f001 f804 	bl	8008c94 <sprintf>
    strcat(post_buff,local_buff);
 8007c8c:	0021      	movs	r1, r4
 8007c8e:	4850      	ldr	r0, [pc, #320]	; (8007dd0 <TelitPortalPostData+0x1e8>)
 8007c90:	f001 f820 	bl	8008cd4 <strcat>
    
    memset(local_buff, 0, sizeof(local_buff));
 8007c94:	2280      	movs	r2, #128	; 0x80
 8007c96:	00d2      	lsls	r2, r2, #3
 8007c98:	2100      	movs	r1, #0
 8007c9a:	0020      	movs	r0, r4
 8007c9c:	f000 fff1 	bl	8008c82 <memset>
    sprintf((char *)local_buff, fcmd_dw_post_auth, telit_sessionId);
 8007ca0:	4a4f      	ldr	r2, [pc, #316]	; (8007de0 <TelitPortalPostData+0x1f8>)
 8007ca2:	4953      	ldr	r1, [pc, #332]	; (8007df0 <TelitPortalPostData+0x208>)
 8007ca4:	0020      	movs	r0, r4
 8007ca6:	f000 fff5 	bl	8008c94 <sprintf>
    strcat(post_buff,local_buff);
 8007caa:	0021      	movs	r1, r4
 8007cac:	4848      	ldr	r0, [pc, #288]	; (8007dd0 <TelitPortalPostData+0x1e8>)
 8007cae:	f001 f811 	bl	8008cd4 <strcat>
    
    memset(local_buff, 0, sizeof(local_buff));
 8007cb2:	2280      	movs	r2, #128	; 0x80
 8007cb4:	00d2      	lsls	r2, r2, #3
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	0020      	movs	r0, r4
 8007cba:	f000 ffe2 	bl	8008c82 <memset>
    sprintf((char *)local_buff, fcmd_dw_post_p1, modem_data.imei, (int)storage.energy_stored_mah);
 8007cbe:	6a28      	ldr	r0, [r5, #32]
 8007cc0:	f7f9 f968 	bl	8000f94 <__aeabi_f2iz>
 8007cc4:	0003      	movs	r3, r0
 8007cc6:	0032      	movs	r2, r6
 8007cc8:	494a      	ldr	r1, [pc, #296]	; (8007df4 <TelitPortalPostData+0x20c>)
 8007cca:	0020      	movs	r0, r4
 8007ccc:	f000 ffe2 	bl	8008c94 <sprintf>
    strcat(post_buff,local_buff);
 8007cd0:	0021      	movs	r1, r4
 8007cd2:	483f      	ldr	r0, [pc, #252]	; (8007dd0 <TelitPortalPostData+0x1e8>)
 8007cd4:	f000 fffe 	bl	8008cd4 <strcat>
    
    memset(local_buff, 0, sizeof(local_buff));
 8007cd8:	2280      	movs	r2, #128	; 0x80
 8007cda:	00d2      	lsls	r2, r2, #3
 8007cdc:	2100      	movs	r1, #0
 8007cde:	0020      	movs	r0, r4
 8007ce0:	f000 ffcf 	bl	8008c82 <memset>
    sprintf((char *)local_buff, fcmd_dw_post_p2, modem_data.imei, (int)storage.energy_released_mah);
 8007ce4:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007ce6:	f7f9 f955 	bl	8000f94 <__aeabi_f2iz>
 8007cea:	0003      	movs	r3, r0
 8007cec:	0032      	movs	r2, r6
 8007cee:	4942      	ldr	r1, [pc, #264]	; (8007df8 <TelitPortalPostData+0x210>)
 8007cf0:	0020      	movs	r0, r4
 8007cf2:	f000 ffcf 	bl	8008c94 <sprintf>
    strcat(post_buff,local_buff);
 8007cf6:	0021      	movs	r1, r4
 8007cf8:	4835      	ldr	r0, [pc, #212]	; (8007dd0 <TelitPortalPostData+0x1e8>)
 8007cfa:	f000 ffeb 	bl	8008cd4 <strcat>
    
    memset(local_buff, 0, sizeof(local_buff));
 8007cfe:	2280      	movs	r2, #128	; 0x80
 8007d00:	00d2      	lsls	r2, r2, #3
 8007d02:	2100      	movs	r1, #0
 8007d04:	0020      	movs	r0, r4
 8007d06:	f000 ffbc 	bl	8008c82 <memset>
    sprintf((char *)local_buff, fcmd_dw_post_p3, modem_data.imei, (int)modem_data.day_lenght_store);
 8007d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d0c:	0032      	movs	r2, r6
 8007d0e:	493b      	ldr	r1, [pc, #236]	; (8007dfc <TelitPortalPostData+0x214>)
 8007d10:	0020      	movs	r0, r4
 8007d12:	f000 ffbf 	bl	8008c94 <sprintf>
    strcat(post_buff,local_buff);
 8007d16:	0021      	movs	r1, r4
 8007d18:	482d      	ldr	r0, [pc, #180]	; (8007dd0 <TelitPortalPostData+0x1e8>)
 8007d1a:	f000 ffdb 	bl	8008cd4 <strcat>
    
    memset(local_buff, 0, sizeof(local_buff));
 8007d1e:	2280      	movs	r2, #128	; 0x80
 8007d20:	00d2      	lsls	r2, r2, #3
 8007d22:	2100      	movs	r1, #0
 8007d24:	0020      	movs	r0, r4
 8007d26:	f000 ffac 	bl	8008c82 <memset>
    sprintf((char *)local_buff, fcmd_dw_post_p4, modem_data.imei, (int)storage.total_batt_ouput_ah);
 8007d2a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8007d2c:	f7f9 f932 	bl	8000f94 <__aeabi_f2iz>
 8007d30:	0003      	movs	r3, r0
 8007d32:	0032      	movs	r2, r6
 8007d34:	4932      	ldr	r1, [pc, #200]	; (8007e00 <TelitPortalPostData+0x218>)
 8007d36:	0020      	movs	r0, r4
 8007d38:	f000 ffac 	bl	8008c94 <sprintf>
    strcat(post_buff,local_buff);
 8007d3c:	0021      	movs	r1, r4
 8007d3e:	4824      	ldr	r0, [pc, #144]	; (8007dd0 <TelitPortalPostData+0x1e8>)
 8007d40:	f000 ffc8 	bl	8008cd4 <strcat>
    
    memset(local_buff, 0, sizeof(local_buff));
 8007d44:	2280      	movs	r2, #128	; 0x80
 8007d46:	00d2      	lsls	r2, r2, #3
 8007d48:	2100      	movs	r1, #0
 8007d4a:	0020      	movs	r0, r4
 8007d4c:	f000 ff99 	bl	8008c82 <memset>
    sprintf((char *)local_buff, fcmd_dw_post_p5, modem_data.imei, (int)storage.vbatt_mv);
 8007d50:	692b      	ldr	r3, [r5, #16]
 8007d52:	0032      	movs	r2, r6
 8007d54:	492b      	ldr	r1, [pc, #172]	; (8007e04 <TelitPortalPostData+0x21c>)
 8007d56:	0020      	movs	r0, r4
 8007d58:	f000 ff9c 	bl	8008c94 <sprintf>
    strcat(post_buff,local_buff);
 8007d5c:	0021      	movs	r1, r4
 8007d5e:	481c      	ldr	r0, [pc, #112]	; (8007dd0 <TelitPortalPostData+0x1e8>)
 8007d60:	f000 ffb8 	bl	8008cd4 <strcat>
    
    /* Send HTTP POST data in two peaces*/
    len = strlen(post_buff)/2;
 8007d64:	481a      	ldr	r0, [pc, #104]	; (8007dd0 <TelitPortalPostData+0x1e8>)
 8007d66:	f7f8 f9cf 	bl	8000108 <strlen>
 8007d6a:	0844      	lsrs	r4, r0, #1
    result = SocketSend(modem_data.socket_id, post_buff, len);
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	0022      	movs	r2, r4
 8007d70:	4917      	ldr	r1, [pc, #92]	; (8007dd0 <TelitPortalPostData+0x1e8>)
 8007d72:	f7ff fe15 	bl	80079a0 <SocketSend>
    if(result)
 8007d76:	2800      	cmp	r0, #0
 8007d78:	d00a      	beq.n	8007d90 <TelitPortalPostData+0x1a8>
    {
      result = SocketSend(modem_data.socket_id, &post_buff[len], strlen(post_buff) - len);
 8007d7a:	4b18      	ldr	r3, [pc, #96]	; (8007ddc <TelitPortalPostData+0x1f4>)
 8007d7c:	68dd      	ldr	r5, [r3, #12]
 8007d7e:	4814      	ldr	r0, [pc, #80]	; (8007dd0 <TelitPortalPostData+0x1e8>)
 8007d80:	1826      	adds	r6, r4, r0
 8007d82:	f7f8 f9c1 	bl	8000108 <strlen>
 8007d86:	1b02      	subs	r2, r0, r4
 8007d88:	0031      	movs	r1, r6
 8007d8a:	0028      	movs	r0, r5
 8007d8c:	f7ff fe08 	bl	80079a0 <SocketSend>
    }
    
    /*Receive data*/
    if(result)
 8007d90:	2800      	cmp	r0, #0
 8007d92:	d011      	beq.n	8007db8 <TelitPortalPostData+0x1d0>
    {
      result = NULL;
      result = SocketReceive(modem_data.socket_id, &data_length);
 8007d94:	4b11      	ldr	r3, [pc, #68]	; (8007ddc <TelitPortalPostData+0x1f4>)
 8007d96:	68d8      	ldr	r0, [r3, #12]
 8007d98:	a90b      	add	r1, sp, #44	; 0x2c
 8007d9a:	f7ff fe49 	bl	8007a30 <SocketReceive>
      if(result)
 8007d9e:	2800      	cmp	r0, #0
 8007da0:	d011      	beq.n	8007dc6 <TelitPortalPostData+0x1de>
      {
        result = strstr(result, "}}");
 8007da2:	4919      	ldr	r1, [pc, #100]	; (8007e08 <TelitPortalPostData+0x220>)
 8007da4:	f000 ffba 	bl	8008d1c <strstr>
        if(result)
 8007da8:	2800      	cmp	r0, #0
 8007daa:	d00e      	beq.n	8007dca <TelitPortalPostData+0x1e2>
        {
          ModemCloseTcpSocket(modem_data.socket_id);
 8007dac:	4b0b      	ldr	r3, [pc, #44]	; (8007ddc <TelitPortalPostData+0x1f4>)
 8007dae:	68d8      	ldr	r0, [r3, #12]
 8007db0:	f7ff fddc 	bl	800796c <ModemCloseTcpSocket>
          return true;
 8007db4:	2001      	movs	r0, #1
 8007db6:	e000      	b.n	8007dba <TelitPortalPostData+0x1d2>
        }
      }
    }
    return false;
 8007db8:	2000      	movs	r0, #0
  
  /*Timeout. In case of error, no }} received*/
  ModemCloseTcpSocket(modem_data.socket_id);
  return false;
}
 8007dba:	b00c      	add	sp, #48	; 0x30
 8007dbc:	bc1c      	pop	{r2, r3, r4}
 8007dbe:	4690      	mov	r8, r2
 8007dc0:	469a      	mov	sl, r3
 8007dc2:	46a3      	mov	fp, r4
 8007dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return false;
 8007dc6:	2000      	movs	r0, #0
 8007dc8:	e7f7      	b.n	8007dba <TelitPortalPostData+0x1d2>
 8007dca:	2000      	movs	r0, #0
 8007dcc:	e7f5      	b.n	8007dba <TelitPortalPostData+0x1d2>
 8007dce:	46c0      	nop			; (mov r8, r8)
 8007dd0:	200041f4 	.word	0x200041f4
 8007dd4:	2000349c 	.word	0x2000349c
 8007dd8:	20004690 	.word	0x20004690
 8007ddc:	200045f4 	.word	0x200045f4
 8007de0:	20004674 	.word	0x20004674
 8007de4:	0800c6b4 	.word	0x0800c6b4
 8007de8:	0800c6d0 	.word	0x0800c6d0
 8007dec:	0800c69c 	.word	0x0800c69c
 8007df0:	0800c798 	.word	0x0800c798
 8007df4:	0800c7b4 	.word	0x0800c7b4
 8007df8:	0800c810 	.word	0x0800c810
 8007dfc:	0800c870 	.word	0x0800c870
 8007e00:	0800c8c8 	.word	0x0800c8c8
 8007e04:	0800c928 	.word	0x0800c928
 8007e08:	0800c6cc 	.word	0x0800c6cc

08007e0c <memmem>:
{
 8007e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e0e:	0004      	movs	r4, r0
 8007e10:	0016      	movs	r6, r2
 8007e12:	1e1f      	subs	r7, r3, #0
	if (s_len == 0)
 8007e14:	d01d      	beq.n	8007e52 <memmem+0x46>
	if (l_len < s_len)
 8007e16:	428b      	cmp	r3, r1
 8007e18:	d81c      	bhi.n	8007e54 <memmem+0x48>
	if (s_len == 1)
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d002      	beq.n	8007e24 <memmem+0x18>
	last = cl + l_len - s_len;
 8007e1e:	1acd      	subs	r5, r1, r3
 8007e20:	1945      	adds	r5, r0, r5
	for (cur = cl; cur <= last; cur++)
 8007e22:	e006      	b.n	8007e32 <memmem+0x26>
		return memchr(l, *cs, l_len);
 8007e24:	7813      	ldrb	r3, [r2, #0]
 8007e26:	000a      	movs	r2, r1
 8007e28:	0019      	movs	r1, r3
 8007e2a:	f000 ff07 	bl	8008c3c <memchr>
 8007e2e:	e010      	b.n	8007e52 <memmem+0x46>
	for (cur = cl; cur <= last; cur++)
 8007e30:	3401      	adds	r4, #1
 8007e32:	42ac      	cmp	r4, r5
 8007e34:	d80c      	bhi.n	8007e50 <memmem+0x44>
		if (cur[0] == cs[0] && memcmp(cur, cs, s_len) == 0)
 8007e36:	7822      	ldrb	r2, [r4, #0]
 8007e38:	7833      	ldrb	r3, [r6, #0]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d1f8      	bne.n	8007e30 <memmem+0x24>
 8007e3e:	003a      	movs	r2, r7
 8007e40:	0031      	movs	r1, r6
 8007e42:	0020      	movs	r0, r4
 8007e44:	f000 ff05 	bl	8008c52 <memcmp>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	d1f1      	bne.n	8007e30 <memmem+0x24>
			return (void *)cur;
 8007e4c:	0020      	movs	r0, r4
 8007e4e:	e000      	b.n	8007e52 <memmem+0x46>
	return NULL;
 8007e50:	2000      	movs	r0, #0
}
 8007e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
 8007e54:	2000      	movs	r0, #0
 8007e56:	e7fc      	b.n	8007e52 <memmem+0x46>

08007e58 <SignalQuality>:
{
 8007e58:	b510      	push	{r4, lr}
    result = SCP_SendCommandWaitAnswer("AT+CSQ\r\n", "OK", 2000, 1);
 8007e5a:	22fa      	movs	r2, #250	; 0xfa
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	00d2      	lsls	r2, r2, #3
 8007e60:	490b      	ldr	r1, [pc, #44]	; (8007e90 <SignalQuality+0x38>)
 8007e62:	480c      	ldr	r0, [pc, #48]	; (8007e94 <SignalQuality+0x3c>)
 8007e64:	f7fe fe5a 	bl	8006b1c <SCP_SendCommandWaitAnswer>
    if(result)
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	d00c      	beq.n	8007e86 <SignalQuality+0x2e>
        result = memmem((char*)SCPHandler.RxBuffer, CMD_BUFF_LENGTH, "+CSQ:", sizeof("+CSQ:")-1);
 8007e6c:	2180      	movs	r1, #128	; 0x80
 8007e6e:	2305      	movs	r3, #5
 8007e70:	4a09      	ldr	r2, [pc, #36]	; (8007e98 <SignalQuality+0x40>)
 8007e72:	00c9      	lsls	r1, r1, #3
 8007e74:	4809      	ldr	r0, [pc, #36]	; (8007e9c <SignalQuality+0x44>)
 8007e76:	f7ff ffc9 	bl	8007e0c <memmem>
        if(result)
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	d005      	beq.n	8007e8a <SignalQuality+0x32>
            result += 6;
 8007e7e:	3006      	adds	r0, #6
            signal_level = atoi(result);
 8007e80:	f000 feab 	bl	8008bda <atoi>
}
 8007e84:	bd10      	pop	{r4, pc}
        return 0;
 8007e86:	2000      	movs	r0, #0
 8007e88:	e7fc      	b.n	8007e84 <SignalQuality+0x2c>
    int32_t signal_level = 0;
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	e7fa      	b.n	8007e84 <SignalQuality+0x2c>
 8007e8e:	46c0      	nop			; (mov r8, r8)
 8007e90:	0800c514 	.word	0x0800c514
 8007e94:	0800c598 	.word	0x0800c598
 8007e98:	0800c5a4 	.word	0x0800c5a4
 8007e9c:	2000392c 	.word	0x2000392c

08007ea0 <NetworkRegistrationCheck>:
{
 8007ea0:	b510      	push	{r4, lr}
    result = SCP_SendCommandWaitAnswer("AT+CEREG?\r\n", "OK", 500, 5);
 8007ea2:	22fa      	movs	r2, #250	; 0xfa
 8007ea4:	2305      	movs	r3, #5
 8007ea6:	0052      	lsls	r2, r2, #1
 8007ea8:	490b      	ldr	r1, [pc, #44]	; (8007ed8 <NetworkRegistrationCheck+0x38>)
 8007eaa:	480c      	ldr	r0, [pc, #48]	; (8007edc <NetworkRegistrationCheck+0x3c>)
 8007eac:	f7fe fe36 	bl	8006b1c <SCP_SendCommandWaitAnswer>
    if(result)
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	d00c      	beq.n	8007ece <NetworkRegistrationCheck+0x2e>
        result = memmem((char*)SCPHandler.RxBuffer, CMD_BUFF_LENGTH, "+CEREG: ", sizeof("+CEREG: ")-1);
 8007eb4:	2180      	movs	r1, #128	; 0x80
 8007eb6:	2308      	movs	r3, #8
 8007eb8:	4a09      	ldr	r2, [pc, #36]	; (8007ee0 <NetworkRegistrationCheck+0x40>)
 8007eba:	00c9      	lsls	r1, r1, #3
 8007ebc:	4809      	ldr	r0, [pc, #36]	; (8007ee4 <NetworkRegistrationCheck+0x44>)
 8007ebe:	f7ff ffa5 	bl	8007e0c <memmem>
        if(result)
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	d005      	beq.n	8007ed2 <NetworkRegistrationCheck+0x32>
            result += 10;
 8007ec6:	300a      	adds	r0, #10
            ntwrk_stat = atoi(result);
 8007ec8:	f000 fe87 	bl	8008bda <atoi>
}
 8007ecc:	bd10      	pop	{r4, pc}
        return 0;
 8007ece:	2000      	movs	r0, #0
 8007ed0:	e7fc      	b.n	8007ecc <NetworkRegistrationCheck+0x2c>
    int32_t ntwrk_stat = 0;
 8007ed2:	2000      	movs	r0, #0
 8007ed4:	e7fa      	b.n	8007ecc <NetworkRegistrationCheck+0x2c>
 8007ed6:	46c0      	nop			; (mov r8, r8)
 8007ed8:	0800c514 	.word	0x0800c514
 8007edc:	0800c580 	.word	0x0800c580
 8007ee0:	0800c58c 	.word	0x0800c58c
 8007ee4:	2000392c 	.word	0x2000392c

08007ee8 <WaitForNetwork>:
{
 8007ee8:	b510      	push	{r4, lr}
    for(uint32_t i=0; i < WAIT_FOR_NETWORK_S; i++)
 8007eea:	2400      	movs	r4, #0
 8007eec:	e008      	b.n	8007f00 <WaitForNetwork+0x18>
          signal = SignalQuality();
 8007eee:	f7ff ffb3 	bl	8007e58 <SignalQuality>
          if(signal != 99)
 8007ef2:	2863      	cmp	r0, #99	; 0x63
 8007ef4:	d114      	bne.n	8007f20 <WaitForNetwork+0x38>
            osDelay(1000);
 8007ef6:	3097      	adds	r0, #151	; 0x97
 8007ef8:	0080      	lsls	r0, r0, #2
 8007efa:	f7fd fa37 	bl	800536c <osDelay>
    for(uint32_t i=0; i < WAIT_FOR_NETWORK_S; i++)
 8007efe:	3401      	adds	r4, #1
 8007f00:	4b08      	ldr	r3, [pc, #32]	; (8007f24 <WaitForNetwork+0x3c>)
 8007f02:	429c      	cmp	r4, r3
 8007f04:	d80a      	bhi.n	8007f1c <WaitForNetwork+0x34>
        test = NetworkRegistrationCheck();
 8007f06:	f7ff ffcb 	bl	8007ea0 <NetworkRegistrationCheck>
        if((test == 1) || (test == 5))
 8007f0a:	2801      	cmp	r0, #1
 8007f0c:	d0ef      	beq.n	8007eee <WaitForNetwork+0x6>
 8007f0e:	2805      	cmp	r0, #5
 8007f10:	d0ed      	beq.n	8007eee <WaitForNetwork+0x6>
            osDelay(1000);
 8007f12:	20fa      	movs	r0, #250	; 0xfa
 8007f14:	0080      	lsls	r0, r0, #2
 8007f16:	f7fd fa29 	bl	800536c <osDelay>
 8007f1a:	e7f0      	b.n	8007efe <WaitForNetwork+0x16>
    return false;
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	e000      	b.n	8007f22 <WaitForNetwork+0x3a>
            return true;
 8007f20:	2001      	movs	r0, #1
}
 8007f22:	bd10      	pop	{r4, pc}
 8007f24:	00000383 	.word	0x00000383

08007f28 <GetOperator>:
{
 8007f28:	b510      	push	{r4, lr}
    result = SCP_SendCommandWaitAnswer("AT+COPS?\r\n", "OK", 30000, 1);
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	4a17      	ldr	r2, [pc, #92]	; (8007f8c <GetOperator+0x64>)
 8007f2e:	4918      	ldr	r1, [pc, #96]	; (8007f90 <GetOperator+0x68>)
 8007f30:	4818      	ldr	r0, [pc, #96]	; (8007f94 <GetOperator+0x6c>)
 8007f32:	f7fe fdf3 	bl	8006b1c <SCP_SendCommandWaitAnswer>
 8007f36:	1e04      	subs	r4, r0, #0
    if(result)
 8007f38:	d023      	beq.n	8007f82 <GetOperator+0x5a>
        result = memmem((char*)SCPHandler.RxBuffer, CMD_BUFF_LENGTH, "+COPS:", sizeof("+COPS:")-1);
 8007f3a:	2180      	movs	r1, #128	; 0x80
 8007f3c:	2306      	movs	r3, #6
 8007f3e:	4a16      	ldr	r2, [pc, #88]	; (8007f98 <GetOperator+0x70>)
 8007f40:	00c9      	lsls	r1, r1, #3
 8007f42:	4816      	ldr	r0, [pc, #88]	; (8007f9c <GetOperator+0x74>)
 8007f44:	f7ff ff62 	bl	8007e0c <memmem>
 8007f48:	1e04      	subs	r4, r0, #0
        if(result)
 8007f4a:	d01a      	beq.n	8007f82 <GetOperator+0x5a>
            result = strchr(result, '"');
 8007f4c:	2122      	movs	r1, #34	; 0x22
 8007f4e:	f000 fecf 	bl	8008cf0 <strchr>
 8007f52:	1e04      	subs	r4, r0, #0
            if(result)
 8007f54:	d015      	beq.n	8007f82 <GetOperator+0x5a>
                memset(operator, 0x00, 17);
 8007f56:	2211      	movs	r2, #17
 8007f58:	2100      	movs	r1, #0
 8007f5a:	4811      	ldr	r0, [pc, #68]	; (8007fa0 <GetOperator+0x78>)
 8007f5c:	f000 fe91 	bl	8008c82 <memset>
                for(uint8_t i = 0; i < 16; i++)
 8007f60:	2300      	movs	r3, #0
 8007f62:	2b0f      	cmp	r3, #15
 8007f64:	d80f      	bhi.n	8007f86 <GetOperator+0x5e>
                    operator[i] = *result;
 8007f66:	7821      	ldrb	r1, [r4, #0]
 8007f68:	4a0d      	ldr	r2, [pc, #52]	; (8007fa0 <GetOperator+0x78>)
 8007f6a:	54d1      	strb	r1, [r2, r3]
                    result++;
 8007f6c:	3401      	adds	r4, #1
                    if(*result == '"')
 8007f6e:	7822      	ldrb	r2, [r4, #0]
 8007f70:	2a22      	cmp	r2, #34	; 0x22
 8007f72:	d002      	beq.n	8007f7a <GetOperator+0x52>
                for(uint8_t i = 0; i < 16; i++)
 8007f74:	3301      	adds	r3, #1
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	e7f3      	b.n	8007f62 <GetOperator+0x3a>
                        i++;
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	b2db      	uxtb	r3, r3
                        operator[i] = *result;
 8007f7e:	4c08      	ldr	r4, [pc, #32]	; (8007fa0 <GetOperator+0x78>)
 8007f80:	54e2      	strb	r2, [r4, r3]
}
 8007f82:	0020      	movs	r0, r4
 8007f84:	bd10      	pop	{r4, pc}
                return operator;
 8007f86:	4c06      	ldr	r4, [pc, #24]	; (8007fa0 <GetOperator+0x78>)
 8007f88:	e7fb      	b.n	8007f82 <GetOperator+0x5a>
 8007f8a:	46c0      	nop			; (mov r8, r8)
 8007f8c:	00007530 	.word	0x00007530
 8007f90:	0800c514 	.word	0x0800c514
 8007f94:	0800c490 	.word	0x0800c490
 8007f98:	0800c49c 	.word	0x0800c49c
 8007f9c:	2000392c 	.word	0x2000392c
 8007fa0:	2000389c 	.word	0x2000389c

08007fa4 <LTE_StatusCheck>:
{
 8007fa4:	b510      	push	{r4, lr}
    result = SCP_SendCommandWaitAnswer("AT+CGACT?\r\n", "OK", 1000, 1);
 8007fa6:	22fa      	movs	r2, #250	; 0xfa
 8007fa8:	2301      	movs	r3, #1
 8007faa:	0092      	lsls	r2, r2, #2
 8007fac:	490b      	ldr	r1, [pc, #44]	; (8007fdc <LTE_StatusCheck+0x38>)
 8007fae:	480c      	ldr	r0, [pc, #48]	; (8007fe0 <LTE_StatusCheck+0x3c>)
 8007fb0:	f7fe fdb4 	bl	8006b1c <SCP_SendCommandWaitAnswer>
    if(result)
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	d00c      	beq.n	8007fd2 <LTE_StatusCheck+0x2e>
        result = memmem((char*)SCPHandler.RxBuffer, CMD_BUFF_LENGTH, "+CGACT: 1", sizeof("+CGACT: 1")-1);
 8007fb8:	2180      	movs	r1, #128	; 0x80
 8007fba:	2309      	movs	r3, #9
 8007fbc:	4a09      	ldr	r2, [pc, #36]	; (8007fe4 <LTE_StatusCheck+0x40>)
 8007fbe:	00c9      	lsls	r1, r1, #3
 8007fc0:	4809      	ldr	r0, [pc, #36]	; (8007fe8 <LTE_StatusCheck+0x44>)
 8007fc2:	f7ff ff23 	bl	8007e0c <memmem>
        if(result)
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	d005      	beq.n	8007fd6 <LTE_StatusCheck+0x32>
            result += 10;
 8007fca:	300a      	adds	r0, #10
            lte_stat = atoi(result);
 8007fcc:	f000 fe05 	bl	8008bda <atoi>
}
 8007fd0:	bd10      	pop	{r4, pc}
        return 0;
 8007fd2:	2000      	movs	r0, #0
 8007fd4:	e7fc      	b.n	8007fd0 <LTE_StatusCheck+0x2c>
    int32_t lte_stat = 0;
 8007fd6:	2000      	movs	r0, #0
 8007fd8:	e7fa      	b.n	8007fd0 <LTE_StatusCheck+0x2c>
 8007fda:	46c0      	nop			; (mov r8, r8)
 8007fdc:	0800c514 	.word	0x0800c514
 8007fe0:	0800c528 	.word	0x0800c528
 8007fe4:	0800c534 	.word	0x0800c534
 8007fe8:	2000392c 	.word	0x2000392c

08007fec <LTE_Connect>:
{
 8007fec:	b570      	push	{r4, r5, r6, lr}
 8007fee:	0005      	movs	r5, r0
    check = NetworkRegistrationCheck();
 8007ff0:	f7ff ff56 	bl	8007ea0 <NetworkRegistrationCheck>
    if(!check)
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	d032      	beq.n	800805e <LTE_Connect+0x72>
    result = SCP_SendCommandWaitAnswer("AT+CGCONTRDP\r\n", "+CGCONTRDP: 1", 1000, 1);
 8007ff8:	22fa      	movs	r2, #250	; 0xfa
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	0092      	lsls	r2, r2, #2
 8007ffe:	4933      	ldr	r1, [pc, #204]	; (80080cc <LTE_Connect+0xe0>)
 8008000:	4833      	ldr	r0, [pc, #204]	; (80080d0 <LTE_Connect+0xe4>)
 8008002:	f7fe fd8b 	bl	8006b1c <SCP_SendCommandWaitAnswer>
    if(!result) return false;
 8008006:	2800      	cmp	r0, #0
 8008008:	d056      	beq.n	80080b8 <LTE_Connect+0xcc>
    result = SCP_SendCommandWaitAnswer("AT+CGACT?\r\n", "+CGACT: 1,1", 1000, 1);
 800800a:	22fa      	movs	r2, #250	; 0xfa
 800800c:	2301      	movs	r3, #1
 800800e:	0092      	lsls	r2, r2, #2
 8008010:	4930      	ldr	r1, [pc, #192]	; (80080d4 <LTE_Connect+0xe8>)
 8008012:	4831      	ldr	r0, [pc, #196]	; (80080d8 <LTE_Connect+0xec>)
 8008014:	f7fe fd82 	bl	8006b1c <SCP_SendCommandWaitAnswer>
 8008018:	1e04      	subs	r4, r0, #0
    if (!result) result = SCP_SendCommandWaitAnswer("AT+CGACT=1,1\r\n", "OK", 1000, 1);
 800801a:	d023      	beq.n	8008064 <LTE_Connect+0x78>
    osDelay(1000);
 800801c:	20fa      	movs	r0, #250	; 0xfa
 800801e:	0080      	lsls	r0, r0, #2
 8008020:	f7fd f9a4 	bl	800536c <osDelay>
    if (!result) return false;
 8008024:	2c00      	cmp	r4, #0
 8008026:	d049      	beq.n	80080bc <LTE_Connect+0xd0>
    result = SCP_SendCommandWaitAnswer("AT+IPCONFIG\r\n", "+IPCONFIG:", 1000, 1);
 8008028:	22fa      	movs	r2, #250	; 0xfa
 800802a:	2301      	movs	r3, #1
 800802c:	0092      	lsls	r2, r2, #2
 800802e:	492b      	ldr	r1, [pc, #172]	; (80080dc <LTE_Connect+0xf0>)
 8008030:	482b      	ldr	r0, [pc, #172]	; (80080e0 <LTE_Connect+0xf4>)
 8008032:	f7fe fd73 	bl	8006b1c <SCP_SendCommandWaitAnswer>
    if(result)
 8008036:	2800      	cmp	r0, #0
 8008038:	d042      	beq.n	80080c0 <LTE_Connect+0xd4>
            result = memmem((char*)SCPHandler.RxBuffer, CMD_BUFF_LENGTH, "+IPCONFIG: ", sizeof("+IPCONFIG: ")-1);
 800803a:	2180      	movs	r1, #128	; 0x80
 800803c:	230b      	movs	r3, #11
 800803e:	4a29      	ldr	r2, [pc, #164]	; (80080e4 <LTE_Connect+0xf8>)
 8008040:	00c9      	lsls	r1, r1, #3
 8008042:	4829      	ldr	r0, [pc, #164]	; (80080e8 <LTE_Connect+0xfc>)
 8008044:	f7ff fee2 	bl	8007e0c <memmem>
            result += 11;
 8008048:	300b      	adds	r0, #11
 800804a:	1e04      	subs	r4, r0, #0
            if(result)
 800804c:	d03a      	beq.n	80080c4 <LTE_Connect+0xd8>
                memset(ip_address, 0x00, 15);
 800804e:	220f      	movs	r2, #15
 8008050:	2100      	movs	r1, #0
 8008052:	0028      	movs	r0, r5
 8008054:	f000 fe15 	bl	8008c82 <memset>
    temp = ip_address;
 8008058:	0028      	movs	r0, r5
                for(uint8_t i = 0; i < 15; i++)
 800805a:	2300      	movs	r3, #0
 800805c:	e014      	b.n	8008088 <LTE_Connect+0x9c>
      WaitForNetwork();
 800805e:	f7ff ff43 	bl	8007ee8 <WaitForNetwork>
 8008062:	e7c9      	b.n	8007ff8 <LTE_Connect+0xc>
    if (!result) result = SCP_SendCommandWaitAnswer("AT+CGACT=1,1\r\n", "OK", 1000, 1);
 8008064:	22fa      	movs	r2, #250	; 0xfa
 8008066:	2301      	movs	r3, #1
 8008068:	0092      	lsls	r2, r2, #2
 800806a:	4920      	ldr	r1, [pc, #128]	; (80080ec <LTE_Connect+0x100>)
 800806c:	4820      	ldr	r0, [pc, #128]	; (80080f0 <LTE_Connect+0x104>)
 800806e:	f7fe fd55 	bl	8006b1c <SCP_SendCommandWaitAnswer>
 8008072:	0004      	movs	r4, r0
 8008074:	e7d2      	b.n	800801c <LTE_Connect+0x30>
                        result++;
 8008076:	3401      	adds	r4, #1
 8008078:	e00b      	b.n	8008092 <LTE_Connect+0xa6>
                    if(*result == '\r')
 800807a:	2a0d      	cmp	r2, #13
 800807c:	d024      	beq.n	80080c8 <LTE_Connect+0xdc>
                    *temp = *result;
 800807e:	7002      	strb	r2, [r0, #0]
                    result++;
 8008080:	3401      	adds	r4, #1
                    temp++;
 8008082:	3001      	adds	r0, #1
                for(uint8_t i = 0; i < 15; i++)
 8008084:	3301      	adds	r3, #1
 8008086:	b2db      	uxtb	r3, r3
 8008088:	2b0e      	cmp	r3, #14
 800808a:	d813      	bhi.n	80080b4 <LTE_Connect+0xc8>
                    if(*result == '"')
 800808c:	7822      	ldrb	r2, [r4, #0]
 800808e:	2a22      	cmp	r2, #34	; 0x22
 8008090:	d0f1      	beq.n	8008076 <LTE_Connect+0x8a>
                    if(!(*result > 47 && *result < 58) && !(*result == '.') && (!(*result == '\r')))
 8008092:	7822      	ldrb	r2, [r4, #0]
 8008094:	0011      	movs	r1, r2
 8008096:	3930      	subs	r1, #48	; 0x30
 8008098:	b2c9      	uxtb	r1, r1
 800809a:	2909      	cmp	r1, #9
 800809c:	d9ed      	bls.n	800807a <LTE_Connect+0x8e>
 800809e:	2a2e      	cmp	r2, #46	; 0x2e
 80080a0:	d0eb      	beq.n	800807a <LTE_Connect+0x8e>
 80080a2:	2a0d      	cmp	r2, #13
 80080a4:	d0e9      	beq.n	800807a <LTE_Connect+0x8e>
                        memset(ip_address, 0x00, 15);
 80080a6:	220f      	movs	r2, #15
 80080a8:	2100      	movs	r1, #0
 80080aa:	0028      	movs	r0, r5
 80080ac:	f000 fde9 	bl	8008c82 <memset>
                        return false;
 80080b0:	2000      	movs	r0, #0
 80080b2:	e002      	b.n	80080ba <LTE_Connect+0xce>
            return true;
 80080b4:	2001      	movs	r0, #1
 80080b6:	e000      	b.n	80080ba <LTE_Connect+0xce>
    if(!result) return false;
 80080b8:	2000      	movs	r0, #0
}
 80080ba:	bd70      	pop	{r4, r5, r6, pc}
    if (!result) return false;
 80080bc:	2000      	movs	r0, #0
 80080be:	e7fc      	b.n	80080ba <LTE_Connect+0xce>
    return false;
 80080c0:	2000      	movs	r0, #0
 80080c2:	e7fa      	b.n	80080ba <LTE_Connect+0xce>
            return true;
 80080c4:	2001      	movs	r0, #1
 80080c6:	e7f8      	b.n	80080ba <LTE_Connect+0xce>
 80080c8:	2001      	movs	r0, #1
 80080ca:	e7f6      	b.n	80080ba <LTE_Connect+0xce>
 80080cc:	0800c4b0 	.word	0x0800c4b0
 80080d0:	0800c4c0 	.word	0x0800c4c0
 80080d4:	0800c4d0 	.word	0x0800c4d0
 80080d8:	0800c528 	.word	0x0800c528
 80080dc:	0800c4ec 	.word	0x0800c4ec
 80080e0:	0800c4f8 	.word	0x0800c4f8
 80080e4:	0800c508 	.word	0x0800c508
 80080e8:	2000392c 	.word	0x2000392c
 80080ec:	0800c514 	.word	0x0800c514
 80080f0:	0800c4dc 	.word	0x0800c4dc

080080f4 <ModemOpenTcpSocket>:
{
 80080f4:	b570      	push	{r4, r5, r6, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	0005      	movs	r5, r0
 80080fa:	000c      	movs	r4, r1
 80080fc:	0016      	movs	r6, r2
  memset(post_buff, 0, sizeof(post_buff));
 80080fe:	2280      	movs	r2, #128	; 0x80
 8008100:	00d2      	lsls	r2, r2, #3
 8008102:	2100      	movs	r1, #0
 8008104:	4818      	ldr	r0, [pc, #96]	; (8008168 <ModemOpenTcpSocket+0x74>)
 8008106:	f000 fdbc 	bl	8008c82 <memset>
  result = SCP_SendCommandWaitAnswer("AT+ESOC=1,1,1\r\n", "OK", 1000, 1);
 800810a:	22fa      	movs	r2, #250	; 0xfa
 800810c:	2301      	movs	r3, #1
 800810e:	0092      	lsls	r2, r2, #2
 8008110:	4916      	ldr	r1, [pc, #88]	; (800816c <ModemOpenTcpSocket+0x78>)
 8008112:	4817      	ldr	r0, [pc, #92]	; (8008170 <ModemOpenTcpSocket+0x7c>)
 8008114:	f7fe fd02 	bl	8006b1c <SCP_SendCommandWaitAnswer>
  if(result)
 8008118:	2800      	cmp	r0, #0
 800811a:	d01e      	beq.n	800815a <ModemOpenTcpSocket+0x66>
    result = memmem((char*)SCPHandler.RxBuffer, CMD_BUFF_LENGTH, "+ESOC=", sizeof("+ESOC=")-1);
 800811c:	2180      	movs	r1, #128	; 0x80
 800811e:	2306      	movs	r3, #6
 8008120:	4a14      	ldr	r2, [pc, #80]	; (8008174 <ModemOpenTcpSocket+0x80>)
 8008122:	00c9      	lsls	r1, r1, #3
 8008124:	4814      	ldr	r0, [pc, #80]	; (8008178 <ModemOpenTcpSocket+0x84>)
 8008126:	f7ff fe71 	bl	8007e0c <memmem>
    if(result)
 800812a:	2800      	cmp	r0, #0
 800812c:	d017      	beq.n	800815e <ModemOpenTcpSocket+0x6a>
      result += 6;
 800812e:	3006      	adds	r0, #6
      *socket_id = atoi(result);
 8008130:	f000 fd53 	bl	8008bda <atoi>
 8008134:	0002      	movs	r2, r0
 8008136:	6030      	str	r0, [r6, #0]
  sprintf(post_buff, "AT+ESOCON=%d,%d,\"%s\"\r\n", *socket_id, (int)port, pAddress);
 8008138:	4e0b      	ldr	r6, [pc, #44]	; (8008168 <ModemOpenTcpSocket+0x74>)
 800813a:	9500      	str	r5, [sp, #0]
 800813c:	0023      	movs	r3, r4
 800813e:	490f      	ldr	r1, [pc, #60]	; (800817c <ModemOpenTcpSocket+0x88>)
 8008140:	0030      	movs	r0, r6
 8008142:	f000 fda7 	bl	8008c94 <sprintf>
  result = SCP_SendCommandWaitAnswer(post_buff, "OK", 10000, 1);
 8008146:	2301      	movs	r3, #1
 8008148:	4a0d      	ldr	r2, [pc, #52]	; (8008180 <ModemOpenTcpSocket+0x8c>)
 800814a:	4908      	ldr	r1, [pc, #32]	; (800816c <ModemOpenTcpSocket+0x78>)
 800814c:	0030      	movs	r0, r6
 800814e:	f7fe fce5 	bl	8006b1c <SCP_SendCommandWaitAnswer>
  if(result)
 8008152:	2800      	cmp	r0, #0
 8008154:	d006      	beq.n	8008164 <ModemOpenTcpSocket+0x70>
    return true;
 8008156:	2001      	movs	r0, #1
 8008158:	e002      	b.n	8008160 <ModemOpenTcpSocket+0x6c>
  else return false;
 800815a:	2000      	movs	r0, #0
 800815c:	e000      	b.n	8008160 <ModemOpenTcpSocket+0x6c>
    else return false;
 800815e:	2000      	movs	r0, #0
}
 8008160:	b002      	add	sp, #8
 8008162:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8008164:	2000      	movs	r0, #0
 8008166:	e7fb      	b.n	8008160 <ModemOpenTcpSocket+0x6c>
 8008168:	200041f4 	.word	0x200041f4
 800816c:	0800c514 	.word	0x0800c514
 8008170:	0800c550 	.word	0x0800c550
 8008174:	0800c560 	.word	0x0800c560
 8008178:	2000392c 	.word	0x2000392c
 800817c:	0800c568 	.word	0x0800c568
 8008180:	00002710 	.word	0x00002710

08008184 <uart_send_buff>:
{
 8008184:	b510      	push	{r4, lr}
	return HAL_UART_Transmit_DMA(&huart1, data_out, (uint16_t)size);
 8008186:	b28a      	uxth	r2, r1
 8008188:	0001      	movs	r1, r0
 800818a:	4802      	ldr	r0, [pc, #8]	; (8008194 <uart_send_buff+0x10>)
 800818c:	f7fc fbe4 	bl	8004958 <HAL_UART_Transmit_DMA>
}
 8008190:	bd10      	pop	{r4, pc}
 8008192:	46c0      	nop			; (mov r8, r8)
 8008194:	20004050 	.word	0x20004050

08008198 <uart_read_byte>:
{
 8008198:	b510      	push	{r4, lr}
 800819a:	0001      	movs	r1, r0
	return HAL_UART_Receive_DMA(&huart1, pData, 1);
 800819c:	2201      	movs	r2, #1
 800819e:	4802      	ldr	r0, [pc, #8]	; (80081a8 <uart_read_byte+0x10>)
 80081a0:	f7fc fc3c 	bl	8004a1c <HAL_UART_Receive_DMA>
}
 80081a4:	bd10      	pop	{r4, pc}
 80081a6:	46c0      	nop			; (mov r8, r8)
 80081a8:	20004050 	.word	0x20004050

080081ac <TelitCloudUpload>:

upload_error_t TelitCloudUpload(void)
{
 80081ac:	b570      	push	{r4, r5, r6, lr}
  if(*pwr_level < PWRONLVL)
 80081ae:	4bc4      	ldr	r3, [pc, #784]	; (80084c0 <TelitCloudUpload+0x314>)
 80081b0:	891a      	ldrh	r2, [r3, #8]
 80081b2:	4bc4      	ldr	r3, [pc, #784]	; (80084c4 <TelitCloudUpload+0x318>)
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d800      	bhi.n	80081ba <TelitCloudUpload+0xe>
 80081b8:	e087      	b.n	80082ca <TelitCloudUpload+0x11e>
    return true;
 80081ba:	2301      	movs	r3, #1
  _Bool result = false;  
  char * scp_result = NULL;
  upload_error_t return_error = UPLOAD_OK;
  
  /*Apply power for IoT LTE module*/
  if(!ModemOn(&storage.adc_data[4]))
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d100      	bne.n	80081c2 <TelitCloudUpload+0x16>
 80081c0:	e167      	b.n	8008492 <TelitCloudUpload+0x2e6>
    return_error = MODEM_POWER_ON_FAIL;
    goto error_exit;
  }
  
  /*Start Timer and USART Receive with DMA*/
  HAL_TIM_Base_Start_IT(&htim7);
 80081c2:	48c1      	ldr	r0, [pc, #772]	; (80084c8 <TelitCloudUpload+0x31c>)
 80081c4:	f7fc fa60 	bl	8004688 <HAL_TIM_Base_Start_IT>

  /*Start UART DMA Receive process everytime to avoid errors on modem start up*/
  HAL_UART_Receive_DMA(&huart1, &aRxBuffer, 1);
 80081c8:	2201      	movs	r2, #1
 80081ca:	49c0      	ldr	r1, [pc, #768]	; (80084cc <TelitCloudUpload+0x320>)
 80081cc:	48c0      	ldr	r0, [pc, #768]	; (80084d0 <TelitCloudUpload+0x324>)
 80081ce:	f7fc fc25 	bl	8004a1c <HAL_UART_Receive_DMA>
  
  /*Start AT Commands*/
  scp_result = SCP_SendCommandWaitAnswer("AT\r\n", "OK", 200, 1);
 80081d2:	2301      	movs	r3, #1
 80081d4:	22c8      	movs	r2, #200	; 0xc8
 80081d6:	49bf      	ldr	r1, [pc, #764]	; (80084d4 <TelitCloudUpload+0x328>)
 80081d8:	48bf      	ldr	r0, [pc, #764]	; (80084d8 <TelitCloudUpload+0x32c>)
 80081da:	f7fe fc9f 	bl	8006b1c <SCP_SendCommandWaitAnswer>
 80081de:	1e04      	subs	r4, r0, #0
  
  /*No response to AT, Retry*/
  if(!scp_result)
 80081e0:	d100      	bne.n	80081e4 <TelitCloudUpload+0x38>
 80081e2:	e097      	b.n	8008314 <TelitCloudUpload+0x168>
      goto error_exit;
    }
  }
  
  /*Modem is ON*/
  modem_data.lte_pwr_status = true;
 80081e4:	4bbd      	ldr	r3, [pc, #756]	; (80084dc <TelitCloudUpload+0x330>)
 80081e6:	2201      	movs	r2, #1
 80081e8:	701a      	strb	r2, [r3, #0]
  
  /*Check PIN*/
  if (scp_result) scp_result = SCP_SendCommandWaitAnswer("AT+CPIN?\r\n", "+CPIN: READY", 2000, 1);
 80081ea:	2c00      	cmp	r4, #0
 80081ec:	d007      	beq.n	80081fe <TelitCloudUpload+0x52>
 80081ee:	32f9      	adds	r2, #249	; 0xf9
 80081f0:	2301      	movs	r3, #1
 80081f2:	00d2      	lsls	r2, r2, #3
 80081f4:	49ba      	ldr	r1, [pc, #744]	; (80084e0 <TelitCloudUpload+0x334>)
 80081f6:	48bb      	ldr	r0, [pc, #748]	; (80084e4 <TelitCloudUpload+0x338>)
 80081f8:	f7fe fc90 	bl	8006b1c <SCP_SendCommandWaitAnswer>
 80081fc:	0004      	movs	r4, r0
  
  /*Echo commands turn off*/
  if (scp_result) scp_result = SCP_SendCommandWaitAnswer("ATE0\r\n", "OK", 2000, 1);
 80081fe:	2c00      	cmp	r4, #0
 8008200:	d007      	beq.n	8008212 <TelitCloudUpload+0x66>
 8008202:	22fa      	movs	r2, #250	; 0xfa
 8008204:	2301      	movs	r3, #1
 8008206:	00d2      	lsls	r2, r2, #3
 8008208:	49b2      	ldr	r1, [pc, #712]	; (80084d4 <TelitCloudUpload+0x328>)
 800820a:	48b7      	ldr	r0, [pc, #732]	; (80084e8 <TelitCloudUpload+0x33c>)
 800820c:	f7fe fc86 	bl	8006b1c <SCP_SendCommandWaitAnswer>
 8008210:	0004      	movs	r4, r0
  
  /*Sets LED Output mode*/
  if (scp_result) scp_result = SCP_SendCommandWaitAnswer("AT#TCONTLED?\r\n", "#TCONTLED: 1", 1000, 1);
 8008212:	2c00      	cmp	r4, #0
 8008214:	d007      	beq.n	8008226 <TelitCloudUpload+0x7a>
 8008216:	22fa      	movs	r2, #250	; 0xfa
 8008218:	2301      	movs	r3, #1
 800821a:	0092      	lsls	r2, r2, #2
 800821c:	49b3      	ldr	r1, [pc, #716]	; (80084ec <TelitCloudUpload+0x340>)
 800821e:	48b4      	ldr	r0, [pc, #720]	; (80084f0 <TelitCloudUpload+0x344>)
 8008220:	f7fe fc7c 	bl	8006b1c <SCP_SendCommandWaitAnswer>
 8008224:	0004      	movs	r4, r0
  if (!scp_result) scp_result = SCP_SendCommandWaitAnswer("AT#TCONTLED=1\r\n", "OK", 2000, 1);
 8008226:	2c00      	cmp	r4, #0
 8008228:	d100      	bne.n	800822c <TelitCloudUpload+0x80>
 800822a:	e086      	b.n	800833a <TelitCloudUpload+0x18e>
  
  /*Sets Error Report*/
  if (scp_result) scp_result = SCP_SendCommandWaitAnswer("AT+CMEE=2\r\n", "OK", 2000, 1);
 800822c:	2c00      	cmp	r4, #0
 800822e:	d007      	beq.n	8008240 <TelitCloudUpload+0x94>
 8008230:	22fa      	movs	r2, #250	; 0xfa
 8008232:	2301      	movs	r3, #1
 8008234:	00d2      	lsls	r2, r2, #3
 8008236:	49a7      	ldr	r1, [pc, #668]	; (80084d4 <TelitCloudUpload+0x328>)
 8008238:	48ae      	ldr	r0, [pc, #696]	; (80084f4 <TelitCloudUpload+0x348>)
 800823a:	f7fe fc6f 	bl	8006b1c <SCP_SendCommandWaitAnswer>
 800823e:	0004      	movs	r4, r0
  
  osDelay(1000);
 8008240:	20fa      	movs	r0, #250	; 0xfa
 8008242:	0080      	lsls	r0, r0, #2
 8008244:	f7fd f892 	bl	800536c <osDelay>
  
  if(scp_result)
 8008248:	2c00      	cmp	r4, #0
 800824a:	d029      	beq.n	80082a0 <TelitCloudUpload+0xf4>
  {
    /*Get IMEI*/
    scp_result = NULL;
    scp_result = GetIMEI();
 800824c:	f7ff faf0 	bl	8007830 <GetIMEI>
 8008250:	1e04      	subs	r4, r0, #0
    if(scp_result)
 8008252:	d009      	beq.n	8008268 <TelitCloudUpload+0xbc>
    {
      memset(modem_data.imei, 0x00, 16);
 8008254:	4da8      	ldr	r5, [pc, #672]	; (80084f8 <TelitCloudUpload+0x34c>)
 8008256:	2210      	movs	r2, #16
 8008258:	2100      	movs	r1, #0
 800825a:	0028      	movs	r0, r5
 800825c:	f000 fd11 	bl	8008c82 <memset>
      strcpy(modem_data.imei, scp_result);
 8008260:	0021      	movs	r1, r4
 8008262:	0028      	movs	r0, r5
 8008264:	f000 fd52 	bl	8008d0c <strcpy>
    }
    
    /*Get module type*/
    scp_result = NULL;
    scp_result = GetID();
 8008268:	f7ff fb24 	bl	80078b4 <GetID>
 800826c:	1e04      	subs	r4, r0, #0
    if(scp_result)
 800826e:	d009      	beq.n	8008284 <TelitCloudUpload+0xd8>
    {
      memset(modem_data.device_name, 0x00, 21);
 8008270:	4da2      	ldr	r5, [pc, #648]	; (80084fc <TelitCloudUpload+0x350>)
 8008272:	2215      	movs	r2, #21
 8008274:	2100      	movs	r1, #0
 8008276:	0028      	movs	r0, r5
 8008278:	f000 fd03 	bl	8008c82 <memset>
      strcpy(modem_data.device_name, scp_result);
 800827c:	0021      	movs	r1, r4
 800827e:	0028      	movs	r0, r5
 8008280:	f000 fd44 	bl	8008d0c <strcpy>
    }
    
    /*Get firmware version*/
    scp_result = NULL;
    scp_result = GetVersion();
 8008284:	f7ff fb44 	bl	8007910 <GetVersion>
 8008288:	1e04      	subs	r4, r0, #0
    if(scp_result)
 800828a:	d009      	beq.n	80082a0 <TelitCloudUpload+0xf4>
    {
      memset(modem_data.fw_version, 0x00, 16);
 800828c:	4d9c      	ldr	r5, [pc, #624]	; (8008500 <TelitCloudUpload+0x354>)
 800828e:	2210      	movs	r2, #16
 8008290:	2100      	movs	r1, #0
 8008292:	0028      	movs	r0, r5
 8008294:	f000 fcf5 	bl	8008c82 <memset>
      strcpy(modem_data.fw_version, scp_result);
 8008298:	0021      	movs	r1, r4
 800829a:	0028      	movs	r0, r5
 800829c:	f000 fd36 	bl	8008d0c <strcpy>
    }
  }
  
  if(!scp_result)
 80082a0:	2c00      	cmp	r4, #0
 80082a2:	d100      	bne.n	80082a6 <TelitCloudUpload+0xfa>
 80082a4:	e106      	b.n	80084b4 <TelitCloudUpload+0x308>
    return_error = MODEM_CMD_NO_RESPONSE;
    goto error_exit;
  }
  
  /*Set APN*/
  if (scp_result) scp_result = SCP_SendCommandWaitAnswer("AT*MCGDEFCONT?\r\n", "lpwa.telia.iot", 1000, 1);
 80082a6:	22fa      	movs	r2, #250	; 0xfa
 80082a8:	2301      	movs	r3, #1
 80082aa:	0092      	lsls	r2, r2, #2
 80082ac:	4995      	ldr	r1, [pc, #596]	; (8008504 <TelitCloudUpload+0x358>)
 80082ae:	4896      	ldr	r0, [pc, #600]	; (8008508 <TelitCloudUpload+0x35c>)
 80082b0:	f7fe fc34 	bl	8006b1c <SCP_SendCommandWaitAnswer>
  if (!scp_result) scp_result = SCP_SendCommandWaitAnswer("AT*MCGDEFCONT=,\"IP\",\"lpwa.telia.iot\"\r\n", "OK", 2000, 1);
 80082b4:	2800      	cmp	r0, #0
 80082b6:	d049      	beq.n	800834c <TelitCloudUpload+0x1a0>
  
  if (scp_result)
 80082b8:	2800      	cmp	r0, #0
 80082ba:	d100      	bne.n	80082be <TelitCloudUpload+0x112>
 80082bc:	e0fc      	b.n	80084b8 <TelitCloudUpload+0x30c>
  {
    /*Check if we are connected to LTE network*/
    if(!WaitForNetwork())
 80082be:	f7ff fe13 	bl	8007ee8 <WaitForNetwork>
 80082c2:	1e04      	subs	r4, r0, #0
 80082c4:	d14a      	bne.n	800835c <TelitCloudUpload+0x1b0>
    {
      return_error = MODEM_NO_OPERATOR_PRESENT;
 80082c6:	2406      	movs	r4, #6
 80082c8:	e0e4      	b.n	8008494 <TelitCloudUpload+0x2e8>
	HAL_GPIO_WritePin(LDO_OFF_GPIO_Port, LDO_OFF_Pin, GPIO_PIN_RESET);
 80082ca:	24a0      	movs	r4, #160	; 0xa0
 80082cc:	05e4      	lsls	r4, r4, #23
 80082ce:	2200      	movs	r2, #0
 80082d0:	2140      	movs	r1, #64	; 0x40
 80082d2:	0020      	movs	r0, r4
 80082d4:	f7fb fc03 	bl	8003ade <HAL_GPIO_WritePin>
	osDelay(3000);
 80082d8:	4d8c      	ldr	r5, [pc, #560]	; (800850c <TelitCloudUpload+0x360>)
 80082da:	0028      	movs	r0, r5
 80082dc:	f7fd f846 	bl	800536c <osDelay>
    HAL_GPIO_WritePin(ON_OFF_GPIO_Port, ON_OFF_Pin, GPIO_PIN_SET);
 80082e0:	2201      	movs	r2, #1
 80082e2:	2120      	movs	r1, #32
 80082e4:	0020      	movs	r0, r4
 80082e6:	f7fb fbfa 	bl	8003ade <HAL_GPIO_WritePin>
    osDelay(3000);
 80082ea:	0028      	movs	r0, r5
 80082ec:	f7fd f83e 	bl	800536c <osDelay>
    HAL_GPIO_WritePin(ON_OFF_GPIO_Port, ON_OFF_Pin, GPIO_PIN_RESET);
 80082f0:	2200      	movs	r2, #0
 80082f2:	2120      	movs	r1, #32
 80082f4:	0020      	movs	r0, r4
 80082f6:	f7fb fbf2 	bl	8003ade <HAL_GPIO_WritePin>
    if(*pwr_level >= PWRONLVL)
 80082fa:	4b71      	ldr	r3, [pc, #452]	; (80084c0 <TelitCloudUpload+0x314>)
 80082fc:	891a      	ldrh	r2, [r3, #8]
 80082fe:	4b71      	ldr	r3, [pc, #452]	; (80084c4 <TelitCloudUpload+0x318>)
 8008300:	429a      	cmp	r2, r3
 8008302:	d801      	bhi.n	8008308 <TelitCloudUpload+0x15c>
      return false;
 8008304:	2300      	movs	r3, #0
 8008306:	e759      	b.n	80081bc <TelitCloudUpload+0x10>
      osDelay(1000);
 8008308:	20fa      	movs	r0, #250	; 0xfa
 800830a:	0080      	lsls	r0, r0, #2
 800830c:	f7fd f82e 	bl	800536c <osDelay>
      return true;
 8008310:	2301      	movs	r3, #1
 8008312:	e753      	b.n	80081bc <TelitCloudUpload+0x10>
    osDelay(5000);
 8008314:	487e      	ldr	r0, [pc, #504]	; (8008510 <TelitCloudUpload+0x364>)
 8008316:	f7fd f829 	bl	800536c <osDelay>
    HAL_UART_Receive_DMA(&huart1, &aRxBuffer, 1);
 800831a:	2201      	movs	r2, #1
 800831c:	496b      	ldr	r1, [pc, #428]	; (80084cc <TelitCloudUpload+0x320>)
 800831e:	486c      	ldr	r0, [pc, #432]	; (80084d0 <TelitCloudUpload+0x324>)
 8008320:	f7fc fb7c 	bl	8004a1c <HAL_UART_Receive_DMA>
    scp_result = SCP_SendCommandWaitAnswer("AT\r\n", "OK", 200, 1);
 8008324:	2301      	movs	r3, #1
 8008326:	22c8      	movs	r2, #200	; 0xc8
 8008328:	496a      	ldr	r1, [pc, #424]	; (80084d4 <TelitCloudUpload+0x328>)
 800832a:	486b      	ldr	r0, [pc, #428]	; (80084d8 <TelitCloudUpload+0x32c>)
 800832c:	f7fe fbf6 	bl	8006b1c <SCP_SendCommandWaitAnswer>
 8008330:	1e04      	subs	r4, r0, #0
    if(!scp_result)
 8008332:	d000      	beq.n	8008336 <TelitCloudUpload+0x18a>
 8008334:	e756      	b.n	80081e4 <TelitCloudUpload+0x38>
      return_error = MODEM_CMD_NO_RESPONSE;
 8008336:	2403      	movs	r4, #3
 8008338:	e0ac      	b.n	8008494 <TelitCloudUpload+0x2e8>
  if (!scp_result) scp_result = SCP_SendCommandWaitAnswer("AT#TCONTLED=1\r\n", "OK", 2000, 1);
 800833a:	22fa      	movs	r2, #250	; 0xfa
 800833c:	2301      	movs	r3, #1
 800833e:	00d2      	lsls	r2, r2, #3
 8008340:	4964      	ldr	r1, [pc, #400]	; (80084d4 <TelitCloudUpload+0x328>)
 8008342:	4874      	ldr	r0, [pc, #464]	; (8008514 <TelitCloudUpload+0x368>)
 8008344:	f7fe fbea 	bl	8006b1c <SCP_SendCommandWaitAnswer>
 8008348:	0004      	movs	r4, r0
 800834a:	e76f      	b.n	800822c <TelitCloudUpload+0x80>
  if (!scp_result) scp_result = SCP_SendCommandWaitAnswer("AT*MCGDEFCONT=,\"IP\",\"lpwa.telia.iot\"\r\n", "OK", 2000, 1);
 800834c:	22fa      	movs	r2, #250	; 0xfa
 800834e:	2301      	movs	r3, #1
 8008350:	00d2      	lsls	r2, r2, #3
 8008352:	4960      	ldr	r1, [pc, #384]	; (80084d4 <TelitCloudUpload+0x328>)
 8008354:	4870      	ldr	r0, [pc, #448]	; (8008518 <TelitCloudUpload+0x36c>)
 8008356:	f7fe fbe1 	bl	8006b1c <SCP_SendCommandWaitAnswer>
 800835a:	e7ad      	b.n	80082b8 <TelitCloudUpload+0x10c>
    return_error = MODEM_CMD_NO_RESPONSE;
    goto error_exit;
  }
  
  /*Store signal quality*/
  modem_data.signal = SignalQuality();
 800835c:	f7ff fd7c 	bl	8007e58 <SignalQuality>
 8008360:	4d5e      	ldr	r5, [pc, #376]	; (80084dc <TelitCloudUpload+0x330>)
 8008362:	6128      	str	r0, [r5, #16]
  
  /*Network status check*/
  modem_data.network_status =  NetworkRegistrationCheck();
 8008364:	f7ff fd9c 	bl	8007ea0 <NetworkRegistrationCheck>
 8008368:	6068      	str	r0, [r5, #4]
  
  /*registered to home network or registered as roaming is acceptable*/
  if((modem_data.network_status == 1) || (modem_data.network_status == 5))
 800836a:	2801      	cmp	r0, #1
 800836c:	d008      	beq.n	8008380 <TelitCloudUpload+0x1d4>
 800836e:	2805      	cmp	r0, #5
 8008370:	d006      	beq.n	8008380 <TelitCloudUpload+0x1d4>
      }
    } 
  }
  else
  {
    modem_data.lte_status = 0;
 8008372:	2300      	movs	r3, #0
 8008374:	4a59      	ldr	r2, [pc, #356]	; (80084dc <TelitCloudUpload+0x330>)
 8008376:	6093      	str	r3, [r2, #8]
    authenticated = false;
 8008378:	4a68      	ldr	r2, [pc, #416]	; (800851c <TelitCloudUpload+0x370>)
 800837a:	7013      	strb	r3, [r2, #0]
    return_error = CLOUD_AUTH_ERROR;
 800837c:	2404      	movs	r4, #4
    goto error_exit;
 800837e:	e089      	b.n	8008494 <TelitCloudUpload+0x2e8>
    scp_result = GetOperator();
 8008380:	f7ff fdd2 	bl	8007f28 <GetOperator>
 8008384:	1e06      	subs	r6, r0, #0
    if(scp_result)
 8008386:	d100      	bne.n	800838a <TelitCloudUpload+0x1de>
 8008388:	e098      	b.n	80084bc <TelitCloudUpload+0x310>
      memset(modem_data.operator, 0x00, 17);
 800838a:	4d65      	ldr	r5, [pc, #404]	; (8008520 <TelitCloudUpload+0x374>)
 800838c:	2211      	movs	r2, #17
 800838e:	2100      	movs	r1, #0
 8008390:	0028      	movs	r0, r5
 8008392:	f000 fc76 	bl	8008c82 <memset>
      strcpy(modem_data.operator, scp_result);
 8008396:	0031      	movs	r1, r6
 8008398:	0028      	movs	r0, r5
 800839a:	f000 fcb7 	bl	8008d0c <strcpy>
    modem_data.lte_status = LTE_StatusCheck();
 800839e:	f7ff fe01 	bl	8007fa4 <LTE_StatusCheck>
 80083a2:	3d14      	subs	r5, #20
 80083a4:	60a8      	str	r0, [r5, #8]
    if(!modem_data.lte_status)
 80083a6:	2800      	cmp	r0, #0
 80083a8:	d01f      	beq.n	80083ea <TelitCloudUpload+0x23e>
  }
  
  /*Start uploading*/
  
  /*Authenticate only once per session*/
  if(!authenticated)
 80083aa:	4b5c      	ldr	r3, [pc, #368]	; (800851c <TelitCloudUpload+0x370>)
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d13c      	bne.n	800842c <TelitCloudUpload+0x280>
  {
    /*Authenticate */
  Authentication:
    result = ModemOpenTcpSocket("54.93.92.219", 80, &modem_data.socket_id);
 80083b2:	4a5c      	ldr	r2, [pc, #368]	; (8008524 <TelitCloudUpload+0x378>)
 80083b4:	2150      	movs	r1, #80	; 0x50
 80083b6:	485c      	ldr	r0, [pc, #368]	; (8008528 <TelitCloudUpload+0x37c>)
 80083b8:	f7ff fe9c 	bl	80080f4 <ModemOpenTcpSocket>
 80083bc:	1e05      	subs	r5, r0, #0
    if(result)
 80083be:	d120      	bne.n	8008402 <TelitCloudUpload+0x256>
    {
      authenticated = TelitPortalAuthenticate();
    }
    /*Post*/
    if(authenticated)
 80083c0:	4b56      	ldr	r3, [pc, #344]	; (800851c <TelitCloudUpload+0x370>)
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d121      	bne.n	800840c <TelitCloudUpload+0x260>
      if (result)
      {
        authenticated = TelitPortalPostData();
      }
    }
    if(!result)
 80083c8:	2d00      	cmp	r5, #0
 80083ca:	d02b      	beq.n	8008424 <TelitCloudUpload+0x278>
  /*Turn off LED1*/

  /*Turn off Modem*/

  /*Stop Timer*/
  HAL_TIM_Base_Stop_IT(&htim7);
 80083cc:	483e      	ldr	r0, [pc, #248]	; (80084c8 <TelitCloudUpload+0x31c>)
 80083ce:	f7fc f96d 	bl	80046ac <HAL_TIM_Base_Stop_IT>
  if(*pwr_level >= PWRONLVL)
 80083d2:	4b3b      	ldr	r3, [pc, #236]	; (80084c0 <TelitCloudUpload+0x314>)
 80083d4:	891a      	ldrh	r2, [r3, #8]
 80083d6:	4b3b      	ldr	r3, [pc, #236]	; (80084c4 <TelitCloudUpload+0x318>)
 80083d8:	429a      	cmp	r2, r3
 80083da:	d837      	bhi.n	800844c <TelitCloudUpload+0x2a0>

  if(!ModemOff(&storage.adc_data[4]))
 80083dc:	2c00      	cmp	r4, #0
 80083de:	d053      	beq.n	8008488 <TelitCloudUpload+0x2dc>
  {
    return_error = MODEM_POWER_OFF_FAIL;
    modem_data.lte_pwr_status = false;
    return return_error;
  }
  modem_data.lte_pwr_status = false;
 80083e0:	4b3e      	ldr	r3, [pc, #248]	; (80084dc <TelitCloudUpload+0x330>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	701a      	strb	r2, [r3, #0]
  return return_error;
 80083e6:	2400      	movs	r4, #0
 80083e8:	e062      	b.n	80084b0 <TelitCloudUpload+0x304>
      modem_data.lte_status = LTE_Connect(modem_data.ip_address);
 80083ea:	4d50      	ldr	r5, [pc, #320]	; (800852c <TelitCloudUpload+0x380>)
 80083ec:	0028      	movs	r0, r5
 80083ee:	f7ff fdfd 	bl	8007fec <LTE_Connect>
 80083f2:	3d35      	subs	r5, #53	; 0x35
 80083f4:	60a8      	str	r0, [r5, #8]
      if(!modem_data.lte_status)
 80083f6:	2800      	cmp	r0, #0
 80083f8:	d1d7      	bne.n	80083aa <TelitCloudUpload+0x1fe>
        LTE_Disconnect();
 80083fa:	f7ff fa07 	bl	800780c <LTE_Disconnect>
        return_error = MODEM_NO_DATA_SERVICE;
 80083fe:	2408      	movs	r4, #8
        goto error_exit;
 8008400:	e048      	b.n	8008494 <TelitCloudUpload+0x2e8>
      authenticated = TelitPortalAuthenticate();
 8008402:	f7ff fb6d 	bl	8007ae0 <TelitPortalAuthenticate>
 8008406:	4b45      	ldr	r3, [pc, #276]	; (800851c <TelitCloudUpload+0x370>)
 8008408:	7018      	strb	r0, [r3, #0]
 800840a:	e7d9      	b.n	80083c0 <TelitCloudUpload+0x214>
      result = ModemOpenTcpSocket("54.93.92.219", 80, &modem_data.socket_id);
 800840c:	4a45      	ldr	r2, [pc, #276]	; (8008524 <TelitCloudUpload+0x378>)
 800840e:	2150      	movs	r1, #80	; 0x50
 8008410:	4845      	ldr	r0, [pc, #276]	; (8008528 <TelitCloudUpload+0x37c>)
 8008412:	f7ff fe6f 	bl	80080f4 <ModemOpenTcpSocket>
 8008416:	1e05      	subs	r5, r0, #0
      if (result)
 8008418:	d0d6      	beq.n	80083c8 <TelitCloudUpload+0x21c>
        authenticated = TelitPortalPostData();
 800841a:	f7ff fbe5 	bl	8007be8 <TelitPortalPostData>
 800841e:	4b3f      	ldr	r3, [pc, #252]	; (800851c <TelitCloudUpload+0x370>)
 8008420:	7018      	strb	r0, [r3, #0]
 8008422:	e7d1      	b.n	80083c8 <TelitCloudUpload+0x21c>
      LTE_Disconnect();
 8008424:	f7ff f9f2 	bl	800780c <LTE_Disconnect>
  upload_error_t return_error = UPLOAD_OK;
 8008428:	2400      	movs	r4, #0
      goto error_exit;
 800842a:	e033      	b.n	8008494 <TelitCloudUpload+0x2e8>
    result = ModemOpenTcpSocket("54.93.92.219", 80, &modem_data.socket_id);
 800842c:	4a3d      	ldr	r2, [pc, #244]	; (8008524 <TelitCloudUpload+0x378>)
 800842e:	2150      	movs	r1, #80	; 0x50
 8008430:	483d      	ldr	r0, [pc, #244]	; (8008528 <TelitCloudUpload+0x37c>)
 8008432:	f7ff fe5f 	bl	80080f4 <ModemOpenTcpSocket>
    if (result)
 8008436:	2800      	cmp	r0, #0
 8008438:	d103      	bne.n	8008442 <TelitCloudUpload+0x296>
      authenticated = false;
 800843a:	4b38      	ldr	r3, [pc, #224]	; (800851c <TelitCloudUpload+0x370>)
 800843c:	2200      	movs	r2, #0
 800843e:	701a      	strb	r2, [r3, #0]
      goto Authentication;
 8008440:	e7b7      	b.n	80083b2 <TelitCloudUpload+0x206>
      authenticated = TelitPortalPostData();
 8008442:	f7ff fbd1 	bl	8007be8 <TelitPortalPostData>
 8008446:	4b35      	ldr	r3, [pc, #212]	; (800851c <TelitCloudUpload+0x370>)
 8008448:	7018      	strb	r0, [r3, #0]
 800844a:	e7bf      	b.n	80083cc <TelitCloudUpload+0x220>
    HAL_GPIO_WritePin(ON_OFF_GPIO_Port, ON_OFF_Pin, GPIO_PIN_SET);
 800844c:	25a0      	movs	r5, #160	; 0xa0
 800844e:	05ed      	lsls	r5, r5, #23
 8008450:	2201      	movs	r2, #1
 8008452:	2120      	movs	r1, #32
 8008454:	0028      	movs	r0, r5
 8008456:	f7fb fb42 	bl	8003ade <HAL_GPIO_WritePin>
    osDelay(4500);
 800845a:	4835      	ldr	r0, [pc, #212]	; (8008530 <TelitCloudUpload+0x384>)
 800845c:	f7fc ff86 	bl	800536c <osDelay>
    HAL_GPIO_WritePin(ON_OFF_GPIO_Port, ON_OFF_Pin, GPIO_PIN_RESET);
 8008460:	2200      	movs	r2, #0
 8008462:	2120      	movs	r1, #32
 8008464:	0028      	movs	r0, r5
 8008466:	f7fb fb3a 	bl	8003ade <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LDO_OFF_GPIO_Port, LDO_OFF_Pin, GPIO_PIN_SET);
 800846a:	2201      	movs	r2, #1
 800846c:	2140      	movs	r1, #64	; 0x40
 800846e:	0028      	movs	r0, r5
 8008470:	f7fb fb35 	bl	8003ade <HAL_GPIO_WritePin>
    osDelay(3000);
 8008474:	4825      	ldr	r0, [pc, #148]	; (800850c <TelitCloudUpload+0x360>)
 8008476:	f7fc ff79 	bl	800536c <osDelay>
    if(*pwr_level < PWRONLVL)
 800847a:	4b11      	ldr	r3, [pc, #68]	; (80084c0 <TelitCloudUpload+0x314>)
 800847c:	891a      	ldrh	r2, [r3, #8]
 800847e:	4b11      	ldr	r3, [pc, #68]	; (80084c4 <TelitCloudUpload+0x318>)
 8008480:	429a      	cmp	r2, r3
 8008482:	d9ab      	bls.n	80083dc <TelitCloudUpload+0x230>
      return false;
 8008484:	2400      	movs	r4, #0
 8008486:	e7a9      	b.n	80083dc <TelitCloudUpload+0x230>
    modem_data.lte_pwr_status = false;
 8008488:	4b14      	ldr	r3, [pc, #80]	; (80084dc <TelitCloudUpload+0x330>)
 800848a:	2200      	movs	r2, #0
 800848c:	701a      	strb	r2, [r3, #0]
    return return_error;
 800848e:	3402      	adds	r4, #2
 8008490:	e00e      	b.n	80084b0 <TelitCloudUpload+0x304>
    return_error = MODEM_POWER_ON_FAIL;
 8008492:	2401      	movs	r4, #1
error_exit:
  /*Turn off LED1*/

  /*Turn off Modem*/
/*Stop Timer*/
HAL_TIM_Base_Stop_IT(&htim7);
 8008494:	480c      	ldr	r0, [pc, #48]	; (80084c8 <TelitCloudUpload+0x31c>)
 8008496:	f7fc f909 	bl	80046ac <HAL_TIM_Base_Stop_IT>
  if(*pwr_level >= PWRONLVL)
 800849a:	4b09      	ldr	r3, [pc, #36]	; (80084c0 <TelitCloudUpload+0x314>)
 800849c:	891a      	ldrh	r2, [r3, #8]
 800849e:	4b09      	ldr	r3, [pc, #36]	; (80084c4 <TelitCloudUpload+0x318>)
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d847      	bhi.n	8008534 <TelitCloudUpload+0x388>
    return true;
 80084a4:	2301      	movs	r3, #1
  if(!ModemOff(&storage.adc_data[4]))
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d064      	beq.n	8008574 <TelitCloudUpload+0x3c8>
  {
    return_error = MODEM_POWER_OFF_FAIL;
    modem_data.lte_pwr_status = false;
    return return_error;
  }
  modem_data.lte_pwr_status = false;
 80084aa:	4b0c      	ldr	r3, [pc, #48]	; (80084dc <TelitCloudUpload+0x330>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	701a      	strb	r2, [r3, #0]
  return return_error;
}
 80084b0:	0020      	movs	r0, r4
 80084b2:	bd70      	pop	{r4, r5, r6, pc}
    return_error = MODEM_CMD_NO_RESPONSE;
 80084b4:	2403      	movs	r4, #3
 80084b6:	e7ed      	b.n	8008494 <TelitCloudUpload+0x2e8>
    return_error = MODEM_CMD_NO_RESPONSE;
 80084b8:	2403      	movs	r4, #3
 80084ba:	e7eb      	b.n	8008494 <TelitCloudUpload+0x2e8>
      return_error = MODEM_NO_OPERATOR_PRESENT;
 80084bc:	2406      	movs	r4, #6
 80084be:	e7e9      	b.n	8008494 <TelitCloudUpload+0x2e8>
 80084c0:	20004690 	.word	0x20004690
 80084c4:	00000833 	.word	0x00000833
 80084c8:	20004178 	.word	0x20004178
 80084cc:	200040d0 	.word	0x200040d0
 80084d0:	20004050 	.word	0x20004050
 80084d4:	0800c514 	.word	0x0800c514
 80084d8:	0800c5d8 	.word	0x0800c5d8
 80084dc:	200045f4 	.word	0x200045f4
 80084e0:	0800c5e0 	.word	0x0800c5e0
 80084e4:	0800c5f0 	.word	0x0800c5f0
 80084e8:	0800c5fc 	.word	0x0800c5fc
 80084ec:	0800c604 	.word	0x0800c604
 80084f0:	0800c614 	.word	0x0800c614
 80084f4:	0800c634 	.word	0x0800c634
 80084f8:	20004619 	.word	0x20004619
 80084fc:	20004639 	.word	0x20004639
 8008500:	2000464e 	.word	0x2000464e
 8008504:	0800c640 	.word	0x0800c640
 8008508:	0800c650 	.word	0x0800c650
 800850c:	00000bb8 	.word	0x00000bb8
 8008510:	00001388 	.word	0x00001388
 8008514:	0800c624 	.word	0x0800c624
 8008518:	0800c664 	.word	0x0800c664
 800851c:	20002470 	.word	0x20002470
 8008520:	20004608 	.word	0x20004608
 8008524:	20004600 	.word	0x20004600
 8008528:	0800c68c 	.word	0x0800c68c
 800852c:	20004629 	.word	0x20004629
 8008530:	00001194 	.word	0x00001194
    HAL_GPIO_WritePin(ON_OFF_GPIO_Port, ON_OFF_Pin, GPIO_PIN_SET);
 8008534:	25a0      	movs	r5, #160	; 0xa0
 8008536:	05ed      	lsls	r5, r5, #23
 8008538:	2201      	movs	r2, #1
 800853a:	2120      	movs	r1, #32
 800853c:	0028      	movs	r0, r5
 800853e:	f7fb face 	bl	8003ade <HAL_GPIO_WritePin>
    osDelay(4500);
 8008542:	480f      	ldr	r0, [pc, #60]	; (8008580 <TelitCloudUpload+0x3d4>)
 8008544:	f7fc ff12 	bl	800536c <osDelay>
    HAL_GPIO_WritePin(ON_OFF_GPIO_Port, ON_OFF_Pin, GPIO_PIN_RESET);
 8008548:	2200      	movs	r2, #0
 800854a:	2120      	movs	r1, #32
 800854c:	0028      	movs	r0, r5
 800854e:	f7fb fac6 	bl	8003ade <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LDO_OFF_GPIO_Port, LDO_OFF_Pin, GPIO_PIN_SET);
 8008552:	2201      	movs	r2, #1
 8008554:	2140      	movs	r1, #64	; 0x40
 8008556:	0028      	movs	r0, r5
 8008558:	f7fb fac1 	bl	8003ade <HAL_GPIO_WritePin>
    osDelay(3000);
 800855c:	4809      	ldr	r0, [pc, #36]	; (8008584 <TelitCloudUpload+0x3d8>)
 800855e:	f7fc ff05 	bl	800536c <osDelay>
    if(*pwr_level < PWRONLVL)
 8008562:	4b09      	ldr	r3, [pc, #36]	; (8008588 <TelitCloudUpload+0x3dc>)
 8008564:	891a      	ldrh	r2, [r3, #8]
 8008566:	4b09      	ldr	r3, [pc, #36]	; (800858c <TelitCloudUpload+0x3e0>)
 8008568:	429a      	cmp	r2, r3
 800856a:	d901      	bls.n	8008570 <TelitCloudUpload+0x3c4>
      return false;
 800856c:	2300      	movs	r3, #0
 800856e:	e79a      	b.n	80084a6 <TelitCloudUpload+0x2fa>
      return true;
 8008570:	2301      	movs	r3, #1
 8008572:	e798      	b.n	80084a6 <TelitCloudUpload+0x2fa>
    modem_data.lte_pwr_status = false;
 8008574:	4b06      	ldr	r3, [pc, #24]	; (8008590 <TelitCloudUpload+0x3e4>)
 8008576:	2200      	movs	r2, #0
 8008578:	701a      	strb	r2, [r3, #0]
    return return_error;
 800857a:	2402      	movs	r4, #2
 800857c:	e798      	b.n	80084b0 <TelitCloudUpload+0x304>
 800857e:	46c0      	nop			; (mov r8, r8)
 8008580:	00001194 	.word	0x00001194
 8008584:	00000bb8 	.word	0x00000bb8
 8008588:	20004690 	.word	0x20004690
 800858c:	00000833 	.word	0x00000833
 8008590:	200045f4 	.word	0x200045f4

08008594 <MonitorTask>:
extern EEPROMStorageTypDef eeprom_info;
osThreadId MonitorTaskHandle;
DevStorageTypDef storage;

void MonitorTask(void const * argument)
{
 8008594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008596:	b087      	sub	sp, #28
  static uint32_t mon_dayticks = 0;
  static uint32_t daytime_counter= 0;
  static uint32_t nighttime_counter= 0;

  /*Start ADC DMA Process*/
  if(HAL_ADC_Start_DMA(&hadc, (uint32_t *)storage.adc_data, 5) != HAL_OK)
 8008598:	2205      	movs	r2, #5
 800859a:	4972      	ldr	r1, [pc, #456]	; (8008764 <MonitorTask+0x1d0>)
 800859c:	4872      	ldr	r0, [pc, #456]	; (8008768 <MonitorTask+0x1d4>)
 800859e:	f7fa fd19 	bl	8002fd4 <HAL_ADC_Start_DMA>
 80085a2:	2800      	cmp	r0, #0
 80085a4:	d001      	beq.n	80085aa <MonitorTask+0x16>
  {
	  Error_Handler();
 80085a6:	f7fe ff51 	bl	800744c <Error_Handler>
  }

  /*Start timer*/
  HAL_TIM_Base_Start_IT(&htim21);
 80085aa:	4870      	ldr	r0, [pc, #448]	; (800876c <MonitorTask+0x1d8>)
 80085ac:	f7fc f86c 	bl	8004688 <HAL_TIM_Base_Start_IT>
 80085b0:	e014      	b.n	80085dc <MonitorTask+0x48>
		  storage.vard_input_mv = (uint32_t)(local_adc_data[4] * VARD_CONST);

		  /*Convert&Store Input Current*/
		  storage.cinput_ma = (int32_t)((local_adc_data[0] - COFFSET_CONST) * CSENSE_CONST);
		  if(storage.cinput_ma < 0)
		  {storage.cinput_ma = 0;}
 80085b2:	2200      	movs	r2, #0
 80085b4:	61a2      	str	r2, [r4, #24]
 80085b6:	e04f      	b.n	8008658 <MonitorTask+0xc4>

		  /*Convert&Store Output Current*/
		  storage.coutput_ma = (int32_t)((local_adc_data[1] -COFFSET_CONST) * CSENSE_CONST);
		  if(storage.coutput_ma < 0)
		  {storage.coutput_ma = 0;}
 80085b8:	2200      	movs	r2, #0
 80085ba:	61da      	str	r2, [r3, #28]
 80085bc:	e05b      	b.n	8008676 <MonitorTask+0xe2>
		  if((int)(storage.vinput_mv+eeprom_info.vin_hys_mv) > eeprom_info.vin_limit_mv)
		  {
			  daytime_counter++;
			  nighttime_counter= 0;
		  }
		  else if((int)(storage.vinput_mv-eeprom_info.vin_hys_mv) < eeprom_info.vin_limit_mv)
 80085be:	1ab6      	subs	r6, r6, r2
 80085c0:	42b3      	cmp	r3, r6
 80085c2:	dc00      	bgt.n	80085c6 <MonitorTask+0x32>
 80085c4:	e09f      	b.n	8008706 <MonitorTask+0x172>
		  {
			  daytime_counter= 0;
 80085c6:	4b6a      	ldr	r3, [pc, #424]	; (8008770 <MonitorTask+0x1dc>)
 80085c8:	2200      	movs	r2, #0
 80085ca:	601a      	str	r2, [r3, #0]
			  nighttime_counter++;
 80085cc:	4a69      	ldr	r2, [pc, #420]	; (8008774 <MonitorTask+0x1e0>)
 80085ce:	6813      	ldr	r3, [r2, #0]
 80085d0:	3301      	adds	r3, #1
 80085d2:	6013      	str	r3, [r2, #0]
 80085d4:	e097      	b.n	8008706 <MonitorTask+0x172>
			  if(storage.daylength_s > HOURS_24)
			  {storage.daylength_s = HOURS_24;}
		  }
		  else
		  {
			  mon_dayticks = 0;
 80085d6:	4b68      	ldr	r3, [pc, #416]	; (8008778 <MonitorTask+0x1e4>)
 80085d8:	2200      	movs	r2, #0
 80085da:	601a      	str	r2, [r3, #0]
	  evt = osSignalWait (0x00000001, osWaitForever);
 80085dc:	2201      	movs	r2, #1
 80085de:	4252      	negs	r2, r2
 80085e0:	2101      	movs	r1, #1
 80085e2:	a803      	add	r0, sp, #12
 80085e4:	f7fc fefa 	bl	80053dc <osSignalWait>
	  if (evt.status == osEventSignal)
 80085e8:	9b03      	ldr	r3, [sp, #12]
 80085ea:	2b08      	cmp	r3, #8
 80085ec:	d1f6      	bne.n	80085dc <MonitorTask+0x48>
		  memcpy(local_adc_data, storage.adc_data, sizeof(storage.adc_data));
 80085ee:	466d      	mov	r5, sp
 80085f0:	4c5c      	ldr	r4, [pc, #368]	; (8008764 <MonitorTask+0x1d0>)
 80085f2:	002a      	movs	r2, r5
 80085f4:	0023      	movs	r3, r4
 80085f6:	cb03      	ldmia	r3!, {r0, r1}
 80085f8:	c203      	stmia	r2!, {r0, r1}
 80085fa:	881b      	ldrh	r3, [r3, #0]
 80085fc:	1c1f      	adds	r7, r3, #0
 80085fe:	8013      	strh	r3, [r2, #0]
		  storage.vinput_mv = (uint32_t)(local_adc_data[2] * VINPUT_CONST);
 8008600:	88a8      	ldrh	r0, [r5, #4]
 8008602:	f7fa fa63 	bl	8002acc <__aeabi_i2d>
 8008606:	4a5d      	ldr	r2, [pc, #372]	; (800877c <MonitorTask+0x1e8>)
 8008608:	4b5d      	ldr	r3, [pc, #372]	; (8008780 <MonitorTask+0x1ec>)
 800860a:	f7f9 fc53 	bl	8001eb4 <__aeabi_dmul>
 800860e:	f7f7 ffbd 	bl	800058c <__aeabi_d2uiz>
 8008612:	0006      	movs	r6, r0
 8008614:	60e0      	str	r0, [r4, #12]
		  storage.vbatt_mv = (uint32_t)(local_adc_data[3] * VBATT_CONST);
 8008616:	88e8      	ldrh	r0, [r5, #6]
 8008618:	f7fa fa58 	bl	8002acc <__aeabi_i2d>
 800861c:	2200      	movs	r2, #0
 800861e:	4b59      	ldr	r3, [pc, #356]	; (8008784 <MonitorTask+0x1f0>)
 8008620:	f7f9 fc48 	bl	8001eb4 <__aeabi_dmul>
 8008624:	f7f7 ffb2 	bl	800058c <__aeabi_d2uiz>
 8008628:	6120      	str	r0, [r4, #16]
		  storage.vard_input_mv = (uint32_t)(local_adc_data[4] * VARD_CONST);
 800862a:	b2b8      	uxth	r0, r7
 800862c:	f7fa fa4e 	bl	8002acc <__aeabi_i2d>
 8008630:	4a55      	ldr	r2, [pc, #340]	; (8008788 <MonitorTask+0x1f4>)
 8008632:	4b56      	ldr	r3, [pc, #344]	; (800878c <MonitorTask+0x1f8>)
 8008634:	f7f9 fc3e 	bl	8001eb4 <__aeabi_dmul>
 8008638:	f7f7 ffa8 	bl	800058c <__aeabi_d2uiz>
 800863c:	6160      	str	r0, [r4, #20]
		  storage.cinput_ma = (int32_t)((local_adc_data[0] - COFFSET_CONST) * CSENSE_CONST);
 800863e:	8828      	ldrh	r0, [r5, #0]
 8008640:	3841      	subs	r0, #65	; 0x41
 8008642:	f7fa fa43 	bl	8002acc <__aeabi_i2d>
 8008646:	4a52      	ldr	r2, [pc, #328]	; (8008790 <MonitorTask+0x1fc>)
 8008648:	4b52      	ldr	r3, [pc, #328]	; (8008794 <MonitorTask+0x200>)
 800864a:	f7f9 fc33 	bl	8001eb4 <__aeabi_dmul>
 800864e:	f7fa fa07 	bl	8002a60 <__aeabi_d2iz>
 8008652:	61a0      	str	r0, [r4, #24]
		  if(storage.cinput_ma < 0)
 8008654:	2800      	cmp	r0, #0
 8008656:	dbac      	blt.n	80085b2 <MonitorTask+0x1e>
		  storage.coutput_ma = (int32_t)((local_adc_data[1] -COFFSET_CONST) * CSENSE_CONST);
 8008658:	466b      	mov	r3, sp
 800865a:	8858      	ldrh	r0, [r3, #2]
 800865c:	3841      	subs	r0, #65	; 0x41
 800865e:	f7fa fa35 	bl	8002acc <__aeabi_i2d>
 8008662:	4a4b      	ldr	r2, [pc, #300]	; (8008790 <MonitorTask+0x1fc>)
 8008664:	4b4b      	ldr	r3, [pc, #300]	; (8008794 <MonitorTask+0x200>)
 8008666:	f7f9 fc25 	bl	8001eb4 <__aeabi_dmul>
 800866a:	f7fa f9f9 	bl	8002a60 <__aeabi_d2iz>
 800866e:	4b3d      	ldr	r3, [pc, #244]	; (8008764 <MonitorTask+0x1d0>)
 8008670:	61d8      	str	r0, [r3, #28]
		  if(storage.coutput_ma < 0)
 8008672:	2800      	cmp	r0, #0
 8008674:	dba0      	blt.n	80085b8 <MonitorTask+0x24>
		  storage.energy_stored_mah += (float)(storage.cinput_ma * ETIME_CONST);
 8008676:	4c3b      	ldr	r4, [pc, #236]	; (8008764 <MonitorTask+0x1d0>)
 8008678:	69a0      	ldr	r0, [r4, #24]
 800867a:	f7fa fa27 	bl	8002acc <__aeabi_i2d>
 800867e:	4a46      	ldr	r2, [pc, #280]	; (8008798 <MonitorTask+0x204>)
 8008680:	4b46      	ldr	r3, [pc, #280]	; (800879c <MonitorTask+0x208>)
 8008682:	f7f9 fc17 	bl	8001eb4 <__aeabi_dmul>
 8008686:	f7fa fa8d 	bl	8002ba4 <__aeabi_d2f>
 800868a:	6a21      	ldr	r1, [r4, #32]
 800868c:	f7f8 f85e 	bl	800074c <__aeabi_fadd>
 8008690:	6220      	str	r0, [r4, #32]
		  if(storage.energy_stored_mah > FULL_BATT_MAH)
 8008692:	4943      	ldr	r1, [pc, #268]	; (80087a0 <MonitorTask+0x20c>)
 8008694:	f7f7 ff2e 	bl	80004f4 <__aeabi_fcmpgt>
 8008698:	2800      	cmp	r0, #0
 800869a:	d001      	beq.n	80086a0 <MonitorTask+0x10c>
		  {storage.energy_stored_mah = FULL_BATT_MAH;}
 800869c:	4a40      	ldr	r2, [pc, #256]	; (80087a0 <MonitorTask+0x20c>)
 800869e:	6222      	str	r2, [r4, #32]
		  storage.energy_released_mah += (float)(storage.coutput_ma * ETIME_CONST);
 80086a0:	4f30      	ldr	r7, [pc, #192]	; (8008764 <MonitorTask+0x1d0>)
 80086a2:	69f8      	ldr	r0, [r7, #28]
 80086a4:	f7fa fa12 	bl	8002acc <__aeabi_i2d>
 80086a8:	4a3b      	ldr	r2, [pc, #236]	; (8008798 <MonitorTask+0x204>)
 80086aa:	4b3c      	ldr	r3, [pc, #240]	; (800879c <MonitorTask+0x208>)
 80086ac:	f7f9 fc02 	bl	8001eb4 <__aeabi_dmul>
 80086b0:	0004      	movs	r4, r0
 80086b2:	000d      	movs	r5, r1
 80086b4:	f7fa fa76 	bl	8002ba4 <__aeabi_d2f>
 80086b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086ba:	f7f8 f847 	bl	800074c <__aeabi_fadd>
 80086be:	6278      	str	r0, [r7, #36]	; 0x24
		  if(storage.energy_released_mah > FULL_BATT_MAH)
 80086c0:	4937      	ldr	r1, [pc, #220]	; (80087a0 <MonitorTask+0x20c>)
 80086c2:	f7f7 ff17 	bl	80004f4 <__aeabi_fcmpgt>
 80086c6:	2800      	cmp	r0, #0
 80086c8:	d001      	beq.n	80086ce <MonitorTask+0x13a>
		  {storage.energy_released_mah = FULL_BATT_MAH;}
 80086ca:	4a35      	ldr	r2, [pc, #212]	; (80087a0 <MonitorTask+0x20c>)
 80086cc:	627a      	str	r2, [r7, #36]	; 0x24
		  storage.total_batt_ouput_ah += (float)((storage.coutput_ma * ETIME_CONST)/1000);
 80086ce:	2200      	movs	r2, #0
 80086d0:	4b34      	ldr	r3, [pc, #208]	; (80087a4 <MonitorTask+0x210>)
 80086d2:	0020      	movs	r0, r4
 80086d4:	0029      	movs	r1, r5
 80086d6:	f7f8 ffe3 	bl	80016a0 <__aeabi_ddiv>
 80086da:	f7fa fa63 	bl	8002ba4 <__aeabi_d2f>
 80086de:	1c01      	adds	r1, r0, #0
 80086e0:	4c20      	ldr	r4, [pc, #128]	; (8008764 <MonitorTask+0x1d0>)
 80086e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80086e4:	f7f8 f832 	bl	800074c <__aeabi_fadd>
 80086e8:	62a0      	str	r0, [r4, #40]	; 0x28
		  if((int)(storage.vinput_mv+eeprom_info.vin_hys_mv) > eeprom_info.vin_limit_mv)
 80086ea:	4b2f      	ldr	r3, [pc, #188]	; (80087a8 <MonitorTask+0x214>)
 80086ec:	88da      	ldrh	r2, [r3, #6]
 80086ee:	18b1      	adds	r1, r6, r2
 80086f0:	889b      	ldrh	r3, [r3, #4]
 80086f2:	4299      	cmp	r1, r3
 80086f4:	dc00      	bgt.n	80086f8 <MonitorTask+0x164>
 80086f6:	e762      	b.n	80085be <MonitorTask+0x2a>
			  daytime_counter++;
 80086f8:	4a1d      	ldr	r2, [pc, #116]	; (8008770 <MonitorTask+0x1dc>)
 80086fa:	6813      	ldr	r3, [r2, #0]
 80086fc:	3301      	adds	r3, #1
 80086fe:	6013      	str	r3, [r2, #0]
			  nighttime_counter= 0;
 8008700:	4b1c      	ldr	r3, [pc, #112]	; (8008774 <MonitorTask+0x1e0>)
 8008702:	2200      	movs	r2, #0
 8008704:	601a      	str	r2, [r3, #0]
		  if(daytime_counter > TIME_INTEG)
 8008706:	4b1a      	ldr	r3, [pc, #104]	; (8008770 <MonitorTask+0x1dc>)
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	4b28      	ldr	r3, [pc, #160]	; (80087ac <MonitorTask+0x218>)
 800870c:	429a      	cmp	r2, r3
 800870e:	d906      	bls.n	800871e <MonitorTask+0x18a>
			  storage.daytime_flag = 1;
 8008710:	4a14      	ldr	r2, [pc, #80]	; (8008764 <MonitorTask+0x1d0>)
 8008712:	2331      	movs	r3, #49	; 0x31
 8008714:	2101      	movs	r1, #1
 8008716:	54d1      	strb	r1, [r2, r3]
			  daytime_counter= 0;
 8008718:	4b15      	ldr	r3, [pc, #84]	; (8008770 <MonitorTask+0x1dc>)
 800871a:	2200      	movs	r2, #0
 800871c:	601a      	str	r2, [r3, #0]
		  if(nighttime_counter > TIME_INTEG)
 800871e:	4b15      	ldr	r3, [pc, #84]	; (8008774 <MonitorTask+0x1e0>)
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	4b22      	ldr	r3, [pc, #136]	; (80087ac <MonitorTask+0x218>)
 8008724:	429a      	cmp	r2, r3
 8008726:	d905      	bls.n	8008734 <MonitorTask+0x1a0>
			  storage.daytime_flag = 0;
 8008728:	2300      	movs	r3, #0
 800872a:	490e      	ldr	r1, [pc, #56]	; (8008764 <MonitorTask+0x1d0>)
 800872c:	2231      	movs	r2, #49	; 0x31
 800872e:	548b      	strb	r3, [r1, r2]
			  nighttime_counter= 0;
 8008730:	4a10      	ldr	r2, [pc, #64]	; (8008774 <MonitorTask+0x1e0>)
 8008732:	6013      	str	r3, [r2, #0]
		  if(storage.daytime_flag)
 8008734:	4a0b      	ldr	r2, [pc, #44]	; (8008764 <MonitorTask+0x1d0>)
 8008736:	2331      	movs	r3, #49	; 0x31
 8008738:	5cd3      	ldrb	r3, [r2, r3]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d100      	bne.n	8008740 <MonitorTask+0x1ac>
 800873e:	e74a      	b.n	80085d6 <MonitorTask+0x42>
			  mon_dayticks++;
 8008740:	4b0d      	ldr	r3, [pc, #52]	; (8008778 <MonitorTask+0x1e4>)
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	1c50      	adds	r0, r2, #1
 8008746:	6018      	str	r0, [r3, #0]
			  storage.daylength_s = (uint32_t)(mon_dayticks/10);
 8008748:	210a      	movs	r1, #10
 800874a:	f7f7 fcf9 	bl	8000140 <__udivsi3>
 800874e:	4b05      	ldr	r3, [pc, #20]	; (8008764 <MonitorTask+0x1d0>)
 8008750:	62d8      	str	r0, [r3, #44]	; 0x2c
			  if(storage.daylength_s > HOURS_24)
 8008752:	4b17      	ldr	r3, [pc, #92]	; (80087b0 <MonitorTask+0x21c>)
 8008754:	4298      	cmp	r0, r3
 8008756:	d800      	bhi.n	800875a <MonitorTask+0x1c6>
 8008758:	e740      	b.n	80085dc <MonitorTask+0x48>
			  {storage.daylength_s = HOURS_24;}
 800875a:	4b02      	ldr	r3, [pc, #8]	; (8008764 <MonitorTask+0x1d0>)
 800875c:	4a14      	ldr	r2, [pc, #80]	; (80087b0 <MonitorTask+0x21c>)
 800875e:	62da      	str	r2, [r3, #44]	; 0x2c
 8008760:	e73c      	b.n	80085dc <MonitorTask+0x48>
 8008762:	46c0      	nop			; (mov r8, r8)
 8008764:	20004690 	.word	0x20004690
 8008768:	2000411c 	.word	0x2000411c
 800876c:	200041b4 	.word	0x200041b4
 8008770:	200038c0 	.word	0x200038c0
 8008774:	200038c8 	.word	0x200038c8
 8008778:	200038c4 	.word	0x200038c4
 800877c:	6c8b4396 	.word	0x6c8b4396
 8008780:	401d7be7 	.word	0x401d7be7
 8008784:	40100000 	.word	0x40100000
 8008788:	83126e98 	.word	0x83126e98
 800878c:	3fe9cac0 	.word	0x3fe9cac0
 8008790:	2b020c4a 	.word	0x2b020c4a
 8008794:	3fff1687 	.word	0x3fff1687
 8008798:	e1812c13 	.word	0xe1812c13
 800879c:	3efd208b 	.word	0x3efd208b
 80087a0:	46480000 	.word	0x46480000
 80087a4:	408f4000 	.word	0x408f4000
 80087a8:	20003f4c 	.word	0x20003f4c
 80087ac:	00001770 	.word	0x00001770
 80087b0:	00015180 	.word	0x00015180

080087b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80087b4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087b6:	4b0c      	ldr	r3, [pc, #48]	; (80087e8 <HAL_MspInit+0x34>)
 80087b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087ba:	2101      	movs	r1, #1
 80087bc:	430a      	orrs	r2, r1
 80087be:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80087c0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80087c2:	2280      	movs	r2, #128	; 0x80
 80087c4:	0552      	lsls	r2, r2, #21
 80087c6:	430a      	orrs	r2, r1
 80087c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80087ca:	2002      	movs	r0, #2
 80087cc:	2200      	movs	r2, #0
 80087ce:	2103      	movs	r1, #3
 80087d0:	4240      	negs	r0, r0
 80087d2:	f7fa fd75 	bl	80032c0 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 3, 0);
 80087d6:	2200      	movs	r2, #0
 80087d8:	2103      	movs	r1, #3
 80087da:	2004      	movs	r0, #4
 80087dc:	f7fa fd70 	bl	80032c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 80087e0:	2004      	movs	r0, #4
 80087e2:	f7fa fd9d 	bl	8003320 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80087e6:	bd10      	pop	{r4, pc}
 80087e8:	40021000 	.word	0x40021000

080087ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80087ec:	b510      	push	{r4, lr}
 80087ee:	b086      	sub	sp, #24
 80087f0:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087f2:	2214      	movs	r2, #20
 80087f4:	2100      	movs	r1, #0
 80087f6:	a801      	add	r0, sp, #4
 80087f8:	f000 fa43 	bl	8008c82 <memset>
  if(hadc->Instance==ADC1)
 80087fc:	4b21      	ldr	r3, [pc, #132]	; (8008884 <HAL_ADC_MspInit+0x98>)
 80087fe:	6822      	ldr	r2, [r4, #0]
 8008800:	429a      	cmp	r2, r3
 8008802:	d001      	beq.n	8008808 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8008804:	b006      	add	sp, #24
 8008806:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008808:	4b1f      	ldr	r3, [pc, #124]	; (8008888 <HAL_ADC_MspInit+0x9c>)
 800880a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800880c:	2280      	movs	r2, #128	; 0x80
 800880e:	0092      	lsls	r2, r2, #2
 8008810:	430a      	orrs	r2, r1
 8008812:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008814:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008816:	2201      	movs	r2, #1
 8008818:	4311      	orrs	r1, r2
 800881a:	62d9      	str	r1, [r3, #44]	; 0x2c
 800881c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881e:	401a      	ands	r2, r3
 8008820:	9200      	str	r2, [sp, #0]
 8008822:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = ISENS1_Pin|ISENS2_Pin|VINPUT_Pin|VBAT_Pin 
 8008824:	231f      	movs	r3, #31
 8008826:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008828:	3b1c      	subs	r3, #28
 800882a:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800882c:	20a0      	movs	r0, #160	; 0xa0
 800882e:	a901      	add	r1, sp, #4
 8008830:	05c0      	lsls	r0, r0, #23
 8008832:	f7fb f87f 	bl	8003934 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8008836:	4815      	ldr	r0, [pc, #84]	; (800888c <HAL_ADC_MspInit+0xa0>)
 8008838:	4b15      	ldr	r3, [pc, #84]	; (8008890 <HAL_ADC_MspInit+0xa4>)
 800883a:	6003      	str	r3, [r0, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 800883c:	2300      	movs	r3, #0
 800883e:	6043      	str	r3, [r0, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008840:	6083      	str	r3, [r0, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8008842:	60c3      	str	r3, [r0, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8008844:	3380      	adds	r3, #128	; 0x80
 8008846:	6103      	str	r3, [r0, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008848:	3380      	adds	r3, #128	; 0x80
 800884a:	6143      	str	r3, [r0, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800884c:	2380      	movs	r3, #128	; 0x80
 800884e:	00db      	lsls	r3, r3, #3
 8008850:	6183      	str	r3, [r0, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8008852:	2320      	movs	r3, #32
 8008854:	61c3      	str	r3, [r0, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8008856:	2380      	movs	r3, #128	; 0x80
 8008858:	019b      	lsls	r3, r3, #6
 800885a:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800885c:	f7fa fe6c 	bl	8003538 <HAL_DMA_Init>
 8008860:	2800      	cmp	r0, #0
 8008862:	d10b      	bne.n	800887c <HAL_ADC_MspInit+0x90>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8008864:	4b09      	ldr	r3, [pc, #36]	; (800888c <HAL_ADC_MspInit+0xa0>)
 8008866:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008868:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 3, 0);
 800886a:	2200      	movs	r2, #0
 800886c:	2103      	movs	r1, #3
 800886e:	200c      	movs	r0, #12
 8008870:	f7fa fd26 	bl	80032c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8008874:	200c      	movs	r0, #12
 8008876:	f7fa fd53 	bl	8003320 <HAL_NVIC_EnableIRQ>
}
 800887a:	e7c3      	b.n	8008804 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 800887c:	f7fe fde6 	bl	800744c <Error_Handler>
 8008880:	e7f0      	b.n	8008864 <HAL_ADC_MspInit+0x78>
 8008882:	46c0      	nop			; (mov r8, r8)
 8008884:	40012400 	.word	0x40012400
 8008888:	40021000 	.word	0x40021000
 800888c:	200040d4 	.word	0x200040d4
 8008890:	40020008 	.word	0x40020008

08008894 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8008894:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8008896:	6802      	ldr	r2, [r0, #0]
 8008898:	4b07      	ldr	r3, [pc, #28]	; (80088b8 <HAL_CRC_MspInit+0x24>)
 800889a:	429a      	cmp	r2, r3
 800889c:	d001      	beq.n	80088a2 <HAL_CRC_MspInit+0xe>
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800889e:	b002      	add	sp, #8
 80088a0:	4770      	bx	lr
    __HAL_RCC_CRC_CLK_ENABLE();
 80088a2:	4a06      	ldr	r2, [pc, #24]	; (80088bc <HAL_CRC_MspInit+0x28>)
 80088a4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80088a6:	2080      	movs	r0, #128	; 0x80
 80088a8:	0140      	lsls	r0, r0, #5
 80088aa:	4301      	orrs	r1, r0
 80088ac:	6311      	str	r1, [r2, #48]	; 0x30
 80088ae:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80088b0:	4003      	ands	r3, r0
 80088b2:	9301      	str	r3, [sp, #4]
 80088b4:	9b01      	ldr	r3, [sp, #4]
}
 80088b6:	e7f2      	b.n	800889e <HAL_CRC_MspInit+0xa>
 80088b8:	40023000 	.word	0x40023000
 80088bc:	40021000 	.word	0x40021000

080088c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80088c0:	b510      	push	{r4, lr}
  if(htim_base->Instance==TIM7)
 80088c2:	6803      	ldr	r3, [r0, #0]
 80088c4:	4a11      	ldr	r2, [pc, #68]	; (800890c <HAL_TIM_Base_MspInit+0x4c>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d006      	beq.n	80088d8 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(htim_base->Instance==TIM21)
 80088ca:	4a11      	ldr	r2, [pc, #68]	; (8008910 <HAL_TIM_Base_MspInit+0x50>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d011      	beq.n	80088f4 <HAL_TIM_Base_MspInit+0x34>
    __HAL_RCC_TIM21_CLK_ENABLE();
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
  else if(htim_base->Instance==TIM22)
 80088d0:	4a10      	ldr	r2, [pc, #64]	; (8008914 <HAL_TIM_Base_MspInit+0x54>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d014      	beq.n	8008900 <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 80088d6:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 80088d8:	4a0f      	ldr	r2, [pc, #60]	; (8008918 <HAL_TIM_Base_MspInit+0x58>)
 80088da:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80088dc:	2120      	movs	r1, #32
 80088de:	430b      	orrs	r3, r1
 80088e0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 80088e2:	2200      	movs	r2, #0
 80088e4:	391d      	subs	r1, #29
 80088e6:	2012      	movs	r0, #18
 80088e8:	f7fa fcea 	bl	80032c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80088ec:	2012      	movs	r0, #18
 80088ee:	f7fa fd17 	bl	8003320 <HAL_NVIC_EnableIRQ>
 80088f2:	e7f0      	b.n	80088d6 <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM21_CLK_ENABLE();
 80088f4:	4a08      	ldr	r2, [pc, #32]	; (8008918 <HAL_TIM_Base_MspInit+0x58>)
 80088f6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80088f8:	2104      	movs	r1, #4
 80088fa:	430b      	orrs	r3, r1
 80088fc:	6353      	str	r3, [r2, #52]	; 0x34
 80088fe:	e7ea      	b.n	80088d6 <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8008900:	4a05      	ldr	r2, [pc, #20]	; (8008918 <HAL_TIM_Base_MspInit+0x58>)
 8008902:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8008904:	2120      	movs	r1, #32
 8008906:	430b      	orrs	r3, r1
 8008908:	6353      	str	r3, [r2, #52]	; 0x34
}
 800890a:	e7e4      	b.n	80088d6 <HAL_TIM_Base_MspInit+0x16>
 800890c:	40001400 	.word	0x40001400
 8008910:	40010800 	.word	0x40010800
 8008914:	40011400 	.word	0x40011400
 8008918:	40021000 	.word	0x40021000

0800891c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800891c:	b510      	push	{r4, lr}
 800891e:	b086      	sub	sp, #24
 8008920:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008922:	2214      	movs	r2, #20
 8008924:	2100      	movs	r1, #0
 8008926:	a801      	add	r0, sp, #4
 8008928:	f000 f9ab 	bl	8008c82 <memset>
  if(huart->Instance==USART1)
 800892c:	4b2e      	ldr	r3, [pc, #184]	; (80089e8 <HAL_UART_MspInit+0xcc>)
 800892e:	6822      	ldr	r2, [r4, #0]
 8008930:	429a      	cmp	r2, r3
 8008932:	d001      	beq.n	8008938 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008934:	b006      	add	sp, #24
 8008936:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8008938:	4b2c      	ldr	r3, [pc, #176]	; (80089ec <HAL_UART_MspInit+0xd0>)
 800893a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800893c:	2280      	movs	r2, #128	; 0x80
 800893e:	01d2      	lsls	r2, r2, #7
 8008940:	430a      	orrs	r2, r1
 8008942:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008944:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008946:	2202      	movs	r2, #2
 8008948:	4311      	orrs	r1, r2
 800894a:	62d9      	str	r1, [r3, #44]	; 0x2c
 800894c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894e:	4013      	ands	r3, r2
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008954:	23c0      	movs	r3, #192	; 0xc0
 8008956:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008958:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800895a:	3bbf      	subs	r3, #191	; 0xbf
 800895c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800895e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008960:	a901      	add	r1, sp, #4
 8008962:	4823      	ldr	r0, [pc, #140]	; (80089f0 <HAL_UART_MspInit+0xd4>)
 8008964:	f7fa ffe6 	bl	8003934 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8008968:	4822      	ldr	r0, [pc, #136]	; (80089f4 <HAL_UART_MspInit+0xd8>)
 800896a:	4b23      	ldr	r3, [pc, #140]	; (80089f8 <HAL_UART_MspInit+0xdc>)
 800896c:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 800896e:	2303      	movs	r3, #3
 8008970:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008972:	2300      	movs	r3, #0
 8008974:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008976:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008978:	2280      	movs	r2, #128	; 0x80
 800897a:	6102      	str	r2, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800897c:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800897e:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8008980:	3320      	adds	r3, #32
 8008982:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8008984:	2380      	movs	r3, #128	; 0x80
 8008986:	019b      	lsls	r3, r3, #6
 8008988:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800898a:	f7fa fdd5 	bl	8003538 <HAL_DMA_Init>
 800898e:	2800      	cmp	r0, #0
 8008990:	d123      	bne.n	80089da <HAL_UART_MspInit+0xbe>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8008992:	4b18      	ldr	r3, [pc, #96]	; (80089f4 <HAL_UART_MspInit+0xd8>)
 8008994:	66e3      	str	r3, [r4, #108]	; 0x6c
 8008996:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8008998:	4818      	ldr	r0, [pc, #96]	; (80089fc <HAL_UART_MspInit+0xe0>)
 800899a:	4b19      	ldr	r3, [pc, #100]	; (8008a00 <HAL_UART_MspInit+0xe4>)
 800899c:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
 800899e:	2303      	movs	r3, #3
 80089a0:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80089a2:	330d      	adds	r3, #13
 80089a4:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80089a6:	2300      	movs	r3, #0
 80089a8:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80089aa:	2280      	movs	r2, #128	; 0x80
 80089ac:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80089ae:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80089b0:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80089b2:	61c3      	str	r3, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80089b4:	2380      	movs	r3, #128	; 0x80
 80089b6:	015b      	lsls	r3, r3, #5
 80089b8:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80089ba:	f7fa fdbd 	bl	8003538 <HAL_DMA_Init>
 80089be:	2800      	cmp	r0, #0
 80089c0:	d10e      	bne.n	80089e0 <HAL_UART_MspInit+0xc4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80089c2:	4b0e      	ldr	r3, [pc, #56]	; (80089fc <HAL_UART_MspInit+0xe0>)
 80089c4:	66a3      	str	r3, [r4, #104]	; 0x68
 80089c6:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80089c8:	2200      	movs	r2, #0
 80089ca:	2103      	movs	r1, #3
 80089cc:	201b      	movs	r0, #27
 80089ce:	f7fa fc77 	bl	80032c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80089d2:	201b      	movs	r0, #27
 80089d4:	f7fa fca4 	bl	8003320 <HAL_NVIC_EnableIRQ>
}
 80089d8:	e7ac      	b.n	8008934 <HAL_UART_MspInit+0x18>
      Error_Handler();
 80089da:	f7fe fd37 	bl	800744c <Error_Handler>
 80089de:	e7d8      	b.n	8008992 <HAL_UART_MspInit+0x76>
      Error_Handler();
 80089e0:	f7fe fd34 	bl	800744c <Error_Handler>
 80089e4:	e7ed      	b.n	80089c2 <HAL_UART_MspInit+0xa6>
 80089e6:	46c0      	nop			; (mov r8, r8)
 80089e8:	40013800 	.word	0x40013800
 80089ec:	40021000 	.word	0x40021000
 80089f0:	50000400 	.word	0x50000400
 80089f4:	20003fcc 	.word	0x20003fcc
 80089f8:	40020030 	.word	0x40020030
 80089fc:	20003f84 	.word	0x20003f84
 8008a00:	4002001c 	.word	0x4002001c

08008a04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008a04:	b500      	push	{lr}
 8008a06:	b087      	sub	sp, #28
 8008a08:	0001      	movs	r1, r0
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	200f      	movs	r0, #15
 8008a0e:	f7fa fc57 	bl	80032c0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8008a12:	200f      	movs	r0, #15
 8008a14:	f7fa fc84 	bl	8003320 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8008a18:	4a11      	ldr	r2, [pc, #68]	; (8008a60 <HAL_InitTick+0x5c>)
 8008a1a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008a1c:	2101      	movs	r1, #1
 8008a1e:	430b      	orrs	r3, r1
 8008a20:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008a22:	4669      	mov	r1, sp
 8008a24:	a801      	add	r0, sp, #4
 8008a26:	f7fb fc7b 	bl	8004320 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8008a2a:	f7fb fc59 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8008a2e:	490d      	ldr	r1, [pc, #52]	; (8008a64 <HAL_InitTick+0x60>)
 8008a30:	f7f7 fb86 	bl	8000140 <__udivsi3>
 8008a34:	1e43      	subs	r3, r0, #1
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8008a36:	480c      	ldr	r0, [pc, #48]	; (8008a68 <HAL_InitTick+0x64>)
 8008a38:	2280      	movs	r2, #128	; 0x80
 8008a3a:	05d2      	lsls	r2, r2, #23
 8008a3c:	6002      	str	r2, [r0, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8008a3e:	4a0b      	ldr	r2, [pc, #44]	; (8008a6c <HAL_InitTick+0x68>)
 8008a40:	60c2      	str	r2, [r0, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8008a42:	6043      	str	r3, [r0, #4]
  htim2.Init.ClockDivision = 0;
 8008a44:	2300      	movs	r3, #0
 8008a46:	6103      	str	r3, [r0, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008a48:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8008a4a:	f7fb fdf1 	bl	8004630 <HAL_TIM_Base_Init>
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d002      	beq.n	8008a58 <HAL_InitTick+0x54>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8008a52:	2001      	movs	r0, #1
}
 8008a54:	b007      	add	sp, #28
 8008a56:	bd00      	pop	{pc}
    return HAL_TIM_Base_Start_IT(&htim2);
 8008a58:	4803      	ldr	r0, [pc, #12]	; (8008a68 <HAL_InitTick+0x64>)
 8008a5a:	f7fb fe15 	bl	8004688 <HAL_TIM_Base_Start_IT>
 8008a5e:	e7f9      	b.n	8008a54 <HAL_InitTick+0x50>
 8008a60:	40021000 	.word	0x40021000
 8008a64:	000f4240 	.word	0x000f4240
 8008a68:	200046c8 	.word	0x200046c8
 8008a6c:	000003e7 	.word	0x000003e7

08008a70 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008a70:	4770      	bx	lr

08008a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008a72:	e7fe      	b.n	8008a72 <HardFault_Handler>

08008a74 <RCC_CRS_IRQHandler>:

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 8008a74:	4770      	bx	lr
	...

08008a78 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008a78:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8008a7a:	4802      	ldr	r0, [pc, #8]	; (8008a84 <DMA1_Channel1_IRQHandler+0xc>)
 8008a7c:	f7fa fe0a 	bl	8003694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008a80:	bd10      	pop	{r4, pc}
 8008a82:	46c0      	nop			; (mov r8, r8)
 8008a84:	200040d4 	.word	0x200040d4

08008a88 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8008a88:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8008a8a:	4803      	ldr	r0, [pc, #12]	; (8008a98 <DMA1_Channel2_3_IRQHandler+0x10>)
 8008a8c:	f7fa fe02 	bl	8003694 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8008a90:	4802      	ldr	r0, [pc, #8]	; (8008a9c <DMA1_Channel2_3_IRQHandler+0x14>)
 8008a92:	f7fa fdff 	bl	8003694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8008a96:	bd10      	pop	{r4, pc}
 8008a98:	20003f84 	.word	0x20003f84
 8008a9c:	20003fcc 	.word	0x20003fcc

08008aa0 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8008aa0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8008aa2:	4802      	ldr	r0, [pc, #8]	; (8008aac <ADC1_COMP_IRQHandler+0xc>)
 8008aa4:	f7fa fb3c 	bl	8003120 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8008aa8:	bd10      	pop	{r4, pc}
 8008aaa:	46c0      	nop			; (mov r8, r8)
 8008aac:	2000411c 	.word	0x2000411c

08008ab0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008ab0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008ab2:	4802      	ldr	r0, [pc, #8]	; (8008abc <TIM2_IRQHandler+0xc>)
 8008ab4:	f7fb fe82 	bl	80047bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008ab8:	bd10      	pop	{r4, pc}
 8008aba:	46c0      	nop			; (mov r8, r8)
 8008abc:	200046c8 	.word	0x200046c8

08008ac0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8008ac0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8008ac2:	4802      	ldr	r0, [pc, #8]	; (8008acc <TIM7_IRQHandler+0xc>)
 8008ac4:	f7fb fe7a 	bl	80047bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8008ac8:	bd10      	pop	{r4, pc}
 8008aca:	46c0      	nop			; (mov r8, r8)
 8008acc:	20004178 	.word	0x20004178

08008ad0 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8008ad0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8008ad2:	4802      	ldr	r0, [pc, #8]	; (8008adc <TIM21_IRQHandler+0xc>)
 8008ad4:	f7fb fe72 	bl	80047bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8008ad8:	bd10      	pop	{r4, pc}
 8008ada:	46c0      	nop			; (mov r8, r8)
 8008adc:	200041b4 	.word	0x200041b4

08008ae0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8008ae0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008ae2:	4802      	ldr	r0, [pc, #8]	; (8008aec <USART1_IRQHandler+0xc>)
 8008ae4:	f7fc f87c 	bl	8004be0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008ae8:	bd10      	pop	{r4, pc}
 8008aea:	46c0      	nop			; (mov r8, r8)
 8008aec:	20004050 	.word	0x20004050

08008af0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008af0:	b510      	push	{r4, lr}
 8008af2:	0003      	movs	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008af4:	4a0b      	ldr	r2, [pc, #44]	; (8008b24 <_sbrk+0x34>)
 8008af6:	6812      	ldr	r2, [r2, #0]
 8008af8:	2a00      	cmp	r2, #0
 8008afa:	d008      	beq.n	8008b0e <_sbrk+0x1e>
		heap_end = &end;

	prev_heap_end = heap_end;
 8008afc:	4a09      	ldr	r2, [pc, #36]	; (8008b24 <_sbrk+0x34>)
 8008afe:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8008b00:	18c3      	adds	r3, r0, r3
 8008b02:	466a      	mov	r2, sp
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d806      	bhi.n	8008b16 <_sbrk+0x26>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8008b08:	4a06      	ldr	r2, [pc, #24]	; (8008b24 <_sbrk+0x34>)
 8008b0a:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8008b0c:	bd10      	pop	{r4, pc}
		heap_end = &end;
 8008b0e:	4a05      	ldr	r2, [pc, #20]	; (8008b24 <_sbrk+0x34>)
 8008b10:	4905      	ldr	r1, [pc, #20]	; (8008b28 <_sbrk+0x38>)
 8008b12:	6011      	str	r1, [r2, #0]
 8008b14:	e7f2      	b.n	8008afc <_sbrk+0xc>
		errno = ENOMEM;
 8008b16:	f000 f867 	bl	8008be8 <__errno>
 8008b1a:	230c      	movs	r3, #12
 8008b1c:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8008b1e:	2001      	movs	r0, #1
 8008b20:	4240      	negs	r0, r0
 8008b22:	e7f3      	b.n	8008b0c <_sbrk+0x1c>
 8008b24:	200038cc 	.word	0x200038cc
 8008b28:	20004718 	.word	0x20004718

08008b2c <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8008b2c:	4b10      	ldr	r3, [pc, #64]	; (8008b70 <SystemInit+0x44>)
 8008b2e:	6819      	ldr	r1, [r3, #0]
 8008b30:	2280      	movs	r2, #128	; 0x80
 8008b32:	0052      	lsls	r2, r2, #1
 8008b34:	430a      	orrs	r2, r1
 8008b36:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8008b38:	68da      	ldr	r2, [r3, #12]
 8008b3a:	490e      	ldr	r1, [pc, #56]	; (8008b74 <SystemInit+0x48>)
 8008b3c:	400a      	ands	r2, r1
 8008b3e:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	490d      	ldr	r1, [pc, #52]	; (8008b78 <SystemInit+0x4c>)
 8008b44:	400a      	ands	r2, r1
 8008b46:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8008b48:	689a      	ldr	r2, [r3, #8]
 8008b4a:	2101      	movs	r1, #1
 8008b4c:	438a      	bics	r2, r1
 8008b4e:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	490a      	ldr	r1, [pc, #40]	; (8008b7c <SystemInit+0x50>)
 8008b54:	400a      	ands	r2, r1
 8008b56:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8008b58:	68da      	ldr	r2, [r3, #12]
 8008b5a:	4909      	ldr	r1, [pc, #36]	; (8008b80 <SystemInit+0x54>)
 8008b5c:	400a      	ands	r2, r1
 8008b5e:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8008b60:	2200      	movs	r2, #0
 8008b62:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008b64:	4b07      	ldr	r3, [pc, #28]	; (8008b84 <SystemInit+0x58>)
 8008b66:	2280      	movs	r2, #128	; 0x80
 8008b68:	0512      	lsls	r2, r2, #20
 8008b6a:	609a      	str	r2, [r3, #8]
#endif
}
 8008b6c:	4770      	bx	lr
 8008b6e:	46c0      	nop			; (mov r8, r8)
 8008b70:	40021000 	.word	0x40021000
 8008b74:	88ff400c 	.word	0x88ff400c
 8008b78:	fef6fff6 	.word	0xfef6fff6
 8008b7c:	fffbffff 	.word	0xfffbffff
 8008b80:	ff02ffff 	.word	0xff02ffff
 8008b84:	e000ed00 	.word	0xe000ed00

08008b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8008b88:	480d      	ldr	r0, [pc, #52]	; (8008bc0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8008b8a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8008b8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008b8e:	e003      	b.n	8008b98 <LoopCopyDataInit>

08008b90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008b90:	4b0c      	ldr	r3, [pc, #48]	; (8008bc4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8008b92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008b94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008b96:	3104      	adds	r1, #4

08008b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8008b98:	480b      	ldr	r0, [pc, #44]	; (8008bc8 <LoopForever+0xa>)
  ldr  r3, =_edata
 8008b9a:	4b0c      	ldr	r3, [pc, #48]	; (8008bcc <LoopForever+0xe>)
  adds  r2, r0, r1
 8008b9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008b9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008ba0:	d3f6      	bcc.n	8008b90 <CopyDataInit>
  ldr  r2, =_sbss
 8008ba2:	4a0b      	ldr	r2, [pc, #44]	; (8008bd0 <LoopForever+0x12>)
  b  LoopFillZerobss
 8008ba4:	e002      	b.n	8008bac <LoopFillZerobss>

08008ba6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8008ba6:	2300      	movs	r3, #0
  str  r3, [r2]
 8008ba8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008baa:	3204      	adds	r2, #4

08008bac <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8008bac:	4b09      	ldr	r3, [pc, #36]	; (8008bd4 <LoopForever+0x16>)
  cmp  r2, r3
 8008bae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008bb0:	d3f9      	bcc.n	8008ba6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8008bb2:	f7ff ffbb 	bl	8008b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008bb6:	f000 f81d 	bl	8008bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008bba:	f7fe fb77 	bl	80072ac <main>

08008bbe <LoopForever>:

LoopForever:
    b LoopForever
 8008bbe:	e7fe      	b.n	8008bbe <LoopForever>
   ldr   r0, =_estack
 8008bc0:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8008bc4:	0800cc5c 	.word	0x0800cc5c
  ldr  r0, =_sdata
 8008bc8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008bcc:	200009b8 	.word	0x200009b8
  ldr  r2, =_sbss
 8008bd0:	200009b8 	.word	0x200009b8
  ldr  r3, = _ebss
 8008bd4:	20004714 	.word	0x20004714

08008bd8 <DMA1_Channel4_5_6_7_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008bd8:	e7fe      	b.n	8008bd8 <DMA1_Channel4_5_6_7_IRQHandler>

08008bda <atoi>:
 8008bda:	b510      	push	{r4, lr}
 8008bdc:	220a      	movs	r2, #10
 8008bde:	2100      	movs	r1, #0
 8008be0:	f000 f938 	bl	8008e54 <strtol>
 8008be4:	bd10      	pop	{r4, pc}
	...

08008be8 <__errno>:
 8008be8:	4b01      	ldr	r3, [pc, #4]	; (8008bf0 <__errno+0x8>)
 8008bea:	6818      	ldr	r0, [r3, #0]
 8008bec:	4770      	bx	lr
 8008bee:	46c0      	nop			; (mov r8, r8)
 8008bf0:	20000008 	.word	0x20000008

08008bf4 <__libc_init_array>:
 8008bf4:	b570      	push	{r4, r5, r6, lr}
 8008bf6:	2600      	movs	r6, #0
 8008bf8:	4d0c      	ldr	r5, [pc, #48]	; (8008c2c <__libc_init_array+0x38>)
 8008bfa:	4c0d      	ldr	r4, [pc, #52]	; (8008c30 <__libc_init_array+0x3c>)
 8008bfc:	1b64      	subs	r4, r4, r5
 8008bfe:	10a4      	asrs	r4, r4, #2
 8008c00:	42a6      	cmp	r6, r4
 8008c02:	d109      	bne.n	8008c18 <__libc_init_array+0x24>
 8008c04:	2600      	movs	r6, #0
 8008c06:	f003 fb4d 	bl	800c2a4 <_init>
 8008c0a:	4d0a      	ldr	r5, [pc, #40]	; (8008c34 <__libc_init_array+0x40>)
 8008c0c:	4c0a      	ldr	r4, [pc, #40]	; (8008c38 <__libc_init_array+0x44>)
 8008c0e:	1b64      	subs	r4, r4, r5
 8008c10:	10a4      	asrs	r4, r4, #2
 8008c12:	42a6      	cmp	r6, r4
 8008c14:	d105      	bne.n	8008c22 <__libc_init_array+0x2e>
 8008c16:	bd70      	pop	{r4, r5, r6, pc}
 8008c18:	00b3      	lsls	r3, r6, #2
 8008c1a:	58eb      	ldr	r3, [r5, r3]
 8008c1c:	4798      	blx	r3
 8008c1e:	3601      	adds	r6, #1
 8008c20:	e7ee      	b.n	8008c00 <__libc_init_array+0xc>
 8008c22:	00b3      	lsls	r3, r6, #2
 8008c24:	58eb      	ldr	r3, [r5, r3]
 8008c26:	4798      	blx	r3
 8008c28:	3601      	adds	r6, #1
 8008c2a:	e7f2      	b.n	8008c12 <__libc_init_array+0x1e>
 8008c2c:	0800cc50 	.word	0x0800cc50
 8008c30:	0800cc50 	.word	0x0800cc50
 8008c34:	0800cc50 	.word	0x0800cc50
 8008c38:	0800cc58 	.word	0x0800cc58

08008c3c <memchr>:
 8008c3c:	b2c9      	uxtb	r1, r1
 8008c3e:	1882      	adds	r2, r0, r2
 8008c40:	4290      	cmp	r0, r2
 8008c42:	d101      	bne.n	8008c48 <memchr+0xc>
 8008c44:	2000      	movs	r0, #0
 8008c46:	4770      	bx	lr
 8008c48:	7803      	ldrb	r3, [r0, #0]
 8008c4a:	428b      	cmp	r3, r1
 8008c4c:	d0fb      	beq.n	8008c46 <memchr+0xa>
 8008c4e:	3001      	adds	r0, #1
 8008c50:	e7f6      	b.n	8008c40 <memchr+0x4>

08008c52 <memcmp>:
 8008c52:	b530      	push	{r4, r5, lr}
 8008c54:	2400      	movs	r4, #0
 8008c56:	42a2      	cmp	r2, r4
 8008c58:	d101      	bne.n	8008c5e <memcmp+0xc>
 8008c5a:	2000      	movs	r0, #0
 8008c5c:	e005      	b.n	8008c6a <memcmp+0x18>
 8008c5e:	5d03      	ldrb	r3, [r0, r4]
 8008c60:	1c65      	adds	r5, r4, #1
 8008c62:	5d0c      	ldrb	r4, [r1, r4]
 8008c64:	42a3      	cmp	r3, r4
 8008c66:	d001      	beq.n	8008c6c <memcmp+0x1a>
 8008c68:	1b18      	subs	r0, r3, r4
 8008c6a:	bd30      	pop	{r4, r5, pc}
 8008c6c:	002c      	movs	r4, r5
 8008c6e:	e7f2      	b.n	8008c56 <memcmp+0x4>

08008c70 <memcpy>:
 8008c70:	2300      	movs	r3, #0
 8008c72:	b510      	push	{r4, lr}
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d100      	bne.n	8008c7a <memcpy+0xa>
 8008c78:	bd10      	pop	{r4, pc}
 8008c7a:	5ccc      	ldrb	r4, [r1, r3]
 8008c7c:	54c4      	strb	r4, [r0, r3]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	e7f8      	b.n	8008c74 <memcpy+0x4>

08008c82 <memset>:
 8008c82:	0003      	movs	r3, r0
 8008c84:	1812      	adds	r2, r2, r0
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d100      	bne.n	8008c8c <memset+0xa>
 8008c8a:	4770      	bx	lr
 8008c8c:	7019      	strb	r1, [r3, #0]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	e7f9      	b.n	8008c86 <memset+0x4>
	...

08008c94 <sprintf>:
 8008c94:	b40e      	push	{r1, r2, r3}
 8008c96:	b500      	push	{lr}
 8008c98:	490b      	ldr	r1, [pc, #44]	; (8008cc8 <sprintf+0x34>)
 8008c9a:	b09c      	sub	sp, #112	; 0x70
 8008c9c:	ab1d      	add	r3, sp, #116	; 0x74
 8008c9e:	9002      	str	r0, [sp, #8]
 8008ca0:	9006      	str	r0, [sp, #24]
 8008ca2:	9107      	str	r1, [sp, #28]
 8008ca4:	9104      	str	r1, [sp, #16]
 8008ca6:	4809      	ldr	r0, [pc, #36]	; (8008ccc <sprintf+0x38>)
 8008ca8:	4909      	ldr	r1, [pc, #36]	; (8008cd0 <sprintf+0x3c>)
 8008caa:	cb04      	ldmia	r3!, {r2}
 8008cac:	9105      	str	r1, [sp, #20]
 8008cae:	6800      	ldr	r0, [r0, #0]
 8008cb0:	a902      	add	r1, sp, #8
 8008cb2:	9301      	str	r3, [sp, #4]
 8008cb4:	f000 f8e2 	bl	8008e7c <_svfprintf_r>
 8008cb8:	2300      	movs	r3, #0
 8008cba:	9a02      	ldr	r2, [sp, #8]
 8008cbc:	7013      	strb	r3, [r2, #0]
 8008cbe:	b01c      	add	sp, #112	; 0x70
 8008cc0:	bc08      	pop	{r3}
 8008cc2:	b003      	add	sp, #12
 8008cc4:	4718      	bx	r3
 8008cc6:	46c0      	nop			; (mov r8, r8)
 8008cc8:	7fffffff 	.word	0x7fffffff
 8008ccc:	20000008 	.word	0x20000008
 8008cd0:	ffff0208 	.word	0xffff0208

08008cd4 <strcat>:
 8008cd4:	0002      	movs	r2, r0
 8008cd6:	b510      	push	{r4, lr}
 8008cd8:	7813      	ldrb	r3, [r2, #0]
 8008cda:	1c54      	adds	r4, r2, #1
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d105      	bne.n	8008cec <strcat+0x18>
 8008ce0:	5ccc      	ldrb	r4, [r1, r3]
 8008ce2:	54d4      	strb	r4, [r2, r3]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	2c00      	cmp	r4, #0
 8008ce8:	d1fa      	bne.n	8008ce0 <strcat+0xc>
 8008cea:	bd10      	pop	{r4, pc}
 8008cec:	0022      	movs	r2, r4
 8008cee:	e7f3      	b.n	8008cd8 <strcat+0x4>

08008cf0 <strchr>:
 8008cf0:	b2c9      	uxtb	r1, r1
 8008cf2:	7803      	ldrb	r3, [r0, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d004      	beq.n	8008d02 <strchr+0x12>
 8008cf8:	428b      	cmp	r3, r1
 8008cfa:	d100      	bne.n	8008cfe <strchr+0xe>
 8008cfc:	4770      	bx	lr
 8008cfe:	3001      	adds	r0, #1
 8008d00:	e7f7      	b.n	8008cf2 <strchr+0x2>
 8008d02:	424b      	negs	r3, r1
 8008d04:	4159      	adcs	r1, r3
 8008d06:	4249      	negs	r1, r1
 8008d08:	4008      	ands	r0, r1
 8008d0a:	e7f7      	b.n	8008cfc <strchr+0xc>

08008d0c <strcpy>:
 8008d0c:	0003      	movs	r3, r0
 8008d0e:	780a      	ldrb	r2, [r1, #0]
 8008d10:	3101      	adds	r1, #1
 8008d12:	701a      	strb	r2, [r3, #0]
 8008d14:	3301      	adds	r3, #1
 8008d16:	2a00      	cmp	r2, #0
 8008d18:	d1f9      	bne.n	8008d0e <strcpy+0x2>
 8008d1a:	4770      	bx	lr

08008d1c <strstr>:
 8008d1c:	b510      	push	{r4, lr}
 8008d1e:	7803      	ldrb	r3, [r0, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d10f      	bne.n	8008d44 <strstr+0x28>
 8008d24:	780b      	ldrb	r3, [r1, #0]
 8008d26:	425a      	negs	r2, r3
 8008d28:	4153      	adcs	r3, r2
 8008d2a:	425b      	negs	r3, r3
 8008d2c:	4018      	ands	r0, r3
 8008d2e:	bd10      	pop	{r4, pc}
 8008d30:	2300      	movs	r3, #0
 8008d32:	5cca      	ldrb	r2, [r1, r3]
 8008d34:	2a00      	cmp	r2, #0
 8008d36:	d0fa      	beq.n	8008d2e <strstr+0x12>
 8008d38:	5cc4      	ldrb	r4, [r0, r3]
 8008d3a:	4294      	cmp	r4, r2
 8008d3c:	d101      	bne.n	8008d42 <strstr+0x26>
 8008d3e:	3301      	adds	r3, #1
 8008d40:	e7f7      	b.n	8008d32 <strstr+0x16>
 8008d42:	3001      	adds	r0, #1
 8008d44:	7803      	ldrb	r3, [r0, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1f2      	bne.n	8008d30 <strstr+0x14>
 8008d4a:	0018      	movs	r0, r3
 8008d4c:	e7ef      	b.n	8008d2e <strstr+0x12>
	...

08008d50 <_strtol_l.isra.0>:
 8008d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d52:	001f      	movs	r7, r3
 8008d54:	000e      	movs	r6, r1
 8008d56:	b087      	sub	sp, #28
 8008d58:	9005      	str	r0, [sp, #20]
 8008d5a:	9101      	str	r1, [sp, #4]
 8008d5c:	9202      	str	r2, [sp, #8]
 8008d5e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008d60:	7834      	ldrb	r4, [r6, #0]
 8008d62:	f002 fa67 	bl	800b234 <__locale_ctype_ptr_l>
 8008d66:	2208      	movs	r2, #8
 8008d68:	1900      	adds	r0, r0, r4
 8008d6a:	7843      	ldrb	r3, [r0, #1]
 8008d6c:	1c75      	adds	r5, r6, #1
 8008d6e:	4013      	ands	r3, r2
 8008d70:	d136      	bne.n	8008de0 <_strtol_l.isra.0+0x90>
 8008d72:	2c2d      	cmp	r4, #45	; 0x2d
 8008d74:	d136      	bne.n	8008de4 <_strtol_l.isra.0+0x94>
 8008d76:	1cb5      	adds	r5, r6, #2
 8008d78:	7874      	ldrb	r4, [r6, #1]
 8008d7a:	2601      	movs	r6, #1
 8008d7c:	2f00      	cmp	r7, #0
 8008d7e:	d062      	beq.n	8008e46 <_strtol_l.isra.0+0xf6>
 8008d80:	2f10      	cmp	r7, #16
 8008d82:	d109      	bne.n	8008d98 <_strtol_l.isra.0+0x48>
 8008d84:	2c30      	cmp	r4, #48	; 0x30
 8008d86:	d107      	bne.n	8008d98 <_strtol_l.isra.0+0x48>
 8008d88:	2220      	movs	r2, #32
 8008d8a:	782b      	ldrb	r3, [r5, #0]
 8008d8c:	4393      	bics	r3, r2
 8008d8e:	2b58      	cmp	r3, #88	; 0x58
 8008d90:	d154      	bne.n	8008e3c <_strtol_l.isra.0+0xec>
 8008d92:	2710      	movs	r7, #16
 8008d94:	786c      	ldrb	r4, [r5, #1]
 8008d96:	3502      	adds	r5, #2
 8008d98:	4b2d      	ldr	r3, [pc, #180]	; (8008e50 <_strtol_l.isra.0+0x100>)
 8008d9a:	0039      	movs	r1, r7
 8008d9c:	18f3      	adds	r3, r6, r3
 8008d9e:	0018      	movs	r0, r3
 8008da0:	9303      	str	r3, [sp, #12]
 8008da2:	f7f7 fa53 	bl	800024c <__aeabi_uidivmod>
 8008da6:	9104      	str	r1, [sp, #16]
 8008da8:	2101      	movs	r1, #1
 8008daa:	2300      	movs	r3, #0
 8008dac:	4249      	negs	r1, r1
 8008dae:	0002      	movs	r2, r0
 8008db0:	468c      	mov	ip, r1
 8008db2:	0018      	movs	r0, r3
 8008db4:	0021      	movs	r1, r4
 8008db6:	3930      	subs	r1, #48	; 0x30
 8008db8:	2909      	cmp	r1, #9
 8008dba:	d81a      	bhi.n	8008df2 <_strtol_l.isra.0+0xa2>
 8008dbc:	000c      	movs	r4, r1
 8008dbe:	42a7      	cmp	r7, r4
 8008dc0:	dd23      	ble.n	8008e0a <_strtol_l.isra.0+0xba>
 8008dc2:	1c59      	adds	r1, r3, #1
 8008dc4:	d009      	beq.n	8008dda <_strtol_l.isra.0+0x8a>
 8008dc6:	4663      	mov	r3, ip
 8008dc8:	4282      	cmp	r2, r0
 8008dca:	d306      	bcc.n	8008dda <_strtol_l.isra.0+0x8a>
 8008dcc:	d102      	bne.n	8008dd4 <_strtol_l.isra.0+0x84>
 8008dce:	9904      	ldr	r1, [sp, #16]
 8008dd0:	42a1      	cmp	r1, r4
 8008dd2:	db02      	blt.n	8008dda <_strtol_l.isra.0+0x8a>
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	4378      	muls	r0, r7
 8008dd8:	1820      	adds	r0, r4, r0
 8008dda:	782c      	ldrb	r4, [r5, #0]
 8008ddc:	3501      	adds	r5, #1
 8008dde:	e7e9      	b.n	8008db4 <_strtol_l.isra.0+0x64>
 8008de0:	002e      	movs	r6, r5
 8008de2:	e7bc      	b.n	8008d5e <_strtol_l.isra.0+0xe>
 8008de4:	2c2b      	cmp	r4, #43	; 0x2b
 8008de6:	d001      	beq.n	8008dec <_strtol_l.isra.0+0x9c>
 8008de8:	001e      	movs	r6, r3
 8008dea:	e7c7      	b.n	8008d7c <_strtol_l.isra.0+0x2c>
 8008dec:	1cb5      	adds	r5, r6, #2
 8008dee:	7874      	ldrb	r4, [r6, #1]
 8008df0:	e7fa      	b.n	8008de8 <_strtol_l.isra.0+0x98>
 8008df2:	0021      	movs	r1, r4
 8008df4:	3941      	subs	r1, #65	; 0x41
 8008df6:	2919      	cmp	r1, #25
 8008df8:	d801      	bhi.n	8008dfe <_strtol_l.isra.0+0xae>
 8008dfa:	3c37      	subs	r4, #55	; 0x37
 8008dfc:	e7df      	b.n	8008dbe <_strtol_l.isra.0+0x6e>
 8008dfe:	0021      	movs	r1, r4
 8008e00:	3961      	subs	r1, #97	; 0x61
 8008e02:	2919      	cmp	r1, #25
 8008e04:	d801      	bhi.n	8008e0a <_strtol_l.isra.0+0xba>
 8008e06:	3c57      	subs	r4, #87	; 0x57
 8008e08:	e7d9      	b.n	8008dbe <_strtol_l.isra.0+0x6e>
 8008e0a:	1c5a      	adds	r2, r3, #1
 8008e0c:	d108      	bne.n	8008e20 <_strtol_l.isra.0+0xd0>
 8008e0e:	9a05      	ldr	r2, [sp, #20]
 8008e10:	3323      	adds	r3, #35	; 0x23
 8008e12:	6013      	str	r3, [r2, #0]
 8008e14:	9b02      	ldr	r3, [sp, #8]
 8008e16:	9803      	ldr	r0, [sp, #12]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d109      	bne.n	8008e30 <_strtol_l.isra.0+0xe0>
 8008e1c:	b007      	add	sp, #28
 8008e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e20:	2e00      	cmp	r6, #0
 8008e22:	d000      	beq.n	8008e26 <_strtol_l.isra.0+0xd6>
 8008e24:	4240      	negs	r0, r0
 8008e26:	9a02      	ldr	r2, [sp, #8]
 8008e28:	2a00      	cmp	r2, #0
 8008e2a:	d0f7      	beq.n	8008e1c <_strtol_l.isra.0+0xcc>
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d001      	beq.n	8008e34 <_strtol_l.isra.0+0xe4>
 8008e30:	1e6b      	subs	r3, r5, #1
 8008e32:	9301      	str	r3, [sp, #4]
 8008e34:	9b02      	ldr	r3, [sp, #8]
 8008e36:	9a01      	ldr	r2, [sp, #4]
 8008e38:	601a      	str	r2, [r3, #0]
 8008e3a:	e7ef      	b.n	8008e1c <_strtol_l.isra.0+0xcc>
 8008e3c:	2430      	movs	r4, #48	; 0x30
 8008e3e:	2f00      	cmp	r7, #0
 8008e40:	d1aa      	bne.n	8008d98 <_strtol_l.isra.0+0x48>
 8008e42:	2708      	movs	r7, #8
 8008e44:	e7a8      	b.n	8008d98 <_strtol_l.isra.0+0x48>
 8008e46:	2c30      	cmp	r4, #48	; 0x30
 8008e48:	d09e      	beq.n	8008d88 <_strtol_l.isra.0+0x38>
 8008e4a:	270a      	movs	r7, #10
 8008e4c:	e7a4      	b.n	8008d98 <_strtol_l.isra.0+0x48>
 8008e4e:	46c0      	nop			; (mov r8, r8)
 8008e50:	7fffffff 	.word	0x7fffffff

08008e54 <strtol>:
 8008e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e56:	0013      	movs	r3, r2
 8008e58:	4a06      	ldr	r2, [pc, #24]	; (8008e74 <strtol+0x20>)
 8008e5a:	0005      	movs	r5, r0
 8008e5c:	6810      	ldr	r0, [r2, #0]
 8008e5e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008e60:	2c00      	cmp	r4, #0
 8008e62:	d100      	bne.n	8008e66 <strtol+0x12>
 8008e64:	4c04      	ldr	r4, [pc, #16]	; (8008e78 <strtol+0x24>)
 8008e66:	000a      	movs	r2, r1
 8008e68:	9400      	str	r4, [sp, #0]
 8008e6a:	0029      	movs	r1, r5
 8008e6c:	f7ff ff70 	bl	8008d50 <_strtol_l.isra.0>
 8008e70:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8008e72:	46c0      	nop			; (mov r8, r8)
 8008e74:	20000008 	.word	0x20000008
 8008e78:	2000043c 	.word	0x2000043c

08008e7c <_svfprintf_r>:
 8008e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e7e:	b0d9      	sub	sp, #356	; 0x164
 8008e80:	910b      	str	r1, [sp, #44]	; 0x2c
 8008e82:	9209      	str	r2, [sp, #36]	; 0x24
 8008e84:	001c      	movs	r4, r3
 8008e86:	900a      	str	r0, [sp, #40]	; 0x28
 8008e88:	f002 f9d8 	bl	800b23c <_localeconv_r>
 8008e8c:	6803      	ldr	r3, [r0, #0]
 8008e8e:	0018      	movs	r0, r3
 8008e90:	931c      	str	r3, [sp, #112]	; 0x70
 8008e92:	f7f7 f939 	bl	8000108 <strlen>
 8008e96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e98:	9014      	str	r0, [sp, #80]	; 0x50
 8008e9a:	899b      	ldrh	r3, [r3, #12]
 8008e9c:	061b      	lsls	r3, r3, #24
 8008e9e:	d518      	bpl.n	8008ed2 <_svfprintf_r+0x56>
 8008ea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	9308      	str	r3, [sp, #32]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d113      	bne.n	8008ed2 <_svfprintf_r+0x56>
 8008eaa:	2140      	movs	r1, #64	; 0x40
 8008eac:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008eae:	f002 f9d3 	bl	800b258 <_malloc_r>
 8008eb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eb4:	6018      	str	r0, [r3, #0]
 8008eb6:	6118      	str	r0, [r3, #16]
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	d107      	bne.n	8008ecc <_svfprintf_r+0x50>
 8008ebc:	230c      	movs	r3, #12
 8008ebe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ec0:	6013      	str	r3, [r2, #0]
 8008ec2:	3b0d      	subs	r3, #13
 8008ec4:	9315      	str	r3, [sp, #84]	; 0x54
 8008ec6:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008ec8:	b059      	add	sp, #356	; 0x164
 8008eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ecc:	2340      	movs	r3, #64	; 0x40
 8008ece:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ed0:	6153      	str	r3, [r2, #20]
 8008ed2:	2600      	movs	r6, #0
 8008ed4:	af2f      	add	r7, sp, #188	; 0xbc
 8008ed6:	972c      	str	r7, [sp, #176]	; 0xb0
 8008ed8:	962e      	str	r6, [sp, #184]	; 0xb8
 8008eda:	962d      	str	r6, [sp, #180]	; 0xb4
 8008edc:	960d      	str	r6, [sp, #52]	; 0x34
 8008ede:	961a      	str	r6, [sp, #104]	; 0x68
 8008ee0:	9619      	str	r6, [sp, #100]	; 0x64
 8008ee2:	961e      	str	r6, [sp, #120]	; 0x78
 8008ee4:	961d      	str	r6, [sp, #116]	; 0x74
 8008ee6:	9613      	str	r6, [sp, #76]	; 0x4c
 8008ee8:	961b      	str	r6, [sp, #108]	; 0x6c
 8008eea:	961f      	str	r6, [sp, #124]	; 0x7c
 8008eec:	9615      	str	r6, [sp, #84]	; 0x54
 8008eee:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008ef0:	782b      	ldrb	r3, [r5, #0]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d002      	beq.n	8008efc <_svfprintf_r+0x80>
 8008ef6:	2b25      	cmp	r3, #37	; 0x25
 8008ef8:	d000      	beq.n	8008efc <_svfprintf_r+0x80>
 8008efa:	e095      	b.n	8009028 <_svfprintf_r+0x1ac>
 8008efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008efe:	1aee      	subs	r6, r5, r3
 8008f00:	d017      	beq.n	8008f32 <_svfprintf_r+0xb6>
 8008f02:	603b      	str	r3, [r7, #0]
 8008f04:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8008f06:	607e      	str	r6, [r7, #4]
 8008f08:	199b      	adds	r3, r3, r6
 8008f0a:	932e      	str	r3, [sp, #184]	; 0xb8
 8008f0c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008f0e:	3708      	adds	r7, #8
 8008f10:	9308      	str	r3, [sp, #32]
 8008f12:	3301      	adds	r3, #1
 8008f14:	932d      	str	r3, [sp, #180]	; 0xb4
 8008f16:	2b07      	cmp	r3, #7
 8008f18:	dd08      	ble.n	8008f2c <_svfprintf_r+0xb0>
 8008f1a:	aa2c      	add	r2, sp, #176	; 0xb0
 8008f1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f1e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f20:	f002 fee4 	bl	800bcec <__ssprint_r>
 8008f24:	2800      	cmp	r0, #0
 8008f26:	d000      	beq.n	8008f2a <_svfprintf_r+0xae>
 8008f28:	e2d9      	b.n	80094de <_svfprintf_r+0x662>
 8008f2a:	af2f      	add	r7, sp, #188	; 0xbc
 8008f2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f2e:	199b      	adds	r3, r3, r6
 8008f30:	9315      	str	r3, [sp, #84]	; 0x54
 8008f32:	782b      	ldrb	r3, [r5, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d101      	bne.n	8008f3c <_svfprintf_r+0xc0>
 8008f38:	f001 f9e5 	bl	800a306 <_svfprintf_r+0x148a>
 8008f3c:	1c6b      	adds	r3, r5, #1
 8008f3e:	221b      	movs	r2, #27
 8008f40:	9311      	str	r3, [sp, #68]	; 0x44
 8008f42:	2300      	movs	r3, #0
 8008f44:	a91e      	add	r1, sp, #120	; 0x78
 8008f46:	1852      	adds	r2, r2, r1
 8008f48:	7013      	strb	r3, [r2, #0]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	001e      	movs	r6, r3
 8008f4e:	2520      	movs	r5, #32
 8008f50:	4252      	negs	r2, r2
 8008f52:	9208      	str	r2, [sp, #32]
 8008f54:	9316      	str	r3, [sp, #88]	; 0x58
 8008f56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	930e      	str	r3, [sp, #56]	; 0x38
 8008f5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f5e:	3301      	adds	r3, #1
 8008f60:	9311      	str	r3, [sp, #68]	; 0x44
 8008f62:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008f64:	3820      	subs	r0, #32
 8008f66:	285a      	cmp	r0, #90	; 0x5a
 8008f68:	d901      	bls.n	8008f6e <_svfprintf_r+0xf2>
 8008f6a:	f000 fe3d 	bl	8009be8 <_svfprintf_r+0xd6c>
 8008f6e:	f7f7 f8dd 	bl	800012c <__gnu_thumb1_case_shi>
 8008f72:	009e      	.short	0x009e
 8008f74:	063b063b 	.word	0x063b063b
 8008f78:	063b00a7 	.word	0x063b00a7
 8008f7c:	063b063b 	.word	0x063b063b
 8008f80:	063b0080 	.word	0x063b0080
 8008f84:	00a9063b 	.word	0x00a9063b
 8008f88:	063b00b3 	.word	0x063b00b3
 8008f8c:	00b900b1 	.word	0x00b900b1
 8008f90:	00dd063b 	.word	0x00dd063b
 8008f94:	00df00df 	.word	0x00df00df
 8008f98:	00df00df 	.word	0x00df00df
 8008f9c:	00df00df 	.word	0x00df00df
 8008fa0:	00df00df 	.word	0x00df00df
 8008fa4:	063b00df 	.word	0x063b00df
 8008fa8:	063b063b 	.word	0x063b063b
 8008fac:	063b063b 	.word	0x063b063b
 8008fb0:	063b063b 	.word	0x063b063b
 8008fb4:	063b0240 	.word	0x063b0240
 8008fb8:	01fd010a 	.word	0x01fd010a
 8008fbc:	02400240 	.word	0x02400240
 8008fc0:	063b0240 	.word	0x063b0240
 8008fc4:	063b063b 	.word	0x063b063b
 8008fc8:	00f1063b 	.word	0x00f1063b
 8008fcc:	063b063b 	.word	0x063b063b
 8008fd0:	063b04e2 	.word	0x063b04e2
 8008fd4:	063b063b 	.word	0x063b063b
 8008fd8:	063b0537 	.word	0x063b0537
 8008fdc:	063b0557 	.word	0x063b0557
 8008fe0:	005d063b 	.word	0x005d063b
 8008fe4:	063b063b 	.word	0x063b063b
 8008fe8:	063b063b 	.word	0x063b063b
 8008fec:	063b063b 	.word	0x063b063b
 8008ff0:	063b063b 	.word	0x063b063b
 8008ff4:	063b0240 	.word	0x063b0240
 8008ff8:	01ff010a 	.word	0x01ff010a
 8008ffc:	02400240 	.word	0x02400240
 8009000:	00f30240 	.word	0x00f30240
 8009004:	010601ff 	.word	0x010601ff
 8009008:	00ff063b 	.word	0x00ff063b
 800900c:	04c5063b 	.word	0x04c5063b
 8009010:	052704e4 	.word	0x052704e4
 8009014:	063b0106 	.word	0x063b0106
 8009018:	fff20537 	.word	0xfff20537
 800901c:	063b0559 	.word	0x063b0559
 8009020:	0582063b 	.word	0x0582063b
 8009024:	fff2063b 	.word	0xfff2063b
 8009028:	3501      	adds	r5, #1
 800902a:	e761      	b.n	8008ef0 <_svfprintf_r+0x74>
 800902c:	4bcb      	ldr	r3, [pc, #812]	; (800935c <_svfprintf_r+0x4e0>)
 800902e:	2220      	movs	r2, #32
 8009030:	931e      	str	r3, [sp, #120]	; 0x78
 8009032:	4032      	ands	r2, r6
 8009034:	d101      	bne.n	800903a <_svfprintf_r+0x1be>
 8009036:	f000 fd21 	bl	8009a7c <_svfprintf_r+0xc00>
 800903a:	2307      	movs	r3, #7
 800903c:	3407      	adds	r4, #7
 800903e:	439c      	bics	r4, r3
 8009040:	0023      	movs	r3, r4
 8009042:	3308      	adds	r3, #8
 8009044:	9312      	str	r3, [sp, #72]	; 0x48
 8009046:	6823      	ldr	r3, [r4, #0]
 8009048:	6864      	ldr	r4, [r4, #4]
 800904a:	9306      	str	r3, [sp, #24]
 800904c:	9407      	str	r4, [sp, #28]
 800904e:	07f3      	lsls	r3, r6, #31
 8009050:	d50a      	bpl.n	8009068 <_svfprintf_r+0x1ec>
 8009052:	9b06      	ldr	r3, [sp, #24]
 8009054:	9a07      	ldr	r2, [sp, #28]
 8009056:	4313      	orrs	r3, r2
 8009058:	d006      	beq.n	8009068 <_svfprintf_r+0x1ec>
 800905a:	2230      	movs	r2, #48	; 0x30
 800905c:	ab25      	add	r3, sp, #148	; 0x94
 800905e:	701a      	strb	r2, [r3, #0]
 8009060:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009062:	705a      	strb	r2, [r3, #1]
 8009064:	2302      	movs	r3, #2
 8009066:	431e      	orrs	r6, r3
 8009068:	4bbd      	ldr	r3, [pc, #756]	; (8009360 <_svfprintf_r+0x4e4>)
 800906a:	401e      	ands	r6, r3
 800906c:	2302      	movs	r3, #2
 800906e:	f000 fc74 	bl	800995a <_svfprintf_r+0xade>
 8009072:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009074:	f002 f8e2 	bl	800b23c <_localeconv_r>
 8009078:	6843      	ldr	r3, [r0, #4]
 800907a:	0018      	movs	r0, r3
 800907c:	931f      	str	r3, [sp, #124]	; 0x7c
 800907e:	f7f7 f843 	bl	8000108 <strlen>
 8009082:	901b      	str	r0, [sp, #108]	; 0x6c
 8009084:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009086:	f002 f8d9 	bl	800b23c <_localeconv_r>
 800908a:	6883      	ldr	r3, [r0, #8]
 800908c:	9313      	str	r3, [sp, #76]	; 0x4c
 800908e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009090:	2b00      	cmp	r3, #0
 8009092:	d100      	bne.n	8009096 <_svfprintf_r+0x21a>
 8009094:	e75f      	b.n	8008f56 <_svfprintf_r+0xda>
 8009096:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009098:	2b00      	cmp	r3, #0
 800909a:	d100      	bne.n	800909e <_svfprintf_r+0x222>
 800909c:	e75b      	b.n	8008f56 <_svfprintf_r+0xda>
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d100      	bne.n	80090a6 <_svfprintf_r+0x22a>
 80090a4:	e757      	b.n	8008f56 <_svfprintf_r+0xda>
 80090a6:	2380      	movs	r3, #128	; 0x80
 80090a8:	00db      	lsls	r3, r3, #3
 80090aa:	431e      	orrs	r6, r3
 80090ac:	e753      	b.n	8008f56 <_svfprintf_r+0xda>
 80090ae:	231b      	movs	r3, #27
 80090b0:	aa1e      	add	r2, sp, #120	; 0x78
 80090b2:	189b      	adds	r3, r3, r2
 80090b4:	781a      	ldrb	r2, [r3, #0]
 80090b6:	2a00      	cmp	r2, #0
 80090b8:	d000      	beq.n	80090bc <_svfprintf_r+0x240>
 80090ba:	e74c      	b.n	8008f56 <_svfprintf_r+0xda>
 80090bc:	701d      	strb	r5, [r3, #0]
 80090be:	e74a      	b.n	8008f56 <_svfprintf_r+0xda>
 80090c0:	2301      	movs	r3, #1
 80090c2:	e7f2      	b.n	80090aa <_svfprintf_r+0x22e>
 80090c4:	6823      	ldr	r3, [r4, #0]
 80090c6:	3404      	adds	r4, #4
 80090c8:	9316      	str	r3, [sp, #88]	; 0x58
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	db00      	blt.n	80090d0 <_svfprintf_r+0x254>
 80090ce:	e742      	b.n	8008f56 <_svfprintf_r+0xda>
 80090d0:	425b      	negs	r3, r3
 80090d2:	9316      	str	r3, [sp, #88]	; 0x58
 80090d4:	2304      	movs	r3, #4
 80090d6:	e7e8      	b.n	80090aa <_svfprintf_r+0x22e>
 80090d8:	231b      	movs	r3, #27
 80090da:	aa1e      	add	r2, sp, #120	; 0x78
 80090dc:	189b      	adds	r3, r3, r2
 80090de:	222b      	movs	r2, #43	; 0x2b
 80090e0:	701a      	strb	r2, [r3, #0]
 80090e2:	e738      	b.n	8008f56 <_svfprintf_r+0xda>
 80090e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80090e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090e8:	7812      	ldrb	r2, [r2, #0]
 80090ea:	3301      	adds	r3, #1
 80090ec:	920e      	str	r2, [sp, #56]	; 0x38
 80090ee:	2a2a      	cmp	r2, #42	; 0x2a
 80090f0:	d008      	beq.n	8009104 <_svfprintf_r+0x288>
 80090f2:	2200      	movs	r2, #0
 80090f4:	9208      	str	r2, [sp, #32]
 80090f6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80090f8:	001a      	movs	r2, r3
 80090fa:	3930      	subs	r1, #48	; 0x30
 80090fc:	2909      	cmp	r1, #9
 80090fe:	d90c      	bls.n	800911a <_svfprintf_r+0x29e>
 8009100:	9211      	str	r2, [sp, #68]	; 0x44
 8009102:	e72e      	b.n	8008f62 <_svfprintf_r+0xe6>
 8009104:	6821      	ldr	r1, [r4, #0]
 8009106:	1d22      	adds	r2, r4, #4
 8009108:	9108      	str	r1, [sp, #32]
 800910a:	2900      	cmp	r1, #0
 800910c:	da02      	bge.n	8009114 <_svfprintf_r+0x298>
 800910e:	2101      	movs	r1, #1
 8009110:	4249      	negs	r1, r1
 8009112:	9108      	str	r1, [sp, #32]
 8009114:	0014      	movs	r4, r2
 8009116:	9311      	str	r3, [sp, #68]	; 0x44
 8009118:	e71d      	b.n	8008f56 <_svfprintf_r+0xda>
 800911a:	200a      	movs	r0, #10
 800911c:	9a08      	ldr	r2, [sp, #32]
 800911e:	4342      	muls	r2, r0
 8009120:	1852      	adds	r2, r2, r1
 8009122:	9208      	str	r2, [sp, #32]
 8009124:	781a      	ldrb	r2, [r3, #0]
 8009126:	3301      	adds	r3, #1
 8009128:	920e      	str	r2, [sp, #56]	; 0x38
 800912a:	e7e4      	b.n	80090f6 <_svfprintf_r+0x27a>
 800912c:	2380      	movs	r3, #128	; 0x80
 800912e:	e7bc      	b.n	80090aa <_svfprintf_r+0x22e>
 8009130:	2300      	movs	r3, #0
 8009132:	9316      	str	r3, [sp, #88]	; 0x58
 8009134:	220a      	movs	r2, #10
 8009136:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009138:	4353      	muls	r3, r2
 800913a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800913c:	3a30      	subs	r2, #48	; 0x30
 800913e:	18d3      	adds	r3, r2, r3
 8009140:	9316      	str	r3, [sp, #88]	; 0x58
 8009142:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009144:	1c5a      	adds	r2, r3, #1
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	9211      	str	r2, [sp, #68]	; 0x44
 800914a:	930e      	str	r3, [sp, #56]	; 0x38
 800914c:	3b30      	subs	r3, #48	; 0x30
 800914e:	2b09      	cmp	r3, #9
 8009150:	d9f0      	bls.n	8009134 <_svfprintf_r+0x2b8>
 8009152:	e7d5      	b.n	8009100 <_svfprintf_r+0x284>
 8009154:	2308      	movs	r3, #8
 8009156:	e7a8      	b.n	80090aa <_svfprintf_r+0x22e>
 8009158:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	2b68      	cmp	r3, #104	; 0x68
 800915e:	d105      	bne.n	800916c <_svfprintf_r+0x2f0>
 8009160:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009162:	3301      	adds	r3, #1
 8009164:	9311      	str	r3, [sp, #68]	; 0x44
 8009166:	2380      	movs	r3, #128	; 0x80
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	e79e      	b.n	80090aa <_svfprintf_r+0x22e>
 800916c:	2340      	movs	r3, #64	; 0x40
 800916e:	e79c      	b.n	80090aa <_svfprintf_r+0x22e>
 8009170:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	2b6c      	cmp	r3, #108	; 0x6c
 8009176:	d104      	bne.n	8009182 <_svfprintf_r+0x306>
 8009178:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800917a:	3301      	adds	r3, #1
 800917c:	9311      	str	r3, [sp, #68]	; 0x44
 800917e:	432e      	orrs	r6, r5
 8009180:	e6e9      	b.n	8008f56 <_svfprintf_r+0xda>
 8009182:	2310      	movs	r3, #16
 8009184:	e791      	b.n	80090aa <_svfprintf_r+0x22e>
 8009186:	1d23      	adds	r3, r4, #4
 8009188:	6822      	ldr	r2, [r4, #0]
 800918a:	9312      	str	r3, [sp, #72]	; 0x48
 800918c:	ab3f      	add	r3, sp, #252	; 0xfc
 800918e:	701a      	strb	r2, [r3, #0]
 8009190:	221b      	movs	r2, #27
 8009192:	2000      	movs	r0, #0
 8009194:	a91e      	add	r1, sp, #120	; 0x78
 8009196:	1852      	adds	r2, r2, r1
 8009198:	7010      	strb	r0, [r2, #0]
 800919a:	2201      	movs	r2, #1
 800919c:	0005      	movs	r5, r0
 800919e:	900c      	str	r0, [sp, #48]	; 0x30
 80091a0:	9208      	str	r2, [sp, #32]
 80091a2:	9017      	str	r0, [sp, #92]	; 0x5c
 80091a4:	9010      	str	r0, [sp, #64]	; 0x40
 80091a6:	900f      	str	r0, [sp, #60]	; 0x3c
 80091a8:	9309      	str	r3, [sp, #36]	; 0x24
 80091aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091ac:	9a08      	ldr	r2, [sp, #32]
 80091ae:	9318      	str	r3, [sp, #96]	; 0x60
 80091b0:	4293      	cmp	r3, r2
 80091b2:	da00      	bge.n	80091b6 <_svfprintf_r+0x33a>
 80091b4:	9218      	str	r2, [sp, #96]	; 0x60
 80091b6:	231b      	movs	r3, #27
 80091b8:	aa1e      	add	r2, sp, #120	; 0x78
 80091ba:	189b      	adds	r3, r3, r2
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	1e5a      	subs	r2, r3, #1
 80091c0:	4193      	sbcs	r3, r2
 80091c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80091c4:	18d3      	adds	r3, r2, r3
 80091c6:	9318      	str	r3, [sp, #96]	; 0x60
 80091c8:	2302      	movs	r3, #2
 80091ca:	4033      	ands	r3, r6
 80091cc:	9320      	str	r3, [sp, #128]	; 0x80
 80091ce:	d002      	beq.n	80091d6 <_svfprintf_r+0x35a>
 80091d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80091d2:	3302      	adds	r3, #2
 80091d4:	9318      	str	r3, [sp, #96]	; 0x60
 80091d6:	2384      	movs	r3, #132	; 0x84
 80091d8:	4033      	ands	r3, r6
 80091da:	9321      	str	r3, [sp, #132]	; 0x84
 80091dc:	d121      	bne.n	8009222 <_svfprintf_r+0x3a6>
 80091de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80091e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80091e2:	1a9c      	subs	r4, r3, r2
 80091e4:	2c00      	cmp	r4, #0
 80091e6:	dd1c      	ble.n	8009222 <_svfprintf_r+0x3a6>
 80091e8:	0039      	movs	r1, r7
 80091ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80091ec:	485d      	ldr	r0, [pc, #372]	; (8009364 <_svfprintf_r+0x4e8>)
 80091ee:	9322      	str	r3, [sp, #136]	; 0x88
 80091f0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80091f2:	3301      	adds	r3, #1
 80091f4:	3108      	adds	r1, #8
 80091f6:	6038      	str	r0, [r7, #0]
 80091f8:	2c10      	cmp	r4, #16
 80091fa:	dd01      	ble.n	8009200 <_svfprintf_r+0x384>
 80091fc:	f000 fd08 	bl	8009c10 <_svfprintf_r+0xd94>
 8009200:	607c      	str	r4, [r7, #4]
 8009202:	18a4      	adds	r4, r4, r2
 8009204:	942e      	str	r4, [sp, #184]	; 0xb8
 8009206:	932d      	str	r3, [sp, #180]	; 0xb4
 8009208:	000f      	movs	r7, r1
 800920a:	2b07      	cmp	r3, #7
 800920c:	dd09      	ble.n	8009222 <_svfprintf_r+0x3a6>
 800920e:	aa2c      	add	r2, sp, #176	; 0xb0
 8009210:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009212:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009214:	f002 fd6a 	bl	800bcec <__ssprint_r>
 8009218:	2800      	cmp	r0, #0
 800921a:	d001      	beq.n	8009220 <_svfprintf_r+0x3a4>
 800921c:	f001 f852 	bl	800a2c4 <_svfprintf_r+0x1448>
 8009220:	af2f      	add	r7, sp, #188	; 0xbc
 8009222:	231b      	movs	r3, #27
 8009224:	aa1e      	add	r2, sp, #120	; 0x78
 8009226:	189b      	adds	r3, r3, r2
 8009228:	781a      	ldrb	r2, [r3, #0]
 800922a:	2a00      	cmp	r2, #0
 800922c:	d017      	beq.n	800925e <_svfprintf_r+0x3e2>
 800922e:	603b      	str	r3, [r7, #0]
 8009230:	2301      	movs	r3, #1
 8009232:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009234:	607b      	str	r3, [r7, #4]
 8009236:	0013      	movs	r3, r2
 8009238:	3301      	adds	r3, #1
 800923a:	932e      	str	r3, [sp, #184]	; 0xb8
 800923c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800923e:	3708      	adds	r7, #8
 8009240:	9322      	str	r3, [sp, #136]	; 0x88
 8009242:	3301      	adds	r3, #1
 8009244:	932d      	str	r3, [sp, #180]	; 0xb4
 8009246:	2b07      	cmp	r3, #7
 8009248:	dd09      	ble.n	800925e <_svfprintf_r+0x3e2>
 800924a:	aa2c      	add	r2, sp, #176	; 0xb0
 800924c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800924e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009250:	f002 fd4c 	bl	800bcec <__ssprint_r>
 8009254:	2800      	cmp	r0, #0
 8009256:	d001      	beq.n	800925c <_svfprintf_r+0x3e0>
 8009258:	f001 f834 	bl	800a2c4 <_svfprintf_r+0x1448>
 800925c:	af2f      	add	r7, sp, #188	; 0xbc
 800925e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009260:	2b00      	cmp	r3, #0
 8009262:	d019      	beq.n	8009298 <_svfprintf_r+0x41c>
 8009264:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009266:	9320      	str	r3, [sp, #128]	; 0x80
 8009268:	ab25      	add	r3, sp, #148	; 0x94
 800926a:	603b      	str	r3, [r7, #0]
 800926c:	2302      	movs	r3, #2
 800926e:	607b      	str	r3, [r7, #4]
 8009270:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009272:	3708      	adds	r7, #8
 8009274:	3302      	adds	r3, #2
 8009276:	932e      	str	r3, [sp, #184]	; 0xb8
 8009278:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800927a:	9320      	str	r3, [sp, #128]	; 0x80
 800927c:	3301      	adds	r3, #1
 800927e:	932d      	str	r3, [sp, #180]	; 0xb4
 8009280:	2b07      	cmp	r3, #7
 8009282:	dd09      	ble.n	8009298 <_svfprintf_r+0x41c>
 8009284:	aa2c      	add	r2, sp, #176	; 0xb0
 8009286:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009288:	980a      	ldr	r0, [sp, #40]	; 0x28
 800928a:	f002 fd2f 	bl	800bcec <__ssprint_r>
 800928e:	2800      	cmp	r0, #0
 8009290:	d001      	beq.n	8009296 <_svfprintf_r+0x41a>
 8009292:	f001 f817 	bl	800a2c4 <_svfprintf_r+0x1448>
 8009296:	af2f      	add	r7, sp, #188	; 0xbc
 8009298:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800929a:	2b80      	cmp	r3, #128	; 0x80
 800929c:	d121      	bne.n	80092e2 <_svfprintf_r+0x466>
 800929e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80092a0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80092a2:	1a9c      	subs	r4, r3, r2
 80092a4:	2c00      	cmp	r4, #0
 80092a6:	dd1c      	ble.n	80092e2 <_svfprintf_r+0x466>
 80092a8:	0039      	movs	r1, r7
 80092aa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80092ac:	482e      	ldr	r0, [pc, #184]	; (8009368 <_svfprintf_r+0x4ec>)
 80092ae:	9320      	str	r3, [sp, #128]	; 0x80
 80092b0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80092b2:	3301      	adds	r3, #1
 80092b4:	3108      	adds	r1, #8
 80092b6:	6038      	str	r0, [r7, #0]
 80092b8:	2c10      	cmp	r4, #16
 80092ba:	dd01      	ble.n	80092c0 <_svfprintf_r+0x444>
 80092bc:	f000 fcbc 	bl	8009c38 <_svfprintf_r+0xdbc>
 80092c0:	607c      	str	r4, [r7, #4]
 80092c2:	18a4      	adds	r4, r4, r2
 80092c4:	942e      	str	r4, [sp, #184]	; 0xb8
 80092c6:	932d      	str	r3, [sp, #180]	; 0xb4
 80092c8:	000f      	movs	r7, r1
 80092ca:	2b07      	cmp	r3, #7
 80092cc:	dd09      	ble.n	80092e2 <_svfprintf_r+0x466>
 80092ce:	aa2c      	add	r2, sp, #176	; 0xb0
 80092d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80092d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80092d4:	f002 fd0a 	bl	800bcec <__ssprint_r>
 80092d8:	2800      	cmp	r0, #0
 80092da:	d001      	beq.n	80092e0 <_svfprintf_r+0x464>
 80092dc:	f000 fff2 	bl	800a2c4 <_svfprintf_r+0x1448>
 80092e0:	af2f      	add	r7, sp, #188	; 0xbc
 80092e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092e4:	9a08      	ldr	r2, [sp, #32]
 80092e6:	1a9c      	subs	r4, r3, r2
 80092e8:	2c00      	cmp	r4, #0
 80092ea:	dd1c      	ble.n	8009326 <_svfprintf_r+0x4aa>
 80092ec:	0039      	movs	r1, r7
 80092ee:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80092f0:	481d      	ldr	r0, [pc, #116]	; (8009368 <_svfprintf_r+0x4ec>)
 80092f2:	9317      	str	r3, [sp, #92]	; 0x5c
 80092f4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80092f6:	3301      	adds	r3, #1
 80092f8:	3108      	adds	r1, #8
 80092fa:	6038      	str	r0, [r7, #0]
 80092fc:	2c10      	cmp	r4, #16
 80092fe:	dd01      	ble.n	8009304 <_svfprintf_r+0x488>
 8009300:	f000 fcb4 	bl	8009c6c <_svfprintf_r+0xdf0>
 8009304:	18a2      	adds	r2, r4, r2
 8009306:	607c      	str	r4, [r7, #4]
 8009308:	922e      	str	r2, [sp, #184]	; 0xb8
 800930a:	932d      	str	r3, [sp, #180]	; 0xb4
 800930c:	000f      	movs	r7, r1
 800930e:	2b07      	cmp	r3, #7
 8009310:	dd09      	ble.n	8009326 <_svfprintf_r+0x4aa>
 8009312:	aa2c      	add	r2, sp, #176	; 0xb0
 8009314:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009316:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009318:	f002 fce8 	bl	800bcec <__ssprint_r>
 800931c:	2800      	cmp	r0, #0
 800931e:	d001      	beq.n	8009324 <_svfprintf_r+0x4a8>
 8009320:	f000 ffd0 	bl	800a2c4 <_svfprintf_r+0x1448>
 8009324:	af2f      	add	r7, sp, #188	; 0xbc
 8009326:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009328:	9317      	str	r3, [sp, #92]	; 0x5c
 800932a:	05f3      	lsls	r3, r6, #23
 800932c:	d501      	bpl.n	8009332 <_svfprintf_r+0x4b6>
 800932e:	f000 fcb1 	bl	8009c94 <_svfprintf_r+0xe18>
 8009332:	9a08      	ldr	r2, [sp, #32]
 8009334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009336:	4694      	mov	ip, r2
 8009338:	603b      	str	r3, [r7, #0]
 800933a:	9b08      	ldr	r3, [sp, #32]
 800933c:	607b      	str	r3, [r7, #4]
 800933e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009340:	4463      	add	r3, ip
 8009342:	932e      	str	r3, [sp, #184]	; 0xb8
 8009344:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009346:	9308      	str	r3, [sp, #32]
 8009348:	3301      	adds	r3, #1
 800934a:	932d      	str	r3, [sp, #180]	; 0xb4
 800934c:	2b07      	cmp	r3, #7
 800934e:	dd01      	ble.n	8009354 <_svfprintf_r+0x4d8>
 8009350:	f000 fd94 	bl	8009e7c <_svfprintf_r+0x1000>
 8009354:	3708      	adds	r7, #8
 8009356:	f000 fce4 	bl	8009d22 <_svfprintf_r+0xea6>
 800935a:	46c0      	nop			; (mov r8, r8)
 800935c:	0800c9fd 	.word	0x0800c9fd
 8009360:	fffffbff 	.word	0xfffffbff
 8009364:	0800ca10 	.word	0x0800ca10
 8009368:	0800ca20 	.word	0x0800ca20
 800936c:	2310      	movs	r3, #16
 800936e:	431e      	orrs	r6, r3
 8009370:	06b3      	lsls	r3, r6, #26
 8009372:	d52c      	bpl.n	80093ce <_svfprintf_r+0x552>
 8009374:	2307      	movs	r3, #7
 8009376:	3407      	adds	r4, #7
 8009378:	439c      	bics	r4, r3
 800937a:	0023      	movs	r3, r4
 800937c:	3308      	adds	r3, #8
 800937e:	9312      	str	r3, [sp, #72]	; 0x48
 8009380:	6823      	ldr	r3, [r4, #0]
 8009382:	6864      	ldr	r4, [r4, #4]
 8009384:	9306      	str	r3, [sp, #24]
 8009386:	9407      	str	r4, [sp, #28]
 8009388:	9b07      	ldr	r3, [sp, #28]
 800938a:	2b00      	cmp	r3, #0
 800938c:	da0b      	bge.n	80093a6 <_svfprintf_r+0x52a>
 800938e:	9906      	ldr	r1, [sp, #24]
 8009390:	9a07      	ldr	r2, [sp, #28]
 8009392:	2400      	movs	r4, #0
 8009394:	424b      	negs	r3, r1
 8009396:	4194      	sbcs	r4, r2
 8009398:	9306      	str	r3, [sp, #24]
 800939a:	9407      	str	r4, [sp, #28]
 800939c:	231b      	movs	r3, #27
 800939e:	aa1e      	add	r2, sp, #120	; 0x78
 80093a0:	189b      	adds	r3, r3, r2
 80093a2:	222d      	movs	r2, #45	; 0x2d
 80093a4:	701a      	strb	r2, [r3, #0]
 80093a6:	9b08      	ldr	r3, [sp, #32]
 80093a8:	3301      	adds	r3, #1
 80093aa:	d000      	beq.n	80093ae <_svfprintf_r+0x532>
 80093ac:	e382      	b.n	8009ab4 <_svfprintf_r+0xc38>
 80093ae:	9b07      	ldr	r3, [sp, #28]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d000      	beq.n	80093b6 <_svfprintf_r+0x53a>
 80093b4:	e3b0      	b.n	8009b18 <_svfprintf_r+0xc9c>
 80093b6:	9b06      	ldr	r3, [sp, #24]
 80093b8:	2b09      	cmp	r3, #9
 80093ba:	d900      	bls.n	80093be <_svfprintf_r+0x542>
 80093bc:	e3ac      	b.n	8009b18 <_svfprintf_r+0xc9c>
 80093be:	23e7      	movs	r3, #231	; 0xe7
 80093c0:	aa1e      	add	r2, sp, #120	; 0x78
 80093c2:	189b      	adds	r3, r3, r2
 80093c4:	9a06      	ldr	r2, [sp, #24]
 80093c6:	3230      	adds	r2, #48	; 0x30
 80093c8:	701a      	strb	r2, [r3, #0]
 80093ca:	9309      	str	r3, [sp, #36]	; 0x24
 80093cc:	e395      	b.n	8009afa <_svfprintf_r+0xc7e>
 80093ce:	1d23      	adds	r3, r4, #4
 80093d0:	9312      	str	r3, [sp, #72]	; 0x48
 80093d2:	06f3      	lsls	r3, r6, #27
 80093d4:	d504      	bpl.n	80093e0 <_svfprintf_r+0x564>
 80093d6:	6823      	ldr	r3, [r4, #0]
 80093d8:	9306      	str	r3, [sp, #24]
 80093da:	17db      	asrs	r3, r3, #31
 80093dc:	9307      	str	r3, [sp, #28]
 80093de:	e7d3      	b.n	8009388 <_svfprintf_r+0x50c>
 80093e0:	6823      	ldr	r3, [r4, #0]
 80093e2:	0672      	lsls	r2, r6, #25
 80093e4:	d501      	bpl.n	80093ea <_svfprintf_r+0x56e>
 80093e6:	b21b      	sxth	r3, r3
 80093e8:	e7f6      	b.n	80093d8 <_svfprintf_r+0x55c>
 80093ea:	05b2      	lsls	r2, r6, #22
 80093ec:	d5f4      	bpl.n	80093d8 <_svfprintf_r+0x55c>
 80093ee:	b25b      	sxtb	r3, r3
 80093f0:	e7f2      	b.n	80093d8 <_svfprintf_r+0x55c>
 80093f2:	2307      	movs	r3, #7
 80093f4:	3407      	adds	r4, #7
 80093f6:	439c      	bics	r4, r3
 80093f8:	0023      	movs	r3, r4
 80093fa:	2201      	movs	r2, #1
 80093fc:	3308      	adds	r3, #8
 80093fe:	9312      	str	r3, [sp, #72]	; 0x48
 8009400:	6823      	ldr	r3, [r4, #0]
 8009402:	4252      	negs	r2, r2
 8009404:	931a      	str	r3, [sp, #104]	; 0x68
 8009406:	6863      	ldr	r3, [r4, #4]
 8009408:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800940a:	005c      	lsls	r4, r3, #1
 800940c:	0864      	lsrs	r4, r4, #1
 800940e:	9319      	str	r3, [sp, #100]	; 0x64
 8009410:	0028      	movs	r0, r5
 8009412:	4bcf      	ldr	r3, [pc, #828]	; (8009750 <_svfprintf_r+0x8d4>)
 8009414:	0021      	movs	r1, r4
 8009416:	f7f9 fb07 	bl	8002a28 <__aeabi_dcmpun>
 800941a:	2800      	cmp	r0, #0
 800941c:	d125      	bne.n	800946a <_svfprintf_r+0x5ee>
 800941e:	2201      	movs	r2, #1
 8009420:	4bcb      	ldr	r3, [pc, #812]	; (8009750 <_svfprintf_r+0x8d4>)
 8009422:	4252      	negs	r2, r2
 8009424:	0028      	movs	r0, r5
 8009426:	0021      	movs	r1, r4
 8009428:	f7f7 f820 	bl	800046c <__aeabi_dcmple>
 800942c:	2800      	cmp	r0, #0
 800942e:	d11c      	bne.n	800946a <_svfprintf_r+0x5ee>
 8009430:	2200      	movs	r2, #0
 8009432:	2300      	movs	r3, #0
 8009434:	981a      	ldr	r0, [sp, #104]	; 0x68
 8009436:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009438:	f7f7 f80e 	bl	8000458 <__aeabi_dcmplt>
 800943c:	2800      	cmp	r0, #0
 800943e:	d004      	beq.n	800944a <_svfprintf_r+0x5ce>
 8009440:	231b      	movs	r3, #27
 8009442:	aa1e      	add	r2, sp, #120	; 0x78
 8009444:	189b      	adds	r3, r3, r2
 8009446:	222d      	movs	r2, #45	; 0x2d
 8009448:	701a      	strb	r2, [r3, #0]
 800944a:	4bc2      	ldr	r3, [pc, #776]	; (8009754 <_svfprintf_r+0x8d8>)
 800944c:	9309      	str	r3, [sp, #36]	; 0x24
 800944e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009450:	2b47      	cmp	r3, #71	; 0x47
 8009452:	dc01      	bgt.n	8009458 <_svfprintf_r+0x5dc>
 8009454:	4bc0      	ldr	r3, [pc, #768]	; (8009758 <_svfprintf_r+0x8dc>)
 8009456:	9309      	str	r3, [sp, #36]	; 0x24
 8009458:	2380      	movs	r3, #128	; 0x80
 800945a:	439e      	bics	r6, r3
 800945c:	2300      	movs	r3, #0
 800945e:	930c      	str	r3, [sp, #48]	; 0x30
 8009460:	3303      	adds	r3, #3
 8009462:	9308      	str	r3, [sp, #32]
 8009464:	2300      	movs	r3, #0
 8009466:	9317      	str	r3, [sp, #92]	; 0x5c
 8009468:	e34f      	b.n	8009b0a <_svfprintf_r+0xc8e>
 800946a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800946c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800946e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8009470:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009472:	f7f9 fad9 	bl	8002a28 <__aeabi_dcmpun>
 8009476:	2800      	cmp	r0, #0
 8009478:	d00e      	beq.n	8009498 <_svfprintf_r+0x61c>
 800947a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800947c:	2b00      	cmp	r3, #0
 800947e:	da04      	bge.n	800948a <_svfprintf_r+0x60e>
 8009480:	231b      	movs	r3, #27
 8009482:	aa1e      	add	r2, sp, #120	; 0x78
 8009484:	189b      	adds	r3, r3, r2
 8009486:	222d      	movs	r2, #45	; 0x2d
 8009488:	701a      	strb	r2, [r3, #0]
 800948a:	4bb4      	ldr	r3, [pc, #720]	; (800975c <_svfprintf_r+0x8e0>)
 800948c:	9309      	str	r3, [sp, #36]	; 0x24
 800948e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009490:	2b47      	cmp	r3, #71	; 0x47
 8009492:	dce1      	bgt.n	8009458 <_svfprintf_r+0x5dc>
 8009494:	4bb2      	ldr	r3, [pc, #712]	; (8009760 <_svfprintf_r+0x8e4>)
 8009496:	e7de      	b.n	8009456 <_svfprintf_r+0x5da>
 8009498:	2320      	movs	r3, #32
 800949a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800949c:	439a      	bics	r2, r3
 800949e:	920f      	str	r2, [sp, #60]	; 0x3c
 80094a0:	2a41      	cmp	r2, #65	; 0x41
 80094a2:	d124      	bne.n	80094ee <_svfprintf_r+0x672>
 80094a4:	2230      	movs	r2, #48	; 0x30
 80094a6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80094a8:	ab25      	add	r3, sp, #148	; 0x94
 80094aa:	701a      	strb	r2, [r3, #0]
 80094ac:	3228      	adds	r2, #40	; 0x28
 80094ae:	2961      	cmp	r1, #97	; 0x61
 80094b0:	d100      	bne.n	80094b4 <_svfprintf_r+0x638>
 80094b2:	3220      	adds	r2, #32
 80094b4:	705a      	strb	r2, [r3, #1]
 80094b6:	2302      	movs	r3, #2
 80094b8:	431e      	orrs	r6, r3
 80094ba:	9b08      	ldr	r3, [sp, #32]
 80094bc:	2b63      	cmp	r3, #99	; 0x63
 80094be:	dc00      	bgt.n	80094c2 <_svfprintf_r+0x646>
 80094c0:	e09e      	b.n	8009600 <_svfprintf_r+0x784>
 80094c2:	1c59      	adds	r1, r3, #1
 80094c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80094c6:	f001 fec7 	bl	800b258 <_malloc_r>
 80094ca:	9009      	str	r0, [sp, #36]	; 0x24
 80094cc:	2800      	cmp	r0, #0
 80094ce:	d000      	beq.n	80094d2 <_svfprintf_r+0x656>
 80094d0:	e09b      	b.n	800960a <_svfprintf_r+0x78e>
 80094d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094d4:	899a      	ldrh	r2, [r3, #12]
 80094d6:	2340      	movs	r3, #64	; 0x40
 80094d8:	4313      	orrs	r3, r2
 80094da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094dc:	8193      	strh	r3, [r2, #12]
 80094de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094e0:	899b      	ldrh	r3, [r3, #12]
 80094e2:	065b      	lsls	r3, r3, #25
 80094e4:	d400      	bmi.n	80094e8 <_svfprintf_r+0x66c>
 80094e6:	e4ee      	b.n	8008ec6 <_svfprintf_r+0x4a>
 80094e8:	2301      	movs	r3, #1
 80094ea:	425b      	negs	r3, r3
 80094ec:	e4ea      	b.n	8008ec4 <_svfprintf_r+0x48>
 80094ee:	9b08      	ldr	r3, [sp, #32]
 80094f0:	900c      	str	r0, [sp, #48]	; 0x30
 80094f2:	3301      	adds	r3, #1
 80094f4:	d100      	bne.n	80094f8 <_svfprintf_r+0x67c>
 80094f6:	e08b      	b.n	8009610 <_svfprintf_r+0x794>
 80094f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094fa:	2b47      	cmp	r3, #71	; 0x47
 80094fc:	d103      	bne.n	8009506 <_svfprintf_r+0x68a>
 80094fe:	9b08      	ldr	r3, [sp, #32]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d100      	bne.n	8009506 <_svfprintf_r+0x68a>
 8009504:	e087      	b.n	8009616 <_svfprintf_r+0x79a>
 8009506:	2380      	movs	r3, #128	; 0x80
 8009508:	005b      	lsls	r3, r3, #1
 800950a:	4333      	orrs	r3, r6
 800950c:	9320      	str	r3, [sp, #128]	; 0x80
 800950e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009510:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8009512:	2b00      	cmp	r3, #0
 8009514:	db00      	blt.n	8009518 <_svfprintf_r+0x69c>
 8009516:	e082      	b.n	800961e <_svfprintf_r+0x7a2>
 8009518:	2280      	movs	r2, #128	; 0x80
 800951a:	0612      	lsls	r2, r2, #24
 800951c:	4694      	mov	ip, r2
 800951e:	4463      	add	r3, ip
 8009520:	930d      	str	r3, [sp, #52]	; 0x34
 8009522:	232d      	movs	r3, #45	; 0x2d
 8009524:	9322      	str	r3, [sp, #136]	; 0x88
 8009526:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009528:	2b41      	cmp	r3, #65	; 0x41
 800952a:	d000      	beq.n	800952e <_svfprintf_r+0x6b2>
 800952c:	e105      	b.n	800973a <_svfprintf_r+0x8be>
 800952e:	aa26      	add	r2, sp, #152	; 0x98
 8009530:	0020      	movs	r0, r4
 8009532:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009534:	f002 fb82 	bl	800bc3c <frexp>
 8009538:	23ff      	movs	r3, #255	; 0xff
 800953a:	2200      	movs	r2, #0
 800953c:	059b      	lsls	r3, r3, #22
 800953e:	f7f8 fcb9 	bl	8001eb4 <__aeabi_dmul>
 8009542:	2200      	movs	r2, #0
 8009544:	2300      	movs	r3, #0
 8009546:	0004      	movs	r4, r0
 8009548:	000d      	movs	r5, r1
 800954a:	f7f6 ff7f 	bl	800044c <__aeabi_dcmpeq>
 800954e:	2800      	cmp	r0, #0
 8009550:	d001      	beq.n	8009556 <_svfprintf_r+0x6da>
 8009552:	2301      	movs	r3, #1
 8009554:	9326      	str	r3, [sp, #152]	; 0x98
 8009556:	4b83      	ldr	r3, [pc, #524]	; (8009764 <_svfprintf_r+0x8e8>)
 8009558:	9317      	str	r3, [sp, #92]	; 0x5c
 800955a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800955c:	2b61      	cmp	r3, #97	; 0x61
 800955e:	d101      	bne.n	8009564 <_svfprintf_r+0x6e8>
 8009560:	4b81      	ldr	r3, [pc, #516]	; (8009768 <_svfprintf_r+0x8ec>)
 8009562:	9317      	str	r3, [sp, #92]	; 0x5c
 8009564:	9b08      	ldr	r3, [sp, #32]
 8009566:	3b01      	subs	r3, #1
 8009568:	9310      	str	r3, [sp, #64]	; 0x40
 800956a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800956c:	9318      	str	r3, [sp, #96]	; 0x60
 800956e:	2200      	movs	r2, #0
 8009570:	4b7e      	ldr	r3, [pc, #504]	; (800976c <_svfprintf_r+0x8f0>)
 8009572:	0020      	movs	r0, r4
 8009574:	0029      	movs	r1, r5
 8009576:	f7f8 fc9d 	bl	8001eb4 <__aeabi_dmul>
 800957a:	000d      	movs	r5, r1
 800957c:	0004      	movs	r4, r0
 800957e:	f7f9 fa6f 	bl	8002a60 <__aeabi_d2iz>
 8009582:	9021      	str	r0, [sp, #132]	; 0x84
 8009584:	f7f9 faa2 	bl	8002acc <__aeabi_i2d>
 8009588:	0002      	movs	r2, r0
 800958a:	000b      	movs	r3, r1
 800958c:	0020      	movs	r0, r4
 800958e:	0029      	movs	r1, r5
 8009590:	f7f8 ff02 	bl	8002398 <__aeabi_dsub>
 8009594:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009596:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009598:	3301      	adds	r3, #1
 800959a:	930d      	str	r3, [sp, #52]	; 0x34
 800959c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800959e:	0004      	movs	r4, r0
 80095a0:	5c9b      	ldrb	r3, [r3, r2]
 80095a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80095a4:	000d      	movs	r5, r1
 80095a6:	7013      	strb	r3, [r2, #0]
 80095a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80095aa:	9323      	str	r3, [sp, #140]	; 0x8c
 80095ac:	3301      	adds	r3, #1
 80095ae:	d00a      	beq.n	80095c6 <_svfprintf_r+0x74a>
 80095b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80095b2:	2200      	movs	r2, #0
 80095b4:	3b01      	subs	r3, #1
 80095b6:	9310      	str	r3, [sp, #64]	; 0x40
 80095b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095ba:	9318      	str	r3, [sp, #96]	; 0x60
 80095bc:	2300      	movs	r3, #0
 80095be:	f7f6 ff45 	bl	800044c <__aeabi_dcmpeq>
 80095c2:	2800      	cmp	r0, #0
 80095c4:	d0d3      	beq.n	800956e <_svfprintf_r+0x6f2>
 80095c6:	2200      	movs	r2, #0
 80095c8:	4b69      	ldr	r3, [pc, #420]	; (8009770 <_svfprintf_r+0x8f4>)
 80095ca:	0020      	movs	r0, r4
 80095cc:	0029      	movs	r1, r5
 80095ce:	f7f6 ff57 	bl	8000480 <__aeabi_dcmpgt>
 80095d2:	2800      	cmp	r0, #0
 80095d4:	d126      	bne.n	8009624 <_svfprintf_r+0x7a8>
 80095d6:	2200      	movs	r2, #0
 80095d8:	4b65      	ldr	r3, [pc, #404]	; (8009770 <_svfprintf_r+0x8f4>)
 80095da:	0020      	movs	r0, r4
 80095dc:	0029      	movs	r1, r5
 80095de:	f7f6 ff35 	bl	800044c <__aeabi_dcmpeq>
 80095e2:	2800      	cmp	r0, #0
 80095e4:	d002      	beq.n	80095ec <_svfprintf_r+0x770>
 80095e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095e8:	07db      	lsls	r3, r3, #31
 80095ea:	d41b      	bmi.n	8009624 <_svfprintf_r+0x7a8>
 80095ec:	2130      	movs	r1, #48	; 0x30
 80095ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095f0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80095f2:	1898      	adds	r0, r3, r2
 80095f4:	930d      	str	r3, [sp, #52]	; 0x34
 80095f6:	1ac2      	subs	r2, r0, r3
 80095f8:	d426      	bmi.n	8009648 <_svfprintf_r+0x7cc>
 80095fa:	7019      	strb	r1, [r3, #0]
 80095fc:	3301      	adds	r3, #1
 80095fe:	e7f9      	b.n	80095f4 <_svfprintf_r+0x778>
 8009600:	2300      	movs	r3, #0
 8009602:	930c      	str	r3, [sp, #48]	; 0x30
 8009604:	ab3f      	add	r3, sp, #252	; 0xfc
 8009606:	9309      	str	r3, [sp, #36]	; 0x24
 8009608:	e77d      	b.n	8009506 <_svfprintf_r+0x68a>
 800960a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800960c:	930c      	str	r3, [sp, #48]	; 0x30
 800960e:	e77a      	b.n	8009506 <_svfprintf_r+0x68a>
 8009610:	2306      	movs	r3, #6
 8009612:	9308      	str	r3, [sp, #32]
 8009614:	e777      	b.n	8009506 <_svfprintf_r+0x68a>
 8009616:	9b08      	ldr	r3, [sp, #32]
 8009618:	930c      	str	r3, [sp, #48]	; 0x30
 800961a:	2301      	movs	r3, #1
 800961c:	e7f9      	b.n	8009612 <_svfprintf_r+0x796>
 800961e:	930d      	str	r3, [sp, #52]	; 0x34
 8009620:	2300      	movs	r3, #0
 8009622:	e77f      	b.n	8009524 <_svfprintf_r+0x6a8>
 8009624:	2030      	movs	r0, #48	; 0x30
 8009626:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009628:	932a      	str	r3, [sp, #168]	; 0xa8
 800962a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800962c:	7bda      	ldrb	r2, [r3, #15]
 800962e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009630:	3b01      	subs	r3, #1
 8009632:	932a      	str	r3, [sp, #168]	; 0xa8
 8009634:	7819      	ldrb	r1, [r3, #0]
 8009636:	4291      	cmp	r1, r2
 8009638:	d07d      	beq.n	8009736 <_svfprintf_r+0x8ba>
 800963a:	1c4a      	adds	r2, r1, #1
 800963c:	b2d2      	uxtb	r2, r2
 800963e:	2939      	cmp	r1, #57	; 0x39
 8009640:	d101      	bne.n	8009646 <_svfprintf_r+0x7ca>
 8009642:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009644:	7a92      	ldrb	r2, [r2, #10]
 8009646:	701a      	strb	r2, [r3, #0]
 8009648:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800964a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800964c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800964e:	1a9b      	subs	r3, r3, r2
 8009650:	930d      	str	r3, [sp, #52]	; 0x34
 8009652:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009654:	2b47      	cmp	r3, #71	; 0x47
 8009656:	d000      	beq.n	800965a <_svfprintf_r+0x7de>
 8009658:	e0d2      	b.n	8009800 <_svfprintf_r+0x984>
 800965a:	1ceb      	adds	r3, r5, #3
 800965c:	db03      	blt.n	8009666 <_svfprintf_r+0x7ea>
 800965e:	9b08      	ldr	r3, [sp, #32]
 8009660:	42ab      	cmp	r3, r5
 8009662:	db00      	blt.n	8009666 <_svfprintf_r+0x7ea>
 8009664:	e0fd      	b.n	8009862 <_svfprintf_r+0x9e6>
 8009666:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009668:	3b02      	subs	r3, #2
 800966a:	930e      	str	r3, [sp, #56]	; 0x38
 800966c:	2238      	movs	r2, #56	; 0x38
 800966e:	466b      	mov	r3, sp
 8009670:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009672:	189b      	adds	r3, r3, r2
 8009674:	3a18      	subs	r2, #24
 8009676:	4391      	bics	r1, r2
 8009678:	1e6c      	subs	r4, r5, #1
 800967a:	000a      	movs	r2, r1
 800967c:	9426      	str	r4, [sp, #152]	; 0x98
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	2100      	movs	r1, #0
 8009682:	2a41      	cmp	r2, #65	; 0x41
 8009684:	d102      	bne.n	800968c <_svfprintf_r+0x810>
 8009686:	330f      	adds	r3, #15
 8009688:	b2db      	uxtb	r3, r3
 800968a:	3101      	adds	r1, #1
 800968c:	aa28      	add	r2, sp, #160	; 0xa0
 800968e:	7013      	strb	r3, [r2, #0]
 8009690:	232b      	movs	r3, #43	; 0x2b
 8009692:	2c00      	cmp	r4, #0
 8009694:	da02      	bge.n	800969c <_svfprintf_r+0x820>
 8009696:	2401      	movs	r4, #1
 8009698:	232d      	movs	r3, #45	; 0x2d
 800969a:	1b64      	subs	r4, r4, r5
 800969c:	7053      	strb	r3, [r2, #1]
 800969e:	2c09      	cmp	r4, #9
 80096a0:	dc00      	bgt.n	80096a4 <_svfprintf_r+0x828>
 80096a2:	e0c7      	b.n	8009834 <_svfprintf_r+0x9b8>
 80096a4:	2537      	movs	r5, #55	; 0x37
 80096a6:	ab1e      	add	r3, sp, #120	; 0x78
 80096a8:	18ed      	adds	r5, r5, r3
 80096aa:	1e6b      	subs	r3, r5, #1
 80096ac:	0020      	movs	r0, r4
 80096ae:	210a      	movs	r1, #10
 80096b0:	9308      	str	r3, [sp, #32]
 80096b2:	f7f6 feb5 	bl	8000420 <__aeabi_idivmod>
 80096b6:	1e6b      	subs	r3, r5, #1
 80096b8:	3130      	adds	r1, #48	; 0x30
 80096ba:	7019      	strb	r1, [r3, #0]
 80096bc:	0020      	movs	r0, r4
 80096be:	210a      	movs	r1, #10
 80096c0:	f7f6 fdc8 	bl	8000254 <__divsi3>
 80096c4:	0004      	movs	r4, r0
 80096c6:	2809      	cmp	r0, #9
 80096c8:	dd00      	ble.n	80096cc <_svfprintf_r+0x850>
 80096ca:	e0ac      	b.n	8009826 <_svfprintf_r+0x9aa>
 80096cc:	232a      	movs	r3, #42	; 0x2a
 80096ce:	2137      	movs	r1, #55	; 0x37
 80096d0:	aa1e      	add	r2, sp, #120	; 0x78
 80096d2:	3d02      	subs	r5, #2
 80096d4:	3430      	adds	r4, #48	; 0x30
 80096d6:	702c      	strb	r4, [r5, #0]
 80096d8:	189b      	adds	r3, r3, r2
 80096da:	1889      	adds	r1, r1, r2
 80096dc:	001a      	movs	r2, r3
 80096de:	428d      	cmp	r5, r1
 80096e0:	d200      	bcs.n	80096e4 <_svfprintf_r+0x868>
 80096e2:	e0a2      	b.n	800982a <_svfprintf_r+0x9ae>
 80096e4:	ab28      	add	r3, sp, #160	; 0xa0
 80096e6:	1ad3      	subs	r3, r2, r3
 80096e8:	931d      	str	r3, [sp, #116]	; 0x74
 80096ea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80096ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096ee:	4694      	mov	ip, r2
 80096f0:	4463      	add	r3, ip
 80096f2:	9308      	str	r3, [sp, #32]
 80096f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	dc01      	bgt.n	80096fe <_svfprintf_r+0x882>
 80096fa:	07f3      	lsls	r3, r6, #31
 80096fc:	d504      	bpl.n	8009708 <_svfprintf_r+0x88c>
 80096fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009700:	9b08      	ldr	r3, [sp, #32]
 8009702:	4694      	mov	ip, r2
 8009704:	4463      	add	r3, ip
 8009706:	9308      	str	r3, [sp, #32]
 8009708:	2280      	movs	r2, #128	; 0x80
 800970a:	4b1a      	ldr	r3, [pc, #104]	; (8009774 <_svfprintf_r+0x8f8>)
 800970c:	0052      	lsls	r2, r2, #1
 800970e:	4033      	ands	r3, r6
 8009710:	431a      	orrs	r2, r3
 8009712:	2300      	movs	r3, #0
 8009714:	001d      	movs	r5, r3
 8009716:	9220      	str	r2, [sp, #128]	; 0x80
 8009718:	9310      	str	r3, [sp, #64]	; 0x40
 800971a:	930f      	str	r3, [sp, #60]	; 0x3c
 800971c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800971e:	2b00      	cmp	r3, #0
 8009720:	d100      	bne.n	8009724 <_svfprintf_r+0x8a8>
 8009722:	e270      	b.n	8009c06 <_svfprintf_r+0xd8a>
 8009724:	231b      	movs	r3, #27
 8009726:	aa1e      	add	r2, sp, #120	; 0x78
 8009728:	189b      	adds	r3, r3, r2
 800972a:	222d      	movs	r2, #45	; 0x2d
 800972c:	701a      	strb	r2, [r3, #0]
 800972e:	2300      	movs	r3, #0
 8009730:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8009732:	9317      	str	r3, [sp, #92]	; 0x5c
 8009734:	e539      	b.n	80091aa <_svfprintf_r+0x32e>
 8009736:	7018      	strb	r0, [r3, #0]
 8009738:	e779      	b.n	800962e <_svfprintf_r+0x7b2>
 800973a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800973c:	2b46      	cmp	r3, #70	; 0x46
 800973e:	d01b      	beq.n	8009778 <_svfprintf_r+0x8fc>
 8009740:	9d08      	ldr	r5, [sp, #32]
 8009742:	2b45      	cmp	r3, #69	; 0x45
 8009744:	d101      	bne.n	800974a <_svfprintf_r+0x8ce>
 8009746:	9b08      	ldr	r3, [sp, #32]
 8009748:	1c5d      	adds	r5, r3, #1
 800974a:	2302      	movs	r3, #2
 800974c:	e016      	b.n	800977c <_svfprintf_r+0x900>
 800974e:	46c0      	nop			; (mov r8, r8)
 8009750:	7fefffff 	.word	0x7fefffff
 8009754:	0800c9e0 	.word	0x0800c9e0
 8009758:	0800c9dc 	.word	0x0800c9dc
 800975c:	0800c9e8 	.word	0x0800c9e8
 8009760:	0800c9e4 	.word	0x0800c9e4
 8009764:	0800c9fd 	.word	0x0800c9fd
 8009768:	0800c9ec 	.word	0x0800c9ec
 800976c:	40300000 	.word	0x40300000
 8009770:	3fe00000 	.word	0x3fe00000
 8009774:	fffffbff 	.word	0xfffffbff
 8009778:	2303      	movs	r3, #3
 800977a:	9d08      	ldr	r5, [sp, #32]
 800977c:	aa2a      	add	r2, sp, #168	; 0xa8
 800977e:	9204      	str	r2, [sp, #16]
 8009780:	aa27      	add	r2, sp, #156	; 0x9c
 8009782:	9203      	str	r2, [sp, #12]
 8009784:	aa26      	add	r2, sp, #152	; 0x98
 8009786:	9202      	str	r2, [sp, #8]
 8009788:	9300      	str	r3, [sp, #0]
 800978a:	9501      	str	r5, [sp, #4]
 800978c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800978e:	0022      	movs	r2, r4
 8009790:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009792:	f000 fe61 	bl	800a458 <_dtoa_r>
 8009796:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009798:	9009      	str	r0, [sp, #36]	; 0x24
 800979a:	2b47      	cmp	r3, #71	; 0x47
 800979c:	d101      	bne.n	80097a2 <_svfprintf_r+0x926>
 800979e:	07f3      	lsls	r3, r6, #31
 80097a0:	d524      	bpl.n	80097ec <_svfprintf_r+0x970>
 80097a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a4:	195b      	adds	r3, r3, r5
 80097a6:	9310      	str	r3, [sp, #64]	; 0x40
 80097a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097aa:	2b46      	cmp	r3, #70	; 0x46
 80097ac:	d113      	bne.n	80097d6 <_svfprintf_r+0x95a>
 80097ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	2b30      	cmp	r3, #48	; 0x30
 80097b4:	d10a      	bne.n	80097cc <_svfprintf_r+0x950>
 80097b6:	2200      	movs	r2, #0
 80097b8:	2300      	movs	r3, #0
 80097ba:	0020      	movs	r0, r4
 80097bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80097be:	f7f6 fe45 	bl	800044c <__aeabi_dcmpeq>
 80097c2:	2800      	cmp	r0, #0
 80097c4:	d102      	bne.n	80097cc <_svfprintf_r+0x950>
 80097c6:	2301      	movs	r3, #1
 80097c8:	1b5d      	subs	r5, r3, r5
 80097ca:	9526      	str	r5, [sp, #152]	; 0x98
 80097cc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80097ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80097d0:	4694      	mov	ip, r2
 80097d2:	4463      	add	r3, ip
 80097d4:	9310      	str	r3, [sp, #64]	; 0x40
 80097d6:	2200      	movs	r2, #0
 80097d8:	2300      	movs	r3, #0
 80097da:	0020      	movs	r0, r4
 80097dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80097de:	f7f6 fe35 	bl	800044c <__aeabi_dcmpeq>
 80097e2:	2230      	movs	r2, #48	; 0x30
 80097e4:	2800      	cmp	r0, #0
 80097e6:	d006      	beq.n	80097f6 <_svfprintf_r+0x97a>
 80097e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80097ea:	932a      	str	r3, [sp, #168]	; 0xa8
 80097ec:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80097ee:	e72c      	b.n	800964a <_svfprintf_r+0x7ce>
 80097f0:	1c59      	adds	r1, r3, #1
 80097f2:	912a      	str	r1, [sp, #168]	; 0xa8
 80097f4:	701a      	strb	r2, [r3, #0]
 80097f6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80097f8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80097fa:	4299      	cmp	r1, r3
 80097fc:	d8f8      	bhi.n	80097f0 <_svfprintf_r+0x974>
 80097fe:	e7f5      	b.n	80097ec <_svfprintf_r+0x970>
 8009800:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009802:	2b46      	cmp	r3, #70	; 0x46
 8009804:	d000      	beq.n	8009808 <_svfprintf_r+0x98c>
 8009806:	e731      	b.n	800966c <_svfprintf_r+0x7f0>
 8009808:	9b08      	ldr	r3, [sp, #32]
 800980a:	2d00      	cmp	r5, #0
 800980c:	dd21      	ble.n	8009852 <_svfprintf_r+0x9d6>
 800980e:	2b00      	cmp	r3, #0
 8009810:	d101      	bne.n	8009816 <_svfprintf_r+0x99a>
 8009812:	07f3      	lsls	r3, r6, #31
 8009814:	d54a      	bpl.n	80098ac <_svfprintf_r+0xa30>
 8009816:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009818:	18eb      	adds	r3, r5, r3
 800981a:	9a08      	ldr	r2, [sp, #32]
 800981c:	18d3      	adds	r3, r2, r3
 800981e:	9308      	str	r3, [sp, #32]
 8009820:	2366      	movs	r3, #102	; 0x66
 8009822:	930e      	str	r3, [sp, #56]	; 0x38
 8009824:	e034      	b.n	8009890 <_svfprintf_r+0xa14>
 8009826:	9d08      	ldr	r5, [sp, #32]
 8009828:	e73f      	b.n	80096aa <_svfprintf_r+0x82e>
 800982a:	782a      	ldrb	r2, [r5, #0]
 800982c:	3501      	adds	r5, #1
 800982e:	701a      	strb	r2, [r3, #0]
 8009830:	3301      	adds	r3, #1
 8009832:	e753      	b.n	80096dc <_svfprintf_r+0x860>
 8009834:	232a      	movs	r3, #42	; 0x2a
 8009836:	aa1e      	add	r2, sp, #120	; 0x78
 8009838:	189b      	adds	r3, r3, r2
 800983a:	2900      	cmp	r1, #0
 800983c:	d105      	bne.n	800984a <_svfprintf_r+0x9ce>
 800983e:	2230      	movs	r2, #48	; 0x30
 8009840:	ab28      	add	r3, sp, #160	; 0xa0
 8009842:	709a      	strb	r2, [r3, #2]
 8009844:	232b      	movs	r3, #43	; 0x2b
 8009846:	aa1e      	add	r2, sp, #120	; 0x78
 8009848:	189b      	adds	r3, r3, r2
 800984a:	3430      	adds	r4, #48	; 0x30
 800984c:	1c5a      	adds	r2, r3, #1
 800984e:	701c      	strb	r4, [r3, #0]
 8009850:	e748      	b.n	80096e4 <_svfprintf_r+0x868>
 8009852:	2b00      	cmp	r3, #0
 8009854:	d102      	bne.n	800985c <_svfprintf_r+0x9e0>
 8009856:	3301      	adds	r3, #1
 8009858:	421e      	tst	r6, r3
 800985a:	d029      	beq.n	80098b0 <_svfprintf_r+0xa34>
 800985c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800985e:	3301      	adds	r3, #1
 8009860:	e7db      	b.n	800981a <_svfprintf_r+0x99e>
 8009862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009864:	42ab      	cmp	r3, r5
 8009866:	dc06      	bgt.n	8009876 <_svfprintf_r+0x9fa>
 8009868:	07f3      	lsls	r3, r6, #31
 800986a:	d524      	bpl.n	80098b6 <_svfprintf_r+0xa3a>
 800986c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800986e:	18eb      	adds	r3, r5, r3
 8009870:	9308      	str	r3, [sp, #32]
 8009872:	2367      	movs	r3, #103	; 0x67
 8009874:	e7d5      	b.n	8009822 <_svfprintf_r+0x9a6>
 8009876:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009878:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800987a:	4694      	mov	ip, r2
 800987c:	4463      	add	r3, ip
 800987e:	9308      	str	r3, [sp, #32]
 8009880:	2367      	movs	r3, #103	; 0x67
 8009882:	930e      	str	r3, [sp, #56]	; 0x38
 8009884:	2d00      	cmp	r5, #0
 8009886:	dc03      	bgt.n	8009890 <_svfprintf_r+0xa14>
 8009888:	9b08      	ldr	r3, [sp, #32]
 800988a:	1b5b      	subs	r3, r3, r5
 800988c:	3301      	adds	r3, #1
 800988e:	9308      	str	r3, [sp, #32]
 8009890:	2380      	movs	r3, #128	; 0x80
 8009892:	00db      	lsls	r3, r3, #3
 8009894:	401e      	ands	r6, r3
 8009896:	2300      	movs	r3, #0
 8009898:	960f      	str	r6, [sp, #60]	; 0x3c
 800989a:	9310      	str	r3, [sp, #64]	; 0x40
 800989c:	2e00      	cmp	r6, #0
 800989e:	d100      	bne.n	80098a2 <_svfprintf_r+0xa26>
 80098a0:	e73c      	b.n	800971c <_svfprintf_r+0x8a0>
 80098a2:	2d00      	cmp	r5, #0
 80098a4:	dc27      	bgt.n	80098f6 <_svfprintf_r+0xa7a>
 80098a6:	2300      	movs	r3, #0
 80098a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80098aa:	e737      	b.n	800971c <_svfprintf_r+0x8a0>
 80098ac:	9508      	str	r5, [sp, #32]
 80098ae:	e7b7      	b.n	8009820 <_svfprintf_r+0x9a4>
 80098b0:	2266      	movs	r2, #102	; 0x66
 80098b2:	920e      	str	r2, [sp, #56]	; 0x38
 80098b4:	e7eb      	b.n	800988e <_svfprintf_r+0xa12>
 80098b6:	9508      	str	r5, [sp, #32]
 80098b8:	e7db      	b.n	8009872 <_svfprintf_r+0x9f6>
 80098ba:	42ab      	cmp	r3, r5
 80098bc:	da0e      	bge.n	80098dc <_svfprintf_r+0xa60>
 80098be:	1aed      	subs	r5, r5, r3
 80098c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80098c2:	785b      	ldrb	r3, [r3, #1]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d012      	beq.n	80098ee <_svfprintf_r+0xa72>
 80098c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098ca:	3301      	adds	r3, #1
 80098cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80098ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80098d0:	3301      	adds	r3, #1
 80098d2:	9313      	str	r3, [sp, #76]	; 0x4c
 80098d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	2bff      	cmp	r3, #255	; 0xff
 80098da:	d1ee      	bne.n	80098ba <_svfprintf_r+0xa3e>
 80098dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80098de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098e0:	189b      	adds	r3, r3, r2
 80098e2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80098e4:	4353      	muls	r3, r2
 80098e6:	9a08      	ldr	r2, [sp, #32]
 80098e8:	189b      	adds	r3, r3, r2
 80098ea:	9308      	str	r3, [sp, #32]
 80098ec:	e716      	b.n	800971c <_svfprintf_r+0x8a0>
 80098ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098f0:	3301      	adds	r3, #1
 80098f2:	9310      	str	r3, [sp, #64]	; 0x40
 80098f4:	e7ee      	b.n	80098d4 <_svfprintf_r+0xa58>
 80098f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80098fa:	e7eb      	b.n	80098d4 <_svfprintf_r+0xa58>
 80098fc:	0022      	movs	r2, r4
 80098fe:	ca08      	ldmia	r2!, {r3}
 8009900:	9212      	str	r2, [sp, #72]	; 0x48
 8009902:	06b2      	lsls	r2, r6, #26
 8009904:	d508      	bpl.n	8009918 <_svfprintf_r+0xa9c>
 8009906:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009908:	601a      	str	r2, [r3, #0]
 800990a:	17d2      	asrs	r2, r2, #31
 800990c:	605a      	str	r2, [r3, #4]
 800990e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009910:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8009912:	9309      	str	r3, [sp, #36]	; 0x24
 8009914:	f7ff faeb 	bl	8008eee <_svfprintf_r+0x72>
 8009918:	06f2      	lsls	r2, r6, #27
 800991a:	d502      	bpl.n	8009922 <_svfprintf_r+0xaa6>
 800991c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800991e:	601a      	str	r2, [r3, #0]
 8009920:	e7f5      	b.n	800990e <_svfprintf_r+0xa92>
 8009922:	0672      	lsls	r2, r6, #25
 8009924:	d502      	bpl.n	800992c <_svfprintf_r+0xab0>
 8009926:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009928:	801a      	strh	r2, [r3, #0]
 800992a:	e7f0      	b.n	800990e <_svfprintf_r+0xa92>
 800992c:	05b2      	lsls	r2, r6, #22
 800992e:	d5f5      	bpl.n	800991c <_svfprintf_r+0xaa0>
 8009930:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009932:	701a      	strb	r2, [r3, #0]
 8009934:	e7eb      	b.n	800990e <_svfprintf_r+0xa92>
 8009936:	2310      	movs	r3, #16
 8009938:	431e      	orrs	r6, r3
 800993a:	2220      	movs	r2, #32
 800993c:	4032      	ands	r2, r6
 800993e:	d025      	beq.n	800998c <_svfprintf_r+0xb10>
 8009940:	2307      	movs	r3, #7
 8009942:	3407      	adds	r4, #7
 8009944:	439c      	bics	r4, r3
 8009946:	0023      	movs	r3, r4
 8009948:	3308      	adds	r3, #8
 800994a:	9312      	str	r3, [sp, #72]	; 0x48
 800994c:	6823      	ldr	r3, [r4, #0]
 800994e:	6864      	ldr	r4, [r4, #4]
 8009950:	9306      	str	r3, [sp, #24]
 8009952:	9407      	str	r4, [sp, #28]
 8009954:	4bc2      	ldr	r3, [pc, #776]	; (8009c60 <_svfprintf_r+0xde4>)
 8009956:	401e      	ands	r6, r3
 8009958:	2300      	movs	r3, #0
 800995a:	221b      	movs	r2, #27
 800995c:	a91e      	add	r1, sp, #120	; 0x78
 800995e:	1852      	adds	r2, r2, r1
 8009960:	2100      	movs	r1, #0
 8009962:	7011      	strb	r1, [r2, #0]
 8009964:	9a08      	ldr	r2, [sp, #32]
 8009966:	3201      	adds	r2, #1
 8009968:	d100      	bne.n	800996c <_svfprintf_r+0xaf0>
 800996a:	e0a6      	b.n	8009aba <_svfprintf_r+0xc3e>
 800996c:	0032      	movs	r2, r6
 800996e:	2180      	movs	r1, #128	; 0x80
 8009970:	9807      	ldr	r0, [sp, #28]
 8009972:	438e      	bics	r6, r1
 8009974:	9906      	ldr	r1, [sp, #24]
 8009976:	4301      	orrs	r1, r0
 8009978:	d000      	beq.n	800997c <_svfprintf_r+0xb00>
 800997a:	e09e      	b.n	8009aba <_svfprintf_r+0xc3e>
 800997c:	9908      	ldr	r1, [sp, #32]
 800997e:	2900      	cmp	r1, #0
 8009980:	d100      	bne.n	8009984 <_svfprintf_r+0xb08>
 8009982:	e125      	b.n	8009bd0 <_svfprintf_r+0xd54>
 8009984:	2b01      	cmp	r3, #1
 8009986:	d000      	beq.n	800998a <_svfprintf_r+0xb0e>
 8009988:	e09a      	b.n	8009ac0 <_svfprintf_r+0xc44>
 800998a:	e518      	b.n	80093be <_svfprintf_r+0x542>
 800998c:	1d23      	adds	r3, r4, #4
 800998e:	9312      	str	r3, [sp, #72]	; 0x48
 8009990:	2310      	movs	r3, #16
 8009992:	4033      	ands	r3, r6
 8009994:	d003      	beq.n	800999e <_svfprintf_r+0xb22>
 8009996:	6823      	ldr	r3, [r4, #0]
 8009998:	9306      	str	r3, [sp, #24]
 800999a:	9207      	str	r2, [sp, #28]
 800999c:	e7da      	b.n	8009954 <_svfprintf_r+0xad8>
 800999e:	2240      	movs	r2, #64	; 0x40
 80099a0:	4032      	ands	r2, r6
 80099a2:	d004      	beq.n	80099ae <_svfprintf_r+0xb32>
 80099a4:	6822      	ldr	r2, [r4, #0]
 80099a6:	b292      	uxth	r2, r2
 80099a8:	9206      	str	r2, [sp, #24]
 80099aa:	9307      	str	r3, [sp, #28]
 80099ac:	e7d2      	b.n	8009954 <_svfprintf_r+0xad8>
 80099ae:	2380      	movs	r3, #128	; 0x80
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	4033      	ands	r3, r6
 80099b4:	d002      	beq.n	80099bc <_svfprintf_r+0xb40>
 80099b6:	6823      	ldr	r3, [r4, #0]
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	e7ed      	b.n	8009998 <_svfprintf_r+0xb1c>
 80099bc:	6822      	ldr	r2, [r4, #0]
 80099be:	e7f3      	b.n	80099a8 <_svfprintf_r+0xb2c>
 80099c0:	1d23      	adds	r3, r4, #4
 80099c2:	49a8      	ldr	r1, [pc, #672]	; (8009c64 <_svfprintf_r+0xde8>)
 80099c4:	aa25      	add	r2, sp, #148	; 0x94
 80099c6:	9312      	str	r3, [sp, #72]	; 0x48
 80099c8:	6823      	ldr	r3, [r4, #0]
 80099ca:	8011      	strh	r1, [r2, #0]
 80099cc:	4aa6      	ldr	r2, [pc, #664]	; (8009c68 <_svfprintf_r+0xdec>)
 80099ce:	9306      	str	r3, [sp, #24]
 80099d0:	2300      	movs	r3, #0
 80099d2:	921e      	str	r2, [sp, #120]	; 0x78
 80099d4:	2278      	movs	r2, #120	; 0x78
 80099d6:	9307      	str	r3, [sp, #28]
 80099d8:	3302      	adds	r3, #2
 80099da:	431e      	orrs	r6, r3
 80099dc:	920e      	str	r2, [sp, #56]	; 0x38
 80099de:	e7bc      	b.n	800995a <_svfprintf_r+0xade>
 80099e0:	1d23      	adds	r3, r4, #4
 80099e2:	9312      	str	r3, [sp, #72]	; 0x48
 80099e4:	6823      	ldr	r3, [r4, #0]
 80099e6:	2400      	movs	r4, #0
 80099e8:	9309      	str	r3, [sp, #36]	; 0x24
 80099ea:	231b      	movs	r3, #27
 80099ec:	aa1e      	add	r2, sp, #120	; 0x78
 80099ee:	189b      	adds	r3, r3, r2
 80099f0:	701c      	strb	r4, [r3, #0]
 80099f2:	9b08      	ldr	r3, [sp, #32]
 80099f4:	3301      	adds	r3, #1
 80099f6:	d00e      	beq.n	8009a16 <_svfprintf_r+0xb9a>
 80099f8:	9a08      	ldr	r2, [sp, #32]
 80099fa:	0021      	movs	r1, r4
 80099fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099fe:	f7ff f91d 	bl	8008c3c <memchr>
 8009a02:	900c      	str	r0, [sp, #48]	; 0x30
 8009a04:	42a0      	cmp	r0, r4
 8009a06:	d100      	bne.n	8009a0a <_svfprintf_r+0xb8e>
 8009a08:	e100      	b.n	8009c0c <_svfprintf_r+0xd90>
 8009a0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a0c:	1a83      	subs	r3, r0, r2
 8009a0e:	9308      	str	r3, [sp, #32]
 8009a10:	940c      	str	r4, [sp, #48]	; 0x30
 8009a12:	0023      	movs	r3, r4
 8009a14:	e527      	b.n	8009466 <_svfprintf_r+0x5ea>
 8009a16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a18:	f7f6 fb76 	bl	8000108 <strlen>
 8009a1c:	9008      	str	r0, [sp, #32]
 8009a1e:	e7f7      	b.n	8009a10 <_svfprintf_r+0xb94>
 8009a20:	2310      	movs	r3, #16
 8009a22:	431e      	orrs	r6, r3
 8009a24:	2220      	movs	r2, #32
 8009a26:	4032      	ands	r2, r6
 8009a28:	d00b      	beq.n	8009a42 <_svfprintf_r+0xbc6>
 8009a2a:	2307      	movs	r3, #7
 8009a2c:	3407      	adds	r4, #7
 8009a2e:	439c      	bics	r4, r3
 8009a30:	0023      	movs	r3, r4
 8009a32:	3308      	adds	r3, #8
 8009a34:	9312      	str	r3, [sp, #72]	; 0x48
 8009a36:	6823      	ldr	r3, [r4, #0]
 8009a38:	6864      	ldr	r4, [r4, #4]
 8009a3a:	9306      	str	r3, [sp, #24]
 8009a3c:	9407      	str	r4, [sp, #28]
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e78b      	b.n	800995a <_svfprintf_r+0xade>
 8009a42:	1d23      	adds	r3, r4, #4
 8009a44:	9312      	str	r3, [sp, #72]	; 0x48
 8009a46:	2310      	movs	r3, #16
 8009a48:	4033      	ands	r3, r6
 8009a4a:	d003      	beq.n	8009a54 <_svfprintf_r+0xbd8>
 8009a4c:	6823      	ldr	r3, [r4, #0]
 8009a4e:	9306      	str	r3, [sp, #24]
 8009a50:	9207      	str	r2, [sp, #28]
 8009a52:	e7f4      	b.n	8009a3e <_svfprintf_r+0xbc2>
 8009a54:	2240      	movs	r2, #64	; 0x40
 8009a56:	4032      	ands	r2, r6
 8009a58:	d004      	beq.n	8009a64 <_svfprintf_r+0xbe8>
 8009a5a:	6822      	ldr	r2, [r4, #0]
 8009a5c:	b292      	uxth	r2, r2
 8009a5e:	9206      	str	r2, [sp, #24]
 8009a60:	9307      	str	r3, [sp, #28]
 8009a62:	e7ec      	b.n	8009a3e <_svfprintf_r+0xbc2>
 8009a64:	2380      	movs	r3, #128	; 0x80
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	4033      	ands	r3, r6
 8009a6a:	d002      	beq.n	8009a72 <_svfprintf_r+0xbf6>
 8009a6c:	6823      	ldr	r3, [r4, #0]
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	e7ed      	b.n	8009a4e <_svfprintf_r+0xbd2>
 8009a72:	6822      	ldr	r2, [r4, #0]
 8009a74:	e7f3      	b.n	8009a5e <_svfprintf_r+0xbe2>
 8009a76:	4b7c      	ldr	r3, [pc, #496]	; (8009c68 <_svfprintf_r+0xdec>)
 8009a78:	f7ff fad9 	bl	800902e <_svfprintf_r+0x1b2>
 8009a7c:	1d23      	adds	r3, r4, #4
 8009a7e:	9312      	str	r3, [sp, #72]	; 0x48
 8009a80:	2310      	movs	r3, #16
 8009a82:	4033      	ands	r3, r6
 8009a84:	d004      	beq.n	8009a90 <_svfprintf_r+0xc14>
 8009a86:	6823      	ldr	r3, [r4, #0]
 8009a88:	9306      	str	r3, [sp, #24]
 8009a8a:	9207      	str	r2, [sp, #28]
 8009a8c:	f7ff fadf 	bl	800904e <_svfprintf_r+0x1d2>
 8009a90:	2240      	movs	r2, #64	; 0x40
 8009a92:	4032      	ands	r2, r6
 8009a94:	d005      	beq.n	8009aa2 <_svfprintf_r+0xc26>
 8009a96:	6822      	ldr	r2, [r4, #0]
 8009a98:	b292      	uxth	r2, r2
 8009a9a:	9206      	str	r2, [sp, #24]
 8009a9c:	9307      	str	r3, [sp, #28]
 8009a9e:	f7ff fad6 	bl	800904e <_svfprintf_r+0x1d2>
 8009aa2:	2380      	movs	r3, #128	; 0x80
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	4033      	ands	r3, r6
 8009aa8:	d002      	beq.n	8009ab0 <_svfprintf_r+0xc34>
 8009aaa:	6823      	ldr	r3, [r4, #0]
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	e7eb      	b.n	8009a88 <_svfprintf_r+0xc0c>
 8009ab0:	6822      	ldr	r2, [r4, #0]
 8009ab2:	e7f2      	b.n	8009a9a <_svfprintf_r+0xc1e>
 8009ab4:	0032      	movs	r2, r6
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e759      	b.n	800996e <_svfprintf_r+0xaf2>
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d100      	bne.n	8009ac0 <_svfprintf_r+0xc44>
 8009abe:	e476      	b.n	80093ae <_svfprintf_r+0x532>
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	d06b      	beq.n	8009b9c <_svfprintf_r+0xd20>
 8009ac4:	2507      	movs	r5, #7
 8009ac6:	ab58      	add	r3, sp, #352	; 0x160
 8009ac8:	1e5a      	subs	r2, r3, #1
 8009aca:	9209      	str	r2, [sp, #36]	; 0x24
 8009acc:	9a06      	ldr	r2, [sp, #24]
 8009ace:	1e59      	subs	r1, r3, #1
 8009ad0:	402a      	ands	r2, r5
 8009ad2:	3230      	adds	r2, #48	; 0x30
 8009ad4:	700a      	strb	r2, [r1, #0]
 8009ad6:	9907      	ldr	r1, [sp, #28]
 8009ad8:	074c      	lsls	r4, r1, #29
 8009ada:	9906      	ldr	r1, [sp, #24]
 8009adc:	08c8      	lsrs	r0, r1, #3
 8009ade:	9907      	ldr	r1, [sp, #28]
 8009ae0:	4304      	orrs	r4, r0
 8009ae2:	08c9      	lsrs	r1, r1, #3
 8009ae4:	9107      	str	r1, [sp, #28]
 8009ae6:	0021      	movs	r1, r4
 8009ae8:	9807      	ldr	r0, [sp, #28]
 8009aea:	9406      	str	r4, [sp, #24]
 8009aec:	4301      	orrs	r1, r0
 8009aee:	d111      	bne.n	8009b14 <_svfprintf_r+0xc98>
 8009af0:	07f1      	lsls	r1, r6, #31
 8009af2:	d502      	bpl.n	8009afa <_svfprintf_r+0xc7e>
 8009af4:	3b02      	subs	r3, #2
 8009af6:	2a30      	cmp	r2, #48	; 0x30
 8009af8:	d173      	bne.n	8009be2 <_svfprintf_r+0xd66>
 8009afa:	9b08      	ldr	r3, [sp, #32]
 8009afc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009afe:	9317      	str	r3, [sp, #92]	; 0x5c
 8009b00:	ab58      	add	r3, sp, #352	; 0x160
 8009b02:	1a9b      	subs	r3, r3, r2
 8009b04:	9308      	str	r3, [sp, #32]
 8009b06:	2300      	movs	r3, #0
 8009b08:	930c      	str	r3, [sp, #48]	; 0x30
 8009b0a:	9310      	str	r3, [sp, #64]	; 0x40
 8009b0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b0e:	001d      	movs	r5, r3
 8009b10:	f7ff fb4b 	bl	80091aa <_svfprintf_r+0x32e>
 8009b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b16:	e7d7      	b.n	8009ac8 <_svfprintf_r+0xc4c>
 8009b18:	2480      	movs	r4, #128	; 0x80
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	00e4      	lsls	r4, r4, #3
 8009b1e:	930d      	str	r3, [sp, #52]	; 0x34
 8009b20:	4034      	ands	r4, r6
 8009b22:	ab58      	add	r3, sp, #352	; 0x160
 8009b24:	3b01      	subs	r3, #1
 8009b26:	9309      	str	r3, [sp, #36]	; 0x24
 8009b28:	220a      	movs	r2, #10
 8009b2a:	9806      	ldr	r0, [sp, #24]
 8009b2c:	9907      	ldr	r1, [sp, #28]
 8009b2e:	2300      	movs	r3, #0
 8009b30:	f7f6 fcf4 	bl	800051c <__aeabi_uldivmod>
 8009b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b36:	3230      	adds	r2, #48	; 0x30
 8009b38:	701a      	strb	r2, [r3, #0]
 8009b3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	930d      	str	r3, [sp, #52]	; 0x34
 8009b40:	2c00      	cmp	r4, #0
 8009b42:	d01d      	beq.n	8009b80 <_svfprintf_r+0xd04>
 8009b44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d118      	bne.n	8009b80 <_svfprintf_r+0xd04>
 8009b4e:	2aff      	cmp	r2, #255	; 0xff
 8009b50:	d016      	beq.n	8009b80 <_svfprintf_r+0xd04>
 8009b52:	9b07      	ldr	r3, [sp, #28]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d102      	bne.n	8009b5e <_svfprintf_r+0xce2>
 8009b58:	9b06      	ldr	r3, [sp, #24]
 8009b5a:	2b09      	cmp	r3, #9
 8009b5c:	d910      	bls.n	8009b80 <_svfprintf_r+0xd04>
 8009b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b60:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009b62:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8009b64:	1a9b      	subs	r3, r3, r2
 8009b66:	0018      	movs	r0, r3
 8009b68:	9309      	str	r3, [sp, #36]	; 0x24
 8009b6a:	f002 f8ab 	bl	800bcc4 <strncpy>
 8009b6e:	2200      	movs	r2, #0
 8009b70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b72:	920d      	str	r2, [sp, #52]	; 0x34
 8009b74:	785b      	ldrb	r3, [r3, #1]
 8009b76:	1e5a      	subs	r2, r3, #1
 8009b78:	4193      	sbcs	r3, r2
 8009b7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009b7c:	18d3      	adds	r3, r2, r3
 8009b7e:	9313      	str	r3, [sp, #76]	; 0x4c
 8009b80:	220a      	movs	r2, #10
 8009b82:	9806      	ldr	r0, [sp, #24]
 8009b84:	9907      	ldr	r1, [sp, #28]
 8009b86:	2300      	movs	r3, #0
 8009b88:	f7f6 fcc8 	bl	800051c <__aeabi_uldivmod>
 8009b8c:	9006      	str	r0, [sp, #24]
 8009b8e:	9107      	str	r1, [sp, #28]
 8009b90:	9b06      	ldr	r3, [sp, #24]
 8009b92:	9a07      	ldr	r2, [sp, #28]
 8009b94:	4313      	orrs	r3, r2
 8009b96:	d0b0      	beq.n	8009afa <_svfprintf_r+0xc7e>
 8009b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b9a:	e7c3      	b.n	8009b24 <_svfprintf_r+0xca8>
 8009b9c:	200f      	movs	r0, #15
 8009b9e:	ab58      	add	r3, sp, #352	; 0x160
 8009ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ba4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8009baa:	9b06      	ldr	r3, [sp, #24]
 8009bac:	4003      	ands	r3, r0
 8009bae:	5cd3      	ldrb	r3, [r2, r3]
 8009bb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bb2:	7013      	strb	r3, [r2, #0]
 8009bb4:	9b07      	ldr	r3, [sp, #28]
 8009bb6:	0719      	lsls	r1, r3, #28
 8009bb8:	9b06      	ldr	r3, [sp, #24]
 8009bba:	091a      	lsrs	r2, r3, #4
 8009bbc:	9b07      	ldr	r3, [sp, #28]
 8009bbe:	4311      	orrs	r1, r2
 8009bc0:	091b      	lsrs	r3, r3, #4
 8009bc2:	9307      	str	r3, [sp, #28]
 8009bc4:	000b      	movs	r3, r1
 8009bc6:	9a07      	ldr	r2, [sp, #28]
 8009bc8:	9106      	str	r1, [sp, #24]
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	d1e9      	bne.n	8009ba2 <_svfprintf_r+0xd26>
 8009bce:	e794      	b.n	8009afa <_svfprintf_r+0xc7e>
 8009bd0:	a958      	add	r1, sp, #352	; 0x160
 8009bd2:	9109      	str	r1, [sp, #36]	; 0x24
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d190      	bne.n	8009afa <_svfprintf_r+0xc7e>
 8009bd8:	07d3      	lsls	r3, r2, #31
 8009bda:	d58e      	bpl.n	8009afa <_svfprintf_r+0xc7e>
 8009bdc:	23e7      	movs	r3, #231	; 0xe7
 8009bde:	aa1e      	add	r2, sp, #120	; 0x78
 8009be0:	189b      	adds	r3, r3, r2
 8009be2:	2230      	movs	r2, #48	; 0x30
 8009be4:	f7ff fbf0 	bl	80093c8 <_svfprintf_r+0x54c>
 8009be8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d100      	bne.n	8009bf0 <_svfprintf_r+0xd74>
 8009bee:	e38a      	b.n	800a306 <_svfprintf_r+0x148a>
 8009bf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bf2:	ab3f      	add	r3, sp, #252	; 0xfc
 8009bf4:	701a      	strb	r2, [r3, #0]
 8009bf6:	221b      	movs	r2, #27
 8009bf8:	2000      	movs	r0, #0
 8009bfa:	a91e      	add	r1, sp, #120	; 0x78
 8009bfc:	1852      	adds	r2, r2, r1
 8009bfe:	7010      	strb	r0, [r2, #0]
 8009c00:	9412      	str	r4, [sp, #72]	; 0x48
 8009c02:	f7ff faca 	bl	800919a <_svfprintf_r+0x31e>
 8009c06:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8009c08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c0a:	e592      	b.n	8009732 <_svfprintf_r+0x8b6>
 8009c0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c0e:	e42a      	b.n	8009466 <_svfprintf_r+0x5ea>
 8009c10:	2010      	movs	r0, #16
 8009c12:	1812      	adds	r2, r2, r0
 8009c14:	6078      	str	r0, [r7, #4]
 8009c16:	922e      	str	r2, [sp, #184]	; 0xb8
 8009c18:	932d      	str	r3, [sp, #180]	; 0xb4
 8009c1a:	2b07      	cmp	r3, #7
 8009c1c:	dd08      	ble.n	8009c30 <_svfprintf_r+0xdb4>
 8009c1e:	aa2c      	add	r2, sp, #176	; 0xb0
 8009c20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c22:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009c24:	f002 f862 	bl	800bcec <__ssprint_r>
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	d000      	beq.n	8009c2e <_svfprintf_r+0xdb2>
 8009c2c:	e34a      	b.n	800a2c4 <_svfprintf_r+0x1448>
 8009c2e:	a92f      	add	r1, sp, #188	; 0xbc
 8009c30:	3c10      	subs	r4, #16
 8009c32:	000f      	movs	r7, r1
 8009c34:	f7ff fad8 	bl	80091e8 <_svfprintf_r+0x36c>
 8009c38:	2010      	movs	r0, #16
 8009c3a:	1812      	adds	r2, r2, r0
 8009c3c:	6078      	str	r0, [r7, #4]
 8009c3e:	922e      	str	r2, [sp, #184]	; 0xb8
 8009c40:	932d      	str	r3, [sp, #180]	; 0xb4
 8009c42:	2b07      	cmp	r3, #7
 8009c44:	dd08      	ble.n	8009c58 <_svfprintf_r+0xddc>
 8009c46:	aa2c      	add	r2, sp, #176	; 0xb0
 8009c48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009c4c:	f002 f84e 	bl	800bcec <__ssprint_r>
 8009c50:	2800      	cmp	r0, #0
 8009c52:	d000      	beq.n	8009c56 <_svfprintf_r+0xdda>
 8009c54:	e336      	b.n	800a2c4 <_svfprintf_r+0x1448>
 8009c56:	a92f      	add	r1, sp, #188	; 0xbc
 8009c58:	3c10      	subs	r4, #16
 8009c5a:	000f      	movs	r7, r1
 8009c5c:	f7ff fb24 	bl	80092a8 <_svfprintf_r+0x42c>
 8009c60:	fffffbff 	.word	0xfffffbff
 8009c64:	00007830 	.word	0x00007830
 8009c68:	0800c9ec 	.word	0x0800c9ec
 8009c6c:	2010      	movs	r0, #16
 8009c6e:	1812      	adds	r2, r2, r0
 8009c70:	6078      	str	r0, [r7, #4]
 8009c72:	922e      	str	r2, [sp, #184]	; 0xb8
 8009c74:	932d      	str	r3, [sp, #180]	; 0xb4
 8009c76:	2b07      	cmp	r3, #7
 8009c78:	dd08      	ble.n	8009c8c <_svfprintf_r+0xe10>
 8009c7a:	aa2c      	add	r2, sp, #176	; 0xb0
 8009c7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c7e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009c80:	f002 f834 	bl	800bcec <__ssprint_r>
 8009c84:	2800      	cmp	r0, #0
 8009c86:	d000      	beq.n	8009c8a <_svfprintf_r+0xe0e>
 8009c88:	e31c      	b.n	800a2c4 <_svfprintf_r+0x1448>
 8009c8a:	a92f      	add	r1, sp, #188	; 0xbc
 8009c8c:	3c10      	subs	r4, #16
 8009c8e:	000f      	movs	r7, r1
 8009c90:	f7ff fb2c 	bl	80092ec <_svfprintf_r+0x470>
 8009c94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c96:	2b65      	cmp	r3, #101	; 0x65
 8009c98:	dc00      	bgt.n	8009c9c <_svfprintf_r+0xe20>
 8009c9a:	e259      	b.n	800a150 <_svfprintf_r+0x12d4>
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	981a      	ldr	r0, [sp, #104]	; 0x68
 8009ca2:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009ca4:	f7f6 fbd2 	bl	800044c <__aeabi_dcmpeq>
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	d07c      	beq.n	8009da6 <_svfprintf_r+0xf2a>
 8009cac:	4b81      	ldr	r3, [pc, #516]	; (8009eb4 <_svfprintf_r+0x1038>)
 8009cae:	603b      	str	r3, [r7, #0]
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	607b      	str	r3, [r7, #4]
 8009cb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	3301      	adds	r3, #1
 8009cba:	932e      	str	r3, [sp, #184]	; 0xb8
 8009cbc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009cbe:	9308      	str	r3, [sp, #32]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	932d      	str	r3, [sp, #180]	; 0xb4
 8009cc4:	2b07      	cmp	r3, #7
 8009cc6:	dd08      	ble.n	8009cda <_svfprintf_r+0xe5e>
 8009cc8:	aa2c      	add	r2, sp, #176	; 0xb0
 8009cca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ccc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009cce:	f002 f80d 	bl	800bcec <__ssprint_r>
 8009cd2:	2800      	cmp	r0, #0
 8009cd4:	d000      	beq.n	8009cd8 <_svfprintf_r+0xe5c>
 8009cd6:	e2f5      	b.n	800a2c4 <_svfprintf_r+0x1448>
 8009cd8:	af2f      	add	r7, sp, #188	; 0xbc
 8009cda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009cdc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	db01      	blt.n	8009ce6 <_svfprintf_r+0xe6a>
 8009ce2:	07f3      	lsls	r3, r6, #31
 8009ce4:	d51d      	bpl.n	8009d22 <_svfprintf_r+0xea6>
 8009ce6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009ce8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009cea:	4694      	mov	ip, r2
 8009cec:	603b      	str	r3, [r7, #0]
 8009cee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009cf0:	607b      	str	r3, [r7, #4]
 8009cf2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009cf4:	3708      	adds	r7, #8
 8009cf6:	4463      	add	r3, ip
 8009cf8:	932e      	str	r3, [sp, #184]	; 0xb8
 8009cfa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009cfc:	9308      	str	r3, [sp, #32]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	932d      	str	r3, [sp, #180]	; 0xb4
 8009d02:	2b07      	cmp	r3, #7
 8009d04:	dd08      	ble.n	8009d18 <_svfprintf_r+0xe9c>
 8009d06:	aa2c      	add	r2, sp, #176	; 0xb0
 8009d08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d0a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009d0c:	f001 ffee 	bl	800bcec <__ssprint_r>
 8009d10:	2800      	cmp	r0, #0
 8009d12:	d000      	beq.n	8009d16 <_svfprintf_r+0xe9a>
 8009d14:	e2d6      	b.n	800a2c4 <_svfprintf_r+0x1448>
 8009d16:	af2f      	add	r7, sp, #188	; 0xbc
 8009d18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d1a:	2510      	movs	r5, #16
 8009d1c:	1e5c      	subs	r4, r3, #1
 8009d1e:	2c00      	cmp	r4, #0
 8009d20:	dc2f      	bgt.n	8009d82 <_svfprintf_r+0xf06>
 8009d22:	0773      	lsls	r3, r6, #29
 8009d24:	d500      	bpl.n	8009d28 <_svfprintf_r+0xeac>
 8009d26:	e2af      	b.n	800a288 <_svfprintf_r+0x140c>
 8009d28:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009d2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	da00      	bge.n	8009d32 <_svfprintf_r+0xeb6>
 8009d30:	0013      	movs	r3, r2
 8009d32:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009d34:	18d3      	adds	r3, r2, r3
 8009d36:	9315      	str	r3, [sp, #84]	; 0x54
 8009d38:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009d3a:	9308      	str	r3, [sp, #32]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d007      	beq.n	8009d50 <_svfprintf_r+0xed4>
 8009d40:	aa2c      	add	r2, sp, #176	; 0xb0
 8009d42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d44:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009d46:	f001 ffd1 	bl	800bcec <__ssprint_r>
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	d000      	beq.n	8009d50 <_svfprintf_r+0xed4>
 8009d4e:	e2b9      	b.n	800a2c4 <_svfprintf_r+0x1448>
 8009d50:	2300      	movs	r3, #0
 8009d52:	932d      	str	r3, [sp, #180]	; 0xb4
 8009d54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d000      	beq.n	8009d5c <_svfprintf_r+0xee0>
 8009d5a:	e2cf      	b.n	800a2fc <_svfprintf_r+0x1480>
 8009d5c:	af2f      	add	r7, sp, #188	; 0xbc
 8009d5e:	e5d6      	b.n	800990e <_svfprintf_r+0xa92>
 8009d60:	3210      	adds	r2, #16
 8009d62:	607d      	str	r5, [r7, #4]
 8009d64:	922e      	str	r2, [sp, #184]	; 0xb8
 8009d66:	932d      	str	r3, [sp, #180]	; 0xb4
 8009d68:	2b07      	cmp	r3, #7
 8009d6a:	dd08      	ble.n	8009d7e <_svfprintf_r+0xf02>
 8009d6c:	aa2c      	add	r2, sp, #176	; 0xb0
 8009d6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d70:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009d72:	f001 ffbb 	bl	800bcec <__ssprint_r>
 8009d76:	2800      	cmp	r0, #0
 8009d78:	d000      	beq.n	8009d7c <_svfprintf_r+0xf00>
 8009d7a:	e2a3      	b.n	800a2c4 <_svfprintf_r+0x1448>
 8009d7c:	a92f      	add	r1, sp, #188	; 0xbc
 8009d7e:	000f      	movs	r7, r1
 8009d80:	3c10      	subs	r4, #16
 8009d82:	0039      	movs	r1, r7
 8009d84:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009d86:	484c      	ldr	r0, [pc, #304]	; (8009eb8 <_svfprintf_r+0x103c>)
 8009d88:	9308      	str	r3, [sp, #32]
 8009d8a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	3108      	adds	r1, #8
 8009d90:	6038      	str	r0, [r7, #0]
 8009d92:	2c10      	cmp	r4, #16
 8009d94:	dce4      	bgt.n	8009d60 <_svfprintf_r+0xee4>
 8009d96:	607c      	str	r4, [r7, #4]
 8009d98:	18a4      	adds	r4, r4, r2
 8009d9a:	942e      	str	r4, [sp, #184]	; 0xb8
 8009d9c:	932d      	str	r3, [sp, #180]	; 0xb4
 8009d9e:	000f      	movs	r7, r1
 8009da0:	2b07      	cmp	r3, #7
 8009da2:	ddbe      	ble.n	8009d22 <_svfprintf_r+0xea6>
 8009da4:	e06a      	b.n	8009e7c <_svfprintf_r+0x1000>
 8009da6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	dd00      	ble.n	8009dae <_svfprintf_r+0xf32>
 8009dac:	e086      	b.n	8009ebc <_svfprintf_r+0x1040>
 8009dae:	4b41      	ldr	r3, [pc, #260]	; (8009eb4 <_svfprintf_r+0x1038>)
 8009db0:	603b      	str	r3, [r7, #0]
 8009db2:	2301      	movs	r3, #1
 8009db4:	607b      	str	r3, [r7, #4]
 8009db6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009db8:	3708      	adds	r7, #8
 8009dba:	3301      	adds	r3, #1
 8009dbc:	932e      	str	r3, [sp, #184]	; 0xb8
 8009dbe:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009dc0:	9308      	str	r3, [sp, #32]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	932d      	str	r3, [sp, #180]	; 0xb4
 8009dc6:	2b07      	cmp	r3, #7
 8009dc8:	dd08      	ble.n	8009ddc <_svfprintf_r+0xf60>
 8009dca:	aa2c      	add	r2, sp, #176	; 0xb0
 8009dcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009dce:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009dd0:	f001 ff8c 	bl	800bcec <__ssprint_r>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	d000      	beq.n	8009dda <_svfprintf_r+0xf5e>
 8009dd8:	e274      	b.n	800a2c4 <_svfprintf_r+0x1448>
 8009dda:	af2f      	add	r7, sp, #188	; 0xbc
 8009ddc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d104      	bne.n	8009dec <_svfprintf_r+0xf70>
 8009de2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d101      	bne.n	8009dec <_svfprintf_r+0xf70>
 8009de8:	07f3      	lsls	r3, r6, #31
 8009dea:	d59a      	bpl.n	8009d22 <_svfprintf_r+0xea6>
 8009dec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009dee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009df0:	4694      	mov	ip, r2
 8009df2:	603b      	str	r3, [r7, #0]
 8009df4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009df6:	607b      	str	r3, [r7, #4]
 8009df8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	4463      	add	r3, ip
 8009dfe:	932e      	str	r3, [sp, #184]	; 0xb8
 8009e00:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009e02:	9308      	str	r3, [sp, #32]
 8009e04:	3301      	adds	r3, #1
 8009e06:	932d      	str	r3, [sp, #180]	; 0xb4
 8009e08:	2b07      	cmp	r3, #7
 8009e0a:	dd08      	ble.n	8009e1e <_svfprintf_r+0xfa2>
 8009e0c:	aa2c      	add	r2, sp, #176	; 0xb0
 8009e0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e10:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009e12:	f001 ff6b 	bl	800bcec <__ssprint_r>
 8009e16:	2800      	cmp	r0, #0
 8009e18:	d000      	beq.n	8009e1c <_svfprintf_r+0xfa0>
 8009e1a:	e253      	b.n	800a2c4 <_svfprintf_r+0x1448>
 8009e1c:	af2f      	add	r7, sp, #188	; 0xbc
 8009e1e:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8009e20:	2c00      	cmp	r4, #0
 8009e22:	da1a      	bge.n	8009e5a <_svfprintf_r+0xfde>
 8009e24:	0039      	movs	r1, r7
 8009e26:	2510      	movs	r5, #16
 8009e28:	4264      	negs	r4, r4
 8009e2a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009e2c:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8009e2e:	9308      	str	r3, [sp, #32]
 8009e30:	1c5a      	adds	r2, r3, #1
 8009e32:	4b21      	ldr	r3, [pc, #132]	; (8009eb8 <_svfprintf_r+0x103c>)
 8009e34:	3708      	adds	r7, #8
 8009e36:	600b      	str	r3, [r1, #0]
 8009e38:	2c10      	cmp	r4, #16
 8009e3a:	dc29      	bgt.n	8009e90 <_svfprintf_r+0x1014>
 8009e3c:	604c      	str	r4, [r1, #4]
 8009e3e:	1824      	adds	r4, r4, r0
 8009e40:	942e      	str	r4, [sp, #184]	; 0xb8
 8009e42:	922d      	str	r2, [sp, #180]	; 0xb4
 8009e44:	2a07      	cmp	r2, #7
 8009e46:	dd08      	ble.n	8009e5a <_svfprintf_r+0xfde>
 8009e48:	aa2c      	add	r2, sp, #176	; 0xb0
 8009e4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e4c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009e4e:	f001 ff4d 	bl	800bcec <__ssprint_r>
 8009e52:	2800      	cmp	r0, #0
 8009e54:	d000      	beq.n	8009e58 <_svfprintf_r+0xfdc>
 8009e56:	e235      	b.n	800a2c4 <_svfprintf_r+0x1448>
 8009e58:	af2f      	add	r7, sp, #188	; 0xbc
 8009e5a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e5e:	468c      	mov	ip, r1
 8009e60:	603b      	str	r3, [r7, #0]
 8009e62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e64:	607b      	str	r3, [r7, #4]
 8009e66:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009e68:	4463      	add	r3, ip
 8009e6a:	932e      	str	r3, [sp, #184]	; 0xb8
 8009e6c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009e6e:	1c5a      	adds	r2, r3, #1
 8009e70:	9308      	str	r3, [sp, #32]
 8009e72:	922d      	str	r2, [sp, #180]	; 0xb4
 8009e74:	2a07      	cmp	r2, #7
 8009e76:	dc01      	bgt.n	8009e7c <_svfprintf_r+0x1000>
 8009e78:	f7ff fa6c 	bl	8009354 <_svfprintf_r+0x4d8>
 8009e7c:	aa2c      	add	r2, sp, #176	; 0xb0
 8009e7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e80:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009e82:	f001 ff33 	bl	800bcec <__ssprint_r>
 8009e86:	2800      	cmp	r0, #0
 8009e88:	d000      	beq.n	8009e8c <_svfprintf_r+0x1010>
 8009e8a:	e21b      	b.n	800a2c4 <_svfprintf_r+0x1448>
 8009e8c:	af2f      	add	r7, sp, #188	; 0xbc
 8009e8e:	e748      	b.n	8009d22 <_svfprintf_r+0xea6>
 8009e90:	3010      	adds	r0, #16
 8009e92:	604d      	str	r5, [r1, #4]
 8009e94:	902e      	str	r0, [sp, #184]	; 0xb8
 8009e96:	922d      	str	r2, [sp, #180]	; 0xb4
 8009e98:	2a07      	cmp	r2, #7
 8009e9a:	dd08      	ble.n	8009eae <_svfprintf_r+0x1032>
 8009e9c:	aa2c      	add	r2, sp, #176	; 0xb0
 8009e9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ea0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009ea2:	f001 ff23 	bl	800bcec <__ssprint_r>
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d000      	beq.n	8009eac <_svfprintf_r+0x1030>
 8009eaa:	e20b      	b.n	800a2c4 <_svfprintf_r+0x1448>
 8009eac:	af2f      	add	r7, sp, #188	; 0xbc
 8009eae:	3c10      	subs	r4, #16
 8009eb0:	0039      	movs	r1, r7
 8009eb2:	e7ba      	b.n	8009e2a <_svfprintf_r+0xfae>
 8009eb4:	0800ca0e 	.word	0x0800ca0e
 8009eb8:	0800ca20 	.word	0x0800ca20
 8009ebc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ebe:	002c      	movs	r4, r5
 8009ec0:	429d      	cmp	r5, r3
 8009ec2:	dd00      	ble.n	8009ec6 <_svfprintf_r+0x104a>
 8009ec4:	001c      	movs	r4, r3
 8009ec6:	2c00      	cmp	r4, #0
 8009ec8:	dd15      	ble.n	8009ef6 <_svfprintf_r+0x107a>
 8009eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ecc:	607c      	str	r4, [r7, #4]
 8009ece:	603b      	str	r3, [r7, #0]
 8009ed0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ed2:	3708      	adds	r7, #8
 8009ed4:	18e3      	adds	r3, r4, r3
 8009ed6:	932e      	str	r3, [sp, #184]	; 0xb8
 8009ed8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009eda:	9308      	str	r3, [sp, #32]
 8009edc:	3301      	adds	r3, #1
 8009ede:	932d      	str	r3, [sp, #180]	; 0xb4
 8009ee0:	2b07      	cmp	r3, #7
 8009ee2:	dd08      	ble.n	8009ef6 <_svfprintf_r+0x107a>
 8009ee4:	aa2c      	add	r2, sp, #176	; 0xb0
 8009ee6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ee8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009eea:	f001 feff 	bl	800bcec <__ssprint_r>
 8009eee:	2800      	cmp	r0, #0
 8009ef0:	d000      	beq.n	8009ef4 <_svfprintf_r+0x1078>
 8009ef2:	e1e7      	b.n	800a2c4 <_svfprintf_r+0x1448>
 8009ef4:	af2f      	add	r7, sp, #188	; 0xbc
 8009ef6:	43e3      	mvns	r3, r4
 8009ef8:	17db      	asrs	r3, r3, #31
 8009efa:	401c      	ands	r4, r3
 8009efc:	1b2c      	subs	r4, r5, r4
 8009efe:	2c00      	cmp	r4, #0
 8009f00:	dd1a      	ble.n	8009f38 <_svfprintf_r+0x10bc>
 8009f02:	0039      	movs	r1, r7
 8009f04:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009f06:	48d4      	ldr	r0, [pc, #848]	; (800a258 <_svfprintf_r+0x13dc>)
 8009f08:	9308      	str	r3, [sp, #32]
 8009f0a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	3108      	adds	r1, #8
 8009f10:	6038      	str	r0, [r7, #0]
 8009f12:	2c10      	cmp	r4, #16
 8009f14:	dd00      	ble.n	8009f18 <_svfprintf_r+0x109c>
 8009f16:	e089      	b.n	800a02c <_svfprintf_r+0x11b0>
 8009f18:	607c      	str	r4, [r7, #4]
 8009f1a:	18a4      	adds	r4, r4, r2
 8009f1c:	942e      	str	r4, [sp, #184]	; 0xb8
 8009f1e:	932d      	str	r3, [sp, #180]	; 0xb4
 8009f20:	000f      	movs	r7, r1
 8009f22:	2b07      	cmp	r3, #7
 8009f24:	dd08      	ble.n	8009f38 <_svfprintf_r+0x10bc>
 8009f26:	aa2c      	add	r2, sp, #176	; 0xb0
 8009f28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009f2c:	f001 fede 	bl	800bcec <__ssprint_r>
 8009f30:	2800      	cmp	r0, #0
 8009f32:	d000      	beq.n	8009f36 <_svfprintf_r+0x10ba>
 8009f34:	e1c6      	b.n	800a2c4 <_svfprintf_r+0x1448>
 8009f36:	af2f      	add	r7, sp, #188	; 0xbc
 8009f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f3a:	195d      	adds	r5, r3, r5
 8009f3c:	0573      	lsls	r3, r6, #21
 8009f3e:	d50d      	bpl.n	8009f5c <_svfprintf_r+0x10e0>
 8009f40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d000      	beq.n	8009f48 <_svfprintf_r+0x10cc>
 8009f46:	e084      	b.n	800a052 <_svfprintf_r+0x11d6>
 8009f48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d000      	beq.n	8009f50 <_svfprintf_r+0x10d4>
 8009f4e:	e083      	b.n	800a058 <_svfprintf_r+0x11dc>
 8009f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f54:	189b      	adds	r3, r3, r2
 8009f56:	429d      	cmp	r5, r3
 8009f58:	d900      	bls.n	8009f5c <_svfprintf_r+0x10e0>
 8009f5a:	001d      	movs	r5, r3
 8009f5c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009f5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f60:	4293      	cmp	r3, r2
 8009f62:	db01      	blt.n	8009f68 <_svfprintf_r+0x10ec>
 8009f64:	07f3      	lsls	r3, r6, #31
 8009f66:	d518      	bpl.n	8009f9a <_svfprintf_r+0x111e>
 8009f68:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f6a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009f6c:	4694      	mov	ip, r2
 8009f6e:	603b      	str	r3, [r7, #0]
 8009f70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f72:	607b      	str	r3, [r7, #4]
 8009f74:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009f76:	3708      	adds	r7, #8
 8009f78:	4463      	add	r3, ip
 8009f7a:	932e      	str	r3, [sp, #184]	; 0xb8
 8009f7c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009f7e:	9308      	str	r3, [sp, #32]
 8009f80:	3301      	adds	r3, #1
 8009f82:	932d      	str	r3, [sp, #180]	; 0xb4
 8009f84:	2b07      	cmp	r3, #7
 8009f86:	dd08      	ble.n	8009f9a <_svfprintf_r+0x111e>
 8009f88:	aa2c      	add	r2, sp, #176	; 0xb0
 8009f8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f8c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009f8e:	f001 fead 	bl	800bcec <__ssprint_r>
 8009f92:	2800      	cmp	r0, #0
 8009f94:	d000      	beq.n	8009f98 <_svfprintf_r+0x111c>
 8009f96:	e195      	b.n	800a2c4 <_svfprintf_r+0x1448>
 8009f98:	af2f      	add	r7, sp, #188	; 0xbc
 8009f9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f9e:	4694      	mov	ip, r2
 8009fa0:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009fa2:	4463      	add	r3, ip
 8009fa4:	1b5b      	subs	r3, r3, r5
 8009fa6:	1a54      	subs	r4, r2, r1
 8009fa8:	429c      	cmp	r4, r3
 8009faa:	dd00      	ble.n	8009fae <_svfprintf_r+0x1132>
 8009fac:	001c      	movs	r4, r3
 8009fae:	2c00      	cmp	r4, #0
 8009fb0:	dd14      	ble.n	8009fdc <_svfprintf_r+0x1160>
 8009fb2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009fb4:	603d      	str	r5, [r7, #0]
 8009fb6:	18e3      	adds	r3, r4, r3
 8009fb8:	932e      	str	r3, [sp, #184]	; 0xb8
 8009fba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009fbc:	607c      	str	r4, [r7, #4]
 8009fbe:	9308      	str	r3, [sp, #32]
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	932d      	str	r3, [sp, #180]	; 0xb4
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	2b07      	cmp	r3, #7
 8009fc8:	dd08      	ble.n	8009fdc <_svfprintf_r+0x1160>
 8009fca:	aa2c      	add	r2, sp, #176	; 0xb0
 8009fcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fce:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009fd0:	f001 fe8c 	bl	800bcec <__ssprint_r>
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	d000      	beq.n	8009fda <_svfprintf_r+0x115e>
 8009fd8:	e174      	b.n	800a2c4 <_svfprintf_r+0x1448>
 8009fda:	af2f      	add	r7, sp, #188	; 0xbc
 8009fdc:	43e3      	mvns	r3, r4
 8009fde:	17db      	asrs	r3, r3, #31
 8009fe0:	401c      	ands	r4, r3
 8009fe2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009fe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fe6:	2510      	movs	r5, #16
 8009fe8:	1a9b      	subs	r3, r3, r2
 8009fea:	1b1c      	subs	r4, r3, r4
 8009fec:	2c00      	cmp	r4, #0
 8009fee:	dc00      	bgt.n	8009ff2 <_svfprintf_r+0x1176>
 8009ff0:	e697      	b.n	8009d22 <_svfprintf_r+0xea6>
 8009ff2:	0039      	movs	r1, r7
 8009ff4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009ff6:	4898      	ldr	r0, [pc, #608]	; (800a258 <_svfprintf_r+0x13dc>)
 8009ff8:	9308      	str	r3, [sp, #32]
 8009ffa:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	3108      	adds	r1, #8
 800a000:	6038      	str	r0, [r7, #0]
 800a002:	2c10      	cmp	r4, #16
 800a004:	dc00      	bgt.n	800a008 <_svfprintf_r+0x118c>
 800a006:	e6c6      	b.n	8009d96 <_svfprintf_r+0xf1a>
 800a008:	3210      	adds	r2, #16
 800a00a:	607d      	str	r5, [r7, #4]
 800a00c:	922e      	str	r2, [sp, #184]	; 0xb8
 800a00e:	932d      	str	r3, [sp, #180]	; 0xb4
 800a010:	2b07      	cmp	r3, #7
 800a012:	dd08      	ble.n	800a026 <_svfprintf_r+0x11aa>
 800a014:	aa2c      	add	r2, sp, #176	; 0xb0
 800a016:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a018:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a01a:	f001 fe67 	bl	800bcec <__ssprint_r>
 800a01e:	2800      	cmp	r0, #0
 800a020:	d000      	beq.n	800a024 <_svfprintf_r+0x11a8>
 800a022:	e14f      	b.n	800a2c4 <_svfprintf_r+0x1448>
 800a024:	a92f      	add	r1, sp, #188	; 0xbc
 800a026:	3c10      	subs	r4, #16
 800a028:	000f      	movs	r7, r1
 800a02a:	e7e2      	b.n	8009ff2 <_svfprintf_r+0x1176>
 800a02c:	2010      	movs	r0, #16
 800a02e:	1812      	adds	r2, r2, r0
 800a030:	6078      	str	r0, [r7, #4]
 800a032:	922e      	str	r2, [sp, #184]	; 0xb8
 800a034:	932d      	str	r3, [sp, #180]	; 0xb4
 800a036:	2b07      	cmp	r3, #7
 800a038:	dd08      	ble.n	800a04c <_svfprintf_r+0x11d0>
 800a03a:	aa2c      	add	r2, sp, #176	; 0xb0
 800a03c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a03e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a040:	f001 fe54 	bl	800bcec <__ssprint_r>
 800a044:	2800      	cmp	r0, #0
 800a046:	d000      	beq.n	800a04a <_svfprintf_r+0x11ce>
 800a048:	e13c      	b.n	800a2c4 <_svfprintf_r+0x1448>
 800a04a:	a92f      	add	r1, sp, #188	; 0xbc
 800a04c:	3c10      	subs	r4, #16
 800a04e:	000f      	movs	r7, r1
 800a050:	e757      	b.n	8009f02 <_svfprintf_r+0x1086>
 800a052:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a054:	2b00      	cmp	r3, #0
 800a056:	d061      	beq.n	800a11c <_svfprintf_r+0x12a0>
 800a058:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a05a:	3b01      	subs	r3, #1
 800a05c:	9310      	str	r3, [sp, #64]	; 0x40
 800a05e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a060:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a062:	4694      	mov	ip, r2
 800a064:	603b      	str	r3, [r7, #0]
 800a066:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a068:	607b      	str	r3, [r7, #4]
 800a06a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a06c:	3708      	adds	r7, #8
 800a06e:	4463      	add	r3, ip
 800a070:	932e      	str	r3, [sp, #184]	; 0xb8
 800a072:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a074:	9308      	str	r3, [sp, #32]
 800a076:	3301      	adds	r3, #1
 800a078:	932d      	str	r3, [sp, #180]	; 0xb4
 800a07a:	2b07      	cmp	r3, #7
 800a07c:	dd08      	ble.n	800a090 <_svfprintf_r+0x1214>
 800a07e:	aa2c      	add	r2, sp, #176	; 0xb0
 800a080:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a082:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a084:	f001 fe32 	bl	800bcec <__ssprint_r>
 800a088:	2800      	cmp	r0, #0
 800a08a:	d000      	beq.n	800a08e <_svfprintf_r+0x1212>
 800a08c:	e11a      	b.n	800a2c4 <_svfprintf_r+0x1448>
 800a08e:	af2f      	add	r7, sp, #188	; 0xbc
 800a090:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a094:	189b      	adds	r3, r3, r2
 800a096:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a098:	1b5b      	subs	r3, r3, r5
 800a09a:	7814      	ldrb	r4, [r2, #0]
 800a09c:	429c      	cmp	r4, r3
 800a09e:	dd00      	ble.n	800a0a2 <_svfprintf_r+0x1226>
 800a0a0:	001c      	movs	r4, r3
 800a0a2:	2c00      	cmp	r4, #0
 800a0a4:	dd14      	ble.n	800a0d0 <_svfprintf_r+0x1254>
 800a0a6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a0a8:	603d      	str	r5, [r7, #0]
 800a0aa:	18e3      	adds	r3, r4, r3
 800a0ac:	932e      	str	r3, [sp, #184]	; 0xb8
 800a0ae:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a0b0:	607c      	str	r4, [r7, #4]
 800a0b2:	9308      	str	r3, [sp, #32]
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	932d      	str	r3, [sp, #180]	; 0xb4
 800a0b8:	3708      	adds	r7, #8
 800a0ba:	2b07      	cmp	r3, #7
 800a0bc:	dd08      	ble.n	800a0d0 <_svfprintf_r+0x1254>
 800a0be:	aa2c      	add	r2, sp, #176	; 0xb0
 800a0c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a0c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a0c4:	f001 fe12 	bl	800bcec <__ssprint_r>
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	d000      	beq.n	800a0ce <_svfprintf_r+0x1252>
 800a0cc:	e0fa      	b.n	800a2c4 <_svfprintf_r+0x1448>
 800a0ce:	af2f      	add	r7, sp, #188	; 0xbc
 800a0d0:	43e3      	mvns	r3, r4
 800a0d2:	17db      	asrs	r3, r3, #31
 800a0d4:	401c      	ands	r4, r3
 800a0d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	1b1c      	subs	r4, r3, r4
 800a0dc:	2c00      	cmp	r4, #0
 800a0de:	dd19      	ble.n	800a114 <_svfprintf_r+0x1298>
 800a0e0:	0039      	movs	r1, r7
 800a0e2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a0e4:	485c      	ldr	r0, [pc, #368]	; (800a258 <_svfprintf_r+0x13dc>)
 800a0e6:	9308      	str	r3, [sp, #32]
 800a0e8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	3108      	adds	r1, #8
 800a0ee:	6038      	str	r0, [r7, #0]
 800a0f0:	2c10      	cmp	r4, #16
 800a0f2:	dc1a      	bgt.n	800a12a <_svfprintf_r+0x12ae>
 800a0f4:	607c      	str	r4, [r7, #4]
 800a0f6:	18a4      	adds	r4, r4, r2
 800a0f8:	942e      	str	r4, [sp, #184]	; 0xb8
 800a0fa:	932d      	str	r3, [sp, #180]	; 0xb4
 800a0fc:	000f      	movs	r7, r1
 800a0fe:	2b07      	cmp	r3, #7
 800a100:	dd08      	ble.n	800a114 <_svfprintf_r+0x1298>
 800a102:	aa2c      	add	r2, sp, #176	; 0xb0
 800a104:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a106:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a108:	f001 fdf0 	bl	800bcec <__ssprint_r>
 800a10c:	2800      	cmp	r0, #0
 800a10e:	d000      	beq.n	800a112 <_svfprintf_r+0x1296>
 800a110:	e0d8      	b.n	800a2c4 <_svfprintf_r+0x1448>
 800a112:	af2f      	add	r7, sp, #188	; 0xbc
 800a114:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	18ed      	adds	r5, r5, r3
 800a11a:	e711      	b.n	8009f40 <_svfprintf_r+0x10c4>
 800a11c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a11e:	3b01      	subs	r3, #1
 800a120:	9313      	str	r3, [sp, #76]	; 0x4c
 800a122:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a124:	3b01      	subs	r3, #1
 800a126:	930f      	str	r3, [sp, #60]	; 0x3c
 800a128:	e799      	b.n	800a05e <_svfprintf_r+0x11e2>
 800a12a:	2010      	movs	r0, #16
 800a12c:	1812      	adds	r2, r2, r0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	922e      	str	r2, [sp, #184]	; 0xb8
 800a132:	932d      	str	r3, [sp, #180]	; 0xb4
 800a134:	2b07      	cmp	r3, #7
 800a136:	dd08      	ble.n	800a14a <_svfprintf_r+0x12ce>
 800a138:	aa2c      	add	r2, sp, #176	; 0xb0
 800a13a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a13c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a13e:	f001 fdd5 	bl	800bcec <__ssprint_r>
 800a142:	2800      	cmp	r0, #0
 800a144:	d000      	beq.n	800a148 <_svfprintf_r+0x12cc>
 800a146:	e0bd      	b.n	800a2c4 <_svfprintf_r+0x1448>
 800a148:	a92f      	add	r1, sp, #188	; 0xbc
 800a14a:	3c10      	subs	r4, #16
 800a14c:	000f      	movs	r7, r1
 800a14e:	e7c7      	b.n	800a0e0 <_svfprintf_r+0x1264>
 800a150:	003c      	movs	r4, r7
 800a152:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a154:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800a156:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a158:	9308      	str	r3, [sp, #32]
 800a15a:	3101      	adds	r1, #1
 800a15c:	3301      	adds	r3, #1
 800a15e:	3408      	adds	r4, #8
 800a160:	2a01      	cmp	r2, #1
 800a162:	dc03      	bgt.n	800a16c <_svfprintf_r+0x12f0>
 800a164:	2201      	movs	r2, #1
 800a166:	4216      	tst	r6, r2
 800a168:	d100      	bne.n	800a16c <_svfprintf_r+0x12f0>
 800a16a:	e088      	b.n	800a27e <_svfprintf_r+0x1402>
 800a16c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a16e:	912e      	str	r1, [sp, #184]	; 0xb8
 800a170:	603a      	str	r2, [r7, #0]
 800a172:	2201      	movs	r2, #1
 800a174:	932d      	str	r3, [sp, #180]	; 0xb4
 800a176:	607a      	str	r2, [r7, #4]
 800a178:	2b07      	cmp	r3, #7
 800a17a:	dd08      	ble.n	800a18e <_svfprintf_r+0x1312>
 800a17c:	aa2c      	add	r2, sp, #176	; 0xb0
 800a17e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a180:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a182:	f001 fdb3 	bl	800bcec <__ssprint_r>
 800a186:	2800      	cmp	r0, #0
 800a188:	d000      	beq.n	800a18c <_svfprintf_r+0x1310>
 800a18a:	e09b      	b.n	800a2c4 <_svfprintf_r+0x1448>
 800a18c:	ac2f      	add	r4, sp, #188	; 0xbc
 800a18e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a190:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a192:	4694      	mov	ip, r2
 800a194:	6023      	str	r3, [r4, #0]
 800a196:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a198:	6063      	str	r3, [r4, #4]
 800a19a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a19c:	3408      	adds	r4, #8
 800a19e:	4463      	add	r3, ip
 800a1a0:	932e      	str	r3, [sp, #184]	; 0xb8
 800a1a2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a1a4:	9308      	str	r3, [sp, #32]
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	932d      	str	r3, [sp, #180]	; 0xb4
 800a1aa:	2b07      	cmp	r3, #7
 800a1ac:	dd08      	ble.n	800a1c0 <_svfprintf_r+0x1344>
 800a1ae:	aa2c      	add	r2, sp, #176	; 0xb0
 800a1b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a1b4:	f001 fd9a 	bl	800bcec <__ssprint_r>
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	d000      	beq.n	800a1be <_svfprintf_r+0x1342>
 800a1bc:	e082      	b.n	800a2c4 <_svfprintf_r+0x1448>
 800a1be:	ac2f      	add	r4, sp, #188	; 0xbc
 800a1c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	1e5d      	subs	r5, r3, #1
 800a1c6:	981a      	ldr	r0, [sp, #104]	; 0x68
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	9919      	ldr	r1, [sp, #100]	; 0x64
 800a1cc:	f7f6 f93e 	bl	800044c <__aeabi_dcmpeq>
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	d12c      	bne.n	800a22e <_svfprintf_r+0x13b2>
 800a1d4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a1d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a1d8:	9308      	str	r3, [sp, #32]
 800a1da:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a1dc:	6065      	str	r5, [r4, #4]
 800a1de:	1c5a      	adds	r2, r3, #1
 800a1e0:	930e      	str	r3, [sp, #56]	; 0x38
 800a1e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1e4:	922d      	str	r2, [sp, #180]	; 0xb4
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	6023      	str	r3, [r4, #0]
 800a1ea:	9b08      	ldr	r3, [sp, #32]
 800a1ec:	3408      	adds	r4, #8
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	185b      	adds	r3, r3, r1
 800a1f2:	932e      	str	r3, [sp, #184]	; 0xb8
 800a1f4:	2a07      	cmp	r2, #7
 800a1f6:	dd07      	ble.n	800a208 <_svfprintf_r+0x138c>
 800a1f8:	aa2c      	add	r2, sp, #176	; 0xb0
 800a1fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a1fe:	f001 fd75 	bl	800bcec <__ssprint_r>
 800a202:	2800      	cmp	r0, #0
 800a204:	d15e      	bne.n	800a2c4 <_svfprintf_r+0x1448>
 800a206:	ac2f      	add	r4, sp, #188	; 0xbc
 800a208:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a20a:	ab28      	add	r3, sp, #160	; 0xa0
 800a20c:	4694      	mov	ip, r2
 800a20e:	6023      	str	r3, [r4, #0]
 800a210:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a212:	6063      	str	r3, [r4, #4]
 800a214:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a216:	4463      	add	r3, ip
 800a218:	932e      	str	r3, [sp, #184]	; 0xb8
 800a21a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a21c:	9308      	str	r3, [sp, #32]
 800a21e:	3301      	adds	r3, #1
 800a220:	932d      	str	r3, [sp, #180]	; 0xb4
 800a222:	2b07      	cmp	r3, #7
 800a224:	dd00      	ble.n	800a228 <_svfprintf_r+0x13ac>
 800a226:	e629      	b.n	8009e7c <_svfprintf_r+0x1000>
 800a228:	3408      	adds	r4, #8
 800a22a:	0027      	movs	r7, r4
 800a22c:	e579      	b.n	8009d22 <_svfprintf_r+0xea6>
 800a22e:	2710      	movs	r7, #16
 800a230:	2d00      	cmp	r5, #0
 800a232:	dde9      	ble.n	800a208 <_svfprintf_r+0x138c>
 800a234:	0021      	movs	r1, r4
 800a236:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a238:	4807      	ldr	r0, [pc, #28]	; (800a258 <_svfprintf_r+0x13dc>)
 800a23a:	9308      	str	r3, [sp, #32]
 800a23c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a23e:	3301      	adds	r3, #1
 800a240:	3108      	adds	r1, #8
 800a242:	6020      	str	r0, [r4, #0]
 800a244:	2d10      	cmp	r5, #16
 800a246:	dc09      	bgt.n	800a25c <_svfprintf_r+0x13e0>
 800a248:	6065      	str	r5, [r4, #4]
 800a24a:	000c      	movs	r4, r1
 800a24c:	18ad      	adds	r5, r5, r2
 800a24e:	952e      	str	r5, [sp, #184]	; 0xb8
 800a250:	932d      	str	r3, [sp, #180]	; 0xb4
 800a252:	2b07      	cmp	r3, #7
 800a254:	ddd8      	ble.n	800a208 <_svfprintf_r+0x138c>
 800a256:	e7cf      	b.n	800a1f8 <_svfprintf_r+0x137c>
 800a258:	0800ca20 	.word	0x0800ca20
 800a25c:	3210      	adds	r2, #16
 800a25e:	6067      	str	r7, [r4, #4]
 800a260:	922e      	str	r2, [sp, #184]	; 0xb8
 800a262:	932d      	str	r3, [sp, #180]	; 0xb4
 800a264:	2b07      	cmp	r3, #7
 800a266:	dd07      	ble.n	800a278 <_svfprintf_r+0x13fc>
 800a268:	aa2c      	add	r2, sp, #176	; 0xb0
 800a26a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a26c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a26e:	f001 fd3d 	bl	800bcec <__ssprint_r>
 800a272:	2800      	cmp	r0, #0
 800a274:	d126      	bne.n	800a2c4 <_svfprintf_r+0x1448>
 800a276:	a92f      	add	r1, sp, #188	; 0xbc
 800a278:	3d10      	subs	r5, #16
 800a27a:	000c      	movs	r4, r1
 800a27c:	e7da      	b.n	800a234 <_svfprintf_r+0x13b8>
 800a27e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a280:	912e      	str	r1, [sp, #184]	; 0xb8
 800a282:	c705      	stmia	r7!, {r0, r2}
 800a284:	932d      	str	r3, [sp, #180]	; 0xb4
 800a286:	e7e4      	b.n	800a252 <_svfprintf_r+0x13d6>
 800a288:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a28a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a28c:	2510      	movs	r5, #16
 800a28e:	1a9c      	subs	r4, r3, r2
 800a290:	2c00      	cmp	r4, #0
 800a292:	dc00      	bgt.n	800a296 <_svfprintf_r+0x141a>
 800a294:	e548      	b.n	8009d28 <_svfprintf_r+0xeac>
 800a296:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a298:	4921      	ldr	r1, [pc, #132]	; (800a320 <_svfprintf_r+0x14a4>)
 800a29a:	9308      	str	r3, [sp, #32]
 800a29c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a29e:	3301      	adds	r3, #1
 800a2a0:	6039      	str	r1, [r7, #0]
 800a2a2:	2c10      	cmp	r4, #16
 800a2a4:	dc19      	bgt.n	800a2da <_svfprintf_r+0x145e>
 800a2a6:	607c      	str	r4, [r7, #4]
 800a2a8:	18a4      	adds	r4, r4, r2
 800a2aa:	942e      	str	r4, [sp, #184]	; 0xb8
 800a2ac:	932d      	str	r3, [sp, #180]	; 0xb4
 800a2ae:	2b07      	cmp	r3, #7
 800a2b0:	dc00      	bgt.n	800a2b4 <_svfprintf_r+0x1438>
 800a2b2:	e539      	b.n	8009d28 <_svfprintf_r+0xeac>
 800a2b4:	aa2c      	add	r2, sp, #176	; 0xb0
 800a2b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a2ba:	f001 fd17 	bl	800bcec <__ssprint_r>
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	d100      	bne.n	800a2c4 <_svfprintf_r+0x1448>
 800a2c2:	e531      	b.n	8009d28 <_svfprintf_r+0xeac>
 800a2c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d101      	bne.n	800a2ce <_svfprintf_r+0x1452>
 800a2ca:	f7ff f908 	bl	80094de <_svfprintf_r+0x662>
 800a2ce:	0019      	movs	r1, r3
 800a2d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a2d2:	f000 fefb 	bl	800b0cc <_free_r>
 800a2d6:	f7ff f902 	bl	80094de <_svfprintf_r+0x662>
 800a2da:	3210      	adds	r2, #16
 800a2dc:	607d      	str	r5, [r7, #4]
 800a2de:	922e      	str	r2, [sp, #184]	; 0xb8
 800a2e0:	932d      	str	r3, [sp, #180]	; 0xb4
 800a2e2:	3708      	adds	r7, #8
 800a2e4:	2b07      	cmp	r3, #7
 800a2e6:	dd07      	ble.n	800a2f8 <_svfprintf_r+0x147c>
 800a2e8:	aa2c      	add	r2, sp, #176	; 0xb0
 800a2ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a2ee:	f001 fcfd 	bl	800bcec <__ssprint_r>
 800a2f2:	2800      	cmp	r0, #0
 800a2f4:	d1e6      	bne.n	800a2c4 <_svfprintf_r+0x1448>
 800a2f6:	af2f      	add	r7, sp, #188	; 0xbc
 800a2f8:	3c10      	subs	r4, #16
 800a2fa:	e7cc      	b.n	800a296 <_svfprintf_r+0x141a>
 800a2fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a2fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a300:	f000 fee4 	bl	800b0cc <_free_r>
 800a304:	e52a      	b.n	8009d5c <_svfprintf_r+0xee0>
 800a306:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a308:	9306      	str	r3, [sp, #24]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d101      	bne.n	800a312 <_svfprintf_r+0x1496>
 800a30e:	f7ff f8e6 	bl	80094de <_svfprintf_r+0x662>
 800a312:	aa2c      	add	r2, sp, #176	; 0xb0
 800a314:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a316:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a318:	f001 fce8 	bl	800bcec <__ssprint_r>
 800a31c:	f7ff f8df 	bl	80094de <_svfprintf_r+0x662>
 800a320:	0800ca10 	.word	0x0800ca10

0800a324 <register_fini>:
 800a324:	4b03      	ldr	r3, [pc, #12]	; (800a334 <register_fini+0x10>)
 800a326:	b510      	push	{r4, lr}
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d002      	beq.n	800a332 <register_fini+0xe>
 800a32c:	4802      	ldr	r0, [pc, #8]	; (800a338 <register_fini+0x14>)
 800a32e:	f000 f805 	bl	800a33c <atexit>
 800a332:	bd10      	pop	{r4, pc}
 800a334:	00000000 	.word	0x00000000
 800a338:	0800affd 	.word	0x0800affd

0800a33c <atexit>:
 800a33c:	2300      	movs	r3, #0
 800a33e:	b510      	push	{r4, lr}
 800a340:	0001      	movs	r1, r0
 800a342:	001a      	movs	r2, r3
 800a344:	0018      	movs	r0, r3
 800a346:	f001 fd67 	bl	800be18 <__register_exitproc>
 800a34a:	bd10      	pop	{r4, pc}

0800a34c <quorem>:
 800a34c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a34e:	6903      	ldr	r3, [r0, #16]
 800a350:	690c      	ldr	r4, [r1, #16]
 800a352:	b089      	sub	sp, #36	; 0x24
 800a354:	0007      	movs	r7, r0
 800a356:	9105      	str	r1, [sp, #20]
 800a358:	2600      	movs	r6, #0
 800a35a:	42a3      	cmp	r3, r4
 800a35c:	db65      	blt.n	800a42a <quorem+0xde>
 800a35e:	000b      	movs	r3, r1
 800a360:	3c01      	subs	r4, #1
 800a362:	3314      	adds	r3, #20
 800a364:	00a5      	lsls	r5, r4, #2
 800a366:	9303      	str	r3, [sp, #12]
 800a368:	195b      	adds	r3, r3, r5
 800a36a:	9304      	str	r3, [sp, #16]
 800a36c:	0003      	movs	r3, r0
 800a36e:	3314      	adds	r3, #20
 800a370:	9302      	str	r3, [sp, #8]
 800a372:	195d      	adds	r5, r3, r5
 800a374:	9b04      	ldr	r3, [sp, #16]
 800a376:	6828      	ldr	r0, [r5, #0]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	1c59      	adds	r1, r3, #1
 800a37c:	9301      	str	r3, [sp, #4]
 800a37e:	f7f5 fedf 	bl	8000140 <__udivsi3>
 800a382:	9001      	str	r0, [sp, #4]
 800a384:	42b0      	cmp	r0, r6
 800a386:	d029      	beq.n	800a3dc <quorem+0x90>
 800a388:	9b03      	ldr	r3, [sp, #12]
 800a38a:	9802      	ldr	r0, [sp, #8]
 800a38c:	469c      	mov	ip, r3
 800a38e:	9606      	str	r6, [sp, #24]
 800a390:	4662      	mov	r2, ip
 800a392:	ca08      	ldmia	r2!, {r3}
 800a394:	4694      	mov	ip, r2
 800a396:	9a01      	ldr	r2, [sp, #4]
 800a398:	b299      	uxth	r1, r3
 800a39a:	4351      	muls	r1, r2
 800a39c:	0c1b      	lsrs	r3, r3, #16
 800a39e:	4353      	muls	r3, r2
 800a3a0:	1989      	adds	r1, r1, r6
 800a3a2:	0c0a      	lsrs	r2, r1, #16
 800a3a4:	189b      	adds	r3, r3, r2
 800a3a6:	9307      	str	r3, [sp, #28]
 800a3a8:	0c1e      	lsrs	r6, r3, #16
 800a3aa:	6803      	ldr	r3, [r0, #0]
 800a3ac:	b289      	uxth	r1, r1
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	9b06      	ldr	r3, [sp, #24]
 800a3b2:	18d2      	adds	r2, r2, r3
 800a3b4:	6803      	ldr	r3, [r0, #0]
 800a3b6:	1a52      	subs	r2, r2, r1
 800a3b8:	0c19      	lsrs	r1, r3, #16
 800a3ba:	466b      	mov	r3, sp
 800a3bc:	8b9b      	ldrh	r3, [r3, #28]
 800a3be:	1acb      	subs	r3, r1, r3
 800a3c0:	1411      	asrs	r1, r2, #16
 800a3c2:	185b      	adds	r3, r3, r1
 800a3c4:	1419      	asrs	r1, r3, #16
 800a3c6:	b292      	uxth	r2, r2
 800a3c8:	041b      	lsls	r3, r3, #16
 800a3ca:	431a      	orrs	r2, r3
 800a3cc:	9b04      	ldr	r3, [sp, #16]
 800a3ce:	9106      	str	r1, [sp, #24]
 800a3d0:	c004      	stmia	r0!, {r2}
 800a3d2:	4563      	cmp	r3, ip
 800a3d4:	d2dc      	bcs.n	800a390 <quorem+0x44>
 800a3d6:	682b      	ldr	r3, [r5, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d02d      	beq.n	800a438 <quorem+0xec>
 800a3dc:	9905      	ldr	r1, [sp, #20]
 800a3de:	0038      	movs	r0, r7
 800a3e0:	f001 fb5a 	bl	800ba98 <__mcmp>
 800a3e4:	2800      	cmp	r0, #0
 800a3e6:	db1f      	blt.n	800a428 <quorem+0xdc>
 800a3e8:	2500      	movs	r5, #0
 800a3ea:	9b01      	ldr	r3, [sp, #4]
 800a3ec:	9802      	ldr	r0, [sp, #8]
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	9903      	ldr	r1, [sp, #12]
 800a3f2:	9301      	str	r3, [sp, #4]
 800a3f4:	6802      	ldr	r2, [r0, #0]
 800a3f6:	c908      	ldmia	r1!, {r3}
 800a3f8:	b292      	uxth	r2, r2
 800a3fa:	1955      	adds	r5, r2, r5
 800a3fc:	b29a      	uxth	r2, r3
 800a3fe:	1aaa      	subs	r2, r5, r2
 800a400:	6805      	ldr	r5, [r0, #0]
 800a402:	0c1b      	lsrs	r3, r3, #16
 800a404:	0c2d      	lsrs	r5, r5, #16
 800a406:	1aeb      	subs	r3, r5, r3
 800a408:	1415      	asrs	r5, r2, #16
 800a40a:	195b      	adds	r3, r3, r5
 800a40c:	141d      	asrs	r5, r3, #16
 800a40e:	b292      	uxth	r2, r2
 800a410:	041b      	lsls	r3, r3, #16
 800a412:	4313      	orrs	r3, r2
 800a414:	c008      	stmia	r0!, {r3}
 800a416:	9b04      	ldr	r3, [sp, #16]
 800a418:	428b      	cmp	r3, r1
 800a41a:	d2eb      	bcs.n	800a3f4 <quorem+0xa8>
 800a41c:	9a02      	ldr	r2, [sp, #8]
 800a41e:	00a3      	lsls	r3, r4, #2
 800a420:	18d3      	adds	r3, r2, r3
 800a422:	681a      	ldr	r2, [r3, #0]
 800a424:	2a00      	cmp	r2, #0
 800a426:	d011      	beq.n	800a44c <quorem+0x100>
 800a428:	9e01      	ldr	r6, [sp, #4]
 800a42a:	0030      	movs	r0, r6
 800a42c:	b009      	add	sp, #36	; 0x24
 800a42e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a430:	682b      	ldr	r3, [r5, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d104      	bne.n	800a440 <quorem+0xf4>
 800a436:	3c01      	subs	r4, #1
 800a438:	9b02      	ldr	r3, [sp, #8]
 800a43a:	3d04      	subs	r5, #4
 800a43c:	42ab      	cmp	r3, r5
 800a43e:	d3f7      	bcc.n	800a430 <quorem+0xe4>
 800a440:	613c      	str	r4, [r7, #16]
 800a442:	e7cb      	b.n	800a3dc <quorem+0x90>
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	2a00      	cmp	r2, #0
 800a448:	d104      	bne.n	800a454 <quorem+0x108>
 800a44a:	3c01      	subs	r4, #1
 800a44c:	9a02      	ldr	r2, [sp, #8]
 800a44e:	3b04      	subs	r3, #4
 800a450:	429a      	cmp	r2, r3
 800a452:	d3f7      	bcc.n	800a444 <quorem+0xf8>
 800a454:	613c      	str	r4, [r7, #16]
 800a456:	e7e7      	b.n	800a428 <quorem+0xdc>

0800a458 <_dtoa_r>:
 800a458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a45a:	0014      	movs	r4, r2
 800a45c:	001d      	movs	r5, r3
 800a45e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800a460:	b09b      	sub	sp, #108	; 0x6c
 800a462:	9002      	str	r0, [sp, #8]
 800a464:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 800a466:	9406      	str	r4, [sp, #24]
 800a468:	9507      	str	r5, [sp, #28]
 800a46a:	2900      	cmp	r1, #0
 800a46c:	d009      	beq.n	800a482 <_dtoa_r+0x2a>
 800a46e:	2301      	movs	r3, #1
 800a470:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a472:	4093      	lsls	r3, r2
 800a474:	604a      	str	r2, [r1, #4]
 800a476:	608b      	str	r3, [r1, #8]
 800a478:	f001 f950 	bl	800b71c <_Bfree>
 800a47c:	2300      	movs	r3, #0
 800a47e:	9a02      	ldr	r2, [sp, #8]
 800a480:	6413      	str	r3, [r2, #64]	; 0x40
 800a482:	2d00      	cmp	r5, #0
 800a484:	da20      	bge.n	800a4c8 <_dtoa_r+0x70>
 800a486:	2301      	movs	r3, #1
 800a488:	6033      	str	r3, [r6, #0]
 800a48a:	006b      	lsls	r3, r5, #1
 800a48c:	085b      	lsrs	r3, r3, #1
 800a48e:	9307      	str	r3, [sp, #28]
 800a490:	9c07      	ldr	r4, [sp, #28]
 800a492:	4bb2      	ldr	r3, [pc, #712]	; (800a75c <_dtoa_r+0x304>)
 800a494:	0022      	movs	r2, r4
 800a496:	9317      	str	r3, [sp, #92]	; 0x5c
 800a498:	401a      	ands	r2, r3
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d117      	bne.n	800a4ce <_dtoa_r+0x76>
 800a49e:	4bb0      	ldr	r3, [pc, #704]	; (800a760 <_dtoa_r+0x308>)
 800a4a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a4a2:	6013      	str	r3, [r2, #0]
 800a4a4:	9b06      	ldr	r3, [sp, #24]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d103      	bne.n	800a4b2 <_dtoa_r+0x5a>
 800a4aa:	0324      	lsls	r4, r4, #12
 800a4ac:	d101      	bne.n	800a4b2 <_dtoa_r+0x5a>
 800a4ae:	f000 fd89 	bl	800afc4 <_dtoa_r+0xb6c>
 800a4b2:	4bac      	ldr	r3, [pc, #688]	; (800a764 <_dtoa_r+0x30c>)
 800a4b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a4b6:	9308      	str	r3, [sp, #32]
 800a4b8:	2a00      	cmp	r2, #0
 800a4ba:	d002      	beq.n	800a4c2 <_dtoa_r+0x6a>
 800a4bc:	4baa      	ldr	r3, [pc, #680]	; (800a768 <_dtoa_r+0x310>)
 800a4be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a4c0:	6013      	str	r3, [r2, #0]
 800a4c2:	9808      	ldr	r0, [sp, #32]
 800a4c4:	b01b      	add	sp, #108	; 0x6c
 800a4c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	6033      	str	r3, [r6, #0]
 800a4cc:	e7e0      	b.n	800a490 <_dtoa_r+0x38>
 800a4ce:	9e06      	ldr	r6, [sp, #24]
 800a4d0:	9f07      	ldr	r7, [sp, #28]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	0030      	movs	r0, r6
 800a4d8:	0039      	movs	r1, r7
 800a4da:	f7f5 ffb7 	bl	800044c <__aeabi_dcmpeq>
 800a4de:	1e05      	subs	r5, r0, #0
 800a4e0:	d00b      	beq.n	800a4fa <_dtoa_r+0xa2>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a4e6:	6013      	str	r3, [r2, #0]
 800a4e8:	4ba0      	ldr	r3, [pc, #640]	; (800a76c <_dtoa_r+0x314>)
 800a4ea:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a4ec:	9308      	str	r3, [sp, #32]
 800a4ee:	2a00      	cmp	r2, #0
 800a4f0:	d0e7      	beq.n	800a4c2 <_dtoa_r+0x6a>
 800a4f2:	4a9f      	ldr	r2, [pc, #636]	; (800a770 <_dtoa_r+0x318>)
 800a4f4:	9924      	ldr	r1, [sp, #144]	; 0x90
 800a4f6:	600a      	str	r2, [r1, #0]
 800a4f8:	e7e3      	b.n	800a4c2 <_dtoa_r+0x6a>
 800a4fa:	ab18      	add	r3, sp, #96	; 0x60
 800a4fc:	9301      	str	r3, [sp, #4]
 800a4fe:	ab19      	add	r3, sp, #100	; 0x64
 800a500:	9300      	str	r3, [sp, #0]
 800a502:	0032      	movs	r2, r6
 800a504:	003b      	movs	r3, r7
 800a506:	9802      	ldr	r0, [sp, #8]
 800a508:	f001 fb44 	bl	800bb94 <__d2b>
 800a50c:	0063      	lsls	r3, r4, #1
 800a50e:	9003      	str	r0, [sp, #12]
 800a510:	0d5b      	lsrs	r3, r3, #21
 800a512:	d074      	beq.n	800a5fe <_dtoa_r+0x1a6>
 800a514:	033a      	lsls	r2, r7, #12
 800a516:	4c97      	ldr	r4, [pc, #604]	; (800a774 <_dtoa_r+0x31c>)
 800a518:	0b12      	lsrs	r2, r2, #12
 800a51a:	4314      	orrs	r4, r2
 800a51c:	0021      	movs	r1, r4
 800a51e:	4a96      	ldr	r2, [pc, #600]	; (800a778 <_dtoa_r+0x320>)
 800a520:	0030      	movs	r0, r6
 800a522:	9516      	str	r5, [sp, #88]	; 0x58
 800a524:	189e      	adds	r6, r3, r2
 800a526:	2200      	movs	r2, #0
 800a528:	4b94      	ldr	r3, [pc, #592]	; (800a77c <_dtoa_r+0x324>)
 800a52a:	f7f7 ff35 	bl	8002398 <__aeabi_dsub>
 800a52e:	4a94      	ldr	r2, [pc, #592]	; (800a780 <_dtoa_r+0x328>)
 800a530:	4b94      	ldr	r3, [pc, #592]	; (800a784 <_dtoa_r+0x32c>)
 800a532:	f7f7 fcbf 	bl	8001eb4 <__aeabi_dmul>
 800a536:	4a94      	ldr	r2, [pc, #592]	; (800a788 <_dtoa_r+0x330>)
 800a538:	4b94      	ldr	r3, [pc, #592]	; (800a78c <_dtoa_r+0x334>)
 800a53a:	f7f6 fd95 	bl	8001068 <__aeabi_dadd>
 800a53e:	0004      	movs	r4, r0
 800a540:	0030      	movs	r0, r6
 800a542:	000d      	movs	r5, r1
 800a544:	f7f8 fac2 	bl	8002acc <__aeabi_i2d>
 800a548:	4a91      	ldr	r2, [pc, #580]	; (800a790 <_dtoa_r+0x338>)
 800a54a:	4b92      	ldr	r3, [pc, #584]	; (800a794 <_dtoa_r+0x33c>)
 800a54c:	f7f7 fcb2 	bl	8001eb4 <__aeabi_dmul>
 800a550:	0002      	movs	r2, r0
 800a552:	000b      	movs	r3, r1
 800a554:	0020      	movs	r0, r4
 800a556:	0029      	movs	r1, r5
 800a558:	f7f6 fd86 	bl	8001068 <__aeabi_dadd>
 800a55c:	0004      	movs	r4, r0
 800a55e:	000d      	movs	r5, r1
 800a560:	f7f8 fa7e 	bl	8002a60 <__aeabi_d2iz>
 800a564:	2200      	movs	r2, #0
 800a566:	0007      	movs	r7, r0
 800a568:	2300      	movs	r3, #0
 800a56a:	0020      	movs	r0, r4
 800a56c:	0029      	movs	r1, r5
 800a56e:	f7f5 ff73 	bl	8000458 <__aeabi_dcmplt>
 800a572:	2800      	cmp	r0, #0
 800a574:	d009      	beq.n	800a58a <_dtoa_r+0x132>
 800a576:	0038      	movs	r0, r7
 800a578:	f7f8 faa8 	bl	8002acc <__aeabi_i2d>
 800a57c:	002b      	movs	r3, r5
 800a57e:	0022      	movs	r2, r4
 800a580:	f7f5 ff64 	bl	800044c <__aeabi_dcmpeq>
 800a584:	4243      	negs	r3, r0
 800a586:	4158      	adcs	r0, r3
 800a588:	1a3f      	subs	r7, r7, r0
 800a58a:	2301      	movs	r3, #1
 800a58c:	9314      	str	r3, [sp, #80]	; 0x50
 800a58e:	2f16      	cmp	r7, #22
 800a590:	d80d      	bhi.n	800a5ae <_dtoa_r+0x156>
 800a592:	4981      	ldr	r1, [pc, #516]	; (800a798 <_dtoa_r+0x340>)
 800a594:	00fb      	lsls	r3, r7, #3
 800a596:	18c9      	adds	r1, r1, r3
 800a598:	6808      	ldr	r0, [r1, #0]
 800a59a:	6849      	ldr	r1, [r1, #4]
 800a59c:	9a06      	ldr	r2, [sp, #24]
 800a59e:	9b07      	ldr	r3, [sp, #28]
 800a5a0:	f7f5 ff6e 	bl	8000480 <__aeabi_dcmpgt>
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	d046      	beq.n	800a636 <_dtoa_r+0x1de>
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	3f01      	subs	r7, #1
 800a5ac:	9314      	str	r3, [sp, #80]	; 0x50
 800a5ae:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a5b0:	1b9e      	subs	r6, r3, r6
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	930a      	str	r3, [sp, #40]	; 0x28
 800a5b6:	0033      	movs	r3, r6
 800a5b8:	3b01      	subs	r3, #1
 800a5ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5bc:	d504      	bpl.n	800a5c8 <_dtoa_r+0x170>
 800a5be:	2301      	movs	r3, #1
 800a5c0:	1b9b      	subs	r3, r3, r6
 800a5c2:	930a      	str	r3, [sp, #40]	; 0x28
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5c8:	2f00      	cmp	r7, #0
 800a5ca:	db36      	blt.n	800a63a <_dtoa_r+0x1e2>
 800a5cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5ce:	9711      	str	r7, [sp, #68]	; 0x44
 800a5d0:	19db      	adds	r3, r3, r7
 800a5d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	9304      	str	r3, [sp, #16]
 800a5d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a5da:	2401      	movs	r4, #1
 800a5dc:	2b09      	cmp	r3, #9
 800a5de:	d900      	bls.n	800a5e2 <_dtoa_r+0x18a>
 800a5e0:	e082      	b.n	800a6e8 <_dtoa_r+0x290>
 800a5e2:	2b05      	cmp	r3, #5
 800a5e4:	dd02      	ble.n	800a5ec <_dtoa_r+0x194>
 800a5e6:	2400      	movs	r4, #0
 800a5e8:	3b04      	subs	r3, #4
 800a5ea:	9320      	str	r3, [sp, #128]	; 0x80
 800a5ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a5ee:	1e98      	subs	r0, r3, #2
 800a5f0:	2803      	cmp	r0, #3
 800a5f2:	d900      	bls.n	800a5f6 <_dtoa_r+0x19e>
 800a5f4:	e082      	b.n	800a6fc <_dtoa_r+0x2a4>
 800a5f6:	f7f5 fd8f 	bl	8000118 <__gnu_thumb1_case_uqi>
 800a5fa:	7573      	.short	0x7573
 800a5fc:	6828      	.short	0x6828
 800a5fe:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a600:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a602:	189e      	adds	r6, r3, r2
 800a604:	4b65      	ldr	r3, [pc, #404]	; (800a79c <_dtoa_r+0x344>)
 800a606:	18f2      	adds	r2, r6, r3
 800a608:	2a20      	cmp	r2, #32
 800a60a:	dd0f      	ble.n	800a62c <_dtoa_r+0x1d4>
 800a60c:	2340      	movs	r3, #64	; 0x40
 800a60e:	1a9b      	subs	r3, r3, r2
 800a610:	409c      	lsls	r4, r3
 800a612:	4b63      	ldr	r3, [pc, #396]	; (800a7a0 <_dtoa_r+0x348>)
 800a614:	9806      	ldr	r0, [sp, #24]
 800a616:	18f3      	adds	r3, r6, r3
 800a618:	40d8      	lsrs	r0, r3
 800a61a:	4320      	orrs	r0, r4
 800a61c:	f7f8 fa90 	bl	8002b40 <__aeabi_ui2d>
 800a620:	2301      	movs	r3, #1
 800a622:	4c60      	ldr	r4, [pc, #384]	; (800a7a4 <_dtoa_r+0x34c>)
 800a624:	3e01      	subs	r6, #1
 800a626:	1909      	adds	r1, r1, r4
 800a628:	9316      	str	r3, [sp, #88]	; 0x58
 800a62a:	e77c      	b.n	800a526 <_dtoa_r+0xce>
 800a62c:	2320      	movs	r3, #32
 800a62e:	9806      	ldr	r0, [sp, #24]
 800a630:	1a9b      	subs	r3, r3, r2
 800a632:	4098      	lsls	r0, r3
 800a634:	e7f2      	b.n	800a61c <_dtoa_r+0x1c4>
 800a636:	9014      	str	r0, [sp, #80]	; 0x50
 800a638:	e7b9      	b.n	800a5ae <_dtoa_r+0x156>
 800a63a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a63c:	1bdb      	subs	r3, r3, r7
 800a63e:	930a      	str	r3, [sp, #40]	; 0x28
 800a640:	427b      	negs	r3, r7
 800a642:	9304      	str	r3, [sp, #16]
 800a644:	2300      	movs	r3, #0
 800a646:	9311      	str	r3, [sp, #68]	; 0x44
 800a648:	e7c6      	b.n	800a5d8 <_dtoa_r+0x180>
 800a64a:	2301      	movs	r3, #1
 800a64c:	930d      	str	r3, [sp, #52]	; 0x34
 800a64e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a650:	2b00      	cmp	r3, #0
 800a652:	dd57      	ble.n	800a704 <_dtoa_r+0x2ac>
 800a654:	930c      	str	r3, [sp, #48]	; 0x30
 800a656:	9309      	str	r3, [sp, #36]	; 0x24
 800a658:	2200      	movs	r2, #0
 800a65a:	9902      	ldr	r1, [sp, #8]
 800a65c:	644a      	str	r2, [r1, #68]	; 0x44
 800a65e:	3204      	adds	r2, #4
 800a660:	0010      	movs	r0, r2
 800a662:	9902      	ldr	r1, [sp, #8]
 800a664:	3014      	adds	r0, #20
 800a666:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800a668:	4298      	cmp	r0, r3
 800a66a:	d950      	bls.n	800a70e <_dtoa_r+0x2b6>
 800a66c:	9802      	ldr	r0, [sp, #8]
 800a66e:	f001 f82d 	bl	800b6cc <_Balloc>
 800a672:	9b02      	ldr	r3, [sp, #8]
 800a674:	9008      	str	r0, [sp, #32]
 800a676:	6418      	str	r0, [r3, #64]	; 0x40
 800a678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a67a:	2b0e      	cmp	r3, #14
 800a67c:	d900      	bls.n	800a680 <_dtoa_r+0x228>
 800a67e:	e10c      	b.n	800a89a <_dtoa_r+0x442>
 800a680:	2c00      	cmp	r4, #0
 800a682:	d100      	bne.n	800a686 <_dtoa_r+0x22e>
 800a684:	e109      	b.n	800a89a <_dtoa_r+0x442>
 800a686:	9b06      	ldr	r3, [sp, #24]
 800a688:	9c07      	ldr	r4, [sp, #28]
 800a68a:	9312      	str	r3, [sp, #72]	; 0x48
 800a68c:	9413      	str	r4, [sp, #76]	; 0x4c
 800a68e:	2f00      	cmp	r7, #0
 800a690:	dc00      	bgt.n	800a694 <_dtoa_r+0x23c>
 800a692:	e08b      	b.n	800a7ac <_dtoa_r+0x354>
 800a694:	210f      	movs	r1, #15
 800a696:	003a      	movs	r2, r7
 800a698:	4b3f      	ldr	r3, [pc, #252]	; (800a798 <_dtoa_r+0x340>)
 800a69a:	400a      	ands	r2, r1
 800a69c:	00d2      	lsls	r2, r2, #3
 800a69e:	189b      	adds	r3, r3, r2
 800a6a0:	681d      	ldr	r5, [r3, #0]
 800a6a2:	685e      	ldr	r6, [r3, #4]
 800a6a4:	2302      	movs	r3, #2
 800a6a6:	113c      	asrs	r4, r7, #4
 800a6a8:	930e      	str	r3, [sp, #56]	; 0x38
 800a6aa:	06e3      	lsls	r3, r4, #27
 800a6ac:	d50b      	bpl.n	800a6c6 <_dtoa_r+0x26e>
 800a6ae:	4b3e      	ldr	r3, [pc, #248]	; (800a7a8 <_dtoa_r+0x350>)
 800a6b0:	400c      	ands	r4, r1
 800a6b2:	6a1a      	ldr	r2, [r3, #32]
 800a6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a6b8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a6ba:	f7f6 fff1 	bl	80016a0 <__aeabi_ddiv>
 800a6be:	2303      	movs	r3, #3
 800a6c0:	9006      	str	r0, [sp, #24]
 800a6c2:	9107      	str	r1, [sp, #28]
 800a6c4:	930e      	str	r3, [sp, #56]	; 0x38
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	e03b      	b.n	800a742 <_dtoa_r+0x2ea>
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	930d      	str	r3, [sp, #52]	; 0x34
 800a6ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6d0:	18fb      	adds	r3, r7, r3
 800a6d2:	930c      	str	r3, [sp, #48]	; 0x30
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	dcbd      	bgt.n	800a658 <_dtoa_r+0x200>
 800a6dc:	2301      	movs	r3, #1
 800a6de:	e7bb      	b.n	800a658 <_dtoa_r+0x200>
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	e7b3      	b.n	800a64c <_dtoa_r+0x1f4>
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	e7f1      	b.n	800a6cc <_dtoa_r+0x274>
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	940d      	str	r4, [sp, #52]	; 0x34
 800a6ec:	9320      	str	r3, [sp, #128]	; 0x80
 800a6ee:	3b01      	subs	r3, #1
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	930c      	str	r3, [sp, #48]	; 0x30
 800a6f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a6f6:	3313      	adds	r3, #19
 800a6f8:	9221      	str	r2, [sp, #132]	; 0x84
 800a6fa:	e7ad      	b.n	800a658 <_dtoa_r+0x200>
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	930d      	str	r3, [sp, #52]	; 0x34
 800a700:	3b02      	subs	r3, #2
 800a702:	e7f5      	b.n	800a6f0 <_dtoa_r+0x298>
 800a704:	2301      	movs	r3, #1
 800a706:	930c      	str	r3, [sp, #48]	; 0x30
 800a708:	9309      	str	r3, [sp, #36]	; 0x24
 800a70a:	001a      	movs	r2, r3
 800a70c:	e7f4      	b.n	800a6f8 <_dtoa_r+0x2a0>
 800a70e:	9802      	ldr	r0, [sp, #8]
 800a710:	3101      	adds	r1, #1
 800a712:	6441      	str	r1, [r0, #68]	; 0x44
 800a714:	0052      	lsls	r2, r2, #1
 800a716:	e7a3      	b.n	800a660 <_dtoa_r+0x208>
 800a718:	2301      	movs	r3, #1
 800a71a:	421c      	tst	r4, r3
 800a71c:	d00e      	beq.n	800a73c <_dtoa_r+0x2e4>
 800a71e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a720:	4a21      	ldr	r2, [pc, #132]	; (800a7a8 <_dtoa_r+0x350>)
 800a722:	3301      	adds	r3, #1
 800a724:	930e      	str	r3, [sp, #56]	; 0x38
 800a726:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a728:	0028      	movs	r0, r5
 800a72a:	00db      	lsls	r3, r3, #3
 800a72c:	189b      	adds	r3, r3, r2
 800a72e:	0031      	movs	r1, r6
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	f7f7 fbbe 	bl	8001eb4 <__aeabi_dmul>
 800a738:	0005      	movs	r5, r0
 800a73a:	000e      	movs	r6, r1
 800a73c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a73e:	1064      	asrs	r4, r4, #1
 800a740:	3301      	adds	r3, #1
 800a742:	9310      	str	r3, [sp, #64]	; 0x40
 800a744:	2c00      	cmp	r4, #0
 800a746:	d1e7      	bne.n	800a718 <_dtoa_r+0x2c0>
 800a748:	9806      	ldr	r0, [sp, #24]
 800a74a:	9907      	ldr	r1, [sp, #28]
 800a74c:	002a      	movs	r2, r5
 800a74e:	0033      	movs	r3, r6
 800a750:	f7f6 ffa6 	bl	80016a0 <__aeabi_ddiv>
 800a754:	9006      	str	r0, [sp, #24]
 800a756:	9107      	str	r1, [sp, #28]
 800a758:	e043      	b.n	800a7e2 <_dtoa_r+0x38a>
 800a75a:	46c0      	nop			; (mov r8, r8)
 800a75c:	7ff00000 	.word	0x7ff00000
 800a760:	0000270f 	.word	0x0000270f
 800a764:	0800ca39 	.word	0x0800ca39
 800a768:	0800ca3c 	.word	0x0800ca3c
 800a76c:	0800ca0e 	.word	0x0800ca0e
 800a770:	0800ca0f 	.word	0x0800ca0f
 800a774:	3ff00000 	.word	0x3ff00000
 800a778:	fffffc01 	.word	0xfffffc01
 800a77c:	3ff80000 	.word	0x3ff80000
 800a780:	636f4361 	.word	0x636f4361
 800a784:	3fd287a7 	.word	0x3fd287a7
 800a788:	8b60c8b3 	.word	0x8b60c8b3
 800a78c:	3fc68a28 	.word	0x3fc68a28
 800a790:	509f79fb 	.word	0x509f79fb
 800a794:	3fd34413 	.word	0x3fd34413
 800a798:	0800ca70 	.word	0x0800ca70
 800a79c:	00000432 	.word	0x00000432
 800a7a0:	00000412 	.word	0x00000412
 800a7a4:	fe100000 	.word	0xfe100000
 800a7a8:	0800ca48 	.word	0x0800ca48
 800a7ac:	2302      	movs	r3, #2
 800a7ae:	930e      	str	r3, [sp, #56]	; 0x38
 800a7b0:	2f00      	cmp	r7, #0
 800a7b2:	d016      	beq.n	800a7e2 <_dtoa_r+0x38a>
 800a7b4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a7b6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a7b8:	427c      	negs	r4, r7
 800a7ba:	330d      	adds	r3, #13
 800a7bc:	4023      	ands	r3, r4
 800a7be:	4acf      	ldr	r2, [pc, #828]	; (800aafc <_dtoa_r+0x6a4>)
 800a7c0:	00db      	lsls	r3, r3, #3
 800a7c2:	18d3      	adds	r3, r2, r3
 800a7c4:	681a      	ldr	r2, [r3, #0]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	f7f7 fb74 	bl	8001eb4 <__aeabi_dmul>
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	2601      	movs	r6, #1
 800a7d0:	001d      	movs	r5, r3
 800a7d2:	9006      	str	r0, [sp, #24]
 800a7d4:	9107      	str	r1, [sp, #28]
 800a7d6:	1124      	asrs	r4, r4, #4
 800a7d8:	2c00      	cmp	r4, #0
 800a7da:	d000      	beq.n	800a7de <_dtoa_r+0x386>
 800a7dc:	e08c      	b.n	800a8f8 <_dtoa_r+0x4a0>
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d1b8      	bne.n	800a754 <_dtoa_r+0x2fc>
 800a7e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d100      	bne.n	800a7ea <_dtoa_r+0x392>
 800a7e8:	e096      	b.n	800a918 <_dtoa_r+0x4c0>
 800a7ea:	9c06      	ldr	r4, [sp, #24]
 800a7ec:	9d07      	ldr	r5, [sp, #28]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	4bc3      	ldr	r3, [pc, #780]	; (800ab00 <_dtoa_r+0x6a8>)
 800a7f2:	0020      	movs	r0, r4
 800a7f4:	0029      	movs	r1, r5
 800a7f6:	f7f5 fe2f 	bl	8000458 <__aeabi_dcmplt>
 800a7fa:	2800      	cmp	r0, #0
 800a7fc:	d100      	bne.n	800a800 <_dtoa_r+0x3a8>
 800a7fe:	e08b      	b.n	800a918 <_dtoa_r+0x4c0>
 800a800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a802:	2b00      	cmp	r3, #0
 800a804:	d100      	bne.n	800a808 <_dtoa_r+0x3b0>
 800a806:	e087      	b.n	800a918 <_dtoa_r+0x4c0>
 800a808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	dd41      	ble.n	800a892 <_dtoa_r+0x43a>
 800a80e:	4bbd      	ldr	r3, [pc, #756]	; (800ab04 <_dtoa_r+0x6ac>)
 800a810:	2200      	movs	r2, #0
 800a812:	0020      	movs	r0, r4
 800a814:	0029      	movs	r1, r5
 800a816:	f7f7 fb4d 	bl	8001eb4 <__aeabi_dmul>
 800a81a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a81c:	9006      	str	r0, [sp, #24]
 800a81e:	9107      	str	r1, [sp, #28]
 800a820:	3301      	adds	r3, #1
 800a822:	930e      	str	r3, [sp, #56]	; 0x38
 800a824:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a826:	1e7e      	subs	r6, r7, #1
 800a828:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a82a:	9310      	str	r3, [sp, #64]	; 0x40
 800a82c:	f7f8 f94e 	bl	8002acc <__aeabi_i2d>
 800a830:	9a06      	ldr	r2, [sp, #24]
 800a832:	9b07      	ldr	r3, [sp, #28]
 800a834:	f7f7 fb3e 	bl	8001eb4 <__aeabi_dmul>
 800a838:	2200      	movs	r2, #0
 800a83a:	4bb3      	ldr	r3, [pc, #716]	; (800ab08 <_dtoa_r+0x6b0>)
 800a83c:	f7f6 fc14 	bl	8001068 <__aeabi_dadd>
 800a840:	4ab2      	ldr	r2, [pc, #712]	; (800ab0c <_dtoa_r+0x6b4>)
 800a842:	900e      	str	r0, [sp, #56]	; 0x38
 800a844:	910f      	str	r1, [sp, #60]	; 0x3c
 800a846:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800a848:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a84a:	4694      	mov	ip, r2
 800a84c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a84e:	4463      	add	r3, ip
 800a850:	9315      	str	r3, [sp, #84]	; 0x54
 800a852:	001d      	movs	r5, r3
 800a854:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a856:	2b00      	cmp	r3, #0
 800a858:	d161      	bne.n	800a91e <_dtoa_r+0x4c6>
 800a85a:	9806      	ldr	r0, [sp, #24]
 800a85c:	9907      	ldr	r1, [sp, #28]
 800a85e:	2200      	movs	r2, #0
 800a860:	4bab      	ldr	r3, [pc, #684]	; (800ab10 <_dtoa_r+0x6b8>)
 800a862:	f7f7 fd99 	bl	8002398 <__aeabi_dsub>
 800a866:	0022      	movs	r2, r4
 800a868:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a86a:	9006      	str	r0, [sp, #24]
 800a86c:	9107      	str	r1, [sp, #28]
 800a86e:	f7f5 fe07 	bl	8000480 <__aeabi_dcmpgt>
 800a872:	2800      	cmp	r0, #0
 800a874:	d000      	beq.n	800a878 <_dtoa_r+0x420>
 800a876:	e2aa      	b.n	800adce <_dtoa_r+0x976>
 800a878:	48a6      	ldr	r0, [pc, #664]	; (800ab14 <_dtoa_r+0x6bc>)
 800a87a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a87c:	4684      	mov	ip, r0
 800a87e:	4461      	add	r1, ip
 800a880:	000b      	movs	r3, r1
 800a882:	9806      	ldr	r0, [sp, #24]
 800a884:	9907      	ldr	r1, [sp, #28]
 800a886:	0022      	movs	r2, r4
 800a888:	f7f5 fde6 	bl	8000458 <__aeabi_dcmplt>
 800a88c:	2800      	cmp	r0, #0
 800a88e:	d000      	beq.n	800a892 <_dtoa_r+0x43a>
 800a890:	e297      	b.n	800adc2 <_dtoa_r+0x96a>
 800a892:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a894:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800a896:	9306      	str	r3, [sp, #24]
 800a898:	9407      	str	r4, [sp, #28]
 800a89a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	da00      	bge.n	800a8a2 <_dtoa_r+0x44a>
 800a8a0:	e15e      	b.n	800ab60 <_dtoa_r+0x708>
 800a8a2:	2f0e      	cmp	r7, #14
 800a8a4:	dd00      	ble.n	800a8a8 <_dtoa_r+0x450>
 800a8a6:	e15b      	b.n	800ab60 <_dtoa_r+0x708>
 800a8a8:	4b94      	ldr	r3, [pc, #592]	; (800aafc <_dtoa_r+0x6a4>)
 800a8aa:	00fa      	lsls	r2, r7, #3
 800a8ac:	189b      	adds	r3, r3, r2
 800a8ae:	685c      	ldr	r4, [r3, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	9304      	str	r3, [sp, #16]
 800a8b4:	9405      	str	r4, [sp, #20]
 800a8b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	db00      	blt.n	800a8be <_dtoa_r+0x466>
 800a8bc:	e0da      	b.n	800aa74 <_dtoa_r+0x61c>
 800a8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	dd00      	ble.n	800a8c6 <_dtoa_r+0x46e>
 800a8c4:	e0d6      	b.n	800aa74 <_dtoa_r+0x61c>
 800a8c6:	d000      	beq.n	800a8ca <_dtoa_r+0x472>
 800a8c8:	e27f      	b.n	800adca <_dtoa_r+0x972>
 800a8ca:	9804      	ldr	r0, [sp, #16]
 800a8cc:	9905      	ldr	r1, [sp, #20]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	4b8f      	ldr	r3, [pc, #572]	; (800ab10 <_dtoa_r+0x6b8>)
 800a8d2:	f7f7 faef 	bl	8001eb4 <__aeabi_dmul>
 800a8d6:	9a06      	ldr	r2, [sp, #24]
 800a8d8:	9b07      	ldr	r3, [sp, #28]
 800a8da:	f7f5 fddb 	bl	8000494 <__aeabi_dcmpge>
 800a8de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8e0:	9304      	str	r3, [sp, #16]
 800a8e2:	001e      	movs	r6, r3
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	d000      	beq.n	800a8ea <_dtoa_r+0x492>
 800a8e8:	e251      	b.n	800ad8e <_dtoa_r+0x936>
 800a8ea:	9b08      	ldr	r3, [sp, #32]
 800a8ec:	9a08      	ldr	r2, [sp, #32]
 800a8ee:	1c5d      	adds	r5, r3, #1
 800a8f0:	2331      	movs	r3, #49	; 0x31
 800a8f2:	3701      	adds	r7, #1
 800a8f4:	7013      	strb	r3, [r2, #0]
 800a8f6:	e24d      	b.n	800ad94 <_dtoa_r+0x93c>
 800a8f8:	4234      	tst	r4, r6
 800a8fa:	d00a      	beq.n	800a912 <_dtoa_r+0x4ba>
 800a8fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a8fe:	4a86      	ldr	r2, [pc, #536]	; (800ab18 <_dtoa_r+0x6c0>)
 800a900:	3301      	adds	r3, #1
 800a902:	930e      	str	r3, [sp, #56]	; 0x38
 800a904:	00eb      	lsls	r3, r5, #3
 800a906:	189b      	adds	r3, r3, r2
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	f7f7 fad2 	bl	8001eb4 <__aeabi_dmul>
 800a910:	0033      	movs	r3, r6
 800a912:	1064      	asrs	r4, r4, #1
 800a914:	3501      	adds	r5, #1
 800a916:	e75f      	b.n	800a7d8 <_dtoa_r+0x380>
 800a918:	003e      	movs	r6, r7
 800a91a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a91c:	e784      	b.n	800a828 <_dtoa_r+0x3d0>
 800a91e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a920:	1e5a      	subs	r2, r3, #1
 800a922:	4b76      	ldr	r3, [pc, #472]	; (800aafc <_dtoa_r+0x6a4>)
 800a924:	00d2      	lsls	r2, r2, #3
 800a926:	189b      	adds	r3, r3, r2
 800a928:	6818      	ldr	r0, [r3, #0]
 800a92a:	6859      	ldr	r1, [r3, #4]
 800a92c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d04b      	beq.n	800a9ca <_dtoa_r+0x572>
 800a932:	0002      	movs	r2, r0
 800a934:	000b      	movs	r3, r1
 800a936:	2000      	movs	r0, #0
 800a938:	4978      	ldr	r1, [pc, #480]	; (800ab1c <_dtoa_r+0x6c4>)
 800a93a:	f7f6 feb1 	bl	80016a0 <__aeabi_ddiv>
 800a93e:	002b      	movs	r3, r5
 800a940:	0022      	movs	r2, r4
 800a942:	f7f7 fd29 	bl	8002398 <__aeabi_dsub>
 800a946:	9b08      	ldr	r3, [sp, #32]
 800a948:	900e      	str	r0, [sp, #56]	; 0x38
 800a94a:	910f      	str	r1, [sp, #60]	; 0x3c
 800a94c:	9315      	str	r3, [sp, #84]	; 0x54
 800a94e:	9806      	ldr	r0, [sp, #24]
 800a950:	9907      	ldr	r1, [sp, #28]
 800a952:	f7f8 f885 	bl	8002a60 <__aeabi_d2iz>
 800a956:	0004      	movs	r4, r0
 800a958:	f7f8 f8b8 	bl	8002acc <__aeabi_i2d>
 800a95c:	0002      	movs	r2, r0
 800a95e:	000b      	movs	r3, r1
 800a960:	9806      	ldr	r0, [sp, #24]
 800a962:	9907      	ldr	r1, [sp, #28]
 800a964:	f7f7 fd18 	bl	8002398 <__aeabi_dsub>
 800a968:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a96a:	3430      	adds	r4, #48	; 0x30
 800a96c:	1c5d      	adds	r5, r3, #1
 800a96e:	701c      	strb	r4, [r3, #0]
 800a970:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a972:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a974:	9006      	str	r0, [sp, #24]
 800a976:	9107      	str	r1, [sp, #28]
 800a978:	f7f5 fd6e 	bl	8000458 <__aeabi_dcmplt>
 800a97c:	2800      	cmp	r0, #0
 800a97e:	d16c      	bne.n	800aa5a <_dtoa_r+0x602>
 800a980:	9a06      	ldr	r2, [sp, #24]
 800a982:	9b07      	ldr	r3, [sp, #28]
 800a984:	2000      	movs	r0, #0
 800a986:	495e      	ldr	r1, [pc, #376]	; (800ab00 <_dtoa_r+0x6a8>)
 800a988:	f7f7 fd06 	bl	8002398 <__aeabi_dsub>
 800a98c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a98e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a990:	f7f5 fd62 	bl	8000458 <__aeabi_dcmplt>
 800a994:	2800      	cmp	r0, #0
 800a996:	d000      	beq.n	800a99a <_dtoa_r+0x542>
 800a998:	e0c3      	b.n	800ab22 <_dtoa_r+0x6ca>
 800a99a:	9b08      	ldr	r3, [sp, #32]
 800a99c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a99e:	1aeb      	subs	r3, r5, r3
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	dc00      	bgt.n	800a9a6 <_dtoa_r+0x54e>
 800a9a4:	e775      	b.n	800a892 <_dtoa_r+0x43a>
 800a9a6:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a9a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	4b55      	ldr	r3, [pc, #340]	; (800ab04 <_dtoa_r+0x6ac>)
 800a9ae:	f7f7 fa81 	bl	8001eb4 <__aeabi_dmul>
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	900e      	str	r0, [sp, #56]	; 0x38
 800a9b6:	910f      	str	r1, [sp, #60]	; 0x3c
 800a9b8:	9806      	ldr	r0, [sp, #24]
 800a9ba:	9907      	ldr	r1, [sp, #28]
 800a9bc:	4b51      	ldr	r3, [pc, #324]	; (800ab04 <_dtoa_r+0x6ac>)
 800a9be:	f7f7 fa79 	bl	8001eb4 <__aeabi_dmul>
 800a9c2:	9515      	str	r5, [sp, #84]	; 0x54
 800a9c4:	9006      	str	r0, [sp, #24]
 800a9c6:	9107      	str	r1, [sp, #28]
 800a9c8:	e7c1      	b.n	800a94e <_dtoa_r+0x4f6>
 800a9ca:	0022      	movs	r2, r4
 800a9cc:	002b      	movs	r3, r5
 800a9ce:	f7f7 fa71 	bl	8001eb4 <__aeabi_dmul>
 800a9d2:	9c08      	ldr	r4, [sp, #32]
 800a9d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a9d6:	0023      	movs	r3, r4
 800a9d8:	4694      	mov	ip, r2
 800a9da:	900e      	str	r0, [sp, #56]	; 0x38
 800a9dc:	910f      	str	r1, [sp, #60]	; 0x3c
 800a9de:	4463      	add	r3, ip
 800a9e0:	9315      	str	r3, [sp, #84]	; 0x54
 800a9e2:	9806      	ldr	r0, [sp, #24]
 800a9e4:	9907      	ldr	r1, [sp, #28]
 800a9e6:	f7f8 f83b 	bl	8002a60 <__aeabi_d2iz>
 800a9ea:	0005      	movs	r5, r0
 800a9ec:	f7f8 f86e 	bl	8002acc <__aeabi_i2d>
 800a9f0:	000b      	movs	r3, r1
 800a9f2:	0002      	movs	r2, r0
 800a9f4:	9806      	ldr	r0, [sp, #24]
 800a9f6:	9907      	ldr	r1, [sp, #28]
 800a9f8:	f7f7 fcce 	bl	8002398 <__aeabi_dsub>
 800a9fc:	3530      	adds	r5, #48	; 0x30
 800a9fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa00:	7025      	strb	r5, [r4, #0]
 800aa02:	3401      	adds	r4, #1
 800aa04:	9006      	str	r0, [sp, #24]
 800aa06:	9107      	str	r1, [sp, #28]
 800aa08:	42a3      	cmp	r3, r4
 800aa0a:	d12a      	bne.n	800aa62 <_dtoa_r+0x60a>
 800aa0c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800aa0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800aa10:	9a08      	ldr	r2, [sp, #32]
 800aa12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa14:	4694      	mov	ip, r2
 800aa16:	4463      	add	r3, ip
 800aa18:	2200      	movs	r2, #0
 800aa1a:	001d      	movs	r5, r3
 800aa1c:	4b3f      	ldr	r3, [pc, #252]	; (800ab1c <_dtoa_r+0x6c4>)
 800aa1e:	f7f6 fb23 	bl	8001068 <__aeabi_dadd>
 800aa22:	0002      	movs	r2, r0
 800aa24:	000b      	movs	r3, r1
 800aa26:	9806      	ldr	r0, [sp, #24]
 800aa28:	9907      	ldr	r1, [sp, #28]
 800aa2a:	f7f5 fd29 	bl	8000480 <__aeabi_dcmpgt>
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	d000      	beq.n	800aa34 <_dtoa_r+0x5dc>
 800aa32:	e076      	b.n	800ab22 <_dtoa_r+0x6ca>
 800aa34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa38:	2000      	movs	r0, #0
 800aa3a:	4938      	ldr	r1, [pc, #224]	; (800ab1c <_dtoa_r+0x6c4>)
 800aa3c:	f7f7 fcac 	bl	8002398 <__aeabi_dsub>
 800aa40:	0002      	movs	r2, r0
 800aa42:	000b      	movs	r3, r1
 800aa44:	9806      	ldr	r0, [sp, #24]
 800aa46:	9907      	ldr	r1, [sp, #28]
 800aa48:	f7f5 fd06 	bl	8000458 <__aeabi_dcmplt>
 800aa4c:	2800      	cmp	r0, #0
 800aa4e:	d100      	bne.n	800aa52 <_dtoa_r+0x5fa>
 800aa50:	e71f      	b.n	800a892 <_dtoa_r+0x43a>
 800aa52:	1e6b      	subs	r3, r5, #1
 800aa54:	781a      	ldrb	r2, [r3, #0]
 800aa56:	2a30      	cmp	r2, #48	; 0x30
 800aa58:	d001      	beq.n	800aa5e <_dtoa_r+0x606>
 800aa5a:	0037      	movs	r7, r6
 800aa5c:	e03f      	b.n	800aade <_dtoa_r+0x686>
 800aa5e:	001d      	movs	r5, r3
 800aa60:	e7f7      	b.n	800aa52 <_dtoa_r+0x5fa>
 800aa62:	9806      	ldr	r0, [sp, #24]
 800aa64:	9907      	ldr	r1, [sp, #28]
 800aa66:	2200      	movs	r2, #0
 800aa68:	4b26      	ldr	r3, [pc, #152]	; (800ab04 <_dtoa_r+0x6ac>)
 800aa6a:	f7f7 fa23 	bl	8001eb4 <__aeabi_dmul>
 800aa6e:	9006      	str	r0, [sp, #24]
 800aa70:	9107      	str	r1, [sp, #28]
 800aa72:	e7b6      	b.n	800a9e2 <_dtoa_r+0x58a>
 800aa74:	9e08      	ldr	r6, [sp, #32]
 800aa76:	9a04      	ldr	r2, [sp, #16]
 800aa78:	9b05      	ldr	r3, [sp, #20]
 800aa7a:	9806      	ldr	r0, [sp, #24]
 800aa7c:	9907      	ldr	r1, [sp, #28]
 800aa7e:	f7f6 fe0f 	bl	80016a0 <__aeabi_ddiv>
 800aa82:	f7f7 ffed 	bl	8002a60 <__aeabi_d2iz>
 800aa86:	0004      	movs	r4, r0
 800aa88:	f7f8 f820 	bl	8002acc <__aeabi_i2d>
 800aa8c:	9a04      	ldr	r2, [sp, #16]
 800aa8e:	9b05      	ldr	r3, [sp, #20]
 800aa90:	f7f7 fa10 	bl	8001eb4 <__aeabi_dmul>
 800aa94:	0002      	movs	r2, r0
 800aa96:	000b      	movs	r3, r1
 800aa98:	9806      	ldr	r0, [sp, #24]
 800aa9a:	9907      	ldr	r1, [sp, #28]
 800aa9c:	f7f7 fc7c 	bl	8002398 <__aeabi_dsub>
 800aaa0:	0023      	movs	r3, r4
 800aaa2:	3330      	adds	r3, #48	; 0x30
 800aaa4:	7033      	strb	r3, [r6, #0]
 800aaa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aaa8:	9b08      	ldr	r3, [sp, #32]
 800aaaa:	1c75      	adds	r5, r6, #1
 800aaac:	1aeb      	subs	r3, r5, r3
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d148      	bne.n	800ab44 <_dtoa_r+0x6ec>
 800aab2:	0002      	movs	r2, r0
 800aab4:	000b      	movs	r3, r1
 800aab6:	f7f6 fad7 	bl	8001068 <__aeabi_dadd>
 800aaba:	9a04      	ldr	r2, [sp, #16]
 800aabc:	9b05      	ldr	r3, [sp, #20]
 800aabe:	9006      	str	r0, [sp, #24]
 800aac0:	9107      	str	r1, [sp, #28]
 800aac2:	f7f5 fcdd 	bl	8000480 <__aeabi_dcmpgt>
 800aac6:	2800      	cmp	r0, #0
 800aac8:	d12a      	bne.n	800ab20 <_dtoa_r+0x6c8>
 800aaca:	9a04      	ldr	r2, [sp, #16]
 800aacc:	9b05      	ldr	r3, [sp, #20]
 800aace:	9806      	ldr	r0, [sp, #24]
 800aad0:	9907      	ldr	r1, [sp, #28]
 800aad2:	f7f5 fcbb 	bl	800044c <__aeabi_dcmpeq>
 800aad6:	2800      	cmp	r0, #0
 800aad8:	d001      	beq.n	800aade <_dtoa_r+0x686>
 800aada:	07e3      	lsls	r3, r4, #31
 800aadc:	d420      	bmi.n	800ab20 <_dtoa_r+0x6c8>
 800aade:	9903      	ldr	r1, [sp, #12]
 800aae0:	9802      	ldr	r0, [sp, #8]
 800aae2:	f000 fe1b 	bl	800b71c <_Bfree>
 800aae6:	2300      	movs	r3, #0
 800aae8:	702b      	strb	r3, [r5, #0]
 800aaea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aaec:	3701      	adds	r7, #1
 800aaee:	601f      	str	r7, [r3, #0]
 800aaf0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d100      	bne.n	800aaf8 <_dtoa_r+0x6a0>
 800aaf6:	e4e4      	b.n	800a4c2 <_dtoa_r+0x6a>
 800aaf8:	601d      	str	r5, [r3, #0]
 800aafa:	e4e2      	b.n	800a4c2 <_dtoa_r+0x6a>
 800aafc:	0800ca70 	.word	0x0800ca70
 800ab00:	3ff00000 	.word	0x3ff00000
 800ab04:	40240000 	.word	0x40240000
 800ab08:	401c0000 	.word	0x401c0000
 800ab0c:	fcc00000 	.word	0xfcc00000
 800ab10:	40140000 	.word	0x40140000
 800ab14:	7cc00000 	.word	0x7cc00000
 800ab18:	0800ca48 	.word	0x0800ca48
 800ab1c:	3fe00000 	.word	0x3fe00000
 800ab20:	003e      	movs	r6, r7
 800ab22:	1e6b      	subs	r3, r5, #1
 800ab24:	781a      	ldrb	r2, [r3, #0]
 800ab26:	2a39      	cmp	r2, #57	; 0x39
 800ab28:	d106      	bne.n	800ab38 <_dtoa_r+0x6e0>
 800ab2a:	9a08      	ldr	r2, [sp, #32]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d107      	bne.n	800ab40 <_dtoa_r+0x6e8>
 800ab30:	2330      	movs	r3, #48	; 0x30
 800ab32:	7013      	strb	r3, [r2, #0]
 800ab34:	0013      	movs	r3, r2
 800ab36:	3601      	adds	r6, #1
 800ab38:	781a      	ldrb	r2, [r3, #0]
 800ab3a:	3201      	adds	r2, #1
 800ab3c:	701a      	strb	r2, [r3, #0]
 800ab3e:	e78c      	b.n	800aa5a <_dtoa_r+0x602>
 800ab40:	001d      	movs	r5, r3
 800ab42:	e7ee      	b.n	800ab22 <_dtoa_r+0x6ca>
 800ab44:	2200      	movs	r2, #0
 800ab46:	4ba4      	ldr	r3, [pc, #656]	; (800add8 <_dtoa_r+0x980>)
 800ab48:	f7f7 f9b4 	bl	8001eb4 <__aeabi_dmul>
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	2300      	movs	r3, #0
 800ab50:	9006      	str	r0, [sp, #24]
 800ab52:	9107      	str	r1, [sp, #28]
 800ab54:	002e      	movs	r6, r5
 800ab56:	f7f5 fc79 	bl	800044c <__aeabi_dcmpeq>
 800ab5a:	2800      	cmp	r0, #0
 800ab5c:	d08b      	beq.n	800aa76 <_dtoa_r+0x61e>
 800ab5e:	e7be      	b.n	800aade <_dtoa_r+0x686>
 800ab60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab62:	2a00      	cmp	r2, #0
 800ab64:	d100      	bne.n	800ab68 <_dtoa_r+0x710>
 800ab66:	e0da      	b.n	800ad1e <_dtoa_r+0x8c6>
 800ab68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ab6a:	2a01      	cmp	r2, #1
 800ab6c:	dd00      	ble.n	800ab70 <_dtoa_r+0x718>
 800ab6e:	e0bd      	b.n	800acec <_dtoa_r+0x894>
 800ab70:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ab72:	2a00      	cmp	r2, #0
 800ab74:	d100      	bne.n	800ab78 <_dtoa_r+0x720>
 800ab76:	e0b5      	b.n	800ace4 <_dtoa_r+0x88c>
 800ab78:	4a98      	ldr	r2, [pc, #608]	; (800addc <_dtoa_r+0x984>)
 800ab7a:	189b      	adds	r3, r3, r2
 800ab7c:	9d04      	ldr	r5, [sp, #16]
 800ab7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ab80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab82:	2101      	movs	r1, #1
 800ab84:	18d2      	adds	r2, r2, r3
 800ab86:	920a      	str	r2, [sp, #40]	; 0x28
 800ab88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab8a:	9802      	ldr	r0, [sp, #8]
 800ab8c:	18d3      	adds	r3, r2, r3
 800ab8e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab90:	f000 fe55 	bl	800b83e <__i2b>
 800ab94:	0006      	movs	r6, r0
 800ab96:	2c00      	cmp	r4, #0
 800ab98:	dd0e      	ble.n	800abb8 <_dtoa_r+0x760>
 800ab9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	dd0b      	ble.n	800abb8 <_dtoa_r+0x760>
 800aba0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aba2:	0023      	movs	r3, r4
 800aba4:	4294      	cmp	r4, r2
 800aba6:	dd00      	ble.n	800abaa <_dtoa_r+0x752>
 800aba8:	0013      	movs	r3, r2
 800abaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abac:	1ae4      	subs	r4, r4, r3
 800abae:	1ad2      	subs	r2, r2, r3
 800abb0:	920a      	str	r2, [sp, #40]	; 0x28
 800abb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800abb4:	1ad3      	subs	r3, r2, r3
 800abb6:	930b      	str	r3, [sp, #44]	; 0x2c
 800abb8:	9b04      	ldr	r3, [sp, #16]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d01f      	beq.n	800abfe <_dtoa_r+0x7a6>
 800abbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d100      	bne.n	800abc6 <_dtoa_r+0x76e>
 800abc4:	e0af      	b.n	800ad26 <_dtoa_r+0x8ce>
 800abc6:	2d00      	cmp	r5, #0
 800abc8:	d011      	beq.n	800abee <_dtoa_r+0x796>
 800abca:	0031      	movs	r1, r6
 800abcc:	002a      	movs	r2, r5
 800abce:	9802      	ldr	r0, [sp, #8]
 800abd0:	f000 fece 	bl	800b970 <__pow5mult>
 800abd4:	9a03      	ldr	r2, [sp, #12]
 800abd6:	0001      	movs	r1, r0
 800abd8:	0006      	movs	r6, r0
 800abda:	9802      	ldr	r0, [sp, #8]
 800abdc:	f000 fe38 	bl	800b850 <__multiply>
 800abe0:	9903      	ldr	r1, [sp, #12]
 800abe2:	9010      	str	r0, [sp, #64]	; 0x40
 800abe4:	9802      	ldr	r0, [sp, #8]
 800abe6:	f000 fd99 	bl	800b71c <_Bfree>
 800abea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abec:	9303      	str	r3, [sp, #12]
 800abee:	9b04      	ldr	r3, [sp, #16]
 800abf0:	1b5a      	subs	r2, r3, r5
 800abf2:	d004      	beq.n	800abfe <_dtoa_r+0x7a6>
 800abf4:	9903      	ldr	r1, [sp, #12]
 800abf6:	9802      	ldr	r0, [sp, #8]
 800abf8:	f000 feba 	bl	800b970 <__pow5mult>
 800abfc:	9003      	str	r0, [sp, #12]
 800abfe:	2101      	movs	r1, #1
 800ac00:	9802      	ldr	r0, [sp, #8]
 800ac02:	f000 fe1c 	bl	800b83e <__i2b>
 800ac06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac08:	9004      	str	r0, [sp, #16]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d100      	bne.n	800ac10 <_dtoa_r+0x7b8>
 800ac0e:	e1e3      	b.n	800afd8 <_dtoa_r+0xb80>
 800ac10:	001a      	movs	r2, r3
 800ac12:	0001      	movs	r1, r0
 800ac14:	9802      	ldr	r0, [sp, #8]
 800ac16:	f000 feab 	bl	800b970 <__pow5mult>
 800ac1a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ac1c:	9004      	str	r0, [sp, #16]
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	dd00      	ble.n	800ac24 <_dtoa_r+0x7cc>
 800ac22:	e082      	b.n	800ad2a <_dtoa_r+0x8d2>
 800ac24:	2500      	movs	r5, #0
 800ac26:	9b06      	ldr	r3, [sp, #24]
 800ac28:	42ab      	cmp	r3, r5
 800ac2a:	d10e      	bne.n	800ac4a <_dtoa_r+0x7f2>
 800ac2c:	9b07      	ldr	r3, [sp, #28]
 800ac2e:	031b      	lsls	r3, r3, #12
 800ac30:	42ab      	cmp	r3, r5
 800ac32:	d10a      	bne.n	800ac4a <_dtoa_r+0x7f2>
 800ac34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac36:	9a07      	ldr	r2, [sp, #28]
 800ac38:	4213      	tst	r3, r2
 800ac3a:	d006      	beq.n	800ac4a <_dtoa_r+0x7f2>
 800ac3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac3e:	3501      	adds	r5, #1
 800ac40:	3301      	adds	r3, #1
 800ac42:	930a      	str	r3, [sp, #40]	; 0x28
 800ac44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac46:	3301      	adds	r3, #1
 800ac48:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac4c:	2001      	movs	r0, #1
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d16c      	bne.n	800ad2c <_dtoa_r+0x8d4>
 800ac52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac54:	1818      	adds	r0, r3, r0
 800ac56:	231f      	movs	r3, #31
 800ac58:	4018      	ands	r0, r3
 800ac5a:	d07e      	beq.n	800ad5a <_dtoa_r+0x902>
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	1a1b      	subs	r3, r3, r0
 800ac60:	2b04      	cmp	r3, #4
 800ac62:	dd70      	ble.n	800ad46 <_dtoa_r+0x8ee>
 800ac64:	231c      	movs	r3, #28
 800ac66:	1a18      	subs	r0, r3, r0
 800ac68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac6a:	1824      	adds	r4, r4, r0
 800ac6c:	181b      	adds	r3, r3, r0
 800ac6e:	930a      	str	r3, [sp, #40]	; 0x28
 800ac70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac72:	181b      	adds	r3, r3, r0
 800ac74:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	dd05      	ble.n	800ac88 <_dtoa_r+0x830>
 800ac7c:	001a      	movs	r2, r3
 800ac7e:	9903      	ldr	r1, [sp, #12]
 800ac80:	9802      	ldr	r0, [sp, #8]
 800ac82:	f000 feb7 	bl	800b9f4 <__lshift>
 800ac86:	9003      	str	r0, [sp, #12]
 800ac88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	dd05      	ble.n	800ac9a <_dtoa_r+0x842>
 800ac8e:	001a      	movs	r2, r3
 800ac90:	9904      	ldr	r1, [sp, #16]
 800ac92:	9802      	ldr	r0, [sp, #8]
 800ac94:	f000 feae 	bl	800b9f4 <__lshift>
 800ac98:	9004      	str	r0, [sp, #16]
 800ac9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d05e      	beq.n	800ad5e <_dtoa_r+0x906>
 800aca0:	9904      	ldr	r1, [sp, #16]
 800aca2:	9803      	ldr	r0, [sp, #12]
 800aca4:	f000 fef8 	bl	800ba98 <__mcmp>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	da58      	bge.n	800ad5e <_dtoa_r+0x906>
 800acac:	2300      	movs	r3, #0
 800acae:	220a      	movs	r2, #10
 800acb0:	9903      	ldr	r1, [sp, #12]
 800acb2:	9802      	ldr	r0, [sp, #8]
 800acb4:	f000 fd3c 	bl	800b730 <__multadd>
 800acb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acba:	3f01      	subs	r7, #1
 800acbc:	9003      	str	r0, [sp, #12]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d100      	bne.n	800acc4 <_dtoa_r+0x86c>
 800acc2:	e190      	b.n	800afe6 <_dtoa_r+0xb8e>
 800acc4:	2300      	movs	r3, #0
 800acc6:	0031      	movs	r1, r6
 800acc8:	220a      	movs	r2, #10
 800acca:	9802      	ldr	r0, [sp, #8]
 800accc:	f000 fd30 	bl	800b730 <__multadd>
 800acd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acd2:	0006      	movs	r6, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	dd00      	ble.n	800acda <_dtoa_r+0x882>
 800acd8:	e088      	b.n	800adec <_dtoa_r+0x994>
 800acda:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800acdc:	2b02      	cmp	r3, #2
 800acde:	dc00      	bgt.n	800ace2 <_dtoa_r+0x88a>
 800ace0:	e084      	b.n	800adec <_dtoa_r+0x994>
 800ace2:	e044      	b.n	800ad6e <_dtoa_r+0x916>
 800ace4:	2336      	movs	r3, #54	; 0x36
 800ace6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ace8:	1a9b      	subs	r3, r3, r2
 800acea:	e747      	b.n	800ab7c <_dtoa_r+0x724>
 800acec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acee:	1e5d      	subs	r5, r3, #1
 800acf0:	9b04      	ldr	r3, [sp, #16]
 800acf2:	42ab      	cmp	r3, r5
 800acf4:	db08      	blt.n	800ad08 <_dtoa_r+0x8b0>
 800acf6:	1b5d      	subs	r5, r3, r5
 800acf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	da0c      	bge.n	800ad18 <_dtoa_r+0x8c0>
 800acfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad02:	1a9c      	subs	r4, r3, r2
 800ad04:	2300      	movs	r3, #0
 800ad06:	e73b      	b.n	800ab80 <_dtoa_r+0x728>
 800ad08:	9b04      	ldr	r3, [sp, #16]
 800ad0a:	9504      	str	r5, [sp, #16]
 800ad0c:	1aea      	subs	r2, r5, r3
 800ad0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad10:	2500      	movs	r5, #0
 800ad12:	189b      	adds	r3, r3, r2
 800ad14:	9311      	str	r3, [sp, #68]	; 0x44
 800ad16:	e7ef      	b.n	800acf8 <_dtoa_r+0x8a0>
 800ad18:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ad1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad1c:	e730      	b.n	800ab80 <_dtoa_r+0x728>
 800ad1e:	9d04      	ldr	r5, [sp, #16]
 800ad20:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ad22:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800ad24:	e737      	b.n	800ab96 <_dtoa_r+0x73e>
 800ad26:	9a04      	ldr	r2, [sp, #16]
 800ad28:	e764      	b.n	800abf4 <_dtoa_r+0x79c>
 800ad2a:	2500      	movs	r5, #0
 800ad2c:	9b04      	ldr	r3, [sp, #16]
 800ad2e:	9a04      	ldr	r2, [sp, #16]
 800ad30:	691b      	ldr	r3, [r3, #16]
 800ad32:	9310      	str	r3, [sp, #64]	; 0x40
 800ad34:	3303      	adds	r3, #3
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	18d3      	adds	r3, r2, r3
 800ad3a:	6858      	ldr	r0, [r3, #4]
 800ad3c:	f000 fd36 	bl	800b7ac <__hi0bits>
 800ad40:	2320      	movs	r3, #32
 800ad42:	1a18      	subs	r0, r3, r0
 800ad44:	e785      	b.n	800ac52 <_dtoa_r+0x7fa>
 800ad46:	2b04      	cmp	r3, #4
 800ad48:	d095      	beq.n	800ac76 <_dtoa_r+0x81e>
 800ad4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad4c:	331c      	adds	r3, #28
 800ad4e:	18d2      	adds	r2, r2, r3
 800ad50:	920a      	str	r2, [sp, #40]	; 0x28
 800ad52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad54:	18e4      	adds	r4, r4, r3
 800ad56:	18d3      	adds	r3, r2, r3
 800ad58:	e78c      	b.n	800ac74 <_dtoa_r+0x81c>
 800ad5a:	0003      	movs	r3, r0
 800ad5c:	e7f5      	b.n	800ad4a <_dtoa_r+0x8f2>
 800ad5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	dc3d      	bgt.n	800ade0 <_dtoa_r+0x988>
 800ad64:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ad66:	2b02      	cmp	r3, #2
 800ad68:	dd3a      	ble.n	800ade0 <_dtoa_r+0x988>
 800ad6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad6c:	930c      	str	r3, [sp, #48]	; 0x30
 800ad6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d10c      	bne.n	800ad8e <_dtoa_r+0x936>
 800ad74:	9904      	ldr	r1, [sp, #16]
 800ad76:	2205      	movs	r2, #5
 800ad78:	9802      	ldr	r0, [sp, #8]
 800ad7a:	f000 fcd9 	bl	800b730 <__multadd>
 800ad7e:	9004      	str	r0, [sp, #16]
 800ad80:	0001      	movs	r1, r0
 800ad82:	9803      	ldr	r0, [sp, #12]
 800ad84:	f000 fe88 	bl	800ba98 <__mcmp>
 800ad88:	2800      	cmp	r0, #0
 800ad8a:	dd00      	ble.n	800ad8e <_dtoa_r+0x936>
 800ad8c:	e5ad      	b.n	800a8ea <_dtoa_r+0x492>
 800ad8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad90:	9d08      	ldr	r5, [sp, #32]
 800ad92:	43df      	mvns	r7, r3
 800ad94:	2300      	movs	r3, #0
 800ad96:	9309      	str	r3, [sp, #36]	; 0x24
 800ad98:	9904      	ldr	r1, [sp, #16]
 800ad9a:	9802      	ldr	r0, [sp, #8]
 800ad9c:	f000 fcbe 	bl	800b71c <_Bfree>
 800ada0:	2e00      	cmp	r6, #0
 800ada2:	d100      	bne.n	800ada6 <_dtoa_r+0x94e>
 800ada4:	e69b      	b.n	800aade <_dtoa_r+0x686>
 800ada6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d005      	beq.n	800adb8 <_dtoa_r+0x960>
 800adac:	42b3      	cmp	r3, r6
 800adae:	d003      	beq.n	800adb8 <_dtoa_r+0x960>
 800adb0:	0019      	movs	r1, r3
 800adb2:	9802      	ldr	r0, [sp, #8]
 800adb4:	f000 fcb2 	bl	800b71c <_Bfree>
 800adb8:	0031      	movs	r1, r6
 800adba:	9802      	ldr	r0, [sp, #8]
 800adbc:	f000 fcae 	bl	800b71c <_Bfree>
 800adc0:	e68d      	b.n	800aade <_dtoa_r+0x686>
 800adc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800adc4:	9304      	str	r3, [sp, #16]
 800adc6:	001e      	movs	r6, r3
 800adc8:	e7e1      	b.n	800ad8e <_dtoa_r+0x936>
 800adca:	2300      	movs	r3, #0
 800adcc:	e7fa      	b.n	800adc4 <_dtoa_r+0x96c>
 800adce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800add0:	0037      	movs	r7, r6
 800add2:	9304      	str	r3, [sp, #16]
 800add4:	001e      	movs	r6, r3
 800add6:	e588      	b.n	800a8ea <_dtoa_r+0x492>
 800add8:	40240000 	.word	0x40240000
 800addc:	00000433 	.word	0x00000433
 800ade0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d100      	bne.n	800ade8 <_dtoa_r+0x990>
 800ade6:	e0b2      	b.n	800af4e <_dtoa_r+0xaf6>
 800ade8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adea:	930c      	str	r3, [sp, #48]	; 0x30
 800adec:	2c00      	cmp	r4, #0
 800adee:	dd05      	ble.n	800adfc <_dtoa_r+0x9a4>
 800adf0:	0031      	movs	r1, r6
 800adf2:	0022      	movs	r2, r4
 800adf4:	9802      	ldr	r0, [sp, #8]
 800adf6:	f000 fdfd 	bl	800b9f4 <__lshift>
 800adfa:	0006      	movs	r6, r0
 800adfc:	0030      	movs	r0, r6
 800adfe:	2d00      	cmp	r5, #0
 800ae00:	d011      	beq.n	800ae26 <_dtoa_r+0x9ce>
 800ae02:	6871      	ldr	r1, [r6, #4]
 800ae04:	9802      	ldr	r0, [sp, #8]
 800ae06:	f000 fc61 	bl	800b6cc <_Balloc>
 800ae0a:	0031      	movs	r1, r6
 800ae0c:	0004      	movs	r4, r0
 800ae0e:	6933      	ldr	r3, [r6, #16]
 800ae10:	310c      	adds	r1, #12
 800ae12:	1c9a      	adds	r2, r3, #2
 800ae14:	0092      	lsls	r2, r2, #2
 800ae16:	300c      	adds	r0, #12
 800ae18:	f7fd ff2a 	bl	8008c70 <memcpy>
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	0021      	movs	r1, r4
 800ae20:	9802      	ldr	r0, [sp, #8]
 800ae22:	f000 fde7 	bl	800b9f4 <__lshift>
 800ae26:	9609      	str	r6, [sp, #36]	; 0x24
 800ae28:	0006      	movs	r6, r0
 800ae2a:	9b08      	ldr	r3, [sp, #32]
 800ae2c:	930a      	str	r3, [sp, #40]	; 0x28
 800ae2e:	9904      	ldr	r1, [sp, #16]
 800ae30:	9803      	ldr	r0, [sp, #12]
 800ae32:	f7ff fa8b 	bl	800a34c <quorem>
 800ae36:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae38:	900d      	str	r0, [sp, #52]	; 0x34
 800ae3a:	0004      	movs	r4, r0
 800ae3c:	9803      	ldr	r0, [sp, #12]
 800ae3e:	f000 fe2b 	bl	800ba98 <__mcmp>
 800ae42:	0032      	movs	r2, r6
 800ae44:	9010      	str	r0, [sp, #64]	; 0x40
 800ae46:	9904      	ldr	r1, [sp, #16]
 800ae48:	9802      	ldr	r0, [sp, #8]
 800ae4a:	f000 fe3f 	bl	800bacc <__mdiff>
 800ae4e:	2301      	movs	r3, #1
 800ae50:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae52:	68c3      	ldr	r3, [r0, #12]
 800ae54:	3430      	adds	r4, #48	; 0x30
 800ae56:	0005      	movs	r5, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d104      	bne.n	800ae66 <_dtoa_r+0xa0e>
 800ae5c:	0001      	movs	r1, r0
 800ae5e:	9803      	ldr	r0, [sp, #12]
 800ae60:	f000 fe1a 	bl	800ba98 <__mcmp>
 800ae64:	900b      	str	r0, [sp, #44]	; 0x2c
 800ae66:	0029      	movs	r1, r5
 800ae68:	9802      	ldr	r0, [sp, #8]
 800ae6a:	f000 fc57 	bl	800b71c <_Bfree>
 800ae6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae70:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ae72:	4313      	orrs	r3, r2
 800ae74:	d10e      	bne.n	800ae94 <_dtoa_r+0xa3c>
 800ae76:	9a06      	ldr	r2, [sp, #24]
 800ae78:	3301      	adds	r3, #1
 800ae7a:	4213      	tst	r3, r2
 800ae7c:	d10a      	bne.n	800ae94 <_dtoa_r+0xa3c>
 800ae7e:	2c39      	cmp	r4, #57	; 0x39
 800ae80:	d026      	beq.n	800aed0 <_dtoa_r+0xa78>
 800ae82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	dd01      	ble.n	800ae8c <_dtoa_r+0xa34>
 800ae88:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ae8a:	3431      	adds	r4, #49	; 0x31
 800ae8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae8e:	1c5d      	adds	r5, r3, #1
 800ae90:	701c      	strb	r4, [r3, #0]
 800ae92:	e781      	b.n	800ad98 <_dtoa_r+0x940>
 800ae94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	db07      	blt.n	800aeaa <_dtoa_r+0xa52>
 800ae9a:	001d      	movs	r5, r3
 800ae9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ae9e:	431d      	orrs	r5, r3
 800aea0:	d122      	bne.n	800aee8 <_dtoa_r+0xa90>
 800aea2:	2301      	movs	r3, #1
 800aea4:	9a06      	ldr	r2, [sp, #24]
 800aea6:	4213      	tst	r3, r2
 800aea8:	d11e      	bne.n	800aee8 <_dtoa_r+0xa90>
 800aeaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	dded      	ble.n	800ae8c <_dtoa_r+0xa34>
 800aeb0:	9903      	ldr	r1, [sp, #12]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	9802      	ldr	r0, [sp, #8]
 800aeb6:	f000 fd9d 	bl	800b9f4 <__lshift>
 800aeba:	9904      	ldr	r1, [sp, #16]
 800aebc:	9003      	str	r0, [sp, #12]
 800aebe:	f000 fdeb 	bl	800ba98 <__mcmp>
 800aec2:	2800      	cmp	r0, #0
 800aec4:	dc02      	bgt.n	800aecc <_dtoa_r+0xa74>
 800aec6:	d1e1      	bne.n	800ae8c <_dtoa_r+0xa34>
 800aec8:	07e3      	lsls	r3, r4, #31
 800aeca:	d5df      	bpl.n	800ae8c <_dtoa_r+0xa34>
 800aecc:	2c39      	cmp	r4, #57	; 0x39
 800aece:	d1db      	bne.n	800ae88 <_dtoa_r+0xa30>
 800aed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aed2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aed4:	1c5d      	adds	r5, r3, #1
 800aed6:	2339      	movs	r3, #57	; 0x39
 800aed8:	7013      	strb	r3, [r2, #0]
 800aeda:	1e6b      	subs	r3, r5, #1
 800aedc:	781a      	ldrb	r2, [r3, #0]
 800aede:	2a39      	cmp	r2, #57	; 0x39
 800aee0:	d067      	beq.n	800afb2 <_dtoa_r+0xb5a>
 800aee2:	3201      	adds	r2, #1
 800aee4:	701a      	strb	r2, [r3, #0]
 800aee6:	e757      	b.n	800ad98 <_dtoa_r+0x940>
 800aee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeea:	1c5d      	adds	r5, r3, #1
 800aeec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	dd04      	ble.n	800aefc <_dtoa_r+0xaa4>
 800aef2:	2c39      	cmp	r4, #57	; 0x39
 800aef4:	d0ec      	beq.n	800aed0 <_dtoa_r+0xa78>
 800aef6:	3401      	adds	r4, #1
 800aef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aefa:	e7c9      	b.n	800ae90 <_dtoa_r+0xa38>
 800aefc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aefe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af00:	701c      	strb	r4, [r3, #0]
 800af02:	9b08      	ldr	r3, [sp, #32]
 800af04:	1aeb      	subs	r3, r5, r3
 800af06:	4293      	cmp	r3, r2
 800af08:	d03e      	beq.n	800af88 <_dtoa_r+0xb30>
 800af0a:	2300      	movs	r3, #0
 800af0c:	220a      	movs	r2, #10
 800af0e:	9903      	ldr	r1, [sp, #12]
 800af10:	9802      	ldr	r0, [sp, #8]
 800af12:	f000 fc0d 	bl	800b730 <__multadd>
 800af16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af18:	9003      	str	r0, [sp, #12]
 800af1a:	42b3      	cmp	r3, r6
 800af1c:	d109      	bne.n	800af32 <_dtoa_r+0xada>
 800af1e:	2300      	movs	r3, #0
 800af20:	220a      	movs	r2, #10
 800af22:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af24:	9802      	ldr	r0, [sp, #8]
 800af26:	f000 fc03 	bl	800b730 <__multadd>
 800af2a:	9009      	str	r0, [sp, #36]	; 0x24
 800af2c:	0006      	movs	r6, r0
 800af2e:	950a      	str	r5, [sp, #40]	; 0x28
 800af30:	e77d      	b.n	800ae2e <_dtoa_r+0x9d6>
 800af32:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af34:	2300      	movs	r3, #0
 800af36:	220a      	movs	r2, #10
 800af38:	9802      	ldr	r0, [sp, #8]
 800af3a:	f000 fbf9 	bl	800b730 <__multadd>
 800af3e:	2300      	movs	r3, #0
 800af40:	9009      	str	r0, [sp, #36]	; 0x24
 800af42:	220a      	movs	r2, #10
 800af44:	0031      	movs	r1, r6
 800af46:	9802      	ldr	r0, [sp, #8]
 800af48:	f000 fbf2 	bl	800b730 <__multadd>
 800af4c:	e7ee      	b.n	800af2c <_dtoa_r+0xad4>
 800af4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af50:	930c      	str	r3, [sp, #48]	; 0x30
 800af52:	9b08      	ldr	r3, [sp, #32]
 800af54:	9306      	str	r3, [sp, #24]
 800af56:	9904      	ldr	r1, [sp, #16]
 800af58:	9803      	ldr	r0, [sp, #12]
 800af5a:	f7ff f9f7 	bl	800a34c <quorem>
 800af5e:	9b06      	ldr	r3, [sp, #24]
 800af60:	3030      	adds	r0, #48	; 0x30
 800af62:	1c5d      	adds	r5, r3, #1
 800af64:	7018      	strb	r0, [r3, #0]
 800af66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af68:	9b08      	ldr	r3, [sp, #32]
 800af6a:	0004      	movs	r4, r0
 800af6c:	1aeb      	subs	r3, r5, r3
 800af6e:	429a      	cmp	r2, r3
 800af70:	dd08      	ble.n	800af84 <_dtoa_r+0xb2c>
 800af72:	2300      	movs	r3, #0
 800af74:	220a      	movs	r2, #10
 800af76:	9903      	ldr	r1, [sp, #12]
 800af78:	9802      	ldr	r0, [sp, #8]
 800af7a:	f000 fbd9 	bl	800b730 <__multadd>
 800af7e:	9506      	str	r5, [sp, #24]
 800af80:	9003      	str	r0, [sp, #12]
 800af82:	e7e8      	b.n	800af56 <_dtoa_r+0xafe>
 800af84:	2300      	movs	r3, #0
 800af86:	9309      	str	r3, [sp, #36]	; 0x24
 800af88:	9903      	ldr	r1, [sp, #12]
 800af8a:	2201      	movs	r2, #1
 800af8c:	9802      	ldr	r0, [sp, #8]
 800af8e:	f000 fd31 	bl	800b9f4 <__lshift>
 800af92:	9904      	ldr	r1, [sp, #16]
 800af94:	9003      	str	r0, [sp, #12]
 800af96:	f000 fd7f 	bl	800ba98 <__mcmp>
 800af9a:	2800      	cmp	r0, #0
 800af9c:	dc9d      	bgt.n	800aeda <_dtoa_r+0xa82>
 800af9e:	d101      	bne.n	800afa4 <_dtoa_r+0xb4c>
 800afa0:	07e3      	lsls	r3, r4, #31
 800afa2:	d49a      	bmi.n	800aeda <_dtoa_r+0xa82>
 800afa4:	1e6b      	subs	r3, r5, #1
 800afa6:	781a      	ldrb	r2, [r3, #0]
 800afa8:	2a30      	cmp	r2, #48	; 0x30
 800afaa:	d000      	beq.n	800afae <_dtoa_r+0xb56>
 800afac:	e6f4      	b.n	800ad98 <_dtoa_r+0x940>
 800afae:	001d      	movs	r5, r3
 800afb0:	e7f8      	b.n	800afa4 <_dtoa_r+0xb4c>
 800afb2:	9a08      	ldr	r2, [sp, #32]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d103      	bne.n	800afc0 <_dtoa_r+0xb68>
 800afb8:	2331      	movs	r3, #49	; 0x31
 800afba:	3701      	adds	r7, #1
 800afbc:	7013      	strb	r3, [r2, #0]
 800afbe:	e6eb      	b.n	800ad98 <_dtoa_r+0x940>
 800afc0:	001d      	movs	r5, r3
 800afc2:	e78a      	b.n	800aeda <_dtoa_r+0xa82>
 800afc4:	4b0b      	ldr	r3, [pc, #44]	; (800aff4 <_dtoa_r+0xb9c>)
 800afc6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800afc8:	9308      	str	r3, [sp, #32]
 800afca:	4b0b      	ldr	r3, [pc, #44]	; (800aff8 <_dtoa_r+0xba0>)
 800afcc:	2a00      	cmp	r2, #0
 800afce:	d001      	beq.n	800afd4 <_dtoa_r+0xb7c>
 800afd0:	f7ff fa75 	bl	800a4be <_dtoa_r+0x66>
 800afd4:	f7ff fa75 	bl	800a4c2 <_dtoa_r+0x6a>
 800afd8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800afda:	2b01      	cmp	r3, #1
 800afdc:	dc00      	bgt.n	800afe0 <_dtoa_r+0xb88>
 800afde:	e621      	b.n	800ac24 <_dtoa_r+0x7cc>
 800afe0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800afe2:	2001      	movs	r0, #1
 800afe4:	e635      	b.n	800ac52 <_dtoa_r+0x7fa>
 800afe6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afe8:	2b00      	cmp	r3, #0
 800afea:	dcb2      	bgt.n	800af52 <_dtoa_r+0xafa>
 800afec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800afee:	2b02      	cmp	r3, #2
 800aff0:	ddaf      	ble.n	800af52 <_dtoa_r+0xafa>
 800aff2:	e6bc      	b.n	800ad6e <_dtoa_r+0x916>
 800aff4:	0800ca30 	.word	0x0800ca30
 800aff8:	0800ca38 	.word	0x0800ca38

0800affc <__libc_fini_array>:
 800affc:	b570      	push	{r4, r5, r6, lr}
 800affe:	4d07      	ldr	r5, [pc, #28]	; (800b01c <__libc_fini_array+0x20>)
 800b000:	4c07      	ldr	r4, [pc, #28]	; (800b020 <__libc_fini_array+0x24>)
 800b002:	1b64      	subs	r4, r4, r5
 800b004:	10a4      	asrs	r4, r4, #2
 800b006:	2c00      	cmp	r4, #0
 800b008:	d102      	bne.n	800b010 <__libc_fini_array+0x14>
 800b00a:	f001 f951 	bl	800c2b0 <_fini>
 800b00e:	bd70      	pop	{r4, r5, r6, pc}
 800b010:	3c01      	subs	r4, #1
 800b012:	00a3      	lsls	r3, r4, #2
 800b014:	58eb      	ldr	r3, [r5, r3]
 800b016:	4798      	blx	r3
 800b018:	e7f5      	b.n	800b006 <__libc_fini_array+0xa>
 800b01a:	46c0      	nop			; (mov r8, r8)
 800b01c:	0800cc58 	.word	0x0800cc58
 800b020:	0800cc5c 	.word	0x0800cc5c

0800b024 <_malloc_trim_r>:
 800b024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b026:	0005      	movs	r5, r0
 800b028:	2008      	movs	r0, #8
 800b02a:	000c      	movs	r4, r1
 800b02c:	f000 fedc 	bl	800bde8 <sysconf>
 800b030:	0007      	movs	r7, r0
 800b032:	0028      	movs	r0, r5
 800b034:	f000 fb3a 	bl	800b6ac <__malloc_lock>
 800b038:	2203      	movs	r2, #3
 800b03a:	4e21      	ldr	r6, [pc, #132]	; (800b0c0 <_malloc_trim_r+0x9c>)
 800b03c:	0039      	movs	r1, r7
 800b03e:	68b3      	ldr	r3, [r6, #8]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	4393      	bics	r3, r2
 800b044:	1b18      	subs	r0, r3, r4
 800b046:	3811      	subs	r0, #17
 800b048:	19c0      	adds	r0, r0, r7
 800b04a:	9301      	str	r3, [sp, #4]
 800b04c:	f7f5 f878 	bl	8000140 <__udivsi3>
 800b050:	1e44      	subs	r4, r0, #1
 800b052:	437c      	muls	r4, r7
 800b054:	42a7      	cmp	r7, r4
 800b056:	dd04      	ble.n	800b062 <_malloc_trim_r+0x3e>
 800b058:	0028      	movs	r0, r5
 800b05a:	f000 fb2f 	bl	800b6bc <__malloc_unlock>
 800b05e:	2000      	movs	r0, #0
 800b060:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b062:	2100      	movs	r1, #0
 800b064:	0028      	movs	r0, r5
 800b066:	f000 fe1b 	bl	800bca0 <_sbrk_r>
 800b06a:	68b3      	ldr	r3, [r6, #8]
 800b06c:	9a01      	ldr	r2, [sp, #4]
 800b06e:	189b      	adds	r3, r3, r2
 800b070:	4298      	cmp	r0, r3
 800b072:	d1f1      	bne.n	800b058 <_malloc_trim_r+0x34>
 800b074:	4261      	negs	r1, r4
 800b076:	0028      	movs	r0, r5
 800b078:	f000 fe12 	bl	800bca0 <_sbrk_r>
 800b07c:	1c43      	adds	r3, r0, #1
 800b07e:	d110      	bne.n	800b0a2 <_malloc_trim_r+0x7e>
 800b080:	2100      	movs	r1, #0
 800b082:	0028      	movs	r0, r5
 800b084:	f000 fe0c 	bl	800bca0 <_sbrk_r>
 800b088:	68b2      	ldr	r2, [r6, #8]
 800b08a:	1a81      	subs	r1, r0, r2
 800b08c:	290f      	cmp	r1, #15
 800b08e:	dde3      	ble.n	800b058 <_malloc_trim_r+0x34>
 800b090:	4b0c      	ldr	r3, [pc, #48]	; (800b0c4 <_malloc_trim_r+0xa0>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	1ac0      	subs	r0, r0, r3
 800b096:	4b0c      	ldr	r3, [pc, #48]	; (800b0c8 <_malloc_trim_r+0xa4>)
 800b098:	6018      	str	r0, [r3, #0]
 800b09a:	2301      	movs	r3, #1
 800b09c:	430b      	orrs	r3, r1
 800b09e:	6053      	str	r3, [r2, #4]
 800b0a0:	e7da      	b.n	800b058 <_malloc_trim_r+0x34>
 800b0a2:	68b2      	ldr	r2, [r6, #8]
 800b0a4:	2601      	movs	r6, #1
 800b0a6:	9b01      	ldr	r3, [sp, #4]
 800b0a8:	0028      	movs	r0, r5
 800b0aa:	1b1b      	subs	r3, r3, r4
 800b0ac:	4333      	orrs	r3, r6
 800b0ae:	6053      	str	r3, [r2, #4]
 800b0b0:	4b05      	ldr	r3, [pc, #20]	; (800b0c8 <_malloc_trim_r+0xa4>)
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	1b14      	subs	r4, r2, r4
 800b0b6:	601c      	str	r4, [r3, #0]
 800b0b8:	f000 fb00 	bl	800b6bc <__malloc_unlock>
 800b0bc:	0030      	movs	r0, r6
 800b0be:	e7cf      	b.n	800b060 <_malloc_trim_r+0x3c>
 800b0c0:	200005a8 	.word	0x200005a8
 800b0c4:	200009b0 	.word	0x200009b0
 800b0c8:	200038d0 	.word	0x200038d0

0800b0cc <_free_r>:
 800b0cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0ce:	1e0d      	subs	r5, r1, #0
 800b0d0:	9001      	str	r0, [sp, #4]
 800b0d2:	d02d      	beq.n	800b130 <_free_r+0x64>
 800b0d4:	f000 faea 	bl	800b6ac <__malloc_lock>
 800b0d8:	2301      	movs	r3, #1
 800b0da:	0029      	movs	r1, r5
 800b0dc:	469c      	mov	ip, r3
 800b0de:	3908      	subs	r1, #8
 800b0e0:	684f      	ldr	r7, [r1, #4]
 800b0e2:	4662      	mov	r2, ip
 800b0e4:	003b      	movs	r3, r7
 800b0e6:	4666      	mov	r6, ip
 800b0e8:	4393      	bics	r3, r2
 800b0ea:	18c8      	adds	r0, r1, r3
 800b0ec:	6845      	ldr	r5, [r0, #4]
 800b0ee:	3202      	adds	r2, #2
 800b0f0:	4395      	bics	r5, r2
 800b0f2:	4a4a      	ldr	r2, [pc, #296]	; (800b21c <_free_r+0x150>)
 800b0f4:	4037      	ands	r7, r6
 800b0f6:	6896      	ldr	r6, [r2, #8]
 800b0f8:	4286      	cmp	r6, r0
 800b0fa:	d11a      	bne.n	800b132 <_free_r+0x66>
 800b0fc:	195b      	adds	r3, r3, r5
 800b0fe:	2f00      	cmp	r7, #0
 800b100:	d106      	bne.n	800b110 <_free_r+0x44>
 800b102:	6808      	ldr	r0, [r1, #0]
 800b104:	1a09      	subs	r1, r1, r0
 800b106:	688d      	ldr	r5, [r1, #8]
 800b108:	181b      	adds	r3, r3, r0
 800b10a:	68c8      	ldr	r0, [r1, #12]
 800b10c:	60e8      	str	r0, [r5, #12]
 800b10e:	6085      	str	r5, [r0, #8]
 800b110:	2001      	movs	r0, #1
 800b112:	4318      	orrs	r0, r3
 800b114:	6048      	str	r0, [r1, #4]
 800b116:	6091      	str	r1, [r2, #8]
 800b118:	4a41      	ldr	r2, [pc, #260]	; (800b220 <_free_r+0x154>)
 800b11a:	6812      	ldr	r2, [r2, #0]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d804      	bhi.n	800b12a <_free_r+0x5e>
 800b120:	4b40      	ldr	r3, [pc, #256]	; (800b224 <_free_r+0x158>)
 800b122:	9801      	ldr	r0, [sp, #4]
 800b124:	6819      	ldr	r1, [r3, #0]
 800b126:	f7ff ff7d 	bl	800b024 <_malloc_trim_r>
 800b12a:	9801      	ldr	r0, [sp, #4]
 800b12c:	f000 fac6 	bl	800b6bc <__malloc_unlock>
 800b130:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b132:	2600      	movs	r6, #0
 800b134:	6045      	str	r5, [r0, #4]
 800b136:	42b7      	cmp	r7, r6
 800b138:	d109      	bne.n	800b14e <_free_r+0x82>
 800b13a:	680f      	ldr	r7, [r1, #0]
 800b13c:	4c3a      	ldr	r4, [pc, #232]	; (800b228 <_free_r+0x15c>)
 800b13e:	1bc9      	subs	r1, r1, r7
 800b140:	19db      	adds	r3, r3, r7
 800b142:	688f      	ldr	r7, [r1, #8]
 800b144:	42a7      	cmp	r7, r4
 800b146:	d02b      	beq.n	800b1a0 <_free_r+0xd4>
 800b148:	68cc      	ldr	r4, [r1, #12]
 800b14a:	60fc      	str	r4, [r7, #12]
 800b14c:	60a7      	str	r7, [r4, #8]
 800b14e:	1947      	adds	r7, r0, r5
 800b150:	687c      	ldr	r4, [r7, #4]
 800b152:	2701      	movs	r7, #1
 800b154:	423c      	tst	r4, r7
 800b156:	d10b      	bne.n	800b170 <_free_r+0xa4>
 800b158:	195b      	adds	r3, r3, r5
 800b15a:	6885      	ldr	r5, [r0, #8]
 800b15c:	2e00      	cmp	r6, #0
 800b15e:	d121      	bne.n	800b1a4 <_free_r+0xd8>
 800b160:	4c31      	ldr	r4, [pc, #196]	; (800b228 <_free_r+0x15c>)
 800b162:	42a5      	cmp	r5, r4
 800b164:	d11e      	bne.n	800b1a4 <_free_r+0xd8>
 800b166:	003e      	movs	r6, r7
 800b168:	6151      	str	r1, [r2, #20]
 800b16a:	6111      	str	r1, [r2, #16]
 800b16c:	60cd      	str	r5, [r1, #12]
 800b16e:	608d      	str	r5, [r1, #8]
 800b170:	2001      	movs	r0, #1
 800b172:	0005      	movs	r5, r0
 800b174:	431d      	orrs	r5, r3
 800b176:	604d      	str	r5, [r1, #4]
 800b178:	50cb      	str	r3, [r1, r3]
 800b17a:	2e00      	cmp	r6, #0
 800b17c:	d1d5      	bne.n	800b12a <_free_r+0x5e>
 800b17e:	4d2b      	ldr	r5, [pc, #172]	; (800b22c <_free_r+0x160>)
 800b180:	42ab      	cmp	r3, r5
 800b182:	d813      	bhi.n	800b1ac <_free_r+0xe0>
 800b184:	08db      	lsrs	r3, r3, #3
 800b186:	109d      	asrs	r5, r3, #2
 800b188:	40a8      	lsls	r0, r5
 800b18a:	6854      	ldr	r4, [r2, #4]
 800b18c:	00db      	lsls	r3, r3, #3
 800b18e:	4320      	orrs	r0, r4
 800b190:	6050      	str	r0, [r2, #4]
 800b192:	189a      	adds	r2, r3, r2
 800b194:	6893      	ldr	r3, [r2, #8]
 800b196:	60ca      	str	r2, [r1, #12]
 800b198:	608b      	str	r3, [r1, #8]
 800b19a:	6091      	str	r1, [r2, #8]
 800b19c:	60d9      	str	r1, [r3, #12]
 800b19e:	e7c4      	b.n	800b12a <_free_r+0x5e>
 800b1a0:	4666      	mov	r6, ip
 800b1a2:	e7d4      	b.n	800b14e <_free_r+0x82>
 800b1a4:	68c0      	ldr	r0, [r0, #12]
 800b1a6:	60e8      	str	r0, [r5, #12]
 800b1a8:	6085      	str	r5, [r0, #8]
 800b1aa:	e7e1      	b.n	800b170 <_free_r+0xa4>
 800b1ac:	0a5d      	lsrs	r5, r3, #9
 800b1ae:	2d04      	cmp	r5, #4
 800b1b0:	d812      	bhi.n	800b1d8 <_free_r+0x10c>
 800b1b2:	0998      	lsrs	r0, r3, #6
 800b1b4:	3038      	adds	r0, #56	; 0x38
 800b1b6:	00c6      	lsls	r6, r0, #3
 800b1b8:	18b6      	adds	r6, r6, r2
 800b1ba:	68b5      	ldr	r5, [r6, #8]
 800b1bc:	2703      	movs	r7, #3
 800b1be:	42ae      	cmp	r6, r5
 800b1c0:	d125      	bne.n	800b20e <_free_r+0x142>
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	1080      	asrs	r0, r0, #2
 800b1c6:	4083      	lsls	r3, r0
 800b1c8:	6850      	ldr	r0, [r2, #4]
 800b1ca:	4303      	orrs	r3, r0
 800b1cc:	6053      	str	r3, [r2, #4]
 800b1ce:	60ce      	str	r6, [r1, #12]
 800b1d0:	608d      	str	r5, [r1, #8]
 800b1d2:	60b1      	str	r1, [r6, #8]
 800b1d4:	60e9      	str	r1, [r5, #12]
 800b1d6:	e7a8      	b.n	800b12a <_free_r+0x5e>
 800b1d8:	2d14      	cmp	r5, #20
 800b1da:	d802      	bhi.n	800b1e2 <_free_r+0x116>
 800b1dc:	0028      	movs	r0, r5
 800b1de:	305b      	adds	r0, #91	; 0x5b
 800b1e0:	e7e9      	b.n	800b1b6 <_free_r+0xea>
 800b1e2:	2d54      	cmp	r5, #84	; 0x54
 800b1e4:	d802      	bhi.n	800b1ec <_free_r+0x120>
 800b1e6:	0b18      	lsrs	r0, r3, #12
 800b1e8:	306e      	adds	r0, #110	; 0x6e
 800b1ea:	e7e4      	b.n	800b1b6 <_free_r+0xea>
 800b1ec:	20aa      	movs	r0, #170	; 0xaa
 800b1ee:	0040      	lsls	r0, r0, #1
 800b1f0:	4285      	cmp	r5, r0
 800b1f2:	d802      	bhi.n	800b1fa <_free_r+0x12e>
 800b1f4:	0bd8      	lsrs	r0, r3, #15
 800b1f6:	3077      	adds	r0, #119	; 0x77
 800b1f8:	e7dd      	b.n	800b1b6 <_free_r+0xea>
 800b1fa:	4e0d      	ldr	r6, [pc, #52]	; (800b230 <_free_r+0x164>)
 800b1fc:	207e      	movs	r0, #126	; 0x7e
 800b1fe:	42b5      	cmp	r5, r6
 800b200:	d8d9      	bhi.n	800b1b6 <_free_r+0xea>
 800b202:	0c98      	lsrs	r0, r3, #18
 800b204:	307c      	adds	r0, #124	; 0x7c
 800b206:	e7d6      	b.n	800b1b6 <_free_r+0xea>
 800b208:	68ad      	ldr	r5, [r5, #8]
 800b20a:	42ae      	cmp	r6, r5
 800b20c:	d003      	beq.n	800b216 <_free_r+0x14a>
 800b20e:	686a      	ldr	r2, [r5, #4]
 800b210:	43ba      	bics	r2, r7
 800b212:	429a      	cmp	r2, r3
 800b214:	d8f8      	bhi.n	800b208 <_free_r+0x13c>
 800b216:	68ee      	ldr	r6, [r5, #12]
 800b218:	e7d9      	b.n	800b1ce <_free_r+0x102>
 800b21a:	46c0      	nop			; (mov r8, r8)
 800b21c:	200005a8 	.word	0x200005a8
 800b220:	200009b4 	.word	0x200009b4
 800b224:	20003900 	.word	0x20003900
 800b228:	200005b0 	.word	0x200005b0
 800b22c:	000001ff 	.word	0x000001ff
 800b230:	00000554 	.word	0x00000554

0800b234 <__locale_ctype_ptr_l>:
 800b234:	30ec      	adds	r0, #236	; 0xec
 800b236:	6800      	ldr	r0, [r0, #0]
 800b238:	4770      	bx	lr
	...

0800b23c <_localeconv_r>:
 800b23c:	4b03      	ldr	r3, [pc, #12]	; (800b24c <_localeconv_r+0x10>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b242:	2800      	cmp	r0, #0
 800b244:	d100      	bne.n	800b248 <_localeconv_r+0xc>
 800b246:	4802      	ldr	r0, [pc, #8]	; (800b250 <_localeconv_r+0x14>)
 800b248:	30f0      	adds	r0, #240	; 0xf0
 800b24a:	4770      	bx	lr
 800b24c:	20000008 	.word	0x20000008
 800b250:	2000043c 	.word	0x2000043c

0800b254 <__retarget_lock_acquire_recursive>:
 800b254:	4770      	bx	lr

0800b256 <__retarget_lock_release_recursive>:
 800b256:	4770      	bx	lr

0800b258 <_malloc_r>:
 800b258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b25a:	000d      	movs	r5, r1
 800b25c:	b085      	sub	sp, #20
 800b25e:	350b      	adds	r5, #11
 800b260:	9001      	str	r0, [sp, #4]
 800b262:	2d16      	cmp	r5, #22
 800b264:	d908      	bls.n	800b278 <_malloc_r+0x20>
 800b266:	2307      	movs	r3, #7
 800b268:	439d      	bics	r5, r3
 800b26a:	d506      	bpl.n	800b27a <_malloc_r+0x22>
 800b26c:	230c      	movs	r3, #12
 800b26e:	9a01      	ldr	r2, [sp, #4]
 800b270:	6013      	str	r3, [r2, #0]
 800b272:	2000      	movs	r0, #0
 800b274:	b005      	add	sp, #20
 800b276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b278:	2510      	movs	r5, #16
 800b27a:	428d      	cmp	r5, r1
 800b27c:	d3f6      	bcc.n	800b26c <_malloc_r+0x14>
 800b27e:	9801      	ldr	r0, [sp, #4]
 800b280:	f000 fa14 	bl	800b6ac <__malloc_lock>
 800b284:	23f8      	movs	r3, #248	; 0xf8
 800b286:	33ff      	adds	r3, #255	; 0xff
 800b288:	4ac4      	ldr	r2, [pc, #784]	; (800b59c <_malloc_r+0x344>)
 800b28a:	429d      	cmp	r5, r3
 800b28c:	d820      	bhi.n	800b2d0 <_malloc_r+0x78>
 800b28e:	0029      	movs	r1, r5
 800b290:	3108      	adds	r1, #8
 800b292:	1851      	adds	r1, r2, r1
 800b294:	0008      	movs	r0, r1
 800b296:	684c      	ldr	r4, [r1, #4]
 800b298:	3808      	subs	r0, #8
 800b29a:	08eb      	lsrs	r3, r5, #3
 800b29c:	4284      	cmp	r4, r0
 800b29e:	d104      	bne.n	800b2aa <_malloc_r+0x52>
 800b2a0:	68cc      	ldr	r4, [r1, #12]
 800b2a2:	3302      	adds	r3, #2
 800b2a4:	469c      	mov	ip, r3
 800b2a6:	42a1      	cmp	r1, r4
 800b2a8:	d02a      	beq.n	800b300 <_malloc_r+0xa8>
 800b2aa:	2303      	movs	r3, #3
 800b2ac:	6862      	ldr	r2, [r4, #4]
 800b2ae:	68a1      	ldr	r1, [r4, #8]
 800b2b0:	439a      	bics	r2, r3
 800b2b2:	0013      	movs	r3, r2
 800b2b4:	68e2      	ldr	r2, [r4, #12]
 800b2b6:	18e3      	adds	r3, r4, r3
 800b2b8:	60ca      	str	r2, [r1, #12]
 800b2ba:	6091      	str	r1, [r2, #8]
 800b2bc:	2201      	movs	r2, #1
 800b2be:	6859      	ldr	r1, [r3, #4]
 800b2c0:	430a      	orrs	r2, r1
 800b2c2:	605a      	str	r2, [r3, #4]
 800b2c4:	9801      	ldr	r0, [sp, #4]
 800b2c6:	f000 f9f9 	bl	800b6bc <__malloc_unlock>
 800b2ca:	0020      	movs	r0, r4
 800b2cc:	3008      	adds	r0, #8
 800b2ce:	e7d1      	b.n	800b274 <_malloc_r+0x1c>
 800b2d0:	0a69      	lsrs	r1, r5, #9
 800b2d2:	233f      	movs	r3, #63	; 0x3f
 800b2d4:	2900      	cmp	r1, #0
 800b2d6:	d003      	beq.n	800b2e0 <_malloc_r+0x88>
 800b2d8:	2904      	cmp	r1, #4
 800b2da:	d828      	bhi.n	800b32e <_malloc_r+0xd6>
 800b2dc:	09ab      	lsrs	r3, r5, #6
 800b2de:	3338      	adds	r3, #56	; 0x38
 800b2e0:	2103      	movs	r1, #3
 800b2e2:	468c      	mov	ip, r1
 800b2e4:	00d8      	lsls	r0, r3, #3
 800b2e6:	1880      	adds	r0, r0, r2
 800b2e8:	68c4      	ldr	r4, [r0, #12]
 800b2ea:	4284      	cmp	r4, r0
 800b2ec:	d006      	beq.n	800b2fc <_malloc_r+0xa4>
 800b2ee:	4666      	mov	r6, ip
 800b2f0:	6861      	ldr	r1, [r4, #4]
 800b2f2:	43b1      	bics	r1, r6
 800b2f4:	1b4f      	subs	r7, r1, r5
 800b2f6:	2f0f      	cmp	r7, #15
 800b2f8:	dd31      	ble.n	800b35e <_malloc_r+0x106>
 800b2fa:	3b01      	subs	r3, #1
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	469c      	mov	ip, r3
 800b300:	6914      	ldr	r4, [r2, #16]
 800b302:	49a7      	ldr	r1, [pc, #668]	; (800b5a0 <_malloc_r+0x348>)
 800b304:	428c      	cmp	r4, r1
 800b306:	d055      	beq.n	800b3b4 <_malloc_r+0x15c>
 800b308:	2303      	movs	r3, #3
 800b30a:	6860      	ldr	r0, [r4, #4]
 800b30c:	4398      	bics	r0, r3
 800b30e:	0003      	movs	r3, r0
 800b310:	1b46      	subs	r6, r0, r5
 800b312:	2e0f      	cmp	r6, #15
 800b314:	dd31      	ble.n	800b37a <_malloc_r+0x122>
 800b316:	2701      	movs	r7, #1
 800b318:	1960      	adds	r0, r4, r5
 800b31a:	433d      	orrs	r5, r7
 800b31c:	4337      	orrs	r7, r6
 800b31e:	6065      	str	r5, [r4, #4]
 800b320:	6150      	str	r0, [r2, #20]
 800b322:	6110      	str	r0, [r2, #16]
 800b324:	60c1      	str	r1, [r0, #12]
 800b326:	6081      	str	r1, [r0, #8]
 800b328:	6047      	str	r7, [r0, #4]
 800b32a:	50e6      	str	r6, [r4, r3]
 800b32c:	e7ca      	b.n	800b2c4 <_malloc_r+0x6c>
 800b32e:	2914      	cmp	r1, #20
 800b330:	d802      	bhi.n	800b338 <_malloc_r+0xe0>
 800b332:	000b      	movs	r3, r1
 800b334:	335b      	adds	r3, #91	; 0x5b
 800b336:	e7d3      	b.n	800b2e0 <_malloc_r+0x88>
 800b338:	2954      	cmp	r1, #84	; 0x54
 800b33a:	d802      	bhi.n	800b342 <_malloc_r+0xea>
 800b33c:	0b2b      	lsrs	r3, r5, #12
 800b33e:	336e      	adds	r3, #110	; 0x6e
 800b340:	e7ce      	b.n	800b2e0 <_malloc_r+0x88>
 800b342:	23aa      	movs	r3, #170	; 0xaa
 800b344:	005b      	lsls	r3, r3, #1
 800b346:	4299      	cmp	r1, r3
 800b348:	d802      	bhi.n	800b350 <_malloc_r+0xf8>
 800b34a:	0beb      	lsrs	r3, r5, #15
 800b34c:	3377      	adds	r3, #119	; 0x77
 800b34e:	e7c7      	b.n	800b2e0 <_malloc_r+0x88>
 800b350:	4894      	ldr	r0, [pc, #592]	; (800b5a4 <_malloc_r+0x34c>)
 800b352:	237e      	movs	r3, #126	; 0x7e
 800b354:	4281      	cmp	r1, r0
 800b356:	d8c3      	bhi.n	800b2e0 <_malloc_r+0x88>
 800b358:	0cab      	lsrs	r3, r5, #18
 800b35a:	337c      	adds	r3, #124	; 0x7c
 800b35c:	e7c0      	b.n	800b2e0 <_malloc_r+0x88>
 800b35e:	68e6      	ldr	r6, [r4, #12]
 800b360:	2f00      	cmp	r7, #0
 800b362:	db08      	blt.n	800b376 <_malloc_r+0x11e>
 800b364:	68a3      	ldr	r3, [r4, #8]
 800b366:	1861      	adds	r1, r4, r1
 800b368:	60de      	str	r6, [r3, #12]
 800b36a:	60b3      	str	r3, [r6, #8]
 800b36c:	2301      	movs	r3, #1
 800b36e:	684a      	ldr	r2, [r1, #4]
 800b370:	4313      	orrs	r3, r2
 800b372:	604b      	str	r3, [r1, #4]
 800b374:	e7a6      	b.n	800b2c4 <_malloc_r+0x6c>
 800b376:	0034      	movs	r4, r6
 800b378:	e7b7      	b.n	800b2ea <_malloc_r+0x92>
 800b37a:	6151      	str	r1, [r2, #20]
 800b37c:	6111      	str	r1, [r2, #16]
 800b37e:	2e00      	cmp	r6, #0
 800b380:	db05      	blt.n	800b38e <_malloc_r+0x136>
 800b382:	2101      	movs	r1, #1
 800b384:	1823      	adds	r3, r4, r0
 800b386:	685a      	ldr	r2, [r3, #4]
 800b388:	4311      	orrs	r1, r2
 800b38a:	6059      	str	r1, [r3, #4]
 800b38c:	e79a      	b.n	800b2c4 <_malloc_r+0x6c>
 800b38e:	4986      	ldr	r1, [pc, #536]	; (800b5a8 <_malloc_r+0x350>)
 800b390:	6857      	ldr	r7, [r2, #4]
 800b392:	4288      	cmp	r0, r1
 800b394:	d900      	bls.n	800b398 <_malloc_r+0x140>
 800b396:	e090      	b.n	800b4ba <_malloc_r+0x262>
 800b398:	08c3      	lsrs	r3, r0, #3
 800b39a:	39ff      	subs	r1, #255	; 0xff
 800b39c:	1098      	asrs	r0, r3, #2
 800b39e:	39ff      	subs	r1, #255	; 0xff
 800b3a0:	4081      	lsls	r1, r0
 800b3a2:	00db      	lsls	r3, r3, #3
 800b3a4:	4339      	orrs	r1, r7
 800b3a6:	6051      	str	r1, [r2, #4]
 800b3a8:	189a      	adds	r2, r3, r2
 800b3aa:	6893      	ldr	r3, [r2, #8]
 800b3ac:	60e2      	str	r2, [r4, #12]
 800b3ae:	60a3      	str	r3, [r4, #8]
 800b3b0:	6094      	str	r4, [r2, #8]
 800b3b2:	60dc      	str	r4, [r3, #12]
 800b3b4:	4663      	mov	r3, ip
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	4978      	ldr	r1, [pc, #480]	; (800b59c <_malloc_r+0x344>)
 800b3ba:	109b      	asrs	r3, r3, #2
 800b3bc:	6848      	ldr	r0, [r1, #4]
 800b3be:	409a      	lsls	r2, r3
 800b3c0:	4290      	cmp	r0, r2
 800b3c2:	d32d      	bcc.n	800b420 <_malloc_r+0x1c8>
 800b3c4:	4202      	tst	r2, r0
 800b3c6:	d109      	bne.n	800b3dc <_malloc_r+0x184>
 800b3c8:	2303      	movs	r3, #3
 800b3ca:	4664      	mov	r4, ip
 800b3cc:	439c      	bics	r4, r3
 800b3ce:	0023      	movs	r3, r4
 800b3d0:	3304      	adds	r3, #4
 800b3d2:	469c      	mov	ip, r3
 800b3d4:	0052      	lsls	r2, r2, #1
 800b3d6:	4202      	tst	r2, r0
 800b3d8:	d100      	bne.n	800b3dc <_malloc_r+0x184>
 800b3da:	e0a4      	b.n	800b526 <_malloc_r+0x2ce>
 800b3dc:	4663      	mov	r3, ip
 800b3de:	00db      	lsls	r3, r3, #3
 800b3e0:	18cb      	adds	r3, r1, r3
 800b3e2:	9303      	str	r3, [sp, #12]
 800b3e4:	001f      	movs	r7, r3
 800b3e6:	4663      	mov	r3, ip
 800b3e8:	9302      	str	r3, [sp, #8]
 800b3ea:	68fc      	ldr	r4, [r7, #12]
 800b3ec:	42bc      	cmp	r4, r7
 800b3ee:	d000      	beq.n	800b3f2 <_malloc_r+0x19a>
 800b3f0:	e09c      	b.n	800b52c <_malloc_r+0x2d4>
 800b3f2:	2003      	movs	r0, #3
 800b3f4:	9b02      	ldr	r3, [sp, #8]
 800b3f6:	3708      	adds	r7, #8
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	9302      	str	r3, [sp, #8]
 800b3fc:	4203      	tst	r3, r0
 800b3fe:	d1f4      	bne.n	800b3ea <_malloc_r+0x192>
 800b400:	4663      	mov	r3, ip
 800b402:	2003      	movs	r0, #3
 800b404:	4203      	tst	r3, r0
 800b406:	d000      	beq.n	800b40a <_malloc_r+0x1b2>
 800b408:	e0b3      	b.n	800b572 <_malloc_r+0x31a>
 800b40a:	684b      	ldr	r3, [r1, #4]
 800b40c:	4393      	bics	r3, r2
 800b40e:	604b      	str	r3, [r1, #4]
 800b410:	4b62      	ldr	r3, [pc, #392]	; (800b59c <_malloc_r+0x344>)
 800b412:	0052      	lsls	r2, r2, #1
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	4293      	cmp	r3, r2
 800b418:	d302      	bcc.n	800b420 <_malloc_r+0x1c8>
 800b41a:	2a00      	cmp	r2, #0
 800b41c:	d000      	beq.n	800b420 <_malloc_r+0x1c8>
 800b41e:	e0b9      	b.n	800b594 <_malloc_r+0x33c>
 800b420:	2303      	movs	r3, #3
 800b422:	688f      	ldr	r7, [r1, #8]
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	439a      	bics	r2, r3
 800b428:	9202      	str	r2, [sp, #8]
 800b42a:	42aa      	cmp	r2, r5
 800b42c:	d303      	bcc.n	800b436 <_malloc_r+0x1de>
 800b42e:	1b52      	subs	r2, r2, r5
 800b430:	2a0f      	cmp	r2, #15
 800b432:	dd00      	ble.n	800b436 <_malloc_r+0x1de>
 800b434:	e116      	b.n	800b664 <_malloc_r+0x40c>
 800b436:	4b5d      	ldr	r3, [pc, #372]	; (800b5ac <_malloc_r+0x354>)
 800b438:	2008      	movs	r0, #8
 800b43a:	681e      	ldr	r6, [r3, #0]
 800b43c:	f000 fcd4 	bl	800bde8 <sysconf>
 800b440:	4b5b      	ldr	r3, [pc, #364]	; (800b5b0 <_malloc_r+0x358>)
 800b442:	3610      	adds	r6, #16
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	1976      	adds	r6, r6, r5
 800b448:	9003      	str	r0, [sp, #12]
 800b44a:	3301      	adds	r3, #1
 800b44c:	d003      	beq.n	800b456 <_malloc_r+0x1fe>
 800b44e:	3e01      	subs	r6, #1
 800b450:	1836      	adds	r6, r6, r0
 800b452:	4243      	negs	r3, r0
 800b454:	401e      	ands	r6, r3
 800b456:	0031      	movs	r1, r6
 800b458:	9801      	ldr	r0, [sp, #4]
 800b45a:	f000 fc21 	bl	800bca0 <_sbrk_r>
 800b45e:	0004      	movs	r4, r0
 800b460:	1c43      	adds	r3, r0, #1
 800b462:	d100      	bne.n	800b466 <_malloc_r+0x20e>
 800b464:	e0d6      	b.n	800b614 <_malloc_r+0x3bc>
 800b466:	9b02      	ldr	r3, [sp, #8]
 800b468:	18fb      	adds	r3, r7, r3
 800b46a:	4283      	cmp	r3, r0
 800b46c:	d903      	bls.n	800b476 <_malloc_r+0x21e>
 800b46e:	4a4b      	ldr	r2, [pc, #300]	; (800b59c <_malloc_r+0x344>)
 800b470:	4297      	cmp	r7, r2
 800b472:	d000      	beq.n	800b476 <_malloc_r+0x21e>
 800b474:	e0ce      	b.n	800b614 <_malloc_r+0x3bc>
 800b476:	494f      	ldr	r1, [pc, #316]	; (800b5b4 <_malloc_r+0x35c>)
 800b478:	680a      	ldr	r2, [r1, #0]
 800b47a:	18b2      	adds	r2, r6, r2
 800b47c:	600a      	str	r2, [r1, #0]
 800b47e:	9903      	ldr	r1, [sp, #12]
 800b480:	4694      	mov	ip, r2
 800b482:	1e48      	subs	r0, r1, #1
 800b484:	42a3      	cmp	r3, r4
 800b486:	d000      	beq.n	800b48a <_malloc_r+0x232>
 800b488:	e09a      	b.n	800b5c0 <_malloc_r+0x368>
 800b48a:	4203      	tst	r3, r0
 800b48c:	d000      	beq.n	800b490 <_malloc_r+0x238>
 800b48e:	e097      	b.n	800b5c0 <_malloc_r+0x368>
 800b490:	9a02      	ldr	r2, [sp, #8]
 800b492:	4b42      	ldr	r3, [pc, #264]	; (800b59c <_malloc_r+0x344>)
 800b494:	1992      	adds	r2, r2, r6
 800b496:	2601      	movs	r6, #1
 800b498:	689b      	ldr	r3, [r3, #8]
 800b49a:	4316      	orrs	r6, r2
 800b49c:	605e      	str	r6, [r3, #4]
 800b49e:	4b45      	ldr	r3, [pc, #276]	; (800b5b4 <_malloc_r+0x35c>)
 800b4a0:	4a45      	ldr	r2, [pc, #276]	; (800b5b8 <_malloc_r+0x360>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	6811      	ldr	r1, [r2, #0]
 800b4a6:	428b      	cmp	r3, r1
 800b4a8:	d900      	bls.n	800b4ac <_malloc_r+0x254>
 800b4aa:	6013      	str	r3, [r2, #0]
 800b4ac:	4a43      	ldr	r2, [pc, #268]	; (800b5bc <_malloc_r+0x364>)
 800b4ae:	6811      	ldr	r1, [r2, #0]
 800b4b0:	428b      	cmp	r3, r1
 800b4b2:	d800      	bhi.n	800b4b6 <_malloc_r+0x25e>
 800b4b4:	e0ae      	b.n	800b614 <_malloc_r+0x3bc>
 800b4b6:	6013      	str	r3, [r2, #0]
 800b4b8:	e0ac      	b.n	800b614 <_malloc_r+0x3bc>
 800b4ba:	0a40      	lsrs	r0, r0, #9
 800b4bc:	2804      	cmp	r0, #4
 800b4be:	d810      	bhi.n	800b4e2 <_malloc_r+0x28a>
 800b4c0:	0999      	lsrs	r1, r3, #6
 800b4c2:	3138      	adds	r1, #56	; 0x38
 800b4c4:	00ce      	lsls	r6, r1, #3
 800b4c6:	18b6      	adds	r6, r6, r2
 800b4c8:	68b0      	ldr	r0, [r6, #8]
 800b4ca:	4286      	cmp	r6, r0
 800b4cc:	d124      	bne.n	800b518 <_malloc_r+0x2c0>
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	1089      	asrs	r1, r1, #2
 800b4d2:	408b      	lsls	r3, r1
 800b4d4:	433b      	orrs	r3, r7
 800b4d6:	6053      	str	r3, [r2, #4]
 800b4d8:	60e6      	str	r6, [r4, #12]
 800b4da:	60a0      	str	r0, [r4, #8]
 800b4dc:	60b4      	str	r4, [r6, #8]
 800b4de:	60c4      	str	r4, [r0, #12]
 800b4e0:	e768      	b.n	800b3b4 <_malloc_r+0x15c>
 800b4e2:	2814      	cmp	r0, #20
 800b4e4:	d802      	bhi.n	800b4ec <_malloc_r+0x294>
 800b4e6:	0001      	movs	r1, r0
 800b4e8:	315b      	adds	r1, #91	; 0x5b
 800b4ea:	e7eb      	b.n	800b4c4 <_malloc_r+0x26c>
 800b4ec:	2854      	cmp	r0, #84	; 0x54
 800b4ee:	d802      	bhi.n	800b4f6 <_malloc_r+0x29e>
 800b4f0:	0b19      	lsrs	r1, r3, #12
 800b4f2:	316e      	adds	r1, #110	; 0x6e
 800b4f4:	e7e6      	b.n	800b4c4 <_malloc_r+0x26c>
 800b4f6:	21aa      	movs	r1, #170	; 0xaa
 800b4f8:	0049      	lsls	r1, r1, #1
 800b4fa:	4288      	cmp	r0, r1
 800b4fc:	d802      	bhi.n	800b504 <_malloc_r+0x2ac>
 800b4fe:	0bd9      	lsrs	r1, r3, #15
 800b500:	3177      	adds	r1, #119	; 0x77
 800b502:	e7df      	b.n	800b4c4 <_malloc_r+0x26c>
 800b504:	4e27      	ldr	r6, [pc, #156]	; (800b5a4 <_malloc_r+0x34c>)
 800b506:	217e      	movs	r1, #126	; 0x7e
 800b508:	42b0      	cmp	r0, r6
 800b50a:	d8db      	bhi.n	800b4c4 <_malloc_r+0x26c>
 800b50c:	0c99      	lsrs	r1, r3, #18
 800b50e:	317c      	adds	r1, #124	; 0x7c
 800b510:	e7d8      	b.n	800b4c4 <_malloc_r+0x26c>
 800b512:	6880      	ldr	r0, [r0, #8]
 800b514:	4286      	cmp	r6, r0
 800b516:	d004      	beq.n	800b522 <_malloc_r+0x2ca>
 800b518:	2103      	movs	r1, #3
 800b51a:	6842      	ldr	r2, [r0, #4]
 800b51c:	438a      	bics	r2, r1
 800b51e:	429a      	cmp	r2, r3
 800b520:	d8f7      	bhi.n	800b512 <_malloc_r+0x2ba>
 800b522:	68c6      	ldr	r6, [r0, #12]
 800b524:	e7d8      	b.n	800b4d8 <_malloc_r+0x280>
 800b526:	2304      	movs	r3, #4
 800b528:	449c      	add	ip, r3
 800b52a:	e753      	b.n	800b3d4 <_malloc_r+0x17c>
 800b52c:	2003      	movs	r0, #3
 800b52e:	6863      	ldr	r3, [r4, #4]
 800b530:	4383      	bics	r3, r0
 800b532:	1b5e      	subs	r6, r3, r5
 800b534:	68e0      	ldr	r0, [r4, #12]
 800b536:	2e0f      	cmp	r6, #15
 800b538:	dd0e      	ble.n	800b558 <_malloc_r+0x300>
 800b53a:	2701      	movs	r7, #1
 800b53c:	1962      	adds	r2, r4, r5
 800b53e:	433d      	orrs	r5, r7
 800b540:	6065      	str	r5, [r4, #4]
 800b542:	68a5      	ldr	r5, [r4, #8]
 800b544:	4337      	orrs	r7, r6
 800b546:	60e8      	str	r0, [r5, #12]
 800b548:	6085      	str	r5, [r0, #8]
 800b54a:	614a      	str	r2, [r1, #20]
 800b54c:	610a      	str	r2, [r1, #16]
 800b54e:	4914      	ldr	r1, [pc, #80]	; (800b5a0 <_malloc_r+0x348>)
 800b550:	6057      	str	r7, [r2, #4]
 800b552:	60d1      	str	r1, [r2, #12]
 800b554:	6091      	str	r1, [r2, #8]
 800b556:	e6e8      	b.n	800b32a <_malloc_r+0xd2>
 800b558:	2e00      	cmp	r6, #0
 800b55a:	db08      	blt.n	800b56e <_malloc_r+0x316>
 800b55c:	2201      	movs	r2, #1
 800b55e:	18e3      	adds	r3, r4, r3
 800b560:	6859      	ldr	r1, [r3, #4]
 800b562:	430a      	orrs	r2, r1
 800b564:	605a      	str	r2, [r3, #4]
 800b566:	68a3      	ldr	r3, [r4, #8]
 800b568:	60d8      	str	r0, [r3, #12]
 800b56a:	6083      	str	r3, [r0, #8]
 800b56c:	e6aa      	b.n	800b2c4 <_malloc_r+0x6c>
 800b56e:	0004      	movs	r4, r0
 800b570:	e73c      	b.n	800b3ec <_malloc_r+0x194>
 800b572:	2301      	movs	r3, #1
 800b574:	425b      	negs	r3, r3
 800b576:	449c      	add	ip, r3
 800b578:	9b03      	ldr	r3, [sp, #12]
 800b57a:	6818      	ldr	r0, [r3, #0]
 800b57c:	3b08      	subs	r3, #8
 800b57e:	9003      	str	r0, [sp, #12]
 800b580:	4298      	cmp	r0, r3
 800b582:	d100      	bne.n	800b586 <_malloc_r+0x32e>
 800b584:	e73c      	b.n	800b400 <_malloc_r+0x1a8>
 800b586:	e743      	b.n	800b410 <_malloc_r+0x1b8>
 800b588:	2004      	movs	r0, #4
 800b58a:	0052      	lsls	r2, r2, #1
 800b58c:	4484      	add	ip, r0
 800b58e:	421a      	tst	r2, r3
 800b590:	d0fa      	beq.n	800b588 <_malloc_r+0x330>
 800b592:	e723      	b.n	800b3dc <_malloc_r+0x184>
 800b594:	9802      	ldr	r0, [sp, #8]
 800b596:	4684      	mov	ip, r0
 800b598:	e7f9      	b.n	800b58e <_malloc_r+0x336>
 800b59a:	46c0      	nop			; (mov r8, r8)
 800b59c:	200005a8 	.word	0x200005a8
 800b5a0:	200005b0 	.word	0x200005b0
 800b5a4:	00000554 	.word	0x00000554
 800b5a8:	000001ff 	.word	0x000001ff
 800b5ac:	20003900 	.word	0x20003900
 800b5b0:	200009b0 	.word	0x200009b0
 800b5b4:	200038d0 	.word	0x200038d0
 800b5b8:	200038f8 	.word	0x200038f8
 800b5bc:	200038fc 	.word	0x200038fc
 800b5c0:	492e      	ldr	r1, [pc, #184]	; (800b67c <_malloc_r+0x424>)
 800b5c2:	680a      	ldr	r2, [r1, #0]
 800b5c4:	3201      	adds	r2, #1
 800b5c6:	d133      	bne.n	800b630 <_malloc_r+0x3d8>
 800b5c8:	600c      	str	r4, [r1, #0]
 800b5ca:	2307      	movs	r3, #7
 800b5cc:	4023      	ands	r3, r4
 800b5ce:	d002      	beq.n	800b5d6 <_malloc_r+0x37e>
 800b5d0:	2208      	movs	r2, #8
 800b5d2:	1ad3      	subs	r3, r2, r3
 800b5d4:	18e4      	adds	r4, r4, r3
 800b5d6:	9a03      	ldr	r2, [sp, #12]
 800b5d8:	19a6      	adds	r6, r4, r6
 800b5da:	18d3      	adds	r3, r2, r3
 800b5dc:	4006      	ands	r6, r0
 800b5de:	1b9e      	subs	r6, r3, r6
 800b5e0:	0031      	movs	r1, r6
 800b5e2:	9801      	ldr	r0, [sp, #4]
 800b5e4:	f000 fb5c 	bl	800bca0 <_sbrk_r>
 800b5e8:	1c43      	adds	r3, r0, #1
 800b5ea:	d101      	bne.n	800b5f0 <_malloc_r+0x398>
 800b5ec:	0020      	movs	r0, r4
 800b5ee:	2600      	movs	r6, #0
 800b5f0:	4a23      	ldr	r2, [pc, #140]	; (800b680 <_malloc_r+0x428>)
 800b5f2:	1b00      	subs	r0, r0, r4
 800b5f4:	6813      	ldr	r3, [r2, #0]
 800b5f6:	199b      	adds	r3, r3, r6
 800b5f8:	6013      	str	r3, [r2, #0]
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	4a21      	ldr	r2, [pc, #132]	; (800b684 <_malloc_r+0x42c>)
 800b5fe:	1986      	adds	r6, r0, r6
 800b600:	431e      	orrs	r6, r3
 800b602:	6094      	str	r4, [r2, #8]
 800b604:	6066      	str	r6, [r4, #4]
 800b606:	4297      	cmp	r7, r2
 800b608:	d100      	bne.n	800b60c <_malloc_r+0x3b4>
 800b60a:	e748      	b.n	800b49e <_malloc_r+0x246>
 800b60c:	9a02      	ldr	r2, [sp, #8]
 800b60e:	2a0f      	cmp	r2, #15
 800b610:	d813      	bhi.n	800b63a <_malloc_r+0x3e2>
 800b612:	6063      	str	r3, [r4, #4]
 800b614:	2203      	movs	r2, #3
 800b616:	4b1b      	ldr	r3, [pc, #108]	; (800b684 <_malloc_r+0x42c>)
 800b618:	689b      	ldr	r3, [r3, #8]
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	4393      	bics	r3, r2
 800b61e:	1b5a      	subs	r2, r3, r5
 800b620:	42ab      	cmp	r3, r5
 800b622:	d301      	bcc.n	800b628 <_malloc_r+0x3d0>
 800b624:	2a0f      	cmp	r2, #15
 800b626:	dc1d      	bgt.n	800b664 <_malloc_r+0x40c>
 800b628:	9801      	ldr	r0, [sp, #4]
 800b62a:	f000 f847 	bl	800b6bc <__malloc_unlock>
 800b62e:	e620      	b.n	800b272 <_malloc_r+0x1a>
 800b630:	1ae3      	subs	r3, r4, r3
 800b632:	4a13      	ldr	r2, [pc, #76]	; (800b680 <_malloc_r+0x428>)
 800b634:	4463      	add	r3, ip
 800b636:	6013      	str	r3, [r2, #0]
 800b638:	e7c7      	b.n	800b5ca <_malloc_r+0x372>
 800b63a:	2207      	movs	r2, #7
 800b63c:	9e02      	ldr	r6, [sp, #8]
 800b63e:	3e0c      	subs	r6, #12
 800b640:	4396      	bics	r6, r2
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	4013      	ands	r3, r2
 800b646:	2205      	movs	r2, #5
 800b648:	4333      	orrs	r3, r6
 800b64a:	607b      	str	r3, [r7, #4]
 800b64c:	19bb      	adds	r3, r7, r6
 800b64e:	605a      	str	r2, [r3, #4]
 800b650:	609a      	str	r2, [r3, #8]
 800b652:	2e0f      	cmp	r6, #15
 800b654:	d800      	bhi.n	800b658 <_malloc_r+0x400>
 800b656:	e722      	b.n	800b49e <_malloc_r+0x246>
 800b658:	0039      	movs	r1, r7
 800b65a:	9801      	ldr	r0, [sp, #4]
 800b65c:	3108      	adds	r1, #8
 800b65e:	f7ff fd35 	bl	800b0cc <_free_r>
 800b662:	e71c      	b.n	800b49e <_malloc_r+0x246>
 800b664:	2301      	movs	r3, #1
 800b666:	0018      	movs	r0, r3
 800b668:	4906      	ldr	r1, [pc, #24]	; (800b684 <_malloc_r+0x42c>)
 800b66a:	4328      	orrs	r0, r5
 800b66c:	688c      	ldr	r4, [r1, #8]
 800b66e:	4313      	orrs	r3, r2
 800b670:	1965      	adds	r5, r4, r5
 800b672:	6060      	str	r0, [r4, #4]
 800b674:	608d      	str	r5, [r1, #8]
 800b676:	606b      	str	r3, [r5, #4]
 800b678:	e624      	b.n	800b2c4 <_malloc_r+0x6c>
 800b67a:	46c0      	nop			; (mov r8, r8)
 800b67c:	200009b0 	.word	0x200009b0
 800b680:	200038d0 	.word	0x200038d0
 800b684:	200005a8 	.word	0x200005a8

0800b688 <__ascii_mbtowc>:
 800b688:	b082      	sub	sp, #8
 800b68a:	2900      	cmp	r1, #0
 800b68c:	d100      	bne.n	800b690 <__ascii_mbtowc+0x8>
 800b68e:	a901      	add	r1, sp, #4
 800b690:	1e10      	subs	r0, r2, #0
 800b692:	d006      	beq.n	800b6a2 <__ascii_mbtowc+0x1a>
 800b694:	2b00      	cmp	r3, #0
 800b696:	d006      	beq.n	800b6a6 <__ascii_mbtowc+0x1e>
 800b698:	7813      	ldrb	r3, [r2, #0]
 800b69a:	600b      	str	r3, [r1, #0]
 800b69c:	7810      	ldrb	r0, [r2, #0]
 800b69e:	1e43      	subs	r3, r0, #1
 800b6a0:	4198      	sbcs	r0, r3
 800b6a2:	b002      	add	sp, #8
 800b6a4:	4770      	bx	lr
 800b6a6:	2002      	movs	r0, #2
 800b6a8:	4240      	negs	r0, r0
 800b6aa:	e7fa      	b.n	800b6a2 <__ascii_mbtowc+0x1a>

0800b6ac <__malloc_lock>:
 800b6ac:	b510      	push	{r4, lr}
 800b6ae:	4802      	ldr	r0, [pc, #8]	; (800b6b8 <__malloc_lock+0xc>)
 800b6b0:	f7ff fdd0 	bl	800b254 <__retarget_lock_acquire_recursive>
 800b6b4:	bd10      	pop	{r4, pc}
 800b6b6:	46c0      	nop			; (mov r8, r8)
 800b6b8:	20004708 	.word	0x20004708

0800b6bc <__malloc_unlock>:
 800b6bc:	b510      	push	{r4, lr}
 800b6be:	4802      	ldr	r0, [pc, #8]	; (800b6c8 <__malloc_unlock+0xc>)
 800b6c0:	f7ff fdc9 	bl	800b256 <__retarget_lock_release_recursive>
 800b6c4:	bd10      	pop	{r4, pc}
 800b6c6:	46c0      	nop			; (mov r8, r8)
 800b6c8:	20004708 	.word	0x20004708

0800b6cc <_Balloc>:
 800b6cc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b6ce:	b570      	push	{r4, r5, r6, lr}
 800b6d0:	0004      	movs	r4, r0
 800b6d2:	000d      	movs	r5, r1
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d012      	beq.n	800b6fe <_Balloc+0x32>
 800b6d8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800b6da:	00ab      	lsls	r3, r5, #2
 800b6dc:	18d3      	adds	r3, r2, r3
 800b6de:	6818      	ldr	r0, [r3, #0]
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	d115      	bne.n	800b710 <_Balloc+0x44>
 800b6e4:	2101      	movs	r1, #1
 800b6e6:	000e      	movs	r6, r1
 800b6e8:	40ae      	lsls	r6, r5
 800b6ea:	1d72      	adds	r2, r6, #5
 800b6ec:	0092      	lsls	r2, r2, #2
 800b6ee:	0020      	movs	r0, r4
 800b6f0:	f000 fbec 	bl	800becc <_calloc_r>
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	d009      	beq.n	800b70c <_Balloc+0x40>
 800b6f8:	6045      	str	r5, [r0, #4]
 800b6fa:	6086      	str	r6, [r0, #8]
 800b6fc:	e00a      	b.n	800b714 <_Balloc+0x48>
 800b6fe:	2221      	movs	r2, #33	; 0x21
 800b700:	2104      	movs	r1, #4
 800b702:	f000 fbe3 	bl	800becc <_calloc_r>
 800b706:	64e0      	str	r0, [r4, #76]	; 0x4c
 800b708:	2800      	cmp	r0, #0
 800b70a:	d1e5      	bne.n	800b6d8 <_Balloc+0xc>
 800b70c:	2000      	movs	r0, #0
 800b70e:	bd70      	pop	{r4, r5, r6, pc}
 800b710:	6802      	ldr	r2, [r0, #0]
 800b712:	601a      	str	r2, [r3, #0]
 800b714:	2300      	movs	r3, #0
 800b716:	6103      	str	r3, [r0, #16]
 800b718:	60c3      	str	r3, [r0, #12]
 800b71a:	e7f8      	b.n	800b70e <_Balloc+0x42>

0800b71c <_Bfree>:
 800b71c:	2900      	cmp	r1, #0
 800b71e:	d006      	beq.n	800b72e <_Bfree+0x12>
 800b720:	684b      	ldr	r3, [r1, #4]
 800b722:	009a      	lsls	r2, r3, #2
 800b724:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b726:	189b      	adds	r3, r3, r2
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	600a      	str	r2, [r1, #0]
 800b72c:	6019      	str	r1, [r3, #0]
 800b72e:	4770      	bx	lr

0800b730 <__multadd>:
 800b730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b732:	001e      	movs	r6, r3
 800b734:	2314      	movs	r3, #20
 800b736:	469c      	mov	ip, r3
 800b738:	0007      	movs	r7, r0
 800b73a:	000c      	movs	r4, r1
 800b73c:	2000      	movs	r0, #0
 800b73e:	690d      	ldr	r5, [r1, #16]
 800b740:	448c      	add	ip, r1
 800b742:	4663      	mov	r3, ip
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	3001      	adds	r0, #1
 800b748:	b299      	uxth	r1, r3
 800b74a:	4663      	mov	r3, ip
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	4351      	muls	r1, r2
 800b750:	0c1b      	lsrs	r3, r3, #16
 800b752:	4353      	muls	r3, r2
 800b754:	1989      	adds	r1, r1, r6
 800b756:	0c0e      	lsrs	r6, r1, #16
 800b758:	199b      	adds	r3, r3, r6
 800b75a:	b289      	uxth	r1, r1
 800b75c:	0c1e      	lsrs	r6, r3, #16
 800b75e:	041b      	lsls	r3, r3, #16
 800b760:	185b      	adds	r3, r3, r1
 800b762:	4661      	mov	r1, ip
 800b764:	c108      	stmia	r1!, {r3}
 800b766:	468c      	mov	ip, r1
 800b768:	4285      	cmp	r5, r0
 800b76a:	dcea      	bgt.n	800b742 <__multadd+0x12>
 800b76c:	2e00      	cmp	r6, #0
 800b76e:	d01b      	beq.n	800b7a8 <__multadd+0x78>
 800b770:	68a3      	ldr	r3, [r4, #8]
 800b772:	42ab      	cmp	r3, r5
 800b774:	dc12      	bgt.n	800b79c <__multadd+0x6c>
 800b776:	6863      	ldr	r3, [r4, #4]
 800b778:	0038      	movs	r0, r7
 800b77a:	1c59      	adds	r1, r3, #1
 800b77c:	f7ff ffa6 	bl	800b6cc <_Balloc>
 800b780:	0021      	movs	r1, r4
 800b782:	6923      	ldr	r3, [r4, #16]
 800b784:	9001      	str	r0, [sp, #4]
 800b786:	1c9a      	adds	r2, r3, #2
 800b788:	0092      	lsls	r2, r2, #2
 800b78a:	310c      	adds	r1, #12
 800b78c:	300c      	adds	r0, #12
 800b78e:	f7fd fa6f 	bl	8008c70 <memcpy>
 800b792:	0021      	movs	r1, r4
 800b794:	0038      	movs	r0, r7
 800b796:	f7ff ffc1 	bl	800b71c <_Bfree>
 800b79a:	9c01      	ldr	r4, [sp, #4]
 800b79c:	1d2b      	adds	r3, r5, #4
 800b79e:	009b      	lsls	r3, r3, #2
 800b7a0:	18e3      	adds	r3, r4, r3
 800b7a2:	3501      	adds	r5, #1
 800b7a4:	605e      	str	r6, [r3, #4]
 800b7a6:	6125      	str	r5, [r4, #16]
 800b7a8:	0020      	movs	r0, r4
 800b7aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800b7ac <__hi0bits>:
 800b7ac:	0003      	movs	r3, r0
 800b7ae:	0c02      	lsrs	r2, r0, #16
 800b7b0:	2000      	movs	r0, #0
 800b7b2:	4282      	cmp	r2, r0
 800b7b4:	d101      	bne.n	800b7ba <__hi0bits+0xe>
 800b7b6:	041b      	lsls	r3, r3, #16
 800b7b8:	3010      	adds	r0, #16
 800b7ba:	0e1a      	lsrs	r2, r3, #24
 800b7bc:	d101      	bne.n	800b7c2 <__hi0bits+0x16>
 800b7be:	3008      	adds	r0, #8
 800b7c0:	021b      	lsls	r3, r3, #8
 800b7c2:	0f1a      	lsrs	r2, r3, #28
 800b7c4:	d101      	bne.n	800b7ca <__hi0bits+0x1e>
 800b7c6:	3004      	adds	r0, #4
 800b7c8:	011b      	lsls	r3, r3, #4
 800b7ca:	0f9a      	lsrs	r2, r3, #30
 800b7cc:	d101      	bne.n	800b7d2 <__hi0bits+0x26>
 800b7ce:	3002      	adds	r0, #2
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	db03      	blt.n	800b7de <__hi0bits+0x32>
 800b7d6:	3001      	adds	r0, #1
 800b7d8:	005b      	lsls	r3, r3, #1
 800b7da:	d400      	bmi.n	800b7de <__hi0bits+0x32>
 800b7dc:	2020      	movs	r0, #32
 800b7de:	4770      	bx	lr

0800b7e0 <__lo0bits>:
 800b7e0:	2207      	movs	r2, #7
 800b7e2:	6803      	ldr	r3, [r0, #0]
 800b7e4:	b510      	push	{r4, lr}
 800b7e6:	0001      	movs	r1, r0
 800b7e8:	401a      	ands	r2, r3
 800b7ea:	d00d      	beq.n	800b808 <__lo0bits+0x28>
 800b7ec:	2401      	movs	r4, #1
 800b7ee:	2000      	movs	r0, #0
 800b7f0:	4223      	tst	r3, r4
 800b7f2:	d105      	bne.n	800b800 <__lo0bits+0x20>
 800b7f4:	3002      	adds	r0, #2
 800b7f6:	4203      	tst	r3, r0
 800b7f8:	d003      	beq.n	800b802 <__lo0bits+0x22>
 800b7fa:	40e3      	lsrs	r3, r4
 800b7fc:	0020      	movs	r0, r4
 800b7fe:	600b      	str	r3, [r1, #0]
 800b800:	bd10      	pop	{r4, pc}
 800b802:	089b      	lsrs	r3, r3, #2
 800b804:	600b      	str	r3, [r1, #0]
 800b806:	e7fb      	b.n	800b800 <__lo0bits+0x20>
 800b808:	b29c      	uxth	r4, r3
 800b80a:	0010      	movs	r0, r2
 800b80c:	2c00      	cmp	r4, #0
 800b80e:	d101      	bne.n	800b814 <__lo0bits+0x34>
 800b810:	2010      	movs	r0, #16
 800b812:	0c1b      	lsrs	r3, r3, #16
 800b814:	b2da      	uxtb	r2, r3
 800b816:	2a00      	cmp	r2, #0
 800b818:	d101      	bne.n	800b81e <__lo0bits+0x3e>
 800b81a:	3008      	adds	r0, #8
 800b81c:	0a1b      	lsrs	r3, r3, #8
 800b81e:	071a      	lsls	r2, r3, #28
 800b820:	d101      	bne.n	800b826 <__lo0bits+0x46>
 800b822:	3004      	adds	r0, #4
 800b824:	091b      	lsrs	r3, r3, #4
 800b826:	079a      	lsls	r2, r3, #30
 800b828:	d101      	bne.n	800b82e <__lo0bits+0x4e>
 800b82a:	3002      	adds	r0, #2
 800b82c:	089b      	lsrs	r3, r3, #2
 800b82e:	07da      	lsls	r2, r3, #31
 800b830:	d4e8      	bmi.n	800b804 <__lo0bits+0x24>
 800b832:	085b      	lsrs	r3, r3, #1
 800b834:	d001      	beq.n	800b83a <__lo0bits+0x5a>
 800b836:	3001      	adds	r0, #1
 800b838:	e7e4      	b.n	800b804 <__lo0bits+0x24>
 800b83a:	2020      	movs	r0, #32
 800b83c:	e7e0      	b.n	800b800 <__lo0bits+0x20>

0800b83e <__i2b>:
 800b83e:	b510      	push	{r4, lr}
 800b840:	000c      	movs	r4, r1
 800b842:	2101      	movs	r1, #1
 800b844:	f7ff ff42 	bl	800b6cc <_Balloc>
 800b848:	2301      	movs	r3, #1
 800b84a:	6144      	str	r4, [r0, #20]
 800b84c:	6103      	str	r3, [r0, #16]
 800b84e:	bd10      	pop	{r4, pc}

0800b850 <__multiply>:
 800b850:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b852:	690b      	ldr	r3, [r1, #16]
 800b854:	0014      	movs	r4, r2
 800b856:	6912      	ldr	r2, [r2, #16]
 800b858:	b089      	sub	sp, #36	; 0x24
 800b85a:	000d      	movs	r5, r1
 800b85c:	4293      	cmp	r3, r2
 800b85e:	da01      	bge.n	800b864 <__multiply+0x14>
 800b860:	0025      	movs	r5, r4
 800b862:	000c      	movs	r4, r1
 800b864:	692f      	ldr	r7, [r5, #16]
 800b866:	6926      	ldr	r6, [r4, #16]
 800b868:	6869      	ldr	r1, [r5, #4]
 800b86a:	19bb      	adds	r3, r7, r6
 800b86c:	9302      	str	r3, [sp, #8]
 800b86e:	68ab      	ldr	r3, [r5, #8]
 800b870:	19ba      	adds	r2, r7, r6
 800b872:	4293      	cmp	r3, r2
 800b874:	da00      	bge.n	800b878 <__multiply+0x28>
 800b876:	3101      	adds	r1, #1
 800b878:	f7ff ff28 	bl	800b6cc <_Balloc>
 800b87c:	0002      	movs	r2, r0
 800b87e:	19bb      	adds	r3, r7, r6
 800b880:	3214      	adds	r2, #20
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	18d3      	adds	r3, r2, r3
 800b886:	469c      	mov	ip, r3
 800b888:	2100      	movs	r1, #0
 800b88a:	0013      	movs	r3, r2
 800b88c:	9004      	str	r0, [sp, #16]
 800b88e:	4563      	cmp	r3, ip
 800b890:	d31d      	bcc.n	800b8ce <__multiply+0x7e>
 800b892:	3514      	adds	r5, #20
 800b894:	00bf      	lsls	r7, r7, #2
 800b896:	19eb      	adds	r3, r5, r7
 800b898:	3414      	adds	r4, #20
 800b89a:	00b6      	lsls	r6, r6, #2
 800b89c:	9305      	str	r3, [sp, #20]
 800b89e:	19a3      	adds	r3, r4, r6
 800b8a0:	9503      	str	r5, [sp, #12]
 800b8a2:	9401      	str	r4, [sp, #4]
 800b8a4:	9307      	str	r3, [sp, #28]
 800b8a6:	9b07      	ldr	r3, [sp, #28]
 800b8a8:	9901      	ldr	r1, [sp, #4]
 800b8aa:	4299      	cmp	r1, r3
 800b8ac:	d311      	bcc.n	800b8d2 <__multiply+0x82>
 800b8ae:	9b02      	ldr	r3, [sp, #8]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	dd06      	ble.n	800b8c2 <__multiply+0x72>
 800b8b4:	2304      	movs	r3, #4
 800b8b6:	425b      	negs	r3, r3
 800b8b8:	449c      	add	ip, r3
 800b8ba:	4663      	mov	r3, ip
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d051      	beq.n	800b966 <__multiply+0x116>
 800b8c2:	9b04      	ldr	r3, [sp, #16]
 800b8c4:	9a02      	ldr	r2, [sp, #8]
 800b8c6:	0018      	movs	r0, r3
 800b8c8:	611a      	str	r2, [r3, #16]
 800b8ca:	b009      	add	sp, #36	; 0x24
 800b8cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8ce:	c302      	stmia	r3!, {r1}
 800b8d0:	e7dd      	b.n	800b88e <__multiply+0x3e>
 800b8d2:	9b01      	ldr	r3, [sp, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	b298      	uxth	r0, r3
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	d01c      	beq.n	800b916 <__multiply+0xc6>
 800b8dc:	0015      	movs	r5, r2
 800b8de:	2600      	movs	r6, #0
 800b8e0:	9f03      	ldr	r7, [sp, #12]
 800b8e2:	cf02      	ldmia	r7!, {r1}
 800b8e4:	682c      	ldr	r4, [r5, #0]
 800b8e6:	b28b      	uxth	r3, r1
 800b8e8:	4343      	muls	r3, r0
 800b8ea:	0c09      	lsrs	r1, r1, #16
 800b8ec:	4341      	muls	r1, r0
 800b8ee:	b2a4      	uxth	r4, r4
 800b8f0:	191b      	adds	r3, r3, r4
 800b8f2:	199b      	adds	r3, r3, r6
 800b8f4:	000e      	movs	r6, r1
 800b8f6:	6829      	ldr	r1, [r5, #0]
 800b8f8:	9506      	str	r5, [sp, #24]
 800b8fa:	0c09      	lsrs	r1, r1, #16
 800b8fc:	1871      	adds	r1, r6, r1
 800b8fe:	0c1e      	lsrs	r6, r3, #16
 800b900:	1989      	adds	r1, r1, r6
 800b902:	0c0e      	lsrs	r6, r1, #16
 800b904:	b29b      	uxth	r3, r3
 800b906:	0409      	lsls	r1, r1, #16
 800b908:	430b      	orrs	r3, r1
 800b90a:	c508      	stmia	r5!, {r3}
 800b90c:	9b05      	ldr	r3, [sp, #20]
 800b90e:	42bb      	cmp	r3, r7
 800b910:	d8e7      	bhi.n	800b8e2 <__multiply+0x92>
 800b912:	9b06      	ldr	r3, [sp, #24]
 800b914:	605e      	str	r6, [r3, #4]
 800b916:	9b01      	ldr	r3, [sp, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	0c1d      	lsrs	r5, r3, #16
 800b91c:	d01e      	beq.n	800b95c <__multiply+0x10c>
 800b91e:	0010      	movs	r0, r2
 800b920:	2700      	movs	r7, #0
 800b922:	6813      	ldr	r3, [r2, #0]
 800b924:	9e03      	ldr	r6, [sp, #12]
 800b926:	6831      	ldr	r1, [r6, #0]
 800b928:	6804      	ldr	r4, [r0, #0]
 800b92a:	b289      	uxth	r1, r1
 800b92c:	4369      	muls	r1, r5
 800b92e:	0c24      	lsrs	r4, r4, #16
 800b930:	1909      	adds	r1, r1, r4
 800b932:	19c9      	adds	r1, r1, r7
 800b934:	040f      	lsls	r7, r1, #16
 800b936:	b29b      	uxth	r3, r3
 800b938:	433b      	orrs	r3, r7
 800b93a:	6003      	str	r3, [r0, #0]
 800b93c:	ce80      	ldmia	r6!, {r7}
 800b93e:	6843      	ldr	r3, [r0, #4]
 800b940:	0c3f      	lsrs	r7, r7, #16
 800b942:	436f      	muls	r7, r5
 800b944:	b29b      	uxth	r3, r3
 800b946:	18fb      	adds	r3, r7, r3
 800b948:	0c09      	lsrs	r1, r1, #16
 800b94a:	185b      	adds	r3, r3, r1
 800b94c:	9905      	ldr	r1, [sp, #20]
 800b94e:	9006      	str	r0, [sp, #24]
 800b950:	0c1f      	lsrs	r7, r3, #16
 800b952:	3004      	adds	r0, #4
 800b954:	42b1      	cmp	r1, r6
 800b956:	d8e6      	bhi.n	800b926 <__multiply+0xd6>
 800b958:	9906      	ldr	r1, [sp, #24]
 800b95a:	604b      	str	r3, [r1, #4]
 800b95c:	9b01      	ldr	r3, [sp, #4]
 800b95e:	3204      	adds	r2, #4
 800b960:	3304      	adds	r3, #4
 800b962:	9301      	str	r3, [sp, #4]
 800b964:	e79f      	b.n	800b8a6 <__multiply+0x56>
 800b966:	9b02      	ldr	r3, [sp, #8]
 800b968:	3b01      	subs	r3, #1
 800b96a:	9302      	str	r3, [sp, #8]
 800b96c:	e79f      	b.n	800b8ae <__multiply+0x5e>
	...

0800b970 <__pow5mult>:
 800b970:	2303      	movs	r3, #3
 800b972:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b974:	4013      	ands	r3, r2
 800b976:	0006      	movs	r6, r0
 800b978:	000f      	movs	r7, r1
 800b97a:	0015      	movs	r5, r2
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d008      	beq.n	800b992 <__pow5mult+0x22>
 800b980:	491a      	ldr	r1, [pc, #104]	; (800b9ec <__pow5mult+0x7c>)
 800b982:	3b01      	subs	r3, #1
 800b984:	009a      	lsls	r2, r3, #2
 800b986:	5852      	ldr	r2, [r2, r1]
 800b988:	2300      	movs	r3, #0
 800b98a:	0039      	movs	r1, r7
 800b98c:	f7ff fed0 	bl	800b730 <__multadd>
 800b990:	0007      	movs	r7, r0
 800b992:	10ad      	asrs	r5, r5, #2
 800b994:	d027      	beq.n	800b9e6 <__pow5mult+0x76>
 800b996:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800b998:	2c00      	cmp	r4, #0
 800b99a:	d107      	bne.n	800b9ac <__pow5mult+0x3c>
 800b99c:	4914      	ldr	r1, [pc, #80]	; (800b9f0 <__pow5mult+0x80>)
 800b99e:	0030      	movs	r0, r6
 800b9a0:	f7ff ff4d 	bl	800b83e <__i2b>
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	0004      	movs	r4, r0
 800b9a8:	64b0      	str	r0, [r6, #72]	; 0x48
 800b9aa:	6003      	str	r3, [r0, #0]
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	421d      	tst	r5, r3
 800b9b0:	d00a      	beq.n	800b9c8 <__pow5mult+0x58>
 800b9b2:	0039      	movs	r1, r7
 800b9b4:	0022      	movs	r2, r4
 800b9b6:	0030      	movs	r0, r6
 800b9b8:	f7ff ff4a 	bl	800b850 <__multiply>
 800b9bc:	0039      	movs	r1, r7
 800b9be:	9001      	str	r0, [sp, #4]
 800b9c0:	0030      	movs	r0, r6
 800b9c2:	f7ff feab 	bl	800b71c <_Bfree>
 800b9c6:	9f01      	ldr	r7, [sp, #4]
 800b9c8:	106d      	asrs	r5, r5, #1
 800b9ca:	d00c      	beq.n	800b9e6 <__pow5mult+0x76>
 800b9cc:	6820      	ldr	r0, [r4, #0]
 800b9ce:	2800      	cmp	r0, #0
 800b9d0:	d107      	bne.n	800b9e2 <__pow5mult+0x72>
 800b9d2:	0022      	movs	r2, r4
 800b9d4:	0021      	movs	r1, r4
 800b9d6:	0030      	movs	r0, r6
 800b9d8:	f7ff ff3a 	bl	800b850 <__multiply>
 800b9dc:	2300      	movs	r3, #0
 800b9de:	6020      	str	r0, [r4, #0]
 800b9e0:	6003      	str	r3, [r0, #0]
 800b9e2:	0004      	movs	r4, r0
 800b9e4:	e7e2      	b.n	800b9ac <__pow5mult+0x3c>
 800b9e6:	0038      	movs	r0, r7
 800b9e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b9ea:	46c0      	nop			; (mov r8, r8)
 800b9ec:	0800cb38 	.word	0x0800cb38
 800b9f0:	00000271 	.word	0x00000271

0800b9f4 <__lshift>:
 800b9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9f6:	000d      	movs	r5, r1
 800b9f8:	0017      	movs	r7, r2
 800b9fa:	692b      	ldr	r3, [r5, #16]
 800b9fc:	1154      	asrs	r4, r2, #5
 800b9fe:	b085      	sub	sp, #20
 800ba00:	18e3      	adds	r3, r4, r3
 800ba02:	9301      	str	r3, [sp, #4]
 800ba04:	3301      	adds	r3, #1
 800ba06:	9300      	str	r3, [sp, #0]
 800ba08:	6849      	ldr	r1, [r1, #4]
 800ba0a:	68ab      	ldr	r3, [r5, #8]
 800ba0c:	9002      	str	r0, [sp, #8]
 800ba0e:	9a00      	ldr	r2, [sp, #0]
 800ba10:	4293      	cmp	r3, r2
 800ba12:	db35      	blt.n	800ba80 <__lshift+0x8c>
 800ba14:	9802      	ldr	r0, [sp, #8]
 800ba16:	f7ff fe59 	bl	800b6cc <_Balloc>
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	0002      	movs	r2, r0
 800ba1e:	0006      	movs	r6, r0
 800ba20:	0019      	movs	r1, r3
 800ba22:	3214      	adds	r2, #20
 800ba24:	42a3      	cmp	r3, r4
 800ba26:	db2e      	blt.n	800ba86 <__lshift+0x92>
 800ba28:	43e3      	mvns	r3, r4
 800ba2a:	17db      	asrs	r3, r3, #31
 800ba2c:	401c      	ands	r4, r3
 800ba2e:	002b      	movs	r3, r5
 800ba30:	00a4      	lsls	r4, r4, #2
 800ba32:	1914      	adds	r4, r2, r4
 800ba34:	692a      	ldr	r2, [r5, #16]
 800ba36:	3314      	adds	r3, #20
 800ba38:	0092      	lsls	r2, r2, #2
 800ba3a:	189a      	adds	r2, r3, r2
 800ba3c:	4694      	mov	ip, r2
 800ba3e:	221f      	movs	r2, #31
 800ba40:	4017      	ands	r7, r2
 800ba42:	d024      	beq.n	800ba8e <__lshift+0x9a>
 800ba44:	3201      	adds	r2, #1
 800ba46:	1bd2      	subs	r2, r2, r7
 800ba48:	9203      	str	r2, [sp, #12]
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	6819      	ldr	r1, [r3, #0]
 800ba4e:	0020      	movs	r0, r4
 800ba50:	40b9      	lsls	r1, r7
 800ba52:	430a      	orrs	r2, r1
 800ba54:	c404      	stmia	r4!, {r2}
 800ba56:	cb04      	ldmia	r3!, {r2}
 800ba58:	9903      	ldr	r1, [sp, #12]
 800ba5a:	40ca      	lsrs	r2, r1
 800ba5c:	459c      	cmp	ip, r3
 800ba5e:	d8f5      	bhi.n	800ba4c <__lshift+0x58>
 800ba60:	6042      	str	r2, [r0, #4]
 800ba62:	2a00      	cmp	r2, #0
 800ba64:	d002      	beq.n	800ba6c <__lshift+0x78>
 800ba66:	9b01      	ldr	r3, [sp, #4]
 800ba68:	3302      	adds	r3, #2
 800ba6a:	9300      	str	r3, [sp, #0]
 800ba6c:	9b00      	ldr	r3, [sp, #0]
 800ba6e:	9802      	ldr	r0, [sp, #8]
 800ba70:	3b01      	subs	r3, #1
 800ba72:	6133      	str	r3, [r6, #16]
 800ba74:	0029      	movs	r1, r5
 800ba76:	f7ff fe51 	bl	800b71c <_Bfree>
 800ba7a:	0030      	movs	r0, r6
 800ba7c:	b005      	add	sp, #20
 800ba7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba80:	3101      	adds	r1, #1
 800ba82:	005b      	lsls	r3, r3, #1
 800ba84:	e7c3      	b.n	800ba0e <__lshift+0x1a>
 800ba86:	0098      	lsls	r0, r3, #2
 800ba88:	5011      	str	r1, [r2, r0]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	e7ca      	b.n	800ba24 <__lshift+0x30>
 800ba8e:	cb04      	ldmia	r3!, {r2}
 800ba90:	c404      	stmia	r4!, {r2}
 800ba92:	459c      	cmp	ip, r3
 800ba94:	d8fb      	bhi.n	800ba8e <__lshift+0x9a>
 800ba96:	e7e9      	b.n	800ba6c <__lshift+0x78>

0800ba98 <__mcmp>:
 800ba98:	690a      	ldr	r2, [r1, #16]
 800ba9a:	6903      	ldr	r3, [r0, #16]
 800ba9c:	b530      	push	{r4, r5, lr}
 800ba9e:	1a9b      	subs	r3, r3, r2
 800baa0:	d10d      	bne.n	800babe <__mcmp+0x26>
 800baa2:	0092      	lsls	r2, r2, #2
 800baa4:	3014      	adds	r0, #20
 800baa6:	3114      	adds	r1, #20
 800baa8:	1884      	adds	r4, r0, r2
 800baaa:	1889      	adds	r1, r1, r2
 800baac:	3c04      	subs	r4, #4
 800baae:	3904      	subs	r1, #4
 800bab0:	6825      	ldr	r5, [r4, #0]
 800bab2:	680a      	ldr	r2, [r1, #0]
 800bab4:	4295      	cmp	r5, r2
 800bab6:	d004      	beq.n	800bac2 <__mcmp+0x2a>
 800bab8:	2301      	movs	r3, #1
 800baba:	4295      	cmp	r5, r2
 800babc:	d304      	bcc.n	800bac8 <__mcmp+0x30>
 800babe:	0018      	movs	r0, r3
 800bac0:	bd30      	pop	{r4, r5, pc}
 800bac2:	42a0      	cmp	r0, r4
 800bac4:	d3f2      	bcc.n	800baac <__mcmp+0x14>
 800bac6:	e7fa      	b.n	800babe <__mcmp+0x26>
 800bac8:	425b      	negs	r3, r3
 800baca:	e7f8      	b.n	800babe <__mcmp+0x26>

0800bacc <__mdiff>:
 800bacc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bace:	000d      	movs	r5, r1
 800bad0:	b085      	sub	sp, #20
 800bad2:	0007      	movs	r7, r0
 800bad4:	0011      	movs	r1, r2
 800bad6:	0028      	movs	r0, r5
 800bad8:	0014      	movs	r4, r2
 800bada:	f7ff ffdd 	bl	800ba98 <__mcmp>
 800bade:	1e06      	subs	r6, r0, #0
 800bae0:	d108      	bne.n	800baf4 <__mdiff+0x28>
 800bae2:	0001      	movs	r1, r0
 800bae4:	0038      	movs	r0, r7
 800bae6:	f7ff fdf1 	bl	800b6cc <_Balloc>
 800baea:	2301      	movs	r3, #1
 800baec:	6146      	str	r6, [r0, #20]
 800baee:	6103      	str	r3, [r0, #16]
 800baf0:	b005      	add	sp, #20
 800baf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800baf4:	2301      	movs	r3, #1
 800baf6:	9301      	str	r3, [sp, #4]
 800baf8:	2800      	cmp	r0, #0
 800bafa:	db04      	blt.n	800bb06 <__mdiff+0x3a>
 800bafc:	0023      	movs	r3, r4
 800bafe:	002c      	movs	r4, r5
 800bb00:	001d      	movs	r5, r3
 800bb02:	2300      	movs	r3, #0
 800bb04:	9301      	str	r3, [sp, #4]
 800bb06:	6861      	ldr	r1, [r4, #4]
 800bb08:	0038      	movs	r0, r7
 800bb0a:	f7ff fddf 	bl	800b6cc <_Balloc>
 800bb0e:	002f      	movs	r7, r5
 800bb10:	2200      	movs	r2, #0
 800bb12:	9b01      	ldr	r3, [sp, #4]
 800bb14:	6926      	ldr	r6, [r4, #16]
 800bb16:	60c3      	str	r3, [r0, #12]
 800bb18:	3414      	adds	r4, #20
 800bb1a:	00b3      	lsls	r3, r6, #2
 800bb1c:	18e3      	adds	r3, r4, r3
 800bb1e:	9302      	str	r3, [sp, #8]
 800bb20:	692b      	ldr	r3, [r5, #16]
 800bb22:	3714      	adds	r7, #20
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	18fb      	adds	r3, r7, r3
 800bb28:	9303      	str	r3, [sp, #12]
 800bb2a:	0003      	movs	r3, r0
 800bb2c:	4694      	mov	ip, r2
 800bb2e:	3314      	adds	r3, #20
 800bb30:	cc20      	ldmia	r4!, {r5}
 800bb32:	cf04      	ldmia	r7!, {r2}
 800bb34:	9201      	str	r2, [sp, #4]
 800bb36:	b2aa      	uxth	r2, r5
 800bb38:	4494      	add	ip, r2
 800bb3a:	466a      	mov	r2, sp
 800bb3c:	4661      	mov	r1, ip
 800bb3e:	8892      	ldrh	r2, [r2, #4]
 800bb40:	0c2d      	lsrs	r5, r5, #16
 800bb42:	1a8a      	subs	r2, r1, r2
 800bb44:	9901      	ldr	r1, [sp, #4]
 800bb46:	0c09      	lsrs	r1, r1, #16
 800bb48:	1a69      	subs	r1, r5, r1
 800bb4a:	1415      	asrs	r5, r2, #16
 800bb4c:	1949      	adds	r1, r1, r5
 800bb4e:	140d      	asrs	r5, r1, #16
 800bb50:	b292      	uxth	r2, r2
 800bb52:	0409      	lsls	r1, r1, #16
 800bb54:	430a      	orrs	r2, r1
 800bb56:	601a      	str	r2, [r3, #0]
 800bb58:	9a03      	ldr	r2, [sp, #12]
 800bb5a:	46ac      	mov	ip, r5
 800bb5c:	3304      	adds	r3, #4
 800bb5e:	42ba      	cmp	r2, r7
 800bb60:	d8e6      	bhi.n	800bb30 <__mdiff+0x64>
 800bb62:	9902      	ldr	r1, [sp, #8]
 800bb64:	001a      	movs	r2, r3
 800bb66:	428c      	cmp	r4, r1
 800bb68:	d305      	bcc.n	800bb76 <__mdiff+0xaa>
 800bb6a:	3a04      	subs	r2, #4
 800bb6c:	6813      	ldr	r3, [r2, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d00e      	beq.n	800bb90 <__mdiff+0xc4>
 800bb72:	6106      	str	r6, [r0, #16]
 800bb74:	e7bc      	b.n	800baf0 <__mdiff+0x24>
 800bb76:	cc04      	ldmia	r4!, {r2}
 800bb78:	b291      	uxth	r1, r2
 800bb7a:	4461      	add	r1, ip
 800bb7c:	140d      	asrs	r5, r1, #16
 800bb7e:	0c12      	lsrs	r2, r2, #16
 800bb80:	1952      	adds	r2, r2, r5
 800bb82:	1415      	asrs	r5, r2, #16
 800bb84:	b289      	uxth	r1, r1
 800bb86:	0412      	lsls	r2, r2, #16
 800bb88:	430a      	orrs	r2, r1
 800bb8a:	46ac      	mov	ip, r5
 800bb8c:	c304      	stmia	r3!, {r2}
 800bb8e:	e7e8      	b.n	800bb62 <__mdiff+0x96>
 800bb90:	3e01      	subs	r6, #1
 800bb92:	e7ea      	b.n	800bb6a <__mdiff+0x9e>

0800bb94 <__d2b>:
 800bb94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb96:	001d      	movs	r5, r3
 800bb98:	2101      	movs	r1, #1
 800bb9a:	0014      	movs	r4, r2
 800bb9c:	9f08      	ldr	r7, [sp, #32]
 800bb9e:	f7ff fd95 	bl	800b6cc <_Balloc>
 800bba2:	032b      	lsls	r3, r5, #12
 800bba4:	006d      	lsls	r5, r5, #1
 800bba6:	0006      	movs	r6, r0
 800bba8:	0b1b      	lsrs	r3, r3, #12
 800bbaa:	0d6d      	lsrs	r5, r5, #21
 800bbac:	d124      	bne.n	800bbf8 <__d2b+0x64>
 800bbae:	9301      	str	r3, [sp, #4]
 800bbb0:	2c00      	cmp	r4, #0
 800bbb2:	d027      	beq.n	800bc04 <__d2b+0x70>
 800bbb4:	4668      	mov	r0, sp
 800bbb6:	9400      	str	r4, [sp, #0]
 800bbb8:	f7ff fe12 	bl	800b7e0 <__lo0bits>
 800bbbc:	9c00      	ldr	r4, [sp, #0]
 800bbbe:	2800      	cmp	r0, #0
 800bbc0:	d01e      	beq.n	800bc00 <__d2b+0x6c>
 800bbc2:	9b01      	ldr	r3, [sp, #4]
 800bbc4:	2120      	movs	r1, #32
 800bbc6:	001a      	movs	r2, r3
 800bbc8:	1a09      	subs	r1, r1, r0
 800bbca:	408a      	lsls	r2, r1
 800bbcc:	40c3      	lsrs	r3, r0
 800bbce:	4322      	orrs	r2, r4
 800bbd0:	6172      	str	r2, [r6, #20]
 800bbd2:	9301      	str	r3, [sp, #4]
 800bbd4:	9c01      	ldr	r4, [sp, #4]
 800bbd6:	61b4      	str	r4, [r6, #24]
 800bbd8:	1e63      	subs	r3, r4, #1
 800bbda:	419c      	sbcs	r4, r3
 800bbdc:	3401      	adds	r4, #1
 800bbde:	6134      	str	r4, [r6, #16]
 800bbe0:	2d00      	cmp	r5, #0
 800bbe2:	d018      	beq.n	800bc16 <__d2b+0x82>
 800bbe4:	4b12      	ldr	r3, [pc, #72]	; (800bc30 <__d2b+0x9c>)
 800bbe6:	18ed      	adds	r5, r5, r3
 800bbe8:	2335      	movs	r3, #53	; 0x35
 800bbea:	182d      	adds	r5, r5, r0
 800bbec:	603d      	str	r5, [r7, #0]
 800bbee:	1a18      	subs	r0, r3, r0
 800bbf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbf2:	6018      	str	r0, [r3, #0]
 800bbf4:	0030      	movs	r0, r6
 800bbf6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bbf8:	2280      	movs	r2, #128	; 0x80
 800bbfa:	0352      	lsls	r2, r2, #13
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	e7d6      	b.n	800bbae <__d2b+0x1a>
 800bc00:	6174      	str	r4, [r6, #20]
 800bc02:	e7e7      	b.n	800bbd4 <__d2b+0x40>
 800bc04:	a801      	add	r0, sp, #4
 800bc06:	f7ff fdeb 	bl	800b7e0 <__lo0bits>
 800bc0a:	2401      	movs	r4, #1
 800bc0c:	9b01      	ldr	r3, [sp, #4]
 800bc0e:	6134      	str	r4, [r6, #16]
 800bc10:	6173      	str	r3, [r6, #20]
 800bc12:	3020      	adds	r0, #32
 800bc14:	e7e4      	b.n	800bbe0 <__d2b+0x4c>
 800bc16:	4b07      	ldr	r3, [pc, #28]	; (800bc34 <__d2b+0xa0>)
 800bc18:	18c0      	adds	r0, r0, r3
 800bc1a:	4b07      	ldr	r3, [pc, #28]	; (800bc38 <__d2b+0xa4>)
 800bc1c:	6038      	str	r0, [r7, #0]
 800bc1e:	18e3      	adds	r3, r4, r3
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	18f3      	adds	r3, r6, r3
 800bc24:	6958      	ldr	r0, [r3, #20]
 800bc26:	f7ff fdc1 	bl	800b7ac <__hi0bits>
 800bc2a:	0164      	lsls	r4, r4, #5
 800bc2c:	1a20      	subs	r0, r4, r0
 800bc2e:	e7df      	b.n	800bbf0 <__d2b+0x5c>
 800bc30:	fffffbcd 	.word	0xfffffbcd
 800bc34:	fffffbce 	.word	0xfffffbce
 800bc38:	3fffffff 	.word	0x3fffffff

0800bc3c <frexp>:
 800bc3c:	b570      	push	{r4, r5, r6, lr}
 800bc3e:	0014      	movs	r4, r2
 800bc40:	2500      	movs	r5, #0
 800bc42:	6025      	str	r5, [r4, #0]
 800bc44:	4d10      	ldr	r5, [pc, #64]	; (800bc88 <frexp+0x4c>)
 800bc46:	004b      	lsls	r3, r1, #1
 800bc48:	000a      	movs	r2, r1
 800bc4a:	085b      	lsrs	r3, r3, #1
 800bc4c:	42ab      	cmp	r3, r5
 800bc4e:	dc1a      	bgt.n	800bc86 <frexp+0x4a>
 800bc50:	001d      	movs	r5, r3
 800bc52:	4305      	orrs	r5, r0
 800bc54:	d017      	beq.n	800bc86 <frexp+0x4a>
 800bc56:	4d0d      	ldr	r5, [pc, #52]	; (800bc8c <frexp+0x50>)
 800bc58:	42ab      	cmp	r3, r5
 800bc5a:	dc09      	bgt.n	800bc70 <frexp+0x34>
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	4b0c      	ldr	r3, [pc, #48]	; (800bc90 <frexp+0x54>)
 800bc60:	f7f6 f928 	bl	8001eb4 <__aeabi_dmul>
 800bc64:	2536      	movs	r5, #54	; 0x36
 800bc66:	000a      	movs	r2, r1
 800bc68:	004b      	lsls	r3, r1, #1
 800bc6a:	426d      	negs	r5, r5
 800bc6c:	085b      	lsrs	r3, r3, #1
 800bc6e:	6025      	str	r5, [r4, #0]
 800bc70:	4d08      	ldr	r5, [pc, #32]	; (800bc94 <frexp+0x58>)
 800bc72:	151b      	asrs	r3, r3, #20
 800bc74:	195b      	adds	r3, r3, r5
 800bc76:	6825      	ldr	r5, [r4, #0]
 800bc78:	18eb      	adds	r3, r5, r3
 800bc7a:	6023      	str	r3, [r4, #0]
 800bc7c:	4b06      	ldr	r3, [pc, #24]	; (800bc98 <frexp+0x5c>)
 800bc7e:	401a      	ands	r2, r3
 800bc80:	4b06      	ldr	r3, [pc, #24]	; (800bc9c <frexp+0x60>)
 800bc82:	4313      	orrs	r3, r2
 800bc84:	0019      	movs	r1, r3
 800bc86:	bd70      	pop	{r4, r5, r6, pc}
 800bc88:	7fefffff 	.word	0x7fefffff
 800bc8c:	000fffff 	.word	0x000fffff
 800bc90:	43500000 	.word	0x43500000
 800bc94:	fffffc02 	.word	0xfffffc02
 800bc98:	800fffff 	.word	0x800fffff
 800bc9c:	3fe00000 	.word	0x3fe00000

0800bca0 <_sbrk_r>:
 800bca0:	2300      	movs	r3, #0
 800bca2:	b570      	push	{r4, r5, r6, lr}
 800bca4:	4c06      	ldr	r4, [pc, #24]	; (800bcc0 <_sbrk_r+0x20>)
 800bca6:	0005      	movs	r5, r0
 800bca8:	0008      	movs	r0, r1
 800bcaa:	6023      	str	r3, [r4, #0]
 800bcac:	f7fc ff20 	bl	8008af0 <_sbrk>
 800bcb0:	1c43      	adds	r3, r0, #1
 800bcb2:	d103      	bne.n	800bcbc <_sbrk_r+0x1c>
 800bcb4:	6823      	ldr	r3, [r4, #0]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d000      	beq.n	800bcbc <_sbrk_r+0x1c>
 800bcba:	602b      	str	r3, [r5, #0]
 800bcbc:	bd70      	pop	{r4, r5, r6, pc}
 800bcbe:	46c0      	nop			; (mov r8, r8)
 800bcc0:	20004710 	.word	0x20004710

0800bcc4 <strncpy>:
 800bcc4:	b530      	push	{r4, r5, lr}
 800bcc6:	0005      	movs	r5, r0
 800bcc8:	2a00      	cmp	r2, #0
 800bcca:	d100      	bne.n	800bcce <strncpy+0xa>
 800bccc:	bd30      	pop	{r4, r5, pc}
 800bcce:	780c      	ldrb	r4, [r1, #0]
 800bcd0:	3a01      	subs	r2, #1
 800bcd2:	1c6b      	adds	r3, r5, #1
 800bcd4:	702c      	strb	r4, [r5, #0]
 800bcd6:	3101      	adds	r1, #1
 800bcd8:	2c00      	cmp	r4, #0
 800bcda:	d105      	bne.n	800bce8 <strncpy+0x24>
 800bcdc:	189a      	adds	r2, r3, r2
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d0f4      	beq.n	800bccc <strncpy+0x8>
 800bce2:	701c      	strb	r4, [r3, #0]
 800bce4:	3301      	adds	r3, #1
 800bce6:	e7fa      	b.n	800bcde <strncpy+0x1a>
 800bce8:	001d      	movs	r5, r3
 800bcea:	e7ed      	b.n	800bcc8 <strncpy+0x4>

0800bcec <__ssprint_r>:
 800bcec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcee:	6893      	ldr	r3, [r2, #8]
 800bcf0:	b087      	sub	sp, #28
 800bcf2:	9002      	str	r0, [sp, #8]
 800bcf4:	000c      	movs	r4, r1
 800bcf6:	0016      	movs	r6, r2
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d063      	beq.n	800bdc4 <__ssprint_r+0xd8>
 800bcfc:	6813      	ldr	r3, [r2, #0]
 800bcfe:	9303      	str	r3, [sp, #12]
 800bd00:	2300      	movs	r3, #0
 800bd02:	001f      	movs	r7, r3
 800bd04:	9305      	str	r3, [sp, #20]
 800bd06:	2f00      	cmp	r7, #0
 800bd08:	d02e      	beq.n	800bd68 <__ssprint_r+0x7c>
 800bd0a:	68a5      	ldr	r5, [r4, #8]
 800bd0c:	42af      	cmp	r7, r5
 800bd0e:	d347      	bcc.n	800bda0 <__ssprint_r+0xb4>
 800bd10:	2390      	movs	r3, #144	; 0x90
 800bd12:	89a2      	ldrh	r2, [r4, #12]
 800bd14:	00db      	lsls	r3, r3, #3
 800bd16:	421a      	tst	r2, r3
 800bd18:	d042      	beq.n	800bda0 <__ssprint_r+0xb4>
 800bd1a:	2003      	movs	r0, #3
 800bd1c:	6921      	ldr	r1, [r4, #16]
 800bd1e:	6823      	ldr	r3, [r4, #0]
 800bd20:	1a5b      	subs	r3, r3, r1
 800bd22:	9304      	str	r3, [sp, #16]
 800bd24:	6963      	ldr	r3, [r4, #20]
 800bd26:	4343      	muls	r3, r0
 800bd28:	0fd8      	lsrs	r0, r3, #31
 800bd2a:	18c3      	adds	r3, r0, r3
 800bd2c:	105b      	asrs	r3, r3, #1
 800bd2e:	9301      	str	r3, [sp, #4]
 800bd30:	9b04      	ldr	r3, [sp, #16]
 800bd32:	9801      	ldr	r0, [sp, #4]
 800bd34:	3301      	adds	r3, #1
 800bd36:	19db      	adds	r3, r3, r7
 800bd38:	4283      	cmp	r3, r0
 800bd3a:	d900      	bls.n	800bd3e <__ssprint_r+0x52>
 800bd3c:	9301      	str	r3, [sp, #4]
 800bd3e:	0553      	lsls	r3, r2, #21
 800bd40:	d544      	bpl.n	800bdcc <__ssprint_r+0xe0>
 800bd42:	9901      	ldr	r1, [sp, #4]
 800bd44:	9802      	ldr	r0, [sp, #8]
 800bd46:	f7ff fa87 	bl	800b258 <_malloc_r>
 800bd4a:	1e05      	subs	r5, r0, #0
 800bd4c:	d114      	bne.n	800bd78 <__ssprint_r+0x8c>
 800bd4e:	230c      	movs	r3, #12
 800bd50:	9a02      	ldr	r2, [sp, #8]
 800bd52:	2001      	movs	r0, #1
 800bd54:	6013      	str	r3, [r2, #0]
 800bd56:	2340      	movs	r3, #64	; 0x40
 800bd58:	89a2      	ldrh	r2, [r4, #12]
 800bd5a:	4240      	negs	r0, r0
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	81a3      	strh	r3, [r4, #12]
 800bd60:	2300      	movs	r3, #0
 800bd62:	60b3      	str	r3, [r6, #8]
 800bd64:	6073      	str	r3, [r6, #4]
 800bd66:	e02f      	b.n	800bdc8 <__ssprint_r+0xdc>
 800bd68:	9b03      	ldr	r3, [sp, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	9305      	str	r3, [sp, #20]
 800bd6e:	9b03      	ldr	r3, [sp, #12]
 800bd70:	685f      	ldr	r7, [r3, #4]
 800bd72:	3308      	adds	r3, #8
 800bd74:	9303      	str	r3, [sp, #12]
 800bd76:	e7c6      	b.n	800bd06 <__ssprint_r+0x1a>
 800bd78:	9a04      	ldr	r2, [sp, #16]
 800bd7a:	6921      	ldr	r1, [r4, #16]
 800bd7c:	f7fc ff78 	bl	8008c70 <memcpy>
 800bd80:	89a3      	ldrh	r3, [r4, #12]
 800bd82:	4a18      	ldr	r2, [pc, #96]	; (800bde4 <__ssprint_r+0xf8>)
 800bd84:	401a      	ands	r2, r3
 800bd86:	2380      	movs	r3, #128	; 0x80
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	81a3      	strh	r3, [r4, #12]
 800bd8c:	9b04      	ldr	r3, [sp, #16]
 800bd8e:	6125      	str	r5, [r4, #16]
 800bd90:	18ed      	adds	r5, r5, r3
 800bd92:	6025      	str	r5, [r4, #0]
 800bd94:	003d      	movs	r5, r7
 800bd96:	9b01      	ldr	r3, [sp, #4]
 800bd98:	9a04      	ldr	r2, [sp, #16]
 800bd9a:	6163      	str	r3, [r4, #20]
 800bd9c:	1a9b      	subs	r3, r3, r2
 800bd9e:	60a3      	str	r3, [r4, #8]
 800bda0:	42bd      	cmp	r5, r7
 800bda2:	d900      	bls.n	800bda6 <__ssprint_r+0xba>
 800bda4:	003d      	movs	r5, r7
 800bda6:	002a      	movs	r2, r5
 800bda8:	9905      	ldr	r1, [sp, #20]
 800bdaa:	6820      	ldr	r0, [r4, #0]
 800bdac:	f000 f8ba 	bl	800bf24 <memmove>
 800bdb0:	68a3      	ldr	r3, [r4, #8]
 800bdb2:	1b5b      	subs	r3, r3, r5
 800bdb4:	60a3      	str	r3, [r4, #8]
 800bdb6:	6823      	ldr	r3, [r4, #0]
 800bdb8:	195d      	adds	r5, r3, r5
 800bdba:	68b3      	ldr	r3, [r6, #8]
 800bdbc:	6025      	str	r5, [r4, #0]
 800bdbe:	1bdb      	subs	r3, r3, r7
 800bdc0:	60b3      	str	r3, [r6, #8]
 800bdc2:	d1d1      	bne.n	800bd68 <__ssprint_r+0x7c>
 800bdc4:	2000      	movs	r0, #0
 800bdc6:	6070      	str	r0, [r6, #4]
 800bdc8:	b007      	add	sp, #28
 800bdca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdcc:	9a01      	ldr	r2, [sp, #4]
 800bdce:	9802      	ldr	r0, [sp, #8]
 800bdd0:	f000 f8bc 	bl	800bf4c <_realloc_r>
 800bdd4:	1e05      	subs	r5, r0, #0
 800bdd6:	d1d9      	bne.n	800bd8c <__ssprint_r+0xa0>
 800bdd8:	6921      	ldr	r1, [r4, #16]
 800bdda:	9802      	ldr	r0, [sp, #8]
 800bddc:	f7ff f976 	bl	800b0cc <_free_r>
 800bde0:	e7b5      	b.n	800bd4e <__ssprint_r+0x62>
 800bde2:	46c0      	nop			; (mov r8, r8)
 800bde4:	fffffb7f 	.word	0xfffffb7f

0800bde8 <sysconf>:
 800bde8:	2380      	movs	r3, #128	; 0x80
 800bdea:	b510      	push	{r4, lr}
 800bdec:	015b      	lsls	r3, r3, #5
 800bdee:	2808      	cmp	r0, #8
 800bdf0:	d004      	beq.n	800bdfc <sysconf+0x14>
 800bdf2:	f7fc fef9 	bl	8008be8 <__errno>
 800bdf6:	2316      	movs	r3, #22
 800bdf8:	6003      	str	r3, [r0, #0]
 800bdfa:	3b17      	subs	r3, #23
 800bdfc:	0018      	movs	r0, r3
 800bdfe:	bd10      	pop	{r4, pc}

0800be00 <__ascii_wctomb>:
 800be00:	1e0b      	subs	r3, r1, #0
 800be02:	d004      	beq.n	800be0e <__ascii_wctomb+0xe>
 800be04:	2aff      	cmp	r2, #255	; 0xff
 800be06:	d904      	bls.n	800be12 <__ascii_wctomb+0x12>
 800be08:	238a      	movs	r3, #138	; 0x8a
 800be0a:	6003      	str	r3, [r0, #0]
 800be0c:	3b8b      	subs	r3, #139	; 0x8b
 800be0e:	0018      	movs	r0, r3
 800be10:	4770      	bx	lr
 800be12:	700a      	strb	r2, [r1, #0]
 800be14:	2301      	movs	r3, #1
 800be16:	e7fa      	b.n	800be0e <__ascii_wctomb+0xe>

0800be18 <__register_exitproc>:
 800be18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be1a:	4d29      	ldr	r5, [pc, #164]	; (800bec0 <__register_exitproc+0xa8>)
 800be1c:	0006      	movs	r6, r0
 800be1e:	6828      	ldr	r0, [r5, #0]
 800be20:	9301      	str	r3, [sp, #4]
 800be22:	9100      	str	r1, [sp, #0]
 800be24:	0017      	movs	r7, r2
 800be26:	f7ff fa15 	bl	800b254 <__retarget_lock_acquire_recursive>
 800be2a:	4b26      	ldr	r3, [pc, #152]	; (800bec4 <__register_exitproc+0xac>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	001c      	movs	r4, r3
 800be30:	34fc      	adds	r4, #252	; 0xfc
 800be32:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800be34:	2800      	cmp	r0, #0
 800be36:	d103      	bne.n	800be40 <__register_exitproc+0x28>
 800be38:	334d      	adds	r3, #77	; 0x4d
 800be3a:	33ff      	adds	r3, #255	; 0xff
 800be3c:	0018      	movs	r0, r3
 800be3e:	64e3      	str	r3, [r4, #76]	; 0x4c
 800be40:	6843      	ldr	r3, [r0, #4]
 800be42:	2b1f      	cmp	r3, #31
 800be44:	dd18      	ble.n	800be78 <__register_exitproc+0x60>
 800be46:	4b20      	ldr	r3, [pc, #128]	; (800bec8 <__register_exitproc+0xb0>)
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d105      	bne.n	800be58 <__register_exitproc+0x40>
 800be4c:	6828      	ldr	r0, [r5, #0]
 800be4e:	f7ff fa02 	bl	800b256 <__retarget_lock_release_recursive>
 800be52:	2001      	movs	r0, #1
 800be54:	4240      	negs	r0, r0
 800be56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800be58:	20c8      	movs	r0, #200	; 0xc8
 800be5a:	0040      	lsls	r0, r0, #1
 800be5c:	e000      	b.n	800be60 <__register_exitproc+0x48>
 800be5e:	bf00      	nop
 800be60:	2800      	cmp	r0, #0
 800be62:	d0f3      	beq.n	800be4c <__register_exitproc+0x34>
 800be64:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800be66:	2300      	movs	r3, #0
 800be68:	6002      	str	r2, [r0, #0]
 800be6a:	22c4      	movs	r2, #196	; 0xc4
 800be6c:	0052      	lsls	r2, r2, #1
 800be6e:	6043      	str	r3, [r0, #4]
 800be70:	64e0      	str	r0, [r4, #76]	; 0x4c
 800be72:	5083      	str	r3, [r0, r2]
 800be74:	3204      	adds	r2, #4
 800be76:	5083      	str	r3, [r0, r2]
 800be78:	6843      	ldr	r3, [r0, #4]
 800be7a:	2e00      	cmp	r6, #0
 800be7c:	d014      	beq.n	800bea8 <__register_exitproc+0x90>
 800be7e:	009a      	lsls	r2, r3, #2
 800be80:	1882      	adds	r2, r0, r2
 800be82:	0011      	movs	r1, r2
 800be84:	3188      	adds	r1, #136	; 0x88
 800be86:	600f      	str	r7, [r1, #0]
 800be88:	2101      	movs	r1, #1
 800be8a:	0004      	movs	r4, r0
 800be8c:	4099      	lsls	r1, r3
 800be8e:	3485      	adds	r4, #133	; 0x85
 800be90:	34ff      	adds	r4, #255	; 0xff
 800be92:	6865      	ldr	r5, [r4, #4]
 800be94:	32fc      	adds	r2, #252	; 0xfc
 800be96:	430d      	orrs	r5, r1
 800be98:	6065      	str	r5, [r4, #4]
 800be9a:	9d01      	ldr	r5, [sp, #4]
 800be9c:	60d5      	str	r5, [r2, #12]
 800be9e:	2e02      	cmp	r6, #2
 800bea0:	d102      	bne.n	800bea8 <__register_exitproc+0x90>
 800bea2:	68a2      	ldr	r2, [r4, #8]
 800bea4:	4311      	orrs	r1, r2
 800bea6:	60a1      	str	r1, [r4, #8]
 800bea8:	1c5a      	adds	r2, r3, #1
 800beaa:	6042      	str	r2, [r0, #4]
 800beac:	3302      	adds	r3, #2
 800beae:	9a00      	ldr	r2, [sp, #0]
 800beb0:	009b      	lsls	r3, r3, #2
 800beb2:	501a      	str	r2, [r3, r0]
 800beb4:	4b02      	ldr	r3, [pc, #8]	; (800bec0 <__register_exitproc+0xa8>)
 800beb6:	6818      	ldr	r0, [r3, #0]
 800beb8:	f7ff f9cd 	bl	800b256 <__retarget_lock_release_recursive>
 800bebc:	2000      	movs	r0, #0
 800bebe:	e7ca      	b.n	800be56 <__register_exitproc+0x3e>
 800bec0:	20000438 	.word	0x20000438
 800bec4:	0800c9d8 	.word	0x0800c9d8
 800bec8:	00000000 	.word	0x00000000

0800becc <_calloc_r>:
 800becc:	b510      	push	{r4, lr}
 800bece:	4351      	muls	r1, r2
 800bed0:	f7ff f9c2 	bl	800b258 <_malloc_r>
 800bed4:	1e04      	subs	r4, r0, #0
 800bed6:	d01a      	beq.n	800bf0e <_calloc_r+0x42>
 800bed8:	0003      	movs	r3, r0
 800beda:	3b08      	subs	r3, #8
 800bedc:	685a      	ldr	r2, [r3, #4]
 800bede:	2303      	movs	r3, #3
 800bee0:	439a      	bics	r2, r3
 800bee2:	3a04      	subs	r2, #4
 800bee4:	2a24      	cmp	r2, #36	; 0x24
 800bee6:	d819      	bhi.n	800bf1c <_calloc_r+0x50>
 800bee8:	0003      	movs	r3, r0
 800beea:	2a13      	cmp	r2, #19
 800beec:	d90b      	bls.n	800bf06 <_calloc_r+0x3a>
 800beee:	2100      	movs	r1, #0
 800bef0:	3308      	adds	r3, #8
 800bef2:	6001      	str	r1, [r0, #0]
 800bef4:	6041      	str	r1, [r0, #4]
 800bef6:	2a1b      	cmp	r2, #27
 800bef8:	d905      	bls.n	800bf06 <_calloc_r+0x3a>
 800befa:	6081      	str	r1, [r0, #8]
 800befc:	60c1      	str	r1, [r0, #12]
 800befe:	2a24      	cmp	r2, #36	; 0x24
 800bf00:	d007      	beq.n	800bf12 <_calloc_r+0x46>
 800bf02:	0003      	movs	r3, r0
 800bf04:	3310      	adds	r3, #16
 800bf06:	2200      	movs	r2, #0
 800bf08:	601a      	str	r2, [r3, #0]
 800bf0a:	605a      	str	r2, [r3, #4]
 800bf0c:	609a      	str	r2, [r3, #8]
 800bf0e:	0020      	movs	r0, r4
 800bf10:	bd10      	pop	{r4, pc}
 800bf12:	0003      	movs	r3, r0
 800bf14:	6101      	str	r1, [r0, #16]
 800bf16:	3318      	adds	r3, #24
 800bf18:	6141      	str	r1, [r0, #20]
 800bf1a:	e7f4      	b.n	800bf06 <_calloc_r+0x3a>
 800bf1c:	2100      	movs	r1, #0
 800bf1e:	f7fc feb0 	bl	8008c82 <memset>
 800bf22:	e7f4      	b.n	800bf0e <_calloc_r+0x42>

0800bf24 <memmove>:
 800bf24:	b510      	push	{r4, lr}
 800bf26:	4288      	cmp	r0, r1
 800bf28:	d902      	bls.n	800bf30 <memmove+0xc>
 800bf2a:	188b      	adds	r3, r1, r2
 800bf2c:	4298      	cmp	r0, r3
 800bf2e:	d303      	bcc.n	800bf38 <memmove+0x14>
 800bf30:	2300      	movs	r3, #0
 800bf32:	e007      	b.n	800bf44 <memmove+0x20>
 800bf34:	5c8b      	ldrb	r3, [r1, r2]
 800bf36:	5483      	strb	r3, [r0, r2]
 800bf38:	3a01      	subs	r2, #1
 800bf3a:	d2fb      	bcs.n	800bf34 <memmove+0x10>
 800bf3c:	bd10      	pop	{r4, pc}
 800bf3e:	5ccc      	ldrb	r4, [r1, r3]
 800bf40:	54c4      	strb	r4, [r0, r3]
 800bf42:	3301      	adds	r3, #1
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d1fa      	bne.n	800bf3e <memmove+0x1a>
 800bf48:	e7f8      	b.n	800bf3c <memmove+0x18>
	...

0800bf4c <_realloc_r>:
 800bf4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf4e:	b087      	sub	sp, #28
 800bf50:	9003      	str	r0, [sp, #12]
 800bf52:	1e0c      	subs	r4, r1, #0
 800bf54:	9205      	str	r2, [sp, #20]
 800bf56:	d106      	bne.n	800bf66 <_realloc_r+0x1a>
 800bf58:	0011      	movs	r1, r2
 800bf5a:	f7ff f97d 	bl	800b258 <_malloc_r>
 800bf5e:	0007      	movs	r7, r0
 800bf60:	0038      	movs	r0, r7
 800bf62:	b007      	add	sp, #28
 800bf64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf66:	9803      	ldr	r0, [sp, #12]
 800bf68:	f7ff fba0 	bl	800b6ac <__malloc_lock>
 800bf6c:	0023      	movs	r3, r4
 800bf6e:	3b08      	subs	r3, #8
 800bf70:	685f      	ldr	r7, [r3, #4]
 800bf72:	9302      	str	r3, [sp, #8]
 800bf74:	003a      	movs	r2, r7
 800bf76:	2303      	movs	r3, #3
 800bf78:	9e05      	ldr	r6, [sp, #20]
 800bf7a:	439a      	bics	r2, r3
 800bf7c:	360b      	adds	r6, #11
 800bf7e:	9204      	str	r2, [sp, #16]
 800bf80:	2e16      	cmp	r6, #22
 800bf82:	d908      	bls.n	800bf96 <_realloc_r+0x4a>
 800bf84:	3304      	adds	r3, #4
 800bf86:	439e      	bics	r6, r3
 800bf88:	9601      	str	r6, [sp, #4]
 800bf8a:	d506      	bpl.n	800bf9a <_realloc_r+0x4e>
 800bf8c:	230c      	movs	r3, #12
 800bf8e:	9a03      	ldr	r2, [sp, #12]
 800bf90:	2700      	movs	r7, #0
 800bf92:	6013      	str	r3, [r2, #0]
 800bf94:	e7e4      	b.n	800bf60 <_realloc_r+0x14>
 800bf96:	2310      	movs	r3, #16
 800bf98:	9301      	str	r3, [sp, #4]
 800bf9a:	9b01      	ldr	r3, [sp, #4]
 800bf9c:	9a05      	ldr	r2, [sp, #20]
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d3f4      	bcc.n	800bf8c <_realloc_r+0x40>
 800bfa2:	9b01      	ldr	r3, [sp, #4]
 800bfa4:	9a04      	ldr	r2, [sp, #16]
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	dc00      	bgt.n	800bfac <_realloc_r+0x60>
 800bfaa:	e16f      	b.n	800c28c <_realloc_r+0x340>
 800bfac:	9b02      	ldr	r3, [sp, #8]
 800bfae:	48bc      	ldr	r0, [pc, #752]	; (800c2a0 <_realloc_r+0x354>)
 800bfb0:	189b      	adds	r3, r3, r2
 800bfb2:	6882      	ldr	r2, [r0, #8]
 800bfb4:	4694      	mov	ip, r2
 800bfb6:	685a      	ldr	r2, [r3, #4]
 800bfb8:	459c      	cmp	ip, r3
 800bfba:	d006      	beq.n	800bfca <_realloc_r+0x7e>
 800bfbc:	2501      	movs	r5, #1
 800bfbe:	0011      	movs	r1, r2
 800bfc0:	43a9      	bics	r1, r5
 800bfc2:	1859      	adds	r1, r3, r1
 800bfc4:	6849      	ldr	r1, [r1, #4]
 800bfc6:	4229      	tst	r1, r5
 800bfc8:	d146      	bne.n	800c058 <_realloc_r+0x10c>
 800bfca:	2103      	movs	r1, #3
 800bfcc:	438a      	bics	r2, r1
 800bfce:	9904      	ldr	r1, [sp, #16]
 800bfd0:	188e      	adds	r6, r1, r2
 800bfd2:	9901      	ldr	r1, [sp, #4]
 800bfd4:	459c      	cmp	ip, r3
 800bfd6:	d117      	bne.n	800c008 <_realloc_r+0xbc>
 800bfd8:	3110      	adds	r1, #16
 800bfda:	42b1      	cmp	r1, r6
 800bfdc:	dc3e      	bgt.n	800c05c <_realloc_r+0x110>
 800bfde:	9901      	ldr	r1, [sp, #4]
 800bfe0:	9b02      	ldr	r3, [sp, #8]
 800bfe2:	468c      	mov	ip, r1
 800bfe4:	4463      	add	r3, ip
 800bfe6:	6083      	str	r3, [r0, #8]
 800bfe8:	001a      	movs	r2, r3
 800bfea:	1a73      	subs	r3, r6, r1
 800bfec:	2601      	movs	r6, #1
 800bfee:	4333      	orrs	r3, r6
 800bff0:	6053      	str	r3, [r2, #4]
 800bff2:	0023      	movs	r3, r4
 800bff4:	3b08      	subs	r3, #8
 800bff6:	685a      	ldr	r2, [r3, #4]
 800bff8:	9803      	ldr	r0, [sp, #12]
 800bffa:	4016      	ands	r6, r2
 800bffc:	430e      	orrs	r6, r1
 800bffe:	605e      	str	r6, [r3, #4]
 800c000:	f7ff fb5c 	bl	800b6bc <__malloc_unlock>
 800c004:	0027      	movs	r7, r4
 800c006:	e7ab      	b.n	800bf60 <_realloc_r+0x14>
 800c008:	42b1      	cmp	r1, r6
 800c00a:	dc27      	bgt.n	800c05c <_realloc_r+0x110>
 800c00c:	68da      	ldr	r2, [r3, #12]
 800c00e:	689b      	ldr	r3, [r3, #8]
 800c010:	60da      	str	r2, [r3, #12]
 800c012:	6093      	str	r3, [r2, #8]
 800c014:	9b01      	ldr	r3, [sp, #4]
 800c016:	9a02      	ldr	r2, [sp, #8]
 800c018:	1af4      	subs	r4, r6, r3
 800c01a:	9b02      	ldr	r3, [sp, #8]
 800c01c:	1992      	adds	r2, r2, r6
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	9304      	str	r3, [sp, #16]
 800c022:	2301      	movs	r3, #1
 800c024:	9804      	ldr	r0, [sp, #16]
 800c026:	4018      	ands	r0, r3
 800c028:	2c0f      	cmp	r4, #15
 800c02a:	d800      	bhi.n	800c02e <_realloc_r+0xe2>
 800c02c:	e130      	b.n	800c290 <_realloc_r+0x344>
 800c02e:	9d01      	ldr	r5, [sp, #4]
 800c030:	9902      	ldr	r1, [sp, #8]
 800c032:	4328      	orrs	r0, r5
 800c034:	1949      	adds	r1, r1, r5
 800c036:	9d02      	ldr	r5, [sp, #8]
 800c038:	431c      	orrs	r4, r3
 800c03a:	6068      	str	r0, [r5, #4]
 800c03c:	604c      	str	r4, [r1, #4]
 800c03e:	6850      	ldr	r0, [r2, #4]
 800c040:	3108      	adds	r1, #8
 800c042:	4303      	orrs	r3, r0
 800c044:	6053      	str	r3, [r2, #4]
 800c046:	9803      	ldr	r0, [sp, #12]
 800c048:	f7ff f840 	bl	800b0cc <_free_r>
 800c04c:	9803      	ldr	r0, [sp, #12]
 800c04e:	f7ff fb35 	bl	800b6bc <__malloc_unlock>
 800c052:	9f02      	ldr	r7, [sp, #8]
 800c054:	3708      	adds	r7, #8
 800c056:	e783      	b.n	800bf60 <_realloc_r+0x14>
 800c058:	2200      	movs	r2, #0
 800c05a:	0013      	movs	r3, r2
 800c05c:	07f9      	lsls	r1, r7, #31
 800c05e:	d500      	bpl.n	800c062 <_realloc_r+0x116>
 800c060:	e0c6      	b.n	800c1f0 <_realloc_r+0x2a4>
 800c062:	0021      	movs	r1, r4
 800c064:	3908      	subs	r1, #8
 800c066:	680d      	ldr	r5, [r1, #0]
 800c068:	9902      	ldr	r1, [sp, #8]
 800c06a:	1b4d      	subs	r5, r1, r5
 800c06c:	2103      	movs	r1, #3
 800c06e:	686f      	ldr	r7, [r5, #4]
 800c070:	438f      	bics	r7, r1
 800c072:	9904      	ldr	r1, [sp, #16]
 800c074:	187f      	adds	r7, r7, r1
 800c076:	2b00      	cmp	r3, #0
 800c078:	d100      	bne.n	800c07c <_realloc_r+0x130>
 800c07a:	e084      	b.n	800c186 <_realloc_r+0x23a>
 800c07c:	19d6      	adds	r6, r2, r7
 800c07e:	459c      	cmp	ip, r3
 800c080:	d148      	bne.n	800c114 <_realloc_r+0x1c8>
 800c082:	9b01      	ldr	r3, [sp, #4]
 800c084:	3310      	adds	r3, #16
 800c086:	42b3      	cmp	r3, r6
 800c088:	dc7d      	bgt.n	800c186 <_realloc_r+0x23a>
 800c08a:	68aa      	ldr	r2, [r5, #8]
 800c08c:	68eb      	ldr	r3, [r5, #12]
 800c08e:	002f      	movs	r7, r5
 800c090:	60d3      	str	r3, [r2, #12]
 800c092:	609a      	str	r2, [r3, #8]
 800c094:	000a      	movs	r2, r1
 800c096:	3a04      	subs	r2, #4
 800c098:	3708      	adds	r7, #8
 800c09a:	2a24      	cmp	r2, #36	; 0x24
 800c09c:	d835      	bhi.n	800c10a <_realloc_r+0x1be>
 800c09e:	003b      	movs	r3, r7
 800c0a0:	2a13      	cmp	r2, #19
 800c0a2:	d908      	bls.n	800c0b6 <_realloc_r+0x16a>
 800c0a4:	6823      	ldr	r3, [r4, #0]
 800c0a6:	60ab      	str	r3, [r5, #8]
 800c0a8:	6863      	ldr	r3, [r4, #4]
 800c0aa:	60eb      	str	r3, [r5, #12]
 800c0ac:	2a1b      	cmp	r2, #27
 800c0ae:	d81a      	bhi.n	800c0e6 <_realloc_r+0x19a>
 800c0b0:	002b      	movs	r3, r5
 800c0b2:	3408      	adds	r4, #8
 800c0b4:	3310      	adds	r3, #16
 800c0b6:	6822      	ldr	r2, [r4, #0]
 800c0b8:	601a      	str	r2, [r3, #0]
 800c0ba:	6862      	ldr	r2, [r4, #4]
 800c0bc:	605a      	str	r2, [r3, #4]
 800c0be:	68a2      	ldr	r2, [r4, #8]
 800c0c0:	609a      	str	r2, [r3, #8]
 800c0c2:	9b01      	ldr	r3, [sp, #4]
 800c0c4:	18ea      	adds	r2, r5, r3
 800c0c6:	4b76      	ldr	r3, [pc, #472]	; (800c2a0 <_realloc_r+0x354>)
 800c0c8:	609a      	str	r2, [r3, #8]
 800c0ca:	9b01      	ldr	r3, [sp, #4]
 800c0cc:	1af3      	subs	r3, r6, r3
 800c0ce:	2601      	movs	r6, #1
 800c0d0:	4333      	orrs	r3, r6
 800c0d2:	6053      	str	r3, [r2, #4]
 800c0d4:	686b      	ldr	r3, [r5, #4]
 800c0d6:	401e      	ands	r6, r3
 800c0d8:	9b01      	ldr	r3, [sp, #4]
 800c0da:	431e      	orrs	r6, r3
 800c0dc:	606e      	str	r6, [r5, #4]
 800c0de:	9803      	ldr	r0, [sp, #12]
 800c0e0:	f7ff faec 	bl	800b6bc <__malloc_unlock>
 800c0e4:	e73c      	b.n	800bf60 <_realloc_r+0x14>
 800c0e6:	68a3      	ldr	r3, [r4, #8]
 800c0e8:	612b      	str	r3, [r5, #16]
 800c0ea:	68e3      	ldr	r3, [r4, #12]
 800c0ec:	616b      	str	r3, [r5, #20]
 800c0ee:	2a24      	cmp	r2, #36	; 0x24
 800c0f0:	d003      	beq.n	800c0fa <_realloc_r+0x1ae>
 800c0f2:	002b      	movs	r3, r5
 800c0f4:	3410      	adds	r4, #16
 800c0f6:	3318      	adds	r3, #24
 800c0f8:	e7dd      	b.n	800c0b6 <_realloc_r+0x16a>
 800c0fa:	6923      	ldr	r3, [r4, #16]
 800c0fc:	61ab      	str	r3, [r5, #24]
 800c0fe:	002b      	movs	r3, r5
 800c100:	6962      	ldr	r2, [r4, #20]
 800c102:	3320      	adds	r3, #32
 800c104:	61ea      	str	r2, [r5, #28]
 800c106:	3418      	adds	r4, #24
 800c108:	e7d5      	b.n	800c0b6 <_realloc_r+0x16a>
 800c10a:	0021      	movs	r1, r4
 800c10c:	0038      	movs	r0, r7
 800c10e:	f7ff ff09 	bl	800bf24 <memmove>
 800c112:	e7d6      	b.n	800c0c2 <_realloc_r+0x176>
 800c114:	9a01      	ldr	r2, [sp, #4]
 800c116:	42b2      	cmp	r2, r6
 800c118:	dc35      	bgt.n	800c186 <_realloc_r+0x23a>
 800c11a:	0028      	movs	r0, r5
 800c11c:	68da      	ldr	r2, [r3, #12]
 800c11e:	689b      	ldr	r3, [r3, #8]
 800c120:	3008      	adds	r0, #8
 800c122:	60da      	str	r2, [r3, #12]
 800c124:	6093      	str	r3, [r2, #8]
 800c126:	68aa      	ldr	r2, [r5, #8]
 800c128:	68eb      	ldr	r3, [r5, #12]
 800c12a:	60d3      	str	r3, [r2, #12]
 800c12c:	609a      	str	r2, [r3, #8]
 800c12e:	9a04      	ldr	r2, [sp, #16]
 800c130:	3a04      	subs	r2, #4
 800c132:	2a24      	cmp	r2, #36	; 0x24
 800c134:	d823      	bhi.n	800c17e <_realloc_r+0x232>
 800c136:	2a13      	cmp	r2, #19
 800c138:	d907      	bls.n	800c14a <_realloc_r+0x1fe>
 800c13a:	6823      	ldr	r3, [r4, #0]
 800c13c:	60ab      	str	r3, [r5, #8]
 800c13e:	6863      	ldr	r3, [r4, #4]
 800c140:	60eb      	str	r3, [r5, #12]
 800c142:	2a1b      	cmp	r2, #27
 800c144:	d809      	bhi.n	800c15a <_realloc_r+0x20e>
 800c146:	3408      	adds	r4, #8
 800c148:	3008      	adds	r0, #8
 800c14a:	6823      	ldr	r3, [r4, #0]
 800c14c:	6003      	str	r3, [r0, #0]
 800c14e:	6863      	ldr	r3, [r4, #4]
 800c150:	6043      	str	r3, [r0, #4]
 800c152:	68a3      	ldr	r3, [r4, #8]
 800c154:	6083      	str	r3, [r0, #8]
 800c156:	9502      	str	r5, [sp, #8]
 800c158:	e75c      	b.n	800c014 <_realloc_r+0xc8>
 800c15a:	68a3      	ldr	r3, [r4, #8]
 800c15c:	612b      	str	r3, [r5, #16]
 800c15e:	68e3      	ldr	r3, [r4, #12]
 800c160:	616b      	str	r3, [r5, #20]
 800c162:	2a24      	cmp	r2, #36	; 0x24
 800c164:	d003      	beq.n	800c16e <_realloc_r+0x222>
 800c166:	0028      	movs	r0, r5
 800c168:	3410      	adds	r4, #16
 800c16a:	3018      	adds	r0, #24
 800c16c:	e7ed      	b.n	800c14a <_realloc_r+0x1fe>
 800c16e:	0028      	movs	r0, r5
 800c170:	6923      	ldr	r3, [r4, #16]
 800c172:	3020      	adds	r0, #32
 800c174:	61ab      	str	r3, [r5, #24]
 800c176:	6963      	ldr	r3, [r4, #20]
 800c178:	3418      	adds	r4, #24
 800c17a:	61eb      	str	r3, [r5, #28]
 800c17c:	e7e5      	b.n	800c14a <_realloc_r+0x1fe>
 800c17e:	0021      	movs	r1, r4
 800c180:	f7ff fed0 	bl	800bf24 <memmove>
 800c184:	e7e7      	b.n	800c156 <_realloc_r+0x20a>
 800c186:	9b01      	ldr	r3, [sp, #4]
 800c188:	42bb      	cmp	r3, r7
 800c18a:	dc31      	bgt.n	800c1f0 <_realloc_r+0x2a4>
 800c18c:	0028      	movs	r0, r5
 800c18e:	68aa      	ldr	r2, [r5, #8]
 800c190:	68eb      	ldr	r3, [r5, #12]
 800c192:	3008      	adds	r0, #8
 800c194:	60d3      	str	r3, [r2, #12]
 800c196:	609a      	str	r2, [r3, #8]
 800c198:	9a04      	ldr	r2, [sp, #16]
 800c19a:	3a04      	subs	r2, #4
 800c19c:	2a24      	cmp	r2, #36	; 0x24
 800c19e:	d823      	bhi.n	800c1e8 <_realloc_r+0x29c>
 800c1a0:	2a13      	cmp	r2, #19
 800c1a2:	d907      	bls.n	800c1b4 <_realloc_r+0x268>
 800c1a4:	6823      	ldr	r3, [r4, #0]
 800c1a6:	60ab      	str	r3, [r5, #8]
 800c1a8:	6863      	ldr	r3, [r4, #4]
 800c1aa:	60eb      	str	r3, [r5, #12]
 800c1ac:	2a1b      	cmp	r2, #27
 800c1ae:	d809      	bhi.n	800c1c4 <_realloc_r+0x278>
 800c1b0:	3408      	adds	r4, #8
 800c1b2:	3008      	adds	r0, #8
 800c1b4:	6823      	ldr	r3, [r4, #0]
 800c1b6:	6003      	str	r3, [r0, #0]
 800c1b8:	6863      	ldr	r3, [r4, #4]
 800c1ba:	6043      	str	r3, [r0, #4]
 800c1bc:	68a3      	ldr	r3, [r4, #8]
 800c1be:	6083      	str	r3, [r0, #8]
 800c1c0:	003e      	movs	r6, r7
 800c1c2:	e7c8      	b.n	800c156 <_realloc_r+0x20a>
 800c1c4:	68a3      	ldr	r3, [r4, #8]
 800c1c6:	612b      	str	r3, [r5, #16]
 800c1c8:	68e3      	ldr	r3, [r4, #12]
 800c1ca:	616b      	str	r3, [r5, #20]
 800c1cc:	2a24      	cmp	r2, #36	; 0x24
 800c1ce:	d003      	beq.n	800c1d8 <_realloc_r+0x28c>
 800c1d0:	0028      	movs	r0, r5
 800c1d2:	3410      	adds	r4, #16
 800c1d4:	3018      	adds	r0, #24
 800c1d6:	e7ed      	b.n	800c1b4 <_realloc_r+0x268>
 800c1d8:	0028      	movs	r0, r5
 800c1da:	6923      	ldr	r3, [r4, #16]
 800c1dc:	3020      	adds	r0, #32
 800c1de:	61ab      	str	r3, [r5, #24]
 800c1e0:	6963      	ldr	r3, [r4, #20]
 800c1e2:	3418      	adds	r4, #24
 800c1e4:	61eb      	str	r3, [r5, #28]
 800c1e6:	e7e5      	b.n	800c1b4 <_realloc_r+0x268>
 800c1e8:	0021      	movs	r1, r4
 800c1ea:	f7ff fe9b 	bl	800bf24 <memmove>
 800c1ee:	e7e7      	b.n	800c1c0 <_realloc_r+0x274>
 800c1f0:	9905      	ldr	r1, [sp, #20]
 800c1f2:	9803      	ldr	r0, [sp, #12]
 800c1f4:	f7ff f830 	bl	800b258 <_malloc_r>
 800c1f8:	1e07      	subs	r7, r0, #0
 800c1fa:	d100      	bne.n	800c1fe <_realloc_r+0x2b2>
 800c1fc:	e76f      	b.n	800c0de <_realloc_r+0x192>
 800c1fe:	0023      	movs	r3, r4
 800c200:	2201      	movs	r2, #1
 800c202:	3b08      	subs	r3, #8
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	4393      	bics	r3, r2
 800c208:	9a02      	ldr	r2, [sp, #8]
 800c20a:	18d3      	adds	r3, r2, r3
 800c20c:	0002      	movs	r2, r0
 800c20e:	3a08      	subs	r2, #8
 800c210:	4293      	cmp	r3, r2
 800c212:	d105      	bne.n	800c220 <_realloc_r+0x2d4>
 800c214:	685e      	ldr	r6, [r3, #4]
 800c216:	2303      	movs	r3, #3
 800c218:	439e      	bics	r6, r3
 800c21a:	9b04      	ldr	r3, [sp, #16]
 800c21c:	18f6      	adds	r6, r6, r3
 800c21e:	e6f9      	b.n	800c014 <_realloc_r+0xc8>
 800c220:	9a04      	ldr	r2, [sp, #16]
 800c222:	3a04      	subs	r2, #4
 800c224:	2a24      	cmp	r2, #36	; 0x24
 800c226:	d82d      	bhi.n	800c284 <_realloc_r+0x338>
 800c228:	2a13      	cmp	r2, #19
 800c22a:	d928      	bls.n	800c27e <_realloc_r+0x332>
 800c22c:	6823      	ldr	r3, [r4, #0]
 800c22e:	6003      	str	r3, [r0, #0]
 800c230:	6863      	ldr	r3, [r4, #4]
 800c232:	6043      	str	r3, [r0, #4]
 800c234:	2a1b      	cmp	r2, #27
 800c236:	d80e      	bhi.n	800c256 <_realloc_r+0x30a>
 800c238:	0022      	movs	r2, r4
 800c23a:	0003      	movs	r3, r0
 800c23c:	3208      	adds	r2, #8
 800c23e:	3308      	adds	r3, #8
 800c240:	6811      	ldr	r1, [r2, #0]
 800c242:	6019      	str	r1, [r3, #0]
 800c244:	6851      	ldr	r1, [r2, #4]
 800c246:	6059      	str	r1, [r3, #4]
 800c248:	6892      	ldr	r2, [r2, #8]
 800c24a:	609a      	str	r2, [r3, #8]
 800c24c:	0021      	movs	r1, r4
 800c24e:	9803      	ldr	r0, [sp, #12]
 800c250:	f7fe ff3c 	bl	800b0cc <_free_r>
 800c254:	e743      	b.n	800c0de <_realloc_r+0x192>
 800c256:	68a3      	ldr	r3, [r4, #8]
 800c258:	6083      	str	r3, [r0, #8]
 800c25a:	68e3      	ldr	r3, [r4, #12]
 800c25c:	60c3      	str	r3, [r0, #12]
 800c25e:	2a24      	cmp	r2, #36	; 0x24
 800c260:	d004      	beq.n	800c26c <_realloc_r+0x320>
 800c262:	0022      	movs	r2, r4
 800c264:	0003      	movs	r3, r0
 800c266:	3210      	adds	r2, #16
 800c268:	3310      	adds	r3, #16
 800c26a:	e7e9      	b.n	800c240 <_realloc_r+0x2f4>
 800c26c:	6923      	ldr	r3, [r4, #16]
 800c26e:	0022      	movs	r2, r4
 800c270:	6103      	str	r3, [r0, #16]
 800c272:	0003      	movs	r3, r0
 800c274:	6961      	ldr	r1, [r4, #20]
 800c276:	3218      	adds	r2, #24
 800c278:	3318      	adds	r3, #24
 800c27a:	6141      	str	r1, [r0, #20]
 800c27c:	e7e0      	b.n	800c240 <_realloc_r+0x2f4>
 800c27e:	0003      	movs	r3, r0
 800c280:	0022      	movs	r2, r4
 800c282:	e7dd      	b.n	800c240 <_realloc_r+0x2f4>
 800c284:	0021      	movs	r1, r4
 800c286:	f7ff fe4d 	bl	800bf24 <memmove>
 800c28a:	e7df      	b.n	800c24c <_realloc_r+0x300>
 800c28c:	9e04      	ldr	r6, [sp, #16]
 800c28e:	e6c1      	b.n	800c014 <_realloc_r+0xc8>
 800c290:	9902      	ldr	r1, [sp, #8]
 800c292:	4306      	orrs	r6, r0
 800c294:	604e      	str	r6, [r1, #4]
 800c296:	6851      	ldr	r1, [r2, #4]
 800c298:	430b      	orrs	r3, r1
 800c29a:	6053      	str	r3, [r2, #4]
 800c29c:	e6d6      	b.n	800c04c <_realloc_r+0x100>
 800c29e:	46c0      	nop			; (mov r8, r8)
 800c2a0:	200005a8 	.word	0x200005a8

0800c2a4 <_init>:
 800c2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2a6:	46c0      	nop			; (mov r8, r8)
 800c2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2aa:	bc08      	pop	{r3}
 800c2ac:	469e      	mov	lr, r3
 800c2ae:	4770      	bx	lr

0800c2b0 <_fini>:
 800c2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2b2:	46c0      	nop			; (mov r8, r8)
 800c2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2b6:	bc08      	pop	{r3}
 800c2b8:	469e      	mov	lr, r3
 800c2ba:	4770      	bx	lr
