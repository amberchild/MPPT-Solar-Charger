
MPPT_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f7c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800503c  0800503c  0001503c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005118  08005118  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08005118  08005118  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005118  08005118  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005118  08005118  00015118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800511c  0800511c  0001511c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08005120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001148  20000008  08005128  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20001150  08005128  00021150  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ed6  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bdf  00000000  00000000  00032f06  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f88  00000000  00000000  00035ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e20  00000000  00000000  00036a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001659d  00000000  00000000  00037890  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d5d0  00000000  00000000  0004de2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088888  00000000  00000000  0005b3fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3c85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003604  00000000  00000000  000e3d00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005024 	.word	0x08005024

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	08005024 	.word	0x08005024

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000226:	1dfb      	adds	r3, r7, #7
 8000228:	2200      	movs	r2, #0
 800022a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800022c:	4b0b      	ldr	r3, [pc, #44]	; (800025c <HAL_Init+0x3c>)
 800022e:	681a      	ldr	r2, [r3, #0]
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <HAL_Init+0x3c>)
 8000232:	2140      	movs	r1, #64	; 0x40
 8000234:	430a      	orrs	r2, r1
 8000236:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000238:	2000      	movs	r0, #0
 800023a:	f004 fdc3 	bl	8004dc4 <HAL_InitTick>
 800023e:	1e03      	subs	r3, r0, #0
 8000240:	d003      	beq.n	800024a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000242:	1dfb      	adds	r3, r7, #7
 8000244:	2201      	movs	r2, #1
 8000246:	701a      	strb	r2, [r3, #0]
 8000248:	e001      	b.n	800024e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800024a:	f004 fcfb 	bl	8004c44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800024e:	1dfb      	adds	r3, r7, #7
 8000250:	781b      	ldrb	r3, [r3, #0]
}
 8000252:	0018      	movs	r0, r3
 8000254:	46bd      	mov	sp, r7
 8000256:	b002      	add	sp, #8
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	40022000 	.word	0x40022000

08000260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
  uwTick++;
 8000264:	4b03      	ldr	r3, [pc, #12]	; (8000274 <HAL_IncTick+0x14>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	1c5a      	adds	r2, r3, #1
 800026a:	4b02      	ldr	r3, [pc, #8]	; (8000274 <HAL_IncTick+0x14>)
 800026c:	601a      	str	r2, [r3, #0]
}
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	20000fbc 	.word	0x20000fbc

08000278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  return uwTick;
 800027c:	4b02      	ldr	r3, [pc, #8]	; (8000288 <HAL_GetTick+0x10>)
 800027e:	681b      	ldr	r3, [r3, #0]
}
 8000280:	0018      	movs	r0, r3
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	20000fbc 	.word	0x20000fbc

0800028c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d101      	bne.n	800029e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800029a:	2301      	movs	r3, #1
 800029c:	e159      	b.n	8000552 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d10a      	bne.n	80002bc <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2200      	movs	r2, #0
 80002aa:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2250      	movs	r2, #80	; 0x50
 80002b0:	2100      	movs	r1, #0
 80002b2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	0018      	movs	r0, r3
 80002b8:	f004 fce8 	bl	8004c8c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80002c0:	2210      	movs	r2, #16
 80002c2:	4013      	ands	r3, r2
 80002c4:	2b10      	cmp	r3, #16
 80002c6:	d005      	beq.n	80002d4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	689b      	ldr	r3, [r3, #8]
 80002ce:	2204      	movs	r2, #4
 80002d0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80002d2:	d00b      	beq.n	80002ec <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80002d8:	2210      	movs	r2, #16
 80002da:	431a      	orrs	r2, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2250      	movs	r2, #80	; 0x50
 80002e4:	2100      	movs	r1, #0
 80002e6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80002e8:	2301      	movs	r3, #1
 80002ea:	e132      	b.n	8000552 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80002f0:	4a9a      	ldr	r2, [pc, #616]	; (800055c <HAL_ADC_Init+0x2d0>)
 80002f2:	4013      	ands	r3, r2
 80002f4:	2202      	movs	r2, #2
 80002f6:	431a      	orrs	r2, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	689b      	ldr	r3, [r3, #8]
 8000302:	2203      	movs	r2, #3
 8000304:	4013      	ands	r3, r2
 8000306:	2b01      	cmp	r3, #1
 8000308:	d108      	bne.n	800031c <HAL_ADC_Init+0x90>
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2201      	movs	r2, #1
 8000312:	4013      	ands	r3, r2
 8000314:	2b01      	cmp	r3, #1
 8000316:	d101      	bne.n	800031c <HAL_ADC_Init+0x90>
 8000318:	2301      	movs	r3, #1
 800031a:	e000      	b.n	800031e <HAL_ADC_Init+0x92>
 800031c:	2300      	movs	r3, #0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d149      	bne.n	80003b6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	685a      	ldr	r2, [r3, #4]
 8000326:	23c0      	movs	r3, #192	; 0xc0
 8000328:	061b      	lsls	r3, r3, #24
 800032a:	429a      	cmp	r2, r3
 800032c:	d00b      	beq.n	8000346 <HAL_ADC_Init+0xba>
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	685a      	ldr	r2, [r3, #4]
 8000332:	2380      	movs	r3, #128	; 0x80
 8000334:	05db      	lsls	r3, r3, #23
 8000336:	429a      	cmp	r2, r3
 8000338:	d005      	beq.n	8000346 <HAL_ADC_Init+0xba>
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	685a      	ldr	r2, [r3, #4]
 800033e:	2380      	movs	r3, #128	; 0x80
 8000340:	061b      	lsls	r3, r3, #24
 8000342:	429a      	cmp	r2, r3
 8000344:	d111      	bne.n	800036a <HAL_ADC_Init+0xde>
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	691a      	ldr	r2, [r3, #16]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	0092      	lsls	r2, r2, #2
 8000352:	0892      	lsrs	r2, r2, #2
 8000354:	611a      	str	r2, [r3, #16]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	6919      	ldr	r1, [r3, #16]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	685a      	ldr	r2, [r3, #4]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	430a      	orrs	r2, r1
 8000366:	611a      	str	r2, [r3, #16]
 8000368:	e014      	b.n	8000394 <HAL_ADC_Init+0x108>
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	691a      	ldr	r2, [r3, #16]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	0092      	lsls	r2, r2, #2
 8000376:	0892      	lsrs	r2, r2, #2
 8000378:	611a      	str	r2, [r3, #16]
 800037a:	4b79      	ldr	r3, [pc, #484]	; (8000560 <HAL_ADC_Init+0x2d4>)
 800037c:	681a      	ldr	r2, [r3, #0]
 800037e:	4b78      	ldr	r3, [pc, #480]	; (8000560 <HAL_ADC_Init+0x2d4>)
 8000380:	4978      	ldr	r1, [pc, #480]	; (8000564 <HAL_ADC_Init+0x2d8>)
 8000382:	400a      	ands	r2, r1
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	4b76      	ldr	r3, [pc, #472]	; (8000560 <HAL_ADC_Init+0x2d4>)
 8000388:	6819      	ldr	r1, [r3, #0]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	685a      	ldr	r2, [r3, #4]
 800038e:	4b74      	ldr	r3, [pc, #464]	; (8000560 <HAL_ADC_Init+0x2d4>)
 8000390:	430a      	orrs	r2, r1
 8000392:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	68da      	ldr	r2, [r3, #12]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2118      	movs	r1, #24
 80003a0:	438a      	bics	r2, r1
 80003a2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	68d9      	ldr	r1, [r3, #12]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	689a      	ldr	r2, [r3, #8]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	430a      	orrs	r2, r1
 80003b4:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80003b6:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <HAL_ADC_Init+0x2d4>)
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	4b69      	ldr	r3, [pc, #420]	; (8000560 <HAL_ADC_Init+0x2d4>)
 80003bc:	496a      	ldr	r1, [pc, #424]	; (8000568 <HAL_ADC_Init+0x2dc>)
 80003be:	400a      	ands	r2, r1
 80003c0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80003c2:	4b67      	ldr	r3, [pc, #412]	; (8000560 <HAL_ADC_Init+0x2d4>)
 80003c4:	6819      	ldr	r1, [r3, #0]
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003ca:	065a      	lsls	r2, r3, #25
 80003cc:	4b64      	ldr	r3, [pc, #400]	; (8000560 <HAL_ADC_Init+0x2d4>)
 80003ce:	430a      	orrs	r2, r1
 80003d0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	689a      	ldr	r2, [r3, #8]
 80003d8:	2380      	movs	r3, #128	; 0x80
 80003da:	055b      	lsls	r3, r3, #21
 80003dc:	4013      	ands	r3, r2
 80003de:	d108      	bne.n	80003f2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	689a      	ldr	r2, [r3, #8]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	2180      	movs	r1, #128	; 0x80
 80003ec:	0549      	lsls	r1, r1, #21
 80003ee:	430a      	orrs	r2, r1
 80003f0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	68da      	ldr	r2, [r3, #12]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	495b      	ldr	r1, [pc, #364]	; (800056c <HAL_ADC_Init+0x2e0>)
 80003fe:	400a      	ands	r2, r1
 8000400:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	68d9      	ldr	r1, [r3, #12]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	691b      	ldr	r3, [r3, #16]
 8000410:	2b02      	cmp	r3, #2
 8000412:	d101      	bne.n	8000418 <HAL_ADC_Init+0x18c>
 8000414:	2304      	movs	r3, #4
 8000416:	e000      	b.n	800041a <HAL_ADC_Init+0x18e>
 8000418:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800041a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2020      	movs	r0, #32
 8000420:	5c1b      	ldrb	r3, [r3, r0]
 8000422:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000424:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	202c      	movs	r0, #44	; 0x2c
 800042a:	5c1b      	ldrb	r3, [r3, r0]
 800042c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800042e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000434:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800043c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	69db      	ldr	r3, [r3, #28]
 8000442:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000444:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	430a      	orrs	r2, r1
 800044c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000452:	23c2      	movs	r3, #194	; 0xc2
 8000454:	33ff      	adds	r3, #255	; 0xff
 8000456:	429a      	cmp	r2, r3
 8000458:	d00b      	beq.n	8000472 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	68d9      	ldr	r1, [r3, #12]
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000468:	431a      	orrs	r2, r3
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	430a      	orrs	r2, r1
 8000470:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	2221      	movs	r2, #33	; 0x21
 8000476:	5c9b      	ldrb	r3, [r3, r2]
 8000478:	2b01      	cmp	r3, #1
 800047a:	d11a      	bne.n	80004b2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	2220      	movs	r2, #32
 8000480:	5c9b      	ldrb	r3, [r3, r2]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d109      	bne.n	800049a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	68da      	ldr	r2, [r3, #12]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2180      	movs	r1, #128	; 0x80
 8000492:	0249      	lsls	r1, r1, #9
 8000494:	430a      	orrs	r2, r1
 8000496:	60da      	str	r2, [r3, #12]
 8000498:	e00b      	b.n	80004b2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800049e:	2220      	movs	r2, #32
 80004a0:	431a      	orrs	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004aa:	2201      	movs	r2, #1
 80004ac:	431a      	orrs	r2, r3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004b6:	2b01      	cmp	r3, #1
 80004b8:	d11f      	bne.n	80004fa <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	691a      	ldr	r2, [r3, #16]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	492a      	ldr	r1, [pc, #168]	; (8000570 <HAL_ADC_Init+0x2e4>)
 80004c6:	400a      	ands	r2, r1
 80004c8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	6919      	ldr	r1, [r3, #16]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80004d8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80004de:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	430a      	orrs	r2, r1
 80004e6:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	691a      	ldr	r2, [r3, #16]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2101      	movs	r1, #1
 80004f4:	430a      	orrs	r2, r1
 80004f6:	611a      	str	r2, [r3, #16]
 80004f8:	e00e      	b.n	8000518 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	691b      	ldr	r3, [r3, #16]
 8000500:	2201      	movs	r2, #1
 8000502:	4013      	ands	r3, r2
 8000504:	2b01      	cmp	r3, #1
 8000506:	d107      	bne.n	8000518 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	691a      	ldr	r2, [r3, #16]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2101      	movs	r1, #1
 8000514:	438a      	bics	r2, r1
 8000516:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	695a      	ldr	r2, [r3, #20]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2107      	movs	r1, #7
 8000524:	438a      	bics	r2, r1
 8000526:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	6959      	ldr	r1, [r3, #20]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	430a      	orrs	r2, r1
 8000538:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2200      	movs	r2, #0
 800053e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000544:	2203      	movs	r2, #3
 8000546:	4393      	bics	r3, r2
 8000548:	2201      	movs	r2, #1
 800054a:	431a      	orrs	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000550:	2300      	movs	r3, #0
}
 8000552:	0018      	movs	r0, r3
 8000554:	46bd      	mov	sp, r7
 8000556:	b002      	add	sp, #8
 8000558:	bd80      	pop	{r7, pc}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	fffffefd 	.word	0xfffffefd
 8000560:	40012708 	.word	0x40012708
 8000564:	ffc3ffff 	.word	0xffc3ffff
 8000568:	fdffffff 	.word	0xfdffffff
 800056c:	fffe0219 	.word	0xfffe0219
 8000570:	fffffc03 	.word	0xfffffc03

08000574 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b087      	sub	sp, #28
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000580:	2317      	movs	r3, #23
 8000582:	18fb      	adds	r3, r7, r3
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	689b      	ldr	r3, [r3, #8]
 800058e:	2204      	movs	r2, #4
 8000590:	4013      	ands	r3, r2
 8000592:	d15e      	bne.n	8000652 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	2250      	movs	r2, #80	; 0x50
 8000598:	5c9b      	ldrb	r3, [r3, r2]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d101      	bne.n	80005a2 <HAL_ADC_Start_DMA+0x2e>
 800059e:	2302      	movs	r3, #2
 80005a0:	e05e      	b.n	8000660 <HAL_ADC_Start_DMA+0xec>
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	2250      	movs	r2, #80	; 0x50
 80005a6:	2101      	movs	r1, #1
 80005a8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	69db      	ldr	r3, [r3, #28]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d007      	beq.n	80005c2 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80005b2:	2317      	movs	r3, #23
 80005b4:	18fc      	adds	r4, r7, r3
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	0018      	movs	r0, r3
 80005ba:	f000 f9bf 	bl	800093c <ADC_Enable>
 80005be:	0003      	movs	r3, r0
 80005c0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80005c2:	2317      	movs	r3, #23
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d146      	bne.n	800065a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80005d0:	4a25      	ldr	r2, [pc, #148]	; (8000668 <HAL_ADC_Start_DMA+0xf4>)
 80005d2:	4013      	ands	r3, r2
 80005d4:	2280      	movs	r2, #128	; 0x80
 80005d6:	0052      	lsls	r2, r2, #1
 80005d8:	431a      	orrs	r2, r3
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	2200      	movs	r2, #0
 80005e2:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	2250      	movs	r2, #80	; 0x50
 80005e8:	2100      	movs	r1, #0
 80005ea:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f0:	4a1e      	ldr	r2, [pc, #120]	; (800066c <HAL_ADC_Start_DMA+0xf8>)
 80005f2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f8:	4a1d      	ldr	r2, [pc, #116]	; (8000670 <HAL_ADC_Start_DMA+0xfc>)
 80005fa:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000600:	4a1c      	ldr	r2, [pc, #112]	; (8000674 <HAL_ADC_Start_DMA+0x100>)
 8000602:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	221c      	movs	r2, #28
 800060a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	685a      	ldr	r2, [r3, #4]
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2110      	movs	r1, #16
 8000618:	430a      	orrs	r2, r1
 800061a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	68da      	ldr	r2, [r3, #12]
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2101      	movs	r1, #1
 8000628:	430a      	orrs	r2, r1
 800062a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	3340      	adds	r3, #64	; 0x40
 8000636:	0019      	movs	r1, r3
 8000638:	68ba      	ldr	r2, [r7, #8]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	f000 fba2 	bl	8000d84 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	689a      	ldr	r2, [r3, #8]
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2104      	movs	r1, #4
 800064c:	430a      	orrs	r2, r1
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	e003      	b.n	800065a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000652:	2317      	movs	r3, #23
 8000654:	18fb      	adds	r3, r7, r3
 8000656:	2202      	movs	r2, #2
 8000658:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800065a:	2317      	movs	r3, #23
 800065c:	18fb      	adds	r3, r7, r3
 800065e:	781b      	ldrb	r3, [r3, #0]
}
 8000660:	0018      	movs	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	b007      	add	sp, #28
 8000666:	bd90      	pop	{r4, r7, pc}
 8000668:	fffff0fe 	.word	0xfffff0fe
 800066c:	080009fd 	.word	0x080009fd
 8000670:	08000ab1 	.word	0x08000ab1
 8000674:	08000acf 	.word	0x08000acf

08000678 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2204      	movs	r2, #4
 8000688:	4013      	ands	r3, r2
 800068a:	2b04      	cmp	r3, #4
 800068c:	d106      	bne.n	800069c <HAL_ADC_IRQHandler+0x24>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	2204      	movs	r2, #4
 8000696:	4013      	ands	r3, r2
 8000698:	2b04      	cmp	r3, #4
 800069a:	d00d      	beq.n	80006b8 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2208      	movs	r2, #8
 80006a4:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80006a6:	2b08      	cmp	r3, #8
 80006a8:	d154      	bne.n	8000754 <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	2208      	movs	r2, #8
 80006b2:	4013      	ands	r3, r2
 80006b4:	2b08      	cmp	r3, #8
 80006b6:	d14d      	bne.n	8000754 <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80006bc:	2210      	movs	r2, #16
 80006be:	4013      	ands	r3, r2
 80006c0:	d106      	bne.n	80006d0 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80006c6:	2280      	movs	r2, #128	; 0x80
 80006c8:	0092      	lsls	r2, r2, #2
 80006ca:	431a      	orrs	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	68da      	ldr	r2, [r3, #12]
 80006d6:	23c0      	movs	r3, #192	; 0xc0
 80006d8:	011b      	lsls	r3, r3, #4
 80006da:	4013      	ands	r3, r2
 80006dc:	d12e      	bne.n	800073c <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2220      	movs	r2, #32
 80006e2:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d129      	bne.n	800073c <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2208      	movs	r2, #8
 80006f0:	4013      	ands	r3, r2
 80006f2:	2b08      	cmp	r3, #8
 80006f4:	d122      	bne.n	800073c <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	2204      	movs	r2, #4
 80006fe:	4013      	ands	r3, r2
 8000700:	d110      	bne.n	8000724 <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	685a      	ldr	r2, [r3, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	210c      	movs	r1, #12
 800070e:	438a      	bics	r2, r1
 8000710:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000716:	4a35      	ldr	r2, [pc, #212]	; (80007ec <HAL_ADC_IRQHandler+0x174>)
 8000718:	4013      	ands	r3, r2
 800071a:	2201      	movs	r2, #1
 800071c:	431a      	orrs	r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	655a      	str	r2, [r3, #84]	; 0x54
 8000722:	e00b      	b.n	800073c <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000728:	2220      	movs	r2, #32
 800072a:	431a      	orrs	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000734:	2201      	movs	r2, #1
 8000736:	431a      	orrs	r2, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	0018      	movs	r0, r3
 8000740:	f000 f856 	bl	80007f0 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d003      	beq.n	8000754 <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	220c      	movs	r2, #12
 8000752:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2280      	movs	r2, #128	; 0x80
 800075c:	4013      	ands	r3, r2
 800075e:	2b80      	cmp	r3, #128	; 0x80
 8000760:	d115      	bne.n	800078e <HAL_ADC_IRQHandler+0x116>
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	2280      	movs	r2, #128	; 0x80
 800076a:	4013      	ands	r3, r2
 800076c:	2b80      	cmp	r3, #128	; 0x80
 800076e:	d10e      	bne.n	800078e <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000774:	2280      	movs	r2, #128	; 0x80
 8000776:	0252      	lsls	r2, r2, #9
 8000778:	431a      	orrs	r2, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	0018      	movs	r0, r3
 8000782:	f000 f845 	bl	8000810 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2210      	movs	r2, #16
 8000796:	4013      	ands	r3, r2
 8000798:	2b10      	cmp	r3, #16
 800079a:	d123      	bne.n	80007e4 <HAL_ADC_IRQHandler+0x16c>
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	2210      	movs	r2, #16
 80007a4:	4013      	ands	r3, r2
 80007a6:	2b10      	cmp	r3, #16
 80007a8:	d11c      	bne.n	80007e4 <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d006      	beq.n	80007c0 <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	2201      	movs	r2, #1
 80007ba:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d10d      	bne.n	80007dc <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c4:	2202      	movs	r2, #2
 80007c6:	431a      	orrs	r2, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2210      	movs	r2, #16
 80007d2:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	0018      	movs	r0, r3
 80007d8:	f000 f822 	bl	8000820 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2210      	movs	r2, #16
 80007e2:	601a      	str	r2, [r3, #0]
  }
  
}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b002      	add	sp, #8
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	fffffefe 	.word	0xfffffefe

080007f0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80007f8:	46c0      	nop			; (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	b002      	add	sp, #8
 80007fe:	bd80      	pop	{r7, pc}

08000800 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	b002      	add	sp, #8
 800080e:	bd80      	pop	{r7, pc}

08000810 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	b002      	add	sp, #8
 800081e:	bd80      	pop	{r7, pc}

08000820 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	b002      	add	sp, #8
 800082e:	bd80      	pop	{r7, pc}

08000830 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2250      	movs	r2, #80	; 0x50
 800083e:	5c9b      	ldrb	r3, [r3, r2]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d101      	bne.n	8000848 <HAL_ADC_ConfigChannel+0x18>
 8000844:	2302      	movs	r3, #2
 8000846:	e06c      	b.n	8000922 <HAL_ADC_ConfigChannel+0xf2>
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2250      	movs	r2, #80	; 0x50
 800084c:	2101      	movs	r1, #1
 800084e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	689b      	ldr	r3, [r3, #8]
 8000856:	2204      	movs	r2, #4
 8000858:	4013      	ands	r3, r2
 800085a:	d00b      	beq.n	8000874 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000860:	2220      	movs	r2, #32
 8000862:	431a      	orrs	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2250      	movs	r2, #80	; 0x50
 800086c:	2100      	movs	r1, #0
 800086e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000870:	2301      	movs	r3, #1
 8000872:	e056      	b.n	8000922 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	4a2c      	ldr	r2, [pc, #176]	; (800092c <HAL_ADC_ConfigChannel+0xfc>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d028      	beq.n	80008d0 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	035b      	lsls	r3, r3, #13
 800088a:	0b5a      	lsrs	r2, r3, #13
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	430a      	orrs	r2, r1
 8000892:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	2380      	movs	r3, #128	; 0x80
 800089a:	02db      	lsls	r3, r3, #11
 800089c:	4013      	ands	r3, r2
 800089e:	d009      	beq.n	80008b4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80008a0:	4b23      	ldr	r3, [pc, #140]	; (8000930 <HAL_ADC_ConfigChannel+0x100>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b22      	ldr	r3, [pc, #136]	; (8000930 <HAL_ADC_ConfigChannel+0x100>)
 80008a6:	2180      	movs	r1, #128	; 0x80
 80008a8:	0409      	lsls	r1, r1, #16
 80008aa:	430a      	orrs	r2, r1
 80008ac:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80008ae:	200a      	movs	r0, #10
 80008b0:	f000 f928 	bl	8000b04 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	029b      	lsls	r3, r3, #10
 80008bc:	4013      	ands	r3, r2
 80008be:	d02b      	beq.n	8000918 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <HAL_ADC_ConfigChannel+0x100>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <HAL_ADC_ConfigChannel+0x100>)
 80008c6:	2180      	movs	r1, #128	; 0x80
 80008c8:	03c9      	lsls	r1, r1, #15
 80008ca:	430a      	orrs	r2, r1
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	e023      	b.n	8000918 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	035b      	lsls	r3, r3, #13
 80008dc:	0b5b      	lsrs	r3, r3, #13
 80008de:	43d9      	mvns	r1, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	400a      	ands	r2, r1
 80008e6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	02db      	lsls	r3, r3, #11
 80008f0:	4013      	ands	r3, r2
 80008f2:	d005      	beq.n	8000900 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <HAL_ADC_ConfigChannel+0x100>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <HAL_ADC_ConfigChannel+0x100>)
 80008fa:	490e      	ldr	r1, [pc, #56]	; (8000934 <HAL_ADC_ConfigChannel+0x104>)
 80008fc:	400a      	ands	r2, r1
 80008fe:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	2380      	movs	r3, #128	; 0x80
 8000906:	029b      	lsls	r3, r3, #10
 8000908:	4013      	ands	r3, r2
 800090a:	d005      	beq.n	8000918 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <HAL_ADC_ConfigChannel+0x100>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <HAL_ADC_ConfigChannel+0x100>)
 8000912:	4909      	ldr	r1, [pc, #36]	; (8000938 <HAL_ADC_ConfigChannel+0x108>)
 8000914:	400a      	ands	r2, r1
 8000916:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2250      	movs	r2, #80	; 0x50
 800091c:	2100      	movs	r1, #0
 800091e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8000920:	2300      	movs	r3, #0
}
 8000922:	0018      	movs	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	b002      	add	sp, #8
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	00001001 	.word	0x00001001
 8000930:	40012708 	.word	0x40012708
 8000934:	ff7fffff 	.word	0xff7fffff
 8000938:	ffbfffff 	.word	0xffbfffff

0800093c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	2203      	movs	r2, #3
 8000950:	4013      	ands	r3, r2
 8000952:	2b01      	cmp	r3, #1
 8000954:	d108      	bne.n	8000968 <ADC_Enable+0x2c>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2201      	movs	r2, #1
 800095e:	4013      	ands	r3, r2
 8000960:	2b01      	cmp	r3, #1
 8000962:	d101      	bne.n	8000968 <ADC_Enable+0x2c>
 8000964:	2301      	movs	r3, #1
 8000966:	e000      	b.n	800096a <ADC_Enable+0x2e>
 8000968:	2300      	movs	r3, #0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d13f      	bne.n	80009ee <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	689b      	ldr	r3, [r3, #8]
 8000974:	4a20      	ldr	r2, [pc, #128]	; (80009f8 <ADC_Enable+0xbc>)
 8000976:	4013      	ands	r3, r2
 8000978:	d00d      	beq.n	8000996 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800097e:	2210      	movs	r2, #16
 8000980:	431a      	orrs	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098a:	2201      	movs	r2, #1
 800098c:	431a      	orrs	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	e02c      	b.n	80009f0 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	689a      	ldr	r2, [r3, #8]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2101      	movs	r1, #1
 80009a2:	430a      	orrs	r2, r1
 80009a4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80009a6:	2001      	movs	r0, #1
 80009a8:	f000 f8ac 	bl	8000b04 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80009ac:	f7ff fc64 	bl	8000278 <HAL_GetTick>
 80009b0:	0003      	movs	r3, r0
 80009b2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80009b4:	e014      	b.n	80009e0 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80009b6:	f7ff fc5f 	bl	8000278 <HAL_GetTick>
 80009ba:	0002      	movs	r2, r0
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	1ad3      	subs	r3, r2, r3
 80009c0:	2b0a      	cmp	r3, #10
 80009c2:	d90d      	bls.n	80009e0 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009c8:	2210      	movs	r2, #16
 80009ca:	431a      	orrs	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d4:	2201      	movs	r2, #1
 80009d6:	431a      	orrs	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	e007      	b.n	80009f0 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2201      	movs	r2, #1
 80009e8:	4013      	ands	r3, r2
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d1e3      	bne.n	80009b6 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80009ee:	2300      	movs	r3, #0
}
 80009f0:	0018      	movs	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b004      	add	sp, #16
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	80000017 	.word	0x80000017

080009fc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a08:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a0e:	2250      	movs	r2, #80	; 0x50
 8000a10:	4013      	ands	r3, r2
 8000a12:	d141      	bne.n	8000a98 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a18:	2280      	movs	r2, #128	; 0x80
 8000a1a:	0092      	lsls	r2, r2, #2
 8000a1c:	431a      	orrs	r2, r3
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	68da      	ldr	r2, [r3, #12]
 8000a28:	23c0      	movs	r3, #192	; 0xc0
 8000a2a:	011b      	lsls	r3, r3, #4
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	d12e      	bne.n	8000a8e <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	2220      	movs	r2, #32
 8000a34:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d129      	bne.n	8000a8e <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2208      	movs	r2, #8
 8000a42:	4013      	ands	r3, r2
 8000a44:	2b08      	cmp	r3, #8
 8000a46:	d122      	bne.n	8000a8e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	2204      	movs	r2, #4
 8000a50:	4013      	ands	r3, r2
 8000a52:	d110      	bne.n	8000a76 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	685a      	ldr	r2, [r3, #4]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	210c      	movs	r1, #12
 8000a60:	438a      	bics	r2, r1
 8000a62:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a68:	4a10      	ldr	r2, [pc, #64]	; (8000aac <ADC_DMAConvCplt+0xb0>)
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	431a      	orrs	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	655a      	str	r2, [r3, #84]	; 0x54
 8000a74:	e00b      	b.n	8000a8e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a7a:	2220      	movs	r2, #32
 8000a7c:	431a      	orrs	r2, r3
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a86:	2201      	movs	r2, #1
 8000a88:	431a      	orrs	r2, r3
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	0018      	movs	r0, r3
 8000a92:	f7ff fead 	bl	80007f0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000a96:	e005      	b.n	8000aa4 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	0010      	movs	r0, r2
 8000aa2:	4798      	blx	r3
}
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	b004      	add	sp, #16
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	fffffefe 	.word	0xfffffefe

08000ab0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000abc:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f7ff fe9d 	bl	8000800 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b004      	add	sp, #16
 8000acc:	bd80      	pop	{r7, pc}

08000ace <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b084      	sub	sp, #16
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ada:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ae0:	2240      	movs	r2, #64	; 0x40
 8000ae2:	431a      	orrs	r2, r3
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aec:	2204      	movs	r2, #4
 8000aee:	431a      	orrs	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	0018      	movs	r0, r3
 8000af8:	f7ff fe92 	bl	8000820 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b004      	add	sp, #16
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <ADC_DelayMicroSecond+0x34>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	490a      	ldr	r1, [pc, #40]	; (8000b3c <ADC_DelayMicroSecond+0x38>)
 8000b12:	0018      	movs	r0, r3
 8000b14:	f7ff faf8 	bl	8000108 <__udivsi3>
 8000b18:	0003      	movs	r3, r0
 8000b1a:	001a      	movs	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4353      	muls	r3, r2
 8000b20:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8000b22:	e002      	b.n	8000b2a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1f9      	bne.n	8000b24 <ADC_DelayMicroSecond+0x20>
  } 
}
 8000b30:	46c0      	nop			; (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b004      	add	sp, #16
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000004 	.word	0x20000004
 8000b3c:	000f4240 	.word	0x000f4240

08000b40 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	0002      	movs	r2, r0
 8000b48:	1dfb      	adds	r3, r7, #7
 8000b4a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000b4c:	1dfb      	adds	r3, r7, #7
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	001a      	movs	r2, r3
 8000b52:	231f      	movs	r3, #31
 8000b54:	401a      	ands	r2, r3
 8000b56:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <NVIC_EnableIRQ+0x28>)
 8000b58:	2101      	movs	r1, #1
 8000b5a:	4091      	lsls	r1, r2
 8000b5c:	000a      	movs	r2, r1
 8000b5e:	601a      	str	r2, [r3, #0]
}
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b002      	add	sp, #8
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	e000e100 	.word	0xe000e100

08000b6c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	0002      	movs	r2, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b80:	d932      	bls.n	8000be8 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b82:	4a2f      	ldr	r2, [pc, #188]	; (8000c40 <NVIC_SetPriority+0xd4>)
 8000b84:	1dfb      	adds	r3, r7, #7
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	0019      	movs	r1, r3
 8000b8a:	230f      	movs	r3, #15
 8000b8c:	400b      	ands	r3, r1
 8000b8e:	3b08      	subs	r3, #8
 8000b90:	089b      	lsrs	r3, r3, #2
 8000b92:	3306      	adds	r3, #6
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	18d3      	adds	r3, r2, r3
 8000b98:	3304      	adds	r3, #4
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	1dfa      	adds	r2, r7, #7
 8000b9e:	7812      	ldrb	r2, [r2, #0]
 8000ba0:	0011      	movs	r1, r2
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	400a      	ands	r2, r1
 8000ba6:	00d2      	lsls	r2, r2, #3
 8000ba8:	21ff      	movs	r1, #255	; 0xff
 8000baa:	4091      	lsls	r1, r2
 8000bac:	000a      	movs	r2, r1
 8000bae:	43d2      	mvns	r2, r2
 8000bb0:	401a      	ands	r2, r3
 8000bb2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	019b      	lsls	r3, r3, #6
 8000bb8:	22ff      	movs	r2, #255	; 0xff
 8000bba:	401a      	ands	r2, r3
 8000bbc:	1dfb      	adds	r3, r7, #7
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	4003      	ands	r3, r0
 8000bc6:	00db      	lsls	r3, r3, #3
 8000bc8:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bca:	481d      	ldr	r0, [pc, #116]	; (8000c40 <NVIC_SetPriority+0xd4>)
 8000bcc:	1dfb      	adds	r3, r7, #7
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	001c      	movs	r4, r3
 8000bd2:	230f      	movs	r3, #15
 8000bd4:	4023      	ands	r3, r4
 8000bd6:	3b08      	subs	r3, #8
 8000bd8:	089b      	lsrs	r3, r3, #2
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	3306      	adds	r3, #6
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	18c3      	adds	r3, r0, r3
 8000be2:	3304      	adds	r3, #4
 8000be4:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000be6:	e027      	b.n	8000c38 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be8:	4a16      	ldr	r2, [pc, #88]	; (8000c44 <NVIC_SetPriority+0xd8>)
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b25b      	sxtb	r3, r3
 8000bf0:	089b      	lsrs	r3, r3, #2
 8000bf2:	33c0      	adds	r3, #192	; 0xc0
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	589b      	ldr	r3, [r3, r2]
 8000bf8:	1dfa      	adds	r2, r7, #7
 8000bfa:	7812      	ldrb	r2, [r2, #0]
 8000bfc:	0011      	movs	r1, r2
 8000bfe:	2203      	movs	r2, #3
 8000c00:	400a      	ands	r2, r1
 8000c02:	00d2      	lsls	r2, r2, #3
 8000c04:	21ff      	movs	r1, #255	; 0xff
 8000c06:	4091      	lsls	r1, r2
 8000c08:	000a      	movs	r2, r1
 8000c0a:	43d2      	mvns	r2, r2
 8000c0c:	401a      	ands	r2, r3
 8000c0e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	019b      	lsls	r3, r3, #6
 8000c14:	22ff      	movs	r2, #255	; 0xff
 8000c16:	401a      	ands	r2, r3
 8000c18:	1dfb      	adds	r3, r7, #7
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	2303      	movs	r3, #3
 8000c20:	4003      	ands	r3, r0
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c26:	4807      	ldr	r0, [pc, #28]	; (8000c44 <NVIC_SetPriority+0xd8>)
 8000c28:	1dfb      	adds	r3, r7, #7
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	b25b      	sxtb	r3, r3
 8000c2e:	089b      	lsrs	r3, r3, #2
 8000c30:	430a      	orrs	r2, r1
 8000c32:	33c0      	adds	r3, #192	; 0xc0
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	501a      	str	r2, [r3, r0]
}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b003      	add	sp, #12
 8000c3e:	bd90      	pop	{r4, r7, pc}
 8000c40:	e000ed00 	.word	0xe000ed00
 8000c44:	e000e100 	.word	0xe000e100

08000c48 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
 8000c52:	210f      	movs	r1, #15
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	1c02      	adds	r2, r0, #0
 8000c58:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	b25b      	sxtb	r3, r3
 8000c62:	0011      	movs	r1, r2
 8000c64:	0018      	movs	r0, r3
 8000c66:	f7ff ff81 	bl	8000b6c <NVIC_SetPriority>
}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b004      	add	sp, #16
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	0002      	movs	r2, r0
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	b25b      	sxtb	r3, r3
 8000c84:	0018      	movs	r0, r3
 8000c86:	f7ff ff5b 	bl	8000b40 <NVIC_EnableIRQ>
}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b002      	add	sp, #8
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d101      	bne.n	8000ca6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e061      	b.n	8000d6a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a32      	ldr	r2, [pc, #200]	; (8000d74 <HAL_DMA_Init+0xe0>)
 8000cac:	4694      	mov	ip, r2
 8000cae:	4463      	add	r3, ip
 8000cb0:	2114      	movs	r1, #20
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f7ff fa28 	bl	8000108 <__udivsi3>
 8000cb8:	0003      	movs	r3, r0
 8000cba:	009a      	lsls	r2, r3, #2
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a2d      	ldr	r2, [pc, #180]	; (8000d78 <HAL_DMA_Init+0xe4>)
 8000cc4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2225      	movs	r2, #37	; 0x25
 8000cca:	2102      	movs	r1, #2
 8000ccc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	4a28      	ldr	r2, [pc, #160]	; (8000d7c <HAL_DMA_Init+0xe8>)
 8000cda:	4013      	ands	r3, r2
 8000cdc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000ce6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	691b      	ldr	r3, [r3, #16]
 8000cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6a1b      	ldr	r3, [r3, #32]
 8000d04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	01db      	lsls	r3, r3, #7
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d018      	beq.n	8000d52 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000d20:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <HAL_DMA_Init+0xec>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d28:	211c      	movs	r1, #28
 8000d2a:	400b      	ands	r3, r1
 8000d2c:	210f      	movs	r1, #15
 8000d2e:	4099      	lsls	r1, r3
 8000d30:	000b      	movs	r3, r1
 8000d32:	43d9      	mvns	r1, r3
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_DMA_Init+0xec>)
 8000d36:	400a      	ands	r2, r1
 8000d38:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <HAL_DMA_Init+0xec>)
 8000d3c:	6819      	ldr	r1, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	685a      	ldr	r2, [r3, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	201c      	movs	r0, #28
 8000d48:	4003      	ands	r3, r0
 8000d4a:	409a      	lsls	r2, r3
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <HAL_DMA_Init+0xec>)
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2225      	movs	r2, #37	; 0x25
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2224      	movs	r2, #36	; 0x24
 8000d64:	2100      	movs	r1, #0
 8000d66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b004      	add	sp, #16
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	bffdfff8 	.word	0xbffdfff8
 8000d78:	40020000 	.word	0x40020000
 8000d7c:	ffff800f 	.word	0xffff800f
 8000d80:	400200a8 	.word	0x400200a8

08000d84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d92:	2317      	movs	r3, #23
 8000d94:	18fb      	adds	r3, r7, r3
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	2224      	movs	r2, #36	; 0x24
 8000d9e:	5c9b      	ldrb	r3, [r3, r2]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d101      	bne.n	8000da8 <HAL_DMA_Start_IT+0x24>
 8000da4:	2302      	movs	r3, #2
 8000da6:	e04f      	b.n	8000e48 <HAL_DMA_Start_IT+0xc4>
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	2224      	movs	r2, #36	; 0x24
 8000dac:	2101      	movs	r1, #1
 8000dae:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	2225      	movs	r2, #37	; 0x25
 8000db4:	5c9b      	ldrb	r3, [r3, r2]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d13a      	bne.n	8000e32 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2225      	movs	r2, #37	; 0x25
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	438a      	bics	r2, r1
 8000dd8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	68b9      	ldr	r1, [r7, #8]
 8000de0:	68f8      	ldr	r0, [r7, #12]
 8000de2:	f000 f8e3 	bl	8000fac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d008      	beq.n	8000e00 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	210e      	movs	r1, #14
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	e00f      	b.n	8000e20 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2104      	movs	r1, #4
 8000e0c:	438a      	bics	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	210a      	movs	r1, #10
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	e007      	b.n	8000e42 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	2224      	movs	r2, #36	; 0x24
 8000e36:	2100      	movs	r1, #0
 8000e38:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000e3a:	2317      	movs	r3, #23
 8000e3c:	18fb      	adds	r3, r7, r3
 8000e3e:	2202      	movs	r2, #2
 8000e40:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8000e42:	2317      	movs	r3, #23
 8000e44:	18fb      	adds	r3, r7, r3
 8000e46:	781b      	ldrb	r3, [r3, #0]
}
 8000e48:	0018      	movs	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b006      	add	sp, #24
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6c:	221c      	movs	r2, #28
 8000e6e:	4013      	ands	r3, r2
 8000e70:	2204      	movs	r2, #4
 8000e72:	409a      	lsls	r2, r3
 8000e74:	0013      	movs	r3, r2
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	d026      	beq.n	8000eca <HAL_DMA_IRQHandler+0x7a>
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	2204      	movs	r2, #4
 8000e80:	4013      	ands	r3, r2
 8000e82:	d022      	beq.n	8000eca <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2220      	movs	r2, #32
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	d107      	bne.n	8000ea0 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2104      	movs	r1, #4
 8000e9c:	438a      	bics	r2, r1
 8000e9e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea4:	221c      	movs	r2, #28
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	2104      	movs	r1, #4
 8000eae:	4091      	lsls	r1, r2
 8000eb0:	000a      	movs	r2, r1
 8000eb2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d100      	bne.n	8000ebe <HAL_DMA_IRQHandler+0x6e>
 8000ebc:	e071      	b.n	8000fa2 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	0010      	movs	r0, r2
 8000ec6:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8000ec8:	e06b      	b.n	8000fa2 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	221c      	movs	r2, #28
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	409a      	lsls	r2, r3
 8000ed6:	0013      	movs	r3, r2
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	4013      	ands	r3, r2
 8000edc:	d02d      	beq.n	8000f3a <HAL_DMA_IRQHandler+0xea>
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d029      	beq.n	8000f3a <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2220      	movs	r2, #32
 8000eee:	4013      	ands	r3, r2
 8000ef0:	d10b      	bne.n	8000f0a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	210a      	movs	r1, #10
 8000efe:	438a      	bics	r2, r1
 8000f00:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2225      	movs	r2, #37	; 0x25
 8000f06:	2101      	movs	r1, #1
 8000f08:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	221c      	movs	r2, #28
 8000f10:	401a      	ands	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	2102      	movs	r1, #2
 8000f18:	4091      	lsls	r1, r2
 8000f1a:	000a      	movs	r2, r1
 8000f1c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2224      	movs	r2, #36	; 0x24
 8000f22:	2100      	movs	r1, #0
 8000f24:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d039      	beq.n	8000fa2 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	0010      	movs	r0, r2
 8000f36:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f38:	e033      	b.n	8000fa2 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	221c      	movs	r2, #28
 8000f40:	4013      	ands	r3, r2
 8000f42:	2208      	movs	r2, #8
 8000f44:	409a      	lsls	r2, r3
 8000f46:	0013      	movs	r3, r2
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	d02a      	beq.n	8000fa4 <HAL_DMA_IRQHandler+0x154>
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	2208      	movs	r2, #8
 8000f52:	4013      	ands	r3, r2
 8000f54:	d026      	beq.n	8000fa4 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	210e      	movs	r1, #14
 8000f62:	438a      	bics	r2, r1
 8000f64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	221c      	movs	r2, #28
 8000f6c:	401a      	ands	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	2101      	movs	r1, #1
 8000f74:	4091      	lsls	r1, r2
 8000f76:	000a      	movs	r2, r1
 8000f78:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2225      	movs	r2, #37	; 0x25
 8000f84:	2101      	movs	r1, #1
 8000f86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2224      	movs	r2, #36	; 0x24
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d005      	beq.n	8000fa4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	0010      	movs	r0, r2
 8000fa0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	46c0      	nop			; (mov r8, r8)
}
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b004      	add	sp, #16
 8000faa:	bd80      	pop	{r7, pc}

08000fac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	221c      	movs	r2, #28
 8000fc0:	401a      	ands	r2, r3
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	4091      	lsls	r1, r2
 8000fca:	000a      	movs	r2, r1
 8000fcc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	683a      	ldr	r2, [r7, #0]
 8000fd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	2b10      	cmp	r3, #16
 8000fdc:	d108      	bne.n	8000ff0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000fee:	e007      	b.n	8001000 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	68ba      	ldr	r2, [r7, #8]
 8000ff6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	60da      	str	r2, [r3, #12]
}
 8001000:	46c0      	nop			; (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	b004      	add	sp, #16
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800101e:	e155      	b.n	80012cc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2101      	movs	r1, #1
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	4091      	lsls	r1, r2
 800102a:	000a      	movs	r2, r1
 800102c:	4013      	ands	r3, r2
 800102e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d100      	bne.n	8001038 <HAL_GPIO_Init+0x30>
 8001036:	e146      	b.n	80012c6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b02      	cmp	r3, #2
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x40>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b12      	cmp	r3, #18
 8001046:	d123      	bne.n	8001090 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	08da      	lsrs	r2, r3, #3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3208      	adds	r2, #8
 8001050:	0092      	lsls	r2, r2, #2
 8001052:	58d3      	ldr	r3, [r2, r3]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	2207      	movs	r2, #7
 800105a:	4013      	ands	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	220f      	movs	r2, #15
 8001060:	409a      	lsls	r2, r3
 8001062:	0013      	movs	r3, r2
 8001064:	43da      	mvns	r2, r3
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	691a      	ldr	r2, [r3, #16]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	2107      	movs	r1, #7
 8001074:	400b      	ands	r3, r1
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	409a      	lsls	r2, r3
 800107a:	0013      	movs	r3, r2
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	08da      	lsrs	r2, r3, #3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3208      	adds	r2, #8
 800108a:	0092      	lsls	r2, r2, #2
 800108c:	6939      	ldr	r1, [r7, #16]
 800108e:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d00b      	beq.n	80010b0 <HAL_GPIO_Init+0xa8>
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2b02      	cmp	r3, #2
 800109e:	d007      	beq.n	80010b0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010a4:	2b11      	cmp	r3, #17
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b12      	cmp	r3, #18
 80010ae:	d130      	bne.n	8001112 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	2203      	movs	r2, #3
 80010bc:	409a      	lsls	r2, r3
 80010be:	0013      	movs	r3, r2
 80010c0:	43da      	mvns	r2, r3
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	68da      	ldr	r2, [r3, #12]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	409a      	lsls	r2, r3
 80010d2:	0013      	movs	r3, r2
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e6:	2201      	movs	r2, #1
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
 80010ec:	0013      	movs	r3, r2
 80010ee:	43da      	mvns	r2, r3
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	091b      	lsrs	r3, r3, #4
 80010fc:	2201      	movs	r2, #1
 80010fe:	401a      	ands	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	409a      	lsls	r2, r3
 8001104:	0013      	movs	r3, r2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	2203      	movs	r2, #3
 800111e:	409a      	lsls	r2, r3
 8001120:	0013      	movs	r3, r2
 8001122:	43da      	mvns	r2, r3
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2203      	movs	r2, #3
 8001130:	401a      	ands	r2, r3
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	409a      	lsls	r2, r3
 8001138:	0013      	movs	r3, r2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	409a      	lsls	r2, r3
 8001154:	0013      	movs	r3, r2
 8001156:	43da      	mvns	r2, r3
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	409a      	lsls	r2, r3
 8001168:	0013      	movs	r3, r2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	2380      	movs	r3, #128	; 0x80
 800117c:	055b      	lsls	r3, r3, #21
 800117e:	4013      	ands	r3, r2
 8001180:	d100      	bne.n	8001184 <HAL_GPIO_Init+0x17c>
 8001182:	e0a0      	b.n	80012c6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001184:	4b57      	ldr	r3, [pc, #348]	; (80012e4 <HAL_GPIO_Init+0x2dc>)
 8001186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001188:	4b56      	ldr	r3, [pc, #344]	; (80012e4 <HAL_GPIO_Init+0x2dc>)
 800118a:	2101      	movs	r1, #1
 800118c:	430a      	orrs	r2, r1
 800118e:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8001190:	4a55      	ldr	r2, [pc, #340]	; (80012e8 <HAL_GPIO_Init+0x2e0>)
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	3302      	adds	r3, #2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	589b      	ldr	r3, [r3, r2]
 800119c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	2203      	movs	r2, #3
 80011a2:	4013      	ands	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	220f      	movs	r2, #15
 80011a8:	409a      	lsls	r2, r3
 80011aa:	0013      	movs	r3, r2
 80011ac:	43da      	mvns	r2, r3
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	23a0      	movs	r3, #160	; 0xa0
 80011b8:	05db      	lsls	r3, r3, #23
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d01f      	beq.n	80011fe <HAL_GPIO_Init+0x1f6>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4a      	ldr	r2, [pc, #296]	; (80012ec <HAL_GPIO_Init+0x2e4>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d019      	beq.n	80011fa <HAL_GPIO_Init+0x1f2>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a49      	ldr	r2, [pc, #292]	; (80012f0 <HAL_GPIO_Init+0x2e8>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d013      	beq.n	80011f6 <HAL_GPIO_Init+0x1ee>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a48      	ldr	r2, [pc, #288]	; (80012f4 <HAL_GPIO_Init+0x2ec>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d00d      	beq.n	80011f2 <HAL_GPIO_Init+0x1ea>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a47      	ldr	r2, [pc, #284]	; (80012f8 <HAL_GPIO_Init+0x2f0>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d007      	beq.n	80011ee <HAL_GPIO_Init+0x1e6>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a46      	ldr	r2, [pc, #280]	; (80012fc <HAL_GPIO_Init+0x2f4>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d101      	bne.n	80011ea <HAL_GPIO_Init+0x1e2>
 80011e6:	2305      	movs	r3, #5
 80011e8:	e00a      	b.n	8001200 <HAL_GPIO_Init+0x1f8>
 80011ea:	2306      	movs	r3, #6
 80011ec:	e008      	b.n	8001200 <HAL_GPIO_Init+0x1f8>
 80011ee:	2304      	movs	r3, #4
 80011f0:	e006      	b.n	8001200 <HAL_GPIO_Init+0x1f8>
 80011f2:	2303      	movs	r3, #3
 80011f4:	e004      	b.n	8001200 <HAL_GPIO_Init+0x1f8>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e002      	b.n	8001200 <HAL_GPIO_Init+0x1f8>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <HAL_GPIO_Init+0x1f8>
 80011fe:	2300      	movs	r3, #0
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	2103      	movs	r1, #3
 8001204:	400a      	ands	r2, r1
 8001206:	0092      	lsls	r2, r2, #2
 8001208:	4093      	lsls	r3, r2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001210:	4935      	ldr	r1, [pc, #212]	; (80012e8 <HAL_GPIO_Init+0x2e0>)
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	3302      	adds	r3, #2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800121e:	4b38      	ldr	r3, [pc, #224]	; (8001300 <HAL_GPIO_Init+0x2f8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	43da      	mvns	r2, r3
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	025b      	lsls	r3, r3, #9
 8001236:	4013      	ands	r3, r2
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001242:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <HAL_GPIO_Init+0x2f8>)
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001248:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <HAL_GPIO_Init+0x2f8>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	43da      	mvns	r2, r3
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	2380      	movs	r3, #128	; 0x80
 800125e:	029b      	lsls	r3, r3, #10
 8001260:	4013      	ands	r3, r2
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800126c:	4b24      	ldr	r3, [pc, #144]	; (8001300 <HAL_GPIO_Init+0x2f8>)
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001272:	4b23      	ldr	r3, [pc, #140]	; (8001300 <HAL_GPIO_Init+0x2f8>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	43da      	mvns	r2, r3
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	035b      	lsls	r3, r3, #13
 800128a:	4013      	ands	r3, r2
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4313      	orrs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001296:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <HAL_GPIO_Init+0x2f8>)
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800129c:	4b18      	ldr	r3, [pc, #96]	; (8001300 <HAL_GPIO_Init+0x2f8>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	43da      	mvns	r2, r3
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	039b      	lsls	r3, r3, #14
 80012b4:	4013      	ands	r3, r2
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <HAL_GPIO_Init+0x2f8>)
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	3301      	adds	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	40da      	lsrs	r2, r3
 80012d4:	1e13      	subs	r3, r2, #0
 80012d6:	d000      	beq.n	80012da <HAL_GPIO_Init+0x2d2>
 80012d8:	e6a2      	b.n	8001020 <HAL_GPIO_Init+0x18>
  }
}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	46bd      	mov	sp, r7
 80012de:	b006      	add	sp, #24
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010000 	.word	0x40010000
 80012ec:	50000400 	.word	0x50000400
 80012f0:	50000800 	.word	0x50000800
 80012f4:	50000c00 	.word	0x50000c00
 80012f8:	50001000 	.word	0x50001000
 80012fc:	50001c00 	.word	0x50001c00
 8001300:	40010400 	.word	0x40010400

08001304 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	0008      	movs	r0, r1
 800130e:	0011      	movs	r1, r2
 8001310:	1cbb      	adds	r3, r7, #2
 8001312:	1c02      	adds	r2, r0, #0
 8001314:	801a      	strh	r2, [r3, #0]
 8001316:	1c7b      	adds	r3, r7, #1
 8001318:	1c0a      	adds	r2, r1, #0
 800131a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 800131c:	1c7b      	adds	r3, r7, #1
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d004      	beq.n	800132e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001324:	1cbb      	adds	r3, r7, #2
 8001326:	881a      	ldrh	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800132c:	e003      	b.n	8001336 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800132e:	1cbb      	adds	r3, r7, #2
 8001330:	881a      	ldrh	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	46bd      	mov	sp, r7
 800133a:	b002      	add	sp, #8
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	000a      	movs	r2, r1
 8001348:	1cbb      	adds	r3, r7, #2
 800134a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	695a      	ldr	r2, [r3, #20]
 8001350:	1cbb      	adds	r3, r7, #2
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	405a      	eors	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	615a      	str	r2, [r3, #20]
}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	46bd      	mov	sp, r7
 800135e:	b002      	add	sp, #8
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001364:	b5b0      	push	{r4, r5, r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d102      	bne.n	8001378 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	f000 fbbc 	bl	8001af0 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001378:	4bc8      	ldr	r3, [pc, #800]	; (800169c <HAL_RCC_OscConfig+0x338>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	220c      	movs	r2, #12
 800137e:	4013      	ands	r3, r2
 8001380:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001382:	4bc6      	ldr	r3, [pc, #792]	; (800169c <HAL_RCC_OscConfig+0x338>)
 8001384:	68da      	ldr	r2, [r3, #12]
 8001386:	2380      	movs	r3, #128	; 0x80
 8001388:	025b      	lsls	r3, r3, #9
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2201      	movs	r2, #1
 8001394:	4013      	ands	r3, r2
 8001396:	d100      	bne.n	800139a <HAL_RCC_OscConfig+0x36>
 8001398:	e07e      	b.n	8001498 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	2b08      	cmp	r3, #8
 800139e:	d007      	beq.n	80013b0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	2b0c      	cmp	r3, #12
 80013a4:	d112      	bne.n	80013cc <HAL_RCC_OscConfig+0x68>
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	025b      	lsls	r3, r3, #9
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d10d      	bne.n	80013cc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b0:	4bba      	ldr	r3, [pc, #744]	; (800169c <HAL_RCC_OscConfig+0x338>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	029b      	lsls	r3, r3, #10
 80013b8:	4013      	ands	r3, r2
 80013ba:	d100      	bne.n	80013be <HAL_RCC_OscConfig+0x5a>
 80013bc:	e06b      	b.n	8001496 <HAL_RCC_OscConfig+0x132>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d167      	bne.n	8001496 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	f000 fb92 	bl	8001af0 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	2380      	movs	r3, #128	; 0x80
 80013d2:	025b      	lsls	r3, r3, #9
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d107      	bne.n	80013e8 <HAL_RCC_OscConfig+0x84>
 80013d8:	4bb0      	ldr	r3, [pc, #704]	; (800169c <HAL_RCC_OscConfig+0x338>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4baf      	ldr	r3, [pc, #700]	; (800169c <HAL_RCC_OscConfig+0x338>)
 80013de:	2180      	movs	r1, #128	; 0x80
 80013e0:	0249      	lsls	r1, r1, #9
 80013e2:	430a      	orrs	r2, r1
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	e027      	b.n	8001438 <HAL_RCC_OscConfig+0xd4>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	23a0      	movs	r3, #160	; 0xa0
 80013ee:	02db      	lsls	r3, r3, #11
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d10e      	bne.n	8001412 <HAL_RCC_OscConfig+0xae>
 80013f4:	4ba9      	ldr	r3, [pc, #676]	; (800169c <HAL_RCC_OscConfig+0x338>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4ba8      	ldr	r3, [pc, #672]	; (800169c <HAL_RCC_OscConfig+0x338>)
 80013fa:	2180      	movs	r1, #128	; 0x80
 80013fc:	02c9      	lsls	r1, r1, #11
 80013fe:	430a      	orrs	r2, r1
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	4ba6      	ldr	r3, [pc, #664]	; (800169c <HAL_RCC_OscConfig+0x338>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4ba5      	ldr	r3, [pc, #660]	; (800169c <HAL_RCC_OscConfig+0x338>)
 8001408:	2180      	movs	r1, #128	; 0x80
 800140a:	0249      	lsls	r1, r1, #9
 800140c:	430a      	orrs	r2, r1
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	e012      	b.n	8001438 <HAL_RCC_OscConfig+0xd4>
 8001412:	4ba2      	ldr	r3, [pc, #648]	; (800169c <HAL_RCC_OscConfig+0x338>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4ba1      	ldr	r3, [pc, #644]	; (800169c <HAL_RCC_OscConfig+0x338>)
 8001418:	49a1      	ldr	r1, [pc, #644]	; (80016a0 <HAL_RCC_OscConfig+0x33c>)
 800141a:	400a      	ands	r2, r1
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	4b9f      	ldr	r3, [pc, #636]	; (800169c <HAL_RCC_OscConfig+0x338>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	2380      	movs	r3, #128	; 0x80
 8001424:	025b      	lsls	r3, r3, #9
 8001426:	4013      	ands	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4b9b      	ldr	r3, [pc, #620]	; (800169c <HAL_RCC_OscConfig+0x338>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b9a      	ldr	r3, [pc, #616]	; (800169c <HAL_RCC_OscConfig+0x338>)
 8001432:	499c      	ldr	r1, [pc, #624]	; (80016a4 <HAL_RCC_OscConfig+0x340>)
 8001434:	400a      	ands	r2, r1
 8001436:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d015      	beq.n	800146c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7fe ff1a 	bl	8000278 <HAL_GetTick>
 8001444:	0003      	movs	r3, r0
 8001446:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001448:	e009      	b.n	800145e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800144a:	f7fe ff15 	bl	8000278 <HAL_GetTick>
 800144e:	0002      	movs	r2, r0
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b64      	cmp	r3, #100	; 0x64
 8001456:	d902      	bls.n	800145e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	f000 fb49 	bl	8001af0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800145e:	4b8f      	ldr	r3, [pc, #572]	; (800169c <HAL_RCC_OscConfig+0x338>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	029b      	lsls	r3, r3, #10
 8001466:	4013      	ands	r3, r2
 8001468:	d0ef      	beq.n	800144a <HAL_RCC_OscConfig+0xe6>
 800146a:	e015      	b.n	8001498 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7fe ff04 	bl	8000278 <HAL_GetTick>
 8001470:	0003      	movs	r3, r0
 8001472:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001476:	f7fe feff 	bl	8000278 <HAL_GetTick>
 800147a:	0002      	movs	r2, r0
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b64      	cmp	r3, #100	; 0x64
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e333      	b.n	8001af0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001488:	4b84      	ldr	r3, [pc, #528]	; (800169c <HAL_RCC_OscConfig+0x338>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	029b      	lsls	r3, r3, #10
 8001490:	4013      	ands	r3, r2
 8001492:	d1f0      	bne.n	8001476 <HAL_RCC_OscConfig+0x112>
 8001494:	e000      	b.n	8001498 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001496:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2202      	movs	r2, #2
 800149e:	4013      	ands	r3, r2
 80014a0:	d100      	bne.n	80014a4 <HAL_RCC_OscConfig+0x140>
 80014a2:	e098      	b.n	80015d6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	2220      	movs	r2, #32
 80014ae:	4013      	ands	r3, r2
 80014b0:	d009      	beq.n	80014c6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80014b2:	4b7a      	ldr	r3, [pc, #488]	; (800169c <HAL_RCC_OscConfig+0x338>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	4b79      	ldr	r3, [pc, #484]	; (800169c <HAL_RCC_OscConfig+0x338>)
 80014b8:	2120      	movs	r1, #32
 80014ba:	430a      	orrs	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	2220      	movs	r2, #32
 80014c2:	4393      	bics	r3, r2
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	d005      	beq.n	80014d8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	2b0c      	cmp	r3, #12
 80014d0:	d13d      	bne.n	800154e <HAL_RCC_OscConfig+0x1ea>
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d13a      	bne.n	800154e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80014d8:	4b70      	ldr	r3, [pc, #448]	; (800169c <HAL_RCC_OscConfig+0x338>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2204      	movs	r2, #4
 80014de:	4013      	ands	r3, r2
 80014e0:	d004      	beq.n	80014ec <HAL_RCC_OscConfig+0x188>
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e301      	b.n	8001af0 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ec:	4b6b      	ldr	r3, [pc, #428]	; (800169c <HAL_RCC_OscConfig+0x338>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	4a6d      	ldr	r2, [pc, #436]	; (80016a8 <HAL_RCC_OscConfig+0x344>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	0019      	movs	r1, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	021a      	lsls	r2, r3, #8
 80014fc:	4b67      	ldr	r3, [pc, #412]	; (800169c <HAL_RCC_OscConfig+0x338>)
 80014fe:	430a      	orrs	r2, r1
 8001500:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001502:	4b66      	ldr	r3, [pc, #408]	; (800169c <HAL_RCC_OscConfig+0x338>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2209      	movs	r2, #9
 8001508:	4393      	bics	r3, r2
 800150a:	0019      	movs	r1, r3
 800150c:	4b63      	ldr	r3, [pc, #396]	; (800169c <HAL_RCC_OscConfig+0x338>)
 800150e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001510:	430a      	orrs	r2, r1
 8001512:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001514:	f000 fc20 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8001518:	0001      	movs	r1, r0
 800151a:	4b60      	ldr	r3, [pc, #384]	; (800169c <HAL_RCC_OscConfig+0x338>)
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	091b      	lsrs	r3, r3, #4
 8001520:	220f      	movs	r2, #15
 8001522:	4013      	ands	r3, r2
 8001524:	4a61      	ldr	r2, [pc, #388]	; (80016ac <HAL_RCC_OscConfig+0x348>)
 8001526:	5cd3      	ldrb	r3, [r2, r3]
 8001528:	000a      	movs	r2, r1
 800152a:	40da      	lsrs	r2, r3
 800152c:	4b60      	ldr	r3, [pc, #384]	; (80016b0 <HAL_RCC_OscConfig+0x34c>)
 800152e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001530:	2513      	movs	r5, #19
 8001532:	197c      	adds	r4, r7, r5
 8001534:	2000      	movs	r0, #0
 8001536:	f003 fc45 	bl	8004dc4 <HAL_InitTick>
 800153a:	0003      	movs	r3, r0
 800153c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800153e:	197b      	adds	r3, r7, r5
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d047      	beq.n	80015d6 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001546:	2313      	movs	r3, #19
 8001548:	18fb      	adds	r3, r7, r3
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	e2d0      	b.n	8001af0 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	2b00      	cmp	r3, #0
 8001552:	d027      	beq.n	80015a4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001554:	4b51      	ldr	r3, [pc, #324]	; (800169c <HAL_RCC_OscConfig+0x338>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2209      	movs	r2, #9
 800155a:	4393      	bics	r3, r2
 800155c:	0019      	movs	r1, r3
 800155e:	4b4f      	ldr	r3, [pc, #316]	; (800169c <HAL_RCC_OscConfig+0x338>)
 8001560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001562:	430a      	orrs	r2, r1
 8001564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001566:	f7fe fe87 	bl	8000278 <HAL_GetTick>
 800156a:	0003      	movs	r3, r0
 800156c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001570:	f7fe fe82 	bl	8000278 <HAL_GetTick>
 8001574:	0002      	movs	r2, r0
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e2b6      	b.n	8001af0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001582:	4b46      	ldr	r3, [pc, #280]	; (800169c <HAL_RCC_OscConfig+0x338>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2204      	movs	r2, #4
 8001588:	4013      	ands	r3, r2
 800158a:	d0f1      	beq.n	8001570 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158c:	4b43      	ldr	r3, [pc, #268]	; (800169c <HAL_RCC_OscConfig+0x338>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	4a45      	ldr	r2, [pc, #276]	; (80016a8 <HAL_RCC_OscConfig+0x344>)
 8001592:	4013      	ands	r3, r2
 8001594:	0019      	movs	r1, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	021a      	lsls	r2, r3, #8
 800159c:	4b3f      	ldr	r3, [pc, #252]	; (800169c <HAL_RCC_OscConfig+0x338>)
 800159e:	430a      	orrs	r2, r1
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	e018      	b.n	80015d6 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015a4:	4b3d      	ldr	r3, [pc, #244]	; (800169c <HAL_RCC_OscConfig+0x338>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b3c      	ldr	r3, [pc, #240]	; (800169c <HAL_RCC_OscConfig+0x338>)
 80015aa:	2101      	movs	r1, #1
 80015ac:	438a      	bics	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7fe fe62 	bl	8000278 <HAL_GetTick>
 80015b4:	0003      	movs	r3, r0
 80015b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ba:	f7fe fe5d 	bl	8000278 <HAL_GetTick>
 80015be:	0002      	movs	r2, r0
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e291      	b.n	8001af0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015cc:	4b33      	ldr	r3, [pc, #204]	; (800169c <HAL_RCC_OscConfig+0x338>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2204      	movs	r2, #4
 80015d2:	4013      	ands	r3, r2
 80015d4:	d1f1      	bne.n	80015ba <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2210      	movs	r2, #16
 80015dc:	4013      	ands	r3, r2
 80015de:	d100      	bne.n	80015e2 <HAL_RCC_OscConfig+0x27e>
 80015e0:	e09f      	b.n	8001722 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d13f      	bne.n	8001668 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015e8:	4b2c      	ldr	r3, [pc, #176]	; (800169c <HAL_RCC_OscConfig+0x338>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4013      	ands	r3, r2
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_OscConfig+0x29c>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e277      	b.n	8001af0 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001600:	4b26      	ldr	r3, [pc, #152]	; (800169c <HAL_RCC_OscConfig+0x338>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	4a2b      	ldr	r2, [pc, #172]	; (80016b4 <HAL_RCC_OscConfig+0x350>)
 8001606:	4013      	ands	r3, r2
 8001608:	0019      	movs	r1, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800160e:	4b23      	ldr	r3, [pc, #140]	; (800169c <HAL_RCC_OscConfig+0x338>)
 8001610:	430a      	orrs	r2, r1
 8001612:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001614:	4b21      	ldr	r3, [pc, #132]	; (800169c <HAL_RCC_OscConfig+0x338>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	021b      	lsls	r3, r3, #8
 800161a:	0a19      	lsrs	r1, r3, #8
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	061a      	lsls	r2, r3, #24
 8001622:	4b1e      	ldr	r3, [pc, #120]	; (800169c <HAL_RCC_OscConfig+0x338>)
 8001624:	430a      	orrs	r2, r1
 8001626:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	0b5b      	lsrs	r3, r3, #13
 800162e:	3301      	adds	r3, #1
 8001630:	2280      	movs	r2, #128	; 0x80
 8001632:	0212      	lsls	r2, r2, #8
 8001634:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001636:	4b19      	ldr	r3, [pc, #100]	; (800169c <HAL_RCC_OscConfig+0x338>)
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	091b      	lsrs	r3, r3, #4
 800163c:	210f      	movs	r1, #15
 800163e:	400b      	ands	r3, r1
 8001640:	491a      	ldr	r1, [pc, #104]	; (80016ac <HAL_RCC_OscConfig+0x348>)
 8001642:	5ccb      	ldrb	r3, [r1, r3]
 8001644:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001646:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <HAL_RCC_OscConfig+0x34c>)
 8001648:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800164a:	2513      	movs	r5, #19
 800164c:	197c      	adds	r4, r7, r5
 800164e:	2000      	movs	r0, #0
 8001650:	f003 fbb8 	bl	8004dc4 <HAL_InitTick>
 8001654:	0003      	movs	r3, r0
 8001656:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001658:	197b      	adds	r3, r7, r5
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d060      	beq.n	8001722 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8001660:	2313      	movs	r3, #19
 8001662:	18fb      	adds	r3, r7, r3
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	e243      	b.n	8001af0 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d03e      	beq.n	80016ee <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001670:	4b0a      	ldr	r3, [pc, #40]	; (800169c <HAL_RCC_OscConfig+0x338>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <HAL_RCC_OscConfig+0x338>)
 8001676:	2180      	movs	r1, #128	; 0x80
 8001678:	0049      	lsls	r1, r1, #1
 800167a:	430a      	orrs	r2, r1
 800167c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167e:	f7fe fdfb 	bl	8000278 <HAL_GetTick>
 8001682:	0003      	movs	r3, r0
 8001684:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001686:	e017      	b.n	80016b8 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001688:	f7fe fdf6 	bl	8000278 <HAL_GetTick>
 800168c:	0002      	movs	r2, r0
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d910      	bls.n	80016b8 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e22a      	b.n	8001af0 <HAL_RCC_OscConfig+0x78c>
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	40021000 	.word	0x40021000
 80016a0:	fffeffff 	.word	0xfffeffff
 80016a4:	fffbffff 	.word	0xfffbffff
 80016a8:	ffffe0ff 	.word	0xffffe0ff
 80016ac:	080050f4 	.word	0x080050f4
 80016b0:	20000004 	.word	0x20000004
 80016b4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016b8:	4bc6      	ldr	r3, [pc, #792]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4013      	ands	r3, r2
 80016c2:	d0e1      	beq.n	8001688 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016c4:	4bc3      	ldr	r3, [pc, #780]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	4ac3      	ldr	r2, [pc, #780]	; (80019d8 <HAL_RCC_OscConfig+0x674>)
 80016ca:	4013      	ands	r3, r2
 80016cc:	0019      	movs	r1, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016d2:	4bc0      	ldr	r3, [pc, #768]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 80016d4:	430a      	orrs	r2, r1
 80016d6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016d8:	4bbe      	ldr	r3, [pc, #760]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	021b      	lsls	r3, r3, #8
 80016de:	0a19      	lsrs	r1, r3, #8
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	061a      	lsls	r2, r3, #24
 80016e6:	4bbb      	ldr	r3, [pc, #748]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 80016e8:	430a      	orrs	r2, r1
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	e019      	b.n	8001722 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016ee:	4bb9      	ldr	r3, [pc, #740]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	4bb8      	ldr	r3, [pc, #736]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 80016f4:	49b9      	ldr	r1, [pc, #740]	; (80019dc <HAL_RCC_OscConfig+0x678>)
 80016f6:	400a      	ands	r2, r1
 80016f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fa:	f7fe fdbd 	bl	8000278 <HAL_GetTick>
 80016fe:	0003      	movs	r3, r0
 8001700:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001704:	f7fe fdb8 	bl	8000278 <HAL_GetTick>
 8001708:	0002      	movs	r2, r0
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e1ec      	b.n	8001af0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001716:	4baf      	ldr	r3, [pc, #700]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	2380      	movs	r3, #128	; 0x80
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4013      	ands	r3, r2
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2208      	movs	r2, #8
 8001728:	4013      	ands	r3, r2
 800172a:	d036      	beq.n	800179a <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d019      	beq.n	8001768 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001734:	4ba7      	ldr	r3, [pc, #668]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 8001736:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001738:	4ba6      	ldr	r3, [pc, #664]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 800173a:	2101      	movs	r1, #1
 800173c:	430a      	orrs	r2, r1
 800173e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001740:	f7fe fd9a 	bl	8000278 <HAL_GetTick>
 8001744:	0003      	movs	r3, r0
 8001746:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800174a:	f7fe fd95 	bl	8000278 <HAL_GetTick>
 800174e:	0002      	movs	r2, r0
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e1c9      	b.n	8001af0 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800175c:	4b9d      	ldr	r3, [pc, #628]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 800175e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001760:	2202      	movs	r2, #2
 8001762:	4013      	ands	r3, r2
 8001764:	d0f1      	beq.n	800174a <HAL_RCC_OscConfig+0x3e6>
 8001766:	e018      	b.n	800179a <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001768:	4b9a      	ldr	r3, [pc, #616]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 800176a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800176c:	4b99      	ldr	r3, [pc, #612]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 800176e:	2101      	movs	r1, #1
 8001770:	438a      	bics	r2, r1
 8001772:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001774:	f7fe fd80 	bl	8000278 <HAL_GetTick>
 8001778:	0003      	movs	r3, r0
 800177a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800177e:	f7fe fd7b 	bl	8000278 <HAL_GetTick>
 8001782:	0002      	movs	r2, r0
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e1af      	b.n	8001af0 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001790:	4b90      	ldr	r3, [pc, #576]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 8001792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001794:	2202      	movs	r2, #2
 8001796:	4013      	ands	r3, r2
 8001798:	d1f1      	bne.n	800177e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2204      	movs	r2, #4
 80017a0:	4013      	ands	r3, r2
 80017a2:	d100      	bne.n	80017a6 <HAL_RCC_OscConfig+0x442>
 80017a4:	e0af      	b.n	8001906 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017a6:	2323      	movs	r3, #35	; 0x23
 80017a8:	18fb      	adds	r3, r7, r3
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ae:	4b89      	ldr	r3, [pc, #548]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 80017b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	055b      	lsls	r3, r3, #21
 80017b6:	4013      	ands	r3, r2
 80017b8:	d10a      	bne.n	80017d0 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ba:	4b86      	ldr	r3, [pc, #536]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 80017bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017be:	4b85      	ldr	r3, [pc, #532]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 80017c0:	2180      	movs	r1, #128	; 0x80
 80017c2:	0549      	lsls	r1, r1, #21
 80017c4:	430a      	orrs	r2, r1
 80017c6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80017c8:	2323      	movs	r3, #35	; 0x23
 80017ca:	18fb      	adds	r3, r7, r3
 80017cc:	2201      	movs	r2, #1
 80017ce:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d0:	4b83      	ldr	r3, [pc, #524]	; (80019e0 <HAL_RCC_OscConfig+0x67c>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	2380      	movs	r3, #128	; 0x80
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4013      	ands	r3, r2
 80017da:	d11a      	bne.n	8001812 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017dc:	4b80      	ldr	r3, [pc, #512]	; (80019e0 <HAL_RCC_OscConfig+0x67c>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b7f      	ldr	r3, [pc, #508]	; (80019e0 <HAL_RCC_OscConfig+0x67c>)
 80017e2:	2180      	movs	r1, #128	; 0x80
 80017e4:	0049      	lsls	r1, r1, #1
 80017e6:	430a      	orrs	r2, r1
 80017e8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ea:	f7fe fd45 	bl	8000278 <HAL_GetTick>
 80017ee:	0003      	movs	r3, r0
 80017f0:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017f4:	f7fe fd40 	bl	8000278 <HAL_GetTick>
 80017f8:	0002      	movs	r2, r0
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b64      	cmp	r3, #100	; 0x64
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e174      	b.n	8001af0 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001806:	4b76      	ldr	r3, [pc, #472]	; (80019e0 <HAL_RCC_OscConfig+0x67c>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4013      	ands	r3, r2
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	429a      	cmp	r2, r3
 800181c:	d107      	bne.n	800182e <HAL_RCC_OscConfig+0x4ca>
 800181e:	4b6d      	ldr	r3, [pc, #436]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 8001820:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001822:	4b6c      	ldr	r3, [pc, #432]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 8001824:	2180      	movs	r1, #128	; 0x80
 8001826:	0049      	lsls	r1, r1, #1
 8001828:	430a      	orrs	r2, r1
 800182a:	651a      	str	r2, [r3, #80]	; 0x50
 800182c:	e031      	b.n	8001892 <HAL_RCC_OscConfig+0x52e>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10c      	bne.n	8001850 <HAL_RCC_OscConfig+0x4ec>
 8001836:	4b67      	ldr	r3, [pc, #412]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 8001838:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800183a:	4b66      	ldr	r3, [pc, #408]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 800183c:	4967      	ldr	r1, [pc, #412]	; (80019dc <HAL_RCC_OscConfig+0x678>)
 800183e:	400a      	ands	r2, r1
 8001840:	651a      	str	r2, [r3, #80]	; 0x50
 8001842:	4b64      	ldr	r3, [pc, #400]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 8001844:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001846:	4b63      	ldr	r3, [pc, #396]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 8001848:	4966      	ldr	r1, [pc, #408]	; (80019e4 <HAL_RCC_OscConfig+0x680>)
 800184a:	400a      	ands	r2, r1
 800184c:	651a      	str	r2, [r3, #80]	; 0x50
 800184e:	e020      	b.n	8001892 <HAL_RCC_OscConfig+0x52e>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	23a0      	movs	r3, #160	; 0xa0
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	429a      	cmp	r2, r3
 800185a:	d10e      	bne.n	800187a <HAL_RCC_OscConfig+0x516>
 800185c:	4b5d      	ldr	r3, [pc, #372]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 800185e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001860:	4b5c      	ldr	r3, [pc, #368]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 8001862:	2180      	movs	r1, #128	; 0x80
 8001864:	00c9      	lsls	r1, r1, #3
 8001866:	430a      	orrs	r2, r1
 8001868:	651a      	str	r2, [r3, #80]	; 0x50
 800186a:	4b5a      	ldr	r3, [pc, #360]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 800186c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800186e:	4b59      	ldr	r3, [pc, #356]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 8001870:	2180      	movs	r1, #128	; 0x80
 8001872:	0049      	lsls	r1, r1, #1
 8001874:	430a      	orrs	r2, r1
 8001876:	651a      	str	r2, [r3, #80]	; 0x50
 8001878:	e00b      	b.n	8001892 <HAL_RCC_OscConfig+0x52e>
 800187a:	4b56      	ldr	r3, [pc, #344]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 800187c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800187e:	4b55      	ldr	r3, [pc, #340]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 8001880:	4956      	ldr	r1, [pc, #344]	; (80019dc <HAL_RCC_OscConfig+0x678>)
 8001882:	400a      	ands	r2, r1
 8001884:	651a      	str	r2, [r3, #80]	; 0x50
 8001886:	4b53      	ldr	r3, [pc, #332]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 8001888:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800188a:	4b52      	ldr	r3, [pc, #328]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 800188c:	4955      	ldr	r1, [pc, #340]	; (80019e4 <HAL_RCC_OscConfig+0x680>)
 800188e:	400a      	ands	r2, r1
 8001890:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d015      	beq.n	80018c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189a:	f7fe fced 	bl	8000278 <HAL_GetTick>
 800189e:	0003      	movs	r3, r0
 80018a0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018a2:	e009      	b.n	80018b8 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a4:	f7fe fce8 	bl	8000278 <HAL_GetTick>
 80018a8:	0002      	movs	r2, r0
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	4a4e      	ldr	r2, [pc, #312]	; (80019e8 <HAL_RCC_OscConfig+0x684>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e11b      	b.n	8001af0 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018b8:	4b46      	ldr	r3, [pc, #280]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 80018ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4013      	ands	r3, r2
 80018c2:	d0ef      	beq.n	80018a4 <HAL_RCC_OscConfig+0x540>
 80018c4:	e014      	b.n	80018f0 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c6:	f7fe fcd7 	bl	8000278 <HAL_GetTick>
 80018ca:	0003      	movs	r3, r0
 80018cc:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018ce:	e009      	b.n	80018e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d0:	f7fe fcd2 	bl	8000278 <HAL_GetTick>
 80018d4:	0002      	movs	r2, r0
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	4a43      	ldr	r2, [pc, #268]	; (80019e8 <HAL_RCC_OscConfig+0x684>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e105      	b.n	8001af0 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018e4:	4b3b      	ldr	r3, [pc, #236]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 80018e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4013      	ands	r3, r2
 80018ee:	d1ef      	bne.n	80018d0 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018f0:	2323      	movs	r3, #35	; 0x23
 80018f2:	18fb      	adds	r3, r7, r3
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d105      	bne.n	8001906 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018fa:	4b36      	ldr	r3, [pc, #216]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 80018fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018fe:	4b35      	ldr	r3, [pc, #212]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 8001900:	493a      	ldr	r1, [pc, #232]	; (80019ec <HAL_RCC_OscConfig+0x688>)
 8001902:	400a      	ands	r2, r1
 8001904:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2220      	movs	r2, #32
 800190c:	4013      	ands	r3, r2
 800190e:	d049      	beq.n	80019a4 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d026      	beq.n	8001966 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001918:	4b2e      	ldr	r3, [pc, #184]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	4b2d      	ldr	r3, [pc, #180]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 800191e:	2101      	movs	r1, #1
 8001920:	430a      	orrs	r2, r1
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	4b2b      	ldr	r3, [pc, #172]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 8001926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001928:	4b2a      	ldr	r3, [pc, #168]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 800192a:	2101      	movs	r1, #1
 800192c:	430a      	orrs	r2, r1
 800192e:	635a      	str	r2, [r3, #52]	; 0x34
 8001930:	4b2f      	ldr	r3, [pc, #188]	; (80019f0 <HAL_RCC_OscConfig+0x68c>)
 8001932:	6a1a      	ldr	r2, [r3, #32]
 8001934:	4b2e      	ldr	r3, [pc, #184]	; (80019f0 <HAL_RCC_OscConfig+0x68c>)
 8001936:	2180      	movs	r1, #128	; 0x80
 8001938:	0189      	lsls	r1, r1, #6
 800193a:	430a      	orrs	r2, r1
 800193c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193e:	f7fe fc9b 	bl	8000278 <HAL_GetTick>
 8001942:	0003      	movs	r3, r0
 8001944:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001948:	f7fe fc96 	bl	8000278 <HAL_GetTick>
 800194c:	0002      	movs	r2, r0
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e0ca      	b.n	8001af0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800195a:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2202      	movs	r2, #2
 8001960:	4013      	ands	r3, r2
 8001962:	d0f1      	beq.n	8001948 <HAL_RCC_OscConfig+0x5e4>
 8001964:	e01e      	b.n	80019a4 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001966:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 800196c:	2101      	movs	r1, #1
 800196e:	438a      	bics	r2, r1
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <HAL_RCC_OscConfig+0x68c>)
 8001974:	6a1a      	ldr	r2, [r3, #32]
 8001976:	4b1e      	ldr	r3, [pc, #120]	; (80019f0 <HAL_RCC_OscConfig+0x68c>)
 8001978:	491e      	ldr	r1, [pc, #120]	; (80019f4 <HAL_RCC_OscConfig+0x690>)
 800197a:	400a      	ands	r2, r1
 800197c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197e:	f7fe fc7b 	bl	8000278 <HAL_GetTick>
 8001982:	0003      	movs	r3, r0
 8001984:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001988:	f7fe fc76 	bl	8000278 <HAL_GetTick>
 800198c:	0002      	movs	r2, r0
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e0aa      	b.n	8001af0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	2202      	movs	r2, #2
 80019a0:	4013      	ands	r3, r2
 80019a2:	d1f1      	bne.n	8001988 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d100      	bne.n	80019ae <HAL_RCC_OscConfig+0x64a>
 80019ac:	e09f      	b.n	8001aee <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	2b0c      	cmp	r3, #12
 80019b2:	d100      	bne.n	80019b6 <HAL_RCC_OscConfig+0x652>
 80019b4:	e078      	b.n	8001aa8 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d159      	bne.n	8001a72 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <HAL_RCC_OscConfig+0x670>)
 80019c4:	490c      	ldr	r1, [pc, #48]	; (80019f8 <HAL_RCC_OscConfig+0x694>)
 80019c6:	400a      	ands	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ca:	f7fe fc55 	bl	8000278 <HAL_GetTick>
 80019ce:	0003      	movs	r3, r0
 80019d0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019d2:	e01c      	b.n	8001a0e <HAL_RCC_OscConfig+0x6aa>
 80019d4:	40021000 	.word	0x40021000
 80019d8:	ffff1fff 	.word	0xffff1fff
 80019dc:	fffffeff 	.word	0xfffffeff
 80019e0:	40007000 	.word	0x40007000
 80019e4:	fffffbff 	.word	0xfffffbff
 80019e8:	00001388 	.word	0x00001388
 80019ec:	efffffff 	.word	0xefffffff
 80019f0:	40010000 	.word	0x40010000
 80019f4:	ffffdfff 	.word	0xffffdfff
 80019f8:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fc:	f7fe fc3c 	bl	8000278 <HAL_GetTick>
 8001a00:	0002      	movs	r2, r0
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e070      	b.n	8001af0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a0e:	4b3a      	ldr	r3, [pc, #232]	; (8001af8 <HAL_RCC_OscConfig+0x794>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	2380      	movs	r3, #128	; 0x80
 8001a14:	049b      	lsls	r3, r3, #18
 8001a16:	4013      	ands	r3, r2
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a1a:	4b37      	ldr	r3, [pc, #220]	; (8001af8 <HAL_RCC_OscConfig+0x794>)
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	4a37      	ldr	r2, [pc, #220]	; (8001afc <HAL_RCC_OscConfig+0x798>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	0019      	movs	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a32:	431a      	orrs	r2, r3
 8001a34:	4b30      	ldr	r3, [pc, #192]	; (8001af8 <HAL_RCC_OscConfig+0x794>)
 8001a36:	430a      	orrs	r2, r1
 8001a38:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a3a:	4b2f      	ldr	r3, [pc, #188]	; (8001af8 <HAL_RCC_OscConfig+0x794>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	4b2e      	ldr	r3, [pc, #184]	; (8001af8 <HAL_RCC_OscConfig+0x794>)
 8001a40:	2180      	movs	r1, #128	; 0x80
 8001a42:	0449      	lsls	r1, r1, #17
 8001a44:	430a      	orrs	r2, r1
 8001a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7fe fc16 	bl	8000278 <HAL_GetTick>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a52:	f7fe fc11 	bl	8000278 <HAL_GetTick>
 8001a56:	0002      	movs	r2, r0
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e045      	b.n	8001af0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a64:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <HAL_RCC_OscConfig+0x794>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	049b      	lsls	r3, r3, #18
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d0f0      	beq.n	8001a52 <HAL_RCC_OscConfig+0x6ee>
 8001a70:	e03d      	b.n	8001aee <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a72:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <HAL_RCC_OscConfig+0x794>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <HAL_RCC_OscConfig+0x794>)
 8001a78:	4921      	ldr	r1, [pc, #132]	; (8001b00 <HAL_RCC_OscConfig+0x79c>)
 8001a7a:	400a      	ands	r2, r1
 8001a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7e:	f7fe fbfb 	bl	8000278 <HAL_GetTick>
 8001a82:	0003      	movs	r3, r0
 8001a84:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a88:	f7fe fbf6 	bl	8000278 <HAL_GetTick>
 8001a8c:	0002      	movs	r2, r0
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e02a      	b.n	8001af0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a9a:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <HAL_RCC_OscConfig+0x794>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	049b      	lsls	r3, r3, #18
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d1f0      	bne.n	8001a88 <HAL_RCC_OscConfig+0x724>
 8001aa6:	e022      	b.n	8001aee <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d101      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e01d      	b.n	8001af0 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ab4:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <HAL_RCC_OscConfig+0x794>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	025b      	lsls	r3, r3, #9
 8001ac0:	401a      	ands	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d10f      	bne.n	8001aea <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	23f0      	movs	r3, #240	; 0xf0
 8001ace:	039b      	lsls	r3, r3, #14
 8001ad0:	401a      	ands	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d107      	bne.n	8001aea <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	23c0      	movs	r3, #192	; 0xc0
 8001ade:	041b      	lsls	r3, r3, #16
 8001ae0:	401a      	ands	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d001      	beq.n	8001aee <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	0018      	movs	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	b00a      	add	sp, #40	; 0x28
 8001af6:	bdb0      	pop	{r4, r5, r7, pc}
 8001af8:	40021000 	.word	0x40021000
 8001afc:	ff02ffff 	.word	0xff02ffff
 8001b00:	feffffff 	.word	0xfeffffff

08001b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b04:	b5b0      	push	{r4, r5, r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e10d      	b.n	8001d34 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b18:	4b88      	ldr	r3, [pc, #544]	; (8001d3c <HAL_RCC_ClockConfig+0x238>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	4013      	ands	r3, r2
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d911      	bls.n	8001b4a <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b26:	4b85      	ldr	r3, [pc, #532]	; (8001d3c <HAL_RCC_ClockConfig+0x238>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	4393      	bics	r3, r2
 8001b2e:	0019      	movs	r1, r3
 8001b30:	4b82      	ldr	r3, [pc, #520]	; (8001d3c <HAL_RCC_ClockConfig+0x238>)
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b38:	4b80      	ldr	r3, [pc, #512]	; (8001d3c <HAL_RCC_ClockConfig+0x238>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	4013      	ands	r3, r2
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d001      	beq.n	8001b4a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e0f4      	b.n	8001d34 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	4013      	ands	r3, r2
 8001b52:	d009      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b54:	4b7a      	ldr	r3, [pc, #488]	; (8001d40 <HAL_RCC_ClockConfig+0x23c>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	22f0      	movs	r2, #240	; 0xf0
 8001b5a:	4393      	bics	r3, r2
 8001b5c:	0019      	movs	r1, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	4b77      	ldr	r3, [pc, #476]	; (8001d40 <HAL_RCC_ClockConfig+0x23c>)
 8001b64:	430a      	orrs	r2, r1
 8001b66:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d100      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x70>
 8001b72:	e089      	b.n	8001c88 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d107      	bne.n	8001b8c <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b7c:	4b70      	ldr	r3, [pc, #448]	; (8001d40 <HAL_RCC_ClockConfig+0x23c>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	029b      	lsls	r3, r3, #10
 8001b84:	4013      	ands	r3, r2
 8001b86:	d120      	bne.n	8001bca <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0d3      	b.n	8001d34 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d107      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b94:	4b6a      	ldr	r3, [pc, #424]	; (8001d40 <HAL_RCC_ClockConfig+0x23c>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	049b      	lsls	r3, r3, #18
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d114      	bne.n	8001bca <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0c7      	b.n	8001d34 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d106      	bne.n	8001bba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bac:	4b64      	ldr	r3, [pc, #400]	; (8001d40 <HAL_RCC_ClockConfig+0x23c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2204      	movs	r2, #4
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d109      	bne.n	8001bca <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e0bc      	b.n	8001d34 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001bba:	4b61      	ldr	r3, [pc, #388]	; (8001d40 <HAL_RCC_ClockConfig+0x23c>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d101      	bne.n	8001bca <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e0b4      	b.n	8001d34 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bca:	4b5d      	ldr	r3, [pc, #372]	; (8001d40 <HAL_RCC_ClockConfig+0x23c>)
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	2203      	movs	r2, #3
 8001bd0:	4393      	bics	r3, r2
 8001bd2:	0019      	movs	r1, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	4b59      	ldr	r3, [pc, #356]	; (8001d40 <HAL_RCC_ClockConfig+0x23c>)
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bde:	f7fe fb4b 	bl	8000278 <HAL_GetTick>
 8001be2:	0003      	movs	r3, r0
 8001be4:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d111      	bne.n	8001c12 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bee:	e009      	b.n	8001c04 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf0:	f7fe fb42 	bl	8000278 <HAL_GetTick>
 8001bf4:	0002      	movs	r2, r0
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	4a52      	ldr	r2, [pc, #328]	; (8001d44 <HAL_RCC_ClockConfig+0x240>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e097      	b.n	8001d34 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c04:	4b4e      	ldr	r3, [pc, #312]	; (8001d40 <HAL_RCC_ClockConfig+0x23c>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	220c      	movs	r2, #12
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	d1ef      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0xec>
 8001c10:	e03a      	b.n	8001c88 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d111      	bne.n	8001c3e <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c1a:	e009      	b.n	8001c30 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1c:	f7fe fb2c 	bl	8000278 <HAL_GetTick>
 8001c20:	0002      	movs	r2, r0
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	4a47      	ldr	r2, [pc, #284]	; (8001d44 <HAL_RCC_ClockConfig+0x240>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e081      	b.n	8001d34 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c30:	4b43      	ldr	r3, [pc, #268]	; (8001d40 <HAL_RCC_ClockConfig+0x23c>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	220c      	movs	r2, #12
 8001c36:	4013      	ands	r3, r2
 8001c38:	2b0c      	cmp	r3, #12
 8001c3a:	d1ef      	bne.n	8001c1c <HAL_RCC_ClockConfig+0x118>
 8001c3c:	e024      	b.n	8001c88 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d11b      	bne.n	8001c7e <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c46:	e009      	b.n	8001c5c <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c48:	f7fe fb16 	bl	8000278 <HAL_GetTick>
 8001c4c:	0002      	movs	r2, r0
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	4a3c      	ldr	r2, [pc, #240]	; (8001d44 <HAL_RCC_ClockConfig+0x240>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e06b      	b.n	8001d34 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c5c:	4b38      	ldr	r3, [pc, #224]	; (8001d40 <HAL_RCC_ClockConfig+0x23c>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	220c      	movs	r2, #12
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d1ef      	bne.n	8001c48 <HAL_RCC_ClockConfig+0x144>
 8001c68:	e00e      	b.n	8001c88 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6a:	f7fe fb05 	bl	8000278 <HAL_GetTick>
 8001c6e:	0002      	movs	r2, r0
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	4a33      	ldr	r2, [pc, #204]	; (8001d44 <HAL_RCC_ClockConfig+0x240>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e05a      	b.n	8001d34 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c7e:	4b30      	ldr	r3, [pc, #192]	; (8001d40 <HAL_RCC_ClockConfig+0x23c>)
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	220c      	movs	r2, #12
 8001c84:	4013      	ands	r3, r2
 8001c86:	d1f0      	bne.n	8001c6a <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c88:	4b2c      	ldr	r3, [pc, #176]	; (8001d3c <HAL_RCC_ClockConfig+0x238>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	4013      	ands	r3, r2
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d211      	bcs.n	8001cba <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c96:	4b29      	ldr	r3, [pc, #164]	; (8001d3c <HAL_RCC_ClockConfig+0x238>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	4393      	bics	r3, r2
 8001c9e:	0019      	movs	r1, r3
 8001ca0:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <HAL_RCC_ClockConfig+0x238>)
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca8:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <HAL_RCC_ClockConfig+0x238>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2201      	movs	r2, #1
 8001cae:	4013      	ands	r3, r2
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d001      	beq.n	8001cba <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e03c      	b.n	8001d34 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2204      	movs	r2, #4
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d009      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cc4:	4b1e      	ldr	r3, [pc, #120]	; (8001d40 <HAL_RCC_ClockConfig+0x23c>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	4a1f      	ldr	r2, [pc, #124]	; (8001d48 <HAL_RCC_ClockConfig+0x244>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	0019      	movs	r1, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <HAL_RCC_ClockConfig+0x23c>)
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2208      	movs	r2, #8
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d00a      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ce2:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <HAL_RCC_ClockConfig+0x23c>)
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	4a19      	ldr	r2, [pc, #100]	; (8001d4c <HAL_RCC_ClockConfig+0x248>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	0019      	movs	r1, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	00da      	lsls	r2, r3, #3
 8001cf2:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <HAL_RCC_ClockConfig+0x23c>)
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cf8:	f000 f82e 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8001cfc:	0001      	movs	r1, r0
 8001cfe:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <HAL_RCC_ClockConfig+0x23c>)
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	091b      	lsrs	r3, r3, #4
 8001d04:	220f      	movs	r2, #15
 8001d06:	4013      	ands	r3, r2
 8001d08:	4a11      	ldr	r2, [pc, #68]	; (8001d50 <HAL_RCC_ClockConfig+0x24c>)
 8001d0a:	5cd3      	ldrb	r3, [r2, r3]
 8001d0c:	000a      	movs	r2, r1
 8001d0e:	40da      	lsrs	r2, r3
 8001d10:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <HAL_RCC_ClockConfig+0x250>)
 8001d12:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001d14:	250b      	movs	r5, #11
 8001d16:	197c      	adds	r4, r7, r5
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f003 f853 	bl	8004dc4 <HAL_InitTick>
 8001d1e:	0003      	movs	r3, r0
 8001d20:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001d22:	197b      	adds	r3, r7, r5
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8001d2a:	230b      	movs	r3, #11
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	e000      	b.n	8001d34 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	0018      	movs	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b004      	add	sp, #16
 8001d3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d3c:	40022000 	.word	0x40022000
 8001d40:	40021000 	.word	0x40021000
 8001d44:	00001388 	.word	0x00001388
 8001d48:	fffff8ff 	.word	0xfffff8ff
 8001d4c:	ffffc7ff 	.word	0xffffc7ff
 8001d50:	080050f4 	.word	0x080050f4
 8001d54:	20000004 	.word	0x20000004

08001d58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001d5e:	4b3b      	ldr	r3, [pc, #236]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	220c      	movs	r2, #12
 8001d68:	4013      	ands	r3, r2
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d00e      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0x34>
 8001d6e:	2b0c      	cmp	r3, #12
 8001d70:	d00f      	beq.n	8001d92 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d157      	bne.n	8001e26 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d76:	4b35      	ldr	r3, [pc, #212]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2210      	movs	r2, #16
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d002      	beq.n	8001d86 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001d80:	4b33      	ldr	r3, [pc, #204]	; (8001e50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d82:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001d84:	e05d      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8001d86:	4b33      	ldr	r3, [pc, #204]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d88:	613b      	str	r3, [r7, #16]
      break;
 8001d8a:	e05a      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d8c:	4b32      	ldr	r3, [pc, #200]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x100>)
 8001d8e:	613b      	str	r3, [r7, #16]
      break;
 8001d90:	e057      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	0c9b      	lsrs	r3, r3, #18
 8001d96:	220f      	movs	r2, #15
 8001d98:	4013      	ands	r3, r2
 8001d9a:	4a30      	ldr	r2, [pc, #192]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x104>)
 8001d9c:	5cd3      	ldrb	r3, [r2, r3]
 8001d9e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	0d9b      	lsrs	r3, r3, #22
 8001da4:	2203      	movs	r2, #3
 8001da6:	4013      	ands	r3, r2
 8001da8:	3301      	adds	r3, #1
 8001daa:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dac:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	025b      	lsls	r3, r3, #9
 8001db4:	4013      	ands	r3, r2
 8001db6:	d00f      	beq.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	000a      	movs	r2, r1
 8001dbc:	0152      	lsls	r2, r2, #5
 8001dbe:	1a52      	subs	r2, r2, r1
 8001dc0:	0193      	lsls	r3, r2, #6
 8001dc2:	1a9b      	subs	r3, r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	185b      	adds	r3, r3, r1
 8001dc8:	025b      	lsls	r3, r3, #9
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f7fe f99b 	bl	8000108 <__udivsi3>
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	e023      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001dd8:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2210      	movs	r2, #16
 8001dde:	4013      	ands	r3, r2
 8001de0:	d00f      	beq.n	8001e02 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001de2:	68b9      	ldr	r1, [r7, #8]
 8001de4:	000a      	movs	r2, r1
 8001de6:	0152      	lsls	r2, r2, #5
 8001de8:	1a52      	subs	r2, r2, r1
 8001dea:	0193      	lsls	r3, r2, #6
 8001dec:	1a9b      	subs	r3, r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	185b      	adds	r3, r3, r1
 8001df2:	021b      	lsls	r3, r3, #8
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	0018      	movs	r0, r3
 8001df8:	f7fe f986 	bl	8000108 <__udivsi3>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	e00e      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8001e02:	68b9      	ldr	r1, [r7, #8]
 8001e04:	000a      	movs	r2, r1
 8001e06:	0152      	lsls	r2, r2, #5
 8001e08:	1a52      	subs	r2, r2, r1
 8001e0a:	0193      	lsls	r3, r2, #6
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	185b      	adds	r3, r3, r1
 8001e12:	029b      	lsls	r3, r3, #10
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	0018      	movs	r0, r3
 8001e18:	f7fe f976 	bl	8000108 <__udivsi3>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	613b      	str	r3, [r7, #16]
      break;
 8001e24:	e00d      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	0b5b      	lsrs	r3, r3, #13
 8001e2c:	2207      	movs	r2, #7
 8001e2e:	4013      	ands	r3, r2
 8001e30:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	3301      	adds	r3, #1
 8001e36:	2280      	movs	r2, #128	; 0x80
 8001e38:	0212      	lsls	r2, r2, #8
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	0013      	movs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
      break;
 8001e40:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e42:	693b      	ldr	r3, [r7, #16]
}
 8001e44:	0018      	movs	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	b006      	add	sp, #24
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	003d0900 	.word	0x003d0900
 8001e54:	00f42400 	.word	0x00f42400
 8001e58:	007a1200 	.word	0x007a1200
 8001e5c:	0800510c 	.word	0x0800510c

08001e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e64:	4b02      	ldr	r3, [pc, #8]	; (8001e70 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	0018      	movs	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	20000004 	.word	0x20000004

08001e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e78:	f7ff fff2 	bl	8001e60 <HAL_RCC_GetHCLKFreq>
 8001e7c:	0001      	movs	r1, r0
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	0a1b      	lsrs	r3, r3, #8
 8001e84:	2207      	movs	r2, #7
 8001e86:	4013      	ands	r3, r2
 8001e88:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e8a:	5cd3      	ldrb	r3, [r2, r3]
 8001e8c:	40d9      	lsrs	r1, r3
 8001e8e:	000b      	movs	r3, r1
}
 8001e90:	0018      	movs	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	08005104 	.word	0x08005104

08001ea0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	220f      	movs	r2, #15
 8001eae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_RCC_GetClockConfig+0x5c>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <HAL_RCC_GetClockConfig+0x5c>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	22f0      	movs	r2, #240	; 0xf0
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <HAL_RCC_GetClockConfig+0x5c>)
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	23e0      	movs	r3, #224	; 0xe0
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	401a      	ands	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <HAL_RCC_GetClockConfig+0x5c>)
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	08da      	lsrs	r2, r3, #3
 8001edc:	23e0      	movs	r3, #224	; 0xe0
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	401a      	ands	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_RCC_GetClockConfig+0x60>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2201      	movs	r2, #1
 8001eec:	401a      	ands	r2, r3
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	601a      	str	r2, [r3, #0]
}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	b002      	add	sp, #8
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40022000 	.word	0x40022000

08001f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e01e      	b.n	8001f54 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2239      	movs	r2, #57	; 0x39
 8001f1a:	5c9b      	ldrb	r3, [r3, r2]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d107      	bne.n	8001f32 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2238      	movs	r2, #56	; 0x38
 8001f26:	2100      	movs	r1, #0
 8001f28:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f002 ff23 	bl	8004d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2239      	movs	r2, #57	; 0x39
 8001f36:	2102      	movs	r1, #2
 8001f38:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3304      	adds	r3, #4
 8001f42:	0019      	movs	r1, r3
 8001f44:	0010      	movs	r0, r2
 8001f46:	f000 fa13 	bl	8002370 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2239      	movs	r2, #57	; 0x39
 8001f4e:	2101      	movs	r1, #1
 8001f50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	0018      	movs	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	b002      	add	sp, #8
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2239      	movs	r2, #57	; 0x39
 8001f68:	2102      	movs	r1, #2
 8001f6a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2207      	movs	r2, #7
 8001f74:	4013      	ands	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2b06      	cmp	r3, #6
 8001f7c:	d007      	beq.n	8001f8e <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2101      	movs	r1, #1
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2239      	movs	r2, #57	; 0x39
 8001f92:	2101      	movs	r1, #1
 8001f94:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	0018      	movs	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b004      	add	sp, #16
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2207      	movs	r2, #7
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2b06      	cmp	r3, #6
 8001fc8:	d007      	beq.n	8001fda <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	0018      	movs	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b004      	add	sp, #16
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d124      	bne.n	8002044 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	2202      	movs	r2, #2
 8002002:	4013      	ands	r3, r2
 8002004:	2b02      	cmp	r3, #2
 8002006:	d11d      	bne.n	8002044 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2203      	movs	r2, #3
 800200e:	4252      	negs	r2, r2
 8002010:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	2203      	movs	r2, #3
 8002020:	4013      	ands	r3, r2
 8002022:	d004      	beq.n	800202e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	0018      	movs	r0, r3
 8002028:	f000 f98a 	bl	8002340 <HAL_TIM_IC_CaptureCallback>
 800202c:	e007      	b.n	800203e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	0018      	movs	r0, r3
 8002032:	f000 f97d 	bl	8002330 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	0018      	movs	r0, r3
 800203a:	f000 f989 	bl	8002350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	2204      	movs	r2, #4
 800204c:	4013      	ands	r3, r2
 800204e:	2b04      	cmp	r3, #4
 8002050:	d125      	bne.n	800209e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	2204      	movs	r2, #4
 800205a:	4013      	ands	r3, r2
 800205c:	2b04      	cmp	r3, #4
 800205e:	d11e      	bne.n	800209e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2205      	movs	r2, #5
 8002066:	4252      	negs	r2, r2
 8002068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2202      	movs	r2, #2
 800206e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699a      	ldr	r2, [r3, #24]
 8002076:	23c0      	movs	r3, #192	; 0xc0
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4013      	ands	r3, r2
 800207c:	d004      	beq.n	8002088 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	0018      	movs	r0, r3
 8002082:	f000 f95d 	bl	8002340 <HAL_TIM_IC_CaptureCallback>
 8002086:	e007      	b.n	8002098 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	0018      	movs	r0, r3
 800208c:	f000 f950 	bl	8002330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	0018      	movs	r0, r3
 8002094:	f000 f95c 	bl	8002350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	2208      	movs	r2, #8
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	d124      	bne.n	80020f6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	2208      	movs	r2, #8
 80020b4:	4013      	ands	r3, r2
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d11d      	bne.n	80020f6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2209      	movs	r2, #9
 80020c0:	4252      	negs	r2, r2
 80020c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2204      	movs	r2, #4
 80020c8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	2203      	movs	r2, #3
 80020d2:	4013      	ands	r3, r2
 80020d4:	d004      	beq.n	80020e0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	0018      	movs	r0, r3
 80020da:	f000 f931 	bl	8002340 <HAL_TIM_IC_CaptureCallback>
 80020de:	e007      	b.n	80020f0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	0018      	movs	r0, r3
 80020e4:	f000 f924 	bl	8002330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	0018      	movs	r0, r3
 80020ec:	f000 f930 	bl	8002350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	2210      	movs	r2, #16
 80020fe:	4013      	ands	r3, r2
 8002100:	2b10      	cmp	r3, #16
 8002102:	d125      	bne.n	8002150 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	2210      	movs	r2, #16
 800210c:	4013      	ands	r3, r2
 800210e:	2b10      	cmp	r3, #16
 8002110:	d11e      	bne.n	8002150 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2211      	movs	r2, #17
 8002118:	4252      	negs	r2, r2
 800211a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2208      	movs	r2, #8
 8002120:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	69da      	ldr	r2, [r3, #28]
 8002128:	23c0      	movs	r3, #192	; 0xc0
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4013      	ands	r3, r2
 800212e:	d004      	beq.n	800213a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	0018      	movs	r0, r3
 8002134:	f000 f904 	bl	8002340 <HAL_TIM_IC_CaptureCallback>
 8002138:	e007      	b.n	800214a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	0018      	movs	r0, r3
 800213e:	f000 f8f7 	bl	8002330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	0018      	movs	r0, r3
 8002146:	f000 f903 	bl	8002350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	2201      	movs	r2, #1
 8002158:	4013      	ands	r3, r2
 800215a:	2b01      	cmp	r3, #1
 800215c:	d10f      	bne.n	800217e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	2201      	movs	r2, #1
 8002166:	4013      	ands	r3, r2
 8002168:	2b01      	cmp	r3, #1
 800216a:	d108      	bne.n	800217e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2202      	movs	r2, #2
 8002172:	4252      	negs	r2, r2
 8002174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	0018      	movs	r0, r3
 800217a:	f002 fd01 	bl	8004b80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	2240      	movs	r2, #64	; 0x40
 8002186:	4013      	ands	r3, r2
 8002188:	2b40      	cmp	r3, #64	; 0x40
 800218a:	d10f      	bne.n	80021ac <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	2240      	movs	r2, #64	; 0x40
 8002194:	4013      	ands	r3, r2
 8002196:	2b40      	cmp	r3, #64	; 0x40
 8002198:	d108      	bne.n	80021ac <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2241      	movs	r2, #65	; 0x41
 80021a0:	4252      	negs	r2, r2
 80021a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	0018      	movs	r0, r3
 80021a8:	f000 f8da 	bl	8002360 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021ac:	46c0      	nop			; (mov r8, r8)
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b002      	add	sp, #8
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2238      	movs	r2, #56	; 0x38
 80021c2:	5c9b      	ldrb	r3, [r3, r2]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <HAL_TIM_ConfigClockSource+0x18>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e0ab      	b.n	8002324 <HAL_TIM_ConfigClockSource+0x170>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2238      	movs	r2, #56	; 0x38
 80021d0:	2101      	movs	r1, #1
 80021d2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2239      	movs	r2, #57	; 0x39
 80021d8:	2102      	movs	r1, #2
 80021da:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2277      	movs	r2, #119	; 0x77
 80021e8:	4393      	bics	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4a4f      	ldr	r2, [pc, #316]	; (800232c <HAL_TIM_ConfigClockSource+0x178>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b40      	cmp	r3, #64	; 0x40
 8002202:	d100      	bne.n	8002206 <HAL_TIM_ConfigClockSource+0x52>
 8002204:	e06b      	b.n	80022de <HAL_TIM_ConfigClockSource+0x12a>
 8002206:	d80e      	bhi.n	8002226 <HAL_TIM_ConfigClockSource+0x72>
 8002208:	2b10      	cmp	r3, #16
 800220a:	d100      	bne.n	800220e <HAL_TIM_ConfigClockSource+0x5a>
 800220c:	e077      	b.n	80022fe <HAL_TIM_ConfigClockSource+0x14a>
 800220e:	d803      	bhi.n	8002218 <HAL_TIM_ConfigClockSource+0x64>
 8002210:	2b00      	cmp	r3, #0
 8002212:	d100      	bne.n	8002216 <HAL_TIM_ConfigClockSource+0x62>
 8002214:	e073      	b.n	80022fe <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002216:	e07c      	b.n	8002312 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002218:	2b20      	cmp	r3, #32
 800221a:	d100      	bne.n	800221e <HAL_TIM_ConfigClockSource+0x6a>
 800221c:	e06f      	b.n	80022fe <HAL_TIM_ConfigClockSource+0x14a>
 800221e:	2b30      	cmp	r3, #48	; 0x30
 8002220:	d100      	bne.n	8002224 <HAL_TIM_ConfigClockSource+0x70>
 8002222:	e06c      	b.n	80022fe <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8002224:	e075      	b.n	8002312 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002226:	2b70      	cmp	r3, #112	; 0x70
 8002228:	d00e      	beq.n	8002248 <HAL_TIM_ConfigClockSource+0x94>
 800222a:	d804      	bhi.n	8002236 <HAL_TIM_ConfigClockSource+0x82>
 800222c:	2b50      	cmp	r3, #80	; 0x50
 800222e:	d036      	beq.n	800229e <HAL_TIM_ConfigClockSource+0xea>
 8002230:	2b60      	cmp	r3, #96	; 0x60
 8002232:	d044      	beq.n	80022be <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8002234:	e06d      	b.n	8002312 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002236:	2280      	movs	r2, #128	; 0x80
 8002238:	0152      	lsls	r2, r2, #5
 800223a:	4293      	cmp	r3, r2
 800223c:	d068      	beq.n	8002310 <HAL_TIM_ConfigClockSource+0x15c>
 800223e:	2280      	movs	r2, #128	; 0x80
 8002240:	0192      	lsls	r2, r2, #6
 8002242:	4293      	cmp	r3, r2
 8002244:	d017      	beq.n	8002276 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8002246:	e064      	b.n	8002312 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	6899      	ldr	r1, [r3, #8]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f000 f962 	bl	8002520 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2277      	movs	r2, #119	; 0x77
 8002268:	4313      	orrs	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	609a      	str	r2, [r3, #8]
      break;
 8002274:	e04d      	b.n	8002312 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	6899      	ldr	r1, [r3, #8]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	f000 f94b 	bl	8002520 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2180      	movs	r1, #128	; 0x80
 8002296:	01c9      	lsls	r1, r1, #7
 8002298:	430a      	orrs	r2, r1
 800229a:	609a      	str	r2, [r3, #8]
      break;
 800229c:	e039      	b.n	8002312 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	6859      	ldr	r1, [r3, #4]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	001a      	movs	r2, r3
 80022ac:	f000 f8be 	bl	800242c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2150      	movs	r1, #80	; 0x50
 80022b6:	0018      	movs	r0, r3
 80022b8:	f000 f918 	bl	80024ec <TIM_ITRx_SetConfig>
      break;
 80022bc:	e029      	b.n	8002312 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6818      	ldr	r0, [r3, #0]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	6859      	ldr	r1, [r3, #4]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	001a      	movs	r2, r3
 80022cc:	f000 f8dc 	bl	8002488 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2160      	movs	r1, #96	; 0x60
 80022d6:	0018      	movs	r0, r3
 80022d8:	f000 f908 	bl	80024ec <TIM_ITRx_SetConfig>
      break;
 80022dc:	e019      	b.n	8002312 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6818      	ldr	r0, [r3, #0]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	6859      	ldr	r1, [r3, #4]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	001a      	movs	r2, r3
 80022ec:	f000 f89e 	bl	800242c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2140      	movs	r1, #64	; 0x40
 80022f6:	0018      	movs	r0, r3
 80022f8:	f000 f8f8 	bl	80024ec <TIM_ITRx_SetConfig>
      break;
 80022fc:	e009      	b.n	8002312 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	0019      	movs	r1, r3
 8002308:	0010      	movs	r0, r2
 800230a:	f000 f8ef 	bl	80024ec <TIM_ITRx_SetConfig>
      break;
 800230e:	e000      	b.n	8002312 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8002310:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2239      	movs	r2, #57	; 0x39
 8002316:	2101      	movs	r1, #1
 8002318:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2238      	movs	r2, #56	; 0x38
 800231e:	2100      	movs	r1, #0
 8002320:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	0018      	movs	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	b004      	add	sp, #16
 800232a:	bd80      	pop	{r7, pc}
 800232c:	ffff00ff 	.word	0xffff00ff

08002330 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002338:	46c0      	nop			; (mov r8, r8)
 800233a:	46bd      	mov	sp, r7
 800233c:	b002      	add	sp, #8
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002348:	46c0      	nop			; (mov r8, r8)
 800234a:	46bd      	mov	sp, r7
 800234c:	b002      	add	sp, #8
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002358:	46c0      	nop			; (mov r8, r8)
 800235a:	46bd      	mov	sp, r7
 800235c:	b002      	add	sp, #8
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002368:	46c0      	nop			; (mov r8, r8)
 800236a:	46bd      	mov	sp, r7
 800236c:	b002      	add	sp, #8
 800236e:	bd80      	pop	{r7, pc}

08002370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	2380      	movs	r3, #128	; 0x80
 8002384:	05db      	lsls	r3, r3, #23
 8002386:	429a      	cmp	r2, r3
 8002388:	d00b      	beq.n	80023a2 <TIM_Base_SetConfig+0x32>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a23      	ldr	r2, [pc, #140]	; (800241c <TIM_Base_SetConfig+0xac>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d007      	beq.n	80023a2 <TIM_Base_SetConfig+0x32>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a22      	ldr	r2, [pc, #136]	; (8002420 <TIM_Base_SetConfig+0xb0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d003      	beq.n	80023a2 <TIM_Base_SetConfig+0x32>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a21      	ldr	r2, [pc, #132]	; (8002424 <TIM_Base_SetConfig+0xb4>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d108      	bne.n	80023b4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2270      	movs	r2, #112	; 0x70
 80023a6:	4393      	bics	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	05db      	lsls	r3, r3, #23
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d00b      	beq.n	80023d6 <TIM_Base_SetConfig+0x66>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a16      	ldr	r2, [pc, #88]	; (800241c <TIM_Base_SetConfig+0xac>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d007      	beq.n	80023d6 <TIM_Base_SetConfig+0x66>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a15      	ldr	r2, [pc, #84]	; (8002420 <TIM_Base_SetConfig+0xb0>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d003      	beq.n	80023d6 <TIM_Base_SetConfig+0x66>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a14      	ldr	r2, [pc, #80]	; (8002424 <TIM_Base_SetConfig+0xb4>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d108      	bne.n	80023e8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4a13      	ldr	r2, [pc, #76]	; (8002428 <TIM_Base_SetConfig+0xb8>)
 80023da:	4013      	ands	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2280      	movs	r2, #128	; 0x80
 80023ec:	4393      	bics	r3, r2
 80023ee:	001a      	movs	r2, r3
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	615a      	str	r2, [r3, #20]
}
 8002414:	46c0      	nop			; (mov r8, r8)
 8002416:	46bd      	mov	sp, r7
 8002418:	b004      	add	sp, #16
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40000400 	.word	0x40000400
 8002420:	40010800 	.word	0x40010800
 8002424:	40011400 	.word	0x40011400
 8002428:	fffffcff 	.word	0xfffffcff

0800242c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	2201      	movs	r2, #1
 8002444:	4393      	bics	r3, r2
 8002446:	001a      	movs	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	22f0      	movs	r2, #240	; 0xf0
 8002456:	4393      	bics	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	220a      	movs	r2, #10
 8002468:	4393      	bics	r3, r2
 800246a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	4313      	orrs	r3, r2
 8002472:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	621a      	str	r2, [r3, #32]
}
 8002480:	46c0      	nop			; (mov r8, r8)
 8002482:	46bd      	mov	sp, r7
 8002484:	b006      	add	sp, #24
 8002486:	bd80      	pop	{r7, pc}

08002488 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	2210      	movs	r2, #16
 800249a:	4393      	bics	r3, r2
 800249c:	001a      	movs	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	4a0d      	ldr	r2, [pc, #52]	; (80024e8 <TIM_TI2_ConfigInputStage+0x60>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	031b      	lsls	r3, r3, #12
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4313      	orrs	r3, r2
 80024be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	22a0      	movs	r2, #160	; 0xa0
 80024c4:	4393      	bics	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	621a      	str	r2, [r3, #32]
}
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	46bd      	mov	sp, r7
 80024e2:	b006      	add	sp, #24
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	ffff0fff 	.word	0xffff0fff

080024ec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2270      	movs	r2, #112	; 0x70
 8002500:	4393      	bics	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	4313      	orrs	r3, r2
 800250a:	2207      	movs	r2, #7
 800250c:	4313      	orrs	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	609a      	str	r2, [r3, #8]
}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	46bd      	mov	sp, r7
 800251a:	b004      	add	sp, #16
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
 800252c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	4a09      	ldr	r2, [pc, #36]	; (800255c <TIM_ETR_SetConfig+0x3c>)
 8002538:	4013      	ands	r3, r2
 800253a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	021a      	lsls	r2, r3, #8
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	431a      	orrs	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	4313      	orrs	r3, r2
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	4313      	orrs	r3, r2
 800254c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	609a      	str	r2, [r3, #8]
}
 8002554:	46c0      	nop			; (mov r8, r8)
 8002556:	46bd      	mov	sp, r7
 8002558:	b006      	add	sp, #24
 800255a:	bd80      	pop	{r7, pc}
 800255c:	ffff00ff 	.word	0xffff00ff

08002560 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2238      	movs	r2, #56	; 0x38
 800256e:	5c9b      	ldrb	r3, [r3, r2]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002574:	2302      	movs	r3, #2
 8002576:	e032      	b.n	80025de <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2238      	movs	r2, #56	; 0x38
 800257c:	2101      	movs	r1, #1
 800257e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2239      	movs	r2, #57	; 0x39
 8002584:	2102      	movs	r1, #2
 8002586:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2270      	movs	r2, #112	; 0x70
 800259c:	4393      	bics	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2280      	movs	r2, #128	; 0x80
 80025ae:	4393      	bics	r3, r2
 80025b0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2239      	movs	r2, #57	; 0x39
 80025d0:	2101      	movs	r1, #1
 80025d2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2238      	movs	r2, #56	; 0x38
 80025d8:	2100      	movs	r1, #0
 80025da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	0018      	movs	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	b004      	add	sp, #16
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b084      	sub	sp, #16
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	0002      	movs	r2, r0
 80025ee:	1dbb      	adds	r3, r7, #6
 80025f0:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80025f6:	1dbb      	adds	r3, r7, #6
 80025f8:	2200      	movs	r2, #0
 80025fa:	5e9b      	ldrsh	r3, [r3, r2]
 80025fc:	2b84      	cmp	r3, #132	; 0x84
 80025fe:	d006      	beq.n	800260e <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8002600:	1dbb      	adds	r3, r7, #6
 8002602:	2200      	movs	r2, #0
 8002604:	5e9a      	ldrsh	r2, [r3, r2]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	18d3      	adds	r3, r2, r3
 800260a:	3303      	adds	r3, #3
 800260c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800260e:	68fb      	ldr	r3, [r7, #12]
}
 8002610:	0018      	movs	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	b004      	add	sp, #16
 8002616:	bd80      	pop	{r7, pc}

08002618 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800261e:	f3ef 8305 	mrs	r3, IPSR
 8002622:	607b      	str	r3, [r7, #4]
  return(result);
 8002624:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002626:	1e5a      	subs	r2, r3, #1
 8002628:	4193      	sbcs	r3, r2
 800262a:	b2db      	uxtb	r3, r3
}
 800262c:	0018      	movs	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	b002      	add	sp, #8
 8002632:	bd80      	pop	{r7, pc}

08002634 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002638:	f000 fe7a 	bl	8003330 <vTaskStartScheduler>
  
  return osOK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	0018      	movs	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002646:	b089      	sub	sp, #36	; 0x24
 8002648:	af04      	add	r7, sp, #16
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d020      	beq.n	8002698 <osThreadCreate+0x54>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d01c      	beq.n	8002698 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685c      	ldr	r4, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681d      	ldr	r5, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691e      	ldr	r6, [r3, #16]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2208      	movs	r2, #8
 800266e:	5e9b      	ldrsh	r3, [r3, r2]
 8002670:	0018      	movs	r0, r3
 8002672:	f7ff ffb8 	bl	80025e6 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800267e:	6839      	ldr	r1, [r7, #0]
 8002680:	9302      	str	r3, [sp, #8]
 8002682:	9201      	str	r2, [sp, #4]
 8002684:	9000      	str	r0, [sp, #0]
 8002686:	000b      	movs	r3, r1
 8002688:	0032      	movs	r2, r6
 800268a:	0029      	movs	r1, r5
 800268c:	0020      	movs	r0, r4
 800268e:	f000 fcbb 	bl	8003008 <xTaskCreateStatic>
 8002692:	0003      	movs	r3, r0
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	e01d      	b.n	80026d4 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685c      	ldr	r4, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026a4:	b29e      	uxth	r6, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2208      	movs	r2, #8
 80026aa:	5e9b      	ldrsh	r3, [r3, r2]
 80026ac:	0018      	movs	r0, r3
 80026ae:	f7ff ff9a 	bl	80025e6 <makeFreeRtosPriority>
 80026b2:	0001      	movs	r1, r0
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	230c      	movs	r3, #12
 80026b8:	18fb      	adds	r3, r7, r3
 80026ba:	9301      	str	r3, [sp, #4]
 80026bc:	9100      	str	r1, [sp, #0]
 80026be:	0013      	movs	r3, r2
 80026c0:	0032      	movs	r2, r6
 80026c2:	0029      	movs	r1, r5
 80026c4:	0020      	movs	r0, r4
 80026c6:	f000 fce2 	bl	800308e <xTaskCreate>
 80026ca:	0003      	movs	r3, r0
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d001      	beq.n	80026d4 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	e000      	b.n	80026d6 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80026d4:	68fb      	ldr	r3, [r7, #12]
}
 80026d6:	0018      	movs	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	b005      	add	sp, #20
 80026dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026de <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b084      	sub	sp, #16
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <osDelay+0x16>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	e000      	b.n	80026f6 <osDelay+0x18>
 80026f4:	2301      	movs	r3, #1
 80026f6:	0018      	movs	r0, r3
 80026f8:	f000 fdf4 	bl	80032e4 <vTaskDelay>
  
  return osOK;
 80026fc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80026fe:	0018      	movs	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	b004      	add	sp, #16
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af02      	add	r7, sp, #8
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8002716:	2300      	movs	r3, #0
 8002718:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800271a:	f7ff ff7d 	bl	8002618 <inHandlerMode>
 800271e:	1e03      	subs	r3, r0, #0
 8002720:	d018      	beq.n	8002754 <osSignalSet+0x4c>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8002722:	6839      	ldr	r1, [r7, #0]
 8002724:	2308      	movs	r3, #8
 8002726:	18fa      	adds	r2, r7, r3
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	230c      	movs	r3, #12
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	0013      	movs	r3, r2
 8002732:	2201      	movs	r2, #1
 8002734:	f001 fa9a 	bl	8003c6c <xTaskGenericNotifyFromISR>
 8002738:	0003      	movs	r3, r0
 800273a:	2b01      	cmp	r3, #1
 800273c:	d002      	beq.n	8002744 <osSignalSet+0x3c>
      return 0x80000000;
 800273e:	2380      	movs	r3, #128	; 0x80
 8002740:	061b      	lsls	r3, r3, #24
 8002742:	e015      	b.n	8002770 <osSignalSet+0x68>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d011      	beq.n	800276e <osSignalSet+0x66>
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <osSignalSet+0x70>)
 800274c:	2280      	movs	r2, #128	; 0x80
 800274e:	0552      	lsls	r2, r2, #21
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	e00c      	b.n	800276e <osSignalSet+0x66>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8002754:	6839      	ldr	r1, [r7, #0]
 8002756:	2308      	movs	r3, #8
 8002758:	18fb      	adds	r3, r7, r3
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f001 f9f9 	bl	8003b54 <xTaskGenericNotify>
 8002762:	0003      	movs	r3, r0
 8002764:	2b01      	cmp	r3, #1
 8002766:	d002      	beq.n	800276e <osSignalSet+0x66>
    return 0x80000000;
 8002768:	2380      	movs	r3, #128	; 0x80
 800276a:	061b      	lsls	r3, r3, #24
 800276c:	e000      	b.n	8002770 <osSignalSet+0x68>
  
  return ulPreviousNotificationValue;
 800276e:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8002770:	0018      	movs	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	b004      	add	sp, #16
 8002776:	bd80      	pop	{r7, pc}
 8002778:	e000ed04 	.word	0xe000ed04

0800277c <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800277c:	b590      	push	{r4, r7, lr}
 800277e:	b089      	sub	sp, #36	; 0x24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8002788:	2310      	movs	r3, #16
 800278a:	18fb      	adds	r3, r7, r3
 800278c:	2200      	movs	r2, #0
 800278e:	605a      	str	r2, [r3, #4]
  ticks = 0;
 8002790:	2300      	movs	r3, #0
 8002792:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3301      	adds	r3, #1
 8002798:	d103      	bne.n	80027a2 <osSignalWait+0x26>
    ticks = portMAX_DELAY;
 800279a:	2301      	movs	r3, #1
 800279c:	425b      	negs	r3, r3
 800279e:	61fb      	str	r3, [r7, #28]
 80027a0:	e009      	b.n	80027b6 <osSignalWait+0x3a>
  }
  else if (millisec != 0) {
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d006      	beq.n	80027b6 <osSignalWait+0x3a>
    ticks = millisec / portTICK_PERIOD_MS;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <osSignalWait+0x3a>
      ticks = 1;
 80027b2:	2301      	movs	r3, #1
 80027b4:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80027b6:	f7ff ff2f 	bl	8002618 <inHandlerMode>
 80027ba:	1e03      	subs	r3, r0, #0
 80027bc:	d004      	beq.n	80027c8 <osSignalWait+0x4c>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80027be:	2310      	movs	r3, #16
 80027c0:	18fb      	adds	r3, r7, r3
 80027c2:	2282      	movs	r2, #130	; 0x82
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	e026      	b.n	8002816 <osSignalWait+0x9a>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80027c8:	68b9      	ldr	r1, [r7, #8]
 80027ca:	69f8      	ldr	r0, [r7, #28]
 80027cc:	2310      	movs	r3, #16
 80027ce:	18fb      	adds	r3, r7, r3
 80027d0:	1d1a      	adds	r2, r3, #4
 80027d2:	0003      	movs	r3, r0
 80027d4:	2000      	movs	r0, #0
 80027d6:	f001 f969 	bl	8003aac <xTaskNotifyWait>
 80027da:	0003      	movs	r3, r0
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d00c      	beq.n	80027fa <osSignalWait+0x7e>
    {
      if(ticks == 0)  ret.status = osOK;
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d104      	bne.n	80027f0 <osSignalWait+0x74>
 80027e6:	2310      	movs	r3, #16
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	e012      	b.n	8002816 <osSignalWait+0x9a>
      else  ret.status = osEventTimeout;
 80027f0:	2310      	movs	r3, #16
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	2240      	movs	r2, #64	; 0x40
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	e00d      	b.n	8002816 <osSignalWait+0x9a>
    }
    else if(ret.value.signals < 0)
 80027fa:	2310      	movs	r3, #16
 80027fc:	18fb      	adds	r3, r7, r3
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	da04      	bge.n	800280e <osSignalWait+0x92>
    {
      ret.status =  osErrorValue;     
 8002804:	2310      	movs	r3, #16
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	2286      	movs	r2, #134	; 0x86
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	e003      	b.n	8002816 <osSignalWait+0x9a>
    }
    else  ret.status =  osEventSignal;
 800280e:	2310      	movs	r3, #16
 8002810:	18fb      	adds	r3, r7, r3
 8002812:	2208      	movs	r2, #8
 8002814:	601a      	str	r2, [r3, #0]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2210      	movs	r2, #16
 800281a:	18ba      	adds	r2, r7, r2
 800281c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800281e:	c313      	stmia	r3!, {r0, r1, r4}
}
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	46bd      	mov	sp, r7
 8002824:	b009      	add	sp, #36	; 0x24
 8002826:	bd90      	pop	{r4, r7, pc}

08002828 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002828:	b590      	push	{r4, r7, lr}
 800282a:	b085      	sub	sp, #20
 800282c:	af02      	add	r7, sp, #8
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d012      	beq.n	8002860 <osMessageCreate+0x38>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00e      	beq.n	8002860 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6818      	ldr	r0, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6859      	ldr	r1, [r3, #4]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68dc      	ldr	r4, [r3, #12]
 8002852:	2300      	movs	r3, #0
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	0023      	movs	r3, r4
 8002858:	f000 f981 	bl	8002b5e <xQueueGenericCreateStatic>
 800285c:	0003      	movs	r3, r0
 800285e:	e008      	b.n	8002872 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	0019      	movs	r1, r3
 800286c:	f000 f9c2 	bl	8002bf4 <xQueueGenericCreate>
 8002870:	0003      	movs	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002872:	0018      	movs	r0, r3
 8002874:	46bd      	mov	sp, r7
 8002876:	b003      	add	sp, #12
 8002878:	bd90      	pop	{r4, r7, pc}
	...

0800287c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800287c:	b590      	push	{r4, r7, lr}
 800287e:	b08b      	sub	sp, #44	; 0x2c
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8002888:	2114      	movs	r1, #20
 800288a:	187b      	adds	r3, r7, r1
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	609a      	str	r2, [r3, #8]
  event.value.v = 0;
 8002890:	187b      	adds	r3, r7, r1
 8002892:	2200      	movs	r2, #0
 8002894:	605a      	str	r2, [r3, #4]
  
  if (queue_id == NULL) {
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d108      	bne.n	80028ae <osMessageGet+0x32>
    event.status = osErrorParameter;
 800289c:	2114      	movs	r1, #20
 800289e:	187b      	adds	r3, r7, r1
 80028a0:	2280      	movs	r2, #128	; 0x80
 80028a2:	601a      	str	r2, [r3, #0]
    return event;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	187a      	adds	r2, r7, r1
 80028a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80028aa:	c313      	stmia	r3!, {r0, r1, r4}
 80028ac:	e053      	b.n	8002956 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80028ae:	2300      	movs	r3, #0
 80028b0:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80028b2:	2300      	movs	r3, #0
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3301      	adds	r3, #1
 80028ba:	d103      	bne.n	80028c4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80028bc:	2301      	movs	r3, #1
 80028be:	425b      	negs	r3, r3
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
 80028c2:	e009      	b.n	80028d8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d006      	beq.n	80028d8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <osMessageGet+0x5c>
      ticks = 1;
 80028d4:	2301      	movs	r3, #1
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80028d8:	f7ff fe9e 	bl	8002618 <inHandlerMode>
 80028dc:	1e03      	subs	r3, r0, #0
 80028de:	d01c      	beq.n	800291a <osMessageGet+0x9e>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80028e0:	2320      	movs	r3, #32
 80028e2:	18fa      	adds	r2, r7, r3
 80028e4:	2314      	movs	r3, #20
 80028e6:	18fb      	adds	r3, r7, r3
 80028e8:	1d19      	adds	r1, r3, #4
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	0018      	movs	r0, r3
 80028ee:	f000 fa8e 	bl	8002e0e <xQueueReceiveFromISR>
 80028f2:	0003      	movs	r3, r0
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d104      	bne.n	8002902 <osMessageGet+0x86>
      /* We have mail */
      event.status = osEventMessage;
 80028f8:	2314      	movs	r3, #20
 80028fa:	18fb      	adds	r3, r7, r3
 80028fc:	2210      	movs	r2, #16
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	e003      	b.n	800290a <osMessageGet+0x8e>
    }
    else {
      event.status = osOK;
 8002902:	2314      	movs	r3, #20
 8002904:	18fb      	adds	r3, r7, r3
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d01d      	beq.n	800294c <osMessageGet+0xd0>
 8002910:	4b13      	ldr	r3, [pc, #76]	; (8002960 <osMessageGet+0xe4>)
 8002912:	2280      	movs	r2, #128	; 0x80
 8002914:	0552      	lsls	r2, r2, #21
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	e018      	b.n	800294c <osMessageGet+0xd0>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800291a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291c:	2314      	movs	r3, #20
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	1d19      	adds	r1, r3, #4
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	0018      	movs	r0, r3
 8002926:	f000 f9bd 	bl	8002ca4 <xQueueReceive>
 800292a:	0003      	movs	r3, r0
 800292c:	2b01      	cmp	r3, #1
 800292e:	d104      	bne.n	800293a <osMessageGet+0xbe>
      /* We have mail */
      event.status = osEventMessage;
 8002930:	2314      	movs	r3, #20
 8002932:	18fb      	adds	r3, r7, r3
 8002934:	2210      	movs	r2, #16
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	e008      	b.n	800294c <osMessageGet+0xd0>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <osMessageGet+0xc8>
 8002940:	2200      	movs	r2, #0
 8002942:	e000      	b.n	8002946 <osMessageGet+0xca>
 8002944:	2240      	movs	r2, #64	; 0x40
 8002946:	2314      	movs	r3, #20
 8002948:	18fb      	adds	r3, r7, r3
 800294a:	601a      	str	r2, [r3, #0]
    }
  }
  
  return event;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2214      	movs	r2, #20
 8002950:	18ba      	adds	r2, r7, r2
 8002952:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002954:	c313      	stmia	r3!, {r0, r1, r4}
}
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	46bd      	mov	sp, r7
 800295a:	b00b      	add	sp, #44	; 0x2c
 800295c:	bd90      	pop	{r4, r7, pc}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	e000ed04 	.word	0xe000ed04

08002964 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3308      	adds	r3, #8
 8002970:	001a      	movs	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	4252      	negs	r2, r2
 800297c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3308      	adds	r3, #8
 8002982:	001a      	movs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3308      	adds	r3, #8
 800298c:	001a      	movs	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002998:	46c0      	nop			; (mov r8, r8)
 800299a:	46bd      	mov	sp, r7
 800299c:	b002      	add	sp, #8
 800299e:	bd80      	pop	{r7, pc}

080029a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	46bd      	mov	sp, r7
 80029b2:	b002      	add	sp, #8
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	601a      	str	r2, [r3, #0]
}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b004      	add	sp, #16
 80029f8:	bd80      	pop	{r7, pc}

080029fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b084      	sub	sp, #16
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	d103      	bne.n	8002a18 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	e00c      	b.n	8002a32 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3308      	adds	r3, #8
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	e002      	b.n	8002a26 <vListInsert+0x2c>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d2f6      	bcs.n	8002a20 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	601a      	str	r2, [r3, #0]
}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	46bd      	mov	sp, r7
 8002a62:	b004      	add	sp, #16
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b084      	sub	sp, #16
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6892      	ldr	r2, [r2, #8]
 8002a7c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6852      	ldr	r2, [r2, #4]
 8002a86:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d103      	bne.n	8002a9a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	1e5a      	subs	r2, r3, #1
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
}
 8002aae:	0018      	movs	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b004      	add	sp, #16
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b084      	sub	sp, #16
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <xQueueGenericReset+0x18>
 8002aca:	b672      	cpsid	i
 8002acc:	e7fe      	b.n	8002acc <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8002ace:	f001 fa67 	bl	8003fa0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	434b      	muls	r3, r1
 8002ae0:	18d2      	adds	r2, r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afc:	1e59      	subs	r1, r3, #1
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	434b      	muls	r3, r1
 8002b04:	18d2      	adds	r2, r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2244      	movs	r2, #68	; 0x44
 8002b0e:	21ff      	movs	r1, #255	; 0xff
 8002b10:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2245      	movs	r2, #69	; 0x45
 8002b16:	21ff      	movs	r1, #255	; 0xff
 8002b18:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10d      	bne.n	8002b3c <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d013      	beq.n	8002b50 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	3310      	adds	r3, #16
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f000 fe09 	bl	8003744 <xTaskRemoveFromEventList>
 8002b32:	1e03      	subs	r3, r0, #0
 8002b34:	d00c      	beq.n	8002b50 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002b36:	f001 fa23 	bl	8003f80 <vPortYield>
 8002b3a:	e009      	b.n	8002b50 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	3310      	adds	r3, #16
 8002b40:	0018      	movs	r0, r3
 8002b42:	f7ff ff0f 	bl	8002964 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	3324      	adds	r3, #36	; 0x24
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f7ff ff0a 	bl	8002964 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b50:	f001 fa38 	bl	8003fc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b54:	2301      	movs	r3, #1
}
 8002b56:	0018      	movs	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b004      	add	sp, #16
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b5e:	b590      	push	{r4, r7, lr}
 8002b60:	b089      	sub	sp, #36	; 0x24
 8002b62:	af02      	add	r7, sp, #8
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	607a      	str	r2, [r7, #4]
 8002b6a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <xQueueGenericCreateStatic+0x18>
 8002b72:	b672      	cpsid	i
 8002b74:	e7fe      	b.n	8002b74 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <xQueueGenericCreateStatic+0x22>
 8002b7c:	b672      	cpsid	i
 8002b7e:	e7fe      	b.n	8002b7e <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <xQueueGenericCreateStatic+0x2e>
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <xQueueGenericCreateStatic+0x32>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e000      	b.n	8002b92 <xQueueGenericCreateStatic+0x34>
 8002b90:	2300      	movs	r3, #0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <xQueueGenericCreateStatic+0x3c>
 8002b96:	b672      	cpsid	i
 8002b98:	e7fe      	b.n	8002b98 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d102      	bne.n	8002ba6 <xQueueGenericCreateStatic+0x48>
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <xQueueGenericCreateStatic+0x4c>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <xQueueGenericCreateStatic+0x4e>
 8002baa:	2300      	movs	r3, #0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <xQueueGenericCreateStatic+0x56>
 8002bb0:	b672      	cpsid	i
 8002bb2:	e7fe      	b.n	8002bb2 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002bb4:	2348      	movs	r3, #72	; 0x48
 8002bb6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	2b48      	cmp	r3, #72	; 0x48
 8002bbc:	d001      	beq.n	8002bc2 <xQueueGenericCreateStatic+0x64>
 8002bbe:	b672      	cpsid	i
 8002bc0:	e7fe      	b.n	8002bc0 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00e      	beq.n	8002bea <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	2246      	movs	r2, #70	; 0x46
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002bd4:	2328      	movs	r3, #40	; 0x28
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	781c      	ldrb	r4, [r3, #0]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68b9      	ldr	r1, [r7, #8]
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	0023      	movs	r3, r4
 8002be6:	f000 f83b 	bl	8002c60 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002bea:	697b      	ldr	r3, [r7, #20]
	}
 8002bec:	0018      	movs	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	b007      	add	sp, #28
 8002bf2:	bd90      	pop	{r4, r7, pc}

08002bf4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002bf4:	b590      	push	{r4, r7, lr}
 8002bf6:	b08b      	sub	sp, #44	; 0x2c
 8002bf8:	af02      	add	r7, sp, #8
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	1dfb      	adds	r3, r7, #7
 8002c00:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <xQueueGenericCreate+0x18>
 8002c08:	b672      	cpsid	i
 8002c0a:	e7fe      	b.n	8002c0a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d102      	bne.n	8002c18 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
 8002c16:	e003      	b.n	8002c20 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	4353      	muls	r3, r2
 8002c1e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	3348      	adds	r3, #72	; 0x48
 8002c24:	0018      	movs	r0, r3
 8002c26:	f001 fa53 	bl	80040d0 <pvPortMalloc>
 8002c2a:	0003      	movs	r3, r0
 8002c2c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d010      	beq.n	8002c56 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	3348      	adds	r3, #72	; 0x48
 8002c38:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	2246      	movs	r2, #70	; 0x46
 8002c3e:	2100      	movs	r1, #0
 8002c40:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c42:	1dfb      	adds	r3, r7, #7
 8002c44:	781c      	ldrb	r4, [r3, #0]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	0023      	movs	r3, r4
 8002c52:	f000 f805 	bl	8002c60 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002c56:	69bb      	ldr	r3, [r7, #24]
	}
 8002c58:	0018      	movs	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b009      	add	sp, #36	; 0x24
 8002c5e:	bd90      	pop	{r4, r7, pc}

08002c60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	001a      	movs	r2, r3
 8002c6e:	1cfb      	adds	r3, r7, #3
 8002c70:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d103      	bne.n	8002c80 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	e002      	b.n	8002c86 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	2101      	movs	r1, #1
 8002c96:	0018      	movs	r0, r3
 8002c98:	f7ff ff0d 	bl	8002ab6 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c9c:	46c0      	nop			; (mov r8, r8)
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	b004      	add	sp, #16
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08a      	sub	sp, #40	; 0x28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <xQueueReceive+0x1e>
 8002cbe:	b672      	cpsid	i
 8002cc0:	e7fe      	b.n	8002cc0 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d103      	bne.n	8002cd0 <xQueueReceive+0x2c>
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <xQueueReceive+0x30>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <xQueueReceive+0x32>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <xQueueReceive+0x3a>
 8002cda:	b672      	cpsid	i
 8002cdc:	e7fe      	b.n	8002cdc <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cde:	f000 fec9 	bl	8003a74 <xTaskGetSchedulerState>
 8002ce2:	1e03      	subs	r3, r0, #0
 8002ce4:	d102      	bne.n	8002cec <xQueueReceive+0x48>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <xQueueReceive+0x4c>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <xQueueReceive+0x4e>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <xQueueReceive+0x56>
 8002cf6:	b672      	cpsid	i
 8002cf8:	e7fe      	b.n	8002cf8 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cfa:	f001 f951 	bl	8003fa0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d02:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d01a      	beq.n	8002d40 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	0011      	movs	r1, r2
 8002d10:	0018      	movs	r0, r3
 8002d12:	f000 f8df 	bl	8002ed4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	1e5a      	subs	r2, r3, #1
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d008      	beq.n	8002d38 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	3310      	adds	r3, #16
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f000 fd0a 	bl	8003744 <xTaskRemoveFromEventList>
 8002d30:	1e03      	subs	r3, r0, #0
 8002d32:	d001      	beq.n	8002d38 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d34:	f001 f924 	bl	8003f80 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d38:	f001 f944 	bl	8003fc4 <vPortExitCritical>
				return pdPASS;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e062      	b.n	8002e06 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d103      	bne.n	8002d4e <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d46:	f001 f93d 	bl	8003fc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	e05b      	b.n	8002e06 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d106      	bne.n	8002d62 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d54:	2314      	movs	r3, #20
 8002d56:	18fb      	adds	r3, r7, r3
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f000 fd4f 	bl	80037fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d62:	f001 f92f 	bl	8003fc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d66:	f000 fb31 	bl	80033cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d6a:	f001 f919 	bl	8003fa0 <vPortEnterCritical>
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	2244      	movs	r2, #68	; 0x44
 8002d72:	5c9b      	ldrb	r3, [r3, r2]
 8002d74:	b25b      	sxtb	r3, r3
 8002d76:	3301      	adds	r3, #1
 8002d78:	d103      	bne.n	8002d82 <xQueueReceive+0xde>
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	2244      	movs	r2, #68	; 0x44
 8002d7e:	2100      	movs	r1, #0
 8002d80:	5499      	strb	r1, [r3, r2]
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	2245      	movs	r2, #69	; 0x45
 8002d86:	5c9b      	ldrb	r3, [r3, r2]
 8002d88:	b25b      	sxtb	r3, r3
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	d103      	bne.n	8002d96 <xQueueReceive+0xf2>
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	2245      	movs	r2, #69	; 0x45
 8002d92:	2100      	movs	r1, #0
 8002d94:	5499      	strb	r1, [r3, r2]
 8002d96:	f001 f915 	bl	8003fc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d9a:	1d3a      	adds	r2, r7, #4
 8002d9c:	2314      	movs	r3, #20
 8002d9e:	18fb      	adds	r3, r7, r3
 8002da0:	0011      	movs	r1, r2
 8002da2:	0018      	movs	r0, r3
 8002da4:	f000 fd3e 	bl	8003824 <xTaskCheckForTimeOut>
 8002da8:	1e03      	subs	r3, r0, #0
 8002daa:	d11e      	bne.n	8002dea <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	0018      	movs	r0, r3
 8002db0:	f000 f914 	bl	8002fdc <prvIsQueueEmpty>
 8002db4:	1e03      	subs	r3, r0, #0
 8002db6:	d011      	beq.n	8002ddc <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	3324      	adds	r3, #36	; 0x24
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	0011      	movs	r1, r2
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f000 fca1 	bl	8003708 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f000 f8a9 	bl	8002f20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002dce:	f000 fb09 	bl	80033e4 <xTaskResumeAll>
 8002dd2:	1e03      	subs	r3, r0, #0
 8002dd4:	d191      	bne.n	8002cfa <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8002dd6:	f001 f8d3 	bl	8003f80 <vPortYield>
 8002dda:	e78e      	b.n	8002cfa <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	0018      	movs	r0, r3
 8002de0:	f000 f89e 	bl	8002f20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002de4:	f000 fafe 	bl	80033e4 <xTaskResumeAll>
 8002de8:	e787      	b.n	8002cfa <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	0018      	movs	r0, r3
 8002dee:	f000 f897 	bl	8002f20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002df2:	f000 faf7 	bl	80033e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f000 f8ef 	bl	8002fdc <prvIsQueueEmpty>
 8002dfe:	1e03      	subs	r3, r0, #0
 8002e00:	d100      	bne.n	8002e04 <xQueueReceive+0x160>
 8002e02:	e77a      	b.n	8002cfa <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002e06:	0018      	movs	r0, r3
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	b00a      	add	sp, #40	; 0x28
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002e0e:	b590      	push	{r4, r7, lr}
 8002e10:	b08b      	sub	sp, #44	; 0x2c
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <xQueueReceiveFromISR+0x1a>
 8002e24:	b672      	cpsid	i
 8002e26:	e7fe      	b.n	8002e26 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d103      	bne.n	8002e36 <xQueueReceiveFromISR+0x28>
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <xQueueReceiveFromISR+0x2c>
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <xQueueReceiveFromISR+0x2e>
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <xQueueReceiveFromISR+0x36>
 8002e40:	b672      	cpsid	i
 8002e42:	e7fe      	b.n	8002e42 <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e44:	f001 f8d6 	bl	8003ff4 <ulSetInterruptMaskFromISR>
 8002e48:	0003      	movs	r3, r0
 8002e4a:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e50:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d032      	beq.n	8002ebe <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002e58:	2417      	movs	r4, #23
 8002e5a:	193b      	adds	r3, r7, r4
 8002e5c:	6a3a      	ldr	r2, [r7, #32]
 8002e5e:	2144      	movs	r1, #68	; 0x44
 8002e60:	5c52      	ldrb	r2, [r2, r1]
 8002e62:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	0011      	movs	r1, r2
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f000 f832 	bl	8002ed4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	1e5a      	subs	r2, r3, #1
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002e78:	193b      	adds	r3, r7, r4
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	b25b      	sxtb	r3, r3
 8002e7e:	3301      	adds	r3, #1
 8002e80:	d111      	bne.n	8002ea6 <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d016      	beq.n	8002eb8 <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	3310      	adds	r3, #16
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f000 fc58 	bl	8003744 <xTaskRemoveFromEventList>
 8002e94:	1e03      	subs	r3, r0, #0
 8002e96:	d00f      	beq.n	8002eb8 <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00c      	beq.n	8002eb8 <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	e008      	b.n	8002eb8 <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002ea6:	2317      	movs	r3, #23
 8002ea8:	18fb      	adds	r3, r7, r3
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	3301      	adds	r3, #1
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	b259      	sxtb	r1, r3
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	2244      	movs	r2, #68	; 0x44
 8002eb6:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24
 8002ebc:	e001      	b.n	8002ec2 <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f001 f89b 	bl	8004000 <vClearInterruptMaskFromISR>

	return xReturn;
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002ecc:	0018      	movs	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	b00b      	add	sp, #44	; 0x2c
 8002ed2:	bd90      	pop	{r4, r7, pc}

08002ed4 <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d018      	beq.n	8002f18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	18d2      	adds	r2, r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d303      	bcc.n	8002f08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68d9      	ldr	r1, [r3, #12]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	0018      	movs	r0, r3
 8002f14:	f002 f874 	bl	8005000 <memcpy>
	}
}
 8002f18:	46c0      	nop			; (mov r8, r8)
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b002      	add	sp, #8
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f28:	f001 f83a 	bl	8003fa0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f2c:	230f      	movs	r3, #15
 8002f2e:	18fb      	adds	r3, r7, r3
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	2145      	movs	r1, #69	; 0x45
 8002f34:	5c52      	ldrb	r2, [r2, r1]
 8002f36:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f38:	e013      	b.n	8002f62 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d016      	beq.n	8002f70 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3324      	adds	r3, #36	; 0x24
 8002f46:	0018      	movs	r0, r3
 8002f48:	f000 fbfc 	bl	8003744 <xTaskRemoveFromEventList>
 8002f4c:	1e03      	subs	r3, r0, #0
 8002f4e:	d001      	beq.n	8002f54 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f50:	f000 fcb8 	bl	80038c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f54:	210f      	movs	r1, #15
 8002f56:	187b      	adds	r3, r7, r1
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	187b      	adds	r3, r7, r1
 8002f60:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f62:	230f      	movs	r3, #15
 8002f64:	18fb      	adds	r3, r7, r3
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	b25b      	sxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	dce5      	bgt.n	8002f3a <prvUnlockQueue+0x1a>
 8002f6e:	e000      	b.n	8002f72 <prvUnlockQueue+0x52>
					break;
 8002f70:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2245      	movs	r2, #69	; 0x45
 8002f76:	21ff      	movs	r1, #255	; 0xff
 8002f78:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8002f7a:	f001 f823 	bl	8003fc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f7e:	f001 f80f 	bl	8003fa0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f82:	230e      	movs	r3, #14
 8002f84:	18fb      	adds	r3, r7, r3
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	2144      	movs	r1, #68	; 0x44
 8002f8a:	5c52      	ldrb	r2, [r2, r1]
 8002f8c:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f8e:	e013      	b.n	8002fb8 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d016      	beq.n	8002fc6 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3310      	adds	r3, #16
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	f000 fbd1 	bl	8003744 <xTaskRemoveFromEventList>
 8002fa2:	1e03      	subs	r3, r0, #0
 8002fa4:	d001      	beq.n	8002faa <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8002fa6:	f000 fc8d 	bl	80038c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002faa:	210e      	movs	r1, #14
 8002fac:	187b      	adds	r3, r7, r1
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	187b      	adds	r3, r7, r1
 8002fb6:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fb8:	230e      	movs	r3, #14
 8002fba:	18fb      	adds	r3, r7, r3
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	b25b      	sxtb	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	dce5      	bgt.n	8002f90 <prvUnlockQueue+0x70>
 8002fc4:	e000      	b.n	8002fc8 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8002fc6:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2244      	movs	r2, #68	; 0x44
 8002fcc:	21ff      	movs	r1, #255	; 0xff
 8002fce:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8002fd0:	f000 fff8 	bl	8003fc4 <vPortExitCritical>
}
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b004      	add	sp, #16
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fe4:	f000 ffdc 	bl	8003fa0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d102      	bne.n	8002ff6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	e001      	b.n	8002ffa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ffa:	f000 ffe3 	bl	8003fc4 <vPortExitCritical>

	return xReturn;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
}
 8003000:	0018      	movs	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	b004      	add	sp, #16
 8003006:	bd80      	pop	{r7, pc}

08003008 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003008:	b590      	push	{r4, r7, lr}
 800300a:	b08d      	sub	sp, #52	; 0x34
 800300c:	af04      	add	r7, sp, #16
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <xTaskCreateStatic+0x18>
 800301c:	b672      	cpsid	i
 800301e:	e7fe      	b.n	800301e <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8003020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <xTaskCreateStatic+0x22>
 8003026:	b672      	cpsid	i
 8003028:	e7fe      	b.n	8003028 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800302a:	2354      	movs	r3, #84	; 0x54
 800302c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2b54      	cmp	r3, #84	; 0x54
 8003032:	d001      	beq.n	8003038 <xTaskCreateStatic+0x30>
 8003034:	b672      	cpsid	i
 8003036:	e7fe      	b.n	8003036 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303a:	2b00      	cmp	r3, #0
 800303c:	d020      	beq.n	8003080 <xTaskCreateStatic+0x78>
 800303e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003040:	2b00      	cmp	r3, #0
 8003042:	d01d      	beq.n	8003080 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003046:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800304c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	2251      	movs	r2, #81	; 0x51
 8003052:	2102      	movs	r1, #2
 8003054:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003056:	683c      	ldr	r4, [r7, #0]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	68b9      	ldr	r1, [r7, #8]
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	2300      	movs	r3, #0
 8003060:	9303      	str	r3, [sp, #12]
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	9302      	str	r3, [sp, #8]
 8003066:	2318      	movs	r3, #24
 8003068:	18fb      	adds	r3, r7, r3
 800306a:	9301      	str	r3, [sp, #4]
 800306c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	0023      	movs	r3, r4
 8003072:	f000 f859 	bl	8003128 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	0018      	movs	r0, r3
 800307a:	f000 f8cf 	bl	800321c <prvAddNewTaskToReadyList>
 800307e:	e001      	b.n	8003084 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8003080:	2300      	movs	r3, #0
 8003082:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003084:	69bb      	ldr	r3, [r7, #24]
	}
 8003086:	0018      	movs	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	b009      	add	sp, #36	; 0x24
 800308c:	bd90      	pop	{r4, r7, pc}

0800308e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800308e:	b590      	push	{r4, r7, lr}
 8003090:	b08d      	sub	sp, #52	; 0x34
 8003092:	af04      	add	r7, sp, #16
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	603b      	str	r3, [r7, #0]
 800309a:	1dbb      	adds	r3, r7, #6
 800309c:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800309e:	1dbb      	adds	r3, r7, #6
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	0018      	movs	r0, r3
 80030a6:	f001 f813 	bl	80040d0 <pvPortMalloc>
 80030aa:	0003      	movs	r3, r0
 80030ac:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d010      	beq.n	80030d6 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80030b4:	2054      	movs	r0, #84	; 0x54
 80030b6:	f001 f80b 	bl	80040d0 <pvPortMalloc>
 80030ba:	0003      	movs	r3, r0
 80030bc:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	631a      	str	r2, [r3, #48]	; 0x30
 80030ca:	e006      	b.n	80030da <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	0018      	movs	r0, r3
 80030d0:	f001 f8a4 	bl	800421c <vPortFree>
 80030d4:	e001      	b.n	80030da <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d01a      	beq.n	8003116 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	2251      	movs	r2, #81	; 0x51
 80030e4:	2100      	movs	r1, #0
 80030e6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030e8:	1dbb      	adds	r3, r7, #6
 80030ea:	881a      	ldrh	r2, [r3, #0]
 80030ec:	683c      	ldr	r4, [r7, #0]
 80030ee:	68b9      	ldr	r1, [r7, #8]
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	2300      	movs	r3, #0
 80030f4:	9303      	str	r3, [sp, #12]
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	9302      	str	r3, [sp, #8]
 80030fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030fc:	9301      	str	r3, [sp, #4]
 80030fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	0023      	movs	r3, r4
 8003104:	f000 f810 	bl	8003128 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	0018      	movs	r0, r3
 800310c:	f000 f886 	bl	800321c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003110:	2301      	movs	r3, #1
 8003112:	61bb      	str	r3, [r7, #24]
 8003114:	e002      	b.n	800311c <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003116:	2301      	movs	r3, #1
 8003118:	425b      	negs	r3, r3
 800311a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800311c:	69bb      	ldr	r3, [r7, #24]
	}
 800311e:	0018      	movs	r0, r3
 8003120:	46bd      	mov	sp, r7
 8003122:	b009      	add	sp, #36	; 0x24
 8003124:	bd90      	pop	{r4, r7, pc}
	...

08003128 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4936      	ldr	r1, [pc, #216]	; (8003218 <prvInitialiseNewTask+0xf0>)
 800313e:	468c      	mov	ip, r1
 8003140:	4463      	add	r3, ip
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	18d3      	adds	r3, r2, r3
 8003146:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	2207      	movs	r2, #7
 800314c:	4393      	bics	r3, r2
 800314e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	2207      	movs	r2, #7
 8003154:	4013      	ands	r3, r2
 8003156:	d001      	beq.n	800315c <prvInitialiseNewTask+0x34>
 8003158:	b672      	cpsid	i
 800315a:	e7fe      	b.n	800315a <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	e013      	b.n	800318a <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	18d3      	adds	r3, r2, r3
 8003168:	7818      	ldrb	r0, [r3, #0]
 800316a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800316c:	2134      	movs	r1, #52	; 0x34
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	18d3      	adds	r3, r2, r3
 8003172:	185b      	adds	r3, r3, r1
 8003174:	1c02      	adds	r2, r0, #0
 8003176:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	18d3      	adds	r3, r2, r3
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d006      	beq.n	8003192 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	3301      	adds	r3, #1
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2b0f      	cmp	r3, #15
 800318e:	d9e8      	bls.n	8003162 <prvInitialiseNewTask+0x3a>
 8003190:	e000      	b.n	8003194 <prvInitialiseNewTask+0x6c>
		{
			break;
 8003192:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003196:	2243      	movs	r2, #67	; 0x43
 8003198:	2100      	movs	r1, #0
 800319a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	2b06      	cmp	r3, #6
 80031a0:	d901      	bls.n	80031a6 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80031a2:	2306      	movs	r3, #6
 80031a4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80031a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a8:	6a3a      	ldr	r2, [r7, #32]
 80031aa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80031ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ae:	6a3a      	ldr	r2, [r7, #32]
 80031b0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80031b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b4:	2200      	movs	r2, #0
 80031b6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ba:	3304      	adds	r3, #4
 80031bc:	0018      	movs	r0, r3
 80031be:	f7ff fbef 	bl	80029a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c4:	3318      	adds	r3, #24
 80031c6:	0018      	movs	r0, r3
 80031c8:	f7ff fbea 	bl	80029a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	2207      	movs	r2, #7
 80031d6:	1ad2      	subs	r2, r2, r3
 80031d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031e0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80031e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e4:	2200      	movs	r2, #0
 80031e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80031e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ea:	2250      	movs	r2, #80	; 0x50
 80031ec:	2100      	movs	r1, #0
 80031ee:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	68f9      	ldr	r1, [r7, #12]
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	0018      	movs	r0, r3
 80031f8:	f000 fe36 	bl	8003e68 <pxPortInitialiseStack>
 80031fc:	0002      	movs	r2, r0
 80031fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003200:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800320c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	46bd      	mov	sp, r7
 8003212:	b006      	add	sp, #24
 8003214:	bd80      	pop	{r7, pc}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	3fffffff 	.word	0x3fffffff

0800321c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003224:	f000 febc 	bl	8003fa0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003228:	4b28      	ldr	r3, [pc, #160]	; (80032cc <prvAddNewTaskToReadyList+0xb0>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	4b27      	ldr	r3, [pc, #156]	; (80032cc <prvAddNewTaskToReadyList+0xb0>)
 8003230:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003232:	4b27      	ldr	r3, [pc, #156]	; (80032d0 <prvAddNewTaskToReadyList+0xb4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d109      	bne.n	800324e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800323a:	4b25      	ldr	r3, [pc, #148]	; (80032d0 <prvAddNewTaskToReadyList+0xb4>)
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003240:	4b22      	ldr	r3, [pc, #136]	; (80032cc <prvAddNewTaskToReadyList+0xb0>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d110      	bne.n	800326a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003248:	f000 fb56 	bl	80038f8 <prvInitialiseTaskLists>
 800324c:	e00d      	b.n	800326a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800324e:	4b21      	ldr	r3, [pc, #132]	; (80032d4 <prvAddNewTaskToReadyList+0xb8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d109      	bne.n	800326a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003256:	4b1e      	ldr	r3, [pc, #120]	; (80032d0 <prvAddNewTaskToReadyList+0xb4>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	429a      	cmp	r2, r3
 8003262:	d802      	bhi.n	800326a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003264:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <prvAddNewTaskToReadyList+0xb4>)
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800326a:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <prvAddNewTaskToReadyList+0xbc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	4b19      	ldr	r3, [pc, #100]	; (80032d8 <prvAddNewTaskToReadyList+0xbc>)
 8003272:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003278:	4b18      	ldr	r3, [pc, #96]	; (80032dc <prvAddNewTaskToReadyList+0xc0>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d903      	bls.n	8003288 <prvAddNewTaskToReadyList+0x6c>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003284:	4b15      	ldr	r3, [pc, #84]	; (80032dc <prvAddNewTaskToReadyList+0xc0>)
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800328c:	0013      	movs	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	189b      	adds	r3, r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4a12      	ldr	r2, [pc, #72]	; (80032e0 <prvAddNewTaskToReadyList+0xc4>)
 8003296:	189a      	adds	r2, r3, r2
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3304      	adds	r3, #4
 800329c:	0019      	movs	r1, r3
 800329e:	0010      	movs	r0, r2
 80032a0:	f7ff fb89 	bl	80029b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80032a4:	f000 fe8e 	bl	8003fc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80032a8:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <prvAddNewTaskToReadyList+0xb8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80032b0:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <prvAddNewTaskToReadyList+0xb4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d201      	bcs.n	80032c2 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80032be:	f000 fe5f 	bl	8003f80 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	46bd      	mov	sp, r7
 80032c6:	b002      	add	sp, #8
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	20000124 	.word	0x20000124
 80032d0:	20000024 	.word	0x20000024
 80032d4:	20000130 	.word	0x20000130
 80032d8:	20000140 	.word	0x20000140
 80032dc:	2000012c 	.word	0x2000012c
 80032e0:	20000028 	.word	0x20000028

080032e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80032ec:	2300      	movs	r3, #0
 80032ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d010      	beq.n	8003318 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80032f6:	4b0d      	ldr	r3, [pc, #52]	; (800332c <vTaskDelay+0x48>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <vTaskDelay+0x1e>
 80032fe:	b672      	cpsid	i
 8003300:	e7fe      	b.n	8003300 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8003302:	f000 f863 	bl	80033cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2100      	movs	r1, #0
 800330a:	0018      	movs	r0, r3
 800330c:	f000 fd58 	bl	8003dc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003310:	f000 f868 	bl	80033e4 <xTaskResumeAll>
 8003314:	0003      	movs	r3, r0
 8003316:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800331e:	f000 fe2f 	bl	8003f80 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	46bd      	mov	sp, r7
 8003326:	b004      	add	sp, #16
 8003328:	bd80      	pop	{r7, pc}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	2000014c 	.word	0x2000014c

08003330 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003330:	b590      	push	{r4, r7, lr}
 8003332:	b089      	sub	sp, #36	; 0x24
 8003334:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003336:	2300      	movs	r3, #0
 8003338:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800333a:	2300      	movs	r3, #0
 800333c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800333e:	003a      	movs	r2, r7
 8003340:	1d39      	adds	r1, r7, #4
 8003342:	2308      	movs	r3, #8
 8003344:	18fb      	adds	r3, r7, r3
 8003346:	0018      	movs	r0, r3
 8003348:	f001 f868 	bl	800441c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800334c:	683c      	ldr	r4, [r7, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	4918      	ldr	r1, [pc, #96]	; (80033b4 <vTaskStartScheduler+0x84>)
 8003354:	4818      	ldr	r0, [pc, #96]	; (80033b8 <vTaskStartScheduler+0x88>)
 8003356:	9202      	str	r2, [sp, #8]
 8003358:	9301      	str	r3, [sp, #4]
 800335a:	2300      	movs	r3, #0
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	2300      	movs	r3, #0
 8003360:	0022      	movs	r2, r4
 8003362:	f7ff fe51 	bl	8003008 <xTaskCreateStatic>
 8003366:	0002      	movs	r2, r0
 8003368:	4b14      	ldr	r3, [pc, #80]	; (80033bc <vTaskStartScheduler+0x8c>)
 800336a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800336c:	4b13      	ldr	r3, [pc, #76]	; (80033bc <vTaskStartScheduler+0x8c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003374:	2301      	movs	r3, #1
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	e001      	b.n	800337e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d10d      	bne.n	80033a0 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003384:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003386:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <vTaskStartScheduler+0x90>)
 8003388:	2201      	movs	r2, #1
 800338a:	4252      	negs	r2, r2
 800338c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800338e:	4b0d      	ldr	r3, [pc, #52]	; (80033c4 <vTaskStartScheduler+0x94>)
 8003390:	2201      	movs	r2, #1
 8003392:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003394:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <vTaskStartScheduler+0x98>)
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800339a:	f000 fdcd 	bl	8003f38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800339e:	e004      	b.n	80033aa <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	3301      	adds	r3, #1
 80033a4:	d101      	bne.n	80033aa <vTaskStartScheduler+0x7a>
 80033a6:	b672      	cpsid	i
 80033a8:	e7fe      	b.n	80033a8 <vTaskStartScheduler+0x78>
}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	46bd      	mov	sp, r7
 80033ae:	b005      	add	sp, #20
 80033b0:	bd90      	pop	{r4, r7, pc}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	0800503c 	.word	0x0800503c
 80033b8:	080038d9 	.word	0x080038d9
 80033bc:	20000148 	.word	0x20000148
 80033c0:	20000144 	.word	0x20000144
 80033c4:	20000130 	.word	0x20000130
 80033c8:	20000128 	.word	0x20000128

080033cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80033d0:	4b03      	ldr	r3, [pc, #12]	; (80033e0 <vTaskSuspendAll+0x14>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	4b02      	ldr	r3, [pc, #8]	; (80033e0 <vTaskSuspendAll+0x14>)
 80033d8:	601a      	str	r2, [r3, #0]
}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	2000014c 	.word	0x2000014c

080033e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80033f2:	4b3a      	ldr	r3, [pc, #232]	; (80034dc <xTaskResumeAll+0xf8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <xTaskResumeAll+0x1a>
 80033fa:	b672      	cpsid	i
 80033fc:	e7fe      	b.n	80033fc <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80033fe:	f000 fdcf 	bl	8003fa0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003402:	4b36      	ldr	r3, [pc, #216]	; (80034dc <xTaskResumeAll+0xf8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	1e5a      	subs	r2, r3, #1
 8003408:	4b34      	ldr	r3, [pc, #208]	; (80034dc <xTaskResumeAll+0xf8>)
 800340a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800340c:	4b33      	ldr	r3, [pc, #204]	; (80034dc <xTaskResumeAll+0xf8>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d15b      	bne.n	80034cc <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003414:	4b32      	ldr	r3, [pc, #200]	; (80034e0 <xTaskResumeAll+0xfc>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d057      	beq.n	80034cc <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800341c:	e02f      	b.n	800347e <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800341e:	4b31      	ldr	r3, [pc, #196]	; (80034e4 <xTaskResumeAll+0x100>)
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	3318      	adds	r3, #24
 800342a:	0018      	movs	r0, r3
 800342c:	f7ff fb1b 	bl	8002a66 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	3304      	adds	r3, #4
 8003434:	0018      	movs	r0, r3
 8003436:	f7ff fb16 	bl	8002a66 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343e:	4b2a      	ldr	r3, [pc, #168]	; (80034e8 <xTaskResumeAll+0x104>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d903      	bls.n	800344e <xTaskResumeAll+0x6a>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344a:	4b27      	ldr	r3, [pc, #156]	; (80034e8 <xTaskResumeAll+0x104>)
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003452:	0013      	movs	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	189b      	adds	r3, r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4a24      	ldr	r2, [pc, #144]	; (80034ec <xTaskResumeAll+0x108>)
 800345c:	189a      	adds	r2, r3, r2
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	3304      	adds	r3, #4
 8003462:	0019      	movs	r1, r3
 8003464:	0010      	movs	r0, r2
 8003466:	f7ff faa6 	bl	80029b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800346e:	4b20      	ldr	r3, [pc, #128]	; (80034f0 <xTaskResumeAll+0x10c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	429a      	cmp	r2, r3
 8003476:	d302      	bcc.n	800347e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8003478:	4b1e      	ldr	r3, [pc, #120]	; (80034f4 <xTaskResumeAll+0x110>)
 800347a:	2201      	movs	r2, #1
 800347c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800347e:	4b19      	ldr	r3, [pc, #100]	; (80034e4 <xTaskResumeAll+0x100>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1cb      	bne.n	800341e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800348c:	f000 face 	bl	8003a2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003490:	4b19      	ldr	r3, [pc, #100]	; (80034f8 <xTaskResumeAll+0x114>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00f      	beq.n	80034bc <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800349c:	f000 f82e 	bl	80034fc <xTaskIncrementTick>
 80034a0:	1e03      	subs	r3, r0, #0
 80034a2:	d002      	beq.n	80034aa <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80034a4:	4b13      	ldr	r3, [pc, #76]	; (80034f4 <xTaskResumeAll+0x110>)
 80034a6:	2201      	movs	r2, #1
 80034a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3b01      	subs	r3, #1
 80034ae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f2      	bne.n	800349c <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80034b6:	4b10      	ldr	r3, [pc, #64]	; (80034f8 <xTaskResumeAll+0x114>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80034bc:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <xTaskResumeAll+0x110>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d003      	beq.n	80034cc <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80034c4:	2301      	movs	r3, #1
 80034c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80034c8:	f000 fd5a 	bl	8003f80 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80034cc:	f000 fd7a 	bl	8003fc4 <vPortExitCritical>

	return xAlreadyYielded;
 80034d0:	68bb      	ldr	r3, [r7, #8]
}
 80034d2:	0018      	movs	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	b004      	add	sp, #16
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	2000014c 	.word	0x2000014c
 80034e0:	20000124 	.word	0x20000124
 80034e4:	200000e4 	.word	0x200000e4
 80034e8:	2000012c 	.word	0x2000012c
 80034ec:	20000028 	.word	0x20000028
 80034f0:	20000024 	.word	0x20000024
 80034f4:	20000138 	.word	0x20000138
 80034f8:	20000134 	.word	0x20000134

080034fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003506:	4b4c      	ldr	r3, [pc, #304]	; (8003638 <xTaskIncrementTick+0x13c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d000      	beq.n	8003510 <xTaskIncrementTick+0x14>
 800350e:	e083      	b.n	8003618 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003510:	4b4a      	ldr	r3, [pc, #296]	; (800363c <xTaskIncrementTick+0x140>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3301      	adds	r3, #1
 8003516:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003518:	4b48      	ldr	r3, [pc, #288]	; (800363c <xTaskIncrementTick+0x140>)
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d117      	bne.n	8003554 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8003524:	4b46      	ldr	r3, [pc, #280]	; (8003640 <xTaskIncrementTick+0x144>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <xTaskIncrementTick+0x36>
 800352e:	b672      	cpsid	i
 8003530:	e7fe      	b.n	8003530 <xTaskIncrementTick+0x34>
 8003532:	4b43      	ldr	r3, [pc, #268]	; (8003640 <xTaskIncrementTick+0x144>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	4b42      	ldr	r3, [pc, #264]	; (8003644 <xTaskIncrementTick+0x148>)
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	4b40      	ldr	r3, [pc, #256]	; (8003640 <xTaskIncrementTick+0x144>)
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	4b40      	ldr	r3, [pc, #256]	; (8003644 <xTaskIncrementTick+0x148>)
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	4b40      	ldr	r3, [pc, #256]	; (8003648 <xTaskIncrementTick+0x14c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	4b3e      	ldr	r3, [pc, #248]	; (8003648 <xTaskIncrementTick+0x14c>)
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	f000 fa6c 	bl	8003a2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003554:	4b3d      	ldr	r3, [pc, #244]	; (800364c <xTaskIncrementTick+0x150>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	429a      	cmp	r2, r3
 800355c:	d34e      	bcc.n	80035fc <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800355e:	4b38      	ldr	r3, [pc, #224]	; (8003640 <xTaskIncrementTick+0x144>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <xTaskIncrementTick+0x70>
 8003568:	2301      	movs	r3, #1
 800356a:	e000      	b.n	800356e <xTaskIncrementTick+0x72>
 800356c:	2300      	movs	r3, #0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d004      	beq.n	800357c <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003572:	4b36      	ldr	r3, [pc, #216]	; (800364c <xTaskIncrementTick+0x150>)
 8003574:	2201      	movs	r2, #1
 8003576:	4252      	negs	r2, r2
 8003578:	601a      	str	r2, [r3, #0]
					break;
 800357a:	e03f      	b.n	80035fc <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800357c:	4b30      	ldr	r3, [pc, #192]	; (8003640 <xTaskIncrementTick+0x144>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	429a      	cmp	r2, r3
 8003592:	d203      	bcs.n	800359c <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003594:	4b2d      	ldr	r3, [pc, #180]	; (800364c <xTaskIncrementTick+0x150>)
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	601a      	str	r2, [r3, #0]
						break;
 800359a:	e02f      	b.n	80035fc <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	3304      	adds	r3, #4
 80035a0:	0018      	movs	r0, r3
 80035a2:	f7ff fa60 	bl	8002a66 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d004      	beq.n	80035b8 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	3318      	adds	r3, #24
 80035b2:	0018      	movs	r0, r3
 80035b4:	f7ff fa57 	bl	8002a66 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035bc:	4b24      	ldr	r3, [pc, #144]	; (8003650 <xTaskIncrementTick+0x154>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d903      	bls.n	80035cc <xTaskIncrementTick+0xd0>
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c8:	4b21      	ldr	r3, [pc, #132]	; (8003650 <xTaskIncrementTick+0x154>)
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d0:	0013      	movs	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	189b      	adds	r3, r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4a1e      	ldr	r2, [pc, #120]	; (8003654 <xTaskIncrementTick+0x158>)
 80035da:	189a      	adds	r2, r3, r2
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	3304      	adds	r3, #4
 80035e0:	0019      	movs	r1, r3
 80035e2:	0010      	movs	r0, r2
 80035e4:	f7ff f9e7 	bl	80029b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ec:	4b1a      	ldr	r3, [pc, #104]	; (8003658 <xTaskIncrementTick+0x15c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d3b3      	bcc.n	800355e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80035f6:	2301      	movs	r3, #1
 80035f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035fa:	e7b0      	b.n	800355e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80035fc:	4b16      	ldr	r3, [pc, #88]	; (8003658 <xTaskIncrementTick+0x15c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003602:	4914      	ldr	r1, [pc, #80]	; (8003654 <xTaskIncrementTick+0x158>)
 8003604:	0013      	movs	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	189b      	adds	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	585b      	ldr	r3, [r3, r1]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d907      	bls.n	8003622 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003612:	2301      	movs	r3, #1
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	e004      	b.n	8003622 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003618:	4b10      	ldr	r3, [pc, #64]	; (800365c <xTaskIncrementTick+0x160>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	4b0f      	ldr	r3, [pc, #60]	; (800365c <xTaskIncrementTick+0x160>)
 8003620:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003622:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <xTaskIncrementTick+0x164>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800362a:	2301      	movs	r3, #1
 800362c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800362e:	697b      	ldr	r3, [r7, #20]
}
 8003630:	0018      	movs	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	b006      	add	sp, #24
 8003636:	bd80      	pop	{r7, pc}
 8003638:	2000014c 	.word	0x2000014c
 800363c:	20000128 	.word	0x20000128
 8003640:	200000dc 	.word	0x200000dc
 8003644:	200000e0 	.word	0x200000e0
 8003648:	2000013c 	.word	0x2000013c
 800364c:	20000144 	.word	0x20000144
 8003650:	2000012c 	.word	0x2000012c
 8003654:	20000028 	.word	0x20000028
 8003658:	20000024 	.word	0x20000024
 800365c:	20000134 	.word	0x20000134
 8003660:	20000138 	.word	0x20000138

08003664 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800366a:	4b22      	ldr	r3, [pc, #136]	; (80036f4 <vTaskSwitchContext+0x90>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003672:	4b21      	ldr	r3, [pc, #132]	; (80036f8 <vTaskSwitchContext+0x94>)
 8003674:	2201      	movs	r2, #1
 8003676:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003678:	e037      	b.n	80036ea <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800367a:	4b1f      	ldr	r3, [pc, #124]	; (80036f8 <vTaskSwitchContext+0x94>)
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003680:	4b1e      	ldr	r3, [pc, #120]	; (80036fc <vTaskSwitchContext+0x98>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	607b      	str	r3, [r7, #4]
 8003686:	e007      	b.n	8003698 <vTaskSwitchContext+0x34>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <vTaskSwitchContext+0x2e>
 800368e:	b672      	cpsid	i
 8003690:	e7fe      	b.n	8003690 <vTaskSwitchContext+0x2c>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3b01      	subs	r3, #1
 8003696:	607b      	str	r3, [r7, #4]
 8003698:	4919      	ldr	r1, [pc, #100]	; (8003700 <vTaskSwitchContext+0x9c>)
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	0013      	movs	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	189b      	adds	r3, r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	585b      	ldr	r3, [r3, r1]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0ee      	beq.n	8003688 <vTaskSwitchContext+0x24>
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	0013      	movs	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	189b      	adds	r3, r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4a12      	ldr	r2, [pc, #72]	; (8003700 <vTaskSwitchContext+0x9c>)
 80036b6:	189b      	adds	r3, r3, r2
 80036b8:	603b      	str	r3, [r7, #0]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	605a      	str	r2, [r3, #4]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	3308      	adds	r3, #8
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d104      	bne.n	80036da <vTaskSwitchContext+0x76>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	605a      	str	r2, [r3, #4]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	4b08      	ldr	r3, [pc, #32]	; (8003704 <vTaskSwitchContext+0xa0>)
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	4b05      	ldr	r3, [pc, #20]	; (80036fc <vTaskSwitchContext+0x98>)
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	601a      	str	r2, [r3, #0]
}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b002      	add	sp, #8
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	2000014c 	.word	0x2000014c
 80036f8:	20000138 	.word	0x20000138
 80036fc:	2000012c 	.word	0x2000012c
 8003700:	20000028 	.word	0x20000028
 8003704:	20000024 	.word	0x20000024

08003708 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <vTaskPlaceOnEventList+0x14>
 8003718:	b672      	cpsid	i
 800371a:	e7fe      	b.n	800371a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800371c:	4b08      	ldr	r3, [pc, #32]	; (8003740 <vTaskPlaceOnEventList+0x38>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3318      	adds	r3, #24
 8003722:	001a      	movs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	0011      	movs	r1, r2
 8003728:	0018      	movs	r0, r3
 800372a:	f7ff f966 	bl	80029fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2101      	movs	r1, #1
 8003732:	0018      	movs	r0, r3
 8003734:	f000 fb44 	bl	8003dc0 <prvAddCurrentTaskToDelayedList>
}
 8003738:	46c0      	nop			; (mov r8, r8)
 800373a:	46bd      	mov	sp, r7
 800373c:	b002      	add	sp, #8
 800373e:	bd80      	pop	{r7, pc}
 8003740:	20000024 	.word	0x20000024

08003744 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <xTaskRemoveFromEventList+0x1a>
 800375a:	b672      	cpsid	i
 800375c:	e7fe      	b.n	800375c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	3318      	adds	r3, #24
 8003762:	0018      	movs	r0, r3
 8003764:	f7ff f97f 	bl	8002a66 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003768:	4b1e      	ldr	r3, [pc, #120]	; (80037e4 <xTaskRemoveFromEventList+0xa0>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d11d      	bne.n	80037ac <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	3304      	adds	r3, #4
 8003774:	0018      	movs	r0, r3
 8003776:	f7ff f976 	bl	8002a66 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377e:	4b1a      	ldr	r3, [pc, #104]	; (80037e8 <xTaskRemoveFromEventList+0xa4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d903      	bls.n	800378e <xTaskRemoveFromEventList+0x4a>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800378a:	4b17      	ldr	r3, [pc, #92]	; (80037e8 <xTaskRemoveFromEventList+0xa4>)
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003792:	0013      	movs	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	189b      	adds	r3, r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4a14      	ldr	r2, [pc, #80]	; (80037ec <xTaskRemoveFromEventList+0xa8>)
 800379c:	189a      	adds	r2, r3, r2
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	3304      	adds	r3, #4
 80037a2:	0019      	movs	r1, r3
 80037a4:	0010      	movs	r0, r2
 80037a6:	f7ff f906 	bl	80029b6 <vListInsertEnd>
 80037aa:	e007      	b.n	80037bc <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	3318      	adds	r3, #24
 80037b0:	001a      	movs	r2, r3
 80037b2:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <xTaskRemoveFromEventList+0xac>)
 80037b4:	0011      	movs	r1, r2
 80037b6:	0018      	movs	r0, r3
 80037b8:	f7ff f8fd 	bl	80029b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c0:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <xTaskRemoveFromEventList+0xb0>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d905      	bls.n	80037d6 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80037ca:	2301      	movs	r3, #1
 80037cc:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80037ce:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <xTaskRemoveFromEventList+0xb4>)
 80037d0:	2201      	movs	r2, #1
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	e001      	b.n	80037da <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80037d6:	2300      	movs	r3, #0
 80037d8:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80037da:	68fb      	ldr	r3, [r7, #12]
}
 80037dc:	0018      	movs	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	b004      	add	sp, #16
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	2000014c 	.word	0x2000014c
 80037e8:	2000012c 	.word	0x2000012c
 80037ec:	20000028 	.word	0x20000028
 80037f0:	200000e4 	.word	0x200000e4
 80037f4:	20000024 	.word	0x20000024
 80037f8:	20000138 	.word	0x20000138

080037fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003804:	4b05      	ldr	r3, [pc, #20]	; (800381c <vTaskInternalSetTimeOutState+0x20>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800380c:	4b04      	ldr	r3, [pc, #16]	; (8003820 <vTaskInternalSetTimeOutState+0x24>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	605a      	str	r2, [r3, #4]
}
 8003814:	46c0      	nop			; (mov r8, r8)
 8003816:	46bd      	mov	sp, r7
 8003818:	b002      	add	sp, #8
 800381a:	bd80      	pop	{r7, pc}
 800381c:	2000013c 	.word	0x2000013c
 8003820:	20000128 	.word	0x20000128

08003824 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <xTaskCheckForTimeOut+0x14>
 8003834:	b672      	cpsid	i
 8003836:	e7fe      	b.n	8003836 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <xTaskCheckForTimeOut+0x1e>
 800383e:	b672      	cpsid	i
 8003840:	e7fe      	b.n	8003840 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8003842:	f000 fbad 	bl	8003fa0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003846:	4b1d      	ldr	r3, [pc, #116]	; (80038bc <xTaskCheckForTimeOut+0x98>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	3301      	adds	r3, #1
 800385c:	d102      	bne.n	8003864 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	e024      	b.n	80038ae <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	4b15      	ldr	r3, [pc, #84]	; (80038c0 <xTaskCheckForTimeOut+0x9c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d007      	beq.n	8003880 <xTaskCheckForTimeOut+0x5c>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	429a      	cmp	r2, r3
 8003878:	d302      	bcc.n	8003880 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800387a:	2301      	movs	r3, #1
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	e016      	b.n	80038ae <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	429a      	cmp	r2, r3
 8003888:	d20c      	bcs.n	80038a4 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	1ad2      	subs	r2, r2, r3
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	0018      	movs	r0, r3
 800389a:	f7ff ffaf 	bl	80037fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800389e:	2300      	movs	r3, #0
 80038a0:	617b      	str	r3, [r7, #20]
 80038a2:	e004      	b.n	80038ae <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80038aa:	2301      	movs	r3, #1
 80038ac:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80038ae:	f000 fb89 	bl	8003fc4 <vPortExitCritical>

	return xReturn;
 80038b2:	697b      	ldr	r3, [r7, #20]
}
 80038b4:	0018      	movs	r0, r3
 80038b6:	46bd      	mov	sp, r7
 80038b8:	b006      	add	sp, #24
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	20000128 	.word	0x20000128
 80038c0:	2000013c 	.word	0x2000013c

080038c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80038c8:	4b02      	ldr	r3, [pc, #8]	; (80038d4 <vTaskMissedYield+0x10>)
 80038ca:	2201      	movs	r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
}
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	20000138 	.word	0x20000138

080038d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80038e0:	f000 f84e 	bl	8003980 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038e4:	4b03      	ldr	r3, [pc, #12]	; (80038f4 <prvIdleTask+0x1c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d9f9      	bls.n	80038e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80038ec:	f000 fb48 	bl	8003f80 <vPortYield>
		prvCheckTasksWaitingTermination();
 80038f0:	e7f6      	b.n	80038e0 <prvIdleTask+0x8>
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	20000028 	.word	0x20000028

080038f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038fe:	2300      	movs	r3, #0
 8003900:	607b      	str	r3, [r7, #4]
 8003902:	e00c      	b.n	800391e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	0013      	movs	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	189b      	adds	r3, r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4a14      	ldr	r2, [pc, #80]	; (8003960 <prvInitialiseTaskLists+0x68>)
 8003910:	189b      	adds	r3, r3, r2
 8003912:	0018      	movs	r0, r3
 8003914:	f7ff f826 	bl	8002964 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3301      	adds	r3, #1
 800391c:	607b      	str	r3, [r7, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b06      	cmp	r3, #6
 8003922:	d9ef      	bls.n	8003904 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003924:	4b0f      	ldr	r3, [pc, #60]	; (8003964 <prvInitialiseTaskLists+0x6c>)
 8003926:	0018      	movs	r0, r3
 8003928:	f7ff f81c 	bl	8002964 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800392c:	4b0e      	ldr	r3, [pc, #56]	; (8003968 <prvInitialiseTaskLists+0x70>)
 800392e:	0018      	movs	r0, r3
 8003930:	f7ff f818 	bl	8002964 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003934:	4b0d      	ldr	r3, [pc, #52]	; (800396c <prvInitialiseTaskLists+0x74>)
 8003936:	0018      	movs	r0, r3
 8003938:	f7ff f814 	bl	8002964 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800393c:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <prvInitialiseTaskLists+0x78>)
 800393e:	0018      	movs	r0, r3
 8003940:	f7ff f810 	bl	8002964 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003944:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <prvInitialiseTaskLists+0x7c>)
 8003946:	0018      	movs	r0, r3
 8003948:	f7ff f80c 	bl	8002964 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800394c:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <prvInitialiseTaskLists+0x80>)
 800394e:	4a05      	ldr	r2, [pc, #20]	; (8003964 <prvInitialiseTaskLists+0x6c>)
 8003950:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003952:	4b0a      	ldr	r3, [pc, #40]	; (800397c <prvInitialiseTaskLists+0x84>)
 8003954:	4a04      	ldr	r2, [pc, #16]	; (8003968 <prvInitialiseTaskLists+0x70>)
 8003956:	601a      	str	r2, [r3, #0]
}
 8003958:	46c0      	nop			; (mov r8, r8)
 800395a:	46bd      	mov	sp, r7
 800395c:	b002      	add	sp, #8
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20000028 	.word	0x20000028
 8003964:	200000b4 	.word	0x200000b4
 8003968:	200000c8 	.word	0x200000c8
 800396c:	200000e4 	.word	0x200000e4
 8003970:	200000f8 	.word	0x200000f8
 8003974:	20000110 	.word	0x20000110
 8003978:	200000dc 	.word	0x200000dc
 800397c:	200000e0 	.word	0x200000e0

08003980 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003986:	e01a      	b.n	80039be <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8003988:	f000 fb0a 	bl	8003fa0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800398c:	4b10      	ldr	r3, [pc, #64]	; (80039d0 <prvCheckTasksWaitingTermination+0x50>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3304      	adds	r3, #4
 8003998:	0018      	movs	r0, r3
 800399a:	f7ff f864 	bl	8002a66 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800399e:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <prvCheckTasksWaitingTermination+0x54>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	1e5a      	subs	r2, r3, #1
 80039a4:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <prvCheckTasksWaitingTermination+0x54>)
 80039a6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80039a8:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <prvCheckTasksWaitingTermination+0x58>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	1e5a      	subs	r2, r3, #1
 80039ae:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <prvCheckTasksWaitingTermination+0x58>)
 80039b0:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80039b2:	f000 fb07 	bl	8003fc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	0018      	movs	r0, r3
 80039ba:	f000 f80f 	bl	80039dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039be:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <prvCheckTasksWaitingTermination+0x58>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1e0      	bne.n	8003988 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	46bd      	mov	sp, r7
 80039ca:	b002      	add	sp, #8
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	200000f8 	.word	0x200000f8
 80039d4:	20000124 	.word	0x20000124
 80039d8:	2000010c 	.word	0x2000010c

080039dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2251      	movs	r2, #81	; 0x51
 80039e8:	5c9b      	ldrb	r3, [r3, r2]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	0018      	movs	r0, r3
 80039f4:	f000 fc12 	bl	800421c <vPortFree>
				vPortFree( pxTCB );
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	0018      	movs	r0, r3
 80039fc:	f000 fc0e 	bl	800421c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003a00:	e010      	b.n	8003a24 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2251      	movs	r2, #81	; 0x51
 8003a06:	5c9b      	ldrb	r3, [r3, r2]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d104      	bne.n	8003a16 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	0018      	movs	r0, r3
 8003a10:	f000 fc04 	bl	800421c <vPortFree>
	}
 8003a14:	e006      	b.n	8003a24 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2251      	movs	r2, #81	; 0x51
 8003a1a:	5c9b      	ldrb	r3, [r3, r2]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d001      	beq.n	8003a24 <prvDeleteTCB+0x48>
 8003a20:	b672      	cpsid	i
 8003a22:	e7fe      	b.n	8003a22 <prvDeleteTCB+0x46>
	}
 8003a24:	46c0      	nop			; (mov r8, r8)
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b002      	add	sp, #8
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a32:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <prvResetNextTaskUnblockTime+0x40>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <prvResetNextTaskUnblockTime+0x14>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e000      	b.n	8003a42 <prvResetNextTaskUnblockTime+0x16>
 8003a40:	2300      	movs	r3, #0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d004      	beq.n	8003a50 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a46:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <prvResetNextTaskUnblockTime+0x44>)
 8003a48:	2201      	movs	r2, #1
 8003a4a:	4252      	negs	r2, r2
 8003a4c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003a4e:	e008      	b.n	8003a62 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a50:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <prvResetNextTaskUnblockTime+0x40>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <prvResetNextTaskUnblockTime+0x44>)
 8003a60:	601a      	str	r2, [r3, #0]
}
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	46bd      	mov	sp, r7
 8003a66:	b002      	add	sp, #8
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	46c0      	nop			; (mov r8, r8)
 8003a6c:	200000dc 	.word	0x200000dc
 8003a70:	20000144 	.word	0x20000144

08003a74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003a7a:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <xTaskGetSchedulerState+0x30>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d102      	bne.n	8003a88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003a82:	2301      	movs	r3, #1
 8003a84:	607b      	str	r3, [r7, #4]
 8003a86:	e008      	b.n	8003a9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a88:	4b07      	ldr	r3, [pc, #28]	; (8003aa8 <xTaskGetSchedulerState+0x34>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d102      	bne.n	8003a96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003a90:	2302      	movs	r3, #2
 8003a92:	607b      	str	r3, [r7, #4]
 8003a94:	e001      	b.n	8003a9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003a96:	2300      	movs	r3, #0
 8003a98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003a9a:	687b      	ldr	r3, [r7, #4]
	}
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	b002      	add	sp, #8
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	20000130 	.word	0x20000130
 8003aa8:	2000014c 	.word	0x2000014c

08003aac <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8003aba:	f000 fa71 	bl	8003fa0 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8003abe:	4b24      	ldr	r3, [pc, #144]	; (8003b50 <xTaskNotifyWait+0xa4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2250      	movs	r2, #80	; 0x50
 8003ac4:	5c9b      	ldrb	r3, [r3, r2]
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d015      	beq.n	8003af8 <xTaskNotifyWait+0x4c>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8003acc:	4b20      	ldr	r3, [pc, #128]	; (8003b50 <xTaskNotifyWait+0xa4>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ad2:	68f9      	ldr	r1, [r7, #12]
 8003ad4:	43c9      	mvns	r1, r1
 8003ad6:	400a      	ands	r2, r1
 8003ad8:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8003ada:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <xTaskNotifyWait+0xa4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2250      	movs	r2, #80	; 0x50
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d006      	beq.n	8003af8 <xTaskNotifyWait+0x4c>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2101      	movs	r1, #1
 8003aee:	0018      	movs	r0, r3
 8003af0:	f000 f966 	bl	8003dc0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8003af4:	f000 fa44 	bl	8003f80 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8003af8:	f000 fa64 	bl	8003fc4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8003afc:	f000 fa50 	bl	8003fa0 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d004      	beq.n	8003b10 <xTaskNotifyWait+0x64>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8003b06:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <xTaskNotifyWait+0xa4>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8003b10:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <xTaskNotifyWait+0xa4>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2250      	movs	r2, #80	; 0x50
 8003b16:	5c9b      	ldrb	r3, [r3, r2]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d002      	beq.n	8003b24 <xTaskNotifyWait+0x78>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	e008      	b.n	8003b36 <xTaskNotifyWait+0x8a>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8003b24:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <xTaskNotifyWait+0xa4>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b2a:	68b9      	ldr	r1, [r7, #8]
 8003b2c:	43c9      	mvns	r1, r1
 8003b2e:	400a      	ands	r2, r1
 8003b30:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8003b32:	2301      	movs	r3, #1
 8003b34:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b36:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <xTaskNotifyWait+0xa4>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2250      	movs	r2, #80	; 0x50
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
 8003b40:	f000 fa40 	bl	8003fc4 <vPortExitCritical>

		return xReturn;
 8003b44:	697b      	ldr	r3, [r7, #20]
	}
 8003b46:	0018      	movs	r0, r3
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b006      	add	sp, #24
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	20000024 	.word	0x20000024

08003b54 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	1dfb      	adds	r3, r7, #7
 8003b62:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8003b64:	2301      	movs	r3, #1
 8003b66:	61fb      	str	r3, [r7, #28]
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <xTaskGenericNotify+0x1e>
 8003b6e:	b672      	cpsid	i
 8003b70:	e7fe      	b.n	8003b70 <xTaskGenericNotify+0x1c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
 8003b76:	f000 fa13 	bl	8003fa0 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <xTaskGenericNotify+0x34>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003b88:	2317      	movs	r3, #23
 8003b8a:	18fb      	adds	r3, r7, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	2150      	movs	r1, #80	; 0x50
 8003b90:	5c52      	ldrb	r2, [r2, r1]
 8003b92:	701a      	strb	r2, [r3, #0]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	2250      	movs	r2, #80	; 0x50
 8003b98:	2102      	movs	r1, #2
 8003b9a:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 8003b9c:	1dfb      	adds	r3, r7, #7
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d822      	bhi.n	8003bea <xTaskGenericNotify+0x96>
 8003ba4:	009a      	lsls	r2, r3, #2
 8003ba6:	4b2d      	ldr	r3, [pc, #180]	; (8003c5c <xTaskGenericNotify+0x108>)
 8003ba8:	18d3      	adds	r3, r2, r3
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8003bba:	e016      	b.n	8003bea <xTaskGenericNotify+0x96>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8003bc6:	e010      	b.n	8003bea <xTaskGenericNotify+0x96>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8003bce:	e00c      	b.n	8003bea <xTaskGenericNotify+0x96>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003bd0:	2317      	movs	r3, #23
 8003bd2:	18fb      	adds	r3, r7, r3
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d003      	beq.n	8003be2 <xTaskGenericNotify+0x8e>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8003be0:	e003      	b.n	8003bea <xTaskGenericNotify+0x96>
						xReturn = pdFAIL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
					break;
 8003be6:	e000      	b.n	8003bea <xTaskGenericNotify+0x96>

				case eNoAction:
					/* The task is being notified without its notify value being
					updated. */
					break;
 8003be8:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003bea:	2317      	movs	r3, #23
 8003bec:	18fb      	adds	r3, r7, r3
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d12b      	bne.n	8003c4c <xTaskGenericNotify+0xf8>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f7fe ff34 	bl	8002a66 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c02:	4b17      	ldr	r3, [pc, #92]	; (8003c60 <xTaskGenericNotify+0x10c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d903      	bls.n	8003c12 <xTaskGenericNotify+0xbe>
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0e:	4b14      	ldr	r3, [pc, #80]	; (8003c60 <xTaskGenericNotify+0x10c>)
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c16:	0013      	movs	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	189b      	adds	r3, r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4a11      	ldr	r2, [pc, #68]	; (8003c64 <xTaskGenericNotify+0x110>)
 8003c20:	189a      	adds	r2, r3, r2
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	3304      	adds	r3, #4
 8003c26:	0019      	movs	r1, r3
 8003c28:	0010      	movs	r0, r2
 8003c2a:	f7fe fec4 	bl	80029b6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <xTaskGenericNotify+0xe6>
 8003c36:	b672      	cpsid	i
 8003c38:	e7fe      	b.n	8003c38 <xTaskGenericNotify+0xe4>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3e:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <xTaskGenericNotify+0x114>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d901      	bls.n	8003c4c <xTaskGenericNotify+0xf8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8003c48:	f000 f99a 	bl	8003f80 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8003c4c:	f000 f9ba 	bl	8003fc4 <vPortExitCritical>

		return xReturn;
 8003c50:	69fb      	ldr	r3, [r7, #28]
	}
 8003c52:	0018      	movs	r0, r3
 8003c54:	46bd      	mov	sp, r7
 8003c56:	b008      	add	sp, #32
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	080050bc 	.word	0x080050bc
 8003c60:	2000012c 	.word	0x2000012c
 8003c64:	20000028 	.word	0x20000028
 8003c68:	20000024 	.word	0x20000024

08003c6c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b088      	sub	sp, #32
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	603b      	str	r3, [r7, #0]
 8003c78:	1dfb      	adds	r3, r7, #7
 8003c7a:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	61fb      	str	r3, [r7, #28]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <xTaskGenericNotifyFromISR+0x1e>
 8003c86:	b672      	cpsid	i
 8003c88:	e7fe      	b.n	8003c88 <xTaskGenericNotifyFromISR+0x1c>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	61bb      	str	r3, [r7, #24]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c8e:	f000 f9b1 	bl	8003ff4 <ulSetInterruptMaskFromISR>
 8003c92:	0003      	movs	r3, r0
 8003c94:	617b      	str	r3, [r7, #20]
		{
			if( pulPreviousNotificationValue != NULL )
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <xTaskGenericNotifyFromISR+0x38>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003ca4:	2313      	movs	r3, #19
 8003ca6:	18fb      	adds	r3, r7, r3
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	2150      	movs	r1, #80	; 0x50
 8003cac:	5c52      	ldrb	r2, [r2, r1]
 8003cae:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	2250      	movs	r2, #80	; 0x50
 8003cb4:	2102      	movs	r1, #2
 8003cb6:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 8003cb8:	1dfb      	adds	r3, r7, #7
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d822      	bhi.n	8003d06 <xTaskGenericNotifyFromISR+0x9a>
 8003cc0:	009a      	lsls	r2, r3, #2
 8003cc2:	4b38      	ldr	r3, [pc, #224]	; (8003da4 <xTaskGenericNotifyFromISR+0x138>)
 8003cc4:	18d3      	adds	r3, r2, r3
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8003cd6:	e016      	b.n	8003d06 <xTaskGenericNotifyFromISR+0x9a>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8003ce2:	e010      	b.n	8003d06 <xTaskGenericNotifyFromISR+0x9a>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8003cea:	e00c      	b.n	8003d06 <xTaskGenericNotifyFromISR+0x9a>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003cec:	2313      	movs	r3, #19
 8003cee:	18fb      	adds	r3, r7, r3
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d003      	beq.n	8003cfe <xTaskGenericNotifyFromISR+0x92>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8003cfc:	e003      	b.n	8003d06 <xTaskGenericNotifyFromISR+0x9a>
						xReturn = pdFAIL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61fb      	str	r3, [r7, #28]
					break;
 8003d02:	e000      	b.n	8003d06 <xTaskGenericNotifyFromISR+0x9a>

				case eNoAction :
					/* The task is being notified without its notify value being
					updated. */
					break;
 8003d04:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003d06:	2313      	movs	r3, #19
 8003d08:	18fb      	adds	r3, r7, r3
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d140      	bne.n	8003d92 <xTaskGenericNotifyFromISR+0x126>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <xTaskGenericNotifyFromISR+0xb0>
 8003d18:	b672      	cpsid	i
 8003d1a:	e7fe      	b.n	8003d1a <xTaskGenericNotifyFromISR+0xae>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d1c:	4b22      	ldr	r3, [pc, #136]	; (8003da8 <xTaskGenericNotifyFromISR+0x13c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d11d      	bne.n	8003d60 <xTaskGenericNotifyFromISR+0xf4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	3304      	adds	r3, #4
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f7fe fe9c 	bl	8002a66 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d32:	4b1e      	ldr	r3, [pc, #120]	; (8003dac <xTaskGenericNotifyFromISR+0x140>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d903      	bls.n	8003d42 <xTaskGenericNotifyFromISR+0xd6>
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d3e:	4b1b      	ldr	r3, [pc, #108]	; (8003dac <xTaskGenericNotifyFromISR+0x140>)
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d46:	0013      	movs	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	189b      	adds	r3, r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4a18      	ldr	r2, [pc, #96]	; (8003db0 <xTaskGenericNotifyFromISR+0x144>)
 8003d50:	189a      	adds	r2, r3, r2
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	3304      	adds	r3, #4
 8003d56:	0019      	movs	r1, r3
 8003d58:	0010      	movs	r0, r2
 8003d5a:	f7fe fe2c 	bl	80029b6 <vListInsertEnd>
 8003d5e:	e007      	b.n	8003d70 <xTaskGenericNotifyFromISR+0x104>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	3318      	adds	r3, #24
 8003d64:	001a      	movs	r2, r3
 8003d66:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <xTaskGenericNotifyFromISR+0x148>)
 8003d68:	0011      	movs	r1, r2
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f7fe fe23 	bl	80029b6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d74:	4b10      	ldr	r3, [pc, #64]	; (8003db8 <xTaskGenericNotifyFromISR+0x14c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d909      	bls.n	8003d92 <xTaskGenericNotifyFromISR+0x126>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8003d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <xTaskGenericNotifyFromISR+0x120>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8003d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d86:	2201      	movs	r2, #1
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	e002      	b.n	8003d92 <xTaskGenericNotifyFromISR+0x126>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <xTaskGenericNotifyFromISR+0x150>)
 8003d8e:	2201      	movs	r2, #1
 8003d90:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	0018      	movs	r0, r3
 8003d96:	f000 f933 	bl	8004000 <vClearInterruptMaskFromISR>

		return xReturn;
 8003d9a:	69fb      	ldr	r3, [r7, #28]
	}
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	b008      	add	sp, #32
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	080050d0 	.word	0x080050d0
 8003da8:	2000014c 	.word	0x2000014c
 8003dac:	2000012c 	.word	0x2000012c
 8003db0:	20000028 	.word	0x20000028
 8003db4:	200000e4 	.word	0x200000e4
 8003db8:	20000024 	.word	0x20000024
 8003dbc:	20000138 	.word	0x20000138

08003dc0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003dca:	4b21      	ldr	r3, [pc, #132]	; (8003e50 <prvAddCurrentTaskToDelayedList+0x90>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dd0:	4b20      	ldr	r3, [pc, #128]	; (8003e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f7fe fe45 	bl	8002a66 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3301      	adds	r3, #1
 8003de0:	d10b      	bne.n	8003dfa <prvAddCurrentTaskToDelayedList+0x3a>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d008      	beq.n	8003dfa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003de8:	4b1a      	ldr	r3, [pc, #104]	; (8003e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	1d1a      	adds	r2, r3, #4
 8003dee:	4b1a      	ldr	r3, [pc, #104]	; (8003e58 <prvAddCurrentTaskToDelayedList+0x98>)
 8003df0:	0011      	movs	r1, r2
 8003df2:	0018      	movs	r0, r3
 8003df4:	f7fe fddf 	bl	80029b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003df8:	e026      	b.n	8003e48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	18d3      	adds	r3, r2, r3
 8003e00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e02:	4b14      	ldr	r3, [pc, #80]	; (8003e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d209      	bcs.n	8003e26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e12:	4b12      	ldr	r3, [pc, #72]	; (8003e5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	4b0f      	ldr	r3, [pc, #60]	; (8003e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	0019      	movs	r1, r3
 8003e1e:	0010      	movs	r0, r2
 8003e20:	f7fe fdeb 	bl	80029fa <vListInsert>
}
 8003e24:	e010      	b.n	8003e48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e26:	4b0e      	ldr	r3, [pc, #56]	; (8003e60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	4b0a      	ldr	r3, [pc, #40]	; (8003e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3304      	adds	r3, #4
 8003e30:	0019      	movs	r1, r3
 8003e32:	0010      	movs	r0, r2
 8003e34:	f7fe fde1 	bl	80029fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e38:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d202      	bcs.n	8003e48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003e42:	4b08      	ldr	r3, [pc, #32]	; (8003e64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	601a      	str	r2, [r3, #0]
}
 8003e48:	46c0      	nop			; (mov r8, r8)
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	b004      	add	sp, #16
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	20000128 	.word	0x20000128
 8003e54:	20000024 	.word	0x20000024
 8003e58:	20000110 	.word	0x20000110
 8003e5c:	200000e0 	.word	0x200000e0
 8003e60:	200000dc 	.word	0x200000dc
 8003e64:	20000144 	.word	0x20000144

08003e68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	3b04      	subs	r3, #4
 8003e78:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2280      	movs	r2, #128	; 0x80
 8003e7e:	0452      	lsls	r2, r2, #17
 8003e80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	3b04      	subs	r3, #4
 8003e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	3b04      	subs	r3, #4
 8003e92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003e94:	4a08      	ldr	r2, [pc, #32]	; (8003eb8 <pxPortInitialiseStack+0x50>)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	3b14      	subs	r3, #20
 8003e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	3b20      	subs	r3, #32
 8003eaa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003eac:	68fb      	ldr	r3, [r7, #12]
}
 8003eae:	0018      	movs	r0, r3
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	b004      	add	sp, #16
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	08003ebd 	.word	0x08003ebd

08003ebc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003ec6:	4b07      	ldr	r3, [pc, #28]	; (8003ee4 <prvTaskExitError+0x28>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	d001      	beq.n	8003ed2 <prvTaskExitError+0x16>
 8003ece:	b672      	cpsid	i
 8003ed0:	e7fe      	b.n	8003ed0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8003ed2:	b672      	cpsid	i
	while( ulDummy == 0 )
 8003ed4:	46c0      	nop			; (mov r8, r8)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d0fc      	beq.n	8003ed6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003edc:	46c0      	nop			; (mov r8, r8)
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	b002      	add	sp, #8
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	20000000 	.word	0x20000000

08003ee8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8003eec:	46c0      	nop			; (mov r8, r8)
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003f00 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8003f00:	4a0b      	ldr	r2, [pc, #44]	; (8003f30 <pxCurrentTCBConst2>)
 8003f02:	6813      	ldr	r3, [r2, #0]
 8003f04:	6818      	ldr	r0, [r3, #0]
 8003f06:	3020      	adds	r0, #32
 8003f08:	f380 8809 	msr	PSP, r0
 8003f0c:	2002      	movs	r0, #2
 8003f0e:	f380 8814 	msr	CONTROL, r0
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8003f18:	46ae      	mov	lr, r5
 8003f1a:	bc08      	pop	{r3}
 8003f1c:	bc04      	pop	{r2}
 8003f1e:	b662      	cpsie	i
 8003f20:	4718      	bx	r3
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	46c0      	nop			; (mov r8, r8)
 8003f26:	46c0      	nop			; (mov r8, r8)
 8003f28:	46c0      	nop			; (mov r8, r8)
 8003f2a:	46c0      	nop			; (mov r8, r8)
 8003f2c:	46c0      	nop			; (mov r8, r8)
 8003f2e:	46c0      	nop			; (mov r8, r8)

08003f30 <pxCurrentTCBConst2>:
 8003f30:	20000024 	.word	0x20000024
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8003f34:	46c0      	nop			; (mov r8, r8)
 8003f36:	46c0      	nop			; (mov r8, r8)

08003f38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8003f3c:	4b0e      	ldr	r3, [pc, #56]	; (8003f78 <xPortStartScheduler+0x40>)
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	4b0d      	ldr	r3, [pc, #52]	; (8003f78 <xPortStartScheduler+0x40>)
 8003f42:	21ff      	movs	r1, #255	; 0xff
 8003f44:	0409      	lsls	r1, r1, #16
 8003f46:	430a      	orrs	r2, r1
 8003f48:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8003f4a:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <xPortStartScheduler+0x40>)
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <xPortStartScheduler+0x40>)
 8003f50:	21ff      	movs	r1, #255	; 0xff
 8003f52:	0609      	lsls	r1, r1, #24
 8003f54:	430a      	orrs	r2, r1
 8003f56:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8003f58:	f000 f898 	bl	800408c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003f5c:	4b07      	ldr	r3, [pc, #28]	; (8003f7c <xPortStartScheduler+0x44>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8003f62:	f7ff ffcd 	bl	8003f00 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003f66:	f7ff fb7d 	bl	8003664 <vTaskSwitchContext>
	prvTaskExitError();
 8003f6a:	f7ff ffa7 	bl	8003ebc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	0018      	movs	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	e000ed20 	.word	0xe000ed20
 8003f7c:	20000000 	.word	0x20000000

08003f80 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8003f84:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <vPortYield+0x1c>)
 8003f86:	2280      	movs	r2, #128	; 0x80
 8003f88:	0552      	lsls	r2, r2, #21
 8003f8a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8003f8c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003f90:	f3bf 8f6f 	isb	sy
}
 8003f94:	46c0      	nop			; (mov r8, r8)
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	e000ed04 	.word	0xe000ed04

08003fa0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003fa4:	b672      	cpsid	i
    uxCriticalNesting++;
 8003fa6:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <vPortEnterCritical+0x20>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <vPortEnterCritical+0x20>)
 8003fae:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8003fb0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003fb4:	f3bf 8f6f 	isb	sy
}
 8003fb8:	46c0      	nop			; (mov r8, r8)
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	46c0      	nop			; (mov r8, r8)
 8003fc0:	20000000 	.word	0x20000000

08003fc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003fc8:	4b09      	ldr	r3, [pc, #36]	; (8003ff0 <vPortExitCritical+0x2c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <vPortExitCritical+0x10>
 8003fd0:	b672      	cpsid	i
 8003fd2:	e7fe      	b.n	8003fd2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003fd4:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <vPortExitCritical+0x2c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	1e5a      	subs	r2, r3, #1
 8003fda:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <vPortExitCritical+0x2c>)
 8003fdc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8003fde:	4b04      	ldr	r3, [pc, #16]	; (8003ff0 <vPortExitCritical+0x2c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d100      	bne.n	8003fe8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8003fe6:	b662      	cpsie	i
    }
}
 8003fe8:	46c0      	nop			; (mov r8, r8)
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	46c0      	nop			; (mov r8, r8)
 8003ff0:	20000000 	.word	0x20000000

08003ff4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8003ff4:	f3ef 8010 	mrs	r0, PRIMASK
 8003ff8:	b672      	cpsid	i
 8003ffa:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8003ffc:	46c0      	nop			; (mov r8, r8)
 8003ffe:	0018      	movs	r0, r3

08004000 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8004000:	f380 8810 	msr	PRIMASK, r0
 8004004:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8004006:	46c0      	nop			; (mov r8, r8)
	...

08004010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004010:	f3ef 8009 	mrs	r0, PSP
 8004014:	4b0e      	ldr	r3, [pc, #56]	; (8004050 <pxCurrentTCBConst>)
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	3820      	subs	r0, #32
 800401a:	6010      	str	r0, [r2, #0]
 800401c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800401e:	4644      	mov	r4, r8
 8004020:	464d      	mov	r5, r9
 8004022:	4656      	mov	r6, sl
 8004024:	465f      	mov	r7, fp
 8004026:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004028:	b508      	push	{r3, lr}
 800402a:	b672      	cpsid	i
 800402c:	f7ff fb1a 	bl	8003664 <vTaskSwitchContext>
 8004030:	b662      	cpsie	i
 8004032:	bc0c      	pop	{r2, r3}
 8004034:	6811      	ldr	r1, [r2, #0]
 8004036:	6808      	ldr	r0, [r1, #0]
 8004038:	3010      	adds	r0, #16
 800403a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800403c:	46a0      	mov	r8, r4
 800403e:	46a9      	mov	r9, r5
 8004040:	46b2      	mov	sl, r6
 8004042:	46bb      	mov	fp, r7
 8004044:	f380 8809 	msr	PSP, r0
 8004048:	3820      	subs	r0, #32
 800404a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800404c:	4718      	bx	r3
 800404e:	46c0      	nop			; (mov r8, r8)

08004050 <pxCurrentTCBConst>:
 8004050:	20000024 	.word	0x20000024
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8004054:	46c0      	nop			; (mov r8, r8)
 8004056:	46c0      	nop			; (mov r8, r8)

08004058 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800405e:	f7ff ffc9 	bl	8003ff4 <ulSetInterruptMaskFromISR>
 8004062:	0003      	movs	r3, r0
 8004064:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004066:	f7ff fa49 	bl	80034fc <xTaskIncrementTick>
 800406a:	1e03      	subs	r3, r0, #0
 800406c:	d003      	beq.n	8004076 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800406e:	4b06      	ldr	r3, [pc, #24]	; (8004088 <SysTick_Handler+0x30>)
 8004070:	2280      	movs	r2, #128	; 0x80
 8004072:	0552      	lsls	r2, r2, #21
 8004074:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	0018      	movs	r0, r3
 800407a:	f7ff ffc1 	bl	8004000 <vClearInterruptMaskFromISR>
}
 800407e:	46c0      	nop			; (mov r8, r8)
 8004080:	46bd      	mov	sp, r7
 8004082:	b002      	add	sp, #8
 8004084:	bd80      	pop	{r7, pc}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	e000ed04 	.word	0xe000ed04

0800408c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8004090:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <prvSetupTimerInterrupt+0x34>)
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8004096:	4b0b      	ldr	r3, [pc, #44]	; (80040c4 <prvSetupTimerInterrupt+0x38>)
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800409c:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <prvSetupTimerInterrupt+0x3c>)
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	23fa      	movs	r3, #250	; 0xfa
 80040a2:	0099      	lsls	r1, r3, #2
 80040a4:	0010      	movs	r0, r2
 80040a6:	f7fc f82f 	bl	8000108 <__udivsi3>
 80040aa:	0003      	movs	r3, r0
 80040ac:	001a      	movs	r2, r3
 80040ae:	4b07      	ldr	r3, [pc, #28]	; (80040cc <prvSetupTimerInterrupt+0x40>)
 80040b0:	3a01      	subs	r2, #1
 80040b2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80040b4:	4b02      	ldr	r3, [pc, #8]	; (80040c0 <prvSetupTimerInterrupt+0x34>)
 80040b6:	2207      	movs	r2, #7
 80040b8:	601a      	str	r2, [r3, #0]
}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	e000e010 	.word	0xe000e010
 80040c4:	e000e018 	.word	0xe000e018
 80040c8:	20000004 	.word	0x20000004
 80040cc:	e000e014 	.word	0xe000e014

080040d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80040d8:	2300      	movs	r3, #0
 80040da:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80040dc:	f7ff f976 	bl	80033cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80040e0:	4b49      	ldr	r3, [pc, #292]	; (8004208 <pvPortMalloc+0x138>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80040e8:	f000 f8e0 	bl	80042ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80040ec:	4b47      	ldr	r3, [pc, #284]	; (800420c <pvPortMalloc+0x13c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	4013      	ands	r3, r2
 80040f4:	d000      	beq.n	80040f8 <pvPortMalloc+0x28>
 80040f6:	e079      	b.n	80041ec <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d012      	beq.n	8004124 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80040fe:	2208      	movs	r2, #8
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	189b      	adds	r3, r3, r2
 8004104:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2207      	movs	r2, #7
 800410a:	4013      	ands	r3, r2
 800410c:	d00a      	beq.n	8004124 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2207      	movs	r2, #7
 8004112:	4393      	bics	r3, r2
 8004114:	3308      	adds	r3, #8
 8004116:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2207      	movs	r2, #7
 800411c:	4013      	ands	r3, r2
 800411e:	d001      	beq.n	8004124 <pvPortMalloc+0x54>
 8004120:	b672      	cpsid	i
 8004122:	e7fe      	b.n	8004122 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d060      	beq.n	80041ec <pvPortMalloc+0x11c>
 800412a:	4b39      	ldr	r3, [pc, #228]	; (8004210 <pvPortMalloc+0x140>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	429a      	cmp	r2, r3
 8004132:	d85b      	bhi.n	80041ec <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004134:	4b37      	ldr	r3, [pc, #220]	; (8004214 <pvPortMalloc+0x144>)
 8004136:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8004138:	4b36      	ldr	r3, [pc, #216]	; (8004214 <pvPortMalloc+0x144>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800413e:	e004      	b.n	800414a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	429a      	cmp	r2, r3
 8004152:	d903      	bls.n	800415c <pvPortMalloc+0x8c>
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1f1      	bne.n	8004140 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800415c:	4b2a      	ldr	r3, [pc, #168]	; (8004208 <pvPortMalloc+0x138>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	429a      	cmp	r2, r3
 8004164:	d042      	beq.n	80041ec <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2208      	movs	r2, #8
 800416c:	189b      	adds	r3, r3, r2
 800416e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	1ad2      	subs	r2, r2, r3
 8004180:	2308      	movs	r3, #8
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	429a      	cmp	r2, r3
 8004186:	d916      	bls.n	80041b6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	18d3      	adds	r3, r2, r3
 800418e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	2207      	movs	r2, #7
 8004194:	4013      	ands	r3, r2
 8004196:	d001      	beq.n	800419c <pvPortMalloc+0xcc>
 8004198:	b672      	cpsid	i
 800419a:	e7fe      	b.n	800419a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	1ad2      	subs	r2, r2, r3
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	0018      	movs	r0, r3
 80041b2:	f000 f8db 	bl	800436c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80041b6:	4b16      	ldr	r3, [pc, #88]	; (8004210 <pvPortMalloc+0x140>)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	1ad2      	subs	r2, r2, r3
 80041c0:	4b13      	ldr	r3, [pc, #76]	; (8004210 <pvPortMalloc+0x140>)
 80041c2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80041c4:	4b12      	ldr	r3, [pc, #72]	; (8004210 <pvPortMalloc+0x140>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4b13      	ldr	r3, [pc, #76]	; (8004218 <pvPortMalloc+0x148>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d203      	bcs.n	80041d8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80041d0:	4b0f      	ldr	r3, [pc, #60]	; (8004210 <pvPortMalloc+0x140>)
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	4b10      	ldr	r3, [pc, #64]	; (8004218 <pvPortMalloc+0x148>)
 80041d6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	4b0b      	ldr	r3, [pc, #44]	; (800420c <pvPortMalloc+0x13c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	431a      	orrs	r2, r3
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80041ec:	f7ff f8fa 	bl	80033e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2207      	movs	r2, #7
 80041f4:	4013      	ands	r3, r2
 80041f6:	d001      	beq.n	80041fc <pvPortMalloc+0x12c>
 80041f8:	b672      	cpsid	i
 80041fa:	e7fe      	b.n	80041fa <pvPortMalloc+0x12a>
	return pvReturn;
 80041fc:	68fb      	ldr	r3, [r7, #12]
}
 80041fe:	0018      	movs	r0, r3
 8004200:	46bd      	mov	sp, r7
 8004202:	b006      	add	sp, #24
 8004204:	bd80      	pop	{r7, pc}
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	20000d58 	.word	0x20000d58
 800420c:	20000d64 	.word	0x20000d64
 8004210:	20000d5c 	.word	0x20000d5c
 8004214:	20000d50 	.word	0x20000d50
 8004218:	20000d60 	.word	0x20000d60

0800421c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d035      	beq.n	800429a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800422e:	2308      	movs	r3, #8
 8004230:	425b      	negs	r3, r3
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	18d3      	adds	r3, r2, r3
 8004236:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	4b18      	ldr	r3, [pc, #96]	; (80042a4 <vPortFree+0x88>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4013      	ands	r3, r2
 8004246:	d101      	bne.n	800424c <vPortFree+0x30>
 8004248:	b672      	cpsid	i
 800424a:	e7fe      	b.n	800424a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <vPortFree+0x3c>
 8004254:	b672      	cpsid	i
 8004256:	e7fe      	b.n	8004256 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	4b11      	ldr	r3, [pc, #68]	; (80042a4 <vPortFree+0x88>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4013      	ands	r3, r2
 8004262:	d01a      	beq.n	800429a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d116      	bne.n	800429a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	4b0c      	ldr	r3, [pc, #48]	; (80042a4 <vPortFree+0x88>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	43db      	mvns	r3, r3
 8004276:	401a      	ands	r2, r3
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800427c:	f7ff f8a6 	bl	80033cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	4b08      	ldr	r3, [pc, #32]	; (80042a8 <vPortFree+0x8c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	18d2      	adds	r2, r2, r3
 800428a:	4b07      	ldr	r3, [pc, #28]	; (80042a8 <vPortFree+0x8c>)
 800428c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	0018      	movs	r0, r3
 8004292:	f000 f86b 	bl	800436c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004296:	f7ff f8a5 	bl	80033e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800429a:	46c0      	nop			; (mov r8, r8)
 800429c:	46bd      	mov	sp, r7
 800429e:	b004      	add	sp, #16
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	46c0      	nop			; (mov r8, r8)
 80042a4:	20000d64 	.word	0x20000d64
 80042a8:	20000d5c 	.word	0x20000d5c

080042ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80042b2:	23c0      	movs	r3, #192	; 0xc0
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80042b8:	4b26      	ldr	r3, [pc, #152]	; (8004354 <prvHeapInit+0xa8>)
 80042ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2207      	movs	r2, #7
 80042c0:	4013      	ands	r3, r2
 80042c2:	d00c      	beq.n	80042de <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	3307      	adds	r3, #7
 80042c8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2207      	movs	r2, #7
 80042ce:	4393      	bics	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	1ad2      	subs	r2, r2, r3
 80042d8:	4b1e      	ldr	r3, [pc, #120]	; (8004354 <prvHeapInit+0xa8>)
 80042da:	18d3      	adds	r3, r2, r3
 80042dc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042e2:	4b1d      	ldr	r3, [pc, #116]	; (8004358 <prvHeapInit+0xac>)
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80042e8:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <prvHeapInit+0xac>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	18d3      	adds	r3, r2, r3
 80042f4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80042f6:	2208      	movs	r2, #8
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	1a9b      	subs	r3, r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2207      	movs	r2, #7
 8004302:	4393      	bics	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	4b14      	ldr	r3, [pc, #80]	; (800435c <prvHeapInit+0xb0>)
 800430a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800430c:	4b13      	ldr	r3, [pc, #76]	; (800435c <prvHeapInit+0xb0>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2200      	movs	r2, #0
 8004312:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004314:	4b11      	ldr	r3, [pc, #68]	; (800435c <prvHeapInit+0xb0>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	1ad2      	subs	r2, r2, r3
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800432a:	4b0c      	ldr	r3, [pc, #48]	; (800435c <prvHeapInit+0xb0>)
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <prvHeapInit+0xb4>)
 8004338:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	4b09      	ldr	r3, [pc, #36]	; (8004364 <prvHeapInit+0xb8>)
 8004340:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004342:	4b09      	ldr	r3, [pc, #36]	; (8004368 <prvHeapInit+0xbc>)
 8004344:	2280      	movs	r2, #128	; 0x80
 8004346:	0612      	lsls	r2, r2, #24
 8004348:	601a      	str	r2, [r3, #0]
}
 800434a:	46c0      	nop			; (mov r8, r8)
 800434c:	46bd      	mov	sp, r7
 800434e:	b004      	add	sp, #16
 8004350:	bd80      	pop	{r7, pc}
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	20000150 	.word	0x20000150
 8004358:	20000d50 	.word	0x20000d50
 800435c:	20000d58 	.word	0x20000d58
 8004360:	20000d60 	.word	0x20000d60
 8004364:	20000d5c 	.word	0x20000d5c
 8004368:	20000d64 	.word	0x20000d64

0800436c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004374:	4b27      	ldr	r3, [pc, #156]	; (8004414 <prvInsertBlockIntoFreeList+0xa8>)
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	e002      	b.n	8004380 <prvInsertBlockIntoFreeList+0x14>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	429a      	cmp	r2, r3
 8004388:	d8f7      	bhi.n	800437a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	18d3      	adds	r3, r2, r3
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	429a      	cmp	r2, r3
 800439a:	d108      	bne.n	80043ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	18d2      	adds	r2, r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	18d2      	adds	r2, r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d118      	bne.n	80043f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	4b14      	ldr	r3, [pc, #80]	; (8004418 <prvInsertBlockIntoFreeList+0xac>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d00d      	beq.n	80043ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	18d2      	adds	r2, r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	e008      	b.n	80043fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80043ea:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <prvInsertBlockIntoFreeList+0xac>)
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	e003      	b.n	80043fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	429a      	cmp	r2, r3
 8004402:	d002      	beq.n	800440a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	46bd      	mov	sp, r7
 800440e:	b004      	add	sp, #16
 8004410:	bd80      	pop	{r7, pc}
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	20000d50 	.word	0x20000d50
 8004418:	20000d58 	.word	0x20000d58

0800441c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4a06      	ldr	r2, [pc, #24]	; (8004444 <vApplicationGetIdleTaskMemory+0x28>)
 800442c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	4a05      	ldr	r2, [pc, #20]	; (8004448 <vApplicationGetIdleTaskMemory+0x2c>)
 8004432:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2280      	movs	r2, #128	; 0x80
 8004438:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	46bd      	mov	sp, r7
 800443e:	b004      	add	sp, #16
 8004440:	bd80      	pop	{r7, pc}
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	20000d68 	.word	0x20000d68
 8004448:	20000dbc 	.word	0x20000dbc

0800444c <LEDControlTask>:
				.item_sz = 1
		};


void LEDControlTask(void const * argument)
{
 800444c:	b590      	push	{r4, r7, lr}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  osEvent  evt;

  for(;;)
  {
	  /*Always wait for a message with intensity value*/
	  evt = osMessageGet (led_msg,  osWaitForever);
 8004454:	4b09      	ldr	r3, [pc, #36]	; (800447c <LEDControlTask+0x30>)
 8004456:	6819      	ldr	r1, [r3, #0]
 8004458:	240c      	movs	r4, #12
 800445a:	1938      	adds	r0, r7, r4
 800445c:	2301      	movs	r3, #1
 800445e:	425b      	negs	r3, r3
 8004460:	001a      	movs	r2, r3
 8004462:	f7fe fa0b 	bl	800287c <osMessageGet>
	  if (evt.status == osEventMessage)
 8004466:	193b      	adds	r3, r7, r4
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b10      	cmp	r3, #16
 800446c:	d1f2      	bne.n	8004454 <LEDControlTask+0x8>
	  {
		  set_intensity(evt.value.v);
 800446e:	230c      	movs	r3, #12
 8004470:	18fb      	adds	r3, r7, r3
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	0018      	movs	r0, r3
 8004476:	f000 f81b 	bl	80044b0 <set_intensity>
	  evt = osMessageGet (led_msg,  osWaitForever);
 800447a:	e7eb      	b.n	8004454 <LEDControlTask+0x8>
 800447c:	20000fc4 	.word	0x20000fc4

08004480 <delay_us>:
  }
}

/*Hardware Timer Microsecond Delay*/
void delay_us (uint16_t us)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	0002      	movs	r2, r0
 8004488:	1dbb      	adds	r3, r7, #6
 800448a:	801a      	strh	r2, [r3, #0]
	/*Set the counter value a 0*/
	__HAL_TIM_SET_COUNTER(&htim22,0);
 800448c:	4b07      	ldr	r3, [pc, #28]	; (80044ac <delay_us+0x2c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2200      	movs	r2, #0
 8004492:	625a      	str	r2, [r3, #36]	; 0x24

	/*Wait for the counter to reach the us input in the parameter*/
	while (__HAL_TIM_GET_COUNTER(&htim22) < us);
 8004494:	46c0      	nop			; (mov r8, r8)
 8004496:	4b05      	ldr	r3, [pc, #20]	; (80044ac <delay_us+0x2c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800449c:	1dbb      	adds	r3, r7, #6
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d3f8      	bcc.n	8004496 <delay_us+0x16>
}
 80044a4:	46c0      	nop			; (mov r8, r8)
 80044a6:	46bd      	mov	sp, r7
 80044a8:	b002      	add	sp, #8
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	20000fcc 	.word	0x20000fcc

080044b0 <set_intensity>:

/*Sets driver current using EasyScale Protocol*/
void set_intensity(uint32_t ref)
{
 80044b0:	b590      	push	{r4, r7, lr}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  unsigned char byte = 0, j = 0, k = 0;
 80044b8:	210f      	movs	r1, #15
 80044ba:	187b      	adds	r3, r7, r1
 80044bc:	2200      	movs	r2, #0
 80044be:	701a      	strb	r2, [r3, #0]
 80044c0:	230e      	movs	r3, #14
 80044c2:	18fb      	adds	r3, r7, r3
 80044c4:	2200      	movs	r2, #0
 80044c6:	701a      	strb	r2, [r3, #0]
 80044c8:	240d      	movs	r4, #13
 80044ca:	193b      	adds	r3, r7, r4
 80044cc:	2200      	movs	r2, #0
 80044ce:	701a      	strb	r2, [r3, #0]
  byte = 0x72;       //device adress byte
 80044d0:	187b      	adds	r3, r7, r1
 80044d2:	2272      	movs	r2, #114	; 0x72
 80044d4:	701a      	strb	r2, [r3, #0]

  /*Shut down driver and enter into EasyScale control mode*/
  HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 80044d6:	4b41      	ldr	r3, [pc, #260]	; (80045dc <set_intensity+0x12c>)
 80044d8:	2201      	movs	r2, #1
 80044da:	2102      	movs	r1, #2
 80044dc:	0018      	movs	r0, r3
 80044de:	f7fc ff11 	bl	8001304 <HAL_GPIO_WritePin>
  delay_us(110);
 80044e2:	206e      	movs	r0, #110	; 0x6e
 80044e4:	f7ff ffcc 	bl	8004480 <delay_us>
  HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET);
 80044e8:	4b3c      	ldr	r3, [pc, #240]	; (80045dc <set_intensity+0x12c>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	2102      	movs	r1, #2
 80044ee:	0018      	movs	r0, r3
 80044f0:	f7fc ff08 	bl	8001304 <HAL_GPIO_WritePin>
  delay_us(1100);
 80044f4:	4b3a      	ldr	r3, [pc, #232]	; (80045e0 <set_intensity+0x130>)
 80044f6:	0018      	movs	r0, r3
 80044f8:	f7ff ffc2 	bl	8004480 <delay_us>

  /*Send address and data*/
  for(k=2; k>0; k--)
 80044fc:	193b      	adds	r3, r7, r4
 80044fe:	2202      	movs	r2, #2
 8004500:	701a      	strb	r2, [r3, #0]
 8004502:	e05c      	b.n	80045be <set_intensity+0x10e>
  {
	HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 8004504:	4b35      	ldr	r3, [pc, #212]	; (80045dc <set_intensity+0x12c>)
 8004506:	2201      	movs	r2, #1
 8004508:	2102      	movs	r1, #2
 800450a:	0018      	movs	r0, r3
 800450c:	f7fc fefa 	bl	8001304 <HAL_GPIO_WritePin>
	delay_us(48);
 8004510:	2030      	movs	r0, #48	; 0x30
 8004512:	f7ff ffb5 	bl	8004480 <delay_us>

    for(j=8; j>0; j--)
 8004516:	230e      	movs	r3, #14
 8004518:	18fb      	adds	r3, r7, r3
 800451a:	2208      	movs	r2, #8
 800451c:	701a      	strb	r2, [r3, #0]
 800451e:	e036      	b.n	800458e <set_intensity+0xde>
    {
      if(byte & 0x80)
 8004520:	230f      	movs	r3, #15
 8004522:	18fb      	adds	r3, r7, r3
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	b25b      	sxtb	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	da12      	bge.n	8004552 <set_intensity+0xa2>
      {
    	HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET); //encoding bit 1
 800452c:	4b2b      	ldr	r3, [pc, #172]	; (80045dc <set_intensity+0x12c>)
 800452e:	2200      	movs	r2, #0
 8004530:	2102      	movs	r1, #2
 8004532:	0018      	movs	r0, r3
 8004534:	f7fc fee6 	bl	8001304 <HAL_GPIO_WritePin>
    	delay_us(24);
 8004538:	2018      	movs	r0, #24
 800453a:	f7ff ffa1 	bl	8004480 <delay_us>
        HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 800453e:	4b27      	ldr	r3, [pc, #156]	; (80045dc <set_intensity+0x12c>)
 8004540:	2201      	movs	r2, #1
 8004542:	2102      	movs	r1, #2
 8004544:	0018      	movs	r0, r3
 8004546:	f7fc fedd 	bl	8001304 <HAL_GPIO_WritePin>
        delay_us(48);
 800454a:	2030      	movs	r0, #48	; 0x30
 800454c:	f7ff ff98 	bl	8004480 <delay_us>
 8004550:	e011      	b.n	8004576 <set_intensity+0xc6>
      }
      else
      {
    	HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET); //encoding bit 0
 8004552:	4b22      	ldr	r3, [pc, #136]	; (80045dc <set_intensity+0x12c>)
 8004554:	2200      	movs	r2, #0
 8004556:	2102      	movs	r1, #2
 8004558:	0018      	movs	r0, r3
 800455a:	f7fc fed3 	bl	8001304 <HAL_GPIO_WritePin>
    	delay_us(48);
 800455e:	2030      	movs	r0, #48	; 0x30
 8004560:	f7ff ff8e 	bl	8004480 <delay_us>
        HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 8004564:	4b1d      	ldr	r3, [pc, #116]	; (80045dc <set_intensity+0x12c>)
 8004566:	2201      	movs	r2, #1
 8004568:	2102      	movs	r1, #2
 800456a:	0018      	movs	r0, r3
 800456c:	f7fc feca 	bl	8001304 <HAL_GPIO_WritePin>
        delay_us(24);
 8004570:	2018      	movs	r0, #24
 8004572:	f7ff ff85 	bl	8004480 <delay_us>
      }
      byte += byte; //left shift
 8004576:	230f      	movs	r3, #15
 8004578:	18fa      	adds	r2, r7, r3
 800457a:	18fb      	adds	r3, r7, r3
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	18db      	adds	r3, r3, r3
 8004580:	7013      	strb	r3, [r2, #0]
    for(j=8; j>0; j--)
 8004582:	210e      	movs	r1, #14
 8004584:	187b      	adds	r3, r7, r1
 8004586:	781a      	ldrb	r2, [r3, #0]
 8004588:	187b      	adds	r3, r7, r1
 800458a:	3a01      	subs	r2, #1
 800458c:	701a      	strb	r2, [r3, #0]
 800458e:	230e      	movs	r3, #14
 8004590:	18fb      	adds	r3, r7, r3
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1c3      	bne.n	8004520 <set_intensity+0x70>
    }

    HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET); //End of stream delay
 8004598:	4b10      	ldr	r3, [pc, #64]	; (80045dc <set_intensity+0x12c>)
 800459a:	2200      	movs	r2, #0
 800459c:	2102      	movs	r1, #2
 800459e:	0018      	movs	r0, r3
 80045a0:	f7fc feb0 	bl	8001304 <HAL_GPIO_WritePin>
    delay_us(48);
 80045a4:	2030      	movs	r0, #48	; 0x30
 80045a6:	f7ff ff6b 	bl	8004480 <delay_us>

    byte = ref; //read data byte
 80045aa:	230f      	movs	r3, #15
 80045ac:	18fb      	adds	r3, r7, r3
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	701a      	strb	r2, [r3, #0]
  for(k=2; k>0; k--)
 80045b2:	210d      	movs	r1, #13
 80045b4:	187b      	adds	r3, r7, r1
 80045b6:	781a      	ldrb	r2, [r3, #0]
 80045b8:	187b      	adds	r3, r7, r1
 80045ba:	3a01      	subs	r2, #1
 80045bc:	701a      	strb	r2, [r3, #0]
 80045be:	230d      	movs	r3, #13
 80045c0:	18fb      	adds	r3, r7, r3
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d19d      	bne.n	8004504 <set_intensity+0x54>
  }
  HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 80045c8:	4b04      	ldr	r3, [pc, #16]	; (80045dc <set_intensity+0x12c>)
 80045ca:	2201      	movs	r2, #1
 80045cc:	2102      	movs	r1, #2
 80045ce:	0018      	movs	r0, r3
 80045d0:	f7fc fe98 	bl	8001304 <HAL_GPIO_WritePin>
}
 80045d4:	46c0      	nop			; (mov r8, r8)
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b005      	add	sp, #20
 80045da:	bd90      	pop	{r4, r7, pc}
 80045dc:	50000400 	.word	0x50000400
 80045e0:	0000044c 	.word	0x0000044c

080045e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80045e4:	b5b0      	push	{r4, r5, r7, lr}
 80045e6:	b096      	sub	sp, #88	; 0x58
 80045e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80045ea:	f7fb fe19 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80045ee:	f000 f85b 	bl	80046a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80045f2:	f000 fa31 	bl	8004a58 <MX_GPIO_Init>
  MX_DMA_Init();
 80045f6:	f000 fa11 	bl	8004a1c <MX_DMA_Init>
  MX_ADC_Init();
 80045fa:	f000 f8bf 	bl	800477c <MX_ADC_Init>
  MX_TIM22_Init();
 80045fe:	f000 f9b3 	bl	8004968 <MX_TIM22_Init>
  MX_TIM21_Init();
 8004602:	f000 f95b 	bl	80048bc <MX_TIM21_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8004606:	f000 f8ab 	bl	8004760 <MX_NVIC_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  led_msg = osMessageCreate (&led_msg_def, LEDControlTaskHandle);
 800460a:	4b1f      	ldr	r3, [pc, #124]	; (8004688 <main+0xa4>)
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	4b1f      	ldr	r3, [pc, #124]	; (800468c <main+0xa8>)
 8004610:	0011      	movs	r1, r2
 8004612:	0018      	movs	r0, r3
 8004614:	f7fe f908 	bl	8002828 <osMessageCreate>
 8004618:	0002      	movs	r2, r0
 800461a:	4b1d      	ldr	r3, [pc, #116]	; (8004690 <main+0xac>)
 800461c:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800461e:	213c      	movs	r1, #60	; 0x3c
 8004620:	187b      	adds	r3, r7, r1
 8004622:	4a1c      	ldr	r2, [pc, #112]	; (8004694 <main+0xb0>)
 8004624:	ca31      	ldmia	r2!, {r0, r4, r5}
 8004626:	c331      	stmia	r3!, {r0, r4, r5}
 8004628:	ca31      	ldmia	r2!, {r0, r4, r5}
 800462a:	c331      	stmia	r3!, {r0, r4, r5}
 800462c:	6812      	ldr	r2, [r2, #0]
 800462e:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004630:	187b      	adds	r3, r7, r1
 8004632:	2100      	movs	r1, #0
 8004634:	0018      	movs	r0, r3
 8004636:	f7fe f805 	bl	8002644 <osThreadCreate>
 800463a:	0002      	movs	r2, r0
 800463c:	4b16      	ldr	r3, [pc, #88]	; (8004698 <main+0xb4>)
 800463e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  /* LED Control Task */
  osThreadDef(ledcontrol, LEDControlTask, osPriorityAboveNormal, 0, 128);
 8004640:	2120      	movs	r1, #32
 8004642:	187b      	adds	r3, r7, r1
 8004644:	4a15      	ldr	r2, [pc, #84]	; (800469c <main+0xb8>)
 8004646:	ca31      	ldmia	r2!, {r0, r4, r5}
 8004648:	c331      	stmia	r3!, {r0, r4, r5}
 800464a:	ca31      	ldmia	r2!, {r0, r4, r5}
 800464c:	c331      	stmia	r3!, {r0, r4, r5}
 800464e:	6812      	ldr	r2, [r2, #0]
 8004650:	601a      	str	r2, [r3, #0]
  LEDControlTaskHandle = osThreadCreate(osThread(ledcontrol), NULL);
 8004652:	187b      	adds	r3, r7, r1
 8004654:	2100      	movs	r1, #0
 8004656:	0018      	movs	r0, r3
 8004658:	f7fd fff4 	bl	8002644 <osThreadCreate>
 800465c:	0002      	movs	r2, r0
 800465e:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <main+0xa4>)
 8004660:	601a      	str	r2, [r3, #0]

  /* Monitoring Task */
  osThreadDef(monitoring, MonitorTask, osPriorityHigh, 0, 128);
 8004662:	1d3b      	adds	r3, r7, #4
 8004664:	4a0e      	ldr	r2, [pc, #56]	; (80046a0 <main+0xbc>)
 8004666:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004668:	c313      	stmia	r3!, {r0, r1, r4}
 800466a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800466c:	c313      	stmia	r3!, {r0, r1, r4}
 800466e:	6812      	ldr	r2, [r2, #0]
 8004670:	601a      	str	r2, [r3, #0]
  MonitorTaskHandle = osThreadCreate(osThread(monitoring), NULL);
 8004672:	1d3b      	adds	r3, r7, #4
 8004674:	2100      	movs	r1, #0
 8004676:	0018      	movs	r0, r3
 8004678:	f7fd ffe4 	bl	8002644 <osThreadCreate>
 800467c:	0002      	movs	r2, r0
 800467e:	4b09      	ldr	r3, [pc, #36]	; (80046a4 <main+0xc0>)
 8004680:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8004682:	f7fd ffd7 	bl	8002634 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004686:	e7fe      	b.n	8004686 <main+0xa2>
 8004688:	20000fc0 	.word	0x20000fc0
 800468c:	080050e4 	.word	0x080050e4
 8004690:	20000fc4 	.word	0x20000fc4
 8004694:	08005050 	.word	0x08005050
 8004698:	20000fc8 	.word	0x20000fc8
 800469c:	08005078 	.word	0x08005078
 80046a0:	080050a0 	.word	0x080050a0
 80046a4:	20001110 	.word	0x20001110

080046a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046a8:	b590      	push	{r4, r7, lr}
 80046aa:	b095      	sub	sp, #84	; 0x54
 80046ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046ae:	2418      	movs	r4, #24
 80046b0:	193b      	adds	r3, r7, r4
 80046b2:	0018      	movs	r0, r3
 80046b4:	2338      	movs	r3, #56	; 0x38
 80046b6:	001a      	movs	r2, r3
 80046b8:	2100      	movs	r1, #0
 80046ba:	f000 fcaa 	bl	8005012 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80046be:	1d3b      	adds	r3, r7, #4
 80046c0:	0018      	movs	r0, r3
 80046c2:	2314      	movs	r3, #20
 80046c4:	001a      	movs	r2, r3
 80046c6:	2100      	movs	r1, #0
 80046c8:	f000 fca3 	bl	8005012 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80046cc:	4b22      	ldr	r3, [pc, #136]	; (8004758 <SystemClock_Config+0xb0>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a22      	ldr	r2, [pc, #136]	; (800475c <SystemClock_Config+0xb4>)
 80046d2:	401a      	ands	r2, r3
 80046d4:	4b20      	ldr	r3, [pc, #128]	; (8004758 <SystemClock_Config+0xb0>)
 80046d6:	2180      	movs	r1, #128	; 0x80
 80046d8:	0109      	lsls	r1, r1, #4
 80046da:	430a      	orrs	r2, r1
 80046dc:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80046de:	0021      	movs	r1, r4
 80046e0:	187b      	adds	r3, r7, r1
 80046e2:	2202      	movs	r2, #2
 80046e4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80046e6:	187b      	adds	r3, r7, r1
 80046e8:	2201      	movs	r2, #1
 80046ea:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80046ec:	187b      	adds	r3, r7, r1
 80046ee:	2210      	movs	r2, #16
 80046f0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80046f2:	187b      	adds	r3, r7, r1
 80046f4:	2202      	movs	r2, #2
 80046f6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80046f8:	187b      	adds	r3, r7, r1
 80046fa:	2200      	movs	r2, #0
 80046fc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80046fe:	187b      	adds	r3, r7, r1
 8004700:	2280      	movs	r2, #128	; 0x80
 8004702:	02d2      	lsls	r2, r2, #11
 8004704:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8004706:	187b      	adds	r3, r7, r1
 8004708:	2280      	movs	r2, #128	; 0x80
 800470a:	03d2      	lsls	r2, r2, #15
 800470c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800470e:	187b      	adds	r3, r7, r1
 8004710:	0018      	movs	r0, r3
 8004712:	f7fc fe27 	bl	8001364 <HAL_RCC_OscConfig>
 8004716:	1e03      	subs	r3, r0, #0
 8004718:	d001      	beq.n	800471e <SystemClock_Config+0x76>
  {
    Error_Handler();
 800471a:	f000 fa59 	bl	8004bd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800471e:	1d3b      	adds	r3, r7, #4
 8004720:	220f      	movs	r2, #15
 8004722:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004724:	1d3b      	adds	r3, r7, #4
 8004726:	2203      	movs	r2, #3
 8004728:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800472a:	1d3b      	adds	r3, r7, #4
 800472c:	2200      	movs	r2, #0
 800472e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004730:	1d3b      	adds	r3, r7, #4
 8004732:	2200      	movs	r2, #0
 8004734:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004736:	1d3b      	adds	r3, r7, #4
 8004738:	2200      	movs	r2, #0
 800473a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800473c:	1d3b      	adds	r3, r7, #4
 800473e:	2101      	movs	r1, #1
 8004740:	0018      	movs	r0, r3
 8004742:	f7fd f9df 	bl	8001b04 <HAL_RCC_ClockConfig>
 8004746:	1e03      	subs	r3, r0, #0
 8004748:	d001      	beq.n	800474e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800474a:	f000 fa41 	bl	8004bd0 <Error_Handler>
  }
}
 800474e:	46c0      	nop			; (mov r8, r8)
 8004750:	46bd      	mov	sp, r7
 8004752:	b015      	add	sp, #84	; 0x54
 8004754:	bd90      	pop	{r4, r7, pc}
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	40007000 	.word	0x40007000
 800475c:	ffffe7ff 	.word	0xffffe7ff

08004760 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	af00      	add	r7, sp, #0
  /* TIM21_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM21_IRQn, 3, 0);
 8004764:	2200      	movs	r2, #0
 8004766:	2103      	movs	r1, #3
 8004768:	2014      	movs	r0, #20
 800476a:	f7fc fa6d 	bl	8000c48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM21_IRQn);
 800476e:	2014      	movs	r0, #20
 8004770:	f7fc fa7f 	bl	8000c72 <HAL_NVIC_EnableIRQ>
}
 8004774:	46c0      	nop			; (mov r8, r8)
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC_Init(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004782:	003b      	movs	r3, r7
 8004784:	0018      	movs	r0, r3
 8004786:	2308      	movs	r3, #8
 8004788:	001a      	movs	r2, r3
 800478a:	2100      	movs	r1, #0
 800478c:	f000 fc41 	bl	8005012 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8004790:	4b44      	ldr	r3, [pc, #272]	; (80048a4 <MX_ADC_Init+0x128>)
 8004792:	4a45      	ldr	r2, [pc, #276]	; (80048a8 <MX_ADC_Init+0x12c>)
 8004794:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8004796:	4b43      	ldr	r3, [pc, #268]	; (80048a4 <MX_ADC_Init+0x128>)
 8004798:	2200      	movs	r2, #0
 800479a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800479c:	4b41      	ldr	r3, [pc, #260]	; (80048a4 <MX_ADC_Init+0x128>)
 800479e:	2280      	movs	r2, #128	; 0x80
 80047a0:	0312      	lsls	r2, r2, #12
 80047a2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80047a4:	4b3f      	ldr	r3, [pc, #252]	; (80048a4 <MX_ADC_Init+0x128>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_39CYCLES_5;
 80047aa:	4b3e      	ldr	r3, [pc, #248]	; (80048a4 <MX_ADC_Init+0x128>)
 80047ac:	2205      	movs	r2, #5
 80047ae:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80047b0:	4b3c      	ldr	r3, [pc, #240]	; (80048a4 <MX_ADC_Init+0x128>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80047b6:	4b3b      	ldr	r3, [pc, #236]	; (80048a4 <MX_ADC_Init+0x128>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 80047bc:	4b39      	ldr	r3, [pc, #228]	; (80048a4 <MX_ADC_Init+0x128>)
 80047be:	2220      	movs	r2, #32
 80047c0:	2101      	movs	r1, #1
 80047c2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80047c4:	4b37      	ldr	r3, [pc, #220]	; (80048a4 <MX_ADC_Init+0x128>)
 80047c6:	2221      	movs	r2, #33	; 0x21
 80047c8:	2100      	movs	r1, #0
 80047ca:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80047cc:	4b35      	ldr	r3, [pc, #212]	; (80048a4 <MX_ADC_Init+0x128>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80047d2:	4b34      	ldr	r3, [pc, #208]	; (80048a4 <MX_ADC_Init+0x128>)
 80047d4:	22c2      	movs	r2, #194	; 0xc2
 80047d6:	32ff      	adds	r2, #255	; 0xff
 80047d8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 80047da:	4b32      	ldr	r3, [pc, #200]	; (80048a4 <MX_ADC_Init+0x128>)
 80047dc:	222c      	movs	r2, #44	; 0x2c
 80047de:	2101      	movs	r1, #1
 80047e0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80047e2:	4b30      	ldr	r3, [pc, #192]	; (80048a4 <MX_ADC_Init+0x128>)
 80047e4:	2208      	movs	r2, #8
 80047e6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80047e8:	4b2e      	ldr	r3, [pc, #184]	; (80048a4 <MX_ADC_Init+0x128>)
 80047ea:	2280      	movs	r2, #128	; 0x80
 80047ec:	0152      	lsls	r2, r2, #5
 80047ee:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80047f0:	4b2c      	ldr	r3, [pc, #176]	; (80048a4 <MX_ADC_Init+0x128>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80047f6:	4b2b      	ldr	r3, [pc, #172]	; (80048a4 <MX_ADC_Init+0x128>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80047fc:	4b29      	ldr	r3, [pc, #164]	; (80048a4 <MX_ADC_Init+0x128>)
 80047fe:	2200      	movs	r2, #0
 8004800:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004802:	4b28      	ldr	r3, [pc, #160]	; (80048a4 <MX_ADC_Init+0x128>)
 8004804:	0018      	movs	r0, r3
 8004806:	f7fb fd41 	bl	800028c <HAL_ADC_Init>
 800480a:	1e03      	subs	r3, r0, #0
 800480c:	d001      	beq.n	8004812 <MX_ADC_Init+0x96>
  {
    Error_Handler();
 800480e:	f000 f9df 	bl	8004bd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004812:	003b      	movs	r3, r7
 8004814:	2201      	movs	r2, #1
 8004816:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004818:	003b      	movs	r3, r7
 800481a:	2280      	movs	r2, #128	; 0x80
 800481c:	0152      	lsls	r2, r2, #5
 800481e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004820:	003a      	movs	r2, r7
 8004822:	4b20      	ldr	r3, [pc, #128]	; (80048a4 <MX_ADC_Init+0x128>)
 8004824:	0011      	movs	r1, r2
 8004826:	0018      	movs	r0, r3
 8004828:	f7fc f802 	bl	8000830 <HAL_ADC_ConfigChannel>
 800482c:	1e03      	subs	r3, r0, #0
 800482e:	d001      	beq.n	8004834 <MX_ADC_Init+0xb8>
  {
    Error_Handler();
 8004830:	f000 f9ce 	bl	8004bd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004834:	003b      	movs	r3, r7
 8004836:	4a1d      	ldr	r2, [pc, #116]	; (80048ac <MX_ADC_Init+0x130>)
 8004838:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800483a:	003a      	movs	r2, r7
 800483c:	4b19      	ldr	r3, [pc, #100]	; (80048a4 <MX_ADC_Init+0x128>)
 800483e:	0011      	movs	r1, r2
 8004840:	0018      	movs	r0, r3
 8004842:	f7fb fff5 	bl	8000830 <HAL_ADC_ConfigChannel>
 8004846:	1e03      	subs	r3, r0, #0
 8004848:	d001      	beq.n	800484e <MX_ADC_Init+0xd2>
  {
    Error_Handler();
 800484a:	f000 f9c1 	bl	8004bd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800484e:	003b      	movs	r3, r7
 8004850:	4a17      	ldr	r2, [pc, #92]	; (80048b0 <MX_ADC_Init+0x134>)
 8004852:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004854:	003a      	movs	r2, r7
 8004856:	4b13      	ldr	r3, [pc, #76]	; (80048a4 <MX_ADC_Init+0x128>)
 8004858:	0011      	movs	r1, r2
 800485a:	0018      	movs	r0, r3
 800485c:	f7fb ffe8 	bl	8000830 <HAL_ADC_ConfigChannel>
 8004860:	1e03      	subs	r3, r0, #0
 8004862:	d001      	beq.n	8004868 <MX_ADC_Init+0xec>
  {
    Error_Handler();
 8004864:	f000 f9b4 	bl	8004bd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004868:	003b      	movs	r3, r7
 800486a:	4a12      	ldr	r2, [pc, #72]	; (80048b4 <MX_ADC_Init+0x138>)
 800486c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800486e:	003a      	movs	r2, r7
 8004870:	4b0c      	ldr	r3, [pc, #48]	; (80048a4 <MX_ADC_Init+0x128>)
 8004872:	0011      	movs	r1, r2
 8004874:	0018      	movs	r0, r3
 8004876:	f7fb ffdb 	bl	8000830 <HAL_ADC_ConfigChannel>
 800487a:	1e03      	subs	r3, r0, #0
 800487c:	d001      	beq.n	8004882 <MX_ADC_Init+0x106>
  {
    Error_Handler();
 800487e:	f000 f9a7 	bl	8004bd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004882:	003b      	movs	r3, r7
 8004884:	4a0c      	ldr	r2, [pc, #48]	; (80048b8 <MX_ADC_Init+0x13c>)
 8004886:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004888:	003a      	movs	r2, r7
 800488a:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <MX_ADC_Init+0x128>)
 800488c:	0011      	movs	r1, r2
 800488e:	0018      	movs	r0, r3
 8004890:	f7fb ffce 	bl	8000830 <HAL_ADC_ConfigChannel>
 8004894:	1e03      	subs	r3, r0, #0
 8004896:	d001      	beq.n	800489c <MX_ADC_Init+0x120>
  {
    Error_Handler();
 8004898:	f000 f99a 	bl	8004bd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800489c:	46c0      	nop			; (mov r8, r8)
 800489e:	46bd      	mov	sp, r7
 80048a0:	b002      	add	sp, #8
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	20001050 	.word	0x20001050
 80048a8:	40012400 	.word	0x40012400
 80048ac:	04000002 	.word	0x04000002
 80048b0:	08000004 	.word	0x08000004
 80048b4:	0c000008 	.word	0x0c000008
 80048b8:	10000010 	.word	0x10000010

080048bc <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM21_Init(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048c2:	2308      	movs	r3, #8
 80048c4:	18fb      	adds	r3, r7, r3
 80048c6:	0018      	movs	r0, r3
 80048c8:	2310      	movs	r3, #16
 80048ca:	001a      	movs	r2, r3
 80048cc:	2100      	movs	r1, #0
 80048ce:	f000 fba0 	bl	8005012 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048d2:	003b      	movs	r3, r7
 80048d4:	0018      	movs	r0, r3
 80048d6:	2308      	movs	r3, #8
 80048d8:	001a      	movs	r2, r3
 80048da:	2100      	movs	r1, #0
 80048dc:	f000 fb99 	bl	8005012 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 80048e0:	4b1e      	ldr	r3, [pc, #120]	; (800495c <MX_TIM21_Init+0xa0>)
 80048e2:	4a1f      	ldr	r2, [pc, #124]	; (8004960 <MX_TIM21_Init+0xa4>)
 80048e4:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 32000-1;
 80048e6:	4b1d      	ldr	r3, [pc, #116]	; (800495c <MX_TIM21_Init+0xa0>)
 80048e8:	4a1e      	ldr	r2, [pc, #120]	; (8004964 <MX_TIM21_Init+0xa8>)
 80048ea:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048ec:	4b1b      	ldr	r3, [pc, #108]	; (800495c <MX_TIM21_Init+0xa0>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 100-1;
 80048f2:	4b1a      	ldr	r3, [pc, #104]	; (800495c <MX_TIM21_Init+0xa0>)
 80048f4:	2263      	movs	r2, #99	; 0x63
 80048f6:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048f8:	4b18      	ldr	r3, [pc, #96]	; (800495c <MX_TIM21_Init+0xa0>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80048fe:	4b17      	ldr	r3, [pc, #92]	; (800495c <MX_TIM21_Init+0xa0>)
 8004900:	2280      	movs	r2, #128	; 0x80
 8004902:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8004904:	4b15      	ldr	r3, [pc, #84]	; (800495c <MX_TIM21_Init+0xa0>)
 8004906:	0018      	movs	r0, r3
 8004908:	f7fd fafc 	bl	8001f04 <HAL_TIM_Base_Init>
 800490c:	1e03      	subs	r3, r0, #0
 800490e:	d001      	beq.n	8004914 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8004910:	f000 f95e 	bl	8004bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004914:	2108      	movs	r1, #8
 8004916:	187b      	adds	r3, r7, r1
 8004918:	2280      	movs	r2, #128	; 0x80
 800491a:	0152      	lsls	r2, r2, #5
 800491c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 800491e:	187a      	adds	r2, r7, r1
 8004920:	4b0e      	ldr	r3, [pc, #56]	; (800495c <MX_TIM21_Init+0xa0>)
 8004922:	0011      	movs	r1, r2
 8004924:	0018      	movs	r0, r3
 8004926:	f7fd fc45 	bl	80021b4 <HAL_TIM_ConfigClockSource>
 800492a:	1e03      	subs	r3, r0, #0
 800492c:	d001      	beq.n	8004932 <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 800492e:	f000 f94f 	bl	8004bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004932:	003b      	movs	r3, r7
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004938:	003b      	movs	r3, r7
 800493a:	2200      	movs	r2, #0
 800493c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 800493e:	003a      	movs	r2, r7
 8004940:	4b06      	ldr	r3, [pc, #24]	; (800495c <MX_TIM21_Init+0xa0>)
 8004942:	0011      	movs	r1, r2
 8004944:	0018      	movs	r0, r3
 8004946:	f7fd fe0b 	bl	8002560 <HAL_TIMEx_MasterConfigSynchronization>
 800494a:	1e03      	subs	r3, r0, #0
 800494c:	d001      	beq.n	8004952 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 800494e:	f000 f93f 	bl	8004bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	46bd      	mov	sp, r7
 8004956:	b006      	add	sp, #24
 8004958:	bd80      	pop	{r7, pc}
 800495a:	46c0      	nop			; (mov r8, r8)
 800495c:	200010ac 	.word	0x200010ac
 8004960:	40010800 	.word	0x40010800
 8004964:	00007cff 	.word	0x00007cff

08004968 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM22_Init(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800496e:	2308      	movs	r3, #8
 8004970:	18fb      	adds	r3, r7, r3
 8004972:	0018      	movs	r0, r3
 8004974:	2310      	movs	r3, #16
 8004976:	001a      	movs	r2, r3
 8004978:	2100      	movs	r1, #0
 800497a:	f000 fb4a 	bl	8005012 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800497e:	003b      	movs	r3, r7
 8004980:	0018      	movs	r0, r3
 8004982:	2308      	movs	r3, #8
 8004984:	001a      	movs	r2, r3
 8004986:	2100      	movs	r1, #0
 8004988:	f000 fb43 	bl	8005012 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 800498c:	4b20      	ldr	r3, [pc, #128]	; (8004a10 <MX_TIM22_Init+0xa8>)
 800498e:	4a21      	ldr	r2, [pc, #132]	; (8004a14 <MX_TIM22_Init+0xac>)
 8004990:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 32-1;
 8004992:	4b1f      	ldr	r3, [pc, #124]	; (8004a10 <MX_TIM22_Init+0xa8>)
 8004994:	221f      	movs	r2, #31
 8004996:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004998:	4b1d      	ldr	r3, [pc, #116]	; (8004a10 <MX_TIM22_Init+0xa8>)
 800499a:	2200      	movs	r2, #0
 800499c:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 0xFFFF-1;
 800499e:	4b1c      	ldr	r3, [pc, #112]	; (8004a10 <MX_TIM22_Init+0xa8>)
 80049a0:	4a1d      	ldr	r2, [pc, #116]	; (8004a18 <MX_TIM22_Init+0xb0>)
 80049a2:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049a4:	4b1a      	ldr	r3, [pc, #104]	; (8004a10 <MX_TIM22_Init+0xa8>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049aa:	4b19      	ldr	r3, [pc, #100]	; (8004a10 <MX_TIM22_Init+0xa8>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 80049b0:	4b17      	ldr	r3, [pc, #92]	; (8004a10 <MX_TIM22_Init+0xa8>)
 80049b2:	0018      	movs	r0, r3
 80049b4:	f7fd faa6 	bl	8001f04 <HAL_TIM_Base_Init>
 80049b8:	1e03      	subs	r3, r0, #0
 80049ba:	d001      	beq.n	80049c0 <MX_TIM22_Init+0x58>
  {
    Error_Handler();
 80049bc:	f000 f908 	bl	8004bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049c0:	2108      	movs	r1, #8
 80049c2:	187b      	adds	r3, r7, r1
 80049c4:	2280      	movs	r2, #128	; 0x80
 80049c6:	0152      	lsls	r2, r2, #5
 80049c8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 80049ca:	187a      	adds	r2, r7, r1
 80049cc:	4b10      	ldr	r3, [pc, #64]	; (8004a10 <MX_TIM22_Init+0xa8>)
 80049ce:	0011      	movs	r1, r2
 80049d0:	0018      	movs	r0, r3
 80049d2:	f7fd fbef 	bl	80021b4 <HAL_TIM_ConfigClockSource>
 80049d6:	1e03      	subs	r3, r0, #0
 80049d8:	d001      	beq.n	80049de <MX_TIM22_Init+0x76>
  {
    Error_Handler();
 80049da:	f000 f8f9 	bl	8004bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049de:	003b      	movs	r3, r7
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049e4:	003b      	movs	r3, r7
 80049e6:	2200      	movs	r2, #0
 80049e8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 80049ea:	003a      	movs	r2, r7
 80049ec:	4b08      	ldr	r3, [pc, #32]	; (8004a10 <MX_TIM22_Init+0xa8>)
 80049ee:	0011      	movs	r1, r2
 80049f0:	0018      	movs	r0, r3
 80049f2:	f7fd fdb5 	bl	8002560 <HAL_TIMEx_MasterConfigSynchronization>
 80049f6:	1e03      	subs	r3, r0, #0
 80049f8:	d001      	beq.n	80049fe <MX_TIM22_Init+0x96>
  {
    Error_Handler();
 80049fa:	f000 f8e9 	bl	8004bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */
  HAL_TIM_Base_Start(&htim22);
 80049fe:	4b04      	ldr	r3, [pc, #16]	; (8004a10 <MX_TIM22_Init+0xa8>)
 8004a00:	0018      	movs	r0, r3
 8004a02:	f7fd faab 	bl	8001f5c <HAL_TIM_Base_Start>
  /* USER CODE END TIM22_Init 2 */

}
 8004a06:	46c0      	nop			; (mov r8, r8)
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	b006      	add	sp, #24
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	20000fcc 	.word	0x20000fcc
 8004a14:	40011400 	.word	0x40011400
 8004a18:	0000fffe 	.word	0x0000fffe

08004a1c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004a22:	4b0c      	ldr	r3, [pc, #48]	; (8004a54 <MX_DMA_Init+0x38>)
 8004a24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a26:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <MX_DMA_Init+0x38>)
 8004a28:	2101      	movs	r1, #1
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	631a      	str	r2, [r3, #48]	; 0x30
 8004a2e:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <MX_DMA_Init+0x38>)
 8004a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a32:	2201      	movs	r2, #1
 8004a34:	4013      	ands	r3, r2
 8004a36:	607b      	str	r3, [r7, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	2103      	movs	r1, #3
 8004a3e:	2009      	movs	r0, #9
 8004a40:	f7fc f902 	bl	8000c48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004a44:	2009      	movs	r0, #9
 8004a46:	f7fc f914 	bl	8000c72 <HAL_NVIC_EnableIRQ>

}
 8004a4a:	46c0      	nop			; (mov r8, r8)
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	b002      	add	sp, #8
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	40021000 	.word	0x40021000

08004a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8004a58:	b590      	push	{r4, r7, lr}
 8004a5a:	b089      	sub	sp, #36	; 0x24
 8004a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a5e:	240c      	movs	r4, #12
 8004a60:	193b      	adds	r3, r7, r4
 8004a62:	0018      	movs	r0, r3
 8004a64:	2314      	movs	r3, #20
 8004a66:	001a      	movs	r2, r3
 8004a68:	2100      	movs	r1, #0
 8004a6a:	f000 fad2 	bl	8005012 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a6e:	4b3e      	ldr	r3, [pc, #248]	; (8004b68 <MX_GPIO_Init+0x110>)
 8004a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a72:	4b3d      	ldr	r3, [pc, #244]	; (8004b68 <MX_GPIO_Init+0x110>)
 8004a74:	2101      	movs	r1, #1
 8004a76:	430a      	orrs	r2, r1
 8004a78:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a7a:	4b3b      	ldr	r3, [pc, #236]	; (8004b68 <MX_GPIO_Init+0x110>)
 8004a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7e:	2201      	movs	r2, #1
 8004a80:	4013      	ands	r3, r2
 8004a82:	60bb      	str	r3, [r7, #8]
 8004a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a86:	4b38      	ldr	r3, [pc, #224]	; (8004b68 <MX_GPIO_Init+0x110>)
 8004a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a8a:	4b37      	ldr	r3, [pc, #220]	; (8004b68 <MX_GPIO_Init+0x110>)
 8004a8c:	2102      	movs	r1, #2
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a92:	4b35      	ldr	r3, [pc, #212]	; (8004b68 <MX_GPIO_Init+0x110>)
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	2202      	movs	r2, #2
 8004a98:	4013      	ands	r3, r2
 8004a9a:	607b      	str	r3, [r7, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8004a9e:	4b33      	ldr	r3, [pc, #204]	; (8004b6c <MX_GPIO_Init+0x114>)
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	f7fc fc2d 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_CTRL_Pin|CHR_CTRL_Pin, GPIO_PIN_RESET);
 8004aaa:	4b30      	ldr	r3, [pc, #192]	; (8004b6c <MX_GPIO_Init+0x114>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	210a      	movs	r1, #10
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	f7fc fc27 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_IND_Pin|VMON_CLK_Pin, GPIO_PIN_RESET);
 8004ab6:	2381      	movs	r3, #129	; 0x81
 8004ab8:	0219      	lsls	r1, r3, #8
 8004aba:	23a0      	movs	r3, #160	; 0xa0
 8004abc:	05db      	lsls	r3, r3, #23
 8004abe:	2200      	movs	r2, #0
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f7fc fc1f 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8004ac6:	0021      	movs	r1, r4
 8004ac8:	187b      	adds	r3, r7, r1
 8004aca:	2201      	movs	r2, #1
 8004acc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ace:	187b      	adds	r3, r7, r1
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad4:	187b      	adds	r3, r7, r1
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ada:	187b      	adds	r3, r7, r1
 8004adc:	2200      	movs	r2, #0
 8004ade:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8004ae0:	000c      	movs	r4, r1
 8004ae2:	187b      	adds	r3, r7, r1
 8004ae4:	4a21      	ldr	r2, [pc, #132]	; (8004b6c <MX_GPIO_Init+0x114>)
 8004ae6:	0019      	movs	r1, r3
 8004ae8:	0010      	movs	r0, r2
 8004aea:	f7fc fa8d 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_CTRL_Pin CHR_CTRL_Pin */
  GPIO_InitStruct.Pin = LED_CTRL_Pin|CHR_CTRL_Pin;
 8004aee:	0021      	movs	r1, r4
 8004af0:	187b      	adds	r3, r7, r1
 8004af2:	220a      	movs	r2, #10
 8004af4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004af6:	187b      	adds	r3, r7, r1
 8004af8:	2201      	movs	r2, #1
 8004afa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004afc:	187b      	adds	r3, r7, r1
 8004afe:	2202      	movs	r2, #2
 8004b00:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b02:	187b      	adds	r3, r7, r1
 8004b04:	2200      	movs	r2, #0
 8004b06:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b08:	000c      	movs	r4, r1
 8004b0a:	187b      	adds	r3, r7, r1
 8004b0c:	4a17      	ldr	r2, [pc, #92]	; (8004b6c <MX_GPIO_Init+0x114>)
 8004b0e:	0019      	movs	r1, r3
 8004b10:	0010      	movs	r0, r2
 8004b12:	f7fc fa79 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_IND_Pin VMON_CLK_Pin */
  GPIO_InitStruct.Pin = LED_IND_Pin|VMON_CLK_Pin;
 8004b16:	0021      	movs	r1, r4
 8004b18:	187b      	adds	r3, r7, r1
 8004b1a:	2281      	movs	r2, #129	; 0x81
 8004b1c:	0212      	lsls	r2, r2, #8
 8004b1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b20:	187b      	adds	r3, r7, r1
 8004b22:	2201      	movs	r2, #1
 8004b24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b26:	187b      	adds	r3, r7, r1
 8004b28:	2200      	movs	r2, #0
 8004b2a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b2c:	187b      	adds	r3, r7, r1
 8004b2e:	2200      	movs	r2, #0
 8004b30:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b32:	000c      	movs	r4, r1
 8004b34:	187a      	adds	r2, r7, r1
 8004b36:	23a0      	movs	r3, #160	; 0xa0
 8004b38:	05db      	lsls	r3, r3, #23
 8004b3a:	0011      	movs	r1, r2
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	f7fc fa63 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pins : STAT2_Pin STAT1_Pin */
  GPIO_InitStruct.Pin = STAT2_Pin|STAT1_Pin;
 8004b42:	193b      	adds	r3, r7, r4
 8004b44:	2230      	movs	r2, #48	; 0x30
 8004b46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b48:	193b      	adds	r3, r7, r4
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b4e:	193b      	adds	r3, r7, r4
 8004b50:	2201      	movs	r2, #1
 8004b52:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b54:	193b      	adds	r3, r7, r4
 8004b56:	4a05      	ldr	r2, [pc, #20]	; (8004b6c <MX_GPIO_Init+0x114>)
 8004b58:	0019      	movs	r1, r3
 8004b5a:	0010      	movs	r0, r2
 8004b5c:	f7fc fa54 	bl	8001008 <HAL_GPIO_Init>

}
 8004b60:	46c0      	nop			; (mov r8, r8)
 8004b62:	46bd      	mov	sp, r7
 8004b64:	b009      	add	sp, #36	; 0x24
 8004b66:	bd90      	pop	{r4, r7, pc}
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	50000400 	.word	0x50000400

08004b70 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//uint32_t intensity_test = 0;
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004b78:	2001      	movs	r0, #1
 8004b7a:	f7fd fdb0 	bl	80026de <osDelay>
 8004b7e:	e7fb      	b.n	8004b78 <StartDefaultTask+0x8>

08004b80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	2380      	movs	r3, #128	; 0x80
 8004b8e:	05db      	lsls	r3, r3, #23
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d101      	bne.n	8004b98 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8004b94:	f7fb fb64 	bl	8000260 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM21)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a0a      	ldr	r2, [pc, #40]	; (8004bc8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d10d      	bne.n	8004bbe <HAL_TIM_PeriodElapsedCallback+0x3e>
  {
	  HAL_GPIO_TogglePin(VMON_CLK_GPIO_Port, VMON_CLK_Pin);
 8004ba2:	2380      	movs	r3, #128	; 0x80
 8004ba4:	021a      	lsls	r2, r3, #8
 8004ba6:	23a0      	movs	r3, #160	; 0xa0
 8004ba8:	05db      	lsls	r3, r3, #23
 8004baa:	0011      	movs	r1, r2
 8004bac:	0018      	movs	r0, r3
 8004bae:	f7fc fbc6 	bl	800133e <HAL_GPIO_TogglePin>
	  osSignalSet (MonitorTaskHandle, 0x00000001);
 8004bb2:	4b06      	ldr	r3, [pc, #24]	; (8004bcc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f7fd fda5 	bl	8002708 <osSignalSet>
  }

  /* USER CODE END Callback 1 */
}
 8004bbe:	46c0      	nop			; (mov r8, r8)
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	b002      	add	sp, #8
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	46c0      	nop			; (mov r8, r8)
 8004bc8:	40010800 	.word	0x40010800
 8004bcc:	20001110 	.word	0x20001110

08004bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004bd4:	46c0      	nop			; (mov r8, r8)
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <MonitorTask>:

osThreadId MonitorTaskHandle;
DevStorageTypDef storage;

void MonitorTask(void const * argument)
{
 8004bdc:	b590      	push	{r4, r7, lr}
 8004bde:	b089      	sub	sp, #36	; 0x24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  osEvent evt;
  uint16_t  local_adc_data[5];
  static uint32_t mon_dayticks = 0;

  /*Start ADC DMA Process*/
  if(HAL_ADC_Start_DMA(&hadc, (uint32_t *)storage.adc_data, 5) != HAL_OK)
 8004be4:	4914      	ldr	r1, [pc, #80]	; (8004c38 <MonitorTask+0x5c>)
 8004be6:	4b15      	ldr	r3, [pc, #84]	; (8004c3c <MonitorTask+0x60>)
 8004be8:	2205      	movs	r2, #5
 8004bea:	0018      	movs	r0, r3
 8004bec:	f7fb fcc2 	bl	8000574 <HAL_ADC_Start_DMA>
 8004bf0:	1e03      	subs	r3, r0, #0
 8004bf2:	d001      	beq.n	8004bf8 <MonitorTask+0x1c>
  {
	  Error_Handler();
 8004bf4:	f7ff ffec 	bl	8004bd0 <Error_Handler>
  }

  /*Start timer*/
  HAL_TIM_Base_Start_IT(&htim21);
 8004bf8:	4b11      	ldr	r3, [pc, #68]	; (8004c40 <MonitorTask+0x64>)
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	f7fd f9d0 	bl	8001fa0 <HAL_TIM_Base_Start_IT>

  for(;;)
  {
	  /*Wait for signal from timer interrupt*/
	  evt = osSignalWait (0x00000001, osWaitForever);
 8004c00:	2414      	movs	r4, #20
 8004c02:	1938      	adds	r0, r7, r4
 8004c04:	2301      	movs	r3, #1
 8004c06:	425b      	negs	r3, r3
 8004c08:	001a      	movs	r2, r3
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	f7fd fdb6 	bl	800277c <osSignalWait>
	  if (evt.status == osEventSignal)
 8004c10:	193b      	adds	r3, r7, r4
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d1f3      	bne.n	8004c00 <MonitorTask+0x24>
	  {
		  HAL_GPIO_TogglePin(LED_IND_GPIO_Port, LED_IND_Pin);
 8004c18:	2380      	movs	r3, #128	; 0x80
 8004c1a:	005a      	lsls	r2, r3, #1
 8004c1c:	23a0      	movs	r3, #160	; 0xa0
 8004c1e:	05db      	lsls	r3, r3, #23
 8004c20:	0011      	movs	r1, r2
 8004c22:	0018      	movs	r0, r3
 8004c24:	f7fc fb8b 	bl	800133e <HAL_GPIO_TogglePin>

		  /*Copy all ADC data measured with DMA*/
		  memcpy(local_adc_data, storage.adc_data, sizeof(storage.adc_data));
 8004c28:	2308      	movs	r3, #8
 8004c2a:	18fb      	adds	r3, r7, r3
 8004c2c:	4a02      	ldr	r2, [pc, #8]	; (8004c38 <MonitorTask+0x5c>)
 8004c2e:	ca03      	ldmia	r2!, {r0, r1}
 8004c30:	c303      	stmia	r3!, {r0, r1}
 8004c32:	8812      	ldrh	r2, [r2, #0]
 8004c34:	801a      	strh	r2, [r3, #0]
	  evt = osSignalWait (0x00000001, osWaitForever);
 8004c36:	e7e3      	b.n	8004c00 <MonitorTask+0x24>
 8004c38:	200010e8 	.word	0x200010e8
 8004c3c:	20001050 	.word	0x20001050
 8004c40:	200010ac 	.word	0x200010ac

08004c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c48:	4b0f      	ldr	r3, [pc, #60]	; (8004c88 <HAL_MspInit+0x44>)
 8004c4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c4c:	4b0e      	ldr	r3, [pc, #56]	; (8004c88 <HAL_MspInit+0x44>)
 8004c4e:	2101      	movs	r1, #1
 8004c50:	430a      	orrs	r2, r1
 8004c52:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c54:	4b0c      	ldr	r3, [pc, #48]	; (8004c88 <HAL_MspInit+0x44>)
 8004c56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c58:	4b0b      	ldr	r3, [pc, #44]	; (8004c88 <HAL_MspInit+0x44>)
 8004c5a:	2180      	movs	r1, #128	; 0x80
 8004c5c:	0549      	lsls	r1, r1, #21
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8004c62:	2302      	movs	r3, #2
 8004c64:	425b      	negs	r3, r3
 8004c66:	2200      	movs	r2, #0
 8004c68:	2103      	movs	r1, #3
 8004c6a:	0018      	movs	r0, r3
 8004c6c:	f7fb ffec 	bl	8000c48 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 3, 0);
 8004c70:	2200      	movs	r2, #0
 8004c72:	2103      	movs	r1, #3
 8004c74:	2004      	movs	r0, #4
 8004c76:	f7fb ffe7 	bl	8000c48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8004c7a:	2004      	movs	r0, #4
 8004c7c:	f7fb fff9 	bl	8000c72 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c80:	46c0      	nop			; (mov r8, r8)
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	46c0      	nop			; (mov r8, r8)
 8004c88:	40021000 	.word	0x40021000

08004c8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b088      	sub	sp, #32
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c94:	230c      	movs	r3, #12
 8004c96:	18fb      	adds	r3, r7, r3
 8004c98:	0018      	movs	r0, r3
 8004c9a:	2314      	movs	r3, #20
 8004c9c:	001a      	movs	r2, r3
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	f000 f9b7 	bl	8005012 <memset>
  if(hadc->Instance==ADC1)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a2f      	ldr	r2, [pc, #188]	; (8004d68 <HAL_ADC_MspInit+0xdc>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d157      	bne.n	8004d5e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004cae:	4b2f      	ldr	r3, [pc, #188]	; (8004d6c <HAL_ADC_MspInit+0xe0>)
 8004cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cb2:	4b2e      	ldr	r3, [pc, #184]	; (8004d6c <HAL_ADC_MspInit+0xe0>)
 8004cb4:	2180      	movs	r1, #128	; 0x80
 8004cb6:	0089      	lsls	r1, r1, #2
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cbc:	4b2b      	ldr	r3, [pc, #172]	; (8004d6c <HAL_ADC_MspInit+0xe0>)
 8004cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc0:	4b2a      	ldr	r3, [pc, #168]	; (8004d6c <HAL_ADC_MspInit+0xe0>)
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8004cc8:	4b28      	ldr	r3, [pc, #160]	; (8004d6c <HAL_ADC_MspInit+0xe0>)
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	2201      	movs	r2, #1
 8004cce:	4013      	ands	r3, r2
 8004cd0:	60bb      	str	r3, [r7, #8]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4 
    */
    GPIO_InitStruct.Pin = ISENS1_Pin|ISENS2_Pin|VINPUT_Pin|VBAT_Pin 
 8004cd4:	210c      	movs	r1, #12
 8004cd6:	187b      	adds	r3, r7, r1
 8004cd8:	221f      	movs	r2, #31
 8004cda:	601a      	str	r2, [r3, #0]
                          |VAUX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004cdc:	187b      	adds	r3, r7, r1
 8004cde:	2203      	movs	r2, #3
 8004ce0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce2:	187b      	adds	r3, r7, r1
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ce8:	187a      	adds	r2, r7, r1
 8004cea:	23a0      	movs	r3, #160	; 0xa0
 8004cec:	05db      	lsls	r3, r3, #23
 8004cee:	0011      	movs	r1, r2
 8004cf0:	0018      	movs	r0, r3
 8004cf2:	f7fc f989 	bl	8001008 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8004cf6:	4b1e      	ldr	r3, [pc, #120]	; (8004d70 <HAL_ADC_MspInit+0xe4>)
 8004cf8:	4a1e      	ldr	r2, [pc, #120]	; (8004d74 <HAL_ADC_MspInit+0xe8>)
 8004cfa:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8004cfc:	4b1c      	ldr	r3, [pc, #112]	; (8004d70 <HAL_ADC_MspInit+0xe4>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d02:	4b1b      	ldr	r3, [pc, #108]	; (8004d70 <HAL_ADC_MspInit+0xe4>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d08:	4b19      	ldr	r3, [pc, #100]	; (8004d70 <HAL_ADC_MspInit+0xe4>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8004d0e:	4b18      	ldr	r3, [pc, #96]	; (8004d70 <HAL_ADC_MspInit+0xe4>)
 8004d10:	2280      	movs	r2, #128	; 0x80
 8004d12:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004d14:	4b16      	ldr	r3, [pc, #88]	; (8004d70 <HAL_ADC_MspInit+0xe4>)
 8004d16:	2280      	movs	r2, #128	; 0x80
 8004d18:	0052      	lsls	r2, r2, #1
 8004d1a:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004d1c:	4b14      	ldr	r3, [pc, #80]	; (8004d70 <HAL_ADC_MspInit+0xe4>)
 8004d1e:	2280      	movs	r2, #128	; 0x80
 8004d20:	00d2      	lsls	r2, r2, #3
 8004d22:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8004d24:	4b12      	ldr	r3, [pc, #72]	; (8004d70 <HAL_ADC_MspInit+0xe4>)
 8004d26:	2220      	movs	r2, #32
 8004d28:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8004d2a:	4b11      	ldr	r3, [pc, #68]	; (8004d70 <HAL_ADC_MspInit+0xe4>)
 8004d2c:	2280      	movs	r2, #128	; 0x80
 8004d2e:	0192      	lsls	r2, r2, #6
 8004d30:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8004d32:	4b0f      	ldr	r3, [pc, #60]	; (8004d70 <HAL_ADC_MspInit+0xe4>)
 8004d34:	0018      	movs	r0, r3
 8004d36:	f7fb ffad 	bl	8000c94 <HAL_DMA_Init>
 8004d3a:	1e03      	subs	r3, r0, #0
 8004d3c:	d001      	beq.n	8004d42 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8004d3e:	f7ff ff47 	bl	8004bd0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a0a      	ldr	r2, [pc, #40]	; (8004d70 <HAL_ADC_MspInit+0xe4>)
 8004d46:	64da      	str	r2, [r3, #76]	; 0x4c
 8004d48:	4b09      	ldr	r3, [pc, #36]	; (8004d70 <HAL_ADC_MspInit+0xe4>)
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 3, 0);
 8004d4e:	2200      	movs	r2, #0
 8004d50:	2103      	movs	r1, #3
 8004d52:	200c      	movs	r0, #12
 8004d54:	f7fb ff78 	bl	8000c48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8004d58:	200c      	movs	r0, #12
 8004d5a:	f7fb ff8a 	bl	8000c72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004d5e:	46c0      	nop			; (mov r8, r8)
 8004d60:	46bd      	mov	sp, r7
 8004d62:	b008      	add	sp, #32
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	40012400 	.word	0x40012400
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	20001008 	.word	0x20001008
 8004d74:	40020008 	.word	0x40020008

08004d78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM21)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a0c      	ldr	r2, [pc, #48]	; (8004db8 <HAL_TIM_Base_MspInit+0x40>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d106      	bne.n	8004d98 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 8004d8a:	4b0c      	ldr	r3, [pc, #48]	; (8004dbc <HAL_TIM_Base_MspInit+0x44>)
 8004d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d8e:	4b0b      	ldr	r3, [pc, #44]	; (8004dbc <HAL_TIM_Base_MspInit+0x44>)
 8004d90:	2104      	movs	r1, #4
 8004d92:	430a      	orrs	r2, r1
 8004d94:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8004d96:	e00a      	b.n	8004dae <HAL_TIM_Base_MspInit+0x36>
  else if(htim_base->Instance==TIM22)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a08      	ldr	r2, [pc, #32]	; (8004dc0 <HAL_TIM_Base_MspInit+0x48>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d105      	bne.n	8004dae <HAL_TIM_Base_MspInit+0x36>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8004da2:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <HAL_TIM_Base_MspInit+0x44>)
 8004da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004da6:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <HAL_TIM_Base_MspInit+0x44>)
 8004da8:	2120      	movs	r1, #32
 8004daa:	430a      	orrs	r2, r1
 8004dac:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	46bd      	mov	sp, r7
 8004db2:	b002      	add	sp, #8
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	46c0      	nop			; (mov r8, r8)
 8004db8:	40010800 	.word	0x40010800
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	40011400 	.word	0x40011400

08004dc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b08a      	sub	sp, #40	; 0x28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	0019      	movs	r1, r3
 8004dda:	200f      	movs	r0, #15
 8004ddc:	f7fb ff34 	bl	8000c48 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8004de0:	200f      	movs	r0, #15
 8004de2:	f7fb ff46 	bl	8000c72 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004de6:	4b1d      	ldr	r3, [pc, #116]	; (8004e5c <HAL_InitTick+0x98>)
 8004de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dea:	4b1c      	ldr	r3, [pc, #112]	; (8004e5c <HAL_InitTick+0x98>)
 8004dec:	2101      	movs	r1, #1
 8004dee:	430a      	orrs	r2, r1
 8004df0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004df2:	2308      	movs	r3, #8
 8004df4:	18fa      	adds	r2, r7, r3
 8004df6:	230c      	movs	r3, #12
 8004df8:	18fb      	adds	r3, r7, r3
 8004dfa:	0011      	movs	r1, r2
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f7fd f84f 	bl	8001ea0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004e02:	f7fd f837 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 8004e06:	0003      	movs	r3, r0
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	4914      	ldr	r1, [pc, #80]	; (8004e60 <HAL_InitTick+0x9c>)
 8004e0e:	0018      	movs	r0, r3
 8004e10:	f7fb f97a 	bl	8000108 <__udivsi3>
 8004e14:	0003      	movs	r3, r0
 8004e16:	3b01      	subs	r3, #1
 8004e18:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8004e1a:	4b12      	ldr	r3, [pc, #72]	; (8004e64 <HAL_InitTick+0xa0>)
 8004e1c:	2280      	movs	r2, #128	; 0x80
 8004e1e:	05d2      	lsls	r2, r2, #23
 8004e20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8004e22:	4b10      	ldr	r3, [pc, #64]	; (8004e64 <HAL_InitTick+0xa0>)
 8004e24:	4a10      	ldr	r2, [pc, #64]	; (8004e68 <HAL_InitTick+0xa4>)
 8004e26:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8004e28:	4b0e      	ldr	r3, [pc, #56]	; (8004e64 <HAL_InitTick+0xa0>)
 8004e2a:	6a3a      	ldr	r2, [r7, #32]
 8004e2c:	605a      	str	r2, [r3, #4]
  htim2.Init.ClockDivision = 0;
 8004e2e:	4b0d      	ldr	r3, [pc, #52]	; (8004e64 <HAL_InitTick+0xa0>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e34:	4b0b      	ldr	r3, [pc, #44]	; (8004e64 <HAL_InitTick+0xa0>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8004e3a:	4b0a      	ldr	r3, [pc, #40]	; (8004e64 <HAL_InitTick+0xa0>)
 8004e3c:	0018      	movs	r0, r3
 8004e3e:	f7fd f861 	bl	8001f04 <HAL_TIM_Base_Init>
 8004e42:	1e03      	subs	r3, r0, #0
 8004e44:	d105      	bne.n	8004e52 <HAL_InitTick+0x8e>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8004e46:	4b07      	ldr	r3, [pc, #28]	; (8004e64 <HAL_InitTick+0xa0>)
 8004e48:	0018      	movs	r0, r3
 8004e4a:	f7fd f8a9 	bl	8001fa0 <HAL_TIM_Base_Start_IT>
 8004e4e:	0003      	movs	r3, r0
 8004e50:	e000      	b.n	8004e54 <HAL_InitTick+0x90>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
}
 8004e54:	0018      	movs	r0, r3
 8004e56:	46bd      	mov	sp, r7
 8004e58:	b00a      	add	sp, #40	; 0x28
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	40021000 	.word	0x40021000
 8004e60:	000f4240 	.word	0x000f4240
 8004e64:	20001114 	.word	0x20001114
 8004e68:	000003e7 	.word	0x000003e7

08004e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004e70:	46c0      	nop			; (mov r8, r8)
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e7a:	e7fe      	b.n	8004e7a <HardFault_Handler+0x4>

08004e7c <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupt.
  */
void RCC_CRS_IRQHandler(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 8004e80:	46c0      	nop			; (mov r8, r8)
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8004e8c:	4b03      	ldr	r3, [pc, #12]	; (8004e9c <DMA1_Channel1_IRQHandler+0x14>)
 8004e8e:	0018      	movs	r0, r3
 8004e90:	f7fb ffde 	bl	8000e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004e94:	46c0      	nop			; (mov r8, r8)
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	46c0      	nop			; (mov r8, r8)
 8004e9c:	20001008 	.word	0x20001008

08004ea0 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8004ea4:	4b03      	ldr	r3, [pc, #12]	; (8004eb4 <ADC1_COMP_IRQHandler+0x14>)
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	f7fb fbe6 	bl	8000678 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8004eac:	46c0      	nop			; (mov r8, r8)
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	46c0      	nop			; (mov r8, r8)
 8004eb4:	20001050 	.word	0x20001050

08004eb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004ebc:	4b03      	ldr	r3, [pc, #12]	; (8004ecc <TIM2_IRQHandler+0x14>)
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	f7fd f890 	bl	8001fe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004ec4:	46c0      	nop			; (mov r8, r8)
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	20001114 	.word	0x20001114

08004ed0 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8004ed4:	4b03      	ldr	r3, [pc, #12]	; (8004ee4 <TIM21_IRQHandler+0x14>)
 8004ed6:	0018      	movs	r0, r3
 8004ed8:	f7fd f884 	bl	8001fe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8004edc:	46c0      	nop			; (mov r8, r8)
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	46c0      	nop			; (mov r8, r8)
 8004ee4:	200010ac 	.word	0x200010ac

08004ee8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8004eec:	4b17      	ldr	r3, [pc, #92]	; (8004f4c <SystemInit+0x64>)
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	4b16      	ldr	r3, [pc, #88]	; (8004f4c <SystemInit+0x64>)
 8004ef2:	2180      	movs	r1, #128	; 0x80
 8004ef4:	0049      	lsls	r1, r1, #1
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8004efa:	4b14      	ldr	r3, [pc, #80]	; (8004f4c <SystemInit+0x64>)
 8004efc:	68da      	ldr	r2, [r3, #12]
 8004efe:	4b13      	ldr	r3, [pc, #76]	; (8004f4c <SystemInit+0x64>)
 8004f00:	4913      	ldr	r1, [pc, #76]	; (8004f50 <SystemInit+0x68>)
 8004f02:	400a      	ands	r2, r1
 8004f04:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004f06:	4b11      	ldr	r3, [pc, #68]	; (8004f4c <SystemInit+0x64>)
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	4b10      	ldr	r3, [pc, #64]	; (8004f4c <SystemInit+0x64>)
 8004f0c:	4911      	ldr	r1, [pc, #68]	; (8004f54 <SystemInit+0x6c>)
 8004f0e:	400a      	ands	r2, r1
 8004f10:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004f12:	4b0e      	ldr	r3, [pc, #56]	; (8004f4c <SystemInit+0x64>)
 8004f14:	689a      	ldr	r2, [r3, #8]
 8004f16:	4b0d      	ldr	r3, [pc, #52]	; (8004f4c <SystemInit+0x64>)
 8004f18:	2101      	movs	r1, #1
 8004f1a:	438a      	bics	r2, r1
 8004f1c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004f1e:	4b0b      	ldr	r3, [pc, #44]	; (8004f4c <SystemInit+0x64>)
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	4b0a      	ldr	r3, [pc, #40]	; (8004f4c <SystemInit+0x64>)
 8004f24:	490c      	ldr	r1, [pc, #48]	; (8004f58 <SystemInit+0x70>)
 8004f26:	400a      	ands	r2, r1
 8004f28:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8004f2a:	4b08      	ldr	r3, [pc, #32]	; (8004f4c <SystemInit+0x64>)
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	4b07      	ldr	r3, [pc, #28]	; (8004f4c <SystemInit+0x64>)
 8004f30:	490a      	ldr	r1, [pc, #40]	; (8004f5c <SystemInit+0x74>)
 8004f32:	400a      	ands	r2, r1
 8004f34:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004f36:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <SystemInit+0x64>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004f3c:	4b08      	ldr	r3, [pc, #32]	; (8004f60 <SystemInit+0x78>)
 8004f3e:	2280      	movs	r2, #128	; 0x80
 8004f40:	0512      	lsls	r2, r2, #20
 8004f42:	609a      	str	r2, [r3, #8]
#endif
}
 8004f44:	46c0      	nop			; (mov r8, r8)
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	88ff400c 	.word	0x88ff400c
 8004f54:	fef6fff6 	.word	0xfef6fff6
 8004f58:	fffbffff 	.word	0xfffbffff
 8004f5c:	ff02ffff 	.word	0xff02ffff
 8004f60:	e000ed00 	.word	0xe000ed00

08004f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004f64:	480d      	ldr	r0, [pc, #52]	; (8004f9c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004f66:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8004f68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004f6a:	e003      	b.n	8004f74 <LoopCopyDataInit>

08004f6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004f6c:	4b0c      	ldr	r3, [pc, #48]	; (8004fa0 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8004f6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004f70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004f72:	3104      	adds	r1, #4

08004f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8004f74:	480b      	ldr	r0, [pc, #44]	; (8004fa4 <LoopForever+0xa>)
  ldr  r3, =_edata
 8004f76:	4b0c      	ldr	r3, [pc, #48]	; (8004fa8 <LoopForever+0xe>)
  adds  r2, r0, r1
 8004f78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004f7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004f7c:	d3f6      	bcc.n	8004f6c <CopyDataInit>
  ldr  r2, =_sbss
 8004f7e:	4a0b      	ldr	r2, [pc, #44]	; (8004fac <LoopForever+0x12>)
  b  LoopFillZerobss
 8004f80:	e002      	b.n	8004f88 <LoopFillZerobss>

08004f82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8004f82:	2300      	movs	r3, #0
  str  r3, [r2]
 8004f84:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f86:	3204      	adds	r2, #4

08004f88 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8004f88:	4b09      	ldr	r3, [pc, #36]	; (8004fb0 <LoopForever+0x16>)
  cmp  r2, r3
 8004f8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004f8c:	d3f9      	bcc.n	8004f82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004f8e:	f7ff ffab 	bl	8004ee8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f92:	f000 f811 	bl	8004fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f96:	f7ff fb25 	bl	80045e4 <main>

08004f9a <LoopForever>:

LoopForever:
    b LoopForever
 8004f9a:	e7fe      	b.n	8004f9a <LoopForever>
   ldr   r0, =_estack
 8004f9c:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8004fa0:	08005120 	.word	0x08005120
  ldr  r0, =_sdata
 8004fa4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004fa8:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8004fac:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8004fb0:	20001150 	.word	0x20001150

08004fb4 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004fb4:	e7fe      	b.n	8004fb4 <DMA1_Channel2_3_IRQHandler>
	...

08004fb8 <__libc_init_array>:
 8004fb8:	b570      	push	{r4, r5, r6, lr}
 8004fba:	2600      	movs	r6, #0
 8004fbc:	4d0c      	ldr	r5, [pc, #48]	; (8004ff0 <__libc_init_array+0x38>)
 8004fbe:	4c0d      	ldr	r4, [pc, #52]	; (8004ff4 <__libc_init_array+0x3c>)
 8004fc0:	1b64      	subs	r4, r4, r5
 8004fc2:	10a4      	asrs	r4, r4, #2
 8004fc4:	42a6      	cmp	r6, r4
 8004fc6:	d109      	bne.n	8004fdc <__libc_init_array+0x24>
 8004fc8:	2600      	movs	r6, #0
 8004fca:	f000 f82b 	bl	8005024 <_init>
 8004fce:	4d0a      	ldr	r5, [pc, #40]	; (8004ff8 <__libc_init_array+0x40>)
 8004fd0:	4c0a      	ldr	r4, [pc, #40]	; (8004ffc <__libc_init_array+0x44>)
 8004fd2:	1b64      	subs	r4, r4, r5
 8004fd4:	10a4      	asrs	r4, r4, #2
 8004fd6:	42a6      	cmp	r6, r4
 8004fd8:	d105      	bne.n	8004fe6 <__libc_init_array+0x2e>
 8004fda:	bd70      	pop	{r4, r5, r6, pc}
 8004fdc:	00b3      	lsls	r3, r6, #2
 8004fde:	58eb      	ldr	r3, [r5, r3]
 8004fe0:	4798      	blx	r3
 8004fe2:	3601      	adds	r6, #1
 8004fe4:	e7ee      	b.n	8004fc4 <__libc_init_array+0xc>
 8004fe6:	00b3      	lsls	r3, r6, #2
 8004fe8:	58eb      	ldr	r3, [r5, r3]
 8004fea:	4798      	blx	r3
 8004fec:	3601      	adds	r6, #1
 8004fee:	e7f2      	b.n	8004fd6 <__libc_init_array+0x1e>
 8004ff0:	08005118 	.word	0x08005118
 8004ff4:	08005118 	.word	0x08005118
 8004ff8:	08005118 	.word	0x08005118
 8004ffc:	0800511c 	.word	0x0800511c

08005000 <memcpy>:
 8005000:	2300      	movs	r3, #0
 8005002:	b510      	push	{r4, lr}
 8005004:	429a      	cmp	r2, r3
 8005006:	d100      	bne.n	800500a <memcpy+0xa>
 8005008:	bd10      	pop	{r4, pc}
 800500a:	5ccc      	ldrb	r4, [r1, r3]
 800500c:	54c4      	strb	r4, [r0, r3]
 800500e:	3301      	adds	r3, #1
 8005010:	e7f8      	b.n	8005004 <memcpy+0x4>

08005012 <memset>:
 8005012:	0003      	movs	r3, r0
 8005014:	1812      	adds	r2, r2, r0
 8005016:	4293      	cmp	r3, r2
 8005018:	d100      	bne.n	800501c <memset+0xa>
 800501a:	4770      	bx	lr
 800501c:	7019      	strb	r1, [r3, #0]
 800501e:	3301      	adds	r3, #1
 8005020:	e7f9      	b.n	8005016 <memset+0x4>
	...

08005024 <_init>:
 8005024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005026:	46c0      	nop			; (mov r8, r8)
 8005028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800502a:	bc08      	pop	{r3}
 800502c:	469e      	mov	lr, r3
 800502e:	4770      	bx	lr

08005030 <_fini>:
 8005030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005032:	46c0      	nop			; (mov r8, r8)
 8005034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005036:	bc08      	pop	{r3}
 8005038:	469e      	mov	lr, r3
 800503a:	4770      	bx	lr
