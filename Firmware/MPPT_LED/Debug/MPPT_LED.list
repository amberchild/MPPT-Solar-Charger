
MPPT_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000deb8  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aac  0800df78  0800df78  0001df78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea24  0800ea24  000209c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea24  0800ea24  0001ea24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea2c  0800ea2c  000209c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ea2c  0800ea2c  0001ea2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea34  0800ea34  0001ea34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009c0  20000000  0800ea38  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031c0  200009c0  0800f3f8  000209c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000800  20003b80  0800f3f8  00023b80  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002598a  00000000  00000000  000209e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055ba  00000000  00000000  00046372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00015e2f  00000000  00000000  0004b92c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018b8  00000000  00000000  00061760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001900  00000000  00000000  00063018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aa89  00000000  00000000  00064918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000260f8  00000000  00000000  0007f3a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000940ac  00000000  00000000  000a5499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00139545  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005594  00000000  00000000  00139598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200009c0 	.word	0x200009c0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800df60 	.word	0x0800df60

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200009c4 	.word	0x200009c4
 8000104:	0800df60 	.word	0x0800df60

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uhi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5a09      	ldrh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fa2b 	bl	8001898 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f97b 	bl	8001748 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa1d 	bl	8001898 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa13 	bl	8001898 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f9a3 	bl	80017cc <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f999 	bl	80017cc <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f86a 	bl	80005b0 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4647      	mov	r7, r8
 80004ee:	b580      	push	{r7, lr}
 80004f0:	0007      	movs	r7, r0
 80004f2:	4699      	mov	r9, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	469c      	mov	ip, r3
 80004f8:	0413      	lsls	r3, r2, #16
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	001d      	movs	r5, r3
 80004fe:	000e      	movs	r6, r1
 8000500:	4661      	mov	r1, ip
 8000502:	0400      	lsls	r0, r0, #16
 8000504:	0c14      	lsrs	r4, r2, #16
 8000506:	0c00      	lsrs	r0, r0, #16
 8000508:	4345      	muls	r5, r0
 800050a:	434b      	muls	r3, r1
 800050c:	4360      	muls	r0, r4
 800050e:	4361      	muls	r1, r4
 8000510:	18c0      	adds	r0, r0, r3
 8000512:	0c2c      	lsrs	r4, r5, #16
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4372      	muls	r2, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	4463      	add	r3, ip
 800052e:	042d      	lsls	r5, r5, #16
 8000530:	0c2d      	lsrs	r5, r5, #16
 8000532:	18c9      	adds	r1, r1, r3
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	1889      	adds	r1, r1, r2
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_f2uiz>:
 8000544:	219e      	movs	r1, #158	; 0x9e
 8000546:	b510      	push	{r4, lr}
 8000548:	05c9      	lsls	r1, r1, #23
 800054a:	1c04      	adds	r4, r0, #0
 800054c:	f002 f968 	bl	8002820 <__aeabi_fcmpge>
 8000550:	2800      	cmp	r0, #0
 8000552:	d103      	bne.n	800055c <__aeabi_f2uiz+0x18>
 8000554:	1c20      	adds	r0, r4, #0
 8000556:	f000 faa5 	bl	8000aa4 <__aeabi_f2iz>
 800055a:	bd10      	pop	{r4, pc}
 800055c:	219e      	movs	r1, #158	; 0x9e
 800055e:	1c20      	adds	r0, r4, #0
 8000560:	05c9      	lsls	r1, r1, #23
 8000562:	f000 f8f1 	bl	8000748 <__aeabi_fsub>
 8000566:	f000 fa9d 	bl	8000aa4 <__aeabi_f2iz>
 800056a:	2380      	movs	r3, #128	; 0x80
 800056c:	061b      	lsls	r3, r3, #24
 800056e:	469c      	mov	ip, r3
 8000570:	4460      	add	r0, ip
 8000572:	e7f2      	b.n	800055a <__aeabi_f2uiz+0x16>

08000574 <__aeabi_d2uiz>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	2200      	movs	r2, #0
 8000578:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <__aeabi_d2uiz+0x38>)
 800057a:	0004      	movs	r4, r0
 800057c:	000d      	movs	r5, r1
 800057e:	f7ff ff89 	bl	8000494 <__aeabi_dcmpge>
 8000582:	2800      	cmp	r0, #0
 8000584:	d104      	bne.n	8000590 <__aeabi_d2uiz+0x1c>
 8000586:	0020      	movs	r0, r4
 8000588:	0029      	movs	r1, r5
 800058a:	f002 f805 	bl	8002598 <__aeabi_d2iz>
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <__aeabi_d2uiz+0x38>)
 8000592:	2200      	movs	r2, #0
 8000594:	0020      	movs	r0, r4
 8000596:	0029      	movs	r1, r5
 8000598:	f001 fc4e 	bl	8001e38 <__aeabi_dsub>
 800059c:	f001 fffc 	bl	8002598 <__aeabi_d2iz>
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	061b      	lsls	r3, r3, #24
 80005a4:	469c      	mov	ip, r3
 80005a6:	4460      	add	r0, ip
 80005a8:	e7f1      	b.n	800058e <__aeabi_d2uiz+0x1a>
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	41e00000 	.word	0x41e00000

080005b0 <__udivmoddi4>:
 80005b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b2:	4657      	mov	r7, sl
 80005b4:	464e      	mov	r6, r9
 80005b6:	4645      	mov	r5, r8
 80005b8:	46de      	mov	lr, fp
 80005ba:	b5e0      	push	{r5, r6, r7, lr}
 80005bc:	0004      	movs	r4, r0
 80005be:	000d      	movs	r5, r1
 80005c0:	4692      	mov	sl, r2
 80005c2:	4699      	mov	r9, r3
 80005c4:	b083      	sub	sp, #12
 80005c6:	428b      	cmp	r3, r1
 80005c8:	d830      	bhi.n	800062c <__udivmoddi4+0x7c>
 80005ca:	d02d      	beq.n	8000628 <__udivmoddi4+0x78>
 80005cc:	4649      	mov	r1, r9
 80005ce:	4650      	mov	r0, sl
 80005d0:	f002 f94e 	bl	8002870 <__clzdi2>
 80005d4:	0029      	movs	r1, r5
 80005d6:	0006      	movs	r6, r0
 80005d8:	0020      	movs	r0, r4
 80005da:	f002 f949 	bl	8002870 <__clzdi2>
 80005de:	1a33      	subs	r3, r6, r0
 80005e0:	4698      	mov	r8, r3
 80005e2:	3b20      	subs	r3, #32
 80005e4:	469b      	mov	fp, r3
 80005e6:	d433      	bmi.n	8000650 <__udivmoddi4+0xa0>
 80005e8:	465a      	mov	r2, fp
 80005ea:	4653      	mov	r3, sl
 80005ec:	4093      	lsls	r3, r2
 80005ee:	4642      	mov	r2, r8
 80005f0:	001f      	movs	r7, r3
 80005f2:	4653      	mov	r3, sl
 80005f4:	4093      	lsls	r3, r2
 80005f6:	001e      	movs	r6, r3
 80005f8:	42af      	cmp	r7, r5
 80005fa:	d83a      	bhi.n	8000672 <__udivmoddi4+0xc2>
 80005fc:	42af      	cmp	r7, r5
 80005fe:	d100      	bne.n	8000602 <__udivmoddi4+0x52>
 8000600:	e078      	b.n	80006f4 <__udivmoddi4+0x144>
 8000602:	465b      	mov	r3, fp
 8000604:	1ba4      	subs	r4, r4, r6
 8000606:	41bd      	sbcs	r5, r7
 8000608:	2b00      	cmp	r3, #0
 800060a:	da00      	bge.n	800060e <__udivmoddi4+0x5e>
 800060c:	e075      	b.n	80006fa <__udivmoddi4+0x14a>
 800060e:	2200      	movs	r2, #0
 8000610:	2300      	movs	r3, #0
 8000612:	9200      	str	r2, [sp, #0]
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	2301      	movs	r3, #1
 8000618:	465a      	mov	r2, fp
 800061a:	4093      	lsls	r3, r2
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	2301      	movs	r3, #1
 8000620:	4642      	mov	r2, r8
 8000622:	4093      	lsls	r3, r2
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	e028      	b.n	800067a <__udivmoddi4+0xca>
 8000628:	4282      	cmp	r2, r0
 800062a:	d9cf      	bls.n	80005cc <__udivmoddi4+0x1c>
 800062c:	2200      	movs	r2, #0
 800062e:	2300      	movs	r3, #0
 8000630:	9200      	str	r2, [sp, #0]
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <__udivmoddi4+0x8e>
 800063a:	601c      	str	r4, [r3, #0]
 800063c:	605d      	str	r5, [r3, #4]
 800063e:	9800      	ldr	r0, [sp, #0]
 8000640:	9901      	ldr	r1, [sp, #4]
 8000642:	b003      	add	sp, #12
 8000644:	bcf0      	pop	{r4, r5, r6, r7}
 8000646:	46bb      	mov	fp, r7
 8000648:	46b2      	mov	sl, r6
 800064a:	46a9      	mov	r9, r5
 800064c:	46a0      	mov	r8, r4
 800064e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000650:	4642      	mov	r2, r8
 8000652:	2320      	movs	r3, #32
 8000654:	1a9b      	subs	r3, r3, r2
 8000656:	4652      	mov	r2, sl
 8000658:	40da      	lsrs	r2, r3
 800065a:	4641      	mov	r1, r8
 800065c:	0013      	movs	r3, r2
 800065e:	464a      	mov	r2, r9
 8000660:	408a      	lsls	r2, r1
 8000662:	0017      	movs	r7, r2
 8000664:	4642      	mov	r2, r8
 8000666:	431f      	orrs	r7, r3
 8000668:	4653      	mov	r3, sl
 800066a:	4093      	lsls	r3, r2
 800066c:	001e      	movs	r6, r3
 800066e:	42af      	cmp	r7, r5
 8000670:	d9c4      	bls.n	80005fc <__udivmoddi4+0x4c>
 8000672:	2200      	movs	r2, #0
 8000674:	2300      	movs	r3, #0
 8000676:	9200      	str	r2, [sp, #0]
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	4643      	mov	r3, r8
 800067c:	2b00      	cmp	r3, #0
 800067e:	d0d9      	beq.n	8000634 <__udivmoddi4+0x84>
 8000680:	07fb      	lsls	r3, r7, #31
 8000682:	0872      	lsrs	r2, r6, #1
 8000684:	431a      	orrs	r2, r3
 8000686:	4646      	mov	r6, r8
 8000688:	087b      	lsrs	r3, r7, #1
 800068a:	e00e      	b.n	80006aa <__udivmoddi4+0xfa>
 800068c:	42ab      	cmp	r3, r5
 800068e:	d101      	bne.n	8000694 <__udivmoddi4+0xe4>
 8000690:	42a2      	cmp	r2, r4
 8000692:	d80c      	bhi.n	80006ae <__udivmoddi4+0xfe>
 8000694:	1aa4      	subs	r4, r4, r2
 8000696:	419d      	sbcs	r5, r3
 8000698:	2001      	movs	r0, #1
 800069a:	1924      	adds	r4, r4, r4
 800069c:	416d      	adcs	r5, r5
 800069e:	2100      	movs	r1, #0
 80006a0:	3e01      	subs	r6, #1
 80006a2:	1824      	adds	r4, r4, r0
 80006a4:	414d      	adcs	r5, r1
 80006a6:	2e00      	cmp	r6, #0
 80006a8:	d006      	beq.n	80006b8 <__udivmoddi4+0x108>
 80006aa:	42ab      	cmp	r3, r5
 80006ac:	d9ee      	bls.n	800068c <__udivmoddi4+0xdc>
 80006ae:	3e01      	subs	r6, #1
 80006b0:	1924      	adds	r4, r4, r4
 80006b2:	416d      	adcs	r5, r5
 80006b4:	2e00      	cmp	r6, #0
 80006b6:	d1f8      	bne.n	80006aa <__udivmoddi4+0xfa>
 80006b8:	9800      	ldr	r0, [sp, #0]
 80006ba:	9901      	ldr	r1, [sp, #4]
 80006bc:	465b      	mov	r3, fp
 80006be:	1900      	adds	r0, r0, r4
 80006c0:	4169      	adcs	r1, r5
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	db24      	blt.n	8000710 <__udivmoddi4+0x160>
 80006c6:	002b      	movs	r3, r5
 80006c8:	465a      	mov	r2, fp
 80006ca:	4644      	mov	r4, r8
 80006cc:	40d3      	lsrs	r3, r2
 80006ce:	002a      	movs	r2, r5
 80006d0:	40e2      	lsrs	r2, r4
 80006d2:	001c      	movs	r4, r3
 80006d4:	465b      	mov	r3, fp
 80006d6:	0015      	movs	r5, r2
 80006d8:	2b00      	cmp	r3, #0
 80006da:	db2a      	blt.n	8000732 <__udivmoddi4+0x182>
 80006dc:	0026      	movs	r6, r4
 80006de:	409e      	lsls	r6, r3
 80006e0:	0033      	movs	r3, r6
 80006e2:	0026      	movs	r6, r4
 80006e4:	4647      	mov	r7, r8
 80006e6:	40be      	lsls	r6, r7
 80006e8:	0032      	movs	r2, r6
 80006ea:	1a80      	subs	r0, r0, r2
 80006ec:	4199      	sbcs	r1, r3
 80006ee:	9000      	str	r0, [sp, #0]
 80006f0:	9101      	str	r1, [sp, #4]
 80006f2:	e79f      	b.n	8000634 <__udivmoddi4+0x84>
 80006f4:	42a3      	cmp	r3, r4
 80006f6:	d8bc      	bhi.n	8000672 <__udivmoddi4+0xc2>
 80006f8:	e783      	b.n	8000602 <__udivmoddi4+0x52>
 80006fa:	4642      	mov	r2, r8
 80006fc:	2320      	movs	r3, #32
 80006fe:	2100      	movs	r1, #0
 8000700:	1a9b      	subs	r3, r3, r2
 8000702:	2200      	movs	r2, #0
 8000704:	9100      	str	r1, [sp, #0]
 8000706:	9201      	str	r2, [sp, #4]
 8000708:	2201      	movs	r2, #1
 800070a:	40da      	lsrs	r2, r3
 800070c:	9201      	str	r2, [sp, #4]
 800070e:	e786      	b.n	800061e <__udivmoddi4+0x6e>
 8000710:	4642      	mov	r2, r8
 8000712:	2320      	movs	r3, #32
 8000714:	1a9b      	subs	r3, r3, r2
 8000716:	002a      	movs	r2, r5
 8000718:	4646      	mov	r6, r8
 800071a:	409a      	lsls	r2, r3
 800071c:	0023      	movs	r3, r4
 800071e:	40f3      	lsrs	r3, r6
 8000720:	4644      	mov	r4, r8
 8000722:	4313      	orrs	r3, r2
 8000724:	002a      	movs	r2, r5
 8000726:	40e2      	lsrs	r2, r4
 8000728:	001c      	movs	r4, r3
 800072a:	465b      	mov	r3, fp
 800072c:	0015      	movs	r5, r2
 800072e:	2b00      	cmp	r3, #0
 8000730:	dad4      	bge.n	80006dc <__udivmoddi4+0x12c>
 8000732:	4642      	mov	r2, r8
 8000734:	002f      	movs	r7, r5
 8000736:	2320      	movs	r3, #32
 8000738:	0026      	movs	r6, r4
 800073a:	4097      	lsls	r7, r2
 800073c:	1a9b      	subs	r3, r3, r2
 800073e:	40de      	lsrs	r6, r3
 8000740:	003b      	movs	r3, r7
 8000742:	4333      	orrs	r3, r6
 8000744:	e7cd      	b.n	80006e2 <__udivmoddi4+0x132>
 8000746:	46c0      	nop			; (mov r8, r8)

08000748 <__aeabi_fsub>:
 8000748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800074a:	46ce      	mov	lr, r9
 800074c:	4647      	mov	r7, r8
 800074e:	0243      	lsls	r3, r0, #9
 8000750:	0a5b      	lsrs	r3, r3, #9
 8000752:	024e      	lsls	r6, r1, #9
 8000754:	00da      	lsls	r2, r3, #3
 8000756:	4694      	mov	ip, r2
 8000758:	0a72      	lsrs	r2, r6, #9
 800075a:	4691      	mov	r9, r2
 800075c:	0045      	lsls	r5, r0, #1
 800075e:	004a      	lsls	r2, r1, #1
 8000760:	b580      	push	{r7, lr}
 8000762:	0e2d      	lsrs	r5, r5, #24
 8000764:	001f      	movs	r7, r3
 8000766:	0fc4      	lsrs	r4, r0, #31
 8000768:	0e12      	lsrs	r2, r2, #24
 800076a:	0fc9      	lsrs	r1, r1, #31
 800076c:	09b6      	lsrs	r6, r6, #6
 800076e:	2aff      	cmp	r2, #255	; 0xff
 8000770:	d05b      	beq.n	800082a <__aeabi_fsub+0xe2>
 8000772:	2001      	movs	r0, #1
 8000774:	4041      	eors	r1, r0
 8000776:	428c      	cmp	r4, r1
 8000778:	d039      	beq.n	80007ee <__aeabi_fsub+0xa6>
 800077a:	1aa8      	subs	r0, r5, r2
 800077c:	2800      	cmp	r0, #0
 800077e:	dd5a      	ble.n	8000836 <__aeabi_fsub+0xee>
 8000780:	2a00      	cmp	r2, #0
 8000782:	d06a      	beq.n	800085a <__aeabi_fsub+0x112>
 8000784:	2dff      	cmp	r5, #255	; 0xff
 8000786:	d100      	bne.n	800078a <__aeabi_fsub+0x42>
 8000788:	e0d9      	b.n	800093e <__aeabi_fsub+0x1f6>
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	04d2      	lsls	r2, r2, #19
 800078e:	4316      	orrs	r6, r2
 8000790:	281b      	cmp	r0, #27
 8000792:	dc00      	bgt.n	8000796 <__aeabi_fsub+0x4e>
 8000794:	e0e9      	b.n	800096a <__aeabi_fsub+0x222>
 8000796:	2001      	movs	r0, #1
 8000798:	4663      	mov	r3, ip
 800079a:	1a18      	subs	r0, r3, r0
 800079c:	0143      	lsls	r3, r0, #5
 800079e:	d400      	bmi.n	80007a2 <__aeabi_fsub+0x5a>
 80007a0:	e0b4      	b.n	800090c <__aeabi_fsub+0x1c4>
 80007a2:	0180      	lsls	r0, r0, #6
 80007a4:	0987      	lsrs	r7, r0, #6
 80007a6:	0038      	movs	r0, r7
 80007a8:	f002 f844 	bl	8002834 <__clzsi2>
 80007ac:	3805      	subs	r0, #5
 80007ae:	4087      	lsls	r7, r0
 80007b0:	4285      	cmp	r5, r0
 80007b2:	dc00      	bgt.n	80007b6 <__aeabi_fsub+0x6e>
 80007b4:	e0cc      	b.n	8000950 <__aeabi_fsub+0x208>
 80007b6:	1a2d      	subs	r5, r5, r0
 80007b8:	48b5      	ldr	r0, [pc, #724]	; (8000a90 <__aeabi_fsub+0x348>)
 80007ba:	4038      	ands	r0, r7
 80007bc:	0743      	lsls	r3, r0, #29
 80007be:	d004      	beq.n	80007ca <__aeabi_fsub+0x82>
 80007c0:	230f      	movs	r3, #15
 80007c2:	4003      	ands	r3, r0
 80007c4:	2b04      	cmp	r3, #4
 80007c6:	d000      	beq.n	80007ca <__aeabi_fsub+0x82>
 80007c8:	3004      	adds	r0, #4
 80007ca:	0143      	lsls	r3, r0, #5
 80007cc:	d400      	bmi.n	80007d0 <__aeabi_fsub+0x88>
 80007ce:	e0a0      	b.n	8000912 <__aeabi_fsub+0x1ca>
 80007d0:	1c6a      	adds	r2, r5, #1
 80007d2:	2dfe      	cmp	r5, #254	; 0xfe
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fsub+0x90>
 80007d6:	e08d      	b.n	80008f4 <__aeabi_fsub+0x1ac>
 80007d8:	0180      	lsls	r0, r0, #6
 80007da:	0a47      	lsrs	r7, r0, #9
 80007dc:	b2d2      	uxtb	r2, r2
 80007de:	05d0      	lsls	r0, r2, #23
 80007e0:	4338      	orrs	r0, r7
 80007e2:	07e4      	lsls	r4, r4, #31
 80007e4:	4320      	orrs	r0, r4
 80007e6:	bcc0      	pop	{r6, r7}
 80007e8:	46b9      	mov	r9, r7
 80007ea:	46b0      	mov	r8, r6
 80007ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007ee:	1aa8      	subs	r0, r5, r2
 80007f0:	4680      	mov	r8, r0
 80007f2:	2800      	cmp	r0, #0
 80007f4:	dd45      	ble.n	8000882 <__aeabi_fsub+0x13a>
 80007f6:	2a00      	cmp	r2, #0
 80007f8:	d070      	beq.n	80008dc <__aeabi_fsub+0x194>
 80007fa:	2dff      	cmp	r5, #255	; 0xff
 80007fc:	d100      	bne.n	8000800 <__aeabi_fsub+0xb8>
 80007fe:	e09e      	b.n	800093e <__aeabi_fsub+0x1f6>
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	04db      	lsls	r3, r3, #19
 8000804:	431e      	orrs	r6, r3
 8000806:	4643      	mov	r3, r8
 8000808:	2b1b      	cmp	r3, #27
 800080a:	dc00      	bgt.n	800080e <__aeabi_fsub+0xc6>
 800080c:	e0d2      	b.n	80009b4 <__aeabi_fsub+0x26c>
 800080e:	2001      	movs	r0, #1
 8000810:	4460      	add	r0, ip
 8000812:	0143      	lsls	r3, r0, #5
 8000814:	d57a      	bpl.n	800090c <__aeabi_fsub+0x1c4>
 8000816:	3501      	adds	r5, #1
 8000818:	2dff      	cmp	r5, #255	; 0xff
 800081a:	d06b      	beq.n	80008f4 <__aeabi_fsub+0x1ac>
 800081c:	2301      	movs	r3, #1
 800081e:	4a9d      	ldr	r2, [pc, #628]	; (8000a94 <__aeabi_fsub+0x34c>)
 8000820:	4003      	ands	r3, r0
 8000822:	0840      	lsrs	r0, r0, #1
 8000824:	4010      	ands	r0, r2
 8000826:	4318      	orrs	r0, r3
 8000828:	e7c8      	b.n	80007bc <__aeabi_fsub+0x74>
 800082a:	2e00      	cmp	r6, #0
 800082c:	d020      	beq.n	8000870 <__aeabi_fsub+0x128>
 800082e:	428c      	cmp	r4, r1
 8000830:	d023      	beq.n	800087a <__aeabi_fsub+0x132>
 8000832:	0028      	movs	r0, r5
 8000834:	38ff      	subs	r0, #255	; 0xff
 8000836:	2800      	cmp	r0, #0
 8000838:	d039      	beq.n	80008ae <__aeabi_fsub+0x166>
 800083a:	1b57      	subs	r7, r2, r5
 800083c:	2d00      	cmp	r5, #0
 800083e:	d000      	beq.n	8000842 <__aeabi_fsub+0xfa>
 8000840:	e09d      	b.n	800097e <__aeabi_fsub+0x236>
 8000842:	4663      	mov	r3, ip
 8000844:	2b00      	cmp	r3, #0
 8000846:	d100      	bne.n	800084a <__aeabi_fsub+0x102>
 8000848:	e0db      	b.n	8000a02 <__aeabi_fsub+0x2ba>
 800084a:	1e7b      	subs	r3, r7, #1
 800084c:	2f01      	cmp	r7, #1
 800084e:	d100      	bne.n	8000852 <__aeabi_fsub+0x10a>
 8000850:	e10d      	b.n	8000a6e <__aeabi_fsub+0x326>
 8000852:	2fff      	cmp	r7, #255	; 0xff
 8000854:	d071      	beq.n	800093a <__aeabi_fsub+0x1f2>
 8000856:	001f      	movs	r7, r3
 8000858:	e098      	b.n	800098c <__aeabi_fsub+0x244>
 800085a:	2e00      	cmp	r6, #0
 800085c:	d100      	bne.n	8000860 <__aeabi_fsub+0x118>
 800085e:	e0a7      	b.n	80009b0 <__aeabi_fsub+0x268>
 8000860:	1e42      	subs	r2, r0, #1
 8000862:	2801      	cmp	r0, #1
 8000864:	d100      	bne.n	8000868 <__aeabi_fsub+0x120>
 8000866:	e0e6      	b.n	8000a36 <__aeabi_fsub+0x2ee>
 8000868:	28ff      	cmp	r0, #255	; 0xff
 800086a:	d068      	beq.n	800093e <__aeabi_fsub+0x1f6>
 800086c:	0010      	movs	r0, r2
 800086e:	e78f      	b.n	8000790 <__aeabi_fsub+0x48>
 8000870:	2001      	movs	r0, #1
 8000872:	4041      	eors	r1, r0
 8000874:	42a1      	cmp	r1, r4
 8000876:	d000      	beq.n	800087a <__aeabi_fsub+0x132>
 8000878:	e77f      	b.n	800077a <__aeabi_fsub+0x32>
 800087a:	20ff      	movs	r0, #255	; 0xff
 800087c:	4240      	negs	r0, r0
 800087e:	4680      	mov	r8, r0
 8000880:	44a8      	add	r8, r5
 8000882:	4640      	mov	r0, r8
 8000884:	2800      	cmp	r0, #0
 8000886:	d038      	beq.n	80008fa <__aeabi_fsub+0x1b2>
 8000888:	1b51      	subs	r1, r2, r5
 800088a:	2d00      	cmp	r5, #0
 800088c:	d100      	bne.n	8000890 <__aeabi_fsub+0x148>
 800088e:	e0ae      	b.n	80009ee <__aeabi_fsub+0x2a6>
 8000890:	2aff      	cmp	r2, #255	; 0xff
 8000892:	d100      	bne.n	8000896 <__aeabi_fsub+0x14e>
 8000894:	e0df      	b.n	8000a56 <__aeabi_fsub+0x30e>
 8000896:	2380      	movs	r3, #128	; 0x80
 8000898:	4660      	mov	r0, ip
 800089a:	04db      	lsls	r3, r3, #19
 800089c:	4318      	orrs	r0, r3
 800089e:	4684      	mov	ip, r0
 80008a0:	291b      	cmp	r1, #27
 80008a2:	dc00      	bgt.n	80008a6 <__aeabi_fsub+0x15e>
 80008a4:	e0d9      	b.n	8000a5a <__aeabi_fsub+0x312>
 80008a6:	2001      	movs	r0, #1
 80008a8:	0015      	movs	r5, r2
 80008aa:	1980      	adds	r0, r0, r6
 80008ac:	e7b1      	b.n	8000812 <__aeabi_fsub+0xca>
 80008ae:	20fe      	movs	r0, #254	; 0xfe
 80008b0:	1c6a      	adds	r2, r5, #1
 80008b2:	4210      	tst	r0, r2
 80008b4:	d171      	bne.n	800099a <__aeabi_fsub+0x252>
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d000      	beq.n	80008bc <__aeabi_fsub+0x174>
 80008ba:	e0a6      	b.n	8000a0a <__aeabi_fsub+0x2c2>
 80008bc:	4663      	mov	r3, ip
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d100      	bne.n	80008c4 <__aeabi_fsub+0x17c>
 80008c2:	e0d9      	b.n	8000a78 <__aeabi_fsub+0x330>
 80008c4:	2200      	movs	r2, #0
 80008c6:	2e00      	cmp	r6, #0
 80008c8:	d100      	bne.n	80008cc <__aeabi_fsub+0x184>
 80008ca:	e788      	b.n	80007de <__aeabi_fsub+0x96>
 80008cc:	1b98      	subs	r0, r3, r6
 80008ce:	0143      	lsls	r3, r0, #5
 80008d0:	d400      	bmi.n	80008d4 <__aeabi_fsub+0x18c>
 80008d2:	e0e1      	b.n	8000a98 <__aeabi_fsub+0x350>
 80008d4:	4663      	mov	r3, ip
 80008d6:	000c      	movs	r4, r1
 80008d8:	1af0      	subs	r0, r6, r3
 80008da:	e76f      	b.n	80007bc <__aeabi_fsub+0x74>
 80008dc:	2e00      	cmp	r6, #0
 80008de:	d100      	bne.n	80008e2 <__aeabi_fsub+0x19a>
 80008e0:	e0b7      	b.n	8000a52 <__aeabi_fsub+0x30a>
 80008e2:	0002      	movs	r2, r0
 80008e4:	3a01      	subs	r2, #1
 80008e6:	2801      	cmp	r0, #1
 80008e8:	d100      	bne.n	80008ec <__aeabi_fsub+0x1a4>
 80008ea:	e09c      	b.n	8000a26 <__aeabi_fsub+0x2de>
 80008ec:	28ff      	cmp	r0, #255	; 0xff
 80008ee:	d026      	beq.n	800093e <__aeabi_fsub+0x1f6>
 80008f0:	4690      	mov	r8, r2
 80008f2:	e788      	b.n	8000806 <__aeabi_fsub+0xbe>
 80008f4:	22ff      	movs	r2, #255	; 0xff
 80008f6:	2700      	movs	r7, #0
 80008f8:	e771      	b.n	80007de <__aeabi_fsub+0x96>
 80008fa:	20fe      	movs	r0, #254	; 0xfe
 80008fc:	1c6a      	adds	r2, r5, #1
 80008fe:	4210      	tst	r0, r2
 8000900:	d064      	beq.n	80009cc <__aeabi_fsub+0x284>
 8000902:	2aff      	cmp	r2, #255	; 0xff
 8000904:	d0f6      	beq.n	80008f4 <__aeabi_fsub+0x1ac>
 8000906:	0015      	movs	r5, r2
 8000908:	4466      	add	r6, ip
 800090a:	0870      	lsrs	r0, r6, #1
 800090c:	0743      	lsls	r3, r0, #29
 800090e:	d000      	beq.n	8000912 <__aeabi_fsub+0x1ca>
 8000910:	e756      	b.n	80007c0 <__aeabi_fsub+0x78>
 8000912:	08c3      	lsrs	r3, r0, #3
 8000914:	2dff      	cmp	r5, #255	; 0xff
 8000916:	d012      	beq.n	800093e <__aeabi_fsub+0x1f6>
 8000918:	025b      	lsls	r3, r3, #9
 800091a:	0a5f      	lsrs	r7, r3, #9
 800091c:	b2ea      	uxtb	r2, r5
 800091e:	e75e      	b.n	80007de <__aeabi_fsub+0x96>
 8000920:	4662      	mov	r2, ip
 8000922:	2a00      	cmp	r2, #0
 8000924:	d100      	bne.n	8000928 <__aeabi_fsub+0x1e0>
 8000926:	e096      	b.n	8000a56 <__aeabi_fsub+0x30e>
 8000928:	2e00      	cmp	r6, #0
 800092a:	d008      	beq.n	800093e <__aeabi_fsub+0x1f6>
 800092c:	2280      	movs	r2, #128	; 0x80
 800092e:	03d2      	lsls	r2, r2, #15
 8000930:	4213      	tst	r3, r2
 8000932:	d004      	beq.n	800093e <__aeabi_fsub+0x1f6>
 8000934:	4648      	mov	r0, r9
 8000936:	4210      	tst	r0, r2
 8000938:	d101      	bne.n	800093e <__aeabi_fsub+0x1f6>
 800093a:	000c      	movs	r4, r1
 800093c:	464b      	mov	r3, r9
 800093e:	2b00      	cmp	r3, #0
 8000940:	d0d8      	beq.n	80008f4 <__aeabi_fsub+0x1ac>
 8000942:	2780      	movs	r7, #128	; 0x80
 8000944:	03ff      	lsls	r7, r7, #15
 8000946:	431f      	orrs	r7, r3
 8000948:	027f      	lsls	r7, r7, #9
 800094a:	22ff      	movs	r2, #255	; 0xff
 800094c:	0a7f      	lsrs	r7, r7, #9
 800094e:	e746      	b.n	80007de <__aeabi_fsub+0x96>
 8000950:	2320      	movs	r3, #32
 8000952:	003a      	movs	r2, r7
 8000954:	1b45      	subs	r5, r0, r5
 8000956:	0038      	movs	r0, r7
 8000958:	3501      	adds	r5, #1
 800095a:	40ea      	lsrs	r2, r5
 800095c:	1b5d      	subs	r5, r3, r5
 800095e:	40a8      	lsls	r0, r5
 8000960:	1e43      	subs	r3, r0, #1
 8000962:	4198      	sbcs	r0, r3
 8000964:	2500      	movs	r5, #0
 8000966:	4310      	orrs	r0, r2
 8000968:	e728      	b.n	80007bc <__aeabi_fsub+0x74>
 800096a:	2320      	movs	r3, #32
 800096c:	1a1b      	subs	r3, r3, r0
 800096e:	0032      	movs	r2, r6
 8000970:	409e      	lsls	r6, r3
 8000972:	40c2      	lsrs	r2, r0
 8000974:	0030      	movs	r0, r6
 8000976:	1e43      	subs	r3, r0, #1
 8000978:	4198      	sbcs	r0, r3
 800097a:	4310      	orrs	r0, r2
 800097c:	e70c      	b.n	8000798 <__aeabi_fsub+0x50>
 800097e:	2aff      	cmp	r2, #255	; 0xff
 8000980:	d0db      	beq.n	800093a <__aeabi_fsub+0x1f2>
 8000982:	2380      	movs	r3, #128	; 0x80
 8000984:	4660      	mov	r0, ip
 8000986:	04db      	lsls	r3, r3, #19
 8000988:	4318      	orrs	r0, r3
 800098a:	4684      	mov	ip, r0
 800098c:	2f1b      	cmp	r7, #27
 800098e:	dd56      	ble.n	8000a3e <__aeabi_fsub+0x2f6>
 8000990:	2001      	movs	r0, #1
 8000992:	000c      	movs	r4, r1
 8000994:	0015      	movs	r5, r2
 8000996:	1a30      	subs	r0, r6, r0
 8000998:	e700      	b.n	800079c <__aeabi_fsub+0x54>
 800099a:	4663      	mov	r3, ip
 800099c:	1b9f      	subs	r7, r3, r6
 800099e:	017b      	lsls	r3, r7, #5
 80009a0:	d43d      	bmi.n	8000a1e <__aeabi_fsub+0x2d6>
 80009a2:	2f00      	cmp	r7, #0
 80009a4:	d000      	beq.n	80009a8 <__aeabi_fsub+0x260>
 80009a6:	e6fe      	b.n	80007a6 <__aeabi_fsub+0x5e>
 80009a8:	2400      	movs	r4, #0
 80009aa:	2200      	movs	r2, #0
 80009ac:	2700      	movs	r7, #0
 80009ae:	e716      	b.n	80007de <__aeabi_fsub+0x96>
 80009b0:	0005      	movs	r5, r0
 80009b2:	e7af      	b.n	8000914 <__aeabi_fsub+0x1cc>
 80009b4:	0032      	movs	r2, r6
 80009b6:	4643      	mov	r3, r8
 80009b8:	4641      	mov	r1, r8
 80009ba:	40da      	lsrs	r2, r3
 80009bc:	2320      	movs	r3, #32
 80009be:	1a5b      	subs	r3, r3, r1
 80009c0:	409e      	lsls	r6, r3
 80009c2:	0030      	movs	r0, r6
 80009c4:	1e43      	subs	r3, r0, #1
 80009c6:	4198      	sbcs	r0, r3
 80009c8:	4310      	orrs	r0, r2
 80009ca:	e721      	b.n	8000810 <__aeabi_fsub+0xc8>
 80009cc:	2d00      	cmp	r5, #0
 80009ce:	d1a7      	bne.n	8000920 <__aeabi_fsub+0x1d8>
 80009d0:	4663      	mov	r3, ip
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d059      	beq.n	8000a8a <__aeabi_fsub+0x342>
 80009d6:	2200      	movs	r2, #0
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d100      	bne.n	80009de <__aeabi_fsub+0x296>
 80009dc:	e6ff      	b.n	80007de <__aeabi_fsub+0x96>
 80009de:	0030      	movs	r0, r6
 80009e0:	4460      	add	r0, ip
 80009e2:	0143      	lsls	r3, r0, #5
 80009e4:	d592      	bpl.n	800090c <__aeabi_fsub+0x1c4>
 80009e6:	4b2a      	ldr	r3, [pc, #168]	; (8000a90 <__aeabi_fsub+0x348>)
 80009e8:	3501      	adds	r5, #1
 80009ea:	4018      	ands	r0, r3
 80009ec:	e78e      	b.n	800090c <__aeabi_fsub+0x1c4>
 80009ee:	4663      	mov	r3, ip
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d047      	beq.n	8000a84 <__aeabi_fsub+0x33c>
 80009f4:	1e4b      	subs	r3, r1, #1
 80009f6:	2901      	cmp	r1, #1
 80009f8:	d015      	beq.n	8000a26 <__aeabi_fsub+0x2de>
 80009fa:	29ff      	cmp	r1, #255	; 0xff
 80009fc:	d02b      	beq.n	8000a56 <__aeabi_fsub+0x30e>
 80009fe:	0019      	movs	r1, r3
 8000a00:	e74e      	b.n	80008a0 <__aeabi_fsub+0x158>
 8000a02:	000c      	movs	r4, r1
 8000a04:	464b      	mov	r3, r9
 8000a06:	003d      	movs	r5, r7
 8000a08:	e784      	b.n	8000914 <__aeabi_fsub+0x1cc>
 8000a0a:	4662      	mov	r2, ip
 8000a0c:	2a00      	cmp	r2, #0
 8000a0e:	d18b      	bne.n	8000928 <__aeabi_fsub+0x1e0>
 8000a10:	2e00      	cmp	r6, #0
 8000a12:	d192      	bne.n	800093a <__aeabi_fsub+0x1f2>
 8000a14:	2780      	movs	r7, #128	; 0x80
 8000a16:	2400      	movs	r4, #0
 8000a18:	22ff      	movs	r2, #255	; 0xff
 8000a1a:	03ff      	lsls	r7, r7, #15
 8000a1c:	e6df      	b.n	80007de <__aeabi_fsub+0x96>
 8000a1e:	4663      	mov	r3, ip
 8000a20:	000c      	movs	r4, r1
 8000a22:	1af7      	subs	r7, r6, r3
 8000a24:	e6bf      	b.n	80007a6 <__aeabi_fsub+0x5e>
 8000a26:	0030      	movs	r0, r6
 8000a28:	4460      	add	r0, ip
 8000a2a:	2501      	movs	r5, #1
 8000a2c:	0143      	lsls	r3, r0, #5
 8000a2e:	d400      	bmi.n	8000a32 <__aeabi_fsub+0x2ea>
 8000a30:	e76c      	b.n	800090c <__aeabi_fsub+0x1c4>
 8000a32:	2502      	movs	r5, #2
 8000a34:	e6f2      	b.n	800081c <__aeabi_fsub+0xd4>
 8000a36:	4663      	mov	r3, ip
 8000a38:	2501      	movs	r5, #1
 8000a3a:	1b98      	subs	r0, r3, r6
 8000a3c:	e6ae      	b.n	800079c <__aeabi_fsub+0x54>
 8000a3e:	2320      	movs	r3, #32
 8000a40:	4664      	mov	r4, ip
 8000a42:	4660      	mov	r0, ip
 8000a44:	40fc      	lsrs	r4, r7
 8000a46:	1bdf      	subs	r7, r3, r7
 8000a48:	40b8      	lsls	r0, r7
 8000a4a:	1e43      	subs	r3, r0, #1
 8000a4c:	4198      	sbcs	r0, r3
 8000a4e:	4320      	orrs	r0, r4
 8000a50:	e79f      	b.n	8000992 <__aeabi_fsub+0x24a>
 8000a52:	0005      	movs	r5, r0
 8000a54:	e75e      	b.n	8000914 <__aeabi_fsub+0x1cc>
 8000a56:	464b      	mov	r3, r9
 8000a58:	e771      	b.n	800093e <__aeabi_fsub+0x1f6>
 8000a5a:	2320      	movs	r3, #32
 8000a5c:	4665      	mov	r5, ip
 8000a5e:	4660      	mov	r0, ip
 8000a60:	40cd      	lsrs	r5, r1
 8000a62:	1a59      	subs	r1, r3, r1
 8000a64:	4088      	lsls	r0, r1
 8000a66:	1e43      	subs	r3, r0, #1
 8000a68:	4198      	sbcs	r0, r3
 8000a6a:	4328      	orrs	r0, r5
 8000a6c:	e71c      	b.n	80008a8 <__aeabi_fsub+0x160>
 8000a6e:	4663      	mov	r3, ip
 8000a70:	000c      	movs	r4, r1
 8000a72:	2501      	movs	r5, #1
 8000a74:	1af0      	subs	r0, r6, r3
 8000a76:	e691      	b.n	800079c <__aeabi_fsub+0x54>
 8000a78:	2e00      	cmp	r6, #0
 8000a7a:	d095      	beq.n	80009a8 <__aeabi_fsub+0x260>
 8000a7c:	000c      	movs	r4, r1
 8000a7e:	464f      	mov	r7, r9
 8000a80:	2200      	movs	r2, #0
 8000a82:	e6ac      	b.n	80007de <__aeabi_fsub+0x96>
 8000a84:	464b      	mov	r3, r9
 8000a86:	000d      	movs	r5, r1
 8000a88:	e744      	b.n	8000914 <__aeabi_fsub+0x1cc>
 8000a8a:	464f      	mov	r7, r9
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	e6a6      	b.n	80007de <__aeabi_fsub+0x96>
 8000a90:	fbffffff 	.word	0xfbffffff
 8000a94:	7dffffff 	.word	0x7dffffff
 8000a98:	2800      	cmp	r0, #0
 8000a9a:	d000      	beq.n	8000a9e <__aeabi_fsub+0x356>
 8000a9c:	e736      	b.n	800090c <__aeabi_fsub+0x1c4>
 8000a9e:	2400      	movs	r4, #0
 8000aa0:	2700      	movs	r7, #0
 8000aa2:	e69c      	b.n	80007de <__aeabi_fsub+0x96>

08000aa4 <__aeabi_f2iz>:
 8000aa4:	0241      	lsls	r1, r0, #9
 8000aa6:	0042      	lsls	r2, r0, #1
 8000aa8:	0fc3      	lsrs	r3, r0, #31
 8000aaa:	0a49      	lsrs	r1, r1, #9
 8000aac:	2000      	movs	r0, #0
 8000aae:	0e12      	lsrs	r2, r2, #24
 8000ab0:	2a7e      	cmp	r2, #126	; 0x7e
 8000ab2:	dd03      	ble.n	8000abc <__aeabi_f2iz+0x18>
 8000ab4:	2a9d      	cmp	r2, #157	; 0x9d
 8000ab6:	dd02      	ble.n	8000abe <__aeabi_f2iz+0x1a>
 8000ab8:	4a09      	ldr	r2, [pc, #36]	; (8000ae0 <__aeabi_f2iz+0x3c>)
 8000aba:	1898      	adds	r0, r3, r2
 8000abc:	4770      	bx	lr
 8000abe:	2080      	movs	r0, #128	; 0x80
 8000ac0:	0400      	lsls	r0, r0, #16
 8000ac2:	4301      	orrs	r1, r0
 8000ac4:	2a95      	cmp	r2, #149	; 0x95
 8000ac6:	dc07      	bgt.n	8000ad8 <__aeabi_f2iz+0x34>
 8000ac8:	2096      	movs	r0, #150	; 0x96
 8000aca:	1a82      	subs	r2, r0, r2
 8000acc:	40d1      	lsrs	r1, r2
 8000ace:	4248      	negs	r0, r1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d1f3      	bne.n	8000abc <__aeabi_f2iz+0x18>
 8000ad4:	0008      	movs	r0, r1
 8000ad6:	e7f1      	b.n	8000abc <__aeabi_f2iz+0x18>
 8000ad8:	3a96      	subs	r2, #150	; 0x96
 8000ada:	4091      	lsls	r1, r2
 8000adc:	e7f7      	b.n	8000ace <__aeabi_f2iz+0x2a>
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	7fffffff 	.word	0x7fffffff

08000ae4 <__aeabi_dadd>:
 8000ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ae6:	464f      	mov	r7, r9
 8000ae8:	4646      	mov	r6, r8
 8000aea:	46d6      	mov	lr, sl
 8000aec:	000d      	movs	r5, r1
 8000aee:	0004      	movs	r4, r0
 8000af0:	b5c0      	push	{r6, r7, lr}
 8000af2:	001f      	movs	r7, r3
 8000af4:	0011      	movs	r1, r2
 8000af6:	0328      	lsls	r0, r5, #12
 8000af8:	0f62      	lsrs	r2, r4, #29
 8000afa:	0a40      	lsrs	r0, r0, #9
 8000afc:	4310      	orrs	r0, r2
 8000afe:	007a      	lsls	r2, r7, #1
 8000b00:	0d52      	lsrs	r2, r2, #21
 8000b02:	00e3      	lsls	r3, r4, #3
 8000b04:	033c      	lsls	r4, r7, #12
 8000b06:	4691      	mov	r9, r2
 8000b08:	0a64      	lsrs	r4, r4, #9
 8000b0a:	0ffa      	lsrs	r2, r7, #31
 8000b0c:	0f4f      	lsrs	r7, r1, #29
 8000b0e:	006e      	lsls	r6, r5, #1
 8000b10:	4327      	orrs	r7, r4
 8000b12:	4692      	mov	sl, r2
 8000b14:	46b8      	mov	r8, r7
 8000b16:	0d76      	lsrs	r6, r6, #21
 8000b18:	0fed      	lsrs	r5, r5, #31
 8000b1a:	00c9      	lsls	r1, r1, #3
 8000b1c:	4295      	cmp	r5, r2
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_dadd+0x3e>
 8000b20:	e099      	b.n	8000c56 <__aeabi_dadd+0x172>
 8000b22:	464c      	mov	r4, r9
 8000b24:	1b34      	subs	r4, r6, r4
 8000b26:	46a4      	mov	ip, r4
 8000b28:	2c00      	cmp	r4, #0
 8000b2a:	dc00      	bgt.n	8000b2e <__aeabi_dadd+0x4a>
 8000b2c:	e07c      	b.n	8000c28 <__aeabi_dadd+0x144>
 8000b2e:	464a      	mov	r2, r9
 8000b30:	2a00      	cmp	r2, #0
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dadd+0x52>
 8000b34:	e0b8      	b.n	8000ca8 <__aeabi_dadd+0x1c4>
 8000b36:	4ac5      	ldr	r2, [pc, #788]	; (8000e4c <__aeabi_dadd+0x368>)
 8000b38:	4296      	cmp	r6, r2
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_dadd+0x5a>
 8000b3c:	e11c      	b.n	8000d78 <__aeabi_dadd+0x294>
 8000b3e:	2280      	movs	r2, #128	; 0x80
 8000b40:	003c      	movs	r4, r7
 8000b42:	0412      	lsls	r2, r2, #16
 8000b44:	4314      	orrs	r4, r2
 8000b46:	46a0      	mov	r8, r4
 8000b48:	4662      	mov	r2, ip
 8000b4a:	2a38      	cmp	r2, #56	; 0x38
 8000b4c:	dd00      	ble.n	8000b50 <__aeabi_dadd+0x6c>
 8000b4e:	e161      	b.n	8000e14 <__aeabi_dadd+0x330>
 8000b50:	2a1f      	cmp	r2, #31
 8000b52:	dd00      	ble.n	8000b56 <__aeabi_dadd+0x72>
 8000b54:	e1cc      	b.n	8000ef0 <__aeabi_dadd+0x40c>
 8000b56:	4664      	mov	r4, ip
 8000b58:	2220      	movs	r2, #32
 8000b5a:	1b12      	subs	r2, r2, r4
 8000b5c:	4644      	mov	r4, r8
 8000b5e:	4094      	lsls	r4, r2
 8000b60:	000f      	movs	r7, r1
 8000b62:	46a1      	mov	r9, r4
 8000b64:	4664      	mov	r4, ip
 8000b66:	4091      	lsls	r1, r2
 8000b68:	40e7      	lsrs	r7, r4
 8000b6a:	464c      	mov	r4, r9
 8000b6c:	1e4a      	subs	r2, r1, #1
 8000b6e:	4191      	sbcs	r1, r2
 8000b70:	433c      	orrs	r4, r7
 8000b72:	4642      	mov	r2, r8
 8000b74:	4321      	orrs	r1, r4
 8000b76:	4664      	mov	r4, ip
 8000b78:	40e2      	lsrs	r2, r4
 8000b7a:	1a80      	subs	r0, r0, r2
 8000b7c:	1a5c      	subs	r4, r3, r1
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	419b      	sbcs	r3, r3
 8000b82:	425f      	negs	r7, r3
 8000b84:	1bc7      	subs	r7, r0, r7
 8000b86:	023b      	lsls	r3, r7, #8
 8000b88:	d400      	bmi.n	8000b8c <__aeabi_dadd+0xa8>
 8000b8a:	e0d0      	b.n	8000d2e <__aeabi_dadd+0x24a>
 8000b8c:	027f      	lsls	r7, r7, #9
 8000b8e:	0a7f      	lsrs	r7, r7, #9
 8000b90:	2f00      	cmp	r7, #0
 8000b92:	d100      	bne.n	8000b96 <__aeabi_dadd+0xb2>
 8000b94:	e0ff      	b.n	8000d96 <__aeabi_dadd+0x2b2>
 8000b96:	0038      	movs	r0, r7
 8000b98:	f001 fe4c 	bl	8002834 <__clzsi2>
 8000b9c:	0001      	movs	r1, r0
 8000b9e:	3908      	subs	r1, #8
 8000ba0:	2320      	movs	r3, #32
 8000ba2:	0022      	movs	r2, r4
 8000ba4:	1a5b      	subs	r3, r3, r1
 8000ba6:	408f      	lsls	r7, r1
 8000ba8:	40da      	lsrs	r2, r3
 8000baa:	408c      	lsls	r4, r1
 8000bac:	4317      	orrs	r7, r2
 8000bae:	42b1      	cmp	r1, r6
 8000bb0:	da00      	bge.n	8000bb4 <__aeabi_dadd+0xd0>
 8000bb2:	e0ff      	b.n	8000db4 <__aeabi_dadd+0x2d0>
 8000bb4:	1b89      	subs	r1, r1, r6
 8000bb6:	1c4b      	adds	r3, r1, #1
 8000bb8:	2b1f      	cmp	r3, #31
 8000bba:	dd00      	ble.n	8000bbe <__aeabi_dadd+0xda>
 8000bbc:	e0a8      	b.n	8000d10 <__aeabi_dadd+0x22c>
 8000bbe:	2220      	movs	r2, #32
 8000bc0:	0039      	movs	r1, r7
 8000bc2:	1ad2      	subs	r2, r2, r3
 8000bc4:	0020      	movs	r0, r4
 8000bc6:	4094      	lsls	r4, r2
 8000bc8:	4091      	lsls	r1, r2
 8000bca:	40d8      	lsrs	r0, r3
 8000bcc:	1e62      	subs	r2, r4, #1
 8000bce:	4194      	sbcs	r4, r2
 8000bd0:	40df      	lsrs	r7, r3
 8000bd2:	2600      	movs	r6, #0
 8000bd4:	4301      	orrs	r1, r0
 8000bd6:	430c      	orrs	r4, r1
 8000bd8:	0763      	lsls	r3, r4, #29
 8000bda:	d009      	beq.n	8000bf0 <__aeabi_dadd+0x10c>
 8000bdc:	230f      	movs	r3, #15
 8000bde:	4023      	ands	r3, r4
 8000be0:	2b04      	cmp	r3, #4
 8000be2:	d005      	beq.n	8000bf0 <__aeabi_dadd+0x10c>
 8000be4:	1d23      	adds	r3, r4, #4
 8000be6:	42a3      	cmp	r3, r4
 8000be8:	41a4      	sbcs	r4, r4
 8000bea:	4264      	negs	r4, r4
 8000bec:	193f      	adds	r7, r7, r4
 8000bee:	001c      	movs	r4, r3
 8000bf0:	023b      	lsls	r3, r7, #8
 8000bf2:	d400      	bmi.n	8000bf6 <__aeabi_dadd+0x112>
 8000bf4:	e09e      	b.n	8000d34 <__aeabi_dadd+0x250>
 8000bf6:	4b95      	ldr	r3, [pc, #596]	; (8000e4c <__aeabi_dadd+0x368>)
 8000bf8:	3601      	adds	r6, #1
 8000bfa:	429e      	cmp	r6, r3
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_dadd+0x11c>
 8000bfe:	e0b7      	b.n	8000d70 <__aeabi_dadd+0x28c>
 8000c00:	4a93      	ldr	r2, [pc, #588]	; (8000e50 <__aeabi_dadd+0x36c>)
 8000c02:	08e4      	lsrs	r4, r4, #3
 8000c04:	4017      	ands	r7, r2
 8000c06:	077b      	lsls	r3, r7, #29
 8000c08:	0571      	lsls	r1, r6, #21
 8000c0a:	027f      	lsls	r7, r7, #9
 8000c0c:	4323      	orrs	r3, r4
 8000c0e:	0b3f      	lsrs	r7, r7, #12
 8000c10:	0d4a      	lsrs	r2, r1, #21
 8000c12:	0512      	lsls	r2, r2, #20
 8000c14:	433a      	orrs	r2, r7
 8000c16:	07ed      	lsls	r5, r5, #31
 8000c18:	432a      	orrs	r2, r5
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	0011      	movs	r1, r2
 8000c1e:	bce0      	pop	{r5, r6, r7}
 8000c20:	46ba      	mov	sl, r7
 8000c22:	46b1      	mov	r9, r6
 8000c24:	46a8      	mov	r8, r5
 8000c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c28:	2c00      	cmp	r4, #0
 8000c2a:	d04b      	beq.n	8000cc4 <__aeabi_dadd+0x1e0>
 8000c2c:	464c      	mov	r4, r9
 8000c2e:	1ba4      	subs	r4, r4, r6
 8000c30:	46a4      	mov	ip, r4
 8000c32:	2e00      	cmp	r6, #0
 8000c34:	d000      	beq.n	8000c38 <__aeabi_dadd+0x154>
 8000c36:	e123      	b.n	8000e80 <__aeabi_dadd+0x39c>
 8000c38:	0004      	movs	r4, r0
 8000c3a:	431c      	orrs	r4, r3
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_dadd+0x15c>
 8000c3e:	e1af      	b.n	8000fa0 <__aeabi_dadd+0x4bc>
 8000c40:	4662      	mov	r2, ip
 8000c42:	1e54      	subs	r4, r2, #1
 8000c44:	2a01      	cmp	r2, #1
 8000c46:	d100      	bne.n	8000c4a <__aeabi_dadd+0x166>
 8000c48:	e215      	b.n	8001076 <__aeabi_dadd+0x592>
 8000c4a:	4d80      	ldr	r5, [pc, #512]	; (8000e4c <__aeabi_dadd+0x368>)
 8000c4c:	45ac      	cmp	ip, r5
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_dadd+0x16e>
 8000c50:	e1c8      	b.n	8000fe4 <__aeabi_dadd+0x500>
 8000c52:	46a4      	mov	ip, r4
 8000c54:	e11b      	b.n	8000e8e <__aeabi_dadd+0x3aa>
 8000c56:	464a      	mov	r2, r9
 8000c58:	1ab2      	subs	r2, r6, r2
 8000c5a:	4694      	mov	ip, r2
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	dc00      	bgt.n	8000c62 <__aeabi_dadd+0x17e>
 8000c60:	e0ac      	b.n	8000dbc <__aeabi_dadd+0x2d8>
 8000c62:	464a      	mov	r2, r9
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	d043      	beq.n	8000cf0 <__aeabi_dadd+0x20c>
 8000c68:	4a78      	ldr	r2, [pc, #480]	; (8000e4c <__aeabi_dadd+0x368>)
 8000c6a:	4296      	cmp	r6, r2
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_dadd+0x18c>
 8000c6e:	e1af      	b.n	8000fd0 <__aeabi_dadd+0x4ec>
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	003c      	movs	r4, r7
 8000c74:	0412      	lsls	r2, r2, #16
 8000c76:	4314      	orrs	r4, r2
 8000c78:	46a0      	mov	r8, r4
 8000c7a:	4662      	mov	r2, ip
 8000c7c:	2a38      	cmp	r2, #56	; 0x38
 8000c7e:	dc67      	bgt.n	8000d50 <__aeabi_dadd+0x26c>
 8000c80:	2a1f      	cmp	r2, #31
 8000c82:	dc00      	bgt.n	8000c86 <__aeabi_dadd+0x1a2>
 8000c84:	e15f      	b.n	8000f46 <__aeabi_dadd+0x462>
 8000c86:	4647      	mov	r7, r8
 8000c88:	3a20      	subs	r2, #32
 8000c8a:	40d7      	lsrs	r7, r2
 8000c8c:	4662      	mov	r2, ip
 8000c8e:	2a20      	cmp	r2, #32
 8000c90:	d005      	beq.n	8000c9e <__aeabi_dadd+0x1ba>
 8000c92:	4664      	mov	r4, ip
 8000c94:	2240      	movs	r2, #64	; 0x40
 8000c96:	1b12      	subs	r2, r2, r4
 8000c98:	4644      	mov	r4, r8
 8000c9a:	4094      	lsls	r4, r2
 8000c9c:	4321      	orrs	r1, r4
 8000c9e:	1e4a      	subs	r2, r1, #1
 8000ca0:	4191      	sbcs	r1, r2
 8000ca2:	000c      	movs	r4, r1
 8000ca4:	433c      	orrs	r4, r7
 8000ca6:	e057      	b.n	8000d58 <__aeabi_dadd+0x274>
 8000ca8:	003a      	movs	r2, r7
 8000caa:	430a      	orrs	r2, r1
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_dadd+0x1cc>
 8000cae:	e105      	b.n	8000ebc <__aeabi_dadd+0x3d8>
 8000cb0:	0022      	movs	r2, r4
 8000cb2:	3a01      	subs	r2, #1
 8000cb4:	2c01      	cmp	r4, #1
 8000cb6:	d100      	bne.n	8000cba <__aeabi_dadd+0x1d6>
 8000cb8:	e182      	b.n	8000fc0 <__aeabi_dadd+0x4dc>
 8000cba:	4c64      	ldr	r4, [pc, #400]	; (8000e4c <__aeabi_dadd+0x368>)
 8000cbc:	45a4      	cmp	ip, r4
 8000cbe:	d05b      	beq.n	8000d78 <__aeabi_dadd+0x294>
 8000cc0:	4694      	mov	ip, r2
 8000cc2:	e741      	b.n	8000b48 <__aeabi_dadd+0x64>
 8000cc4:	4c63      	ldr	r4, [pc, #396]	; (8000e54 <__aeabi_dadd+0x370>)
 8000cc6:	1c77      	adds	r7, r6, #1
 8000cc8:	4227      	tst	r7, r4
 8000cca:	d000      	beq.n	8000cce <__aeabi_dadd+0x1ea>
 8000ccc:	e0c4      	b.n	8000e58 <__aeabi_dadd+0x374>
 8000cce:	0004      	movs	r4, r0
 8000cd0:	431c      	orrs	r4, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d000      	beq.n	8000cd8 <__aeabi_dadd+0x1f4>
 8000cd6:	e169      	b.n	8000fac <__aeabi_dadd+0x4c8>
 8000cd8:	2c00      	cmp	r4, #0
 8000cda:	d100      	bne.n	8000cde <__aeabi_dadd+0x1fa>
 8000cdc:	e1bf      	b.n	800105e <__aeabi_dadd+0x57a>
 8000cde:	4644      	mov	r4, r8
 8000ce0:	430c      	orrs	r4, r1
 8000ce2:	d000      	beq.n	8000ce6 <__aeabi_dadd+0x202>
 8000ce4:	e1d0      	b.n	8001088 <__aeabi_dadd+0x5a4>
 8000ce6:	0742      	lsls	r2, r0, #29
 8000ce8:	08db      	lsrs	r3, r3, #3
 8000cea:	4313      	orrs	r3, r2
 8000cec:	08c0      	lsrs	r0, r0, #3
 8000cee:	e029      	b.n	8000d44 <__aeabi_dadd+0x260>
 8000cf0:	003a      	movs	r2, r7
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_dadd+0x214>
 8000cf6:	e170      	b.n	8000fda <__aeabi_dadd+0x4f6>
 8000cf8:	4662      	mov	r2, ip
 8000cfa:	4664      	mov	r4, ip
 8000cfc:	3a01      	subs	r2, #1
 8000cfe:	2c01      	cmp	r4, #1
 8000d00:	d100      	bne.n	8000d04 <__aeabi_dadd+0x220>
 8000d02:	e0e0      	b.n	8000ec6 <__aeabi_dadd+0x3e2>
 8000d04:	4c51      	ldr	r4, [pc, #324]	; (8000e4c <__aeabi_dadd+0x368>)
 8000d06:	45a4      	cmp	ip, r4
 8000d08:	d100      	bne.n	8000d0c <__aeabi_dadd+0x228>
 8000d0a:	e161      	b.n	8000fd0 <__aeabi_dadd+0x4ec>
 8000d0c:	4694      	mov	ip, r2
 8000d0e:	e7b4      	b.n	8000c7a <__aeabi_dadd+0x196>
 8000d10:	003a      	movs	r2, r7
 8000d12:	391f      	subs	r1, #31
 8000d14:	40ca      	lsrs	r2, r1
 8000d16:	0011      	movs	r1, r2
 8000d18:	2b20      	cmp	r3, #32
 8000d1a:	d003      	beq.n	8000d24 <__aeabi_dadd+0x240>
 8000d1c:	2240      	movs	r2, #64	; 0x40
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	409f      	lsls	r7, r3
 8000d22:	433c      	orrs	r4, r7
 8000d24:	1e63      	subs	r3, r4, #1
 8000d26:	419c      	sbcs	r4, r3
 8000d28:	2700      	movs	r7, #0
 8000d2a:	2600      	movs	r6, #0
 8000d2c:	430c      	orrs	r4, r1
 8000d2e:	0763      	lsls	r3, r4, #29
 8000d30:	d000      	beq.n	8000d34 <__aeabi_dadd+0x250>
 8000d32:	e753      	b.n	8000bdc <__aeabi_dadd+0xf8>
 8000d34:	46b4      	mov	ip, r6
 8000d36:	08e4      	lsrs	r4, r4, #3
 8000d38:	077b      	lsls	r3, r7, #29
 8000d3a:	4323      	orrs	r3, r4
 8000d3c:	08f8      	lsrs	r0, r7, #3
 8000d3e:	4a43      	ldr	r2, [pc, #268]	; (8000e4c <__aeabi_dadd+0x368>)
 8000d40:	4594      	cmp	ip, r2
 8000d42:	d01d      	beq.n	8000d80 <__aeabi_dadd+0x29c>
 8000d44:	4662      	mov	r2, ip
 8000d46:	0307      	lsls	r7, r0, #12
 8000d48:	0552      	lsls	r2, r2, #21
 8000d4a:	0b3f      	lsrs	r7, r7, #12
 8000d4c:	0d52      	lsrs	r2, r2, #21
 8000d4e:	e760      	b.n	8000c12 <__aeabi_dadd+0x12e>
 8000d50:	4644      	mov	r4, r8
 8000d52:	430c      	orrs	r4, r1
 8000d54:	1e62      	subs	r2, r4, #1
 8000d56:	4194      	sbcs	r4, r2
 8000d58:	18e4      	adds	r4, r4, r3
 8000d5a:	429c      	cmp	r4, r3
 8000d5c:	419b      	sbcs	r3, r3
 8000d5e:	425f      	negs	r7, r3
 8000d60:	183f      	adds	r7, r7, r0
 8000d62:	023b      	lsls	r3, r7, #8
 8000d64:	d5e3      	bpl.n	8000d2e <__aeabi_dadd+0x24a>
 8000d66:	4b39      	ldr	r3, [pc, #228]	; (8000e4c <__aeabi_dadd+0x368>)
 8000d68:	3601      	adds	r6, #1
 8000d6a:	429e      	cmp	r6, r3
 8000d6c:	d000      	beq.n	8000d70 <__aeabi_dadd+0x28c>
 8000d6e:	e0b5      	b.n	8000edc <__aeabi_dadd+0x3f8>
 8000d70:	0032      	movs	r2, r6
 8000d72:	2700      	movs	r7, #0
 8000d74:	2300      	movs	r3, #0
 8000d76:	e74c      	b.n	8000c12 <__aeabi_dadd+0x12e>
 8000d78:	0742      	lsls	r2, r0, #29
 8000d7a:	08db      	lsrs	r3, r3, #3
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	08c0      	lsrs	r0, r0, #3
 8000d80:	001a      	movs	r2, r3
 8000d82:	4302      	orrs	r2, r0
 8000d84:	d100      	bne.n	8000d88 <__aeabi_dadd+0x2a4>
 8000d86:	e1e1      	b.n	800114c <__aeabi_dadd+0x668>
 8000d88:	2780      	movs	r7, #128	; 0x80
 8000d8a:	033f      	lsls	r7, r7, #12
 8000d8c:	4307      	orrs	r7, r0
 8000d8e:	033f      	lsls	r7, r7, #12
 8000d90:	4a2e      	ldr	r2, [pc, #184]	; (8000e4c <__aeabi_dadd+0x368>)
 8000d92:	0b3f      	lsrs	r7, r7, #12
 8000d94:	e73d      	b.n	8000c12 <__aeabi_dadd+0x12e>
 8000d96:	0020      	movs	r0, r4
 8000d98:	f001 fd4c 	bl	8002834 <__clzsi2>
 8000d9c:	0001      	movs	r1, r0
 8000d9e:	3118      	adds	r1, #24
 8000da0:	291f      	cmp	r1, #31
 8000da2:	dc00      	bgt.n	8000da6 <__aeabi_dadd+0x2c2>
 8000da4:	e6fc      	b.n	8000ba0 <__aeabi_dadd+0xbc>
 8000da6:	3808      	subs	r0, #8
 8000da8:	4084      	lsls	r4, r0
 8000daa:	0027      	movs	r7, r4
 8000dac:	2400      	movs	r4, #0
 8000dae:	42b1      	cmp	r1, r6
 8000db0:	db00      	blt.n	8000db4 <__aeabi_dadd+0x2d0>
 8000db2:	e6ff      	b.n	8000bb4 <__aeabi_dadd+0xd0>
 8000db4:	4a26      	ldr	r2, [pc, #152]	; (8000e50 <__aeabi_dadd+0x36c>)
 8000db6:	1a76      	subs	r6, r6, r1
 8000db8:	4017      	ands	r7, r2
 8000dba:	e70d      	b.n	8000bd8 <__aeabi_dadd+0xf4>
 8000dbc:	2a00      	cmp	r2, #0
 8000dbe:	d02f      	beq.n	8000e20 <__aeabi_dadd+0x33c>
 8000dc0:	464a      	mov	r2, r9
 8000dc2:	1b92      	subs	r2, r2, r6
 8000dc4:	4694      	mov	ip, r2
 8000dc6:	2e00      	cmp	r6, #0
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_dadd+0x2e8>
 8000dca:	e0ad      	b.n	8000f28 <__aeabi_dadd+0x444>
 8000dcc:	4a1f      	ldr	r2, [pc, #124]	; (8000e4c <__aeabi_dadd+0x368>)
 8000dce:	4591      	cmp	r9, r2
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_dadd+0x2f0>
 8000dd2:	e10f      	b.n	8000ff4 <__aeabi_dadd+0x510>
 8000dd4:	2280      	movs	r2, #128	; 0x80
 8000dd6:	0412      	lsls	r2, r2, #16
 8000dd8:	4310      	orrs	r0, r2
 8000dda:	4662      	mov	r2, ip
 8000ddc:	2a38      	cmp	r2, #56	; 0x38
 8000dde:	dd00      	ble.n	8000de2 <__aeabi_dadd+0x2fe>
 8000de0:	e10f      	b.n	8001002 <__aeabi_dadd+0x51e>
 8000de2:	2a1f      	cmp	r2, #31
 8000de4:	dd00      	ble.n	8000de8 <__aeabi_dadd+0x304>
 8000de6:	e180      	b.n	80010ea <__aeabi_dadd+0x606>
 8000de8:	4664      	mov	r4, ip
 8000dea:	2220      	movs	r2, #32
 8000dec:	001e      	movs	r6, r3
 8000dee:	1b12      	subs	r2, r2, r4
 8000df0:	4667      	mov	r7, ip
 8000df2:	0004      	movs	r4, r0
 8000df4:	4093      	lsls	r3, r2
 8000df6:	4094      	lsls	r4, r2
 8000df8:	40fe      	lsrs	r6, r7
 8000dfa:	1e5a      	subs	r2, r3, #1
 8000dfc:	4193      	sbcs	r3, r2
 8000dfe:	40f8      	lsrs	r0, r7
 8000e00:	4334      	orrs	r4, r6
 8000e02:	431c      	orrs	r4, r3
 8000e04:	4480      	add	r8, r0
 8000e06:	1864      	adds	r4, r4, r1
 8000e08:	428c      	cmp	r4, r1
 8000e0a:	41bf      	sbcs	r7, r7
 8000e0c:	427f      	negs	r7, r7
 8000e0e:	464e      	mov	r6, r9
 8000e10:	4447      	add	r7, r8
 8000e12:	e7a6      	b.n	8000d62 <__aeabi_dadd+0x27e>
 8000e14:	4642      	mov	r2, r8
 8000e16:	430a      	orrs	r2, r1
 8000e18:	0011      	movs	r1, r2
 8000e1a:	1e4a      	subs	r2, r1, #1
 8000e1c:	4191      	sbcs	r1, r2
 8000e1e:	e6ad      	b.n	8000b7c <__aeabi_dadd+0x98>
 8000e20:	4c0c      	ldr	r4, [pc, #48]	; (8000e54 <__aeabi_dadd+0x370>)
 8000e22:	1c72      	adds	r2, r6, #1
 8000e24:	4222      	tst	r2, r4
 8000e26:	d000      	beq.n	8000e2a <__aeabi_dadd+0x346>
 8000e28:	e0a1      	b.n	8000f6e <__aeabi_dadd+0x48a>
 8000e2a:	0002      	movs	r2, r0
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	2e00      	cmp	r6, #0
 8000e30:	d000      	beq.n	8000e34 <__aeabi_dadd+0x350>
 8000e32:	e0fa      	b.n	800102a <__aeabi_dadd+0x546>
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	d100      	bne.n	8000e3a <__aeabi_dadd+0x356>
 8000e38:	e145      	b.n	80010c6 <__aeabi_dadd+0x5e2>
 8000e3a:	003a      	movs	r2, r7
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	d000      	beq.n	8000e42 <__aeabi_dadd+0x35e>
 8000e40:	e146      	b.n	80010d0 <__aeabi_dadd+0x5ec>
 8000e42:	0742      	lsls	r2, r0, #29
 8000e44:	08db      	lsrs	r3, r3, #3
 8000e46:	4313      	orrs	r3, r2
 8000e48:	08c0      	lsrs	r0, r0, #3
 8000e4a:	e77b      	b.n	8000d44 <__aeabi_dadd+0x260>
 8000e4c:	000007ff 	.word	0x000007ff
 8000e50:	ff7fffff 	.word	0xff7fffff
 8000e54:	000007fe 	.word	0x000007fe
 8000e58:	4647      	mov	r7, r8
 8000e5a:	1a5c      	subs	r4, r3, r1
 8000e5c:	1bc2      	subs	r2, r0, r7
 8000e5e:	42a3      	cmp	r3, r4
 8000e60:	41bf      	sbcs	r7, r7
 8000e62:	427f      	negs	r7, r7
 8000e64:	46b9      	mov	r9, r7
 8000e66:	0017      	movs	r7, r2
 8000e68:	464a      	mov	r2, r9
 8000e6a:	1abf      	subs	r7, r7, r2
 8000e6c:	023a      	lsls	r2, r7, #8
 8000e6e:	d500      	bpl.n	8000e72 <__aeabi_dadd+0x38e>
 8000e70:	e08d      	b.n	8000f8e <__aeabi_dadd+0x4aa>
 8000e72:	0023      	movs	r3, r4
 8000e74:	433b      	orrs	r3, r7
 8000e76:	d000      	beq.n	8000e7a <__aeabi_dadd+0x396>
 8000e78:	e68a      	b.n	8000b90 <__aeabi_dadd+0xac>
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	2500      	movs	r5, #0
 8000e7e:	e761      	b.n	8000d44 <__aeabi_dadd+0x260>
 8000e80:	4cb4      	ldr	r4, [pc, #720]	; (8001154 <__aeabi_dadd+0x670>)
 8000e82:	45a1      	cmp	r9, r4
 8000e84:	d100      	bne.n	8000e88 <__aeabi_dadd+0x3a4>
 8000e86:	e0ad      	b.n	8000fe4 <__aeabi_dadd+0x500>
 8000e88:	2480      	movs	r4, #128	; 0x80
 8000e8a:	0424      	lsls	r4, r4, #16
 8000e8c:	4320      	orrs	r0, r4
 8000e8e:	4664      	mov	r4, ip
 8000e90:	2c38      	cmp	r4, #56	; 0x38
 8000e92:	dc3d      	bgt.n	8000f10 <__aeabi_dadd+0x42c>
 8000e94:	4662      	mov	r2, ip
 8000e96:	2c1f      	cmp	r4, #31
 8000e98:	dd00      	ble.n	8000e9c <__aeabi_dadd+0x3b8>
 8000e9a:	e0b7      	b.n	800100c <__aeabi_dadd+0x528>
 8000e9c:	2520      	movs	r5, #32
 8000e9e:	001e      	movs	r6, r3
 8000ea0:	1b2d      	subs	r5, r5, r4
 8000ea2:	0004      	movs	r4, r0
 8000ea4:	40ab      	lsls	r3, r5
 8000ea6:	40ac      	lsls	r4, r5
 8000ea8:	40d6      	lsrs	r6, r2
 8000eaa:	40d0      	lsrs	r0, r2
 8000eac:	4642      	mov	r2, r8
 8000eae:	1e5d      	subs	r5, r3, #1
 8000eb0:	41ab      	sbcs	r3, r5
 8000eb2:	4334      	orrs	r4, r6
 8000eb4:	1a12      	subs	r2, r2, r0
 8000eb6:	4690      	mov	r8, r2
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	e02c      	b.n	8000f16 <__aeabi_dadd+0x432>
 8000ebc:	0742      	lsls	r2, r0, #29
 8000ebe:	08db      	lsrs	r3, r3, #3
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	08c0      	lsrs	r0, r0, #3
 8000ec4:	e73b      	b.n	8000d3e <__aeabi_dadd+0x25a>
 8000ec6:	185c      	adds	r4, r3, r1
 8000ec8:	429c      	cmp	r4, r3
 8000eca:	419b      	sbcs	r3, r3
 8000ecc:	4440      	add	r0, r8
 8000ece:	425b      	negs	r3, r3
 8000ed0:	18c7      	adds	r7, r0, r3
 8000ed2:	2601      	movs	r6, #1
 8000ed4:	023b      	lsls	r3, r7, #8
 8000ed6:	d400      	bmi.n	8000eda <__aeabi_dadd+0x3f6>
 8000ed8:	e729      	b.n	8000d2e <__aeabi_dadd+0x24a>
 8000eda:	2602      	movs	r6, #2
 8000edc:	4a9e      	ldr	r2, [pc, #632]	; (8001158 <__aeabi_dadd+0x674>)
 8000ede:	0863      	lsrs	r3, r4, #1
 8000ee0:	4017      	ands	r7, r2
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4014      	ands	r4, r2
 8000ee6:	431c      	orrs	r4, r3
 8000ee8:	07fb      	lsls	r3, r7, #31
 8000eea:	431c      	orrs	r4, r3
 8000eec:	087f      	lsrs	r7, r7, #1
 8000eee:	e673      	b.n	8000bd8 <__aeabi_dadd+0xf4>
 8000ef0:	4644      	mov	r4, r8
 8000ef2:	3a20      	subs	r2, #32
 8000ef4:	40d4      	lsrs	r4, r2
 8000ef6:	4662      	mov	r2, ip
 8000ef8:	2a20      	cmp	r2, #32
 8000efa:	d005      	beq.n	8000f08 <__aeabi_dadd+0x424>
 8000efc:	4667      	mov	r7, ip
 8000efe:	2240      	movs	r2, #64	; 0x40
 8000f00:	1bd2      	subs	r2, r2, r7
 8000f02:	4647      	mov	r7, r8
 8000f04:	4097      	lsls	r7, r2
 8000f06:	4339      	orrs	r1, r7
 8000f08:	1e4a      	subs	r2, r1, #1
 8000f0a:	4191      	sbcs	r1, r2
 8000f0c:	4321      	orrs	r1, r4
 8000f0e:	e635      	b.n	8000b7c <__aeabi_dadd+0x98>
 8000f10:	4303      	orrs	r3, r0
 8000f12:	1e58      	subs	r0, r3, #1
 8000f14:	4183      	sbcs	r3, r0
 8000f16:	1acc      	subs	r4, r1, r3
 8000f18:	42a1      	cmp	r1, r4
 8000f1a:	41bf      	sbcs	r7, r7
 8000f1c:	4643      	mov	r3, r8
 8000f1e:	427f      	negs	r7, r7
 8000f20:	4655      	mov	r5, sl
 8000f22:	464e      	mov	r6, r9
 8000f24:	1bdf      	subs	r7, r3, r7
 8000f26:	e62e      	b.n	8000b86 <__aeabi_dadd+0xa2>
 8000f28:	0002      	movs	r2, r0
 8000f2a:	431a      	orrs	r2, r3
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_dadd+0x44c>
 8000f2e:	e0bd      	b.n	80010ac <__aeabi_dadd+0x5c8>
 8000f30:	4662      	mov	r2, ip
 8000f32:	4664      	mov	r4, ip
 8000f34:	3a01      	subs	r2, #1
 8000f36:	2c01      	cmp	r4, #1
 8000f38:	d100      	bne.n	8000f3c <__aeabi_dadd+0x458>
 8000f3a:	e0e5      	b.n	8001108 <__aeabi_dadd+0x624>
 8000f3c:	4c85      	ldr	r4, [pc, #532]	; (8001154 <__aeabi_dadd+0x670>)
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d058      	beq.n	8000ff4 <__aeabi_dadd+0x510>
 8000f42:	4694      	mov	ip, r2
 8000f44:	e749      	b.n	8000dda <__aeabi_dadd+0x2f6>
 8000f46:	4664      	mov	r4, ip
 8000f48:	2220      	movs	r2, #32
 8000f4a:	1b12      	subs	r2, r2, r4
 8000f4c:	4644      	mov	r4, r8
 8000f4e:	4094      	lsls	r4, r2
 8000f50:	000f      	movs	r7, r1
 8000f52:	46a1      	mov	r9, r4
 8000f54:	4664      	mov	r4, ip
 8000f56:	4091      	lsls	r1, r2
 8000f58:	40e7      	lsrs	r7, r4
 8000f5a:	464c      	mov	r4, r9
 8000f5c:	1e4a      	subs	r2, r1, #1
 8000f5e:	4191      	sbcs	r1, r2
 8000f60:	433c      	orrs	r4, r7
 8000f62:	4642      	mov	r2, r8
 8000f64:	430c      	orrs	r4, r1
 8000f66:	4661      	mov	r1, ip
 8000f68:	40ca      	lsrs	r2, r1
 8000f6a:	1880      	adds	r0, r0, r2
 8000f6c:	e6f4      	b.n	8000d58 <__aeabi_dadd+0x274>
 8000f6e:	4c79      	ldr	r4, [pc, #484]	; (8001154 <__aeabi_dadd+0x670>)
 8000f70:	42a2      	cmp	r2, r4
 8000f72:	d100      	bne.n	8000f76 <__aeabi_dadd+0x492>
 8000f74:	e6fd      	b.n	8000d72 <__aeabi_dadd+0x28e>
 8000f76:	1859      	adds	r1, r3, r1
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	419b      	sbcs	r3, r3
 8000f7c:	4440      	add	r0, r8
 8000f7e:	425f      	negs	r7, r3
 8000f80:	19c7      	adds	r7, r0, r7
 8000f82:	07fc      	lsls	r4, r7, #31
 8000f84:	0849      	lsrs	r1, r1, #1
 8000f86:	0016      	movs	r6, r2
 8000f88:	430c      	orrs	r4, r1
 8000f8a:	087f      	lsrs	r7, r7, #1
 8000f8c:	e6cf      	b.n	8000d2e <__aeabi_dadd+0x24a>
 8000f8e:	1acc      	subs	r4, r1, r3
 8000f90:	42a1      	cmp	r1, r4
 8000f92:	41bf      	sbcs	r7, r7
 8000f94:	4643      	mov	r3, r8
 8000f96:	427f      	negs	r7, r7
 8000f98:	1a18      	subs	r0, r3, r0
 8000f9a:	4655      	mov	r5, sl
 8000f9c:	1bc7      	subs	r7, r0, r7
 8000f9e:	e5f7      	b.n	8000b90 <__aeabi_dadd+0xac>
 8000fa0:	08c9      	lsrs	r1, r1, #3
 8000fa2:	077b      	lsls	r3, r7, #29
 8000fa4:	4655      	mov	r5, sl
 8000fa6:	430b      	orrs	r3, r1
 8000fa8:	08f8      	lsrs	r0, r7, #3
 8000faa:	e6c8      	b.n	8000d3e <__aeabi_dadd+0x25a>
 8000fac:	2c00      	cmp	r4, #0
 8000fae:	d000      	beq.n	8000fb2 <__aeabi_dadd+0x4ce>
 8000fb0:	e081      	b.n	80010b6 <__aeabi_dadd+0x5d2>
 8000fb2:	4643      	mov	r3, r8
 8000fb4:	430b      	orrs	r3, r1
 8000fb6:	d115      	bne.n	8000fe4 <__aeabi_dadd+0x500>
 8000fb8:	2080      	movs	r0, #128	; 0x80
 8000fba:	2500      	movs	r5, #0
 8000fbc:	0300      	lsls	r0, r0, #12
 8000fbe:	e6e3      	b.n	8000d88 <__aeabi_dadd+0x2a4>
 8000fc0:	1a5c      	subs	r4, r3, r1
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	419b      	sbcs	r3, r3
 8000fc6:	1bc7      	subs	r7, r0, r7
 8000fc8:	425b      	negs	r3, r3
 8000fca:	2601      	movs	r6, #1
 8000fcc:	1aff      	subs	r7, r7, r3
 8000fce:	e5da      	b.n	8000b86 <__aeabi_dadd+0xa2>
 8000fd0:	0742      	lsls	r2, r0, #29
 8000fd2:	08db      	lsrs	r3, r3, #3
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	08c0      	lsrs	r0, r0, #3
 8000fd8:	e6d2      	b.n	8000d80 <__aeabi_dadd+0x29c>
 8000fda:	0742      	lsls	r2, r0, #29
 8000fdc:	08db      	lsrs	r3, r3, #3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	08c0      	lsrs	r0, r0, #3
 8000fe2:	e6ac      	b.n	8000d3e <__aeabi_dadd+0x25a>
 8000fe4:	4643      	mov	r3, r8
 8000fe6:	4642      	mov	r2, r8
 8000fe8:	08c9      	lsrs	r1, r1, #3
 8000fea:	075b      	lsls	r3, r3, #29
 8000fec:	4655      	mov	r5, sl
 8000fee:	430b      	orrs	r3, r1
 8000ff0:	08d0      	lsrs	r0, r2, #3
 8000ff2:	e6c5      	b.n	8000d80 <__aeabi_dadd+0x29c>
 8000ff4:	4643      	mov	r3, r8
 8000ff6:	4642      	mov	r2, r8
 8000ff8:	075b      	lsls	r3, r3, #29
 8000ffa:	08c9      	lsrs	r1, r1, #3
 8000ffc:	430b      	orrs	r3, r1
 8000ffe:	08d0      	lsrs	r0, r2, #3
 8001000:	e6be      	b.n	8000d80 <__aeabi_dadd+0x29c>
 8001002:	4303      	orrs	r3, r0
 8001004:	001c      	movs	r4, r3
 8001006:	1e63      	subs	r3, r4, #1
 8001008:	419c      	sbcs	r4, r3
 800100a:	e6fc      	b.n	8000e06 <__aeabi_dadd+0x322>
 800100c:	0002      	movs	r2, r0
 800100e:	3c20      	subs	r4, #32
 8001010:	40e2      	lsrs	r2, r4
 8001012:	0014      	movs	r4, r2
 8001014:	4662      	mov	r2, ip
 8001016:	2a20      	cmp	r2, #32
 8001018:	d003      	beq.n	8001022 <__aeabi_dadd+0x53e>
 800101a:	2540      	movs	r5, #64	; 0x40
 800101c:	1aad      	subs	r5, r5, r2
 800101e:	40a8      	lsls	r0, r5
 8001020:	4303      	orrs	r3, r0
 8001022:	1e58      	subs	r0, r3, #1
 8001024:	4183      	sbcs	r3, r0
 8001026:	4323      	orrs	r3, r4
 8001028:	e775      	b.n	8000f16 <__aeabi_dadd+0x432>
 800102a:	2a00      	cmp	r2, #0
 800102c:	d0e2      	beq.n	8000ff4 <__aeabi_dadd+0x510>
 800102e:	003a      	movs	r2, r7
 8001030:	430a      	orrs	r2, r1
 8001032:	d0cd      	beq.n	8000fd0 <__aeabi_dadd+0x4ec>
 8001034:	0742      	lsls	r2, r0, #29
 8001036:	08db      	lsrs	r3, r3, #3
 8001038:	4313      	orrs	r3, r2
 800103a:	2280      	movs	r2, #128	; 0x80
 800103c:	08c0      	lsrs	r0, r0, #3
 800103e:	0312      	lsls	r2, r2, #12
 8001040:	4210      	tst	r0, r2
 8001042:	d006      	beq.n	8001052 <__aeabi_dadd+0x56e>
 8001044:	08fc      	lsrs	r4, r7, #3
 8001046:	4214      	tst	r4, r2
 8001048:	d103      	bne.n	8001052 <__aeabi_dadd+0x56e>
 800104a:	0020      	movs	r0, r4
 800104c:	08cb      	lsrs	r3, r1, #3
 800104e:	077a      	lsls	r2, r7, #29
 8001050:	4313      	orrs	r3, r2
 8001052:	0f5a      	lsrs	r2, r3, #29
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	0752      	lsls	r2, r2, #29
 8001058:	08db      	lsrs	r3, r3, #3
 800105a:	4313      	orrs	r3, r2
 800105c:	e690      	b.n	8000d80 <__aeabi_dadd+0x29c>
 800105e:	4643      	mov	r3, r8
 8001060:	430b      	orrs	r3, r1
 8001062:	d100      	bne.n	8001066 <__aeabi_dadd+0x582>
 8001064:	e709      	b.n	8000e7a <__aeabi_dadd+0x396>
 8001066:	4643      	mov	r3, r8
 8001068:	4642      	mov	r2, r8
 800106a:	08c9      	lsrs	r1, r1, #3
 800106c:	075b      	lsls	r3, r3, #29
 800106e:	4655      	mov	r5, sl
 8001070:	430b      	orrs	r3, r1
 8001072:	08d0      	lsrs	r0, r2, #3
 8001074:	e666      	b.n	8000d44 <__aeabi_dadd+0x260>
 8001076:	1acc      	subs	r4, r1, r3
 8001078:	42a1      	cmp	r1, r4
 800107a:	4189      	sbcs	r1, r1
 800107c:	1a3f      	subs	r7, r7, r0
 800107e:	4249      	negs	r1, r1
 8001080:	4655      	mov	r5, sl
 8001082:	2601      	movs	r6, #1
 8001084:	1a7f      	subs	r7, r7, r1
 8001086:	e57e      	b.n	8000b86 <__aeabi_dadd+0xa2>
 8001088:	4642      	mov	r2, r8
 800108a:	1a5c      	subs	r4, r3, r1
 800108c:	1a87      	subs	r7, r0, r2
 800108e:	42a3      	cmp	r3, r4
 8001090:	4192      	sbcs	r2, r2
 8001092:	4252      	negs	r2, r2
 8001094:	1abf      	subs	r7, r7, r2
 8001096:	023a      	lsls	r2, r7, #8
 8001098:	d53d      	bpl.n	8001116 <__aeabi_dadd+0x632>
 800109a:	1acc      	subs	r4, r1, r3
 800109c:	42a1      	cmp	r1, r4
 800109e:	4189      	sbcs	r1, r1
 80010a0:	4643      	mov	r3, r8
 80010a2:	4249      	negs	r1, r1
 80010a4:	1a1f      	subs	r7, r3, r0
 80010a6:	4655      	mov	r5, sl
 80010a8:	1a7f      	subs	r7, r7, r1
 80010aa:	e595      	b.n	8000bd8 <__aeabi_dadd+0xf4>
 80010ac:	077b      	lsls	r3, r7, #29
 80010ae:	08c9      	lsrs	r1, r1, #3
 80010b0:	430b      	orrs	r3, r1
 80010b2:	08f8      	lsrs	r0, r7, #3
 80010b4:	e643      	b.n	8000d3e <__aeabi_dadd+0x25a>
 80010b6:	4644      	mov	r4, r8
 80010b8:	08db      	lsrs	r3, r3, #3
 80010ba:	430c      	orrs	r4, r1
 80010bc:	d130      	bne.n	8001120 <__aeabi_dadd+0x63c>
 80010be:	0742      	lsls	r2, r0, #29
 80010c0:	4313      	orrs	r3, r2
 80010c2:	08c0      	lsrs	r0, r0, #3
 80010c4:	e65c      	b.n	8000d80 <__aeabi_dadd+0x29c>
 80010c6:	077b      	lsls	r3, r7, #29
 80010c8:	08c9      	lsrs	r1, r1, #3
 80010ca:	430b      	orrs	r3, r1
 80010cc:	08f8      	lsrs	r0, r7, #3
 80010ce:	e639      	b.n	8000d44 <__aeabi_dadd+0x260>
 80010d0:	185c      	adds	r4, r3, r1
 80010d2:	429c      	cmp	r4, r3
 80010d4:	419b      	sbcs	r3, r3
 80010d6:	4440      	add	r0, r8
 80010d8:	425b      	negs	r3, r3
 80010da:	18c7      	adds	r7, r0, r3
 80010dc:	023b      	lsls	r3, r7, #8
 80010de:	d400      	bmi.n	80010e2 <__aeabi_dadd+0x5fe>
 80010e0:	e625      	b.n	8000d2e <__aeabi_dadd+0x24a>
 80010e2:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <__aeabi_dadd+0x674>)
 80010e4:	2601      	movs	r6, #1
 80010e6:	401f      	ands	r7, r3
 80010e8:	e621      	b.n	8000d2e <__aeabi_dadd+0x24a>
 80010ea:	0004      	movs	r4, r0
 80010ec:	3a20      	subs	r2, #32
 80010ee:	40d4      	lsrs	r4, r2
 80010f0:	4662      	mov	r2, ip
 80010f2:	2a20      	cmp	r2, #32
 80010f4:	d004      	beq.n	8001100 <__aeabi_dadd+0x61c>
 80010f6:	2240      	movs	r2, #64	; 0x40
 80010f8:	4666      	mov	r6, ip
 80010fa:	1b92      	subs	r2, r2, r6
 80010fc:	4090      	lsls	r0, r2
 80010fe:	4303      	orrs	r3, r0
 8001100:	1e5a      	subs	r2, r3, #1
 8001102:	4193      	sbcs	r3, r2
 8001104:	431c      	orrs	r4, r3
 8001106:	e67e      	b.n	8000e06 <__aeabi_dadd+0x322>
 8001108:	185c      	adds	r4, r3, r1
 800110a:	428c      	cmp	r4, r1
 800110c:	4189      	sbcs	r1, r1
 800110e:	4440      	add	r0, r8
 8001110:	4249      	negs	r1, r1
 8001112:	1847      	adds	r7, r0, r1
 8001114:	e6dd      	b.n	8000ed2 <__aeabi_dadd+0x3ee>
 8001116:	0023      	movs	r3, r4
 8001118:	433b      	orrs	r3, r7
 800111a:	d100      	bne.n	800111e <__aeabi_dadd+0x63a>
 800111c:	e6ad      	b.n	8000e7a <__aeabi_dadd+0x396>
 800111e:	e606      	b.n	8000d2e <__aeabi_dadd+0x24a>
 8001120:	0744      	lsls	r4, r0, #29
 8001122:	4323      	orrs	r3, r4
 8001124:	2480      	movs	r4, #128	; 0x80
 8001126:	08c0      	lsrs	r0, r0, #3
 8001128:	0324      	lsls	r4, r4, #12
 800112a:	4220      	tst	r0, r4
 800112c:	d008      	beq.n	8001140 <__aeabi_dadd+0x65c>
 800112e:	4642      	mov	r2, r8
 8001130:	08d6      	lsrs	r6, r2, #3
 8001132:	4226      	tst	r6, r4
 8001134:	d104      	bne.n	8001140 <__aeabi_dadd+0x65c>
 8001136:	4655      	mov	r5, sl
 8001138:	0030      	movs	r0, r6
 800113a:	08cb      	lsrs	r3, r1, #3
 800113c:	0751      	lsls	r1, r2, #29
 800113e:	430b      	orrs	r3, r1
 8001140:	0f5a      	lsrs	r2, r3, #29
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	08db      	lsrs	r3, r3, #3
 8001146:	0752      	lsls	r2, r2, #29
 8001148:	4313      	orrs	r3, r2
 800114a:	e619      	b.n	8000d80 <__aeabi_dadd+0x29c>
 800114c:	2300      	movs	r3, #0
 800114e:	4a01      	ldr	r2, [pc, #4]	; (8001154 <__aeabi_dadd+0x670>)
 8001150:	001f      	movs	r7, r3
 8001152:	e55e      	b.n	8000c12 <__aeabi_dadd+0x12e>
 8001154:	000007ff 	.word	0x000007ff
 8001158:	ff7fffff 	.word	0xff7fffff

0800115c <__aeabi_ddiv>:
 800115c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800115e:	4657      	mov	r7, sl
 8001160:	464e      	mov	r6, r9
 8001162:	4645      	mov	r5, r8
 8001164:	46de      	mov	lr, fp
 8001166:	b5e0      	push	{r5, r6, r7, lr}
 8001168:	4681      	mov	r9, r0
 800116a:	0005      	movs	r5, r0
 800116c:	030c      	lsls	r4, r1, #12
 800116e:	0048      	lsls	r0, r1, #1
 8001170:	4692      	mov	sl, r2
 8001172:	001f      	movs	r7, r3
 8001174:	b085      	sub	sp, #20
 8001176:	0b24      	lsrs	r4, r4, #12
 8001178:	0d40      	lsrs	r0, r0, #21
 800117a:	0fce      	lsrs	r6, r1, #31
 800117c:	2800      	cmp	r0, #0
 800117e:	d100      	bne.n	8001182 <__aeabi_ddiv+0x26>
 8001180:	e156      	b.n	8001430 <__aeabi_ddiv+0x2d4>
 8001182:	4bd4      	ldr	r3, [pc, #848]	; (80014d4 <__aeabi_ddiv+0x378>)
 8001184:	4298      	cmp	r0, r3
 8001186:	d100      	bne.n	800118a <__aeabi_ddiv+0x2e>
 8001188:	e172      	b.n	8001470 <__aeabi_ddiv+0x314>
 800118a:	0f6b      	lsrs	r3, r5, #29
 800118c:	00e4      	lsls	r4, r4, #3
 800118e:	431c      	orrs	r4, r3
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	041b      	lsls	r3, r3, #16
 8001194:	4323      	orrs	r3, r4
 8001196:	4698      	mov	r8, r3
 8001198:	4bcf      	ldr	r3, [pc, #828]	; (80014d8 <__aeabi_ddiv+0x37c>)
 800119a:	00ed      	lsls	r5, r5, #3
 800119c:	469b      	mov	fp, r3
 800119e:	2300      	movs	r3, #0
 80011a0:	4699      	mov	r9, r3
 80011a2:	4483      	add	fp, r0
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	033c      	lsls	r4, r7, #12
 80011a8:	007b      	lsls	r3, r7, #1
 80011aa:	4650      	mov	r0, sl
 80011ac:	0b24      	lsrs	r4, r4, #12
 80011ae:	0d5b      	lsrs	r3, r3, #21
 80011b0:	0fff      	lsrs	r7, r7, #31
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d100      	bne.n	80011b8 <__aeabi_ddiv+0x5c>
 80011b6:	e11f      	b.n	80013f8 <__aeabi_ddiv+0x29c>
 80011b8:	4ac6      	ldr	r2, [pc, #792]	; (80014d4 <__aeabi_ddiv+0x378>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d100      	bne.n	80011c0 <__aeabi_ddiv+0x64>
 80011be:	e162      	b.n	8001486 <__aeabi_ddiv+0x32a>
 80011c0:	49c5      	ldr	r1, [pc, #788]	; (80014d8 <__aeabi_ddiv+0x37c>)
 80011c2:	0f42      	lsrs	r2, r0, #29
 80011c4:	468c      	mov	ip, r1
 80011c6:	00e4      	lsls	r4, r4, #3
 80011c8:	4659      	mov	r1, fp
 80011ca:	4314      	orrs	r4, r2
 80011cc:	2280      	movs	r2, #128	; 0x80
 80011ce:	4463      	add	r3, ip
 80011d0:	0412      	lsls	r2, r2, #16
 80011d2:	1acb      	subs	r3, r1, r3
 80011d4:	4314      	orrs	r4, r2
 80011d6:	469b      	mov	fp, r3
 80011d8:	00c2      	lsls	r2, r0, #3
 80011da:	2000      	movs	r0, #0
 80011dc:	0033      	movs	r3, r6
 80011de:	407b      	eors	r3, r7
 80011e0:	469a      	mov	sl, r3
 80011e2:	464b      	mov	r3, r9
 80011e4:	2b0f      	cmp	r3, #15
 80011e6:	d827      	bhi.n	8001238 <__aeabi_ddiv+0xdc>
 80011e8:	49bc      	ldr	r1, [pc, #752]	; (80014dc <__aeabi_ddiv+0x380>)
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	58cb      	ldr	r3, [r1, r3]
 80011ee:	469f      	mov	pc, r3
 80011f0:	46b2      	mov	sl, r6
 80011f2:	9b00      	ldr	r3, [sp, #0]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d016      	beq.n	8001226 <__aeabi_ddiv+0xca>
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d100      	bne.n	80011fe <__aeabi_ddiv+0xa2>
 80011fc:	e28e      	b.n	800171c <__aeabi_ddiv+0x5c0>
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d000      	beq.n	8001204 <__aeabi_ddiv+0xa8>
 8001202:	e0d9      	b.n	80013b8 <__aeabi_ddiv+0x25c>
 8001204:	2300      	movs	r3, #0
 8001206:	2400      	movs	r4, #0
 8001208:	2500      	movs	r5, #0
 800120a:	4652      	mov	r2, sl
 800120c:	051b      	lsls	r3, r3, #20
 800120e:	4323      	orrs	r3, r4
 8001210:	07d2      	lsls	r2, r2, #31
 8001212:	4313      	orrs	r3, r2
 8001214:	0028      	movs	r0, r5
 8001216:	0019      	movs	r1, r3
 8001218:	b005      	add	sp, #20
 800121a:	bcf0      	pop	{r4, r5, r6, r7}
 800121c:	46bb      	mov	fp, r7
 800121e:	46b2      	mov	sl, r6
 8001220:	46a9      	mov	r9, r5
 8001222:	46a0      	mov	r8, r4
 8001224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001226:	2400      	movs	r4, #0
 8001228:	2500      	movs	r5, #0
 800122a:	4baa      	ldr	r3, [pc, #680]	; (80014d4 <__aeabi_ddiv+0x378>)
 800122c:	e7ed      	b.n	800120a <__aeabi_ddiv+0xae>
 800122e:	46ba      	mov	sl, r7
 8001230:	46a0      	mov	r8, r4
 8001232:	0015      	movs	r5, r2
 8001234:	9000      	str	r0, [sp, #0]
 8001236:	e7dc      	b.n	80011f2 <__aeabi_ddiv+0x96>
 8001238:	4544      	cmp	r4, r8
 800123a:	d200      	bcs.n	800123e <__aeabi_ddiv+0xe2>
 800123c:	e1c7      	b.n	80015ce <__aeabi_ddiv+0x472>
 800123e:	d100      	bne.n	8001242 <__aeabi_ddiv+0xe6>
 8001240:	e1c2      	b.n	80015c8 <__aeabi_ddiv+0x46c>
 8001242:	2301      	movs	r3, #1
 8001244:	425b      	negs	r3, r3
 8001246:	469c      	mov	ip, r3
 8001248:	002e      	movs	r6, r5
 800124a:	4640      	mov	r0, r8
 800124c:	2500      	movs	r5, #0
 800124e:	44e3      	add	fp, ip
 8001250:	0223      	lsls	r3, r4, #8
 8001252:	0e14      	lsrs	r4, r2, #24
 8001254:	431c      	orrs	r4, r3
 8001256:	0c1b      	lsrs	r3, r3, #16
 8001258:	4699      	mov	r9, r3
 800125a:	0423      	lsls	r3, r4, #16
 800125c:	0c1f      	lsrs	r7, r3, #16
 800125e:	0212      	lsls	r2, r2, #8
 8001260:	4649      	mov	r1, r9
 8001262:	9200      	str	r2, [sp, #0]
 8001264:	9701      	str	r7, [sp, #4]
 8001266:	f7fe fff1 	bl	800024c <__aeabi_uidivmod>
 800126a:	0002      	movs	r2, r0
 800126c:	437a      	muls	r2, r7
 800126e:	040b      	lsls	r3, r1, #16
 8001270:	0c31      	lsrs	r1, r6, #16
 8001272:	4680      	mov	r8, r0
 8001274:	4319      	orrs	r1, r3
 8001276:	428a      	cmp	r2, r1
 8001278:	d907      	bls.n	800128a <__aeabi_ddiv+0x12e>
 800127a:	2301      	movs	r3, #1
 800127c:	425b      	negs	r3, r3
 800127e:	469c      	mov	ip, r3
 8001280:	1909      	adds	r1, r1, r4
 8001282:	44e0      	add	r8, ip
 8001284:	428c      	cmp	r4, r1
 8001286:	d800      	bhi.n	800128a <__aeabi_ddiv+0x12e>
 8001288:	e207      	b.n	800169a <__aeabi_ddiv+0x53e>
 800128a:	1a88      	subs	r0, r1, r2
 800128c:	4649      	mov	r1, r9
 800128e:	f7fe ffdd 	bl	800024c <__aeabi_uidivmod>
 8001292:	0409      	lsls	r1, r1, #16
 8001294:	468c      	mov	ip, r1
 8001296:	0431      	lsls	r1, r6, #16
 8001298:	4666      	mov	r6, ip
 800129a:	9a01      	ldr	r2, [sp, #4]
 800129c:	0c09      	lsrs	r1, r1, #16
 800129e:	4342      	muls	r2, r0
 80012a0:	0003      	movs	r3, r0
 80012a2:	4331      	orrs	r1, r6
 80012a4:	428a      	cmp	r2, r1
 80012a6:	d904      	bls.n	80012b2 <__aeabi_ddiv+0x156>
 80012a8:	1909      	adds	r1, r1, r4
 80012aa:	3b01      	subs	r3, #1
 80012ac:	428c      	cmp	r4, r1
 80012ae:	d800      	bhi.n	80012b2 <__aeabi_ddiv+0x156>
 80012b0:	e1ed      	b.n	800168e <__aeabi_ddiv+0x532>
 80012b2:	1a88      	subs	r0, r1, r2
 80012b4:	4642      	mov	r2, r8
 80012b6:	0412      	lsls	r2, r2, #16
 80012b8:	431a      	orrs	r2, r3
 80012ba:	4690      	mov	r8, r2
 80012bc:	4641      	mov	r1, r8
 80012be:	9b00      	ldr	r3, [sp, #0]
 80012c0:	040e      	lsls	r6, r1, #16
 80012c2:	0c1b      	lsrs	r3, r3, #16
 80012c4:	001f      	movs	r7, r3
 80012c6:	9302      	str	r3, [sp, #8]
 80012c8:	9b00      	ldr	r3, [sp, #0]
 80012ca:	0c36      	lsrs	r6, r6, #16
 80012cc:	041b      	lsls	r3, r3, #16
 80012ce:	0c19      	lsrs	r1, r3, #16
 80012d0:	000b      	movs	r3, r1
 80012d2:	4373      	muls	r3, r6
 80012d4:	0c12      	lsrs	r2, r2, #16
 80012d6:	437e      	muls	r6, r7
 80012d8:	9103      	str	r1, [sp, #12]
 80012da:	4351      	muls	r1, r2
 80012dc:	437a      	muls	r2, r7
 80012de:	0c1f      	lsrs	r7, r3, #16
 80012e0:	46bc      	mov	ip, r7
 80012e2:	1876      	adds	r6, r6, r1
 80012e4:	4466      	add	r6, ip
 80012e6:	42b1      	cmp	r1, r6
 80012e8:	d903      	bls.n	80012f2 <__aeabi_ddiv+0x196>
 80012ea:	2180      	movs	r1, #128	; 0x80
 80012ec:	0249      	lsls	r1, r1, #9
 80012ee:	468c      	mov	ip, r1
 80012f0:	4462      	add	r2, ip
 80012f2:	0c31      	lsrs	r1, r6, #16
 80012f4:	188a      	adds	r2, r1, r2
 80012f6:	0431      	lsls	r1, r6, #16
 80012f8:	041e      	lsls	r6, r3, #16
 80012fa:	0c36      	lsrs	r6, r6, #16
 80012fc:	198e      	adds	r6, r1, r6
 80012fe:	4290      	cmp	r0, r2
 8001300:	d302      	bcc.n	8001308 <__aeabi_ddiv+0x1ac>
 8001302:	d112      	bne.n	800132a <__aeabi_ddiv+0x1ce>
 8001304:	42b5      	cmp	r5, r6
 8001306:	d210      	bcs.n	800132a <__aeabi_ddiv+0x1ce>
 8001308:	4643      	mov	r3, r8
 800130a:	1e59      	subs	r1, r3, #1
 800130c:	9b00      	ldr	r3, [sp, #0]
 800130e:	469c      	mov	ip, r3
 8001310:	4465      	add	r5, ip
 8001312:	001f      	movs	r7, r3
 8001314:	429d      	cmp	r5, r3
 8001316:	419b      	sbcs	r3, r3
 8001318:	425b      	negs	r3, r3
 800131a:	191b      	adds	r3, r3, r4
 800131c:	18c0      	adds	r0, r0, r3
 800131e:	4284      	cmp	r4, r0
 8001320:	d200      	bcs.n	8001324 <__aeabi_ddiv+0x1c8>
 8001322:	e1a0      	b.n	8001666 <__aeabi_ddiv+0x50a>
 8001324:	d100      	bne.n	8001328 <__aeabi_ddiv+0x1cc>
 8001326:	e19b      	b.n	8001660 <__aeabi_ddiv+0x504>
 8001328:	4688      	mov	r8, r1
 800132a:	1bae      	subs	r6, r5, r6
 800132c:	42b5      	cmp	r5, r6
 800132e:	41ad      	sbcs	r5, r5
 8001330:	1a80      	subs	r0, r0, r2
 8001332:	426d      	negs	r5, r5
 8001334:	1b40      	subs	r0, r0, r5
 8001336:	4284      	cmp	r4, r0
 8001338:	d100      	bne.n	800133c <__aeabi_ddiv+0x1e0>
 800133a:	e1d5      	b.n	80016e8 <__aeabi_ddiv+0x58c>
 800133c:	4649      	mov	r1, r9
 800133e:	f7fe ff85 	bl	800024c <__aeabi_uidivmod>
 8001342:	9a01      	ldr	r2, [sp, #4]
 8001344:	040b      	lsls	r3, r1, #16
 8001346:	4342      	muls	r2, r0
 8001348:	0c31      	lsrs	r1, r6, #16
 800134a:	0005      	movs	r5, r0
 800134c:	4319      	orrs	r1, r3
 800134e:	428a      	cmp	r2, r1
 8001350:	d900      	bls.n	8001354 <__aeabi_ddiv+0x1f8>
 8001352:	e16c      	b.n	800162e <__aeabi_ddiv+0x4d2>
 8001354:	1a88      	subs	r0, r1, r2
 8001356:	4649      	mov	r1, r9
 8001358:	f7fe ff78 	bl	800024c <__aeabi_uidivmod>
 800135c:	9a01      	ldr	r2, [sp, #4]
 800135e:	0436      	lsls	r6, r6, #16
 8001360:	4342      	muls	r2, r0
 8001362:	0409      	lsls	r1, r1, #16
 8001364:	0c36      	lsrs	r6, r6, #16
 8001366:	0003      	movs	r3, r0
 8001368:	430e      	orrs	r6, r1
 800136a:	42b2      	cmp	r2, r6
 800136c:	d900      	bls.n	8001370 <__aeabi_ddiv+0x214>
 800136e:	e153      	b.n	8001618 <__aeabi_ddiv+0x4bc>
 8001370:	9803      	ldr	r0, [sp, #12]
 8001372:	1ab6      	subs	r6, r6, r2
 8001374:	0002      	movs	r2, r0
 8001376:	042d      	lsls	r5, r5, #16
 8001378:	431d      	orrs	r5, r3
 800137a:	9f02      	ldr	r7, [sp, #8]
 800137c:	042b      	lsls	r3, r5, #16
 800137e:	0c1b      	lsrs	r3, r3, #16
 8001380:	435a      	muls	r2, r3
 8001382:	437b      	muls	r3, r7
 8001384:	469c      	mov	ip, r3
 8001386:	0c29      	lsrs	r1, r5, #16
 8001388:	4348      	muls	r0, r1
 800138a:	0c13      	lsrs	r3, r2, #16
 800138c:	4484      	add	ip, r0
 800138e:	4463      	add	r3, ip
 8001390:	4379      	muls	r1, r7
 8001392:	4298      	cmp	r0, r3
 8001394:	d903      	bls.n	800139e <__aeabi_ddiv+0x242>
 8001396:	2080      	movs	r0, #128	; 0x80
 8001398:	0240      	lsls	r0, r0, #9
 800139a:	4684      	mov	ip, r0
 800139c:	4461      	add	r1, ip
 800139e:	0c18      	lsrs	r0, r3, #16
 80013a0:	0412      	lsls	r2, r2, #16
 80013a2:	041b      	lsls	r3, r3, #16
 80013a4:	0c12      	lsrs	r2, r2, #16
 80013a6:	1841      	adds	r1, r0, r1
 80013a8:	189b      	adds	r3, r3, r2
 80013aa:	428e      	cmp	r6, r1
 80013ac:	d200      	bcs.n	80013b0 <__aeabi_ddiv+0x254>
 80013ae:	e0ff      	b.n	80015b0 <__aeabi_ddiv+0x454>
 80013b0:	d100      	bne.n	80013b4 <__aeabi_ddiv+0x258>
 80013b2:	e0fa      	b.n	80015aa <__aeabi_ddiv+0x44e>
 80013b4:	2301      	movs	r3, #1
 80013b6:	431d      	orrs	r5, r3
 80013b8:	4a49      	ldr	r2, [pc, #292]	; (80014e0 <__aeabi_ddiv+0x384>)
 80013ba:	445a      	add	r2, fp
 80013bc:	2a00      	cmp	r2, #0
 80013be:	dc00      	bgt.n	80013c2 <__aeabi_ddiv+0x266>
 80013c0:	e0aa      	b.n	8001518 <__aeabi_ddiv+0x3bc>
 80013c2:	076b      	lsls	r3, r5, #29
 80013c4:	d000      	beq.n	80013c8 <__aeabi_ddiv+0x26c>
 80013c6:	e13d      	b.n	8001644 <__aeabi_ddiv+0x4e8>
 80013c8:	08ed      	lsrs	r5, r5, #3
 80013ca:	4643      	mov	r3, r8
 80013cc:	01db      	lsls	r3, r3, #7
 80013ce:	d506      	bpl.n	80013de <__aeabi_ddiv+0x282>
 80013d0:	4642      	mov	r2, r8
 80013d2:	4b44      	ldr	r3, [pc, #272]	; (80014e4 <__aeabi_ddiv+0x388>)
 80013d4:	401a      	ands	r2, r3
 80013d6:	4690      	mov	r8, r2
 80013d8:	2280      	movs	r2, #128	; 0x80
 80013da:	00d2      	lsls	r2, r2, #3
 80013dc:	445a      	add	r2, fp
 80013de:	4b42      	ldr	r3, [pc, #264]	; (80014e8 <__aeabi_ddiv+0x38c>)
 80013e0:	429a      	cmp	r2, r3
 80013e2:	dd00      	ble.n	80013e6 <__aeabi_ddiv+0x28a>
 80013e4:	e71f      	b.n	8001226 <__aeabi_ddiv+0xca>
 80013e6:	4643      	mov	r3, r8
 80013e8:	075b      	lsls	r3, r3, #29
 80013ea:	431d      	orrs	r5, r3
 80013ec:	4643      	mov	r3, r8
 80013ee:	0552      	lsls	r2, r2, #21
 80013f0:	025c      	lsls	r4, r3, #9
 80013f2:	0b24      	lsrs	r4, r4, #12
 80013f4:	0d53      	lsrs	r3, r2, #21
 80013f6:	e708      	b.n	800120a <__aeabi_ddiv+0xae>
 80013f8:	4652      	mov	r2, sl
 80013fa:	4322      	orrs	r2, r4
 80013fc:	d100      	bne.n	8001400 <__aeabi_ddiv+0x2a4>
 80013fe:	e07b      	b.n	80014f8 <__aeabi_ddiv+0x39c>
 8001400:	2c00      	cmp	r4, #0
 8001402:	d100      	bne.n	8001406 <__aeabi_ddiv+0x2aa>
 8001404:	e0fa      	b.n	80015fc <__aeabi_ddiv+0x4a0>
 8001406:	0020      	movs	r0, r4
 8001408:	f001 fa14 	bl	8002834 <__clzsi2>
 800140c:	0002      	movs	r2, r0
 800140e:	3a0b      	subs	r2, #11
 8001410:	231d      	movs	r3, #29
 8001412:	0001      	movs	r1, r0
 8001414:	1a9b      	subs	r3, r3, r2
 8001416:	4652      	mov	r2, sl
 8001418:	3908      	subs	r1, #8
 800141a:	40da      	lsrs	r2, r3
 800141c:	408c      	lsls	r4, r1
 800141e:	4314      	orrs	r4, r2
 8001420:	4652      	mov	r2, sl
 8001422:	408a      	lsls	r2, r1
 8001424:	4b31      	ldr	r3, [pc, #196]	; (80014ec <__aeabi_ddiv+0x390>)
 8001426:	4458      	add	r0, fp
 8001428:	469b      	mov	fp, r3
 800142a:	4483      	add	fp, r0
 800142c:	2000      	movs	r0, #0
 800142e:	e6d5      	b.n	80011dc <__aeabi_ddiv+0x80>
 8001430:	464b      	mov	r3, r9
 8001432:	4323      	orrs	r3, r4
 8001434:	4698      	mov	r8, r3
 8001436:	d044      	beq.n	80014c2 <__aeabi_ddiv+0x366>
 8001438:	2c00      	cmp	r4, #0
 800143a:	d100      	bne.n	800143e <__aeabi_ddiv+0x2e2>
 800143c:	e0ce      	b.n	80015dc <__aeabi_ddiv+0x480>
 800143e:	0020      	movs	r0, r4
 8001440:	f001 f9f8 	bl	8002834 <__clzsi2>
 8001444:	0001      	movs	r1, r0
 8001446:	0002      	movs	r2, r0
 8001448:	390b      	subs	r1, #11
 800144a:	231d      	movs	r3, #29
 800144c:	1a5b      	subs	r3, r3, r1
 800144e:	4649      	mov	r1, r9
 8001450:	0010      	movs	r0, r2
 8001452:	40d9      	lsrs	r1, r3
 8001454:	3808      	subs	r0, #8
 8001456:	4084      	lsls	r4, r0
 8001458:	000b      	movs	r3, r1
 800145a:	464d      	mov	r5, r9
 800145c:	4323      	orrs	r3, r4
 800145e:	4698      	mov	r8, r3
 8001460:	4085      	lsls	r5, r0
 8001462:	4823      	ldr	r0, [pc, #140]	; (80014f0 <__aeabi_ddiv+0x394>)
 8001464:	1a83      	subs	r3, r0, r2
 8001466:	469b      	mov	fp, r3
 8001468:	2300      	movs	r3, #0
 800146a:	4699      	mov	r9, r3
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	e69a      	b.n	80011a6 <__aeabi_ddiv+0x4a>
 8001470:	464b      	mov	r3, r9
 8001472:	4323      	orrs	r3, r4
 8001474:	4698      	mov	r8, r3
 8001476:	d11d      	bne.n	80014b4 <__aeabi_ddiv+0x358>
 8001478:	2308      	movs	r3, #8
 800147a:	4699      	mov	r9, r3
 800147c:	3b06      	subs	r3, #6
 800147e:	2500      	movs	r5, #0
 8001480:	4683      	mov	fp, r0
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	e68f      	b.n	80011a6 <__aeabi_ddiv+0x4a>
 8001486:	4652      	mov	r2, sl
 8001488:	4322      	orrs	r2, r4
 800148a:	d109      	bne.n	80014a0 <__aeabi_ddiv+0x344>
 800148c:	2302      	movs	r3, #2
 800148e:	4649      	mov	r1, r9
 8001490:	4319      	orrs	r1, r3
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <__aeabi_ddiv+0x398>)
 8001494:	4689      	mov	r9, r1
 8001496:	469c      	mov	ip, r3
 8001498:	2400      	movs	r4, #0
 800149a:	2002      	movs	r0, #2
 800149c:	44e3      	add	fp, ip
 800149e:	e69d      	b.n	80011dc <__aeabi_ddiv+0x80>
 80014a0:	2303      	movs	r3, #3
 80014a2:	464a      	mov	r2, r9
 80014a4:	431a      	orrs	r2, r3
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <__aeabi_ddiv+0x398>)
 80014a8:	4691      	mov	r9, r2
 80014aa:	469c      	mov	ip, r3
 80014ac:	4652      	mov	r2, sl
 80014ae:	2003      	movs	r0, #3
 80014b0:	44e3      	add	fp, ip
 80014b2:	e693      	b.n	80011dc <__aeabi_ddiv+0x80>
 80014b4:	230c      	movs	r3, #12
 80014b6:	4699      	mov	r9, r3
 80014b8:	3b09      	subs	r3, #9
 80014ba:	46a0      	mov	r8, r4
 80014bc:	4683      	mov	fp, r0
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	e671      	b.n	80011a6 <__aeabi_ddiv+0x4a>
 80014c2:	2304      	movs	r3, #4
 80014c4:	4699      	mov	r9, r3
 80014c6:	2300      	movs	r3, #0
 80014c8:	469b      	mov	fp, r3
 80014ca:	3301      	adds	r3, #1
 80014cc:	2500      	movs	r5, #0
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	e669      	b.n	80011a6 <__aeabi_ddiv+0x4a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff
 80014d8:	fffffc01 	.word	0xfffffc01
 80014dc:	0800e004 	.word	0x0800e004
 80014e0:	000003ff 	.word	0x000003ff
 80014e4:	feffffff 	.word	0xfeffffff
 80014e8:	000007fe 	.word	0x000007fe
 80014ec:	000003f3 	.word	0x000003f3
 80014f0:	fffffc0d 	.word	0xfffffc0d
 80014f4:	fffff801 	.word	0xfffff801
 80014f8:	4649      	mov	r1, r9
 80014fa:	2301      	movs	r3, #1
 80014fc:	4319      	orrs	r1, r3
 80014fe:	4689      	mov	r9, r1
 8001500:	2400      	movs	r4, #0
 8001502:	2001      	movs	r0, #1
 8001504:	e66a      	b.n	80011dc <__aeabi_ddiv+0x80>
 8001506:	2300      	movs	r3, #0
 8001508:	2480      	movs	r4, #128	; 0x80
 800150a:	469a      	mov	sl, r3
 800150c:	2500      	movs	r5, #0
 800150e:	4b8a      	ldr	r3, [pc, #552]	; (8001738 <__aeabi_ddiv+0x5dc>)
 8001510:	0324      	lsls	r4, r4, #12
 8001512:	e67a      	b.n	800120a <__aeabi_ddiv+0xae>
 8001514:	2501      	movs	r5, #1
 8001516:	426d      	negs	r5, r5
 8001518:	2301      	movs	r3, #1
 800151a:	1a9b      	subs	r3, r3, r2
 800151c:	2b38      	cmp	r3, #56	; 0x38
 800151e:	dd00      	ble.n	8001522 <__aeabi_ddiv+0x3c6>
 8001520:	e670      	b.n	8001204 <__aeabi_ddiv+0xa8>
 8001522:	2b1f      	cmp	r3, #31
 8001524:	dc00      	bgt.n	8001528 <__aeabi_ddiv+0x3cc>
 8001526:	e0bf      	b.n	80016a8 <__aeabi_ddiv+0x54c>
 8001528:	211f      	movs	r1, #31
 800152a:	4249      	negs	r1, r1
 800152c:	1a8a      	subs	r2, r1, r2
 800152e:	4641      	mov	r1, r8
 8001530:	40d1      	lsrs	r1, r2
 8001532:	000a      	movs	r2, r1
 8001534:	2b20      	cmp	r3, #32
 8001536:	d004      	beq.n	8001542 <__aeabi_ddiv+0x3e6>
 8001538:	4641      	mov	r1, r8
 800153a:	4b80      	ldr	r3, [pc, #512]	; (800173c <__aeabi_ddiv+0x5e0>)
 800153c:	445b      	add	r3, fp
 800153e:	4099      	lsls	r1, r3
 8001540:	430d      	orrs	r5, r1
 8001542:	1e6b      	subs	r3, r5, #1
 8001544:	419d      	sbcs	r5, r3
 8001546:	2307      	movs	r3, #7
 8001548:	432a      	orrs	r2, r5
 800154a:	001d      	movs	r5, r3
 800154c:	2400      	movs	r4, #0
 800154e:	4015      	ands	r5, r2
 8001550:	4213      	tst	r3, r2
 8001552:	d100      	bne.n	8001556 <__aeabi_ddiv+0x3fa>
 8001554:	e0d4      	b.n	8001700 <__aeabi_ddiv+0x5a4>
 8001556:	210f      	movs	r1, #15
 8001558:	2300      	movs	r3, #0
 800155a:	4011      	ands	r1, r2
 800155c:	2904      	cmp	r1, #4
 800155e:	d100      	bne.n	8001562 <__aeabi_ddiv+0x406>
 8001560:	e0cb      	b.n	80016fa <__aeabi_ddiv+0x59e>
 8001562:	1d11      	adds	r1, r2, #4
 8001564:	4291      	cmp	r1, r2
 8001566:	4192      	sbcs	r2, r2
 8001568:	4252      	negs	r2, r2
 800156a:	189b      	adds	r3, r3, r2
 800156c:	000a      	movs	r2, r1
 800156e:	0219      	lsls	r1, r3, #8
 8001570:	d400      	bmi.n	8001574 <__aeabi_ddiv+0x418>
 8001572:	e0c2      	b.n	80016fa <__aeabi_ddiv+0x59e>
 8001574:	2301      	movs	r3, #1
 8001576:	2400      	movs	r4, #0
 8001578:	2500      	movs	r5, #0
 800157a:	e646      	b.n	800120a <__aeabi_ddiv+0xae>
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	4641      	mov	r1, r8
 8001580:	031b      	lsls	r3, r3, #12
 8001582:	4219      	tst	r1, r3
 8001584:	d008      	beq.n	8001598 <__aeabi_ddiv+0x43c>
 8001586:	421c      	tst	r4, r3
 8001588:	d106      	bne.n	8001598 <__aeabi_ddiv+0x43c>
 800158a:	431c      	orrs	r4, r3
 800158c:	0324      	lsls	r4, r4, #12
 800158e:	46ba      	mov	sl, r7
 8001590:	0015      	movs	r5, r2
 8001592:	4b69      	ldr	r3, [pc, #420]	; (8001738 <__aeabi_ddiv+0x5dc>)
 8001594:	0b24      	lsrs	r4, r4, #12
 8001596:	e638      	b.n	800120a <__aeabi_ddiv+0xae>
 8001598:	2480      	movs	r4, #128	; 0x80
 800159a:	4643      	mov	r3, r8
 800159c:	0324      	lsls	r4, r4, #12
 800159e:	431c      	orrs	r4, r3
 80015a0:	0324      	lsls	r4, r4, #12
 80015a2:	46b2      	mov	sl, r6
 80015a4:	4b64      	ldr	r3, [pc, #400]	; (8001738 <__aeabi_ddiv+0x5dc>)
 80015a6:	0b24      	lsrs	r4, r4, #12
 80015a8:	e62f      	b.n	800120a <__aeabi_ddiv+0xae>
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d100      	bne.n	80015b0 <__aeabi_ddiv+0x454>
 80015ae:	e703      	b.n	80013b8 <__aeabi_ddiv+0x25c>
 80015b0:	19a6      	adds	r6, r4, r6
 80015b2:	1e68      	subs	r0, r5, #1
 80015b4:	42a6      	cmp	r6, r4
 80015b6:	d200      	bcs.n	80015ba <__aeabi_ddiv+0x45e>
 80015b8:	e08d      	b.n	80016d6 <__aeabi_ddiv+0x57a>
 80015ba:	428e      	cmp	r6, r1
 80015bc:	d200      	bcs.n	80015c0 <__aeabi_ddiv+0x464>
 80015be:	e0a3      	b.n	8001708 <__aeabi_ddiv+0x5ac>
 80015c0:	d100      	bne.n	80015c4 <__aeabi_ddiv+0x468>
 80015c2:	e0b3      	b.n	800172c <__aeabi_ddiv+0x5d0>
 80015c4:	0005      	movs	r5, r0
 80015c6:	e6f5      	b.n	80013b4 <__aeabi_ddiv+0x258>
 80015c8:	42aa      	cmp	r2, r5
 80015ca:	d900      	bls.n	80015ce <__aeabi_ddiv+0x472>
 80015cc:	e639      	b.n	8001242 <__aeabi_ddiv+0xe6>
 80015ce:	4643      	mov	r3, r8
 80015d0:	07de      	lsls	r6, r3, #31
 80015d2:	0858      	lsrs	r0, r3, #1
 80015d4:	086b      	lsrs	r3, r5, #1
 80015d6:	431e      	orrs	r6, r3
 80015d8:	07ed      	lsls	r5, r5, #31
 80015da:	e639      	b.n	8001250 <__aeabi_ddiv+0xf4>
 80015dc:	4648      	mov	r0, r9
 80015de:	f001 f929 	bl	8002834 <__clzsi2>
 80015e2:	0001      	movs	r1, r0
 80015e4:	0002      	movs	r2, r0
 80015e6:	3115      	adds	r1, #21
 80015e8:	3220      	adds	r2, #32
 80015ea:	291c      	cmp	r1, #28
 80015ec:	dc00      	bgt.n	80015f0 <__aeabi_ddiv+0x494>
 80015ee:	e72c      	b.n	800144a <__aeabi_ddiv+0x2ee>
 80015f0:	464b      	mov	r3, r9
 80015f2:	3808      	subs	r0, #8
 80015f4:	4083      	lsls	r3, r0
 80015f6:	2500      	movs	r5, #0
 80015f8:	4698      	mov	r8, r3
 80015fa:	e732      	b.n	8001462 <__aeabi_ddiv+0x306>
 80015fc:	f001 f91a 	bl	8002834 <__clzsi2>
 8001600:	0003      	movs	r3, r0
 8001602:	001a      	movs	r2, r3
 8001604:	3215      	adds	r2, #21
 8001606:	3020      	adds	r0, #32
 8001608:	2a1c      	cmp	r2, #28
 800160a:	dc00      	bgt.n	800160e <__aeabi_ddiv+0x4b2>
 800160c:	e700      	b.n	8001410 <__aeabi_ddiv+0x2b4>
 800160e:	4654      	mov	r4, sl
 8001610:	3b08      	subs	r3, #8
 8001612:	2200      	movs	r2, #0
 8001614:	409c      	lsls	r4, r3
 8001616:	e705      	b.n	8001424 <__aeabi_ddiv+0x2c8>
 8001618:	1936      	adds	r6, r6, r4
 800161a:	3b01      	subs	r3, #1
 800161c:	42b4      	cmp	r4, r6
 800161e:	d900      	bls.n	8001622 <__aeabi_ddiv+0x4c6>
 8001620:	e6a6      	b.n	8001370 <__aeabi_ddiv+0x214>
 8001622:	42b2      	cmp	r2, r6
 8001624:	d800      	bhi.n	8001628 <__aeabi_ddiv+0x4cc>
 8001626:	e6a3      	b.n	8001370 <__aeabi_ddiv+0x214>
 8001628:	1e83      	subs	r3, r0, #2
 800162a:	1936      	adds	r6, r6, r4
 800162c:	e6a0      	b.n	8001370 <__aeabi_ddiv+0x214>
 800162e:	1909      	adds	r1, r1, r4
 8001630:	3d01      	subs	r5, #1
 8001632:	428c      	cmp	r4, r1
 8001634:	d900      	bls.n	8001638 <__aeabi_ddiv+0x4dc>
 8001636:	e68d      	b.n	8001354 <__aeabi_ddiv+0x1f8>
 8001638:	428a      	cmp	r2, r1
 800163a:	d800      	bhi.n	800163e <__aeabi_ddiv+0x4e2>
 800163c:	e68a      	b.n	8001354 <__aeabi_ddiv+0x1f8>
 800163e:	1e85      	subs	r5, r0, #2
 8001640:	1909      	adds	r1, r1, r4
 8001642:	e687      	b.n	8001354 <__aeabi_ddiv+0x1f8>
 8001644:	230f      	movs	r3, #15
 8001646:	402b      	ands	r3, r5
 8001648:	2b04      	cmp	r3, #4
 800164a:	d100      	bne.n	800164e <__aeabi_ddiv+0x4f2>
 800164c:	e6bc      	b.n	80013c8 <__aeabi_ddiv+0x26c>
 800164e:	2305      	movs	r3, #5
 8001650:	425b      	negs	r3, r3
 8001652:	42ab      	cmp	r3, r5
 8001654:	419b      	sbcs	r3, r3
 8001656:	3504      	adds	r5, #4
 8001658:	425b      	negs	r3, r3
 800165a:	08ed      	lsrs	r5, r5, #3
 800165c:	4498      	add	r8, r3
 800165e:	e6b4      	b.n	80013ca <__aeabi_ddiv+0x26e>
 8001660:	42af      	cmp	r7, r5
 8001662:	d900      	bls.n	8001666 <__aeabi_ddiv+0x50a>
 8001664:	e660      	b.n	8001328 <__aeabi_ddiv+0x1cc>
 8001666:	4282      	cmp	r2, r0
 8001668:	d804      	bhi.n	8001674 <__aeabi_ddiv+0x518>
 800166a:	d000      	beq.n	800166e <__aeabi_ddiv+0x512>
 800166c:	e65c      	b.n	8001328 <__aeabi_ddiv+0x1cc>
 800166e:	42ae      	cmp	r6, r5
 8001670:	d800      	bhi.n	8001674 <__aeabi_ddiv+0x518>
 8001672:	e659      	b.n	8001328 <__aeabi_ddiv+0x1cc>
 8001674:	2302      	movs	r3, #2
 8001676:	425b      	negs	r3, r3
 8001678:	469c      	mov	ip, r3
 800167a:	9b00      	ldr	r3, [sp, #0]
 800167c:	44e0      	add	r8, ip
 800167e:	469c      	mov	ip, r3
 8001680:	4465      	add	r5, ip
 8001682:	429d      	cmp	r5, r3
 8001684:	419b      	sbcs	r3, r3
 8001686:	425b      	negs	r3, r3
 8001688:	191b      	adds	r3, r3, r4
 800168a:	18c0      	adds	r0, r0, r3
 800168c:	e64d      	b.n	800132a <__aeabi_ddiv+0x1ce>
 800168e:	428a      	cmp	r2, r1
 8001690:	d800      	bhi.n	8001694 <__aeabi_ddiv+0x538>
 8001692:	e60e      	b.n	80012b2 <__aeabi_ddiv+0x156>
 8001694:	1e83      	subs	r3, r0, #2
 8001696:	1909      	adds	r1, r1, r4
 8001698:	e60b      	b.n	80012b2 <__aeabi_ddiv+0x156>
 800169a:	428a      	cmp	r2, r1
 800169c:	d800      	bhi.n	80016a0 <__aeabi_ddiv+0x544>
 800169e:	e5f4      	b.n	800128a <__aeabi_ddiv+0x12e>
 80016a0:	1e83      	subs	r3, r0, #2
 80016a2:	4698      	mov	r8, r3
 80016a4:	1909      	adds	r1, r1, r4
 80016a6:	e5f0      	b.n	800128a <__aeabi_ddiv+0x12e>
 80016a8:	4925      	ldr	r1, [pc, #148]	; (8001740 <__aeabi_ddiv+0x5e4>)
 80016aa:	0028      	movs	r0, r5
 80016ac:	4459      	add	r1, fp
 80016ae:	408d      	lsls	r5, r1
 80016b0:	4642      	mov	r2, r8
 80016b2:	408a      	lsls	r2, r1
 80016b4:	1e69      	subs	r1, r5, #1
 80016b6:	418d      	sbcs	r5, r1
 80016b8:	4641      	mov	r1, r8
 80016ba:	40d8      	lsrs	r0, r3
 80016bc:	40d9      	lsrs	r1, r3
 80016be:	4302      	orrs	r2, r0
 80016c0:	432a      	orrs	r2, r5
 80016c2:	000b      	movs	r3, r1
 80016c4:	0751      	lsls	r1, r2, #29
 80016c6:	d100      	bne.n	80016ca <__aeabi_ddiv+0x56e>
 80016c8:	e751      	b.n	800156e <__aeabi_ddiv+0x412>
 80016ca:	210f      	movs	r1, #15
 80016cc:	4011      	ands	r1, r2
 80016ce:	2904      	cmp	r1, #4
 80016d0:	d000      	beq.n	80016d4 <__aeabi_ddiv+0x578>
 80016d2:	e746      	b.n	8001562 <__aeabi_ddiv+0x406>
 80016d4:	e74b      	b.n	800156e <__aeabi_ddiv+0x412>
 80016d6:	0005      	movs	r5, r0
 80016d8:	428e      	cmp	r6, r1
 80016da:	d000      	beq.n	80016de <__aeabi_ddiv+0x582>
 80016dc:	e66a      	b.n	80013b4 <__aeabi_ddiv+0x258>
 80016de:	9a00      	ldr	r2, [sp, #0]
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d000      	beq.n	80016e6 <__aeabi_ddiv+0x58a>
 80016e4:	e666      	b.n	80013b4 <__aeabi_ddiv+0x258>
 80016e6:	e667      	b.n	80013b8 <__aeabi_ddiv+0x25c>
 80016e8:	4a16      	ldr	r2, [pc, #88]	; (8001744 <__aeabi_ddiv+0x5e8>)
 80016ea:	445a      	add	r2, fp
 80016ec:	2a00      	cmp	r2, #0
 80016ee:	dc00      	bgt.n	80016f2 <__aeabi_ddiv+0x596>
 80016f0:	e710      	b.n	8001514 <__aeabi_ddiv+0x3b8>
 80016f2:	2301      	movs	r3, #1
 80016f4:	2500      	movs	r5, #0
 80016f6:	4498      	add	r8, r3
 80016f8:	e667      	b.n	80013ca <__aeabi_ddiv+0x26e>
 80016fa:	075d      	lsls	r5, r3, #29
 80016fc:	025b      	lsls	r3, r3, #9
 80016fe:	0b1c      	lsrs	r4, r3, #12
 8001700:	08d2      	lsrs	r2, r2, #3
 8001702:	2300      	movs	r3, #0
 8001704:	4315      	orrs	r5, r2
 8001706:	e580      	b.n	800120a <__aeabi_ddiv+0xae>
 8001708:	9800      	ldr	r0, [sp, #0]
 800170a:	3d02      	subs	r5, #2
 800170c:	0042      	lsls	r2, r0, #1
 800170e:	4282      	cmp	r2, r0
 8001710:	41bf      	sbcs	r7, r7
 8001712:	427f      	negs	r7, r7
 8001714:	193c      	adds	r4, r7, r4
 8001716:	1936      	adds	r6, r6, r4
 8001718:	9200      	str	r2, [sp, #0]
 800171a:	e7dd      	b.n	80016d8 <__aeabi_ddiv+0x57c>
 800171c:	2480      	movs	r4, #128	; 0x80
 800171e:	4643      	mov	r3, r8
 8001720:	0324      	lsls	r4, r4, #12
 8001722:	431c      	orrs	r4, r3
 8001724:	0324      	lsls	r4, r4, #12
 8001726:	4b04      	ldr	r3, [pc, #16]	; (8001738 <__aeabi_ddiv+0x5dc>)
 8001728:	0b24      	lsrs	r4, r4, #12
 800172a:	e56e      	b.n	800120a <__aeabi_ddiv+0xae>
 800172c:	9a00      	ldr	r2, [sp, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d3ea      	bcc.n	8001708 <__aeabi_ddiv+0x5ac>
 8001732:	0005      	movs	r5, r0
 8001734:	e7d3      	b.n	80016de <__aeabi_ddiv+0x582>
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	000007ff 	.word	0x000007ff
 800173c:	0000043e 	.word	0x0000043e
 8001740:	0000041e 	.word	0x0000041e
 8001744:	000003ff 	.word	0x000003ff

08001748 <__eqdf2>:
 8001748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800174a:	464e      	mov	r6, r9
 800174c:	4645      	mov	r5, r8
 800174e:	46de      	mov	lr, fp
 8001750:	4657      	mov	r7, sl
 8001752:	4690      	mov	r8, r2
 8001754:	b5e0      	push	{r5, r6, r7, lr}
 8001756:	0017      	movs	r7, r2
 8001758:	031a      	lsls	r2, r3, #12
 800175a:	0b12      	lsrs	r2, r2, #12
 800175c:	0005      	movs	r5, r0
 800175e:	4684      	mov	ip, r0
 8001760:	4819      	ldr	r0, [pc, #100]	; (80017c8 <__eqdf2+0x80>)
 8001762:	030e      	lsls	r6, r1, #12
 8001764:	004c      	lsls	r4, r1, #1
 8001766:	4691      	mov	r9, r2
 8001768:	005a      	lsls	r2, r3, #1
 800176a:	0fdb      	lsrs	r3, r3, #31
 800176c:	469b      	mov	fp, r3
 800176e:	0b36      	lsrs	r6, r6, #12
 8001770:	0d64      	lsrs	r4, r4, #21
 8001772:	0fc9      	lsrs	r1, r1, #31
 8001774:	0d52      	lsrs	r2, r2, #21
 8001776:	4284      	cmp	r4, r0
 8001778:	d019      	beq.n	80017ae <__eqdf2+0x66>
 800177a:	4282      	cmp	r2, r0
 800177c:	d010      	beq.n	80017a0 <__eqdf2+0x58>
 800177e:	2001      	movs	r0, #1
 8001780:	4294      	cmp	r4, r2
 8001782:	d10e      	bne.n	80017a2 <__eqdf2+0x5a>
 8001784:	454e      	cmp	r6, r9
 8001786:	d10c      	bne.n	80017a2 <__eqdf2+0x5a>
 8001788:	2001      	movs	r0, #1
 800178a:	45c4      	cmp	ip, r8
 800178c:	d109      	bne.n	80017a2 <__eqdf2+0x5a>
 800178e:	4559      	cmp	r1, fp
 8001790:	d017      	beq.n	80017c2 <__eqdf2+0x7a>
 8001792:	2c00      	cmp	r4, #0
 8001794:	d105      	bne.n	80017a2 <__eqdf2+0x5a>
 8001796:	0030      	movs	r0, r6
 8001798:	4328      	orrs	r0, r5
 800179a:	1e43      	subs	r3, r0, #1
 800179c:	4198      	sbcs	r0, r3
 800179e:	e000      	b.n	80017a2 <__eqdf2+0x5a>
 80017a0:	2001      	movs	r0, #1
 80017a2:	bcf0      	pop	{r4, r5, r6, r7}
 80017a4:	46bb      	mov	fp, r7
 80017a6:	46b2      	mov	sl, r6
 80017a8:	46a9      	mov	r9, r5
 80017aa:	46a0      	mov	r8, r4
 80017ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ae:	0033      	movs	r3, r6
 80017b0:	2001      	movs	r0, #1
 80017b2:	432b      	orrs	r3, r5
 80017b4:	d1f5      	bne.n	80017a2 <__eqdf2+0x5a>
 80017b6:	42a2      	cmp	r2, r4
 80017b8:	d1f3      	bne.n	80017a2 <__eqdf2+0x5a>
 80017ba:	464b      	mov	r3, r9
 80017bc:	433b      	orrs	r3, r7
 80017be:	d1f0      	bne.n	80017a2 <__eqdf2+0x5a>
 80017c0:	e7e2      	b.n	8001788 <__eqdf2+0x40>
 80017c2:	2000      	movs	r0, #0
 80017c4:	e7ed      	b.n	80017a2 <__eqdf2+0x5a>
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	000007ff 	.word	0x000007ff

080017cc <__gedf2>:
 80017cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ce:	4647      	mov	r7, r8
 80017d0:	46ce      	mov	lr, r9
 80017d2:	0004      	movs	r4, r0
 80017d4:	0018      	movs	r0, r3
 80017d6:	0016      	movs	r6, r2
 80017d8:	031b      	lsls	r3, r3, #12
 80017da:	0b1b      	lsrs	r3, r3, #12
 80017dc:	4d2d      	ldr	r5, [pc, #180]	; (8001894 <__gedf2+0xc8>)
 80017de:	004a      	lsls	r2, r1, #1
 80017e0:	4699      	mov	r9, r3
 80017e2:	b580      	push	{r7, lr}
 80017e4:	0043      	lsls	r3, r0, #1
 80017e6:	030f      	lsls	r7, r1, #12
 80017e8:	46a4      	mov	ip, r4
 80017ea:	46b0      	mov	r8, r6
 80017ec:	0b3f      	lsrs	r7, r7, #12
 80017ee:	0d52      	lsrs	r2, r2, #21
 80017f0:	0fc9      	lsrs	r1, r1, #31
 80017f2:	0d5b      	lsrs	r3, r3, #21
 80017f4:	0fc0      	lsrs	r0, r0, #31
 80017f6:	42aa      	cmp	r2, r5
 80017f8:	d021      	beq.n	800183e <__gedf2+0x72>
 80017fa:	42ab      	cmp	r3, r5
 80017fc:	d013      	beq.n	8001826 <__gedf2+0x5a>
 80017fe:	2a00      	cmp	r2, #0
 8001800:	d122      	bne.n	8001848 <__gedf2+0x7c>
 8001802:	433c      	orrs	r4, r7
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <__gedf2+0x42>
 8001808:	464d      	mov	r5, r9
 800180a:	432e      	orrs	r6, r5
 800180c:	d022      	beq.n	8001854 <__gedf2+0x88>
 800180e:	2c00      	cmp	r4, #0
 8001810:	d010      	beq.n	8001834 <__gedf2+0x68>
 8001812:	4281      	cmp	r1, r0
 8001814:	d022      	beq.n	800185c <__gedf2+0x90>
 8001816:	2002      	movs	r0, #2
 8001818:	3901      	subs	r1, #1
 800181a:	4008      	ands	r0, r1
 800181c:	3801      	subs	r0, #1
 800181e:	bcc0      	pop	{r6, r7}
 8001820:	46b9      	mov	r9, r7
 8001822:	46b0      	mov	r8, r6
 8001824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001826:	464d      	mov	r5, r9
 8001828:	432e      	orrs	r6, r5
 800182a:	d129      	bne.n	8001880 <__gedf2+0xb4>
 800182c:	2a00      	cmp	r2, #0
 800182e:	d1f0      	bne.n	8001812 <__gedf2+0x46>
 8001830:	433c      	orrs	r4, r7
 8001832:	d1ee      	bne.n	8001812 <__gedf2+0x46>
 8001834:	2800      	cmp	r0, #0
 8001836:	d1f2      	bne.n	800181e <__gedf2+0x52>
 8001838:	2001      	movs	r0, #1
 800183a:	4240      	negs	r0, r0
 800183c:	e7ef      	b.n	800181e <__gedf2+0x52>
 800183e:	003d      	movs	r5, r7
 8001840:	4325      	orrs	r5, r4
 8001842:	d11d      	bne.n	8001880 <__gedf2+0xb4>
 8001844:	4293      	cmp	r3, r2
 8001846:	d0ee      	beq.n	8001826 <__gedf2+0x5a>
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1e2      	bne.n	8001812 <__gedf2+0x46>
 800184c:	464c      	mov	r4, r9
 800184e:	4326      	orrs	r6, r4
 8001850:	d1df      	bne.n	8001812 <__gedf2+0x46>
 8001852:	e7e0      	b.n	8001816 <__gedf2+0x4a>
 8001854:	2000      	movs	r0, #0
 8001856:	2c00      	cmp	r4, #0
 8001858:	d0e1      	beq.n	800181e <__gedf2+0x52>
 800185a:	e7dc      	b.n	8001816 <__gedf2+0x4a>
 800185c:	429a      	cmp	r2, r3
 800185e:	dc0a      	bgt.n	8001876 <__gedf2+0xaa>
 8001860:	dbe8      	blt.n	8001834 <__gedf2+0x68>
 8001862:	454f      	cmp	r7, r9
 8001864:	d8d7      	bhi.n	8001816 <__gedf2+0x4a>
 8001866:	d00e      	beq.n	8001886 <__gedf2+0xba>
 8001868:	2000      	movs	r0, #0
 800186a:	454f      	cmp	r7, r9
 800186c:	d2d7      	bcs.n	800181e <__gedf2+0x52>
 800186e:	2900      	cmp	r1, #0
 8001870:	d0e2      	beq.n	8001838 <__gedf2+0x6c>
 8001872:	0008      	movs	r0, r1
 8001874:	e7d3      	b.n	800181e <__gedf2+0x52>
 8001876:	4243      	negs	r3, r0
 8001878:	4158      	adcs	r0, r3
 800187a:	0040      	lsls	r0, r0, #1
 800187c:	3801      	subs	r0, #1
 800187e:	e7ce      	b.n	800181e <__gedf2+0x52>
 8001880:	2002      	movs	r0, #2
 8001882:	4240      	negs	r0, r0
 8001884:	e7cb      	b.n	800181e <__gedf2+0x52>
 8001886:	45c4      	cmp	ip, r8
 8001888:	d8c5      	bhi.n	8001816 <__gedf2+0x4a>
 800188a:	2000      	movs	r0, #0
 800188c:	45c4      	cmp	ip, r8
 800188e:	d2c6      	bcs.n	800181e <__gedf2+0x52>
 8001890:	e7ed      	b.n	800186e <__gedf2+0xa2>
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	000007ff 	.word	0x000007ff

08001898 <__ledf2>:
 8001898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800189a:	4647      	mov	r7, r8
 800189c:	46ce      	mov	lr, r9
 800189e:	0004      	movs	r4, r0
 80018a0:	0018      	movs	r0, r3
 80018a2:	0016      	movs	r6, r2
 80018a4:	031b      	lsls	r3, r3, #12
 80018a6:	0b1b      	lsrs	r3, r3, #12
 80018a8:	4d2c      	ldr	r5, [pc, #176]	; (800195c <__ledf2+0xc4>)
 80018aa:	004a      	lsls	r2, r1, #1
 80018ac:	4699      	mov	r9, r3
 80018ae:	b580      	push	{r7, lr}
 80018b0:	0043      	lsls	r3, r0, #1
 80018b2:	030f      	lsls	r7, r1, #12
 80018b4:	46a4      	mov	ip, r4
 80018b6:	46b0      	mov	r8, r6
 80018b8:	0b3f      	lsrs	r7, r7, #12
 80018ba:	0d52      	lsrs	r2, r2, #21
 80018bc:	0fc9      	lsrs	r1, r1, #31
 80018be:	0d5b      	lsrs	r3, r3, #21
 80018c0:	0fc0      	lsrs	r0, r0, #31
 80018c2:	42aa      	cmp	r2, r5
 80018c4:	d00d      	beq.n	80018e2 <__ledf2+0x4a>
 80018c6:	42ab      	cmp	r3, r5
 80018c8:	d010      	beq.n	80018ec <__ledf2+0x54>
 80018ca:	2a00      	cmp	r2, #0
 80018cc:	d127      	bne.n	800191e <__ledf2+0x86>
 80018ce:	433c      	orrs	r4, r7
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d111      	bne.n	80018f8 <__ledf2+0x60>
 80018d4:	464d      	mov	r5, r9
 80018d6:	432e      	orrs	r6, r5
 80018d8:	d10e      	bne.n	80018f8 <__ledf2+0x60>
 80018da:	2000      	movs	r0, #0
 80018dc:	2c00      	cmp	r4, #0
 80018de:	d015      	beq.n	800190c <__ledf2+0x74>
 80018e0:	e00e      	b.n	8001900 <__ledf2+0x68>
 80018e2:	003d      	movs	r5, r7
 80018e4:	4325      	orrs	r5, r4
 80018e6:	d110      	bne.n	800190a <__ledf2+0x72>
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d118      	bne.n	800191e <__ledf2+0x86>
 80018ec:	464d      	mov	r5, r9
 80018ee:	432e      	orrs	r6, r5
 80018f0:	d10b      	bne.n	800190a <__ledf2+0x72>
 80018f2:	2a00      	cmp	r2, #0
 80018f4:	d102      	bne.n	80018fc <__ledf2+0x64>
 80018f6:	433c      	orrs	r4, r7
 80018f8:	2c00      	cmp	r4, #0
 80018fa:	d00b      	beq.n	8001914 <__ledf2+0x7c>
 80018fc:	4281      	cmp	r1, r0
 80018fe:	d014      	beq.n	800192a <__ledf2+0x92>
 8001900:	2002      	movs	r0, #2
 8001902:	3901      	subs	r1, #1
 8001904:	4008      	ands	r0, r1
 8001906:	3801      	subs	r0, #1
 8001908:	e000      	b.n	800190c <__ledf2+0x74>
 800190a:	2002      	movs	r0, #2
 800190c:	bcc0      	pop	{r6, r7}
 800190e:	46b9      	mov	r9, r7
 8001910:	46b0      	mov	r8, r6
 8001912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001914:	2800      	cmp	r0, #0
 8001916:	d1f9      	bne.n	800190c <__ledf2+0x74>
 8001918:	2001      	movs	r0, #1
 800191a:	4240      	negs	r0, r0
 800191c:	e7f6      	b.n	800190c <__ledf2+0x74>
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1ec      	bne.n	80018fc <__ledf2+0x64>
 8001922:	464c      	mov	r4, r9
 8001924:	4326      	orrs	r6, r4
 8001926:	d1e9      	bne.n	80018fc <__ledf2+0x64>
 8001928:	e7ea      	b.n	8001900 <__ledf2+0x68>
 800192a:	429a      	cmp	r2, r3
 800192c:	dd04      	ble.n	8001938 <__ledf2+0xa0>
 800192e:	4243      	negs	r3, r0
 8001930:	4158      	adcs	r0, r3
 8001932:	0040      	lsls	r0, r0, #1
 8001934:	3801      	subs	r0, #1
 8001936:	e7e9      	b.n	800190c <__ledf2+0x74>
 8001938:	429a      	cmp	r2, r3
 800193a:	dbeb      	blt.n	8001914 <__ledf2+0x7c>
 800193c:	454f      	cmp	r7, r9
 800193e:	d8df      	bhi.n	8001900 <__ledf2+0x68>
 8001940:	d006      	beq.n	8001950 <__ledf2+0xb8>
 8001942:	2000      	movs	r0, #0
 8001944:	454f      	cmp	r7, r9
 8001946:	d2e1      	bcs.n	800190c <__ledf2+0x74>
 8001948:	2900      	cmp	r1, #0
 800194a:	d0e5      	beq.n	8001918 <__ledf2+0x80>
 800194c:	0008      	movs	r0, r1
 800194e:	e7dd      	b.n	800190c <__ledf2+0x74>
 8001950:	45c4      	cmp	ip, r8
 8001952:	d8d5      	bhi.n	8001900 <__ledf2+0x68>
 8001954:	2000      	movs	r0, #0
 8001956:	45c4      	cmp	ip, r8
 8001958:	d2d8      	bcs.n	800190c <__ledf2+0x74>
 800195a:	e7f5      	b.n	8001948 <__ledf2+0xb0>
 800195c:	000007ff 	.word	0x000007ff

08001960 <__aeabi_dmul>:
 8001960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001962:	4657      	mov	r7, sl
 8001964:	464e      	mov	r6, r9
 8001966:	4645      	mov	r5, r8
 8001968:	46de      	mov	lr, fp
 800196a:	b5e0      	push	{r5, r6, r7, lr}
 800196c:	4698      	mov	r8, r3
 800196e:	030c      	lsls	r4, r1, #12
 8001970:	004b      	lsls	r3, r1, #1
 8001972:	0006      	movs	r6, r0
 8001974:	4692      	mov	sl, r2
 8001976:	b087      	sub	sp, #28
 8001978:	0b24      	lsrs	r4, r4, #12
 800197a:	0d5b      	lsrs	r3, r3, #21
 800197c:	0fcf      	lsrs	r7, r1, #31
 800197e:	2b00      	cmp	r3, #0
 8001980:	d100      	bne.n	8001984 <__aeabi_dmul+0x24>
 8001982:	e15c      	b.n	8001c3e <__aeabi_dmul+0x2de>
 8001984:	4ad9      	ldr	r2, [pc, #868]	; (8001cec <__aeabi_dmul+0x38c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d100      	bne.n	800198c <__aeabi_dmul+0x2c>
 800198a:	e175      	b.n	8001c78 <__aeabi_dmul+0x318>
 800198c:	0f42      	lsrs	r2, r0, #29
 800198e:	00e4      	lsls	r4, r4, #3
 8001990:	4314      	orrs	r4, r2
 8001992:	2280      	movs	r2, #128	; 0x80
 8001994:	0412      	lsls	r2, r2, #16
 8001996:	4314      	orrs	r4, r2
 8001998:	4ad5      	ldr	r2, [pc, #852]	; (8001cf0 <__aeabi_dmul+0x390>)
 800199a:	00c5      	lsls	r5, r0, #3
 800199c:	4694      	mov	ip, r2
 800199e:	4463      	add	r3, ip
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	2300      	movs	r3, #0
 80019a4:	4699      	mov	r9, r3
 80019a6:	469b      	mov	fp, r3
 80019a8:	4643      	mov	r3, r8
 80019aa:	4642      	mov	r2, r8
 80019ac:	031e      	lsls	r6, r3, #12
 80019ae:	0fd2      	lsrs	r2, r2, #31
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4650      	mov	r0, sl
 80019b4:	4690      	mov	r8, r2
 80019b6:	0b36      	lsrs	r6, r6, #12
 80019b8:	0d5b      	lsrs	r3, r3, #21
 80019ba:	d100      	bne.n	80019be <__aeabi_dmul+0x5e>
 80019bc:	e120      	b.n	8001c00 <__aeabi_dmul+0x2a0>
 80019be:	4acb      	ldr	r2, [pc, #812]	; (8001cec <__aeabi_dmul+0x38c>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d100      	bne.n	80019c6 <__aeabi_dmul+0x66>
 80019c4:	e162      	b.n	8001c8c <__aeabi_dmul+0x32c>
 80019c6:	49ca      	ldr	r1, [pc, #808]	; (8001cf0 <__aeabi_dmul+0x390>)
 80019c8:	0f42      	lsrs	r2, r0, #29
 80019ca:	468c      	mov	ip, r1
 80019cc:	9900      	ldr	r1, [sp, #0]
 80019ce:	4463      	add	r3, ip
 80019d0:	00f6      	lsls	r6, r6, #3
 80019d2:	468c      	mov	ip, r1
 80019d4:	4316      	orrs	r6, r2
 80019d6:	2280      	movs	r2, #128	; 0x80
 80019d8:	449c      	add	ip, r3
 80019da:	0412      	lsls	r2, r2, #16
 80019dc:	4663      	mov	r3, ip
 80019de:	4316      	orrs	r6, r2
 80019e0:	00c2      	lsls	r2, r0, #3
 80019e2:	2000      	movs	r0, #0
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	9900      	ldr	r1, [sp, #0]
 80019e8:	4643      	mov	r3, r8
 80019ea:	3101      	adds	r1, #1
 80019ec:	468c      	mov	ip, r1
 80019ee:	4649      	mov	r1, r9
 80019f0:	407b      	eors	r3, r7
 80019f2:	9301      	str	r3, [sp, #4]
 80019f4:	290f      	cmp	r1, #15
 80019f6:	d826      	bhi.n	8001a46 <__aeabi_dmul+0xe6>
 80019f8:	4bbe      	ldr	r3, [pc, #760]	; (8001cf4 <__aeabi_dmul+0x394>)
 80019fa:	0089      	lsls	r1, r1, #2
 80019fc:	5859      	ldr	r1, [r3, r1]
 80019fe:	468f      	mov	pc, r1
 8001a00:	4643      	mov	r3, r8
 8001a02:	9301      	str	r3, [sp, #4]
 8001a04:	0034      	movs	r4, r6
 8001a06:	0015      	movs	r5, r2
 8001a08:	4683      	mov	fp, r0
 8001a0a:	465b      	mov	r3, fp
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d016      	beq.n	8001a3e <__aeabi_dmul+0xde>
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d100      	bne.n	8001a16 <__aeabi_dmul+0xb6>
 8001a14:	e203      	b.n	8001e1e <__aeabi_dmul+0x4be>
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d000      	beq.n	8001a1c <__aeabi_dmul+0xbc>
 8001a1a:	e0cd      	b.n	8001bb8 <__aeabi_dmul+0x258>
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2400      	movs	r4, #0
 8001a20:	2500      	movs	r5, #0
 8001a22:	9b01      	ldr	r3, [sp, #4]
 8001a24:	0512      	lsls	r2, r2, #20
 8001a26:	4322      	orrs	r2, r4
 8001a28:	07db      	lsls	r3, r3, #31
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	0028      	movs	r0, r5
 8001a2e:	0011      	movs	r1, r2
 8001a30:	b007      	add	sp, #28
 8001a32:	bcf0      	pop	{r4, r5, r6, r7}
 8001a34:	46bb      	mov	fp, r7
 8001a36:	46b2      	mov	sl, r6
 8001a38:	46a9      	mov	r9, r5
 8001a3a:	46a0      	mov	r8, r4
 8001a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a3e:	2400      	movs	r4, #0
 8001a40:	2500      	movs	r5, #0
 8001a42:	4aaa      	ldr	r2, [pc, #680]	; (8001cec <__aeabi_dmul+0x38c>)
 8001a44:	e7ed      	b.n	8001a22 <__aeabi_dmul+0xc2>
 8001a46:	0c28      	lsrs	r0, r5, #16
 8001a48:	042d      	lsls	r5, r5, #16
 8001a4a:	0c2d      	lsrs	r5, r5, #16
 8001a4c:	002b      	movs	r3, r5
 8001a4e:	0c11      	lsrs	r1, r2, #16
 8001a50:	0412      	lsls	r2, r2, #16
 8001a52:	0c12      	lsrs	r2, r2, #16
 8001a54:	4353      	muls	r3, r2
 8001a56:	4698      	mov	r8, r3
 8001a58:	0013      	movs	r3, r2
 8001a5a:	002f      	movs	r7, r5
 8001a5c:	4343      	muls	r3, r0
 8001a5e:	4699      	mov	r9, r3
 8001a60:	434f      	muls	r7, r1
 8001a62:	444f      	add	r7, r9
 8001a64:	46bb      	mov	fp, r7
 8001a66:	4647      	mov	r7, r8
 8001a68:	000b      	movs	r3, r1
 8001a6a:	0c3f      	lsrs	r7, r7, #16
 8001a6c:	46ba      	mov	sl, r7
 8001a6e:	4343      	muls	r3, r0
 8001a70:	44da      	add	sl, fp
 8001a72:	9302      	str	r3, [sp, #8]
 8001a74:	45d1      	cmp	r9, sl
 8001a76:	d904      	bls.n	8001a82 <__aeabi_dmul+0x122>
 8001a78:	2780      	movs	r7, #128	; 0x80
 8001a7a:	027f      	lsls	r7, r7, #9
 8001a7c:	46b9      	mov	r9, r7
 8001a7e:	444b      	add	r3, r9
 8001a80:	9302      	str	r3, [sp, #8]
 8001a82:	4653      	mov	r3, sl
 8001a84:	0c1b      	lsrs	r3, r3, #16
 8001a86:	469b      	mov	fp, r3
 8001a88:	4653      	mov	r3, sl
 8001a8a:	041f      	lsls	r7, r3, #16
 8001a8c:	4643      	mov	r3, r8
 8001a8e:	041b      	lsls	r3, r3, #16
 8001a90:	0c1b      	lsrs	r3, r3, #16
 8001a92:	4698      	mov	r8, r3
 8001a94:	003b      	movs	r3, r7
 8001a96:	4443      	add	r3, r8
 8001a98:	9304      	str	r3, [sp, #16]
 8001a9a:	0c33      	lsrs	r3, r6, #16
 8001a9c:	0436      	lsls	r6, r6, #16
 8001a9e:	0c36      	lsrs	r6, r6, #16
 8001aa0:	4698      	mov	r8, r3
 8001aa2:	0033      	movs	r3, r6
 8001aa4:	4343      	muls	r3, r0
 8001aa6:	4699      	mov	r9, r3
 8001aa8:	4643      	mov	r3, r8
 8001aaa:	4343      	muls	r3, r0
 8001aac:	002f      	movs	r7, r5
 8001aae:	469a      	mov	sl, r3
 8001ab0:	4643      	mov	r3, r8
 8001ab2:	4377      	muls	r7, r6
 8001ab4:	435d      	muls	r5, r3
 8001ab6:	0c38      	lsrs	r0, r7, #16
 8001ab8:	444d      	add	r5, r9
 8001aba:	1945      	adds	r5, r0, r5
 8001abc:	45a9      	cmp	r9, r5
 8001abe:	d903      	bls.n	8001ac8 <__aeabi_dmul+0x168>
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	025b      	lsls	r3, r3, #9
 8001ac4:	4699      	mov	r9, r3
 8001ac6:	44ca      	add	sl, r9
 8001ac8:	043f      	lsls	r7, r7, #16
 8001aca:	0c28      	lsrs	r0, r5, #16
 8001acc:	0c3f      	lsrs	r7, r7, #16
 8001ace:	042d      	lsls	r5, r5, #16
 8001ad0:	19ed      	adds	r5, r5, r7
 8001ad2:	0c27      	lsrs	r7, r4, #16
 8001ad4:	0424      	lsls	r4, r4, #16
 8001ad6:	0c24      	lsrs	r4, r4, #16
 8001ad8:	0003      	movs	r3, r0
 8001ada:	0020      	movs	r0, r4
 8001adc:	4350      	muls	r0, r2
 8001ade:	437a      	muls	r2, r7
 8001ae0:	4691      	mov	r9, r2
 8001ae2:	003a      	movs	r2, r7
 8001ae4:	4453      	add	r3, sl
 8001ae6:	9305      	str	r3, [sp, #20]
 8001ae8:	0c03      	lsrs	r3, r0, #16
 8001aea:	469a      	mov	sl, r3
 8001aec:	434a      	muls	r2, r1
 8001aee:	4361      	muls	r1, r4
 8001af0:	4449      	add	r1, r9
 8001af2:	4451      	add	r1, sl
 8001af4:	44ab      	add	fp, r5
 8001af6:	4589      	cmp	r9, r1
 8001af8:	d903      	bls.n	8001b02 <__aeabi_dmul+0x1a2>
 8001afa:	2380      	movs	r3, #128	; 0x80
 8001afc:	025b      	lsls	r3, r3, #9
 8001afe:	4699      	mov	r9, r3
 8001b00:	444a      	add	r2, r9
 8001b02:	0400      	lsls	r0, r0, #16
 8001b04:	0c0b      	lsrs	r3, r1, #16
 8001b06:	0c00      	lsrs	r0, r0, #16
 8001b08:	0409      	lsls	r1, r1, #16
 8001b0a:	1809      	adds	r1, r1, r0
 8001b0c:	0020      	movs	r0, r4
 8001b0e:	4699      	mov	r9, r3
 8001b10:	4643      	mov	r3, r8
 8001b12:	4370      	muls	r0, r6
 8001b14:	435c      	muls	r4, r3
 8001b16:	437e      	muls	r6, r7
 8001b18:	435f      	muls	r7, r3
 8001b1a:	0c03      	lsrs	r3, r0, #16
 8001b1c:	4698      	mov	r8, r3
 8001b1e:	19a4      	adds	r4, r4, r6
 8001b20:	4444      	add	r4, r8
 8001b22:	444a      	add	r2, r9
 8001b24:	9703      	str	r7, [sp, #12]
 8001b26:	42a6      	cmp	r6, r4
 8001b28:	d904      	bls.n	8001b34 <__aeabi_dmul+0x1d4>
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	025b      	lsls	r3, r3, #9
 8001b2e:	4698      	mov	r8, r3
 8001b30:	4447      	add	r7, r8
 8001b32:	9703      	str	r7, [sp, #12]
 8001b34:	0423      	lsls	r3, r4, #16
 8001b36:	9e02      	ldr	r6, [sp, #8]
 8001b38:	469a      	mov	sl, r3
 8001b3a:	9b05      	ldr	r3, [sp, #20]
 8001b3c:	445e      	add	r6, fp
 8001b3e:	4698      	mov	r8, r3
 8001b40:	42ae      	cmp	r6, r5
 8001b42:	41ad      	sbcs	r5, r5
 8001b44:	1876      	adds	r6, r6, r1
 8001b46:	428e      	cmp	r6, r1
 8001b48:	4189      	sbcs	r1, r1
 8001b4a:	0400      	lsls	r0, r0, #16
 8001b4c:	0c00      	lsrs	r0, r0, #16
 8001b4e:	4450      	add	r0, sl
 8001b50:	4440      	add	r0, r8
 8001b52:	426d      	negs	r5, r5
 8001b54:	1947      	adds	r7, r0, r5
 8001b56:	46b8      	mov	r8, r7
 8001b58:	4693      	mov	fp, r2
 8001b5a:	4249      	negs	r1, r1
 8001b5c:	4689      	mov	r9, r1
 8001b5e:	44c3      	add	fp, r8
 8001b60:	44d9      	add	r9, fp
 8001b62:	4298      	cmp	r0, r3
 8001b64:	4180      	sbcs	r0, r0
 8001b66:	45a8      	cmp	r8, r5
 8001b68:	41ad      	sbcs	r5, r5
 8001b6a:	4593      	cmp	fp, r2
 8001b6c:	4192      	sbcs	r2, r2
 8001b6e:	4589      	cmp	r9, r1
 8001b70:	4189      	sbcs	r1, r1
 8001b72:	426d      	negs	r5, r5
 8001b74:	4240      	negs	r0, r0
 8001b76:	4328      	orrs	r0, r5
 8001b78:	0c24      	lsrs	r4, r4, #16
 8001b7a:	4252      	negs	r2, r2
 8001b7c:	4249      	negs	r1, r1
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	9b03      	ldr	r3, [sp, #12]
 8001b82:	1900      	adds	r0, r0, r4
 8001b84:	1880      	adds	r0, r0, r2
 8001b86:	18c7      	adds	r7, r0, r3
 8001b88:	464b      	mov	r3, r9
 8001b8a:	0ddc      	lsrs	r4, r3, #23
 8001b8c:	9b04      	ldr	r3, [sp, #16]
 8001b8e:	0275      	lsls	r5, r6, #9
 8001b90:	431d      	orrs	r5, r3
 8001b92:	1e6a      	subs	r2, r5, #1
 8001b94:	4195      	sbcs	r5, r2
 8001b96:	464b      	mov	r3, r9
 8001b98:	0df6      	lsrs	r6, r6, #23
 8001b9a:	027f      	lsls	r7, r7, #9
 8001b9c:	4335      	orrs	r5, r6
 8001b9e:	025a      	lsls	r2, r3, #9
 8001ba0:	433c      	orrs	r4, r7
 8001ba2:	4315      	orrs	r5, r2
 8001ba4:	01fb      	lsls	r3, r7, #7
 8001ba6:	d400      	bmi.n	8001baa <__aeabi_dmul+0x24a>
 8001ba8:	e11c      	b.n	8001de4 <__aeabi_dmul+0x484>
 8001baa:	2101      	movs	r1, #1
 8001bac:	086a      	lsrs	r2, r5, #1
 8001bae:	400d      	ands	r5, r1
 8001bb0:	4315      	orrs	r5, r2
 8001bb2:	07e2      	lsls	r2, r4, #31
 8001bb4:	4315      	orrs	r5, r2
 8001bb6:	0864      	lsrs	r4, r4, #1
 8001bb8:	494f      	ldr	r1, [pc, #316]	; (8001cf8 <__aeabi_dmul+0x398>)
 8001bba:	4461      	add	r1, ip
 8001bbc:	2900      	cmp	r1, #0
 8001bbe:	dc00      	bgt.n	8001bc2 <__aeabi_dmul+0x262>
 8001bc0:	e0b0      	b.n	8001d24 <__aeabi_dmul+0x3c4>
 8001bc2:	076b      	lsls	r3, r5, #29
 8001bc4:	d009      	beq.n	8001bda <__aeabi_dmul+0x27a>
 8001bc6:	220f      	movs	r2, #15
 8001bc8:	402a      	ands	r2, r5
 8001bca:	2a04      	cmp	r2, #4
 8001bcc:	d005      	beq.n	8001bda <__aeabi_dmul+0x27a>
 8001bce:	1d2a      	adds	r2, r5, #4
 8001bd0:	42aa      	cmp	r2, r5
 8001bd2:	41ad      	sbcs	r5, r5
 8001bd4:	426d      	negs	r5, r5
 8001bd6:	1964      	adds	r4, r4, r5
 8001bd8:	0015      	movs	r5, r2
 8001bda:	01e3      	lsls	r3, r4, #7
 8001bdc:	d504      	bpl.n	8001be8 <__aeabi_dmul+0x288>
 8001bde:	2180      	movs	r1, #128	; 0x80
 8001be0:	4a46      	ldr	r2, [pc, #280]	; (8001cfc <__aeabi_dmul+0x39c>)
 8001be2:	00c9      	lsls	r1, r1, #3
 8001be4:	4014      	ands	r4, r2
 8001be6:	4461      	add	r1, ip
 8001be8:	4a45      	ldr	r2, [pc, #276]	; (8001d00 <__aeabi_dmul+0x3a0>)
 8001bea:	4291      	cmp	r1, r2
 8001bec:	dd00      	ble.n	8001bf0 <__aeabi_dmul+0x290>
 8001bee:	e726      	b.n	8001a3e <__aeabi_dmul+0xde>
 8001bf0:	0762      	lsls	r2, r4, #29
 8001bf2:	08ed      	lsrs	r5, r5, #3
 8001bf4:	0264      	lsls	r4, r4, #9
 8001bf6:	0549      	lsls	r1, r1, #21
 8001bf8:	4315      	orrs	r5, r2
 8001bfa:	0b24      	lsrs	r4, r4, #12
 8001bfc:	0d4a      	lsrs	r2, r1, #21
 8001bfe:	e710      	b.n	8001a22 <__aeabi_dmul+0xc2>
 8001c00:	4652      	mov	r2, sl
 8001c02:	4332      	orrs	r2, r6
 8001c04:	d100      	bne.n	8001c08 <__aeabi_dmul+0x2a8>
 8001c06:	e07f      	b.n	8001d08 <__aeabi_dmul+0x3a8>
 8001c08:	2e00      	cmp	r6, #0
 8001c0a:	d100      	bne.n	8001c0e <__aeabi_dmul+0x2ae>
 8001c0c:	e0dc      	b.n	8001dc8 <__aeabi_dmul+0x468>
 8001c0e:	0030      	movs	r0, r6
 8001c10:	f000 fe10 	bl	8002834 <__clzsi2>
 8001c14:	0002      	movs	r2, r0
 8001c16:	3a0b      	subs	r2, #11
 8001c18:	231d      	movs	r3, #29
 8001c1a:	0001      	movs	r1, r0
 8001c1c:	1a9b      	subs	r3, r3, r2
 8001c1e:	4652      	mov	r2, sl
 8001c20:	3908      	subs	r1, #8
 8001c22:	40da      	lsrs	r2, r3
 8001c24:	408e      	lsls	r6, r1
 8001c26:	4316      	orrs	r6, r2
 8001c28:	4652      	mov	r2, sl
 8001c2a:	408a      	lsls	r2, r1
 8001c2c:	9b00      	ldr	r3, [sp, #0]
 8001c2e:	4935      	ldr	r1, [pc, #212]	; (8001d04 <__aeabi_dmul+0x3a4>)
 8001c30:	1a18      	subs	r0, r3, r0
 8001c32:	0003      	movs	r3, r0
 8001c34:	468c      	mov	ip, r1
 8001c36:	4463      	add	r3, ip
 8001c38:	2000      	movs	r0, #0
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	e6d3      	b.n	80019e6 <__aeabi_dmul+0x86>
 8001c3e:	0025      	movs	r5, r4
 8001c40:	4305      	orrs	r5, r0
 8001c42:	d04a      	beq.n	8001cda <__aeabi_dmul+0x37a>
 8001c44:	2c00      	cmp	r4, #0
 8001c46:	d100      	bne.n	8001c4a <__aeabi_dmul+0x2ea>
 8001c48:	e0b0      	b.n	8001dac <__aeabi_dmul+0x44c>
 8001c4a:	0020      	movs	r0, r4
 8001c4c:	f000 fdf2 	bl	8002834 <__clzsi2>
 8001c50:	0001      	movs	r1, r0
 8001c52:	0002      	movs	r2, r0
 8001c54:	390b      	subs	r1, #11
 8001c56:	231d      	movs	r3, #29
 8001c58:	0010      	movs	r0, r2
 8001c5a:	1a5b      	subs	r3, r3, r1
 8001c5c:	0031      	movs	r1, r6
 8001c5e:	0035      	movs	r5, r6
 8001c60:	3808      	subs	r0, #8
 8001c62:	4084      	lsls	r4, r0
 8001c64:	40d9      	lsrs	r1, r3
 8001c66:	4085      	lsls	r5, r0
 8001c68:	430c      	orrs	r4, r1
 8001c6a:	4826      	ldr	r0, [pc, #152]	; (8001d04 <__aeabi_dmul+0x3a4>)
 8001c6c:	1a83      	subs	r3, r0, r2
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	2300      	movs	r3, #0
 8001c72:	4699      	mov	r9, r3
 8001c74:	469b      	mov	fp, r3
 8001c76:	e697      	b.n	80019a8 <__aeabi_dmul+0x48>
 8001c78:	0005      	movs	r5, r0
 8001c7a:	4325      	orrs	r5, r4
 8001c7c:	d126      	bne.n	8001ccc <__aeabi_dmul+0x36c>
 8001c7e:	2208      	movs	r2, #8
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	2302      	movs	r3, #2
 8001c84:	2400      	movs	r4, #0
 8001c86:	4691      	mov	r9, r2
 8001c88:	469b      	mov	fp, r3
 8001c8a:	e68d      	b.n	80019a8 <__aeabi_dmul+0x48>
 8001c8c:	4652      	mov	r2, sl
 8001c8e:	9b00      	ldr	r3, [sp, #0]
 8001c90:	4332      	orrs	r2, r6
 8001c92:	d110      	bne.n	8001cb6 <__aeabi_dmul+0x356>
 8001c94:	4915      	ldr	r1, [pc, #84]	; (8001cec <__aeabi_dmul+0x38c>)
 8001c96:	2600      	movs	r6, #0
 8001c98:	468c      	mov	ip, r1
 8001c9a:	4463      	add	r3, ip
 8001c9c:	4649      	mov	r1, r9
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	4319      	orrs	r1, r3
 8001ca4:	4689      	mov	r9, r1
 8001ca6:	2002      	movs	r0, #2
 8001ca8:	e69d      	b.n	80019e6 <__aeabi_dmul+0x86>
 8001caa:	465b      	mov	r3, fp
 8001cac:	9701      	str	r7, [sp, #4]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d000      	beq.n	8001cb4 <__aeabi_dmul+0x354>
 8001cb2:	e6ad      	b.n	8001a10 <__aeabi_dmul+0xb0>
 8001cb4:	e6c3      	b.n	8001a3e <__aeabi_dmul+0xde>
 8001cb6:	4a0d      	ldr	r2, [pc, #52]	; (8001cec <__aeabi_dmul+0x38c>)
 8001cb8:	2003      	movs	r0, #3
 8001cba:	4694      	mov	ip, r2
 8001cbc:	4463      	add	r3, ip
 8001cbe:	464a      	mov	r2, r9
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	4691      	mov	r9, r2
 8001cc8:	4652      	mov	r2, sl
 8001cca:	e68c      	b.n	80019e6 <__aeabi_dmul+0x86>
 8001ccc:	220c      	movs	r2, #12
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	0005      	movs	r5, r0
 8001cd4:	4691      	mov	r9, r2
 8001cd6:	469b      	mov	fp, r3
 8001cd8:	e666      	b.n	80019a8 <__aeabi_dmul+0x48>
 8001cda:	2304      	movs	r3, #4
 8001cdc:	4699      	mov	r9, r3
 8001cde:	2300      	movs	r3, #0
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	2400      	movs	r4, #0
 8001ce6:	469b      	mov	fp, r3
 8001ce8:	e65e      	b.n	80019a8 <__aeabi_dmul+0x48>
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	000007ff 	.word	0x000007ff
 8001cf0:	fffffc01 	.word	0xfffffc01
 8001cf4:	0800e044 	.word	0x0800e044
 8001cf8:	000003ff 	.word	0x000003ff
 8001cfc:	feffffff 	.word	0xfeffffff
 8001d00:	000007fe 	.word	0x000007fe
 8001d04:	fffffc0d 	.word	0xfffffc0d
 8001d08:	4649      	mov	r1, r9
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	4319      	orrs	r1, r3
 8001d0e:	4689      	mov	r9, r1
 8001d10:	2600      	movs	r6, #0
 8001d12:	2001      	movs	r0, #1
 8001d14:	e667      	b.n	80019e6 <__aeabi_dmul+0x86>
 8001d16:	2300      	movs	r3, #0
 8001d18:	2480      	movs	r4, #128	; 0x80
 8001d1a:	2500      	movs	r5, #0
 8001d1c:	4a43      	ldr	r2, [pc, #268]	; (8001e2c <__aeabi_dmul+0x4cc>)
 8001d1e:	9301      	str	r3, [sp, #4]
 8001d20:	0324      	lsls	r4, r4, #12
 8001d22:	e67e      	b.n	8001a22 <__aeabi_dmul+0xc2>
 8001d24:	2001      	movs	r0, #1
 8001d26:	1a40      	subs	r0, r0, r1
 8001d28:	2838      	cmp	r0, #56	; 0x38
 8001d2a:	dd00      	ble.n	8001d2e <__aeabi_dmul+0x3ce>
 8001d2c:	e676      	b.n	8001a1c <__aeabi_dmul+0xbc>
 8001d2e:	281f      	cmp	r0, #31
 8001d30:	dd5b      	ble.n	8001dea <__aeabi_dmul+0x48a>
 8001d32:	221f      	movs	r2, #31
 8001d34:	0023      	movs	r3, r4
 8001d36:	4252      	negs	r2, r2
 8001d38:	1a51      	subs	r1, r2, r1
 8001d3a:	40cb      	lsrs	r3, r1
 8001d3c:	0019      	movs	r1, r3
 8001d3e:	2820      	cmp	r0, #32
 8001d40:	d003      	beq.n	8001d4a <__aeabi_dmul+0x3ea>
 8001d42:	4a3b      	ldr	r2, [pc, #236]	; (8001e30 <__aeabi_dmul+0x4d0>)
 8001d44:	4462      	add	r2, ip
 8001d46:	4094      	lsls	r4, r2
 8001d48:	4325      	orrs	r5, r4
 8001d4a:	1e6a      	subs	r2, r5, #1
 8001d4c:	4195      	sbcs	r5, r2
 8001d4e:	002a      	movs	r2, r5
 8001d50:	430a      	orrs	r2, r1
 8001d52:	2107      	movs	r1, #7
 8001d54:	000d      	movs	r5, r1
 8001d56:	2400      	movs	r4, #0
 8001d58:	4015      	ands	r5, r2
 8001d5a:	4211      	tst	r1, r2
 8001d5c:	d05b      	beq.n	8001e16 <__aeabi_dmul+0x4b6>
 8001d5e:	210f      	movs	r1, #15
 8001d60:	2400      	movs	r4, #0
 8001d62:	4011      	ands	r1, r2
 8001d64:	2904      	cmp	r1, #4
 8001d66:	d053      	beq.n	8001e10 <__aeabi_dmul+0x4b0>
 8001d68:	1d11      	adds	r1, r2, #4
 8001d6a:	4291      	cmp	r1, r2
 8001d6c:	4192      	sbcs	r2, r2
 8001d6e:	4252      	negs	r2, r2
 8001d70:	18a4      	adds	r4, r4, r2
 8001d72:	000a      	movs	r2, r1
 8001d74:	0223      	lsls	r3, r4, #8
 8001d76:	d54b      	bpl.n	8001e10 <__aeabi_dmul+0x4b0>
 8001d78:	2201      	movs	r2, #1
 8001d7a:	2400      	movs	r4, #0
 8001d7c:	2500      	movs	r5, #0
 8001d7e:	e650      	b.n	8001a22 <__aeabi_dmul+0xc2>
 8001d80:	2380      	movs	r3, #128	; 0x80
 8001d82:	031b      	lsls	r3, r3, #12
 8001d84:	421c      	tst	r4, r3
 8001d86:	d009      	beq.n	8001d9c <__aeabi_dmul+0x43c>
 8001d88:	421e      	tst	r6, r3
 8001d8a:	d107      	bne.n	8001d9c <__aeabi_dmul+0x43c>
 8001d8c:	4333      	orrs	r3, r6
 8001d8e:	031c      	lsls	r4, r3, #12
 8001d90:	4643      	mov	r3, r8
 8001d92:	0015      	movs	r5, r2
 8001d94:	0b24      	lsrs	r4, r4, #12
 8001d96:	4a25      	ldr	r2, [pc, #148]	; (8001e2c <__aeabi_dmul+0x4cc>)
 8001d98:	9301      	str	r3, [sp, #4]
 8001d9a:	e642      	b.n	8001a22 <__aeabi_dmul+0xc2>
 8001d9c:	2280      	movs	r2, #128	; 0x80
 8001d9e:	0312      	lsls	r2, r2, #12
 8001da0:	4314      	orrs	r4, r2
 8001da2:	0324      	lsls	r4, r4, #12
 8001da4:	4a21      	ldr	r2, [pc, #132]	; (8001e2c <__aeabi_dmul+0x4cc>)
 8001da6:	0b24      	lsrs	r4, r4, #12
 8001da8:	9701      	str	r7, [sp, #4]
 8001daa:	e63a      	b.n	8001a22 <__aeabi_dmul+0xc2>
 8001dac:	f000 fd42 	bl	8002834 <__clzsi2>
 8001db0:	0001      	movs	r1, r0
 8001db2:	0002      	movs	r2, r0
 8001db4:	3115      	adds	r1, #21
 8001db6:	3220      	adds	r2, #32
 8001db8:	291c      	cmp	r1, #28
 8001dba:	dc00      	bgt.n	8001dbe <__aeabi_dmul+0x45e>
 8001dbc:	e74b      	b.n	8001c56 <__aeabi_dmul+0x2f6>
 8001dbe:	0034      	movs	r4, r6
 8001dc0:	3808      	subs	r0, #8
 8001dc2:	2500      	movs	r5, #0
 8001dc4:	4084      	lsls	r4, r0
 8001dc6:	e750      	b.n	8001c6a <__aeabi_dmul+0x30a>
 8001dc8:	f000 fd34 	bl	8002834 <__clzsi2>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	001a      	movs	r2, r3
 8001dd0:	3215      	adds	r2, #21
 8001dd2:	3020      	adds	r0, #32
 8001dd4:	2a1c      	cmp	r2, #28
 8001dd6:	dc00      	bgt.n	8001dda <__aeabi_dmul+0x47a>
 8001dd8:	e71e      	b.n	8001c18 <__aeabi_dmul+0x2b8>
 8001dda:	4656      	mov	r6, sl
 8001ddc:	3b08      	subs	r3, #8
 8001dde:	2200      	movs	r2, #0
 8001de0:	409e      	lsls	r6, r3
 8001de2:	e723      	b.n	8001c2c <__aeabi_dmul+0x2cc>
 8001de4:	9b00      	ldr	r3, [sp, #0]
 8001de6:	469c      	mov	ip, r3
 8001de8:	e6e6      	b.n	8001bb8 <__aeabi_dmul+0x258>
 8001dea:	4912      	ldr	r1, [pc, #72]	; (8001e34 <__aeabi_dmul+0x4d4>)
 8001dec:	0022      	movs	r2, r4
 8001dee:	4461      	add	r1, ip
 8001df0:	002e      	movs	r6, r5
 8001df2:	408d      	lsls	r5, r1
 8001df4:	408a      	lsls	r2, r1
 8001df6:	40c6      	lsrs	r6, r0
 8001df8:	1e69      	subs	r1, r5, #1
 8001dfa:	418d      	sbcs	r5, r1
 8001dfc:	4332      	orrs	r2, r6
 8001dfe:	432a      	orrs	r2, r5
 8001e00:	40c4      	lsrs	r4, r0
 8001e02:	0753      	lsls	r3, r2, #29
 8001e04:	d0b6      	beq.n	8001d74 <__aeabi_dmul+0x414>
 8001e06:	210f      	movs	r1, #15
 8001e08:	4011      	ands	r1, r2
 8001e0a:	2904      	cmp	r1, #4
 8001e0c:	d1ac      	bne.n	8001d68 <__aeabi_dmul+0x408>
 8001e0e:	e7b1      	b.n	8001d74 <__aeabi_dmul+0x414>
 8001e10:	0765      	lsls	r5, r4, #29
 8001e12:	0264      	lsls	r4, r4, #9
 8001e14:	0b24      	lsrs	r4, r4, #12
 8001e16:	08d2      	lsrs	r2, r2, #3
 8001e18:	4315      	orrs	r5, r2
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	e601      	b.n	8001a22 <__aeabi_dmul+0xc2>
 8001e1e:	2280      	movs	r2, #128	; 0x80
 8001e20:	0312      	lsls	r2, r2, #12
 8001e22:	4314      	orrs	r4, r2
 8001e24:	0324      	lsls	r4, r4, #12
 8001e26:	4a01      	ldr	r2, [pc, #4]	; (8001e2c <__aeabi_dmul+0x4cc>)
 8001e28:	0b24      	lsrs	r4, r4, #12
 8001e2a:	e5fa      	b.n	8001a22 <__aeabi_dmul+0xc2>
 8001e2c:	000007ff 	.word	0x000007ff
 8001e30:	0000043e 	.word	0x0000043e
 8001e34:	0000041e 	.word	0x0000041e

08001e38 <__aeabi_dsub>:
 8001e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e3a:	4657      	mov	r7, sl
 8001e3c:	464e      	mov	r6, r9
 8001e3e:	4645      	mov	r5, r8
 8001e40:	46de      	mov	lr, fp
 8001e42:	b5e0      	push	{r5, r6, r7, lr}
 8001e44:	001e      	movs	r6, r3
 8001e46:	0017      	movs	r7, r2
 8001e48:	004a      	lsls	r2, r1, #1
 8001e4a:	030b      	lsls	r3, r1, #12
 8001e4c:	0d52      	lsrs	r2, r2, #21
 8001e4e:	0a5b      	lsrs	r3, r3, #9
 8001e50:	4690      	mov	r8, r2
 8001e52:	0f42      	lsrs	r2, r0, #29
 8001e54:	431a      	orrs	r2, r3
 8001e56:	0fcd      	lsrs	r5, r1, #31
 8001e58:	4ccd      	ldr	r4, [pc, #820]	; (8002190 <__aeabi_dsub+0x358>)
 8001e5a:	0331      	lsls	r1, r6, #12
 8001e5c:	00c3      	lsls	r3, r0, #3
 8001e5e:	4694      	mov	ip, r2
 8001e60:	0070      	lsls	r0, r6, #1
 8001e62:	0f7a      	lsrs	r2, r7, #29
 8001e64:	0a49      	lsrs	r1, r1, #9
 8001e66:	00ff      	lsls	r7, r7, #3
 8001e68:	469a      	mov	sl, r3
 8001e6a:	46b9      	mov	r9, r7
 8001e6c:	0d40      	lsrs	r0, r0, #21
 8001e6e:	0ff6      	lsrs	r6, r6, #31
 8001e70:	4311      	orrs	r1, r2
 8001e72:	42a0      	cmp	r0, r4
 8001e74:	d100      	bne.n	8001e78 <__aeabi_dsub+0x40>
 8001e76:	e0b1      	b.n	8001fdc <__aeabi_dsub+0x1a4>
 8001e78:	2201      	movs	r2, #1
 8001e7a:	4056      	eors	r6, r2
 8001e7c:	46b3      	mov	fp, r6
 8001e7e:	42b5      	cmp	r5, r6
 8001e80:	d100      	bne.n	8001e84 <__aeabi_dsub+0x4c>
 8001e82:	e088      	b.n	8001f96 <__aeabi_dsub+0x15e>
 8001e84:	4642      	mov	r2, r8
 8001e86:	1a12      	subs	r2, r2, r0
 8001e88:	2a00      	cmp	r2, #0
 8001e8a:	dc00      	bgt.n	8001e8e <__aeabi_dsub+0x56>
 8001e8c:	e0ae      	b.n	8001fec <__aeabi_dsub+0x1b4>
 8001e8e:	2800      	cmp	r0, #0
 8001e90:	d100      	bne.n	8001e94 <__aeabi_dsub+0x5c>
 8001e92:	e0c1      	b.n	8002018 <__aeabi_dsub+0x1e0>
 8001e94:	48be      	ldr	r0, [pc, #760]	; (8002190 <__aeabi_dsub+0x358>)
 8001e96:	4580      	cmp	r8, r0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x64>
 8001e9a:	e151      	b.n	8002140 <__aeabi_dsub+0x308>
 8001e9c:	2080      	movs	r0, #128	; 0x80
 8001e9e:	0400      	lsls	r0, r0, #16
 8001ea0:	4301      	orrs	r1, r0
 8001ea2:	2a38      	cmp	r2, #56	; 0x38
 8001ea4:	dd00      	ble.n	8001ea8 <__aeabi_dsub+0x70>
 8001ea6:	e17b      	b.n	80021a0 <__aeabi_dsub+0x368>
 8001ea8:	2a1f      	cmp	r2, #31
 8001eaa:	dd00      	ble.n	8001eae <__aeabi_dsub+0x76>
 8001eac:	e1ee      	b.n	800228c <__aeabi_dsub+0x454>
 8001eae:	2020      	movs	r0, #32
 8001eb0:	003e      	movs	r6, r7
 8001eb2:	1a80      	subs	r0, r0, r2
 8001eb4:	000c      	movs	r4, r1
 8001eb6:	40d6      	lsrs	r6, r2
 8001eb8:	40d1      	lsrs	r1, r2
 8001eba:	4087      	lsls	r7, r0
 8001ebc:	4662      	mov	r2, ip
 8001ebe:	4084      	lsls	r4, r0
 8001ec0:	1a52      	subs	r2, r2, r1
 8001ec2:	1e78      	subs	r0, r7, #1
 8001ec4:	4187      	sbcs	r7, r0
 8001ec6:	4694      	mov	ip, r2
 8001ec8:	4334      	orrs	r4, r6
 8001eca:	4327      	orrs	r7, r4
 8001ecc:	1bdc      	subs	r4, r3, r7
 8001ece:	42a3      	cmp	r3, r4
 8001ed0:	419b      	sbcs	r3, r3
 8001ed2:	4662      	mov	r2, ip
 8001ed4:	425b      	negs	r3, r3
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	4699      	mov	r9, r3
 8001eda:	464b      	mov	r3, r9
 8001edc:	021b      	lsls	r3, r3, #8
 8001ede:	d400      	bmi.n	8001ee2 <__aeabi_dsub+0xaa>
 8001ee0:	e118      	b.n	8002114 <__aeabi_dsub+0x2dc>
 8001ee2:	464b      	mov	r3, r9
 8001ee4:	0258      	lsls	r0, r3, #9
 8001ee6:	0a43      	lsrs	r3, r0, #9
 8001ee8:	4699      	mov	r9, r3
 8001eea:	464b      	mov	r3, r9
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d100      	bne.n	8001ef2 <__aeabi_dsub+0xba>
 8001ef0:	e137      	b.n	8002162 <__aeabi_dsub+0x32a>
 8001ef2:	4648      	mov	r0, r9
 8001ef4:	f000 fc9e 	bl	8002834 <__clzsi2>
 8001ef8:	0001      	movs	r1, r0
 8001efa:	3908      	subs	r1, #8
 8001efc:	2320      	movs	r3, #32
 8001efe:	0022      	movs	r2, r4
 8001f00:	4648      	mov	r0, r9
 8001f02:	1a5b      	subs	r3, r3, r1
 8001f04:	40da      	lsrs	r2, r3
 8001f06:	4088      	lsls	r0, r1
 8001f08:	408c      	lsls	r4, r1
 8001f0a:	4643      	mov	r3, r8
 8001f0c:	4310      	orrs	r0, r2
 8001f0e:	4588      	cmp	r8, r1
 8001f10:	dd00      	ble.n	8001f14 <__aeabi_dsub+0xdc>
 8001f12:	e136      	b.n	8002182 <__aeabi_dsub+0x34a>
 8001f14:	1ac9      	subs	r1, r1, r3
 8001f16:	1c4b      	adds	r3, r1, #1
 8001f18:	2b1f      	cmp	r3, #31
 8001f1a:	dd00      	ble.n	8001f1e <__aeabi_dsub+0xe6>
 8001f1c:	e0ea      	b.n	80020f4 <__aeabi_dsub+0x2bc>
 8001f1e:	2220      	movs	r2, #32
 8001f20:	0026      	movs	r6, r4
 8001f22:	1ad2      	subs	r2, r2, r3
 8001f24:	0001      	movs	r1, r0
 8001f26:	4094      	lsls	r4, r2
 8001f28:	40de      	lsrs	r6, r3
 8001f2a:	40d8      	lsrs	r0, r3
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	4091      	lsls	r1, r2
 8001f30:	1e62      	subs	r2, r4, #1
 8001f32:	4194      	sbcs	r4, r2
 8001f34:	4681      	mov	r9, r0
 8001f36:	4698      	mov	r8, r3
 8001f38:	4331      	orrs	r1, r6
 8001f3a:	430c      	orrs	r4, r1
 8001f3c:	0763      	lsls	r3, r4, #29
 8001f3e:	d009      	beq.n	8001f54 <__aeabi_dsub+0x11c>
 8001f40:	230f      	movs	r3, #15
 8001f42:	4023      	ands	r3, r4
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d005      	beq.n	8001f54 <__aeabi_dsub+0x11c>
 8001f48:	1d23      	adds	r3, r4, #4
 8001f4a:	42a3      	cmp	r3, r4
 8001f4c:	41a4      	sbcs	r4, r4
 8001f4e:	4264      	negs	r4, r4
 8001f50:	44a1      	add	r9, r4
 8001f52:	001c      	movs	r4, r3
 8001f54:	464b      	mov	r3, r9
 8001f56:	021b      	lsls	r3, r3, #8
 8001f58:	d400      	bmi.n	8001f5c <__aeabi_dsub+0x124>
 8001f5a:	e0de      	b.n	800211a <__aeabi_dsub+0x2e2>
 8001f5c:	4641      	mov	r1, r8
 8001f5e:	4b8c      	ldr	r3, [pc, #560]	; (8002190 <__aeabi_dsub+0x358>)
 8001f60:	3101      	adds	r1, #1
 8001f62:	4299      	cmp	r1, r3
 8001f64:	d100      	bne.n	8001f68 <__aeabi_dsub+0x130>
 8001f66:	e0e7      	b.n	8002138 <__aeabi_dsub+0x300>
 8001f68:	464b      	mov	r3, r9
 8001f6a:	488a      	ldr	r0, [pc, #552]	; (8002194 <__aeabi_dsub+0x35c>)
 8001f6c:	08e4      	lsrs	r4, r4, #3
 8001f6e:	4003      	ands	r3, r0
 8001f70:	0018      	movs	r0, r3
 8001f72:	0549      	lsls	r1, r1, #21
 8001f74:	075b      	lsls	r3, r3, #29
 8001f76:	0240      	lsls	r0, r0, #9
 8001f78:	4323      	orrs	r3, r4
 8001f7a:	0d4a      	lsrs	r2, r1, #21
 8001f7c:	0b04      	lsrs	r4, r0, #12
 8001f7e:	0512      	lsls	r2, r2, #20
 8001f80:	07ed      	lsls	r5, r5, #31
 8001f82:	4322      	orrs	r2, r4
 8001f84:	432a      	orrs	r2, r5
 8001f86:	0018      	movs	r0, r3
 8001f88:	0011      	movs	r1, r2
 8001f8a:	bcf0      	pop	{r4, r5, r6, r7}
 8001f8c:	46bb      	mov	fp, r7
 8001f8e:	46b2      	mov	sl, r6
 8001f90:	46a9      	mov	r9, r5
 8001f92:	46a0      	mov	r8, r4
 8001f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f96:	4642      	mov	r2, r8
 8001f98:	1a12      	subs	r2, r2, r0
 8001f9a:	2a00      	cmp	r2, #0
 8001f9c:	dd52      	ble.n	8002044 <__aeabi_dsub+0x20c>
 8001f9e:	2800      	cmp	r0, #0
 8001fa0:	d100      	bne.n	8001fa4 <__aeabi_dsub+0x16c>
 8001fa2:	e09c      	b.n	80020de <__aeabi_dsub+0x2a6>
 8001fa4:	45a0      	cmp	r8, r4
 8001fa6:	d100      	bne.n	8001faa <__aeabi_dsub+0x172>
 8001fa8:	e0ca      	b.n	8002140 <__aeabi_dsub+0x308>
 8001faa:	2080      	movs	r0, #128	; 0x80
 8001fac:	0400      	lsls	r0, r0, #16
 8001fae:	4301      	orrs	r1, r0
 8001fb0:	2a38      	cmp	r2, #56	; 0x38
 8001fb2:	dd00      	ble.n	8001fb6 <__aeabi_dsub+0x17e>
 8001fb4:	e149      	b.n	800224a <__aeabi_dsub+0x412>
 8001fb6:	2a1f      	cmp	r2, #31
 8001fb8:	dc00      	bgt.n	8001fbc <__aeabi_dsub+0x184>
 8001fba:	e197      	b.n	80022ec <__aeabi_dsub+0x4b4>
 8001fbc:	0010      	movs	r0, r2
 8001fbe:	000e      	movs	r6, r1
 8001fc0:	3820      	subs	r0, #32
 8001fc2:	40c6      	lsrs	r6, r0
 8001fc4:	2a20      	cmp	r2, #32
 8001fc6:	d004      	beq.n	8001fd2 <__aeabi_dsub+0x19a>
 8001fc8:	2040      	movs	r0, #64	; 0x40
 8001fca:	1a82      	subs	r2, r0, r2
 8001fcc:	4091      	lsls	r1, r2
 8001fce:	430f      	orrs	r7, r1
 8001fd0:	46b9      	mov	r9, r7
 8001fd2:	464c      	mov	r4, r9
 8001fd4:	1e62      	subs	r2, r4, #1
 8001fd6:	4194      	sbcs	r4, r2
 8001fd8:	4334      	orrs	r4, r6
 8001fda:	e13a      	b.n	8002252 <__aeabi_dsub+0x41a>
 8001fdc:	000a      	movs	r2, r1
 8001fde:	433a      	orrs	r2, r7
 8001fe0:	d028      	beq.n	8002034 <__aeabi_dsub+0x1fc>
 8001fe2:	46b3      	mov	fp, r6
 8001fe4:	42b5      	cmp	r5, r6
 8001fe6:	d02b      	beq.n	8002040 <__aeabi_dsub+0x208>
 8001fe8:	4a6b      	ldr	r2, [pc, #428]	; (8002198 <__aeabi_dsub+0x360>)
 8001fea:	4442      	add	r2, r8
 8001fec:	2a00      	cmp	r2, #0
 8001fee:	d05d      	beq.n	80020ac <__aeabi_dsub+0x274>
 8001ff0:	4642      	mov	r2, r8
 8001ff2:	4644      	mov	r4, r8
 8001ff4:	1a82      	subs	r2, r0, r2
 8001ff6:	2c00      	cmp	r4, #0
 8001ff8:	d000      	beq.n	8001ffc <__aeabi_dsub+0x1c4>
 8001ffa:	e0f5      	b.n	80021e8 <__aeabi_dsub+0x3b0>
 8001ffc:	4665      	mov	r5, ip
 8001ffe:	431d      	orrs	r5, r3
 8002000:	d100      	bne.n	8002004 <__aeabi_dsub+0x1cc>
 8002002:	e19c      	b.n	800233e <__aeabi_dsub+0x506>
 8002004:	1e55      	subs	r5, r2, #1
 8002006:	2a01      	cmp	r2, #1
 8002008:	d100      	bne.n	800200c <__aeabi_dsub+0x1d4>
 800200a:	e1fb      	b.n	8002404 <__aeabi_dsub+0x5cc>
 800200c:	4c60      	ldr	r4, [pc, #384]	; (8002190 <__aeabi_dsub+0x358>)
 800200e:	42a2      	cmp	r2, r4
 8002010:	d100      	bne.n	8002014 <__aeabi_dsub+0x1dc>
 8002012:	e1bd      	b.n	8002390 <__aeabi_dsub+0x558>
 8002014:	002a      	movs	r2, r5
 8002016:	e0f0      	b.n	80021fa <__aeabi_dsub+0x3c2>
 8002018:	0008      	movs	r0, r1
 800201a:	4338      	orrs	r0, r7
 800201c:	d100      	bne.n	8002020 <__aeabi_dsub+0x1e8>
 800201e:	e0c3      	b.n	80021a8 <__aeabi_dsub+0x370>
 8002020:	1e50      	subs	r0, r2, #1
 8002022:	2a01      	cmp	r2, #1
 8002024:	d100      	bne.n	8002028 <__aeabi_dsub+0x1f0>
 8002026:	e1a8      	b.n	800237a <__aeabi_dsub+0x542>
 8002028:	4c59      	ldr	r4, [pc, #356]	; (8002190 <__aeabi_dsub+0x358>)
 800202a:	42a2      	cmp	r2, r4
 800202c:	d100      	bne.n	8002030 <__aeabi_dsub+0x1f8>
 800202e:	e087      	b.n	8002140 <__aeabi_dsub+0x308>
 8002030:	0002      	movs	r2, r0
 8002032:	e736      	b.n	8001ea2 <__aeabi_dsub+0x6a>
 8002034:	2201      	movs	r2, #1
 8002036:	4056      	eors	r6, r2
 8002038:	46b3      	mov	fp, r6
 800203a:	42b5      	cmp	r5, r6
 800203c:	d000      	beq.n	8002040 <__aeabi_dsub+0x208>
 800203e:	e721      	b.n	8001e84 <__aeabi_dsub+0x4c>
 8002040:	4a55      	ldr	r2, [pc, #340]	; (8002198 <__aeabi_dsub+0x360>)
 8002042:	4442      	add	r2, r8
 8002044:	2a00      	cmp	r2, #0
 8002046:	d100      	bne.n	800204a <__aeabi_dsub+0x212>
 8002048:	e0b5      	b.n	80021b6 <__aeabi_dsub+0x37e>
 800204a:	4642      	mov	r2, r8
 800204c:	4644      	mov	r4, r8
 800204e:	1a82      	subs	r2, r0, r2
 8002050:	2c00      	cmp	r4, #0
 8002052:	d100      	bne.n	8002056 <__aeabi_dsub+0x21e>
 8002054:	e138      	b.n	80022c8 <__aeabi_dsub+0x490>
 8002056:	4e4e      	ldr	r6, [pc, #312]	; (8002190 <__aeabi_dsub+0x358>)
 8002058:	42b0      	cmp	r0, r6
 800205a:	d100      	bne.n	800205e <__aeabi_dsub+0x226>
 800205c:	e1de      	b.n	800241c <__aeabi_dsub+0x5e4>
 800205e:	2680      	movs	r6, #128	; 0x80
 8002060:	4664      	mov	r4, ip
 8002062:	0436      	lsls	r6, r6, #16
 8002064:	4334      	orrs	r4, r6
 8002066:	46a4      	mov	ip, r4
 8002068:	2a38      	cmp	r2, #56	; 0x38
 800206a:	dd00      	ble.n	800206e <__aeabi_dsub+0x236>
 800206c:	e196      	b.n	800239c <__aeabi_dsub+0x564>
 800206e:	2a1f      	cmp	r2, #31
 8002070:	dd00      	ble.n	8002074 <__aeabi_dsub+0x23c>
 8002072:	e224      	b.n	80024be <__aeabi_dsub+0x686>
 8002074:	2620      	movs	r6, #32
 8002076:	1ab4      	subs	r4, r6, r2
 8002078:	46a2      	mov	sl, r4
 800207a:	4664      	mov	r4, ip
 800207c:	4656      	mov	r6, sl
 800207e:	40b4      	lsls	r4, r6
 8002080:	46a1      	mov	r9, r4
 8002082:	001c      	movs	r4, r3
 8002084:	464e      	mov	r6, r9
 8002086:	40d4      	lsrs	r4, r2
 8002088:	4326      	orrs	r6, r4
 800208a:	0034      	movs	r4, r6
 800208c:	4656      	mov	r6, sl
 800208e:	40b3      	lsls	r3, r6
 8002090:	1e5e      	subs	r6, r3, #1
 8002092:	41b3      	sbcs	r3, r6
 8002094:	431c      	orrs	r4, r3
 8002096:	4663      	mov	r3, ip
 8002098:	40d3      	lsrs	r3, r2
 800209a:	18c9      	adds	r1, r1, r3
 800209c:	19e4      	adds	r4, r4, r7
 800209e:	42bc      	cmp	r4, r7
 80020a0:	41bf      	sbcs	r7, r7
 80020a2:	427f      	negs	r7, r7
 80020a4:	46b9      	mov	r9, r7
 80020a6:	4680      	mov	r8, r0
 80020a8:	4489      	add	r9, r1
 80020aa:	e0d8      	b.n	800225e <__aeabi_dsub+0x426>
 80020ac:	4640      	mov	r0, r8
 80020ae:	4c3b      	ldr	r4, [pc, #236]	; (800219c <__aeabi_dsub+0x364>)
 80020b0:	3001      	adds	r0, #1
 80020b2:	4220      	tst	r0, r4
 80020b4:	d000      	beq.n	80020b8 <__aeabi_dsub+0x280>
 80020b6:	e0b4      	b.n	8002222 <__aeabi_dsub+0x3ea>
 80020b8:	4640      	mov	r0, r8
 80020ba:	2800      	cmp	r0, #0
 80020bc:	d000      	beq.n	80020c0 <__aeabi_dsub+0x288>
 80020be:	e144      	b.n	800234a <__aeabi_dsub+0x512>
 80020c0:	4660      	mov	r0, ip
 80020c2:	4318      	orrs	r0, r3
 80020c4:	d100      	bne.n	80020c8 <__aeabi_dsub+0x290>
 80020c6:	e190      	b.n	80023ea <__aeabi_dsub+0x5b2>
 80020c8:	0008      	movs	r0, r1
 80020ca:	4338      	orrs	r0, r7
 80020cc:	d000      	beq.n	80020d0 <__aeabi_dsub+0x298>
 80020ce:	e1aa      	b.n	8002426 <__aeabi_dsub+0x5ee>
 80020d0:	4661      	mov	r1, ip
 80020d2:	08db      	lsrs	r3, r3, #3
 80020d4:	0749      	lsls	r1, r1, #29
 80020d6:	430b      	orrs	r3, r1
 80020d8:	4661      	mov	r1, ip
 80020da:	08cc      	lsrs	r4, r1, #3
 80020dc:	e027      	b.n	800212e <__aeabi_dsub+0x2f6>
 80020de:	0008      	movs	r0, r1
 80020e0:	4338      	orrs	r0, r7
 80020e2:	d061      	beq.n	80021a8 <__aeabi_dsub+0x370>
 80020e4:	1e50      	subs	r0, r2, #1
 80020e6:	2a01      	cmp	r2, #1
 80020e8:	d100      	bne.n	80020ec <__aeabi_dsub+0x2b4>
 80020ea:	e139      	b.n	8002360 <__aeabi_dsub+0x528>
 80020ec:	42a2      	cmp	r2, r4
 80020ee:	d027      	beq.n	8002140 <__aeabi_dsub+0x308>
 80020f0:	0002      	movs	r2, r0
 80020f2:	e75d      	b.n	8001fb0 <__aeabi_dsub+0x178>
 80020f4:	0002      	movs	r2, r0
 80020f6:	391f      	subs	r1, #31
 80020f8:	40ca      	lsrs	r2, r1
 80020fa:	0011      	movs	r1, r2
 80020fc:	2b20      	cmp	r3, #32
 80020fe:	d003      	beq.n	8002108 <__aeabi_dsub+0x2d0>
 8002100:	2240      	movs	r2, #64	; 0x40
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	4098      	lsls	r0, r3
 8002106:	4304      	orrs	r4, r0
 8002108:	1e63      	subs	r3, r4, #1
 800210a:	419c      	sbcs	r4, r3
 800210c:	2300      	movs	r3, #0
 800210e:	4699      	mov	r9, r3
 8002110:	4698      	mov	r8, r3
 8002112:	430c      	orrs	r4, r1
 8002114:	0763      	lsls	r3, r4, #29
 8002116:	d000      	beq.n	800211a <__aeabi_dsub+0x2e2>
 8002118:	e712      	b.n	8001f40 <__aeabi_dsub+0x108>
 800211a:	464b      	mov	r3, r9
 800211c:	464a      	mov	r2, r9
 800211e:	08e4      	lsrs	r4, r4, #3
 8002120:	075b      	lsls	r3, r3, #29
 8002122:	4323      	orrs	r3, r4
 8002124:	08d4      	lsrs	r4, r2, #3
 8002126:	4642      	mov	r2, r8
 8002128:	4919      	ldr	r1, [pc, #100]	; (8002190 <__aeabi_dsub+0x358>)
 800212a:	428a      	cmp	r2, r1
 800212c:	d00e      	beq.n	800214c <__aeabi_dsub+0x314>
 800212e:	0324      	lsls	r4, r4, #12
 8002130:	0552      	lsls	r2, r2, #21
 8002132:	0b24      	lsrs	r4, r4, #12
 8002134:	0d52      	lsrs	r2, r2, #21
 8002136:	e722      	b.n	8001f7e <__aeabi_dsub+0x146>
 8002138:	000a      	movs	r2, r1
 800213a:	2400      	movs	r4, #0
 800213c:	2300      	movs	r3, #0
 800213e:	e71e      	b.n	8001f7e <__aeabi_dsub+0x146>
 8002140:	08db      	lsrs	r3, r3, #3
 8002142:	4662      	mov	r2, ip
 8002144:	0752      	lsls	r2, r2, #29
 8002146:	4313      	orrs	r3, r2
 8002148:	4662      	mov	r2, ip
 800214a:	08d4      	lsrs	r4, r2, #3
 800214c:	001a      	movs	r2, r3
 800214e:	4322      	orrs	r2, r4
 8002150:	d100      	bne.n	8002154 <__aeabi_dsub+0x31c>
 8002152:	e1fc      	b.n	800254e <__aeabi_dsub+0x716>
 8002154:	2280      	movs	r2, #128	; 0x80
 8002156:	0312      	lsls	r2, r2, #12
 8002158:	4314      	orrs	r4, r2
 800215a:	0324      	lsls	r4, r4, #12
 800215c:	4a0c      	ldr	r2, [pc, #48]	; (8002190 <__aeabi_dsub+0x358>)
 800215e:	0b24      	lsrs	r4, r4, #12
 8002160:	e70d      	b.n	8001f7e <__aeabi_dsub+0x146>
 8002162:	0020      	movs	r0, r4
 8002164:	f000 fb66 	bl	8002834 <__clzsi2>
 8002168:	0001      	movs	r1, r0
 800216a:	3118      	adds	r1, #24
 800216c:	291f      	cmp	r1, #31
 800216e:	dc00      	bgt.n	8002172 <__aeabi_dsub+0x33a>
 8002170:	e6c4      	b.n	8001efc <__aeabi_dsub+0xc4>
 8002172:	3808      	subs	r0, #8
 8002174:	4084      	lsls	r4, r0
 8002176:	4643      	mov	r3, r8
 8002178:	0020      	movs	r0, r4
 800217a:	2400      	movs	r4, #0
 800217c:	4588      	cmp	r8, r1
 800217e:	dc00      	bgt.n	8002182 <__aeabi_dsub+0x34a>
 8002180:	e6c8      	b.n	8001f14 <__aeabi_dsub+0xdc>
 8002182:	4a04      	ldr	r2, [pc, #16]	; (8002194 <__aeabi_dsub+0x35c>)
 8002184:	1a5b      	subs	r3, r3, r1
 8002186:	4010      	ands	r0, r2
 8002188:	4698      	mov	r8, r3
 800218a:	4681      	mov	r9, r0
 800218c:	e6d6      	b.n	8001f3c <__aeabi_dsub+0x104>
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	000007ff 	.word	0x000007ff
 8002194:	ff7fffff 	.word	0xff7fffff
 8002198:	fffff801 	.word	0xfffff801
 800219c:	000007fe 	.word	0x000007fe
 80021a0:	430f      	orrs	r7, r1
 80021a2:	1e7a      	subs	r2, r7, #1
 80021a4:	4197      	sbcs	r7, r2
 80021a6:	e691      	b.n	8001ecc <__aeabi_dsub+0x94>
 80021a8:	4661      	mov	r1, ip
 80021aa:	08db      	lsrs	r3, r3, #3
 80021ac:	0749      	lsls	r1, r1, #29
 80021ae:	430b      	orrs	r3, r1
 80021b0:	4661      	mov	r1, ip
 80021b2:	08cc      	lsrs	r4, r1, #3
 80021b4:	e7b8      	b.n	8002128 <__aeabi_dsub+0x2f0>
 80021b6:	4640      	mov	r0, r8
 80021b8:	4cd3      	ldr	r4, [pc, #844]	; (8002508 <__aeabi_dsub+0x6d0>)
 80021ba:	3001      	adds	r0, #1
 80021bc:	4220      	tst	r0, r4
 80021be:	d000      	beq.n	80021c2 <__aeabi_dsub+0x38a>
 80021c0:	e0a2      	b.n	8002308 <__aeabi_dsub+0x4d0>
 80021c2:	4640      	mov	r0, r8
 80021c4:	2800      	cmp	r0, #0
 80021c6:	d000      	beq.n	80021ca <__aeabi_dsub+0x392>
 80021c8:	e101      	b.n	80023ce <__aeabi_dsub+0x596>
 80021ca:	4660      	mov	r0, ip
 80021cc:	4318      	orrs	r0, r3
 80021ce:	d100      	bne.n	80021d2 <__aeabi_dsub+0x39a>
 80021d0:	e15e      	b.n	8002490 <__aeabi_dsub+0x658>
 80021d2:	0008      	movs	r0, r1
 80021d4:	4338      	orrs	r0, r7
 80021d6:	d000      	beq.n	80021da <__aeabi_dsub+0x3a2>
 80021d8:	e15f      	b.n	800249a <__aeabi_dsub+0x662>
 80021da:	4661      	mov	r1, ip
 80021dc:	08db      	lsrs	r3, r3, #3
 80021de:	0749      	lsls	r1, r1, #29
 80021e0:	430b      	orrs	r3, r1
 80021e2:	4661      	mov	r1, ip
 80021e4:	08cc      	lsrs	r4, r1, #3
 80021e6:	e7a2      	b.n	800212e <__aeabi_dsub+0x2f6>
 80021e8:	4dc8      	ldr	r5, [pc, #800]	; (800250c <__aeabi_dsub+0x6d4>)
 80021ea:	42a8      	cmp	r0, r5
 80021ec:	d100      	bne.n	80021f0 <__aeabi_dsub+0x3b8>
 80021ee:	e0cf      	b.n	8002390 <__aeabi_dsub+0x558>
 80021f0:	2580      	movs	r5, #128	; 0x80
 80021f2:	4664      	mov	r4, ip
 80021f4:	042d      	lsls	r5, r5, #16
 80021f6:	432c      	orrs	r4, r5
 80021f8:	46a4      	mov	ip, r4
 80021fa:	2a38      	cmp	r2, #56	; 0x38
 80021fc:	dc56      	bgt.n	80022ac <__aeabi_dsub+0x474>
 80021fe:	2a1f      	cmp	r2, #31
 8002200:	dd00      	ble.n	8002204 <__aeabi_dsub+0x3cc>
 8002202:	e0d1      	b.n	80023a8 <__aeabi_dsub+0x570>
 8002204:	2520      	movs	r5, #32
 8002206:	001e      	movs	r6, r3
 8002208:	1aad      	subs	r5, r5, r2
 800220a:	4664      	mov	r4, ip
 800220c:	40ab      	lsls	r3, r5
 800220e:	40ac      	lsls	r4, r5
 8002210:	40d6      	lsrs	r6, r2
 8002212:	1e5d      	subs	r5, r3, #1
 8002214:	41ab      	sbcs	r3, r5
 8002216:	4334      	orrs	r4, r6
 8002218:	4323      	orrs	r3, r4
 800221a:	4664      	mov	r4, ip
 800221c:	40d4      	lsrs	r4, r2
 800221e:	1b09      	subs	r1, r1, r4
 8002220:	e049      	b.n	80022b6 <__aeabi_dsub+0x47e>
 8002222:	4660      	mov	r0, ip
 8002224:	1bdc      	subs	r4, r3, r7
 8002226:	1a46      	subs	r6, r0, r1
 8002228:	42a3      	cmp	r3, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	4240      	negs	r0, r0
 800222e:	4681      	mov	r9, r0
 8002230:	0030      	movs	r0, r6
 8002232:	464e      	mov	r6, r9
 8002234:	1b80      	subs	r0, r0, r6
 8002236:	4681      	mov	r9, r0
 8002238:	0200      	lsls	r0, r0, #8
 800223a:	d476      	bmi.n	800232a <__aeabi_dsub+0x4f2>
 800223c:	464b      	mov	r3, r9
 800223e:	4323      	orrs	r3, r4
 8002240:	d000      	beq.n	8002244 <__aeabi_dsub+0x40c>
 8002242:	e652      	b.n	8001eea <__aeabi_dsub+0xb2>
 8002244:	2400      	movs	r4, #0
 8002246:	2500      	movs	r5, #0
 8002248:	e771      	b.n	800212e <__aeabi_dsub+0x2f6>
 800224a:	4339      	orrs	r1, r7
 800224c:	000c      	movs	r4, r1
 800224e:	1e62      	subs	r2, r4, #1
 8002250:	4194      	sbcs	r4, r2
 8002252:	18e4      	adds	r4, r4, r3
 8002254:	429c      	cmp	r4, r3
 8002256:	419b      	sbcs	r3, r3
 8002258:	425b      	negs	r3, r3
 800225a:	4463      	add	r3, ip
 800225c:	4699      	mov	r9, r3
 800225e:	464b      	mov	r3, r9
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	d400      	bmi.n	8002266 <__aeabi_dsub+0x42e>
 8002264:	e756      	b.n	8002114 <__aeabi_dsub+0x2dc>
 8002266:	2301      	movs	r3, #1
 8002268:	469c      	mov	ip, r3
 800226a:	4ba8      	ldr	r3, [pc, #672]	; (800250c <__aeabi_dsub+0x6d4>)
 800226c:	44e0      	add	r8, ip
 800226e:	4598      	cmp	r8, r3
 8002270:	d038      	beq.n	80022e4 <__aeabi_dsub+0x4ac>
 8002272:	464b      	mov	r3, r9
 8002274:	48a6      	ldr	r0, [pc, #664]	; (8002510 <__aeabi_dsub+0x6d8>)
 8002276:	2201      	movs	r2, #1
 8002278:	4003      	ands	r3, r0
 800227a:	0018      	movs	r0, r3
 800227c:	0863      	lsrs	r3, r4, #1
 800227e:	4014      	ands	r4, r2
 8002280:	431c      	orrs	r4, r3
 8002282:	07c3      	lsls	r3, r0, #31
 8002284:	431c      	orrs	r4, r3
 8002286:	0843      	lsrs	r3, r0, #1
 8002288:	4699      	mov	r9, r3
 800228a:	e657      	b.n	8001f3c <__aeabi_dsub+0x104>
 800228c:	0010      	movs	r0, r2
 800228e:	000e      	movs	r6, r1
 8002290:	3820      	subs	r0, #32
 8002292:	40c6      	lsrs	r6, r0
 8002294:	2a20      	cmp	r2, #32
 8002296:	d004      	beq.n	80022a2 <__aeabi_dsub+0x46a>
 8002298:	2040      	movs	r0, #64	; 0x40
 800229a:	1a82      	subs	r2, r0, r2
 800229c:	4091      	lsls	r1, r2
 800229e:	430f      	orrs	r7, r1
 80022a0:	46b9      	mov	r9, r7
 80022a2:	464f      	mov	r7, r9
 80022a4:	1e7a      	subs	r2, r7, #1
 80022a6:	4197      	sbcs	r7, r2
 80022a8:	4337      	orrs	r7, r6
 80022aa:	e60f      	b.n	8001ecc <__aeabi_dsub+0x94>
 80022ac:	4662      	mov	r2, ip
 80022ae:	431a      	orrs	r2, r3
 80022b0:	0013      	movs	r3, r2
 80022b2:	1e5a      	subs	r2, r3, #1
 80022b4:	4193      	sbcs	r3, r2
 80022b6:	1afc      	subs	r4, r7, r3
 80022b8:	42a7      	cmp	r7, r4
 80022ba:	41bf      	sbcs	r7, r7
 80022bc:	427f      	negs	r7, r7
 80022be:	1bcb      	subs	r3, r1, r7
 80022c0:	4699      	mov	r9, r3
 80022c2:	465d      	mov	r5, fp
 80022c4:	4680      	mov	r8, r0
 80022c6:	e608      	b.n	8001eda <__aeabi_dsub+0xa2>
 80022c8:	4666      	mov	r6, ip
 80022ca:	431e      	orrs	r6, r3
 80022cc:	d100      	bne.n	80022d0 <__aeabi_dsub+0x498>
 80022ce:	e0be      	b.n	800244e <__aeabi_dsub+0x616>
 80022d0:	1e56      	subs	r6, r2, #1
 80022d2:	2a01      	cmp	r2, #1
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x4a0>
 80022d6:	e109      	b.n	80024ec <__aeabi_dsub+0x6b4>
 80022d8:	4c8c      	ldr	r4, [pc, #560]	; (800250c <__aeabi_dsub+0x6d4>)
 80022da:	42a2      	cmp	r2, r4
 80022dc:	d100      	bne.n	80022e0 <__aeabi_dsub+0x4a8>
 80022de:	e119      	b.n	8002514 <__aeabi_dsub+0x6dc>
 80022e0:	0032      	movs	r2, r6
 80022e2:	e6c1      	b.n	8002068 <__aeabi_dsub+0x230>
 80022e4:	4642      	mov	r2, r8
 80022e6:	2400      	movs	r4, #0
 80022e8:	2300      	movs	r3, #0
 80022ea:	e648      	b.n	8001f7e <__aeabi_dsub+0x146>
 80022ec:	2020      	movs	r0, #32
 80022ee:	000c      	movs	r4, r1
 80022f0:	1a80      	subs	r0, r0, r2
 80022f2:	003e      	movs	r6, r7
 80022f4:	4087      	lsls	r7, r0
 80022f6:	4084      	lsls	r4, r0
 80022f8:	40d6      	lsrs	r6, r2
 80022fa:	1e78      	subs	r0, r7, #1
 80022fc:	4187      	sbcs	r7, r0
 80022fe:	40d1      	lsrs	r1, r2
 8002300:	4334      	orrs	r4, r6
 8002302:	433c      	orrs	r4, r7
 8002304:	448c      	add	ip, r1
 8002306:	e7a4      	b.n	8002252 <__aeabi_dsub+0x41a>
 8002308:	4a80      	ldr	r2, [pc, #512]	; (800250c <__aeabi_dsub+0x6d4>)
 800230a:	4290      	cmp	r0, r2
 800230c:	d100      	bne.n	8002310 <__aeabi_dsub+0x4d8>
 800230e:	e0e9      	b.n	80024e4 <__aeabi_dsub+0x6ac>
 8002310:	19df      	adds	r7, r3, r7
 8002312:	429f      	cmp	r7, r3
 8002314:	419b      	sbcs	r3, r3
 8002316:	4461      	add	r1, ip
 8002318:	425b      	negs	r3, r3
 800231a:	18c9      	adds	r1, r1, r3
 800231c:	07cc      	lsls	r4, r1, #31
 800231e:	087f      	lsrs	r7, r7, #1
 8002320:	084b      	lsrs	r3, r1, #1
 8002322:	4699      	mov	r9, r3
 8002324:	4680      	mov	r8, r0
 8002326:	433c      	orrs	r4, r7
 8002328:	e6f4      	b.n	8002114 <__aeabi_dsub+0x2dc>
 800232a:	1afc      	subs	r4, r7, r3
 800232c:	42a7      	cmp	r7, r4
 800232e:	41bf      	sbcs	r7, r7
 8002330:	4663      	mov	r3, ip
 8002332:	427f      	negs	r7, r7
 8002334:	1ac9      	subs	r1, r1, r3
 8002336:	1bcb      	subs	r3, r1, r7
 8002338:	4699      	mov	r9, r3
 800233a:	465d      	mov	r5, fp
 800233c:	e5d5      	b.n	8001eea <__aeabi_dsub+0xb2>
 800233e:	08ff      	lsrs	r7, r7, #3
 8002340:	074b      	lsls	r3, r1, #29
 8002342:	465d      	mov	r5, fp
 8002344:	433b      	orrs	r3, r7
 8002346:	08cc      	lsrs	r4, r1, #3
 8002348:	e6ee      	b.n	8002128 <__aeabi_dsub+0x2f0>
 800234a:	4662      	mov	r2, ip
 800234c:	431a      	orrs	r2, r3
 800234e:	d000      	beq.n	8002352 <__aeabi_dsub+0x51a>
 8002350:	e082      	b.n	8002458 <__aeabi_dsub+0x620>
 8002352:	000b      	movs	r3, r1
 8002354:	433b      	orrs	r3, r7
 8002356:	d11b      	bne.n	8002390 <__aeabi_dsub+0x558>
 8002358:	2480      	movs	r4, #128	; 0x80
 800235a:	2500      	movs	r5, #0
 800235c:	0324      	lsls	r4, r4, #12
 800235e:	e6f9      	b.n	8002154 <__aeabi_dsub+0x31c>
 8002360:	19dc      	adds	r4, r3, r7
 8002362:	429c      	cmp	r4, r3
 8002364:	419b      	sbcs	r3, r3
 8002366:	4461      	add	r1, ip
 8002368:	4689      	mov	r9, r1
 800236a:	425b      	negs	r3, r3
 800236c:	4499      	add	r9, r3
 800236e:	464b      	mov	r3, r9
 8002370:	021b      	lsls	r3, r3, #8
 8002372:	d444      	bmi.n	80023fe <__aeabi_dsub+0x5c6>
 8002374:	2301      	movs	r3, #1
 8002376:	4698      	mov	r8, r3
 8002378:	e6cc      	b.n	8002114 <__aeabi_dsub+0x2dc>
 800237a:	1bdc      	subs	r4, r3, r7
 800237c:	4662      	mov	r2, ip
 800237e:	42a3      	cmp	r3, r4
 8002380:	419b      	sbcs	r3, r3
 8002382:	1a51      	subs	r1, r2, r1
 8002384:	425b      	negs	r3, r3
 8002386:	1acb      	subs	r3, r1, r3
 8002388:	4699      	mov	r9, r3
 800238a:	2301      	movs	r3, #1
 800238c:	4698      	mov	r8, r3
 800238e:	e5a4      	b.n	8001eda <__aeabi_dsub+0xa2>
 8002390:	08ff      	lsrs	r7, r7, #3
 8002392:	074b      	lsls	r3, r1, #29
 8002394:	465d      	mov	r5, fp
 8002396:	433b      	orrs	r3, r7
 8002398:	08cc      	lsrs	r4, r1, #3
 800239a:	e6d7      	b.n	800214c <__aeabi_dsub+0x314>
 800239c:	4662      	mov	r2, ip
 800239e:	431a      	orrs	r2, r3
 80023a0:	0014      	movs	r4, r2
 80023a2:	1e63      	subs	r3, r4, #1
 80023a4:	419c      	sbcs	r4, r3
 80023a6:	e679      	b.n	800209c <__aeabi_dsub+0x264>
 80023a8:	0015      	movs	r5, r2
 80023aa:	4664      	mov	r4, ip
 80023ac:	3d20      	subs	r5, #32
 80023ae:	40ec      	lsrs	r4, r5
 80023b0:	46a0      	mov	r8, r4
 80023b2:	2a20      	cmp	r2, #32
 80023b4:	d005      	beq.n	80023c2 <__aeabi_dsub+0x58a>
 80023b6:	2540      	movs	r5, #64	; 0x40
 80023b8:	4664      	mov	r4, ip
 80023ba:	1aaa      	subs	r2, r5, r2
 80023bc:	4094      	lsls	r4, r2
 80023be:	4323      	orrs	r3, r4
 80023c0:	469a      	mov	sl, r3
 80023c2:	4654      	mov	r4, sl
 80023c4:	1e63      	subs	r3, r4, #1
 80023c6:	419c      	sbcs	r4, r3
 80023c8:	4643      	mov	r3, r8
 80023ca:	4323      	orrs	r3, r4
 80023cc:	e773      	b.n	80022b6 <__aeabi_dsub+0x47e>
 80023ce:	4662      	mov	r2, ip
 80023d0:	431a      	orrs	r2, r3
 80023d2:	d023      	beq.n	800241c <__aeabi_dsub+0x5e4>
 80023d4:	000a      	movs	r2, r1
 80023d6:	433a      	orrs	r2, r7
 80023d8:	d000      	beq.n	80023dc <__aeabi_dsub+0x5a4>
 80023da:	e0a0      	b.n	800251e <__aeabi_dsub+0x6e6>
 80023dc:	4662      	mov	r2, ip
 80023de:	08db      	lsrs	r3, r3, #3
 80023e0:	0752      	lsls	r2, r2, #29
 80023e2:	4313      	orrs	r3, r2
 80023e4:	4662      	mov	r2, ip
 80023e6:	08d4      	lsrs	r4, r2, #3
 80023e8:	e6b0      	b.n	800214c <__aeabi_dsub+0x314>
 80023ea:	000b      	movs	r3, r1
 80023ec:	433b      	orrs	r3, r7
 80023ee:	d100      	bne.n	80023f2 <__aeabi_dsub+0x5ba>
 80023f0:	e728      	b.n	8002244 <__aeabi_dsub+0x40c>
 80023f2:	08ff      	lsrs	r7, r7, #3
 80023f4:	074b      	lsls	r3, r1, #29
 80023f6:	465d      	mov	r5, fp
 80023f8:	433b      	orrs	r3, r7
 80023fa:	08cc      	lsrs	r4, r1, #3
 80023fc:	e697      	b.n	800212e <__aeabi_dsub+0x2f6>
 80023fe:	2302      	movs	r3, #2
 8002400:	4698      	mov	r8, r3
 8002402:	e736      	b.n	8002272 <__aeabi_dsub+0x43a>
 8002404:	1afc      	subs	r4, r7, r3
 8002406:	42a7      	cmp	r7, r4
 8002408:	41bf      	sbcs	r7, r7
 800240a:	4663      	mov	r3, ip
 800240c:	427f      	negs	r7, r7
 800240e:	1ac9      	subs	r1, r1, r3
 8002410:	1bcb      	subs	r3, r1, r7
 8002412:	4699      	mov	r9, r3
 8002414:	2301      	movs	r3, #1
 8002416:	465d      	mov	r5, fp
 8002418:	4698      	mov	r8, r3
 800241a:	e55e      	b.n	8001eda <__aeabi_dsub+0xa2>
 800241c:	074b      	lsls	r3, r1, #29
 800241e:	08ff      	lsrs	r7, r7, #3
 8002420:	433b      	orrs	r3, r7
 8002422:	08cc      	lsrs	r4, r1, #3
 8002424:	e692      	b.n	800214c <__aeabi_dsub+0x314>
 8002426:	1bdc      	subs	r4, r3, r7
 8002428:	4660      	mov	r0, ip
 800242a:	42a3      	cmp	r3, r4
 800242c:	41b6      	sbcs	r6, r6
 800242e:	1a40      	subs	r0, r0, r1
 8002430:	4276      	negs	r6, r6
 8002432:	1b80      	subs	r0, r0, r6
 8002434:	4681      	mov	r9, r0
 8002436:	0200      	lsls	r0, r0, #8
 8002438:	d560      	bpl.n	80024fc <__aeabi_dsub+0x6c4>
 800243a:	1afc      	subs	r4, r7, r3
 800243c:	42a7      	cmp	r7, r4
 800243e:	41bf      	sbcs	r7, r7
 8002440:	4663      	mov	r3, ip
 8002442:	427f      	negs	r7, r7
 8002444:	1ac9      	subs	r1, r1, r3
 8002446:	1bcb      	subs	r3, r1, r7
 8002448:	4699      	mov	r9, r3
 800244a:	465d      	mov	r5, fp
 800244c:	e576      	b.n	8001f3c <__aeabi_dsub+0x104>
 800244e:	08ff      	lsrs	r7, r7, #3
 8002450:	074b      	lsls	r3, r1, #29
 8002452:	433b      	orrs	r3, r7
 8002454:	08cc      	lsrs	r4, r1, #3
 8002456:	e667      	b.n	8002128 <__aeabi_dsub+0x2f0>
 8002458:	000a      	movs	r2, r1
 800245a:	08db      	lsrs	r3, r3, #3
 800245c:	433a      	orrs	r2, r7
 800245e:	d100      	bne.n	8002462 <__aeabi_dsub+0x62a>
 8002460:	e66f      	b.n	8002142 <__aeabi_dsub+0x30a>
 8002462:	4662      	mov	r2, ip
 8002464:	0752      	lsls	r2, r2, #29
 8002466:	4313      	orrs	r3, r2
 8002468:	4662      	mov	r2, ip
 800246a:	08d4      	lsrs	r4, r2, #3
 800246c:	2280      	movs	r2, #128	; 0x80
 800246e:	0312      	lsls	r2, r2, #12
 8002470:	4214      	tst	r4, r2
 8002472:	d007      	beq.n	8002484 <__aeabi_dsub+0x64c>
 8002474:	08c8      	lsrs	r0, r1, #3
 8002476:	4210      	tst	r0, r2
 8002478:	d104      	bne.n	8002484 <__aeabi_dsub+0x64c>
 800247a:	465d      	mov	r5, fp
 800247c:	0004      	movs	r4, r0
 800247e:	08fb      	lsrs	r3, r7, #3
 8002480:	0749      	lsls	r1, r1, #29
 8002482:	430b      	orrs	r3, r1
 8002484:	0f5a      	lsrs	r2, r3, #29
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	08db      	lsrs	r3, r3, #3
 800248a:	0752      	lsls	r2, r2, #29
 800248c:	4313      	orrs	r3, r2
 800248e:	e65d      	b.n	800214c <__aeabi_dsub+0x314>
 8002490:	074b      	lsls	r3, r1, #29
 8002492:	08ff      	lsrs	r7, r7, #3
 8002494:	433b      	orrs	r3, r7
 8002496:	08cc      	lsrs	r4, r1, #3
 8002498:	e649      	b.n	800212e <__aeabi_dsub+0x2f6>
 800249a:	19dc      	adds	r4, r3, r7
 800249c:	429c      	cmp	r4, r3
 800249e:	419b      	sbcs	r3, r3
 80024a0:	4461      	add	r1, ip
 80024a2:	4689      	mov	r9, r1
 80024a4:	425b      	negs	r3, r3
 80024a6:	4499      	add	r9, r3
 80024a8:	464b      	mov	r3, r9
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	d400      	bmi.n	80024b0 <__aeabi_dsub+0x678>
 80024ae:	e631      	b.n	8002114 <__aeabi_dsub+0x2dc>
 80024b0:	464a      	mov	r2, r9
 80024b2:	4b17      	ldr	r3, [pc, #92]	; (8002510 <__aeabi_dsub+0x6d8>)
 80024b4:	401a      	ands	r2, r3
 80024b6:	2301      	movs	r3, #1
 80024b8:	4691      	mov	r9, r2
 80024ba:	4698      	mov	r8, r3
 80024bc:	e62a      	b.n	8002114 <__aeabi_dsub+0x2dc>
 80024be:	0016      	movs	r6, r2
 80024c0:	4664      	mov	r4, ip
 80024c2:	3e20      	subs	r6, #32
 80024c4:	40f4      	lsrs	r4, r6
 80024c6:	46a0      	mov	r8, r4
 80024c8:	2a20      	cmp	r2, #32
 80024ca:	d005      	beq.n	80024d8 <__aeabi_dsub+0x6a0>
 80024cc:	2640      	movs	r6, #64	; 0x40
 80024ce:	4664      	mov	r4, ip
 80024d0:	1ab2      	subs	r2, r6, r2
 80024d2:	4094      	lsls	r4, r2
 80024d4:	4323      	orrs	r3, r4
 80024d6:	469a      	mov	sl, r3
 80024d8:	4654      	mov	r4, sl
 80024da:	1e63      	subs	r3, r4, #1
 80024dc:	419c      	sbcs	r4, r3
 80024de:	4643      	mov	r3, r8
 80024e0:	431c      	orrs	r4, r3
 80024e2:	e5db      	b.n	800209c <__aeabi_dsub+0x264>
 80024e4:	0002      	movs	r2, r0
 80024e6:	2400      	movs	r4, #0
 80024e8:	2300      	movs	r3, #0
 80024ea:	e548      	b.n	8001f7e <__aeabi_dsub+0x146>
 80024ec:	19dc      	adds	r4, r3, r7
 80024ee:	42bc      	cmp	r4, r7
 80024f0:	41bf      	sbcs	r7, r7
 80024f2:	4461      	add	r1, ip
 80024f4:	4689      	mov	r9, r1
 80024f6:	427f      	negs	r7, r7
 80024f8:	44b9      	add	r9, r7
 80024fa:	e738      	b.n	800236e <__aeabi_dsub+0x536>
 80024fc:	464b      	mov	r3, r9
 80024fe:	4323      	orrs	r3, r4
 8002500:	d100      	bne.n	8002504 <__aeabi_dsub+0x6cc>
 8002502:	e69f      	b.n	8002244 <__aeabi_dsub+0x40c>
 8002504:	e606      	b.n	8002114 <__aeabi_dsub+0x2dc>
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	000007fe 	.word	0x000007fe
 800250c:	000007ff 	.word	0x000007ff
 8002510:	ff7fffff 	.word	0xff7fffff
 8002514:	08ff      	lsrs	r7, r7, #3
 8002516:	074b      	lsls	r3, r1, #29
 8002518:	433b      	orrs	r3, r7
 800251a:	08cc      	lsrs	r4, r1, #3
 800251c:	e616      	b.n	800214c <__aeabi_dsub+0x314>
 800251e:	4662      	mov	r2, ip
 8002520:	08db      	lsrs	r3, r3, #3
 8002522:	0752      	lsls	r2, r2, #29
 8002524:	4313      	orrs	r3, r2
 8002526:	4662      	mov	r2, ip
 8002528:	08d4      	lsrs	r4, r2, #3
 800252a:	2280      	movs	r2, #128	; 0x80
 800252c:	0312      	lsls	r2, r2, #12
 800252e:	4214      	tst	r4, r2
 8002530:	d007      	beq.n	8002542 <__aeabi_dsub+0x70a>
 8002532:	08c8      	lsrs	r0, r1, #3
 8002534:	4210      	tst	r0, r2
 8002536:	d104      	bne.n	8002542 <__aeabi_dsub+0x70a>
 8002538:	465d      	mov	r5, fp
 800253a:	0004      	movs	r4, r0
 800253c:	08fb      	lsrs	r3, r7, #3
 800253e:	0749      	lsls	r1, r1, #29
 8002540:	430b      	orrs	r3, r1
 8002542:	0f5a      	lsrs	r2, r3, #29
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	0752      	lsls	r2, r2, #29
 8002548:	08db      	lsrs	r3, r3, #3
 800254a:	4313      	orrs	r3, r2
 800254c:	e5fe      	b.n	800214c <__aeabi_dsub+0x314>
 800254e:	2300      	movs	r3, #0
 8002550:	4a01      	ldr	r2, [pc, #4]	; (8002558 <__aeabi_dsub+0x720>)
 8002552:	001c      	movs	r4, r3
 8002554:	e513      	b.n	8001f7e <__aeabi_dsub+0x146>
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	000007ff 	.word	0x000007ff

0800255c <__aeabi_dcmpun>:
 800255c:	b570      	push	{r4, r5, r6, lr}
 800255e:	0005      	movs	r5, r0
 8002560:	480c      	ldr	r0, [pc, #48]	; (8002594 <__aeabi_dcmpun+0x38>)
 8002562:	031c      	lsls	r4, r3, #12
 8002564:	0016      	movs	r6, r2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	030a      	lsls	r2, r1, #12
 800256a:	0049      	lsls	r1, r1, #1
 800256c:	0b12      	lsrs	r2, r2, #12
 800256e:	0d49      	lsrs	r1, r1, #21
 8002570:	0b24      	lsrs	r4, r4, #12
 8002572:	0d5b      	lsrs	r3, r3, #21
 8002574:	4281      	cmp	r1, r0
 8002576:	d008      	beq.n	800258a <__aeabi_dcmpun+0x2e>
 8002578:	4a06      	ldr	r2, [pc, #24]	; (8002594 <__aeabi_dcmpun+0x38>)
 800257a:	2000      	movs	r0, #0
 800257c:	4293      	cmp	r3, r2
 800257e:	d103      	bne.n	8002588 <__aeabi_dcmpun+0x2c>
 8002580:	0020      	movs	r0, r4
 8002582:	4330      	orrs	r0, r6
 8002584:	1e43      	subs	r3, r0, #1
 8002586:	4198      	sbcs	r0, r3
 8002588:	bd70      	pop	{r4, r5, r6, pc}
 800258a:	2001      	movs	r0, #1
 800258c:	432a      	orrs	r2, r5
 800258e:	d1fb      	bne.n	8002588 <__aeabi_dcmpun+0x2c>
 8002590:	e7f2      	b.n	8002578 <__aeabi_dcmpun+0x1c>
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	000007ff 	.word	0x000007ff

08002598 <__aeabi_d2iz>:
 8002598:	000a      	movs	r2, r1
 800259a:	b530      	push	{r4, r5, lr}
 800259c:	4c13      	ldr	r4, [pc, #76]	; (80025ec <__aeabi_d2iz+0x54>)
 800259e:	0053      	lsls	r3, r2, #1
 80025a0:	0309      	lsls	r1, r1, #12
 80025a2:	0005      	movs	r5, r0
 80025a4:	0b09      	lsrs	r1, r1, #12
 80025a6:	2000      	movs	r0, #0
 80025a8:	0d5b      	lsrs	r3, r3, #21
 80025aa:	0fd2      	lsrs	r2, r2, #31
 80025ac:	42a3      	cmp	r3, r4
 80025ae:	dd04      	ble.n	80025ba <__aeabi_d2iz+0x22>
 80025b0:	480f      	ldr	r0, [pc, #60]	; (80025f0 <__aeabi_d2iz+0x58>)
 80025b2:	4283      	cmp	r3, r0
 80025b4:	dd02      	ble.n	80025bc <__aeabi_d2iz+0x24>
 80025b6:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <__aeabi_d2iz+0x5c>)
 80025b8:	18d0      	adds	r0, r2, r3
 80025ba:	bd30      	pop	{r4, r5, pc}
 80025bc:	2080      	movs	r0, #128	; 0x80
 80025be:	0340      	lsls	r0, r0, #13
 80025c0:	4301      	orrs	r1, r0
 80025c2:	480d      	ldr	r0, [pc, #52]	; (80025f8 <__aeabi_d2iz+0x60>)
 80025c4:	1ac0      	subs	r0, r0, r3
 80025c6:	281f      	cmp	r0, #31
 80025c8:	dd08      	ble.n	80025dc <__aeabi_d2iz+0x44>
 80025ca:	480c      	ldr	r0, [pc, #48]	; (80025fc <__aeabi_d2iz+0x64>)
 80025cc:	1ac3      	subs	r3, r0, r3
 80025ce:	40d9      	lsrs	r1, r3
 80025d0:	000b      	movs	r3, r1
 80025d2:	4258      	negs	r0, r3
 80025d4:	2a00      	cmp	r2, #0
 80025d6:	d1f0      	bne.n	80025ba <__aeabi_d2iz+0x22>
 80025d8:	0018      	movs	r0, r3
 80025da:	e7ee      	b.n	80025ba <__aeabi_d2iz+0x22>
 80025dc:	4c08      	ldr	r4, [pc, #32]	; (8002600 <__aeabi_d2iz+0x68>)
 80025de:	40c5      	lsrs	r5, r0
 80025e0:	46a4      	mov	ip, r4
 80025e2:	4463      	add	r3, ip
 80025e4:	4099      	lsls	r1, r3
 80025e6:	000b      	movs	r3, r1
 80025e8:	432b      	orrs	r3, r5
 80025ea:	e7f2      	b.n	80025d2 <__aeabi_d2iz+0x3a>
 80025ec:	000003fe 	.word	0x000003fe
 80025f0:	0000041d 	.word	0x0000041d
 80025f4:	7fffffff 	.word	0x7fffffff
 80025f8:	00000433 	.word	0x00000433
 80025fc:	00000413 	.word	0x00000413
 8002600:	fffffbed 	.word	0xfffffbed

08002604 <__aeabi_i2d>:
 8002604:	b570      	push	{r4, r5, r6, lr}
 8002606:	2800      	cmp	r0, #0
 8002608:	d016      	beq.n	8002638 <__aeabi_i2d+0x34>
 800260a:	17c3      	asrs	r3, r0, #31
 800260c:	18c5      	adds	r5, r0, r3
 800260e:	405d      	eors	r5, r3
 8002610:	0fc4      	lsrs	r4, r0, #31
 8002612:	0028      	movs	r0, r5
 8002614:	f000 f90e 	bl	8002834 <__clzsi2>
 8002618:	4a11      	ldr	r2, [pc, #68]	; (8002660 <__aeabi_i2d+0x5c>)
 800261a:	1a12      	subs	r2, r2, r0
 800261c:	280a      	cmp	r0, #10
 800261e:	dc16      	bgt.n	800264e <__aeabi_i2d+0x4a>
 8002620:	0003      	movs	r3, r0
 8002622:	002e      	movs	r6, r5
 8002624:	3315      	adds	r3, #21
 8002626:	409e      	lsls	r6, r3
 8002628:	230b      	movs	r3, #11
 800262a:	1a18      	subs	r0, r3, r0
 800262c:	40c5      	lsrs	r5, r0
 800262e:	0552      	lsls	r2, r2, #21
 8002630:	032d      	lsls	r5, r5, #12
 8002632:	0b2d      	lsrs	r5, r5, #12
 8002634:	0d53      	lsrs	r3, r2, #21
 8002636:	e003      	b.n	8002640 <__aeabi_i2d+0x3c>
 8002638:	2400      	movs	r4, #0
 800263a:	2300      	movs	r3, #0
 800263c:	2500      	movs	r5, #0
 800263e:	2600      	movs	r6, #0
 8002640:	051b      	lsls	r3, r3, #20
 8002642:	432b      	orrs	r3, r5
 8002644:	07e4      	lsls	r4, r4, #31
 8002646:	4323      	orrs	r3, r4
 8002648:	0030      	movs	r0, r6
 800264a:	0019      	movs	r1, r3
 800264c:	bd70      	pop	{r4, r5, r6, pc}
 800264e:	380b      	subs	r0, #11
 8002650:	4085      	lsls	r5, r0
 8002652:	0552      	lsls	r2, r2, #21
 8002654:	032d      	lsls	r5, r5, #12
 8002656:	2600      	movs	r6, #0
 8002658:	0b2d      	lsrs	r5, r5, #12
 800265a:	0d53      	lsrs	r3, r2, #21
 800265c:	e7f0      	b.n	8002640 <__aeabi_i2d+0x3c>
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	0000041e 	.word	0x0000041e

08002664 <__aeabi_ui2d>:
 8002664:	b510      	push	{r4, lr}
 8002666:	1e04      	subs	r4, r0, #0
 8002668:	d010      	beq.n	800268c <__aeabi_ui2d+0x28>
 800266a:	f000 f8e3 	bl	8002834 <__clzsi2>
 800266e:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <__aeabi_ui2d+0x48>)
 8002670:	1a1b      	subs	r3, r3, r0
 8002672:	280a      	cmp	r0, #10
 8002674:	dc11      	bgt.n	800269a <__aeabi_ui2d+0x36>
 8002676:	220b      	movs	r2, #11
 8002678:	0021      	movs	r1, r4
 800267a:	1a12      	subs	r2, r2, r0
 800267c:	40d1      	lsrs	r1, r2
 800267e:	3015      	adds	r0, #21
 8002680:	030a      	lsls	r2, r1, #12
 8002682:	055b      	lsls	r3, r3, #21
 8002684:	4084      	lsls	r4, r0
 8002686:	0b12      	lsrs	r2, r2, #12
 8002688:	0d5b      	lsrs	r3, r3, #21
 800268a:	e001      	b.n	8002690 <__aeabi_ui2d+0x2c>
 800268c:	2300      	movs	r3, #0
 800268e:	2200      	movs	r2, #0
 8002690:	051b      	lsls	r3, r3, #20
 8002692:	4313      	orrs	r3, r2
 8002694:	0020      	movs	r0, r4
 8002696:	0019      	movs	r1, r3
 8002698:	bd10      	pop	{r4, pc}
 800269a:	0022      	movs	r2, r4
 800269c:	380b      	subs	r0, #11
 800269e:	4082      	lsls	r2, r0
 80026a0:	055b      	lsls	r3, r3, #21
 80026a2:	0312      	lsls	r2, r2, #12
 80026a4:	2400      	movs	r4, #0
 80026a6:	0b12      	lsrs	r2, r2, #12
 80026a8:	0d5b      	lsrs	r3, r3, #21
 80026aa:	e7f1      	b.n	8002690 <__aeabi_ui2d+0x2c>
 80026ac:	0000041e 	.word	0x0000041e

080026b0 <__aeabi_d2f>:
 80026b0:	0002      	movs	r2, r0
 80026b2:	004b      	lsls	r3, r1, #1
 80026b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026b6:	0d5b      	lsrs	r3, r3, #21
 80026b8:	030c      	lsls	r4, r1, #12
 80026ba:	4e3d      	ldr	r6, [pc, #244]	; (80027b0 <__aeabi_d2f+0x100>)
 80026bc:	0a64      	lsrs	r4, r4, #9
 80026be:	0f40      	lsrs	r0, r0, #29
 80026c0:	1c5f      	adds	r7, r3, #1
 80026c2:	0fc9      	lsrs	r1, r1, #31
 80026c4:	4304      	orrs	r4, r0
 80026c6:	00d5      	lsls	r5, r2, #3
 80026c8:	4237      	tst	r7, r6
 80026ca:	d00a      	beq.n	80026e2 <__aeabi_d2f+0x32>
 80026cc:	4839      	ldr	r0, [pc, #228]	; (80027b4 <__aeabi_d2f+0x104>)
 80026ce:	181e      	adds	r6, r3, r0
 80026d0:	2efe      	cmp	r6, #254	; 0xfe
 80026d2:	dd16      	ble.n	8002702 <__aeabi_d2f+0x52>
 80026d4:	20ff      	movs	r0, #255	; 0xff
 80026d6:	2400      	movs	r4, #0
 80026d8:	05c0      	lsls	r0, r0, #23
 80026da:	4320      	orrs	r0, r4
 80026dc:	07c9      	lsls	r1, r1, #31
 80026de:	4308      	orrs	r0, r1
 80026e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d106      	bne.n	80026f4 <__aeabi_d2f+0x44>
 80026e6:	432c      	orrs	r4, r5
 80026e8:	d026      	beq.n	8002738 <__aeabi_d2f+0x88>
 80026ea:	2205      	movs	r2, #5
 80026ec:	0192      	lsls	r2, r2, #6
 80026ee:	0a54      	lsrs	r4, r2, #9
 80026f0:	b2d8      	uxtb	r0, r3
 80026f2:	e7f1      	b.n	80026d8 <__aeabi_d2f+0x28>
 80026f4:	4325      	orrs	r5, r4
 80026f6:	d0ed      	beq.n	80026d4 <__aeabi_d2f+0x24>
 80026f8:	2080      	movs	r0, #128	; 0x80
 80026fa:	03c0      	lsls	r0, r0, #15
 80026fc:	4304      	orrs	r4, r0
 80026fe:	20ff      	movs	r0, #255	; 0xff
 8002700:	e7ea      	b.n	80026d8 <__aeabi_d2f+0x28>
 8002702:	2e00      	cmp	r6, #0
 8002704:	dd1b      	ble.n	800273e <__aeabi_d2f+0x8e>
 8002706:	0192      	lsls	r2, r2, #6
 8002708:	1e53      	subs	r3, r2, #1
 800270a:	419a      	sbcs	r2, r3
 800270c:	00e4      	lsls	r4, r4, #3
 800270e:	0f6d      	lsrs	r5, r5, #29
 8002710:	4322      	orrs	r2, r4
 8002712:	432a      	orrs	r2, r5
 8002714:	0753      	lsls	r3, r2, #29
 8002716:	d048      	beq.n	80027aa <__aeabi_d2f+0xfa>
 8002718:	230f      	movs	r3, #15
 800271a:	4013      	ands	r3, r2
 800271c:	2b04      	cmp	r3, #4
 800271e:	d000      	beq.n	8002722 <__aeabi_d2f+0x72>
 8002720:	3204      	adds	r2, #4
 8002722:	2380      	movs	r3, #128	; 0x80
 8002724:	04db      	lsls	r3, r3, #19
 8002726:	4013      	ands	r3, r2
 8002728:	d03f      	beq.n	80027aa <__aeabi_d2f+0xfa>
 800272a:	1c70      	adds	r0, r6, #1
 800272c:	2efe      	cmp	r6, #254	; 0xfe
 800272e:	d0d1      	beq.n	80026d4 <__aeabi_d2f+0x24>
 8002730:	0192      	lsls	r2, r2, #6
 8002732:	0a54      	lsrs	r4, r2, #9
 8002734:	b2c0      	uxtb	r0, r0
 8002736:	e7cf      	b.n	80026d8 <__aeabi_d2f+0x28>
 8002738:	2000      	movs	r0, #0
 800273a:	2400      	movs	r4, #0
 800273c:	e7cc      	b.n	80026d8 <__aeabi_d2f+0x28>
 800273e:	0032      	movs	r2, r6
 8002740:	3217      	adds	r2, #23
 8002742:	db22      	blt.n	800278a <__aeabi_d2f+0xda>
 8002744:	2080      	movs	r0, #128	; 0x80
 8002746:	0400      	lsls	r0, r0, #16
 8002748:	4320      	orrs	r0, r4
 800274a:	241e      	movs	r4, #30
 800274c:	1ba4      	subs	r4, r4, r6
 800274e:	2c1f      	cmp	r4, #31
 8002750:	dd1d      	ble.n	800278e <__aeabi_d2f+0xde>
 8002752:	2202      	movs	r2, #2
 8002754:	4252      	negs	r2, r2
 8002756:	1b96      	subs	r6, r2, r6
 8002758:	0002      	movs	r2, r0
 800275a:	40f2      	lsrs	r2, r6
 800275c:	0016      	movs	r6, r2
 800275e:	2c20      	cmp	r4, #32
 8002760:	d004      	beq.n	800276c <__aeabi_d2f+0xbc>
 8002762:	4a15      	ldr	r2, [pc, #84]	; (80027b8 <__aeabi_d2f+0x108>)
 8002764:	4694      	mov	ip, r2
 8002766:	4463      	add	r3, ip
 8002768:	4098      	lsls	r0, r3
 800276a:	4305      	orrs	r5, r0
 800276c:	002a      	movs	r2, r5
 800276e:	1e53      	subs	r3, r2, #1
 8002770:	419a      	sbcs	r2, r3
 8002772:	4332      	orrs	r2, r6
 8002774:	2600      	movs	r6, #0
 8002776:	0753      	lsls	r3, r2, #29
 8002778:	d1ce      	bne.n	8002718 <__aeabi_d2f+0x68>
 800277a:	2480      	movs	r4, #128	; 0x80
 800277c:	0013      	movs	r3, r2
 800277e:	04e4      	lsls	r4, r4, #19
 8002780:	2001      	movs	r0, #1
 8002782:	4023      	ands	r3, r4
 8002784:	4222      	tst	r2, r4
 8002786:	d1d3      	bne.n	8002730 <__aeabi_d2f+0x80>
 8002788:	e7b0      	b.n	80026ec <__aeabi_d2f+0x3c>
 800278a:	2300      	movs	r3, #0
 800278c:	e7ad      	b.n	80026ea <__aeabi_d2f+0x3a>
 800278e:	4a0b      	ldr	r2, [pc, #44]	; (80027bc <__aeabi_d2f+0x10c>)
 8002790:	4694      	mov	ip, r2
 8002792:	002a      	movs	r2, r5
 8002794:	40e2      	lsrs	r2, r4
 8002796:	0014      	movs	r4, r2
 8002798:	002a      	movs	r2, r5
 800279a:	4463      	add	r3, ip
 800279c:	409a      	lsls	r2, r3
 800279e:	4098      	lsls	r0, r3
 80027a0:	1e55      	subs	r5, r2, #1
 80027a2:	41aa      	sbcs	r2, r5
 80027a4:	4302      	orrs	r2, r0
 80027a6:	4322      	orrs	r2, r4
 80027a8:	e7e4      	b.n	8002774 <__aeabi_d2f+0xc4>
 80027aa:	0033      	movs	r3, r6
 80027ac:	e79e      	b.n	80026ec <__aeabi_d2f+0x3c>
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	000007fe 	.word	0x000007fe
 80027b4:	fffffc80 	.word	0xfffffc80
 80027b8:	fffffca2 	.word	0xfffffca2
 80027bc:	fffffc82 	.word	0xfffffc82

080027c0 <__aeabi_cfrcmple>:
 80027c0:	4684      	mov	ip, r0
 80027c2:	0008      	movs	r0, r1
 80027c4:	4661      	mov	r1, ip
 80027c6:	e7ff      	b.n	80027c8 <__aeabi_cfcmpeq>

080027c8 <__aeabi_cfcmpeq>:
 80027c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80027ca:	f000 f8c9 	bl	8002960 <__lesf2>
 80027ce:	2800      	cmp	r0, #0
 80027d0:	d401      	bmi.n	80027d6 <__aeabi_cfcmpeq+0xe>
 80027d2:	2100      	movs	r1, #0
 80027d4:	42c8      	cmn	r0, r1
 80027d6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080027d8 <__aeabi_fcmpeq>:
 80027d8:	b510      	push	{r4, lr}
 80027da:	f000 f855 	bl	8002888 <__eqsf2>
 80027de:	4240      	negs	r0, r0
 80027e0:	3001      	adds	r0, #1
 80027e2:	bd10      	pop	{r4, pc}

080027e4 <__aeabi_fcmplt>:
 80027e4:	b510      	push	{r4, lr}
 80027e6:	f000 f8bb 	bl	8002960 <__lesf2>
 80027ea:	2800      	cmp	r0, #0
 80027ec:	db01      	blt.n	80027f2 <__aeabi_fcmplt+0xe>
 80027ee:	2000      	movs	r0, #0
 80027f0:	bd10      	pop	{r4, pc}
 80027f2:	2001      	movs	r0, #1
 80027f4:	bd10      	pop	{r4, pc}
 80027f6:	46c0      	nop			; (mov r8, r8)

080027f8 <__aeabi_fcmple>:
 80027f8:	b510      	push	{r4, lr}
 80027fa:	f000 f8b1 	bl	8002960 <__lesf2>
 80027fe:	2800      	cmp	r0, #0
 8002800:	dd01      	ble.n	8002806 <__aeabi_fcmple+0xe>
 8002802:	2000      	movs	r0, #0
 8002804:	bd10      	pop	{r4, pc}
 8002806:	2001      	movs	r0, #1
 8002808:	bd10      	pop	{r4, pc}
 800280a:	46c0      	nop			; (mov r8, r8)

0800280c <__aeabi_fcmpgt>:
 800280c:	b510      	push	{r4, lr}
 800280e:	f000 f861 	bl	80028d4 <__gesf2>
 8002812:	2800      	cmp	r0, #0
 8002814:	dc01      	bgt.n	800281a <__aeabi_fcmpgt+0xe>
 8002816:	2000      	movs	r0, #0
 8002818:	bd10      	pop	{r4, pc}
 800281a:	2001      	movs	r0, #1
 800281c:	bd10      	pop	{r4, pc}
 800281e:	46c0      	nop			; (mov r8, r8)

08002820 <__aeabi_fcmpge>:
 8002820:	b510      	push	{r4, lr}
 8002822:	f000 f857 	bl	80028d4 <__gesf2>
 8002826:	2800      	cmp	r0, #0
 8002828:	da01      	bge.n	800282e <__aeabi_fcmpge+0xe>
 800282a:	2000      	movs	r0, #0
 800282c:	bd10      	pop	{r4, pc}
 800282e:	2001      	movs	r0, #1
 8002830:	bd10      	pop	{r4, pc}
 8002832:	46c0      	nop			; (mov r8, r8)

08002834 <__clzsi2>:
 8002834:	211c      	movs	r1, #28
 8002836:	2301      	movs	r3, #1
 8002838:	041b      	lsls	r3, r3, #16
 800283a:	4298      	cmp	r0, r3
 800283c:	d301      	bcc.n	8002842 <__clzsi2+0xe>
 800283e:	0c00      	lsrs	r0, r0, #16
 8002840:	3910      	subs	r1, #16
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	4298      	cmp	r0, r3
 8002846:	d301      	bcc.n	800284c <__clzsi2+0x18>
 8002848:	0a00      	lsrs	r0, r0, #8
 800284a:	3908      	subs	r1, #8
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	4298      	cmp	r0, r3
 8002850:	d301      	bcc.n	8002856 <__clzsi2+0x22>
 8002852:	0900      	lsrs	r0, r0, #4
 8002854:	3904      	subs	r1, #4
 8002856:	a202      	add	r2, pc, #8	; (adr r2, 8002860 <__clzsi2+0x2c>)
 8002858:	5c10      	ldrb	r0, [r2, r0]
 800285a:	1840      	adds	r0, r0, r1
 800285c:	4770      	bx	lr
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	02020304 	.word	0x02020304
 8002864:	01010101 	.word	0x01010101
	...

08002870 <__clzdi2>:
 8002870:	b510      	push	{r4, lr}
 8002872:	2900      	cmp	r1, #0
 8002874:	d103      	bne.n	800287e <__clzdi2+0xe>
 8002876:	f7ff ffdd 	bl	8002834 <__clzsi2>
 800287a:	3020      	adds	r0, #32
 800287c:	e002      	b.n	8002884 <__clzdi2+0x14>
 800287e:	0008      	movs	r0, r1
 8002880:	f7ff ffd8 	bl	8002834 <__clzsi2>
 8002884:	bd10      	pop	{r4, pc}
 8002886:	46c0      	nop			; (mov r8, r8)

08002888 <__eqsf2>:
 8002888:	b570      	push	{r4, r5, r6, lr}
 800288a:	0042      	lsls	r2, r0, #1
 800288c:	0245      	lsls	r5, r0, #9
 800288e:	024e      	lsls	r6, r1, #9
 8002890:	004c      	lsls	r4, r1, #1
 8002892:	0fc3      	lsrs	r3, r0, #31
 8002894:	0a6d      	lsrs	r5, r5, #9
 8002896:	2001      	movs	r0, #1
 8002898:	0e12      	lsrs	r2, r2, #24
 800289a:	0a76      	lsrs	r6, r6, #9
 800289c:	0e24      	lsrs	r4, r4, #24
 800289e:	0fc9      	lsrs	r1, r1, #31
 80028a0:	2aff      	cmp	r2, #255	; 0xff
 80028a2:	d006      	beq.n	80028b2 <__eqsf2+0x2a>
 80028a4:	2cff      	cmp	r4, #255	; 0xff
 80028a6:	d003      	beq.n	80028b0 <__eqsf2+0x28>
 80028a8:	42a2      	cmp	r2, r4
 80028aa:	d101      	bne.n	80028b0 <__eqsf2+0x28>
 80028ac:	42b5      	cmp	r5, r6
 80028ae:	d006      	beq.n	80028be <__eqsf2+0x36>
 80028b0:	bd70      	pop	{r4, r5, r6, pc}
 80028b2:	2d00      	cmp	r5, #0
 80028b4:	d1fc      	bne.n	80028b0 <__eqsf2+0x28>
 80028b6:	2cff      	cmp	r4, #255	; 0xff
 80028b8:	d1fa      	bne.n	80028b0 <__eqsf2+0x28>
 80028ba:	2e00      	cmp	r6, #0
 80028bc:	d1f8      	bne.n	80028b0 <__eqsf2+0x28>
 80028be:	428b      	cmp	r3, r1
 80028c0:	d006      	beq.n	80028d0 <__eqsf2+0x48>
 80028c2:	2001      	movs	r0, #1
 80028c4:	2a00      	cmp	r2, #0
 80028c6:	d1f3      	bne.n	80028b0 <__eqsf2+0x28>
 80028c8:	0028      	movs	r0, r5
 80028ca:	1e43      	subs	r3, r0, #1
 80028cc:	4198      	sbcs	r0, r3
 80028ce:	e7ef      	b.n	80028b0 <__eqsf2+0x28>
 80028d0:	2000      	movs	r0, #0
 80028d2:	e7ed      	b.n	80028b0 <__eqsf2+0x28>

080028d4 <__gesf2>:
 80028d4:	b570      	push	{r4, r5, r6, lr}
 80028d6:	0042      	lsls	r2, r0, #1
 80028d8:	0245      	lsls	r5, r0, #9
 80028da:	024e      	lsls	r6, r1, #9
 80028dc:	004c      	lsls	r4, r1, #1
 80028de:	0fc3      	lsrs	r3, r0, #31
 80028e0:	0a6d      	lsrs	r5, r5, #9
 80028e2:	0e12      	lsrs	r2, r2, #24
 80028e4:	0a76      	lsrs	r6, r6, #9
 80028e6:	0e24      	lsrs	r4, r4, #24
 80028e8:	0fc8      	lsrs	r0, r1, #31
 80028ea:	2aff      	cmp	r2, #255	; 0xff
 80028ec:	d01b      	beq.n	8002926 <__gesf2+0x52>
 80028ee:	2cff      	cmp	r4, #255	; 0xff
 80028f0:	d00e      	beq.n	8002910 <__gesf2+0x3c>
 80028f2:	2a00      	cmp	r2, #0
 80028f4:	d11b      	bne.n	800292e <__gesf2+0x5a>
 80028f6:	2c00      	cmp	r4, #0
 80028f8:	d101      	bne.n	80028fe <__gesf2+0x2a>
 80028fa:	2e00      	cmp	r6, #0
 80028fc:	d01c      	beq.n	8002938 <__gesf2+0x64>
 80028fe:	2d00      	cmp	r5, #0
 8002900:	d00c      	beq.n	800291c <__gesf2+0x48>
 8002902:	4283      	cmp	r3, r0
 8002904:	d01c      	beq.n	8002940 <__gesf2+0x6c>
 8002906:	2102      	movs	r1, #2
 8002908:	1e58      	subs	r0, r3, #1
 800290a:	4008      	ands	r0, r1
 800290c:	3801      	subs	r0, #1
 800290e:	bd70      	pop	{r4, r5, r6, pc}
 8002910:	2e00      	cmp	r6, #0
 8002912:	d122      	bne.n	800295a <__gesf2+0x86>
 8002914:	2a00      	cmp	r2, #0
 8002916:	d1f4      	bne.n	8002902 <__gesf2+0x2e>
 8002918:	2d00      	cmp	r5, #0
 800291a:	d1f2      	bne.n	8002902 <__gesf2+0x2e>
 800291c:	2800      	cmp	r0, #0
 800291e:	d1f6      	bne.n	800290e <__gesf2+0x3a>
 8002920:	2001      	movs	r0, #1
 8002922:	4240      	negs	r0, r0
 8002924:	e7f3      	b.n	800290e <__gesf2+0x3a>
 8002926:	2d00      	cmp	r5, #0
 8002928:	d117      	bne.n	800295a <__gesf2+0x86>
 800292a:	2cff      	cmp	r4, #255	; 0xff
 800292c:	d0f0      	beq.n	8002910 <__gesf2+0x3c>
 800292e:	2c00      	cmp	r4, #0
 8002930:	d1e7      	bne.n	8002902 <__gesf2+0x2e>
 8002932:	2e00      	cmp	r6, #0
 8002934:	d1e5      	bne.n	8002902 <__gesf2+0x2e>
 8002936:	e7e6      	b.n	8002906 <__gesf2+0x32>
 8002938:	2000      	movs	r0, #0
 800293a:	2d00      	cmp	r5, #0
 800293c:	d0e7      	beq.n	800290e <__gesf2+0x3a>
 800293e:	e7e2      	b.n	8002906 <__gesf2+0x32>
 8002940:	42a2      	cmp	r2, r4
 8002942:	dc05      	bgt.n	8002950 <__gesf2+0x7c>
 8002944:	dbea      	blt.n	800291c <__gesf2+0x48>
 8002946:	42b5      	cmp	r5, r6
 8002948:	d802      	bhi.n	8002950 <__gesf2+0x7c>
 800294a:	d3e7      	bcc.n	800291c <__gesf2+0x48>
 800294c:	2000      	movs	r0, #0
 800294e:	e7de      	b.n	800290e <__gesf2+0x3a>
 8002950:	4243      	negs	r3, r0
 8002952:	4158      	adcs	r0, r3
 8002954:	0040      	lsls	r0, r0, #1
 8002956:	3801      	subs	r0, #1
 8002958:	e7d9      	b.n	800290e <__gesf2+0x3a>
 800295a:	2002      	movs	r0, #2
 800295c:	4240      	negs	r0, r0
 800295e:	e7d6      	b.n	800290e <__gesf2+0x3a>

08002960 <__lesf2>:
 8002960:	b570      	push	{r4, r5, r6, lr}
 8002962:	0042      	lsls	r2, r0, #1
 8002964:	0245      	lsls	r5, r0, #9
 8002966:	024e      	lsls	r6, r1, #9
 8002968:	004c      	lsls	r4, r1, #1
 800296a:	0fc3      	lsrs	r3, r0, #31
 800296c:	0a6d      	lsrs	r5, r5, #9
 800296e:	0e12      	lsrs	r2, r2, #24
 8002970:	0a76      	lsrs	r6, r6, #9
 8002972:	0e24      	lsrs	r4, r4, #24
 8002974:	0fc8      	lsrs	r0, r1, #31
 8002976:	2aff      	cmp	r2, #255	; 0xff
 8002978:	d00b      	beq.n	8002992 <__lesf2+0x32>
 800297a:	2cff      	cmp	r4, #255	; 0xff
 800297c:	d00d      	beq.n	800299a <__lesf2+0x3a>
 800297e:	2a00      	cmp	r2, #0
 8002980:	d11f      	bne.n	80029c2 <__lesf2+0x62>
 8002982:	2c00      	cmp	r4, #0
 8002984:	d116      	bne.n	80029b4 <__lesf2+0x54>
 8002986:	2e00      	cmp	r6, #0
 8002988:	d114      	bne.n	80029b4 <__lesf2+0x54>
 800298a:	2000      	movs	r0, #0
 800298c:	2d00      	cmp	r5, #0
 800298e:	d010      	beq.n	80029b2 <__lesf2+0x52>
 8002990:	e009      	b.n	80029a6 <__lesf2+0x46>
 8002992:	2d00      	cmp	r5, #0
 8002994:	d10c      	bne.n	80029b0 <__lesf2+0x50>
 8002996:	2cff      	cmp	r4, #255	; 0xff
 8002998:	d113      	bne.n	80029c2 <__lesf2+0x62>
 800299a:	2e00      	cmp	r6, #0
 800299c:	d108      	bne.n	80029b0 <__lesf2+0x50>
 800299e:	2a00      	cmp	r2, #0
 80029a0:	d008      	beq.n	80029b4 <__lesf2+0x54>
 80029a2:	4283      	cmp	r3, r0
 80029a4:	d012      	beq.n	80029cc <__lesf2+0x6c>
 80029a6:	2102      	movs	r1, #2
 80029a8:	1e58      	subs	r0, r3, #1
 80029aa:	4008      	ands	r0, r1
 80029ac:	3801      	subs	r0, #1
 80029ae:	e000      	b.n	80029b2 <__lesf2+0x52>
 80029b0:	2002      	movs	r0, #2
 80029b2:	bd70      	pop	{r4, r5, r6, pc}
 80029b4:	2d00      	cmp	r5, #0
 80029b6:	d1f4      	bne.n	80029a2 <__lesf2+0x42>
 80029b8:	2800      	cmp	r0, #0
 80029ba:	d1fa      	bne.n	80029b2 <__lesf2+0x52>
 80029bc:	2001      	movs	r0, #1
 80029be:	4240      	negs	r0, r0
 80029c0:	e7f7      	b.n	80029b2 <__lesf2+0x52>
 80029c2:	2c00      	cmp	r4, #0
 80029c4:	d1ed      	bne.n	80029a2 <__lesf2+0x42>
 80029c6:	2e00      	cmp	r6, #0
 80029c8:	d1eb      	bne.n	80029a2 <__lesf2+0x42>
 80029ca:	e7ec      	b.n	80029a6 <__lesf2+0x46>
 80029cc:	42a2      	cmp	r2, r4
 80029ce:	dc05      	bgt.n	80029dc <__lesf2+0x7c>
 80029d0:	dbf2      	blt.n	80029b8 <__lesf2+0x58>
 80029d2:	42b5      	cmp	r5, r6
 80029d4:	d802      	bhi.n	80029dc <__lesf2+0x7c>
 80029d6:	d3ef      	bcc.n	80029b8 <__lesf2+0x58>
 80029d8:	2000      	movs	r0, #0
 80029da:	e7ea      	b.n	80029b2 <__lesf2+0x52>
 80029dc:	4243      	negs	r3, r0
 80029de:	4158      	adcs	r0, r3
 80029e0:	0040      	lsls	r0, r0, #1
 80029e2:	3801      	subs	r0, #1
 80029e4:	e7e5      	b.n	80029b2 <__lesf2+0x52>
 80029e6:	46c0      	nop			; (mov r8, r8)

080029e8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029e8:	b510      	push	{r4, lr}
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80029ea:	4a08      	ldr	r2, [pc, #32]	; (8002a0c <HAL_Init+0x24>)
 80029ec:	6813      	ldr	r3, [r2, #0]
 80029ee:	2140      	movs	r1, #64	; 0x40
 80029f0:	430b      	orrs	r3, r1
 80029f2:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029f4:	2003      	movs	r0, #3
 80029f6:	f006 f9f7 	bl	8008de8 <HAL_InitTick>
 80029fa:	1e04      	subs	r4, r0, #0
 80029fc:	d002      	beq.n	8002a04 <HAL_Init+0x1c>
  {
    status = HAL_ERROR;
 80029fe:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8002a00:	0020      	movs	r0, r4
 8002a02:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8002a04:	f006 f8b8 	bl	8008b78 <HAL_MspInit>
 8002a08:	e7fa      	b.n	8002a00 <HAL_Init+0x18>
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	40022000 	.word	0x40022000

08002a10 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002a10:	4a03      	ldr	r2, [pc, #12]	; (8002a20 <HAL_IncTick+0x10>)
 8002a12:	6811      	ldr	r1, [r2, #0]
 8002a14:	4b03      	ldr	r3, [pc, #12]	; (8002a24 <HAL_IncTick+0x14>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	185b      	adds	r3, r3, r1
 8002a1a:	6013      	str	r3, [r2, #0]
}
 8002a1c:	4770      	bx	lr
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	200009dc 	.word	0x200009dc
 8002a24:	20000000 	.word	0x20000000

08002a28 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002a28:	4b01      	ldr	r3, [pc, #4]	; (8002a30 <HAL_GetTick+0x8>)
 8002a2a:	6818      	ldr	r0, [r3, #0]
}
 8002a2c:	4770      	bx	lr
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	200009dc 	.word	0x200009dc

08002a34 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002a34:	b510      	push	{r4, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	0004      	movs	r4, r0
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002a3a:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <ADC_DelayMicroSecond+0x28>)
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	4908      	ldr	r1, [pc, #32]	; (8002a60 <ADC_DelayMicroSecond+0x2c>)
 8002a40:	f7fd fb7e 	bl	8000140 <__udivsi3>
 8002a44:	4344      	muls	r4, r0
 8002a46:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 8002a48:	e002      	b.n	8002a50 <ADC_DelayMicroSecond+0x1c>
  {
    waitLoopIndex--;
 8002a4a:	9b01      	ldr	r3, [sp, #4]
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	9301      	str	r3, [sp, #4]
  while(waitLoopIndex != 0U)
 8002a50:	9b01      	ldr	r3, [sp, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f9      	bne.n	8002a4a <ADC_DelayMicroSecond+0x16>
  } 
}
 8002a56:	b002      	add	sp, #8
 8002a58:	bd10      	pop	{r4, pc}
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	2000000c 	.word	0x2000000c
 8002a60:	000f4240 	.word	0x000f4240

08002a64 <ADC_Enable>:
{
 8002a64:	b570      	push	{r4, r5, r6, lr}
 8002a66:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a68:	6802      	ldr	r2, [r0, #0]
 8002a6a:	6891      	ldr	r1, [r2, #8]
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	400b      	ands	r3, r1
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d00d      	beq.n	8002a90 <ADC_Enable+0x2c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002a74:	6891      	ldr	r1, [r2, #8]
 8002a76:	4b1a      	ldr	r3, [pc, #104]	; (8002ae0 <ADC_Enable+0x7c>)
 8002a78:	4219      	tst	r1, r3
 8002a7a:	d00e      	beq.n	8002a9a <ADC_Enable+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a7e:	2210      	movs	r2, #16
 8002a80:	4313      	orrs	r3, r2
 8002a82:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002a86:	3a0f      	subs	r2, #15
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8002a8c:	2001      	movs	r0, #1
}
 8002a8e:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a90:	6813      	ldr	r3, [r2, #0]
 8002a92:	07db      	lsls	r3, r3, #31
 8002a94:	d5ee      	bpl.n	8002a74 <ADC_Enable+0x10>
  return HAL_OK;
 8002a96:	2000      	movs	r0, #0
 8002a98:	e7f9      	b.n	8002a8e <ADC_Enable+0x2a>
    __HAL_ADC_ENABLE(hadc);
 8002a9a:	6893      	ldr	r3, [r2, #8]
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	430b      	orrs	r3, r1
 8002aa0:	6093      	str	r3, [r2, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002aa2:	2001      	movs	r0, #1
 8002aa4:	f7ff ffc6 	bl	8002a34 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 8002aa8:	f7ff ffbe 	bl	8002a28 <HAL_GetTick>
 8002aac:	0005      	movs	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002aae:	6823      	ldr	r3, [r4, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	07db      	lsls	r3, r3, #31
 8002ab4:	d412      	bmi.n	8002adc <ADC_Enable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ab6:	f7ff ffb7 	bl	8002a28 <HAL_GetTick>
 8002aba:	1b40      	subs	r0, r0, r5
 8002abc:	280a      	cmp	r0, #10
 8002abe:	d9f6      	bls.n	8002aae <ADC_Enable+0x4a>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002ac0:	6823      	ldr	r3, [r4, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	07db      	lsls	r3, r3, #31
 8002ac6:	d4f2      	bmi.n	8002aae <ADC_Enable+0x4a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002aca:	2210      	movs	r2, #16
 8002acc:	4313      	orrs	r3, r2
 8002ace:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ad2:	3a0f      	subs	r2, #15
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8002ad8:	2001      	movs	r0, #1
 8002ada:	e7d8      	b.n	8002a8e <ADC_Enable+0x2a>
  return HAL_OK;
 8002adc:	2000      	movs	r0, #0
 8002ade:	e7d6      	b.n	8002a8e <ADC_Enable+0x2a>
 8002ae0:	80000017 	.word	0x80000017

08002ae4 <HAL_ADC_Init>:
{
 8002ae4:	b570      	push	{r4, r5, r6, lr}
 8002ae6:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8002ae8:	d100      	bne.n	8002aec <HAL_ADC_Init+0x8>
 8002aea:	e0e2      	b.n	8002cb2 <HAL_ADC_Init+0x1ce>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002aec:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d030      	beq.n	8002b54 <HAL_ADC_Init+0x70>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002af2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002af4:	06db      	lsls	r3, r3, #27
 8002af6:	d433      	bmi.n	8002b60 <HAL_ADC_Init+0x7c>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8002af8:	6822      	ldr	r2, [r4, #0]
 8002afa:	6891      	ldr	r1, [r2, #8]
 8002afc:	2004      	movs	r0, #4
 8002afe:	0005      	movs	r5, r0
 8002b00:	400d      	ands	r5, r1
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002b02:	4208      	tst	r0, r1
 8002b04:	d12c      	bne.n	8002b60 <HAL_ADC_Init+0x7c>
  ADC_STATE_CLR_SET(hadc->State,
 8002b06:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002b08:	4b6b      	ldr	r3, [pc, #428]	; (8002cb8 <HAL_ADC_Init+0x1d4>)
 8002b0a:	4019      	ands	r1, r3
 8002b0c:	3306      	adds	r3, #6
 8002b0e:	33ff      	adds	r3, #255	; 0xff
 8002b10:	4319      	orrs	r1, r3
 8002b12:	6561      	str	r1, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b14:	6891      	ldr	r1, [r2, #8]
 8002b16:	3301      	adds	r3, #1
 8002b18:	400b      	ands	r3, r1
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d029      	beq.n	8002b72 <HAL_ADC_Init+0x8e>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002b1e:	6863      	ldr	r3, [r4, #4]
 8002b20:	21c0      	movs	r1, #192	; 0xc0
 8002b22:	0609      	lsls	r1, r1, #24
 8002b24:	428b      	cmp	r3, r1
 8002b26:	d028      	beq.n	8002b7a <HAL_ADC_Init+0x96>
 8002b28:	2180      	movs	r1, #128	; 0x80
 8002b2a:	05c9      	lsls	r1, r1, #23
 8002b2c:	428b      	cmp	r3, r1
 8002b2e:	d024      	beq.n	8002b7a <HAL_ADC_Init+0x96>
 8002b30:	2180      	movs	r1, #128	; 0x80
 8002b32:	0609      	lsls	r1, r1, #24
 8002b34:	428b      	cmp	r3, r1
 8002b36:	d020      	beq.n	8002b7a <HAL_ADC_Init+0x96>
 8002b38:	6913      	ldr	r3, [r2, #16]
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	089b      	lsrs	r3, r3, #2
 8002b3e:	6113      	str	r3, [r2, #16]
 8002b40:	4b5e      	ldr	r3, [pc, #376]	; (8002cbc <HAL_ADC_Init+0x1d8>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	495e      	ldr	r1, [pc, #376]	; (8002cc0 <HAL_ADC_Init+0x1dc>)
 8002b46:	400a      	ands	r2, r1
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	6861      	ldr	r1, [r4, #4]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	e01b      	b.n	8002b8c <HAL_ADC_Init+0xa8>
    ADC_CLEAR_ERRORCODE(hadc);
 8002b54:	6583      	str	r3, [r0, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8002b56:	2250      	movs	r2, #80	; 0x50
 8002b58:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8002b5a:	f006 f839 	bl	8008bd0 <HAL_ADC_MspInit>
 8002b5e:	e7c8      	b.n	8002af2 <HAL_ADC_Init+0xe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b60:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b62:	2210      	movs	r2, #16
 8002b64:	4313      	orrs	r3, r2
 8002b66:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8002b68:	2350      	movs	r3, #80	; 0x50
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 8002b6e:	2001      	movs	r0, #1
}
 8002b70:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b72:	6813      	ldr	r3, [r2, #0]
 8002b74:	07db      	lsls	r3, r3, #31
 8002b76:	d413      	bmi.n	8002ba0 <HAL_ADC_Init+0xbc>
 8002b78:	e7d1      	b.n	8002b1e <HAL_ADC_Init+0x3a>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002b7a:	6913      	ldr	r3, [r2, #16]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	089b      	lsrs	r3, r3, #2
 8002b80:	6113      	str	r3, [r2, #16]
 8002b82:	6822      	ldr	r2, [r4, #0]
 8002b84:	6913      	ldr	r3, [r2, #16]
 8002b86:	6861      	ldr	r1, [r4, #4]
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8002b8c:	6822      	ldr	r2, [r4, #0]
 8002b8e:	68d3      	ldr	r3, [r2, #12]
 8002b90:	2118      	movs	r1, #24
 8002b92:	438b      	bics	r3, r1
 8002b94:	60d3      	str	r3, [r2, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8002b96:	6822      	ldr	r2, [r4, #0]
 8002b98:	68d3      	ldr	r3, [r2, #12]
 8002b9a:	68a1      	ldr	r1, [r4, #8]
 8002b9c:	430b      	orrs	r3, r1
 8002b9e:	60d3      	str	r3, [r2, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002ba0:	4a46      	ldr	r2, [pc, #280]	; (8002cbc <HAL_ADC_Init+0x1d8>)
 8002ba2:	6813      	ldr	r3, [r2, #0]
 8002ba4:	4947      	ldr	r1, [pc, #284]	; (8002cc4 <HAL_ADC_Init+0x1e0>)
 8002ba6:	400b      	ands	r3, r1
 8002ba8:	6013      	str	r3, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8002baa:	6813      	ldr	r3, [r2, #0]
 8002bac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002bae:	0649      	lsls	r1, r1, #25
 8002bb0:	430b      	orrs	r3, r1
 8002bb2:	6013      	str	r3, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002bb4:	6823      	ldr	r3, [r4, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	00d2      	lsls	r2, r2, #3
 8002bba:	d404      	bmi.n	8002bc6 <HAL_ADC_Init+0xe2>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002bbc:	6899      	ldr	r1, [r3, #8]
 8002bbe:	2280      	movs	r2, #128	; 0x80
 8002bc0:	0552      	lsls	r2, r2, #21
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002bc6:	6823      	ldr	r3, [r4, #0]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	493f      	ldr	r1, [pc, #252]	; (8002cc8 <HAL_ADC_Init+0x1e4>)
 8002bcc:	400a      	ands	r2, r1
 8002bce:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002bd0:	6820      	ldr	r0, [r4, #0]
 8002bd2:	68c2      	ldr	r2, [r0, #12]
 8002bd4:	68e3      	ldr	r3, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002bd6:	6921      	ldr	r1, [r4, #16]
 8002bd8:	2902      	cmp	r1, #2
 8002bda:	d02d      	beq.n	8002c38 <HAL_ADC_Init+0x154>
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002bdc:	432b      	orrs	r3, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002bde:	2120      	movs	r1, #32
 8002be0:	5c61      	ldrb	r1, [r4, r1]
 8002be2:	0349      	lsls	r1, r1, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002be4:	430b      	orrs	r3, r1
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002be6:	212c      	movs	r1, #44	; 0x2c
 8002be8:	5c61      	ldrb	r1, [r4, r1]
 8002bea:	0049      	lsls	r1, r1, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002bec:	430b      	orrs	r3, r1
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002bee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002bf0:	430b      	orrs	r3, r1
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002bf2:	69a1      	ldr	r1, [r4, #24]
 8002bf4:	0389      	lsls	r1, r1, #14
                            hadc->Init.Overrun                               |
 8002bf6:	430b      	orrs	r3, r1
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002bf8:	69e1      	ldr	r1, [r4, #28]
 8002bfa:	03c9      	lsls	r1, r1, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002bfc:	430b      	orrs	r3, r1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60c3      	str	r3, [r0, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c04:	22c2      	movs	r2, #194	; 0xc2
 8002c06:	32ff      	adds	r2, #255	; 0xff
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d005      	beq.n	8002c18 <HAL_ADC_Init+0x134>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002c0c:	6821      	ldr	r1, [r4, #0]
 8002c0e:	68ca      	ldr	r2, [r1, #12]
 8002c10:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002c12:	4303      	orrs	r3, r0
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60cb      	str	r3, [r1, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c18:	2321      	movs	r3, #33	; 0x21
 8002c1a:	5ce3      	ldrb	r3, [r4, r3]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d00d      	beq.n	8002c3c <HAL_ADC_Init+0x158>
  if (hadc->Init.OversamplingMode == ENABLE)
 8002c20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d01e      	beq.n	8002c64 <HAL_ADC_Init+0x180>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002c26:	6823      	ldr	r3, [r4, #0]
 8002c28:	691a      	ldr	r2, [r3, #16]
 8002c2a:	07d2      	lsls	r2, r2, #31
 8002c2c:	d52d      	bpl.n	8002c8a <HAL_ADC_Init+0x1a6>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	2101      	movs	r1, #1
 8002c32:	438a      	bics	r2, r1
 8002c34:	611a      	str	r2, [r3, #16]
 8002c36:	e028      	b.n	8002c8a <HAL_ADC_Init+0x1a6>
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002c38:	2504      	movs	r5, #4
 8002c3a:	e7cf      	b.n	8002bdc <HAL_ADC_Init+0xf8>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c3c:	331f      	adds	r3, #31
 8002c3e:	5ce3      	ldrb	r3, [r4, r3]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d106      	bne.n	8002c52 <HAL_ADC_Init+0x16e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002c44:	6822      	ldr	r2, [r4, #0]
 8002c46:	68d1      	ldr	r1, [r2, #12]
 8002c48:	2380      	movs	r3, #128	; 0x80
 8002c4a:	025b      	lsls	r3, r3, #9
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	60d3      	str	r3, [r2, #12]
 8002c50:	e7e6      	b.n	8002c20 <HAL_ADC_Init+0x13c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c52:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c54:	2220      	movs	r2, #32
 8002c56:	4313      	orrs	r3, r2
 8002c58:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c5c:	3a1f      	subs	r2, #31
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	65a3      	str	r3, [r4, #88]	; 0x58
 8002c62:	e7dd      	b.n	8002c20 <HAL_ADC_Init+0x13c>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002c64:	6822      	ldr	r2, [r4, #0]
 8002c66:	6913      	ldr	r3, [r2, #16]
 8002c68:	4918      	ldr	r1, [pc, #96]	; (8002ccc <HAL_ADC_Init+0x1e8>)
 8002c6a:	400b      	ands	r3, r1
 8002c6c:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002c6e:	6821      	ldr	r1, [r4, #0]
 8002c70:	690a      	ldr	r2, [r1, #16]
 8002c72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c74:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002c76:	4303      	orrs	r3, r0
                               hadc->Init.Oversample.RightBitShift             |
 8002c78:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002c7a:	4303      	orrs	r3, r0
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	610b      	str	r3, [r1, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002c80:	6822      	ldr	r2, [r4, #0]
 8002c82:	6913      	ldr	r3, [r2, #16]
 8002c84:	2101      	movs	r1, #1
 8002c86:	430b      	orrs	r3, r1
 8002c88:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002c8a:	6822      	ldr	r2, [r4, #0]
 8002c8c:	6953      	ldr	r3, [r2, #20]
 8002c8e:	2107      	movs	r1, #7
 8002c90:	438b      	bics	r3, r1
 8002c92:	6153      	str	r3, [r2, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002c94:	6822      	ldr	r2, [r4, #0]
 8002c96:	6953      	ldr	r3, [r2, #20]
 8002c98:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002c9a:	430b      	orrs	r3, r1
 8002c9c:	6153      	str	r3, [r2, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	65a3      	str	r3, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8002ca2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ca4:	2203      	movs	r2, #3
 8002ca6:	4393      	bics	r3, r2
 8002ca8:	3a02      	subs	r2, #2
 8002caa:	4313      	orrs	r3, r2
 8002cac:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8002cae:	2000      	movs	r0, #0
 8002cb0:	e75e      	b.n	8002b70 <HAL_ADC_Init+0x8c>
    return HAL_ERROR;
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	e75c      	b.n	8002b70 <HAL_ADC_Init+0x8c>
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	fffffefd 	.word	0xfffffefd
 8002cbc:	40012708 	.word	0x40012708
 8002cc0:	ffc3ffff 	.word	0xffc3ffff
 8002cc4:	fdffffff 	.word	0xfdffffff
 8002cc8:	fffe0219 	.word	0xfffe0219
 8002ccc:	fffffc03 	.word	0xfffffc03

08002cd0 <HAL_ADC_Start_DMA>:
{
 8002cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd2:	0004      	movs	r4, r0
 8002cd4:	000d      	movs	r5, r1
 8002cd6:	0016      	movs	r6, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002cd8:	6803      	ldr	r3, [r0, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	0752      	lsls	r2, r2, #29
 8002cde:	d43c      	bmi.n	8002d5a <HAL_ADC_Start_DMA+0x8a>
    __HAL_LOCK(hadc);
 8002ce0:	2250      	movs	r2, #80	; 0x50
 8002ce2:	5c82      	ldrb	r2, [r0, r2]
 8002ce4:	2a01      	cmp	r2, #1
 8002ce6:	d03a      	beq.n	8002d5e <HAL_ADC_Start_DMA+0x8e>
 8002ce8:	2101      	movs	r1, #1
 8002cea:	2250      	movs	r2, #80	; 0x50
 8002cec:	5481      	strb	r1, [r0, r2]
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002cee:	68da      	ldr	r2, [r3, #12]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	60da      	str	r2, [r3, #12]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002cf4:	69c3      	ldr	r3, [r0, #28]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d004      	beq.n	8002d04 <HAL_ADC_Start_DMA+0x34>
      tmp_hal_status = ADC_Enable(hadc);
 8002cfa:	f7ff feb3 	bl	8002a64 <ADC_Enable>
 8002cfe:	1e07      	subs	r7, r0, #0
    if (tmp_hal_status == HAL_OK)
 8002d00:	d129      	bne.n	8002d56 <HAL_ADC_Start_DMA+0x86>
 8002d02:	e000      	b.n	8002d06 <HAL_ADC_Start_DMA+0x36>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d04:	2700      	movs	r7, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002d06:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d08:	4a16      	ldr	r2, [pc, #88]	; (8002d64 <HAL_ADC_Start_DMA+0x94>)
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	2380      	movs	r3, #128	; 0x80
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	4313      	orrs	r3, r2
 8002d12:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8002d14:	2300      	movs	r3, #0
 8002d16:	65a3      	str	r3, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 8002d18:	2250      	movs	r2, #80	; 0x50
 8002d1a:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d1c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002d1e:	4a12      	ldr	r2, [pc, #72]	; (8002d68 <HAL_ADC_Start_DMA+0x98>)
 8002d20:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d22:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002d24:	4a11      	ldr	r2, [pc, #68]	; (8002d6c <HAL_ADC_Start_DMA+0x9c>)
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d28:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002d2a:	4a11      	ldr	r2, [pc, #68]	; (8002d70 <HAL_ADC_Start_DMA+0xa0>)
 8002d2c:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	221c      	movs	r2, #28
 8002d32:	601a      	str	r2, [r3, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d34:	6822      	ldr	r2, [r4, #0]
 8002d36:	6853      	ldr	r3, [r2, #4]
 8002d38:	2110      	movs	r1, #16
 8002d3a:	430b      	orrs	r3, r1
 8002d3c:	6053      	str	r3, [r2, #4]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d3e:	6821      	ldr	r1, [r4, #0]
 8002d40:	3140      	adds	r1, #64	; 0x40
 8002d42:	0033      	movs	r3, r6
 8002d44:	002a      	movs	r2, r5
 8002d46:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002d48:	f000 fac6 	bl	80032d8 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002d4c:	6822      	ldr	r2, [r4, #0]
 8002d4e:	6893      	ldr	r3, [r2, #8]
 8002d50:	2104      	movs	r1, #4
 8002d52:	430b      	orrs	r3, r1
 8002d54:	6093      	str	r3, [r2, #8]
}
 8002d56:	0038      	movs	r0, r7
 8002d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_hal_status = HAL_BUSY;
 8002d5a:	2702      	movs	r7, #2
 8002d5c:	e7fb      	b.n	8002d56 <HAL_ADC_Start_DMA+0x86>
    __HAL_LOCK(hadc);
 8002d5e:	2702      	movs	r7, #2
 8002d60:	e7f9      	b.n	8002d56 <HAL_ADC_Start_DMA+0x86>
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	fffff0fe 	.word	0xfffff0fe
 8002d68:	08002d79 	.word	0x08002d79
 8002d6c:	08002def 	.word	0x08002def
 8002d70:	08002dfd 	.word	0x08002dfd

08002d74 <HAL_ADC_ConvCpltCallback>:
}
 8002d74:	4770      	bx	lr
	...

08002d78 <ADC_DMAConvCplt>:
{
 8002d78:	b510      	push	{r4, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d7a:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d7e:	2150      	movs	r1, #80	; 0x50
 8002d80:	4211      	tst	r1, r2
 8002d82:	d12c      	bne.n	8002dde <ADC_DMAConvCplt+0x66>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002d86:	2280      	movs	r2, #128	; 0x80
 8002d88:	0092      	lsls	r2, r2, #2
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	655a      	str	r2, [r3, #84]	; 0x54
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68d0      	ldr	r0, [r2, #12]
 8002d92:	21c0      	movs	r1, #192	; 0xc0
 8002d94:	0109      	lsls	r1, r1, #4
 8002d96:	4208      	tst	r0, r1
 8002d98:	d114      	bne.n	8002dc4 <ADC_DMAConvCplt+0x4c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d9a:	2120      	movs	r1, #32
 8002d9c:	5c59      	ldrb	r1, [r3, r1]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d9e:	2900      	cmp	r1, #0
 8002da0:	d110      	bne.n	8002dc4 <ADC_DMAConvCplt+0x4c>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002da2:	6811      	ldr	r1, [r2, #0]
 8002da4:	0709      	lsls	r1, r1, #28
 8002da6:	d50d      	bpl.n	8002dc4 <ADC_DMAConvCplt+0x4c>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002da8:	6891      	ldr	r1, [r2, #8]
 8002daa:	0749      	lsls	r1, r1, #29
 8002dac:	d40e      	bmi.n	8002dcc <ADC_DMAConvCplt+0x54>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002dae:	6851      	ldr	r1, [r2, #4]
 8002db0:	200c      	movs	r0, #12
 8002db2:	4381      	bics	r1, r0
 8002db4:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8002db6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002db8:	490b      	ldr	r1, [pc, #44]	; (8002de8 <ADC_DMAConvCplt+0x70>)
 8002dba:	400a      	ands	r2, r1
 8002dbc:	3104      	adds	r1, #4
 8002dbe:	31ff      	adds	r1, #255	; 0xff
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f7ff ffd5 	bl	8002d74 <HAL_ADC_ConvCpltCallback>
}
 8002dca:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dce:	2120      	movs	r1, #32
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	655a      	str	r2, [r3, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002dd6:	391f      	subs	r1, #31
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	659a      	str	r2, [r3, #88]	; 0x58
 8002ddc:	e7f2      	b.n	8002dc4 <ADC_DMAConvCplt+0x4c>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de2:	4798      	blx	r3
}
 8002de4:	e7f1      	b.n	8002dca <ADC_DMAConvCplt+0x52>
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	fffffefe 	.word	0xfffffefe

08002dec <HAL_ADC_ConvHalfCpltCallback>:
}
 8002dec:	4770      	bx	lr

08002dee <ADC_DMAHalfConvCplt>:
{
 8002dee:	b510      	push	{r4, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002df0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002df2:	f7ff fffb 	bl	8002dec <HAL_ADC_ConvHalfCpltCallback>
}
 8002df6:	bd10      	pop	{r4, pc}

08002df8 <HAL_ADC_LevelOutOfWindowCallback>:
}
 8002df8:	4770      	bx	lr

08002dfa <HAL_ADC_ErrorCallback>:
}
 8002dfa:	4770      	bx	lr

08002dfc <ADC_DMAError>:
{
 8002dfc:	b510      	push	{r4, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dfe:	6a80      	ldr	r0, [r0, #40]	; 0x28
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e00:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002e02:	2240      	movs	r2, #64	; 0x40
 8002e04:	4313      	orrs	r3, r2
 8002e06:	6543      	str	r3, [r0, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e08:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002e0a:	3a3c      	subs	r2, #60	; 0x3c
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	6583      	str	r3, [r0, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc); 
 8002e10:	f7ff fff3 	bl	8002dfa <HAL_ADC_ErrorCallback>
}
 8002e14:	bd10      	pop	{r4, pc}
	...

08002e18 <HAL_ADC_IRQHandler>:
{
 8002e18:	b510      	push	{r4, lr}
 8002e1a:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002e1c:	6803      	ldr	r3, [r0, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	0752      	lsls	r2, r2, #29
 8002e22:	d502      	bpl.n	8002e2a <HAL_ADC_IRQHandler+0x12>
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	0752      	lsls	r2, r2, #29
 8002e28:	d405      	bmi.n	8002e36 <HAL_ADC_IRQHandler+0x1e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002e2a:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002e2c:	0712      	lsls	r2, r2, #28
 8002e2e:	d52d      	bpl.n	8002e8c <HAL_ADC_IRQHandler+0x74>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	0712      	lsls	r2, r2, #28
 8002e34:	d52a      	bpl.n	8002e8c <HAL_ADC_IRQHandler+0x74>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e36:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002e38:	06d2      	lsls	r2, r2, #27
 8002e3a:	d404      	bmi.n	8002e46 <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e3c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002e3e:	2280      	movs	r2, #128	; 0x80
 8002e40:	0092      	lsls	r2, r2, #2
 8002e42:	430a      	orrs	r2, r1
 8002e44:	6562      	str	r2, [r4, #84]	; 0x54
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e46:	68d9      	ldr	r1, [r3, #12]
 8002e48:	22c0      	movs	r2, #192	; 0xc0
 8002e4a:	0112      	lsls	r2, r2, #4
 8002e4c:	4211      	tst	r1, r2
 8002e4e:	d114      	bne.n	8002e7a <HAL_ADC_IRQHandler+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002e50:	2220      	movs	r2, #32
 8002e52:	5ca2      	ldrb	r2, [r4, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e54:	2a00      	cmp	r2, #0
 8002e56:	d110      	bne.n	8002e7a <HAL_ADC_IRQHandler+0x62>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	0712      	lsls	r2, r2, #28
 8002e5c:	d50d      	bpl.n	8002e7a <HAL_ADC_IRQHandler+0x62>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	0752      	lsls	r2, r2, #29
 8002e62:	d434      	bmi.n	8002ece <HAL_ADC_IRQHandler+0xb6>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	210c      	movs	r1, #12
 8002e68:	438a      	bics	r2, r1
 8002e6a:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8002e6c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e6e:	4a22      	ldr	r2, [pc, #136]	; (8002ef8 <HAL_ADC_IRQHandler+0xe0>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	3204      	adds	r2, #4
 8002e74:	32ff      	adds	r2, #255	; 0xff
 8002e76:	4313      	orrs	r3, r2
 8002e78:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8002e7a:	0020      	movs	r0, r4
 8002e7c:	f7ff ff7a 	bl	8002d74 <HAL_ADC_ConvCpltCallback>
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8002e80:	69a3      	ldr	r3, [r4, #24]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d002      	beq.n	8002e8c <HAL_ADC_IRQHandler+0x74>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002e86:	6823      	ldr	r3, [r4, #0]
 8002e88:	220c      	movs	r2, #12
 8002e8a:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002e8c:	6823      	ldr	r3, [r4, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	0612      	lsls	r2, r2, #24
 8002e92:	d502      	bpl.n	8002e9a <HAL_ADC_IRQHandler+0x82>
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	061b      	lsls	r3, r3, #24
 8002e98:	d422      	bmi.n	8002ee0 <HAL_ADC_IRQHandler+0xc8>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002e9a:	6823      	ldr	r3, [r4, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	06d2      	lsls	r2, r2, #27
 8002ea0:	d514      	bpl.n	8002ecc <HAL_ADC_IRQHandler+0xb4>
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	06d2      	lsls	r2, r2, #27
 8002ea6:	d511      	bpl.n	8002ecc <HAL_ADC_IRQHandler+0xb4>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002ea8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002eaa:	2a00      	cmp	r2, #0
 8002eac:	d002      	beq.n	8002eb4 <HAL_ADC_IRQHandler+0x9c>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8002eae:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002eb0:	07d2      	lsls	r2, r2, #31
 8002eb2:	d508      	bpl.n	8002ec6 <HAL_ADC_IRQHandler+0xae>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002eb4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002eb6:	2102      	movs	r1, #2
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ebc:	2210      	movs	r2, #16
 8002ebe:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8002ec0:	0020      	movs	r0, r4
 8002ec2:	f7ff ff9a 	bl	8002dfa <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ec6:	6823      	ldr	r3, [r4, #0]
 8002ec8:	2210      	movs	r2, #16
 8002eca:	601a      	str	r2, [r3, #0]
}
 8002ecc:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ece:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ed6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ed8:	3a1f      	subs	r2, #31
 8002eda:	4313      	orrs	r3, r2
 8002edc:	65a3      	str	r3, [r4, #88]	; 0x58
 8002ede:	e7cc      	b.n	8002e7a <HAL_ADC_IRQHandler+0x62>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002ee0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002ee2:	2380      	movs	r3, #128	; 0x80
 8002ee4:	025b      	lsls	r3, r3, #9
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002eea:	0020      	movs	r0, r4
 8002eec:	f7ff ff84 	bl	8002df8 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002ef0:	6823      	ldr	r3, [r4, #0]
 8002ef2:	2280      	movs	r2, #128	; 0x80
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	e7d0      	b.n	8002e9a <HAL_ADC_IRQHandler+0x82>
 8002ef8:	fffffefe 	.word	0xfffffefe

08002efc <HAL_ADC_ConfigChannel>:
{
 8002efc:	b570      	push	{r4, r5, r6, lr}
 8002efe:	0004      	movs	r4, r0
 8002f00:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 8002f02:	2350      	movs	r3, #80	; 0x50
 8002f04:	5cc3      	ldrb	r3, [r0, r3]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d04b      	beq.n	8002fa2 <HAL_ADC_ConfigChannel+0xa6>
 8002f0a:	2350      	movs	r3, #80	; 0x50
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002f10:	6803      	ldr	r3, [r0, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	0752      	lsls	r2, r2, #29
 8002f16:	d41a      	bmi.n	8002f4e <HAL_ADC_ConfigChannel+0x52>
  if (sConfig->Rank != ADC_RANK_NONE)
 8002f18:	4a23      	ldr	r2, [pc, #140]	; (8002fa8 <HAL_ADC_ConfigChannel+0xac>)
 8002f1a:	6849      	ldr	r1, [r1, #4]
 8002f1c:	4291      	cmp	r1, r2
 8002f1e:	d029      	beq.n	8002f74 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002f20:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002f22:	682a      	ldr	r2, [r5, #0]
 8002f24:	0352      	lsls	r2, r2, #13
 8002f26:	0b52      	lsrs	r2, r2, #13
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	629a      	str	r2, [r3, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002f2c:	682b      	ldr	r3, [r5, #0]
 8002f2e:	035b      	lsls	r3, r3, #13
 8002f30:	d416      	bmi.n	8002f60 <HAL_ADC_ConfigChannel+0x64>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002f32:	682b      	ldr	r3, [r5, #0]
 8002f34:	039b      	lsls	r3, r3, #14
 8002f36:	d505      	bpl.n	8002f44 <HAL_ADC_ConfigChannel+0x48>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8002f38:	4a1c      	ldr	r2, [pc, #112]	; (8002fac <HAL_ADC_ConfigChannel+0xb0>)
 8002f3a:	6811      	ldr	r1, [r2, #0]
 8002f3c:	2380      	movs	r3, #128	; 0x80
 8002f3e:	03db      	lsls	r3, r3, #15
 8002f40:	430b      	orrs	r3, r1
 8002f42:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8002f44:	2350      	movs	r3, #80	; 0x50
 8002f46:	2200      	movs	r2, #0
 8002f48:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8002f4a:	2000      	movs	r0, #0
}
 8002f4c:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f4e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002f50:	2220      	movs	r2, #32
 8002f52:	4313      	orrs	r3, r2
 8002f54:	6543      	str	r3, [r0, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8002f56:	2350      	movs	r3, #80	; 0x50
 8002f58:	2200      	movs	r2, #0
 8002f5a:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8002f5c:	2001      	movs	r0, #1
 8002f5e:	e7f5      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x50>
      ADC->CCR |= ADC_CCR_TSEN;   
 8002f60:	4a12      	ldr	r2, [pc, #72]	; (8002fac <HAL_ADC_ConfigChannel+0xb0>)
 8002f62:	6811      	ldr	r1, [r2, #0]
 8002f64:	2380      	movs	r3, #128	; 0x80
 8002f66:	041b      	lsls	r3, r3, #16
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002f6c:	200a      	movs	r0, #10
 8002f6e:	f7ff fd61 	bl	8002a34 <ADC_DelayMicroSecond>
 8002f72:	e7de      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x36>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002f74:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002f76:	682a      	ldr	r2, [r5, #0]
 8002f78:	0352      	lsls	r2, r2, #13
 8002f7a:	0b52      	lsrs	r2, r2, #13
 8002f7c:	4391      	bics	r1, r2
 8002f7e:	6299      	str	r1, [r3, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002f80:	682b      	ldr	r3, [r5, #0]
 8002f82:	035b      	lsls	r3, r3, #13
 8002f84:	d504      	bpl.n	8002f90 <HAL_ADC_ConfigChannel+0x94>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8002f86:	4a09      	ldr	r2, [pc, #36]	; (8002fac <HAL_ADC_ConfigChannel+0xb0>)
 8002f88:	6813      	ldr	r3, [r2, #0]
 8002f8a:	4909      	ldr	r1, [pc, #36]	; (8002fb0 <HAL_ADC_ConfigChannel+0xb4>)
 8002f8c:	400b      	ands	r3, r1
 8002f8e:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002f90:	682b      	ldr	r3, [r5, #0]
 8002f92:	039b      	lsls	r3, r3, #14
 8002f94:	d5d6      	bpl.n	8002f44 <HAL_ADC_ConfigChannel+0x48>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8002f96:	4a05      	ldr	r2, [pc, #20]	; (8002fac <HAL_ADC_ConfigChannel+0xb0>)
 8002f98:	6813      	ldr	r3, [r2, #0]
 8002f9a:	4906      	ldr	r1, [pc, #24]	; (8002fb4 <HAL_ADC_ConfigChannel+0xb8>)
 8002f9c:	400b      	ands	r3, r1
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	e7d0      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x48>
  __HAL_LOCK(hadc);
 8002fa2:	2002      	movs	r0, #2
 8002fa4:	e7d2      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x50>
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	00001001 	.word	0x00001001
 8002fac:	40012708 	.word	0x40012708
 8002fb0:	ff7fffff 	.word	0xff7fffff
 8002fb4:	ffbfffff 	.word	0xffbfffff

08002fb8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fb8:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8002fba:	2800      	cmp	r0, #0
 8002fbc:	db11      	blt.n	8002fe2 <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fbe:	0883      	lsrs	r3, r0, #2
 8002fc0:	4e13      	ldr	r6, [pc, #76]	; (8003010 <HAL_NVIC_SetPriority+0x58>)
 8002fc2:	33c0      	adds	r3, #192	; 0xc0
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	599d      	ldr	r5, [r3, r6]
 8002fc8:	2403      	movs	r4, #3
 8002fca:	4020      	ands	r0, r4
 8002fcc:	00c0      	lsls	r0, r0, #3
 8002fce:	22ff      	movs	r2, #255	; 0xff
 8002fd0:	0014      	movs	r4, r2
 8002fd2:	4084      	lsls	r4, r0
 8002fd4:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fd6:	0189      	lsls	r1, r1, #6
 8002fd8:	400a      	ands	r2, r1
 8002fda:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fdc:	432a      	orrs	r2, r5
 8002fde:	519a      	str	r2, [r3, r6]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002fe0:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fe2:	230f      	movs	r3, #15
 8002fe4:	4003      	ands	r3, r0
 8002fe6:	3b08      	subs	r3, #8
 8002fe8:	089b      	lsrs	r3, r3, #2
 8002fea:	3306      	adds	r3, #6
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4a09      	ldr	r2, [pc, #36]	; (8003014 <HAL_NVIC_SetPriority+0x5c>)
 8002ff0:	4694      	mov	ip, r2
 8002ff2:	4463      	add	r3, ip
 8002ff4:	685c      	ldr	r4, [r3, #4]
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	4010      	ands	r0, r2
 8002ffa:	00c0      	lsls	r0, r0, #3
 8002ffc:	32fc      	adds	r2, #252	; 0xfc
 8002ffe:	0015      	movs	r5, r2
 8003000:	4085      	lsls	r5, r0
 8003002:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003004:	0189      	lsls	r1, r1, #6
 8003006:	400a      	ands	r2, r1
 8003008:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800300a:	4322      	orrs	r2, r4
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	e7e7      	b.n	8002fe0 <HAL_NVIC_SetPriority+0x28>
 8003010:	e000e100 	.word	0xe000e100
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003018:	2800      	cmp	r0, #0
 800301a:	db05      	blt.n	8003028 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800301c:	231f      	movs	r3, #31
 800301e:	4018      	ands	r0, r3
 8003020:	3b1e      	subs	r3, #30
 8003022:	4083      	lsls	r3, r0
 8003024:	4a01      	ldr	r2, [pc, #4]	; (800302c <HAL_NVIC_EnableIRQ+0x14>)
 8003026:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003028:	4770      	bx	lr
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	e000e100 	.word	0xe000e100

08003030 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8003030:	b570      	push	{r4, r5, r6, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003032:	2500      	movs	r5, #0
 8003034:	e00e      	b.n	8003054 <CRC_Handle_8+0x24>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003036:	00ac      	lsls	r4, r5, #2
 8003038:	5d0b      	ldrb	r3, [r1, r4]
 800303a:	061b      	lsls	r3, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800303c:	190c      	adds	r4, r1, r4
 800303e:	7866      	ldrb	r6, [r4, #1]
 8003040:	0436      	lsls	r6, r6, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003042:	4333      	orrs	r3, r6
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003044:	78a6      	ldrb	r6, [r4, #2]
 8003046:	0236      	lsls	r6, r6, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003048:	4333      	orrs	r3, r6
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800304a:	78e6      	ldrb	r6, [r4, #3]
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800304c:	6804      	ldr	r4, [r0, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800304e:	4333      	orrs	r3, r6
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003050:	6023      	str	r3, [r4, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003052:	3501      	adds	r5, #1
 8003054:	0893      	lsrs	r3, r2, #2
 8003056:	42ab      	cmp	r3, r5
 8003058:	d8ed      	bhi.n	8003036 <CRC_Handle_8+0x6>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800305a:	2303      	movs	r3, #3
 800305c:	001c      	movs	r4, r3
 800305e:	4014      	ands	r4, r2
 8003060:	4213      	tst	r3, r2
 8003062:	d005      	beq.n	8003070 <CRC_Handle_8+0x40>
  {
    if ((BufferLength % 4U) == 1U)
 8003064:	2c01      	cmp	r4, #1
 8003066:	d006      	beq.n	8003076 <CRC_Handle_8+0x46>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
    }
    if ((BufferLength % 4U) == 2U)
 8003068:	2c02      	cmp	r4, #2
 800306a:	d009      	beq.n	8003080 <CRC_Handle_8+0x50>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
      *pReg = data;
    }
    if ((BufferLength % 4U) == 3U)
 800306c:	2c03      	cmp	r4, #3
 800306e:	d010      	beq.n	8003092 <CRC_Handle_8+0x62>
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003070:	6803      	ldr	r3, [r0, #0]
 8003072:	6818      	ldr	r0, [r3, #0]
}
 8003074:	bd70      	pop	{r4, r5, r6, pc}
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8003076:	00ab      	lsls	r3, r5, #2
 8003078:	5ccb      	ldrb	r3, [r1, r3]
 800307a:	6802      	ldr	r2, [r0, #0]
 800307c:	7013      	strb	r3, [r2, #0]
 800307e:	e7f3      	b.n	8003068 <CRC_Handle_8+0x38>
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003080:	00ab      	lsls	r3, r5, #2
 8003082:	5cca      	ldrb	r2, [r1, r3]
 8003084:	0212      	lsls	r2, r2, #8
 8003086:	18cb      	adds	r3, r1, r3
 8003088:	785b      	ldrb	r3, [r3, #1]
 800308a:	4313      	orrs	r3, r2
      *pReg = data;
 800308c:	6802      	ldr	r2, [r0, #0]
 800308e:	8013      	strh	r3, [r2, #0]
 8003090:	e7ec      	b.n	800306c <CRC_Handle_8+0x3c>
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003092:	00ad      	lsls	r5, r5, #2
 8003094:	5d4a      	ldrb	r2, [r1, r5]
 8003096:	0212      	lsls	r2, r2, #8
 8003098:	194d      	adds	r5, r1, r5
 800309a:	786b      	ldrb	r3, [r5, #1]
 800309c:	4313      	orrs	r3, r2
      *pReg = data;
 800309e:	6802      	ldr	r2, [r0, #0]
 80030a0:	8013      	strh	r3, [r2, #0]
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80030a2:	78ab      	ldrb	r3, [r5, #2]
 80030a4:	6802      	ldr	r2, [r0, #0]
 80030a6:	7013      	strb	r3, [r2, #0]
 80030a8:	e7e2      	b.n	8003070 <CRC_Handle_8+0x40>

080030aa <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80030aa:	b570      	push	{r4, r5, r6, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80030ac:	2500      	movs	r5, #0
 80030ae:	e008      	b.n	80030c2 <CRC_Handle_16+0x18>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80030b0:	00ac      	lsls	r4, r5, #2
 80030b2:	5b0b      	ldrh	r3, [r1, r4]
 80030b4:	041b      	lsls	r3, r3, #16
 80030b6:	190c      	adds	r4, r1, r4
 80030b8:	8866      	ldrh	r6, [r4, #2]
 80030ba:	6804      	ldr	r4, [r0, #0]
 80030bc:	4333      	orrs	r3, r6
 80030be:	6023      	str	r3, [r4, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80030c0:	3501      	adds	r5, #1
 80030c2:	0853      	lsrs	r3, r2, #1
 80030c4:	42ab      	cmp	r3, r5
 80030c6:	d8f3      	bhi.n	80030b0 <CRC_Handle_16+0x6>
  }
  if ((BufferLength % 2U) != 0U)
 80030c8:	07d3      	lsls	r3, r2, #31
 80030ca:	d503      	bpl.n	80030d4 <CRC_Handle_16+0x2a>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
    *pReg = pBuffer[2U * i];
 80030cc:	00ad      	lsls	r5, r5, #2
 80030ce:	5a6b      	ldrh	r3, [r5, r1]
 80030d0:	6802      	ldr	r2, [r0, #0]
 80030d2:	8013      	strh	r3, [r2, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80030d4:	6803      	ldr	r3, [r0, #0]
 80030d6:	6818      	ldr	r0, [r3, #0]
}
 80030d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080030dc <HAL_CRC_Init>:
{
 80030dc:	b510      	push	{r4, lr}
 80030de:	1e04      	subs	r4, r0, #0
  if (hcrc == NULL)
 80030e0:	d039      	beq.n	8003156 <HAL_CRC_Init+0x7a>
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80030e2:	7f43      	ldrb	r3, [r0, #29]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d025      	beq.n	8003134 <HAL_CRC_Init+0x58>
  hcrc->State = HAL_CRC_STATE_BUSY;
 80030e8:	2302      	movs	r3, #2
 80030ea:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80030ec:	7923      	ldrb	r3, [r4, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d124      	bne.n	800313c <HAL_CRC_Init+0x60>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	4a19      	ldr	r2, [pc, #100]	; (800315c <HAL_CRC_Init+0x80>)
 80030f6:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80030f8:	6822      	ldr	r2, [r4, #0]
 80030fa:	6893      	ldr	r3, [r2, #8]
 80030fc:	2118      	movs	r1, #24
 80030fe:	438b      	bics	r3, r1
 8003100:	6093      	str	r3, [r2, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003102:	7963      	ldrb	r3, [r4, #5]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d122      	bne.n	800314e <HAL_CRC_Init+0x72>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	2201      	movs	r2, #1
 800310c:	4252      	negs	r2, r2
 800310e:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003110:	6822      	ldr	r2, [r4, #0]
 8003112:	6893      	ldr	r3, [r2, #8]
 8003114:	2160      	movs	r1, #96	; 0x60
 8003116:	438b      	bics	r3, r1
 8003118:	6961      	ldr	r1, [r4, #20]
 800311a:	430b      	orrs	r3, r1
 800311c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800311e:	6822      	ldr	r2, [r4, #0]
 8003120:	6893      	ldr	r3, [r2, #8]
 8003122:	2180      	movs	r1, #128	; 0x80
 8003124:	438b      	bics	r3, r1
 8003126:	69a1      	ldr	r1, [r4, #24]
 8003128:	430b      	orrs	r3, r1
 800312a:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800312c:	2301      	movs	r3, #1
 800312e:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8003130:	2000      	movs	r0, #0
}
 8003132:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8003134:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8003136:	f005 fd9f 	bl	8008c78 <HAL_CRC_MspInit>
 800313a:	e7d5      	b.n	80030e8 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800313c:	68e2      	ldr	r2, [r4, #12]
 800313e:	68a1      	ldr	r1, [r4, #8]
 8003140:	0020      	movs	r0, r4
 8003142:	f000 f835 	bl	80031b0 <HAL_CRCEx_Polynomial_Set>
 8003146:	2800      	cmp	r0, #0
 8003148:	d0db      	beq.n	8003102 <HAL_CRC_Init+0x26>
      return HAL_ERROR;
 800314a:	2001      	movs	r0, #1
 800314c:	e7f1      	b.n	8003132 <HAL_CRC_Init+0x56>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800314e:	6823      	ldr	r3, [r4, #0]
 8003150:	6922      	ldr	r2, [r4, #16]
 8003152:	611a      	str	r2, [r3, #16]
 8003154:	e7dc      	b.n	8003110 <HAL_CRC_Init+0x34>
    return HAL_ERROR;
 8003156:	2001      	movs	r0, #1
 8003158:	e7eb      	b.n	8003132 <HAL_CRC_Init+0x56>
 800315a:	46c0      	nop			; (mov r8, r8)
 800315c:	04c11db7 	.word	0x04c11db7

08003160 <HAL_CRC_Calculate>:
{
 8003160:	b570      	push	{r4, r5, r6, lr}
 8003162:	0004      	movs	r4, r0
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003164:	2302      	movs	r3, #2
 8003166:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8003168:	6800      	ldr	r0, [r0, #0]
 800316a:	6883      	ldr	r3, [r0, #8]
 800316c:	2501      	movs	r5, #1
 800316e:	432b      	orrs	r3, r5
 8003170:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 8003172:	6a23      	ldr	r3, [r4, #32]
 8003174:	2b02      	cmp	r3, #2
 8003176:	d017      	beq.n	80031a8 <HAL_CRC_Calculate+0x48>
 8003178:	2b03      	cmp	r3, #3
 800317a:	d00f      	beq.n	800319c <HAL_CRC_Calculate+0x3c>
 800317c:	2b01      	cmp	r3, #1
 800317e:	d00f      	beq.n	80031a0 <HAL_CRC_Calculate+0x40>
 8003180:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8003182:	2301      	movs	r3, #1
 8003184:	7763      	strb	r3, [r4, #29]
}
 8003186:	bd70      	pop	{r4, r5, r6, pc}
        hcrc->Instance->DR = pBuffer[index];
 8003188:	6820      	ldr	r0, [r4, #0]
 800318a:	009d      	lsls	r5, r3, #2
 800318c:	586d      	ldr	r5, [r5, r1]
 800318e:	6005      	str	r5, [r0, #0]
      for (index = 0U; index < BufferLength; index++)
 8003190:	3301      	adds	r3, #1
 8003192:	4293      	cmp	r3, r2
 8003194:	d3f8      	bcc.n	8003188 <HAL_CRC_Calculate+0x28>
      temp = hcrc->Instance->DR;
 8003196:	6823      	ldr	r3, [r4, #0]
 8003198:	6818      	ldr	r0, [r3, #0]
      break;
 800319a:	e7f2      	b.n	8003182 <HAL_CRC_Calculate+0x22>
  switch (hcrc->InputDataFormat)
 800319c:	2300      	movs	r3, #0
 800319e:	e7f8      	b.n	8003192 <HAL_CRC_Calculate+0x32>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80031a0:	0020      	movs	r0, r4
 80031a2:	f7ff ff45 	bl	8003030 <CRC_Handle_8>
      break;
 80031a6:	e7ec      	b.n	8003182 <HAL_CRC_Calculate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80031a8:	0020      	movs	r0, r4
 80031aa:	f7ff ff7e 	bl	80030aa <CRC_Handle_16>
      break;
 80031ae:	e7e8      	b.n	8003182 <HAL_CRC_Calculate+0x22>

080031b0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80031b0:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80031b2:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80031b4:	001c      	movs	r4, r3
 80031b6:	3b01      	subs	r3, #1
 80031b8:	2c00      	cmp	r4, #0
 80031ba:	d006      	beq.n	80031ca <HAL_CRCEx_Polynomial_Set+0x1a>
 80031bc:	241f      	movs	r4, #31
 80031be:	401c      	ands	r4, r3
 80031c0:	000d      	movs	r5, r1
 80031c2:	40e5      	lsrs	r5, r4
 80031c4:	002c      	movs	r4, r5
 80031c6:	07e4      	lsls	r4, r4, #31
 80031c8:	d5f4      	bpl.n	80031b4 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 80031ca:	2a10      	cmp	r2, #16
 80031cc:	d018      	beq.n	8003200 <HAL_CRCEx_Polynomial_Set+0x50>
 80031ce:	d809      	bhi.n	80031e4 <HAL_CRCEx_Polynomial_Set+0x34>
 80031d0:	2a00      	cmp	r2, #0
 80031d2:	d00b      	beq.n	80031ec <HAL_CRCEx_Polynomial_Set+0x3c>
 80031d4:	2a08      	cmp	r2, #8
 80031d6:	d103      	bne.n	80031e0 <HAL_CRCEx_Polynomial_Set+0x30>
      {
        status =   HAL_ERROR;
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80031d8:	2b0f      	cmp	r3, #15
 80031da:	d907      	bls.n	80031ec <HAL_CRCEx_Polynomial_Set+0x3c>
      {
        status =   HAL_ERROR;
 80031dc:	2001      	movs	r0, #1
 80031de:	e00e      	b.n	80031fe <HAL_CRCEx_Polynomial_Set+0x4e>
  switch (PolyLength)
 80031e0:	2001      	movs	r0, #1
 80031e2:	e00c      	b.n	80031fe <HAL_CRCEx_Polynomial_Set+0x4e>
 80031e4:	2a18      	cmp	r2, #24
 80031e6:	d10f      	bne.n	8003208 <HAL_CRCEx_Polynomial_Set+0x58>
      if (msb >= HAL_CRC_LENGTH_7B)
 80031e8:	2b06      	cmp	r3, #6
 80031ea:	d80f      	bhi.n	800320c <HAL_CRCEx_Polynomial_Set+0x5c>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80031ec:	6803      	ldr	r3, [r0, #0]
 80031ee:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80031f0:	6801      	ldr	r1, [r0, #0]
 80031f2:	688b      	ldr	r3, [r1, #8]
 80031f4:	2018      	movs	r0, #24
 80031f6:	4383      	bics	r3, r0
 80031f8:	431a      	orrs	r2, r3
 80031fa:	608a      	str	r2, [r1, #8]
 80031fc:	2000      	movs	r0, #0
  }
  /* Return function status */
  return status;
}
 80031fe:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8003200:	2b07      	cmp	r3, #7
 8003202:	d9f3      	bls.n	80031ec <HAL_CRCEx_Polynomial_Set+0x3c>
        status =   HAL_ERROR;
 8003204:	2001      	movs	r0, #1
 8003206:	e7fa      	b.n	80031fe <HAL_CRCEx_Polynomial_Set+0x4e>
  switch (PolyLength)
 8003208:	2001      	movs	r0, #1
 800320a:	e7f8      	b.n	80031fe <HAL_CRCEx_Polynomial_Set+0x4e>
        status =   HAL_ERROR;
 800320c:	2001      	movs	r0, #1
 800320e:	e7f6      	b.n	80031fe <HAL_CRCEx_Polynomial_Set+0x4e>

08003210 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003210:	b530      	push	{r4, r5, lr}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003212:	251c      	movs	r5, #28
 8003214:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003216:	4025      	ands	r5, r4
 8003218:	2401      	movs	r4, #1
 800321a:	40ac      	lsls	r4, r5
 800321c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800321e:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003220:	6804      	ldr	r4, [r0, #0]
 8003222:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003224:	6883      	ldr	r3, [r0, #8]
 8003226:	2b10      	cmp	r3, #16
 8003228:	d004      	beq.n	8003234 <DMA_SetConfig+0x24>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800322a:	6803      	ldr	r3, [r0, #0]
 800322c:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800322e:	6803      	ldr	r3, [r0, #0]
 8003230:	60da      	str	r2, [r3, #12]
  }
}
 8003232:	bd30      	pop	{r4, r5, pc}
    hdma->Instance->CPAR = DstAddress;
 8003234:	6803      	ldr	r3, [r0, #0]
 8003236:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003238:	6803      	ldr	r3, [r0, #0]
 800323a:	60d9      	str	r1, [r3, #12]
 800323c:	e7f9      	b.n	8003232 <DMA_SetConfig+0x22>
	...

08003240 <HAL_DMA_Init>:
{
 8003240:	b570      	push	{r4, r5, r6, lr}
 8003242:	1e04      	subs	r4, r0, #0
  if(hdma == NULL)
 8003244:	d03d      	beq.n	80032c2 <HAL_DMA_Init+0x82>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003246:	6805      	ldr	r5, [r0, #0]
 8003248:	4b1f      	ldr	r3, [pc, #124]	; (80032c8 <HAL_DMA_Init+0x88>)
 800324a:	18e8      	adds	r0, r5, r3
 800324c:	2114      	movs	r1, #20
 800324e:	f7fc ff77 	bl	8000140 <__udivsi3>
 8003252:	0080      	lsls	r0, r0, #2
 8003254:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8003256:	4b1d      	ldr	r3, [pc, #116]	; (80032cc <HAL_DMA_Init+0x8c>)
 8003258:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800325a:	2325      	movs	r3, #37	; 0x25
 800325c:	2202      	movs	r2, #2
 800325e:	54e2      	strb	r2, [r4, r3]
  tmp = hdma->Instance->CCR;
 8003260:	682b      	ldr	r3, [r5, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003262:	4a1b      	ldr	r2, [pc, #108]	; (80032d0 <HAL_DMA_Init+0x90>)
 8003264:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8003266:	68a3      	ldr	r3, [r4, #8]
 8003268:	68e1      	ldr	r1, [r4, #12]
 800326a:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800326c:	6921      	ldr	r1, [r4, #16]
 800326e:	430b      	orrs	r3, r1
 8003270:	6961      	ldr	r1, [r4, #20]
 8003272:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003274:	69a1      	ldr	r1, [r4, #24]
 8003276:	430b      	orrs	r3, r1
 8003278:	69e1      	ldr	r1, [r4, #28]
 800327a:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800327c:	6a21      	ldr	r1, [r4, #32]
 800327e:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8003280:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8003282:	602b      	str	r3, [r5, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003284:	2380      	movs	r3, #128	; 0x80
 8003286:	01db      	lsls	r3, r3, #7
 8003288:	68a2      	ldr	r2, [r4, #8]
 800328a:	429a      	cmp	r2, r3
 800328c:	d010      	beq.n	80032b0 <HAL_DMA_Init+0x70>
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800328e:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <HAL_DMA_Init+0x94>)
 8003290:	6819      	ldr	r1, [r3, #0]
 8003292:	221c      	movs	r2, #28
 8003294:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8003296:	4015      	ands	r5, r2
 8003298:	200f      	movs	r0, #15
 800329a:	40a8      	lsls	r0, r5
 800329c:	4381      	bics	r1, r0
 800329e:	6019      	str	r1, [r3, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80032a0:	6819      	ldr	r1, [r3, #0]
 80032a2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80032a4:	4002      	ands	r2, r0
 80032a6:	6860      	ldr	r0, [r4, #4]
 80032a8:	4090      	lsls	r0, r2
 80032aa:	0002      	movs	r2, r0
 80032ac:	430a      	orrs	r2, r1
 80032ae:	601a      	str	r2, [r3, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032b0:	2300      	movs	r3, #0
 80032b2:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 80032b4:	2225      	movs	r2, #37	; 0x25
 80032b6:	2101      	movs	r1, #1
 80032b8:	54a1      	strb	r1, [r4, r2]
  hdma->Lock = HAL_UNLOCKED;
 80032ba:	3a01      	subs	r2, #1
 80032bc:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 80032be:	2000      	movs	r0, #0
}
 80032c0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80032c2:	2001      	movs	r0, #1
 80032c4:	e7fc      	b.n	80032c0 <HAL_DMA_Init+0x80>
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	bffdfff8 	.word	0xbffdfff8
 80032cc:	40020000 	.word	0x40020000
 80032d0:	ffff800f 	.word	0xffff800f
 80032d4:	400200a8 	.word	0x400200a8

080032d8 <HAL_DMA_Start_IT>:
{
 80032d8:	b570      	push	{r4, r5, r6, lr}
 80032da:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 80032dc:	2024      	movs	r0, #36	; 0x24
 80032de:	5c20      	ldrb	r0, [r4, r0]
 80032e0:	2801      	cmp	r0, #1
 80032e2:	d032      	beq.n	800334a <HAL_DMA_Start_IT+0x72>
 80032e4:	2024      	movs	r0, #36	; 0x24
 80032e6:	2501      	movs	r5, #1
 80032e8:	5425      	strb	r5, [r4, r0]
  if(HAL_DMA_STATE_READY == hdma->State)
 80032ea:	3001      	adds	r0, #1
 80032ec:	5c20      	ldrb	r0, [r4, r0]
 80032ee:	2801      	cmp	r0, #1
 80032f0:	d004      	beq.n	80032fc <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 80032f2:	2324      	movs	r3, #36	; 0x24
 80032f4:	2200      	movs	r2, #0
 80032f6:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 80032f8:	2002      	movs	r0, #2
}
 80032fa:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80032fc:	3024      	adds	r0, #36	; 0x24
 80032fe:	3501      	adds	r5, #1
 8003300:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003302:	2000      	movs	r0, #0
 8003304:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003306:	6825      	ldr	r5, [r4, #0]
 8003308:	6828      	ldr	r0, [r5, #0]
 800330a:	2601      	movs	r6, #1
 800330c:	43b0      	bics	r0, r6
 800330e:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003310:	0020      	movs	r0, r4
 8003312:	f7ff ff7d 	bl	8003210 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8003316:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00b      	beq.n	8003334 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800331c:	6822      	ldr	r2, [r4, #0]
 800331e:	6813      	ldr	r3, [r2, #0]
 8003320:	210e      	movs	r1, #14
 8003322:	430b      	orrs	r3, r1
 8003324:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8003326:	6822      	ldr	r2, [r4, #0]
 8003328:	6813      	ldr	r3, [r2, #0]
 800332a:	2101      	movs	r1, #1
 800332c:	430b      	orrs	r3, r1
 800332e:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003330:	2000      	movs	r0, #0
 8003332:	e7e2      	b.n	80032fa <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003334:	6822      	ldr	r2, [r4, #0]
 8003336:	6813      	ldr	r3, [r2, #0]
 8003338:	2104      	movs	r1, #4
 800333a:	438b      	bics	r3, r1
 800333c:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800333e:	6822      	ldr	r2, [r4, #0]
 8003340:	6813      	ldr	r3, [r2, #0]
 8003342:	3106      	adds	r1, #6
 8003344:	430b      	orrs	r3, r1
 8003346:	6013      	str	r3, [r2, #0]
 8003348:	e7ed      	b.n	8003326 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 800334a:	2002      	movs	r0, #2
 800334c:	e7d5      	b.n	80032fa <HAL_DMA_Start_IT+0x22>

0800334e <HAL_DMA_Abort>:
{
 800334e:	b510      	push	{r4, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003350:	2325      	movs	r3, #37	; 0x25
 8003352:	5cc3      	ldrb	r3, [r0, r3]
 8003354:	2b02      	cmp	r3, #2
 8003356:	d006      	beq.n	8003366 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003358:	2304      	movs	r3, #4
 800335a:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800335c:	3320      	adds	r3, #32
 800335e:	2200      	movs	r2, #0
 8003360:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8003362:	2001      	movs	r0, #1
}
 8003364:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003366:	6802      	ldr	r2, [r0, #0]
 8003368:	6813      	ldr	r3, [r2, #0]
 800336a:	210e      	movs	r1, #14
 800336c:	438b      	bics	r3, r1
 800336e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003370:	6801      	ldr	r1, [r0, #0]
 8003372:	680a      	ldr	r2, [r1, #0]
 8003374:	2301      	movs	r3, #1
 8003376:	439a      	bics	r2, r3
 8003378:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800337a:	221c      	movs	r2, #28
 800337c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800337e:	400a      	ands	r2, r1
 8003380:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003382:	001c      	movs	r4, r3
 8003384:	4094      	lsls	r4, r2
 8003386:	604c      	str	r4, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003388:	2225      	movs	r2, #37	; 0x25
 800338a:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 800338c:	3323      	adds	r3, #35	; 0x23
 800338e:	2200      	movs	r2, #0
 8003390:	54c2      	strb	r2, [r0, r3]
    return status;
 8003392:	2000      	movs	r0, #0
 8003394:	e7e6      	b.n	8003364 <HAL_DMA_Abort+0x16>

08003396 <HAL_DMA_Abort_IT>:
{
 8003396:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003398:	2325      	movs	r3, #37	; 0x25
 800339a:	5cc3      	ldrb	r3, [r0, r3]
 800339c:	2b02      	cmp	r3, #2
 800339e:	d003      	beq.n	80033a8 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033a0:	2304      	movs	r3, #4
 80033a2:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80033a4:	2001      	movs	r0, #1
}
 80033a6:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033a8:	6802      	ldr	r2, [r0, #0]
 80033aa:	6813      	ldr	r3, [r2, #0]
 80033ac:	210e      	movs	r1, #14
 80033ae:	438b      	bics	r3, r1
 80033b0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80033b2:	6801      	ldr	r1, [r0, #0]
 80033b4:	680a      	ldr	r2, [r1, #0]
 80033b6:	2301      	movs	r3, #1
 80033b8:	439a      	bics	r2, r3
 80033ba:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80033bc:	221c      	movs	r2, #28
 80033be:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80033c0:	400a      	ands	r2, r1
 80033c2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80033c4:	001c      	movs	r4, r3
 80033c6:	4094      	lsls	r4, r2
 80033c8:	604c      	str	r4, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80033ca:	2225      	movs	r2, #37	; 0x25
 80033cc:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 80033ce:	3323      	adds	r3, #35	; 0x23
 80033d0:	2200      	movs	r2, #0
 80033d2:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 80033d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x4a>
      hdma->XferAbortCallback(hdma);
 80033da:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80033dc:	2000      	movs	r0, #0
 80033de:	e7e2      	b.n	80033a6 <HAL_DMA_Abort_IT+0x10>
 80033e0:	2000      	movs	r0, #0
 80033e2:	e7e0      	b.n	80033a6 <HAL_DMA_Abort_IT+0x10>

080033e4 <HAL_DMA_IRQHandler>:
{
 80033e4:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80033e8:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80033ea:	6804      	ldr	r4, [r0, #0]
 80033ec:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80033ee:	231c      	movs	r3, #28
 80033f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80033f2:	4013      	ands	r3, r2
 80033f4:	2204      	movs	r2, #4
 80033f6:	409a      	lsls	r2, r3
 80033f8:	4211      	tst	r1, r2
 80033fa:	d014      	beq.n	8003426 <HAL_DMA_IRQHandler+0x42>
 80033fc:	076a      	lsls	r2, r5, #29
 80033fe:	d512      	bpl.n	8003426 <HAL_DMA_IRQHandler+0x42>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003400:	6823      	ldr	r3, [r4, #0]
 8003402:	069b      	lsls	r3, r3, #26
 8003404:	d403      	bmi.n	800340e <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003406:	6823      	ldr	r3, [r4, #0]
 8003408:	2204      	movs	r2, #4
 800340a:	4393      	bics	r3, r2
 800340c:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800340e:	221c      	movs	r2, #28
 8003410:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003412:	401a      	ands	r2, r3
 8003414:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003416:	2304      	movs	r3, #4
 8003418:	4093      	lsls	r3, r2
 800341a:	604b      	str	r3, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 800341c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800341e:	2b00      	cmp	r3, #0
 8003420:	d000      	beq.n	8003424 <HAL_DMA_IRQHandler+0x40>
        hdma->XferHalfCpltCallback(hdma);
 8003422:	4798      	blx	r3
}
 8003424:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003426:	2202      	movs	r2, #2
 8003428:	409a      	lsls	r2, r3
 800342a:	4211      	tst	r1, r2
 800342c:	d01a      	beq.n	8003464 <HAL_DMA_IRQHandler+0x80>
 800342e:	07aa      	lsls	r2, r5, #30
 8003430:	d518      	bpl.n	8003464 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	069b      	lsls	r3, r3, #26
 8003436:	d406      	bmi.n	8003446 <HAL_DMA_IRQHandler+0x62>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003438:	6823      	ldr	r3, [r4, #0]
 800343a:	220a      	movs	r2, #10
 800343c:	4393      	bics	r3, r2
 800343e:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003440:	2325      	movs	r3, #37	; 0x25
 8003442:	3a09      	subs	r2, #9
 8003444:	54c2      	strb	r2, [r0, r3]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003446:	221c      	movs	r2, #28
 8003448:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800344a:	401a      	ands	r2, r3
 800344c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800344e:	2302      	movs	r3, #2
 8003450:	4093      	lsls	r3, r2
 8003452:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003454:	2324      	movs	r3, #36	; 0x24
 8003456:	2200      	movs	r2, #0
 8003458:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferCpltCallback != NULL)
 800345a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0e1      	beq.n	8003424 <HAL_DMA_IRQHandler+0x40>
      hdma->XferCpltCallback(hdma);
 8003460:	4798      	blx	r3
 8003462:	e7df      	b.n	8003424 <HAL_DMA_IRQHandler+0x40>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003464:	2208      	movs	r2, #8
 8003466:	409a      	lsls	r2, r3
 8003468:	4211      	tst	r1, r2
 800346a:	d0db      	beq.n	8003424 <HAL_DMA_IRQHandler+0x40>
 800346c:	072b      	lsls	r3, r5, #28
 800346e:	d5d9      	bpl.n	8003424 <HAL_DMA_IRQHandler+0x40>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	220e      	movs	r2, #14
 8003474:	4393      	bics	r3, r2
 8003476:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003478:	320e      	adds	r2, #14
 800347a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800347c:	401a      	ands	r2, r3
 800347e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003480:	2301      	movs	r3, #1
 8003482:	001c      	movs	r4, r3
 8003484:	4094      	lsls	r4, r2
 8003486:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003488:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800348a:	2225      	movs	r2, #37	; 0x25
 800348c:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 800348e:	3323      	adds	r3, #35	; 0x23
 8003490:	2200      	movs	r2, #0
 8003492:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8003494:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0c4      	beq.n	8003424 <HAL_DMA_IRQHandler+0x40>
      hdma->XferErrorCallback(hdma);
 800349a:	4798      	blx	r3
  return;
 800349c:	e7c2      	b.n	8003424 <HAL_DMA_IRQHandler+0x40>
	...

080034a0 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80034a0:	4b2b      	ldr	r3, [pc, #172]	; (8003550 <FLASH_SetErrorCode+0xb0>)
 80034a2:	6999      	ldr	r1, [r3, #24]
 80034a4:	2280      	movs	r2, #128	; 0x80
 80034a6:	0052      	lsls	r2, r2, #1
 80034a8:	000b      	movs	r3, r1
 80034aa:	4013      	ands	r3, r2
 80034ac:	4211      	tst	r1, r2
 80034ae:	d006      	beq.n	80034be <FLASH_SetErrorCode+0x1e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80034b0:	4a28      	ldr	r2, [pc, #160]	; (8003554 <FLASH_SetErrorCode+0xb4>)
 80034b2:	6953      	ldr	r3, [r2, #20]
 80034b4:	2102      	movs	r1, #2
 80034b6:	430b      	orrs	r3, r1
 80034b8:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 80034ba:	2380      	movs	r3, #128	; 0x80
 80034bc:	005b      	lsls	r3, r3, #1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80034be:	4a24      	ldr	r2, [pc, #144]	; (8003550 <FLASH_SetErrorCode+0xb0>)
 80034c0:	6992      	ldr	r2, [r2, #24]
 80034c2:	0592      	lsls	r2, r2, #22
 80034c4:	d507      	bpl.n	80034d6 <FLASH_SetErrorCode+0x36>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80034c6:	4923      	ldr	r1, [pc, #140]	; (8003554 <FLASH_SetErrorCode+0xb4>)
 80034c8:	694a      	ldr	r2, [r1, #20]
 80034ca:	2001      	movs	r0, #1
 80034cc:	4302      	orrs	r2, r0
 80034ce:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_PGAERR;
 80034d0:	2280      	movs	r2, #128	; 0x80
 80034d2:	0092      	lsls	r2, r2, #2
 80034d4:	4313      	orrs	r3, r2
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80034d6:	4a1e      	ldr	r2, [pc, #120]	; (8003550 <FLASH_SetErrorCode+0xb0>)
 80034d8:	6992      	ldr	r2, [r2, #24]
 80034da:	0552      	lsls	r2, r2, #21
 80034dc:	d507      	bpl.n	80034ee <FLASH_SetErrorCode+0x4e>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80034de:	491d      	ldr	r1, [pc, #116]	; (8003554 <FLASH_SetErrorCode+0xb4>)
 80034e0:	694a      	ldr	r2, [r1, #20]
 80034e2:	2008      	movs	r0, #8
 80034e4:	4302      	orrs	r2, r0
 80034e6:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_SIZERR;
 80034e8:	2280      	movs	r2, #128	; 0x80
 80034ea:	00d2      	lsls	r2, r2, #3
 80034ec:	4313      	orrs	r3, r2
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80034ee:	4a18      	ldr	r2, [pc, #96]	; (8003550 <FLASH_SetErrorCode+0xb0>)
 80034f0:	6992      	ldr	r2, [r2, #24]
 80034f2:	0512      	lsls	r2, r2, #20
 80034f4:	d507      	bpl.n	8003506 <FLASH_SetErrorCode+0x66>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80034f6:	4917      	ldr	r1, [pc, #92]	; (8003554 <FLASH_SetErrorCode+0xb4>)
 80034f8:	694a      	ldr	r2, [r1, #20]
 80034fa:	2004      	movs	r0, #4
 80034fc:	4302      	orrs	r2, r0
 80034fe:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8003500:	2280      	movs	r2, #128	; 0x80
 8003502:	0112      	lsls	r2, r2, #4
 8003504:	4313      	orrs	r3, r2
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8003506:	4a12      	ldr	r2, [pc, #72]	; (8003550 <FLASH_SetErrorCode+0xb0>)
 8003508:	6992      	ldr	r2, [r2, #24]
 800350a:	0492      	lsls	r2, r2, #18
 800350c:	d507      	bpl.n	800351e <FLASH_SetErrorCode+0x7e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800350e:	4911      	ldr	r1, [pc, #68]	; (8003554 <FLASH_SetErrorCode+0xb4>)
 8003510:	694a      	ldr	r2, [r1, #20]
 8003512:	2010      	movs	r0, #16
 8003514:	4302      	orrs	r2, r0
 8003516:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_RDERR;
 8003518:	2280      	movs	r2, #128	; 0x80
 800351a:	0192      	lsls	r2, r2, #6
 800351c:	4313      	orrs	r3, r2
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800351e:	4a0c      	ldr	r2, [pc, #48]	; (8003550 <FLASH_SetErrorCode+0xb0>)
 8003520:	6992      	ldr	r2, [r2, #24]
 8003522:	0392      	lsls	r2, r2, #14
 8003524:	d505      	bpl.n	8003532 <FLASH_SetErrorCode+0x92>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8003526:	480b      	ldr	r0, [pc, #44]	; (8003554 <FLASH_SetErrorCode+0xb4>)
 8003528:	6942      	ldr	r2, [r0, #20]
 800352a:	2120      	movs	r1, #32
 800352c:	430a      	orrs	r2, r1
 800352e:	6142      	str	r2, [r0, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8003530:	430b      	orrs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8003532:	4a07      	ldr	r2, [pc, #28]	; (8003550 <FLASH_SetErrorCode+0xb0>)
 8003534:	6992      	ldr	r2, [r2, #24]
 8003536:	03d2      	lsls	r2, r2, #15
 8003538:	d507      	bpl.n	800354a <FLASH_SetErrorCode+0xaa>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800353a:	4906      	ldr	r1, [pc, #24]	; (8003554 <FLASH_SetErrorCode+0xb4>)
 800353c:	694a      	ldr	r2, [r1, #20]
 800353e:	2040      	movs	r0, #64	; 0x40
 8003540:	4302      	orrs	r2, r0
 8003542:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8003544:	2280      	movs	r2, #128	; 0x80
 8003546:	0252      	lsls	r2, r2, #9
 8003548:	4313      	orrs	r3, r2
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800354a:	4a01      	ldr	r2, [pc, #4]	; (8003550 <FLASH_SetErrorCode+0xb0>)
 800354c:	6193      	str	r3, [r2, #24]
}  
 800354e:	4770      	bx	lr
 8003550:	40022000 	.word	0x40022000
 8003554:	200009e0 	.word	0x200009e0

08003558 <FLASH_WaitForLastOperation>:
{
 8003558:	b570      	push	{r4, r5, r6, lr}
 800355a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800355c:	f7ff fa64 	bl	8002a28 <HAL_GetTick>
 8003560:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003562:	4b1c      	ldr	r3, [pc, #112]	; (80035d4 <FLASH_WaitForLastOperation+0x7c>)
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	07db      	lsls	r3, r3, #31
 8003568:	d50a      	bpl.n	8003580 <FLASH_WaitForLastOperation+0x28>
    if (Timeout != HAL_MAX_DELAY)
 800356a:	1c63      	adds	r3, r4, #1
 800356c:	d0f9      	beq.n	8003562 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800356e:	2c00      	cmp	r4, #0
 8003570:	d004      	beq.n	800357c <FLASH_WaitForLastOperation+0x24>
 8003572:	f7ff fa59 	bl	8002a28 <HAL_GetTick>
 8003576:	1b40      	subs	r0, r0, r5
 8003578:	42a0      	cmp	r0, r4
 800357a:	d9f2      	bls.n	8003562 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 800357c:	2003      	movs	r0, #3
 800357e:	e027      	b.n	80035d0 <FLASH_WaitForLastOperation+0x78>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003580:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <FLASH_WaitForLastOperation+0x7c>)
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	079b      	lsls	r3, r3, #30
 8003586:	d502      	bpl.n	800358e <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003588:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <FLASH_WaitForLastOperation+0x7c>)
 800358a:	2202      	movs	r2, #2
 800358c:	619a      	str	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800358e:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <FLASH_WaitForLastOperation+0x7c>)
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	05db      	lsls	r3, r3, #23
 8003594:	d419      	bmi.n	80035ca <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8003596:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <FLASH_WaitForLastOperation+0x7c>)
 8003598:	699b      	ldr	r3, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800359a:	059b      	lsls	r3, r3, #22
 800359c:	d415      	bmi.n	80035ca <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800359e:	4b0d      	ldr	r3, [pc, #52]	; (80035d4 <FLASH_WaitForLastOperation+0x7c>)
 80035a0:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80035a2:	055b      	lsls	r3, r3, #21
 80035a4:	d411      	bmi.n	80035ca <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80035a6:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <FLASH_WaitForLastOperation+0x7c>)
 80035a8:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80035aa:	051b      	lsls	r3, r3, #20
 80035ac:	d40d      	bmi.n	80035ca <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80035ae:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <FLASH_WaitForLastOperation+0x7c>)
 80035b0:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80035b2:	049b      	lsls	r3, r3, #18
 80035b4:	d409      	bmi.n	80035ca <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80035b6:	4b07      	ldr	r3, [pc, #28]	; (80035d4 <FLASH_WaitForLastOperation+0x7c>)
 80035b8:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80035ba:	039b      	lsls	r3, r3, #14
 80035bc:	d405      	bmi.n	80035ca <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 80035be:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <FLASH_WaitForLastOperation+0x7c>)
 80035c0:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80035c2:	03db      	lsls	r3, r3, #15
 80035c4:	d401      	bmi.n	80035ca <FLASH_WaitForLastOperation+0x72>
  return HAL_OK;
 80035c6:	2000      	movs	r0, #0
 80035c8:	e002      	b.n	80035d0 <FLASH_WaitForLastOperation+0x78>
    FLASH_SetErrorCode();
 80035ca:	f7ff ff69 	bl	80034a0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80035ce:	2001      	movs	r0, #1
}
 80035d0:	bd70      	pop	{r4, r5, r6, pc}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	40022000 	.word	0x40022000

080035d8 <HAL_FLASHEx_DATAEEPROM_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80035d8:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <HAL_FLASHEx_DATAEEPROM_Unlock+0x30>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	07db      	lsls	r3, r3, #31
 80035de:	d50e      	bpl.n	80035fe <HAL_FLASHEx_DATAEEPROM_Unlock+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035e0:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80035e4:	b672      	cpsid	i
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 80035e6:	4b08      	ldr	r3, [pc, #32]	; (8003608 <HAL_FLASHEx_DATAEEPROM_Unlock+0x30>)
 80035e8:	4908      	ldr	r1, [pc, #32]	; (800360c <HAL_FLASHEx_DATAEEPROM_Unlock+0x34>)
 80035ea:	60d9      	str	r1, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 80035ec:	4908      	ldr	r1, [pc, #32]	; (8003610 <HAL_FLASHEx_DATAEEPROM_Unlock+0x38>)
 80035ee:	60d9      	str	r1, [r3, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f0:	f382 8810 	msr	PRIMASK, r2

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	07db      	lsls	r3, r3, #31
 80035f8:	d403      	bmi.n	8003602 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2a>
    {
      return HAL_ERROR;
    }
  }

  return HAL_OK;  
 80035fa:	2000      	movs	r0, #0
 80035fc:	e000      	b.n	8003600 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>
 80035fe:	2000      	movs	r0, #0
}
 8003600:	4770      	bx	lr
      return HAL_ERROR;
 8003602:	2001      	movs	r0, #1
 8003604:	e7fc      	b.n	8003600 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	40022000 	.word	0x40022000
 800360c:	89abcdef 	.word	0x89abcdef
 8003610:	02030405 	.word	0x02030405

08003614 <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8003614:	4a03      	ldr	r2, [pc, #12]	; (8003624 <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
 8003616:	6853      	ldr	r3, [r2, #4]
 8003618:	2101      	movs	r1, #1
 800361a:	430b      	orrs	r3, r1
 800361c:	6053      	str	r3, [r2, #4]
  
  return HAL_OK;
}
 800361e:	2000      	movs	r0, #0
 8003620:	4770      	bx	lr
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	40022000 	.word	0x40022000

08003628 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8003628:	b570      	push	{r4, r5, r6, lr}
 800362a:	0006      	movs	r6, r0
 800362c:	000d      	movs	r5, r1
 800362e:	0014      	movs	r4, r2
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003630:	4b12      	ldr	r3, [pc, #72]	; (800367c <HAL_FLASHEx_DATAEEPROM_Program+0x54>)
 8003632:	7c1b      	ldrb	r3, [r3, #16]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d01f      	beq.n	8003678 <HAL_FLASHEx_DATAEEPROM_Program+0x50>
 8003638:	4b10      	ldr	r3, [pc, #64]	; (800367c <HAL_FLASHEx_DATAEEPROM_Program+0x54>)
 800363a:	2201      	movs	r2, #1
 800363c:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800363e:	4810      	ldr	r0, [pc, #64]	; (8003680 <HAL_FLASHEx_DATAEEPROM_Program+0x58>)
 8003640:	f7ff ff8a 	bl	8003558 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 8003644:	2800      	cmp	r0, #0
 8003646:	d10c      	bne.n	8003662 <HAL_FLASHEx_DATAEEPROM_Program+0x3a>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003648:	4b0c      	ldr	r3, [pc, #48]	; (800367c <HAL_FLASHEx_DATAEEPROM_Program+0x54>)
 800364a:	2200      	movs	r2, #0
 800364c:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800364e:	2e02      	cmp	r6, #2
 8003650:	d006      	beq.n	8003660 <HAL_FLASHEx_DATAEEPROM_Program+0x38>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8003652:	2e01      	cmp	r6, #1
 8003654:	d009      	beq.n	800366a <HAL_FLASHEx_DATAEEPROM_Program+0x42>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8003656:	2e00      	cmp	r6, #0
 8003658:	d10a      	bne.n	8003670 <HAL_FLASHEx_DATAEEPROM_Program+0x48>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800365a:	b2e4      	uxtb	r4, r4
 800365c:	702c      	strb	r4, [r5, #0]
 800365e:	e000      	b.n	8003662 <HAL_FLASHEx_DATAEEPROM_Program+0x3a>
      *(__IO uint32_t *)Address = Data;
 8003660:	602c      	str	r4, [r5, #0]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003662:	4b06      	ldr	r3, [pc, #24]	; (800367c <HAL_FLASHEx_DATAEEPROM_Program+0x54>)
 8003664:	2200      	movs	r2, #0
 8003666:	741a      	strb	r2, [r3, #16]

  return status;
}
 8003668:	bd70      	pop	{r4, r5, r6, pc}
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800366a:	b2a4      	uxth	r4, r4
 800366c:	802c      	strh	r4, [r5, #0]
 800366e:	e7f8      	b.n	8003662 <HAL_FLASHEx_DATAEEPROM_Program+0x3a>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003670:	4803      	ldr	r0, [pc, #12]	; (8003680 <HAL_FLASHEx_DATAEEPROM_Program+0x58>)
 8003672:	f7ff ff71 	bl	8003558 <FLASH_WaitForLastOperation>
 8003676:	e7f4      	b.n	8003662 <HAL_FLASHEx_DATAEEPROM_Program+0x3a>
  __HAL_LOCK(&pFlash);
 8003678:	2002      	movs	r0, #2
 800367a:	e7f5      	b.n	8003668 <HAL_FLASHEx_DATAEEPROM_Program+0x40>
 800367c:	200009e0 	.word	0x200009e0
 8003680:	0000c350 	.word	0x0000c350

08003684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003684:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00U;
 8003686:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003688:	e057      	b.n	800373a <HAL_GPIO_Init+0xb6>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800368a:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800368c:	005f      	lsls	r7, r3, #1
 800368e:	2603      	movs	r6, #3
 8003690:	40be      	lsls	r6, r7
 8003692:	43b4      	bics	r4, r6
 8003694:	0026      	movs	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003696:	68cc      	ldr	r4, [r1, #12]
 8003698:	40bc      	lsls	r4, r7
 800369a:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 800369c:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800369e:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036a0:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036a2:	684a      	ldr	r2, [r1, #4]
 80036a4:	0916      	lsrs	r6, r2, #4
 80036a6:	2201      	movs	r2, #1
 80036a8:	4032      	ands	r2, r6
 80036aa:	409a      	lsls	r2, r3
 80036ac:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80036ae:	6042      	str	r2, [r0, #4]
 80036b0:	e053      	b.n	800375a <HAL_GPIO_Init+0xd6>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036b2:	08dc      	lsrs	r4, r3, #3
 80036b4:	3408      	adds	r4, #8
 80036b6:	00a4      	lsls	r4, r4, #2
 80036b8:	5826      	ldr	r6, [r4, r0]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80036ba:	3205      	adds	r2, #5
 80036bc:	401a      	ands	r2, r3
 80036be:	0092      	lsls	r2, r2, #2
 80036c0:	270f      	movs	r7, #15
 80036c2:	4097      	lsls	r7, r2
 80036c4:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80036c6:	690f      	ldr	r7, [r1, #16]
 80036c8:	4097      	lsls	r7, r2
 80036ca:	003a      	movs	r2, r7
 80036cc:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 80036ce:	5022      	str	r2, [r4, r0]
 80036d0:	e057      	b.n	8003782 <HAL_GPIO_Init+0xfe>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80036d2:	2605      	movs	r6, #5
 80036d4:	e000      	b.n	80036d8 <HAL_GPIO_Init+0x54>
 80036d6:	2600      	movs	r6, #0
 80036d8:	40a6      	lsls	r6, r4
 80036da:	0034      	movs	r4, r6
 80036dc:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036de:	3202      	adds	r2, #2
 80036e0:	0092      	lsls	r2, r2, #2
 80036e2:	4e47      	ldr	r6, [pc, #284]	; (8003800 <HAL_GPIO_Init+0x17c>)
 80036e4:	5194      	str	r4, [r2, r6]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036e6:	4a47      	ldr	r2, [pc, #284]	; (8003804 <HAL_GPIO_Init+0x180>)
 80036e8:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80036ea:	43ea      	mvns	r2, r5
 80036ec:	0026      	movs	r6, r4
 80036ee:	43ae      	bics	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036f0:	684f      	ldr	r7, [r1, #4]
 80036f2:	03ff      	lsls	r7, r7, #15
 80036f4:	d501      	bpl.n	80036fa <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80036f6:	432c      	orrs	r4, r5
 80036f8:	0026      	movs	r6, r4
        }
        EXTI->IMR = temp;
 80036fa:	4c42      	ldr	r4, [pc, #264]	; (8003804 <HAL_GPIO_Init+0x180>)
 80036fc:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 80036fe:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8003700:	0026      	movs	r6, r4
 8003702:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003704:	684f      	ldr	r7, [r1, #4]
 8003706:	03bf      	lsls	r7, r7, #14
 8003708:	d501      	bpl.n	800370e <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 800370a:	432c      	orrs	r4, r5
 800370c:	0026      	movs	r6, r4
        }
        EXTI->EMR = temp;
 800370e:	4c3d      	ldr	r4, [pc, #244]	; (8003804 <HAL_GPIO_Init+0x180>)
 8003710:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003712:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8003714:	0026      	movs	r6, r4
 8003716:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003718:	684f      	ldr	r7, [r1, #4]
 800371a:	02ff      	lsls	r7, r7, #11
 800371c:	d501      	bpl.n	8003722 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 800371e:	432c      	orrs	r4, r5
 8003720:	0026      	movs	r6, r4
        }
        EXTI->RTSR = temp;
 8003722:	4c38      	ldr	r4, [pc, #224]	; (8003804 <HAL_GPIO_Init+0x180>)
 8003724:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8003726:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8003728:	4022      	ands	r2, r4
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800372a:	684e      	ldr	r6, [r1, #4]
 800372c:	02b6      	lsls	r6, r6, #10
 800372e:	d501      	bpl.n	8003734 <HAL_GPIO_Init+0xb0>
        {
          temp |= iocurrent;
 8003730:	002a      	movs	r2, r5
 8003732:	4322      	orrs	r2, r4
        }
        EXTI->FTSR = temp;
 8003734:	4c33      	ldr	r4, [pc, #204]	; (8003804 <HAL_GPIO_Init+0x180>)
 8003736:	60e2      	str	r2, [r4, #12]
      }
    }
    position++;
 8003738:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 800373a:	680c      	ldr	r4, [r1, #0]
 800373c:	0022      	movs	r2, r4
 800373e:	40da      	lsrs	r2, r3
 8003740:	d05d      	beq.n	80037fe <HAL_GPIO_Init+0x17a>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003742:	2201      	movs	r2, #1
 8003744:	409a      	lsls	r2, r3
 8003746:	0025      	movs	r5, r4
 8003748:	4015      	ands	r5, r2
    if (iocurrent)
 800374a:	4214      	tst	r4, r2
 800374c:	d0f4      	beq.n	8003738 <HAL_GPIO_Init+0xb4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800374e:	2403      	movs	r4, #3
 8003750:	684e      	ldr	r6, [r1, #4]
 8003752:	4034      	ands	r4, r6
 8003754:	3c01      	subs	r4, #1
 8003756:	2c01      	cmp	r4, #1
 8003758:	d997      	bls.n	800368a <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800375a:	2203      	movs	r2, #3
 800375c:	684c      	ldr	r4, [r1, #4]
 800375e:	4022      	ands	r2, r4
 8003760:	2a03      	cmp	r2, #3
 8003762:	d009      	beq.n	8003778 <HAL_GPIO_Init+0xf4>
        temp = GPIOx->PUPDR;
 8003764:	68c2      	ldr	r2, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003766:	005e      	lsls	r6, r3, #1
 8003768:	2403      	movs	r4, #3
 800376a:	40b4      	lsls	r4, r6
 800376c:	43a2      	bics	r2, r4
 800376e:	0014      	movs	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003770:	688a      	ldr	r2, [r1, #8]
 8003772:	40b2      	lsls	r2, r6
 8003774:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8003776:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003778:	2203      	movs	r2, #3
 800377a:	684c      	ldr	r4, [r1, #4]
 800377c:	4022      	ands	r2, r4
 800377e:	2a02      	cmp	r2, #2
 8003780:	d097      	beq.n	80036b2 <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8003782:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003784:	005e      	lsls	r6, r3, #1
 8003786:	2203      	movs	r2, #3
 8003788:	0017      	movs	r7, r2
 800378a:	40b7      	lsls	r7, r6
 800378c:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800378e:	684f      	ldr	r7, [r1, #4]
 8003790:	403a      	ands	r2, r7
 8003792:	40b2      	lsls	r2, r6
 8003794:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8003796:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003798:	22c0      	movs	r2, #192	; 0xc0
 800379a:	0292      	lsls	r2, r2, #10
 800379c:	684c      	ldr	r4, [r1, #4]
 800379e:	4214      	tst	r4, r2
 80037a0:	d0ca      	beq.n	8003738 <HAL_GPIO_Init+0xb4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037a2:	4c19      	ldr	r4, [pc, #100]	; (8003808 <HAL_GPIO_Init+0x184>)
 80037a4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80037a6:	2601      	movs	r6, #1
 80037a8:	4332      	orrs	r2, r6
 80037aa:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 80037ac:	089a      	lsrs	r2, r3, #2
 80037ae:	1c94      	adds	r4, r2, #2
 80037b0:	00a4      	lsls	r4, r4, #2
 80037b2:	4e13      	ldr	r6, [pc, #76]	; (8003800 <HAL_GPIO_Init+0x17c>)
 80037b4:	59a7      	ldr	r7, [r4, r6]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80037b6:	2603      	movs	r6, #3
 80037b8:	401e      	ands	r6, r3
 80037ba:	00b4      	lsls	r4, r6, #2
 80037bc:	260f      	movs	r6, #15
 80037be:	40a6      	lsls	r6, r4
 80037c0:	43b7      	bics	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80037c2:	26a0      	movs	r6, #160	; 0xa0
 80037c4:	05f6      	lsls	r6, r6, #23
 80037c6:	42b0      	cmp	r0, r6
 80037c8:	d085      	beq.n	80036d6 <HAL_GPIO_Init+0x52>
 80037ca:	4e10      	ldr	r6, [pc, #64]	; (800380c <HAL_GPIO_Init+0x188>)
 80037cc:	42b0      	cmp	r0, r6
 80037ce:	d00e      	beq.n	80037ee <HAL_GPIO_Init+0x16a>
 80037d0:	4e0f      	ldr	r6, [pc, #60]	; (8003810 <HAL_GPIO_Init+0x18c>)
 80037d2:	42b0      	cmp	r0, r6
 80037d4:	d00d      	beq.n	80037f2 <HAL_GPIO_Init+0x16e>
 80037d6:	4e0f      	ldr	r6, [pc, #60]	; (8003814 <HAL_GPIO_Init+0x190>)
 80037d8:	42b0      	cmp	r0, r6
 80037da:	d00c      	beq.n	80037f6 <HAL_GPIO_Init+0x172>
 80037dc:	4e0e      	ldr	r6, [pc, #56]	; (8003818 <HAL_GPIO_Init+0x194>)
 80037de:	42b0      	cmp	r0, r6
 80037e0:	d00b      	beq.n	80037fa <HAL_GPIO_Init+0x176>
 80037e2:	4e0e      	ldr	r6, [pc, #56]	; (800381c <HAL_GPIO_Init+0x198>)
 80037e4:	42b0      	cmp	r0, r6
 80037e6:	d100      	bne.n	80037ea <HAL_GPIO_Init+0x166>
 80037e8:	e773      	b.n	80036d2 <HAL_GPIO_Init+0x4e>
 80037ea:	2606      	movs	r6, #6
 80037ec:	e774      	b.n	80036d8 <HAL_GPIO_Init+0x54>
 80037ee:	2601      	movs	r6, #1
 80037f0:	e772      	b.n	80036d8 <HAL_GPIO_Init+0x54>
 80037f2:	2602      	movs	r6, #2
 80037f4:	e770      	b.n	80036d8 <HAL_GPIO_Init+0x54>
 80037f6:	2603      	movs	r6, #3
 80037f8:	e76e      	b.n	80036d8 <HAL_GPIO_Init+0x54>
 80037fa:	2604      	movs	r6, #4
 80037fc:	e76c      	b.n	80036d8 <HAL_GPIO_Init+0x54>
  }
}
 80037fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003800:	40010000 	.word	0x40010000
 8003804:	40010400 	.word	0x40010400
 8003808:	40021000 	.word	0x40021000
 800380c:	50000400 	.word	0x50000400
 8003810:	50000800 	.word	0x50000800
 8003814:	50000c00 	.word	0x50000c00
 8003818:	50001000 	.word	0x50001000
 800381c:	50001c00 	.word	0x50001c00

08003820 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003820:	6903      	ldr	r3, [r0, #16]
 8003822:	420b      	tst	r3, r1
 8003824:	d001      	beq.n	800382a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8003826:	2001      	movs	r0, #1
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003828:	4770      	bx	lr
    bitstatus = GPIO_PIN_RESET;
 800382a:	2000      	movs	r0, #0
 800382c:	e7fc      	b.n	8003828 <HAL_GPIO_ReadPin+0x8>

0800382e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800382e:	2a00      	cmp	r2, #0
 8003830:	d001      	beq.n	8003836 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003832:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003834:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8003836:	6281      	str	r1, [r0, #40]	; 0x28
}
 8003838:	e7fc      	b.n	8003834 <HAL_GPIO_WritePin+0x6>
	...

0800383c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800383c:	b570      	push	{r4, r5, r6, lr}
 800383e:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003840:	d028      	beq.n	8003894 <HAL_IWDG_Init+0x58>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003842:	6803      	ldr	r3, [r0, #0]
 8003844:	4a14      	ldr	r2, [pc, #80]	; (8003898 <HAL_IWDG_Init+0x5c>)
 8003846:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003848:	6803      	ldr	r3, [r0, #0]
 800384a:	4a14      	ldr	r2, [pc, #80]	; (800389c <HAL_IWDG_Init+0x60>)
 800384c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800384e:	6803      	ldr	r3, [r0, #0]
 8003850:	6842      	ldr	r2, [r0, #4]
 8003852:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003854:	6803      	ldr	r3, [r0, #0]
 8003856:	6882      	ldr	r2, [r0, #8]
 8003858:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800385a:	f7ff f8e5 	bl	8002a28 <HAL_GetTick>
 800385e:	0005      	movs	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003860:	6823      	ldr	r3, [r4, #0]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	0752      	lsls	r2, r2, #29
 8003866:	d00a      	beq.n	800387e <HAL_IWDG_Init+0x42>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003868:	f7ff f8de 	bl	8002a28 <HAL_GetTick>
 800386c:	1b40      	subs	r0, r0, r5
 800386e:	282a      	cmp	r0, #42	; 0x2a
 8003870:	d9f6      	bls.n	8003860 <HAL_IWDG_Init+0x24>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	075b      	lsls	r3, r3, #29
 8003878:	d0f2      	beq.n	8003860 <HAL_IWDG_Init+0x24>
      {
        return HAL_TIMEOUT;
 800387a:	2003      	movs	r0, #3
 800387c:	e00b      	b.n	8003896 <HAL_IWDG_Init+0x5a>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800387e:	6919      	ldr	r1, [r3, #16]
 8003880:	68e2      	ldr	r2, [r4, #12]
 8003882:	4291      	cmp	r1, r2
 8003884:	d002      	beq.n	800388c <HAL_IWDG_Init+0x50>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003886:	611a      	str	r2, [r3, #16]
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
 8003888:	2000      	movs	r0, #0
 800388a:	e004      	b.n	8003896 <HAL_IWDG_Init+0x5a>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800388c:	4a04      	ldr	r2, [pc, #16]	; (80038a0 <HAL_IWDG_Init+0x64>)
 800388e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003890:	2000      	movs	r0, #0
 8003892:	e000      	b.n	8003896 <HAL_IWDG_Init+0x5a>
    return HAL_ERROR;
 8003894:	2001      	movs	r0, #1
}
 8003896:	bd70      	pop	{r4, r5, r6, pc}
 8003898:	0000cccc 	.word	0x0000cccc
 800389c:	00005555 	.word	0x00005555
 80038a0:	0000aaaa 	.word	0x0000aaaa

080038a4 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80038a4:	6803      	ldr	r3, [r0, #0]
 80038a6:	4a02      	ldr	r2, [pc, #8]	; (80038b0 <HAL_IWDG_Refresh+0xc>)
 80038a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 80038aa:	2000      	movs	r0, #0
 80038ac:	4770      	bx	lr
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	0000aaaa 	.word	0x0000aaaa

080038b4 <HAL_PWR_ConfigPVD>:
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 80038b4:	4a1c      	ldr	r2, [pc, #112]	; (8003928 <HAL_PWR_ConfigPVD+0x74>)
 80038b6:	6813      	ldr	r3, [r2, #0]
 80038b8:	21e0      	movs	r1, #224	; 0xe0
 80038ba:	438b      	bics	r3, r1
 80038bc:	6801      	ldr	r1, [r0, #0]
 80038be:	430b      	orrs	r3, r1
 80038c0:	6013      	str	r3, [r2, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 80038c2:	4b1a      	ldr	r3, [pc, #104]	; (800392c <HAL_PWR_ConfigPVD+0x78>)
 80038c4:	6859      	ldr	r1, [r3, #4]
 80038c6:	4a1a      	ldr	r2, [pc, #104]	; (8003930 <HAL_PWR_ConfigPVD+0x7c>)
 80038c8:	4011      	ands	r1, r2
 80038ca:	6059      	str	r1, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80038cc:	6819      	ldr	r1, [r3, #0]
 80038ce:	4011      	ands	r1, r2
 80038d0:	6019      	str	r1, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 80038d2:	68d9      	ldr	r1, [r3, #12]
 80038d4:	4011      	ands	r1, r2
 80038d6:	60d9      	str	r1, [r3, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80038d8:	6899      	ldr	r1, [r3, #8]
 80038da:	400a      	ands	r2, r1
 80038dc:	609a      	str	r2, [r3, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80038de:	6843      	ldr	r3, [r0, #4]
 80038e0:	03db      	lsls	r3, r3, #15
 80038e2:	d505      	bpl.n	80038f0 <HAL_PWR_ConfigPVD+0x3c>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80038e4:	4a11      	ldr	r2, [pc, #68]	; (800392c <HAL_PWR_ConfigPVD+0x78>)
 80038e6:	6811      	ldr	r1, [r2, #0]
 80038e8:	2380      	movs	r3, #128	; 0x80
 80038ea:	025b      	lsls	r3, r3, #9
 80038ec:	430b      	orrs	r3, r1
 80038ee:	6013      	str	r3, [r2, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80038f0:	6843      	ldr	r3, [r0, #4]
 80038f2:	039b      	lsls	r3, r3, #14
 80038f4:	d505      	bpl.n	8003902 <HAL_PWR_ConfigPVD+0x4e>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 80038f6:	4a0d      	ldr	r2, [pc, #52]	; (800392c <HAL_PWR_ConfigPVD+0x78>)
 80038f8:	6851      	ldr	r1, [r2, #4]
 80038fa:	2380      	movs	r3, #128	; 0x80
 80038fc:	025b      	lsls	r3, r3, #9
 80038fe:	430b      	orrs	r3, r1
 8003900:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8003902:	6843      	ldr	r3, [r0, #4]
 8003904:	07db      	lsls	r3, r3, #31
 8003906:	d505      	bpl.n	8003914 <HAL_PWR_ConfigPVD+0x60>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8003908:	4a08      	ldr	r2, [pc, #32]	; (800392c <HAL_PWR_ConfigPVD+0x78>)
 800390a:	6891      	ldr	r1, [r2, #8]
 800390c:	2380      	movs	r3, #128	; 0x80
 800390e:	025b      	lsls	r3, r3, #9
 8003910:	430b      	orrs	r3, r1
 8003912:	6093      	str	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8003914:	6843      	ldr	r3, [r0, #4]
 8003916:	079b      	lsls	r3, r3, #30
 8003918:	d505      	bpl.n	8003926 <HAL_PWR_ConfigPVD+0x72>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800391a:	4a04      	ldr	r2, [pc, #16]	; (800392c <HAL_PWR_ConfigPVD+0x78>)
 800391c:	68d1      	ldr	r1, [r2, #12]
 800391e:	2380      	movs	r3, #128	; 0x80
 8003920:	025b      	lsls	r3, r3, #9
 8003922:	430b      	orrs	r3, r1
 8003924:	60d3      	str	r3, [r2, #12]
  }
}
 8003926:	4770      	bx	lr
 8003928:	40007000 	.word	0x40007000
 800392c:	40010400 	.word	0x40010400
 8003930:	fffeffff 	.word	0xfffeffff

08003934 <HAL_PWR_EnablePVD>:
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR, PWR_CR_PVDE);
 8003934:	4a02      	ldr	r2, [pc, #8]	; (8003940 <HAL_PWR_EnablePVD+0xc>)
 8003936:	6813      	ldr	r3, [r2, #0]
 8003938:	2110      	movs	r1, #16
 800393a:	430b      	orrs	r3, r1
 800393c:	6013      	str	r3, [r2, #0]
}
 800393e:	4770      	bx	lr
 8003940:	40007000 	.word	0x40007000

08003944 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003944:	b510      	push	{r4, lr}
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003946:	4b26      	ldr	r3, [pc, #152]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003948:	68da      	ldr	r2, [r3, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800394a:	230c      	movs	r3, #12
 800394c:	4013      	ands	r3, r2
 800394e:	2b08      	cmp	r3, #8
 8003950:	d042      	beq.n	80039d8 <HAL_RCC_GetSysClockFreq+0x94>
 8003952:	2b0c      	cmp	r3, #12
 8003954:	d011      	beq.n	800397a <HAL_RCC_GetSysClockFreq+0x36>
 8003956:	2b04      	cmp	r3, #4
 8003958:	d009      	beq.n	800396e <HAL_RCC_GetSysClockFreq+0x2a>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800395a:	4b21      	ldr	r3, [pc, #132]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	0b52      	lsrs	r2, r2, #13
 8003960:	2307      	movs	r3, #7
 8003962:	4013      	ands	r3, r2
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003964:	3301      	adds	r3, #1
 8003966:	2080      	movs	r0, #128	; 0x80
 8003968:	0200      	lsls	r0, r0, #8
 800396a:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 800396c:	bd10      	pop	{r4, pc}
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800396e:	4b1c      	ldr	r3, [pc, #112]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	06db      	lsls	r3, r3, #27
 8003974:	d532      	bpl.n	80039dc <HAL_RCC_GetSysClockFreq+0x98>
        sysclockfreq =  (HSI_VALUE >> 2);
 8003976:	481b      	ldr	r0, [pc, #108]	; (80039e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003978:	e7f8      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x28>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800397a:	0c91      	lsrs	r1, r2, #18
 800397c:	230f      	movs	r3, #15
 800397e:	400b      	ands	r3, r1
 8003980:	4919      	ldr	r1, [pc, #100]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003982:	5cc8      	ldrb	r0, [r1, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003984:	0d92      	lsrs	r2, r2, #22
 8003986:	2303      	movs	r3, #3
 8003988:	401a      	ands	r2, r3
 800398a:	1c54      	adds	r4, r2, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800398c:	4b14      	ldr	r3, [pc, #80]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	03db      	lsls	r3, r3, #15
 8003992:	d509      	bpl.n	80039a8 <HAL_RCC_GetSysClockFreq+0x64>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003994:	4a15      	ldr	r2, [pc, #84]	; (80039ec <HAL_RCC_GetSysClockFreq+0xa8>)
 8003996:	2300      	movs	r3, #0
 8003998:	2100      	movs	r1, #0
 800399a:	f7fc fda5 	bl	80004e8 <__aeabi_lmul>
 800399e:	0022      	movs	r2, r4
 80039a0:	2300      	movs	r3, #0
 80039a2:	f7fc fd81 	bl	80004a8 <__aeabi_uldivmod>
 80039a6:	e7e1      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x28>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80039a8:	4b0d      	ldr	r3, [pc, #52]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	06db      	lsls	r3, r3, #27
 80039ae:	d509      	bpl.n	80039c4 <HAL_RCC_GetSysClockFreq+0x80>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80039b0:	4a0c      	ldr	r2, [pc, #48]	; (80039e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039b2:	2300      	movs	r3, #0
 80039b4:	2100      	movs	r1, #0
 80039b6:	f7fc fd97 	bl	80004e8 <__aeabi_lmul>
 80039ba:	0022      	movs	r2, r4
 80039bc:	2300      	movs	r3, #0
 80039be:	f7fc fd73 	bl	80004a8 <__aeabi_uldivmod>
 80039c2:	e7d3      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x28>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80039c4:	4a0a      	ldr	r2, [pc, #40]	; (80039f0 <HAL_RCC_GetSysClockFreq+0xac>)
 80039c6:	2300      	movs	r3, #0
 80039c8:	2100      	movs	r1, #0
 80039ca:	f7fc fd8d 	bl	80004e8 <__aeabi_lmul>
 80039ce:	0022      	movs	r2, r4
 80039d0:	2300      	movs	r3, #0
 80039d2:	f7fc fd69 	bl	80004a8 <__aeabi_uldivmod>
 80039d6:	e7c9      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x28>
  switch (tmpreg & RCC_CFGR_SWS)
 80039d8:	4804      	ldr	r0, [pc, #16]	; (80039ec <HAL_RCC_GetSysClockFreq+0xa8>)
 80039da:	e7c7      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x28>
        sysclockfreq =  HSI_VALUE;
 80039dc:	4804      	ldr	r0, [pc, #16]	; (80039f0 <HAL_RCC_GetSysClockFreq+0xac>)
  return sysclockfreq;
 80039de:	e7c5      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x28>
 80039e0:	40021000 	.word	0x40021000
 80039e4:	003d0900 	.word	0x003d0900
 80039e8:	0800e680 	.word	0x0800e680
 80039ec:	007a1200 	.word	0x007a1200
 80039f0:	00f42400 	.word	0x00f42400

080039f4 <HAL_RCC_OscConfig>:
{
 80039f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039f6:	b083      	sub	sp, #12
 80039f8:	1e04      	subs	r4, r0, #0
  if(RCC_OscInitStruct == NULL)
 80039fa:	d100      	bne.n	80039fe <HAL_RCC_OscConfig+0xa>
 80039fc:	e29f      	b.n	8003f3e <HAL_RCC_OscConfig+0x54a>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039fe:	4bc5      	ldr	r3, [pc, #788]	; (8003d14 <HAL_RCC_OscConfig+0x320>)
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	250c      	movs	r5, #12
 8003a04:	4015      	ands	r5, r2
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a06:	68de      	ldr	r6, [r3, #12]
 8003a08:	2380      	movs	r3, #128	; 0x80
 8003a0a:	025b      	lsls	r3, r3, #9
 8003a0c:	401e      	ands	r6, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a0e:	6803      	ldr	r3, [r0, #0]
 8003a10:	07db      	lsls	r3, r3, #31
 8003a12:	d536      	bpl.n	8003a82 <HAL_RCC_OscConfig+0x8e>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a14:	2d08      	cmp	r5, #8
 8003a16:	d02c      	beq.n	8003a72 <HAL_RCC_OscConfig+0x7e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a18:	2d0c      	cmp	r5, #12
 8003a1a:	d028      	beq.n	8003a6e <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a1c:	6863      	ldr	r3, [r4, #4]
 8003a1e:	2280      	movs	r2, #128	; 0x80
 8003a20:	0252      	lsls	r2, r2, #9
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d055      	beq.n	8003ad2 <HAL_RCC_OscConfig+0xde>
 8003a26:	22a0      	movs	r2, #160	; 0xa0
 8003a28:	02d2      	lsls	r2, r2, #11
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d058      	beq.n	8003ae0 <HAL_RCC_OscConfig+0xec>
 8003a2e:	4bb9      	ldr	r3, [pc, #740]	; (8003d14 <HAL_RCC_OscConfig+0x320>)
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	49b9      	ldr	r1, [pc, #740]	; (8003d18 <HAL_RCC_OscConfig+0x324>)
 8003a34:	400a      	ands	r2, r1
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	2180      	movs	r1, #128	; 0x80
 8003a3c:	0249      	lsls	r1, r1, #9
 8003a3e:	400a      	ands	r2, r1
 8003a40:	9201      	str	r2, [sp, #4]
 8003a42:	9a01      	ldr	r2, [sp, #4]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	49b5      	ldr	r1, [pc, #724]	; (8003d1c <HAL_RCC_OscConfig+0x328>)
 8003a48:	400a      	ands	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a4c:	6863      	ldr	r3, [r4, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d052      	beq.n	8003af8 <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();
 8003a52:	f7fe ffe9 	bl	8002a28 <HAL_GetTick>
 8003a56:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a58:	4bae      	ldr	r3, [pc, #696]	; (8003d14 <HAL_RCC_OscConfig+0x320>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	039b      	lsls	r3, r3, #14
 8003a5e:	d410      	bmi.n	8003a82 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a60:	f7fe ffe2 	bl	8002a28 <HAL_GetTick>
 8003a64:	1bc0      	subs	r0, r0, r7
 8003a66:	2864      	cmp	r0, #100	; 0x64
 8003a68:	d9f6      	bls.n	8003a58 <HAL_RCC_OscConfig+0x64>
            return HAL_TIMEOUT;
 8003a6a:	2003      	movs	r0, #3
 8003a6c:	e268      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a6e:	2e00      	cmp	r6, #0
 8003a70:	d0d4      	beq.n	8003a1c <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a72:	4ba8      	ldr	r3, [pc, #672]	; (8003d14 <HAL_RCC_OscConfig+0x320>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	039b      	lsls	r3, r3, #14
 8003a78:	d503      	bpl.n	8003a82 <HAL_RCC_OscConfig+0x8e>
 8003a7a:	6863      	ldr	r3, [r4, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d100      	bne.n	8003a82 <HAL_RCC_OscConfig+0x8e>
 8003a80:	e260      	b.n	8003f44 <HAL_RCC_OscConfig+0x550>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a82:	6823      	ldr	r3, [r4, #0]
 8003a84:	079b      	lsls	r3, r3, #30
 8003a86:	d56d      	bpl.n	8003b64 <HAL_RCC_OscConfig+0x170>
    hsi_state = RCC_OscInitStruct->HSIState;
 8003a88:	68e3      	ldr	r3, [r4, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003a8a:	069a      	lsls	r2, r3, #26
 8003a8c:	d505      	bpl.n	8003a9a <HAL_RCC_OscConfig+0xa6>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003a8e:	48a1      	ldr	r0, [pc, #644]	; (8003d14 <HAL_RCC_OscConfig+0x320>)
 8003a90:	6802      	ldr	r2, [r0, #0]
 8003a92:	2120      	movs	r1, #32
 8003a94:	430a      	orrs	r2, r1
 8003a96:	6002      	str	r2, [r0, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003a98:	438b      	bics	r3, r1
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a9a:	2d04      	cmp	r5, #4
 8003a9c:	d03c      	beq.n	8003b18 <HAL_RCC_OscConfig+0x124>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a9e:	2d0c      	cmp	r5, #12
 8003aa0:	d038      	beq.n	8003b14 <HAL_RCC_OscConfig+0x120>
      if(hsi_state != RCC_HSI_OFF)
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d100      	bne.n	8003aa8 <HAL_RCC_OscConfig+0xb4>
 8003aa6:	e0b0      	b.n	8003c0a <HAL_RCC_OscConfig+0x216>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003aa8:	499a      	ldr	r1, [pc, #616]	; (8003d14 <HAL_RCC_OscConfig+0x320>)
 8003aaa:	680a      	ldr	r2, [r1, #0]
 8003aac:	2009      	movs	r0, #9
 8003aae:	4382      	bics	r2, r0
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8003ab4:	f7fe ffb8 	bl	8002a28 <HAL_GetTick>
 8003ab8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003aba:	4b96      	ldr	r3, [pc, #600]	; (8003d14 <HAL_RCC_OscConfig+0x320>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	075b      	lsls	r3, r3, #29
 8003ac0:	d500      	bpl.n	8003ac4 <HAL_RCC_OscConfig+0xd0>
 8003ac2:	e099      	b.n	8003bf8 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ac4:	f7fe ffb0 	bl	8002a28 <HAL_GetTick>
 8003ac8:	1b80      	subs	r0, r0, r6
 8003aca:	2802      	cmp	r0, #2
 8003acc:	d9f5      	bls.n	8003aba <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8003ace:	2003      	movs	r0, #3
 8003ad0:	e236      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ad2:	4a90      	ldr	r2, [pc, #576]	; (8003d14 <HAL_RCC_OscConfig+0x320>)
 8003ad4:	6811      	ldr	r1, [r2, #0]
 8003ad6:	2380      	movs	r3, #128	; 0x80
 8003ad8:	025b      	lsls	r3, r3, #9
 8003ada:	430b      	orrs	r3, r1
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	e7b5      	b.n	8003a4c <HAL_RCC_OscConfig+0x58>
 8003ae0:	4b8c      	ldr	r3, [pc, #560]	; (8003d14 <HAL_RCC_OscConfig+0x320>)
 8003ae2:	6819      	ldr	r1, [r3, #0]
 8003ae4:	2280      	movs	r2, #128	; 0x80
 8003ae6:	02d2      	lsls	r2, r2, #11
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	6819      	ldr	r1, [r3, #0]
 8003aee:	2280      	movs	r2, #128	; 0x80
 8003af0:	0252      	lsls	r2, r2, #9
 8003af2:	430a      	orrs	r2, r1
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	e7a9      	b.n	8003a4c <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 8003af8:	f7fe ff96 	bl	8002a28 <HAL_GetTick>
 8003afc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003afe:	4b85      	ldr	r3, [pc, #532]	; (8003d14 <HAL_RCC_OscConfig+0x320>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	039b      	lsls	r3, r3, #14
 8003b04:	d5bd      	bpl.n	8003a82 <HAL_RCC_OscConfig+0x8e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b06:	f7fe ff8f 	bl	8002a28 <HAL_GetTick>
 8003b0a:	1bc0      	subs	r0, r0, r7
 8003b0c:	2864      	cmp	r0, #100	; 0x64
 8003b0e:	d9f6      	bls.n	8003afe <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8003b10:	2003      	movs	r0, #3
 8003b12:	e215      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b14:	2e00      	cmp	r6, #0
 8003b16:	d1c4      	bne.n	8003aa2 <HAL_RCC_OscConfig+0xae>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003b18:	4a7e      	ldr	r2, [pc, #504]	; (8003d14 <HAL_RCC_OscConfig+0x320>)
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	0752      	lsls	r2, r2, #29
 8003b1e:	d502      	bpl.n	8003b26 <HAL_RCC_OscConfig+0x132>
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d100      	bne.n	8003b26 <HAL_RCC_OscConfig+0x132>
 8003b24:	e210      	b.n	8003f48 <HAL_RCC_OscConfig+0x554>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b26:	4e7b      	ldr	r6, [pc, #492]	; (8003d14 <HAL_RCC_OscConfig+0x320>)
 8003b28:	6872      	ldr	r2, [r6, #4]
 8003b2a:	497d      	ldr	r1, [pc, #500]	; (8003d20 <HAL_RCC_OscConfig+0x32c>)
 8003b2c:	400a      	ands	r2, r1
 8003b2e:	6921      	ldr	r1, [r4, #16]
 8003b30:	0209      	lsls	r1, r1, #8
 8003b32:	430a      	orrs	r2, r1
 8003b34:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003b36:	6832      	ldr	r2, [r6, #0]
 8003b38:	2109      	movs	r1, #9
 8003b3a:	438a      	bics	r2, r1
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b40:	f7ff ff00 	bl	8003944 <HAL_RCC_GetSysClockFreq>
 8003b44:	68f2      	ldr	r2, [r6, #12]
 8003b46:	0912      	lsrs	r2, r2, #4
 8003b48:	230f      	movs	r3, #15
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	4a75      	ldr	r2, [pc, #468]	; (8003d24 <HAL_RCC_OscConfig+0x330>)
 8003b4e:	5cd3      	ldrb	r3, [r2, r3]
 8003b50:	40d8      	lsrs	r0, r3
 8003b52:	4b75      	ldr	r3, [pc, #468]	; (8003d28 <HAL_RCC_OscConfig+0x334>)
 8003b54:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8003b56:	4b75      	ldr	r3, [pc, #468]	; (8003d2c <HAL_RCC_OscConfig+0x338>)
 8003b58:	6818      	ldr	r0, [r3, #0]
 8003b5a:	f005 f945 	bl	8008de8 <HAL_InitTick>
      if(status != HAL_OK)
 8003b5e:	2800      	cmp	r0, #0
 8003b60:	d000      	beq.n	8003b64 <HAL_RCC_OscConfig+0x170>
 8003b62:	e1ed      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	06db      	lsls	r3, r3, #27
 8003b68:	d52d      	bpl.n	8003bc6 <HAL_RCC_OscConfig+0x1d2>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b6a:	2d00      	cmp	r5, #0
 8003b6c:	d160      	bne.n	8003c30 <HAL_RCC_OscConfig+0x23c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b6e:	4b69      	ldr	r3, [pc, #420]	; (8003d14 <HAL_RCC_OscConfig+0x320>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	059b      	lsls	r3, r3, #22
 8003b74:	d503      	bpl.n	8003b7e <HAL_RCC_OscConfig+0x18a>
 8003b76:	69e3      	ldr	r3, [r4, #28]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d100      	bne.n	8003b7e <HAL_RCC_OscConfig+0x18a>
 8003b7c:	e1e6      	b.n	8003f4c <HAL_RCC_OscConfig+0x558>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b7e:	4a65      	ldr	r2, [pc, #404]	; (8003d14 <HAL_RCC_OscConfig+0x320>)
 8003b80:	6853      	ldr	r3, [r2, #4]
 8003b82:	496b      	ldr	r1, [pc, #428]	; (8003d30 <HAL_RCC_OscConfig+0x33c>)
 8003b84:	400b      	ands	r3, r1
 8003b86:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b8c:	6853      	ldr	r3, [r2, #4]
 8003b8e:	021b      	lsls	r3, r3, #8
 8003b90:	0a1b      	lsrs	r3, r3, #8
 8003b92:	6a21      	ldr	r1, [r4, #32]
 8003b94:	0609      	lsls	r1, r1, #24
 8003b96:	430b      	orrs	r3, r1
 8003b98:	6053      	str	r3, [r2, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003b9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b9c:	0b59      	lsrs	r1, r3, #13
 8003b9e:	3101      	adds	r1, #1
 8003ba0:	2380      	movs	r3, #128	; 0x80
 8003ba2:	021b      	lsls	r3, r3, #8
 8003ba4:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003ba6:	68d1      	ldr	r1, [r2, #12]
 8003ba8:	0909      	lsrs	r1, r1, #4
 8003baa:	220f      	movs	r2, #15
 8003bac:	400a      	ands	r2, r1
 8003bae:	495d      	ldr	r1, [pc, #372]	; (8003d24 <HAL_RCC_OscConfig+0x330>)
 8003bb0:	5c8a      	ldrb	r2, [r1, r2]
 8003bb2:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003bb4:	4a5c      	ldr	r2, [pc, #368]	; (8003d28 <HAL_RCC_OscConfig+0x334>)
 8003bb6:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8003bb8:	4b5c      	ldr	r3, [pc, #368]	; (8003d2c <HAL_RCC_OscConfig+0x338>)
 8003bba:	6818      	ldr	r0, [r3, #0]
 8003bbc:	f005 f914 	bl	8008de8 <HAL_InitTick>
        if(status != HAL_OK)
 8003bc0:	2800      	cmp	r0, #0
 8003bc2:	d000      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x1d2>
 8003bc4:	e1bc      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	071b      	lsls	r3, r3, #28
 8003bca:	d57d      	bpl.n	8003cc8 <HAL_RCC_OscConfig+0x2d4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bcc:	6963      	ldr	r3, [r4, #20]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d067      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x2ae>
      __HAL_RCC_LSI_ENABLE();
 8003bd2:	4a50      	ldr	r2, [pc, #320]	; (8003d14 <HAL_RCC_OscConfig+0x320>)
 8003bd4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003bdc:	f7fe ff24 	bl	8002a28 <HAL_GetTick>
 8003be0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003be2:	4b4c      	ldr	r3, [pc, #304]	; (8003d14 <HAL_RCC_OscConfig+0x320>)
 8003be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be6:	079b      	lsls	r3, r3, #30
 8003be8:	d46e      	bmi.n	8003cc8 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bea:	f7fe ff1d 	bl	8002a28 <HAL_GetTick>
 8003bee:	1b80      	subs	r0, r0, r6
 8003bf0:	2802      	cmp	r0, #2
 8003bf2:	d9f6      	bls.n	8003be2 <HAL_RCC_OscConfig+0x1ee>
          return HAL_TIMEOUT;
 8003bf4:	2003      	movs	r0, #3
 8003bf6:	e1a3      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf8:	4946      	ldr	r1, [pc, #280]	; (8003d14 <HAL_RCC_OscConfig+0x320>)
 8003bfa:	684b      	ldr	r3, [r1, #4]
 8003bfc:	4a48      	ldr	r2, [pc, #288]	; (8003d20 <HAL_RCC_OscConfig+0x32c>)
 8003bfe:	4013      	ands	r3, r2
 8003c00:	6922      	ldr	r2, [r4, #16]
 8003c02:	0212      	lsls	r2, r2, #8
 8003c04:	4313      	orrs	r3, r2
 8003c06:	604b      	str	r3, [r1, #4]
 8003c08:	e7ac      	b.n	8003b64 <HAL_RCC_OscConfig+0x170>
        __HAL_RCC_HSI_DISABLE();
 8003c0a:	4a42      	ldr	r2, [pc, #264]	; (8003d14 <HAL_RCC_OscConfig+0x320>)
 8003c0c:	6813      	ldr	r3, [r2, #0]
 8003c0e:	2101      	movs	r1, #1
 8003c10:	438b      	bics	r3, r1
 8003c12:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003c14:	f7fe ff08 	bl	8002a28 <HAL_GetTick>
 8003c18:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c1a:	4b3e      	ldr	r3, [pc, #248]	; (8003d14 <HAL_RCC_OscConfig+0x320>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	075b      	lsls	r3, r3, #29
 8003c20:	d5a0      	bpl.n	8003b64 <HAL_RCC_OscConfig+0x170>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c22:	f7fe ff01 	bl	8002a28 <HAL_GetTick>
 8003c26:	1b80      	subs	r0, r0, r6
 8003c28:	2802      	cmp	r0, #2
 8003c2a:	d9f6      	bls.n	8003c1a <HAL_RCC_OscConfig+0x226>
            return HAL_TIMEOUT;
 8003c2c:	2003      	movs	r0, #3
 8003c2e:	e187      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c30:	69e3      	ldr	r3, [r4, #28]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d022      	beq.n	8003c7c <HAL_RCC_OscConfig+0x288>
        __HAL_RCC_MSI_ENABLE();
 8003c36:	4a37      	ldr	r2, [pc, #220]	; (8003d14 <HAL_RCC_OscConfig+0x320>)
 8003c38:	6811      	ldr	r1, [r2, #0]
 8003c3a:	2380      	movs	r3, #128	; 0x80
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	430b      	orrs	r3, r1
 8003c40:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003c42:	f7fe fef1 	bl	8002a28 <HAL_GetTick>
 8003c46:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003c48:	4b32      	ldr	r3, [pc, #200]	; (8003d14 <HAL_RCC_OscConfig+0x320>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	059b      	lsls	r3, r3, #22
 8003c4e:	d406      	bmi.n	8003c5e <HAL_RCC_OscConfig+0x26a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c50:	f7fe feea 	bl	8002a28 <HAL_GetTick>
 8003c54:	1b80      	subs	r0, r0, r6
 8003c56:	2802      	cmp	r0, #2
 8003c58:	d9f6      	bls.n	8003c48 <HAL_RCC_OscConfig+0x254>
            return HAL_TIMEOUT;
 8003c5a:	2003      	movs	r0, #3
 8003c5c:	e170      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c5e:	4a2d      	ldr	r2, [pc, #180]	; (8003d14 <HAL_RCC_OscConfig+0x320>)
 8003c60:	6853      	ldr	r3, [r2, #4]
 8003c62:	4933      	ldr	r1, [pc, #204]	; (8003d30 <HAL_RCC_OscConfig+0x33c>)
 8003c64:	400b      	ands	r3, r1
 8003c66:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c6c:	6853      	ldr	r3, [r2, #4]
 8003c6e:	021b      	lsls	r3, r3, #8
 8003c70:	0a1b      	lsrs	r3, r3, #8
 8003c72:	6a21      	ldr	r1, [r4, #32]
 8003c74:	0609      	lsls	r1, r1, #24
 8003c76:	430b      	orrs	r3, r1
 8003c78:	6053      	str	r3, [r2, #4]
 8003c7a:	e7a4      	b.n	8003bc6 <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_MSI_DISABLE();
 8003c7c:	4a25      	ldr	r2, [pc, #148]	; (8003d14 <HAL_RCC_OscConfig+0x320>)
 8003c7e:	6813      	ldr	r3, [r2, #0]
 8003c80:	492c      	ldr	r1, [pc, #176]	; (8003d34 <HAL_RCC_OscConfig+0x340>)
 8003c82:	400b      	ands	r3, r1
 8003c84:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003c86:	f7fe fecf 	bl	8002a28 <HAL_GetTick>
 8003c8a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003c8c:	4b21      	ldr	r3, [pc, #132]	; (8003d14 <HAL_RCC_OscConfig+0x320>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	059b      	lsls	r3, r3, #22
 8003c92:	d598      	bpl.n	8003bc6 <HAL_RCC_OscConfig+0x1d2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c94:	f7fe fec8 	bl	8002a28 <HAL_GetTick>
 8003c98:	1b80      	subs	r0, r0, r6
 8003c9a:	2802      	cmp	r0, #2
 8003c9c:	d9f6      	bls.n	8003c8c <HAL_RCC_OscConfig+0x298>
            return HAL_TIMEOUT;
 8003c9e:	2003      	movs	r0, #3
 8003ca0:	e14e      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
      __HAL_RCC_LSI_DISABLE();
 8003ca2:	4a1c      	ldr	r2, [pc, #112]	; (8003d14 <HAL_RCC_OscConfig+0x320>)
 8003ca4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	438b      	bics	r3, r1
 8003caa:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003cac:	f7fe febc 	bl	8002a28 <HAL_GetTick>
 8003cb0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cb2:	4b18      	ldr	r3, [pc, #96]	; (8003d14 <HAL_RCC_OscConfig+0x320>)
 8003cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb6:	079b      	lsls	r3, r3, #30
 8003cb8:	d506      	bpl.n	8003cc8 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cba:	f7fe feb5 	bl	8002a28 <HAL_GetTick>
 8003cbe:	1b80      	subs	r0, r0, r6
 8003cc0:	2802      	cmp	r0, #2
 8003cc2:	d9f6      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 8003cc4:	2003      	movs	r0, #3
 8003cc6:	e13b      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cc8:	6823      	ldr	r3, [r4, #0]
 8003cca:	075b      	lsls	r3, r3, #29
 8003ccc:	d400      	bmi.n	8003cd0 <HAL_RCC_OscConfig+0x2dc>
 8003cce:	e08e      	b.n	8003dee <HAL_RCC_OscConfig+0x3fa>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cd0:	4b10      	ldr	r3, [pc, #64]	; (8003d14 <HAL_RCC_OscConfig+0x320>)
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	d41b      	bmi.n	8003d10 <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cd8:	4a0e      	ldr	r2, [pc, #56]	; (8003d14 <HAL_RCC_OscConfig+0x320>)
 8003cda:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8003cdc:	2380      	movs	r3, #128	; 0x80
 8003cde:	055b      	lsls	r3, r3, #21
 8003ce0:	430b      	orrs	r3, r1
 8003ce2:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 8003ce4:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce6:	4b14      	ldr	r3, [pc, #80]	; (8003d38 <HAL_RCC_OscConfig+0x344>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	05db      	lsls	r3, r3, #23
 8003cec:	d528      	bpl.n	8003d40 <HAL_RCC_OscConfig+0x34c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cee:	68a3      	ldr	r3, [r4, #8]
 8003cf0:	2280      	movs	r2, #128	; 0x80
 8003cf2:	0052      	lsls	r2, r2, #1
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d037      	beq.n	8003d68 <HAL_RCC_OscConfig+0x374>
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d14d      	bne.n	8003d98 <HAL_RCC_OscConfig+0x3a4>
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <HAL_RCC_OscConfig+0x320>)
 8003cfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d00:	490c      	ldr	r1, [pc, #48]	; (8003d34 <HAL_RCC_OscConfig+0x340>)
 8003d02:	400a      	ands	r2, r1
 8003d04:	651a      	str	r2, [r3, #80]	; 0x50
 8003d06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d08:	490c      	ldr	r1, [pc, #48]	; (8003d3c <HAL_RCC_OscConfig+0x348>)
 8003d0a:	400a      	ands	r2, r1
 8003d0c:	651a      	str	r2, [r3, #80]	; 0x50
 8003d0e:	e031      	b.n	8003d74 <HAL_RCC_OscConfig+0x380>
    FlagStatus       pwrclkchanged = RESET;
 8003d10:	2600      	movs	r6, #0
 8003d12:	e7e8      	b.n	8003ce6 <HAL_RCC_OscConfig+0x2f2>
 8003d14:	40021000 	.word	0x40021000
 8003d18:	fffeffff 	.word	0xfffeffff
 8003d1c:	fffbffff 	.word	0xfffbffff
 8003d20:	ffffe0ff 	.word	0xffffe0ff
 8003d24:	0800e668 	.word	0x0800e668
 8003d28:	2000000c 	.word	0x2000000c
 8003d2c:	20000004 	.word	0x20000004
 8003d30:	ffff1fff 	.word	0xffff1fff
 8003d34:	fffffeff 	.word	0xfffffeff
 8003d38:	40007000 	.word	0x40007000
 8003d3c:	fffffbff 	.word	0xfffffbff
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d40:	4a88      	ldr	r2, [pc, #544]	; (8003f64 <HAL_RCC_OscConfig+0x570>)
 8003d42:	6811      	ldr	r1, [r2, #0]
 8003d44:	2380      	movs	r3, #128	; 0x80
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	430b      	orrs	r3, r1
 8003d4a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003d4c:	f7fe fe6c 	bl	8002a28 <HAL_GetTick>
 8003d50:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d52:	4b84      	ldr	r3, [pc, #528]	; (8003f64 <HAL_RCC_OscConfig+0x570>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	05db      	lsls	r3, r3, #23
 8003d58:	d4c9      	bmi.n	8003cee <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d5a:	f7fe fe65 	bl	8002a28 <HAL_GetTick>
 8003d5e:	1bc0      	subs	r0, r0, r7
 8003d60:	2864      	cmp	r0, #100	; 0x64
 8003d62:	d9f6      	bls.n	8003d52 <HAL_RCC_OscConfig+0x35e>
          return HAL_TIMEOUT;
 8003d64:	2003      	movs	r0, #3
 8003d66:	e0eb      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d68:	4a7f      	ldr	r2, [pc, #508]	; (8003f68 <HAL_RCC_OscConfig+0x574>)
 8003d6a:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8003d6c:	2380      	movs	r3, #128	; 0x80
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	430b      	orrs	r3, r1
 8003d72:	6513      	str	r3, [r2, #80]	; 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d74:	68a3      	ldr	r3, [r4, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d028      	beq.n	8003dcc <HAL_RCC_OscConfig+0x3d8>
      tickstart = HAL_GetTick();
 8003d7a:	f7fe fe55 	bl	8002a28 <HAL_GetTick>
 8003d7e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d80:	4b79      	ldr	r3, [pc, #484]	; (8003f68 <HAL_RCC_OscConfig+0x574>)
 8003d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d84:	059b      	lsls	r3, r3, #22
 8003d86:	d430      	bmi.n	8003dea <HAL_RCC_OscConfig+0x3f6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d88:	f7fe fe4e 	bl	8002a28 <HAL_GetTick>
 8003d8c:	1bc0      	subs	r0, r0, r7
 8003d8e:	4b77      	ldr	r3, [pc, #476]	; (8003f6c <HAL_RCC_OscConfig+0x578>)
 8003d90:	4298      	cmp	r0, r3
 8003d92:	d9f5      	bls.n	8003d80 <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 8003d94:	2003      	movs	r0, #3
 8003d96:	e0d3      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d98:	22a0      	movs	r2, #160	; 0xa0
 8003d9a:	00d2      	lsls	r2, r2, #3
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d009      	beq.n	8003db4 <HAL_RCC_OscConfig+0x3c0>
 8003da0:	4b71      	ldr	r3, [pc, #452]	; (8003f68 <HAL_RCC_OscConfig+0x574>)
 8003da2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003da4:	4972      	ldr	r1, [pc, #456]	; (8003f70 <HAL_RCC_OscConfig+0x57c>)
 8003da6:	400a      	ands	r2, r1
 8003da8:	651a      	str	r2, [r3, #80]	; 0x50
 8003daa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dac:	4971      	ldr	r1, [pc, #452]	; (8003f74 <HAL_RCC_OscConfig+0x580>)
 8003dae:	400a      	ands	r2, r1
 8003db0:	651a      	str	r2, [r3, #80]	; 0x50
 8003db2:	e7df      	b.n	8003d74 <HAL_RCC_OscConfig+0x380>
 8003db4:	4b6c      	ldr	r3, [pc, #432]	; (8003f68 <HAL_RCC_OscConfig+0x574>)
 8003db6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003db8:	3a01      	subs	r2, #1
 8003dba:	3aff      	subs	r2, #255	; 0xff
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	651a      	str	r2, [r3, #80]	; 0x50
 8003dc0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003dc2:	2280      	movs	r2, #128	; 0x80
 8003dc4:	0052      	lsls	r2, r2, #1
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	651a      	str	r2, [r3, #80]	; 0x50
 8003dca:	e7d3      	b.n	8003d74 <HAL_RCC_OscConfig+0x380>
      tickstart = HAL_GetTick();
 8003dcc:	f7fe fe2c 	bl	8002a28 <HAL_GetTick>
 8003dd0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003dd2:	4b65      	ldr	r3, [pc, #404]	; (8003f68 <HAL_RCC_OscConfig+0x574>)
 8003dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd6:	059b      	lsls	r3, r3, #22
 8003dd8:	d507      	bpl.n	8003dea <HAL_RCC_OscConfig+0x3f6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dda:	f7fe fe25 	bl	8002a28 <HAL_GetTick>
 8003dde:	1bc0      	subs	r0, r0, r7
 8003de0:	4b62      	ldr	r3, [pc, #392]	; (8003f6c <HAL_RCC_OscConfig+0x578>)
 8003de2:	4298      	cmp	r0, r3
 8003de4:	d9f5      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x3de>
          return HAL_TIMEOUT;
 8003de6:	2003      	movs	r0, #3
 8003de8:	e0aa      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
    if(pwrclkchanged == SET)
 8003dea:	2e01      	cmp	r6, #1
 8003dec:	d021      	beq.n	8003e32 <HAL_RCC_OscConfig+0x43e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003dee:	6823      	ldr	r3, [r4, #0]
 8003df0:	069b      	lsls	r3, r3, #26
 8003df2:	d53c      	bpl.n	8003e6e <HAL_RCC_OscConfig+0x47a>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003df4:	69a3      	ldr	r3, [r4, #24]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d021      	beq.n	8003e3e <HAL_RCC_OscConfig+0x44a>
        __HAL_RCC_HSI48_ENABLE();
 8003dfa:	4b5b      	ldr	r3, [pc, #364]	; (8003f68 <HAL_RCC_OscConfig+0x574>)
 8003dfc:	6899      	ldr	r1, [r3, #8]
 8003dfe:	2001      	movs	r0, #1
 8003e00:	4301      	orrs	r1, r0
 8003e02:	6099      	str	r1, [r3, #8]
 8003e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e06:	4302      	orrs	r2, r0
 8003e08:	635a      	str	r2, [r3, #52]	; 0x34
 8003e0a:	4a5b      	ldr	r2, [pc, #364]	; (8003f78 <HAL_RCC_OscConfig+0x584>)
 8003e0c:	6a11      	ldr	r1, [r2, #32]
 8003e0e:	2380      	movs	r3, #128	; 0x80
 8003e10:	019b      	lsls	r3, r3, #6
 8003e12:	430b      	orrs	r3, r1
 8003e14:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003e16:	f7fe fe07 	bl	8002a28 <HAL_GetTick>
 8003e1a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e1c:	4b52      	ldr	r3, [pc, #328]	; (8003f68 <HAL_RCC_OscConfig+0x574>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	079b      	lsls	r3, r3, #30
 8003e22:	d424      	bmi.n	8003e6e <HAL_RCC_OscConfig+0x47a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e24:	f7fe fe00 	bl	8002a28 <HAL_GetTick>
 8003e28:	1b80      	subs	r0, r0, r6
 8003e2a:	2802      	cmp	r0, #2
 8003e2c:	d9f6      	bls.n	8003e1c <HAL_RCC_OscConfig+0x428>
            return HAL_TIMEOUT;
 8003e2e:	2003      	movs	r0, #3
 8003e30:	e086      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e32:	4a4d      	ldr	r2, [pc, #308]	; (8003f68 <HAL_RCC_OscConfig+0x574>)
 8003e34:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003e36:	4951      	ldr	r1, [pc, #324]	; (8003f7c <HAL_RCC_OscConfig+0x588>)
 8003e38:	400b      	ands	r3, r1
 8003e3a:	6393      	str	r3, [r2, #56]	; 0x38
 8003e3c:	e7d7      	b.n	8003dee <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI48_DISABLE();
 8003e3e:	4a4a      	ldr	r2, [pc, #296]	; (8003f68 <HAL_RCC_OscConfig+0x574>)
 8003e40:	6893      	ldr	r3, [r2, #8]
 8003e42:	2101      	movs	r1, #1
 8003e44:	438b      	bics	r3, r1
 8003e46:	6093      	str	r3, [r2, #8]
 8003e48:	4a4b      	ldr	r2, [pc, #300]	; (8003f78 <HAL_RCC_OscConfig+0x584>)
 8003e4a:	6a13      	ldr	r3, [r2, #32]
 8003e4c:	494c      	ldr	r1, [pc, #304]	; (8003f80 <HAL_RCC_OscConfig+0x58c>)
 8003e4e:	400b      	ands	r3, r1
 8003e50:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003e52:	f7fe fde9 	bl	8002a28 <HAL_GetTick>
 8003e56:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e58:	4b43      	ldr	r3, [pc, #268]	; (8003f68 <HAL_RCC_OscConfig+0x574>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	079b      	lsls	r3, r3, #30
 8003e5e:	d506      	bpl.n	8003e6e <HAL_RCC_OscConfig+0x47a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e60:	f7fe fde2 	bl	8002a28 <HAL_GetTick>
 8003e64:	1b80      	subs	r0, r0, r6
 8003e66:	2802      	cmp	r0, #2
 8003e68:	d9f6      	bls.n	8003e58 <HAL_RCC_OscConfig+0x464>
            return HAL_TIMEOUT;
 8003e6a:	2003      	movs	r0, #3
 8003e6c:	e068      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d100      	bne.n	8003e76 <HAL_RCC_OscConfig+0x482>
 8003e74:	e06c      	b.n	8003f50 <HAL_RCC_OscConfig+0x55c>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e76:	2d0c      	cmp	r5, #12
 8003e78:	d049      	beq.n	8003f0e <HAL_RCC_OscConfig+0x51a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d012      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x4b0>
        __HAL_RCC_PLL_DISABLE();
 8003e7e:	4a3a      	ldr	r2, [pc, #232]	; (8003f68 <HAL_RCC_OscConfig+0x574>)
 8003e80:	6813      	ldr	r3, [r2, #0]
 8003e82:	4940      	ldr	r1, [pc, #256]	; (8003f84 <HAL_RCC_OscConfig+0x590>)
 8003e84:	400b      	ands	r3, r1
 8003e86:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003e88:	f7fe fdce 	bl	8002a28 <HAL_GetTick>
 8003e8c:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003e8e:	4b36      	ldr	r3, [pc, #216]	; (8003f68 <HAL_RCC_OscConfig+0x574>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	019b      	lsls	r3, r3, #6
 8003e94:	d539      	bpl.n	8003f0a <HAL_RCC_OscConfig+0x516>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e96:	f7fe fdc7 	bl	8002a28 <HAL_GetTick>
 8003e9a:	1b00      	subs	r0, r0, r4
 8003e9c:	2802      	cmp	r0, #2
 8003e9e:	d9f6      	bls.n	8003e8e <HAL_RCC_OscConfig+0x49a>
            return HAL_TIMEOUT;
 8003ea0:	2003      	movs	r0, #3
 8003ea2:	e04d      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_PLL_DISABLE();
 8003ea4:	4a30      	ldr	r2, [pc, #192]	; (8003f68 <HAL_RCC_OscConfig+0x574>)
 8003ea6:	6813      	ldr	r3, [r2, #0]
 8003ea8:	4936      	ldr	r1, [pc, #216]	; (8003f84 <HAL_RCC_OscConfig+0x590>)
 8003eaa:	400b      	ands	r3, r1
 8003eac:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003eae:	f7fe fdbb 	bl	8002a28 <HAL_GetTick>
 8003eb2:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003eb4:	4b2c      	ldr	r3, [pc, #176]	; (8003f68 <HAL_RCC_OscConfig+0x574>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	019b      	lsls	r3, r3, #6
 8003eba:	d506      	bpl.n	8003eca <HAL_RCC_OscConfig+0x4d6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ebc:	f7fe fdb4 	bl	8002a28 <HAL_GetTick>
 8003ec0:	1b40      	subs	r0, r0, r5
 8003ec2:	2802      	cmp	r0, #2
 8003ec4:	d9f6      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x4c0>
            return HAL_TIMEOUT;
 8003ec6:	2003      	movs	r0, #3
 8003ec8:	e03a      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eca:	4927      	ldr	r1, [pc, #156]	; (8003f68 <HAL_RCC_OscConfig+0x574>)
 8003ecc:	68cb      	ldr	r3, [r1, #12]
 8003ece:	4a2e      	ldr	r2, [pc, #184]	; (8003f88 <HAL_RCC_OscConfig+0x594>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003ed4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003ed6:	4302      	orrs	r2, r0
 8003ed8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003eda:	4302      	orrs	r2, r0
 8003edc:	4313      	orrs	r3, r2
 8003ede:	60cb      	str	r3, [r1, #12]
        __HAL_RCC_PLL_ENABLE();
 8003ee0:	680a      	ldr	r2, [r1, #0]
 8003ee2:	2380      	movs	r3, #128	; 0x80
 8003ee4:	045b      	lsls	r3, r3, #17
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8003eea:	f7fe fd9d 	bl	8002a28 <HAL_GetTick>
 8003eee:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003ef0:	4b1d      	ldr	r3, [pc, #116]	; (8003f68 <HAL_RCC_OscConfig+0x574>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	019b      	lsls	r3, r3, #6
 8003ef6:	d406      	bmi.n	8003f06 <HAL_RCC_OscConfig+0x512>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ef8:	f7fe fd96 	bl	8002a28 <HAL_GetTick>
 8003efc:	1b00      	subs	r0, r0, r4
 8003efe:	2802      	cmp	r0, #2
 8003f00:	d9f6      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x4fc>
            return HAL_TIMEOUT;
 8003f02:	2003      	movs	r0, #3
 8003f04:	e01c      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
  return HAL_OK;
 8003f06:	2000      	movs	r0, #0
 8003f08:	e01a      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
 8003f0a:	2000      	movs	r0, #0
 8003f0c:	e018      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d020      	beq.n	8003f54 <HAL_RCC_OscConfig+0x560>
        pll_config = RCC->CFGR;
 8003f12:	4b15      	ldr	r3, [pc, #84]	; (8003f68 <HAL_RCC_OscConfig+0x574>)
 8003f14:	68da      	ldr	r2, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f16:	2380      	movs	r3, #128	; 0x80
 8003f18:	025b      	lsls	r3, r3, #9
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003f1e:	428b      	cmp	r3, r1
 8003f20:	d11a      	bne.n	8003f58 <HAL_RCC_OscConfig+0x564>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003f22:	23f0      	movs	r3, #240	; 0xf0
 8003f24:	039b      	lsls	r3, r3, #14
 8003f26:	4013      	ands	r3, r2
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f28:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003f2a:	428b      	cmp	r3, r1
 8003f2c:	d116      	bne.n	8003f5c <HAL_RCC_OscConfig+0x568>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003f2e:	23c0      	movs	r3, #192	; 0xc0
 8003f30:	041b      	lsls	r3, r3, #16
 8003f32:	401a      	ands	r2, r3
 8003f34:	6b63      	ldr	r3, [r4, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d112      	bne.n	8003f60 <HAL_RCC_OscConfig+0x56c>
  return HAL_OK;
 8003f3a:	2000      	movs	r0, #0
 8003f3c:	e000      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
    return HAL_ERROR;
 8003f3e:	2001      	movs	r0, #1
}
 8003f40:	b003      	add	sp, #12
 8003f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8003f44:	2001      	movs	r0, #1
 8003f46:	e7fb      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
        return HAL_ERROR;
 8003f48:	2001      	movs	r0, #1
 8003f4a:	e7f9      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
        return HAL_ERROR;
 8003f4c:	2001      	movs	r0, #1
 8003f4e:	e7f7      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
  return HAL_OK;
 8003f50:	2000      	movs	r0, #0
 8003f52:	e7f5      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
        return HAL_ERROR;
 8003f54:	2001      	movs	r0, #1
 8003f56:	e7f3      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
          return HAL_ERROR;
 8003f58:	2001      	movs	r0, #1
 8003f5a:	e7f1      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
 8003f5c:	2001      	movs	r0, #1
 8003f5e:	e7ef      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
 8003f60:	2001      	movs	r0, #1
 8003f62:	e7ed      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
 8003f64:	40007000 	.word	0x40007000
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	00001388 	.word	0x00001388
 8003f70:	fffffeff 	.word	0xfffffeff
 8003f74:	fffffbff 	.word	0xfffffbff
 8003f78:	40010000 	.word	0x40010000
 8003f7c:	efffffff 	.word	0xefffffff
 8003f80:	ffffdfff 	.word	0xffffdfff
 8003f84:	feffffff 	.word	0xfeffffff
 8003f88:	ff02ffff 	.word	0xff02ffff

08003f8c <HAL_RCC_ClockConfig>:
{
 8003f8c:	b570      	push	{r4, r5, r6, lr}
 8003f8e:	0005      	movs	r5, r0
 8003f90:	000c      	movs	r4, r1
  if(RCC_ClkInitStruct == NULL)
 8003f92:	2800      	cmp	r0, #0
 8003f94:	d100      	bne.n	8003f98 <HAL_RCC_ClockConfig+0xc>
 8003f96:	e0d1      	b.n	800413c <HAL_RCC_ClockConfig+0x1b0>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f98:	4b6a      	ldr	r3, [pc, #424]	; (8004144 <HAL_RCC_ClockConfig+0x1b8>)
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	428b      	cmp	r3, r1
 8003fa2:	d319      	bcc.n	8003fd8 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fa4:	682b      	ldr	r3, [r5, #0]
 8003fa6:	079b      	lsls	r3, r3, #30
 8003fa8:	d506      	bpl.n	8003fb8 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003faa:	4a67      	ldr	r2, [pc, #412]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8003fac:	68d3      	ldr	r3, [r2, #12]
 8003fae:	21f0      	movs	r1, #240	; 0xf0
 8003fb0:	438b      	bics	r3, r1
 8003fb2:	68a9      	ldr	r1, [r5, #8]
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fb8:	682b      	ldr	r3, [r5, #0]
 8003fba:	07db      	lsls	r3, r3, #31
 8003fbc:	d57b      	bpl.n	80040b6 <HAL_RCC_ClockConfig+0x12a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fbe:	686b      	ldr	r3, [r5, #4]
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d020      	beq.n	8004006 <HAL_RCC_ClockConfig+0x7a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fc4:	2b03      	cmp	r3, #3
 8003fc6:	d040      	beq.n	800404a <HAL_RCC_ClockConfig+0xbe>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d044      	beq.n	8004056 <HAL_RCC_ClockConfig+0xca>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003fcc:	4a5e      	ldr	r2, [pc, #376]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	6812      	ldr	r2, [r2, #0]
 8003fd0:	0592      	lsls	r2, r2, #22
 8003fd2:	d41d      	bmi.n	8004010 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8003fd4:	2001      	movs	r0, #1
 8003fd6:	e099      	b.n	800410c <HAL_RCC_ClockConfig+0x180>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd8:	4a5a      	ldr	r2, [pc, #360]	; (8004144 <HAL_RCC_ClockConfig+0x1b8>)
 8003fda:	6813      	ldr	r3, [r2, #0]
 8003fdc:	2101      	movs	r1, #1
 8003fde:	438b      	bics	r3, r1
 8003fe0:	4323      	orrs	r3, r4
 8003fe2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003fe4:	f7fe fd20 	bl	8002a28 <HAL_GetTick>
 8003fe8:	0006      	movs	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fea:	4b56      	ldr	r3, [pc, #344]	; (8004144 <HAL_RCC_ClockConfig+0x1b8>)
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	2301      	movs	r3, #1
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	42a3      	cmp	r3, r4
 8003ff4:	d0d6      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff6:	f7fe fd17 	bl	8002a28 <HAL_GetTick>
 8003ffa:	1b80      	subs	r0, r0, r6
 8003ffc:	4a53      	ldr	r2, [pc, #332]	; (800414c <HAL_RCC_ClockConfig+0x1c0>)
 8003ffe:	4290      	cmp	r0, r2
 8004000:	d9f3      	bls.n	8003fea <HAL_RCC_ClockConfig+0x5e>
        return HAL_TIMEOUT;
 8004002:	2003      	movs	r0, #3
 8004004:	e082      	b.n	800410c <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004006:	4a50      	ldr	r2, [pc, #320]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8004008:	6812      	ldr	r2, [r2, #0]
 800400a:	0392      	lsls	r2, r2, #14
 800400c:	d400      	bmi.n	8004010 <HAL_RCC_ClockConfig+0x84>
 800400e:	e097      	b.n	8004140 <HAL_RCC_ClockConfig+0x1b4>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004010:	494d      	ldr	r1, [pc, #308]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	68ca      	ldr	r2, [r1, #12]
 8004014:	2003      	movs	r0, #3
 8004016:	4382      	bics	r2, r0
 8004018:	4313      	orrs	r3, r2
 800401a:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 800401c:	f7fe fd04 	bl	8002a28 <HAL_GetTick>
 8004020:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004022:	686b      	ldr	r3, [r5, #4]
 8004024:	2b02      	cmp	r3, #2
 8004026:	d01c      	beq.n	8004062 <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004028:	2b03      	cmp	r3, #3
 800402a:	d028      	beq.n	800407e <HAL_RCC_ClockConfig+0xf2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800402c:	2b01      	cmp	r3, #1
 800402e:	d034      	beq.n	800409a <HAL_RCC_ClockConfig+0x10e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004030:	4b45      	ldr	r3, [pc, #276]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	220c      	movs	r2, #12
 8004036:	421a      	tst	r2, r3
 8004038:	d03d      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800403a:	f7fe fcf5 	bl	8002a28 <HAL_GetTick>
 800403e:	1b80      	subs	r0, r0, r6
 8004040:	4b42      	ldr	r3, [pc, #264]	; (800414c <HAL_RCC_ClockConfig+0x1c0>)
 8004042:	4298      	cmp	r0, r3
 8004044:	d9f4      	bls.n	8004030 <HAL_RCC_ClockConfig+0xa4>
          return HAL_TIMEOUT;
 8004046:	2003      	movs	r0, #3
 8004048:	e060      	b.n	800410c <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800404a:	4a3f      	ldr	r2, [pc, #252]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 800404c:	6812      	ldr	r2, [r2, #0]
 800404e:	0192      	lsls	r2, r2, #6
 8004050:	d4de      	bmi.n	8004010 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8004052:	2001      	movs	r0, #1
 8004054:	e05a      	b.n	800410c <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004056:	4a3c      	ldr	r2, [pc, #240]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8004058:	6812      	ldr	r2, [r2, #0]
 800405a:	0752      	lsls	r2, r2, #29
 800405c:	d4d8      	bmi.n	8004010 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800405e:	2001      	movs	r0, #1
 8004060:	e054      	b.n	800410c <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004062:	4b39      	ldr	r3, [pc, #228]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	230c      	movs	r3, #12
 8004068:	4013      	ands	r3, r2
 800406a:	2b08      	cmp	r3, #8
 800406c:	d023      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800406e:	f7fe fcdb 	bl	8002a28 <HAL_GetTick>
 8004072:	1b80      	subs	r0, r0, r6
 8004074:	4a35      	ldr	r2, [pc, #212]	; (800414c <HAL_RCC_ClockConfig+0x1c0>)
 8004076:	4290      	cmp	r0, r2
 8004078:	d9f3      	bls.n	8004062 <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 800407a:	2003      	movs	r0, #3
 800407c:	e046      	b.n	800410c <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800407e:	4b32      	ldr	r3, [pc, #200]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	230c      	movs	r3, #12
 8004084:	4013      	ands	r3, r2
 8004086:	2b0c      	cmp	r3, #12
 8004088:	d015      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800408a:	f7fe fccd 	bl	8002a28 <HAL_GetTick>
 800408e:	1b80      	subs	r0, r0, r6
 8004090:	4b2e      	ldr	r3, [pc, #184]	; (800414c <HAL_RCC_ClockConfig+0x1c0>)
 8004092:	4298      	cmp	r0, r3
 8004094:	d9f3      	bls.n	800407e <HAL_RCC_ClockConfig+0xf2>
          return HAL_TIMEOUT;
 8004096:	2003      	movs	r0, #3
 8004098:	e038      	b.n	800410c <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800409a:	4b2b      	ldr	r3, [pc, #172]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	230c      	movs	r3, #12
 80040a0:	4013      	ands	r3, r2
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d007      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040a6:	f7fe fcbf 	bl	8002a28 <HAL_GetTick>
 80040aa:	1b80      	subs	r0, r0, r6
 80040ac:	4b27      	ldr	r3, [pc, #156]	; (800414c <HAL_RCC_ClockConfig+0x1c0>)
 80040ae:	4298      	cmp	r0, r3
 80040b0:	d9f3      	bls.n	800409a <HAL_RCC_ClockConfig+0x10e>
          return HAL_TIMEOUT;
 80040b2:	2003      	movs	r0, #3
 80040b4:	e02a      	b.n	800410c <HAL_RCC_ClockConfig+0x180>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040b6:	4b23      	ldr	r3, [pc, #140]	; (8004144 <HAL_RCC_ClockConfig+0x1b8>)
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	2301      	movs	r3, #1
 80040bc:	4013      	ands	r3, r2
 80040be:	42a3      	cmp	r3, r4
 80040c0:	d825      	bhi.n	800410e <HAL_RCC_ClockConfig+0x182>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c2:	682b      	ldr	r3, [r5, #0]
 80040c4:	075b      	lsls	r3, r3, #29
 80040c6:	d506      	bpl.n	80040d6 <HAL_RCC_ClockConfig+0x14a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040c8:	4a1f      	ldr	r2, [pc, #124]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	68d3      	ldr	r3, [r2, #12]
 80040cc:	4920      	ldr	r1, [pc, #128]	; (8004150 <HAL_RCC_ClockConfig+0x1c4>)
 80040ce:	400b      	ands	r3, r1
 80040d0:	68e9      	ldr	r1, [r5, #12]
 80040d2:	430b      	orrs	r3, r1
 80040d4:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d6:	682b      	ldr	r3, [r5, #0]
 80040d8:	071b      	lsls	r3, r3, #28
 80040da:	d507      	bpl.n	80040ec <HAL_RCC_ClockConfig+0x160>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040dc:	491a      	ldr	r1, [pc, #104]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	68cb      	ldr	r3, [r1, #12]
 80040e0:	4a1c      	ldr	r2, [pc, #112]	; (8004154 <HAL_RCC_ClockConfig+0x1c8>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	692a      	ldr	r2, [r5, #16]
 80040e6:	00d2      	lsls	r2, r2, #3
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60cb      	str	r3, [r1, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040ec:	f7ff fc2a 	bl	8003944 <HAL_RCC_GetSysClockFreq>
 80040f0:	4b15      	ldr	r3, [pc, #84]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	0912      	lsrs	r2, r2, #4
 80040f6:	230f      	movs	r3, #15
 80040f8:	4013      	ands	r3, r2
 80040fa:	4a17      	ldr	r2, [pc, #92]	; (8004158 <HAL_RCC_ClockConfig+0x1cc>)
 80040fc:	5cd3      	ldrb	r3, [r2, r3]
 80040fe:	40d8      	lsrs	r0, r3
 8004100:	4b16      	ldr	r3, [pc, #88]	; (800415c <HAL_RCC_ClockConfig+0x1d0>)
 8004102:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8004104:	4b16      	ldr	r3, [pc, #88]	; (8004160 <HAL_RCC_ClockConfig+0x1d4>)
 8004106:	6818      	ldr	r0, [r3, #0]
 8004108:	f004 fe6e 	bl	8008de8 <HAL_InitTick>
}
 800410c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410e:	4a0d      	ldr	r2, [pc, #52]	; (8004144 <HAL_RCC_ClockConfig+0x1b8>)
 8004110:	6813      	ldr	r3, [r2, #0]
 8004112:	2101      	movs	r1, #1
 8004114:	438b      	bics	r3, r1
 8004116:	4323      	orrs	r3, r4
 8004118:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800411a:	f7fe fc85 	bl	8002a28 <HAL_GetTick>
 800411e:	0006      	movs	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004120:	4b08      	ldr	r3, [pc, #32]	; (8004144 <HAL_RCC_ClockConfig+0x1b8>)
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	2301      	movs	r3, #1
 8004126:	4013      	ands	r3, r2
 8004128:	42a3      	cmp	r3, r4
 800412a:	d0ca      	beq.n	80040c2 <HAL_RCC_ClockConfig+0x136>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800412c:	f7fe fc7c 	bl	8002a28 <HAL_GetTick>
 8004130:	1b80      	subs	r0, r0, r6
 8004132:	4b06      	ldr	r3, [pc, #24]	; (800414c <HAL_RCC_ClockConfig+0x1c0>)
 8004134:	4298      	cmp	r0, r3
 8004136:	d9f3      	bls.n	8004120 <HAL_RCC_ClockConfig+0x194>
        return HAL_TIMEOUT;
 8004138:	2003      	movs	r0, #3
 800413a:	e7e7      	b.n	800410c <HAL_RCC_ClockConfig+0x180>
    return HAL_ERROR;
 800413c:	2001      	movs	r0, #1
 800413e:	e7e5      	b.n	800410c <HAL_RCC_ClockConfig+0x180>
        return HAL_ERROR;
 8004140:	2001      	movs	r0, #1
 8004142:	e7e3      	b.n	800410c <HAL_RCC_ClockConfig+0x180>
 8004144:	40022000 	.word	0x40022000
 8004148:	40021000 	.word	0x40021000
 800414c:	00001388 	.word	0x00001388
 8004150:	fffff8ff 	.word	0xfffff8ff
 8004154:	ffffc7ff 	.word	0xffffc7ff
 8004158:	0800e668 	.word	0x0800e668
 800415c:	2000000c 	.word	0x2000000c
 8004160:	20000004 	.word	0x20000004

08004164 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8004164:	4b01      	ldr	r3, [pc, #4]	; (800416c <HAL_RCC_GetHCLKFreq+0x8>)
 8004166:	6818      	ldr	r0, [r3, #0]
}
 8004168:	4770      	bx	lr
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	2000000c 	.word	0x2000000c

08004170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004170:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004172:	f7ff fff7 	bl	8004164 <HAL_RCC_GetHCLKFreq>
 8004176:	4b04      	ldr	r3, [pc, #16]	; (8004188 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	0a12      	lsrs	r2, r2, #8
 800417c:	2307      	movs	r3, #7
 800417e:	4013      	ands	r3, r2
 8004180:	4a02      	ldr	r2, [pc, #8]	; (800418c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004182:	5cd3      	ldrb	r3, [r2, r3]
 8004184:	40d8      	lsrs	r0, r3
}
 8004186:	bd10      	pop	{r4, pc}
 8004188:	40021000 	.word	0x40021000
 800418c:	0800e678 	.word	0x0800e678

08004190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004190:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004192:	f7ff ffe7 	bl	8004164 <HAL_RCC_GetHCLKFreq>
 8004196:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	0ad2      	lsrs	r2, r2, #11
 800419c:	2307      	movs	r3, #7
 800419e:	4013      	ands	r3, r2
 80041a0:	4a02      	ldr	r2, [pc, #8]	; (80041ac <HAL_RCC_GetPCLK2Freq+0x1c>)
 80041a2:	5cd3      	ldrb	r3, [r2, r3]
 80041a4:	40d8      	lsrs	r0, r3
}
 80041a6:	bd10      	pop	{r4, pc}
 80041a8:	40021000 	.word	0x40021000
 80041ac:	0800e678 	.word	0x0800e678

080041b0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80041b0:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80041b2:	230f      	movs	r3, #15
 80041b4:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80041b6:	4a0c      	ldr	r2, [pc, #48]	; (80041e8 <HAL_RCC_GetClockConfig+0x38>)
 80041b8:	68d4      	ldr	r4, [r2, #12]
 80041ba:	3b0c      	subs	r3, #12
 80041bc:	4023      	ands	r3, r4
 80041be:	6043      	str	r3, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80041c0:	68d4      	ldr	r4, [r2, #12]
 80041c2:	23f0      	movs	r3, #240	; 0xf0
 80041c4:	4023      	ands	r3, r4
 80041c6:	6083      	str	r3, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80041c8:	68d4      	ldr	r4, [r2, #12]
 80041ca:	25e0      	movs	r5, #224	; 0xe0
 80041cc:	00ed      	lsls	r5, r5, #3
 80041ce:	402c      	ands	r4, r5
 80041d0:	60c4      	str	r4, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80041d2:	68d3      	ldr	r3, [r2, #12]
 80041d4:	08db      	lsrs	r3, r3, #3
 80041d6:	402b      	ands	r3, r5
 80041d8:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80041da:	4b04      	ldr	r3, [pc, #16]	; (80041ec <HAL_RCC_GetClockConfig+0x3c>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	2301      	movs	r3, #1
 80041e0:	4013      	ands	r3, r2
 80041e2:	600b      	str	r3, [r1, #0]
}
 80041e4:	bd30      	pop	{r4, r5, pc}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	40021000 	.word	0x40021000
 80041ec:	40022000 	.word	0x40022000

080041f0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041f0:	b570      	push	{r4, r5, r6, lr}
 80041f2:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041f4:	6803      	ldr	r3, [r0, #0]
 80041f6:	069b      	lsls	r3, r3, #26
 80041f8:	d552      	bpl.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041fa:	4b6d      	ldr	r3, [pc, #436]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80041fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	d500      	bpl.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8004202:	e095      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x140>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004204:	4a6a      	ldr	r2, [pc, #424]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004206:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8004208:	2380      	movs	r3, #128	; 0x80
 800420a:	055b      	lsls	r3, r3, #21
 800420c:	430b      	orrs	r3, r1
 800420e:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 8004210:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004212:	4b68      	ldr	r3, [pc, #416]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	05db      	lsls	r3, r3, #23
 8004218:	d400      	bmi.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x2c>
 800421a:	e08b      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x144>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800421c:	4b64      	ldr	r3, [pc, #400]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800421e:	6819      	ldr	r1, [r3, #0]
 8004220:	23c0      	movs	r3, #192	; 0xc0
 8004222:	039b      	lsls	r3, r3, #14
 8004224:	4019      	ands	r1, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004226:	6862      	ldr	r2, [r4, #4]
 8004228:	4013      	ands	r3, r2
 800422a:	428b      	cmp	r3, r1
 800422c:	d006      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x4c>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800422e:	23c0      	movs	r3, #192	; 0xc0
 8004230:	029b      	lsls	r3, r3, #10
 8004232:	0011      	movs	r1, r2
 8004234:	4019      	ands	r1, r3
 8004236:	4299      	cmp	r1, r3
 8004238:	d100      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x4c>
 800423a:	e090      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x16e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800423c:	4b5c      	ldr	r3, [pc, #368]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800423e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004240:	23c0      	movs	r3, #192	; 0xc0
 8004242:	029b      	lsls	r3, r3, #10
 8004244:	0008      	movs	r0, r1
 8004246:	4018      	ands	r0, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004248:	4219      	tst	r1, r3
 800424a:	d016      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800424c:	401a      	ands	r2, r3
 800424e:	4282      	cmp	r2, r0
 8004250:	d013      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	069b      	lsls	r3, r3, #26
 8004256:	d510      	bpl.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x8a>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004258:	4b55      	ldr	r3, [pc, #340]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800425a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800425c:	4a56      	ldr	r2, [pc, #344]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800425e:	4002      	ands	r2, r0

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004260:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 8004262:	2180      	movs	r1, #128	; 0x80
 8004264:	0309      	lsls	r1, r1, #12
 8004266:	4331      	orrs	r1, r6
 8004268:	6519      	str	r1, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800426a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800426c:	4e53      	ldr	r6, [pc, #332]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800426e:	4031      	ands	r1, r6
 8004270:	6519      	str	r1, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004272:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004274:	05c3      	lsls	r3, r0, #23
 8004276:	d500      	bpl.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8004278:	e078      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x17c>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800427a:	6863      	ldr	r3, [r4, #4]
 800427c:	22c0      	movs	r2, #192	; 0xc0
 800427e:	0292      	lsls	r2, r2, #10
 8004280:	0019      	movs	r1, r3
 8004282:	4011      	ands	r1, r2
 8004284:	4291      	cmp	r1, r2
 8004286:	d100      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8004288:	e080      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800428a:	4949      	ldr	r1, [pc, #292]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800428c:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800428e:	22c0      	movs	r2, #192	; 0xc0
 8004290:	0292      	lsls	r2, r2, #10
 8004292:	6860      	ldr	r0, [r4, #4]
 8004294:	4002      	ands	r2, r0
 8004296:	4313      	orrs	r3, r2
 8004298:	650b      	str	r3, [r1, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800429a:	2d01      	cmp	r5, #1
 800429c:	d100      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 800429e:	e07f      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042a0:	6823      	ldr	r3, [r4, #0]
 80042a2:	07db      	lsls	r3, r3, #31
 80042a4:	d506      	bpl.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042a6:	4a42      	ldr	r2, [pc, #264]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042a8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80042aa:	2103      	movs	r1, #3
 80042ac:	438b      	bics	r3, r1
 80042ae:	68a1      	ldr	r1, [r4, #8]
 80042b0:	430b      	orrs	r3, r1
 80042b2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	079b      	lsls	r3, r3, #30
 80042b8:	d506      	bpl.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042ba:	4a3d      	ldr	r2, [pc, #244]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042bc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80042be:	210c      	movs	r1, #12
 80042c0:	438b      	bics	r3, r1
 80042c2:	68e1      	ldr	r1, [r4, #12]
 80042c4:	430b      	orrs	r3, r1
 80042c6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	075b      	lsls	r3, r3, #29
 80042cc:	d506      	bpl.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042ce:	4a38      	ldr	r2, [pc, #224]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042d0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80042d2:	493b      	ldr	r1, [pc, #236]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d4:	400b      	ands	r3, r1
 80042d6:	6921      	ldr	r1, [r4, #16]
 80042d8:	430b      	orrs	r3, r1
 80042da:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	071b      	lsls	r3, r3, #28
 80042e0:	d506      	bpl.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042e2:	4a33      	ldr	r2, [pc, #204]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042e4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80042e6:	4937      	ldr	r1, [pc, #220]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042e8:	400b      	ands	r3, r1
 80042ea:	6961      	ldr	r1, [r4, #20]
 80042ec:	430b      	orrs	r3, r1
 80042ee:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	05db      	lsls	r3, r3, #23
 80042f4:	d506      	bpl.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042f6:	4a2e      	ldr	r2, [pc, #184]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042f8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80042fa:	492f      	ldr	r1, [pc, #188]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80042fc:	400b      	ands	r3, r1
 80042fe:	69a1      	ldr	r1, [r4, #24]
 8004300:	430b      	orrs	r3, r1
 8004302:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004304:	6823      	ldr	r3, [r4, #0]
 8004306:	065b      	lsls	r3, r3, #25
 8004308:	d506      	bpl.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800430a:	4a29      	ldr	r2, [pc, #164]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800430c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800430e:	492e      	ldr	r1, [pc, #184]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004310:	400b      	ands	r3, r1
 8004312:	6a21      	ldr	r1, [r4, #32]
 8004314:	430b      	orrs	r3, r1
 8004316:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004318:	6823      	ldr	r3, [r4, #0]
 800431a:	061b      	lsls	r3, r3, #24
 800431c:	d546      	bpl.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800431e:	4a24      	ldr	r2, [pc, #144]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004320:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004322:	492a      	ldr	r1, [pc, #168]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004324:	400b      	ands	r3, r1
 8004326:	69e1      	ldr	r1, [r4, #28]
 8004328:	430b      	orrs	r3, r1
 800432a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  return HAL_OK;
 800432c:	2000      	movs	r0, #0
}
 800432e:	bd70      	pop	{r4, r5, r6, pc}
  FlagStatus       pwrclkchanged = RESET;
 8004330:	2500      	movs	r5, #0
 8004332:	e76e      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x22>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004334:	4a1f      	ldr	r2, [pc, #124]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004336:	6811      	ldr	r1, [r2, #0]
 8004338:	2380      	movs	r3, #128	; 0x80
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	430b      	orrs	r3, r1
 800433e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004340:	f7fe fb72 	bl	8002a28 <HAL_GetTick>
 8004344:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004346:	4b1b      	ldr	r3, [pc, #108]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	05db      	lsls	r3, r3, #23
 800434c:	d500      	bpl.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800434e:	e765      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004350:	f7fe fb6a 	bl	8002a28 <HAL_GetTick>
 8004354:	1b80      	subs	r0, r0, r6
 8004356:	2864      	cmp	r0, #100	; 0x64
 8004358:	d9f5      	bls.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x156>
          return HAL_TIMEOUT;
 800435a:	2003      	movs	r0, #3
 800435c:	e7e7      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x13e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800435e:	4b14      	ldr	r3, [pc, #80]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	039b      	lsls	r3, r3, #14
 8004364:	d400      	bmi.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004366:	e769      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x4c>
          return HAL_ERROR;
 8004368:	2001      	movs	r0, #1
 800436a:	e7e0      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x13e>
        tickstart = HAL_GetTick();
 800436c:	f7fe fb5c 	bl	8002a28 <HAL_GetTick>
 8004370:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004372:	4b0f      	ldr	r3, [pc, #60]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004376:	059b      	lsls	r3, r3, #22
 8004378:	d500      	bpl.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800437a:	e77e      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800437c:	f7fe fb54 	bl	8002a28 <HAL_GetTick>
 8004380:	1b80      	subs	r0, r0, r6
 8004382:	4b13      	ldr	r3, [pc, #76]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004384:	4298      	cmp	r0, r3
 8004386:	d9f4      	bls.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x182>
            return HAL_TIMEOUT;
 8004388:	2003      	movs	r0, #3
 800438a:	e7d0      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800438c:	4908      	ldr	r1, [pc, #32]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800438e:	680a      	ldr	r2, [r1, #0]
 8004390:	4810      	ldr	r0, [pc, #64]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004392:	4002      	ands	r2, r0
 8004394:	20c0      	movs	r0, #192	; 0xc0
 8004396:	0380      	lsls	r0, r0, #14
 8004398:	4003      	ands	r3, r0
 800439a:	4313      	orrs	r3, r2
 800439c:	600b      	str	r3, [r1, #0]
 800439e:	e774      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a0:	000a      	movs	r2, r1
 80043a2:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80043a4:	490c      	ldr	r1, [pc, #48]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80043a6:	400b      	ands	r3, r1
 80043a8:	6393      	str	r3, [r2, #56]	; 0x38
 80043aa:	e779      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  return HAL_OK;
 80043ac:	2000      	movs	r0, #0
 80043ae:	e7be      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80043b0:	40021000 	.word	0x40021000
 80043b4:	40007000 	.word	0x40007000
 80043b8:	fffcffff 	.word	0xfffcffff
 80043bc:	fff7ffff 	.word	0xfff7ffff
 80043c0:	fffff3ff 	.word	0xfffff3ff
 80043c4:	ffffcfff 	.word	0xffffcfff
 80043c8:	fbffffff 	.word	0xfbffffff
 80043cc:	fff3ffff 	.word	0xfff3ffff
 80043d0:	00001388 	.word	0x00001388
 80043d4:	ffcfffff 	.word	0xffcfffff
 80043d8:	efffffff 	.word	0xefffffff

080043dc <TIM_Base_SetConfig>:
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043dc:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043de:	2280      	movs	r2, #128	; 0x80
 80043e0:	05d2      	lsls	r2, r2, #23
 80043e2:	4290      	cmp	r0, r2
 80043e4:	d008      	beq.n	80043f8 <TIM_Base_SetConfig+0x1c>
 80043e6:	4a15      	ldr	r2, [pc, #84]	; (800443c <TIM_Base_SetConfig+0x60>)
 80043e8:	4290      	cmp	r0, r2
 80043ea:	d005      	beq.n	80043f8 <TIM_Base_SetConfig+0x1c>
 80043ec:	4a14      	ldr	r2, [pc, #80]	; (8004440 <TIM_Base_SetConfig+0x64>)
 80043ee:	4290      	cmp	r0, r2
 80043f0:	d002      	beq.n	80043f8 <TIM_Base_SetConfig+0x1c>
 80043f2:	4a14      	ldr	r2, [pc, #80]	; (8004444 <TIM_Base_SetConfig+0x68>)
 80043f4:	4290      	cmp	r0, r2
 80043f6:	d103      	bne.n	8004400 <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043f8:	2270      	movs	r2, #112	; 0x70
 80043fa:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80043fc:	684a      	ldr	r2, [r1, #4]
 80043fe:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004400:	2280      	movs	r2, #128	; 0x80
 8004402:	05d2      	lsls	r2, r2, #23
 8004404:	4290      	cmp	r0, r2
 8004406:	d008      	beq.n	800441a <TIM_Base_SetConfig+0x3e>
 8004408:	4a0c      	ldr	r2, [pc, #48]	; (800443c <TIM_Base_SetConfig+0x60>)
 800440a:	4290      	cmp	r0, r2
 800440c:	d005      	beq.n	800441a <TIM_Base_SetConfig+0x3e>
 800440e:	4a0c      	ldr	r2, [pc, #48]	; (8004440 <TIM_Base_SetConfig+0x64>)
 8004410:	4290      	cmp	r0, r2
 8004412:	d002      	beq.n	800441a <TIM_Base_SetConfig+0x3e>
 8004414:	4a0b      	ldr	r2, [pc, #44]	; (8004444 <TIM_Base_SetConfig+0x68>)
 8004416:	4290      	cmp	r0, r2
 8004418:	d103      	bne.n	8004422 <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800441a:	4a0b      	ldr	r2, [pc, #44]	; (8004448 <TIM_Base_SetConfig+0x6c>)
 800441c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800441e:	68ca      	ldr	r2, [r1, #12]
 8004420:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004422:	2280      	movs	r2, #128	; 0x80
 8004424:	4393      	bics	r3, r2
 8004426:	690a      	ldr	r2, [r1, #16]
 8004428:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800442a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800442c:	688b      	ldr	r3, [r1, #8]
 800442e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004430:	680b      	ldr	r3, [r1, #0]
 8004432:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004434:	2301      	movs	r3, #1
 8004436:	6143      	str	r3, [r0, #20]
}
 8004438:	4770      	bx	lr
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	40000400 	.word	0x40000400
 8004440:	40010800 	.word	0x40010800
 8004444:	40011400 	.word	0x40011400
 8004448:	fffffcff 	.word	0xfffffcff

0800444c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800444c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800444e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004450:	6a04      	ldr	r4, [r0, #32]
 8004452:	2501      	movs	r5, #1
 8004454:	43ac      	bics	r4, r5
 8004456:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004458:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800445a:	35ef      	adds	r5, #239	; 0xef
 800445c:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800445e:	0112      	lsls	r2, r2, #4
 8004460:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004462:	240a      	movs	r4, #10
 8004464:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 8004466:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004468:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800446a:	6203      	str	r3, [r0, #32]
}
 800446c:	bd30      	pop	{r4, r5, pc}
	...

08004470 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004470:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004472:	6a03      	ldr	r3, [r0, #32]
 8004474:	2410      	movs	r4, #16
 8004476:	43a3      	bics	r3, r4
 8004478:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800447a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800447c:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800447e:	4d05      	ldr	r5, [pc, #20]	; (8004494 <TIM_TI2_ConfigInputStage+0x24>)
 8004480:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004482:	0312      	lsls	r2, r2, #12
 8004484:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004486:	24a0      	movs	r4, #160	; 0xa0
 8004488:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 800448a:	0109      	lsls	r1, r1, #4
 800448c:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800448e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004490:	6201      	str	r1, [r0, #32]
}
 8004492:	bd30      	pop	{r4, r5, pc}
 8004494:	ffff0fff 	.word	0xffff0fff

08004498 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004498:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800449a:	2270      	movs	r2, #112	; 0x70
 800449c:	4393      	bics	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800449e:	430b      	orrs	r3, r1
 80044a0:	2107      	movs	r1, #7
 80044a2:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044a4:	6083      	str	r3, [r0, #8]
}
 80044a6:	4770      	bx	lr

080044a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044a8:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044aa:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044ac:	4d03      	ldr	r5, [pc, #12]	; (80044bc <TIM_ETR_SetConfig+0x14>)
 80044ae:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044b0:	021b      	lsls	r3, r3, #8
 80044b2:	4313      	orrs	r3, r2
 80044b4:	430b      	orrs	r3, r1
 80044b6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044b8:	6083      	str	r3, [r0, #8]
}
 80044ba:	bd30      	pop	{r4, r5, pc}
 80044bc:	ffff00ff 	.word	0xffff00ff

080044c0 <HAL_TIM_Base_Init>:
{
 80044c0:	b570      	push	{r4, r5, r6, lr}
 80044c2:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80044c4:	d01e      	beq.n	8004504 <HAL_TIM_Base_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 80044c6:	2339      	movs	r3, #57	; 0x39
 80044c8:	5cc3      	ldrb	r3, [r0, r3]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d014      	beq.n	80044f8 <HAL_TIM_Base_Init+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 80044ce:	2539      	movs	r5, #57	; 0x39
 80044d0:	2302      	movs	r3, #2
 80044d2:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044d4:	0021      	movs	r1, r4
 80044d6:	c901      	ldmia	r1!, {r0}
 80044d8:	f7ff ff80 	bl	80043dc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044dc:	2301      	movs	r3, #1
 80044de:	223e      	movs	r2, #62	; 0x3e
 80044e0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e2:	3a04      	subs	r2, #4
 80044e4:	54a3      	strb	r3, [r4, r2]
 80044e6:	3201      	adds	r2, #1
 80044e8:	54a3      	strb	r3, [r4, r2]
 80044ea:	3201      	adds	r2, #1
 80044ec:	54a3      	strb	r3, [r4, r2]
 80044ee:	3201      	adds	r2, #1
 80044f0:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80044f2:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80044f4:	2000      	movs	r0, #0
}
 80044f6:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80044f8:	3338      	adds	r3, #56	; 0x38
 80044fa:	2200      	movs	r2, #0
 80044fc:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80044fe:	f004 fbd1 	bl	8008ca4 <HAL_TIM_Base_MspInit>
 8004502:	e7e4      	b.n	80044ce <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8004504:	2001      	movs	r0, #1
 8004506:	e7f6      	b.n	80044f6 <HAL_TIM_Base_Init+0x36>

08004508 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004508:	2339      	movs	r3, #57	; 0x39
 800450a:	5cc3      	ldrb	r3, [r0, r3]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d121      	bne.n	8004554 <HAL_TIM_Base_Start+0x4c>
  htim->State = HAL_TIM_STATE_BUSY;
 8004510:	3338      	adds	r3, #56	; 0x38
 8004512:	2202      	movs	r2, #2
 8004514:	54c2      	strb	r2, [r0, r3]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004516:	6803      	ldr	r3, [r0, #0]
 8004518:	2280      	movs	r2, #128	; 0x80
 800451a:	05d2      	lsls	r2, r2, #23
 800451c:	4293      	cmp	r3, r2
 800451e:	d00e      	beq.n	800453e <HAL_TIM_Base_Start+0x36>
 8004520:	4a0e      	ldr	r2, [pc, #56]	; (800455c <HAL_TIM_Base_Start+0x54>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d00b      	beq.n	800453e <HAL_TIM_Base_Start+0x36>
 8004526:	4a0e      	ldr	r2, [pc, #56]	; (8004560 <HAL_TIM_Base_Start+0x58>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d008      	beq.n	800453e <HAL_TIM_Base_Start+0x36>
 800452c:	4a0d      	ldr	r2, [pc, #52]	; (8004564 <HAL_TIM_Base_Start+0x5c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d005      	beq.n	800453e <HAL_TIM_Base_Start+0x36>
    __HAL_TIM_ENABLE(htim);
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	2101      	movs	r1, #1
 8004536:	430a      	orrs	r2, r1
 8004538:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800453a:	2000      	movs	r0, #0
 800453c:	e00b      	b.n	8004556 <HAL_TIM_Base_Start+0x4e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800453e:	6899      	ldr	r1, [r3, #8]
 8004540:	2207      	movs	r2, #7
 8004542:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004544:	2a06      	cmp	r2, #6
 8004546:	d007      	beq.n	8004558 <HAL_TIM_Base_Start+0x50>
      __HAL_TIM_ENABLE(htim);
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	2101      	movs	r1, #1
 800454c:	430a      	orrs	r2, r1
 800454e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004550:	2000      	movs	r0, #0
 8004552:	e000      	b.n	8004556 <HAL_TIM_Base_Start+0x4e>
    return HAL_ERROR;
 8004554:	2001      	movs	r0, #1
}
 8004556:	4770      	bx	lr
  return HAL_OK;
 8004558:	2000      	movs	r0, #0
 800455a:	e7fc      	b.n	8004556 <HAL_TIM_Base_Start+0x4e>
 800455c:	40000400 	.word	0x40000400
 8004560:	40010800 	.word	0x40010800
 8004564:	40011400 	.word	0x40011400

08004568 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004568:	2339      	movs	r3, #57	; 0x39
 800456a:	5cc3      	ldrb	r3, [r0, r3]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d126      	bne.n	80045be <HAL_TIM_Base_Start_IT+0x56>
  htim->State = HAL_TIM_STATE_BUSY;
 8004570:	3338      	adds	r3, #56	; 0x38
 8004572:	2202      	movs	r2, #2
 8004574:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004576:	6802      	ldr	r2, [r0, #0]
 8004578:	68d3      	ldr	r3, [r2, #12]
 800457a:	2101      	movs	r1, #1
 800457c:	430b      	orrs	r3, r1
 800457e:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004580:	6803      	ldr	r3, [r0, #0]
 8004582:	2280      	movs	r2, #128	; 0x80
 8004584:	05d2      	lsls	r2, r2, #23
 8004586:	4293      	cmp	r3, r2
 8004588:	d00e      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x40>
 800458a:	4a0f      	ldr	r2, [pc, #60]	; (80045c8 <HAL_TIM_Base_Start_IT+0x60>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d00b      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x40>
 8004590:	4a0e      	ldr	r2, [pc, #56]	; (80045cc <HAL_TIM_Base_Start_IT+0x64>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d008      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x40>
 8004596:	4a0e      	ldr	r2, [pc, #56]	; (80045d0 <HAL_TIM_Base_Start_IT+0x68>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d005      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x40>
    __HAL_TIM_ENABLE(htim);
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	2101      	movs	r1, #1
 80045a0:	430a      	orrs	r2, r1
 80045a2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80045a4:	2000      	movs	r0, #0
 80045a6:	e00b      	b.n	80045c0 <HAL_TIM_Base_Start_IT+0x58>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045a8:	6899      	ldr	r1, [r3, #8]
 80045aa:	2207      	movs	r2, #7
 80045ac:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ae:	2a06      	cmp	r2, #6
 80045b0:	d007      	beq.n	80045c2 <HAL_TIM_Base_Start_IT+0x5a>
      __HAL_TIM_ENABLE(htim);
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	2101      	movs	r1, #1
 80045b6:	430a      	orrs	r2, r1
 80045b8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80045ba:	2000      	movs	r0, #0
 80045bc:	e000      	b.n	80045c0 <HAL_TIM_Base_Start_IT+0x58>
    return HAL_ERROR;
 80045be:	2001      	movs	r0, #1
}
 80045c0:	4770      	bx	lr
  return HAL_OK;
 80045c2:	2000      	movs	r0, #0
 80045c4:	e7fc      	b.n	80045c0 <HAL_TIM_Base_Start_IT+0x58>
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	40000400 	.word	0x40000400
 80045cc:	40010800 	.word	0x40010800
 80045d0:	40011400 	.word	0x40011400

080045d4 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80045d4:	6802      	ldr	r2, [r0, #0]
 80045d6:	68d3      	ldr	r3, [r2, #12]
 80045d8:	2101      	movs	r1, #1
 80045da:	438b      	bics	r3, r1
 80045dc:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 80045de:	6803      	ldr	r3, [r0, #0]
 80045e0:	6a19      	ldr	r1, [r3, #32]
 80045e2:	4a06      	ldr	r2, [pc, #24]	; (80045fc <HAL_TIM_Base_Stop_IT+0x28>)
 80045e4:	4211      	tst	r1, r2
 80045e6:	d103      	bne.n	80045f0 <HAL_TIM_Base_Stop_IT+0x1c>
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	2101      	movs	r1, #1
 80045ec:	438a      	bics	r2, r1
 80045ee:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80045f0:	2339      	movs	r3, #57	; 0x39
 80045f2:	2201      	movs	r2, #1
 80045f4:	54c2      	strb	r2, [r0, r3]
}
 80045f6:	2000      	movs	r0, #0
 80045f8:	4770      	bx	lr
 80045fa:	46c0      	nop			; (mov r8, r8)
 80045fc:	00001111 	.word	0x00001111

08004600 <HAL_TIM_ConfigClockSource>:
{
 8004600:	b510      	push	{r4, lr}
 8004602:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8004604:	2338      	movs	r3, #56	; 0x38
 8004606:	5cc3      	ldrb	r3, [r0, r3]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d100      	bne.n	800460e <HAL_TIM_ConfigClockSource+0xe>
 800460c:	e078      	b.n	8004700 <HAL_TIM_ConfigClockSource+0x100>
 800460e:	2338      	movs	r3, #56	; 0x38
 8004610:	2201      	movs	r2, #1
 8004612:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8004614:	3301      	adds	r3, #1
 8004616:	3201      	adds	r2, #1
 8004618:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 800461a:	6802      	ldr	r2, [r0, #0]
 800461c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800461e:	4839      	ldr	r0, [pc, #228]	; (8004704 <HAL_TIM_ConfigClockSource+0x104>)
 8004620:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8004622:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004624:	680b      	ldr	r3, [r1, #0]
 8004626:	2b60      	cmp	r3, #96	; 0x60
 8004628:	d050      	beq.n	80046cc <HAL_TIM_ConfigClockSource+0xcc>
 800462a:	d82a      	bhi.n	8004682 <HAL_TIM_ConfigClockSource+0x82>
 800462c:	2b40      	cmp	r3, #64	; 0x40
 800462e:	d058      	beq.n	80046e2 <HAL_TIM_ConfigClockSource+0xe2>
 8004630:	d90c      	bls.n	800464c <HAL_TIM_ConfigClockSource+0x4c>
 8004632:	2b50      	cmp	r3, #80	; 0x50
 8004634:	d123      	bne.n	800467e <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004636:	68ca      	ldr	r2, [r1, #12]
 8004638:	6849      	ldr	r1, [r1, #4]
 800463a:	6820      	ldr	r0, [r4, #0]
 800463c:	f7ff ff06 	bl	800444c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004640:	2150      	movs	r1, #80	; 0x50
 8004642:	6820      	ldr	r0, [r4, #0]
 8004644:	f7ff ff28 	bl	8004498 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004648:	2000      	movs	r0, #0
      break;
 800464a:	e005      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 800464c:	2b20      	cmp	r3, #32
 800464e:	d00e      	beq.n	800466e <HAL_TIM_ConfigClockSource+0x6e>
 8004650:	d909      	bls.n	8004666 <HAL_TIM_ConfigClockSource+0x66>
 8004652:	2b30      	cmp	r3, #48	; 0x30
 8004654:	d00b      	beq.n	800466e <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8004656:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8004658:	2339      	movs	r3, #57	; 0x39
 800465a:	2201      	movs	r2, #1
 800465c:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 800465e:	3b01      	subs	r3, #1
 8004660:	2200      	movs	r2, #0
 8004662:	54e2      	strb	r2, [r4, r3]
}
 8004664:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <HAL_TIM_ConfigClockSource+0x6e>
 800466a:	2b10      	cmp	r3, #16
 800466c:	d105      	bne.n	800467a <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800466e:	0019      	movs	r1, r3
 8004670:	6820      	ldr	r0, [r4, #0]
 8004672:	f7ff ff11 	bl	8004498 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004676:	2000      	movs	r0, #0
      break;
 8004678:	e7ee      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x58>
      status = HAL_ERROR;
 800467a:	2001      	movs	r0, #1
 800467c:	e7ec      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x58>
 800467e:	2001      	movs	r0, #1
 8004680:	e7ea      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8004682:	2280      	movs	r2, #128	; 0x80
 8004684:	0152      	lsls	r2, r2, #5
 8004686:	4293      	cmp	r3, r2
 8004688:	d036      	beq.n	80046f8 <HAL_TIM_ConfigClockSource+0xf8>
 800468a:	2280      	movs	r2, #128	; 0x80
 800468c:	0192      	lsls	r2, r2, #6
 800468e:	4293      	cmp	r3, r2
 8004690:	d10d      	bne.n	80046ae <HAL_TIM_ConfigClockSource+0xae>
      TIM_ETR_SetConfig(htim->Instance,
 8004692:	68cb      	ldr	r3, [r1, #12]
 8004694:	684a      	ldr	r2, [r1, #4]
 8004696:	6889      	ldr	r1, [r1, #8]
 8004698:	6820      	ldr	r0, [r4, #0]
 800469a:	f7ff ff05 	bl	80044a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800469e:	6822      	ldr	r2, [r4, #0]
 80046a0:	6891      	ldr	r1, [r2, #8]
 80046a2:	2380      	movs	r3, #128	; 0x80
 80046a4:	01db      	lsls	r3, r3, #7
 80046a6:	430b      	orrs	r3, r1
 80046a8:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80046aa:	2000      	movs	r0, #0
      break;
 80046ac:	e7d4      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 80046ae:	2b70      	cmp	r3, #112	; 0x70
 80046b0:	d124      	bne.n	80046fc <HAL_TIM_ConfigClockSource+0xfc>
      TIM_ETR_SetConfig(htim->Instance,
 80046b2:	68cb      	ldr	r3, [r1, #12]
 80046b4:	684a      	ldr	r2, [r1, #4]
 80046b6:	6889      	ldr	r1, [r1, #8]
 80046b8:	6820      	ldr	r0, [r4, #0]
 80046ba:	f7ff fef5 	bl	80044a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80046be:	6822      	ldr	r2, [r4, #0]
 80046c0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046c2:	2177      	movs	r1, #119	; 0x77
 80046c4:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 80046c6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80046c8:	2000      	movs	r0, #0
      break;
 80046ca:	e7c5      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046cc:	68ca      	ldr	r2, [r1, #12]
 80046ce:	6849      	ldr	r1, [r1, #4]
 80046d0:	6820      	ldr	r0, [r4, #0]
 80046d2:	f7ff fecd 	bl	8004470 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046d6:	2160      	movs	r1, #96	; 0x60
 80046d8:	6820      	ldr	r0, [r4, #0]
 80046da:	f7ff fedd 	bl	8004498 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80046de:	2000      	movs	r0, #0
      break;
 80046e0:	e7ba      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046e2:	68ca      	ldr	r2, [r1, #12]
 80046e4:	6849      	ldr	r1, [r1, #4]
 80046e6:	6820      	ldr	r0, [r4, #0]
 80046e8:	f7ff feb0 	bl	800444c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046ec:	2140      	movs	r1, #64	; 0x40
 80046ee:	6820      	ldr	r0, [r4, #0]
 80046f0:	f7ff fed2 	bl	8004498 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80046f4:	2000      	movs	r0, #0
      break;
 80046f6:	e7af      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 80046f8:	2000      	movs	r0, #0
 80046fa:	e7ad      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x58>
      status = HAL_ERROR;
 80046fc:	2001      	movs	r0, #1
 80046fe:	e7ab      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x58>
  __HAL_LOCK(htim);
 8004700:	2002      	movs	r0, #2
 8004702:	e7af      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x64>
 8004704:	ffff0088 	.word	0xffff0088

08004708 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8004708:	4770      	bx	lr

0800470a <HAL_TIM_IC_CaptureCallback>:
}
 800470a:	4770      	bx	lr

0800470c <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800470c:	4770      	bx	lr

0800470e <HAL_TIM_TriggerCallback>:
}
 800470e:	4770      	bx	lr

08004710 <HAL_TIM_IRQHandler>:
{
 8004710:	b510      	push	{r4, lr}
 8004712:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004714:	6803      	ldr	r3, [r0, #0]
 8004716:	691a      	ldr	r2, [r3, #16]
 8004718:	0792      	lsls	r2, r2, #30
 800471a:	d50f      	bpl.n	800473c <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800471c:	68da      	ldr	r2, [r3, #12]
 800471e:	0792      	lsls	r2, r2, #30
 8004720:	d50c      	bpl.n	800473c <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004722:	2203      	movs	r2, #3
 8004724:	4252      	negs	r2, r2
 8004726:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004728:	2301      	movs	r3, #1
 800472a:	7603      	strb	r3, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800472c:	6803      	ldr	r3, [r0, #0]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	079b      	lsls	r3, r3, #30
 8004732:	d055      	beq.n	80047e0 <HAL_TIM_IRQHandler+0xd0>
          HAL_TIM_IC_CaptureCallback(htim);
 8004734:	f7ff ffe9 	bl	800470a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004738:	2300      	movs	r3, #0
 800473a:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800473c:	6823      	ldr	r3, [r4, #0]
 800473e:	691a      	ldr	r2, [r3, #16]
 8004740:	0752      	lsls	r2, r2, #29
 8004742:	d512      	bpl.n	800476a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	0752      	lsls	r2, r2, #29
 8004748:	d50f      	bpl.n	800476a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800474a:	2205      	movs	r2, #5
 800474c:	4252      	negs	r2, r2
 800474e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004750:	2302      	movs	r3, #2
 8004752:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004754:	6823      	ldr	r3, [r4, #0]
 8004756:	699a      	ldr	r2, [r3, #24]
 8004758:	23c0      	movs	r3, #192	; 0xc0
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	421a      	tst	r2, r3
 800475e:	d045      	beq.n	80047ec <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8004760:	0020      	movs	r0, r4
 8004762:	f7ff ffd2 	bl	800470a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004766:	2300      	movs	r3, #0
 8004768:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	691a      	ldr	r2, [r3, #16]
 800476e:	0712      	lsls	r2, r2, #28
 8004770:	d510      	bpl.n	8004794 <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	0712      	lsls	r2, r2, #28
 8004776:	d50d      	bpl.n	8004794 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004778:	2209      	movs	r2, #9
 800477a:	4252      	negs	r2, r2
 800477c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800477e:	2304      	movs	r3, #4
 8004780:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	079b      	lsls	r3, r3, #30
 8004788:	d037      	beq.n	80047fa <HAL_TIM_IRQHandler+0xea>
        HAL_TIM_IC_CaptureCallback(htim);
 800478a:	0020      	movs	r0, r4
 800478c:	f7ff ffbd 	bl	800470a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004790:	2300      	movs	r3, #0
 8004792:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004794:	6823      	ldr	r3, [r4, #0]
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	06d2      	lsls	r2, r2, #27
 800479a:	d512      	bpl.n	80047c2 <HAL_TIM_IRQHandler+0xb2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	06d2      	lsls	r2, r2, #27
 80047a0:	d50f      	bpl.n	80047c2 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047a2:	2211      	movs	r2, #17
 80047a4:	4252      	negs	r2, r2
 80047a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047a8:	2308      	movs	r3, #8
 80047aa:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	69da      	ldr	r2, [r3, #28]
 80047b0:	23c0      	movs	r3, #192	; 0xc0
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	421a      	tst	r2, r3
 80047b6:	d027      	beq.n	8004808 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 80047b8:	0020      	movs	r0, r4
 80047ba:	f7ff ffa6 	bl	800470a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047be:	2300      	movs	r3, #0
 80047c0:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	691a      	ldr	r2, [r3, #16]
 80047c6:	07d2      	lsls	r2, r2, #31
 80047c8:	d502      	bpl.n	80047d0 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047ca:	68da      	ldr	r2, [r3, #12]
 80047cc:	07d2      	lsls	r2, r2, #31
 80047ce:	d422      	bmi.n	8004816 <HAL_TIM_IRQHandler+0x106>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047d0:	6823      	ldr	r3, [r4, #0]
 80047d2:	691a      	ldr	r2, [r3, #16]
 80047d4:	0652      	lsls	r2, r2, #25
 80047d6:	d502      	bpl.n	80047de <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	0652      	lsls	r2, r2, #25
 80047dc:	d422      	bmi.n	8004824 <HAL_TIM_IRQHandler+0x114>
}
 80047de:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e0:	f7ff ff92 	bl	8004708 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e4:	0020      	movs	r0, r4
 80047e6:	f7ff ff91 	bl	800470c <HAL_TIM_PWM_PulseFinishedCallback>
 80047ea:	e7a5      	b.n	8004738 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ec:	0020      	movs	r0, r4
 80047ee:	f7ff ff8b 	bl	8004708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f2:	0020      	movs	r0, r4
 80047f4:	f7ff ff8a 	bl	800470c <HAL_TIM_PWM_PulseFinishedCallback>
 80047f8:	e7b5      	b.n	8004766 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047fa:	0020      	movs	r0, r4
 80047fc:	f7ff ff84 	bl	8004708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004800:	0020      	movs	r0, r4
 8004802:	f7ff ff83 	bl	800470c <HAL_TIM_PWM_PulseFinishedCallback>
 8004806:	e7c3      	b.n	8004790 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004808:	0020      	movs	r0, r4
 800480a:	f7ff ff7d 	bl	8004708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800480e:	0020      	movs	r0, r4
 8004810:	f7ff ff7c 	bl	800470c <HAL_TIM_PWM_PulseFinishedCallback>
 8004814:	e7d3      	b.n	80047be <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004816:	2202      	movs	r2, #2
 8004818:	4252      	negs	r2, r2
 800481a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800481c:	0020      	movs	r0, r4
 800481e:	f002 ff41 	bl	80076a4 <HAL_TIM_PeriodElapsedCallback>
 8004822:	e7d5      	b.n	80047d0 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004824:	2241      	movs	r2, #65	; 0x41
 8004826:	4252      	negs	r2, r2
 8004828:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800482a:	0020      	movs	r0, r4
 800482c:	f7ff ff6f 	bl	800470e <HAL_TIM_TriggerCallback>
}
 8004830:	e7d5      	b.n	80047de <HAL_TIM_IRQHandler+0xce>
	...

08004834 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004834:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004836:	2338      	movs	r3, #56	; 0x38
 8004838:	5cc3      	ldrb	r3, [r0, r3]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d028      	beq.n	8004890 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 800483e:	2338      	movs	r3, #56	; 0x38
 8004840:	2201      	movs	r2, #1
 8004842:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004844:	3301      	adds	r3, #1
 8004846:	3201      	adds	r2, #1
 8004848:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800484a:	6803      	ldr	r3, [r0, #0]
 800484c:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800484e:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004850:	2570      	movs	r5, #112	; 0x70
 8004852:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004854:	680d      	ldr	r5, [r1, #0]
 8004856:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004858:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800485a:	6803      	ldr	r3, [r0, #0]
 800485c:	2280      	movs	r2, #128	; 0x80
 800485e:	05d2      	lsls	r2, r2, #23
 8004860:	4293      	cmp	r3, r2
 8004862:	d008      	beq.n	8004876 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004864:	4a0b      	ldr	r2, [pc, #44]	; (8004894 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d005      	beq.n	8004876 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 800486a:	4a0b      	ldr	r2, [pc, #44]	; (8004898 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d002      	beq.n	8004876 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004870:	4a0a      	ldr	r2, [pc, #40]	; (800489c <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d104      	bne.n	8004880 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004876:	2280      	movs	r2, #128	; 0x80
 8004878:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800487a:	684a      	ldr	r2, [r1, #4]
 800487c:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800487e:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004880:	2339      	movs	r3, #57	; 0x39
 8004882:	2201      	movs	r2, #1
 8004884:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8004886:	3b01      	subs	r3, #1
 8004888:	2200      	movs	r2, #0
 800488a:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 800488c:	2000      	movs	r0, #0
}
 800488e:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8004890:	2002      	movs	r0, #2
 8004892:	e7fc      	b.n	800488e <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8004894:	40000400 	.word	0x40000400
 8004898:	40010800 	.word	0x40010800
 800489c:	40011400 	.word	0x40011400

080048a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80048a0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048a2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a6:	2301      	movs	r3, #1
 80048a8:	f383 8810 	msr	PRIMASK, r3
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80048ac:	6802      	ldr	r2, [r0, #0]
 80048ae:	6813      	ldr	r3, [r2, #0]
 80048b0:	24c0      	movs	r4, #192	; 0xc0
 80048b2:	43a3      	bics	r3, r4
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	f381 8810 	msr	PRIMASK, r1

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048ba:	2320      	movs	r3, #32
 80048bc:	6783      	str	r3, [r0, #120]	; 0x78
}
 80048be:	bd10      	pop	{r4, pc}

080048c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048c0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048c2:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c6:	2201      	movs	r2, #1
 80048c8:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048cc:	6801      	ldr	r1, [r0, #0]
 80048ce:	680b      	ldr	r3, [r1, #0]
 80048d0:	4c12      	ldr	r4, [pc, #72]	; (800491c <UART_EndRxTransfer+0x5c>)
 80048d2:	4023      	ands	r3, r4
 80048d4:	600b      	str	r3, [r1, #0]
 80048d6:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048da:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048de:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e2:	6801      	ldr	r1, [r0, #0]
 80048e4:	688b      	ldr	r3, [r1, #8]
 80048e6:	4393      	bics	r3, r2
 80048e8:	608b      	str	r3, [r1, #8]
 80048ea:	f38c 8810 	msr	PRIMASK, ip

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ee:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d005      	beq.n	8004900 <UART_EndRxTransfer+0x40>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048f4:	2320      	movs	r3, #32
 80048f6:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048f8:	2300      	movs	r3, #0
 80048fa:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048fc:	6643      	str	r3, [r0, #100]	; 0x64
}
 80048fe:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004900:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004904:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004908:	6802      	ldr	r2, [r0, #0]
 800490a:	6813      	ldr	r3, [r2, #0]
 800490c:	3432      	adds	r4, #50	; 0x32
 800490e:	34ff      	adds	r4, #255	; 0xff
 8004910:	43a3      	bics	r3, r4
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	f381 8810 	msr	PRIMASK, r1
}
 8004918:	e7ec      	b.n	80048f4 <UART_EndRxTransfer+0x34>
 800491a:	46c0      	nop			; (mov r8, r8)
 800491c:	fffffedf 	.word	0xfffffedf

08004920 <HAL_UART_Transmit_DMA>:
{
 8004920:	b510      	push	{r4, lr}
 8004922:	0004      	movs	r4, r0
 8004924:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004926:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8004928:	2a20      	cmp	r2, #32
 800492a:	d154      	bne.n	80049d6 <HAL_UART_Transmit_DMA+0xb6>
    if ((pData == NULL) || (Size == 0U))
 800492c:	2900      	cmp	r1, #0
 800492e:	d054      	beq.n	80049da <HAL_UART_Transmit_DMA+0xba>
 8004930:	2b00      	cmp	r3, #0
 8004932:	d054      	beq.n	80049de <HAL_UART_Transmit_DMA+0xbe>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004934:	2280      	movs	r2, #128	; 0x80
 8004936:	0152      	lsls	r2, r2, #5
 8004938:	6880      	ldr	r0, [r0, #8]
 800493a:	4290      	cmp	r0, r2
 800493c:	d030      	beq.n	80049a0 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 800493e:	2274      	movs	r2, #116	; 0x74
 8004940:	5ca2      	ldrb	r2, [r4, r2]
 8004942:	2a01      	cmp	r2, #1
 8004944:	d04d      	beq.n	80049e2 <HAL_UART_Transmit_DMA+0xc2>
 8004946:	2274      	movs	r2, #116	; 0x74
 8004948:	2001      	movs	r0, #1
 800494a:	54a0      	strb	r0, [r4, r2]
    huart->pTxBuffPtr  = pData;
 800494c:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800494e:	3a24      	subs	r2, #36	; 0x24
 8004950:	52a3      	strh	r3, [r4, r2]
    huart->TxXferCount = Size;
 8004952:	3202      	adds	r2, #2
 8004954:	52a3      	strh	r3, [r4, r2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004956:	322e      	adds	r2, #46	; 0x2e
 8004958:	2100      	movs	r1, #0
 800495a:	50a1      	str	r1, [r4, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800495c:	3a5f      	subs	r2, #95	; 0x5f
 800495e:	67a2      	str	r2, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 8004960:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004962:	2a00      	cmp	r2, #0
 8004964:	d023      	beq.n	80049ae <HAL_UART_Transmit_DMA+0x8e>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004966:	4920      	ldr	r1, [pc, #128]	; (80049e8 <HAL_UART_Transmit_DMA+0xc8>)
 8004968:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800496a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800496c:	491f      	ldr	r1, [pc, #124]	; (80049ec <HAL_UART_Transmit_DMA+0xcc>)
 800496e:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004970:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004972:	491f      	ldr	r1, [pc, #124]	; (80049f0 <HAL_UART_Transmit_DMA+0xd0>)
 8004974:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8004976:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004978:	2100      	movs	r1, #0
 800497a:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800497c:	6822      	ldr	r2, [r4, #0]
 800497e:	3228      	adds	r2, #40	; 0x28
 8004980:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004982:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004984:	f7fe fca8 	bl	80032d8 <HAL_DMA_Start_IT>
 8004988:	2800      	cmp	r0, #0
 800498a:	d010      	beq.n	80049ae <HAL_UART_Transmit_DMA+0x8e>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800498c:	2380      	movs	r3, #128	; 0x80
 800498e:	2210      	movs	r2, #16
 8004990:	50e2      	str	r2, [r4, r3]
        __HAL_UNLOCK(huart);
 8004992:	3b0c      	subs	r3, #12
 8004994:	2200      	movs	r2, #0
 8004996:	54e2      	strb	r2, [r4, r3]
        huart->gState = HAL_UART_STATE_READY;
 8004998:	3b54      	subs	r3, #84	; 0x54
 800499a:	67a3      	str	r3, [r4, #120]	; 0x78
        return HAL_ERROR;
 800499c:	2001      	movs	r0, #1
 800499e:	e01b      	b.n	80049d8 <HAL_UART_Transmit_DMA+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049a0:	6922      	ldr	r2, [r4, #16]
 80049a2:	2a00      	cmp	r2, #0
 80049a4:	d1cb      	bne.n	800493e <HAL_UART_Transmit_DMA+0x1e>
      if ((((uint32_t)pData) & 1U) != 0U)
 80049a6:	07ca      	lsls	r2, r1, #31
 80049a8:	d5c9      	bpl.n	800493e <HAL_UART_Transmit_DMA+0x1e>
        return  HAL_ERROR;
 80049aa:	2001      	movs	r0, #1
 80049ac:	e014      	b.n	80049d8 <HAL_UART_Transmit_DMA+0xb8>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80049ae:	6823      	ldr	r3, [r4, #0]
 80049b0:	2240      	movs	r2, #64	; 0x40
 80049b2:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 80049b4:	2374      	movs	r3, #116	; 0x74
 80049b6:	2200      	movs	r2, #0
 80049b8:	54e2      	strb	r2, [r4, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ba:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049be:	3b73      	subs	r3, #115	; 0x73
 80049c0:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80049c4:	6822      	ldr	r2, [r4, #0]
 80049c6:	6893      	ldr	r3, [r2, #8]
 80049c8:	2080      	movs	r0, #128	; 0x80
 80049ca:	4303      	orrs	r3, r0
 80049cc:	6093      	str	r3, [r2, #8]
 80049ce:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 80049d2:	2000      	movs	r0, #0
 80049d4:	e000      	b.n	80049d8 <HAL_UART_Transmit_DMA+0xb8>
    return HAL_BUSY;
 80049d6:	2002      	movs	r0, #2
}
 80049d8:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 80049da:	2001      	movs	r0, #1
 80049dc:	e7fc      	b.n	80049d8 <HAL_UART_Transmit_DMA+0xb8>
 80049de:	2001      	movs	r0, #1
 80049e0:	e7fa      	b.n	80049d8 <HAL_UART_Transmit_DMA+0xb8>
    __HAL_LOCK(huart);
 80049e2:	2002      	movs	r0, #2
 80049e4:	e7f8      	b.n	80049d8 <HAL_UART_Transmit_DMA+0xb8>
 80049e6:	46c0      	nop			; (mov r8, r8)
 80049e8:	080049f7 	.word	0x080049f7
 80049ec:	08004a6b 	.word	0x08004a6b
 80049f0:	08004a79 	.word	0x08004a79

080049f4 <HAL_UART_TxCpltCallback>:
}
 80049f4:	4770      	bx	lr

080049f6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80049f6:	b510      	push	{r4, lr}
 80049f8:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049fa:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	069b      	lsls	r3, r3, #26
 8004a02:	d41a      	bmi.n	8004a3a <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 8004a04:	2352      	movs	r3, #82	; 0x52
 8004a06:	2200      	movs	r2, #0
 8004a08:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a0a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a0e:	3201      	adds	r2, #1
 8004a10:	f382 8810 	msr	PRIMASK, r2

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004a14:	6801      	ldr	r1, [r0, #0]
 8004a16:	688b      	ldr	r3, [r1, #8]
 8004a18:	2480      	movs	r4, #128	; 0x80
 8004a1a:	43a3      	bics	r3, r4
 8004a1c:	608b      	str	r3, [r1, #8]
 8004a1e:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a22:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a26:	f382 8810 	msr	PRIMASK, r2

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a2a:	6802      	ldr	r2, [r0, #0]
 8004a2c:	6813      	ldr	r3, [r2, #0]
 8004a2e:	2040      	movs	r0, #64	; 0x40
 8004a30:	4303      	orrs	r3, r0
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	f381 8810 	msr	PRIMASK, r1
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a38:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8004a3a:	f7ff ffdb 	bl	80049f4 <HAL_UART_TxCpltCallback>
}
 8004a3e:	e7fb      	b.n	8004a38 <UART_DMATransmitCplt+0x42>

08004a40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a40:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a42:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a46:	2301      	movs	r3, #1
 8004a48:	f383 8810 	msr	PRIMASK, r3
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a4c:	6802      	ldr	r2, [r0, #0]
 8004a4e:	6813      	ldr	r3, [r2, #0]
 8004a50:	2440      	movs	r4, #64	; 0x40
 8004a52:	43a3      	bics	r3, r4
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	f381 8810 	msr	PRIMASK, r1

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a5a:	2320      	movs	r3, #32
 8004a5c:	6783      	str	r3, [r0, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	6683      	str	r3, [r0, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a62:	f7ff ffc7 	bl	80049f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a66:	bd10      	pop	{r4, pc}

08004a68 <HAL_UART_TxHalfCpltCallback>:
}
 8004a68:	4770      	bx	lr

08004a6a <UART_DMATxHalfCplt>:
{
 8004a6a:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a6c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  HAL_UART_TxHalfCpltCallback(huart);
 8004a6e:	f7ff fffb 	bl	8004a68 <HAL_UART_TxHalfCpltCallback>
}
 8004a72:	bd10      	pop	{r4, pc}

08004a74 <HAL_UART_RxHalfCpltCallback>:
}
 8004a74:	4770      	bx	lr

08004a76 <HAL_UART_ErrorCallback>:
}
 8004a76:	4770      	bx	lr

08004a78 <UART_DMAError>:
{
 8004a78:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a7a:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004a7c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004a7e:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	061b      	lsls	r3, r3, #24
 8004a86:	d501      	bpl.n	8004a8c <UART_DMAError+0x14>
 8004a88:	2a21      	cmp	r2, #33	; 0x21
 8004a8a:	d00e      	beq.n	8004aaa <UART_DMAError+0x32>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	065b      	lsls	r3, r3, #25
 8004a92:	d501      	bpl.n	8004a98 <UART_DMAError+0x20>
 8004a94:	2d22      	cmp	r5, #34	; 0x22
 8004a96:	d00f      	beq.n	8004ab8 <UART_DMAError+0x40>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004a98:	2280      	movs	r2, #128	; 0x80
 8004a9a:	58a3      	ldr	r3, [r4, r2]
 8004a9c:	2110      	movs	r1, #16
 8004a9e:	430b      	orrs	r3, r1
 8004aa0:	50a3      	str	r3, [r4, r2]
  HAL_UART_ErrorCallback(huart);
 8004aa2:	0020      	movs	r0, r4
 8004aa4:	f7ff ffe7 	bl	8004a76 <HAL_UART_ErrorCallback>
}
 8004aa8:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 8004aaa:	2352      	movs	r3, #82	; 0x52
 8004aac:	2200      	movs	r2, #0
 8004aae:	52e2      	strh	r2, [r4, r3]
    UART_EndTxTransfer(huart);
 8004ab0:	0020      	movs	r0, r4
 8004ab2:	f7ff fef5 	bl	80048a0 <UART_EndTxTransfer>
 8004ab6:	e7e9      	b.n	8004a8c <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 8004ab8:	235a      	movs	r3, #90	; 0x5a
 8004aba:	2200      	movs	r2, #0
 8004abc:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 8004abe:	0020      	movs	r0, r4
 8004ac0:	f7ff fefe 	bl	80048c0 <UART_EndRxTransfer>
 8004ac4:	e7e8      	b.n	8004a98 <UART_DMAError+0x20>

08004ac6 <UART_DMAAbortOnError>:
{
 8004ac6:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ac8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	225a      	movs	r2, #90	; 0x5a
 8004ace:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8004ad0:	3a08      	subs	r2, #8
 8004ad2:	5283      	strh	r3, [r0, r2]
  HAL_UART_ErrorCallback(huart);
 8004ad4:	f7ff ffcf 	bl	8004a76 <HAL_UART_ErrorCallback>
}
 8004ad8:	bd10      	pop	{r4, pc}

08004ada <HAL_UARTEx_RxEventCallback>:
}
 8004ada:	4770      	bx	lr

08004adc <HAL_UART_IRQHandler>:
{
 8004adc:	b570      	push	{r4, r5, r6, lr}
 8004ade:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ae0:	6802      	ldr	r2, [r0, #0]
 8004ae2:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ae4:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ae6:	6895      	ldr	r5, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ae8:	49ab      	ldr	r1, [pc, #684]	; (8004d98 <HAL_UART_IRQHandler+0x2bc>)
 8004aea:	001e      	movs	r6, r3
 8004aec:	400e      	ands	r6, r1
  if (errorflags == 0U)
 8004aee:	420b      	tst	r3, r1
 8004af0:	d103      	bne.n	8004afa <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004af2:	0699      	lsls	r1, r3, #26
 8004af4:	d501      	bpl.n	8004afa <HAL_UART_IRQHandler+0x1e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004af6:	0681      	lsls	r1, r0, #26
 8004af8:	d41d      	bmi.n	8004b36 <HAL_UART_IRQHandler+0x5a>
  if ((errorflags != 0U)
 8004afa:	2e00      	cmp	r6, #0
 8004afc:	d007      	beq.n	8004b0e <HAL_UART_IRQHandler+0x32>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004afe:	2101      	movs	r1, #1
 8004b00:	000e      	movs	r6, r1
 8004b02:	402e      	ands	r6, r5
 8004b04:	4229      	tst	r1, r5
 8004b06:	d11c      	bne.n	8004b42 <HAL_UART_IRQHandler+0x66>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004b08:	49a4      	ldr	r1, [pc, #656]	; (8004d9c <HAL_UART_IRQHandler+0x2c0>)
 8004b0a:	4208      	tst	r0, r1
 8004b0c:	d119      	bne.n	8004b42 <HAL_UART_IRQHandler+0x66>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b0e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004b10:	2901      	cmp	r1, #1
 8004b12:	d100      	bne.n	8004b16 <HAL_UART_IRQHandler+0x3a>
 8004b14:	e098      	b.n	8004c48 <HAL_UART_IRQHandler+0x16c>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b16:	02d9      	lsls	r1, r3, #11
 8004b18:	d502      	bpl.n	8004b20 <HAL_UART_IRQHandler+0x44>
 8004b1a:	0269      	lsls	r1, r5, #9
 8004b1c:	d500      	bpl.n	8004b20 <HAL_UART_IRQHandler+0x44>
 8004b1e:	e128      	b.n	8004d72 <HAL_UART_IRQHandler+0x296>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004b20:	061a      	lsls	r2, r3, #24
 8004b22:	d502      	bpl.n	8004b2a <HAL_UART_IRQHandler+0x4e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004b24:	0602      	lsls	r2, r0, #24
 8004b26:	d500      	bpl.n	8004b2a <HAL_UART_IRQHandler+0x4e>
 8004b28:	e12a      	b.n	8004d80 <HAL_UART_IRQHandler+0x2a4>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b2a:	065b      	lsls	r3, r3, #25
 8004b2c:	d502      	bpl.n	8004b34 <HAL_UART_IRQHandler+0x58>
 8004b2e:	0643      	lsls	r3, r0, #25
 8004b30:	d500      	bpl.n	8004b34 <HAL_UART_IRQHandler+0x58>
 8004b32:	e12c      	b.n	8004d8e <HAL_UART_IRQHandler+0x2b2>
}
 8004b34:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8004b36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0fb      	beq.n	8004b34 <HAL_UART_IRQHandler+0x58>
        huart->RxISR(huart);
 8004b3c:	0020      	movs	r0, r4
 8004b3e:	4798      	blx	r3
      return;
 8004b40:	e7f8      	b.n	8004b34 <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b42:	07d9      	lsls	r1, r3, #31
 8004b44:	d507      	bpl.n	8004b56 <HAL_UART_IRQHandler+0x7a>
 8004b46:	05c1      	lsls	r1, r0, #23
 8004b48:	d505      	bpl.n	8004b56 <HAL_UART_IRQHandler+0x7a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b4a:	2501      	movs	r5, #1
 8004b4c:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b4e:	2180      	movs	r1, #128	; 0x80
 8004b50:	5862      	ldr	r2, [r4, r1]
 8004b52:	432a      	orrs	r2, r5
 8004b54:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b56:	079a      	lsls	r2, r3, #30
 8004b58:	d509      	bpl.n	8004b6e <HAL_UART_IRQHandler+0x92>
 8004b5a:	2e00      	cmp	r6, #0
 8004b5c:	d007      	beq.n	8004b6e <HAL_UART_IRQHandler+0x92>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b5e:	6822      	ldr	r2, [r4, #0]
 8004b60:	2102      	movs	r1, #2
 8004b62:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b64:	317e      	adds	r1, #126	; 0x7e
 8004b66:	5862      	ldr	r2, [r4, r1]
 8004b68:	2504      	movs	r5, #4
 8004b6a:	432a      	orrs	r2, r5
 8004b6c:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b6e:	075a      	lsls	r2, r3, #29
 8004b70:	d509      	bpl.n	8004b86 <HAL_UART_IRQHandler+0xaa>
 8004b72:	2e00      	cmp	r6, #0
 8004b74:	d007      	beq.n	8004b86 <HAL_UART_IRQHandler+0xaa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b76:	6822      	ldr	r2, [r4, #0]
 8004b78:	2104      	movs	r1, #4
 8004b7a:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b7c:	317c      	adds	r1, #124	; 0x7c
 8004b7e:	5862      	ldr	r2, [r4, r1]
 8004b80:	2502      	movs	r5, #2
 8004b82:	432a      	orrs	r2, r5
 8004b84:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b86:	071a      	lsls	r2, r3, #28
 8004b88:	d50a      	bpl.n	8004ba0 <HAL_UART_IRQHandler+0xc4>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b8a:	0682      	lsls	r2, r0, #26
 8004b8c:	d401      	bmi.n	8004b92 <HAL_UART_IRQHandler+0xb6>
 8004b8e:	2e00      	cmp	r6, #0
 8004b90:	d006      	beq.n	8004ba0 <HAL_UART_IRQHandler+0xc4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b92:	6822      	ldr	r2, [r4, #0]
 8004b94:	2508      	movs	r5, #8
 8004b96:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b98:	2180      	movs	r1, #128	; 0x80
 8004b9a:	5862      	ldr	r2, [r4, r1]
 8004b9c:	432a      	orrs	r2, r5
 8004b9e:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ba0:	051a      	lsls	r2, r3, #20
 8004ba2:	d50a      	bpl.n	8004bba <HAL_UART_IRQHandler+0xde>
 8004ba4:	0142      	lsls	r2, r0, #5
 8004ba6:	d508      	bpl.n	8004bba <HAL_UART_IRQHandler+0xde>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ba8:	6822      	ldr	r2, [r4, #0]
 8004baa:	2180      	movs	r1, #128	; 0x80
 8004bac:	0109      	lsls	r1, r1, #4
 8004bae:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004bb0:	2180      	movs	r1, #128	; 0x80
 8004bb2:	5862      	ldr	r2, [r4, r1]
 8004bb4:	2520      	movs	r5, #32
 8004bb6:	432a      	orrs	r2, r5
 8004bb8:	5062      	str	r2, [r4, r1]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bba:	2280      	movs	r2, #128	; 0x80
 8004bbc:	58a2      	ldr	r2, [r4, r2]
 8004bbe:	2a00      	cmp	r2, #0
 8004bc0:	d0b8      	beq.n	8004b34 <HAL_UART_IRQHandler+0x58>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004bc2:	069b      	lsls	r3, r3, #26
 8004bc4:	d506      	bpl.n	8004bd4 <HAL_UART_IRQHandler+0xf8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004bc6:	0683      	lsls	r3, r0, #26
 8004bc8:	d504      	bpl.n	8004bd4 <HAL_UART_IRQHandler+0xf8>
        if (huart->RxISR != NULL)
 8004bca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <HAL_UART_IRQHandler+0xf8>
          huart->RxISR(huart);
 8004bd0:	0020      	movs	r0, r4
 8004bd2:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8004bd4:	2380      	movs	r3, #128	; 0x80
 8004bd6:	58e2      	ldr	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004bd8:	6823      	ldr	r3, [r4, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	065b      	lsls	r3, r3, #25
 8004bde:	d402      	bmi.n	8004be6 <HAL_UART_IRQHandler+0x10a>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004be0:	2328      	movs	r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004be2:	4213      	tst	r3, r2
 8004be4:	d029      	beq.n	8004c3a <HAL_UART_IRQHandler+0x15e>
        UART_EndRxTransfer(huart);
 8004be6:	0020      	movs	r0, r4
 8004be8:	f7ff fe6a 	bl	80048c0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	065b      	lsls	r3, r3, #25
 8004bf2:	d51e      	bpl.n	8004c32 <HAL_UART_IRQHandler+0x156>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bf4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bfe:	6822      	ldr	r2, [r4, #0]
 8004c00:	6893      	ldr	r3, [r2, #8]
 8004c02:	2040      	movs	r0, #64	; 0x40
 8004c04:	4383      	bics	r3, r0
 8004c06:	6093      	str	r3, [r2, #8]
 8004c08:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8004c0c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00b      	beq.n	8004c2a <HAL_UART_IRQHandler+0x14e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c12:	4a63      	ldr	r2, [pc, #396]	; (8004da0 <HAL_UART_IRQHandler+0x2c4>)
 8004c14:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c16:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004c18:	f7fe fbbd 	bl	8003396 <HAL_DMA_Abort_IT>
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	d100      	bne.n	8004c22 <HAL_UART_IRQHandler+0x146>
 8004c20:	e788      	b.n	8004b34 <HAL_UART_IRQHandler+0x58>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c22:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004c24:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004c26:	4798      	blx	r3
 8004c28:	e784      	b.n	8004b34 <HAL_UART_IRQHandler+0x58>
            HAL_UART_ErrorCallback(huart);
 8004c2a:	0020      	movs	r0, r4
 8004c2c:	f7ff ff23 	bl	8004a76 <HAL_UART_ErrorCallback>
 8004c30:	e780      	b.n	8004b34 <HAL_UART_IRQHandler+0x58>
          HAL_UART_ErrorCallback(huart);
 8004c32:	0020      	movs	r0, r4
 8004c34:	f7ff ff1f 	bl	8004a76 <HAL_UART_ErrorCallback>
 8004c38:	e77c      	b.n	8004b34 <HAL_UART_IRQHandler+0x58>
        HAL_UART_ErrorCallback(huart);
 8004c3a:	0020      	movs	r0, r4
 8004c3c:	f7ff ff1b 	bl	8004a76 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c40:	2380      	movs	r3, #128	; 0x80
 8004c42:	2200      	movs	r2, #0
 8004c44:	50e2      	str	r2, [r4, r3]
    return;
 8004c46:	e775      	b.n	8004b34 <HAL_UART_IRQHandler+0x58>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c48:	06d9      	lsls	r1, r3, #27
 8004c4a:	d400      	bmi.n	8004c4e <HAL_UART_IRQHandler+0x172>
 8004c4c:	e763      	b.n	8004b16 <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c4e:	06c1      	lsls	r1, r0, #27
 8004c50:	d400      	bmi.n	8004c54 <HAL_UART_IRQHandler+0x178>
 8004c52:	e760      	b.n	8004b16 <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c54:	2310      	movs	r3, #16
 8004c56:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	065b      	lsls	r3, r3, #25
 8004c5e:	d550      	bpl.n	8004d02 <HAL_UART_IRQHandler+0x226>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c60:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8004c62:	6813      	ldr	r3, [r2, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d100      	bne.n	8004c6e <HAL_UART_IRQHandler+0x192>
 8004c6c:	e762      	b.n	8004b34 <HAL_UART_IRQHandler+0x58>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c6e:	2158      	movs	r1, #88	; 0x58
 8004c70:	5a61      	ldrh	r1, [r4, r1]
 8004c72:	4299      	cmp	r1, r3
 8004c74:	d800      	bhi.n	8004c78 <HAL_UART_IRQHandler+0x19c>
 8004c76:	e75d      	b.n	8004b34 <HAL_UART_IRQHandler+0x58>
        huart->RxXferCount = nb_remaining_rx_data;
 8004c78:	215a      	movs	r1, #90	; 0x5a
 8004c7a:	5263      	strh	r3, [r4, r1]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004c7c:	6813      	ldr	r3, [r2, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	069b      	lsls	r3, r3, #26
 8004c82:	d509      	bpl.n	8004c98 <HAL_UART_IRQHandler+0x1bc>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c84:	2358      	movs	r3, #88	; 0x58
 8004c86:	5ae1      	ldrh	r1, [r4, r3]
 8004c88:	3302      	adds	r3, #2
 8004c8a:	5ae3      	ldrh	r3, [r4, r3]
 8004c8c:	1ac9      	subs	r1, r1, r3
 8004c8e:	b289      	uxth	r1, r1
 8004c90:	0020      	movs	r0, r4
 8004c92:	f7ff ff22 	bl	8004ada <HAL_UARTEx_RxEventCallback>
      return;
 8004c96:	e74d      	b.n	8004b34 <HAL_UART_IRQHandler+0x58>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c98:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ca2:	6821      	ldr	r1, [r4, #0]
 8004ca4:	680a      	ldr	r2, [r1, #0]
 8004ca6:	4d3f      	ldr	r5, [pc, #252]	; (8004da4 <HAL_UART_IRQHandler+0x2c8>)
 8004ca8:	402a      	ands	r2, r5
 8004caa:	600a      	str	r2, [r1, #0]
 8004cac:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cb0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb4:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb8:	6821      	ldr	r1, [r4, #0]
 8004cba:	688a      	ldr	r2, [r1, #8]
 8004cbc:	439a      	bics	r2, r3
 8004cbe:	608a      	str	r2, [r1, #8]
 8004cc0:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc8:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ccc:	6821      	ldr	r1, [r4, #0]
 8004cce:	688a      	ldr	r2, [r1, #8]
 8004cd0:	3542      	adds	r5, #66	; 0x42
 8004cd2:	35ff      	adds	r5, #255	; 0xff
 8004cd4:	43aa      	bics	r2, r5
 8004cd6:	608a      	str	r2, [r1, #8]
 8004cd8:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 8004cdc:	2220      	movs	r2, #32
 8004cde:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	6622      	str	r2, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ce4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce8:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cec:	6822      	ldr	r2, [r4, #0]
 8004cee:	6813      	ldr	r3, [r2, #0]
 8004cf0:	2010      	movs	r0, #16
 8004cf2:	4383      	bics	r3, r0
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cfa:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004cfc:	f7fe fb27 	bl	800334e <HAL_DMA_Abort>
 8004d00:	e7c0      	b.n	8004c84 <HAL_UART_IRQHandler+0x1a8>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d02:	2358      	movs	r3, #88	; 0x58
 8004d04:	5ae1      	ldrh	r1, [r4, r3]
 8004d06:	3302      	adds	r3, #2
 8004d08:	5ae2      	ldrh	r2, [r4, r3]
 8004d0a:	1a89      	subs	r1, r1, r2
 8004d0c:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8004d0e:	5ae3      	ldrh	r3, [r4, r3]
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d100      	bne.n	8004d18 <HAL_UART_IRQHandler+0x23c>
 8004d16:	e70d      	b.n	8004b34 <HAL_UART_IRQHandler+0x58>
          && (nb_rx_data > 0U))
 8004d18:	2900      	cmp	r1, #0
 8004d1a:	d100      	bne.n	8004d1e <HAL_UART_IRQHandler+0x242>
 8004d1c:	e70a      	b.n	8004b34 <HAL_UART_IRQHandler+0x58>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d1e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d22:	2301      	movs	r3, #1
 8004d24:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d28:	6820      	ldr	r0, [r4, #0]
 8004d2a:	6802      	ldr	r2, [r0, #0]
 8004d2c:	4e1e      	ldr	r6, [pc, #120]	; (8004da8 <HAL_UART_IRQHandler+0x2cc>)
 8004d2e:	4032      	ands	r2, r6
 8004d30:	6002      	str	r2, [r0, #0]
 8004d32:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d36:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d3a:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d3e:	6820      	ldr	r0, [r4, #0]
 8004d40:	6882      	ldr	r2, [r0, #8]
 8004d42:	439a      	bics	r2, r3
 8004d44:	6082      	str	r2, [r0, #8]
 8004d46:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d4e:	2200      	movs	r2, #0
 8004d50:	6622      	str	r2, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 8004d52:	6662      	str	r2, [r4, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d54:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d58:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d5c:	6822      	ldr	r2, [r4, #0]
 8004d5e:	6813      	ldr	r3, [r2, #0]
 8004d60:	2510      	movs	r5, #16
 8004d62:	43ab      	bics	r3, r5
 8004d64:	6013      	str	r3, [r2, #0]
 8004d66:	f380 8810 	msr	PRIMASK, r0
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d6a:	0020      	movs	r0, r4
 8004d6c:	f7ff feb5 	bl	8004ada <HAL_UARTEx_RxEventCallback>
      return;
 8004d70:	e6e0      	b.n	8004b34 <HAL_UART_IRQHandler+0x58>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d72:	2380      	movs	r3, #128	; 0x80
 8004d74:	035b      	lsls	r3, r3, #13
 8004d76:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8004d78:	0020      	movs	r0, r4
 8004d7a:	f000 fbb3 	bl	80054e4 <HAL_UARTEx_WakeupCallback>
    return;
 8004d7e:	e6d9      	b.n	8004b34 <HAL_UART_IRQHandler+0x58>
    if (huart->TxISR != NULL)
 8004d80:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d100      	bne.n	8004d88 <HAL_UART_IRQHandler+0x2ac>
 8004d86:	e6d5      	b.n	8004b34 <HAL_UART_IRQHandler+0x58>
      huart->TxISR(huart);
 8004d88:	0020      	movs	r0, r4
 8004d8a:	4798      	blx	r3
    return;
 8004d8c:	e6d2      	b.n	8004b34 <HAL_UART_IRQHandler+0x58>
    UART_EndTransmit_IT(huart);
 8004d8e:	0020      	movs	r0, r4
 8004d90:	f7ff fe56 	bl	8004a40 <UART_EndTransmit_IT>
    return;
 8004d94:	e6ce      	b.n	8004b34 <HAL_UART_IRQHandler+0x58>
 8004d96:	46c0      	nop			; (mov r8, r8)
 8004d98:	0000080f 	.word	0x0000080f
 8004d9c:	04000120 	.word	0x04000120
 8004da0:	08004ac7 	.word	0x08004ac7
 8004da4:	fffffeff 	.word	0xfffffeff
 8004da8:	fffffedf 	.word	0xfffffedf

08004dac <UART_DMARxHalfCplt>:
{
 8004dac:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004dae:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004db0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d002      	beq.n	8004dbc <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8004db6:	f7ff fe5d 	bl	8004a74 <HAL_UART_RxHalfCpltCallback>
}
 8004dba:	bd10      	pop	{r4, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004dbc:	3357      	adds	r3, #87	; 0x57
 8004dbe:	5ac1      	ldrh	r1, [r0, r3]
 8004dc0:	0849      	lsrs	r1, r1, #1
 8004dc2:	f7ff fe8a 	bl	8004ada <HAL_UARTEx_RxEventCallback>
 8004dc6:	e7f8      	b.n	8004dba <UART_DMARxHalfCplt+0xe>

08004dc8 <UART_DMAReceiveCplt>:
{
 8004dc8:	b570      	push	{r4, r5, r6, lr}
 8004dca:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004dcc:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	069b      	lsls	r3, r3, #26
 8004dd4:	d428      	bmi.n	8004e28 <UART_DMAReceiveCplt+0x60>
    huart->RxXferCount = 0U;
 8004dd6:	235a      	movs	r3, #90	; 0x5a
 8004dd8:	2200      	movs	r2, #0
 8004dda:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ddc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de0:	3b59      	subs	r3, #89	; 0x59
 8004de2:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004de6:	6801      	ldr	r1, [r0, #0]
 8004de8:	680a      	ldr	r2, [r1, #0]
 8004dea:	4d1b      	ldr	r5, [pc, #108]	; (8004e58 <UART_DMAReceiveCplt+0x90>)
 8004dec:	402a      	ands	r2, r5
 8004dee:	600a      	str	r2, [r1, #0]
 8004df0:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004df4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df8:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfc:	6801      	ldr	r1, [r0, #0]
 8004dfe:	688a      	ldr	r2, [r1, #8]
 8004e00:	439a      	bics	r2, r3
 8004e02:	608a      	str	r2, [r1, #8]
 8004e04:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e08:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e0c:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e10:	6802      	ldr	r2, [r0, #0]
 8004e12:	6893      	ldr	r3, [r2, #8]
 8004e14:	2440      	movs	r4, #64	; 0x40
 8004e16:	43a3      	bics	r3, r4
 8004e18:	6093      	str	r3, [r2, #8]
 8004e1a:	f381 8810 	msr	PRIMASK, r1
    huart->RxState = HAL_UART_STATE_READY;
 8004e1e:	2320      	movs	r3, #32
 8004e20:	67c3      	str	r3, [r0, #124]	; 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e22:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d005      	beq.n	8004e34 <UART_DMAReceiveCplt+0x6c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e28:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d00e      	beq.n	8004e4c <UART_DMAReceiveCplt+0x84>
    HAL_UART_RxCpltCallback(huart);
 8004e2e:	f002 fc29 	bl	8007684 <HAL_UART_RxCpltCallback>
}
 8004e32:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e34:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e38:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e3c:	6802      	ldr	r2, [r0, #0]
 8004e3e:	6813      	ldr	r3, [r2, #0]
 8004e40:	3c30      	subs	r4, #48	; 0x30
 8004e42:	43a3      	bics	r3, r4
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	f381 8810 	msr	PRIMASK, r1
}
 8004e4a:	e7ed      	b.n	8004e28 <UART_DMAReceiveCplt+0x60>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e4c:	3357      	adds	r3, #87	; 0x57
 8004e4e:	5ac1      	ldrh	r1, [r0, r3]
 8004e50:	f7ff fe43 	bl	8004ada <HAL_UARTEx_RxEventCallback>
 8004e54:	e7ed      	b.n	8004e32 <UART_DMAReceiveCplt+0x6a>
 8004e56:	46c0      	nop			; (mov r8, r8)
 8004e58:	fffffeff 	.word	0xfffffeff

08004e5c <UART_SetConfig>:
{
 8004e5c:	b5d0      	push	{r4, r6, r7, lr}
 8004e5e:	0004      	movs	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e60:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e62:	6883      	ldr	r3, [r0, #8]
 8004e64:	6902      	ldr	r2, [r0, #16]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	6942      	ldr	r2, [r0, #20]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	69c2      	ldr	r2, [r0, #28]
 8004e6e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e70:	680a      	ldr	r2, [r1, #0]
 8004e72:	489b      	ldr	r0, [pc, #620]	; (80050e0 <UART_SetConfig+0x284>)
 8004e74:	4002      	ands	r2, r0
 8004e76:	4313      	orrs	r3, r2
 8004e78:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e7a:	6822      	ldr	r2, [r4, #0]
 8004e7c:	6853      	ldr	r3, [r2, #4]
 8004e7e:	4999      	ldr	r1, [pc, #612]	; (80050e4 <UART_SetConfig+0x288>)
 8004e80:	400b      	ands	r3, r1
 8004e82:	68e1      	ldr	r1, [r4, #12]
 8004e84:	430b      	orrs	r3, r1
 8004e86:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e88:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e8a:	6822      	ldr	r2, [r4, #0]
 8004e8c:	4b96      	ldr	r3, [pc, #600]	; (80050e8 <UART_SetConfig+0x28c>)
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d001      	beq.n	8004e96 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8004e92:	6a23      	ldr	r3, [r4, #32]
 8004e94:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e96:	6893      	ldr	r3, [r2, #8]
 8004e98:	4894      	ldr	r0, [pc, #592]	; (80050ec <UART_SetConfig+0x290>)
 8004e9a:	4003      	ands	r3, r0
 8004e9c:	430b      	orrs	r3, r1
 8004e9e:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ea0:	6822      	ldr	r2, [r4, #0]
 8004ea2:	4b93      	ldr	r3, [pc, #588]	; (80050f0 <UART_SetConfig+0x294>)
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d00d      	beq.n	8004ec4 <UART_SetConfig+0x68>
 8004ea8:	4b92      	ldr	r3, [pc, #584]	; (80050f4 <UART_SetConfig+0x298>)
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d02a      	beq.n	8004f04 <UART_SetConfig+0xa8>
 8004eae:	4b92      	ldr	r3, [pc, #584]	; (80050f8 <UART_SetConfig+0x29c>)
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d05e      	beq.n	8004f72 <UART_SetConfig+0x116>
 8004eb4:	4b91      	ldr	r3, [pc, #580]	; (80050fc <UART_SetConfig+0x2a0>)
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d05d      	beq.n	8004f76 <UART_SetConfig+0x11a>
 8004eba:	4b8b      	ldr	r3, [pc, #556]	; (80050e8 <UART_SetConfig+0x28c>)
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d032      	beq.n	8004f26 <UART_SetConfig+0xca>
 8004ec0:	2310      	movs	r3, #16
 8004ec2:	e00b      	b.n	8004edc <UART_SetConfig+0x80>
 8004ec4:	4b8e      	ldr	r3, [pc, #568]	; (8005100 <UART_SetConfig+0x2a4>)
 8004ec6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004ec8:	2303      	movs	r3, #3
 8004eca:	400b      	ands	r3, r1
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d042      	beq.n	8004f56 <UART_SetConfig+0xfa>
 8004ed0:	d814      	bhi.n	8004efc <UART_SetConfig+0xa0>
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d041      	beq.n	8004f5a <UART_SetConfig+0xfe>
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d141      	bne.n	8004f5e <UART_SetConfig+0x102>
 8004eda:	3303      	adds	r3, #3
  if (UART_INSTANCE_LOWPOWER(huart))
 8004edc:	4982      	ldr	r1, [pc, #520]	; (80050e8 <UART_SetConfig+0x28c>)
 8004ede:	428a      	cmp	r2, r1
 8004ee0:	d053      	beq.n	8004f8a <UART_SetConfig+0x12e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ee2:	69e0      	ldr	r0, [r4, #28]
 8004ee4:	2280      	movs	r2, #128	; 0x80
 8004ee6:	0212      	lsls	r2, r2, #8
 8004ee8:	4290      	cmp	r0, r2
 8004eea:	d100      	bne.n	8004eee <UART_SetConfig+0x92>
 8004eec:	e08a      	b.n	8005004 <UART_SetConfig+0x1a8>
    switch (clocksource)
 8004eee:	2b08      	cmp	r3, #8
 8004ef0:	d900      	bls.n	8004ef4 <UART_SetConfig+0x98>
 8004ef2:	e0ee      	b.n	80050d2 <UART_SetConfig+0x276>
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4a83      	ldr	r2, [pc, #524]	; (8005104 <UART_SetConfig+0x2a8>)
 8004ef8:	58d3      	ldr	r3, [r2, r3]
 8004efa:	469f      	mov	pc, r3
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004efc:	2b03      	cmp	r3, #3
 8004efe:	d130      	bne.n	8004f62 <UART_SetConfig+0x106>
 8004f00:	3305      	adds	r3, #5
 8004f02:	e7eb      	b.n	8004edc <UART_SetConfig+0x80>
 8004f04:	4b7e      	ldr	r3, [pc, #504]	; (8005100 <UART_SetConfig+0x2a4>)
 8004f06:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004f08:	230c      	movs	r3, #12
 8004f0a:	400b      	ands	r3, r1
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d02a      	beq.n	8004f66 <UART_SetConfig+0x10a>
 8004f10:	d805      	bhi.n	8004f1e <UART_SetConfig+0xc2>
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d029      	beq.n	8004f6a <UART_SetConfig+0x10e>
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d0e0      	beq.n	8004edc <UART_SetConfig+0x80>
 8004f1a:	2310      	movs	r3, #16
 8004f1c:	e7de      	b.n	8004edc <UART_SetConfig+0x80>
 8004f1e:	2b0c      	cmp	r3, #12
 8004f20:	d125      	bne.n	8004f6e <UART_SetConfig+0x112>
 8004f22:	3b04      	subs	r3, #4
 8004f24:	e7da      	b.n	8004edc <UART_SetConfig+0x80>
 8004f26:	4b76      	ldr	r3, [pc, #472]	; (8005100 <UART_SetConfig+0x2a4>)
 8004f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f2a:	21c0      	movs	r1, #192	; 0xc0
 8004f2c:	0109      	lsls	r1, r1, #4
 8004f2e:	400b      	ands	r3, r1
 8004f30:	2180      	movs	r1, #128	; 0x80
 8004f32:	0109      	lsls	r1, r1, #4
 8004f34:	428b      	cmp	r3, r1
 8004f36:	d020      	beq.n	8004f7a <UART_SetConfig+0x11e>
 8004f38:	d807      	bhi.n	8004f4a <UART_SetConfig+0xee>
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d01f      	beq.n	8004f7e <UART_SetConfig+0x122>
 8004f3e:	2180      	movs	r1, #128	; 0x80
 8004f40:	00c9      	lsls	r1, r1, #3
 8004f42:	428b      	cmp	r3, r1
 8004f44:	d11d      	bne.n	8004f82 <UART_SetConfig+0x126>
 8004f46:	2304      	movs	r3, #4
 8004f48:	e7c8      	b.n	8004edc <UART_SetConfig+0x80>
 8004f4a:	21c0      	movs	r1, #192	; 0xc0
 8004f4c:	0109      	lsls	r1, r1, #4
 8004f4e:	428b      	cmp	r3, r1
 8004f50:	d119      	bne.n	8004f86 <UART_SetConfig+0x12a>
 8004f52:	2308      	movs	r3, #8
 8004f54:	e7c2      	b.n	8004edc <UART_SetConfig+0x80>
 8004f56:	2302      	movs	r3, #2
 8004f58:	e7c0      	b.n	8004edc <UART_SetConfig+0x80>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e7be      	b.n	8004edc <UART_SetConfig+0x80>
 8004f5e:	2310      	movs	r3, #16
 8004f60:	e7bc      	b.n	8004edc <UART_SetConfig+0x80>
 8004f62:	2310      	movs	r3, #16
 8004f64:	e7ba      	b.n	8004edc <UART_SetConfig+0x80>
 8004f66:	2302      	movs	r3, #2
 8004f68:	e7b8      	b.n	8004edc <UART_SetConfig+0x80>
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	e7b6      	b.n	8004edc <UART_SetConfig+0x80>
 8004f6e:	2310      	movs	r3, #16
 8004f70:	e7b4      	b.n	8004edc <UART_SetConfig+0x80>
 8004f72:	2300      	movs	r3, #0
 8004f74:	e7b2      	b.n	8004edc <UART_SetConfig+0x80>
 8004f76:	2300      	movs	r3, #0
 8004f78:	e7b0      	b.n	8004edc <UART_SetConfig+0x80>
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	e7ae      	b.n	8004edc <UART_SetConfig+0x80>
 8004f7e:	2300      	movs	r3, #0
 8004f80:	e7ac      	b.n	8004edc <UART_SetConfig+0x80>
 8004f82:	2310      	movs	r3, #16
 8004f84:	e7aa      	b.n	8004edc <UART_SetConfig+0x80>
 8004f86:	2310      	movs	r3, #16
 8004f88:	e7a8      	b.n	8004edc <UART_SetConfig+0x80>
    switch (clocksource)
 8004f8a:	2b04      	cmp	r3, #4
 8004f8c:	d035      	beq.n	8004ffa <UART_SetConfig+0x19e>
 8004f8e:	d80b      	bhi.n	8004fa8 <UART_SetConfig+0x14c>
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d02c      	beq.n	8004fee <UART_SetConfig+0x192>
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d105      	bne.n	8004fa4 <UART_SetConfig+0x148>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f98:	4b59      	ldr	r3, [pc, #356]	; (8005100 <UART_SetConfig+0x2a4>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	06db      	lsls	r3, r3, #27
 8004f9e:	d42f      	bmi.n	8005000 <UART_SetConfig+0x1a4>
          pclk = (uint32_t) HSI_VALUE;
 8004fa0:	4859      	ldr	r0, [pc, #356]	; (8005108 <UART_SetConfig+0x2ac>)
 8004fa2:	e005      	b.n	8004fb0 <UART_SetConfig+0x154>
    switch (clocksource)
 8004fa4:	2001      	movs	r0, #1
 8004fa6:	e073      	b.n	8005090 <UART_SetConfig+0x234>
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d11e      	bne.n	8004fea <UART_SetConfig+0x18e>
 8004fac:	2080      	movs	r0, #128	; 0x80
 8004fae:	0200      	lsls	r0, r0, #8
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fb0:	6862      	ldr	r2, [r4, #4]
 8004fb2:	0053      	lsls	r3, r2, #1
 8004fb4:	189b      	adds	r3, r3, r2
 8004fb6:	4283      	cmp	r3, r0
 8004fb8:	d900      	bls.n	8004fbc <UART_SetConfig+0x160>
 8004fba:	e07e      	b.n	80050ba <UART_SetConfig+0x25e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004fbc:	0313      	lsls	r3, r2, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fbe:	4283      	cmp	r3, r0
 8004fc0:	d200      	bcs.n	8004fc4 <UART_SetConfig+0x168>
 8004fc2:	e07c      	b.n	80050be <UART_SetConfig+0x262>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004fc4:	0e07      	lsrs	r7, r0, #24
 8004fc6:	0206      	lsls	r6, r0, #8
 8004fc8:	0850      	lsrs	r0, r2, #1
 8004fca:	2100      	movs	r1, #0
 8004fcc:	1980      	adds	r0, r0, r6
 8004fce:	4179      	adcs	r1, r7
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	f7fb fa69 	bl	80004a8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fd6:	4b4d      	ldr	r3, [pc, #308]	; (800510c <UART_SetConfig+0x2b0>)
 8004fd8:	18c2      	adds	r2, r0, r3
 8004fda:	4b4d      	ldr	r3, [pc, #308]	; (8005110 <UART_SetConfig+0x2b4>)
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d900      	bls.n	8004fe2 <UART_SetConfig+0x186>
 8004fe0:	e06f      	b.n	80050c2 <UART_SetConfig+0x266>
          huart->Instance->BRR = usartdiv;
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	60d8      	str	r0, [r3, #12]
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	e052      	b.n	8005090 <UART_SetConfig+0x234>
    switch (clocksource)
 8004fea:	2001      	movs	r0, #1
 8004fec:	e050      	b.n	8005090 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fee:	f7ff f8bf 	bl	8004170 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004ff2:	2800      	cmp	r0, #0
 8004ff4:	d1dc      	bne.n	8004fb0 <UART_SetConfig+0x154>
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	e04a      	b.n	8005090 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetSysClockFreq();
 8004ffa:	f7fe fca3 	bl	8003944 <HAL_RCC_GetSysClockFreq>
        break;
 8004ffe:	e7f8      	b.n	8004ff2 <UART_SetConfig+0x196>
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005000:	4844      	ldr	r0, [pc, #272]	; (8005114 <UART_SetConfig+0x2b8>)
 8005002:	e7d5      	b.n	8004fb0 <UART_SetConfig+0x154>
    switch (clocksource)
 8005004:	2b08      	cmp	r3, #8
 8005006:	d85e      	bhi.n	80050c6 <UART_SetConfig+0x26a>
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4a43      	ldr	r2, [pc, #268]	; (8005118 <UART_SetConfig+0x2bc>)
 800500c:	58d3      	ldr	r3, [r2, r3]
 800500e:	469f      	mov	pc, r3
        pclk = HAL_RCC_GetPCLK1Freq();
 8005010:	f7ff f8ae 	bl	8004170 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005014:	2800      	cmp	r0, #0
 8005016:	d058      	beq.n	80050ca <UART_SetConfig+0x26e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005018:	0040      	lsls	r0, r0, #1
 800501a:	6863      	ldr	r3, [r4, #4]
 800501c:	085b      	lsrs	r3, r3, #1
 800501e:	18c0      	adds	r0, r0, r3
 8005020:	6861      	ldr	r1, [r4, #4]
 8005022:	f7fb f88d 	bl	8000140 <__udivsi3>
 8005026:	b283      	uxth	r3, r0
 8005028:	0400      	lsls	r0, r0, #16
 800502a:	0c00      	lsrs	r0, r0, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800502c:	0001      	movs	r1, r0
 800502e:	3910      	subs	r1, #16
 8005030:	4a3a      	ldr	r2, [pc, #232]	; (800511c <UART_SetConfig+0x2c0>)
 8005032:	4291      	cmp	r1, r2
 8005034:	d84b      	bhi.n	80050ce <UART_SetConfig+0x272>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005036:	220f      	movs	r2, #15
 8005038:	4393      	bics	r3, r2
 800503a:	001a      	movs	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800503c:	0840      	lsrs	r0, r0, #1
 800503e:	2307      	movs	r3, #7
 8005040:	4018      	ands	r0, r3
 8005042:	4310      	orrs	r0, r2
        huart->Instance->BRR = brrtemp;
 8005044:	6823      	ldr	r3, [r4, #0]
 8005046:	60d8      	str	r0, [r3, #12]
 8005048:	2000      	movs	r0, #0
 800504a:	e021      	b.n	8005090 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK2Freq();
 800504c:	f7ff f8a0 	bl	8004190 <HAL_RCC_GetPCLK2Freq>
        break;
 8005050:	e7e0      	b.n	8005014 <UART_SetConfig+0x1b8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005052:	4b2b      	ldr	r3, [pc, #172]	; (8005100 <UART_SetConfig+0x2a4>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	06db      	lsls	r3, r3, #27
 8005058:	d404      	bmi.n	8005064 <UART_SetConfig+0x208>
          pclk = (uint32_t) HSI_VALUE;
 800505a:	482b      	ldr	r0, [pc, #172]	; (8005108 <UART_SetConfig+0x2ac>)
 800505c:	e7dc      	b.n	8005018 <UART_SetConfig+0x1bc>
        pclk = HAL_RCC_GetSysClockFreq();
 800505e:	f7fe fc71 	bl	8003944 <HAL_RCC_GetSysClockFreq>
        break;
 8005062:	e7d7      	b.n	8005014 <UART_SetConfig+0x1b8>
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005064:	482b      	ldr	r0, [pc, #172]	; (8005114 <UART_SetConfig+0x2b8>)
 8005066:	e7d7      	b.n	8005018 <UART_SetConfig+0x1bc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005068:	f7ff f882 	bl	8004170 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800506c:	2800      	cmp	r0, #0
 800506e:	d032      	beq.n	80050d6 <UART_SetConfig+0x27a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005070:	6863      	ldr	r3, [r4, #4]
 8005072:	085b      	lsrs	r3, r3, #1
 8005074:	1818      	adds	r0, r3, r0
 8005076:	6861      	ldr	r1, [r4, #4]
 8005078:	f7fb f862 	bl	8000140 <__udivsi3>
 800507c:	0400      	lsls	r0, r0, #16
 800507e:	0c00      	lsrs	r0, r0, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005080:	0002      	movs	r2, r0
 8005082:	3a10      	subs	r2, #16
 8005084:	4b25      	ldr	r3, [pc, #148]	; (800511c <UART_SetConfig+0x2c0>)
 8005086:	429a      	cmp	r2, r3
 8005088:	d827      	bhi.n	80050da <UART_SetConfig+0x27e>
        huart->Instance->BRR = usartdiv;
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	60d8      	str	r0, [r3, #12]
 800508e:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8005090:	2300      	movs	r3, #0
 8005092:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8005094:	66a3      	str	r3, [r4, #104]	; 0x68
}
 8005096:	bdd0      	pop	{r4, r6, r7, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8005098:	f7ff f87a 	bl	8004190 <HAL_RCC_GetPCLK2Freq>
        break;
 800509c:	e7e6      	b.n	800506c <UART_SetConfig+0x210>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800509e:	4b18      	ldr	r3, [pc, #96]	; (8005100 <UART_SetConfig+0x2a4>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	06db      	lsls	r3, r3, #27
 80050a4:	d407      	bmi.n	80050b6 <UART_SetConfig+0x25a>
          pclk = (uint32_t) HSI_VALUE;
 80050a6:	4818      	ldr	r0, [pc, #96]	; (8005108 <UART_SetConfig+0x2ac>)
 80050a8:	e7e2      	b.n	8005070 <UART_SetConfig+0x214>
        pclk = HAL_RCC_GetSysClockFreq();
 80050aa:	f7fe fc4b 	bl	8003944 <HAL_RCC_GetSysClockFreq>
        break;
 80050ae:	e7dd      	b.n	800506c <UART_SetConfig+0x210>
    switch (clocksource)
 80050b0:	2080      	movs	r0, #128	; 0x80
 80050b2:	0200      	lsls	r0, r0, #8
 80050b4:	e7dc      	b.n	8005070 <UART_SetConfig+0x214>
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80050b6:	4817      	ldr	r0, [pc, #92]	; (8005114 <UART_SetConfig+0x2b8>)
 80050b8:	e7da      	b.n	8005070 <UART_SetConfig+0x214>
        ret = HAL_ERROR;
 80050ba:	2001      	movs	r0, #1
 80050bc:	e7e8      	b.n	8005090 <UART_SetConfig+0x234>
 80050be:	2001      	movs	r0, #1
 80050c0:	e7e6      	b.n	8005090 <UART_SetConfig+0x234>
          ret = HAL_ERROR;
 80050c2:	2001      	movs	r0, #1
 80050c4:	e7e4      	b.n	8005090 <UART_SetConfig+0x234>
    switch (clocksource)
 80050c6:	2001      	movs	r0, #1
 80050c8:	e7e2      	b.n	8005090 <UART_SetConfig+0x234>
 80050ca:	2000      	movs	r0, #0
 80050cc:	e7e0      	b.n	8005090 <UART_SetConfig+0x234>
        ret = HAL_ERROR;
 80050ce:	2001      	movs	r0, #1
 80050d0:	e7de      	b.n	8005090 <UART_SetConfig+0x234>
    switch (clocksource)
 80050d2:	2001      	movs	r0, #1
 80050d4:	e7dc      	b.n	8005090 <UART_SetConfig+0x234>
 80050d6:	2000      	movs	r0, #0
 80050d8:	e7da      	b.n	8005090 <UART_SetConfig+0x234>
        ret = HAL_ERROR;
 80050da:	2001      	movs	r0, #1
 80050dc:	e7d8      	b.n	8005090 <UART_SetConfig+0x234>
 80050de:	46c0      	nop			; (mov r8, r8)
 80050e0:	efff69f3 	.word	0xefff69f3
 80050e4:	ffffcfff 	.word	0xffffcfff
 80050e8:	40004800 	.word	0x40004800
 80050ec:	fffff4ff 	.word	0xfffff4ff
 80050f0:	40013800 	.word	0x40013800
 80050f4:	40004400 	.word	0x40004400
 80050f8:	40004c00 	.word	0x40004c00
 80050fc:	40005000 	.word	0x40005000
 8005100:	40021000 	.word	0x40021000
 8005104:	0800e084 	.word	0x0800e084
 8005108:	00f42400 	.word	0x00f42400
 800510c:	fffffd00 	.word	0xfffffd00
 8005110:	000ffcff 	.word	0x000ffcff
 8005114:	003d0900 	.word	0x003d0900
 8005118:	0800e0a8 	.word	0x0800e0a8
 800511c:	0000ffef 	.word	0x0000ffef

08005120 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005120:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005122:	07db      	lsls	r3, r3, #31
 8005124:	d506      	bpl.n	8005134 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005126:	6802      	ldr	r2, [r0, #0]
 8005128:	6853      	ldr	r3, [r2, #4]
 800512a:	492c      	ldr	r1, [pc, #176]	; (80051dc <UART_AdvFeatureConfig+0xbc>)
 800512c:	400b      	ands	r3, r1
 800512e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8005130:	430b      	orrs	r3, r1
 8005132:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005134:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005136:	079b      	lsls	r3, r3, #30
 8005138:	d506      	bpl.n	8005148 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800513a:	6802      	ldr	r2, [r0, #0]
 800513c:	6853      	ldr	r3, [r2, #4]
 800513e:	4928      	ldr	r1, [pc, #160]	; (80051e0 <UART_AdvFeatureConfig+0xc0>)
 8005140:	400b      	ands	r3, r1
 8005142:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005144:	430b      	orrs	r3, r1
 8005146:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005148:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800514a:	075b      	lsls	r3, r3, #29
 800514c:	d506      	bpl.n	800515c <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800514e:	6802      	ldr	r2, [r0, #0]
 8005150:	6853      	ldr	r3, [r2, #4]
 8005152:	4924      	ldr	r1, [pc, #144]	; (80051e4 <UART_AdvFeatureConfig+0xc4>)
 8005154:	400b      	ands	r3, r1
 8005156:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005158:	430b      	orrs	r3, r1
 800515a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800515c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800515e:	071b      	lsls	r3, r3, #28
 8005160:	d506      	bpl.n	8005170 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005162:	6802      	ldr	r2, [r0, #0]
 8005164:	6853      	ldr	r3, [r2, #4]
 8005166:	4920      	ldr	r1, [pc, #128]	; (80051e8 <UART_AdvFeatureConfig+0xc8>)
 8005168:	400b      	ands	r3, r1
 800516a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800516c:	430b      	orrs	r3, r1
 800516e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005170:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005172:	06db      	lsls	r3, r3, #27
 8005174:	d506      	bpl.n	8005184 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005176:	6802      	ldr	r2, [r0, #0]
 8005178:	6893      	ldr	r3, [r2, #8]
 800517a:	491c      	ldr	r1, [pc, #112]	; (80051ec <UART_AdvFeatureConfig+0xcc>)
 800517c:	400b      	ands	r3, r1
 800517e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005180:	430b      	orrs	r3, r1
 8005182:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005184:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005186:	069b      	lsls	r3, r3, #26
 8005188:	d506      	bpl.n	8005198 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800518a:	6802      	ldr	r2, [r0, #0]
 800518c:	6893      	ldr	r3, [r2, #8]
 800518e:	4918      	ldr	r1, [pc, #96]	; (80051f0 <UART_AdvFeatureConfig+0xd0>)
 8005190:	400b      	ands	r3, r1
 8005192:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005194:	430b      	orrs	r3, r1
 8005196:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005198:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800519a:	065b      	lsls	r3, r3, #25
 800519c:	d50b      	bpl.n	80051b6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800519e:	6802      	ldr	r2, [r0, #0]
 80051a0:	6853      	ldr	r3, [r2, #4]
 80051a2:	4914      	ldr	r1, [pc, #80]	; (80051f4 <UART_AdvFeatureConfig+0xd4>)
 80051a4:	400b      	ands	r3, r1
 80051a6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80051a8:	430b      	orrs	r3, r1
 80051aa:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051ac:	2380      	movs	r3, #128	; 0x80
 80051ae:	035b      	lsls	r3, r3, #13
 80051b0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d00a      	beq.n	80051cc <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80051b8:	061b      	lsls	r3, r3, #24
 80051ba:	d506      	bpl.n	80051ca <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051bc:	6802      	ldr	r2, [r0, #0]
 80051be:	6853      	ldr	r3, [r2, #4]
 80051c0:	490d      	ldr	r1, [pc, #52]	; (80051f8 <UART_AdvFeatureConfig+0xd8>)
 80051c2:	400b      	ands	r3, r1
 80051c4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80051c6:	430b      	orrs	r3, r1
 80051c8:	6053      	str	r3, [r2, #4]
}
 80051ca:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051cc:	6802      	ldr	r2, [r0, #0]
 80051ce:	6853      	ldr	r3, [r2, #4]
 80051d0:	490a      	ldr	r1, [pc, #40]	; (80051fc <UART_AdvFeatureConfig+0xdc>)
 80051d2:	400b      	ands	r3, r1
 80051d4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80051d6:	430b      	orrs	r3, r1
 80051d8:	6053      	str	r3, [r2, #4]
 80051da:	e7ec      	b.n	80051b6 <UART_AdvFeatureConfig+0x96>
 80051dc:	fffdffff 	.word	0xfffdffff
 80051e0:	fffeffff 	.word	0xfffeffff
 80051e4:	fffbffff 	.word	0xfffbffff
 80051e8:	ffff7fff 	.word	0xffff7fff
 80051ec:	ffffefff 	.word	0xffffefff
 80051f0:	ffffdfff 	.word	0xffffdfff
 80051f4:	ffefffff 	.word	0xffefffff
 80051f8:	fff7ffff 	.word	0xfff7ffff
 80051fc:	ff9fffff 	.word	0xff9fffff

08005200 <UART_WaitOnFlagUntilTimeout>:
{
 8005200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005202:	46ce      	mov	lr, r9
 8005204:	4647      	mov	r7, r8
 8005206:	b580      	push	{r7, lr}
 8005208:	0006      	movs	r6, r0
 800520a:	000d      	movs	r5, r1
 800520c:	0017      	movs	r7, r2
 800520e:	4699      	mov	r9, r3
 8005210:	9b08      	ldr	r3, [sp, #32]
 8005212:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005214:	6833      	ldr	r3, [r6, #0]
 8005216:	69dc      	ldr	r4, [r3, #28]
 8005218:	402c      	ands	r4, r5
 800521a:	1b64      	subs	r4, r4, r5
 800521c:	4263      	negs	r3, r4
 800521e:	415c      	adcs	r4, r3
 8005220:	42bc      	cmp	r4, r7
 8005222:	d153      	bne.n	80052cc <UART_WaitOnFlagUntilTimeout+0xcc>
    if (Timeout != HAL_MAX_DELAY)
 8005224:	4643      	mov	r3, r8
 8005226:	3301      	adds	r3, #1
 8005228:	d0f4      	beq.n	8005214 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800522a:	f7fd fbfd 	bl	8002a28 <HAL_GetTick>
 800522e:	464b      	mov	r3, r9
 8005230:	1ac0      	subs	r0, r0, r3
 8005232:	4540      	cmp	r0, r8
 8005234:	d82c      	bhi.n	8005290 <UART_WaitOnFlagUntilTimeout+0x90>
 8005236:	4643      	mov	r3, r8
 8005238:	2b00      	cmp	r3, #0
 800523a:	d029      	beq.n	8005290 <UART_WaitOnFlagUntilTimeout+0x90>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800523c:	6833      	ldr	r3, [r6, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	0752      	lsls	r2, r2, #29
 8005242:	d5e7      	bpl.n	8005214 <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005244:	69da      	ldr	r2, [r3, #28]
 8005246:	0512      	lsls	r2, r2, #20
 8005248:	d5e4      	bpl.n	8005214 <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800524a:	2280      	movs	r2, #128	; 0x80
 800524c:	0112      	lsls	r2, r2, #4
 800524e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005250:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005254:	2201      	movs	r2, #1
 8005256:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800525a:	6831      	ldr	r1, [r6, #0]
 800525c:	680b      	ldr	r3, [r1, #0]
 800525e:	4c1e      	ldr	r4, [pc, #120]	; (80052d8 <UART_WaitOnFlagUntilTimeout+0xd8>)
 8005260:	4023      	ands	r3, r4
 8005262:	600b      	str	r3, [r1, #0]
 8005264:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005268:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800526c:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005270:	6831      	ldr	r1, [r6, #0]
 8005272:	688b      	ldr	r3, [r1, #8]
 8005274:	4393      	bics	r3, r2
 8005276:	608b      	str	r3, [r1, #8]
 8005278:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 800527c:	2320      	movs	r3, #32
 800527e:	67b3      	str	r3, [r6, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005280:	67f3      	str	r3, [r6, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005282:	327f      	adds	r2, #127	; 0x7f
 8005284:	50b3      	str	r3, [r6, r2]
          __HAL_UNLOCK(huart);
 8005286:	3354      	adds	r3, #84	; 0x54
 8005288:	2200      	movs	r2, #0
 800528a:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 800528c:	2003      	movs	r0, #3
 800528e:	e01e      	b.n	80052ce <UART_WaitOnFlagUntilTimeout+0xce>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005290:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005294:	2201      	movs	r2, #1
 8005296:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800529a:	6831      	ldr	r1, [r6, #0]
 800529c:	680b      	ldr	r3, [r1, #0]
 800529e:	4c0e      	ldr	r4, [pc, #56]	; (80052d8 <UART_WaitOnFlagUntilTimeout+0xd8>)
 80052a0:	4023      	ands	r3, r4
 80052a2:	600b      	str	r3, [r1, #0]
 80052a4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052a8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ac:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b0:	6831      	ldr	r1, [r6, #0]
 80052b2:	688b      	ldr	r3, [r1, #8]
 80052b4:	4393      	bics	r3, r2
 80052b6:	608b      	str	r3, [r1, #8]
 80052b8:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 80052bc:	2320      	movs	r3, #32
 80052be:	67b3      	str	r3, [r6, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80052c0:	67f3      	str	r3, [r6, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 80052c2:	3354      	adds	r3, #84	; 0x54
 80052c4:	2200      	movs	r2, #0
 80052c6:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 80052c8:	2003      	movs	r0, #3
 80052ca:	e000      	b.n	80052ce <UART_WaitOnFlagUntilTimeout+0xce>
  return HAL_OK;
 80052cc:	2000      	movs	r0, #0
}
 80052ce:	bcc0      	pop	{r6, r7}
 80052d0:	46b9      	mov	r9, r7
 80052d2:	46b0      	mov	r8, r6
 80052d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052d6:	46c0      	nop			; (mov r8, r8)
 80052d8:	fffffe5f 	.word	0xfffffe5f

080052dc <UART_CheckIdleState>:
{
 80052dc:	b530      	push	{r4, r5, lr}
 80052de:	b083      	sub	sp, #12
 80052e0:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e2:	2380      	movs	r3, #128	; 0x80
 80052e4:	2200      	movs	r2, #0
 80052e6:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80052e8:	f7fd fb9e 	bl	8002a28 <HAL_GetTick>
 80052ec:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052ee:	6822      	ldr	r2, [r4, #0]
 80052f0:	6812      	ldr	r2, [r2, #0]
 80052f2:	0713      	lsls	r3, r2, #28
 80052f4:	d40d      	bmi.n	8005312 <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052f6:	6823      	ldr	r3, [r4, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	075b      	lsls	r3, r3, #29
 80052fc:	d416      	bmi.n	800532c <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 80052fe:	2320      	movs	r3, #32
 8005300:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005302:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005304:	2300      	movs	r3, #0
 8005306:	6623      	str	r3, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8005308:	2274      	movs	r2, #116	; 0x74
 800530a:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 800530c:	2000      	movs	r0, #0
}
 800530e:	b003      	add	sp, #12
 8005310:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005312:	2180      	movs	r1, #128	; 0x80
 8005314:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <UART_CheckIdleState+0x6c>)
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	0003      	movs	r3, r0
 800531a:	2200      	movs	r2, #0
 800531c:	0389      	lsls	r1, r1, #14
 800531e:	0020      	movs	r0, r4
 8005320:	f7ff ff6e 	bl	8005200 <UART_WaitOnFlagUntilTimeout>
 8005324:	2800      	cmp	r0, #0
 8005326:	d0e6      	beq.n	80052f6 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8005328:	2003      	movs	r0, #3
 800532a:	e7f0      	b.n	800530e <UART_CheckIdleState+0x32>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800532c:	2180      	movs	r1, #128	; 0x80
 800532e:	4b06      	ldr	r3, [pc, #24]	; (8005348 <UART_CheckIdleState+0x6c>)
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	002b      	movs	r3, r5
 8005334:	2200      	movs	r2, #0
 8005336:	03c9      	lsls	r1, r1, #15
 8005338:	0020      	movs	r0, r4
 800533a:	f7ff ff61 	bl	8005200 <UART_WaitOnFlagUntilTimeout>
 800533e:	2800      	cmp	r0, #0
 8005340:	d0dd      	beq.n	80052fe <UART_CheckIdleState+0x22>
      return HAL_TIMEOUT;
 8005342:	2003      	movs	r0, #3
 8005344:	e7e3      	b.n	800530e <UART_CheckIdleState+0x32>
 8005346:	46c0      	nop			; (mov r8, r8)
 8005348:	01ffffff 	.word	0x01ffffff

0800534c <HAL_UART_Init>:
{
 800534c:	b510      	push	{r4, lr}
 800534e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8005350:	d02e      	beq.n	80053b0 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005352:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005354:	2b00      	cmp	r3, #0
 8005356:	d021      	beq.n	800539c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8005358:	2324      	movs	r3, #36	; 0x24
 800535a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 800535c:	6822      	ldr	r2, [r4, #0]
 800535e:	6813      	ldr	r3, [r2, #0]
 8005360:	2101      	movs	r1, #1
 8005362:	438b      	bics	r3, r1
 8005364:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005366:	0020      	movs	r0, r4
 8005368:	f7ff fd78 	bl	8004e5c <UART_SetConfig>
 800536c:	2801      	cmp	r0, #1
 800536e:	d014      	beq.n	800539a <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005370:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005372:	2b00      	cmp	r3, #0
 8005374:	d118      	bne.n	80053a8 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005376:	6822      	ldr	r2, [r4, #0]
 8005378:	6853      	ldr	r3, [r2, #4]
 800537a:	490e      	ldr	r1, [pc, #56]	; (80053b4 <HAL_UART_Init+0x68>)
 800537c:	400b      	ands	r3, r1
 800537e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005380:	6822      	ldr	r2, [r4, #0]
 8005382:	6893      	ldr	r3, [r2, #8]
 8005384:	212a      	movs	r1, #42	; 0x2a
 8005386:	438b      	bics	r3, r1
 8005388:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800538a:	6822      	ldr	r2, [r4, #0]
 800538c:	6813      	ldr	r3, [r2, #0]
 800538e:	3929      	subs	r1, #41	; 0x29
 8005390:	430b      	orrs	r3, r1
 8005392:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005394:	0020      	movs	r0, r4
 8005396:	f7ff ffa1 	bl	80052dc <UART_CheckIdleState>
}
 800539a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800539c:	3374      	adds	r3, #116	; 0x74
 800539e:	2200      	movs	r2, #0
 80053a0:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80053a2:	f003 fcad 	bl	8008d00 <HAL_UART_MspInit>
 80053a6:	e7d7      	b.n	8005358 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80053a8:	0020      	movs	r0, r4
 80053aa:	f7ff feb9 	bl	8005120 <UART_AdvFeatureConfig>
 80053ae:	e7e2      	b.n	8005376 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80053b0:	2001      	movs	r0, #1
 80053b2:	e7f2      	b.n	800539a <HAL_UART_Init+0x4e>
 80053b4:	ffffb7ff 	.word	0xffffb7ff

080053b8 <UART_Start_Receive_DMA>:
{
 80053b8:	b570      	push	{r4, r5, r6, lr}
 80053ba:	0004      	movs	r4, r0
 80053bc:	0013      	movs	r3, r2
  huart->pRxBuffPtr = pData;
 80053be:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize = Size;
 80053c0:	2258      	movs	r2, #88	; 0x58
 80053c2:	5283      	strh	r3, [r0, r2]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c4:	3228      	adds	r2, #40	; 0x28
 80053c6:	2100      	movs	r1, #0
 80053c8:	5081      	str	r1, [r0, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053ca:	3a5e      	subs	r2, #94	; 0x5e
 80053cc:	67c2      	str	r2, [r0, #124]	; 0x7c
  if (huart->hdmarx != NULL)
 80053ce:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80053d0:	2a00      	cmp	r2, #0
 80053d2:	d012      	beq.n	80053fa <UART_Start_Receive_DMA+0x42>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80053d4:	4921      	ldr	r1, [pc, #132]	; (800545c <UART_Start_Receive_DMA+0xa4>)
 80053d6:	62d1      	str	r1, [r2, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80053d8:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80053da:	4921      	ldr	r1, [pc, #132]	; (8005460 <UART_Start_Receive_DMA+0xa8>)
 80053dc:	6311      	str	r1, [r2, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80053de:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80053e0:	4920      	ldr	r1, [pc, #128]	; (8005464 <UART_Start_Receive_DMA+0xac>)
 80053e2:	6351      	str	r1, [r2, #52]	; 0x34
    huart->hdmarx->XferAbortCallback = NULL;
 80053e4:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80053e6:	2100      	movs	r1, #0
 80053e8:	6391      	str	r1, [r2, #56]	; 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80053ea:	6801      	ldr	r1, [r0, #0]
 80053ec:	3124      	adds	r1, #36	; 0x24
 80053ee:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80053f0:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80053f2:	f7fd ff71 	bl	80032d8 <HAL_DMA_Start_IT>
 80053f6:	2800      	cmp	r0, #0
 80053f8:	d126      	bne.n	8005448 <UART_Start_Receive_DMA+0x90>
  __HAL_UNLOCK(huart);
 80053fa:	2374      	movs	r3, #116	; 0x74
 80053fc:	2200      	movs	r2, #0
 80053fe:	54e2      	strb	r2, [r4, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005400:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005404:	3b73      	subs	r3, #115	; 0x73
 8005406:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800540a:	6821      	ldr	r1, [r4, #0]
 800540c:	680d      	ldr	r5, [r1, #0]
 800540e:	3201      	adds	r2, #1
 8005410:	32ff      	adds	r2, #255	; 0xff
 8005412:	432a      	orrs	r2, r5
 8005414:	600a      	str	r2, [r1, #0]
 8005416:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800541a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800541e:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005422:	6821      	ldr	r1, [r4, #0]
 8005424:	688a      	ldr	r2, [r1, #8]
 8005426:	431a      	orrs	r2, r3
 8005428:	608a      	str	r2, [r1, #8]
 800542a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800542e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005432:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005436:	6822      	ldr	r2, [r4, #0]
 8005438:	6893      	ldr	r3, [r2, #8]
 800543a:	2040      	movs	r0, #64	; 0x40
 800543c:	4303      	orrs	r3, r0
 800543e:	6093      	str	r3, [r2, #8]
 8005440:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 8005444:	2000      	movs	r0, #0
}
 8005446:	bd70      	pop	{r4, r5, r6, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005448:	2380      	movs	r3, #128	; 0x80
 800544a:	2210      	movs	r2, #16
 800544c:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 800544e:	3b0c      	subs	r3, #12
 8005450:	2200      	movs	r2, #0
 8005452:	54e2      	strb	r2, [r4, r3]
      huart->RxState = HAL_UART_STATE_READY;
 8005454:	3b54      	subs	r3, #84	; 0x54
 8005456:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_ERROR;
 8005458:	2001      	movs	r0, #1
 800545a:	e7f4      	b.n	8005446 <UART_Start_Receive_DMA+0x8e>
 800545c:	08004dc9 	.word	0x08004dc9
 8005460:	08004dad 	.word	0x08004dad
 8005464:	08004a79 	.word	0x08004a79

08005468 <HAL_UART_Receive_DMA>:
{
 8005468:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800546a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800546c:	2b20      	cmp	r3, #32
 800546e:	d12f      	bne.n	80054d0 <HAL_UART_Receive_DMA+0x68>
    if ((pData == NULL) || (Size == 0U))
 8005470:	2900      	cmp	r1, #0
 8005472:	d02f      	beq.n	80054d4 <HAL_UART_Receive_DMA+0x6c>
 8005474:	2a00      	cmp	r2, #0
 8005476:	d02f      	beq.n	80054d8 <HAL_UART_Receive_DMA+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005478:	2380      	movs	r3, #128	; 0x80
 800547a:	015b      	lsls	r3, r3, #5
 800547c:	6884      	ldr	r4, [r0, #8]
 800547e:	429c      	cmp	r4, r3
 8005480:	d01f      	beq.n	80054c2 <HAL_UART_Receive_DMA+0x5a>
    __HAL_LOCK(huart);
 8005482:	2374      	movs	r3, #116	; 0x74
 8005484:	5cc3      	ldrb	r3, [r0, r3]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d028      	beq.n	80054dc <HAL_UART_Receive_DMA+0x74>
 800548a:	2374      	movs	r3, #116	; 0x74
 800548c:	2401      	movs	r4, #1
 800548e:	54c4      	strb	r4, [r0, r3]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005490:	2300      	movs	r3, #0
 8005492:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005494:	6803      	ldr	r3, [r0, #0]
 8005496:	4c12      	ldr	r4, [pc, #72]	; (80054e0 <HAL_UART_Receive_DMA+0x78>)
 8005498:	42a3      	cmp	r3, r4
 800549a:	d00f      	beq.n	80054bc <HAL_UART_Receive_DMA+0x54>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	021b      	lsls	r3, r3, #8
 80054a0:	d50c      	bpl.n	80054bc <HAL_UART_Receive_DMA+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054a2:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a6:	2301      	movs	r3, #1
 80054a8:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054ac:	6804      	ldr	r4, [r0, #0]
 80054ae:	6825      	ldr	r5, [r4, #0]
 80054b0:	2380      	movs	r3, #128	; 0x80
 80054b2:	04db      	lsls	r3, r3, #19
 80054b4:	432b      	orrs	r3, r5
 80054b6:	6023      	str	r3, [r4, #0]
 80054b8:	f38c 8810 	msr	PRIMASK, ip
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80054bc:	f7ff ff7c 	bl	80053b8 <UART_Start_Receive_DMA>
 80054c0:	e007      	b.n	80054d2 <HAL_UART_Receive_DMA+0x6a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054c2:	6903      	ldr	r3, [r0, #16]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1dc      	bne.n	8005482 <HAL_UART_Receive_DMA+0x1a>
      if ((((uint32_t)pData) & 1U) != 0U)
 80054c8:	07cb      	lsls	r3, r1, #31
 80054ca:	d5da      	bpl.n	8005482 <HAL_UART_Receive_DMA+0x1a>
        return  HAL_ERROR;
 80054cc:	2001      	movs	r0, #1
 80054ce:	e000      	b.n	80054d2 <HAL_UART_Receive_DMA+0x6a>
    return HAL_BUSY;
 80054d0:	2002      	movs	r0, #2
}
 80054d2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80054d4:	2001      	movs	r0, #1
 80054d6:	e7fc      	b.n	80054d2 <HAL_UART_Receive_DMA+0x6a>
 80054d8:	2001      	movs	r0, #1
 80054da:	e7fa      	b.n	80054d2 <HAL_UART_Receive_DMA+0x6a>
    __HAL_LOCK(huart);
 80054dc:	2002      	movs	r0, #2
 80054de:	e7f8      	b.n	80054d2 <HAL_UART_Receive_DMA+0x6a>
 80054e0:	40004800 	.word	0x40004800

080054e4 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80054e4:	4770      	bx	lr

080054e6 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 80054e6:	2884      	cmp	r0, #132	; 0x84
 80054e8:	d001      	beq.n	80054ee <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 80054ea:	3003      	adds	r0, #3
  }
  
  return fpriority;
}
 80054ec:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80054ee:	2000      	movs	r0, #0
  return fpriority;
 80054f0:	e7fc      	b.n	80054ec <makeFreeRtosPriority+0x6>

080054f2 <inHandlerMode>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054f2:	f3ef 8005 	mrs	r0, IPSR


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
 80054f6:	1e43      	subs	r3, r0, #1
 80054f8:	4198      	sbcs	r0, r3
}
 80054fa:	4770      	bx	lr

080054fc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80054fc:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 80054fe:	f000 fe31 	bl	8006164 <vTaskStartScheduler>
  
  return osOK;
}
 8005502:	2000      	movs	r0, #0
 8005504:	bd10      	pop	{r4, pc}

08005506 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005506:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005508:	46ce      	mov	lr, r9
 800550a:	4647      	mov	r7, r8
 800550c:	b580      	push	{r7, lr}
 800550e:	b087      	sub	sp, #28
 8005510:	0004      	movs	r4, r0
 8005512:	000f      	movs	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005514:	6945      	ldr	r5, [r0, #20]
 8005516:	2d00      	cmp	r5, #0
 8005518:	d01a      	beq.n	8005550 <osThreadCreate+0x4a>
 800551a:	6986      	ldr	r6, [r0, #24]
 800551c:	2e00      	cmp	r6, #0
 800551e:	d017      	beq.n	8005550 <osThreadCreate+0x4a>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005520:	6843      	ldr	r3, [r0, #4]
 8005522:	4698      	mov	r8, r3
 8005524:	6803      	ldr	r3, [r0, #0]
 8005526:	4699      	mov	r9, r3
 8005528:	2308      	movs	r3, #8
 800552a:	5ec0      	ldrsh	r0, [r0, r3]
 800552c:	f7ff ffdb 	bl	80054e6 <makeFreeRtosPriority>
 8005530:	6922      	ldr	r2, [r4, #16]
 8005532:	9602      	str	r6, [sp, #8]
 8005534:	9501      	str	r5, [sp, #4]
 8005536:	9000      	str	r0, [sp, #0]
 8005538:	003b      	movs	r3, r7
 800553a:	4649      	mov	r1, r9
 800553c:	4640      	mov	r0, r8
 800553e:	f000 fdb5 	bl	80060ac <xTaskCreateStatic>
 8005542:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005544:	9805      	ldr	r0, [sp, #20]
}
 8005546:	b007      	add	sp, #28
 8005548:	bcc0      	pop	{r6, r7}
 800554a:	46b9      	mov	r9, r7
 800554c:	46b0      	mov	r8, r6
 800554e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005550:	6866      	ldr	r6, [r4, #4]
 8005552:	6823      	ldr	r3, [r4, #0]
 8005554:	4698      	mov	r8, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005556:	6925      	ldr	r5, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005558:	2308      	movs	r3, #8
 800555a:	5ee0      	ldrsh	r0, [r4, r3]
 800555c:	f7ff ffc3 	bl	80054e6 <makeFreeRtosPriority>
 8005560:	b2aa      	uxth	r2, r5
 8005562:	ab05      	add	r3, sp, #20
 8005564:	9301      	str	r3, [sp, #4]
 8005566:	9000      	str	r0, [sp, #0]
 8005568:	003b      	movs	r3, r7
 800556a:	4641      	mov	r1, r8
 800556c:	0030      	movs	r0, r6
 800556e:	f000 fdc7 	bl	8006100 <xTaskCreate>
 8005572:	2801      	cmp	r0, #1
 8005574:	d0e6      	beq.n	8005544 <osThreadCreate+0x3e>
      return NULL;
 8005576:	2000      	movs	r0, #0
 8005578:	e7e5      	b.n	8005546 <osThreadCreate+0x40>

0800557a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800557a:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800557c:	2800      	cmp	r0, #0
 800557e:	d100      	bne.n	8005582 <osDelay+0x8>
 8005580:	3001      	adds	r0, #1
 8005582:	f000 ff29 	bl	80063d8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005586:	2000      	movs	r0, #0
 8005588:	bd10      	pop	{r4, pc}
	...

0800558c <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800558c:	b530      	push	{r4, r5, lr}
 800558e:	b085      	sub	sp, #20
 8005590:	0004      	movs	r4, r0
 8005592:	000d      	movs	r5, r1
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8005594:	2300      	movs	r3, #0
 8005596:	9303      	str	r3, [sp, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8005598:	9302      	str	r3, [sp, #8]
  
  if (inHandlerMode())
 800559a:	f7ff ffaa 	bl	80054f2 <inHandlerMode>
 800559e:	2800      	cmp	r0, #0
 80055a0:	d011      	beq.n	80055c6 <osSignalSet+0x3a>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80055a2:	ab03      	add	r3, sp, #12
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	ab02      	add	r3, sp, #8
 80055a8:	2201      	movs	r2, #1
 80055aa:	0029      	movs	r1, r5
 80055ac:	0020      	movs	r0, r4
 80055ae:	f001 f8ff 	bl	80067b0 <xTaskGenericNotifyFromISR>
 80055b2:	2801      	cmp	r0, #1
 80055b4:	d112      	bne.n	80055dc <osSignalSet+0x50>
      return 0x80000000;
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80055b6:	9b03      	ldr	r3, [sp, #12]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00c      	beq.n	80055d6 <osSignalSet+0x4a>
 80055bc:	4b0a      	ldr	r3, [pc, #40]	; (80055e8 <osSignalSet+0x5c>)
 80055be:	2280      	movs	r2, #128	; 0x80
 80055c0:	0552      	lsls	r2, r2, #21
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	e007      	b.n	80055d6 <osSignalSet+0x4a>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80055c6:	ab02      	add	r3, sp, #8
 80055c8:	2201      	movs	r2, #1
 80055ca:	0029      	movs	r1, r5
 80055cc:	0020      	movs	r0, r4
 80055ce:	f001 f889 	bl	80066e4 <xTaskGenericNotify>
 80055d2:	2801      	cmp	r0, #1
 80055d4:	d105      	bne.n	80055e2 <osSignalSet+0x56>
    return 0x80000000;
  
  return ulPreviousNotificationValue;
 80055d6:	9802      	ldr	r0, [sp, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80055d8:	b005      	add	sp, #20
 80055da:	bd30      	pop	{r4, r5, pc}
      return 0x80000000;
 80055dc:	2080      	movs	r0, #128	; 0x80
 80055de:	0600      	lsls	r0, r0, #24
 80055e0:	e7fa      	b.n	80055d8 <osSignalSet+0x4c>
    return 0x80000000;
 80055e2:	2080      	movs	r0, #128	; 0x80
 80055e4:	0600      	lsls	r0, r0, #24
 80055e6:	e7f7      	b.n	80055d8 <osSignalSet+0x4c>
 80055e8:	e000ed04 	.word	0xe000ed04

080055ec <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80055ec:	b570      	push	{r4, r5, r6, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	0004      	movs	r4, r0
 80055f2:	000e      	movs	r6, r1
 80055f4:	0015      	movs	r5, r2

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80055f6:	2300      	movs	r3, #0
 80055f8:	9302      	str	r3, [sp, #8]
    if (ticks == 0) {
      ticks = 1;
    }
  }  
  
  if (inHandlerMode())
 80055fa:	f7ff ff7a 	bl	80054f2 <inHandlerMode>
 80055fe:	2800      	cmp	r0, #0
 8005600:	d008      	beq.n	8005614 <osSignalWait+0x28>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8005602:	2382      	movs	r3, #130	; 0x82
 8005604:	9301      	str	r3, [sp, #4]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8005606:	ab01      	add	r3, sp, #4
 8005608:	0022      	movs	r2, r4
 800560a:	cb23      	ldmia	r3!, {r0, r1, r5}
 800560c:	c223      	stmia	r2!, {r0, r1, r5}
}
 800560e:	0020      	movs	r0, r4
 8005610:	b004      	add	sp, #16
 8005612:	bd70      	pop	{r4, r5, r6, pc}
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8005614:	002b      	movs	r3, r5
 8005616:	aa02      	add	r2, sp, #8
 8005618:	0031      	movs	r1, r6
 800561a:	2000      	movs	r0, #0
 800561c:	f001 f820 	bl	8006660 <xTaskNotifyWait>
 8005620:	2801      	cmp	r0, #1
 8005622:	d007      	beq.n	8005634 <osSignalWait+0x48>
      if(ticks == 0)  ret.status = osOK;
 8005624:	2d00      	cmp	r5, #0
 8005626:	d102      	bne.n	800562e <osSignalWait+0x42>
 8005628:	2300      	movs	r3, #0
 800562a:	9301      	str	r3, [sp, #4]
 800562c:	e7eb      	b.n	8005606 <osSignalWait+0x1a>
      else  ret.status = osEventTimeout;
 800562e:	2340      	movs	r3, #64	; 0x40
 8005630:	9301      	str	r3, [sp, #4]
 8005632:	e7e8      	b.n	8005606 <osSignalWait+0x1a>
    else if(ret.value.signals < 0)
 8005634:	9b02      	ldr	r3, [sp, #8]
 8005636:	2b00      	cmp	r3, #0
 8005638:	db02      	blt.n	8005640 <osSignalWait+0x54>
    else  ret.status =  osEventSignal;
 800563a:	2308      	movs	r3, #8
 800563c:	9301      	str	r3, [sp, #4]
 800563e:	e7e2      	b.n	8005606 <osSignalWait+0x1a>
      ret.status =  osErrorValue;     
 8005640:	2386      	movs	r3, #134	; 0x86
 8005642:	9301      	str	r3, [sp, #4]
 8005644:	e7df      	b.n	8005606 <osSignalWait+0x1a>

08005646 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005646:	b510      	push	{r4, lr}
 8005648:	b082      	sub	sp, #8
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800564a:	6882      	ldr	r2, [r0, #8]
 800564c:	2a00      	cmp	r2, #0
 800564e:	d009      	beq.n	8005664 <osMessageCreate+0x1e>
 8005650:	68c3      	ldr	r3, [r0, #12]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d006      	beq.n	8005664 <osMessageCreate+0x1e>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005656:	6841      	ldr	r1, [r0, #4]
 8005658:	6800      	ldr	r0, [r0, #0]
 800565a:	2400      	movs	r4, #0
 800565c:	9400      	str	r4, [sp, #0]
 800565e:	f000 f9ae 	bl	80059be <xQueueGenericCreateStatic>
 8005662:	e004      	b.n	800566e <osMessageCreate+0x28>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005664:	6841      	ldr	r1, [r0, #4]
 8005666:	6800      	ldr	r0, [r0, #0]
 8005668:	2200      	movs	r2, #0
 800566a:	f000 f9d2 	bl	8005a12 <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800566e:	b002      	add	sp, #8
 8005670:	bd10      	pop	{r4, pc}
	...

08005674 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005674:	b530      	push	{r4, r5, lr}
 8005676:	b085      	sub	sp, #20
 8005678:	0005      	movs	r5, r0
 800567a:	9101      	str	r1, [sp, #4]
 800567c:	0014      	movs	r4, r2
  portBASE_TYPE taskWoken = pdFALSE;
 800567e:	2300      	movs	r3, #0
 8005680:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 8005682:	2a00      	cmp	r2, #0
 8005684:	d100      	bne.n	8005688 <osMessagePut+0x14>
    ticks = 1;
 8005686:	3401      	adds	r4, #1
  }
  
  if (inHandlerMode()) {
 8005688:	f7ff ff33 	bl	80054f2 <inHandlerMode>
 800568c:	2800      	cmp	r0, #0
 800568e:	d010      	beq.n	80056b2 <osMessagePut+0x3e>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005690:	2300      	movs	r3, #0
 8005692:	aa03      	add	r2, sp, #12
 8005694:	a901      	add	r1, sp, #4
 8005696:	0028      	movs	r0, r5
 8005698:	f000 fa71 	bl	8005b7e <xQueueGenericSendFromISR>
 800569c:	2801      	cmp	r0, #1
 800569e:	d113      	bne.n	80056c8 <osMessagePut+0x54>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80056a0:	9b03      	ldr	r3, [sp, #12]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d012      	beq.n	80056cc <osMessagePut+0x58>
 80056a6:	4b0b      	ldr	r3, [pc, #44]	; (80056d4 <osMessagePut+0x60>)
 80056a8:	2280      	movs	r2, #128	; 0x80
 80056aa:	0552      	lsls	r2, r2, #21
 80056ac:	601a      	str	r2, [r3, #0]
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 80056ae:	2000      	movs	r0, #0
 80056b0:	e008      	b.n	80056c4 <osMessagePut+0x50>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80056b2:	2300      	movs	r3, #0
 80056b4:	0022      	movs	r2, r4
 80056b6:	a901      	add	r1, sp, #4
 80056b8:	0028      	movs	r0, r5
 80056ba:	f000 f9cc 	bl	8005a56 <xQueueGenericSend>
 80056be:	2801      	cmp	r0, #1
 80056c0:	d106      	bne.n	80056d0 <osMessagePut+0x5c>
  return osOK;
 80056c2:	2000      	movs	r0, #0
}
 80056c4:	b005      	add	sp, #20
 80056c6:	bd30      	pop	{r4, r5, pc}
      return osErrorOS;
 80056c8:	20ff      	movs	r0, #255	; 0xff
 80056ca:	e7fb      	b.n	80056c4 <osMessagePut+0x50>
  return osOK;
 80056cc:	2000      	movs	r0, #0
 80056ce:	e7f9      	b.n	80056c4 <osMessagePut+0x50>
      return osErrorOS;
 80056d0:	20ff      	movs	r0, #255	; 0xff
 80056d2:	e7f7      	b.n	80056c4 <osMessagePut+0x50>
 80056d4:	e000ed04 	.word	0xe000ed04

080056d8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80056d8:	b570      	push	{r4, r5, r6, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	0004      	movs	r4, r0
 80056de:	000d      	movs	r5, r1
 80056e0:	0016      	movs	r6, r2
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80056e2:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 80056e4:	2300      	movs	r3, #0
 80056e6:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 80056e8:	2900      	cmp	r1, #0
 80056ea:	d016      	beq.n	800571a <osMessageGet+0x42>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 80056ec:	2300      	movs	r3, #0
 80056ee:	9303      	str	r3, [sp, #12]
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80056f0:	f7ff feff 	bl	80054f2 <inHandlerMode>
 80056f4:	2800      	cmp	r0, #0
 80056f6:	d01a      	beq.n	800572e <osMessageGet+0x56>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80056f8:	aa03      	add	r2, sp, #12
 80056fa:	a901      	add	r1, sp, #4
 80056fc:	0028      	movs	r0, r5
 80056fe:	f000 fb1e 	bl	8005d3e <xQueueReceiveFromISR>
 8005702:	2801      	cmp	r0, #1
 8005704:	d010      	beq.n	8005728 <osMessageGet+0x50>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8005706:	2300      	movs	r3, #0
 8005708:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800570a:	9b03      	ldr	r3, [sp, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d019      	beq.n	8005744 <osMessageGet+0x6c>
 8005710:	4b11      	ldr	r3, [pc, #68]	; (8005758 <osMessageGet+0x80>)
 8005712:	2280      	movs	r2, #128	; 0x80
 8005714:	0552      	lsls	r2, r2, #21
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	e014      	b.n	8005744 <osMessageGet+0x6c>
    event.status = osErrorParameter;
 800571a:	466b      	mov	r3, sp
 800571c:	2280      	movs	r2, #128	; 0x80
 800571e:	9200      	str	r2, [sp, #0]
    return event;
 8005720:	0002      	movs	r2, r0
 8005722:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005724:	c223      	stmia	r2!, {r0, r1, r5}
 8005726:	e011      	b.n	800574c <osMessageGet+0x74>
      event.status = osEventMessage;
 8005728:	2310      	movs	r3, #16
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	e7ed      	b.n	800570a <osMessageGet+0x32>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800572e:	0032      	movs	r2, r6
 8005730:	a901      	add	r1, sp, #4
 8005732:	0028      	movs	r0, r5
 8005734:	f000 fa78 	bl	8005c28 <xQueueReceive>
 8005738:	2801      	cmp	r0, #1
 800573a:	d00a      	beq.n	8005752 <osMessageGet+0x7a>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800573c:	2e00      	cmp	r6, #0
 800573e:	d000      	beq.n	8005742 <osMessageGet+0x6a>
 8005740:	2640      	movs	r6, #64	; 0x40
 8005742:	9600      	str	r6, [sp, #0]
    }
  }
  
  return event;
 8005744:	466b      	mov	r3, sp
 8005746:	0022      	movs	r2, r4
 8005748:	cb23      	ldmia	r3!, {r0, r1, r5}
 800574a:	c223      	stmia	r2!, {r0, r1, r5}
}
 800574c:	0020      	movs	r0, r4
 800574e:	b004      	add	sp, #16
 8005750:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 8005752:	2310      	movs	r3, #16
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	e7f5      	b.n	8005744 <osMessageGet+0x6c>
 8005758:	e000ed04 	.word	0xe000ed04

0800575c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800575c:	0003      	movs	r3, r0
 800575e:	3308      	adds	r3, #8
 8005760:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005762:	2201      	movs	r2, #1
 8005764:	4252      	negs	r2, r2
 8005766:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005768:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800576a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800576c:	2300      	movs	r3, #0
 800576e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005770:	4770      	bx	lr

08005772 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005772:	2300      	movs	r3, #0
 8005774:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005776:	4770      	bx	lr

08005778 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005778:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800577a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800577c:	689a      	ldr	r2, [r3, #8]
 800577e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005780:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005782:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005784:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005786:	6803      	ldr	r3, [r0, #0]
 8005788:	3301      	adds	r3, #1
 800578a:	6003      	str	r3, [r0, #0]
}
 800578c:	4770      	bx	lr

0800578e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800578e:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005790:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005792:	1c63      	adds	r3, r4, #1
 8005794:	d010      	beq.n	80057b8 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005796:	0003      	movs	r3, r0
 8005798:	3308      	adds	r3, #8
 800579a:	001a      	movs	r2, r3
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	681d      	ldr	r5, [r3, #0]
 80057a0:	42a5      	cmp	r5, r4
 80057a2:	d9fa      	bls.n	800579a <vListInsert+0xc>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057a4:	6853      	ldr	r3, [r2, #4]
 80057a6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057a8:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057aa:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80057ac:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057ae:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80057b0:	6803      	ldr	r3, [r0, #0]
 80057b2:	3301      	adds	r3, #1
 80057b4:	6003      	str	r3, [r0, #0]
}
 80057b6:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 80057b8:	6902      	ldr	r2, [r0, #16]
 80057ba:	e7f3      	b.n	80057a4 <vListInsert+0x16>

080057bc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80057bc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057be:	6841      	ldr	r1, [r0, #4]
 80057c0:	6882      	ldr	r2, [r0, #8]
 80057c2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057c4:	6841      	ldr	r1, [r0, #4]
 80057c6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	4282      	cmp	r2, r0
 80057cc:	d006      	beq.n	80057dc <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80057ce:	2200      	movs	r2, #0
 80057d0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	3a01      	subs	r2, #1
 80057d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80057d8:	6818      	ldr	r0, [r3, #0]
}
 80057da:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057dc:	6882      	ldr	r2, [r0, #8]
 80057de:	605a      	str	r2, [r3, #4]
 80057e0:	e7f5      	b.n	80057ce <uxListRemove+0x12>

080057e2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80057e2:	b510      	push	{r4, lr}
 80057e4:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057e6:	f001 f8eb 	bl	80069c0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80057ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80057ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d004      	beq.n	80057fc <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80057f2:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80057f4:	f001 f8f0 	bl	80069d8 <vPortExitCritical>

	return xReturn;
}
 80057f8:	0020      	movs	r0, r4
 80057fa:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80057fc:	2401      	movs	r4, #1
 80057fe:	e7f9      	b.n	80057f4 <prvIsQueueFull+0x12>

08005800 <prvIsQueueEmpty>:
{
 8005800:	b510      	push	{r4, lr}
 8005802:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 8005804:	f001 f8dc 	bl	80069c0 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005808:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800580a:	2b00      	cmp	r3, #0
 800580c:	d104      	bne.n	8005818 <prvIsQueueEmpty+0x18>
			xReturn = pdTRUE;
 800580e:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8005810:	f001 f8e2 	bl	80069d8 <vPortExitCritical>
}
 8005814:	0020      	movs	r0, r4
 8005816:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8005818:	2400      	movs	r4, #0
 800581a:	e7f9      	b.n	8005810 <prvIsQueueEmpty+0x10>

0800581c <prvCopyDataToQueue>:
{
 800581c:	b570      	push	{r4, r5, r6, lr}
 800581e:	0004      	movs	r4, r0
 8005820:	0015      	movs	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005822:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005824:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005826:	2a00      	cmp	r2, #0
 8005828:	d10c      	bne.n	8005844 <prvCopyDataToQueue+0x28>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800582a:	6803      	ldr	r3, [r0, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <prvCopyDataToQueue+0x1c>
BaseType_t xReturn = pdFALSE;
 8005830:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005832:	3601      	adds	r6, #1
 8005834:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8005836:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005838:	6880      	ldr	r0, [r0, #8]
 800583a:	f000 fed5 	bl	80065e8 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800583e:	2300      	movs	r3, #0
 8005840:	60a3      	str	r3, [r4, #8]
 8005842:	e7f6      	b.n	8005832 <prvCopyDataToQueue+0x16>
	else if( xPosition == queueSEND_TO_BACK )
 8005844:	2d00      	cmp	r5, #0
 8005846:	d10e      	bne.n	8005866 <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005848:	6840      	ldr	r0, [r0, #4]
 800584a:	f003 fc3a 	bl	80090c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800584e:	6863      	ldr	r3, [r4, #4]
 8005850:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005852:	4694      	mov	ip, r2
 8005854:	4463      	add	r3, ip
 8005856:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005858:	68a2      	ldr	r2, [r4, #8]
 800585a:	4293      	cmp	r3, r2
 800585c:	d31b      	bcc.n	8005896 <prvCopyDataToQueue+0x7a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800585e:	6823      	ldr	r3, [r4, #0]
 8005860:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8005862:	0028      	movs	r0, r5
 8005864:	e7e5      	b.n	8005832 <prvCopyDataToQueue+0x16>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005866:	68c0      	ldr	r0, [r0, #12]
 8005868:	f003 fc2b 	bl	80090c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800586c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800586e:	425a      	negs	r2, r3
 8005870:	68e1      	ldr	r1, [r4, #12]
 8005872:	1acb      	subs	r3, r1, r3
 8005874:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005876:	6821      	ldr	r1, [r4, #0]
 8005878:	428b      	cmp	r3, r1
 800587a:	d203      	bcs.n	8005884 <prvCopyDataToQueue+0x68>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800587c:	68a3      	ldr	r3, [r4, #8]
 800587e:	469c      	mov	ip, r3
 8005880:	4462      	add	r2, ip
 8005882:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005884:	2d02      	cmp	r5, #2
 8005886:	d001      	beq.n	800588c <prvCopyDataToQueue+0x70>
BaseType_t xReturn = pdFALSE;
 8005888:	2000      	movs	r0, #0
 800588a:	e7d2      	b.n	8005832 <prvCopyDataToQueue+0x16>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800588c:	2e00      	cmp	r6, #0
 800588e:	d004      	beq.n	800589a <prvCopyDataToQueue+0x7e>
				--uxMessagesWaiting;
 8005890:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8005892:	2000      	movs	r0, #0
 8005894:	e7cd      	b.n	8005832 <prvCopyDataToQueue+0x16>
 8005896:	0028      	movs	r0, r5
 8005898:	e7cb      	b.n	8005832 <prvCopyDataToQueue+0x16>
 800589a:	2000      	movs	r0, #0
 800589c:	e7c9      	b.n	8005832 <prvCopyDataToQueue+0x16>

0800589e <prvCopyDataFromQueue>:
{
 800589e:	b510      	push	{r4, lr}
 80058a0:	0003      	movs	r3, r0
 80058a2:	0008      	movs	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80058a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058a6:	2a00      	cmp	r2, #0
 80058a8:	d00a      	beq.n	80058c0 <prvCopyDataFromQueue+0x22>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80058aa:	68d9      	ldr	r1, [r3, #12]
 80058ac:	1889      	adds	r1, r1, r2
 80058ae:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80058b0:	689c      	ldr	r4, [r3, #8]
 80058b2:	42a1      	cmp	r1, r4
 80058b4:	d301      	bcc.n	80058ba <prvCopyDataFromQueue+0x1c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80058b6:	6819      	ldr	r1, [r3, #0]
 80058b8:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80058ba:	68d9      	ldr	r1, [r3, #12]
 80058bc:	f003 fc01 	bl	80090c2 <memcpy>
}
 80058c0:	bd10      	pop	{r4, pc}

080058c2 <prvUnlockQueue>:
{
 80058c2:	b570      	push	{r4, r5, r6, lr}
 80058c4:	0005      	movs	r5, r0
	taskENTER_CRITICAL();
 80058c6:	f001 f87b 	bl	80069c0 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80058ca:	2345      	movs	r3, #69	; 0x45
 80058cc:	5cec      	ldrb	r4, [r5, r3]
 80058ce:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058d0:	e001      	b.n	80058d6 <prvUnlockQueue+0x14>
			--cTxLock;
 80058d2:	3c01      	subs	r4, #1
 80058d4:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058d6:	2c00      	cmp	r4, #0
 80058d8:	dd0b      	ble.n	80058f2 <prvUnlockQueue+0x30>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d008      	beq.n	80058f2 <prvUnlockQueue+0x30>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058e0:	0028      	movs	r0, r5
 80058e2:	3024      	adds	r0, #36	; 0x24
 80058e4:	f000 fde6 	bl	80064b4 <xTaskRemoveFromEventList>
 80058e8:	2800      	cmp	r0, #0
 80058ea:	d0f2      	beq.n	80058d2 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 80058ec:	f000 fe64 	bl	80065b8 <vTaskMissedYield>
 80058f0:	e7ef      	b.n	80058d2 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80058f2:	2345      	movs	r3, #69	; 0x45
 80058f4:	22ff      	movs	r2, #255	; 0xff
 80058f6:	54ea      	strb	r2, [r5, r3]
	taskEXIT_CRITICAL();
 80058f8:	f001 f86e 	bl	80069d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80058fc:	f001 f860 	bl	80069c0 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005900:	2344      	movs	r3, #68	; 0x44
 8005902:	5cec      	ldrb	r4, [r5, r3]
 8005904:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005906:	e001      	b.n	800590c <prvUnlockQueue+0x4a>
				--cRxLock;
 8005908:	3c01      	subs	r4, #1
 800590a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800590c:	2c00      	cmp	r4, #0
 800590e:	dd0b      	ble.n	8005928 <prvUnlockQueue+0x66>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005910:	692b      	ldr	r3, [r5, #16]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d008      	beq.n	8005928 <prvUnlockQueue+0x66>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005916:	0028      	movs	r0, r5
 8005918:	3010      	adds	r0, #16
 800591a:	f000 fdcb 	bl	80064b4 <xTaskRemoveFromEventList>
 800591e:	2800      	cmp	r0, #0
 8005920:	d0f2      	beq.n	8005908 <prvUnlockQueue+0x46>
					vTaskMissedYield();
 8005922:	f000 fe49 	bl	80065b8 <vTaskMissedYield>
 8005926:	e7ef      	b.n	8005908 <prvUnlockQueue+0x46>
		pxQueue->cRxLock = queueUNLOCKED;
 8005928:	2344      	movs	r3, #68	; 0x44
 800592a:	22ff      	movs	r2, #255	; 0xff
 800592c:	54ea      	strb	r2, [r5, r3]
	taskEXIT_CRITICAL();
 800592e:	f001 f853 	bl	80069d8 <vPortExitCritical>
}
 8005932:	bd70      	pop	{r4, r5, r6, pc}

08005934 <xQueueGenericReset>:
{
 8005934:	b570      	push	{r4, r5, r6, lr}
 8005936:	0004      	movs	r4, r0
 8005938:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800593a:	2800      	cmp	r0, #0
 800593c:	d01d      	beq.n	800597a <xQueueGenericReset+0x46>
	taskENTER_CRITICAL();
 800593e:	f001 f83f 	bl	80069c0 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005942:	6822      	ldr	r2, [r4, #0]
 8005944:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005946:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005948:	0001      	movs	r1, r0
 800594a:	4359      	muls	r1, r3
 800594c:	1851      	adds	r1, r2, r1
 800594e:	60a1      	str	r1, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005950:	2100      	movs	r1, #0
 8005952:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005954:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005956:	3b01      	subs	r3, #1
 8005958:	4343      	muls	r3, r0
 800595a:	18d3      	adds	r3, r2, r3
 800595c:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800595e:	23ff      	movs	r3, #255	; 0xff
 8005960:	2244      	movs	r2, #68	; 0x44
 8005962:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8005964:	3201      	adds	r2, #1
 8005966:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
 8005968:	2d00      	cmp	r5, #0
 800596a:	d111      	bne.n	8005990 <xQueueGenericReset+0x5c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800596c:	6923      	ldr	r3, [r4, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d105      	bne.n	800597e <xQueueGenericReset+0x4a>
	taskEXIT_CRITICAL();
 8005972:	f001 f831 	bl	80069d8 <vPortExitCritical>
}
 8005976:	2001      	movs	r0, #1
 8005978:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
 800597a:	b672      	cpsid	i
 800597c:	e7fe      	b.n	800597c <xQueueGenericReset+0x48>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800597e:	0020      	movs	r0, r4
 8005980:	3010      	adds	r0, #16
 8005982:	f000 fd97 	bl	80064b4 <xTaskRemoveFromEventList>
 8005986:	2800      	cmp	r0, #0
 8005988:	d0f3      	beq.n	8005972 <xQueueGenericReset+0x3e>
					queueYIELD_IF_USING_PREEMPTION();
 800598a:	f001 f80d 	bl	80069a8 <vPortYield>
 800598e:	e7f0      	b.n	8005972 <xQueueGenericReset+0x3e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005990:	0020      	movs	r0, r4
 8005992:	3010      	adds	r0, #16
 8005994:	f7ff fee2 	bl	800575c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005998:	0020      	movs	r0, r4
 800599a:	3024      	adds	r0, #36	; 0x24
 800599c:	f7ff fede 	bl	800575c <vListInitialise>
 80059a0:	e7e7      	b.n	8005972 <xQueueGenericReset+0x3e>

080059a2 <prvInitialiseNewQueue>:
{
 80059a2:	b510      	push	{r4, lr}
 80059a4:	0003      	movs	r3, r0
 80059a6:	9802      	ldr	r0, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80059a8:	2900      	cmp	r1, #0
 80059aa:	d106      	bne.n	80059ba <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80059ac:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80059ae:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80059b0:	6401      	str	r1, [r0, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80059b2:	2101      	movs	r1, #1
 80059b4:	f7ff ffbe 	bl	8005934 <xQueueGenericReset>
}
 80059b8:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80059ba:	6002      	str	r2, [r0, #0]
 80059bc:	e7f7      	b.n	80059ae <prvInitialiseNewQueue+0xc>

080059be <xQueueGenericCreateStatic>:
	{
 80059be:	b570      	push	{r4, r5, r6, lr}
 80059c0:	b084      	sub	sp, #16
 80059c2:	001d      	movs	r5, r3
 80059c4:	ac08      	add	r4, sp, #32
 80059c6:	7823      	ldrb	r3, [r4, #0]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059c8:	2800      	cmp	r0, #0
 80059ca:	d101      	bne.n	80059d0 <xQueueGenericCreateStatic+0x12>
 80059cc:	b672      	cpsid	i
 80059ce:	e7fe      	b.n	80059ce <xQueueGenericCreateStatic+0x10>
		configASSERT( pxStaticQueue != NULL );
 80059d0:	2d00      	cmp	r5, #0
 80059d2:	d005      	beq.n	80059e0 <xQueueGenericCreateStatic+0x22>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80059d4:	2a00      	cmp	r2, #0
 80059d6:	d005      	beq.n	80059e4 <xQueueGenericCreateStatic+0x26>
 80059d8:	2900      	cmp	r1, #0
 80059da:	d103      	bne.n	80059e4 <xQueueGenericCreateStatic+0x26>
 80059dc:	b672      	cpsid	i
 80059de:	e7fe      	b.n	80059de <xQueueGenericCreateStatic+0x20>
		configASSERT( pxStaticQueue != NULL );
 80059e0:	b672      	cpsid	i
 80059e2:	e7fe      	b.n	80059e2 <xQueueGenericCreateStatic+0x24>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80059e4:	2a00      	cmp	r2, #0
 80059e6:	d006      	beq.n	80059f6 <xQueueGenericCreateStatic+0x38>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80059e8:	2448      	movs	r4, #72	; 0x48
 80059ea:	9403      	str	r4, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80059ec:	9c03      	ldr	r4, [sp, #12]
 80059ee:	2c48      	cmp	r4, #72	; 0x48
 80059f0:	d005      	beq.n	80059fe <xQueueGenericCreateStatic+0x40>
 80059f2:	b672      	cpsid	i
 80059f4:	e7fe      	b.n	80059f4 <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80059f6:	2900      	cmp	r1, #0
 80059f8:	d0f6      	beq.n	80059e8 <xQueueGenericCreateStatic+0x2a>
 80059fa:	b672      	cpsid	i
 80059fc:	e7fe      	b.n	80059fc <xQueueGenericCreateStatic+0x3e>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80059fe:	9c03      	ldr	r4, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a00:	2446      	movs	r4, #70	; 0x46
 8005a02:	2601      	movs	r6, #1
 8005a04:	552e      	strb	r6, [r5, r4]
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a06:	9500      	str	r5, [sp, #0]
 8005a08:	f7ff ffcb 	bl	80059a2 <prvInitialiseNewQueue>
	}
 8005a0c:	0028      	movs	r0, r5
 8005a0e:	b004      	add	sp, #16
 8005a10:	bd70      	pop	{r4, r5, r6, pc}

08005a12 <xQueueGenericCreate>:
	{
 8005a12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a14:	b083      	sub	sp, #12
 8005a16:	0004      	movs	r4, r0
 8005a18:	000d      	movs	r5, r1
 8005a1a:	0016      	movs	r6, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a1c:	2800      	cmp	r0, #0
 8005a1e:	d101      	bne.n	8005a24 <xQueueGenericCreate+0x12>
 8005a20:	b672      	cpsid	i
 8005a22:	e7fe      	b.n	8005a22 <xQueueGenericCreate+0x10>
		if( uxItemSize == ( UBaseType_t ) 0 )
 8005a24:	2900      	cmp	r1, #0
 8005a26:	d014      	beq.n	8005a52 <xQueueGenericCreate+0x40>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a28:	0008      	movs	r0, r1
 8005a2a:	4360      	muls	r0, r4
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005a2c:	3048      	adds	r0, #72	; 0x48
 8005a2e:	f001 f87f 	bl	8006b30 <pvPortMalloc>
 8005a32:	1e07      	subs	r7, r0, #0
		if( pxNewQueue != NULL )
 8005a34:	d00a      	beq.n	8005a4c <xQueueGenericCreate+0x3a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a36:	0002      	movs	r2, r0
 8005a38:	3248      	adds	r2, #72	; 0x48
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005a3a:	2346      	movs	r3, #70	; 0x46
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	54c1      	strb	r1, [r0, r3]
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a40:	9000      	str	r0, [sp, #0]
 8005a42:	0033      	movs	r3, r6
 8005a44:	0029      	movs	r1, r5
 8005a46:	0020      	movs	r0, r4
 8005a48:	f7ff ffab 	bl	80059a2 <prvInitialiseNewQueue>
	}
 8005a4c:	0038      	movs	r0, r7
 8005a4e:	b003      	add	sp, #12
 8005a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
 8005a52:	0008      	movs	r0, r1
 8005a54:	e7ea      	b.n	8005a2c <xQueueGenericCreate+0x1a>

08005a56 <xQueueGenericSend>:
{
 8005a56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a58:	b085      	sub	sp, #20
 8005a5a:	0004      	movs	r4, r0
 8005a5c:	000f      	movs	r7, r1
 8005a5e:	9201      	str	r2, [sp, #4]
 8005a60:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 8005a62:	2800      	cmp	r0, #0
 8005a64:	d008      	beq.n	8005a78 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a66:	2900      	cmp	r1, #0
 8005a68:	d008      	beq.n	8005a7c <xQueueGenericSend+0x26>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a6a:	2d02      	cmp	r5, #2
 8005a6c:	d10b      	bne.n	8005a86 <xQueueGenericSend+0x30>
 8005a6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d008      	beq.n	8005a86 <xQueueGenericSend+0x30>
 8005a74:	b672      	cpsid	i
 8005a76:	e7fe      	b.n	8005a76 <xQueueGenericSend+0x20>
	configASSERT( pxQueue );
 8005a78:	b672      	cpsid	i
 8005a7a:	e7fe      	b.n	8005a7a <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a7c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d0f3      	beq.n	8005a6a <xQueueGenericSend+0x14>
 8005a82:	b672      	cpsid	i
 8005a84:	e7fe      	b.n	8005a84 <xQueueGenericSend+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a86:	f000 fd9d 	bl	80065c4 <xTaskGetSchedulerState>
 8005a8a:	1e06      	subs	r6, r0, #0
 8005a8c:	d104      	bne.n	8005a98 <xQueueGenericSend+0x42>
 8005a8e:	9b01      	ldr	r3, [sp, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d034      	beq.n	8005afe <xQueueGenericSend+0xa8>
 8005a94:	b672      	cpsid	i
 8005a96:	e7fe      	b.n	8005a96 <xQueueGenericSend+0x40>
 8005a98:	2600      	movs	r6, #0
 8005a9a:	e030      	b.n	8005afe <xQueueGenericSend+0xa8>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a9c:	002a      	movs	r2, r5
 8005a9e:	0039      	movs	r1, r7
 8005aa0:	0020      	movs	r0, r4
 8005aa2:	f7ff febb 	bl	800581c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d106      	bne.n	8005aba <xQueueGenericSend+0x64>
					else if( xYieldRequired != pdFALSE )
 8005aac:	2800      	cmp	r0, #0
 8005aae:	d10d      	bne.n	8005acc <xQueueGenericSend+0x76>
				taskEXIT_CRITICAL();
 8005ab0:	f000 ff92 	bl	80069d8 <vPortExitCritical>
				return pdPASS;
 8005ab4:	2001      	movs	r0, #1
}
 8005ab6:	b005      	add	sp, #20
 8005ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005aba:	0020      	movs	r0, r4
 8005abc:	3024      	adds	r0, #36	; 0x24
 8005abe:	f000 fcf9 	bl	80064b4 <xTaskRemoveFromEventList>
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	d0f4      	beq.n	8005ab0 <xQueueGenericSend+0x5a>
							queueYIELD_IF_USING_PREEMPTION();
 8005ac6:	f000 ff6f 	bl	80069a8 <vPortYield>
 8005aca:	e7f1      	b.n	8005ab0 <xQueueGenericSend+0x5a>
						queueYIELD_IF_USING_PREEMPTION();
 8005acc:	f000 ff6c 	bl	80069a8 <vPortYield>
 8005ad0:	e7ee      	b.n	8005ab0 <xQueueGenericSend+0x5a>
					taskEXIT_CRITICAL();
 8005ad2:	f000 ff81 	bl	80069d8 <vPortExitCritical>
					return errQUEUE_FULL;
 8005ad6:	2000      	movs	r0, #0
 8005ad8:	e7ed      	b.n	8005ab6 <xQueueGenericSend+0x60>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ada:	a802      	add	r0, sp, #8
 8005adc:	f000 fd2c 	bl	8006538 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ae0:	3601      	adds	r6, #1
 8005ae2:	e019      	b.n	8005b18 <xQueueGenericSend+0xc2>
		prvLockQueue( pxQueue );
 8005ae4:	2344      	movs	r3, #68	; 0x44
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	54e2      	strb	r2, [r4, r3]
 8005aea:	e020      	b.n	8005b2e <xQueueGenericSend+0xd8>
 8005aec:	2345      	movs	r3, #69	; 0x45
 8005aee:	2200      	movs	r2, #0
 8005af0:	54e2      	strb	r2, [r4, r3]
 8005af2:	e021      	b.n	8005b38 <xQueueGenericSend+0xe2>
				prvUnlockQueue( pxQueue );
 8005af4:	0020      	movs	r0, r4
 8005af6:	f7ff fee4 	bl	80058c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005afa:	f000 fbf9 	bl	80062f0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8005afe:	f000 ff5f 	bl	80069c0 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b04:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d3c8      	bcc.n	8005a9c <xQueueGenericSend+0x46>
 8005b0a:	2d02      	cmp	r5, #2
 8005b0c:	d0c6      	beq.n	8005a9c <xQueueGenericSend+0x46>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b0e:	9b01      	ldr	r3, [sp, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0de      	beq.n	8005ad2 <xQueueGenericSend+0x7c>
				else if( xEntryTimeSet == pdFALSE )
 8005b14:	2e00      	cmp	r6, #0
 8005b16:	d0e0      	beq.n	8005ada <xQueueGenericSend+0x84>
		taskEXIT_CRITICAL();
 8005b18:	f000 ff5e 	bl	80069d8 <vPortExitCritical>
		vTaskSuspendAll();
 8005b1c:	f000 fb56 	bl	80061cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b20:	f000 ff4e 	bl	80069c0 <vPortEnterCritical>
 8005b24:	2344      	movs	r3, #68	; 0x44
 8005b26:	5ce2      	ldrb	r2, [r4, r3]
 8005b28:	b252      	sxtb	r2, r2
 8005b2a:	1c53      	adds	r3, r2, #1
 8005b2c:	d0da      	beq.n	8005ae4 <xQueueGenericSend+0x8e>
 8005b2e:	2345      	movs	r3, #69	; 0x45
 8005b30:	5ce2      	ldrb	r2, [r4, r3]
 8005b32:	b252      	sxtb	r2, r2
 8005b34:	1c53      	adds	r3, r2, #1
 8005b36:	d0d9      	beq.n	8005aec <xQueueGenericSend+0x96>
 8005b38:	f000 ff4e 	bl	80069d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b3c:	a901      	add	r1, sp, #4
 8005b3e:	a802      	add	r0, sp, #8
 8005b40:	f000 fd06 	bl	8006550 <xTaskCheckForTimeOut>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	d113      	bne.n	8005b70 <xQueueGenericSend+0x11a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b48:	0020      	movs	r0, r4
 8005b4a:	f7ff fe4a 	bl	80057e2 <prvIsQueueFull>
 8005b4e:	2800      	cmp	r0, #0
 8005b50:	d0d0      	beq.n	8005af4 <xQueueGenericSend+0x9e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b52:	0020      	movs	r0, r4
 8005b54:	3010      	adds	r0, #16
 8005b56:	9901      	ldr	r1, [sp, #4]
 8005b58:	f000 fc9a 	bl	8006490 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b5c:	0020      	movs	r0, r4
 8005b5e:	f7ff feb0 	bl	80058c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b62:	f000 fbc5 	bl	80062f0 <xTaskResumeAll>
 8005b66:	2800      	cmp	r0, #0
 8005b68:	d1c9      	bne.n	8005afe <xQueueGenericSend+0xa8>
					portYIELD_WITHIN_API();
 8005b6a:	f000 ff1d 	bl	80069a8 <vPortYield>
 8005b6e:	e7c6      	b.n	8005afe <xQueueGenericSend+0xa8>
			prvUnlockQueue( pxQueue );
 8005b70:	0020      	movs	r0, r4
 8005b72:	f7ff fea6 	bl	80058c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b76:	f000 fbbb 	bl	80062f0 <xTaskResumeAll>
			return errQUEUE_FULL;
 8005b7a:	2000      	movs	r0, #0
 8005b7c:	e79b      	b.n	8005ab6 <xQueueGenericSend+0x60>

08005b7e <xQueueGenericSendFromISR>:
{
 8005b7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b80:	46c6      	mov	lr, r8
 8005b82:	b500      	push	{lr}
 8005b84:	b082      	sub	sp, #8
 8005b86:	0004      	movs	r4, r0
 8005b88:	000f      	movs	r7, r1
 8005b8a:	9201      	str	r2, [sp, #4]
 8005b8c:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	d008      	beq.n	8005ba4 <xQueueGenericSendFromISR+0x26>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b92:	2900      	cmp	r1, #0
 8005b94:	d008      	beq.n	8005ba8 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b96:	2d02      	cmp	r5, #2
 8005b98:	d10b      	bne.n	8005bb2 <xQueueGenericSendFromISR+0x34>
 8005b9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d008      	beq.n	8005bb2 <xQueueGenericSendFromISR+0x34>
 8005ba0:	b672      	cpsid	i
 8005ba2:	e7fe      	b.n	8005ba2 <xQueueGenericSendFromISR+0x24>
	configASSERT( pxQueue );
 8005ba4:	b672      	cpsid	i
 8005ba6:	e7fe      	b.n	8005ba6 <xQueueGenericSendFromISR+0x28>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ba8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d0f3      	beq.n	8005b96 <xQueueGenericSendFromISR+0x18>
 8005bae:	b672      	cpsid	i
 8005bb0:	e7fe      	b.n	8005bb0 <xQueueGenericSendFromISR+0x32>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bb2:	f000 ff21 	bl	80069f8 <ulSetInterruptMaskFromISR>
 8005bb6:	0006      	movs	r6, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005bba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d30a      	bcc.n	8005bd6 <xQueueGenericSendFromISR+0x58>
 8005bc0:	2d02      	cmp	r5, #2
 8005bc2:	d008      	beq.n	8005bd6 <xQueueGenericSendFromISR+0x58>
			xReturn = errQUEUE_FULL;
 8005bc4:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005bc6:	0030      	movs	r0, r6
 8005bc8:	f000 ff1a 	bl	8006a00 <vClearInterruptMaskFromISR>
}
 8005bcc:	0020      	movs	r0, r4
 8005bce:	b002      	add	sp, #8
 8005bd0:	bc80      	pop	{r7}
 8005bd2:	46b8      	mov	r8, r7
 8005bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8005bd6:	2345      	movs	r3, #69	; 0x45
 8005bd8:	5ce3      	ldrb	r3, [r4, r3]
 8005bda:	b25b      	sxtb	r3, r3
 8005bdc:	4698      	mov	r8, r3
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bde:	002a      	movs	r2, r5
 8005be0:	0039      	movs	r1, r7
 8005be2:	0020      	movs	r0, r4
 8005be4:	f7ff fe1a 	bl	800581c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8005be8:	4643      	mov	r3, r8
 8005bea:	3301      	adds	r3, #1
 8005bec:	d006      	beq.n	8005bfc <xQueueGenericSendFromISR+0x7e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005bee:	4643      	mov	r3, r8
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	b25b      	sxtb	r3, r3
 8005bf4:	2245      	movs	r2, #69	; 0x45
 8005bf6:	54a3      	strb	r3, [r4, r2]
			xReturn = pdPASS;
 8005bf8:	2401      	movs	r4, #1
 8005bfa:	e7e4      	b.n	8005bc6 <xQueueGenericSendFromISR+0x48>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <xQueueGenericSendFromISR+0x88>
			xReturn = pdPASS;
 8005c02:	2401      	movs	r4, #1
 8005c04:	e7df      	b.n	8005bc6 <xQueueGenericSendFromISR+0x48>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c06:	0020      	movs	r0, r4
 8005c08:	3024      	adds	r0, #36	; 0x24
 8005c0a:	f000 fc53 	bl	80064b4 <xTaskRemoveFromEventList>
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	d006      	beq.n	8005c20 <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 8005c12:	9a01      	ldr	r2, [sp, #4]
 8005c14:	2a00      	cmp	r2, #0
 8005c16:	d005      	beq.n	8005c24 <xQueueGenericSendFromISR+0xa6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	6013      	str	r3, [r2, #0]
			xReturn = pdPASS;
 8005c1c:	2401      	movs	r4, #1
 8005c1e:	e7d2      	b.n	8005bc6 <xQueueGenericSendFromISR+0x48>
 8005c20:	2401      	movs	r4, #1
 8005c22:	e7d0      	b.n	8005bc6 <xQueueGenericSendFromISR+0x48>
 8005c24:	2401      	movs	r4, #1
 8005c26:	e7ce      	b.n	8005bc6 <xQueueGenericSendFromISR+0x48>

08005c28 <xQueueReceive>:
{
 8005c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	0004      	movs	r4, r0
 8005c2e:	000f      	movs	r7, r1
 8005c30:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005c32:	2800      	cmp	r0, #0
 8005c34:	d00a      	beq.n	8005c4c <xQueueReceive+0x24>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c36:	2900      	cmp	r1, #0
 8005c38:	d00a      	beq.n	8005c50 <xQueueReceive+0x28>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c3a:	f000 fcc3 	bl	80065c4 <xTaskGetSchedulerState>
 8005c3e:	1e06      	subs	r6, r0, #0
 8005c40:	d10b      	bne.n	8005c5a <xQueueReceive+0x32>
 8005c42:	9b01      	ldr	r3, [sp, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d042      	beq.n	8005cce <xQueueReceive+0xa6>
 8005c48:	b672      	cpsid	i
 8005c4a:	e7fe      	b.n	8005c4a <xQueueReceive+0x22>
	configASSERT( ( pxQueue ) );
 8005c4c:	b672      	cpsid	i
 8005c4e:	e7fe      	b.n	8005c4e <xQueueReceive+0x26>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c50:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0f1      	beq.n	8005c3a <xQueueReceive+0x12>
 8005c56:	b672      	cpsid	i
 8005c58:	e7fe      	b.n	8005c58 <xQueueReceive+0x30>
 8005c5a:	2600      	movs	r6, #0
 8005c5c:	e037      	b.n	8005cce <xQueueReceive+0xa6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c5e:	0039      	movs	r1, r7
 8005c60:	0020      	movs	r0, r4
 8005c62:	f7ff fe1c 	bl	800589e <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c66:	3d01      	subs	r5, #1
 8005c68:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c6a:	6923      	ldr	r3, [r4, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d104      	bne.n	8005c7a <xQueueReceive+0x52>
				taskEXIT_CRITICAL();
 8005c70:	f000 feb2 	bl	80069d8 <vPortExitCritical>
				return pdPASS;
 8005c74:	2001      	movs	r0, #1
}
 8005c76:	b005      	add	sp, #20
 8005c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c7a:	0020      	movs	r0, r4
 8005c7c:	3010      	adds	r0, #16
 8005c7e:	f000 fc19 	bl	80064b4 <xTaskRemoveFromEventList>
 8005c82:	2800      	cmp	r0, #0
 8005c84:	d0f4      	beq.n	8005c70 <xQueueReceive+0x48>
						queueYIELD_IF_USING_PREEMPTION();
 8005c86:	f000 fe8f 	bl	80069a8 <vPortYield>
 8005c8a:	e7f1      	b.n	8005c70 <xQueueReceive+0x48>
					taskEXIT_CRITICAL();
 8005c8c:	f000 fea4 	bl	80069d8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005c90:	2000      	movs	r0, #0
 8005c92:	e7f0      	b.n	8005c76 <xQueueReceive+0x4e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c94:	a802      	add	r0, sp, #8
 8005c96:	f000 fc4f 	bl	8006538 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c9a:	3601      	adds	r6, #1
 8005c9c:	e021      	b.n	8005ce2 <xQueueReceive+0xba>
		prvLockQueue( pxQueue );
 8005c9e:	2344      	movs	r3, #68	; 0x44
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	54e2      	strb	r2, [r4, r3]
 8005ca4:	e028      	b.n	8005cf8 <xQueueReceive+0xd0>
 8005ca6:	2345      	movs	r3, #69	; 0x45
 8005ca8:	2200      	movs	r2, #0
 8005caa:	54e2      	strb	r2, [r4, r3]
 8005cac:	e029      	b.n	8005d02 <xQueueReceive+0xda>
				prvUnlockQueue( pxQueue );
 8005cae:	0020      	movs	r0, r4
 8005cb0:	f7ff fe07 	bl	80058c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cb4:	f000 fb1c 	bl	80062f0 <xTaskResumeAll>
 8005cb8:	e009      	b.n	8005cce <xQueueReceive+0xa6>
			prvUnlockQueue( pxQueue );
 8005cba:	0020      	movs	r0, r4
 8005cbc:	f7ff fe01 	bl	80058c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cc0:	f000 fb16 	bl	80062f0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cc4:	0020      	movs	r0, r4
 8005cc6:	f7ff fd9b 	bl	8005800 <prvIsQueueEmpty>
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	d135      	bne.n	8005d3a <xQueueReceive+0x112>
		taskENTER_CRITICAL();
 8005cce:	f000 fe77 	bl	80069c0 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cd2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cd4:	2d00      	cmp	r5, #0
 8005cd6:	d1c2      	bne.n	8005c5e <xQueueReceive+0x36>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cd8:	9b01      	ldr	r3, [sp, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d0d6      	beq.n	8005c8c <xQueueReceive+0x64>
				else if( xEntryTimeSet == pdFALSE )
 8005cde:	2e00      	cmp	r6, #0
 8005ce0:	d0d8      	beq.n	8005c94 <xQueueReceive+0x6c>
		taskEXIT_CRITICAL();
 8005ce2:	f000 fe79 	bl	80069d8 <vPortExitCritical>
		vTaskSuspendAll();
 8005ce6:	f000 fa71 	bl	80061cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cea:	f000 fe69 	bl	80069c0 <vPortEnterCritical>
 8005cee:	2344      	movs	r3, #68	; 0x44
 8005cf0:	5ce3      	ldrb	r3, [r4, r3]
 8005cf2:	b25b      	sxtb	r3, r3
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	d0d2      	beq.n	8005c9e <xQueueReceive+0x76>
 8005cf8:	2345      	movs	r3, #69	; 0x45
 8005cfa:	5ce3      	ldrb	r3, [r4, r3]
 8005cfc:	b25b      	sxtb	r3, r3
 8005cfe:	3301      	adds	r3, #1
 8005d00:	d0d1      	beq.n	8005ca6 <xQueueReceive+0x7e>
 8005d02:	f000 fe69 	bl	80069d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d06:	a901      	add	r1, sp, #4
 8005d08:	a802      	add	r0, sp, #8
 8005d0a:	f000 fc21 	bl	8006550 <xTaskCheckForTimeOut>
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	d1d3      	bne.n	8005cba <xQueueReceive+0x92>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d12:	0020      	movs	r0, r4
 8005d14:	f7ff fd74 	bl	8005800 <prvIsQueueEmpty>
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	d0c8      	beq.n	8005cae <xQueueReceive+0x86>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d1c:	0020      	movs	r0, r4
 8005d1e:	3024      	adds	r0, #36	; 0x24
 8005d20:	9901      	ldr	r1, [sp, #4]
 8005d22:	f000 fbb5 	bl	8006490 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d26:	0020      	movs	r0, r4
 8005d28:	f7ff fdcb 	bl	80058c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d2c:	f000 fae0 	bl	80062f0 <xTaskResumeAll>
 8005d30:	2800      	cmp	r0, #0
 8005d32:	d1cc      	bne.n	8005cce <xQueueReceive+0xa6>
					portYIELD_WITHIN_API();
 8005d34:	f000 fe38 	bl	80069a8 <vPortYield>
 8005d38:	e7c9      	b.n	8005cce <xQueueReceive+0xa6>
				return errQUEUE_EMPTY;
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	e79b      	b.n	8005c76 <xQueueReceive+0x4e>

08005d3e <xQueueReceiveFromISR>:
{
 8005d3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d40:	46ce      	mov	lr, r9
 8005d42:	b500      	push	{lr}
 8005d44:	b082      	sub	sp, #8
 8005d46:	0004      	movs	r4, r0
 8005d48:	000d      	movs	r5, r1
 8005d4a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	d010      	beq.n	8005d72 <xQueueReceiveFromISR+0x34>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d50:	2900      	cmp	r1, #0
 8005d52:	d010      	beq.n	8005d76 <xQueueReceiveFromISR+0x38>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d54:	f000 fe50 	bl	80069f8 <ulSetInterruptMaskFromISR>
 8005d58:	0006      	movs	r6, r0
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d5a:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d5c:	2f00      	cmp	r7, #0
 8005d5e:	d10f      	bne.n	8005d80 <xQueueReceiveFromISR+0x42>
			xReturn = pdFAIL;
 8005d60:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005d62:	0030      	movs	r0, r6
 8005d64:	f000 fe4c 	bl	8006a00 <vClearInterruptMaskFromISR>
}
 8005d68:	0020      	movs	r0, r4
 8005d6a:	b002      	add	sp, #8
 8005d6c:	bc80      	pop	{r7}
 8005d6e:	46b9      	mov	r9, r7
 8005d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
 8005d72:	b672      	cpsid	i
 8005d74:	e7fe      	b.n	8005d74 <xQueueReceiveFromISR+0x36>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d76:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d0eb      	beq.n	8005d54 <xQueueReceiveFromISR+0x16>
 8005d7c:	b672      	cpsid	i
 8005d7e:	e7fe      	b.n	8005d7e <xQueueReceiveFromISR+0x40>
			const int8_t cRxLock = pxQueue->cRxLock;
 8005d80:	2344      	movs	r3, #68	; 0x44
 8005d82:	5ce3      	ldrb	r3, [r4, r3]
 8005d84:	b25b      	sxtb	r3, r3
 8005d86:	4699      	mov	r9, r3
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d88:	0029      	movs	r1, r5
 8005d8a:	0020      	movs	r0, r4
 8005d8c:	f7ff fd87 	bl	800589e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d90:	1e7b      	subs	r3, r7, #1
 8005d92:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8005d94:	464b      	mov	r3, r9
 8005d96:	3301      	adds	r3, #1
 8005d98:	d006      	beq.n	8005da8 <xQueueReceiveFromISR+0x6a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005d9a:	464b      	mov	r3, r9
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	b25b      	sxtb	r3, r3
 8005da0:	2244      	movs	r2, #68	; 0x44
 8005da2:	54a3      	strb	r3, [r4, r2]
			xReturn = pdPASS;
 8005da4:	2401      	movs	r4, #1
 8005da6:	e7dc      	b.n	8005d62 <xQueueReceiveFromISR+0x24>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005da8:	6923      	ldr	r3, [r4, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <xQueueReceiveFromISR+0x74>
			xReturn = pdPASS;
 8005dae:	2401      	movs	r4, #1
 8005db0:	e7d7      	b.n	8005d62 <xQueueReceiveFromISR+0x24>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005db2:	0020      	movs	r0, r4
 8005db4:	3010      	adds	r0, #16
 8005db6:	f000 fb7d 	bl	80064b4 <xTaskRemoveFromEventList>
 8005dba:	2800      	cmp	r0, #0
 8005dbc:	d006      	beq.n	8005dcc <xQueueReceiveFromISR+0x8e>
						if( pxHigherPriorityTaskWoken != NULL )
 8005dbe:	9a01      	ldr	r2, [sp, #4]
 8005dc0:	2a00      	cmp	r2, #0
 8005dc2:	d005      	beq.n	8005dd0 <xQueueReceiveFromISR+0x92>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	6013      	str	r3, [r2, #0]
			xReturn = pdPASS;
 8005dc8:	2401      	movs	r4, #1
 8005dca:	e7ca      	b.n	8005d62 <xQueueReceiveFromISR+0x24>
 8005dcc:	2401      	movs	r4, #1
 8005dce:	e7c8      	b.n	8005d62 <xQueueReceiveFromISR+0x24>
 8005dd0:	2401      	movs	r4, #1
 8005dd2:	e7c6      	b.n	8005d62 <xQueueReceiveFromISR+0x24>

08005dd4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dd4:	4b08      	ldr	r3, [pc, #32]	; (8005df8 <prvResetNextTaskUnblockTime+0x24>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d104      	bne.n	8005de8 <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005dde:	4b07      	ldr	r3, [pc, #28]	; (8005dfc <prvResetNextTaskUnblockTime+0x28>)
 8005de0:	2201      	movs	r2, #1
 8005de2:	4252      	negs	r2, r2
 8005de4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005de6:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005de8:	4b03      	ldr	r3, [pc, #12]	; (8005df8 <prvResetNextTaskUnblockTime+0x24>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	4b02      	ldr	r3, [pc, #8]	; (8005dfc <prvResetNextTaskUnblockTime+0x28>)
 8005df4:	601a      	str	r2, [r3, #0]
}
 8005df6:	e7f6      	b.n	8005de6 <prvResetNextTaskUnblockTime+0x12>
 8005df8:	200009fc 	.word	0x200009fc
 8005dfc:	20000ad4 	.word	0x20000ad4

08005e00 <prvInitialiseNewTask>:
{
 8005e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e02:	46de      	mov	lr, fp
 8005e04:	4657      	mov	r7, sl
 8005e06:	464e      	mov	r6, r9
 8005e08:	b5c0      	push	{r6, r7, lr}
 8005e0a:	4682      	mov	sl, r0
 8005e0c:	469b      	mov	fp, r3
 8005e0e:	9e08      	ldr	r6, [sp, #32]
 8005e10:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005e12:	4b22      	ldr	r3, [pc, #136]	; (8005e9c <prvInitialiseNewTask+0x9c>)
 8005e14:	469c      	mov	ip, r3
 8005e16:	4462      	add	r2, ip
 8005e18:	0092      	lsls	r2, r2, #2
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1c:	469c      	mov	ip, r3
 8005e1e:	4462      	add	r2, ip
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005e20:	2307      	movs	r3, #7
 8005e22:	439a      	bics	r2, r3
 8005e24:	4691      	mov	r9, r2
	if( pcName != NULL )
 8005e26:	2900      	cmp	r1, #0
 8005e28:	d033      	beq.n	8005e92 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e2a:	2400      	movs	r4, #0
 8005e2c:	2c0f      	cmp	r4, #15
 8005e2e:	d808      	bhi.n	8005e42 <prvInitialiseNewTask+0x42>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e30:	5d0b      	ldrb	r3, [r1, r4]
 8005e32:	193d      	adds	r5, r7, r4
 8005e34:	3534      	adds	r5, #52	; 0x34
 8005e36:	702b      	strb	r3, [r5, #0]
			if( pcName[ x ] == ( char ) 0x00 )
 8005e38:	5d0b      	ldrb	r3, [r1, r4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <prvInitialiseNewTask+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e3e:	3401      	adds	r4, #1
 8005e40:	e7f4      	b.n	8005e2c <prvInitialiseNewTask+0x2c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e42:	2343      	movs	r3, #67	; 0x43
 8005e44:	2200      	movs	r2, #0
 8005e46:	54fa      	strb	r2, [r7, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e48:	2e06      	cmp	r6, #6
 8005e4a:	d900      	bls.n	8005e4e <prvInitialiseNewTask+0x4e>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e4c:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8005e4e:	62fe      	str	r6, [r7, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005e50:	647e      	str	r6, [r7, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005e52:	2400      	movs	r4, #0
 8005e54:	64bc      	str	r4, [r7, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e56:	1d38      	adds	r0, r7, #4
 8005e58:	f7ff fc8b 	bl	8005772 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e5c:	0038      	movs	r0, r7
 8005e5e:	3018      	adds	r0, #24
 8005e60:	f7ff fc87 	bl	8005772 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e64:	613f      	str	r7, [r7, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e66:	2307      	movs	r3, #7
 8005e68:	1b9e      	subs	r6, r3, r6
 8005e6a:	61be      	str	r6, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e6c:	627f      	str	r7, [r7, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8005e6e:	64fc      	str	r4, [r7, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e70:	3349      	adds	r3, #73	; 0x49
 8005e72:	54fc      	strb	r4, [r7, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e74:	465a      	mov	r2, fp
 8005e76:	4651      	mov	r1, sl
 8005e78:	4648      	mov	r0, r9
 8005e7a:	f000 fd65 	bl	8006948 <pxPortInitialiseStack>
 8005e7e:	6038      	str	r0, [r7, #0]
	if( pxCreatedTask != NULL )
 8005e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d000      	beq.n	8005e88 <prvInitialiseNewTask+0x88>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e86:	601f      	str	r7, [r3, #0]
}
 8005e88:	bce0      	pop	{r5, r6, r7}
 8005e8a:	46bb      	mov	fp, r7
 8005e8c:	46b2      	mov	sl, r6
 8005e8e:	46a9      	mov	r9, r5
 8005e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005e92:	2334      	movs	r3, #52	; 0x34
 8005e94:	2200      	movs	r2, #0
 8005e96:	54fa      	strb	r2, [r7, r3]
 8005e98:	e7d6      	b.n	8005e48 <prvInitialiseNewTask+0x48>
 8005e9a:	46c0      	nop			; (mov r8, r8)
 8005e9c:	3fffffff 	.word	0x3fffffff

08005ea0 <prvInitialiseTaskLists>:
{
 8005ea0:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ea2:	2400      	movs	r4, #0
 8005ea4:	e007      	b.n	8005eb6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ea6:	00a3      	lsls	r3, r4, #2
 8005ea8:	191b      	adds	r3, r3, r4
 8005eaa:	0098      	lsls	r0, r3, #2
 8005eac:	4b0e      	ldr	r3, [pc, #56]	; (8005ee8 <prvInitialiseTaskLists+0x48>)
 8005eae:	18c0      	adds	r0, r0, r3
 8005eb0:	f7ff fc54 	bl	800575c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005eb4:	3401      	adds	r4, #1
 8005eb6:	2c06      	cmp	r4, #6
 8005eb8:	d9f5      	bls.n	8005ea6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8005eba:	4d0c      	ldr	r5, [pc, #48]	; (8005eec <prvInitialiseTaskLists+0x4c>)
 8005ebc:	0028      	movs	r0, r5
 8005ebe:	f7ff fc4d 	bl	800575c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ec2:	4c0b      	ldr	r4, [pc, #44]	; (8005ef0 <prvInitialiseTaskLists+0x50>)
 8005ec4:	0020      	movs	r0, r4
 8005ec6:	f7ff fc49 	bl	800575c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005eca:	480a      	ldr	r0, [pc, #40]	; (8005ef4 <prvInitialiseTaskLists+0x54>)
 8005ecc:	f7ff fc46 	bl	800575c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8005ed0:	4809      	ldr	r0, [pc, #36]	; (8005ef8 <prvInitialiseTaskLists+0x58>)
 8005ed2:	f7ff fc43 	bl	800575c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8005ed6:	4809      	ldr	r0, [pc, #36]	; (8005efc <prvInitialiseTaskLists+0x5c>)
 8005ed8:	f7ff fc40 	bl	800575c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8005edc:	4b08      	ldr	r3, [pc, #32]	; (8005f00 <prvInitialiseTaskLists+0x60>)
 8005ede:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ee0:	4b08      	ldr	r3, [pc, #32]	; (8005f04 <prvInitialiseTaskLists+0x64>)
 8005ee2:	601c      	str	r4, [r3, #0]
}
 8005ee4:	bd70      	pop	{r4, r5, r6, pc}
 8005ee6:	46c0      	nop			; (mov r8, r8)
 8005ee8:	20000a04 	.word	0x20000a04
 8005eec:	20000aa8 	.word	0x20000aa8
 8005ef0:	20000abc 	.word	0x20000abc
 8005ef4:	20000adc 	.word	0x20000adc
 8005ef8:	20000b08 	.word	0x20000b08
 8005efc:	20000af4 	.word	0x20000af4
 8005f00:	200009fc 	.word	0x200009fc
 8005f04:	20000a00 	.word	0x20000a00

08005f08 <prvAddNewTaskToReadyList>:
{
 8005f08:	b510      	push	{r4, lr}
 8005f0a:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 8005f0c:	f000 fd58 	bl	80069c0 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8005f10:	4a1f      	ldr	r2, [pc, #124]	; (8005f90 <prvAddNewTaskToReadyList+0x88>)
 8005f12:	6813      	ldr	r3, [r2, #0]
 8005f14:	3301      	adds	r3, #1
 8005f16:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f18:	4b1e      	ldr	r3, [pc, #120]	; (8005f94 <prvAddNewTaskToReadyList+0x8c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00c      	beq.n	8005f3a <prvAddNewTaskToReadyList+0x32>
			if( xSchedulerRunning == pdFALSE )
 8005f20:	4b1d      	ldr	r3, [pc, #116]	; (8005f98 <prvAddNewTaskToReadyList+0x90>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10d      	bne.n	8005f44 <prvAddNewTaskToReadyList+0x3c>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f28:	4b1a      	ldr	r3, [pc, #104]	; (8005f94 <prvAddNewTaskToReadyList+0x8c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d807      	bhi.n	8005f44 <prvAddNewTaskToReadyList+0x3c>
					pxCurrentTCB = pxNewTCB;
 8005f34:	4b17      	ldr	r3, [pc, #92]	; (8005f94 <prvAddNewTaskToReadyList+0x8c>)
 8005f36:	601c      	str	r4, [r3, #0]
 8005f38:	e004      	b.n	8005f44 <prvAddNewTaskToReadyList+0x3c>
			pxCurrentTCB = pxNewTCB;
 8005f3a:	4b16      	ldr	r3, [pc, #88]	; (8005f94 <prvAddNewTaskToReadyList+0x8c>)
 8005f3c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f3e:	6813      	ldr	r3, [r2, #0]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d01f      	beq.n	8005f84 <prvAddNewTaskToReadyList+0x7c>
		uxTaskNumber++;
 8005f44:	4a15      	ldr	r2, [pc, #84]	; (8005f9c <prvAddNewTaskToReadyList+0x94>)
 8005f46:	6813      	ldr	r3, [r2, #0]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005f4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005f4e:	4a14      	ldr	r2, [pc, #80]	; (8005fa0 <prvAddNewTaskToReadyList+0x98>)
 8005f50:	6812      	ldr	r2, [r2, #0]
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d901      	bls.n	8005f5a <prvAddNewTaskToReadyList+0x52>
 8005f56:	4a12      	ldr	r2, [pc, #72]	; (8005fa0 <prvAddNewTaskToReadyList+0x98>)
 8005f58:	6013      	str	r3, [r2, #0]
 8005f5a:	1d21      	adds	r1, r4, #4
 8005f5c:	0098      	lsls	r0, r3, #2
 8005f5e:	18c0      	adds	r0, r0, r3
 8005f60:	0080      	lsls	r0, r0, #2
 8005f62:	4b10      	ldr	r3, [pc, #64]	; (8005fa4 <prvAddNewTaskToReadyList+0x9c>)
 8005f64:	18c0      	adds	r0, r0, r3
 8005f66:	f7ff fc07 	bl	8005778 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8005f6a:	f000 fd35 	bl	80069d8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8005f6e:	4b0a      	ldr	r3, [pc, #40]	; (8005f98 <prvAddNewTaskToReadyList+0x90>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d005      	beq.n	8005f82 <prvAddNewTaskToReadyList+0x7a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f76:	4b07      	ldr	r3, [pc, #28]	; (8005f94 <prvAddNewTaskToReadyList+0x8c>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d303      	bcc.n	8005f8a <prvAddNewTaskToReadyList+0x82>
}
 8005f82:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8005f84:	f7ff ff8c 	bl	8005ea0 <prvInitialiseTaskLists>
 8005f88:	e7dc      	b.n	8005f44 <prvAddNewTaskToReadyList+0x3c>
			taskYIELD_IF_USING_PREEMPTION();
 8005f8a:	f000 fd0d 	bl	80069a8 <vPortYield>
}
 8005f8e:	e7f8      	b.n	8005f82 <prvAddNewTaskToReadyList+0x7a>
 8005f90:	20000a90 	.word	0x20000a90
 8005f94:	200009f8 	.word	0x200009f8
 8005f98:	20000af0 	.word	0x20000af0
 8005f9c:	20000aa0 	.word	0x20000aa0
 8005fa0:	20000aa4 	.word	0x20000aa4
 8005fa4:	20000a04 	.word	0x20000a04

08005fa8 <prvDeleteTCB>:
	{
 8005fa8:	b510      	push	{r4, lr}
 8005faa:	0004      	movs	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005fac:	2351      	movs	r3, #81	; 0x51
 8005fae:	5cc3      	ldrb	r3, [r0, r3]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d005      	beq.n	8005fc0 <prvDeleteTCB+0x18>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d00a      	beq.n	8005fce <prvDeleteTCB+0x26>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d007      	beq.n	8005fcc <prvDeleteTCB+0x24>
 8005fbc:	b672      	cpsid	i
 8005fbe:	e7fe      	b.n	8005fbe <prvDeleteTCB+0x16>
				vPortFree( pxTCB->pxStack );
 8005fc0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8005fc2:	f000 fe1d 	bl	8006c00 <vPortFree>
				vPortFree( pxTCB );
 8005fc6:	0020      	movs	r0, r4
 8005fc8:	f000 fe1a 	bl	8006c00 <vPortFree>
	}
 8005fcc:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8005fce:	f000 fe17 	bl	8006c00 <vPortFree>
 8005fd2:	e7fb      	b.n	8005fcc <prvDeleteTCB+0x24>

08005fd4 <prvCheckTasksWaitingTermination>:
{
 8005fd4:	b510      	push	{r4, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fd6:	e014      	b.n	8006002 <prvCheckTasksWaitingTermination+0x2e>
			taskENTER_CRITICAL();
 8005fd8:	f000 fcf2 	bl	80069c0 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fdc:	4b0b      	ldr	r3, [pc, #44]	; (800600c <prvCheckTasksWaitingTermination+0x38>)
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fe2:	1d20      	adds	r0, r4, #4
 8005fe4:	f7ff fbea 	bl	80057bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005fe8:	4a09      	ldr	r2, [pc, #36]	; (8006010 <prvCheckTasksWaitingTermination+0x3c>)
 8005fea:	6813      	ldr	r3, [r2, #0]
 8005fec:	3b01      	subs	r3, #1
 8005fee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ff0:	4a08      	ldr	r2, [pc, #32]	; (8006014 <prvCheckTasksWaitingTermination+0x40>)
 8005ff2:	6813      	ldr	r3, [r2, #0]
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8005ff8:	f000 fcee 	bl	80069d8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8005ffc:	0020      	movs	r0, r4
 8005ffe:	f7ff ffd3 	bl	8005fa8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006002:	4b04      	ldr	r3, [pc, #16]	; (8006014 <prvCheckTasksWaitingTermination+0x40>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1e6      	bne.n	8005fd8 <prvCheckTasksWaitingTermination+0x4>
}
 800600a:	bd10      	pop	{r4, pc}
 800600c:	20000b08 	.word	0x20000b08
 8006010:	20000a90 	.word	0x20000a90
 8006014:	20000a94 	.word	0x20000a94

08006018 <prvIdleTask>:
{
 8006018:	b510      	push	{r4, lr}
		prvCheckTasksWaitingTermination();
 800601a:	f7ff ffdb 	bl	8005fd4 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800601e:	4b03      	ldr	r3, [pc, #12]	; (800602c <prvIdleTask+0x14>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d9f9      	bls.n	800601a <prvIdleTask+0x2>
				taskYIELD();
 8006026:	f000 fcbf 	bl	80069a8 <vPortYield>
 800602a:	e7f6      	b.n	800601a <prvIdleTask+0x2>
 800602c:	20000a04 	.word	0x20000a04

08006030 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006030:	b570      	push	{r4, r5, r6, lr}
 8006032:	0004      	movs	r4, r0
 8006034:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006036:	4b17      	ldr	r3, [pc, #92]	; (8006094 <prvAddCurrentTaskToDelayedList+0x64>)
 8006038:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800603a:	4b17      	ldr	r3, [pc, #92]	; (8006098 <prvAddCurrentTaskToDelayedList+0x68>)
 800603c:	6818      	ldr	r0, [r3, #0]
 800603e:	3004      	adds	r0, #4
 8006040:	f7ff fbbc 	bl	80057bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006044:	1c63      	adds	r3, r4, #1
 8006046:	d00d      	beq.n	8006064 <prvAddCurrentTaskToDelayedList+0x34>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006048:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800604a:	4b13      	ldr	r3, [pc, #76]	; (8006098 <prvAddCurrentTaskToDelayedList+0x68>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8006050:	42a6      	cmp	r6, r4
 8006052:	d910      	bls.n	8006076 <prvAddCurrentTaskToDelayedList+0x46>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006054:	4b11      	ldr	r3, [pc, #68]	; (800609c <prvAddCurrentTaskToDelayedList+0x6c>)
 8006056:	6818      	ldr	r0, [r3, #0]
 8006058:	4b0f      	ldr	r3, [pc, #60]	; (8006098 <prvAddCurrentTaskToDelayedList+0x68>)
 800605a:	6819      	ldr	r1, [r3, #0]
 800605c:	3104      	adds	r1, #4
 800605e:	f7ff fb96 	bl	800578e <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006062:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006064:	2d00      	cmp	r5, #0
 8006066:	d0ef      	beq.n	8006048 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006068:	4b0b      	ldr	r3, [pc, #44]	; (8006098 <prvAddCurrentTaskToDelayedList+0x68>)
 800606a:	6819      	ldr	r1, [r3, #0]
 800606c:	3104      	adds	r1, #4
 800606e:	480c      	ldr	r0, [pc, #48]	; (80060a0 <prvAddCurrentTaskToDelayedList+0x70>)
 8006070:	f7ff fb82 	bl	8005778 <vListInsertEnd>
 8006074:	e7f5      	b.n	8006062 <prvAddCurrentTaskToDelayedList+0x32>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006076:	4b0b      	ldr	r3, [pc, #44]	; (80060a4 <prvAddCurrentTaskToDelayedList+0x74>)
 8006078:	6818      	ldr	r0, [r3, #0]
 800607a:	4b07      	ldr	r3, [pc, #28]	; (8006098 <prvAddCurrentTaskToDelayedList+0x68>)
 800607c:	6819      	ldr	r1, [r3, #0]
 800607e:	3104      	adds	r1, #4
 8006080:	f7ff fb85 	bl	800578e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006084:	4b08      	ldr	r3, [pc, #32]	; (80060a8 <prvAddCurrentTaskToDelayedList+0x78>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	42a3      	cmp	r3, r4
 800608a:	d9ea      	bls.n	8006062 <prvAddCurrentTaskToDelayedList+0x32>
					xNextTaskUnblockTime = xTimeToWake;
 800608c:	4b06      	ldr	r3, [pc, #24]	; (80060a8 <prvAddCurrentTaskToDelayedList+0x78>)
 800608e:	601c      	str	r4, [r3, #0]
}
 8006090:	e7e7      	b.n	8006062 <prvAddCurrentTaskToDelayedList+0x32>
 8006092:	46c0      	nop			; (mov r8, r8)
 8006094:	20000b1c 	.word	0x20000b1c
 8006098:	200009f8 	.word	0x200009f8
 800609c:	20000a00 	.word	0x20000a00
 80060a0:	20000af4 	.word	0x20000af4
 80060a4:	200009fc 	.word	0x200009fc
 80060a8:	20000ad4 	.word	0x20000ad4

080060ac <xTaskCreateStatic>:
	{
 80060ac:	b570      	push	{r4, r5, r6, lr}
 80060ae:	b086      	sub	sp, #24
		configASSERT( puxStackBuffer != NULL );
 80060b0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80060b2:	2c00      	cmp	r4, #0
 80060b4:	d009      	beq.n	80060ca <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 80060b6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80060b8:	2c00      	cmp	r4, #0
 80060ba:	d008      	beq.n	80060ce <xTaskCreateStatic+0x22>
			volatile size_t xSize = sizeof( StaticTask_t );
 80060bc:	2454      	movs	r4, #84	; 0x54
 80060be:	9404      	str	r4, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060c0:	9c04      	ldr	r4, [sp, #16]
 80060c2:	2c54      	cmp	r4, #84	; 0x54
 80060c4:	d005      	beq.n	80060d2 <xTaskCreateStatic+0x26>
 80060c6:	b672      	cpsid	i
 80060c8:	e7fe      	b.n	80060c8 <xTaskCreateStatic+0x1c>
		configASSERT( puxStackBuffer != NULL );
 80060ca:	b672      	cpsid	i
 80060cc:	e7fe      	b.n	80060cc <xTaskCreateStatic+0x20>
		configASSERT( pxTaskBuffer != NULL );
 80060ce:	b672      	cpsid	i
 80060d0:	e7fe      	b.n	80060d0 <xTaskCreateStatic+0x24>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060d2:	9c04      	ldr	r4, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060d4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80060d6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80060d8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060da:	2451      	movs	r4, #81	; 0x51
 80060dc:	2502      	movs	r5, #2
 80060de:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80060e0:	5535      	strb	r5, [r6, r4]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060e2:	2400      	movs	r4, #0
 80060e4:	9403      	str	r4, [sp, #12]
 80060e6:	9602      	str	r6, [sp, #8]
 80060e8:	ac05      	add	r4, sp, #20
 80060ea:	9401      	str	r4, [sp, #4]
 80060ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80060ee:	9400      	str	r4, [sp, #0]
 80060f0:	f7ff fe86 	bl	8005e00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80060f6:	f7ff ff07 	bl	8005f08 <prvAddNewTaskToReadyList>
	}
 80060fa:	9805      	ldr	r0, [sp, #20]
 80060fc:	b006      	add	sp, #24
 80060fe:	bd70      	pop	{r4, r5, r6, pc}

08006100 <xTaskCreate>:
	{
 8006100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006102:	b087      	sub	sp, #28
 8006104:	9004      	str	r0, [sp, #16]
 8006106:	9105      	str	r1, [sp, #20]
 8006108:	0016      	movs	r6, r2
 800610a:	001f      	movs	r7, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800610c:	0090      	lsls	r0, r2, #2
 800610e:	f000 fd0f 	bl	8006b30 <pvPortMalloc>
 8006112:	1e04      	subs	r4, r0, #0
			if( pxStack != NULL )
 8006114:	d01f      	beq.n	8006156 <xTaskCreate+0x56>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006116:	2054      	movs	r0, #84	; 0x54
 8006118:	f000 fd0a 	bl	8006b30 <pvPortMalloc>
 800611c:	1e05      	subs	r5, r0, #0
				if( pxNewTCB != NULL )
 800611e:	d016      	beq.n	800614e <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8006120:	6304      	str	r4, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8006122:	2d00      	cmp	r5, #0
 8006124:	d01b      	beq.n	800615e <xTaskCreate+0x5e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006126:	2300      	movs	r3, #0
 8006128:	2251      	movs	r2, #81	; 0x51
 800612a:	54ab      	strb	r3, [r5, r2]
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800612c:	9303      	str	r3, [sp, #12]
 800612e:	9502      	str	r5, [sp, #8]
 8006130:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006132:	9301      	str	r3, [sp, #4]
 8006134:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	003b      	movs	r3, r7
 800613a:	0032      	movs	r2, r6
 800613c:	9905      	ldr	r1, [sp, #20]
 800613e:	9804      	ldr	r0, [sp, #16]
 8006140:	f7ff fe5e 	bl	8005e00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006144:	0028      	movs	r0, r5
 8006146:	f7ff fedf 	bl	8005f08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800614a:	2001      	movs	r0, #1
 800614c:	e005      	b.n	800615a <xTaskCreate+0x5a>
					vPortFree( pxStack );
 800614e:	0020      	movs	r0, r4
 8006150:	f000 fd56 	bl	8006c00 <vPortFree>
 8006154:	e7e5      	b.n	8006122 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006156:	2001      	movs	r0, #1
 8006158:	4240      	negs	r0, r0
	}
 800615a:	b007      	add	sp, #28
 800615c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800615e:	2001      	movs	r0, #1
 8006160:	4240      	negs	r0, r0
		return xReturn;
 8006162:	e7fa      	b.n	800615a <xTaskCreate+0x5a>

08006164 <vTaskStartScheduler>:
{
 8006164:	b510      	push	{r4, lr}
 8006166:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006168:	2400      	movs	r4, #0
 800616a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800616c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800616e:	aa07      	add	r2, sp, #28
 8006170:	a906      	add	r1, sp, #24
 8006172:	a805      	add	r0, sp, #20
 8006174:	f000 feae 	bl	8006ed4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006178:	9b05      	ldr	r3, [sp, #20]
 800617a:	9302      	str	r3, [sp, #8]
 800617c:	9b06      	ldr	r3, [sp, #24]
 800617e:	9301      	str	r3, [sp, #4]
 8006180:	9400      	str	r4, [sp, #0]
 8006182:	2300      	movs	r3, #0
 8006184:	9a07      	ldr	r2, [sp, #28]
 8006186:	490b      	ldr	r1, [pc, #44]	; (80061b4 <vTaskStartScheduler+0x50>)
 8006188:	480b      	ldr	r0, [pc, #44]	; (80061b8 <vTaskStartScheduler+0x54>)
 800618a:	f7ff ff8f 	bl	80060ac <xTaskCreateStatic>
 800618e:	4b0b      	ldr	r3, [pc, #44]	; (80061bc <vTaskStartScheduler+0x58>)
 8006190:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8006192:	2800      	cmp	r0, #0
 8006194:	d00c      	beq.n	80061b0 <vTaskStartScheduler+0x4c>
		portDISABLE_INTERRUPTS();
 8006196:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8006198:	4b09      	ldr	r3, [pc, #36]	; (80061c0 <vTaskStartScheduler+0x5c>)
 800619a:	2201      	movs	r2, #1
 800619c:	4252      	negs	r2, r2
 800619e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061a0:	4b08      	ldr	r3, [pc, #32]	; (80061c4 <vTaskStartScheduler+0x60>)
 80061a2:	3202      	adds	r2, #2
 80061a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80061a6:	4b08      	ldr	r3, [pc, #32]	; (80061c8 <vTaskStartScheduler+0x64>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80061ac:	f000 fbde 	bl	800696c <xPortStartScheduler>
}
 80061b0:	b008      	add	sp, #32
 80061b2:	bd10      	pop	{r4, pc}
 80061b4:	0800e0cc 	.word	0x0800e0cc
 80061b8:	08006019 	.word	0x08006019
 80061bc:	20000ad0 	.word	0x20000ad0
 80061c0:	20000ad4 	.word	0x20000ad4
 80061c4:	20000af0 	.word	0x20000af0
 80061c8:	20000b1c 	.word	0x20000b1c

080061cc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80061cc:	4a02      	ldr	r2, [pc, #8]	; (80061d8 <vTaskSuspendAll+0xc>)
 80061ce:	6813      	ldr	r3, [r2, #0]
 80061d0:	3301      	adds	r3, #1
 80061d2:	6013      	str	r3, [r2, #0]
}
 80061d4:	4770      	bx	lr
 80061d6:	46c0      	nop			; (mov r8, r8)
 80061d8:	20000a9c 	.word	0x20000a9c

080061dc <xTaskIncrementTick>:
{
 80061dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061de:	4b39      	ldr	r3, [pc, #228]	; (80062c4 <xTaskIncrementTick+0xe8>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d161      	bne.n	80062aa <xTaskIncrementTick+0xce>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80061e6:	4b38      	ldr	r3, [pc, #224]	; (80062c8 <xTaskIncrementTick+0xec>)
 80061e8:	681d      	ldr	r5, [r3, #0]
 80061ea:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80061ec:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80061ee:	2d00      	cmp	r5, #0
 80061f0:	d112      	bne.n	8006218 <xTaskIncrementTick+0x3c>
			taskSWITCH_DELAYED_LISTS();
 80061f2:	4b36      	ldr	r3, [pc, #216]	; (80062cc <xTaskIncrementTick+0xf0>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <xTaskIncrementTick+0x24>
 80061fc:	b672      	cpsid	i
 80061fe:	e7fe      	b.n	80061fe <xTaskIncrementTick+0x22>
 8006200:	4a32      	ldr	r2, [pc, #200]	; (80062cc <xTaskIncrementTick+0xf0>)
 8006202:	6811      	ldr	r1, [r2, #0]
 8006204:	4b32      	ldr	r3, [pc, #200]	; (80062d0 <xTaskIncrementTick+0xf4>)
 8006206:	6818      	ldr	r0, [r3, #0]
 8006208:	6010      	str	r0, [r2, #0]
 800620a:	6019      	str	r1, [r3, #0]
 800620c:	4a31      	ldr	r2, [pc, #196]	; (80062d4 <xTaskIncrementTick+0xf8>)
 800620e:	6813      	ldr	r3, [r2, #0]
 8006210:	3301      	adds	r3, #1
 8006212:	6013      	str	r3, [r2, #0]
 8006214:	f7ff fdde 	bl	8005dd4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006218:	4b2f      	ldr	r3, [pc, #188]	; (80062d8 <xTaskIncrementTick+0xfc>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	42ab      	cmp	r3, r5
 800621e:	d93a      	bls.n	8006296 <xTaskIncrementTick+0xba>
BaseType_t xSwitchRequired = pdFALSE;
 8006220:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006222:	4b2e      	ldr	r3, [pc, #184]	; (80062dc <xTaskIncrementTick+0x100>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006228:	0093      	lsls	r3, r2, #2
 800622a:	189b      	adds	r3, r3, r2
 800622c:	009a      	lsls	r2, r3, #2
 800622e:	4b2c      	ldr	r3, [pc, #176]	; (80062e0 <xTaskIncrementTick+0x104>)
 8006230:	58d3      	ldr	r3, [r2, r3]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d93e      	bls.n	80062b4 <xTaskIncrementTick+0xd8>
				xSwitchRequired = pdTRUE;
 8006236:	2701      	movs	r7, #1
 8006238:	e03c      	b.n	80062b4 <xTaskIncrementTick+0xd8>
							xSwitchRequired = pdTRUE;
 800623a:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800623c:	4b23      	ldr	r3, [pc, #140]	; (80062cc <xTaskIncrementTick+0xf0>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d029      	beq.n	800629a <xTaskIncrementTick+0xbe>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006246:	4b21      	ldr	r3, [pc, #132]	; (80062cc <xTaskIncrementTick+0xf0>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800624e:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8006250:	429d      	cmp	r5, r3
 8006252:	d327      	bcc.n	80062a4 <xTaskIncrementTick+0xc8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006254:	1d26      	adds	r6, r4, #4
 8006256:	0030      	movs	r0, r6
 8006258:	f7ff fab0 	bl	80057bc <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800625c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <xTaskIncrementTick+0x8e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006262:	0020      	movs	r0, r4
 8006264:	3018      	adds	r0, #24
 8006266:	f7ff faa9 	bl	80057bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800626a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800626c:	4b1d      	ldr	r3, [pc, #116]	; (80062e4 <xTaskIncrementTick+0x108>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	429a      	cmp	r2, r3
 8006272:	d901      	bls.n	8006278 <xTaskIncrementTick+0x9c>
 8006274:	4b1b      	ldr	r3, [pc, #108]	; (80062e4 <xTaskIncrementTick+0x108>)
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	0093      	lsls	r3, r2, #2
 800627a:	189b      	adds	r3, r3, r2
 800627c:	0098      	lsls	r0, r3, #2
 800627e:	4b18      	ldr	r3, [pc, #96]	; (80062e0 <xTaskIncrementTick+0x104>)
 8006280:	18c0      	adds	r0, r0, r3
 8006282:	0031      	movs	r1, r6
 8006284:	f7ff fa78 	bl	8005778 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006288:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800628a:	4b14      	ldr	r3, [pc, #80]	; (80062dc <xTaskIncrementTick+0x100>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006290:	429a      	cmp	r2, r3
 8006292:	d2d2      	bcs.n	800623a <xTaskIncrementTick+0x5e>
 8006294:	e7d2      	b.n	800623c <xTaskIncrementTick+0x60>
BaseType_t xSwitchRequired = pdFALSE;
 8006296:	2700      	movs	r7, #0
 8006298:	e7d0      	b.n	800623c <xTaskIncrementTick+0x60>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800629a:	4b0f      	ldr	r3, [pc, #60]	; (80062d8 <xTaskIncrementTick+0xfc>)
 800629c:	2201      	movs	r2, #1
 800629e:	4252      	negs	r2, r2
 80062a0:	601a      	str	r2, [r3, #0]
					break;
 80062a2:	e7be      	b.n	8006222 <xTaskIncrementTick+0x46>
						xNextTaskUnblockTime = xItemValue;
 80062a4:	4a0c      	ldr	r2, [pc, #48]	; (80062d8 <xTaskIncrementTick+0xfc>)
 80062a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80062a8:	e7bb      	b.n	8006222 <xTaskIncrementTick+0x46>
		++uxPendedTicks;
 80062aa:	4a0f      	ldr	r2, [pc, #60]	; (80062e8 <xTaskIncrementTick+0x10c>)
 80062ac:	6813      	ldr	r3, [r2, #0]
 80062ae:	3301      	adds	r3, #1
 80062b0:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80062b2:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 80062b4:	4b0d      	ldr	r3, [pc, #52]	; (80062ec <xTaskIncrementTick+0x110>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d000      	beq.n	80062be <xTaskIncrementTick+0xe2>
			xSwitchRequired = pdTRUE;
 80062bc:	2701      	movs	r7, #1
}
 80062be:	0038      	movs	r0, r7
 80062c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062c2:	46c0      	nop			; (mov r8, r8)
 80062c4:	20000a9c 	.word	0x20000a9c
 80062c8:	20000b1c 	.word	0x20000b1c
 80062cc:	200009fc 	.word	0x200009fc
 80062d0:	20000a00 	.word	0x20000a00
 80062d4:	20000ad8 	.word	0x20000ad8
 80062d8:	20000ad4 	.word	0x20000ad4
 80062dc:	200009f8 	.word	0x200009f8
 80062e0:	20000a04 	.word	0x20000a04
 80062e4:	20000aa4 	.word	0x20000aa4
 80062e8:	20000a98 	.word	0x20000a98
 80062ec:	20000b20 	.word	0x20000b20

080062f0 <xTaskResumeAll>:
{
 80062f0:	b570      	push	{r4, r5, r6, lr}
	configASSERT( uxSchedulerSuspended );
 80062f2:	4b31      	ldr	r3, [pc, #196]	; (80063b8 <xTaskResumeAll+0xc8>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <xTaskResumeAll+0xe>
 80062fa:	b672      	cpsid	i
 80062fc:	e7fe      	b.n	80062fc <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 80062fe:	f000 fb5f 	bl	80069c0 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006302:	4b2d      	ldr	r3, [pc, #180]	; (80063b8 <xTaskResumeAll+0xc8>)
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	3a01      	subs	r2, #1
 8006308:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d14d      	bne.n	80063ac <xTaskResumeAll+0xbc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006310:	4b2a      	ldr	r3, [pc, #168]	; (80063bc <xTaskResumeAll+0xcc>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <xTaskResumeAll+0x2c>
BaseType_t xAlreadyYielded = pdFALSE;
 8006318:	2400      	movs	r4, #0
 800631a:	e048      	b.n	80063ae <xTaskResumeAll+0xbe>
TCB_t *pxTCB = NULL;
 800631c:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800631e:	4b28      	ldr	r3, [pc, #160]	; (80063c0 <xTaskResumeAll+0xd0>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d023      	beq.n	800636e <xTaskResumeAll+0x7e>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006326:	4b26      	ldr	r3, [pc, #152]	; (80063c0 <xTaskResumeAll+0xd0>)
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800632c:	0020      	movs	r0, r4
 800632e:	3018      	adds	r0, #24
 8006330:	f7ff fa44 	bl	80057bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006334:	1d25      	adds	r5, r4, #4
 8006336:	0028      	movs	r0, r5
 8006338:	f7ff fa40 	bl	80057bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800633c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800633e:	4a21      	ldr	r2, [pc, #132]	; (80063c4 <xTaskResumeAll+0xd4>)
 8006340:	6812      	ldr	r2, [r2, #0]
 8006342:	4293      	cmp	r3, r2
 8006344:	d901      	bls.n	800634a <xTaskResumeAll+0x5a>
 8006346:	4a1f      	ldr	r2, [pc, #124]	; (80063c4 <xTaskResumeAll+0xd4>)
 8006348:	6013      	str	r3, [r2, #0]
 800634a:	0098      	lsls	r0, r3, #2
 800634c:	18c0      	adds	r0, r0, r3
 800634e:	0080      	lsls	r0, r0, #2
 8006350:	4b1d      	ldr	r3, [pc, #116]	; (80063c8 <xTaskResumeAll+0xd8>)
 8006352:	18c0      	adds	r0, r0, r3
 8006354:	0029      	movs	r1, r5
 8006356:	f7ff fa0f 	bl	8005778 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800635a:	4b1c      	ldr	r3, [pc, #112]	; (80063cc <xTaskResumeAll+0xdc>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006360:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006362:	429a      	cmp	r2, r3
 8006364:	d3db      	bcc.n	800631e <xTaskResumeAll+0x2e>
						xYieldPending = pdTRUE;
 8006366:	4b1a      	ldr	r3, [pc, #104]	; (80063d0 <xTaskResumeAll+0xe0>)
 8006368:	2201      	movs	r2, #1
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	e7d7      	b.n	800631e <xTaskResumeAll+0x2e>
				if( pxTCB != NULL )
 800636e:	2c00      	cmp	r4, #0
 8006370:	d001      	beq.n	8006376 <xTaskResumeAll+0x86>
					prvResetNextTaskUnblockTime();
 8006372:	f7ff fd2f 	bl	8005dd4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006376:	4b17      	ldr	r3, [pc, #92]	; (80063d4 <xTaskResumeAll+0xe4>)
 8006378:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800637a:	2c00      	cmp	r4, #0
 800637c:	d10a      	bne.n	8006394 <xTaskResumeAll+0xa4>
				if( xYieldPending != pdFALSE )
 800637e:	4b14      	ldr	r3, [pc, #80]	; (80063d0 <xTaskResumeAll+0xe0>)
 8006380:	681c      	ldr	r4, [r3, #0]
 8006382:	2c00      	cmp	r4, #0
 8006384:	d013      	beq.n	80063ae <xTaskResumeAll+0xbe>
					taskYIELD_IF_USING_PREEMPTION();
 8006386:	f000 fb0f 	bl	80069a8 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800638a:	2401      	movs	r4, #1
 800638c:	e00f      	b.n	80063ae <xTaskResumeAll+0xbe>
							--uxPendedCounts;
 800638e:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006390:	2c00      	cmp	r4, #0
 8006392:	d007      	beq.n	80063a4 <xTaskResumeAll+0xb4>
							if( xTaskIncrementTick() != pdFALSE )
 8006394:	f7ff ff22 	bl	80061dc <xTaskIncrementTick>
 8006398:	2800      	cmp	r0, #0
 800639a:	d0f8      	beq.n	800638e <xTaskResumeAll+0x9e>
								xYieldPending = pdTRUE;
 800639c:	4b0c      	ldr	r3, [pc, #48]	; (80063d0 <xTaskResumeAll+0xe0>)
 800639e:	2201      	movs	r2, #1
 80063a0:	601a      	str	r2, [r3, #0]
 80063a2:	e7f4      	b.n	800638e <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 80063a4:	4b0b      	ldr	r3, [pc, #44]	; (80063d4 <xTaskResumeAll+0xe4>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	601a      	str	r2, [r3, #0]
 80063aa:	e7e8      	b.n	800637e <xTaskResumeAll+0x8e>
BaseType_t xAlreadyYielded = pdFALSE;
 80063ac:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80063ae:	f000 fb13 	bl	80069d8 <vPortExitCritical>
}
 80063b2:	0020      	movs	r0, r4
 80063b4:	bd70      	pop	{r4, r5, r6, pc}
 80063b6:	46c0      	nop			; (mov r8, r8)
 80063b8:	20000a9c 	.word	0x20000a9c
 80063bc:	20000a90 	.word	0x20000a90
 80063c0:	20000adc 	.word	0x20000adc
 80063c4:	20000aa4 	.word	0x20000aa4
 80063c8:	20000a04 	.word	0x20000a04
 80063cc:	200009f8 	.word	0x200009f8
 80063d0:	20000b20 	.word	0x20000b20
 80063d4:	20000a98 	.word	0x20000a98

080063d8 <vTaskDelay>:
	{
 80063d8:	b510      	push	{r4, lr}
 80063da:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 80063dc:	d00f      	beq.n	80063fe <vTaskDelay+0x26>
			configASSERT( uxSchedulerSuspended == 0 );
 80063de:	4b09      	ldr	r3, [pc, #36]	; (8006404 <vTaskDelay+0x2c>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <vTaskDelay+0x12>
 80063e6:	b672      	cpsid	i
 80063e8:	e7fe      	b.n	80063e8 <vTaskDelay+0x10>
			vTaskSuspendAll();
 80063ea:	f7ff feef 	bl	80061cc <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80063ee:	2100      	movs	r1, #0
 80063f0:	0020      	movs	r0, r4
 80063f2:	f7ff fe1d 	bl	8006030 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80063f6:	f7ff ff7b 	bl	80062f0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80063fa:	2800      	cmp	r0, #0
 80063fc:	d101      	bne.n	8006402 <vTaskDelay+0x2a>
			portYIELD_WITHIN_API();
 80063fe:	f000 fad3 	bl	80069a8 <vPortYield>
	}
 8006402:	bd10      	pop	{r4, pc}
 8006404:	20000a9c 	.word	0x20000a9c

08006408 <vTaskSwitchContext>:
{
 8006408:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800640a:	4b1c      	ldr	r3, [pc, #112]	; (800647c <vTaskSwitchContext+0x74>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d003      	beq.n	800641a <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8006412:	4b1b      	ldr	r3, [pc, #108]	; (8006480 <vTaskSwitchContext+0x78>)
 8006414:	2201      	movs	r2, #1
 8006416:	601a      	str	r2, [r3, #0]
}
 8006418:	bd30      	pop	{r4, r5, pc}
		xYieldPending = pdFALSE;
 800641a:	4b19      	ldr	r3, [pc, #100]	; (8006480 <vTaskSwitchContext+0x78>)
 800641c:	2200      	movs	r2, #0
 800641e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006420:	4b18      	ldr	r3, [pc, #96]	; (8006484 <vTaskSwitchContext+0x7c>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	009a      	lsls	r2, r3, #2
 8006426:	18d2      	adds	r2, r2, r3
 8006428:	0091      	lsls	r1, r2, #2
 800642a:	4a17      	ldr	r2, [pc, #92]	; (8006488 <vTaskSwitchContext+0x80>)
 800642c:	588a      	ldr	r2, [r1, r2]
 800642e:	2a00      	cmp	r2, #0
 8006430:	d105      	bne.n	800643e <vTaskSwitchContext+0x36>
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <vTaskSwitchContext+0x32>
 8006436:	3b01      	subs	r3, #1
 8006438:	e7f4      	b.n	8006424 <vTaskSwitchContext+0x1c>
 800643a:	b672      	cpsid	i
 800643c:	e7fe      	b.n	800643c <vTaskSwitchContext+0x34>
 800643e:	4d12      	ldr	r5, [pc, #72]	; (8006488 <vTaskSwitchContext+0x80>)
 8006440:	0099      	lsls	r1, r3, #2
 8006442:	18ca      	adds	r2, r1, r3
 8006444:	0090      	lsls	r0, r2, #2
 8006446:	1828      	adds	r0, r5, r0
 8006448:	6842      	ldr	r2, [r0, #4]
 800644a:	6854      	ldr	r4, [r2, #4]
 800644c:	6044      	str	r4, [r0, #4]
 800644e:	18c9      	adds	r1, r1, r3
 8006450:	008a      	lsls	r2, r1, #2
 8006452:	3208      	adds	r2, #8
 8006454:	1952      	adds	r2, r2, r5
 8006456:	4294      	cmp	r4, r2
 8006458:	d00b      	beq.n	8006472 <vTaskSwitchContext+0x6a>
 800645a:	009a      	lsls	r2, r3, #2
 800645c:	18d2      	adds	r2, r2, r3
 800645e:	0091      	lsls	r1, r2, #2
 8006460:	4a09      	ldr	r2, [pc, #36]	; (8006488 <vTaskSwitchContext+0x80>)
 8006462:	1852      	adds	r2, r2, r1
 8006464:	6852      	ldr	r2, [r2, #4]
 8006466:	68d1      	ldr	r1, [r2, #12]
 8006468:	4a08      	ldr	r2, [pc, #32]	; (800648c <vTaskSwitchContext+0x84>)
 800646a:	6011      	str	r1, [r2, #0]
 800646c:	4a05      	ldr	r2, [pc, #20]	; (8006484 <vTaskSwitchContext+0x7c>)
 800646e:	6013      	str	r3, [r2, #0]
}
 8006470:	e7d2      	b.n	8006418 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006472:	6860      	ldr	r0, [r4, #4]
 8006474:	0089      	lsls	r1, r1, #2
 8006476:	186a      	adds	r2, r5, r1
 8006478:	6050      	str	r0, [r2, #4]
 800647a:	e7ee      	b.n	800645a <vTaskSwitchContext+0x52>
 800647c:	20000a9c 	.word	0x20000a9c
 8006480:	20000b20 	.word	0x20000b20
 8006484:	20000aa4 	.word	0x20000aa4
 8006488:	20000a04 	.word	0x20000a04
 800648c:	200009f8 	.word	0x200009f8

08006490 <vTaskPlaceOnEventList>:
{
 8006490:	b510      	push	{r4, lr}
 8006492:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 8006494:	2800      	cmp	r0, #0
 8006496:	d009      	beq.n	80064ac <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006498:	4b05      	ldr	r3, [pc, #20]	; (80064b0 <vTaskPlaceOnEventList+0x20>)
 800649a:	6819      	ldr	r1, [r3, #0]
 800649c:	3118      	adds	r1, #24
 800649e:	f7ff f976 	bl	800578e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80064a2:	2101      	movs	r1, #1
 80064a4:	0020      	movs	r0, r4
 80064a6:	f7ff fdc3 	bl	8006030 <prvAddCurrentTaskToDelayedList>
}
 80064aa:	bd10      	pop	{r4, pc}
	configASSERT( pxEventList );
 80064ac:	b672      	cpsid	i
 80064ae:	e7fe      	b.n	80064ae <vTaskPlaceOnEventList+0x1e>
 80064b0:	200009f8 	.word	0x200009f8

080064b4 <xTaskRemoveFromEventList>:
{
 80064b4:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064b6:	68c3      	ldr	r3, [r0, #12]
 80064b8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80064ba:	2c00      	cmp	r4, #0
 80064bc:	d026      	beq.n	800650c <xTaskRemoveFromEventList+0x58>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80064be:	0025      	movs	r5, r4
 80064c0:	3518      	adds	r5, #24
 80064c2:	0028      	movs	r0, r5
 80064c4:	f7ff f97a 	bl	80057bc <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064c8:	4b15      	ldr	r3, [pc, #84]	; (8006520 <xTaskRemoveFromEventList+0x6c>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d11f      	bne.n	8006510 <xTaskRemoveFromEventList+0x5c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80064d0:	1d25      	adds	r5, r4, #4
 80064d2:	0028      	movs	r0, r5
 80064d4:	f7ff f972 	bl	80057bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80064d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80064da:	4a12      	ldr	r2, [pc, #72]	; (8006524 <xTaskRemoveFromEventList+0x70>)
 80064dc:	6812      	ldr	r2, [r2, #0]
 80064de:	4293      	cmp	r3, r2
 80064e0:	d901      	bls.n	80064e6 <xTaskRemoveFromEventList+0x32>
 80064e2:	4a10      	ldr	r2, [pc, #64]	; (8006524 <xTaskRemoveFromEventList+0x70>)
 80064e4:	6013      	str	r3, [r2, #0]
 80064e6:	0098      	lsls	r0, r3, #2
 80064e8:	18c0      	adds	r0, r0, r3
 80064ea:	0080      	lsls	r0, r0, #2
 80064ec:	4b0e      	ldr	r3, [pc, #56]	; (8006528 <xTaskRemoveFromEventList+0x74>)
 80064ee:	18c0      	adds	r0, r0, r3
 80064f0:	0029      	movs	r1, r5
 80064f2:	f7ff f941 	bl	8005778 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80064f8:	4b0c      	ldr	r3, [pc, #48]	; (800652c <xTaskRemoveFromEventList+0x78>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fe:	429a      	cmp	r2, r3
 8006500:	d90b      	bls.n	800651a <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 8006502:	4b0b      	ldr	r3, [pc, #44]	; (8006530 <xTaskRemoveFromEventList+0x7c>)
 8006504:	2201      	movs	r2, #1
 8006506:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 8006508:	2001      	movs	r0, #1
}
 800650a:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
 800650c:	b672      	cpsid	i
 800650e:	e7fe      	b.n	800650e <xTaskRemoveFromEventList+0x5a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006510:	0029      	movs	r1, r5
 8006512:	4808      	ldr	r0, [pc, #32]	; (8006534 <xTaskRemoveFromEventList+0x80>)
 8006514:	f7ff f930 	bl	8005778 <vListInsertEnd>
 8006518:	e7ed      	b.n	80064f6 <xTaskRemoveFromEventList+0x42>
		xReturn = pdFALSE;
 800651a:	2000      	movs	r0, #0
	return xReturn;
 800651c:	e7f5      	b.n	800650a <xTaskRemoveFromEventList+0x56>
 800651e:	46c0      	nop			; (mov r8, r8)
 8006520:	20000a9c 	.word	0x20000a9c
 8006524:	20000aa4 	.word	0x20000aa4
 8006528:	20000a04 	.word	0x20000a04
 800652c:	200009f8 	.word	0x200009f8
 8006530:	20000b20 	.word	0x20000b20
 8006534:	20000adc 	.word	0x20000adc

08006538 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006538:	4b03      	ldr	r3, [pc, #12]	; (8006548 <vTaskInternalSetTimeOutState+0x10>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800653e:	4b03      	ldr	r3, [pc, #12]	; (800654c <vTaskInternalSetTimeOutState+0x14>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6043      	str	r3, [r0, #4]
}
 8006544:	4770      	bx	lr
 8006546:	46c0      	nop			; (mov r8, r8)
 8006548:	20000ad8 	.word	0x20000ad8
 800654c:	20000b1c 	.word	0x20000b1c

08006550 <xTaskCheckForTimeOut>:
{
 8006550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006552:	0004      	movs	r4, r0
 8006554:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
 8006556:	2800      	cmp	r0, #0
 8006558:	d017      	beq.n	800658a <xTaskCheckForTimeOut+0x3a>
	configASSERT( pxTicksToWait );
 800655a:	2900      	cmp	r1, #0
 800655c:	d017      	beq.n	800658e <xTaskCheckForTimeOut+0x3e>
	taskENTER_CRITICAL();
 800655e:	f000 fa2f 	bl	80069c0 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8006562:	4b13      	ldr	r3, [pc, #76]	; (80065b0 <xTaskCheckForTimeOut+0x60>)
 8006564:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006566:	6863      	ldr	r3, [r4, #4]
 8006568:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800656a:	682a      	ldr	r2, [r5, #0]
 800656c:	1c56      	adds	r6, r2, #1
 800656e:	d018      	beq.n	80065a2 <xTaskCheckForTimeOut+0x52>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006570:	4e10      	ldr	r6, [pc, #64]	; (80065b4 <xTaskCheckForTimeOut+0x64>)
 8006572:	6836      	ldr	r6, [r6, #0]
 8006574:	6827      	ldr	r7, [r4, #0]
 8006576:	42b7      	cmp	r7, r6
 8006578:	d001      	beq.n	800657e <xTaskCheckForTimeOut+0x2e>
 800657a:	428b      	cmp	r3, r1
 800657c:	d916      	bls.n	80065ac <xTaskCheckForTimeOut+0x5c>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800657e:	4282      	cmp	r2, r0
 8006580:	d807      	bhi.n	8006592 <xTaskCheckForTimeOut+0x42>
			*pxTicksToWait = 0;
 8006582:	2300      	movs	r3, #0
 8006584:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8006586:	2401      	movs	r4, #1
 8006588:	e00c      	b.n	80065a4 <xTaskCheckForTimeOut+0x54>
	configASSERT( pxTimeOut );
 800658a:	b672      	cpsid	i
 800658c:	e7fe      	b.n	800658c <xTaskCheckForTimeOut+0x3c>
	configASSERT( pxTicksToWait );
 800658e:	b672      	cpsid	i
 8006590:	e7fe      	b.n	8006590 <xTaskCheckForTimeOut+0x40>
			*pxTicksToWait -= xElapsedTime;
 8006592:	1a5b      	subs	r3, r3, r1
 8006594:	189b      	adds	r3, r3, r2
 8006596:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006598:	0020      	movs	r0, r4
 800659a:	f7ff ffcd 	bl	8006538 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800659e:	2400      	movs	r4, #0
 80065a0:	e000      	b.n	80065a4 <xTaskCheckForTimeOut+0x54>
				xReturn = pdFALSE;
 80065a2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80065a4:	f000 fa18 	bl	80069d8 <vPortExitCritical>
}
 80065a8:	0020      	movs	r0, r4
 80065aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 80065ac:	2401      	movs	r4, #1
 80065ae:	e7f9      	b.n	80065a4 <xTaskCheckForTimeOut+0x54>
 80065b0:	20000b1c 	.word	0x20000b1c
 80065b4:	20000ad8 	.word	0x20000ad8

080065b8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80065b8:	4b01      	ldr	r3, [pc, #4]	; (80065c0 <vTaskMissedYield+0x8>)
 80065ba:	2201      	movs	r2, #1
 80065bc:	601a      	str	r2, [r3, #0]
}
 80065be:	4770      	bx	lr
 80065c0:	20000b20 	.word	0x20000b20

080065c4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80065c4:	4b06      	ldr	r3, [pc, #24]	; (80065e0 <xTaskGetSchedulerState+0x1c>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d007      	beq.n	80065dc <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065cc:	4b05      	ldr	r3, [pc, #20]	; (80065e4 <xTaskGetSchedulerState+0x20>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d001      	beq.n	80065d8 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 80065d4:	2000      	movs	r0, #0
		return xReturn;
 80065d6:	e002      	b.n	80065de <xTaskGetSchedulerState+0x1a>
				xReturn = taskSCHEDULER_RUNNING;
 80065d8:	2002      	movs	r0, #2
 80065da:	e000      	b.n	80065de <xTaskGetSchedulerState+0x1a>
			xReturn = taskSCHEDULER_NOT_STARTED;
 80065dc:	2001      	movs	r0, #1
	}
 80065de:	4770      	bx	lr
 80065e0:	20000af0 	.word	0x20000af0
 80065e4:	20000a9c 	.word	0x20000a9c

080065e8 <xTaskPriorityDisinherit>:
	{
 80065e8:	b570      	push	{r4, r5, r6, lr}
 80065ea:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 80065ec:	d02d      	beq.n	800664a <xTaskPriorityDisinherit+0x62>
			configASSERT( pxTCB == pxCurrentTCB );
 80065ee:	4b19      	ldr	r3, [pc, #100]	; (8006654 <xTaskPriorityDisinherit+0x6c>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4283      	cmp	r3, r0
 80065f4:	d001      	beq.n	80065fa <xTaskPriorityDisinherit+0x12>
 80065f6:	b672      	cpsid	i
 80065f8:	e7fe      	b.n	80065f8 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 80065fa:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <xTaskPriorityDisinherit+0x1c>
 8006600:	b672      	cpsid	i
 8006602:	e7fe      	b.n	8006602 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 8006604:	3b01      	subs	r3, #1
 8006606:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006608:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800660a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800660c:	428a      	cmp	r2, r1
 800660e:	d01e      	beq.n	800664e <xTaskPriorityDisinherit+0x66>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006610:	2b00      	cmp	r3, #0
 8006612:	d001      	beq.n	8006618 <xTaskPriorityDisinherit+0x30>
	BaseType_t xReturn = pdFALSE;
 8006614:	2000      	movs	r0, #0
		return xReturn;
 8006616:	e019      	b.n	800664c <xTaskPriorityDisinherit+0x64>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006618:	1d05      	adds	r5, r0, #4
 800661a:	0028      	movs	r0, r5
 800661c:	f7ff f8ce 	bl	80057bc <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006620:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006622:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006624:	2207      	movs	r2, #7
 8006626:	1ad2      	subs	r2, r2, r3
 8006628:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800662a:	4a0b      	ldr	r2, [pc, #44]	; (8006658 <xTaskPriorityDisinherit+0x70>)
 800662c:	6812      	ldr	r2, [r2, #0]
 800662e:	4293      	cmp	r3, r2
 8006630:	d901      	bls.n	8006636 <xTaskPriorityDisinherit+0x4e>
 8006632:	4a09      	ldr	r2, [pc, #36]	; (8006658 <xTaskPriorityDisinherit+0x70>)
 8006634:	6013      	str	r3, [r2, #0]
 8006636:	0098      	lsls	r0, r3, #2
 8006638:	18c0      	adds	r0, r0, r3
 800663a:	0080      	lsls	r0, r0, #2
 800663c:	4b07      	ldr	r3, [pc, #28]	; (800665c <xTaskPriorityDisinherit+0x74>)
 800663e:	18c0      	adds	r0, r0, r3
 8006640:	0029      	movs	r1, r5
 8006642:	f7ff f899 	bl	8005778 <vListInsertEnd>
					xReturn = pdTRUE;
 8006646:	2001      	movs	r0, #1
 8006648:	e000      	b.n	800664c <xTaskPriorityDisinherit+0x64>
	BaseType_t xReturn = pdFALSE;
 800664a:	2000      	movs	r0, #0
	}
 800664c:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 800664e:	2000      	movs	r0, #0
 8006650:	e7fc      	b.n	800664c <xTaskPriorityDisinherit+0x64>
 8006652:	46c0      	nop			; (mov r8, r8)
 8006654:	200009f8 	.word	0x200009f8
 8006658:	20000aa4 	.word	0x20000aa4
 800665c:	20000a04 	.word	0x20000a04

08006660 <xTaskNotifyWait>:
	{
 8006660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006662:	0006      	movs	r6, r0
 8006664:	000f      	movs	r7, r1
 8006666:	0014      	movs	r4, r2
 8006668:	001d      	movs	r5, r3
		taskENTER_CRITICAL();
 800666a:	f000 f9a9 	bl	80069c0 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800666e:	4b1c      	ldr	r3, [pc, #112]	; (80066e0 <xTaskNotifyWait+0x80>)
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	2350      	movs	r3, #80	; 0x50
 8006674:	5cd3      	ldrb	r3, [r2, r3]
 8006676:	2b02      	cmp	r3, #2
 8006678:	d00a      	beq.n	8006690 <xTaskNotifyWait+0x30>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800667a:	4a19      	ldr	r2, [pc, #100]	; (80066e0 <xTaskNotifyWait+0x80>)
 800667c:	6811      	ldr	r1, [r2, #0]
 800667e:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8006680:	43b3      	bics	r3, r6
 8006682:	64cb      	str	r3, [r1, #76]	; 0x4c
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006684:	6812      	ldr	r2, [r2, #0]
 8006686:	2350      	movs	r3, #80	; 0x50
 8006688:	2101      	movs	r1, #1
 800668a:	54d1      	strb	r1, [r2, r3]
				if( xTicksToWait > ( TickType_t ) 0 )
 800668c:	2d00      	cmp	r5, #0
 800668e:	d119      	bne.n	80066c4 <xTaskNotifyWait+0x64>
		taskEXIT_CRITICAL();
 8006690:	f000 f9a2 	bl	80069d8 <vPortExitCritical>
		taskENTER_CRITICAL();
 8006694:	f000 f994 	bl	80069c0 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 8006698:	2c00      	cmp	r4, #0
 800669a:	d003      	beq.n	80066a4 <xTaskNotifyWait+0x44>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800669c:	4b10      	ldr	r3, [pc, #64]	; (80066e0 <xTaskNotifyWait+0x80>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a2:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80066a4:	4b0e      	ldr	r3, [pc, #56]	; (80066e0 <xTaskNotifyWait+0x80>)
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	2350      	movs	r3, #80	; 0x50
 80066aa:	5cd3      	ldrb	r3, [r2, r3]
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d00f      	beq.n	80066d0 <xTaskNotifyWait+0x70>
				xReturn = pdFALSE;
 80066b0:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80066b2:	4b0b      	ldr	r3, [pc, #44]	; (80066e0 <xTaskNotifyWait+0x80>)
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	2350      	movs	r3, #80	; 0x50
 80066b8:	2100      	movs	r1, #0
 80066ba:	54d1      	strb	r1, [r2, r3]
		taskEXIT_CRITICAL();
 80066bc:	f000 f98c 	bl	80069d8 <vPortExitCritical>
	}
 80066c0:	0020      	movs	r0, r4
 80066c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80066c4:	0028      	movs	r0, r5
 80066c6:	f7ff fcb3 	bl	8006030 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 80066ca:	f000 f96d 	bl	80069a8 <vPortYield>
 80066ce:	e7df      	b.n	8006690 <xTaskNotifyWait+0x30>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80066d0:	4b03      	ldr	r3, [pc, #12]	; (80066e0 <xTaskNotifyWait+0x80>)
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80066d6:	43bb      	bics	r3, r7
 80066d8:	64d3      	str	r3, [r2, #76]	; 0x4c
				xReturn = pdTRUE;
 80066da:	2401      	movs	r4, #1
 80066dc:	e7e9      	b.n	80066b2 <xTaskNotifyWait+0x52>
 80066de:	46c0      	nop			; (mov r8, r8)
 80066e0:	200009f8 	.word	0x200009f8

080066e4 <xTaskGenericNotify>:
	{
 80066e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e6:	0004      	movs	r4, r0
 80066e8:	000e      	movs	r6, r1
 80066ea:	0015      	movs	r5, r2
 80066ec:	001f      	movs	r7, r3
		configASSERT( xTaskToNotify );
 80066ee:	2800      	cmp	r0, #0
 80066f0:	d010      	beq.n	8006714 <xTaskGenericNotify+0x30>
		taskENTER_CRITICAL();
 80066f2:	f000 f965 	bl	80069c0 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 80066f6:	2f00      	cmp	r7, #0
 80066f8:	d001      	beq.n	80066fe <xTaskGenericNotify+0x1a>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80066fa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80066fc:	603b      	str	r3, [r7, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80066fe:	2250      	movs	r2, #80	; 0x50
 8006700:	5ca3      	ldrb	r3, [r4, r2]
 8006702:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006704:	2102      	movs	r1, #2
 8006706:	54a1      	strb	r1, [r4, r2]
			switch( eAction )
 8006708:	2d04      	cmp	r5, #4
 800670a:	d817      	bhi.n	800673c <xTaskGenericNotify+0x58>
 800670c:	00ad      	lsls	r5, r5, #2
 800670e:	4a24      	ldr	r2, [pc, #144]	; (80067a0 <xTaskGenericNotify+0xbc>)
 8006710:	5952      	ldr	r2, [r2, r5]
 8006712:	4697      	mov	pc, r2
		configASSERT( xTaskToNotify );
 8006714:	b672      	cpsid	i
 8006716:	e7fe      	b.n	8006716 <xTaskGenericNotify+0x32>
					pxTCB->ulNotifiedValue |= ulValue;
 8006718:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800671a:	4316      	orrs	r6, r2
 800671c:	64e6      	str	r6, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 800671e:	2501      	movs	r5, #1
					break;
 8006720:	e012      	b.n	8006748 <xTaskGenericNotify+0x64>
					( pxTCB->ulNotifiedValue )++;
 8006722:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006724:	3201      	adds	r2, #1
 8006726:	64e2      	str	r2, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 8006728:	2501      	movs	r5, #1
					break;
 800672a:	e00d      	b.n	8006748 <xTaskGenericNotify+0x64>
					pxTCB->ulNotifiedValue = ulValue;
 800672c:	64e6      	str	r6, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 800672e:	2501      	movs	r5, #1
					break;
 8006730:	e00a      	b.n	8006748 <xTaskGenericNotify+0x64>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006732:	2b02      	cmp	r3, #2
 8006734:	d00e      	beq.n	8006754 <xTaskGenericNotify+0x70>
						pxTCB->ulNotifiedValue = ulValue;
 8006736:	64e6      	str	r6, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 8006738:	2501      	movs	r5, #1
 800673a:	e005      	b.n	8006748 <xTaskGenericNotify+0x64>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800673c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800673e:	3201      	adds	r2, #1
 8006740:	d00a      	beq.n	8006758 <xTaskGenericNotify+0x74>
 8006742:	b672      	cpsid	i
 8006744:	e7fe      	b.n	8006744 <xTaskGenericNotify+0x60>
			switch( eAction )
 8006746:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006748:	2b01      	cmp	r3, #1
 800674a:	d007      	beq.n	800675c <xTaskGenericNotify+0x78>
		taskEXIT_CRITICAL();
 800674c:	f000 f944 	bl	80069d8 <vPortExitCritical>
	}
 8006750:	0028      	movs	r0, r5
 8006752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xReturn = pdFAIL;
 8006754:	2500      	movs	r5, #0
 8006756:	e7f7      	b.n	8006748 <xTaskGenericNotify+0x64>
	BaseType_t xReturn = pdPASS;
 8006758:	2501      	movs	r5, #1
 800675a:	e7f5      	b.n	8006748 <xTaskGenericNotify+0x64>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800675c:	1d26      	adds	r6, r4, #4
 800675e:	0030      	movs	r0, r6
 8006760:	f7ff f82c 	bl	80057bc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006764:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006766:	4a0f      	ldr	r2, [pc, #60]	; (80067a4 <xTaskGenericNotify+0xc0>)
 8006768:	6812      	ldr	r2, [r2, #0]
 800676a:	4293      	cmp	r3, r2
 800676c:	d901      	bls.n	8006772 <xTaskGenericNotify+0x8e>
 800676e:	4a0d      	ldr	r2, [pc, #52]	; (80067a4 <xTaskGenericNotify+0xc0>)
 8006770:	6013      	str	r3, [r2, #0]
 8006772:	0098      	lsls	r0, r3, #2
 8006774:	18c0      	adds	r0, r0, r3
 8006776:	0080      	lsls	r0, r0, #2
 8006778:	4b0b      	ldr	r3, [pc, #44]	; (80067a8 <xTaskGenericNotify+0xc4>)
 800677a:	18c0      	adds	r0, r0, r3
 800677c:	0031      	movs	r1, r6
 800677e:	f7fe fffb 	bl	8005778 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006782:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006784:	2b00      	cmp	r3, #0
 8006786:	d001      	beq.n	800678c <xTaskGenericNotify+0xa8>
 8006788:	b672      	cpsid	i
 800678a:	e7fe      	b.n	800678a <xTaskGenericNotify+0xa6>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800678c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800678e:	4b07      	ldr	r3, [pc, #28]	; (80067ac <xTaskGenericNotify+0xc8>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006794:	429a      	cmp	r2, r3
 8006796:	d9d9      	bls.n	800674c <xTaskGenericNotify+0x68>
					taskYIELD_IF_USING_PREEMPTION();
 8006798:	f000 f906 	bl	80069a8 <vPortYield>
 800679c:	e7d6      	b.n	800674c <xTaskGenericNotify+0x68>
 800679e:	46c0      	nop			; (mov r8, r8)
 80067a0:	0800e0d4 	.word	0x0800e0d4
 80067a4:	20000aa4 	.word	0x20000aa4
 80067a8:	20000a04 	.word	0x20000a04
 80067ac:	200009f8 	.word	0x200009f8

080067b0 <xTaskGenericNotifyFromISR>:
	{
 80067b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067b2:	b083      	sub	sp, #12
 80067b4:	0004      	movs	r4, r0
 80067b6:	9101      	str	r1, [sp, #4]
 80067b8:	0015      	movs	r5, r2
 80067ba:	001e      	movs	r6, r3
		configASSERT( xTaskToNotify );
 80067bc:	2800      	cmp	r0, #0
 80067be:	d011      	beq.n	80067e4 <xTaskGenericNotifyFromISR+0x34>
		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067c0:	f000 f91a 	bl	80069f8 <ulSetInterruptMaskFromISR>
 80067c4:	0007      	movs	r7, r0
			if( pulPreviousNotificationValue != NULL )
 80067c6:	2e00      	cmp	r6, #0
 80067c8:	d001      	beq.n	80067ce <xTaskGenericNotifyFromISR+0x1e>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80067ca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80067cc:	6033      	str	r3, [r6, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80067ce:	2250      	movs	r2, #80	; 0x50
 80067d0:	5ca3      	ldrb	r3, [r4, r2]
 80067d2:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80067d4:	2102      	movs	r1, #2
 80067d6:	54a1      	strb	r1, [r4, r2]
			switch( eAction )
 80067d8:	2d04      	cmp	r5, #4
 80067da:	d81a      	bhi.n	8006812 <xTaskGenericNotifyFromISR+0x62>
 80067dc:	00ad      	lsls	r5, r5, #2
 80067de:	4a2e      	ldr	r2, [pc, #184]	; (8006898 <xTaskGenericNotifyFromISR+0xe8>)
 80067e0:	5952      	ldr	r2, [r2, r5]
 80067e2:	4697      	mov	pc, r2
		configASSERT( xTaskToNotify );
 80067e4:	b672      	cpsid	i
 80067e6:	e7fe      	b.n	80067e6 <xTaskGenericNotifyFromISR+0x36>
					pxTCB->ulNotifiedValue |= ulValue;
 80067e8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80067ea:	9e01      	ldr	r6, [sp, #4]
 80067ec:	4316      	orrs	r6, r2
 80067ee:	64e6      	str	r6, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 80067f0:	2501      	movs	r5, #1
					break;
 80067f2:	e014      	b.n	800681e <xTaskGenericNotifyFromISR+0x6e>
					( pxTCB->ulNotifiedValue )++;
 80067f4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80067f6:	3201      	adds	r2, #1
 80067f8:	64e2      	str	r2, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 80067fa:	2501      	movs	r5, #1
					break;
 80067fc:	e00f      	b.n	800681e <xTaskGenericNotifyFromISR+0x6e>
					pxTCB->ulNotifiedValue = ulValue;
 80067fe:	9a01      	ldr	r2, [sp, #4]
 8006800:	64e2      	str	r2, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 8006802:	2501      	movs	r5, #1
					break;
 8006804:	e00b      	b.n	800681e <xTaskGenericNotifyFromISR+0x6e>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006806:	2b02      	cmp	r3, #2
 8006808:	d010      	beq.n	800682c <xTaskGenericNotifyFromISR+0x7c>
						pxTCB->ulNotifiedValue = ulValue;
 800680a:	9a01      	ldr	r2, [sp, #4]
 800680c:	64e2      	str	r2, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 800680e:	2501      	movs	r5, #1
 8006810:	e005      	b.n	800681e <xTaskGenericNotifyFromISR+0x6e>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006812:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006814:	3201      	adds	r2, #1
 8006816:	d00b      	beq.n	8006830 <xTaskGenericNotifyFromISR+0x80>
 8006818:	b672      	cpsid	i
 800681a:	e7fe      	b.n	800681a <xTaskGenericNotifyFromISR+0x6a>
			switch( eAction )
 800681c:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800681e:	2b01      	cmp	r3, #1
 8006820:	d12e      	bne.n	8006880 <xTaskGenericNotifyFromISR+0xd0>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006822:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006824:	2b00      	cmp	r3, #0
 8006826:	d005      	beq.n	8006834 <xTaskGenericNotifyFromISR+0x84>
 8006828:	b672      	cpsid	i
 800682a:	e7fe      	b.n	800682a <xTaskGenericNotifyFromISR+0x7a>
						xReturn = pdFAIL;
 800682c:	2500      	movs	r5, #0
 800682e:	e7f6      	b.n	800681e <xTaskGenericNotifyFromISR+0x6e>
	BaseType_t xReturn = pdPASS;
 8006830:	2501      	movs	r5, #1
 8006832:	e7f4      	b.n	800681e <xTaskGenericNotifyFromISR+0x6e>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006834:	4b19      	ldr	r3, [pc, #100]	; (800689c <xTaskGenericNotifyFromISR+0xec>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d127      	bne.n	800688c <xTaskGenericNotifyFromISR+0xdc>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800683c:	1d26      	adds	r6, r4, #4
 800683e:	0030      	movs	r0, r6
 8006840:	f7fe ffbc 	bl	80057bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006844:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006846:	4a16      	ldr	r2, [pc, #88]	; (80068a0 <xTaskGenericNotifyFromISR+0xf0>)
 8006848:	6812      	ldr	r2, [r2, #0]
 800684a:	4293      	cmp	r3, r2
 800684c:	d901      	bls.n	8006852 <xTaskGenericNotifyFromISR+0xa2>
 800684e:	4a14      	ldr	r2, [pc, #80]	; (80068a0 <xTaskGenericNotifyFromISR+0xf0>)
 8006850:	6013      	str	r3, [r2, #0]
 8006852:	0098      	lsls	r0, r3, #2
 8006854:	18c0      	adds	r0, r0, r3
 8006856:	0080      	lsls	r0, r0, #2
 8006858:	4b12      	ldr	r3, [pc, #72]	; (80068a4 <xTaskGenericNotifyFromISR+0xf4>)
 800685a:	18c0      	adds	r0, r0, r3
 800685c:	0031      	movs	r1, r6
 800685e:	f7fe ff8b 	bl	8005778 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006862:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006864:	4b10      	ldr	r3, [pc, #64]	; (80068a8 <xTaskGenericNotifyFromISR+0xf8>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686a:	429a      	cmp	r2, r3
 800686c:	d908      	bls.n	8006880 <xTaskGenericNotifyFromISR+0xd0>
					if( pxHigherPriorityTaskWoken != NULL )
 800686e:	9b08      	ldr	r3, [sp, #32]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d002      	beq.n	800687a <xTaskGenericNotifyFromISR+0xca>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006874:	2301      	movs	r3, #1
 8006876:	9a08      	ldr	r2, [sp, #32]
 8006878:	6013      	str	r3, [r2, #0]
					xYieldPending = pdTRUE;
 800687a:	4b0c      	ldr	r3, [pc, #48]	; (80068ac <xTaskGenericNotifyFromISR+0xfc>)
 800687c:	2201      	movs	r2, #1
 800687e:	601a      	str	r2, [r3, #0]
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8006880:	0038      	movs	r0, r7
 8006882:	f000 f8bd 	bl	8006a00 <vClearInterruptMaskFromISR>
	}
 8006886:	0028      	movs	r0, r5
 8006888:	b003      	add	sp, #12
 800688a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800688c:	0021      	movs	r1, r4
 800688e:	3118      	adds	r1, #24
 8006890:	4807      	ldr	r0, [pc, #28]	; (80068b0 <xTaskGenericNotifyFromISR+0x100>)
 8006892:	f7fe ff71 	bl	8005778 <vListInsertEnd>
 8006896:	e7e4      	b.n	8006862 <xTaskGenericNotifyFromISR+0xb2>
 8006898:	0800e0e8 	.word	0x0800e0e8
 800689c:	20000a9c 	.word	0x20000a9c
 80068a0:	20000aa4 	.word	0x20000aa4
 80068a4:	20000a04 	.word	0x20000a04
 80068a8:	200009f8 	.word	0x200009f8
 80068ac:	20000b20 	.word	0x20000b20
 80068b0:	20000adc 	.word	0x20000adc

080068b4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80068b4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80068b6:	2300      	movs	r3, #0
 80068b8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80068ba:	4b06      	ldr	r3, [pc, #24]	; (80068d4 <prvTaskExitError+0x20>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	3301      	adds	r3, #1
 80068c0:	d001      	beq.n	80068c6 <prvTaskExitError+0x12>
 80068c2:	b672      	cpsid	i
 80068c4:	e7fe      	b.n	80068c4 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
 80068c6:	b672      	cpsid	i
	while( ulDummy == 0 )
 80068c8:	9b01      	ldr	r3, [sp, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d0fc      	beq.n	80068c8 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80068ce:	b002      	add	sp, #8
 80068d0:	4770      	bx	lr
 80068d2:	46c0      	nop			; (mov r8, r8)
 80068d4:	20000008 	.word	0x20000008
	...

080068e0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80068e0:	4a0b      	ldr	r2, [pc, #44]	; (8006910 <pxCurrentTCBConst2>)
 80068e2:	6813      	ldr	r3, [r2, #0]
 80068e4:	6818      	ldr	r0, [r3, #0]
 80068e6:	3020      	adds	r0, #32
 80068e8:	f380 8809 	msr	PSP, r0
 80068ec:	2002      	movs	r0, #2
 80068ee:	f380 8814 	msr	CONTROL, r0
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80068f8:	46ae      	mov	lr, r5
 80068fa:	bc08      	pop	{r3}
 80068fc:	bc04      	pop	{r2}
 80068fe:	b662      	cpsie	i
 8006900:	4718      	bx	r3
 8006902:	46c0      	nop			; (mov r8, r8)
 8006904:	46c0      	nop			; (mov r8, r8)
 8006906:	46c0      	nop			; (mov r8, r8)
 8006908:	46c0      	nop			; (mov r8, r8)
 800690a:	46c0      	nop			; (mov r8, r8)
 800690c:	46c0      	nop			; (mov r8, r8)
 800690e:	46c0      	nop			; (mov r8, r8)

08006910 <pxCurrentTCBConst2>:
 8006910:	200009f8 	.word	0x200009f8

08006914 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8006914:	b510      	push	{r4, lr}
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8006916:	4c08      	ldr	r4, [pc, #32]	; (8006938 <prvSetupTimerInterrupt+0x24>)
 8006918:	2300      	movs	r3, #0
 800691a:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 800691c:	4a07      	ldr	r2, [pc, #28]	; (800693c <prvSetupTimerInterrupt+0x28>)
 800691e:	6013      	str	r3, [r2, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006920:	4b07      	ldr	r3, [pc, #28]	; (8006940 <prvSetupTimerInterrupt+0x2c>)
 8006922:	6818      	ldr	r0, [r3, #0]
 8006924:	21fa      	movs	r1, #250	; 0xfa
 8006926:	0089      	lsls	r1, r1, #2
 8006928:	f7f9 fc0a 	bl	8000140 <__udivsi3>
 800692c:	3801      	subs	r0, #1
 800692e:	4b05      	ldr	r3, [pc, #20]	; (8006944 <prvSetupTimerInterrupt+0x30>)
 8006930:	6018      	str	r0, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8006932:	2307      	movs	r3, #7
 8006934:	6023      	str	r3, [r4, #0]
}
 8006936:	bd10      	pop	{r4, pc}
 8006938:	e000e010 	.word	0xe000e010
 800693c:	e000e018 	.word	0xe000e018
 8006940:	2000000c 	.word	0x2000000c
 8006944:	e000e014 	.word	0xe000e014

08006948 <pxPortInitialiseStack>:
{
 8006948:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800694a:	1f03      	subs	r3, r0, #4
 800694c:	2480      	movs	r4, #128	; 0x80
 800694e:	0464      	lsls	r4, r4, #17
 8006950:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8006952:	3b04      	subs	r3, #4
 8006954:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006956:	3b04      	subs	r3, #4
 8006958:	4902      	ldr	r1, [pc, #8]	; (8006964 <pxPortInitialiseStack+0x1c>)
 800695a:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800695c:	3b14      	subs	r3, #20
 800695e:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8006960:	3840      	subs	r0, #64	; 0x40
}
 8006962:	bd10      	pop	{r4, pc}
 8006964:	080068b5 	.word	0x080068b5

08006968 <SVC_Handler>:
}
 8006968:	4770      	bx	lr
	...

0800696c <xPortStartScheduler>:
{
 800696c:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800696e:	4b0c      	ldr	r3, [pc, #48]	; (80069a0 <xPortStartScheduler+0x34>)
 8006970:	6819      	ldr	r1, [r3, #0]
 8006972:	22ff      	movs	r2, #255	; 0xff
 8006974:	0412      	lsls	r2, r2, #16
 8006976:	430a      	orrs	r2, r1
 8006978:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800697a:	6819      	ldr	r1, [r3, #0]
 800697c:	22ff      	movs	r2, #255	; 0xff
 800697e:	0612      	lsls	r2, r2, #24
 8006980:	430a      	orrs	r2, r1
 8006982:	601a      	str	r2, [r3, #0]
	prvSetupTimerInterrupt();
 8006984:	f7ff ffc6 	bl	8006914 <prvSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006988:	4b06      	ldr	r3, [pc, #24]	; (80069a4 <xPortStartScheduler+0x38>)
 800698a:	2200      	movs	r2, #0
 800698c:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800698e:	f7ff ffa7 	bl	80068e0 <vPortStartFirstTask>
	vTaskSwitchContext();
 8006992:	f7ff fd39 	bl	8006408 <vTaskSwitchContext>
	prvTaskExitError();
 8006996:	f7ff ff8d 	bl	80068b4 <prvTaskExitError>
}
 800699a:	2000      	movs	r0, #0
 800699c:	bd10      	pop	{r4, pc}
 800699e:	46c0      	nop			; (mov r8, r8)
 80069a0:	e000ed20 	.word	0xe000ed20
 80069a4:	20000008 	.word	0x20000008

080069a8 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80069a8:	4b04      	ldr	r3, [pc, #16]	; (80069bc <vPortYield+0x14>)
 80069aa:	2280      	movs	r2, #128	; 0x80
 80069ac:	0552      	lsls	r2, r2, #21
 80069ae:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80069b0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80069b4:	f3bf 8f6f 	isb	sy
}
 80069b8:	4770      	bx	lr
 80069ba:	46c0      	nop			; (mov r8, r8)
 80069bc:	e000ed04 	.word	0xe000ed04

080069c0 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 80069c0:	b672      	cpsid	i
    uxCriticalNesting++;
 80069c2:	4a04      	ldr	r2, [pc, #16]	; (80069d4 <vPortEnterCritical+0x14>)
 80069c4:	6813      	ldr	r3, [r2, #0]
 80069c6:	3301      	adds	r3, #1
 80069c8:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
 80069ca:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80069ce:	f3bf 8f6f 	isb	sy
}
 80069d2:	4770      	bx	lr
 80069d4:	20000008 	.word	0x20000008

080069d8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80069d8:	4b06      	ldr	r3, [pc, #24]	; (80069f4 <vPortExitCritical+0x1c>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d101      	bne.n	80069e4 <vPortExitCritical+0xc>
 80069e0:	b672      	cpsid	i
 80069e2:	e7fe      	b.n	80069e2 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 80069e4:	3b01      	subs	r3, #1
 80069e6:	4a03      	ldr	r2, [pc, #12]	; (80069f4 <vPortExitCritical+0x1c>)
 80069e8:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d100      	bne.n	80069f0 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 80069ee:	b662      	cpsie	i
}
 80069f0:	4770      	bx	lr
 80069f2:	46c0      	nop			; (mov r8, r8)
 80069f4:	20000008 	.word	0x20000008

080069f8 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 80069f8:	f3ef 8010 	mrs	r0, PRIMASK
 80069fc:	b672      	cpsid	i
 80069fe:	4770      	bx	lr

08006a00 <vClearInterruptMaskFromISR>:
	__asm volatile(
 8006a00:	f380 8810 	msr	PRIMASK, r0
 8006a04:	4770      	bx	lr
	...

08006a10 <PendSV_Handler>:
	__asm volatile
 8006a10:	f3ef 8009 	mrs	r0, PSP
 8006a14:	4b0e      	ldr	r3, [pc, #56]	; (8006a50 <pxCurrentTCBConst>)
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	3820      	subs	r0, #32
 8006a1a:	6010      	str	r0, [r2, #0]
 8006a1c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006a1e:	4644      	mov	r4, r8
 8006a20:	464d      	mov	r5, r9
 8006a22:	4656      	mov	r6, sl
 8006a24:	465f      	mov	r7, fp
 8006a26:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006a28:	b508      	push	{r3, lr}
 8006a2a:	b672      	cpsid	i
 8006a2c:	f7ff fcec 	bl	8006408 <vTaskSwitchContext>
 8006a30:	b662      	cpsie	i
 8006a32:	bc0c      	pop	{r2, r3}
 8006a34:	6811      	ldr	r1, [r2, #0]
 8006a36:	6808      	ldr	r0, [r1, #0]
 8006a38:	3010      	adds	r0, #16
 8006a3a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8006a3c:	46a0      	mov	r8, r4
 8006a3e:	46a9      	mov	r9, r5
 8006a40:	46b2      	mov	sl, r6
 8006a42:	46bb      	mov	fp, r7
 8006a44:	f380 8809 	msr	PSP, r0
 8006a48:	3820      	subs	r0, #32
 8006a4a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8006a4c:	4718      	bx	r3
 8006a4e:	46c0      	nop			; (mov r8, r8)

08006a50 <pxCurrentTCBConst>:
 8006a50:	200009f8 	.word	0x200009f8

08006a54 <SysTick_Handler>:
{
 8006a54:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a56:	f7ff ffcf 	bl	80069f8 <ulSetInterruptMaskFromISR>
 8006a5a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 8006a5c:	f7ff fbbe 	bl	80061dc <xTaskIncrementTick>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	d003      	beq.n	8006a6c <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8006a64:	4b03      	ldr	r3, [pc, #12]	; (8006a74 <SysTick_Handler+0x20>)
 8006a66:	2280      	movs	r2, #128	; 0x80
 8006a68:	0552      	lsls	r2, r2, #21
 8006a6a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8006a6c:	0020      	movs	r0, r4
 8006a6e:	f7ff ffc7 	bl	8006a00 <vClearInterruptMaskFromISR>
}
 8006a72:	bd10      	pop	{r4, pc}
 8006a74:	e000ed04 	.word	0xe000ed04

08006a78 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a78:	4a12      	ldr	r2, [pc, #72]	; (8006ac4 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a7a:	0753      	lsls	r3, r2, #29
 8006a7c:	d01f      	beq.n	8006abe <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a7e:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a80:	2307      	movs	r3, #7
 8006a82:	4399      	bics	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a84:	23c0      	movs	r3, #192	; 0xc0
 8006a86:	015b      	lsls	r3, r3, #5
 8006a88:	1a5b      	subs	r3, r3, r1
 8006a8a:	189b      	adds	r3, r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a8c:	000a      	movs	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a8e:	480e      	ldr	r0, [pc, #56]	; (8006ac8 <prvHeapInit+0x50>)
 8006a90:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a92:	2100      	movs	r1, #0
 8006a94:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a96:	18d3      	adds	r3, r2, r3
	uxAddress -= xHeapStructSize;
 8006a98:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a9a:	2007      	movs	r0, #7
 8006a9c:	4383      	bics	r3, r0
	pxEnd = ( void * ) uxAddress;
 8006a9e:	480b      	ldr	r0, [pc, #44]	; (8006acc <prvHeapInit+0x54>)
 8006aa0:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8006aa2:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006aa4:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006aa6:	1a99      	subs	r1, r3, r2
 8006aa8:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006aaa:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006aac:	4b08      	ldr	r3, [pc, #32]	; (8006ad0 <prvHeapInit+0x58>)
 8006aae:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ab0:	4b08      	ldr	r3, [pc, #32]	; (8006ad4 <prvHeapInit+0x5c>)
 8006ab2:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ab4:	4b08      	ldr	r3, [pc, #32]	; (8006ad8 <prvHeapInit+0x60>)
 8006ab6:	2280      	movs	r2, #128	; 0x80
 8006ab8:	0612      	lsls	r2, r2, #24
 8006aba:	601a      	str	r2, [r3, #0]
}
 8006abc:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006abe:	23c0      	movs	r3, #192	; 0xc0
 8006ac0:	015b      	lsls	r3, r3, #5
 8006ac2:	e7e4      	b.n	8006a8e <prvHeapInit+0x16>
 8006ac4:	20000b28 	.word	0x20000b28
 8006ac8:	20002334 	.word	0x20002334
 8006acc:	20000b24 	.word	0x20000b24
 8006ad0:	20002330 	.word	0x20002330
 8006ad4:	2000232c 	.word	0x2000232c
 8006ad8:	20002328 	.word	0x20002328

08006adc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006adc:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ade:	4b12      	ldr	r3, [pc, #72]	; (8006b28 <prvInsertBlockIntoFreeList+0x4c>)
 8006ae0:	001a      	movs	r2, r3
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4283      	cmp	r3, r0
 8006ae6:	d3fb      	bcc.n	8006ae0 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ae8:	6851      	ldr	r1, [r2, #4]
 8006aea:	1854      	adds	r4, r2, r1
 8006aec:	4284      	cmp	r4, r0
 8006aee:	d008      	beq.n	8006b02 <prvInsertBlockIntoFreeList+0x26>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006af0:	6841      	ldr	r1, [r0, #4]
 8006af2:	1844      	adds	r4, r0, r1
 8006af4:	42a3      	cmp	r3, r4
 8006af6:	d009      	beq.n	8006b0c <prvInsertBlockIntoFreeList+0x30>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006af8:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006afa:	4290      	cmp	r0, r2
 8006afc:	d000      	beq.n	8006b00 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006afe:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b00:	bd10      	pop	{r4, pc}
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b02:	6840      	ldr	r0, [r0, #4]
 8006b04:	1809      	adds	r1, r1, r0
 8006b06:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8006b08:	0010      	movs	r0, r2
 8006b0a:	e7f1      	b.n	8006af0 <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b0c:	4c07      	ldr	r4, [pc, #28]	; (8006b2c <prvInsertBlockIntoFreeList+0x50>)
 8006b0e:	6824      	ldr	r4, [r4, #0]
 8006b10:	42a3      	cmp	r3, r4
 8006b12:	d006      	beq.n	8006b22 <prvInsertBlockIntoFreeList+0x46>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	18c9      	adds	r1, r1, r3
 8006b18:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b1a:	6813      	ldr	r3, [r2, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	6003      	str	r3, [r0, #0]
 8006b20:	e7eb      	b.n	8006afa <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b22:	6004      	str	r4, [r0, #0]
 8006b24:	e7e9      	b.n	8006afa <prvInsertBlockIntoFreeList+0x1e>
 8006b26:	46c0      	nop			; (mov r8, r8)
 8006b28:	20002334 	.word	0x20002334
 8006b2c:	20000b24 	.word	0x20000b24

08006b30 <pvPortMalloc>:
{
 8006b30:	b570      	push	{r4, r5, r6, lr}
 8006b32:	0005      	movs	r5, r0
	vTaskSuspendAll();
 8006b34:	f7ff fb4a 	bl	80061cc <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006b38:	4b2c      	ldr	r3, [pc, #176]	; (8006bec <pvPortMalloc+0xbc>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d014      	beq.n	8006b6a <pvPortMalloc+0x3a>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b40:	4b2b      	ldr	r3, [pc, #172]	; (8006bf0 <pvPortMalloc+0xc0>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	422b      	tst	r3, r5
 8006b46:	d142      	bne.n	8006bce <pvPortMalloc+0x9e>
			if( xWantedSize > 0 )
 8006b48:	2d00      	cmp	r5, #0
 8006b4a:	d005      	beq.n	8006b58 <pvPortMalloc+0x28>
				xWantedSize += xHeapStructSize;
 8006b4c:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b4e:	076b      	lsls	r3, r5, #29
 8006b50:	d002      	beq.n	8006b58 <pvPortMalloc+0x28>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b52:	2307      	movs	r3, #7
 8006b54:	439d      	bics	r5, r3
 8006b56:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b58:	2d00      	cmp	r5, #0
 8006b5a:	d03a      	beq.n	8006bd2 <pvPortMalloc+0xa2>
 8006b5c:	4b25      	ldr	r3, [pc, #148]	; (8006bf4 <pvPortMalloc+0xc4>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	42ab      	cmp	r3, r5
 8006b62:	d33d      	bcc.n	8006be0 <pvPortMalloc+0xb0>
				pxBlock = xStart.pxNextFreeBlock;
 8006b64:	4a24      	ldr	r2, [pc, #144]	; (8006bf8 <pvPortMalloc+0xc8>)
 8006b66:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b68:	e004      	b.n	8006b74 <pvPortMalloc+0x44>
			prvHeapInit();
 8006b6a:	f7ff ff85 	bl	8006a78 <prvHeapInit>
 8006b6e:	e7e7      	b.n	8006b40 <pvPortMalloc+0x10>
					pxPreviousBlock = pxBlock;
 8006b70:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b72:	001c      	movs	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b74:	6863      	ldr	r3, [r4, #4]
 8006b76:	42ab      	cmp	r3, r5
 8006b78:	d202      	bcs.n	8006b80 <pvPortMalloc+0x50>
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1f7      	bne.n	8006b70 <pvPortMalloc+0x40>
				if( pxBlock != pxEnd )
 8006b80:	4b1a      	ldr	r3, [pc, #104]	; (8006bec <pvPortMalloc+0xbc>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	42a3      	cmp	r3, r4
 8006b86:	d02d      	beq.n	8006be4 <pvPortMalloc+0xb4>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b88:	6816      	ldr	r6, [r2, #0]
 8006b8a:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b90:	6863      	ldr	r3, [r4, #4]
 8006b92:	1b5b      	subs	r3, r3, r5
 8006b94:	2b10      	cmp	r3, #16
 8006b96:	d908      	bls.n	8006baa <pvPortMalloc+0x7a>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b98:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b9a:	0742      	lsls	r2, r0, #29
 8006b9c:	d001      	beq.n	8006ba2 <pvPortMalloc+0x72>
 8006b9e:	b672      	cpsid	i
 8006ba0:	e7fe      	b.n	8006ba0 <pvPortMalloc+0x70>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ba2:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ba4:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ba6:	f7ff ff99 	bl	8006adc <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006baa:	6862      	ldr	r2, [r4, #4]
 8006bac:	4911      	ldr	r1, [pc, #68]	; (8006bf4 <pvPortMalloc+0xc4>)
 8006bae:	680b      	ldr	r3, [r1, #0]
 8006bb0:	1a9b      	subs	r3, r3, r2
 8006bb2:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006bb4:	4911      	ldr	r1, [pc, #68]	; (8006bfc <pvPortMalloc+0xcc>)
 8006bb6:	6809      	ldr	r1, [r1, #0]
 8006bb8:	428b      	cmp	r3, r1
 8006bba:	d201      	bcs.n	8006bc0 <pvPortMalloc+0x90>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006bbc:	490f      	ldr	r1, [pc, #60]	; (8006bfc <pvPortMalloc+0xcc>)
 8006bbe:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006bc0:	4b0b      	ldr	r3, [pc, #44]	; (8006bf0 <pvPortMalloc+0xc0>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	6023      	str	r3, [r4, #0]
 8006bcc:	e002      	b.n	8006bd4 <pvPortMalloc+0xa4>
void *pvReturn = NULL;
 8006bce:	2600      	movs	r6, #0
 8006bd0:	e000      	b.n	8006bd4 <pvPortMalloc+0xa4>
 8006bd2:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 8006bd4:	f7ff fb8c 	bl	80062f0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bd8:	0773      	lsls	r3, r6, #29
 8006bda:	d005      	beq.n	8006be8 <pvPortMalloc+0xb8>
 8006bdc:	b672      	cpsid	i
 8006bde:	e7fe      	b.n	8006bde <pvPortMalloc+0xae>
void *pvReturn = NULL;
 8006be0:	2600      	movs	r6, #0
 8006be2:	e7f7      	b.n	8006bd4 <pvPortMalloc+0xa4>
 8006be4:	2600      	movs	r6, #0
 8006be6:	e7f5      	b.n	8006bd4 <pvPortMalloc+0xa4>
}
 8006be8:	0030      	movs	r0, r6
 8006bea:	bd70      	pop	{r4, r5, r6, pc}
 8006bec:	20000b24 	.word	0x20000b24
 8006bf0:	20002328 	.word	0x20002328
 8006bf4:	2000232c 	.word	0x2000232c
 8006bf8:	20002334 	.word	0x20002334
 8006bfc:	20002330 	.word	0x20002330

08006c00 <vPortFree>:
{
 8006c00:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 8006c02:	2800      	cmp	r0, #0
 8006c04:	d020      	beq.n	8006c48 <vPortFree+0x48>
		puc -= xHeapStructSize;
 8006c06:	0005      	movs	r5, r0
 8006c08:	3d08      	subs	r5, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c0a:	686b      	ldr	r3, [r5, #4]
 8006c0c:	4a0f      	ldr	r2, [pc, #60]	; (8006c4c <vPortFree+0x4c>)
 8006c0e:	6812      	ldr	r2, [r2, #0]
 8006c10:	421a      	tst	r2, r3
 8006c12:	d101      	bne.n	8006c18 <vPortFree+0x18>
 8006c14:	b672      	cpsid	i
 8006c16:	e7fe      	b.n	8006c16 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c18:	0001      	movs	r1, r0
 8006c1a:	3908      	subs	r1, #8
 8006c1c:	6809      	ldr	r1, [r1, #0]
 8006c1e:	2900      	cmp	r1, #0
 8006c20:	d001      	beq.n	8006c26 <vPortFree+0x26>
 8006c22:	b672      	cpsid	i
 8006c24:	e7fe      	b.n	8006c24 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c26:	3808      	subs	r0, #8
 8006c28:	0004      	movs	r4, r0
 8006c2a:	4393      	bics	r3, r2
 8006c2c:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 8006c2e:	f7ff facd 	bl	80061cc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c32:	6863      	ldr	r3, [r4, #4]
 8006c34:	4a06      	ldr	r2, [pc, #24]	; (8006c50 <vPortFree+0x50>)
 8006c36:	6811      	ldr	r1, [r2, #0]
 8006c38:	468c      	mov	ip, r1
 8006c3a:	4463      	add	r3, ip
 8006c3c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c3e:	0028      	movs	r0, r5
 8006c40:	f7ff ff4c 	bl	8006adc <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8006c44:	f7ff fb54 	bl	80062f0 <xTaskResumeAll>
}
 8006c48:	bd70      	pop	{r4, r5, r6, pc}
 8006c4a:	46c0      	nop			; (mov r8, r8)
 8006c4c:	20002328 	.word	0x20002328
 8006c50:	2000232c 	.word	0x2000232c

08006c54 <SCP_Tick>:
    }
}
/************************************************************************************************
************************************************************************************************/
void SCP_Tick(uint32_t msecTick)
 {
 8006c54:	b530      	push	{r4, r5, lr}
     if (SCPHandler.timer > 0)
 8006c56:	4b09      	ldr	r3, [pc, #36]	; (8006c7c <SCP_Tick+0x28>)
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	dd07      	ble.n	8006c70 <SCP_Tick+0x1c>
     {
         SCPHandler.timer = SCPHandler.timer - msecTick;
 8006c60:	0004      	movs	r4, r0
 8006c62:	2500      	movs	r5, #0
 8006c64:	1b12      	subs	r2, r2, r4
 8006c66:	41ab      	sbcs	r3, r5
 8006c68:	4904      	ldr	r1, [pc, #16]	; (8006c7c <SCP_Tick+0x28>)
 8006c6a:	600a      	str	r2, [r1, #0]
 8006c6c:	604b      	str	r3, [r1, #4]
     }
 }
 8006c6e:	bd30      	pop	{r4, r5, pc}
     if (SCPHandler.timer > 0)
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1fc      	bne.n	8006c6e <SCP_Tick+0x1a>
 8006c74:	2a00      	cmp	r2, #0
 8006c76:	d1f3      	bne.n	8006c60 <SCP_Tick+0xc>
 8006c78:	e7f9      	b.n	8006c6e <SCP_Tick+0x1a>
 8006c7a:	46c0      	nop			; (mov r8, r8)
 8006c7c:	20002340 	.word	0x20002340

08006c80 <SCP_UpCase>:
/************************************************************************************************
************************************************************************************************/
char SCP_UpCase(char ch )
{
 if ((ch >= 'a')&&(ch <= 'z')) return (ch & ~0x20);
 8006c80:	0003      	movs	r3, r0
 8006c82:	3b61      	subs	r3, #97	; 0x61
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b19      	cmp	r3, #25
 8006c88:	d900      	bls.n	8006c8c <SCP_UpCase+0xc>
 return ch;
}
 8006c8a:	4770      	bx	lr
 if ((ch >= 'a')&&(ch <= 'z')) return (ch & ~0x20);
 8006c8c:	2320      	movs	r3, #32
 8006c8e:	4398      	bics	r0, r3
 8006c90:	e7fb      	b.n	8006c8a <SCP_UpCase+0xa>
	...

08006c94 <SCP_Init>:

void SCP_Init(uint32_t (*fSendData)(uint8_t *pData, uint32_t lenght), uint32_t (*fReadByte)(uint8_t *pData))
{
 8006c94:	b530      	push	{r4, r5, lr}
    SCPHandler.RxIndex = 0;
 8006c96:	4b0c      	ldr	r3, [pc, #48]	; (8006cc8 <SCP_Init+0x34>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	609a      	str	r2, [r3, #8]
    SCPHandler.timer = 0;
 8006c9c:	2400      	movs	r4, #0
 8006c9e:	2500      	movs	r5, #0
 8006ca0:	601c      	str	r4, [r3, #0]
 8006ca2:	605d      	str	r5, [r3, #4]
    SCPHandler.fSendData = fSendData;
 8006ca4:	4a09      	ldr	r2, [pc, #36]	; (8006ccc <SCP_Init+0x38>)
 8006ca6:	5098      	str	r0, [r3, r2]
    SCPHandler.fReadByte = fReadByte;
 8006ca8:	3204      	adds	r2, #4
 8006caa:	5099      	str	r1, [r3, r2]

    for (int i = 0; i < SCP_MAX_CALLBACKS; i++)
 8006cac:	2200      	movs	r2, #0
 8006cae:	e008      	b.n	8006cc2 <SCP_Init+0x2e>
    {
        SCPHandler.scpCallbacks[i].fOnExecute = 0;
 8006cb0:	0011      	movs	r1, r2
 8006cb2:	3181      	adds	r1, #129	; 0x81
 8006cb4:	00c9      	lsls	r1, r1, #3
 8006cb6:	4b04      	ldr	r3, [pc, #16]	; (8006cc8 <SCP_Init+0x34>)
 8006cb8:	185b      	adds	r3, r3, r1
 8006cba:	2100      	movs	r1, #0
 8006cbc:	6099      	str	r1, [r3, #8]
        SCPHandler.scpCallbacks[i].pWaitForString = 0;
 8006cbe:	6059      	str	r1, [r3, #4]
    for (int i = 0; i < SCP_MAX_CALLBACKS; i++)
 8006cc0:	3201      	adds	r2, #1
 8006cc2:	2a09      	cmp	r2, #9
 8006cc4:	ddf4      	ble.n	8006cb0 <SCP_Init+0x1c>
    }
}
 8006cc6:	bd30      	pop	{r4, r5, pc}
 8006cc8:	20002340 	.word	0x20002340
 8006ccc:	0000060c 	.word	0x0000060c

08006cd0 <SCP_CheckCommand>:
 * Returns
 * If success returns pointer to the last byte of found string in rx buffer
 * if fail returns 0
******************************************************************************************/
const char * SCP_CheckCommand(const char * str)
{
 8006cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cd2:	46c6      	mov	lr, r8
 8006cd4:	b500      	push	{lr}
 8006cd6:	1e07      	subs	r7, r0, #0

uint32_t i=0;
uint32_t rxInx = 0;

 if (str)
 8006cd8:	d022      	beq.n	8006d20 <SCP_CheckCommand+0x50>
uint32_t rxInx = 0;
 8006cda:	2400      	movs	r4, #0
uint32_t i=0;
 8006cdc:	2600      	movs	r6, #0
 8006cde:	e005      	b.n	8006cec <SCP_CheckCommand+0x1c>
    {
     /*Low case or Up case characters may occur*/
     if (SCP_UpCase((char)str[i]) == SCP_UpCase((char)SCPHandler.RxBuffer[rxInx++])) // UpCase
      {
       /*Match found*/
       i++;
 8006ce0:	1c73      	adds	r3, r6, #1

       /*If the end of the string reached*/
       if (str[i] == 0)
 8006ce2:	5cfa      	ldrb	r2, [r7, r3]
 8006ce4:	2a00      	cmp	r2, #0
 8006ce6:	d014      	beq.n	8006d12 <SCP_CheckCommand+0x42>
       i++;
 8006ce8:	001e      	movs	r6, r3
 8006cea:	4644      	mov	r4, r8
   while (rxInx < SCPHandler.RxIndex)
 8006cec:	4b0e      	ldr	r3, [pc, #56]	; (8006d28 <SCP_CheckCommand+0x58>)
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	42a3      	cmp	r3, r4
 8006cf2:	d914      	bls.n	8006d1e <SCP_CheckCommand+0x4e>
     if (SCP_UpCase((char)str[i]) == SCP_UpCase((char)SCPHandler.RxBuffer[rxInx++])) // UpCase
 8006cf4:	5db8      	ldrb	r0, [r7, r6]
 8006cf6:	f7ff ffc3 	bl	8006c80 <SCP_UpCase>
 8006cfa:	0005      	movs	r5, r0
 8006cfc:	1c63      	adds	r3, r4, #1
 8006cfe:	4698      	mov	r8, r3
 8006d00:	4b09      	ldr	r3, [pc, #36]	; (8006d28 <SCP_CheckCommand+0x58>)
 8006d02:	191b      	adds	r3, r3, r4
 8006d04:	7b18      	ldrb	r0, [r3, #12]
 8006d06:	f7ff ffbb 	bl	8006c80 <SCP_UpCase>
 8006d0a:	4285      	cmp	r5, r0
 8006d0c:	d0e8      	beq.n	8006ce0 <SCP_CheckCommand+0x10>
       }

      }

     /*No match, reset string pointer*/
     else i=0;
 8006d0e:	2600      	movs	r6, #0
 8006d10:	e7eb      	b.n	8006cea <SCP_CheckCommand+0x1a>
           return (const char *)&SCPHandler.RxBuffer[rxInx - i];
 8006d12:	1ba0      	subs	r0, r4, r6
 8006d14:	3008      	adds	r0, #8
 8006d16:	4f04      	ldr	r7, [pc, #16]	; (8006d28 <SCP_CheckCommand+0x58>)
 8006d18:	19c0      	adds	r0, r0, r7
 8006d1a:	3004      	adds	r0, #4
 8006d1c:	e000      	b.n	8006d20 <SCP_CheckCommand+0x50>
    }
  }
return NULL;
 8006d1e:	2000      	movs	r0, #0
}
 8006d20:	bc80      	pop	{r7}
 8006d22:	46b8      	mov	r8, r7
 8006d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d26:	46c0      	nop			; (mov r8, r8)
 8006d28:	20002340 	.word	0x20002340

08006d2c <SCP_Process>:
{
 8006d2c:	b570      	push	{r4, r5, r6, lr}
    for (int i = 0; i < SCP_MAX_CALLBACKS; i++)
 8006d2e:	2400      	movs	r4, #0
 8006d30:	e000      	b.n	8006d34 <SCP_Process+0x8>
 8006d32:	3401      	adds	r4, #1
 8006d34:	2c09      	cmp	r4, #9
 8006d36:	dc15      	bgt.n	8006d64 <SCP_Process+0x38>
        if (SCPHandler.scpCallbacks[i].pWaitForString && SCPHandler.scpCallbacks[i].fOnExecute)
 8006d38:	0022      	movs	r2, r4
 8006d3a:	3281      	adds	r2, #129	; 0x81
 8006d3c:	00d2      	lsls	r2, r2, #3
 8006d3e:	4b0a      	ldr	r3, [pc, #40]	; (8006d68 <SCP_Process+0x3c>)
 8006d40:	189b      	adds	r3, r3, r2
 8006d42:	6858      	ldr	r0, [r3, #4]
 8006d44:	2800      	cmp	r0, #0
 8006d46:	d0f4      	beq.n	8006d32 <SCP_Process+0x6>
 8006d48:	0022      	movs	r2, r4
 8006d4a:	3281      	adds	r2, #129	; 0x81
 8006d4c:	00d2      	lsls	r2, r2, #3
 8006d4e:	4b06      	ldr	r3, [pc, #24]	; (8006d68 <SCP_Process+0x3c>)
 8006d50:	189b      	adds	r3, r3, r2
 8006d52:	689d      	ldr	r5, [r3, #8]
 8006d54:	2d00      	cmp	r5, #0
 8006d56:	d0ec      	beq.n	8006d32 <SCP_Process+0x6>
            pReceivedString  = SCP_CheckCommand(SCPHandler.scpCallbacks[i].pWaitForString);
 8006d58:	f7ff ffba 	bl	8006cd0 <SCP_CheckCommand>
            if(pReceivedString)
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	d0e8      	beq.n	8006d32 <SCP_Process+0x6>
                SCPHandler.scpCallbacks[i].fOnExecute(pReceivedString);
 8006d60:	47a8      	blx	r5
 8006d62:	e7e6      	b.n	8006d32 <SCP_Process+0x6>
}
 8006d64:	bd70      	pop	{r4, r5, r6, pc}
 8006d66:	46c0      	nop			; (mov r8, r8)
 8006d68:	20002340 	.word	0x20002340

08006d6c <SCP_SendCommandWaitAnswer>:
* RETURN:
* 0 if error
* pointer to answer if success
************************************************************************************************/
 char * SCP_SendCommandWaitAnswer(char *pCmd, char *pAnswer, uint32_t timeout, uint8_t retry)
 {
 8006d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d6e:	46d6      	mov	lr, sl
 8006d70:	464f      	mov	r7, r9
 8006d72:	4646      	mov	r6, r8
 8006d74:	b5c0      	push	{r6, r7, lr}
 8006d76:	0006      	movs	r6, r0
 8006d78:	000d      	movs	r5, r1
 8006d7a:	4691      	mov	r9, r2
 8006d7c:	4698      	mov	r8, r3
     int    inx =0;
     char * pResult = NULL;

     /* flush RX */
     SCPHandler.RxIndex = 0;
 8006d7e:	481b      	ldr	r0, [pc, #108]	; (8006dec <SCP_SendCommandWaitAnswer+0x80>)
 8006d80:	2300      	movs	r3, #0
 8006d82:	6083      	str	r3, [r0, #8]
     memset(SCPHandler.RxBuffer, 0x00, SCP_RX_BUFF_LENGTH);
 8006d84:	300c      	adds	r0, #12
 8006d86:	2280      	movs	r2, #128	; 0x80
 8006d88:	00d2      	lsls	r2, r2, #3
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	f002 f9a2 	bl	80090d4 <memset>
     char * pResult = NULL;
 8006d90:	2400      	movs	r4, #0
     int    inx =0;
 8006d92:	2300      	movs	r3, #0

     while (!pResult && (inx++ < retry))
 8006d94:	e00f      	b.n	8006db6 <SCP_SendCommandWaitAnswer+0x4a>
     {
             SCPHandler.timer = timeout;
             SCPHandler.fSendData((uint8_t *)pCmd, strlen(pCmd));
             while ( (!pResult) && (SCPHandler.timer))
             {
                 pResult = (char *)SCP_CheckCommand(pAnswer);
 8006d96:	0028      	movs	r0, r5
 8006d98:	f7ff ff9a 	bl	8006cd0 <SCP_CheckCommand>
 8006d9c:	0004      	movs	r4, r0
                 SCP_Process();
 8006d9e:	f7ff ffc5 	bl	8006d2c <SCP_Process>
             while ( (!pResult) && (SCPHandler.timer))
 8006da2:	2c00      	cmp	r4, #0
 8006da4:	d106      	bne.n	8006db4 <SCP_SendCommandWaitAnswer+0x48>
 8006da6:	4a11      	ldr	r2, [pc, #68]	; (8006dec <SCP_SendCommandWaitAnswer+0x80>)
 8006da8:	6813      	ldr	r3, [r2, #0]
 8006daa:	6852      	ldr	r2, [r2, #4]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	d1f2      	bne.n	8006d96 <SCP_SendCommandWaitAnswer+0x2a>
 8006db0:	003b      	movs	r3, r7
 8006db2:	e000      	b.n	8006db6 <SCP_SendCommandWaitAnswer+0x4a>
 8006db4:	003b      	movs	r3, r7
     while (!pResult && (inx++ < retry))
 8006db6:	2c00      	cmp	r4, #0
 8006db8:	d111      	bne.n	8006dde <SCP_SendCommandWaitAnswer+0x72>
 8006dba:	1c5f      	adds	r7, r3, #1
 8006dbc:	4598      	cmp	r8, r3
 8006dbe:	dd0e      	ble.n	8006dde <SCP_SendCommandWaitAnswer+0x72>
             SCPHandler.timer = timeout;
 8006dc0:	4b0a      	ldr	r3, [pc, #40]	; (8006dec <SCP_SendCommandWaitAnswer+0x80>)
 8006dc2:	464a      	mov	r2, r9
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	605a      	str	r2, [r3, #4]
             SCPHandler.fSendData((uint8_t *)pCmd, strlen(pCmd));
 8006dca:	4a09      	ldr	r2, [pc, #36]	; (8006df0 <SCP_SendCommandWaitAnswer+0x84>)
 8006dcc:	589b      	ldr	r3, [r3, r2]
 8006dce:	469a      	mov	sl, r3
 8006dd0:	0030      	movs	r0, r6
 8006dd2:	f7f9 f999 	bl	8000108 <strlen>
 8006dd6:	0001      	movs	r1, r0
 8006dd8:	0030      	movs	r0, r6
 8006dda:	47d0      	blx	sl
             while ( (!pResult) && (SCPHandler.timer))
 8006ddc:	e7e1      	b.n	8006da2 <SCP_SendCommandWaitAnswer+0x36>
             }
     }
     return pResult;

 }
 8006dde:	0020      	movs	r0, r4
 8006de0:	bce0      	pop	{r5, r6, r7}
 8006de2:	46ba      	mov	sl, r7
 8006de4:	46b1      	mov	r9, r6
 8006de6:	46a8      	mov	r8, r5
 8006de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dea:	46c0      	nop			; (mov r8, r8)
 8006dec:	20002340 	.word	0x20002340
 8006df0:	0000060c 	.word	0x0000060c

08006df4 <SCP_InitRx>:

     return pResult;
 }

 void SCP_InitRx(void)
 {
 8006df4:	b510      	push	{r4, lr}
     SCPHandler.RxIndex = 0;
 8006df6:	4805      	ldr	r0, [pc, #20]	; (8006e0c <SCP_InitRx+0x18>)
 8006df8:	2300      	movs	r3, #0
 8006dfa:	6083      	str	r3, [r0, #8]
     memset(SCPHandler.RxBuffer, 0x00, SCP_RX_BUFF_LENGTH);
 8006dfc:	300c      	adds	r0, #12
 8006dfe:	2280      	movs	r2, #128	; 0x80
 8006e00:	00d2      	lsls	r2, r2, #3
 8006e02:	2100      	movs	r1, #0
 8006e04:	f002 f966 	bl	80090d4 <memset>
 }
 8006e08:	bd10      	pop	{r4, pc}
 8006e0a:	46c0      	nop			; (mov r8, r8)
 8006e0c:	20002340 	.word	0x20002340

08006e10 <SCP_ByteReceived>:
{
 8006e10:	b510      	push	{r4, lr}
 8006e12:	0004      	movs	r4, r0
    if (SCPHandler.RxIndex < SCP_RX_BUFF_LENGTH)
 8006e14:	4b0a      	ldr	r3, [pc, #40]	; (8006e40 <SCP_ByteReceived+0x30>)
 8006e16:	689a      	ldr	r2, [r3, #8]
 8006e18:	2380      	movs	r3, #128	; 0x80
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d205      	bcs.n	8006e2c <SCP_ByteReceived+0x1c>
        SCPHandler.RxBuffer[SCPHandler.RxIndex++] = rxByte;
 8006e20:	4b07      	ldr	r3, [pc, #28]	; (8006e40 <SCP_ByteReceived+0x30>)
 8006e22:	1c51      	adds	r1, r2, #1
 8006e24:	6099      	str	r1, [r3, #8]
 8006e26:	189b      	adds	r3, r3, r2
 8006e28:	7318      	strb	r0, [r3, #12]
}
 8006e2a:	bd10      	pop	{r4, pc}
    	SCP_InitRx();
 8006e2c:	f7ff ffe2 	bl	8006df4 <SCP_InitRx>
        SCPHandler.RxBuffer[SCPHandler.RxIndex++] = rxByte;
 8006e30:	4b03      	ldr	r3, [pc, #12]	; (8006e40 <SCP_ByteReceived+0x30>)
 8006e32:	689a      	ldr	r2, [r3, #8]
 8006e34:	1c51      	adds	r1, r2, #1
 8006e36:	6099      	str	r1, [r3, #8]
 8006e38:	189b      	adds	r3, r3, r2
 8006e3a:	731c      	strb	r4, [r3, #12]
}
 8006e3c:	e7f5      	b.n	8006e2a <SCP_ByteReceived+0x1a>
 8006e3e:	46c0      	nop			; (mov r8, r8)
 8006e40:	20002340 	.word	0x20002340

08006e44 <SCP_WaitForAnswer>:
 {
     SCPHandler.fSendData((uint8_t *)pData, length);
 }

 char *SCP_WaitForAnswer(char *pAnswer, uint32_t timeout)
 {
 8006e44:	b570      	push	{r4, r5, r6, lr}
 8006e46:	0005      	movs	r5, r0
     char * pResult = NULL;

     SCPHandler.timer = timeout;
 8006e48:	4b0a      	ldr	r3, [pc, #40]	; (8006e74 <SCP_WaitForAnswer+0x30>)
 8006e4a:	6019      	str	r1, [r3, #0]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	605a      	str	r2, [r3, #4]
     char * pResult = NULL;
 8006e50:	2400      	movs	r4, #0
     while ( (!pResult) && (SCPHandler.timer))
 8006e52:	e005      	b.n	8006e60 <SCP_WaitForAnswer+0x1c>
      {
          pResult = (char *)SCP_CheckCommand(pAnswer);
 8006e54:	0028      	movs	r0, r5
 8006e56:	f7ff ff3b 	bl	8006cd0 <SCP_CheckCommand>
 8006e5a:	0004      	movs	r4, r0
          SCP_Process();
 8006e5c:	f7ff ff66 	bl	8006d2c <SCP_Process>
     while ( (!pResult) && (SCPHandler.timer))
 8006e60:	2c00      	cmp	r4, #0
 8006e62:	d104      	bne.n	8006e6e <SCP_WaitForAnswer+0x2a>
 8006e64:	4a03      	ldr	r2, [pc, #12]	; (8006e74 <SCP_WaitForAnswer+0x30>)
 8006e66:	6813      	ldr	r3, [r2, #0]
 8006e68:	6852      	ldr	r2, [r2, #4]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	d1f2      	bne.n	8006e54 <SCP_WaitForAnswer+0x10>
      }
     return pResult;
 }
 8006e6e:	0020      	movs	r0, r4
 8006e70:	bd70      	pop	{r4, r5, r6, pc}
 8006e72:	46c0      	nop			; (mov r8, r8)
 8006e74:	20002340 	.word	0x20002340

08006e78 <writeEEPROMData>:
  HAL_FLASHEx_DATAEEPROM_Lock();  // Reprotect the EEPROM
  return status;
  }

HAL_StatusTypeDef writeEEPROMData(uint32_t address, uint8_t* data, uint16_t len)
  {
 8006e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e7a:	46c6      	mov	lr, r8
 8006e7c:	b500      	push	{lr}
 8006e7e:	000f      	movs	r7, r1
 8006e80:	4690      	mov	r8, r2
	HAL_StatusTypeDef  status;
	uint16_t i;

	address = address + EEPROM_BASE_ADDRESS;
 8006e82:	4b12      	ldr	r3, [pc, #72]	; (8006ecc <writeEEPROMData+0x54>)
 8006e84:	18c6      	adds	r6, r0, r3

	if(address+len > EEPROM_LAST_ADDR)
 8006e86:	1992      	adds	r2, r2, r6
 8006e88:	4b11      	ldr	r3, [pc, #68]	; (8006ed0 <writeEEPROMData+0x58>)
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d904      	bls.n	8006e98 <writeEEPROMData+0x20>
	{return HAL_ERROR;}
 8006e8e:	2501      	movs	r5, #1
		}
	}

	HAL_FLASHEx_DATAEEPROM_Lock();  // Reprotect the EEPROM
	return HAL_OK;
  }
 8006e90:	0028      	movs	r0, r5
 8006e92:	bc80      	pop	{r7}
 8006e94:	46b8      	mov	r8, r7
 8006e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_FLASHEx_DATAEEPROM_Unlock();  //Unprotect the EEPROM to allow writing
 8006e98:	f7fc fb9e 	bl	80035d8 <HAL_FLASHEx_DATAEEPROM_Unlock>
	for(i = 0; i < len; i++)
 8006e9c:	2400      	movs	r4, #0
 8006e9e:	4544      	cmp	r4, r8
 8006ea0:	d20f      	bcs.n	8006ec2 <writeEEPROMData+0x4a>
		status = HAL_FLASHEx_DATAEEPROM_Program(TYPEPROGRAMDATA_BYTE, address, *data);
 8006ea2:	783a      	ldrb	r2, [r7, #0]
 8006ea4:	0031      	movs	r1, r6
 8006ea6:	2000      	movs	r0, #0
 8006ea8:	f7fc fbbe 	bl	8003628 <HAL_FLASHEx_DATAEEPROM_Program>
 8006eac:	0005      	movs	r5, r0
		data++;
 8006eae:	3701      	adds	r7, #1
		address++;
 8006eb0:	3601      	adds	r6, #1
		if(status != HAL_OK )
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	d102      	bne.n	8006ebc <writeEEPROMData+0x44>
	for(i = 0; i < len; i++)
 8006eb6:	3401      	adds	r4, #1
 8006eb8:	b2a4      	uxth	r4, r4
 8006eba:	e7f0      	b.n	8006e9e <writeEEPROMData+0x26>
			HAL_FLASHEx_DATAEEPROM_Lock();  // Reprotect the EEPROM
 8006ebc:	f7fc fbaa 	bl	8003614 <HAL_FLASHEx_DATAEEPROM_Lock>
			return status;
 8006ec0:	e7e6      	b.n	8006e90 <writeEEPROMData+0x18>
	HAL_FLASHEx_DATAEEPROM_Lock();  // Reprotect the EEPROM
 8006ec2:	f7fc fba7 	bl	8003614 <HAL_FLASHEx_DATAEEPROM_Lock>
	return HAL_OK;
 8006ec6:	2500      	movs	r5, #0
 8006ec8:	e7e2      	b.n	8006e90 <writeEEPROMData+0x18>
 8006eca:	46c0      	nop			; (mov r8, r8)
 8006ecc:	08080000 	.word	0x08080000
 8006ed0:	080817ff 	.word	0x080817ff

08006ed4 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8006ed4:	4b03      	ldr	r3, [pc, #12]	; (8006ee4 <vApplicationGetIdleTaskMemory+0x10>)
 8006ed6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8006ed8:	4b03      	ldr	r3, [pc, #12]	; (8006ee8 <vApplicationGetIdleTaskMemory+0x14>)
 8006eda:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8006edc:	2340      	movs	r3, #64	; 0x40
 8006ede:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8006ee0:	4770      	bx	lr
 8006ee2:	46c0      	nop			; (mov r8, r8)
 8006ee4:	20002a58 	.word	0x20002a58
 8006ee8:	20002958 	.word	0x20002958

08006eec <ind_green>:
	}

}

void ind_green(void)
{
 8006eec:	b530      	push	{r4, r5, lr}
 8006eee:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ef0:	2214      	movs	r2, #20
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	a801      	add	r0, sp, #4
 8006ef6:	f002 f8ed 	bl	80090d4 <memset>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8006efa:	2580      	movs	r5, #128	; 0x80
 8006efc:	006d      	lsls	r5, r5, #1
 8006efe:	24a0      	movs	r4, #160	; 0xa0
 8006f00:	05e4      	lsls	r4, r4, #23
 8006f02:	2200      	movs	r2, #0
 8006f04:	0029      	movs	r1, r5
 8006f06:	0020      	movs	r0, r4
 8006f08:	f7fc fc91 	bl	800382e <HAL_GPIO_WritePin>

	/*Configure GPIO pin:*/
	GPIO_InitStruct.Pin = LED_IND_Pin;
 8006f0c:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f12:	2300      	movs	r3, #0
 8006f14:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f16:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f18:	a901      	add	r1, sp, #4
 8006f1a:	0020      	movs	r0, r4
 8006f1c:	f7fc fbb2 	bl	8003684 <HAL_GPIO_Init>
}
 8006f20:	b007      	add	sp, #28
 8006f22:	bd30      	pop	{r4, r5, pc}

08006f24 <ind_red>:

void ind_red(void)
{
 8006f24:	b530      	push	{r4, r5, lr}
 8006f26:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f28:	2214      	movs	r2, #20
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	a801      	add	r0, sp, #4
 8006f2e:	f002 f8d1 	bl	80090d4 <memset>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8006f32:	2580      	movs	r5, #128	; 0x80
 8006f34:	006d      	lsls	r5, r5, #1
 8006f36:	24a0      	movs	r4, #160	; 0xa0
 8006f38:	05e4      	lsls	r4, r4, #23
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	0029      	movs	r1, r5
 8006f3e:	0020      	movs	r0, r4
 8006f40:	f7fc fc75 	bl	800382e <HAL_GPIO_WritePin>

	/*Configure GPIO pin:*/
	GPIO_InitStruct.Pin = LED_IND_Pin;
 8006f44:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f46:	2301      	movs	r3, #1
 8006f48:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f4e:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f50:	a901      	add	r1, sp, #4
 8006f52:	0020      	movs	r0, r4
 8006f54:	f7fc fb96 	bl	8003684 <HAL_GPIO_Init>
}
 8006f58:	b007      	add	sp, #28
 8006f5a:	bd30      	pop	{r4, r5, pc}

08006f5c <ind_off>:

void ind_off(void)
{
 8006f5c:	b500      	push	{lr}
 8006f5e:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f60:	2214      	movs	r2, #20
 8006f62:	2100      	movs	r1, #0
 8006f64:	a801      	add	r0, sp, #4
 8006f66:	f002 f8b5 	bl	80090d4 <memset>

	/*Configure GPIO pin:*/
	GPIO_InitStruct.Pin = LED_IND_Pin;
 8006f6a:	2380      	movs	r3, #128	; 0x80
 8006f6c:	005b      	lsls	r3, r3, #1
 8006f6e:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f70:	20a0      	movs	r0, #160	; 0xa0
 8006f72:	a901      	add	r1, sp, #4
 8006f74:	05c0      	lsls	r0, r0, #23
 8006f76:	f7fc fb85 	bl	8003684 <HAL_GPIO_Init>
}
 8006f7a:	b007      	add	sp, #28
 8006f7c:	bd00      	pop	{pc}
	...

08006f80 <IndicationTask>:
{
 8006f80:	b500      	push	{lr}
 8006f82:	b085      	sub	sp, #20
 8006f84:	e001      	b.n	8006f8a <IndicationTask+0xa>
			  		  ind_off();
 8006f86:	f7ff ffe9 	bl	8006f5c <ind_off>
		  evt = osMessageGet (ind_msg,  osWaitForever);
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	4b0c      	ldr	r3, [pc, #48]	; (8006fc0 <IndicationTask+0x40>)
 8006f8e:	6819      	ldr	r1, [r3, #0]
 8006f90:	4252      	negs	r2, r2
 8006f92:	a801      	add	r0, sp, #4
 8006f94:	f7fe fba0 	bl	80056d8 <osMessageGet>
		  if (evt.status == osEventMessage)
 8006f98:	9b01      	ldr	r3, [sp, #4]
 8006f9a:	2b10      	cmp	r3, #16
 8006f9c:	d1f5      	bne.n	8006f8a <IndicationTask+0xa>
			  switch(evt.value.v)
 8006f9e:	9b02      	ldr	r3, [sp, #8]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d006      	beq.n	8006fb2 <IndicationTask+0x32>
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d007      	beq.n	8006fb8 <IndicationTask+0x38>
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d0ec      	beq.n	8006f86 <IndicationTask+0x6>
			  		  ind_off();
 8006fac:	f7ff ffd6 	bl	8006f5c <ind_off>
 8006fb0:	e7eb      	b.n	8006f8a <IndicationTask+0xa>
			  		  ind_green();
 8006fb2:	f7ff ff9b 	bl	8006eec <ind_green>
			  		  break;
 8006fb6:	e7e8      	b.n	8006f8a <IndicationTask+0xa>
			  		  ind_red();
 8006fb8:	f7ff ffb4 	bl	8006f24 <ind_red>
			  		  break;
 8006fbc:	e7e5      	b.n	8006f8a <IndicationTask+0xa>
 8006fbe:	46c0      	nop			; (mov r8, r8)
 8006fc0:	20002ab0 	.word	0x20002ab0

08006fc4 <delay_us>:

/*Hardware Timer Microsecond Delay*/
void delay_us (uint16_t us)
{
	/*Set the counter value a 0*/
	__HAL_TIM_SET_COUNTER(&htim22,0);
 8006fc4:	4b03      	ldr	r3, [pc, #12]	; (8006fd4 <delay_us+0x10>)
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	2300      	movs	r3, #0
 8006fca:	6253      	str	r3, [r2, #36]	; 0x24

	/*Wait for the counter to reach the us input in the parameter*/
	while (__HAL_TIM_GET_COUNTER(&htim22) < us);
 8006fcc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006fce:	4283      	cmp	r3, r0
 8006fd0:	d3fc      	bcc.n	8006fcc <delay_us+0x8>
}
 8006fd2:	4770      	bx	lr
 8006fd4:	20002c88 	.word	0x20002c88

08006fd8 <set_intensity>:

/*Sets driver current using EasyScale Protocol*/
void set_intensity(uint32_t ref)
{
 8006fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	9001      	str	r0, [sp, #4]
  unsigned char byte = 0, j = 0, k = 0;
  byte = 0x72;       //device address byte

  /*Shut down driver and enter into EasyScale control mode*/
  HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 8006fde:	4c2f      	ldr	r4, [pc, #188]	; (800709c <set_intensity+0xc4>)
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	2102      	movs	r1, #2
 8006fe4:	0020      	movs	r0, r4
 8006fe6:	f7fc fc22 	bl	800382e <HAL_GPIO_WritePin>
  delay_us(110);
 8006fea:	206e      	movs	r0, #110	; 0x6e
 8006fec:	f7ff ffea 	bl	8006fc4 <delay_us>
  HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET);
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	2102      	movs	r1, #2
 8006ff4:	0020      	movs	r0, r4
 8006ff6:	f7fc fc1a 	bl	800382e <HAL_GPIO_WritePin>
  delay_us(1100);
 8006ffa:	4829      	ldr	r0, [pc, #164]	; (80070a0 <set_intensity+0xc8>)
 8006ffc:	f7ff ffe2 	bl	8006fc4 <delay_us>

  /*Send address and data*/
  for(k=2; k>0; k--)
 8007000:	2602      	movs	r6, #2
  byte = 0x72;       //device address byte
 8007002:	2572      	movs	r5, #114	; 0x72
  for(k=2; k>0; k--)
 8007004:	e037      	b.n	8007076 <set_intensity+0x9e>

    for(j=8; j>0; j--)
    {
      if(byte & 0x80)
      {
    	HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET); //encoding bit 1
 8007006:	4f25      	ldr	r7, [pc, #148]	; (800709c <set_intensity+0xc4>)
 8007008:	2200      	movs	r2, #0
 800700a:	2102      	movs	r1, #2
 800700c:	0038      	movs	r0, r7
 800700e:	f7fc fc0e 	bl	800382e <HAL_GPIO_WritePin>
    	delay_us(24);
 8007012:	2018      	movs	r0, #24
 8007014:	f7ff ffd6 	bl	8006fc4 <delay_us>
        HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 8007018:	2201      	movs	r2, #1
 800701a:	2102      	movs	r1, #2
 800701c:	0038      	movs	r0, r7
 800701e:	f7fc fc06 	bl	800382e <HAL_GPIO_WritePin>
        delay_us(48);
 8007022:	2030      	movs	r0, #48	; 0x30
 8007024:	f7ff ffce 	bl	8006fc4 <delay_us>
    	HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET); //encoding bit 0
    	delay_us(48);
        HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
        delay_us(24);
      }
      byte += byte; //left shift
 8007028:	006d      	lsls	r5, r5, #1
 800702a:	b2ed      	uxtb	r5, r5
    for(j=8; j>0; j--)
 800702c:	3c01      	subs	r4, #1
 800702e:	b2e4      	uxtb	r4, r4
 8007030:	2c00      	cmp	r4, #0
 8007032:	d014      	beq.n	800705e <set_intensity+0x86>
      if(byte & 0x80)
 8007034:	b26b      	sxtb	r3, r5
 8007036:	2b00      	cmp	r3, #0
 8007038:	dbe5      	blt.n	8007006 <set_intensity+0x2e>
    	HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET); //encoding bit 0
 800703a:	4f18      	ldr	r7, [pc, #96]	; (800709c <set_intensity+0xc4>)
 800703c:	2200      	movs	r2, #0
 800703e:	2102      	movs	r1, #2
 8007040:	0038      	movs	r0, r7
 8007042:	f7fc fbf4 	bl	800382e <HAL_GPIO_WritePin>
    	delay_us(48);
 8007046:	2030      	movs	r0, #48	; 0x30
 8007048:	f7ff ffbc 	bl	8006fc4 <delay_us>
        HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 800704c:	2201      	movs	r2, #1
 800704e:	2102      	movs	r1, #2
 8007050:	0038      	movs	r0, r7
 8007052:	f7fc fbec 	bl	800382e <HAL_GPIO_WritePin>
        delay_us(24);
 8007056:	2018      	movs	r0, #24
 8007058:	f7ff ffb4 	bl	8006fc4 <delay_us>
 800705c:	e7e4      	b.n	8007028 <set_intensity+0x50>
    }

    HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET); //End of stream delay
 800705e:	2200      	movs	r2, #0
 8007060:	2102      	movs	r1, #2
 8007062:	480e      	ldr	r0, [pc, #56]	; (800709c <set_intensity+0xc4>)
 8007064:	f7fc fbe3 	bl	800382e <HAL_GPIO_WritePin>
    delay_us(48);
 8007068:	2030      	movs	r0, #48	; 0x30
 800706a:	f7ff ffab 	bl	8006fc4 <delay_us>

    byte = ref; //read data byte
 800706e:	466b      	mov	r3, sp
 8007070:	791d      	ldrb	r5, [r3, #4]
  for(k=2; k>0; k--)
 8007072:	3e01      	subs	r6, #1
 8007074:	b2f6      	uxtb	r6, r6
 8007076:	2e00      	cmp	r6, #0
 8007078:	d009      	beq.n	800708e <set_intensity+0xb6>
	HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 800707a:	2201      	movs	r2, #1
 800707c:	2102      	movs	r1, #2
 800707e:	4807      	ldr	r0, [pc, #28]	; (800709c <set_intensity+0xc4>)
 8007080:	f7fc fbd5 	bl	800382e <HAL_GPIO_WritePin>
	delay_us(48);
 8007084:	2030      	movs	r0, #48	; 0x30
 8007086:	f7ff ff9d 	bl	8006fc4 <delay_us>
    for(j=8; j>0; j--)
 800708a:	2408      	movs	r4, #8
 800708c:	e7d0      	b.n	8007030 <set_intensity+0x58>
  }
  HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 800708e:	2201      	movs	r2, #1
 8007090:	2102      	movs	r1, #2
 8007092:	4802      	ldr	r0, [pc, #8]	; (800709c <set_intensity+0xc4>)
 8007094:	f7fc fbcb 	bl	800382e <HAL_GPIO_WritePin>
}
 8007098:	b003      	add	sp, #12
 800709a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800709c:	50000400 	.word	0x50000400
 80070a0:	0000044c 	.word	0x0000044c

080070a4 <LEDControlTask>:
{
 80070a4:	b500      	push	{lr}
 80070a6:	b085      	sub	sp, #20
	  evt = osMessageGet (led_msg,  osWaitForever);
 80070a8:	2201      	movs	r2, #1
 80070aa:	4b06      	ldr	r3, [pc, #24]	; (80070c4 <LEDControlTask+0x20>)
 80070ac:	6819      	ldr	r1, [r3, #0]
 80070ae:	4252      	negs	r2, r2
 80070b0:	a801      	add	r0, sp, #4
 80070b2:	f7fe fb11 	bl	80056d8 <osMessageGet>
	  if (evt.status == osEventMessage)
 80070b6:	9b01      	ldr	r3, [sp, #4]
 80070b8:	2b10      	cmp	r3, #16
 80070ba:	d1f5      	bne.n	80070a8 <LEDControlTask+0x4>
		  set_intensity(evt.value.v);
 80070bc:	9802      	ldr	r0, [sp, #8]
 80070be:	f7ff ff8b 	bl	8006fd8 <set_intensity>
 80070c2:	e7f1      	b.n	80070a8 <LEDControlTask+0x4>
 80070c4:	20002ab8 	.word	0x20002ab8

080070c8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80070c8:	b510      	push	{r4, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80070ca:	4806      	ldr	r0, [pc, #24]	; (80070e4 <MX_CRC_Init+0x1c>)
 80070cc:	4b06      	ldr	r3, [pc, #24]	; (80070e8 <MX_CRC_Init+0x20>)
 80070ce:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80070d0:	2300      	movs	r3, #0
 80070d2:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80070d4:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80070d6:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80070d8:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80070da:	3301      	adds	r3, #1
 80070dc:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80070de:	f7fb fffd 	bl	80030dc <HAL_CRC_Init>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80070e2:	bd10      	pop	{r4, pc}
 80070e4:	20002b3c 	.word	0x20002b3c
 80070e8:	40023000 	.word	0x40023000

080070ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80070ec:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80070ee:	4809      	ldr	r0, [pc, #36]	; (8007114 <MX_USART1_UART_Init+0x28>)
 80070f0:	4b09      	ldr	r3, [pc, #36]	; (8007118 <MX_USART1_UART_Init+0x2c>)
 80070f2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80070f4:	23e1      	movs	r3, #225	; 0xe1
 80070f6:	025b      	lsls	r3, r3, #9
 80070f8:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80070fa:	2300      	movs	r3, #0
 80070fc:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80070fe:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007100:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007102:	220c      	movs	r2, #12
 8007104:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007106:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007108:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800710a:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800710c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800710e:	f7fe f91d 	bl	800534c <HAL_UART_Init>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007112:	bd10      	pop	{r4, pc}
 8007114:	20002d08 	.word	0x20002d08
 8007118:	40013800 	.word	0x40013800

0800711c <MX_TIM7_Init>:
{
 800711c:	b530      	push	{r4, r5, lr}
 800711e:	b083      	sub	sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007120:	2208      	movs	r2, #8
 8007122:	2100      	movs	r1, #0
 8007124:	4668      	mov	r0, sp
 8007126:	f001 ffd5 	bl	80090d4 <memset>
  htim7.Instance = TIM7;
 800712a:	4c0b      	ldr	r4, [pc, #44]	; (8007158 <MX_TIM7_Init+0x3c>)
 800712c:	4b0b      	ldr	r3, [pc, #44]	; (800715c <MX_TIM7_Init+0x40>)
 800712e:	6023      	str	r3, [r4, #0]
  htim7.Init.Prescaler = 32;
 8007130:	2320      	movs	r3, #32
 8007132:	6063      	str	r3, [r4, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007134:	2500      	movs	r5, #0
 8007136:	60a5      	str	r5, [r4, #8]
  htim7.Init.Period = 10000;
 8007138:	4b09      	ldr	r3, [pc, #36]	; (8007160 <MX_TIM7_Init+0x44>)
 800713a:	60e3      	str	r3, [r4, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800713c:	2380      	movs	r3, #128	; 0x80
 800713e:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8007140:	0020      	movs	r0, r4
 8007142:	f7fd f9bd 	bl	80044c0 <HAL_TIM_Base_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007146:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007148:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800714a:	4669      	mov	r1, sp
 800714c:	0020      	movs	r0, r4
 800714e:	f7fd fb71 	bl	8004834 <HAL_TIMEx_MasterConfigSynchronization>
}
 8007152:	b003      	add	sp, #12
 8007154:	bd30      	pop	{r4, r5, pc}
 8007156:	46c0      	nop			; (mov r8, r8)
 8007158:	20002cc8 	.word	0x20002cc8
 800715c:	40001400 	.word	0x40001400
 8007160:	00002710 	.word	0x00002710

08007164 <MX_IWDG_Init>:
{
 8007164:	b510      	push	{r4, lr}
  hiwdg.Instance = IWDG;
 8007166:	4805      	ldr	r0, [pc, #20]	; (800717c <MX_IWDG_Init+0x18>)
 8007168:	4b05      	ldr	r3, [pc, #20]	; (8007180 <MX_IWDG_Init+0x1c>)
 800716a:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800716c:	2306      	movs	r3, #6
 800716e:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Window = 4095;
 8007170:	4b04      	ldr	r3, [pc, #16]	; (8007184 <MX_IWDG_Init+0x20>)
 8007172:	60c3      	str	r3, [r0, #12]
  hiwdg.Init.Reload = 4095;
 8007174:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8007176:	f7fc fb61 	bl	800383c <HAL_IWDG_Init>
}
 800717a:	bd10      	pop	{r4, pc}
 800717c:	20002c38 	.word	0x20002c38
 8007180:	40003000 	.word	0x40003000
 8007184:	00000fff 	.word	0x00000fff

08007188 <MX_NVIC_Init>:
{
 8007188:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriority(TIM21_IRQn, 3, 0);
 800718a:	2200      	movs	r2, #0
 800718c:	2103      	movs	r1, #3
 800718e:	2014      	movs	r0, #20
 8007190:	f7fb ff12 	bl	8002fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8007194:	2014      	movs	r0, #20
 8007196:	f7fb ff3f 	bl	8003018 <HAL_NVIC_EnableIRQ>
}
 800719a:	bd10      	pop	{r4, pc}

0800719c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800719c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800719e:	2001      	movs	r0, #1
 80071a0:	f7fe f9eb 	bl	800557a <osDelay>
  for(;;)
 80071a4:	e7fb      	b.n	800719e <StartDefaultTask+0x2>
	...

080071a8 <SystemClock_Config>:
{
 80071a8:	b570      	push	{r4, r5, r6, lr}
 80071aa:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80071ac:	2238      	movs	r2, #56	; 0x38
 80071ae:	2100      	movs	r1, #0
 80071b0:	a80e      	add	r0, sp, #56	; 0x38
 80071b2:	f001 ff8f 	bl	80090d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80071b6:	2214      	movs	r2, #20
 80071b8:	2100      	movs	r1, #0
 80071ba:	a809      	add	r0, sp, #36	; 0x24
 80071bc:	f001 ff8a 	bl	80090d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80071c0:	2224      	movs	r2, #36	; 0x24
 80071c2:	2100      	movs	r1, #0
 80071c4:	4668      	mov	r0, sp
 80071c6:	f001 ff85 	bl	80090d4 <memset>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80071ca:	4917      	ldr	r1, [pc, #92]	; (8007228 <SystemClock_Config+0x80>)
 80071cc:	680b      	ldr	r3, [r1, #0]
 80071ce:	4a17      	ldr	r2, [pc, #92]	; (800722c <SystemClock_Config+0x84>)
 80071d0:	401a      	ands	r2, r3
 80071d2:	2380      	movs	r3, #128	; 0x80
 80071d4:	011b      	lsls	r3, r3, #4
 80071d6:	4313      	orrs	r3, r2
 80071d8:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80071da:	230a      	movs	r3, #10
 80071dc:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80071de:	2501      	movs	r5, #1
 80071e0:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80071e2:	3306      	adds	r3, #6
 80071e4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80071e6:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80071e8:	2602      	movs	r6, #2
 80071ea:	9618      	str	r6, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80071ec:	2400      	movs	r4, #0
 80071ee:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80071f0:	2380      	movs	r3, #128	; 0x80
 80071f2:	02db      	lsls	r3, r3, #11
 80071f4:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80071f6:	2380      	movs	r3, #128	; 0x80
 80071f8:	03db      	lsls	r3, r3, #15
 80071fa:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80071fc:	a80e      	add	r0, sp, #56	; 0x38
 80071fe:	f7fc fbf9 	bl	80039f4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007202:	230f      	movs	r3, #15
 8007204:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007206:	3b0c      	subs	r3, #12
 8007208:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800720a:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800720c:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800720e:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8007210:	2101      	movs	r1, #1
 8007212:	a809      	add	r0, sp, #36	; 0x24
 8007214:	f7fc feba 	bl	8003f8c <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007218:	9500      	str	r5, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 800721a:	9602      	str	r6, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800721c:	4668      	mov	r0, sp
 800721e:	f7fc ffe7 	bl	80041f0 <HAL_RCCEx_PeriphCLKConfig>
}
 8007222:	b01c      	add	sp, #112	; 0x70
 8007224:	bd70      	pop	{r4, r5, r6, pc}
 8007226:	46c0      	nop			; (mov r8, r8)
 8007228:	40007000 	.word	0x40007000
 800722c:	ffffe7ff 	.word	0xffffe7ff

08007230 <MX_ADC_Init>:
{
 8007230:	b570      	push	{r4, r5, r6, lr}
 8007232:	b082      	sub	sp, #8
  ADC_ChannelConfTypeDef sConfig = {0};
 8007234:	2208      	movs	r2, #8
 8007236:	2100      	movs	r1, #0
 8007238:	4668      	mov	r0, sp
 800723a:	f001 ff4b 	bl	80090d4 <memset>
  hadc.Instance = ADC1;
 800723e:	4c22      	ldr	r4, [pc, #136]	; (80072c8 <MX_ADC_Init+0x98>)
 8007240:	4b22      	ldr	r3, [pc, #136]	; (80072cc <MX_ADC_Init+0x9c>)
 8007242:	6023      	str	r3, [r4, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8007244:	2300      	movs	r3, #0
 8007246:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8007248:	2280      	movs	r2, #128	; 0x80
 800724a:	0312      	lsls	r2, r2, #12
 800724c:	6062      	str	r2, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800724e:	60a3      	str	r3, [r4, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_39CYCLES_5;
 8007250:	2205      	movs	r2, #5
 8007252:	63a2      	str	r2, [r4, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8007254:	2501      	movs	r5, #1
 8007256:	6125      	str	r5, [r4, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007258:	60e3      	str	r3, [r4, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 800725a:	321b      	adds	r2, #27
 800725c:	54a5      	strb	r5, [r4, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800725e:	3201      	adds	r2, #1
 8007260:	54a3      	strb	r3, [r4, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007262:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007264:	22c2      	movs	r2, #194	; 0xc2
 8007266:	32ff      	adds	r2, #255	; 0xff
 8007268:	6262      	str	r2, [r4, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 800726a:	3a96      	subs	r2, #150	; 0x96
 800726c:	3aff      	subs	r2, #255	; 0xff
 800726e:	54a5      	strb	r5, [r4, r2]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007270:	3a24      	subs	r2, #36	; 0x24
 8007272:	6162      	str	r2, [r4, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8007274:	2680      	movs	r6, #128	; 0x80
 8007276:	0176      	lsls	r6, r6, #5
 8007278:	6326      	str	r6, [r4, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800727a:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800727c:	6363      	str	r3, [r4, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800727e:	61e3      	str	r3, [r4, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8007280:	0020      	movs	r0, r4
 8007282:	f7fb fc2f 	bl	8002ae4 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_0;
 8007286:	9500      	str	r5, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8007288:	9601      	str	r6, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800728a:	4669      	mov	r1, sp
 800728c:	0020      	movs	r0, r4
 800728e:	f7fb fe35 	bl	8002efc <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_1;
 8007292:	4b0f      	ldr	r3, [pc, #60]	; (80072d0 <MX_ADC_Init+0xa0>)
 8007294:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007296:	4669      	mov	r1, sp
 8007298:	0020      	movs	r0, r4
 800729a:	f7fb fe2f 	bl	8002efc <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_2;
 800729e:	4b0d      	ldr	r3, [pc, #52]	; (80072d4 <MX_ADC_Init+0xa4>)
 80072a0:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80072a2:	4669      	mov	r1, sp
 80072a4:	0020      	movs	r0, r4
 80072a6:	f7fb fe29 	bl	8002efc <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_3;
 80072aa:	4b0b      	ldr	r3, [pc, #44]	; (80072d8 <MX_ADC_Init+0xa8>)
 80072ac:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80072ae:	4669      	mov	r1, sp
 80072b0:	0020      	movs	r0, r4
 80072b2:	f7fb fe23 	bl	8002efc <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_4;
 80072b6:	4b09      	ldr	r3, [pc, #36]	; (80072dc <MX_ADC_Init+0xac>)
 80072b8:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80072ba:	4669      	mov	r1, sp
 80072bc:	0020      	movs	r0, r4
 80072be:	f7fb fe1d 	bl	8002efc <HAL_ADC_ConfigChannel>
}
 80072c2:	b002      	add	sp, #8
 80072c4:	bd70      	pop	{r4, r5, r6, pc}
 80072c6:	46c0      	nop			; (mov r8, r8)
 80072c8:	20002ae0 	.word	0x20002ae0
 80072cc:	40012400 	.word	0x40012400
 80072d0:	04000002 	.word	0x04000002
 80072d4:	08000004 	.word	0x08000004
 80072d8:	0c000008 	.word	0x0c000008
 80072dc:	10000010 	.word	0x10000010

080072e0 <MX_TIM21_Init>:
{
 80072e0:	b530      	push	{r4, r5, lr}
 80072e2:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80072e4:	2210      	movs	r2, #16
 80072e6:	2100      	movs	r1, #0
 80072e8:	a802      	add	r0, sp, #8
 80072ea:	f001 fef3 	bl	80090d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80072ee:	2208      	movs	r2, #8
 80072f0:	2100      	movs	r1, #0
 80072f2:	4668      	mov	r0, sp
 80072f4:	f001 feee 	bl	80090d4 <memset>
  htim21.Instance = TIM21;
 80072f8:	4c0e      	ldr	r4, [pc, #56]	; (8007334 <MX_TIM21_Init+0x54>)
 80072fa:	4b0f      	ldr	r3, [pc, #60]	; (8007338 <MX_TIM21_Init+0x58>)
 80072fc:	6023      	str	r3, [r4, #0]
  htim21.Init.Prescaler = 32000-1;
 80072fe:	4b0f      	ldr	r3, [pc, #60]	; (800733c <MX_TIM21_Init+0x5c>)
 8007300:	6063      	str	r3, [r4, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007302:	2500      	movs	r5, #0
 8007304:	60a5      	str	r5, [r4, #8]
  htim21.Init.Period = 100-1;
 8007306:	2363      	movs	r3, #99	; 0x63
 8007308:	60e3      	str	r3, [r4, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800730a:	6125      	str	r5, [r4, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800730c:	331d      	adds	r3, #29
 800730e:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8007310:	0020      	movs	r0, r4
 8007312:	f7fd f8d5 	bl	80044c0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007316:	2380      	movs	r3, #128	; 0x80
 8007318:	015b      	lsls	r3, r3, #5
 800731a:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 800731c:	a902      	add	r1, sp, #8
 800731e:	0020      	movs	r0, r4
 8007320:	f7fd f96e 	bl	8004600 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007324:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007326:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8007328:	4669      	mov	r1, sp
 800732a:	0020      	movs	r0, r4
 800732c:	f7fd fa82 	bl	8004834 <HAL_TIMEx_MasterConfigSynchronization>
}
 8007330:	b007      	add	sp, #28
 8007332:	bd30      	pop	{r4, r5, pc}
 8007334:	20002c48 	.word	0x20002c48
 8007338:	40010800 	.word	0x40010800
 800733c:	00007cff 	.word	0x00007cff

08007340 <MX_TIM22_Init>:
{
 8007340:	b530      	push	{r4, r5, lr}
 8007342:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007344:	2210      	movs	r2, #16
 8007346:	2100      	movs	r1, #0
 8007348:	a802      	add	r0, sp, #8
 800734a:	f001 fec3 	bl	80090d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800734e:	2208      	movs	r2, #8
 8007350:	2100      	movs	r1, #0
 8007352:	4668      	mov	r0, sp
 8007354:	f001 febe 	bl	80090d4 <memset>
  htim22.Instance = TIM22;
 8007358:	4c0f      	ldr	r4, [pc, #60]	; (8007398 <MX_TIM22_Init+0x58>)
 800735a:	4b10      	ldr	r3, [pc, #64]	; (800739c <MX_TIM22_Init+0x5c>)
 800735c:	6023      	str	r3, [r4, #0]
  htim22.Init.Prescaler = 32-1;
 800735e:	231f      	movs	r3, #31
 8007360:	6063      	str	r3, [r4, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007362:	2500      	movs	r5, #0
 8007364:	60a5      	str	r5, [r4, #8]
  htim22.Init.Period = 0xFFFF-1;
 8007366:	4b0e      	ldr	r3, [pc, #56]	; (80073a0 <MX_TIM22_Init+0x60>)
 8007368:	60e3      	str	r3, [r4, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800736a:	6125      	str	r5, [r4, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800736c:	6165      	str	r5, [r4, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 800736e:	0020      	movs	r0, r4
 8007370:	f7fd f8a6 	bl	80044c0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007374:	2380      	movs	r3, #128	; 0x80
 8007376:	015b      	lsls	r3, r3, #5
 8007378:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 800737a:	a902      	add	r1, sp, #8
 800737c:	0020      	movs	r0, r4
 800737e:	f7fd f93f 	bl	8004600 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007382:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007384:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8007386:	4669      	mov	r1, sp
 8007388:	0020      	movs	r0, r4
 800738a:	f7fd fa53 	bl	8004834 <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Base_Start(&htim22);
 800738e:	0020      	movs	r0, r4
 8007390:	f7fd f8ba 	bl	8004508 <HAL_TIM_Base_Start>
}
 8007394:	b007      	add	sp, #28
 8007396:	bd30      	pop	{r4, r5, pc}
 8007398:	20002c88 	.word	0x20002c88
 800739c:	40011400 	.word	0x40011400
 80073a0:	0000fffe 	.word	0x0000fffe

080073a4 <MX_DMA_Init>:
{
 80073a4:	b500      	push	{lr}
 80073a6:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80073a8:	4a0d      	ldr	r2, [pc, #52]	; (80073e0 <MX_DMA_Init+0x3c>)
 80073aa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80073ac:	2301      	movs	r3, #1
 80073ae:	4319      	orrs	r1, r3
 80073b0:	6311      	str	r1, [r2, #48]	; 0x30
 80073b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80073b4:	4013      	ands	r3, r2
 80073b6:	9301      	str	r3, [sp, #4]
 80073b8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80073ba:	2200      	movs	r2, #0
 80073bc:	2103      	movs	r1, #3
 80073be:	2009      	movs	r0, #9
 80073c0:	f7fb fdfa 	bl	8002fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80073c4:	2009      	movs	r0, #9
 80073c6:	f7fb fe27 	bl	8003018 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 80073ca:	2200      	movs	r2, #0
 80073cc:	2103      	movs	r1, #3
 80073ce:	200a      	movs	r0, #10
 80073d0:	f7fb fdf2 	bl	8002fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80073d4:	200a      	movs	r0, #10
 80073d6:	f7fb fe1f 	bl	8003018 <HAL_NVIC_EnableIRQ>
}
 80073da:	b003      	add	sp, #12
 80073dc:	bd00      	pop	{pc}
 80073de:	46c0      	nop			; (mov r8, r8)
 80073e0:	40021000 	.word	0x40021000

080073e4 <MX_GPIO_Init>:
{
 80073e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073e6:	46c6      	mov	lr, r8
 80073e8:	b500      	push	{lr}
 80073ea:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073ec:	2214      	movs	r2, #20
 80073ee:	2100      	movs	r1, #0
 80073f0:	a803      	add	r0, sp, #12
 80073f2:	f001 fe6f 	bl	80090d4 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80073f6:	4b2b      	ldr	r3, [pc, #172]	; (80074a4 <MX_GPIO_Init+0xc0>)
 80073f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073fa:	2501      	movs	r5, #1
 80073fc:	432a      	orrs	r2, r5
 80073fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8007400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007402:	402a      	ands	r2, r5
 8007404:	9201      	str	r2, [sp, #4]
 8007406:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800740a:	2702      	movs	r7, #2
 800740c:	433a      	orrs	r2, r7
 800740e:	62da      	str	r2, [r3, #44]	; 0x2c
 8007410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007412:	403b      	ands	r3, r7
 8007414:	9302      	str	r3, [sp, #8]
 8007416:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, WAKE_Pin|RESET_Pin|VMON_CLK_Pin, GPIO_PIN_RESET);
 8007418:	26a0      	movs	r6, #160	; 0xa0
 800741a:	05f6      	lsls	r6, r6, #23
 800741c:	2200      	movs	r2, #0
 800741e:	4922      	ldr	r1, [pc, #136]	; (80074a8 <MX_GPIO_Init+0xc4>)
 8007420:	0030      	movs	r0, r6
 8007422:	f7fc fa04 	bl	800382e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LDO_OFF_GPIO_Port, LDO_OFF_Pin, GPIO_PIN_SET);
 8007426:	2201      	movs	r2, #1
 8007428:	2140      	movs	r1, #64	; 0x40
 800742a:	0030      	movs	r0, r6
 800742c:	f7fc f9ff 	bl	800382e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_CTRL_Pin|CHR_CTRL_Pin, GPIO_PIN_RESET);
 8007430:	4b1e      	ldr	r3, [pc, #120]	; (80074ac <MX_GPIO_Init+0xc8>)
 8007432:	4698      	mov	r8, r3
 8007434:	2200      	movs	r2, #0
 8007436:	210a      	movs	r1, #10
 8007438:	0018      	movs	r0, r3
 800743a:	f7fc f9f8 	bl	800382e <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = WAKE_Pin|LDO_OFF_Pin|RESET_Pin;
 800743e:	23e0      	movs	r3, #224	; 0xe0
 8007440:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007442:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007444:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007446:	2400      	movs	r4, #0
 8007448:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800744a:	a903      	add	r1, sp, #12
 800744c:	0030      	movs	r0, r6
 800744e:	f7fc f919 	bl	8003684 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LDO_OK_Pin|STAT2_Pin|STAT1_Pin;
 8007452:	2331      	movs	r3, #49	; 0x31
 8007454:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007456:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007458:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800745a:	a903      	add	r1, sp, #12
 800745c:	4640      	mov	r0, r8
 800745e:	f7fc f911 	bl	8003684 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_CTRL_Pin|CHR_CTRL_Pin;
 8007462:	230a      	movs	r3, #10
 8007464:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007466:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007468:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800746a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800746c:	a903      	add	r1, sp, #12
 800746e:	4640      	mov	r0, r8
 8007470:	f7fc f908 	bl	8003684 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_IND_Pin;
 8007474:	2380      	movs	r3, #128	; 0x80
 8007476:	005b      	lsls	r3, r3, #1
 8007478:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800747a:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800747c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(LED_IND_GPIO_Port, &GPIO_InitStruct);
 800747e:	a903      	add	r1, sp, #12
 8007480:	0030      	movs	r0, r6
 8007482:	f7fc f8ff 	bl	8003684 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VMON_CLK_Pin;
 8007486:	2380      	movs	r3, #128	; 0x80
 8007488:	021b      	lsls	r3, r3, #8
 800748a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800748c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800748e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007490:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(VMON_CLK_GPIO_Port, &GPIO_InitStruct);
 8007492:	a903      	add	r1, sp, #12
 8007494:	0030      	movs	r0, r6
 8007496:	f7fc f8f5 	bl	8003684 <HAL_GPIO_Init>
}
 800749a:	b008      	add	sp, #32
 800749c:	bc80      	pop	{r7}
 800749e:	46b8      	mov	r8, r7
 80074a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074a2:	46c0      	nop			; (mov r8, r8)
 80074a4:	40021000 	.word	0x40021000
 80074a8:	000080a0 	.word	0x000080a0
 80074ac:	50000400 	.word	0x50000400

080074b0 <eeprom_ram_init>:
{
 80074b0:	b510      	push	{r4, lr}
 80074b2:	0004      	movs	r4, r0
	memcpy(eeprom, (uint32_t*)EEPROM_BASE_ADDRESS, sizeof(EEPROMStorageTypDef));
 80074b4:	2218      	movs	r2, #24
 80074b6:	4910      	ldr	r1, [pc, #64]	; (80074f8 <eeprom_ram_init+0x48>)
 80074b8:	f001 fe03 	bl	80090c2 <memcpy>
	crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)eeprom, sizeof(EEPROMStorageTypDef)-sizeof(uint32_t));
 80074bc:	2214      	movs	r2, #20
 80074be:	0021      	movs	r1, r4
 80074c0:	480e      	ldr	r0, [pc, #56]	; (80074fc <eeprom_ram_init+0x4c>)
 80074c2:	f7fb fe4d 	bl	8003160 <HAL_CRC_Calculate>
	if(crc != eeprom->crc)
 80074c6:	6963      	ldr	r3, [r4, #20]
 80074c8:	4283      	cmp	r3, r0
 80074ca:	d00f      	beq.n	80074ec <eeprom_ram_init+0x3c>
		eeprom->batt_full_mah = FULL_BATT_MAH;
 80074cc:	23c8      	movs	r3, #200	; 0xc8
 80074ce:	019b      	lsls	r3, r3, #6
 80074d0:	81e3      	strh	r3, [r4, #14]
		eeprom->batt_full_mv = FULL_BATT_MV;
 80074d2:	4b0b      	ldr	r3, [pc, #44]	; (8007500 <eeprom_ram_init+0x50>)
 80074d4:	81a3      	strh	r3, [r4, #12]
		eeprom->batt_low_mv = BATT_LOW_MV;
 80074d6:	4b0b      	ldr	r3, [pc, #44]	; (8007504 <eeprom_ram_init+0x54>)
 80074d8:	8223      	strh	r3, [r4, #16]
		eeprom->vin_hys_mv = VINPUT_HYS;
 80074da:	4b0b      	ldr	r3, [pc, #44]	; (8007508 <eeprom_ram_init+0x58>)
 80074dc:	8163      	strh	r3, [r4, #10]
		eeprom->vin_limit_mv = VINPUT_LIMIT;
 80074de:	4b0b      	ldr	r3, [pc, #44]	; (800750c <eeprom_ram_init+0x5c>)
 80074e0:	8123      	strh	r3, [r4, #8]
		eeprom->total_batt_ouput_ah = 0;
 80074e2:	2200      	movs	r2, #0
 80074e4:	2300      	movs	r3, #0
 80074e6:	6022      	str	r2, [r4, #0]
 80074e8:	6063      	str	r3, [r4, #4]
}
 80074ea:	bd10      	pop	{r4, pc}
		storage.total_batt_ouput_ah = eeprom->total_batt_ouput_ah;
 80074ec:	6820      	ldr	r0, [r4, #0]
 80074ee:	6861      	ldr	r1, [r4, #4]
 80074f0:	4b07      	ldr	r3, [pc, #28]	; (8007510 <eeprom_ram_init+0x60>)
 80074f2:	6318      	str	r0, [r3, #48]	; 0x30
 80074f4:	6359      	str	r1, [r3, #52]	; 0x34
}
 80074f6:	e7f8      	b.n	80074ea <eeprom_ram_init+0x3a>
 80074f8:	08080000 	.word	0x08080000
 80074fc:	20002b3c 	.word	0x20002b3c
 8007500:	00003138 	.word	0x00003138
 8007504:	00002710 	.word	0x00002710
 8007508:	00001388 	.word	0x00001388
 800750c:	000033f4 	.word	0x000033f4
 8007510:	20003ac0 	.word	0x20003ac0

08007514 <eeprom_save>:
{
 8007514:	b510      	push	{r4, lr}
 8007516:	0004      	movs	r4, r0
	crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)eeprom, sizeof(EEPROMStorageTypDef)-sizeof(uint32_t));
 8007518:	2214      	movs	r2, #20
 800751a:	0001      	movs	r1, r0
 800751c:	4806      	ldr	r0, [pc, #24]	; (8007538 <eeprom_save+0x24>)
 800751e:	f7fb fe1f 	bl	8003160 <HAL_CRC_Calculate>
	if(eeprom->crc != crc)
 8007522:	6963      	ldr	r3, [r4, #20]
 8007524:	4283      	cmp	r3, r0
 8007526:	d100      	bne.n	800752a <eeprom_save+0x16>
}
 8007528:	bd10      	pop	{r4, pc}
		eeprom->crc = crc;
 800752a:	6160      	str	r0, [r4, #20]
		writeEEPROMData(0, (uint8_t*)eeprom, sizeof(EEPROMStorageTypDef));
 800752c:	2218      	movs	r2, #24
 800752e:	0021      	movs	r1, r4
 8007530:	2000      	movs	r0, #0
 8007532:	f7ff fca1 	bl	8006e78 <writeEEPROMData>
}
 8007536:	e7f7      	b.n	8007528 <eeprom_save+0x14>
 8007538:	20002b3c 	.word	0x20002b3c

0800753c <main>:
{
 800753c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800753e:	46c6      	mov	lr, r8
 8007540:	b500      	push	{lr}
 8007542:	b0a4      	sub	sp, #144	; 0x90
  HAL_Init();
 8007544:	f7fb fa50 	bl	80029e8 <HAL_Init>
  SystemClock_Config();
 8007548:	f7ff fe2e 	bl	80071a8 <SystemClock_Config>
  MX_GPIO_Init();
 800754c:	f7ff ff4a 	bl	80073e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8007550:	f7ff ff28 	bl	80073a4 <MX_DMA_Init>
  MX_ADC_Init();
 8007554:	f7ff fe6c 	bl	8007230 <MX_ADC_Init>
  MX_TIM22_Init();
 8007558:	f7ff fef2 	bl	8007340 <MX_TIM22_Init>
  MX_TIM21_Init();
 800755c:	f7ff fec0 	bl	80072e0 <MX_TIM21_Init>
  MX_CRC_Init();
 8007560:	f7ff fdb2 	bl	80070c8 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8007564:	f7ff fdc2 	bl	80070ec <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8007568:	f7ff fdd8 	bl	800711c <MX_TIM7_Init>
  MX_IWDG_Init();
 800756c:	f7ff fdfa 	bl	8007164 <MX_IWDG_Init>
  MX_NVIC_Init();
 8007570:	f7ff fe0a 	bl	8007188 <MX_NVIC_Init>
  eeprom_ram_init(&eeprom_info);
 8007574:	4c35      	ldr	r4, [pc, #212]	; (800764c <main+0x110>)
 8007576:	0020      	movs	r0, r4
 8007578:	f7ff ff9a 	bl	80074b0 <eeprom_ram_init>
  eeprom_save(&eeprom_info);
 800757c:	0020      	movs	r0, r4
 800757e:	f7ff ffc9 	bl	8007514 <eeprom_save>
  HAL_IWDG_Refresh(&hiwdg);
 8007582:	4833      	ldr	r0, [pc, #204]	; (8007650 <main+0x114>)
 8007584:	f7fc f98e 	bl	80038a4 <HAL_IWDG_Refresh>
 SCP_Init(uart_send_buff, uart_read_byte);
 8007588:	4932      	ldr	r1, [pc, #200]	; (8007654 <main+0x118>)
 800758a:	4833      	ldr	r0, [pc, #204]	; (8007658 <main+0x11c>)
 800758c:	f7ff fb82 	bl	8006c94 <SCP_Init>
 SCP_InitRx();
 8007590:	f7ff fc30 	bl	8006df4 <SCP_InitRx>
  led_msg = osMessageCreate (&led_msg_def, LEDControlTaskHandle);
 8007594:	4e31      	ldr	r6, [pc, #196]	; (800765c <main+0x120>)
 8007596:	6831      	ldr	r1, [r6, #0]
 8007598:	4831      	ldr	r0, [pc, #196]	; (8007660 <main+0x124>)
 800759a:	f7fe f854 	bl	8005646 <osMessageCreate>
 800759e:	4b31      	ldr	r3, [pc, #196]	; (8007664 <main+0x128>)
 80075a0:	6018      	str	r0, [r3, #0]
  ind_msg = osMessageCreate (&ind_msg_def, IndicationTaskHandle);
 80075a2:	4b31      	ldr	r3, [pc, #196]	; (8007668 <main+0x12c>)
 80075a4:	4698      	mov	r8, r3
 80075a6:	6819      	ldr	r1, [r3, #0]
 80075a8:	4830      	ldr	r0, [pc, #192]	; (800766c <main+0x130>)
 80075aa:	f7fe f84c 	bl	8005646 <osMessageCreate>
 80075ae:	4b30      	ldr	r3, [pc, #192]	; (8007670 <main+0x134>)
 80075b0:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 64);
 80075b2:	a81d      	add	r0, sp, #116	; 0x74
 80075b4:	4c2f      	ldr	r4, [pc, #188]	; (8007674 <main+0x138>)
 80075b6:	0003      	movs	r3, r0
 80075b8:	0022      	movs	r2, r4
 80075ba:	caa2      	ldmia	r2!, {r1, r5, r7}
 80075bc:	c3a2      	stmia	r3!, {r1, r5, r7}
 80075be:	caa2      	ldmia	r2!, {r1, r5, r7}
 80075c0:	c3a2      	stmia	r3!, {r1, r5, r7}
 80075c2:	6812      	ldr	r2, [r2, #0]
 80075c4:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80075c6:	2100      	movs	r1, #0
 80075c8:	f7fd ff9d 	bl	8005506 <osThreadCreate>
 80075cc:	4b2a      	ldr	r3, [pc, #168]	; (8007678 <main+0x13c>)
 80075ce:	6018      	str	r0, [r3, #0]
  osThreadDef(ledcontrol, LEDControlTask, osPriorityAboveNormal, 0, 64);
 80075d0:	a816      	add	r0, sp, #88	; 0x58
 80075d2:	0023      	movs	r3, r4
 80075d4:	331c      	adds	r3, #28
 80075d6:	0002      	movs	r2, r0
 80075d8:	cba2      	ldmia	r3!, {r1, r5, r7}
 80075da:	c2a2      	stmia	r2!, {r1, r5, r7}
 80075dc:	cba2      	ldmia	r3!, {r1, r5, r7}
 80075de:	c2a2      	stmia	r2!, {r1, r5, r7}
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	6013      	str	r3, [r2, #0]
  LEDControlTaskHandle = osThreadCreate(osThread(ledcontrol), NULL);
 80075e4:	2100      	movs	r1, #0
 80075e6:	f7fd ff8e 	bl	8005506 <osThreadCreate>
 80075ea:	6030      	str	r0, [r6, #0]
  osThreadDef(monitoring, MonitorTask, osPriorityHigh, 0, 64);
 80075ec:	a80f      	add	r0, sp, #60	; 0x3c
 80075ee:	0023      	movs	r3, r4
 80075f0:	3338      	adds	r3, #56	; 0x38
 80075f2:	0002      	movs	r2, r0
 80075f4:	cb62      	ldmia	r3!, {r1, r5, r6}
 80075f6:	c262      	stmia	r2!, {r1, r5, r6}
 80075f8:	cb62      	ldmia	r3!, {r1, r5, r6}
 80075fa:	c262      	stmia	r2!, {r1, r5, r6}
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6013      	str	r3, [r2, #0]
  MonitorTaskHandle = osThreadCreate(osThread(monitoring), NULL);
 8007600:	2100      	movs	r1, #0
 8007602:	f7fd ff80 	bl	8005506 <osThreadCreate>
 8007606:	4b1d      	ldr	r3, [pc, #116]	; (800767c <main+0x140>)
 8007608:	6018      	str	r0, [r3, #0]
  osThreadDef(indication, IndicationTask, osPriorityAboveNormal, 0, 64);
 800760a:	a808      	add	r0, sp, #32
 800760c:	0023      	movs	r3, r4
 800760e:	3354      	adds	r3, #84	; 0x54
 8007610:	0002      	movs	r2, r0
 8007612:	cb62      	ldmia	r3!, {r1, r5, r6}
 8007614:	c262      	stmia	r2!, {r1, r5, r6}
 8007616:	cb62      	ldmia	r3!, {r1, r5, r6}
 8007618:	c262      	stmia	r2!, {r1, r5, r6}
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6013      	str	r3, [r2, #0]
  IndicationTaskHandle = osThreadCreate(osThread(indication), NULL);
 800761e:	2100      	movs	r1, #0
 8007620:	f7fd ff71 	bl	8005506 <osThreadCreate>
 8007624:	4643      	mov	r3, r8
 8007626:	6018      	str	r0, [r3, #0]
  osThreadDef(management, ManagementTask, osPriorityNormal, 0, 1024);
 8007628:	a801      	add	r0, sp, #4
 800762a:	3470      	adds	r4, #112	; 0x70
 800762c:	0002      	movs	r2, r0
 800762e:	cc2a      	ldmia	r4!, {r1, r3, r5}
 8007630:	c22a      	stmia	r2!, {r1, r3, r5}
 8007632:	cc2a      	ldmia	r4!, {r1, r3, r5}
 8007634:	c22a      	stmia	r2!, {r1, r3, r5}
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	6013      	str	r3, [r2, #0]
  ManagementTaskHandle = osThreadCreate(osThread(management), NULL);
 800763a:	2100      	movs	r1, #0
 800763c:	f7fd ff63 	bl	8005506 <osThreadCreate>
 8007640:	4b0f      	ldr	r3, [pc, #60]	; (8007680 <main+0x144>)
 8007642:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8007644:	f7fd ff5a 	bl	80054fc <osKernelStart>
  while (1)
 8007648:	e7fe      	b.n	8007648 <main+0x10c>
 800764a:	46c0      	nop			; (mov r8, r8)
 800764c:	20002ac8 	.word	0x20002ac8
 8007650:	20002c38 	.word	0x20002c38
 8007654:	08008545 	.word	0x08008545
 8007658:	08008531 	.word	0x08008531
 800765c:	20002ab4 	.word	0x20002ab4
 8007660:	0800e10c 	.word	0x0800e10c
 8007664:	20002ab8 	.word	0x20002ab8
 8007668:	20002aac 	.word	0x20002aac
 800766c:	0800e0fc 	.word	0x0800e0fc
 8007670:	20002ab0 	.word	0x20002ab0
 8007674:	0800df78 	.word	0x0800df78
 8007678:	20002ac0 	.word	0x20002ac0
 800767c:	20003aac 	.word	0x20003aac
 8007680:	20002d8c 	.word	0x20002d8c

08007684 <HAL_UART_RxCpltCallback>:
{
 8007684:	b510      	push	{r4, lr}
  if(huart->Instance == USART1)
 8007686:	6802      	ldr	r2, [r0, #0]
 8007688:	4b04      	ldr	r3, [pc, #16]	; (800769c <HAL_UART_RxCpltCallback+0x18>)
 800768a:	429a      	cmp	r2, r3
 800768c:	d000      	beq.n	8007690 <HAL_UART_RxCpltCallback+0xc>
}
 800768e:	bd10      	pop	{r4, pc}
    SCP_ByteReceived(aRxBuffer);
 8007690:	4b03      	ldr	r3, [pc, #12]	; (80076a0 <HAL_UART_RxCpltCallback+0x1c>)
 8007692:	7818      	ldrb	r0, [r3, #0]
 8007694:	f7ff fbbc 	bl	8006e10 <SCP_ByteReceived>
}
 8007698:	e7f9      	b.n	800768e <HAL_UART_RxCpltCallback+0xa>
 800769a:	46c0      	nop			; (mov r8, r8)
 800769c:	40013800 	.word	0x40013800
 80076a0:	20002abc 	.word	0x20002abc

080076a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076a4:	b510      	push	{r4, lr}
 80076a6:	0004      	movs	r4, r0
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80076a8:	2380      	movs	r3, #128	; 0x80
 80076aa:	05db      	lsls	r3, r3, #23
 80076ac:	6802      	ldr	r2, [r0, #0]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d008      	beq.n	80076c4 <HAL_TIM_PeriodElapsedCallback+0x20>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM21)
 80076b2:	4b0b      	ldr	r3, [pc, #44]	; (80076e0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80076b4:	6822      	ldr	r2, [r4, #0]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d007      	beq.n	80076ca <HAL_TIM_PeriodElapsedCallback+0x26>
  {
	  osSignalSet (MonitorTaskHandle, 0x00000001);
  }

  if (htim->Instance == TIM7)
 80076ba:	6822      	ldr	r2, [r4, #0]
 80076bc:	4b09      	ldr	r3, [pc, #36]	; (80076e4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80076be:	429a      	cmp	r2, r3
 80076c0:	d009      	beq.n	80076d6 <HAL_TIM_PeriodElapsedCallback+0x32>
  {
	  SCP_Tick(10);
  }

  /* USER CODE END Callback 1 */
}
 80076c2:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 80076c4:	f7fb f9a4 	bl	8002a10 <HAL_IncTick>
 80076c8:	e7f3      	b.n	80076b2 <HAL_TIM_PeriodElapsedCallback+0xe>
	  osSignalSet (MonitorTaskHandle, 0x00000001);
 80076ca:	4b07      	ldr	r3, [pc, #28]	; (80076e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80076cc:	6818      	ldr	r0, [r3, #0]
 80076ce:	2101      	movs	r1, #1
 80076d0:	f7fd ff5c 	bl	800558c <osSignalSet>
 80076d4:	e7f1      	b.n	80076ba <HAL_TIM_PeriodElapsedCallback+0x16>
	  SCP_Tick(10);
 80076d6:	200a      	movs	r0, #10
 80076d8:	f7ff fabc 	bl	8006c54 <SCP_Tick>
}
 80076dc:	e7f1      	b.n	80076c2 <HAL_TIM_PeriodElapsedCallback+0x1e>
 80076de:	46c0      	nop			; (mov r8, r8)
 80076e0:	40010800 	.word	0x40010800
 80076e4:	40001400 	.word	0x40001400
 80076e8:	20003aac 	.word	0x20003aac

080076ec <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80076ec:	4770      	bx	lr
	...

080076f0 <charger_enable>:
		}
	}
}

void charger_enable(void)
{
 80076f0:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(CHR_CTRL_GPIO_Port, CHR_CTRL_Pin, GPIO_PIN_RESET);
 80076f2:	2200      	movs	r2, #0
 80076f4:	2108      	movs	r1, #8
 80076f6:	4802      	ldr	r0, [pc, #8]	; (8007700 <charger_enable+0x10>)
 80076f8:	f7fc f899 	bl	800382e <HAL_GPIO_WritePin>
}
 80076fc:	bd10      	pop	{r4, pc}
 80076fe:	46c0      	nop			; (mov r8, r8)
 8007700:	50000400 	.word	0x50000400

08007704 <charger_disable>:
void charger_disable(void)
{
 8007704:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(CHR_CTRL_GPIO_Port, CHR_CTRL_Pin, GPIO_PIN_SET);
 8007706:	2201      	movs	r2, #1
 8007708:	2108      	movs	r1, #8
 800770a:	4802      	ldr	r0, [pc, #8]	; (8007714 <charger_disable+0x10>)
 800770c:	f7fc f88f 	bl	800382e <HAL_GPIO_WritePin>
}
 8007710:	bd10      	pop	{r4, pc}
 8007712:	46c0      	nop			; (mov r8, r8)
 8007714:	50000400 	.word	0x50000400

08007718 <charger_status>:

ch_state_t charger_status(void)
{
 8007718:	b510      	push	{r4, lr}
	_Bool stat1;
	_Bool stat2;

	/*Read STAT1 pin*/
	if(HAL_GPIO_ReadPin(STAT1_GPIO_Port, STAT1_Pin) == GPIO_PIN_RESET)
 800771a:	2120      	movs	r1, #32
 800771c:	4813      	ldr	r0, [pc, #76]	; (800776c <charger_status+0x54>)
 800771e:	f7fc f87f 	bl	8003820 <HAL_GPIO_ReadPin>
 8007722:	2800      	cmp	r0, #0
 8007724:	d115      	bne.n	8007752 <charger_status+0x3a>
		{stat1 = 0;}
 8007726:	2400      	movs	r4, #0
	else
		{stat1 = 1;}

	/*Read STAT2 pin*/
	if(HAL_GPIO_ReadPin(STAT2_GPIO_Port, STAT2_Pin) == GPIO_PIN_RESET)
 8007728:	2110      	movs	r1, #16
 800772a:	4810      	ldr	r0, [pc, #64]	; (800776c <charger_status+0x54>)
 800772c:	f7fc f878 	bl	8003820 <HAL_GPIO_ReadPin>
 8007730:	2800      	cmp	r0, #0
 8007732:	d110      	bne.n	8007756 <charger_status+0x3e>
		{stat2 = 0;}
 8007734:	2300      	movs	r3, #0
	else
		{stat2 = 1;}

	/*Decode logic*/
	if(stat1 && !stat2)
 8007736:	2c00      	cmp	r4, #0
 8007738:	d001      	beq.n	800773e <charger_status+0x26>
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00d      	beq.n	800775a <charger_status+0x42>
	{
		return IN_PROGRESS;
	}
	if(!stat1 && stat2)
 800773e:	2c00      	cmp	r4, #0
 8007740:	d101      	bne.n	8007746 <charger_status+0x2e>
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10b      	bne.n	800775e <charger_status+0x46>
	{
		return COMPLETED;
	}
	if(!stat1 && !stat2)
 8007746:	2c00      	cmp	r4, #0
 8007748:	d10b      	bne.n	8007762 <charger_status+0x4a>
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00b      	beq.n	8007766 <charger_status+0x4e>
	{
		return INACTIVE;
	}

	return UNKNOWN;
 800774e:	2002      	movs	r0, #2
}
 8007750:	bd10      	pop	{r4, pc}
		{stat1 = 1;}
 8007752:	2401      	movs	r4, #1
 8007754:	e7e8      	b.n	8007728 <charger_status+0x10>
		{stat2 = 1;}
 8007756:	2301      	movs	r3, #1
 8007758:	e7ed      	b.n	8007736 <charger_status+0x1e>
		return IN_PROGRESS;
 800775a:	2001      	movs	r0, #1
 800775c:	e7f8      	b.n	8007750 <charger_status+0x38>
		return COMPLETED;
 800775e:	2000      	movs	r0, #0
 8007760:	e7f6      	b.n	8007750 <charger_status+0x38>
	return UNKNOWN;
 8007762:	2002      	movs	r0, #2
 8007764:	e7f4      	b.n	8007750 <charger_status+0x38>
		return INACTIVE;
 8007766:	2001      	movs	r0, #1
 8007768:	4240      	negs	r0, r0
 800776a:	e7f1      	b.n	8007750 <charger_status+0x38>
 800776c:	50000400 	.word	0x50000400

08007770 <load_setup>:

uint32_t load_setup(uint32_t capacity, uint32_t nightitme)
{
 8007770:	b570      	push	{r4, r5, r6, lr}
 8007772:	000e      	movs	r6, r1
	float capfix;

	/*BMS decreases the capacity?*/
	//capfix = (COEFF_K * capacity) - COEFF_B;

	capfix = 0.70 * capacity;
 8007774:	f7fa ff76 	bl	8002664 <__aeabi_ui2d>
 8007778:	4a15      	ldr	r2, [pc, #84]	; (80077d0 <load_setup+0x60>)
 800777a:	4b16      	ldr	r3, [pc, #88]	; (80077d4 <load_setup+0x64>)
 800777c:	f7fa f8f0 	bl	8001960 <__aeabi_dmul>
 8007780:	f7fa ff96 	bl	80026b0 <__aeabi_d2f>
	capacity = (uint32_t)capfix;
 8007784:	f7f8 fede 	bl	8000544 <__aeabi_f2uiz>
		osMessagePut(led_msg, intensity, osWaitForever);
		return intensity;
	}

	/*Convert capacity to mAs*/
	mAseconds = capacity*3600;
 8007788:	0105      	lsls	r5, r0, #4
 800778a:	1a28      	subs	r0, r5, r0
 800778c:	0105      	lsls	r5, r0, #4
 800778e:	1a2d      	subs	r5, r5, r0
 8007790:	012d      	lsls	r5, r5, #4

	/*Look for load to have LEDs operational over night time*/
	for(intensity = 0; intensity < 32; intensity++)
 8007792:	2400      	movs	r4, #0
 8007794:	2c1f      	cmp	r4, #31
 8007796:	d819      	bhi.n	80077cc <load_setup+0x5c>
	{
		osMessagePut(led_msg, intensity, osWaitForever);
 8007798:	2201      	movs	r2, #1
 800779a:	4b0f      	ldr	r3, [pc, #60]	; (80077d8 <load_setup+0x68>)
 800779c:	6818      	ldr	r0, [r3, #0]
 800779e:	4252      	negs	r2, r2
 80077a0:	0021      	movs	r1, r4
 80077a2:	f7fd ff67 	bl	8005674 <osMessagePut>
		osDelay(300);
 80077a6:	2096      	movs	r0, #150	; 0x96
 80077a8:	0040      	lsls	r0, r0, #1
 80077aa:	f7fd fee6 	bl	800557a <osDelay>
		if(storage.coutput_ma*nightitme > mAseconds)
 80077ae:	4b0b      	ldr	r3, [pc, #44]	; (80077dc <load_setup+0x6c>)
 80077b0:	69db      	ldr	r3, [r3, #28]
 80077b2:	4373      	muls	r3, r6
 80077b4:	42ab      	cmp	r3, r5
 80077b6:	d801      	bhi.n	80077bc <load_setup+0x4c>
	for(intensity = 0; intensity < 32; intensity++)
 80077b8:	3401      	adds	r4, #1
 80077ba:	e7eb      	b.n	8007794 <load_setup+0x24>
		{
			osMessagePut(led_msg, intensity-1, osWaitForever);
 80077bc:	3c01      	subs	r4, #1
 80077be:	2201      	movs	r2, #1
 80077c0:	4b05      	ldr	r3, [pc, #20]	; (80077d8 <load_setup+0x68>)
 80077c2:	6818      	ldr	r0, [r3, #0]
 80077c4:	4252      	negs	r2, r2
 80077c6:	0021      	movs	r1, r4
 80077c8:	f7fd ff54 	bl	8005674 <osMessagePut>
			return intensity-1;
		}
	}

	return intensity;
}
 80077cc:	0020      	movs	r0, r4
 80077ce:	bd70      	pop	{r4, r5, r6, pc}
 80077d0:	66666666 	.word	0x66666666
 80077d4:	3fe66666 	.word	0x3fe66666
 80077d8:	20002ab8 	.word	0x20002ab8
 80077dc:	20003ac0 	.word	0x20003ac0

080077e0 <ManagementTask>:
{
 80077e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e2:	e097      	b.n	8007914 <ManagementTask+0x134>
				charger_enable();
 80077e4:	f7ff ff84 	bl	80076f0 <charger_enable>
				osDelay(5000);
 80077e8:	48c3      	ldr	r0, [pc, #780]	; (8007af8 <ManagementTask+0x318>)
 80077ea:	f7fd fec6 	bl	800557a <osDelay>
				ch_status = charger_status();
 80077ee:	f7ff ff93 	bl	8007718 <charger_status>
				while(ch_status == IN_PROGRESS)
 80077f2:	2801      	cmp	r0, #1
 80077f4:	d120      	bne.n	8007838 <ManagementTask+0x58>
					osDelay(500);
 80077f6:	26fa      	movs	r6, #250	; 0xfa
 80077f8:	0076      	lsls	r6, r6, #1
 80077fa:	0030      	movs	r0, r6
 80077fc:	f7fd febd 	bl	800557a <osDelay>
					osMessagePut(ind_msg, IND_RED, osWaitForever);
 8007800:	2401      	movs	r4, #1
 8007802:	4264      	negs	r4, r4
 8007804:	4dbd      	ldr	r5, [pc, #756]	; (8007afc <ManagementTask+0x31c>)
 8007806:	0022      	movs	r2, r4
 8007808:	2102      	movs	r1, #2
 800780a:	6828      	ldr	r0, [r5, #0]
 800780c:	f7fd ff32 	bl	8005674 <osMessagePut>
					osDelay(500);
 8007810:	0030      	movs	r0, r6
 8007812:	f7fd feb2 	bl	800557a <osDelay>
					osMessagePut(ind_msg, IND_GREEN, osWaitForever);
 8007816:	6828      	ldr	r0, [r5, #0]
 8007818:	0022      	movs	r2, r4
 800781a:	2101      	movs	r1, #1
 800781c:	f7fd ff2a 	bl	8005674 <osMessagePut>
					discharge_lock = 0;
 8007820:	2300      	movs	r3, #0
 8007822:	4ab7      	ldr	r2, [pc, #732]	; (8007b00 <ManagementTask+0x320>)
 8007824:	7013      	strb	r3, [r2, #0]
					battery_charged = 0;
 8007826:	4ab7      	ldr	r2, [pc, #732]	; (8007b04 <ManagementTask+0x324>)
 8007828:	7013      	strb	r3, [r2, #0]
					ch_status = charger_status();
 800782a:	f7ff ff75 	bl	8007718 <charger_status>
					if(!storage.daytime_flag)/*Fail-safe*/
 800782e:	4ab6      	ldr	r2, [pc, #728]	; (8007b08 <ManagementTask+0x328>)
 8007830:	233d      	movs	r3, #61	; 0x3d
 8007832:	5cd3      	ldrb	r3, [r2, r3]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1dc      	bne.n	80077f2 <ManagementTask+0x12>
				if(ch_status == COMPLETED)
 8007838:	2800      	cmp	r0, #0
 800783a:	d114      	bne.n	8007866 <ManagementTask+0x86>
					battery_charged = 1;
 800783c:	4bb1      	ldr	r3, [pc, #708]	; (8007b04 <ManagementTask+0x324>)
 800783e:	2201      	movs	r2, #1
 8007840:	701a      	strb	r2, [r3, #0]
					discharge_lock = 0;
 8007842:	4baf      	ldr	r3, [pc, #700]	; (8007b00 <ManagementTask+0x320>)
 8007844:	2200      	movs	r2, #0
 8007846:	701a      	strb	r2, [r3, #0]
					osMessagePut(ind_msg, IND_GREEN, osWaitForever);
 8007848:	3201      	adds	r2, #1
 800784a:	4bac      	ldr	r3, [pc, #688]	; (8007afc <ManagementTask+0x31c>)
 800784c:	6818      	ldr	r0, [r3, #0]
 800784e:	4252      	negs	r2, r2
 8007850:	2101      	movs	r1, #1
 8007852:	f7fd ff0f 	bl	8005674 <osMessagePut>
					storage.energy_stored_mah = eeprom_info.batt_full_mah;
 8007856:	4bad      	ldr	r3, [pc, #692]	; (8007b0c <ManagementTask+0x32c>)
 8007858:	89d8      	ldrh	r0, [r3, #14]
 800785a:	f7fa ff03 	bl	8002664 <__aeabi_ui2d>
 800785e:	4baa      	ldr	r3, [pc, #680]	; (8007b08 <ManagementTask+0x328>)
 8007860:	6218      	str	r0, [r3, #32]
 8007862:	6259      	str	r1, [r3, #36]	; 0x24
 8007864:	e051      	b.n	800790a <ManagementTask+0x12a>
					charger_disable();
 8007866:	f7ff ff4d 	bl	8007704 <charger_disable>
					osDelay(5000);
 800786a:	48a3      	ldr	r0, [pc, #652]	; (8007af8 <ManagementTask+0x318>)
 800786c:	f7fd fe85 	bl	800557a <osDelay>
					for(i = 0; i < 4; i++)
 8007870:	2400      	movs	r4, #0
 8007872:	e014      	b.n	800789e <ManagementTask+0xbe>
						osMessagePut(ind_msg, IND_RED, osWaitForever);
 8007874:	2501      	movs	r5, #1
 8007876:	426d      	negs	r5, r5
 8007878:	4ea0      	ldr	r6, [pc, #640]	; (8007afc <ManagementTask+0x31c>)
 800787a:	002a      	movs	r2, r5
 800787c:	2102      	movs	r1, #2
 800787e:	6830      	ldr	r0, [r6, #0]
 8007880:	f7fd fef8 	bl	8005674 <osMessagePut>
						osDelay(100);
 8007884:	2064      	movs	r0, #100	; 0x64
 8007886:	f7fd fe78 	bl	800557a <osDelay>
						osMessagePut(ind_msg, IND_OFF, osWaitForever);
 800788a:	6830      	ldr	r0, [r6, #0]
 800788c:	002a      	movs	r2, r5
 800788e:	2100      	movs	r1, #0
 8007890:	f7fd fef0 	bl	8005674 <osMessagePut>
						osDelay(100);
 8007894:	2064      	movs	r0, #100	; 0x64
 8007896:	f7fd fe70 	bl	800557a <osDelay>
					for(i = 0; i < 4; i++)
 800789a:	3401      	adds	r4, #1
 800789c:	b2e4      	uxtb	r4, r4
 800789e:	2c03      	cmp	r4, #3
 80078a0:	d9e8      	bls.n	8007874 <ManagementTask+0x94>
					charger_enable();
 80078a2:	f7ff ff25 	bl	80076f0 <charger_enable>
					osDelay(5000);
 80078a6:	4894      	ldr	r0, [pc, #592]	; (8007af8 <ManagementTask+0x318>)
 80078a8:	f7fd fe67 	bl	800557a <osDelay>
 80078ac:	e02d      	b.n	800790a <ManagementTask+0x12a>
						osMessagePut(ind_msg, IND_GREEN, osWaitForever);
 80078ae:	2501      	movs	r5, #1
 80078b0:	426d      	negs	r5, r5
 80078b2:	4e92      	ldr	r6, [pc, #584]	; (8007afc <ManagementTask+0x31c>)
 80078b4:	002a      	movs	r2, r5
 80078b6:	2101      	movs	r1, #1
 80078b8:	6830      	ldr	r0, [r6, #0]
 80078ba:	f7fd fedb 	bl	8005674 <osMessagePut>
						osDelay(100);
 80078be:	2064      	movs	r0, #100	; 0x64
 80078c0:	f7fd fe5b 	bl	800557a <osDelay>
						osMessagePut(ind_msg, IND_OFF, osWaitForever);
 80078c4:	6830      	ldr	r0, [r6, #0]
 80078c6:	002a      	movs	r2, r5
 80078c8:	2100      	movs	r1, #0
 80078ca:	f7fd fed3 	bl	8005674 <osMessagePut>
						osDelay(100);
 80078ce:	2064      	movs	r0, #100	; 0x64
 80078d0:	f7fd fe53 	bl	800557a <osDelay>
					for(i = 0; i < 4; i++)
 80078d4:	3401      	adds	r4, #1
 80078d6:	b2e4      	uxtb	r4, r4
 80078d8:	2c03      	cmp	r4, #3
 80078da:	d9e8      	bls.n	80078ae <ManagementTask+0xce>
 80078dc:	e015      	b.n	800790a <ManagementTask+0x12a>
 80078de:	2400      	movs	r4, #0
 80078e0:	e7fa      	b.n	80078d8 <ManagementTask+0xf8>
			charger_disable();
 80078e2:	f7ff ff0f 	bl	8007704 <charger_disable>
			osMessagePut(ind_msg, IND_OFF, osWaitForever);
 80078e6:	2401      	movs	r4, #1
 80078e8:	4264      	negs	r4, r4
 80078ea:	4b84      	ldr	r3, [pc, #528]	; (8007afc <ManagementTask+0x31c>)
 80078ec:	6818      	ldr	r0, [r3, #0]
 80078ee:	0022      	movs	r2, r4
 80078f0:	2100      	movs	r1, #0
 80078f2:	f7fd febf 	bl	8005674 <osMessagePut>
			osMessagePut(led_msg, 0, osWaitForever);
 80078f6:	4b86      	ldr	r3, [pc, #536]	; (8007b10 <ManagementTask+0x330>)
 80078f8:	6818      	ldr	r0, [r3, #0]
 80078fa:	0022      	movs	r2, r4
 80078fc:	2100      	movs	r1, #0
 80078fe:	f7fd feb9 	bl	8005674 <osMessagePut>
			if(!discharge_lock)
 8007902:	4b7f      	ldr	r3, [pc, #508]	; (8007b00 <ManagementTask+0x320>)
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d026      	beq.n	8007958 <ManagementTask+0x178>
		if(battery_charged)
 800790a:	4b7e      	ldr	r3, [pc, #504]	; (8007b04 <ManagementTask+0x324>)
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d000      	beq.n	8007914 <ManagementTask+0x134>
 8007912:	e0d1      	b.n	8007ab8 <ManagementTask+0x2d8>
		osDelay(1000);
 8007914:	20fa      	movs	r0, #250	; 0xfa
 8007916:	0080      	lsls	r0, r0, #2
 8007918:	f7fd fe2f 	bl	800557a <osDelay>
		if(storage.daytime_flag)
 800791c:	4a7a      	ldr	r2, [pc, #488]	; (8007b08 <ManagementTask+0x328>)
 800791e:	233d      	movs	r3, #61	; 0x3d
 8007920:	5cd3      	ldrb	r3, [r2, r3]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d0dd      	beq.n	80078e2 <ManagementTask+0x102>
			if(storage.vinput_mv+100 > MPPT_MV)
 8007926:	68d3      	ldr	r3, [r2, #12]
 8007928:	0019      	movs	r1, r3
 800792a:	3164      	adds	r1, #100	; 0x64
 800792c:	4a79      	ldr	r2, [pc, #484]	; (8007b14 <ManagementTask+0x334>)
 800792e:	4291      	cmp	r1, r2
 8007930:	d900      	bls.n	8007934 <ManagementTask+0x154>
 8007932:	e757      	b.n	80077e4 <ManagementTask+0x4>
			else if(storage.vinput_mv-100 < MPPT_MV)
 8007934:	3b64      	subs	r3, #100	; 0x64
 8007936:	4a78      	ldr	r2, [pc, #480]	; (8007b18 <ManagementTask+0x338>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d8e6      	bhi.n	800790a <ManagementTask+0x12a>
				charger_disable();
 800793c:	f7ff fee2 	bl	8007704 <charger_disable>
				if(battery_charged)
 8007940:	4b70      	ldr	r3, [pc, #448]	; (8007b04 <ManagementTask+0x324>)
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1ca      	bne.n	80078de <ManagementTask+0xfe>
					osMessagePut(ind_msg, IND_OFF, osWaitForever);
 8007948:	2201      	movs	r2, #1
 800794a:	4b6c      	ldr	r3, [pc, #432]	; (8007afc <ManagementTask+0x31c>)
 800794c:	6818      	ldr	r0, [r3, #0]
 800794e:	4252      	negs	r2, r2
 8007950:	2100      	movs	r1, #0
 8007952:	f7fd fe8f 	bl	8005674 <osMessagePut>
 8007956:	e7d8      	b.n	800790a <ManagementTask+0x12a>
				if(battery_charged)
 8007958:	4b6a      	ldr	r3, [pc, #424]	; (8007b04 <ManagementTask+0x324>)
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d126      	bne.n	80079ae <ManagementTask+0x1ce>
					storage.energy_stored_mah -= storage.energy_released_mah;
 8007960:	4e69      	ldr	r6, [pc, #420]	; (8007b08 <ManagementTask+0x328>)
 8007962:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8007964:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8007966:	6a30      	ldr	r0, [r6, #32]
 8007968:	6a71      	ldr	r1, [r6, #36]	; 0x24
 800796a:	f7fa fa65 	bl	8001e38 <__aeabi_dsub>
 800796e:	0004      	movs	r4, r0
 8007970:	000d      	movs	r5, r1
 8007972:	6234      	str	r4, [r6, #32]
 8007974:	6275      	str	r5, [r6, #36]	; 0x24
					storage.energy_released_mah = 0;
 8007976:	2200      	movs	r2, #0
 8007978:	2300      	movs	r3, #0
 800797a:	62b2      	str	r2, [r6, #40]	; 0x28
 800797c:	62f3      	str	r3, [r6, #44]	; 0x2c
					if(storage.energy_stored_mah > 0)
 800797e:	f7f8 fd7f 	bl	8000480 <__aeabi_dcmpgt>
 8007982:	2800      	cmp	r0, #0
 8007984:	d01e      	beq.n	80079c4 <ManagementTask+0x1e4>
						storage.led_level = load_setup(storage.energy_stored_mah, HOURS_24 - storage.daylength_s);
 8007986:	0037      	movs	r7, r6
 8007988:	4e64      	ldr	r6, [pc, #400]	; (8007b1c <ManagementTask+0x33c>)
 800798a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798c:	1af6      	subs	r6, r6, r3
 800798e:	0020      	movs	r0, r4
 8007990:	0029      	movs	r1, r5
 8007992:	f7f8 fdef 	bl	8000574 <__aeabi_d2uiz>
 8007996:	0031      	movs	r1, r6
 8007998:	f7ff feea 	bl	8007770 <load_setup>
 800799c:	233c      	movs	r3, #60	; 0x3c
 800799e:	54f8      	strb	r0, [r7, r3]
				modem_data.day_lenght_store = storage.daylength_s;
 80079a0:	4b59      	ldr	r3, [pc, #356]	; (8007b08 <ManagementTask+0x328>)
 80079a2:	4a5f      	ldr	r2, [pc, #380]	; (8007b20 <ManagementTask+0x340>)
 80079a4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80079a6:	66d1      	str	r1, [r2, #108]	; 0x6c
				storage.daylength_s = 0;
 80079a8:	2200      	movs	r2, #0
 80079aa:	639a      	str	r2, [r3, #56]	; 0x38
 80079ac:	e035      	b.n	8007a1a <ManagementTask+0x23a>
					storage.led_level = load_setup(eeprom_info.batt_full_mah, HOURS_24 - storage.daylength_s);
 80079ae:	4b57      	ldr	r3, [pc, #348]	; (8007b0c <ManagementTask+0x32c>)
 80079b0:	89d8      	ldrh	r0, [r3, #14]
 80079b2:	4c55      	ldr	r4, [pc, #340]	; (8007b08 <ManagementTask+0x328>)
 80079b4:	4959      	ldr	r1, [pc, #356]	; (8007b1c <ManagementTask+0x33c>)
 80079b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80079b8:	1ac9      	subs	r1, r1, r3
 80079ba:	f7ff fed9 	bl	8007770 <load_setup>
 80079be:	233c      	movs	r3, #60	; 0x3c
 80079c0:	54e0      	strb	r0, [r4, r3]
 80079c2:	e7ed      	b.n	80079a0 <ManagementTask+0x1c0>
						storage.energy_stored_mah = 0;
 80079c4:	4b50      	ldr	r3, [pc, #320]	; (8007b08 <ManagementTask+0x328>)
 80079c6:	2000      	movs	r0, #0
 80079c8:	2100      	movs	r1, #0
 80079ca:	6218      	str	r0, [r3, #32]
 80079cc:	6259      	str	r1, [r3, #36]	; 0x24
						storage.led_level = 0;
 80079ce:	223c      	movs	r2, #60	; 0x3c
 80079d0:	2100      	movs	r1, #0
 80079d2:	5499      	strb	r1, [r3, r2]
						osMessagePut(led_msg, 0, osWaitForever);
 80079d4:	3a3b      	subs	r2, #59	; 0x3b
 80079d6:	4b4e      	ldr	r3, [pc, #312]	; (8007b10 <ManagementTask+0x330>)
 80079d8:	6818      	ldr	r0, [r3, #0]
 80079da:	4252      	negs	r2, r2
 80079dc:	f7fd fe4a 	bl	8005674 <osMessagePut>
 80079e0:	e7de      	b.n	80079a0 <ManagementTask+0x1c0>
						osMessagePut(ind_msg, IND_RED, osWaitForever);
 80079e2:	2401      	movs	r4, #1
 80079e4:	4264      	negs	r4, r4
 80079e6:	4d45      	ldr	r5, [pc, #276]	; (8007afc <ManagementTask+0x31c>)
 80079e8:	0022      	movs	r2, r4
 80079ea:	2102      	movs	r1, #2
 80079ec:	6828      	ldr	r0, [r5, #0]
 80079ee:	f7fd fe41 	bl	8005674 <osMessagePut>
						osDelay(50);
 80079f2:	2032      	movs	r0, #50	; 0x32
 80079f4:	f7fd fdc1 	bl	800557a <osDelay>
						osMessagePut(ind_msg, IND_OFF, osWaitForever);
 80079f8:	6828      	ldr	r0, [r5, #0]
 80079fa:	0022      	movs	r2, r4
 80079fc:	2100      	movs	r1, #0
 80079fe:	f7fd fe39 	bl	8005674 <osMessagePut>
						osDelay(950);
 8007a02:	4848      	ldr	r0, [pc, #288]	; (8007b24 <ManagementTask+0x344>)
 8007a04:	f7fd fdb9 	bl	800557a <osDelay>
					if(storage.daytime_flag)
 8007a08:	4a3f      	ldr	r2, [pc, #252]	; (8007b08 <ManagementTask+0x328>)
 8007a0a:	233d      	movs	r3, #61	; 0x3d
 8007a0c:	5cd3      	ldrb	r3, [r2, r3]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d121      	bne.n	8007a56 <ManagementTask+0x276>
					if(storage.vbatt_mv < BATT_LOW_MV)
 8007a12:	6912      	ldr	r2, [r2, #16]
 8007a14:	4b44      	ldr	r3, [pc, #272]	; (8007b28 <ManagementTask+0x348>)
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d91a      	bls.n	8007a50 <ManagementTask+0x270>
					if(storage.led_level)
 8007a1a:	4a3b      	ldr	r2, [pc, #236]	; (8007b08 <ManagementTask+0x328>)
 8007a1c:	233c      	movs	r3, #60	; 0x3c
 8007a1e:	5cd3      	ldrb	r3, [r2, r3]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d0de      	beq.n	80079e2 <ManagementTask+0x202>
						osMessagePut(ind_msg, IND_GREEN, osWaitForever);
 8007a24:	2501      	movs	r5, #1
 8007a26:	426d      	negs	r5, r5
 8007a28:	4e34      	ldr	r6, [pc, #208]	; (8007afc <ManagementTask+0x31c>)
 8007a2a:	002a      	movs	r2, r5
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	6830      	ldr	r0, [r6, #0]
 8007a30:	f7fd fe20 	bl	8005674 <osMessagePut>
						osDelay(500);
 8007a34:	24fa      	movs	r4, #250	; 0xfa
 8007a36:	0064      	lsls	r4, r4, #1
 8007a38:	0020      	movs	r0, r4
 8007a3a:	f7fd fd9e 	bl	800557a <osDelay>
						osMessagePut(ind_msg, IND_OFF, osWaitForever);
 8007a3e:	6830      	ldr	r0, [r6, #0]
 8007a40:	002a      	movs	r2, r5
 8007a42:	2100      	movs	r1, #0
 8007a44:	f7fd fe16 	bl	8005674 <osMessagePut>
						osDelay(500);
 8007a48:	0020      	movs	r0, r4
 8007a4a:	f7fd fd96 	bl	800557a <osDelay>
 8007a4e:	e7db      	b.n	8007a08 <ManagementTask+0x228>
						discharge_lock = 1;
 8007a50:	4b2b      	ldr	r3, [pc, #172]	; (8007b00 <ManagementTask+0x320>)
 8007a52:	2201      	movs	r2, #1
 8007a54:	701a      	strb	r2, [r3, #0]
				osMessagePut(led_msg, 0, osWaitForever);
 8007a56:	2401      	movs	r4, #1
 8007a58:	4264      	negs	r4, r4
 8007a5a:	4b2d      	ldr	r3, [pc, #180]	; (8007b10 <ManagementTask+0x330>)
 8007a5c:	6818      	ldr	r0, [r3, #0]
 8007a5e:	0022      	movs	r2, r4
 8007a60:	2100      	movs	r1, #0
 8007a62:	f7fd fe07 	bl	8005674 <osMessagePut>
				osMessagePut(ind_msg, IND_OFF, osWaitForever);
 8007a66:	4b25      	ldr	r3, [pc, #148]	; (8007afc <ManagementTask+0x31c>)
 8007a68:	6818      	ldr	r0, [r3, #0]
 8007a6a:	0022      	movs	r2, r4
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	f7fd fe01 	bl	8005674 <osMessagePut>
				eeprom_info.total_batt_ouput_ah = storage.total_batt_ouput_ah;
 8007a72:	4c25      	ldr	r4, [pc, #148]	; (8007b08 <ManagementTask+0x328>)
 8007a74:	4825      	ldr	r0, [pc, #148]	; (8007b0c <ManagementTask+0x32c>)
 8007a76:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007a78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a7a:	6002      	str	r2, [r0, #0]
 8007a7c:	6043      	str	r3, [r0, #4]
				eeprom_save(&eeprom_info);
 8007a7e:	f7ff fd49 	bl	8007514 <eeprom_save>
				if(storage.vbatt_mv > BATT_LOW_MV - 500)
 8007a82:	6922      	ldr	r2, [r4, #16]
 8007a84:	4b29      	ldr	r3, [pc, #164]	; (8007b2c <ManagementTask+0x34c>)
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d80a      	bhi.n	8007aa0 <ManagementTask+0x2c0>
				battery_charged = 0;
 8007a8a:	4b1e      	ldr	r3, [pc, #120]	; (8007b04 <ManagementTask+0x324>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	701a      	strb	r2, [r3, #0]
				storage.energy_stored_mah = 0;
 8007a90:	4b1d      	ldr	r3, [pc, #116]	; (8007b08 <ManagementTask+0x328>)
 8007a92:	2000      	movs	r0, #0
 8007a94:	2100      	movs	r1, #0
 8007a96:	6218      	str	r0, [r3, #32]
 8007a98:	6259      	str	r1, [r3, #36]	; 0x24
				storage.energy_released_mah = 0;
 8007a9a:	6298      	str	r0, [r3, #40]	; 0x28
 8007a9c:	62d9      	str	r1, [r3, #44]	; 0x2c
 8007a9e:	e734      	b.n	800790a <ManagementTask+0x12a>
					for(i = 0; i < 5; i++)
 8007aa0:	2400      	movs	r4, #0
 8007aa2:	2c04      	cmp	r4, #4
 8007aa4:	d8f1      	bhi.n	8007a8a <ManagementTask+0x2aa>
						sts = TelitCloudUpload();
 8007aa6:	f000 fd57 	bl	8008558 <TelitCloudUpload>
						if(sts == UPLOAD_OK)
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	d0ed      	beq.n	8007a8a <ManagementTask+0x2aa>
						if(sts == MODEM_NO_OPERATOR_PRESENT)
 8007aae:	2808      	cmp	r0, #8
 8007ab0:	d0eb      	beq.n	8007a8a <ManagementTask+0x2aa>
					for(i = 0; i < 5; i++)
 8007ab2:	3401      	adds	r4, #1
 8007ab4:	b2e4      	uxtb	r4, r4
 8007ab6:	e7f4      	b.n	8007aa2 <ManagementTask+0x2c2>
			if(storage.coutput_ma > max_idle_current)
 8007ab8:	4b13      	ldr	r3, [pc, #76]	; (8007b08 <ManagementTask+0x328>)
 8007aba:	69db      	ldr	r3, [r3, #28]
 8007abc:	4a1c      	ldr	r2, [pc, #112]	; (8007b30 <ManagementTask+0x350>)
 8007abe:	6812      	ldr	r2, [r2, #0]
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	dd01      	ble.n	8007ac8 <ManagementTask+0x2e8>
				max_idle_current = storage.coutput_ma;
 8007ac4:	4a1a      	ldr	r2, [pc, #104]	; (8007b30 <ManagementTask+0x350>)
 8007ac6:	6013      	str	r3, [r2, #0]
			if(max_idle_current > IDLE_CURR_MA)
 8007ac8:	4b19      	ldr	r3, [pc, #100]	; (8007b30 <ManagementTask+0x350>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b14      	cmp	r3, #20
 8007ace:	dd04      	ble.n	8007ada <ManagementTask+0x2fa>
				max_idle_current = 0;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	4a17      	ldr	r2, [pc, #92]	; (8007b30 <ManagementTask+0x350>)
 8007ad4:	6013      	str	r3, [r2, #0]
				battery_charged = 0;
 8007ad6:	4a0b      	ldr	r2, [pc, #44]	; (8007b04 <ManagementTask+0x324>)
 8007ad8:	7013      	strb	r3, [r2, #0]
			if(storage.energy_released_mah > IDLE_CURR_MAH)
 8007ada:	4b0b      	ldr	r3, [pc, #44]	; (8007b08 <ManagementTask+0x328>)
 8007adc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007ade:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	4b14      	ldr	r3, [pc, #80]	; (8007b34 <ManagementTask+0x354>)
 8007ae4:	f7f8 fccc 	bl	8000480 <__aeabi_dcmpgt>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	d100      	bne.n	8007aee <ManagementTask+0x30e>
 8007aec:	e712      	b.n	8007914 <ManagementTask+0x134>
				battery_charged = 0;
 8007aee:	4b05      	ldr	r3, [pc, #20]	; (8007b04 <ManagementTask+0x324>)
 8007af0:	2200      	movs	r2, #0
 8007af2:	701a      	strb	r2, [r3, #0]
 8007af4:	e70e      	b.n	8007914 <ManagementTask+0x134>
 8007af6:	46c0      	nop			; (mov r8, r8)
 8007af8:	00001388 	.word	0x00001388
 8007afc:	20002ab0 	.word	0x20002ab0
 8007b00:	20002d91 	.word	0x20002d91
 8007b04:	20002d90 	.word	0x20002d90
 8007b08:	20003ac0 	.word	0x20003ac0
 8007b0c:	20002ac8 	.word	0x20002ac8
 8007b10:	20002ab8 	.word	0x20002ab8
 8007b14:	0000445c 	.word	0x0000445c
 8007b18:	0000445b 	.word	0x0000445b
 8007b1c:	00015180 	.word	0x00015180
 8007b20:	200035d8 	.word	0x200035d8
 8007b24:	000003b6 	.word	0x000003b6
 8007b28:	0000270f 	.word	0x0000270f
 8007b2c:	0000251c 	.word	0x0000251c
 8007b30:	20002d94 	.word	0x20002d94
 8007b34:	40690000 	.word	0x40690000

08007b38 <ContextDisconnect>:

    return false;
}

static _Bool ContextDisconnect(void)
{
 8007b38:	b510      	push	{r4, lr}
  char *result = NULL;
  result = SCP_SendCommandWaitAnswer("AT+CGACT=1,0\r\n", "OK", 1000, 1);
 8007b3a:	22fa      	movs	r2, #250	; 0xfa
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	0092      	lsls	r2, r2, #2
 8007b40:	4904      	ldr	r1, [pc, #16]	; (8007b54 <ContextDisconnect+0x1c>)
 8007b42:	4805      	ldr	r0, [pc, #20]	; (8007b58 <ContextDisconnect+0x20>)
 8007b44:	f7ff f912 	bl	8006d6c <SCP_SendCommandWaitAnswer>
  if(result)
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	d001      	beq.n	8007b50 <ContextDisconnect+0x18>
  {
    return true;
 8007b4c:	2001      	movs	r0, #1
  }
  else return false;
}
 8007b4e:	bd10      	pop	{r4, pc}
  else return false;
 8007b50:	2000      	movs	r0, #0
 8007b52:	e7fc      	b.n	8007b4e <ContextDisconnect+0x16>
 8007b54:	0800e158 	.word	0x0800e158
 8007b58:	0800e15c 	.word	0x0800e15c

08007b5c <GetIMEI>:
    return NULL;
}

/*Returns pointer to IMEI string of 15 numbers*/
static char* GetIMEI(void)
{
 8007b5c:	b510      	push	{r4, lr}
    static char imei[16];
    _Bool isDigit = false;
    uint32_t j = 0, i=0;

    /*Request IMEI*/
    result = SCP_SendCommandWaitAnswer("AT+CGSN\r\n", "OK", 100, 1);
 8007b5e:	2301      	movs	r3, #1
 8007b60:	2264      	movs	r2, #100	; 0x64
 8007b62:	491a      	ldr	r1, [pc, #104]	; (8007bcc <GetIMEI+0x70>)
 8007b64:	481a      	ldr	r0, [pc, #104]	; (8007bd0 <GetIMEI+0x74>)
 8007b66:	f7ff f901 	bl	8006d6c <SCP_SendCommandWaitAnswer>
 8007b6a:	1e04      	subs	r4, r0, #0

    /*We have response, lets look for the info in the receiver buffer*/
    if(result)
 8007b6c:	d02a      	beq.n	8007bc4 <GetIMEI+0x68>
    uint32_t j = 0, i=0;
 8007b6e:	2400      	movs	r4, #0
    {
        result = NULL;

        /*Lets look for a ASCII number...*/
        while((j < strlen((char*)SCPHandler.RxBuffer)) && (!isDigit))
 8007b70:	4818      	ldr	r0, [pc, #96]	; (8007bd4 <GetIMEI+0x78>)
 8007b72:	f7f8 fac9 	bl	8000108 <strlen>
 8007b76:	42a0      	cmp	r0, r4
 8007b78:	d90d      	bls.n	8007b96 <GetIMEI+0x3a>
        {
          if((SCPHandler.RxBuffer[j] > 47) && (SCPHandler.RxBuffer[j] < 58))
 8007b7a:	4b17      	ldr	r3, [pc, #92]	; (8007bd8 <GetIMEI+0x7c>)
 8007b7c:	191b      	adds	r3, r3, r4
 8007b7e:	7b1b      	ldrb	r3, [r3, #12]
 8007b80:	3b30      	subs	r3, #48	; 0x30
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b09      	cmp	r3, #9
 8007b86:	d901      	bls.n	8007b8c <GetIMEI+0x30>
              isDigit = true;
              result = (char*)&SCPHandler.RxBuffer[j];
              break;
          }

          j++;
 8007b88:	3401      	adds	r4, #1
 8007b8a:	e7f1      	b.n	8007b70 <GetIMEI+0x14>
              result = (char*)&SCPHandler.RxBuffer[j];
 8007b8c:	3408      	adds	r4, #8
 8007b8e:	4812      	ldr	r0, [pc, #72]	; (8007bd8 <GetIMEI+0x7c>)
 8007b90:	1824      	adds	r4, r4, r0
 8007b92:	3404      	adds	r4, #4
              break;
 8007b94:	e000      	b.n	8007b98 <GetIMEI+0x3c>
        result = NULL;
 8007b96:	2400      	movs	r4, #0
        }

        /*First number of IMEI found, copy the number to the RAM and return */
        if(result)
 8007b98:	2c00      	cmp	r4, #0
 8007b9a:	d013      	beq.n	8007bc4 <GetIMEI+0x68>
        {
            memset(imei, 0x00, 16);
 8007b9c:	2210      	movs	r2, #16
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	480e      	ldr	r0, [pc, #56]	; (8007bdc <GetIMEI+0x80>)
 8007ba2:	f001 fa97 	bl	80090d4 <memset>

            /*Maximum 15 chars for IMEI is allowed*/
            for(i = 0; i < 15; i++)
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	2b0e      	cmp	r3, #14
 8007baa:	d80a      	bhi.n	8007bc2 <GetIMEI+0x66>
            {
                /*Not a number in IMEI shall be treated as error*/
                if(!(*result > 47 && *result < 58))
 8007bac:	7821      	ldrb	r1, [r4, #0]
 8007bae:	000a      	movs	r2, r1
 8007bb0:	3a30      	subs	r2, #48	; 0x30
 8007bb2:	b2d2      	uxtb	r2, r2
 8007bb4:	2a09      	cmp	r2, #9
 8007bb6:	d807      	bhi.n	8007bc8 <GetIMEI+0x6c>
                {
                    return NULL;
                }

                imei[i] = *result;
 8007bb8:	4a08      	ldr	r2, [pc, #32]	; (8007bdc <GetIMEI+0x80>)
 8007bba:	54d1      	strb	r1, [r2, r3]

                result++;
 8007bbc:	3401      	adds	r4, #1
            for(i = 0; i < 15; i++)
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	e7f2      	b.n	8007ba8 <GetIMEI+0x4c>
            }

            return imei;
 8007bc2:	4c06      	ldr	r4, [pc, #24]	; (8007bdc <GetIMEI+0x80>)
        }
    }

    return NULL;
}
 8007bc4:	0020      	movs	r0, r4
 8007bc6:	bd10      	pop	{r4, pc}
                    return NULL;
 8007bc8:	2400      	movs	r4, #0
 8007bca:	e7fb      	b.n	8007bc4 <GetIMEI+0x68>
 8007bcc:	0800e158 	.word	0x0800e158
 8007bd0:	0800e16c 	.word	0x0800e16c
 8007bd4:	2000234c 	.word	0x2000234c
 8007bd8:	20002340 	.word	0x20002340
 8007bdc:	200035c8 	.word	0x200035c8

08007be0 <GetID>:

/*Request model identification*/
static char* GetID(void)
{
 8007be0:	b510      	push	{r4, lr}
    char *result = NULL;
    static char device_id[21];

    /*Request model identification*/
    result = SCP_SendCommandWaitAnswer("AT+CGMM\r\n", "OK", 100, 1);
 8007be2:	2301      	movs	r3, #1
 8007be4:	2264      	movs	r2, #100	; 0x64
 8007be6:	4911      	ldr	r1, [pc, #68]	; (8007c2c <GetID+0x4c>)
 8007be8:	4811      	ldr	r0, [pc, #68]	; (8007c30 <GetID+0x50>)
 8007bea:	f7ff f8bf 	bl	8006d6c <SCP_SendCommandWaitAnswer>

    /*We have response, lets look for the info in the receiver buffer*/
    if(result)
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	d01b      	beq.n	8007c2a <GetID+0x4a>
    {
        result = NULL;
        /*Lets look for a (\n) char as the begining of device name*/
        result = strchr((char*)SCPHandler.RxBuffer, '\n');
 8007bf2:	210a      	movs	r1, #10
 8007bf4:	480f      	ldr	r0, [pc, #60]	; (8007c34 <GetID+0x54>)
 8007bf6:	f001 faa2 	bl	800913e <strchr>

        if(result)
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	d015      	beq.n	8007c2a <GetID+0x4a>
        {
            result++;
 8007bfe:	1c44      	adds	r4, r0, #1

            /*Copy operator to the RAM and return*/
            memset(device_id, 0x00, 21);
 8007c00:	2215      	movs	r2, #21
 8007c02:	2100      	movs	r1, #0
 8007c04:	480c      	ldr	r0, [pc, #48]	; (8007c38 <GetID+0x58>)
 8007c06:	f001 fa65 	bl	80090d4 <memset>

            /*Maximum 20 chars for model identification allowed*/
            for(uint8_t i = 0; i < 20; i++)
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	2b13      	cmp	r3, #19
 8007c0e:	d809      	bhi.n	8007c24 <GetID+0x44>
            {
                device_id[i] = *result;
 8007c10:	7821      	ldrb	r1, [r4, #0]
 8007c12:	4a09      	ldr	r2, [pc, #36]	; (8007c38 <GetID+0x58>)
 8007c14:	54d1      	strb	r1, [r2, r3]
                result++;
 8007c16:	3401      	adds	r4, #1

                /*Device_id end*/
                if(*result == '\r')
 8007c18:	7822      	ldrb	r2, [r4, #0]
 8007c1a:	2a0d      	cmp	r2, #13
 8007c1c:	d004      	beq.n	8007c28 <GetID+0x48>
            for(uint8_t i = 0; i < 20; i++)
 8007c1e:	3301      	adds	r3, #1
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	e7f3      	b.n	8007c0c <GetID+0x2c>
            }
        }

    }

    return NULL;
 8007c24:	2000      	movs	r0, #0
 8007c26:	e000      	b.n	8007c2a <GetID+0x4a>
                    return device_id;
 8007c28:	4803      	ldr	r0, [pc, #12]	; (8007c38 <GetID+0x58>)
}
 8007c2a:	bd10      	pop	{r4, pc}
 8007c2c:	0800e158 	.word	0x0800e158
 8007c30:	0800e178 	.word	0x0800e178
 8007c34:	2000234c 	.word	0x2000234c
 8007c38:	200035b0 	.word	0x200035b0

08007c3c <GetVersion>:

/*Returns pointer to firmware version*/
static char* GetVersion(void)
{
 8007c3c:	b510      	push	{r4, lr}
    char *result = NULL;
    static char version[16];
    uint32_t i=0;

    /*Request IMEI*/
    result = SCP_SendCommandWaitAnswer("AT+CGMR\r\n", "OK", 100, 1);
 8007c3e:	2301      	movs	r3, #1
 8007c40:	2264      	movs	r2, #100	; 0x64
 8007c42:	4910      	ldr	r1, [pc, #64]	; (8007c84 <GetVersion+0x48>)
 8007c44:	4810      	ldr	r0, [pc, #64]	; (8007c88 <GetVersion+0x4c>)
 8007c46:	f7ff f891 	bl	8006d6c <SCP_SendCommandWaitAnswer>

    /*We have response, lets look for the info in the receiver buffer*/
    if(result)
 8007c4a:	2800      	cmp	r0, #0
 8007c4c:	d018      	beq.n	8007c80 <GetVersion+0x44>
    {
        result = NULL;

        /*Lets look for a (\n) char as the begining of firmware version string*/
        result = strchr((char*)SCPHandler.RxBuffer, '\n');
 8007c4e:	210a      	movs	r1, #10
 8007c50:	480e      	ldr	r0, [pc, #56]	; (8007c8c <GetVersion+0x50>)
 8007c52:	f001 fa74 	bl	800913e <strchr>

        /*Copy string to RAM */
        if(result)
 8007c56:	2800      	cmp	r0, #0
 8007c58:	d012      	beq.n	8007c80 <GetVersion+0x44>
        {
            result++;
 8007c5a:	1c44      	adds	r4, r0, #1
            memset(version, 0x00, 16);
 8007c5c:	2210      	movs	r2, #16
 8007c5e:	2100      	movs	r1, #0
 8007c60:	480b      	ldr	r0, [pc, #44]	; (8007c90 <GetVersion+0x54>)
 8007c62:	f001 fa37 	bl	80090d4 <memset>

            /*Maximum 15 chars limit*/
            for(i = 0; i < 15; i++)
 8007c66:	2300      	movs	r3, #0
 8007c68:	e000      	b.n	8007c6c <GetVersion+0x30>
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	2b0e      	cmp	r3, #14
 8007c6e:	d806      	bhi.n	8007c7e <GetVersion+0x42>
            {

                version[i] = *result;
 8007c70:	7821      	ldrb	r1, [r4, #0]
 8007c72:	4a07      	ldr	r2, [pc, #28]	; (8007c90 <GetVersion+0x54>)
 8007c74:	54d1      	strb	r1, [r2, r3]
                result++;
 8007c76:	3401      	adds	r4, #1

                if(*result == '\r')
 8007c78:	7822      	ldrb	r2, [r4, #0]
 8007c7a:	2a0d      	cmp	r2, #13
 8007c7c:	d1f5      	bne.n	8007c6a <GetVersion+0x2e>
                {
                    break;
                }
            }

            return version;
 8007c7e:	4804      	ldr	r0, [pc, #16]	; (8007c90 <GetVersion+0x54>)
        }
    }

    return NULL;
}
 8007c80:	bd10      	pop	{r4, pc}
 8007c82:	46c0      	nop			; (mov r8, r8)
 8007c84:	0800e158 	.word	0x0800e158
 8007c88:	0800e184 	.word	0x0800e184
 8007c8c:	2000234c 	.word	0x2000234c
 8007c90:	20003a9c 	.word	0x20003a9c

08007c94 <ModemCloseTcpSocket>:
    return false;
}

/* Close socket */
static _Bool ModemCloseTcpSocket(int socket_id)
{
 8007c94:	b510      	push	{r4, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	0004      	movs	r4, r0
    char *result = NULL;
    char buff[15];

    memset(buff, 0, sizeof(buff));
 8007c9a:	220f      	movs	r2, #15
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	4668      	mov	r0, sp
 8007ca0:	f001 fa18 	bl	80090d4 <memset>

    /* Close selected socket */
    sprintf(buff, "AT+ETL=0,%d\r\n", socket_id);
 8007ca4:	0022      	movs	r2, r4
 8007ca6:	4908      	ldr	r1, [pc, #32]	; (8007cc8 <ModemCloseTcpSocket+0x34>)
 8007ca8:	4668      	mov	r0, sp
 8007caa:	f001 fa1b 	bl	80090e4 <sprintf>
    result = SCP_SendCommandWaitAnswer(buff, "OK", 2000, 1);
 8007cae:	22fa      	movs	r2, #250	; 0xfa
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	00d2      	lsls	r2, r2, #3
 8007cb4:	4905      	ldr	r1, [pc, #20]	; (8007ccc <ModemCloseTcpSocket+0x38>)
 8007cb6:	4668      	mov	r0, sp
 8007cb8:	f7ff f858 	bl	8006d6c <SCP_SendCommandWaitAnswer>

    if(result)
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	d000      	beq.n	8007cc2 <ModemCloseTcpSocket+0x2e>
    {
      return true;
 8007cc0:	2001      	movs	r0, #1
    }

     return false;
}
 8007cc2:	b004      	add	sp, #16
 8007cc4:	bd10      	pop	{r4, pc}
 8007cc6:	46c0      	nop			; (mov r8, r8)
 8007cc8:	0800e190 	.word	0x0800e190
 8007ccc:	0800e158 	.word	0x0800e158

08007cd0 <SetLED>:
{
 8007cd0:	b510      	push	{r4, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	0004      	movs	r4, r0
    memset(led_buff, 0, sizeof(led_buff));
 8007cd6:	2210      	movs	r2, #16
 8007cd8:	2100      	movs	r1, #0
 8007cda:	4668      	mov	r0, sp
 8007cdc:	f001 f9fa 	bl	80090d4 <memset>
    sprintf(led_buff, "AT#GPIO=8,%d,1\r\n",state);
 8007ce0:	0022      	movs	r2, r4
 8007ce2:	4906      	ldr	r1, [pc, #24]	; (8007cfc <SetLED+0x2c>)
 8007ce4:	4668      	mov	r0, sp
 8007ce6:	f001 f9fd 	bl	80090e4 <sprintf>
    result = SCP_SendCommandWaitAnswer(led_buff, "OK", 2000, 1);
 8007cea:	22fa      	movs	r2, #250	; 0xfa
 8007cec:	2301      	movs	r3, #1
 8007cee:	00d2      	lsls	r2, r2, #3
 8007cf0:	4903      	ldr	r1, [pc, #12]	; (8007d00 <SetLED+0x30>)
 8007cf2:	4668      	mov	r0, sp
 8007cf4:	f7ff f83a 	bl	8006d6c <SCP_SendCommandWaitAnswer>
}
 8007cf8:	b004      	add	sp, #16
 8007cfa:	bd10      	pop	{r4, pc}
 8007cfc:	0800e1a0 	.word	0x0800e1a0
 8007d00:	0800e158 	.word	0x0800e158

08007d04 <SocketSend>:

/*GL865 V4 Socket send procedure*/
static char* SocketSend(int socket_id, char *string, unsigned int length)
{
 8007d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d06:	b083      	sub	sp, #12
 8007d08:	0006      	movs	r6, r0
 8007d0a:	000c      	movs	r4, r1
 8007d0c:	0017      	movs	r7, r2
    char symbol[3];
    static char buffer[1024];
    static char cmd_buffer[1048];

    /*GL865 V4 Limitation*/
    if(strlen(string) > 512)
 8007d0e:	0008      	movs	r0, r1
 8007d10:	f7f8 f9fa 	bl	8000108 <strlen>
 8007d14:	2380      	movs	r3, #128	; 0x80
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4298      	cmp	r0, r3
 8007d1a:	d82e      	bhi.n	8007d7a <SocketSend+0x76>
    {
        return NULL;
    }

    /*Clean buffers to be used*/
    memset(symbol, 0, sizeof(symbol));
 8007d1c:	2203      	movs	r2, #3
 8007d1e:	2100      	movs	r1, #0
 8007d20:	a801      	add	r0, sp, #4
 8007d22:	f001 f9d7 	bl	80090d4 <memset>
    memset(buffer, 0, sizeof(buffer));
 8007d26:	2280      	movs	r2, #128	; 0x80
 8007d28:	00d2      	lsls	r2, r2, #3
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	4814      	ldr	r0, [pc, #80]	; (8007d80 <SocketSend+0x7c>)
 8007d2e:	f001 f9d1 	bl	80090d4 <memset>
    memset(cmd_buffer, 0, sizeof(cmd_buffer));
 8007d32:	2283      	movs	r2, #131	; 0x83
 8007d34:	00d2      	lsls	r2, r2, #3
 8007d36:	2100      	movs	r1, #0
 8007d38:	4812      	ldr	r0, [pc, #72]	; (8007d84 <SocketSend+0x80>)
 8007d3a:	f001 f9cb 	bl	80090d4 <memset>

    /*Convert data to Hex format string*/
    for(i = 0; i < length; i++)
 8007d3e:	2500      	movs	r5, #0
 8007d40:	e00a      	b.n	8007d58 <SocketSend+0x54>
    {
        sprintf(symbol, "%02X", *string);
 8007d42:	7822      	ldrb	r2, [r4, #0]
 8007d44:	4910      	ldr	r1, [pc, #64]	; (8007d88 <SocketSend+0x84>)
 8007d46:	a801      	add	r0, sp, #4
 8007d48:	f001 f9cc 	bl	80090e4 <sprintf>
        strcat(buffer,symbol);
 8007d4c:	a901      	add	r1, sp, #4
 8007d4e:	480c      	ldr	r0, [pc, #48]	; (8007d80 <SocketSend+0x7c>)
 8007d50:	f001 f9e8 	bl	8009124 <strcat>
        string++;
 8007d54:	3401      	adds	r4, #1
    for(i = 0; i < length; i++)
 8007d56:	3501      	adds	r5, #1
 8007d58:	42bd      	cmp	r5, r7
 8007d5a:	d3f2      	bcc.n	8007d42 <SocketSend+0x3e>
    }

    /*Create command to be sent*/
    sprintf(cmd_buffer, "AT+EIPSEND=%d,\"%s\"\r\n", socket_id, buffer);
 8007d5c:	4c09      	ldr	r4, [pc, #36]	; (8007d84 <SocketSend+0x80>)
 8007d5e:	4b08      	ldr	r3, [pc, #32]	; (8007d80 <SocketSend+0x7c>)
 8007d60:	0032      	movs	r2, r6
 8007d62:	490a      	ldr	r1, [pc, #40]	; (8007d8c <SocketSend+0x88>)
 8007d64:	0020      	movs	r0, r4
 8007d66:	f001 f9bd 	bl	80090e4 <sprintf>

    /*attempt to send*/
    result = SCP_SendCommandWaitAnswer(cmd_buffer, "OK", 60000, 1);
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	4a08      	ldr	r2, [pc, #32]	; (8007d90 <SocketSend+0x8c>)
 8007d6e:	4909      	ldr	r1, [pc, #36]	; (8007d94 <SocketSend+0x90>)
 8007d70:	0020      	movs	r0, r4
 8007d72:	f7fe fffb 	bl	8006d6c <SCP_SendCommandWaitAnswer>

    return result;
}
 8007d76:	b003      	add	sp, #12
 8007d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return NULL;
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	e7fb      	b.n	8007d76 <SocketSend+0x72>
 8007d7e:	46c0      	nop			; (mov r8, r8)
 8007d80:	20002d98 	.word	0x20002d98
 8007d84:	20003198 	.word	0x20003198
 8007d88:	0800e1b4 	.word	0x0800e1b4
 8007d8c:	0800e1bc 	.word	0x0800e1bc
 8007d90:	0000ea60 	.word	0x0000ea60
 8007d94:	0800e158 	.word	0x0800e158

08007d98 <memmem>:
{
 8007d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9a:	0004      	movs	r4, r0
 8007d9c:	0016      	movs	r6, r2
 8007d9e:	1e1f      	subs	r7, r3, #0
	if (s_len == 0)
 8007da0:	d01d      	beq.n	8007dde <memmem+0x46>
	if (l_len < s_len)
 8007da2:	428b      	cmp	r3, r1
 8007da4:	d81c      	bhi.n	8007de0 <memmem+0x48>
	if (s_len == 1)
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d002      	beq.n	8007db0 <memmem+0x18>
	last = cl + l_len - s_len;
 8007daa:	1acd      	subs	r5, r1, r3
 8007dac:	1945      	adds	r5, r0, r5
	for (cur = cl; cur <= last; cur++)
 8007dae:	e006      	b.n	8007dbe <memmem+0x26>
		return memchr(l, *cs, l_len);
 8007db0:	7813      	ldrb	r3, [r2, #0]
 8007db2:	000a      	movs	r2, r1
 8007db4:	0019      	movs	r1, r3
 8007db6:	f001 f96b 	bl	8009090 <memchr>
 8007dba:	e010      	b.n	8007dde <memmem+0x46>
	for (cur = cl; cur <= last; cur++)
 8007dbc:	3401      	adds	r4, #1
 8007dbe:	42ac      	cmp	r4, r5
 8007dc0:	d80c      	bhi.n	8007ddc <memmem+0x44>
		if (cur[0] == cs[0] && memcmp(cur, cs, s_len) == 0)
 8007dc2:	7821      	ldrb	r1, [r4, #0]
 8007dc4:	7830      	ldrb	r0, [r6, #0]
 8007dc6:	4281      	cmp	r1, r0
 8007dc8:	d1f8      	bne.n	8007dbc <memmem+0x24>
 8007dca:	003a      	movs	r2, r7
 8007dcc:	0031      	movs	r1, r6
 8007dce:	0020      	movs	r0, r4
 8007dd0:	f001 f969 	bl	80090a6 <memcmp>
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	d1f1      	bne.n	8007dbc <memmem+0x24>
			return (void *)cur;
 8007dd8:	0020      	movs	r0, r4
 8007dda:	e000      	b.n	8007dde <memmem+0x46>
	return NULL;
 8007ddc:	2000      	movs	r0, #0
}
 8007dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
 8007de0:	2000      	movs	r0, #0
 8007de2:	e7fc      	b.n	8007dde <memmem+0x46>

08007de4 <SignalQuality>:
{
 8007de4:	b510      	push	{r4, lr}
    result = SCP_SendCommandWaitAnswer("AT+CSQ\r\n", "OK", 2000, 1);
 8007de6:	22fa      	movs	r2, #250	; 0xfa
 8007de8:	2301      	movs	r3, #1
 8007dea:	00d2      	lsls	r2, r2, #3
 8007dec:	490b      	ldr	r1, [pc, #44]	; (8007e1c <SignalQuality+0x38>)
 8007dee:	480c      	ldr	r0, [pc, #48]	; (8007e20 <SignalQuality+0x3c>)
 8007df0:	f7fe ffbc 	bl	8006d6c <SCP_SendCommandWaitAnswer>
    if(result)
 8007df4:	2800      	cmp	r0, #0
 8007df6:	d00c      	beq.n	8007e12 <SignalQuality+0x2e>
        result = memmem((char*)SCPHandler.RxBuffer, CMD_BUFF_LENGTH, "+CSQ:", sizeof("+CSQ:")-1);
 8007df8:	2180      	movs	r1, #128	; 0x80
 8007dfa:	2305      	movs	r3, #5
 8007dfc:	4a09      	ldr	r2, [pc, #36]	; (8007e24 <SignalQuality+0x40>)
 8007dfe:	00c9      	lsls	r1, r1, #3
 8007e00:	4809      	ldr	r0, [pc, #36]	; (8007e28 <SignalQuality+0x44>)
 8007e02:	f7ff ffc9 	bl	8007d98 <memmem>
        if(result)
 8007e06:	2800      	cmp	r0, #0
 8007e08:	d005      	beq.n	8007e16 <SignalQuality+0x32>
            result += 6;
 8007e0a:	3006      	adds	r0, #6
            signal_level = atoi(result);
 8007e0c:	f001 f90f 	bl	800902e <atoi>
}
 8007e10:	bd10      	pop	{r4, pc}
        return 0;
 8007e12:	2000      	movs	r0, #0
 8007e14:	e7fc      	b.n	8007e10 <SignalQuality+0x2c>
    int32_t signal_level = 0;
 8007e16:	2000      	movs	r0, #0
 8007e18:	e7fa      	b.n	8007e10 <SignalQuality+0x2c>
 8007e1a:	46c0      	nop			; (mov r8, r8)
 8007e1c:	0800e158 	.word	0x0800e158
 8007e20:	0800e1d4 	.word	0x0800e1d4
 8007e24:	0800e1e0 	.word	0x0800e1e0
 8007e28:	2000234c 	.word	0x2000234c

08007e2c <NetworkRegistrationCheck>:
{
 8007e2c:	b510      	push	{r4, lr}
    result = SCP_SendCommandWaitAnswer("AT+CREG?\r\n", "OK", 500, 5);
 8007e2e:	22fa      	movs	r2, #250	; 0xfa
 8007e30:	2305      	movs	r3, #5
 8007e32:	0052      	lsls	r2, r2, #1
 8007e34:	490b      	ldr	r1, [pc, #44]	; (8007e64 <NetworkRegistrationCheck+0x38>)
 8007e36:	480c      	ldr	r0, [pc, #48]	; (8007e68 <NetworkRegistrationCheck+0x3c>)
 8007e38:	f7fe ff98 	bl	8006d6c <SCP_SendCommandWaitAnswer>
    if(result)
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	d00c      	beq.n	8007e5a <NetworkRegistrationCheck+0x2e>
        result = memmem((char*)SCPHandler.RxBuffer, CMD_BUFF_LENGTH, "+CREG: ", sizeof("+CREG: ")-1);
 8007e40:	2180      	movs	r1, #128	; 0x80
 8007e42:	2307      	movs	r3, #7
 8007e44:	4a09      	ldr	r2, [pc, #36]	; (8007e6c <NetworkRegistrationCheck+0x40>)
 8007e46:	00c9      	lsls	r1, r1, #3
 8007e48:	4809      	ldr	r0, [pc, #36]	; (8007e70 <NetworkRegistrationCheck+0x44>)
 8007e4a:	f7ff ffa5 	bl	8007d98 <memmem>
        if(result)
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d005      	beq.n	8007e5e <NetworkRegistrationCheck+0x32>
            result += 9;
 8007e52:	3009      	adds	r0, #9
            ntwrk_stat = atoi(result);
 8007e54:	f001 f8eb 	bl	800902e <atoi>
}
 8007e58:	bd10      	pop	{r4, pc}
        return 0;
 8007e5a:	2000      	movs	r0, #0
 8007e5c:	e7fc      	b.n	8007e58 <NetworkRegistrationCheck+0x2c>
    int32_t ntwrk_stat = 0;
 8007e5e:	2000      	movs	r0, #0
 8007e60:	e7fa      	b.n	8007e58 <NetworkRegistrationCheck+0x2c>
 8007e62:	46c0      	nop			; (mov r8, r8)
 8007e64:	0800e158 	.word	0x0800e158
 8007e68:	0800e1e8 	.word	0x0800e1e8
 8007e6c:	0800e1f4 	.word	0x0800e1f4
 8007e70:	2000234c 	.word	0x2000234c

08007e74 <WaitForNetwork>:
{
 8007e74:	b570      	push	{r4, r5, r6, lr}
    for(uint32_t i=0; i < WAIT_FOR_NETWORK_S; i++)
 8007e76:	2400      	movs	r4, #0
    _Bool led = false;
 8007e78:	2500      	movs	r5, #0
    for(uint32_t i=0; i < WAIT_FOR_NETWORK_S; i++)
 8007e7a:	e00e      	b.n	8007e9a <WaitForNetwork+0x26>
          signal = SignalQuality();
 8007e7c:	f7ff ffb2 	bl	8007de4 <SignalQuality>
          if(signal != 99)
 8007e80:	2863      	cmp	r0, #99	; 0x63
 8007e82:	d119      	bne.n	8007eb8 <WaitForNetwork+0x44>
            osDelay(1000);
 8007e84:	20fa      	movs	r0, #250	; 0xfa
 8007e86:	0080      	lsls	r0, r0, #2
 8007e88:	f7fd fb77 	bl	800557a <osDelay>
        led = !led;
 8007e8c:	2001      	movs	r0, #1
 8007e8e:	4045      	eors	r5, r0
 8007e90:	b2ed      	uxtb	r5, r5
        SetLED(led);
 8007e92:	0028      	movs	r0, r5
 8007e94:	f7ff ff1c 	bl	8007cd0 <SetLED>
    for(uint32_t i=0; i < WAIT_FOR_NETWORK_S; i++)
 8007e98:	3401      	adds	r4, #1
 8007e9a:	23e1      	movs	r3, #225	; 0xe1
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	429c      	cmp	r4, r3
 8007ea0:	d20f      	bcs.n	8007ec2 <WaitForNetwork+0x4e>
        test = NetworkRegistrationCheck();
 8007ea2:	f7ff ffc3 	bl	8007e2c <NetworkRegistrationCheck>
        if((test == 1) || (test == 5))
 8007ea6:	2801      	cmp	r0, #1
 8007ea8:	d0e8      	beq.n	8007e7c <WaitForNetwork+0x8>
 8007eaa:	2805      	cmp	r0, #5
 8007eac:	d0e6      	beq.n	8007e7c <WaitForNetwork+0x8>
            osDelay(1000);
 8007eae:	20fa      	movs	r0, #250	; 0xfa
 8007eb0:	0080      	lsls	r0, r0, #2
 8007eb2:	f7fd fb62 	bl	800557a <osDelay>
 8007eb6:	e7e9      	b.n	8007e8c <WaitForNetwork+0x18>
        	SetLED(false);
 8007eb8:	2000      	movs	r0, #0
 8007eba:	f7ff ff09 	bl	8007cd0 <SetLED>
            return true;
 8007ebe:	2001      	movs	r0, #1
}
 8007ec0:	bd70      	pop	{r4, r5, r6, pc}
    SetLED(false);
 8007ec2:	2000      	movs	r0, #0
 8007ec4:	f7ff ff04 	bl	8007cd0 <SetLED>
    return false;
 8007ec8:	2000      	movs	r0, #0
 8007eca:	e7f9      	b.n	8007ec0 <WaitForNetwork+0x4c>

08007ecc <GetOperator>:
{
 8007ecc:	b510      	push	{r4, lr}
    result = SCP_SendCommandWaitAnswer("AT+COPS?\r\n", "OK", 30000, 1);
 8007ece:	2301      	movs	r3, #1
 8007ed0:	4a17      	ldr	r2, [pc, #92]	; (8007f30 <GetOperator+0x64>)
 8007ed2:	4918      	ldr	r1, [pc, #96]	; (8007f34 <GetOperator+0x68>)
 8007ed4:	4818      	ldr	r0, [pc, #96]	; (8007f38 <GetOperator+0x6c>)
 8007ed6:	f7fe ff49 	bl	8006d6c <SCP_SendCommandWaitAnswer>
 8007eda:	1e04      	subs	r4, r0, #0
    if(result)
 8007edc:	d025      	beq.n	8007f2a <GetOperator+0x5e>
        result = memmem((char*)SCPHandler.RxBuffer, CMD_BUFF_LENGTH, "+COPS:", sizeof("+COPS:")-1);
 8007ede:	2180      	movs	r1, #128	; 0x80
 8007ee0:	2306      	movs	r3, #6
 8007ee2:	4a16      	ldr	r2, [pc, #88]	; (8007f3c <GetOperator+0x70>)
 8007ee4:	00c9      	lsls	r1, r1, #3
 8007ee6:	4816      	ldr	r0, [pc, #88]	; (8007f40 <GetOperator+0x74>)
 8007ee8:	f7ff ff56 	bl	8007d98 <memmem>
 8007eec:	1e04      	subs	r4, r0, #0
        if(result)
 8007eee:	d01c      	beq.n	8007f2a <GetOperator+0x5e>
            result = strchr(result, '"');
 8007ef0:	2122      	movs	r1, #34	; 0x22
 8007ef2:	f001 f924 	bl	800913e <strchr>
 8007ef6:	1e04      	subs	r4, r0, #0
            if(result)
 8007ef8:	d017      	beq.n	8007f2a <GetOperator+0x5e>
                memset(operator, 0x00, 17);
 8007efa:	2211      	movs	r2, #17
 8007efc:	2100      	movs	r1, #0
 8007efe:	4811      	ldr	r0, [pc, #68]	; (8007f44 <GetOperator+0x78>)
 8007f00:	f001 f8e8 	bl	80090d4 <memset>
                for(uint8_t i = 0; i < 16; i++)
 8007f04:	2300      	movs	r3, #0
 8007f06:	2b0f      	cmp	r3, #15
 8007f08:	d80e      	bhi.n	8007f28 <GetOperator+0x5c>
                    operator[i] = *result;
 8007f0a:	7821      	ldrb	r1, [r4, #0]
 8007f0c:	4a0d      	ldr	r2, [pc, #52]	; (8007f44 <GetOperator+0x78>)
 8007f0e:	54d1      	strb	r1, [r2, r3]
                    result++;
 8007f10:	3401      	adds	r4, #1
                    if(*result == '"')
 8007f12:	7822      	ldrb	r2, [r4, #0]
 8007f14:	2a22      	cmp	r2, #34	; 0x22
 8007f16:	d002      	beq.n	8007f1e <GetOperator+0x52>
                for(uint8_t i = 0; i < 16; i++)
 8007f18:	3301      	adds	r3, #1
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	e7f3      	b.n	8007f06 <GetOperator+0x3a>
                        i++;
 8007f1e:	3301      	adds	r3, #1
 8007f20:	b2db      	uxtb	r3, r3
                        operator[i] = *result;
 8007f22:	4c08      	ldr	r4, [pc, #32]	; (8007f44 <GetOperator+0x78>)
 8007f24:	54e2      	strb	r2, [r4, r3]
                        return operator;
 8007f26:	e000      	b.n	8007f2a <GetOperator+0x5e>
                return operator;
 8007f28:	4c06      	ldr	r4, [pc, #24]	; (8007f44 <GetOperator+0x78>)
}
 8007f2a:	0020      	movs	r0, r4
 8007f2c:	bd10      	pop	{r4, pc}
 8007f2e:	46c0      	nop			; (mov r8, r8)
 8007f30:	00007530 	.word	0x00007530
 8007f34:	0800e158 	.word	0x0800e158
 8007f38:	0800e1fc 	.word	0x0800e1fc
 8007f3c:	0800e208 	.word	0x0800e208
 8007f40:	2000234c 	.word	0x2000234c
 8007f44:	20003648 	.word	0x20003648

08007f48 <ContextStatusCheck>:
{
 8007f48:	b510      	push	{r4, lr}
    result = SCP_SendCommandWaitAnswer("AT+CGACT?\r\n", "OK", 1000, 1);
 8007f4a:	22fa      	movs	r2, #250	; 0xfa
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	0092      	lsls	r2, r2, #2
 8007f50:	490b      	ldr	r1, [pc, #44]	; (8007f80 <ContextStatusCheck+0x38>)
 8007f52:	480c      	ldr	r0, [pc, #48]	; (8007f84 <ContextStatusCheck+0x3c>)
 8007f54:	f7fe ff0a 	bl	8006d6c <SCP_SendCommandWaitAnswer>
    if(result)
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	d00c      	beq.n	8007f76 <ContextStatusCheck+0x2e>
        result = memmem((char*)SCPHandler.RxBuffer, CMD_BUFF_LENGTH, "+CGACT: 1", sizeof("+CGACT: 1")-1);
 8007f5c:	2180      	movs	r1, #128	; 0x80
 8007f5e:	2309      	movs	r3, #9
 8007f60:	4a09      	ldr	r2, [pc, #36]	; (8007f88 <ContextStatusCheck+0x40>)
 8007f62:	00c9      	lsls	r1, r1, #3
 8007f64:	4809      	ldr	r0, [pc, #36]	; (8007f8c <ContextStatusCheck+0x44>)
 8007f66:	f7ff ff17 	bl	8007d98 <memmem>
        if(result)
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	d005      	beq.n	8007f7a <ContextStatusCheck+0x32>
            result += 11;
 8007f6e:	300b      	adds	r0, #11
            context = atoi(result);
 8007f70:	f001 f85d 	bl	800902e <atoi>
}
 8007f74:	bd10      	pop	{r4, pc}
        return 0;
 8007f76:	2000      	movs	r0, #0
 8007f78:	e7fc      	b.n	8007f74 <ContextStatusCheck+0x2c>
    int32_t context = 0;
 8007f7a:	2000      	movs	r0, #0
 8007f7c:	e7fa      	b.n	8007f74 <ContextStatusCheck+0x2c>
 8007f7e:	46c0      	nop			; (mov r8, r8)
 8007f80:	0800e158 	.word	0x0800e158
 8007f84:	0800e210 	.word	0x0800e210
 8007f88:	0800e21c 	.word	0x0800e21c
 8007f8c:	2000234c 	.word	0x2000234c

08007f90 <ContextConnect>:
{
 8007f90:	b570      	push	{r4, r5, r6, lr}
 8007f92:	0004      	movs	r4, r0
    check = NetworkRegistrationCheck();
 8007f94:	f7ff ff4a 	bl	8007e2c <NetworkRegistrationCheck>
    if(!check)
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	d032      	beq.n	8008002 <ContextConnect+0x72>
    result = SCP_SendCommandWaitAnswer("AT+CGATT?\r\n", "+CGATT: 1", 1000, 1);
 8007f9c:	22fa      	movs	r2, #250	; 0xfa
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	0092      	lsls	r2, r2, #2
 8007fa2:	492d      	ldr	r1, [pc, #180]	; (8008058 <ContextConnect+0xc8>)
 8007fa4:	482d      	ldr	r0, [pc, #180]	; (800805c <ContextConnect+0xcc>)
 8007fa6:	f7fe fee1 	bl	8006d6c <SCP_SendCommandWaitAnswer>
    if(!result) return false;
 8007faa:	2800      	cmp	r0, #0
 8007fac:	d04d      	beq.n	800804a <ContextConnect+0xba>
    result = SCP_SendCommandWaitAnswer("AT+CGACT=1,1\r\n", "OK", 1000, 1);
 8007fae:	22fa      	movs	r2, #250	; 0xfa
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	0092      	lsls	r2, r2, #2
 8007fb4:	492a      	ldr	r1, [pc, #168]	; (8008060 <ContextConnect+0xd0>)
 8007fb6:	482b      	ldr	r0, [pc, #172]	; (8008064 <ContextConnect+0xd4>)
 8007fb8:	f7fe fed8 	bl	8006d6c <SCP_SendCommandWaitAnswer>
 8007fbc:	0005      	movs	r5, r0
    osDelay(2000);
 8007fbe:	20fa      	movs	r0, #250	; 0xfa
 8007fc0:	00c0      	lsls	r0, r0, #3
 8007fc2:	f7fd fada 	bl	800557a <osDelay>
    if(result)
 8007fc6:	2d00      	cmp	r5, #0
 8007fc8:	d041      	beq.n	800804e <ContextConnect+0xbe>
        result = SCP_SendCommandWaitAnswer("AT+CGPADDR=1\r\n", "OK", 1000, 1);
 8007fca:	22fa      	movs	r2, #250	; 0xfa
 8007fcc:	2301      	movs	r3, #1
 8007fce:	0092      	lsls	r2, r2, #2
 8007fd0:	4923      	ldr	r1, [pc, #140]	; (8008060 <ContextConnect+0xd0>)
 8007fd2:	4825      	ldr	r0, [pc, #148]	; (8008068 <ContextConnect+0xd8>)
 8007fd4:	f7fe feca 	bl	8006d6c <SCP_SendCommandWaitAnswer>
        if(result)
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d03a      	beq.n	8008052 <ContextConnect+0xc2>
            result = memmem((char*)SCPHandler.RxBuffer, CMD_BUFF_LENGTH, "+CGPADDR: 1, ", sizeof("+CGPADDR: 1, ")-1);
 8007fdc:	2180      	movs	r1, #128	; 0x80
 8007fde:	230d      	movs	r3, #13
 8007fe0:	4a22      	ldr	r2, [pc, #136]	; (800806c <ContextConnect+0xdc>)
 8007fe2:	00c9      	lsls	r1, r1, #3
 8007fe4:	4822      	ldr	r0, [pc, #136]	; (8008070 <ContextConnect+0xe0>)
 8007fe6:	f7ff fed7 	bl	8007d98 <memmem>
            result += 13;
 8007fea:	0005      	movs	r5, r0
 8007fec:	350d      	adds	r5, #13
            if(result)
 8007fee:	300d      	adds	r0, #13
 8007ff0:	d029      	beq.n	8008046 <ContextConnect+0xb6>
                memset(ip_address, 0x00, 15);
 8007ff2:	220f      	movs	r2, #15
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	0020      	movs	r0, r4
 8007ff8:	f001 f86c 	bl	80090d4 <memset>
    temp = ip_address;
 8007ffc:	0020      	movs	r0, r4
                for(uint8_t i = 0; i < 15; i++)
 8007ffe:	2300      	movs	r3, #0
 8008000:	e00b      	b.n	800801a <ContextConnect+0x8a>
      WaitForNetwork();
 8008002:	f7ff ff37 	bl	8007e74 <WaitForNetwork>
 8008006:	e7c9      	b.n	8007f9c <ContextConnect+0xc>
                        result++;
 8008008:	3501      	adds	r5, #1
 800800a:	e00b      	b.n	8008024 <ContextConnect+0x94>
                    if(*result == '\r')
 800800c:	2a0d      	cmp	r2, #13
 800800e:	d01a      	beq.n	8008046 <ContextConnect+0xb6>
                    *temp = *result;
 8008010:	7002      	strb	r2, [r0, #0]
                    result++;
 8008012:	3501      	adds	r5, #1
                    temp++;
 8008014:	3001      	adds	r0, #1
                for(uint8_t i = 0; i < 15; i++)
 8008016:	3301      	adds	r3, #1
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b0e      	cmp	r3, #14
 800801c:	d813      	bhi.n	8008046 <ContextConnect+0xb6>
                    if(*result == '"')
 800801e:	782a      	ldrb	r2, [r5, #0]
 8008020:	2a22      	cmp	r2, #34	; 0x22
 8008022:	d0f1      	beq.n	8008008 <ContextConnect+0x78>
                    if(!(*result > 47 && *result < 58) && !(*result == '.') && (!(*result == '\r')))
 8008024:	782a      	ldrb	r2, [r5, #0]
 8008026:	0011      	movs	r1, r2
 8008028:	3930      	subs	r1, #48	; 0x30
 800802a:	b2c9      	uxtb	r1, r1
 800802c:	2909      	cmp	r1, #9
 800802e:	d9ed      	bls.n	800800c <ContextConnect+0x7c>
 8008030:	2a2e      	cmp	r2, #46	; 0x2e
 8008032:	d0eb      	beq.n	800800c <ContextConnect+0x7c>
 8008034:	2a0d      	cmp	r2, #13
 8008036:	d0e9      	beq.n	800800c <ContextConnect+0x7c>
                        memset(ip_address, 0x00, 15);
 8008038:	220f      	movs	r2, #15
 800803a:	2100      	movs	r1, #0
 800803c:	0020      	movs	r0, r4
 800803e:	f001 f849 	bl	80090d4 <memset>
                        return false;
 8008042:	2000      	movs	r0, #0
 8008044:	e004      	b.n	8008050 <ContextConnect+0xc0>
            return true;
 8008046:	2001      	movs	r0, #1
 8008048:	e002      	b.n	8008050 <ContextConnect+0xc0>
    if(!result) return false;
 800804a:	2000      	movs	r0, #0
 800804c:	e000      	b.n	8008050 <ContextConnect+0xc0>
    return false;
 800804e:	2000      	movs	r0, #0
}
 8008050:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8008052:	2000      	movs	r0, #0
 8008054:	e7fc      	b.n	8008050 <ContextConnect+0xc0>
 8008056:	46c0      	nop			; (mov r8, r8)
 8008058:	0800e228 	.word	0x0800e228
 800805c:	0800e234 	.word	0x0800e234
 8008060:	0800e158 	.word	0x0800e158
 8008064:	0800e240 	.word	0x0800e240
 8008068:	0800e250 	.word	0x0800e250
 800806c:	0800e260 	.word	0x0800e260
 8008070:	2000234c 	.word	0x2000234c

08008074 <SocketReceive>:

/*GL865 V4 Socket receive procedure*/
static char* SocketReceive(int socket_id)
{
 8008074:	b530      	push	{r4, r5, lr}
 8008076:	b083      	sub	sp, #12
 8008078:	0005      	movs	r5, r0
    char *result = NULL;
    unsigned int i;
    long number;
    char symbol[3];

    memset(post_buff, 0, sizeof(post_buff));
 800807a:	4c22      	ldr	r4, [pc, #136]	; (8008104 <SocketReceive+0x90>)
 800807c:	2280      	movs	r2, #128	; 0x80
 800807e:	00d2      	lsls	r2, r2, #3
 8008080:	2100      	movs	r1, #0
 8008082:	0020      	movs	r0, r4
 8008084:	f001 f826 	bl	80090d4 <memset>
    memset(symbol, 0, sizeof(symbol));
 8008088:	2203      	movs	r2, #3
 800808a:	2100      	movs	r1, #0
 800808c:	a801      	add	r0, sp, #4
 800808e:	f001 f821 	bl	80090d4 <memset>

    /*Create command to for socket reception*/
    sprintf(post_buff, "AT+EIPRECV=%d\r\n", socket_id);
 8008092:	002a      	movs	r2, r5
 8008094:	491c      	ldr	r1, [pc, #112]	; (8008108 <SocketReceive+0x94>)
 8008096:	0020      	movs	r0, r4
 8008098:	f001 f824 	bl	80090e4 <sprintf>

    /*attempt to receive*/
    result = SCP_SendCommandWaitAnswer(post_buff, "OK", 60000, 1);
 800809c:	2301      	movs	r3, #1
 800809e:	4a1b      	ldr	r2, [pc, #108]	; (800810c <SocketReceive+0x98>)
 80080a0:	491b      	ldr	r1, [pc, #108]	; (8008110 <SocketReceive+0x9c>)
 80080a2:	0020      	movs	r0, r4
 80080a4:	f7fe fe62 	bl	8006d6c <SCP_SendCommandWaitAnswer>

    /*Data received, lets convert to ASCII*/
    if(result)
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d027      	beq.n	80080fc <SocketReceive+0x88>
    {
        memset(post_buff, 0, sizeof(post_buff));
 80080ac:	2480      	movs	r4, #128	; 0x80
 80080ae:	00e4      	lsls	r4, r4, #3
 80080b0:	0022      	movs	r2, r4
 80080b2:	2100      	movs	r1, #0
 80080b4:	4813      	ldr	r0, [pc, #76]	; (8008104 <SocketReceive+0x90>)
 80080b6:	f001 f80d 	bl	80090d4 <memset>
        result = NULL;
        result = memmem((char*)SCPHandler.RxBuffer, CMD_BUFF_LENGTH, "+EIPRECV: ", sizeof("+EIPRECV: ")-1);
 80080ba:	230a      	movs	r3, #10
 80080bc:	4a15      	ldr	r2, [pc, #84]	; (8008114 <SocketReceive+0xa0>)
 80080be:	0021      	movs	r1, r4
 80080c0:	4815      	ldr	r0, [pc, #84]	; (8008118 <SocketReceive+0xa4>)
 80080c2:	f7ff fe69 	bl	8007d98 <memmem>
        if(result)
 80080c6:	2800      	cmp	r0, #0
 80080c8:	d017      	beq.n	80080fa <SocketReceive+0x86>
        {
            result += 13;
 80080ca:	300d      	adds	r0, #13
 80080cc:	0004      	movs	r4, r0
            i = 0;
 80080ce:	2500      	movs	r5, #0
            while(*result != '"')
 80080d0:	7823      	ldrb	r3, [r4, #0]
 80080d2:	2b22      	cmp	r3, #34	; 0x22
 80080d4:	d011      	beq.n	80080fa <SocketReceive+0x86>
            {
                symbol[0] = *result;
 80080d6:	466a      	mov	r2, sp
 80080d8:	7113      	strb	r3, [r2, #4]
                result++;
                symbol[1] = *result;
 80080da:	7863      	ldrb	r3, [r4, #1]
 80080dc:	7153      	strb	r3, [r2, #5]
                result++;
 80080de:	3402      	adds	r4, #2

                number = strtol(symbol, (char **)NULL,16);
 80080e0:	2210      	movs	r2, #16
 80080e2:	2100      	movs	r1, #0
 80080e4:	a801      	add	r0, sp, #4
 80080e6:	f001 f8e5 	bl	80092b4 <strtol>
                post_buff[i] = (char)number;
 80080ea:	4b06      	ldr	r3, [pc, #24]	; (8008104 <SocketReceive+0x90>)
 80080ec:	5558      	strb	r0, [r3, r5]

                if(i > 1023)
 80080ee:	2380      	movs	r3, #128	; 0x80
 80080f0:	00db      	lsls	r3, r3, #3
 80080f2:	429d      	cmp	r5, r3
 80080f4:	d204      	bcs.n	8008100 <SocketReceive+0x8c>
                {
                    return NULL;
                }
                i++;
 80080f6:	3501      	adds	r5, #1
 80080f8:	e7ea      	b.n	80080d0 <SocketReceive+0x5c>

            }
        }

        return post_buff;
 80080fa:	4802      	ldr	r0, [pc, #8]	; (8008104 <SocketReceive+0x90>)
    }

    return NULL;
}
 80080fc:	b003      	add	sp, #12
 80080fe:	bd30      	pop	{r4, r5, pc}
                    return NULL;
 8008100:	2000      	movs	r0, #0
 8008102:	e7fb      	b.n	80080fc <SocketReceive+0x88>
 8008104:	2000365c 	.word	0x2000365c
 8008108:	0800e270 	.word	0x0800e270
 800810c:	0000ea60 	.word	0x0000ea60
 8008110:	0800e158 	.word	0x0800e158
 8008114:	0800e280 	.word	0x0800e280
 8008118:	2000234c 	.word	0x2000234c

0800811c <TelitPortalAuthenticate>:

/*Telit portal authentication procedure */
static _Bool TelitPortalAuthenticate(int socket_id)
{
 800811c:	b570      	push	{r4, r5, r6, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	0004      	movs	r4, r0
    char *result = NULL;
    memset(post_buff, 0, sizeof(post_buff));
 8008122:	4d46      	ldr	r5, [pc, #280]	; (800823c <TelitPortalAuthenticate+0x120>)
 8008124:	2280      	movs	r2, #128	; 0x80
 8008126:	00d2      	lsls	r2, r2, #3
 8008128:	2100      	movs	r1, #0
 800812a:	0028      	movs	r0, r5
 800812c:	f000 ffd2 	bl	80090d4 <memset>
    memset(telit_sessionId, 0, sizeof(telit_sessionId));
 8008130:	2230      	movs	r2, #48	; 0x30
 8008132:	2100      	movs	r1, #0
 8008134:	4842      	ldr	r0, [pc, #264]	; (8008240 <TelitPortalAuthenticate+0x124>)
 8008136:	f000 ffcd 	bl	80090d4 <memset>
    memset(post_length, 0, sizeof(post_length));
 800813a:	4e42      	ldr	r6, [pc, #264]	; (8008244 <TelitPortalAuthenticate+0x128>)
 800813c:	2210      	movs	r2, #16
 800813e:	2100      	movs	r1, #0
 8008140:	0030      	movs	r0, r6
 8008142:	f000 ffc7 	bl	80090d4 <memset>
    int i;

    /*Reset rx buffer for data reception*/
    SCP_InitRx();
 8008146:	f7fe fe55 	bl	8006df4 <SCP_InitRx>

    // form data to be posted
    sprintf(post_buff, fcmd_dW_auth, telit_appToken, telit_appID, modem_data.imei);
 800814a:	4b3f      	ldr	r3, [pc, #252]	; (8008248 <TelitPortalAuthenticate+0x12c>)
 800814c:	3325      	adds	r3, #37	; 0x25
 800814e:	9300      	str	r3, [sp, #0]
 8008150:	4b3e      	ldr	r3, [pc, #248]	; (800824c <TelitPortalAuthenticate+0x130>)
 8008152:	4a3f      	ldr	r2, [pc, #252]	; (8008250 <TelitPortalAuthenticate+0x134>)
 8008154:	493f      	ldr	r1, [pc, #252]	; (8008254 <TelitPortalAuthenticate+0x138>)
 8008156:	0028      	movs	r0, r5
 8008158:	f000 ffc4 	bl	80090e4 <sprintf>

    // form data length
    sprintf(post_length, "%d\r\n\r\n", strlen(post_buff)-2);
 800815c:	0028      	movs	r0, r5
 800815e:	f7f7 ffd3 	bl	8000108 <strlen>
 8008162:	1e82      	subs	r2, r0, #2
 8008164:	493c      	ldr	r1, [pc, #240]	; (8008258 <TelitPortalAuthenticate+0x13c>)
 8008166:	0030      	movs	r0, r6
 8008168:	f000 ffbc 	bl	80090e4 <sprintf>

    // send http post header
    result = SocketSend(socket_id, (char *)fcmd_HTTPPOST, strlen(fcmd_HTTPPOST));
 800816c:	2260      	movs	r2, #96	; 0x60
 800816e:	493b      	ldr	r1, [pc, #236]	; (800825c <TelitPortalAuthenticate+0x140>)
 8008170:	0020      	movs	r0, r4
 8008172:	f7ff fdc7 	bl	8007d04 <SocketSend>

    // send data length
    if(result) result = SocketSend(socket_id, post_length, strlen(post_length));
 8008176:	2800      	cmp	r0, #0
 8008178:	d008      	beq.n	800818c <TelitPortalAuthenticate+0x70>
 800817a:	4d32      	ldr	r5, [pc, #200]	; (8008244 <TelitPortalAuthenticate+0x128>)
 800817c:	0028      	movs	r0, r5
 800817e:	f7f7 ffc3 	bl	8000108 <strlen>
 8008182:	0002      	movs	r2, r0
 8008184:	0029      	movs	r1, r5
 8008186:	0020      	movs	r0, r4
 8008188:	f7ff fdbc 	bl	8007d04 <SocketSend>

    // send post data
    if(result) result = SocketSend(socket_id, post_buff, strlen(post_buff));
 800818c:	2800      	cmp	r0, #0
 800818e:	d008      	beq.n	80081a2 <TelitPortalAuthenticate+0x86>
 8008190:	4d2a      	ldr	r5, [pc, #168]	; (800823c <TelitPortalAuthenticate+0x120>)
 8008192:	0028      	movs	r0, r5
 8008194:	f7f7 ffb8 	bl	8000108 <strlen>
 8008198:	0002      	movs	r2, r0
 800819a:	0029      	movs	r1, r5
 800819c:	0020      	movs	r0, r4
 800819e:	f7ff fdb1 	bl	8007d04 <SocketSend>

    if(!result)
 80081a2:	2800      	cmp	r0, #0
 80081a4:	d045      	beq.n	8008232 <TelitPortalAuthenticate+0x116>
    {return false;}

    /* Wait for URC */
    result = SCP_WaitForAnswer("READY RECV\r\n", 20000);
 80081a6:	492e      	ldr	r1, [pc, #184]	; (8008260 <TelitPortalAuthenticate+0x144>)
 80081a8:	482e      	ldr	r0, [pc, #184]	; (8008264 <TelitPortalAuthenticate+0x148>)
 80081aa:	f7fe fe4b 	bl	8006e44 <SCP_WaitForAnswer>
    if (result)
 80081ae:	2800      	cmp	r0, #0
 80081b0:	d038      	beq.n	8008224 <TelitPortalAuthenticate+0x108>
    {
        result = SocketReceive(modem_data.socket_id);
 80081b2:	4b25      	ldr	r3, [pc, #148]	; (8008248 <TelitPortalAuthenticate+0x12c>)
 80081b4:	68d8      	ldr	r0, [r3, #12]
 80081b6:	f7ff ff5d 	bl	8008074 <SocketReceive>
        if(result)
 80081ba:	2800      	cmp	r0, #0
 80081bc:	d032      	beq.n	8008224 <TelitPortalAuthenticate+0x108>
        {
            result = strstr(result, "sessionId\":\"");
 80081be:	492a      	ldr	r1, [pc, #168]	; (8008268 <TelitPortalAuthenticate+0x14c>)
 80081c0:	f000 ffd3 	bl	800916a <strstr>
            if(result)
 80081c4:	2800      	cmp	r0, #0
 80081c6:	d02d      	beq.n	8008224 <TelitPortalAuthenticate+0x108>
            {
                result += strlen("sessionId\":\"");
 80081c8:	0001      	movs	r1, r0
 80081ca:	310c      	adds	r1, #12

                i=0;
 80081cc:	2200      	movs	r2, #0
                while ((*result != '\"')&& (*result != 0))
 80081ce:	e003      	b.n	80081d8 <TelitPortalAuthenticate+0xbc>
                {
                    telit_sessionId[i++]=*(result++);
 80081d0:	3101      	adds	r1, #1
 80081d2:	481b      	ldr	r0, [pc, #108]	; (8008240 <TelitPortalAuthenticate+0x124>)
 80081d4:	5483      	strb	r3, [r0, r2]
 80081d6:	3201      	adds	r2, #1
                while ((*result != '\"')&& (*result != 0))
 80081d8:	780b      	ldrb	r3, [r1, #0]
 80081da:	2b22      	cmp	r3, #34	; 0x22
 80081dc:	d001      	beq.n	80081e2 <TelitPortalAuthenticate+0xc6>
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1f6      	bne.n	80081d0 <TelitPortalAuthenticate+0xb4>

                }

                memset(post_buff, 0, sizeof(post_buff));
 80081e2:	4d16      	ldr	r5, [pc, #88]	; (800823c <TelitPortalAuthenticate+0x120>)
 80081e4:	2280      	movs	r2, #128	; 0x80
 80081e6:	00d2      	lsls	r2, r2, #3
 80081e8:	2100      	movs	r1, #0
 80081ea:	0028      	movs	r0, r5
 80081ec:	f000 ff72 	bl	80090d4 <memset>
                result = NULL;
                sprintf(post_buff, "+ESOCK: %d CLOSE", socket_id);
 80081f0:	0022      	movs	r2, r4
 80081f2:	491e      	ldr	r1, [pc, #120]	; (800826c <TelitPortalAuthenticate+0x150>)
 80081f4:	0028      	movs	r0, r5
 80081f6:	f000 ff75 	bl	80090e4 <sprintf>
                for(i = 5; i > 0; i--)
 80081fa:	2405      	movs	r4, #5
 80081fc:	2c00      	cmp	r4, #0
 80081fe:	dd0b      	ble.n	8008218 <TelitPortalAuthenticate+0xfc>
                {
                  osDelay(1000);
 8008200:	20fa      	movs	r0, #250	; 0xfa
 8008202:	0080      	lsls	r0, r0, #2
 8008204:	f7fd f9b9 	bl	800557a <osDelay>
                  result = strstr((char*)SCPHandler.RxBuffer, post_buff);
 8008208:	490c      	ldr	r1, [pc, #48]	; (800823c <TelitPortalAuthenticate+0x120>)
 800820a:	4819      	ldr	r0, [pc, #100]	; (8008270 <TelitPortalAuthenticate+0x154>)
 800820c:	f000 ffad 	bl	800916a <strstr>
                  if(result)
 8008210:	2800      	cmp	r0, #0
 8008212:	d110      	bne.n	8008236 <TelitPortalAuthenticate+0x11a>
                for(i = 5; i > 0; i--)
 8008214:	3c01      	subs	r4, #1
 8008216:	e7f1      	b.n	80081fc <TelitPortalAuthenticate+0xe0>
                  {
                    return true;
                  }
                }
                ModemCloseTcpSocket(modem_data.socket_id);
 8008218:	4b0b      	ldr	r3, [pc, #44]	; (8008248 <TelitPortalAuthenticate+0x12c>)
 800821a:	68d8      	ldr	r0, [r3, #12]
 800821c:	f7ff fd3a 	bl	8007c94 <ModemCloseTcpSocket>
                return true;
 8008220:	2001      	movs	r0, #1
 8008222:	e004      	b.n	800822e <TelitPortalAuthenticate+0x112>
            }
        }
    }

    ModemCloseTcpSocket(modem_data.socket_id);
 8008224:	4b08      	ldr	r3, [pc, #32]	; (8008248 <TelitPortalAuthenticate+0x12c>)
 8008226:	68d8      	ldr	r0, [r3, #12]
 8008228:	f7ff fd34 	bl	8007c94 <ModemCloseTcpSocket>
    return false;
 800822c:	2000      	movs	r0, #0
}
 800822e:	b002      	add	sp, #8
 8008230:	bd70      	pop	{r4, r5, r6, pc}
    {return false;}
 8008232:	2000      	movs	r0, #0
 8008234:	e7fb      	b.n	800822e <TelitPortalAuthenticate+0x112>
                    return true;
 8008236:	2001      	movs	r0, #1
 8008238:	e7f9      	b.n	800822e <TelitPortalAuthenticate+0x112>
 800823a:	46c0      	nop			; (mov r8, r8)
 800823c:	2000365c 	.word	0x2000365c
 8008240:	20003a6c 	.word	0x20003a6c
 8008244:	20003a5c 	.word	0x20003a5c
 8008248:	200035d8 	.word	0x200035d8
 800824c:	0800e638 	.word	0x0800e638
 8008250:	0800e654 	.word	0x0800e654
 8008254:	0800e3e8 	.word	0x0800e3e8
 8008258:	0800e28c 	.word	0x0800e28c
 800825c:	0800e384 	.word	0x0800e384
 8008260:	00004e20 	.word	0x00004e20
 8008264:	0800e294 	.word	0x0800e294
 8008268:	0800e2a4 	.word	0x0800e2a4
 800826c:	0800e2b4 	.word	0x0800e2b4
 8008270:	2000234c 	.word	0x2000234c

08008274 <TelitPortalPostData>:

/*Post*/
static _Bool TelitPortalPostData(int socket_id)
{
 8008274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008276:	46de      	mov	lr, fp
 8008278:	4657      	mov	r7, sl
 800827a:	464e      	mov	r6, r9
 800827c:	4645      	mov	r5, r8
 800827e:	b5e0      	push	{r5, r6, r7, lr}
 8008280:	b08b      	sub	sp, #44	; 0x2c
 8008282:	4681      	mov	r9, r0
  char *result = NULL;
  uint32_t len;
  
  memset(post_buff, 0, sizeof(post_buff));
 8008284:	4b7e      	ldr	r3, [pc, #504]	; (8008480 <TelitPortalPostData+0x20c>)
 8008286:	469a      	mov	sl, r3
 8008288:	2280      	movs	r2, #128	; 0x80
 800828a:	00d2      	lsls	r2, r2, #3
 800828c:	2100      	movs	r1, #0
 800828e:	0018      	movs	r0, r3
 8008290:	f000 ff20 	bl	80090d4 <memset>
  
  /*Reset rx buffer for data reception*/
  SCP_InitRx();
 8008294:	f7fe fdae 	bl	8006df4 <SCP_InitRx>
            modem_data.imei,
            modem_data.imei,
            modem_data.imei,
            modem_data.imei,
            modem_data.imei,
			(int)storage.energy_stored_mah,
 8008298:	4b7a      	ldr	r3, [pc, #488]	; (8008484 <TelitPortalPostData+0x210>)
 800829a:	6a1e      	ldr	r6, [r3, #32]
 800829c:	6a5f      	ldr	r7, [r3, #36]	; 0x24
			(int)storage.energy_released_mah,
 800829e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80082a0:	6add      	ldr	r5, [r3, #44]	; 0x2c
			(int)modem_data.day_lenght_store,
 80082a2:	4a79      	ldr	r2, [pc, #484]	; (8008488 <TelitPortalPostData+0x214>)
 80082a4:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
 80082a6:	468b      	mov	fp, r1
			(int)storage.total_batt_ouput_ah,
 80082a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80082aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
			(int)storage.vbatt_mv
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	9308      	str	r3, [sp, #32]
    sprintf(
 80082b0:	2325      	movs	r3, #37	; 0x25
 80082b2:	4698      	mov	r8, r3
 80082b4:	4490      	add	r8, r2
 80082b6:	f7fa f96f 	bl	8002598 <__aeabi_d2iz>
 80082ba:	9007      	str	r0, [sp, #28]
 80082bc:	465b      	mov	r3, fp
 80082be:	9306      	str	r3, [sp, #24]
 80082c0:	0020      	movs	r0, r4
 80082c2:	0029      	movs	r1, r5
 80082c4:	f7fa f968 	bl	8002598 <__aeabi_d2iz>
 80082c8:	9005      	str	r0, [sp, #20]
 80082ca:	0030      	movs	r0, r6
 80082cc:	0039      	movs	r1, r7
 80082ce:	f7fa f963 	bl	8002598 <__aeabi_d2iz>
 80082d2:	9004      	str	r0, [sp, #16]
 80082d4:	4643      	mov	r3, r8
 80082d6:	9303      	str	r3, [sp, #12]
 80082d8:	9302      	str	r3, [sp, #8]
 80082da:	9301      	str	r3, [sp, #4]
 80082dc:	9300      	str	r3, [sp, #0]
 80082de:	4a6b      	ldr	r2, [pc, #428]	; (800848c <TelitPortalPostData+0x218>)
 80082e0:	496b      	ldr	r1, [pc, #428]	; (8008490 <TelitPortalPostData+0x21c>)
 80082e2:	4650      	mov	r0, sl
 80082e4:	f000 fefe 	bl	80090e4 <sprintf>
              );

    len += strlen((char *)post_buff);
 80082e8:	4650      	mov	r0, sl
 80082ea:	f7f7 ff0d 	bl	8000108 <strlen>
 80082ee:	30c8      	adds	r0, #200	; 0xc8
 80082f0:	30ff      	adds	r0, #255	; 0xff
 80082f2:	0005      	movs	r5, r0
    
    // form the buffer with post header
    result = SocketSend(socket_id, (char *)fcmd_HTTPPOST, strlen(fcmd_HTTPPOST));
 80082f4:	2260      	movs	r2, #96	; 0x60
 80082f6:	4967      	ldr	r1, [pc, #412]	; (8008494 <TelitPortalPostData+0x220>)
 80082f8:	4648      	mov	r0, r9
 80082fa:	f7ff fd03 	bl	8007d04 <SocketSend>
 80082fe:	0004      	movs	r4, r0

    sprintf((char *)post_buff,"%d\r\n\r\n", (int)len);
 8008300:	002a      	movs	r2, r5
 8008302:	4965      	ldr	r1, [pc, #404]	; (8008498 <TelitPortalPostData+0x224>)
 8008304:	4650      	mov	r0, sl
 8008306:	f000 feed 	bl	80090e4 <sprintf>
    if(result) result = SocketSend(socket_id, post_buff, strlen(post_buff));
 800830a:	2c00      	cmp	r4, #0
 800830c:	d009      	beq.n	8008322 <TelitPortalPostData+0xae>
 800830e:	4c5c      	ldr	r4, [pc, #368]	; (8008480 <TelitPortalPostData+0x20c>)
 8008310:	0020      	movs	r0, r4
 8008312:	f7f7 fef9 	bl	8000108 <strlen>
 8008316:	0002      	movs	r2, r0
 8008318:	0021      	movs	r1, r4
 800831a:	4648      	mov	r0, r9
 800831c:	f7ff fcf2 	bl	8007d04 <SocketSend>
 8008320:	0004      	movs	r4, r0

    sprintf((char *)post_buff, fcmd_dw_post_auth, telit_sessionId);
 8008322:	4a5a      	ldr	r2, [pc, #360]	; (800848c <TelitPortalPostData+0x218>)
 8008324:	495d      	ldr	r1, [pc, #372]	; (800849c <TelitPortalPostData+0x228>)
 8008326:	4856      	ldr	r0, [pc, #344]	; (8008480 <TelitPortalPostData+0x20c>)
 8008328:	f000 fedc 	bl	80090e4 <sprintf>
    if(result) result = SocketSend(socket_id, post_buff, strlen(post_buff));
 800832c:	2c00      	cmp	r4, #0
 800832e:	d009      	beq.n	8008344 <TelitPortalPostData+0xd0>
 8008330:	4c53      	ldr	r4, [pc, #332]	; (8008480 <TelitPortalPostData+0x20c>)
 8008332:	0020      	movs	r0, r4
 8008334:	f7f7 fee8 	bl	8000108 <strlen>
 8008338:	0002      	movs	r2, r0
 800833a:	0021      	movs	r1, r4
 800833c:	4648      	mov	r0, r9
 800833e:	f7ff fce1 	bl	8007d04 <SocketSend>
 8008342:	0004      	movs	r4, r0

    // post first line
    sprintf((char *)post_buff, fcmd_dw_post_p1, modem_data.imei, (int)storage.energy_stored_mah);
 8008344:	4b4f      	ldr	r3, [pc, #316]	; (8008484 <TelitPortalPostData+0x210>)
 8008346:	6a18      	ldr	r0, [r3, #32]
 8008348:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800834a:	f7fa f925 	bl	8002598 <__aeabi_d2iz>
 800834e:	0003      	movs	r3, r0
 8008350:	4a4d      	ldr	r2, [pc, #308]	; (8008488 <TelitPortalPostData+0x214>)
 8008352:	3225      	adds	r2, #37	; 0x25
 8008354:	4952      	ldr	r1, [pc, #328]	; (80084a0 <TelitPortalPostData+0x22c>)
 8008356:	484a      	ldr	r0, [pc, #296]	; (8008480 <TelitPortalPostData+0x20c>)
 8008358:	f000 fec4 	bl	80090e4 <sprintf>
    if(result) result = SocketSend(socket_id, post_buff, strlen(post_buff));
 800835c:	2c00      	cmp	r4, #0
 800835e:	d009      	beq.n	8008374 <TelitPortalPostData+0x100>
 8008360:	4c47      	ldr	r4, [pc, #284]	; (8008480 <TelitPortalPostData+0x20c>)
 8008362:	0020      	movs	r0, r4
 8008364:	f7f7 fed0 	bl	8000108 <strlen>
 8008368:	0002      	movs	r2, r0
 800836a:	0021      	movs	r1, r4
 800836c:	4648      	mov	r0, r9
 800836e:	f7ff fcc9 	bl	8007d04 <SocketSend>
 8008372:	0004      	movs	r4, r0

    // post second line
    sprintf((char *)post_buff, fcmd_dw_post_p2, modem_data.imei, (int)storage.energy_released_mah);
 8008374:	4b43      	ldr	r3, [pc, #268]	; (8008484 <TelitPortalPostData+0x210>)
 8008376:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008378:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800837a:	f7fa f90d 	bl	8002598 <__aeabi_d2iz>
 800837e:	0003      	movs	r3, r0
 8008380:	4a41      	ldr	r2, [pc, #260]	; (8008488 <TelitPortalPostData+0x214>)
 8008382:	3225      	adds	r2, #37	; 0x25
 8008384:	4947      	ldr	r1, [pc, #284]	; (80084a4 <TelitPortalPostData+0x230>)
 8008386:	483e      	ldr	r0, [pc, #248]	; (8008480 <TelitPortalPostData+0x20c>)
 8008388:	f000 feac 	bl	80090e4 <sprintf>
    if(result) result = SocketSend(socket_id, post_buff, strlen(post_buff));
 800838c:	2c00      	cmp	r4, #0
 800838e:	d009      	beq.n	80083a4 <TelitPortalPostData+0x130>
 8008390:	4c3b      	ldr	r4, [pc, #236]	; (8008480 <TelitPortalPostData+0x20c>)
 8008392:	0020      	movs	r0, r4
 8008394:	f7f7 feb8 	bl	8000108 <strlen>
 8008398:	0002      	movs	r2, r0
 800839a:	0021      	movs	r1, r4
 800839c:	4648      	mov	r0, r9
 800839e:	f7ff fcb1 	bl	8007d04 <SocketSend>
 80083a2:	0004      	movs	r4, r0

    // post third line
    sprintf((char *)post_buff, fcmd_dw_post_p3, modem_data.imei, (int)modem_data.day_lenght_store);
 80083a4:	4a38      	ldr	r2, [pc, #224]	; (8008488 <TelitPortalPostData+0x214>)
 80083a6:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 80083a8:	3225      	adds	r2, #37	; 0x25
 80083aa:	493f      	ldr	r1, [pc, #252]	; (80084a8 <TelitPortalPostData+0x234>)
 80083ac:	4834      	ldr	r0, [pc, #208]	; (8008480 <TelitPortalPostData+0x20c>)
 80083ae:	f000 fe99 	bl	80090e4 <sprintf>
    if(result) result = SocketSend(socket_id, post_buff, strlen(post_buff));
 80083b2:	2c00      	cmp	r4, #0
 80083b4:	d009      	beq.n	80083ca <TelitPortalPostData+0x156>
 80083b6:	4c32      	ldr	r4, [pc, #200]	; (8008480 <TelitPortalPostData+0x20c>)
 80083b8:	0020      	movs	r0, r4
 80083ba:	f7f7 fea5 	bl	8000108 <strlen>
 80083be:	0002      	movs	r2, r0
 80083c0:	0021      	movs	r1, r4
 80083c2:	4648      	mov	r0, r9
 80083c4:	f7ff fc9e 	bl	8007d04 <SocketSend>
 80083c8:	0004      	movs	r4, r0

    // post fourth line
    sprintf((char *)post_buff, fcmd_dw_post_p4, modem_data.imei, (int)storage.total_batt_ouput_ah);
 80083ca:	4b2e      	ldr	r3, [pc, #184]	; (8008484 <TelitPortalPostData+0x210>)
 80083cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80083ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80083d0:	f7fa f8e2 	bl	8002598 <__aeabi_d2iz>
 80083d4:	0003      	movs	r3, r0
 80083d6:	4a2c      	ldr	r2, [pc, #176]	; (8008488 <TelitPortalPostData+0x214>)
 80083d8:	3225      	adds	r2, #37	; 0x25
 80083da:	4934      	ldr	r1, [pc, #208]	; (80084ac <TelitPortalPostData+0x238>)
 80083dc:	4828      	ldr	r0, [pc, #160]	; (8008480 <TelitPortalPostData+0x20c>)
 80083de:	f000 fe81 	bl	80090e4 <sprintf>
    if(result) result = SocketSend(socket_id, post_buff, strlen(post_buff));
 80083e2:	2c00      	cmp	r4, #0
 80083e4:	d009      	beq.n	80083fa <TelitPortalPostData+0x186>
 80083e6:	4c26      	ldr	r4, [pc, #152]	; (8008480 <TelitPortalPostData+0x20c>)
 80083e8:	0020      	movs	r0, r4
 80083ea:	f7f7 fe8d 	bl	8000108 <strlen>
 80083ee:	0002      	movs	r2, r0
 80083f0:	0021      	movs	r1, r4
 80083f2:	4648      	mov	r0, r9
 80083f4:	f7ff fc86 	bl	8007d04 <SocketSend>
 80083f8:	0004      	movs	r4, r0

    // post fifth line
    sprintf((char *)post_buff, fcmd_dw_post_p5, modem_data.imei, (int)storage.vbatt_mv);
 80083fa:	4b22      	ldr	r3, [pc, #136]	; (8008484 <TelitPortalPostData+0x210>)
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	4a22      	ldr	r2, [pc, #136]	; (8008488 <TelitPortalPostData+0x214>)
 8008400:	3225      	adds	r2, #37	; 0x25
 8008402:	492b      	ldr	r1, [pc, #172]	; (80084b0 <TelitPortalPostData+0x23c>)
 8008404:	481e      	ldr	r0, [pc, #120]	; (8008480 <TelitPortalPostData+0x20c>)
 8008406:	f000 fe6d 	bl	80090e4 <sprintf>
    if(result) result = SocketSend(socket_id, post_buff, strlen(post_buff));
 800840a:	2c00      	cmp	r4, #0
 800840c:	d009      	beq.n	8008422 <TelitPortalPostData+0x1ae>
 800840e:	4c1c      	ldr	r4, [pc, #112]	; (8008480 <TelitPortalPostData+0x20c>)
 8008410:	0020      	movs	r0, r4
 8008412:	f7f7 fe79 	bl	8000108 <strlen>
 8008416:	0002      	movs	r2, r0
 8008418:	0021      	movs	r1, r4
 800841a:	4648      	mov	r0, r9
 800841c:	f7ff fc72 	bl	8007d04 <SocketSend>
 8008420:	0004      	movs	r4, r0

    if(result) result = SocketSend(socket_id, "\r\n", strlen("\r\n"));
 8008422:	2c00      	cmp	r4, #0
 8008424:	d005      	beq.n	8008432 <TelitPortalPostData+0x1be>
 8008426:	2202      	movs	r2, #2
 8008428:	4922      	ldr	r1, [pc, #136]	; (80084b4 <TelitPortalPostData+0x240>)
 800842a:	4648      	mov	r0, r9
 800842c:	f7ff fc6a 	bl	8007d04 <SocketSend>
 8008430:	0004      	movs	r4, r0

    if(!result)
 8008432:	2c00      	cmp	r4, #0
 8008434:	d022      	beq.n	800847c <TelitPortalPostData+0x208>
    {return false;}
    
    /* Wait for URC */
    result = SCP_WaitForAnswer("READY RECV\r\n", 20000);
 8008436:	4920      	ldr	r1, [pc, #128]	; (80084b8 <TelitPortalPostData+0x244>)
 8008438:	4820      	ldr	r0, [pc, #128]	; (80084bc <TelitPortalPostData+0x248>)
 800843a:	f7fe fd03 	bl	8006e44 <SCP_WaitForAnswer>
    
    if (result)
 800843e:	2800      	cmp	r0, #0
 8008440:	d00a      	beq.n	8008458 <TelitPortalPostData+0x1e4>
    {
        result = SocketReceive(modem_data.socket_id);
 8008442:	4b11      	ldr	r3, [pc, #68]	; (8008488 <TelitPortalPostData+0x214>)
 8008444:	68d8      	ldr	r0, [r3, #12]
 8008446:	f7ff fe15 	bl	8008074 <SocketReceive>
        if(result)
 800844a:	2800      	cmp	r0, #0
 800844c:	d004      	beq.n	8008458 <TelitPortalPostData+0x1e4>
        {
            result = strstr(result, "}}");
 800844e:	491c      	ldr	r1, [pc, #112]	; (80084c0 <TelitPortalPostData+0x24c>)
 8008450:	f000 fe8b 	bl	800916a <strstr>
            if(result)
 8008454:	2800      	cmp	r0, #0
 8008456:	d10b      	bne.n	8008470 <TelitPortalPostData+0x1fc>
            }
        }
    }
  
  /*Timeout. In case of error, no }} received*/
  ModemCloseTcpSocket(modem_data.socket_id);
 8008458:	4b0b      	ldr	r3, [pc, #44]	; (8008488 <TelitPortalPostData+0x214>)
 800845a:	68d8      	ldr	r0, [r3, #12]
 800845c:	f7ff fc1a 	bl	8007c94 <ModemCloseTcpSocket>
  return false;
 8008460:	2000      	movs	r0, #0
}
 8008462:	b00b      	add	sp, #44	; 0x2c
 8008464:	bcf0      	pop	{r4, r5, r6, r7}
 8008466:	46bb      	mov	fp, r7
 8008468:	46b2      	mov	sl, r6
 800846a:	46a9      	mov	r9, r5
 800846c:	46a0      	mov	r8, r4
 800846e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                  ModemCloseTcpSocket(modem_data.socket_id);
 8008470:	4b05      	ldr	r3, [pc, #20]	; (8008488 <TelitPortalPostData+0x214>)
 8008472:	68d8      	ldr	r0, [r3, #12]
 8008474:	f7ff fc0e 	bl	8007c94 <ModemCloseTcpSocket>
                  return true;
 8008478:	2001      	movs	r0, #1
 800847a:	e7f2      	b.n	8008462 <TelitPortalPostData+0x1ee>
    {return false;}
 800847c:	2000      	movs	r0, #0
 800847e:	e7f0      	b.n	8008462 <TelitPortalPostData+0x1ee>
 8008480:	2000365c 	.word	0x2000365c
 8008484:	20003ac0 	.word	0x20003ac0
 8008488:	200035d8 	.word	0x200035d8
 800848c:	20003a6c 	.word	0x20003a6c
 8008490:	0800e2c8 	.word	0x0800e2c8
 8008494:	0800e384 	.word	0x0800e384
 8008498:	0800e28c 	.word	0x0800e28c
 800849c:	0800e44c 	.word	0x0800e44c
 80084a0:	0800e468 	.word	0x0800e468
 80084a4:	0800e4c4 	.word	0x0800e4c4
 80084a8:	0800e524 	.word	0x0800e524
 80084ac:	0800e57c 	.word	0x0800e57c
 80084b0:	0800e5dc 	.word	0x0800e5dc
 80084b4:	0800e290 	.word	0x0800e290
 80084b8:	00004e20 	.word	0x00004e20
 80084bc:	0800e294 	.word	0x0800e294
 80084c0:	0800e2e0 	.word	0x0800e2e0

080084c4 <ModemOpenTcpSocket>:
{
 80084c4:	b570      	push	{r4, r5, r6, lr}
 80084c6:	b08a      	sub	sp, #40	; 0x28
 80084c8:	0004      	movs	r4, r0
 80084ca:	000d      	movs	r5, r1
 80084cc:	0016      	movs	r6, r2
    memset(buff, 0, sizeof(buff));
 80084ce:	2223      	movs	r2, #35	; 0x23
 80084d0:	2100      	movs	r1, #0
 80084d2:	a801      	add	r0, sp, #4
 80084d4:	f000 fdfe 	bl	80090d4 <memset>
    sprintf(buff, "AT+ETL=1,0,0,\"%s\",%d\r\n", pAddress, (int)port);
 80084d8:	002b      	movs	r3, r5
 80084da:	0022      	movs	r2, r4
 80084dc:	490f      	ldr	r1, [pc, #60]	; (800851c <ModemOpenTcpSocket+0x58>)
 80084de:	a801      	add	r0, sp, #4
 80084e0:	f000 fe00 	bl	80090e4 <sprintf>
    result = SCP_SendCommandWaitAnswer(buff, "OK", 10000, 1);
 80084e4:	2301      	movs	r3, #1
 80084e6:	4a0e      	ldr	r2, [pc, #56]	; (8008520 <ModemOpenTcpSocket+0x5c>)
 80084e8:	490e      	ldr	r1, [pc, #56]	; (8008524 <ModemOpenTcpSocket+0x60>)
 80084ea:	a801      	add	r0, sp, #4
 80084ec:	f7fe fc3e 	bl	8006d6c <SCP_SendCommandWaitAnswer>
    if(result)
 80084f0:	2800      	cmp	r0, #0
 80084f2:	d011      	beq.n	8008518 <ModemOpenTcpSocket+0x54>
        result = memmem((char*)SCPHandler.RxBuffer, CMD_BUFF_LENGTH, "+ETL:", sizeof("+ETL:")-1);
 80084f4:	2180      	movs	r1, #128	; 0x80
 80084f6:	2305      	movs	r3, #5
 80084f8:	4a0b      	ldr	r2, [pc, #44]	; (8008528 <ModemOpenTcpSocket+0x64>)
 80084fa:	00c9      	lsls	r1, r1, #3
 80084fc:	480b      	ldr	r0, [pc, #44]	; (800852c <ModemOpenTcpSocket+0x68>)
 80084fe:	f7ff fc4b 	bl	8007d98 <memmem>
        if(result)
 8008502:	2800      	cmp	r0, #0
 8008504:	d102      	bne.n	800850c <ModemOpenTcpSocket+0x48>
    return false;
 8008506:	2000      	movs	r0, #0
}
 8008508:	b00a      	add	sp, #40	; 0x28
 800850a:	bd70      	pop	{r4, r5, r6, pc}
            result += 6;
 800850c:	3006      	adds	r0, #6
            *socket_id = atoi(result);
 800850e:	f000 fd8e 	bl	800902e <atoi>
 8008512:	6030      	str	r0, [r6, #0]
            return true;
 8008514:	2001      	movs	r0, #1
 8008516:	e7f7      	b.n	8008508 <ModemOpenTcpSocket+0x44>
    return false;
 8008518:	2000      	movs	r0, #0
 800851a:	e7f5      	b.n	8008508 <ModemOpenTcpSocket+0x44>
 800851c:	0800e2e4 	.word	0x0800e2e4
 8008520:	00002710 	.word	0x00002710
 8008524:	0800e158 	.word	0x0800e158
 8008528:	0800e2fc 	.word	0x0800e2fc
 800852c:	2000234c 	.word	0x2000234c

08008530 <uart_send_buff>:
{
 8008530:	b510      	push	{r4, lr}
	return HAL_UART_Transmit_DMA(&huart1, data_out, (uint16_t)size);
 8008532:	b28a      	uxth	r2, r1
 8008534:	0001      	movs	r1, r0
 8008536:	4802      	ldr	r0, [pc, #8]	; (8008540 <uart_send_buff+0x10>)
 8008538:	f7fc f9f2 	bl	8004920 <HAL_UART_Transmit_DMA>
}
 800853c:	bd10      	pop	{r4, pc}
 800853e:	46c0      	nop			; (mov r8, r8)
 8008540:	20002d08 	.word	0x20002d08

08008544 <uart_read_byte>:
{
 8008544:	b510      	push	{r4, lr}
 8008546:	0001      	movs	r1, r0
	return HAL_UART_Receive_DMA(&huart1, pData, 1);
 8008548:	2201      	movs	r2, #1
 800854a:	4802      	ldr	r0, [pc, #8]	; (8008554 <uart_read_byte+0x10>)
 800854c:	f7fc ff8c 	bl	8005468 <HAL_UART_Receive_DMA>
}
 8008550:	bd10      	pop	{r4, pc}
 8008552:	46c0      	nop			; (mov r8, r8)
 8008554:	20002d08 	.word	0x20002d08

08008558 <TelitCloudUpload>:

upload_error_t TelitCloudUpload(void)
{
 8008558:	b570      	push	{r4, r5, r6, lr}
  if(*pwr_level < PWRONLVL)
 800855a:	4bc6      	ldr	r3, [pc, #792]	; (8008874 <TelitCloudUpload+0x31c>)
 800855c:	891a      	ldrh	r2, [r3, #8]
 800855e:	4bc6      	ldr	r3, [pc, #792]	; (8008878 <TelitCloudUpload+0x320>)
 8008560:	429a      	cmp	r2, r3
 8008562:	d918      	bls.n	8008596 <TelitCloudUpload+0x3e>
    return true;
 8008564:	2301      	movs	r3, #1
  _Bool result = false;  
  char * scp_result = NULL;
  upload_error_t return_error = UPLOAD_OK;
  
  /*Apply power for IoT LTE module*/
  if(!ModemOn(&storage.adc_data[4]))
 8008566:	2b00      	cmp	r3, #0
 8008568:	d12b      	bne.n	80085c2 <TelitCloudUpload+0x6a>
  {
    return_error = MODEM_POWER_ON_FAIL;
 800856a:	2401      	movs	r4, #1
  modem_data.modem_power_en = false;
  return return_error;
  
error_exit:
  /*Turn off LED*/
  SetLED(false);
 800856c:	2000      	movs	r0, #0
 800856e:	f7ff fbaf 	bl	8007cd0 <SetLED>

  /*Turn off Modem*/
/*Stop Timer*/
HAL_TIM_Base_Stop_IT(&htim7);
 8008572:	48c2      	ldr	r0, [pc, #776]	; (800887c <TelitCloudUpload+0x324>)
 8008574:	f7fc f82e 	bl	80045d4 <HAL_TIM_Base_Stop_IT>
  if(*pwr_level >= PWRONLVL)
 8008578:	4bbe      	ldr	r3, [pc, #760]	; (8008874 <TelitCloudUpload+0x31c>)
 800857a:	891a      	ldrh	r2, [r3, #8]
 800857c:	4bbe      	ldr	r3, [pc, #760]	; (8008878 <TelitCloudUpload+0x320>)
 800857e:	429a      	cmp	r2, r3
 8008580:	d900      	bls.n	8008584 <TelitCloudUpload+0x2c>
 8008582:	e160      	b.n	8008846 <TelitCloudUpload+0x2ee>
    return true;
 8008584:	2301      	movs	r3, #1
  if(!ModemOff(&storage.adc_data[4]))
 8008586:	2b00      	cmp	r3, #0
 8008588:	d100      	bne.n	800858c <TelitCloudUpload+0x34>
 800858a:	e16e      	b.n	800886a <TelitCloudUpload+0x312>
  {
    return_error = MODEM_POWER_OFF_FAIL;
    modem_data.modem_power_en = false;
    return return_error;
  }
  modem_data.modem_power_en = false;
 800858c:	4bbc      	ldr	r3, [pc, #752]	; (8008880 <TelitCloudUpload+0x328>)
 800858e:	2200      	movs	r2, #0
 8008590:	701a      	strb	r2, [r3, #0]
  return return_error;
}
 8008592:	0020      	movs	r0, r4
 8008594:	bd70      	pop	{r4, r5, r6, pc}
	HAL_GPIO_WritePin(LDO_OFF_GPIO_Port, LDO_OFF_Pin, GPIO_PIN_RESET);
 8008596:	20a0      	movs	r0, #160	; 0xa0
 8008598:	2200      	movs	r2, #0
 800859a:	2140      	movs	r1, #64	; 0x40
 800859c:	05c0      	lsls	r0, r0, #23
 800859e:	f7fb f946 	bl	800382e <HAL_GPIO_WritePin>
	osDelay(3000);
 80085a2:	48b8      	ldr	r0, [pc, #736]	; (8008884 <TelitCloudUpload+0x32c>)
 80085a4:	f7fc ffe9 	bl	800557a <osDelay>
    if(*pwr_level >= PWRONLVL)
 80085a8:	4bb2      	ldr	r3, [pc, #712]	; (8008874 <TelitCloudUpload+0x31c>)
 80085aa:	891a      	ldrh	r2, [r3, #8]
 80085ac:	4bb2      	ldr	r3, [pc, #712]	; (8008878 <TelitCloudUpload+0x320>)
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d801      	bhi.n	80085b6 <TelitCloudUpload+0x5e>
      return false;
 80085b2:	2300      	movs	r3, #0
 80085b4:	e7d7      	b.n	8008566 <TelitCloudUpload+0xe>
      osDelay(1000);
 80085b6:	20fa      	movs	r0, #250	; 0xfa
 80085b8:	0080      	lsls	r0, r0, #2
 80085ba:	f7fc ffde 	bl	800557a <osDelay>
      return true;
 80085be:	2301      	movs	r3, #1
 80085c0:	e7d1      	b.n	8008566 <TelitCloudUpload+0xe>
  HAL_TIM_Base_Start_IT(&htim7);
 80085c2:	48ae      	ldr	r0, [pc, #696]	; (800887c <TelitCloudUpload+0x324>)
 80085c4:	f7fb ffd0 	bl	8004568 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart1, &aRxBuffer, 1);
 80085c8:	2201      	movs	r2, #1
 80085ca:	49af      	ldr	r1, [pc, #700]	; (8008888 <TelitCloudUpload+0x330>)
 80085cc:	48af      	ldr	r0, [pc, #700]	; (800888c <TelitCloudUpload+0x334>)
 80085ce:	f7fc ff4b 	bl	8005468 <HAL_UART_Receive_DMA>
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 80085d2:	24a0      	movs	r4, #160	; 0xa0
 80085d4:	05e4      	lsls	r4, r4, #23
 80085d6:	2201      	movs	r2, #1
 80085d8:	2180      	movs	r1, #128	; 0x80
 80085da:	0020      	movs	r0, r4
 80085dc:	f7fb f927 	bl	800382e <HAL_GPIO_WritePin>
	osDelay(200);
 80085e0:	20c8      	movs	r0, #200	; 0xc8
 80085e2:	f7fc ffca 	bl	800557a <osDelay>
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 80085e6:	2200      	movs	r2, #0
 80085e8:	2180      	movs	r1, #128	; 0x80
 80085ea:	0020      	movs	r0, r4
 80085ec:	f7fb f91f 	bl	800382e <HAL_GPIO_WritePin>
	osDelay(1000);
 80085f0:	20fa      	movs	r0, #250	; 0xfa
 80085f2:	0080      	lsls	r0, r0, #2
 80085f4:	f7fc ffc1 	bl	800557a <osDelay>
  scp_result =SCP_WaitForAnswer("+EIND: 1", 10000);
 80085f8:	49a5      	ldr	r1, [pc, #660]	; (8008890 <TelitCloudUpload+0x338>)
 80085fa:	48a6      	ldr	r0, [pc, #664]	; (8008894 <TelitCloudUpload+0x33c>)
 80085fc:	f7fe fc22 	bl	8006e44 <SCP_WaitForAnswer>
  scp_result = SCP_SendCommandWaitAnswer("AT\r\n", "OK", 200, 1);
 8008600:	2301      	movs	r3, #1
 8008602:	22c8      	movs	r2, #200	; 0xc8
 8008604:	49a4      	ldr	r1, [pc, #656]	; (8008898 <TelitCloudUpload+0x340>)
 8008606:	48a5      	ldr	r0, [pc, #660]	; (800889c <TelitCloudUpload+0x344>)
 8008608:	f7fe fbb0 	bl	8006d6c <SCP_SendCommandWaitAnswer>
 800860c:	1e04      	subs	r4, r0, #0
  if(!scp_result)
 800860e:	d074      	beq.n	80086fa <TelitCloudUpload+0x1a2>
  if (scp_result)  scp_result = SCP_SendCommandWaitAnswer("AT+ESLP=0\r\n", "OK", 2000, 1);
 8008610:	2c00      	cmp	r4, #0
 8008612:	d007      	beq.n	8008624 <TelitCloudUpload+0xcc>
 8008614:	22fa      	movs	r2, #250	; 0xfa
 8008616:	2301      	movs	r3, #1
 8008618:	00d2      	lsls	r2, r2, #3
 800861a:	499f      	ldr	r1, [pc, #636]	; (8008898 <TelitCloudUpload+0x340>)
 800861c:	48a0      	ldr	r0, [pc, #640]	; (80088a0 <TelitCloudUpload+0x348>)
 800861e:	f7fe fba5 	bl	8006d6c <SCP_SendCommandWaitAnswer>
 8008622:	0004      	movs	r4, r0
  osDelay(5000);
 8008624:	489f      	ldr	r0, [pc, #636]	; (80088a4 <TelitCloudUpload+0x34c>)
 8008626:	f7fc ffa8 	bl	800557a <osDelay>
  if (scp_result) modem_data.modem_power_en = true;
 800862a:	2c00      	cmp	r4, #0
 800862c:	d002      	beq.n	8008634 <TelitCloudUpload+0xdc>
 800862e:	4b94      	ldr	r3, [pc, #592]	; (8008880 <TelitCloudUpload+0x328>)
 8008630:	2201      	movs	r2, #1
 8008632:	701a      	strb	r2, [r3, #0]
  if (scp_result) scp_result = SCP_SendCommandWaitAnswer("AT+CPIN?\r\n", "+CPIN: READY", 2000, 1);
 8008634:	2c00      	cmp	r4, #0
 8008636:	d007      	beq.n	8008648 <TelitCloudUpload+0xf0>
 8008638:	22fa      	movs	r2, #250	; 0xfa
 800863a:	2301      	movs	r3, #1
 800863c:	00d2      	lsls	r2, r2, #3
 800863e:	499a      	ldr	r1, [pc, #616]	; (80088a8 <TelitCloudUpload+0x350>)
 8008640:	489a      	ldr	r0, [pc, #616]	; (80088ac <TelitCloudUpload+0x354>)
 8008642:	f7fe fb93 	bl	8006d6c <SCP_SendCommandWaitAnswer>
 8008646:	0004      	movs	r4, r0
  if (scp_result) scp_result = SCP_SendCommandWaitAnswer("ATE0\r\n", "OK", 2000, 1);
 8008648:	2c00      	cmp	r4, #0
 800864a:	d007      	beq.n	800865c <TelitCloudUpload+0x104>
 800864c:	22fa      	movs	r2, #250	; 0xfa
 800864e:	2301      	movs	r3, #1
 8008650:	00d2      	lsls	r2, r2, #3
 8008652:	4991      	ldr	r1, [pc, #580]	; (8008898 <TelitCloudUpload+0x340>)
 8008654:	4896      	ldr	r0, [pc, #600]	; (80088b0 <TelitCloudUpload+0x358>)
 8008656:	f7fe fb89 	bl	8006d6c <SCP_SendCommandWaitAnswer>
 800865a:	0004      	movs	r4, r0
  if (scp_result) scp_result = SCP_SendCommandWaitAnswer("AT+CMEE=2\r\n", "OK", 2000, 1);
 800865c:	2c00      	cmp	r4, #0
 800865e:	d007      	beq.n	8008670 <TelitCloudUpload+0x118>
 8008660:	22fa      	movs	r2, #250	; 0xfa
 8008662:	2301      	movs	r3, #1
 8008664:	00d2      	lsls	r2, r2, #3
 8008666:	498c      	ldr	r1, [pc, #560]	; (8008898 <TelitCloudUpload+0x340>)
 8008668:	4892      	ldr	r0, [pc, #584]	; (80088b4 <TelitCloudUpload+0x35c>)
 800866a:	f7fe fb7f 	bl	8006d6c <SCP_SendCommandWaitAnswer>
 800866e:	0004      	movs	r4, r0
  osDelay(5000);
 8008670:	488c      	ldr	r0, [pc, #560]	; (80088a4 <TelitCloudUpload+0x34c>)
 8008672:	f7fc ff82 	bl	800557a <osDelay>
  if(scp_result)
 8008676:	2c00      	cmp	r4, #0
 8008678:	d02c      	beq.n	80086d4 <TelitCloudUpload+0x17c>
    scp_result = GetIMEI();
 800867a:	f7ff fa6f 	bl	8007b5c <GetIMEI>
 800867e:	1e04      	subs	r4, r0, #0
    if(scp_result)
 8008680:	d00a      	beq.n	8008698 <TelitCloudUpload+0x140>
      memset(modem_data.imei, 0x00, 16);
 8008682:	4d7f      	ldr	r5, [pc, #508]	; (8008880 <TelitCloudUpload+0x328>)
 8008684:	3525      	adds	r5, #37	; 0x25
 8008686:	2210      	movs	r2, #16
 8008688:	2100      	movs	r1, #0
 800868a:	0028      	movs	r0, r5
 800868c:	f000 fd22 	bl	80090d4 <memset>
      strcpy(modem_data.imei, scp_result);
 8008690:	0021      	movs	r1, r4
 8008692:	0028      	movs	r0, r5
 8008694:	f000 fd61 	bl	800915a <strcpy>
    scp_result = GetID();
 8008698:	f7ff faa2 	bl	8007be0 <GetID>
 800869c:	1e04      	subs	r4, r0, #0
    if(scp_result)
 800869e:	d00a      	beq.n	80086b6 <TelitCloudUpload+0x15e>
      memset(modem_data.device_name, 0x00, 21);
 80086a0:	4d77      	ldr	r5, [pc, #476]	; (8008880 <TelitCloudUpload+0x328>)
 80086a2:	3545      	adds	r5, #69	; 0x45
 80086a4:	2215      	movs	r2, #21
 80086a6:	2100      	movs	r1, #0
 80086a8:	0028      	movs	r0, r5
 80086aa:	f000 fd13 	bl	80090d4 <memset>
      strcpy(modem_data.device_name, scp_result);
 80086ae:	0021      	movs	r1, r4
 80086b0:	0028      	movs	r0, r5
 80086b2:	f000 fd52 	bl	800915a <strcpy>
    scp_result = GetVersion();
 80086b6:	f7ff fac1 	bl	8007c3c <GetVersion>
 80086ba:	1e04      	subs	r4, r0, #0
    if(scp_result)
 80086bc:	d00a      	beq.n	80086d4 <TelitCloudUpload+0x17c>
      memset(modem_data.fw_version, 0x00, 16);
 80086be:	4d70      	ldr	r5, [pc, #448]	; (8008880 <TelitCloudUpload+0x328>)
 80086c0:	355a      	adds	r5, #90	; 0x5a
 80086c2:	2210      	movs	r2, #16
 80086c4:	2100      	movs	r1, #0
 80086c6:	0028      	movs	r0, r5
 80086c8:	f000 fd04 	bl	80090d4 <memset>
      strcpy(modem_data.fw_version, scp_result);
 80086cc:	0021      	movs	r1, r4
 80086ce:	0028      	movs	r0, r5
 80086d0:	f000 fd43 	bl	800915a <strcpy>
  if(!scp_result)
 80086d4:	2c00      	cmp	r4, #0
 80086d6:	d100      	bne.n	80086da <TelitCloudUpload+0x182>
 80086d8:	e0af      	b.n	800883a <TelitCloudUpload+0x2e2>
  if (scp_result) scp_result = SCP_SendCommandWaitAnswer("AT+EGDCONT=0,\"IP\",\"omnitel\"\r", "OK", 2000, 1);
 80086da:	22fa      	movs	r2, #250	; 0xfa
 80086dc:	2301      	movs	r3, #1
 80086de:	00d2      	lsls	r2, r2, #3
 80086e0:	496d      	ldr	r1, [pc, #436]	; (8008898 <TelitCloudUpload+0x340>)
 80086e2:	4875      	ldr	r0, [pc, #468]	; (80088b8 <TelitCloudUpload+0x360>)
 80086e4:	f7fe fb42 	bl	8006d6c <SCP_SendCommandWaitAnswer>
  if (scp_result)
 80086e8:	2800      	cmp	r0, #0
 80086ea:	d100      	bne.n	80086ee <TelitCloudUpload+0x196>
 80086ec:	e0a7      	b.n	800883e <TelitCloudUpload+0x2e6>
    if(!WaitForNetwork())
 80086ee:	f7ff fbc1 	bl	8007e74 <WaitForNetwork>
 80086f2:	2800      	cmp	r0, #0
 80086f4:	d114      	bne.n	8008720 <TelitCloudUpload+0x1c8>
      return_error = MODEM_NO_OPERATOR_PRESENT;
 80086f6:	2408      	movs	r4, #8
 80086f8:	e738      	b.n	800856c <TelitCloudUpload+0x14>
    osDelay(5000);
 80086fa:	486a      	ldr	r0, [pc, #424]	; (80088a4 <TelitCloudUpload+0x34c>)
 80086fc:	f7fc ff3d 	bl	800557a <osDelay>
    HAL_UART_Receive_DMA(&huart1, &aRxBuffer, 1);
 8008700:	2201      	movs	r2, #1
 8008702:	4961      	ldr	r1, [pc, #388]	; (8008888 <TelitCloudUpload+0x330>)
 8008704:	4861      	ldr	r0, [pc, #388]	; (800888c <TelitCloudUpload+0x334>)
 8008706:	f7fc feaf 	bl	8005468 <HAL_UART_Receive_DMA>
    scp_result = SCP_SendCommandWaitAnswer("AT\r\n", "OK", 200, 1);
 800870a:	2301      	movs	r3, #1
 800870c:	22c8      	movs	r2, #200	; 0xc8
 800870e:	4962      	ldr	r1, [pc, #392]	; (8008898 <TelitCloudUpload+0x340>)
 8008710:	4862      	ldr	r0, [pc, #392]	; (800889c <TelitCloudUpload+0x344>)
 8008712:	f7fe fb2b 	bl	8006d6c <SCP_SendCommandWaitAnswer>
 8008716:	1e04      	subs	r4, r0, #0
    if(!scp_result)
 8008718:	d000      	beq.n	800871c <TelitCloudUpload+0x1c4>
 800871a:	e779      	b.n	8008610 <TelitCloudUpload+0xb8>
      return_error = MODEM_CMD_NO_RESPONSE;
 800871c:	2403      	movs	r4, #3
 800871e:	e725      	b.n	800856c <TelitCloudUpload+0x14>
  osDelay(5000);
 8008720:	4860      	ldr	r0, [pc, #384]	; (80088a4 <TelitCloudUpload+0x34c>)
 8008722:	f7fc ff2a 	bl	800557a <osDelay>
  modem_data.signal = SignalQuality();
 8008726:	f7ff fb5d 	bl	8007de4 <SignalQuality>
 800872a:	4c55      	ldr	r4, [pc, #340]	; (8008880 <TelitCloudUpload+0x328>)
 800872c:	6120      	str	r0, [r4, #16]
  modem_data.network_status =  NetworkRegistrationCheck();
 800872e:	f7ff fb7d 	bl	8007e2c <NetworkRegistrationCheck>
 8008732:	6060      	str	r0, [r4, #4]
  if((modem_data.network_status == 1) || (modem_data.network_status == 5))
 8008734:	2801      	cmp	r0, #1
 8008736:	d001      	beq.n	800873c <TelitCloudUpload+0x1e4>
 8008738:	2805      	cmp	r0, #5
 800873a:	d133      	bne.n	80087a4 <TelitCloudUpload+0x24c>
    scp_result = GetOperator();
 800873c:	f7ff fbc6 	bl	8007ecc <GetOperator>
 8008740:	1e04      	subs	r4, r0, #0
    if(scp_result)
 8008742:	d100      	bne.n	8008746 <TelitCloudUpload+0x1ee>
 8008744:	e07d      	b.n	8008842 <TelitCloudUpload+0x2ea>
      memset(modem_data.operator, 0x00, 17);
 8008746:	4d4e      	ldr	r5, [pc, #312]	; (8008880 <TelitCloudUpload+0x328>)
 8008748:	002e      	movs	r6, r5
 800874a:	3614      	adds	r6, #20
 800874c:	2211      	movs	r2, #17
 800874e:	2100      	movs	r1, #0
 8008750:	0030      	movs	r0, r6
 8008752:	f000 fcbf 	bl	80090d4 <memset>
      strcpy(modem_data.operator, scp_result);
 8008756:	0021      	movs	r1, r4
 8008758:	0030      	movs	r0, r6
 800875a:	f000 fcfe 	bl	800915a <strcpy>
    modem_data.context = ContextStatusCheck();
 800875e:	f7ff fbf3 	bl	8007f48 <ContextStatusCheck>
 8008762:	60a8      	str	r0, [r5, #8]
    if(!modem_data.context)
 8008764:	2800      	cmp	r0, #0
 8008766:	d107      	bne.n	8008778 <TelitCloudUpload+0x220>
      modem_data.context = ContextConnect(modem_data.ip_address);
 8008768:	4c45      	ldr	r4, [pc, #276]	; (8008880 <TelitCloudUpload+0x328>)
 800876a:	0020      	movs	r0, r4
 800876c:	3035      	adds	r0, #53	; 0x35
 800876e:	f7ff fc0f 	bl	8007f90 <ContextConnect>
 8008772:	60a0      	str	r0, [r4, #8]
      if(!modem_data.context)
 8008774:	2800      	cmp	r0, #0
 8008776:	d011      	beq.n	800879c <TelitCloudUpload+0x244>
  SetLED(true);
 8008778:	2001      	movs	r0, #1
 800877a:	f7ff faa9 	bl	8007cd0 <SetLED>
  result = ModemOpenTcpSocket("54.93.92.219", 80, &modem_data.socket_id);
 800877e:	4a40      	ldr	r2, [pc, #256]	; (8008880 <TelitCloudUpload+0x328>)
 8008780:	320c      	adds	r2, #12
 8008782:	2150      	movs	r1, #80	; 0x50
 8008784:	484d      	ldr	r0, [pc, #308]	; (80088bc <TelitCloudUpload+0x364>)
 8008786:	f7ff fe9d 	bl	80084c4 <ModemOpenTcpSocket>
 800878a:	0004      	movs	r4, r0
  osDelay(1000);
 800878c:	20fa      	movs	r0, #250	; 0xfa
 800878e:	0080      	lsls	r0, r0, #2
 8008790:	f7fc fef3 	bl	800557a <osDelay>
  if(result)
 8008794:	2c00      	cmp	r4, #0
 8008796:	d10a      	bne.n	80087ae <TelitCloudUpload+0x256>
	return_error = CLOUD_OPEN_SOCKET_ERROR;
 8008798:	2406      	movs	r4, #6
 800879a:	e6e7      	b.n	800856c <TelitCloudUpload+0x14>
        ContextDisconnect();
 800879c:	f7ff f9cc 	bl	8007b38 <ContextDisconnect>
        return_error = MODEM_NO_DATA_SERVICE;
 80087a0:	240b      	movs	r4, #11
        goto error_exit;
 80087a2:	e6e3      	b.n	800856c <TelitCloudUpload+0x14>
    modem_data.context = 0;
 80087a4:	4b36      	ldr	r3, [pc, #216]	; (8008880 <TelitCloudUpload+0x328>)
 80087a6:	2200      	movs	r2, #0
 80087a8:	609a      	str	r2, [r3, #8]
    return_error = MODEM_NOT_REGISTERED;
 80087aa:	240a      	movs	r4, #10
    goto error_exit;
 80087ac:	e6de      	b.n	800856c <TelitCloudUpload+0x14>
	result = TelitPortalAuthenticate(modem_data.socket_id);
 80087ae:	4b34      	ldr	r3, [pc, #208]	; (8008880 <TelitCloudUpload+0x328>)
 80087b0:	68d8      	ldr	r0, [r3, #12]
 80087b2:	f7ff fcb3 	bl	800811c <TelitPortalAuthenticate>
    if(result)
 80087b6:	2800      	cmp	r0, #0
 80087b8:	d101      	bne.n	80087be <TelitCloudUpload+0x266>
    	return_error = CLOUD_AUTH_ERROR;
 80087ba:	2404      	movs	r4, #4
 80087bc:	e6d6      	b.n	800856c <TelitCloudUpload+0x14>
  	  result = ModemOpenTcpSocket("54.93.92.219", 80, &modem_data.socket_id);
 80087be:	4a30      	ldr	r2, [pc, #192]	; (8008880 <TelitCloudUpload+0x328>)
 80087c0:	320c      	adds	r2, #12
 80087c2:	2150      	movs	r1, #80	; 0x50
 80087c4:	483d      	ldr	r0, [pc, #244]	; (80088bc <TelitCloudUpload+0x364>)
 80087c6:	f7ff fe7d 	bl	80084c4 <ModemOpenTcpSocket>
 80087ca:	0004      	movs	r4, r0
  	  osDelay(1000);
 80087cc:	20fa      	movs	r0, #250	; 0xfa
 80087ce:	0080      	lsls	r0, r0, #2
 80087d0:	f7fc fed3 	bl	800557a <osDelay>
      if (result)
 80087d4:	2c00      	cmp	r4, #0
 80087d6:	d101      	bne.n	80087dc <TelitCloudUpload+0x284>
    	return_error = CLOUD_OPEN_SOCKET_ERROR;
 80087d8:	2406      	movs	r4, #6
 80087da:	e6c7      	b.n	800856c <TelitCloudUpload+0x14>
    	result = TelitPortalPostData(modem_data.socket_id);
 80087dc:	4b28      	ldr	r3, [pc, #160]	; (8008880 <TelitCloudUpload+0x328>)
 80087de:	68d8      	ldr	r0, [r3, #12]
 80087e0:	f7ff fd48 	bl	8008274 <TelitPortalPostData>
 80087e4:	1e04      	subs	r4, r0, #0
        if(!result)
 80087e6:	d101      	bne.n	80087ec <TelitCloudUpload+0x294>
          return_error = CLOUD_POST_ERROR;
 80087e8:	2405      	movs	r4, #5
 80087ea:	e6bf      	b.n	800856c <TelitCloudUpload+0x14>
  SetLED(false);
 80087ec:	2000      	movs	r0, #0
 80087ee:	f7ff fa6f 	bl	8007cd0 <SetLED>
  HAL_TIM_Base_Stop_IT(&htim7);
 80087f2:	4822      	ldr	r0, [pc, #136]	; (800887c <TelitCloudUpload+0x324>)
 80087f4:	f7fb feee 	bl	80045d4 <HAL_TIM_Base_Stop_IT>
  if(*pwr_level >= PWRONLVL)
 80087f8:	4b1e      	ldr	r3, [pc, #120]	; (8008874 <TelitCloudUpload+0x31c>)
 80087fa:	891a      	ldrh	r2, [r3, #8]
 80087fc:	4b1e      	ldr	r3, [pc, #120]	; (8008878 <TelitCloudUpload+0x320>)
 80087fe:	429a      	cmp	r2, r3
 8008800:	d806      	bhi.n	8008810 <TelitCloudUpload+0x2b8>
  if(!ModemOff(&storage.adc_data[4]))
 8008802:	2c00      	cmp	r4, #0
 8008804:	d014      	beq.n	8008830 <TelitCloudUpload+0x2d8>
  modem_data.modem_power_en = false;
 8008806:	4b1e      	ldr	r3, [pc, #120]	; (8008880 <TelitCloudUpload+0x328>)
 8008808:	2200      	movs	r2, #0
 800880a:	701a      	strb	r2, [r3, #0]
  return return_error;
 800880c:	2400      	movs	r4, #0
 800880e:	e6c0      	b.n	8008592 <TelitCloudUpload+0x3a>
    HAL_GPIO_WritePin(LDO_OFF_GPIO_Port, LDO_OFF_Pin, GPIO_PIN_SET);
 8008810:	20a0      	movs	r0, #160	; 0xa0
 8008812:	2201      	movs	r2, #1
 8008814:	2140      	movs	r1, #64	; 0x40
 8008816:	05c0      	lsls	r0, r0, #23
 8008818:	f7fb f809 	bl	800382e <HAL_GPIO_WritePin>
    osDelay(3000);
 800881c:	4819      	ldr	r0, [pc, #100]	; (8008884 <TelitCloudUpload+0x32c>)
 800881e:	f7fc feac 	bl	800557a <osDelay>
    if(*pwr_level < PWRONLVL)
 8008822:	4b14      	ldr	r3, [pc, #80]	; (8008874 <TelitCloudUpload+0x31c>)
 8008824:	891a      	ldrh	r2, [r3, #8]
 8008826:	4b14      	ldr	r3, [pc, #80]	; (8008878 <TelitCloudUpload+0x320>)
 8008828:	429a      	cmp	r2, r3
 800882a:	d9ea      	bls.n	8008802 <TelitCloudUpload+0x2aa>
      return false;
 800882c:	2400      	movs	r4, #0
 800882e:	e7e8      	b.n	8008802 <TelitCloudUpload+0x2aa>
    modem_data.modem_power_en = false;
 8008830:	4b13      	ldr	r3, [pc, #76]	; (8008880 <TelitCloudUpload+0x328>)
 8008832:	2200      	movs	r2, #0
 8008834:	701a      	strb	r2, [r3, #0]
    return return_error;
 8008836:	3402      	adds	r4, #2
 8008838:	e6ab      	b.n	8008592 <TelitCloudUpload+0x3a>
    return_error = MODEM_CMD_NO_RESPONSE;
 800883a:	2403      	movs	r4, #3
 800883c:	e696      	b.n	800856c <TelitCloudUpload+0x14>
    return_error = MODEM_CMD_NO_RESPONSE;
 800883e:	2403      	movs	r4, #3
 8008840:	e694      	b.n	800856c <TelitCloudUpload+0x14>
      return_error = MODEM_NO_OPERATOR_PRESENT;
 8008842:	2408      	movs	r4, #8
 8008844:	e692      	b.n	800856c <TelitCloudUpload+0x14>
    HAL_GPIO_WritePin(LDO_OFF_GPIO_Port, LDO_OFF_Pin, GPIO_PIN_SET);
 8008846:	20a0      	movs	r0, #160	; 0xa0
 8008848:	2201      	movs	r2, #1
 800884a:	2140      	movs	r1, #64	; 0x40
 800884c:	05c0      	lsls	r0, r0, #23
 800884e:	f7fa ffee 	bl	800382e <HAL_GPIO_WritePin>
    osDelay(3000);
 8008852:	480c      	ldr	r0, [pc, #48]	; (8008884 <TelitCloudUpload+0x32c>)
 8008854:	f7fc fe91 	bl	800557a <osDelay>
    if(*pwr_level < PWRONLVL)
 8008858:	4b06      	ldr	r3, [pc, #24]	; (8008874 <TelitCloudUpload+0x31c>)
 800885a:	891a      	ldrh	r2, [r3, #8]
 800885c:	4b06      	ldr	r3, [pc, #24]	; (8008878 <TelitCloudUpload+0x320>)
 800885e:	429a      	cmp	r2, r3
 8008860:	d801      	bhi.n	8008866 <TelitCloudUpload+0x30e>
      return true;
 8008862:	2301      	movs	r3, #1
 8008864:	e68f      	b.n	8008586 <TelitCloudUpload+0x2e>
      return false;
 8008866:	2300      	movs	r3, #0
 8008868:	e68d      	b.n	8008586 <TelitCloudUpload+0x2e>
    modem_data.modem_power_en = false;
 800886a:	4b05      	ldr	r3, [pc, #20]	; (8008880 <TelitCloudUpload+0x328>)
 800886c:	2200      	movs	r2, #0
 800886e:	701a      	strb	r2, [r3, #0]
    return return_error;
 8008870:	2402      	movs	r4, #2
 8008872:	e68e      	b.n	8008592 <TelitCloudUpload+0x3a>
 8008874:	20003ac0 	.word	0x20003ac0
 8008878:	00000dab 	.word	0x00000dab
 800887c:	20002cc8 	.word	0x20002cc8
 8008880:	200035d8 	.word	0x200035d8
 8008884:	00000bb8 	.word	0x00000bb8
 8008888:	20002abc 	.word	0x20002abc
 800888c:	20002d08 	.word	0x20002d08
 8008890:	00002710 	.word	0x00002710
 8008894:	0800e304 	.word	0x0800e304
 8008898:	0800e158 	.word	0x0800e158
 800889c:	0800e310 	.word	0x0800e310
 80088a0:	0800e318 	.word	0x0800e318
 80088a4:	00001388 	.word	0x00001388
 80088a8:	0800e324 	.word	0x0800e324
 80088ac:	0800e334 	.word	0x0800e334
 80088b0:	0800e340 	.word	0x0800e340
 80088b4:	0800e348 	.word	0x0800e348
 80088b8:	0800e354 	.word	0x0800e354
 80088bc:	0800e374 	.word	0x0800e374

080088c0 <MonitorTask>:
extern EEPROMStorageTypDef eeprom_info;
osThreadId MonitorTaskHandle;
DevStorageTypDef storage;

void MonitorTask(void const * argument)
{
 80088c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088c2:	46d6      	mov	lr, sl
 80088c4:	464f      	mov	r7, r9
 80088c6:	4646      	mov	r6, r8
 80088c8:	b5c0      	push	{r6, r7, lr}
 80088ca:	b086      	sub	sp, #24
  static uint32_t mon_dayticks = 0;
  static uint32_t daytime_counter= 0;
  static uint32_t nighttime_counter= 0;

  /*Start ADC DMA Process*/
  if(HAL_ADC_Start_DMA(&hadc, (uint32_t *)storage.adc_data, 5) != HAL_OK)
 80088cc:	2205      	movs	r2, #5
 80088ce:	4996      	ldr	r1, [pc, #600]	; (8008b28 <MonitorTask+0x268>)
 80088d0:	4896      	ldr	r0, [pc, #600]	; (8008b2c <MonitorTask+0x26c>)
 80088d2:	f7fa f9fd 	bl	8002cd0 <HAL_ADC_Start_DMA>
 80088d6:	2800      	cmp	r0, #0
 80088d8:	d122      	bne.n	8008920 <MonitorTask+0x60>
  {
	  Error_Handler();
  }

  /*Day time flag initialization*/
  osDelay(1000);
 80088da:	20fa      	movs	r0, #250	; 0xfa
 80088dc:	0080      	lsls	r0, r0, #2
 80088de:	f7fc fe4c 	bl	800557a <osDelay>
  memcpy(local_adc_data, storage.adc_data, sizeof(storage.adc_data));
 80088e2:	4c91      	ldr	r4, [pc, #580]	; (8008b28 <MonitorTask+0x268>)
 80088e4:	220a      	movs	r2, #10
 80088e6:	0021      	movs	r1, r4
 80088e8:	4668      	mov	r0, sp
 80088ea:	f000 fbea 	bl	80090c2 <memcpy>
  storage.vinput_mv = (uint32_t)(local_adc_data[2] * VINPUT_CONST);
 80088ee:	466b      	mov	r3, sp
 80088f0:	8898      	ldrh	r0, [r3, #4]
 80088f2:	f7f9 fe87 	bl	8002604 <__aeabi_i2d>
 80088f6:	4a8e      	ldr	r2, [pc, #568]	; (8008b30 <MonitorTask+0x270>)
 80088f8:	4b8e      	ldr	r3, [pc, #568]	; (8008b34 <MonitorTask+0x274>)
 80088fa:	f7f9 f831 	bl	8001960 <__aeabi_dmul>
 80088fe:	f7f7 fe39 	bl	8000574 <__aeabi_d2uiz>
 8008902:	60e0      	str	r0, [r4, #12]
  if((int)(storage.vinput_mv+eeprom_info.vin_hys_mv) > eeprom_info.vin_limit_mv)
 8008904:	4b8c      	ldr	r3, [pc, #560]	; (8008b38 <MonitorTask+0x278>)
 8008906:	895a      	ldrh	r2, [r3, #10]
 8008908:	1880      	adds	r0, r0, r2
 800890a:	891b      	ldrh	r3, [r3, #8]
 800890c:	4298      	cmp	r0, r3
 800890e:	dd0a      	ble.n	8008926 <MonitorTask+0x66>
  {storage.daytime_flag = 1;}
 8008910:	4a85      	ldr	r2, [pc, #532]	; (8008b28 <MonitorTask+0x268>)
 8008912:	233d      	movs	r3, #61	; 0x3d
 8008914:	2101      	movs	r1, #1
 8008916:	54d1      	strb	r1, [r2, r3]
  else
  {storage.daytime_flag = 0;}

  /*Start timer*/
  HAL_TIM_Base_Start_IT(&htim21);
 8008918:	4888      	ldr	r0, [pc, #544]	; (8008b3c <MonitorTask+0x27c>)
 800891a:	f7fb fe25 	bl	8004568 <HAL_TIM_Base_Start_IT>
 800891e:	e01e      	b.n	800895e <MonitorTask+0x9e>
	  Error_Handler();
 8008920:	f7fe fee4 	bl	80076ec <Error_Handler>
 8008924:	e7d9      	b.n	80088da <MonitorTask+0x1a>
  {storage.daytime_flag = 0;}
 8008926:	4a80      	ldr	r2, [pc, #512]	; (8008b28 <MonitorTask+0x268>)
 8008928:	233d      	movs	r3, #61	; 0x3d
 800892a:	2100      	movs	r1, #0
 800892c:	54d1      	strb	r1, [r2, r3]
 800892e:	e7f3      	b.n	8008918 <MonitorTask+0x58>
		  storage.vard_input_mv = (uint32_t)(local_adc_data[4] * VARD_CONST);

		  /*Convert&Store Input Current*/
		  storage.cinput_ma = (int32_t)((local_adc_data[0] - COFFSET_CONST) * CSENSE_CONST);
		  if(storage.cinput_ma < 0)
		  {storage.cinput_ma = 0;}
 8008930:	4b7d      	ldr	r3, [pc, #500]	; (8008b28 <MonitorTask+0x268>)
 8008932:	2200      	movs	r2, #0
 8008934:	619a      	str	r2, [r3, #24]
 8008936:	e054      	b.n	80089e2 <MonitorTask+0x122>

		  /*Convert&Store Output Current*/
		  storage.coutput_ma = (int32_t)((local_adc_data[1] -COFFSET_CONST) * CSENSE_CONST);
		  if(storage.coutput_ma < 0)
		  {storage.coutput_ma = 0;}
 8008938:	2200      	movs	r2, #0
 800893a:	61da      	str	r2, [r3, #28]
 800893c:	e060      	b.n	8008a00 <MonitorTask+0x140>
		  if((int)(storage.vinput_mv+eeprom_info.vin_hys_mv) > eeprom_info.vin_limit_mv)
		  {
			  daytime_counter++;
			  nighttime_counter= 0;
		  }
		  else if((int)(storage.vinput_mv-eeprom_info.vin_hys_mv) < eeprom_info.vin_limit_mv)
 800893e:	4642      	mov	r2, r8
 8008940:	1a10      	subs	r0, r2, r0
 8008942:	4283      	cmp	r3, r0
 8008944:	dc00      	bgt.n	8008948 <MonitorTask+0x88>
 8008946:	e0c0      	b.n	8008aca <MonitorTask+0x20a>
		  {
			  daytime_counter= 0;
 8008948:	4b7d      	ldr	r3, [pc, #500]	; (8008b40 <MonitorTask+0x280>)
 800894a:	2200      	movs	r2, #0
 800894c:	601a      	str	r2, [r3, #0]
			  nighttime_counter++;
 800894e:	4a7d      	ldr	r2, [pc, #500]	; (8008b44 <MonitorTask+0x284>)
 8008950:	6813      	ldr	r3, [r2, #0]
 8008952:	3301      	adds	r3, #1
 8008954:	6013      	str	r3, [r2, #0]
 8008956:	e0b8      	b.n	8008aca <MonitorTask+0x20a>
			  if(storage.daylength_s > HOURS_24)
			  {storage.daylength_s = HOURS_24;}
		  }
		  else
		  {
			  mon_dayticks = 0;
 8008958:	4b7b      	ldr	r3, [pc, #492]	; (8008b48 <MonitorTask+0x288>)
 800895a:	2200      	movs	r2, #0
 800895c:	601a      	str	r2, [r3, #0]
	  evt = osSignalWait (0x00000001, osWaitForever);
 800895e:	2201      	movs	r2, #1
 8008960:	4252      	negs	r2, r2
 8008962:	2101      	movs	r1, #1
 8008964:	a803      	add	r0, sp, #12
 8008966:	f7fc fe41 	bl	80055ec <osSignalWait>
	  if (evt.status == osEventSignal)
 800896a:	9b03      	ldr	r3, [sp, #12]
 800896c:	2b08      	cmp	r3, #8
 800896e:	d1f6      	bne.n	800895e <MonitorTask+0x9e>
		  HAL_IWDG_Refresh(&hiwdg);
 8008970:	4876      	ldr	r0, [pc, #472]	; (8008b4c <MonitorTask+0x28c>)
 8008972:	f7fa ff97 	bl	80038a4 <HAL_IWDG_Refresh>
		  memcpy(local_adc_data, storage.adc_data, sizeof(storage.adc_data));
 8008976:	4c6c      	ldr	r4, [pc, #432]	; (8008b28 <MonitorTask+0x268>)
 8008978:	220a      	movs	r2, #10
 800897a:	0021      	movs	r1, r4
 800897c:	4668      	mov	r0, sp
 800897e:	f000 fba0 	bl	80090c2 <memcpy>
		  storage.vinput_mv = (uint32_t)(local_adc_data[2] * VINPUT_CONST);
 8008982:	466b      	mov	r3, sp
 8008984:	8898      	ldrh	r0, [r3, #4]
 8008986:	f7f9 fe3d 	bl	8002604 <__aeabi_i2d>
 800898a:	4a69      	ldr	r2, [pc, #420]	; (8008b30 <MonitorTask+0x270>)
 800898c:	4b69      	ldr	r3, [pc, #420]	; (8008b34 <MonitorTask+0x274>)
 800898e:	f7f8 ffe7 	bl	8001960 <__aeabi_dmul>
 8008992:	f7f7 fdef 	bl	8000574 <__aeabi_d2uiz>
 8008996:	4680      	mov	r8, r0
 8008998:	60e0      	str	r0, [r4, #12]
		  storage.vbatt_mv = (uint32_t)(local_adc_data[3] * VBATT_CONST);
 800899a:	466b      	mov	r3, sp
 800899c:	88d8      	ldrh	r0, [r3, #6]
 800899e:	f7f9 fe31 	bl	8002604 <__aeabi_i2d>
 80089a2:	2200      	movs	r2, #0
 80089a4:	4b6a      	ldr	r3, [pc, #424]	; (8008b50 <MonitorTask+0x290>)
 80089a6:	f7f8 ffdb 	bl	8001960 <__aeabi_dmul>
 80089aa:	f7f7 fde3 	bl	8000574 <__aeabi_d2uiz>
 80089ae:	6120      	str	r0, [r4, #16]
		  storage.vard_input_mv = (uint32_t)(local_adc_data[4] * VARD_CONST);
 80089b0:	466b      	mov	r3, sp
 80089b2:	8918      	ldrh	r0, [r3, #8]
 80089b4:	f7f9 fe26 	bl	8002604 <__aeabi_i2d>
 80089b8:	4a66      	ldr	r2, [pc, #408]	; (8008b54 <MonitorTask+0x294>)
 80089ba:	4b67      	ldr	r3, [pc, #412]	; (8008b58 <MonitorTask+0x298>)
 80089bc:	f7f8 ffd0 	bl	8001960 <__aeabi_dmul>
 80089c0:	f7f7 fdd8 	bl	8000574 <__aeabi_d2uiz>
 80089c4:	6160      	str	r0, [r4, #20]
		  storage.cinput_ma = (int32_t)((local_adc_data[0] - COFFSET_CONST) * CSENSE_CONST);
 80089c6:	466b      	mov	r3, sp
 80089c8:	8818      	ldrh	r0, [r3, #0]
 80089ca:	3841      	subs	r0, #65	; 0x41
 80089cc:	f7f9 fe1a 	bl	8002604 <__aeabi_i2d>
 80089d0:	4a62      	ldr	r2, [pc, #392]	; (8008b5c <MonitorTask+0x29c>)
 80089d2:	4b63      	ldr	r3, [pc, #396]	; (8008b60 <MonitorTask+0x2a0>)
 80089d4:	f7f8 ffc4 	bl	8001960 <__aeabi_dmul>
 80089d8:	f7f9 fdde 	bl	8002598 <__aeabi_d2iz>
 80089dc:	61a0      	str	r0, [r4, #24]
		  if(storage.cinput_ma < 0)
 80089de:	2800      	cmp	r0, #0
 80089e0:	dba6      	blt.n	8008930 <MonitorTask+0x70>
		  storage.coutput_ma = (int32_t)((local_adc_data[1] -COFFSET_CONST) * CSENSE_CONST);
 80089e2:	466b      	mov	r3, sp
 80089e4:	8858      	ldrh	r0, [r3, #2]
 80089e6:	3841      	subs	r0, #65	; 0x41
 80089e8:	f7f9 fe0c 	bl	8002604 <__aeabi_i2d>
 80089ec:	4a5b      	ldr	r2, [pc, #364]	; (8008b5c <MonitorTask+0x29c>)
 80089ee:	4b5c      	ldr	r3, [pc, #368]	; (8008b60 <MonitorTask+0x2a0>)
 80089f0:	f7f8 ffb6 	bl	8001960 <__aeabi_dmul>
 80089f4:	f7f9 fdd0 	bl	8002598 <__aeabi_d2iz>
 80089f8:	4b4b      	ldr	r3, [pc, #300]	; (8008b28 <MonitorTask+0x268>)
 80089fa:	61d8      	str	r0, [r3, #28]
		  if(storage.coutput_ma < 0)
 80089fc:	2800      	cmp	r0, #0
 80089fe:	db9b      	blt.n	8008938 <MonitorTask+0x78>
		  storage.energy_stored_mah += (double)(storage.cinput_ma * ETIME_CONST);
 8008a00:	4e49      	ldr	r6, [pc, #292]	; (8008b28 <MonitorTask+0x268>)
 8008a02:	69b0      	ldr	r0, [r6, #24]
 8008a04:	f7f9 fdfe 	bl	8002604 <__aeabi_i2d>
 8008a08:	4a56      	ldr	r2, [pc, #344]	; (8008b64 <MonitorTask+0x2a4>)
 8008a0a:	4b57      	ldr	r3, [pc, #348]	; (8008b68 <MonitorTask+0x2a8>)
 8008a0c:	f7f8 ffa8 	bl	8001960 <__aeabi_dmul>
 8008a10:	6a32      	ldr	r2, [r6, #32]
 8008a12:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008a14:	f7f8 f866 	bl	8000ae4 <__aeabi_dadd>
 8008a18:	0004      	movs	r4, r0
 8008a1a:	000d      	movs	r5, r1
 8008a1c:	6234      	str	r4, [r6, #32]
 8008a1e:	6275      	str	r5, [r6, #36]	; 0x24
		  if(storage.energy_stored_mah > eeprom_info.batt_full_mah)
 8008a20:	4b45      	ldr	r3, [pc, #276]	; (8008b38 <MonitorTask+0x278>)
 8008a22:	89db      	ldrh	r3, [r3, #14]
 8008a24:	469a      	mov	sl, r3
 8008a26:	0018      	movs	r0, r3
 8008a28:	f7f9 fdec 	bl	8002604 <__aeabi_i2d>
 8008a2c:	0006      	movs	r6, r0
 8008a2e:	000f      	movs	r7, r1
 8008a30:	0002      	movs	r2, r0
 8008a32:	000b      	movs	r3, r1
 8008a34:	0020      	movs	r0, r4
 8008a36:	0029      	movs	r1, r5
 8008a38:	f7f7 fd22 	bl	8000480 <__aeabi_dcmpgt>
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	d005      	beq.n	8008a4c <MonitorTask+0x18c>
		  {storage.energy_stored_mah = eeprom_info.batt_full_mah;}
 8008a40:	4650      	mov	r0, sl
 8008a42:	f7f9 fe0f 	bl	8002664 <__aeabi_ui2d>
 8008a46:	4b38      	ldr	r3, [pc, #224]	; (8008b28 <MonitorTask+0x268>)
 8008a48:	6218      	str	r0, [r3, #32]
 8008a4a:	6259      	str	r1, [r3, #36]	; 0x24
		  storage.energy_released_mah += (double)(storage.coutput_ma * ETIME_CONST);
 8008a4c:	4b36      	ldr	r3, [pc, #216]	; (8008b28 <MonitorTask+0x268>)
 8008a4e:	4699      	mov	r9, r3
 8008a50:	69d8      	ldr	r0, [r3, #28]
 8008a52:	f7f9 fdd7 	bl	8002604 <__aeabi_i2d>
 8008a56:	4a43      	ldr	r2, [pc, #268]	; (8008b64 <MonitorTask+0x2a4>)
 8008a58:	4b43      	ldr	r3, [pc, #268]	; (8008b68 <MonitorTask+0x2a8>)
 8008a5a:	f7f8 ff81 	bl	8001960 <__aeabi_dmul>
 8008a5e:	0004      	movs	r4, r0
 8008a60:	000d      	movs	r5, r1
 8008a62:	464b      	mov	r3, r9
 8008a64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a68:	f7f8 f83c 	bl	8000ae4 <__aeabi_dadd>
 8008a6c:	0002      	movs	r2, r0
 8008a6e:	000b      	movs	r3, r1
 8008a70:	4649      	mov	r1, r9
 8008a72:	628a      	str	r2, [r1, #40]	; 0x28
 8008a74:	62cb      	str	r3, [r1, #44]	; 0x2c
		  if(storage.energy_released_mah > eeprom_info.batt_full_mah)
 8008a76:	0030      	movs	r0, r6
 8008a78:	0039      	movs	r1, r7
 8008a7a:	f7f7 fced 	bl	8000458 <__aeabi_dcmplt>
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	d005      	beq.n	8008a8e <MonitorTask+0x1ce>
		  {storage.energy_released_mah = eeprom_info.batt_full_mah;}
 8008a82:	4650      	mov	r0, sl
 8008a84:	f7f9 fdee 	bl	8002664 <__aeabi_ui2d>
 8008a88:	464b      	mov	r3, r9
 8008a8a:	6298      	str	r0, [r3, #40]	; 0x28
 8008a8c:	62d9      	str	r1, [r3, #44]	; 0x2c
		  storage.total_batt_ouput_ah += (double)(storage.coutput_ma * ETIME_CONST/1000);
 8008a8e:	2200      	movs	r2, #0
 8008a90:	4b36      	ldr	r3, [pc, #216]	; (8008b6c <MonitorTask+0x2ac>)
 8008a92:	0020      	movs	r0, r4
 8008a94:	0029      	movs	r1, r5
 8008a96:	f7f8 fb61 	bl	800115c <__aeabi_ddiv>
 8008a9a:	0002      	movs	r2, r0
 8008a9c:	000b      	movs	r3, r1
 8008a9e:	4c22      	ldr	r4, [pc, #136]	; (8008b28 <MonitorTask+0x268>)
 8008aa0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008aa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008aa4:	f7f8 f81e 	bl	8000ae4 <__aeabi_dadd>
 8008aa8:	6320      	str	r0, [r4, #48]	; 0x30
 8008aaa:	6361      	str	r1, [r4, #52]	; 0x34
		  if((int)(storage.vinput_mv+eeprom_info.vin_hys_mv) > eeprom_info.vin_limit_mv)
 8008aac:	4b22      	ldr	r3, [pc, #136]	; (8008b38 <MonitorTask+0x278>)
 8008aae:	8958      	ldrh	r0, [r3, #10]
 8008ab0:	4642      	mov	r2, r8
 8008ab2:	1812      	adds	r2, r2, r0
 8008ab4:	891b      	ldrh	r3, [r3, #8]
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	dc00      	bgt.n	8008abc <MonitorTask+0x1fc>
 8008aba:	e740      	b.n	800893e <MonitorTask+0x7e>
			  daytime_counter++;
 8008abc:	4a20      	ldr	r2, [pc, #128]	; (8008b40 <MonitorTask+0x280>)
 8008abe:	6813      	ldr	r3, [r2, #0]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	6013      	str	r3, [r2, #0]
			  nighttime_counter= 0;
 8008ac4:	4b1f      	ldr	r3, [pc, #124]	; (8008b44 <MonitorTask+0x284>)
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	601a      	str	r2, [r3, #0]
		  if(daytime_counter > TIME_INTEG)
 8008aca:	4b1d      	ldr	r3, [pc, #116]	; (8008b40 <MonitorTask+0x280>)
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	4b28      	ldr	r3, [pc, #160]	; (8008b70 <MonitorTask+0x2b0>)
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d906      	bls.n	8008ae2 <MonitorTask+0x222>
			  storage.daytime_flag = 1;
 8008ad4:	4a14      	ldr	r2, [pc, #80]	; (8008b28 <MonitorTask+0x268>)
 8008ad6:	233d      	movs	r3, #61	; 0x3d
 8008ad8:	2101      	movs	r1, #1
 8008ada:	54d1      	strb	r1, [r2, r3]
			  daytime_counter= 0;
 8008adc:	4b18      	ldr	r3, [pc, #96]	; (8008b40 <MonitorTask+0x280>)
 8008ade:	2200      	movs	r2, #0
 8008ae0:	601a      	str	r2, [r3, #0]
		  if(nighttime_counter > TIME_INTEG)
 8008ae2:	4b18      	ldr	r3, [pc, #96]	; (8008b44 <MonitorTask+0x284>)
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	4b22      	ldr	r3, [pc, #136]	; (8008b70 <MonitorTask+0x2b0>)
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d905      	bls.n	8008af8 <MonitorTask+0x238>
			  storage.daytime_flag = 0;
 8008aec:	2300      	movs	r3, #0
 8008aee:	490e      	ldr	r1, [pc, #56]	; (8008b28 <MonitorTask+0x268>)
 8008af0:	223d      	movs	r2, #61	; 0x3d
 8008af2:	548b      	strb	r3, [r1, r2]
			  nighttime_counter= 0;
 8008af4:	4a13      	ldr	r2, [pc, #76]	; (8008b44 <MonitorTask+0x284>)
 8008af6:	6013      	str	r3, [r2, #0]
		  if(storage.daytime_flag)
 8008af8:	4a0b      	ldr	r2, [pc, #44]	; (8008b28 <MonitorTask+0x268>)
 8008afa:	233d      	movs	r3, #61	; 0x3d
 8008afc:	5cd3      	ldrb	r3, [r2, r3]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d100      	bne.n	8008b04 <MonitorTask+0x244>
 8008b02:	e729      	b.n	8008958 <MonitorTask+0x98>
			  mon_dayticks++;
 8008b04:	4b10      	ldr	r3, [pc, #64]	; (8008b48 <MonitorTask+0x288>)
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	1c50      	adds	r0, r2, #1
 8008b0a:	6018      	str	r0, [r3, #0]
			  storage.daylength_s = (uint32_t)(mon_dayticks/10);
 8008b0c:	210a      	movs	r1, #10
 8008b0e:	f7f7 fb17 	bl	8000140 <__udivsi3>
 8008b12:	4b05      	ldr	r3, [pc, #20]	; (8008b28 <MonitorTask+0x268>)
 8008b14:	6398      	str	r0, [r3, #56]	; 0x38
			  if(storage.daylength_s > HOURS_24)
 8008b16:	4b17      	ldr	r3, [pc, #92]	; (8008b74 <MonitorTask+0x2b4>)
 8008b18:	4298      	cmp	r0, r3
 8008b1a:	d800      	bhi.n	8008b1e <MonitorTask+0x25e>
 8008b1c:	e71f      	b.n	800895e <MonitorTask+0x9e>
			  {storage.daylength_s = HOURS_24;}
 8008b1e:	4b02      	ldr	r3, [pc, #8]	; (8008b28 <MonitorTask+0x268>)
 8008b20:	4a14      	ldr	r2, [pc, #80]	; (8008b74 <MonitorTask+0x2b4>)
 8008b22:	639a      	str	r2, [r3, #56]	; 0x38
 8008b24:	e71b      	b.n	800895e <MonitorTask+0x9e>
 8008b26:	46c0      	nop			; (mov r8, r8)
 8008b28:	20003ac0 	.word	0x20003ac0
 8008b2c:	20002ae0 	.word	0x20002ae0
 8008b30:	6c8b4396 	.word	0x6c8b4396
 8008b34:	401d7be7 	.word	0x401d7be7
 8008b38:	20002ac8 	.word	0x20002ac8
 8008b3c:	20002c48 	.word	0x20002c48
 8008b40:	20003ab0 	.word	0x20003ab0
 8008b44:	20003ab8 	.word	0x20003ab8
 8008b48:	20003ab4 	.word	0x20003ab4
 8008b4c:	20002c38 	.word	0x20002c38
 8008b50:	40100000 	.word	0x40100000
 8008b54:	83126e98 	.word	0x83126e98
 8008b58:	3fe9cac0 	.word	0x3fe9cac0
 8008b5c:	2b020c4a 	.word	0x2b020c4a
 8008b60:	3fff1687 	.word	0x3fff1687
 8008b64:	e1812c13 	.word	0xe1812c13
 8008b68:	3efd208b 	.word	0x3efd208b
 8008b6c:	408f4000 	.word	0x408f4000
 8008b70:	00001770 	.word	0x00001770
 8008b74:	00015180 	.word	0x00015180

08008b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008b78:	b500      	push	{lr}
 8008b7a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8008b7c:	2208      	movs	r2, #8
 8008b7e:	2100      	movs	r1, #0
 8008b80:	4668      	mov	r0, sp
 8008b82:	f000 faa7 	bl	80090d4 <memset>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b86:	4b11      	ldr	r3, [pc, #68]	; (8008bcc <HAL_MspInit+0x54>)
 8008b88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b8a:	2101      	movs	r1, #1
 8008b8c:	430a      	orrs	r2, r1
 8008b8e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8008b90:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008b92:	2280      	movs	r2, #128	; 0x80
 8008b94:	0552      	lsls	r2, r2, #21
 8008b96:	430a      	orrs	r2, r1
 8008b98:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8008b9a:	2002      	movs	r0, #2
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	2103      	movs	r1, #3
 8008ba0:	4240      	negs	r0, r0
 8008ba2:	f7fa fa09 	bl	8002fb8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 3, 0);
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	2103      	movs	r1, #3
 8008baa:	2004      	movs	r0, #4
 8008bac:	f7fa fa04 	bl	8002fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8008bb0:	2004      	movs	r0, #4
 8008bb2:	f7fa fa31 	bl	8003018 <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8008bb6:	23c0      	movs	r3, #192	; 0xc0
 8008bb8:	9300      	str	r3, [sp, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	9301      	str	r3, [sp, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8008bbe:	4668      	mov	r0, sp
 8008bc0:	f7fa fe78 	bl	80038b4 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8008bc4:	f7fa feb6 	bl	8003934 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008bc8:	b003      	add	sp, #12
 8008bca:	bd00      	pop	{pc}
 8008bcc:	40021000 	.word	0x40021000

08008bd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008bd0:	b510      	push	{r4, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bd6:	2214      	movs	r2, #20
 8008bd8:	2100      	movs	r1, #0
 8008bda:	a801      	add	r0, sp, #4
 8008bdc:	f000 fa7a 	bl	80090d4 <memset>
  if(hadc->Instance==ADC1)
 8008be0:	4b21      	ldr	r3, [pc, #132]	; (8008c68 <HAL_ADC_MspInit+0x98>)
 8008be2:	6822      	ldr	r2, [r4, #0]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d001      	beq.n	8008bec <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8008be8:	b006      	add	sp, #24
 8008bea:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008bec:	4b1f      	ldr	r3, [pc, #124]	; (8008c6c <HAL_ADC_MspInit+0x9c>)
 8008bee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008bf0:	2280      	movs	r2, #128	; 0x80
 8008bf2:	0092      	lsls	r2, r2, #2
 8008bf4:	430a      	orrs	r2, r1
 8008bf6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bf8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	4311      	orrs	r1, r2
 8008bfe:	62d9      	str	r1, [r3, #44]	; 0x2c
 8008c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c02:	401a      	ands	r2, r3
 8008c04:	9200      	str	r2, [sp, #0]
 8008c06:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = ISENS1_Pin|ISENS2_Pin|VINPUT_Pin|VBAT_Pin
 8008c08:	231f      	movs	r3, #31
 8008c0a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008c0c:	3b1c      	subs	r3, #28
 8008c0e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c10:	20a0      	movs	r0, #160	; 0xa0
 8008c12:	a901      	add	r1, sp, #4
 8008c14:	05c0      	lsls	r0, r0, #23
 8008c16:	f7fa fd35 	bl	8003684 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8008c1a:	4815      	ldr	r0, [pc, #84]	; (8008c70 <HAL_ADC_MspInit+0xa0>)
 8008c1c:	4b15      	ldr	r3, [pc, #84]	; (8008c74 <HAL_ADC_MspInit+0xa4>)
 8008c1e:	6003      	str	r3, [r0, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8008c20:	2300      	movs	r3, #0
 8008c22:	6043      	str	r3, [r0, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008c24:	6083      	str	r3, [r0, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8008c26:	60c3      	str	r3, [r0, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8008c28:	3380      	adds	r3, #128	; 0x80
 8008c2a:	6103      	str	r3, [r0, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008c2c:	3380      	adds	r3, #128	; 0x80
 8008c2e:	6143      	str	r3, [r0, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008c30:	2380      	movs	r3, #128	; 0x80
 8008c32:	00db      	lsls	r3, r3, #3
 8008c34:	6183      	str	r3, [r0, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8008c36:	2320      	movs	r3, #32
 8008c38:	61c3      	str	r3, [r0, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8008c3a:	2380      	movs	r3, #128	; 0x80
 8008c3c:	019b      	lsls	r3, r3, #6
 8008c3e:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8008c40:	f7fa fafe 	bl	8003240 <HAL_DMA_Init>
 8008c44:	2800      	cmp	r0, #0
 8008c46:	d10b      	bne.n	8008c60 <HAL_ADC_MspInit+0x90>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8008c48:	4b09      	ldr	r3, [pc, #36]	; (8008c70 <HAL_ADC_MspInit+0xa0>)
 8008c4a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008c4c:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 3, 0);
 8008c4e:	2200      	movs	r2, #0
 8008c50:	2103      	movs	r1, #3
 8008c52:	200c      	movs	r0, #12
 8008c54:	f7fa f9b0 	bl	8002fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8008c58:	200c      	movs	r0, #12
 8008c5a:	f7fa f9dd 	bl	8003018 <HAL_NVIC_EnableIRQ>
}
 8008c5e:	e7c3      	b.n	8008be8 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8008c60:	f7fe fd44 	bl	80076ec <Error_Handler>
 8008c64:	e7f0      	b.n	8008c48 <HAL_ADC_MspInit+0x78>
 8008c66:	46c0      	nop			; (mov r8, r8)
 8008c68:	40012400 	.word	0x40012400
 8008c6c:	40021000 	.word	0x40021000
 8008c70:	20002b60 	.word	0x20002b60
 8008c74:	40020008 	.word	0x40020008

08008c78 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8008c78:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8008c7a:	6802      	ldr	r2, [r0, #0]
 8008c7c:	4b07      	ldr	r3, [pc, #28]	; (8008c9c <HAL_CRC_MspInit+0x24>)
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d001      	beq.n	8008c86 <HAL_CRC_MspInit+0xe>
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8008c82:	b002      	add	sp, #8
 8008c84:	4770      	bx	lr
    __HAL_RCC_CRC_CLK_ENABLE();
 8008c86:	4a06      	ldr	r2, [pc, #24]	; (8008ca0 <HAL_CRC_MspInit+0x28>)
 8008c88:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008c8a:	2080      	movs	r0, #128	; 0x80
 8008c8c:	0140      	lsls	r0, r0, #5
 8008c8e:	4301      	orrs	r1, r0
 8008c90:	6311      	str	r1, [r2, #48]	; 0x30
 8008c92:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008c94:	4003      	ands	r3, r0
 8008c96:	9301      	str	r3, [sp, #4]
 8008c98:	9b01      	ldr	r3, [sp, #4]
}
 8008c9a:	e7f2      	b.n	8008c82 <HAL_CRC_MspInit+0xa>
 8008c9c:	40023000 	.word	0x40023000
 8008ca0:	40021000 	.word	0x40021000

08008ca4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008ca4:	b510      	push	{r4, lr}
  if(htim_base->Instance==TIM7)
 8008ca6:	6803      	ldr	r3, [r0, #0]
 8008ca8:	4a11      	ldr	r2, [pc, #68]	; (8008cf0 <HAL_TIM_Base_MspInit+0x4c>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d006      	beq.n	8008cbc <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(htim_base->Instance==TIM21)
 8008cae:	4a11      	ldr	r2, [pc, #68]	; (8008cf4 <HAL_TIM_Base_MspInit+0x50>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d011      	beq.n	8008cd8 <HAL_TIM_Base_MspInit+0x34>
    __HAL_RCC_TIM21_CLK_ENABLE();
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
  else if(htim_base->Instance==TIM22)
 8008cb4:	4a10      	ldr	r2, [pc, #64]	; (8008cf8 <HAL_TIM_Base_MspInit+0x54>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d014      	beq.n	8008ce4 <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8008cba:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 8008cbc:	4a0f      	ldr	r2, [pc, #60]	; (8008cfc <HAL_TIM_Base_MspInit+0x58>)
 8008cbe:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008cc0:	2120      	movs	r1, #32
 8008cc2:	430b      	orrs	r3, r1
 8008cc4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	391d      	subs	r1, #29
 8008cca:	2012      	movs	r0, #18
 8008ccc:	f7fa f974 	bl	8002fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8008cd0:	2012      	movs	r0, #18
 8008cd2:	f7fa f9a1 	bl	8003018 <HAL_NVIC_EnableIRQ>
 8008cd6:	e7f0      	b.n	8008cba <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8008cd8:	4a08      	ldr	r2, [pc, #32]	; (8008cfc <HAL_TIM_Base_MspInit+0x58>)
 8008cda:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8008cdc:	2104      	movs	r1, #4
 8008cde:	430b      	orrs	r3, r1
 8008ce0:	6353      	str	r3, [r2, #52]	; 0x34
 8008ce2:	e7ea      	b.n	8008cba <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8008ce4:	4a05      	ldr	r2, [pc, #20]	; (8008cfc <HAL_TIM_Base_MspInit+0x58>)
 8008ce6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8008ce8:	2120      	movs	r1, #32
 8008cea:	430b      	orrs	r3, r1
 8008cec:	6353      	str	r3, [r2, #52]	; 0x34
}
 8008cee:	e7e4      	b.n	8008cba <HAL_TIM_Base_MspInit+0x16>
 8008cf0:	40001400 	.word	0x40001400
 8008cf4:	40010800 	.word	0x40010800
 8008cf8:	40011400 	.word	0x40011400
 8008cfc:	40021000 	.word	0x40021000

08008d00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008d00:	b510      	push	{r4, lr}
 8008d02:	b086      	sub	sp, #24
 8008d04:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d06:	2214      	movs	r2, #20
 8008d08:	2100      	movs	r1, #0
 8008d0a:	a801      	add	r0, sp, #4
 8008d0c:	f000 f9e2 	bl	80090d4 <memset>
  if(huart->Instance==USART1)
 8008d10:	4b2e      	ldr	r3, [pc, #184]	; (8008dcc <HAL_UART_MspInit+0xcc>)
 8008d12:	6822      	ldr	r2, [r4, #0]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d001      	beq.n	8008d1c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008d18:	b006      	add	sp, #24
 8008d1a:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8008d1c:	4b2c      	ldr	r3, [pc, #176]	; (8008dd0 <HAL_UART_MspInit+0xd0>)
 8008d1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008d20:	2280      	movs	r2, #128	; 0x80
 8008d22:	01d2      	lsls	r2, r2, #7
 8008d24:	430a      	orrs	r2, r1
 8008d26:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008d2a:	2202      	movs	r2, #2
 8008d2c:	4311      	orrs	r1, r2
 8008d2e:	62d9      	str	r1, [r3, #44]	; 0x2c
 8008d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d32:	4013      	ands	r3, r2
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008d38:	23c0      	movs	r3, #192	; 0xc0
 8008d3a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d3c:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008d3e:	3bbf      	subs	r3, #191	; 0xbf
 8008d40:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8008d42:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d44:	a901      	add	r1, sp, #4
 8008d46:	4823      	ldr	r0, [pc, #140]	; (8008dd4 <HAL_UART_MspInit+0xd4>)
 8008d48:	f7fa fc9c 	bl	8003684 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8008d4c:	4822      	ldr	r0, [pc, #136]	; (8008dd8 <HAL_UART_MspInit+0xd8>)
 8008d4e:	4b23      	ldr	r3, [pc, #140]	; (8008ddc <HAL_UART_MspInit+0xdc>)
 8008d50:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 8008d52:	2303      	movs	r3, #3
 8008d54:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008d56:	2300      	movs	r3, #0
 8008d58:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008d5a:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008d5c:	2280      	movs	r2, #128	; 0x80
 8008d5e:	6102      	str	r2, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008d60:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008d62:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8008d64:	3320      	adds	r3, #32
 8008d66:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8008d68:	2380      	movs	r3, #128	; 0x80
 8008d6a:	019b      	lsls	r3, r3, #6
 8008d6c:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008d6e:	f7fa fa67 	bl	8003240 <HAL_DMA_Init>
 8008d72:	2800      	cmp	r0, #0
 8008d74:	d123      	bne.n	8008dbe <HAL_UART_MspInit+0xbe>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8008d76:	4b18      	ldr	r3, [pc, #96]	; (8008dd8 <HAL_UART_MspInit+0xd8>)
 8008d78:	6723      	str	r3, [r4, #112]	; 0x70
 8008d7a:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8008d7c:	4818      	ldr	r0, [pc, #96]	; (8008de0 <HAL_UART_MspInit+0xe0>)
 8008d7e:	4b19      	ldr	r3, [pc, #100]	; (8008de4 <HAL_UART_MspInit+0xe4>)
 8008d80:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
 8008d82:	2303      	movs	r3, #3
 8008d84:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008d86:	330d      	adds	r3, #13
 8008d88:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008d8e:	2280      	movs	r2, #128	; 0x80
 8008d90:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008d92:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008d94:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8008d96:	61c3      	str	r3, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008d98:	2380      	movs	r3, #128	; 0x80
 8008d9a:	015b      	lsls	r3, r3, #5
 8008d9c:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8008d9e:	f7fa fa4f 	bl	8003240 <HAL_DMA_Init>
 8008da2:	2800      	cmp	r0, #0
 8008da4:	d10e      	bne.n	8008dc4 <HAL_UART_MspInit+0xc4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8008da6:	4b0e      	ldr	r3, [pc, #56]	; (8008de0 <HAL_UART_MspInit+0xe0>)
 8008da8:	66e3      	str	r3, [r4, #108]	; 0x6c
 8008daa:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8008dac:	2200      	movs	r2, #0
 8008dae:	2103      	movs	r1, #3
 8008db0:	201b      	movs	r0, #27
 8008db2:	f7fa f901 	bl	8002fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008db6:	201b      	movs	r0, #27
 8008db8:	f7fa f92e 	bl	8003018 <HAL_NVIC_EnableIRQ>
}
 8008dbc:	e7ac      	b.n	8008d18 <HAL_UART_MspInit+0x18>
      Error_Handler();
 8008dbe:	f7fe fc95 	bl	80076ec <Error_Handler>
 8008dc2:	e7d8      	b.n	8008d76 <HAL_UART_MspInit+0x76>
      Error_Handler();
 8008dc4:	f7fe fc92 	bl	80076ec <Error_Handler>
 8008dc8:	e7ed      	b.n	8008da6 <HAL_UART_MspInit+0xa6>
 8008dca:	46c0      	nop			; (mov r8, r8)
 8008dcc:	40013800 	.word	0x40013800
 8008dd0:	40021000 	.word	0x40021000
 8008dd4:	50000400 	.word	0x50000400
 8008dd8:	20002ba8 	.word	0x20002ba8
 8008ddc:	40020030 	.word	0x40020030
 8008de0:	20002bf0 	.word	0x20002bf0
 8008de4:	4002001c 	.word	0x4002001c

08008de8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008de8:	b500      	push	{lr}
 8008dea:	b087      	sub	sp, #28
 8008dec:	0001      	movs	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8008dee:	2200      	movs	r2, #0
 8008df0:	200f      	movs	r0, #15
 8008df2:	f7fa f8e1 	bl	8002fb8 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008df6:	200f      	movs	r0, #15
 8008df8:	f7fa f90e 	bl	8003018 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8008dfc:	4a11      	ldr	r2, [pc, #68]	; (8008e44 <HAL_InitTick+0x5c>)
 8008dfe:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008e00:	2101      	movs	r1, #1
 8008e02:	430b      	orrs	r3, r1
 8008e04:	6393      	str	r3, [r2, #56]	; 0x38

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008e06:	4669      	mov	r1, sp
 8008e08:	a801      	add	r0, sp, #4
 8008e0a:	f7fb f9d1 	bl	80041b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8008e0e:	f7fb f9af 	bl	8004170 <HAL_RCC_GetPCLK1Freq>
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008e12:	490d      	ldr	r1, [pc, #52]	; (8008e48 <HAL_InitTick+0x60>)
 8008e14:	f7f7 f994 	bl	8000140 <__udivsi3>
 8008e18:	1e43      	subs	r3, r0, #1

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8008e1a:	480c      	ldr	r0, [pc, #48]	; (8008e4c <HAL_InitTick+0x64>)
 8008e1c:	2280      	movs	r2, #128	; 0x80
 8008e1e:	05d2      	lsls	r2, r2, #23
 8008e20:	6002      	str	r2, [r0, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8008e22:	4a0b      	ldr	r2, [pc, #44]	; (8008e50 <HAL_InitTick+0x68>)
 8008e24:	60c2      	str	r2, [r0, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8008e26:	6043      	str	r3, [r0, #4]
  htim2.Init.ClockDivision = 0;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	6103      	str	r3, [r0, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008e2c:	6083      	str	r3, [r0, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8008e2e:	f7fb fb47 	bl	80044c0 <HAL_TIM_Base_Init>
 8008e32:	2800      	cmp	r0, #0
 8008e34:	d002      	beq.n	8008e3c <HAL_InitTick+0x54>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
  }

  /* Return function status */
  return HAL_ERROR;
 8008e36:	2001      	movs	r0, #1
}
 8008e38:	b007      	add	sp, #28
 8008e3a:	bd00      	pop	{pc}
    return HAL_TIM_Base_Start_IT(&htim2);
 8008e3c:	4803      	ldr	r0, [pc, #12]	; (8008e4c <HAL_InitTick+0x64>)
 8008e3e:	f7fb fb93 	bl	8004568 <HAL_TIM_Base_Start_IT>
 8008e42:	e7f9      	b.n	8008e38 <HAL_InitTick+0x50>
 8008e44:	40021000 	.word	0x40021000
 8008e48:	000f4240 	.word	0x000f4240
 8008e4c:	20003b00 	.word	0x20003b00
 8008e50:	000003e7 	.word	0x000003e7

08008e54 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008e54:	4770      	bx	lr

08008e56 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008e56:	e7fe      	b.n	8008e56 <HardFault_Handler>

08008e58 <RCC_CRS_IRQHandler>:

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 8008e58:	4770      	bx	lr
	...

08008e5c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008e5c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8008e5e:	4802      	ldr	r0, [pc, #8]	; (8008e68 <DMA1_Channel1_IRQHandler+0xc>)
 8008e60:	f7fa fac0 	bl	80033e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008e64:	bd10      	pop	{r4, pc}
 8008e66:	46c0      	nop			; (mov r8, r8)
 8008e68:	20002b60 	.word	0x20002b60

08008e6c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8008e6c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8008e6e:	4803      	ldr	r0, [pc, #12]	; (8008e7c <DMA1_Channel2_3_IRQHandler+0x10>)
 8008e70:	f7fa fab8 	bl	80033e4 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8008e74:	4802      	ldr	r0, [pc, #8]	; (8008e80 <DMA1_Channel2_3_IRQHandler+0x14>)
 8008e76:	f7fa fab5 	bl	80033e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8008e7a:	bd10      	pop	{r4, pc}
 8008e7c:	20002bf0 	.word	0x20002bf0
 8008e80:	20002ba8 	.word	0x20002ba8

08008e84 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8008e84:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8008e86:	4802      	ldr	r0, [pc, #8]	; (8008e90 <ADC1_COMP_IRQHandler+0xc>)
 8008e88:	f7f9 ffc6 	bl	8002e18 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8008e8c:	bd10      	pop	{r4, pc}
 8008e8e:	46c0      	nop			; (mov r8, r8)
 8008e90:	20002ae0 	.word	0x20002ae0

08008e94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008e94:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008e96:	4802      	ldr	r0, [pc, #8]	; (8008ea0 <TIM2_IRQHandler+0xc>)
 8008e98:	f7fb fc3a 	bl	8004710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008e9c:	bd10      	pop	{r4, pc}
 8008e9e:	46c0      	nop			; (mov r8, r8)
 8008ea0:	20003b00 	.word	0x20003b00

08008ea4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8008ea4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8008ea6:	4802      	ldr	r0, [pc, #8]	; (8008eb0 <TIM7_IRQHandler+0xc>)
 8008ea8:	f7fb fc32 	bl	8004710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8008eac:	bd10      	pop	{r4, pc}
 8008eae:	46c0      	nop			; (mov r8, r8)
 8008eb0:	20002cc8 	.word	0x20002cc8

08008eb4 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8008eb4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8008eb6:	4802      	ldr	r0, [pc, #8]	; (8008ec0 <TIM21_IRQHandler+0xc>)
 8008eb8:	f7fb fc2a 	bl	8004710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8008ebc:	bd10      	pop	{r4, pc}
 8008ebe:	46c0      	nop			; (mov r8, r8)
 8008ec0:	20002c48 	.word	0x20002c48

08008ec4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8008ec4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008ec6:	4802      	ldr	r0, [pc, #8]	; (8008ed0 <USART1_IRQHandler+0xc>)
 8008ec8:	f7fb fe08 	bl	8004adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008ecc:	bd10      	pop	{r4, pc}
 8008ece:	46c0      	nop			; (mov r8, r8)
 8008ed0:	20002d08 	.word	0x20002d08

08008ed4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8008ed4:	2001      	movs	r0, #1
 8008ed6:	4770      	bx	lr

08008ed8 <_kill>:

int _kill(int pid, int sig)
{
 8008ed8:	b510      	push	{r4, lr}
	errno = EINVAL;
 8008eda:	f000 f8af 	bl	800903c <__errno>
 8008ede:	2316      	movs	r3, #22
 8008ee0:	6003      	str	r3, [r0, #0]
	return -1;
 8008ee2:	2001      	movs	r0, #1
}
 8008ee4:	4240      	negs	r0, r0
 8008ee6:	bd10      	pop	{r4, pc}

08008ee8 <_exit>:

void _exit (int status)
{
 8008ee8:	b510      	push	{r4, lr}
	_kill(status, -1);
 8008eea:	2101      	movs	r1, #1
 8008eec:	4249      	negs	r1, r1
 8008eee:	f7ff fff3 	bl	8008ed8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8008ef2:	e7fe      	b.n	8008ef2 <_exit+0xa>

08008ef4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008ef4:	b570      	push	{r4, r5, r6, lr}
 8008ef6:	000c      	movs	r4, r1
 8008ef8:	0016      	movs	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008efa:	2500      	movs	r5, #0
 8008efc:	e004      	b.n	8008f08 <_read+0x14>
	{
		*ptr++ = __io_getchar();
 8008efe:	e000      	b.n	8008f02 <_read+0xe>
 8008f00:	bf00      	nop
 8008f02:	7020      	strb	r0, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008f04:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8008f06:	3401      	adds	r4, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008f08:	42b5      	cmp	r5, r6
 8008f0a:	dbf8      	blt.n	8008efe <_read+0xa>
	}

return len;
}
 8008f0c:	0030      	movs	r0, r6
 8008f0e:	bd70      	pop	{r4, r5, r6, pc}

08008f10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008f10:	b570      	push	{r4, r5, r6, lr}
 8008f12:	0016      	movs	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008f14:	2400      	movs	r4, #0
 8008f16:	e005      	b.n	8008f24 <_write+0x14>
	{
		__io_putchar(*ptr++);
 8008f18:	1c4d      	adds	r5, r1, #1
 8008f1a:	7808      	ldrb	r0, [r1, #0]
 8008f1c:	e000      	b.n	8008f20 <_write+0x10>
 8008f1e:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008f20:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 8008f22:	0029      	movs	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008f24:	42b4      	cmp	r4, r6
 8008f26:	dbf7      	blt.n	8008f18 <_write+0x8>
	}
	return len;
}
 8008f28:	0030      	movs	r0, r6
 8008f2a:	bd70      	pop	{r4, r5, r6, pc}

08008f2c <_close>:

int _close(int file)
{
	return -1;
 8008f2c:	2001      	movs	r0, #1
}
 8008f2e:	4240      	negs	r0, r0
 8008f30:	4770      	bx	lr

08008f32 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8008f32:	2380      	movs	r3, #128	; 0x80
 8008f34:	019b      	lsls	r3, r3, #6
 8008f36:	604b      	str	r3, [r1, #4]
	return 0;
}
 8008f38:	2000      	movs	r0, #0
 8008f3a:	4770      	bx	lr

08008f3c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8008f3c:	2001      	movs	r0, #1
 8008f3e:	4770      	bx	lr

08008f40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8008f40:	2000      	movs	r0, #0
 8008f42:	4770      	bx	lr

08008f44 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008f44:	b510      	push	{r4, lr}
 8008f46:	0003      	movs	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008f48:	4a0b      	ldr	r2, [pc, #44]	; (8008f78 <_sbrk+0x34>)
 8008f4a:	6812      	ldr	r2, [r2, #0]
 8008f4c:	2a00      	cmp	r2, #0
 8008f4e:	d008      	beq.n	8008f62 <_sbrk+0x1e>
		heap_end = &end;

	prev_heap_end = heap_end;
 8008f50:	4a09      	ldr	r2, [pc, #36]	; (8008f78 <_sbrk+0x34>)
 8008f52:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8008f54:	18c3      	adds	r3, r0, r3
 8008f56:	466a      	mov	r2, sp
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d806      	bhi.n	8008f6a <_sbrk+0x26>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8008f5c:	4a06      	ldr	r2, [pc, #24]	; (8008f78 <_sbrk+0x34>)
 8008f5e:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8008f60:	bd10      	pop	{r4, pc}
		heap_end = &end;
 8008f62:	4a05      	ldr	r2, [pc, #20]	; (8008f78 <_sbrk+0x34>)
 8008f64:	4905      	ldr	r1, [pc, #20]	; (8008f7c <_sbrk+0x38>)
 8008f66:	6011      	str	r1, [r2, #0]
 8008f68:	e7f2      	b.n	8008f50 <_sbrk+0xc>
		errno = ENOMEM;
 8008f6a:	f000 f867 	bl	800903c <__errno>
 8008f6e:	230c      	movs	r3, #12
 8008f70:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8008f72:	2001      	movs	r0, #1
 8008f74:	4240      	negs	r0, r0
 8008f76:	e7f3      	b.n	8008f60 <_sbrk+0x1c>
 8008f78:	20003b40 	.word	0x20003b40
 8008f7c:	20003b80 	.word	0x20003b80

08008f80 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8008f80:	4b10      	ldr	r3, [pc, #64]	; (8008fc4 <SystemInit+0x44>)
 8008f82:	6819      	ldr	r1, [r3, #0]
 8008f84:	2280      	movs	r2, #128	; 0x80
 8008f86:	0052      	lsls	r2, r2, #1
 8008f88:	430a      	orrs	r2, r1
 8008f8a:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8008f8c:	68da      	ldr	r2, [r3, #12]
 8008f8e:	490e      	ldr	r1, [pc, #56]	; (8008fc8 <SystemInit+0x48>)
 8008f90:	400a      	ands	r2, r1
 8008f92:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	490d      	ldr	r1, [pc, #52]	; (8008fcc <SystemInit+0x4c>)
 8008f98:	400a      	ands	r2, r1
 8008f9a:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8008f9c:	689a      	ldr	r2, [r3, #8]
 8008f9e:	2101      	movs	r1, #1
 8008fa0:	438a      	bics	r2, r1
 8008fa2:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	490a      	ldr	r1, [pc, #40]	; (8008fd0 <SystemInit+0x50>)
 8008fa8:	400a      	ands	r2, r1
 8008faa:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8008fac:	68da      	ldr	r2, [r3, #12]
 8008fae:	4909      	ldr	r1, [pc, #36]	; (8008fd4 <SystemInit+0x54>)
 8008fb0:	400a      	ands	r2, r1
 8008fb2:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008fb8:	4b07      	ldr	r3, [pc, #28]	; (8008fd8 <SystemInit+0x58>)
 8008fba:	2280      	movs	r2, #128	; 0x80
 8008fbc:	0512      	lsls	r2, r2, #20
 8008fbe:	609a      	str	r2, [r3, #8]
#endif
}
 8008fc0:	4770      	bx	lr
 8008fc2:	46c0      	nop			; (mov r8, r8)
 8008fc4:	40021000 	.word	0x40021000
 8008fc8:	88ff400c 	.word	0x88ff400c
 8008fcc:	fef6fff6 	.word	0xfef6fff6
 8008fd0:	fffbffff 	.word	0xfffbffff
 8008fd4:	ff02ffff 	.word	0xff02ffff
 8008fd8:	e000ed00 	.word	0xe000ed00

08008fdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8008fdc:	480d      	ldr	r0, [pc, #52]	; (8009014 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8008fde:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8008fe0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008fe2:	e003      	b.n	8008fec <LoopCopyDataInit>

08008fe4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008fe4:	4b0c      	ldr	r3, [pc, #48]	; (8009018 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8008fe6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008fe8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008fea:	3104      	adds	r1, #4

08008fec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8008fec:	480b      	ldr	r0, [pc, #44]	; (800901c <LoopForever+0xa>)
  ldr  r3, =_edata
 8008fee:	4b0c      	ldr	r3, [pc, #48]	; (8009020 <LoopForever+0xe>)
  adds  r2, r0, r1
 8008ff0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008ff2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008ff4:	d3f6      	bcc.n	8008fe4 <CopyDataInit>
  ldr  r2, =_sbss
 8008ff6:	4a0b      	ldr	r2, [pc, #44]	; (8009024 <LoopForever+0x12>)
  b  LoopFillZerobss
 8008ff8:	e002      	b.n	8009000 <LoopFillZerobss>

08008ffa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8008ffa:	2300      	movs	r3, #0
  str  r3, [r2]
 8008ffc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008ffe:	3204      	adds	r2, #4

08009000 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8009000:	4b09      	ldr	r3, [pc, #36]	; (8009028 <LoopForever+0x16>)
  cmp  r2, r3
 8009002:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009004:	d3f9      	bcc.n	8008ffa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8009006:	f7ff ffbb 	bl	8008f80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800900a:	f000 f81d 	bl	8009048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800900e:	f7fe fa95 	bl	800753c <main>

08009012 <LoopForever>:

LoopForever:
    b LoopForever
 8009012:	e7fe      	b.n	8009012 <LoopForever>
   ldr   r0, =_estack
 8009014:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8009018:	0800ea38 	.word	0x0800ea38
  ldr  r0, =_sdata
 800901c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009020:	200009c0 	.word	0x200009c0
  ldr  r2, =_sbss
 8009024:	200009c0 	.word	0x200009c0
  ldr  r3, = _ebss
 8009028:	20003b80 	.word	0x20003b80

0800902c <DMA1_Channel4_5_6_7_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800902c:	e7fe      	b.n	800902c <DMA1_Channel4_5_6_7_IRQHandler>

0800902e <atoi>:
 800902e:	b510      	push	{r4, lr}
 8009030:	220a      	movs	r2, #10
 8009032:	2100      	movs	r1, #0
 8009034:	f000 f93e 	bl	80092b4 <strtol>
 8009038:	bd10      	pop	{r4, pc}
	...

0800903c <__errno>:
 800903c:	4b01      	ldr	r3, [pc, #4]	; (8009044 <__errno+0x8>)
 800903e:	6818      	ldr	r0, [r3, #0]
 8009040:	4770      	bx	lr
 8009042:	46c0      	nop			; (mov r8, r8)
 8009044:	20000010 	.word	0x20000010

08009048 <__libc_init_array>:
 8009048:	b570      	push	{r4, r5, r6, lr}
 800904a:	2600      	movs	r6, #0
 800904c:	4d0c      	ldr	r5, [pc, #48]	; (8009080 <__libc_init_array+0x38>)
 800904e:	4c0d      	ldr	r4, [pc, #52]	; (8009084 <__libc_init_array+0x3c>)
 8009050:	1b64      	subs	r4, r4, r5
 8009052:	10a4      	asrs	r4, r4, #2
 8009054:	42a6      	cmp	r6, r4
 8009056:	d109      	bne.n	800906c <__libc_init_array+0x24>
 8009058:	2600      	movs	r6, #0
 800905a:	f004 ff81 	bl	800df60 <_init>
 800905e:	4d0a      	ldr	r5, [pc, #40]	; (8009088 <__libc_init_array+0x40>)
 8009060:	4c0a      	ldr	r4, [pc, #40]	; (800908c <__libc_init_array+0x44>)
 8009062:	1b64      	subs	r4, r4, r5
 8009064:	10a4      	asrs	r4, r4, #2
 8009066:	42a6      	cmp	r6, r4
 8009068:	d105      	bne.n	8009076 <__libc_init_array+0x2e>
 800906a:	bd70      	pop	{r4, r5, r6, pc}
 800906c:	00b3      	lsls	r3, r6, #2
 800906e:	58eb      	ldr	r3, [r5, r3]
 8009070:	4798      	blx	r3
 8009072:	3601      	adds	r6, #1
 8009074:	e7ee      	b.n	8009054 <__libc_init_array+0xc>
 8009076:	00b3      	lsls	r3, r6, #2
 8009078:	58eb      	ldr	r3, [r5, r3]
 800907a:	4798      	blx	r3
 800907c:	3601      	adds	r6, #1
 800907e:	e7f2      	b.n	8009066 <__libc_init_array+0x1e>
 8009080:	0800ea2c 	.word	0x0800ea2c
 8009084:	0800ea2c 	.word	0x0800ea2c
 8009088:	0800ea2c 	.word	0x0800ea2c
 800908c:	0800ea34 	.word	0x0800ea34

08009090 <memchr>:
 8009090:	b2c9      	uxtb	r1, r1
 8009092:	1882      	adds	r2, r0, r2
 8009094:	4290      	cmp	r0, r2
 8009096:	d101      	bne.n	800909c <memchr+0xc>
 8009098:	2000      	movs	r0, #0
 800909a:	4770      	bx	lr
 800909c:	7803      	ldrb	r3, [r0, #0]
 800909e:	428b      	cmp	r3, r1
 80090a0:	d0fb      	beq.n	800909a <memchr+0xa>
 80090a2:	3001      	adds	r0, #1
 80090a4:	e7f6      	b.n	8009094 <memchr+0x4>

080090a6 <memcmp>:
 80090a6:	b530      	push	{r4, r5, lr}
 80090a8:	2400      	movs	r4, #0
 80090aa:	3901      	subs	r1, #1
 80090ac:	42a2      	cmp	r2, r4
 80090ae:	d101      	bne.n	80090b4 <memcmp+0xe>
 80090b0:	2000      	movs	r0, #0
 80090b2:	e005      	b.n	80090c0 <memcmp+0x1a>
 80090b4:	5d03      	ldrb	r3, [r0, r4]
 80090b6:	3401      	adds	r4, #1
 80090b8:	5d0d      	ldrb	r5, [r1, r4]
 80090ba:	42ab      	cmp	r3, r5
 80090bc:	d0f6      	beq.n	80090ac <memcmp+0x6>
 80090be:	1b58      	subs	r0, r3, r5
 80090c0:	bd30      	pop	{r4, r5, pc}

080090c2 <memcpy>:
 80090c2:	2300      	movs	r3, #0
 80090c4:	b510      	push	{r4, lr}
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d100      	bne.n	80090cc <memcpy+0xa>
 80090ca:	bd10      	pop	{r4, pc}
 80090cc:	5ccc      	ldrb	r4, [r1, r3]
 80090ce:	54c4      	strb	r4, [r0, r3]
 80090d0:	3301      	adds	r3, #1
 80090d2:	e7f8      	b.n	80090c6 <memcpy+0x4>

080090d4 <memset>:
 80090d4:	0003      	movs	r3, r0
 80090d6:	1882      	adds	r2, r0, r2
 80090d8:	4293      	cmp	r3, r2
 80090da:	d100      	bne.n	80090de <memset+0xa>
 80090dc:	4770      	bx	lr
 80090de:	7019      	strb	r1, [r3, #0]
 80090e0:	3301      	adds	r3, #1
 80090e2:	e7f9      	b.n	80090d8 <memset+0x4>

080090e4 <sprintf>:
 80090e4:	b40e      	push	{r1, r2, r3}
 80090e6:	b500      	push	{lr}
 80090e8:	490b      	ldr	r1, [pc, #44]	; (8009118 <sprintf+0x34>)
 80090ea:	b09c      	sub	sp, #112	; 0x70
 80090ec:	ab1d      	add	r3, sp, #116	; 0x74
 80090ee:	9002      	str	r0, [sp, #8]
 80090f0:	9006      	str	r0, [sp, #24]
 80090f2:	9107      	str	r1, [sp, #28]
 80090f4:	9104      	str	r1, [sp, #16]
 80090f6:	4809      	ldr	r0, [pc, #36]	; (800911c <sprintf+0x38>)
 80090f8:	4909      	ldr	r1, [pc, #36]	; (8009120 <sprintf+0x3c>)
 80090fa:	cb04      	ldmia	r3!, {r2}
 80090fc:	9105      	str	r1, [sp, #20]
 80090fe:	6800      	ldr	r0, [r0, #0]
 8009100:	a902      	add	r1, sp, #8
 8009102:	9301      	str	r3, [sp, #4]
 8009104:	f000 f8e2 	bl	80092cc <_svfprintf_r>
 8009108:	2300      	movs	r3, #0
 800910a:	9a02      	ldr	r2, [sp, #8]
 800910c:	7013      	strb	r3, [r2, #0]
 800910e:	b01c      	add	sp, #112	; 0x70
 8009110:	bc08      	pop	{r3}
 8009112:	b003      	add	sp, #12
 8009114:	4718      	bx	r3
 8009116:	46c0      	nop			; (mov r8, r8)
 8009118:	7fffffff 	.word	0x7fffffff
 800911c:	20000010 	.word	0x20000010
 8009120:	ffff0208 	.word	0xffff0208

08009124 <strcat>:
 8009124:	0002      	movs	r2, r0
 8009126:	b510      	push	{r4, lr}
 8009128:	7813      	ldrb	r3, [r2, #0]
 800912a:	0014      	movs	r4, r2
 800912c:	3201      	adds	r2, #1
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1fa      	bne.n	8009128 <strcat+0x4>
 8009132:	5cca      	ldrb	r2, [r1, r3]
 8009134:	54e2      	strb	r2, [r4, r3]
 8009136:	3301      	adds	r3, #1
 8009138:	2a00      	cmp	r2, #0
 800913a:	d1fa      	bne.n	8009132 <strcat+0xe>
 800913c:	bd10      	pop	{r4, pc}

0800913e <strchr>:
 800913e:	b2c9      	uxtb	r1, r1
 8009140:	7803      	ldrb	r3, [r0, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d004      	beq.n	8009150 <strchr+0x12>
 8009146:	428b      	cmp	r3, r1
 8009148:	d100      	bne.n	800914c <strchr+0xe>
 800914a:	4770      	bx	lr
 800914c:	3001      	adds	r0, #1
 800914e:	e7f7      	b.n	8009140 <strchr+0x2>
 8009150:	424b      	negs	r3, r1
 8009152:	4159      	adcs	r1, r3
 8009154:	4249      	negs	r1, r1
 8009156:	4008      	ands	r0, r1
 8009158:	e7f7      	b.n	800914a <strchr+0xc>

0800915a <strcpy>:
 800915a:	0003      	movs	r3, r0
 800915c:	780a      	ldrb	r2, [r1, #0]
 800915e:	3101      	adds	r1, #1
 8009160:	701a      	strb	r2, [r3, #0]
 8009162:	3301      	adds	r3, #1
 8009164:	2a00      	cmp	r2, #0
 8009166:	d1f9      	bne.n	800915c <strcpy+0x2>
 8009168:	4770      	bx	lr

0800916a <strstr>:
 800916a:	780a      	ldrb	r2, [r1, #0]
 800916c:	b530      	push	{r4, r5, lr}
 800916e:	2a00      	cmp	r2, #0
 8009170:	d10c      	bne.n	800918c <strstr+0x22>
 8009172:	bd30      	pop	{r4, r5, pc}
 8009174:	429a      	cmp	r2, r3
 8009176:	d108      	bne.n	800918a <strstr+0x20>
 8009178:	2301      	movs	r3, #1
 800917a:	5ccc      	ldrb	r4, [r1, r3]
 800917c:	2c00      	cmp	r4, #0
 800917e:	d0f8      	beq.n	8009172 <strstr+0x8>
 8009180:	5cc5      	ldrb	r5, [r0, r3]
 8009182:	42a5      	cmp	r5, r4
 8009184:	d101      	bne.n	800918a <strstr+0x20>
 8009186:	3301      	adds	r3, #1
 8009188:	e7f7      	b.n	800917a <strstr+0x10>
 800918a:	3001      	adds	r0, #1
 800918c:	7803      	ldrb	r3, [r0, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d1f0      	bne.n	8009174 <strstr+0xa>
 8009192:	0018      	movs	r0, r3
 8009194:	e7ed      	b.n	8009172 <strstr+0x8>
	...

08009198 <_strtol_l.constprop.0>:
 8009198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800919a:	b087      	sub	sp, #28
 800919c:	001e      	movs	r6, r3
 800919e:	9005      	str	r0, [sp, #20]
 80091a0:	9101      	str	r1, [sp, #4]
 80091a2:	9202      	str	r2, [sp, #8]
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d045      	beq.n	8009234 <_strtol_l.constprop.0+0x9c>
 80091a8:	000b      	movs	r3, r1
 80091aa:	2e24      	cmp	r6, #36	; 0x24
 80091ac:	d842      	bhi.n	8009234 <_strtol_l.constprop.0+0x9c>
 80091ae:	4a3f      	ldr	r2, [pc, #252]	; (80092ac <_strtol_l.constprop.0+0x114>)
 80091b0:	2108      	movs	r1, #8
 80091b2:	4694      	mov	ip, r2
 80091b4:	001a      	movs	r2, r3
 80091b6:	4660      	mov	r0, ip
 80091b8:	7814      	ldrb	r4, [r2, #0]
 80091ba:	3301      	adds	r3, #1
 80091bc:	5d00      	ldrb	r0, [r0, r4]
 80091be:	001d      	movs	r5, r3
 80091c0:	0007      	movs	r7, r0
 80091c2:	400f      	ands	r7, r1
 80091c4:	4208      	tst	r0, r1
 80091c6:	d1f5      	bne.n	80091b4 <_strtol_l.constprop.0+0x1c>
 80091c8:	2c2d      	cmp	r4, #45	; 0x2d
 80091ca:	d13a      	bne.n	8009242 <_strtol_l.constprop.0+0xaa>
 80091cc:	2701      	movs	r7, #1
 80091ce:	781c      	ldrb	r4, [r3, #0]
 80091d0:	1c95      	adds	r5, r2, #2
 80091d2:	2e00      	cmp	r6, #0
 80091d4:	d065      	beq.n	80092a2 <_strtol_l.constprop.0+0x10a>
 80091d6:	2e10      	cmp	r6, #16
 80091d8:	d109      	bne.n	80091ee <_strtol_l.constprop.0+0x56>
 80091da:	2c30      	cmp	r4, #48	; 0x30
 80091dc:	d107      	bne.n	80091ee <_strtol_l.constprop.0+0x56>
 80091de:	2220      	movs	r2, #32
 80091e0:	782b      	ldrb	r3, [r5, #0]
 80091e2:	4393      	bics	r3, r2
 80091e4:	2b58      	cmp	r3, #88	; 0x58
 80091e6:	d157      	bne.n	8009298 <_strtol_l.constprop.0+0x100>
 80091e8:	2610      	movs	r6, #16
 80091ea:	786c      	ldrb	r4, [r5, #1]
 80091ec:	3502      	adds	r5, #2
 80091ee:	4b30      	ldr	r3, [pc, #192]	; (80092b0 <_strtol_l.constprop.0+0x118>)
 80091f0:	0031      	movs	r1, r6
 80091f2:	18fb      	adds	r3, r7, r3
 80091f4:	0018      	movs	r0, r3
 80091f6:	9303      	str	r3, [sp, #12]
 80091f8:	f7f7 f828 	bl	800024c <__aeabi_uidivmod>
 80091fc:	2300      	movs	r3, #0
 80091fe:	2201      	movs	r2, #1
 8009200:	4684      	mov	ip, r0
 8009202:	0018      	movs	r0, r3
 8009204:	9104      	str	r1, [sp, #16]
 8009206:	4252      	negs	r2, r2
 8009208:	0021      	movs	r1, r4
 800920a:	3930      	subs	r1, #48	; 0x30
 800920c:	2909      	cmp	r1, #9
 800920e:	d81d      	bhi.n	800924c <_strtol_l.constprop.0+0xb4>
 8009210:	000c      	movs	r4, r1
 8009212:	42a6      	cmp	r6, r4
 8009214:	dd28      	ble.n	8009268 <_strtol_l.constprop.0+0xd0>
 8009216:	2b00      	cmp	r3, #0
 8009218:	db24      	blt.n	8009264 <_strtol_l.constprop.0+0xcc>
 800921a:	0013      	movs	r3, r2
 800921c:	4584      	cmp	ip, r0
 800921e:	d306      	bcc.n	800922e <_strtol_l.constprop.0+0x96>
 8009220:	d102      	bne.n	8009228 <_strtol_l.constprop.0+0x90>
 8009222:	9904      	ldr	r1, [sp, #16]
 8009224:	42a1      	cmp	r1, r4
 8009226:	db02      	blt.n	800922e <_strtol_l.constprop.0+0x96>
 8009228:	2301      	movs	r3, #1
 800922a:	4370      	muls	r0, r6
 800922c:	1820      	adds	r0, r4, r0
 800922e:	782c      	ldrb	r4, [r5, #0]
 8009230:	3501      	adds	r5, #1
 8009232:	e7e9      	b.n	8009208 <_strtol_l.constprop.0+0x70>
 8009234:	f7ff ff02 	bl	800903c <__errno>
 8009238:	2316      	movs	r3, #22
 800923a:	6003      	str	r3, [r0, #0]
 800923c:	2000      	movs	r0, #0
 800923e:	b007      	add	sp, #28
 8009240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009242:	2c2b      	cmp	r4, #43	; 0x2b
 8009244:	d1c5      	bne.n	80091d2 <_strtol_l.constprop.0+0x3a>
 8009246:	781c      	ldrb	r4, [r3, #0]
 8009248:	1c95      	adds	r5, r2, #2
 800924a:	e7c2      	b.n	80091d2 <_strtol_l.constprop.0+0x3a>
 800924c:	0021      	movs	r1, r4
 800924e:	3941      	subs	r1, #65	; 0x41
 8009250:	2919      	cmp	r1, #25
 8009252:	d801      	bhi.n	8009258 <_strtol_l.constprop.0+0xc0>
 8009254:	3c37      	subs	r4, #55	; 0x37
 8009256:	e7dc      	b.n	8009212 <_strtol_l.constprop.0+0x7a>
 8009258:	0021      	movs	r1, r4
 800925a:	3961      	subs	r1, #97	; 0x61
 800925c:	2919      	cmp	r1, #25
 800925e:	d803      	bhi.n	8009268 <_strtol_l.constprop.0+0xd0>
 8009260:	3c57      	subs	r4, #87	; 0x57
 8009262:	e7d6      	b.n	8009212 <_strtol_l.constprop.0+0x7a>
 8009264:	0013      	movs	r3, r2
 8009266:	e7e2      	b.n	800922e <_strtol_l.constprop.0+0x96>
 8009268:	2b00      	cmp	r3, #0
 800926a:	da09      	bge.n	8009280 <_strtol_l.constprop.0+0xe8>
 800926c:	2322      	movs	r3, #34	; 0x22
 800926e:	9a05      	ldr	r2, [sp, #20]
 8009270:	9803      	ldr	r0, [sp, #12]
 8009272:	6013      	str	r3, [r2, #0]
 8009274:	9b02      	ldr	r3, [sp, #8]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d0e1      	beq.n	800923e <_strtol_l.constprop.0+0xa6>
 800927a:	1e6b      	subs	r3, r5, #1
 800927c:	9301      	str	r3, [sp, #4]
 800927e:	e007      	b.n	8009290 <_strtol_l.constprop.0+0xf8>
 8009280:	2f00      	cmp	r7, #0
 8009282:	d000      	beq.n	8009286 <_strtol_l.constprop.0+0xee>
 8009284:	4240      	negs	r0, r0
 8009286:	9a02      	ldr	r2, [sp, #8]
 8009288:	2a00      	cmp	r2, #0
 800928a:	d0d8      	beq.n	800923e <_strtol_l.constprop.0+0xa6>
 800928c:	2b00      	cmp	r3, #0
 800928e:	d1f4      	bne.n	800927a <_strtol_l.constprop.0+0xe2>
 8009290:	9b02      	ldr	r3, [sp, #8]
 8009292:	9a01      	ldr	r2, [sp, #4]
 8009294:	601a      	str	r2, [r3, #0]
 8009296:	e7d2      	b.n	800923e <_strtol_l.constprop.0+0xa6>
 8009298:	2430      	movs	r4, #48	; 0x30
 800929a:	2e00      	cmp	r6, #0
 800929c:	d1a7      	bne.n	80091ee <_strtol_l.constprop.0+0x56>
 800929e:	3608      	adds	r6, #8
 80092a0:	e7a5      	b.n	80091ee <_strtol_l.constprop.0+0x56>
 80092a2:	2c30      	cmp	r4, #48	; 0x30
 80092a4:	d09b      	beq.n	80091de <_strtol_l.constprop.0+0x46>
 80092a6:	260a      	movs	r6, #10
 80092a8:	e7a1      	b.n	80091ee <_strtol_l.constprop.0+0x56>
 80092aa:	46c0      	nop			; (mov r8, r8)
 80092ac:	0800e6e5 	.word	0x0800e6e5
 80092b0:	7fffffff 	.word	0x7fffffff

080092b4 <strtol>:
 80092b4:	b510      	push	{r4, lr}
 80092b6:	0013      	movs	r3, r2
 80092b8:	000a      	movs	r2, r1
 80092ba:	0001      	movs	r1, r0
 80092bc:	4802      	ldr	r0, [pc, #8]	; (80092c8 <strtol+0x14>)
 80092be:	6800      	ldr	r0, [r0, #0]
 80092c0:	f7ff ff6a 	bl	8009198 <_strtol_l.constprop.0>
 80092c4:	bd10      	pop	{r4, pc}
 80092c6:	46c0      	nop			; (mov r8, r8)
 80092c8:	20000010 	.word	0x20000010

080092cc <_svfprintf_r>:
 80092cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092ce:	b0d9      	sub	sp, #356	; 0x164
 80092d0:	001c      	movs	r4, r3
 80092d2:	910b      	str	r1, [sp, #44]	; 0x2c
 80092d4:	9208      	str	r2, [sp, #32]
 80092d6:	900a      	str	r0, [sp, #40]	; 0x28
 80092d8:	f002 fa00 	bl	800b6dc <_localeconv_r>
 80092dc:	6803      	ldr	r3, [r0, #0]
 80092de:	0018      	movs	r0, r3
 80092e0:	931c      	str	r3, [sp, #112]	; 0x70
 80092e2:	f7f6 ff11 	bl	8000108 <strlen>
 80092e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092e8:	9016      	str	r0, [sp, #88]	; 0x58
 80092ea:	899b      	ldrh	r3, [r3, #12]
 80092ec:	061b      	lsls	r3, r3, #24
 80092ee:	d518      	bpl.n	8009322 <_svfprintf_r+0x56>
 80092f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	9309      	str	r3, [sp, #36]	; 0x24
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d113      	bne.n	8009322 <_svfprintf_r+0x56>
 80092fa:	2140      	movs	r1, #64	; 0x40
 80092fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80092fe:	f002 f9f5 	bl	800b6ec <_malloc_r>
 8009302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009304:	6018      	str	r0, [r3, #0]
 8009306:	6118      	str	r0, [r3, #16]
 8009308:	2800      	cmp	r0, #0
 800930a:	d107      	bne.n	800931c <_svfprintf_r+0x50>
 800930c:	230c      	movs	r3, #12
 800930e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009310:	6013      	str	r3, [r2, #0]
 8009312:	3b0d      	subs	r3, #13
 8009314:	9317      	str	r3, [sp, #92]	; 0x5c
 8009316:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009318:	b059      	add	sp, #356	; 0x164
 800931a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800931c:	2340      	movs	r3, #64	; 0x40
 800931e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009320:	6153      	str	r3, [r2, #20]
 8009322:	2300      	movs	r3, #0
 8009324:	2200      	movs	r2, #0
 8009326:	932e      	str	r3, [sp, #184]	; 0xb8
 8009328:	932d      	str	r3, [sp, #180]	; 0xb4
 800932a:	930e      	str	r3, [sp, #56]	; 0x38
 800932c:	2300      	movs	r3, #0
 800932e:	9214      	str	r2, [sp, #80]	; 0x50
 8009330:	9315      	str	r3, [sp, #84]	; 0x54
 8009332:	2300      	movs	r3, #0
 8009334:	af2f      	add	r7, sp, #188	; 0xbc
 8009336:	972c      	str	r7, [sp, #176]	; 0xb0
 8009338:	931f      	str	r3, [sp, #124]	; 0x7c
 800933a:	931e      	str	r3, [sp, #120]	; 0x78
 800933c:	9312      	str	r3, [sp, #72]	; 0x48
 800933e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009340:	931d      	str	r3, [sp, #116]	; 0x74
 8009342:	9317      	str	r3, [sp, #92]	; 0x5c
 8009344:	9d08      	ldr	r5, [sp, #32]
 8009346:	782b      	ldrb	r3, [r5, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d002      	beq.n	8009352 <_svfprintf_r+0x86>
 800934c:	2b25      	cmp	r3, #37	; 0x25
 800934e:	d000      	beq.n	8009352 <_svfprintf_r+0x86>
 8009350:	e092      	b.n	8009478 <_svfprintf_r+0x1ac>
 8009352:	9b08      	ldr	r3, [sp, #32]
 8009354:	1aee      	subs	r6, r5, r3
 8009356:	429d      	cmp	r5, r3
 8009358:	d017      	beq.n	800938a <_svfprintf_r+0xbe>
 800935a:	603b      	str	r3, [r7, #0]
 800935c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800935e:	607e      	str	r6, [r7, #4]
 8009360:	199b      	adds	r3, r3, r6
 8009362:	932e      	str	r3, [sp, #184]	; 0xb8
 8009364:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009366:	3708      	adds	r7, #8
 8009368:	9309      	str	r3, [sp, #36]	; 0x24
 800936a:	3301      	adds	r3, #1
 800936c:	932d      	str	r3, [sp, #180]	; 0xb4
 800936e:	2b07      	cmp	r3, #7
 8009370:	dd08      	ble.n	8009384 <_svfprintf_r+0xb8>
 8009372:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009374:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009376:	aa2c      	add	r2, sp, #176	; 0xb0
 8009378:	f002 ff7e 	bl	800c278 <__ssprint_r>
 800937c:	2800      	cmp	r0, #0
 800937e:	d000      	beq.n	8009382 <_svfprintf_r+0xb6>
 8009380:	e1cf      	b.n	8009722 <_svfprintf_r+0x456>
 8009382:	af2f      	add	r7, sp, #188	; 0xbc
 8009384:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009386:	199b      	adds	r3, r3, r6
 8009388:	9317      	str	r3, [sp, #92]	; 0x5c
 800938a:	782b      	ldrb	r3, [r5, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d101      	bne.n	8009394 <_svfprintf_r+0xc8>
 8009390:	f001 f9bc 	bl	800a70c <_svfprintf_r+0x1440>
 8009394:	221b      	movs	r2, #27
 8009396:	2300      	movs	r3, #0
 8009398:	a91e      	add	r1, sp, #120	; 0x78
 800939a:	1852      	adds	r2, r2, r1
 800939c:	7013      	strb	r3, [r2, #0]
 800939e:	2201      	movs	r2, #1
 80093a0:	001e      	movs	r6, r3
 80093a2:	4252      	negs	r2, r2
 80093a4:	3501      	adds	r5, #1
 80093a6:	9209      	str	r2, [sp, #36]	; 0x24
 80093a8:	9318      	str	r3, [sp, #96]	; 0x60
 80093aa:	1c6b      	adds	r3, r5, #1
 80093ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80093ae:	782b      	ldrb	r3, [r5, #0]
 80093b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80093b2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80093b4:	3820      	subs	r0, #32
 80093b6:	285a      	cmp	r0, #90	; 0x5a
 80093b8:	d901      	bls.n	80093be <_svfprintf_r+0xf2>
 80093ba:	f000 fe1f 	bl	8009ffc <_svfprintf_r+0xd30>
 80093be:	f7f6 feb5 	bl	800012c <__gnu_thumb1_case_uhi>
 80093c2:	0078      	.short	0x0078
 80093c4:	061d061d 	.word	0x061d061d
 80093c8:	061d0082 	.word	0x061d0082
 80093cc:	061d061d 	.word	0x061d061d
 80093d0:	061d005d 	.word	0x061d005d
 80093d4:	0084061d 	.word	0x0084061d
 80093d8:	061d008c 	.word	0x061d008c
 80093dc:	0091008a 	.word	0x0091008a
 80093e0:	00b2061d 	.word	0x00b2061d
 80093e4:	00b400b4 	.word	0x00b400b4
 80093e8:	00b400b4 	.word	0x00b400b4
 80093ec:	00b400b4 	.word	0x00b400b4
 80093f0:	00b400b4 	.word	0x00b400b4
 80093f4:	061d00b4 	.word	0x061d00b4
 80093f8:	061d061d 	.word	0x061d061d
 80093fc:	061d061d 	.word	0x061d061d
 8009400:	061d061d 	.word	0x061d061d
 8009404:	061d013b 	.word	0x061d013b
 8009408:	00f400e0 	.word	0x00f400e0
 800940c:	013b013b 	.word	0x013b013b
 8009410:	061d013b 	.word	0x061d013b
 8009414:	061d061d 	.word	0x061d061d
 8009418:	00c7061d 	.word	0x00c7061d
 800941c:	061d061d 	.word	0x061d061d
 8009420:	061d04d3 	.word	0x061d04d3
 8009424:	061d061d 	.word	0x061d061d
 8009428:	061d0517 	.word	0x061d0517
 800942c:	061d0537 	.word	0x061d0537
 8009430:	0564061d 	.word	0x0564061d
 8009434:	061d061d 	.word	0x061d061d
 8009438:	061d061d 	.word	0x061d061d
 800943c:	061d061d 	.word	0x061d061d
 8009440:	061d061d 	.word	0x061d061d
 8009444:	061d013b 	.word	0x061d013b
 8009448:	00f600e0 	.word	0x00f600e0
 800944c:	013b013b 	.word	0x013b013b
 8009450:	00c9013b 	.word	0x00c9013b
 8009454:	00dc00f6 	.word	0x00dc00f6
 8009458:	00d5061d 	.word	0x00d5061d
 800945c:	04b3061d 	.word	0x04b3061d
 8009460:	050604d5 	.word	0x050604d5
 8009464:	061d00dc 	.word	0x061d00dc
 8009468:	00800517 	.word	0x00800517
 800946c:	061d0539 	.word	0x061d0539
 8009470:	0584061d 	.word	0x0584061d
 8009474:	0080061d 	.word	0x0080061d
 8009478:	3501      	adds	r5, #1
 800947a:	e764      	b.n	8009346 <_svfprintf_r+0x7a>
 800947c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800947e:	f002 f92d 	bl	800b6dc <_localeconv_r>
 8009482:	6843      	ldr	r3, [r0, #4]
 8009484:	0018      	movs	r0, r3
 8009486:	931d      	str	r3, [sp, #116]	; 0x74
 8009488:	f7f6 fe3e 	bl	8000108 <strlen>
 800948c:	901b      	str	r0, [sp, #108]	; 0x6c
 800948e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009490:	f002 f924 	bl	800b6dc <_localeconv_r>
 8009494:	6883      	ldr	r3, [r0, #8]
 8009496:	9312      	str	r3, [sp, #72]	; 0x48
 8009498:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800949a:	2b00      	cmp	r3, #0
 800949c:	d011      	beq.n	80094c2 <_svfprintf_r+0x1f6>
 800949e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00e      	beq.n	80094c2 <_svfprintf_r+0x1f6>
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00b      	beq.n	80094c2 <_svfprintf_r+0x1f6>
 80094aa:	2380      	movs	r3, #128	; 0x80
 80094ac:	00db      	lsls	r3, r3, #3
 80094ae:	431e      	orrs	r6, r3
 80094b0:	e007      	b.n	80094c2 <_svfprintf_r+0x1f6>
 80094b2:	231b      	movs	r3, #27
 80094b4:	aa1e      	add	r2, sp, #120	; 0x78
 80094b6:	189b      	adds	r3, r3, r2
 80094b8:	781a      	ldrb	r2, [r3, #0]
 80094ba:	2a00      	cmp	r2, #0
 80094bc:	d101      	bne.n	80094c2 <_svfprintf_r+0x1f6>
 80094be:	3220      	adds	r2, #32
 80094c0:	701a      	strb	r2, [r3, #0]
 80094c2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80094c4:	e771      	b.n	80093aa <_svfprintf_r+0xde>
 80094c6:	2301      	movs	r3, #1
 80094c8:	e7f1      	b.n	80094ae <_svfprintf_r+0x1e2>
 80094ca:	cc08      	ldmia	r4!, {r3}
 80094cc:	9318      	str	r3, [sp, #96]	; 0x60
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	daf7      	bge.n	80094c2 <_svfprintf_r+0x1f6>
 80094d2:	425b      	negs	r3, r3
 80094d4:	9318      	str	r3, [sp, #96]	; 0x60
 80094d6:	2304      	movs	r3, #4
 80094d8:	e7e9      	b.n	80094ae <_svfprintf_r+0x1e2>
 80094da:	231b      	movs	r3, #27
 80094dc:	aa1e      	add	r2, sp, #120	; 0x78
 80094de:	189b      	adds	r3, r3, r2
 80094e0:	222b      	movs	r2, #43	; 0x2b
 80094e2:	e7ed      	b.n	80094c0 <_svfprintf_r+0x1f4>
 80094e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80094e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094e8:	7812      	ldrb	r2, [r2, #0]
 80094ea:	3301      	adds	r3, #1
 80094ec:	920f      	str	r2, [sp, #60]	; 0x3c
 80094ee:	2a2a      	cmp	r2, #42	; 0x2a
 80094f0:	d010      	beq.n	8009514 <_svfprintf_r+0x248>
 80094f2:	2200      	movs	r2, #0
 80094f4:	9209      	str	r2, [sp, #36]	; 0x24
 80094f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80094f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80094fa:	3a30      	subs	r2, #48	; 0x30
 80094fc:	2a09      	cmp	r2, #9
 80094fe:	d900      	bls.n	8009502 <_svfprintf_r+0x236>
 8009500:	e757      	b.n	80093b2 <_svfprintf_r+0xe6>
 8009502:	210a      	movs	r1, #10
 8009504:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009506:	4348      	muls	r0, r1
 8009508:	1882      	adds	r2, r0, r2
 800950a:	9209      	str	r2, [sp, #36]	; 0x24
 800950c:	781a      	ldrb	r2, [r3, #0]
 800950e:	3301      	adds	r3, #1
 8009510:	920f      	str	r2, [sp, #60]	; 0x3c
 8009512:	e7f0      	b.n	80094f6 <_svfprintf_r+0x22a>
 8009514:	cc04      	ldmia	r4!, {r2}
 8009516:	9209      	str	r2, [sp, #36]	; 0x24
 8009518:	2a00      	cmp	r2, #0
 800951a:	da02      	bge.n	8009522 <_svfprintf_r+0x256>
 800951c:	2201      	movs	r2, #1
 800951e:	4252      	negs	r2, r2
 8009520:	9209      	str	r2, [sp, #36]	; 0x24
 8009522:	9313      	str	r3, [sp, #76]	; 0x4c
 8009524:	e7cd      	b.n	80094c2 <_svfprintf_r+0x1f6>
 8009526:	2380      	movs	r3, #128	; 0x80
 8009528:	e7c1      	b.n	80094ae <_svfprintf_r+0x1e2>
 800952a:	2200      	movs	r2, #0
 800952c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800952e:	9218      	str	r2, [sp, #96]	; 0x60
 8009530:	210a      	movs	r1, #10
 8009532:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009534:	434a      	muls	r2, r1
 8009536:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009538:	3930      	subs	r1, #48	; 0x30
 800953a:	188a      	adds	r2, r1, r2
 800953c:	9218      	str	r2, [sp, #96]	; 0x60
 800953e:	001a      	movs	r2, r3
 8009540:	7812      	ldrb	r2, [r2, #0]
 8009542:	3301      	adds	r3, #1
 8009544:	920f      	str	r2, [sp, #60]	; 0x3c
 8009546:	3a30      	subs	r2, #48	; 0x30
 8009548:	9313      	str	r3, [sp, #76]	; 0x4c
 800954a:	2a09      	cmp	r2, #9
 800954c:	d9f0      	bls.n	8009530 <_svfprintf_r+0x264>
 800954e:	e730      	b.n	80093b2 <_svfprintf_r+0xe6>
 8009550:	2308      	movs	r3, #8
 8009552:	e7ac      	b.n	80094ae <_svfprintf_r+0x1e2>
 8009554:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	2b68      	cmp	r3, #104	; 0x68
 800955a:	d105      	bne.n	8009568 <_svfprintf_r+0x29c>
 800955c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800955e:	3301      	adds	r3, #1
 8009560:	9313      	str	r3, [sp, #76]	; 0x4c
 8009562:	2380      	movs	r3, #128	; 0x80
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	e7a2      	b.n	80094ae <_svfprintf_r+0x1e2>
 8009568:	2340      	movs	r3, #64	; 0x40
 800956a:	e7a0      	b.n	80094ae <_svfprintf_r+0x1e2>
 800956c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	2b6c      	cmp	r3, #108	; 0x6c
 8009572:	d104      	bne.n	800957e <_svfprintf_r+0x2b2>
 8009574:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009576:	3301      	adds	r3, #1
 8009578:	9313      	str	r3, [sp, #76]	; 0x4c
 800957a:	2320      	movs	r3, #32
 800957c:	e797      	b.n	80094ae <_svfprintf_r+0x1e2>
 800957e:	2310      	movs	r3, #16
 8009580:	e795      	b.n	80094ae <_svfprintf_r+0x1e2>
 8009582:	0022      	movs	r2, r4
 8009584:	ca08      	ldmia	r2!, {r3}
 8009586:	a83f      	add	r0, sp, #252	; 0xfc
 8009588:	920d      	str	r2, [sp, #52]	; 0x34
 800958a:	221b      	movs	r2, #27
 800958c:	7003      	strb	r3, [r0, #0]
 800958e:	2300      	movs	r3, #0
 8009590:	a91e      	add	r1, sp, #120	; 0x78
 8009592:	1852      	adds	r2, r2, r1
 8009594:	7013      	strb	r3, [r2, #0]
 8009596:	930c      	str	r3, [sp, #48]	; 0x30
 8009598:	3301      	adds	r3, #1
 800959a:	9309      	str	r3, [sp, #36]	; 0x24
 800959c:	2300      	movs	r3, #0
 800959e:	9008      	str	r0, [sp, #32]
 80095a0:	001d      	movs	r5, r3
 80095a2:	9319      	str	r3, [sp, #100]	; 0x64
 80095a4:	9310      	str	r3, [sp, #64]	; 0x40
 80095a6:	9311      	str	r3, [sp, #68]	; 0x44
 80095a8:	e1f1      	b.n	800998e <_svfprintf_r+0x6c2>
 80095aa:	2310      	movs	r3, #16
 80095ac:	431e      	orrs	r6, r3
 80095ae:	06b3      	lsls	r3, r6, #26
 80095b0:	d531      	bpl.n	8009616 <_svfprintf_r+0x34a>
 80095b2:	2307      	movs	r3, #7
 80095b4:	3407      	adds	r4, #7
 80095b6:	439c      	bics	r4, r3
 80095b8:	0022      	movs	r2, r4
 80095ba:	ca18      	ldmia	r2!, {r3, r4}
 80095bc:	9306      	str	r3, [sp, #24]
 80095be:	9407      	str	r4, [sp, #28]
 80095c0:	920d      	str	r2, [sp, #52]	; 0x34
 80095c2:	9a07      	ldr	r2, [sp, #28]
 80095c4:	2301      	movs	r3, #1
 80095c6:	2a00      	cmp	r2, #0
 80095c8:	da0b      	bge.n	80095e2 <_svfprintf_r+0x316>
 80095ca:	9c06      	ldr	r4, [sp, #24]
 80095cc:	9d07      	ldr	r5, [sp, #28]
 80095ce:	2200      	movs	r2, #0
 80095d0:	4261      	negs	r1, r4
 80095d2:	41aa      	sbcs	r2, r5
 80095d4:	9106      	str	r1, [sp, #24]
 80095d6:	9207      	str	r2, [sp, #28]
 80095d8:	221b      	movs	r2, #27
 80095da:	a91e      	add	r1, sp, #120	; 0x78
 80095dc:	1852      	adds	r2, r2, r1
 80095de:	212d      	movs	r1, #45	; 0x2d
 80095e0:	7011      	strb	r1, [r2, #0]
 80095e2:	9907      	ldr	r1, [sp, #28]
 80095e4:	9a06      	ldr	r2, [sp, #24]
 80095e6:	430a      	orrs	r2, r1
 80095e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80095ea:	3101      	adds	r1, #1
 80095ec:	d101      	bne.n	80095f2 <_svfprintf_r+0x326>
 80095ee:	f001 f89a 	bl	800a726 <_svfprintf_r+0x145a>
 80095f2:	2180      	movs	r1, #128	; 0x80
 80095f4:	0035      	movs	r5, r6
 80095f6:	438d      	bics	r5, r1
 80095f8:	2a00      	cmp	r2, #0
 80095fa:	d001      	beq.n	8009600 <_svfprintf_r+0x334>
 80095fc:	f001 f898 	bl	800a730 <_svfprintf_r+0x1464>
 8009600:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009602:	2a00      	cmp	r2, #0
 8009604:	d101      	bne.n	800960a <_svfprintf_r+0x33e>
 8009606:	f000 fcec 	bl	8009fe2 <_svfprintf_r+0xd16>
 800960a:	2b01      	cmp	r3, #1
 800960c:	d001      	beq.n	8009612 <_svfprintf_r+0x346>
 800960e:	f001 f893 	bl	800a738 <_svfprintf_r+0x146c>
 8009612:	f000 fc7e 	bl	8009f12 <_svfprintf_r+0xc46>
 8009616:	0022      	movs	r2, r4
 8009618:	ca08      	ldmia	r2!, {r3}
 800961a:	920d      	str	r2, [sp, #52]	; 0x34
 800961c:	06f2      	lsls	r2, r6, #27
 800961e:	d503      	bpl.n	8009628 <_svfprintf_r+0x35c>
 8009620:	9306      	str	r3, [sp, #24]
 8009622:	17db      	asrs	r3, r3, #31
 8009624:	9307      	str	r3, [sp, #28]
 8009626:	e7cc      	b.n	80095c2 <_svfprintf_r+0x2f6>
 8009628:	0672      	lsls	r2, r6, #25
 800962a:	d501      	bpl.n	8009630 <_svfprintf_r+0x364>
 800962c:	b21b      	sxth	r3, r3
 800962e:	e7f7      	b.n	8009620 <_svfprintf_r+0x354>
 8009630:	05b2      	lsls	r2, r6, #22
 8009632:	d5f5      	bpl.n	8009620 <_svfprintf_r+0x354>
 8009634:	b25b      	sxtb	r3, r3
 8009636:	e7f3      	b.n	8009620 <_svfprintf_r+0x354>
 8009638:	2307      	movs	r3, #7
 800963a:	3407      	adds	r4, #7
 800963c:	439c      	bics	r4, r3
 800963e:	0022      	movs	r2, r4
 8009640:	ca18      	ldmia	r2!, {r3, r4}
 8009642:	920d      	str	r2, [sp, #52]	; 0x34
 8009644:	2201      	movs	r2, #1
 8009646:	9314      	str	r3, [sp, #80]	; 0x50
 8009648:	9415      	str	r4, [sp, #84]	; 0x54
 800964a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800964c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800964e:	005c      	lsls	r4, r3, #1
 8009650:	0864      	lsrs	r4, r4, #1
 8009652:	0028      	movs	r0, r5
 8009654:	0021      	movs	r1, r4
 8009656:	4b3e      	ldr	r3, [pc, #248]	; (8009750 <_svfprintf_r+0x484>)
 8009658:	4252      	negs	r2, r2
 800965a:	f7f8 ff7f 	bl	800255c <__aeabi_dcmpun>
 800965e:	2800      	cmp	r0, #0
 8009660:	d126      	bne.n	80096b0 <_svfprintf_r+0x3e4>
 8009662:	2201      	movs	r2, #1
 8009664:	0028      	movs	r0, r5
 8009666:	0021      	movs	r1, r4
 8009668:	4b39      	ldr	r3, [pc, #228]	; (8009750 <_svfprintf_r+0x484>)
 800966a:	4252      	negs	r2, r2
 800966c:	f7f6 fefe 	bl	800046c <__aeabi_dcmple>
 8009670:	2800      	cmp	r0, #0
 8009672:	d11d      	bne.n	80096b0 <_svfprintf_r+0x3e4>
 8009674:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009676:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009678:	2200      	movs	r2, #0
 800967a:	2300      	movs	r3, #0
 800967c:	f7f6 feec 	bl	8000458 <__aeabi_dcmplt>
 8009680:	2800      	cmp	r0, #0
 8009682:	d004      	beq.n	800968e <_svfprintf_r+0x3c2>
 8009684:	231b      	movs	r3, #27
 8009686:	aa1e      	add	r2, sp, #120	; 0x78
 8009688:	189b      	adds	r3, r3, r2
 800968a:	222d      	movs	r2, #45	; 0x2d
 800968c:	701a      	strb	r2, [r3, #0]
 800968e:	4b31      	ldr	r3, [pc, #196]	; (8009754 <_svfprintf_r+0x488>)
 8009690:	9308      	str	r3, [sp, #32]
 8009692:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009694:	2b47      	cmp	r3, #71	; 0x47
 8009696:	dd01      	ble.n	800969c <_svfprintf_r+0x3d0>
 8009698:	4b2f      	ldr	r3, [pc, #188]	; (8009758 <_svfprintf_r+0x48c>)
 800969a:	9308      	str	r3, [sp, #32]
 800969c:	2380      	movs	r3, #128	; 0x80
 800969e:	439e      	bics	r6, r3
 80096a0:	2300      	movs	r3, #0
 80096a2:	930c      	str	r3, [sp, #48]	; 0x30
 80096a4:	3303      	adds	r3, #3
 80096a6:	9309      	str	r3, [sp, #36]	; 0x24
 80096a8:	2300      	movs	r3, #0
 80096aa:	9319      	str	r3, [sp, #100]	; 0x64
 80096ac:	f001 f873 	bl	800a796 <_svfprintf_r+0x14ca>
 80096b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80096b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096b4:	0010      	movs	r0, r2
 80096b6:	0019      	movs	r1, r3
 80096b8:	f7f8 ff50 	bl	800255c <__aeabi_dcmpun>
 80096bc:	2800      	cmp	r0, #0
 80096be:	d00e      	beq.n	80096de <_svfprintf_r+0x412>
 80096c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	da04      	bge.n	80096d0 <_svfprintf_r+0x404>
 80096c6:	231b      	movs	r3, #27
 80096c8:	aa1e      	add	r2, sp, #120	; 0x78
 80096ca:	189b      	adds	r3, r3, r2
 80096cc:	222d      	movs	r2, #45	; 0x2d
 80096ce:	701a      	strb	r2, [r3, #0]
 80096d0:	4b22      	ldr	r3, [pc, #136]	; (800975c <_svfprintf_r+0x490>)
 80096d2:	9308      	str	r3, [sp, #32]
 80096d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096d6:	2b47      	cmp	r3, #71	; 0x47
 80096d8:	dde0      	ble.n	800969c <_svfprintf_r+0x3d0>
 80096da:	4b21      	ldr	r3, [pc, #132]	; (8009760 <_svfprintf_r+0x494>)
 80096dc:	e7dd      	b.n	800969a <_svfprintf_r+0x3ce>
 80096de:	2320      	movs	r3, #32
 80096e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80096e2:	439a      	bics	r2, r3
 80096e4:	9210      	str	r2, [sp, #64]	; 0x40
 80096e6:	2a41      	cmp	r2, #65	; 0x41
 80096e8:	d123      	bne.n	8009732 <_svfprintf_r+0x466>
 80096ea:	2230      	movs	r2, #48	; 0x30
 80096ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80096ee:	ab25      	add	r3, sp, #148	; 0x94
 80096f0:	701a      	strb	r2, [r3, #0]
 80096f2:	3248      	adds	r2, #72	; 0x48
 80096f4:	2961      	cmp	r1, #97	; 0x61
 80096f6:	d000      	beq.n	80096fa <_svfprintf_r+0x42e>
 80096f8:	3a20      	subs	r2, #32
 80096fa:	705a      	strb	r2, [r3, #1]
 80096fc:	2302      	movs	r3, #2
 80096fe:	431e      	orrs	r6, r3
 8009700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009702:	2b63      	cmp	r3, #99	; 0x63
 8009704:	dd2e      	ble.n	8009764 <_svfprintf_r+0x498>
 8009706:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009708:	1c59      	adds	r1, r3, #1
 800970a:	f001 ffef 	bl	800b6ec <_malloc_r>
 800970e:	9008      	str	r0, [sp, #32]
 8009710:	2800      	cmp	r0, #0
 8009712:	d000      	beq.n	8009716 <_svfprintf_r+0x44a>
 8009714:	e221      	b.n	8009b5a <_svfprintf_r+0x88e>
 8009716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009718:	899a      	ldrh	r2, [r3, #12]
 800971a:	2340      	movs	r3, #64	; 0x40
 800971c:	4313      	orrs	r3, r2
 800971e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009720:	8193      	strh	r3, [r2, #12]
 8009722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009724:	899b      	ldrh	r3, [r3, #12]
 8009726:	065b      	lsls	r3, r3, #25
 8009728:	d400      	bmi.n	800972c <_svfprintf_r+0x460>
 800972a:	e5f4      	b.n	8009316 <_svfprintf_r+0x4a>
 800972c:	2301      	movs	r3, #1
 800972e:	425b      	negs	r3, r3
 8009730:	e5f0      	b.n	8009314 <_svfprintf_r+0x48>
 8009732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009734:	900c      	str	r0, [sp, #48]	; 0x30
 8009736:	3301      	adds	r3, #1
 8009738:	d100      	bne.n	800973c <_svfprintf_r+0x470>
 800973a:	e211      	b.n	8009b60 <_svfprintf_r+0x894>
 800973c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800973e:	2b47      	cmp	r3, #71	; 0x47
 8009740:	d114      	bne.n	800976c <_svfprintf_r+0x4a0>
 8009742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009744:	2b00      	cmp	r3, #0
 8009746:	d111      	bne.n	800976c <_svfprintf_r+0x4a0>
 8009748:	3301      	adds	r3, #1
 800974a:	9309      	str	r3, [sp, #36]	; 0x24
 800974c:	e00e      	b.n	800976c <_svfprintf_r+0x4a0>
 800974e:	46c0      	nop			; (mov r8, r8)
 8009750:	7fefffff 	.word	0x7fefffff
 8009754:	0800e690 	.word	0x0800e690
 8009758:	0800e694 	.word	0x0800e694
 800975c:	0800e698 	.word	0x0800e698
 8009760:	0800e69c 	.word	0x0800e69c
 8009764:	2300      	movs	r3, #0
 8009766:	930c      	str	r3, [sp, #48]	; 0x30
 8009768:	ab3f      	add	r3, sp, #252	; 0xfc
 800976a:	9308      	str	r3, [sp, #32]
 800976c:	2380      	movs	r3, #128	; 0x80
 800976e:	005b      	lsls	r3, r3, #1
 8009770:	4333      	orrs	r3, r6
 8009772:	931a      	str	r3, [sp, #104]	; 0x68
 8009774:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009776:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8009778:	2b00      	cmp	r3, #0
 800977a:	db00      	blt.n	800977e <_svfprintf_r+0x4b2>
 800977c:	e1f2      	b.n	8009b64 <_svfprintf_r+0x898>
 800977e:	2280      	movs	r2, #128	; 0x80
 8009780:	0612      	lsls	r2, r2, #24
 8009782:	4694      	mov	ip, r2
 8009784:	4463      	add	r3, ip
 8009786:	930e      	str	r3, [sp, #56]	; 0x38
 8009788:	232d      	movs	r3, #45	; 0x2d
 800978a:	9322      	str	r3, [sp, #136]	; 0x88
 800978c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800978e:	2b41      	cmp	r3, #65	; 0x41
 8009790:	d000      	beq.n	8009794 <_svfprintf_r+0x4c8>
 8009792:	e200      	b.n	8009b96 <_svfprintf_r+0x8ca>
 8009794:	0028      	movs	r0, r5
 8009796:	aa26      	add	r2, sp, #152	; 0x98
 8009798:	990e      	ldr	r1, [sp, #56]	; 0x38
 800979a:	f002 fd15 	bl	800c1c8 <frexp>
 800979e:	23ff      	movs	r3, #255	; 0xff
 80097a0:	2200      	movs	r2, #0
 80097a2:	059b      	lsls	r3, r3, #22
 80097a4:	f7f8 f8dc 	bl	8001960 <__aeabi_dmul>
 80097a8:	2200      	movs	r2, #0
 80097aa:	2300      	movs	r3, #0
 80097ac:	0004      	movs	r4, r0
 80097ae:	000d      	movs	r5, r1
 80097b0:	f7f6 fe4c 	bl	800044c <__aeabi_dcmpeq>
 80097b4:	2800      	cmp	r0, #0
 80097b6:	d001      	beq.n	80097bc <_svfprintf_r+0x4f0>
 80097b8:	2301      	movs	r3, #1
 80097ba:	9326      	str	r3, [sp, #152]	; 0x98
 80097bc:	4bd4      	ldr	r3, [pc, #848]	; (8009b10 <_svfprintf_r+0x844>)
 80097be:	9319      	str	r3, [sp, #100]	; 0x64
 80097c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097c2:	2b61      	cmp	r3, #97	; 0x61
 80097c4:	d001      	beq.n	80097ca <_svfprintf_r+0x4fe>
 80097c6:	4bd3      	ldr	r3, [pc, #844]	; (8009b14 <_svfprintf_r+0x848>)
 80097c8:	9319      	str	r3, [sp, #100]	; 0x64
 80097ca:	9b08      	ldr	r3, [sp, #32]
 80097cc:	930e      	str	r3, [sp, #56]	; 0x38
 80097ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097d0:	3b01      	subs	r3, #1
 80097d2:	9311      	str	r3, [sp, #68]	; 0x44
 80097d4:	2200      	movs	r2, #0
 80097d6:	4bd0      	ldr	r3, [pc, #832]	; (8009b18 <_svfprintf_r+0x84c>)
 80097d8:	0020      	movs	r0, r4
 80097da:	0029      	movs	r1, r5
 80097dc:	f7f8 f8c0 	bl	8001960 <__aeabi_dmul>
 80097e0:	000d      	movs	r5, r1
 80097e2:	0004      	movs	r4, r0
 80097e4:	f7f8 fed8 	bl	8002598 <__aeabi_d2iz>
 80097e8:	9021      	str	r0, [sp, #132]	; 0x84
 80097ea:	f7f8 ff0b 	bl	8002604 <__aeabi_i2d>
 80097ee:	0002      	movs	r2, r0
 80097f0:	000b      	movs	r3, r1
 80097f2:	0020      	movs	r0, r4
 80097f4:	0029      	movs	r1, r5
 80097f6:	f7f8 fb1f 	bl	8001e38 <__aeabi_dsub>
 80097fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097fc:	000d      	movs	r5, r1
 80097fe:	001a      	movs	r2, r3
 8009800:	3201      	adds	r2, #1
 8009802:	9921      	ldr	r1, [sp, #132]	; 0x84
 8009804:	920e      	str	r2, [sp, #56]	; 0x38
 8009806:	9223      	str	r2, [sp, #140]	; 0x8c
 8009808:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800980a:	0004      	movs	r4, r0
 800980c:	5c52      	ldrb	r2, [r2, r1]
 800980e:	701a      	strb	r2, [r3, #0]
 8009810:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009812:	9320      	str	r3, [sp, #128]	; 0x80
 8009814:	3301      	adds	r3, #1
 8009816:	d00a      	beq.n	800982e <_svfprintf_r+0x562>
 8009818:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800981a:	2200      	movs	r2, #0
 800981c:	3b01      	subs	r3, #1
 800981e:	9311      	str	r3, [sp, #68]	; 0x44
 8009820:	0020      	movs	r0, r4
 8009822:	2300      	movs	r3, #0
 8009824:	0029      	movs	r1, r5
 8009826:	f7f6 fe11 	bl	800044c <__aeabi_dcmpeq>
 800982a:	2800      	cmp	r0, #0
 800982c:	d0d2      	beq.n	80097d4 <_svfprintf_r+0x508>
 800982e:	2200      	movs	r2, #0
 8009830:	0020      	movs	r0, r4
 8009832:	0029      	movs	r1, r5
 8009834:	4bb9      	ldr	r3, [pc, #740]	; (8009b1c <_svfprintf_r+0x850>)
 8009836:	f7f6 fe23 	bl	8000480 <__aeabi_dcmpgt>
 800983a:	2800      	cmp	r0, #0
 800983c:	d10c      	bne.n	8009858 <_svfprintf_r+0x58c>
 800983e:	2200      	movs	r2, #0
 8009840:	0020      	movs	r0, r4
 8009842:	0029      	movs	r1, r5
 8009844:	4bb5      	ldr	r3, [pc, #724]	; (8009b1c <_svfprintf_r+0x850>)
 8009846:	f7f6 fe01 	bl	800044c <__aeabi_dcmpeq>
 800984a:	2800      	cmp	r0, #0
 800984c:	d100      	bne.n	8009850 <_svfprintf_r+0x584>
 800984e:	e19c      	b.n	8009b8a <_svfprintf_r+0x8be>
 8009850:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009852:	07db      	lsls	r3, r3, #31
 8009854:	d400      	bmi.n	8009858 <_svfprintf_r+0x58c>
 8009856:	e198      	b.n	8009b8a <_svfprintf_r+0x8be>
 8009858:	2030      	movs	r0, #48	; 0x30
 800985a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800985c:	932a      	str	r3, [sp, #168]	; 0xa8
 800985e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009860:	7bda      	ldrb	r2, [r3, #15]
 8009862:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009864:	3b01      	subs	r3, #1
 8009866:	932a      	str	r3, [sp, #168]	; 0xa8
 8009868:	7819      	ldrb	r1, [r3, #0]
 800986a:	4291      	cmp	r1, r2
 800986c:	d100      	bne.n	8009870 <_svfprintf_r+0x5a4>
 800986e:	e17c      	b.n	8009b6a <_svfprintf_r+0x89e>
 8009870:	1c4a      	adds	r2, r1, #1
 8009872:	b2d2      	uxtb	r2, r2
 8009874:	2939      	cmp	r1, #57	; 0x39
 8009876:	d101      	bne.n	800987c <_svfprintf_r+0x5b0>
 8009878:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800987a:	7a92      	ldrb	r2, [r2, #10]
 800987c:	701a      	strb	r2, [r3, #0]
 800987e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009880:	9a08      	ldr	r2, [sp, #32]
 8009882:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8009884:	1a9b      	subs	r3, r3, r2
 8009886:	930e      	str	r3, [sp, #56]	; 0x38
 8009888:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800988a:	2b47      	cmp	r3, #71	; 0x47
 800988c:	d000      	beq.n	8009890 <_svfprintf_r+0x5c4>
 800988e:	e1d0      	b.n	8009c32 <_svfprintf_r+0x966>
 8009890:	1ceb      	adds	r3, r5, #3
 8009892:	db03      	blt.n	800989c <_svfprintf_r+0x5d0>
 8009894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009896:	42ab      	cmp	r3, r5
 8009898:	db00      	blt.n	800989c <_svfprintf_r+0x5d0>
 800989a:	e1f8      	b.n	8009c8e <_svfprintf_r+0x9c2>
 800989c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800989e:	3b02      	subs	r3, #2
 80098a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80098a2:	223c      	movs	r2, #60	; 0x3c
 80098a4:	466b      	mov	r3, sp
 80098a6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80098a8:	189b      	adds	r3, r3, r2
 80098aa:	1e6c      	subs	r4, r5, #1
 80098ac:	3a1c      	subs	r2, #28
 80098ae:	2000      	movs	r0, #0
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	9426      	str	r4, [sp, #152]	; 0x98
 80098b4:	4391      	bics	r1, r2
 80098b6:	2941      	cmp	r1, #65	; 0x41
 80098b8:	d102      	bne.n	80098c0 <_svfprintf_r+0x5f4>
 80098ba:	330f      	adds	r3, #15
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	3001      	adds	r0, #1
 80098c0:	a928      	add	r1, sp, #160	; 0xa0
 80098c2:	700b      	strb	r3, [r1, #0]
 80098c4:	232b      	movs	r3, #43	; 0x2b
 80098c6:	2c00      	cmp	r4, #0
 80098c8:	da02      	bge.n	80098d0 <_svfprintf_r+0x604>
 80098ca:	2401      	movs	r4, #1
 80098cc:	3302      	adds	r3, #2
 80098ce:	1b64      	subs	r4, r4, r5
 80098d0:	704b      	strb	r3, [r1, #1]
 80098d2:	2c09      	cmp	r4, #9
 80098d4:	dc00      	bgt.n	80098d8 <_svfprintf_r+0x60c>
 80098d6:	e1c6      	b.n	8009c66 <_svfprintf_r+0x99a>
 80098d8:	2337      	movs	r3, #55	; 0x37
 80098da:	250a      	movs	r5, #10
 80098dc:	aa1e      	add	r2, sp, #120	; 0x78
 80098de:	189b      	adds	r3, r3, r2
 80098e0:	9310      	str	r3, [sp, #64]	; 0x40
 80098e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098e4:	0020      	movs	r0, r4
 80098e6:	9309      	str	r3, [sp, #36]	; 0x24
 80098e8:	0029      	movs	r1, r5
 80098ea:	3b01      	subs	r3, #1
 80098ec:	9310      	str	r3, [sp, #64]	; 0x40
 80098ee:	f7f6 fd97 	bl	8000420 <__aeabi_idivmod>
 80098f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098f4:	3130      	adds	r1, #48	; 0x30
 80098f6:	7019      	strb	r1, [r3, #0]
 80098f8:	0020      	movs	r0, r4
 80098fa:	0029      	movs	r1, r5
 80098fc:	9411      	str	r4, [sp, #68]	; 0x44
 80098fe:	f7f6 fca9 	bl	8000254 <__divsi3>
 8009902:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009904:	0004      	movs	r4, r0
 8009906:	2b63      	cmp	r3, #99	; 0x63
 8009908:	dceb      	bgt.n	80098e2 <_svfprintf_r+0x616>
 800990a:	212a      	movs	r1, #42	; 0x2a
 800990c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800990e:	a81e      	add	r0, sp, #120	; 0x78
 8009910:	1e9a      	subs	r2, r3, #2
 8009912:	1809      	adds	r1, r1, r0
 8009914:	2037      	movs	r0, #55	; 0x37
 8009916:	0013      	movs	r3, r2
 8009918:	3430      	adds	r4, #48	; 0x30
 800991a:	7014      	strb	r4, [r2, #0]
 800991c:	ac1e      	add	r4, sp, #120	; 0x78
 800991e:	1900      	adds	r0, r0, r4
 8009920:	4283      	cmp	r3, r0
 8009922:	d200      	bcs.n	8009926 <_svfprintf_r+0x65a>
 8009924:	e19a      	b.n	8009c5c <_svfprintf_r+0x990>
 8009926:	2300      	movs	r3, #0
 8009928:	4282      	cmp	r2, r0
 800992a:	d804      	bhi.n	8009936 <_svfprintf_r+0x66a>
 800992c:	aa1e      	add	r2, sp, #120	; 0x78
 800992e:	3339      	adds	r3, #57	; 0x39
 8009930:	189b      	adds	r3, r3, r2
 8009932:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009934:	1a9b      	subs	r3, r3, r2
 8009936:	222a      	movs	r2, #42	; 0x2a
 8009938:	a91e      	add	r1, sp, #120	; 0x78
 800993a:	1852      	adds	r2, r2, r1
 800993c:	18d3      	adds	r3, r2, r3
 800993e:	aa28      	add	r2, sp, #160	; 0xa0
 8009940:	1a9b      	subs	r3, r3, r2
 8009942:	931e      	str	r3, [sp, #120]	; 0x78
 8009944:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009948:	4694      	mov	ip, r2
 800994a:	4463      	add	r3, ip
 800994c:	9309      	str	r3, [sp, #36]	; 0x24
 800994e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009950:	2b01      	cmp	r3, #1
 8009952:	dc01      	bgt.n	8009958 <_svfprintf_r+0x68c>
 8009954:	07f3      	lsls	r3, r6, #31
 8009956:	d504      	bpl.n	8009962 <_svfprintf_r+0x696>
 8009958:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800995a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800995c:	4694      	mov	ip, r2
 800995e:	4463      	add	r3, ip
 8009960:	9309      	str	r3, [sp, #36]	; 0x24
 8009962:	2280      	movs	r2, #128	; 0x80
 8009964:	4b6e      	ldr	r3, [pc, #440]	; (8009b20 <_svfprintf_r+0x854>)
 8009966:	0052      	lsls	r2, r2, #1
 8009968:	4033      	ands	r3, r6
 800996a:	431a      	orrs	r2, r3
 800996c:	2300      	movs	r3, #0
 800996e:	001d      	movs	r5, r3
 8009970:	921a      	str	r2, [sp, #104]	; 0x68
 8009972:	9310      	str	r3, [sp, #64]	; 0x40
 8009974:	9311      	str	r3, [sp, #68]	; 0x44
 8009976:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009978:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800997a:	9319      	str	r3, [sp, #100]	; 0x64
 800997c:	2b00      	cmp	r3, #0
 800997e:	d006      	beq.n	800998e <_svfprintf_r+0x6c2>
 8009980:	231b      	movs	r3, #27
 8009982:	aa1e      	add	r2, sp, #120	; 0x78
 8009984:	189b      	adds	r3, r3, r2
 8009986:	222d      	movs	r2, #45	; 0x2d
 8009988:	701a      	strb	r2, [r3, #0]
 800998a:	2300      	movs	r3, #0
 800998c:	9319      	str	r3, [sp, #100]	; 0x64
 800998e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009990:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009992:	931a      	str	r3, [sp, #104]	; 0x68
 8009994:	4293      	cmp	r3, r2
 8009996:	da00      	bge.n	800999a <_svfprintf_r+0x6ce>
 8009998:	921a      	str	r2, [sp, #104]	; 0x68
 800999a:	231b      	movs	r3, #27
 800999c:	aa1e      	add	r2, sp, #120	; 0x78
 800999e:	189b      	adds	r3, r3, r2
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	1e5a      	subs	r2, r3, #1
 80099a4:	4193      	sbcs	r3, r2
 80099a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80099a8:	18d3      	adds	r3, r2, r3
 80099aa:	931a      	str	r3, [sp, #104]	; 0x68
 80099ac:	0032      	movs	r2, r6
 80099ae:	2302      	movs	r3, #2
 80099b0:	401a      	ands	r2, r3
 80099b2:	9220      	str	r2, [sp, #128]	; 0x80
 80099b4:	421e      	tst	r6, r3
 80099b6:	d002      	beq.n	80099be <_svfprintf_r+0x6f2>
 80099b8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80099ba:	3302      	adds	r3, #2
 80099bc:	931a      	str	r3, [sp, #104]	; 0x68
 80099be:	2384      	movs	r3, #132	; 0x84
 80099c0:	0032      	movs	r2, r6
 80099c2:	401a      	ands	r2, r3
 80099c4:	9221      	str	r2, [sp, #132]	; 0x84
 80099c6:	421e      	tst	r6, r3
 80099c8:	d120      	bne.n	8009a0c <_svfprintf_r+0x740>
 80099ca:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80099cc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80099ce:	1a9c      	subs	r4, r3, r2
 80099d0:	2c00      	cmp	r4, #0
 80099d2:	dd1b      	ble.n	8009a0c <_svfprintf_r+0x740>
 80099d4:	0039      	movs	r1, r7
 80099d6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80099d8:	4852      	ldr	r0, [pc, #328]	; (8009b24 <_svfprintf_r+0x858>)
 80099da:	9322      	str	r3, [sp, #136]	; 0x88
 80099dc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80099de:	3301      	adds	r3, #1
 80099e0:	3108      	adds	r1, #8
 80099e2:	6038      	str	r0, [r7, #0]
 80099e4:	2c10      	cmp	r4, #16
 80099e6:	dd00      	ble.n	80099ea <_svfprintf_r+0x71e>
 80099e8:	e319      	b.n	800a01e <_svfprintf_r+0xd52>
 80099ea:	607c      	str	r4, [r7, #4]
 80099ec:	18a4      	adds	r4, r4, r2
 80099ee:	000f      	movs	r7, r1
 80099f0:	942e      	str	r4, [sp, #184]	; 0xb8
 80099f2:	932d      	str	r3, [sp, #180]	; 0xb4
 80099f4:	2b07      	cmp	r3, #7
 80099f6:	dd09      	ble.n	8009a0c <_svfprintf_r+0x740>
 80099f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80099fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80099fc:	aa2c      	add	r2, sp, #176	; 0xb0
 80099fe:	f002 fc3b 	bl	800c278 <__ssprint_r>
 8009a02:	2800      	cmp	r0, #0
 8009a04:	d001      	beq.n	8009a0a <_svfprintf_r+0x73e>
 8009a06:	f000 fe60 	bl	800a6ca <_svfprintf_r+0x13fe>
 8009a0a:	af2f      	add	r7, sp, #188	; 0xbc
 8009a0c:	231b      	movs	r3, #27
 8009a0e:	aa1e      	add	r2, sp, #120	; 0x78
 8009a10:	189b      	adds	r3, r3, r2
 8009a12:	781a      	ldrb	r2, [r3, #0]
 8009a14:	2a00      	cmp	r2, #0
 8009a16:	d017      	beq.n	8009a48 <_svfprintf_r+0x77c>
 8009a18:	603b      	str	r3, [r7, #0]
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009a1e:	607b      	str	r3, [r7, #4]
 8009a20:	0013      	movs	r3, r2
 8009a22:	3301      	adds	r3, #1
 8009a24:	932e      	str	r3, [sp, #184]	; 0xb8
 8009a26:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009a28:	3708      	adds	r7, #8
 8009a2a:	9322      	str	r3, [sp, #136]	; 0x88
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	932d      	str	r3, [sp, #180]	; 0xb4
 8009a30:	2b07      	cmp	r3, #7
 8009a32:	dd09      	ble.n	8009a48 <_svfprintf_r+0x77c>
 8009a34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a36:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009a38:	aa2c      	add	r2, sp, #176	; 0xb0
 8009a3a:	f002 fc1d 	bl	800c278 <__ssprint_r>
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	d001      	beq.n	8009a46 <_svfprintf_r+0x77a>
 8009a42:	f000 fe42 	bl	800a6ca <_svfprintf_r+0x13fe>
 8009a46:	af2f      	add	r7, sp, #188	; 0xbc
 8009a48:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d019      	beq.n	8009a82 <_svfprintf_r+0x7b6>
 8009a4e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009a50:	9320      	str	r3, [sp, #128]	; 0x80
 8009a52:	ab25      	add	r3, sp, #148	; 0x94
 8009a54:	603b      	str	r3, [r7, #0]
 8009a56:	2302      	movs	r3, #2
 8009a58:	607b      	str	r3, [r7, #4]
 8009a5a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009a5c:	3708      	adds	r7, #8
 8009a5e:	3302      	adds	r3, #2
 8009a60:	932e      	str	r3, [sp, #184]	; 0xb8
 8009a62:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009a64:	9320      	str	r3, [sp, #128]	; 0x80
 8009a66:	3301      	adds	r3, #1
 8009a68:	932d      	str	r3, [sp, #180]	; 0xb4
 8009a6a:	2b07      	cmp	r3, #7
 8009a6c:	dd09      	ble.n	8009a82 <_svfprintf_r+0x7b6>
 8009a6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a70:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009a72:	aa2c      	add	r2, sp, #176	; 0xb0
 8009a74:	f002 fc00 	bl	800c278 <__ssprint_r>
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	d001      	beq.n	8009a80 <_svfprintf_r+0x7b4>
 8009a7c:	f000 fe25 	bl	800a6ca <_svfprintf_r+0x13fe>
 8009a80:	af2f      	add	r7, sp, #188	; 0xbc
 8009a82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a84:	2b80      	cmp	r3, #128	; 0x80
 8009a86:	d120      	bne.n	8009aca <_svfprintf_r+0x7fe>
 8009a88:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009a8a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009a8c:	1a9c      	subs	r4, r3, r2
 8009a8e:	2c00      	cmp	r4, #0
 8009a90:	dd1b      	ble.n	8009aca <_svfprintf_r+0x7fe>
 8009a92:	0039      	movs	r1, r7
 8009a94:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009a96:	4824      	ldr	r0, [pc, #144]	; (8009b28 <_svfprintf_r+0x85c>)
 8009a98:	9320      	str	r3, [sp, #128]	; 0x80
 8009a9a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	3108      	adds	r1, #8
 8009aa0:	6038      	str	r0, [r7, #0]
 8009aa2:	2c10      	cmp	r4, #16
 8009aa4:	dd00      	ble.n	8009aa8 <_svfprintf_r+0x7dc>
 8009aa6:	e2cd      	b.n	800a044 <_svfprintf_r+0xd78>
 8009aa8:	607c      	str	r4, [r7, #4]
 8009aaa:	18a4      	adds	r4, r4, r2
 8009aac:	000f      	movs	r7, r1
 8009aae:	942e      	str	r4, [sp, #184]	; 0xb8
 8009ab0:	932d      	str	r3, [sp, #180]	; 0xb4
 8009ab2:	2b07      	cmp	r3, #7
 8009ab4:	dd09      	ble.n	8009aca <_svfprintf_r+0x7fe>
 8009ab6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ab8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009aba:	aa2c      	add	r2, sp, #176	; 0xb0
 8009abc:	f002 fbdc 	bl	800c278 <__ssprint_r>
 8009ac0:	2800      	cmp	r0, #0
 8009ac2:	d001      	beq.n	8009ac8 <_svfprintf_r+0x7fc>
 8009ac4:	f000 fe01 	bl	800a6ca <_svfprintf_r+0x13fe>
 8009ac8:	af2f      	add	r7, sp, #188	; 0xbc
 8009aca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009acc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ace:	1a9c      	subs	r4, r3, r2
 8009ad0:	2c00      	cmp	r4, #0
 8009ad2:	dd2b      	ble.n	8009b2c <_svfprintf_r+0x860>
 8009ad4:	0039      	movs	r1, r7
 8009ad6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009ad8:	4813      	ldr	r0, [pc, #76]	; (8009b28 <_svfprintf_r+0x85c>)
 8009ada:	9319      	str	r3, [sp, #100]	; 0x64
 8009adc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009ade:	3301      	adds	r3, #1
 8009ae0:	3108      	adds	r1, #8
 8009ae2:	6038      	str	r0, [r7, #0]
 8009ae4:	2c10      	cmp	r4, #16
 8009ae6:	dd00      	ble.n	8009aea <_svfprintf_r+0x81e>
 8009ae8:	e2bf      	b.n	800a06a <_svfprintf_r+0xd9e>
 8009aea:	18a2      	adds	r2, r4, r2
 8009aec:	607c      	str	r4, [r7, #4]
 8009aee:	922e      	str	r2, [sp, #184]	; 0xb8
 8009af0:	000f      	movs	r7, r1
 8009af2:	932d      	str	r3, [sp, #180]	; 0xb4
 8009af4:	2b07      	cmp	r3, #7
 8009af6:	dd19      	ble.n	8009b2c <_svfprintf_r+0x860>
 8009af8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009afa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009afc:	aa2c      	add	r2, sp, #176	; 0xb0
 8009afe:	f002 fbbb 	bl	800c278 <__ssprint_r>
 8009b02:	2800      	cmp	r0, #0
 8009b04:	d001      	beq.n	8009b0a <_svfprintf_r+0x83e>
 8009b06:	f000 fde0 	bl	800a6ca <_svfprintf_r+0x13fe>
 8009b0a:	af2f      	add	r7, sp, #188	; 0xbc
 8009b0c:	e00e      	b.n	8009b2c <_svfprintf_r+0x860>
 8009b0e:	46c0      	nop			; (mov r8, r8)
 8009b10:	0800e6a0 	.word	0x0800e6a0
 8009b14:	0800e6b1 	.word	0x0800e6b1
 8009b18:	40300000 	.word	0x40300000
 8009b1c:	3fe00000 	.word	0x3fe00000
 8009b20:	fffffbff 	.word	0xfffffbff
 8009b24:	0800e6c4 	.word	0x0800e6c4
 8009b28:	0800e6d4 	.word	0x0800e6d4
 8009b2c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009b2e:	9319      	str	r3, [sp, #100]	; 0x64
 8009b30:	05f3      	lsls	r3, r6, #23
 8009b32:	d500      	bpl.n	8009b36 <_svfprintf_r+0x86a>
 8009b34:	e2b2      	b.n	800a09c <_svfprintf_r+0xdd0>
 8009b36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b38:	9b08      	ldr	r3, [sp, #32]
 8009b3a:	4694      	mov	ip, r2
 8009b3c:	603b      	str	r3, [r7, #0]
 8009b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b40:	607b      	str	r3, [r7, #4]
 8009b42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b44:	4463      	add	r3, ip
 8009b46:	932e      	str	r3, [sp, #184]	; 0xb8
 8009b48:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009b4a:	9308      	str	r3, [sp, #32]
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	932d      	str	r3, [sp, #180]	; 0xb4
 8009b50:	2b07      	cmp	r3, #7
 8009b52:	dd00      	ble.n	8009b56 <_svfprintf_r+0x88a>
 8009b54:	e393      	b.n	800a27e <_svfprintf_r+0xfb2>
 8009b56:	3708      	adds	r7, #8
 8009b58:	e2e7      	b.n	800a12a <_svfprintf_r+0xe5e>
 8009b5a:	9b08      	ldr	r3, [sp, #32]
 8009b5c:	930c      	str	r3, [sp, #48]	; 0x30
 8009b5e:	e605      	b.n	800976c <_svfprintf_r+0x4a0>
 8009b60:	2306      	movs	r3, #6
 8009b62:	e5f2      	b.n	800974a <_svfprintf_r+0x47e>
 8009b64:	930e      	str	r3, [sp, #56]	; 0x38
 8009b66:	2300      	movs	r3, #0
 8009b68:	e60f      	b.n	800978a <_svfprintf_r+0x4be>
 8009b6a:	7018      	strb	r0, [r3, #0]
 8009b6c:	e679      	b.n	8009862 <_svfprintf_r+0x596>
 8009b6e:	7018      	strb	r0, [r3, #0]
 8009b70:	3301      	adds	r3, #1
 8009b72:	1aca      	subs	r2, r1, r3
 8009b74:	d5fb      	bpl.n	8009b6e <_svfprintf_r+0x8a2>
 8009b76:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009b78:	2300      	movs	r3, #0
 8009b7a:	3201      	adds	r2, #1
 8009b7c:	db01      	blt.n	8009b82 <_svfprintf_r+0x8b6>
 8009b7e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009b80:	3301      	adds	r3, #1
 8009b82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b84:	18d3      	adds	r3, r2, r3
 8009b86:	9323      	str	r3, [sp, #140]	; 0x8c
 8009b88:	e679      	b.n	800987e <_svfprintf_r+0x5b2>
 8009b8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b8c:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009b8e:	2030      	movs	r0, #48	; 0x30
 8009b90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b92:	1851      	adds	r1, r2, r1
 8009b94:	e7ed      	b.n	8009b72 <_svfprintf_r+0x8a6>
 8009b96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009b98:	2303      	movs	r3, #3
 8009b9a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009b9c:	2a46      	cmp	r2, #70	; 0x46
 8009b9e:	d006      	beq.n	8009bae <_svfprintf_r+0x8e2>
 8009ba0:	0014      	movs	r4, r2
 8009ba2:	3c45      	subs	r4, #69	; 0x45
 8009ba4:	4262      	negs	r2, r4
 8009ba6:	4154      	adcs	r4, r2
 8009ba8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009baa:	3b01      	subs	r3, #1
 8009bac:	1914      	adds	r4, r2, r4
 8009bae:	aa2a      	add	r2, sp, #168	; 0xa8
 8009bb0:	9204      	str	r2, [sp, #16]
 8009bb2:	aa27      	add	r2, sp, #156	; 0x9c
 8009bb4:	9203      	str	r2, [sp, #12]
 8009bb6:	aa26      	add	r2, sp, #152	; 0x98
 8009bb8:	9202      	str	r2, [sp, #8]
 8009bba:	9300      	str	r3, [sp, #0]
 8009bbc:	002a      	movs	r2, r5
 8009bbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bc0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009bc2:	9401      	str	r4, [sp, #4]
 8009bc4:	f000 fe90 	bl	800a8e8 <_dtoa_r>
 8009bc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009bca:	9008      	str	r0, [sp, #32]
 8009bcc:	2b47      	cmp	r3, #71	; 0x47
 8009bce:	d103      	bne.n	8009bd8 <_svfprintf_r+0x90c>
 8009bd0:	07f3      	lsls	r3, r6, #31
 8009bd2:	d401      	bmi.n	8009bd8 <_svfprintf_r+0x90c>
 8009bd4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009bd6:	e653      	b.n	8009880 <_svfprintf_r+0x5b4>
 8009bd8:	9b08      	ldr	r3, [sp, #32]
 8009bda:	191b      	adds	r3, r3, r4
 8009bdc:	9311      	str	r3, [sp, #68]	; 0x44
 8009bde:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009be0:	2b46      	cmp	r3, #70	; 0x46
 8009be2:	d113      	bne.n	8009c0c <_svfprintf_r+0x940>
 8009be4:	9b08      	ldr	r3, [sp, #32]
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	2b30      	cmp	r3, #48	; 0x30
 8009bea:	d10a      	bne.n	8009c02 <_svfprintf_r+0x936>
 8009bec:	2200      	movs	r2, #0
 8009bee:	2300      	movs	r3, #0
 8009bf0:	0028      	movs	r0, r5
 8009bf2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009bf4:	f7f6 fc2a 	bl	800044c <__aeabi_dcmpeq>
 8009bf8:	2800      	cmp	r0, #0
 8009bfa:	d102      	bne.n	8009c02 <_svfprintf_r+0x936>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	1b1c      	subs	r4, r3, r4
 8009c00:	9426      	str	r4, [sp, #152]	; 0x98
 8009c02:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009c04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c06:	4694      	mov	ip, r2
 8009c08:	4463      	add	r3, ip
 8009c0a:	9311      	str	r3, [sp, #68]	; 0x44
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	2300      	movs	r3, #0
 8009c10:	0028      	movs	r0, r5
 8009c12:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009c14:	f7f6 fc1a 	bl	800044c <__aeabi_dcmpeq>
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	d001      	beq.n	8009c20 <_svfprintf_r+0x954>
 8009c1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c1e:	932a      	str	r3, [sp, #168]	; 0xa8
 8009c20:	2230      	movs	r2, #48	; 0x30
 8009c22:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009c24:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009c26:	4299      	cmp	r1, r3
 8009c28:	d9d4      	bls.n	8009bd4 <_svfprintf_r+0x908>
 8009c2a:	1c59      	adds	r1, r3, #1
 8009c2c:	912a      	str	r1, [sp, #168]	; 0xa8
 8009c2e:	701a      	strb	r2, [r3, #0]
 8009c30:	e7f7      	b.n	8009c22 <_svfprintf_r+0x956>
 8009c32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c34:	2b46      	cmp	r3, #70	; 0x46
 8009c36:	d000      	beq.n	8009c3a <_svfprintf_r+0x96e>
 8009c38:	e633      	b.n	80098a2 <_svfprintf_r+0x5d6>
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	0033      	movs	r3, r6
 8009c3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c40:	4013      	ands	r3, r2
 8009c42:	430b      	orrs	r3, r1
 8009c44:	2d00      	cmp	r5, #0
 8009c46:	dd1c      	ble.n	8009c82 <_svfprintf_r+0x9b6>
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d046      	beq.n	8009cda <_svfprintf_r+0xa0e>
 8009c4c:	000a      	movs	r2, r1
 8009c4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009c50:	18eb      	adds	r3, r5, r3
 8009c52:	18d3      	adds	r3, r2, r3
 8009c54:	9309      	str	r3, [sp, #36]	; 0x24
 8009c56:	2366      	movs	r3, #102	; 0x66
 8009c58:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c5a:	e023      	b.n	8009ca4 <_svfprintf_r+0x9d8>
 8009c5c:	781c      	ldrb	r4, [r3, #0]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	700c      	strb	r4, [r1, #0]
 8009c62:	3101      	adds	r1, #1
 8009c64:	e65c      	b.n	8009920 <_svfprintf_r+0x654>
 8009c66:	222a      	movs	r2, #42	; 0x2a
 8009c68:	ab1e      	add	r3, sp, #120	; 0x78
 8009c6a:	18d2      	adds	r2, r2, r3
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	d104      	bne.n	8009c7a <_svfprintf_r+0x9ae>
 8009c70:	2330      	movs	r3, #48	; 0x30
 8009c72:	222b      	movs	r2, #43	; 0x2b
 8009c74:	708b      	strb	r3, [r1, #2]
 8009c76:	ab1e      	add	r3, sp, #120	; 0x78
 8009c78:	18d2      	adds	r2, r2, r3
 8009c7a:	3430      	adds	r4, #48	; 0x30
 8009c7c:	1c53      	adds	r3, r2, #1
 8009c7e:	7014      	strb	r4, [r2, #0]
 8009c80:	e65d      	b.n	800993e <_svfprintf_r+0x672>
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d02b      	beq.n	8009cde <_svfprintf_r+0xa12>
 8009c86:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009c88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	e7e1      	b.n	8009c52 <_svfprintf_r+0x986>
 8009c8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c90:	429d      	cmp	r5, r3
 8009c92:	db15      	blt.n	8009cc0 <_svfprintf_r+0x9f4>
 8009c94:	2367      	movs	r3, #103	; 0x67
 8009c96:	9509      	str	r5, [sp, #36]	; 0x24
 8009c98:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c9a:	07f3      	lsls	r3, r6, #31
 8009c9c:	d502      	bpl.n	8009ca4 <_svfprintf_r+0x9d8>
 8009c9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009ca0:	18eb      	adds	r3, r5, r3
 8009ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ca4:	2380      	movs	r3, #128	; 0x80
 8009ca6:	0032      	movs	r2, r6
 8009ca8:	00db      	lsls	r3, r3, #3
 8009caa:	401a      	ands	r2, r3
 8009cac:	9211      	str	r2, [sp, #68]	; 0x44
 8009cae:	2200      	movs	r2, #0
 8009cb0:	9210      	str	r2, [sp, #64]	; 0x40
 8009cb2:	421e      	tst	r6, r3
 8009cb4:	d100      	bne.n	8009cb8 <_svfprintf_r+0x9ec>
 8009cb6:	e65e      	b.n	8009976 <_svfprintf_r+0x6aa>
 8009cb8:	4295      	cmp	r5, r2
 8009cba:	dc32      	bgt.n	8009d22 <_svfprintf_r+0xa56>
 8009cbc:	9211      	str	r2, [sp, #68]	; 0x44
 8009cbe:	e65a      	b.n	8009976 <_svfprintf_r+0x6aa>
 8009cc0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009cc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cc4:	4694      	mov	ip, r2
 8009cc6:	4463      	add	r3, ip
 8009cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8009cca:	2367      	movs	r3, #103	; 0x67
 8009ccc:	930f      	str	r3, [sp, #60]	; 0x3c
 8009cce:	2d00      	cmp	r5, #0
 8009cd0:	dce8      	bgt.n	8009ca4 <_svfprintf_r+0x9d8>
 8009cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cd4:	1b58      	subs	r0, r3, r5
 8009cd6:	1c43      	adds	r3, r0, #1
 8009cd8:	e7e3      	b.n	8009ca2 <_svfprintf_r+0x9d6>
 8009cda:	9509      	str	r5, [sp, #36]	; 0x24
 8009cdc:	e7bb      	b.n	8009c56 <_svfprintf_r+0x98a>
 8009cde:	2366      	movs	r3, #102	; 0x66
 8009ce0:	9209      	str	r2, [sp, #36]	; 0x24
 8009ce2:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ce4:	e7de      	b.n	8009ca4 <_svfprintf_r+0x9d8>
 8009ce6:	42ab      	cmp	r3, r5
 8009ce8:	da0e      	bge.n	8009d08 <_svfprintf_r+0xa3c>
 8009cea:	1aed      	subs	r5, r5, r3
 8009cec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009cee:	785b      	ldrb	r3, [r3, #1]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d012      	beq.n	8009d1a <_svfprintf_r+0xa4e>
 8009cf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	9311      	str	r3, [sp, #68]	; 0x44
 8009cfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	9312      	str	r3, [sp, #72]	; 0x48
 8009d00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	2bff      	cmp	r3, #255	; 0xff
 8009d06:	d1ee      	bne.n	8009ce6 <_svfprintf_r+0xa1a>
 8009d08:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d0c:	189b      	adds	r3, r3, r2
 8009d0e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009d10:	4353      	muls	r3, r2
 8009d12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d14:	189b      	adds	r3, r3, r2
 8009d16:	9309      	str	r3, [sp, #36]	; 0x24
 8009d18:	e62d      	b.n	8009976 <_svfprintf_r+0x6aa>
 8009d1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	9310      	str	r3, [sp, #64]	; 0x40
 8009d20:	e7ee      	b.n	8009d00 <_svfprintf_r+0xa34>
 8009d22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d24:	9311      	str	r3, [sp, #68]	; 0x44
 8009d26:	e7eb      	b.n	8009d00 <_svfprintf_r+0xa34>
 8009d28:	1d23      	adds	r3, r4, #4
 8009d2a:	930d      	str	r3, [sp, #52]	; 0x34
 8009d2c:	06b3      	lsls	r3, r6, #26
 8009d2e:	d509      	bpl.n	8009d44 <_svfprintf_r+0xa78>
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d34:	601a      	str	r2, [r3, #0]
 8009d36:	17d2      	asrs	r2, r2, #31
 8009d38:	605a      	str	r2, [r3, #4]
 8009d3a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d3c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8009d3e:	9308      	str	r3, [sp, #32]
 8009d40:	f7ff fb00 	bl	8009344 <_svfprintf_r+0x78>
 8009d44:	06f3      	lsls	r3, r6, #27
 8009d46:	d503      	bpl.n	8009d50 <_svfprintf_r+0xa84>
 8009d48:	6823      	ldr	r3, [r4, #0]
 8009d4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d4c:	601a      	str	r2, [r3, #0]
 8009d4e:	e7f4      	b.n	8009d3a <_svfprintf_r+0xa6e>
 8009d50:	0673      	lsls	r3, r6, #25
 8009d52:	d503      	bpl.n	8009d5c <_svfprintf_r+0xa90>
 8009d54:	6823      	ldr	r3, [r4, #0]
 8009d56:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d58:	801a      	strh	r2, [r3, #0]
 8009d5a:	e7ee      	b.n	8009d3a <_svfprintf_r+0xa6e>
 8009d5c:	05b3      	lsls	r3, r6, #22
 8009d5e:	d5f3      	bpl.n	8009d48 <_svfprintf_r+0xa7c>
 8009d60:	6823      	ldr	r3, [r4, #0]
 8009d62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d64:	701a      	strb	r2, [r3, #0]
 8009d66:	e7e8      	b.n	8009d3a <_svfprintf_r+0xa6e>
 8009d68:	2310      	movs	r3, #16
 8009d6a:	431e      	orrs	r6, r3
 8009d6c:	2320      	movs	r3, #32
 8009d6e:	0030      	movs	r0, r6
 8009d70:	4018      	ands	r0, r3
 8009d72:	421e      	tst	r6, r3
 8009d74:	d00f      	beq.n	8009d96 <_svfprintf_r+0xaca>
 8009d76:	3b19      	subs	r3, #25
 8009d78:	3407      	adds	r4, #7
 8009d7a:	439c      	bics	r4, r3
 8009d7c:	0022      	movs	r2, r4
 8009d7e:	ca18      	ldmia	r2!, {r3, r4}
 8009d80:	9306      	str	r3, [sp, #24]
 8009d82:	9407      	str	r4, [sp, #28]
 8009d84:	920d      	str	r2, [sp, #52]	; 0x34
 8009d86:	4bc2      	ldr	r3, [pc, #776]	; (800a090 <_svfprintf_r+0xdc4>)
 8009d88:	401e      	ands	r6, r3
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	221b      	movs	r2, #27
 8009d8e:	a91e      	add	r1, sp, #120	; 0x78
 8009d90:	1852      	adds	r2, r2, r1
 8009d92:	2100      	movs	r1, #0
 8009d94:	e424      	b.n	80095e0 <_svfprintf_r+0x314>
 8009d96:	0022      	movs	r2, r4
 8009d98:	ca08      	ldmia	r2!, {r3}
 8009d9a:	0031      	movs	r1, r6
 8009d9c:	920d      	str	r2, [sp, #52]	; 0x34
 8009d9e:	2210      	movs	r2, #16
 8009da0:	4011      	ands	r1, r2
 8009da2:	4216      	tst	r6, r2
 8009da4:	d002      	beq.n	8009dac <_svfprintf_r+0xae0>
 8009da6:	9306      	str	r3, [sp, #24]
 8009da8:	9007      	str	r0, [sp, #28]
 8009daa:	e7ec      	b.n	8009d86 <_svfprintf_r+0xaba>
 8009dac:	2240      	movs	r2, #64	; 0x40
 8009dae:	0030      	movs	r0, r6
 8009db0:	4010      	ands	r0, r2
 8009db2:	4216      	tst	r6, r2
 8009db4:	d003      	beq.n	8009dbe <_svfprintf_r+0xaf2>
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	9306      	str	r3, [sp, #24]
 8009dba:	9107      	str	r1, [sp, #28]
 8009dbc:	e7e3      	b.n	8009d86 <_svfprintf_r+0xaba>
 8009dbe:	2280      	movs	r2, #128	; 0x80
 8009dc0:	0031      	movs	r1, r6
 8009dc2:	0092      	lsls	r2, r2, #2
 8009dc4:	4011      	ands	r1, r2
 8009dc6:	4216      	tst	r6, r2
 8009dc8:	d0f6      	beq.n	8009db8 <_svfprintf_r+0xaec>
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	e7eb      	b.n	8009da6 <_svfprintf_r+0xada>
 8009dce:	0023      	movs	r3, r4
 8009dd0:	cb04      	ldmia	r3!, {r2}
 8009dd2:	a925      	add	r1, sp, #148	; 0x94
 8009dd4:	9206      	str	r2, [sp, #24]
 8009dd6:	2230      	movs	r2, #48	; 0x30
 8009dd8:	930d      	str	r3, [sp, #52]	; 0x34
 8009dda:	2300      	movs	r3, #0
 8009ddc:	700a      	strb	r2, [r1, #0]
 8009dde:	3248      	adds	r2, #72	; 0x48
 8009de0:	704a      	strb	r2, [r1, #1]
 8009de2:	49ac      	ldr	r1, [pc, #688]	; (800a094 <_svfprintf_r+0xdc8>)
 8009de4:	9307      	str	r3, [sp, #28]
 8009de6:	3302      	adds	r3, #2
 8009de8:	431e      	orrs	r6, r3
 8009dea:	911f      	str	r1, [sp, #124]	; 0x7c
 8009dec:	920f      	str	r2, [sp, #60]	; 0x3c
 8009dee:	e7cd      	b.n	8009d8c <_svfprintf_r+0xac0>
 8009df0:	0023      	movs	r3, r4
 8009df2:	cb04      	ldmia	r3!, {r2}
 8009df4:	2400      	movs	r4, #0
 8009df6:	930d      	str	r3, [sp, #52]	; 0x34
 8009df8:	231b      	movs	r3, #27
 8009dfa:	9208      	str	r2, [sp, #32]
 8009dfc:	aa1e      	add	r2, sp, #120	; 0x78
 8009dfe:	189b      	adds	r3, r3, r2
 8009e00:	701c      	strb	r4, [r3, #0]
 8009e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e04:	3301      	adds	r3, #1
 8009e06:	d00e      	beq.n	8009e26 <_svfprintf_r+0xb5a>
 8009e08:	0021      	movs	r1, r4
 8009e0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e0c:	9808      	ldr	r0, [sp, #32]
 8009e0e:	f7ff f93f 	bl	8009090 <memchr>
 8009e12:	900c      	str	r0, [sp, #48]	; 0x30
 8009e14:	42a0      	cmp	r0, r4
 8009e16:	d100      	bne.n	8009e1a <_svfprintf_r+0xb4e>
 8009e18:	e0fe      	b.n	800a018 <_svfprintf_r+0xd4c>
 8009e1a:	9a08      	ldr	r2, [sp, #32]
 8009e1c:	1a83      	subs	r3, r0, r2
 8009e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e20:	0023      	movs	r3, r4
 8009e22:	940c      	str	r4, [sp, #48]	; 0x30
 8009e24:	e441      	b.n	80096aa <_svfprintf_r+0x3de>
 8009e26:	9808      	ldr	r0, [sp, #32]
 8009e28:	f7f6 f96e 	bl	8000108 <strlen>
 8009e2c:	9009      	str	r0, [sp, #36]	; 0x24
 8009e2e:	e7f7      	b.n	8009e20 <_svfprintf_r+0xb54>
 8009e30:	2310      	movs	r3, #16
 8009e32:	431e      	orrs	r6, r3
 8009e34:	2320      	movs	r3, #32
 8009e36:	0030      	movs	r0, r6
 8009e38:	4018      	ands	r0, r3
 8009e3a:	421e      	tst	r6, r3
 8009e3c:	d009      	beq.n	8009e52 <_svfprintf_r+0xb86>
 8009e3e:	3b19      	subs	r3, #25
 8009e40:	3407      	adds	r4, #7
 8009e42:	439c      	bics	r4, r3
 8009e44:	0022      	movs	r2, r4
 8009e46:	ca18      	ldmia	r2!, {r3, r4}
 8009e48:	9306      	str	r3, [sp, #24]
 8009e4a:	9407      	str	r4, [sp, #28]
 8009e4c:	920d      	str	r2, [sp, #52]	; 0x34
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e79c      	b.n	8009d8c <_svfprintf_r+0xac0>
 8009e52:	0022      	movs	r2, r4
 8009e54:	ca08      	ldmia	r2!, {r3}
 8009e56:	0031      	movs	r1, r6
 8009e58:	920d      	str	r2, [sp, #52]	; 0x34
 8009e5a:	2210      	movs	r2, #16
 8009e5c:	4011      	ands	r1, r2
 8009e5e:	4216      	tst	r6, r2
 8009e60:	d002      	beq.n	8009e68 <_svfprintf_r+0xb9c>
 8009e62:	9306      	str	r3, [sp, #24]
 8009e64:	9007      	str	r0, [sp, #28]
 8009e66:	e7f2      	b.n	8009e4e <_svfprintf_r+0xb82>
 8009e68:	2240      	movs	r2, #64	; 0x40
 8009e6a:	0030      	movs	r0, r6
 8009e6c:	4010      	ands	r0, r2
 8009e6e:	4216      	tst	r6, r2
 8009e70:	d003      	beq.n	8009e7a <_svfprintf_r+0xbae>
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	9306      	str	r3, [sp, #24]
 8009e76:	9107      	str	r1, [sp, #28]
 8009e78:	e7e9      	b.n	8009e4e <_svfprintf_r+0xb82>
 8009e7a:	2280      	movs	r2, #128	; 0x80
 8009e7c:	0031      	movs	r1, r6
 8009e7e:	0092      	lsls	r2, r2, #2
 8009e80:	4011      	ands	r1, r2
 8009e82:	4216      	tst	r6, r2
 8009e84:	d0f6      	beq.n	8009e74 <_svfprintf_r+0xba8>
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	e7eb      	b.n	8009e62 <_svfprintf_r+0xb96>
 8009e8a:	4b83      	ldr	r3, [pc, #524]	; (800a098 <_svfprintf_r+0xdcc>)
 8009e8c:	0030      	movs	r0, r6
 8009e8e:	931f      	str	r3, [sp, #124]	; 0x7c
 8009e90:	2320      	movs	r3, #32
 8009e92:	4018      	ands	r0, r3
 8009e94:	421e      	tst	r6, r3
 8009e96:	d01a      	beq.n	8009ece <_svfprintf_r+0xc02>
 8009e98:	3b19      	subs	r3, #25
 8009e9a:	3407      	adds	r4, #7
 8009e9c:	439c      	bics	r4, r3
 8009e9e:	0022      	movs	r2, r4
 8009ea0:	ca18      	ldmia	r2!, {r3, r4}
 8009ea2:	9306      	str	r3, [sp, #24]
 8009ea4:	9407      	str	r4, [sp, #28]
 8009ea6:	920d      	str	r2, [sp, #52]	; 0x34
 8009ea8:	07f3      	lsls	r3, r6, #31
 8009eaa:	d50a      	bpl.n	8009ec2 <_svfprintf_r+0xbf6>
 8009eac:	9b06      	ldr	r3, [sp, #24]
 8009eae:	9a07      	ldr	r2, [sp, #28]
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	d006      	beq.n	8009ec2 <_svfprintf_r+0xbf6>
 8009eb4:	2230      	movs	r2, #48	; 0x30
 8009eb6:	ab25      	add	r3, sp, #148	; 0x94
 8009eb8:	701a      	strb	r2, [r3, #0]
 8009eba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ebc:	705a      	strb	r2, [r3, #1]
 8009ebe:	2302      	movs	r3, #2
 8009ec0:	431e      	orrs	r6, r3
 8009ec2:	4b73      	ldr	r3, [pc, #460]	; (800a090 <_svfprintf_r+0xdc4>)
 8009ec4:	401e      	ands	r6, r3
 8009ec6:	2302      	movs	r3, #2
 8009ec8:	e760      	b.n	8009d8c <_svfprintf_r+0xac0>
 8009eca:	4b72      	ldr	r3, [pc, #456]	; (800a094 <_svfprintf_r+0xdc8>)
 8009ecc:	e7de      	b.n	8009e8c <_svfprintf_r+0xbc0>
 8009ece:	0022      	movs	r2, r4
 8009ed0:	ca08      	ldmia	r2!, {r3}
 8009ed2:	0031      	movs	r1, r6
 8009ed4:	920d      	str	r2, [sp, #52]	; 0x34
 8009ed6:	2210      	movs	r2, #16
 8009ed8:	4011      	ands	r1, r2
 8009eda:	4216      	tst	r6, r2
 8009edc:	d002      	beq.n	8009ee4 <_svfprintf_r+0xc18>
 8009ede:	9306      	str	r3, [sp, #24]
 8009ee0:	9007      	str	r0, [sp, #28]
 8009ee2:	e7e1      	b.n	8009ea8 <_svfprintf_r+0xbdc>
 8009ee4:	2240      	movs	r2, #64	; 0x40
 8009ee6:	0030      	movs	r0, r6
 8009ee8:	4010      	ands	r0, r2
 8009eea:	4216      	tst	r6, r2
 8009eec:	d003      	beq.n	8009ef6 <_svfprintf_r+0xc2a>
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	9306      	str	r3, [sp, #24]
 8009ef2:	9107      	str	r1, [sp, #28]
 8009ef4:	e7d8      	b.n	8009ea8 <_svfprintf_r+0xbdc>
 8009ef6:	2280      	movs	r2, #128	; 0x80
 8009ef8:	0031      	movs	r1, r6
 8009efa:	0092      	lsls	r2, r2, #2
 8009efc:	4011      	ands	r1, r2
 8009efe:	4216      	tst	r6, r2
 8009f00:	d0f6      	beq.n	8009ef0 <_svfprintf_r+0xc24>
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	e7eb      	b.n	8009ede <_svfprintf_r+0xc12>
 8009f06:	9b07      	ldr	r3, [sp, #28]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d10b      	bne.n	8009f24 <_svfprintf_r+0xc58>
 8009f0c:	9b06      	ldr	r3, [sp, #24]
 8009f0e:	2b09      	cmp	r3, #9
 8009f10:	d808      	bhi.n	8009f24 <_svfprintf_r+0xc58>
 8009f12:	20e7      	movs	r0, #231	; 0xe7
 8009f14:	ab1e      	add	r3, sp, #120	; 0x78
 8009f16:	18c0      	adds	r0, r0, r3
 8009f18:	9b06      	ldr	r3, [sp, #24]
 8009f1a:	3330      	adds	r3, #48	; 0x30
 8009f1c:	7003      	strb	r3, [r0, #0]
 8009f1e:	9008      	str	r0, [sp, #32]
 8009f20:	f000 fc30 	bl	800a784 <_svfprintf_r+0x14b8>
 8009f24:	2480      	movs	r4, #128	; 0x80
 8009f26:	2300      	movs	r3, #0
 8009f28:	00e4      	lsls	r4, r4, #3
 8009f2a:	930e      	str	r3, [sp, #56]	; 0x38
 8009f2c:	a858      	add	r0, sp, #352	; 0x160
 8009f2e:	402c      	ands	r4, r5
 8009f30:	1e43      	subs	r3, r0, #1
 8009f32:	9308      	str	r3, [sp, #32]
 8009f34:	220a      	movs	r2, #10
 8009f36:	9806      	ldr	r0, [sp, #24]
 8009f38:	9907      	ldr	r1, [sp, #28]
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	f7f6 fab4 	bl	80004a8 <__aeabi_uldivmod>
 8009f40:	9b08      	ldr	r3, [sp, #32]
 8009f42:	3230      	adds	r2, #48	; 0x30
 8009f44:	701a      	strb	r2, [r3, #0]
 8009f46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f48:	3301      	adds	r3, #1
 8009f4a:	930e      	str	r3, [sp, #56]	; 0x38
 8009f4c:	2c00      	cmp	r4, #0
 8009f4e:	d01d      	beq.n	8009f8c <_svfprintf_r+0xcc0>
 8009f50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d118      	bne.n	8009f8c <_svfprintf_r+0xcc0>
 8009f5a:	2aff      	cmp	r2, #255	; 0xff
 8009f5c:	d016      	beq.n	8009f8c <_svfprintf_r+0xcc0>
 8009f5e:	9b07      	ldr	r3, [sp, #28]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d102      	bne.n	8009f6a <_svfprintf_r+0xc9e>
 8009f64:	9b06      	ldr	r3, [sp, #24]
 8009f66:	2b09      	cmp	r3, #9
 8009f68:	d910      	bls.n	8009f8c <_svfprintf_r+0xcc0>
 8009f6a:	9b08      	ldr	r3, [sp, #32]
 8009f6c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009f6e:	991d      	ldr	r1, [sp, #116]	; 0x74
 8009f70:	1a9b      	subs	r3, r3, r2
 8009f72:	0018      	movs	r0, r3
 8009f74:	9308      	str	r3, [sp, #32]
 8009f76:	f002 f96b 	bl	800c250 <strncpy>
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f7e:	920e      	str	r2, [sp, #56]	; 0x38
 8009f80:	785b      	ldrb	r3, [r3, #1]
 8009f82:	1e5a      	subs	r2, r3, #1
 8009f84:	4193      	sbcs	r3, r2
 8009f86:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009f88:	18d3      	adds	r3, r2, r3
 8009f8a:	9312      	str	r3, [sp, #72]	; 0x48
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	9806      	ldr	r0, [sp, #24]
 8009f90:	9907      	ldr	r1, [sp, #28]
 8009f92:	220a      	movs	r2, #10
 8009f94:	f7f6 fa88 	bl	80004a8 <__aeabi_uldivmod>
 8009f98:	9b07      	ldr	r3, [sp, #28]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d103      	bne.n	8009fa6 <_svfprintf_r+0xcda>
 8009f9e:	9b06      	ldr	r3, [sp, #24]
 8009fa0:	2b09      	cmp	r3, #9
 8009fa2:	d800      	bhi.n	8009fa6 <_svfprintf_r+0xcda>
 8009fa4:	e3ee      	b.n	800a784 <_svfprintf_r+0x14b8>
 8009fa6:	9006      	str	r0, [sp, #24]
 8009fa8:	9107      	str	r1, [sp, #28]
 8009faa:	9808      	ldr	r0, [sp, #32]
 8009fac:	e7c0      	b.n	8009f30 <_svfprintf_r+0xc64>
 8009fae:	200f      	movs	r0, #15
 8009fb0:	ab58      	add	r3, sp, #352	; 0x160
 8009fb2:	9308      	str	r3, [sp, #32]
 8009fb4:	9b08      	ldr	r3, [sp, #32]
 8009fb6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	9308      	str	r3, [sp, #32]
 8009fbc:	9b06      	ldr	r3, [sp, #24]
 8009fbe:	4003      	ands	r3, r0
 8009fc0:	5cd3      	ldrb	r3, [r2, r3]
 8009fc2:	9a08      	ldr	r2, [sp, #32]
 8009fc4:	7013      	strb	r3, [r2, #0]
 8009fc6:	9b07      	ldr	r3, [sp, #28]
 8009fc8:	0719      	lsls	r1, r3, #28
 8009fca:	9b06      	ldr	r3, [sp, #24]
 8009fcc:	091a      	lsrs	r2, r3, #4
 8009fce:	9b07      	ldr	r3, [sp, #28]
 8009fd0:	4311      	orrs	r1, r2
 8009fd2:	091b      	lsrs	r3, r3, #4
 8009fd4:	9307      	str	r3, [sp, #28]
 8009fd6:	000b      	movs	r3, r1
 8009fd8:	9a07      	ldr	r2, [sp, #28]
 8009fda:	9106      	str	r1, [sp, #24]
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	d1e9      	bne.n	8009fb4 <_svfprintf_r+0xce8>
 8009fe0:	e3d0      	b.n	800a784 <_svfprintf_r+0x14b8>
 8009fe2:	aa58      	add	r2, sp, #352	; 0x160
 8009fe4:	9208      	str	r2, [sp, #32]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d000      	beq.n	8009fec <_svfprintf_r+0xd20>
 8009fea:	e3cb      	b.n	800a784 <_svfprintf_r+0x14b8>
 8009fec:	07f3      	lsls	r3, r6, #31
 8009fee:	d400      	bmi.n	8009ff2 <_svfprintf_r+0xd26>
 8009ff0:	e3c8      	b.n	800a784 <_svfprintf_r+0x14b8>
 8009ff2:	20e7      	movs	r0, #231	; 0xe7
 8009ff4:	ab1e      	add	r3, sp, #120	; 0x78
 8009ff6:	18c0      	adds	r0, r0, r3
 8009ff8:	2330      	movs	r3, #48	; 0x30
 8009ffa:	e78f      	b.n	8009f1c <_svfprintf_r+0xc50>
 8009ffc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d100      	bne.n	800a004 <_svfprintf_r+0xd38>
 800a002:	e383      	b.n	800a70c <_svfprintf_r+0x1440>
 800a004:	221b      	movs	r2, #27
 800a006:	a83f      	add	r0, sp, #252	; 0xfc
 800a008:	7003      	strb	r3, [r0, #0]
 800a00a:	2300      	movs	r3, #0
 800a00c:	a91e      	add	r1, sp, #120	; 0x78
 800a00e:	1852      	adds	r2, r2, r1
 800a010:	7013      	strb	r3, [r2, #0]
 800a012:	940d      	str	r4, [sp, #52]	; 0x34
 800a014:	f7ff fabf 	bl	8009596 <_svfprintf_r+0x2ca>
 800a018:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a01a:	f7ff fb46 	bl	80096aa <_svfprintf_r+0x3de>
 800a01e:	2010      	movs	r0, #16
 800a020:	1812      	adds	r2, r2, r0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	922e      	str	r2, [sp, #184]	; 0xb8
 800a026:	932d      	str	r3, [sp, #180]	; 0xb4
 800a028:	2b07      	cmp	r3, #7
 800a02a:	dd08      	ble.n	800a03e <_svfprintf_r+0xd72>
 800a02c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a02e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a030:	aa2c      	add	r2, sp, #176	; 0xb0
 800a032:	f002 f921 	bl	800c278 <__ssprint_r>
 800a036:	2800      	cmp	r0, #0
 800a038:	d000      	beq.n	800a03c <_svfprintf_r+0xd70>
 800a03a:	e346      	b.n	800a6ca <_svfprintf_r+0x13fe>
 800a03c:	a92f      	add	r1, sp, #188	; 0xbc
 800a03e:	000f      	movs	r7, r1
 800a040:	3c10      	subs	r4, #16
 800a042:	e4c7      	b.n	80099d4 <_svfprintf_r+0x708>
 800a044:	2010      	movs	r0, #16
 800a046:	1812      	adds	r2, r2, r0
 800a048:	6078      	str	r0, [r7, #4]
 800a04a:	922e      	str	r2, [sp, #184]	; 0xb8
 800a04c:	932d      	str	r3, [sp, #180]	; 0xb4
 800a04e:	2b07      	cmp	r3, #7
 800a050:	dd08      	ble.n	800a064 <_svfprintf_r+0xd98>
 800a052:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a054:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a056:	aa2c      	add	r2, sp, #176	; 0xb0
 800a058:	f002 f90e 	bl	800c278 <__ssprint_r>
 800a05c:	2800      	cmp	r0, #0
 800a05e:	d000      	beq.n	800a062 <_svfprintf_r+0xd96>
 800a060:	e333      	b.n	800a6ca <_svfprintf_r+0x13fe>
 800a062:	a92f      	add	r1, sp, #188	; 0xbc
 800a064:	000f      	movs	r7, r1
 800a066:	3c10      	subs	r4, #16
 800a068:	e513      	b.n	8009a92 <_svfprintf_r+0x7c6>
 800a06a:	2010      	movs	r0, #16
 800a06c:	1812      	adds	r2, r2, r0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	922e      	str	r2, [sp, #184]	; 0xb8
 800a072:	932d      	str	r3, [sp, #180]	; 0xb4
 800a074:	2b07      	cmp	r3, #7
 800a076:	dd08      	ble.n	800a08a <_svfprintf_r+0xdbe>
 800a078:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a07a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a07c:	aa2c      	add	r2, sp, #176	; 0xb0
 800a07e:	f002 f8fb 	bl	800c278 <__ssprint_r>
 800a082:	2800      	cmp	r0, #0
 800a084:	d000      	beq.n	800a088 <_svfprintf_r+0xdbc>
 800a086:	e320      	b.n	800a6ca <_svfprintf_r+0x13fe>
 800a088:	a92f      	add	r1, sp, #188	; 0xbc
 800a08a:	000f      	movs	r7, r1
 800a08c:	3c10      	subs	r4, #16
 800a08e:	e521      	b.n	8009ad4 <_svfprintf_r+0x808>
 800a090:	fffffbff 	.word	0xfffffbff
 800a094:	0800e6a0 	.word	0x0800e6a0
 800a098:	0800e6b1 	.word	0x0800e6b1
 800a09c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a09e:	2b65      	cmp	r3, #101	; 0x65
 800a0a0:	dc00      	bgt.n	800a0a4 <_svfprintf_r+0xdd8>
 800a0a2:	e257      	b.n	800a554 <_svfprintf_r+0x1288>
 800a0a4:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a0a6:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	f7f6 f9ce 	bl	800044c <__aeabi_dcmpeq>
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	d07c      	beq.n	800a1ae <_svfprintf_r+0xee2>
 800a0b4:	4b80      	ldr	r3, [pc, #512]	; (800a2b8 <_svfprintf_r+0xfec>)
 800a0b6:	603b      	str	r3, [r7, #0]
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	607b      	str	r3, [r7, #4]
 800a0bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a0be:	3708      	adds	r7, #8
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	932e      	str	r3, [sp, #184]	; 0xb8
 800a0c4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a0c6:	9308      	str	r3, [sp, #32]
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	932d      	str	r3, [sp, #180]	; 0xb4
 800a0cc:	2b07      	cmp	r3, #7
 800a0ce:	dd08      	ble.n	800a0e2 <_svfprintf_r+0xe16>
 800a0d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a0d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a0d4:	aa2c      	add	r2, sp, #176	; 0xb0
 800a0d6:	f002 f8cf 	bl	800c278 <__ssprint_r>
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	d000      	beq.n	800a0e0 <_svfprintf_r+0xe14>
 800a0de:	e2f4      	b.n	800a6ca <_svfprintf_r+0x13fe>
 800a0e0:	af2f      	add	r7, sp, #188	; 0xbc
 800a0e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a0e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	db01      	blt.n	800a0ee <_svfprintf_r+0xe22>
 800a0ea:	07f3      	lsls	r3, r6, #31
 800a0ec:	d51d      	bpl.n	800a12a <_svfprintf_r+0xe5e>
 800a0ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a0f0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a0f2:	4694      	mov	ip, r2
 800a0f4:	603b      	str	r3, [r7, #0]
 800a0f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a0f8:	607b      	str	r3, [r7, #4]
 800a0fa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a0fc:	3708      	adds	r7, #8
 800a0fe:	4463      	add	r3, ip
 800a100:	932e      	str	r3, [sp, #184]	; 0xb8
 800a102:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a104:	9308      	str	r3, [sp, #32]
 800a106:	3301      	adds	r3, #1
 800a108:	932d      	str	r3, [sp, #180]	; 0xb4
 800a10a:	2b07      	cmp	r3, #7
 800a10c:	dd08      	ble.n	800a120 <_svfprintf_r+0xe54>
 800a10e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a110:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a112:	aa2c      	add	r2, sp, #176	; 0xb0
 800a114:	f002 f8b0 	bl	800c278 <__ssprint_r>
 800a118:	2800      	cmp	r0, #0
 800a11a:	d000      	beq.n	800a11e <_svfprintf_r+0xe52>
 800a11c:	e2d5      	b.n	800a6ca <_svfprintf_r+0x13fe>
 800a11e:	af2f      	add	r7, sp, #188	; 0xbc
 800a120:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a122:	2510      	movs	r5, #16
 800a124:	1e5c      	subs	r4, r3, #1
 800a126:	2c00      	cmp	r4, #0
 800a128:	dc2f      	bgt.n	800a18a <_svfprintf_r+0xebe>
 800a12a:	0773      	lsls	r3, r6, #29
 800a12c:	d500      	bpl.n	800a130 <_svfprintf_r+0xe64>
 800a12e:	e2ae      	b.n	800a68e <_svfprintf_r+0x13c2>
 800a130:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a132:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a134:	4293      	cmp	r3, r2
 800a136:	da00      	bge.n	800a13a <_svfprintf_r+0xe6e>
 800a138:	0013      	movs	r3, r2
 800a13a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a13c:	18d3      	adds	r3, r2, r3
 800a13e:	9317      	str	r3, [sp, #92]	; 0x5c
 800a140:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a142:	9308      	str	r3, [sp, #32]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d007      	beq.n	800a158 <_svfprintf_r+0xe8c>
 800a148:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a14a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a14c:	aa2c      	add	r2, sp, #176	; 0xb0
 800a14e:	f002 f893 	bl	800c278 <__ssprint_r>
 800a152:	2800      	cmp	r0, #0
 800a154:	d000      	beq.n	800a158 <_svfprintf_r+0xe8c>
 800a156:	e2b8      	b.n	800a6ca <_svfprintf_r+0x13fe>
 800a158:	2300      	movs	r3, #0
 800a15a:	932d      	str	r3, [sp, #180]	; 0xb4
 800a15c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d000      	beq.n	800a164 <_svfprintf_r+0xe98>
 800a162:	e2ce      	b.n	800a702 <_svfprintf_r+0x1436>
 800a164:	af2f      	add	r7, sp, #188	; 0xbc
 800a166:	e5e8      	b.n	8009d3a <_svfprintf_r+0xa6e>
 800a168:	3210      	adds	r2, #16
 800a16a:	607d      	str	r5, [r7, #4]
 800a16c:	922e      	str	r2, [sp, #184]	; 0xb8
 800a16e:	932d      	str	r3, [sp, #180]	; 0xb4
 800a170:	2b07      	cmp	r3, #7
 800a172:	dd08      	ble.n	800a186 <_svfprintf_r+0xeba>
 800a174:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a176:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a178:	aa2c      	add	r2, sp, #176	; 0xb0
 800a17a:	f002 f87d 	bl	800c278 <__ssprint_r>
 800a17e:	2800      	cmp	r0, #0
 800a180:	d000      	beq.n	800a184 <_svfprintf_r+0xeb8>
 800a182:	e2a2      	b.n	800a6ca <_svfprintf_r+0x13fe>
 800a184:	a92f      	add	r1, sp, #188	; 0xbc
 800a186:	000f      	movs	r7, r1
 800a188:	3c10      	subs	r4, #16
 800a18a:	0039      	movs	r1, r7
 800a18c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a18e:	484b      	ldr	r0, [pc, #300]	; (800a2bc <_svfprintf_r+0xff0>)
 800a190:	9308      	str	r3, [sp, #32]
 800a192:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a194:	3301      	adds	r3, #1
 800a196:	3108      	adds	r1, #8
 800a198:	6038      	str	r0, [r7, #0]
 800a19a:	2c10      	cmp	r4, #16
 800a19c:	dce4      	bgt.n	800a168 <_svfprintf_r+0xe9c>
 800a19e:	607c      	str	r4, [r7, #4]
 800a1a0:	18a4      	adds	r4, r4, r2
 800a1a2:	000f      	movs	r7, r1
 800a1a4:	942e      	str	r4, [sp, #184]	; 0xb8
 800a1a6:	932d      	str	r3, [sp, #180]	; 0xb4
 800a1a8:	2b07      	cmp	r3, #7
 800a1aa:	ddbe      	ble.n	800a12a <_svfprintf_r+0xe5e>
 800a1ac:	e067      	b.n	800a27e <_svfprintf_r+0xfb2>
 800a1ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	dd00      	ble.n	800a1b6 <_svfprintf_r+0xeea>
 800a1b4:	e084      	b.n	800a2c0 <_svfprintf_r+0xff4>
 800a1b6:	4b40      	ldr	r3, [pc, #256]	; (800a2b8 <_svfprintf_r+0xfec>)
 800a1b8:	603b      	str	r3, [r7, #0]
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	607b      	str	r3, [r7, #4]
 800a1be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a1c0:	3708      	adds	r7, #8
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	932e      	str	r3, [sp, #184]	; 0xb8
 800a1c6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a1c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	932d      	str	r3, [sp, #180]	; 0xb4
 800a1ce:	2b07      	cmp	r3, #7
 800a1d0:	dd08      	ble.n	800a1e4 <_svfprintf_r+0xf18>
 800a1d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a1d6:	aa2c      	add	r2, sp, #176	; 0xb0
 800a1d8:	f002 f84e 	bl	800c278 <__ssprint_r>
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	d000      	beq.n	800a1e2 <_svfprintf_r+0xf16>
 800a1e0:	e273      	b.n	800a6ca <_svfprintf_r+0x13fe>
 800a1e2:	af2f      	add	r7, sp, #188	; 0xbc
 800a1e4:	9926      	ldr	r1, [sp, #152]	; 0x98
 800a1e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1e8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a1ea:	430b      	orrs	r3, r1
 800a1ec:	2101      	movs	r1, #1
 800a1ee:	4031      	ands	r1, r6
 800a1f0:	430b      	orrs	r3, r1
 800a1f2:	d09a      	beq.n	800a12a <_svfprintf_r+0xe5e>
 800a1f4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a1f6:	603b      	str	r3, [r7, #0]
 800a1f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a1fa:	607b      	str	r3, [r7, #4]
 800a1fc:	189a      	adds	r2, r3, r2
 800a1fe:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a200:	922e      	str	r2, [sp, #184]	; 0xb8
 800a202:	9309      	str	r3, [sp, #36]	; 0x24
 800a204:	3301      	adds	r3, #1
 800a206:	932d      	str	r3, [sp, #180]	; 0xb4
 800a208:	3708      	adds	r7, #8
 800a20a:	2b07      	cmp	r3, #7
 800a20c:	dd08      	ble.n	800a220 <_svfprintf_r+0xf54>
 800a20e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a210:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a212:	aa2c      	add	r2, sp, #176	; 0xb0
 800a214:	f002 f830 	bl	800c278 <__ssprint_r>
 800a218:	2800      	cmp	r0, #0
 800a21a:	d000      	beq.n	800a21e <_svfprintf_r+0xf52>
 800a21c:	e255      	b.n	800a6ca <_svfprintf_r+0x13fe>
 800a21e:	af2f      	add	r7, sp, #188	; 0xbc
 800a220:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800a222:	2c00      	cmp	r4, #0
 800a224:	da1a      	bge.n	800a25c <_svfprintf_r+0xf90>
 800a226:	0039      	movs	r1, r7
 800a228:	2510      	movs	r5, #16
 800a22a:	4264      	negs	r4, r4
 800a22c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a22e:	982e      	ldr	r0, [sp, #184]	; 0xb8
 800a230:	9309      	str	r3, [sp, #36]	; 0x24
 800a232:	1c5a      	adds	r2, r3, #1
 800a234:	4b21      	ldr	r3, [pc, #132]	; (800a2bc <_svfprintf_r+0xff0>)
 800a236:	3708      	adds	r7, #8
 800a238:	600b      	str	r3, [r1, #0]
 800a23a:	2c10      	cmp	r4, #16
 800a23c:	dc29      	bgt.n	800a292 <_svfprintf_r+0xfc6>
 800a23e:	604c      	str	r4, [r1, #4]
 800a240:	1824      	adds	r4, r4, r0
 800a242:	942e      	str	r4, [sp, #184]	; 0xb8
 800a244:	922d      	str	r2, [sp, #180]	; 0xb4
 800a246:	2a07      	cmp	r2, #7
 800a248:	dd08      	ble.n	800a25c <_svfprintf_r+0xf90>
 800a24a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a24c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a24e:	aa2c      	add	r2, sp, #176	; 0xb0
 800a250:	f002 f812 	bl	800c278 <__ssprint_r>
 800a254:	2800      	cmp	r0, #0
 800a256:	d000      	beq.n	800a25a <_svfprintf_r+0xf8e>
 800a258:	e237      	b.n	800a6ca <_svfprintf_r+0x13fe>
 800a25a:	af2f      	add	r7, sp, #188	; 0xbc
 800a25c:	9b08      	ldr	r3, [sp, #32]
 800a25e:	603b      	str	r3, [r7, #0]
 800a260:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a262:	607b      	str	r3, [r7, #4]
 800a264:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a266:	001a      	movs	r2, r3
 800a268:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a26a:	469c      	mov	ip, r3
 800a26c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a26e:	4462      	add	r2, ip
 800a270:	922e      	str	r2, [sp, #184]	; 0xb8
 800a272:	1c5a      	adds	r2, r3, #1
 800a274:	9308      	str	r3, [sp, #32]
 800a276:	922d      	str	r2, [sp, #180]	; 0xb4
 800a278:	2a07      	cmp	r2, #7
 800a27a:	dc00      	bgt.n	800a27e <_svfprintf_r+0xfb2>
 800a27c:	e46b      	b.n	8009b56 <_svfprintf_r+0x88a>
 800a27e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a280:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a282:	aa2c      	add	r2, sp, #176	; 0xb0
 800a284:	f001 fff8 	bl	800c278 <__ssprint_r>
 800a288:	2800      	cmp	r0, #0
 800a28a:	d000      	beq.n	800a28e <_svfprintf_r+0xfc2>
 800a28c:	e21d      	b.n	800a6ca <_svfprintf_r+0x13fe>
 800a28e:	af2f      	add	r7, sp, #188	; 0xbc
 800a290:	e74b      	b.n	800a12a <_svfprintf_r+0xe5e>
 800a292:	3010      	adds	r0, #16
 800a294:	604d      	str	r5, [r1, #4]
 800a296:	902e      	str	r0, [sp, #184]	; 0xb8
 800a298:	922d      	str	r2, [sp, #180]	; 0xb4
 800a29a:	2a07      	cmp	r2, #7
 800a29c:	dd08      	ble.n	800a2b0 <_svfprintf_r+0xfe4>
 800a29e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a2a2:	aa2c      	add	r2, sp, #176	; 0xb0
 800a2a4:	f001 ffe8 	bl	800c278 <__ssprint_r>
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	d000      	beq.n	800a2ae <_svfprintf_r+0xfe2>
 800a2ac:	e20d      	b.n	800a6ca <_svfprintf_r+0x13fe>
 800a2ae:	af2f      	add	r7, sp, #188	; 0xbc
 800a2b0:	0039      	movs	r1, r7
 800a2b2:	3c10      	subs	r4, #16
 800a2b4:	e7ba      	b.n	800a22c <_svfprintf_r+0xf60>
 800a2b6:	46c0      	nop			; (mov r8, r8)
 800a2b8:	0800e6c2 	.word	0x0800e6c2
 800a2bc:	0800e6d4 	.word	0x0800e6d4
 800a2c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2c2:	002c      	movs	r4, r5
 800a2c4:	429d      	cmp	r5, r3
 800a2c6:	dd00      	ble.n	800a2ca <_svfprintf_r+0xffe>
 800a2c8:	001c      	movs	r4, r3
 800a2ca:	2c00      	cmp	r4, #0
 800a2cc:	dd15      	ble.n	800a2fa <_svfprintf_r+0x102e>
 800a2ce:	9b08      	ldr	r3, [sp, #32]
 800a2d0:	607c      	str	r4, [r7, #4]
 800a2d2:	603b      	str	r3, [r7, #0]
 800a2d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a2d6:	3708      	adds	r7, #8
 800a2d8:	18e3      	adds	r3, r4, r3
 800a2da:	932e      	str	r3, [sp, #184]	; 0xb8
 800a2dc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a2de:	9309      	str	r3, [sp, #36]	; 0x24
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	932d      	str	r3, [sp, #180]	; 0xb4
 800a2e4:	2b07      	cmp	r3, #7
 800a2e6:	dd08      	ble.n	800a2fa <_svfprintf_r+0x102e>
 800a2e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a2ec:	aa2c      	add	r2, sp, #176	; 0xb0
 800a2ee:	f001 ffc3 	bl	800c278 <__ssprint_r>
 800a2f2:	2800      	cmp	r0, #0
 800a2f4:	d000      	beq.n	800a2f8 <_svfprintf_r+0x102c>
 800a2f6:	e1e8      	b.n	800a6ca <_svfprintf_r+0x13fe>
 800a2f8:	af2f      	add	r7, sp, #188	; 0xbc
 800a2fa:	43e3      	mvns	r3, r4
 800a2fc:	17db      	asrs	r3, r3, #31
 800a2fe:	401c      	ands	r4, r3
 800a300:	1b2c      	subs	r4, r5, r4
 800a302:	2c00      	cmp	r4, #0
 800a304:	dd1a      	ble.n	800a33c <_svfprintf_r+0x1070>
 800a306:	0039      	movs	r1, r7
 800a308:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a30a:	48ca      	ldr	r0, [pc, #808]	; (800a634 <_svfprintf_r+0x1368>)
 800a30c:	9309      	str	r3, [sp, #36]	; 0x24
 800a30e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a310:	3301      	adds	r3, #1
 800a312:	3108      	adds	r1, #8
 800a314:	6038      	str	r0, [r7, #0]
 800a316:	2c10      	cmp	r4, #16
 800a318:	dd00      	ble.n	800a31c <_svfprintf_r+0x1050>
 800a31a:	e089      	b.n	800a430 <_svfprintf_r+0x1164>
 800a31c:	607c      	str	r4, [r7, #4]
 800a31e:	18a4      	adds	r4, r4, r2
 800a320:	000f      	movs	r7, r1
 800a322:	942e      	str	r4, [sp, #184]	; 0xb8
 800a324:	932d      	str	r3, [sp, #180]	; 0xb4
 800a326:	2b07      	cmp	r3, #7
 800a328:	dd08      	ble.n	800a33c <_svfprintf_r+0x1070>
 800a32a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a32c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a32e:	aa2c      	add	r2, sp, #176	; 0xb0
 800a330:	f001 ffa2 	bl	800c278 <__ssprint_r>
 800a334:	2800      	cmp	r0, #0
 800a336:	d000      	beq.n	800a33a <_svfprintf_r+0x106e>
 800a338:	e1c7      	b.n	800a6ca <_svfprintf_r+0x13fe>
 800a33a:	af2f      	add	r7, sp, #188	; 0xbc
 800a33c:	9b08      	ldr	r3, [sp, #32]
 800a33e:	195d      	adds	r5, r3, r5
 800a340:	0573      	lsls	r3, r6, #21
 800a342:	d50d      	bpl.n	800a360 <_svfprintf_r+0x1094>
 800a344:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a346:	2b00      	cmp	r3, #0
 800a348:	d000      	beq.n	800a34c <_svfprintf_r+0x1080>
 800a34a:	e084      	b.n	800a456 <_svfprintf_r+0x118a>
 800a34c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d000      	beq.n	800a354 <_svfprintf_r+0x1088>
 800a352:	e083      	b.n	800a45c <_svfprintf_r+0x1190>
 800a354:	9b08      	ldr	r3, [sp, #32]
 800a356:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a358:	189b      	adds	r3, r3, r2
 800a35a:	429d      	cmp	r5, r3
 800a35c:	d900      	bls.n	800a360 <_svfprintf_r+0x1094>
 800a35e:	001d      	movs	r5, r3
 800a360:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a362:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a364:	4293      	cmp	r3, r2
 800a366:	db01      	blt.n	800a36c <_svfprintf_r+0x10a0>
 800a368:	07f3      	lsls	r3, r6, #31
 800a36a:	d518      	bpl.n	800a39e <_svfprintf_r+0x10d2>
 800a36c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a36e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a370:	4694      	mov	ip, r2
 800a372:	603b      	str	r3, [r7, #0]
 800a374:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a376:	607b      	str	r3, [r7, #4]
 800a378:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a37a:	3708      	adds	r7, #8
 800a37c:	4463      	add	r3, ip
 800a37e:	932e      	str	r3, [sp, #184]	; 0xb8
 800a380:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a382:	9309      	str	r3, [sp, #36]	; 0x24
 800a384:	3301      	adds	r3, #1
 800a386:	932d      	str	r3, [sp, #180]	; 0xb4
 800a388:	2b07      	cmp	r3, #7
 800a38a:	dd08      	ble.n	800a39e <_svfprintf_r+0x10d2>
 800a38c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a38e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a390:	aa2c      	add	r2, sp, #176	; 0xb0
 800a392:	f001 ff71 	bl	800c278 <__ssprint_r>
 800a396:	2800      	cmp	r0, #0
 800a398:	d000      	beq.n	800a39c <_svfprintf_r+0x10d0>
 800a39a:	e196      	b.n	800a6ca <_svfprintf_r+0x13fe>
 800a39c:	af2f      	add	r7, sp, #188	; 0xbc
 800a39e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3a0:	9808      	ldr	r0, [sp, #32]
 800a3a2:	469c      	mov	ip, r3
 800a3a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a3a6:	4460      	add	r0, ip
 800a3a8:	1b40      	subs	r0, r0, r5
 800a3aa:	1a9c      	subs	r4, r3, r2
 800a3ac:	4284      	cmp	r4, r0
 800a3ae:	dd00      	ble.n	800a3b2 <_svfprintf_r+0x10e6>
 800a3b0:	0004      	movs	r4, r0
 800a3b2:	2c00      	cmp	r4, #0
 800a3b4:	dd14      	ble.n	800a3e0 <_svfprintf_r+0x1114>
 800a3b6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a3b8:	603d      	str	r5, [r7, #0]
 800a3ba:	191b      	adds	r3, r3, r4
 800a3bc:	932e      	str	r3, [sp, #184]	; 0xb8
 800a3be:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a3c0:	607c      	str	r4, [r7, #4]
 800a3c2:	9308      	str	r3, [sp, #32]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	932d      	str	r3, [sp, #180]	; 0xb4
 800a3c8:	3708      	adds	r7, #8
 800a3ca:	2b07      	cmp	r3, #7
 800a3cc:	dd08      	ble.n	800a3e0 <_svfprintf_r+0x1114>
 800a3ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a3d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a3d2:	aa2c      	add	r2, sp, #176	; 0xb0
 800a3d4:	f001 ff50 	bl	800c278 <__ssprint_r>
 800a3d8:	2800      	cmp	r0, #0
 800a3da:	d000      	beq.n	800a3de <_svfprintf_r+0x1112>
 800a3dc:	e175      	b.n	800a6ca <_svfprintf_r+0x13fe>
 800a3de:	af2f      	add	r7, sp, #188	; 0xbc
 800a3e0:	43e3      	mvns	r3, r4
 800a3e2:	17db      	asrs	r3, r3, #31
 800a3e4:	401c      	ands	r4, r3
 800a3e6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a3e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3ea:	2510      	movs	r5, #16
 800a3ec:	1a9b      	subs	r3, r3, r2
 800a3ee:	1b1c      	subs	r4, r3, r4
 800a3f0:	2c00      	cmp	r4, #0
 800a3f2:	dc00      	bgt.n	800a3f6 <_svfprintf_r+0x112a>
 800a3f4:	e699      	b.n	800a12a <_svfprintf_r+0xe5e>
 800a3f6:	0039      	movs	r1, r7
 800a3f8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a3fa:	488e      	ldr	r0, [pc, #568]	; (800a634 <_svfprintf_r+0x1368>)
 800a3fc:	9308      	str	r3, [sp, #32]
 800a3fe:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a400:	3301      	adds	r3, #1
 800a402:	3108      	adds	r1, #8
 800a404:	6038      	str	r0, [r7, #0]
 800a406:	2c10      	cmp	r4, #16
 800a408:	dc00      	bgt.n	800a40c <_svfprintf_r+0x1140>
 800a40a:	e6c8      	b.n	800a19e <_svfprintf_r+0xed2>
 800a40c:	3210      	adds	r2, #16
 800a40e:	607d      	str	r5, [r7, #4]
 800a410:	922e      	str	r2, [sp, #184]	; 0xb8
 800a412:	932d      	str	r3, [sp, #180]	; 0xb4
 800a414:	2b07      	cmp	r3, #7
 800a416:	dd08      	ble.n	800a42a <_svfprintf_r+0x115e>
 800a418:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a41a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a41c:	aa2c      	add	r2, sp, #176	; 0xb0
 800a41e:	f001 ff2b 	bl	800c278 <__ssprint_r>
 800a422:	2800      	cmp	r0, #0
 800a424:	d000      	beq.n	800a428 <_svfprintf_r+0x115c>
 800a426:	e150      	b.n	800a6ca <_svfprintf_r+0x13fe>
 800a428:	a92f      	add	r1, sp, #188	; 0xbc
 800a42a:	000f      	movs	r7, r1
 800a42c:	3c10      	subs	r4, #16
 800a42e:	e7e2      	b.n	800a3f6 <_svfprintf_r+0x112a>
 800a430:	2010      	movs	r0, #16
 800a432:	1812      	adds	r2, r2, r0
 800a434:	6078      	str	r0, [r7, #4]
 800a436:	922e      	str	r2, [sp, #184]	; 0xb8
 800a438:	932d      	str	r3, [sp, #180]	; 0xb4
 800a43a:	2b07      	cmp	r3, #7
 800a43c:	dd08      	ble.n	800a450 <_svfprintf_r+0x1184>
 800a43e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a440:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a442:	aa2c      	add	r2, sp, #176	; 0xb0
 800a444:	f001 ff18 	bl	800c278 <__ssprint_r>
 800a448:	2800      	cmp	r0, #0
 800a44a:	d000      	beq.n	800a44e <_svfprintf_r+0x1182>
 800a44c:	e13d      	b.n	800a6ca <_svfprintf_r+0x13fe>
 800a44e:	a92f      	add	r1, sp, #188	; 0xbc
 800a450:	000f      	movs	r7, r1
 800a452:	3c10      	subs	r4, #16
 800a454:	e757      	b.n	800a306 <_svfprintf_r+0x103a>
 800a456:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d061      	beq.n	800a520 <_svfprintf_r+0x1254>
 800a45c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a45e:	3b01      	subs	r3, #1
 800a460:	9310      	str	r3, [sp, #64]	; 0x40
 800a462:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a464:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a466:	4694      	mov	ip, r2
 800a468:	603b      	str	r3, [r7, #0]
 800a46a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a46c:	607b      	str	r3, [r7, #4]
 800a46e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a470:	3708      	adds	r7, #8
 800a472:	4463      	add	r3, ip
 800a474:	932e      	str	r3, [sp, #184]	; 0xb8
 800a476:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a478:	9309      	str	r3, [sp, #36]	; 0x24
 800a47a:	3301      	adds	r3, #1
 800a47c:	932d      	str	r3, [sp, #180]	; 0xb4
 800a47e:	2b07      	cmp	r3, #7
 800a480:	dd08      	ble.n	800a494 <_svfprintf_r+0x11c8>
 800a482:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a484:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a486:	aa2c      	add	r2, sp, #176	; 0xb0
 800a488:	f001 fef6 	bl	800c278 <__ssprint_r>
 800a48c:	2800      	cmp	r0, #0
 800a48e:	d000      	beq.n	800a492 <_svfprintf_r+0x11c6>
 800a490:	e11b      	b.n	800a6ca <_svfprintf_r+0x13fe>
 800a492:	af2f      	add	r7, sp, #188	; 0xbc
 800a494:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a496:	9b08      	ldr	r3, [sp, #32]
 800a498:	189b      	adds	r3, r3, r2
 800a49a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a49c:	1b5b      	subs	r3, r3, r5
 800a49e:	7814      	ldrb	r4, [r2, #0]
 800a4a0:	429c      	cmp	r4, r3
 800a4a2:	dd00      	ble.n	800a4a6 <_svfprintf_r+0x11da>
 800a4a4:	001c      	movs	r4, r3
 800a4a6:	2c00      	cmp	r4, #0
 800a4a8:	dd14      	ble.n	800a4d4 <_svfprintf_r+0x1208>
 800a4aa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a4ac:	603d      	str	r5, [r7, #0]
 800a4ae:	18e3      	adds	r3, r4, r3
 800a4b0:	932e      	str	r3, [sp, #184]	; 0xb8
 800a4b2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a4b4:	607c      	str	r4, [r7, #4]
 800a4b6:	9309      	str	r3, [sp, #36]	; 0x24
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	932d      	str	r3, [sp, #180]	; 0xb4
 800a4bc:	3708      	adds	r7, #8
 800a4be:	2b07      	cmp	r3, #7
 800a4c0:	dd08      	ble.n	800a4d4 <_svfprintf_r+0x1208>
 800a4c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a4c6:	aa2c      	add	r2, sp, #176	; 0xb0
 800a4c8:	f001 fed6 	bl	800c278 <__ssprint_r>
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	d000      	beq.n	800a4d2 <_svfprintf_r+0x1206>
 800a4d0:	e0fb      	b.n	800a6ca <_svfprintf_r+0x13fe>
 800a4d2:	af2f      	add	r7, sp, #188	; 0xbc
 800a4d4:	43e3      	mvns	r3, r4
 800a4d6:	17db      	asrs	r3, r3, #31
 800a4d8:	401c      	ands	r4, r3
 800a4da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	1b1c      	subs	r4, r3, r4
 800a4e0:	2c00      	cmp	r4, #0
 800a4e2:	dd19      	ble.n	800a518 <_svfprintf_r+0x124c>
 800a4e4:	0039      	movs	r1, r7
 800a4e6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a4e8:	4852      	ldr	r0, [pc, #328]	; (800a634 <_svfprintf_r+0x1368>)
 800a4ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ec:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	3108      	adds	r1, #8
 800a4f2:	6038      	str	r0, [r7, #0]
 800a4f4:	2c10      	cmp	r4, #16
 800a4f6:	dc1a      	bgt.n	800a52e <_svfprintf_r+0x1262>
 800a4f8:	607c      	str	r4, [r7, #4]
 800a4fa:	1914      	adds	r4, r2, r4
 800a4fc:	000f      	movs	r7, r1
 800a4fe:	942e      	str	r4, [sp, #184]	; 0xb8
 800a500:	932d      	str	r3, [sp, #180]	; 0xb4
 800a502:	2b07      	cmp	r3, #7
 800a504:	dd08      	ble.n	800a518 <_svfprintf_r+0x124c>
 800a506:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a508:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a50a:	aa2c      	add	r2, sp, #176	; 0xb0
 800a50c:	f001 feb4 	bl	800c278 <__ssprint_r>
 800a510:	2800      	cmp	r0, #0
 800a512:	d000      	beq.n	800a516 <_svfprintf_r+0x124a>
 800a514:	e0d9      	b.n	800a6ca <_svfprintf_r+0x13fe>
 800a516:	af2f      	add	r7, sp, #188	; 0xbc
 800a518:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	18ed      	adds	r5, r5, r3
 800a51e:	e711      	b.n	800a344 <_svfprintf_r+0x1078>
 800a520:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a522:	3b01      	subs	r3, #1
 800a524:	9312      	str	r3, [sp, #72]	; 0x48
 800a526:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a528:	3b01      	subs	r3, #1
 800a52a:	9311      	str	r3, [sp, #68]	; 0x44
 800a52c:	e799      	b.n	800a462 <_svfprintf_r+0x1196>
 800a52e:	2010      	movs	r0, #16
 800a530:	1812      	adds	r2, r2, r0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	922e      	str	r2, [sp, #184]	; 0xb8
 800a536:	932d      	str	r3, [sp, #180]	; 0xb4
 800a538:	2b07      	cmp	r3, #7
 800a53a:	dd08      	ble.n	800a54e <_svfprintf_r+0x1282>
 800a53c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a53e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a540:	aa2c      	add	r2, sp, #176	; 0xb0
 800a542:	f001 fe99 	bl	800c278 <__ssprint_r>
 800a546:	2800      	cmp	r0, #0
 800a548:	d000      	beq.n	800a54c <_svfprintf_r+0x1280>
 800a54a:	e0be      	b.n	800a6ca <_svfprintf_r+0x13fe>
 800a54c:	a92f      	add	r1, sp, #188	; 0xbc
 800a54e:	000f      	movs	r7, r1
 800a550:	3c10      	subs	r4, #16
 800a552:	e7c7      	b.n	800a4e4 <_svfprintf_r+0x1218>
 800a554:	003c      	movs	r4, r7
 800a556:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a558:	9919      	ldr	r1, [sp, #100]	; 0x64
 800a55a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a55c:	9309      	str	r3, [sp, #36]	; 0x24
 800a55e:	3101      	adds	r1, #1
 800a560:	3301      	adds	r3, #1
 800a562:	3408      	adds	r4, #8
 800a564:	2a01      	cmp	r2, #1
 800a566:	dc03      	bgt.n	800a570 <_svfprintf_r+0x12a4>
 800a568:	2201      	movs	r2, #1
 800a56a:	4216      	tst	r6, r2
 800a56c:	d100      	bne.n	800a570 <_svfprintf_r+0x12a4>
 800a56e:	e089      	b.n	800a684 <_svfprintf_r+0x13b8>
 800a570:	9a08      	ldr	r2, [sp, #32]
 800a572:	912e      	str	r1, [sp, #184]	; 0xb8
 800a574:	603a      	str	r2, [r7, #0]
 800a576:	2201      	movs	r2, #1
 800a578:	932d      	str	r3, [sp, #180]	; 0xb4
 800a57a:	607a      	str	r2, [r7, #4]
 800a57c:	2b07      	cmp	r3, #7
 800a57e:	dd08      	ble.n	800a592 <_svfprintf_r+0x12c6>
 800a580:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a582:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a584:	aa2c      	add	r2, sp, #176	; 0xb0
 800a586:	f001 fe77 	bl	800c278 <__ssprint_r>
 800a58a:	2800      	cmp	r0, #0
 800a58c:	d000      	beq.n	800a590 <_svfprintf_r+0x12c4>
 800a58e:	e09c      	b.n	800a6ca <_svfprintf_r+0x13fe>
 800a590:	ac2f      	add	r4, sp, #188	; 0xbc
 800a592:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a594:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a596:	4694      	mov	ip, r2
 800a598:	6023      	str	r3, [r4, #0]
 800a59a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a59c:	6063      	str	r3, [r4, #4]
 800a59e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a5a0:	3408      	adds	r4, #8
 800a5a2:	4463      	add	r3, ip
 800a5a4:	932e      	str	r3, [sp, #184]	; 0xb8
 800a5a6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a5a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	932d      	str	r3, [sp, #180]	; 0xb4
 800a5ae:	2b07      	cmp	r3, #7
 800a5b0:	dd08      	ble.n	800a5c4 <_svfprintf_r+0x12f8>
 800a5b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a5b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a5b6:	aa2c      	add	r2, sp, #176	; 0xb0
 800a5b8:	f001 fe5e 	bl	800c278 <__ssprint_r>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	d000      	beq.n	800a5c2 <_svfprintf_r+0x12f6>
 800a5c0:	e083      	b.n	800a6ca <_svfprintf_r+0x13fe>
 800a5c2:	ac2f      	add	r4, sp, #188	; 0xbc
 800a5c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a5ca:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a5cc:	1e5d      	subs	r5, r3, #1
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	f7f5 ff3c 	bl	800044c <__aeabi_dcmpeq>
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	d12f      	bne.n	800a638 <_svfprintf_r+0x136c>
 800a5d8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a5da:	9808      	ldr	r0, [sp, #32]
 800a5dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a5de:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a5e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5e2:	1c59      	adds	r1, r3, #1
 800a5e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5e8:	3001      	adds	r0, #1
 800a5ea:	3b01      	subs	r3, #1
 800a5ec:	189b      	adds	r3, r3, r2
 800a5ee:	6020      	str	r0, [r4, #0]
 800a5f0:	6065      	str	r5, [r4, #4]
 800a5f2:	932e      	str	r3, [sp, #184]	; 0xb8
 800a5f4:	912d      	str	r1, [sp, #180]	; 0xb4
 800a5f6:	3408      	adds	r4, #8
 800a5f8:	2907      	cmp	r1, #7
 800a5fa:	dd07      	ble.n	800a60c <_svfprintf_r+0x1340>
 800a5fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a5fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a600:	aa2c      	add	r2, sp, #176	; 0xb0
 800a602:	f001 fe39 	bl	800c278 <__ssprint_r>
 800a606:	2800      	cmp	r0, #0
 800a608:	d15f      	bne.n	800a6ca <_svfprintf_r+0x13fe>
 800a60a:	ac2f      	add	r4, sp, #188	; 0xbc
 800a60c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a60e:	ab28      	add	r3, sp, #160	; 0xa0
 800a610:	4694      	mov	ip, r2
 800a612:	6023      	str	r3, [r4, #0]
 800a614:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a616:	6063      	str	r3, [r4, #4]
 800a618:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a61a:	4463      	add	r3, ip
 800a61c:	932e      	str	r3, [sp, #184]	; 0xb8
 800a61e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a620:	9308      	str	r3, [sp, #32]
 800a622:	3301      	adds	r3, #1
 800a624:	932d      	str	r3, [sp, #180]	; 0xb4
 800a626:	2b07      	cmp	r3, #7
 800a628:	dd00      	ble.n	800a62c <_svfprintf_r+0x1360>
 800a62a:	e628      	b.n	800a27e <_svfprintf_r+0xfb2>
 800a62c:	3408      	adds	r4, #8
 800a62e:	0027      	movs	r7, r4
 800a630:	e57b      	b.n	800a12a <_svfprintf_r+0xe5e>
 800a632:	46c0      	nop			; (mov r8, r8)
 800a634:	0800e6d4 	.word	0x0800e6d4
 800a638:	2710      	movs	r7, #16
 800a63a:	2d00      	cmp	r5, #0
 800a63c:	dde6      	ble.n	800a60c <_svfprintf_r+0x1340>
 800a63e:	0021      	movs	r1, r4
 800a640:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a642:	4857      	ldr	r0, [pc, #348]	; (800a7a0 <_svfprintf_r+0x14d4>)
 800a644:	9308      	str	r3, [sp, #32]
 800a646:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a648:	3301      	adds	r3, #1
 800a64a:	3108      	adds	r1, #8
 800a64c:	6020      	str	r0, [r4, #0]
 800a64e:	2d10      	cmp	r5, #16
 800a650:	dc07      	bgt.n	800a662 <_svfprintf_r+0x1396>
 800a652:	6065      	str	r5, [r4, #4]
 800a654:	000c      	movs	r4, r1
 800a656:	18ad      	adds	r5, r5, r2
 800a658:	952e      	str	r5, [sp, #184]	; 0xb8
 800a65a:	932d      	str	r3, [sp, #180]	; 0xb4
 800a65c:	2b07      	cmp	r3, #7
 800a65e:	ddd5      	ble.n	800a60c <_svfprintf_r+0x1340>
 800a660:	e7cc      	b.n	800a5fc <_svfprintf_r+0x1330>
 800a662:	3210      	adds	r2, #16
 800a664:	6067      	str	r7, [r4, #4]
 800a666:	922e      	str	r2, [sp, #184]	; 0xb8
 800a668:	932d      	str	r3, [sp, #180]	; 0xb4
 800a66a:	2b07      	cmp	r3, #7
 800a66c:	dd07      	ble.n	800a67e <_svfprintf_r+0x13b2>
 800a66e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a670:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a672:	aa2c      	add	r2, sp, #176	; 0xb0
 800a674:	f001 fe00 	bl	800c278 <__ssprint_r>
 800a678:	2800      	cmp	r0, #0
 800a67a:	d126      	bne.n	800a6ca <_svfprintf_r+0x13fe>
 800a67c:	a92f      	add	r1, sp, #188	; 0xbc
 800a67e:	000c      	movs	r4, r1
 800a680:	3d10      	subs	r5, #16
 800a682:	e7dc      	b.n	800a63e <_svfprintf_r+0x1372>
 800a684:	9808      	ldr	r0, [sp, #32]
 800a686:	912e      	str	r1, [sp, #184]	; 0xb8
 800a688:	c705      	stmia	r7!, {r0, r2}
 800a68a:	932d      	str	r3, [sp, #180]	; 0xb4
 800a68c:	e7e6      	b.n	800a65c <_svfprintf_r+0x1390>
 800a68e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a690:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a692:	2510      	movs	r5, #16
 800a694:	1a9c      	subs	r4, r3, r2
 800a696:	2c00      	cmp	r4, #0
 800a698:	dc00      	bgt.n	800a69c <_svfprintf_r+0x13d0>
 800a69a:	e549      	b.n	800a130 <_svfprintf_r+0xe64>
 800a69c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a69e:	4941      	ldr	r1, [pc, #260]	; (800a7a4 <_svfprintf_r+0x14d8>)
 800a6a0:	9308      	str	r3, [sp, #32]
 800a6a2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	6039      	str	r1, [r7, #0]
 800a6a8:	2c10      	cmp	r4, #16
 800a6aa:	dc19      	bgt.n	800a6e0 <_svfprintf_r+0x1414>
 800a6ac:	607c      	str	r4, [r7, #4]
 800a6ae:	18a4      	adds	r4, r4, r2
 800a6b0:	942e      	str	r4, [sp, #184]	; 0xb8
 800a6b2:	932d      	str	r3, [sp, #180]	; 0xb4
 800a6b4:	2b07      	cmp	r3, #7
 800a6b6:	dc00      	bgt.n	800a6ba <_svfprintf_r+0x13ee>
 800a6b8:	e53a      	b.n	800a130 <_svfprintf_r+0xe64>
 800a6ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a6bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a6be:	aa2c      	add	r2, sp, #176	; 0xb0
 800a6c0:	f001 fdda 	bl	800c278 <__ssprint_r>
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	d100      	bne.n	800a6ca <_svfprintf_r+0x13fe>
 800a6c8:	e532      	b.n	800a130 <_svfprintf_r+0xe64>
 800a6ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d101      	bne.n	800a6d4 <_svfprintf_r+0x1408>
 800a6d0:	f7ff f827 	bl	8009722 <_svfprintf_r+0x456>
 800a6d4:	0019      	movs	r1, r3
 800a6d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a6d8:	f000 ff4e 	bl	800b578 <_free_r>
 800a6dc:	f7ff f821 	bl	8009722 <_svfprintf_r+0x456>
 800a6e0:	3210      	adds	r2, #16
 800a6e2:	607d      	str	r5, [r7, #4]
 800a6e4:	922e      	str	r2, [sp, #184]	; 0xb8
 800a6e6:	932d      	str	r3, [sp, #180]	; 0xb4
 800a6e8:	3708      	adds	r7, #8
 800a6ea:	2b07      	cmp	r3, #7
 800a6ec:	dd07      	ble.n	800a6fe <_svfprintf_r+0x1432>
 800a6ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a6f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a6f2:	aa2c      	add	r2, sp, #176	; 0xb0
 800a6f4:	f001 fdc0 	bl	800c278 <__ssprint_r>
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	d1e6      	bne.n	800a6ca <_svfprintf_r+0x13fe>
 800a6fc:	af2f      	add	r7, sp, #188	; 0xbc
 800a6fe:	3c10      	subs	r4, #16
 800a700:	e7cc      	b.n	800a69c <_svfprintf_r+0x13d0>
 800a702:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a704:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a706:	f000 ff37 	bl	800b578 <_free_r>
 800a70a:	e52b      	b.n	800a164 <_svfprintf_r+0xe98>
 800a70c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a70e:	9306      	str	r3, [sp, #24]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d101      	bne.n	800a718 <_svfprintf_r+0x144c>
 800a714:	f7ff f805 	bl	8009722 <_svfprintf_r+0x456>
 800a718:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a71a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a71c:	aa2c      	add	r2, sp, #176	; 0xb0
 800a71e:	f001 fdab 	bl	800c278 <__ssprint_r>
 800a722:	f7fe fffe 	bl	8009722 <_svfprintf_r+0x456>
 800a726:	0035      	movs	r5, r6
 800a728:	2a00      	cmp	r2, #0
 800a72a:	d101      	bne.n	800a730 <_svfprintf_r+0x1464>
 800a72c:	f7fe ff6d 	bl	800960a <_svfprintf_r+0x33e>
 800a730:	2b01      	cmp	r3, #1
 800a732:	d101      	bne.n	800a738 <_svfprintf_r+0x146c>
 800a734:	f7ff fbe7 	bl	8009f06 <_svfprintf_r+0xc3a>
 800a738:	2b02      	cmp	r3, #2
 800a73a:	d100      	bne.n	800a73e <_svfprintf_r+0x1472>
 800a73c:	e437      	b.n	8009fae <_svfprintf_r+0xce2>
 800a73e:	2607      	movs	r6, #7
 800a740:	ab58      	add	r3, sp, #352	; 0x160
 800a742:	9308      	str	r3, [sp, #32]
 800a744:	9a08      	ldr	r2, [sp, #32]
 800a746:	0013      	movs	r3, r2
 800a748:	3b01      	subs	r3, #1
 800a74a:	9308      	str	r3, [sp, #32]
 800a74c:	9b06      	ldr	r3, [sp, #24]
 800a74e:	9908      	ldr	r1, [sp, #32]
 800a750:	4033      	ands	r3, r6
 800a752:	3330      	adds	r3, #48	; 0x30
 800a754:	700b      	strb	r3, [r1, #0]
 800a756:	9907      	ldr	r1, [sp, #28]
 800a758:	074c      	lsls	r4, r1, #29
 800a75a:	9906      	ldr	r1, [sp, #24]
 800a75c:	08c8      	lsrs	r0, r1, #3
 800a75e:	9907      	ldr	r1, [sp, #28]
 800a760:	4304      	orrs	r4, r0
 800a762:	08c9      	lsrs	r1, r1, #3
 800a764:	9107      	str	r1, [sp, #28]
 800a766:	0021      	movs	r1, r4
 800a768:	9807      	ldr	r0, [sp, #28]
 800a76a:	9406      	str	r4, [sp, #24]
 800a76c:	4301      	orrs	r1, r0
 800a76e:	d1e9      	bne.n	800a744 <_svfprintf_r+0x1478>
 800a770:	07e9      	lsls	r1, r5, #31
 800a772:	d507      	bpl.n	800a784 <_svfprintf_r+0x14b8>
 800a774:	2b30      	cmp	r3, #48	; 0x30
 800a776:	d005      	beq.n	800a784 <_svfprintf_r+0x14b8>
 800a778:	2330      	movs	r3, #48	; 0x30
 800a77a:	9808      	ldr	r0, [sp, #32]
 800a77c:	3801      	subs	r0, #1
 800a77e:	7003      	strb	r3, [r0, #0]
 800a780:	1e93      	subs	r3, r2, #2
 800a782:	9308      	str	r3, [sp, #32]
 800a784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a786:	9a08      	ldr	r2, [sp, #32]
 800a788:	9319      	str	r3, [sp, #100]	; 0x64
 800a78a:	ab58      	add	r3, sp, #352	; 0x160
 800a78c:	1a9b      	subs	r3, r3, r2
 800a78e:	9309      	str	r3, [sp, #36]	; 0x24
 800a790:	2300      	movs	r3, #0
 800a792:	002e      	movs	r6, r5
 800a794:	930c      	str	r3, [sp, #48]	; 0x30
 800a796:	001d      	movs	r5, r3
 800a798:	9310      	str	r3, [sp, #64]	; 0x40
 800a79a:	9311      	str	r3, [sp, #68]	; 0x44
 800a79c:	f7ff f8f7 	bl	800998e <_svfprintf_r+0x6c2>
 800a7a0:	0800e6d4 	.word	0x0800e6d4
 800a7a4:	0800e6c4 	.word	0x0800e6c4

0800a7a8 <register_fini>:
 800a7a8:	4b03      	ldr	r3, [pc, #12]	; (800a7b8 <register_fini+0x10>)
 800a7aa:	b510      	push	{r4, lr}
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d002      	beq.n	800a7b6 <register_fini+0xe>
 800a7b0:	4802      	ldr	r0, [pc, #8]	; (800a7bc <register_fini+0x14>)
 800a7b2:	f000 f805 	bl	800a7c0 <atexit>
 800a7b6:	bd10      	pop	{r4, pc}
 800a7b8:	00000000 	.word	0x00000000
 800a7bc:	0800b4a9 	.word	0x0800b4a9

0800a7c0 <atexit>:
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	b510      	push	{r4, lr}
 800a7c4:	0001      	movs	r1, r0
 800a7c6:	001a      	movs	r2, r3
 800a7c8:	0018      	movs	r0, r3
 800a7ca:	f001 fde1 	bl	800c390 <__register_exitproc>
 800a7ce:	bd10      	pop	{r4, pc}

0800a7d0 <quorem>:
 800a7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7d2:	0006      	movs	r6, r0
 800a7d4:	690b      	ldr	r3, [r1, #16]
 800a7d6:	6932      	ldr	r2, [r6, #16]
 800a7d8:	b087      	sub	sp, #28
 800a7da:	2000      	movs	r0, #0
 800a7dc:	9103      	str	r1, [sp, #12]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	db65      	blt.n	800a8ae <quorem+0xde>
 800a7e2:	3b01      	subs	r3, #1
 800a7e4:	009c      	lsls	r4, r3, #2
 800a7e6:	9300      	str	r3, [sp, #0]
 800a7e8:	000b      	movs	r3, r1
 800a7ea:	3314      	adds	r3, #20
 800a7ec:	9305      	str	r3, [sp, #20]
 800a7ee:	191b      	adds	r3, r3, r4
 800a7f0:	9304      	str	r3, [sp, #16]
 800a7f2:	0033      	movs	r3, r6
 800a7f4:	3314      	adds	r3, #20
 800a7f6:	9302      	str	r3, [sp, #8]
 800a7f8:	191c      	adds	r4, r3, r4
 800a7fa:	9b04      	ldr	r3, [sp, #16]
 800a7fc:	6827      	ldr	r7, [r4, #0]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	0038      	movs	r0, r7
 800a802:	1c5d      	adds	r5, r3, #1
 800a804:	0029      	movs	r1, r5
 800a806:	9301      	str	r3, [sp, #4]
 800a808:	f7f5 fc9a 	bl	8000140 <__udivsi3>
 800a80c:	9001      	str	r0, [sp, #4]
 800a80e:	42af      	cmp	r7, r5
 800a810:	d324      	bcc.n	800a85c <quorem+0x8c>
 800a812:	2500      	movs	r5, #0
 800a814:	46ac      	mov	ip, r5
 800a816:	9802      	ldr	r0, [sp, #8]
 800a818:	9f05      	ldr	r7, [sp, #20]
 800a81a:	cf08      	ldmia	r7!, {r3}
 800a81c:	9a01      	ldr	r2, [sp, #4]
 800a81e:	b299      	uxth	r1, r3
 800a820:	4351      	muls	r1, r2
 800a822:	0c1b      	lsrs	r3, r3, #16
 800a824:	4353      	muls	r3, r2
 800a826:	1949      	adds	r1, r1, r5
 800a828:	0c0a      	lsrs	r2, r1, #16
 800a82a:	189b      	adds	r3, r3, r2
 800a82c:	6802      	ldr	r2, [r0, #0]
 800a82e:	b289      	uxth	r1, r1
 800a830:	b292      	uxth	r2, r2
 800a832:	4462      	add	r2, ip
 800a834:	1a52      	subs	r2, r2, r1
 800a836:	6801      	ldr	r1, [r0, #0]
 800a838:	0c1d      	lsrs	r5, r3, #16
 800a83a:	0c09      	lsrs	r1, r1, #16
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	1acb      	subs	r3, r1, r3
 800a840:	1411      	asrs	r1, r2, #16
 800a842:	185b      	adds	r3, r3, r1
 800a844:	1419      	asrs	r1, r3, #16
 800a846:	b292      	uxth	r2, r2
 800a848:	041b      	lsls	r3, r3, #16
 800a84a:	431a      	orrs	r2, r3
 800a84c:	9b04      	ldr	r3, [sp, #16]
 800a84e:	468c      	mov	ip, r1
 800a850:	c004      	stmia	r0!, {r2}
 800a852:	42bb      	cmp	r3, r7
 800a854:	d2e1      	bcs.n	800a81a <quorem+0x4a>
 800a856:	6823      	ldr	r3, [r4, #0]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d030      	beq.n	800a8be <quorem+0xee>
 800a85c:	0030      	movs	r0, r6
 800a85e:	9903      	ldr	r1, [sp, #12]
 800a860:	f001 fb9a 	bl	800bf98 <__mcmp>
 800a864:	2800      	cmp	r0, #0
 800a866:	db21      	blt.n	800a8ac <quorem+0xdc>
 800a868:	0030      	movs	r0, r6
 800a86a:	2400      	movs	r4, #0
 800a86c:	9b01      	ldr	r3, [sp, #4]
 800a86e:	9903      	ldr	r1, [sp, #12]
 800a870:	3301      	adds	r3, #1
 800a872:	9301      	str	r3, [sp, #4]
 800a874:	3014      	adds	r0, #20
 800a876:	3114      	adds	r1, #20
 800a878:	6803      	ldr	r3, [r0, #0]
 800a87a:	c920      	ldmia	r1!, {r5}
 800a87c:	b29a      	uxth	r2, r3
 800a87e:	1914      	adds	r4, r2, r4
 800a880:	b2aa      	uxth	r2, r5
 800a882:	1aa2      	subs	r2, r4, r2
 800a884:	0c1b      	lsrs	r3, r3, #16
 800a886:	0c2d      	lsrs	r5, r5, #16
 800a888:	1414      	asrs	r4, r2, #16
 800a88a:	1b5b      	subs	r3, r3, r5
 800a88c:	191b      	adds	r3, r3, r4
 800a88e:	141c      	asrs	r4, r3, #16
 800a890:	b292      	uxth	r2, r2
 800a892:	041b      	lsls	r3, r3, #16
 800a894:	4313      	orrs	r3, r2
 800a896:	c008      	stmia	r0!, {r3}
 800a898:	9b04      	ldr	r3, [sp, #16]
 800a89a:	428b      	cmp	r3, r1
 800a89c:	d2ec      	bcs.n	800a878 <quorem+0xa8>
 800a89e:	9b00      	ldr	r3, [sp, #0]
 800a8a0:	9a02      	ldr	r2, [sp, #8]
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	18d3      	adds	r3, r2, r3
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	2a00      	cmp	r2, #0
 800a8aa:	d015      	beq.n	800a8d8 <quorem+0x108>
 800a8ac:	9801      	ldr	r0, [sp, #4]
 800a8ae:	b007      	add	sp, #28
 800a8b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8b2:	6823      	ldr	r3, [r4, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d106      	bne.n	800a8c6 <quorem+0xf6>
 800a8b8:	9b00      	ldr	r3, [sp, #0]
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	9300      	str	r3, [sp, #0]
 800a8be:	9b02      	ldr	r3, [sp, #8]
 800a8c0:	3c04      	subs	r4, #4
 800a8c2:	42a3      	cmp	r3, r4
 800a8c4:	d3f5      	bcc.n	800a8b2 <quorem+0xe2>
 800a8c6:	9b00      	ldr	r3, [sp, #0]
 800a8c8:	6133      	str	r3, [r6, #16]
 800a8ca:	e7c7      	b.n	800a85c <quorem+0x8c>
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	2a00      	cmp	r2, #0
 800a8d0:	d106      	bne.n	800a8e0 <quorem+0x110>
 800a8d2:	9a00      	ldr	r2, [sp, #0]
 800a8d4:	3a01      	subs	r2, #1
 800a8d6:	9200      	str	r2, [sp, #0]
 800a8d8:	9a02      	ldr	r2, [sp, #8]
 800a8da:	3b04      	subs	r3, #4
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d3f5      	bcc.n	800a8cc <quorem+0xfc>
 800a8e0:	9b00      	ldr	r3, [sp, #0]
 800a8e2:	6133      	str	r3, [r6, #16]
 800a8e4:	e7e2      	b.n	800a8ac <quorem+0xdc>
	...

0800a8e8 <_dtoa_r>:
 800a8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8ea:	0014      	movs	r4, r2
 800a8ec:	001d      	movs	r5, r3
 800a8ee:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800a8f0:	b09d      	sub	sp, #116	; 0x74
 800a8f2:	9408      	str	r4, [sp, #32]
 800a8f4:	9509      	str	r5, [sp, #36]	; 0x24
 800a8f6:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800a8f8:	9004      	str	r0, [sp, #16]
 800a8fa:	2900      	cmp	r1, #0
 800a8fc:	d009      	beq.n	800a912 <_dtoa_r+0x2a>
 800a8fe:	2301      	movs	r3, #1
 800a900:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a902:	4093      	lsls	r3, r2
 800a904:	604a      	str	r2, [r1, #4]
 800a906:	608b      	str	r3, [r1, #8]
 800a908:	f001 f93a 	bl	800bb80 <_Bfree>
 800a90c:	2300      	movs	r3, #0
 800a90e:	9a04      	ldr	r2, [sp, #16]
 800a910:	6413      	str	r3, [r2, #64]	; 0x40
 800a912:	2d00      	cmp	r5, #0
 800a914:	da1e      	bge.n	800a954 <_dtoa_r+0x6c>
 800a916:	2301      	movs	r3, #1
 800a918:	6033      	str	r3, [r6, #0]
 800a91a:	006b      	lsls	r3, r5, #1
 800a91c:	085b      	lsrs	r3, r3, #1
 800a91e:	9309      	str	r3, [sp, #36]	; 0x24
 800a920:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a922:	4bb6      	ldr	r3, [pc, #728]	; (800abfc <_dtoa_r+0x314>)
 800a924:	4ab5      	ldr	r2, [pc, #724]	; (800abfc <_dtoa_r+0x314>)
 800a926:	403b      	ands	r3, r7
 800a928:	4293      	cmp	r3, r2
 800a92a:	d116      	bne.n	800a95a <_dtoa_r+0x72>
 800a92c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a92e:	4bb4      	ldr	r3, [pc, #720]	; (800ac00 <_dtoa_r+0x318>)
 800a930:	6013      	str	r3, [r2, #0]
 800a932:	033a      	lsls	r2, r7, #12
 800a934:	0b12      	lsrs	r2, r2, #12
 800a936:	4314      	orrs	r4, r2
 800a938:	d101      	bne.n	800a93e <_dtoa_r+0x56>
 800a93a:	f000 fd9e 	bl	800b47a <_dtoa_r+0xb92>
 800a93e:	48b1      	ldr	r0, [pc, #708]	; (800ac04 <_dtoa_r+0x31c>)
 800a940:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a942:	9006      	str	r0, [sp, #24]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d002      	beq.n	800a94e <_dtoa_r+0x66>
 800a948:	4baf      	ldr	r3, [pc, #700]	; (800ac08 <_dtoa_r+0x320>)
 800a94a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a94c:	6013      	str	r3, [r2, #0]
 800a94e:	9806      	ldr	r0, [sp, #24]
 800a950:	b01d      	add	sp, #116	; 0x74
 800a952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a954:	2300      	movs	r3, #0
 800a956:	6033      	str	r3, [r6, #0]
 800a958:	e7e2      	b.n	800a920 <_dtoa_r+0x38>
 800a95a:	9a08      	ldr	r2, [sp, #32]
 800a95c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a95e:	9210      	str	r2, [sp, #64]	; 0x40
 800a960:	9311      	str	r3, [sp, #68]	; 0x44
 800a962:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a964:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a966:	2200      	movs	r2, #0
 800a968:	2300      	movs	r3, #0
 800a96a:	f7f5 fd6f 	bl	800044c <__aeabi_dcmpeq>
 800a96e:	1e06      	subs	r6, r0, #0
 800a970:	d009      	beq.n	800a986 <_dtoa_r+0x9e>
 800a972:	2301      	movs	r3, #1
 800a974:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a976:	6013      	str	r3, [r2, #0]
 800a978:	4ba4      	ldr	r3, [pc, #656]	; (800ac0c <_dtoa_r+0x324>)
 800a97a:	9306      	str	r3, [sp, #24]
 800a97c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d0e5      	beq.n	800a94e <_dtoa_r+0x66>
 800a982:	4ba3      	ldr	r3, [pc, #652]	; (800ac10 <_dtoa_r+0x328>)
 800a984:	e7e1      	b.n	800a94a <_dtoa_r+0x62>
 800a986:	ab1a      	add	r3, sp, #104	; 0x68
 800a988:	9301      	str	r3, [sp, #4]
 800a98a:	ab1b      	add	r3, sp, #108	; 0x6c
 800a98c:	9300      	str	r3, [sp, #0]
 800a98e:	9804      	ldr	r0, [sp, #16]
 800a990:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a992:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a994:	f001 fbb4 	bl	800c100 <__d2b>
 800a998:	007b      	lsls	r3, r7, #1
 800a99a:	9005      	str	r0, [sp, #20]
 800a99c:	0d5b      	lsrs	r3, r3, #21
 800a99e:	d100      	bne.n	800a9a2 <_dtoa_r+0xba>
 800a9a0:	e07c      	b.n	800aa9c <_dtoa_r+0x1b4>
 800a9a2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a9a4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a9a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a9a8:	4c9a      	ldr	r4, [pc, #616]	; (800ac14 <_dtoa_r+0x32c>)
 800a9aa:	0312      	lsls	r2, r2, #12
 800a9ac:	0b12      	lsrs	r2, r2, #12
 800a9ae:	4314      	orrs	r4, r2
 800a9b0:	0021      	movs	r1, r4
 800a9b2:	4a99      	ldr	r2, [pc, #612]	; (800ac18 <_dtoa_r+0x330>)
 800a9b4:	9617      	str	r6, [sp, #92]	; 0x5c
 800a9b6:	189f      	adds	r7, r3, r2
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	4b98      	ldr	r3, [pc, #608]	; (800ac1c <_dtoa_r+0x334>)
 800a9bc:	f7f7 fa3c 	bl	8001e38 <__aeabi_dsub>
 800a9c0:	4a97      	ldr	r2, [pc, #604]	; (800ac20 <_dtoa_r+0x338>)
 800a9c2:	4b98      	ldr	r3, [pc, #608]	; (800ac24 <_dtoa_r+0x33c>)
 800a9c4:	f7f6 ffcc 	bl	8001960 <__aeabi_dmul>
 800a9c8:	4a97      	ldr	r2, [pc, #604]	; (800ac28 <_dtoa_r+0x340>)
 800a9ca:	4b98      	ldr	r3, [pc, #608]	; (800ac2c <_dtoa_r+0x344>)
 800a9cc:	f7f6 f88a 	bl	8000ae4 <__aeabi_dadd>
 800a9d0:	0004      	movs	r4, r0
 800a9d2:	0038      	movs	r0, r7
 800a9d4:	000d      	movs	r5, r1
 800a9d6:	f7f7 fe15 	bl	8002604 <__aeabi_i2d>
 800a9da:	4a95      	ldr	r2, [pc, #596]	; (800ac30 <_dtoa_r+0x348>)
 800a9dc:	4b95      	ldr	r3, [pc, #596]	; (800ac34 <_dtoa_r+0x34c>)
 800a9de:	f7f6 ffbf 	bl	8001960 <__aeabi_dmul>
 800a9e2:	0002      	movs	r2, r0
 800a9e4:	000b      	movs	r3, r1
 800a9e6:	0020      	movs	r0, r4
 800a9e8:	0029      	movs	r1, r5
 800a9ea:	f7f6 f87b 	bl	8000ae4 <__aeabi_dadd>
 800a9ee:	0004      	movs	r4, r0
 800a9f0:	000d      	movs	r5, r1
 800a9f2:	f7f7 fdd1 	bl	8002598 <__aeabi_d2iz>
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	9003      	str	r0, [sp, #12]
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	0020      	movs	r0, r4
 800a9fe:	0029      	movs	r1, r5
 800aa00:	f7f5 fd2a 	bl	8000458 <__aeabi_dcmplt>
 800aa04:	2800      	cmp	r0, #0
 800aa06:	d00b      	beq.n	800aa20 <_dtoa_r+0x138>
 800aa08:	9803      	ldr	r0, [sp, #12]
 800aa0a:	f7f7 fdfb 	bl	8002604 <__aeabi_i2d>
 800aa0e:	002b      	movs	r3, r5
 800aa10:	0022      	movs	r2, r4
 800aa12:	f7f5 fd1b 	bl	800044c <__aeabi_dcmpeq>
 800aa16:	4243      	negs	r3, r0
 800aa18:	4158      	adcs	r0, r3
 800aa1a:	9b03      	ldr	r3, [sp, #12]
 800aa1c:	1a1b      	subs	r3, r3, r0
 800aa1e:	9303      	str	r3, [sp, #12]
 800aa20:	2301      	movs	r3, #1
 800aa22:	9315      	str	r3, [sp, #84]	; 0x54
 800aa24:	9b03      	ldr	r3, [sp, #12]
 800aa26:	2b16      	cmp	r3, #22
 800aa28:	d80f      	bhi.n	800aa4a <_dtoa_r+0x162>
 800aa2a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800aa2c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800aa2e:	00da      	lsls	r2, r3, #3
 800aa30:	4b81      	ldr	r3, [pc, #516]	; (800ac38 <_dtoa_r+0x350>)
 800aa32:	189b      	adds	r3, r3, r2
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	f7f5 fd0e 	bl	8000458 <__aeabi_dcmplt>
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	d049      	beq.n	800aad4 <_dtoa_r+0x1ec>
 800aa40:	9b03      	ldr	r3, [sp, #12]
 800aa42:	3b01      	subs	r3, #1
 800aa44:	9303      	str	r3, [sp, #12]
 800aa46:	2300      	movs	r3, #0
 800aa48:	9315      	str	r3, [sp, #84]	; 0x54
 800aa4a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800aa4c:	1bdf      	subs	r7, r3, r7
 800aa4e:	2300      	movs	r3, #0
 800aa50:	930a      	str	r3, [sp, #40]	; 0x28
 800aa52:	003b      	movs	r3, r7
 800aa54:	3b01      	subs	r3, #1
 800aa56:	930c      	str	r3, [sp, #48]	; 0x30
 800aa58:	d504      	bpl.n	800aa64 <_dtoa_r+0x17c>
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	1bdb      	subs	r3, r3, r7
 800aa5e:	930a      	str	r3, [sp, #40]	; 0x28
 800aa60:	2300      	movs	r3, #0
 800aa62:	930c      	str	r3, [sp, #48]	; 0x30
 800aa64:	9b03      	ldr	r3, [sp, #12]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	db36      	blt.n	800aad8 <_dtoa_r+0x1f0>
 800aa6a:	9a03      	ldr	r2, [sp, #12]
 800aa6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa6e:	4694      	mov	ip, r2
 800aa70:	4463      	add	r3, ip
 800aa72:	930c      	str	r3, [sp, #48]	; 0x30
 800aa74:	2300      	movs	r3, #0
 800aa76:	9214      	str	r2, [sp, #80]	; 0x50
 800aa78:	930d      	str	r3, [sp, #52]	; 0x34
 800aa7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa7c:	2401      	movs	r4, #1
 800aa7e:	2b09      	cmp	r3, #9
 800aa80:	d867      	bhi.n	800ab52 <_dtoa_r+0x26a>
 800aa82:	2b05      	cmp	r3, #5
 800aa84:	dd02      	ble.n	800aa8c <_dtoa_r+0x1a4>
 800aa86:	2400      	movs	r4, #0
 800aa88:	3b04      	subs	r3, #4
 800aa8a:	9322      	str	r3, [sp, #136]	; 0x88
 800aa8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa8e:	1e98      	subs	r0, r3, #2
 800aa90:	2803      	cmp	r0, #3
 800aa92:	d867      	bhi.n	800ab64 <_dtoa_r+0x27c>
 800aa94:	f7f5 fb40 	bl	8000118 <__gnu_thumb1_case_uqi>
 800aa98:	5b363829 	.word	0x5b363829
 800aa9c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800aa9e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800aaa0:	189e      	adds	r6, r3, r2
 800aaa2:	4b66      	ldr	r3, [pc, #408]	; (800ac3c <_dtoa_r+0x354>)
 800aaa4:	18f2      	adds	r2, r6, r3
 800aaa6:	2a20      	cmp	r2, #32
 800aaa8:	dd0f      	ble.n	800aaca <_dtoa_r+0x1e2>
 800aaaa:	2340      	movs	r3, #64	; 0x40
 800aaac:	0038      	movs	r0, r7
 800aaae:	1a9b      	subs	r3, r3, r2
 800aab0:	4098      	lsls	r0, r3
 800aab2:	4b63      	ldr	r3, [pc, #396]	; (800ac40 <_dtoa_r+0x358>)
 800aab4:	18f3      	adds	r3, r6, r3
 800aab6:	40dc      	lsrs	r4, r3
 800aab8:	4320      	orrs	r0, r4
 800aaba:	f7f7 fdd3 	bl	8002664 <__aeabi_ui2d>
 800aabe:	2301      	movs	r3, #1
 800aac0:	4c60      	ldr	r4, [pc, #384]	; (800ac44 <_dtoa_r+0x35c>)
 800aac2:	1e77      	subs	r7, r6, #1
 800aac4:	1909      	adds	r1, r1, r4
 800aac6:	9317      	str	r3, [sp, #92]	; 0x5c
 800aac8:	e776      	b.n	800a9b8 <_dtoa_r+0xd0>
 800aaca:	2320      	movs	r3, #32
 800aacc:	0020      	movs	r0, r4
 800aace:	1a9b      	subs	r3, r3, r2
 800aad0:	4098      	lsls	r0, r3
 800aad2:	e7f2      	b.n	800aaba <_dtoa_r+0x1d2>
 800aad4:	9015      	str	r0, [sp, #84]	; 0x54
 800aad6:	e7b8      	b.n	800aa4a <_dtoa_r+0x162>
 800aad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aada:	9a03      	ldr	r2, [sp, #12]
 800aadc:	1a9b      	subs	r3, r3, r2
 800aade:	930a      	str	r3, [sp, #40]	; 0x28
 800aae0:	4253      	negs	r3, r2
 800aae2:	930d      	str	r3, [sp, #52]	; 0x34
 800aae4:	2300      	movs	r3, #0
 800aae6:	9314      	str	r3, [sp, #80]	; 0x50
 800aae8:	e7c7      	b.n	800aa7a <_dtoa_r+0x192>
 800aaea:	2300      	movs	r3, #0
 800aaec:	930f      	str	r3, [sp, #60]	; 0x3c
 800aaee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aaf0:	930b      	str	r3, [sp, #44]	; 0x2c
 800aaf2:	9307      	str	r3, [sp, #28]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	dc13      	bgt.n	800ab20 <_dtoa_r+0x238>
 800aaf8:	2301      	movs	r3, #1
 800aafa:	001a      	movs	r2, r3
 800aafc:	930b      	str	r3, [sp, #44]	; 0x2c
 800aafe:	9307      	str	r3, [sp, #28]
 800ab00:	9223      	str	r2, [sp, #140]	; 0x8c
 800ab02:	e00d      	b.n	800ab20 <_dtoa_r+0x238>
 800ab04:	2301      	movs	r3, #1
 800ab06:	e7f1      	b.n	800aaec <_dtoa_r+0x204>
 800ab08:	2300      	movs	r3, #0
 800ab0a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800ab0c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab0e:	4694      	mov	ip, r2
 800ab10:	9b03      	ldr	r3, [sp, #12]
 800ab12:	4463      	add	r3, ip
 800ab14:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab16:	3301      	adds	r3, #1
 800ab18:	9307      	str	r3, [sp, #28]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	dc00      	bgt.n	800ab20 <_dtoa_r+0x238>
 800ab1e:	2301      	movs	r3, #1
 800ab20:	2200      	movs	r2, #0
 800ab22:	9904      	ldr	r1, [sp, #16]
 800ab24:	644a      	str	r2, [r1, #68]	; 0x44
 800ab26:	3204      	adds	r2, #4
 800ab28:	0010      	movs	r0, r2
 800ab2a:	9904      	ldr	r1, [sp, #16]
 800ab2c:	3014      	adds	r0, #20
 800ab2e:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800ab30:	4298      	cmp	r0, r3
 800ab32:	d91b      	bls.n	800ab6c <_dtoa_r+0x284>
 800ab34:	9804      	ldr	r0, [sp, #16]
 800ab36:	f000 fffb 	bl	800bb30 <_Balloc>
 800ab3a:	9006      	str	r0, [sp, #24]
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	d11a      	bne.n	800ab76 <_dtoa_r+0x28e>
 800ab40:	21d5      	movs	r1, #213	; 0xd5
 800ab42:	0002      	movs	r2, r0
 800ab44:	4b40      	ldr	r3, [pc, #256]	; (800ac48 <_dtoa_r+0x360>)
 800ab46:	0049      	lsls	r1, r1, #1
 800ab48:	4840      	ldr	r0, [pc, #256]	; (800ac4c <_dtoa_r+0x364>)
 800ab4a:	f001 fc63 	bl	800c414 <__assert_func>
 800ab4e:	2301      	movs	r3, #1
 800ab50:	e7db      	b.n	800ab0a <_dtoa_r+0x222>
 800ab52:	2300      	movs	r3, #0
 800ab54:	940f      	str	r4, [sp, #60]	; 0x3c
 800ab56:	9322      	str	r3, [sp, #136]	; 0x88
 800ab58:	3b01      	subs	r3, #1
 800ab5a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab5c:	9307      	str	r3, [sp, #28]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	3313      	adds	r3, #19
 800ab62:	e7cd      	b.n	800ab00 <_dtoa_r+0x218>
 800ab64:	2301      	movs	r3, #1
 800ab66:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab68:	3b02      	subs	r3, #2
 800ab6a:	e7f6      	b.n	800ab5a <_dtoa_r+0x272>
 800ab6c:	9804      	ldr	r0, [sp, #16]
 800ab6e:	3101      	adds	r1, #1
 800ab70:	6441      	str	r1, [r0, #68]	; 0x44
 800ab72:	0052      	lsls	r2, r2, #1
 800ab74:	e7d8      	b.n	800ab28 <_dtoa_r+0x240>
 800ab76:	9b04      	ldr	r3, [sp, #16]
 800ab78:	9a06      	ldr	r2, [sp, #24]
 800ab7a:	641a      	str	r2, [r3, #64]	; 0x40
 800ab7c:	9b07      	ldr	r3, [sp, #28]
 800ab7e:	2b0e      	cmp	r3, #14
 800ab80:	d900      	bls.n	800ab84 <_dtoa_r+0x29c>
 800ab82:	e0de      	b.n	800ad42 <_dtoa_r+0x45a>
 800ab84:	2c00      	cmp	r4, #0
 800ab86:	d100      	bne.n	800ab8a <_dtoa_r+0x2a2>
 800ab88:	e0db      	b.n	800ad42 <_dtoa_r+0x45a>
 800ab8a:	9b03      	ldr	r3, [sp, #12]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	dd61      	ble.n	800ac54 <_dtoa_r+0x36c>
 800ab90:	001a      	movs	r2, r3
 800ab92:	210f      	movs	r1, #15
 800ab94:	4b28      	ldr	r3, [pc, #160]	; (800ac38 <_dtoa_r+0x350>)
 800ab96:	400a      	ands	r2, r1
 800ab98:	00d2      	lsls	r2, r2, #3
 800ab9a:	189b      	adds	r3, r3, r2
 800ab9c:	681d      	ldr	r5, [r3, #0]
 800ab9e:	685e      	ldr	r6, [r3, #4]
 800aba0:	9b03      	ldr	r3, [sp, #12]
 800aba2:	2702      	movs	r7, #2
 800aba4:	111c      	asrs	r4, r3, #4
 800aba6:	05db      	lsls	r3, r3, #23
 800aba8:	d50a      	bpl.n	800abc0 <_dtoa_r+0x2d8>
 800abaa:	4b29      	ldr	r3, [pc, #164]	; (800ac50 <_dtoa_r+0x368>)
 800abac:	400c      	ands	r4, r1
 800abae:	6a1a      	ldr	r2, [r3, #32]
 800abb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800abb4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800abb6:	f7f6 fad1 	bl	800115c <__aeabi_ddiv>
 800abba:	9008      	str	r0, [sp, #32]
 800abbc:	9109      	str	r1, [sp, #36]	; 0x24
 800abbe:	3701      	adds	r7, #1
 800abc0:	4b23      	ldr	r3, [pc, #140]	; (800ac50 <_dtoa_r+0x368>)
 800abc2:	930e      	str	r3, [sp, #56]	; 0x38
 800abc4:	2c00      	cmp	r4, #0
 800abc6:	d108      	bne.n	800abda <_dtoa_r+0x2f2>
 800abc8:	9808      	ldr	r0, [sp, #32]
 800abca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800abcc:	002a      	movs	r2, r5
 800abce:	0033      	movs	r3, r6
 800abd0:	f7f6 fac4 	bl	800115c <__aeabi_ddiv>
 800abd4:	9008      	str	r0, [sp, #32]
 800abd6:	9109      	str	r1, [sp, #36]	; 0x24
 800abd8:	e057      	b.n	800ac8a <_dtoa_r+0x3a2>
 800abda:	2301      	movs	r3, #1
 800abdc:	421c      	tst	r4, r3
 800abde:	d009      	beq.n	800abf4 <_dtoa_r+0x30c>
 800abe0:	18ff      	adds	r7, r7, r3
 800abe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abe4:	0028      	movs	r0, r5
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	0031      	movs	r1, r6
 800abec:	f7f6 feb8 	bl	8001960 <__aeabi_dmul>
 800abf0:	0005      	movs	r5, r0
 800abf2:	000e      	movs	r6, r1
 800abf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abf6:	1064      	asrs	r4, r4, #1
 800abf8:	3308      	adds	r3, #8
 800abfa:	e7e2      	b.n	800abc2 <_dtoa_r+0x2da>
 800abfc:	7ff00000 	.word	0x7ff00000
 800ac00:	0000270f 	.word	0x0000270f
 800ac04:	0800e7e5 	.word	0x0800e7e5
 800ac08:	0800e7e8 	.word	0x0800e7e8
 800ac0c:	0800e6c2 	.word	0x0800e6c2
 800ac10:	0800e6c3 	.word	0x0800e6c3
 800ac14:	3ff00000 	.word	0x3ff00000
 800ac18:	fffffc01 	.word	0xfffffc01
 800ac1c:	3ff80000 	.word	0x3ff80000
 800ac20:	636f4361 	.word	0x636f4361
 800ac24:	3fd287a7 	.word	0x3fd287a7
 800ac28:	8b60c8b3 	.word	0x8b60c8b3
 800ac2c:	3fc68a28 	.word	0x3fc68a28
 800ac30:	509f79fb 	.word	0x509f79fb
 800ac34:	3fd34413 	.word	0x3fd34413
 800ac38:	0800e8e8 	.word	0x0800e8e8
 800ac3c:	00000432 	.word	0x00000432
 800ac40:	00000412 	.word	0x00000412
 800ac44:	fe100000 	.word	0xfe100000
 800ac48:	0800e7f2 	.word	0x0800e7f2
 800ac4c:	0800e803 	.word	0x0800e803
 800ac50:	0800e8c0 	.word	0x0800e8c0
 800ac54:	9b03      	ldr	r3, [sp, #12]
 800ac56:	2702      	movs	r7, #2
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d016      	beq.n	800ac8a <_dtoa_r+0x3a2>
 800ac5c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ac5e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ac60:	425c      	negs	r4, r3
 800ac62:	230f      	movs	r3, #15
 800ac64:	4ad4      	ldr	r2, [pc, #848]	; (800afb8 <_dtoa_r+0x6d0>)
 800ac66:	4023      	ands	r3, r4
 800ac68:	00db      	lsls	r3, r3, #3
 800ac6a:	18d3      	adds	r3, r2, r3
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	f7f6 fe76 	bl	8001960 <__aeabi_dmul>
 800ac74:	2601      	movs	r6, #1
 800ac76:	2300      	movs	r3, #0
 800ac78:	9008      	str	r0, [sp, #32]
 800ac7a:	9109      	str	r1, [sp, #36]	; 0x24
 800ac7c:	4dcf      	ldr	r5, [pc, #828]	; (800afbc <_dtoa_r+0x6d4>)
 800ac7e:	1124      	asrs	r4, r4, #4
 800ac80:	2c00      	cmp	r4, #0
 800ac82:	d000      	beq.n	800ac86 <_dtoa_r+0x39e>
 800ac84:	e08d      	b.n	800ada2 <_dtoa_r+0x4ba>
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d1a4      	bne.n	800abd4 <_dtoa_r+0x2ec>
 800ac8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d100      	bne.n	800ac92 <_dtoa_r+0x3aa>
 800ac90:	e092      	b.n	800adb8 <_dtoa_r+0x4d0>
 800ac92:	9c08      	ldr	r4, [sp, #32]
 800ac94:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ac96:	2200      	movs	r2, #0
 800ac98:	0020      	movs	r0, r4
 800ac9a:	0029      	movs	r1, r5
 800ac9c:	4bc8      	ldr	r3, [pc, #800]	; (800afc0 <_dtoa_r+0x6d8>)
 800ac9e:	f7f5 fbdb 	bl	8000458 <__aeabi_dcmplt>
 800aca2:	2800      	cmp	r0, #0
 800aca4:	d100      	bne.n	800aca8 <_dtoa_r+0x3c0>
 800aca6:	e087      	b.n	800adb8 <_dtoa_r+0x4d0>
 800aca8:	9b07      	ldr	r3, [sp, #28]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d100      	bne.n	800acb0 <_dtoa_r+0x3c8>
 800acae:	e083      	b.n	800adb8 <_dtoa_r+0x4d0>
 800acb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	dd41      	ble.n	800ad3a <_dtoa_r+0x452>
 800acb6:	9b03      	ldr	r3, [sp, #12]
 800acb8:	2200      	movs	r2, #0
 800acba:	3b01      	subs	r3, #1
 800acbc:	930e      	str	r3, [sp, #56]	; 0x38
 800acbe:	0020      	movs	r0, r4
 800acc0:	0029      	movs	r1, r5
 800acc2:	4bc0      	ldr	r3, [pc, #768]	; (800afc4 <_dtoa_r+0x6dc>)
 800acc4:	f7f6 fe4c 	bl	8001960 <__aeabi_dmul>
 800acc8:	9008      	str	r0, [sp, #32]
 800acca:	9109      	str	r1, [sp, #36]	; 0x24
 800accc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800acce:	3701      	adds	r7, #1
 800acd0:	0038      	movs	r0, r7
 800acd2:	9c08      	ldr	r4, [sp, #32]
 800acd4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800acd6:	f7f7 fc95 	bl	8002604 <__aeabi_i2d>
 800acda:	0022      	movs	r2, r4
 800acdc:	002b      	movs	r3, r5
 800acde:	f7f6 fe3f 	bl	8001960 <__aeabi_dmul>
 800ace2:	2200      	movs	r2, #0
 800ace4:	4bb8      	ldr	r3, [pc, #736]	; (800afc8 <_dtoa_r+0x6e0>)
 800ace6:	f7f5 fefd 	bl	8000ae4 <__aeabi_dadd>
 800acea:	9012      	str	r0, [sp, #72]	; 0x48
 800acec:	9113      	str	r1, [sp, #76]	; 0x4c
 800acee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800acf0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800acf2:	9208      	str	r2, [sp, #32]
 800acf4:	9309      	str	r3, [sp, #36]	; 0x24
 800acf6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800acf8:	4ab4      	ldr	r2, [pc, #720]	; (800afcc <_dtoa_r+0x6e4>)
 800acfa:	189f      	adds	r7, r3, r2
 800acfc:	9709      	str	r7, [sp, #36]	; 0x24
 800acfe:	2e00      	cmp	r6, #0
 800ad00:	d15e      	bne.n	800adc0 <_dtoa_r+0x4d8>
 800ad02:	2200      	movs	r2, #0
 800ad04:	0020      	movs	r0, r4
 800ad06:	0029      	movs	r1, r5
 800ad08:	4bb1      	ldr	r3, [pc, #708]	; (800afd0 <_dtoa_r+0x6e8>)
 800ad0a:	f7f7 f895 	bl	8001e38 <__aeabi_dsub>
 800ad0e:	003b      	movs	r3, r7
 800ad10:	9a08      	ldr	r2, [sp, #32]
 800ad12:	0004      	movs	r4, r0
 800ad14:	000d      	movs	r5, r1
 800ad16:	f7f5 fbb3 	bl	8000480 <__aeabi_dcmpgt>
 800ad1a:	2800      	cmp	r0, #0
 800ad1c:	d000      	beq.n	800ad20 <_dtoa_r+0x438>
 800ad1e:	e2a3      	b.n	800b268 <_dtoa_r+0x980>
 800ad20:	48ac      	ldr	r0, [pc, #688]	; (800afd4 <_dtoa_r+0x6ec>)
 800ad22:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ad24:	4684      	mov	ip, r0
 800ad26:	4461      	add	r1, ip
 800ad28:	000b      	movs	r3, r1
 800ad2a:	0020      	movs	r0, r4
 800ad2c:	0029      	movs	r1, r5
 800ad2e:	9a08      	ldr	r2, [sp, #32]
 800ad30:	f7f5 fb92 	bl	8000458 <__aeabi_dcmplt>
 800ad34:	2800      	cmp	r0, #0
 800ad36:	d000      	beq.n	800ad3a <_dtoa_r+0x452>
 800ad38:	e294      	b.n	800b264 <_dtoa_r+0x97c>
 800ad3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad3c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800ad3e:	9308      	str	r3, [sp, #32]
 800ad40:	9409      	str	r4, [sp, #36]	; 0x24
 800ad42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	da00      	bge.n	800ad4a <_dtoa_r+0x462>
 800ad48:	e16a      	b.n	800b020 <_dtoa_r+0x738>
 800ad4a:	9a03      	ldr	r2, [sp, #12]
 800ad4c:	2a0e      	cmp	r2, #14
 800ad4e:	dd00      	ble.n	800ad52 <_dtoa_r+0x46a>
 800ad50:	e166      	b.n	800b020 <_dtoa_r+0x738>
 800ad52:	4b99      	ldr	r3, [pc, #612]	; (800afb8 <_dtoa_r+0x6d0>)
 800ad54:	00d2      	lsls	r2, r2, #3
 800ad56:	189b      	adds	r3, r3, r2
 800ad58:	681e      	ldr	r6, [r3, #0]
 800ad5a:	685f      	ldr	r7, [r3, #4]
 800ad5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	db00      	blt.n	800ad64 <_dtoa_r+0x47c>
 800ad62:	e0d7      	b.n	800af14 <_dtoa_r+0x62c>
 800ad64:	9b07      	ldr	r3, [sp, #28]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	dd00      	ble.n	800ad6c <_dtoa_r+0x484>
 800ad6a:	e0d3      	b.n	800af14 <_dtoa_r+0x62c>
 800ad6c:	d000      	beq.n	800ad70 <_dtoa_r+0x488>
 800ad6e:	e278      	b.n	800b262 <_dtoa_r+0x97a>
 800ad70:	2200      	movs	r2, #0
 800ad72:	0030      	movs	r0, r6
 800ad74:	0039      	movs	r1, r7
 800ad76:	4b96      	ldr	r3, [pc, #600]	; (800afd0 <_dtoa_r+0x6e8>)
 800ad78:	f7f6 fdf2 	bl	8001960 <__aeabi_dmul>
 800ad7c:	9a08      	ldr	r2, [sp, #32]
 800ad7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad80:	f7f5 fb88 	bl	8000494 <__aeabi_dcmpge>
 800ad84:	9e07      	ldr	r6, [sp, #28]
 800ad86:	0037      	movs	r7, r6
 800ad88:	2800      	cmp	r0, #0
 800ad8a:	d000      	beq.n	800ad8e <_dtoa_r+0x4a6>
 800ad8c:	e24f      	b.n	800b22e <_dtoa_r+0x946>
 800ad8e:	9b06      	ldr	r3, [sp, #24]
 800ad90:	9a06      	ldr	r2, [sp, #24]
 800ad92:	3301      	adds	r3, #1
 800ad94:	9308      	str	r3, [sp, #32]
 800ad96:	2331      	movs	r3, #49	; 0x31
 800ad98:	7013      	strb	r3, [r2, #0]
 800ad9a:	9b03      	ldr	r3, [sp, #12]
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	9303      	str	r3, [sp, #12]
 800ada0:	e24a      	b.n	800b238 <_dtoa_r+0x950>
 800ada2:	4234      	tst	r4, r6
 800ada4:	d005      	beq.n	800adb2 <_dtoa_r+0x4ca>
 800ada6:	682a      	ldr	r2, [r5, #0]
 800ada8:	686b      	ldr	r3, [r5, #4]
 800adaa:	f7f6 fdd9 	bl	8001960 <__aeabi_dmul>
 800adae:	0033      	movs	r3, r6
 800adb0:	3701      	adds	r7, #1
 800adb2:	1064      	asrs	r4, r4, #1
 800adb4:	3508      	adds	r5, #8
 800adb6:	e763      	b.n	800ac80 <_dtoa_r+0x398>
 800adb8:	9b03      	ldr	r3, [sp, #12]
 800adba:	9e07      	ldr	r6, [sp, #28]
 800adbc:	930e      	str	r3, [sp, #56]	; 0x38
 800adbe:	e787      	b.n	800acd0 <_dtoa_r+0x3e8>
 800adc0:	4b7d      	ldr	r3, [pc, #500]	; (800afb8 <_dtoa_r+0x6d0>)
 800adc2:	1e72      	subs	r2, r6, #1
 800adc4:	00d2      	lsls	r2, r2, #3
 800adc6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800adc8:	189b      	adds	r3, r3, r2
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	2900      	cmp	r1, #0
 800add0:	d04e      	beq.n	800ae70 <_dtoa_r+0x588>
 800add2:	2000      	movs	r0, #0
 800add4:	4980      	ldr	r1, [pc, #512]	; (800afd8 <_dtoa_r+0x6f0>)
 800add6:	f7f6 f9c1 	bl	800115c <__aeabi_ddiv>
 800adda:	9a08      	ldr	r2, [sp, #32]
 800addc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adde:	f7f7 f82b 	bl	8001e38 <__aeabi_dsub>
 800ade2:	9b06      	ldr	r3, [sp, #24]
 800ade4:	9012      	str	r0, [sp, #72]	; 0x48
 800ade6:	9113      	str	r1, [sp, #76]	; 0x4c
 800ade8:	9316      	str	r3, [sp, #88]	; 0x58
 800adea:	18f3      	adds	r3, r6, r3
 800adec:	9319      	str	r3, [sp, #100]	; 0x64
 800adee:	0020      	movs	r0, r4
 800adf0:	0029      	movs	r1, r5
 800adf2:	f7f7 fbd1 	bl	8002598 <__aeabi_d2iz>
 800adf6:	9018      	str	r0, [sp, #96]	; 0x60
 800adf8:	f7f7 fc04 	bl	8002604 <__aeabi_i2d>
 800adfc:	0002      	movs	r2, r0
 800adfe:	000b      	movs	r3, r1
 800ae00:	0020      	movs	r0, r4
 800ae02:	0029      	movs	r1, r5
 800ae04:	f7f7 f818 	bl	8001e38 <__aeabi_dsub>
 800ae08:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ae0a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	9308      	str	r3, [sp, #32]
 800ae10:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ae12:	3430      	adds	r4, #48	; 0x30
 800ae14:	701c      	strb	r4, [r3, #0]
 800ae16:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ae18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae1a:	0006      	movs	r6, r0
 800ae1c:	000f      	movs	r7, r1
 800ae1e:	f7f5 fb1b 	bl	8000458 <__aeabi_dcmplt>
 800ae22:	2800      	cmp	r0, #0
 800ae24:	d16c      	bne.n	800af00 <_dtoa_r+0x618>
 800ae26:	0032      	movs	r2, r6
 800ae28:	003b      	movs	r3, r7
 800ae2a:	2000      	movs	r0, #0
 800ae2c:	4964      	ldr	r1, [pc, #400]	; (800afc0 <_dtoa_r+0x6d8>)
 800ae2e:	f7f7 f803 	bl	8001e38 <__aeabi_dsub>
 800ae32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ae34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae36:	f7f5 fb0f 	bl	8000458 <__aeabi_dcmplt>
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	d000      	beq.n	800ae40 <_dtoa_r+0x558>
 800ae3e:	e0cf      	b.n	800afe0 <_dtoa_r+0x6f8>
 800ae40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ae42:	9a08      	ldr	r2, [sp, #32]
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d100      	bne.n	800ae4a <_dtoa_r+0x562>
 800ae48:	e777      	b.n	800ad3a <_dtoa_r+0x452>
 800ae4a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ae4c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ae4e:	2200      	movs	r2, #0
 800ae50:	4b5c      	ldr	r3, [pc, #368]	; (800afc4 <_dtoa_r+0x6dc>)
 800ae52:	f7f6 fd85 	bl	8001960 <__aeabi_dmul>
 800ae56:	4b5b      	ldr	r3, [pc, #364]	; (800afc4 <_dtoa_r+0x6dc>)
 800ae58:	9012      	str	r0, [sp, #72]	; 0x48
 800ae5a:	9113      	str	r1, [sp, #76]	; 0x4c
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	0030      	movs	r0, r6
 800ae60:	0039      	movs	r1, r7
 800ae62:	f7f6 fd7d 	bl	8001960 <__aeabi_dmul>
 800ae66:	9b08      	ldr	r3, [sp, #32]
 800ae68:	0004      	movs	r4, r0
 800ae6a:	000d      	movs	r5, r1
 800ae6c:	9316      	str	r3, [sp, #88]	; 0x58
 800ae6e:	e7be      	b.n	800adee <_dtoa_r+0x506>
 800ae70:	9808      	ldr	r0, [sp, #32]
 800ae72:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae74:	f7f6 fd74 	bl	8001960 <__aeabi_dmul>
 800ae78:	9f06      	ldr	r7, [sp, #24]
 800ae7a:	9012      	str	r0, [sp, #72]	; 0x48
 800ae7c:	9113      	str	r1, [sp, #76]	; 0x4c
 800ae7e:	19bb      	adds	r3, r7, r6
 800ae80:	9316      	str	r3, [sp, #88]	; 0x58
 800ae82:	0029      	movs	r1, r5
 800ae84:	0020      	movs	r0, r4
 800ae86:	f7f7 fb87 	bl	8002598 <__aeabi_d2iz>
 800ae8a:	9008      	str	r0, [sp, #32]
 800ae8c:	f7f7 fbba 	bl	8002604 <__aeabi_i2d>
 800ae90:	000b      	movs	r3, r1
 800ae92:	0002      	movs	r2, r0
 800ae94:	0029      	movs	r1, r5
 800ae96:	0020      	movs	r0, r4
 800ae98:	f7f6 ffce 	bl	8001e38 <__aeabi_dsub>
 800ae9c:	9b08      	ldr	r3, [sp, #32]
 800ae9e:	0004      	movs	r4, r0
 800aea0:	3330      	adds	r3, #48	; 0x30
 800aea2:	703b      	strb	r3, [r7, #0]
 800aea4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aea6:	3701      	adds	r7, #1
 800aea8:	000d      	movs	r5, r1
 800aeaa:	429f      	cmp	r7, r3
 800aeac:	d12b      	bne.n	800af06 <_dtoa_r+0x61e>
 800aeae:	9812      	ldr	r0, [sp, #72]	; 0x48
 800aeb0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800aeb2:	9b06      	ldr	r3, [sp, #24]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	199b      	adds	r3, r3, r6
 800aeb8:	9308      	str	r3, [sp, #32]
 800aeba:	4b47      	ldr	r3, [pc, #284]	; (800afd8 <_dtoa_r+0x6f0>)
 800aebc:	f7f5 fe12 	bl	8000ae4 <__aeabi_dadd>
 800aec0:	0002      	movs	r2, r0
 800aec2:	000b      	movs	r3, r1
 800aec4:	0020      	movs	r0, r4
 800aec6:	0029      	movs	r1, r5
 800aec8:	f7f5 fada 	bl	8000480 <__aeabi_dcmpgt>
 800aecc:	2800      	cmp	r0, #0
 800aece:	d000      	beq.n	800aed2 <_dtoa_r+0x5ea>
 800aed0:	e086      	b.n	800afe0 <_dtoa_r+0x6f8>
 800aed2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aed4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aed6:	2000      	movs	r0, #0
 800aed8:	493f      	ldr	r1, [pc, #252]	; (800afd8 <_dtoa_r+0x6f0>)
 800aeda:	f7f6 ffad 	bl	8001e38 <__aeabi_dsub>
 800aede:	0002      	movs	r2, r0
 800aee0:	000b      	movs	r3, r1
 800aee2:	0020      	movs	r0, r4
 800aee4:	0029      	movs	r1, r5
 800aee6:	f7f5 fab7 	bl	8000458 <__aeabi_dcmplt>
 800aeea:	2800      	cmp	r0, #0
 800aeec:	d100      	bne.n	800aef0 <_dtoa_r+0x608>
 800aeee:	e724      	b.n	800ad3a <_dtoa_r+0x452>
 800aef0:	9b08      	ldr	r3, [sp, #32]
 800aef2:	001a      	movs	r2, r3
 800aef4:	3a01      	subs	r2, #1
 800aef6:	9208      	str	r2, [sp, #32]
 800aef8:	7812      	ldrb	r2, [r2, #0]
 800aefa:	2a30      	cmp	r2, #48	; 0x30
 800aefc:	d0f8      	beq.n	800aef0 <_dtoa_r+0x608>
 800aefe:	9308      	str	r3, [sp, #32]
 800af00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af02:	9303      	str	r3, [sp, #12]
 800af04:	e046      	b.n	800af94 <_dtoa_r+0x6ac>
 800af06:	2200      	movs	r2, #0
 800af08:	4b2e      	ldr	r3, [pc, #184]	; (800afc4 <_dtoa_r+0x6dc>)
 800af0a:	f7f6 fd29 	bl	8001960 <__aeabi_dmul>
 800af0e:	0004      	movs	r4, r0
 800af10:	000d      	movs	r5, r1
 800af12:	e7b6      	b.n	800ae82 <_dtoa_r+0x59a>
 800af14:	9b06      	ldr	r3, [sp, #24]
 800af16:	9a06      	ldr	r2, [sp, #24]
 800af18:	930a      	str	r3, [sp, #40]	; 0x28
 800af1a:	9b07      	ldr	r3, [sp, #28]
 800af1c:	9c08      	ldr	r4, [sp, #32]
 800af1e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800af20:	3b01      	subs	r3, #1
 800af22:	189b      	adds	r3, r3, r2
 800af24:	930b      	str	r3, [sp, #44]	; 0x2c
 800af26:	0032      	movs	r2, r6
 800af28:	003b      	movs	r3, r7
 800af2a:	0020      	movs	r0, r4
 800af2c:	0029      	movs	r1, r5
 800af2e:	f7f6 f915 	bl	800115c <__aeabi_ddiv>
 800af32:	f7f7 fb31 	bl	8002598 <__aeabi_d2iz>
 800af36:	9007      	str	r0, [sp, #28]
 800af38:	f7f7 fb64 	bl	8002604 <__aeabi_i2d>
 800af3c:	0032      	movs	r2, r6
 800af3e:	003b      	movs	r3, r7
 800af40:	f7f6 fd0e 	bl	8001960 <__aeabi_dmul>
 800af44:	0002      	movs	r2, r0
 800af46:	000b      	movs	r3, r1
 800af48:	0020      	movs	r0, r4
 800af4a:	0029      	movs	r1, r5
 800af4c:	f7f6 ff74 	bl	8001e38 <__aeabi_dsub>
 800af50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af52:	001a      	movs	r2, r3
 800af54:	3201      	adds	r2, #1
 800af56:	920a      	str	r2, [sp, #40]	; 0x28
 800af58:	9208      	str	r2, [sp, #32]
 800af5a:	9a07      	ldr	r2, [sp, #28]
 800af5c:	3230      	adds	r2, #48	; 0x30
 800af5e:	701a      	strb	r2, [r3, #0]
 800af60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af62:	429a      	cmp	r2, r3
 800af64:	d14f      	bne.n	800b006 <_dtoa_r+0x71e>
 800af66:	0002      	movs	r2, r0
 800af68:	000b      	movs	r3, r1
 800af6a:	f7f5 fdbb 	bl	8000ae4 <__aeabi_dadd>
 800af6e:	0032      	movs	r2, r6
 800af70:	003b      	movs	r3, r7
 800af72:	0004      	movs	r4, r0
 800af74:	000d      	movs	r5, r1
 800af76:	f7f5 fa83 	bl	8000480 <__aeabi_dcmpgt>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	d12e      	bne.n	800afdc <_dtoa_r+0x6f4>
 800af7e:	0032      	movs	r2, r6
 800af80:	003b      	movs	r3, r7
 800af82:	0020      	movs	r0, r4
 800af84:	0029      	movs	r1, r5
 800af86:	f7f5 fa61 	bl	800044c <__aeabi_dcmpeq>
 800af8a:	2800      	cmp	r0, #0
 800af8c:	d002      	beq.n	800af94 <_dtoa_r+0x6ac>
 800af8e:	9b07      	ldr	r3, [sp, #28]
 800af90:	07db      	lsls	r3, r3, #31
 800af92:	d423      	bmi.n	800afdc <_dtoa_r+0x6f4>
 800af94:	9804      	ldr	r0, [sp, #16]
 800af96:	9905      	ldr	r1, [sp, #20]
 800af98:	f000 fdf2 	bl	800bb80 <_Bfree>
 800af9c:	2300      	movs	r3, #0
 800af9e:	9a08      	ldr	r2, [sp, #32]
 800afa0:	9803      	ldr	r0, [sp, #12]
 800afa2:	7013      	strb	r3, [r2, #0]
 800afa4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800afa6:	3001      	adds	r0, #1
 800afa8:	6018      	str	r0, [r3, #0]
 800afaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800afac:	2b00      	cmp	r3, #0
 800afae:	d100      	bne.n	800afb2 <_dtoa_r+0x6ca>
 800afb0:	e4cd      	b.n	800a94e <_dtoa_r+0x66>
 800afb2:	601a      	str	r2, [r3, #0]
 800afb4:	e4cb      	b.n	800a94e <_dtoa_r+0x66>
 800afb6:	46c0      	nop			; (mov r8, r8)
 800afb8:	0800e8e8 	.word	0x0800e8e8
 800afbc:	0800e8c0 	.word	0x0800e8c0
 800afc0:	3ff00000 	.word	0x3ff00000
 800afc4:	40240000 	.word	0x40240000
 800afc8:	401c0000 	.word	0x401c0000
 800afcc:	fcc00000 	.word	0xfcc00000
 800afd0:	40140000 	.word	0x40140000
 800afd4:	7cc00000 	.word	0x7cc00000
 800afd8:	3fe00000 	.word	0x3fe00000
 800afdc:	9b03      	ldr	r3, [sp, #12]
 800afde:	930e      	str	r3, [sp, #56]	; 0x38
 800afe0:	9b08      	ldr	r3, [sp, #32]
 800afe2:	9308      	str	r3, [sp, #32]
 800afe4:	3b01      	subs	r3, #1
 800afe6:	781a      	ldrb	r2, [r3, #0]
 800afe8:	2a39      	cmp	r2, #57	; 0x39
 800afea:	d108      	bne.n	800affe <_dtoa_r+0x716>
 800afec:	9a06      	ldr	r2, [sp, #24]
 800afee:	429a      	cmp	r2, r3
 800aff0:	d1f7      	bne.n	800afe2 <_dtoa_r+0x6fa>
 800aff2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aff4:	9906      	ldr	r1, [sp, #24]
 800aff6:	3201      	adds	r2, #1
 800aff8:	920e      	str	r2, [sp, #56]	; 0x38
 800affa:	2230      	movs	r2, #48	; 0x30
 800affc:	700a      	strb	r2, [r1, #0]
 800affe:	781a      	ldrb	r2, [r3, #0]
 800b000:	3201      	adds	r2, #1
 800b002:	701a      	strb	r2, [r3, #0]
 800b004:	e77c      	b.n	800af00 <_dtoa_r+0x618>
 800b006:	2200      	movs	r2, #0
 800b008:	4ba7      	ldr	r3, [pc, #668]	; (800b2a8 <_dtoa_r+0x9c0>)
 800b00a:	f7f6 fca9 	bl	8001960 <__aeabi_dmul>
 800b00e:	2200      	movs	r2, #0
 800b010:	2300      	movs	r3, #0
 800b012:	0004      	movs	r4, r0
 800b014:	000d      	movs	r5, r1
 800b016:	f7f5 fa19 	bl	800044c <__aeabi_dcmpeq>
 800b01a:	2800      	cmp	r0, #0
 800b01c:	d083      	beq.n	800af26 <_dtoa_r+0x63e>
 800b01e:	e7b9      	b.n	800af94 <_dtoa_r+0x6ac>
 800b020:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800b022:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b024:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b026:	2f00      	cmp	r7, #0
 800b028:	d012      	beq.n	800b050 <_dtoa_r+0x768>
 800b02a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b02c:	2a01      	cmp	r2, #1
 800b02e:	dc6e      	bgt.n	800b10e <_dtoa_r+0x826>
 800b030:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b032:	2a00      	cmp	r2, #0
 800b034:	d065      	beq.n	800b102 <_dtoa_r+0x81a>
 800b036:	4a9d      	ldr	r2, [pc, #628]	; (800b2ac <_dtoa_r+0x9c4>)
 800b038:	189b      	adds	r3, r3, r2
 800b03a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b03c:	2101      	movs	r1, #1
 800b03e:	18d2      	adds	r2, r2, r3
 800b040:	920a      	str	r2, [sp, #40]	; 0x28
 800b042:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b044:	9804      	ldr	r0, [sp, #16]
 800b046:	18d3      	adds	r3, r2, r3
 800b048:	930c      	str	r3, [sp, #48]	; 0x30
 800b04a:	f000 fe2f 	bl	800bcac <__i2b>
 800b04e:	0007      	movs	r7, r0
 800b050:	2c00      	cmp	r4, #0
 800b052:	dd0e      	ble.n	800b072 <_dtoa_r+0x78a>
 800b054:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b056:	2b00      	cmp	r3, #0
 800b058:	dd0b      	ble.n	800b072 <_dtoa_r+0x78a>
 800b05a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b05c:	0023      	movs	r3, r4
 800b05e:	4294      	cmp	r4, r2
 800b060:	dd00      	ble.n	800b064 <_dtoa_r+0x77c>
 800b062:	0013      	movs	r3, r2
 800b064:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b066:	1ae4      	subs	r4, r4, r3
 800b068:	1ad2      	subs	r2, r2, r3
 800b06a:	920a      	str	r2, [sp, #40]	; 0x28
 800b06c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b06e:	1ad3      	subs	r3, r2, r3
 800b070:	930c      	str	r3, [sp, #48]	; 0x30
 800b072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b074:	2b00      	cmp	r3, #0
 800b076:	d01e      	beq.n	800b0b6 <_dtoa_r+0x7ce>
 800b078:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d05c      	beq.n	800b138 <_dtoa_r+0x850>
 800b07e:	2d00      	cmp	r5, #0
 800b080:	dd10      	ble.n	800b0a4 <_dtoa_r+0x7bc>
 800b082:	0039      	movs	r1, r7
 800b084:	002a      	movs	r2, r5
 800b086:	9804      	ldr	r0, [sp, #16]
 800b088:	f000 fed6 	bl	800be38 <__pow5mult>
 800b08c:	9a05      	ldr	r2, [sp, #20]
 800b08e:	0001      	movs	r1, r0
 800b090:	0007      	movs	r7, r0
 800b092:	9804      	ldr	r0, [sp, #16]
 800b094:	f000 fe20 	bl	800bcd8 <__multiply>
 800b098:	0006      	movs	r6, r0
 800b09a:	9905      	ldr	r1, [sp, #20]
 800b09c:	9804      	ldr	r0, [sp, #16]
 800b09e:	f000 fd6f 	bl	800bb80 <_Bfree>
 800b0a2:	9605      	str	r6, [sp, #20]
 800b0a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0a6:	1b5a      	subs	r2, r3, r5
 800b0a8:	42ab      	cmp	r3, r5
 800b0aa:	d004      	beq.n	800b0b6 <_dtoa_r+0x7ce>
 800b0ac:	9905      	ldr	r1, [sp, #20]
 800b0ae:	9804      	ldr	r0, [sp, #16]
 800b0b0:	f000 fec2 	bl	800be38 <__pow5mult>
 800b0b4:	9005      	str	r0, [sp, #20]
 800b0b6:	2101      	movs	r1, #1
 800b0b8:	9804      	ldr	r0, [sp, #16]
 800b0ba:	f000 fdf7 	bl	800bcac <__i2b>
 800b0be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b0c0:	0006      	movs	r6, r0
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	dd3a      	ble.n	800b13c <_dtoa_r+0x854>
 800b0c6:	001a      	movs	r2, r3
 800b0c8:	0001      	movs	r1, r0
 800b0ca:	9804      	ldr	r0, [sp, #16]
 800b0cc:	f000 feb4 	bl	800be38 <__pow5mult>
 800b0d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0d2:	0006      	movs	r6, r0
 800b0d4:	2500      	movs	r5, #0
 800b0d6:	2b01      	cmp	r3, #1
 800b0d8:	dc38      	bgt.n	800b14c <_dtoa_r+0x864>
 800b0da:	2500      	movs	r5, #0
 800b0dc:	9b08      	ldr	r3, [sp, #32]
 800b0de:	42ab      	cmp	r3, r5
 800b0e0:	d130      	bne.n	800b144 <_dtoa_r+0x85c>
 800b0e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0e4:	031b      	lsls	r3, r3, #12
 800b0e6:	42ab      	cmp	r3, r5
 800b0e8:	d12c      	bne.n	800b144 <_dtoa_r+0x85c>
 800b0ea:	4b71      	ldr	r3, [pc, #452]	; (800b2b0 <_dtoa_r+0x9c8>)
 800b0ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0ee:	4213      	tst	r3, r2
 800b0f0:	d028      	beq.n	800b144 <_dtoa_r+0x85c>
 800b0f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0f4:	3501      	adds	r5, #1
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	930a      	str	r3, [sp, #40]	; 0x28
 800b0fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	930c      	str	r3, [sp, #48]	; 0x30
 800b100:	e020      	b.n	800b144 <_dtoa_r+0x85c>
 800b102:	2336      	movs	r3, #54	; 0x36
 800b104:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b106:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b108:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b10a:	1a9b      	subs	r3, r3, r2
 800b10c:	e795      	b.n	800b03a <_dtoa_r+0x752>
 800b10e:	9b07      	ldr	r3, [sp, #28]
 800b110:	1e5d      	subs	r5, r3, #1
 800b112:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b114:	42ab      	cmp	r3, r5
 800b116:	db07      	blt.n	800b128 <_dtoa_r+0x840>
 800b118:	1b5d      	subs	r5, r3, r5
 800b11a:	9b07      	ldr	r3, [sp, #28]
 800b11c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b11e:	2b00      	cmp	r3, #0
 800b120:	da8b      	bge.n	800b03a <_dtoa_r+0x752>
 800b122:	1ae4      	subs	r4, r4, r3
 800b124:	2300      	movs	r3, #0
 800b126:	e788      	b.n	800b03a <_dtoa_r+0x752>
 800b128:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b12a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b12c:	1aeb      	subs	r3, r5, r3
 800b12e:	18d3      	adds	r3, r2, r3
 800b130:	950d      	str	r5, [sp, #52]	; 0x34
 800b132:	9314      	str	r3, [sp, #80]	; 0x50
 800b134:	2500      	movs	r5, #0
 800b136:	e7f0      	b.n	800b11a <_dtoa_r+0x832>
 800b138:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b13a:	e7b7      	b.n	800b0ac <_dtoa_r+0x7c4>
 800b13c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b13e:	2500      	movs	r5, #0
 800b140:	2b01      	cmp	r3, #1
 800b142:	ddca      	ble.n	800b0da <_dtoa_r+0x7f2>
 800b144:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b146:	2001      	movs	r0, #1
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d008      	beq.n	800b15e <_dtoa_r+0x876>
 800b14c:	6933      	ldr	r3, [r6, #16]
 800b14e:	3303      	adds	r3, #3
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	18f3      	adds	r3, r6, r3
 800b154:	6858      	ldr	r0, [r3, #4]
 800b156:	f000 fd61 	bl	800bc1c <__hi0bits>
 800b15a:	2320      	movs	r3, #32
 800b15c:	1a18      	subs	r0, r3, r0
 800b15e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b160:	221f      	movs	r2, #31
 800b162:	1818      	adds	r0, r3, r0
 800b164:	0003      	movs	r3, r0
 800b166:	4013      	ands	r3, r2
 800b168:	4210      	tst	r0, r2
 800b16a:	d046      	beq.n	800b1fa <_dtoa_r+0x912>
 800b16c:	3201      	adds	r2, #1
 800b16e:	1ad2      	subs	r2, r2, r3
 800b170:	2a04      	cmp	r2, #4
 800b172:	dd3f      	ble.n	800b1f4 <_dtoa_r+0x90c>
 800b174:	221c      	movs	r2, #28
 800b176:	1ad3      	subs	r3, r2, r3
 800b178:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b17a:	18e4      	adds	r4, r4, r3
 800b17c:	18d2      	adds	r2, r2, r3
 800b17e:	920a      	str	r2, [sp, #40]	; 0x28
 800b180:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b182:	18d3      	adds	r3, r2, r3
 800b184:	930c      	str	r3, [sp, #48]	; 0x30
 800b186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b188:	2b00      	cmp	r3, #0
 800b18a:	dd05      	ble.n	800b198 <_dtoa_r+0x8b0>
 800b18c:	001a      	movs	r2, r3
 800b18e:	9905      	ldr	r1, [sp, #20]
 800b190:	9804      	ldr	r0, [sp, #16]
 800b192:	f000 fe93 	bl	800bebc <__lshift>
 800b196:	9005      	str	r0, [sp, #20]
 800b198:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	dd05      	ble.n	800b1aa <_dtoa_r+0x8c2>
 800b19e:	0031      	movs	r1, r6
 800b1a0:	001a      	movs	r2, r3
 800b1a2:	9804      	ldr	r0, [sp, #16]
 800b1a4:	f000 fe8a 	bl	800bebc <__lshift>
 800b1a8:	0006      	movs	r6, r0
 800b1aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d026      	beq.n	800b1fe <_dtoa_r+0x916>
 800b1b0:	0031      	movs	r1, r6
 800b1b2:	9805      	ldr	r0, [sp, #20]
 800b1b4:	f000 fef0 	bl	800bf98 <__mcmp>
 800b1b8:	2800      	cmp	r0, #0
 800b1ba:	da20      	bge.n	800b1fe <_dtoa_r+0x916>
 800b1bc:	9b03      	ldr	r3, [sp, #12]
 800b1be:	220a      	movs	r2, #10
 800b1c0:	3b01      	subs	r3, #1
 800b1c2:	9303      	str	r3, [sp, #12]
 800b1c4:	9905      	ldr	r1, [sp, #20]
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	9804      	ldr	r0, [sp, #16]
 800b1ca:	f000 fce3 	bl	800bb94 <__multadd>
 800b1ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b1d0:	9005      	str	r0, [sp, #20]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d100      	bne.n	800b1d8 <_dtoa_r+0x8f0>
 800b1d6:	e15a      	b.n	800b48e <_dtoa_r+0xba6>
 800b1d8:	2300      	movs	r3, #0
 800b1da:	0039      	movs	r1, r7
 800b1dc:	220a      	movs	r2, #10
 800b1de:	9804      	ldr	r0, [sp, #16]
 800b1e0:	f000 fcd8 	bl	800bb94 <__multadd>
 800b1e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1e6:	0007      	movs	r7, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	dc47      	bgt.n	800b27c <_dtoa_r+0x994>
 800b1ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b1ee:	2b02      	cmp	r3, #2
 800b1f0:	dc0d      	bgt.n	800b20e <_dtoa_r+0x926>
 800b1f2:	e043      	b.n	800b27c <_dtoa_r+0x994>
 800b1f4:	2a04      	cmp	r2, #4
 800b1f6:	d0c6      	beq.n	800b186 <_dtoa_r+0x89e>
 800b1f8:	0013      	movs	r3, r2
 800b1fa:	331c      	adds	r3, #28
 800b1fc:	e7bc      	b.n	800b178 <_dtoa_r+0x890>
 800b1fe:	9b07      	ldr	r3, [sp, #28]
 800b200:	2b00      	cmp	r3, #0
 800b202:	dc35      	bgt.n	800b270 <_dtoa_r+0x988>
 800b204:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b206:	2b02      	cmp	r3, #2
 800b208:	dd32      	ble.n	800b270 <_dtoa_r+0x988>
 800b20a:	9b07      	ldr	r3, [sp, #28]
 800b20c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b20e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b210:	2b00      	cmp	r3, #0
 800b212:	d10c      	bne.n	800b22e <_dtoa_r+0x946>
 800b214:	0031      	movs	r1, r6
 800b216:	2205      	movs	r2, #5
 800b218:	9804      	ldr	r0, [sp, #16]
 800b21a:	f000 fcbb 	bl	800bb94 <__multadd>
 800b21e:	0006      	movs	r6, r0
 800b220:	0001      	movs	r1, r0
 800b222:	9805      	ldr	r0, [sp, #20]
 800b224:	f000 feb8 	bl	800bf98 <__mcmp>
 800b228:	2800      	cmp	r0, #0
 800b22a:	dd00      	ble.n	800b22e <_dtoa_r+0x946>
 800b22c:	e5af      	b.n	800ad8e <_dtoa_r+0x4a6>
 800b22e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b230:	43db      	mvns	r3, r3
 800b232:	9303      	str	r3, [sp, #12]
 800b234:	9b06      	ldr	r3, [sp, #24]
 800b236:	9308      	str	r3, [sp, #32]
 800b238:	2500      	movs	r5, #0
 800b23a:	0031      	movs	r1, r6
 800b23c:	9804      	ldr	r0, [sp, #16]
 800b23e:	f000 fc9f 	bl	800bb80 <_Bfree>
 800b242:	2f00      	cmp	r7, #0
 800b244:	d100      	bne.n	800b248 <_dtoa_r+0x960>
 800b246:	e6a5      	b.n	800af94 <_dtoa_r+0x6ac>
 800b248:	2d00      	cmp	r5, #0
 800b24a:	d005      	beq.n	800b258 <_dtoa_r+0x970>
 800b24c:	42bd      	cmp	r5, r7
 800b24e:	d003      	beq.n	800b258 <_dtoa_r+0x970>
 800b250:	0029      	movs	r1, r5
 800b252:	9804      	ldr	r0, [sp, #16]
 800b254:	f000 fc94 	bl	800bb80 <_Bfree>
 800b258:	0039      	movs	r1, r7
 800b25a:	9804      	ldr	r0, [sp, #16]
 800b25c:	f000 fc90 	bl	800bb80 <_Bfree>
 800b260:	e698      	b.n	800af94 <_dtoa_r+0x6ac>
 800b262:	2600      	movs	r6, #0
 800b264:	0037      	movs	r7, r6
 800b266:	e7e2      	b.n	800b22e <_dtoa_r+0x946>
 800b268:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b26a:	0037      	movs	r7, r6
 800b26c:	9303      	str	r3, [sp, #12]
 800b26e:	e58e      	b.n	800ad8e <_dtoa_r+0x4a6>
 800b270:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b272:	2b00      	cmp	r3, #0
 800b274:	d100      	bne.n	800b278 <_dtoa_r+0x990>
 800b276:	e0c2      	b.n	800b3fe <_dtoa_r+0xb16>
 800b278:	9b07      	ldr	r3, [sp, #28]
 800b27a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b27c:	2c00      	cmp	r4, #0
 800b27e:	dd05      	ble.n	800b28c <_dtoa_r+0x9a4>
 800b280:	0039      	movs	r1, r7
 800b282:	0022      	movs	r2, r4
 800b284:	9804      	ldr	r0, [sp, #16]
 800b286:	f000 fe19 	bl	800bebc <__lshift>
 800b28a:	0007      	movs	r7, r0
 800b28c:	0038      	movs	r0, r7
 800b28e:	2d00      	cmp	r5, #0
 800b290:	d021      	beq.n	800b2d6 <_dtoa_r+0x9ee>
 800b292:	6879      	ldr	r1, [r7, #4]
 800b294:	9804      	ldr	r0, [sp, #16]
 800b296:	f000 fc4b 	bl	800bb30 <_Balloc>
 800b29a:	1e04      	subs	r4, r0, #0
 800b29c:	d10e      	bne.n	800b2bc <_dtoa_r+0x9d4>
 800b29e:	0002      	movs	r2, r0
 800b2a0:	4b04      	ldr	r3, [pc, #16]	; (800b2b4 <_dtoa_r+0x9cc>)
 800b2a2:	4905      	ldr	r1, [pc, #20]	; (800b2b8 <_dtoa_r+0x9d0>)
 800b2a4:	e450      	b.n	800ab48 <_dtoa_r+0x260>
 800b2a6:	46c0      	nop			; (mov r8, r8)
 800b2a8:	40240000 	.word	0x40240000
 800b2ac:	00000433 	.word	0x00000433
 800b2b0:	7ff00000 	.word	0x7ff00000
 800b2b4:	0800e7f2 	.word	0x0800e7f2
 800b2b8:	000002ea 	.word	0x000002ea
 800b2bc:	0039      	movs	r1, r7
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	310c      	adds	r1, #12
 800b2c2:	1c9a      	adds	r2, r3, #2
 800b2c4:	0092      	lsls	r2, r2, #2
 800b2c6:	300c      	adds	r0, #12
 800b2c8:	f7fd fefb 	bl	80090c2 <memcpy>
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	0021      	movs	r1, r4
 800b2d0:	9804      	ldr	r0, [sp, #16]
 800b2d2:	f000 fdf3 	bl	800bebc <__lshift>
 800b2d6:	9b06      	ldr	r3, [sp, #24]
 800b2d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b2da:	9307      	str	r3, [sp, #28]
 800b2dc:	3b01      	subs	r3, #1
 800b2de:	189b      	adds	r3, r3, r2
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	003d      	movs	r5, r7
 800b2e4:	0007      	movs	r7, r0
 800b2e6:	930e      	str	r3, [sp, #56]	; 0x38
 800b2e8:	9b08      	ldr	r3, [sp, #32]
 800b2ea:	4013      	ands	r3, r2
 800b2ec:	930d      	str	r3, [sp, #52]	; 0x34
 800b2ee:	0031      	movs	r1, r6
 800b2f0:	9805      	ldr	r0, [sp, #20]
 800b2f2:	f7ff fa6d 	bl	800a7d0 <quorem>
 800b2f6:	0029      	movs	r1, r5
 800b2f8:	0004      	movs	r4, r0
 800b2fa:	900b      	str	r0, [sp, #44]	; 0x2c
 800b2fc:	9805      	ldr	r0, [sp, #20]
 800b2fe:	f000 fe4b 	bl	800bf98 <__mcmp>
 800b302:	003a      	movs	r2, r7
 800b304:	900c      	str	r0, [sp, #48]	; 0x30
 800b306:	0031      	movs	r1, r6
 800b308:	9804      	ldr	r0, [sp, #16]
 800b30a:	f000 fe61 	bl	800bfd0 <__mdiff>
 800b30e:	68c3      	ldr	r3, [r0, #12]
 800b310:	3430      	adds	r4, #48	; 0x30
 800b312:	930f      	str	r3, [sp, #60]	; 0x3c
 800b314:	2301      	movs	r3, #1
 800b316:	930a      	str	r3, [sp, #40]	; 0x28
 800b318:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b31a:	9008      	str	r0, [sp, #32]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d104      	bne.n	800b32a <_dtoa_r+0xa42>
 800b320:	0001      	movs	r1, r0
 800b322:	9805      	ldr	r0, [sp, #20]
 800b324:	f000 fe38 	bl	800bf98 <__mcmp>
 800b328:	900a      	str	r0, [sp, #40]	; 0x28
 800b32a:	9908      	ldr	r1, [sp, #32]
 800b32c:	9804      	ldr	r0, [sp, #16]
 800b32e:	f000 fc27 	bl	800bb80 <_Bfree>
 800b332:	9b07      	ldr	r3, [sp, #28]
 800b334:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b336:	3301      	adds	r3, #1
 800b338:	9308      	str	r3, [sp, #32]
 800b33a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b33c:	4313      	orrs	r3, r2
 800b33e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b340:	4313      	orrs	r3, r2
 800b342:	d109      	bne.n	800b358 <_dtoa_r+0xa70>
 800b344:	2c39      	cmp	r4, #57	; 0x39
 800b346:	d022      	beq.n	800b38e <_dtoa_r+0xaa6>
 800b348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	dd01      	ble.n	800b352 <_dtoa_r+0xa6a>
 800b34e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b350:	3431      	adds	r4, #49	; 0x31
 800b352:	9b07      	ldr	r3, [sp, #28]
 800b354:	701c      	strb	r4, [r3, #0]
 800b356:	e770      	b.n	800b23a <_dtoa_r+0x952>
 800b358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	db04      	blt.n	800b368 <_dtoa_r+0xa80>
 800b35e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b360:	4313      	orrs	r3, r2
 800b362:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b364:	4313      	orrs	r3, r2
 800b366:	d11e      	bne.n	800b3a6 <_dtoa_r+0xabe>
 800b368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	ddf1      	ble.n	800b352 <_dtoa_r+0xa6a>
 800b36e:	9905      	ldr	r1, [sp, #20]
 800b370:	2201      	movs	r2, #1
 800b372:	9804      	ldr	r0, [sp, #16]
 800b374:	f000 fda2 	bl	800bebc <__lshift>
 800b378:	0031      	movs	r1, r6
 800b37a:	9005      	str	r0, [sp, #20]
 800b37c:	f000 fe0c 	bl	800bf98 <__mcmp>
 800b380:	2800      	cmp	r0, #0
 800b382:	dc02      	bgt.n	800b38a <_dtoa_r+0xaa2>
 800b384:	d1e5      	bne.n	800b352 <_dtoa_r+0xa6a>
 800b386:	07e3      	lsls	r3, r4, #31
 800b388:	d5e3      	bpl.n	800b352 <_dtoa_r+0xa6a>
 800b38a:	2c39      	cmp	r4, #57	; 0x39
 800b38c:	d1df      	bne.n	800b34e <_dtoa_r+0xa66>
 800b38e:	2339      	movs	r3, #57	; 0x39
 800b390:	9a07      	ldr	r2, [sp, #28]
 800b392:	7013      	strb	r3, [r2, #0]
 800b394:	9b08      	ldr	r3, [sp, #32]
 800b396:	9308      	str	r3, [sp, #32]
 800b398:	3b01      	subs	r3, #1
 800b39a:	781a      	ldrb	r2, [r3, #0]
 800b39c:	2a39      	cmp	r2, #57	; 0x39
 800b39e:	d063      	beq.n	800b468 <_dtoa_r+0xb80>
 800b3a0:	3201      	adds	r2, #1
 800b3a2:	701a      	strb	r2, [r3, #0]
 800b3a4:	e749      	b.n	800b23a <_dtoa_r+0x952>
 800b3a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	dd03      	ble.n	800b3b4 <_dtoa_r+0xacc>
 800b3ac:	2c39      	cmp	r4, #57	; 0x39
 800b3ae:	d0ee      	beq.n	800b38e <_dtoa_r+0xaa6>
 800b3b0:	3401      	adds	r4, #1
 800b3b2:	e7ce      	b.n	800b352 <_dtoa_r+0xa6a>
 800b3b4:	9b07      	ldr	r3, [sp, #28]
 800b3b6:	9a07      	ldr	r2, [sp, #28]
 800b3b8:	701c      	strb	r4, [r3, #0]
 800b3ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d03e      	beq.n	800b43e <_dtoa_r+0xb56>
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	220a      	movs	r2, #10
 800b3c4:	9905      	ldr	r1, [sp, #20]
 800b3c6:	9804      	ldr	r0, [sp, #16]
 800b3c8:	f000 fbe4 	bl	800bb94 <__multadd>
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	9005      	str	r0, [sp, #20]
 800b3d0:	220a      	movs	r2, #10
 800b3d2:	0029      	movs	r1, r5
 800b3d4:	9804      	ldr	r0, [sp, #16]
 800b3d6:	42bd      	cmp	r5, r7
 800b3d8:	d106      	bne.n	800b3e8 <_dtoa_r+0xb00>
 800b3da:	f000 fbdb 	bl	800bb94 <__multadd>
 800b3de:	0005      	movs	r5, r0
 800b3e0:	0007      	movs	r7, r0
 800b3e2:	9b08      	ldr	r3, [sp, #32]
 800b3e4:	9307      	str	r3, [sp, #28]
 800b3e6:	e782      	b.n	800b2ee <_dtoa_r+0xa06>
 800b3e8:	f000 fbd4 	bl	800bb94 <__multadd>
 800b3ec:	0039      	movs	r1, r7
 800b3ee:	0005      	movs	r5, r0
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	220a      	movs	r2, #10
 800b3f4:	9804      	ldr	r0, [sp, #16]
 800b3f6:	f000 fbcd 	bl	800bb94 <__multadd>
 800b3fa:	0007      	movs	r7, r0
 800b3fc:	e7f1      	b.n	800b3e2 <_dtoa_r+0xafa>
 800b3fe:	9b07      	ldr	r3, [sp, #28]
 800b400:	930b      	str	r3, [sp, #44]	; 0x2c
 800b402:	2500      	movs	r5, #0
 800b404:	0031      	movs	r1, r6
 800b406:	9805      	ldr	r0, [sp, #20]
 800b408:	f7ff f9e2 	bl	800a7d0 <quorem>
 800b40c:	9b06      	ldr	r3, [sp, #24]
 800b40e:	3030      	adds	r0, #48	; 0x30
 800b410:	5558      	strb	r0, [r3, r5]
 800b412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b414:	3501      	adds	r5, #1
 800b416:	0004      	movs	r4, r0
 800b418:	42ab      	cmp	r3, r5
 800b41a:	dd07      	ble.n	800b42c <_dtoa_r+0xb44>
 800b41c:	2300      	movs	r3, #0
 800b41e:	220a      	movs	r2, #10
 800b420:	9905      	ldr	r1, [sp, #20]
 800b422:	9804      	ldr	r0, [sp, #16]
 800b424:	f000 fbb6 	bl	800bb94 <__multadd>
 800b428:	9005      	str	r0, [sp, #20]
 800b42a:	e7eb      	b.n	800b404 <_dtoa_r+0xb1c>
 800b42c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b42e:	2001      	movs	r0, #1
 800b430:	2b00      	cmp	r3, #0
 800b432:	dd00      	ble.n	800b436 <_dtoa_r+0xb4e>
 800b434:	0018      	movs	r0, r3
 800b436:	2500      	movs	r5, #0
 800b438:	9b06      	ldr	r3, [sp, #24]
 800b43a:	181b      	adds	r3, r3, r0
 800b43c:	9308      	str	r3, [sp, #32]
 800b43e:	9905      	ldr	r1, [sp, #20]
 800b440:	2201      	movs	r2, #1
 800b442:	9804      	ldr	r0, [sp, #16]
 800b444:	f000 fd3a 	bl	800bebc <__lshift>
 800b448:	0031      	movs	r1, r6
 800b44a:	9005      	str	r0, [sp, #20]
 800b44c:	f000 fda4 	bl	800bf98 <__mcmp>
 800b450:	2800      	cmp	r0, #0
 800b452:	dc9f      	bgt.n	800b394 <_dtoa_r+0xaac>
 800b454:	d101      	bne.n	800b45a <_dtoa_r+0xb72>
 800b456:	07e3      	lsls	r3, r4, #31
 800b458:	d49c      	bmi.n	800b394 <_dtoa_r+0xaac>
 800b45a:	9b08      	ldr	r3, [sp, #32]
 800b45c:	9308      	str	r3, [sp, #32]
 800b45e:	3b01      	subs	r3, #1
 800b460:	781a      	ldrb	r2, [r3, #0]
 800b462:	2a30      	cmp	r2, #48	; 0x30
 800b464:	d0fa      	beq.n	800b45c <_dtoa_r+0xb74>
 800b466:	e6e8      	b.n	800b23a <_dtoa_r+0x952>
 800b468:	9a06      	ldr	r2, [sp, #24]
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d193      	bne.n	800b396 <_dtoa_r+0xaae>
 800b46e:	9b03      	ldr	r3, [sp, #12]
 800b470:	3301      	adds	r3, #1
 800b472:	9303      	str	r3, [sp, #12]
 800b474:	2331      	movs	r3, #49	; 0x31
 800b476:	7013      	strb	r3, [r2, #0]
 800b478:	e6df      	b.n	800b23a <_dtoa_r+0x952>
 800b47a:	4b09      	ldr	r3, [pc, #36]	; (800b4a0 <_dtoa_r+0xbb8>)
 800b47c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b47e:	9306      	str	r3, [sp, #24]
 800b480:	4b08      	ldr	r3, [pc, #32]	; (800b4a4 <_dtoa_r+0xbbc>)
 800b482:	2a00      	cmp	r2, #0
 800b484:	d001      	beq.n	800b48a <_dtoa_r+0xba2>
 800b486:	f7ff fa60 	bl	800a94a <_dtoa_r+0x62>
 800b48a:	f7ff fa60 	bl	800a94e <_dtoa_r+0x66>
 800b48e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b490:	2b00      	cmp	r3, #0
 800b492:	dcb6      	bgt.n	800b402 <_dtoa_r+0xb1a>
 800b494:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b496:	2b02      	cmp	r3, #2
 800b498:	dd00      	ble.n	800b49c <_dtoa_r+0xbb4>
 800b49a:	e6b8      	b.n	800b20e <_dtoa_r+0x926>
 800b49c:	e7b1      	b.n	800b402 <_dtoa_r+0xb1a>
 800b49e:	46c0      	nop			; (mov r8, r8)
 800b4a0:	0800e7e9 	.word	0x0800e7e9
 800b4a4:	0800e7f1 	.word	0x0800e7f1

0800b4a8 <__libc_fini_array>:
 800b4a8:	b570      	push	{r4, r5, r6, lr}
 800b4aa:	4d07      	ldr	r5, [pc, #28]	; (800b4c8 <__libc_fini_array+0x20>)
 800b4ac:	4c07      	ldr	r4, [pc, #28]	; (800b4cc <__libc_fini_array+0x24>)
 800b4ae:	1b64      	subs	r4, r4, r5
 800b4b0:	10a4      	asrs	r4, r4, #2
 800b4b2:	2c00      	cmp	r4, #0
 800b4b4:	d102      	bne.n	800b4bc <__libc_fini_array+0x14>
 800b4b6:	f002 fd59 	bl	800df6c <_fini>
 800b4ba:	bd70      	pop	{r4, r5, r6, pc}
 800b4bc:	3c01      	subs	r4, #1
 800b4be:	00a3      	lsls	r3, r4, #2
 800b4c0:	58eb      	ldr	r3, [r5, r3]
 800b4c2:	4798      	blx	r3
 800b4c4:	e7f5      	b.n	800b4b2 <__libc_fini_array+0xa>
 800b4c6:	46c0      	nop			; (mov r8, r8)
 800b4c8:	0800ea34 	.word	0x0800ea34
 800b4cc:	0800ea38 	.word	0x0800ea38

0800b4d0 <_malloc_trim_r>:
 800b4d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4d2:	0004      	movs	r4, r0
 800b4d4:	2008      	movs	r0, #8
 800b4d6:	000d      	movs	r5, r1
 800b4d8:	f000 ff4e 	bl	800c378 <sysconf>
 800b4dc:	0006      	movs	r6, r0
 800b4de:	0020      	movs	r0, r4
 800b4e0:	f000 fb16 	bl	800bb10 <__malloc_lock>
 800b4e4:	2203      	movs	r2, #3
 800b4e6:	4f21      	ldr	r7, [pc, #132]	; (800b56c <_malloc_trim_r+0x9c>)
 800b4e8:	0031      	movs	r1, r6
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	4393      	bics	r3, r2
 800b4f0:	1b58      	subs	r0, r3, r5
 800b4f2:	3811      	subs	r0, #17
 800b4f4:	1980      	adds	r0, r0, r6
 800b4f6:	9301      	str	r3, [sp, #4]
 800b4f8:	f7f4 fe22 	bl	8000140 <__udivsi3>
 800b4fc:	1e45      	subs	r5, r0, #1
 800b4fe:	4375      	muls	r5, r6
 800b500:	42ae      	cmp	r6, r5
 800b502:	dd04      	ble.n	800b50e <_malloc_trim_r+0x3e>
 800b504:	0020      	movs	r0, r4
 800b506:	f000 fb0b 	bl	800bb20 <__malloc_unlock>
 800b50a:	2000      	movs	r0, #0
 800b50c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b50e:	2100      	movs	r1, #0
 800b510:	0020      	movs	r0, r4
 800b512:	f000 fe8b 	bl	800c22c <_sbrk_r>
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	9a01      	ldr	r2, [sp, #4]
 800b51a:	189b      	adds	r3, r3, r2
 800b51c:	4298      	cmp	r0, r3
 800b51e:	d1f1      	bne.n	800b504 <_malloc_trim_r+0x34>
 800b520:	0020      	movs	r0, r4
 800b522:	4269      	negs	r1, r5
 800b524:	f000 fe82 	bl	800c22c <_sbrk_r>
 800b528:	1c43      	adds	r3, r0, #1
 800b52a:	d110      	bne.n	800b54e <_malloc_trim_r+0x7e>
 800b52c:	2100      	movs	r1, #0
 800b52e:	0020      	movs	r0, r4
 800b530:	f000 fe7c 	bl	800c22c <_sbrk_r>
 800b534:	68ba      	ldr	r2, [r7, #8]
 800b536:	1a81      	subs	r1, r0, r2
 800b538:	290f      	cmp	r1, #15
 800b53a:	dde3      	ble.n	800b504 <_malloc_trim_r+0x34>
 800b53c:	4b0c      	ldr	r3, [pc, #48]	; (800b570 <_malloc_trim_r+0xa0>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	1ac0      	subs	r0, r0, r3
 800b542:	4b0c      	ldr	r3, [pc, #48]	; (800b574 <_malloc_trim_r+0xa4>)
 800b544:	6018      	str	r0, [r3, #0]
 800b546:	2301      	movs	r3, #1
 800b548:	430b      	orrs	r3, r1
 800b54a:	6053      	str	r3, [r2, #4]
 800b54c:	e7da      	b.n	800b504 <_malloc_trim_r+0x34>
 800b54e:	2601      	movs	r6, #1
 800b550:	9b01      	ldr	r3, [sp, #4]
 800b552:	68ba      	ldr	r2, [r7, #8]
 800b554:	1b5b      	subs	r3, r3, r5
 800b556:	4333      	orrs	r3, r6
 800b558:	6053      	str	r3, [r2, #4]
 800b55a:	4b06      	ldr	r3, [pc, #24]	; (800b574 <_malloc_trim_r+0xa4>)
 800b55c:	0020      	movs	r0, r4
 800b55e:	681a      	ldr	r2, [r3, #0]
 800b560:	1b55      	subs	r5, r2, r5
 800b562:	601d      	str	r5, [r3, #0]
 800b564:	f000 fadc 	bl	800bb20 <__malloc_unlock>
 800b568:	0030      	movs	r0, r6
 800b56a:	e7cf      	b.n	800b50c <_malloc_trim_r+0x3c>
 800b56c:	20000444 	.word	0x20000444
 800b570:	2000084c 	.word	0x2000084c
 800b574:	20003b48 	.word	0x20003b48

0800b578 <_free_r>:
 800b578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b57a:	1e0d      	subs	r5, r1, #0
 800b57c:	9001      	str	r0, [sp, #4]
 800b57e:	d02d      	beq.n	800b5dc <_free_r+0x64>
 800b580:	f000 fac6 	bl	800bb10 <__malloc_lock>
 800b584:	2301      	movs	r3, #1
 800b586:	0029      	movs	r1, r5
 800b588:	469c      	mov	ip, r3
 800b58a:	3908      	subs	r1, #8
 800b58c:	684f      	ldr	r7, [r1, #4]
 800b58e:	4662      	mov	r2, ip
 800b590:	003b      	movs	r3, r7
 800b592:	4666      	mov	r6, ip
 800b594:	4393      	bics	r3, r2
 800b596:	18c8      	adds	r0, r1, r3
 800b598:	6845      	ldr	r5, [r0, #4]
 800b59a:	3202      	adds	r2, #2
 800b59c:	4395      	bics	r5, r2
 800b59e:	4a4a      	ldr	r2, [pc, #296]	; (800b6c8 <_free_r+0x150>)
 800b5a0:	4037      	ands	r7, r6
 800b5a2:	6896      	ldr	r6, [r2, #8]
 800b5a4:	4286      	cmp	r6, r0
 800b5a6:	d11a      	bne.n	800b5de <_free_r+0x66>
 800b5a8:	195b      	adds	r3, r3, r5
 800b5aa:	2f00      	cmp	r7, #0
 800b5ac:	d106      	bne.n	800b5bc <_free_r+0x44>
 800b5ae:	6808      	ldr	r0, [r1, #0]
 800b5b0:	1a09      	subs	r1, r1, r0
 800b5b2:	688d      	ldr	r5, [r1, #8]
 800b5b4:	181b      	adds	r3, r3, r0
 800b5b6:	68c8      	ldr	r0, [r1, #12]
 800b5b8:	60e8      	str	r0, [r5, #12]
 800b5ba:	6085      	str	r5, [r0, #8]
 800b5bc:	2001      	movs	r0, #1
 800b5be:	4318      	orrs	r0, r3
 800b5c0:	6048      	str	r0, [r1, #4]
 800b5c2:	6091      	str	r1, [r2, #8]
 800b5c4:	4a41      	ldr	r2, [pc, #260]	; (800b6cc <_free_r+0x154>)
 800b5c6:	6812      	ldr	r2, [r2, #0]
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d804      	bhi.n	800b5d6 <_free_r+0x5e>
 800b5cc:	4b40      	ldr	r3, [pc, #256]	; (800b6d0 <_free_r+0x158>)
 800b5ce:	9801      	ldr	r0, [sp, #4]
 800b5d0:	6819      	ldr	r1, [r3, #0]
 800b5d2:	f7ff ff7d 	bl	800b4d0 <_malloc_trim_r>
 800b5d6:	9801      	ldr	r0, [sp, #4]
 800b5d8:	f000 faa2 	bl	800bb20 <__malloc_unlock>
 800b5dc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b5de:	2600      	movs	r6, #0
 800b5e0:	6045      	str	r5, [r0, #4]
 800b5e2:	42b7      	cmp	r7, r6
 800b5e4:	d109      	bne.n	800b5fa <_free_r+0x82>
 800b5e6:	680f      	ldr	r7, [r1, #0]
 800b5e8:	4c3a      	ldr	r4, [pc, #232]	; (800b6d4 <_free_r+0x15c>)
 800b5ea:	1bc9      	subs	r1, r1, r7
 800b5ec:	19db      	adds	r3, r3, r7
 800b5ee:	688f      	ldr	r7, [r1, #8]
 800b5f0:	42a7      	cmp	r7, r4
 800b5f2:	d02c      	beq.n	800b64e <_free_r+0xd6>
 800b5f4:	68cc      	ldr	r4, [r1, #12]
 800b5f6:	60fc      	str	r4, [r7, #12]
 800b5f8:	60a7      	str	r7, [r4, #8]
 800b5fa:	1947      	adds	r7, r0, r5
 800b5fc:	687c      	ldr	r4, [r7, #4]
 800b5fe:	2701      	movs	r7, #1
 800b600:	423c      	tst	r4, r7
 800b602:	d10b      	bne.n	800b61c <_free_r+0xa4>
 800b604:	195b      	adds	r3, r3, r5
 800b606:	6885      	ldr	r5, [r0, #8]
 800b608:	2e00      	cmp	r6, #0
 800b60a:	d122      	bne.n	800b652 <_free_r+0xda>
 800b60c:	4c31      	ldr	r4, [pc, #196]	; (800b6d4 <_free_r+0x15c>)
 800b60e:	42a5      	cmp	r5, r4
 800b610:	d11f      	bne.n	800b652 <_free_r+0xda>
 800b612:	003e      	movs	r6, r7
 800b614:	6151      	str	r1, [r2, #20]
 800b616:	6111      	str	r1, [r2, #16]
 800b618:	60cd      	str	r5, [r1, #12]
 800b61a:	608d      	str	r5, [r1, #8]
 800b61c:	2501      	movs	r5, #1
 800b61e:	0028      	movs	r0, r5
 800b620:	4318      	orrs	r0, r3
 800b622:	6048      	str	r0, [r1, #4]
 800b624:	50cb      	str	r3, [r1, r3]
 800b626:	2e00      	cmp	r6, #0
 800b628:	d1d5      	bne.n	800b5d6 <_free_r+0x5e>
 800b62a:	2080      	movs	r0, #128	; 0x80
 800b62c:	0080      	lsls	r0, r0, #2
 800b62e:	4283      	cmp	r3, r0
 800b630:	d213      	bcs.n	800b65a <_free_r+0xe2>
 800b632:	08d8      	lsrs	r0, r3, #3
 800b634:	095b      	lsrs	r3, r3, #5
 800b636:	409d      	lsls	r5, r3
 800b638:	6853      	ldr	r3, [r2, #4]
 800b63a:	00c0      	lsls	r0, r0, #3
 800b63c:	431d      	orrs	r5, r3
 800b63e:	6055      	str	r5, [r2, #4]
 800b640:	1882      	adds	r2, r0, r2
 800b642:	6893      	ldr	r3, [r2, #8]
 800b644:	60ca      	str	r2, [r1, #12]
 800b646:	608b      	str	r3, [r1, #8]
 800b648:	6091      	str	r1, [r2, #8]
 800b64a:	60d9      	str	r1, [r3, #12]
 800b64c:	e7c3      	b.n	800b5d6 <_free_r+0x5e>
 800b64e:	4666      	mov	r6, ip
 800b650:	e7d3      	b.n	800b5fa <_free_r+0x82>
 800b652:	68c0      	ldr	r0, [r0, #12]
 800b654:	60e8      	str	r0, [r5, #12]
 800b656:	6085      	str	r5, [r0, #8]
 800b658:	e7e0      	b.n	800b61c <_free_r+0xa4>
 800b65a:	0a5d      	lsrs	r5, r3, #9
 800b65c:	2d04      	cmp	r5, #4
 800b65e:	d812      	bhi.n	800b686 <_free_r+0x10e>
 800b660:	0998      	lsrs	r0, r3, #6
 800b662:	3038      	adds	r0, #56	; 0x38
 800b664:	00c6      	lsls	r6, r0, #3
 800b666:	18b6      	adds	r6, r6, r2
 800b668:	68b5      	ldr	r5, [r6, #8]
 800b66a:	2703      	movs	r7, #3
 800b66c:	42ae      	cmp	r6, r5
 800b66e:	d125      	bne.n	800b6bc <_free_r+0x144>
 800b670:	2301      	movs	r3, #1
 800b672:	1080      	asrs	r0, r0, #2
 800b674:	4083      	lsls	r3, r0
 800b676:	6850      	ldr	r0, [r2, #4]
 800b678:	4303      	orrs	r3, r0
 800b67a:	6053      	str	r3, [r2, #4]
 800b67c:	60ce      	str	r6, [r1, #12]
 800b67e:	608d      	str	r5, [r1, #8]
 800b680:	60b1      	str	r1, [r6, #8]
 800b682:	60e9      	str	r1, [r5, #12]
 800b684:	e7a7      	b.n	800b5d6 <_free_r+0x5e>
 800b686:	2d14      	cmp	r5, #20
 800b688:	d802      	bhi.n	800b690 <_free_r+0x118>
 800b68a:	0028      	movs	r0, r5
 800b68c:	305b      	adds	r0, #91	; 0x5b
 800b68e:	e7e9      	b.n	800b664 <_free_r+0xec>
 800b690:	2d54      	cmp	r5, #84	; 0x54
 800b692:	d802      	bhi.n	800b69a <_free_r+0x122>
 800b694:	0b18      	lsrs	r0, r3, #12
 800b696:	306e      	adds	r0, #110	; 0x6e
 800b698:	e7e4      	b.n	800b664 <_free_r+0xec>
 800b69a:	20aa      	movs	r0, #170	; 0xaa
 800b69c:	0040      	lsls	r0, r0, #1
 800b69e:	4285      	cmp	r5, r0
 800b6a0:	d802      	bhi.n	800b6a8 <_free_r+0x130>
 800b6a2:	0bd8      	lsrs	r0, r3, #15
 800b6a4:	3077      	adds	r0, #119	; 0x77
 800b6a6:	e7dd      	b.n	800b664 <_free_r+0xec>
 800b6a8:	4e0b      	ldr	r6, [pc, #44]	; (800b6d8 <_free_r+0x160>)
 800b6aa:	207e      	movs	r0, #126	; 0x7e
 800b6ac:	42b5      	cmp	r5, r6
 800b6ae:	d8d9      	bhi.n	800b664 <_free_r+0xec>
 800b6b0:	0c98      	lsrs	r0, r3, #18
 800b6b2:	307c      	adds	r0, #124	; 0x7c
 800b6b4:	e7d6      	b.n	800b664 <_free_r+0xec>
 800b6b6:	68ad      	ldr	r5, [r5, #8]
 800b6b8:	42ae      	cmp	r6, r5
 800b6ba:	d003      	beq.n	800b6c4 <_free_r+0x14c>
 800b6bc:	686a      	ldr	r2, [r5, #4]
 800b6be:	43ba      	bics	r2, r7
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d8f8      	bhi.n	800b6b6 <_free_r+0x13e>
 800b6c4:	68ee      	ldr	r6, [r5, #12]
 800b6c6:	e7d9      	b.n	800b67c <_free_r+0x104>
 800b6c8:	20000444 	.word	0x20000444
 800b6cc:	20000850 	.word	0x20000850
 800b6d0:	20003b78 	.word	0x20003b78
 800b6d4:	2000044c 	.word	0x2000044c
 800b6d8:	00000554 	.word	0x00000554

0800b6dc <_localeconv_r>:
 800b6dc:	4800      	ldr	r0, [pc, #0]	; (800b6e0 <_localeconv_r+0x4>)
 800b6de:	4770      	bx	lr
 800b6e0:	20000944 	.word	0x20000944

0800b6e4 <__retarget_lock_init_recursive>:
 800b6e4:	4770      	bx	lr

0800b6e6 <__retarget_lock_close_recursive>:
 800b6e6:	4770      	bx	lr

0800b6e8 <__retarget_lock_acquire_recursive>:
 800b6e8:	4770      	bx	lr

0800b6ea <__retarget_lock_release_recursive>:
 800b6ea:	4770      	bx	lr

0800b6ec <_malloc_r>:
 800b6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6ee:	000d      	movs	r5, r1
 800b6f0:	b087      	sub	sp, #28
 800b6f2:	350b      	adds	r5, #11
 800b6f4:	9001      	str	r0, [sp, #4]
 800b6f6:	2d16      	cmp	r5, #22
 800b6f8:	d908      	bls.n	800b70c <_malloc_r+0x20>
 800b6fa:	2207      	movs	r2, #7
 800b6fc:	4395      	bics	r5, r2
 800b6fe:	d506      	bpl.n	800b70e <_malloc_r+0x22>
 800b700:	230c      	movs	r3, #12
 800b702:	9a01      	ldr	r2, [sp, #4]
 800b704:	6013      	str	r3, [r2, #0]
 800b706:	2000      	movs	r0, #0
 800b708:	b007      	add	sp, #28
 800b70a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b70c:	2510      	movs	r5, #16
 800b70e:	42a9      	cmp	r1, r5
 800b710:	d8f6      	bhi.n	800b700 <_malloc_r+0x14>
 800b712:	9801      	ldr	r0, [sp, #4]
 800b714:	f000 f9fc 	bl	800bb10 <__malloc_lock>
 800b718:	23fc      	movs	r3, #252	; 0xfc
 800b71a:	48bd      	ldr	r0, [pc, #756]	; (800ba10 <_malloc_r+0x324>)
 800b71c:	005b      	lsls	r3, r3, #1
 800b71e:	429d      	cmp	r5, r3
 800b720:	d21a      	bcs.n	800b758 <_malloc_r+0x6c>
 800b722:	002a      	movs	r2, r5
 800b724:	3208      	adds	r2, #8
 800b726:	1882      	adds	r2, r0, r2
 800b728:	0011      	movs	r1, r2
 800b72a:	6854      	ldr	r4, [r2, #4]
 800b72c:	3908      	subs	r1, #8
 800b72e:	08eb      	lsrs	r3, r5, #3
 800b730:	428c      	cmp	r4, r1
 800b732:	d103      	bne.n	800b73c <_malloc_r+0x50>
 800b734:	68d4      	ldr	r4, [r2, #12]
 800b736:	3302      	adds	r3, #2
 800b738:	42a2      	cmp	r2, r4
 800b73a:	d023      	beq.n	800b784 <_malloc_r+0x98>
 800b73c:	2303      	movs	r3, #3
 800b73e:	6862      	ldr	r2, [r4, #4]
 800b740:	68a1      	ldr	r1, [r4, #8]
 800b742:	439a      	bics	r2, r3
 800b744:	0013      	movs	r3, r2
 800b746:	68e2      	ldr	r2, [r4, #12]
 800b748:	18e3      	adds	r3, r4, r3
 800b74a:	60ca      	str	r2, [r1, #12]
 800b74c:	6091      	str	r1, [r2, #8]
 800b74e:	2201      	movs	r2, #1
 800b750:	6859      	ldr	r1, [r3, #4]
 800b752:	430a      	orrs	r2, r1
 800b754:	605a      	str	r2, [r3, #4]
 800b756:	e02b      	b.n	800b7b0 <_malloc_r+0xc4>
 800b758:	233f      	movs	r3, #63	; 0x3f
 800b75a:	0a6a      	lsrs	r2, r5, #9
 800b75c:	d003      	beq.n	800b766 <_malloc_r+0x7a>
 800b75e:	2a04      	cmp	r2, #4
 800b760:	d82c      	bhi.n	800b7bc <_malloc_r+0xd0>
 800b762:	09ab      	lsrs	r3, r5, #6
 800b764:	3338      	adds	r3, #56	; 0x38
 800b766:	2203      	movs	r2, #3
 800b768:	4694      	mov	ip, r2
 800b76a:	00d9      	lsls	r1, r3, #3
 800b76c:	1809      	adds	r1, r1, r0
 800b76e:	68cc      	ldr	r4, [r1, #12]
 800b770:	428c      	cmp	r4, r1
 800b772:	d006      	beq.n	800b782 <_malloc_r+0x96>
 800b774:	4666      	mov	r6, ip
 800b776:	6862      	ldr	r2, [r4, #4]
 800b778:	43b2      	bics	r2, r6
 800b77a:	1b57      	subs	r7, r2, r5
 800b77c:	2f0f      	cmp	r7, #15
 800b77e:	dd35      	ble.n	800b7ec <_malloc_r+0x100>
 800b780:	3b01      	subs	r3, #1
 800b782:	3301      	adds	r3, #1
 800b784:	6904      	ldr	r4, [r0, #16]
 800b786:	49a3      	ldr	r1, [pc, #652]	; (800ba14 <_malloc_r+0x328>)
 800b788:	428c      	cmp	r4, r1
 800b78a:	d056      	beq.n	800b83a <_malloc_r+0x14e>
 800b78c:	2203      	movs	r2, #3
 800b78e:	6866      	ldr	r6, [r4, #4]
 800b790:	4396      	bics	r6, r2
 800b792:	0032      	movs	r2, r6
 800b794:	1b76      	subs	r6, r6, r5
 800b796:	2e0f      	cmp	r6, #15
 800b798:	dd36      	ble.n	800b808 <_malloc_r+0x11c>
 800b79a:	2701      	movs	r7, #1
 800b79c:	1963      	adds	r3, r4, r5
 800b79e:	433d      	orrs	r5, r7
 800b7a0:	4337      	orrs	r7, r6
 800b7a2:	6065      	str	r5, [r4, #4]
 800b7a4:	6143      	str	r3, [r0, #20]
 800b7a6:	6103      	str	r3, [r0, #16]
 800b7a8:	60d9      	str	r1, [r3, #12]
 800b7aa:	6099      	str	r1, [r3, #8]
 800b7ac:	605f      	str	r7, [r3, #4]
 800b7ae:	50a6      	str	r6, [r4, r2]
 800b7b0:	9801      	ldr	r0, [sp, #4]
 800b7b2:	f000 f9b5 	bl	800bb20 <__malloc_unlock>
 800b7b6:	0020      	movs	r0, r4
 800b7b8:	3008      	adds	r0, #8
 800b7ba:	e7a5      	b.n	800b708 <_malloc_r+0x1c>
 800b7bc:	2a14      	cmp	r2, #20
 800b7be:	d802      	bhi.n	800b7c6 <_malloc_r+0xda>
 800b7c0:	0013      	movs	r3, r2
 800b7c2:	335b      	adds	r3, #91	; 0x5b
 800b7c4:	e7cf      	b.n	800b766 <_malloc_r+0x7a>
 800b7c6:	2a54      	cmp	r2, #84	; 0x54
 800b7c8:	d802      	bhi.n	800b7d0 <_malloc_r+0xe4>
 800b7ca:	0b2b      	lsrs	r3, r5, #12
 800b7cc:	336e      	adds	r3, #110	; 0x6e
 800b7ce:	e7ca      	b.n	800b766 <_malloc_r+0x7a>
 800b7d0:	23aa      	movs	r3, #170	; 0xaa
 800b7d2:	005b      	lsls	r3, r3, #1
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d802      	bhi.n	800b7de <_malloc_r+0xf2>
 800b7d8:	0beb      	lsrs	r3, r5, #15
 800b7da:	3377      	adds	r3, #119	; 0x77
 800b7dc:	e7c3      	b.n	800b766 <_malloc_r+0x7a>
 800b7de:	498e      	ldr	r1, [pc, #568]	; (800ba18 <_malloc_r+0x32c>)
 800b7e0:	237e      	movs	r3, #126	; 0x7e
 800b7e2:	428a      	cmp	r2, r1
 800b7e4:	d8bf      	bhi.n	800b766 <_malloc_r+0x7a>
 800b7e6:	0cab      	lsrs	r3, r5, #18
 800b7e8:	337c      	adds	r3, #124	; 0x7c
 800b7ea:	e7bc      	b.n	800b766 <_malloc_r+0x7a>
 800b7ec:	68e6      	ldr	r6, [r4, #12]
 800b7ee:	2f00      	cmp	r7, #0
 800b7f0:	db08      	blt.n	800b804 <_malloc_r+0x118>
 800b7f2:	68a3      	ldr	r3, [r4, #8]
 800b7f4:	60de      	str	r6, [r3, #12]
 800b7f6:	60b3      	str	r3, [r6, #8]
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	18a2      	adds	r2, r4, r2
 800b7fc:	6851      	ldr	r1, [r2, #4]
 800b7fe:	430b      	orrs	r3, r1
 800b800:	6053      	str	r3, [r2, #4]
 800b802:	e7d5      	b.n	800b7b0 <_malloc_r+0xc4>
 800b804:	0034      	movs	r4, r6
 800b806:	e7b3      	b.n	800b770 <_malloc_r+0x84>
 800b808:	6141      	str	r1, [r0, #20]
 800b80a:	6101      	str	r1, [r0, #16]
 800b80c:	2e00      	cmp	r6, #0
 800b80e:	daf3      	bge.n	800b7f8 <_malloc_r+0x10c>
 800b810:	6841      	ldr	r1, [r0, #4]
 800b812:	468c      	mov	ip, r1
 800b814:	2180      	movs	r1, #128	; 0x80
 800b816:	0089      	lsls	r1, r1, #2
 800b818:	428a      	cmp	r2, r1
 800b81a:	d300      	bcc.n	800b81e <_malloc_r+0x132>
 800b81c:	e089      	b.n	800b932 <_malloc_r+0x246>
 800b81e:	0956      	lsrs	r6, r2, #5
 800b820:	08d1      	lsrs	r1, r2, #3
 800b822:	2201      	movs	r2, #1
 800b824:	40b2      	lsls	r2, r6
 800b826:	4666      	mov	r6, ip
 800b828:	00c9      	lsls	r1, r1, #3
 800b82a:	4332      	orrs	r2, r6
 800b82c:	6042      	str	r2, [r0, #4]
 800b82e:	1808      	adds	r0, r1, r0
 800b830:	6882      	ldr	r2, [r0, #8]
 800b832:	60e0      	str	r0, [r4, #12]
 800b834:	60a2      	str	r2, [r4, #8]
 800b836:	6084      	str	r4, [r0, #8]
 800b838:	60d4      	str	r4, [r2, #12]
 800b83a:	2201      	movs	r2, #1
 800b83c:	4874      	ldr	r0, [pc, #464]	; (800ba10 <_malloc_r+0x324>)
 800b83e:	1099      	asrs	r1, r3, #2
 800b840:	408a      	lsls	r2, r1
 800b842:	6841      	ldr	r1, [r0, #4]
 800b844:	4291      	cmp	r1, r2
 800b846:	d325      	bcc.n	800b894 <_malloc_r+0x1a8>
 800b848:	420a      	tst	r2, r1
 800b84a:	d105      	bne.n	800b858 <_malloc_r+0x16c>
 800b84c:	2403      	movs	r4, #3
 800b84e:	43a3      	bics	r3, r4
 800b850:	0052      	lsls	r2, r2, #1
 800b852:	3304      	adds	r3, #4
 800b854:	420a      	tst	r2, r1
 800b856:	d0fb      	beq.n	800b850 <_malloc_r+0x164>
 800b858:	00d9      	lsls	r1, r3, #3
 800b85a:	1841      	adds	r1, r0, r1
 800b85c:	468c      	mov	ip, r1
 800b85e:	9302      	str	r3, [sp, #8]
 800b860:	68cc      	ldr	r4, [r1, #12]
 800b862:	428c      	cmp	r4, r1
 800b864:	d000      	beq.n	800b868 <_malloc_r+0x17c>
 800b866:	e09b      	b.n	800b9a0 <_malloc_r+0x2b4>
 800b868:	2603      	movs	r6, #3
 800b86a:	9c02      	ldr	r4, [sp, #8]
 800b86c:	3108      	adds	r1, #8
 800b86e:	3401      	adds	r4, #1
 800b870:	9402      	str	r4, [sp, #8]
 800b872:	4234      	tst	r4, r6
 800b874:	d1f4      	bne.n	800b860 <_malloc_r+0x174>
 800b876:	2103      	movs	r1, #3
 800b878:	420b      	tst	r3, r1
 800b87a:	d000      	beq.n	800b87e <_malloc_r+0x192>
 800b87c:	e0b7      	b.n	800b9ee <_malloc_r+0x302>
 800b87e:	6843      	ldr	r3, [r0, #4]
 800b880:	4393      	bics	r3, r2
 800b882:	6043      	str	r3, [r0, #4]
 800b884:	4b62      	ldr	r3, [pc, #392]	; (800ba10 <_malloc_r+0x324>)
 800b886:	0052      	lsls	r2, r2, #1
 800b888:	6859      	ldr	r1, [r3, #4]
 800b88a:	4291      	cmp	r1, r2
 800b88c:	d302      	bcc.n	800b894 <_malloc_r+0x1a8>
 800b88e:	2a00      	cmp	r2, #0
 800b890:	d000      	beq.n	800b894 <_malloc_r+0x1a8>
 800b892:	e0bb      	b.n	800ba0c <_malloc_r+0x320>
 800b894:	2303      	movs	r3, #3
 800b896:	6886      	ldr	r6, [r0, #8]
 800b898:	6872      	ldr	r2, [r6, #4]
 800b89a:	439a      	bics	r2, r3
 800b89c:	9202      	str	r2, [sp, #8]
 800b89e:	42aa      	cmp	r2, r5
 800b8a0:	d303      	bcc.n	800b8aa <_malloc_r+0x1be>
 800b8a2:	1b51      	subs	r1, r2, r5
 800b8a4:	290f      	cmp	r1, #15
 800b8a6:	dd00      	ble.n	800b8aa <_malloc_r+0x1be>
 800b8a8:	e123      	b.n	800baf2 <_malloc_r+0x406>
 800b8aa:	9b02      	ldr	r3, [sp, #8]
 800b8ac:	2008      	movs	r0, #8
 800b8ae:	18f3      	adds	r3, r6, r3
 800b8b0:	9303      	str	r3, [sp, #12]
 800b8b2:	4b5a      	ldr	r3, [pc, #360]	; (800ba1c <_malloc_r+0x330>)
 800b8b4:	681f      	ldr	r7, [r3, #0]
 800b8b6:	f000 fd5f 	bl	800c378 <sysconf>
 800b8ba:	4b59      	ldr	r3, [pc, #356]	; (800ba20 <_malloc_r+0x334>)
 800b8bc:	3710      	adds	r7, #16
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	197f      	adds	r7, r7, r5
 800b8c2:	9004      	str	r0, [sp, #16]
 800b8c4:	3301      	adds	r3, #1
 800b8c6:	d003      	beq.n	800b8d0 <_malloc_r+0x1e4>
 800b8c8:	3f01      	subs	r7, #1
 800b8ca:	183f      	adds	r7, r7, r0
 800b8cc:	4243      	negs	r3, r0
 800b8ce:	401f      	ands	r7, r3
 800b8d0:	0039      	movs	r1, r7
 800b8d2:	9801      	ldr	r0, [sp, #4]
 800b8d4:	f000 fcaa 	bl	800c22c <_sbrk_r>
 800b8d8:	0004      	movs	r4, r0
 800b8da:	1c43      	adds	r3, r0, #1
 800b8dc:	d100      	bne.n	800b8e0 <_malloc_r+0x1f4>
 800b8de:	e0df      	b.n	800baa0 <_malloc_r+0x3b4>
 800b8e0:	9b03      	ldr	r3, [sp, #12]
 800b8e2:	4283      	cmp	r3, r0
 800b8e4:	d903      	bls.n	800b8ee <_malloc_r+0x202>
 800b8e6:	4b4a      	ldr	r3, [pc, #296]	; (800ba10 <_malloc_r+0x324>)
 800b8e8:	429e      	cmp	r6, r3
 800b8ea:	d000      	beq.n	800b8ee <_malloc_r+0x202>
 800b8ec:	e0d8      	b.n	800baa0 <_malloc_r+0x3b4>
 800b8ee:	4b4d      	ldr	r3, [pc, #308]	; (800ba24 <_malloc_r+0x338>)
 800b8f0:	9903      	ldr	r1, [sp, #12]
 800b8f2:	681a      	ldr	r2, [r3, #0]
 800b8f4:	18ba      	adds	r2, r7, r2
 800b8f6:	601a      	str	r2, [r3, #0]
 800b8f8:	9b04      	ldr	r3, [sp, #16]
 800b8fa:	3b01      	subs	r3, #1
 800b8fc:	42a1      	cmp	r1, r4
 800b8fe:	d000      	beq.n	800b902 <_malloc_r+0x216>
 800b900:	e096      	b.n	800ba30 <_malloc_r+0x344>
 800b902:	4219      	tst	r1, r3
 800b904:	d000      	beq.n	800b908 <_malloc_r+0x21c>
 800b906:	e093      	b.n	800ba30 <_malloc_r+0x344>
 800b908:	2601      	movs	r6, #1
 800b90a:	4b41      	ldr	r3, [pc, #260]	; (800ba10 <_malloc_r+0x324>)
 800b90c:	9a02      	ldr	r2, [sp, #8]
 800b90e:	689b      	ldr	r3, [r3, #8]
 800b910:	19d7      	adds	r7, r2, r7
 800b912:	433e      	orrs	r6, r7
 800b914:	605e      	str	r6, [r3, #4]
 800b916:	4b43      	ldr	r3, [pc, #268]	; (800ba24 <_malloc_r+0x338>)
 800b918:	4a43      	ldr	r2, [pc, #268]	; (800ba28 <_malloc_r+0x33c>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	6811      	ldr	r1, [r2, #0]
 800b91e:	428b      	cmp	r3, r1
 800b920:	d900      	bls.n	800b924 <_malloc_r+0x238>
 800b922:	6013      	str	r3, [r2, #0]
 800b924:	4a41      	ldr	r2, [pc, #260]	; (800ba2c <_malloc_r+0x340>)
 800b926:	6811      	ldr	r1, [r2, #0]
 800b928:	428b      	cmp	r3, r1
 800b92a:	d800      	bhi.n	800b92e <_malloc_r+0x242>
 800b92c:	e0b8      	b.n	800baa0 <_malloc_r+0x3b4>
 800b92e:	6013      	str	r3, [r2, #0]
 800b930:	e0b6      	b.n	800baa0 <_malloc_r+0x3b4>
 800b932:	0a56      	lsrs	r6, r2, #9
 800b934:	2e04      	cmp	r6, #4
 800b936:	d811      	bhi.n	800b95c <_malloc_r+0x270>
 800b938:	0991      	lsrs	r1, r2, #6
 800b93a:	3138      	adds	r1, #56	; 0x38
 800b93c:	00cf      	lsls	r7, r1, #3
 800b93e:	183f      	adds	r7, r7, r0
 800b940:	68be      	ldr	r6, [r7, #8]
 800b942:	42b7      	cmp	r7, r6
 800b944:	d125      	bne.n	800b992 <_malloc_r+0x2a6>
 800b946:	2201      	movs	r2, #1
 800b948:	1089      	asrs	r1, r1, #2
 800b94a:	408a      	lsls	r2, r1
 800b94c:	4661      	mov	r1, ip
 800b94e:	430a      	orrs	r2, r1
 800b950:	6042      	str	r2, [r0, #4]
 800b952:	60e7      	str	r7, [r4, #12]
 800b954:	60a6      	str	r6, [r4, #8]
 800b956:	60bc      	str	r4, [r7, #8]
 800b958:	60f4      	str	r4, [r6, #12]
 800b95a:	e76e      	b.n	800b83a <_malloc_r+0x14e>
 800b95c:	2e14      	cmp	r6, #20
 800b95e:	d802      	bhi.n	800b966 <_malloc_r+0x27a>
 800b960:	0031      	movs	r1, r6
 800b962:	315b      	adds	r1, #91	; 0x5b
 800b964:	e7ea      	b.n	800b93c <_malloc_r+0x250>
 800b966:	2e54      	cmp	r6, #84	; 0x54
 800b968:	d802      	bhi.n	800b970 <_malloc_r+0x284>
 800b96a:	0b11      	lsrs	r1, r2, #12
 800b96c:	316e      	adds	r1, #110	; 0x6e
 800b96e:	e7e5      	b.n	800b93c <_malloc_r+0x250>
 800b970:	21aa      	movs	r1, #170	; 0xaa
 800b972:	0049      	lsls	r1, r1, #1
 800b974:	428e      	cmp	r6, r1
 800b976:	d802      	bhi.n	800b97e <_malloc_r+0x292>
 800b978:	0bd1      	lsrs	r1, r2, #15
 800b97a:	3177      	adds	r1, #119	; 0x77
 800b97c:	e7de      	b.n	800b93c <_malloc_r+0x250>
 800b97e:	4f26      	ldr	r7, [pc, #152]	; (800ba18 <_malloc_r+0x32c>)
 800b980:	217e      	movs	r1, #126	; 0x7e
 800b982:	42be      	cmp	r6, r7
 800b984:	d8da      	bhi.n	800b93c <_malloc_r+0x250>
 800b986:	0c91      	lsrs	r1, r2, #18
 800b988:	317c      	adds	r1, #124	; 0x7c
 800b98a:	e7d7      	b.n	800b93c <_malloc_r+0x250>
 800b98c:	68b6      	ldr	r6, [r6, #8]
 800b98e:	42b7      	cmp	r7, r6
 800b990:	d004      	beq.n	800b99c <_malloc_r+0x2b0>
 800b992:	2003      	movs	r0, #3
 800b994:	6871      	ldr	r1, [r6, #4]
 800b996:	4381      	bics	r1, r0
 800b998:	4291      	cmp	r1, r2
 800b99a:	d8f7      	bhi.n	800b98c <_malloc_r+0x2a0>
 800b99c:	68f7      	ldr	r7, [r6, #12]
 800b99e:	e7d8      	b.n	800b952 <_malloc_r+0x266>
 800b9a0:	2703      	movs	r7, #3
 800b9a2:	6866      	ldr	r6, [r4, #4]
 800b9a4:	43be      	bics	r6, r7
 800b9a6:	9603      	str	r6, [sp, #12]
 800b9a8:	1b77      	subs	r7, r6, r5
 800b9aa:	68e6      	ldr	r6, [r4, #12]
 800b9ac:	2f0f      	cmp	r7, #15
 800b9ae:	dd10      	ble.n	800b9d2 <_malloc_r+0x2e6>
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	68a1      	ldr	r1, [r4, #8]
 800b9b4:	1963      	adds	r3, r4, r5
 800b9b6:	4315      	orrs	r5, r2
 800b9b8:	6065      	str	r5, [r4, #4]
 800b9ba:	60ce      	str	r6, [r1, #12]
 800b9bc:	60b1      	str	r1, [r6, #8]
 800b9be:	6143      	str	r3, [r0, #20]
 800b9c0:	6103      	str	r3, [r0, #16]
 800b9c2:	4814      	ldr	r0, [pc, #80]	; (800ba14 <_malloc_r+0x328>)
 800b9c4:	433a      	orrs	r2, r7
 800b9c6:	60d8      	str	r0, [r3, #12]
 800b9c8:	6098      	str	r0, [r3, #8]
 800b9ca:	605a      	str	r2, [r3, #4]
 800b9cc:	9b03      	ldr	r3, [sp, #12]
 800b9ce:	50e7      	str	r7, [r4, r3]
 800b9d0:	e6ee      	b.n	800b7b0 <_malloc_r+0xc4>
 800b9d2:	2f00      	cmp	r7, #0
 800b9d4:	db09      	blt.n	800b9ea <_malloc_r+0x2fe>
 800b9d6:	9b03      	ldr	r3, [sp, #12]
 800b9d8:	18e1      	adds	r1, r4, r3
 800b9da:	2301      	movs	r3, #1
 800b9dc:	684a      	ldr	r2, [r1, #4]
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	604b      	str	r3, [r1, #4]
 800b9e2:	68a3      	ldr	r3, [r4, #8]
 800b9e4:	60de      	str	r6, [r3, #12]
 800b9e6:	60b3      	str	r3, [r6, #8]
 800b9e8:	e6e2      	b.n	800b7b0 <_malloc_r+0xc4>
 800b9ea:	0034      	movs	r4, r6
 800b9ec:	e739      	b.n	800b862 <_malloc_r+0x176>
 800b9ee:	2108      	movs	r1, #8
 800b9f0:	4249      	negs	r1, r1
 800b9f2:	448c      	add	ip, r1
 800b9f4:	4661      	mov	r1, ip
 800b9f6:	6889      	ldr	r1, [r1, #8]
 800b9f8:	3b01      	subs	r3, #1
 800b9fa:	4561      	cmp	r1, ip
 800b9fc:	d100      	bne.n	800ba00 <_malloc_r+0x314>
 800b9fe:	e73a      	b.n	800b876 <_malloc_r+0x18a>
 800ba00:	e740      	b.n	800b884 <_malloc_r+0x198>
 800ba02:	3304      	adds	r3, #4
 800ba04:	0052      	lsls	r2, r2, #1
 800ba06:	420a      	tst	r2, r1
 800ba08:	d0fb      	beq.n	800ba02 <_malloc_r+0x316>
 800ba0a:	e725      	b.n	800b858 <_malloc_r+0x16c>
 800ba0c:	9b02      	ldr	r3, [sp, #8]
 800ba0e:	e7fa      	b.n	800ba06 <_malloc_r+0x31a>
 800ba10:	20000444 	.word	0x20000444
 800ba14:	2000044c 	.word	0x2000044c
 800ba18:	00000554 	.word	0x00000554
 800ba1c:	20003b78 	.word	0x20003b78
 800ba20:	2000084c 	.word	0x2000084c
 800ba24:	20003b48 	.word	0x20003b48
 800ba28:	20003b70 	.word	0x20003b70
 800ba2c:	20003b74 	.word	0x20003b74
 800ba30:	4934      	ldr	r1, [pc, #208]	; (800bb04 <_malloc_r+0x418>)
 800ba32:	6808      	ldr	r0, [r1, #0]
 800ba34:	3001      	adds	r0, #1
 800ba36:	d141      	bne.n	800babc <_malloc_r+0x3d0>
 800ba38:	600c      	str	r4, [r1, #0]
 800ba3a:	2207      	movs	r2, #7
 800ba3c:	0021      	movs	r1, r4
 800ba3e:	4011      	ands	r1, r2
 800ba40:	2000      	movs	r0, #0
 800ba42:	9103      	str	r1, [sp, #12]
 800ba44:	4214      	tst	r4, r2
 800ba46:	d002      	beq.n	800ba4e <_malloc_r+0x362>
 800ba48:	3008      	adds	r0, #8
 800ba4a:	1a40      	subs	r0, r0, r1
 800ba4c:	1824      	adds	r4, r4, r0
 800ba4e:	19e2      	adds	r2, r4, r7
 800ba50:	9205      	str	r2, [sp, #20]
 800ba52:	9f05      	ldr	r7, [sp, #20]
 800ba54:	9a04      	ldr	r2, [sp, #16]
 800ba56:	401f      	ands	r7, r3
 800ba58:	1810      	adds	r0, r2, r0
 800ba5a:	1bc7      	subs	r7, r0, r7
 800ba5c:	401f      	ands	r7, r3
 800ba5e:	0039      	movs	r1, r7
 800ba60:	9801      	ldr	r0, [sp, #4]
 800ba62:	f000 fbe3 	bl	800c22c <_sbrk_r>
 800ba66:	1c43      	adds	r3, r0, #1
 800ba68:	d108      	bne.n	800ba7c <_malloc_r+0x390>
 800ba6a:	9f03      	ldr	r7, [sp, #12]
 800ba6c:	9805      	ldr	r0, [sp, #20]
 800ba6e:	2f00      	cmp	r7, #0
 800ba70:	d004      	beq.n	800ba7c <_malloc_r+0x390>
 800ba72:	0038      	movs	r0, r7
 800ba74:	2700      	movs	r7, #0
 800ba76:	9b05      	ldr	r3, [sp, #20]
 800ba78:	3808      	subs	r0, #8
 800ba7a:	1818      	adds	r0, r3, r0
 800ba7c:	4a22      	ldr	r2, [pc, #136]	; (800bb08 <_malloc_r+0x41c>)
 800ba7e:	1b00      	subs	r0, r0, r4
 800ba80:	6813      	ldr	r3, [r2, #0]
 800ba82:	19db      	adds	r3, r3, r7
 800ba84:	6013      	str	r3, [r2, #0]
 800ba86:	2201      	movs	r2, #1
 800ba88:	4b20      	ldr	r3, [pc, #128]	; (800bb0c <_malloc_r+0x420>)
 800ba8a:	19c7      	adds	r7, r0, r7
 800ba8c:	4317      	orrs	r7, r2
 800ba8e:	609c      	str	r4, [r3, #8]
 800ba90:	6067      	str	r7, [r4, #4]
 800ba92:	429e      	cmp	r6, r3
 800ba94:	d100      	bne.n	800ba98 <_malloc_r+0x3ac>
 800ba96:	e73e      	b.n	800b916 <_malloc_r+0x22a>
 800ba98:	9b02      	ldr	r3, [sp, #8]
 800ba9a:	2b0f      	cmp	r3, #15
 800ba9c:	d814      	bhi.n	800bac8 <_malloc_r+0x3dc>
 800ba9e:	6062      	str	r2, [r4, #4]
 800baa0:	2203      	movs	r2, #3
 800baa2:	4b1a      	ldr	r3, [pc, #104]	; (800bb0c <_malloc_r+0x420>)
 800baa4:	689b      	ldr	r3, [r3, #8]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	4393      	bics	r3, r2
 800baaa:	1b59      	subs	r1, r3, r5
 800baac:	42ab      	cmp	r3, r5
 800baae:	d301      	bcc.n	800bab4 <_malloc_r+0x3c8>
 800bab0:	290f      	cmp	r1, #15
 800bab2:	dc1e      	bgt.n	800baf2 <_malloc_r+0x406>
 800bab4:	9801      	ldr	r0, [sp, #4]
 800bab6:	f000 f833 	bl	800bb20 <__malloc_unlock>
 800baba:	e624      	b.n	800b706 <_malloc_r+0x1a>
 800babc:	9903      	ldr	r1, [sp, #12]
 800babe:	1a61      	subs	r1, r4, r1
 800bac0:	1889      	adds	r1, r1, r2
 800bac2:	4a11      	ldr	r2, [pc, #68]	; (800bb08 <_malloc_r+0x41c>)
 800bac4:	6011      	str	r1, [r2, #0]
 800bac6:	e7b8      	b.n	800ba3a <_malloc_r+0x34e>
 800bac8:	2107      	movs	r1, #7
 800baca:	9b02      	ldr	r3, [sp, #8]
 800bacc:	3b0c      	subs	r3, #12
 800bace:	438b      	bics	r3, r1
 800bad0:	6871      	ldr	r1, [r6, #4]
 800bad2:	400a      	ands	r2, r1
 800bad4:	2105      	movs	r1, #5
 800bad6:	431a      	orrs	r2, r3
 800bad8:	6072      	str	r2, [r6, #4]
 800bada:	18f2      	adds	r2, r6, r3
 800badc:	6051      	str	r1, [r2, #4]
 800bade:	6091      	str	r1, [r2, #8]
 800bae0:	2b0f      	cmp	r3, #15
 800bae2:	d800      	bhi.n	800bae6 <_malloc_r+0x3fa>
 800bae4:	e717      	b.n	800b916 <_malloc_r+0x22a>
 800bae6:	0031      	movs	r1, r6
 800bae8:	9801      	ldr	r0, [sp, #4]
 800baea:	3108      	adds	r1, #8
 800baec:	f7ff fd44 	bl	800b578 <_free_r>
 800baf0:	e711      	b.n	800b916 <_malloc_r+0x22a>
 800baf2:	2201      	movs	r2, #1
 800baf4:	0013      	movs	r3, r2
 800baf6:	4805      	ldr	r0, [pc, #20]	; (800bb0c <_malloc_r+0x420>)
 800baf8:	432b      	orrs	r3, r5
 800bafa:	6884      	ldr	r4, [r0, #8]
 800bafc:	6063      	str	r3, [r4, #4]
 800bafe:	1963      	adds	r3, r4, r5
 800bb00:	6083      	str	r3, [r0, #8]
 800bb02:	e626      	b.n	800b752 <_malloc_r+0x66>
 800bb04:	2000084c 	.word	0x2000084c
 800bb08:	20003b48 	.word	0x20003b48
 800bb0c:	20000444 	.word	0x20000444

0800bb10 <__malloc_lock>:
 800bb10:	b510      	push	{r4, lr}
 800bb12:	4802      	ldr	r0, [pc, #8]	; (800bb1c <__malloc_lock+0xc>)
 800bb14:	f7ff fde8 	bl	800b6e8 <__retarget_lock_acquire_recursive>
 800bb18:	bd10      	pop	{r4, pc}
 800bb1a:	46c0      	nop			; (mov r8, r8)
 800bb1c:	20003b45 	.word	0x20003b45

0800bb20 <__malloc_unlock>:
 800bb20:	b510      	push	{r4, lr}
 800bb22:	4802      	ldr	r0, [pc, #8]	; (800bb2c <__malloc_unlock+0xc>)
 800bb24:	f7ff fde1 	bl	800b6ea <__retarget_lock_release_recursive>
 800bb28:	bd10      	pop	{r4, pc}
 800bb2a:	46c0      	nop			; (mov r8, r8)
 800bb2c:	20003b45 	.word	0x20003b45

0800bb30 <_Balloc>:
 800bb30:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800bb32:	b570      	push	{r4, r5, r6, lr}
 800bb34:	0006      	movs	r6, r0
 800bb36:	000c      	movs	r4, r1
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d012      	beq.n	800bb62 <_Balloc+0x32>
 800bb3c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 800bb3e:	00a3      	lsls	r3, r4, #2
 800bb40:	18d3      	adds	r3, r2, r3
 800bb42:	6818      	ldr	r0, [r3, #0]
 800bb44:	2800      	cmp	r0, #0
 800bb46:	d115      	bne.n	800bb74 <_Balloc+0x44>
 800bb48:	2101      	movs	r1, #1
 800bb4a:	000d      	movs	r5, r1
 800bb4c:	40a5      	lsls	r5, r4
 800bb4e:	1d6a      	adds	r2, r5, #5
 800bb50:	0030      	movs	r0, r6
 800bb52:	0092      	lsls	r2, r2, #2
 800bb54:	f000 fc7c 	bl	800c450 <_calloc_r>
 800bb58:	2800      	cmp	r0, #0
 800bb5a:	d009      	beq.n	800bb70 <_Balloc+0x40>
 800bb5c:	6044      	str	r4, [r0, #4]
 800bb5e:	6085      	str	r5, [r0, #8]
 800bb60:	e00a      	b.n	800bb78 <_Balloc+0x48>
 800bb62:	2221      	movs	r2, #33	; 0x21
 800bb64:	2104      	movs	r1, #4
 800bb66:	f000 fc73 	bl	800c450 <_calloc_r>
 800bb6a:	64f0      	str	r0, [r6, #76]	; 0x4c
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	d1e5      	bne.n	800bb3c <_Balloc+0xc>
 800bb70:	2000      	movs	r0, #0
 800bb72:	bd70      	pop	{r4, r5, r6, pc}
 800bb74:	6802      	ldr	r2, [r0, #0]
 800bb76:	601a      	str	r2, [r3, #0]
 800bb78:	2300      	movs	r3, #0
 800bb7a:	6103      	str	r3, [r0, #16]
 800bb7c:	60c3      	str	r3, [r0, #12]
 800bb7e:	e7f8      	b.n	800bb72 <_Balloc+0x42>

0800bb80 <_Bfree>:
 800bb80:	2900      	cmp	r1, #0
 800bb82:	d006      	beq.n	800bb92 <_Bfree+0x12>
 800bb84:	684b      	ldr	r3, [r1, #4]
 800bb86:	009a      	lsls	r2, r3, #2
 800bb88:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800bb8a:	189b      	adds	r3, r3, r2
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	600a      	str	r2, [r1, #0]
 800bb90:	6019      	str	r1, [r3, #0]
 800bb92:	4770      	bx	lr

0800bb94 <__multadd>:
 800bb94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb96:	000e      	movs	r6, r1
 800bb98:	9001      	str	r0, [sp, #4]
 800bb9a:	000c      	movs	r4, r1
 800bb9c:	001d      	movs	r5, r3
 800bb9e:	2000      	movs	r0, #0
 800bba0:	690f      	ldr	r7, [r1, #16]
 800bba2:	3614      	adds	r6, #20
 800bba4:	6833      	ldr	r3, [r6, #0]
 800bba6:	3001      	adds	r0, #1
 800bba8:	b299      	uxth	r1, r3
 800bbaa:	4351      	muls	r1, r2
 800bbac:	0c1b      	lsrs	r3, r3, #16
 800bbae:	4353      	muls	r3, r2
 800bbb0:	1949      	adds	r1, r1, r5
 800bbb2:	0c0d      	lsrs	r5, r1, #16
 800bbb4:	195b      	adds	r3, r3, r5
 800bbb6:	0c1d      	lsrs	r5, r3, #16
 800bbb8:	b289      	uxth	r1, r1
 800bbba:	041b      	lsls	r3, r3, #16
 800bbbc:	185b      	adds	r3, r3, r1
 800bbbe:	c608      	stmia	r6!, {r3}
 800bbc0:	4287      	cmp	r7, r0
 800bbc2:	dcef      	bgt.n	800bba4 <__multadd+0x10>
 800bbc4:	2d00      	cmp	r5, #0
 800bbc6:	d022      	beq.n	800bc0e <__multadd+0x7a>
 800bbc8:	68a3      	ldr	r3, [r4, #8]
 800bbca:	42bb      	cmp	r3, r7
 800bbcc:	dc19      	bgt.n	800bc02 <__multadd+0x6e>
 800bbce:	6863      	ldr	r3, [r4, #4]
 800bbd0:	9801      	ldr	r0, [sp, #4]
 800bbd2:	1c59      	adds	r1, r3, #1
 800bbd4:	f7ff ffac 	bl	800bb30 <_Balloc>
 800bbd8:	1e06      	subs	r6, r0, #0
 800bbda:	d105      	bne.n	800bbe8 <__multadd+0x54>
 800bbdc:	0002      	movs	r2, r0
 800bbde:	21b5      	movs	r1, #181	; 0xb5
 800bbe0:	4b0c      	ldr	r3, [pc, #48]	; (800bc14 <__multadd+0x80>)
 800bbe2:	480d      	ldr	r0, [pc, #52]	; (800bc18 <__multadd+0x84>)
 800bbe4:	f000 fc16 	bl	800c414 <__assert_func>
 800bbe8:	0021      	movs	r1, r4
 800bbea:	6923      	ldr	r3, [r4, #16]
 800bbec:	310c      	adds	r1, #12
 800bbee:	1c9a      	adds	r2, r3, #2
 800bbf0:	0092      	lsls	r2, r2, #2
 800bbf2:	300c      	adds	r0, #12
 800bbf4:	f7fd fa65 	bl	80090c2 <memcpy>
 800bbf8:	0021      	movs	r1, r4
 800bbfa:	9801      	ldr	r0, [sp, #4]
 800bbfc:	f7ff ffc0 	bl	800bb80 <_Bfree>
 800bc00:	0034      	movs	r4, r6
 800bc02:	1d3b      	adds	r3, r7, #4
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	18e3      	adds	r3, r4, r3
 800bc08:	605d      	str	r5, [r3, #4]
 800bc0a:	1c7b      	adds	r3, r7, #1
 800bc0c:	6123      	str	r3, [r4, #16]
 800bc0e:	0020      	movs	r0, r4
 800bc10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bc12:	46c0      	nop			; (mov r8, r8)
 800bc14:	0800e7f2 	.word	0x0800e7f2
 800bc18:	0800e85e 	.word	0x0800e85e

0800bc1c <__hi0bits>:
 800bc1c:	0003      	movs	r3, r0
 800bc1e:	0c02      	lsrs	r2, r0, #16
 800bc20:	2000      	movs	r0, #0
 800bc22:	4282      	cmp	r2, r0
 800bc24:	d101      	bne.n	800bc2a <__hi0bits+0xe>
 800bc26:	041b      	lsls	r3, r3, #16
 800bc28:	3010      	adds	r0, #16
 800bc2a:	0e1a      	lsrs	r2, r3, #24
 800bc2c:	d101      	bne.n	800bc32 <__hi0bits+0x16>
 800bc2e:	3008      	adds	r0, #8
 800bc30:	021b      	lsls	r3, r3, #8
 800bc32:	0f1a      	lsrs	r2, r3, #28
 800bc34:	d101      	bne.n	800bc3a <__hi0bits+0x1e>
 800bc36:	3004      	adds	r0, #4
 800bc38:	011b      	lsls	r3, r3, #4
 800bc3a:	0f9a      	lsrs	r2, r3, #30
 800bc3c:	d101      	bne.n	800bc42 <__hi0bits+0x26>
 800bc3e:	3002      	adds	r0, #2
 800bc40:	009b      	lsls	r3, r3, #2
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	db03      	blt.n	800bc4e <__hi0bits+0x32>
 800bc46:	3001      	adds	r0, #1
 800bc48:	005b      	lsls	r3, r3, #1
 800bc4a:	d400      	bmi.n	800bc4e <__hi0bits+0x32>
 800bc4c:	2020      	movs	r0, #32
 800bc4e:	4770      	bx	lr

0800bc50 <__lo0bits>:
 800bc50:	6803      	ldr	r3, [r0, #0]
 800bc52:	0002      	movs	r2, r0
 800bc54:	2107      	movs	r1, #7
 800bc56:	0018      	movs	r0, r3
 800bc58:	4008      	ands	r0, r1
 800bc5a:	420b      	tst	r3, r1
 800bc5c:	d00d      	beq.n	800bc7a <__lo0bits+0x2a>
 800bc5e:	3906      	subs	r1, #6
 800bc60:	2000      	movs	r0, #0
 800bc62:	420b      	tst	r3, r1
 800bc64:	d105      	bne.n	800bc72 <__lo0bits+0x22>
 800bc66:	3002      	adds	r0, #2
 800bc68:	4203      	tst	r3, r0
 800bc6a:	d003      	beq.n	800bc74 <__lo0bits+0x24>
 800bc6c:	40cb      	lsrs	r3, r1
 800bc6e:	0008      	movs	r0, r1
 800bc70:	6013      	str	r3, [r2, #0]
 800bc72:	4770      	bx	lr
 800bc74:	089b      	lsrs	r3, r3, #2
 800bc76:	6013      	str	r3, [r2, #0]
 800bc78:	e7fb      	b.n	800bc72 <__lo0bits+0x22>
 800bc7a:	b299      	uxth	r1, r3
 800bc7c:	2900      	cmp	r1, #0
 800bc7e:	d101      	bne.n	800bc84 <__lo0bits+0x34>
 800bc80:	2010      	movs	r0, #16
 800bc82:	0c1b      	lsrs	r3, r3, #16
 800bc84:	b2d9      	uxtb	r1, r3
 800bc86:	2900      	cmp	r1, #0
 800bc88:	d101      	bne.n	800bc8e <__lo0bits+0x3e>
 800bc8a:	3008      	adds	r0, #8
 800bc8c:	0a1b      	lsrs	r3, r3, #8
 800bc8e:	0719      	lsls	r1, r3, #28
 800bc90:	d101      	bne.n	800bc96 <__lo0bits+0x46>
 800bc92:	3004      	adds	r0, #4
 800bc94:	091b      	lsrs	r3, r3, #4
 800bc96:	0799      	lsls	r1, r3, #30
 800bc98:	d101      	bne.n	800bc9e <__lo0bits+0x4e>
 800bc9a:	3002      	adds	r0, #2
 800bc9c:	089b      	lsrs	r3, r3, #2
 800bc9e:	07d9      	lsls	r1, r3, #31
 800bca0:	d4e9      	bmi.n	800bc76 <__lo0bits+0x26>
 800bca2:	3001      	adds	r0, #1
 800bca4:	085b      	lsrs	r3, r3, #1
 800bca6:	d1e6      	bne.n	800bc76 <__lo0bits+0x26>
 800bca8:	2020      	movs	r0, #32
 800bcaa:	e7e2      	b.n	800bc72 <__lo0bits+0x22>

0800bcac <__i2b>:
 800bcac:	b510      	push	{r4, lr}
 800bcae:	000c      	movs	r4, r1
 800bcb0:	2101      	movs	r1, #1
 800bcb2:	f7ff ff3d 	bl	800bb30 <_Balloc>
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	d106      	bne.n	800bcc8 <__i2b+0x1c>
 800bcba:	21a0      	movs	r1, #160	; 0xa0
 800bcbc:	0002      	movs	r2, r0
 800bcbe:	4b04      	ldr	r3, [pc, #16]	; (800bcd0 <__i2b+0x24>)
 800bcc0:	4804      	ldr	r0, [pc, #16]	; (800bcd4 <__i2b+0x28>)
 800bcc2:	0049      	lsls	r1, r1, #1
 800bcc4:	f000 fba6 	bl	800c414 <__assert_func>
 800bcc8:	2301      	movs	r3, #1
 800bcca:	6144      	str	r4, [r0, #20]
 800bccc:	6103      	str	r3, [r0, #16]
 800bcce:	bd10      	pop	{r4, pc}
 800bcd0:	0800e7f2 	.word	0x0800e7f2
 800bcd4:	0800e85e 	.word	0x0800e85e

0800bcd8 <__multiply>:
 800bcd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcda:	690b      	ldr	r3, [r1, #16]
 800bcdc:	0014      	movs	r4, r2
 800bcde:	6912      	ldr	r2, [r2, #16]
 800bce0:	000d      	movs	r5, r1
 800bce2:	b089      	sub	sp, #36	; 0x24
 800bce4:	4293      	cmp	r3, r2
 800bce6:	da01      	bge.n	800bcec <__multiply+0x14>
 800bce8:	0025      	movs	r5, r4
 800bcea:	000c      	movs	r4, r1
 800bcec:	692f      	ldr	r7, [r5, #16]
 800bcee:	6926      	ldr	r6, [r4, #16]
 800bcf0:	6869      	ldr	r1, [r5, #4]
 800bcf2:	19bb      	adds	r3, r7, r6
 800bcf4:	9302      	str	r3, [sp, #8]
 800bcf6:	68ab      	ldr	r3, [r5, #8]
 800bcf8:	19ba      	adds	r2, r7, r6
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	da00      	bge.n	800bd00 <__multiply+0x28>
 800bcfe:	3101      	adds	r1, #1
 800bd00:	f7ff ff16 	bl	800bb30 <_Balloc>
 800bd04:	9001      	str	r0, [sp, #4]
 800bd06:	2800      	cmp	r0, #0
 800bd08:	d106      	bne.n	800bd18 <__multiply+0x40>
 800bd0a:	215e      	movs	r1, #94	; 0x5e
 800bd0c:	0002      	movs	r2, r0
 800bd0e:	4b48      	ldr	r3, [pc, #288]	; (800be30 <__multiply+0x158>)
 800bd10:	4848      	ldr	r0, [pc, #288]	; (800be34 <__multiply+0x15c>)
 800bd12:	31ff      	adds	r1, #255	; 0xff
 800bd14:	f000 fb7e 	bl	800c414 <__assert_func>
 800bd18:	9b01      	ldr	r3, [sp, #4]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	3314      	adds	r3, #20
 800bd1e:	469c      	mov	ip, r3
 800bd20:	19bb      	adds	r3, r7, r6
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	4463      	add	r3, ip
 800bd26:	9303      	str	r3, [sp, #12]
 800bd28:	4663      	mov	r3, ip
 800bd2a:	9903      	ldr	r1, [sp, #12]
 800bd2c:	428b      	cmp	r3, r1
 800bd2e:	d32c      	bcc.n	800bd8a <__multiply+0xb2>
 800bd30:	002b      	movs	r3, r5
 800bd32:	0022      	movs	r2, r4
 800bd34:	3314      	adds	r3, #20
 800bd36:	00bf      	lsls	r7, r7, #2
 800bd38:	3214      	adds	r2, #20
 800bd3a:	9306      	str	r3, [sp, #24]
 800bd3c:	00b6      	lsls	r6, r6, #2
 800bd3e:	19db      	adds	r3, r3, r7
 800bd40:	9304      	str	r3, [sp, #16]
 800bd42:	1993      	adds	r3, r2, r6
 800bd44:	9307      	str	r3, [sp, #28]
 800bd46:	2304      	movs	r3, #4
 800bd48:	9305      	str	r3, [sp, #20]
 800bd4a:	002b      	movs	r3, r5
 800bd4c:	9904      	ldr	r1, [sp, #16]
 800bd4e:	3315      	adds	r3, #21
 800bd50:	9200      	str	r2, [sp, #0]
 800bd52:	4299      	cmp	r1, r3
 800bd54:	d305      	bcc.n	800bd62 <__multiply+0x8a>
 800bd56:	1b4b      	subs	r3, r1, r5
 800bd58:	3b15      	subs	r3, #21
 800bd5a:	089b      	lsrs	r3, r3, #2
 800bd5c:	3301      	adds	r3, #1
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	9305      	str	r3, [sp, #20]
 800bd62:	9b07      	ldr	r3, [sp, #28]
 800bd64:	9a00      	ldr	r2, [sp, #0]
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d311      	bcc.n	800bd8e <__multiply+0xb6>
 800bd6a:	9b02      	ldr	r3, [sp, #8]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	dd06      	ble.n	800bd7e <__multiply+0xa6>
 800bd70:	9b03      	ldr	r3, [sp, #12]
 800bd72:	3b04      	subs	r3, #4
 800bd74:	9303      	str	r3, [sp, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	9300      	str	r3, [sp, #0]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d053      	beq.n	800be26 <__multiply+0x14e>
 800bd7e:	9b01      	ldr	r3, [sp, #4]
 800bd80:	9a02      	ldr	r2, [sp, #8]
 800bd82:	0018      	movs	r0, r3
 800bd84:	611a      	str	r2, [r3, #16]
 800bd86:	b009      	add	sp, #36	; 0x24
 800bd88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd8a:	c304      	stmia	r3!, {r2}
 800bd8c:	e7cd      	b.n	800bd2a <__multiply+0x52>
 800bd8e:	9b00      	ldr	r3, [sp, #0]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	b298      	uxth	r0, r3
 800bd94:	2800      	cmp	r0, #0
 800bd96:	d01b      	beq.n	800bdd0 <__multiply+0xf8>
 800bd98:	4667      	mov	r7, ip
 800bd9a:	2400      	movs	r4, #0
 800bd9c:	9e06      	ldr	r6, [sp, #24]
 800bd9e:	ce02      	ldmia	r6!, {r1}
 800bda0:	683a      	ldr	r2, [r7, #0]
 800bda2:	b28b      	uxth	r3, r1
 800bda4:	4343      	muls	r3, r0
 800bda6:	b292      	uxth	r2, r2
 800bda8:	189b      	adds	r3, r3, r2
 800bdaa:	191b      	adds	r3, r3, r4
 800bdac:	0c0c      	lsrs	r4, r1, #16
 800bdae:	4344      	muls	r4, r0
 800bdb0:	683a      	ldr	r2, [r7, #0]
 800bdb2:	0c11      	lsrs	r1, r2, #16
 800bdb4:	1861      	adds	r1, r4, r1
 800bdb6:	0c1c      	lsrs	r4, r3, #16
 800bdb8:	1909      	adds	r1, r1, r4
 800bdba:	0c0c      	lsrs	r4, r1, #16
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	0409      	lsls	r1, r1, #16
 800bdc0:	430b      	orrs	r3, r1
 800bdc2:	c708      	stmia	r7!, {r3}
 800bdc4:	9b04      	ldr	r3, [sp, #16]
 800bdc6:	42b3      	cmp	r3, r6
 800bdc8:	d8e9      	bhi.n	800bd9e <__multiply+0xc6>
 800bdca:	4663      	mov	r3, ip
 800bdcc:	9a05      	ldr	r2, [sp, #20]
 800bdce:	509c      	str	r4, [r3, r2]
 800bdd0:	9b00      	ldr	r3, [sp, #0]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	0c1e      	lsrs	r6, r3, #16
 800bdd6:	d020      	beq.n	800be1a <__multiply+0x142>
 800bdd8:	4663      	mov	r3, ip
 800bdda:	002c      	movs	r4, r5
 800bddc:	4660      	mov	r0, ip
 800bdde:	2700      	movs	r7, #0
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	3414      	adds	r4, #20
 800bde4:	6822      	ldr	r2, [r4, #0]
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	b291      	uxth	r1, r2
 800bdea:	4371      	muls	r1, r6
 800bdec:	6802      	ldr	r2, [r0, #0]
 800bdee:	0c12      	lsrs	r2, r2, #16
 800bdf0:	1889      	adds	r1, r1, r2
 800bdf2:	19cf      	adds	r7, r1, r7
 800bdf4:	0439      	lsls	r1, r7, #16
 800bdf6:	430b      	orrs	r3, r1
 800bdf8:	6003      	str	r3, [r0, #0]
 800bdfa:	cc02      	ldmia	r4!, {r1}
 800bdfc:	6843      	ldr	r3, [r0, #4]
 800bdfe:	0c09      	lsrs	r1, r1, #16
 800be00:	4371      	muls	r1, r6
 800be02:	b29b      	uxth	r3, r3
 800be04:	0c3f      	lsrs	r7, r7, #16
 800be06:	18cb      	adds	r3, r1, r3
 800be08:	9a04      	ldr	r2, [sp, #16]
 800be0a:	19db      	adds	r3, r3, r7
 800be0c:	0c1f      	lsrs	r7, r3, #16
 800be0e:	3004      	adds	r0, #4
 800be10:	42a2      	cmp	r2, r4
 800be12:	d8e7      	bhi.n	800bde4 <__multiply+0x10c>
 800be14:	4662      	mov	r2, ip
 800be16:	9905      	ldr	r1, [sp, #20]
 800be18:	5053      	str	r3, [r2, r1]
 800be1a:	9b00      	ldr	r3, [sp, #0]
 800be1c:	3304      	adds	r3, #4
 800be1e:	9300      	str	r3, [sp, #0]
 800be20:	2304      	movs	r3, #4
 800be22:	449c      	add	ip, r3
 800be24:	e79d      	b.n	800bd62 <__multiply+0x8a>
 800be26:	9b02      	ldr	r3, [sp, #8]
 800be28:	3b01      	subs	r3, #1
 800be2a:	9302      	str	r3, [sp, #8]
 800be2c:	e79d      	b.n	800bd6a <__multiply+0x92>
 800be2e:	46c0      	nop			; (mov r8, r8)
 800be30:	0800e7f2 	.word	0x0800e7f2
 800be34:	0800e85e 	.word	0x0800e85e

0800be38 <__pow5mult>:
 800be38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be3a:	2303      	movs	r3, #3
 800be3c:	0015      	movs	r5, r2
 800be3e:	0007      	movs	r7, r0
 800be40:	000e      	movs	r6, r1
 800be42:	401a      	ands	r2, r3
 800be44:	421d      	tst	r5, r3
 800be46:	d008      	beq.n	800be5a <__pow5mult+0x22>
 800be48:	491a      	ldr	r1, [pc, #104]	; (800beb4 <__pow5mult+0x7c>)
 800be4a:	3a01      	subs	r2, #1
 800be4c:	0092      	lsls	r2, r2, #2
 800be4e:	5852      	ldr	r2, [r2, r1]
 800be50:	2300      	movs	r3, #0
 800be52:	0031      	movs	r1, r6
 800be54:	f7ff fe9e 	bl	800bb94 <__multadd>
 800be58:	0006      	movs	r6, r0
 800be5a:	10ad      	asrs	r5, r5, #2
 800be5c:	d027      	beq.n	800beae <__pow5mult+0x76>
 800be5e:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800be60:	2c00      	cmp	r4, #0
 800be62:	d107      	bne.n	800be74 <__pow5mult+0x3c>
 800be64:	0038      	movs	r0, r7
 800be66:	4914      	ldr	r1, [pc, #80]	; (800beb8 <__pow5mult+0x80>)
 800be68:	f7ff ff20 	bl	800bcac <__i2b>
 800be6c:	2300      	movs	r3, #0
 800be6e:	0004      	movs	r4, r0
 800be70:	64b8      	str	r0, [r7, #72]	; 0x48
 800be72:	6003      	str	r3, [r0, #0]
 800be74:	2301      	movs	r3, #1
 800be76:	421d      	tst	r5, r3
 800be78:	d00a      	beq.n	800be90 <__pow5mult+0x58>
 800be7a:	0031      	movs	r1, r6
 800be7c:	0022      	movs	r2, r4
 800be7e:	0038      	movs	r0, r7
 800be80:	f7ff ff2a 	bl	800bcd8 <__multiply>
 800be84:	0031      	movs	r1, r6
 800be86:	9001      	str	r0, [sp, #4]
 800be88:	0038      	movs	r0, r7
 800be8a:	f7ff fe79 	bl	800bb80 <_Bfree>
 800be8e:	9e01      	ldr	r6, [sp, #4]
 800be90:	106d      	asrs	r5, r5, #1
 800be92:	d00c      	beq.n	800beae <__pow5mult+0x76>
 800be94:	6820      	ldr	r0, [r4, #0]
 800be96:	2800      	cmp	r0, #0
 800be98:	d107      	bne.n	800beaa <__pow5mult+0x72>
 800be9a:	0022      	movs	r2, r4
 800be9c:	0021      	movs	r1, r4
 800be9e:	0038      	movs	r0, r7
 800bea0:	f7ff ff1a 	bl	800bcd8 <__multiply>
 800bea4:	2300      	movs	r3, #0
 800bea6:	6020      	str	r0, [r4, #0]
 800bea8:	6003      	str	r3, [r0, #0]
 800beaa:	0004      	movs	r4, r0
 800beac:	e7e2      	b.n	800be74 <__pow5mult+0x3c>
 800beae:	0030      	movs	r0, r6
 800beb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800beb2:	46c0      	nop			; (mov r8, r8)
 800beb4:	0800e9b0 	.word	0x0800e9b0
 800beb8:	00000271 	.word	0x00000271

0800bebc <__lshift>:
 800bebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bebe:	000c      	movs	r4, r1
 800bec0:	0017      	movs	r7, r2
 800bec2:	6923      	ldr	r3, [r4, #16]
 800bec4:	1155      	asrs	r5, r2, #5
 800bec6:	b087      	sub	sp, #28
 800bec8:	18eb      	adds	r3, r5, r3
 800beca:	9302      	str	r3, [sp, #8]
 800becc:	3301      	adds	r3, #1
 800bece:	9301      	str	r3, [sp, #4]
 800bed0:	6849      	ldr	r1, [r1, #4]
 800bed2:	68a3      	ldr	r3, [r4, #8]
 800bed4:	9004      	str	r0, [sp, #16]
 800bed6:	9a01      	ldr	r2, [sp, #4]
 800bed8:	4293      	cmp	r3, r2
 800beda:	db10      	blt.n	800befe <__lshift+0x42>
 800bedc:	9804      	ldr	r0, [sp, #16]
 800bede:	f7ff fe27 	bl	800bb30 <_Balloc>
 800bee2:	2300      	movs	r3, #0
 800bee4:	0002      	movs	r2, r0
 800bee6:	0006      	movs	r6, r0
 800bee8:	0019      	movs	r1, r3
 800beea:	3214      	adds	r2, #20
 800beec:	4298      	cmp	r0, r3
 800beee:	d10c      	bne.n	800bf0a <__lshift+0x4e>
 800bef0:	21da      	movs	r1, #218	; 0xda
 800bef2:	0002      	movs	r2, r0
 800bef4:	4b26      	ldr	r3, [pc, #152]	; (800bf90 <__lshift+0xd4>)
 800bef6:	4827      	ldr	r0, [pc, #156]	; (800bf94 <__lshift+0xd8>)
 800bef8:	31ff      	adds	r1, #255	; 0xff
 800befa:	f000 fa8b 	bl	800c414 <__assert_func>
 800befe:	3101      	adds	r1, #1
 800bf00:	005b      	lsls	r3, r3, #1
 800bf02:	e7e8      	b.n	800bed6 <__lshift+0x1a>
 800bf04:	0098      	lsls	r0, r3, #2
 800bf06:	5011      	str	r1, [r2, r0]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	42ab      	cmp	r3, r5
 800bf0c:	dbfa      	blt.n	800bf04 <__lshift+0x48>
 800bf0e:	43eb      	mvns	r3, r5
 800bf10:	17db      	asrs	r3, r3, #31
 800bf12:	401d      	ands	r5, r3
 800bf14:	211f      	movs	r1, #31
 800bf16:	0023      	movs	r3, r4
 800bf18:	0038      	movs	r0, r7
 800bf1a:	00ad      	lsls	r5, r5, #2
 800bf1c:	1955      	adds	r5, r2, r5
 800bf1e:	6922      	ldr	r2, [r4, #16]
 800bf20:	3314      	adds	r3, #20
 800bf22:	0092      	lsls	r2, r2, #2
 800bf24:	4008      	ands	r0, r1
 800bf26:	4684      	mov	ip, r0
 800bf28:	189a      	adds	r2, r3, r2
 800bf2a:	420f      	tst	r7, r1
 800bf2c:	d02a      	beq.n	800bf84 <__lshift+0xc8>
 800bf2e:	3101      	adds	r1, #1
 800bf30:	1a09      	subs	r1, r1, r0
 800bf32:	9105      	str	r1, [sp, #20]
 800bf34:	2100      	movs	r1, #0
 800bf36:	9503      	str	r5, [sp, #12]
 800bf38:	4667      	mov	r7, ip
 800bf3a:	6818      	ldr	r0, [r3, #0]
 800bf3c:	40b8      	lsls	r0, r7
 800bf3e:	4301      	orrs	r1, r0
 800bf40:	9803      	ldr	r0, [sp, #12]
 800bf42:	c002      	stmia	r0!, {r1}
 800bf44:	cb02      	ldmia	r3!, {r1}
 800bf46:	9003      	str	r0, [sp, #12]
 800bf48:	9805      	ldr	r0, [sp, #20]
 800bf4a:	40c1      	lsrs	r1, r0
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d8f3      	bhi.n	800bf38 <__lshift+0x7c>
 800bf50:	0020      	movs	r0, r4
 800bf52:	3015      	adds	r0, #21
 800bf54:	2304      	movs	r3, #4
 800bf56:	4282      	cmp	r2, r0
 800bf58:	d304      	bcc.n	800bf64 <__lshift+0xa8>
 800bf5a:	1b13      	subs	r3, r2, r4
 800bf5c:	3b15      	subs	r3, #21
 800bf5e:	089b      	lsrs	r3, r3, #2
 800bf60:	3301      	adds	r3, #1
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	50e9      	str	r1, [r5, r3]
 800bf66:	2900      	cmp	r1, #0
 800bf68:	d002      	beq.n	800bf70 <__lshift+0xb4>
 800bf6a:	9b02      	ldr	r3, [sp, #8]
 800bf6c:	3302      	adds	r3, #2
 800bf6e:	9301      	str	r3, [sp, #4]
 800bf70:	9b01      	ldr	r3, [sp, #4]
 800bf72:	9804      	ldr	r0, [sp, #16]
 800bf74:	3b01      	subs	r3, #1
 800bf76:	0021      	movs	r1, r4
 800bf78:	6133      	str	r3, [r6, #16]
 800bf7a:	f7ff fe01 	bl	800bb80 <_Bfree>
 800bf7e:	0030      	movs	r0, r6
 800bf80:	b007      	add	sp, #28
 800bf82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf84:	cb02      	ldmia	r3!, {r1}
 800bf86:	c502      	stmia	r5!, {r1}
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d8fb      	bhi.n	800bf84 <__lshift+0xc8>
 800bf8c:	e7f0      	b.n	800bf70 <__lshift+0xb4>
 800bf8e:	46c0      	nop			; (mov r8, r8)
 800bf90:	0800e7f2 	.word	0x0800e7f2
 800bf94:	0800e85e 	.word	0x0800e85e

0800bf98 <__mcmp>:
 800bf98:	6902      	ldr	r2, [r0, #16]
 800bf9a:	690b      	ldr	r3, [r1, #16]
 800bf9c:	b530      	push	{r4, r5, lr}
 800bf9e:	0004      	movs	r4, r0
 800bfa0:	1ad0      	subs	r0, r2, r3
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d10d      	bne.n	800bfc2 <__mcmp+0x2a>
 800bfa6:	009b      	lsls	r3, r3, #2
 800bfa8:	3414      	adds	r4, #20
 800bfaa:	3114      	adds	r1, #20
 800bfac:	18e2      	adds	r2, r4, r3
 800bfae:	18c9      	adds	r1, r1, r3
 800bfb0:	3a04      	subs	r2, #4
 800bfb2:	3904      	subs	r1, #4
 800bfb4:	6815      	ldr	r5, [r2, #0]
 800bfb6:	680b      	ldr	r3, [r1, #0]
 800bfb8:	429d      	cmp	r5, r3
 800bfba:	d003      	beq.n	800bfc4 <__mcmp+0x2c>
 800bfbc:	2001      	movs	r0, #1
 800bfbe:	429d      	cmp	r5, r3
 800bfc0:	d303      	bcc.n	800bfca <__mcmp+0x32>
 800bfc2:	bd30      	pop	{r4, r5, pc}
 800bfc4:	4294      	cmp	r4, r2
 800bfc6:	d3f3      	bcc.n	800bfb0 <__mcmp+0x18>
 800bfc8:	e7fb      	b.n	800bfc2 <__mcmp+0x2a>
 800bfca:	4240      	negs	r0, r0
 800bfcc:	e7f9      	b.n	800bfc2 <__mcmp+0x2a>
	...

0800bfd0 <__mdiff>:
 800bfd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfd2:	000e      	movs	r6, r1
 800bfd4:	0007      	movs	r7, r0
 800bfd6:	0011      	movs	r1, r2
 800bfd8:	0030      	movs	r0, r6
 800bfda:	b087      	sub	sp, #28
 800bfdc:	0014      	movs	r4, r2
 800bfde:	f7ff ffdb 	bl	800bf98 <__mcmp>
 800bfe2:	1e05      	subs	r5, r0, #0
 800bfe4:	d110      	bne.n	800c008 <__mdiff+0x38>
 800bfe6:	0001      	movs	r1, r0
 800bfe8:	0038      	movs	r0, r7
 800bfea:	f7ff fda1 	bl	800bb30 <_Balloc>
 800bfee:	1e02      	subs	r2, r0, #0
 800bff0:	d104      	bne.n	800bffc <__mdiff+0x2c>
 800bff2:	4b40      	ldr	r3, [pc, #256]	; (800c0f4 <__mdiff+0x124>)
 800bff4:	4940      	ldr	r1, [pc, #256]	; (800c0f8 <__mdiff+0x128>)
 800bff6:	4841      	ldr	r0, [pc, #260]	; (800c0fc <__mdiff+0x12c>)
 800bff8:	f000 fa0c 	bl	800c414 <__assert_func>
 800bffc:	2301      	movs	r3, #1
 800bffe:	6145      	str	r5, [r0, #20]
 800c000:	6103      	str	r3, [r0, #16]
 800c002:	0010      	movs	r0, r2
 800c004:	b007      	add	sp, #28
 800c006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c008:	2301      	movs	r3, #1
 800c00a:	9301      	str	r3, [sp, #4]
 800c00c:	2800      	cmp	r0, #0
 800c00e:	db04      	blt.n	800c01a <__mdiff+0x4a>
 800c010:	0023      	movs	r3, r4
 800c012:	0034      	movs	r4, r6
 800c014:	001e      	movs	r6, r3
 800c016:	2300      	movs	r3, #0
 800c018:	9301      	str	r3, [sp, #4]
 800c01a:	0038      	movs	r0, r7
 800c01c:	6861      	ldr	r1, [r4, #4]
 800c01e:	f7ff fd87 	bl	800bb30 <_Balloc>
 800c022:	1e02      	subs	r2, r0, #0
 800c024:	d103      	bne.n	800c02e <__mdiff+0x5e>
 800c026:	2190      	movs	r1, #144	; 0x90
 800c028:	4b32      	ldr	r3, [pc, #200]	; (800c0f4 <__mdiff+0x124>)
 800c02a:	0089      	lsls	r1, r1, #2
 800c02c:	e7e3      	b.n	800bff6 <__mdiff+0x26>
 800c02e:	9b01      	ldr	r3, [sp, #4]
 800c030:	2700      	movs	r7, #0
 800c032:	60c3      	str	r3, [r0, #12]
 800c034:	6920      	ldr	r0, [r4, #16]
 800c036:	3414      	adds	r4, #20
 800c038:	9401      	str	r4, [sp, #4]
 800c03a:	9b01      	ldr	r3, [sp, #4]
 800c03c:	0084      	lsls	r4, r0, #2
 800c03e:	191b      	adds	r3, r3, r4
 800c040:	0034      	movs	r4, r6
 800c042:	9302      	str	r3, [sp, #8]
 800c044:	6933      	ldr	r3, [r6, #16]
 800c046:	3414      	adds	r4, #20
 800c048:	0099      	lsls	r1, r3, #2
 800c04a:	1863      	adds	r3, r4, r1
 800c04c:	9303      	str	r3, [sp, #12]
 800c04e:	0013      	movs	r3, r2
 800c050:	3314      	adds	r3, #20
 800c052:	469c      	mov	ip, r3
 800c054:	9305      	str	r3, [sp, #20]
 800c056:	9b01      	ldr	r3, [sp, #4]
 800c058:	9304      	str	r3, [sp, #16]
 800c05a:	9b04      	ldr	r3, [sp, #16]
 800c05c:	cc02      	ldmia	r4!, {r1}
 800c05e:	cb20      	ldmia	r3!, {r5}
 800c060:	9304      	str	r3, [sp, #16]
 800c062:	b2ab      	uxth	r3, r5
 800c064:	19df      	adds	r7, r3, r7
 800c066:	b28b      	uxth	r3, r1
 800c068:	1afb      	subs	r3, r7, r3
 800c06a:	0c09      	lsrs	r1, r1, #16
 800c06c:	0c2d      	lsrs	r5, r5, #16
 800c06e:	1a6d      	subs	r5, r5, r1
 800c070:	1419      	asrs	r1, r3, #16
 800c072:	186d      	adds	r5, r5, r1
 800c074:	4661      	mov	r1, ip
 800c076:	142f      	asrs	r7, r5, #16
 800c078:	b29b      	uxth	r3, r3
 800c07a:	042d      	lsls	r5, r5, #16
 800c07c:	432b      	orrs	r3, r5
 800c07e:	c108      	stmia	r1!, {r3}
 800c080:	9b03      	ldr	r3, [sp, #12]
 800c082:	468c      	mov	ip, r1
 800c084:	42a3      	cmp	r3, r4
 800c086:	d8e8      	bhi.n	800c05a <__mdiff+0x8a>
 800c088:	0031      	movs	r1, r6
 800c08a:	9c03      	ldr	r4, [sp, #12]
 800c08c:	3115      	adds	r1, #21
 800c08e:	2304      	movs	r3, #4
 800c090:	428c      	cmp	r4, r1
 800c092:	d304      	bcc.n	800c09e <__mdiff+0xce>
 800c094:	1ba3      	subs	r3, r4, r6
 800c096:	3b15      	subs	r3, #21
 800c098:	089b      	lsrs	r3, r3, #2
 800c09a:	3301      	adds	r3, #1
 800c09c:	009b      	lsls	r3, r3, #2
 800c09e:	9901      	ldr	r1, [sp, #4]
 800c0a0:	18cc      	adds	r4, r1, r3
 800c0a2:	9905      	ldr	r1, [sp, #20]
 800c0a4:	0026      	movs	r6, r4
 800c0a6:	18cb      	adds	r3, r1, r3
 800c0a8:	469c      	mov	ip, r3
 800c0aa:	9902      	ldr	r1, [sp, #8]
 800c0ac:	428e      	cmp	r6, r1
 800c0ae:	d310      	bcc.n	800c0d2 <__mdiff+0x102>
 800c0b0:	9e02      	ldr	r6, [sp, #8]
 800c0b2:	1ee1      	subs	r1, r4, #3
 800c0b4:	2500      	movs	r5, #0
 800c0b6:	428e      	cmp	r6, r1
 800c0b8:	d304      	bcc.n	800c0c4 <__mdiff+0xf4>
 800c0ba:	0031      	movs	r1, r6
 800c0bc:	3103      	adds	r1, #3
 800c0be:	1b0c      	subs	r4, r1, r4
 800c0c0:	08a4      	lsrs	r4, r4, #2
 800c0c2:	00a5      	lsls	r5, r4, #2
 800c0c4:	195b      	adds	r3, r3, r5
 800c0c6:	3b04      	subs	r3, #4
 800c0c8:	6819      	ldr	r1, [r3, #0]
 800c0ca:	2900      	cmp	r1, #0
 800c0cc:	d00f      	beq.n	800c0ee <__mdiff+0x11e>
 800c0ce:	6110      	str	r0, [r2, #16]
 800c0d0:	e797      	b.n	800c002 <__mdiff+0x32>
 800c0d2:	ce02      	ldmia	r6!, {r1}
 800c0d4:	b28d      	uxth	r5, r1
 800c0d6:	19ed      	adds	r5, r5, r7
 800c0d8:	0c0f      	lsrs	r7, r1, #16
 800c0da:	1429      	asrs	r1, r5, #16
 800c0dc:	1879      	adds	r1, r7, r1
 800c0de:	140f      	asrs	r7, r1, #16
 800c0e0:	b2ad      	uxth	r5, r5
 800c0e2:	0409      	lsls	r1, r1, #16
 800c0e4:	430d      	orrs	r5, r1
 800c0e6:	4661      	mov	r1, ip
 800c0e8:	c120      	stmia	r1!, {r5}
 800c0ea:	468c      	mov	ip, r1
 800c0ec:	e7dd      	b.n	800c0aa <__mdiff+0xda>
 800c0ee:	3801      	subs	r0, #1
 800c0f0:	e7e9      	b.n	800c0c6 <__mdiff+0xf6>
 800c0f2:	46c0      	nop			; (mov r8, r8)
 800c0f4:	0800e7f2 	.word	0x0800e7f2
 800c0f8:	00000232 	.word	0x00000232
 800c0fc:	0800e85e 	.word	0x0800e85e

0800c100 <__d2b>:
 800c100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c102:	2101      	movs	r1, #1
 800c104:	0014      	movs	r4, r2
 800c106:	001e      	movs	r6, r3
 800c108:	9f08      	ldr	r7, [sp, #32]
 800c10a:	f7ff fd11 	bl	800bb30 <_Balloc>
 800c10e:	1e05      	subs	r5, r0, #0
 800c110:	d105      	bne.n	800c11e <__d2b+0x1e>
 800c112:	0002      	movs	r2, r0
 800c114:	4b26      	ldr	r3, [pc, #152]	; (800c1b0 <__d2b+0xb0>)
 800c116:	4927      	ldr	r1, [pc, #156]	; (800c1b4 <__d2b+0xb4>)
 800c118:	4827      	ldr	r0, [pc, #156]	; (800c1b8 <__d2b+0xb8>)
 800c11a:	f000 f97b 	bl	800c414 <__assert_func>
 800c11e:	0333      	lsls	r3, r6, #12
 800c120:	0076      	lsls	r6, r6, #1
 800c122:	0b1b      	lsrs	r3, r3, #12
 800c124:	0d76      	lsrs	r6, r6, #21
 800c126:	d124      	bne.n	800c172 <__d2b+0x72>
 800c128:	9301      	str	r3, [sp, #4]
 800c12a:	2c00      	cmp	r4, #0
 800c12c:	d027      	beq.n	800c17e <__d2b+0x7e>
 800c12e:	4668      	mov	r0, sp
 800c130:	9400      	str	r4, [sp, #0]
 800c132:	f7ff fd8d 	bl	800bc50 <__lo0bits>
 800c136:	9c00      	ldr	r4, [sp, #0]
 800c138:	2800      	cmp	r0, #0
 800c13a:	d01e      	beq.n	800c17a <__d2b+0x7a>
 800c13c:	9b01      	ldr	r3, [sp, #4]
 800c13e:	2120      	movs	r1, #32
 800c140:	001a      	movs	r2, r3
 800c142:	1a09      	subs	r1, r1, r0
 800c144:	408a      	lsls	r2, r1
 800c146:	40c3      	lsrs	r3, r0
 800c148:	4322      	orrs	r2, r4
 800c14a:	616a      	str	r2, [r5, #20]
 800c14c:	9301      	str	r3, [sp, #4]
 800c14e:	9c01      	ldr	r4, [sp, #4]
 800c150:	61ac      	str	r4, [r5, #24]
 800c152:	1e63      	subs	r3, r4, #1
 800c154:	419c      	sbcs	r4, r3
 800c156:	3401      	adds	r4, #1
 800c158:	612c      	str	r4, [r5, #16]
 800c15a:	2e00      	cmp	r6, #0
 800c15c:	d018      	beq.n	800c190 <__d2b+0x90>
 800c15e:	4b17      	ldr	r3, [pc, #92]	; (800c1bc <__d2b+0xbc>)
 800c160:	18f6      	adds	r6, r6, r3
 800c162:	2335      	movs	r3, #53	; 0x35
 800c164:	1836      	adds	r6, r6, r0
 800c166:	1a18      	subs	r0, r3, r0
 800c168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c16a:	603e      	str	r6, [r7, #0]
 800c16c:	6018      	str	r0, [r3, #0]
 800c16e:	0028      	movs	r0, r5
 800c170:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c172:	2280      	movs	r2, #128	; 0x80
 800c174:	0352      	lsls	r2, r2, #13
 800c176:	4313      	orrs	r3, r2
 800c178:	e7d6      	b.n	800c128 <__d2b+0x28>
 800c17a:	616c      	str	r4, [r5, #20]
 800c17c:	e7e7      	b.n	800c14e <__d2b+0x4e>
 800c17e:	a801      	add	r0, sp, #4
 800c180:	f7ff fd66 	bl	800bc50 <__lo0bits>
 800c184:	2401      	movs	r4, #1
 800c186:	9b01      	ldr	r3, [sp, #4]
 800c188:	612c      	str	r4, [r5, #16]
 800c18a:	616b      	str	r3, [r5, #20]
 800c18c:	3020      	adds	r0, #32
 800c18e:	e7e4      	b.n	800c15a <__d2b+0x5a>
 800c190:	4b0b      	ldr	r3, [pc, #44]	; (800c1c0 <__d2b+0xc0>)
 800c192:	18c0      	adds	r0, r0, r3
 800c194:	4b0b      	ldr	r3, [pc, #44]	; (800c1c4 <__d2b+0xc4>)
 800c196:	6038      	str	r0, [r7, #0]
 800c198:	18e3      	adds	r3, r4, r3
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	18eb      	adds	r3, r5, r3
 800c19e:	6958      	ldr	r0, [r3, #20]
 800c1a0:	f7ff fd3c 	bl	800bc1c <__hi0bits>
 800c1a4:	0164      	lsls	r4, r4, #5
 800c1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1a8:	1a24      	subs	r4, r4, r0
 800c1aa:	601c      	str	r4, [r3, #0]
 800c1ac:	e7df      	b.n	800c16e <__d2b+0x6e>
 800c1ae:	46c0      	nop			; (mov r8, r8)
 800c1b0:	0800e7f2 	.word	0x0800e7f2
 800c1b4:	0000030a 	.word	0x0000030a
 800c1b8:	0800e85e 	.word	0x0800e85e
 800c1bc:	fffffbcd 	.word	0xfffffbcd
 800c1c0:	fffffbce 	.word	0xfffffbce
 800c1c4:	3fffffff 	.word	0x3fffffff

0800c1c8 <frexp>:
 800c1c8:	b570      	push	{r4, r5, r6, lr}
 800c1ca:	0014      	movs	r4, r2
 800c1cc:	2500      	movs	r5, #0
 800c1ce:	6025      	str	r5, [r4, #0]
 800c1d0:	4d10      	ldr	r5, [pc, #64]	; (800c214 <frexp+0x4c>)
 800c1d2:	004b      	lsls	r3, r1, #1
 800c1d4:	000a      	movs	r2, r1
 800c1d6:	085b      	lsrs	r3, r3, #1
 800c1d8:	42ab      	cmp	r3, r5
 800c1da:	dc1a      	bgt.n	800c212 <frexp+0x4a>
 800c1dc:	001d      	movs	r5, r3
 800c1de:	4305      	orrs	r5, r0
 800c1e0:	d017      	beq.n	800c212 <frexp+0x4a>
 800c1e2:	4d0d      	ldr	r5, [pc, #52]	; (800c218 <frexp+0x50>)
 800c1e4:	4229      	tst	r1, r5
 800c1e6:	d109      	bne.n	800c1fc <frexp+0x34>
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	4b0c      	ldr	r3, [pc, #48]	; (800c21c <frexp+0x54>)
 800c1ec:	f7f5 fbb8 	bl	8001960 <__aeabi_dmul>
 800c1f0:	2536      	movs	r5, #54	; 0x36
 800c1f2:	000a      	movs	r2, r1
 800c1f4:	004b      	lsls	r3, r1, #1
 800c1f6:	426d      	negs	r5, r5
 800c1f8:	085b      	lsrs	r3, r3, #1
 800c1fa:	6025      	str	r5, [r4, #0]
 800c1fc:	4d08      	ldr	r5, [pc, #32]	; (800c220 <frexp+0x58>)
 800c1fe:	151b      	asrs	r3, r3, #20
 800c200:	195b      	adds	r3, r3, r5
 800c202:	6825      	ldr	r5, [r4, #0]
 800c204:	18eb      	adds	r3, r5, r3
 800c206:	6023      	str	r3, [r4, #0]
 800c208:	4b06      	ldr	r3, [pc, #24]	; (800c224 <frexp+0x5c>)
 800c20a:	401a      	ands	r2, r3
 800c20c:	4b06      	ldr	r3, [pc, #24]	; (800c228 <frexp+0x60>)
 800c20e:	4313      	orrs	r3, r2
 800c210:	0019      	movs	r1, r3
 800c212:	bd70      	pop	{r4, r5, r6, pc}
 800c214:	7fefffff 	.word	0x7fefffff
 800c218:	7ff00000 	.word	0x7ff00000
 800c21c:	43500000 	.word	0x43500000
 800c220:	fffffc02 	.word	0xfffffc02
 800c224:	800fffff 	.word	0x800fffff
 800c228:	3fe00000 	.word	0x3fe00000

0800c22c <_sbrk_r>:
 800c22c:	2300      	movs	r3, #0
 800c22e:	b570      	push	{r4, r5, r6, lr}
 800c230:	4d06      	ldr	r5, [pc, #24]	; (800c24c <_sbrk_r+0x20>)
 800c232:	0004      	movs	r4, r0
 800c234:	0008      	movs	r0, r1
 800c236:	602b      	str	r3, [r5, #0]
 800c238:	f7fc fe84 	bl	8008f44 <_sbrk>
 800c23c:	1c43      	adds	r3, r0, #1
 800c23e:	d103      	bne.n	800c248 <_sbrk_r+0x1c>
 800c240:	682b      	ldr	r3, [r5, #0]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d000      	beq.n	800c248 <_sbrk_r+0x1c>
 800c246:	6023      	str	r3, [r4, #0]
 800c248:	bd70      	pop	{r4, r5, r6, pc}
 800c24a:	46c0      	nop			; (mov r8, r8)
 800c24c:	20003b7c 	.word	0x20003b7c

0800c250 <strncpy>:
 800c250:	0003      	movs	r3, r0
 800c252:	b530      	push	{r4, r5, lr}
 800c254:	001d      	movs	r5, r3
 800c256:	2a00      	cmp	r2, #0
 800c258:	d006      	beq.n	800c268 <strncpy+0x18>
 800c25a:	780c      	ldrb	r4, [r1, #0]
 800c25c:	3a01      	subs	r2, #1
 800c25e:	3301      	adds	r3, #1
 800c260:	702c      	strb	r4, [r5, #0]
 800c262:	3101      	adds	r1, #1
 800c264:	2c00      	cmp	r4, #0
 800c266:	d1f5      	bne.n	800c254 <strncpy+0x4>
 800c268:	2100      	movs	r1, #0
 800c26a:	189a      	adds	r2, r3, r2
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d100      	bne.n	800c272 <strncpy+0x22>
 800c270:	bd30      	pop	{r4, r5, pc}
 800c272:	7019      	strb	r1, [r3, #0]
 800c274:	3301      	adds	r3, #1
 800c276:	e7f9      	b.n	800c26c <strncpy+0x1c>

0800c278 <__ssprint_r>:
 800c278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c27a:	6893      	ldr	r3, [r2, #8]
 800c27c:	b087      	sub	sp, #28
 800c27e:	000c      	movs	r4, r1
 800c280:	0017      	movs	r7, r2
 800c282:	9002      	str	r0, [sp, #8]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d065      	beq.n	800c354 <__ssprint_r+0xdc>
 800c288:	6813      	ldr	r3, [r2, #0]
 800c28a:	9303      	str	r3, [sp, #12]
 800c28c:	2300      	movs	r3, #0
 800c28e:	9305      	str	r3, [sp, #20]
 800c290:	9301      	str	r3, [sp, #4]
 800c292:	9b01      	ldr	r3, [sp, #4]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d02d      	beq.n	800c2f4 <__ssprint_r+0x7c>
 800c298:	68a6      	ldr	r6, [r4, #8]
 800c29a:	429e      	cmp	r6, r3
 800c29c:	d849      	bhi.n	800c332 <__ssprint_r+0xba>
 800c29e:	2390      	movs	r3, #144	; 0x90
 800c2a0:	89a2      	ldrh	r2, [r4, #12]
 800c2a2:	00db      	lsls	r3, r3, #3
 800c2a4:	421a      	tst	r2, r3
 800c2a6:	d041      	beq.n	800c32c <__ssprint_r+0xb4>
 800c2a8:	2003      	movs	r0, #3
 800c2aa:	6921      	ldr	r1, [r4, #16]
 800c2ac:	6823      	ldr	r3, [r4, #0]
 800c2ae:	1a5b      	subs	r3, r3, r1
 800c2b0:	9304      	str	r3, [sp, #16]
 800c2b2:	6963      	ldr	r3, [r4, #20]
 800c2b4:	4343      	muls	r3, r0
 800c2b6:	0fdd      	lsrs	r5, r3, #31
 800c2b8:	18ed      	adds	r5, r5, r3
 800c2ba:	9b04      	ldr	r3, [sp, #16]
 800c2bc:	9801      	ldr	r0, [sp, #4]
 800c2be:	3301      	adds	r3, #1
 800c2c0:	181b      	adds	r3, r3, r0
 800c2c2:	106d      	asrs	r5, r5, #1
 800c2c4:	42ab      	cmp	r3, r5
 800c2c6:	d900      	bls.n	800c2ca <__ssprint_r+0x52>
 800c2c8:	001d      	movs	r5, r3
 800c2ca:	0553      	lsls	r3, r2, #21
 800c2cc:	d546      	bpl.n	800c35c <__ssprint_r+0xe4>
 800c2ce:	0029      	movs	r1, r5
 800c2d0:	9802      	ldr	r0, [sp, #8]
 800c2d2:	f7ff fa0b 	bl	800b6ec <_malloc_r>
 800c2d6:	1e06      	subs	r6, r0, #0
 800c2d8:	d116      	bne.n	800c308 <__ssprint_r+0x90>
 800c2da:	230c      	movs	r3, #12
 800c2dc:	9a02      	ldr	r2, [sp, #8]
 800c2de:	2001      	movs	r0, #1
 800c2e0:	6013      	str	r3, [r2, #0]
 800c2e2:	2340      	movs	r3, #64	; 0x40
 800c2e4:	89a2      	ldrh	r2, [r4, #12]
 800c2e6:	4240      	negs	r0, r0
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	81a3      	strh	r3, [r4, #12]
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	60bb      	str	r3, [r7, #8]
 800c2f0:	607b      	str	r3, [r7, #4]
 800c2f2:	e031      	b.n	800c358 <__ssprint_r+0xe0>
 800c2f4:	9b03      	ldr	r3, [sp, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	9305      	str	r3, [sp, #20]
 800c2fa:	9b03      	ldr	r3, [sp, #12]
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	9301      	str	r3, [sp, #4]
 800c300:	9b03      	ldr	r3, [sp, #12]
 800c302:	3308      	adds	r3, #8
 800c304:	9303      	str	r3, [sp, #12]
 800c306:	e7c4      	b.n	800c292 <__ssprint_r+0x1a>
 800c308:	9a04      	ldr	r2, [sp, #16]
 800c30a:	6921      	ldr	r1, [r4, #16]
 800c30c:	f7fc fed9 	bl	80090c2 <memcpy>
 800c310:	89a3      	ldrh	r3, [r4, #12]
 800c312:	4a18      	ldr	r2, [pc, #96]	; (800c374 <__ssprint_r+0xfc>)
 800c314:	401a      	ands	r2, r3
 800c316:	2380      	movs	r3, #128	; 0x80
 800c318:	4313      	orrs	r3, r2
 800c31a:	81a3      	strh	r3, [r4, #12]
 800c31c:	9b04      	ldr	r3, [sp, #16]
 800c31e:	6126      	str	r6, [r4, #16]
 800c320:	18f6      	adds	r6, r6, r3
 800c322:	6026      	str	r6, [r4, #0]
 800c324:	6165      	str	r5, [r4, #20]
 800c326:	9e01      	ldr	r6, [sp, #4]
 800c328:	1aed      	subs	r5, r5, r3
 800c32a:	60a5      	str	r5, [r4, #8]
 800c32c:	9b01      	ldr	r3, [sp, #4]
 800c32e:	429e      	cmp	r6, r3
 800c330:	d900      	bls.n	800c334 <__ssprint_r+0xbc>
 800c332:	9e01      	ldr	r6, [sp, #4]
 800c334:	0032      	movs	r2, r6
 800c336:	9905      	ldr	r1, [sp, #20]
 800c338:	6820      	ldr	r0, [r4, #0]
 800c33a:	f000 f903 	bl	800c544 <memmove>
 800c33e:	68a3      	ldr	r3, [r4, #8]
 800c340:	9a01      	ldr	r2, [sp, #4]
 800c342:	1b9b      	subs	r3, r3, r6
 800c344:	60a3      	str	r3, [r4, #8]
 800c346:	6823      	ldr	r3, [r4, #0]
 800c348:	199e      	adds	r6, r3, r6
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	6026      	str	r6, [r4, #0]
 800c34e:	1a9b      	subs	r3, r3, r2
 800c350:	60bb      	str	r3, [r7, #8]
 800c352:	d1cf      	bne.n	800c2f4 <__ssprint_r+0x7c>
 800c354:	2000      	movs	r0, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	b007      	add	sp, #28
 800c35a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c35c:	002a      	movs	r2, r5
 800c35e:	9802      	ldr	r0, [sp, #8]
 800c360:	f000 f904 	bl	800c56c <_realloc_r>
 800c364:	1e06      	subs	r6, r0, #0
 800c366:	d1d9      	bne.n	800c31c <__ssprint_r+0xa4>
 800c368:	6921      	ldr	r1, [r4, #16]
 800c36a:	9802      	ldr	r0, [sp, #8]
 800c36c:	f7ff f904 	bl	800b578 <_free_r>
 800c370:	e7b3      	b.n	800c2da <__ssprint_r+0x62>
 800c372:	46c0      	nop			; (mov r8, r8)
 800c374:	fffffb7f 	.word	0xfffffb7f

0800c378 <sysconf>:
 800c378:	2380      	movs	r3, #128	; 0x80
 800c37a:	b510      	push	{r4, lr}
 800c37c:	015b      	lsls	r3, r3, #5
 800c37e:	2808      	cmp	r0, #8
 800c380:	d004      	beq.n	800c38c <sysconf+0x14>
 800c382:	f7fc fe5b 	bl	800903c <__errno>
 800c386:	2316      	movs	r3, #22
 800c388:	6003      	str	r3, [r0, #0]
 800c38a:	3b17      	subs	r3, #23
 800c38c:	0018      	movs	r0, r3
 800c38e:	bd10      	pop	{r4, pc}

0800c390 <__register_exitproc>:
 800c390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c392:	4f1e      	ldr	r7, [pc, #120]	; (800c40c <__register_exitproc+0x7c>)
 800c394:	0004      	movs	r4, r0
 800c396:	6838      	ldr	r0, [r7, #0]
 800c398:	0016      	movs	r6, r2
 800c39a:	9100      	str	r1, [sp, #0]
 800c39c:	9301      	str	r3, [sp, #4]
 800c39e:	f7ff f9a3 	bl	800b6e8 <__retarget_lock_acquire_recursive>
 800c3a2:	4b1b      	ldr	r3, [pc, #108]	; (800c410 <__register_exitproc+0x80>)
 800c3a4:	6819      	ldr	r1, [r3, #0]
 800c3a6:	000b      	movs	r3, r1
 800c3a8:	33fc      	adds	r3, #252	; 0xfc
 800c3aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c3ac:	2a00      	cmp	r2, #0
 800c3ae:	d103      	bne.n	800c3b8 <__register_exitproc+0x28>
 800c3b0:	000a      	movs	r2, r1
 800c3b2:	324d      	adds	r2, #77	; 0x4d
 800c3b4:	32ff      	adds	r2, #255	; 0xff
 800c3b6:	64da      	str	r2, [r3, #76]	; 0x4c
 800c3b8:	6853      	ldr	r3, [r2, #4]
 800c3ba:	6838      	ldr	r0, [r7, #0]
 800c3bc:	2b1f      	cmp	r3, #31
 800c3be:	dd04      	ble.n	800c3ca <__register_exitproc+0x3a>
 800c3c0:	f7ff f993 	bl	800b6ea <__retarget_lock_release_recursive>
 800c3c4:	2001      	movs	r0, #1
 800c3c6:	4240      	negs	r0, r0
 800c3c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c3ca:	2c00      	cmp	r4, #0
 800c3cc:	d014      	beq.n	800c3f8 <__register_exitproc+0x68>
 800c3ce:	0099      	lsls	r1, r3, #2
 800c3d0:	1851      	adds	r1, r2, r1
 800c3d2:	000f      	movs	r7, r1
 800c3d4:	3788      	adds	r7, #136	; 0x88
 800c3d6:	603e      	str	r6, [r7, #0]
 800c3d8:	2701      	movs	r7, #1
 800c3da:	0016      	movs	r6, r2
 800c3dc:	409f      	lsls	r7, r3
 800c3de:	3685      	adds	r6, #133	; 0x85
 800c3e0:	36ff      	adds	r6, #255	; 0xff
 800c3e2:	6875      	ldr	r5, [r6, #4]
 800c3e4:	31fc      	adds	r1, #252	; 0xfc
 800c3e6:	433d      	orrs	r5, r7
 800c3e8:	6075      	str	r5, [r6, #4]
 800c3ea:	9d01      	ldr	r5, [sp, #4]
 800c3ec:	60cd      	str	r5, [r1, #12]
 800c3ee:	2c02      	cmp	r4, #2
 800c3f0:	d102      	bne.n	800c3f8 <__register_exitproc+0x68>
 800c3f2:	68b1      	ldr	r1, [r6, #8]
 800c3f4:	430f      	orrs	r7, r1
 800c3f6:	60b7      	str	r7, [r6, #8]
 800c3f8:	1c59      	adds	r1, r3, #1
 800c3fa:	6051      	str	r1, [r2, #4]
 800c3fc:	3302      	adds	r3, #2
 800c3fe:	9900      	ldr	r1, [sp, #0]
 800c400:	009b      	lsls	r3, r3, #2
 800c402:	5099      	str	r1, [r3, r2]
 800c404:	f7ff f971 	bl	800b6ea <__retarget_lock_release_recursive>
 800c408:	2000      	movs	r0, #0
 800c40a:	e7dd      	b.n	800c3c8 <__register_exitproc+0x38>
 800c40c:	20000440 	.word	0x20000440
 800c410:	0800e68c 	.word	0x0800e68c

0800c414 <__assert_func>:
 800c414:	b530      	push	{r4, r5, lr}
 800c416:	0014      	movs	r4, r2
 800c418:	001a      	movs	r2, r3
 800c41a:	4b09      	ldr	r3, [pc, #36]	; (800c440 <__assert_func+0x2c>)
 800c41c:	0005      	movs	r5, r0
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	b085      	sub	sp, #20
 800c422:	68d8      	ldr	r0, [r3, #12]
 800c424:	4b07      	ldr	r3, [pc, #28]	; (800c444 <__assert_func+0x30>)
 800c426:	2c00      	cmp	r4, #0
 800c428:	d101      	bne.n	800c42e <__assert_func+0x1a>
 800c42a:	4b07      	ldr	r3, [pc, #28]	; (800c448 <__assert_func+0x34>)
 800c42c:	001c      	movs	r4, r3
 800c42e:	9301      	str	r3, [sp, #4]
 800c430:	9100      	str	r1, [sp, #0]
 800c432:	002b      	movs	r3, r5
 800c434:	4905      	ldr	r1, [pc, #20]	; (800c44c <__assert_func+0x38>)
 800c436:	9402      	str	r4, [sp, #8]
 800c438:	f000 f85a 	bl	800c4f0 <fiprintf>
 800c43c:	f001 f814 	bl	800d468 <abort>
 800c440:	20000010 	.word	0x20000010
 800c444:	0800e9bc 	.word	0x0800e9bc
 800c448:	0800e9f7 	.word	0x0800e9f7
 800c44c:	0800e9c9 	.word	0x0800e9c9

0800c450 <_calloc_r>:
 800c450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c452:	2500      	movs	r5, #0
 800c454:	000e      	movs	r6, r1
 800c456:	0c0c      	lsrs	r4, r1, #16
 800c458:	0c13      	lsrs	r3, r2, #16
 800c45a:	42ac      	cmp	r4, r5
 800c45c:	d133      	bne.n	800c4c6 <_calloc_r+0x76>
 800c45e:	42ab      	cmp	r3, r5
 800c460:	d121      	bne.n	800c4a6 <_calloc_r+0x56>
 800c462:	b2b6      	uxth	r6, r6
 800c464:	b291      	uxth	r1, r2
 800c466:	4371      	muls	r1, r6
 800c468:	f7ff f940 	bl	800b6ec <_malloc_r>
 800c46c:	1e04      	subs	r4, r0, #0
 800c46e:	d033      	beq.n	800c4d8 <_calloc_r+0x88>
 800c470:	0003      	movs	r3, r0
 800c472:	3b08      	subs	r3, #8
 800c474:	685a      	ldr	r2, [r3, #4]
 800c476:	2303      	movs	r3, #3
 800c478:	439a      	bics	r2, r3
 800c47a:	3a04      	subs	r2, #4
 800c47c:	2a24      	cmp	r2, #36	; 0x24
 800c47e:	d832      	bhi.n	800c4e6 <_calloc_r+0x96>
 800c480:	0003      	movs	r3, r0
 800c482:	2a13      	cmp	r2, #19
 800c484:	d90a      	bls.n	800c49c <_calloc_r+0x4c>
 800c486:	6005      	str	r5, [r0, #0]
 800c488:	6045      	str	r5, [r0, #4]
 800c48a:	3308      	adds	r3, #8
 800c48c:	2a1b      	cmp	r2, #27
 800c48e:	d905      	bls.n	800c49c <_calloc_r+0x4c>
 800c490:	6085      	str	r5, [r0, #8]
 800c492:	60c5      	str	r5, [r0, #12]
 800c494:	2a24      	cmp	r2, #36	; 0x24
 800c496:	d021      	beq.n	800c4dc <_calloc_r+0x8c>
 800c498:	0003      	movs	r3, r0
 800c49a:	3310      	adds	r3, #16
 800c49c:	2200      	movs	r2, #0
 800c49e:	601a      	str	r2, [r3, #0]
 800c4a0:	605a      	str	r2, [r3, #4]
 800c4a2:	609a      	str	r2, [r3, #8]
 800c4a4:	e018      	b.n	800c4d8 <_calloc_r+0x88>
 800c4a6:	1c1c      	adds	r4, r3, #0
 800c4a8:	1c31      	adds	r1, r6, #0
 800c4aa:	b2b6      	uxth	r6, r6
 800c4ac:	b292      	uxth	r2, r2
 800c4ae:	b289      	uxth	r1, r1
 800c4b0:	4372      	muls	r2, r6
 800c4b2:	b2a3      	uxth	r3, r4
 800c4b4:	434b      	muls	r3, r1
 800c4b6:	0c11      	lsrs	r1, r2, #16
 800c4b8:	185b      	adds	r3, r3, r1
 800c4ba:	0c19      	lsrs	r1, r3, #16
 800c4bc:	d107      	bne.n	800c4ce <_calloc_r+0x7e>
 800c4be:	0419      	lsls	r1, r3, #16
 800c4c0:	b292      	uxth	r2, r2
 800c4c2:	4311      	orrs	r1, r2
 800c4c4:	e7d0      	b.n	800c468 <_calloc_r+0x18>
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d101      	bne.n	800c4ce <_calloc_r+0x7e>
 800c4ca:	1c11      	adds	r1, r2, #0
 800c4cc:	e7ed      	b.n	800c4aa <_calloc_r+0x5a>
 800c4ce:	f7fc fdb5 	bl	800903c <__errno>
 800c4d2:	230c      	movs	r3, #12
 800c4d4:	2400      	movs	r4, #0
 800c4d6:	6003      	str	r3, [r0, #0]
 800c4d8:	0020      	movs	r0, r4
 800c4da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4dc:	0003      	movs	r3, r0
 800c4de:	6105      	str	r5, [r0, #16]
 800c4e0:	3318      	adds	r3, #24
 800c4e2:	6145      	str	r5, [r0, #20]
 800c4e4:	e7da      	b.n	800c49c <_calloc_r+0x4c>
 800c4e6:	2100      	movs	r1, #0
 800c4e8:	f7fc fdf4 	bl	80090d4 <memset>
 800c4ec:	e7f4      	b.n	800c4d8 <_calloc_r+0x88>
	...

0800c4f0 <fiprintf>:
 800c4f0:	b40e      	push	{r1, r2, r3}
 800c4f2:	b503      	push	{r0, r1, lr}
 800c4f4:	0001      	movs	r1, r0
 800c4f6:	ab03      	add	r3, sp, #12
 800c4f8:	4804      	ldr	r0, [pc, #16]	; (800c50c <fiprintf+0x1c>)
 800c4fa:	cb04      	ldmia	r3!, {r2}
 800c4fc:	6800      	ldr	r0, [r0, #0]
 800c4fe:	9301      	str	r3, [sp, #4]
 800c500:	f000 fa0a 	bl	800c918 <_vfiprintf_r>
 800c504:	b002      	add	sp, #8
 800c506:	bc08      	pop	{r3}
 800c508:	b003      	add	sp, #12
 800c50a:	4718      	bx	r3
 800c50c:	20000010 	.word	0x20000010

0800c510 <__locale_mb_cur_max>:
 800c510:	2394      	movs	r3, #148	; 0x94
 800c512:	4a02      	ldr	r2, [pc, #8]	; (800c51c <__locale_mb_cur_max+0xc>)
 800c514:	005b      	lsls	r3, r3, #1
 800c516:	5cd0      	ldrb	r0, [r2, r3]
 800c518:	4770      	bx	lr
 800c51a:	46c0      	nop			; (mov r8, r8)
 800c51c:	20000854 	.word	0x20000854

0800c520 <__ascii_mbtowc>:
 800c520:	b082      	sub	sp, #8
 800c522:	2900      	cmp	r1, #0
 800c524:	d100      	bne.n	800c528 <__ascii_mbtowc+0x8>
 800c526:	a901      	add	r1, sp, #4
 800c528:	1e10      	subs	r0, r2, #0
 800c52a:	d006      	beq.n	800c53a <__ascii_mbtowc+0x1a>
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d006      	beq.n	800c53e <__ascii_mbtowc+0x1e>
 800c530:	7813      	ldrb	r3, [r2, #0]
 800c532:	600b      	str	r3, [r1, #0]
 800c534:	7810      	ldrb	r0, [r2, #0]
 800c536:	1e43      	subs	r3, r0, #1
 800c538:	4198      	sbcs	r0, r3
 800c53a:	b002      	add	sp, #8
 800c53c:	4770      	bx	lr
 800c53e:	2002      	movs	r0, #2
 800c540:	4240      	negs	r0, r0
 800c542:	e7fa      	b.n	800c53a <__ascii_mbtowc+0x1a>

0800c544 <memmove>:
 800c544:	b510      	push	{r4, lr}
 800c546:	4288      	cmp	r0, r1
 800c548:	d902      	bls.n	800c550 <memmove+0xc>
 800c54a:	188b      	adds	r3, r1, r2
 800c54c:	4298      	cmp	r0, r3
 800c54e:	d303      	bcc.n	800c558 <memmove+0x14>
 800c550:	2300      	movs	r3, #0
 800c552:	e007      	b.n	800c564 <memmove+0x20>
 800c554:	5c8b      	ldrb	r3, [r1, r2]
 800c556:	5483      	strb	r3, [r0, r2]
 800c558:	3a01      	subs	r2, #1
 800c55a:	d2fb      	bcs.n	800c554 <memmove+0x10>
 800c55c:	bd10      	pop	{r4, pc}
 800c55e:	5ccc      	ldrb	r4, [r1, r3]
 800c560:	54c4      	strb	r4, [r0, r3]
 800c562:	3301      	adds	r3, #1
 800c564:	429a      	cmp	r2, r3
 800c566:	d1fa      	bne.n	800c55e <memmove+0x1a>
 800c568:	e7f8      	b.n	800c55c <memmove+0x18>
	...

0800c56c <_realloc_r>:
 800c56c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c56e:	b087      	sub	sp, #28
 800c570:	1e0c      	subs	r4, r1, #0
 800c572:	9002      	str	r0, [sp, #8]
 800c574:	9205      	str	r2, [sp, #20]
 800c576:	d106      	bne.n	800c586 <_realloc_r+0x1a>
 800c578:	0011      	movs	r1, r2
 800c57a:	f7ff f8b7 	bl	800b6ec <_malloc_r>
 800c57e:	0007      	movs	r7, r0
 800c580:	0038      	movs	r0, r7
 800c582:	b007      	add	sp, #28
 800c584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c586:	9802      	ldr	r0, [sp, #8]
 800c588:	f7ff fac2 	bl	800bb10 <__malloc_lock>
 800c58c:	9b05      	ldr	r3, [sp, #20]
 800c58e:	330b      	adds	r3, #11
 800c590:	2b16      	cmp	r3, #22
 800c592:	d908      	bls.n	800c5a6 <_realloc_r+0x3a>
 800c594:	2207      	movs	r2, #7
 800c596:	4393      	bics	r3, r2
 800c598:	9301      	str	r3, [sp, #4]
 800c59a:	d506      	bpl.n	800c5aa <_realloc_r+0x3e>
 800c59c:	230c      	movs	r3, #12
 800c59e:	9a02      	ldr	r2, [sp, #8]
 800c5a0:	2700      	movs	r7, #0
 800c5a2:	6013      	str	r3, [r2, #0]
 800c5a4:	e7ec      	b.n	800c580 <_realloc_r+0x14>
 800c5a6:	2310      	movs	r3, #16
 800c5a8:	9301      	str	r3, [sp, #4]
 800c5aa:	9b01      	ldr	r3, [sp, #4]
 800c5ac:	9a05      	ldr	r2, [sp, #20]
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d3f4      	bcc.n	800c59c <_realloc_r+0x30>
 800c5b2:	0023      	movs	r3, r4
 800c5b4:	3b08      	subs	r3, #8
 800c5b6:	685f      	ldr	r7, [r3, #4]
 800c5b8:	9304      	str	r3, [sp, #16]
 800c5ba:	003a      	movs	r2, r7
 800c5bc:	2303      	movs	r3, #3
 800c5be:	439a      	bics	r2, r3
 800c5c0:	9b01      	ldr	r3, [sp, #4]
 800c5c2:	9203      	str	r2, [sp, #12]
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	dc00      	bgt.n	800c5ca <_realloc_r+0x5e>
 800c5c8:	e167      	b.n	800c89a <_realloc_r+0x32e>
 800c5ca:	9b04      	ldr	r3, [sp, #16]
 800c5cc:	48b7      	ldr	r0, [pc, #732]	; (800c8ac <_realloc_r+0x340>)
 800c5ce:	189b      	adds	r3, r3, r2
 800c5d0:	6882      	ldr	r2, [r0, #8]
 800c5d2:	4694      	mov	ip, r2
 800c5d4:	685a      	ldr	r2, [r3, #4]
 800c5d6:	459c      	cmp	ip, r3
 800c5d8:	d006      	beq.n	800c5e8 <_realloc_r+0x7c>
 800c5da:	2501      	movs	r5, #1
 800c5dc:	0011      	movs	r1, r2
 800c5de:	43a9      	bics	r1, r5
 800c5e0:	1859      	adds	r1, r3, r1
 800c5e2:	6849      	ldr	r1, [r1, #4]
 800c5e4:	4229      	tst	r1, r5
 800c5e6:	d126      	bne.n	800c636 <_realloc_r+0xca>
 800c5e8:	2103      	movs	r1, #3
 800c5ea:	438a      	bics	r2, r1
 800c5ec:	9903      	ldr	r1, [sp, #12]
 800c5ee:	188e      	adds	r6, r1, r2
 800c5f0:	9901      	ldr	r1, [sp, #4]
 800c5f2:	459c      	cmp	ip, r3
 800c5f4:	d117      	bne.n	800c626 <_realloc_r+0xba>
 800c5f6:	3110      	adds	r1, #16
 800c5f8:	42b1      	cmp	r1, r6
 800c5fa:	dc1e      	bgt.n	800c63a <_realloc_r+0xce>
 800c5fc:	9b01      	ldr	r3, [sp, #4]
 800c5fe:	9a04      	ldr	r2, [sp, #16]
 800c600:	469c      	mov	ip, r3
 800c602:	1af6      	subs	r6, r6, r3
 800c604:	2301      	movs	r3, #1
 800c606:	4462      	add	r2, ip
 800c608:	431e      	orrs	r6, r3
 800c60a:	6082      	str	r2, [r0, #8]
 800c60c:	6056      	str	r6, [r2, #4]
 800c60e:	0022      	movs	r2, r4
 800c610:	3a08      	subs	r2, #8
 800c612:	6851      	ldr	r1, [r2, #4]
 800c614:	9802      	ldr	r0, [sp, #8]
 800c616:	400b      	ands	r3, r1
 800c618:	4661      	mov	r1, ip
 800c61a:	430b      	orrs	r3, r1
 800c61c:	6053      	str	r3, [r2, #4]
 800c61e:	f7ff fa7f 	bl	800bb20 <__malloc_unlock>
 800c622:	0027      	movs	r7, r4
 800c624:	e7ac      	b.n	800c580 <_realloc_r+0x14>
 800c626:	42b1      	cmp	r1, r6
 800c628:	dc07      	bgt.n	800c63a <_realloc_r+0xce>
 800c62a:	68da      	ldr	r2, [r3, #12]
 800c62c:	689b      	ldr	r3, [r3, #8]
 800c62e:	60da      	str	r2, [r3, #12]
 800c630:	6093      	str	r3, [r2, #8]
 800c632:	9d04      	ldr	r5, [sp, #16]
 800c634:	e07f      	b.n	800c736 <_realloc_r+0x1ca>
 800c636:	2200      	movs	r2, #0
 800c638:	0013      	movs	r3, r2
 800c63a:	07f9      	lsls	r1, r7, #31
 800c63c:	d500      	bpl.n	800c640 <_realloc_r+0xd4>
 800c63e:	e0e2      	b.n	800c806 <_realloc_r+0x29a>
 800c640:	0021      	movs	r1, r4
 800c642:	3908      	subs	r1, #8
 800c644:	680d      	ldr	r5, [r1, #0]
 800c646:	9904      	ldr	r1, [sp, #16]
 800c648:	1b4d      	subs	r5, r1, r5
 800c64a:	2103      	movs	r1, #3
 800c64c:	686f      	ldr	r7, [r5, #4]
 800c64e:	438f      	bics	r7, r1
 800c650:	9903      	ldr	r1, [sp, #12]
 800c652:	187f      	adds	r7, r7, r1
 800c654:	2b00      	cmp	r3, #0
 800c656:	d100      	bne.n	800c65a <_realloc_r+0xee>
 800c658:	e0a0      	b.n	800c79c <_realloc_r+0x230>
 800c65a:	19d6      	adds	r6, r2, r7
 800c65c:	459c      	cmp	ip, r3
 800c65e:	d149      	bne.n	800c6f4 <_realloc_r+0x188>
 800c660:	9b01      	ldr	r3, [sp, #4]
 800c662:	3310      	adds	r3, #16
 800c664:	42b3      	cmp	r3, r6
 800c666:	dd00      	ble.n	800c66a <_realloc_r+0xfe>
 800c668:	e098      	b.n	800c79c <_realloc_r+0x230>
 800c66a:	68aa      	ldr	r2, [r5, #8]
 800c66c:	68eb      	ldr	r3, [r5, #12]
 800c66e:	002f      	movs	r7, r5
 800c670:	60d3      	str	r3, [r2, #12]
 800c672:	609a      	str	r2, [r3, #8]
 800c674:	000a      	movs	r2, r1
 800c676:	3a04      	subs	r2, #4
 800c678:	3708      	adds	r7, #8
 800c67a:	2a24      	cmp	r2, #36	; 0x24
 800c67c:	d835      	bhi.n	800c6ea <_realloc_r+0x17e>
 800c67e:	003b      	movs	r3, r7
 800c680:	2a13      	cmp	r2, #19
 800c682:	d908      	bls.n	800c696 <_realloc_r+0x12a>
 800c684:	6823      	ldr	r3, [r4, #0]
 800c686:	60ab      	str	r3, [r5, #8]
 800c688:	6863      	ldr	r3, [r4, #4]
 800c68a:	60eb      	str	r3, [r5, #12]
 800c68c:	2a1b      	cmp	r2, #27
 800c68e:	d81a      	bhi.n	800c6c6 <_realloc_r+0x15a>
 800c690:	002b      	movs	r3, r5
 800c692:	3408      	adds	r4, #8
 800c694:	3310      	adds	r3, #16
 800c696:	6822      	ldr	r2, [r4, #0]
 800c698:	601a      	str	r2, [r3, #0]
 800c69a:	6862      	ldr	r2, [r4, #4]
 800c69c:	605a      	str	r2, [r3, #4]
 800c69e:	68a2      	ldr	r2, [r4, #8]
 800c6a0:	609a      	str	r2, [r3, #8]
 800c6a2:	9b01      	ldr	r3, [sp, #4]
 800c6a4:	18ea      	adds	r2, r5, r3
 800c6a6:	4b81      	ldr	r3, [pc, #516]	; (800c8ac <_realloc_r+0x340>)
 800c6a8:	609a      	str	r2, [r3, #8]
 800c6aa:	9b01      	ldr	r3, [sp, #4]
 800c6ac:	1af6      	subs	r6, r6, r3
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	431e      	orrs	r6, r3
 800c6b2:	6056      	str	r6, [r2, #4]
 800c6b4:	686a      	ldr	r2, [r5, #4]
 800c6b6:	4013      	ands	r3, r2
 800c6b8:	9a01      	ldr	r2, [sp, #4]
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	606b      	str	r3, [r5, #4]
 800c6be:	9802      	ldr	r0, [sp, #8]
 800c6c0:	f7ff fa2e 	bl	800bb20 <__malloc_unlock>
 800c6c4:	e75c      	b.n	800c580 <_realloc_r+0x14>
 800c6c6:	68a3      	ldr	r3, [r4, #8]
 800c6c8:	612b      	str	r3, [r5, #16]
 800c6ca:	68e3      	ldr	r3, [r4, #12]
 800c6cc:	616b      	str	r3, [r5, #20]
 800c6ce:	2a24      	cmp	r2, #36	; 0x24
 800c6d0:	d003      	beq.n	800c6da <_realloc_r+0x16e>
 800c6d2:	002b      	movs	r3, r5
 800c6d4:	3410      	adds	r4, #16
 800c6d6:	3318      	adds	r3, #24
 800c6d8:	e7dd      	b.n	800c696 <_realloc_r+0x12a>
 800c6da:	6923      	ldr	r3, [r4, #16]
 800c6dc:	61ab      	str	r3, [r5, #24]
 800c6de:	002b      	movs	r3, r5
 800c6e0:	6962      	ldr	r2, [r4, #20]
 800c6e2:	3320      	adds	r3, #32
 800c6e4:	61ea      	str	r2, [r5, #28]
 800c6e6:	3418      	adds	r4, #24
 800c6e8:	e7d5      	b.n	800c696 <_realloc_r+0x12a>
 800c6ea:	0021      	movs	r1, r4
 800c6ec:	0038      	movs	r0, r7
 800c6ee:	f7ff ff29 	bl	800c544 <memmove>
 800c6f2:	e7d6      	b.n	800c6a2 <_realloc_r+0x136>
 800c6f4:	9a01      	ldr	r2, [sp, #4]
 800c6f6:	42b2      	cmp	r2, r6
 800c6f8:	dc50      	bgt.n	800c79c <_realloc_r+0x230>
 800c6fa:	0028      	movs	r0, r5
 800c6fc:	68da      	ldr	r2, [r3, #12]
 800c6fe:	689b      	ldr	r3, [r3, #8]
 800c700:	3008      	adds	r0, #8
 800c702:	60da      	str	r2, [r3, #12]
 800c704:	6093      	str	r3, [r2, #8]
 800c706:	68aa      	ldr	r2, [r5, #8]
 800c708:	68eb      	ldr	r3, [r5, #12]
 800c70a:	60d3      	str	r3, [r2, #12]
 800c70c:	609a      	str	r2, [r3, #8]
 800c70e:	9a03      	ldr	r2, [sp, #12]
 800c710:	3a04      	subs	r2, #4
 800c712:	2a24      	cmp	r2, #36	; 0x24
 800c714:	d83e      	bhi.n	800c794 <_realloc_r+0x228>
 800c716:	2a13      	cmp	r2, #19
 800c718:	d907      	bls.n	800c72a <_realloc_r+0x1be>
 800c71a:	6823      	ldr	r3, [r4, #0]
 800c71c:	60ab      	str	r3, [r5, #8]
 800c71e:	6863      	ldr	r3, [r4, #4]
 800c720:	60eb      	str	r3, [r5, #12]
 800c722:	2a1b      	cmp	r2, #27
 800c724:	d824      	bhi.n	800c770 <_realloc_r+0x204>
 800c726:	3408      	adds	r4, #8
 800c728:	3008      	adds	r0, #8
 800c72a:	6823      	ldr	r3, [r4, #0]
 800c72c:	6003      	str	r3, [r0, #0]
 800c72e:	6863      	ldr	r3, [r4, #4]
 800c730:	6043      	str	r3, [r0, #4]
 800c732:	68a3      	ldr	r3, [r4, #8]
 800c734:	6083      	str	r3, [r0, #8]
 800c736:	9b01      	ldr	r3, [sp, #4]
 800c738:	6868      	ldr	r0, [r5, #4]
 800c73a:	1af4      	subs	r4, r6, r3
 800c73c:	2301      	movs	r3, #1
 800c73e:	19aa      	adds	r2, r5, r6
 800c740:	4018      	ands	r0, r3
 800c742:	2c0f      	cmp	r4, #15
 800c744:	d800      	bhi.n	800c748 <_realloc_r+0x1dc>
 800c746:	e0aa      	b.n	800c89e <_realloc_r+0x332>
 800c748:	9901      	ldr	r1, [sp, #4]
 800c74a:	9e01      	ldr	r6, [sp, #4]
 800c74c:	1869      	adds	r1, r5, r1
 800c74e:	4330      	orrs	r0, r6
 800c750:	431c      	orrs	r4, r3
 800c752:	6068      	str	r0, [r5, #4]
 800c754:	604c      	str	r4, [r1, #4]
 800c756:	6850      	ldr	r0, [r2, #4]
 800c758:	3108      	adds	r1, #8
 800c75a:	4303      	orrs	r3, r0
 800c75c:	6053      	str	r3, [r2, #4]
 800c75e:	9802      	ldr	r0, [sp, #8]
 800c760:	f7fe ff0a 	bl	800b578 <_free_r>
 800c764:	9802      	ldr	r0, [sp, #8]
 800c766:	3508      	adds	r5, #8
 800c768:	f7ff f9da 	bl	800bb20 <__malloc_unlock>
 800c76c:	002f      	movs	r7, r5
 800c76e:	e707      	b.n	800c580 <_realloc_r+0x14>
 800c770:	68a3      	ldr	r3, [r4, #8]
 800c772:	612b      	str	r3, [r5, #16]
 800c774:	68e3      	ldr	r3, [r4, #12]
 800c776:	616b      	str	r3, [r5, #20]
 800c778:	2a24      	cmp	r2, #36	; 0x24
 800c77a:	d003      	beq.n	800c784 <_realloc_r+0x218>
 800c77c:	0028      	movs	r0, r5
 800c77e:	3410      	adds	r4, #16
 800c780:	3018      	adds	r0, #24
 800c782:	e7d2      	b.n	800c72a <_realloc_r+0x1be>
 800c784:	0028      	movs	r0, r5
 800c786:	6923      	ldr	r3, [r4, #16]
 800c788:	3020      	adds	r0, #32
 800c78a:	61ab      	str	r3, [r5, #24]
 800c78c:	6963      	ldr	r3, [r4, #20]
 800c78e:	3418      	adds	r4, #24
 800c790:	61eb      	str	r3, [r5, #28]
 800c792:	e7ca      	b.n	800c72a <_realloc_r+0x1be>
 800c794:	0021      	movs	r1, r4
 800c796:	f7ff fed5 	bl	800c544 <memmove>
 800c79a:	e7cc      	b.n	800c736 <_realloc_r+0x1ca>
 800c79c:	9b01      	ldr	r3, [sp, #4]
 800c79e:	42bb      	cmp	r3, r7
 800c7a0:	dc31      	bgt.n	800c806 <_realloc_r+0x29a>
 800c7a2:	0028      	movs	r0, r5
 800c7a4:	68aa      	ldr	r2, [r5, #8]
 800c7a6:	68eb      	ldr	r3, [r5, #12]
 800c7a8:	3008      	adds	r0, #8
 800c7aa:	60d3      	str	r3, [r2, #12]
 800c7ac:	609a      	str	r2, [r3, #8]
 800c7ae:	9a03      	ldr	r2, [sp, #12]
 800c7b0:	3a04      	subs	r2, #4
 800c7b2:	2a24      	cmp	r2, #36	; 0x24
 800c7b4:	d823      	bhi.n	800c7fe <_realloc_r+0x292>
 800c7b6:	2a13      	cmp	r2, #19
 800c7b8:	d907      	bls.n	800c7ca <_realloc_r+0x25e>
 800c7ba:	6823      	ldr	r3, [r4, #0]
 800c7bc:	60ab      	str	r3, [r5, #8]
 800c7be:	6863      	ldr	r3, [r4, #4]
 800c7c0:	60eb      	str	r3, [r5, #12]
 800c7c2:	2a1b      	cmp	r2, #27
 800c7c4:	d809      	bhi.n	800c7da <_realloc_r+0x26e>
 800c7c6:	3408      	adds	r4, #8
 800c7c8:	3008      	adds	r0, #8
 800c7ca:	6823      	ldr	r3, [r4, #0]
 800c7cc:	6003      	str	r3, [r0, #0]
 800c7ce:	6863      	ldr	r3, [r4, #4]
 800c7d0:	6043      	str	r3, [r0, #4]
 800c7d2:	68a3      	ldr	r3, [r4, #8]
 800c7d4:	6083      	str	r3, [r0, #8]
 800c7d6:	003e      	movs	r6, r7
 800c7d8:	e7ad      	b.n	800c736 <_realloc_r+0x1ca>
 800c7da:	68a3      	ldr	r3, [r4, #8]
 800c7dc:	612b      	str	r3, [r5, #16]
 800c7de:	68e3      	ldr	r3, [r4, #12]
 800c7e0:	616b      	str	r3, [r5, #20]
 800c7e2:	2a24      	cmp	r2, #36	; 0x24
 800c7e4:	d003      	beq.n	800c7ee <_realloc_r+0x282>
 800c7e6:	0028      	movs	r0, r5
 800c7e8:	3410      	adds	r4, #16
 800c7ea:	3018      	adds	r0, #24
 800c7ec:	e7ed      	b.n	800c7ca <_realloc_r+0x25e>
 800c7ee:	0028      	movs	r0, r5
 800c7f0:	6923      	ldr	r3, [r4, #16]
 800c7f2:	3020      	adds	r0, #32
 800c7f4:	61ab      	str	r3, [r5, #24]
 800c7f6:	6963      	ldr	r3, [r4, #20]
 800c7f8:	3418      	adds	r4, #24
 800c7fa:	61eb      	str	r3, [r5, #28]
 800c7fc:	e7e5      	b.n	800c7ca <_realloc_r+0x25e>
 800c7fe:	0021      	movs	r1, r4
 800c800:	f7ff fea0 	bl	800c544 <memmove>
 800c804:	e7e7      	b.n	800c7d6 <_realloc_r+0x26a>
 800c806:	9905      	ldr	r1, [sp, #20]
 800c808:	9802      	ldr	r0, [sp, #8]
 800c80a:	f7fe ff6f 	bl	800b6ec <_malloc_r>
 800c80e:	1e07      	subs	r7, r0, #0
 800c810:	d100      	bne.n	800c814 <_realloc_r+0x2a8>
 800c812:	e754      	b.n	800c6be <_realloc_r+0x152>
 800c814:	0023      	movs	r3, r4
 800c816:	2201      	movs	r2, #1
 800c818:	3b08      	subs	r3, #8
 800c81a:	685b      	ldr	r3, [r3, #4]
 800c81c:	4393      	bics	r3, r2
 800c81e:	9a04      	ldr	r2, [sp, #16]
 800c820:	18d3      	adds	r3, r2, r3
 800c822:	0002      	movs	r2, r0
 800c824:	3a08      	subs	r2, #8
 800c826:	4293      	cmp	r3, r2
 800c828:	d105      	bne.n	800c836 <_realloc_r+0x2ca>
 800c82a:	685e      	ldr	r6, [r3, #4]
 800c82c:	2303      	movs	r3, #3
 800c82e:	439e      	bics	r6, r3
 800c830:	9b03      	ldr	r3, [sp, #12]
 800c832:	18f6      	adds	r6, r6, r3
 800c834:	e6fd      	b.n	800c632 <_realloc_r+0xc6>
 800c836:	9a03      	ldr	r2, [sp, #12]
 800c838:	3a04      	subs	r2, #4
 800c83a:	2a24      	cmp	r2, #36	; 0x24
 800c83c:	d829      	bhi.n	800c892 <_realloc_r+0x326>
 800c83e:	0003      	movs	r3, r0
 800c840:	0021      	movs	r1, r4
 800c842:	2a13      	cmp	r2, #19
 800c844:	d908      	bls.n	800c858 <_realloc_r+0x2ec>
 800c846:	6823      	ldr	r3, [r4, #0]
 800c848:	6003      	str	r3, [r0, #0]
 800c84a:	6863      	ldr	r3, [r4, #4]
 800c84c:	6043      	str	r3, [r0, #4]
 800c84e:	2a1b      	cmp	r2, #27
 800c850:	d80d      	bhi.n	800c86e <_realloc_r+0x302>
 800c852:	0003      	movs	r3, r0
 800c854:	3108      	adds	r1, #8
 800c856:	3308      	adds	r3, #8
 800c858:	680a      	ldr	r2, [r1, #0]
 800c85a:	601a      	str	r2, [r3, #0]
 800c85c:	684a      	ldr	r2, [r1, #4]
 800c85e:	605a      	str	r2, [r3, #4]
 800c860:	688a      	ldr	r2, [r1, #8]
 800c862:	609a      	str	r2, [r3, #8]
 800c864:	0021      	movs	r1, r4
 800c866:	9802      	ldr	r0, [sp, #8]
 800c868:	f7fe fe86 	bl	800b578 <_free_r>
 800c86c:	e727      	b.n	800c6be <_realloc_r+0x152>
 800c86e:	68a3      	ldr	r3, [r4, #8]
 800c870:	6083      	str	r3, [r0, #8]
 800c872:	68e3      	ldr	r3, [r4, #12]
 800c874:	60c3      	str	r3, [r0, #12]
 800c876:	2a24      	cmp	r2, #36	; 0x24
 800c878:	d003      	beq.n	800c882 <_realloc_r+0x316>
 800c87a:	0003      	movs	r3, r0
 800c87c:	3110      	adds	r1, #16
 800c87e:	3310      	adds	r3, #16
 800c880:	e7ea      	b.n	800c858 <_realloc_r+0x2ec>
 800c882:	6923      	ldr	r3, [r4, #16]
 800c884:	3118      	adds	r1, #24
 800c886:	6103      	str	r3, [r0, #16]
 800c888:	0003      	movs	r3, r0
 800c88a:	6962      	ldr	r2, [r4, #20]
 800c88c:	3318      	adds	r3, #24
 800c88e:	6142      	str	r2, [r0, #20]
 800c890:	e7e2      	b.n	800c858 <_realloc_r+0x2ec>
 800c892:	0021      	movs	r1, r4
 800c894:	f7ff fe56 	bl	800c544 <memmove>
 800c898:	e7e4      	b.n	800c864 <_realloc_r+0x2f8>
 800c89a:	9e03      	ldr	r6, [sp, #12]
 800c89c:	e6c9      	b.n	800c632 <_realloc_r+0xc6>
 800c89e:	4306      	orrs	r6, r0
 800c8a0:	606e      	str	r6, [r5, #4]
 800c8a2:	6851      	ldr	r1, [r2, #4]
 800c8a4:	430b      	orrs	r3, r1
 800c8a6:	6053      	str	r3, [r2, #4]
 800c8a8:	e75c      	b.n	800c764 <_realloc_r+0x1f8>
 800c8aa:	46c0      	nop			; (mov r8, r8)
 800c8ac:	20000444 	.word	0x20000444

0800c8b0 <__sprint_r>:
 800c8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8b2:	b085      	sub	sp, #20
 800c8b4:	9001      	str	r0, [sp, #4]
 800c8b6:	6890      	ldr	r0, [r2, #8]
 800c8b8:	000d      	movs	r5, r1
 800c8ba:	0014      	movs	r4, r2
 800c8bc:	2800      	cmp	r0, #0
 800c8be:	d102      	bne.n	800c8c6 <__sprint_r+0x16>
 800c8c0:	6050      	str	r0, [r2, #4]
 800c8c2:	b005      	add	sp, #20
 800c8c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8c6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800c8c8:	049b      	lsls	r3, r3, #18
 800c8ca:	d521      	bpl.n	800c910 <__sprint_r+0x60>
 800c8cc:	6817      	ldr	r7, [r2, #0]
 800c8ce:	2600      	movs	r6, #0
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	9302      	str	r3, [sp, #8]
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	9300      	str	r3, [sp, #0]
 800c8d8:	089b      	lsrs	r3, r3, #2
 800c8da:	9303      	str	r3, [sp, #12]
 800c8dc:	9b03      	ldr	r3, [sp, #12]
 800c8de:	42b3      	cmp	r3, r6
 800c8e0:	dc0b      	bgt.n	800c8fa <__sprint_r+0x4a>
 800c8e2:	2303      	movs	r3, #3
 800c8e4:	9800      	ldr	r0, [sp, #0]
 800c8e6:	3708      	adds	r7, #8
 800c8e8:	4398      	bics	r0, r3
 800c8ea:	68a3      	ldr	r3, [r4, #8]
 800c8ec:	1a18      	subs	r0, r3, r0
 800c8ee:	60a0      	str	r0, [r4, #8]
 800c8f0:	d1ed      	bne.n	800c8ce <__sprint_r+0x1e>
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	60a3      	str	r3, [r4, #8]
 800c8f6:	6063      	str	r3, [r4, #4]
 800c8f8:	e7e3      	b.n	800c8c2 <__sprint_r+0x12>
 800c8fa:	9902      	ldr	r1, [sp, #8]
 800c8fc:	00b3      	lsls	r3, r6, #2
 800c8fe:	58c9      	ldr	r1, [r1, r3]
 800c900:	002a      	movs	r2, r5
 800c902:	9801      	ldr	r0, [sp, #4]
 800c904:	f000 ff2e 	bl	800d764 <_fputwc_r>
 800c908:	1c43      	adds	r3, r0, #1
 800c90a:	d0f2      	beq.n	800c8f2 <__sprint_r+0x42>
 800c90c:	3601      	adds	r6, #1
 800c90e:	e7e5      	b.n	800c8dc <__sprint_r+0x2c>
 800c910:	9801      	ldr	r0, [sp, #4]
 800c912:	f000 ff51 	bl	800d7b8 <__sfvwrite_r>
 800c916:	e7ec      	b.n	800c8f2 <__sprint_r+0x42>

0800c918 <_vfiprintf_r>:
 800c918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c91a:	b0c3      	sub	sp, #268	; 0x10c
 800c91c:	000f      	movs	r7, r1
 800c91e:	001c      	movs	r4, r3
 800c920:	001e      	movs	r6, r3
 800c922:	9006      	str	r0, [sp, #24]
 800c924:	9207      	str	r2, [sp, #28]
 800c926:	2800      	cmp	r0, #0
 800c928:	d005      	beq.n	800c936 <_vfiprintf_r+0x1e>
 800c92a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c92c:	9303      	str	r3, [sp, #12]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d101      	bne.n	800c936 <_vfiprintf_r+0x1e>
 800c932:	f000 feaf 	bl	800d694 <__sinit>
 800c936:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c938:	07db      	lsls	r3, r3, #31
 800c93a:	d405      	bmi.n	800c948 <_vfiprintf_r+0x30>
 800c93c:	89bb      	ldrh	r3, [r7, #12]
 800c93e:	059b      	lsls	r3, r3, #22
 800c940:	d402      	bmi.n	800c948 <_vfiprintf_r+0x30>
 800c942:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c944:	f7fe fed0 	bl	800b6e8 <__retarget_lock_acquire_recursive>
 800c948:	230c      	movs	r3, #12
 800c94a:	5efa      	ldrsh	r2, [r7, r3]
 800c94c:	2380      	movs	r3, #128	; 0x80
 800c94e:	019b      	lsls	r3, r3, #6
 800c950:	421a      	tst	r2, r3
 800c952:	d105      	bne.n	800c960 <_vfiprintf_r+0x48>
 800c954:	4313      	orrs	r3, r2
 800c956:	81bb      	strh	r3, [r7, #12]
 800c958:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c95a:	4ba3      	ldr	r3, [pc, #652]	; (800cbe8 <_vfiprintf_r+0x2d0>)
 800c95c:	4013      	ands	r3, r2
 800c95e:	667b      	str	r3, [r7, #100]	; 0x64
 800c960:	89bb      	ldrh	r3, [r7, #12]
 800c962:	071b      	lsls	r3, r3, #28
 800c964:	d502      	bpl.n	800c96c <_vfiprintf_r+0x54>
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d115      	bne.n	800c998 <_vfiprintf_r+0x80>
 800c96c:	0039      	movs	r1, r7
 800c96e:	9806      	ldr	r0, [sp, #24]
 800c970:	f000 fd16 	bl	800d3a0 <__swsetup_r>
 800c974:	2800      	cmp	r0, #0
 800c976:	d00f      	beq.n	800c998 <_vfiprintf_r+0x80>
 800c978:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c97a:	07db      	lsls	r3, r3, #31
 800c97c:	d505      	bpl.n	800c98a <_vfiprintf_r+0x72>
 800c97e:	2301      	movs	r3, #1
 800c980:	425b      	negs	r3, r3
 800c982:	9308      	str	r3, [sp, #32]
 800c984:	9808      	ldr	r0, [sp, #32]
 800c986:	b043      	add	sp, #268	; 0x10c
 800c988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c98a:	89bb      	ldrh	r3, [r7, #12]
 800c98c:	059b      	lsls	r3, r3, #22
 800c98e:	d4f6      	bmi.n	800c97e <_vfiprintf_r+0x66>
 800c990:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c992:	f7fe feaa 	bl	800b6ea <__retarget_lock_release_recursive>
 800c996:	e7f2      	b.n	800c97e <_vfiprintf_r+0x66>
 800c998:	231a      	movs	r3, #26
 800c99a:	89ba      	ldrh	r2, [r7, #12]
 800c99c:	4013      	ands	r3, r2
 800c99e:	2b0a      	cmp	r3, #10
 800c9a0:	d113      	bne.n	800c9ca <_vfiprintf_r+0xb2>
 800c9a2:	210e      	movs	r1, #14
 800c9a4:	5e7b      	ldrsh	r3, [r7, r1]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	db0f      	blt.n	800c9ca <_vfiprintf_r+0xb2>
 800c9aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9ac:	07db      	lsls	r3, r3, #31
 800c9ae:	d404      	bmi.n	800c9ba <_vfiprintf_r+0xa2>
 800c9b0:	0593      	lsls	r3, r2, #22
 800c9b2:	d402      	bmi.n	800c9ba <_vfiprintf_r+0xa2>
 800c9b4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c9b6:	f7fe fe98 	bl	800b6ea <__retarget_lock_release_recursive>
 800c9ba:	0023      	movs	r3, r4
 800c9bc:	0039      	movs	r1, r7
 800c9be:	9a07      	ldr	r2, [sp, #28]
 800c9c0:	9806      	ldr	r0, [sp, #24]
 800c9c2:	f000 fc9b 	bl	800d2fc <__sbprintf>
 800c9c6:	9008      	str	r0, [sp, #32]
 800c9c8:	e7dc      	b.n	800c984 <_vfiprintf_r+0x6c>
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	aa19      	add	r2, sp, #100	; 0x64
 800c9ce:	9216      	str	r2, [sp, #88]	; 0x58
 800c9d0:	9318      	str	r3, [sp, #96]	; 0x60
 800c9d2:	9317      	str	r3, [sp, #92]	; 0x5c
 800c9d4:	9203      	str	r2, [sp, #12]
 800c9d6:	930c      	str	r3, [sp, #48]	; 0x30
 800c9d8:	930d      	str	r3, [sp, #52]	; 0x34
 800c9da:	930e      	str	r3, [sp, #56]	; 0x38
 800c9dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9de:	9308      	str	r3, [sp, #32]
 800c9e0:	9c07      	ldr	r4, [sp, #28]
 800c9e2:	7823      	ldrb	r3, [r4, #0]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d002      	beq.n	800c9ee <_vfiprintf_r+0xd6>
 800c9e8:	2b25      	cmp	r3, #37	; 0x25
 800c9ea:	d000      	beq.n	800c9ee <_vfiprintf_r+0xd6>
 800c9ec:	e089      	b.n	800cb02 <_vfiprintf_r+0x1ea>
 800c9ee:	9b07      	ldr	r3, [sp, #28]
 800c9f0:	1ae5      	subs	r5, r4, r3
 800c9f2:	429c      	cmp	r4, r3
 800c9f4:	d011      	beq.n	800ca1a <_vfiprintf_r+0x102>
 800c9f6:	9b03      	ldr	r3, [sp, #12]
 800c9f8:	9a07      	ldr	r2, [sp, #28]
 800c9fa:	c324      	stmia	r3!, {r2, r5}
 800c9fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c9fe:	195b      	adds	r3, r3, r5
 800ca00:	9318      	str	r3, [sp, #96]	; 0x60
 800ca02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ca04:	9304      	str	r3, [sp, #16]
 800ca06:	3301      	adds	r3, #1
 800ca08:	9317      	str	r3, [sp, #92]	; 0x5c
 800ca0a:	2b07      	cmp	r3, #7
 800ca0c:	dc7b      	bgt.n	800cb06 <_vfiprintf_r+0x1ee>
 800ca0e:	9b03      	ldr	r3, [sp, #12]
 800ca10:	3308      	adds	r3, #8
 800ca12:	9303      	str	r3, [sp, #12]
 800ca14:	9b08      	ldr	r3, [sp, #32]
 800ca16:	195b      	adds	r3, r3, r5
 800ca18:	9308      	str	r3, [sp, #32]
 800ca1a:	7823      	ldrb	r3, [r4, #0]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d101      	bne.n	800ca24 <_vfiprintf_r+0x10c>
 800ca20:	f000 fc29 	bl	800d276 <_vfiprintf_r+0x95e>
 800ca24:	2200      	movs	r2, #0
 800ca26:	a914      	add	r1, sp, #80	; 0x50
 800ca28:	70ca      	strb	r2, [r1, #3]
 800ca2a:	2101      	movs	r1, #1
 800ca2c:	1c63      	adds	r3, r4, #1
 800ca2e:	250a      	movs	r5, #10
 800ca30:	0014      	movs	r4, r2
 800ca32:	4249      	negs	r1, r1
 800ca34:	9105      	str	r1, [sp, #20]
 800ca36:	9209      	str	r2, [sp, #36]	; 0x24
 800ca38:	1c5a      	adds	r2, r3, #1
 800ca3a:	781b      	ldrb	r3, [r3, #0]
 800ca3c:	9207      	str	r2, [sp, #28]
 800ca3e:	0018      	movs	r0, r3
 800ca40:	3820      	subs	r0, #32
 800ca42:	285a      	cmp	r0, #90	; 0x5a
 800ca44:	d900      	bls.n	800ca48 <_vfiprintf_r+0x130>
 800ca46:	e376      	b.n	800d136 <_vfiprintf_r+0x81e>
 800ca48:	f7f3 fb70 	bl	800012c <__gnu_thumb1_case_uhi>
 800ca4c:	037500a2 	.word	0x037500a2
 800ca50:	00ab0375 	.word	0x00ab0375
 800ca54:	03750375 	.word	0x03750375
 800ca58:	00870375 	.word	0x00870375
 800ca5c:	03750375 	.word	0x03750375
 800ca60:	00b500ad 	.word	0x00b500ad
 800ca64:	00b30375 	.word	0x00b30375
 800ca68:	037500b9 	.word	0x037500b9
 800ca6c:	00df00dd 	.word	0x00df00dd
 800ca70:	00df00df 	.word	0x00df00df
 800ca74:	00df00df 	.word	0x00df00df
 800ca78:	00df00df 	.word	0x00df00df
 800ca7c:	00df00df 	.word	0x00df00df
 800ca80:	03750375 	.word	0x03750375
 800ca84:	03750375 	.word	0x03750375
 800ca88:	03750375 	.word	0x03750375
 800ca8c:	03750375 	.word	0x03750375
 800ca90:	01070375 	.word	0x01070375
 800ca94:	037501f9 	.word	0x037501f9
 800ca98:	03750375 	.word	0x03750375
 800ca9c:	03750375 	.word	0x03750375
 800caa0:	03750375 	.word	0x03750375
 800caa4:	03750375 	.word	0x03750375
 800caa8:	02570375 	.word	0x02570375
 800caac:	03750375 	.word	0x03750375
 800cab0:	02980375 	.word	0x02980375
 800cab4:	02b10375 	.word	0x02b10375
 800cab8:	03750375 	.word	0x03750375
 800cabc:	037502ec 	.word	0x037502ec
 800cac0:	03750375 	.word	0x03750375
 800cac4:	03750375 	.word	0x03750375
 800cac8:	03750375 	.word	0x03750375
 800cacc:	03750375 	.word	0x03750375
 800cad0:	01070375 	.word	0x01070375
 800cad4:	037501fb 	.word	0x037501fb
 800cad8:	03750375 	.word	0x03750375
 800cadc:	01fb00f0 	.word	0x01fb00f0
 800cae0:	03750103 	.word	0x03750103
 800cae4:	037500fc 	.word	0x037500fc
 800cae8:	0259023a 	.word	0x0259023a
 800caec:	01030288 	.word	0x01030288
 800caf0:	02980375 	.word	0x02980375
 800caf4:	02b300a9 	.word	0x02b300a9
 800caf8:	03750375 	.word	0x03750375
 800cafc:	03750067 	.word	0x03750067
 800cb00:	00a9      	.short	0x00a9
 800cb02:	3401      	adds	r4, #1
 800cb04:	e76d      	b.n	800c9e2 <_vfiprintf_r+0xca>
 800cb06:	0039      	movs	r1, r7
 800cb08:	9806      	ldr	r0, [sp, #24]
 800cb0a:	aa16      	add	r2, sp, #88	; 0x58
 800cb0c:	f7ff fed0 	bl	800c8b0 <__sprint_r>
 800cb10:	2800      	cmp	r0, #0
 800cb12:	d000      	beq.n	800cb16 <_vfiprintf_r+0x1fe>
 800cb14:	e38e      	b.n	800d234 <_vfiprintf_r+0x91c>
 800cb16:	ab19      	add	r3, sp, #100	; 0x64
 800cb18:	e77b      	b.n	800ca12 <_vfiprintf_r+0xfa>
 800cb1a:	4a34      	ldr	r2, [pc, #208]	; (800cbec <_vfiprintf_r+0x2d4>)
 800cb1c:	0020      	movs	r0, r4
 800cb1e:	920c      	str	r2, [sp, #48]	; 0x30
 800cb20:	2220      	movs	r2, #32
 800cb22:	4010      	ands	r0, r2
 800cb24:	4214      	tst	r4, r2
 800cb26:	d100      	bne.n	800cb2a <_vfiprintf_r+0x212>
 800cb28:	e27e      	b.n	800d028 <_vfiprintf_r+0x710>
 800cb2a:	3a19      	subs	r2, #25
 800cb2c:	3607      	adds	r6, #7
 800cb2e:	4396      	bics	r6, r2
 800cb30:	0030      	movs	r0, r6
 800cb32:	c806      	ldmia	r0!, {r1, r2}
 800cb34:	9100      	str	r1, [sp, #0]
 800cb36:	9201      	str	r2, [sp, #4]
 800cb38:	9004      	str	r0, [sp, #16]
 800cb3a:	07e2      	lsls	r2, r4, #31
 800cb3c:	d509      	bpl.n	800cb52 <_vfiprintf_r+0x23a>
 800cb3e:	9a00      	ldr	r2, [sp, #0]
 800cb40:	9901      	ldr	r1, [sp, #4]
 800cb42:	430a      	orrs	r2, r1
 800cb44:	d005      	beq.n	800cb52 <_vfiprintf_r+0x23a>
 800cb46:	aa15      	add	r2, sp, #84	; 0x54
 800cb48:	2130      	movs	r1, #48	; 0x30
 800cb4a:	7053      	strb	r3, [r2, #1]
 800cb4c:	2302      	movs	r3, #2
 800cb4e:	7011      	strb	r1, [r2, #0]
 800cb50:	431c      	orrs	r4, r3
 800cb52:	4b27      	ldr	r3, [pc, #156]	; (800cbf0 <_vfiprintf_r+0x2d8>)
 800cb54:	401c      	ands	r4, r3
 800cb56:	2302      	movs	r3, #2
 800cb58:	e1e1      	b.n	800cf1e <_vfiprintf_r+0x606>
 800cb5a:	9806      	ldr	r0, [sp, #24]
 800cb5c:	f7fe fdbe 	bl	800b6dc <_localeconv_r>
 800cb60:	6843      	ldr	r3, [r0, #4]
 800cb62:	0018      	movs	r0, r3
 800cb64:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb66:	f7f3 facf 	bl	8000108 <strlen>
 800cb6a:	900e      	str	r0, [sp, #56]	; 0x38
 800cb6c:	9806      	ldr	r0, [sp, #24]
 800cb6e:	f7fe fdb5 	bl	800b6dc <_localeconv_r>
 800cb72:	6883      	ldr	r3, [r0, #8]
 800cb74:	930d      	str	r3, [sp, #52]	; 0x34
 800cb76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d010      	beq.n	800cb9e <_vfiprintf_r+0x286>
 800cb7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d00d      	beq.n	800cb9e <_vfiprintf_r+0x286>
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d00a      	beq.n	800cb9e <_vfiprintf_r+0x286>
 800cb88:	2380      	movs	r3, #128	; 0x80
 800cb8a:	00db      	lsls	r3, r3, #3
 800cb8c:	431c      	orrs	r4, r3
 800cb8e:	e006      	b.n	800cb9e <_vfiprintf_r+0x286>
 800cb90:	ab14      	add	r3, sp, #80	; 0x50
 800cb92:	78da      	ldrb	r2, [r3, #3]
 800cb94:	3303      	adds	r3, #3
 800cb96:	2a00      	cmp	r2, #0
 800cb98:	d101      	bne.n	800cb9e <_vfiprintf_r+0x286>
 800cb9a:	3220      	adds	r2, #32
 800cb9c:	701a      	strb	r2, [r3, #0]
 800cb9e:	9b07      	ldr	r3, [sp, #28]
 800cba0:	e74a      	b.n	800ca38 <_vfiprintf_r+0x120>
 800cba2:	2301      	movs	r3, #1
 800cba4:	e7f2      	b.n	800cb8c <_vfiprintf_r+0x274>
 800cba6:	ce08      	ldmia	r6!, {r3}
 800cba8:	9309      	str	r3, [sp, #36]	; 0x24
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	daf7      	bge.n	800cb9e <_vfiprintf_r+0x286>
 800cbae:	425b      	negs	r3, r3
 800cbb0:	9309      	str	r3, [sp, #36]	; 0x24
 800cbb2:	2304      	movs	r3, #4
 800cbb4:	e7ea      	b.n	800cb8c <_vfiprintf_r+0x274>
 800cbb6:	222b      	movs	r2, #43	; 0x2b
 800cbb8:	ab14      	add	r3, sp, #80	; 0x50
 800cbba:	70da      	strb	r2, [r3, #3]
 800cbbc:	e7ef      	b.n	800cb9e <_vfiprintf_r+0x286>
 800cbbe:	9b07      	ldr	r3, [sp, #28]
 800cbc0:	1c5a      	adds	r2, r3, #1
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	2b2a      	cmp	r3, #42	; 0x2a
 800cbc6:	d015      	beq.n	800cbf4 <_vfiprintf_r+0x2dc>
 800cbc8:	2100      	movs	r1, #0
 800cbca:	9105      	str	r1, [sp, #20]
 800cbcc:	0019      	movs	r1, r3
 800cbce:	3930      	subs	r1, #48	; 0x30
 800cbd0:	9207      	str	r2, [sp, #28]
 800cbd2:	2909      	cmp	r1, #9
 800cbd4:	d900      	bls.n	800cbd8 <_vfiprintf_r+0x2c0>
 800cbd6:	e732      	b.n	800ca3e <_vfiprintf_r+0x126>
 800cbd8:	9805      	ldr	r0, [sp, #20]
 800cbda:	4368      	muls	r0, r5
 800cbdc:	1843      	adds	r3, r0, r1
 800cbde:	9305      	str	r3, [sp, #20]
 800cbe0:	7813      	ldrb	r3, [r2, #0]
 800cbe2:	3201      	adds	r2, #1
 800cbe4:	e7f2      	b.n	800cbcc <_vfiprintf_r+0x2b4>
 800cbe6:	46c0      	nop			; (mov r8, r8)
 800cbe8:	ffffdfff 	.word	0xffffdfff
 800cbec:	0800e6a0 	.word	0x0800e6a0
 800cbf0:	fffffbff 	.word	0xfffffbff
 800cbf4:	ce08      	ldmia	r6!, {r3}
 800cbf6:	9305      	str	r3, [sp, #20]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	da02      	bge.n	800cc02 <_vfiprintf_r+0x2ea>
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	425b      	negs	r3, r3
 800cc00:	9305      	str	r3, [sp, #20]
 800cc02:	9207      	str	r2, [sp, #28]
 800cc04:	e7cb      	b.n	800cb9e <_vfiprintf_r+0x286>
 800cc06:	2380      	movs	r3, #128	; 0x80
 800cc08:	e7c0      	b.n	800cb8c <_vfiprintf_r+0x274>
 800cc0a:	2100      	movs	r1, #0
 800cc0c:	9a07      	ldr	r2, [sp, #28]
 800cc0e:	9109      	str	r1, [sp, #36]	; 0x24
 800cc10:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc12:	3b30      	subs	r3, #48	; 0x30
 800cc14:	4369      	muls	r1, r5
 800cc16:	185b      	adds	r3, r3, r1
 800cc18:	9309      	str	r3, [sp, #36]	; 0x24
 800cc1a:	0013      	movs	r3, r2
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	3201      	adds	r2, #1
 800cc20:	0019      	movs	r1, r3
 800cc22:	3930      	subs	r1, #48	; 0x30
 800cc24:	9207      	str	r2, [sp, #28]
 800cc26:	2909      	cmp	r1, #9
 800cc28:	d9f2      	bls.n	800cc10 <_vfiprintf_r+0x2f8>
 800cc2a:	e708      	b.n	800ca3e <_vfiprintf_r+0x126>
 800cc2c:	9b07      	ldr	r3, [sp, #28]
 800cc2e:	781b      	ldrb	r3, [r3, #0]
 800cc30:	2b68      	cmp	r3, #104	; 0x68
 800cc32:	d105      	bne.n	800cc40 <_vfiprintf_r+0x328>
 800cc34:	9b07      	ldr	r3, [sp, #28]
 800cc36:	3301      	adds	r3, #1
 800cc38:	9307      	str	r3, [sp, #28]
 800cc3a:	2380      	movs	r3, #128	; 0x80
 800cc3c:	009b      	lsls	r3, r3, #2
 800cc3e:	e7a5      	b.n	800cb8c <_vfiprintf_r+0x274>
 800cc40:	2340      	movs	r3, #64	; 0x40
 800cc42:	e7a3      	b.n	800cb8c <_vfiprintf_r+0x274>
 800cc44:	9b07      	ldr	r3, [sp, #28]
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	2b6c      	cmp	r3, #108	; 0x6c
 800cc4a:	d104      	bne.n	800cc56 <_vfiprintf_r+0x33e>
 800cc4c:	9b07      	ldr	r3, [sp, #28]
 800cc4e:	3301      	adds	r3, #1
 800cc50:	9307      	str	r3, [sp, #28]
 800cc52:	2320      	movs	r3, #32
 800cc54:	e79a      	b.n	800cb8c <_vfiprintf_r+0x274>
 800cc56:	2310      	movs	r3, #16
 800cc58:	e798      	b.n	800cb8c <_vfiprintf_r+0x274>
 800cc5a:	0032      	movs	r2, r6
 800cc5c:	2600      	movs	r6, #0
 800cc5e:	ca08      	ldmia	r2!, {r3}
 800cc60:	ad29      	add	r5, sp, #164	; 0xa4
 800cc62:	702b      	strb	r3, [r5, #0]
 800cc64:	ab14      	add	r3, sp, #80	; 0x50
 800cc66:	70de      	strb	r6, [r3, #3]
 800cc68:	2301      	movs	r3, #1
 800cc6a:	9204      	str	r2, [sp, #16]
 800cc6c:	9305      	str	r3, [sp, #20]
 800cc6e:	960b      	str	r6, [sp, #44]	; 0x2c
 800cc70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc72:	9a05      	ldr	r2, [sp, #20]
 800cc74:	930a      	str	r3, [sp, #40]	; 0x28
 800cc76:	4293      	cmp	r3, r2
 800cc78:	da00      	bge.n	800cc7c <_vfiprintf_r+0x364>
 800cc7a:	920a      	str	r2, [sp, #40]	; 0x28
 800cc7c:	ab14      	add	r3, sp, #80	; 0x50
 800cc7e:	3303      	adds	r3, #3
 800cc80:	781b      	ldrb	r3, [r3, #0]
 800cc82:	1e5a      	subs	r2, r3, #1
 800cc84:	4193      	sbcs	r3, r2
 800cc86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc88:	18d3      	adds	r3, r2, r3
 800cc8a:	930a      	str	r3, [sp, #40]	; 0x28
 800cc8c:	0022      	movs	r2, r4
 800cc8e:	2302      	movs	r3, #2
 800cc90:	401a      	ands	r2, r3
 800cc92:	9210      	str	r2, [sp, #64]	; 0x40
 800cc94:	421c      	tst	r4, r3
 800cc96:	d002      	beq.n	800cc9e <_vfiprintf_r+0x386>
 800cc98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc9a:	3302      	adds	r3, #2
 800cc9c:	930a      	str	r3, [sp, #40]	; 0x28
 800cc9e:	2384      	movs	r3, #132	; 0x84
 800cca0:	0022      	movs	r2, r4
 800cca2:	401a      	ands	r2, r3
 800cca4:	9211      	str	r2, [sp, #68]	; 0x44
 800cca6:	421c      	tst	r4, r3
 800cca8:	d122      	bne.n	800ccf0 <_vfiprintf_r+0x3d8>
 800ccaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ccae:	1a9e      	subs	r6, r3, r2
 800ccb0:	2e00      	cmp	r6, #0
 800ccb2:	dd1d      	ble.n	800ccf0 <_vfiprintf_r+0x3d8>
 800ccb4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ccb6:	9903      	ldr	r1, [sp, #12]
 800ccb8:	469c      	mov	ip, r3
 800ccba:	48d0      	ldr	r0, [pc, #832]	; (800cffc <_vfiprintf_r+0x6e4>)
 800ccbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ccbe:	9a03      	ldr	r2, [sp, #12]
 800ccc0:	9312      	str	r3, [sp, #72]	; 0x48
 800ccc2:	3108      	adds	r1, #8
 800ccc4:	3301      	adds	r3, #1
 800ccc6:	6010      	str	r0, [r2, #0]
 800ccc8:	2e10      	cmp	r6, #16
 800ccca:	dd00      	ble.n	800ccce <_vfiprintf_r+0x3b6>
 800cccc:	e240      	b.n	800d150 <_vfiprintf_r+0x838>
 800ccce:	6056      	str	r6, [r2, #4]
 800ccd0:	4466      	add	r6, ip
 800ccd2:	9618      	str	r6, [sp, #96]	; 0x60
 800ccd4:	9317      	str	r3, [sp, #92]	; 0x5c
 800ccd6:	9103      	str	r1, [sp, #12]
 800ccd8:	2b07      	cmp	r3, #7
 800ccda:	dd09      	ble.n	800ccf0 <_vfiprintf_r+0x3d8>
 800ccdc:	0039      	movs	r1, r7
 800ccde:	9806      	ldr	r0, [sp, #24]
 800cce0:	aa16      	add	r2, sp, #88	; 0x58
 800cce2:	f7ff fde5 	bl	800c8b0 <__sprint_r>
 800cce6:	2800      	cmp	r0, #0
 800cce8:	d000      	beq.n	800ccec <_vfiprintf_r+0x3d4>
 800ccea:	e2a3      	b.n	800d234 <_vfiprintf_r+0x91c>
 800ccec:	ab19      	add	r3, sp, #100	; 0x64
 800ccee:	9303      	str	r3, [sp, #12]
 800ccf0:	ab14      	add	r3, sp, #80	; 0x50
 800ccf2:	1cda      	adds	r2, r3, #3
 800ccf4:	78db      	ldrb	r3, [r3, #3]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d012      	beq.n	800cd20 <_vfiprintf_r+0x408>
 800ccfa:	9903      	ldr	r1, [sp, #12]
 800ccfc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ccfe:	600a      	str	r2, [r1, #0]
 800cd00:	2201      	movs	r2, #1
 800cd02:	9312      	str	r3, [sp, #72]	; 0x48
 800cd04:	604a      	str	r2, [r1, #4]
 800cd06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cd08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cd0a:	9313      	str	r3, [sp, #76]	; 0x4c
 800cd0c:	3201      	adds	r2, #1
 800cd0e:	3301      	adds	r3, #1
 800cd10:	9218      	str	r2, [sp, #96]	; 0x60
 800cd12:	9317      	str	r3, [sp, #92]	; 0x5c
 800cd14:	2b07      	cmp	r3, #7
 800cd16:	dd00      	ble.n	800cd1a <_vfiprintf_r+0x402>
 800cd18:	e22d      	b.n	800d176 <_vfiprintf_r+0x85e>
 800cd1a:	000b      	movs	r3, r1
 800cd1c:	3308      	adds	r3, #8
 800cd1e:	9303      	str	r3, [sp, #12]
 800cd20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d013      	beq.n	800cd4e <_vfiprintf_r+0x436>
 800cd26:	9903      	ldr	r1, [sp, #12]
 800cd28:	aa15      	add	r2, sp, #84	; 0x54
 800cd2a:	600a      	str	r2, [r1, #0]
 800cd2c:	2202      	movs	r2, #2
 800cd2e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800cd30:	604a      	str	r2, [r1, #4]
 800cd32:	9310      	str	r3, [sp, #64]	; 0x40
 800cd34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cd36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cd38:	3202      	adds	r2, #2
 800cd3a:	9312      	str	r3, [sp, #72]	; 0x48
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	9218      	str	r2, [sp, #96]	; 0x60
 800cd40:	9317      	str	r3, [sp, #92]	; 0x5c
 800cd42:	2b07      	cmp	r3, #7
 800cd44:	dd00      	ble.n	800cd48 <_vfiprintf_r+0x430>
 800cd46:	e21f      	b.n	800d188 <_vfiprintf_r+0x870>
 800cd48:	000b      	movs	r3, r1
 800cd4a:	3308      	adds	r3, #8
 800cd4c:	9303      	str	r3, [sp, #12]
 800cd4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cd50:	2b80      	cmp	r3, #128	; 0x80
 800cd52:	d122      	bne.n	800cd9a <_vfiprintf_r+0x482>
 800cd54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd58:	1a9e      	subs	r6, r3, r2
 800cd5a:	2e00      	cmp	r6, #0
 800cd5c:	dd1d      	ble.n	800cd9a <_vfiprintf_r+0x482>
 800cd5e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800cd60:	9903      	ldr	r1, [sp, #12]
 800cd62:	469c      	mov	ip, r3
 800cd64:	48a6      	ldr	r0, [pc, #664]	; (800d000 <_vfiprintf_r+0x6e8>)
 800cd66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cd68:	9a03      	ldr	r2, [sp, #12]
 800cd6a:	9310      	str	r3, [sp, #64]	; 0x40
 800cd6c:	3108      	adds	r1, #8
 800cd6e:	3301      	adds	r3, #1
 800cd70:	6010      	str	r0, [r2, #0]
 800cd72:	2e10      	cmp	r6, #16
 800cd74:	dd00      	ble.n	800cd78 <_vfiprintf_r+0x460>
 800cd76:	e210      	b.n	800d19a <_vfiprintf_r+0x882>
 800cd78:	6056      	str	r6, [r2, #4]
 800cd7a:	4466      	add	r6, ip
 800cd7c:	9618      	str	r6, [sp, #96]	; 0x60
 800cd7e:	9317      	str	r3, [sp, #92]	; 0x5c
 800cd80:	9103      	str	r1, [sp, #12]
 800cd82:	2b07      	cmp	r3, #7
 800cd84:	dd09      	ble.n	800cd9a <_vfiprintf_r+0x482>
 800cd86:	0039      	movs	r1, r7
 800cd88:	9806      	ldr	r0, [sp, #24]
 800cd8a:	aa16      	add	r2, sp, #88	; 0x58
 800cd8c:	f7ff fd90 	bl	800c8b0 <__sprint_r>
 800cd90:	2800      	cmp	r0, #0
 800cd92:	d000      	beq.n	800cd96 <_vfiprintf_r+0x47e>
 800cd94:	e24e      	b.n	800d234 <_vfiprintf_r+0x91c>
 800cd96:	ab19      	add	r3, sp, #100	; 0x64
 800cd98:	9303      	str	r3, [sp, #12]
 800cd9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd9c:	9a05      	ldr	r2, [sp, #20]
 800cd9e:	1a9e      	subs	r6, r3, r2
 800cda0:	2e00      	cmp	r6, #0
 800cda2:	dd1d      	ble.n	800cde0 <_vfiprintf_r+0x4c8>
 800cda4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800cda6:	9903      	ldr	r1, [sp, #12]
 800cda8:	469c      	mov	ip, r3
 800cdaa:	4895      	ldr	r0, [pc, #596]	; (800d000 <_vfiprintf_r+0x6e8>)
 800cdac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cdae:	9a03      	ldr	r2, [sp, #12]
 800cdb0:	930b      	str	r3, [sp, #44]	; 0x2c
 800cdb2:	3108      	adds	r1, #8
 800cdb4:	3301      	adds	r3, #1
 800cdb6:	6010      	str	r0, [r2, #0]
 800cdb8:	2e10      	cmp	r6, #16
 800cdba:	dd00      	ble.n	800cdbe <_vfiprintf_r+0x4a6>
 800cdbc:	e200      	b.n	800d1c0 <_vfiprintf_r+0x8a8>
 800cdbe:	6056      	str	r6, [r2, #4]
 800cdc0:	4466      	add	r6, ip
 800cdc2:	9618      	str	r6, [sp, #96]	; 0x60
 800cdc4:	9317      	str	r3, [sp, #92]	; 0x5c
 800cdc6:	9103      	str	r1, [sp, #12]
 800cdc8:	2b07      	cmp	r3, #7
 800cdca:	dd09      	ble.n	800cde0 <_vfiprintf_r+0x4c8>
 800cdcc:	0039      	movs	r1, r7
 800cdce:	9806      	ldr	r0, [sp, #24]
 800cdd0:	aa16      	add	r2, sp, #88	; 0x58
 800cdd2:	f7ff fd6d 	bl	800c8b0 <__sprint_r>
 800cdd6:	2800      	cmp	r0, #0
 800cdd8:	d000      	beq.n	800cddc <_vfiprintf_r+0x4c4>
 800cdda:	e22b      	b.n	800d234 <_vfiprintf_r+0x91c>
 800cddc:	ab19      	add	r3, sp, #100	; 0x64
 800cdde:	9303      	str	r3, [sp, #12]
 800cde0:	9b03      	ldr	r3, [sp, #12]
 800cde2:	9a05      	ldr	r2, [sp, #20]
 800cde4:	601d      	str	r5, [r3, #0]
 800cde6:	605a      	str	r2, [r3, #4]
 800cde8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800cdea:	0010      	movs	r0, r2
 800cdec:	469c      	mov	ip, r3
 800cdee:	930b      	str	r3, [sp, #44]	; 0x2c
 800cdf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cdf2:	4460      	add	r0, ip
 800cdf4:	9305      	str	r3, [sp, #20]
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	9018      	str	r0, [sp, #96]	; 0x60
 800cdfa:	9317      	str	r3, [sp, #92]	; 0x5c
 800cdfc:	2b07      	cmp	r3, #7
 800cdfe:	dd00      	ble.n	800ce02 <_vfiprintf_r+0x4ea>
 800ce00:	e1f1      	b.n	800d1e6 <_vfiprintf_r+0x8ce>
 800ce02:	9b03      	ldr	r3, [sp, #12]
 800ce04:	3308      	adds	r3, #8
 800ce06:	0762      	lsls	r2, r4, #29
 800ce08:	d500      	bpl.n	800ce0c <_vfiprintf_r+0x4f4>
 800ce0a:	e1f5      	b.n	800d1f8 <_vfiprintf_r+0x8e0>
 800ce0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce10:	4293      	cmp	r3, r2
 800ce12:	da00      	bge.n	800ce16 <_vfiprintf_r+0x4fe>
 800ce14:	0013      	movs	r3, r2
 800ce16:	9a08      	ldr	r2, [sp, #32]
 800ce18:	18d3      	adds	r3, r2, r3
 800ce1a:	9308      	str	r3, [sp, #32]
 800ce1c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ce1e:	9303      	str	r3, [sp, #12]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d007      	beq.n	800ce34 <_vfiprintf_r+0x51c>
 800ce24:	0039      	movs	r1, r7
 800ce26:	9806      	ldr	r0, [sp, #24]
 800ce28:	aa16      	add	r2, sp, #88	; 0x58
 800ce2a:	f7ff fd41 	bl	800c8b0 <__sprint_r>
 800ce2e:	2800      	cmp	r0, #0
 800ce30:	d000      	beq.n	800ce34 <_vfiprintf_r+0x51c>
 800ce32:	e1ff      	b.n	800d234 <_vfiprintf_r+0x91c>
 800ce34:	2300      	movs	r3, #0
 800ce36:	9317      	str	r3, [sp, #92]	; 0x5c
 800ce38:	ab19      	add	r3, sp, #100	; 0x64
 800ce3a:	9303      	str	r3, [sp, #12]
 800ce3c:	e049      	b.n	800ced2 <_vfiprintf_r+0x5ba>
 800ce3e:	2310      	movs	r3, #16
 800ce40:	431c      	orrs	r4, r3
 800ce42:	06a3      	lsls	r3, r4, #26
 800ce44:	d52b      	bpl.n	800ce9e <_vfiprintf_r+0x586>
 800ce46:	2307      	movs	r3, #7
 800ce48:	3607      	adds	r6, #7
 800ce4a:	439e      	bics	r6, r3
 800ce4c:	0031      	movs	r1, r6
 800ce4e:	c90c      	ldmia	r1!, {r2, r3}
 800ce50:	9200      	str	r2, [sp, #0]
 800ce52:	9301      	str	r3, [sp, #4]
 800ce54:	9104      	str	r1, [sp, #16]
 800ce56:	9a01      	ldr	r2, [sp, #4]
 800ce58:	2301      	movs	r3, #1
 800ce5a:	2a00      	cmp	r2, #0
 800ce5c:	da09      	bge.n	800ce72 <_vfiprintf_r+0x55a>
 800ce5e:	9d00      	ldr	r5, [sp, #0]
 800ce60:	9e01      	ldr	r6, [sp, #4]
 800ce62:	2200      	movs	r2, #0
 800ce64:	4269      	negs	r1, r5
 800ce66:	41b2      	sbcs	r2, r6
 800ce68:	9100      	str	r1, [sp, #0]
 800ce6a:	9201      	str	r2, [sp, #4]
 800ce6c:	212d      	movs	r1, #45	; 0x2d
 800ce6e:	aa14      	add	r2, sp, #80	; 0x50
 800ce70:	70d1      	strb	r1, [r2, #3]
 800ce72:	9901      	ldr	r1, [sp, #4]
 800ce74:	9a00      	ldr	r2, [sp, #0]
 800ce76:	430a      	orrs	r2, r1
 800ce78:	9905      	ldr	r1, [sp, #20]
 800ce7a:	3101      	adds	r1, #1
 800ce7c:	d100      	bne.n	800ce80 <_vfiprintf_r+0x568>
 800ce7e:	e209      	b.n	800d294 <_vfiprintf_r+0x97c>
 800ce80:	2180      	movs	r1, #128	; 0x80
 800ce82:	0020      	movs	r0, r4
 800ce84:	4388      	bics	r0, r1
 800ce86:	900a      	str	r0, [sp, #40]	; 0x28
 800ce88:	2a00      	cmp	r2, #0
 800ce8a:	d000      	beq.n	800ce8e <_vfiprintf_r+0x576>
 800ce8c:	e206      	b.n	800d29c <_vfiprintf_r+0x984>
 800ce8e:	9a05      	ldr	r2, [sp, #20]
 800ce90:	2a00      	cmp	r2, #0
 800ce92:	d100      	bne.n	800ce96 <_vfiprintf_r+0x57e>
 800ce94:	e143      	b.n	800d11e <_vfiprintf_r+0x806>
 800ce96:	2b01      	cmp	r3, #1
 800ce98:	d000      	beq.n	800ce9c <_vfiprintf_r+0x584>
 800ce9a:	e202      	b.n	800d2a2 <_vfiprintf_r+0x98a>
 800ce9c:	e0e6      	b.n	800d06c <_vfiprintf_r+0x754>
 800ce9e:	0032      	movs	r2, r6
 800cea0:	ca08      	ldmia	r2!, {r3}
 800cea2:	9204      	str	r2, [sp, #16]
 800cea4:	06e2      	lsls	r2, r4, #27
 800cea6:	d503      	bpl.n	800ceb0 <_vfiprintf_r+0x598>
 800cea8:	9300      	str	r3, [sp, #0]
 800ceaa:	17db      	asrs	r3, r3, #31
 800ceac:	9301      	str	r3, [sp, #4]
 800ceae:	e7d2      	b.n	800ce56 <_vfiprintf_r+0x53e>
 800ceb0:	0662      	lsls	r2, r4, #25
 800ceb2:	d501      	bpl.n	800ceb8 <_vfiprintf_r+0x5a0>
 800ceb4:	b21b      	sxth	r3, r3
 800ceb6:	e7f7      	b.n	800cea8 <_vfiprintf_r+0x590>
 800ceb8:	05a2      	lsls	r2, r4, #22
 800ceba:	d5f5      	bpl.n	800cea8 <_vfiprintf_r+0x590>
 800cebc:	b25b      	sxtb	r3, r3
 800cebe:	e7f3      	b.n	800cea8 <_vfiprintf_r+0x590>
 800cec0:	1d33      	adds	r3, r6, #4
 800cec2:	9304      	str	r3, [sp, #16]
 800cec4:	06a3      	lsls	r3, r4, #26
 800cec6:	d506      	bpl.n	800ced6 <_vfiprintf_r+0x5be>
 800cec8:	6833      	ldr	r3, [r6, #0]
 800ceca:	9a08      	ldr	r2, [sp, #32]
 800cecc:	601a      	str	r2, [r3, #0]
 800cece:	17d2      	asrs	r2, r2, #31
 800ced0:	605a      	str	r2, [r3, #4]
 800ced2:	9e04      	ldr	r6, [sp, #16]
 800ced4:	e584      	b.n	800c9e0 <_vfiprintf_r+0xc8>
 800ced6:	06e3      	lsls	r3, r4, #27
 800ced8:	d503      	bpl.n	800cee2 <_vfiprintf_r+0x5ca>
 800ceda:	6833      	ldr	r3, [r6, #0]
 800cedc:	9a08      	ldr	r2, [sp, #32]
 800cede:	601a      	str	r2, [r3, #0]
 800cee0:	e7f7      	b.n	800ced2 <_vfiprintf_r+0x5ba>
 800cee2:	0663      	lsls	r3, r4, #25
 800cee4:	d503      	bpl.n	800ceee <_vfiprintf_r+0x5d6>
 800cee6:	6833      	ldr	r3, [r6, #0]
 800cee8:	9a08      	ldr	r2, [sp, #32]
 800ceea:	801a      	strh	r2, [r3, #0]
 800ceec:	e7f1      	b.n	800ced2 <_vfiprintf_r+0x5ba>
 800ceee:	05a3      	lsls	r3, r4, #22
 800cef0:	d5f3      	bpl.n	800ceda <_vfiprintf_r+0x5c2>
 800cef2:	6833      	ldr	r3, [r6, #0]
 800cef4:	9a08      	ldr	r2, [sp, #32]
 800cef6:	701a      	strb	r2, [r3, #0]
 800cef8:	e7eb      	b.n	800ced2 <_vfiprintf_r+0x5ba>
 800cefa:	2310      	movs	r3, #16
 800cefc:	431c      	orrs	r4, r3
 800cefe:	2320      	movs	r3, #32
 800cf00:	0020      	movs	r0, r4
 800cf02:	4018      	ands	r0, r3
 800cf04:	421c      	tst	r4, r3
 800cf06:	d00d      	beq.n	800cf24 <_vfiprintf_r+0x60c>
 800cf08:	3b19      	subs	r3, #25
 800cf0a:	3607      	adds	r6, #7
 800cf0c:	439e      	bics	r6, r3
 800cf0e:	0031      	movs	r1, r6
 800cf10:	c90c      	ldmia	r1!, {r2, r3}
 800cf12:	9200      	str	r2, [sp, #0]
 800cf14:	9301      	str	r3, [sp, #4]
 800cf16:	9104      	str	r1, [sp, #16]
 800cf18:	4b3a      	ldr	r3, [pc, #232]	; (800d004 <_vfiprintf_r+0x6ec>)
 800cf1a:	401c      	ands	r4, r3
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	2100      	movs	r1, #0
 800cf20:	aa14      	add	r2, sp, #80	; 0x50
 800cf22:	e7a5      	b.n	800ce70 <_vfiprintf_r+0x558>
 800cf24:	0032      	movs	r2, r6
 800cf26:	ca08      	ldmia	r2!, {r3}
 800cf28:	0021      	movs	r1, r4
 800cf2a:	9204      	str	r2, [sp, #16]
 800cf2c:	2210      	movs	r2, #16
 800cf2e:	4011      	ands	r1, r2
 800cf30:	4214      	tst	r4, r2
 800cf32:	d002      	beq.n	800cf3a <_vfiprintf_r+0x622>
 800cf34:	9300      	str	r3, [sp, #0]
 800cf36:	9001      	str	r0, [sp, #4]
 800cf38:	e7ee      	b.n	800cf18 <_vfiprintf_r+0x600>
 800cf3a:	2240      	movs	r2, #64	; 0x40
 800cf3c:	0020      	movs	r0, r4
 800cf3e:	4010      	ands	r0, r2
 800cf40:	4214      	tst	r4, r2
 800cf42:	d003      	beq.n	800cf4c <_vfiprintf_r+0x634>
 800cf44:	b29b      	uxth	r3, r3
 800cf46:	9300      	str	r3, [sp, #0]
 800cf48:	9101      	str	r1, [sp, #4]
 800cf4a:	e7e5      	b.n	800cf18 <_vfiprintf_r+0x600>
 800cf4c:	2280      	movs	r2, #128	; 0x80
 800cf4e:	0021      	movs	r1, r4
 800cf50:	0092      	lsls	r2, r2, #2
 800cf52:	4011      	ands	r1, r2
 800cf54:	4214      	tst	r4, r2
 800cf56:	d0f6      	beq.n	800cf46 <_vfiprintf_r+0x62e>
 800cf58:	b2db      	uxtb	r3, r3
 800cf5a:	e7eb      	b.n	800cf34 <_vfiprintf_r+0x61c>
 800cf5c:	0033      	movs	r3, r6
 800cf5e:	2130      	movs	r1, #48	; 0x30
 800cf60:	cb04      	ldmia	r3!, {r2}
 800cf62:	9304      	str	r3, [sp, #16]
 800cf64:	2300      	movs	r3, #0
 800cf66:	9200      	str	r2, [sp, #0]
 800cf68:	aa15      	add	r2, sp, #84	; 0x54
 800cf6a:	7011      	strb	r1, [r2, #0]
 800cf6c:	3148      	adds	r1, #72	; 0x48
 800cf6e:	7051      	strb	r1, [r2, #1]
 800cf70:	4a25      	ldr	r2, [pc, #148]	; (800d008 <_vfiprintf_r+0x6f0>)
 800cf72:	9301      	str	r3, [sp, #4]
 800cf74:	3302      	adds	r3, #2
 800cf76:	431c      	orrs	r4, r3
 800cf78:	920c      	str	r2, [sp, #48]	; 0x30
 800cf7a:	e7d0      	b.n	800cf1e <_vfiprintf_r+0x606>
 800cf7c:	0033      	movs	r3, r6
 800cf7e:	2600      	movs	r6, #0
 800cf80:	cb20      	ldmia	r3!, {r5}
 800cf82:	9304      	str	r3, [sp, #16]
 800cf84:	ab14      	add	r3, sp, #80	; 0x50
 800cf86:	70de      	strb	r6, [r3, #3]
 800cf88:	9b05      	ldr	r3, [sp, #20]
 800cf8a:	3301      	adds	r3, #1
 800cf8c:	d00a      	beq.n	800cfa4 <_vfiprintf_r+0x68c>
 800cf8e:	0031      	movs	r1, r6
 800cf90:	0028      	movs	r0, r5
 800cf92:	9a05      	ldr	r2, [sp, #20]
 800cf94:	f7fc f87c 	bl	8009090 <memchr>
 800cf98:	900b      	str	r0, [sp, #44]	; 0x2c
 800cf9a:	42b0      	cmp	r0, r6
 800cf9c:	d100      	bne.n	800cfa0 <_vfiprintf_r+0x688>
 800cf9e:	e667      	b.n	800cc70 <_vfiprintf_r+0x358>
 800cfa0:	1b43      	subs	r3, r0, r5
 800cfa2:	e663      	b.n	800cc6c <_vfiprintf_r+0x354>
 800cfa4:	0028      	movs	r0, r5
 800cfa6:	f7f3 f8af 	bl	8000108 <strlen>
 800cfaa:	9005      	str	r0, [sp, #20]
 800cfac:	e65f      	b.n	800cc6e <_vfiprintf_r+0x356>
 800cfae:	2310      	movs	r3, #16
 800cfb0:	431c      	orrs	r4, r3
 800cfb2:	2320      	movs	r3, #32
 800cfb4:	0020      	movs	r0, r4
 800cfb6:	4018      	ands	r0, r3
 800cfb8:	421c      	tst	r4, r3
 800cfba:	d009      	beq.n	800cfd0 <_vfiprintf_r+0x6b8>
 800cfbc:	3b19      	subs	r3, #25
 800cfbe:	3607      	adds	r6, #7
 800cfc0:	439e      	bics	r6, r3
 800cfc2:	0031      	movs	r1, r6
 800cfc4:	c90c      	ldmia	r1!, {r2, r3}
 800cfc6:	9200      	str	r2, [sp, #0]
 800cfc8:	9301      	str	r3, [sp, #4]
 800cfca:	9104      	str	r1, [sp, #16]
 800cfcc:	2301      	movs	r3, #1
 800cfce:	e7a6      	b.n	800cf1e <_vfiprintf_r+0x606>
 800cfd0:	0033      	movs	r3, r6
 800cfd2:	cb04      	ldmia	r3!, {r2}
 800cfd4:	0021      	movs	r1, r4
 800cfd6:	9304      	str	r3, [sp, #16]
 800cfd8:	2310      	movs	r3, #16
 800cfda:	4019      	ands	r1, r3
 800cfdc:	421c      	tst	r4, r3
 800cfde:	d003      	beq.n	800cfe8 <_vfiprintf_r+0x6d0>
 800cfe0:	9200      	str	r2, [sp, #0]
 800cfe2:	9001      	str	r0, [sp, #4]
 800cfe4:	3b0f      	subs	r3, #15
 800cfe6:	e79a      	b.n	800cf1e <_vfiprintf_r+0x606>
 800cfe8:	2340      	movs	r3, #64	; 0x40
 800cfea:	0020      	movs	r0, r4
 800cfec:	4018      	ands	r0, r3
 800cfee:	421c      	tst	r4, r3
 800cff0:	d00c      	beq.n	800d00c <_vfiprintf_r+0x6f4>
 800cff2:	b293      	uxth	r3, r2
 800cff4:	9300      	str	r3, [sp, #0]
 800cff6:	9101      	str	r1, [sp, #4]
 800cff8:	e7e8      	b.n	800cfcc <_vfiprintf_r+0x6b4>
 800cffa:	46c0      	nop			; (mov r8, r8)
 800cffc:	0800ea02 	.word	0x0800ea02
 800d000:	0800ea12 	.word	0x0800ea12
 800d004:	fffffbff 	.word	0xfffffbff
 800d008:	0800e6a0 	.word	0x0800e6a0
 800d00c:	2380      	movs	r3, #128	; 0x80
 800d00e:	0021      	movs	r1, r4
 800d010:	009b      	lsls	r3, r3, #2
 800d012:	4019      	ands	r1, r3
 800d014:	421c      	tst	r4, r3
 800d016:	d003      	beq.n	800d020 <_vfiprintf_r+0x708>
 800d018:	b2d3      	uxtb	r3, r2
 800d01a:	9300      	str	r3, [sp, #0]
 800d01c:	9001      	str	r0, [sp, #4]
 800d01e:	e7d5      	b.n	800cfcc <_vfiprintf_r+0x6b4>
 800d020:	9200      	str	r2, [sp, #0]
 800d022:	e7e8      	b.n	800cff6 <_vfiprintf_r+0x6de>
 800d024:	4ab3      	ldr	r2, [pc, #716]	; (800d2f4 <_vfiprintf_r+0x9dc>)
 800d026:	e579      	b.n	800cb1c <_vfiprintf_r+0x204>
 800d028:	0031      	movs	r1, r6
 800d02a:	c904      	ldmia	r1!, {r2}
 800d02c:	0025      	movs	r5, r4
 800d02e:	9104      	str	r1, [sp, #16]
 800d030:	2110      	movs	r1, #16
 800d032:	400d      	ands	r5, r1
 800d034:	420c      	tst	r4, r1
 800d036:	d002      	beq.n	800d03e <_vfiprintf_r+0x726>
 800d038:	9200      	str	r2, [sp, #0]
 800d03a:	9001      	str	r0, [sp, #4]
 800d03c:	e57d      	b.n	800cb3a <_vfiprintf_r+0x222>
 800d03e:	2140      	movs	r1, #64	; 0x40
 800d040:	0020      	movs	r0, r4
 800d042:	4008      	ands	r0, r1
 800d044:	420c      	tst	r4, r1
 800d046:	d003      	beq.n	800d050 <_vfiprintf_r+0x738>
 800d048:	b292      	uxth	r2, r2
 800d04a:	9200      	str	r2, [sp, #0]
 800d04c:	9501      	str	r5, [sp, #4]
 800d04e:	e574      	b.n	800cb3a <_vfiprintf_r+0x222>
 800d050:	2180      	movs	r1, #128	; 0x80
 800d052:	0025      	movs	r5, r4
 800d054:	0089      	lsls	r1, r1, #2
 800d056:	400d      	ands	r5, r1
 800d058:	420c      	tst	r4, r1
 800d05a:	d0f6      	beq.n	800d04a <_vfiprintf_r+0x732>
 800d05c:	b2d2      	uxtb	r2, r2
 800d05e:	e7eb      	b.n	800d038 <_vfiprintf_r+0x720>
 800d060:	9b01      	ldr	r3, [sp, #4]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d109      	bne.n	800d07a <_vfiprintf_r+0x762>
 800d066:	9b00      	ldr	r3, [sp, #0]
 800d068:	2b09      	cmp	r3, #9
 800d06a:	d806      	bhi.n	800d07a <_vfiprintf_r+0x762>
 800d06c:	25b7      	movs	r5, #183	; 0xb7
 800d06e:	ab14      	add	r3, sp, #80	; 0x50
 800d070:	18ed      	adds	r5, r5, r3
 800d072:	9b00      	ldr	r3, [sp, #0]
 800d074:	3330      	adds	r3, #48	; 0x30
 800d076:	702b      	strb	r3, [r5, #0]
 800d078:	e134      	b.n	800d2e4 <_vfiprintf_r+0x9cc>
 800d07a:	2680      	movs	r6, #128	; 0x80
 800d07c:	2400      	movs	r4, #0
 800d07e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d080:	00f6      	lsls	r6, r6, #3
 800d082:	ad42      	add	r5, sp, #264	; 0x108
 800d084:	401e      	ands	r6, r3
 800d086:	220a      	movs	r2, #10
 800d088:	9800      	ldr	r0, [sp, #0]
 800d08a:	9901      	ldr	r1, [sp, #4]
 800d08c:	2300      	movs	r3, #0
 800d08e:	f7f3 fa0b 	bl	80004a8 <__aeabi_uldivmod>
 800d092:	3d01      	subs	r5, #1
 800d094:	3230      	adds	r2, #48	; 0x30
 800d096:	702a      	strb	r2, [r5, #0]
 800d098:	3401      	adds	r4, #1
 800d09a:	2e00      	cmp	r6, #0
 800d09c:	d01a      	beq.n	800d0d4 <_vfiprintf_r+0x7bc>
 800d09e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	42a3      	cmp	r3, r4
 800d0a4:	d116      	bne.n	800d0d4 <_vfiprintf_r+0x7bc>
 800d0a6:	2cff      	cmp	r4, #255	; 0xff
 800d0a8:	d014      	beq.n	800d0d4 <_vfiprintf_r+0x7bc>
 800d0aa:	9b01      	ldr	r3, [sp, #4]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d102      	bne.n	800d0b6 <_vfiprintf_r+0x79e>
 800d0b0:	9b00      	ldr	r3, [sp, #0]
 800d0b2:	2b09      	cmp	r3, #9
 800d0b4:	d90e      	bls.n	800d0d4 <_vfiprintf_r+0x7bc>
 800d0b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d0ba:	1aed      	subs	r5, r5, r3
 800d0bc:	001a      	movs	r2, r3
 800d0be:	0028      	movs	r0, r5
 800d0c0:	f7ff f8c6 	bl	800c250 <strncpy>
 800d0c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0c6:	2400      	movs	r4, #0
 800d0c8:	785b      	ldrb	r3, [r3, #1]
 800d0ca:	1e5a      	subs	r2, r3, #1
 800d0cc:	4193      	sbcs	r3, r2
 800d0ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d0d0:	18d3      	adds	r3, r2, r3
 800d0d2:	930d      	str	r3, [sp, #52]	; 0x34
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	9800      	ldr	r0, [sp, #0]
 800d0d8:	9901      	ldr	r1, [sp, #4]
 800d0da:	220a      	movs	r2, #10
 800d0dc:	f7f3 f9e4 	bl	80004a8 <__aeabi_uldivmod>
 800d0e0:	9b01      	ldr	r3, [sp, #4]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d103      	bne.n	800d0ee <_vfiprintf_r+0x7d6>
 800d0e6:	9b00      	ldr	r3, [sp, #0]
 800d0e8:	2b09      	cmp	r3, #9
 800d0ea:	d800      	bhi.n	800d0ee <_vfiprintf_r+0x7d6>
 800d0ec:	e0fa      	b.n	800d2e4 <_vfiprintf_r+0x9cc>
 800d0ee:	9000      	str	r0, [sp, #0]
 800d0f0:	9101      	str	r1, [sp, #4]
 800d0f2:	e7c8      	b.n	800d086 <_vfiprintf_r+0x76e>
 800d0f4:	200f      	movs	r0, #15
 800d0f6:	9b00      	ldr	r3, [sp, #0]
 800d0f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d0fa:	4003      	ands	r3, r0
 800d0fc:	5cd3      	ldrb	r3, [r2, r3]
 800d0fe:	3d01      	subs	r5, #1
 800d100:	702b      	strb	r3, [r5, #0]
 800d102:	9b01      	ldr	r3, [sp, #4]
 800d104:	0719      	lsls	r1, r3, #28
 800d106:	9b00      	ldr	r3, [sp, #0]
 800d108:	091a      	lsrs	r2, r3, #4
 800d10a:	9b01      	ldr	r3, [sp, #4]
 800d10c:	4311      	orrs	r1, r2
 800d10e:	091b      	lsrs	r3, r3, #4
 800d110:	9301      	str	r3, [sp, #4]
 800d112:	000b      	movs	r3, r1
 800d114:	9a01      	ldr	r2, [sp, #4]
 800d116:	9100      	str	r1, [sp, #0]
 800d118:	4313      	orrs	r3, r2
 800d11a:	d1ec      	bne.n	800d0f6 <_vfiprintf_r+0x7de>
 800d11c:	e0e2      	b.n	800d2e4 <_vfiprintf_r+0x9cc>
 800d11e:	ad42      	add	r5, sp, #264	; 0x108
 800d120:	2b00      	cmp	r3, #0
 800d122:	d000      	beq.n	800d126 <_vfiprintf_r+0x80e>
 800d124:	e0de      	b.n	800d2e4 <_vfiprintf_r+0x9cc>
 800d126:	07e3      	lsls	r3, r4, #31
 800d128:	d400      	bmi.n	800d12c <_vfiprintf_r+0x814>
 800d12a:	e0db      	b.n	800d2e4 <_vfiprintf_r+0x9cc>
 800d12c:	25b7      	movs	r5, #183	; 0xb7
 800d12e:	ab14      	add	r3, sp, #80	; 0x50
 800d130:	18ed      	adds	r5, r5, r3
 800d132:	2330      	movs	r3, #48	; 0x30
 800d134:	e79f      	b.n	800d076 <_vfiprintf_r+0x75e>
 800d136:	2b00      	cmp	r3, #0
 800d138:	d100      	bne.n	800d13c <_vfiprintf_r+0x824>
 800d13a:	e09c      	b.n	800d276 <_vfiprintf_r+0x95e>
 800d13c:	ad29      	add	r5, sp, #164	; 0xa4
 800d13e:	702b      	strb	r3, [r5, #0]
 800d140:	2300      	movs	r3, #0
 800d142:	aa14      	add	r2, sp, #80	; 0x50
 800d144:	70d3      	strb	r3, [r2, #3]
 800d146:	2201      	movs	r2, #1
 800d148:	9604      	str	r6, [sp, #16]
 800d14a:	9205      	str	r2, [sp, #20]
 800d14c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d14e:	e58f      	b.n	800cc70 <_vfiprintf_r+0x358>
 800d150:	2010      	movs	r0, #16
 800d152:	6050      	str	r0, [r2, #4]
 800d154:	4662      	mov	r2, ip
 800d156:	1812      	adds	r2, r2, r0
 800d158:	9218      	str	r2, [sp, #96]	; 0x60
 800d15a:	9317      	str	r3, [sp, #92]	; 0x5c
 800d15c:	2b07      	cmp	r3, #7
 800d15e:	dd07      	ble.n	800d170 <_vfiprintf_r+0x858>
 800d160:	0039      	movs	r1, r7
 800d162:	9806      	ldr	r0, [sp, #24]
 800d164:	aa16      	add	r2, sp, #88	; 0x58
 800d166:	f7ff fba3 	bl	800c8b0 <__sprint_r>
 800d16a:	2800      	cmp	r0, #0
 800d16c:	d162      	bne.n	800d234 <_vfiprintf_r+0x91c>
 800d16e:	a919      	add	r1, sp, #100	; 0x64
 800d170:	3e10      	subs	r6, #16
 800d172:	9103      	str	r1, [sp, #12]
 800d174:	e59e      	b.n	800ccb4 <_vfiprintf_r+0x39c>
 800d176:	0039      	movs	r1, r7
 800d178:	9806      	ldr	r0, [sp, #24]
 800d17a:	aa16      	add	r2, sp, #88	; 0x58
 800d17c:	f7ff fb98 	bl	800c8b0 <__sprint_r>
 800d180:	2800      	cmp	r0, #0
 800d182:	d157      	bne.n	800d234 <_vfiprintf_r+0x91c>
 800d184:	ab19      	add	r3, sp, #100	; 0x64
 800d186:	e5ca      	b.n	800cd1e <_vfiprintf_r+0x406>
 800d188:	0039      	movs	r1, r7
 800d18a:	9806      	ldr	r0, [sp, #24]
 800d18c:	aa16      	add	r2, sp, #88	; 0x58
 800d18e:	f7ff fb8f 	bl	800c8b0 <__sprint_r>
 800d192:	2800      	cmp	r0, #0
 800d194:	d14e      	bne.n	800d234 <_vfiprintf_r+0x91c>
 800d196:	ab19      	add	r3, sp, #100	; 0x64
 800d198:	e5d8      	b.n	800cd4c <_vfiprintf_r+0x434>
 800d19a:	2010      	movs	r0, #16
 800d19c:	6050      	str	r0, [r2, #4]
 800d19e:	4662      	mov	r2, ip
 800d1a0:	1812      	adds	r2, r2, r0
 800d1a2:	9218      	str	r2, [sp, #96]	; 0x60
 800d1a4:	9317      	str	r3, [sp, #92]	; 0x5c
 800d1a6:	2b07      	cmp	r3, #7
 800d1a8:	dd07      	ble.n	800d1ba <_vfiprintf_r+0x8a2>
 800d1aa:	0039      	movs	r1, r7
 800d1ac:	9806      	ldr	r0, [sp, #24]
 800d1ae:	aa16      	add	r2, sp, #88	; 0x58
 800d1b0:	f7ff fb7e 	bl	800c8b0 <__sprint_r>
 800d1b4:	2800      	cmp	r0, #0
 800d1b6:	d13d      	bne.n	800d234 <_vfiprintf_r+0x91c>
 800d1b8:	a919      	add	r1, sp, #100	; 0x64
 800d1ba:	3e10      	subs	r6, #16
 800d1bc:	9103      	str	r1, [sp, #12]
 800d1be:	e5ce      	b.n	800cd5e <_vfiprintf_r+0x446>
 800d1c0:	2010      	movs	r0, #16
 800d1c2:	6050      	str	r0, [r2, #4]
 800d1c4:	4662      	mov	r2, ip
 800d1c6:	1812      	adds	r2, r2, r0
 800d1c8:	9218      	str	r2, [sp, #96]	; 0x60
 800d1ca:	9317      	str	r3, [sp, #92]	; 0x5c
 800d1cc:	2b07      	cmp	r3, #7
 800d1ce:	dd07      	ble.n	800d1e0 <_vfiprintf_r+0x8c8>
 800d1d0:	0039      	movs	r1, r7
 800d1d2:	9806      	ldr	r0, [sp, #24]
 800d1d4:	aa16      	add	r2, sp, #88	; 0x58
 800d1d6:	f7ff fb6b 	bl	800c8b0 <__sprint_r>
 800d1da:	2800      	cmp	r0, #0
 800d1dc:	d12a      	bne.n	800d234 <_vfiprintf_r+0x91c>
 800d1de:	a919      	add	r1, sp, #100	; 0x64
 800d1e0:	3e10      	subs	r6, #16
 800d1e2:	9103      	str	r1, [sp, #12]
 800d1e4:	e5de      	b.n	800cda4 <_vfiprintf_r+0x48c>
 800d1e6:	0039      	movs	r1, r7
 800d1e8:	9806      	ldr	r0, [sp, #24]
 800d1ea:	aa16      	add	r2, sp, #88	; 0x58
 800d1ec:	f7ff fb60 	bl	800c8b0 <__sprint_r>
 800d1f0:	2800      	cmp	r0, #0
 800d1f2:	d11f      	bne.n	800d234 <_vfiprintf_r+0x91c>
 800d1f4:	ab19      	add	r3, sp, #100	; 0x64
 800d1f6:	e606      	b.n	800ce06 <_vfiprintf_r+0x4ee>
 800d1f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d1fc:	2510      	movs	r5, #16
 800d1fe:	1a54      	subs	r4, r2, r1
 800d200:	2c00      	cmp	r4, #0
 800d202:	dc00      	bgt.n	800d206 <_vfiprintf_r+0x8ee>
 800d204:	e602      	b.n	800ce0c <_vfiprintf_r+0x4f4>
 800d206:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d208:	483b      	ldr	r0, [pc, #236]	; (800d2f8 <_vfiprintf_r+0x9e0>)
 800d20a:	9203      	str	r2, [sp, #12]
 800d20c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d20e:	3201      	adds	r2, #1
 800d210:	6018      	str	r0, [r3, #0]
 800d212:	2c10      	cmp	r4, #16
 800d214:	dc1e      	bgt.n	800d254 <_vfiprintf_r+0x93c>
 800d216:	605c      	str	r4, [r3, #4]
 800d218:	1864      	adds	r4, r4, r1
 800d21a:	9418      	str	r4, [sp, #96]	; 0x60
 800d21c:	9217      	str	r2, [sp, #92]	; 0x5c
 800d21e:	2a07      	cmp	r2, #7
 800d220:	dc00      	bgt.n	800d224 <_vfiprintf_r+0x90c>
 800d222:	e5f3      	b.n	800ce0c <_vfiprintf_r+0x4f4>
 800d224:	0039      	movs	r1, r7
 800d226:	9806      	ldr	r0, [sp, #24]
 800d228:	aa16      	add	r2, sp, #88	; 0x58
 800d22a:	f7ff fb41 	bl	800c8b0 <__sprint_r>
 800d22e:	2800      	cmp	r0, #0
 800d230:	d100      	bne.n	800d234 <_vfiprintf_r+0x91c>
 800d232:	e5eb      	b.n	800ce0c <_vfiprintf_r+0x4f4>
 800d234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d236:	07db      	lsls	r3, r3, #31
 800d238:	d405      	bmi.n	800d246 <_vfiprintf_r+0x92e>
 800d23a:	89bb      	ldrh	r3, [r7, #12]
 800d23c:	059b      	lsls	r3, r3, #22
 800d23e:	d402      	bmi.n	800d246 <_vfiprintf_r+0x92e>
 800d240:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d242:	f7fe fa52 	bl	800b6ea <__retarget_lock_release_recursive>
 800d246:	89bb      	ldrh	r3, [r7, #12]
 800d248:	065b      	lsls	r3, r3, #25
 800d24a:	d401      	bmi.n	800d250 <_vfiprintf_r+0x938>
 800d24c:	f7ff fb9a 	bl	800c984 <_vfiprintf_r+0x6c>
 800d250:	f7ff fb95 	bl	800c97e <_vfiprintf_r+0x66>
 800d254:	3110      	adds	r1, #16
 800d256:	605d      	str	r5, [r3, #4]
 800d258:	9118      	str	r1, [sp, #96]	; 0x60
 800d25a:	9217      	str	r2, [sp, #92]	; 0x5c
 800d25c:	3308      	adds	r3, #8
 800d25e:	2a07      	cmp	r2, #7
 800d260:	dd07      	ble.n	800d272 <_vfiprintf_r+0x95a>
 800d262:	0039      	movs	r1, r7
 800d264:	9806      	ldr	r0, [sp, #24]
 800d266:	aa16      	add	r2, sp, #88	; 0x58
 800d268:	f7ff fb22 	bl	800c8b0 <__sprint_r>
 800d26c:	2800      	cmp	r0, #0
 800d26e:	d1e1      	bne.n	800d234 <_vfiprintf_r+0x91c>
 800d270:	ab19      	add	r3, sp, #100	; 0x64
 800d272:	3c10      	subs	r4, #16
 800d274:	e7c7      	b.n	800d206 <_vfiprintf_r+0x8ee>
 800d276:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d278:	9300      	str	r3, [sp, #0]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d102      	bne.n	800d284 <_vfiprintf_r+0x96c>
 800d27e:	2300      	movs	r3, #0
 800d280:	9317      	str	r3, [sp, #92]	; 0x5c
 800d282:	e7d7      	b.n	800d234 <_vfiprintf_r+0x91c>
 800d284:	0039      	movs	r1, r7
 800d286:	9806      	ldr	r0, [sp, #24]
 800d288:	aa16      	add	r2, sp, #88	; 0x58
 800d28a:	f7ff fb11 	bl	800c8b0 <__sprint_r>
 800d28e:	2800      	cmp	r0, #0
 800d290:	d0f5      	beq.n	800d27e <_vfiprintf_r+0x966>
 800d292:	e7cf      	b.n	800d234 <_vfiprintf_r+0x91c>
 800d294:	940a      	str	r4, [sp, #40]	; 0x28
 800d296:	2a00      	cmp	r2, #0
 800d298:	d100      	bne.n	800d29c <_vfiprintf_r+0x984>
 800d29a:	e5fc      	b.n	800ce96 <_vfiprintf_r+0x57e>
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	d100      	bne.n	800d2a2 <_vfiprintf_r+0x98a>
 800d2a0:	e6de      	b.n	800d060 <_vfiprintf_r+0x748>
 800d2a2:	ad42      	add	r5, sp, #264	; 0x108
 800d2a4:	2b02      	cmp	r3, #2
 800d2a6:	d100      	bne.n	800d2aa <_vfiprintf_r+0x992>
 800d2a8:	e724      	b.n	800d0f4 <_vfiprintf_r+0x7dc>
 800d2aa:	2607      	movs	r6, #7
 800d2ac:	9901      	ldr	r1, [sp, #4]
 800d2ae:	9b00      	ldr	r3, [sp, #0]
 800d2b0:	074c      	lsls	r4, r1, #29
 800d2b2:	9900      	ldr	r1, [sp, #0]
 800d2b4:	4033      	ands	r3, r6
 800d2b6:	08c8      	lsrs	r0, r1, #3
 800d2b8:	9901      	ldr	r1, [sp, #4]
 800d2ba:	4304      	orrs	r4, r0
 800d2bc:	08c9      	lsrs	r1, r1, #3
 800d2be:	9101      	str	r1, [sp, #4]
 800d2c0:	0021      	movs	r1, r4
 800d2c2:	9801      	ldr	r0, [sp, #4]
 800d2c4:	002a      	movs	r2, r5
 800d2c6:	3330      	adds	r3, #48	; 0x30
 800d2c8:	3d01      	subs	r5, #1
 800d2ca:	702b      	strb	r3, [r5, #0]
 800d2cc:	9400      	str	r4, [sp, #0]
 800d2ce:	4301      	orrs	r1, r0
 800d2d0:	d1ec      	bne.n	800d2ac <_vfiprintf_r+0x994>
 800d2d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d2d4:	07c9      	lsls	r1, r1, #31
 800d2d6:	d505      	bpl.n	800d2e4 <_vfiprintf_r+0x9cc>
 800d2d8:	2b30      	cmp	r3, #48	; 0x30
 800d2da:	d003      	beq.n	800d2e4 <_vfiprintf_r+0x9cc>
 800d2dc:	2330      	movs	r3, #48	; 0x30
 800d2de:	3d01      	subs	r5, #1
 800d2e0:	702b      	strb	r3, [r5, #0]
 800d2e2:	1e95      	subs	r5, r2, #2
 800d2e4:	9b05      	ldr	r3, [sp, #20]
 800d2e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d2e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800d2ea:	ab42      	add	r3, sp, #264	; 0x108
 800d2ec:	1b5b      	subs	r3, r3, r5
 800d2ee:	9305      	str	r3, [sp, #20]
 800d2f0:	e4be      	b.n	800cc70 <_vfiprintf_r+0x358>
 800d2f2:	46c0      	nop			; (mov r8, r8)
 800d2f4:	0800e6b1 	.word	0x0800e6b1
 800d2f8:	0800ea02 	.word	0x0800ea02

0800d2fc <__sbprintf>:
 800d2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2fe:	0015      	movs	r5, r2
 800d300:	2202      	movs	r2, #2
 800d302:	4c1e      	ldr	r4, [pc, #120]	; (800d37c <__sbprintf+0x80>)
 800d304:	001f      	movs	r7, r3
 800d306:	898b      	ldrh	r3, [r1, #12]
 800d308:	44a5      	add	sp, r4
 800d30a:	4393      	bics	r3, r2
 800d30c:	466a      	mov	r2, sp
 800d30e:	8193      	strh	r3, [r2, #12]
 800d310:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800d312:	0006      	movs	r6, r0
 800d314:	9319      	str	r3, [sp, #100]	; 0x64
 800d316:	89cb      	ldrh	r3, [r1, #14]
 800d318:	a816      	add	r0, sp, #88	; 0x58
 800d31a:	81d3      	strh	r3, [r2, #14]
 800d31c:	69cb      	ldr	r3, [r1, #28]
 800d31e:	000c      	movs	r4, r1
 800d320:	9307      	str	r3, [sp, #28]
 800d322:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800d324:	9309      	str	r3, [sp, #36]	; 0x24
 800d326:	ab1a      	add	r3, sp, #104	; 0x68
 800d328:	9300      	str	r3, [sp, #0]
 800d32a:	9304      	str	r3, [sp, #16]
 800d32c:	2380      	movs	r3, #128	; 0x80
 800d32e:	00db      	lsls	r3, r3, #3
 800d330:	9302      	str	r3, [sp, #8]
 800d332:	9305      	str	r3, [sp, #20]
 800d334:	2300      	movs	r3, #0
 800d336:	9306      	str	r3, [sp, #24]
 800d338:	f7fe f9d4 	bl	800b6e4 <__retarget_lock_init_recursive>
 800d33c:	002a      	movs	r2, r5
 800d33e:	003b      	movs	r3, r7
 800d340:	4669      	mov	r1, sp
 800d342:	0030      	movs	r0, r6
 800d344:	f7ff fae8 	bl	800c918 <_vfiprintf_r>
 800d348:	1e05      	subs	r5, r0, #0
 800d34a:	db07      	blt.n	800d35c <__sbprintf+0x60>
 800d34c:	4669      	mov	r1, sp
 800d34e:	0030      	movs	r0, r6
 800d350:	f000 f92a 	bl	800d5a8 <_fflush_r>
 800d354:	2800      	cmp	r0, #0
 800d356:	d001      	beq.n	800d35c <__sbprintf+0x60>
 800d358:	2501      	movs	r5, #1
 800d35a:	426d      	negs	r5, r5
 800d35c:	466b      	mov	r3, sp
 800d35e:	899a      	ldrh	r2, [r3, #12]
 800d360:	2340      	movs	r3, #64	; 0x40
 800d362:	421a      	tst	r2, r3
 800d364:	d002      	beq.n	800d36c <__sbprintf+0x70>
 800d366:	89a2      	ldrh	r2, [r4, #12]
 800d368:	4313      	orrs	r3, r2
 800d36a:	81a3      	strh	r3, [r4, #12]
 800d36c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d36e:	f7fe f9ba 	bl	800b6e6 <__retarget_lock_close_recursive>
 800d372:	0028      	movs	r0, r5
 800d374:	4b02      	ldr	r3, [pc, #8]	; (800d380 <__sbprintf+0x84>)
 800d376:	449d      	add	sp, r3
 800d378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d37a:	46c0      	nop			; (mov r8, r8)
 800d37c:	fffffb94 	.word	0xfffffb94
 800d380:	0000046c 	.word	0x0000046c

0800d384 <__ascii_wctomb>:
 800d384:	0003      	movs	r3, r0
 800d386:	1e08      	subs	r0, r1, #0
 800d388:	d005      	beq.n	800d396 <__ascii_wctomb+0x12>
 800d38a:	2aff      	cmp	r2, #255	; 0xff
 800d38c:	d904      	bls.n	800d398 <__ascii_wctomb+0x14>
 800d38e:	228a      	movs	r2, #138	; 0x8a
 800d390:	2001      	movs	r0, #1
 800d392:	601a      	str	r2, [r3, #0]
 800d394:	4240      	negs	r0, r0
 800d396:	4770      	bx	lr
 800d398:	2001      	movs	r0, #1
 800d39a:	700a      	strb	r2, [r1, #0]
 800d39c:	e7fb      	b.n	800d396 <__ascii_wctomb+0x12>
	...

0800d3a0 <__swsetup_r>:
 800d3a0:	4b30      	ldr	r3, [pc, #192]	; (800d464 <__swsetup_r+0xc4>)
 800d3a2:	b570      	push	{r4, r5, r6, lr}
 800d3a4:	0005      	movs	r5, r0
 800d3a6:	6818      	ldr	r0, [r3, #0]
 800d3a8:	000c      	movs	r4, r1
 800d3aa:	2800      	cmp	r0, #0
 800d3ac:	d004      	beq.n	800d3b8 <__swsetup_r+0x18>
 800d3ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d101      	bne.n	800d3b8 <__swsetup_r+0x18>
 800d3b4:	f000 f96e 	bl	800d694 <__sinit>
 800d3b8:	230c      	movs	r3, #12
 800d3ba:	5ee2      	ldrsh	r2, [r4, r3]
 800d3bc:	b293      	uxth	r3, r2
 800d3be:	0711      	lsls	r1, r2, #28
 800d3c0:	d423      	bmi.n	800d40a <__swsetup_r+0x6a>
 800d3c2:	06d9      	lsls	r1, r3, #27
 800d3c4:	d407      	bmi.n	800d3d6 <__swsetup_r+0x36>
 800d3c6:	2309      	movs	r3, #9
 800d3c8:	2001      	movs	r0, #1
 800d3ca:	602b      	str	r3, [r5, #0]
 800d3cc:	3337      	adds	r3, #55	; 0x37
 800d3ce:	4313      	orrs	r3, r2
 800d3d0:	81a3      	strh	r3, [r4, #12]
 800d3d2:	4240      	negs	r0, r0
 800d3d4:	bd70      	pop	{r4, r5, r6, pc}
 800d3d6:	075b      	lsls	r3, r3, #29
 800d3d8:	d513      	bpl.n	800d402 <__swsetup_r+0x62>
 800d3da:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d3dc:	2900      	cmp	r1, #0
 800d3de:	d008      	beq.n	800d3f2 <__swsetup_r+0x52>
 800d3e0:	0023      	movs	r3, r4
 800d3e2:	3340      	adds	r3, #64	; 0x40
 800d3e4:	4299      	cmp	r1, r3
 800d3e6:	d002      	beq.n	800d3ee <__swsetup_r+0x4e>
 800d3e8:	0028      	movs	r0, r5
 800d3ea:	f7fe f8c5 	bl	800b578 <_free_r>
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	6323      	str	r3, [r4, #48]	; 0x30
 800d3f2:	2224      	movs	r2, #36	; 0x24
 800d3f4:	89a3      	ldrh	r3, [r4, #12]
 800d3f6:	4393      	bics	r3, r2
 800d3f8:	81a3      	strh	r3, [r4, #12]
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	6063      	str	r3, [r4, #4]
 800d3fe:	6923      	ldr	r3, [r4, #16]
 800d400:	6023      	str	r3, [r4, #0]
 800d402:	2308      	movs	r3, #8
 800d404:	89a2      	ldrh	r2, [r4, #12]
 800d406:	4313      	orrs	r3, r2
 800d408:	81a3      	strh	r3, [r4, #12]
 800d40a:	6923      	ldr	r3, [r4, #16]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d10b      	bne.n	800d428 <__swsetup_r+0x88>
 800d410:	21a0      	movs	r1, #160	; 0xa0
 800d412:	2280      	movs	r2, #128	; 0x80
 800d414:	89a3      	ldrh	r3, [r4, #12]
 800d416:	0089      	lsls	r1, r1, #2
 800d418:	0092      	lsls	r2, r2, #2
 800d41a:	400b      	ands	r3, r1
 800d41c:	4293      	cmp	r3, r2
 800d41e:	d003      	beq.n	800d428 <__swsetup_r+0x88>
 800d420:	0021      	movs	r1, r4
 800d422:	0028      	movs	r0, r5
 800d424:	f000 fb84 	bl	800db30 <__smakebuf_r>
 800d428:	220c      	movs	r2, #12
 800d42a:	5ea3      	ldrsh	r3, [r4, r2]
 800d42c:	2001      	movs	r0, #1
 800d42e:	001a      	movs	r2, r3
 800d430:	b299      	uxth	r1, r3
 800d432:	4002      	ands	r2, r0
 800d434:	4203      	tst	r3, r0
 800d436:	d00f      	beq.n	800d458 <__swsetup_r+0xb8>
 800d438:	2200      	movs	r2, #0
 800d43a:	60a2      	str	r2, [r4, #8]
 800d43c:	6962      	ldr	r2, [r4, #20]
 800d43e:	4252      	negs	r2, r2
 800d440:	61a2      	str	r2, [r4, #24]
 800d442:	2000      	movs	r0, #0
 800d444:	6922      	ldr	r2, [r4, #16]
 800d446:	4282      	cmp	r2, r0
 800d448:	d1c4      	bne.n	800d3d4 <__swsetup_r+0x34>
 800d44a:	060a      	lsls	r2, r1, #24
 800d44c:	d5c2      	bpl.n	800d3d4 <__swsetup_r+0x34>
 800d44e:	2240      	movs	r2, #64	; 0x40
 800d450:	4313      	orrs	r3, r2
 800d452:	81a3      	strh	r3, [r4, #12]
 800d454:	3801      	subs	r0, #1
 800d456:	e7bd      	b.n	800d3d4 <__swsetup_r+0x34>
 800d458:	0788      	lsls	r0, r1, #30
 800d45a:	d400      	bmi.n	800d45e <__swsetup_r+0xbe>
 800d45c:	6962      	ldr	r2, [r4, #20]
 800d45e:	60a2      	str	r2, [r4, #8]
 800d460:	e7ef      	b.n	800d442 <__swsetup_r+0xa2>
 800d462:	46c0      	nop			; (mov r8, r8)
 800d464:	20000010 	.word	0x20000010

0800d468 <abort>:
 800d468:	2006      	movs	r0, #6
 800d46a:	b510      	push	{r4, lr}
 800d46c:	f000 fbd0 	bl	800dc10 <raise>
 800d470:	2001      	movs	r0, #1
 800d472:	f7fb fd39 	bl	8008ee8 <_exit>
	...

0800d478 <__sflush_r>:
 800d478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d47a:	230c      	movs	r3, #12
 800d47c:	5eca      	ldrsh	r2, [r1, r3]
 800d47e:	000c      	movs	r4, r1
 800d480:	0005      	movs	r5, r0
 800d482:	b291      	uxth	r1, r2
 800d484:	0713      	lsls	r3, r2, #28
 800d486:	d467      	bmi.n	800d558 <__sflush_r+0xe0>
 800d488:	2380      	movs	r3, #128	; 0x80
 800d48a:	011b      	lsls	r3, r3, #4
 800d48c:	4313      	orrs	r3, r2
 800d48e:	6862      	ldr	r2, [r4, #4]
 800d490:	81a3      	strh	r3, [r4, #12]
 800d492:	2a00      	cmp	r2, #0
 800d494:	dc04      	bgt.n	800d4a0 <__sflush_r+0x28>
 800d496:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d498:	2a00      	cmp	r2, #0
 800d49a:	dc01      	bgt.n	800d4a0 <__sflush_r+0x28>
 800d49c:	2000      	movs	r0, #0
 800d49e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d4a0:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800d4a2:	2f00      	cmp	r7, #0
 800d4a4:	d0fa      	beq.n	800d49c <__sflush_r+0x24>
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	2180      	movs	r1, #128	; 0x80
 800d4aa:	682e      	ldr	r6, [r5, #0]
 800d4ac:	602a      	str	r2, [r5, #0]
 800d4ae:	001a      	movs	r2, r3
 800d4b0:	0149      	lsls	r1, r1, #5
 800d4b2:	400a      	ands	r2, r1
 800d4b4:	420b      	tst	r3, r1
 800d4b6:	d038      	beq.n	800d52a <__sflush_r+0xb2>
 800d4b8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800d4ba:	89a3      	ldrh	r3, [r4, #12]
 800d4bc:	075b      	lsls	r3, r3, #29
 800d4be:	d506      	bpl.n	800d4ce <__sflush_r+0x56>
 800d4c0:	6863      	ldr	r3, [r4, #4]
 800d4c2:	1ac0      	subs	r0, r0, r3
 800d4c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d001      	beq.n	800d4ce <__sflush_r+0x56>
 800d4ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d4cc:	1ac0      	subs	r0, r0, r3
 800d4ce:	0002      	movs	r2, r0
 800d4d0:	69e1      	ldr	r1, [r4, #28]
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	0028      	movs	r0, r5
 800d4d6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800d4d8:	47b8      	blx	r7
 800d4da:	89a1      	ldrh	r1, [r4, #12]
 800d4dc:	1c43      	adds	r3, r0, #1
 800d4de:	d106      	bne.n	800d4ee <__sflush_r+0x76>
 800d4e0:	682b      	ldr	r3, [r5, #0]
 800d4e2:	2b1d      	cmp	r3, #29
 800d4e4:	d835      	bhi.n	800d552 <__sflush_r+0xda>
 800d4e6:	4a2e      	ldr	r2, [pc, #184]	; (800d5a0 <__sflush_r+0x128>)
 800d4e8:	40da      	lsrs	r2, r3
 800d4ea:	07d3      	lsls	r3, r2, #31
 800d4ec:	d531      	bpl.n	800d552 <__sflush_r+0xda>
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	4b2c      	ldr	r3, [pc, #176]	; (800d5a4 <__sflush_r+0x12c>)
 800d4f2:	6062      	str	r2, [r4, #4]
 800d4f4:	400b      	ands	r3, r1
 800d4f6:	6922      	ldr	r2, [r4, #16]
 800d4f8:	b21b      	sxth	r3, r3
 800d4fa:	81a3      	strh	r3, [r4, #12]
 800d4fc:	6022      	str	r2, [r4, #0]
 800d4fe:	04db      	lsls	r3, r3, #19
 800d500:	d505      	bpl.n	800d50e <__sflush_r+0x96>
 800d502:	1c43      	adds	r3, r0, #1
 800d504:	d102      	bne.n	800d50c <__sflush_r+0x94>
 800d506:	682b      	ldr	r3, [r5, #0]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d100      	bne.n	800d50e <__sflush_r+0x96>
 800d50c:	6520      	str	r0, [r4, #80]	; 0x50
 800d50e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d510:	602e      	str	r6, [r5, #0]
 800d512:	2900      	cmp	r1, #0
 800d514:	d0c2      	beq.n	800d49c <__sflush_r+0x24>
 800d516:	0023      	movs	r3, r4
 800d518:	3340      	adds	r3, #64	; 0x40
 800d51a:	4299      	cmp	r1, r3
 800d51c:	d002      	beq.n	800d524 <__sflush_r+0xac>
 800d51e:	0028      	movs	r0, r5
 800d520:	f7fe f82a 	bl	800b578 <_free_r>
 800d524:	2000      	movs	r0, #0
 800d526:	6320      	str	r0, [r4, #48]	; 0x30
 800d528:	e7b9      	b.n	800d49e <__sflush_r+0x26>
 800d52a:	2301      	movs	r3, #1
 800d52c:	0028      	movs	r0, r5
 800d52e:	69e1      	ldr	r1, [r4, #28]
 800d530:	47b8      	blx	r7
 800d532:	1c43      	adds	r3, r0, #1
 800d534:	d1c1      	bne.n	800d4ba <__sflush_r+0x42>
 800d536:	682b      	ldr	r3, [r5, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d0be      	beq.n	800d4ba <__sflush_r+0x42>
 800d53c:	2b1d      	cmp	r3, #29
 800d53e:	d001      	beq.n	800d544 <__sflush_r+0xcc>
 800d540:	2b16      	cmp	r3, #22
 800d542:	d101      	bne.n	800d548 <__sflush_r+0xd0>
 800d544:	602e      	str	r6, [r5, #0]
 800d546:	e7a9      	b.n	800d49c <__sflush_r+0x24>
 800d548:	2340      	movs	r3, #64	; 0x40
 800d54a:	89a2      	ldrh	r2, [r4, #12]
 800d54c:	4313      	orrs	r3, r2
 800d54e:	81a3      	strh	r3, [r4, #12]
 800d550:	e7a5      	b.n	800d49e <__sflush_r+0x26>
 800d552:	2340      	movs	r3, #64	; 0x40
 800d554:	430b      	orrs	r3, r1
 800d556:	e7fa      	b.n	800d54e <__sflush_r+0xd6>
 800d558:	6927      	ldr	r7, [r4, #16]
 800d55a:	2f00      	cmp	r7, #0
 800d55c:	d09e      	beq.n	800d49c <__sflush_r+0x24>
 800d55e:	6823      	ldr	r3, [r4, #0]
 800d560:	6027      	str	r7, [r4, #0]
 800d562:	1bdb      	subs	r3, r3, r7
 800d564:	9301      	str	r3, [sp, #4]
 800d566:	2300      	movs	r3, #0
 800d568:	078a      	lsls	r2, r1, #30
 800d56a:	d100      	bne.n	800d56e <__sflush_r+0xf6>
 800d56c:	6963      	ldr	r3, [r4, #20]
 800d56e:	60a3      	str	r3, [r4, #8]
 800d570:	9b01      	ldr	r3, [sp, #4]
 800d572:	2b00      	cmp	r3, #0
 800d574:	dc00      	bgt.n	800d578 <__sflush_r+0x100>
 800d576:	e791      	b.n	800d49c <__sflush_r+0x24>
 800d578:	003a      	movs	r2, r7
 800d57a:	0028      	movs	r0, r5
 800d57c:	9b01      	ldr	r3, [sp, #4]
 800d57e:	69e1      	ldr	r1, [r4, #28]
 800d580:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d582:	47b0      	blx	r6
 800d584:	2800      	cmp	r0, #0
 800d586:	dc06      	bgt.n	800d596 <__sflush_r+0x11e>
 800d588:	2340      	movs	r3, #64	; 0x40
 800d58a:	2001      	movs	r0, #1
 800d58c:	89a2      	ldrh	r2, [r4, #12]
 800d58e:	4240      	negs	r0, r0
 800d590:	4313      	orrs	r3, r2
 800d592:	81a3      	strh	r3, [r4, #12]
 800d594:	e783      	b.n	800d49e <__sflush_r+0x26>
 800d596:	9b01      	ldr	r3, [sp, #4]
 800d598:	183f      	adds	r7, r7, r0
 800d59a:	1a1b      	subs	r3, r3, r0
 800d59c:	9301      	str	r3, [sp, #4]
 800d59e:	e7e7      	b.n	800d570 <__sflush_r+0xf8>
 800d5a0:	20400001 	.word	0x20400001
 800d5a4:	fffff7ff 	.word	0xfffff7ff

0800d5a8 <_fflush_r>:
 800d5a8:	b570      	push	{r4, r5, r6, lr}
 800d5aa:	0005      	movs	r5, r0
 800d5ac:	000c      	movs	r4, r1
 800d5ae:	2800      	cmp	r0, #0
 800d5b0:	d004      	beq.n	800d5bc <_fflush_r+0x14>
 800d5b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d101      	bne.n	800d5bc <_fflush_r+0x14>
 800d5b8:	f000 f86c 	bl	800d694 <__sinit>
 800d5bc:	220c      	movs	r2, #12
 800d5be:	5ea3      	ldrsh	r3, [r4, r2]
 800d5c0:	1e1e      	subs	r6, r3, #0
 800d5c2:	d015      	beq.n	800d5f0 <_fflush_r+0x48>
 800d5c4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d5c6:	07d2      	lsls	r2, r2, #31
 800d5c8:	d404      	bmi.n	800d5d4 <_fflush_r+0x2c>
 800d5ca:	059b      	lsls	r3, r3, #22
 800d5cc:	d402      	bmi.n	800d5d4 <_fflush_r+0x2c>
 800d5ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5d0:	f7fe f88a 	bl	800b6e8 <__retarget_lock_acquire_recursive>
 800d5d4:	0021      	movs	r1, r4
 800d5d6:	0028      	movs	r0, r5
 800d5d8:	f7ff ff4e 	bl	800d478 <__sflush_r>
 800d5dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d5de:	0006      	movs	r6, r0
 800d5e0:	07db      	lsls	r3, r3, #31
 800d5e2:	d405      	bmi.n	800d5f0 <_fflush_r+0x48>
 800d5e4:	89a3      	ldrh	r3, [r4, #12]
 800d5e6:	059b      	lsls	r3, r3, #22
 800d5e8:	d402      	bmi.n	800d5f0 <_fflush_r+0x48>
 800d5ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5ec:	f7fe f87d 	bl	800b6ea <__retarget_lock_release_recursive>
 800d5f0:	0030      	movs	r0, r6
 800d5f2:	bd70      	pop	{r4, r5, r6, pc}

0800d5f4 <std>:
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	b510      	push	{r4, lr}
 800d5f8:	0004      	movs	r4, r0
 800d5fa:	6003      	str	r3, [r0, #0]
 800d5fc:	6043      	str	r3, [r0, #4]
 800d5fe:	6083      	str	r3, [r0, #8]
 800d600:	8181      	strh	r1, [r0, #12]
 800d602:	6643      	str	r3, [r0, #100]	; 0x64
 800d604:	0019      	movs	r1, r3
 800d606:	81c2      	strh	r2, [r0, #14]
 800d608:	6103      	str	r3, [r0, #16]
 800d60a:	2208      	movs	r2, #8
 800d60c:	6143      	str	r3, [r0, #20]
 800d60e:	6183      	str	r3, [r0, #24]
 800d610:	305c      	adds	r0, #92	; 0x5c
 800d612:	f7fb fd5f 	bl	80090d4 <memset>
 800d616:	0020      	movs	r0, r4
 800d618:	4b06      	ldr	r3, [pc, #24]	; (800d634 <std+0x40>)
 800d61a:	61e4      	str	r4, [r4, #28]
 800d61c:	6223      	str	r3, [r4, #32]
 800d61e:	4b06      	ldr	r3, [pc, #24]	; (800d638 <std+0x44>)
 800d620:	3058      	adds	r0, #88	; 0x58
 800d622:	6263      	str	r3, [r4, #36]	; 0x24
 800d624:	4b05      	ldr	r3, [pc, #20]	; (800d63c <std+0x48>)
 800d626:	62a3      	str	r3, [r4, #40]	; 0x28
 800d628:	4b05      	ldr	r3, [pc, #20]	; (800d640 <std+0x4c>)
 800d62a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d62c:	f7fe f85a 	bl	800b6e4 <__retarget_lock_init_recursive>
 800d630:	bd10      	pop	{r4, pc}
 800d632:	46c0      	nop			; (mov r8, r8)
 800d634:	0800dc51 	.word	0x0800dc51
 800d638:	0800dc79 	.word	0x0800dc79
 800d63c:	0800dcb1 	.word	0x0800dcb1
 800d640:	0800dcdd 	.word	0x0800dcdd

0800d644 <_cleanup_r>:
 800d644:	b510      	push	{r4, lr}
 800d646:	4902      	ldr	r1, [pc, #8]	; (800d650 <_cleanup_r+0xc>)
 800d648:	f000 fa1e 	bl	800da88 <_fwalk_reent>
 800d64c:	bd10      	pop	{r4, pc}
 800d64e:	46c0      	nop			; (mov r8, r8)
 800d650:	0800de09 	.word	0x0800de09

0800d654 <__sfp_lock_acquire>:
 800d654:	b510      	push	{r4, lr}
 800d656:	4802      	ldr	r0, [pc, #8]	; (800d660 <__sfp_lock_acquire+0xc>)
 800d658:	f7fe f846 	bl	800b6e8 <__retarget_lock_acquire_recursive>
 800d65c:	bd10      	pop	{r4, pc}
 800d65e:	46c0      	nop			; (mov r8, r8)
 800d660:	20003b46 	.word	0x20003b46

0800d664 <__sfp_lock_release>:
 800d664:	b510      	push	{r4, lr}
 800d666:	4802      	ldr	r0, [pc, #8]	; (800d670 <__sfp_lock_release+0xc>)
 800d668:	f7fe f83f 	bl	800b6ea <__retarget_lock_release_recursive>
 800d66c:	bd10      	pop	{r4, pc}
 800d66e:	46c0      	nop			; (mov r8, r8)
 800d670:	20003b46 	.word	0x20003b46

0800d674 <__sinit_lock_acquire>:
 800d674:	b510      	push	{r4, lr}
 800d676:	4802      	ldr	r0, [pc, #8]	; (800d680 <__sinit_lock_acquire+0xc>)
 800d678:	f7fe f836 	bl	800b6e8 <__retarget_lock_acquire_recursive>
 800d67c:	bd10      	pop	{r4, pc}
 800d67e:	46c0      	nop			; (mov r8, r8)
 800d680:	20003b47 	.word	0x20003b47

0800d684 <__sinit_lock_release>:
 800d684:	b510      	push	{r4, lr}
 800d686:	4802      	ldr	r0, [pc, #8]	; (800d690 <__sinit_lock_release+0xc>)
 800d688:	f7fe f82f 	bl	800b6ea <__retarget_lock_release_recursive>
 800d68c:	bd10      	pop	{r4, pc}
 800d68e:	46c0      	nop			; (mov r8, r8)
 800d690:	20003b47 	.word	0x20003b47

0800d694 <__sinit>:
 800d694:	b510      	push	{r4, lr}
 800d696:	0004      	movs	r4, r0
 800d698:	f7ff ffec 	bl	800d674 <__sinit_lock_acquire>
 800d69c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d69e:	2a00      	cmp	r2, #0
 800d6a0:	d002      	beq.n	800d6a8 <__sinit+0x14>
 800d6a2:	f7ff ffef 	bl	800d684 <__sinit_lock_release>
 800d6a6:	bd10      	pop	{r4, pc}
 800d6a8:	4b0e      	ldr	r3, [pc, #56]	; (800d6e4 <__sinit+0x50>)
 800d6aa:	2103      	movs	r1, #3
 800d6ac:	63e3      	str	r3, [r4, #60]	; 0x3c
 800d6ae:	23b8      	movs	r3, #184	; 0xb8
 800d6b0:	009b      	lsls	r3, r3, #2
 800d6b2:	50e2      	str	r2, [r4, r3]
 800d6b4:	3304      	adds	r3, #4
 800d6b6:	50e1      	str	r1, [r4, r3]
 800d6b8:	3308      	adds	r3, #8
 800d6ba:	18e1      	adds	r1, r4, r3
 800d6bc:	3b04      	subs	r3, #4
 800d6be:	50e1      	str	r1, [r4, r3]
 800d6c0:	6860      	ldr	r0, [r4, #4]
 800d6c2:	2104      	movs	r1, #4
 800d6c4:	f7ff ff96 	bl	800d5f4 <std>
 800d6c8:	2201      	movs	r2, #1
 800d6ca:	2109      	movs	r1, #9
 800d6cc:	68a0      	ldr	r0, [r4, #8]
 800d6ce:	f7ff ff91 	bl	800d5f4 <std>
 800d6d2:	2202      	movs	r2, #2
 800d6d4:	2112      	movs	r1, #18
 800d6d6:	68e0      	ldr	r0, [r4, #12]
 800d6d8:	f7ff ff8c 	bl	800d5f4 <std>
 800d6dc:	2301      	movs	r3, #1
 800d6de:	63a3      	str	r3, [r4, #56]	; 0x38
 800d6e0:	e7df      	b.n	800d6a2 <__sinit+0xe>
 800d6e2:	46c0      	nop			; (mov r8, r8)
 800d6e4:	0800d645 	.word	0x0800d645

0800d6e8 <__fputwc>:
 800d6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6ea:	b085      	sub	sp, #20
 800d6ec:	000e      	movs	r6, r1
 800d6ee:	0015      	movs	r5, r2
 800d6f0:	9001      	str	r0, [sp, #4]
 800d6f2:	f7fe ff0d 	bl	800c510 <__locale_mb_cur_max>
 800d6f6:	0004      	movs	r4, r0
 800d6f8:	2801      	cmp	r0, #1
 800d6fa:	d119      	bne.n	800d730 <__fputwc+0x48>
 800d6fc:	1e73      	subs	r3, r6, #1
 800d6fe:	2bfe      	cmp	r3, #254	; 0xfe
 800d700:	d816      	bhi.n	800d730 <__fputwc+0x48>
 800d702:	ab02      	add	r3, sp, #8
 800d704:	711e      	strb	r6, [r3, #4]
 800d706:	2700      	movs	r7, #0
 800d708:	42a7      	cmp	r7, r4
 800d70a:	d020      	beq.n	800d74e <__fputwc+0x66>
 800d70c:	ab03      	add	r3, sp, #12
 800d70e:	5dd9      	ldrb	r1, [r3, r7]
 800d710:	68ab      	ldr	r3, [r5, #8]
 800d712:	3b01      	subs	r3, #1
 800d714:	60ab      	str	r3, [r5, #8]
 800d716:	2b00      	cmp	r3, #0
 800d718:	da04      	bge.n	800d724 <__fputwc+0x3c>
 800d71a:	69aa      	ldr	r2, [r5, #24]
 800d71c:	4293      	cmp	r3, r2
 800d71e:	db19      	blt.n	800d754 <__fputwc+0x6c>
 800d720:	290a      	cmp	r1, #10
 800d722:	d017      	beq.n	800d754 <__fputwc+0x6c>
 800d724:	682b      	ldr	r3, [r5, #0]
 800d726:	1c5a      	adds	r2, r3, #1
 800d728:	602a      	str	r2, [r5, #0]
 800d72a:	7019      	strb	r1, [r3, #0]
 800d72c:	3701      	adds	r7, #1
 800d72e:	e7eb      	b.n	800d708 <__fputwc+0x20>
 800d730:	002b      	movs	r3, r5
 800d732:	0032      	movs	r2, r6
 800d734:	9801      	ldr	r0, [sp, #4]
 800d736:	335c      	adds	r3, #92	; 0x5c
 800d738:	a903      	add	r1, sp, #12
 800d73a:	f000 fb27 	bl	800dd8c <_wcrtomb_r>
 800d73e:	0004      	movs	r4, r0
 800d740:	1c43      	adds	r3, r0, #1
 800d742:	d1e0      	bne.n	800d706 <__fputwc+0x1e>
 800d744:	2340      	movs	r3, #64	; 0x40
 800d746:	0006      	movs	r6, r0
 800d748:	89aa      	ldrh	r2, [r5, #12]
 800d74a:	4313      	orrs	r3, r2
 800d74c:	81ab      	strh	r3, [r5, #12]
 800d74e:	0030      	movs	r0, r6
 800d750:	b005      	add	sp, #20
 800d752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d754:	002a      	movs	r2, r5
 800d756:	9801      	ldr	r0, [sp, #4]
 800d758:	f000 fac6 	bl	800dce8 <__swbuf_r>
 800d75c:	1c43      	adds	r3, r0, #1
 800d75e:	d1e5      	bne.n	800d72c <__fputwc+0x44>
 800d760:	0006      	movs	r6, r0
 800d762:	e7f4      	b.n	800d74e <__fputwc+0x66>

0800d764 <_fputwc_r>:
 800d764:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800d766:	b570      	push	{r4, r5, r6, lr}
 800d768:	0005      	movs	r5, r0
 800d76a:	000e      	movs	r6, r1
 800d76c:	0014      	movs	r4, r2
 800d76e:	07db      	lsls	r3, r3, #31
 800d770:	d405      	bmi.n	800d77e <_fputwc_r+0x1a>
 800d772:	8993      	ldrh	r3, [r2, #12]
 800d774:	059b      	lsls	r3, r3, #22
 800d776:	d402      	bmi.n	800d77e <_fputwc_r+0x1a>
 800d778:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800d77a:	f7fd ffb5 	bl	800b6e8 <__retarget_lock_acquire_recursive>
 800d77e:	230c      	movs	r3, #12
 800d780:	5ee2      	ldrsh	r2, [r4, r3]
 800d782:	2380      	movs	r3, #128	; 0x80
 800d784:	019b      	lsls	r3, r3, #6
 800d786:	421a      	tst	r2, r3
 800d788:	d104      	bne.n	800d794 <_fputwc_r+0x30>
 800d78a:	431a      	orrs	r2, r3
 800d78c:	81a2      	strh	r2, [r4, #12]
 800d78e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d790:	4313      	orrs	r3, r2
 800d792:	6663      	str	r3, [r4, #100]	; 0x64
 800d794:	0028      	movs	r0, r5
 800d796:	0022      	movs	r2, r4
 800d798:	0031      	movs	r1, r6
 800d79a:	f7ff ffa5 	bl	800d6e8 <__fputwc>
 800d79e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d7a0:	0005      	movs	r5, r0
 800d7a2:	07db      	lsls	r3, r3, #31
 800d7a4:	d405      	bmi.n	800d7b2 <_fputwc_r+0x4e>
 800d7a6:	89a3      	ldrh	r3, [r4, #12]
 800d7a8:	059b      	lsls	r3, r3, #22
 800d7aa:	d402      	bmi.n	800d7b2 <_fputwc_r+0x4e>
 800d7ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7ae:	f7fd ff9c 	bl	800b6ea <__retarget_lock_release_recursive>
 800d7b2:	0028      	movs	r0, r5
 800d7b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d7b8 <__sfvwrite_r>:
 800d7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7ba:	6893      	ldr	r3, [r2, #8]
 800d7bc:	b087      	sub	sp, #28
 800d7be:	000c      	movs	r4, r1
 800d7c0:	0017      	movs	r7, r2
 800d7c2:	9003      	str	r0, [sp, #12]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d102      	bne.n	800d7ce <__sfvwrite_r+0x16>
 800d7c8:	2000      	movs	r0, #0
 800d7ca:	b007      	add	sp, #28
 800d7cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7ce:	898b      	ldrh	r3, [r1, #12]
 800d7d0:	071b      	lsls	r3, r3, #28
 800d7d2:	d559      	bpl.n	800d888 <__sfvwrite_r+0xd0>
 800d7d4:	690b      	ldr	r3, [r1, #16]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d056      	beq.n	800d888 <__sfvwrite_r+0xd0>
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	2202      	movs	r2, #2
 800d7de:	9302      	str	r3, [sp, #8]
 800d7e0:	89a3      	ldrh	r3, [r4, #12]
 800d7e2:	0018      	movs	r0, r3
 800d7e4:	4010      	ands	r0, r2
 800d7e6:	4213      	tst	r3, r2
 800d7e8:	d175      	bne.n	800d8d6 <__sfvwrite_r+0x11e>
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	2101      	movs	r1, #1
 800d7ee:	401a      	ands	r2, r3
 800d7f0:	420b      	tst	r3, r1
 800d7f2:	d100      	bne.n	800d7f6 <__sfvwrite_r+0x3e>
 800d7f4:	e0ad      	b.n	800d952 <__sfvwrite_r+0x19a>
 800d7f6:	0006      	movs	r6, r0
 800d7f8:	9001      	str	r0, [sp, #4]
 800d7fa:	9004      	str	r0, [sp, #16]
 800d7fc:	9b04      	ldr	r3, [sp, #16]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d100      	bne.n	800d804 <__sfvwrite_r+0x4c>
 800d802:	e116      	b.n	800da32 <__sfvwrite_r+0x27a>
 800d804:	2800      	cmp	r0, #0
 800d806:	d10c      	bne.n	800d822 <__sfvwrite_r+0x6a>
 800d808:	001a      	movs	r2, r3
 800d80a:	210a      	movs	r1, #10
 800d80c:	0030      	movs	r0, r6
 800d80e:	f7fb fc3f 	bl	8009090 <memchr>
 800d812:	9b04      	ldr	r3, [sp, #16]
 800d814:	3301      	adds	r3, #1
 800d816:	9301      	str	r3, [sp, #4]
 800d818:	2800      	cmp	r0, #0
 800d81a:	d002      	beq.n	800d822 <__sfvwrite_r+0x6a>
 800d81c:	3001      	adds	r0, #1
 800d81e:	1b83      	subs	r3, r0, r6
 800d820:	9301      	str	r3, [sp, #4]
 800d822:	9b01      	ldr	r3, [sp, #4]
 800d824:	9a04      	ldr	r2, [sp, #16]
 800d826:	9305      	str	r3, [sp, #20]
 800d828:	4293      	cmp	r3, r2
 800d82a:	d900      	bls.n	800d82e <__sfvwrite_r+0x76>
 800d82c:	9205      	str	r2, [sp, #20]
 800d82e:	6820      	ldr	r0, [r4, #0]
 800d830:	6922      	ldr	r2, [r4, #16]
 800d832:	6963      	ldr	r3, [r4, #20]
 800d834:	4290      	cmp	r0, r2
 800d836:	d800      	bhi.n	800d83a <__sfvwrite_r+0x82>
 800d838:	e104      	b.n	800da44 <__sfvwrite_r+0x28c>
 800d83a:	68a2      	ldr	r2, [r4, #8]
 800d83c:	189d      	adds	r5, r3, r2
 800d83e:	9a05      	ldr	r2, [sp, #20]
 800d840:	42aa      	cmp	r2, r5
 800d842:	dc00      	bgt.n	800d846 <__sfvwrite_r+0x8e>
 800d844:	e0fe      	b.n	800da44 <__sfvwrite_r+0x28c>
 800d846:	0031      	movs	r1, r6
 800d848:	002a      	movs	r2, r5
 800d84a:	f7fe fe7b 	bl	800c544 <memmove>
 800d84e:	6823      	ldr	r3, [r4, #0]
 800d850:	0021      	movs	r1, r4
 800d852:	195b      	adds	r3, r3, r5
 800d854:	9803      	ldr	r0, [sp, #12]
 800d856:	6023      	str	r3, [r4, #0]
 800d858:	f7ff fea6 	bl	800d5a8 <_fflush_r>
 800d85c:	2800      	cmp	r0, #0
 800d85e:	d173      	bne.n	800d948 <__sfvwrite_r+0x190>
 800d860:	9b01      	ldr	r3, [sp, #4]
 800d862:	2001      	movs	r0, #1
 800d864:	1b5b      	subs	r3, r3, r5
 800d866:	9301      	str	r3, [sp, #4]
 800d868:	d105      	bne.n	800d876 <__sfvwrite_r+0xbe>
 800d86a:	0021      	movs	r1, r4
 800d86c:	9803      	ldr	r0, [sp, #12]
 800d86e:	f7ff fe9b 	bl	800d5a8 <_fflush_r>
 800d872:	2800      	cmp	r0, #0
 800d874:	d168      	bne.n	800d948 <__sfvwrite_r+0x190>
 800d876:	9b04      	ldr	r3, [sp, #16]
 800d878:	1976      	adds	r6, r6, r5
 800d87a:	1b5b      	subs	r3, r3, r5
 800d87c:	9304      	str	r3, [sp, #16]
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	1b5d      	subs	r5, r3, r5
 800d882:	60bd      	str	r5, [r7, #8]
 800d884:	d1ba      	bne.n	800d7fc <__sfvwrite_r+0x44>
 800d886:	e79f      	b.n	800d7c8 <__sfvwrite_r+0x10>
 800d888:	0021      	movs	r1, r4
 800d88a:	9803      	ldr	r0, [sp, #12]
 800d88c:	f7ff fd88 	bl	800d3a0 <__swsetup_r>
 800d890:	2800      	cmp	r0, #0
 800d892:	d0a2      	beq.n	800d7da <__sfvwrite_r+0x22>
 800d894:	2001      	movs	r0, #1
 800d896:	4240      	negs	r0, r0
 800d898:	e797      	b.n	800d7ca <__sfvwrite_r+0x12>
 800d89a:	9b02      	ldr	r3, [sp, #8]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	9301      	str	r3, [sp, #4]
 800d8a0:	9b02      	ldr	r3, [sp, #8]
 800d8a2:	685d      	ldr	r5, [r3, #4]
 800d8a4:	3308      	adds	r3, #8
 800d8a6:	9302      	str	r3, [sp, #8]
 800d8a8:	2d00      	cmp	r5, #0
 800d8aa:	d0f6      	beq.n	800d89a <__sfvwrite_r+0xe2>
 800d8ac:	4a72      	ldr	r2, [pc, #456]	; (800da78 <__sfvwrite_r+0x2c0>)
 800d8ae:	002b      	movs	r3, r5
 800d8b0:	4295      	cmp	r5, r2
 800d8b2:	d900      	bls.n	800d8b6 <__sfvwrite_r+0xfe>
 800d8b4:	0013      	movs	r3, r2
 800d8b6:	9a01      	ldr	r2, [sp, #4]
 800d8b8:	69e1      	ldr	r1, [r4, #28]
 800d8ba:	9803      	ldr	r0, [sp, #12]
 800d8bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d8be:	47b0      	blx	r6
 800d8c0:	2800      	cmp	r0, #0
 800d8c2:	dd41      	ble.n	800d948 <__sfvwrite_r+0x190>
 800d8c4:	9b01      	ldr	r3, [sp, #4]
 800d8c6:	1a2d      	subs	r5, r5, r0
 800d8c8:	181b      	adds	r3, r3, r0
 800d8ca:	9301      	str	r3, [sp, #4]
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	1a18      	subs	r0, r3, r0
 800d8d0:	60b8      	str	r0, [r7, #8]
 800d8d2:	d1e9      	bne.n	800d8a8 <__sfvwrite_r+0xf0>
 800d8d4:	e778      	b.n	800d7c8 <__sfvwrite_r+0x10>
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	001d      	movs	r5, r3
 800d8da:	9301      	str	r3, [sp, #4]
 800d8dc:	e7e4      	b.n	800d8a8 <__sfvwrite_r+0xf0>
 800d8de:	9b02      	ldr	r3, [sp, #8]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	9304      	str	r3, [sp, #16]
 800d8e4:	9b02      	ldr	r3, [sp, #8]
 800d8e6:	685b      	ldr	r3, [r3, #4]
 800d8e8:	9301      	str	r3, [sp, #4]
 800d8ea:	9b02      	ldr	r3, [sp, #8]
 800d8ec:	3308      	adds	r3, #8
 800d8ee:	9302      	str	r3, [sp, #8]
 800d8f0:	9b01      	ldr	r3, [sp, #4]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d0f3      	beq.n	800d8de <__sfvwrite_r+0x126>
 800d8f6:	2380      	movs	r3, #128	; 0x80
 800d8f8:	89a2      	ldrh	r2, [r4, #12]
 800d8fa:	009b      	lsls	r3, r3, #2
 800d8fc:	6820      	ldr	r0, [r4, #0]
 800d8fe:	68a5      	ldr	r5, [r4, #8]
 800d900:	421a      	tst	r2, r3
 800d902:	d064      	beq.n	800d9ce <__sfvwrite_r+0x216>
 800d904:	9b01      	ldr	r3, [sp, #4]
 800d906:	429d      	cmp	r5, r3
 800d908:	d838      	bhi.n	800d97c <__sfvwrite_r+0x1c4>
 800d90a:	2390      	movs	r3, #144	; 0x90
 800d90c:	00db      	lsls	r3, r3, #3
 800d90e:	421a      	tst	r2, r3
 800d910:	d034      	beq.n	800d97c <__sfvwrite_r+0x1c4>
 800d912:	6921      	ldr	r1, [r4, #16]
 800d914:	1a43      	subs	r3, r0, r1
 800d916:	2003      	movs	r0, #3
 800d918:	9305      	str	r3, [sp, #20]
 800d91a:	6963      	ldr	r3, [r4, #20]
 800d91c:	4358      	muls	r0, r3
 800d91e:	9b05      	ldr	r3, [sp, #20]
 800d920:	0fc6      	lsrs	r6, r0, #31
 800d922:	1836      	adds	r6, r6, r0
 800d924:	9801      	ldr	r0, [sp, #4]
 800d926:	3301      	adds	r3, #1
 800d928:	181b      	adds	r3, r3, r0
 800d92a:	1076      	asrs	r6, r6, #1
 800d92c:	42b3      	cmp	r3, r6
 800d92e:	d900      	bls.n	800d932 <__sfvwrite_r+0x17a>
 800d930:	001e      	movs	r6, r3
 800d932:	0553      	lsls	r3, r2, #21
 800d934:	d53c      	bpl.n	800d9b0 <__sfvwrite_r+0x1f8>
 800d936:	0031      	movs	r1, r6
 800d938:	9803      	ldr	r0, [sp, #12]
 800d93a:	f7fd fed7 	bl	800b6ec <_malloc_r>
 800d93e:	1e05      	subs	r5, r0, #0
 800d940:	d10a      	bne.n	800d958 <__sfvwrite_r+0x1a0>
 800d942:	230c      	movs	r3, #12
 800d944:	9a03      	ldr	r2, [sp, #12]
 800d946:	6013      	str	r3, [r2, #0]
 800d948:	2340      	movs	r3, #64	; 0x40
 800d94a:	89a2      	ldrh	r2, [r4, #12]
 800d94c:	4313      	orrs	r3, r2
 800d94e:	81a3      	strh	r3, [r4, #12]
 800d950:	e7a0      	b.n	800d894 <__sfvwrite_r+0xdc>
 800d952:	9204      	str	r2, [sp, #16]
 800d954:	9201      	str	r2, [sp, #4]
 800d956:	e7cb      	b.n	800d8f0 <__sfvwrite_r+0x138>
 800d958:	9a05      	ldr	r2, [sp, #20]
 800d95a:	6921      	ldr	r1, [r4, #16]
 800d95c:	f7fb fbb1 	bl	80090c2 <memcpy>
 800d960:	89a3      	ldrh	r3, [r4, #12]
 800d962:	4a46      	ldr	r2, [pc, #280]	; (800da7c <__sfvwrite_r+0x2c4>)
 800d964:	401a      	ands	r2, r3
 800d966:	2380      	movs	r3, #128	; 0x80
 800d968:	4313      	orrs	r3, r2
 800d96a:	81a3      	strh	r3, [r4, #12]
 800d96c:	9b05      	ldr	r3, [sp, #20]
 800d96e:	6125      	str	r5, [r4, #16]
 800d970:	18ed      	adds	r5, r5, r3
 800d972:	6025      	str	r5, [r4, #0]
 800d974:	6166      	str	r6, [r4, #20]
 800d976:	9d01      	ldr	r5, [sp, #4]
 800d978:	1af6      	subs	r6, r6, r3
 800d97a:	60a6      	str	r6, [r4, #8]
 800d97c:	9e01      	ldr	r6, [sp, #4]
 800d97e:	42b5      	cmp	r5, r6
 800d980:	d900      	bls.n	800d984 <__sfvwrite_r+0x1cc>
 800d982:	0035      	movs	r5, r6
 800d984:	002a      	movs	r2, r5
 800d986:	9904      	ldr	r1, [sp, #16]
 800d988:	6820      	ldr	r0, [r4, #0]
 800d98a:	f7fe fddb 	bl	800c544 <memmove>
 800d98e:	68a3      	ldr	r3, [r4, #8]
 800d990:	1b5b      	subs	r3, r3, r5
 800d992:	60a3      	str	r3, [r4, #8]
 800d994:	6823      	ldr	r3, [r4, #0]
 800d996:	195d      	adds	r5, r3, r5
 800d998:	6025      	str	r5, [r4, #0]
 800d99a:	9b04      	ldr	r3, [sp, #16]
 800d99c:	199b      	adds	r3, r3, r6
 800d99e:	9304      	str	r3, [sp, #16]
 800d9a0:	9b01      	ldr	r3, [sp, #4]
 800d9a2:	1b9b      	subs	r3, r3, r6
 800d9a4:	9301      	str	r3, [sp, #4]
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	1b9e      	subs	r6, r3, r6
 800d9aa:	60be      	str	r6, [r7, #8]
 800d9ac:	d1a0      	bne.n	800d8f0 <__sfvwrite_r+0x138>
 800d9ae:	e70b      	b.n	800d7c8 <__sfvwrite_r+0x10>
 800d9b0:	0032      	movs	r2, r6
 800d9b2:	9803      	ldr	r0, [sp, #12]
 800d9b4:	f7fe fdda 	bl	800c56c <_realloc_r>
 800d9b8:	1e05      	subs	r5, r0, #0
 800d9ba:	d1d7      	bne.n	800d96c <__sfvwrite_r+0x1b4>
 800d9bc:	6921      	ldr	r1, [r4, #16]
 800d9be:	9803      	ldr	r0, [sp, #12]
 800d9c0:	f7fd fdda 	bl	800b578 <_free_r>
 800d9c4:	2280      	movs	r2, #128	; 0x80
 800d9c6:	89a3      	ldrh	r3, [r4, #12]
 800d9c8:	4393      	bics	r3, r2
 800d9ca:	81a3      	strh	r3, [r4, #12]
 800d9cc:	e7b9      	b.n	800d942 <__sfvwrite_r+0x18a>
 800d9ce:	6923      	ldr	r3, [r4, #16]
 800d9d0:	4283      	cmp	r3, r0
 800d9d2:	d303      	bcc.n	800d9dc <__sfvwrite_r+0x224>
 800d9d4:	6966      	ldr	r6, [r4, #20]
 800d9d6:	9b01      	ldr	r3, [sp, #4]
 800d9d8:	429e      	cmp	r6, r3
 800d9da:	d917      	bls.n	800da0c <__sfvwrite_r+0x254>
 800d9dc:	9b01      	ldr	r3, [sp, #4]
 800d9de:	429d      	cmp	r5, r3
 800d9e0:	d900      	bls.n	800d9e4 <__sfvwrite_r+0x22c>
 800d9e2:	001d      	movs	r5, r3
 800d9e4:	002a      	movs	r2, r5
 800d9e6:	9904      	ldr	r1, [sp, #16]
 800d9e8:	f7fe fdac 	bl	800c544 <memmove>
 800d9ec:	68a3      	ldr	r3, [r4, #8]
 800d9ee:	6822      	ldr	r2, [r4, #0]
 800d9f0:	1b5b      	subs	r3, r3, r5
 800d9f2:	1952      	adds	r2, r2, r5
 800d9f4:	002e      	movs	r6, r5
 800d9f6:	60a3      	str	r3, [r4, #8]
 800d9f8:	6022      	str	r2, [r4, #0]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d1cd      	bne.n	800d99a <__sfvwrite_r+0x1e2>
 800d9fe:	0021      	movs	r1, r4
 800da00:	9803      	ldr	r0, [sp, #12]
 800da02:	f7ff fdd1 	bl	800d5a8 <_fflush_r>
 800da06:	2800      	cmp	r0, #0
 800da08:	d0c7      	beq.n	800d99a <__sfvwrite_r+0x1e2>
 800da0a:	e79d      	b.n	800d948 <__sfvwrite_r+0x190>
 800da0c:	9a01      	ldr	r2, [sp, #4]
 800da0e:	4b1c      	ldr	r3, [pc, #112]	; (800da80 <__sfvwrite_r+0x2c8>)
 800da10:	0010      	movs	r0, r2
 800da12:	429a      	cmp	r2, r3
 800da14:	d900      	bls.n	800da18 <__sfvwrite_r+0x260>
 800da16:	481b      	ldr	r0, [pc, #108]	; (800da84 <__sfvwrite_r+0x2cc>)
 800da18:	0031      	movs	r1, r6
 800da1a:	f7f2 fc1b 	bl	8000254 <__divsi3>
 800da1e:	0033      	movs	r3, r6
 800da20:	9a04      	ldr	r2, [sp, #16]
 800da22:	4343      	muls	r3, r0
 800da24:	69e1      	ldr	r1, [r4, #28]
 800da26:	9803      	ldr	r0, [sp, #12]
 800da28:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800da2a:	47a8      	blx	r5
 800da2c:	1e06      	subs	r6, r0, #0
 800da2e:	dcb4      	bgt.n	800d99a <__sfvwrite_r+0x1e2>
 800da30:	e78a      	b.n	800d948 <__sfvwrite_r+0x190>
 800da32:	9b02      	ldr	r3, [sp, #8]
 800da34:	2000      	movs	r0, #0
 800da36:	681e      	ldr	r6, [r3, #0]
 800da38:	685b      	ldr	r3, [r3, #4]
 800da3a:	9304      	str	r3, [sp, #16]
 800da3c:	9b02      	ldr	r3, [sp, #8]
 800da3e:	3308      	adds	r3, #8
 800da40:	9302      	str	r3, [sp, #8]
 800da42:	e6db      	b.n	800d7fc <__sfvwrite_r+0x44>
 800da44:	9a05      	ldr	r2, [sp, #20]
 800da46:	4293      	cmp	r3, r2
 800da48:	dc08      	bgt.n	800da5c <__sfvwrite_r+0x2a4>
 800da4a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800da4c:	0032      	movs	r2, r6
 800da4e:	69e1      	ldr	r1, [r4, #28]
 800da50:	9803      	ldr	r0, [sp, #12]
 800da52:	47a8      	blx	r5
 800da54:	1e05      	subs	r5, r0, #0
 800da56:	dd00      	ble.n	800da5a <__sfvwrite_r+0x2a2>
 800da58:	e702      	b.n	800d860 <__sfvwrite_r+0xa8>
 800da5a:	e775      	b.n	800d948 <__sfvwrite_r+0x190>
 800da5c:	9a05      	ldr	r2, [sp, #20]
 800da5e:	0031      	movs	r1, r6
 800da60:	f7fe fd70 	bl	800c544 <memmove>
 800da64:	9a05      	ldr	r2, [sp, #20]
 800da66:	68a3      	ldr	r3, [r4, #8]
 800da68:	0015      	movs	r5, r2
 800da6a:	1a9b      	subs	r3, r3, r2
 800da6c:	60a3      	str	r3, [r4, #8]
 800da6e:	6823      	ldr	r3, [r4, #0]
 800da70:	189b      	adds	r3, r3, r2
 800da72:	6023      	str	r3, [r4, #0]
 800da74:	e6f4      	b.n	800d860 <__sfvwrite_r+0xa8>
 800da76:	46c0      	nop			; (mov r8, r8)
 800da78:	7ffffc00 	.word	0x7ffffc00
 800da7c:	fffffb7f 	.word	0xfffffb7f
 800da80:	7ffffffe 	.word	0x7ffffffe
 800da84:	7fffffff 	.word	0x7fffffff

0800da88 <_fwalk_reent>:
 800da88:	23b8      	movs	r3, #184	; 0xb8
 800da8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da8c:	0006      	movs	r6, r0
 800da8e:	2700      	movs	r7, #0
 800da90:	009b      	lsls	r3, r3, #2
 800da92:	9101      	str	r1, [sp, #4]
 800da94:	18c4      	adds	r4, r0, r3
 800da96:	6863      	ldr	r3, [r4, #4]
 800da98:	68a5      	ldr	r5, [r4, #8]
 800da9a:	9300      	str	r3, [sp, #0]
 800da9c:	9b00      	ldr	r3, [sp, #0]
 800da9e:	3b01      	subs	r3, #1
 800daa0:	9300      	str	r3, [sp, #0]
 800daa2:	d504      	bpl.n	800daae <_fwalk_reent+0x26>
 800daa4:	6824      	ldr	r4, [r4, #0]
 800daa6:	2c00      	cmp	r4, #0
 800daa8:	d1f5      	bne.n	800da96 <_fwalk_reent+0xe>
 800daaa:	0038      	movs	r0, r7
 800daac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800daae:	89ab      	ldrh	r3, [r5, #12]
 800dab0:	2b01      	cmp	r3, #1
 800dab2:	d908      	bls.n	800dac6 <_fwalk_reent+0x3e>
 800dab4:	220e      	movs	r2, #14
 800dab6:	5eab      	ldrsh	r3, [r5, r2]
 800dab8:	3301      	adds	r3, #1
 800daba:	d004      	beq.n	800dac6 <_fwalk_reent+0x3e>
 800dabc:	0029      	movs	r1, r5
 800dabe:	0030      	movs	r0, r6
 800dac0:	9b01      	ldr	r3, [sp, #4]
 800dac2:	4798      	blx	r3
 800dac4:	4307      	orrs	r7, r0
 800dac6:	3568      	adds	r5, #104	; 0x68
 800dac8:	e7e8      	b.n	800da9c <_fwalk_reent+0x14>
	...

0800dacc <__swhatbuf_r>:
 800dacc:	b570      	push	{r4, r5, r6, lr}
 800dace:	000e      	movs	r6, r1
 800dad0:	001d      	movs	r5, r3
 800dad2:	230e      	movs	r3, #14
 800dad4:	5ec9      	ldrsh	r1, [r1, r3]
 800dad6:	0014      	movs	r4, r2
 800dad8:	b096      	sub	sp, #88	; 0x58
 800dada:	2900      	cmp	r1, #0
 800dadc:	da0c      	bge.n	800daf8 <__swhatbuf_r+0x2c>
 800dade:	230c      	movs	r3, #12
 800dae0:	5ef1      	ldrsh	r1, [r6, r3]
 800dae2:	2280      	movs	r2, #128	; 0x80
 800dae4:	2300      	movs	r3, #0
 800dae6:	0008      	movs	r0, r1
 800dae8:	602b      	str	r3, [r5, #0]
 800daea:	4010      	ands	r0, r2
 800daec:	4211      	tst	r1, r2
 800daee:	d117      	bne.n	800db20 <__swhatbuf_r+0x54>
 800daf0:	2380      	movs	r3, #128	; 0x80
 800daf2:	00db      	lsls	r3, r3, #3
 800daf4:	6023      	str	r3, [r4, #0]
 800daf6:	e016      	b.n	800db26 <__swhatbuf_r+0x5a>
 800daf8:	466a      	mov	r2, sp
 800dafa:	f000 f9e5 	bl	800dec8 <_fstat_r>
 800dafe:	2800      	cmp	r0, #0
 800db00:	dbed      	blt.n	800dade <__swhatbuf_r+0x12>
 800db02:	23f0      	movs	r3, #240	; 0xf0
 800db04:	9901      	ldr	r1, [sp, #4]
 800db06:	021b      	lsls	r3, r3, #8
 800db08:	4019      	ands	r1, r3
 800db0a:	4b08      	ldr	r3, [pc, #32]	; (800db2c <__swhatbuf_r+0x60>)
 800db0c:	2080      	movs	r0, #128	; 0x80
 800db0e:	18c9      	adds	r1, r1, r3
 800db10:	424b      	negs	r3, r1
 800db12:	4159      	adcs	r1, r3
 800db14:	2380      	movs	r3, #128	; 0x80
 800db16:	00db      	lsls	r3, r3, #3
 800db18:	6029      	str	r1, [r5, #0]
 800db1a:	0100      	lsls	r0, r0, #4
 800db1c:	6023      	str	r3, [r4, #0]
 800db1e:	e002      	b.n	800db26 <__swhatbuf_r+0x5a>
 800db20:	2240      	movs	r2, #64	; 0x40
 800db22:	0018      	movs	r0, r3
 800db24:	6022      	str	r2, [r4, #0]
 800db26:	b016      	add	sp, #88	; 0x58
 800db28:	bd70      	pop	{r4, r5, r6, pc}
 800db2a:	46c0      	nop			; (mov r8, r8)
 800db2c:	ffffe000 	.word	0xffffe000

0800db30 <__smakebuf_r>:
 800db30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db32:	2602      	movs	r6, #2
 800db34:	898b      	ldrh	r3, [r1, #12]
 800db36:	0005      	movs	r5, r0
 800db38:	000c      	movs	r4, r1
 800db3a:	4233      	tst	r3, r6
 800db3c:	d006      	beq.n	800db4c <__smakebuf_r+0x1c>
 800db3e:	0023      	movs	r3, r4
 800db40:	3343      	adds	r3, #67	; 0x43
 800db42:	6023      	str	r3, [r4, #0]
 800db44:	6123      	str	r3, [r4, #16]
 800db46:	2301      	movs	r3, #1
 800db48:	6163      	str	r3, [r4, #20]
 800db4a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800db4c:	466a      	mov	r2, sp
 800db4e:	ab01      	add	r3, sp, #4
 800db50:	f7ff ffbc 	bl	800dacc <__swhatbuf_r>
 800db54:	9900      	ldr	r1, [sp, #0]
 800db56:	0007      	movs	r7, r0
 800db58:	0028      	movs	r0, r5
 800db5a:	f7fd fdc7 	bl	800b6ec <_malloc_r>
 800db5e:	2800      	cmp	r0, #0
 800db60:	d108      	bne.n	800db74 <__smakebuf_r+0x44>
 800db62:	220c      	movs	r2, #12
 800db64:	5ea3      	ldrsh	r3, [r4, r2]
 800db66:	059a      	lsls	r2, r3, #22
 800db68:	d4ef      	bmi.n	800db4a <__smakebuf_r+0x1a>
 800db6a:	2203      	movs	r2, #3
 800db6c:	4393      	bics	r3, r2
 800db6e:	431e      	orrs	r6, r3
 800db70:	81a6      	strh	r6, [r4, #12]
 800db72:	e7e4      	b.n	800db3e <__smakebuf_r+0xe>
 800db74:	4b0f      	ldr	r3, [pc, #60]	; (800dbb4 <__smakebuf_r+0x84>)
 800db76:	63eb      	str	r3, [r5, #60]	; 0x3c
 800db78:	2380      	movs	r3, #128	; 0x80
 800db7a:	89a2      	ldrh	r2, [r4, #12]
 800db7c:	6020      	str	r0, [r4, #0]
 800db7e:	4313      	orrs	r3, r2
 800db80:	81a3      	strh	r3, [r4, #12]
 800db82:	9b00      	ldr	r3, [sp, #0]
 800db84:	6120      	str	r0, [r4, #16]
 800db86:	6163      	str	r3, [r4, #20]
 800db88:	9b01      	ldr	r3, [sp, #4]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d00d      	beq.n	800dbaa <__smakebuf_r+0x7a>
 800db8e:	0028      	movs	r0, r5
 800db90:	230e      	movs	r3, #14
 800db92:	5ee1      	ldrsh	r1, [r4, r3]
 800db94:	f000 f9aa 	bl	800deec <_isatty_r>
 800db98:	2800      	cmp	r0, #0
 800db9a:	d006      	beq.n	800dbaa <__smakebuf_r+0x7a>
 800db9c:	2203      	movs	r2, #3
 800db9e:	89a3      	ldrh	r3, [r4, #12]
 800dba0:	4393      	bics	r3, r2
 800dba2:	001a      	movs	r2, r3
 800dba4:	2301      	movs	r3, #1
 800dba6:	4313      	orrs	r3, r2
 800dba8:	81a3      	strh	r3, [r4, #12]
 800dbaa:	89a0      	ldrh	r0, [r4, #12]
 800dbac:	4307      	orrs	r7, r0
 800dbae:	81a7      	strh	r7, [r4, #12]
 800dbb0:	e7cb      	b.n	800db4a <__smakebuf_r+0x1a>
 800dbb2:	46c0      	nop			; (mov r8, r8)
 800dbb4:	0800d645 	.word	0x0800d645

0800dbb8 <_raise_r>:
 800dbb8:	b570      	push	{r4, r5, r6, lr}
 800dbba:	0004      	movs	r4, r0
 800dbbc:	000d      	movs	r5, r1
 800dbbe:	291f      	cmp	r1, #31
 800dbc0:	d904      	bls.n	800dbcc <_raise_r+0x14>
 800dbc2:	2316      	movs	r3, #22
 800dbc4:	6003      	str	r3, [r0, #0]
 800dbc6:	2001      	movs	r0, #1
 800dbc8:	4240      	negs	r0, r0
 800dbca:	bd70      	pop	{r4, r5, r6, pc}
 800dbcc:	23b7      	movs	r3, #183	; 0xb7
 800dbce:	009b      	lsls	r3, r3, #2
 800dbd0:	58c3      	ldr	r3, [r0, r3]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d004      	beq.n	800dbe0 <_raise_r+0x28>
 800dbd6:	008a      	lsls	r2, r1, #2
 800dbd8:	189b      	adds	r3, r3, r2
 800dbda:	681a      	ldr	r2, [r3, #0]
 800dbdc:	2a00      	cmp	r2, #0
 800dbde:	d108      	bne.n	800dbf2 <_raise_r+0x3a>
 800dbe0:	0020      	movs	r0, r4
 800dbe2:	f000 f831 	bl	800dc48 <_getpid_r>
 800dbe6:	002a      	movs	r2, r5
 800dbe8:	0001      	movs	r1, r0
 800dbea:	0020      	movs	r0, r4
 800dbec:	f000 f81a 	bl	800dc24 <_kill_r>
 800dbf0:	e7eb      	b.n	800dbca <_raise_r+0x12>
 800dbf2:	2000      	movs	r0, #0
 800dbf4:	2a01      	cmp	r2, #1
 800dbf6:	d0e8      	beq.n	800dbca <_raise_r+0x12>
 800dbf8:	1c51      	adds	r1, r2, #1
 800dbfa:	d103      	bne.n	800dc04 <_raise_r+0x4c>
 800dbfc:	2316      	movs	r3, #22
 800dbfe:	3001      	adds	r0, #1
 800dc00:	6023      	str	r3, [r4, #0]
 800dc02:	e7e2      	b.n	800dbca <_raise_r+0x12>
 800dc04:	2400      	movs	r4, #0
 800dc06:	0028      	movs	r0, r5
 800dc08:	601c      	str	r4, [r3, #0]
 800dc0a:	4790      	blx	r2
 800dc0c:	0020      	movs	r0, r4
 800dc0e:	e7dc      	b.n	800dbca <_raise_r+0x12>

0800dc10 <raise>:
 800dc10:	b510      	push	{r4, lr}
 800dc12:	4b03      	ldr	r3, [pc, #12]	; (800dc20 <raise+0x10>)
 800dc14:	0001      	movs	r1, r0
 800dc16:	6818      	ldr	r0, [r3, #0]
 800dc18:	f7ff ffce 	bl	800dbb8 <_raise_r>
 800dc1c:	bd10      	pop	{r4, pc}
 800dc1e:	46c0      	nop			; (mov r8, r8)
 800dc20:	20000010 	.word	0x20000010

0800dc24 <_kill_r>:
 800dc24:	2300      	movs	r3, #0
 800dc26:	b570      	push	{r4, r5, r6, lr}
 800dc28:	4d06      	ldr	r5, [pc, #24]	; (800dc44 <_kill_r+0x20>)
 800dc2a:	0004      	movs	r4, r0
 800dc2c:	0008      	movs	r0, r1
 800dc2e:	0011      	movs	r1, r2
 800dc30:	602b      	str	r3, [r5, #0]
 800dc32:	f7fb f951 	bl	8008ed8 <_kill>
 800dc36:	1c43      	adds	r3, r0, #1
 800dc38:	d103      	bne.n	800dc42 <_kill_r+0x1e>
 800dc3a:	682b      	ldr	r3, [r5, #0]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d000      	beq.n	800dc42 <_kill_r+0x1e>
 800dc40:	6023      	str	r3, [r4, #0]
 800dc42:	bd70      	pop	{r4, r5, r6, pc}
 800dc44:	20003b7c 	.word	0x20003b7c

0800dc48 <_getpid_r>:
 800dc48:	b510      	push	{r4, lr}
 800dc4a:	f7fb f943 	bl	8008ed4 <_getpid>
 800dc4e:	bd10      	pop	{r4, pc}

0800dc50 <__sread>:
 800dc50:	b570      	push	{r4, r5, r6, lr}
 800dc52:	000c      	movs	r4, r1
 800dc54:	250e      	movs	r5, #14
 800dc56:	5f49      	ldrsh	r1, [r1, r5]
 800dc58:	f000 f96e 	bl	800df38 <_read_r>
 800dc5c:	2800      	cmp	r0, #0
 800dc5e:	db03      	blt.n	800dc68 <__sread+0x18>
 800dc60:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800dc62:	181b      	adds	r3, r3, r0
 800dc64:	6523      	str	r3, [r4, #80]	; 0x50
 800dc66:	bd70      	pop	{r4, r5, r6, pc}
 800dc68:	89a3      	ldrh	r3, [r4, #12]
 800dc6a:	4a02      	ldr	r2, [pc, #8]	; (800dc74 <__sread+0x24>)
 800dc6c:	4013      	ands	r3, r2
 800dc6e:	81a3      	strh	r3, [r4, #12]
 800dc70:	e7f9      	b.n	800dc66 <__sread+0x16>
 800dc72:	46c0      	nop			; (mov r8, r8)
 800dc74:	ffffefff 	.word	0xffffefff

0800dc78 <__swrite>:
 800dc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc7a:	001f      	movs	r7, r3
 800dc7c:	898b      	ldrh	r3, [r1, #12]
 800dc7e:	0005      	movs	r5, r0
 800dc80:	000c      	movs	r4, r1
 800dc82:	0016      	movs	r6, r2
 800dc84:	05db      	lsls	r3, r3, #23
 800dc86:	d505      	bpl.n	800dc94 <__swrite+0x1c>
 800dc88:	230e      	movs	r3, #14
 800dc8a:	5ec9      	ldrsh	r1, [r1, r3]
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	2302      	movs	r3, #2
 800dc90:	f000 f93e 	bl	800df10 <_lseek_r>
 800dc94:	89a3      	ldrh	r3, [r4, #12]
 800dc96:	4a05      	ldr	r2, [pc, #20]	; (800dcac <__swrite+0x34>)
 800dc98:	0028      	movs	r0, r5
 800dc9a:	4013      	ands	r3, r2
 800dc9c:	81a3      	strh	r3, [r4, #12]
 800dc9e:	0032      	movs	r2, r6
 800dca0:	230e      	movs	r3, #14
 800dca2:	5ee1      	ldrsh	r1, [r4, r3]
 800dca4:	003b      	movs	r3, r7
 800dca6:	f000 f889 	bl	800ddbc <_write_r>
 800dcaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcac:	ffffefff 	.word	0xffffefff

0800dcb0 <__sseek>:
 800dcb0:	b570      	push	{r4, r5, r6, lr}
 800dcb2:	000c      	movs	r4, r1
 800dcb4:	250e      	movs	r5, #14
 800dcb6:	5f49      	ldrsh	r1, [r1, r5]
 800dcb8:	f000 f92a 	bl	800df10 <_lseek_r>
 800dcbc:	89a3      	ldrh	r3, [r4, #12]
 800dcbe:	1c42      	adds	r2, r0, #1
 800dcc0:	d103      	bne.n	800dcca <__sseek+0x1a>
 800dcc2:	4a05      	ldr	r2, [pc, #20]	; (800dcd8 <__sseek+0x28>)
 800dcc4:	4013      	ands	r3, r2
 800dcc6:	81a3      	strh	r3, [r4, #12]
 800dcc8:	bd70      	pop	{r4, r5, r6, pc}
 800dcca:	2280      	movs	r2, #128	; 0x80
 800dccc:	0152      	lsls	r2, r2, #5
 800dcce:	4313      	orrs	r3, r2
 800dcd0:	81a3      	strh	r3, [r4, #12]
 800dcd2:	6520      	str	r0, [r4, #80]	; 0x50
 800dcd4:	e7f8      	b.n	800dcc8 <__sseek+0x18>
 800dcd6:	46c0      	nop			; (mov r8, r8)
 800dcd8:	ffffefff 	.word	0xffffefff

0800dcdc <__sclose>:
 800dcdc:	b510      	push	{r4, lr}
 800dcde:	230e      	movs	r3, #14
 800dce0:	5ec9      	ldrsh	r1, [r1, r3]
 800dce2:	f000 f87f 	bl	800dde4 <_close_r>
 800dce6:	bd10      	pop	{r4, pc}

0800dce8 <__swbuf_r>:
 800dce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcea:	0006      	movs	r6, r0
 800dcec:	000d      	movs	r5, r1
 800dcee:	0014      	movs	r4, r2
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	d004      	beq.n	800dcfe <__swbuf_r+0x16>
 800dcf4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d101      	bne.n	800dcfe <__swbuf_r+0x16>
 800dcfa:	f7ff fccb 	bl	800d694 <__sinit>
 800dcfe:	69a3      	ldr	r3, [r4, #24]
 800dd00:	60a3      	str	r3, [r4, #8]
 800dd02:	89a3      	ldrh	r3, [r4, #12]
 800dd04:	071b      	lsls	r3, r3, #28
 800dd06:	d52e      	bpl.n	800dd66 <__swbuf_r+0x7e>
 800dd08:	6923      	ldr	r3, [r4, #16]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d02b      	beq.n	800dd66 <__swbuf_r+0x7e>
 800dd0e:	230c      	movs	r3, #12
 800dd10:	5ee2      	ldrsh	r2, [r4, r3]
 800dd12:	2380      	movs	r3, #128	; 0x80
 800dd14:	019b      	lsls	r3, r3, #6
 800dd16:	b2ef      	uxtb	r7, r5
 800dd18:	b2ed      	uxtb	r5, r5
 800dd1a:	421a      	tst	r2, r3
 800dd1c:	d02c      	beq.n	800dd78 <__swbuf_r+0x90>
 800dd1e:	6823      	ldr	r3, [r4, #0]
 800dd20:	6922      	ldr	r2, [r4, #16]
 800dd22:	1a98      	subs	r0, r3, r2
 800dd24:	6963      	ldr	r3, [r4, #20]
 800dd26:	4283      	cmp	r3, r0
 800dd28:	dc05      	bgt.n	800dd36 <__swbuf_r+0x4e>
 800dd2a:	0021      	movs	r1, r4
 800dd2c:	0030      	movs	r0, r6
 800dd2e:	f7ff fc3b 	bl	800d5a8 <_fflush_r>
 800dd32:	2800      	cmp	r0, #0
 800dd34:	d11d      	bne.n	800dd72 <__swbuf_r+0x8a>
 800dd36:	68a3      	ldr	r3, [r4, #8]
 800dd38:	3001      	adds	r0, #1
 800dd3a:	3b01      	subs	r3, #1
 800dd3c:	60a3      	str	r3, [r4, #8]
 800dd3e:	6823      	ldr	r3, [r4, #0]
 800dd40:	1c5a      	adds	r2, r3, #1
 800dd42:	6022      	str	r2, [r4, #0]
 800dd44:	701f      	strb	r7, [r3, #0]
 800dd46:	6963      	ldr	r3, [r4, #20]
 800dd48:	4283      	cmp	r3, r0
 800dd4a:	d004      	beq.n	800dd56 <__swbuf_r+0x6e>
 800dd4c:	89a3      	ldrh	r3, [r4, #12]
 800dd4e:	07db      	lsls	r3, r3, #31
 800dd50:	d507      	bpl.n	800dd62 <__swbuf_r+0x7a>
 800dd52:	2d0a      	cmp	r5, #10
 800dd54:	d105      	bne.n	800dd62 <__swbuf_r+0x7a>
 800dd56:	0021      	movs	r1, r4
 800dd58:	0030      	movs	r0, r6
 800dd5a:	f7ff fc25 	bl	800d5a8 <_fflush_r>
 800dd5e:	2800      	cmp	r0, #0
 800dd60:	d107      	bne.n	800dd72 <__swbuf_r+0x8a>
 800dd62:	0028      	movs	r0, r5
 800dd64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd66:	0021      	movs	r1, r4
 800dd68:	0030      	movs	r0, r6
 800dd6a:	f7ff fb19 	bl	800d3a0 <__swsetup_r>
 800dd6e:	2800      	cmp	r0, #0
 800dd70:	d0cd      	beq.n	800dd0e <__swbuf_r+0x26>
 800dd72:	2501      	movs	r5, #1
 800dd74:	426d      	negs	r5, r5
 800dd76:	e7f4      	b.n	800dd62 <__swbuf_r+0x7a>
 800dd78:	4313      	orrs	r3, r2
 800dd7a:	81a3      	strh	r3, [r4, #12]
 800dd7c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dd7e:	4b02      	ldr	r3, [pc, #8]	; (800dd88 <__swbuf_r+0xa0>)
 800dd80:	4013      	ands	r3, r2
 800dd82:	6663      	str	r3, [r4, #100]	; 0x64
 800dd84:	e7cb      	b.n	800dd1e <__swbuf_r+0x36>
 800dd86:	46c0      	nop			; (mov r8, r8)
 800dd88:	ffffdfff 	.word	0xffffdfff

0800dd8c <_wcrtomb_r>:
 800dd8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dd8e:	001d      	movs	r5, r3
 800dd90:	4b09      	ldr	r3, [pc, #36]	; (800ddb8 <_wcrtomb_r+0x2c>)
 800dd92:	0004      	movs	r4, r0
 800dd94:	33e0      	adds	r3, #224	; 0xe0
 800dd96:	681e      	ldr	r6, [r3, #0]
 800dd98:	002b      	movs	r3, r5
 800dd9a:	2900      	cmp	r1, #0
 800dd9c:	d101      	bne.n	800dda2 <_wcrtomb_r+0x16>
 800dd9e:	000a      	movs	r2, r1
 800dda0:	a901      	add	r1, sp, #4
 800dda2:	0020      	movs	r0, r4
 800dda4:	47b0      	blx	r6
 800dda6:	1c43      	adds	r3, r0, #1
 800dda8:	d103      	bne.n	800ddb2 <_wcrtomb_r+0x26>
 800ddaa:	2300      	movs	r3, #0
 800ddac:	602b      	str	r3, [r5, #0]
 800ddae:	338a      	adds	r3, #138	; 0x8a
 800ddb0:	6023      	str	r3, [r4, #0]
 800ddb2:	b004      	add	sp, #16
 800ddb4:	bd70      	pop	{r4, r5, r6, pc}
 800ddb6:	46c0      	nop			; (mov r8, r8)
 800ddb8:	20000854 	.word	0x20000854

0800ddbc <_write_r>:
 800ddbc:	b570      	push	{r4, r5, r6, lr}
 800ddbe:	0004      	movs	r4, r0
 800ddc0:	0008      	movs	r0, r1
 800ddc2:	0011      	movs	r1, r2
 800ddc4:	001a      	movs	r2, r3
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	4d05      	ldr	r5, [pc, #20]	; (800dde0 <_write_r+0x24>)
 800ddca:	602b      	str	r3, [r5, #0]
 800ddcc:	f7fb f8a0 	bl	8008f10 <_write>
 800ddd0:	1c43      	adds	r3, r0, #1
 800ddd2:	d103      	bne.n	800dddc <_write_r+0x20>
 800ddd4:	682b      	ldr	r3, [r5, #0]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d000      	beq.n	800dddc <_write_r+0x20>
 800ddda:	6023      	str	r3, [r4, #0]
 800dddc:	bd70      	pop	{r4, r5, r6, pc}
 800ddde:	46c0      	nop			; (mov r8, r8)
 800dde0:	20003b7c 	.word	0x20003b7c

0800dde4 <_close_r>:
 800dde4:	2300      	movs	r3, #0
 800dde6:	b570      	push	{r4, r5, r6, lr}
 800dde8:	4d06      	ldr	r5, [pc, #24]	; (800de04 <_close_r+0x20>)
 800ddea:	0004      	movs	r4, r0
 800ddec:	0008      	movs	r0, r1
 800ddee:	602b      	str	r3, [r5, #0]
 800ddf0:	f7fb f89c 	bl	8008f2c <_close>
 800ddf4:	1c43      	adds	r3, r0, #1
 800ddf6:	d103      	bne.n	800de00 <_close_r+0x1c>
 800ddf8:	682b      	ldr	r3, [r5, #0]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d000      	beq.n	800de00 <_close_r+0x1c>
 800ddfe:	6023      	str	r3, [r4, #0]
 800de00:	bd70      	pop	{r4, r5, r6, pc}
 800de02:	46c0      	nop			; (mov r8, r8)
 800de04:	20003b7c 	.word	0x20003b7c

0800de08 <_fclose_r>:
 800de08:	b570      	push	{r4, r5, r6, lr}
 800de0a:	0005      	movs	r5, r0
 800de0c:	1e0c      	subs	r4, r1, #0
 800de0e:	d102      	bne.n	800de16 <_fclose_r+0xe>
 800de10:	2600      	movs	r6, #0
 800de12:	0030      	movs	r0, r6
 800de14:	bd70      	pop	{r4, r5, r6, pc}
 800de16:	2800      	cmp	r0, #0
 800de18:	d004      	beq.n	800de24 <_fclose_r+0x1c>
 800de1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d101      	bne.n	800de24 <_fclose_r+0x1c>
 800de20:	f7ff fc38 	bl	800d694 <__sinit>
 800de24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de26:	07db      	lsls	r3, r3, #31
 800de28:	d405      	bmi.n	800de36 <_fclose_r+0x2e>
 800de2a:	89a3      	ldrh	r3, [r4, #12]
 800de2c:	059b      	lsls	r3, r3, #22
 800de2e:	d402      	bmi.n	800de36 <_fclose_r+0x2e>
 800de30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de32:	f7fd fc59 	bl	800b6e8 <__retarget_lock_acquire_recursive>
 800de36:	220c      	movs	r2, #12
 800de38:	5ea3      	ldrsh	r3, [r4, r2]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d109      	bne.n	800de52 <_fclose_r+0x4a>
 800de3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800de40:	3301      	adds	r3, #1
 800de42:	0016      	movs	r6, r2
 800de44:	401e      	ands	r6, r3
 800de46:	421a      	tst	r2, r3
 800de48:	d1e2      	bne.n	800de10 <_fclose_r+0x8>
 800de4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de4c:	f7fd fc4d 	bl	800b6ea <__retarget_lock_release_recursive>
 800de50:	e7df      	b.n	800de12 <_fclose_r+0xa>
 800de52:	0021      	movs	r1, r4
 800de54:	0028      	movs	r0, r5
 800de56:	f7ff fb0f 	bl	800d478 <__sflush_r>
 800de5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800de5c:	0006      	movs	r6, r0
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d006      	beq.n	800de70 <_fclose_r+0x68>
 800de62:	0028      	movs	r0, r5
 800de64:	69e1      	ldr	r1, [r4, #28]
 800de66:	4798      	blx	r3
 800de68:	2800      	cmp	r0, #0
 800de6a:	da01      	bge.n	800de70 <_fclose_r+0x68>
 800de6c:	2601      	movs	r6, #1
 800de6e:	4276      	negs	r6, r6
 800de70:	89a3      	ldrh	r3, [r4, #12]
 800de72:	061b      	lsls	r3, r3, #24
 800de74:	d503      	bpl.n	800de7e <_fclose_r+0x76>
 800de76:	0028      	movs	r0, r5
 800de78:	6921      	ldr	r1, [r4, #16]
 800de7a:	f7fd fb7d 	bl	800b578 <_free_r>
 800de7e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800de80:	2900      	cmp	r1, #0
 800de82:	d008      	beq.n	800de96 <_fclose_r+0x8e>
 800de84:	0023      	movs	r3, r4
 800de86:	3340      	adds	r3, #64	; 0x40
 800de88:	4299      	cmp	r1, r3
 800de8a:	d002      	beq.n	800de92 <_fclose_r+0x8a>
 800de8c:	0028      	movs	r0, r5
 800de8e:	f7fd fb73 	bl	800b578 <_free_r>
 800de92:	2300      	movs	r3, #0
 800de94:	6323      	str	r3, [r4, #48]	; 0x30
 800de96:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800de98:	2900      	cmp	r1, #0
 800de9a:	d004      	beq.n	800dea6 <_fclose_r+0x9e>
 800de9c:	0028      	movs	r0, r5
 800de9e:	f7fd fb6b 	bl	800b578 <_free_r>
 800dea2:	2300      	movs	r3, #0
 800dea4:	6463      	str	r3, [r4, #68]	; 0x44
 800dea6:	f7ff fbd5 	bl	800d654 <__sfp_lock_acquire>
 800deaa:	2300      	movs	r3, #0
 800deac:	81a3      	strh	r3, [r4, #12]
 800deae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800deb0:	07db      	lsls	r3, r3, #31
 800deb2:	d402      	bmi.n	800deba <_fclose_r+0xb2>
 800deb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800deb6:	f7fd fc18 	bl	800b6ea <__retarget_lock_release_recursive>
 800deba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800debc:	f7fd fc13 	bl	800b6e6 <__retarget_lock_close_recursive>
 800dec0:	f7ff fbd0 	bl	800d664 <__sfp_lock_release>
 800dec4:	e7a5      	b.n	800de12 <_fclose_r+0xa>
	...

0800dec8 <_fstat_r>:
 800dec8:	2300      	movs	r3, #0
 800deca:	b570      	push	{r4, r5, r6, lr}
 800decc:	4d06      	ldr	r5, [pc, #24]	; (800dee8 <_fstat_r+0x20>)
 800dece:	0004      	movs	r4, r0
 800ded0:	0008      	movs	r0, r1
 800ded2:	0011      	movs	r1, r2
 800ded4:	602b      	str	r3, [r5, #0]
 800ded6:	f7fb f82c 	bl	8008f32 <_fstat>
 800deda:	1c43      	adds	r3, r0, #1
 800dedc:	d103      	bne.n	800dee6 <_fstat_r+0x1e>
 800dede:	682b      	ldr	r3, [r5, #0]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d000      	beq.n	800dee6 <_fstat_r+0x1e>
 800dee4:	6023      	str	r3, [r4, #0]
 800dee6:	bd70      	pop	{r4, r5, r6, pc}
 800dee8:	20003b7c 	.word	0x20003b7c

0800deec <_isatty_r>:
 800deec:	2300      	movs	r3, #0
 800deee:	b570      	push	{r4, r5, r6, lr}
 800def0:	4d06      	ldr	r5, [pc, #24]	; (800df0c <_isatty_r+0x20>)
 800def2:	0004      	movs	r4, r0
 800def4:	0008      	movs	r0, r1
 800def6:	602b      	str	r3, [r5, #0]
 800def8:	f7fb f820 	bl	8008f3c <_isatty>
 800defc:	1c43      	adds	r3, r0, #1
 800defe:	d103      	bne.n	800df08 <_isatty_r+0x1c>
 800df00:	682b      	ldr	r3, [r5, #0]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d000      	beq.n	800df08 <_isatty_r+0x1c>
 800df06:	6023      	str	r3, [r4, #0]
 800df08:	bd70      	pop	{r4, r5, r6, pc}
 800df0a:	46c0      	nop			; (mov r8, r8)
 800df0c:	20003b7c 	.word	0x20003b7c

0800df10 <_lseek_r>:
 800df10:	b570      	push	{r4, r5, r6, lr}
 800df12:	0004      	movs	r4, r0
 800df14:	0008      	movs	r0, r1
 800df16:	0011      	movs	r1, r2
 800df18:	001a      	movs	r2, r3
 800df1a:	2300      	movs	r3, #0
 800df1c:	4d05      	ldr	r5, [pc, #20]	; (800df34 <_lseek_r+0x24>)
 800df1e:	602b      	str	r3, [r5, #0]
 800df20:	f7fb f80e 	bl	8008f40 <_lseek>
 800df24:	1c43      	adds	r3, r0, #1
 800df26:	d103      	bne.n	800df30 <_lseek_r+0x20>
 800df28:	682b      	ldr	r3, [r5, #0]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d000      	beq.n	800df30 <_lseek_r+0x20>
 800df2e:	6023      	str	r3, [r4, #0]
 800df30:	bd70      	pop	{r4, r5, r6, pc}
 800df32:	46c0      	nop			; (mov r8, r8)
 800df34:	20003b7c 	.word	0x20003b7c

0800df38 <_read_r>:
 800df38:	b570      	push	{r4, r5, r6, lr}
 800df3a:	0004      	movs	r4, r0
 800df3c:	0008      	movs	r0, r1
 800df3e:	0011      	movs	r1, r2
 800df40:	001a      	movs	r2, r3
 800df42:	2300      	movs	r3, #0
 800df44:	4d05      	ldr	r5, [pc, #20]	; (800df5c <_read_r+0x24>)
 800df46:	602b      	str	r3, [r5, #0]
 800df48:	f7fa ffd4 	bl	8008ef4 <_read>
 800df4c:	1c43      	adds	r3, r0, #1
 800df4e:	d103      	bne.n	800df58 <_read_r+0x20>
 800df50:	682b      	ldr	r3, [r5, #0]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d000      	beq.n	800df58 <_read_r+0x20>
 800df56:	6023      	str	r3, [r4, #0]
 800df58:	bd70      	pop	{r4, r5, r6, pc}
 800df5a:	46c0      	nop			; (mov r8, r8)
 800df5c:	20003b7c 	.word	0x20003b7c

0800df60 <_init>:
 800df60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df62:	46c0      	nop			; (mov r8, r8)
 800df64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df66:	bc08      	pop	{r3}
 800df68:	469e      	mov	lr, r3
 800df6a:	4770      	bx	lr

0800df6c <_fini>:
 800df6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df6e:	46c0      	nop			; (mov r8, r8)
 800df70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df72:	bc08      	pop	{r3}
 800df74:	469e      	mov	lr, r3
 800df76:	4770      	bx	lr
