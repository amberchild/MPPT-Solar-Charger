
MPPT_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075c0  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08007680  08007680  00017680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077fc  080077fc  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080077fc  080077fc  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080077fc  080077fc  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077fc  080077fc  000177fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007800  08007800  00017800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08007804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001168  20000008  0800780c  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20001170  0800780c  00021170  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014790  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f87  00000000  00000000  000347c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001000  00000000  00000000  00037748  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e78  00000000  00000000  00038748  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016b8d  00000000  00000000  000395c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e7fc  00000000  00000000  0005014d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088bbf  00000000  00000000  0005e949  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7508  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a78  00000000  00000000  000e7584  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007668 	.word	0x08007668

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	08007668 	.word	0x08007668

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c08      	adds	r0, r1, #0
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 fa79 	bl	8000720 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 f9fb 	bl	8000634 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 fa6b 	bl	8000720 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fa61 	bl	8000720 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fa09 	bl	8000684 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f9ff 	bl	8000684 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_f2uiz>:
 8000294:	219e      	movs	r1, #158	; 0x9e
 8000296:	b510      	push	{r4, lr}
 8000298:	05c9      	lsls	r1, r1, #23
 800029a:	1c04      	adds	r4, r0, #0
 800029c:	f7ff fff0 	bl	8000280 <__aeabi_fcmpge>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d103      	bne.n	80002ac <__aeabi_f2uiz+0x18>
 80002a4:	1c20      	adds	r0, r4, #0
 80002a6:	f000 fc4f 	bl	8000b48 <__aeabi_f2iz>
 80002aa:	bd10      	pop	{r4, pc}
 80002ac:	219e      	movs	r1, #158	; 0x9e
 80002ae:	1c20      	adds	r0, r4, #0
 80002b0:	05c9      	lsls	r1, r1, #23
 80002b2:	f000 fa85 	bl	80007c0 <__aeabi_fsub>
 80002b6:	f000 fc47 	bl	8000b48 <__aeabi_f2iz>
 80002ba:	2380      	movs	r3, #128	; 0x80
 80002bc:	061b      	lsls	r3, r3, #24
 80002be:	469c      	mov	ip, r3
 80002c0:	4460      	add	r0, ip
 80002c2:	e7f2      	b.n	80002aa <__aeabi_f2uiz+0x16>

080002c4 <__aeabi_d2uiz>:
 80002c4:	b570      	push	{r4, r5, r6, lr}
 80002c6:	2200      	movs	r2, #0
 80002c8:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <__aeabi_d2uiz+0x38>)
 80002ca:	0004      	movs	r4, r0
 80002cc:	000d      	movs	r5, r1
 80002ce:	f001 fb6f 	bl	80019b0 <__aeabi_dcmpge>
 80002d2:	2800      	cmp	r0, #0
 80002d4:	d104      	bne.n	80002e0 <__aeabi_d2uiz+0x1c>
 80002d6:	0020      	movs	r0, r4
 80002d8:	0029      	movs	r1, r5
 80002da:	f001 fa0f 	bl	80016fc <__aeabi_d2iz>
 80002de:	bd70      	pop	{r4, r5, r6, pc}
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <__aeabi_d2uiz+0x38>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	0020      	movs	r0, r4
 80002e6:	0029      	movs	r1, r5
 80002e8:	f000 fec0 	bl	800106c <__aeabi_dsub>
 80002ec:	f001 fa06 	bl	80016fc <__aeabi_d2iz>
 80002f0:	2380      	movs	r3, #128	; 0x80
 80002f2:	061b      	lsls	r3, r3, #24
 80002f4:	469c      	mov	ip, r3
 80002f6:	4460      	add	r0, ip
 80002f8:	e7f1      	b.n	80002de <__aeabi_d2uiz+0x1a>
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	41e00000 	.word	0x41e00000

08000300 <__aeabi_fadd>:
 8000300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000302:	4647      	mov	r7, r8
 8000304:	46ce      	mov	lr, r9
 8000306:	0243      	lsls	r3, r0, #9
 8000308:	0a5b      	lsrs	r3, r3, #9
 800030a:	0044      	lsls	r4, r0, #1
 800030c:	0fc2      	lsrs	r2, r0, #31
 800030e:	469c      	mov	ip, r3
 8000310:	0048      	lsls	r0, r1, #1
 8000312:	00dd      	lsls	r5, r3, #3
 8000314:	024b      	lsls	r3, r1, #9
 8000316:	0e24      	lsrs	r4, r4, #24
 8000318:	0a5b      	lsrs	r3, r3, #9
 800031a:	0e00      	lsrs	r0, r0, #24
 800031c:	b580      	push	{r7, lr}
 800031e:	4698      	mov	r8, r3
 8000320:	0026      	movs	r6, r4
 8000322:	4691      	mov	r9, r2
 8000324:	0fc9      	lsrs	r1, r1, #31
 8000326:	00db      	lsls	r3, r3, #3
 8000328:	1a27      	subs	r7, r4, r0
 800032a:	428a      	cmp	r2, r1
 800032c:	d029      	beq.n	8000382 <__aeabi_fadd+0x82>
 800032e:	2f00      	cmp	r7, #0
 8000330:	dd15      	ble.n	800035e <__aeabi_fadd+0x5e>
 8000332:	2800      	cmp	r0, #0
 8000334:	d14a      	bne.n	80003cc <__aeabi_fadd+0xcc>
 8000336:	2b00      	cmp	r3, #0
 8000338:	d000      	beq.n	800033c <__aeabi_fadd+0x3c>
 800033a:	e095      	b.n	8000468 <__aeabi_fadd+0x168>
 800033c:	08ed      	lsrs	r5, r5, #3
 800033e:	2cff      	cmp	r4, #255	; 0xff
 8000340:	d100      	bne.n	8000344 <__aeabi_fadd+0x44>
 8000342:	e088      	b.n	8000456 <__aeabi_fadd+0x156>
 8000344:	026b      	lsls	r3, r5, #9
 8000346:	0a5b      	lsrs	r3, r3, #9
 8000348:	b2e6      	uxtb	r6, r4
 800034a:	025b      	lsls	r3, r3, #9
 800034c:	05f6      	lsls	r6, r6, #23
 800034e:	0a58      	lsrs	r0, r3, #9
 8000350:	4330      	orrs	r0, r6
 8000352:	07d2      	lsls	r2, r2, #31
 8000354:	4310      	orrs	r0, r2
 8000356:	bc0c      	pop	{r2, r3}
 8000358:	4690      	mov	r8, r2
 800035a:	4699      	mov	r9, r3
 800035c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800035e:	2f00      	cmp	r7, #0
 8000360:	d000      	beq.n	8000364 <__aeabi_fadd+0x64>
 8000362:	e087      	b.n	8000474 <__aeabi_fadd+0x174>
 8000364:	1c60      	adds	r0, r4, #1
 8000366:	b2c0      	uxtb	r0, r0
 8000368:	2801      	cmp	r0, #1
 800036a:	dc00      	bgt.n	800036e <__aeabi_fadd+0x6e>
 800036c:	e0b6      	b.n	80004dc <__aeabi_fadd+0x1dc>
 800036e:	1aee      	subs	r6, r5, r3
 8000370:	0172      	lsls	r2, r6, #5
 8000372:	d500      	bpl.n	8000376 <__aeabi_fadd+0x76>
 8000374:	e0c5      	b.n	8000502 <__aeabi_fadd+0x202>
 8000376:	2e00      	cmp	r6, #0
 8000378:	d13d      	bne.n	80003f6 <__aeabi_fadd+0xf6>
 800037a:	2200      	movs	r2, #0
 800037c:	2600      	movs	r6, #0
 800037e:	2300      	movs	r3, #0
 8000380:	e7e3      	b.n	800034a <__aeabi_fadd+0x4a>
 8000382:	2f00      	cmp	r7, #0
 8000384:	dc00      	bgt.n	8000388 <__aeabi_fadd+0x88>
 8000386:	e096      	b.n	80004b6 <__aeabi_fadd+0x1b6>
 8000388:	2800      	cmp	r0, #0
 800038a:	d05d      	beq.n	8000448 <__aeabi_fadd+0x148>
 800038c:	2cff      	cmp	r4, #255	; 0xff
 800038e:	d060      	beq.n	8000452 <__aeabi_fadd+0x152>
 8000390:	2280      	movs	r2, #128	; 0x80
 8000392:	04d2      	lsls	r2, r2, #19
 8000394:	4313      	orrs	r3, r2
 8000396:	2f1b      	cmp	r7, #27
 8000398:	dd00      	ble.n	800039c <__aeabi_fadd+0x9c>
 800039a:	e0ec      	b.n	8000576 <__aeabi_fadd+0x276>
 800039c:	2220      	movs	r2, #32
 800039e:	1bd2      	subs	r2, r2, r7
 80003a0:	0018      	movs	r0, r3
 80003a2:	4093      	lsls	r3, r2
 80003a4:	40f8      	lsrs	r0, r7
 80003a6:	1e5a      	subs	r2, r3, #1
 80003a8:	4193      	sbcs	r3, r2
 80003aa:	4303      	orrs	r3, r0
 80003ac:	18ed      	adds	r5, r5, r3
 80003ae:	016b      	lsls	r3, r5, #5
 80003b0:	d57b      	bpl.n	80004aa <__aeabi_fadd+0x1aa>
 80003b2:	3401      	adds	r4, #1
 80003b4:	2cff      	cmp	r4, #255	; 0xff
 80003b6:	d100      	bne.n	80003ba <__aeabi_fadd+0xba>
 80003b8:	e0b7      	b.n	800052a <__aeabi_fadd+0x22a>
 80003ba:	2201      	movs	r2, #1
 80003bc:	2607      	movs	r6, #7
 80003be:	402a      	ands	r2, r5
 80003c0:	086b      	lsrs	r3, r5, #1
 80003c2:	4d9a      	ldr	r5, [pc, #616]	; (800062c <__aeabi_fadd+0x32c>)
 80003c4:	401d      	ands	r5, r3
 80003c6:	4315      	orrs	r5, r2
 80003c8:	402e      	ands	r6, r5
 80003ca:	e029      	b.n	8000420 <__aeabi_fadd+0x120>
 80003cc:	2cff      	cmp	r4, #255	; 0xff
 80003ce:	d0b5      	beq.n	800033c <__aeabi_fadd+0x3c>
 80003d0:	2280      	movs	r2, #128	; 0x80
 80003d2:	04d2      	lsls	r2, r2, #19
 80003d4:	4313      	orrs	r3, r2
 80003d6:	2f1b      	cmp	r7, #27
 80003d8:	dd00      	ble.n	80003dc <__aeabi_fadd+0xdc>
 80003da:	e0b2      	b.n	8000542 <__aeabi_fadd+0x242>
 80003dc:	2220      	movs	r2, #32
 80003de:	1bd2      	subs	r2, r2, r7
 80003e0:	0019      	movs	r1, r3
 80003e2:	4093      	lsls	r3, r2
 80003e4:	40f9      	lsrs	r1, r7
 80003e6:	1e5a      	subs	r2, r3, #1
 80003e8:	4193      	sbcs	r3, r2
 80003ea:	430b      	orrs	r3, r1
 80003ec:	1aed      	subs	r5, r5, r3
 80003ee:	016b      	lsls	r3, r5, #5
 80003f0:	d55b      	bpl.n	80004aa <__aeabi_fadd+0x1aa>
 80003f2:	01ad      	lsls	r5, r5, #6
 80003f4:	09ae      	lsrs	r6, r5, #6
 80003f6:	0030      	movs	r0, r6
 80003f8:	f001 fae4 	bl	80019c4 <__clzsi2>
 80003fc:	3805      	subs	r0, #5
 80003fe:	4086      	lsls	r6, r0
 8000400:	4284      	cmp	r4, r0
 8000402:	dc65      	bgt.n	80004d0 <__aeabi_fadd+0x1d0>
 8000404:	1b04      	subs	r4, r0, r4
 8000406:	0033      	movs	r3, r6
 8000408:	2020      	movs	r0, #32
 800040a:	3401      	adds	r4, #1
 800040c:	40e3      	lsrs	r3, r4
 800040e:	1b04      	subs	r4, r0, r4
 8000410:	40a6      	lsls	r6, r4
 8000412:	1e75      	subs	r5, r6, #1
 8000414:	41ae      	sbcs	r6, r5
 8000416:	4333      	orrs	r3, r6
 8000418:	2607      	movs	r6, #7
 800041a:	001d      	movs	r5, r3
 800041c:	2400      	movs	r4, #0
 800041e:	401e      	ands	r6, r3
 8000420:	2201      	movs	r2, #1
 8000422:	464b      	mov	r3, r9
 8000424:	401a      	ands	r2, r3
 8000426:	2e00      	cmp	r6, #0
 8000428:	d004      	beq.n	8000434 <__aeabi_fadd+0x134>
 800042a:	230f      	movs	r3, #15
 800042c:	402b      	ands	r3, r5
 800042e:	2b04      	cmp	r3, #4
 8000430:	d000      	beq.n	8000434 <__aeabi_fadd+0x134>
 8000432:	3504      	adds	r5, #4
 8000434:	016b      	lsls	r3, r5, #5
 8000436:	d400      	bmi.n	800043a <__aeabi_fadd+0x13a>
 8000438:	e780      	b.n	800033c <__aeabi_fadd+0x3c>
 800043a:	3401      	adds	r4, #1
 800043c:	b2e6      	uxtb	r6, r4
 800043e:	2cff      	cmp	r4, #255	; 0xff
 8000440:	d12f      	bne.n	80004a2 <__aeabi_fadd+0x1a2>
 8000442:	26ff      	movs	r6, #255	; 0xff
 8000444:	2300      	movs	r3, #0
 8000446:	e780      	b.n	800034a <__aeabi_fadd+0x4a>
 8000448:	2b00      	cmp	r3, #0
 800044a:	d152      	bne.n	80004f2 <__aeabi_fadd+0x1f2>
 800044c:	2cff      	cmp	r4, #255	; 0xff
 800044e:	d000      	beq.n	8000452 <__aeabi_fadd+0x152>
 8000450:	e774      	b.n	800033c <__aeabi_fadd+0x3c>
 8000452:	000a      	movs	r2, r1
 8000454:	08ed      	lsrs	r5, r5, #3
 8000456:	2d00      	cmp	r5, #0
 8000458:	d0f3      	beq.n	8000442 <__aeabi_fadd+0x142>
 800045a:	2380      	movs	r3, #128	; 0x80
 800045c:	03db      	lsls	r3, r3, #15
 800045e:	432b      	orrs	r3, r5
 8000460:	025b      	lsls	r3, r3, #9
 8000462:	0a5b      	lsrs	r3, r3, #9
 8000464:	26ff      	movs	r6, #255	; 0xff
 8000466:	e770      	b.n	800034a <__aeabi_fadd+0x4a>
 8000468:	3f01      	subs	r7, #1
 800046a:	2f00      	cmp	r7, #0
 800046c:	d0be      	beq.n	80003ec <__aeabi_fadd+0xec>
 800046e:	2cff      	cmp	r4, #255	; 0xff
 8000470:	d1b1      	bne.n	80003d6 <__aeabi_fadd+0xd6>
 8000472:	e763      	b.n	800033c <__aeabi_fadd+0x3c>
 8000474:	2c00      	cmp	r4, #0
 8000476:	d047      	beq.n	8000508 <__aeabi_fadd+0x208>
 8000478:	28ff      	cmp	r0, #255	; 0xff
 800047a:	d069      	beq.n	8000550 <__aeabi_fadd+0x250>
 800047c:	2480      	movs	r4, #128	; 0x80
 800047e:	04e4      	lsls	r4, r4, #19
 8000480:	427a      	negs	r2, r7
 8000482:	4325      	orrs	r5, r4
 8000484:	2a1b      	cmp	r2, #27
 8000486:	dd00      	ble.n	800048a <__aeabi_fadd+0x18a>
 8000488:	e0c5      	b.n	8000616 <__aeabi_fadd+0x316>
 800048a:	002c      	movs	r4, r5
 800048c:	2620      	movs	r6, #32
 800048e:	40d4      	lsrs	r4, r2
 8000490:	1ab2      	subs	r2, r6, r2
 8000492:	4095      	lsls	r5, r2
 8000494:	1e6a      	subs	r2, r5, #1
 8000496:	4195      	sbcs	r5, r2
 8000498:	4325      	orrs	r5, r4
 800049a:	1b5d      	subs	r5, r3, r5
 800049c:	0004      	movs	r4, r0
 800049e:	4689      	mov	r9, r1
 80004a0:	e7a5      	b.n	80003ee <__aeabi_fadd+0xee>
 80004a2:	01ab      	lsls	r3, r5, #6
 80004a4:	0a5b      	lsrs	r3, r3, #9
 80004a6:	e750      	b.n	800034a <__aeabi_fadd+0x4a>
 80004a8:	2400      	movs	r4, #0
 80004aa:	2201      	movs	r2, #1
 80004ac:	464b      	mov	r3, r9
 80004ae:	401a      	ands	r2, r3
 80004b0:	076b      	lsls	r3, r5, #29
 80004b2:	d1ba      	bne.n	800042a <__aeabi_fadd+0x12a>
 80004b4:	e742      	b.n	800033c <__aeabi_fadd+0x3c>
 80004b6:	2f00      	cmp	r7, #0
 80004b8:	d13b      	bne.n	8000532 <__aeabi_fadd+0x232>
 80004ba:	3401      	adds	r4, #1
 80004bc:	b2e0      	uxtb	r0, r4
 80004be:	2801      	cmp	r0, #1
 80004c0:	dd4a      	ble.n	8000558 <__aeabi_fadd+0x258>
 80004c2:	2cff      	cmp	r4, #255	; 0xff
 80004c4:	d0bd      	beq.n	8000442 <__aeabi_fadd+0x142>
 80004c6:	2607      	movs	r6, #7
 80004c8:	18ed      	adds	r5, r5, r3
 80004ca:	086d      	lsrs	r5, r5, #1
 80004cc:	402e      	ands	r6, r5
 80004ce:	e7a7      	b.n	8000420 <__aeabi_fadd+0x120>
 80004d0:	2307      	movs	r3, #7
 80004d2:	4d57      	ldr	r5, [pc, #348]	; (8000630 <__aeabi_fadd+0x330>)
 80004d4:	1a24      	subs	r4, r4, r0
 80004d6:	4035      	ands	r5, r6
 80004d8:	401e      	ands	r6, r3
 80004da:	e7a1      	b.n	8000420 <__aeabi_fadd+0x120>
 80004dc:	2c00      	cmp	r4, #0
 80004de:	d11b      	bne.n	8000518 <__aeabi_fadd+0x218>
 80004e0:	2d00      	cmp	r5, #0
 80004e2:	d16e      	bne.n	80005c2 <__aeabi_fadd+0x2c2>
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d100      	bne.n	80004ea <__aeabi_fadd+0x1ea>
 80004e8:	e09a      	b.n	8000620 <__aeabi_fadd+0x320>
 80004ea:	000a      	movs	r2, r1
 80004ec:	001d      	movs	r5, r3
 80004ee:	003c      	movs	r4, r7
 80004f0:	e724      	b.n	800033c <__aeabi_fadd+0x3c>
 80004f2:	3f01      	subs	r7, #1
 80004f4:	2f00      	cmp	r7, #0
 80004f6:	d100      	bne.n	80004fa <__aeabi_fadd+0x1fa>
 80004f8:	e758      	b.n	80003ac <__aeabi_fadd+0xac>
 80004fa:	2cff      	cmp	r4, #255	; 0xff
 80004fc:	d000      	beq.n	8000500 <__aeabi_fadd+0x200>
 80004fe:	e74a      	b.n	8000396 <__aeabi_fadd+0x96>
 8000500:	e7a7      	b.n	8000452 <__aeabi_fadd+0x152>
 8000502:	1b5e      	subs	r6, r3, r5
 8000504:	4689      	mov	r9, r1
 8000506:	e776      	b.n	80003f6 <__aeabi_fadd+0xf6>
 8000508:	2d00      	cmp	r5, #0
 800050a:	d11c      	bne.n	8000546 <__aeabi_fadd+0x246>
 800050c:	000a      	movs	r2, r1
 800050e:	28ff      	cmp	r0, #255	; 0xff
 8000510:	d01f      	beq.n	8000552 <__aeabi_fadd+0x252>
 8000512:	0004      	movs	r4, r0
 8000514:	001d      	movs	r5, r3
 8000516:	e711      	b.n	800033c <__aeabi_fadd+0x3c>
 8000518:	2d00      	cmp	r5, #0
 800051a:	d15d      	bne.n	80005d8 <__aeabi_fadd+0x2d8>
 800051c:	2b00      	cmp	r3, #0
 800051e:	d117      	bne.n	8000550 <__aeabi_fadd+0x250>
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	2200      	movs	r2, #0
 8000524:	03db      	lsls	r3, r3, #15
 8000526:	26ff      	movs	r6, #255	; 0xff
 8000528:	e70f      	b.n	800034a <__aeabi_fadd+0x4a>
 800052a:	000a      	movs	r2, r1
 800052c:	26ff      	movs	r6, #255	; 0xff
 800052e:	2300      	movs	r3, #0
 8000530:	e70b      	b.n	800034a <__aeabi_fadd+0x4a>
 8000532:	2c00      	cmp	r4, #0
 8000534:	d121      	bne.n	800057a <__aeabi_fadd+0x27a>
 8000536:	2d00      	cmp	r5, #0
 8000538:	d166      	bne.n	8000608 <__aeabi_fadd+0x308>
 800053a:	28ff      	cmp	r0, #255	; 0xff
 800053c:	d1e9      	bne.n	8000512 <__aeabi_fadd+0x212>
 800053e:	001d      	movs	r5, r3
 8000540:	e787      	b.n	8000452 <__aeabi_fadd+0x152>
 8000542:	2301      	movs	r3, #1
 8000544:	e752      	b.n	80003ec <__aeabi_fadd+0xec>
 8000546:	1c7a      	adds	r2, r7, #1
 8000548:	d0a7      	beq.n	800049a <__aeabi_fadd+0x19a>
 800054a:	43fa      	mvns	r2, r7
 800054c:	28ff      	cmp	r0, #255	; 0xff
 800054e:	d199      	bne.n	8000484 <__aeabi_fadd+0x184>
 8000550:	000a      	movs	r2, r1
 8000552:	001d      	movs	r5, r3
 8000554:	24ff      	movs	r4, #255	; 0xff
 8000556:	e6f1      	b.n	800033c <__aeabi_fadd+0x3c>
 8000558:	2e00      	cmp	r6, #0
 800055a:	d121      	bne.n	80005a0 <__aeabi_fadd+0x2a0>
 800055c:	2d00      	cmp	r5, #0
 800055e:	d04f      	beq.n	8000600 <__aeabi_fadd+0x300>
 8000560:	2b00      	cmp	r3, #0
 8000562:	d04c      	beq.n	80005fe <__aeabi_fadd+0x2fe>
 8000564:	18ed      	adds	r5, r5, r3
 8000566:	016b      	lsls	r3, r5, #5
 8000568:	d59e      	bpl.n	80004a8 <__aeabi_fadd+0x1a8>
 800056a:	4b31      	ldr	r3, [pc, #196]	; (8000630 <__aeabi_fadd+0x330>)
 800056c:	3607      	adds	r6, #7
 800056e:	402e      	ands	r6, r5
 8000570:	2401      	movs	r4, #1
 8000572:	401d      	ands	r5, r3
 8000574:	e754      	b.n	8000420 <__aeabi_fadd+0x120>
 8000576:	2301      	movs	r3, #1
 8000578:	e718      	b.n	80003ac <__aeabi_fadd+0xac>
 800057a:	28ff      	cmp	r0, #255	; 0xff
 800057c:	d0df      	beq.n	800053e <__aeabi_fadd+0x23e>
 800057e:	2480      	movs	r4, #128	; 0x80
 8000580:	04e4      	lsls	r4, r4, #19
 8000582:	427f      	negs	r7, r7
 8000584:	4325      	orrs	r5, r4
 8000586:	2f1b      	cmp	r7, #27
 8000588:	dc4d      	bgt.n	8000626 <__aeabi_fadd+0x326>
 800058a:	2620      	movs	r6, #32
 800058c:	1bf6      	subs	r6, r6, r7
 800058e:	002c      	movs	r4, r5
 8000590:	40b5      	lsls	r5, r6
 8000592:	40fc      	lsrs	r4, r7
 8000594:	1e6a      	subs	r2, r5, #1
 8000596:	4195      	sbcs	r5, r2
 8000598:	4325      	orrs	r5, r4
 800059a:	18ed      	adds	r5, r5, r3
 800059c:	0004      	movs	r4, r0
 800059e:	e706      	b.n	80003ae <__aeabi_fadd+0xae>
 80005a0:	2d00      	cmp	r5, #0
 80005a2:	d0cc      	beq.n	800053e <__aeabi_fadd+0x23e>
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d100      	bne.n	80005aa <__aeabi_fadd+0x2aa>
 80005a8:	e753      	b.n	8000452 <__aeabi_fadd+0x152>
 80005aa:	2180      	movs	r1, #128	; 0x80
 80005ac:	4660      	mov	r0, ip
 80005ae:	03c9      	lsls	r1, r1, #15
 80005b0:	4208      	tst	r0, r1
 80005b2:	d003      	beq.n	80005bc <__aeabi_fadd+0x2bc>
 80005b4:	4640      	mov	r0, r8
 80005b6:	4208      	tst	r0, r1
 80005b8:	d100      	bne.n	80005bc <__aeabi_fadd+0x2bc>
 80005ba:	001d      	movs	r5, r3
 80005bc:	2101      	movs	r1, #1
 80005be:	4011      	ands	r1, r2
 80005c0:	e747      	b.n	8000452 <__aeabi_fadd+0x152>
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d100      	bne.n	80005c8 <__aeabi_fadd+0x2c8>
 80005c6:	e6b9      	b.n	800033c <__aeabi_fadd+0x3c>
 80005c8:	1aea      	subs	r2, r5, r3
 80005ca:	0150      	lsls	r0, r2, #5
 80005cc:	d525      	bpl.n	800061a <__aeabi_fadd+0x31a>
 80005ce:	2607      	movs	r6, #7
 80005d0:	1b5d      	subs	r5, r3, r5
 80005d2:	402e      	ands	r6, r5
 80005d4:	4689      	mov	r9, r1
 80005d6:	e723      	b.n	8000420 <__aeabi_fadd+0x120>
 80005d8:	24ff      	movs	r4, #255	; 0xff
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d100      	bne.n	80005e0 <__aeabi_fadd+0x2e0>
 80005de:	e6ad      	b.n	800033c <__aeabi_fadd+0x3c>
 80005e0:	2280      	movs	r2, #128	; 0x80
 80005e2:	4660      	mov	r0, ip
 80005e4:	03d2      	lsls	r2, r2, #15
 80005e6:	4210      	tst	r0, r2
 80005e8:	d004      	beq.n	80005f4 <__aeabi_fadd+0x2f4>
 80005ea:	4640      	mov	r0, r8
 80005ec:	4210      	tst	r0, r2
 80005ee:	d101      	bne.n	80005f4 <__aeabi_fadd+0x2f4>
 80005f0:	001d      	movs	r5, r3
 80005f2:	4689      	mov	r9, r1
 80005f4:	2201      	movs	r2, #1
 80005f6:	464b      	mov	r3, r9
 80005f8:	24ff      	movs	r4, #255	; 0xff
 80005fa:	401a      	ands	r2, r3
 80005fc:	e69e      	b.n	800033c <__aeabi_fadd+0x3c>
 80005fe:	002b      	movs	r3, r5
 8000600:	08dd      	lsrs	r5, r3, #3
 8000602:	000a      	movs	r2, r1
 8000604:	2400      	movs	r4, #0
 8000606:	e69d      	b.n	8000344 <__aeabi_fadd+0x44>
 8000608:	1c7a      	adds	r2, r7, #1
 800060a:	d0c6      	beq.n	800059a <__aeabi_fadd+0x29a>
 800060c:	43ff      	mvns	r7, r7
 800060e:	28ff      	cmp	r0, #255	; 0xff
 8000610:	d1b9      	bne.n	8000586 <__aeabi_fadd+0x286>
 8000612:	001d      	movs	r5, r3
 8000614:	e71d      	b.n	8000452 <__aeabi_fadd+0x152>
 8000616:	2501      	movs	r5, #1
 8000618:	e73f      	b.n	800049a <__aeabi_fadd+0x19a>
 800061a:	1e15      	subs	r5, r2, #0
 800061c:	d000      	beq.n	8000620 <__aeabi_fadd+0x320>
 800061e:	e744      	b.n	80004aa <__aeabi_fadd+0x1aa>
 8000620:	2200      	movs	r2, #0
 8000622:	2300      	movs	r3, #0
 8000624:	e691      	b.n	800034a <__aeabi_fadd+0x4a>
 8000626:	2501      	movs	r5, #1
 8000628:	e7b7      	b.n	800059a <__aeabi_fadd+0x29a>
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	7dffffff 	.word	0x7dffffff
 8000630:	fbffffff 	.word	0xfbffffff

08000634 <__eqsf2>:
 8000634:	b570      	push	{r4, r5, r6, lr}
 8000636:	0042      	lsls	r2, r0, #1
 8000638:	024e      	lsls	r6, r1, #9
 800063a:	004c      	lsls	r4, r1, #1
 800063c:	0245      	lsls	r5, r0, #9
 800063e:	0a6d      	lsrs	r5, r5, #9
 8000640:	0e12      	lsrs	r2, r2, #24
 8000642:	0fc3      	lsrs	r3, r0, #31
 8000644:	0a76      	lsrs	r6, r6, #9
 8000646:	0e24      	lsrs	r4, r4, #24
 8000648:	0fc9      	lsrs	r1, r1, #31
 800064a:	2aff      	cmp	r2, #255	; 0xff
 800064c:	d00f      	beq.n	800066e <__eqsf2+0x3a>
 800064e:	2cff      	cmp	r4, #255	; 0xff
 8000650:	d011      	beq.n	8000676 <__eqsf2+0x42>
 8000652:	2001      	movs	r0, #1
 8000654:	42a2      	cmp	r2, r4
 8000656:	d000      	beq.n	800065a <__eqsf2+0x26>
 8000658:	bd70      	pop	{r4, r5, r6, pc}
 800065a:	42b5      	cmp	r5, r6
 800065c:	d1fc      	bne.n	8000658 <__eqsf2+0x24>
 800065e:	428b      	cmp	r3, r1
 8000660:	d00d      	beq.n	800067e <__eqsf2+0x4a>
 8000662:	2a00      	cmp	r2, #0
 8000664:	d1f8      	bne.n	8000658 <__eqsf2+0x24>
 8000666:	0028      	movs	r0, r5
 8000668:	1e45      	subs	r5, r0, #1
 800066a:	41a8      	sbcs	r0, r5
 800066c:	e7f4      	b.n	8000658 <__eqsf2+0x24>
 800066e:	2001      	movs	r0, #1
 8000670:	2d00      	cmp	r5, #0
 8000672:	d1f1      	bne.n	8000658 <__eqsf2+0x24>
 8000674:	e7eb      	b.n	800064e <__eqsf2+0x1a>
 8000676:	2001      	movs	r0, #1
 8000678:	2e00      	cmp	r6, #0
 800067a:	d1ed      	bne.n	8000658 <__eqsf2+0x24>
 800067c:	e7e9      	b.n	8000652 <__eqsf2+0x1e>
 800067e:	2000      	movs	r0, #0
 8000680:	e7ea      	b.n	8000658 <__eqsf2+0x24>
 8000682:	46c0      	nop			; (mov r8, r8)

08000684 <__gesf2>:
 8000684:	b570      	push	{r4, r5, r6, lr}
 8000686:	004a      	lsls	r2, r1, #1
 8000688:	024e      	lsls	r6, r1, #9
 800068a:	0245      	lsls	r5, r0, #9
 800068c:	0044      	lsls	r4, r0, #1
 800068e:	0a6d      	lsrs	r5, r5, #9
 8000690:	0e24      	lsrs	r4, r4, #24
 8000692:	0fc3      	lsrs	r3, r0, #31
 8000694:	0a76      	lsrs	r6, r6, #9
 8000696:	0e12      	lsrs	r2, r2, #24
 8000698:	0fc9      	lsrs	r1, r1, #31
 800069a:	2cff      	cmp	r4, #255	; 0xff
 800069c:	d015      	beq.n	80006ca <__gesf2+0x46>
 800069e:	2aff      	cmp	r2, #255	; 0xff
 80006a0:	d00e      	beq.n	80006c0 <__gesf2+0x3c>
 80006a2:	2c00      	cmp	r4, #0
 80006a4:	d115      	bne.n	80006d2 <__gesf2+0x4e>
 80006a6:	2a00      	cmp	r2, #0
 80006a8:	d101      	bne.n	80006ae <__gesf2+0x2a>
 80006aa:	2e00      	cmp	r6, #0
 80006ac:	d01c      	beq.n	80006e8 <__gesf2+0x64>
 80006ae:	2d00      	cmp	r5, #0
 80006b0:	d014      	beq.n	80006dc <__gesf2+0x58>
 80006b2:	428b      	cmp	r3, r1
 80006b4:	d027      	beq.n	8000706 <__gesf2+0x82>
 80006b6:	2002      	movs	r0, #2
 80006b8:	3b01      	subs	r3, #1
 80006ba:	4018      	ands	r0, r3
 80006bc:	3801      	subs	r0, #1
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	2e00      	cmp	r6, #0
 80006c2:	d0ee      	beq.n	80006a2 <__gesf2+0x1e>
 80006c4:	2002      	movs	r0, #2
 80006c6:	4240      	negs	r0, r0
 80006c8:	e7f9      	b.n	80006be <__gesf2+0x3a>
 80006ca:	2d00      	cmp	r5, #0
 80006cc:	d1fa      	bne.n	80006c4 <__gesf2+0x40>
 80006ce:	2aff      	cmp	r2, #255	; 0xff
 80006d0:	d00e      	beq.n	80006f0 <__gesf2+0x6c>
 80006d2:	2a00      	cmp	r2, #0
 80006d4:	d10e      	bne.n	80006f4 <__gesf2+0x70>
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d0ed      	beq.n	80006b6 <__gesf2+0x32>
 80006da:	e00b      	b.n	80006f4 <__gesf2+0x70>
 80006dc:	2301      	movs	r3, #1
 80006de:	3901      	subs	r1, #1
 80006e0:	4399      	bics	r1, r3
 80006e2:	0008      	movs	r0, r1
 80006e4:	3001      	adds	r0, #1
 80006e6:	e7ea      	b.n	80006be <__gesf2+0x3a>
 80006e8:	2000      	movs	r0, #0
 80006ea:	2d00      	cmp	r5, #0
 80006ec:	d0e7      	beq.n	80006be <__gesf2+0x3a>
 80006ee:	e7e2      	b.n	80006b6 <__gesf2+0x32>
 80006f0:	2e00      	cmp	r6, #0
 80006f2:	d1e7      	bne.n	80006c4 <__gesf2+0x40>
 80006f4:	428b      	cmp	r3, r1
 80006f6:	d1de      	bne.n	80006b6 <__gesf2+0x32>
 80006f8:	4294      	cmp	r4, r2
 80006fa:	dd05      	ble.n	8000708 <__gesf2+0x84>
 80006fc:	2102      	movs	r1, #2
 80006fe:	1e58      	subs	r0, r3, #1
 8000700:	4008      	ands	r0, r1
 8000702:	3801      	subs	r0, #1
 8000704:	e7db      	b.n	80006be <__gesf2+0x3a>
 8000706:	2400      	movs	r4, #0
 8000708:	42a2      	cmp	r2, r4
 800070a:	dc04      	bgt.n	8000716 <__gesf2+0x92>
 800070c:	42b5      	cmp	r5, r6
 800070e:	d8d2      	bhi.n	80006b6 <__gesf2+0x32>
 8000710:	2000      	movs	r0, #0
 8000712:	42b5      	cmp	r5, r6
 8000714:	d2d3      	bcs.n	80006be <__gesf2+0x3a>
 8000716:	1e58      	subs	r0, r3, #1
 8000718:	2301      	movs	r3, #1
 800071a:	4398      	bics	r0, r3
 800071c:	3001      	adds	r0, #1
 800071e:	e7ce      	b.n	80006be <__gesf2+0x3a>

08000720 <__lesf2>:
 8000720:	b530      	push	{r4, r5, lr}
 8000722:	0042      	lsls	r2, r0, #1
 8000724:	0244      	lsls	r4, r0, #9
 8000726:	024d      	lsls	r5, r1, #9
 8000728:	0fc3      	lsrs	r3, r0, #31
 800072a:	0048      	lsls	r0, r1, #1
 800072c:	0a64      	lsrs	r4, r4, #9
 800072e:	0e12      	lsrs	r2, r2, #24
 8000730:	0a6d      	lsrs	r5, r5, #9
 8000732:	0e00      	lsrs	r0, r0, #24
 8000734:	0fc9      	lsrs	r1, r1, #31
 8000736:	2aff      	cmp	r2, #255	; 0xff
 8000738:	d012      	beq.n	8000760 <__lesf2+0x40>
 800073a:	28ff      	cmp	r0, #255	; 0xff
 800073c:	d00c      	beq.n	8000758 <__lesf2+0x38>
 800073e:	2a00      	cmp	r2, #0
 8000740:	d112      	bne.n	8000768 <__lesf2+0x48>
 8000742:	2800      	cmp	r0, #0
 8000744:	d119      	bne.n	800077a <__lesf2+0x5a>
 8000746:	2d00      	cmp	r5, #0
 8000748:	d117      	bne.n	800077a <__lesf2+0x5a>
 800074a:	2c00      	cmp	r4, #0
 800074c:	d02b      	beq.n	80007a6 <__lesf2+0x86>
 800074e:	2002      	movs	r0, #2
 8000750:	3b01      	subs	r3, #1
 8000752:	4018      	ands	r0, r3
 8000754:	3801      	subs	r0, #1
 8000756:	e026      	b.n	80007a6 <__lesf2+0x86>
 8000758:	2d00      	cmp	r5, #0
 800075a:	d0f0      	beq.n	800073e <__lesf2+0x1e>
 800075c:	2002      	movs	r0, #2
 800075e:	e022      	b.n	80007a6 <__lesf2+0x86>
 8000760:	2c00      	cmp	r4, #0
 8000762:	d1fb      	bne.n	800075c <__lesf2+0x3c>
 8000764:	28ff      	cmp	r0, #255	; 0xff
 8000766:	d01f      	beq.n	80007a8 <__lesf2+0x88>
 8000768:	2800      	cmp	r0, #0
 800076a:	d11f      	bne.n	80007ac <__lesf2+0x8c>
 800076c:	2d00      	cmp	r5, #0
 800076e:	d11d      	bne.n	80007ac <__lesf2+0x8c>
 8000770:	2002      	movs	r0, #2
 8000772:	3b01      	subs	r3, #1
 8000774:	4018      	ands	r0, r3
 8000776:	3801      	subs	r0, #1
 8000778:	e015      	b.n	80007a6 <__lesf2+0x86>
 800077a:	2c00      	cmp	r4, #0
 800077c:	d00e      	beq.n	800079c <__lesf2+0x7c>
 800077e:	428b      	cmp	r3, r1
 8000780:	d1e5      	bne.n	800074e <__lesf2+0x2e>
 8000782:	2200      	movs	r2, #0
 8000784:	4290      	cmp	r0, r2
 8000786:	dc04      	bgt.n	8000792 <__lesf2+0x72>
 8000788:	42ac      	cmp	r4, r5
 800078a:	d8e0      	bhi.n	800074e <__lesf2+0x2e>
 800078c:	2000      	movs	r0, #0
 800078e:	42ac      	cmp	r4, r5
 8000790:	d209      	bcs.n	80007a6 <__lesf2+0x86>
 8000792:	1e58      	subs	r0, r3, #1
 8000794:	2301      	movs	r3, #1
 8000796:	4398      	bics	r0, r3
 8000798:	3001      	adds	r0, #1
 800079a:	e004      	b.n	80007a6 <__lesf2+0x86>
 800079c:	2301      	movs	r3, #1
 800079e:	3901      	subs	r1, #1
 80007a0:	4399      	bics	r1, r3
 80007a2:	0008      	movs	r0, r1
 80007a4:	3001      	adds	r0, #1
 80007a6:	bd30      	pop	{r4, r5, pc}
 80007a8:	2d00      	cmp	r5, #0
 80007aa:	d1d7      	bne.n	800075c <__lesf2+0x3c>
 80007ac:	428b      	cmp	r3, r1
 80007ae:	d1ce      	bne.n	800074e <__lesf2+0x2e>
 80007b0:	4282      	cmp	r2, r0
 80007b2:	dde7      	ble.n	8000784 <__lesf2+0x64>
 80007b4:	2102      	movs	r1, #2
 80007b6:	1e58      	subs	r0, r3, #1
 80007b8:	4008      	ands	r0, r1
 80007ba:	3801      	subs	r0, #1
 80007bc:	e7f3      	b.n	80007a6 <__lesf2+0x86>
 80007be:	46c0      	nop			; (mov r8, r8)

080007c0 <__aeabi_fsub>:
 80007c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c2:	4647      	mov	r7, r8
 80007c4:	46ce      	mov	lr, r9
 80007c6:	0044      	lsls	r4, r0, #1
 80007c8:	0fc2      	lsrs	r2, r0, #31
 80007ca:	b580      	push	{r7, lr}
 80007cc:	0247      	lsls	r7, r0, #9
 80007ce:	0248      	lsls	r0, r1, #9
 80007d0:	0a40      	lsrs	r0, r0, #9
 80007d2:	4684      	mov	ip, r0
 80007d4:	4666      	mov	r6, ip
 80007d6:	0048      	lsls	r0, r1, #1
 80007d8:	0a7f      	lsrs	r7, r7, #9
 80007da:	0e24      	lsrs	r4, r4, #24
 80007dc:	00f6      	lsls	r6, r6, #3
 80007de:	0025      	movs	r5, r4
 80007e0:	4690      	mov	r8, r2
 80007e2:	00fb      	lsls	r3, r7, #3
 80007e4:	0e00      	lsrs	r0, r0, #24
 80007e6:	0fc9      	lsrs	r1, r1, #31
 80007e8:	46b1      	mov	r9, r6
 80007ea:	28ff      	cmp	r0, #255	; 0xff
 80007ec:	d100      	bne.n	80007f0 <__aeabi_fsub+0x30>
 80007ee:	e085      	b.n	80008fc <__aeabi_fsub+0x13c>
 80007f0:	2601      	movs	r6, #1
 80007f2:	4071      	eors	r1, r6
 80007f4:	1a26      	subs	r6, r4, r0
 80007f6:	4291      	cmp	r1, r2
 80007f8:	d057      	beq.n	80008aa <__aeabi_fsub+0xea>
 80007fa:	2e00      	cmp	r6, #0
 80007fc:	dd43      	ble.n	8000886 <__aeabi_fsub+0xc6>
 80007fe:	2800      	cmp	r0, #0
 8000800:	d000      	beq.n	8000804 <__aeabi_fsub+0x44>
 8000802:	e07f      	b.n	8000904 <__aeabi_fsub+0x144>
 8000804:	4649      	mov	r1, r9
 8000806:	2900      	cmp	r1, #0
 8000808:	d100      	bne.n	800080c <__aeabi_fsub+0x4c>
 800080a:	e0aa      	b.n	8000962 <__aeabi_fsub+0x1a2>
 800080c:	3e01      	subs	r6, #1
 800080e:	2e00      	cmp	r6, #0
 8000810:	d000      	beq.n	8000814 <__aeabi_fsub+0x54>
 8000812:	e0f7      	b.n	8000a04 <__aeabi_fsub+0x244>
 8000814:	1a5b      	subs	r3, r3, r1
 8000816:	015a      	lsls	r2, r3, #5
 8000818:	d400      	bmi.n	800081c <__aeabi_fsub+0x5c>
 800081a:	e08b      	b.n	8000934 <__aeabi_fsub+0x174>
 800081c:	019b      	lsls	r3, r3, #6
 800081e:	099c      	lsrs	r4, r3, #6
 8000820:	0020      	movs	r0, r4
 8000822:	f001 f8cf 	bl	80019c4 <__clzsi2>
 8000826:	3805      	subs	r0, #5
 8000828:	4084      	lsls	r4, r0
 800082a:	4285      	cmp	r5, r0
 800082c:	dd00      	ble.n	8000830 <__aeabi_fsub+0x70>
 800082e:	e0d3      	b.n	80009d8 <__aeabi_fsub+0x218>
 8000830:	1b45      	subs	r5, r0, r5
 8000832:	0023      	movs	r3, r4
 8000834:	2020      	movs	r0, #32
 8000836:	3501      	adds	r5, #1
 8000838:	40eb      	lsrs	r3, r5
 800083a:	1b45      	subs	r5, r0, r5
 800083c:	40ac      	lsls	r4, r5
 800083e:	1e62      	subs	r2, r4, #1
 8000840:	4194      	sbcs	r4, r2
 8000842:	4323      	orrs	r3, r4
 8000844:	2407      	movs	r4, #7
 8000846:	2500      	movs	r5, #0
 8000848:	401c      	ands	r4, r3
 800084a:	2201      	movs	r2, #1
 800084c:	4641      	mov	r1, r8
 800084e:	400a      	ands	r2, r1
 8000850:	2c00      	cmp	r4, #0
 8000852:	d004      	beq.n	800085e <__aeabi_fsub+0x9e>
 8000854:	210f      	movs	r1, #15
 8000856:	4019      	ands	r1, r3
 8000858:	2904      	cmp	r1, #4
 800085a:	d000      	beq.n	800085e <__aeabi_fsub+0x9e>
 800085c:	3304      	adds	r3, #4
 800085e:	0159      	lsls	r1, r3, #5
 8000860:	d400      	bmi.n	8000864 <__aeabi_fsub+0xa4>
 8000862:	e080      	b.n	8000966 <__aeabi_fsub+0x1a6>
 8000864:	3501      	adds	r5, #1
 8000866:	b2ec      	uxtb	r4, r5
 8000868:	2dff      	cmp	r5, #255	; 0xff
 800086a:	d000      	beq.n	800086e <__aeabi_fsub+0xae>
 800086c:	e0a3      	b.n	80009b6 <__aeabi_fsub+0x1f6>
 800086e:	24ff      	movs	r4, #255	; 0xff
 8000870:	2300      	movs	r3, #0
 8000872:	025b      	lsls	r3, r3, #9
 8000874:	05e4      	lsls	r4, r4, #23
 8000876:	0a58      	lsrs	r0, r3, #9
 8000878:	07d2      	lsls	r2, r2, #31
 800087a:	4320      	orrs	r0, r4
 800087c:	4310      	orrs	r0, r2
 800087e:	bc0c      	pop	{r2, r3}
 8000880:	4690      	mov	r8, r2
 8000882:	4699      	mov	r9, r3
 8000884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000886:	2e00      	cmp	r6, #0
 8000888:	d174      	bne.n	8000974 <__aeabi_fsub+0x1b4>
 800088a:	1c60      	adds	r0, r4, #1
 800088c:	b2c0      	uxtb	r0, r0
 800088e:	2801      	cmp	r0, #1
 8000890:	dc00      	bgt.n	8000894 <__aeabi_fsub+0xd4>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_fsub+0x224>
 8000894:	464a      	mov	r2, r9
 8000896:	1a9c      	subs	r4, r3, r2
 8000898:	0162      	lsls	r2, r4, #5
 800089a:	d500      	bpl.n	800089e <__aeabi_fsub+0xde>
 800089c:	e0b6      	b.n	8000a0c <__aeabi_fsub+0x24c>
 800089e:	2c00      	cmp	r4, #0
 80008a0:	d1be      	bne.n	8000820 <__aeabi_fsub+0x60>
 80008a2:	2200      	movs	r2, #0
 80008a4:	2400      	movs	r4, #0
 80008a6:	2300      	movs	r3, #0
 80008a8:	e7e3      	b.n	8000872 <__aeabi_fsub+0xb2>
 80008aa:	2e00      	cmp	r6, #0
 80008ac:	dc00      	bgt.n	80008b0 <__aeabi_fsub+0xf0>
 80008ae:	e085      	b.n	80009bc <__aeabi_fsub+0x1fc>
 80008b0:	2800      	cmp	r0, #0
 80008b2:	d046      	beq.n	8000942 <__aeabi_fsub+0x182>
 80008b4:	2cff      	cmp	r4, #255	; 0xff
 80008b6:	d049      	beq.n	800094c <__aeabi_fsub+0x18c>
 80008b8:	2280      	movs	r2, #128	; 0x80
 80008ba:	4648      	mov	r0, r9
 80008bc:	04d2      	lsls	r2, r2, #19
 80008be:	4310      	orrs	r0, r2
 80008c0:	4681      	mov	r9, r0
 80008c2:	2201      	movs	r2, #1
 80008c4:	2e1b      	cmp	r6, #27
 80008c6:	dc09      	bgt.n	80008dc <__aeabi_fsub+0x11c>
 80008c8:	2020      	movs	r0, #32
 80008ca:	464c      	mov	r4, r9
 80008cc:	1b80      	subs	r0, r0, r6
 80008ce:	4084      	lsls	r4, r0
 80008d0:	464a      	mov	r2, r9
 80008d2:	0020      	movs	r0, r4
 80008d4:	40f2      	lsrs	r2, r6
 80008d6:	1e44      	subs	r4, r0, #1
 80008d8:	41a0      	sbcs	r0, r4
 80008da:	4302      	orrs	r2, r0
 80008dc:	189b      	adds	r3, r3, r2
 80008de:	015a      	lsls	r2, r3, #5
 80008e0:	d528      	bpl.n	8000934 <__aeabi_fsub+0x174>
 80008e2:	3501      	adds	r5, #1
 80008e4:	2dff      	cmp	r5, #255	; 0xff
 80008e6:	d100      	bne.n	80008ea <__aeabi_fsub+0x12a>
 80008e8:	e0a8      	b.n	8000a3c <__aeabi_fsub+0x27c>
 80008ea:	2201      	movs	r2, #1
 80008ec:	2407      	movs	r4, #7
 80008ee:	4994      	ldr	r1, [pc, #592]	; (8000b40 <__aeabi_fsub+0x380>)
 80008f0:	401a      	ands	r2, r3
 80008f2:	085b      	lsrs	r3, r3, #1
 80008f4:	400b      	ands	r3, r1
 80008f6:	4313      	orrs	r3, r2
 80008f8:	401c      	ands	r4, r3
 80008fa:	e7a6      	b.n	800084a <__aeabi_fsub+0x8a>
 80008fc:	2e00      	cmp	r6, #0
 80008fe:	d000      	beq.n	8000902 <__aeabi_fsub+0x142>
 8000900:	e778      	b.n	80007f4 <__aeabi_fsub+0x34>
 8000902:	e775      	b.n	80007f0 <__aeabi_fsub+0x30>
 8000904:	2cff      	cmp	r4, #255	; 0xff
 8000906:	d054      	beq.n	80009b2 <__aeabi_fsub+0x1f2>
 8000908:	2280      	movs	r2, #128	; 0x80
 800090a:	4649      	mov	r1, r9
 800090c:	04d2      	lsls	r2, r2, #19
 800090e:	4311      	orrs	r1, r2
 8000910:	4689      	mov	r9, r1
 8000912:	2201      	movs	r2, #1
 8000914:	2e1b      	cmp	r6, #27
 8000916:	dc09      	bgt.n	800092c <__aeabi_fsub+0x16c>
 8000918:	2120      	movs	r1, #32
 800091a:	4648      	mov	r0, r9
 800091c:	1b89      	subs	r1, r1, r6
 800091e:	4088      	lsls	r0, r1
 8000920:	464a      	mov	r2, r9
 8000922:	0001      	movs	r1, r0
 8000924:	40f2      	lsrs	r2, r6
 8000926:	1e48      	subs	r0, r1, #1
 8000928:	4181      	sbcs	r1, r0
 800092a:	430a      	orrs	r2, r1
 800092c:	1a9b      	subs	r3, r3, r2
 800092e:	015a      	lsls	r2, r3, #5
 8000930:	d500      	bpl.n	8000934 <__aeabi_fsub+0x174>
 8000932:	e773      	b.n	800081c <__aeabi_fsub+0x5c>
 8000934:	2201      	movs	r2, #1
 8000936:	4641      	mov	r1, r8
 8000938:	400a      	ands	r2, r1
 800093a:	0759      	lsls	r1, r3, #29
 800093c:	d000      	beq.n	8000940 <__aeabi_fsub+0x180>
 800093e:	e789      	b.n	8000854 <__aeabi_fsub+0x94>
 8000940:	e011      	b.n	8000966 <__aeabi_fsub+0x1a6>
 8000942:	4648      	mov	r0, r9
 8000944:	2800      	cmp	r0, #0
 8000946:	d158      	bne.n	80009fa <__aeabi_fsub+0x23a>
 8000948:	2cff      	cmp	r4, #255	; 0xff
 800094a:	d10c      	bne.n	8000966 <__aeabi_fsub+0x1a6>
 800094c:	08db      	lsrs	r3, r3, #3
 800094e:	2b00      	cmp	r3, #0
 8000950:	d100      	bne.n	8000954 <__aeabi_fsub+0x194>
 8000952:	e78c      	b.n	800086e <__aeabi_fsub+0xae>
 8000954:	2080      	movs	r0, #128	; 0x80
 8000956:	03c0      	lsls	r0, r0, #15
 8000958:	4303      	orrs	r3, r0
 800095a:	025b      	lsls	r3, r3, #9
 800095c:	0a5b      	lsrs	r3, r3, #9
 800095e:	24ff      	movs	r4, #255	; 0xff
 8000960:	e787      	b.n	8000872 <__aeabi_fsub+0xb2>
 8000962:	2cff      	cmp	r4, #255	; 0xff
 8000964:	d025      	beq.n	80009b2 <__aeabi_fsub+0x1f2>
 8000966:	08db      	lsrs	r3, r3, #3
 8000968:	2dff      	cmp	r5, #255	; 0xff
 800096a:	d0f0      	beq.n	800094e <__aeabi_fsub+0x18e>
 800096c:	025b      	lsls	r3, r3, #9
 800096e:	0a5b      	lsrs	r3, r3, #9
 8000970:	b2ec      	uxtb	r4, r5
 8000972:	e77e      	b.n	8000872 <__aeabi_fsub+0xb2>
 8000974:	2c00      	cmp	r4, #0
 8000976:	d04d      	beq.n	8000a14 <__aeabi_fsub+0x254>
 8000978:	28ff      	cmp	r0, #255	; 0xff
 800097a:	d018      	beq.n	80009ae <__aeabi_fsub+0x1ee>
 800097c:	2480      	movs	r4, #128	; 0x80
 800097e:	04e4      	lsls	r4, r4, #19
 8000980:	4272      	negs	r2, r6
 8000982:	4323      	orrs	r3, r4
 8000984:	2a1b      	cmp	r2, #27
 8000986:	dd00      	ble.n	800098a <__aeabi_fsub+0x1ca>
 8000988:	e0c4      	b.n	8000b14 <__aeabi_fsub+0x354>
 800098a:	001c      	movs	r4, r3
 800098c:	2520      	movs	r5, #32
 800098e:	40d4      	lsrs	r4, r2
 8000990:	1aaa      	subs	r2, r5, r2
 8000992:	4093      	lsls	r3, r2
 8000994:	1e5a      	subs	r2, r3, #1
 8000996:	4193      	sbcs	r3, r2
 8000998:	4323      	orrs	r3, r4
 800099a:	464a      	mov	r2, r9
 800099c:	0005      	movs	r5, r0
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	4688      	mov	r8, r1
 80009a2:	e738      	b.n	8000816 <__aeabi_fsub+0x56>
 80009a4:	1c72      	adds	r2, r6, #1
 80009a6:	d0f8      	beq.n	800099a <__aeabi_fsub+0x1da>
 80009a8:	43f2      	mvns	r2, r6
 80009aa:	28ff      	cmp	r0, #255	; 0xff
 80009ac:	d1ea      	bne.n	8000984 <__aeabi_fsub+0x1c4>
 80009ae:	000a      	movs	r2, r1
 80009b0:	464b      	mov	r3, r9
 80009b2:	25ff      	movs	r5, #255	; 0xff
 80009b4:	e7d7      	b.n	8000966 <__aeabi_fsub+0x1a6>
 80009b6:	019b      	lsls	r3, r3, #6
 80009b8:	0a5b      	lsrs	r3, r3, #9
 80009ba:	e75a      	b.n	8000872 <__aeabi_fsub+0xb2>
 80009bc:	2e00      	cmp	r6, #0
 80009be:	d141      	bne.n	8000a44 <__aeabi_fsub+0x284>
 80009c0:	1c65      	adds	r5, r4, #1
 80009c2:	b2e9      	uxtb	r1, r5
 80009c4:	2901      	cmp	r1, #1
 80009c6:	dd45      	ble.n	8000a54 <__aeabi_fsub+0x294>
 80009c8:	2dff      	cmp	r5, #255	; 0xff
 80009ca:	d100      	bne.n	80009ce <__aeabi_fsub+0x20e>
 80009cc:	e74f      	b.n	800086e <__aeabi_fsub+0xae>
 80009ce:	2407      	movs	r4, #7
 80009d0:	444b      	add	r3, r9
 80009d2:	085b      	lsrs	r3, r3, #1
 80009d4:	401c      	ands	r4, r3
 80009d6:	e738      	b.n	800084a <__aeabi_fsub+0x8a>
 80009d8:	2207      	movs	r2, #7
 80009da:	4b5a      	ldr	r3, [pc, #360]	; (8000b44 <__aeabi_fsub+0x384>)
 80009dc:	1a2d      	subs	r5, r5, r0
 80009de:	4023      	ands	r3, r4
 80009e0:	4014      	ands	r4, r2
 80009e2:	e732      	b.n	800084a <__aeabi_fsub+0x8a>
 80009e4:	2c00      	cmp	r4, #0
 80009e6:	d11d      	bne.n	8000a24 <__aeabi_fsub+0x264>
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d17a      	bne.n	8000ae2 <__aeabi_fsub+0x322>
 80009ec:	464b      	mov	r3, r9
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d100      	bne.n	80009f4 <__aeabi_fsub+0x234>
 80009f2:	e091      	b.n	8000b18 <__aeabi_fsub+0x358>
 80009f4:	000a      	movs	r2, r1
 80009f6:	2500      	movs	r5, #0
 80009f8:	e7b5      	b.n	8000966 <__aeabi_fsub+0x1a6>
 80009fa:	3e01      	subs	r6, #1
 80009fc:	2e00      	cmp	r6, #0
 80009fe:	d119      	bne.n	8000a34 <__aeabi_fsub+0x274>
 8000a00:	444b      	add	r3, r9
 8000a02:	e76c      	b.n	80008de <__aeabi_fsub+0x11e>
 8000a04:	2cff      	cmp	r4, #255	; 0xff
 8000a06:	d184      	bne.n	8000912 <__aeabi_fsub+0x152>
 8000a08:	25ff      	movs	r5, #255	; 0xff
 8000a0a:	e7ac      	b.n	8000966 <__aeabi_fsub+0x1a6>
 8000a0c:	464a      	mov	r2, r9
 8000a0e:	4688      	mov	r8, r1
 8000a10:	1ad4      	subs	r4, r2, r3
 8000a12:	e705      	b.n	8000820 <__aeabi_fsub+0x60>
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1c5      	bne.n	80009a4 <__aeabi_fsub+0x1e4>
 8000a18:	000a      	movs	r2, r1
 8000a1a:	28ff      	cmp	r0, #255	; 0xff
 8000a1c:	d0c8      	beq.n	80009b0 <__aeabi_fsub+0x1f0>
 8000a1e:	0005      	movs	r5, r0
 8000a20:	464b      	mov	r3, r9
 8000a22:	e7a0      	b.n	8000966 <__aeabi_fsub+0x1a6>
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d149      	bne.n	8000abc <__aeabi_fsub+0x2fc>
 8000a28:	464b      	mov	r3, r9
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d077      	beq.n	8000b1e <__aeabi_fsub+0x35e>
 8000a2e:	000a      	movs	r2, r1
 8000a30:	25ff      	movs	r5, #255	; 0xff
 8000a32:	e798      	b.n	8000966 <__aeabi_fsub+0x1a6>
 8000a34:	2cff      	cmp	r4, #255	; 0xff
 8000a36:	d000      	beq.n	8000a3a <__aeabi_fsub+0x27a>
 8000a38:	e743      	b.n	80008c2 <__aeabi_fsub+0x102>
 8000a3a:	e787      	b.n	800094c <__aeabi_fsub+0x18c>
 8000a3c:	000a      	movs	r2, r1
 8000a3e:	24ff      	movs	r4, #255	; 0xff
 8000a40:	2300      	movs	r3, #0
 8000a42:	e716      	b.n	8000872 <__aeabi_fsub+0xb2>
 8000a44:	2c00      	cmp	r4, #0
 8000a46:	d115      	bne.n	8000a74 <__aeabi_fsub+0x2b4>
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d157      	bne.n	8000afc <__aeabi_fsub+0x33c>
 8000a4c:	28ff      	cmp	r0, #255	; 0xff
 8000a4e:	d1e6      	bne.n	8000a1e <__aeabi_fsub+0x25e>
 8000a50:	464b      	mov	r3, r9
 8000a52:	e77b      	b.n	800094c <__aeabi_fsub+0x18c>
 8000a54:	2c00      	cmp	r4, #0
 8000a56:	d120      	bne.n	8000a9a <__aeabi_fsub+0x2da>
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d057      	beq.n	8000b0c <__aeabi_fsub+0x34c>
 8000a5c:	4649      	mov	r1, r9
 8000a5e:	2900      	cmp	r1, #0
 8000a60:	d053      	beq.n	8000b0a <__aeabi_fsub+0x34a>
 8000a62:	444b      	add	r3, r9
 8000a64:	015a      	lsls	r2, r3, #5
 8000a66:	d568      	bpl.n	8000b3a <__aeabi_fsub+0x37a>
 8000a68:	2407      	movs	r4, #7
 8000a6a:	4a36      	ldr	r2, [pc, #216]	; (8000b44 <__aeabi_fsub+0x384>)
 8000a6c:	401c      	ands	r4, r3
 8000a6e:	2501      	movs	r5, #1
 8000a70:	4013      	ands	r3, r2
 8000a72:	e6ea      	b.n	800084a <__aeabi_fsub+0x8a>
 8000a74:	28ff      	cmp	r0, #255	; 0xff
 8000a76:	d0eb      	beq.n	8000a50 <__aeabi_fsub+0x290>
 8000a78:	2280      	movs	r2, #128	; 0x80
 8000a7a:	04d2      	lsls	r2, r2, #19
 8000a7c:	4276      	negs	r6, r6
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	2e1b      	cmp	r6, #27
 8000a82:	dc53      	bgt.n	8000b2c <__aeabi_fsub+0x36c>
 8000a84:	2520      	movs	r5, #32
 8000a86:	1bad      	subs	r5, r5, r6
 8000a88:	001a      	movs	r2, r3
 8000a8a:	40ab      	lsls	r3, r5
 8000a8c:	40f2      	lsrs	r2, r6
 8000a8e:	1e5c      	subs	r4, r3, #1
 8000a90:	41a3      	sbcs	r3, r4
 8000a92:	4313      	orrs	r3, r2
 8000a94:	444b      	add	r3, r9
 8000a96:	0005      	movs	r5, r0
 8000a98:	e721      	b.n	80008de <__aeabi_fsub+0x11e>
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0d8      	beq.n	8000a50 <__aeabi_fsub+0x290>
 8000a9e:	4649      	mov	r1, r9
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_fsub+0x2e6>
 8000aa4:	e752      	b.n	800094c <__aeabi_fsub+0x18c>
 8000aa6:	2180      	movs	r1, #128	; 0x80
 8000aa8:	03c9      	lsls	r1, r1, #15
 8000aaa:	420f      	tst	r7, r1
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_fsub+0x2f0>
 8000aae:	e74d      	b.n	800094c <__aeabi_fsub+0x18c>
 8000ab0:	4660      	mov	r0, ip
 8000ab2:	4208      	tst	r0, r1
 8000ab4:	d000      	beq.n	8000ab8 <__aeabi_fsub+0x2f8>
 8000ab6:	e749      	b.n	800094c <__aeabi_fsub+0x18c>
 8000ab8:	464b      	mov	r3, r9
 8000aba:	e747      	b.n	800094c <__aeabi_fsub+0x18c>
 8000abc:	4648      	mov	r0, r9
 8000abe:	25ff      	movs	r5, #255	; 0xff
 8000ac0:	2800      	cmp	r0, #0
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_fsub+0x306>
 8000ac4:	e74f      	b.n	8000966 <__aeabi_fsub+0x1a6>
 8000ac6:	2280      	movs	r2, #128	; 0x80
 8000ac8:	03d2      	lsls	r2, r2, #15
 8000aca:	4217      	tst	r7, r2
 8000acc:	d004      	beq.n	8000ad8 <__aeabi_fsub+0x318>
 8000ace:	4660      	mov	r0, ip
 8000ad0:	4210      	tst	r0, r2
 8000ad2:	d101      	bne.n	8000ad8 <__aeabi_fsub+0x318>
 8000ad4:	464b      	mov	r3, r9
 8000ad6:	4688      	mov	r8, r1
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4641      	mov	r1, r8
 8000adc:	25ff      	movs	r5, #255	; 0xff
 8000ade:	400a      	ands	r2, r1
 8000ae0:	e741      	b.n	8000966 <__aeabi_fsub+0x1a6>
 8000ae2:	4648      	mov	r0, r9
 8000ae4:	2800      	cmp	r0, #0
 8000ae6:	d01f      	beq.n	8000b28 <__aeabi_fsub+0x368>
 8000ae8:	1a1a      	subs	r2, r3, r0
 8000aea:	0150      	lsls	r0, r2, #5
 8000aec:	d520      	bpl.n	8000b30 <__aeabi_fsub+0x370>
 8000aee:	464a      	mov	r2, r9
 8000af0:	2407      	movs	r4, #7
 8000af2:	1ad3      	subs	r3, r2, r3
 8000af4:	401c      	ands	r4, r3
 8000af6:	4688      	mov	r8, r1
 8000af8:	2500      	movs	r5, #0
 8000afa:	e6a6      	b.n	800084a <__aeabi_fsub+0x8a>
 8000afc:	1c74      	adds	r4, r6, #1
 8000afe:	d0c9      	beq.n	8000a94 <__aeabi_fsub+0x2d4>
 8000b00:	43f6      	mvns	r6, r6
 8000b02:	28ff      	cmp	r0, #255	; 0xff
 8000b04:	d1bc      	bne.n	8000a80 <__aeabi_fsub+0x2c0>
 8000b06:	464b      	mov	r3, r9
 8000b08:	e720      	b.n	800094c <__aeabi_fsub+0x18c>
 8000b0a:	4699      	mov	r9, r3
 8000b0c:	464b      	mov	r3, r9
 8000b0e:	2500      	movs	r5, #0
 8000b10:	08db      	lsrs	r3, r3, #3
 8000b12:	e72b      	b.n	800096c <__aeabi_fsub+0x1ac>
 8000b14:	2301      	movs	r3, #1
 8000b16:	e740      	b.n	800099a <__aeabi_fsub+0x1da>
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e6a9      	b.n	8000872 <__aeabi_fsub+0xb2>
 8000b1e:	2380      	movs	r3, #128	; 0x80
 8000b20:	2200      	movs	r2, #0
 8000b22:	03db      	lsls	r3, r3, #15
 8000b24:	24ff      	movs	r4, #255	; 0xff
 8000b26:	e6a4      	b.n	8000872 <__aeabi_fsub+0xb2>
 8000b28:	2500      	movs	r5, #0
 8000b2a:	e71c      	b.n	8000966 <__aeabi_fsub+0x1a6>
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e7b1      	b.n	8000a94 <__aeabi_fsub+0x2d4>
 8000b30:	2a00      	cmp	r2, #0
 8000b32:	d0f1      	beq.n	8000b18 <__aeabi_fsub+0x358>
 8000b34:	0013      	movs	r3, r2
 8000b36:	2500      	movs	r5, #0
 8000b38:	e6fc      	b.n	8000934 <__aeabi_fsub+0x174>
 8000b3a:	2500      	movs	r5, #0
 8000b3c:	e6fa      	b.n	8000934 <__aeabi_fsub+0x174>
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	7dffffff 	.word	0x7dffffff
 8000b44:	fbffffff 	.word	0xfbffffff

08000b48 <__aeabi_f2iz>:
 8000b48:	0241      	lsls	r1, r0, #9
 8000b4a:	0042      	lsls	r2, r0, #1
 8000b4c:	0fc3      	lsrs	r3, r0, #31
 8000b4e:	0a49      	lsrs	r1, r1, #9
 8000b50:	0e12      	lsrs	r2, r2, #24
 8000b52:	2000      	movs	r0, #0
 8000b54:	2a7e      	cmp	r2, #126	; 0x7e
 8000b56:	d90d      	bls.n	8000b74 <__aeabi_f2iz+0x2c>
 8000b58:	2a9d      	cmp	r2, #157	; 0x9d
 8000b5a:	d80c      	bhi.n	8000b76 <__aeabi_f2iz+0x2e>
 8000b5c:	2080      	movs	r0, #128	; 0x80
 8000b5e:	0400      	lsls	r0, r0, #16
 8000b60:	4301      	orrs	r1, r0
 8000b62:	2a95      	cmp	r2, #149	; 0x95
 8000b64:	dc0a      	bgt.n	8000b7c <__aeabi_f2iz+0x34>
 8000b66:	2096      	movs	r0, #150	; 0x96
 8000b68:	1a82      	subs	r2, r0, r2
 8000b6a:	40d1      	lsrs	r1, r2
 8000b6c:	4248      	negs	r0, r1
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d100      	bne.n	8000b74 <__aeabi_f2iz+0x2c>
 8000b72:	0008      	movs	r0, r1
 8000b74:	4770      	bx	lr
 8000b76:	4a03      	ldr	r2, [pc, #12]	; (8000b84 <__aeabi_f2iz+0x3c>)
 8000b78:	1898      	adds	r0, r3, r2
 8000b7a:	e7fb      	b.n	8000b74 <__aeabi_f2iz+0x2c>
 8000b7c:	3a96      	subs	r2, #150	; 0x96
 8000b7e:	4091      	lsls	r1, r2
 8000b80:	e7f4      	b.n	8000b6c <__aeabi_f2iz+0x24>
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	7fffffff 	.word	0x7fffffff

08000b88 <__aeabi_dmul>:
 8000b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b8a:	4657      	mov	r7, sl
 8000b8c:	46de      	mov	lr, fp
 8000b8e:	464e      	mov	r6, r9
 8000b90:	4645      	mov	r5, r8
 8000b92:	b5e0      	push	{r5, r6, r7, lr}
 8000b94:	4683      	mov	fp, r0
 8000b96:	0006      	movs	r6, r0
 8000b98:	030f      	lsls	r7, r1, #12
 8000b9a:	0048      	lsls	r0, r1, #1
 8000b9c:	b087      	sub	sp, #28
 8000b9e:	4692      	mov	sl, r2
 8000ba0:	001d      	movs	r5, r3
 8000ba2:	0b3f      	lsrs	r7, r7, #12
 8000ba4:	0d40      	lsrs	r0, r0, #21
 8000ba6:	0fcc      	lsrs	r4, r1, #31
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	d100      	bne.n	8000bae <__aeabi_dmul+0x26>
 8000bac:	e06f      	b.n	8000c8e <__aeabi_dmul+0x106>
 8000bae:	4bde      	ldr	r3, [pc, #888]	; (8000f28 <__aeabi_dmul+0x3a0>)
 8000bb0:	4298      	cmp	r0, r3
 8000bb2:	d038      	beq.n	8000c26 <__aeabi_dmul+0x9e>
 8000bb4:	2380      	movs	r3, #128	; 0x80
 8000bb6:	00ff      	lsls	r7, r7, #3
 8000bb8:	041b      	lsls	r3, r3, #16
 8000bba:	431f      	orrs	r7, r3
 8000bbc:	0f73      	lsrs	r3, r6, #29
 8000bbe:	433b      	orrs	r3, r7
 8000bc0:	9301      	str	r3, [sp, #4]
 8000bc2:	4bda      	ldr	r3, [pc, #872]	; (8000f2c <__aeabi_dmul+0x3a4>)
 8000bc4:	2700      	movs	r7, #0
 8000bc6:	4699      	mov	r9, r3
 8000bc8:	2300      	movs	r3, #0
 8000bca:	469b      	mov	fp, r3
 8000bcc:	00f6      	lsls	r6, r6, #3
 8000bce:	4481      	add	r9, r0
 8000bd0:	032b      	lsls	r3, r5, #12
 8000bd2:	0069      	lsls	r1, r5, #1
 8000bd4:	0b1b      	lsrs	r3, r3, #12
 8000bd6:	4652      	mov	r2, sl
 8000bd8:	4698      	mov	r8, r3
 8000bda:	0d49      	lsrs	r1, r1, #21
 8000bdc:	0fed      	lsrs	r5, r5, #31
 8000bde:	2900      	cmp	r1, #0
 8000be0:	d100      	bne.n	8000be4 <__aeabi_dmul+0x5c>
 8000be2:	e085      	b.n	8000cf0 <__aeabi_dmul+0x168>
 8000be4:	4bd0      	ldr	r3, [pc, #832]	; (8000f28 <__aeabi_dmul+0x3a0>)
 8000be6:	4299      	cmp	r1, r3
 8000be8:	d100      	bne.n	8000bec <__aeabi_dmul+0x64>
 8000bea:	e073      	b.n	8000cd4 <__aeabi_dmul+0x14c>
 8000bec:	4643      	mov	r3, r8
 8000bee:	00da      	lsls	r2, r3, #3
 8000bf0:	2380      	movs	r3, #128	; 0x80
 8000bf2:	041b      	lsls	r3, r3, #16
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	4652      	mov	r2, sl
 8000bf8:	48cc      	ldr	r0, [pc, #816]	; (8000f2c <__aeabi_dmul+0x3a4>)
 8000bfa:	0f52      	lsrs	r2, r2, #29
 8000bfc:	4684      	mov	ip, r0
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	4652      	mov	r2, sl
 8000c02:	2000      	movs	r0, #0
 8000c04:	4461      	add	r1, ip
 8000c06:	00d2      	lsls	r2, r2, #3
 8000c08:	4489      	add	r9, r1
 8000c0a:	0021      	movs	r1, r4
 8000c0c:	4069      	eors	r1, r5
 8000c0e:	9100      	str	r1, [sp, #0]
 8000c10:	468c      	mov	ip, r1
 8000c12:	2101      	movs	r1, #1
 8000c14:	4449      	add	r1, r9
 8000c16:	468a      	mov	sl, r1
 8000c18:	2f0f      	cmp	r7, #15
 8000c1a:	d900      	bls.n	8000c1e <__aeabi_dmul+0x96>
 8000c1c:	e090      	b.n	8000d40 <__aeabi_dmul+0x1b8>
 8000c1e:	49c4      	ldr	r1, [pc, #784]	; (8000f30 <__aeabi_dmul+0x3a8>)
 8000c20:	00bf      	lsls	r7, r7, #2
 8000c22:	59cf      	ldr	r7, [r1, r7]
 8000c24:	46bf      	mov	pc, r7
 8000c26:	465b      	mov	r3, fp
 8000c28:	433b      	orrs	r3, r7
 8000c2a:	9301      	str	r3, [sp, #4]
 8000c2c:	d000      	beq.n	8000c30 <__aeabi_dmul+0xa8>
 8000c2e:	e16a      	b.n	8000f06 <__aeabi_dmul+0x37e>
 8000c30:	2302      	movs	r3, #2
 8000c32:	2708      	movs	r7, #8
 8000c34:	2600      	movs	r6, #0
 8000c36:	4681      	mov	r9, r0
 8000c38:	469b      	mov	fp, r3
 8000c3a:	e7c9      	b.n	8000bd0 <__aeabi_dmul+0x48>
 8000c3c:	0032      	movs	r2, r6
 8000c3e:	4658      	mov	r0, fp
 8000c40:	9b01      	ldr	r3, [sp, #4]
 8000c42:	4661      	mov	r1, ip
 8000c44:	9100      	str	r1, [sp, #0]
 8000c46:	2802      	cmp	r0, #2
 8000c48:	d100      	bne.n	8000c4c <__aeabi_dmul+0xc4>
 8000c4a:	e075      	b.n	8000d38 <__aeabi_dmul+0x1b0>
 8000c4c:	2803      	cmp	r0, #3
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_dmul+0xca>
 8000c50:	e1fe      	b.n	8001050 <__aeabi_dmul+0x4c8>
 8000c52:	2801      	cmp	r0, #1
 8000c54:	d000      	beq.n	8000c58 <__aeabi_dmul+0xd0>
 8000c56:	e12c      	b.n	8000eb2 <__aeabi_dmul+0x32a>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	2700      	movs	r7, #0
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	2500      	movs	r5, #0
 8000c60:	033f      	lsls	r7, r7, #12
 8000c62:	0d2a      	lsrs	r2, r5, #20
 8000c64:	0b3f      	lsrs	r7, r7, #12
 8000c66:	48b3      	ldr	r0, [pc, #716]	; (8000f34 <__aeabi_dmul+0x3ac>)
 8000c68:	0512      	lsls	r2, r2, #20
 8000c6a:	433a      	orrs	r2, r7
 8000c6c:	4002      	ands	r2, r0
 8000c6e:	051b      	lsls	r3, r3, #20
 8000c70:	4313      	orrs	r3, r2
 8000c72:	9a00      	ldr	r2, [sp, #0]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	07d1      	lsls	r1, r2, #31
 8000c78:	085b      	lsrs	r3, r3, #1
 8000c7a:	430b      	orrs	r3, r1
 8000c7c:	0030      	movs	r0, r6
 8000c7e:	0019      	movs	r1, r3
 8000c80:	b007      	add	sp, #28
 8000c82:	bc3c      	pop	{r2, r3, r4, r5}
 8000c84:	4690      	mov	r8, r2
 8000c86:	4699      	mov	r9, r3
 8000c88:	46a2      	mov	sl, r4
 8000c8a:	46ab      	mov	fp, r5
 8000c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c8e:	465b      	mov	r3, fp
 8000c90:	433b      	orrs	r3, r7
 8000c92:	9301      	str	r3, [sp, #4]
 8000c94:	d100      	bne.n	8000c98 <__aeabi_dmul+0x110>
 8000c96:	e12f      	b.n	8000ef8 <__aeabi_dmul+0x370>
 8000c98:	2f00      	cmp	r7, #0
 8000c9a:	d100      	bne.n	8000c9e <__aeabi_dmul+0x116>
 8000c9c:	e1a5      	b.n	8000fea <__aeabi_dmul+0x462>
 8000c9e:	0038      	movs	r0, r7
 8000ca0:	f000 fe90 	bl	80019c4 <__clzsi2>
 8000ca4:	0003      	movs	r3, r0
 8000ca6:	3b0b      	subs	r3, #11
 8000ca8:	2b1c      	cmp	r3, #28
 8000caa:	dd00      	ble.n	8000cae <__aeabi_dmul+0x126>
 8000cac:	e196      	b.n	8000fdc <__aeabi_dmul+0x454>
 8000cae:	221d      	movs	r2, #29
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	465a      	mov	r2, fp
 8000cb4:	0001      	movs	r1, r0
 8000cb6:	40da      	lsrs	r2, r3
 8000cb8:	465e      	mov	r6, fp
 8000cba:	3908      	subs	r1, #8
 8000cbc:	408f      	lsls	r7, r1
 8000cbe:	0013      	movs	r3, r2
 8000cc0:	408e      	lsls	r6, r1
 8000cc2:	433b      	orrs	r3, r7
 8000cc4:	9301      	str	r3, [sp, #4]
 8000cc6:	4b9c      	ldr	r3, [pc, #624]	; (8000f38 <__aeabi_dmul+0x3b0>)
 8000cc8:	2700      	movs	r7, #0
 8000cca:	1a1b      	subs	r3, r3, r0
 8000ccc:	4699      	mov	r9, r3
 8000cce:	2300      	movs	r3, #0
 8000cd0:	469b      	mov	fp, r3
 8000cd2:	e77d      	b.n	8000bd0 <__aeabi_dmul+0x48>
 8000cd4:	4641      	mov	r1, r8
 8000cd6:	4653      	mov	r3, sl
 8000cd8:	430b      	orrs	r3, r1
 8000cda:	4993      	ldr	r1, [pc, #588]	; (8000f28 <__aeabi_dmul+0x3a0>)
 8000cdc:	468c      	mov	ip, r1
 8000cde:	44e1      	add	r9, ip
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d000      	beq.n	8000ce6 <__aeabi_dmul+0x15e>
 8000ce4:	e11a      	b.n	8000f1c <__aeabi_dmul+0x394>
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	2002      	movs	r0, #2
 8000cea:	4317      	orrs	r7, r2
 8000cec:	2200      	movs	r2, #0
 8000cee:	e78c      	b.n	8000c0a <__aeabi_dmul+0x82>
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_dmul+0x16e>
 8000cf4:	e10d      	b.n	8000f12 <__aeabi_dmul+0x38a>
 8000cf6:	4643      	mov	r3, r8
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d100      	bne.n	8000cfe <__aeabi_dmul+0x176>
 8000cfc:	e181      	b.n	8001002 <__aeabi_dmul+0x47a>
 8000cfe:	4640      	mov	r0, r8
 8000d00:	f000 fe60 	bl	80019c4 <__clzsi2>
 8000d04:	0002      	movs	r2, r0
 8000d06:	3a0b      	subs	r2, #11
 8000d08:	2a1c      	cmp	r2, #28
 8000d0a:	dd00      	ble.n	8000d0e <__aeabi_dmul+0x186>
 8000d0c:	e172      	b.n	8000ff4 <__aeabi_dmul+0x46c>
 8000d0e:	0001      	movs	r1, r0
 8000d10:	4643      	mov	r3, r8
 8000d12:	3908      	subs	r1, #8
 8000d14:	408b      	lsls	r3, r1
 8000d16:	4698      	mov	r8, r3
 8000d18:	231d      	movs	r3, #29
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	4653      	mov	r3, sl
 8000d1e:	40d3      	lsrs	r3, r2
 8000d20:	001a      	movs	r2, r3
 8000d22:	4643      	mov	r3, r8
 8000d24:	4313      	orrs	r3, r2
 8000d26:	4652      	mov	r2, sl
 8000d28:	408a      	lsls	r2, r1
 8000d2a:	4649      	mov	r1, r9
 8000d2c:	1a08      	subs	r0, r1, r0
 8000d2e:	4982      	ldr	r1, [pc, #520]	; (8000f38 <__aeabi_dmul+0x3b0>)
 8000d30:	4689      	mov	r9, r1
 8000d32:	4481      	add	r9, r0
 8000d34:	2000      	movs	r0, #0
 8000d36:	e768      	b.n	8000c0a <__aeabi_dmul+0x82>
 8000d38:	4b7b      	ldr	r3, [pc, #492]	; (8000f28 <__aeabi_dmul+0x3a0>)
 8000d3a:	2700      	movs	r7, #0
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e78e      	b.n	8000c5e <__aeabi_dmul+0xd6>
 8000d40:	0c14      	lsrs	r4, r2, #16
 8000d42:	0412      	lsls	r2, r2, #16
 8000d44:	0c12      	lsrs	r2, r2, #16
 8000d46:	0011      	movs	r1, r2
 8000d48:	0c37      	lsrs	r7, r6, #16
 8000d4a:	0436      	lsls	r6, r6, #16
 8000d4c:	0c35      	lsrs	r5, r6, #16
 8000d4e:	4379      	muls	r1, r7
 8000d50:	0028      	movs	r0, r5
 8000d52:	468c      	mov	ip, r1
 8000d54:	002e      	movs	r6, r5
 8000d56:	4360      	muls	r0, r4
 8000d58:	4460      	add	r0, ip
 8000d5a:	4683      	mov	fp, r0
 8000d5c:	4356      	muls	r6, r2
 8000d5e:	0021      	movs	r1, r4
 8000d60:	0c30      	lsrs	r0, r6, #16
 8000d62:	4680      	mov	r8, r0
 8000d64:	4658      	mov	r0, fp
 8000d66:	4379      	muls	r1, r7
 8000d68:	4440      	add	r0, r8
 8000d6a:	9102      	str	r1, [sp, #8]
 8000d6c:	4584      	cmp	ip, r0
 8000d6e:	d906      	bls.n	8000d7e <__aeabi_dmul+0x1f6>
 8000d70:	4688      	mov	r8, r1
 8000d72:	2180      	movs	r1, #128	; 0x80
 8000d74:	0249      	lsls	r1, r1, #9
 8000d76:	468c      	mov	ip, r1
 8000d78:	44e0      	add	r8, ip
 8000d7a:	4641      	mov	r1, r8
 8000d7c:	9102      	str	r1, [sp, #8]
 8000d7e:	0436      	lsls	r6, r6, #16
 8000d80:	0c01      	lsrs	r1, r0, #16
 8000d82:	0c36      	lsrs	r6, r6, #16
 8000d84:	0400      	lsls	r0, r0, #16
 8000d86:	468b      	mov	fp, r1
 8000d88:	1981      	adds	r1, r0, r6
 8000d8a:	0c1e      	lsrs	r6, r3, #16
 8000d8c:	041b      	lsls	r3, r3, #16
 8000d8e:	0c1b      	lsrs	r3, r3, #16
 8000d90:	9103      	str	r1, [sp, #12]
 8000d92:	0019      	movs	r1, r3
 8000d94:	4379      	muls	r1, r7
 8000d96:	468c      	mov	ip, r1
 8000d98:	0028      	movs	r0, r5
 8000d9a:	4375      	muls	r5, r6
 8000d9c:	4465      	add	r5, ip
 8000d9e:	46a8      	mov	r8, r5
 8000da0:	4358      	muls	r0, r3
 8000da2:	0c05      	lsrs	r5, r0, #16
 8000da4:	4445      	add	r5, r8
 8000da6:	4377      	muls	r7, r6
 8000da8:	42a9      	cmp	r1, r5
 8000daa:	d903      	bls.n	8000db4 <__aeabi_dmul+0x22c>
 8000dac:	2180      	movs	r1, #128	; 0x80
 8000dae:	0249      	lsls	r1, r1, #9
 8000db0:	468c      	mov	ip, r1
 8000db2:	4467      	add	r7, ip
 8000db4:	0c29      	lsrs	r1, r5, #16
 8000db6:	468c      	mov	ip, r1
 8000db8:	0039      	movs	r1, r7
 8000dba:	0400      	lsls	r0, r0, #16
 8000dbc:	0c00      	lsrs	r0, r0, #16
 8000dbe:	042d      	lsls	r5, r5, #16
 8000dc0:	182d      	adds	r5, r5, r0
 8000dc2:	4461      	add	r1, ip
 8000dc4:	44ab      	add	fp, r5
 8000dc6:	9105      	str	r1, [sp, #20]
 8000dc8:	4659      	mov	r1, fp
 8000dca:	9104      	str	r1, [sp, #16]
 8000dcc:	9901      	ldr	r1, [sp, #4]
 8000dce:	040f      	lsls	r7, r1, #16
 8000dd0:	0c3f      	lsrs	r7, r7, #16
 8000dd2:	0c08      	lsrs	r0, r1, #16
 8000dd4:	0039      	movs	r1, r7
 8000dd6:	4351      	muls	r1, r2
 8000dd8:	4342      	muls	r2, r0
 8000dda:	4690      	mov	r8, r2
 8000ddc:	0002      	movs	r2, r0
 8000dde:	468c      	mov	ip, r1
 8000de0:	0c09      	lsrs	r1, r1, #16
 8000de2:	468b      	mov	fp, r1
 8000de4:	4362      	muls	r2, r4
 8000de6:	437c      	muls	r4, r7
 8000de8:	4444      	add	r4, r8
 8000dea:	445c      	add	r4, fp
 8000dec:	45a0      	cmp	r8, r4
 8000dee:	d903      	bls.n	8000df8 <__aeabi_dmul+0x270>
 8000df0:	2180      	movs	r1, #128	; 0x80
 8000df2:	0249      	lsls	r1, r1, #9
 8000df4:	4688      	mov	r8, r1
 8000df6:	4442      	add	r2, r8
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	4688      	mov	r8, r1
 8000dfc:	4661      	mov	r1, ip
 8000dfe:	0409      	lsls	r1, r1, #16
 8000e00:	0c09      	lsrs	r1, r1, #16
 8000e02:	468c      	mov	ip, r1
 8000e04:	0039      	movs	r1, r7
 8000e06:	4359      	muls	r1, r3
 8000e08:	4343      	muls	r3, r0
 8000e0a:	4370      	muls	r0, r6
 8000e0c:	437e      	muls	r6, r7
 8000e0e:	0c0f      	lsrs	r7, r1, #16
 8000e10:	18f6      	adds	r6, r6, r3
 8000e12:	0424      	lsls	r4, r4, #16
 8000e14:	19be      	adds	r6, r7, r6
 8000e16:	4464      	add	r4, ip
 8000e18:	4442      	add	r2, r8
 8000e1a:	468c      	mov	ip, r1
 8000e1c:	42b3      	cmp	r3, r6
 8000e1e:	d903      	bls.n	8000e28 <__aeabi_dmul+0x2a0>
 8000e20:	2380      	movs	r3, #128	; 0x80
 8000e22:	025b      	lsls	r3, r3, #9
 8000e24:	4698      	mov	r8, r3
 8000e26:	4440      	add	r0, r8
 8000e28:	9b02      	ldr	r3, [sp, #8]
 8000e2a:	4661      	mov	r1, ip
 8000e2c:	4698      	mov	r8, r3
 8000e2e:	9b04      	ldr	r3, [sp, #16]
 8000e30:	0437      	lsls	r7, r6, #16
 8000e32:	4443      	add	r3, r8
 8000e34:	469b      	mov	fp, r3
 8000e36:	45ab      	cmp	fp, r5
 8000e38:	41ad      	sbcs	r5, r5
 8000e3a:	426b      	negs	r3, r5
 8000e3c:	040d      	lsls	r5, r1, #16
 8000e3e:	9905      	ldr	r1, [sp, #20]
 8000e40:	0c2d      	lsrs	r5, r5, #16
 8000e42:	468c      	mov	ip, r1
 8000e44:	197f      	adds	r7, r7, r5
 8000e46:	4467      	add	r7, ip
 8000e48:	18fd      	adds	r5, r7, r3
 8000e4a:	46a8      	mov	r8, r5
 8000e4c:	465d      	mov	r5, fp
 8000e4e:	192d      	adds	r5, r5, r4
 8000e50:	42a5      	cmp	r5, r4
 8000e52:	41a4      	sbcs	r4, r4
 8000e54:	4693      	mov	fp, r2
 8000e56:	4264      	negs	r4, r4
 8000e58:	46a4      	mov	ip, r4
 8000e5a:	44c3      	add	fp, r8
 8000e5c:	44dc      	add	ip, fp
 8000e5e:	428f      	cmp	r7, r1
 8000e60:	41bf      	sbcs	r7, r7
 8000e62:	4598      	cmp	r8, r3
 8000e64:	419b      	sbcs	r3, r3
 8000e66:	4593      	cmp	fp, r2
 8000e68:	4192      	sbcs	r2, r2
 8000e6a:	45a4      	cmp	ip, r4
 8000e6c:	41a4      	sbcs	r4, r4
 8000e6e:	425b      	negs	r3, r3
 8000e70:	427f      	negs	r7, r7
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c36      	lsrs	r6, r6, #16
 8000e76:	4252      	negs	r2, r2
 8000e78:	4264      	negs	r4, r4
 8000e7a:	19bf      	adds	r7, r7, r6
 8000e7c:	4322      	orrs	r2, r4
 8000e7e:	18bf      	adds	r7, r7, r2
 8000e80:	4662      	mov	r2, ip
 8000e82:	1838      	adds	r0, r7, r0
 8000e84:	0243      	lsls	r3, r0, #9
 8000e86:	0dd2      	lsrs	r2, r2, #23
 8000e88:	9903      	ldr	r1, [sp, #12]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	026a      	lsls	r2, r5, #9
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	1e50      	subs	r0, r2, #1
 8000e92:	4182      	sbcs	r2, r0
 8000e94:	4661      	mov	r1, ip
 8000e96:	0ded      	lsrs	r5, r5, #23
 8000e98:	432a      	orrs	r2, r5
 8000e9a:	024e      	lsls	r6, r1, #9
 8000e9c:	4332      	orrs	r2, r6
 8000e9e:	01d9      	lsls	r1, r3, #7
 8000ea0:	d400      	bmi.n	8000ea4 <__aeabi_dmul+0x31c>
 8000ea2:	e0b3      	b.n	800100c <__aeabi_dmul+0x484>
 8000ea4:	2601      	movs	r6, #1
 8000ea6:	0850      	lsrs	r0, r2, #1
 8000ea8:	4032      	ands	r2, r6
 8000eaa:	4302      	orrs	r2, r0
 8000eac:	07de      	lsls	r6, r3, #31
 8000eae:	4332      	orrs	r2, r6
 8000eb0:	085b      	lsrs	r3, r3, #1
 8000eb2:	4c22      	ldr	r4, [pc, #136]	; (8000f3c <__aeabi_dmul+0x3b4>)
 8000eb4:	4454      	add	r4, sl
 8000eb6:	2c00      	cmp	r4, #0
 8000eb8:	dd62      	ble.n	8000f80 <__aeabi_dmul+0x3f8>
 8000eba:	0751      	lsls	r1, r2, #29
 8000ebc:	d009      	beq.n	8000ed2 <__aeabi_dmul+0x34a>
 8000ebe:	200f      	movs	r0, #15
 8000ec0:	4010      	ands	r0, r2
 8000ec2:	2804      	cmp	r0, #4
 8000ec4:	d005      	beq.n	8000ed2 <__aeabi_dmul+0x34a>
 8000ec6:	1d10      	adds	r0, r2, #4
 8000ec8:	4290      	cmp	r0, r2
 8000eca:	4192      	sbcs	r2, r2
 8000ecc:	4252      	negs	r2, r2
 8000ece:	189b      	adds	r3, r3, r2
 8000ed0:	0002      	movs	r2, r0
 8000ed2:	01d9      	lsls	r1, r3, #7
 8000ed4:	d504      	bpl.n	8000ee0 <__aeabi_dmul+0x358>
 8000ed6:	2480      	movs	r4, #128	; 0x80
 8000ed8:	4819      	ldr	r0, [pc, #100]	; (8000f40 <__aeabi_dmul+0x3b8>)
 8000eda:	00e4      	lsls	r4, r4, #3
 8000edc:	4003      	ands	r3, r0
 8000ede:	4454      	add	r4, sl
 8000ee0:	4818      	ldr	r0, [pc, #96]	; (8000f44 <__aeabi_dmul+0x3bc>)
 8000ee2:	4284      	cmp	r4, r0
 8000ee4:	dd00      	ble.n	8000ee8 <__aeabi_dmul+0x360>
 8000ee6:	e727      	b.n	8000d38 <__aeabi_dmul+0x1b0>
 8000ee8:	075e      	lsls	r6, r3, #29
 8000eea:	025b      	lsls	r3, r3, #9
 8000eec:	08d2      	lsrs	r2, r2, #3
 8000eee:	0b1f      	lsrs	r7, r3, #12
 8000ef0:	0563      	lsls	r3, r4, #21
 8000ef2:	4316      	orrs	r6, r2
 8000ef4:	0d5b      	lsrs	r3, r3, #21
 8000ef6:	e6b2      	b.n	8000c5e <__aeabi_dmul+0xd6>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	4699      	mov	r9, r3
 8000efc:	3301      	adds	r3, #1
 8000efe:	2704      	movs	r7, #4
 8000f00:	2600      	movs	r6, #0
 8000f02:	469b      	mov	fp, r3
 8000f04:	e664      	b.n	8000bd0 <__aeabi_dmul+0x48>
 8000f06:	2303      	movs	r3, #3
 8000f08:	9701      	str	r7, [sp, #4]
 8000f0a:	4681      	mov	r9, r0
 8000f0c:	270c      	movs	r7, #12
 8000f0e:	469b      	mov	fp, r3
 8000f10:	e65e      	b.n	8000bd0 <__aeabi_dmul+0x48>
 8000f12:	2201      	movs	r2, #1
 8000f14:	2001      	movs	r0, #1
 8000f16:	4317      	orrs	r7, r2
 8000f18:	2200      	movs	r2, #0
 8000f1a:	e676      	b.n	8000c0a <__aeabi_dmul+0x82>
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	2003      	movs	r0, #3
 8000f20:	431f      	orrs	r7, r3
 8000f22:	4643      	mov	r3, r8
 8000f24:	e671      	b.n	8000c0a <__aeabi_dmul+0x82>
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	000007ff 	.word	0x000007ff
 8000f2c:	fffffc01 	.word	0xfffffc01
 8000f30:	08007750 	.word	0x08007750
 8000f34:	800fffff 	.word	0x800fffff
 8000f38:	fffffc0d 	.word	0xfffffc0d
 8000f3c:	000003ff 	.word	0x000003ff
 8000f40:	feffffff 	.word	0xfeffffff
 8000f44:	000007fe 	.word	0x000007fe
 8000f48:	2300      	movs	r3, #0
 8000f4a:	2780      	movs	r7, #128	; 0x80
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	033f      	lsls	r7, r7, #12
 8000f50:	2600      	movs	r6, #0
 8000f52:	4b43      	ldr	r3, [pc, #268]	; (8001060 <__aeabi_dmul+0x4d8>)
 8000f54:	e683      	b.n	8000c5e <__aeabi_dmul+0xd6>
 8000f56:	9b01      	ldr	r3, [sp, #4]
 8000f58:	0032      	movs	r2, r6
 8000f5a:	46a4      	mov	ip, r4
 8000f5c:	4658      	mov	r0, fp
 8000f5e:	e670      	b.n	8000c42 <__aeabi_dmul+0xba>
 8000f60:	46ac      	mov	ip, r5
 8000f62:	e66e      	b.n	8000c42 <__aeabi_dmul+0xba>
 8000f64:	2780      	movs	r7, #128	; 0x80
 8000f66:	9901      	ldr	r1, [sp, #4]
 8000f68:	033f      	lsls	r7, r7, #12
 8000f6a:	4239      	tst	r1, r7
 8000f6c:	d02d      	beq.n	8000fca <__aeabi_dmul+0x442>
 8000f6e:	423b      	tst	r3, r7
 8000f70:	d12b      	bne.n	8000fca <__aeabi_dmul+0x442>
 8000f72:	431f      	orrs	r7, r3
 8000f74:	033f      	lsls	r7, r7, #12
 8000f76:	0b3f      	lsrs	r7, r7, #12
 8000f78:	9500      	str	r5, [sp, #0]
 8000f7a:	0016      	movs	r6, r2
 8000f7c:	4b38      	ldr	r3, [pc, #224]	; (8001060 <__aeabi_dmul+0x4d8>)
 8000f7e:	e66e      	b.n	8000c5e <__aeabi_dmul+0xd6>
 8000f80:	2501      	movs	r5, #1
 8000f82:	1b2d      	subs	r5, r5, r4
 8000f84:	2d38      	cmp	r5, #56	; 0x38
 8000f86:	dd00      	ble.n	8000f8a <__aeabi_dmul+0x402>
 8000f88:	e666      	b.n	8000c58 <__aeabi_dmul+0xd0>
 8000f8a:	2d1f      	cmp	r5, #31
 8000f8c:	dc40      	bgt.n	8001010 <__aeabi_dmul+0x488>
 8000f8e:	4835      	ldr	r0, [pc, #212]	; (8001064 <__aeabi_dmul+0x4dc>)
 8000f90:	001c      	movs	r4, r3
 8000f92:	4450      	add	r0, sl
 8000f94:	0016      	movs	r6, r2
 8000f96:	4082      	lsls	r2, r0
 8000f98:	4084      	lsls	r4, r0
 8000f9a:	40ee      	lsrs	r6, r5
 8000f9c:	1e50      	subs	r0, r2, #1
 8000f9e:	4182      	sbcs	r2, r0
 8000fa0:	4334      	orrs	r4, r6
 8000fa2:	4314      	orrs	r4, r2
 8000fa4:	40eb      	lsrs	r3, r5
 8000fa6:	0762      	lsls	r2, r4, #29
 8000fa8:	d009      	beq.n	8000fbe <__aeabi_dmul+0x436>
 8000faa:	220f      	movs	r2, #15
 8000fac:	4022      	ands	r2, r4
 8000fae:	2a04      	cmp	r2, #4
 8000fb0:	d005      	beq.n	8000fbe <__aeabi_dmul+0x436>
 8000fb2:	0022      	movs	r2, r4
 8000fb4:	1d14      	adds	r4, r2, #4
 8000fb6:	4294      	cmp	r4, r2
 8000fb8:	4180      	sbcs	r0, r0
 8000fba:	4240      	negs	r0, r0
 8000fbc:	181b      	adds	r3, r3, r0
 8000fbe:	021a      	lsls	r2, r3, #8
 8000fc0:	d53e      	bpl.n	8001040 <__aeabi_dmul+0x4b8>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	2700      	movs	r7, #0
 8000fc6:	2600      	movs	r6, #0
 8000fc8:	e649      	b.n	8000c5e <__aeabi_dmul+0xd6>
 8000fca:	2780      	movs	r7, #128	; 0x80
 8000fcc:	9b01      	ldr	r3, [sp, #4]
 8000fce:	033f      	lsls	r7, r7, #12
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	033f      	lsls	r7, r7, #12
 8000fd4:	0b3f      	lsrs	r7, r7, #12
 8000fd6:	9400      	str	r4, [sp, #0]
 8000fd8:	4b21      	ldr	r3, [pc, #132]	; (8001060 <__aeabi_dmul+0x4d8>)
 8000fda:	e640      	b.n	8000c5e <__aeabi_dmul+0xd6>
 8000fdc:	0003      	movs	r3, r0
 8000fde:	465a      	mov	r2, fp
 8000fe0:	3b28      	subs	r3, #40	; 0x28
 8000fe2:	409a      	lsls	r2, r3
 8000fe4:	2600      	movs	r6, #0
 8000fe6:	9201      	str	r2, [sp, #4]
 8000fe8:	e66d      	b.n	8000cc6 <__aeabi_dmul+0x13e>
 8000fea:	4658      	mov	r0, fp
 8000fec:	f000 fcea 	bl	80019c4 <__clzsi2>
 8000ff0:	3020      	adds	r0, #32
 8000ff2:	e657      	b.n	8000ca4 <__aeabi_dmul+0x11c>
 8000ff4:	0003      	movs	r3, r0
 8000ff6:	4652      	mov	r2, sl
 8000ff8:	3b28      	subs	r3, #40	; 0x28
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	0013      	movs	r3, r2
 8000ffe:	2200      	movs	r2, #0
 8001000:	e693      	b.n	8000d2a <__aeabi_dmul+0x1a2>
 8001002:	4650      	mov	r0, sl
 8001004:	f000 fcde 	bl	80019c4 <__clzsi2>
 8001008:	3020      	adds	r0, #32
 800100a:	e67b      	b.n	8000d04 <__aeabi_dmul+0x17c>
 800100c:	46ca      	mov	sl, r9
 800100e:	e750      	b.n	8000eb2 <__aeabi_dmul+0x32a>
 8001010:	201f      	movs	r0, #31
 8001012:	001e      	movs	r6, r3
 8001014:	4240      	negs	r0, r0
 8001016:	1b04      	subs	r4, r0, r4
 8001018:	40e6      	lsrs	r6, r4
 800101a:	2d20      	cmp	r5, #32
 800101c:	d003      	beq.n	8001026 <__aeabi_dmul+0x49e>
 800101e:	4c12      	ldr	r4, [pc, #72]	; (8001068 <__aeabi_dmul+0x4e0>)
 8001020:	4454      	add	r4, sl
 8001022:	40a3      	lsls	r3, r4
 8001024:	431a      	orrs	r2, r3
 8001026:	1e50      	subs	r0, r2, #1
 8001028:	4182      	sbcs	r2, r0
 800102a:	4332      	orrs	r2, r6
 800102c:	2607      	movs	r6, #7
 800102e:	2700      	movs	r7, #0
 8001030:	4016      	ands	r6, r2
 8001032:	d009      	beq.n	8001048 <__aeabi_dmul+0x4c0>
 8001034:	200f      	movs	r0, #15
 8001036:	2300      	movs	r3, #0
 8001038:	4010      	ands	r0, r2
 800103a:	0014      	movs	r4, r2
 800103c:	2804      	cmp	r0, #4
 800103e:	d1b9      	bne.n	8000fb4 <__aeabi_dmul+0x42c>
 8001040:	0022      	movs	r2, r4
 8001042:	075e      	lsls	r6, r3, #29
 8001044:	025b      	lsls	r3, r3, #9
 8001046:	0b1f      	lsrs	r7, r3, #12
 8001048:	08d2      	lsrs	r2, r2, #3
 800104a:	4316      	orrs	r6, r2
 800104c:	2300      	movs	r3, #0
 800104e:	e606      	b.n	8000c5e <__aeabi_dmul+0xd6>
 8001050:	2780      	movs	r7, #128	; 0x80
 8001052:	033f      	lsls	r7, r7, #12
 8001054:	431f      	orrs	r7, r3
 8001056:	033f      	lsls	r7, r7, #12
 8001058:	0b3f      	lsrs	r7, r7, #12
 800105a:	0016      	movs	r6, r2
 800105c:	4b00      	ldr	r3, [pc, #0]	; (8001060 <__aeabi_dmul+0x4d8>)
 800105e:	e5fe      	b.n	8000c5e <__aeabi_dmul+0xd6>
 8001060:	000007ff 	.word	0x000007ff
 8001064:	0000041e 	.word	0x0000041e
 8001068:	0000043e 	.word	0x0000043e

0800106c <__aeabi_dsub>:
 800106c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800106e:	4657      	mov	r7, sl
 8001070:	464e      	mov	r6, r9
 8001072:	4645      	mov	r5, r8
 8001074:	46de      	mov	lr, fp
 8001076:	000c      	movs	r4, r1
 8001078:	0309      	lsls	r1, r1, #12
 800107a:	b5e0      	push	{r5, r6, r7, lr}
 800107c:	0a49      	lsrs	r1, r1, #9
 800107e:	0f46      	lsrs	r6, r0, #29
 8001080:	005f      	lsls	r7, r3, #1
 8001082:	4331      	orrs	r1, r6
 8001084:	031e      	lsls	r6, r3, #12
 8001086:	0fdb      	lsrs	r3, r3, #31
 8001088:	0a76      	lsrs	r6, r6, #9
 800108a:	469b      	mov	fp, r3
 800108c:	0f53      	lsrs	r3, r2, #29
 800108e:	4333      	orrs	r3, r6
 8001090:	4ec8      	ldr	r6, [pc, #800]	; (80013b4 <__aeabi_dsub+0x348>)
 8001092:	0065      	lsls	r5, r4, #1
 8001094:	00c0      	lsls	r0, r0, #3
 8001096:	0fe4      	lsrs	r4, r4, #31
 8001098:	00d2      	lsls	r2, r2, #3
 800109a:	0d6d      	lsrs	r5, r5, #21
 800109c:	46a2      	mov	sl, r4
 800109e:	4681      	mov	r9, r0
 80010a0:	0d7f      	lsrs	r7, r7, #21
 80010a2:	469c      	mov	ip, r3
 80010a4:	4690      	mov	r8, r2
 80010a6:	42b7      	cmp	r7, r6
 80010a8:	d100      	bne.n	80010ac <__aeabi_dsub+0x40>
 80010aa:	e0b9      	b.n	8001220 <__aeabi_dsub+0x1b4>
 80010ac:	465b      	mov	r3, fp
 80010ae:	2601      	movs	r6, #1
 80010b0:	4073      	eors	r3, r6
 80010b2:	469b      	mov	fp, r3
 80010b4:	1bee      	subs	r6, r5, r7
 80010b6:	45a3      	cmp	fp, r4
 80010b8:	d100      	bne.n	80010bc <__aeabi_dsub+0x50>
 80010ba:	e083      	b.n	80011c4 <__aeabi_dsub+0x158>
 80010bc:	2e00      	cmp	r6, #0
 80010be:	dd63      	ble.n	8001188 <__aeabi_dsub+0x11c>
 80010c0:	2f00      	cmp	r7, #0
 80010c2:	d000      	beq.n	80010c6 <__aeabi_dsub+0x5a>
 80010c4:	e0b1      	b.n	800122a <__aeabi_dsub+0x1be>
 80010c6:	4663      	mov	r3, ip
 80010c8:	4313      	orrs	r3, r2
 80010ca:	d100      	bne.n	80010ce <__aeabi_dsub+0x62>
 80010cc:	e123      	b.n	8001316 <__aeabi_dsub+0x2aa>
 80010ce:	1e73      	subs	r3, r6, #1
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d000      	beq.n	80010d6 <__aeabi_dsub+0x6a>
 80010d4:	e1ba      	b.n	800144c <__aeabi_dsub+0x3e0>
 80010d6:	1a86      	subs	r6, r0, r2
 80010d8:	4663      	mov	r3, ip
 80010da:	42b0      	cmp	r0, r6
 80010dc:	4180      	sbcs	r0, r0
 80010de:	2501      	movs	r5, #1
 80010e0:	1ac9      	subs	r1, r1, r3
 80010e2:	4240      	negs	r0, r0
 80010e4:	1a09      	subs	r1, r1, r0
 80010e6:	020b      	lsls	r3, r1, #8
 80010e8:	d400      	bmi.n	80010ec <__aeabi_dsub+0x80>
 80010ea:	e147      	b.n	800137c <__aeabi_dsub+0x310>
 80010ec:	0249      	lsls	r1, r1, #9
 80010ee:	0a4b      	lsrs	r3, r1, #9
 80010f0:	4698      	mov	r8, r3
 80010f2:	4643      	mov	r3, r8
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d100      	bne.n	80010fa <__aeabi_dsub+0x8e>
 80010f8:	e189      	b.n	800140e <__aeabi_dsub+0x3a2>
 80010fa:	4640      	mov	r0, r8
 80010fc:	f000 fc62 	bl	80019c4 <__clzsi2>
 8001100:	0003      	movs	r3, r0
 8001102:	3b08      	subs	r3, #8
 8001104:	2b1f      	cmp	r3, #31
 8001106:	dd00      	ble.n	800110a <__aeabi_dsub+0x9e>
 8001108:	e17c      	b.n	8001404 <__aeabi_dsub+0x398>
 800110a:	2220      	movs	r2, #32
 800110c:	0030      	movs	r0, r6
 800110e:	1ad2      	subs	r2, r2, r3
 8001110:	4641      	mov	r1, r8
 8001112:	40d0      	lsrs	r0, r2
 8001114:	4099      	lsls	r1, r3
 8001116:	0002      	movs	r2, r0
 8001118:	409e      	lsls	r6, r3
 800111a:	430a      	orrs	r2, r1
 800111c:	429d      	cmp	r5, r3
 800111e:	dd00      	ble.n	8001122 <__aeabi_dsub+0xb6>
 8001120:	e16a      	b.n	80013f8 <__aeabi_dsub+0x38c>
 8001122:	1b5d      	subs	r5, r3, r5
 8001124:	1c6b      	adds	r3, r5, #1
 8001126:	2b1f      	cmp	r3, #31
 8001128:	dd00      	ble.n	800112c <__aeabi_dsub+0xc0>
 800112a:	e194      	b.n	8001456 <__aeabi_dsub+0x3ea>
 800112c:	2120      	movs	r1, #32
 800112e:	0010      	movs	r0, r2
 8001130:	0035      	movs	r5, r6
 8001132:	1ac9      	subs	r1, r1, r3
 8001134:	408e      	lsls	r6, r1
 8001136:	40da      	lsrs	r2, r3
 8001138:	4088      	lsls	r0, r1
 800113a:	40dd      	lsrs	r5, r3
 800113c:	1e71      	subs	r1, r6, #1
 800113e:	418e      	sbcs	r6, r1
 8001140:	0011      	movs	r1, r2
 8001142:	2207      	movs	r2, #7
 8001144:	4328      	orrs	r0, r5
 8001146:	2500      	movs	r5, #0
 8001148:	4306      	orrs	r6, r0
 800114a:	4032      	ands	r2, r6
 800114c:	2a00      	cmp	r2, #0
 800114e:	d009      	beq.n	8001164 <__aeabi_dsub+0xf8>
 8001150:	230f      	movs	r3, #15
 8001152:	4033      	ands	r3, r6
 8001154:	2b04      	cmp	r3, #4
 8001156:	d005      	beq.n	8001164 <__aeabi_dsub+0xf8>
 8001158:	1d33      	adds	r3, r6, #4
 800115a:	42b3      	cmp	r3, r6
 800115c:	41b6      	sbcs	r6, r6
 800115e:	4276      	negs	r6, r6
 8001160:	1989      	adds	r1, r1, r6
 8001162:	001e      	movs	r6, r3
 8001164:	020b      	lsls	r3, r1, #8
 8001166:	d400      	bmi.n	800116a <__aeabi_dsub+0xfe>
 8001168:	e23d      	b.n	80015e6 <__aeabi_dsub+0x57a>
 800116a:	1c6a      	adds	r2, r5, #1
 800116c:	4b91      	ldr	r3, [pc, #580]	; (80013b4 <__aeabi_dsub+0x348>)
 800116e:	0555      	lsls	r5, r2, #21
 8001170:	0d6d      	lsrs	r5, r5, #21
 8001172:	429a      	cmp	r2, r3
 8001174:	d100      	bne.n	8001178 <__aeabi_dsub+0x10c>
 8001176:	e119      	b.n	80013ac <__aeabi_dsub+0x340>
 8001178:	4a8f      	ldr	r2, [pc, #572]	; (80013b8 <__aeabi_dsub+0x34c>)
 800117a:	08f6      	lsrs	r6, r6, #3
 800117c:	400a      	ands	r2, r1
 800117e:	0757      	lsls	r7, r2, #29
 8001180:	0252      	lsls	r2, r2, #9
 8001182:	4337      	orrs	r7, r6
 8001184:	0b12      	lsrs	r2, r2, #12
 8001186:	e09b      	b.n	80012c0 <__aeabi_dsub+0x254>
 8001188:	2e00      	cmp	r6, #0
 800118a:	d000      	beq.n	800118e <__aeabi_dsub+0x122>
 800118c:	e0c5      	b.n	800131a <__aeabi_dsub+0x2ae>
 800118e:	1c6e      	adds	r6, r5, #1
 8001190:	0576      	lsls	r6, r6, #21
 8001192:	0d76      	lsrs	r6, r6, #21
 8001194:	2e01      	cmp	r6, #1
 8001196:	dc00      	bgt.n	800119a <__aeabi_dsub+0x12e>
 8001198:	e148      	b.n	800142c <__aeabi_dsub+0x3c0>
 800119a:	4667      	mov	r7, ip
 800119c:	1a86      	subs	r6, r0, r2
 800119e:	1bcb      	subs	r3, r1, r7
 80011a0:	42b0      	cmp	r0, r6
 80011a2:	41bf      	sbcs	r7, r7
 80011a4:	427f      	negs	r7, r7
 80011a6:	46b8      	mov	r8, r7
 80011a8:	001f      	movs	r7, r3
 80011aa:	4643      	mov	r3, r8
 80011ac:	1aff      	subs	r7, r7, r3
 80011ae:	003b      	movs	r3, r7
 80011b0:	46b8      	mov	r8, r7
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	d500      	bpl.n	80011b8 <__aeabi_dsub+0x14c>
 80011b6:	e15f      	b.n	8001478 <__aeabi_dsub+0x40c>
 80011b8:	4337      	orrs	r7, r6
 80011ba:	d19a      	bne.n	80010f2 <__aeabi_dsub+0x86>
 80011bc:	2200      	movs	r2, #0
 80011be:	2400      	movs	r4, #0
 80011c0:	2500      	movs	r5, #0
 80011c2:	e079      	b.n	80012b8 <__aeabi_dsub+0x24c>
 80011c4:	2e00      	cmp	r6, #0
 80011c6:	dc00      	bgt.n	80011ca <__aeabi_dsub+0x15e>
 80011c8:	e0fa      	b.n	80013c0 <__aeabi_dsub+0x354>
 80011ca:	2f00      	cmp	r7, #0
 80011cc:	d100      	bne.n	80011d0 <__aeabi_dsub+0x164>
 80011ce:	e08d      	b.n	80012ec <__aeabi_dsub+0x280>
 80011d0:	4b78      	ldr	r3, [pc, #480]	; (80013b4 <__aeabi_dsub+0x348>)
 80011d2:	429d      	cmp	r5, r3
 80011d4:	d067      	beq.n	80012a6 <__aeabi_dsub+0x23a>
 80011d6:	2380      	movs	r3, #128	; 0x80
 80011d8:	4667      	mov	r7, ip
 80011da:	041b      	lsls	r3, r3, #16
 80011dc:	431f      	orrs	r7, r3
 80011de:	46bc      	mov	ip, r7
 80011e0:	2e38      	cmp	r6, #56	; 0x38
 80011e2:	dc00      	bgt.n	80011e6 <__aeabi_dsub+0x17a>
 80011e4:	e152      	b.n	800148c <__aeabi_dsub+0x420>
 80011e6:	4663      	mov	r3, ip
 80011e8:	4313      	orrs	r3, r2
 80011ea:	1e5a      	subs	r2, r3, #1
 80011ec:	4193      	sbcs	r3, r2
 80011ee:	181e      	adds	r6, r3, r0
 80011f0:	4286      	cmp	r6, r0
 80011f2:	4180      	sbcs	r0, r0
 80011f4:	4240      	negs	r0, r0
 80011f6:	1809      	adds	r1, r1, r0
 80011f8:	020b      	lsls	r3, r1, #8
 80011fa:	d400      	bmi.n	80011fe <__aeabi_dsub+0x192>
 80011fc:	e0be      	b.n	800137c <__aeabi_dsub+0x310>
 80011fe:	4b6d      	ldr	r3, [pc, #436]	; (80013b4 <__aeabi_dsub+0x348>)
 8001200:	3501      	adds	r5, #1
 8001202:	429d      	cmp	r5, r3
 8001204:	d100      	bne.n	8001208 <__aeabi_dsub+0x19c>
 8001206:	e0d2      	b.n	80013ae <__aeabi_dsub+0x342>
 8001208:	4a6b      	ldr	r2, [pc, #428]	; (80013b8 <__aeabi_dsub+0x34c>)
 800120a:	0873      	lsrs	r3, r6, #1
 800120c:	400a      	ands	r2, r1
 800120e:	2101      	movs	r1, #1
 8001210:	400e      	ands	r6, r1
 8001212:	431e      	orrs	r6, r3
 8001214:	0851      	lsrs	r1, r2, #1
 8001216:	07d3      	lsls	r3, r2, #31
 8001218:	2207      	movs	r2, #7
 800121a:	431e      	orrs	r6, r3
 800121c:	4032      	ands	r2, r6
 800121e:	e795      	b.n	800114c <__aeabi_dsub+0xe0>
 8001220:	001e      	movs	r6, r3
 8001222:	4316      	orrs	r6, r2
 8001224:	d000      	beq.n	8001228 <__aeabi_dsub+0x1bc>
 8001226:	e745      	b.n	80010b4 <__aeabi_dsub+0x48>
 8001228:	e740      	b.n	80010ac <__aeabi_dsub+0x40>
 800122a:	4b62      	ldr	r3, [pc, #392]	; (80013b4 <__aeabi_dsub+0x348>)
 800122c:	429d      	cmp	r5, r3
 800122e:	d03a      	beq.n	80012a6 <__aeabi_dsub+0x23a>
 8001230:	2380      	movs	r3, #128	; 0x80
 8001232:	4667      	mov	r7, ip
 8001234:	041b      	lsls	r3, r3, #16
 8001236:	431f      	orrs	r7, r3
 8001238:	46bc      	mov	ip, r7
 800123a:	2e38      	cmp	r6, #56	; 0x38
 800123c:	dd00      	ble.n	8001240 <__aeabi_dsub+0x1d4>
 800123e:	e0eb      	b.n	8001418 <__aeabi_dsub+0x3ac>
 8001240:	2e1f      	cmp	r6, #31
 8001242:	dc00      	bgt.n	8001246 <__aeabi_dsub+0x1da>
 8001244:	e13a      	b.n	80014bc <__aeabi_dsub+0x450>
 8001246:	0033      	movs	r3, r6
 8001248:	4667      	mov	r7, ip
 800124a:	3b20      	subs	r3, #32
 800124c:	40df      	lsrs	r7, r3
 800124e:	003b      	movs	r3, r7
 8001250:	2e20      	cmp	r6, #32
 8001252:	d005      	beq.n	8001260 <__aeabi_dsub+0x1f4>
 8001254:	2740      	movs	r7, #64	; 0x40
 8001256:	1bbf      	subs	r7, r7, r6
 8001258:	4666      	mov	r6, ip
 800125a:	40be      	lsls	r6, r7
 800125c:	4332      	orrs	r2, r6
 800125e:	4690      	mov	r8, r2
 8001260:	4646      	mov	r6, r8
 8001262:	1e72      	subs	r2, r6, #1
 8001264:	4196      	sbcs	r6, r2
 8001266:	4333      	orrs	r3, r6
 8001268:	e0da      	b.n	8001420 <__aeabi_dsub+0x3b4>
 800126a:	2b00      	cmp	r3, #0
 800126c:	d100      	bne.n	8001270 <__aeabi_dsub+0x204>
 800126e:	e214      	b.n	800169a <__aeabi_dsub+0x62e>
 8001270:	4663      	mov	r3, ip
 8001272:	4313      	orrs	r3, r2
 8001274:	d100      	bne.n	8001278 <__aeabi_dsub+0x20c>
 8001276:	e168      	b.n	800154a <__aeabi_dsub+0x4de>
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	074e      	lsls	r6, r1, #29
 800127c:	08c0      	lsrs	r0, r0, #3
 800127e:	08c9      	lsrs	r1, r1, #3
 8001280:	031b      	lsls	r3, r3, #12
 8001282:	4306      	orrs	r6, r0
 8001284:	4219      	tst	r1, r3
 8001286:	d008      	beq.n	800129a <__aeabi_dsub+0x22e>
 8001288:	4660      	mov	r0, ip
 800128a:	08c0      	lsrs	r0, r0, #3
 800128c:	4218      	tst	r0, r3
 800128e:	d104      	bne.n	800129a <__aeabi_dsub+0x22e>
 8001290:	4663      	mov	r3, ip
 8001292:	0001      	movs	r1, r0
 8001294:	08d2      	lsrs	r2, r2, #3
 8001296:	075e      	lsls	r6, r3, #29
 8001298:	4316      	orrs	r6, r2
 800129a:	00f3      	lsls	r3, r6, #3
 800129c:	4699      	mov	r9, r3
 800129e:	00c9      	lsls	r1, r1, #3
 80012a0:	0f72      	lsrs	r2, r6, #29
 80012a2:	4d44      	ldr	r5, [pc, #272]	; (80013b4 <__aeabi_dsub+0x348>)
 80012a4:	4311      	orrs	r1, r2
 80012a6:	464b      	mov	r3, r9
 80012a8:	08de      	lsrs	r6, r3, #3
 80012aa:	4b42      	ldr	r3, [pc, #264]	; (80013b4 <__aeabi_dsub+0x348>)
 80012ac:	074f      	lsls	r7, r1, #29
 80012ae:	4337      	orrs	r7, r6
 80012b0:	08ca      	lsrs	r2, r1, #3
 80012b2:	429d      	cmp	r5, r3
 80012b4:	d100      	bne.n	80012b8 <__aeabi_dsub+0x24c>
 80012b6:	e06e      	b.n	8001396 <__aeabi_dsub+0x32a>
 80012b8:	0312      	lsls	r2, r2, #12
 80012ba:	056d      	lsls	r5, r5, #21
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	0d6d      	lsrs	r5, r5, #21
 80012c0:	2100      	movs	r1, #0
 80012c2:	0312      	lsls	r2, r2, #12
 80012c4:	0b13      	lsrs	r3, r2, #12
 80012c6:	0d0a      	lsrs	r2, r1, #20
 80012c8:	0512      	lsls	r2, r2, #20
 80012ca:	431a      	orrs	r2, r3
 80012cc:	4b3b      	ldr	r3, [pc, #236]	; (80013bc <__aeabi_dsub+0x350>)
 80012ce:	052d      	lsls	r5, r5, #20
 80012d0:	4013      	ands	r3, r2
 80012d2:	432b      	orrs	r3, r5
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	07e4      	lsls	r4, r4, #31
 80012d8:	085b      	lsrs	r3, r3, #1
 80012da:	4323      	orrs	r3, r4
 80012dc:	0038      	movs	r0, r7
 80012de:	0019      	movs	r1, r3
 80012e0:	bc3c      	pop	{r2, r3, r4, r5}
 80012e2:	4690      	mov	r8, r2
 80012e4:	4699      	mov	r9, r3
 80012e6:	46a2      	mov	sl, r4
 80012e8:	46ab      	mov	fp, r5
 80012ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012ec:	4663      	mov	r3, ip
 80012ee:	4313      	orrs	r3, r2
 80012f0:	d011      	beq.n	8001316 <__aeabi_dsub+0x2aa>
 80012f2:	1e73      	subs	r3, r6, #1
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d000      	beq.n	80012fa <__aeabi_dsub+0x28e>
 80012f8:	e107      	b.n	800150a <__aeabi_dsub+0x49e>
 80012fa:	1886      	adds	r6, r0, r2
 80012fc:	4286      	cmp	r6, r0
 80012fe:	4180      	sbcs	r0, r0
 8001300:	4461      	add	r1, ip
 8001302:	4240      	negs	r0, r0
 8001304:	1809      	adds	r1, r1, r0
 8001306:	2501      	movs	r5, #1
 8001308:	020b      	lsls	r3, r1, #8
 800130a:	d537      	bpl.n	800137c <__aeabi_dsub+0x310>
 800130c:	2502      	movs	r5, #2
 800130e:	e77b      	b.n	8001208 <__aeabi_dsub+0x19c>
 8001310:	003e      	movs	r6, r7
 8001312:	4661      	mov	r1, ip
 8001314:	4691      	mov	r9, r2
 8001316:	0035      	movs	r5, r6
 8001318:	e7c5      	b.n	80012a6 <__aeabi_dsub+0x23a>
 800131a:	465c      	mov	r4, fp
 800131c:	2d00      	cmp	r5, #0
 800131e:	d000      	beq.n	8001322 <__aeabi_dsub+0x2b6>
 8001320:	e0e1      	b.n	80014e6 <__aeabi_dsub+0x47a>
 8001322:	000b      	movs	r3, r1
 8001324:	4303      	orrs	r3, r0
 8001326:	d0f3      	beq.n	8001310 <__aeabi_dsub+0x2a4>
 8001328:	1c73      	adds	r3, r6, #1
 800132a:	d100      	bne.n	800132e <__aeabi_dsub+0x2c2>
 800132c:	e1ac      	b.n	8001688 <__aeabi_dsub+0x61c>
 800132e:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <__aeabi_dsub+0x348>)
 8001330:	429f      	cmp	r7, r3
 8001332:	d100      	bne.n	8001336 <__aeabi_dsub+0x2ca>
 8001334:	e13a      	b.n	80015ac <__aeabi_dsub+0x540>
 8001336:	43f3      	mvns	r3, r6
 8001338:	2b38      	cmp	r3, #56	; 0x38
 800133a:	dd00      	ble.n	800133e <__aeabi_dsub+0x2d2>
 800133c:	e16f      	b.n	800161e <__aeabi_dsub+0x5b2>
 800133e:	2b1f      	cmp	r3, #31
 8001340:	dd00      	ble.n	8001344 <__aeabi_dsub+0x2d8>
 8001342:	e18c      	b.n	800165e <__aeabi_dsub+0x5f2>
 8001344:	2520      	movs	r5, #32
 8001346:	000e      	movs	r6, r1
 8001348:	1aed      	subs	r5, r5, r3
 800134a:	40ae      	lsls	r6, r5
 800134c:	46b0      	mov	r8, r6
 800134e:	0006      	movs	r6, r0
 8001350:	46aa      	mov	sl, r5
 8001352:	40de      	lsrs	r6, r3
 8001354:	4645      	mov	r5, r8
 8001356:	4335      	orrs	r5, r6
 8001358:	002e      	movs	r6, r5
 800135a:	4655      	mov	r5, sl
 800135c:	40d9      	lsrs	r1, r3
 800135e:	40a8      	lsls	r0, r5
 8001360:	4663      	mov	r3, ip
 8001362:	1e45      	subs	r5, r0, #1
 8001364:	41a8      	sbcs	r0, r5
 8001366:	1a5b      	subs	r3, r3, r1
 8001368:	469c      	mov	ip, r3
 800136a:	4330      	orrs	r0, r6
 800136c:	1a16      	subs	r6, r2, r0
 800136e:	42b2      	cmp	r2, r6
 8001370:	4192      	sbcs	r2, r2
 8001372:	4663      	mov	r3, ip
 8001374:	4252      	negs	r2, r2
 8001376:	1a99      	subs	r1, r3, r2
 8001378:	003d      	movs	r5, r7
 800137a:	e6b4      	b.n	80010e6 <__aeabi_dsub+0x7a>
 800137c:	2207      	movs	r2, #7
 800137e:	4032      	ands	r2, r6
 8001380:	2a00      	cmp	r2, #0
 8001382:	d000      	beq.n	8001386 <__aeabi_dsub+0x31a>
 8001384:	e6e4      	b.n	8001150 <__aeabi_dsub+0xe4>
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <__aeabi_dsub+0x348>)
 8001388:	08f6      	lsrs	r6, r6, #3
 800138a:	074f      	lsls	r7, r1, #29
 800138c:	4337      	orrs	r7, r6
 800138e:	08ca      	lsrs	r2, r1, #3
 8001390:	429d      	cmp	r5, r3
 8001392:	d000      	beq.n	8001396 <__aeabi_dsub+0x32a>
 8001394:	e790      	b.n	80012b8 <__aeabi_dsub+0x24c>
 8001396:	003b      	movs	r3, r7
 8001398:	4313      	orrs	r3, r2
 800139a:	d100      	bne.n	800139e <__aeabi_dsub+0x332>
 800139c:	e1a6      	b.n	80016ec <__aeabi_dsub+0x680>
 800139e:	2380      	movs	r3, #128	; 0x80
 80013a0:	031b      	lsls	r3, r3, #12
 80013a2:	431a      	orrs	r2, r3
 80013a4:	0312      	lsls	r2, r2, #12
 80013a6:	0b12      	lsrs	r2, r2, #12
 80013a8:	4d02      	ldr	r5, [pc, #8]	; (80013b4 <__aeabi_dsub+0x348>)
 80013aa:	e789      	b.n	80012c0 <__aeabi_dsub+0x254>
 80013ac:	0015      	movs	r5, r2
 80013ae:	2200      	movs	r2, #0
 80013b0:	2700      	movs	r7, #0
 80013b2:	e785      	b.n	80012c0 <__aeabi_dsub+0x254>
 80013b4:	000007ff 	.word	0x000007ff
 80013b8:	ff7fffff 	.word	0xff7fffff
 80013bc:	800fffff 	.word	0x800fffff
 80013c0:	2e00      	cmp	r6, #0
 80013c2:	d000      	beq.n	80013c6 <__aeabi_dsub+0x35a>
 80013c4:	e0c7      	b.n	8001556 <__aeabi_dsub+0x4ea>
 80013c6:	1c6b      	adds	r3, r5, #1
 80013c8:	055e      	lsls	r6, r3, #21
 80013ca:	0d76      	lsrs	r6, r6, #21
 80013cc:	2e01      	cmp	r6, #1
 80013ce:	dc00      	bgt.n	80013d2 <__aeabi_dsub+0x366>
 80013d0:	e0f0      	b.n	80015b4 <__aeabi_dsub+0x548>
 80013d2:	4dc8      	ldr	r5, [pc, #800]	; (80016f4 <__aeabi_dsub+0x688>)
 80013d4:	42ab      	cmp	r3, r5
 80013d6:	d100      	bne.n	80013da <__aeabi_dsub+0x36e>
 80013d8:	e0b9      	b.n	800154e <__aeabi_dsub+0x4e2>
 80013da:	1885      	adds	r5, r0, r2
 80013dc:	000a      	movs	r2, r1
 80013de:	4285      	cmp	r5, r0
 80013e0:	4189      	sbcs	r1, r1
 80013e2:	4462      	add	r2, ip
 80013e4:	4249      	negs	r1, r1
 80013e6:	1851      	adds	r1, r2, r1
 80013e8:	2207      	movs	r2, #7
 80013ea:	07ce      	lsls	r6, r1, #31
 80013ec:	086d      	lsrs	r5, r5, #1
 80013ee:	432e      	orrs	r6, r5
 80013f0:	0849      	lsrs	r1, r1, #1
 80013f2:	4032      	ands	r2, r6
 80013f4:	001d      	movs	r5, r3
 80013f6:	e6a9      	b.n	800114c <__aeabi_dsub+0xe0>
 80013f8:	49bf      	ldr	r1, [pc, #764]	; (80016f8 <__aeabi_dsub+0x68c>)
 80013fa:	1aed      	subs	r5, r5, r3
 80013fc:	4011      	ands	r1, r2
 80013fe:	2207      	movs	r2, #7
 8001400:	4032      	ands	r2, r6
 8001402:	e6a3      	b.n	800114c <__aeabi_dsub+0xe0>
 8001404:	0032      	movs	r2, r6
 8001406:	3828      	subs	r0, #40	; 0x28
 8001408:	4082      	lsls	r2, r0
 800140a:	2600      	movs	r6, #0
 800140c:	e686      	b.n	800111c <__aeabi_dsub+0xb0>
 800140e:	0030      	movs	r0, r6
 8001410:	f000 fad8 	bl	80019c4 <__clzsi2>
 8001414:	3020      	adds	r0, #32
 8001416:	e673      	b.n	8001100 <__aeabi_dsub+0x94>
 8001418:	4663      	mov	r3, ip
 800141a:	4313      	orrs	r3, r2
 800141c:	1e5a      	subs	r2, r3, #1
 800141e:	4193      	sbcs	r3, r2
 8001420:	1ac6      	subs	r6, r0, r3
 8001422:	42b0      	cmp	r0, r6
 8001424:	4180      	sbcs	r0, r0
 8001426:	4240      	negs	r0, r0
 8001428:	1a09      	subs	r1, r1, r0
 800142a:	e65c      	b.n	80010e6 <__aeabi_dsub+0x7a>
 800142c:	000e      	movs	r6, r1
 800142e:	4667      	mov	r7, ip
 8001430:	4306      	orrs	r6, r0
 8001432:	4317      	orrs	r7, r2
 8001434:	2d00      	cmp	r5, #0
 8001436:	d15e      	bne.n	80014f6 <__aeabi_dsub+0x48a>
 8001438:	2e00      	cmp	r6, #0
 800143a:	d000      	beq.n	800143e <__aeabi_dsub+0x3d2>
 800143c:	e0f3      	b.n	8001626 <__aeabi_dsub+0x5ba>
 800143e:	2f00      	cmp	r7, #0
 8001440:	d100      	bne.n	8001444 <__aeabi_dsub+0x3d8>
 8001442:	e11e      	b.n	8001682 <__aeabi_dsub+0x616>
 8001444:	465c      	mov	r4, fp
 8001446:	4661      	mov	r1, ip
 8001448:	4691      	mov	r9, r2
 800144a:	e72c      	b.n	80012a6 <__aeabi_dsub+0x23a>
 800144c:	4fa9      	ldr	r7, [pc, #676]	; (80016f4 <__aeabi_dsub+0x688>)
 800144e:	42be      	cmp	r6, r7
 8001450:	d07b      	beq.n	800154a <__aeabi_dsub+0x4de>
 8001452:	001e      	movs	r6, r3
 8001454:	e6f1      	b.n	800123a <__aeabi_dsub+0x1ce>
 8001456:	0010      	movs	r0, r2
 8001458:	3d1f      	subs	r5, #31
 800145a:	40e8      	lsrs	r0, r5
 800145c:	2b20      	cmp	r3, #32
 800145e:	d003      	beq.n	8001468 <__aeabi_dsub+0x3fc>
 8001460:	2140      	movs	r1, #64	; 0x40
 8001462:	1acb      	subs	r3, r1, r3
 8001464:	409a      	lsls	r2, r3
 8001466:	4316      	orrs	r6, r2
 8001468:	1e73      	subs	r3, r6, #1
 800146a:	419e      	sbcs	r6, r3
 800146c:	2207      	movs	r2, #7
 800146e:	4306      	orrs	r6, r0
 8001470:	4032      	ands	r2, r6
 8001472:	2100      	movs	r1, #0
 8001474:	2500      	movs	r5, #0
 8001476:	e783      	b.n	8001380 <__aeabi_dsub+0x314>
 8001478:	1a16      	subs	r6, r2, r0
 800147a:	4663      	mov	r3, ip
 800147c:	42b2      	cmp	r2, r6
 800147e:	4180      	sbcs	r0, r0
 8001480:	1a59      	subs	r1, r3, r1
 8001482:	4240      	negs	r0, r0
 8001484:	1a0b      	subs	r3, r1, r0
 8001486:	4698      	mov	r8, r3
 8001488:	465c      	mov	r4, fp
 800148a:	e632      	b.n	80010f2 <__aeabi_dsub+0x86>
 800148c:	2e1f      	cmp	r6, #31
 800148e:	dd00      	ble.n	8001492 <__aeabi_dsub+0x426>
 8001490:	e0ab      	b.n	80015ea <__aeabi_dsub+0x57e>
 8001492:	2720      	movs	r7, #32
 8001494:	1bbb      	subs	r3, r7, r6
 8001496:	469a      	mov	sl, r3
 8001498:	4663      	mov	r3, ip
 800149a:	4657      	mov	r7, sl
 800149c:	40bb      	lsls	r3, r7
 800149e:	4699      	mov	r9, r3
 80014a0:	0013      	movs	r3, r2
 80014a2:	464f      	mov	r7, r9
 80014a4:	40f3      	lsrs	r3, r6
 80014a6:	431f      	orrs	r7, r3
 80014a8:	003b      	movs	r3, r7
 80014aa:	4657      	mov	r7, sl
 80014ac:	40ba      	lsls	r2, r7
 80014ae:	1e57      	subs	r7, r2, #1
 80014b0:	41ba      	sbcs	r2, r7
 80014b2:	4313      	orrs	r3, r2
 80014b4:	4662      	mov	r2, ip
 80014b6:	40f2      	lsrs	r2, r6
 80014b8:	1889      	adds	r1, r1, r2
 80014ba:	e698      	b.n	80011ee <__aeabi_dsub+0x182>
 80014bc:	2720      	movs	r7, #32
 80014be:	1bbb      	subs	r3, r7, r6
 80014c0:	469a      	mov	sl, r3
 80014c2:	4663      	mov	r3, ip
 80014c4:	4657      	mov	r7, sl
 80014c6:	40bb      	lsls	r3, r7
 80014c8:	4699      	mov	r9, r3
 80014ca:	0013      	movs	r3, r2
 80014cc:	464f      	mov	r7, r9
 80014ce:	40f3      	lsrs	r3, r6
 80014d0:	431f      	orrs	r7, r3
 80014d2:	003b      	movs	r3, r7
 80014d4:	4657      	mov	r7, sl
 80014d6:	40ba      	lsls	r2, r7
 80014d8:	1e57      	subs	r7, r2, #1
 80014da:	41ba      	sbcs	r2, r7
 80014dc:	4313      	orrs	r3, r2
 80014de:	4662      	mov	r2, ip
 80014e0:	40f2      	lsrs	r2, r6
 80014e2:	1a89      	subs	r1, r1, r2
 80014e4:	e79c      	b.n	8001420 <__aeabi_dsub+0x3b4>
 80014e6:	4b83      	ldr	r3, [pc, #524]	; (80016f4 <__aeabi_dsub+0x688>)
 80014e8:	429f      	cmp	r7, r3
 80014ea:	d05f      	beq.n	80015ac <__aeabi_dsub+0x540>
 80014ec:	2580      	movs	r5, #128	; 0x80
 80014ee:	042d      	lsls	r5, r5, #16
 80014f0:	4273      	negs	r3, r6
 80014f2:	4329      	orrs	r1, r5
 80014f4:	e720      	b.n	8001338 <__aeabi_dsub+0x2cc>
 80014f6:	2e00      	cmp	r6, #0
 80014f8:	d10c      	bne.n	8001514 <__aeabi_dsub+0x4a8>
 80014fa:	2f00      	cmp	r7, #0
 80014fc:	d100      	bne.n	8001500 <__aeabi_dsub+0x494>
 80014fe:	e0d0      	b.n	80016a2 <__aeabi_dsub+0x636>
 8001500:	465c      	mov	r4, fp
 8001502:	4661      	mov	r1, ip
 8001504:	4691      	mov	r9, r2
 8001506:	4d7b      	ldr	r5, [pc, #492]	; (80016f4 <__aeabi_dsub+0x688>)
 8001508:	e6cd      	b.n	80012a6 <__aeabi_dsub+0x23a>
 800150a:	4f7a      	ldr	r7, [pc, #488]	; (80016f4 <__aeabi_dsub+0x688>)
 800150c:	42be      	cmp	r6, r7
 800150e:	d01c      	beq.n	800154a <__aeabi_dsub+0x4de>
 8001510:	001e      	movs	r6, r3
 8001512:	e665      	b.n	80011e0 <__aeabi_dsub+0x174>
 8001514:	2f00      	cmp	r7, #0
 8001516:	d018      	beq.n	800154a <__aeabi_dsub+0x4de>
 8001518:	08c0      	lsrs	r0, r0, #3
 800151a:	074e      	lsls	r6, r1, #29
 800151c:	4306      	orrs	r6, r0
 800151e:	2080      	movs	r0, #128	; 0x80
 8001520:	08c9      	lsrs	r1, r1, #3
 8001522:	0300      	lsls	r0, r0, #12
 8001524:	4201      	tst	r1, r0
 8001526:	d008      	beq.n	800153a <__aeabi_dsub+0x4ce>
 8001528:	4663      	mov	r3, ip
 800152a:	08dc      	lsrs	r4, r3, #3
 800152c:	4204      	tst	r4, r0
 800152e:	d104      	bne.n	800153a <__aeabi_dsub+0x4ce>
 8001530:	0021      	movs	r1, r4
 8001532:	46da      	mov	sl, fp
 8001534:	08d2      	lsrs	r2, r2, #3
 8001536:	075e      	lsls	r6, r3, #29
 8001538:	4316      	orrs	r6, r2
 800153a:	00f3      	lsls	r3, r6, #3
 800153c:	4699      	mov	r9, r3
 800153e:	2401      	movs	r4, #1
 8001540:	4653      	mov	r3, sl
 8001542:	00c9      	lsls	r1, r1, #3
 8001544:	0f72      	lsrs	r2, r6, #29
 8001546:	4311      	orrs	r1, r2
 8001548:	401c      	ands	r4, r3
 800154a:	4d6a      	ldr	r5, [pc, #424]	; (80016f4 <__aeabi_dsub+0x688>)
 800154c:	e6ab      	b.n	80012a6 <__aeabi_dsub+0x23a>
 800154e:	001d      	movs	r5, r3
 8001550:	2200      	movs	r2, #0
 8001552:	2700      	movs	r7, #0
 8001554:	e6b4      	b.n	80012c0 <__aeabi_dsub+0x254>
 8001556:	2d00      	cmp	r5, #0
 8001558:	d159      	bne.n	800160e <__aeabi_dsub+0x5a2>
 800155a:	000b      	movs	r3, r1
 800155c:	4303      	orrs	r3, r0
 800155e:	d100      	bne.n	8001562 <__aeabi_dsub+0x4f6>
 8001560:	e6d6      	b.n	8001310 <__aeabi_dsub+0x2a4>
 8001562:	1c73      	adds	r3, r6, #1
 8001564:	d100      	bne.n	8001568 <__aeabi_dsub+0x4fc>
 8001566:	e0b2      	b.n	80016ce <__aeabi_dsub+0x662>
 8001568:	4b62      	ldr	r3, [pc, #392]	; (80016f4 <__aeabi_dsub+0x688>)
 800156a:	429f      	cmp	r7, r3
 800156c:	d01e      	beq.n	80015ac <__aeabi_dsub+0x540>
 800156e:	43f3      	mvns	r3, r6
 8001570:	2b38      	cmp	r3, #56	; 0x38
 8001572:	dc6f      	bgt.n	8001654 <__aeabi_dsub+0x5e8>
 8001574:	2b1f      	cmp	r3, #31
 8001576:	dd00      	ble.n	800157a <__aeabi_dsub+0x50e>
 8001578:	e097      	b.n	80016aa <__aeabi_dsub+0x63e>
 800157a:	2520      	movs	r5, #32
 800157c:	000e      	movs	r6, r1
 800157e:	1aed      	subs	r5, r5, r3
 8001580:	40ae      	lsls	r6, r5
 8001582:	46b0      	mov	r8, r6
 8001584:	0006      	movs	r6, r0
 8001586:	46aa      	mov	sl, r5
 8001588:	40de      	lsrs	r6, r3
 800158a:	4645      	mov	r5, r8
 800158c:	4335      	orrs	r5, r6
 800158e:	002e      	movs	r6, r5
 8001590:	4655      	mov	r5, sl
 8001592:	40a8      	lsls	r0, r5
 8001594:	40d9      	lsrs	r1, r3
 8001596:	1e45      	subs	r5, r0, #1
 8001598:	41a8      	sbcs	r0, r5
 800159a:	448c      	add	ip, r1
 800159c:	4306      	orrs	r6, r0
 800159e:	18b6      	adds	r6, r6, r2
 80015a0:	4296      	cmp	r6, r2
 80015a2:	4192      	sbcs	r2, r2
 80015a4:	4251      	negs	r1, r2
 80015a6:	4461      	add	r1, ip
 80015a8:	003d      	movs	r5, r7
 80015aa:	e625      	b.n	80011f8 <__aeabi_dsub+0x18c>
 80015ac:	003d      	movs	r5, r7
 80015ae:	4661      	mov	r1, ip
 80015b0:	4691      	mov	r9, r2
 80015b2:	e678      	b.n	80012a6 <__aeabi_dsub+0x23a>
 80015b4:	000b      	movs	r3, r1
 80015b6:	4303      	orrs	r3, r0
 80015b8:	2d00      	cmp	r5, #0
 80015ba:	d000      	beq.n	80015be <__aeabi_dsub+0x552>
 80015bc:	e655      	b.n	800126a <__aeabi_dsub+0x1fe>
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f5      	beq.n	80015ae <__aeabi_dsub+0x542>
 80015c2:	4663      	mov	r3, ip
 80015c4:	4313      	orrs	r3, r2
 80015c6:	d100      	bne.n	80015ca <__aeabi_dsub+0x55e>
 80015c8:	e66d      	b.n	80012a6 <__aeabi_dsub+0x23a>
 80015ca:	1886      	adds	r6, r0, r2
 80015cc:	4286      	cmp	r6, r0
 80015ce:	4180      	sbcs	r0, r0
 80015d0:	4461      	add	r1, ip
 80015d2:	4240      	negs	r0, r0
 80015d4:	1809      	adds	r1, r1, r0
 80015d6:	2200      	movs	r2, #0
 80015d8:	020b      	lsls	r3, r1, #8
 80015da:	d400      	bmi.n	80015de <__aeabi_dsub+0x572>
 80015dc:	e6d0      	b.n	8001380 <__aeabi_dsub+0x314>
 80015de:	4b46      	ldr	r3, [pc, #280]	; (80016f8 <__aeabi_dsub+0x68c>)
 80015e0:	3501      	adds	r5, #1
 80015e2:	4019      	ands	r1, r3
 80015e4:	e5b2      	b.n	800114c <__aeabi_dsub+0xe0>
 80015e6:	46b1      	mov	r9, r6
 80015e8:	e65d      	b.n	80012a6 <__aeabi_dsub+0x23a>
 80015ea:	0033      	movs	r3, r6
 80015ec:	4667      	mov	r7, ip
 80015ee:	3b20      	subs	r3, #32
 80015f0:	40df      	lsrs	r7, r3
 80015f2:	003b      	movs	r3, r7
 80015f4:	2e20      	cmp	r6, #32
 80015f6:	d005      	beq.n	8001604 <__aeabi_dsub+0x598>
 80015f8:	2740      	movs	r7, #64	; 0x40
 80015fa:	1bbf      	subs	r7, r7, r6
 80015fc:	4666      	mov	r6, ip
 80015fe:	40be      	lsls	r6, r7
 8001600:	4332      	orrs	r2, r6
 8001602:	4690      	mov	r8, r2
 8001604:	4646      	mov	r6, r8
 8001606:	1e72      	subs	r2, r6, #1
 8001608:	4196      	sbcs	r6, r2
 800160a:	4333      	orrs	r3, r6
 800160c:	e5ef      	b.n	80011ee <__aeabi_dsub+0x182>
 800160e:	4b39      	ldr	r3, [pc, #228]	; (80016f4 <__aeabi_dsub+0x688>)
 8001610:	429f      	cmp	r7, r3
 8001612:	d0cb      	beq.n	80015ac <__aeabi_dsub+0x540>
 8001614:	2580      	movs	r5, #128	; 0x80
 8001616:	042d      	lsls	r5, r5, #16
 8001618:	4273      	negs	r3, r6
 800161a:	4329      	orrs	r1, r5
 800161c:	e7a8      	b.n	8001570 <__aeabi_dsub+0x504>
 800161e:	4308      	orrs	r0, r1
 8001620:	1e41      	subs	r1, r0, #1
 8001622:	4188      	sbcs	r0, r1
 8001624:	e6a2      	b.n	800136c <__aeabi_dsub+0x300>
 8001626:	2f00      	cmp	r7, #0
 8001628:	d100      	bne.n	800162c <__aeabi_dsub+0x5c0>
 800162a:	e63c      	b.n	80012a6 <__aeabi_dsub+0x23a>
 800162c:	4663      	mov	r3, ip
 800162e:	1a86      	subs	r6, r0, r2
 8001630:	1acf      	subs	r7, r1, r3
 8001632:	42b0      	cmp	r0, r6
 8001634:	419b      	sbcs	r3, r3
 8001636:	425b      	negs	r3, r3
 8001638:	1afb      	subs	r3, r7, r3
 800163a:	4698      	mov	r8, r3
 800163c:	021b      	lsls	r3, r3, #8
 800163e:	d54e      	bpl.n	80016de <__aeabi_dsub+0x672>
 8001640:	1a16      	subs	r6, r2, r0
 8001642:	4663      	mov	r3, ip
 8001644:	42b2      	cmp	r2, r6
 8001646:	4192      	sbcs	r2, r2
 8001648:	1a59      	subs	r1, r3, r1
 800164a:	4252      	negs	r2, r2
 800164c:	1a89      	subs	r1, r1, r2
 800164e:	465c      	mov	r4, fp
 8001650:	2200      	movs	r2, #0
 8001652:	e57b      	b.n	800114c <__aeabi_dsub+0xe0>
 8001654:	4301      	orrs	r1, r0
 8001656:	000e      	movs	r6, r1
 8001658:	1e71      	subs	r1, r6, #1
 800165a:	418e      	sbcs	r6, r1
 800165c:	e79f      	b.n	800159e <__aeabi_dsub+0x532>
 800165e:	001d      	movs	r5, r3
 8001660:	000e      	movs	r6, r1
 8001662:	3d20      	subs	r5, #32
 8001664:	40ee      	lsrs	r6, r5
 8001666:	46b0      	mov	r8, r6
 8001668:	2b20      	cmp	r3, #32
 800166a:	d004      	beq.n	8001676 <__aeabi_dsub+0x60a>
 800166c:	2540      	movs	r5, #64	; 0x40
 800166e:	1aeb      	subs	r3, r5, r3
 8001670:	4099      	lsls	r1, r3
 8001672:	4308      	orrs	r0, r1
 8001674:	4681      	mov	r9, r0
 8001676:	4648      	mov	r0, r9
 8001678:	4643      	mov	r3, r8
 800167a:	1e41      	subs	r1, r0, #1
 800167c:	4188      	sbcs	r0, r1
 800167e:	4318      	orrs	r0, r3
 8001680:	e674      	b.n	800136c <__aeabi_dsub+0x300>
 8001682:	2200      	movs	r2, #0
 8001684:	2400      	movs	r4, #0
 8001686:	e617      	b.n	80012b8 <__aeabi_dsub+0x24c>
 8001688:	1a16      	subs	r6, r2, r0
 800168a:	4663      	mov	r3, ip
 800168c:	42b2      	cmp	r2, r6
 800168e:	4192      	sbcs	r2, r2
 8001690:	1a59      	subs	r1, r3, r1
 8001692:	4252      	negs	r2, r2
 8001694:	1a89      	subs	r1, r1, r2
 8001696:	003d      	movs	r5, r7
 8001698:	e525      	b.n	80010e6 <__aeabi_dsub+0x7a>
 800169a:	4661      	mov	r1, ip
 800169c:	4691      	mov	r9, r2
 800169e:	4d15      	ldr	r5, [pc, #84]	; (80016f4 <__aeabi_dsub+0x688>)
 80016a0:	e601      	b.n	80012a6 <__aeabi_dsub+0x23a>
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	2400      	movs	r4, #0
 80016a6:	0312      	lsls	r2, r2, #12
 80016a8:	e679      	b.n	800139e <__aeabi_dsub+0x332>
 80016aa:	001d      	movs	r5, r3
 80016ac:	000e      	movs	r6, r1
 80016ae:	3d20      	subs	r5, #32
 80016b0:	40ee      	lsrs	r6, r5
 80016b2:	46b0      	mov	r8, r6
 80016b4:	2b20      	cmp	r3, #32
 80016b6:	d004      	beq.n	80016c2 <__aeabi_dsub+0x656>
 80016b8:	2540      	movs	r5, #64	; 0x40
 80016ba:	1aeb      	subs	r3, r5, r3
 80016bc:	4099      	lsls	r1, r3
 80016be:	4308      	orrs	r0, r1
 80016c0:	4681      	mov	r9, r0
 80016c2:	464e      	mov	r6, r9
 80016c4:	4643      	mov	r3, r8
 80016c6:	1e71      	subs	r1, r6, #1
 80016c8:	418e      	sbcs	r6, r1
 80016ca:	431e      	orrs	r6, r3
 80016cc:	e767      	b.n	800159e <__aeabi_dsub+0x532>
 80016ce:	1886      	adds	r6, r0, r2
 80016d0:	4296      	cmp	r6, r2
 80016d2:	419b      	sbcs	r3, r3
 80016d4:	4461      	add	r1, ip
 80016d6:	425b      	negs	r3, r3
 80016d8:	18c9      	adds	r1, r1, r3
 80016da:	003d      	movs	r5, r7
 80016dc:	e58c      	b.n	80011f8 <__aeabi_dsub+0x18c>
 80016de:	4647      	mov	r7, r8
 80016e0:	4337      	orrs	r7, r6
 80016e2:	d0ce      	beq.n	8001682 <__aeabi_dsub+0x616>
 80016e4:	2207      	movs	r2, #7
 80016e6:	4641      	mov	r1, r8
 80016e8:	4032      	ands	r2, r6
 80016ea:	e649      	b.n	8001380 <__aeabi_dsub+0x314>
 80016ec:	2700      	movs	r7, #0
 80016ee:	003a      	movs	r2, r7
 80016f0:	e5e6      	b.n	80012c0 <__aeabi_dsub+0x254>
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	000007ff 	.word	0x000007ff
 80016f8:	ff7fffff 	.word	0xff7fffff

080016fc <__aeabi_d2iz>:
 80016fc:	b530      	push	{r4, r5, lr}
 80016fe:	4d14      	ldr	r5, [pc, #80]	; (8001750 <__aeabi_d2iz+0x54>)
 8001700:	030a      	lsls	r2, r1, #12
 8001702:	004b      	lsls	r3, r1, #1
 8001704:	0b12      	lsrs	r2, r2, #12
 8001706:	0d5b      	lsrs	r3, r3, #21
 8001708:	0fc9      	lsrs	r1, r1, #31
 800170a:	2400      	movs	r4, #0
 800170c:	42ab      	cmp	r3, r5
 800170e:	dd11      	ble.n	8001734 <__aeabi_d2iz+0x38>
 8001710:	4c10      	ldr	r4, [pc, #64]	; (8001754 <__aeabi_d2iz+0x58>)
 8001712:	42a3      	cmp	r3, r4
 8001714:	dc10      	bgt.n	8001738 <__aeabi_d2iz+0x3c>
 8001716:	2480      	movs	r4, #128	; 0x80
 8001718:	0364      	lsls	r4, r4, #13
 800171a:	4322      	orrs	r2, r4
 800171c:	4c0e      	ldr	r4, [pc, #56]	; (8001758 <__aeabi_d2iz+0x5c>)
 800171e:	1ae4      	subs	r4, r4, r3
 8001720:	2c1f      	cmp	r4, #31
 8001722:	dd0c      	ble.n	800173e <__aeabi_d2iz+0x42>
 8001724:	480d      	ldr	r0, [pc, #52]	; (800175c <__aeabi_d2iz+0x60>)
 8001726:	1ac3      	subs	r3, r0, r3
 8001728:	40da      	lsrs	r2, r3
 800172a:	0013      	movs	r3, r2
 800172c:	425c      	negs	r4, r3
 800172e:	2900      	cmp	r1, #0
 8001730:	d100      	bne.n	8001734 <__aeabi_d2iz+0x38>
 8001732:	001c      	movs	r4, r3
 8001734:	0020      	movs	r0, r4
 8001736:	bd30      	pop	{r4, r5, pc}
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <__aeabi_d2iz+0x64>)
 800173a:	18cc      	adds	r4, r1, r3
 800173c:	e7fa      	b.n	8001734 <__aeabi_d2iz+0x38>
 800173e:	4d09      	ldr	r5, [pc, #36]	; (8001764 <__aeabi_d2iz+0x68>)
 8001740:	40e0      	lsrs	r0, r4
 8001742:	46ac      	mov	ip, r5
 8001744:	4463      	add	r3, ip
 8001746:	409a      	lsls	r2, r3
 8001748:	0013      	movs	r3, r2
 800174a:	4303      	orrs	r3, r0
 800174c:	e7ee      	b.n	800172c <__aeabi_d2iz+0x30>
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	000003fe 	.word	0x000003fe
 8001754:	0000041d 	.word	0x0000041d
 8001758:	00000433 	.word	0x00000433
 800175c:	00000413 	.word	0x00000413
 8001760:	7fffffff 	.word	0x7fffffff
 8001764:	fffffbed 	.word	0xfffffbed

08001768 <__aeabi_i2d>:
 8001768:	b570      	push	{r4, r5, r6, lr}
 800176a:	2800      	cmp	r0, #0
 800176c:	d02d      	beq.n	80017ca <__aeabi_i2d+0x62>
 800176e:	17c3      	asrs	r3, r0, #31
 8001770:	18c5      	adds	r5, r0, r3
 8001772:	405d      	eors	r5, r3
 8001774:	0fc4      	lsrs	r4, r0, #31
 8001776:	0028      	movs	r0, r5
 8001778:	f000 f924 	bl	80019c4 <__clzsi2>
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <__aeabi_i2d+0x6c>)
 800177e:	1a1b      	subs	r3, r3, r0
 8001780:	055b      	lsls	r3, r3, #21
 8001782:	0d5b      	lsrs	r3, r3, #21
 8001784:	280a      	cmp	r0, #10
 8001786:	dd15      	ble.n	80017b4 <__aeabi_i2d+0x4c>
 8001788:	380b      	subs	r0, #11
 800178a:	4085      	lsls	r5, r0
 800178c:	2200      	movs	r2, #0
 800178e:	032d      	lsls	r5, r5, #12
 8001790:	0b2d      	lsrs	r5, r5, #12
 8001792:	2100      	movs	r1, #0
 8001794:	0010      	movs	r0, r2
 8001796:	032d      	lsls	r5, r5, #12
 8001798:	0d0a      	lsrs	r2, r1, #20
 800179a:	0b2d      	lsrs	r5, r5, #12
 800179c:	0512      	lsls	r2, r2, #20
 800179e:	432a      	orrs	r2, r5
 80017a0:	4d0d      	ldr	r5, [pc, #52]	; (80017d8 <__aeabi_i2d+0x70>)
 80017a2:	051b      	lsls	r3, r3, #20
 80017a4:	402a      	ands	r2, r5
 80017a6:	4313      	orrs	r3, r2
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	07e4      	lsls	r4, r4, #31
 80017ac:	085b      	lsrs	r3, r3, #1
 80017ae:	4323      	orrs	r3, r4
 80017b0:	0019      	movs	r1, r3
 80017b2:	bd70      	pop	{r4, r5, r6, pc}
 80017b4:	0002      	movs	r2, r0
 80017b6:	0029      	movs	r1, r5
 80017b8:	3215      	adds	r2, #21
 80017ba:	4091      	lsls	r1, r2
 80017bc:	000a      	movs	r2, r1
 80017be:	210b      	movs	r1, #11
 80017c0:	1a08      	subs	r0, r1, r0
 80017c2:	40c5      	lsrs	r5, r0
 80017c4:	032d      	lsls	r5, r5, #12
 80017c6:	0b2d      	lsrs	r5, r5, #12
 80017c8:	e7e3      	b.n	8001792 <__aeabi_i2d+0x2a>
 80017ca:	2400      	movs	r4, #0
 80017cc:	2300      	movs	r3, #0
 80017ce:	2500      	movs	r5, #0
 80017d0:	2200      	movs	r2, #0
 80017d2:	e7de      	b.n	8001792 <__aeabi_i2d+0x2a>
 80017d4:	0000041e 	.word	0x0000041e
 80017d8:	800fffff 	.word	0x800fffff

080017dc <__aeabi_ui2d>:
 80017dc:	b510      	push	{r4, lr}
 80017de:	1e04      	subs	r4, r0, #0
 80017e0:	d025      	beq.n	800182e <__aeabi_ui2d+0x52>
 80017e2:	f000 f8ef 	bl	80019c4 <__clzsi2>
 80017e6:	4b14      	ldr	r3, [pc, #80]	; (8001838 <__aeabi_ui2d+0x5c>)
 80017e8:	1a1b      	subs	r3, r3, r0
 80017ea:	055b      	lsls	r3, r3, #21
 80017ec:	0d5b      	lsrs	r3, r3, #21
 80017ee:	280a      	cmp	r0, #10
 80017f0:	dd12      	ble.n	8001818 <__aeabi_ui2d+0x3c>
 80017f2:	380b      	subs	r0, #11
 80017f4:	4084      	lsls	r4, r0
 80017f6:	2200      	movs	r2, #0
 80017f8:	0324      	lsls	r4, r4, #12
 80017fa:	0b24      	lsrs	r4, r4, #12
 80017fc:	2100      	movs	r1, #0
 80017fe:	0010      	movs	r0, r2
 8001800:	0324      	lsls	r4, r4, #12
 8001802:	0d0a      	lsrs	r2, r1, #20
 8001804:	0b24      	lsrs	r4, r4, #12
 8001806:	0512      	lsls	r2, r2, #20
 8001808:	4322      	orrs	r2, r4
 800180a:	4c0c      	ldr	r4, [pc, #48]	; (800183c <__aeabi_ui2d+0x60>)
 800180c:	051b      	lsls	r3, r3, #20
 800180e:	4022      	ands	r2, r4
 8001810:	4313      	orrs	r3, r2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	0859      	lsrs	r1, r3, #1
 8001816:	bd10      	pop	{r4, pc}
 8001818:	0002      	movs	r2, r0
 800181a:	0021      	movs	r1, r4
 800181c:	3215      	adds	r2, #21
 800181e:	4091      	lsls	r1, r2
 8001820:	000a      	movs	r2, r1
 8001822:	210b      	movs	r1, #11
 8001824:	1a08      	subs	r0, r1, r0
 8001826:	40c4      	lsrs	r4, r0
 8001828:	0324      	lsls	r4, r4, #12
 800182a:	0b24      	lsrs	r4, r4, #12
 800182c:	e7e6      	b.n	80017fc <__aeabi_ui2d+0x20>
 800182e:	2300      	movs	r3, #0
 8001830:	2400      	movs	r4, #0
 8001832:	2200      	movs	r2, #0
 8001834:	e7e2      	b.n	80017fc <__aeabi_ui2d+0x20>
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	0000041e 	.word	0x0000041e
 800183c:	800fffff 	.word	0x800fffff

08001840 <__aeabi_d2f>:
 8001840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001842:	004c      	lsls	r4, r1, #1
 8001844:	0d64      	lsrs	r4, r4, #21
 8001846:	030b      	lsls	r3, r1, #12
 8001848:	1c62      	adds	r2, r4, #1
 800184a:	0a5b      	lsrs	r3, r3, #9
 800184c:	0f46      	lsrs	r6, r0, #29
 800184e:	0552      	lsls	r2, r2, #21
 8001850:	0fc9      	lsrs	r1, r1, #31
 8001852:	431e      	orrs	r6, r3
 8001854:	00c5      	lsls	r5, r0, #3
 8001856:	0d52      	lsrs	r2, r2, #21
 8001858:	2a01      	cmp	r2, #1
 800185a:	dd29      	ble.n	80018b0 <__aeabi_d2f+0x70>
 800185c:	4b37      	ldr	r3, [pc, #220]	; (800193c <__aeabi_d2f+0xfc>)
 800185e:	18e7      	adds	r7, r4, r3
 8001860:	2ffe      	cmp	r7, #254	; 0xfe
 8001862:	dc1c      	bgt.n	800189e <__aeabi_d2f+0x5e>
 8001864:	2f00      	cmp	r7, #0
 8001866:	dd3b      	ble.n	80018e0 <__aeabi_d2f+0xa0>
 8001868:	0180      	lsls	r0, r0, #6
 800186a:	1e43      	subs	r3, r0, #1
 800186c:	4198      	sbcs	r0, r3
 800186e:	2207      	movs	r2, #7
 8001870:	00f3      	lsls	r3, r6, #3
 8001872:	0f6d      	lsrs	r5, r5, #29
 8001874:	4303      	orrs	r3, r0
 8001876:	432b      	orrs	r3, r5
 8001878:	401a      	ands	r2, r3
 800187a:	2a00      	cmp	r2, #0
 800187c:	d004      	beq.n	8001888 <__aeabi_d2f+0x48>
 800187e:	220f      	movs	r2, #15
 8001880:	401a      	ands	r2, r3
 8001882:	2a04      	cmp	r2, #4
 8001884:	d000      	beq.n	8001888 <__aeabi_d2f+0x48>
 8001886:	3304      	adds	r3, #4
 8001888:	2280      	movs	r2, #128	; 0x80
 800188a:	04d2      	lsls	r2, r2, #19
 800188c:	401a      	ands	r2, r3
 800188e:	d024      	beq.n	80018da <__aeabi_d2f+0x9a>
 8001890:	3701      	adds	r7, #1
 8001892:	b2fa      	uxtb	r2, r7
 8001894:	2fff      	cmp	r7, #255	; 0xff
 8001896:	d002      	beq.n	800189e <__aeabi_d2f+0x5e>
 8001898:	019b      	lsls	r3, r3, #6
 800189a:	0a58      	lsrs	r0, r3, #9
 800189c:	e001      	b.n	80018a2 <__aeabi_d2f+0x62>
 800189e:	22ff      	movs	r2, #255	; 0xff
 80018a0:	2000      	movs	r0, #0
 80018a2:	0240      	lsls	r0, r0, #9
 80018a4:	05d2      	lsls	r2, r2, #23
 80018a6:	0a40      	lsrs	r0, r0, #9
 80018a8:	07c9      	lsls	r1, r1, #31
 80018aa:	4310      	orrs	r0, r2
 80018ac:	4308      	orrs	r0, r1
 80018ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018b0:	4335      	orrs	r5, r6
 80018b2:	2c00      	cmp	r4, #0
 80018b4:	d104      	bne.n	80018c0 <__aeabi_d2f+0x80>
 80018b6:	2d00      	cmp	r5, #0
 80018b8:	d10a      	bne.n	80018d0 <__aeabi_d2f+0x90>
 80018ba:	2200      	movs	r2, #0
 80018bc:	2000      	movs	r0, #0
 80018be:	e7f0      	b.n	80018a2 <__aeabi_d2f+0x62>
 80018c0:	2d00      	cmp	r5, #0
 80018c2:	d0ec      	beq.n	800189e <__aeabi_d2f+0x5e>
 80018c4:	2080      	movs	r0, #128	; 0x80
 80018c6:	03c0      	lsls	r0, r0, #15
 80018c8:	4330      	orrs	r0, r6
 80018ca:	22ff      	movs	r2, #255	; 0xff
 80018cc:	e7e9      	b.n	80018a2 <__aeabi_d2f+0x62>
 80018ce:	2400      	movs	r4, #0
 80018d0:	2300      	movs	r3, #0
 80018d2:	025b      	lsls	r3, r3, #9
 80018d4:	0a58      	lsrs	r0, r3, #9
 80018d6:	b2e2      	uxtb	r2, r4
 80018d8:	e7e3      	b.n	80018a2 <__aeabi_d2f+0x62>
 80018da:	08db      	lsrs	r3, r3, #3
 80018dc:	003c      	movs	r4, r7
 80018de:	e7f8      	b.n	80018d2 <__aeabi_d2f+0x92>
 80018e0:	003b      	movs	r3, r7
 80018e2:	3317      	adds	r3, #23
 80018e4:	dbf3      	blt.n	80018ce <__aeabi_d2f+0x8e>
 80018e6:	2380      	movs	r3, #128	; 0x80
 80018e8:	041b      	lsls	r3, r3, #16
 80018ea:	4333      	orrs	r3, r6
 80018ec:	261e      	movs	r6, #30
 80018ee:	1bf6      	subs	r6, r6, r7
 80018f0:	2e1f      	cmp	r6, #31
 80018f2:	dd14      	ble.n	800191e <__aeabi_d2f+0xde>
 80018f4:	2202      	movs	r2, #2
 80018f6:	4252      	negs	r2, r2
 80018f8:	1bd7      	subs	r7, r2, r7
 80018fa:	001a      	movs	r2, r3
 80018fc:	40fa      	lsrs	r2, r7
 80018fe:	0017      	movs	r7, r2
 8001900:	2e20      	cmp	r6, #32
 8001902:	d004      	beq.n	800190e <__aeabi_d2f+0xce>
 8001904:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <__aeabi_d2f+0x100>)
 8001906:	4694      	mov	ip, r2
 8001908:	4464      	add	r4, ip
 800190a:	40a3      	lsls	r3, r4
 800190c:	431d      	orrs	r5, r3
 800190e:	002b      	movs	r3, r5
 8001910:	1e5d      	subs	r5, r3, #1
 8001912:	41ab      	sbcs	r3, r5
 8001914:	2207      	movs	r2, #7
 8001916:	433b      	orrs	r3, r7
 8001918:	401a      	ands	r2, r3
 800191a:	2700      	movs	r7, #0
 800191c:	e7ad      	b.n	800187a <__aeabi_d2f+0x3a>
 800191e:	4a09      	ldr	r2, [pc, #36]	; (8001944 <__aeabi_d2f+0x104>)
 8001920:	0028      	movs	r0, r5
 8001922:	18a2      	adds	r2, r4, r2
 8001924:	4095      	lsls	r5, r2
 8001926:	4093      	lsls	r3, r2
 8001928:	1e6c      	subs	r4, r5, #1
 800192a:	41a5      	sbcs	r5, r4
 800192c:	40f0      	lsrs	r0, r6
 800192e:	2207      	movs	r2, #7
 8001930:	432b      	orrs	r3, r5
 8001932:	4303      	orrs	r3, r0
 8001934:	401a      	ands	r2, r3
 8001936:	2700      	movs	r7, #0
 8001938:	e79f      	b.n	800187a <__aeabi_d2f+0x3a>
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	fffffc80 	.word	0xfffffc80
 8001940:	fffffca2 	.word	0xfffffca2
 8001944:	fffffc82 	.word	0xfffffc82

08001948 <__aeabi_cdrcmple>:
 8001948:	4684      	mov	ip, r0
 800194a:	1c10      	adds	r0, r2, #0
 800194c:	4662      	mov	r2, ip
 800194e:	468c      	mov	ip, r1
 8001950:	1c19      	adds	r1, r3, #0
 8001952:	4663      	mov	r3, ip
 8001954:	e000      	b.n	8001958 <__aeabi_cdcmpeq>
 8001956:	46c0      	nop			; (mov r8, r8)

08001958 <__aeabi_cdcmpeq>:
 8001958:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800195a:	f000 f8f1 	bl	8001b40 <__ledf2>
 800195e:	2800      	cmp	r0, #0
 8001960:	d401      	bmi.n	8001966 <__aeabi_cdcmpeq+0xe>
 8001962:	2100      	movs	r1, #0
 8001964:	42c8      	cmn	r0, r1
 8001966:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001968 <__aeabi_dcmpeq>:
 8001968:	b510      	push	{r4, lr}
 800196a:	f000 f849 	bl	8001a00 <__eqdf2>
 800196e:	4240      	negs	r0, r0
 8001970:	3001      	adds	r0, #1
 8001972:	bd10      	pop	{r4, pc}

08001974 <__aeabi_dcmplt>:
 8001974:	b510      	push	{r4, lr}
 8001976:	f000 f8e3 	bl	8001b40 <__ledf2>
 800197a:	2800      	cmp	r0, #0
 800197c:	db01      	blt.n	8001982 <__aeabi_dcmplt+0xe>
 800197e:	2000      	movs	r0, #0
 8001980:	bd10      	pop	{r4, pc}
 8001982:	2001      	movs	r0, #1
 8001984:	bd10      	pop	{r4, pc}
 8001986:	46c0      	nop			; (mov r8, r8)

08001988 <__aeabi_dcmple>:
 8001988:	b510      	push	{r4, lr}
 800198a:	f000 f8d9 	bl	8001b40 <__ledf2>
 800198e:	2800      	cmp	r0, #0
 8001990:	dd01      	ble.n	8001996 <__aeabi_dcmple+0xe>
 8001992:	2000      	movs	r0, #0
 8001994:	bd10      	pop	{r4, pc}
 8001996:	2001      	movs	r0, #1
 8001998:	bd10      	pop	{r4, pc}
 800199a:	46c0      	nop			; (mov r8, r8)

0800199c <__aeabi_dcmpgt>:
 800199c:	b510      	push	{r4, lr}
 800199e:	f000 f86b 	bl	8001a78 <__gedf2>
 80019a2:	2800      	cmp	r0, #0
 80019a4:	dc01      	bgt.n	80019aa <__aeabi_dcmpgt+0xe>
 80019a6:	2000      	movs	r0, #0
 80019a8:	bd10      	pop	{r4, pc}
 80019aa:	2001      	movs	r0, #1
 80019ac:	bd10      	pop	{r4, pc}
 80019ae:	46c0      	nop			; (mov r8, r8)

080019b0 <__aeabi_dcmpge>:
 80019b0:	b510      	push	{r4, lr}
 80019b2:	f000 f861 	bl	8001a78 <__gedf2>
 80019b6:	2800      	cmp	r0, #0
 80019b8:	da01      	bge.n	80019be <__aeabi_dcmpge+0xe>
 80019ba:	2000      	movs	r0, #0
 80019bc:	bd10      	pop	{r4, pc}
 80019be:	2001      	movs	r0, #1
 80019c0:	bd10      	pop	{r4, pc}
 80019c2:	46c0      	nop			; (mov r8, r8)

080019c4 <__clzsi2>:
 80019c4:	211c      	movs	r1, #28
 80019c6:	2301      	movs	r3, #1
 80019c8:	041b      	lsls	r3, r3, #16
 80019ca:	4298      	cmp	r0, r3
 80019cc:	d301      	bcc.n	80019d2 <__clzsi2+0xe>
 80019ce:	0c00      	lsrs	r0, r0, #16
 80019d0:	3910      	subs	r1, #16
 80019d2:	0a1b      	lsrs	r3, r3, #8
 80019d4:	4298      	cmp	r0, r3
 80019d6:	d301      	bcc.n	80019dc <__clzsi2+0x18>
 80019d8:	0a00      	lsrs	r0, r0, #8
 80019da:	3908      	subs	r1, #8
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	4298      	cmp	r0, r3
 80019e0:	d301      	bcc.n	80019e6 <__clzsi2+0x22>
 80019e2:	0900      	lsrs	r0, r0, #4
 80019e4:	3904      	subs	r1, #4
 80019e6:	a202      	add	r2, pc, #8	; (adr r2, 80019f0 <__clzsi2+0x2c>)
 80019e8:	5c10      	ldrb	r0, [r2, r0]
 80019ea:	1840      	adds	r0, r0, r1
 80019ec:	4770      	bx	lr
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	02020304 	.word	0x02020304
 80019f4:	01010101 	.word	0x01010101
	...

08001a00 <__eqdf2>:
 8001a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a02:	464f      	mov	r7, r9
 8001a04:	4646      	mov	r6, r8
 8001a06:	46d6      	mov	lr, sl
 8001a08:	4684      	mov	ip, r0
 8001a0a:	b5c0      	push	{r6, r7, lr}
 8001a0c:	4680      	mov	r8, r0
 8001a0e:	4e19      	ldr	r6, [pc, #100]	; (8001a74 <__eqdf2+0x74>)
 8001a10:	0318      	lsls	r0, r3, #12
 8001a12:	030f      	lsls	r7, r1, #12
 8001a14:	004d      	lsls	r5, r1, #1
 8001a16:	0b00      	lsrs	r0, r0, #12
 8001a18:	005c      	lsls	r4, r3, #1
 8001a1a:	4682      	mov	sl, r0
 8001a1c:	0b3f      	lsrs	r7, r7, #12
 8001a1e:	0d6d      	lsrs	r5, r5, #21
 8001a20:	0fc9      	lsrs	r1, r1, #31
 8001a22:	4691      	mov	r9, r2
 8001a24:	0d64      	lsrs	r4, r4, #21
 8001a26:	0fdb      	lsrs	r3, r3, #31
 8001a28:	2001      	movs	r0, #1
 8001a2a:	42b5      	cmp	r5, r6
 8001a2c:	d00a      	beq.n	8001a44 <__eqdf2+0x44>
 8001a2e:	42b4      	cmp	r4, r6
 8001a30:	d003      	beq.n	8001a3a <__eqdf2+0x3a>
 8001a32:	42a5      	cmp	r5, r4
 8001a34:	d101      	bne.n	8001a3a <__eqdf2+0x3a>
 8001a36:	4557      	cmp	r7, sl
 8001a38:	d00c      	beq.n	8001a54 <__eqdf2+0x54>
 8001a3a:	bc1c      	pop	{r2, r3, r4}
 8001a3c:	4690      	mov	r8, r2
 8001a3e:	4699      	mov	r9, r3
 8001a40:	46a2      	mov	sl, r4
 8001a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a44:	4666      	mov	r6, ip
 8001a46:	433e      	orrs	r6, r7
 8001a48:	d1f7      	bne.n	8001a3a <__eqdf2+0x3a>
 8001a4a:	42ac      	cmp	r4, r5
 8001a4c:	d1f5      	bne.n	8001a3a <__eqdf2+0x3a>
 8001a4e:	4654      	mov	r4, sl
 8001a50:	4314      	orrs	r4, r2
 8001a52:	d1f2      	bne.n	8001a3a <__eqdf2+0x3a>
 8001a54:	2001      	movs	r0, #1
 8001a56:	45c8      	cmp	r8, r9
 8001a58:	d1ef      	bne.n	8001a3a <__eqdf2+0x3a>
 8001a5a:	4299      	cmp	r1, r3
 8001a5c:	d007      	beq.n	8001a6e <__eqdf2+0x6e>
 8001a5e:	2d00      	cmp	r5, #0
 8001a60:	d1eb      	bne.n	8001a3a <__eqdf2+0x3a>
 8001a62:	4663      	mov	r3, ip
 8001a64:	431f      	orrs	r7, r3
 8001a66:	0038      	movs	r0, r7
 8001a68:	1e47      	subs	r7, r0, #1
 8001a6a:	41b8      	sbcs	r0, r7
 8001a6c:	e7e5      	b.n	8001a3a <__eqdf2+0x3a>
 8001a6e:	2000      	movs	r0, #0
 8001a70:	e7e3      	b.n	8001a3a <__eqdf2+0x3a>
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff

08001a78 <__gedf2>:
 8001a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a7a:	464f      	mov	r7, r9
 8001a7c:	4646      	mov	r6, r8
 8001a7e:	46d6      	mov	lr, sl
 8001a80:	004d      	lsls	r5, r1, #1
 8001a82:	b5c0      	push	{r6, r7, lr}
 8001a84:	030e      	lsls	r6, r1, #12
 8001a86:	0fc9      	lsrs	r1, r1, #31
 8001a88:	468a      	mov	sl, r1
 8001a8a:	492c      	ldr	r1, [pc, #176]	; (8001b3c <__gedf2+0xc4>)
 8001a8c:	031f      	lsls	r7, r3, #12
 8001a8e:	005c      	lsls	r4, r3, #1
 8001a90:	4680      	mov	r8, r0
 8001a92:	0b36      	lsrs	r6, r6, #12
 8001a94:	0d6d      	lsrs	r5, r5, #21
 8001a96:	4691      	mov	r9, r2
 8001a98:	0b3f      	lsrs	r7, r7, #12
 8001a9a:	0d64      	lsrs	r4, r4, #21
 8001a9c:	0fdb      	lsrs	r3, r3, #31
 8001a9e:	428d      	cmp	r5, r1
 8001aa0:	d01e      	beq.n	8001ae0 <__gedf2+0x68>
 8001aa2:	428c      	cmp	r4, r1
 8001aa4:	d016      	beq.n	8001ad4 <__gedf2+0x5c>
 8001aa6:	2d00      	cmp	r5, #0
 8001aa8:	d11e      	bne.n	8001ae8 <__gedf2+0x70>
 8001aaa:	4330      	orrs	r0, r6
 8001aac:	4684      	mov	ip, r0
 8001aae:	2c00      	cmp	r4, #0
 8001ab0:	d101      	bne.n	8001ab6 <__gedf2+0x3e>
 8001ab2:	433a      	orrs	r2, r7
 8001ab4:	d023      	beq.n	8001afe <__gedf2+0x86>
 8001ab6:	4662      	mov	r2, ip
 8001ab8:	2a00      	cmp	r2, #0
 8001aba:	d01a      	beq.n	8001af2 <__gedf2+0x7a>
 8001abc:	459a      	cmp	sl, r3
 8001abe:	d029      	beq.n	8001b14 <__gedf2+0x9c>
 8001ac0:	4651      	mov	r1, sl
 8001ac2:	2002      	movs	r0, #2
 8001ac4:	3901      	subs	r1, #1
 8001ac6:	4008      	ands	r0, r1
 8001ac8:	3801      	subs	r0, #1
 8001aca:	bc1c      	pop	{r2, r3, r4}
 8001acc:	4690      	mov	r8, r2
 8001ace:	4699      	mov	r9, r3
 8001ad0:	46a2      	mov	sl, r4
 8001ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ad4:	0039      	movs	r1, r7
 8001ad6:	4311      	orrs	r1, r2
 8001ad8:	d0e5      	beq.n	8001aa6 <__gedf2+0x2e>
 8001ada:	2002      	movs	r0, #2
 8001adc:	4240      	negs	r0, r0
 8001ade:	e7f4      	b.n	8001aca <__gedf2+0x52>
 8001ae0:	4330      	orrs	r0, r6
 8001ae2:	d1fa      	bne.n	8001ada <__gedf2+0x62>
 8001ae4:	42ac      	cmp	r4, r5
 8001ae6:	d00f      	beq.n	8001b08 <__gedf2+0x90>
 8001ae8:	2c00      	cmp	r4, #0
 8001aea:	d10f      	bne.n	8001b0c <__gedf2+0x94>
 8001aec:	433a      	orrs	r2, r7
 8001aee:	d0e7      	beq.n	8001ac0 <__gedf2+0x48>
 8001af0:	e00c      	b.n	8001b0c <__gedf2+0x94>
 8001af2:	2201      	movs	r2, #1
 8001af4:	3b01      	subs	r3, #1
 8001af6:	4393      	bics	r3, r2
 8001af8:	0018      	movs	r0, r3
 8001afa:	3001      	adds	r0, #1
 8001afc:	e7e5      	b.n	8001aca <__gedf2+0x52>
 8001afe:	4663      	mov	r3, ip
 8001b00:	2000      	movs	r0, #0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0e1      	beq.n	8001aca <__gedf2+0x52>
 8001b06:	e7db      	b.n	8001ac0 <__gedf2+0x48>
 8001b08:	433a      	orrs	r2, r7
 8001b0a:	d1e6      	bne.n	8001ada <__gedf2+0x62>
 8001b0c:	459a      	cmp	sl, r3
 8001b0e:	d1d7      	bne.n	8001ac0 <__gedf2+0x48>
 8001b10:	42a5      	cmp	r5, r4
 8001b12:	dcd5      	bgt.n	8001ac0 <__gedf2+0x48>
 8001b14:	42a5      	cmp	r5, r4
 8001b16:	db05      	blt.n	8001b24 <__gedf2+0xac>
 8001b18:	42be      	cmp	r6, r7
 8001b1a:	d8d1      	bhi.n	8001ac0 <__gedf2+0x48>
 8001b1c:	d008      	beq.n	8001b30 <__gedf2+0xb8>
 8001b1e:	2000      	movs	r0, #0
 8001b20:	42be      	cmp	r6, r7
 8001b22:	d2d2      	bcs.n	8001aca <__gedf2+0x52>
 8001b24:	4650      	mov	r0, sl
 8001b26:	2301      	movs	r3, #1
 8001b28:	3801      	subs	r0, #1
 8001b2a:	4398      	bics	r0, r3
 8001b2c:	3001      	adds	r0, #1
 8001b2e:	e7cc      	b.n	8001aca <__gedf2+0x52>
 8001b30:	45c8      	cmp	r8, r9
 8001b32:	d8c5      	bhi.n	8001ac0 <__gedf2+0x48>
 8001b34:	2000      	movs	r0, #0
 8001b36:	45c8      	cmp	r8, r9
 8001b38:	d3f4      	bcc.n	8001b24 <__gedf2+0xac>
 8001b3a:	e7c6      	b.n	8001aca <__gedf2+0x52>
 8001b3c:	000007ff 	.word	0x000007ff

08001b40 <__ledf2>:
 8001b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b42:	464f      	mov	r7, r9
 8001b44:	4646      	mov	r6, r8
 8001b46:	46d6      	mov	lr, sl
 8001b48:	004d      	lsls	r5, r1, #1
 8001b4a:	b5c0      	push	{r6, r7, lr}
 8001b4c:	030e      	lsls	r6, r1, #12
 8001b4e:	0fc9      	lsrs	r1, r1, #31
 8001b50:	468a      	mov	sl, r1
 8001b52:	492e      	ldr	r1, [pc, #184]	; (8001c0c <__ledf2+0xcc>)
 8001b54:	031f      	lsls	r7, r3, #12
 8001b56:	005c      	lsls	r4, r3, #1
 8001b58:	4680      	mov	r8, r0
 8001b5a:	0b36      	lsrs	r6, r6, #12
 8001b5c:	0d6d      	lsrs	r5, r5, #21
 8001b5e:	4691      	mov	r9, r2
 8001b60:	0b3f      	lsrs	r7, r7, #12
 8001b62:	0d64      	lsrs	r4, r4, #21
 8001b64:	0fdb      	lsrs	r3, r3, #31
 8001b66:	428d      	cmp	r5, r1
 8001b68:	d018      	beq.n	8001b9c <__ledf2+0x5c>
 8001b6a:	428c      	cmp	r4, r1
 8001b6c:	d011      	beq.n	8001b92 <__ledf2+0x52>
 8001b6e:	2d00      	cmp	r5, #0
 8001b70:	d118      	bne.n	8001ba4 <__ledf2+0x64>
 8001b72:	4330      	orrs	r0, r6
 8001b74:	4684      	mov	ip, r0
 8001b76:	2c00      	cmp	r4, #0
 8001b78:	d11e      	bne.n	8001bb8 <__ledf2+0x78>
 8001b7a:	433a      	orrs	r2, r7
 8001b7c:	d11c      	bne.n	8001bb8 <__ledf2+0x78>
 8001b7e:	4663      	mov	r3, ip
 8001b80:	2000      	movs	r0, #0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d030      	beq.n	8001be8 <__ledf2+0xa8>
 8001b86:	4651      	mov	r1, sl
 8001b88:	2002      	movs	r0, #2
 8001b8a:	3901      	subs	r1, #1
 8001b8c:	4008      	ands	r0, r1
 8001b8e:	3801      	subs	r0, #1
 8001b90:	e02a      	b.n	8001be8 <__ledf2+0xa8>
 8001b92:	0039      	movs	r1, r7
 8001b94:	4311      	orrs	r1, r2
 8001b96:	d0ea      	beq.n	8001b6e <__ledf2+0x2e>
 8001b98:	2002      	movs	r0, #2
 8001b9a:	e025      	b.n	8001be8 <__ledf2+0xa8>
 8001b9c:	4330      	orrs	r0, r6
 8001b9e:	d1fb      	bne.n	8001b98 <__ledf2+0x58>
 8001ba0:	42ac      	cmp	r4, r5
 8001ba2:	d026      	beq.n	8001bf2 <__ledf2+0xb2>
 8001ba4:	2c00      	cmp	r4, #0
 8001ba6:	d126      	bne.n	8001bf6 <__ledf2+0xb6>
 8001ba8:	433a      	orrs	r2, r7
 8001baa:	d124      	bne.n	8001bf6 <__ledf2+0xb6>
 8001bac:	4651      	mov	r1, sl
 8001bae:	2002      	movs	r0, #2
 8001bb0:	3901      	subs	r1, #1
 8001bb2:	4008      	ands	r0, r1
 8001bb4:	3801      	subs	r0, #1
 8001bb6:	e017      	b.n	8001be8 <__ledf2+0xa8>
 8001bb8:	4662      	mov	r2, ip
 8001bba:	2a00      	cmp	r2, #0
 8001bbc:	d00f      	beq.n	8001bde <__ledf2+0x9e>
 8001bbe:	459a      	cmp	sl, r3
 8001bc0:	d1e1      	bne.n	8001b86 <__ledf2+0x46>
 8001bc2:	42a5      	cmp	r5, r4
 8001bc4:	db05      	blt.n	8001bd2 <__ledf2+0x92>
 8001bc6:	42be      	cmp	r6, r7
 8001bc8:	d8dd      	bhi.n	8001b86 <__ledf2+0x46>
 8001bca:	d019      	beq.n	8001c00 <__ledf2+0xc0>
 8001bcc:	2000      	movs	r0, #0
 8001bce:	42be      	cmp	r6, r7
 8001bd0:	d20a      	bcs.n	8001be8 <__ledf2+0xa8>
 8001bd2:	4650      	mov	r0, sl
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	3801      	subs	r0, #1
 8001bd8:	4398      	bics	r0, r3
 8001bda:	3001      	adds	r0, #1
 8001bdc:	e004      	b.n	8001be8 <__ledf2+0xa8>
 8001bde:	2201      	movs	r2, #1
 8001be0:	3b01      	subs	r3, #1
 8001be2:	4393      	bics	r3, r2
 8001be4:	0018      	movs	r0, r3
 8001be6:	3001      	adds	r0, #1
 8001be8:	bc1c      	pop	{r2, r3, r4}
 8001bea:	4690      	mov	r8, r2
 8001bec:	4699      	mov	r9, r3
 8001bee:	46a2      	mov	sl, r4
 8001bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bf2:	433a      	orrs	r2, r7
 8001bf4:	d1d0      	bne.n	8001b98 <__ledf2+0x58>
 8001bf6:	459a      	cmp	sl, r3
 8001bf8:	d1c5      	bne.n	8001b86 <__ledf2+0x46>
 8001bfa:	42a5      	cmp	r5, r4
 8001bfc:	dcc3      	bgt.n	8001b86 <__ledf2+0x46>
 8001bfe:	e7e0      	b.n	8001bc2 <__ledf2+0x82>
 8001c00:	45c8      	cmp	r8, r9
 8001c02:	d8c0      	bhi.n	8001b86 <__ledf2+0x46>
 8001c04:	2000      	movs	r0, #0
 8001c06:	45c8      	cmp	r8, r9
 8001c08:	d3e3      	bcc.n	8001bd2 <__ledf2+0x92>
 8001c0a:	e7ed      	b.n	8001be8 <__ledf2+0xa8>
 8001c0c:	000007ff 	.word	0x000007ff

08001c10 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c16:	1dfb      	adds	r3, r7, #7
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_Init+0x3c>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <HAL_Init+0x3c>)
 8001c22:	2140      	movs	r1, #64	; 0x40
 8001c24:	430a      	orrs	r2, r1
 8001c26:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c28:	2000      	movs	r0, #0
 8001c2a:	f005 fbed 	bl	8007408 <HAL_InitTick>
 8001c2e:	1e03      	subs	r3, r0, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001c32:	1dfb      	adds	r3, r7, #7
 8001c34:	2201      	movs	r2, #1
 8001c36:	701a      	strb	r2, [r3, #0]
 8001c38:	e001      	b.n	8001c3e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c3a:	f005 fb25 	bl	8007288 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c3e:	1dfb      	adds	r3, r7, #7
 8001c40:	781b      	ldrb	r3, [r3, #0]
}
 8001c42:	0018      	movs	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b002      	add	sp, #8
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	40022000 	.word	0x40022000

08001c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  uwTick++;
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <HAL_IncTick+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	4b02      	ldr	r3, [pc, #8]	; (8001c64 <HAL_IncTick+0x14>)
 8001c5c:	601a      	str	r2, [r3, #0]
}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000fc8 	.word	0x20000fc8

08001c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c6c:	4b02      	ldr	r3, [pc, #8]	; (8001c78 <HAL_GetTick+0x10>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	0018      	movs	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	20000fc8 	.word	0x20000fc8

08001c7c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e159      	b.n	8001f42 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10a      	bne.n	8001cac <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2250      	movs	r2, #80	; 0x50
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f005 fb12 	bl	80072d0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb0:	2210      	movs	r2, #16
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b10      	cmp	r3, #16
 8001cb6:	d005      	beq.n	8001cc4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2204      	movs	r2, #4
 8001cc0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001cc2:	d00b      	beq.n	8001cdc <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc8:	2210      	movs	r2, #16
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2250      	movs	r2, #80	; 0x50
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e132      	b.n	8001f42 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce0:	4a9a      	ldr	r2, [pc, #616]	; (8001f4c <HAL_ADC_Init+0x2d0>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d108      	bne.n	8001d0c <HAL_ADC_Init+0x90>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2201      	movs	r2, #1
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <HAL_ADC_Init+0x90>
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <HAL_ADC_Init+0x92>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d149      	bne.n	8001da6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	23c0      	movs	r3, #192	; 0xc0
 8001d18:	061b      	lsls	r3, r3, #24
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d00b      	beq.n	8001d36 <HAL_ADC_Init+0xba>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	2380      	movs	r3, #128	; 0x80
 8001d24:	05db      	lsls	r3, r3, #23
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d005      	beq.n	8001d36 <HAL_ADC_Init+0xba>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	2380      	movs	r3, #128	; 0x80
 8001d30:	061b      	lsls	r3, r3, #24
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d111      	bne.n	8001d5a <HAL_ADC_Init+0xde>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	0092      	lsls	r2, r2, #2
 8001d42:	0892      	lsrs	r2, r2, #2
 8001d44:	611a      	str	r2, [r3, #16]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6919      	ldr	r1, [r3, #16]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	611a      	str	r2, [r3, #16]
 8001d58:	e014      	b.n	8001d84 <HAL_ADC_Init+0x108>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	691a      	ldr	r2, [r3, #16]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	0092      	lsls	r2, r2, #2
 8001d66:	0892      	lsrs	r2, r2, #2
 8001d68:	611a      	str	r2, [r3, #16]
 8001d6a:	4b79      	ldr	r3, [pc, #484]	; (8001f50 <HAL_ADC_Init+0x2d4>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	4b78      	ldr	r3, [pc, #480]	; (8001f50 <HAL_ADC_Init+0x2d4>)
 8001d70:	4978      	ldr	r1, [pc, #480]	; (8001f54 <HAL_ADC_Init+0x2d8>)
 8001d72:	400a      	ands	r2, r1
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	4b76      	ldr	r3, [pc, #472]	; (8001f50 <HAL_ADC_Init+0x2d4>)
 8001d78:	6819      	ldr	r1, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	4b74      	ldr	r3, [pc, #464]	; (8001f50 <HAL_ADC_Init+0x2d4>)
 8001d80:	430a      	orrs	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2118      	movs	r1, #24
 8001d90:	438a      	bics	r2, r1
 8001d92:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68d9      	ldr	r1, [r3, #12]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001da6:	4b6a      	ldr	r3, [pc, #424]	; (8001f50 <HAL_ADC_Init+0x2d4>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	4b69      	ldr	r3, [pc, #420]	; (8001f50 <HAL_ADC_Init+0x2d4>)
 8001dac:	496a      	ldr	r1, [pc, #424]	; (8001f58 <HAL_ADC_Init+0x2dc>)
 8001dae:	400a      	ands	r2, r1
 8001db0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8001db2:	4b67      	ldr	r3, [pc, #412]	; (8001f50 <HAL_ADC_Init+0x2d4>)
 8001db4:	6819      	ldr	r1, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dba:	065a      	lsls	r2, r3, #25
 8001dbc:	4b64      	ldr	r3, [pc, #400]	; (8001f50 <HAL_ADC_Init+0x2d4>)
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	055b      	lsls	r3, r3, #21
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d108      	bne.n	8001de2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2180      	movs	r1, #128	; 0x80
 8001ddc:	0549      	lsls	r1, r1, #21
 8001dde:	430a      	orrs	r2, r1
 8001de0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	495b      	ldr	r1, [pc, #364]	; (8001f5c <HAL_ADC_Init+0x2e0>)
 8001dee:	400a      	ands	r2, r1
 8001df0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68d9      	ldr	r1, [r3, #12]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d101      	bne.n	8001e08 <HAL_ADC_Init+0x18c>
 8001e04:	2304      	movs	r3, #4
 8001e06:	e000      	b.n	8001e0a <HAL_ADC_Init+0x18e>
 8001e08:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001e0a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2020      	movs	r0, #32
 8001e10:	5c1b      	ldrb	r3, [r3, r0]
 8001e12:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001e14:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	202c      	movs	r0, #44	; 0x2c
 8001e1a:	5c1b      	ldrb	r3, [r3, r0]
 8001e1c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001e1e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001e24:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001e2c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001e34:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e42:	23c2      	movs	r3, #194	; 0xc2
 8001e44:	33ff      	adds	r3, #255	; 0xff
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d00b      	beq.n	8001e62 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68d9      	ldr	r1, [r3, #12]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2221      	movs	r2, #33	; 0x21
 8001e66:	5c9b      	ldrb	r3, [r3, r2]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d11a      	bne.n	8001ea2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2220      	movs	r2, #32
 8001e70:	5c9b      	ldrb	r3, [r3, r2]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d109      	bne.n	8001e8a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2180      	movs	r1, #128	; 0x80
 8001e82:	0249      	lsls	r1, r1, #9
 8001e84:	430a      	orrs	r2, r1
 8001e86:	60da      	str	r2, [r3, #12]
 8001e88:	e00b      	b.n	8001ea2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8e:	2220      	movs	r2, #32
 8001e90:	431a      	orrs	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d11f      	bne.n	8001eea <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	492a      	ldr	r1, [pc, #168]	; (8001f60 <HAL_ADC_Init+0x2e4>)
 8001eb6:	400a      	ands	r2, r1
 8001eb8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6919      	ldr	r1, [r3, #16]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001ec8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8001ece:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691a      	ldr	r2, [r3, #16]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	611a      	str	r2, [r3, #16]
 8001ee8:	e00e      	b.n	8001f08 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d107      	bne.n	8001f08 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691a      	ldr	r2, [r3, #16]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2101      	movs	r1, #1
 8001f04:	438a      	bics	r2, r1
 8001f06:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695a      	ldr	r2, [r3, #20]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2107      	movs	r1, #7
 8001f14:	438a      	bics	r2, r1
 8001f16:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6959      	ldr	r1, [r3, #20]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f34:	2203      	movs	r2, #3
 8001f36:	4393      	bics	r3, r2
 8001f38:	2201      	movs	r2, #1
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	0018      	movs	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	b002      	add	sp, #8
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	fffffefd 	.word	0xfffffefd
 8001f50:	40012708 	.word	0x40012708
 8001f54:	ffc3ffff 	.word	0xffc3ffff
 8001f58:	fdffffff 	.word	0xfdffffff
 8001f5c:	fffe0219 	.word	0xfffe0219
 8001f60:	fffffc03 	.word	0xfffffc03

08001f64 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001f64:	b590      	push	{r4, r7, lr}
 8001f66:	b087      	sub	sp, #28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f70:	2317      	movs	r3, #23
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2204      	movs	r2, #4
 8001f80:	4013      	ands	r3, r2
 8001f82:	d15e      	bne.n	8002042 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2250      	movs	r2, #80	; 0x50
 8001f88:	5c9b      	ldrb	r3, [r3, r2]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_ADC_Start_DMA+0x2e>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e05e      	b.n	8002050 <HAL_ADC_Start_DMA+0xec>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2250      	movs	r2, #80	; 0x50
 8001f96:	2101      	movs	r1, #1
 8001f98:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d007      	beq.n	8001fb2 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001fa2:	2317      	movs	r3, #23
 8001fa4:	18fc      	adds	r4, r7, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f000 f9bf 	bl	800232c <ADC_Enable>
 8001fae:	0003      	movs	r3, r0
 8001fb0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fb2:	2317      	movs	r3, #23
 8001fb4:	18fb      	adds	r3, r7, r3
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d146      	bne.n	800204a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc0:	4a25      	ldr	r2, [pc, #148]	; (8002058 <HAL_ADC_Start_DMA+0xf4>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	2280      	movs	r2, #128	; 0x80
 8001fc6:	0052      	lsls	r2, r2, #1
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2250      	movs	r2, #80	; 0x50
 8001fd8:	2100      	movs	r1, #0
 8001fda:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe0:	4a1e      	ldr	r2, [pc, #120]	; (800205c <HAL_ADC_Start_DMA+0xf8>)
 8001fe2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe8:	4a1d      	ldr	r2, [pc, #116]	; (8002060 <HAL_ADC_Start_DMA+0xfc>)
 8001fea:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff0:	4a1c      	ldr	r2, [pc, #112]	; (8002064 <HAL_ADC_Start_DMA+0x100>)
 8001ff2:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	221c      	movs	r2, #28
 8001ffa:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2110      	movs	r1, #16
 8002008:	430a      	orrs	r2, r1
 800200a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2101      	movs	r1, #1
 8002018:	430a      	orrs	r2, r1
 800201a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	3340      	adds	r3, #64	; 0x40
 8002026:	0019      	movs	r1, r3
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f000 fba2 	bl	8002774 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2104      	movs	r1, #4
 800203c:	430a      	orrs	r2, r1
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	e003      	b.n	800204a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002042:	2317      	movs	r3, #23
 8002044:	18fb      	adds	r3, r7, r3
 8002046:	2202      	movs	r2, #2
 8002048:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800204a:	2317      	movs	r3, #23
 800204c:	18fb      	adds	r3, r7, r3
 800204e:	781b      	ldrb	r3, [r3, #0]
}
 8002050:	0018      	movs	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	b007      	add	sp, #28
 8002056:	bd90      	pop	{r4, r7, pc}
 8002058:	fffff0fe 	.word	0xfffff0fe
 800205c:	080023ed 	.word	0x080023ed
 8002060:	080024a1 	.word	0x080024a1
 8002064:	080024bf 	.word	0x080024bf

08002068 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2204      	movs	r2, #4
 8002078:	4013      	ands	r3, r2
 800207a:	2b04      	cmp	r3, #4
 800207c:	d106      	bne.n	800208c <HAL_ADC_IRQHandler+0x24>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2204      	movs	r2, #4
 8002086:	4013      	ands	r3, r2
 8002088:	2b04      	cmp	r3, #4
 800208a:	d00d      	beq.n	80020a8 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2208      	movs	r2, #8
 8002094:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002096:	2b08      	cmp	r3, #8
 8002098:	d154      	bne.n	8002144 <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2208      	movs	r2, #8
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d14d      	bne.n	8002144 <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ac:	2210      	movs	r2, #16
 80020ae:	4013      	ands	r3, r2
 80020b0:	d106      	bne.n	80020c0 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b6:	2280      	movs	r2, #128	; 0x80
 80020b8:	0092      	lsls	r2, r2, #2
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	23c0      	movs	r3, #192	; 0xc0
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	4013      	ands	r3, r2
 80020cc:	d12e      	bne.n	800212c <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2220      	movs	r2, #32
 80020d2:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d129      	bne.n	800212c <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2208      	movs	r2, #8
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d122      	bne.n	800212c <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	2204      	movs	r2, #4
 80020ee:	4013      	ands	r3, r2
 80020f0:	d110      	bne.n	8002114 <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	210c      	movs	r1, #12
 80020fe:	438a      	bics	r2, r1
 8002100:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002106:	4a35      	ldr	r2, [pc, #212]	; (80021dc <HAL_ADC_IRQHandler+0x174>)
 8002108:	4013      	ands	r3, r2
 800210a:	2201      	movs	r2, #1
 800210c:	431a      	orrs	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	655a      	str	r2, [r3, #84]	; 0x54
 8002112:	e00b      	b.n	800212c <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002118:	2220      	movs	r2, #32
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002124:	2201      	movs	r2, #1
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	0018      	movs	r0, r3
 8002130:	f000 f856 	bl	80021e0 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d003      	beq.n	8002144 <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	220c      	movs	r2, #12
 8002142:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2280      	movs	r2, #128	; 0x80
 800214c:	4013      	ands	r3, r2
 800214e:	2b80      	cmp	r3, #128	; 0x80
 8002150:	d115      	bne.n	800217e <HAL_ADC_IRQHandler+0x116>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2280      	movs	r2, #128	; 0x80
 800215a:	4013      	ands	r3, r2
 800215c:	2b80      	cmp	r3, #128	; 0x80
 800215e:	d10e      	bne.n	800217e <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002164:	2280      	movs	r2, #128	; 0x80
 8002166:	0252      	lsls	r2, r2, #9
 8002168:	431a      	orrs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	0018      	movs	r0, r3
 8002172:	f000 f845 	bl	8002200 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2280      	movs	r2, #128	; 0x80
 800217c:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2210      	movs	r2, #16
 8002186:	4013      	ands	r3, r2
 8002188:	2b10      	cmp	r3, #16
 800218a:	d123      	bne.n	80021d4 <HAL_ADC_IRQHandler+0x16c>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2210      	movs	r2, #16
 8002194:	4013      	ands	r3, r2
 8002196:	2b10      	cmp	r3, #16
 8002198:	d11c      	bne.n	80021d4 <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d006      	beq.n	80021b0 <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	2201      	movs	r2, #1
 80021aa:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d10d      	bne.n	80021cc <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b4:	2202      	movs	r2, #2
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2210      	movs	r2, #16
 80021c2:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	0018      	movs	r0, r3
 80021c8:	f000 f822 	bl	8002210 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2210      	movs	r2, #16
 80021d2:	601a      	str	r2, [r3, #0]
  }
  
}
 80021d4:	46c0      	nop			; (mov r8, r8)
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b002      	add	sp, #8
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	fffffefe 	.word	0xfffffefe

080021e0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b002      	add	sp, #8
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80021f8:	46c0      	nop			; (mov r8, r8)
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b002      	add	sp, #8
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002208:	46c0      	nop			; (mov r8, r8)
 800220a:	46bd      	mov	sp, r7
 800220c:	b002      	add	sp, #8
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002218:	46c0      	nop			; (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	b002      	add	sp, #8
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2250      	movs	r2, #80	; 0x50
 800222e:	5c9b      	ldrb	r3, [r3, r2]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x18>
 8002234:	2302      	movs	r3, #2
 8002236:	e06c      	b.n	8002312 <HAL_ADC_ConfigChannel+0xf2>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2250      	movs	r2, #80	; 0x50
 800223c:	2101      	movs	r1, #1
 800223e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2204      	movs	r2, #4
 8002248:	4013      	ands	r3, r2
 800224a:	d00b      	beq.n	8002264 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002250:	2220      	movs	r2, #32
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2250      	movs	r2, #80	; 0x50
 800225c:	2100      	movs	r1, #0
 800225e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e056      	b.n	8002312 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4a2c      	ldr	r2, [pc, #176]	; (800231c <HAL_ADC_ConfigChannel+0xfc>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d028      	beq.n	80022c0 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	035b      	lsls	r3, r3, #13
 800227a:	0b5a      	lsrs	r2, r3, #13
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	02db      	lsls	r3, r3, #11
 800228c:	4013      	ands	r3, r2
 800228e:	d009      	beq.n	80022a4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8002290:	4b23      	ldr	r3, [pc, #140]	; (8002320 <HAL_ADC_ConfigChannel+0x100>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4b22      	ldr	r3, [pc, #136]	; (8002320 <HAL_ADC_ConfigChannel+0x100>)
 8002296:	2180      	movs	r1, #128	; 0x80
 8002298:	0409      	lsls	r1, r1, #16
 800229a:	430a      	orrs	r2, r1
 800229c:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800229e:	200a      	movs	r0, #10
 80022a0:	f000 f928 	bl	80024f4 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	2380      	movs	r3, #128	; 0x80
 80022aa:	029b      	lsls	r3, r3, #10
 80022ac:	4013      	ands	r3, r2
 80022ae:	d02b      	beq.n	8002308 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80022b0:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <HAL_ADC_ConfigChannel+0x100>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <HAL_ADC_ConfigChannel+0x100>)
 80022b6:	2180      	movs	r1, #128	; 0x80
 80022b8:	03c9      	lsls	r1, r1, #15
 80022ba:	430a      	orrs	r2, r1
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	e023      	b.n	8002308 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	035b      	lsls	r3, r3, #13
 80022cc:	0b5b      	lsrs	r3, r3, #13
 80022ce:	43d9      	mvns	r1, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	400a      	ands	r2, r1
 80022d6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	02db      	lsls	r3, r3, #11
 80022e0:	4013      	ands	r3, r2
 80022e2:	d005      	beq.n	80022f0 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80022e4:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <HAL_ADC_ConfigChannel+0x100>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <HAL_ADC_ConfigChannel+0x100>)
 80022ea:	490e      	ldr	r1, [pc, #56]	; (8002324 <HAL_ADC_ConfigChannel+0x104>)
 80022ec:	400a      	ands	r2, r1
 80022ee:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	029b      	lsls	r3, r3, #10
 80022f8:	4013      	ands	r3, r2
 80022fa:	d005      	beq.n	8002308 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80022fc:	4b08      	ldr	r3, [pc, #32]	; (8002320 <HAL_ADC_ConfigChannel+0x100>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b07      	ldr	r3, [pc, #28]	; (8002320 <HAL_ADC_ConfigChannel+0x100>)
 8002302:	4909      	ldr	r1, [pc, #36]	; (8002328 <HAL_ADC_ConfigChannel+0x108>)
 8002304:	400a      	ands	r2, r1
 8002306:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2250      	movs	r2, #80	; 0x50
 800230c:	2100      	movs	r1, #0
 800230e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	0018      	movs	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	b002      	add	sp, #8
 8002318:	bd80      	pop	{r7, pc}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	00001001 	.word	0x00001001
 8002320:	40012708 	.word	0x40012708
 8002324:	ff7fffff 	.word	0xff7fffff
 8002328:	ffbfffff 	.word	0xffbfffff

0800232c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2203      	movs	r2, #3
 8002340:	4013      	ands	r3, r2
 8002342:	2b01      	cmp	r3, #1
 8002344:	d108      	bne.n	8002358 <ADC_Enable+0x2c>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2201      	movs	r2, #1
 800234e:	4013      	ands	r3, r2
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <ADC_Enable+0x2c>
 8002354:	2301      	movs	r3, #1
 8002356:	e000      	b.n	800235a <ADC_Enable+0x2e>
 8002358:	2300      	movs	r3, #0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d13f      	bne.n	80023de <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	4a20      	ldr	r2, [pc, #128]	; (80023e8 <ADC_Enable+0xbc>)
 8002366:	4013      	ands	r3, r2
 8002368:	d00d      	beq.n	8002386 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236e:	2210      	movs	r2, #16
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237a:	2201      	movs	r2, #1
 800237c:	431a      	orrs	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e02c      	b.n	80023e0 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2101      	movs	r1, #1
 8002392:	430a      	orrs	r2, r1
 8002394:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002396:	2001      	movs	r0, #1
 8002398:	f000 f8ac 	bl	80024f4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800239c:	f7ff fc64 	bl	8001c68 <HAL_GetTick>
 80023a0:	0003      	movs	r3, r0
 80023a2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80023a4:	e014      	b.n	80023d0 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023a6:	f7ff fc5f 	bl	8001c68 <HAL_GetTick>
 80023aa:	0002      	movs	r2, r0
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b0a      	cmp	r3, #10
 80023b2:	d90d      	bls.n	80023d0 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b8:	2210      	movs	r2, #16
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c4:	2201      	movs	r2, #1
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e007      	b.n	80023e0 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2201      	movs	r2, #1
 80023d8:	4013      	ands	r3, r2
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d1e3      	bne.n	80023a6 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	0018      	movs	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b004      	add	sp, #16
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	80000017 	.word	0x80000017

080023ec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fe:	2250      	movs	r2, #80	; 0x50
 8002400:	4013      	ands	r3, r2
 8002402:	d141      	bne.n	8002488 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002408:	2280      	movs	r2, #128	; 0x80
 800240a:	0092      	lsls	r2, r2, #2
 800240c:	431a      	orrs	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	23c0      	movs	r3, #192	; 0xc0
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	4013      	ands	r3, r2
 800241e:	d12e      	bne.n	800247e <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2220      	movs	r2, #32
 8002424:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002426:	2b00      	cmp	r3, #0
 8002428:	d129      	bne.n	800247e <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2208      	movs	r2, #8
 8002432:	4013      	ands	r3, r2
 8002434:	2b08      	cmp	r3, #8
 8002436:	d122      	bne.n	800247e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2204      	movs	r2, #4
 8002440:	4013      	ands	r3, r2
 8002442:	d110      	bne.n	8002466 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	210c      	movs	r1, #12
 8002450:	438a      	bics	r2, r1
 8002452:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002458:	4a10      	ldr	r2, [pc, #64]	; (800249c <ADC_DMAConvCplt+0xb0>)
 800245a:	4013      	ands	r3, r2
 800245c:	2201      	movs	r2, #1
 800245e:	431a      	orrs	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	655a      	str	r2, [r3, #84]	; 0x54
 8002464:	e00b      	b.n	800247e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246a:	2220      	movs	r2, #32
 800246c:	431a      	orrs	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002476:	2201      	movs	r2, #1
 8002478:	431a      	orrs	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	0018      	movs	r0, r3
 8002482:	f7ff fead 	bl	80021e0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002486:	e005      	b.n	8002494 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	0010      	movs	r0, r2
 8002492:	4798      	blx	r3
}
 8002494:	46c0      	nop			; (mov r8, r8)
 8002496:	46bd      	mov	sp, r7
 8002498:	b004      	add	sp, #16
 800249a:	bd80      	pop	{r7, pc}
 800249c:	fffffefe 	.word	0xfffffefe

080024a0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ac:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	0018      	movs	r0, r3
 80024b2:	f7ff fe9d 	bl	80021f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b004      	add	sp, #16
 80024bc:	bd80      	pop	{r7, pc}

080024be <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b084      	sub	sp, #16
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ca:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d0:	2240      	movs	r2, #64	; 0x40
 80024d2:	431a      	orrs	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024dc:	2204      	movs	r2, #4
 80024de:	431a      	orrs	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	0018      	movs	r0, r3
 80024e8:	f7ff fe92 	bl	8002210 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024ec:	46c0      	nop			; (mov r8, r8)
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b004      	add	sp, #16
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80024fc:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <ADC_DelayMicroSecond+0x34>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	490a      	ldr	r1, [pc, #40]	; (800252c <ADC_DelayMicroSecond+0x38>)
 8002502:	0018      	movs	r0, r3
 8002504:	f7fd fe00 	bl	8000108 <__udivsi3>
 8002508:	0003      	movs	r3, r0
 800250a:	001a      	movs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4353      	muls	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8002512:	e002      	b.n	800251a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	3b01      	subs	r3, #1
 8002518:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1f9      	bne.n	8002514 <ADC_DelayMicroSecond+0x20>
  } 
}
 8002520:	46c0      	nop			; (mov r8, r8)
 8002522:	46bd      	mov	sp, r7
 8002524:	b004      	add	sp, #16
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000004 	.word	0x20000004
 800252c:	000f4240 	.word	0x000f4240

08002530 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	0002      	movs	r2, r0
 8002538:	1dfb      	adds	r3, r7, #7
 800253a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800253c:	1dfb      	adds	r3, r7, #7
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	001a      	movs	r2, r3
 8002542:	231f      	movs	r3, #31
 8002544:	401a      	ands	r2, r3
 8002546:	4b04      	ldr	r3, [pc, #16]	; (8002558 <NVIC_EnableIRQ+0x28>)
 8002548:	2101      	movs	r1, #1
 800254a:	4091      	lsls	r1, r2
 800254c:	000a      	movs	r2, r1
 800254e:	601a      	str	r2, [r3, #0]
}
 8002550:	46c0      	nop			; (mov r8, r8)
 8002552:	46bd      	mov	sp, r7
 8002554:	b002      	add	sp, #8
 8002556:	bd80      	pop	{r7, pc}
 8002558:	e000e100 	.word	0xe000e100

0800255c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800255c:	b590      	push	{r4, r7, lr}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	0002      	movs	r2, r0
 8002564:	6039      	str	r1, [r7, #0]
 8002566:	1dfb      	adds	r3, r7, #7
 8002568:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800256a:	1dfb      	adds	r3, r7, #7
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b7f      	cmp	r3, #127	; 0x7f
 8002570:	d932      	bls.n	80025d8 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002572:	4a2f      	ldr	r2, [pc, #188]	; (8002630 <NVIC_SetPriority+0xd4>)
 8002574:	1dfb      	adds	r3, r7, #7
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	0019      	movs	r1, r3
 800257a:	230f      	movs	r3, #15
 800257c:	400b      	ands	r3, r1
 800257e:	3b08      	subs	r3, #8
 8002580:	089b      	lsrs	r3, r3, #2
 8002582:	3306      	adds	r3, #6
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	18d3      	adds	r3, r2, r3
 8002588:	3304      	adds	r3, #4
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	1dfa      	adds	r2, r7, #7
 800258e:	7812      	ldrb	r2, [r2, #0]
 8002590:	0011      	movs	r1, r2
 8002592:	2203      	movs	r2, #3
 8002594:	400a      	ands	r2, r1
 8002596:	00d2      	lsls	r2, r2, #3
 8002598:	21ff      	movs	r1, #255	; 0xff
 800259a:	4091      	lsls	r1, r2
 800259c:	000a      	movs	r2, r1
 800259e:	43d2      	mvns	r2, r2
 80025a0:	401a      	ands	r2, r3
 80025a2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	019b      	lsls	r3, r3, #6
 80025a8:	22ff      	movs	r2, #255	; 0xff
 80025aa:	401a      	ands	r2, r3
 80025ac:	1dfb      	adds	r3, r7, #7
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	0018      	movs	r0, r3
 80025b2:	2303      	movs	r3, #3
 80025b4:	4003      	ands	r3, r0
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025ba:	481d      	ldr	r0, [pc, #116]	; (8002630 <NVIC_SetPriority+0xd4>)
 80025bc:	1dfb      	adds	r3, r7, #7
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	001c      	movs	r4, r3
 80025c2:	230f      	movs	r3, #15
 80025c4:	4023      	ands	r3, r4
 80025c6:	3b08      	subs	r3, #8
 80025c8:	089b      	lsrs	r3, r3, #2
 80025ca:	430a      	orrs	r2, r1
 80025cc:	3306      	adds	r3, #6
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	18c3      	adds	r3, r0, r3
 80025d2:	3304      	adds	r3, #4
 80025d4:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80025d6:	e027      	b.n	8002628 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025d8:	4a16      	ldr	r2, [pc, #88]	; (8002634 <NVIC_SetPriority+0xd8>)
 80025da:	1dfb      	adds	r3, r7, #7
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	b25b      	sxtb	r3, r3
 80025e0:	089b      	lsrs	r3, r3, #2
 80025e2:	33c0      	adds	r3, #192	; 0xc0
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	589b      	ldr	r3, [r3, r2]
 80025e8:	1dfa      	adds	r2, r7, #7
 80025ea:	7812      	ldrb	r2, [r2, #0]
 80025ec:	0011      	movs	r1, r2
 80025ee:	2203      	movs	r2, #3
 80025f0:	400a      	ands	r2, r1
 80025f2:	00d2      	lsls	r2, r2, #3
 80025f4:	21ff      	movs	r1, #255	; 0xff
 80025f6:	4091      	lsls	r1, r2
 80025f8:	000a      	movs	r2, r1
 80025fa:	43d2      	mvns	r2, r2
 80025fc:	401a      	ands	r2, r3
 80025fe:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	019b      	lsls	r3, r3, #6
 8002604:	22ff      	movs	r2, #255	; 0xff
 8002606:	401a      	ands	r2, r3
 8002608:	1dfb      	adds	r3, r7, #7
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	0018      	movs	r0, r3
 800260e:	2303      	movs	r3, #3
 8002610:	4003      	ands	r3, r0
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002616:	4807      	ldr	r0, [pc, #28]	; (8002634 <NVIC_SetPriority+0xd8>)
 8002618:	1dfb      	adds	r3, r7, #7
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	b25b      	sxtb	r3, r3
 800261e:	089b      	lsrs	r3, r3, #2
 8002620:	430a      	orrs	r2, r1
 8002622:	33c0      	adds	r3, #192	; 0xc0
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	501a      	str	r2, [r3, r0]
}
 8002628:	46c0      	nop			; (mov r8, r8)
 800262a:	46bd      	mov	sp, r7
 800262c:	b003      	add	sp, #12
 800262e:	bd90      	pop	{r4, r7, pc}
 8002630:	e000ed00 	.word	0xe000ed00
 8002634:	e000e100 	.word	0xe000e100

08002638 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	210f      	movs	r1, #15
 8002644:	187b      	adds	r3, r7, r1
 8002646:	1c02      	adds	r2, r0, #0
 8002648:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	187b      	adds	r3, r7, r1
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	b25b      	sxtb	r3, r3
 8002652:	0011      	movs	r1, r2
 8002654:	0018      	movs	r0, r3
 8002656:	f7ff ff81 	bl	800255c <NVIC_SetPriority>
}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	46bd      	mov	sp, r7
 800265e:	b004      	add	sp, #16
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	0002      	movs	r2, r0
 800266a:	1dfb      	adds	r3, r7, #7
 800266c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800266e:	1dfb      	adds	r3, r7, #7
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	b25b      	sxtb	r3, r3
 8002674:	0018      	movs	r0, r3
 8002676:	f7ff ff5b 	bl	8002530 <NVIC_EnableIRQ>
}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	46bd      	mov	sp, r7
 800267e:	b002      	add	sp, #8
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e061      	b.n	800275a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a32      	ldr	r2, [pc, #200]	; (8002764 <HAL_DMA_Init+0xe0>)
 800269c:	4694      	mov	ip, r2
 800269e:	4463      	add	r3, ip
 80026a0:	2114      	movs	r1, #20
 80026a2:	0018      	movs	r0, r3
 80026a4:	f7fd fd30 	bl	8000108 <__udivsi3>
 80026a8:	0003      	movs	r3, r0
 80026aa:	009a      	lsls	r2, r3, #2
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a2d      	ldr	r2, [pc, #180]	; (8002768 <HAL_DMA_Init+0xe4>)
 80026b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2225      	movs	r2, #37	; 0x25
 80026ba:	2102      	movs	r1, #2
 80026bc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4a28      	ldr	r2, [pc, #160]	; (800276c <HAL_DMA_Init+0xe8>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80026d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	01db      	lsls	r3, r3, #7
 800270c:	429a      	cmp	r2, r3
 800270e:	d018      	beq.n	8002742 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002710:	4b17      	ldr	r3, [pc, #92]	; (8002770 <HAL_DMA_Init+0xec>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002718:	211c      	movs	r1, #28
 800271a:	400b      	ands	r3, r1
 800271c:	210f      	movs	r1, #15
 800271e:	4099      	lsls	r1, r3
 8002720:	000b      	movs	r3, r1
 8002722:	43d9      	mvns	r1, r3
 8002724:	4b12      	ldr	r3, [pc, #72]	; (8002770 <HAL_DMA_Init+0xec>)
 8002726:	400a      	ands	r2, r1
 8002728:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800272a:	4b11      	ldr	r3, [pc, #68]	; (8002770 <HAL_DMA_Init+0xec>)
 800272c:	6819      	ldr	r1, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	201c      	movs	r0, #28
 8002738:	4003      	ands	r3, r0
 800273a:	409a      	lsls	r2, r3
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <HAL_DMA_Init+0xec>)
 800273e:	430a      	orrs	r2, r1
 8002740:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2225      	movs	r2, #37	; 0x25
 800274c:	2101      	movs	r1, #1
 800274e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2224      	movs	r2, #36	; 0x24
 8002754:	2100      	movs	r1, #0
 8002756:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	0018      	movs	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	b004      	add	sp, #16
 8002760:	bd80      	pop	{r7, pc}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	bffdfff8 	.word	0xbffdfff8
 8002768:	40020000 	.word	0x40020000
 800276c:	ffff800f 	.word	0xffff800f
 8002770:	400200a8 	.word	0x400200a8

08002774 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
 8002780:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002782:	2317      	movs	r3, #23
 8002784:	18fb      	adds	r3, r7, r3
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2224      	movs	r2, #36	; 0x24
 800278e:	5c9b      	ldrb	r3, [r3, r2]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_DMA_Start_IT+0x24>
 8002794:	2302      	movs	r3, #2
 8002796:	e04f      	b.n	8002838 <HAL_DMA_Start_IT+0xc4>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2224      	movs	r2, #36	; 0x24
 800279c:	2101      	movs	r1, #1
 800279e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2225      	movs	r2, #37	; 0x25
 80027a4:	5c9b      	ldrb	r3, [r3, r2]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d13a      	bne.n	8002822 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2225      	movs	r2, #37	; 0x25
 80027b0:	2102      	movs	r1, #2
 80027b2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2101      	movs	r1, #1
 80027c6:	438a      	bics	r2, r1
 80027c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	68b9      	ldr	r1, [r7, #8]
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 f8e3 	bl	800299c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d008      	beq.n	80027f0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	210e      	movs	r1, #14
 80027ea:	430a      	orrs	r2, r1
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	e00f      	b.n	8002810 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2104      	movs	r1, #4
 80027fc:	438a      	bics	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	210a      	movs	r1, #10
 800280c:	430a      	orrs	r2, r1
 800280e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2101      	movs	r1, #1
 800281c:	430a      	orrs	r2, r1
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	e007      	b.n	8002832 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2224      	movs	r2, #36	; 0x24
 8002826:	2100      	movs	r1, #0
 8002828:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800282a:	2317      	movs	r3, #23
 800282c:	18fb      	adds	r3, r7, r3
 800282e:	2202      	movs	r2, #2
 8002830:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8002832:	2317      	movs	r3, #23
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	781b      	ldrb	r3, [r3, #0]
}
 8002838:	0018      	movs	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	b006      	add	sp, #24
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285c:	221c      	movs	r2, #28
 800285e:	4013      	ands	r3, r2
 8002860:	2204      	movs	r2, #4
 8002862:	409a      	lsls	r2, r3
 8002864:	0013      	movs	r3, r2
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4013      	ands	r3, r2
 800286a:	d026      	beq.n	80028ba <HAL_DMA_IRQHandler+0x7a>
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2204      	movs	r2, #4
 8002870:	4013      	ands	r3, r2
 8002872:	d022      	beq.n	80028ba <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2220      	movs	r2, #32
 800287c:	4013      	ands	r3, r2
 800287e:	d107      	bne.n	8002890 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2104      	movs	r1, #4
 800288c:	438a      	bics	r2, r1
 800288e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002894:	221c      	movs	r2, #28
 8002896:	401a      	ands	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	2104      	movs	r1, #4
 800289e:	4091      	lsls	r1, r2
 80028a0:	000a      	movs	r2, r1
 80028a2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d100      	bne.n	80028ae <HAL_DMA_IRQHandler+0x6e>
 80028ac:	e071      	b.n	8002992 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	0010      	movs	r0, r2
 80028b6:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80028b8:	e06b      	b.n	8002992 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	221c      	movs	r2, #28
 80028c0:	4013      	ands	r3, r2
 80028c2:	2202      	movs	r2, #2
 80028c4:	409a      	lsls	r2, r3
 80028c6:	0013      	movs	r3, r2
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4013      	ands	r3, r2
 80028cc:	d02d      	beq.n	800292a <HAL_DMA_IRQHandler+0xea>
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2202      	movs	r2, #2
 80028d2:	4013      	ands	r3, r2
 80028d4:	d029      	beq.n	800292a <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2220      	movs	r2, #32
 80028de:	4013      	ands	r3, r2
 80028e0:	d10b      	bne.n	80028fa <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	210a      	movs	r1, #10
 80028ee:	438a      	bics	r2, r1
 80028f0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2225      	movs	r2, #37	; 0x25
 80028f6:	2101      	movs	r1, #1
 80028f8:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	221c      	movs	r2, #28
 8002900:	401a      	ands	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	2102      	movs	r1, #2
 8002908:	4091      	lsls	r1, r2
 800290a:	000a      	movs	r2, r1
 800290c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2224      	movs	r2, #36	; 0x24
 8002912:	2100      	movs	r1, #0
 8002914:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291a:	2b00      	cmp	r3, #0
 800291c:	d039      	beq.n	8002992 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	0010      	movs	r0, r2
 8002926:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002928:	e033      	b.n	8002992 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292e:	221c      	movs	r2, #28
 8002930:	4013      	ands	r3, r2
 8002932:	2208      	movs	r2, #8
 8002934:	409a      	lsls	r2, r3
 8002936:	0013      	movs	r3, r2
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	4013      	ands	r3, r2
 800293c:	d02a      	beq.n	8002994 <HAL_DMA_IRQHandler+0x154>
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2208      	movs	r2, #8
 8002942:	4013      	ands	r3, r2
 8002944:	d026      	beq.n	8002994 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	210e      	movs	r1, #14
 8002952:	438a      	bics	r2, r1
 8002954:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	221c      	movs	r2, #28
 800295c:	401a      	ands	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	2101      	movs	r1, #1
 8002964:	4091      	lsls	r1, r2
 8002966:	000a      	movs	r2, r1
 8002968:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2225      	movs	r2, #37	; 0x25
 8002974:	2101      	movs	r1, #1
 8002976:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2224      	movs	r2, #36	; 0x24
 800297c:	2100      	movs	r1, #0
 800297e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	0010      	movs	r0, r2
 8002990:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	46c0      	nop			; (mov r8, r8)
}
 8002996:	46bd      	mov	sp, r7
 8002998:	b004      	add	sp, #16
 800299a:	bd80      	pop	{r7, pc}

0800299c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	221c      	movs	r2, #28
 80029b0:	401a      	ands	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	2101      	movs	r1, #1
 80029b8:	4091      	lsls	r1, r2
 80029ba:	000a      	movs	r2, r1
 80029bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b10      	cmp	r3, #16
 80029cc:	d108      	bne.n	80029e0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029de:	e007      	b.n	80029f0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	60da      	str	r2, [r3, #12]
}
 80029f0:	46c0      	nop			; (mov r8, r8)
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b004      	add	sp, #16
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a0e:	e155      	b.n	8002cbc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2101      	movs	r1, #1
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	4091      	lsls	r1, r2
 8002a1a:	000a      	movs	r2, r1
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d100      	bne.n	8002a28 <HAL_GPIO_Init+0x30>
 8002a26:	e146      	b.n	8002cb6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_Init+0x40>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b12      	cmp	r3, #18
 8002a36:	d123      	bne.n	8002a80 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	08da      	lsrs	r2, r3, #3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3208      	adds	r2, #8
 8002a40:	0092      	lsls	r2, r2, #2
 8002a42:	58d3      	ldr	r3, [r2, r3]
 8002a44:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2207      	movs	r2, #7
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	220f      	movs	r2, #15
 8002a50:	409a      	lsls	r2, r3
 8002a52:	0013      	movs	r3, r2
 8002a54:	43da      	mvns	r2, r3
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	2107      	movs	r1, #7
 8002a64:	400b      	ands	r3, r1
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	0013      	movs	r3, r2
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	08da      	lsrs	r2, r3, #3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3208      	adds	r2, #8
 8002a7a:	0092      	lsls	r2, r2, #2
 8002a7c:	6939      	ldr	r1, [r7, #16]
 8002a7e:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d00b      	beq.n	8002aa0 <HAL_GPIO_Init+0xa8>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d007      	beq.n	8002aa0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a94:	2b11      	cmp	r3, #17
 8002a96:	d003      	beq.n	8002aa0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b12      	cmp	r3, #18
 8002a9e:	d130      	bne.n	8002b02 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	2203      	movs	r2, #3
 8002aac:	409a      	lsls	r2, r3
 8002aae:	0013      	movs	r3, r2
 8002ab0:	43da      	mvns	r2, r3
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	409a      	lsls	r2, r3
 8002ac2:	0013      	movs	r3, r2
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	409a      	lsls	r2, r3
 8002adc:	0013      	movs	r3, r2
 8002ade:	43da      	mvns	r2, r3
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	091b      	lsrs	r3, r3, #4
 8002aec:	2201      	movs	r2, #1
 8002aee:	401a      	ands	r2, r3
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	409a      	lsls	r2, r3
 8002af4:	0013      	movs	r3, r2
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	2203      	movs	r2, #3
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	0013      	movs	r3, r2
 8002b12:	43da      	mvns	r2, r3
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	4013      	ands	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2203      	movs	r2, #3
 8002b20:	401a      	ands	r2, r3
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	409a      	lsls	r2, r3
 8002b28:	0013      	movs	r3, r2
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	2203      	movs	r2, #3
 8002b42:	409a      	lsls	r2, r3
 8002b44:	0013      	movs	r3, r2
 8002b46:	43da      	mvns	r2, r3
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	409a      	lsls	r2, r3
 8002b58:	0013      	movs	r3, r2
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	2380      	movs	r3, #128	; 0x80
 8002b6c:	055b      	lsls	r3, r3, #21
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d100      	bne.n	8002b74 <HAL_GPIO_Init+0x17c>
 8002b72:	e0a0      	b.n	8002cb6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b74:	4b57      	ldr	r3, [pc, #348]	; (8002cd4 <HAL_GPIO_Init+0x2dc>)
 8002b76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b78:	4b56      	ldr	r3, [pc, #344]	; (8002cd4 <HAL_GPIO_Init+0x2dc>)
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8002b80:	4a55      	ldr	r2, [pc, #340]	; (8002cd8 <HAL_GPIO_Init+0x2e0>)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	089b      	lsrs	r3, r3, #2
 8002b86:	3302      	adds	r3, #2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	589b      	ldr	r3, [r3, r2]
 8002b8c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2203      	movs	r2, #3
 8002b92:	4013      	ands	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	220f      	movs	r2, #15
 8002b98:	409a      	lsls	r2, r3
 8002b9a:	0013      	movs	r3, r2
 8002b9c:	43da      	mvns	r2, r3
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	23a0      	movs	r3, #160	; 0xa0
 8002ba8:	05db      	lsls	r3, r3, #23
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d01f      	beq.n	8002bee <HAL_GPIO_Init+0x1f6>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a4a      	ldr	r2, [pc, #296]	; (8002cdc <HAL_GPIO_Init+0x2e4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d019      	beq.n	8002bea <HAL_GPIO_Init+0x1f2>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a49      	ldr	r2, [pc, #292]	; (8002ce0 <HAL_GPIO_Init+0x2e8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d013      	beq.n	8002be6 <HAL_GPIO_Init+0x1ee>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a48      	ldr	r2, [pc, #288]	; (8002ce4 <HAL_GPIO_Init+0x2ec>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d00d      	beq.n	8002be2 <HAL_GPIO_Init+0x1ea>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a47      	ldr	r2, [pc, #284]	; (8002ce8 <HAL_GPIO_Init+0x2f0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d007      	beq.n	8002bde <HAL_GPIO_Init+0x1e6>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a46      	ldr	r2, [pc, #280]	; (8002cec <HAL_GPIO_Init+0x2f4>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d101      	bne.n	8002bda <HAL_GPIO_Init+0x1e2>
 8002bd6:	2305      	movs	r3, #5
 8002bd8:	e00a      	b.n	8002bf0 <HAL_GPIO_Init+0x1f8>
 8002bda:	2306      	movs	r3, #6
 8002bdc:	e008      	b.n	8002bf0 <HAL_GPIO_Init+0x1f8>
 8002bde:	2304      	movs	r3, #4
 8002be0:	e006      	b.n	8002bf0 <HAL_GPIO_Init+0x1f8>
 8002be2:	2303      	movs	r3, #3
 8002be4:	e004      	b.n	8002bf0 <HAL_GPIO_Init+0x1f8>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e002      	b.n	8002bf0 <HAL_GPIO_Init+0x1f8>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <HAL_GPIO_Init+0x1f8>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	2103      	movs	r1, #3
 8002bf4:	400a      	ands	r2, r1
 8002bf6:	0092      	lsls	r2, r2, #2
 8002bf8:	4093      	lsls	r3, r2
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c00:	4935      	ldr	r1, [pc, #212]	; (8002cd8 <HAL_GPIO_Init+0x2e0>)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	089b      	lsrs	r3, r3, #2
 8002c06:	3302      	adds	r3, #2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c0e:	4b38      	ldr	r3, [pc, #224]	; (8002cf0 <HAL_GPIO_Init+0x2f8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	43da      	mvns	r2, r3
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	2380      	movs	r3, #128	; 0x80
 8002c24:	025b      	lsls	r3, r3, #9
 8002c26:	4013      	ands	r3, r2
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c32:	4b2f      	ldr	r3, [pc, #188]	; (8002cf0 <HAL_GPIO_Init+0x2f8>)
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002c38:	4b2d      	ldr	r3, [pc, #180]	; (8002cf0 <HAL_GPIO_Init+0x2f8>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	43da      	mvns	r2, r3
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	4013      	ands	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	2380      	movs	r3, #128	; 0x80
 8002c4e:	029b      	lsls	r3, r3, #10
 8002c50:	4013      	ands	r3, r2
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c5c:	4b24      	ldr	r3, [pc, #144]	; (8002cf0 <HAL_GPIO_Init+0x2f8>)
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c62:	4b23      	ldr	r3, [pc, #140]	; (8002cf0 <HAL_GPIO_Init+0x2f8>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	43da      	mvns	r2, r3
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	2380      	movs	r3, #128	; 0x80
 8002c78:	035b      	lsls	r3, r3, #13
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c86:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <HAL_GPIO_Init+0x2f8>)
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002c8c:	4b18      	ldr	r3, [pc, #96]	; (8002cf0 <HAL_GPIO_Init+0x2f8>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	43da      	mvns	r2, r3
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	039b      	lsls	r3, r3, #14
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d003      	beq.n	8002cb0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002cb0:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <HAL_GPIO_Init+0x2f8>)
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	40da      	lsrs	r2, r3
 8002cc4:	1e13      	subs	r3, r2, #0
 8002cc6:	d000      	beq.n	8002cca <HAL_GPIO_Init+0x2d2>
 8002cc8:	e6a2      	b.n	8002a10 <HAL_GPIO_Init+0x18>
  }
}
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	b006      	add	sp, #24
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	40010000 	.word	0x40010000
 8002cdc:	50000400 	.word	0x50000400
 8002ce0:	50000800 	.word	0x50000800
 8002ce4:	50000c00 	.word	0x50000c00
 8002ce8:	50001000 	.word	0x50001000
 8002cec:	50001c00 	.word	0x50001c00
 8002cf0:	40010400 	.word	0x40010400

08002cf4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	000a      	movs	r2, r1
 8002cfe:	1cbb      	adds	r3, r7, #2
 8002d00:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	1cba      	adds	r2, r7, #2
 8002d08:	8812      	ldrh	r2, [r2, #0]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d004      	beq.n	8002d18 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002d0e:	230f      	movs	r3, #15
 8002d10:	18fb      	adds	r3, r7, r3
 8002d12:	2201      	movs	r2, #1
 8002d14:	701a      	strb	r2, [r3, #0]
 8002d16:	e003      	b.n	8002d20 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d18:	230f      	movs	r3, #15
 8002d1a:	18fb      	adds	r3, r7, r3
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002d20:	230f      	movs	r3, #15
 8002d22:	18fb      	adds	r3, r7, r3
 8002d24:	781b      	ldrb	r3, [r3, #0]
}
 8002d26:	0018      	movs	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b004      	add	sp, #16
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	0008      	movs	r0, r1
 8002d38:	0011      	movs	r1, r2
 8002d3a:	1cbb      	adds	r3, r7, #2
 8002d3c:	1c02      	adds	r2, r0, #0
 8002d3e:	801a      	strh	r2, [r3, #0]
 8002d40:	1c7b      	adds	r3, r7, #1
 8002d42:	1c0a      	adds	r2, r1, #0
 8002d44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8002d46:	1c7b      	adds	r3, r7, #1
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d004      	beq.n	8002d58 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d4e:	1cbb      	adds	r3, r7, #2
 8002d50:	881a      	ldrh	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002d56:	e003      	b.n	8002d60 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002d58:	1cbb      	adds	r3, r7, #2
 8002d5a:	881a      	ldrh	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d60:	46c0      	nop			; (mov r8, r8)
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b002      	add	sp, #8
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	000a      	movs	r2, r1
 8002d72:	1cbb      	adds	r3, r7, #2
 8002d74:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695a      	ldr	r2, [r3, #20]
 8002d7a:	1cbb      	adds	r3, r7, #2
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	405a      	eors	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	615a      	str	r2, [r3, #20]
}
 8002d84:	46c0      	nop			; (mov r8, r8)
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b002      	add	sp, #8
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d8c:	b5b0      	push	{r4, r5, r7, lr}
 8002d8e:	b08a      	sub	sp, #40	; 0x28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d102      	bne.n	8002da0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f000 fbbc 	bl	8003518 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002da0:	4bc8      	ldr	r3, [pc, #800]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	220c      	movs	r2, #12
 8002da6:	4013      	ands	r3, r2
 8002da8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002daa:	4bc6      	ldr	r3, [pc, #792]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	2380      	movs	r3, #128	; 0x80
 8002db0:	025b      	lsls	r3, r3, #9
 8002db2:	4013      	ands	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d100      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x36>
 8002dc0:	e07e      	b.n	8002ec0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	d007      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2b0c      	cmp	r3, #12
 8002dcc:	d112      	bne.n	8002df4 <HAL_RCC_OscConfig+0x68>
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	2380      	movs	r3, #128	; 0x80
 8002dd2:	025b      	lsls	r3, r3, #9
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d10d      	bne.n	8002df4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd8:	4bba      	ldr	r3, [pc, #744]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	2380      	movs	r3, #128	; 0x80
 8002dde:	029b      	lsls	r3, r3, #10
 8002de0:	4013      	ands	r3, r2
 8002de2:	d100      	bne.n	8002de6 <HAL_RCC_OscConfig+0x5a>
 8002de4:	e06b      	b.n	8002ebe <HAL_RCC_OscConfig+0x132>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d167      	bne.n	8002ebe <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	f000 fb92 	bl	8003518 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	025b      	lsls	r3, r3, #9
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d107      	bne.n	8002e10 <HAL_RCC_OscConfig+0x84>
 8002e00:	4bb0      	ldr	r3, [pc, #704]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	4baf      	ldr	r3, [pc, #700]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002e06:	2180      	movs	r1, #128	; 0x80
 8002e08:	0249      	lsls	r1, r1, #9
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	e027      	b.n	8002e60 <HAL_RCC_OscConfig+0xd4>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	23a0      	movs	r3, #160	; 0xa0
 8002e16:	02db      	lsls	r3, r3, #11
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d10e      	bne.n	8002e3a <HAL_RCC_OscConfig+0xae>
 8002e1c:	4ba9      	ldr	r3, [pc, #676]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4ba8      	ldr	r3, [pc, #672]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002e22:	2180      	movs	r1, #128	; 0x80
 8002e24:	02c9      	lsls	r1, r1, #11
 8002e26:	430a      	orrs	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	4ba6      	ldr	r3, [pc, #664]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	4ba5      	ldr	r3, [pc, #660]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002e30:	2180      	movs	r1, #128	; 0x80
 8002e32:	0249      	lsls	r1, r1, #9
 8002e34:	430a      	orrs	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	e012      	b.n	8002e60 <HAL_RCC_OscConfig+0xd4>
 8002e3a:	4ba2      	ldr	r3, [pc, #648]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	4ba1      	ldr	r3, [pc, #644]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002e40:	49a1      	ldr	r1, [pc, #644]	; (80030c8 <HAL_RCC_OscConfig+0x33c>)
 8002e42:	400a      	ands	r2, r1
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	4b9f      	ldr	r3, [pc, #636]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	2380      	movs	r3, #128	; 0x80
 8002e4c:	025b      	lsls	r3, r3, #9
 8002e4e:	4013      	ands	r3, r2
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4b9b      	ldr	r3, [pc, #620]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4b9a      	ldr	r3, [pc, #616]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002e5a:	499c      	ldr	r1, [pc, #624]	; (80030cc <HAL_RCC_OscConfig+0x340>)
 8002e5c:	400a      	ands	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d015      	beq.n	8002e94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7fe fefe 	bl	8001c68 <HAL_GetTick>
 8002e6c:	0003      	movs	r3, r0
 8002e6e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e70:	e009      	b.n	8002e86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e72:	f7fe fef9 	bl	8001c68 <HAL_GetTick>
 8002e76:	0002      	movs	r2, r0
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b64      	cmp	r3, #100	; 0x64
 8002e7e:	d902      	bls.n	8002e86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	f000 fb49 	bl	8003518 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e86:	4b8f      	ldr	r3, [pc, #572]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	2380      	movs	r3, #128	; 0x80
 8002e8c:	029b      	lsls	r3, r3, #10
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d0ef      	beq.n	8002e72 <HAL_RCC_OscConfig+0xe6>
 8002e92:	e015      	b.n	8002ec0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e94:	f7fe fee8 	bl	8001c68 <HAL_GetTick>
 8002e98:	0003      	movs	r3, r0
 8002e9a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e9e:	f7fe fee3 	bl	8001c68 <HAL_GetTick>
 8002ea2:	0002      	movs	r2, r0
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b64      	cmp	r3, #100	; 0x64
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e333      	b.n	8003518 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002eb0:	4b84      	ldr	r3, [pc, #528]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	2380      	movs	r3, #128	; 0x80
 8002eb6:	029b      	lsls	r3, r3, #10
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d1f0      	bne.n	8002e9e <HAL_RCC_OscConfig+0x112>
 8002ebc:	e000      	b.n	8002ec0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ebe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d100      	bne.n	8002ecc <HAL_RCC_OscConfig+0x140>
 8002eca:	e098      	b.n	8002ffe <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d009      	beq.n	8002eee <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002eda:	4b7a      	ldr	r3, [pc, #488]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	4b79      	ldr	r3, [pc, #484]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002ee0:	2120      	movs	r1, #32
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	2220      	movs	r2, #32
 8002eea:	4393      	bics	r3, r2
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d005      	beq.n	8002f00 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	2b0c      	cmp	r3, #12
 8002ef8:	d13d      	bne.n	8002f76 <HAL_RCC_OscConfig+0x1ea>
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d13a      	bne.n	8002f76 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002f00:	4b70      	ldr	r3, [pc, #448]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2204      	movs	r2, #4
 8002f06:	4013      	ands	r3, r2
 8002f08:	d004      	beq.n	8002f14 <HAL_RCC_OscConfig+0x188>
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e301      	b.n	8003518 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f14:	4b6b      	ldr	r3, [pc, #428]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	4a6d      	ldr	r2, [pc, #436]	; (80030d0 <HAL_RCC_OscConfig+0x344>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	0019      	movs	r1, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	021a      	lsls	r2, r3, #8
 8002f24:	4b67      	ldr	r3, [pc, #412]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002f26:	430a      	orrs	r2, r1
 8002f28:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002f2a:	4b66      	ldr	r3, [pc, #408]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2209      	movs	r2, #9
 8002f30:	4393      	bics	r3, r2
 8002f32:	0019      	movs	r1, r3
 8002f34:	4b63      	ldr	r3, [pc, #396]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f3c:	f000 fc20 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8002f40:	0001      	movs	r1, r0
 8002f42:	4b60      	ldr	r3, [pc, #384]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	091b      	lsrs	r3, r3, #4
 8002f48:	220f      	movs	r2, #15
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	4a61      	ldr	r2, [pc, #388]	; (80030d4 <HAL_RCC_OscConfig+0x348>)
 8002f4e:	5cd3      	ldrb	r3, [r2, r3]
 8002f50:	000a      	movs	r2, r1
 8002f52:	40da      	lsrs	r2, r3
 8002f54:	4b60      	ldr	r3, [pc, #384]	; (80030d8 <HAL_RCC_OscConfig+0x34c>)
 8002f56:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8002f58:	2513      	movs	r5, #19
 8002f5a:	197c      	adds	r4, r7, r5
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	f004 fa53 	bl	8007408 <HAL_InitTick>
 8002f62:	0003      	movs	r3, r0
 8002f64:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002f66:	197b      	adds	r3, r7, r5
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d047      	beq.n	8002ffe <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002f6e:	2313      	movs	r3, #19
 8002f70:	18fb      	adds	r3, r7, r3
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	e2d0      	b.n	8003518 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d027      	beq.n	8002fcc <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002f7c:	4b51      	ldr	r3, [pc, #324]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2209      	movs	r2, #9
 8002f82:	4393      	bics	r3, r2
 8002f84:	0019      	movs	r1, r3
 8002f86:	4b4f      	ldr	r3, [pc, #316]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8e:	f7fe fe6b 	bl	8001c68 <HAL_GetTick>
 8002f92:	0003      	movs	r3, r0
 8002f94:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f98:	f7fe fe66 	bl	8001c68 <HAL_GetTick>
 8002f9c:	0002      	movs	r2, r0
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e2b6      	b.n	8003518 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002faa:	4b46      	ldr	r3, [pc, #280]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2204      	movs	r2, #4
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d0f1      	beq.n	8002f98 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb4:	4b43      	ldr	r3, [pc, #268]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	4a45      	ldr	r2, [pc, #276]	; (80030d0 <HAL_RCC_OscConfig+0x344>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	0019      	movs	r1, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	021a      	lsls	r2, r3, #8
 8002fc4:	4b3f      	ldr	r3, [pc, #252]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	e018      	b.n	8002ffe <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fcc:	4b3d      	ldr	r3, [pc, #244]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4b3c      	ldr	r3, [pc, #240]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	438a      	bics	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd8:	f7fe fe46 	bl	8001c68 <HAL_GetTick>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fe2:	f7fe fe41 	bl	8001c68 <HAL_GetTick>
 8002fe6:	0002      	movs	r2, r0
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e291      	b.n	8003518 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ff4:	4b33      	ldr	r3, [pc, #204]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d1f1      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2210      	movs	r2, #16
 8003004:	4013      	ands	r3, r2
 8003006:	d100      	bne.n	800300a <HAL_RCC_OscConfig+0x27e>
 8003008:	e09f      	b.n	800314a <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d13f      	bne.n	8003090 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003010:	4b2c      	ldr	r3, [pc, #176]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	2380      	movs	r3, #128	; 0x80
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4013      	ands	r3, r2
 800301a:	d005      	beq.n	8003028 <HAL_RCC_OscConfig+0x29c>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e277      	b.n	8003518 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003028:	4b26      	ldr	r3, [pc, #152]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	4a2b      	ldr	r2, [pc, #172]	; (80030dc <HAL_RCC_OscConfig+0x350>)
 800302e:	4013      	ands	r3, r2
 8003030:	0019      	movs	r1, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003036:	4b23      	ldr	r3, [pc, #140]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8003038:	430a      	orrs	r2, r1
 800303a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800303c:	4b21      	ldr	r3, [pc, #132]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	0a19      	lsrs	r1, r3, #8
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	061a      	lsls	r2, r3, #24
 800304a:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 800304c:	430a      	orrs	r2, r1
 800304e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	0b5b      	lsrs	r3, r3, #13
 8003056:	3301      	adds	r3, #1
 8003058:	2280      	movs	r2, #128	; 0x80
 800305a:	0212      	lsls	r2, r2, #8
 800305c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800305e:	4b19      	ldr	r3, [pc, #100]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	091b      	lsrs	r3, r3, #4
 8003064:	210f      	movs	r1, #15
 8003066:	400b      	ands	r3, r1
 8003068:	491a      	ldr	r1, [pc, #104]	; (80030d4 <HAL_RCC_OscConfig+0x348>)
 800306a:	5ccb      	ldrb	r3, [r1, r3]
 800306c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800306e:	4b1a      	ldr	r3, [pc, #104]	; (80030d8 <HAL_RCC_OscConfig+0x34c>)
 8003070:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8003072:	2513      	movs	r5, #19
 8003074:	197c      	adds	r4, r7, r5
 8003076:	2000      	movs	r0, #0
 8003078:	f004 f9c6 	bl	8007408 <HAL_InitTick>
 800307c:	0003      	movs	r3, r0
 800307e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003080:	197b      	adds	r3, r7, r5
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d060      	beq.n	800314a <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8003088:	2313      	movs	r3, #19
 800308a:	18fb      	adds	r3, r7, r3
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	e243      	b.n	8003518 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d03e      	beq.n	8003116 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003098:	4b0a      	ldr	r3, [pc, #40]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	4b09      	ldr	r3, [pc, #36]	; (80030c4 <HAL_RCC_OscConfig+0x338>)
 800309e:	2180      	movs	r1, #128	; 0x80
 80030a0:	0049      	lsls	r1, r1, #1
 80030a2:	430a      	orrs	r2, r1
 80030a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a6:	f7fe fddf 	bl	8001c68 <HAL_GetTick>
 80030aa:	0003      	movs	r3, r0
 80030ac:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80030ae:	e017      	b.n	80030e0 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030b0:	f7fe fdda 	bl	8001c68 <HAL_GetTick>
 80030b4:	0002      	movs	r2, r0
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d910      	bls.n	80030e0 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e22a      	b.n	8003518 <HAL_RCC_OscConfig+0x78c>
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	40021000 	.word	0x40021000
 80030c8:	fffeffff 	.word	0xfffeffff
 80030cc:	fffbffff 	.word	0xfffbffff
 80030d0:	ffffe0ff 	.word	0xffffe0ff
 80030d4:	080077d8 	.word	0x080077d8
 80030d8:	20000004 	.word	0x20000004
 80030dc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80030e0:	4bc6      	ldr	r3, [pc, #792]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	2380      	movs	r3, #128	; 0x80
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4013      	ands	r3, r2
 80030ea:	d0e1      	beq.n	80030b0 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030ec:	4bc3      	ldr	r3, [pc, #780]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	4ac3      	ldr	r2, [pc, #780]	; (8003400 <HAL_RCC_OscConfig+0x674>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	0019      	movs	r1, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030fa:	4bc0      	ldr	r3, [pc, #768]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 80030fc:	430a      	orrs	r2, r1
 80030fe:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003100:	4bbe      	ldr	r3, [pc, #760]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	021b      	lsls	r3, r3, #8
 8003106:	0a19      	lsrs	r1, r3, #8
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	061a      	lsls	r2, r3, #24
 800310e:	4bbb      	ldr	r3, [pc, #748]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 8003110:	430a      	orrs	r2, r1
 8003112:	605a      	str	r2, [r3, #4]
 8003114:	e019      	b.n	800314a <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003116:	4bb9      	ldr	r3, [pc, #740]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	4bb8      	ldr	r3, [pc, #736]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 800311c:	49b9      	ldr	r1, [pc, #740]	; (8003404 <HAL_RCC_OscConfig+0x678>)
 800311e:	400a      	ands	r2, r1
 8003120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003122:	f7fe fda1 	bl	8001c68 <HAL_GetTick>
 8003126:	0003      	movs	r3, r0
 8003128:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800312c:	f7fe fd9c 	bl	8001c68 <HAL_GetTick>
 8003130:	0002      	movs	r2, r0
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e1ec      	b.n	8003518 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800313e:	4baf      	ldr	r3, [pc, #700]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	2380      	movs	r3, #128	; 0x80
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4013      	ands	r3, r2
 8003148:	d1f0      	bne.n	800312c <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2208      	movs	r2, #8
 8003150:	4013      	ands	r3, r2
 8003152:	d036      	beq.n	80031c2 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d019      	beq.n	8003190 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800315c:	4ba7      	ldr	r3, [pc, #668]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 800315e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003160:	4ba6      	ldr	r3, [pc, #664]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 8003162:	2101      	movs	r1, #1
 8003164:	430a      	orrs	r2, r1
 8003166:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003168:	f7fe fd7e 	bl	8001c68 <HAL_GetTick>
 800316c:	0003      	movs	r3, r0
 800316e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003172:	f7fe fd79 	bl	8001c68 <HAL_GetTick>
 8003176:	0002      	movs	r2, r0
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e1c9      	b.n	8003518 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003184:	4b9d      	ldr	r3, [pc, #628]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 8003186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003188:	2202      	movs	r2, #2
 800318a:	4013      	ands	r3, r2
 800318c:	d0f1      	beq.n	8003172 <HAL_RCC_OscConfig+0x3e6>
 800318e:	e018      	b.n	80031c2 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003190:	4b9a      	ldr	r3, [pc, #616]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 8003192:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003194:	4b99      	ldr	r3, [pc, #612]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 8003196:	2101      	movs	r1, #1
 8003198:	438a      	bics	r2, r1
 800319a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319c:	f7fe fd64 	bl	8001c68 <HAL_GetTick>
 80031a0:	0003      	movs	r3, r0
 80031a2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031a6:	f7fe fd5f 	bl	8001c68 <HAL_GetTick>
 80031aa:	0002      	movs	r2, r0
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e1af      	b.n	8003518 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031b8:	4b90      	ldr	r3, [pc, #576]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 80031ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031bc:	2202      	movs	r2, #2
 80031be:	4013      	ands	r3, r2
 80031c0:	d1f1      	bne.n	80031a6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2204      	movs	r2, #4
 80031c8:	4013      	ands	r3, r2
 80031ca:	d100      	bne.n	80031ce <HAL_RCC_OscConfig+0x442>
 80031cc:	e0af      	b.n	800332e <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ce:	2323      	movs	r3, #35	; 0x23
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031d6:	4b89      	ldr	r3, [pc, #548]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 80031d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031da:	2380      	movs	r3, #128	; 0x80
 80031dc:	055b      	lsls	r3, r3, #21
 80031de:	4013      	ands	r3, r2
 80031e0:	d10a      	bne.n	80031f8 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e2:	4b86      	ldr	r3, [pc, #536]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 80031e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031e6:	4b85      	ldr	r3, [pc, #532]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 80031e8:	2180      	movs	r1, #128	; 0x80
 80031ea:	0549      	lsls	r1, r1, #21
 80031ec:	430a      	orrs	r2, r1
 80031ee:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80031f0:	2323      	movs	r3, #35	; 0x23
 80031f2:	18fb      	adds	r3, r7, r3
 80031f4:	2201      	movs	r2, #1
 80031f6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f8:	4b83      	ldr	r3, [pc, #524]	; (8003408 <HAL_RCC_OscConfig+0x67c>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	2380      	movs	r3, #128	; 0x80
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	4013      	ands	r3, r2
 8003202:	d11a      	bne.n	800323a <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003204:	4b80      	ldr	r3, [pc, #512]	; (8003408 <HAL_RCC_OscConfig+0x67c>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	4b7f      	ldr	r3, [pc, #508]	; (8003408 <HAL_RCC_OscConfig+0x67c>)
 800320a:	2180      	movs	r1, #128	; 0x80
 800320c:	0049      	lsls	r1, r1, #1
 800320e:	430a      	orrs	r2, r1
 8003210:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003212:	f7fe fd29 	bl	8001c68 <HAL_GetTick>
 8003216:	0003      	movs	r3, r0
 8003218:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321c:	f7fe fd24 	bl	8001c68 <HAL_GetTick>
 8003220:	0002      	movs	r2, r0
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b64      	cmp	r3, #100	; 0x64
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e174      	b.n	8003518 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322e:	4b76      	ldr	r3, [pc, #472]	; (8003408 <HAL_RCC_OscConfig+0x67c>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	2380      	movs	r3, #128	; 0x80
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	4013      	ands	r3, r2
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	2380      	movs	r3, #128	; 0x80
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	429a      	cmp	r2, r3
 8003244:	d107      	bne.n	8003256 <HAL_RCC_OscConfig+0x4ca>
 8003246:	4b6d      	ldr	r3, [pc, #436]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 8003248:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800324a:	4b6c      	ldr	r3, [pc, #432]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 800324c:	2180      	movs	r1, #128	; 0x80
 800324e:	0049      	lsls	r1, r1, #1
 8003250:	430a      	orrs	r2, r1
 8003252:	651a      	str	r2, [r3, #80]	; 0x50
 8003254:	e031      	b.n	80032ba <HAL_RCC_OscConfig+0x52e>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10c      	bne.n	8003278 <HAL_RCC_OscConfig+0x4ec>
 800325e:	4b67      	ldr	r3, [pc, #412]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 8003260:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003262:	4b66      	ldr	r3, [pc, #408]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 8003264:	4967      	ldr	r1, [pc, #412]	; (8003404 <HAL_RCC_OscConfig+0x678>)
 8003266:	400a      	ands	r2, r1
 8003268:	651a      	str	r2, [r3, #80]	; 0x50
 800326a:	4b64      	ldr	r3, [pc, #400]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 800326c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800326e:	4b63      	ldr	r3, [pc, #396]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 8003270:	4966      	ldr	r1, [pc, #408]	; (800340c <HAL_RCC_OscConfig+0x680>)
 8003272:	400a      	ands	r2, r1
 8003274:	651a      	str	r2, [r3, #80]	; 0x50
 8003276:	e020      	b.n	80032ba <HAL_RCC_OscConfig+0x52e>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	23a0      	movs	r3, #160	; 0xa0
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	429a      	cmp	r2, r3
 8003282:	d10e      	bne.n	80032a2 <HAL_RCC_OscConfig+0x516>
 8003284:	4b5d      	ldr	r3, [pc, #372]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 8003286:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003288:	4b5c      	ldr	r3, [pc, #368]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 800328a:	2180      	movs	r1, #128	; 0x80
 800328c:	00c9      	lsls	r1, r1, #3
 800328e:	430a      	orrs	r2, r1
 8003290:	651a      	str	r2, [r3, #80]	; 0x50
 8003292:	4b5a      	ldr	r3, [pc, #360]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 8003294:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003296:	4b59      	ldr	r3, [pc, #356]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 8003298:	2180      	movs	r1, #128	; 0x80
 800329a:	0049      	lsls	r1, r1, #1
 800329c:	430a      	orrs	r2, r1
 800329e:	651a      	str	r2, [r3, #80]	; 0x50
 80032a0:	e00b      	b.n	80032ba <HAL_RCC_OscConfig+0x52e>
 80032a2:	4b56      	ldr	r3, [pc, #344]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 80032a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032a6:	4b55      	ldr	r3, [pc, #340]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 80032a8:	4956      	ldr	r1, [pc, #344]	; (8003404 <HAL_RCC_OscConfig+0x678>)
 80032aa:	400a      	ands	r2, r1
 80032ac:	651a      	str	r2, [r3, #80]	; 0x50
 80032ae:	4b53      	ldr	r3, [pc, #332]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 80032b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032b2:	4b52      	ldr	r3, [pc, #328]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 80032b4:	4955      	ldr	r1, [pc, #340]	; (800340c <HAL_RCC_OscConfig+0x680>)
 80032b6:	400a      	ands	r2, r1
 80032b8:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d015      	beq.n	80032ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c2:	f7fe fcd1 	bl	8001c68 <HAL_GetTick>
 80032c6:	0003      	movs	r3, r0
 80032c8:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032ca:	e009      	b.n	80032e0 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032cc:	f7fe fccc 	bl	8001c68 <HAL_GetTick>
 80032d0:	0002      	movs	r2, r0
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	4a4e      	ldr	r2, [pc, #312]	; (8003410 <HAL_RCC_OscConfig+0x684>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e11b      	b.n	8003518 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032e0:	4b46      	ldr	r3, [pc, #280]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 80032e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032e4:	2380      	movs	r3, #128	; 0x80
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4013      	ands	r3, r2
 80032ea:	d0ef      	beq.n	80032cc <HAL_RCC_OscConfig+0x540>
 80032ec:	e014      	b.n	8003318 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ee:	f7fe fcbb 	bl	8001c68 <HAL_GetTick>
 80032f2:	0003      	movs	r3, r0
 80032f4:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032f6:	e009      	b.n	800330c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f8:	f7fe fcb6 	bl	8001c68 <HAL_GetTick>
 80032fc:	0002      	movs	r2, r0
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	4a43      	ldr	r2, [pc, #268]	; (8003410 <HAL_RCC_OscConfig+0x684>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e105      	b.n	8003518 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800330c:	4b3b      	ldr	r3, [pc, #236]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 800330e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003310:	2380      	movs	r3, #128	; 0x80
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4013      	ands	r3, r2
 8003316:	d1ef      	bne.n	80032f8 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003318:	2323      	movs	r3, #35	; 0x23
 800331a:	18fb      	adds	r3, r7, r3
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d105      	bne.n	800332e <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003322:	4b36      	ldr	r3, [pc, #216]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 8003324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003326:	4b35      	ldr	r3, [pc, #212]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 8003328:	493a      	ldr	r1, [pc, #232]	; (8003414 <HAL_RCC_OscConfig+0x688>)
 800332a:	400a      	ands	r2, r1
 800332c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2220      	movs	r2, #32
 8003334:	4013      	ands	r3, r2
 8003336:	d049      	beq.n	80033cc <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d026      	beq.n	800338e <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003340:	4b2e      	ldr	r3, [pc, #184]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	4b2d      	ldr	r3, [pc, #180]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 8003346:	2101      	movs	r1, #1
 8003348:	430a      	orrs	r2, r1
 800334a:	609a      	str	r2, [r3, #8]
 800334c:	4b2b      	ldr	r3, [pc, #172]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 800334e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003350:	4b2a      	ldr	r3, [pc, #168]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 8003352:	2101      	movs	r1, #1
 8003354:	430a      	orrs	r2, r1
 8003356:	635a      	str	r2, [r3, #52]	; 0x34
 8003358:	4b2f      	ldr	r3, [pc, #188]	; (8003418 <HAL_RCC_OscConfig+0x68c>)
 800335a:	6a1a      	ldr	r2, [r3, #32]
 800335c:	4b2e      	ldr	r3, [pc, #184]	; (8003418 <HAL_RCC_OscConfig+0x68c>)
 800335e:	2180      	movs	r1, #128	; 0x80
 8003360:	0189      	lsls	r1, r1, #6
 8003362:	430a      	orrs	r2, r1
 8003364:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003366:	f7fe fc7f 	bl	8001c68 <HAL_GetTick>
 800336a:	0003      	movs	r3, r0
 800336c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003370:	f7fe fc7a 	bl	8001c68 <HAL_GetTick>
 8003374:	0002      	movs	r2, r0
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e0ca      	b.n	8003518 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003382:	4b1e      	ldr	r3, [pc, #120]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	2202      	movs	r2, #2
 8003388:	4013      	ands	r3, r2
 800338a:	d0f1      	beq.n	8003370 <HAL_RCC_OscConfig+0x5e4>
 800338c:	e01e      	b.n	80033cc <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800338e:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	4b1a      	ldr	r3, [pc, #104]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 8003394:	2101      	movs	r1, #1
 8003396:	438a      	bics	r2, r1
 8003398:	609a      	str	r2, [r3, #8]
 800339a:	4b1f      	ldr	r3, [pc, #124]	; (8003418 <HAL_RCC_OscConfig+0x68c>)
 800339c:	6a1a      	ldr	r2, [r3, #32]
 800339e:	4b1e      	ldr	r3, [pc, #120]	; (8003418 <HAL_RCC_OscConfig+0x68c>)
 80033a0:	491e      	ldr	r1, [pc, #120]	; (800341c <HAL_RCC_OscConfig+0x690>)
 80033a2:	400a      	ands	r2, r1
 80033a4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a6:	f7fe fc5f 	bl	8001c68 <HAL_GetTick>
 80033aa:	0003      	movs	r3, r0
 80033ac:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033b0:	f7fe fc5a 	bl	8001c68 <HAL_GetTick>
 80033b4:	0002      	movs	r2, r0
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e0aa      	b.n	8003518 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80033c2:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2202      	movs	r2, #2
 80033c8:	4013      	ands	r3, r2
 80033ca:	d1f1      	bne.n	80033b0 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d100      	bne.n	80033d6 <HAL_RCC_OscConfig+0x64a>
 80033d4:	e09f      	b.n	8003516 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	2b0c      	cmp	r3, #12
 80033da:	d100      	bne.n	80033de <HAL_RCC_OscConfig+0x652>
 80033dc:	e078      	b.n	80034d0 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d159      	bne.n	800349a <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e6:	4b05      	ldr	r3, [pc, #20]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	4b04      	ldr	r3, [pc, #16]	; (80033fc <HAL_RCC_OscConfig+0x670>)
 80033ec:	490c      	ldr	r1, [pc, #48]	; (8003420 <HAL_RCC_OscConfig+0x694>)
 80033ee:	400a      	ands	r2, r1
 80033f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f2:	f7fe fc39 	bl	8001c68 <HAL_GetTick>
 80033f6:	0003      	movs	r3, r0
 80033f8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80033fa:	e01c      	b.n	8003436 <HAL_RCC_OscConfig+0x6aa>
 80033fc:	40021000 	.word	0x40021000
 8003400:	ffff1fff 	.word	0xffff1fff
 8003404:	fffffeff 	.word	0xfffffeff
 8003408:	40007000 	.word	0x40007000
 800340c:	fffffbff 	.word	0xfffffbff
 8003410:	00001388 	.word	0x00001388
 8003414:	efffffff 	.word	0xefffffff
 8003418:	40010000 	.word	0x40010000
 800341c:	ffffdfff 	.word	0xffffdfff
 8003420:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003424:	f7fe fc20 	bl	8001c68 <HAL_GetTick>
 8003428:	0002      	movs	r2, r0
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e070      	b.n	8003518 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003436:	4b3a      	ldr	r3, [pc, #232]	; (8003520 <HAL_RCC_OscConfig+0x794>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	2380      	movs	r3, #128	; 0x80
 800343c:	049b      	lsls	r3, r3, #18
 800343e:	4013      	ands	r3, r2
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003442:	4b37      	ldr	r3, [pc, #220]	; (8003520 <HAL_RCC_OscConfig+0x794>)
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	4a37      	ldr	r2, [pc, #220]	; (8003524 <HAL_RCC_OscConfig+0x798>)
 8003448:	4013      	ands	r3, r2
 800344a:	0019      	movs	r1, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	431a      	orrs	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345a:	431a      	orrs	r2, r3
 800345c:	4b30      	ldr	r3, [pc, #192]	; (8003520 <HAL_RCC_OscConfig+0x794>)
 800345e:	430a      	orrs	r2, r1
 8003460:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003462:	4b2f      	ldr	r3, [pc, #188]	; (8003520 <HAL_RCC_OscConfig+0x794>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	4b2e      	ldr	r3, [pc, #184]	; (8003520 <HAL_RCC_OscConfig+0x794>)
 8003468:	2180      	movs	r1, #128	; 0x80
 800346a:	0449      	lsls	r1, r1, #17
 800346c:	430a      	orrs	r2, r1
 800346e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003470:	f7fe fbfa 	bl	8001c68 <HAL_GetTick>
 8003474:	0003      	movs	r3, r0
 8003476:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800347a:	f7fe fbf5 	bl	8001c68 <HAL_GetTick>
 800347e:	0002      	movs	r2, r0
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e045      	b.n	8003518 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800348c:	4b24      	ldr	r3, [pc, #144]	; (8003520 <HAL_RCC_OscConfig+0x794>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	2380      	movs	r3, #128	; 0x80
 8003492:	049b      	lsls	r3, r3, #18
 8003494:	4013      	ands	r3, r2
 8003496:	d0f0      	beq.n	800347a <HAL_RCC_OscConfig+0x6ee>
 8003498:	e03d      	b.n	8003516 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349a:	4b21      	ldr	r3, [pc, #132]	; (8003520 <HAL_RCC_OscConfig+0x794>)
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	4b20      	ldr	r3, [pc, #128]	; (8003520 <HAL_RCC_OscConfig+0x794>)
 80034a0:	4921      	ldr	r1, [pc, #132]	; (8003528 <HAL_RCC_OscConfig+0x79c>)
 80034a2:	400a      	ands	r2, r1
 80034a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a6:	f7fe fbdf 	bl	8001c68 <HAL_GetTick>
 80034aa:	0003      	movs	r3, r0
 80034ac:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b0:	f7fe fbda 	bl	8001c68 <HAL_GetTick>
 80034b4:	0002      	movs	r2, r0
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e02a      	b.n	8003518 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80034c2:	4b17      	ldr	r3, [pc, #92]	; (8003520 <HAL_RCC_OscConfig+0x794>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	2380      	movs	r3, #128	; 0x80
 80034c8:	049b      	lsls	r3, r3, #18
 80034ca:	4013      	ands	r3, r2
 80034cc:	d1f0      	bne.n	80034b0 <HAL_RCC_OscConfig+0x724>
 80034ce:	e022      	b.n	8003516 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e01d      	b.n	8003518 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034dc:	4b10      	ldr	r3, [pc, #64]	; (8003520 <HAL_RCC_OscConfig+0x794>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	2380      	movs	r3, #128	; 0x80
 80034e6:	025b      	lsls	r3, r3, #9
 80034e8:	401a      	ands	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d10f      	bne.n	8003512 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	23f0      	movs	r3, #240	; 0xf0
 80034f6:	039b      	lsls	r3, r3, #14
 80034f8:	401a      	ands	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fe:	429a      	cmp	r2, r3
 8003500:	d107      	bne.n	8003512 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	23c0      	movs	r3, #192	; 0xc0
 8003506:	041b      	lsls	r3, r3, #16
 8003508:	401a      	ands	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800350e:	429a      	cmp	r2, r3
 8003510:	d001      	beq.n	8003516 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	0018      	movs	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	b00a      	add	sp, #40	; 0x28
 800351e:	bdb0      	pop	{r4, r5, r7, pc}
 8003520:	40021000 	.word	0x40021000
 8003524:	ff02ffff 	.word	0xff02ffff
 8003528:	feffffff 	.word	0xfeffffff

0800352c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800352c:	b5b0      	push	{r4, r5, r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e10d      	b.n	800375c <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003540:	4b88      	ldr	r3, [pc, #544]	; (8003764 <HAL_RCC_ClockConfig+0x238>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2201      	movs	r2, #1
 8003546:	4013      	ands	r3, r2
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d911      	bls.n	8003572 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354e:	4b85      	ldr	r3, [pc, #532]	; (8003764 <HAL_RCC_ClockConfig+0x238>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2201      	movs	r2, #1
 8003554:	4393      	bics	r3, r2
 8003556:	0019      	movs	r1, r3
 8003558:	4b82      	ldr	r3, [pc, #520]	; (8003764 <HAL_RCC_ClockConfig+0x238>)
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003560:	4b80      	ldr	r3, [pc, #512]	; (8003764 <HAL_RCC_ClockConfig+0x238>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2201      	movs	r2, #1
 8003566:	4013      	ands	r3, r2
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d001      	beq.n	8003572 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e0f4      	b.n	800375c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2202      	movs	r2, #2
 8003578:	4013      	ands	r3, r2
 800357a:	d009      	beq.n	8003590 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800357c:	4b7a      	ldr	r3, [pc, #488]	; (8003768 <HAL_RCC_ClockConfig+0x23c>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	22f0      	movs	r2, #240	; 0xf0
 8003582:	4393      	bics	r3, r2
 8003584:	0019      	movs	r1, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	4b77      	ldr	r3, [pc, #476]	; (8003768 <HAL_RCC_ClockConfig+0x23c>)
 800358c:	430a      	orrs	r2, r1
 800358e:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2201      	movs	r2, #1
 8003596:	4013      	ands	r3, r2
 8003598:	d100      	bne.n	800359c <HAL_RCC_ClockConfig+0x70>
 800359a:	e089      	b.n	80036b0 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d107      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035a4:	4b70      	ldr	r3, [pc, #448]	; (8003768 <HAL_RCC_ClockConfig+0x23c>)
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	2380      	movs	r3, #128	; 0x80
 80035aa:	029b      	lsls	r3, r3, #10
 80035ac:	4013      	ands	r3, r2
 80035ae:	d120      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0d3      	b.n	800375c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d107      	bne.n	80035cc <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035bc:	4b6a      	ldr	r3, [pc, #424]	; (8003768 <HAL_RCC_ClockConfig+0x23c>)
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	2380      	movs	r3, #128	; 0x80
 80035c2:	049b      	lsls	r3, r3, #18
 80035c4:	4013      	ands	r3, r2
 80035c6:	d114      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0c7      	b.n	800375c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d106      	bne.n	80035e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035d4:	4b64      	ldr	r3, [pc, #400]	; (8003768 <HAL_RCC_ClockConfig+0x23c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2204      	movs	r2, #4
 80035da:	4013      	ands	r3, r2
 80035dc:	d109      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e0bc      	b.n	800375c <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80035e2:	4b61      	ldr	r3, [pc, #388]	; (8003768 <HAL_RCC_ClockConfig+0x23c>)
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	2380      	movs	r3, #128	; 0x80
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4013      	ands	r3, r2
 80035ec:	d101      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e0b4      	b.n	800375c <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035f2:	4b5d      	ldr	r3, [pc, #372]	; (8003768 <HAL_RCC_ClockConfig+0x23c>)
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	2203      	movs	r2, #3
 80035f8:	4393      	bics	r3, r2
 80035fa:	0019      	movs	r1, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	4b59      	ldr	r3, [pc, #356]	; (8003768 <HAL_RCC_ClockConfig+0x23c>)
 8003602:	430a      	orrs	r2, r1
 8003604:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003606:	f7fe fb2f 	bl	8001c68 <HAL_GetTick>
 800360a:	0003      	movs	r3, r0
 800360c:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b02      	cmp	r3, #2
 8003614:	d111      	bne.n	800363a <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003616:	e009      	b.n	800362c <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003618:	f7fe fb26 	bl	8001c68 <HAL_GetTick>
 800361c:	0002      	movs	r2, r0
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	4a52      	ldr	r2, [pc, #328]	; (800376c <HAL_RCC_ClockConfig+0x240>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d901      	bls.n	800362c <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e097      	b.n	800375c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800362c:	4b4e      	ldr	r3, [pc, #312]	; (8003768 <HAL_RCC_ClockConfig+0x23c>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	220c      	movs	r2, #12
 8003632:	4013      	ands	r3, r2
 8003634:	2b08      	cmp	r3, #8
 8003636:	d1ef      	bne.n	8003618 <HAL_RCC_ClockConfig+0xec>
 8003638:	e03a      	b.n	80036b0 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b03      	cmp	r3, #3
 8003640:	d111      	bne.n	8003666 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003642:	e009      	b.n	8003658 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003644:	f7fe fb10 	bl	8001c68 <HAL_GetTick>
 8003648:	0002      	movs	r2, r0
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	4a47      	ldr	r2, [pc, #284]	; (800376c <HAL_RCC_ClockConfig+0x240>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e081      	b.n	800375c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003658:	4b43      	ldr	r3, [pc, #268]	; (8003768 <HAL_RCC_ClockConfig+0x23c>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	220c      	movs	r2, #12
 800365e:	4013      	ands	r3, r2
 8003660:	2b0c      	cmp	r3, #12
 8003662:	d1ef      	bne.n	8003644 <HAL_RCC_ClockConfig+0x118>
 8003664:	e024      	b.n	80036b0 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d11b      	bne.n	80036a6 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800366e:	e009      	b.n	8003684 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003670:	f7fe fafa 	bl	8001c68 <HAL_GetTick>
 8003674:	0002      	movs	r2, r0
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	4a3c      	ldr	r2, [pc, #240]	; (800376c <HAL_RCC_ClockConfig+0x240>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e06b      	b.n	800375c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003684:	4b38      	ldr	r3, [pc, #224]	; (8003768 <HAL_RCC_ClockConfig+0x23c>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	220c      	movs	r2, #12
 800368a:	4013      	ands	r3, r2
 800368c:	2b04      	cmp	r3, #4
 800368e:	d1ef      	bne.n	8003670 <HAL_RCC_ClockConfig+0x144>
 8003690:	e00e      	b.n	80036b0 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003692:	f7fe fae9 	bl	8001c68 <HAL_GetTick>
 8003696:	0002      	movs	r2, r0
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	4a33      	ldr	r2, [pc, #204]	; (800376c <HAL_RCC_ClockConfig+0x240>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e05a      	b.n	800375c <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80036a6:	4b30      	ldr	r3, [pc, #192]	; (8003768 <HAL_RCC_ClockConfig+0x23c>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	220c      	movs	r2, #12
 80036ac:	4013      	ands	r3, r2
 80036ae:	d1f0      	bne.n	8003692 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036b0:	4b2c      	ldr	r3, [pc, #176]	; (8003764 <HAL_RCC_ClockConfig+0x238>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2201      	movs	r2, #1
 80036b6:	4013      	ands	r3, r2
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d211      	bcs.n	80036e2 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036be:	4b29      	ldr	r3, [pc, #164]	; (8003764 <HAL_RCC_ClockConfig+0x238>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2201      	movs	r2, #1
 80036c4:	4393      	bics	r3, r2
 80036c6:	0019      	movs	r1, r3
 80036c8:	4b26      	ldr	r3, [pc, #152]	; (8003764 <HAL_RCC_ClockConfig+0x238>)
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d0:	4b24      	ldr	r3, [pc, #144]	; (8003764 <HAL_RCC_ClockConfig+0x238>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2201      	movs	r2, #1
 80036d6:	4013      	ands	r3, r2
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d001      	beq.n	80036e2 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e03c      	b.n	800375c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2204      	movs	r2, #4
 80036e8:	4013      	ands	r3, r2
 80036ea:	d009      	beq.n	8003700 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036ec:	4b1e      	ldr	r3, [pc, #120]	; (8003768 <HAL_RCC_ClockConfig+0x23c>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	4a1f      	ldr	r2, [pc, #124]	; (8003770 <HAL_RCC_ClockConfig+0x244>)
 80036f2:	4013      	ands	r3, r2
 80036f4:	0019      	movs	r1, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	4b1b      	ldr	r3, [pc, #108]	; (8003768 <HAL_RCC_ClockConfig+0x23c>)
 80036fc:	430a      	orrs	r2, r1
 80036fe:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2208      	movs	r2, #8
 8003706:	4013      	ands	r3, r2
 8003708:	d00a      	beq.n	8003720 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800370a:	4b17      	ldr	r3, [pc, #92]	; (8003768 <HAL_RCC_ClockConfig+0x23c>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	4a19      	ldr	r2, [pc, #100]	; (8003774 <HAL_RCC_ClockConfig+0x248>)
 8003710:	4013      	ands	r3, r2
 8003712:	0019      	movs	r1, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	00da      	lsls	r2, r3, #3
 800371a:	4b13      	ldr	r3, [pc, #76]	; (8003768 <HAL_RCC_ClockConfig+0x23c>)
 800371c:	430a      	orrs	r2, r1
 800371e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003720:	f000 f82e 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8003724:	0001      	movs	r1, r0
 8003726:	4b10      	ldr	r3, [pc, #64]	; (8003768 <HAL_RCC_ClockConfig+0x23c>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	091b      	lsrs	r3, r3, #4
 800372c:	220f      	movs	r2, #15
 800372e:	4013      	ands	r3, r2
 8003730:	4a11      	ldr	r2, [pc, #68]	; (8003778 <HAL_RCC_ClockConfig+0x24c>)
 8003732:	5cd3      	ldrb	r3, [r2, r3]
 8003734:	000a      	movs	r2, r1
 8003736:	40da      	lsrs	r2, r3
 8003738:	4b10      	ldr	r3, [pc, #64]	; (800377c <HAL_RCC_ClockConfig+0x250>)
 800373a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 800373c:	250b      	movs	r5, #11
 800373e:	197c      	adds	r4, r7, r5
 8003740:	2000      	movs	r0, #0
 8003742:	f003 fe61 	bl	8007408 <HAL_InitTick>
 8003746:	0003      	movs	r3, r0
 8003748:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800374a:	197b      	adds	r3, r7, r5
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8003752:	230b      	movs	r3, #11
 8003754:	18fb      	adds	r3, r7, r3
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	e000      	b.n	800375c <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	0018      	movs	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	b004      	add	sp, #16
 8003762:	bdb0      	pop	{r4, r5, r7, pc}
 8003764:	40022000 	.word	0x40022000
 8003768:	40021000 	.word	0x40021000
 800376c:	00001388 	.word	0x00001388
 8003770:	fffff8ff 	.word	0xfffff8ff
 8003774:	ffffc7ff 	.word	0xffffc7ff
 8003778:	080077d8 	.word	0x080077d8
 800377c:	20000004 	.word	0x20000004

08003780 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003786:	4b3b      	ldr	r3, [pc, #236]	; (8003874 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	220c      	movs	r2, #12
 8003790:	4013      	ands	r3, r2
 8003792:	2b08      	cmp	r3, #8
 8003794:	d00e      	beq.n	80037b4 <HAL_RCC_GetSysClockFreq+0x34>
 8003796:	2b0c      	cmp	r3, #12
 8003798:	d00f      	beq.n	80037ba <HAL_RCC_GetSysClockFreq+0x3a>
 800379a:	2b04      	cmp	r3, #4
 800379c:	d157      	bne.n	800384e <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800379e:	4b35      	ldr	r3, [pc, #212]	; (8003874 <HAL_RCC_GetSysClockFreq+0xf4>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2210      	movs	r2, #16
 80037a4:	4013      	ands	r3, r2
 80037a6:	d002      	beq.n	80037ae <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80037a8:	4b33      	ldr	r3, [pc, #204]	; (8003878 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037aa:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80037ac:	e05d      	b.n	800386a <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80037ae:	4b33      	ldr	r3, [pc, #204]	; (800387c <HAL_RCC_GetSysClockFreq+0xfc>)
 80037b0:	613b      	str	r3, [r7, #16]
      break;
 80037b2:	e05a      	b.n	800386a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037b4:	4b32      	ldr	r3, [pc, #200]	; (8003880 <HAL_RCC_GetSysClockFreq+0x100>)
 80037b6:	613b      	str	r3, [r7, #16]
      break;
 80037b8:	e057      	b.n	800386a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	0c9b      	lsrs	r3, r3, #18
 80037be:	220f      	movs	r2, #15
 80037c0:	4013      	ands	r3, r2
 80037c2:	4a30      	ldr	r2, [pc, #192]	; (8003884 <HAL_RCC_GetSysClockFreq+0x104>)
 80037c4:	5cd3      	ldrb	r3, [r2, r3]
 80037c6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	0d9b      	lsrs	r3, r3, #22
 80037cc:	2203      	movs	r2, #3
 80037ce:	4013      	ands	r3, r2
 80037d0:	3301      	adds	r3, #1
 80037d2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037d4:	4b27      	ldr	r3, [pc, #156]	; (8003874 <HAL_RCC_GetSysClockFreq+0xf4>)
 80037d6:	68da      	ldr	r2, [r3, #12]
 80037d8:	2380      	movs	r3, #128	; 0x80
 80037da:	025b      	lsls	r3, r3, #9
 80037dc:	4013      	ands	r3, r2
 80037de:	d00f      	beq.n	8003800 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80037e0:	68b9      	ldr	r1, [r7, #8]
 80037e2:	000a      	movs	r2, r1
 80037e4:	0152      	lsls	r2, r2, #5
 80037e6:	1a52      	subs	r2, r2, r1
 80037e8:	0193      	lsls	r3, r2, #6
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	185b      	adds	r3, r3, r1
 80037f0:	025b      	lsls	r3, r3, #9
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	0018      	movs	r0, r3
 80037f6:	f7fc fc87 	bl	8000108 <__udivsi3>
 80037fa:	0003      	movs	r3, r0
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	e023      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003800:	4b1c      	ldr	r3, [pc, #112]	; (8003874 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2210      	movs	r2, #16
 8003806:	4013      	ands	r3, r2
 8003808:	d00f      	beq.n	800382a <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800380a:	68b9      	ldr	r1, [r7, #8]
 800380c:	000a      	movs	r2, r1
 800380e:	0152      	lsls	r2, r2, #5
 8003810:	1a52      	subs	r2, r2, r1
 8003812:	0193      	lsls	r3, r2, #6
 8003814:	1a9b      	subs	r3, r3, r2
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	185b      	adds	r3, r3, r1
 800381a:	021b      	lsls	r3, r3, #8
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	0018      	movs	r0, r3
 8003820:	f7fc fc72 	bl	8000108 <__udivsi3>
 8003824:	0003      	movs	r3, r0
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	e00e      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800382a:	68b9      	ldr	r1, [r7, #8]
 800382c:	000a      	movs	r2, r1
 800382e:	0152      	lsls	r2, r2, #5
 8003830:	1a52      	subs	r2, r2, r1
 8003832:	0193      	lsls	r3, r2, #6
 8003834:	1a9b      	subs	r3, r3, r2
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	185b      	adds	r3, r3, r1
 800383a:	029b      	lsls	r3, r3, #10
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	0018      	movs	r0, r3
 8003840:	f7fc fc62 	bl	8000108 <__udivsi3>
 8003844:	0003      	movs	r3, r0
 8003846:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	613b      	str	r3, [r7, #16]
      break;
 800384c:	e00d      	b.n	800386a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800384e:	4b09      	ldr	r3, [pc, #36]	; (8003874 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	0b5b      	lsrs	r3, r3, #13
 8003854:	2207      	movs	r2, #7
 8003856:	4013      	ands	r3, r2
 8003858:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	3301      	adds	r3, #1
 800385e:	2280      	movs	r2, #128	; 0x80
 8003860:	0212      	lsls	r2, r2, #8
 8003862:	409a      	lsls	r2, r3
 8003864:	0013      	movs	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
      break;
 8003868:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800386a:	693b      	ldr	r3, [r7, #16]
}
 800386c:	0018      	movs	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	b006      	add	sp, #24
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40021000 	.word	0x40021000
 8003878:	003d0900 	.word	0x003d0900
 800387c:	00f42400 	.word	0x00f42400
 8003880:	007a1200 	.word	0x007a1200
 8003884:	080077f0 	.word	0x080077f0

08003888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800388c:	4b02      	ldr	r3, [pc, #8]	; (8003898 <HAL_RCC_GetHCLKFreq+0x10>)
 800388e:	681b      	ldr	r3, [r3, #0]
}
 8003890:	0018      	movs	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	20000004 	.word	0x20000004

0800389c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038a0:	f7ff fff2 	bl	8003888 <HAL_RCC_GetHCLKFreq>
 80038a4:	0001      	movs	r1, r0
 80038a6:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	0a1b      	lsrs	r3, r3, #8
 80038ac:	2207      	movs	r2, #7
 80038ae:	4013      	ands	r3, r2
 80038b0:	4a04      	ldr	r2, [pc, #16]	; (80038c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038b2:	5cd3      	ldrb	r3, [r2, r3]
 80038b4:	40d9      	lsrs	r1, r3
 80038b6:	000b      	movs	r3, r1
}
 80038b8:	0018      	movs	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	40021000 	.word	0x40021000
 80038c4:	080077e8 	.word	0x080077e8

080038c8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	220f      	movs	r2, #15
 80038d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80038d8:	4b12      	ldr	r3, [pc, #72]	; (8003924 <HAL_RCC_GetClockConfig+0x5c>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	2203      	movs	r2, #3
 80038de:	401a      	ands	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80038e4:	4b0f      	ldr	r3, [pc, #60]	; (8003924 <HAL_RCC_GetClockConfig+0x5c>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	22f0      	movs	r2, #240	; 0xf0
 80038ea:	401a      	ands	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80038f0:	4b0c      	ldr	r3, [pc, #48]	; (8003924 <HAL_RCC_GetClockConfig+0x5c>)
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	23e0      	movs	r3, #224	; 0xe0
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	401a      	ands	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80038fe:	4b09      	ldr	r3, [pc, #36]	; (8003924 <HAL_RCC_GetClockConfig+0x5c>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	08da      	lsrs	r2, r3, #3
 8003904:	23e0      	movs	r3, #224	; 0xe0
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	401a      	ands	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800390e:	4b06      	ldr	r3, [pc, #24]	; (8003928 <HAL_RCC_GetClockConfig+0x60>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2201      	movs	r2, #1
 8003914:	401a      	ands	r2, r3
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	601a      	str	r2, [r3, #0]
}
 800391a:	46c0      	nop			; (mov r8, r8)
 800391c:	46bd      	mov	sp, r7
 800391e:	b002      	add	sp, #8
 8003920:	bd80      	pop	{r7, pc}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	40021000 	.word	0x40021000
 8003928:	40022000 	.word	0x40022000

0800392c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e01e      	b.n	800397c <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2239      	movs	r2, #57	; 0x39
 8003942:	5c9b      	ldrb	r3, [r3, r2]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d107      	bne.n	800395a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2238      	movs	r2, #56	; 0x38
 800394e:	2100      	movs	r1, #0
 8003950:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	0018      	movs	r0, r3
 8003956:	f003 fd31 	bl	80073bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2239      	movs	r2, #57	; 0x39
 800395e:	2102      	movs	r1, #2
 8003960:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3304      	adds	r3, #4
 800396a:	0019      	movs	r1, r3
 800396c:	0010      	movs	r0, r2
 800396e:	f000 fa13 	bl	8003d98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2239      	movs	r2, #57	; 0x39
 8003976:	2101      	movs	r1, #1
 8003978:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	0018      	movs	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	b002      	add	sp, #8
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2239      	movs	r2, #57	; 0x39
 8003990:	2102      	movs	r1, #2
 8003992:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2207      	movs	r2, #7
 800399c:	4013      	ands	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2b06      	cmp	r3, #6
 80039a4:	d007      	beq.n	80039b6 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2101      	movs	r1, #1
 80039b2:	430a      	orrs	r2, r1
 80039b4:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2239      	movs	r2, #57	; 0x39
 80039ba:	2101      	movs	r1, #1
 80039bc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	0018      	movs	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b004      	add	sp, #16
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2101      	movs	r1, #1
 80039dc:	430a      	orrs	r2, r1
 80039de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2207      	movs	r2, #7
 80039e8:	4013      	ands	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b06      	cmp	r3, #6
 80039f0:	d007      	beq.n	8003a02 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2101      	movs	r1, #1
 80039fe:	430a      	orrs	r2, r1
 8003a00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	0018      	movs	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	b004      	add	sp, #16
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d124      	bne.n	8003a6c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	2202      	movs	r2, #2
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d11d      	bne.n	8003a6c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2203      	movs	r2, #3
 8003a36:	4252      	negs	r2, r2
 8003a38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	2203      	movs	r2, #3
 8003a48:	4013      	ands	r3, r2
 8003a4a:	d004      	beq.n	8003a56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f000 f98a 	bl	8003d68 <HAL_TIM_IC_CaptureCallback>
 8003a54:	e007      	b.n	8003a66 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f000 f97d 	bl	8003d58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	0018      	movs	r0, r3
 8003a62:	f000 f989 	bl	8003d78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	2204      	movs	r2, #4
 8003a74:	4013      	ands	r3, r2
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d125      	bne.n	8003ac6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	2204      	movs	r2, #4
 8003a82:	4013      	ands	r3, r2
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d11e      	bne.n	8003ac6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2205      	movs	r2, #5
 8003a8e:	4252      	negs	r2, r2
 8003a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2202      	movs	r2, #2
 8003a96:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699a      	ldr	r2, [r3, #24]
 8003a9e:	23c0      	movs	r3, #192	; 0xc0
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d004      	beq.n	8003ab0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f000 f95d 	bl	8003d68 <HAL_TIM_IC_CaptureCallback>
 8003aae:	e007      	b.n	8003ac0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f000 f950 	bl	8003d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	0018      	movs	r0, r3
 8003abc:	f000 f95c 	bl	8003d78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	2208      	movs	r2, #8
 8003ace:	4013      	ands	r3, r2
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d124      	bne.n	8003b1e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2208      	movs	r2, #8
 8003adc:	4013      	ands	r3, r2
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d11d      	bne.n	8003b1e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2209      	movs	r2, #9
 8003ae8:	4252      	negs	r2, r2
 8003aea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2204      	movs	r2, #4
 8003af0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	2203      	movs	r2, #3
 8003afa:	4013      	ands	r3, r2
 8003afc:	d004      	beq.n	8003b08 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	0018      	movs	r0, r3
 8003b02:	f000 f931 	bl	8003d68 <HAL_TIM_IC_CaptureCallback>
 8003b06:	e007      	b.n	8003b18 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f000 f924 	bl	8003d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	0018      	movs	r0, r3
 8003b14:	f000 f930 	bl	8003d78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	2210      	movs	r2, #16
 8003b26:	4013      	ands	r3, r2
 8003b28:	2b10      	cmp	r3, #16
 8003b2a:	d125      	bne.n	8003b78 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	2210      	movs	r2, #16
 8003b34:	4013      	ands	r3, r2
 8003b36:	2b10      	cmp	r3, #16
 8003b38:	d11e      	bne.n	8003b78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2211      	movs	r2, #17
 8003b40:	4252      	negs	r2, r2
 8003b42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2208      	movs	r2, #8
 8003b48:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69da      	ldr	r2, [r3, #28]
 8003b50:	23c0      	movs	r3, #192	; 0xc0
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4013      	ands	r3, r2
 8003b56:	d004      	beq.n	8003b62 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f000 f904 	bl	8003d68 <HAL_TIM_IC_CaptureCallback>
 8003b60:	e007      	b.n	8003b72 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	0018      	movs	r0, r3
 8003b66:	f000 f8f7 	bl	8003d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	f000 f903 	bl	8003d78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	4013      	ands	r3, r2
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d10f      	bne.n	8003ba6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	4013      	ands	r3, r2
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d108      	bne.n	8003ba6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2202      	movs	r2, #2
 8003b9a:	4252      	negs	r2, r2
 8003b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f003 f841 	bl	8006c28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	2240      	movs	r2, #64	; 0x40
 8003bae:	4013      	ands	r3, r2
 8003bb0:	2b40      	cmp	r3, #64	; 0x40
 8003bb2:	d10f      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	2240      	movs	r2, #64	; 0x40
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	2b40      	cmp	r3, #64	; 0x40
 8003bc0:	d108      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2241      	movs	r2, #65	; 0x41
 8003bc8:	4252      	negs	r2, r2
 8003bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	0018      	movs	r0, r3
 8003bd0:	f000 f8da 	bl	8003d88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bd4:	46c0      	nop			; (mov r8, r8)
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	b002      	add	sp, #8
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2238      	movs	r2, #56	; 0x38
 8003bea:	5c9b      	ldrb	r3, [r3, r2]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d101      	bne.n	8003bf4 <HAL_TIM_ConfigClockSource+0x18>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e0ab      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x170>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2238      	movs	r2, #56	; 0x38
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2239      	movs	r2, #57	; 0x39
 8003c00:	2102      	movs	r1, #2
 8003c02:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2277      	movs	r2, #119	; 0x77
 8003c10:	4393      	bics	r3, r2
 8003c12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4a4f      	ldr	r2, [pc, #316]	; (8003d54 <HAL_TIM_ConfigClockSource+0x178>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b40      	cmp	r3, #64	; 0x40
 8003c2a:	d100      	bne.n	8003c2e <HAL_TIM_ConfigClockSource+0x52>
 8003c2c:	e06b      	b.n	8003d06 <HAL_TIM_ConfigClockSource+0x12a>
 8003c2e:	d80e      	bhi.n	8003c4e <HAL_TIM_ConfigClockSource+0x72>
 8003c30:	2b10      	cmp	r3, #16
 8003c32:	d100      	bne.n	8003c36 <HAL_TIM_ConfigClockSource+0x5a>
 8003c34:	e077      	b.n	8003d26 <HAL_TIM_ConfigClockSource+0x14a>
 8003c36:	d803      	bhi.n	8003c40 <HAL_TIM_ConfigClockSource+0x64>
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d100      	bne.n	8003c3e <HAL_TIM_ConfigClockSource+0x62>
 8003c3c:	e073      	b.n	8003d26 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003c3e:	e07c      	b.n	8003d3a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003c40:	2b20      	cmp	r3, #32
 8003c42:	d100      	bne.n	8003c46 <HAL_TIM_ConfigClockSource+0x6a>
 8003c44:	e06f      	b.n	8003d26 <HAL_TIM_ConfigClockSource+0x14a>
 8003c46:	2b30      	cmp	r3, #48	; 0x30
 8003c48:	d100      	bne.n	8003c4c <HAL_TIM_ConfigClockSource+0x70>
 8003c4a:	e06c      	b.n	8003d26 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8003c4c:	e075      	b.n	8003d3a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003c4e:	2b70      	cmp	r3, #112	; 0x70
 8003c50:	d00e      	beq.n	8003c70 <HAL_TIM_ConfigClockSource+0x94>
 8003c52:	d804      	bhi.n	8003c5e <HAL_TIM_ConfigClockSource+0x82>
 8003c54:	2b50      	cmp	r3, #80	; 0x50
 8003c56:	d036      	beq.n	8003cc6 <HAL_TIM_ConfigClockSource+0xea>
 8003c58:	2b60      	cmp	r3, #96	; 0x60
 8003c5a:	d044      	beq.n	8003ce6 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8003c5c:	e06d      	b.n	8003d3a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003c5e:	2280      	movs	r2, #128	; 0x80
 8003c60:	0152      	lsls	r2, r2, #5
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d068      	beq.n	8003d38 <HAL_TIM_ConfigClockSource+0x15c>
 8003c66:	2280      	movs	r2, #128	; 0x80
 8003c68:	0192      	lsls	r2, r2, #6
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d017      	beq.n	8003c9e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8003c6e:	e064      	b.n	8003d3a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6818      	ldr	r0, [r3, #0]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	6899      	ldr	r1, [r3, #8]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f000 f962 	bl	8003f48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2277      	movs	r2, #119	; 0x77
 8003c90:	4313      	orrs	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	609a      	str	r2, [r3, #8]
      break;
 8003c9c:	e04d      	b.n	8003d3a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	6899      	ldr	r1, [r3, #8]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f000 f94b 	bl	8003f48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2180      	movs	r1, #128	; 0x80
 8003cbe:	01c9      	lsls	r1, r1, #7
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	609a      	str	r2, [r3, #8]
      break;
 8003cc4:	e039      	b.n	8003d3a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6818      	ldr	r0, [r3, #0]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	6859      	ldr	r1, [r3, #4]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	001a      	movs	r2, r3
 8003cd4:	f000 f8be 	bl	8003e54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2150      	movs	r1, #80	; 0x50
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f000 f918 	bl	8003f14 <TIM_ITRx_SetConfig>
      break;
 8003ce4:	e029      	b.n	8003d3a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6818      	ldr	r0, [r3, #0]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	6859      	ldr	r1, [r3, #4]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	001a      	movs	r2, r3
 8003cf4:	f000 f8dc 	bl	8003eb0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2160      	movs	r1, #96	; 0x60
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f000 f908 	bl	8003f14 <TIM_ITRx_SetConfig>
      break;
 8003d04:	e019      	b.n	8003d3a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6818      	ldr	r0, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	6859      	ldr	r1, [r3, #4]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	001a      	movs	r2, r3
 8003d14:	f000 f89e 	bl	8003e54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2140      	movs	r1, #64	; 0x40
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f000 f8f8 	bl	8003f14 <TIM_ITRx_SetConfig>
      break;
 8003d24:	e009      	b.n	8003d3a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	0019      	movs	r1, r3
 8003d30:	0010      	movs	r0, r2
 8003d32:	f000 f8ef 	bl	8003f14 <TIM_ITRx_SetConfig>
      break;
 8003d36:	e000      	b.n	8003d3a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8003d38:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2239      	movs	r2, #57	; 0x39
 8003d3e:	2101      	movs	r1, #1
 8003d40:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2238      	movs	r2, #56	; 0x38
 8003d46:	2100      	movs	r1, #0
 8003d48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	b004      	add	sp, #16
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	ffff00ff 	.word	0xffff00ff

08003d58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d60:	46c0      	nop			; (mov r8, r8)
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b002      	add	sp, #8
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d70:	46c0      	nop			; (mov r8, r8)
 8003d72:	46bd      	mov	sp, r7
 8003d74:	b002      	add	sp, #8
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d80:	46c0      	nop			; (mov r8, r8)
 8003d82:	46bd      	mov	sp, r7
 8003d84:	b002      	add	sp, #8
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d90:	46c0      	nop			; (mov r8, r8)
 8003d92:	46bd      	mov	sp, r7
 8003d94:	b002      	add	sp, #8
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	2380      	movs	r3, #128	; 0x80
 8003dac:	05db      	lsls	r3, r3, #23
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d00b      	beq.n	8003dca <TIM_Base_SetConfig+0x32>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a23      	ldr	r2, [pc, #140]	; (8003e44 <TIM_Base_SetConfig+0xac>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d007      	beq.n	8003dca <TIM_Base_SetConfig+0x32>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a22      	ldr	r2, [pc, #136]	; (8003e48 <TIM_Base_SetConfig+0xb0>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d003      	beq.n	8003dca <TIM_Base_SetConfig+0x32>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a21      	ldr	r2, [pc, #132]	; (8003e4c <TIM_Base_SetConfig+0xb4>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d108      	bne.n	8003ddc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2270      	movs	r2, #112	; 0x70
 8003dce:	4393      	bics	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	2380      	movs	r3, #128	; 0x80
 8003de0:	05db      	lsls	r3, r3, #23
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d00b      	beq.n	8003dfe <TIM_Base_SetConfig+0x66>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a16      	ldr	r2, [pc, #88]	; (8003e44 <TIM_Base_SetConfig+0xac>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d007      	beq.n	8003dfe <TIM_Base_SetConfig+0x66>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a15      	ldr	r2, [pc, #84]	; (8003e48 <TIM_Base_SetConfig+0xb0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d003      	beq.n	8003dfe <TIM_Base_SetConfig+0x66>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a14      	ldr	r2, [pc, #80]	; (8003e4c <TIM_Base_SetConfig+0xb4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d108      	bne.n	8003e10 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4a13      	ldr	r2, [pc, #76]	; (8003e50 <TIM_Base_SetConfig+0xb8>)
 8003e02:	4013      	ands	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2280      	movs	r2, #128	; 0x80
 8003e14:	4393      	bics	r3, r2
 8003e16:	001a      	movs	r2, r3
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	615a      	str	r2, [r3, #20]
}
 8003e3c:	46c0      	nop			; (mov r8, r8)
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	b004      	add	sp, #16
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40000400 	.word	0x40000400
 8003e48:	40010800 	.word	0x40010800
 8003e4c:	40011400 	.word	0x40011400
 8003e50:	fffffcff 	.word	0xfffffcff

08003e54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	4393      	bics	r3, r2
 8003e6e:	001a      	movs	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	22f0      	movs	r2, #240	; 0xf0
 8003e7e:	4393      	bics	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	011b      	lsls	r3, r3, #4
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	220a      	movs	r2, #10
 8003e90:	4393      	bics	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	621a      	str	r2, [r3, #32]
}
 8003ea8:	46c0      	nop			; (mov r8, r8)
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	b006      	add	sp, #24
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	2210      	movs	r2, #16
 8003ec2:	4393      	bics	r3, r2
 8003ec4:	001a      	movs	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	4a0d      	ldr	r2, [pc, #52]	; (8003f10 <TIM_TI2_ConfigInputStage+0x60>)
 8003eda:	4013      	ands	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	031b      	lsls	r3, r3, #12
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	22a0      	movs	r2, #160	; 0xa0
 8003eec:	4393      	bics	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	621a      	str	r2, [r3, #32]
}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	b006      	add	sp, #24
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	ffff0fff 	.word	0xffff0fff

08003f14 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2270      	movs	r2, #112	; 0x70
 8003f28:	4393      	bics	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	2207      	movs	r2, #7
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	609a      	str	r2, [r3, #8]
}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	46bd      	mov	sp, r7
 8003f42:	b004      	add	sp, #16
 8003f44:	bd80      	pop	{r7, pc}
	...

08003f48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	4a09      	ldr	r2, [pc, #36]	; (8003f84 <TIM_ETR_SetConfig+0x3c>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	021a      	lsls	r2, r3, #8
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	609a      	str	r2, [r3, #8]
}
 8003f7c:	46c0      	nop			; (mov r8, r8)
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	b006      	add	sp, #24
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	ffff00ff 	.word	0xffff00ff

08003f88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2238      	movs	r2, #56	; 0x38
 8003f96:	5c9b      	ldrb	r3, [r3, r2]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d101      	bne.n	8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e032      	b.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2238      	movs	r2, #56	; 0x38
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2239      	movs	r2, #57	; 0x39
 8003fac:	2102      	movs	r1, #2
 8003fae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2270      	movs	r2, #112	; 0x70
 8003fc4:	4393      	bics	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2280      	movs	r2, #128	; 0x80
 8003fd6:	4393      	bics	r3, r2
 8003fd8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2239      	movs	r2, #57	; 0x39
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2238      	movs	r2, #56	; 0x38
 8004000:	2100      	movs	r1, #0
 8004002:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	0018      	movs	r0, r3
 8004008:	46bd      	mov	sp, r7
 800400a:	b004      	add	sp, #16
 800400c:	bd80      	pop	{r7, pc}

0800400e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	0002      	movs	r2, r0
 8004016:	1dbb      	adds	r3, r7, #6
 8004018:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800401e:	1dbb      	adds	r3, r7, #6
 8004020:	2200      	movs	r2, #0
 8004022:	5e9b      	ldrsh	r3, [r3, r2]
 8004024:	2b84      	cmp	r3, #132	; 0x84
 8004026:	d006      	beq.n	8004036 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8004028:	1dbb      	adds	r3, r7, #6
 800402a:	2200      	movs	r2, #0
 800402c:	5e9a      	ldrsh	r2, [r3, r2]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	18d3      	adds	r3, r2, r3
 8004032:	3303      	adds	r3, #3
 8004034:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004036:	68fb      	ldr	r3, [r7, #12]
}
 8004038:	0018      	movs	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	b004      	add	sp, #16
 800403e:	bd80      	pop	{r7, pc}

08004040 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004046:	f3ef 8305 	mrs	r3, IPSR
 800404a:	607b      	str	r3, [r7, #4]
  return(result);
 800404c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800404e:	1e5a      	subs	r2, r3, #1
 8004050:	4193      	sbcs	r3, r2
 8004052:	b2db      	uxtb	r3, r3
}
 8004054:	0018      	movs	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	b002      	add	sp, #8
 800405a:	bd80      	pop	{r7, pc}

0800405c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004060:	f001 f86e 	bl	8005140 <vTaskStartScheduler>
  
  return osOK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	0018      	movs	r0, r3
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800406c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800406e:	b089      	sub	sp, #36	; 0x24
 8004070:	af04      	add	r7, sp, #16
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d020      	beq.n	80040c0 <osThreadCreate+0x54>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d01c      	beq.n	80040c0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685c      	ldr	r4, [r3, #4]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681d      	ldr	r5, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691e      	ldr	r6, [r3, #16]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2208      	movs	r2, #8
 8004096:	5e9b      	ldrsh	r3, [r3, r2]
 8004098:	0018      	movs	r0, r3
 800409a:	f7ff ffb8 	bl	800400e <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695a      	ldr	r2, [r3, #20]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040a6:	6839      	ldr	r1, [r7, #0]
 80040a8:	9302      	str	r3, [sp, #8]
 80040aa:	9201      	str	r2, [sp, #4]
 80040ac:	9000      	str	r0, [sp, #0]
 80040ae:	000b      	movs	r3, r1
 80040b0:	0032      	movs	r2, r6
 80040b2:	0029      	movs	r1, r5
 80040b4:	0020      	movs	r0, r4
 80040b6:	f000 feaf 	bl	8004e18 <xTaskCreateStatic>
 80040ba:	0003      	movs	r3, r0
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	e01d      	b.n	80040fc <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685c      	ldr	r4, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040cc:	b29e      	uxth	r6, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2208      	movs	r2, #8
 80040d2:	5e9b      	ldrsh	r3, [r3, r2]
 80040d4:	0018      	movs	r0, r3
 80040d6:	f7ff ff9a 	bl	800400e <makeFreeRtosPriority>
 80040da:	0001      	movs	r1, r0
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	230c      	movs	r3, #12
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	9301      	str	r3, [sp, #4]
 80040e4:	9100      	str	r1, [sp, #0]
 80040e6:	0013      	movs	r3, r2
 80040e8:	0032      	movs	r2, r6
 80040ea:	0029      	movs	r1, r5
 80040ec:	0020      	movs	r0, r4
 80040ee:	f000 fed6 	bl	8004e9e <xTaskCreate>
 80040f2:	0003      	movs	r3, r0
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d001      	beq.n	80040fc <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 80040f8:	2300      	movs	r3, #0
 80040fa:	e000      	b.n	80040fe <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80040fc:	68fb      	ldr	r3, [r7, #12]
}
 80040fe:	0018      	movs	r0, r3
 8004100:	46bd      	mov	sp, r7
 8004102:	b005      	add	sp, #20
 8004104:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004106 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b084      	sub	sp, #16
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <osDelay+0x16>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	e000      	b.n	800411e <osDelay+0x18>
 800411c:	2301      	movs	r3, #1
 800411e:	0018      	movs	r0, r3
 8004120:	f000 ffe8 	bl	80050f4 <vTaskDelay>
  
  return osOK;
 8004124:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004126:	0018      	movs	r0, r3
 8004128:	46bd      	mov	sp, r7
 800412a:	b004      	add	sp, #16
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af02      	add	r7, sp, #8
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800413e:	2300      	movs	r3, #0
 8004140:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8004142:	f7ff ff7d 	bl	8004040 <inHandlerMode>
 8004146:	1e03      	subs	r3, r0, #0
 8004148:	d018      	beq.n	800417c <osSignalSet+0x4c>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800414a:	6839      	ldr	r1, [r7, #0]
 800414c:	2308      	movs	r3, #8
 800414e:	18fa      	adds	r2, r7, r3
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	230c      	movs	r3, #12
 8004154:	18fb      	adds	r3, r7, r3
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	0013      	movs	r3, r2
 800415a:	2201      	movs	r2, #1
 800415c:	f001 fcea 	bl	8005b34 <xTaskGenericNotifyFromISR>
 8004160:	0003      	movs	r3, r0
 8004162:	2b01      	cmp	r3, #1
 8004164:	d002      	beq.n	800416c <osSignalSet+0x3c>
      return 0x80000000;
 8004166:	2380      	movs	r3, #128	; 0x80
 8004168:	061b      	lsls	r3, r3, #24
 800416a:	e015      	b.n	8004198 <osSignalSet+0x68>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d011      	beq.n	8004196 <osSignalSet+0x66>
 8004172:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <osSignalSet+0x70>)
 8004174:	2280      	movs	r2, #128	; 0x80
 8004176:	0552      	lsls	r2, r2, #21
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	e00c      	b.n	8004196 <osSignalSet+0x66>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800417c:	6839      	ldr	r1, [r7, #0]
 800417e:	2308      	movs	r3, #8
 8004180:	18fb      	adds	r3, r7, r3
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f001 fc49 	bl	8005a1c <xTaskGenericNotify>
 800418a:	0003      	movs	r3, r0
 800418c:	2b01      	cmp	r3, #1
 800418e:	d002      	beq.n	8004196 <osSignalSet+0x66>
    return 0x80000000;
 8004190:	2380      	movs	r3, #128	; 0x80
 8004192:	061b      	lsls	r3, r3, #24
 8004194:	e000      	b.n	8004198 <osSignalSet+0x68>
  
  return ulPreviousNotificationValue;
 8004196:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8004198:	0018      	movs	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	b004      	add	sp, #16
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	e000ed04 	.word	0xe000ed04

080041a4 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80041a4:	b590      	push	{r4, r7, lr}
 80041a6:	b089      	sub	sp, #36	; 0x24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80041b0:	2310      	movs	r3, #16
 80041b2:	18fb      	adds	r3, r7, r3
 80041b4:	2200      	movs	r2, #0
 80041b6:	605a      	str	r2, [r3, #4]
  ticks = 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3301      	adds	r3, #1
 80041c0:	d103      	bne.n	80041ca <osSignalWait+0x26>
    ticks = portMAX_DELAY;
 80041c2:	2301      	movs	r3, #1
 80041c4:	425b      	negs	r3, r3
 80041c6:	61fb      	str	r3, [r7, #28]
 80041c8:	e009      	b.n	80041de <osSignalWait+0x3a>
  }
  else if (millisec != 0) {
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d006      	beq.n	80041de <osSignalWait+0x3a>
    ticks = millisec / portTICK_PERIOD_MS;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <osSignalWait+0x3a>
      ticks = 1;
 80041da:	2301      	movs	r3, #1
 80041dc:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80041de:	f7ff ff2f 	bl	8004040 <inHandlerMode>
 80041e2:	1e03      	subs	r3, r0, #0
 80041e4:	d004      	beq.n	80041f0 <osSignalWait+0x4c>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80041e6:	2310      	movs	r3, #16
 80041e8:	18fb      	adds	r3, r7, r3
 80041ea:	2282      	movs	r2, #130	; 0x82
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	e026      	b.n	800423e <osSignalWait+0x9a>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80041f0:	68b9      	ldr	r1, [r7, #8]
 80041f2:	69f8      	ldr	r0, [r7, #28]
 80041f4:	2310      	movs	r3, #16
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	1d1a      	adds	r2, r3, #4
 80041fa:	0003      	movs	r3, r0
 80041fc:	2000      	movs	r0, #0
 80041fe:	f001 fbb9 	bl	8005974 <xTaskNotifyWait>
 8004202:	0003      	movs	r3, r0
 8004204:	2b01      	cmp	r3, #1
 8004206:	d00c      	beq.n	8004222 <osSignalWait+0x7e>
    {
      if(ticks == 0)  ret.status = osOK;
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d104      	bne.n	8004218 <osSignalWait+0x74>
 800420e:	2310      	movs	r3, #16
 8004210:	18fb      	adds	r3, r7, r3
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	e012      	b.n	800423e <osSignalWait+0x9a>
      else  ret.status = osEventTimeout;
 8004218:	2310      	movs	r3, #16
 800421a:	18fb      	adds	r3, r7, r3
 800421c:	2240      	movs	r2, #64	; 0x40
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	e00d      	b.n	800423e <osSignalWait+0x9a>
    }
    else if(ret.value.signals < 0)
 8004222:	2310      	movs	r3, #16
 8004224:	18fb      	adds	r3, r7, r3
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	da04      	bge.n	8004236 <osSignalWait+0x92>
    {
      ret.status =  osErrorValue;     
 800422c:	2310      	movs	r3, #16
 800422e:	18fb      	adds	r3, r7, r3
 8004230:	2286      	movs	r2, #134	; 0x86
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	e003      	b.n	800423e <osSignalWait+0x9a>
    }
    else  ret.status =  osEventSignal;
 8004236:	2310      	movs	r3, #16
 8004238:	18fb      	adds	r3, r7, r3
 800423a:	2208      	movs	r2, #8
 800423c:	601a      	str	r2, [r3, #0]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2210      	movs	r2, #16
 8004242:	18ba      	adds	r2, r7, r2
 8004244:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004246:	c313      	stmia	r3!, {r0, r1, r4}
}
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	46bd      	mov	sp, r7
 800424c:	b009      	add	sp, #36	; 0x24
 800424e:	bd90      	pop	{r4, r7, pc}

08004250 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004250:	b590      	push	{r4, r7, lr}
 8004252:	b085      	sub	sp, #20
 8004254:	af02      	add	r7, sp, #8
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d012      	beq.n	8004288 <osMessageCreate+0x38>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00e      	beq.n	8004288 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6818      	ldr	r0, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6859      	ldr	r1, [r3, #4]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68dc      	ldr	r4, [r3, #12]
 800427a:	2300      	movs	r3, #0
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	0023      	movs	r3, r4
 8004280:	f000 f9bd 	bl	80045fe <xQueueGenericCreateStatic>
 8004284:	0003      	movs	r3, r0
 8004286:	e008      	b.n	800429a <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6818      	ldr	r0, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	0019      	movs	r1, r3
 8004294:	f000 f9fe 	bl	8004694 <xQueueGenericCreate>
 8004298:	0003      	movs	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800429a:	0018      	movs	r0, r3
 800429c:	46bd      	mov	sp, r7
 800429e:	b003      	add	sp, #12
 80042a0:	bd90      	pop	{r4, r7, pc}
	...

080042a4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80042b0:	2300      	movs	r3, #0
 80042b2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <osMessagePut+0x1e>
    ticks = 1;
 80042be:	2301      	movs	r3, #1
 80042c0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80042c2:	f7ff febd 	bl	8004040 <inHandlerMode>
 80042c6:	1e03      	subs	r3, r0, #0
 80042c8:	d014      	beq.n	80042f4 <osMessagePut+0x50>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80042ca:	2310      	movs	r3, #16
 80042cc:	18fa      	adds	r2, r7, r3
 80042ce:	2308      	movs	r3, #8
 80042d0:	18f9      	adds	r1, r7, r3
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	2300      	movs	r3, #0
 80042d6:	f000 faf9 	bl	80048cc <xQueueGenericSendFromISR>
 80042da:	0003      	movs	r3, r0
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d001      	beq.n	80042e4 <osMessagePut+0x40>
      return osErrorOS;
 80042e0:	23ff      	movs	r3, #255	; 0xff
 80042e2:	e014      	b.n	800430e <osMessagePut+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d010      	beq.n	800430c <osMessagePut+0x68>
 80042ea:	4b0b      	ldr	r3, [pc, #44]	; (8004318 <osMessagePut+0x74>)
 80042ec:	2280      	movs	r2, #128	; 0x80
 80042ee:	0552      	lsls	r2, r2, #21
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	e00b      	b.n	800430c <osMessagePut+0x68>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	2308      	movs	r3, #8
 80042f8:	18f9      	adds	r1, r7, r3
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	2300      	movs	r3, #0
 80042fe:	f000 fa21 	bl	8004744 <xQueueGenericSend>
 8004302:	0003      	movs	r3, r0
 8004304:	2b01      	cmp	r3, #1
 8004306:	d001      	beq.n	800430c <osMessagePut+0x68>
      return osErrorOS;
 8004308:	23ff      	movs	r3, #255	; 0xff
 800430a:	e000      	b.n	800430e <osMessagePut+0x6a>
    }
  }
  
  return osOK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	0018      	movs	r0, r3
 8004310:	46bd      	mov	sp, r7
 8004312:	b006      	add	sp, #24
 8004314:	bd80      	pop	{r7, pc}
 8004316:	46c0      	nop			; (mov r8, r8)
 8004318:	e000ed04 	.word	0xe000ed04

0800431c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800431c:	b590      	push	{r4, r7, lr}
 800431e:	b08b      	sub	sp, #44	; 0x2c
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004328:	2114      	movs	r1, #20
 800432a:	187b      	adds	r3, r7, r1
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	609a      	str	r2, [r3, #8]
  event.value.v = 0;
 8004330:	187b      	adds	r3, r7, r1
 8004332:	2200      	movs	r2, #0
 8004334:	605a      	str	r2, [r3, #4]
  
  if (queue_id == NULL) {
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d108      	bne.n	800434e <osMessageGet+0x32>
    event.status = osErrorParameter;
 800433c:	2114      	movs	r1, #20
 800433e:	187b      	adds	r3, r7, r1
 8004340:	2280      	movs	r2, #128	; 0x80
 8004342:	601a      	str	r2, [r3, #0]
    return event;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	187a      	adds	r2, r7, r1
 8004348:	ca13      	ldmia	r2!, {r0, r1, r4}
 800434a:	c313      	stmia	r3!, {r0, r1, r4}
 800434c:	e053      	b.n	80043f6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800434e:	2300      	movs	r3, #0
 8004350:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004352:	2300      	movs	r3, #0
 8004354:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	3301      	adds	r3, #1
 800435a:	d103      	bne.n	8004364 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800435c:	2301      	movs	r3, #1
 800435e:	425b      	negs	r3, r3
 8004360:	627b      	str	r3, [r7, #36]	; 0x24
 8004362:	e009      	b.n	8004378 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d006      	beq.n	8004378 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <osMessageGet+0x5c>
      ticks = 1;
 8004374:	2301      	movs	r3, #1
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004378:	f7ff fe62 	bl	8004040 <inHandlerMode>
 800437c:	1e03      	subs	r3, r0, #0
 800437e:	d01c      	beq.n	80043ba <osMessageGet+0x9e>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004380:	2320      	movs	r3, #32
 8004382:	18fa      	adds	r2, r7, r3
 8004384:	2314      	movs	r3, #20
 8004386:	18fb      	adds	r3, r7, r3
 8004388:	1d19      	adds	r1, r3, #4
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	0018      	movs	r0, r3
 800438e:	f000 fbc3 	bl	8004b18 <xQueueReceiveFromISR>
 8004392:	0003      	movs	r3, r0
 8004394:	2b01      	cmp	r3, #1
 8004396:	d104      	bne.n	80043a2 <osMessageGet+0x86>
      /* We have mail */
      event.status = osEventMessage;
 8004398:	2314      	movs	r3, #20
 800439a:	18fb      	adds	r3, r7, r3
 800439c:	2210      	movs	r2, #16
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	e003      	b.n	80043aa <osMessageGet+0x8e>
    }
    else {
      event.status = osOK;
 80043a2:	2314      	movs	r3, #20
 80043a4:	18fb      	adds	r3, r7, r3
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d01d      	beq.n	80043ec <osMessageGet+0xd0>
 80043b0:	4b13      	ldr	r3, [pc, #76]	; (8004400 <osMessageGet+0xe4>)
 80043b2:	2280      	movs	r2, #128	; 0x80
 80043b4:	0552      	lsls	r2, r2, #21
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	e018      	b.n	80043ec <osMessageGet+0xd0>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80043ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043bc:	2314      	movs	r3, #20
 80043be:	18fb      	adds	r3, r7, r3
 80043c0:	1d19      	adds	r1, r3, #4
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	0018      	movs	r0, r3
 80043c6:	f000 faf2 	bl	80049ae <xQueueReceive>
 80043ca:	0003      	movs	r3, r0
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d104      	bne.n	80043da <osMessageGet+0xbe>
      /* We have mail */
      event.status = osEventMessage;
 80043d0:	2314      	movs	r3, #20
 80043d2:	18fb      	adds	r3, r7, r3
 80043d4:	2210      	movs	r2, #16
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	e008      	b.n	80043ec <osMessageGet+0xd0>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <osMessageGet+0xc8>
 80043e0:	2200      	movs	r2, #0
 80043e2:	e000      	b.n	80043e6 <osMessageGet+0xca>
 80043e4:	2240      	movs	r2, #64	; 0x40
 80043e6:	2314      	movs	r3, #20
 80043e8:	18fb      	adds	r3, r7, r3
 80043ea:	601a      	str	r2, [r3, #0]
    }
  }
  
  return event;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2214      	movs	r2, #20
 80043f0:	18ba      	adds	r2, r7, r2
 80043f2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80043f4:	c313      	stmia	r3!, {r0, r1, r4}
}
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	46bd      	mov	sp, r7
 80043fa:	b00b      	add	sp, #44	; 0x2c
 80043fc:	bd90      	pop	{r4, r7, pc}
 80043fe:	46c0      	nop			; (mov r8, r8)
 8004400:	e000ed04 	.word	0xe000ed04

08004404 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3308      	adds	r3, #8
 8004410:	001a      	movs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	4252      	negs	r2, r2
 800441c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	3308      	adds	r3, #8
 8004422:	001a      	movs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	3308      	adds	r3, #8
 800442c:	001a      	movs	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004438:	46c0      	nop			; (mov r8, r8)
 800443a:	46bd      	mov	sp, r7
 800443c:	b002      	add	sp, #8
 800443e:	bd80      	pop	{r7, pc}

08004440 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	46bd      	mov	sp, r7
 8004452:	b002      	add	sp, #8
 8004454:	bd80      	pop	{r7, pc}

08004456 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b084      	sub	sp, #16
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	601a      	str	r2, [r3, #0]
}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	46bd      	mov	sp, r7
 8004496:	b004      	add	sp, #16
 8004498:	bd80      	pop	{r7, pc}

0800449a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b084      	sub	sp, #16
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	3301      	adds	r3, #1
 80044ae:	d103      	bne.n	80044b8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	e00c      	b.n	80044d2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3308      	adds	r3, #8
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	e002      	b.n	80044c6 <vListInsert+0x2c>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d2f6      	bcs.n	80044c0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	1c5a      	adds	r2, r3, #1
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	601a      	str	r2, [r3, #0]
}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	46bd      	mov	sp, r7
 8004502:	b004      	add	sp, #16
 8004504:	bd80      	pop	{r7, pc}

08004506 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b084      	sub	sp, #16
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6892      	ldr	r2, [r2, #8]
 800451c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	6852      	ldr	r2, [r2, #4]
 8004526:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	429a      	cmp	r2, r3
 8004530:	d103      	bne.n	800453a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	1e5a      	subs	r2, r3, #1
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
}
 800454e:	0018      	movs	r0, r3
 8004550:	46bd      	mov	sp, r7
 8004552:	b004      	add	sp, #16
 8004554:	bd80      	pop	{r7, pc}

08004556 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b084      	sub	sp, #16
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
 800455e:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <xQueueGenericReset+0x18>
 800456a:	b672      	cpsid	i
 800456c:	e7fe      	b.n	800456c <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800456e:	f001 fc77 	bl	8005e60 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	434b      	muls	r3, r1
 8004580:	18d2      	adds	r2, r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459c:	1e59      	subs	r1, r3, #1
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	434b      	muls	r3, r1
 80045a4:	18d2      	adds	r2, r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2244      	movs	r2, #68	; 0x44
 80045ae:	21ff      	movs	r1, #255	; 0xff
 80045b0:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2245      	movs	r2, #69	; 0x45
 80045b6:	21ff      	movs	r1, #255	; 0xff
 80045b8:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10d      	bne.n	80045dc <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d013      	beq.n	80045f0 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	3310      	adds	r3, #16
 80045cc:	0018      	movs	r0, r3
 80045ce:	f000 ffc1 	bl	8005554 <xTaskRemoveFromEventList>
 80045d2:	1e03      	subs	r3, r0, #0
 80045d4:	d00c      	beq.n	80045f0 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80045d6:	f001 fc33 	bl	8005e40 <vPortYield>
 80045da:	e009      	b.n	80045f0 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	3310      	adds	r3, #16
 80045e0:	0018      	movs	r0, r3
 80045e2:	f7ff ff0f 	bl	8004404 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	3324      	adds	r3, #36	; 0x24
 80045ea:	0018      	movs	r0, r3
 80045ec:	f7ff ff0a 	bl	8004404 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045f0:	f001 fc48 	bl	8005e84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80045f4:	2301      	movs	r3, #1
}
 80045f6:	0018      	movs	r0, r3
 80045f8:	46bd      	mov	sp, r7
 80045fa:	b004      	add	sp, #16
 80045fc:	bd80      	pop	{r7, pc}

080045fe <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80045fe:	b590      	push	{r4, r7, lr}
 8004600:	b089      	sub	sp, #36	; 0x24
 8004602:	af02      	add	r7, sp, #8
 8004604:	60f8      	str	r0, [r7, #12]
 8004606:	60b9      	str	r1, [r7, #8]
 8004608:	607a      	str	r2, [r7, #4]
 800460a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <xQueueGenericCreateStatic+0x18>
 8004612:	b672      	cpsid	i
 8004614:	e7fe      	b.n	8004614 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <xQueueGenericCreateStatic+0x22>
 800461c:	b672      	cpsid	i
 800461e:	e7fe      	b.n	800461e <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <xQueueGenericCreateStatic+0x2e>
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <xQueueGenericCreateStatic+0x32>
 800462c:	2301      	movs	r3, #1
 800462e:	e000      	b.n	8004632 <xQueueGenericCreateStatic+0x34>
 8004630:	2300      	movs	r3, #0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <xQueueGenericCreateStatic+0x3c>
 8004636:	b672      	cpsid	i
 8004638:	e7fe      	b.n	8004638 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d102      	bne.n	8004646 <xQueueGenericCreateStatic+0x48>
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <xQueueGenericCreateStatic+0x4c>
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <xQueueGenericCreateStatic+0x4e>
 800464a:	2300      	movs	r3, #0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <xQueueGenericCreateStatic+0x56>
 8004650:	b672      	cpsid	i
 8004652:	e7fe      	b.n	8004652 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004654:	2348      	movs	r3, #72	; 0x48
 8004656:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	2b48      	cmp	r3, #72	; 0x48
 800465c:	d001      	beq.n	8004662 <xQueueGenericCreateStatic+0x64>
 800465e:	b672      	cpsid	i
 8004660:	e7fe      	b.n	8004660 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00e      	beq.n	800468a <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	2246      	movs	r2, #70	; 0x46
 8004670:	2101      	movs	r1, #1
 8004672:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004674:	2328      	movs	r3, #40	; 0x28
 8004676:	18fb      	adds	r3, r7, r3
 8004678:	781c      	ldrb	r4, [r3, #0]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	68b9      	ldr	r1, [r7, #8]
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	0023      	movs	r3, r4
 8004686:	f000 f83b 	bl	8004700 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800468a:	697b      	ldr	r3, [r7, #20]
	}
 800468c:	0018      	movs	r0, r3
 800468e:	46bd      	mov	sp, r7
 8004690:	b007      	add	sp, #28
 8004692:	bd90      	pop	{r4, r7, pc}

08004694 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004694:	b590      	push	{r4, r7, lr}
 8004696:	b08b      	sub	sp, #44	; 0x2c
 8004698:	af02      	add	r7, sp, #8
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	1dfb      	adds	r3, r7, #7
 80046a0:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <xQueueGenericCreate+0x18>
 80046a8:	b672      	cpsid	i
 80046aa:	e7fe      	b.n	80046aa <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d102      	bne.n	80046b8 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80046b2:	2300      	movs	r3, #0
 80046b4:	61fb      	str	r3, [r7, #28]
 80046b6:	e003      	b.n	80046c0 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	4353      	muls	r3, r2
 80046be:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	3348      	adds	r3, #72	; 0x48
 80046c4:	0018      	movs	r0, r3
 80046c6:	f001 fc63 	bl	8005f90 <pvPortMalloc>
 80046ca:	0003      	movs	r3, r0
 80046cc:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d010      	beq.n	80046f6 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	3348      	adds	r3, #72	; 0x48
 80046d8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	2246      	movs	r2, #70	; 0x46
 80046de:	2100      	movs	r1, #0
 80046e0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80046e2:	1dfb      	adds	r3, r7, #7
 80046e4:	781c      	ldrb	r4, [r3, #0]
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	0023      	movs	r3, r4
 80046f2:	f000 f805 	bl	8004700 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80046f6:	69bb      	ldr	r3, [r7, #24]
	}
 80046f8:	0018      	movs	r0, r3
 80046fa:	46bd      	mov	sp, r7
 80046fc:	b009      	add	sp, #36	; 0x24
 80046fe:	bd90      	pop	{r4, r7, pc}

08004700 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
 800470c:	001a      	movs	r2, r3
 800470e:	1cfb      	adds	r3, r7, #3
 8004710:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d103      	bne.n	8004720 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	e002      	b.n	8004726 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	2101      	movs	r1, #1
 8004736:	0018      	movs	r0, r3
 8004738:	f7ff ff0d 	bl	8004556 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800473c:	46c0      	nop			; (mov r8, r8)
 800473e:	46bd      	mov	sp, r7
 8004740:	b004      	add	sp, #16
 8004742:	bd80      	pop	{r7, pc}

08004744 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b08a      	sub	sp, #40	; 0x28
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
 8004750:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004752:	2300      	movs	r3, #0
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <xQueueGenericSend+0x20>
 8004760:	b672      	cpsid	i
 8004762:	e7fe      	b.n	8004762 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d103      	bne.n	8004772 <xQueueGenericSend+0x2e>
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <xQueueGenericSend+0x32>
 8004772:	2301      	movs	r3, #1
 8004774:	e000      	b.n	8004778 <xQueueGenericSend+0x34>
 8004776:	2300      	movs	r3, #0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <xQueueGenericSend+0x3c>
 800477c:	b672      	cpsid	i
 800477e:	e7fe      	b.n	800477e <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2b02      	cmp	r3, #2
 8004784:	d103      	bne.n	800478e <xQueueGenericSend+0x4a>
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478a:	2b01      	cmp	r3, #1
 800478c:	d101      	bne.n	8004792 <xQueueGenericSend+0x4e>
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <xQueueGenericSend+0x50>
 8004792:	2300      	movs	r3, #0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <xQueueGenericSend+0x58>
 8004798:	b672      	cpsid	i
 800479a:	e7fe      	b.n	800479a <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800479c:	f001 f872 	bl	8005884 <xTaskGetSchedulerState>
 80047a0:	1e03      	subs	r3, r0, #0
 80047a2:	d102      	bne.n	80047aa <xQueueGenericSend+0x66>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <xQueueGenericSend+0x6a>
 80047aa:	2301      	movs	r3, #1
 80047ac:	e000      	b.n	80047b0 <xQueueGenericSend+0x6c>
 80047ae:	2300      	movs	r3, #0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <xQueueGenericSend+0x74>
 80047b4:	b672      	cpsid	i
 80047b6:	e7fe      	b.n	80047b6 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047b8:	f001 fb52 	bl	8005e60 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d302      	bcc.n	80047ce <xQueueGenericSend+0x8a>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d11e      	bne.n	800480c <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	68b9      	ldr	r1, [r7, #8]
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	0018      	movs	r0, r3
 80047d6:	f000 fa02 	bl	8004bde <prvCopyDataToQueue>
 80047da:	0003      	movs	r3, r0
 80047dc:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d009      	beq.n	80047fa <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	3324      	adds	r3, #36	; 0x24
 80047ea:	0018      	movs	r0, r3
 80047ec:	f000 feb2 	bl	8005554 <xTaskRemoveFromEventList>
 80047f0:	1e03      	subs	r3, r0, #0
 80047f2:	d007      	beq.n	8004804 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80047f4:	f001 fb24 	bl	8005e40 <vPortYield>
 80047f8:	e004      	b.n	8004804 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004800:	f001 fb1e 	bl	8005e40 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004804:	f001 fb3e 	bl	8005e84 <vPortExitCritical>
				return pdPASS;
 8004808:	2301      	movs	r3, #1
 800480a:	e05b      	b.n	80048c4 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d103      	bne.n	800481a <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004812:	f001 fb37 	bl	8005e84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004816:	2300      	movs	r3, #0
 8004818:	e054      	b.n	80048c4 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	2b00      	cmp	r3, #0
 800481e:	d106      	bne.n	800482e <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004820:	2314      	movs	r3, #20
 8004822:	18fb      	adds	r3, r7, r3
 8004824:	0018      	movs	r0, r3
 8004826:	f000 fef1 	bl	800560c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800482a:	2301      	movs	r3, #1
 800482c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800482e:	f001 fb29 	bl	8005e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004832:	f000 fcd3 	bl	80051dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004836:	f001 fb13 	bl	8005e60 <vPortEnterCritical>
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	2244      	movs	r2, #68	; 0x44
 800483e:	5c9b      	ldrb	r3, [r3, r2]
 8004840:	b25b      	sxtb	r3, r3
 8004842:	3301      	adds	r3, #1
 8004844:	d103      	bne.n	800484e <xQueueGenericSend+0x10a>
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	2244      	movs	r2, #68	; 0x44
 800484a:	2100      	movs	r1, #0
 800484c:	5499      	strb	r1, [r3, r2]
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	2245      	movs	r2, #69	; 0x45
 8004852:	5c9b      	ldrb	r3, [r3, r2]
 8004854:	b25b      	sxtb	r3, r3
 8004856:	3301      	adds	r3, #1
 8004858:	d103      	bne.n	8004862 <xQueueGenericSend+0x11e>
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	2245      	movs	r2, #69	; 0x45
 800485e:	2100      	movs	r1, #0
 8004860:	5499      	strb	r1, [r3, r2]
 8004862:	f001 fb0f 	bl	8005e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004866:	1d3a      	adds	r2, r7, #4
 8004868:	2314      	movs	r3, #20
 800486a:	18fb      	adds	r3, r7, r3
 800486c:	0011      	movs	r1, r2
 800486e:	0018      	movs	r0, r3
 8004870:	f000 fee0 	bl	8005634 <xTaskCheckForTimeOut>
 8004874:	1e03      	subs	r3, r0, #0
 8004876:	d11e      	bne.n	80048b6 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	0018      	movs	r0, r3
 800487c:	f000 fab4 	bl	8004de8 <prvIsQueueFull>
 8004880:	1e03      	subs	r3, r0, #0
 8004882:	d011      	beq.n	80048a8 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	3310      	adds	r3, #16
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	0011      	movs	r1, r2
 800488c:	0018      	movs	r0, r3
 800488e:	f000 fe43 	bl	8005518 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	0018      	movs	r0, r3
 8004896:	f000 fa33 	bl	8004d00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800489a:	f000 fcab 	bl	80051f4 <xTaskResumeAll>
 800489e:	1e03      	subs	r3, r0, #0
 80048a0:	d18a      	bne.n	80047b8 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80048a2:	f001 facd 	bl	8005e40 <vPortYield>
 80048a6:	e787      	b.n	80047b8 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	0018      	movs	r0, r3
 80048ac:	f000 fa28 	bl	8004d00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048b0:	f000 fca0 	bl	80051f4 <xTaskResumeAll>
 80048b4:	e780      	b.n	80047b8 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	0018      	movs	r0, r3
 80048ba:	f000 fa21 	bl	8004d00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048be:	f000 fc99 	bl	80051f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80048c2:	2300      	movs	r3, #0
		}
	}
}
 80048c4:	0018      	movs	r0, r3
 80048c6:	46bd      	mov	sp, r7
 80048c8:	b00a      	add	sp, #40	; 0x28
 80048ca:	bd80      	pop	{r7, pc}

080048cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80048cc:	b590      	push	{r4, r7, lr}
 80048ce:	b089      	sub	sp, #36	; 0x24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
 80048d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <xQueueGenericSendFromISR+0x1c>
 80048e4:	b672      	cpsid	i
 80048e6:	e7fe      	b.n	80048e6 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d103      	bne.n	80048f6 <xQueueGenericSendFromISR+0x2a>
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <xQueueGenericSendFromISR+0x2e>
 80048f6:	2301      	movs	r3, #1
 80048f8:	e000      	b.n	80048fc <xQueueGenericSendFromISR+0x30>
 80048fa:	2300      	movs	r3, #0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <xQueueGenericSendFromISR+0x38>
 8004900:	b672      	cpsid	i
 8004902:	e7fe      	b.n	8004902 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d103      	bne.n	8004912 <xQueueGenericSendFromISR+0x46>
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490e:	2b01      	cmp	r3, #1
 8004910:	d101      	bne.n	8004916 <xQueueGenericSendFromISR+0x4a>
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <xQueueGenericSendFromISR+0x4c>
 8004916:	2300      	movs	r3, #0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <xQueueGenericSendFromISR+0x54>
 800491c:	b672      	cpsid	i
 800491e:	e7fe      	b.n	800491e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004920:	f001 fac8 	bl	8005eb4 <ulSetInterruptMaskFromISR>
 8004924:	0003      	movs	r3, r0
 8004926:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004930:	429a      	cmp	r2, r3
 8004932:	d302      	bcc.n	800493a <xQueueGenericSendFromISR+0x6e>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2b02      	cmp	r3, #2
 8004938:	d12e      	bne.n	8004998 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800493a:	2413      	movs	r4, #19
 800493c:	193b      	adds	r3, r7, r4
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	2145      	movs	r1, #69	; 0x45
 8004942:	5c52      	ldrb	r2, [r2, r1]
 8004944:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	68b9      	ldr	r1, [r7, #8]
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	0018      	movs	r0, r3
 800494e:	f000 f946 	bl	8004bde <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004952:	193b      	adds	r3, r7, r4
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	b25b      	sxtb	r3, r3
 8004958:	3301      	adds	r3, #1
 800495a:	d111      	bne.n	8004980 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	2b00      	cmp	r3, #0
 8004962:	d016      	beq.n	8004992 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	3324      	adds	r3, #36	; 0x24
 8004968:	0018      	movs	r0, r3
 800496a:	f000 fdf3 	bl	8005554 <xTaskRemoveFromEventList>
 800496e:	1e03      	subs	r3, r0, #0
 8004970:	d00f      	beq.n	8004992 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00c      	beq.n	8004992 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	e008      	b.n	8004992 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004980:	2313      	movs	r3, #19
 8004982:	18fb      	adds	r3, r7, r3
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	3301      	adds	r3, #1
 8004988:	b2db      	uxtb	r3, r3
 800498a:	b259      	sxtb	r1, r3
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	2245      	movs	r2, #69	; 0x45
 8004990:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8004992:	2301      	movs	r3, #1
 8004994:	61fb      	str	r3, [r7, #28]
		{
 8004996:	e001      	b.n	800499c <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004998:	2300      	movs	r3, #0
 800499a:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	0018      	movs	r0, r3
 80049a0:	f001 fa8e 	bl	8005ec0 <vClearInterruptMaskFromISR>

	return xReturn;
 80049a4:	69fb      	ldr	r3, [r7, #28]
}
 80049a6:	0018      	movs	r0, r3
 80049a8:	46bd      	mov	sp, r7
 80049aa:	b009      	add	sp, #36	; 0x24
 80049ac:	bd90      	pop	{r4, r7, pc}

080049ae <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b08a      	sub	sp, #40	; 0x28
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80049ba:	2300      	movs	r3, #0
 80049bc:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <xQueueReceive+0x1e>
 80049c8:	b672      	cpsid	i
 80049ca:	e7fe      	b.n	80049ca <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d103      	bne.n	80049da <xQueueReceive+0x2c>
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <xQueueReceive+0x30>
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <xQueueReceive+0x32>
 80049de:	2300      	movs	r3, #0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <xQueueReceive+0x3a>
 80049e4:	b672      	cpsid	i
 80049e6:	e7fe      	b.n	80049e6 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049e8:	f000 ff4c 	bl	8005884 <xTaskGetSchedulerState>
 80049ec:	1e03      	subs	r3, r0, #0
 80049ee:	d102      	bne.n	80049f6 <xQueueReceive+0x48>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <xQueueReceive+0x4c>
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <xQueueReceive+0x4e>
 80049fa:	2300      	movs	r3, #0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <xQueueReceive+0x56>
 8004a00:	b672      	cpsid	i
 8004a02:	e7fe      	b.n	8004a02 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a04:	f001 fa2c 	bl	8005e60 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0c:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01a      	beq.n	8004a4a <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	0011      	movs	r1, r2
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	f000 f94a 	bl	8004cb4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	1e5a      	subs	r2, r3, #1
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d008      	beq.n	8004a42 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a30:	6a3b      	ldr	r3, [r7, #32]
 8004a32:	3310      	adds	r3, #16
 8004a34:	0018      	movs	r0, r3
 8004a36:	f000 fd8d 	bl	8005554 <xTaskRemoveFromEventList>
 8004a3a:	1e03      	subs	r3, r0, #0
 8004a3c:	d001      	beq.n	8004a42 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a3e:	f001 f9ff 	bl	8005e40 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a42:	f001 fa1f 	bl	8005e84 <vPortExitCritical>
				return pdPASS;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e062      	b.n	8004b10 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d103      	bne.n	8004a58 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a50:	f001 fa18 	bl	8005e84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a54:	2300      	movs	r3, #0
 8004a56:	e05b      	b.n	8004b10 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d106      	bne.n	8004a6c <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a5e:	2314      	movs	r3, #20
 8004a60:	18fb      	adds	r3, r7, r3
 8004a62:	0018      	movs	r0, r3
 8004a64:	f000 fdd2 	bl	800560c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a6c:	f001 fa0a 	bl	8005e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a70:	f000 fbb4 	bl	80051dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a74:	f001 f9f4 	bl	8005e60 <vPortEnterCritical>
 8004a78:	6a3b      	ldr	r3, [r7, #32]
 8004a7a:	2244      	movs	r2, #68	; 0x44
 8004a7c:	5c9b      	ldrb	r3, [r3, r2]
 8004a7e:	b25b      	sxtb	r3, r3
 8004a80:	3301      	adds	r3, #1
 8004a82:	d103      	bne.n	8004a8c <xQueueReceive+0xde>
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	2244      	movs	r2, #68	; 0x44
 8004a88:	2100      	movs	r1, #0
 8004a8a:	5499      	strb	r1, [r3, r2]
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	2245      	movs	r2, #69	; 0x45
 8004a90:	5c9b      	ldrb	r3, [r3, r2]
 8004a92:	b25b      	sxtb	r3, r3
 8004a94:	3301      	adds	r3, #1
 8004a96:	d103      	bne.n	8004aa0 <xQueueReceive+0xf2>
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	2245      	movs	r2, #69	; 0x45
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	5499      	strb	r1, [r3, r2]
 8004aa0:	f001 f9f0 	bl	8005e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004aa4:	1d3a      	adds	r2, r7, #4
 8004aa6:	2314      	movs	r3, #20
 8004aa8:	18fb      	adds	r3, r7, r3
 8004aaa:	0011      	movs	r1, r2
 8004aac:	0018      	movs	r0, r3
 8004aae:	f000 fdc1 	bl	8005634 <xTaskCheckForTimeOut>
 8004ab2:	1e03      	subs	r3, r0, #0
 8004ab4:	d11e      	bne.n	8004af4 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f000 f97f 	bl	8004dbc <prvIsQueueEmpty>
 8004abe:	1e03      	subs	r3, r0, #0
 8004ac0:	d011      	beq.n	8004ae6 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	3324      	adds	r3, #36	; 0x24
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	0011      	movs	r1, r2
 8004aca:	0018      	movs	r0, r3
 8004acc:	f000 fd24 	bl	8005518 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	f000 f914 	bl	8004d00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ad8:	f000 fb8c 	bl	80051f4 <xTaskResumeAll>
 8004adc:	1e03      	subs	r3, r0, #0
 8004ade:	d191      	bne.n	8004a04 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8004ae0:	f001 f9ae 	bl	8005e40 <vPortYield>
 8004ae4:	e78e      	b.n	8004a04 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f000 f909 	bl	8004d00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004aee:	f000 fb81 	bl	80051f4 <xTaskResumeAll>
 8004af2:	e787      	b.n	8004a04 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004af4:	6a3b      	ldr	r3, [r7, #32]
 8004af6:	0018      	movs	r0, r3
 8004af8:	f000 f902 	bl	8004d00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004afc:	f000 fb7a 	bl	80051f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	0018      	movs	r0, r3
 8004b04:	f000 f95a 	bl	8004dbc <prvIsQueueEmpty>
 8004b08:	1e03      	subs	r3, r0, #0
 8004b0a:	d100      	bne.n	8004b0e <xQueueReceive+0x160>
 8004b0c:	e77a      	b.n	8004a04 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b0e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004b10:	0018      	movs	r0, r3
 8004b12:	46bd      	mov	sp, r7
 8004b14:	b00a      	add	sp, #40	; 0x28
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004b18:	b590      	push	{r4, r7, lr}
 8004b1a:	b08b      	sub	sp, #44	; 0x2c
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <xQueueReceiveFromISR+0x1a>
 8004b2e:	b672      	cpsid	i
 8004b30:	e7fe      	b.n	8004b30 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d103      	bne.n	8004b40 <xQueueReceiveFromISR+0x28>
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <xQueueReceiveFromISR+0x2c>
 8004b40:	2301      	movs	r3, #1
 8004b42:	e000      	b.n	8004b46 <xQueueReceiveFromISR+0x2e>
 8004b44:	2300      	movs	r3, #0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <xQueueReceiveFromISR+0x36>
 8004b4a:	b672      	cpsid	i
 8004b4c:	e7fe      	b.n	8004b4c <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b4e:	f001 f9b1 	bl	8005eb4 <ulSetInterruptMaskFromISR>
 8004b52:	0003      	movs	r3, r0
 8004b54:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5a:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d032      	beq.n	8004bc8 <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004b62:	2417      	movs	r4, #23
 8004b64:	193b      	adds	r3, r7, r4
 8004b66:	6a3a      	ldr	r2, [r7, #32]
 8004b68:	2144      	movs	r1, #68	; 0x44
 8004b6a:	5c52      	ldrb	r2, [r2, r1]
 8004b6c:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	0011      	movs	r1, r2
 8004b74:	0018      	movs	r0, r3
 8004b76:	f000 f89d 	bl	8004cb4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	1e5a      	subs	r2, r3, #1
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004b82:	193b      	adds	r3, r7, r4
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	b25b      	sxtb	r3, r3
 8004b88:	3301      	adds	r3, #1
 8004b8a:	d111      	bne.n	8004bb0 <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d016      	beq.n	8004bc2 <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	3310      	adds	r3, #16
 8004b98:	0018      	movs	r0, r3
 8004b9a:	f000 fcdb 	bl	8005554 <xTaskRemoveFromEventList>
 8004b9e:	1e03      	subs	r3, r0, #0
 8004ba0:	d00f      	beq.n	8004bc2 <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00c      	beq.n	8004bc2 <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	e008      	b.n	8004bc2 <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004bb0:	2317      	movs	r3, #23
 8004bb2:	18fb      	adds	r3, r7, r3
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	b259      	sxtb	r1, r3
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	2244      	movs	r2, #68	; 0x44
 8004bc0:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc6:	e001      	b.n	8004bcc <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	0018      	movs	r0, r3
 8004bd0:	f001 f976 	bl	8005ec0 <vClearInterruptMaskFromISR>

	return xReturn;
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	b00b      	add	sp, #44	; 0x2c
 8004bdc:	bd90      	pop	{r4, r7, pc}

08004bde <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b086      	sub	sp, #24
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	60f8      	str	r0, [r7, #12]
 8004be6:	60b9      	str	r1, [r7, #8]
 8004be8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004bea:	2300      	movs	r3, #0
 8004bec:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10e      	bne.n	8004c1a <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d14e      	bne.n	8004ca2 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	0018      	movs	r0, r3
 8004c0a:	f000 fe57 	bl	80058bc <xTaskPriorityDisinherit>
 8004c0e:	0003      	movs	r3, r0
 8004c10:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	605a      	str	r2, [r3, #4]
 8004c18:	e043      	b.n	8004ca2 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d119      	bne.n	8004c54 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6898      	ldr	r0, [r3, #8]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	0019      	movs	r1, r3
 8004c2c:	f002 fd0a 	bl	8007644 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	18d2      	adds	r2, r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	689a      	ldr	r2, [r3, #8]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d32b      	bcc.n	8004ca2 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	609a      	str	r2, [r3, #8]
 8004c52:	e026      	b.n	8004ca2 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	68d8      	ldr	r0, [r3, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	0019      	movs	r1, r3
 8004c60:	f002 fcf0 	bl	8007644 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	68da      	ldr	r2, [r3, #12]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	425b      	negs	r3, r3
 8004c6e:	18d2      	adds	r2, r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	68da      	ldr	r2, [r3, #12]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d207      	bcs.n	8004c90 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c88:	425b      	negs	r3, r3
 8004c8a:	18d2      	adds	r2, r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d105      	bne.n	8004ca2 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004caa:	697b      	ldr	r3, [r7, #20]
}
 8004cac:	0018      	movs	r0, r3
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	b006      	add	sp, #24
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d018      	beq.n	8004cf8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68da      	ldr	r2, [r3, #12]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	18d2      	adds	r2, r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68da      	ldr	r2, [r3, #12]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d303      	bcc.n	8004ce8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68d9      	ldr	r1, [r3, #12]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	f002 fca6 	bl	8007644 <memcpy>
	}
}
 8004cf8:	46c0      	nop			; (mov r8, r8)
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	b002      	add	sp, #8
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d08:	f001 f8aa 	bl	8005e60 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d0c:	230f      	movs	r3, #15
 8004d0e:	18fb      	adds	r3, r7, r3
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	2145      	movs	r1, #69	; 0x45
 8004d14:	5c52      	ldrb	r2, [r2, r1]
 8004d16:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d18:	e013      	b.n	8004d42 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d016      	beq.n	8004d50 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3324      	adds	r3, #36	; 0x24
 8004d26:	0018      	movs	r0, r3
 8004d28:	f000 fc14 	bl	8005554 <xTaskRemoveFromEventList>
 8004d2c:	1e03      	subs	r3, r0, #0
 8004d2e:	d001      	beq.n	8004d34 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d30:	f000 fcd0 	bl	80056d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d34:	210f      	movs	r1, #15
 8004d36:	187b      	adds	r3, r7, r1
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	187b      	adds	r3, r7, r1
 8004d40:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d42:	230f      	movs	r3, #15
 8004d44:	18fb      	adds	r3, r7, r3
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	b25b      	sxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	dce5      	bgt.n	8004d1a <prvUnlockQueue+0x1a>
 8004d4e:	e000      	b.n	8004d52 <prvUnlockQueue+0x52>
					break;
 8004d50:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2245      	movs	r2, #69	; 0x45
 8004d56:	21ff      	movs	r1, #255	; 0xff
 8004d58:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004d5a:	f001 f893 	bl	8005e84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d5e:	f001 f87f 	bl	8005e60 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d62:	230e      	movs	r3, #14
 8004d64:	18fb      	adds	r3, r7, r3
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	2144      	movs	r1, #68	; 0x44
 8004d6a:	5c52      	ldrb	r2, [r2, r1]
 8004d6c:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d6e:	e013      	b.n	8004d98 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d016      	beq.n	8004da6 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3310      	adds	r3, #16
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	f000 fbe9 	bl	8005554 <xTaskRemoveFromEventList>
 8004d82:	1e03      	subs	r3, r0, #0
 8004d84:	d001      	beq.n	8004d8a <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8004d86:	f000 fca5 	bl	80056d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d8a:	210e      	movs	r1, #14
 8004d8c:	187b      	adds	r3, r7, r1
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	187b      	adds	r3, r7, r1
 8004d96:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d98:	230e      	movs	r3, #14
 8004d9a:	18fb      	adds	r3, r7, r3
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	b25b      	sxtb	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	dce5      	bgt.n	8004d70 <prvUnlockQueue+0x70>
 8004da4:	e000      	b.n	8004da8 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8004da6:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2244      	movs	r2, #68	; 0x44
 8004dac:	21ff      	movs	r1, #255	; 0xff
 8004dae:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004db0:	f001 f868 	bl	8005e84 <vPortExitCritical>
}
 8004db4:	46c0      	nop			; (mov r8, r8)
 8004db6:	46bd      	mov	sp, r7
 8004db8:	b004      	add	sp, #16
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004dc4:	f001 f84c 	bl	8005e60 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d102      	bne.n	8004dd6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	e001      	b.n	8004dda <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004dda:	f001 f853 	bl	8005e84 <vPortExitCritical>

	return xReturn;
 8004dde:	68fb      	ldr	r3, [r7, #12]
}
 8004de0:	0018      	movs	r0, r3
 8004de2:	46bd      	mov	sp, r7
 8004de4:	b004      	add	sp, #16
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004df0:	f001 f836 	bl	8005e60 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d102      	bne.n	8004e06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e00:	2301      	movs	r3, #1
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	e001      	b.n	8004e0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e06:	2300      	movs	r3, #0
 8004e08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e0a:	f001 f83b 	bl	8005e84 <vPortExitCritical>

	return xReturn;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
}
 8004e10:	0018      	movs	r0, r3
 8004e12:	46bd      	mov	sp, r7
 8004e14:	b004      	add	sp, #16
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e18:	b590      	push	{r4, r7, lr}
 8004e1a:	b08d      	sub	sp, #52	; 0x34
 8004e1c:	af04      	add	r7, sp, #16
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <xTaskCreateStatic+0x18>
 8004e2c:	b672      	cpsid	i
 8004e2e:	e7fe      	b.n	8004e2e <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8004e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <xTaskCreateStatic+0x22>
 8004e36:	b672      	cpsid	i
 8004e38:	e7fe      	b.n	8004e38 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e3a:	2354      	movs	r3, #84	; 0x54
 8004e3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	2b54      	cmp	r3, #84	; 0x54
 8004e42:	d001      	beq.n	8004e48 <xTaskCreateStatic+0x30>
 8004e44:	b672      	cpsid	i
 8004e46:	e7fe      	b.n	8004e46 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d020      	beq.n	8004e90 <xTaskCreateStatic+0x78>
 8004e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d01d      	beq.n	8004e90 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e56:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e5c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	2251      	movs	r2, #81	; 0x51
 8004e62:	2102      	movs	r1, #2
 8004e64:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e66:	683c      	ldr	r4, [r7, #0]
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	68b9      	ldr	r1, [r7, #8]
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	2300      	movs	r3, #0
 8004e70:	9303      	str	r3, [sp, #12]
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	9302      	str	r3, [sp, #8]
 8004e76:	2318      	movs	r3, #24
 8004e78:	18fb      	adds	r3, r7, r3
 8004e7a:	9301      	str	r3, [sp, #4]
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	0023      	movs	r3, r4
 8004e82:	f000 f859 	bl	8004f38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f000 f8cf 	bl	800502c <prvAddNewTaskToReadyList>
 8004e8e:	e001      	b.n	8004e94 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8004e90:	2300      	movs	r3, #0
 8004e92:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e94:	69bb      	ldr	r3, [r7, #24]
	}
 8004e96:	0018      	movs	r0, r3
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	b009      	add	sp, #36	; 0x24
 8004e9c:	bd90      	pop	{r4, r7, pc}

08004e9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e9e:	b590      	push	{r4, r7, lr}
 8004ea0:	b08d      	sub	sp, #52	; 0x34
 8004ea2:	af04      	add	r7, sp, #16
 8004ea4:	60f8      	str	r0, [r7, #12]
 8004ea6:	60b9      	str	r1, [r7, #8]
 8004ea8:	603b      	str	r3, [r7, #0]
 8004eaa:	1dbb      	adds	r3, r7, #6
 8004eac:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eae:	1dbb      	adds	r3, r7, #6
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	f001 f86b 	bl	8005f90 <pvPortMalloc>
 8004eba:	0003      	movs	r3, r0
 8004ebc:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d010      	beq.n	8004ee6 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004ec4:	2054      	movs	r0, #84	; 0x54
 8004ec6:	f001 f863 	bl	8005f90 <pvPortMalloc>
 8004eca:	0003      	movs	r3, r0
 8004ecc:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	631a      	str	r2, [r3, #48]	; 0x30
 8004eda:	e006      	b.n	8004eea <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	0018      	movs	r0, r3
 8004ee0:	f001 f8fc 	bl	80060dc <vPortFree>
 8004ee4:	e001      	b.n	8004eea <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d01a      	beq.n	8004f26 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	2251      	movs	r2, #81	; 0x51
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ef8:	1dbb      	adds	r3, r7, #6
 8004efa:	881a      	ldrh	r2, [r3, #0]
 8004efc:	683c      	ldr	r4, [r7, #0]
 8004efe:	68b9      	ldr	r1, [r7, #8]
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	2300      	movs	r3, #0
 8004f04:	9303      	str	r3, [sp, #12]
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	9302      	str	r3, [sp, #8]
 8004f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f0c:	9301      	str	r3, [sp, #4]
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	0023      	movs	r3, r4
 8004f14:	f000 f810 	bl	8004f38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	f000 f886 	bl	800502c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f20:	2301      	movs	r3, #1
 8004f22:	61bb      	str	r3, [r7, #24]
 8004f24:	e002      	b.n	8004f2c <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f26:	2301      	movs	r3, #1
 8004f28:	425b      	negs	r3, r3
 8004f2a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f2c:	69bb      	ldr	r3, [r7, #24]
	}
 8004f2e:	0018      	movs	r0, r3
 8004f30:	46bd      	mov	sp, r7
 8004f32:	b009      	add	sp, #36	; 0x24
 8004f34:	bd90      	pop	{r4, r7, pc}
	...

08004f38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4936      	ldr	r1, [pc, #216]	; (8005028 <prvInitialiseNewTask+0xf0>)
 8004f4e:	468c      	mov	ip, r1
 8004f50:	4463      	add	r3, ip
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	18d3      	adds	r3, r2, r3
 8004f56:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	2207      	movs	r2, #7
 8004f5c:	4393      	bics	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	2207      	movs	r2, #7
 8004f64:	4013      	ands	r3, r2
 8004f66:	d001      	beq.n	8004f6c <prvInitialiseNewTask+0x34>
 8004f68:	b672      	cpsid	i
 8004f6a:	e7fe      	b.n	8004f6a <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	e013      	b.n	8004f9a <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	18d3      	adds	r3, r2, r3
 8004f78:	7818      	ldrb	r0, [r3, #0]
 8004f7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f7c:	2134      	movs	r1, #52	; 0x34
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	18d3      	adds	r3, r2, r3
 8004f82:	185b      	adds	r3, r3, r1
 8004f84:	1c02      	adds	r2, r0, #0
 8004f86:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	18d3      	adds	r3, r2, r3
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d006      	beq.n	8004fa2 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	3301      	adds	r3, #1
 8004f98:	617b      	str	r3, [r7, #20]
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2b0f      	cmp	r3, #15
 8004f9e:	d9e8      	bls.n	8004f72 <prvInitialiseNewTask+0x3a>
 8004fa0:	e000      	b.n	8004fa4 <prvInitialiseNewTask+0x6c>
		{
			break;
 8004fa2:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa6:	2243      	movs	r2, #67	; 0x43
 8004fa8:	2100      	movs	r1, #0
 8004faa:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	2b06      	cmp	r3, #6
 8004fb0:	d901      	bls.n	8004fb6 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004fb2:	2306      	movs	r3, #6
 8004fb4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb8:	6a3a      	ldr	r2, [r7, #32]
 8004fba:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbe:	6a3a      	ldr	r2, [r7, #32]
 8004fc0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fca:	3304      	adds	r3, #4
 8004fcc:	0018      	movs	r0, r3
 8004fce:	f7ff fa37 	bl	8004440 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd4:	3318      	adds	r3, #24
 8004fd6:	0018      	movs	r0, r3
 8004fd8:	f7ff fa32 	bl	8004440 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fe0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	2207      	movs	r2, #7
 8004fe6:	1ad2      	subs	r2, r2, r3
 8004fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ff0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffa:	2250      	movs	r2, #80	; 0x50
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	68f9      	ldr	r1, [r7, #12]
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	0018      	movs	r0, r3
 8005008:	f000 fe92 	bl	8005d30 <pxPortInitialiseStack>
 800500c:	0002      	movs	r2, r0
 800500e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005010:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800501c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800501e:	46c0      	nop			; (mov r8, r8)
 8005020:	46bd      	mov	sp, r7
 8005022:	b006      	add	sp, #24
 8005024:	bd80      	pop	{r7, pc}
 8005026:	46c0      	nop			; (mov r8, r8)
 8005028:	3fffffff 	.word	0x3fffffff

0800502c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005034:	f000 ff14 	bl	8005e60 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005038:	4b28      	ldr	r3, [pc, #160]	; (80050dc <prvAddNewTaskToReadyList+0xb0>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	4b27      	ldr	r3, [pc, #156]	; (80050dc <prvAddNewTaskToReadyList+0xb0>)
 8005040:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8005042:	4b27      	ldr	r3, [pc, #156]	; (80050e0 <prvAddNewTaskToReadyList+0xb4>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d109      	bne.n	800505e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800504a:	4b25      	ldr	r3, [pc, #148]	; (80050e0 <prvAddNewTaskToReadyList+0xb4>)
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005050:	4b22      	ldr	r3, [pc, #136]	; (80050dc <prvAddNewTaskToReadyList+0xb0>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d110      	bne.n	800507a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005058:	f000 fb56 	bl	8005708 <prvInitialiseTaskLists>
 800505c:	e00d      	b.n	800507a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800505e:	4b21      	ldr	r3, [pc, #132]	; (80050e4 <prvAddNewTaskToReadyList+0xb8>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d109      	bne.n	800507a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005066:	4b1e      	ldr	r3, [pc, #120]	; (80050e0 <prvAddNewTaskToReadyList+0xb4>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005070:	429a      	cmp	r2, r3
 8005072:	d802      	bhi.n	800507a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005074:	4b1a      	ldr	r3, [pc, #104]	; (80050e0 <prvAddNewTaskToReadyList+0xb4>)
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800507a:	4b1b      	ldr	r3, [pc, #108]	; (80050e8 <prvAddNewTaskToReadyList+0xbc>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	4b19      	ldr	r3, [pc, #100]	; (80050e8 <prvAddNewTaskToReadyList+0xbc>)
 8005082:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005088:	4b18      	ldr	r3, [pc, #96]	; (80050ec <prvAddNewTaskToReadyList+0xc0>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	429a      	cmp	r2, r3
 800508e:	d903      	bls.n	8005098 <prvAddNewTaskToReadyList+0x6c>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005094:	4b15      	ldr	r3, [pc, #84]	; (80050ec <prvAddNewTaskToReadyList+0xc0>)
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800509c:	0013      	movs	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	189b      	adds	r3, r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4a12      	ldr	r2, [pc, #72]	; (80050f0 <prvAddNewTaskToReadyList+0xc4>)
 80050a6:	189a      	adds	r2, r3, r2
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3304      	adds	r3, #4
 80050ac:	0019      	movs	r1, r3
 80050ae:	0010      	movs	r0, r2
 80050b0:	f7ff f9d1 	bl	8004456 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80050b4:	f000 fee6 	bl	8005e84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80050b8:	4b0a      	ldr	r3, [pc, #40]	; (80050e4 <prvAddNewTaskToReadyList+0xb8>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d008      	beq.n	80050d2 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80050c0:	4b07      	ldr	r3, [pc, #28]	; (80050e0 <prvAddNewTaskToReadyList+0xb4>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d201      	bcs.n	80050d2 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80050ce:	f000 feb7 	bl	8005e40 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050d2:	46c0      	nop			; (mov r8, r8)
 80050d4:	46bd      	mov	sp, r7
 80050d6:	b002      	add	sp, #8
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	46c0      	nop			; (mov r8, r8)
 80050dc:	20000124 	.word	0x20000124
 80050e0:	20000024 	.word	0x20000024
 80050e4:	20000130 	.word	0x20000130
 80050e8:	20000140 	.word	0x20000140
 80050ec:	2000012c 	.word	0x2000012c
 80050f0:	20000028 	.word	0x20000028

080050f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80050fc:	2300      	movs	r3, #0
 80050fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d010      	beq.n	8005128 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005106:	4b0d      	ldr	r3, [pc, #52]	; (800513c <vTaskDelay+0x48>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <vTaskDelay+0x1e>
 800510e:	b672      	cpsid	i
 8005110:	e7fe      	b.n	8005110 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005112:	f000 f863 	bl	80051dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2100      	movs	r1, #0
 800511a:	0018      	movs	r0, r3
 800511c:	f000 fdb4 	bl	8005c88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005120:	f000 f868 	bl	80051f4 <xTaskResumeAll>
 8005124:	0003      	movs	r3, r0
 8005126:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800512e:	f000 fe87 	bl	8005e40 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	46bd      	mov	sp, r7
 8005136:	b004      	add	sp, #16
 8005138:	bd80      	pop	{r7, pc}
 800513a:	46c0      	nop			; (mov r8, r8)
 800513c:	2000014c 	.word	0x2000014c

08005140 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005140:	b590      	push	{r4, r7, lr}
 8005142:	b089      	sub	sp, #36	; 0x24
 8005144:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005146:	2300      	movs	r3, #0
 8005148:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800514a:	2300      	movs	r3, #0
 800514c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800514e:	003a      	movs	r2, r7
 8005150:	1d39      	adds	r1, r7, #4
 8005152:	2308      	movs	r3, #8
 8005154:	18fb      	adds	r3, r7, r3
 8005156:	0018      	movs	r0, r3
 8005158:	f001 f8c0 	bl	80062dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800515c:	683c      	ldr	r4, [r7, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	4918      	ldr	r1, [pc, #96]	; (80051c4 <vTaskStartScheduler+0x84>)
 8005164:	4818      	ldr	r0, [pc, #96]	; (80051c8 <vTaskStartScheduler+0x88>)
 8005166:	9202      	str	r2, [sp, #8]
 8005168:	9301      	str	r3, [sp, #4]
 800516a:	2300      	movs	r3, #0
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	2300      	movs	r3, #0
 8005170:	0022      	movs	r2, r4
 8005172:	f7ff fe51 	bl	8004e18 <xTaskCreateStatic>
 8005176:	0002      	movs	r2, r0
 8005178:	4b14      	ldr	r3, [pc, #80]	; (80051cc <vTaskStartScheduler+0x8c>)
 800517a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800517c:	4b13      	ldr	r3, [pc, #76]	; (80051cc <vTaskStartScheduler+0x8c>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d002      	beq.n	800518a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005184:	2301      	movs	r3, #1
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	e001      	b.n	800518e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800518a:	2300      	movs	r3, #0
 800518c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d10d      	bne.n	80051b0 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8005194:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005196:	4b0e      	ldr	r3, [pc, #56]	; (80051d0 <vTaskStartScheduler+0x90>)
 8005198:	2201      	movs	r2, #1
 800519a:	4252      	negs	r2, r2
 800519c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800519e:	4b0d      	ldr	r3, [pc, #52]	; (80051d4 <vTaskStartScheduler+0x94>)
 80051a0:	2201      	movs	r2, #1
 80051a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80051a4:	4b0c      	ldr	r3, [pc, #48]	; (80051d8 <vTaskStartScheduler+0x98>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80051aa:	f000 fe25 	bl	8005df8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80051ae:	e004      	b.n	80051ba <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	3301      	adds	r3, #1
 80051b4:	d101      	bne.n	80051ba <vTaskStartScheduler+0x7a>
 80051b6:	b672      	cpsid	i
 80051b8:	e7fe      	b.n	80051b8 <vTaskStartScheduler+0x78>
}
 80051ba:	46c0      	nop			; (mov r8, r8)
 80051bc:	46bd      	mov	sp, r7
 80051be:	b005      	add	sp, #20
 80051c0:	bd90      	pop	{r4, r7, pc}
 80051c2:	46c0      	nop			; (mov r8, r8)
 80051c4:	08007680 	.word	0x08007680
 80051c8:	080056e9 	.word	0x080056e9
 80051cc:	20000148 	.word	0x20000148
 80051d0:	20000144 	.word	0x20000144
 80051d4:	20000130 	.word	0x20000130
 80051d8:	20000128 	.word	0x20000128

080051dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80051e0:	4b03      	ldr	r3, [pc, #12]	; (80051f0 <vTaskSuspendAll+0x14>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	4b02      	ldr	r3, [pc, #8]	; (80051f0 <vTaskSuspendAll+0x14>)
 80051e8:	601a      	str	r2, [r3, #0]
}
 80051ea:	46c0      	nop			; (mov r8, r8)
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	2000014c 	.word	0x2000014c

080051f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80051fa:	2300      	movs	r3, #0
 80051fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80051fe:	2300      	movs	r3, #0
 8005200:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005202:	4b3a      	ldr	r3, [pc, #232]	; (80052ec <xTaskResumeAll+0xf8>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <xTaskResumeAll+0x1a>
 800520a:	b672      	cpsid	i
 800520c:	e7fe      	b.n	800520c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800520e:	f000 fe27 	bl	8005e60 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005212:	4b36      	ldr	r3, [pc, #216]	; (80052ec <xTaskResumeAll+0xf8>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	1e5a      	subs	r2, r3, #1
 8005218:	4b34      	ldr	r3, [pc, #208]	; (80052ec <xTaskResumeAll+0xf8>)
 800521a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800521c:	4b33      	ldr	r3, [pc, #204]	; (80052ec <xTaskResumeAll+0xf8>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d15b      	bne.n	80052dc <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005224:	4b32      	ldr	r3, [pc, #200]	; (80052f0 <xTaskResumeAll+0xfc>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d057      	beq.n	80052dc <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800522c:	e02f      	b.n	800528e <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800522e:	4b31      	ldr	r3, [pc, #196]	; (80052f4 <xTaskResumeAll+0x100>)
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	3318      	adds	r3, #24
 800523a:	0018      	movs	r0, r3
 800523c:	f7ff f963 	bl	8004506 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	3304      	adds	r3, #4
 8005244:	0018      	movs	r0, r3
 8005246:	f7ff f95e 	bl	8004506 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800524e:	4b2a      	ldr	r3, [pc, #168]	; (80052f8 <xTaskResumeAll+0x104>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	429a      	cmp	r2, r3
 8005254:	d903      	bls.n	800525e <xTaskResumeAll+0x6a>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800525a:	4b27      	ldr	r3, [pc, #156]	; (80052f8 <xTaskResumeAll+0x104>)
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005262:	0013      	movs	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	189b      	adds	r3, r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4a24      	ldr	r2, [pc, #144]	; (80052fc <xTaskResumeAll+0x108>)
 800526c:	189a      	adds	r2, r3, r2
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	3304      	adds	r3, #4
 8005272:	0019      	movs	r1, r3
 8005274:	0010      	movs	r0, r2
 8005276:	f7ff f8ee 	bl	8004456 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527e:	4b20      	ldr	r3, [pc, #128]	; (8005300 <xTaskResumeAll+0x10c>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005284:	429a      	cmp	r2, r3
 8005286:	d302      	bcc.n	800528e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8005288:	4b1e      	ldr	r3, [pc, #120]	; (8005304 <xTaskResumeAll+0x110>)
 800528a:	2201      	movs	r2, #1
 800528c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800528e:	4b19      	ldr	r3, [pc, #100]	; (80052f4 <xTaskResumeAll+0x100>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1cb      	bne.n	800522e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800529c:	f000 face 	bl	800583c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80052a0:	4b19      	ldr	r3, [pc, #100]	; (8005308 <xTaskResumeAll+0x114>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00f      	beq.n	80052cc <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80052ac:	f000 f82e 	bl	800530c <xTaskIncrementTick>
 80052b0:	1e03      	subs	r3, r0, #0
 80052b2:	d002      	beq.n	80052ba <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80052b4:	4b13      	ldr	r3, [pc, #76]	; (8005304 <xTaskResumeAll+0x110>)
 80052b6:	2201      	movs	r2, #1
 80052b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	3b01      	subs	r3, #1
 80052be:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1f2      	bne.n	80052ac <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80052c6:	4b10      	ldr	r3, [pc, #64]	; (8005308 <xTaskResumeAll+0x114>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80052cc:	4b0d      	ldr	r3, [pc, #52]	; (8005304 <xTaskResumeAll+0x110>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d003      	beq.n	80052dc <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80052d4:	2301      	movs	r3, #1
 80052d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80052d8:	f000 fdb2 	bl	8005e40 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052dc:	f000 fdd2 	bl	8005e84 <vPortExitCritical>

	return xAlreadyYielded;
 80052e0:	68bb      	ldr	r3, [r7, #8]
}
 80052e2:	0018      	movs	r0, r3
 80052e4:	46bd      	mov	sp, r7
 80052e6:	b004      	add	sp, #16
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	46c0      	nop			; (mov r8, r8)
 80052ec:	2000014c 	.word	0x2000014c
 80052f0:	20000124 	.word	0x20000124
 80052f4:	200000e4 	.word	0x200000e4
 80052f8:	2000012c 	.word	0x2000012c
 80052fc:	20000028 	.word	0x20000028
 8005300:	20000024 	.word	0x20000024
 8005304:	20000138 	.word	0x20000138
 8005308:	20000134 	.word	0x20000134

0800530c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005312:	2300      	movs	r3, #0
 8005314:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005316:	4b4c      	ldr	r3, [pc, #304]	; (8005448 <xTaskIncrementTick+0x13c>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d000      	beq.n	8005320 <xTaskIncrementTick+0x14>
 800531e:	e083      	b.n	8005428 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005320:	4b4a      	ldr	r3, [pc, #296]	; (800544c <xTaskIncrementTick+0x140>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3301      	adds	r3, #1
 8005326:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005328:	4b48      	ldr	r3, [pc, #288]	; (800544c <xTaskIncrementTick+0x140>)
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d117      	bne.n	8005364 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8005334:	4b46      	ldr	r3, [pc, #280]	; (8005450 <xTaskIncrementTick+0x144>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <xTaskIncrementTick+0x36>
 800533e:	b672      	cpsid	i
 8005340:	e7fe      	b.n	8005340 <xTaskIncrementTick+0x34>
 8005342:	4b43      	ldr	r3, [pc, #268]	; (8005450 <xTaskIncrementTick+0x144>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	4b42      	ldr	r3, [pc, #264]	; (8005454 <xTaskIncrementTick+0x148>)
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	4b40      	ldr	r3, [pc, #256]	; (8005450 <xTaskIncrementTick+0x144>)
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	4b40      	ldr	r3, [pc, #256]	; (8005454 <xTaskIncrementTick+0x148>)
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	4b40      	ldr	r3, [pc, #256]	; (8005458 <xTaskIncrementTick+0x14c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	4b3e      	ldr	r3, [pc, #248]	; (8005458 <xTaskIncrementTick+0x14c>)
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	f000 fa6c 	bl	800583c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005364:	4b3d      	ldr	r3, [pc, #244]	; (800545c <xTaskIncrementTick+0x150>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	429a      	cmp	r2, r3
 800536c:	d34e      	bcc.n	800540c <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800536e:	4b38      	ldr	r3, [pc, #224]	; (8005450 <xTaskIncrementTick+0x144>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <xTaskIncrementTick+0x70>
 8005378:	2301      	movs	r3, #1
 800537a:	e000      	b.n	800537e <xTaskIncrementTick+0x72>
 800537c:	2300      	movs	r3, #0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d004      	beq.n	800538c <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005382:	4b36      	ldr	r3, [pc, #216]	; (800545c <xTaskIncrementTick+0x150>)
 8005384:	2201      	movs	r2, #1
 8005386:	4252      	negs	r2, r2
 8005388:	601a      	str	r2, [r3, #0]
					break;
 800538a:	e03f      	b.n	800540c <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800538c:	4b30      	ldr	r3, [pc, #192]	; (8005450 <xTaskIncrementTick+0x144>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d203      	bcs.n	80053ac <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80053a4:	4b2d      	ldr	r3, [pc, #180]	; (800545c <xTaskIncrementTick+0x150>)
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	601a      	str	r2, [r3, #0]
						break;
 80053aa:	e02f      	b.n	800540c <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	3304      	adds	r3, #4
 80053b0:	0018      	movs	r0, r3
 80053b2:	f7ff f8a8 	bl	8004506 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d004      	beq.n	80053c8 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	3318      	adds	r3, #24
 80053c2:	0018      	movs	r0, r3
 80053c4:	f7ff f89f 	bl	8004506 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053cc:	4b24      	ldr	r3, [pc, #144]	; (8005460 <xTaskIncrementTick+0x154>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d903      	bls.n	80053dc <xTaskIncrementTick+0xd0>
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d8:	4b21      	ldr	r3, [pc, #132]	; (8005460 <xTaskIncrementTick+0x154>)
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e0:	0013      	movs	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	189b      	adds	r3, r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4a1e      	ldr	r2, [pc, #120]	; (8005464 <xTaskIncrementTick+0x158>)
 80053ea:	189a      	adds	r2, r3, r2
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	3304      	adds	r3, #4
 80053f0:	0019      	movs	r1, r3
 80053f2:	0010      	movs	r0, r2
 80053f4:	f7ff f82f 	bl	8004456 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053fc:	4b1a      	ldr	r3, [pc, #104]	; (8005468 <xTaskIncrementTick+0x15c>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005402:	429a      	cmp	r2, r3
 8005404:	d3b3      	bcc.n	800536e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8005406:	2301      	movs	r3, #1
 8005408:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800540a:	e7b0      	b.n	800536e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800540c:	4b16      	ldr	r3, [pc, #88]	; (8005468 <xTaskIncrementTick+0x15c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005412:	4914      	ldr	r1, [pc, #80]	; (8005464 <xTaskIncrementTick+0x158>)
 8005414:	0013      	movs	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	189b      	adds	r3, r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	585b      	ldr	r3, [r3, r1]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d907      	bls.n	8005432 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005422:	2301      	movs	r3, #1
 8005424:	617b      	str	r3, [r7, #20]
 8005426:	e004      	b.n	8005432 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005428:	4b10      	ldr	r3, [pc, #64]	; (800546c <xTaskIncrementTick+0x160>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	4b0f      	ldr	r3, [pc, #60]	; (800546c <xTaskIncrementTick+0x160>)
 8005430:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005432:	4b0f      	ldr	r3, [pc, #60]	; (8005470 <xTaskIncrementTick+0x164>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800543a:	2301      	movs	r3, #1
 800543c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800543e:	697b      	ldr	r3, [r7, #20]
}
 8005440:	0018      	movs	r0, r3
 8005442:	46bd      	mov	sp, r7
 8005444:	b006      	add	sp, #24
 8005446:	bd80      	pop	{r7, pc}
 8005448:	2000014c 	.word	0x2000014c
 800544c:	20000128 	.word	0x20000128
 8005450:	200000dc 	.word	0x200000dc
 8005454:	200000e0 	.word	0x200000e0
 8005458:	2000013c 	.word	0x2000013c
 800545c:	20000144 	.word	0x20000144
 8005460:	2000012c 	.word	0x2000012c
 8005464:	20000028 	.word	0x20000028
 8005468:	20000024 	.word	0x20000024
 800546c:	20000134 	.word	0x20000134
 8005470:	20000138 	.word	0x20000138

08005474 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800547a:	4b22      	ldr	r3, [pc, #136]	; (8005504 <vTaskSwitchContext+0x90>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005482:	4b21      	ldr	r3, [pc, #132]	; (8005508 <vTaskSwitchContext+0x94>)
 8005484:	2201      	movs	r2, #1
 8005486:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005488:	e037      	b.n	80054fa <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800548a:	4b1f      	ldr	r3, [pc, #124]	; (8005508 <vTaskSwitchContext+0x94>)
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005490:	4b1e      	ldr	r3, [pc, #120]	; (800550c <vTaskSwitchContext+0x98>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	607b      	str	r3, [r7, #4]
 8005496:	e007      	b.n	80054a8 <vTaskSwitchContext+0x34>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <vTaskSwitchContext+0x2e>
 800549e:	b672      	cpsid	i
 80054a0:	e7fe      	b.n	80054a0 <vTaskSwitchContext+0x2c>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	3b01      	subs	r3, #1
 80054a6:	607b      	str	r3, [r7, #4]
 80054a8:	4919      	ldr	r1, [pc, #100]	; (8005510 <vTaskSwitchContext+0x9c>)
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	0013      	movs	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	189b      	adds	r3, r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	585b      	ldr	r3, [r3, r1]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0ee      	beq.n	8005498 <vTaskSwitchContext+0x24>
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	0013      	movs	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	189b      	adds	r3, r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4a12      	ldr	r2, [pc, #72]	; (8005510 <vTaskSwitchContext+0x9c>)
 80054c6:	189b      	adds	r3, r3, r2
 80054c8:	603b      	str	r3, [r7, #0]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	605a      	str	r2, [r3, #4]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	3308      	adds	r3, #8
 80054dc:	429a      	cmp	r2, r3
 80054de:	d104      	bne.n	80054ea <vTaskSwitchContext+0x76>
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	605a      	str	r2, [r3, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	68da      	ldr	r2, [r3, #12]
 80054f0:	4b08      	ldr	r3, [pc, #32]	; (8005514 <vTaskSwitchContext+0xa0>)
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	4b05      	ldr	r3, [pc, #20]	; (800550c <vTaskSwitchContext+0x98>)
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	601a      	str	r2, [r3, #0]
}
 80054fa:	46c0      	nop			; (mov r8, r8)
 80054fc:	46bd      	mov	sp, r7
 80054fe:	b002      	add	sp, #8
 8005500:	bd80      	pop	{r7, pc}
 8005502:	46c0      	nop			; (mov r8, r8)
 8005504:	2000014c 	.word	0x2000014c
 8005508:	20000138 	.word	0x20000138
 800550c:	2000012c 	.word	0x2000012c
 8005510:	20000028 	.word	0x20000028
 8005514:	20000024 	.word	0x20000024

08005518 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <vTaskPlaceOnEventList+0x14>
 8005528:	b672      	cpsid	i
 800552a:	e7fe      	b.n	800552a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800552c:	4b08      	ldr	r3, [pc, #32]	; (8005550 <vTaskPlaceOnEventList+0x38>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3318      	adds	r3, #24
 8005532:	001a      	movs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	0011      	movs	r1, r2
 8005538:	0018      	movs	r0, r3
 800553a:	f7fe ffae 	bl	800449a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2101      	movs	r1, #1
 8005542:	0018      	movs	r0, r3
 8005544:	f000 fba0 	bl	8005c88 <prvAddCurrentTaskToDelayedList>
}
 8005548:	46c0      	nop			; (mov r8, r8)
 800554a:	46bd      	mov	sp, r7
 800554c:	b002      	add	sp, #8
 800554e:	bd80      	pop	{r7, pc}
 8005550:	20000024 	.word	0x20000024

08005554 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <xTaskRemoveFromEventList+0x1a>
 800556a:	b672      	cpsid	i
 800556c:	e7fe      	b.n	800556c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	3318      	adds	r3, #24
 8005572:	0018      	movs	r0, r3
 8005574:	f7fe ffc7 	bl	8004506 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005578:	4b1e      	ldr	r3, [pc, #120]	; (80055f4 <xTaskRemoveFromEventList+0xa0>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d11d      	bne.n	80055bc <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	3304      	adds	r3, #4
 8005584:	0018      	movs	r0, r3
 8005586:	f7fe ffbe 	bl	8004506 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800558e:	4b1a      	ldr	r3, [pc, #104]	; (80055f8 <xTaskRemoveFromEventList+0xa4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	429a      	cmp	r2, r3
 8005594:	d903      	bls.n	800559e <xTaskRemoveFromEventList+0x4a>
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559a:	4b17      	ldr	r3, [pc, #92]	; (80055f8 <xTaskRemoveFromEventList+0xa4>)
 800559c:	601a      	str	r2, [r3, #0]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a2:	0013      	movs	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	189b      	adds	r3, r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4a14      	ldr	r2, [pc, #80]	; (80055fc <xTaskRemoveFromEventList+0xa8>)
 80055ac:	189a      	adds	r2, r3, r2
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	3304      	adds	r3, #4
 80055b2:	0019      	movs	r1, r3
 80055b4:	0010      	movs	r0, r2
 80055b6:	f7fe ff4e 	bl	8004456 <vListInsertEnd>
 80055ba:	e007      	b.n	80055cc <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	3318      	adds	r3, #24
 80055c0:	001a      	movs	r2, r3
 80055c2:	4b0f      	ldr	r3, [pc, #60]	; (8005600 <xTaskRemoveFromEventList+0xac>)
 80055c4:	0011      	movs	r1, r2
 80055c6:	0018      	movs	r0, r3
 80055c8:	f7fe ff45 	bl	8004456 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d0:	4b0c      	ldr	r3, [pc, #48]	; (8005604 <xTaskRemoveFromEventList+0xb0>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d905      	bls.n	80055e6 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80055da:	2301      	movs	r3, #1
 80055dc:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80055de:	4b0a      	ldr	r3, [pc, #40]	; (8005608 <xTaskRemoveFromEventList+0xb4>)
 80055e0:	2201      	movs	r2, #1
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	e001      	b.n	80055ea <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80055ea:	68fb      	ldr	r3, [r7, #12]
}
 80055ec:	0018      	movs	r0, r3
 80055ee:	46bd      	mov	sp, r7
 80055f0:	b004      	add	sp, #16
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	2000014c 	.word	0x2000014c
 80055f8:	2000012c 	.word	0x2000012c
 80055fc:	20000028 	.word	0x20000028
 8005600:	200000e4 	.word	0x200000e4
 8005604:	20000024 	.word	0x20000024
 8005608:	20000138 	.word	0x20000138

0800560c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005614:	4b05      	ldr	r3, [pc, #20]	; (800562c <vTaskInternalSetTimeOutState+0x20>)
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800561c:	4b04      	ldr	r3, [pc, #16]	; (8005630 <vTaskInternalSetTimeOutState+0x24>)
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	605a      	str	r2, [r3, #4]
}
 8005624:	46c0      	nop			; (mov r8, r8)
 8005626:	46bd      	mov	sp, r7
 8005628:	b002      	add	sp, #8
 800562a:	bd80      	pop	{r7, pc}
 800562c:	2000013c 	.word	0x2000013c
 8005630:	20000128 	.word	0x20000128

08005634 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <xTaskCheckForTimeOut+0x14>
 8005644:	b672      	cpsid	i
 8005646:	e7fe      	b.n	8005646 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <xTaskCheckForTimeOut+0x1e>
 800564e:	b672      	cpsid	i
 8005650:	e7fe      	b.n	8005650 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8005652:	f000 fc05 	bl	8005e60 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005656:	4b1d      	ldr	r3, [pc, #116]	; (80056cc <xTaskCheckForTimeOut+0x98>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	3301      	adds	r3, #1
 800566c:	d102      	bne.n	8005674 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800566e:	2300      	movs	r3, #0
 8005670:	617b      	str	r3, [r7, #20]
 8005672:	e024      	b.n	80056be <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	4b15      	ldr	r3, [pc, #84]	; (80056d0 <xTaskCheckForTimeOut+0x9c>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d007      	beq.n	8005690 <xTaskCheckForTimeOut+0x5c>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	429a      	cmp	r2, r3
 8005688:	d302      	bcc.n	8005690 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800568a:	2301      	movs	r3, #1
 800568c:	617b      	str	r3, [r7, #20]
 800568e:	e016      	b.n	80056be <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	429a      	cmp	r2, r3
 8005698:	d20c      	bcs.n	80056b4 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	1ad2      	subs	r2, r2, r3
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	0018      	movs	r0, r3
 80056aa:	f7ff ffaf 	bl	800560c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80056ae:	2300      	movs	r3, #0
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	e004      	b.n	80056be <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80056ba:	2301      	movs	r3, #1
 80056bc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80056be:	f000 fbe1 	bl	8005e84 <vPortExitCritical>

	return xReturn;
 80056c2:	697b      	ldr	r3, [r7, #20]
}
 80056c4:	0018      	movs	r0, r3
 80056c6:	46bd      	mov	sp, r7
 80056c8:	b006      	add	sp, #24
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	20000128 	.word	0x20000128
 80056d0:	2000013c 	.word	0x2000013c

080056d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80056d8:	4b02      	ldr	r3, [pc, #8]	; (80056e4 <vTaskMissedYield+0x10>)
 80056da:	2201      	movs	r2, #1
 80056dc:	601a      	str	r2, [r3, #0]
}
 80056de:	46c0      	nop			; (mov r8, r8)
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	20000138 	.word	0x20000138

080056e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80056f0:	f000 f84e 	bl	8005790 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80056f4:	4b03      	ldr	r3, [pc, #12]	; (8005704 <prvIdleTask+0x1c>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d9f9      	bls.n	80056f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80056fc:	f000 fba0 	bl	8005e40 <vPortYield>
		prvCheckTasksWaitingTermination();
 8005700:	e7f6      	b.n	80056f0 <prvIdleTask+0x8>
 8005702:	46c0      	nop			; (mov r8, r8)
 8005704:	20000028 	.word	0x20000028

08005708 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800570e:	2300      	movs	r3, #0
 8005710:	607b      	str	r3, [r7, #4]
 8005712:	e00c      	b.n	800572e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	0013      	movs	r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	189b      	adds	r3, r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4a14      	ldr	r2, [pc, #80]	; (8005770 <prvInitialiseTaskLists+0x68>)
 8005720:	189b      	adds	r3, r3, r2
 8005722:	0018      	movs	r0, r3
 8005724:	f7fe fe6e 	bl	8004404 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3301      	adds	r3, #1
 800572c:	607b      	str	r3, [r7, #4]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b06      	cmp	r3, #6
 8005732:	d9ef      	bls.n	8005714 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005734:	4b0f      	ldr	r3, [pc, #60]	; (8005774 <prvInitialiseTaskLists+0x6c>)
 8005736:	0018      	movs	r0, r3
 8005738:	f7fe fe64 	bl	8004404 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800573c:	4b0e      	ldr	r3, [pc, #56]	; (8005778 <prvInitialiseTaskLists+0x70>)
 800573e:	0018      	movs	r0, r3
 8005740:	f7fe fe60 	bl	8004404 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005744:	4b0d      	ldr	r3, [pc, #52]	; (800577c <prvInitialiseTaskLists+0x74>)
 8005746:	0018      	movs	r0, r3
 8005748:	f7fe fe5c 	bl	8004404 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800574c:	4b0c      	ldr	r3, [pc, #48]	; (8005780 <prvInitialiseTaskLists+0x78>)
 800574e:	0018      	movs	r0, r3
 8005750:	f7fe fe58 	bl	8004404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005754:	4b0b      	ldr	r3, [pc, #44]	; (8005784 <prvInitialiseTaskLists+0x7c>)
 8005756:	0018      	movs	r0, r3
 8005758:	f7fe fe54 	bl	8004404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800575c:	4b0a      	ldr	r3, [pc, #40]	; (8005788 <prvInitialiseTaskLists+0x80>)
 800575e:	4a05      	ldr	r2, [pc, #20]	; (8005774 <prvInitialiseTaskLists+0x6c>)
 8005760:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005762:	4b0a      	ldr	r3, [pc, #40]	; (800578c <prvInitialiseTaskLists+0x84>)
 8005764:	4a04      	ldr	r2, [pc, #16]	; (8005778 <prvInitialiseTaskLists+0x70>)
 8005766:	601a      	str	r2, [r3, #0]
}
 8005768:	46c0      	nop			; (mov r8, r8)
 800576a:	46bd      	mov	sp, r7
 800576c:	b002      	add	sp, #8
 800576e:	bd80      	pop	{r7, pc}
 8005770:	20000028 	.word	0x20000028
 8005774:	200000b4 	.word	0x200000b4
 8005778:	200000c8 	.word	0x200000c8
 800577c:	200000e4 	.word	0x200000e4
 8005780:	200000f8 	.word	0x200000f8
 8005784:	20000110 	.word	0x20000110
 8005788:	200000dc 	.word	0x200000dc
 800578c:	200000e0 	.word	0x200000e0

08005790 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005796:	e01a      	b.n	80057ce <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8005798:	f000 fb62 	bl	8005e60 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800579c:	4b10      	ldr	r3, [pc, #64]	; (80057e0 <prvCheckTasksWaitingTermination+0x50>)
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	3304      	adds	r3, #4
 80057a8:	0018      	movs	r0, r3
 80057aa:	f7fe feac 	bl	8004506 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80057ae:	4b0d      	ldr	r3, [pc, #52]	; (80057e4 <prvCheckTasksWaitingTermination+0x54>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	1e5a      	subs	r2, r3, #1
 80057b4:	4b0b      	ldr	r3, [pc, #44]	; (80057e4 <prvCheckTasksWaitingTermination+0x54>)
 80057b6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80057b8:	4b0b      	ldr	r3, [pc, #44]	; (80057e8 <prvCheckTasksWaitingTermination+0x58>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	1e5a      	subs	r2, r3, #1
 80057be:	4b0a      	ldr	r3, [pc, #40]	; (80057e8 <prvCheckTasksWaitingTermination+0x58>)
 80057c0:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80057c2:	f000 fb5f 	bl	8005e84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	0018      	movs	r0, r3
 80057ca:	f000 f80f 	bl	80057ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057ce:	4b06      	ldr	r3, [pc, #24]	; (80057e8 <prvCheckTasksWaitingTermination+0x58>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1e0      	bne.n	8005798 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80057d6:	46c0      	nop			; (mov r8, r8)
 80057d8:	46bd      	mov	sp, r7
 80057da:	b002      	add	sp, #8
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	46c0      	nop			; (mov r8, r8)
 80057e0:	200000f8 	.word	0x200000f8
 80057e4:	20000124 	.word	0x20000124
 80057e8:	2000010c 	.word	0x2000010c

080057ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2251      	movs	r2, #81	; 0x51
 80057f8:	5c9b      	ldrb	r3, [r3, r2]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d109      	bne.n	8005812 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005802:	0018      	movs	r0, r3
 8005804:	f000 fc6a 	bl	80060dc <vPortFree>
				vPortFree( pxTCB );
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	0018      	movs	r0, r3
 800580c:	f000 fc66 	bl	80060dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005810:	e010      	b.n	8005834 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2251      	movs	r2, #81	; 0x51
 8005816:	5c9b      	ldrb	r3, [r3, r2]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d104      	bne.n	8005826 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	0018      	movs	r0, r3
 8005820:	f000 fc5c 	bl	80060dc <vPortFree>
	}
 8005824:	e006      	b.n	8005834 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2251      	movs	r2, #81	; 0x51
 800582a:	5c9b      	ldrb	r3, [r3, r2]
 800582c:	2b02      	cmp	r3, #2
 800582e:	d001      	beq.n	8005834 <prvDeleteTCB+0x48>
 8005830:	b672      	cpsid	i
 8005832:	e7fe      	b.n	8005832 <prvDeleteTCB+0x46>
	}
 8005834:	46c0      	nop			; (mov r8, r8)
 8005836:	46bd      	mov	sp, r7
 8005838:	b002      	add	sp, #8
 800583a:	bd80      	pop	{r7, pc}

0800583c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005842:	4b0e      	ldr	r3, [pc, #56]	; (800587c <prvResetNextTaskUnblockTime+0x40>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <prvResetNextTaskUnblockTime+0x14>
 800584c:	2301      	movs	r3, #1
 800584e:	e000      	b.n	8005852 <prvResetNextTaskUnblockTime+0x16>
 8005850:	2300      	movs	r3, #0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d004      	beq.n	8005860 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005856:	4b0a      	ldr	r3, [pc, #40]	; (8005880 <prvResetNextTaskUnblockTime+0x44>)
 8005858:	2201      	movs	r2, #1
 800585a:	4252      	negs	r2, r2
 800585c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800585e:	e008      	b.n	8005872 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005860:	4b06      	ldr	r3, [pc, #24]	; (800587c <prvResetNextTaskUnblockTime+0x40>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	4b04      	ldr	r3, [pc, #16]	; (8005880 <prvResetNextTaskUnblockTime+0x44>)
 8005870:	601a      	str	r2, [r3, #0]
}
 8005872:	46c0      	nop			; (mov r8, r8)
 8005874:	46bd      	mov	sp, r7
 8005876:	b002      	add	sp, #8
 8005878:	bd80      	pop	{r7, pc}
 800587a:	46c0      	nop			; (mov r8, r8)
 800587c:	200000dc 	.word	0x200000dc
 8005880:	20000144 	.word	0x20000144

08005884 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800588a:	4b0a      	ldr	r3, [pc, #40]	; (80058b4 <xTaskGetSchedulerState+0x30>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d102      	bne.n	8005898 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005892:	2301      	movs	r3, #1
 8005894:	607b      	str	r3, [r7, #4]
 8005896:	e008      	b.n	80058aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005898:	4b07      	ldr	r3, [pc, #28]	; (80058b8 <xTaskGetSchedulerState+0x34>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d102      	bne.n	80058a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80058a0:	2302      	movs	r3, #2
 80058a2:	607b      	str	r3, [r7, #4]
 80058a4:	e001      	b.n	80058aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80058a6:	2300      	movs	r3, #0
 80058a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80058aa:	687b      	ldr	r3, [r7, #4]
	}
 80058ac:	0018      	movs	r0, r3
 80058ae:	46bd      	mov	sp, r7
 80058b0:	b002      	add	sp, #8
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	20000130 	.word	0x20000130
 80058b8:	2000014c 	.word	0x2000014c

080058bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80058c8:	2300      	movs	r3, #0
 80058ca:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d044      	beq.n	800595c <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80058d2:	4b25      	ldr	r3, [pc, #148]	; (8005968 <xTaskPriorityDisinherit+0xac>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d001      	beq.n	80058e0 <xTaskPriorityDisinherit+0x24>
 80058dc:	b672      	cpsid	i
 80058de:	e7fe      	b.n	80058de <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <xTaskPriorityDisinherit+0x30>
 80058e8:	b672      	cpsid	i
 80058ea:	e7fe      	b.n	80058ea <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058f0:	1e5a      	subs	r2, r3, #1
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058fe:	429a      	cmp	r2, r3
 8005900:	d02c      	beq.n	800595c <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005906:	2b00      	cmp	r3, #0
 8005908:	d128      	bne.n	800595c <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	3304      	adds	r3, #4
 800590e:	0018      	movs	r0, r3
 8005910:	f7fe fdf9 	bl	8004506 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005920:	2207      	movs	r2, #7
 8005922:	1ad2      	subs	r2, r2, r3
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800592c:	4b0f      	ldr	r3, [pc, #60]	; (800596c <xTaskPriorityDisinherit+0xb0>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	429a      	cmp	r2, r3
 8005932:	d903      	bls.n	800593c <xTaskPriorityDisinherit+0x80>
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005938:	4b0c      	ldr	r3, [pc, #48]	; (800596c <xTaskPriorityDisinherit+0xb0>)
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005940:	0013      	movs	r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	189b      	adds	r3, r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4a09      	ldr	r2, [pc, #36]	; (8005970 <xTaskPriorityDisinherit+0xb4>)
 800594a:	189a      	adds	r2, r3, r2
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	3304      	adds	r3, #4
 8005950:	0019      	movs	r1, r3
 8005952:	0010      	movs	r0, r2
 8005954:	f7fe fd7f 	bl	8004456 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005958:	2301      	movs	r3, #1
 800595a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800595c:	68fb      	ldr	r3, [r7, #12]
	}
 800595e:	0018      	movs	r0, r3
 8005960:	46bd      	mov	sp, r7
 8005962:	b004      	add	sp, #16
 8005964:	bd80      	pop	{r7, pc}
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	20000024 	.word	0x20000024
 800596c:	2000012c 	.word	0x2000012c
 8005970:	20000028 	.word	0x20000028

08005974 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
 8005980:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8005982:	f000 fa6d 	bl	8005e60 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005986:	4b24      	ldr	r3, [pc, #144]	; (8005a18 <xTaskNotifyWait+0xa4>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2250      	movs	r2, #80	; 0x50
 800598c:	5c9b      	ldrb	r3, [r3, r2]
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	d015      	beq.n	80059c0 <xTaskNotifyWait+0x4c>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005994:	4b20      	ldr	r3, [pc, #128]	; (8005a18 <xTaskNotifyWait+0xa4>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800599a:	68f9      	ldr	r1, [r7, #12]
 800599c:	43c9      	mvns	r1, r1
 800599e:	400a      	ands	r2, r1
 80059a0:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80059a2:	4b1d      	ldr	r3, [pc, #116]	; (8005a18 <xTaskNotifyWait+0xa4>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2250      	movs	r2, #80	; 0x50
 80059a8:	2101      	movs	r1, #1
 80059aa:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d006      	beq.n	80059c0 <xTaskNotifyWait+0x4c>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2101      	movs	r1, #1
 80059b6:	0018      	movs	r0, r3
 80059b8:	f000 f966 	bl	8005c88 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80059bc:	f000 fa40 	bl	8005e40 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80059c0:	f000 fa60 	bl	8005e84 <vPortExitCritical>

		taskENTER_CRITICAL();
 80059c4:	f000 fa4c 	bl	8005e60 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d004      	beq.n	80059d8 <xTaskNotifyWait+0x64>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80059ce:	4b12      	ldr	r3, [pc, #72]	; (8005a18 <xTaskNotifyWait+0xa4>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80059d8:	4b0f      	ldr	r3, [pc, #60]	; (8005a18 <xTaskNotifyWait+0xa4>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2250      	movs	r2, #80	; 0x50
 80059de:	5c9b      	ldrb	r3, [r3, r2]
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d002      	beq.n	80059ec <xTaskNotifyWait+0x78>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80059e6:	2300      	movs	r3, #0
 80059e8:	617b      	str	r3, [r7, #20]
 80059ea:	e008      	b.n	80059fe <xTaskNotifyWait+0x8a>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80059ec:	4b0a      	ldr	r3, [pc, #40]	; (8005a18 <xTaskNotifyWait+0xa4>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059f2:	68b9      	ldr	r1, [r7, #8]
 80059f4:	43c9      	mvns	r1, r1
 80059f6:	400a      	ands	r2, r1
 80059f8:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 80059fa:	2301      	movs	r3, #1
 80059fc:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059fe:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <xTaskNotifyWait+0xa4>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2250      	movs	r2, #80	; 0x50
 8005a04:	2100      	movs	r1, #0
 8005a06:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
 8005a08:	f000 fa3c 	bl	8005e84 <vPortExitCritical>

		return xReturn;
 8005a0c:	697b      	ldr	r3, [r7, #20]
	}
 8005a0e:	0018      	movs	r0, r3
 8005a10:	46bd      	mov	sp, r7
 8005a12:	b006      	add	sp, #24
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	46c0      	nop			; (mov r8, r8)
 8005a18:	20000024 	.word	0x20000024

08005a1c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b088      	sub	sp, #32
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	603b      	str	r3, [r7, #0]
 8005a28:	1dfb      	adds	r3, r7, #7
 8005a2a:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	61fb      	str	r3, [r7, #28]
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <xTaskGenericNotify+0x1e>
 8005a36:	b672      	cpsid	i
 8005a38:	e7fe      	b.n	8005a38 <xTaskGenericNotify+0x1c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
 8005a3e:	f000 fa0f 	bl	8005e60 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <xTaskGenericNotify+0x34>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005a50:	2317      	movs	r3, #23
 8005a52:	18fb      	adds	r3, r7, r3
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	2150      	movs	r1, #80	; 0x50
 8005a58:	5c52      	ldrb	r2, [r2, r1]
 8005a5a:	701a      	strb	r2, [r3, #0]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	2250      	movs	r2, #80	; 0x50
 8005a60:	2102      	movs	r1, #2
 8005a62:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 8005a64:	1dfb      	adds	r3, r7, #7
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	2b04      	cmp	r3, #4
 8005a6a:	d822      	bhi.n	8005ab2 <xTaskGenericNotify+0x96>
 8005a6c:	009a      	lsls	r2, r3, #2
 8005a6e:	4b2d      	ldr	r3, [pc, #180]	; (8005b24 <xTaskGenericNotify+0x108>)
 8005a70:	18d3      	adds	r3, r2, r3
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	431a      	orrs	r2, r3
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005a82:	e016      	b.n	8005ab2 <xTaskGenericNotify+0x96>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005a8e:	e010      	b.n	8005ab2 <xTaskGenericNotify+0x96>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005a96:	e00c      	b.n	8005ab2 <xTaskGenericNotify+0x96>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005a98:	2317      	movs	r3, #23
 8005a9a:	18fb      	adds	r3, r7, r3
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d003      	beq.n	8005aaa <xTaskGenericNotify+0x8e>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005aa8:	e003      	b.n	8005ab2 <xTaskGenericNotify+0x96>
						xReturn = pdFAIL;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	61fb      	str	r3, [r7, #28]
					break;
 8005aae:	e000      	b.n	8005ab2 <xTaskGenericNotify+0x96>

				case eNoAction:
					/* The task is being notified without its notify value being
					updated. */
					break;
 8005ab0:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005ab2:	2317      	movs	r3, #23
 8005ab4:	18fb      	adds	r3, r7, r3
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d12b      	bne.n	8005b14 <xTaskGenericNotify+0xf8>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	0018      	movs	r0, r3
 8005ac2:	f7fe fd20 	bl	8004506 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aca:	4b17      	ldr	r3, [pc, #92]	; (8005b28 <xTaskGenericNotify+0x10c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d903      	bls.n	8005ada <xTaskGenericNotify+0xbe>
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad6:	4b14      	ldr	r3, [pc, #80]	; (8005b28 <xTaskGenericNotify+0x10c>)
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ade:	0013      	movs	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	189b      	adds	r3, r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4a11      	ldr	r2, [pc, #68]	; (8005b2c <xTaskGenericNotify+0x110>)
 8005ae8:	189a      	adds	r2, r3, r2
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	3304      	adds	r3, #4
 8005aee:	0019      	movs	r1, r3
 8005af0:	0010      	movs	r0, r2
 8005af2:	f7fe fcb0 	bl	8004456 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <xTaskGenericNotify+0xe6>
 8005afe:	b672      	cpsid	i
 8005b00:	e7fe      	b.n	8005b00 <xTaskGenericNotify+0xe4>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b06:	4b0a      	ldr	r3, [pc, #40]	; (8005b30 <xTaskGenericNotify+0x114>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d901      	bls.n	8005b14 <xTaskGenericNotify+0xf8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005b10:	f000 f996 	bl	8005e40 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005b14:	f000 f9b6 	bl	8005e84 <vPortExitCritical>

		return xReturn;
 8005b18:	69fb      	ldr	r3, [r7, #28]
	}
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	b008      	add	sp, #32
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	46c0      	nop			; (mov r8, r8)
 8005b24:	08007790 	.word	0x08007790
 8005b28:	2000012c 	.word	0x2000012c
 8005b2c:	20000028 	.word	0x20000028
 8005b30:	20000024 	.word	0x20000024

08005b34 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	603b      	str	r3, [r7, #0]
 8005b40:	1dfb      	adds	r3, r7, #7
 8005b42:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005b44:	2301      	movs	r3, #1
 8005b46:	61fb      	str	r3, [r7, #28]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <xTaskGenericNotifyFromISR+0x1e>
 8005b4e:	b672      	cpsid	i
 8005b50:	e7fe      	b.n	8005b50 <xTaskGenericNotifyFromISR+0x1c>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	61bb      	str	r3, [r7, #24]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b56:	f000 f9ad 	bl	8005eb4 <ulSetInterruptMaskFromISR>
 8005b5a:	0003      	movs	r3, r0
 8005b5c:	617b      	str	r3, [r7, #20]
		{
			if( pulPreviousNotificationValue != NULL )
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <xTaskGenericNotifyFromISR+0x38>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005b6c:	2313      	movs	r3, #19
 8005b6e:	18fb      	adds	r3, r7, r3
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	2150      	movs	r1, #80	; 0x50
 8005b74:	5c52      	ldrb	r2, [r2, r1]
 8005b76:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	2250      	movs	r2, #80	; 0x50
 8005b7c:	2102      	movs	r1, #2
 8005b7e:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 8005b80:	1dfb      	adds	r3, r7, #7
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	2b04      	cmp	r3, #4
 8005b86:	d822      	bhi.n	8005bce <xTaskGenericNotifyFromISR+0x9a>
 8005b88:	009a      	lsls	r2, r3, #2
 8005b8a:	4b38      	ldr	r3, [pc, #224]	; (8005c6c <xTaskGenericNotifyFromISR+0x138>)
 8005b8c:	18d3      	adds	r3, r2, r3
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005b9e:	e016      	b.n	8005bce <xTaskGenericNotifyFromISR+0x9a>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba4:	1c5a      	adds	r2, r3, #1
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005baa:	e010      	b.n	8005bce <xTaskGenericNotifyFromISR+0x9a>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005bb2:	e00c      	b.n	8005bce <xTaskGenericNotifyFromISR+0x9a>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005bb4:	2313      	movs	r3, #19
 8005bb6:	18fb      	adds	r3, r7, r3
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d003      	beq.n	8005bc6 <xTaskGenericNotifyFromISR+0x92>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005bc4:	e003      	b.n	8005bce <xTaskGenericNotifyFromISR+0x9a>
						xReturn = pdFAIL;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61fb      	str	r3, [r7, #28]
					break;
 8005bca:	e000      	b.n	8005bce <xTaskGenericNotifyFromISR+0x9a>

				case eNoAction :
					/* The task is being notified without its notify value being
					updated. */
					break;
 8005bcc:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005bce:	2313      	movs	r3, #19
 8005bd0:	18fb      	adds	r3, r7, r3
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d140      	bne.n	8005c5a <xTaskGenericNotifyFromISR+0x126>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <xTaskGenericNotifyFromISR+0xb0>
 8005be0:	b672      	cpsid	i
 8005be2:	e7fe      	b.n	8005be2 <xTaskGenericNotifyFromISR+0xae>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005be4:	4b22      	ldr	r3, [pc, #136]	; (8005c70 <xTaskGenericNotifyFromISR+0x13c>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d11d      	bne.n	8005c28 <xTaskGenericNotifyFromISR+0xf4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	3304      	adds	r3, #4
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	f7fe fc88 	bl	8004506 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bfa:	4b1e      	ldr	r3, [pc, #120]	; (8005c74 <xTaskGenericNotifyFromISR+0x140>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d903      	bls.n	8005c0a <xTaskGenericNotifyFromISR+0xd6>
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c06:	4b1b      	ldr	r3, [pc, #108]	; (8005c74 <xTaskGenericNotifyFromISR+0x140>)
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c0e:	0013      	movs	r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	189b      	adds	r3, r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4a18      	ldr	r2, [pc, #96]	; (8005c78 <xTaskGenericNotifyFromISR+0x144>)
 8005c18:	189a      	adds	r2, r3, r2
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	0019      	movs	r1, r3
 8005c20:	0010      	movs	r0, r2
 8005c22:	f7fe fc18 	bl	8004456 <vListInsertEnd>
 8005c26:	e007      	b.n	8005c38 <xTaskGenericNotifyFromISR+0x104>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	3318      	adds	r3, #24
 8005c2c:	001a      	movs	r2, r3
 8005c2e:	4b13      	ldr	r3, [pc, #76]	; (8005c7c <xTaskGenericNotifyFromISR+0x148>)
 8005c30:	0011      	movs	r1, r2
 8005c32:	0018      	movs	r0, r3
 8005c34:	f7fe fc0f 	bl	8004456 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c3c:	4b10      	ldr	r3, [pc, #64]	; (8005c80 <xTaskGenericNotifyFromISR+0x14c>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d909      	bls.n	8005c5a <xTaskGenericNotifyFromISR+0x126>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <xTaskGenericNotifyFromISR+0x120>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4e:	2201      	movs	r2, #1
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	e002      	b.n	8005c5a <xTaskGenericNotifyFromISR+0x126>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8005c54:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <xTaskGenericNotifyFromISR+0x150>)
 8005c56:	2201      	movs	r2, #1
 8005c58:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	0018      	movs	r0, r3
 8005c5e:	f000 f92f 	bl	8005ec0 <vClearInterruptMaskFromISR>

		return xReturn;
 8005c62:	69fb      	ldr	r3, [r7, #28]
	}
 8005c64:	0018      	movs	r0, r3
 8005c66:	46bd      	mov	sp, r7
 8005c68:	b008      	add	sp, #32
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	080077a4 	.word	0x080077a4
 8005c70:	2000014c 	.word	0x2000014c
 8005c74:	2000012c 	.word	0x2000012c
 8005c78:	20000028 	.word	0x20000028
 8005c7c:	200000e4 	.word	0x200000e4
 8005c80:	20000024 	.word	0x20000024
 8005c84:	20000138 	.word	0x20000138

08005c88 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c92:	4b21      	ldr	r3, [pc, #132]	; (8005d18 <prvAddCurrentTaskToDelayedList+0x90>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c98:	4b20      	ldr	r3, [pc, #128]	; (8005d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	0018      	movs	r0, r3
 8005ca0:	f7fe fc31 	bl	8004506 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	d10b      	bne.n	8005cc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d008      	beq.n	8005cc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cb0:	4b1a      	ldr	r3, [pc, #104]	; (8005d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	1d1a      	adds	r2, r3, #4
 8005cb6:	4b1a      	ldr	r3, [pc, #104]	; (8005d20 <prvAddCurrentTaskToDelayedList+0x98>)
 8005cb8:	0011      	movs	r1, r2
 8005cba:	0018      	movs	r0, r3
 8005cbc:	f7fe fbcb 	bl	8004456 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005cc0:	e026      	b.n	8005d10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	18d3      	adds	r3, r2, r3
 8005cc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005cca:	4b14      	ldr	r3, [pc, #80]	; (8005d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d209      	bcs.n	8005cee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cda:	4b12      	ldr	r3, [pc, #72]	; (8005d24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	4b0f      	ldr	r3, [pc, #60]	; (8005d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	3304      	adds	r3, #4
 8005ce4:	0019      	movs	r1, r3
 8005ce6:	0010      	movs	r0, r2
 8005ce8:	f7fe fbd7 	bl	800449a <vListInsert>
}
 8005cec:	e010      	b.n	8005d10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cee:	4b0e      	ldr	r3, [pc, #56]	; (8005d28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	4b0a      	ldr	r3, [pc, #40]	; (8005d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	3304      	adds	r3, #4
 8005cf8:	0019      	movs	r1, r3
 8005cfa:	0010      	movs	r0, r2
 8005cfc:	f7fe fbcd 	bl	800449a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d00:	4b0a      	ldr	r3, [pc, #40]	; (8005d2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d202      	bcs.n	8005d10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005d0a:	4b08      	ldr	r3, [pc, #32]	; (8005d2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	601a      	str	r2, [r3, #0]
}
 8005d10:	46c0      	nop			; (mov r8, r8)
 8005d12:	46bd      	mov	sp, r7
 8005d14:	b004      	add	sp, #16
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	20000128 	.word	0x20000128
 8005d1c:	20000024 	.word	0x20000024
 8005d20:	20000110 	.word	0x20000110
 8005d24:	200000e0 	.word	0x200000e0
 8005d28:	200000dc 	.word	0x200000dc
 8005d2c:	20000144 	.word	0x20000144

08005d30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	3b04      	subs	r3, #4
 8005d40:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2280      	movs	r2, #128	; 0x80
 8005d46:	0452      	lsls	r2, r2, #17
 8005d48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	3b04      	subs	r3, #4
 8005d4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	3b04      	subs	r3, #4
 8005d5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d5c:	4a08      	ldr	r2, [pc, #32]	; (8005d80 <pxPortInitialiseStack+0x50>)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	3b14      	subs	r3, #20
 8005d66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	3b20      	subs	r3, #32
 8005d72:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d74:	68fb      	ldr	r3, [r7, #12]
}
 8005d76:	0018      	movs	r0, r3
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	b004      	add	sp, #16
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	46c0      	nop			; (mov r8, r8)
 8005d80:	08005d85 	.word	0x08005d85

08005d84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d8e:	4b07      	ldr	r3, [pc, #28]	; (8005dac <prvTaskExitError+0x28>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3301      	adds	r3, #1
 8005d94:	d001      	beq.n	8005d9a <prvTaskExitError+0x16>
 8005d96:	b672      	cpsid	i
 8005d98:	e7fe      	b.n	8005d98 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005d9a:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005d9c:	46c0      	nop			; (mov r8, r8)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d0fc      	beq.n	8005d9e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005da4:	46c0      	nop			; (mov r8, r8)
 8005da6:	46bd      	mov	sp, r7
 8005da8:	b002      	add	sp, #8
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	20000000 	.word	0x20000000

08005db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005db4:	46c0      	nop			; (mov r8, r8)
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	0000      	movs	r0, r0
 8005dbc:	0000      	movs	r0, r0
	...

08005dc0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005dc0:	4a0b      	ldr	r2, [pc, #44]	; (8005df0 <pxCurrentTCBConst2>)
 8005dc2:	6813      	ldr	r3, [r2, #0]
 8005dc4:	6818      	ldr	r0, [r3, #0]
 8005dc6:	3020      	adds	r0, #32
 8005dc8:	f380 8809 	msr	PSP, r0
 8005dcc:	2002      	movs	r0, #2
 8005dce:	f380 8814 	msr	CONTROL, r0
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005dd8:	46ae      	mov	lr, r5
 8005dda:	bc08      	pop	{r3}
 8005ddc:	bc04      	pop	{r2}
 8005dde:	b662      	cpsie	i
 8005de0:	4718      	bx	r3
 8005de2:	46c0      	nop			; (mov r8, r8)
 8005de4:	46c0      	nop			; (mov r8, r8)
 8005de6:	46c0      	nop			; (mov r8, r8)
 8005de8:	46c0      	nop			; (mov r8, r8)
 8005dea:	46c0      	nop			; (mov r8, r8)
 8005dec:	46c0      	nop			; (mov r8, r8)
 8005dee:	46c0      	nop			; (mov r8, r8)

08005df0 <pxCurrentTCBConst2>:
 8005df0:	20000024 	.word	0x20000024
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005df4:	46c0      	nop			; (mov r8, r8)
 8005df6:	46c0      	nop			; (mov r8, r8)

08005df8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8005dfc:	4b0e      	ldr	r3, [pc, #56]	; (8005e38 <xPortStartScheduler+0x40>)
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	4b0d      	ldr	r3, [pc, #52]	; (8005e38 <xPortStartScheduler+0x40>)
 8005e02:	21ff      	movs	r1, #255	; 0xff
 8005e04:	0409      	lsls	r1, r1, #16
 8005e06:	430a      	orrs	r2, r1
 8005e08:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8005e0a:	4b0b      	ldr	r3, [pc, #44]	; (8005e38 <xPortStartScheduler+0x40>)
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	4b0a      	ldr	r3, [pc, #40]	; (8005e38 <xPortStartScheduler+0x40>)
 8005e10:	21ff      	movs	r1, #255	; 0xff
 8005e12:	0609      	lsls	r1, r1, #24
 8005e14:	430a      	orrs	r2, r1
 8005e16:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8005e18:	f000 f898 	bl	8005f4c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e1c:	4b07      	ldr	r3, [pc, #28]	; (8005e3c <xPortStartScheduler+0x44>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005e22:	f7ff ffcd 	bl	8005dc0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005e26:	f7ff fb25 	bl	8005474 <vTaskSwitchContext>
	prvTaskExitError();
 8005e2a:	f7ff ffab 	bl	8005d84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	0018      	movs	r0, r3
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	46c0      	nop			; (mov r8, r8)
 8005e38:	e000ed20 	.word	0xe000ed20
 8005e3c:	20000000 	.word	0x20000000

08005e40 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8005e44:	4b05      	ldr	r3, [pc, #20]	; (8005e5c <vPortYield+0x1c>)
 8005e46:	2280      	movs	r2, #128	; 0x80
 8005e48:	0552      	lsls	r2, r2, #21
 8005e4a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8005e4c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005e50:	f3bf 8f6f 	isb	sy
}
 8005e54:	46c0      	nop			; (mov r8, r8)
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	46c0      	nop			; (mov r8, r8)
 8005e5c:	e000ed04 	.word	0xe000ed04

08005e60 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005e64:	b672      	cpsid	i
    uxCriticalNesting++;
 8005e66:	4b06      	ldr	r3, [pc, #24]	; (8005e80 <vPortEnterCritical+0x20>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	1c5a      	adds	r2, r3, #1
 8005e6c:	4b04      	ldr	r3, [pc, #16]	; (8005e80 <vPortEnterCritical+0x20>)
 8005e6e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005e70:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005e74:	f3bf 8f6f 	isb	sy
}
 8005e78:	46c0      	nop			; (mov r8, r8)
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	46c0      	nop			; (mov r8, r8)
 8005e80:	20000000 	.word	0x20000000

08005e84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e88:	4b09      	ldr	r3, [pc, #36]	; (8005eb0 <vPortExitCritical+0x2c>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <vPortExitCritical+0x10>
 8005e90:	b672      	cpsid	i
 8005e92:	e7fe      	b.n	8005e92 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005e94:	4b06      	ldr	r3, [pc, #24]	; (8005eb0 <vPortExitCritical+0x2c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	1e5a      	subs	r2, r3, #1
 8005e9a:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <vPortExitCritical+0x2c>)
 8005e9c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8005e9e:	4b04      	ldr	r3, [pc, #16]	; (8005eb0 <vPortExitCritical+0x2c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d100      	bne.n	8005ea8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8005ea6:	b662      	cpsie	i
    }
}
 8005ea8:	46c0      	nop			; (mov r8, r8)
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	46c0      	nop			; (mov r8, r8)
 8005eb0:	20000000 	.word	0x20000000

08005eb4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005eb4:	f3ef 8010 	mrs	r0, PRIMASK
 8005eb8:	b672      	cpsid	i
 8005eba:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8005ebc:	46c0      	nop			; (mov r8, r8)
 8005ebe:	0018      	movs	r0, r3

08005ec0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005ec0:	f380 8810 	msr	PRIMASK, r0
 8005ec4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8005ec6:	46c0      	nop			; (mov r8, r8)
	...

08005ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ed0:	f3ef 8009 	mrs	r0, PSP
 8005ed4:	4b0e      	ldr	r3, [pc, #56]	; (8005f10 <pxCurrentTCBConst>)
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	3820      	subs	r0, #32
 8005eda:	6010      	str	r0, [r2, #0]
 8005edc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005ede:	4644      	mov	r4, r8
 8005ee0:	464d      	mov	r5, r9
 8005ee2:	4656      	mov	r6, sl
 8005ee4:	465f      	mov	r7, fp
 8005ee6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005ee8:	b508      	push	{r3, lr}
 8005eea:	b672      	cpsid	i
 8005eec:	f7ff fac2 	bl	8005474 <vTaskSwitchContext>
 8005ef0:	b662      	cpsie	i
 8005ef2:	bc0c      	pop	{r2, r3}
 8005ef4:	6811      	ldr	r1, [r2, #0]
 8005ef6:	6808      	ldr	r0, [r1, #0]
 8005ef8:	3010      	adds	r0, #16
 8005efa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005efc:	46a0      	mov	r8, r4
 8005efe:	46a9      	mov	r9, r5
 8005f00:	46b2      	mov	sl, r6
 8005f02:	46bb      	mov	fp, r7
 8005f04:	f380 8809 	msr	PSP, r0
 8005f08:	3820      	subs	r0, #32
 8005f0a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005f0c:	4718      	bx	r3
 8005f0e:	46c0      	nop			; (mov r8, r8)

08005f10 <pxCurrentTCBConst>:
 8005f10:	20000024 	.word	0x20000024
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005f14:	46c0      	nop			; (mov r8, r8)
 8005f16:	46c0      	nop			; (mov r8, r8)

08005f18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f1e:	f7ff ffc9 	bl	8005eb4 <ulSetInterruptMaskFromISR>
 8005f22:	0003      	movs	r3, r0
 8005f24:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f26:	f7ff f9f1 	bl	800530c <xTaskIncrementTick>
 8005f2a:	1e03      	subs	r3, r0, #0
 8005f2c:	d003      	beq.n	8005f36 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8005f2e:	4b06      	ldr	r3, [pc, #24]	; (8005f48 <SysTick_Handler+0x30>)
 8005f30:	2280      	movs	r2, #128	; 0x80
 8005f32:	0552      	lsls	r2, r2, #21
 8005f34:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	0018      	movs	r0, r3
 8005f3a:	f7ff ffc1 	bl	8005ec0 <vClearInterruptMaskFromISR>
}
 8005f3e:	46c0      	nop			; (mov r8, r8)
 8005f40:	46bd      	mov	sp, r7
 8005f42:	b002      	add	sp, #8
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	46c0      	nop			; (mov r8, r8)
 8005f48:	e000ed04 	.word	0xe000ed04

08005f4c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8005f50:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <prvSetupTimerInterrupt+0x34>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005f56:	4b0b      	ldr	r3, [pc, #44]	; (8005f84 <prvSetupTimerInterrupt+0x38>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f5c:	4b0a      	ldr	r3, [pc, #40]	; (8005f88 <prvSetupTimerInterrupt+0x3c>)
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	23fa      	movs	r3, #250	; 0xfa
 8005f62:	0099      	lsls	r1, r3, #2
 8005f64:	0010      	movs	r0, r2
 8005f66:	f7fa f8cf 	bl	8000108 <__udivsi3>
 8005f6a:	0003      	movs	r3, r0
 8005f6c:	001a      	movs	r2, r3
 8005f6e:	4b07      	ldr	r3, [pc, #28]	; (8005f8c <prvSetupTimerInterrupt+0x40>)
 8005f70:	3a01      	subs	r2, #1
 8005f72:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8005f74:	4b02      	ldr	r3, [pc, #8]	; (8005f80 <prvSetupTimerInterrupt+0x34>)
 8005f76:	2207      	movs	r2, #7
 8005f78:	601a      	str	r2, [r3, #0]
}
 8005f7a:	46c0      	nop			; (mov r8, r8)
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	e000e010 	.word	0xe000e010
 8005f84:	e000e018 	.word	0xe000e018
 8005f88:	20000004 	.word	0x20000004
 8005f8c:	e000e014 	.word	0xe000e014

08005f90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8005f9c:	f7ff f91e 	bl	80051dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005fa0:	4b49      	ldr	r3, [pc, #292]	; (80060c8 <pvPortMalloc+0x138>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005fa8:	f000 f8e0 	bl	800616c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fac:	4b47      	ldr	r3, [pc, #284]	; (80060cc <pvPortMalloc+0x13c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	d000      	beq.n	8005fb8 <pvPortMalloc+0x28>
 8005fb6:	e079      	b.n	80060ac <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d012      	beq.n	8005fe4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8005fbe:	2208      	movs	r2, #8
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	189b      	adds	r3, r3, r2
 8005fc4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2207      	movs	r2, #7
 8005fca:	4013      	ands	r3, r2
 8005fcc:	d00a      	beq.n	8005fe4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2207      	movs	r2, #7
 8005fd2:	4393      	bics	r3, r2
 8005fd4:	3308      	adds	r3, #8
 8005fd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2207      	movs	r2, #7
 8005fdc:	4013      	ands	r3, r2
 8005fde:	d001      	beq.n	8005fe4 <pvPortMalloc+0x54>
 8005fe0:	b672      	cpsid	i
 8005fe2:	e7fe      	b.n	8005fe2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d060      	beq.n	80060ac <pvPortMalloc+0x11c>
 8005fea:	4b39      	ldr	r3, [pc, #228]	; (80060d0 <pvPortMalloc+0x140>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d85b      	bhi.n	80060ac <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ff4:	4b37      	ldr	r3, [pc, #220]	; (80060d4 <pvPortMalloc+0x144>)
 8005ff6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005ff8:	4b36      	ldr	r3, [pc, #216]	; (80060d4 <pvPortMalloc+0x144>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ffe:	e004      	b.n	800600a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	429a      	cmp	r2, r3
 8006012:	d903      	bls.n	800601c <pvPortMalloc+0x8c>
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1f1      	bne.n	8006000 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800601c:	4b2a      	ldr	r3, [pc, #168]	; (80060c8 <pvPortMalloc+0x138>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	429a      	cmp	r2, r3
 8006024:	d042      	beq.n	80060ac <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2208      	movs	r2, #8
 800602c:	189b      	adds	r3, r3, r2
 800602e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	1ad2      	subs	r2, r2, r3
 8006040:	2308      	movs	r3, #8
 8006042:	005b      	lsls	r3, r3, #1
 8006044:	429a      	cmp	r2, r3
 8006046:	d916      	bls.n	8006076 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	18d3      	adds	r3, r2, r3
 800604e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2207      	movs	r2, #7
 8006054:	4013      	ands	r3, r2
 8006056:	d001      	beq.n	800605c <pvPortMalloc+0xcc>
 8006058:	b672      	cpsid	i
 800605a:	e7fe      	b.n	800605a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	1ad2      	subs	r2, r2, r3
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	0018      	movs	r0, r3
 8006072:	f000 f8db 	bl	800622c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006076:	4b16      	ldr	r3, [pc, #88]	; (80060d0 <pvPortMalloc+0x140>)
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	1ad2      	subs	r2, r2, r3
 8006080:	4b13      	ldr	r3, [pc, #76]	; (80060d0 <pvPortMalloc+0x140>)
 8006082:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006084:	4b12      	ldr	r3, [pc, #72]	; (80060d0 <pvPortMalloc+0x140>)
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	4b13      	ldr	r3, [pc, #76]	; (80060d8 <pvPortMalloc+0x148>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	429a      	cmp	r2, r3
 800608e:	d203      	bcs.n	8006098 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006090:	4b0f      	ldr	r3, [pc, #60]	; (80060d0 <pvPortMalloc+0x140>)
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	4b10      	ldr	r3, [pc, #64]	; (80060d8 <pvPortMalloc+0x148>)
 8006096:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	4b0b      	ldr	r3, [pc, #44]	; (80060cc <pvPortMalloc+0x13c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	431a      	orrs	r2, r3
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	2200      	movs	r2, #0
 80060aa:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80060ac:	f7ff f8a2 	bl	80051f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2207      	movs	r2, #7
 80060b4:	4013      	ands	r3, r2
 80060b6:	d001      	beq.n	80060bc <pvPortMalloc+0x12c>
 80060b8:	b672      	cpsid	i
 80060ba:	e7fe      	b.n	80060ba <pvPortMalloc+0x12a>
	return pvReturn;
 80060bc:	68fb      	ldr	r3, [r7, #12]
}
 80060be:	0018      	movs	r0, r3
 80060c0:	46bd      	mov	sp, r7
 80060c2:	b006      	add	sp, #24
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	46c0      	nop			; (mov r8, r8)
 80060c8:	20000d58 	.word	0x20000d58
 80060cc:	20000d64 	.word	0x20000d64
 80060d0:	20000d5c 	.word	0x20000d5c
 80060d4:	20000d50 	.word	0x20000d50
 80060d8:	20000d60 	.word	0x20000d60

080060dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d035      	beq.n	800615a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80060ee:	2308      	movs	r3, #8
 80060f0:	425b      	negs	r3, r3
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	18d3      	adds	r3, r2, r3
 80060f6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	4b18      	ldr	r3, [pc, #96]	; (8006164 <vPortFree+0x88>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4013      	ands	r3, r2
 8006106:	d101      	bne.n	800610c <vPortFree+0x30>
 8006108:	b672      	cpsid	i
 800610a:	e7fe      	b.n	800610a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d001      	beq.n	8006118 <vPortFree+0x3c>
 8006114:	b672      	cpsid	i
 8006116:	e7fe      	b.n	8006116 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	4b11      	ldr	r3, [pc, #68]	; (8006164 <vPortFree+0x88>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4013      	ands	r3, r2
 8006122:	d01a      	beq.n	800615a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d116      	bne.n	800615a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	4b0c      	ldr	r3, [pc, #48]	; (8006164 <vPortFree+0x88>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	43db      	mvns	r3, r3
 8006136:	401a      	ands	r2, r3
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800613c:	f7ff f84e 	bl	80051dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	4b08      	ldr	r3, [pc, #32]	; (8006168 <vPortFree+0x8c>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	18d2      	adds	r2, r2, r3
 800614a:	4b07      	ldr	r3, [pc, #28]	; (8006168 <vPortFree+0x8c>)
 800614c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	0018      	movs	r0, r3
 8006152:	f000 f86b 	bl	800622c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006156:	f7ff f84d 	bl	80051f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800615a:	46c0      	nop			; (mov r8, r8)
 800615c:	46bd      	mov	sp, r7
 800615e:	b004      	add	sp, #16
 8006160:	bd80      	pop	{r7, pc}
 8006162:	46c0      	nop			; (mov r8, r8)
 8006164:	20000d64 	.word	0x20000d64
 8006168:	20000d5c 	.word	0x20000d5c

0800616c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006172:	23c0      	movs	r3, #192	; 0xc0
 8006174:	011b      	lsls	r3, r3, #4
 8006176:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006178:	4b26      	ldr	r3, [pc, #152]	; (8006214 <prvHeapInit+0xa8>)
 800617a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2207      	movs	r2, #7
 8006180:	4013      	ands	r3, r2
 8006182:	d00c      	beq.n	800619e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	3307      	adds	r3, #7
 8006188:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2207      	movs	r2, #7
 800618e:	4393      	bics	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	1ad2      	subs	r2, r2, r3
 8006198:	4b1e      	ldr	r3, [pc, #120]	; (8006214 <prvHeapInit+0xa8>)
 800619a:	18d3      	adds	r3, r2, r3
 800619c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80061a2:	4b1d      	ldr	r3, [pc, #116]	; (8006218 <prvHeapInit+0xac>)
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80061a8:	4b1b      	ldr	r3, [pc, #108]	; (8006218 <prvHeapInit+0xac>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	18d3      	adds	r3, r2, r3
 80061b4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80061b6:	2208      	movs	r2, #8
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	1a9b      	subs	r3, r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2207      	movs	r2, #7
 80061c2:	4393      	bics	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	4b14      	ldr	r3, [pc, #80]	; (800621c <prvHeapInit+0xb0>)
 80061ca:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80061cc:	4b13      	ldr	r3, [pc, #76]	; (800621c <prvHeapInit+0xb0>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2200      	movs	r2, #0
 80061d2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80061d4:	4b11      	ldr	r3, [pc, #68]	; (800621c <prvHeapInit+0xb0>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2200      	movs	r2, #0
 80061da:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	1ad2      	subs	r2, r2, r3
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80061ea:	4b0c      	ldr	r3, [pc, #48]	; (800621c <prvHeapInit+0xb0>)
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	4b0a      	ldr	r3, [pc, #40]	; (8006220 <prvHeapInit+0xb4>)
 80061f8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	4b09      	ldr	r3, [pc, #36]	; (8006224 <prvHeapInit+0xb8>)
 8006200:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006202:	4b09      	ldr	r3, [pc, #36]	; (8006228 <prvHeapInit+0xbc>)
 8006204:	2280      	movs	r2, #128	; 0x80
 8006206:	0612      	lsls	r2, r2, #24
 8006208:	601a      	str	r2, [r3, #0]
}
 800620a:	46c0      	nop			; (mov r8, r8)
 800620c:	46bd      	mov	sp, r7
 800620e:	b004      	add	sp, #16
 8006210:	bd80      	pop	{r7, pc}
 8006212:	46c0      	nop			; (mov r8, r8)
 8006214:	20000150 	.word	0x20000150
 8006218:	20000d50 	.word	0x20000d50
 800621c:	20000d58 	.word	0x20000d58
 8006220:	20000d60 	.word	0x20000d60
 8006224:	20000d5c 	.word	0x20000d5c
 8006228:	20000d64 	.word	0x20000d64

0800622c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006234:	4b27      	ldr	r3, [pc, #156]	; (80062d4 <prvInsertBlockIntoFreeList+0xa8>)
 8006236:	60fb      	str	r3, [r7, #12]
 8006238:	e002      	b.n	8006240 <prvInsertBlockIntoFreeList+0x14>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	60fb      	str	r3, [r7, #12]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	429a      	cmp	r2, r3
 8006248:	d8f7      	bhi.n	800623a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	18d3      	adds	r3, r2, r3
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	429a      	cmp	r2, r3
 800625a:	d108      	bne.n	800626e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	18d2      	adds	r2, r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	18d2      	adds	r2, r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	429a      	cmp	r2, r3
 8006280:	d118      	bne.n	80062b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	4b14      	ldr	r3, [pc, #80]	; (80062d8 <prvInsertBlockIntoFreeList+0xac>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	429a      	cmp	r2, r3
 800628c:	d00d      	beq.n	80062aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	18d2      	adds	r2, r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	601a      	str	r2, [r3, #0]
 80062a8:	e008      	b.n	80062bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80062aa:	4b0b      	ldr	r3, [pc, #44]	; (80062d8 <prvInsertBlockIntoFreeList+0xac>)
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	e003      	b.n	80062bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d002      	beq.n	80062ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062ca:	46c0      	nop			; (mov r8, r8)
 80062cc:	46bd      	mov	sp, r7
 80062ce:	b004      	add	sp, #16
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	46c0      	nop			; (mov r8, r8)
 80062d4:	20000d50 	.word	0x20000d50
 80062d8:	20000d58 	.word	0x20000d58

080062dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	4a06      	ldr	r2, [pc, #24]	; (8006304 <vApplicationGetIdleTaskMemory+0x28>)
 80062ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	4a05      	ldr	r2, [pc, #20]	; (8006308 <vApplicationGetIdleTaskMemory+0x2c>)
 80062f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2280      	movs	r2, #128	; 0x80
 80062f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80062fa:	46c0      	nop			; (mov r8, r8)
 80062fc:	46bd      	mov	sp, r7
 80062fe:	b004      	add	sp, #16
 8006300:	bd80      	pop	{r7, pc}
 8006302:	46c0      	nop			; (mov r8, r8)
 8006304:	20000d68 	.word	0x20000d68
 8006308:	20000dbc 	.word	0x20000dbc

0800630c <IndicationTask>:
				.queue_sz = 1,
				.item_sz = 1
		};

void IndicationTask(void const * argument)
{
 800630c:	b590      	push	{r4, r7, lr}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
	osEvent  evt;

	for(;;)
	{
		  /*Always wait for a message with intensity value*/
		  evt = osMessageGet (ind_msg,  osWaitForever);
 8006314:	4b11      	ldr	r3, [pc, #68]	; (800635c <IndicationTask+0x50>)
 8006316:	6819      	ldr	r1, [r3, #0]
 8006318:	240c      	movs	r4, #12
 800631a:	1938      	adds	r0, r7, r4
 800631c:	2301      	movs	r3, #1
 800631e:	425b      	negs	r3, r3
 8006320:	001a      	movs	r2, r3
 8006322:	f7fd fffb 	bl	800431c <osMessageGet>
		  if (evt.status == osEventMessage)
 8006326:	193b      	adds	r3, r7, r4
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b10      	cmp	r3, #16
 800632c:	d114      	bne.n	8006358 <IndicationTask+0x4c>
		  {
			  switch(evt.value.v)
 800632e:	230c      	movs	r3, #12
 8006330:	18fb      	adds	r3, r7, r3
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d006      	beq.n	8006346 <IndicationTask+0x3a>
 8006338:	d302      	bcc.n	8006340 <IndicationTask+0x34>
 800633a:	2b02      	cmp	r3, #2
 800633c:	d006      	beq.n	800634c <IndicationTask+0x40>
 800633e:	e008      	b.n	8006352 <IndicationTask+0x46>
			  {
			  	  case IND_OFF:
			  	  {
			  		  ind_off();
 8006340:	f000 f862 	bl	8006408 <ind_off>
			  		  break;
 8006344:	e009      	b.n	800635a <IndicationTask+0x4e>
			  	  }
			  	  case IND_GREEN:
			  	  {
			  		  ind_green();
 8006346:	f000 f80b 	bl	8006360 <ind_green>
			  		  break;
 800634a:	e006      	b.n	800635a <IndicationTask+0x4e>
			  	  }
			  	  case IND_RED:
			  	  {
			  		  ind_red();
 800634c:	f000 f832 	bl	80063b4 <ind_red>
			  		  break;
 8006350:	e003      	b.n	800635a <IndicationTask+0x4e>
			  	  }
			  	  default:
			  	  {
			  		  ind_off();
 8006352:	f000 f859 	bl	8006408 <ind_off>
 8006356:	e7dd      	b.n	8006314 <IndicationTask+0x8>
			  	  }
			  }
		  }
 8006358:	46c0      	nop			; (mov r8, r8)
		  evt = osMessageGet (ind_msg,  osWaitForever);
 800635a:	e7db      	b.n	8006314 <IndicationTask+0x8>
 800635c:	20000fd0 	.word	0x20000fd0

08006360 <ind_green>:
	}

}

void ind_green(void)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006366:	1d3b      	adds	r3, r7, #4
 8006368:	0018      	movs	r0, r3
 800636a:	2314      	movs	r3, #20
 800636c:	001a      	movs	r2, r3
 800636e:	2100      	movs	r1, #0
 8006370:	f001 f971 	bl	8007656 <memset>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8006374:	2380      	movs	r3, #128	; 0x80
 8006376:	0059      	lsls	r1, r3, #1
 8006378:	23a0      	movs	r3, #160	; 0xa0
 800637a:	05db      	lsls	r3, r3, #23
 800637c:	2200      	movs	r2, #0
 800637e:	0018      	movs	r0, r3
 8006380:	f7fc fcd5 	bl	8002d2e <HAL_GPIO_WritePin>

	/*Configure GPIO pin:*/
	GPIO_InitStruct.Pin = LED_IND_Pin;
 8006384:	1d3b      	adds	r3, r7, #4
 8006386:	2280      	movs	r2, #128	; 0x80
 8006388:	0052      	lsls	r2, r2, #1
 800638a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800638c:	1d3b      	adds	r3, r7, #4
 800638e:	2201      	movs	r2, #1
 8006390:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006392:	1d3b      	adds	r3, r7, #4
 8006394:	2200      	movs	r2, #0
 8006396:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006398:	1d3b      	adds	r3, r7, #4
 800639a:	2200      	movs	r2, #0
 800639c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800639e:	1d3a      	adds	r2, r7, #4
 80063a0:	23a0      	movs	r3, #160	; 0xa0
 80063a2:	05db      	lsls	r3, r3, #23
 80063a4:	0011      	movs	r1, r2
 80063a6:	0018      	movs	r0, r3
 80063a8:	f7fc fb26 	bl	80029f8 <HAL_GPIO_Init>
}
 80063ac:	46c0      	nop			; (mov r8, r8)
 80063ae:	46bd      	mov	sp, r7
 80063b0:	b006      	add	sp, #24
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <ind_red>:

void ind_red(void)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063ba:	1d3b      	adds	r3, r7, #4
 80063bc:	0018      	movs	r0, r3
 80063be:	2314      	movs	r3, #20
 80063c0:	001a      	movs	r2, r3
 80063c2:	2100      	movs	r1, #0
 80063c4:	f001 f947 	bl	8007656 <memset>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80063c8:	2380      	movs	r3, #128	; 0x80
 80063ca:	0059      	lsls	r1, r3, #1
 80063cc:	23a0      	movs	r3, #160	; 0xa0
 80063ce:	05db      	lsls	r3, r3, #23
 80063d0:	2201      	movs	r2, #1
 80063d2:	0018      	movs	r0, r3
 80063d4:	f7fc fcab 	bl	8002d2e <HAL_GPIO_WritePin>

	/*Configure GPIO pin:*/
	GPIO_InitStruct.Pin = LED_IND_Pin;
 80063d8:	1d3b      	adds	r3, r7, #4
 80063da:	2280      	movs	r2, #128	; 0x80
 80063dc:	0052      	lsls	r2, r2, #1
 80063de:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063e0:	1d3b      	adds	r3, r7, #4
 80063e2:	2201      	movs	r2, #1
 80063e4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063e6:	1d3b      	adds	r3, r7, #4
 80063e8:	2200      	movs	r2, #0
 80063ea:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063ec:	1d3b      	adds	r3, r7, #4
 80063ee:	2200      	movs	r2, #0
 80063f0:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063f2:	1d3a      	adds	r2, r7, #4
 80063f4:	23a0      	movs	r3, #160	; 0xa0
 80063f6:	05db      	lsls	r3, r3, #23
 80063f8:	0011      	movs	r1, r2
 80063fa:	0018      	movs	r0, r3
 80063fc:	f7fc fafc 	bl	80029f8 <HAL_GPIO_Init>
}
 8006400:	46c0      	nop			; (mov r8, r8)
 8006402:	46bd      	mov	sp, r7
 8006404:	b006      	add	sp, #24
 8006406:	bd80      	pop	{r7, pc}

08006408 <ind_off>:

void ind_off(void)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800640e:	1d3b      	adds	r3, r7, #4
 8006410:	0018      	movs	r0, r3
 8006412:	2314      	movs	r3, #20
 8006414:	001a      	movs	r2, r3
 8006416:	2100      	movs	r1, #0
 8006418:	f001 f91d 	bl	8007656 <memset>

	/*Configure GPIO pin:*/
	GPIO_InitStruct.Pin = LED_IND_Pin;
 800641c:	1d3b      	adds	r3, r7, #4
 800641e:	2280      	movs	r2, #128	; 0x80
 8006420:	0052      	lsls	r2, r2, #1
 8006422:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006424:	1d3b      	adds	r3, r7, #4
 8006426:	2200      	movs	r2, #0
 8006428:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800642a:	1d3b      	adds	r3, r7, #4
 800642c:	2200      	movs	r2, #0
 800642e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006430:	1d3b      	adds	r3, r7, #4
 8006432:	2200      	movs	r2, #0
 8006434:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006436:	1d3a      	adds	r2, r7, #4
 8006438:	23a0      	movs	r3, #160	; 0xa0
 800643a:	05db      	lsls	r3, r3, #23
 800643c:	0011      	movs	r1, r2
 800643e:	0018      	movs	r0, r3
 8006440:	f7fc fada 	bl	80029f8 <HAL_GPIO_Init>
}
 8006444:	46c0      	nop			; (mov r8, r8)
 8006446:	46bd      	mov	sp, r7
 8006448:	b006      	add	sp, #24
 800644a:	bd80      	pop	{r7, pc}

0800644c <LEDControlTask>:
				.item_sz = 1
		};


void LEDControlTask(void const * argument)
{
 800644c:	b590      	push	{r4, r7, lr}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  osEvent  evt;

  for(;;)
  {
	  /*Always wait for a message with intensity value*/
	  evt = osMessageGet (led_msg,  osWaitForever);
 8006454:	4b09      	ldr	r3, [pc, #36]	; (800647c <LEDControlTask+0x30>)
 8006456:	6819      	ldr	r1, [r3, #0]
 8006458:	240c      	movs	r4, #12
 800645a:	1938      	adds	r0, r7, r4
 800645c:	2301      	movs	r3, #1
 800645e:	425b      	negs	r3, r3
 8006460:	001a      	movs	r2, r3
 8006462:	f7fd ff5b 	bl	800431c <osMessageGet>
	  if (evt.status == osEventMessage)
 8006466:	193b      	adds	r3, r7, r4
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b10      	cmp	r3, #16
 800646c:	d1f2      	bne.n	8006454 <LEDControlTask+0x8>
	  {
		  set_intensity(evt.value.v);
 800646e:	230c      	movs	r3, #12
 8006470:	18fb      	adds	r3, r7, r3
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	0018      	movs	r0, r3
 8006476:	f000 f81b 	bl	80064b0 <set_intensity>
	  evt = osMessageGet (led_msg,  osWaitForever);
 800647a:	e7eb      	b.n	8006454 <LEDControlTask+0x8>
 800647c:	20000fd8 	.word	0x20000fd8

08006480 <delay_us>:
  }
}

/*Hardware Timer Microsecond Delay*/
void delay_us (uint16_t us)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	0002      	movs	r2, r0
 8006488:	1dbb      	adds	r3, r7, #6
 800648a:	801a      	strh	r2, [r3, #0]
	/*Set the counter value a 0*/
	__HAL_TIM_SET_COUNTER(&htim22,0);
 800648c:	4b07      	ldr	r3, [pc, #28]	; (80064ac <delay_us+0x2c>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2200      	movs	r2, #0
 8006492:	625a      	str	r2, [r3, #36]	; 0x24

	/*Wait for the counter to reach the us input in the parameter*/
	while (__HAL_TIM_GET_COUNTER(&htim22) < us);
 8006494:	46c0      	nop			; (mov r8, r8)
 8006496:	4b05      	ldr	r3, [pc, #20]	; (80064ac <delay_us+0x2c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800649c:	1dbb      	adds	r3, r7, #6
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d3f8      	bcc.n	8006496 <delay_us+0x16>
}
 80064a4:	46c0      	nop			; (mov r8, r8)
 80064a6:	46bd      	mov	sp, r7
 80064a8:	b002      	add	sp, #8
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	20000fe0 	.word	0x20000fe0

080064b0 <set_intensity>:

/*Sets driver current using EasyScale Protocol*/
void set_intensity(uint32_t ref)
{
 80064b0:	b590      	push	{r4, r7, lr}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  unsigned char byte = 0, j = 0, k = 0;
 80064b8:	210f      	movs	r1, #15
 80064ba:	187b      	adds	r3, r7, r1
 80064bc:	2200      	movs	r2, #0
 80064be:	701a      	strb	r2, [r3, #0]
 80064c0:	230e      	movs	r3, #14
 80064c2:	18fb      	adds	r3, r7, r3
 80064c4:	2200      	movs	r2, #0
 80064c6:	701a      	strb	r2, [r3, #0]
 80064c8:	240d      	movs	r4, #13
 80064ca:	193b      	adds	r3, r7, r4
 80064cc:	2200      	movs	r2, #0
 80064ce:	701a      	strb	r2, [r3, #0]
  byte = 0x72;       //device adress byte
 80064d0:	187b      	adds	r3, r7, r1
 80064d2:	2272      	movs	r2, #114	; 0x72
 80064d4:	701a      	strb	r2, [r3, #0]

  /*Shut down driver and enter into EasyScale control mode*/
  HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 80064d6:	4b41      	ldr	r3, [pc, #260]	; (80065dc <set_intensity+0x12c>)
 80064d8:	2201      	movs	r2, #1
 80064da:	2102      	movs	r1, #2
 80064dc:	0018      	movs	r0, r3
 80064de:	f7fc fc26 	bl	8002d2e <HAL_GPIO_WritePin>
  delay_us(110);
 80064e2:	206e      	movs	r0, #110	; 0x6e
 80064e4:	f7ff ffcc 	bl	8006480 <delay_us>
  HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET);
 80064e8:	4b3c      	ldr	r3, [pc, #240]	; (80065dc <set_intensity+0x12c>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	2102      	movs	r1, #2
 80064ee:	0018      	movs	r0, r3
 80064f0:	f7fc fc1d 	bl	8002d2e <HAL_GPIO_WritePin>
  delay_us(1100);
 80064f4:	4b3a      	ldr	r3, [pc, #232]	; (80065e0 <set_intensity+0x130>)
 80064f6:	0018      	movs	r0, r3
 80064f8:	f7ff ffc2 	bl	8006480 <delay_us>

  /*Send address and data*/
  for(k=2; k>0; k--)
 80064fc:	193b      	adds	r3, r7, r4
 80064fe:	2202      	movs	r2, #2
 8006500:	701a      	strb	r2, [r3, #0]
 8006502:	e05c      	b.n	80065be <set_intensity+0x10e>
  {
	HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 8006504:	4b35      	ldr	r3, [pc, #212]	; (80065dc <set_intensity+0x12c>)
 8006506:	2201      	movs	r2, #1
 8006508:	2102      	movs	r1, #2
 800650a:	0018      	movs	r0, r3
 800650c:	f7fc fc0f 	bl	8002d2e <HAL_GPIO_WritePin>
	delay_us(48);
 8006510:	2030      	movs	r0, #48	; 0x30
 8006512:	f7ff ffb5 	bl	8006480 <delay_us>

    for(j=8; j>0; j--)
 8006516:	230e      	movs	r3, #14
 8006518:	18fb      	adds	r3, r7, r3
 800651a:	2208      	movs	r2, #8
 800651c:	701a      	strb	r2, [r3, #0]
 800651e:	e036      	b.n	800658e <set_intensity+0xde>
    {
      if(byte & 0x80)
 8006520:	230f      	movs	r3, #15
 8006522:	18fb      	adds	r3, r7, r3
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	b25b      	sxtb	r3, r3
 8006528:	2b00      	cmp	r3, #0
 800652a:	da12      	bge.n	8006552 <set_intensity+0xa2>
      {
    	HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET); //encoding bit 1
 800652c:	4b2b      	ldr	r3, [pc, #172]	; (80065dc <set_intensity+0x12c>)
 800652e:	2200      	movs	r2, #0
 8006530:	2102      	movs	r1, #2
 8006532:	0018      	movs	r0, r3
 8006534:	f7fc fbfb 	bl	8002d2e <HAL_GPIO_WritePin>
    	delay_us(24);
 8006538:	2018      	movs	r0, #24
 800653a:	f7ff ffa1 	bl	8006480 <delay_us>
        HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 800653e:	4b27      	ldr	r3, [pc, #156]	; (80065dc <set_intensity+0x12c>)
 8006540:	2201      	movs	r2, #1
 8006542:	2102      	movs	r1, #2
 8006544:	0018      	movs	r0, r3
 8006546:	f7fc fbf2 	bl	8002d2e <HAL_GPIO_WritePin>
        delay_us(48);
 800654a:	2030      	movs	r0, #48	; 0x30
 800654c:	f7ff ff98 	bl	8006480 <delay_us>
 8006550:	e011      	b.n	8006576 <set_intensity+0xc6>
      }
      else
      {
    	HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET); //encoding bit 0
 8006552:	4b22      	ldr	r3, [pc, #136]	; (80065dc <set_intensity+0x12c>)
 8006554:	2200      	movs	r2, #0
 8006556:	2102      	movs	r1, #2
 8006558:	0018      	movs	r0, r3
 800655a:	f7fc fbe8 	bl	8002d2e <HAL_GPIO_WritePin>
    	delay_us(48);
 800655e:	2030      	movs	r0, #48	; 0x30
 8006560:	f7ff ff8e 	bl	8006480 <delay_us>
        HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 8006564:	4b1d      	ldr	r3, [pc, #116]	; (80065dc <set_intensity+0x12c>)
 8006566:	2201      	movs	r2, #1
 8006568:	2102      	movs	r1, #2
 800656a:	0018      	movs	r0, r3
 800656c:	f7fc fbdf 	bl	8002d2e <HAL_GPIO_WritePin>
        delay_us(24);
 8006570:	2018      	movs	r0, #24
 8006572:	f7ff ff85 	bl	8006480 <delay_us>
      }
      byte += byte; //left shift
 8006576:	230f      	movs	r3, #15
 8006578:	18fa      	adds	r2, r7, r3
 800657a:	18fb      	adds	r3, r7, r3
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	18db      	adds	r3, r3, r3
 8006580:	7013      	strb	r3, [r2, #0]
    for(j=8; j>0; j--)
 8006582:	210e      	movs	r1, #14
 8006584:	187b      	adds	r3, r7, r1
 8006586:	781a      	ldrb	r2, [r3, #0]
 8006588:	187b      	adds	r3, r7, r1
 800658a:	3a01      	subs	r2, #1
 800658c:	701a      	strb	r2, [r3, #0]
 800658e:	230e      	movs	r3, #14
 8006590:	18fb      	adds	r3, r7, r3
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1c3      	bne.n	8006520 <set_intensity+0x70>
    }

    HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET); //End of stream delay
 8006598:	4b10      	ldr	r3, [pc, #64]	; (80065dc <set_intensity+0x12c>)
 800659a:	2200      	movs	r2, #0
 800659c:	2102      	movs	r1, #2
 800659e:	0018      	movs	r0, r3
 80065a0:	f7fc fbc5 	bl	8002d2e <HAL_GPIO_WritePin>
    delay_us(48);
 80065a4:	2030      	movs	r0, #48	; 0x30
 80065a6:	f7ff ff6b 	bl	8006480 <delay_us>

    byte = ref; //read data byte
 80065aa:	230f      	movs	r3, #15
 80065ac:	18fb      	adds	r3, r7, r3
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	701a      	strb	r2, [r3, #0]
  for(k=2; k>0; k--)
 80065b2:	210d      	movs	r1, #13
 80065b4:	187b      	adds	r3, r7, r1
 80065b6:	781a      	ldrb	r2, [r3, #0]
 80065b8:	187b      	adds	r3, r7, r1
 80065ba:	3a01      	subs	r2, #1
 80065bc:	701a      	strb	r2, [r3, #0]
 80065be:	230d      	movs	r3, #13
 80065c0:	18fb      	adds	r3, r7, r3
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d19d      	bne.n	8006504 <set_intensity+0x54>
  }
  HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 80065c8:	4b04      	ldr	r3, [pc, #16]	; (80065dc <set_intensity+0x12c>)
 80065ca:	2201      	movs	r2, #1
 80065cc:	2102      	movs	r1, #2
 80065ce:	0018      	movs	r0, r3
 80065d0:	f7fc fbad 	bl	8002d2e <HAL_GPIO_WritePin>
}
 80065d4:	46c0      	nop			; (mov r8, r8)
 80065d6:	46bd      	mov	sp, r7
 80065d8:	b005      	add	sp, #20
 80065da:	bd90      	pop	{r4, r7, pc}
 80065dc:	50000400 	.word	0x50000400
 80065e0:	0000044c 	.word	0x0000044c

080065e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80065e4:	b5b0      	push	{r4, r5, r7, lr}
 80065e6:	b0a4      	sub	sp, #144	; 0x90
 80065e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80065ea:	f7fb fb11 	bl	8001c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80065ee:	f000 f893 	bl	8006718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80065f2:	f000 fa69 	bl	8006ac8 <MX_GPIO_Init>
  MX_DMA_Init();
 80065f6:	f000 fa49 	bl	8006a8c <MX_DMA_Init>
  MX_ADC_Init();
 80065fa:	f000 f8f7 	bl	80067ec <MX_ADC_Init>
  MX_TIM22_Init();
 80065fe:	f000 f9eb 	bl	80069d8 <MX_TIM22_Init>
  MX_TIM21_Init();
 8006602:	f000 f993 	bl	800692c <MX_TIM21_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8006606:	f000 f8e3 	bl	80067d0 <MX_NVIC_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  led_msg = osMessageCreate (&led_msg_def, LEDControlTaskHandle);
 800660a:	4b35      	ldr	r3, [pc, #212]	; (80066e0 <main+0xfc>)
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	4b35      	ldr	r3, [pc, #212]	; (80066e4 <main+0x100>)
 8006610:	0011      	movs	r1, r2
 8006612:	0018      	movs	r0, r3
 8006614:	f7fd fe1c 	bl	8004250 <osMessageCreate>
 8006618:	0002      	movs	r2, r0
 800661a:	4b33      	ldr	r3, [pc, #204]	; (80066e8 <main+0x104>)
 800661c:	601a      	str	r2, [r3, #0]
  ind_msg = osMessageCreate (&ind_msg_def, IndicationTaskHandle);
 800661e:	4b33      	ldr	r3, [pc, #204]	; (80066ec <main+0x108>)
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	4b33      	ldr	r3, [pc, #204]	; (80066f0 <main+0x10c>)
 8006624:	0011      	movs	r1, r2
 8006626:	0018      	movs	r0, r3
 8006628:	f7fd fe12 	bl	8004250 <osMessageCreate>
 800662c:	0002      	movs	r2, r0
 800662e:	4b31      	ldr	r3, [pc, #196]	; (80066f4 <main+0x110>)
 8006630:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8006632:	2174      	movs	r1, #116	; 0x74
 8006634:	187b      	adds	r3, r7, r1
 8006636:	4a30      	ldr	r2, [pc, #192]	; (80066f8 <main+0x114>)
 8006638:	ca31      	ldmia	r2!, {r0, r4, r5}
 800663a:	c331      	stmia	r3!, {r0, r4, r5}
 800663c:	ca31      	ldmia	r2!, {r0, r4, r5}
 800663e:	c331      	stmia	r3!, {r0, r4, r5}
 8006640:	6812      	ldr	r2, [r2, #0]
 8006642:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8006644:	187b      	adds	r3, r7, r1
 8006646:	2100      	movs	r1, #0
 8006648:	0018      	movs	r0, r3
 800664a:	f7fd fd0f 	bl	800406c <osThreadCreate>
 800664e:	0002      	movs	r2, r0
 8006650:	4b2a      	ldr	r3, [pc, #168]	; (80066fc <main+0x118>)
 8006652:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  /* LED Control Task */
  osThreadDef(ledcontrol, LEDControlTask, osPriorityAboveNormal, 0, 128);
 8006654:	2158      	movs	r1, #88	; 0x58
 8006656:	187b      	adds	r3, r7, r1
 8006658:	4a29      	ldr	r2, [pc, #164]	; (8006700 <main+0x11c>)
 800665a:	ca31      	ldmia	r2!, {r0, r4, r5}
 800665c:	c331      	stmia	r3!, {r0, r4, r5}
 800665e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8006660:	c331      	stmia	r3!, {r0, r4, r5}
 8006662:	6812      	ldr	r2, [r2, #0]
 8006664:	601a      	str	r2, [r3, #0]
  LEDControlTaskHandle = osThreadCreate(osThread(ledcontrol), NULL);
 8006666:	187b      	adds	r3, r7, r1
 8006668:	2100      	movs	r1, #0
 800666a:	0018      	movs	r0, r3
 800666c:	f7fd fcfe 	bl	800406c <osThreadCreate>
 8006670:	0002      	movs	r2, r0
 8006672:	4b1b      	ldr	r3, [pc, #108]	; (80066e0 <main+0xfc>)
 8006674:	601a      	str	r2, [r3, #0]

  /* Monitoring Task */
  osThreadDef(monitoring, MonitorTask, osPriorityHigh, 0, 128);
 8006676:	213c      	movs	r1, #60	; 0x3c
 8006678:	187b      	adds	r3, r7, r1
 800667a:	4a22      	ldr	r2, [pc, #136]	; (8006704 <main+0x120>)
 800667c:	ca31      	ldmia	r2!, {r0, r4, r5}
 800667e:	c331      	stmia	r3!, {r0, r4, r5}
 8006680:	ca31      	ldmia	r2!, {r0, r4, r5}
 8006682:	c331      	stmia	r3!, {r0, r4, r5}
 8006684:	6812      	ldr	r2, [r2, #0]
 8006686:	601a      	str	r2, [r3, #0]
  MonitorTaskHandle = osThreadCreate(osThread(monitoring), NULL);
 8006688:	187b      	adds	r3, r7, r1
 800668a:	2100      	movs	r1, #0
 800668c:	0018      	movs	r0, r3
 800668e:	f7fd fced 	bl	800406c <osThreadCreate>
 8006692:	0002      	movs	r2, r0
 8006694:	4b1c      	ldr	r3, [pc, #112]	; (8006708 <main+0x124>)
 8006696:	601a      	str	r2, [r3, #0]

  /* Indication Task */
  osThreadDef(indication, IndicationTask, osPriorityAboveNormal, 0, 128);
 8006698:	2120      	movs	r1, #32
 800669a:	187b      	adds	r3, r7, r1
 800669c:	4a1b      	ldr	r2, [pc, #108]	; (800670c <main+0x128>)
 800669e:	ca31      	ldmia	r2!, {r0, r4, r5}
 80066a0:	c331      	stmia	r3!, {r0, r4, r5}
 80066a2:	ca31      	ldmia	r2!, {r0, r4, r5}
 80066a4:	c331      	stmia	r3!, {r0, r4, r5}
 80066a6:	6812      	ldr	r2, [r2, #0]
 80066a8:	601a      	str	r2, [r3, #0]
  MonitorTaskHandle = osThreadCreate(osThread(indication), NULL);
 80066aa:	187b      	adds	r3, r7, r1
 80066ac:	2100      	movs	r1, #0
 80066ae:	0018      	movs	r0, r3
 80066b0:	f7fd fcdc 	bl	800406c <osThreadCreate>
 80066b4:	0002      	movs	r2, r0
 80066b6:	4b14      	ldr	r3, [pc, #80]	; (8006708 <main+0x124>)
 80066b8:	601a      	str	r2, [r3, #0]

  /* Management Task */
  osThreadDef(management, ManagementTask, osPriorityNormal, 0, 128);
 80066ba:	1d3b      	adds	r3, r7, #4
 80066bc:	4a14      	ldr	r2, [pc, #80]	; (8006710 <main+0x12c>)
 80066be:	ca13      	ldmia	r2!, {r0, r1, r4}
 80066c0:	c313      	stmia	r3!, {r0, r1, r4}
 80066c2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80066c4:	c313      	stmia	r3!, {r0, r1, r4}
 80066c6:	6812      	ldr	r2, [r2, #0]
 80066c8:	601a      	str	r2, [r3, #0]
  ManagementTaskHandle = osThreadCreate(osThread(management), NULL);
 80066ca:	1d3b      	adds	r3, r7, #4
 80066cc:	2100      	movs	r1, #0
 80066ce:	0018      	movs	r0, r3
 80066d0:	f7fd fccc 	bl	800406c <osThreadCreate>
 80066d4:	0002      	movs	r2, r0
 80066d6:	4b0f      	ldr	r3, [pc, #60]	; (8006714 <main+0x130>)
 80066d8:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80066da:	f7fd fcbf 	bl	800405c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80066de:	e7fe      	b.n	80066de <main+0xfa>
 80066e0:	20000fd4 	.word	0x20000fd4
 80066e4:	080077c8 	.word	0x080077c8
 80066e8:	20000fd8 	.word	0x20000fd8
 80066ec:	20000fcc 	.word	0x20000fcc
 80066f0:	080077b8 	.word	0x080077b8
 80066f4:	20000fd0 	.word	0x20000fd0
 80066f8:	08007694 	.word	0x08007694
 80066fc:	20000fdc 	.word	0x20000fdc
 8006700:	080076bc 	.word	0x080076bc
 8006704:	080076e4 	.word	0x080076e4
 8006708:	20001130 	.word	0x20001130
 800670c:	0800770c 	.word	0x0800770c
 8006710:	08007734 	.word	0x08007734
 8006714:	200010fc 	.word	0x200010fc

08006718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006718:	b590      	push	{r4, r7, lr}
 800671a:	b095      	sub	sp, #84	; 0x54
 800671c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800671e:	2418      	movs	r4, #24
 8006720:	193b      	adds	r3, r7, r4
 8006722:	0018      	movs	r0, r3
 8006724:	2338      	movs	r3, #56	; 0x38
 8006726:	001a      	movs	r2, r3
 8006728:	2100      	movs	r1, #0
 800672a:	f000 ff94 	bl	8007656 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800672e:	1d3b      	adds	r3, r7, #4
 8006730:	0018      	movs	r0, r3
 8006732:	2314      	movs	r3, #20
 8006734:	001a      	movs	r2, r3
 8006736:	2100      	movs	r1, #0
 8006738:	f000 ff8d 	bl	8007656 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800673c:	4b22      	ldr	r3, [pc, #136]	; (80067c8 <SystemClock_Config+0xb0>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a22      	ldr	r2, [pc, #136]	; (80067cc <SystemClock_Config+0xb4>)
 8006742:	401a      	ands	r2, r3
 8006744:	4b20      	ldr	r3, [pc, #128]	; (80067c8 <SystemClock_Config+0xb0>)
 8006746:	2180      	movs	r1, #128	; 0x80
 8006748:	0109      	lsls	r1, r1, #4
 800674a:	430a      	orrs	r2, r1
 800674c:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800674e:	0021      	movs	r1, r4
 8006750:	187b      	adds	r3, r7, r1
 8006752:	2202      	movs	r2, #2
 8006754:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006756:	187b      	adds	r3, r7, r1
 8006758:	2201      	movs	r2, #1
 800675a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800675c:	187b      	adds	r3, r7, r1
 800675e:	2210      	movs	r2, #16
 8006760:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006762:	187b      	adds	r3, r7, r1
 8006764:	2202      	movs	r2, #2
 8006766:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006768:	187b      	adds	r3, r7, r1
 800676a:	2200      	movs	r2, #0
 800676c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800676e:	187b      	adds	r3, r7, r1
 8006770:	2280      	movs	r2, #128	; 0x80
 8006772:	02d2      	lsls	r2, r2, #11
 8006774:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8006776:	187b      	adds	r3, r7, r1
 8006778:	2280      	movs	r2, #128	; 0x80
 800677a:	03d2      	lsls	r2, r2, #15
 800677c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800677e:	187b      	adds	r3, r7, r1
 8006780:	0018      	movs	r0, r3
 8006782:	f7fc fb03 	bl	8002d8c <HAL_RCC_OscConfig>
 8006786:	1e03      	subs	r3, r0, #0
 8006788:	d001      	beq.n	800678e <SystemClock_Config+0x76>
  {
    Error_Handler();
 800678a:	f000 fa75 	bl	8006c78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800678e:	1d3b      	adds	r3, r7, #4
 8006790:	220f      	movs	r2, #15
 8006792:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006794:	1d3b      	adds	r3, r7, #4
 8006796:	2203      	movs	r2, #3
 8006798:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800679a:	1d3b      	adds	r3, r7, #4
 800679c:	2200      	movs	r2, #0
 800679e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80067a0:	1d3b      	adds	r3, r7, #4
 80067a2:	2200      	movs	r2, #0
 80067a4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80067a6:	1d3b      	adds	r3, r7, #4
 80067a8:	2200      	movs	r2, #0
 80067aa:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80067ac:	1d3b      	adds	r3, r7, #4
 80067ae:	2101      	movs	r1, #1
 80067b0:	0018      	movs	r0, r3
 80067b2:	f7fc febb 	bl	800352c <HAL_RCC_ClockConfig>
 80067b6:	1e03      	subs	r3, r0, #0
 80067b8:	d001      	beq.n	80067be <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80067ba:	f000 fa5d 	bl	8006c78 <Error_Handler>
  }
}
 80067be:	46c0      	nop			; (mov r8, r8)
 80067c0:	46bd      	mov	sp, r7
 80067c2:	b015      	add	sp, #84	; 0x54
 80067c4:	bd90      	pop	{r4, r7, pc}
 80067c6:	46c0      	nop			; (mov r8, r8)
 80067c8:	40007000 	.word	0x40007000
 80067cc:	ffffe7ff 	.word	0xffffe7ff

080067d0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	af00      	add	r7, sp, #0
  /* TIM21_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM21_IRQn, 3, 0);
 80067d4:	2200      	movs	r2, #0
 80067d6:	2103      	movs	r1, #3
 80067d8:	2014      	movs	r0, #20
 80067da:	f7fb ff2d 	bl	8002638 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80067de:	2014      	movs	r0, #20
 80067e0:	f7fb ff3f 	bl	8002662 <HAL_NVIC_EnableIRQ>
}
 80067e4:	46c0      	nop			; (mov r8, r8)
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC_Init(void)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80067f2:	003b      	movs	r3, r7
 80067f4:	0018      	movs	r0, r3
 80067f6:	2308      	movs	r3, #8
 80067f8:	001a      	movs	r2, r3
 80067fa:	2100      	movs	r1, #0
 80067fc:	f000 ff2b 	bl	8007656 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8006800:	4b44      	ldr	r3, [pc, #272]	; (8006914 <MX_ADC_Init+0x128>)
 8006802:	4a45      	ldr	r2, [pc, #276]	; (8006918 <MX_ADC_Init+0x12c>)
 8006804:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8006806:	4b43      	ldr	r3, [pc, #268]	; (8006914 <MX_ADC_Init+0x128>)
 8006808:	2200      	movs	r2, #0
 800680a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800680c:	4b41      	ldr	r3, [pc, #260]	; (8006914 <MX_ADC_Init+0x128>)
 800680e:	2280      	movs	r2, #128	; 0x80
 8006810:	0312      	lsls	r2, r2, #12
 8006812:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8006814:	4b3f      	ldr	r3, [pc, #252]	; (8006914 <MX_ADC_Init+0x128>)
 8006816:	2200      	movs	r2, #0
 8006818:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_39CYCLES_5;
 800681a:	4b3e      	ldr	r3, [pc, #248]	; (8006914 <MX_ADC_Init+0x128>)
 800681c:	2205      	movs	r2, #5
 800681e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8006820:	4b3c      	ldr	r3, [pc, #240]	; (8006914 <MX_ADC_Init+0x128>)
 8006822:	2201      	movs	r2, #1
 8006824:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006826:	4b3b      	ldr	r3, [pc, #236]	; (8006914 <MX_ADC_Init+0x128>)
 8006828:	2200      	movs	r2, #0
 800682a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 800682c:	4b39      	ldr	r3, [pc, #228]	; (8006914 <MX_ADC_Init+0x128>)
 800682e:	2220      	movs	r2, #32
 8006830:	2101      	movs	r1, #1
 8006832:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8006834:	4b37      	ldr	r3, [pc, #220]	; (8006914 <MX_ADC_Init+0x128>)
 8006836:	2221      	movs	r2, #33	; 0x21
 8006838:	2100      	movs	r1, #0
 800683a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800683c:	4b35      	ldr	r3, [pc, #212]	; (8006914 <MX_ADC_Init+0x128>)
 800683e:	2200      	movs	r2, #0
 8006840:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006842:	4b34      	ldr	r3, [pc, #208]	; (8006914 <MX_ADC_Init+0x128>)
 8006844:	22c2      	movs	r2, #194	; 0xc2
 8006846:	32ff      	adds	r2, #255	; 0xff
 8006848:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 800684a:	4b32      	ldr	r3, [pc, #200]	; (8006914 <MX_ADC_Init+0x128>)
 800684c:	222c      	movs	r2, #44	; 0x2c
 800684e:	2101      	movs	r1, #1
 8006850:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8006852:	4b30      	ldr	r3, [pc, #192]	; (8006914 <MX_ADC_Init+0x128>)
 8006854:	2208      	movs	r2, #8
 8006856:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006858:	4b2e      	ldr	r3, [pc, #184]	; (8006914 <MX_ADC_Init+0x128>)
 800685a:	2280      	movs	r2, #128	; 0x80
 800685c:	0152      	lsls	r2, r2, #5
 800685e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8006860:	4b2c      	ldr	r3, [pc, #176]	; (8006914 <MX_ADC_Init+0x128>)
 8006862:	2200      	movs	r2, #0
 8006864:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8006866:	4b2b      	ldr	r3, [pc, #172]	; (8006914 <MX_ADC_Init+0x128>)
 8006868:	2200      	movs	r2, #0
 800686a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800686c:	4b29      	ldr	r3, [pc, #164]	; (8006914 <MX_ADC_Init+0x128>)
 800686e:	2200      	movs	r2, #0
 8006870:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8006872:	4b28      	ldr	r3, [pc, #160]	; (8006914 <MX_ADC_Init+0x128>)
 8006874:	0018      	movs	r0, r3
 8006876:	f7fb fa01 	bl	8001c7c <HAL_ADC_Init>
 800687a:	1e03      	subs	r3, r0, #0
 800687c:	d001      	beq.n	8006882 <MX_ADC_Init+0x96>
  {
    Error_Handler();
 800687e:	f000 f9fb 	bl	8006c78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8006882:	003b      	movs	r3, r7
 8006884:	2201      	movs	r2, #1
 8006886:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006888:	003b      	movs	r3, r7
 800688a:	2280      	movs	r2, #128	; 0x80
 800688c:	0152      	lsls	r2, r2, #5
 800688e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006890:	003a      	movs	r2, r7
 8006892:	4b20      	ldr	r3, [pc, #128]	; (8006914 <MX_ADC_Init+0x128>)
 8006894:	0011      	movs	r1, r2
 8006896:	0018      	movs	r0, r3
 8006898:	f7fb fcc2 	bl	8002220 <HAL_ADC_ConfigChannel>
 800689c:	1e03      	subs	r3, r0, #0
 800689e:	d001      	beq.n	80068a4 <MX_ADC_Init+0xb8>
  {
    Error_Handler();
 80068a0:	f000 f9ea 	bl	8006c78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80068a4:	003b      	movs	r3, r7
 80068a6:	4a1d      	ldr	r2, [pc, #116]	; (800691c <MX_ADC_Init+0x130>)
 80068a8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80068aa:	003a      	movs	r2, r7
 80068ac:	4b19      	ldr	r3, [pc, #100]	; (8006914 <MX_ADC_Init+0x128>)
 80068ae:	0011      	movs	r1, r2
 80068b0:	0018      	movs	r0, r3
 80068b2:	f7fb fcb5 	bl	8002220 <HAL_ADC_ConfigChannel>
 80068b6:	1e03      	subs	r3, r0, #0
 80068b8:	d001      	beq.n	80068be <MX_ADC_Init+0xd2>
  {
    Error_Handler();
 80068ba:	f000 f9dd 	bl	8006c78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80068be:	003b      	movs	r3, r7
 80068c0:	4a17      	ldr	r2, [pc, #92]	; (8006920 <MX_ADC_Init+0x134>)
 80068c2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80068c4:	003a      	movs	r2, r7
 80068c6:	4b13      	ldr	r3, [pc, #76]	; (8006914 <MX_ADC_Init+0x128>)
 80068c8:	0011      	movs	r1, r2
 80068ca:	0018      	movs	r0, r3
 80068cc:	f7fb fca8 	bl	8002220 <HAL_ADC_ConfigChannel>
 80068d0:	1e03      	subs	r3, r0, #0
 80068d2:	d001      	beq.n	80068d8 <MX_ADC_Init+0xec>
  {
    Error_Handler();
 80068d4:	f000 f9d0 	bl	8006c78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80068d8:	003b      	movs	r3, r7
 80068da:	4a12      	ldr	r2, [pc, #72]	; (8006924 <MX_ADC_Init+0x138>)
 80068dc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80068de:	003a      	movs	r2, r7
 80068e0:	4b0c      	ldr	r3, [pc, #48]	; (8006914 <MX_ADC_Init+0x128>)
 80068e2:	0011      	movs	r1, r2
 80068e4:	0018      	movs	r0, r3
 80068e6:	f7fb fc9b 	bl	8002220 <HAL_ADC_ConfigChannel>
 80068ea:	1e03      	subs	r3, r0, #0
 80068ec:	d001      	beq.n	80068f2 <MX_ADC_Init+0x106>
  {
    Error_Handler();
 80068ee:	f000 f9c3 	bl	8006c78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80068f2:	003b      	movs	r3, r7
 80068f4:	4a0c      	ldr	r2, [pc, #48]	; (8006928 <MX_ADC_Init+0x13c>)
 80068f6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80068f8:	003a      	movs	r2, r7
 80068fa:	4b06      	ldr	r3, [pc, #24]	; (8006914 <MX_ADC_Init+0x128>)
 80068fc:	0011      	movs	r1, r2
 80068fe:	0018      	movs	r0, r3
 8006900:	f7fb fc8e 	bl	8002220 <HAL_ADC_ConfigChannel>
 8006904:	1e03      	subs	r3, r0, #0
 8006906:	d001      	beq.n	800690c <MX_ADC_Init+0x120>
  {
    Error_Handler();
 8006908:	f000 f9b6 	bl	8006c78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800690c:	46c0      	nop			; (mov r8, r8)
 800690e:	46bd      	mov	sp, r7
 8006910:	b002      	add	sp, #8
 8006912:	bd80      	pop	{r7, pc}
 8006914:	20001064 	.word	0x20001064
 8006918:	40012400 	.word	0x40012400
 800691c:	04000002 	.word	0x04000002
 8006920:	08000004 	.word	0x08000004
 8006924:	0c000008 	.word	0x0c000008
 8006928:	10000010 	.word	0x10000010

0800692c <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM21_Init(void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006932:	2308      	movs	r3, #8
 8006934:	18fb      	adds	r3, r7, r3
 8006936:	0018      	movs	r0, r3
 8006938:	2310      	movs	r3, #16
 800693a:	001a      	movs	r2, r3
 800693c:	2100      	movs	r1, #0
 800693e:	f000 fe8a 	bl	8007656 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006942:	003b      	movs	r3, r7
 8006944:	0018      	movs	r0, r3
 8006946:	2308      	movs	r3, #8
 8006948:	001a      	movs	r2, r3
 800694a:	2100      	movs	r1, #0
 800694c:	f000 fe83 	bl	8007656 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8006950:	4b1e      	ldr	r3, [pc, #120]	; (80069cc <MX_TIM21_Init+0xa0>)
 8006952:	4a1f      	ldr	r2, [pc, #124]	; (80069d0 <MX_TIM21_Init+0xa4>)
 8006954:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 32000-1;
 8006956:	4b1d      	ldr	r3, [pc, #116]	; (80069cc <MX_TIM21_Init+0xa0>)
 8006958:	4a1e      	ldr	r2, [pc, #120]	; (80069d4 <MX_TIM21_Init+0xa8>)
 800695a:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 800695c:	4b1b      	ldr	r3, [pc, #108]	; (80069cc <MX_TIM21_Init+0xa0>)
 800695e:	2200      	movs	r2, #0
 8006960:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 100-1;
 8006962:	4b1a      	ldr	r3, [pc, #104]	; (80069cc <MX_TIM21_Init+0xa0>)
 8006964:	2263      	movs	r2, #99	; 0x63
 8006966:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006968:	4b18      	ldr	r3, [pc, #96]	; (80069cc <MX_TIM21_Init+0xa0>)
 800696a:	2200      	movs	r2, #0
 800696c:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800696e:	4b17      	ldr	r3, [pc, #92]	; (80069cc <MX_TIM21_Init+0xa0>)
 8006970:	2280      	movs	r2, #128	; 0x80
 8006972:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8006974:	4b15      	ldr	r3, [pc, #84]	; (80069cc <MX_TIM21_Init+0xa0>)
 8006976:	0018      	movs	r0, r3
 8006978:	f7fc ffd8 	bl	800392c <HAL_TIM_Base_Init>
 800697c:	1e03      	subs	r3, r0, #0
 800697e:	d001      	beq.n	8006984 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8006980:	f000 f97a 	bl	8006c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006984:	2108      	movs	r1, #8
 8006986:	187b      	adds	r3, r7, r1
 8006988:	2280      	movs	r2, #128	; 0x80
 800698a:	0152      	lsls	r2, r2, #5
 800698c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 800698e:	187a      	adds	r2, r7, r1
 8006990:	4b0e      	ldr	r3, [pc, #56]	; (80069cc <MX_TIM21_Init+0xa0>)
 8006992:	0011      	movs	r1, r2
 8006994:	0018      	movs	r0, r3
 8006996:	f7fd f921 	bl	8003bdc <HAL_TIM_ConfigClockSource>
 800699a:	1e03      	subs	r3, r0, #0
 800699c:	d001      	beq.n	80069a2 <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 800699e:	f000 f96b 	bl	8006c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80069a2:	003b      	movs	r3, r7
 80069a4:	2200      	movs	r2, #0
 80069a6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80069a8:	003b      	movs	r3, r7
 80069aa:	2200      	movs	r2, #0
 80069ac:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80069ae:	003a      	movs	r2, r7
 80069b0:	4b06      	ldr	r3, [pc, #24]	; (80069cc <MX_TIM21_Init+0xa0>)
 80069b2:	0011      	movs	r1, r2
 80069b4:	0018      	movs	r0, r3
 80069b6:	f7fd fae7 	bl	8003f88 <HAL_TIMEx_MasterConfigSynchronization>
 80069ba:	1e03      	subs	r3, r0, #0
 80069bc:	d001      	beq.n	80069c2 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 80069be:	f000 f95b 	bl	8006c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 80069c2:	46c0      	nop			; (mov r8, r8)
 80069c4:	46bd      	mov	sp, r7
 80069c6:	b006      	add	sp, #24
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	46c0      	nop			; (mov r8, r8)
 80069cc:	200010c0 	.word	0x200010c0
 80069d0:	40010800 	.word	0x40010800
 80069d4:	00007cff 	.word	0x00007cff

080069d8 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM22_Init(void)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80069de:	2308      	movs	r3, #8
 80069e0:	18fb      	adds	r3, r7, r3
 80069e2:	0018      	movs	r0, r3
 80069e4:	2310      	movs	r3, #16
 80069e6:	001a      	movs	r2, r3
 80069e8:	2100      	movs	r1, #0
 80069ea:	f000 fe34 	bl	8007656 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80069ee:	003b      	movs	r3, r7
 80069f0:	0018      	movs	r0, r3
 80069f2:	2308      	movs	r3, #8
 80069f4:	001a      	movs	r2, r3
 80069f6:	2100      	movs	r1, #0
 80069f8:	f000 fe2d 	bl	8007656 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 80069fc:	4b20      	ldr	r3, [pc, #128]	; (8006a80 <MX_TIM22_Init+0xa8>)
 80069fe:	4a21      	ldr	r2, [pc, #132]	; (8006a84 <MX_TIM22_Init+0xac>)
 8006a00:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 32-1;
 8006a02:	4b1f      	ldr	r3, [pc, #124]	; (8006a80 <MX_TIM22_Init+0xa8>)
 8006a04:	221f      	movs	r2, #31
 8006a06:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a08:	4b1d      	ldr	r3, [pc, #116]	; (8006a80 <MX_TIM22_Init+0xa8>)
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 0xFFFF-1;
 8006a0e:	4b1c      	ldr	r3, [pc, #112]	; (8006a80 <MX_TIM22_Init+0xa8>)
 8006a10:	4a1d      	ldr	r2, [pc, #116]	; (8006a88 <MX_TIM22_Init+0xb0>)
 8006a12:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a14:	4b1a      	ldr	r3, [pc, #104]	; (8006a80 <MX_TIM22_Init+0xa8>)
 8006a16:	2200      	movs	r2, #0
 8006a18:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a1a:	4b19      	ldr	r3, [pc, #100]	; (8006a80 <MX_TIM22_Init+0xa8>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8006a20:	4b17      	ldr	r3, [pc, #92]	; (8006a80 <MX_TIM22_Init+0xa8>)
 8006a22:	0018      	movs	r0, r3
 8006a24:	f7fc ff82 	bl	800392c <HAL_TIM_Base_Init>
 8006a28:	1e03      	subs	r3, r0, #0
 8006a2a:	d001      	beq.n	8006a30 <MX_TIM22_Init+0x58>
  {
    Error_Handler();
 8006a2c:	f000 f924 	bl	8006c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006a30:	2108      	movs	r1, #8
 8006a32:	187b      	adds	r3, r7, r1
 8006a34:	2280      	movs	r2, #128	; 0x80
 8006a36:	0152      	lsls	r2, r2, #5
 8006a38:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8006a3a:	187a      	adds	r2, r7, r1
 8006a3c:	4b10      	ldr	r3, [pc, #64]	; (8006a80 <MX_TIM22_Init+0xa8>)
 8006a3e:	0011      	movs	r1, r2
 8006a40:	0018      	movs	r0, r3
 8006a42:	f7fd f8cb 	bl	8003bdc <HAL_TIM_ConfigClockSource>
 8006a46:	1e03      	subs	r3, r0, #0
 8006a48:	d001      	beq.n	8006a4e <MX_TIM22_Init+0x76>
  {
    Error_Handler();
 8006a4a:	f000 f915 	bl	8006c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a4e:	003b      	movs	r3, r7
 8006a50:	2200      	movs	r2, #0
 8006a52:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a54:	003b      	movs	r3, r7
 8006a56:	2200      	movs	r2, #0
 8006a58:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8006a5a:	003a      	movs	r2, r7
 8006a5c:	4b08      	ldr	r3, [pc, #32]	; (8006a80 <MX_TIM22_Init+0xa8>)
 8006a5e:	0011      	movs	r1, r2
 8006a60:	0018      	movs	r0, r3
 8006a62:	f7fd fa91 	bl	8003f88 <HAL_TIMEx_MasterConfigSynchronization>
 8006a66:	1e03      	subs	r3, r0, #0
 8006a68:	d001      	beq.n	8006a6e <MX_TIM22_Init+0x96>
  {
    Error_Handler();
 8006a6a:	f000 f905 	bl	8006c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */
  HAL_TIM_Base_Start(&htim22);
 8006a6e:	4b04      	ldr	r3, [pc, #16]	; (8006a80 <MX_TIM22_Init+0xa8>)
 8006a70:	0018      	movs	r0, r3
 8006a72:	f7fc ff87 	bl	8003984 <HAL_TIM_Base_Start>
  /* USER CODE END TIM22_Init 2 */

}
 8006a76:	46c0      	nop			; (mov r8, r8)
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	b006      	add	sp, #24
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	46c0      	nop			; (mov r8, r8)
 8006a80:	20000fe0 	.word	0x20000fe0
 8006a84:	40011400 	.word	0x40011400
 8006a88:	0000fffe 	.word	0x0000fffe

08006a8c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006a92:	4b0c      	ldr	r3, [pc, #48]	; (8006ac4 <MX_DMA_Init+0x38>)
 8006a94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a96:	4b0b      	ldr	r3, [pc, #44]	; (8006ac4 <MX_DMA_Init+0x38>)
 8006a98:	2101      	movs	r1, #1
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	631a      	str	r2, [r3, #48]	; 0x30
 8006a9e:	4b09      	ldr	r3, [pc, #36]	; (8006ac4 <MX_DMA_Init+0x38>)
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	607b      	str	r3, [r7, #4]
 8006aa8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8006aaa:	2200      	movs	r2, #0
 8006aac:	2103      	movs	r1, #3
 8006aae:	2009      	movs	r0, #9
 8006ab0:	f7fb fdc2 	bl	8002638 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006ab4:	2009      	movs	r0, #9
 8006ab6:	f7fb fdd4 	bl	8002662 <HAL_NVIC_EnableIRQ>

}
 8006aba:	46c0      	nop			; (mov r8, r8)
 8006abc:	46bd      	mov	sp, r7
 8006abe:	b002      	add	sp, #8
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	46c0      	nop			; (mov r8, r8)
 8006ac4:	40021000 	.word	0x40021000

08006ac8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8006ac8:	b590      	push	{r4, r7, lr}
 8006aca:	b089      	sub	sp, #36	; 0x24
 8006acc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ace:	240c      	movs	r4, #12
 8006ad0:	193b      	adds	r3, r7, r4
 8006ad2:	0018      	movs	r0, r3
 8006ad4:	2314      	movs	r3, #20
 8006ad6:	001a      	movs	r2, r3
 8006ad8:	2100      	movs	r1, #0
 8006ada:	f000 fdbc 	bl	8007656 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ade:	4b45      	ldr	r3, [pc, #276]	; (8006bf4 <MX_GPIO_Init+0x12c>)
 8006ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae2:	4b44      	ldr	r3, [pc, #272]	; (8006bf4 <MX_GPIO_Init+0x12c>)
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	62da      	str	r2, [r3, #44]	; 0x2c
 8006aea:	4b42      	ldr	r3, [pc, #264]	; (8006bf4 <MX_GPIO_Init+0x12c>)
 8006aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aee:	2201      	movs	r2, #1
 8006af0:	4013      	ands	r3, r2
 8006af2:	60bb      	str	r3, [r7, #8]
 8006af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006af6:	4b3f      	ldr	r3, [pc, #252]	; (8006bf4 <MX_GPIO_Init+0x12c>)
 8006af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006afa:	4b3e      	ldr	r3, [pc, #248]	; (8006bf4 <MX_GPIO_Init+0x12c>)
 8006afc:	2102      	movs	r1, #2
 8006afe:	430a      	orrs	r2, r1
 8006b00:	62da      	str	r2, [r3, #44]	; 0x2c
 8006b02:	4b3c      	ldr	r3, [pc, #240]	; (8006bf4 <MX_GPIO_Init+0x12c>)
 8006b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b06:	2202      	movs	r2, #2
 8006b08:	4013      	ands	r3, r2
 8006b0a:	607b      	str	r3, [r7, #4]
 8006b0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8006b0e:	4b3a      	ldr	r3, [pc, #232]	; (8006bf8 <MX_GPIO_Init+0x130>)
 8006b10:	2201      	movs	r2, #1
 8006b12:	2101      	movs	r1, #1
 8006b14:	0018      	movs	r0, r3
 8006b16:	f7fc f90a 	bl	8002d2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_CTRL_Pin|CHR_CTRL_Pin, GPIO_PIN_RESET);
 8006b1a:	4b37      	ldr	r3, [pc, #220]	; (8006bf8 <MX_GPIO_Init+0x130>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	210a      	movs	r1, #10
 8006b20:	0018      	movs	r0, r3
 8006b22:	f7fc f904 	bl	8002d2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VMON_CLK_GPIO_Port, VMON_CLK_Pin, GPIO_PIN_RESET);
 8006b26:	2380      	movs	r3, #128	; 0x80
 8006b28:	0219      	lsls	r1, r3, #8
 8006b2a:	23a0      	movs	r3, #160	; 0xa0
 8006b2c:	05db      	lsls	r3, r3, #23
 8006b2e:	2200      	movs	r2, #0
 8006b30:	0018      	movs	r0, r3
 8006b32:	f7fc f8fc 	bl	8002d2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8006b36:	193b      	adds	r3, r7, r4
 8006b38:	2201      	movs	r2, #1
 8006b3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b3c:	193b      	adds	r3, r7, r4
 8006b3e:	2201      	movs	r2, #1
 8006b40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b42:	193b      	adds	r3, r7, r4
 8006b44:	2200      	movs	r2, #0
 8006b46:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b48:	193b      	adds	r3, r7, r4
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8006b4e:	193b      	adds	r3, r7, r4
 8006b50:	4a29      	ldr	r2, [pc, #164]	; (8006bf8 <MX_GPIO_Init+0x130>)
 8006b52:	0019      	movs	r1, r3
 8006b54:	0010      	movs	r0, r2
 8006b56:	f7fb ff4f 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_CTRL_Pin CHR_CTRL_Pin */
  GPIO_InitStruct.Pin = LED_CTRL_Pin|CHR_CTRL_Pin;
 8006b5a:	193b      	adds	r3, r7, r4
 8006b5c:	220a      	movs	r2, #10
 8006b5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b60:	193b      	adds	r3, r7, r4
 8006b62:	2201      	movs	r2, #1
 8006b64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006b66:	193b      	adds	r3, r7, r4
 8006b68:	2202      	movs	r2, #2
 8006b6a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b6c:	193b      	adds	r3, r7, r4
 8006b6e:	2200      	movs	r2, #0
 8006b70:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b72:	193b      	adds	r3, r7, r4
 8006b74:	4a20      	ldr	r2, [pc, #128]	; (8006bf8 <MX_GPIO_Init+0x130>)
 8006b76:	0019      	movs	r1, r3
 8006b78:	0010      	movs	r0, r2
 8006b7a:	f7fb ff3d 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_IND_Pin */
  GPIO_InitStruct.Pin = LED_IND_Pin;
 8006b7e:	193b      	adds	r3, r7, r4
 8006b80:	2280      	movs	r2, #128	; 0x80
 8006b82:	0052      	lsls	r2, r2, #1
 8006b84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b86:	193b      	adds	r3, r7, r4
 8006b88:	2200      	movs	r2, #0
 8006b8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b8c:	193b      	adds	r3, r7, r4
 8006b8e:	2200      	movs	r2, #0
 8006b90:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LED_IND_GPIO_Port, &GPIO_InitStruct);
 8006b92:	193a      	adds	r2, r7, r4
 8006b94:	23a0      	movs	r3, #160	; 0xa0
 8006b96:	05db      	lsls	r3, r3, #23
 8006b98:	0011      	movs	r1, r2
 8006b9a:	0018      	movs	r0, r3
 8006b9c:	f7fb ff2c 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VMON_CLK_Pin */
  GPIO_InitStruct.Pin = VMON_CLK_Pin;
 8006ba0:	0021      	movs	r1, r4
 8006ba2:	187b      	adds	r3, r7, r1
 8006ba4:	2280      	movs	r2, #128	; 0x80
 8006ba6:	0212      	lsls	r2, r2, #8
 8006ba8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006baa:	187b      	adds	r3, r7, r1
 8006bac:	2201      	movs	r2, #1
 8006bae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bb0:	187b      	adds	r3, r7, r1
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bb6:	187b      	adds	r3, r7, r1
 8006bb8:	2200      	movs	r2, #0
 8006bba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(VMON_CLK_GPIO_Port, &GPIO_InitStruct);
 8006bbc:	000c      	movs	r4, r1
 8006bbe:	187a      	adds	r2, r7, r1
 8006bc0:	23a0      	movs	r3, #160	; 0xa0
 8006bc2:	05db      	lsls	r3, r3, #23
 8006bc4:	0011      	movs	r1, r2
 8006bc6:	0018      	movs	r0, r3
 8006bc8:	f7fb ff16 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STAT2_Pin STAT1_Pin */
  GPIO_InitStruct.Pin = STAT2_Pin|STAT1_Pin;
 8006bcc:	193b      	adds	r3, r7, r4
 8006bce:	2230      	movs	r2, #48	; 0x30
 8006bd0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bd2:	193b      	adds	r3, r7, r4
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006bd8:	193b      	adds	r3, r7, r4
 8006bda:	2201      	movs	r2, #1
 8006bdc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bde:	193b      	adds	r3, r7, r4
 8006be0:	4a05      	ldr	r2, [pc, #20]	; (8006bf8 <MX_GPIO_Init+0x130>)
 8006be2:	0019      	movs	r1, r3
 8006be4:	0010      	movs	r0, r2
 8006be6:	f7fb ff07 	bl	80029f8 <HAL_GPIO_Init>

}
 8006bea:	46c0      	nop			; (mov r8, r8)
 8006bec:	46bd      	mov	sp, r7
 8006bee:	b009      	add	sp, #36	; 0x24
 8006bf0:	bd90      	pop	{r4, r7, pc}
 8006bf2:	46c0      	nop			; (mov r8, r8)
 8006bf4:	40021000 	.word	0x40021000
 8006bf8:	50000400 	.word	0x50000400

08006bfc <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	uint32_t intensity_test = 0;
 8006c04:	2300      	movs	r3, #0
 8006c06:	60fb      	str	r3, [r7, #12]

	intensity_test = 2;
 8006c08:	2302      	movs	r3, #2
 8006c0a:	60fb      	str	r3, [r7, #12]
	osMessagePut(ind_msg, intensity_test, osWaitForever);
 8006c0c:	4b05      	ldr	r3, [pc, #20]	; (8006c24 <StartDefaultTask+0x28>)
 8006c0e:	6818      	ldr	r0, [r3, #0]
 8006c10:	2301      	movs	r3, #1
 8006c12:	425a      	negs	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	0019      	movs	r1, r3
 8006c18:	f7fd fb44 	bl	80042a4 <osMessagePut>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8006c1c:	2001      	movs	r0, #1
 8006c1e:	f7fd fa72 	bl	8004106 <osDelay>
 8006c22:	e7fb      	b.n	8006c1c <StartDefaultTask+0x20>
 8006c24:	20000fd0 	.word	0x20000fd0

08006c28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	2380      	movs	r3, #128	; 0x80
 8006c36:	05db      	lsls	r3, r3, #23
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d101      	bne.n	8006c40 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8006c3c:	f7fb f808 	bl	8001c50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM21)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a0a      	ldr	r2, [pc, #40]	; (8006c70 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d10d      	bne.n	8006c66 <HAL_TIM_PeriodElapsedCallback+0x3e>
  {
	  HAL_GPIO_TogglePin(VMON_CLK_GPIO_Port, VMON_CLK_Pin);
 8006c4a:	2380      	movs	r3, #128	; 0x80
 8006c4c:	021a      	lsls	r2, r3, #8
 8006c4e:	23a0      	movs	r3, #160	; 0xa0
 8006c50:	05db      	lsls	r3, r3, #23
 8006c52:	0011      	movs	r1, r2
 8006c54:	0018      	movs	r0, r3
 8006c56:	f7fc f887 	bl	8002d68 <HAL_GPIO_TogglePin>
	  osSignalSet (MonitorTaskHandle, 0x00000001);
 8006c5a:	4b06      	ldr	r3, [pc, #24]	; (8006c74 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2101      	movs	r1, #1
 8006c60:	0018      	movs	r0, r3
 8006c62:	f7fd fa65 	bl	8004130 <osSignalSet>
  }

  /* USER CODE END Callback 1 */
}
 8006c66:	46c0      	nop			; (mov r8, r8)
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	b002      	add	sp, #8
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	46c0      	nop			; (mov r8, r8)
 8006c70:	40010800 	.word	0x40010800
 8006c74:	20001130 	.word	0x20001130

08006c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006c7c:	46c0      	nop			; (mov r8, r8)
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
	...

08006c84 <ManagementTask>:
#include "indication_task.h"

osThreadId ManagementTaskHandle;

void ManagementTask(void const * argument)
{
 8006c84:	b590      	push	{r4, r7, lr}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
	ch_state_t ch_status = UNKNOWN;
 8006c8c:	230f      	movs	r3, #15
 8006c8e:	18fb      	adds	r3, r7, r3
 8006c90:	2202      	movs	r2, #2
 8006c92:	701a      	strb	r2, [r3, #0]
	static _Bool battery_charged = 0;
	static int32_t max_idle_current = 0;

	for(;;)
	{
		osDelay(1000);
 8006c94:	23fa      	movs	r3, #250	; 0xfa
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	0018      	movs	r0, r3
 8006c9a:	f7fd fa34 	bl	8004106 <osDelay>

		/*Check if it is a day time*/
		if(storage.vinput_mv+VINPUT_HYS > VINPUT_LIMIT)
 8006c9e:	4b8d      	ldr	r3, [pc, #564]	; (8006ed4 <ManagementTask+0x250>)
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	3364      	adds	r3, #100	; 0x64
 8006ca4:	001a      	movs	r2, r3
 8006ca6:	23fa      	movs	r3, #250	; 0xfa
 8006ca8:	015b      	lsls	r3, r3, #5
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d961      	bls.n	8006d72 <ManagementTask+0xee>
		{
			/*If input is more than MPPT, enable charger*/
			if(storage.vinput_mv+VINPUT_HYS > MPPT_MV)
 8006cae:	4b89      	ldr	r3, [pc, #548]	; (8006ed4 <ManagementTask+0x250>)
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	3364      	adds	r3, #100	; 0x64
 8006cb4:	4a88      	ldr	r2, [pc, #544]	; (8006ed8 <ManagementTask+0x254>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d949      	bls.n	8006d4e <ManagementTask+0xca>
			{
				charger_enable();
 8006cba:	f000 f925 	bl	8006f08 <charger_enable>
				osDelay(5000);
 8006cbe:	4b87      	ldr	r3, [pc, #540]	; (8006edc <ManagementTask+0x258>)
 8006cc0:	0018      	movs	r0, r3
 8006cc2:	f7fd fa20 	bl	8004106 <osDelay>
				ch_status = charger_status();
 8006cc6:	230f      	movs	r3, #15
 8006cc8:	18fc      	adds	r4, r7, r3
 8006cca:	f000 f939 	bl	8006f40 <charger_status>
 8006cce:	0003      	movs	r3, r0
 8006cd0:	7023      	strb	r3, [r4, #0]

				while(ch_status == IN_PROGRESS)
 8006cd2:	e012      	b.n	8006cfa <ManagementTask+0x76>
				{
					osDelay(1000);
 8006cd4:	23fa      	movs	r3, #250	; 0xfa
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	0018      	movs	r0, r3
 8006cda:	f7fd fa14 	bl	8004106 <osDelay>
					osMessagePut(ind_msg, IND_RED, osWaitForever);
 8006cde:	4b80      	ldr	r3, [pc, #512]	; (8006ee0 <ManagementTask+0x25c>)
 8006ce0:	6818      	ldr	r0, [r3, #0]
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	425b      	negs	r3, r3
 8006ce6:	001a      	movs	r2, r3
 8006ce8:	2102      	movs	r1, #2
 8006cea:	f7fd fadb 	bl	80042a4 <osMessagePut>
					ch_status = charger_status();
 8006cee:	230f      	movs	r3, #15
 8006cf0:	18fc      	adds	r4, r7, r3
 8006cf2:	f000 f925 	bl	8006f40 <charger_status>
 8006cf6:	0003      	movs	r3, r0
 8006cf8:	7023      	strb	r3, [r4, #0]
				while(ch_status == IN_PROGRESS)
 8006cfa:	230f      	movs	r3, #15
 8006cfc:	18fb      	adds	r3, r7, r3
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	b25b      	sxtb	r3, r3
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d0e6      	beq.n	8006cd4 <ManagementTask+0x50>
				}

				if(ch_status == COMPLETED)
 8006d06:	230f      	movs	r3, #15
 8006d08:	18fb      	adds	r3, r7, r3
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	b25b      	sxtb	r3, r3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10b      	bne.n	8006d2a <ManagementTask+0xa6>
				{
					battery_charged = 1;
 8006d12:	4b74      	ldr	r3, [pc, #464]	; (8006ee4 <ManagementTask+0x260>)
 8006d14:	2201      	movs	r2, #1
 8006d16:	701a      	strb	r2, [r3, #0]
					osMessagePut(ind_msg, IND_GREEN, osWaitForever);
 8006d18:	4b71      	ldr	r3, [pc, #452]	; (8006ee0 <ManagementTask+0x25c>)
 8006d1a:	6818      	ldr	r0, [r3, #0]
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	425b      	negs	r3, r3
 8006d20:	001a      	movs	r2, r3
 8006d22:	2101      	movs	r1, #1
 8006d24:	f7fd fabe 	bl	80042a4 <osMessagePut>
 8006d28:	e0ae      	b.n	8006e88 <ManagementTask+0x204>
				}
				else
				{
					osMessagePut(ind_msg, IND_OFF, osWaitForever);
 8006d2a:	4b6d      	ldr	r3, [pc, #436]	; (8006ee0 <ManagementTask+0x25c>)
 8006d2c:	6818      	ldr	r0, [r3, #0]
 8006d2e:	2301      	movs	r3, #1
 8006d30:	425b      	negs	r3, r3
 8006d32:	001a      	movs	r2, r3
 8006d34:	2100      	movs	r1, #0
 8006d36:	f7fd fab5 	bl	80042a4 <osMessagePut>
					if(storage.vbatt_mv < FULL_BATT_MV)
 8006d3a:	4b66      	ldr	r3, [pc, #408]	; (8006ed4 <ManagementTask+0x250>)
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	4a6a      	ldr	r2, [pc, #424]	; (8006ee8 <ManagementTask+0x264>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d900      	bls.n	8006d46 <ManagementTask+0xc2>
 8006d44:	e0a0      	b.n	8006e88 <ManagementTask+0x204>
					{
						battery_charged = 0;
 8006d46:	4b67      	ldr	r3, [pc, #412]	; (8006ee4 <ManagementTask+0x260>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	701a      	strb	r2, [r3, #0]
 8006d4c:	e09c      	b.n	8006e88 <ManagementTask+0x204>
					}
				}

			}
			/*If input is less than MPPT, disable charger*/
			else if(storage.vinput_mv-VINPUT_HYS < MPPT_MV)
 8006d4e:	4b61      	ldr	r3, [pc, #388]	; (8006ed4 <ManagementTask+0x250>)
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	3b64      	subs	r3, #100	; 0x64
 8006d54:	4a65      	ldr	r2, [pc, #404]	; (8006eec <ManagementTask+0x268>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d900      	bls.n	8006d5c <ManagementTask+0xd8>
 8006d5a:	e095      	b.n	8006e88 <ManagementTask+0x204>
			{
				charger_disable();
 8006d5c:	f000 f8e2 	bl	8006f24 <charger_disable>
				osMessagePut(ind_msg, IND_OFF, osWaitForever);
 8006d60:	4b5f      	ldr	r3, [pc, #380]	; (8006ee0 <ManagementTask+0x25c>)
 8006d62:	6818      	ldr	r0, [r3, #0]
 8006d64:	2301      	movs	r3, #1
 8006d66:	425b      	negs	r3, r3
 8006d68:	001a      	movs	r2, r3
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	f7fd fa9a 	bl	80042a4 <osMessagePut>
 8006d70:	e08a      	b.n	8006e88 <ManagementTask+0x204>
			}

		}
		/*Check if it is a night time*/
		else if(storage.vinput_mv-VINPUT_HYS < VINPUT_LIMIT)
 8006d72:	4b58      	ldr	r3, [pc, #352]	; (8006ed4 <ManagementTask+0x250>)
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	3b64      	subs	r3, #100	; 0x64
 8006d78:	4a5d      	ldr	r2, [pc, #372]	; (8006ef0 <ManagementTask+0x26c>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d900      	bls.n	8006d80 <ManagementTask+0xfc>
 8006d7e:	e083      	b.n	8006e88 <ManagementTask+0x204>
		{
			charger_disable();
 8006d80:	f000 f8d0 	bl	8006f24 <charger_disable>
			osMessagePut(ind_msg, IND_OFF, osWaitForever);
 8006d84:	4b56      	ldr	r3, [pc, #344]	; (8006ee0 <ManagementTask+0x25c>)
 8006d86:	6818      	ldr	r0, [r3, #0]
 8006d88:	2301      	movs	r3, #1
 8006d8a:	425b      	negs	r3, r3
 8006d8c:	001a      	movs	r2, r3
 8006d8e:	2100      	movs	r1, #0
 8006d90:	f7fd fa88 	bl	80042a4 <osMessagePut>

			/*Load the battery with LEDs*/
			if(battery_charged)
 8006d94:	4b53      	ldr	r3, [pc, #332]	; (8006ee4 <ManagementTask+0x260>)
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00d      	beq.n	8006db8 <ManagementTask+0x134>
			{
				load_setup(FULL_BATT_MAH, HOURS_24 - storage.daylength_s);
 8006d9c:	4b4d      	ldr	r3, [pc, #308]	; (8006ed4 <ManagementTask+0x250>)
 8006d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da0:	4a54      	ldr	r2, [pc, #336]	; (8006ef4 <ManagementTask+0x270>)
 8006da2:	1ad2      	subs	r2, r2, r3
 8006da4:	23c8      	movs	r3, #200	; 0xc8
 8006da6:	019b      	lsls	r3, r3, #6
 8006da8:	0011      	movs	r1, r2
 8006daa:	0018      	movs	r0, r3
 8006dac:	f000 f91a 	bl	8006fe4 <load_setup>
				storage.energy_released_mah = 0;
 8006db0:	4b48      	ldr	r3, [pc, #288]	; (8006ed4 <ManagementTask+0x250>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	625a      	str	r2, [r3, #36]	; 0x24
 8006db6:	e022      	b.n	8006dfe <ManagementTask+0x17a>
			}
			else
			{
				storage.energy_stored_mah = storage.energy_stored_mah - storage.energy_released_mah;
 8006db8:	4b46      	ldr	r3, [pc, #280]	; (8006ed4 <ManagementTask+0x250>)
 8006dba:	6a1a      	ldr	r2, [r3, #32]
 8006dbc:	4b45      	ldr	r3, [pc, #276]	; (8006ed4 <ManagementTask+0x250>)
 8006dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc0:	1c19      	adds	r1, r3, #0
 8006dc2:	1c10      	adds	r0, r2, #0
 8006dc4:	f7f9 fcfc 	bl	80007c0 <__aeabi_fsub>
 8006dc8:	1c03      	adds	r3, r0, #0
 8006dca:	1c1a      	adds	r2, r3, #0
 8006dcc:	4b41      	ldr	r3, [pc, #260]	; (8006ed4 <ManagementTask+0x250>)
 8006dce:	621a      	str	r2, [r3, #32]
				storage.energy_released_mah = 0;
 8006dd0:	4b40      	ldr	r3, [pc, #256]	; (8006ed4 <ManagementTask+0x250>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	625a      	str	r2, [r3, #36]	; 0x24
				if(storage.energy_stored_mah > 0)
 8006dd6:	4b3f      	ldr	r3, [pc, #252]	; (8006ed4 <ManagementTask+0x250>)
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	2100      	movs	r1, #0
 8006ddc:	1c18      	adds	r0, r3, #0
 8006dde:	f7f9 fa45 	bl	800026c <__aeabi_fcmpgt>
 8006de2:	1e03      	subs	r3, r0, #0
 8006de4:	d00b      	beq.n	8006dfe <ManagementTask+0x17a>
				{
					load_setup(storage.energy_stored_mah, HOURS_24 - storage.daylength_s);
 8006de6:	4b3b      	ldr	r3, [pc, #236]	; (8006ed4 <ManagementTask+0x250>)
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	1c18      	adds	r0, r3, #0
 8006dec:	f7f9 fa52 	bl	8000294 <__aeabi_f2uiz>
 8006df0:	4b38      	ldr	r3, [pc, #224]	; (8006ed4 <ManagementTask+0x250>)
 8006df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df4:	4a3f      	ldr	r2, [pc, #252]	; (8006ef4 <ManagementTask+0x270>)
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	0019      	movs	r1, r3
 8006dfa:	f000 f8f3 	bl	8006fe4 <load_setup>
				}
			}

			/*Discharge battery with LEDs*/
			osMessagePut(ind_msg, IND_RED, osWaitForever);
 8006dfe:	4b38      	ldr	r3, [pc, #224]	; (8006ee0 <ManagementTask+0x25c>)
 8006e00:	6818      	ldr	r0, [r3, #0]
 8006e02:	2301      	movs	r3, #1
 8006e04:	425b      	negs	r3, r3
 8006e06:	001a      	movs	r2, r3
 8006e08:	2102      	movs	r1, #2
 8006e0a:	f7fd fa4b 	bl	80042a4 <osMessagePut>
			while(1)
			{
				osDelay(1000);
 8006e0e:	23fa      	movs	r3, #250	; 0xfa
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	0018      	movs	r0, r3
 8006e14:	f7fd f977 	bl	8004106 <osDelay>

				/*Day time?*/
				if(storage.vinput_mv+VINPUT_HYS > VINPUT_LIMIT)
 8006e18:	4b2e      	ldr	r3, [pc, #184]	; (8006ed4 <ManagementTask+0x250>)
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	3364      	adds	r3, #100	; 0x64
 8006e1e:	001a      	movs	r2, r3
 8006e20:	23fa      	movs	r3, #250	; 0xfa
 8006e22:	015b      	lsls	r3, r3, #5
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d814      	bhi.n	8006e52 <ManagementTask+0x1ce>
				{
					break;
				}

				/*Low battery?*/
				if(storage.vbatt_mv < BATT_LOW_MV)
 8006e28:	4b2a      	ldr	r3, [pc, #168]	; (8006ed4 <ManagementTask+0x250>)
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	4a32      	ldr	r2, [pc, #200]	; (8006ef8 <ManagementTask+0x274>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d911      	bls.n	8006e56 <ManagementTask+0x1d2>
				{
					break;
				}

				/*Out of energy?*/
				if(storage.energy_stored_mah - storage.energy_released_mah < 0)
 8006e32:	4b28      	ldr	r3, [pc, #160]	; (8006ed4 <ManagementTask+0x250>)
 8006e34:	6a1a      	ldr	r2, [r3, #32]
 8006e36:	4b27      	ldr	r3, [pc, #156]	; (8006ed4 <ManagementTask+0x250>)
 8006e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3a:	1c19      	adds	r1, r3, #0
 8006e3c:	1c10      	adds	r0, r2, #0
 8006e3e:	f7f9 fcbf 	bl	80007c0 <__aeabi_fsub>
 8006e42:	1c03      	adds	r3, r0, #0
 8006e44:	2100      	movs	r1, #0
 8006e46:	1c18      	adds	r0, r3, #0
 8006e48:	f7f9 f9fc 	bl	8000244 <__aeabi_fcmplt>
 8006e4c:	1e03      	subs	r3, r0, #0
 8006e4e:	d104      	bne.n	8006e5a <ManagementTask+0x1d6>
				osDelay(1000);
 8006e50:	e7dd      	b.n	8006e0e <ManagementTask+0x18a>
					break;
 8006e52:	46c0      	nop			; (mov r8, r8)
 8006e54:	e002      	b.n	8006e5c <ManagementTask+0x1d8>
					break;
 8006e56:	46c0      	nop			; (mov r8, r8)
 8006e58:	e000      	b.n	8006e5c <ManagementTask+0x1d8>
				{
					break;
 8006e5a:	46c0      	nop			; (mov r8, r8)
				}
			}

			/*End discharge process*/
			battery_charged = 0;
 8006e5c:	4b21      	ldr	r3, [pc, #132]	; (8006ee4 <ManagementTask+0x260>)
 8006e5e:	2200      	movs	r2, #0
 8006e60:	701a      	strb	r2, [r3, #0]
			storage.daylength_s = 0;
 8006e62:	4b1c      	ldr	r3, [pc, #112]	; (8006ed4 <ManagementTask+0x250>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	62da      	str	r2, [r3, #44]	; 0x2c
			osMessagePut(led_msg, 0, osWaitForever);
 8006e68:	4b24      	ldr	r3, [pc, #144]	; (8006efc <ManagementTask+0x278>)
 8006e6a:	6818      	ldr	r0, [r3, #0]
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	425b      	negs	r3, r3
 8006e70:	001a      	movs	r2, r3
 8006e72:	2100      	movs	r1, #0
 8006e74:	f7fd fa16 	bl	80042a4 <osMessagePut>
			osMessagePut(ind_msg, IND_OFF, osWaitForever);
 8006e78:	4b19      	ldr	r3, [pc, #100]	; (8006ee0 <ManagementTask+0x25c>)
 8006e7a:	6818      	ldr	r0, [r3, #0]
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	425b      	negs	r3, r3
 8006e80:	001a      	movs	r2, r3
 8006e82:	2100      	movs	r1, #0
 8006e84:	f7fd fa0e 	bl	80042a4 <osMessagePut>
		}

		/*Energy bleed check in idle state*/
		if(battery_charged)
 8006e88:	4b16      	ldr	r3, [pc, #88]	; (8006ee4 <ManagementTask+0x260>)
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d100      	bne.n	8006e92 <ManagementTask+0x20e>
 8006e90:	e700      	b.n	8006c94 <ManagementTask+0x10>
		{
			if(storage.coutput_ma > max_idle_current)
 8006e92:	4b10      	ldr	r3, [pc, #64]	; (8006ed4 <ManagementTask+0x250>)
 8006e94:	69da      	ldr	r2, [r3, #28]
 8006e96:	4b1a      	ldr	r3, [pc, #104]	; (8006f00 <ManagementTask+0x27c>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	dd03      	ble.n	8006ea6 <ManagementTask+0x222>
			{
				max_idle_current = storage.coutput_ma;
 8006e9e:	4b0d      	ldr	r3, [pc, #52]	; (8006ed4 <ManagementTask+0x250>)
 8006ea0:	69da      	ldr	r2, [r3, #28]
 8006ea2:	4b17      	ldr	r3, [pc, #92]	; (8006f00 <ManagementTask+0x27c>)
 8006ea4:	601a      	str	r2, [r3, #0]
			}
			if(max_idle_current > IDLE_CURR_MA)
 8006ea6:	4b16      	ldr	r3, [pc, #88]	; (8006f00 <ManagementTask+0x27c>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b14      	cmp	r3, #20
 8006eac:	dd05      	ble.n	8006eba <ManagementTask+0x236>
			{
				max_idle_current = 0;
 8006eae:	4b14      	ldr	r3, [pc, #80]	; (8006f00 <ManagementTask+0x27c>)
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	601a      	str	r2, [r3, #0]
				battery_charged = 0;
 8006eb4:	4b0b      	ldr	r3, [pc, #44]	; (8006ee4 <ManagementTask+0x260>)
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	701a      	strb	r2, [r3, #0]
			}
			if(storage.energy_released_mah > IDLE_CURR_MAH)
 8006eba:	4b06      	ldr	r3, [pc, #24]	; (8006ed4 <ManagementTask+0x250>)
 8006ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebe:	4911      	ldr	r1, [pc, #68]	; (8006f04 <ManagementTask+0x280>)
 8006ec0:	1c18      	adds	r0, r3, #0
 8006ec2:	f7f9 f9d3 	bl	800026c <__aeabi_fcmpgt>
 8006ec6:	1e03      	subs	r3, r0, #0
 8006ec8:	d002      	beq.n	8006ed0 <ManagementTask+0x24c>
			{
				battery_charged = 0;
 8006eca:	4b06      	ldr	r3, [pc, #24]	; (8006ee4 <ManagementTask+0x260>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	701a      	strb	r2, [r3, #0]
		osDelay(1000);
 8006ed0:	e6e0      	b.n	8006c94 <ManagementTask+0x10>
 8006ed2:	46c0      	nop			; (mov r8, r8)
 8006ed4:	20001100 	.word	0x20001100
 8006ed8:	0000445c 	.word	0x0000445c
 8006edc:	00001388 	.word	0x00001388
 8006ee0:	20000fd0 	.word	0x20000fd0
 8006ee4:	20000fbc 	.word	0x20000fbc
 8006ee8:	00003137 	.word	0x00003137
 8006eec:	0000445b 	.word	0x0000445b
 8006ef0:	00001f3f 	.word	0x00001f3f
 8006ef4:	00015180 	.word	0x00015180
 8006ef8:	00002327 	.word	0x00002327
 8006efc:	20000fd8 	.word	0x20000fd8
 8006f00:	20000fc0 	.word	0x20000fc0
 8006f04:	42f00000 	.word	0x42f00000

08006f08 <charger_enable>:
		}
	}
}

void charger_enable(void)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CHR_CTRL_GPIO_Port, CHR_CTRL_Pin, GPIO_PIN_RESET);
 8006f0c:	4b04      	ldr	r3, [pc, #16]	; (8006f20 <charger_enable+0x18>)
 8006f0e:	2200      	movs	r2, #0
 8006f10:	2108      	movs	r1, #8
 8006f12:	0018      	movs	r0, r3
 8006f14:	f7fb ff0b 	bl	8002d2e <HAL_GPIO_WritePin>
}
 8006f18:	46c0      	nop			; (mov r8, r8)
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	46c0      	nop			; (mov r8, r8)
 8006f20:	50000400 	.word	0x50000400

08006f24 <charger_disable>:
void charger_disable(void)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CHR_CTRL_GPIO_Port, CHR_CTRL_Pin, GPIO_PIN_SET);
 8006f28:	4b04      	ldr	r3, [pc, #16]	; (8006f3c <charger_disable+0x18>)
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	2108      	movs	r1, #8
 8006f2e:	0018      	movs	r0, r3
 8006f30:	f7fb fefd 	bl	8002d2e <HAL_GPIO_WritePin>
}
 8006f34:	46c0      	nop			; (mov r8, r8)
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	46c0      	nop			; (mov r8, r8)
 8006f3c:	50000400 	.word	0x50000400

08006f40 <charger_status>:

ch_state_t charger_status(void)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
	_Bool stat1;
	_Bool stat2;

	/*Read STAT1 pin*/
	if(HAL_GPIO_ReadPin(STAT1_GPIO_Port, STAT1_Pin) == GPIO_PIN_RESET)
 8006f46:	4b26      	ldr	r3, [pc, #152]	; (8006fe0 <charger_status+0xa0>)
 8006f48:	2120      	movs	r1, #32
 8006f4a:	0018      	movs	r0, r3
 8006f4c:	f7fb fed2 	bl	8002cf4 <HAL_GPIO_ReadPin>
 8006f50:	1e03      	subs	r3, r0, #0
 8006f52:	d103      	bne.n	8006f5c <charger_status+0x1c>
		{stat1 = 1;}
 8006f54:	1dfb      	adds	r3, r7, #7
 8006f56:	2201      	movs	r2, #1
 8006f58:	701a      	strb	r2, [r3, #0]
 8006f5a:	e002      	b.n	8006f62 <charger_status+0x22>
	else
		{stat1 = 0;}
 8006f5c:	1dfb      	adds	r3, r7, #7
 8006f5e:	2200      	movs	r2, #0
 8006f60:	701a      	strb	r2, [r3, #0]

	/*Read STAT2 pin*/
	if(HAL_GPIO_ReadPin(STAT2_GPIO_Port, STAT2_Pin) == GPIO_PIN_RESET)
 8006f62:	4b1f      	ldr	r3, [pc, #124]	; (8006fe0 <charger_status+0xa0>)
 8006f64:	2110      	movs	r1, #16
 8006f66:	0018      	movs	r0, r3
 8006f68:	f7fb fec4 	bl	8002cf4 <HAL_GPIO_ReadPin>
 8006f6c:	1e03      	subs	r3, r0, #0
 8006f6e:	d103      	bne.n	8006f78 <charger_status+0x38>
		{stat2 = 1;}
 8006f70:	1dbb      	adds	r3, r7, #6
 8006f72:	2201      	movs	r2, #1
 8006f74:	701a      	strb	r2, [r3, #0]
 8006f76:	e002      	b.n	8006f7e <charger_status+0x3e>
	else
		{stat2 = 0;}
 8006f78:	1dbb      	adds	r3, r7, #6
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	701a      	strb	r2, [r3, #0]

	/*Decode logic*/
	if(stat1 && !stat2)
 8006f7e:	1dfb      	adds	r3, r7, #7
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d008      	beq.n	8006f98 <charger_status+0x58>
 8006f86:	1dbb      	adds	r3, r7, #6
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	4053      	eors	r3, r2
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d001      	beq.n	8006f98 <charger_status+0x58>
	{
		return IN_PROGRESS;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e01e      	b.n	8006fd6 <charger_status+0x96>
	}
	if(!stat1 && stat2)
 8006f98:	1dfb      	adds	r3, r7, #7
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	4053      	eors	r3, r2
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d005      	beq.n	8006fb2 <charger_status+0x72>
 8006fa6:	1dbb      	adds	r3, r7, #6
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d001      	beq.n	8006fb2 <charger_status+0x72>
	{
		return COMPLETED;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	e011      	b.n	8006fd6 <charger_status+0x96>
	}
	if(!stat1 && !stat2)
 8006fb2:	1dfb      	adds	r3, r7, #7
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	4053      	eors	r3, r2
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d009      	beq.n	8006fd4 <charger_status+0x94>
 8006fc0:	1dbb      	adds	r3, r7, #6
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	4053      	eors	r3, r2
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d002      	beq.n	8006fd4 <charger_status+0x94>
	{
		return INACTIVE;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	425b      	negs	r3, r3
 8006fd2:	e000      	b.n	8006fd6 <charger_status+0x96>
	}

	return UNKNOWN;
 8006fd4:	2302      	movs	r3, #2
}
 8006fd6:	0018      	movs	r0, r3
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	b002      	add	sp, #8
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	46c0      	nop			; (mov r8, r8)
 8006fe0:	50000400 	.word	0x50000400

08006fe4 <load_setup>:

uint32_t load_setup(uint32_t capacity, uint32_t nightitme)
{
 8006fe4:	b590      	push	{r4, r7, lr}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
	uint32_t intensity;
	uint32_t mAseconds;

	/*Full load if time is too short*/
	if(nightitme < MIN_NIGHT_DUR)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	4a2a      	ldr	r2, [pc, #168]	; (800709c <load_setup+0xb8>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d80b      	bhi.n	800700e <load_setup+0x2a>
	{
		intensity = 31;
 8006ff6:	231f      	movs	r3, #31
 8006ff8:	60fb      	str	r3, [r7, #12]
		osMessagePut(led_msg, intensity, osWaitForever);
 8006ffa:	4b29      	ldr	r3, [pc, #164]	; (80070a0 <load_setup+0xbc>)
 8006ffc:	6818      	ldr	r0, [r3, #0]
 8006ffe:	2301      	movs	r3, #1
 8007000:	425a      	negs	r2, r3
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	0019      	movs	r1, r3
 8007006:	f7fd f94d 	bl	80042a4 <osMessagePut>
		return intensity;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	e041      	b.n	8007092 <load_setup+0xae>
	}

	/*Decrease capacity to have more realistic results*/
	capacity = capacity * DRIVER_EFF;
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7fa fbe4 	bl	80017dc <__aeabi_ui2d>
 8007014:	4a23      	ldr	r2, [pc, #140]	; (80070a4 <load_setup+0xc0>)
 8007016:	4b24      	ldr	r3, [pc, #144]	; (80070a8 <load_setup+0xc4>)
 8007018:	f7f9 fdb6 	bl	8000b88 <__aeabi_dmul>
 800701c:	0003      	movs	r3, r0
 800701e:	000c      	movs	r4, r1
 8007020:	0018      	movs	r0, r3
 8007022:	0021      	movs	r1, r4
 8007024:	f7f9 f94e 	bl	80002c4 <__aeabi_d2uiz>
 8007028:	0003      	movs	r3, r0
 800702a:	607b      	str	r3, [r7, #4]

	/*Convert capacity to mAs*/
	mAseconds = capacity*3600;
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	0013      	movs	r3, r2
 8007030:	011b      	lsls	r3, r3, #4
 8007032:	1a9b      	subs	r3, r3, r2
 8007034:	011a      	lsls	r2, r3, #4
 8007036:	1ad2      	subs	r2, r2, r3
 8007038:	0113      	lsls	r3, r2, #4
 800703a:	001a      	movs	r2, r3
 800703c:	60ba      	str	r2, [r7, #8]

	/*Look for load to have LEDs operational over night time*/
	for(intensity = 0; intensity < 32; intensity++)
 800703e:	2300      	movs	r3, #0
 8007040:	60fb      	str	r3, [r7, #12]
 8007042:	e022      	b.n	800708a <load_setup+0xa6>
	{
		osMessagePut(led_msg, intensity, osWaitForever);
 8007044:	4b16      	ldr	r3, [pc, #88]	; (80070a0 <load_setup+0xbc>)
 8007046:	6818      	ldr	r0, [r3, #0]
 8007048:	2301      	movs	r3, #1
 800704a:	425a      	negs	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	0019      	movs	r1, r3
 8007050:	f7fd f928 	bl	80042a4 <osMessagePut>
		osDelay(300);
 8007054:	2396      	movs	r3, #150	; 0x96
 8007056:	005b      	lsls	r3, r3, #1
 8007058:	0018      	movs	r0, r3
 800705a:	f7fd f854 	bl	8004106 <osDelay>
		if(storage.coutput_ma*nightitme > mAseconds)
 800705e:	4b13      	ldr	r3, [pc, #76]	; (80070ac <load_setup+0xc8>)
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	001a      	movs	r2, r3
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	4353      	muls	r3, r2
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	429a      	cmp	r2, r3
 800706c:	d20a      	bcs.n	8007084 <load_setup+0xa0>
		{
			osMessagePut(led_msg, intensity-1, osWaitForever);
 800706e:	4b0c      	ldr	r3, [pc, #48]	; (80070a0 <load_setup+0xbc>)
 8007070:	6818      	ldr	r0, [r3, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	1e59      	subs	r1, r3, #1
 8007076:	2301      	movs	r3, #1
 8007078:	425b      	negs	r3, r3
 800707a:	001a      	movs	r2, r3
 800707c:	f7fd f912 	bl	80042a4 <osMessagePut>
			return intensity;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	e006      	b.n	8007092 <load_setup+0xae>
	for(intensity = 0; intensity < 32; intensity++)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	3301      	adds	r3, #1
 8007088:	60fb      	str	r3, [r7, #12]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2b1f      	cmp	r3, #31
 800708e:	d9d9      	bls.n	8007044 <load_setup+0x60>
		}
	}

	return intensity;
 8007090:	68fb      	ldr	r3, [r7, #12]
}
 8007092:	0018      	movs	r0, r3
 8007094:	46bd      	mov	sp, r7
 8007096:	b005      	add	sp, #20
 8007098:	bd90      	pop	{r4, r7, pc}
 800709a:	46c0      	nop			; (mov r8, r8)
 800709c:	0000383f 	.word	0x0000383f
 80070a0:	20000fd8 	.word	0x20000fd8
 80070a4:	33333333 	.word	0x33333333
 80070a8:	3feb3333 	.word	0x3feb3333
 80070ac:	20001100 	.word	0x20001100

080070b0 <MonitorTask>:

osThreadId MonitorTaskHandle;
DevStorageTypDef storage;

void MonitorTask(void const * argument)
{
 80070b0:	b5b0      	push	{r4, r5, r7, lr}
 80070b2:	b088      	sub	sp, #32
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  osEvent evt;
  uint16_t  local_adc_data[5];
  static uint32_t mon_dayticks = 0;

  /*Start ADC DMA Process*/
  if(HAL_ADC_Start_DMA(&hadc, (uint32_t *)storage.adc_data, 5) != HAL_OK)
 80070b8:	4966      	ldr	r1, [pc, #408]	; (8007254 <MonitorTask+0x1a4>)
 80070ba:	4b67      	ldr	r3, [pc, #412]	; (8007258 <MonitorTask+0x1a8>)
 80070bc:	2205      	movs	r2, #5
 80070be:	0018      	movs	r0, r3
 80070c0:	f7fa ff50 	bl	8001f64 <HAL_ADC_Start_DMA>
 80070c4:	1e03      	subs	r3, r0, #0
 80070c6:	d001      	beq.n	80070cc <MonitorTask+0x1c>
  {
	  Error_Handler();
 80070c8:	f7ff fdd6 	bl	8006c78 <Error_Handler>
  }

  /*Start timer*/
  HAL_TIM_Base_Start_IT(&htim21);
 80070cc:	4b63      	ldr	r3, [pc, #396]	; (800725c <MonitorTask+0x1ac>)
 80070ce:	0018      	movs	r0, r3
 80070d0:	f7fc fc7a 	bl	80039c8 <HAL_TIM_Base_Start_IT>

  for(;;)
  {
	  /*Wait for signal from timer interrupt*/
	  evt = osSignalWait (0x00000001, osWaitForever);
 80070d4:	2414      	movs	r4, #20
 80070d6:	1938      	adds	r0, r7, r4
 80070d8:	2301      	movs	r3, #1
 80070da:	425b      	negs	r3, r3
 80070dc:	001a      	movs	r2, r3
 80070de:	2101      	movs	r1, #1
 80070e0:	f7fd f860 	bl	80041a4 <osSignalWait>
	  if (evt.status == osEventSignal)
 80070e4:	193b      	adds	r3, r7, r4
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b08      	cmp	r3, #8
 80070ea:	d1f3      	bne.n	80070d4 <MonitorTask+0x24>
	  {
		  /*Copy all ADC data measured with DMA*/
		  memcpy(local_adc_data, storage.adc_data, sizeof(storage.adc_data));
 80070ec:	2508      	movs	r5, #8
 80070ee:	197b      	adds	r3, r7, r5
 80070f0:	4a58      	ldr	r2, [pc, #352]	; (8007254 <MonitorTask+0x1a4>)
 80070f2:	ca03      	ldmia	r2!, {r0, r1}
 80070f4:	c303      	stmia	r3!, {r0, r1}
 80070f6:	8812      	ldrh	r2, [r2, #0]
 80070f8:	801a      	strh	r2, [r3, #0]

		  /*Convert&Store Input Voltage*/
		  storage.vinput_mv = (uint32_t)(local_adc_data[2] * VINPUT_CONST);
 80070fa:	197b      	adds	r3, r7, r5
 80070fc:	889b      	ldrh	r3, [r3, #4]
 80070fe:	0018      	movs	r0, r3
 8007100:	f7fa fb32 	bl	8001768 <__aeabi_i2d>
 8007104:	4a56      	ldr	r2, [pc, #344]	; (8007260 <MonitorTask+0x1b0>)
 8007106:	4b57      	ldr	r3, [pc, #348]	; (8007264 <MonitorTask+0x1b4>)
 8007108:	f7f9 fd3e 	bl	8000b88 <__aeabi_dmul>
 800710c:	0003      	movs	r3, r0
 800710e:	000c      	movs	r4, r1
 8007110:	0018      	movs	r0, r3
 8007112:	0021      	movs	r1, r4
 8007114:	f7f9 f8d6 	bl	80002c4 <__aeabi_d2uiz>
 8007118:	0002      	movs	r2, r0
 800711a:	4b4e      	ldr	r3, [pc, #312]	; (8007254 <MonitorTask+0x1a4>)
 800711c:	60da      	str	r2, [r3, #12]

		  /*Convert&Store Battery Voltage*/
		  storage.vbatt_mv = (uint32_t)(local_adc_data[3] * VBATT_CONST);
 800711e:	197b      	adds	r3, r7, r5
 8007120:	88db      	ldrh	r3, [r3, #6]
 8007122:	0018      	movs	r0, r3
 8007124:	f7fa fb20 	bl	8001768 <__aeabi_i2d>
 8007128:	2200      	movs	r2, #0
 800712a:	4b4f      	ldr	r3, [pc, #316]	; (8007268 <MonitorTask+0x1b8>)
 800712c:	f7f9 fd2c 	bl	8000b88 <__aeabi_dmul>
 8007130:	0003      	movs	r3, r0
 8007132:	000c      	movs	r4, r1
 8007134:	0018      	movs	r0, r3
 8007136:	0021      	movs	r1, r4
 8007138:	f7f9 f8c4 	bl	80002c4 <__aeabi_d2uiz>
 800713c:	0002      	movs	r2, r0
 800713e:	4b45      	ldr	r3, [pc, #276]	; (8007254 <MonitorTask+0x1a4>)
 8007140:	611a      	str	r2, [r3, #16]

		  /*Convert&Store Arduino Input Voltage*/
		  storage.vard_input_mv = (uint32_t)(local_adc_data[4] * VARD_CONST);
 8007142:	197b      	adds	r3, r7, r5
 8007144:	891b      	ldrh	r3, [r3, #8]
 8007146:	0018      	movs	r0, r3
 8007148:	f7fa fb0e 	bl	8001768 <__aeabi_i2d>
 800714c:	4a47      	ldr	r2, [pc, #284]	; (800726c <MonitorTask+0x1bc>)
 800714e:	4b48      	ldr	r3, [pc, #288]	; (8007270 <MonitorTask+0x1c0>)
 8007150:	f7f9 fd1a 	bl	8000b88 <__aeabi_dmul>
 8007154:	0003      	movs	r3, r0
 8007156:	000c      	movs	r4, r1
 8007158:	0018      	movs	r0, r3
 800715a:	0021      	movs	r1, r4
 800715c:	f7f9 f8b2 	bl	80002c4 <__aeabi_d2uiz>
 8007160:	0002      	movs	r2, r0
 8007162:	4b3c      	ldr	r3, [pc, #240]	; (8007254 <MonitorTask+0x1a4>)
 8007164:	615a      	str	r2, [r3, #20]

		  /*Convert&Store Input Current*/
		  storage.cinput_ma = (int32_t)((local_adc_data[0] - COFFSET_CONST) * CSENSE_CONST);
 8007166:	197b      	adds	r3, r7, r5
 8007168:	881b      	ldrh	r3, [r3, #0]
 800716a:	3b41      	subs	r3, #65	; 0x41
 800716c:	0018      	movs	r0, r3
 800716e:	f7fa fafb 	bl	8001768 <__aeabi_i2d>
 8007172:	4a40      	ldr	r2, [pc, #256]	; (8007274 <MonitorTask+0x1c4>)
 8007174:	4b40      	ldr	r3, [pc, #256]	; (8007278 <MonitorTask+0x1c8>)
 8007176:	f7f9 fd07 	bl	8000b88 <__aeabi_dmul>
 800717a:	0003      	movs	r3, r0
 800717c:	000c      	movs	r4, r1
 800717e:	0018      	movs	r0, r3
 8007180:	0021      	movs	r1, r4
 8007182:	f7fa fabb 	bl	80016fc <__aeabi_d2iz>
 8007186:	0002      	movs	r2, r0
 8007188:	4b32      	ldr	r3, [pc, #200]	; (8007254 <MonitorTask+0x1a4>)
 800718a:	619a      	str	r2, [r3, #24]

		  /*Convert&Store Output Current*/
		  storage.coutput_ma = (int32_t)((local_adc_data[1] -COFFSET_CONST) * CSENSE_CONST);
 800718c:	197b      	adds	r3, r7, r5
 800718e:	885b      	ldrh	r3, [r3, #2]
 8007190:	3b41      	subs	r3, #65	; 0x41
 8007192:	0018      	movs	r0, r3
 8007194:	f7fa fae8 	bl	8001768 <__aeabi_i2d>
 8007198:	4a36      	ldr	r2, [pc, #216]	; (8007274 <MonitorTask+0x1c4>)
 800719a:	4b37      	ldr	r3, [pc, #220]	; (8007278 <MonitorTask+0x1c8>)
 800719c:	f7f9 fcf4 	bl	8000b88 <__aeabi_dmul>
 80071a0:	0003      	movs	r3, r0
 80071a2:	000c      	movs	r4, r1
 80071a4:	0018      	movs	r0, r3
 80071a6:	0021      	movs	r1, r4
 80071a8:	f7fa faa8 	bl	80016fc <__aeabi_d2iz>
 80071ac:	0002      	movs	r2, r0
 80071ae:	4b29      	ldr	r3, [pc, #164]	; (8007254 <MonitorTask+0x1a4>)
 80071b0:	61da      	str	r2, [r3, #28]

		  /*Convert&Store Energy Accumulated*/
		  storage.energy_stored_mah += (float)(storage.cinput_ma * ETIME_CONST);
 80071b2:	4b28      	ldr	r3, [pc, #160]	; (8007254 <MonitorTask+0x1a4>)
 80071b4:	6a1c      	ldr	r4, [r3, #32]
 80071b6:	4b27      	ldr	r3, [pc, #156]	; (8007254 <MonitorTask+0x1a4>)
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	0018      	movs	r0, r3
 80071bc:	f7fa fad4 	bl	8001768 <__aeabi_i2d>
 80071c0:	4a2e      	ldr	r2, [pc, #184]	; (800727c <MonitorTask+0x1cc>)
 80071c2:	4b2f      	ldr	r3, [pc, #188]	; (8007280 <MonitorTask+0x1d0>)
 80071c4:	f7f9 fce0 	bl	8000b88 <__aeabi_dmul>
 80071c8:	0002      	movs	r2, r0
 80071ca:	000b      	movs	r3, r1
 80071cc:	0010      	movs	r0, r2
 80071ce:	0019      	movs	r1, r3
 80071d0:	f7fa fb36 	bl	8001840 <__aeabi_d2f>
 80071d4:	1c03      	adds	r3, r0, #0
 80071d6:	1c19      	adds	r1, r3, #0
 80071d8:	1c20      	adds	r0, r4, #0
 80071da:	f7f9 f891 	bl	8000300 <__aeabi_fadd>
 80071de:	1c03      	adds	r3, r0, #0
 80071e0:	1c1a      	adds	r2, r3, #0
 80071e2:	4b1c      	ldr	r3, [pc, #112]	; (8007254 <MonitorTask+0x1a4>)
 80071e4:	621a      	str	r2, [r3, #32]

		  /*Convert&Store Energy Released*/
		  storage.energy_released_mah += (float)(storage.coutput_ma * ETIME_CONST);
 80071e6:	4b1b      	ldr	r3, [pc, #108]	; (8007254 <MonitorTask+0x1a4>)
 80071e8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80071ea:	4b1a      	ldr	r3, [pc, #104]	; (8007254 <MonitorTask+0x1a4>)
 80071ec:	69db      	ldr	r3, [r3, #28]
 80071ee:	0018      	movs	r0, r3
 80071f0:	f7fa faba 	bl	8001768 <__aeabi_i2d>
 80071f4:	4a21      	ldr	r2, [pc, #132]	; (800727c <MonitorTask+0x1cc>)
 80071f6:	4b22      	ldr	r3, [pc, #136]	; (8007280 <MonitorTask+0x1d0>)
 80071f8:	f7f9 fcc6 	bl	8000b88 <__aeabi_dmul>
 80071fc:	0002      	movs	r2, r0
 80071fe:	000b      	movs	r3, r1
 8007200:	0010      	movs	r0, r2
 8007202:	0019      	movs	r1, r3
 8007204:	f7fa fb1c 	bl	8001840 <__aeabi_d2f>
 8007208:	1c03      	adds	r3, r0, #0
 800720a:	1c19      	adds	r1, r3, #0
 800720c:	1c20      	adds	r0, r4, #0
 800720e:	f7f9 f877 	bl	8000300 <__aeabi_fadd>
 8007212:	1c03      	adds	r3, r0, #0
 8007214:	1c1a      	adds	r2, r3, #0
 8007216:	4b0f      	ldr	r3, [pc, #60]	; (8007254 <MonitorTask+0x1a4>)
 8007218:	625a      	str	r2, [r3, #36]	; 0x24

		  /*Do the day length time tracking*/
		  if(storage.vinput_mv+VINPUT_HYS > VINPUT_LIMIT)
 800721a:	4b0e      	ldr	r3, [pc, #56]	; (8007254 <MonitorTask+0x1a4>)
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	3364      	adds	r3, #100	; 0x64
 8007220:	001a      	movs	r2, r3
 8007222:	23fa      	movs	r3, #250	; 0xfa
 8007224:	015b      	lsls	r3, r3, #5
 8007226:	429a      	cmp	r2, r3
 8007228:	d90f      	bls.n	800724a <MonitorTask+0x19a>
		  {
			  mon_dayticks++;
 800722a:	4b16      	ldr	r3, [pc, #88]	; (8007284 <MonitorTask+0x1d4>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	1c5a      	adds	r2, r3, #1
 8007230:	4b14      	ldr	r3, [pc, #80]	; (8007284 <MonitorTask+0x1d4>)
 8007232:	601a      	str	r2, [r3, #0]
			  storage.daylength_s = (uint32_t)(mon_dayticks/10);
 8007234:	4b13      	ldr	r3, [pc, #76]	; (8007284 <MonitorTask+0x1d4>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	210a      	movs	r1, #10
 800723a:	0018      	movs	r0, r3
 800723c:	f7f8 ff64 	bl	8000108 <__udivsi3>
 8007240:	0003      	movs	r3, r0
 8007242:	001a      	movs	r2, r3
 8007244:	4b03      	ldr	r3, [pc, #12]	; (8007254 <MonitorTask+0x1a4>)
 8007246:	62da      	str	r2, [r3, #44]	; 0x2c
 8007248:	e744      	b.n	80070d4 <MonitorTask+0x24>
		  }
		  else
		  {
			  mon_dayticks = 0;
 800724a:	4b0e      	ldr	r3, [pc, #56]	; (8007284 <MonitorTask+0x1d4>)
 800724c:	2200      	movs	r2, #0
 800724e:	601a      	str	r2, [r3, #0]
	  evt = osSignalWait (0x00000001, osWaitForever);
 8007250:	e740      	b.n	80070d4 <MonitorTask+0x24>
 8007252:	46c0      	nop			; (mov r8, r8)
 8007254:	20001100 	.word	0x20001100
 8007258:	20001064 	.word	0x20001064
 800725c:	200010c0 	.word	0x200010c0
 8007260:	6c8b4396 	.word	0x6c8b4396
 8007264:	401d7be7 	.word	0x401d7be7
 8007268:	40100000 	.word	0x40100000
 800726c:	83126e98 	.word	0x83126e98
 8007270:	3fe9cac0 	.word	0x3fe9cac0
 8007274:	2b020c4a 	.word	0x2b020c4a
 8007278:	3fff1687 	.word	0x3fff1687
 800727c:	e1812c13 	.word	0xe1812c13
 8007280:	3efd208b 	.word	0x3efd208b
 8007284:	20000fc4 	.word	0x20000fc4

08007288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800728c:	4b0f      	ldr	r3, [pc, #60]	; (80072cc <HAL_MspInit+0x44>)
 800728e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007290:	4b0e      	ldr	r3, [pc, #56]	; (80072cc <HAL_MspInit+0x44>)
 8007292:	2101      	movs	r1, #1
 8007294:	430a      	orrs	r2, r1
 8007296:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8007298:	4b0c      	ldr	r3, [pc, #48]	; (80072cc <HAL_MspInit+0x44>)
 800729a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800729c:	4b0b      	ldr	r3, [pc, #44]	; (80072cc <HAL_MspInit+0x44>)
 800729e:	2180      	movs	r1, #128	; 0x80
 80072a0:	0549      	lsls	r1, r1, #21
 80072a2:	430a      	orrs	r2, r1
 80072a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80072a6:	2302      	movs	r3, #2
 80072a8:	425b      	negs	r3, r3
 80072aa:	2200      	movs	r2, #0
 80072ac:	2103      	movs	r1, #3
 80072ae:	0018      	movs	r0, r3
 80072b0:	f7fb f9c2 	bl	8002638 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 3, 0);
 80072b4:	2200      	movs	r2, #0
 80072b6:	2103      	movs	r1, #3
 80072b8:	2004      	movs	r0, #4
 80072ba:	f7fb f9bd 	bl	8002638 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 80072be:	2004      	movs	r0, #4
 80072c0:	f7fb f9cf 	bl	8002662 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80072c4:	46c0      	nop			; (mov r8, r8)
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	46c0      	nop			; (mov r8, r8)
 80072cc:	40021000 	.word	0x40021000

080072d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072d8:	230c      	movs	r3, #12
 80072da:	18fb      	adds	r3, r7, r3
 80072dc:	0018      	movs	r0, r3
 80072de:	2314      	movs	r3, #20
 80072e0:	001a      	movs	r2, r3
 80072e2:	2100      	movs	r1, #0
 80072e4:	f000 f9b7 	bl	8007656 <memset>
  if(hadc->Instance==ADC1)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a2f      	ldr	r2, [pc, #188]	; (80073ac <HAL_ADC_MspInit+0xdc>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d157      	bne.n	80073a2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80072f2:	4b2f      	ldr	r3, [pc, #188]	; (80073b0 <HAL_ADC_MspInit+0xe0>)
 80072f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072f6:	4b2e      	ldr	r3, [pc, #184]	; (80073b0 <HAL_ADC_MspInit+0xe0>)
 80072f8:	2180      	movs	r1, #128	; 0x80
 80072fa:	0089      	lsls	r1, r1, #2
 80072fc:	430a      	orrs	r2, r1
 80072fe:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007300:	4b2b      	ldr	r3, [pc, #172]	; (80073b0 <HAL_ADC_MspInit+0xe0>)
 8007302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007304:	4b2a      	ldr	r3, [pc, #168]	; (80073b0 <HAL_ADC_MspInit+0xe0>)
 8007306:	2101      	movs	r1, #1
 8007308:	430a      	orrs	r2, r1
 800730a:	62da      	str	r2, [r3, #44]	; 0x2c
 800730c:	4b28      	ldr	r3, [pc, #160]	; (80073b0 <HAL_ADC_MspInit+0xe0>)
 800730e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007310:	2201      	movs	r2, #1
 8007312:	4013      	ands	r3, r2
 8007314:	60bb      	str	r3, [r7, #8]
 8007316:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4 
    */
    GPIO_InitStruct.Pin = ISENS1_Pin|ISENS2_Pin|VINPUT_Pin|VBAT_Pin 
 8007318:	210c      	movs	r1, #12
 800731a:	187b      	adds	r3, r7, r1
 800731c:	221f      	movs	r2, #31
 800731e:	601a      	str	r2, [r3, #0]
                          |VAUX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007320:	187b      	adds	r3, r7, r1
 8007322:	2203      	movs	r2, #3
 8007324:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007326:	187b      	adds	r3, r7, r1
 8007328:	2200      	movs	r2, #0
 800732a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800732c:	187a      	adds	r2, r7, r1
 800732e:	23a0      	movs	r3, #160	; 0xa0
 8007330:	05db      	lsls	r3, r3, #23
 8007332:	0011      	movs	r1, r2
 8007334:	0018      	movs	r0, r3
 8007336:	f7fb fb5f 	bl	80029f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800733a:	4b1e      	ldr	r3, [pc, #120]	; (80073b4 <HAL_ADC_MspInit+0xe4>)
 800733c:	4a1e      	ldr	r2, [pc, #120]	; (80073b8 <HAL_ADC_MspInit+0xe8>)
 800733e:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8007340:	4b1c      	ldr	r3, [pc, #112]	; (80073b4 <HAL_ADC_MspInit+0xe4>)
 8007342:	2200      	movs	r2, #0
 8007344:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007346:	4b1b      	ldr	r3, [pc, #108]	; (80073b4 <HAL_ADC_MspInit+0xe4>)
 8007348:	2200      	movs	r2, #0
 800734a:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800734c:	4b19      	ldr	r3, [pc, #100]	; (80073b4 <HAL_ADC_MspInit+0xe4>)
 800734e:	2200      	movs	r2, #0
 8007350:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8007352:	4b18      	ldr	r3, [pc, #96]	; (80073b4 <HAL_ADC_MspInit+0xe4>)
 8007354:	2280      	movs	r2, #128	; 0x80
 8007356:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007358:	4b16      	ldr	r3, [pc, #88]	; (80073b4 <HAL_ADC_MspInit+0xe4>)
 800735a:	2280      	movs	r2, #128	; 0x80
 800735c:	0052      	lsls	r2, r2, #1
 800735e:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007360:	4b14      	ldr	r3, [pc, #80]	; (80073b4 <HAL_ADC_MspInit+0xe4>)
 8007362:	2280      	movs	r2, #128	; 0x80
 8007364:	00d2      	lsls	r2, r2, #3
 8007366:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8007368:	4b12      	ldr	r3, [pc, #72]	; (80073b4 <HAL_ADC_MspInit+0xe4>)
 800736a:	2220      	movs	r2, #32
 800736c:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 800736e:	4b11      	ldr	r3, [pc, #68]	; (80073b4 <HAL_ADC_MspInit+0xe4>)
 8007370:	2280      	movs	r2, #128	; 0x80
 8007372:	0192      	lsls	r2, r2, #6
 8007374:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8007376:	4b0f      	ldr	r3, [pc, #60]	; (80073b4 <HAL_ADC_MspInit+0xe4>)
 8007378:	0018      	movs	r0, r3
 800737a:	f7fb f983 	bl	8002684 <HAL_DMA_Init>
 800737e:	1e03      	subs	r3, r0, #0
 8007380:	d001      	beq.n	8007386 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8007382:	f7ff fc79 	bl	8006c78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a0a      	ldr	r2, [pc, #40]	; (80073b4 <HAL_ADC_MspInit+0xe4>)
 800738a:	64da      	str	r2, [r3, #76]	; 0x4c
 800738c:	4b09      	ldr	r3, [pc, #36]	; (80073b4 <HAL_ADC_MspInit+0xe4>)
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 3, 0);
 8007392:	2200      	movs	r2, #0
 8007394:	2103      	movs	r1, #3
 8007396:	200c      	movs	r0, #12
 8007398:	f7fb f94e 	bl	8002638 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800739c:	200c      	movs	r0, #12
 800739e:	f7fb f960 	bl	8002662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80073a2:	46c0      	nop			; (mov r8, r8)
 80073a4:	46bd      	mov	sp, r7
 80073a6:	b008      	add	sp, #32
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	46c0      	nop			; (mov r8, r8)
 80073ac:	40012400 	.word	0x40012400
 80073b0:	40021000 	.word	0x40021000
 80073b4:	2000101c 	.word	0x2000101c
 80073b8:	40020008 	.word	0x40020008

080073bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM21)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a0c      	ldr	r2, [pc, #48]	; (80073fc <HAL_TIM_Base_MspInit+0x40>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d106      	bne.n	80073dc <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 80073ce:	4b0c      	ldr	r3, [pc, #48]	; (8007400 <HAL_TIM_Base_MspInit+0x44>)
 80073d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073d2:	4b0b      	ldr	r3, [pc, #44]	; (8007400 <HAL_TIM_Base_MspInit+0x44>)
 80073d4:	2104      	movs	r1, #4
 80073d6:	430a      	orrs	r2, r1
 80073d8:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 80073da:	e00a      	b.n	80073f2 <HAL_TIM_Base_MspInit+0x36>
  else if(htim_base->Instance==TIM22)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a08      	ldr	r2, [pc, #32]	; (8007404 <HAL_TIM_Base_MspInit+0x48>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d105      	bne.n	80073f2 <HAL_TIM_Base_MspInit+0x36>
    __HAL_RCC_TIM22_CLK_ENABLE();
 80073e6:	4b06      	ldr	r3, [pc, #24]	; (8007400 <HAL_TIM_Base_MspInit+0x44>)
 80073e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073ea:	4b05      	ldr	r3, [pc, #20]	; (8007400 <HAL_TIM_Base_MspInit+0x44>)
 80073ec:	2120      	movs	r1, #32
 80073ee:	430a      	orrs	r2, r1
 80073f0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80073f2:	46c0      	nop			; (mov r8, r8)
 80073f4:	46bd      	mov	sp, r7
 80073f6:	b002      	add	sp, #8
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	46c0      	nop			; (mov r8, r8)
 80073fc:	40010800 	.word	0x40010800
 8007400:	40021000 	.word	0x40021000
 8007404:	40011400 	.word	0x40011400

08007408 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b08a      	sub	sp, #40	; 0x28
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8007410:	2300      	movs	r3, #0
 8007412:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8007414:	2300      	movs	r3, #0
 8007416:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	0019      	movs	r1, r3
 800741e:	200f      	movs	r0, #15
 8007420:	f7fb f90a 	bl	8002638 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8007424:	200f      	movs	r0, #15
 8007426:	f7fb f91c 	bl	8002662 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800742a:	4b1d      	ldr	r3, [pc, #116]	; (80074a0 <HAL_InitTick+0x98>)
 800742c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800742e:	4b1c      	ldr	r3, [pc, #112]	; (80074a0 <HAL_InitTick+0x98>)
 8007430:	2101      	movs	r1, #1
 8007432:	430a      	orrs	r2, r1
 8007434:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007436:	2308      	movs	r3, #8
 8007438:	18fa      	adds	r2, r7, r3
 800743a:	230c      	movs	r3, #12
 800743c:	18fb      	adds	r3, r7, r3
 800743e:	0011      	movs	r1, r2
 8007440:	0018      	movs	r0, r3
 8007442:	f7fc fa41 	bl	80038c8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8007446:	f7fc fa29 	bl	800389c <HAL_RCC_GetPCLK1Freq>
 800744a:	0003      	movs	r3, r0
 800744c:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800744e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007450:	4914      	ldr	r1, [pc, #80]	; (80074a4 <HAL_InitTick+0x9c>)
 8007452:	0018      	movs	r0, r3
 8007454:	f7f8 fe58 	bl	8000108 <__udivsi3>
 8007458:	0003      	movs	r3, r0
 800745a:	3b01      	subs	r3, #1
 800745c:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800745e:	4b12      	ldr	r3, [pc, #72]	; (80074a8 <HAL_InitTick+0xa0>)
 8007460:	2280      	movs	r2, #128	; 0x80
 8007462:	05d2      	lsls	r2, r2, #23
 8007464:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8007466:	4b10      	ldr	r3, [pc, #64]	; (80074a8 <HAL_InitTick+0xa0>)
 8007468:	4a10      	ldr	r2, [pc, #64]	; (80074ac <HAL_InitTick+0xa4>)
 800746a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800746c:	4b0e      	ldr	r3, [pc, #56]	; (80074a8 <HAL_InitTick+0xa0>)
 800746e:	6a3a      	ldr	r2, [r7, #32]
 8007470:	605a      	str	r2, [r3, #4]
  htim2.Init.ClockDivision = 0;
 8007472:	4b0d      	ldr	r3, [pc, #52]	; (80074a8 <HAL_InitTick+0xa0>)
 8007474:	2200      	movs	r2, #0
 8007476:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007478:	4b0b      	ldr	r3, [pc, #44]	; (80074a8 <HAL_InitTick+0xa0>)
 800747a:	2200      	movs	r2, #0
 800747c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800747e:	4b0a      	ldr	r3, [pc, #40]	; (80074a8 <HAL_InitTick+0xa0>)
 8007480:	0018      	movs	r0, r3
 8007482:	f7fc fa53 	bl	800392c <HAL_TIM_Base_Init>
 8007486:	1e03      	subs	r3, r0, #0
 8007488:	d105      	bne.n	8007496 <HAL_InitTick+0x8e>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800748a:	4b07      	ldr	r3, [pc, #28]	; (80074a8 <HAL_InitTick+0xa0>)
 800748c:	0018      	movs	r0, r3
 800748e:	f7fc fa9b 	bl	80039c8 <HAL_TIM_Base_Start_IT>
 8007492:	0003      	movs	r3, r0
 8007494:	e000      	b.n	8007498 <HAL_InitTick+0x90>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
}
 8007498:	0018      	movs	r0, r3
 800749a:	46bd      	mov	sp, r7
 800749c:	b00a      	add	sp, #40	; 0x28
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	40021000 	.word	0x40021000
 80074a4:	000f4240 	.word	0x000f4240
 80074a8:	20001134 	.word	0x20001134
 80074ac:	000003e7 	.word	0x000003e7

080074b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80074b4:	46c0      	nop			; (mov r8, r8)
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80074be:	e7fe      	b.n	80074be <HardFault_Handler+0x4>

080074c0 <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupt.
  */
void RCC_CRS_IRQHandler(void)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 80074c4:	46c0      	nop			; (mov r8, r8)
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
	...

080074cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80074d0:	4b03      	ldr	r3, [pc, #12]	; (80074e0 <DMA1_Channel1_IRQHandler+0x14>)
 80074d2:	0018      	movs	r0, r3
 80074d4:	f7fb f9b4 	bl	8002840 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80074d8:	46c0      	nop			; (mov r8, r8)
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	46c0      	nop			; (mov r8, r8)
 80074e0:	2000101c 	.word	0x2000101c

080074e4 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80074e8:	4b03      	ldr	r3, [pc, #12]	; (80074f8 <ADC1_COMP_IRQHandler+0x14>)
 80074ea:	0018      	movs	r0, r3
 80074ec:	f7fa fdbc 	bl	8002068 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80074f0:	46c0      	nop			; (mov r8, r8)
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	46c0      	nop			; (mov r8, r8)
 80074f8:	20001064 	.word	0x20001064

080074fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007500:	4b03      	ldr	r3, [pc, #12]	; (8007510 <TIM2_IRQHandler+0x14>)
 8007502:	0018      	movs	r0, r3
 8007504:	f7fc fa82 	bl	8003a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007508:	46c0      	nop			; (mov r8, r8)
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	46c0      	nop			; (mov r8, r8)
 8007510:	20001134 	.word	0x20001134

08007514 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8007518:	4b03      	ldr	r3, [pc, #12]	; (8007528 <TIM21_IRQHandler+0x14>)
 800751a:	0018      	movs	r0, r3
 800751c:	f7fc fa76 	bl	8003a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8007520:	46c0      	nop			; (mov r8, r8)
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	46c0      	nop			; (mov r8, r8)
 8007528:	200010c0 	.word	0x200010c0

0800752c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8007530:	4b17      	ldr	r3, [pc, #92]	; (8007590 <SystemInit+0x64>)
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	4b16      	ldr	r3, [pc, #88]	; (8007590 <SystemInit+0x64>)
 8007536:	2180      	movs	r1, #128	; 0x80
 8007538:	0049      	lsls	r1, r1, #1
 800753a:	430a      	orrs	r2, r1
 800753c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800753e:	4b14      	ldr	r3, [pc, #80]	; (8007590 <SystemInit+0x64>)
 8007540:	68da      	ldr	r2, [r3, #12]
 8007542:	4b13      	ldr	r3, [pc, #76]	; (8007590 <SystemInit+0x64>)
 8007544:	4913      	ldr	r1, [pc, #76]	; (8007594 <SystemInit+0x68>)
 8007546:	400a      	ands	r2, r1
 8007548:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800754a:	4b11      	ldr	r3, [pc, #68]	; (8007590 <SystemInit+0x64>)
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	4b10      	ldr	r3, [pc, #64]	; (8007590 <SystemInit+0x64>)
 8007550:	4911      	ldr	r1, [pc, #68]	; (8007598 <SystemInit+0x6c>)
 8007552:	400a      	ands	r2, r1
 8007554:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8007556:	4b0e      	ldr	r3, [pc, #56]	; (8007590 <SystemInit+0x64>)
 8007558:	689a      	ldr	r2, [r3, #8]
 800755a:	4b0d      	ldr	r3, [pc, #52]	; (8007590 <SystemInit+0x64>)
 800755c:	2101      	movs	r1, #1
 800755e:	438a      	bics	r2, r1
 8007560:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8007562:	4b0b      	ldr	r3, [pc, #44]	; (8007590 <SystemInit+0x64>)
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	4b0a      	ldr	r3, [pc, #40]	; (8007590 <SystemInit+0x64>)
 8007568:	490c      	ldr	r1, [pc, #48]	; (800759c <SystemInit+0x70>)
 800756a:	400a      	ands	r2, r1
 800756c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800756e:	4b08      	ldr	r3, [pc, #32]	; (8007590 <SystemInit+0x64>)
 8007570:	68da      	ldr	r2, [r3, #12]
 8007572:	4b07      	ldr	r3, [pc, #28]	; (8007590 <SystemInit+0x64>)
 8007574:	490a      	ldr	r1, [pc, #40]	; (80075a0 <SystemInit+0x74>)
 8007576:	400a      	ands	r2, r1
 8007578:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800757a:	4b05      	ldr	r3, [pc, #20]	; (8007590 <SystemInit+0x64>)
 800757c:	2200      	movs	r2, #0
 800757e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007580:	4b08      	ldr	r3, [pc, #32]	; (80075a4 <SystemInit+0x78>)
 8007582:	2280      	movs	r2, #128	; 0x80
 8007584:	0512      	lsls	r2, r2, #20
 8007586:	609a      	str	r2, [r3, #8]
#endif
}
 8007588:	46c0      	nop			; (mov r8, r8)
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	46c0      	nop			; (mov r8, r8)
 8007590:	40021000 	.word	0x40021000
 8007594:	88ff400c 	.word	0x88ff400c
 8007598:	fef6fff6 	.word	0xfef6fff6
 800759c:	fffbffff 	.word	0xfffbffff
 80075a0:	ff02ffff 	.word	0xff02ffff
 80075a4:	e000ed00 	.word	0xe000ed00

080075a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80075a8:	480d      	ldr	r0, [pc, #52]	; (80075e0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80075aa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80075ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80075ae:	e003      	b.n	80075b8 <LoopCopyDataInit>

080075b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80075b0:	4b0c      	ldr	r3, [pc, #48]	; (80075e4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80075b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80075b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80075b6:	3104      	adds	r1, #4

080075b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80075b8:	480b      	ldr	r0, [pc, #44]	; (80075e8 <LoopForever+0xa>)
  ldr  r3, =_edata
 80075ba:	4b0c      	ldr	r3, [pc, #48]	; (80075ec <LoopForever+0xe>)
  adds  r2, r0, r1
 80075bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80075be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80075c0:	d3f6      	bcc.n	80075b0 <CopyDataInit>
  ldr  r2, =_sbss
 80075c2:	4a0b      	ldr	r2, [pc, #44]	; (80075f0 <LoopForever+0x12>)
  b  LoopFillZerobss
 80075c4:	e002      	b.n	80075cc <LoopFillZerobss>

080075c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80075c6:	2300      	movs	r3, #0
  str  r3, [r2]
 80075c8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80075ca:	3204      	adds	r2, #4

080075cc <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80075cc:	4b09      	ldr	r3, [pc, #36]	; (80075f4 <LoopForever+0x16>)
  cmp  r2, r3
 80075ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80075d0:	d3f9      	bcc.n	80075c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80075d2:	f7ff ffab 	bl	800752c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80075d6:	f000 f811 	bl	80075fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80075da:	f7ff f803 	bl	80065e4 <main>

080075de <LoopForever>:

LoopForever:
    b LoopForever
 80075de:	e7fe      	b.n	80075de <LoopForever>
   ldr   r0, =_estack
 80075e0:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80075e4:	08007804 	.word	0x08007804
  ldr  r0, =_sdata
 80075e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80075ec:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 80075f0:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 80075f4:	20001170 	.word	0x20001170

080075f8 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80075f8:	e7fe      	b.n	80075f8 <DMA1_Channel2_3_IRQHandler>
	...

080075fc <__libc_init_array>:
 80075fc:	b570      	push	{r4, r5, r6, lr}
 80075fe:	2600      	movs	r6, #0
 8007600:	4d0c      	ldr	r5, [pc, #48]	; (8007634 <__libc_init_array+0x38>)
 8007602:	4c0d      	ldr	r4, [pc, #52]	; (8007638 <__libc_init_array+0x3c>)
 8007604:	1b64      	subs	r4, r4, r5
 8007606:	10a4      	asrs	r4, r4, #2
 8007608:	42a6      	cmp	r6, r4
 800760a:	d109      	bne.n	8007620 <__libc_init_array+0x24>
 800760c:	2600      	movs	r6, #0
 800760e:	f000 f82b 	bl	8007668 <_init>
 8007612:	4d0a      	ldr	r5, [pc, #40]	; (800763c <__libc_init_array+0x40>)
 8007614:	4c0a      	ldr	r4, [pc, #40]	; (8007640 <__libc_init_array+0x44>)
 8007616:	1b64      	subs	r4, r4, r5
 8007618:	10a4      	asrs	r4, r4, #2
 800761a:	42a6      	cmp	r6, r4
 800761c:	d105      	bne.n	800762a <__libc_init_array+0x2e>
 800761e:	bd70      	pop	{r4, r5, r6, pc}
 8007620:	00b3      	lsls	r3, r6, #2
 8007622:	58eb      	ldr	r3, [r5, r3]
 8007624:	4798      	blx	r3
 8007626:	3601      	adds	r6, #1
 8007628:	e7ee      	b.n	8007608 <__libc_init_array+0xc>
 800762a:	00b3      	lsls	r3, r6, #2
 800762c:	58eb      	ldr	r3, [r5, r3]
 800762e:	4798      	blx	r3
 8007630:	3601      	adds	r6, #1
 8007632:	e7f2      	b.n	800761a <__libc_init_array+0x1e>
 8007634:	080077fc 	.word	0x080077fc
 8007638:	080077fc 	.word	0x080077fc
 800763c:	080077fc 	.word	0x080077fc
 8007640:	08007800 	.word	0x08007800

08007644 <memcpy>:
 8007644:	2300      	movs	r3, #0
 8007646:	b510      	push	{r4, lr}
 8007648:	429a      	cmp	r2, r3
 800764a:	d100      	bne.n	800764e <memcpy+0xa>
 800764c:	bd10      	pop	{r4, pc}
 800764e:	5ccc      	ldrb	r4, [r1, r3]
 8007650:	54c4      	strb	r4, [r0, r3]
 8007652:	3301      	adds	r3, #1
 8007654:	e7f8      	b.n	8007648 <memcpy+0x4>

08007656 <memset>:
 8007656:	0003      	movs	r3, r0
 8007658:	1812      	adds	r2, r2, r0
 800765a:	4293      	cmp	r3, r2
 800765c:	d100      	bne.n	8007660 <memset+0xa>
 800765e:	4770      	bx	lr
 8007660:	7019      	strb	r1, [r3, #0]
 8007662:	3301      	adds	r3, #1
 8007664:	e7f9      	b.n	800765a <memset+0x4>
	...

08007668 <_init>:
 8007668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800766a:	46c0      	nop			; (mov r8, r8)
 800766c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800766e:	bc08      	pop	{r3}
 8007670:	469e      	mov	lr, r3
 8007672:	4770      	bx	lr

08007674 <_fini>:
 8007674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007676:	46c0      	nop			; (mov r8, r8)
 8007678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800767a:	bc08      	pop	{r3}
 800767c:	469e      	mov	lr, r3
 800767e:	4770      	bx	lr
