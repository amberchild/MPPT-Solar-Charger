
MPPT_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e118  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab4  0800e1d8  0800e1d8  0001e1d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec8c  0800ec8c  000209c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec8c  0800ec8c  0001ec8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec94  0800ec94  000209c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ec94  0800ec94  0001ec94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec9c  0800ec9c  0001ec9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009c0  20000000  0800eca0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031bc  200009c0  0800f660  000209c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000804  20003b7c  0800f660  00023b7c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f09f  00000000  00000000  000209e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000061c5  00000000  00000000  0004fa87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00015e58  00000000  00000000  00055c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018b8  00000000  00000000  0006baa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001900  00000000  00000000  0006d360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ae9b  00000000  00000000  0006ec60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026250  00000000  00000000  00089afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000943bf  00000000  00000000  000afd4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014410a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055f0  00000000  00000000  00144160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200009c0 	.word	0x200009c0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e1c0 	.word	0x0800e1c0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200009c4 	.word	0x200009c4
 8000104:	0800e1c0 	.word	0x0800e1c0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uhi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5a09      	ldrh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fcf9 	bl	8001e34 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fc43 	bl	8001cd8 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fceb 	bl	8001e34 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fce1 	bl	8001e34 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fc65 	bl	8001d50 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fc5b 	bl	8001d50 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	1c08      	adds	r0, r1, #0
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fb8d 	bl	8000bd0 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fb11 	bl	8000ae8 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb7f 	bl	8000bd0 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fb75 	bl	8000bd0 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fb1f 	bl	8000b38 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fb15 	bl	8000b38 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	1c08      	adds	r0, r1, #0
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f864 	bl	8000618 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	0415      	lsls	r5, r2, #16
 8000560:	0c2d      	lsrs	r5, r5, #16
 8000562:	000f      	movs	r7, r1
 8000564:	0001      	movs	r1, r0
 8000566:	002e      	movs	r6, r5
 8000568:	46c6      	mov	lr, r8
 800056a:	4684      	mov	ip, r0
 800056c:	0400      	lsls	r0, r0, #16
 800056e:	0c14      	lsrs	r4, r2, #16
 8000570:	0c00      	lsrs	r0, r0, #16
 8000572:	0c09      	lsrs	r1, r1, #16
 8000574:	4346      	muls	r6, r0
 8000576:	434d      	muls	r5, r1
 8000578:	4360      	muls	r0, r4
 800057a:	4361      	muls	r1, r4
 800057c:	1940      	adds	r0, r0, r5
 800057e:	0c34      	lsrs	r4, r6, #16
 8000580:	1824      	adds	r4, r4, r0
 8000582:	b500      	push	{lr}
 8000584:	42a5      	cmp	r5, r4
 8000586:	d903      	bls.n	8000590 <__aeabi_lmul+0x34>
 8000588:	2080      	movs	r0, #128	; 0x80
 800058a:	0240      	lsls	r0, r0, #9
 800058c:	4680      	mov	r8, r0
 800058e:	4441      	add	r1, r8
 8000590:	0c25      	lsrs	r5, r4, #16
 8000592:	186d      	adds	r5, r5, r1
 8000594:	4661      	mov	r1, ip
 8000596:	4359      	muls	r1, r3
 8000598:	437a      	muls	r2, r7
 800059a:	0430      	lsls	r0, r6, #16
 800059c:	1949      	adds	r1, r1, r5
 800059e:	0424      	lsls	r4, r4, #16
 80005a0:	0c00      	lsrs	r0, r0, #16
 80005a2:	1820      	adds	r0, r4, r0
 80005a4:	1889      	adds	r1, r1, r2
 80005a6:	bc80      	pop	{r7}
 80005a8:	46b8      	mov	r8, r7
 80005aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005ac <__aeabi_f2uiz>:
 80005ac:	219e      	movs	r1, #158	; 0x9e
 80005ae:	b510      	push	{r4, lr}
 80005b0:	05c9      	lsls	r1, r1, #23
 80005b2:	1c04      	adds	r4, r0, #0
 80005b4:	f7ff ffa8 	bl	8000508 <__aeabi_fcmpge>
 80005b8:	2800      	cmp	r0, #0
 80005ba:	d103      	bne.n	80005c4 <__aeabi_f2uiz+0x18>
 80005bc:	1c20      	adds	r0, r4, #0
 80005be:	f000 fd19 	bl	8000ff4 <__aeabi_f2iz>
 80005c2:	bd10      	pop	{r4, pc}
 80005c4:	219e      	movs	r1, #158	; 0x9e
 80005c6:	1c20      	adds	r0, r4, #0
 80005c8:	05c9      	lsls	r1, r1, #23
 80005ca:	f000 fb4b 	bl	8000c64 <__aeabi_fsub>
 80005ce:	f000 fd11 	bl	8000ff4 <__aeabi_f2iz>
 80005d2:	2380      	movs	r3, #128	; 0x80
 80005d4:	061b      	lsls	r3, r3, #24
 80005d6:	469c      	mov	ip, r3
 80005d8:	4460      	add	r0, ip
 80005da:	e7f2      	b.n	80005c2 <__aeabi_f2uiz+0x16>

080005dc <__aeabi_d2uiz>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	2200      	movs	r2, #0
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <__aeabi_d2uiz+0x38>)
 80005e2:	0004      	movs	r4, r0
 80005e4:	000d      	movs	r5, r1
 80005e6:	f7ff ff55 	bl	8000494 <__aeabi_dcmpge>
 80005ea:	2800      	cmp	r0, #0
 80005ec:	d104      	bne.n	80005f8 <__aeabi_d2uiz+0x1c>
 80005ee:	0020      	movs	r0, r4
 80005f0:	0029      	movs	r1, r5
 80005f2:	f002 faab 	bl	8002b4c <__aeabi_d2iz>
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <__aeabi_d2uiz+0x38>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	0020      	movs	r0, r4
 80005fe:	0029      	movs	r1, r5
 8000600:	f001 fef4 	bl	80023ec <__aeabi_dsub>
 8000604:	f002 faa2 	bl	8002b4c <__aeabi_d2iz>
 8000608:	2380      	movs	r3, #128	; 0x80
 800060a:	061b      	lsls	r3, r3, #24
 800060c:	469c      	mov	ip, r3
 800060e:	4460      	add	r0, ip
 8000610:	e7f1      	b.n	80005f6 <__aeabi_d2uiz+0x1a>
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	41e00000 	.word	0x41e00000

08000618 <__udivmoddi4>:
 8000618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800061a:	4657      	mov	r7, sl
 800061c:	464e      	mov	r6, r9
 800061e:	4645      	mov	r5, r8
 8000620:	46de      	mov	lr, fp
 8000622:	b5e0      	push	{r5, r6, r7, lr}
 8000624:	0004      	movs	r4, r0
 8000626:	000d      	movs	r5, r1
 8000628:	4692      	mov	sl, r2
 800062a:	4699      	mov	r9, r3
 800062c:	b083      	sub	sp, #12
 800062e:	428b      	cmp	r3, r1
 8000630:	d830      	bhi.n	8000694 <__udivmoddi4+0x7c>
 8000632:	d02d      	beq.n	8000690 <__udivmoddi4+0x78>
 8000634:	4649      	mov	r1, r9
 8000636:	4650      	mov	r0, sl
 8000638:	f002 fbba 	bl	8002db0 <__clzdi2>
 800063c:	0029      	movs	r1, r5
 800063e:	0006      	movs	r6, r0
 8000640:	0020      	movs	r0, r4
 8000642:	f002 fbb5 	bl	8002db0 <__clzdi2>
 8000646:	1a33      	subs	r3, r6, r0
 8000648:	4698      	mov	r8, r3
 800064a:	3b20      	subs	r3, #32
 800064c:	469b      	mov	fp, r3
 800064e:	d433      	bmi.n	80006b8 <__udivmoddi4+0xa0>
 8000650:	465a      	mov	r2, fp
 8000652:	4653      	mov	r3, sl
 8000654:	4093      	lsls	r3, r2
 8000656:	4642      	mov	r2, r8
 8000658:	001f      	movs	r7, r3
 800065a:	4653      	mov	r3, sl
 800065c:	4093      	lsls	r3, r2
 800065e:	001e      	movs	r6, r3
 8000660:	42af      	cmp	r7, r5
 8000662:	d83a      	bhi.n	80006da <__udivmoddi4+0xc2>
 8000664:	42af      	cmp	r7, r5
 8000666:	d100      	bne.n	800066a <__udivmoddi4+0x52>
 8000668:	e078      	b.n	800075c <__udivmoddi4+0x144>
 800066a:	465b      	mov	r3, fp
 800066c:	1ba4      	subs	r4, r4, r6
 800066e:	41bd      	sbcs	r5, r7
 8000670:	2b00      	cmp	r3, #0
 8000672:	da00      	bge.n	8000676 <__udivmoddi4+0x5e>
 8000674:	e075      	b.n	8000762 <__udivmoddi4+0x14a>
 8000676:	2200      	movs	r2, #0
 8000678:	2300      	movs	r3, #0
 800067a:	9200      	str	r2, [sp, #0]
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	2301      	movs	r3, #1
 8000680:	465a      	mov	r2, fp
 8000682:	4093      	lsls	r3, r2
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	4642      	mov	r2, r8
 800068a:	4093      	lsls	r3, r2
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	e028      	b.n	80006e2 <__udivmoddi4+0xca>
 8000690:	4282      	cmp	r2, r0
 8000692:	d9cf      	bls.n	8000634 <__udivmoddi4+0x1c>
 8000694:	2200      	movs	r2, #0
 8000696:	2300      	movs	r3, #0
 8000698:	9200      	str	r2, [sp, #0]
 800069a:	9301      	str	r3, [sp, #4]
 800069c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <__udivmoddi4+0x8e>
 80006a2:	601c      	str	r4, [r3, #0]
 80006a4:	605d      	str	r5, [r3, #4]
 80006a6:	9800      	ldr	r0, [sp, #0]
 80006a8:	9901      	ldr	r1, [sp, #4]
 80006aa:	b003      	add	sp, #12
 80006ac:	bcf0      	pop	{r4, r5, r6, r7}
 80006ae:	46bb      	mov	fp, r7
 80006b0:	46b2      	mov	sl, r6
 80006b2:	46a9      	mov	r9, r5
 80006b4:	46a0      	mov	r8, r4
 80006b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006b8:	4642      	mov	r2, r8
 80006ba:	2320      	movs	r3, #32
 80006bc:	1a9b      	subs	r3, r3, r2
 80006be:	4652      	mov	r2, sl
 80006c0:	40da      	lsrs	r2, r3
 80006c2:	4641      	mov	r1, r8
 80006c4:	0013      	movs	r3, r2
 80006c6:	464a      	mov	r2, r9
 80006c8:	408a      	lsls	r2, r1
 80006ca:	0017      	movs	r7, r2
 80006cc:	4642      	mov	r2, r8
 80006ce:	431f      	orrs	r7, r3
 80006d0:	4653      	mov	r3, sl
 80006d2:	4093      	lsls	r3, r2
 80006d4:	001e      	movs	r6, r3
 80006d6:	42af      	cmp	r7, r5
 80006d8:	d9c4      	bls.n	8000664 <__udivmoddi4+0x4c>
 80006da:	2200      	movs	r2, #0
 80006dc:	2300      	movs	r3, #0
 80006de:	9200      	str	r2, [sp, #0]
 80006e0:	9301      	str	r3, [sp, #4]
 80006e2:	4643      	mov	r3, r8
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d0d9      	beq.n	800069c <__udivmoddi4+0x84>
 80006e8:	07fb      	lsls	r3, r7, #31
 80006ea:	0872      	lsrs	r2, r6, #1
 80006ec:	431a      	orrs	r2, r3
 80006ee:	4646      	mov	r6, r8
 80006f0:	087b      	lsrs	r3, r7, #1
 80006f2:	e00e      	b.n	8000712 <__udivmoddi4+0xfa>
 80006f4:	42ab      	cmp	r3, r5
 80006f6:	d101      	bne.n	80006fc <__udivmoddi4+0xe4>
 80006f8:	42a2      	cmp	r2, r4
 80006fa:	d80c      	bhi.n	8000716 <__udivmoddi4+0xfe>
 80006fc:	1aa4      	subs	r4, r4, r2
 80006fe:	419d      	sbcs	r5, r3
 8000700:	2001      	movs	r0, #1
 8000702:	1924      	adds	r4, r4, r4
 8000704:	416d      	adcs	r5, r5
 8000706:	2100      	movs	r1, #0
 8000708:	3e01      	subs	r6, #1
 800070a:	1824      	adds	r4, r4, r0
 800070c:	414d      	adcs	r5, r1
 800070e:	2e00      	cmp	r6, #0
 8000710:	d006      	beq.n	8000720 <__udivmoddi4+0x108>
 8000712:	42ab      	cmp	r3, r5
 8000714:	d9ee      	bls.n	80006f4 <__udivmoddi4+0xdc>
 8000716:	3e01      	subs	r6, #1
 8000718:	1924      	adds	r4, r4, r4
 800071a:	416d      	adcs	r5, r5
 800071c:	2e00      	cmp	r6, #0
 800071e:	d1f8      	bne.n	8000712 <__udivmoddi4+0xfa>
 8000720:	9800      	ldr	r0, [sp, #0]
 8000722:	9901      	ldr	r1, [sp, #4]
 8000724:	465b      	mov	r3, fp
 8000726:	1900      	adds	r0, r0, r4
 8000728:	4169      	adcs	r1, r5
 800072a:	2b00      	cmp	r3, #0
 800072c:	db24      	blt.n	8000778 <__udivmoddi4+0x160>
 800072e:	002b      	movs	r3, r5
 8000730:	465a      	mov	r2, fp
 8000732:	4644      	mov	r4, r8
 8000734:	40d3      	lsrs	r3, r2
 8000736:	002a      	movs	r2, r5
 8000738:	40e2      	lsrs	r2, r4
 800073a:	001c      	movs	r4, r3
 800073c:	465b      	mov	r3, fp
 800073e:	0015      	movs	r5, r2
 8000740:	2b00      	cmp	r3, #0
 8000742:	db2a      	blt.n	800079a <__udivmoddi4+0x182>
 8000744:	0026      	movs	r6, r4
 8000746:	409e      	lsls	r6, r3
 8000748:	0033      	movs	r3, r6
 800074a:	0026      	movs	r6, r4
 800074c:	4647      	mov	r7, r8
 800074e:	40be      	lsls	r6, r7
 8000750:	0032      	movs	r2, r6
 8000752:	1a80      	subs	r0, r0, r2
 8000754:	4199      	sbcs	r1, r3
 8000756:	9000      	str	r0, [sp, #0]
 8000758:	9101      	str	r1, [sp, #4]
 800075a:	e79f      	b.n	800069c <__udivmoddi4+0x84>
 800075c:	42a3      	cmp	r3, r4
 800075e:	d8bc      	bhi.n	80006da <__udivmoddi4+0xc2>
 8000760:	e783      	b.n	800066a <__udivmoddi4+0x52>
 8000762:	4642      	mov	r2, r8
 8000764:	2320      	movs	r3, #32
 8000766:	2100      	movs	r1, #0
 8000768:	1a9b      	subs	r3, r3, r2
 800076a:	2200      	movs	r2, #0
 800076c:	9100      	str	r1, [sp, #0]
 800076e:	9201      	str	r2, [sp, #4]
 8000770:	2201      	movs	r2, #1
 8000772:	40da      	lsrs	r2, r3
 8000774:	9201      	str	r2, [sp, #4]
 8000776:	e786      	b.n	8000686 <__udivmoddi4+0x6e>
 8000778:	4642      	mov	r2, r8
 800077a:	2320      	movs	r3, #32
 800077c:	1a9b      	subs	r3, r3, r2
 800077e:	002a      	movs	r2, r5
 8000780:	4646      	mov	r6, r8
 8000782:	409a      	lsls	r2, r3
 8000784:	0023      	movs	r3, r4
 8000786:	40f3      	lsrs	r3, r6
 8000788:	4644      	mov	r4, r8
 800078a:	4313      	orrs	r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	40e2      	lsrs	r2, r4
 8000790:	001c      	movs	r4, r3
 8000792:	465b      	mov	r3, fp
 8000794:	0015      	movs	r5, r2
 8000796:	2b00      	cmp	r3, #0
 8000798:	dad4      	bge.n	8000744 <__udivmoddi4+0x12c>
 800079a:	4642      	mov	r2, r8
 800079c:	002f      	movs	r7, r5
 800079e:	2320      	movs	r3, #32
 80007a0:	0026      	movs	r6, r4
 80007a2:	4097      	lsls	r7, r2
 80007a4:	1a9b      	subs	r3, r3, r2
 80007a6:	40de      	lsrs	r6, r3
 80007a8:	003b      	movs	r3, r7
 80007aa:	4333      	orrs	r3, r6
 80007ac:	e7cd      	b.n	800074a <__udivmoddi4+0x132>
 80007ae:	46c0      	nop			; (mov r8, r8)

080007b0 <__aeabi_fadd>:
 80007b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007b2:	4646      	mov	r6, r8
 80007b4:	46d6      	mov	lr, sl
 80007b6:	464f      	mov	r7, r9
 80007b8:	024d      	lsls	r5, r1, #9
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	b5c0      	push	{r6, r7, lr}
 80007be:	0a52      	lsrs	r2, r2, #9
 80007c0:	0a6e      	lsrs	r6, r5, #9
 80007c2:	0047      	lsls	r7, r0, #1
 80007c4:	46b0      	mov	r8, r6
 80007c6:	0e3f      	lsrs	r7, r7, #24
 80007c8:	004e      	lsls	r6, r1, #1
 80007ca:	0fc4      	lsrs	r4, r0, #31
 80007cc:	00d0      	lsls	r0, r2, #3
 80007ce:	4694      	mov	ip, r2
 80007d0:	003b      	movs	r3, r7
 80007d2:	4682      	mov	sl, r0
 80007d4:	0e36      	lsrs	r6, r6, #24
 80007d6:	0fc9      	lsrs	r1, r1, #31
 80007d8:	09ad      	lsrs	r5, r5, #6
 80007da:	428c      	cmp	r4, r1
 80007dc:	d06d      	beq.n	80008ba <__aeabi_fadd+0x10a>
 80007de:	1bb8      	subs	r0, r7, r6
 80007e0:	4681      	mov	r9, r0
 80007e2:	2800      	cmp	r0, #0
 80007e4:	dd4d      	ble.n	8000882 <__aeabi_fadd+0xd2>
 80007e6:	2e00      	cmp	r6, #0
 80007e8:	d100      	bne.n	80007ec <__aeabi_fadd+0x3c>
 80007ea:	e088      	b.n	80008fe <__aeabi_fadd+0x14e>
 80007ec:	2fff      	cmp	r7, #255	; 0xff
 80007ee:	d05a      	beq.n	80008a6 <__aeabi_fadd+0xf6>
 80007f0:	2380      	movs	r3, #128	; 0x80
 80007f2:	04db      	lsls	r3, r3, #19
 80007f4:	431d      	orrs	r5, r3
 80007f6:	464b      	mov	r3, r9
 80007f8:	2201      	movs	r2, #1
 80007fa:	2b1b      	cmp	r3, #27
 80007fc:	dc0a      	bgt.n	8000814 <__aeabi_fadd+0x64>
 80007fe:	002b      	movs	r3, r5
 8000800:	464a      	mov	r2, r9
 8000802:	4649      	mov	r1, r9
 8000804:	40d3      	lsrs	r3, r2
 8000806:	2220      	movs	r2, #32
 8000808:	1a52      	subs	r2, r2, r1
 800080a:	4095      	lsls	r5, r2
 800080c:	002a      	movs	r2, r5
 800080e:	1e55      	subs	r5, r2, #1
 8000810:	41aa      	sbcs	r2, r5
 8000812:	431a      	orrs	r2, r3
 8000814:	4653      	mov	r3, sl
 8000816:	1a9a      	subs	r2, r3, r2
 8000818:	0153      	lsls	r3, r2, #5
 800081a:	d400      	bmi.n	800081e <__aeabi_fadd+0x6e>
 800081c:	e0b9      	b.n	8000992 <__aeabi_fadd+0x1e2>
 800081e:	0192      	lsls	r2, r2, #6
 8000820:	0996      	lsrs	r6, r2, #6
 8000822:	0030      	movs	r0, r6
 8000824:	f002 faa6 	bl	8002d74 <__clzsi2>
 8000828:	3805      	subs	r0, #5
 800082a:	4086      	lsls	r6, r0
 800082c:	4287      	cmp	r7, r0
 800082e:	dd00      	ble.n	8000832 <__aeabi_fadd+0x82>
 8000830:	e0d4      	b.n	80009dc <__aeabi_fadd+0x22c>
 8000832:	0033      	movs	r3, r6
 8000834:	1bc7      	subs	r7, r0, r7
 8000836:	2020      	movs	r0, #32
 8000838:	3701      	adds	r7, #1
 800083a:	40fb      	lsrs	r3, r7
 800083c:	1bc7      	subs	r7, r0, r7
 800083e:	40be      	lsls	r6, r7
 8000840:	0032      	movs	r2, r6
 8000842:	1e56      	subs	r6, r2, #1
 8000844:	41b2      	sbcs	r2, r6
 8000846:	2700      	movs	r7, #0
 8000848:	431a      	orrs	r2, r3
 800084a:	0753      	lsls	r3, r2, #29
 800084c:	d004      	beq.n	8000858 <__aeabi_fadd+0xa8>
 800084e:	230f      	movs	r3, #15
 8000850:	4013      	ands	r3, r2
 8000852:	2b04      	cmp	r3, #4
 8000854:	d000      	beq.n	8000858 <__aeabi_fadd+0xa8>
 8000856:	3204      	adds	r2, #4
 8000858:	0153      	lsls	r3, r2, #5
 800085a:	d400      	bmi.n	800085e <__aeabi_fadd+0xae>
 800085c:	e09c      	b.n	8000998 <__aeabi_fadd+0x1e8>
 800085e:	1c7b      	adds	r3, r7, #1
 8000860:	2ffe      	cmp	r7, #254	; 0xfe
 8000862:	d100      	bne.n	8000866 <__aeabi_fadd+0xb6>
 8000864:	e09a      	b.n	800099c <__aeabi_fadd+0x1ec>
 8000866:	0192      	lsls	r2, r2, #6
 8000868:	0a52      	lsrs	r2, r2, #9
 800086a:	4694      	mov	ip, r2
 800086c:	b2db      	uxtb	r3, r3
 800086e:	05d8      	lsls	r0, r3, #23
 8000870:	4663      	mov	r3, ip
 8000872:	07e4      	lsls	r4, r4, #31
 8000874:	4318      	orrs	r0, r3
 8000876:	4320      	orrs	r0, r4
 8000878:	bce0      	pop	{r5, r6, r7}
 800087a:	46ba      	mov	sl, r7
 800087c:	46b1      	mov	r9, r6
 800087e:	46a8      	mov	r8, r5
 8000880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000882:	2800      	cmp	r0, #0
 8000884:	d049      	beq.n	800091a <__aeabi_fadd+0x16a>
 8000886:	1bf3      	subs	r3, r6, r7
 8000888:	2f00      	cmp	r7, #0
 800088a:	d000      	beq.n	800088e <__aeabi_fadd+0xde>
 800088c:	e0b6      	b.n	80009fc <__aeabi_fadd+0x24c>
 800088e:	4652      	mov	r2, sl
 8000890:	2a00      	cmp	r2, #0
 8000892:	d060      	beq.n	8000956 <__aeabi_fadd+0x1a6>
 8000894:	3b01      	subs	r3, #1
 8000896:	2b00      	cmp	r3, #0
 8000898:	d100      	bne.n	800089c <__aeabi_fadd+0xec>
 800089a:	e0fc      	b.n	8000a96 <__aeabi_fadd+0x2e6>
 800089c:	2eff      	cmp	r6, #255	; 0xff
 800089e:	d000      	beq.n	80008a2 <__aeabi_fadd+0xf2>
 80008a0:	e0b4      	b.n	8000a0c <__aeabi_fadd+0x25c>
 80008a2:	000c      	movs	r4, r1
 80008a4:	4642      	mov	r2, r8
 80008a6:	2a00      	cmp	r2, #0
 80008a8:	d078      	beq.n	800099c <__aeabi_fadd+0x1ec>
 80008aa:	2080      	movs	r0, #128	; 0x80
 80008ac:	03c0      	lsls	r0, r0, #15
 80008ae:	4310      	orrs	r0, r2
 80008b0:	0242      	lsls	r2, r0, #9
 80008b2:	0a53      	lsrs	r3, r2, #9
 80008b4:	469c      	mov	ip, r3
 80008b6:	23ff      	movs	r3, #255	; 0xff
 80008b8:	e7d9      	b.n	800086e <__aeabi_fadd+0xbe>
 80008ba:	1bb9      	subs	r1, r7, r6
 80008bc:	2900      	cmp	r1, #0
 80008be:	dd71      	ble.n	80009a4 <__aeabi_fadd+0x1f4>
 80008c0:	2e00      	cmp	r6, #0
 80008c2:	d03f      	beq.n	8000944 <__aeabi_fadd+0x194>
 80008c4:	2fff      	cmp	r7, #255	; 0xff
 80008c6:	d0ee      	beq.n	80008a6 <__aeabi_fadd+0xf6>
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	04db      	lsls	r3, r3, #19
 80008cc:	431d      	orrs	r5, r3
 80008ce:	2201      	movs	r2, #1
 80008d0:	291b      	cmp	r1, #27
 80008d2:	dc07      	bgt.n	80008e4 <__aeabi_fadd+0x134>
 80008d4:	002a      	movs	r2, r5
 80008d6:	2320      	movs	r3, #32
 80008d8:	40ca      	lsrs	r2, r1
 80008da:	1a59      	subs	r1, r3, r1
 80008dc:	408d      	lsls	r5, r1
 80008de:	1e6b      	subs	r3, r5, #1
 80008e0:	419d      	sbcs	r5, r3
 80008e2:	432a      	orrs	r2, r5
 80008e4:	4452      	add	r2, sl
 80008e6:	0153      	lsls	r3, r2, #5
 80008e8:	d553      	bpl.n	8000992 <__aeabi_fadd+0x1e2>
 80008ea:	3701      	adds	r7, #1
 80008ec:	2fff      	cmp	r7, #255	; 0xff
 80008ee:	d055      	beq.n	800099c <__aeabi_fadd+0x1ec>
 80008f0:	2301      	movs	r3, #1
 80008f2:	497b      	ldr	r1, [pc, #492]	; (8000ae0 <__aeabi_fadd+0x330>)
 80008f4:	4013      	ands	r3, r2
 80008f6:	0852      	lsrs	r2, r2, #1
 80008f8:	400a      	ands	r2, r1
 80008fa:	431a      	orrs	r2, r3
 80008fc:	e7a5      	b.n	800084a <__aeabi_fadd+0x9a>
 80008fe:	2d00      	cmp	r5, #0
 8000900:	d02c      	beq.n	800095c <__aeabi_fadd+0x1ac>
 8000902:	2301      	movs	r3, #1
 8000904:	425b      	negs	r3, r3
 8000906:	469c      	mov	ip, r3
 8000908:	44e1      	add	r9, ip
 800090a:	464b      	mov	r3, r9
 800090c:	2b00      	cmp	r3, #0
 800090e:	d100      	bne.n	8000912 <__aeabi_fadd+0x162>
 8000910:	e0ad      	b.n	8000a6e <__aeabi_fadd+0x2be>
 8000912:	2fff      	cmp	r7, #255	; 0xff
 8000914:	d000      	beq.n	8000918 <__aeabi_fadd+0x168>
 8000916:	e76e      	b.n	80007f6 <__aeabi_fadd+0x46>
 8000918:	e7c5      	b.n	80008a6 <__aeabi_fadd+0xf6>
 800091a:	20fe      	movs	r0, #254	; 0xfe
 800091c:	1c7e      	adds	r6, r7, #1
 800091e:	4230      	tst	r0, r6
 8000920:	d160      	bne.n	80009e4 <__aeabi_fadd+0x234>
 8000922:	2f00      	cmp	r7, #0
 8000924:	d000      	beq.n	8000928 <__aeabi_fadd+0x178>
 8000926:	e093      	b.n	8000a50 <__aeabi_fadd+0x2a0>
 8000928:	4652      	mov	r2, sl
 800092a:	2a00      	cmp	r2, #0
 800092c:	d100      	bne.n	8000930 <__aeabi_fadd+0x180>
 800092e:	e0b6      	b.n	8000a9e <__aeabi_fadd+0x2ee>
 8000930:	2d00      	cmp	r5, #0
 8000932:	d09c      	beq.n	800086e <__aeabi_fadd+0xbe>
 8000934:	1b52      	subs	r2, r2, r5
 8000936:	0150      	lsls	r0, r2, #5
 8000938:	d400      	bmi.n	800093c <__aeabi_fadd+0x18c>
 800093a:	e0c3      	b.n	8000ac4 <__aeabi_fadd+0x314>
 800093c:	4653      	mov	r3, sl
 800093e:	000c      	movs	r4, r1
 8000940:	1aea      	subs	r2, r5, r3
 8000942:	e782      	b.n	800084a <__aeabi_fadd+0x9a>
 8000944:	2d00      	cmp	r5, #0
 8000946:	d009      	beq.n	800095c <__aeabi_fadd+0x1ac>
 8000948:	3901      	subs	r1, #1
 800094a:	2900      	cmp	r1, #0
 800094c:	d100      	bne.n	8000950 <__aeabi_fadd+0x1a0>
 800094e:	e08b      	b.n	8000a68 <__aeabi_fadd+0x2b8>
 8000950:	2fff      	cmp	r7, #255	; 0xff
 8000952:	d1bc      	bne.n	80008ce <__aeabi_fadd+0x11e>
 8000954:	e7a7      	b.n	80008a6 <__aeabi_fadd+0xf6>
 8000956:	000c      	movs	r4, r1
 8000958:	4642      	mov	r2, r8
 800095a:	0037      	movs	r7, r6
 800095c:	2fff      	cmp	r7, #255	; 0xff
 800095e:	d0a2      	beq.n	80008a6 <__aeabi_fadd+0xf6>
 8000960:	0252      	lsls	r2, r2, #9
 8000962:	0a53      	lsrs	r3, r2, #9
 8000964:	469c      	mov	ip, r3
 8000966:	b2fb      	uxtb	r3, r7
 8000968:	e781      	b.n	800086e <__aeabi_fadd+0xbe>
 800096a:	21fe      	movs	r1, #254	; 0xfe
 800096c:	3701      	adds	r7, #1
 800096e:	4239      	tst	r1, r7
 8000970:	d165      	bne.n	8000a3e <__aeabi_fadd+0x28e>
 8000972:	2b00      	cmp	r3, #0
 8000974:	d17e      	bne.n	8000a74 <__aeabi_fadd+0x2c4>
 8000976:	2800      	cmp	r0, #0
 8000978:	d100      	bne.n	800097c <__aeabi_fadd+0x1cc>
 800097a:	e0aa      	b.n	8000ad2 <__aeabi_fadd+0x322>
 800097c:	2d00      	cmp	r5, #0
 800097e:	d100      	bne.n	8000982 <__aeabi_fadd+0x1d2>
 8000980:	e775      	b.n	800086e <__aeabi_fadd+0xbe>
 8000982:	002a      	movs	r2, r5
 8000984:	4452      	add	r2, sl
 8000986:	2700      	movs	r7, #0
 8000988:	0153      	lsls	r3, r2, #5
 800098a:	d502      	bpl.n	8000992 <__aeabi_fadd+0x1e2>
 800098c:	4b55      	ldr	r3, [pc, #340]	; (8000ae4 <__aeabi_fadd+0x334>)
 800098e:	3701      	adds	r7, #1
 8000990:	401a      	ands	r2, r3
 8000992:	0753      	lsls	r3, r2, #29
 8000994:	d000      	beq.n	8000998 <__aeabi_fadd+0x1e8>
 8000996:	e75a      	b.n	800084e <__aeabi_fadd+0x9e>
 8000998:	08d2      	lsrs	r2, r2, #3
 800099a:	e7df      	b.n	800095c <__aeabi_fadd+0x1ac>
 800099c:	2200      	movs	r2, #0
 800099e:	23ff      	movs	r3, #255	; 0xff
 80009a0:	4694      	mov	ip, r2
 80009a2:	e764      	b.n	800086e <__aeabi_fadd+0xbe>
 80009a4:	2900      	cmp	r1, #0
 80009a6:	d0e0      	beq.n	800096a <__aeabi_fadd+0x1ba>
 80009a8:	1bf3      	subs	r3, r6, r7
 80009aa:	2f00      	cmp	r7, #0
 80009ac:	d03e      	beq.n	8000a2c <__aeabi_fadd+0x27c>
 80009ae:	2eff      	cmp	r6, #255	; 0xff
 80009b0:	d100      	bne.n	80009b4 <__aeabi_fadd+0x204>
 80009b2:	e777      	b.n	80008a4 <__aeabi_fadd+0xf4>
 80009b4:	2280      	movs	r2, #128	; 0x80
 80009b6:	0001      	movs	r1, r0
 80009b8:	04d2      	lsls	r2, r2, #19
 80009ba:	4311      	orrs	r1, r2
 80009bc:	468a      	mov	sl, r1
 80009be:	2201      	movs	r2, #1
 80009c0:	2b1b      	cmp	r3, #27
 80009c2:	dc08      	bgt.n	80009d6 <__aeabi_fadd+0x226>
 80009c4:	4652      	mov	r2, sl
 80009c6:	2120      	movs	r1, #32
 80009c8:	4650      	mov	r0, sl
 80009ca:	40da      	lsrs	r2, r3
 80009cc:	1acb      	subs	r3, r1, r3
 80009ce:	4098      	lsls	r0, r3
 80009d0:	1e43      	subs	r3, r0, #1
 80009d2:	4198      	sbcs	r0, r3
 80009d4:	4302      	orrs	r2, r0
 80009d6:	0037      	movs	r7, r6
 80009d8:	1952      	adds	r2, r2, r5
 80009da:	e784      	b.n	80008e6 <__aeabi_fadd+0x136>
 80009dc:	4a41      	ldr	r2, [pc, #260]	; (8000ae4 <__aeabi_fadd+0x334>)
 80009de:	1a3f      	subs	r7, r7, r0
 80009e0:	4032      	ands	r2, r6
 80009e2:	e732      	b.n	800084a <__aeabi_fadd+0x9a>
 80009e4:	4653      	mov	r3, sl
 80009e6:	1b5e      	subs	r6, r3, r5
 80009e8:	0173      	lsls	r3, r6, #5
 80009ea:	d42d      	bmi.n	8000a48 <__aeabi_fadd+0x298>
 80009ec:	2e00      	cmp	r6, #0
 80009ee:	d000      	beq.n	80009f2 <__aeabi_fadd+0x242>
 80009f0:	e717      	b.n	8000822 <__aeabi_fadd+0x72>
 80009f2:	2200      	movs	r2, #0
 80009f4:	2400      	movs	r4, #0
 80009f6:	2300      	movs	r3, #0
 80009f8:	4694      	mov	ip, r2
 80009fa:	e738      	b.n	800086e <__aeabi_fadd+0xbe>
 80009fc:	2eff      	cmp	r6, #255	; 0xff
 80009fe:	d100      	bne.n	8000a02 <__aeabi_fadd+0x252>
 8000a00:	e74f      	b.n	80008a2 <__aeabi_fadd+0xf2>
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	4650      	mov	r0, sl
 8000a06:	04d2      	lsls	r2, r2, #19
 8000a08:	4310      	orrs	r0, r2
 8000a0a:	4682      	mov	sl, r0
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2b1b      	cmp	r3, #27
 8000a10:	dc08      	bgt.n	8000a24 <__aeabi_fadd+0x274>
 8000a12:	4652      	mov	r2, sl
 8000a14:	2420      	movs	r4, #32
 8000a16:	4650      	mov	r0, sl
 8000a18:	40da      	lsrs	r2, r3
 8000a1a:	1ae3      	subs	r3, r4, r3
 8000a1c:	4098      	lsls	r0, r3
 8000a1e:	1e43      	subs	r3, r0, #1
 8000a20:	4198      	sbcs	r0, r3
 8000a22:	4302      	orrs	r2, r0
 8000a24:	000c      	movs	r4, r1
 8000a26:	0037      	movs	r7, r6
 8000a28:	1aaa      	subs	r2, r5, r2
 8000a2a:	e6f5      	b.n	8000818 <__aeabi_fadd+0x68>
 8000a2c:	2800      	cmp	r0, #0
 8000a2e:	d093      	beq.n	8000958 <__aeabi_fadd+0x1a8>
 8000a30:	3b01      	subs	r3, #1
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d04f      	beq.n	8000ad6 <__aeabi_fadd+0x326>
 8000a36:	2eff      	cmp	r6, #255	; 0xff
 8000a38:	d1c1      	bne.n	80009be <__aeabi_fadd+0x20e>
 8000a3a:	4642      	mov	r2, r8
 8000a3c:	e733      	b.n	80008a6 <__aeabi_fadd+0xf6>
 8000a3e:	2fff      	cmp	r7, #255	; 0xff
 8000a40:	d0ac      	beq.n	800099c <__aeabi_fadd+0x1ec>
 8000a42:	4455      	add	r5, sl
 8000a44:	086a      	lsrs	r2, r5, #1
 8000a46:	e7a4      	b.n	8000992 <__aeabi_fadd+0x1e2>
 8000a48:	4653      	mov	r3, sl
 8000a4a:	000c      	movs	r4, r1
 8000a4c:	1aee      	subs	r6, r5, r3
 8000a4e:	e6e8      	b.n	8000822 <__aeabi_fadd+0x72>
 8000a50:	4653      	mov	r3, sl
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d128      	bne.n	8000aa8 <__aeabi_fadd+0x2f8>
 8000a56:	2d00      	cmp	r5, #0
 8000a58:	d000      	beq.n	8000a5c <__aeabi_fadd+0x2ac>
 8000a5a:	e722      	b.n	80008a2 <__aeabi_fadd+0xf2>
 8000a5c:	2380      	movs	r3, #128	; 0x80
 8000a5e:	03db      	lsls	r3, r3, #15
 8000a60:	469c      	mov	ip, r3
 8000a62:	2400      	movs	r4, #0
 8000a64:	23ff      	movs	r3, #255	; 0xff
 8000a66:	e702      	b.n	800086e <__aeabi_fadd+0xbe>
 8000a68:	002a      	movs	r2, r5
 8000a6a:	4452      	add	r2, sl
 8000a6c:	e73b      	b.n	80008e6 <__aeabi_fadd+0x136>
 8000a6e:	4653      	mov	r3, sl
 8000a70:	1b5a      	subs	r2, r3, r5
 8000a72:	e6d1      	b.n	8000818 <__aeabi_fadd+0x68>
 8000a74:	2800      	cmp	r0, #0
 8000a76:	d100      	bne.n	8000a7a <__aeabi_fadd+0x2ca>
 8000a78:	e714      	b.n	80008a4 <__aeabi_fadd+0xf4>
 8000a7a:	2d00      	cmp	r5, #0
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_fadd+0x2d0>
 8000a7e:	e712      	b.n	80008a6 <__aeabi_fadd+0xf6>
 8000a80:	2380      	movs	r3, #128	; 0x80
 8000a82:	03db      	lsls	r3, r3, #15
 8000a84:	421a      	tst	r2, r3
 8000a86:	d100      	bne.n	8000a8a <__aeabi_fadd+0x2da>
 8000a88:	e70d      	b.n	80008a6 <__aeabi_fadd+0xf6>
 8000a8a:	4641      	mov	r1, r8
 8000a8c:	4219      	tst	r1, r3
 8000a8e:	d000      	beq.n	8000a92 <__aeabi_fadd+0x2e2>
 8000a90:	e709      	b.n	80008a6 <__aeabi_fadd+0xf6>
 8000a92:	4642      	mov	r2, r8
 8000a94:	e707      	b.n	80008a6 <__aeabi_fadd+0xf6>
 8000a96:	000c      	movs	r4, r1
 8000a98:	0037      	movs	r7, r6
 8000a9a:	1aaa      	subs	r2, r5, r2
 8000a9c:	e6bc      	b.n	8000818 <__aeabi_fadd+0x68>
 8000a9e:	2d00      	cmp	r5, #0
 8000aa0:	d013      	beq.n	8000aca <__aeabi_fadd+0x31a>
 8000aa2:	000c      	movs	r4, r1
 8000aa4:	46c4      	mov	ip, r8
 8000aa6:	e6e2      	b.n	800086e <__aeabi_fadd+0xbe>
 8000aa8:	2d00      	cmp	r5, #0
 8000aaa:	d100      	bne.n	8000aae <__aeabi_fadd+0x2fe>
 8000aac:	e6fb      	b.n	80008a6 <__aeabi_fadd+0xf6>
 8000aae:	2380      	movs	r3, #128	; 0x80
 8000ab0:	03db      	lsls	r3, r3, #15
 8000ab2:	421a      	tst	r2, r3
 8000ab4:	d100      	bne.n	8000ab8 <__aeabi_fadd+0x308>
 8000ab6:	e6f6      	b.n	80008a6 <__aeabi_fadd+0xf6>
 8000ab8:	4640      	mov	r0, r8
 8000aba:	4218      	tst	r0, r3
 8000abc:	d000      	beq.n	8000ac0 <__aeabi_fadd+0x310>
 8000abe:	e6f2      	b.n	80008a6 <__aeabi_fadd+0xf6>
 8000ac0:	000c      	movs	r4, r1
 8000ac2:	e6ef      	b.n	80008a4 <__aeabi_fadd+0xf4>
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	d000      	beq.n	8000aca <__aeabi_fadd+0x31a>
 8000ac8:	e763      	b.n	8000992 <__aeabi_fadd+0x1e2>
 8000aca:	2200      	movs	r2, #0
 8000acc:	2400      	movs	r4, #0
 8000ace:	4694      	mov	ip, r2
 8000ad0:	e6cd      	b.n	800086e <__aeabi_fadd+0xbe>
 8000ad2:	46c4      	mov	ip, r8
 8000ad4:	e6cb      	b.n	800086e <__aeabi_fadd+0xbe>
 8000ad6:	002a      	movs	r2, r5
 8000ad8:	0037      	movs	r7, r6
 8000ada:	4452      	add	r2, sl
 8000adc:	e703      	b.n	80008e6 <__aeabi_fadd+0x136>
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	7dffffff 	.word	0x7dffffff
 8000ae4:	fbffffff 	.word	0xfbffffff

08000ae8 <__eqsf2>:
 8000ae8:	b570      	push	{r4, r5, r6, lr}
 8000aea:	0042      	lsls	r2, r0, #1
 8000aec:	024e      	lsls	r6, r1, #9
 8000aee:	004c      	lsls	r4, r1, #1
 8000af0:	0245      	lsls	r5, r0, #9
 8000af2:	0a6d      	lsrs	r5, r5, #9
 8000af4:	0e12      	lsrs	r2, r2, #24
 8000af6:	0fc3      	lsrs	r3, r0, #31
 8000af8:	0a76      	lsrs	r6, r6, #9
 8000afa:	0e24      	lsrs	r4, r4, #24
 8000afc:	0fc9      	lsrs	r1, r1, #31
 8000afe:	2aff      	cmp	r2, #255	; 0xff
 8000b00:	d00f      	beq.n	8000b22 <__eqsf2+0x3a>
 8000b02:	2cff      	cmp	r4, #255	; 0xff
 8000b04:	d011      	beq.n	8000b2a <__eqsf2+0x42>
 8000b06:	2001      	movs	r0, #1
 8000b08:	42a2      	cmp	r2, r4
 8000b0a:	d000      	beq.n	8000b0e <__eqsf2+0x26>
 8000b0c:	bd70      	pop	{r4, r5, r6, pc}
 8000b0e:	42b5      	cmp	r5, r6
 8000b10:	d1fc      	bne.n	8000b0c <__eqsf2+0x24>
 8000b12:	428b      	cmp	r3, r1
 8000b14:	d00d      	beq.n	8000b32 <__eqsf2+0x4a>
 8000b16:	2a00      	cmp	r2, #0
 8000b18:	d1f8      	bne.n	8000b0c <__eqsf2+0x24>
 8000b1a:	0028      	movs	r0, r5
 8000b1c:	1e45      	subs	r5, r0, #1
 8000b1e:	41a8      	sbcs	r0, r5
 8000b20:	e7f4      	b.n	8000b0c <__eqsf2+0x24>
 8000b22:	2001      	movs	r0, #1
 8000b24:	2d00      	cmp	r5, #0
 8000b26:	d1f1      	bne.n	8000b0c <__eqsf2+0x24>
 8000b28:	e7eb      	b.n	8000b02 <__eqsf2+0x1a>
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	2e00      	cmp	r6, #0
 8000b2e:	d1ed      	bne.n	8000b0c <__eqsf2+0x24>
 8000b30:	e7e9      	b.n	8000b06 <__eqsf2+0x1e>
 8000b32:	2000      	movs	r0, #0
 8000b34:	e7ea      	b.n	8000b0c <__eqsf2+0x24>
 8000b36:	46c0      	nop			; (mov r8, r8)

08000b38 <__gesf2>:
 8000b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b3a:	0042      	lsls	r2, r0, #1
 8000b3c:	0246      	lsls	r6, r0, #9
 8000b3e:	024d      	lsls	r5, r1, #9
 8000b40:	004c      	lsls	r4, r1, #1
 8000b42:	0fc3      	lsrs	r3, r0, #31
 8000b44:	0a76      	lsrs	r6, r6, #9
 8000b46:	0e12      	lsrs	r2, r2, #24
 8000b48:	0a6d      	lsrs	r5, r5, #9
 8000b4a:	0e24      	lsrs	r4, r4, #24
 8000b4c:	0fc8      	lsrs	r0, r1, #31
 8000b4e:	2aff      	cmp	r2, #255	; 0xff
 8000b50:	d01f      	beq.n	8000b92 <__gesf2+0x5a>
 8000b52:	2cff      	cmp	r4, #255	; 0xff
 8000b54:	d010      	beq.n	8000b78 <__gesf2+0x40>
 8000b56:	2a00      	cmp	r2, #0
 8000b58:	d11f      	bne.n	8000b9a <__gesf2+0x62>
 8000b5a:	4271      	negs	r1, r6
 8000b5c:	4171      	adcs	r1, r6
 8000b5e:	2c00      	cmp	r4, #0
 8000b60:	d101      	bne.n	8000b66 <__gesf2+0x2e>
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d01e      	beq.n	8000ba4 <__gesf2+0x6c>
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d10e      	bne.n	8000b88 <__gesf2+0x50>
 8000b6a:	4283      	cmp	r3, r0
 8000b6c:	d01e      	beq.n	8000bac <__gesf2+0x74>
 8000b6e:	2102      	movs	r1, #2
 8000b70:	1e58      	subs	r0, r3, #1
 8000b72:	4008      	ands	r0, r1
 8000b74:	3801      	subs	r0, #1
 8000b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b78:	2d00      	cmp	r5, #0
 8000b7a:	d126      	bne.n	8000bca <__gesf2+0x92>
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	d1f4      	bne.n	8000b6a <__gesf2+0x32>
 8000b80:	4271      	negs	r1, r6
 8000b82:	4171      	adcs	r1, r6
 8000b84:	2900      	cmp	r1, #0
 8000b86:	d0f0      	beq.n	8000b6a <__gesf2+0x32>
 8000b88:	2800      	cmp	r0, #0
 8000b8a:	d1f4      	bne.n	8000b76 <__gesf2+0x3e>
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	4240      	negs	r0, r0
 8000b90:	e7f1      	b.n	8000b76 <__gesf2+0x3e>
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d119      	bne.n	8000bca <__gesf2+0x92>
 8000b96:	2cff      	cmp	r4, #255	; 0xff
 8000b98:	d0ee      	beq.n	8000b78 <__gesf2+0x40>
 8000b9a:	2c00      	cmp	r4, #0
 8000b9c:	d1e5      	bne.n	8000b6a <__gesf2+0x32>
 8000b9e:	2d00      	cmp	r5, #0
 8000ba0:	d1e3      	bne.n	8000b6a <__gesf2+0x32>
 8000ba2:	e7e4      	b.n	8000b6e <__gesf2+0x36>
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d0e5      	beq.n	8000b76 <__gesf2+0x3e>
 8000baa:	e7e0      	b.n	8000b6e <__gesf2+0x36>
 8000bac:	42a2      	cmp	r2, r4
 8000bae:	dc05      	bgt.n	8000bbc <__gesf2+0x84>
 8000bb0:	dbea      	blt.n	8000b88 <__gesf2+0x50>
 8000bb2:	42ae      	cmp	r6, r5
 8000bb4:	d802      	bhi.n	8000bbc <__gesf2+0x84>
 8000bb6:	d3e7      	bcc.n	8000b88 <__gesf2+0x50>
 8000bb8:	2000      	movs	r0, #0
 8000bba:	e7dc      	b.n	8000b76 <__gesf2+0x3e>
 8000bbc:	4241      	negs	r1, r0
 8000bbe:	4141      	adcs	r1, r0
 8000bc0:	4248      	negs	r0, r1
 8000bc2:	2102      	movs	r1, #2
 8000bc4:	4008      	ands	r0, r1
 8000bc6:	3801      	subs	r0, #1
 8000bc8:	e7d5      	b.n	8000b76 <__gesf2+0x3e>
 8000bca:	2002      	movs	r0, #2
 8000bcc:	4240      	negs	r0, r0
 8000bce:	e7d2      	b.n	8000b76 <__gesf2+0x3e>

08000bd0 <__lesf2>:
 8000bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd2:	0042      	lsls	r2, r0, #1
 8000bd4:	0246      	lsls	r6, r0, #9
 8000bd6:	024d      	lsls	r5, r1, #9
 8000bd8:	004c      	lsls	r4, r1, #1
 8000bda:	0fc3      	lsrs	r3, r0, #31
 8000bdc:	0a76      	lsrs	r6, r6, #9
 8000bde:	0e12      	lsrs	r2, r2, #24
 8000be0:	0a6d      	lsrs	r5, r5, #9
 8000be2:	0e24      	lsrs	r4, r4, #24
 8000be4:	0fc8      	lsrs	r0, r1, #31
 8000be6:	2aff      	cmp	r2, #255	; 0xff
 8000be8:	d00d      	beq.n	8000c06 <__lesf2+0x36>
 8000bea:	2cff      	cmp	r4, #255	; 0xff
 8000bec:	d00f      	beq.n	8000c0e <__lesf2+0x3e>
 8000bee:	2a00      	cmp	r2, #0
 8000bf0:	d123      	bne.n	8000c3a <__lesf2+0x6a>
 8000bf2:	4271      	negs	r1, r6
 8000bf4:	4171      	adcs	r1, r6
 8000bf6:	2c00      	cmp	r4, #0
 8000bf8:	d10f      	bne.n	8000c1a <__lesf2+0x4a>
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d10d      	bne.n	8000c1a <__lesf2+0x4a>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	2e00      	cmp	r6, #0
 8000c02:	d014      	beq.n	8000c2e <__lesf2+0x5e>
 8000c04:	e00d      	b.n	8000c22 <__lesf2+0x52>
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	d110      	bne.n	8000c2c <__lesf2+0x5c>
 8000c0a:	2cff      	cmp	r4, #255	; 0xff
 8000c0c:	d115      	bne.n	8000c3a <__lesf2+0x6a>
 8000c0e:	2d00      	cmp	r5, #0
 8000c10:	d10c      	bne.n	8000c2c <__lesf2+0x5c>
 8000c12:	2a00      	cmp	r2, #0
 8000c14:	d103      	bne.n	8000c1e <__lesf2+0x4e>
 8000c16:	4271      	negs	r1, r6
 8000c18:	4171      	adcs	r1, r6
 8000c1a:	2900      	cmp	r1, #0
 8000c1c:	d108      	bne.n	8000c30 <__lesf2+0x60>
 8000c1e:	4283      	cmp	r3, r0
 8000c20:	d010      	beq.n	8000c44 <__lesf2+0x74>
 8000c22:	2102      	movs	r1, #2
 8000c24:	1e58      	subs	r0, r3, #1
 8000c26:	4008      	ands	r0, r1
 8000c28:	3801      	subs	r0, #1
 8000c2a:	e000      	b.n	8000c2e <__lesf2+0x5e>
 8000c2c:	2002      	movs	r0, #2
 8000c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c30:	2800      	cmp	r0, #0
 8000c32:	d1fc      	bne.n	8000c2e <__lesf2+0x5e>
 8000c34:	2001      	movs	r0, #1
 8000c36:	4240      	negs	r0, r0
 8000c38:	e7f9      	b.n	8000c2e <__lesf2+0x5e>
 8000c3a:	2c00      	cmp	r4, #0
 8000c3c:	d1ef      	bne.n	8000c1e <__lesf2+0x4e>
 8000c3e:	2d00      	cmp	r5, #0
 8000c40:	d1ed      	bne.n	8000c1e <__lesf2+0x4e>
 8000c42:	e7ee      	b.n	8000c22 <__lesf2+0x52>
 8000c44:	42a2      	cmp	r2, r4
 8000c46:	dc05      	bgt.n	8000c54 <__lesf2+0x84>
 8000c48:	dbf2      	blt.n	8000c30 <__lesf2+0x60>
 8000c4a:	42ae      	cmp	r6, r5
 8000c4c:	d802      	bhi.n	8000c54 <__lesf2+0x84>
 8000c4e:	d3ef      	bcc.n	8000c30 <__lesf2+0x60>
 8000c50:	2000      	movs	r0, #0
 8000c52:	e7ec      	b.n	8000c2e <__lesf2+0x5e>
 8000c54:	4241      	negs	r1, r0
 8000c56:	4141      	adcs	r1, r0
 8000c58:	4248      	negs	r0, r1
 8000c5a:	2102      	movs	r1, #2
 8000c5c:	4008      	ands	r0, r1
 8000c5e:	3801      	subs	r0, #1
 8000c60:	e7e5      	b.n	8000c2e <__lesf2+0x5e>
 8000c62:	46c0      	nop			; (mov r8, r8)

08000c64 <__aeabi_fsub>:
 8000c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c66:	4646      	mov	r6, r8
 8000c68:	46d6      	mov	lr, sl
 8000c6a:	464f      	mov	r7, r9
 8000c6c:	0243      	lsls	r3, r0, #9
 8000c6e:	0a5b      	lsrs	r3, r3, #9
 8000c70:	00da      	lsls	r2, r3, #3
 8000c72:	4694      	mov	ip, r2
 8000c74:	024a      	lsls	r2, r1, #9
 8000c76:	b5c0      	push	{r6, r7, lr}
 8000c78:	0044      	lsls	r4, r0, #1
 8000c7a:	0a56      	lsrs	r6, r2, #9
 8000c7c:	1c05      	adds	r5, r0, #0
 8000c7e:	46b0      	mov	r8, r6
 8000c80:	0e24      	lsrs	r4, r4, #24
 8000c82:	004e      	lsls	r6, r1, #1
 8000c84:	0992      	lsrs	r2, r2, #6
 8000c86:	001f      	movs	r7, r3
 8000c88:	0020      	movs	r0, r4
 8000c8a:	4692      	mov	sl, r2
 8000c8c:	0fed      	lsrs	r5, r5, #31
 8000c8e:	0e36      	lsrs	r6, r6, #24
 8000c90:	0fc9      	lsrs	r1, r1, #31
 8000c92:	2eff      	cmp	r6, #255	; 0xff
 8000c94:	d100      	bne.n	8000c98 <__aeabi_fsub+0x34>
 8000c96:	e07f      	b.n	8000d98 <__aeabi_fsub+0x134>
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4051      	eors	r1, r2
 8000c9c:	428d      	cmp	r5, r1
 8000c9e:	d051      	beq.n	8000d44 <__aeabi_fsub+0xe0>
 8000ca0:	1ba2      	subs	r2, r4, r6
 8000ca2:	4691      	mov	r9, r2
 8000ca4:	2a00      	cmp	r2, #0
 8000ca6:	dc00      	bgt.n	8000caa <__aeabi_fsub+0x46>
 8000ca8:	e07e      	b.n	8000da8 <__aeabi_fsub+0x144>
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_fsub+0x4c>
 8000cae:	e099      	b.n	8000de4 <__aeabi_fsub+0x180>
 8000cb0:	2cff      	cmp	r4, #255	; 0xff
 8000cb2:	d100      	bne.n	8000cb6 <__aeabi_fsub+0x52>
 8000cb4:	e08c      	b.n	8000dd0 <__aeabi_fsub+0x16c>
 8000cb6:	2380      	movs	r3, #128	; 0x80
 8000cb8:	4652      	mov	r2, sl
 8000cba:	04db      	lsls	r3, r3, #19
 8000cbc:	431a      	orrs	r2, r3
 8000cbe:	4692      	mov	sl, r2
 8000cc0:	464a      	mov	r2, r9
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	2a1b      	cmp	r2, #27
 8000cc6:	dc08      	bgt.n	8000cda <__aeabi_fsub+0x76>
 8000cc8:	4653      	mov	r3, sl
 8000cca:	2120      	movs	r1, #32
 8000ccc:	40d3      	lsrs	r3, r2
 8000cce:	1a89      	subs	r1, r1, r2
 8000cd0:	4652      	mov	r2, sl
 8000cd2:	408a      	lsls	r2, r1
 8000cd4:	1e51      	subs	r1, r2, #1
 8000cd6:	418a      	sbcs	r2, r1
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	4662      	mov	r2, ip
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	015a      	lsls	r2, r3, #5
 8000ce0:	d400      	bmi.n	8000ce4 <__aeabi_fsub+0x80>
 8000ce2:	e0f3      	b.n	8000ecc <__aeabi_fsub+0x268>
 8000ce4:	019b      	lsls	r3, r3, #6
 8000ce6:	099e      	lsrs	r6, r3, #6
 8000ce8:	0030      	movs	r0, r6
 8000cea:	f002 f843 	bl	8002d74 <__clzsi2>
 8000cee:	3805      	subs	r0, #5
 8000cf0:	4086      	lsls	r6, r0
 8000cf2:	4284      	cmp	r4, r0
 8000cf4:	dd00      	ble.n	8000cf8 <__aeabi_fsub+0x94>
 8000cf6:	e0f7      	b.n	8000ee8 <__aeabi_fsub+0x284>
 8000cf8:	0032      	movs	r2, r6
 8000cfa:	1b04      	subs	r4, r0, r4
 8000cfc:	2020      	movs	r0, #32
 8000cfe:	3401      	adds	r4, #1
 8000d00:	40e2      	lsrs	r2, r4
 8000d02:	1b04      	subs	r4, r0, r4
 8000d04:	40a6      	lsls	r6, r4
 8000d06:	0033      	movs	r3, r6
 8000d08:	1e5e      	subs	r6, r3, #1
 8000d0a:	41b3      	sbcs	r3, r6
 8000d0c:	2400      	movs	r4, #0
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	075a      	lsls	r2, r3, #29
 8000d12:	d004      	beq.n	8000d1e <__aeabi_fsub+0xba>
 8000d14:	220f      	movs	r2, #15
 8000d16:	401a      	ands	r2, r3
 8000d18:	2a04      	cmp	r2, #4
 8000d1a:	d000      	beq.n	8000d1e <__aeabi_fsub+0xba>
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	015a      	lsls	r2, r3, #5
 8000d20:	d400      	bmi.n	8000d24 <__aeabi_fsub+0xc0>
 8000d22:	e0d6      	b.n	8000ed2 <__aeabi_fsub+0x26e>
 8000d24:	1c62      	adds	r2, r4, #1
 8000d26:	2cfe      	cmp	r4, #254	; 0xfe
 8000d28:	d100      	bne.n	8000d2c <__aeabi_fsub+0xc8>
 8000d2a:	e0da      	b.n	8000ee2 <__aeabi_fsub+0x27e>
 8000d2c:	019b      	lsls	r3, r3, #6
 8000d2e:	0a5f      	lsrs	r7, r3, #9
 8000d30:	b2d0      	uxtb	r0, r2
 8000d32:	05c0      	lsls	r0, r0, #23
 8000d34:	4338      	orrs	r0, r7
 8000d36:	07ed      	lsls	r5, r5, #31
 8000d38:	4328      	orrs	r0, r5
 8000d3a:	bce0      	pop	{r5, r6, r7}
 8000d3c:	46ba      	mov	sl, r7
 8000d3e:	46b1      	mov	r9, r6
 8000d40:	46a8      	mov	r8, r5
 8000d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d44:	1ba2      	subs	r2, r4, r6
 8000d46:	4691      	mov	r9, r2
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	dd63      	ble.n	8000e14 <__aeabi_fsub+0x1b0>
 8000d4c:	2e00      	cmp	r6, #0
 8000d4e:	d100      	bne.n	8000d52 <__aeabi_fsub+0xee>
 8000d50:	e099      	b.n	8000e86 <__aeabi_fsub+0x222>
 8000d52:	2cff      	cmp	r4, #255	; 0xff
 8000d54:	d03c      	beq.n	8000dd0 <__aeabi_fsub+0x16c>
 8000d56:	2380      	movs	r3, #128	; 0x80
 8000d58:	4652      	mov	r2, sl
 8000d5a:	04db      	lsls	r3, r3, #19
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	4692      	mov	sl, r2
 8000d60:	464a      	mov	r2, r9
 8000d62:	2301      	movs	r3, #1
 8000d64:	2a1b      	cmp	r2, #27
 8000d66:	dc08      	bgt.n	8000d7a <__aeabi_fsub+0x116>
 8000d68:	4653      	mov	r3, sl
 8000d6a:	2120      	movs	r1, #32
 8000d6c:	40d3      	lsrs	r3, r2
 8000d6e:	1a89      	subs	r1, r1, r2
 8000d70:	4652      	mov	r2, sl
 8000d72:	408a      	lsls	r2, r1
 8000d74:	1e51      	subs	r1, r2, #1
 8000d76:	418a      	sbcs	r2, r1
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	015a      	lsls	r2, r3, #5
 8000d7e:	d400      	bmi.n	8000d82 <__aeabi_fsub+0x11e>
 8000d80:	e0a4      	b.n	8000ecc <__aeabi_fsub+0x268>
 8000d82:	3401      	adds	r4, #1
 8000d84:	2cff      	cmp	r4, #255	; 0xff
 8000d86:	d100      	bne.n	8000d8a <__aeabi_fsub+0x126>
 8000d88:	e0ab      	b.n	8000ee2 <__aeabi_fsub+0x27e>
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	4997      	ldr	r1, [pc, #604]	; (8000fec <__aeabi_fsub+0x388>)
 8000d8e:	401a      	ands	r2, r3
 8000d90:	085b      	lsrs	r3, r3, #1
 8000d92:	400b      	ands	r3, r1
 8000d94:	4313      	orrs	r3, r2
 8000d96:	e7bb      	b.n	8000d10 <__aeabi_fsub+0xac>
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	d032      	beq.n	8000e02 <__aeabi_fsub+0x19e>
 8000d9c:	428d      	cmp	r5, r1
 8000d9e:	d035      	beq.n	8000e0c <__aeabi_fsub+0x1a8>
 8000da0:	22ff      	movs	r2, #255	; 0xff
 8000da2:	4252      	negs	r2, r2
 8000da4:	4691      	mov	r9, r2
 8000da6:	44a1      	add	r9, r4
 8000da8:	464a      	mov	r2, r9
 8000daa:	2a00      	cmp	r2, #0
 8000dac:	d051      	beq.n	8000e52 <__aeabi_fsub+0x1ee>
 8000dae:	1b30      	subs	r0, r6, r4
 8000db0:	2c00      	cmp	r4, #0
 8000db2:	d000      	beq.n	8000db6 <__aeabi_fsub+0x152>
 8000db4:	e09c      	b.n	8000ef0 <__aeabi_fsub+0x28c>
 8000db6:	4663      	mov	r3, ip
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d100      	bne.n	8000dbe <__aeabi_fsub+0x15a>
 8000dbc:	e0df      	b.n	8000f7e <__aeabi_fsub+0x31a>
 8000dbe:	3801      	subs	r0, #1
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_fsub+0x162>
 8000dc4:	e0f7      	b.n	8000fb6 <__aeabi_fsub+0x352>
 8000dc6:	2eff      	cmp	r6, #255	; 0xff
 8000dc8:	d000      	beq.n	8000dcc <__aeabi_fsub+0x168>
 8000dca:	e099      	b.n	8000f00 <__aeabi_fsub+0x29c>
 8000dcc:	000d      	movs	r5, r1
 8000dce:	4643      	mov	r3, r8
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d100      	bne.n	8000dd6 <__aeabi_fsub+0x172>
 8000dd4:	e085      	b.n	8000ee2 <__aeabi_fsub+0x27e>
 8000dd6:	2780      	movs	r7, #128	; 0x80
 8000dd8:	03ff      	lsls	r7, r7, #15
 8000dda:	431f      	orrs	r7, r3
 8000ddc:	027f      	lsls	r7, r7, #9
 8000dde:	20ff      	movs	r0, #255	; 0xff
 8000de0:	0a7f      	lsrs	r7, r7, #9
 8000de2:	e7a6      	b.n	8000d32 <__aeabi_fsub+0xce>
 8000de4:	4652      	mov	r2, sl
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	d074      	beq.n	8000ed4 <__aeabi_fsub+0x270>
 8000dea:	2201      	movs	r2, #1
 8000dec:	4252      	negs	r2, r2
 8000dee:	4690      	mov	r8, r2
 8000df0:	44c1      	add	r9, r8
 8000df2:	464a      	mov	r2, r9
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	d100      	bne.n	8000dfa <__aeabi_fsub+0x196>
 8000df8:	e0c8      	b.n	8000f8c <__aeabi_fsub+0x328>
 8000dfa:	2cff      	cmp	r4, #255	; 0xff
 8000dfc:	d000      	beq.n	8000e00 <__aeabi_fsub+0x19c>
 8000dfe:	e75f      	b.n	8000cc0 <__aeabi_fsub+0x5c>
 8000e00:	e7e6      	b.n	8000dd0 <__aeabi_fsub+0x16c>
 8000e02:	2201      	movs	r2, #1
 8000e04:	4051      	eors	r1, r2
 8000e06:	42a9      	cmp	r1, r5
 8000e08:	d000      	beq.n	8000e0c <__aeabi_fsub+0x1a8>
 8000e0a:	e749      	b.n	8000ca0 <__aeabi_fsub+0x3c>
 8000e0c:	22ff      	movs	r2, #255	; 0xff
 8000e0e:	4252      	negs	r2, r2
 8000e10:	4691      	mov	r9, r2
 8000e12:	44a1      	add	r9, r4
 8000e14:	464a      	mov	r2, r9
 8000e16:	2a00      	cmp	r2, #0
 8000e18:	d043      	beq.n	8000ea2 <__aeabi_fsub+0x23e>
 8000e1a:	1b31      	subs	r1, r6, r4
 8000e1c:	2c00      	cmp	r4, #0
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_fsub+0x1be>
 8000e20:	e08c      	b.n	8000f3c <__aeabi_fsub+0x2d8>
 8000e22:	2eff      	cmp	r6, #255	; 0xff
 8000e24:	d100      	bne.n	8000e28 <__aeabi_fsub+0x1c4>
 8000e26:	e092      	b.n	8000f4e <__aeabi_fsub+0x2ea>
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	4662      	mov	r2, ip
 8000e2c:	04db      	lsls	r3, r3, #19
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	4694      	mov	ip, r2
 8000e32:	2301      	movs	r3, #1
 8000e34:	291b      	cmp	r1, #27
 8000e36:	dc09      	bgt.n	8000e4c <__aeabi_fsub+0x1e8>
 8000e38:	2020      	movs	r0, #32
 8000e3a:	4663      	mov	r3, ip
 8000e3c:	4662      	mov	r2, ip
 8000e3e:	40cb      	lsrs	r3, r1
 8000e40:	1a41      	subs	r1, r0, r1
 8000e42:	408a      	lsls	r2, r1
 8000e44:	0011      	movs	r1, r2
 8000e46:	1e48      	subs	r0, r1, #1
 8000e48:	4181      	sbcs	r1, r0
 8000e4a:	430b      	orrs	r3, r1
 8000e4c:	0034      	movs	r4, r6
 8000e4e:	4453      	add	r3, sl
 8000e50:	e794      	b.n	8000d7c <__aeabi_fsub+0x118>
 8000e52:	22fe      	movs	r2, #254	; 0xfe
 8000e54:	1c66      	adds	r6, r4, #1
 8000e56:	4232      	tst	r2, r6
 8000e58:	d164      	bne.n	8000f24 <__aeabi_fsub+0x2c0>
 8000e5a:	2c00      	cmp	r4, #0
 8000e5c:	d000      	beq.n	8000e60 <__aeabi_fsub+0x1fc>
 8000e5e:	e082      	b.n	8000f66 <__aeabi_fsub+0x302>
 8000e60:	4663      	mov	r3, ip
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d100      	bne.n	8000e68 <__aeabi_fsub+0x204>
 8000e66:	e0ab      	b.n	8000fc0 <__aeabi_fsub+0x35c>
 8000e68:	4653      	mov	r3, sl
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_fsub+0x20c>
 8000e6e:	e760      	b.n	8000d32 <__aeabi_fsub+0xce>
 8000e70:	4663      	mov	r3, ip
 8000e72:	4652      	mov	r2, sl
 8000e74:	1a9b      	subs	r3, r3, r2
 8000e76:	015a      	lsls	r2, r3, #5
 8000e78:	d400      	bmi.n	8000e7c <__aeabi_fsub+0x218>
 8000e7a:	e0aa      	b.n	8000fd2 <__aeabi_fsub+0x36e>
 8000e7c:	4663      	mov	r3, ip
 8000e7e:	4652      	mov	r2, sl
 8000e80:	000d      	movs	r5, r1
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	e744      	b.n	8000d10 <__aeabi_fsub+0xac>
 8000e86:	4652      	mov	r2, sl
 8000e88:	2a00      	cmp	r2, #0
 8000e8a:	d023      	beq.n	8000ed4 <__aeabi_fsub+0x270>
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	4252      	negs	r2, r2
 8000e90:	4690      	mov	r8, r2
 8000e92:	44c1      	add	r9, r8
 8000e94:	464a      	mov	r2, r9
 8000e96:	2a00      	cmp	r2, #0
 8000e98:	d075      	beq.n	8000f86 <__aeabi_fsub+0x322>
 8000e9a:	2cff      	cmp	r4, #255	; 0xff
 8000e9c:	d000      	beq.n	8000ea0 <__aeabi_fsub+0x23c>
 8000e9e:	e75f      	b.n	8000d60 <__aeabi_fsub+0xfc>
 8000ea0:	e796      	b.n	8000dd0 <__aeabi_fsub+0x16c>
 8000ea2:	26fe      	movs	r6, #254	; 0xfe
 8000ea4:	3401      	adds	r4, #1
 8000ea6:	4226      	tst	r6, r4
 8000ea8:	d153      	bne.n	8000f52 <__aeabi_fsub+0x2ee>
 8000eaa:	2800      	cmp	r0, #0
 8000eac:	d172      	bne.n	8000f94 <__aeabi_fsub+0x330>
 8000eae:	4663      	mov	r3, ip
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d100      	bne.n	8000eb6 <__aeabi_fsub+0x252>
 8000eb4:	e093      	b.n	8000fde <__aeabi_fsub+0x37a>
 8000eb6:	4653      	mov	r3, sl
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d100      	bne.n	8000ebe <__aeabi_fsub+0x25a>
 8000ebc:	e739      	b.n	8000d32 <__aeabi_fsub+0xce>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	2400      	movs	r4, #0
 8000ec2:	015a      	lsls	r2, r3, #5
 8000ec4:	d502      	bpl.n	8000ecc <__aeabi_fsub+0x268>
 8000ec6:	4a4a      	ldr	r2, [pc, #296]	; (8000ff0 <__aeabi_fsub+0x38c>)
 8000ec8:	3401      	adds	r4, #1
 8000eca:	4013      	ands	r3, r2
 8000ecc:	075a      	lsls	r2, r3, #29
 8000ece:	d000      	beq.n	8000ed2 <__aeabi_fsub+0x26e>
 8000ed0:	e720      	b.n	8000d14 <__aeabi_fsub+0xb0>
 8000ed2:	08db      	lsrs	r3, r3, #3
 8000ed4:	2cff      	cmp	r4, #255	; 0xff
 8000ed6:	d100      	bne.n	8000eda <__aeabi_fsub+0x276>
 8000ed8:	e77a      	b.n	8000dd0 <__aeabi_fsub+0x16c>
 8000eda:	025b      	lsls	r3, r3, #9
 8000edc:	0a5f      	lsrs	r7, r3, #9
 8000ede:	b2e0      	uxtb	r0, r4
 8000ee0:	e727      	b.n	8000d32 <__aeabi_fsub+0xce>
 8000ee2:	20ff      	movs	r0, #255	; 0xff
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e724      	b.n	8000d32 <__aeabi_fsub+0xce>
 8000ee8:	4b41      	ldr	r3, [pc, #260]	; (8000ff0 <__aeabi_fsub+0x38c>)
 8000eea:	1a24      	subs	r4, r4, r0
 8000eec:	4033      	ands	r3, r6
 8000eee:	e70f      	b.n	8000d10 <__aeabi_fsub+0xac>
 8000ef0:	2eff      	cmp	r6, #255	; 0xff
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_fsub+0x292>
 8000ef4:	e76a      	b.n	8000dcc <__aeabi_fsub+0x168>
 8000ef6:	2380      	movs	r3, #128	; 0x80
 8000ef8:	4662      	mov	r2, ip
 8000efa:	04db      	lsls	r3, r3, #19
 8000efc:	431a      	orrs	r2, r3
 8000efe:	4694      	mov	ip, r2
 8000f00:	2301      	movs	r3, #1
 8000f02:	281b      	cmp	r0, #27
 8000f04:	dc09      	bgt.n	8000f1a <__aeabi_fsub+0x2b6>
 8000f06:	2420      	movs	r4, #32
 8000f08:	4663      	mov	r3, ip
 8000f0a:	4662      	mov	r2, ip
 8000f0c:	40c3      	lsrs	r3, r0
 8000f0e:	1a20      	subs	r0, r4, r0
 8000f10:	4082      	lsls	r2, r0
 8000f12:	0010      	movs	r0, r2
 8000f14:	1e44      	subs	r4, r0, #1
 8000f16:	41a0      	sbcs	r0, r4
 8000f18:	4303      	orrs	r3, r0
 8000f1a:	4652      	mov	r2, sl
 8000f1c:	000d      	movs	r5, r1
 8000f1e:	0034      	movs	r4, r6
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	e6dc      	b.n	8000cde <__aeabi_fsub+0x7a>
 8000f24:	4663      	mov	r3, ip
 8000f26:	4652      	mov	r2, sl
 8000f28:	1a9e      	subs	r6, r3, r2
 8000f2a:	0173      	lsls	r3, r6, #5
 8000f2c:	d417      	bmi.n	8000f5e <__aeabi_fsub+0x2fa>
 8000f2e:	2e00      	cmp	r6, #0
 8000f30:	d000      	beq.n	8000f34 <__aeabi_fsub+0x2d0>
 8000f32:	e6d9      	b.n	8000ce8 <__aeabi_fsub+0x84>
 8000f34:	2500      	movs	r5, #0
 8000f36:	2000      	movs	r0, #0
 8000f38:	2700      	movs	r7, #0
 8000f3a:	e6fa      	b.n	8000d32 <__aeabi_fsub+0xce>
 8000f3c:	4663      	mov	r3, ip
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d044      	beq.n	8000fcc <__aeabi_fsub+0x368>
 8000f42:	3901      	subs	r1, #1
 8000f44:	2900      	cmp	r1, #0
 8000f46:	d04c      	beq.n	8000fe2 <__aeabi_fsub+0x37e>
 8000f48:	2eff      	cmp	r6, #255	; 0xff
 8000f4a:	d000      	beq.n	8000f4e <__aeabi_fsub+0x2ea>
 8000f4c:	e771      	b.n	8000e32 <__aeabi_fsub+0x1ce>
 8000f4e:	4643      	mov	r3, r8
 8000f50:	e73e      	b.n	8000dd0 <__aeabi_fsub+0x16c>
 8000f52:	2cff      	cmp	r4, #255	; 0xff
 8000f54:	d0c5      	beq.n	8000ee2 <__aeabi_fsub+0x27e>
 8000f56:	4652      	mov	r2, sl
 8000f58:	4462      	add	r2, ip
 8000f5a:	0853      	lsrs	r3, r2, #1
 8000f5c:	e7b6      	b.n	8000ecc <__aeabi_fsub+0x268>
 8000f5e:	4663      	mov	r3, ip
 8000f60:	000d      	movs	r5, r1
 8000f62:	1ad6      	subs	r6, r2, r3
 8000f64:	e6c0      	b.n	8000ce8 <__aeabi_fsub+0x84>
 8000f66:	4662      	mov	r2, ip
 8000f68:	2a00      	cmp	r2, #0
 8000f6a:	d116      	bne.n	8000f9a <__aeabi_fsub+0x336>
 8000f6c:	4653      	mov	r3, sl
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d000      	beq.n	8000f74 <__aeabi_fsub+0x310>
 8000f72:	e72b      	b.n	8000dcc <__aeabi_fsub+0x168>
 8000f74:	2780      	movs	r7, #128	; 0x80
 8000f76:	2500      	movs	r5, #0
 8000f78:	20ff      	movs	r0, #255	; 0xff
 8000f7a:	03ff      	lsls	r7, r7, #15
 8000f7c:	e6d9      	b.n	8000d32 <__aeabi_fsub+0xce>
 8000f7e:	000d      	movs	r5, r1
 8000f80:	4643      	mov	r3, r8
 8000f82:	0034      	movs	r4, r6
 8000f84:	e7a6      	b.n	8000ed4 <__aeabi_fsub+0x270>
 8000f86:	4653      	mov	r3, sl
 8000f88:	4463      	add	r3, ip
 8000f8a:	e6f7      	b.n	8000d7c <__aeabi_fsub+0x118>
 8000f8c:	4663      	mov	r3, ip
 8000f8e:	4652      	mov	r2, sl
 8000f90:	1a9b      	subs	r3, r3, r2
 8000f92:	e6a4      	b.n	8000cde <__aeabi_fsub+0x7a>
 8000f94:	4662      	mov	r2, ip
 8000f96:	2a00      	cmp	r2, #0
 8000f98:	d0d9      	beq.n	8000f4e <__aeabi_fsub+0x2ea>
 8000f9a:	4652      	mov	r2, sl
 8000f9c:	2a00      	cmp	r2, #0
 8000f9e:	d100      	bne.n	8000fa2 <__aeabi_fsub+0x33e>
 8000fa0:	e716      	b.n	8000dd0 <__aeabi_fsub+0x16c>
 8000fa2:	2280      	movs	r2, #128	; 0x80
 8000fa4:	03d2      	lsls	r2, r2, #15
 8000fa6:	4213      	tst	r3, r2
 8000fa8:	d100      	bne.n	8000fac <__aeabi_fsub+0x348>
 8000faa:	e711      	b.n	8000dd0 <__aeabi_fsub+0x16c>
 8000fac:	4640      	mov	r0, r8
 8000fae:	4210      	tst	r0, r2
 8000fb0:	d000      	beq.n	8000fb4 <__aeabi_fsub+0x350>
 8000fb2:	e70d      	b.n	8000dd0 <__aeabi_fsub+0x16c>
 8000fb4:	e70a      	b.n	8000dcc <__aeabi_fsub+0x168>
 8000fb6:	4652      	mov	r2, sl
 8000fb8:	000d      	movs	r5, r1
 8000fba:	0034      	movs	r4, r6
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	e68e      	b.n	8000cde <__aeabi_fsub+0x7a>
 8000fc0:	4653      	mov	r3, sl
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d008      	beq.n	8000fd8 <__aeabi_fsub+0x374>
 8000fc6:	000d      	movs	r5, r1
 8000fc8:	4647      	mov	r7, r8
 8000fca:	e6b2      	b.n	8000d32 <__aeabi_fsub+0xce>
 8000fcc:	4643      	mov	r3, r8
 8000fce:	0034      	movs	r4, r6
 8000fd0:	e780      	b.n	8000ed4 <__aeabi_fsub+0x270>
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d000      	beq.n	8000fd8 <__aeabi_fsub+0x374>
 8000fd6:	e779      	b.n	8000ecc <__aeabi_fsub+0x268>
 8000fd8:	2500      	movs	r5, #0
 8000fda:	2700      	movs	r7, #0
 8000fdc:	e6a9      	b.n	8000d32 <__aeabi_fsub+0xce>
 8000fde:	4647      	mov	r7, r8
 8000fe0:	e6a7      	b.n	8000d32 <__aeabi_fsub+0xce>
 8000fe2:	4653      	mov	r3, sl
 8000fe4:	0034      	movs	r4, r6
 8000fe6:	4463      	add	r3, ip
 8000fe8:	e6c8      	b.n	8000d7c <__aeabi_fsub+0x118>
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	7dffffff 	.word	0x7dffffff
 8000ff0:	fbffffff 	.word	0xfbffffff

08000ff4 <__aeabi_f2iz>:
 8000ff4:	0241      	lsls	r1, r0, #9
 8000ff6:	0042      	lsls	r2, r0, #1
 8000ff8:	0fc3      	lsrs	r3, r0, #31
 8000ffa:	0a49      	lsrs	r1, r1, #9
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	0e12      	lsrs	r2, r2, #24
 8001000:	2a7e      	cmp	r2, #126	; 0x7e
 8001002:	d903      	bls.n	800100c <__aeabi_f2iz+0x18>
 8001004:	2a9d      	cmp	r2, #157	; 0x9d
 8001006:	d902      	bls.n	800100e <__aeabi_f2iz+0x1a>
 8001008:	4a09      	ldr	r2, [pc, #36]	; (8001030 <__aeabi_f2iz+0x3c>)
 800100a:	1898      	adds	r0, r3, r2
 800100c:	4770      	bx	lr
 800100e:	2080      	movs	r0, #128	; 0x80
 8001010:	0400      	lsls	r0, r0, #16
 8001012:	4301      	orrs	r1, r0
 8001014:	2a95      	cmp	r2, #149	; 0x95
 8001016:	dc07      	bgt.n	8001028 <__aeabi_f2iz+0x34>
 8001018:	2096      	movs	r0, #150	; 0x96
 800101a:	1a82      	subs	r2, r0, r2
 800101c:	40d1      	lsrs	r1, r2
 800101e:	4248      	negs	r0, r1
 8001020:	2b00      	cmp	r3, #0
 8001022:	d1f3      	bne.n	800100c <__aeabi_f2iz+0x18>
 8001024:	0008      	movs	r0, r1
 8001026:	e7f1      	b.n	800100c <__aeabi_f2iz+0x18>
 8001028:	3a96      	subs	r2, #150	; 0x96
 800102a:	4091      	lsls	r1, r2
 800102c:	e7f7      	b.n	800101e <__aeabi_f2iz+0x2a>
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	7fffffff 	.word	0x7fffffff

08001034 <__aeabi_dadd>:
 8001034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001036:	464f      	mov	r7, r9
 8001038:	46d6      	mov	lr, sl
 800103a:	4646      	mov	r6, r8
 800103c:	000d      	movs	r5, r1
 800103e:	0001      	movs	r1, r0
 8001040:	0018      	movs	r0, r3
 8001042:	b5c0      	push	{r6, r7, lr}
 8001044:	0017      	movs	r7, r2
 8001046:	032b      	lsls	r3, r5, #12
 8001048:	0a5a      	lsrs	r2, r3, #9
 800104a:	0f4b      	lsrs	r3, r1, #29
 800104c:	4313      	orrs	r3, r2
 800104e:	00ca      	lsls	r2, r1, #3
 8001050:	4691      	mov	r9, r2
 8001052:	0302      	lsls	r2, r0, #12
 8001054:	006e      	lsls	r6, r5, #1
 8001056:	0041      	lsls	r1, r0, #1
 8001058:	0a52      	lsrs	r2, r2, #9
 800105a:	0fec      	lsrs	r4, r5, #31
 800105c:	0f7d      	lsrs	r5, r7, #29
 800105e:	4315      	orrs	r5, r2
 8001060:	0d76      	lsrs	r6, r6, #21
 8001062:	0d49      	lsrs	r1, r1, #21
 8001064:	0fc0      	lsrs	r0, r0, #31
 8001066:	4682      	mov	sl, r0
 8001068:	46ac      	mov	ip, r5
 800106a:	00ff      	lsls	r7, r7, #3
 800106c:	1a72      	subs	r2, r6, r1
 800106e:	4284      	cmp	r4, r0
 8001070:	d100      	bne.n	8001074 <__aeabi_dadd+0x40>
 8001072:	e098      	b.n	80011a6 <__aeabi_dadd+0x172>
 8001074:	2a00      	cmp	r2, #0
 8001076:	dc00      	bgt.n	800107a <__aeabi_dadd+0x46>
 8001078:	e081      	b.n	800117e <__aeabi_dadd+0x14a>
 800107a:	2900      	cmp	r1, #0
 800107c:	d100      	bne.n	8001080 <__aeabi_dadd+0x4c>
 800107e:	e0b6      	b.n	80011ee <__aeabi_dadd+0x1ba>
 8001080:	49c9      	ldr	r1, [pc, #804]	; (80013a8 <__aeabi_dadd+0x374>)
 8001082:	428e      	cmp	r6, r1
 8001084:	d100      	bne.n	8001088 <__aeabi_dadd+0x54>
 8001086:	e172      	b.n	800136e <__aeabi_dadd+0x33a>
 8001088:	2180      	movs	r1, #128	; 0x80
 800108a:	0028      	movs	r0, r5
 800108c:	0409      	lsls	r1, r1, #16
 800108e:	4308      	orrs	r0, r1
 8001090:	4684      	mov	ip, r0
 8001092:	2a38      	cmp	r2, #56	; 0x38
 8001094:	dd00      	ble.n	8001098 <__aeabi_dadd+0x64>
 8001096:	e15e      	b.n	8001356 <__aeabi_dadd+0x322>
 8001098:	2a1f      	cmp	r2, #31
 800109a:	dd00      	ble.n	800109e <__aeabi_dadd+0x6a>
 800109c:	e1ee      	b.n	800147c <__aeabi_dadd+0x448>
 800109e:	2020      	movs	r0, #32
 80010a0:	0039      	movs	r1, r7
 80010a2:	4665      	mov	r5, ip
 80010a4:	1a80      	subs	r0, r0, r2
 80010a6:	4087      	lsls	r7, r0
 80010a8:	40d1      	lsrs	r1, r2
 80010aa:	4085      	lsls	r5, r0
 80010ac:	430d      	orrs	r5, r1
 80010ae:	0039      	movs	r1, r7
 80010b0:	1e4f      	subs	r7, r1, #1
 80010b2:	41b9      	sbcs	r1, r7
 80010b4:	4667      	mov	r7, ip
 80010b6:	40d7      	lsrs	r7, r2
 80010b8:	4329      	orrs	r1, r5
 80010ba:	1bdb      	subs	r3, r3, r7
 80010bc:	464a      	mov	r2, r9
 80010be:	1a55      	subs	r5, r2, r1
 80010c0:	45a9      	cmp	r9, r5
 80010c2:	4189      	sbcs	r1, r1
 80010c4:	4249      	negs	r1, r1
 80010c6:	1a5b      	subs	r3, r3, r1
 80010c8:	4698      	mov	r8, r3
 80010ca:	4643      	mov	r3, r8
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	d400      	bmi.n	80010d2 <__aeabi_dadd+0x9e>
 80010d0:	e0cc      	b.n	800126c <__aeabi_dadd+0x238>
 80010d2:	4643      	mov	r3, r8
 80010d4:	025b      	lsls	r3, r3, #9
 80010d6:	0a5b      	lsrs	r3, r3, #9
 80010d8:	4698      	mov	r8, r3
 80010da:	4643      	mov	r3, r8
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d100      	bne.n	80010e2 <__aeabi_dadd+0xae>
 80010e0:	e12c      	b.n	800133c <__aeabi_dadd+0x308>
 80010e2:	4640      	mov	r0, r8
 80010e4:	f001 fe46 	bl	8002d74 <__clzsi2>
 80010e8:	0001      	movs	r1, r0
 80010ea:	3908      	subs	r1, #8
 80010ec:	2220      	movs	r2, #32
 80010ee:	0028      	movs	r0, r5
 80010f0:	4643      	mov	r3, r8
 80010f2:	1a52      	subs	r2, r2, r1
 80010f4:	408b      	lsls	r3, r1
 80010f6:	40d0      	lsrs	r0, r2
 80010f8:	408d      	lsls	r5, r1
 80010fa:	4303      	orrs	r3, r0
 80010fc:	428e      	cmp	r6, r1
 80010fe:	dd00      	ble.n	8001102 <__aeabi_dadd+0xce>
 8001100:	e117      	b.n	8001332 <__aeabi_dadd+0x2fe>
 8001102:	1b8e      	subs	r6, r1, r6
 8001104:	1c72      	adds	r2, r6, #1
 8001106:	2a1f      	cmp	r2, #31
 8001108:	dd00      	ble.n	800110c <__aeabi_dadd+0xd8>
 800110a:	e1a7      	b.n	800145c <__aeabi_dadd+0x428>
 800110c:	2120      	movs	r1, #32
 800110e:	0018      	movs	r0, r3
 8001110:	002e      	movs	r6, r5
 8001112:	1a89      	subs	r1, r1, r2
 8001114:	408d      	lsls	r5, r1
 8001116:	4088      	lsls	r0, r1
 8001118:	40d6      	lsrs	r6, r2
 800111a:	40d3      	lsrs	r3, r2
 800111c:	1e69      	subs	r1, r5, #1
 800111e:	418d      	sbcs	r5, r1
 8001120:	4330      	orrs	r0, r6
 8001122:	4698      	mov	r8, r3
 8001124:	2600      	movs	r6, #0
 8001126:	4305      	orrs	r5, r0
 8001128:	076b      	lsls	r3, r5, #29
 800112a:	d009      	beq.n	8001140 <__aeabi_dadd+0x10c>
 800112c:	230f      	movs	r3, #15
 800112e:	402b      	ands	r3, r5
 8001130:	2b04      	cmp	r3, #4
 8001132:	d005      	beq.n	8001140 <__aeabi_dadd+0x10c>
 8001134:	1d2b      	adds	r3, r5, #4
 8001136:	42ab      	cmp	r3, r5
 8001138:	41ad      	sbcs	r5, r5
 800113a:	426d      	negs	r5, r5
 800113c:	44a8      	add	r8, r5
 800113e:	001d      	movs	r5, r3
 8001140:	4643      	mov	r3, r8
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	d400      	bmi.n	8001148 <__aeabi_dadd+0x114>
 8001146:	e094      	b.n	8001272 <__aeabi_dadd+0x23e>
 8001148:	4b97      	ldr	r3, [pc, #604]	; (80013a8 <__aeabi_dadd+0x374>)
 800114a:	1c72      	adds	r2, r6, #1
 800114c:	429a      	cmp	r2, r3
 800114e:	d100      	bne.n	8001152 <__aeabi_dadd+0x11e>
 8001150:	e09d      	b.n	800128e <__aeabi_dadd+0x25a>
 8001152:	4641      	mov	r1, r8
 8001154:	4b95      	ldr	r3, [pc, #596]	; (80013ac <__aeabi_dadd+0x378>)
 8001156:	08ed      	lsrs	r5, r5, #3
 8001158:	4019      	ands	r1, r3
 800115a:	000b      	movs	r3, r1
 800115c:	0552      	lsls	r2, r2, #21
 800115e:	0749      	lsls	r1, r1, #29
 8001160:	025b      	lsls	r3, r3, #9
 8001162:	4329      	orrs	r1, r5
 8001164:	0b1b      	lsrs	r3, r3, #12
 8001166:	0d52      	lsrs	r2, r2, #21
 8001168:	0512      	lsls	r2, r2, #20
 800116a:	4313      	orrs	r3, r2
 800116c:	07e4      	lsls	r4, r4, #31
 800116e:	4323      	orrs	r3, r4
 8001170:	0008      	movs	r0, r1
 8001172:	0019      	movs	r1, r3
 8001174:	bce0      	pop	{r5, r6, r7}
 8001176:	46ba      	mov	sl, r7
 8001178:	46b1      	mov	r9, r6
 800117a:	46a8      	mov	r8, r5
 800117c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800117e:	2a00      	cmp	r2, #0
 8001180:	d043      	beq.n	800120a <__aeabi_dadd+0x1d6>
 8001182:	1b8a      	subs	r2, r1, r6
 8001184:	2e00      	cmp	r6, #0
 8001186:	d000      	beq.n	800118a <__aeabi_dadd+0x156>
 8001188:	e12a      	b.n	80013e0 <__aeabi_dadd+0x3ac>
 800118a:	464c      	mov	r4, r9
 800118c:	431c      	orrs	r4, r3
 800118e:	d100      	bne.n	8001192 <__aeabi_dadd+0x15e>
 8001190:	e1d1      	b.n	8001536 <__aeabi_dadd+0x502>
 8001192:	1e54      	subs	r4, r2, #1
 8001194:	2a01      	cmp	r2, #1
 8001196:	d100      	bne.n	800119a <__aeabi_dadd+0x166>
 8001198:	e21f      	b.n	80015da <__aeabi_dadd+0x5a6>
 800119a:	4d83      	ldr	r5, [pc, #524]	; (80013a8 <__aeabi_dadd+0x374>)
 800119c:	42aa      	cmp	r2, r5
 800119e:	d100      	bne.n	80011a2 <__aeabi_dadd+0x16e>
 80011a0:	e272      	b.n	8001688 <__aeabi_dadd+0x654>
 80011a2:	0022      	movs	r2, r4
 80011a4:	e123      	b.n	80013ee <__aeabi_dadd+0x3ba>
 80011a6:	2a00      	cmp	r2, #0
 80011a8:	dc00      	bgt.n	80011ac <__aeabi_dadd+0x178>
 80011aa:	e098      	b.n	80012de <__aeabi_dadd+0x2aa>
 80011ac:	2900      	cmp	r1, #0
 80011ae:	d042      	beq.n	8001236 <__aeabi_dadd+0x202>
 80011b0:	497d      	ldr	r1, [pc, #500]	; (80013a8 <__aeabi_dadd+0x374>)
 80011b2:	428e      	cmp	r6, r1
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dadd+0x184>
 80011b6:	e0da      	b.n	800136e <__aeabi_dadd+0x33a>
 80011b8:	2180      	movs	r1, #128	; 0x80
 80011ba:	0028      	movs	r0, r5
 80011bc:	0409      	lsls	r1, r1, #16
 80011be:	4308      	orrs	r0, r1
 80011c0:	4684      	mov	ip, r0
 80011c2:	2a38      	cmp	r2, #56	; 0x38
 80011c4:	dd00      	ble.n	80011c8 <__aeabi_dadd+0x194>
 80011c6:	e129      	b.n	800141c <__aeabi_dadd+0x3e8>
 80011c8:	2a1f      	cmp	r2, #31
 80011ca:	dc00      	bgt.n	80011ce <__aeabi_dadd+0x19a>
 80011cc:	e187      	b.n	80014de <__aeabi_dadd+0x4aa>
 80011ce:	0011      	movs	r1, r2
 80011d0:	4665      	mov	r5, ip
 80011d2:	3920      	subs	r1, #32
 80011d4:	40cd      	lsrs	r5, r1
 80011d6:	2a20      	cmp	r2, #32
 80011d8:	d004      	beq.n	80011e4 <__aeabi_dadd+0x1b0>
 80011da:	2040      	movs	r0, #64	; 0x40
 80011dc:	4661      	mov	r1, ip
 80011de:	1a82      	subs	r2, r0, r2
 80011e0:	4091      	lsls	r1, r2
 80011e2:	430f      	orrs	r7, r1
 80011e4:	0039      	movs	r1, r7
 80011e6:	1e4f      	subs	r7, r1, #1
 80011e8:	41b9      	sbcs	r1, r7
 80011ea:	430d      	orrs	r5, r1
 80011ec:	e11b      	b.n	8001426 <__aeabi_dadd+0x3f2>
 80011ee:	0029      	movs	r1, r5
 80011f0:	4339      	orrs	r1, r7
 80011f2:	d100      	bne.n	80011f6 <__aeabi_dadd+0x1c2>
 80011f4:	e0b5      	b.n	8001362 <__aeabi_dadd+0x32e>
 80011f6:	1e51      	subs	r1, r2, #1
 80011f8:	2a01      	cmp	r2, #1
 80011fa:	d100      	bne.n	80011fe <__aeabi_dadd+0x1ca>
 80011fc:	e1ab      	b.n	8001556 <__aeabi_dadd+0x522>
 80011fe:	486a      	ldr	r0, [pc, #424]	; (80013a8 <__aeabi_dadd+0x374>)
 8001200:	4282      	cmp	r2, r0
 8001202:	d100      	bne.n	8001206 <__aeabi_dadd+0x1d2>
 8001204:	e1b2      	b.n	800156c <__aeabi_dadd+0x538>
 8001206:	000a      	movs	r2, r1
 8001208:	e743      	b.n	8001092 <__aeabi_dadd+0x5e>
 800120a:	4969      	ldr	r1, [pc, #420]	; (80013b0 <__aeabi_dadd+0x37c>)
 800120c:	1c75      	adds	r5, r6, #1
 800120e:	420d      	tst	r5, r1
 8001210:	d000      	beq.n	8001214 <__aeabi_dadd+0x1e0>
 8001212:	e0cf      	b.n	80013b4 <__aeabi_dadd+0x380>
 8001214:	2e00      	cmp	r6, #0
 8001216:	d000      	beq.n	800121a <__aeabi_dadd+0x1e6>
 8001218:	e193      	b.n	8001542 <__aeabi_dadd+0x50e>
 800121a:	4649      	mov	r1, r9
 800121c:	4319      	orrs	r1, r3
 800121e:	d100      	bne.n	8001222 <__aeabi_dadd+0x1ee>
 8001220:	e1d1      	b.n	80015c6 <__aeabi_dadd+0x592>
 8001222:	4661      	mov	r1, ip
 8001224:	4339      	orrs	r1, r7
 8001226:	d000      	beq.n	800122a <__aeabi_dadd+0x1f6>
 8001228:	e1e3      	b.n	80015f2 <__aeabi_dadd+0x5be>
 800122a:	4649      	mov	r1, r9
 800122c:	0758      	lsls	r0, r3, #29
 800122e:	08c9      	lsrs	r1, r1, #3
 8001230:	4301      	orrs	r1, r0
 8001232:	08db      	lsrs	r3, r3, #3
 8001234:	e026      	b.n	8001284 <__aeabi_dadd+0x250>
 8001236:	0029      	movs	r1, r5
 8001238:	4339      	orrs	r1, r7
 800123a:	d100      	bne.n	800123e <__aeabi_dadd+0x20a>
 800123c:	e091      	b.n	8001362 <__aeabi_dadd+0x32e>
 800123e:	1e51      	subs	r1, r2, #1
 8001240:	2a01      	cmp	r2, #1
 8001242:	d005      	beq.n	8001250 <__aeabi_dadd+0x21c>
 8001244:	4858      	ldr	r0, [pc, #352]	; (80013a8 <__aeabi_dadd+0x374>)
 8001246:	4282      	cmp	r2, r0
 8001248:	d100      	bne.n	800124c <__aeabi_dadd+0x218>
 800124a:	e18f      	b.n	800156c <__aeabi_dadd+0x538>
 800124c:	000a      	movs	r2, r1
 800124e:	e7b8      	b.n	80011c2 <__aeabi_dadd+0x18e>
 8001250:	003d      	movs	r5, r7
 8001252:	444d      	add	r5, r9
 8001254:	454d      	cmp	r5, r9
 8001256:	4189      	sbcs	r1, r1
 8001258:	4463      	add	r3, ip
 800125a:	4698      	mov	r8, r3
 800125c:	4249      	negs	r1, r1
 800125e:	4488      	add	r8, r1
 8001260:	4643      	mov	r3, r8
 8001262:	2602      	movs	r6, #2
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	d500      	bpl.n	800126a <__aeabi_dadd+0x236>
 8001268:	e0eb      	b.n	8001442 <__aeabi_dadd+0x40e>
 800126a:	3e01      	subs	r6, #1
 800126c:	076b      	lsls	r3, r5, #29
 800126e:	d000      	beq.n	8001272 <__aeabi_dadd+0x23e>
 8001270:	e75c      	b.n	800112c <__aeabi_dadd+0xf8>
 8001272:	4643      	mov	r3, r8
 8001274:	08e9      	lsrs	r1, r5, #3
 8001276:	075a      	lsls	r2, r3, #29
 8001278:	4311      	orrs	r1, r2
 800127a:	0032      	movs	r2, r6
 800127c:	08db      	lsrs	r3, r3, #3
 800127e:	484a      	ldr	r0, [pc, #296]	; (80013a8 <__aeabi_dadd+0x374>)
 8001280:	4282      	cmp	r2, r0
 8001282:	d021      	beq.n	80012c8 <__aeabi_dadd+0x294>
 8001284:	031b      	lsls	r3, r3, #12
 8001286:	0552      	lsls	r2, r2, #21
 8001288:	0b1b      	lsrs	r3, r3, #12
 800128a:	0d52      	lsrs	r2, r2, #21
 800128c:	e76c      	b.n	8001168 <__aeabi_dadd+0x134>
 800128e:	2300      	movs	r3, #0
 8001290:	2100      	movs	r1, #0
 8001292:	e769      	b.n	8001168 <__aeabi_dadd+0x134>
 8001294:	002a      	movs	r2, r5
 8001296:	433a      	orrs	r2, r7
 8001298:	d069      	beq.n	800136e <__aeabi_dadd+0x33a>
 800129a:	464a      	mov	r2, r9
 800129c:	0758      	lsls	r0, r3, #29
 800129e:	08d1      	lsrs	r1, r2, #3
 80012a0:	08da      	lsrs	r2, r3, #3
 80012a2:	2380      	movs	r3, #128	; 0x80
 80012a4:	031b      	lsls	r3, r3, #12
 80012a6:	4308      	orrs	r0, r1
 80012a8:	421a      	tst	r2, r3
 80012aa:	d007      	beq.n	80012bc <__aeabi_dadd+0x288>
 80012ac:	0029      	movs	r1, r5
 80012ae:	08ed      	lsrs	r5, r5, #3
 80012b0:	421d      	tst	r5, r3
 80012b2:	d103      	bne.n	80012bc <__aeabi_dadd+0x288>
 80012b4:	002a      	movs	r2, r5
 80012b6:	08ff      	lsrs	r7, r7, #3
 80012b8:	0748      	lsls	r0, r1, #29
 80012ba:	4338      	orrs	r0, r7
 80012bc:	0f43      	lsrs	r3, r0, #29
 80012be:	00c1      	lsls	r1, r0, #3
 80012c0:	075b      	lsls	r3, r3, #29
 80012c2:	08c9      	lsrs	r1, r1, #3
 80012c4:	4319      	orrs	r1, r3
 80012c6:	0013      	movs	r3, r2
 80012c8:	000a      	movs	r2, r1
 80012ca:	431a      	orrs	r2, r3
 80012cc:	d100      	bne.n	80012d0 <__aeabi_dadd+0x29c>
 80012ce:	e213      	b.n	80016f8 <__aeabi_dadd+0x6c4>
 80012d0:	2280      	movs	r2, #128	; 0x80
 80012d2:	0312      	lsls	r2, r2, #12
 80012d4:	4313      	orrs	r3, r2
 80012d6:	031b      	lsls	r3, r3, #12
 80012d8:	4a33      	ldr	r2, [pc, #204]	; (80013a8 <__aeabi_dadd+0x374>)
 80012da:	0b1b      	lsrs	r3, r3, #12
 80012dc:	e744      	b.n	8001168 <__aeabi_dadd+0x134>
 80012de:	2a00      	cmp	r2, #0
 80012e0:	d04b      	beq.n	800137a <__aeabi_dadd+0x346>
 80012e2:	1b8a      	subs	r2, r1, r6
 80012e4:	2e00      	cmp	r6, #0
 80012e6:	d100      	bne.n	80012ea <__aeabi_dadd+0x2b6>
 80012e8:	e0e7      	b.n	80014ba <__aeabi_dadd+0x486>
 80012ea:	482f      	ldr	r0, [pc, #188]	; (80013a8 <__aeabi_dadd+0x374>)
 80012ec:	4281      	cmp	r1, r0
 80012ee:	d100      	bne.n	80012f2 <__aeabi_dadd+0x2be>
 80012f0:	e195      	b.n	800161e <__aeabi_dadd+0x5ea>
 80012f2:	2080      	movs	r0, #128	; 0x80
 80012f4:	0400      	lsls	r0, r0, #16
 80012f6:	4303      	orrs	r3, r0
 80012f8:	2a38      	cmp	r2, #56	; 0x38
 80012fa:	dd00      	ble.n	80012fe <__aeabi_dadd+0x2ca>
 80012fc:	e143      	b.n	8001586 <__aeabi_dadd+0x552>
 80012fe:	2a1f      	cmp	r2, #31
 8001300:	dd00      	ble.n	8001304 <__aeabi_dadd+0x2d0>
 8001302:	e1db      	b.n	80016bc <__aeabi_dadd+0x688>
 8001304:	2020      	movs	r0, #32
 8001306:	001d      	movs	r5, r3
 8001308:	464e      	mov	r6, r9
 800130a:	1a80      	subs	r0, r0, r2
 800130c:	4085      	lsls	r5, r0
 800130e:	40d6      	lsrs	r6, r2
 8001310:	4335      	orrs	r5, r6
 8001312:	464e      	mov	r6, r9
 8001314:	4086      	lsls	r6, r0
 8001316:	0030      	movs	r0, r6
 8001318:	40d3      	lsrs	r3, r2
 800131a:	1e46      	subs	r6, r0, #1
 800131c:	41b0      	sbcs	r0, r6
 800131e:	449c      	add	ip, r3
 8001320:	4305      	orrs	r5, r0
 8001322:	19ed      	adds	r5, r5, r7
 8001324:	42bd      	cmp	r5, r7
 8001326:	419b      	sbcs	r3, r3
 8001328:	425b      	negs	r3, r3
 800132a:	4463      	add	r3, ip
 800132c:	4698      	mov	r8, r3
 800132e:	000e      	movs	r6, r1
 8001330:	e07f      	b.n	8001432 <__aeabi_dadd+0x3fe>
 8001332:	4a1e      	ldr	r2, [pc, #120]	; (80013ac <__aeabi_dadd+0x378>)
 8001334:	1a76      	subs	r6, r6, r1
 8001336:	4013      	ands	r3, r2
 8001338:	4698      	mov	r8, r3
 800133a:	e6f5      	b.n	8001128 <__aeabi_dadd+0xf4>
 800133c:	0028      	movs	r0, r5
 800133e:	f001 fd19 	bl	8002d74 <__clzsi2>
 8001342:	0001      	movs	r1, r0
 8001344:	3118      	adds	r1, #24
 8001346:	291f      	cmp	r1, #31
 8001348:	dc00      	bgt.n	800134c <__aeabi_dadd+0x318>
 800134a:	e6cf      	b.n	80010ec <__aeabi_dadd+0xb8>
 800134c:	002b      	movs	r3, r5
 800134e:	3808      	subs	r0, #8
 8001350:	4083      	lsls	r3, r0
 8001352:	2500      	movs	r5, #0
 8001354:	e6d2      	b.n	80010fc <__aeabi_dadd+0xc8>
 8001356:	4662      	mov	r2, ip
 8001358:	433a      	orrs	r2, r7
 800135a:	0011      	movs	r1, r2
 800135c:	1e4f      	subs	r7, r1, #1
 800135e:	41b9      	sbcs	r1, r7
 8001360:	e6ac      	b.n	80010bc <__aeabi_dadd+0x88>
 8001362:	4649      	mov	r1, r9
 8001364:	0758      	lsls	r0, r3, #29
 8001366:	08c9      	lsrs	r1, r1, #3
 8001368:	4301      	orrs	r1, r0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	e787      	b.n	800127e <__aeabi_dadd+0x24a>
 800136e:	4649      	mov	r1, r9
 8001370:	075a      	lsls	r2, r3, #29
 8001372:	08c9      	lsrs	r1, r1, #3
 8001374:	4311      	orrs	r1, r2
 8001376:	08db      	lsrs	r3, r3, #3
 8001378:	e7a6      	b.n	80012c8 <__aeabi_dadd+0x294>
 800137a:	490d      	ldr	r1, [pc, #52]	; (80013b0 <__aeabi_dadd+0x37c>)
 800137c:	1c70      	adds	r0, r6, #1
 800137e:	4208      	tst	r0, r1
 8001380:	d000      	beq.n	8001384 <__aeabi_dadd+0x350>
 8001382:	e0bb      	b.n	80014fc <__aeabi_dadd+0x4c8>
 8001384:	2e00      	cmp	r6, #0
 8001386:	d000      	beq.n	800138a <__aeabi_dadd+0x356>
 8001388:	e114      	b.n	80015b4 <__aeabi_dadd+0x580>
 800138a:	4649      	mov	r1, r9
 800138c:	4319      	orrs	r1, r3
 800138e:	d100      	bne.n	8001392 <__aeabi_dadd+0x35e>
 8001390:	e175      	b.n	800167e <__aeabi_dadd+0x64a>
 8001392:	0029      	movs	r1, r5
 8001394:	4339      	orrs	r1, r7
 8001396:	d000      	beq.n	800139a <__aeabi_dadd+0x366>
 8001398:	e17e      	b.n	8001698 <__aeabi_dadd+0x664>
 800139a:	4649      	mov	r1, r9
 800139c:	0758      	lsls	r0, r3, #29
 800139e:	08c9      	lsrs	r1, r1, #3
 80013a0:	4301      	orrs	r1, r0
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	e76e      	b.n	8001284 <__aeabi_dadd+0x250>
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	000007ff 	.word	0x000007ff
 80013ac:	ff7fffff 	.word	0xff7fffff
 80013b0:	000007fe 	.word	0x000007fe
 80013b4:	4649      	mov	r1, r9
 80013b6:	1bcd      	subs	r5, r1, r7
 80013b8:	4661      	mov	r1, ip
 80013ba:	1a58      	subs	r0, r3, r1
 80013bc:	45a9      	cmp	r9, r5
 80013be:	4189      	sbcs	r1, r1
 80013c0:	4249      	negs	r1, r1
 80013c2:	4688      	mov	r8, r1
 80013c4:	0001      	movs	r1, r0
 80013c6:	4640      	mov	r0, r8
 80013c8:	1a09      	subs	r1, r1, r0
 80013ca:	4688      	mov	r8, r1
 80013cc:	0209      	lsls	r1, r1, #8
 80013ce:	d500      	bpl.n	80013d2 <__aeabi_dadd+0x39e>
 80013d0:	e0a6      	b.n	8001520 <__aeabi_dadd+0x4ec>
 80013d2:	4641      	mov	r1, r8
 80013d4:	4329      	orrs	r1, r5
 80013d6:	d000      	beq.n	80013da <__aeabi_dadd+0x3a6>
 80013d8:	e67f      	b.n	80010da <__aeabi_dadd+0xa6>
 80013da:	2300      	movs	r3, #0
 80013dc:	2400      	movs	r4, #0
 80013de:	e751      	b.n	8001284 <__aeabi_dadd+0x250>
 80013e0:	4cc7      	ldr	r4, [pc, #796]	; (8001700 <__aeabi_dadd+0x6cc>)
 80013e2:	42a1      	cmp	r1, r4
 80013e4:	d100      	bne.n	80013e8 <__aeabi_dadd+0x3b4>
 80013e6:	e0c7      	b.n	8001578 <__aeabi_dadd+0x544>
 80013e8:	2480      	movs	r4, #128	; 0x80
 80013ea:	0424      	lsls	r4, r4, #16
 80013ec:	4323      	orrs	r3, r4
 80013ee:	2a38      	cmp	r2, #56	; 0x38
 80013f0:	dc54      	bgt.n	800149c <__aeabi_dadd+0x468>
 80013f2:	2a1f      	cmp	r2, #31
 80013f4:	dd00      	ble.n	80013f8 <__aeabi_dadd+0x3c4>
 80013f6:	e0cc      	b.n	8001592 <__aeabi_dadd+0x55e>
 80013f8:	2420      	movs	r4, #32
 80013fa:	4648      	mov	r0, r9
 80013fc:	1aa4      	subs	r4, r4, r2
 80013fe:	001d      	movs	r5, r3
 8001400:	464e      	mov	r6, r9
 8001402:	40a0      	lsls	r0, r4
 8001404:	40d6      	lsrs	r6, r2
 8001406:	40a5      	lsls	r5, r4
 8001408:	0004      	movs	r4, r0
 800140a:	40d3      	lsrs	r3, r2
 800140c:	4662      	mov	r2, ip
 800140e:	4335      	orrs	r5, r6
 8001410:	1e66      	subs	r6, r4, #1
 8001412:	41b4      	sbcs	r4, r6
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	469c      	mov	ip, r3
 8001418:	4325      	orrs	r5, r4
 800141a:	e044      	b.n	80014a6 <__aeabi_dadd+0x472>
 800141c:	4662      	mov	r2, ip
 800141e:	433a      	orrs	r2, r7
 8001420:	0015      	movs	r5, r2
 8001422:	1e6f      	subs	r7, r5, #1
 8001424:	41bd      	sbcs	r5, r7
 8001426:	444d      	add	r5, r9
 8001428:	454d      	cmp	r5, r9
 800142a:	4189      	sbcs	r1, r1
 800142c:	4249      	negs	r1, r1
 800142e:	4688      	mov	r8, r1
 8001430:	4498      	add	r8, r3
 8001432:	4643      	mov	r3, r8
 8001434:	021b      	lsls	r3, r3, #8
 8001436:	d400      	bmi.n	800143a <__aeabi_dadd+0x406>
 8001438:	e718      	b.n	800126c <__aeabi_dadd+0x238>
 800143a:	4bb1      	ldr	r3, [pc, #708]	; (8001700 <__aeabi_dadd+0x6cc>)
 800143c:	3601      	adds	r6, #1
 800143e:	429e      	cmp	r6, r3
 8001440:	d049      	beq.n	80014d6 <__aeabi_dadd+0x4a2>
 8001442:	4642      	mov	r2, r8
 8001444:	4baf      	ldr	r3, [pc, #700]	; (8001704 <__aeabi_dadd+0x6d0>)
 8001446:	2101      	movs	r1, #1
 8001448:	401a      	ands	r2, r3
 800144a:	0013      	movs	r3, r2
 800144c:	086a      	lsrs	r2, r5, #1
 800144e:	400d      	ands	r5, r1
 8001450:	4315      	orrs	r5, r2
 8001452:	07d9      	lsls	r1, r3, #31
 8001454:	085b      	lsrs	r3, r3, #1
 8001456:	4698      	mov	r8, r3
 8001458:	430d      	orrs	r5, r1
 800145a:	e665      	b.n	8001128 <__aeabi_dadd+0xf4>
 800145c:	0018      	movs	r0, r3
 800145e:	3e1f      	subs	r6, #31
 8001460:	40f0      	lsrs	r0, r6
 8001462:	2a20      	cmp	r2, #32
 8001464:	d003      	beq.n	800146e <__aeabi_dadd+0x43a>
 8001466:	2140      	movs	r1, #64	; 0x40
 8001468:	1a8a      	subs	r2, r1, r2
 800146a:	4093      	lsls	r3, r2
 800146c:	431d      	orrs	r5, r3
 800146e:	1e69      	subs	r1, r5, #1
 8001470:	418d      	sbcs	r5, r1
 8001472:	2300      	movs	r3, #0
 8001474:	2600      	movs	r6, #0
 8001476:	4698      	mov	r8, r3
 8001478:	4305      	orrs	r5, r0
 800147a:	e6f7      	b.n	800126c <__aeabi_dadd+0x238>
 800147c:	0011      	movs	r1, r2
 800147e:	4665      	mov	r5, ip
 8001480:	3920      	subs	r1, #32
 8001482:	40cd      	lsrs	r5, r1
 8001484:	2a20      	cmp	r2, #32
 8001486:	d004      	beq.n	8001492 <__aeabi_dadd+0x45e>
 8001488:	2040      	movs	r0, #64	; 0x40
 800148a:	4661      	mov	r1, ip
 800148c:	1a82      	subs	r2, r0, r2
 800148e:	4091      	lsls	r1, r2
 8001490:	430f      	orrs	r7, r1
 8001492:	0039      	movs	r1, r7
 8001494:	1e4f      	subs	r7, r1, #1
 8001496:	41b9      	sbcs	r1, r7
 8001498:	4329      	orrs	r1, r5
 800149a:	e60f      	b.n	80010bc <__aeabi_dadd+0x88>
 800149c:	464a      	mov	r2, r9
 800149e:	4313      	orrs	r3, r2
 80014a0:	001d      	movs	r5, r3
 80014a2:	1e6b      	subs	r3, r5, #1
 80014a4:	419d      	sbcs	r5, r3
 80014a6:	1b7d      	subs	r5, r7, r5
 80014a8:	42af      	cmp	r7, r5
 80014aa:	419b      	sbcs	r3, r3
 80014ac:	4662      	mov	r2, ip
 80014ae:	425b      	negs	r3, r3
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	4698      	mov	r8, r3
 80014b4:	4654      	mov	r4, sl
 80014b6:	000e      	movs	r6, r1
 80014b8:	e607      	b.n	80010ca <__aeabi_dadd+0x96>
 80014ba:	4648      	mov	r0, r9
 80014bc:	4318      	orrs	r0, r3
 80014be:	d100      	bne.n	80014c2 <__aeabi_dadd+0x48e>
 80014c0:	e0b3      	b.n	800162a <__aeabi_dadd+0x5f6>
 80014c2:	1e50      	subs	r0, r2, #1
 80014c4:	2a01      	cmp	r2, #1
 80014c6:	d100      	bne.n	80014ca <__aeabi_dadd+0x496>
 80014c8:	e10d      	b.n	80016e6 <__aeabi_dadd+0x6b2>
 80014ca:	4d8d      	ldr	r5, [pc, #564]	; (8001700 <__aeabi_dadd+0x6cc>)
 80014cc:	42aa      	cmp	r2, r5
 80014ce:	d100      	bne.n	80014d2 <__aeabi_dadd+0x49e>
 80014d0:	e0a5      	b.n	800161e <__aeabi_dadd+0x5ea>
 80014d2:	0002      	movs	r2, r0
 80014d4:	e710      	b.n	80012f8 <__aeabi_dadd+0x2c4>
 80014d6:	0032      	movs	r2, r6
 80014d8:	2300      	movs	r3, #0
 80014da:	2100      	movs	r1, #0
 80014dc:	e644      	b.n	8001168 <__aeabi_dadd+0x134>
 80014de:	2120      	movs	r1, #32
 80014e0:	0038      	movs	r0, r7
 80014e2:	1a89      	subs	r1, r1, r2
 80014e4:	4665      	mov	r5, ip
 80014e6:	408f      	lsls	r7, r1
 80014e8:	408d      	lsls	r5, r1
 80014ea:	40d0      	lsrs	r0, r2
 80014ec:	1e79      	subs	r1, r7, #1
 80014ee:	418f      	sbcs	r7, r1
 80014f0:	4305      	orrs	r5, r0
 80014f2:	433d      	orrs	r5, r7
 80014f4:	4667      	mov	r7, ip
 80014f6:	40d7      	lsrs	r7, r2
 80014f8:	19db      	adds	r3, r3, r7
 80014fa:	e794      	b.n	8001426 <__aeabi_dadd+0x3f2>
 80014fc:	4a80      	ldr	r2, [pc, #512]	; (8001700 <__aeabi_dadd+0x6cc>)
 80014fe:	4290      	cmp	r0, r2
 8001500:	d100      	bne.n	8001504 <__aeabi_dadd+0x4d0>
 8001502:	e0ec      	b.n	80016de <__aeabi_dadd+0x6aa>
 8001504:	0039      	movs	r1, r7
 8001506:	4449      	add	r1, r9
 8001508:	4549      	cmp	r1, r9
 800150a:	4192      	sbcs	r2, r2
 800150c:	4463      	add	r3, ip
 800150e:	4252      	negs	r2, r2
 8001510:	189b      	adds	r3, r3, r2
 8001512:	07dd      	lsls	r5, r3, #31
 8001514:	0849      	lsrs	r1, r1, #1
 8001516:	085b      	lsrs	r3, r3, #1
 8001518:	4698      	mov	r8, r3
 800151a:	0006      	movs	r6, r0
 800151c:	430d      	orrs	r5, r1
 800151e:	e6a5      	b.n	800126c <__aeabi_dadd+0x238>
 8001520:	464a      	mov	r2, r9
 8001522:	1abd      	subs	r5, r7, r2
 8001524:	42af      	cmp	r7, r5
 8001526:	4189      	sbcs	r1, r1
 8001528:	4662      	mov	r2, ip
 800152a:	4249      	negs	r1, r1
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	1a5b      	subs	r3, r3, r1
 8001530:	4698      	mov	r8, r3
 8001532:	4654      	mov	r4, sl
 8001534:	e5d1      	b.n	80010da <__aeabi_dadd+0xa6>
 8001536:	076c      	lsls	r4, r5, #29
 8001538:	08f9      	lsrs	r1, r7, #3
 800153a:	4321      	orrs	r1, r4
 800153c:	08eb      	lsrs	r3, r5, #3
 800153e:	0004      	movs	r4, r0
 8001540:	e69d      	b.n	800127e <__aeabi_dadd+0x24a>
 8001542:	464a      	mov	r2, r9
 8001544:	431a      	orrs	r2, r3
 8001546:	d175      	bne.n	8001634 <__aeabi_dadd+0x600>
 8001548:	4661      	mov	r1, ip
 800154a:	4339      	orrs	r1, r7
 800154c:	d114      	bne.n	8001578 <__aeabi_dadd+0x544>
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	2400      	movs	r4, #0
 8001552:	031b      	lsls	r3, r3, #12
 8001554:	e6bc      	b.n	80012d0 <__aeabi_dadd+0x29c>
 8001556:	464a      	mov	r2, r9
 8001558:	1bd5      	subs	r5, r2, r7
 800155a:	45a9      	cmp	r9, r5
 800155c:	4189      	sbcs	r1, r1
 800155e:	4662      	mov	r2, ip
 8001560:	4249      	negs	r1, r1
 8001562:	1a9b      	subs	r3, r3, r2
 8001564:	1a5b      	subs	r3, r3, r1
 8001566:	4698      	mov	r8, r3
 8001568:	2601      	movs	r6, #1
 800156a:	e5ae      	b.n	80010ca <__aeabi_dadd+0x96>
 800156c:	464a      	mov	r2, r9
 800156e:	08d1      	lsrs	r1, r2, #3
 8001570:	075a      	lsls	r2, r3, #29
 8001572:	4311      	orrs	r1, r2
 8001574:	08db      	lsrs	r3, r3, #3
 8001576:	e6a7      	b.n	80012c8 <__aeabi_dadd+0x294>
 8001578:	4663      	mov	r3, ip
 800157a:	08f9      	lsrs	r1, r7, #3
 800157c:	075a      	lsls	r2, r3, #29
 800157e:	4654      	mov	r4, sl
 8001580:	4311      	orrs	r1, r2
 8001582:	08db      	lsrs	r3, r3, #3
 8001584:	e6a0      	b.n	80012c8 <__aeabi_dadd+0x294>
 8001586:	464a      	mov	r2, r9
 8001588:	4313      	orrs	r3, r2
 800158a:	001d      	movs	r5, r3
 800158c:	1e6b      	subs	r3, r5, #1
 800158e:	419d      	sbcs	r5, r3
 8001590:	e6c7      	b.n	8001322 <__aeabi_dadd+0x2ee>
 8001592:	0014      	movs	r4, r2
 8001594:	001e      	movs	r6, r3
 8001596:	3c20      	subs	r4, #32
 8001598:	40e6      	lsrs	r6, r4
 800159a:	2a20      	cmp	r2, #32
 800159c:	d005      	beq.n	80015aa <__aeabi_dadd+0x576>
 800159e:	2440      	movs	r4, #64	; 0x40
 80015a0:	1aa2      	subs	r2, r4, r2
 80015a2:	4093      	lsls	r3, r2
 80015a4:	464a      	mov	r2, r9
 80015a6:	431a      	orrs	r2, r3
 80015a8:	4691      	mov	r9, r2
 80015aa:	464d      	mov	r5, r9
 80015ac:	1e6b      	subs	r3, r5, #1
 80015ae:	419d      	sbcs	r5, r3
 80015b0:	4335      	orrs	r5, r6
 80015b2:	e778      	b.n	80014a6 <__aeabi_dadd+0x472>
 80015b4:	464a      	mov	r2, r9
 80015b6:	431a      	orrs	r2, r3
 80015b8:	d000      	beq.n	80015bc <__aeabi_dadd+0x588>
 80015ba:	e66b      	b.n	8001294 <__aeabi_dadd+0x260>
 80015bc:	076b      	lsls	r3, r5, #29
 80015be:	08f9      	lsrs	r1, r7, #3
 80015c0:	4319      	orrs	r1, r3
 80015c2:	08eb      	lsrs	r3, r5, #3
 80015c4:	e680      	b.n	80012c8 <__aeabi_dadd+0x294>
 80015c6:	4661      	mov	r1, ip
 80015c8:	4339      	orrs	r1, r7
 80015ca:	d054      	beq.n	8001676 <__aeabi_dadd+0x642>
 80015cc:	4663      	mov	r3, ip
 80015ce:	08f9      	lsrs	r1, r7, #3
 80015d0:	075c      	lsls	r4, r3, #29
 80015d2:	4321      	orrs	r1, r4
 80015d4:	08db      	lsrs	r3, r3, #3
 80015d6:	0004      	movs	r4, r0
 80015d8:	e654      	b.n	8001284 <__aeabi_dadd+0x250>
 80015da:	464a      	mov	r2, r9
 80015dc:	1abd      	subs	r5, r7, r2
 80015de:	42af      	cmp	r7, r5
 80015e0:	4189      	sbcs	r1, r1
 80015e2:	4662      	mov	r2, ip
 80015e4:	4249      	negs	r1, r1
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	1a5b      	subs	r3, r3, r1
 80015ea:	4698      	mov	r8, r3
 80015ec:	0004      	movs	r4, r0
 80015ee:	2601      	movs	r6, #1
 80015f0:	e56b      	b.n	80010ca <__aeabi_dadd+0x96>
 80015f2:	464a      	mov	r2, r9
 80015f4:	1bd5      	subs	r5, r2, r7
 80015f6:	45a9      	cmp	r9, r5
 80015f8:	4189      	sbcs	r1, r1
 80015fa:	4662      	mov	r2, ip
 80015fc:	4249      	negs	r1, r1
 80015fe:	1a9a      	subs	r2, r3, r2
 8001600:	1a52      	subs	r2, r2, r1
 8001602:	4690      	mov	r8, r2
 8001604:	0212      	lsls	r2, r2, #8
 8001606:	d532      	bpl.n	800166e <__aeabi_dadd+0x63a>
 8001608:	464a      	mov	r2, r9
 800160a:	1abd      	subs	r5, r7, r2
 800160c:	42af      	cmp	r7, r5
 800160e:	4189      	sbcs	r1, r1
 8001610:	4662      	mov	r2, ip
 8001612:	4249      	negs	r1, r1
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	1a5b      	subs	r3, r3, r1
 8001618:	4698      	mov	r8, r3
 800161a:	0004      	movs	r4, r0
 800161c:	e584      	b.n	8001128 <__aeabi_dadd+0xf4>
 800161e:	4663      	mov	r3, ip
 8001620:	08f9      	lsrs	r1, r7, #3
 8001622:	075a      	lsls	r2, r3, #29
 8001624:	4311      	orrs	r1, r2
 8001626:	08db      	lsrs	r3, r3, #3
 8001628:	e64e      	b.n	80012c8 <__aeabi_dadd+0x294>
 800162a:	08f9      	lsrs	r1, r7, #3
 800162c:	0768      	lsls	r0, r5, #29
 800162e:	4301      	orrs	r1, r0
 8001630:	08eb      	lsrs	r3, r5, #3
 8001632:	e624      	b.n	800127e <__aeabi_dadd+0x24a>
 8001634:	4662      	mov	r2, ip
 8001636:	433a      	orrs	r2, r7
 8001638:	d100      	bne.n	800163c <__aeabi_dadd+0x608>
 800163a:	e698      	b.n	800136e <__aeabi_dadd+0x33a>
 800163c:	464a      	mov	r2, r9
 800163e:	08d1      	lsrs	r1, r2, #3
 8001640:	075a      	lsls	r2, r3, #29
 8001642:	4311      	orrs	r1, r2
 8001644:	08da      	lsrs	r2, r3, #3
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	031b      	lsls	r3, r3, #12
 800164a:	421a      	tst	r2, r3
 800164c:	d008      	beq.n	8001660 <__aeabi_dadd+0x62c>
 800164e:	4660      	mov	r0, ip
 8001650:	08c5      	lsrs	r5, r0, #3
 8001652:	421d      	tst	r5, r3
 8001654:	d104      	bne.n	8001660 <__aeabi_dadd+0x62c>
 8001656:	4654      	mov	r4, sl
 8001658:	002a      	movs	r2, r5
 800165a:	08f9      	lsrs	r1, r7, #3
 800165c:	0743      	lsls	r3, r0, #29
 800165e:	4319      	orrs	r1, r3
 8001660:	0f4b      	lsrs	r3, r1, #29
 8001662:	00c9      	lsls	r1, r1, #3
 8001664:	075b      	lsls	r3, r3, #29
 8001666:	08c9      	lsrs	r1, r1, #3
 8001668:	4319      	orrs	r1, r3
 800166a:	0013      	movs	r3, r2
 800166c:	e62c      	b.n	80012c8 <__aeabi_dadd+0x294>
 800166e:	4641      	mov	r1, r8
 8001670:	4329      	orrs	r1, r5
 8001672:	d000      	beq.n	8001676 <__aeabi_dadd+0x642>
 8001674:	e5fa      	b.n	800126c <__aeabi_dadd+0x238>
 8001676:	2300      	movs	r3, #0
 8001678:	000a      	movs	r2, r1
 800167a:	2400      	movs	r4, #0
 800167c:	e602      	b.n	8001284 <__aeabi_dadd+0x250>
 800167e:	076b      	lsls	r3, r5, #29
 8001680:	08f9      	lsrs	r1, r7, #3
 8001682:	4319      	orrs	r1, r3
 8001684:	08eb      	lsrs	r3, r5, #3
 8001686:	e5fd      	b.n	8001284 <__aeabi_dadd+0x250>
 8001688:	4663      	mov	r3, ip
 800168a:	08f9      	lsrs	r1, r7, #3
 800168c:	075b      	lsls	r3, r3, #29
 800168e:	4319      	orrs	r1, r3
 8001690:	4663      	mov	r3, ip
 8001692:	0004      	movs	r4, r0
 8001694:	08db      	lsrs	r3, r3, #3
 8001696:	e617      	b.n	80012c8 <__aeabi_dadd+0x294>
 8001698:	003d      	movs	r5, r7
 800169a:	444d      	add	r5, r9
 800169c:	4463      	add	r3, ip
 800169e:	454d      	cmp	r5, r9
 80016a0:	4189      	sbcs	r1, r1
 80016a2:	4698      	mov	r8, r3
 80016a4:	4249      	negs	r1, r1
 80016a6:	4488      	add	r8, r1
 80016a8:	4643      	mov	r3, r8
 80016aa:	021b      	lsls	r3, r3, #8
 80016ac:	d400      	bmi.n	80016b0 <__aeabi_dadd+0x67c>
 80016ae:	e5dd      	b.n	800126c <__aeabi_dadd+0x238>
 80016b0:	4642      	mov	r2, r8
 80016b2:	4b14      	ldr	r3, [pc, #80]	; (8001704 <__aeabi_dadd+0x6d0>)
 80016b4:	2601      	movs	r6, #1
 80016b6:	401a      	ands	r2, r3
 80016b8:	4690      	mov	r8, r2
 80016ba:	e5d7      	b.n	800126c <__aeabi_dadd+0x238>
 80016bc:	0010      	movs	r0, r2
 80016be:	001e      	movs	r6, r3
 80016c0:	3820      	subs	r0, #32
 80016c2:	40c6      	lsrs	r6, r0
 80016c4:	2a20      	cmp	r2, #32
 80016c6:	d005      	beq.n	80016d4 <__aeabi_dadd+0x6a0>
 80016c8:	2040      	movs	r0, #64	; 0x40
 80016ca:	1a82      	subs	r2, r0, r2
 80016cc:	4093      	lsls	r3, r2
 80016ce:	464a      	mov	r2, r9
 80016d0:	431a      	orrs	r2, r3
 80016d2:	4691      	mov	r9, r2
 80016d4:	464d      	mov	r5, r9
 80016d6:	1e6b      	subs	r3, r5, #1
 80016d8:	419d      	sbcs	r5, r3
 80016da:	4335      	orrs	r5, r6
 80016dc:	e621      	b.n	8001322 <__aeabi_dadd+0x2ee>
 80016de:	0002      	movs	r2, r0
 80016e0:	2300      	movs	r3, #0
 80016e2:	2100      	movs	r1, #0
 80016e4:	e540      	b.n	8001168 <__aeabi_dadd+0x134>
 80016e6:	464a      	mov	r2, r9
 80016e8:	19d5      	adds	r5, r2, r7
 80016ea:	42bd      	cmp	r5, r7
 80016ec:	4189      	sbcs	r1, r1
 80016ee:	4463      	add	r3, ip
 80016f0:	4698      	mov	r8, r3
 80016f2:	4249      	negs	r1, r1
 80016f4:	4488      	add	r8, r1
 80016f6:	e5b3      	b.n	8001260 <__aeabi_dadd+0x22c>
 80016f8:	2100      	movs	r1, #0
 80016fa:	4a01      	ldr	r2, [pc, #4]	; (8001700 <__aeabi_dadd+0x6cc>)
 80016fc:	000b      	movs	r3, r1
 80016fe:	e533      	b.n	8001168 <__aeabi_dadd+0x134>
 8001700:	000007ff 	.word	0x000007ff
 8001704:	ff7fffff 	.word	0xff7fffff

08001708 <__aeabi_ddiv>:
 8001708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170a:	4657      	mov	r7, sl
 800170c:	464e      	mov	r6, r9
 800170e:	4645      	mov	r5, r8
 8001710:	46de      	mov	lr, fp
 8001712:	b5e0      	push	{r5, r6, r7, lr}
 8001714:	4681      	mov	r9, r0
 8001716:	0005      	movs	r5, r0
 8001718:	030c      	lsls	r4, r1, #12
 800171a:	0048      	lsls	r0, r1, #1
 800171c:	4692      	mov	sl, r2
 800171e:	001f      	movs	r7, r3
 8001720:	b085      	sub	sp, #20
 8001722:	0b24      	lsrs	r4, r4, #12
 8001724:	0d40      	lsrs	r0, r0, #21
 8001726:	0fce      	lsrs	r6, r1, #31
 8001728:	2800      	cmp	r0, #0
 800172a:	d059      	beq.n	80017e0 <__aeabi_ddiv+0xd8>
 800172c:	4b87      	ldr	r3, [pc, #540]	; (800194c <__aeabi_ddiv+0x244>)
 800172e:	4298      	cmp	r0, r3
 8001730:	d100      	bne.n	8001734 <__aeabi_ddiv+0x2c>
 8001732:	e098      	b.n	8001866 <__aeabi_ddiv+0x15e>
 8001734:	0f6b      	lsrs	r3, r5, #29
 8001736:	00e4      	lsls	r4, r4, #3
 8001738:	431c      	orrs	r4, r3
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	041b      	lsls	r3, r3, #16
 800173e:	4323      	orrs	r3, r4
 8001740:	4698      	mov	r8, r3
 8001742:	4b83      	ldr	r3, [pc, #524]	; (8001950 <__aeabi_ddiv+0x248>)
 8001744:	00ed      	lsls	r5, r5, #3
 8001746:	469b      	mov	fp, r3
 8001748:	2300      	movs	r3, #0
 800174a:	4699      	mov	r9, r3
 800174c:	4483      	add	fp, r0
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	033c      	lsls	r4, r7, #12
 8001752:	007b      	lsls	r3, r7, #1
 8001754:	4650      	mov	r0, sl
 8001756:	0b24      	lsrs	r4, r4, #12
 8001758:	0d5b      	lsrs	r3, r3, #21
 800175a:	0fff      	lsrs	r7, r7, #31
 800175c:	2b00      	cmp	r3, #0
 800175e:	d067      	beq.n	8001830 <__aeabi_ddiv+0x128>
 8001760:	4a7a      	ldr	r2, [pc, #488]	; (800194c <__aeabi_ddiv+0x244>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d018      	beq.n	8001798 <__aeabi_ddiv+0x90>
 8001766:	497a      	ldr	r1, [pc, #488]	; (8001950 <__aeabi_ddiv+0x248>)
 8001768:	0f42      	lsrs	r2, r0, #29
 800176a:	468c      	mov	ip, r1
 800176c:	00e4      	lsls	r4, r4, #3
 800176e:	4659      	mov	r1, fp
 8001770:	4314      	orrs	r4, r2
 8001772:	2280      	movs	r2, #128	; 0x80
 8001774:	4463      	add	r3, ip
 8001776:	0412      	lsls	r2, r2, #16
 8001778:	1acb      	subs	r3, r1, r3
 800177a:	4314      	orrs	r4, r2
 800177c:	469b      	mov	fp, r3
 800177e:	00c2      	lsls	r2, r0, #3
 8001780:	2000      	movs	r0, #0
 8001782:	0033      	movs	r3, r6
 8001784:	407b      	eors	r3, r7
 8001786:	469a      	mov	sl, r3
 8001788:	464b      	mov	r3, r9
 800178a:	2b0f      	cmp	r3, #15
 800178c:	d900      	bls.n	8001790 <__aeabi_ddiv+0x88>
 800178e:	e0ef      	b.n	8001970 <__aeabi_ddiv+0x268>
 8001790:	4970      	ldr	r1, [pc, #448]	; (8001954 <__aeabi_ddiv+0x24c>)
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	58cb      	ldr	r3, [r1, r3]
 8001796:	469f      	mov	pc, r3
 8001798:	4b6f      	ldr	r3, [pc, #444]	; (8001958 <__aeabi_ddiv+0x250>)
 800179a:	4652      	mov	r2, sl
 800179c:	469c      	mov	ip, r3
 800179e:	4322      	orrs	r2, r4
 80017a0:	44e3      	add	fp, ip
 80017a2:	2a00      	cmp	r2, #0
 80017a4:	d000      	beq.n	80017a8 <__aeabi_ddiv+0xa0>
 80017a6:	e095      	b.n	80018d4 <__aeabi_ddiv+0x1cc>
 80017a8:	4649      	mov	r1, r9
 80017aa:	2302      	movs	r3, #2
 80017ac:	4319      	orrs	r1, r3
 80017ae:	4689      	mov	r9, r1
 80017b0:	2400      	movs	r4, #0
 80017b2:	2002      	movs	r0, #2
 80017b4:	e7e5      	b.n	8001782 <__aeabi_ddiv+0x7a>
 80017b6:	2300      	movs	r3, #0
 80017b8:	2400      	movs	r4, #0
 80017ba:	2500      	movs	r5, #0
 80017bc:	4652      	mov	r2, sl
 80017be:	051b      	lsls	r3, r3, #20
 80017c0:	4323      	orrs	r3, r4
 80017c2:	07d2      	lsls	r2, r2, #31
 80017c4:	4313      	orrs	r3, r2
 80017c6:	0028      	movs	r0, r5
 80017c8:	0019      	movs	r1, r3
 80017ca:	b005      	add	sp, #20
 80017cc:	bcf0      	pop	{r4, r5, r6, r7}
 80017ce:	46bb      	mov	fp, r7
 80017d0:	46b2      	mov	sl, r6
 80017d2:	46a9      	mov	r9, r5
 80017d4:	46a0      	mov	r8, r4
 80017d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d8:	2400      	movs	r4, #0
 80017da:	2500      	movs	r5, #0
 80017dc:	4b5b      	ldr	r3, [pc, #364]	; (800194c <__aeabi_ddiv+0x244>)
 80017de:	e7ed      	b.n	80017bc <__aeabi_ddiv+0xb4>
 80017e0:	464b      	mov	r3, r9
 80017e2:	4323      	orrs	r3, r4
 80017e4:	4698      	mov	r8, r3
 80017e6:	d100      	bne.n	80017ea <__aeabi_ddiv+0xe2>
 80017e8:	e089      	b.n	80018fe <__aeabi_ddiv+0x1f6>
 80017ea:	2c00      	cmp	r4, #0
 80017ec:	d100      	bne.n	80017f0 <__aeabi_ddiv+0xe8>
 80017ee:	e1e0      	b.n	8001bb2 <__aeabi_ddiv+0x4aa>
 80017f0:	0020      	movs	r0, r4
 80017f2:	f001 fabf 	bl	8002d74 <__clzsi2>
 80017f6:	0001      	movs	r1, r0
 80017f8:	0002      	movs	r2, r0
 80017fa:	390b      	subs	r1, #11
 80017fc:	231d      	movs	r3, #29
 80017fe:	1a5b      	subs	r3, r3, r1
 8001800:	4649      	mov	r1, r9
 8001802:	0010      	movs	r0, r2
 8001804:	40d9      	lsrs	r1, r3
 8001806:	3808      	subs	r0, #8
 8001808:	4084      	lsls	r4, r0
 800180a:	000b      	movs	r3, r1
 800180c:	464d      	mov	r5, r9
 800180e:	4323      	orrs	r3, r4
 8001810:	4698      	mov	r8, r3
 8001812:	4085      	lsls	r5, r0
 8001814:	4851      	ldr	r0, [pc, #324]	; (800195c <__aeabi_ddiv+0x254>)
 8001816:	033c      	lsls	r4, r7, #12
 8001818:	1a83      	subs	r3, r0, r2
 800181a:	469b      	mov	fp, r3
 800181c:	2300      	movs	r3, #0
 800181e:	4699      	mov	r9, r3
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	007b      	lsls	r3, r7, #1
 8001824:	4650      	mov	r0, sl
 8001826:	0b24      	lsrs	r4, r4, #12
 8001828:	0d5b      	lsrs	r3, r3, #21
 800182a:	0fff      	lsrs	r7, r7, #31
 800182c:	2b00      	cmp	r3, #0
 800182e:	d197      	bne.n	8001760 <__aeabi_ddiv+0x58>
 8001830:	4652      	mov	r2, sl
 8001832:	4322      	orrs	r2, r4
 8001834:	d055      	beq.n	80018e2 <__aeabi_ddiv+0x1da>
 8001836:	2c00      	cmp	r4, #0
 8001838:	d100      	bne.n	800183c <__aeabi_ddiv+0x134>
 800183a:	e1ca      	b.n	8001bd2 <__aeabi_ddiv+0x4ca>
 800183c:	0020      	movs	r0, r4
 800183e:	f001 fa99 	bl	8002d74 <__clzsi2>
 8001842:	0002      	movs	r2, r0
 8001844:	3a0b      	subs	r2, #11
 8001846:	231d      	movs	r3, #29
 8001848:	0001      	movs	r1, r0
 800184a:	1a9b      	subs	r3, r3, r2
 800184c:	4652      	mov	r2, sl
 800184e:	3908      	subs	r1, #8
 8001850:	40da      	lsrs	r2, r3
 8001852:	408c      	lsls	r4, r1
 8001854:	4314      	orrs	r4, r2
 8001856:	4652      	mov	r2, sl
 8001858:	408a      	lsls	r2, r1
 800185a:	4b41      	ldr	r3, [pc, #260]	; (8001960 <__aeabi_ddiv+0x258>)
 800185c:	4458      	add	r0, fp
 800185e:	469b      	mov	fp, r3
 8001860:	4483      	add	fp, r0
 8001862:	2000      	movs	r0, #0
 8001864:	e78d      	b.n	8001782 <__aeabi_ddiv+0x7a>
 8001866:	464b      	mov	r3, r9
 8001868:	4323      	orrs	r3, r4
 800186a:	4698      	mov	r8, r3
 800186c:	d140      	bne.n	80018f0 <__aeabi_ddiv+0x1e8>
 800186e:	2308      	movs	r3, #8
 8001870:	4699      	mov	r9, r3
 8001872:	3b06      	subs	r3, #6
 8001874:	2500      	movs	r5, #0
 8001876:	4683      	mov	fp, r0
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	e769      	b.n	8001750 <__aeabi_ddiv+0x48>
 800187c:	46b2      	mov	sl, r6
 800187e:	9b00      	ldr	r3, [sp, #0]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d0a9      	beq.n	80017d8 <__aeabi_ddiv+0xd0>
 8001884:	2b03      	cmp	r3, #3
 8001886:	d100      	bne.n	800188a <__aeabi_ddiv+0x182>
 8001888:	e211      	b.n	8001cae <__aeabi_ddiv+0x5a6>
 800188a:	2b01      	cmp	r3, #1
 800188c:	d093      	beq.n	80017b6 <__aeabi_ddiv+0xae>
 800188e:	4a35      	ldr	r2, [pc, #212]	; (8001964 <__aeabi_ddiv+0x25c>)
 8001890:	445a      	add	r2, fp
 8001892:	2a00      	cmp	r2, #0
 8001894:	dc00      	bgt.n	8001898 <__aeabi_ddiv+0x190>
 8001896:	e13c      	b.n	8001b12 <__aeabi_ddiv+0x40a>
 8001898:	076b      	lsls	r3, r5, #29
 800189a:	d000      	beq.n	800189e <__aeabi_ddiv+0x196>
 800189c:	e1a7      	b.n	8001bee <__aeabi_ddiv+0x4e6>
 800189e:	08ed      	lsrs	r5, r5, #3
 80018a0:	4643      	mov	r3, r8
 80018a2:	01db      	lsls	r3, r3, #7
 80018a4:	d506      	bpl.n	80018b4 <__aeabi_ddiv+0x1ac>
 80018a6:	4642      	mov	r2, r8
 80018a8:	4b2f      	ldr	r3, [pc, #188]	; (8001968 <__aeabi_ddiv+0x260>)
 80018aa:	401a      	ands	r2, r3
 80018ac:	4690      	mov	r8, r2
 80018ae:	2280      	movs	r2, #128	; 0x80
 80018b0:	00d2      	lsls	r2, r2, #3
 80018b2:	445a      	add	r2, fp
 80018b4:	4b2d      	ldr	r3, [pc, #180]	; (800196c <__aeabi_ddiv+0x264>)
 80018b6:	429a      	cmp	r2, r3
 80018b8:	dc8e      	bgt.n	80017d8 <__aeabi_ddiv+0xd0>
 80018ba:	4643      	mov	r3, r8
 80018bc:	0552      	lsls	r2, r2, #21
 80018be:	0758      	lsls	r0, r3, #29
 80018c0:	025c      	lsls	r4, r3, #9
 80018c2:	4305      	orrs	r5, r0
 80018c4:	0b24      	lsrs	r4, r4, #12
 80018c6:	0d53      	lsrs	r3, r2, #21
 80018c8:	e778      	b.n	80017bc <__aeabi_ddiv+0xb4>
 80018ca:	46ba      	mov	sl, r7
 80018cc:	46a0      	mov	r8, r4
 80018ce:	0015      	movs	r5, r2
 80018d0:	9000      	str	r0, [sp, #0]
 80018d2:	e7d4      	b.n	800187e <__aeabi_ddiv+0x176>
 80018d4:	464a      	mov	r2, r9
 80018d6:	2303      	movs	r3, #3
 80018d8:	431a      	orrs	r2, r3
 80018da:	4691      	mov	r9, r2
 80018dc:	2003      	movs	r0, #3
 80018de:	4652      	mov	r2, sl
 80018e0:	e74f      	b.n	8001782 <__aeabi_ddiv+0x7a>
 80018e2:	4649      	mov	r1, r9
 80018e4:	2301      	movs	r3, #1
 80018e6:	4319      	orrs	r1, r3
 80018e8:	4689      	mov	r9, r1
 80018ea:	2400      	movs	r4, #0
 80018ec:	2001      	movs	r0, #1
 80018ee:	e748      	b.n	8001782 <__aeabi_ddiv+0x7a>
 80018f0:	230c      	movs	r3, #12
 80018f2:	4699      	mov	r9, r3
 80018f4:	3b09      	subs	r3, #9
 80018f6:	46a0      	mov	r8, r4
 80018f8:	4683      	mov	fp, r0
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	e728      	b.n	8001750 <__aeabi_ddiv+0x48>
 80018fe:	2304      	movs	r3, #4
 8001900:	4699      	mov	r9, r3
 8001902:	2300      	movs	r3, #0
 8001904:	469b      	mov	fp, r3
 8001906:	3301      	adds	r3, #1
 8001908:	2500      	movs	r5, #0
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	e720      	b.n	8001750 <__aeabi_ddiv+0x48>
 800190e:	2300      	movs	r3, #0
 8001910:	2480      	movs	r4, #128	; 0x80
 8001912:	469a      	mov	sl, r3
 8001914:	2500      	movs	r5, #0
 8001916:	4b0d      	ldr	r3, [pc, #52]	; (800194c <__aeabi_ddiv+0x244>)
 8001918:	0324      	lsls	r4, r4, #12
 800191a:	e74f      	b.n	80017bc <__aeabi_ddiv+0xb4>
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	4641      	mov	r1, r8
 8001920:	031b      	lsls	r3, r3, #12
 8001922:	4219      	tst	r1, r3
 8001924:	d008      	beq.n	8001938 <__aeabi_ddiv+0x230>
 8001926:	421c      	tst	r4, r3
 8001928:	d106      	bne.n	8001938 <__aeabi_ddiv+0x230>
 800192a:	431c      	orrs	r4, r3
 800192c:	0324      	lsls	r4, r4, #12
 800192e:	46ba      	mov	sl, r7
 8001930:	0015      	movs	r5, r2
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <__aeabi_ddiv+0x244>)
 8001934:	0b24      	lsrs	r4, r4, #12
 8001936:	e741      	b.n	80017bc <__aeabi_ddiv+0xb4>
 8001938:	2480      	movs	r4, #128	; 0x80
 800193a:	4643      	mov	r3, r8
 800193c:	0324      	lsls	r4, r4, #12
 800193e:	431c      	orrs	r4, r3
 8001940:	0324      	lsls	r4, r4, #12
 8001942:	46b2      	mov	sl, r6
 8001944:	4b01      	ldr	r3, [pc, #4]	; (800194c <__aeabi_ddiv+0x244>)
 8001946:	0b24      	lsrs	r4, r4, #12
 8001948:	e738      	b.n	80017bc <__aeabi_ddiv+0xb4>
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	000007ff 	.word	0x000007ff
 8001950:	fffffc01 	.word	0xfffffc01
 8001954:	0800e264 	.word	0x0800e264
 8001958:	fffff801 	.word	0xfffff801
 800195c:	fffffc0d 	.word	0xfffffc0d
 8001960:	000003f3 	.word	0x000003f3
 8001964:	000003ff 	.word	0x000003ff
 8001968:	feffffff 	.word	0xfeffffff
 800196c:	000007fe 	.word	0x000007fe
 8001970:	4544      	cmp	r4, r8
 8001972:	d200      	bcs.n	8001976 <__aeabi_ddiv+0x26e>
 8001974:	e116      	b.n	8001ba4 <__aeabi_ddiv+0x49c>
 8001976:	d100      	bne.n	800197a <__aeabi_ddiv+0x272>
 8001978:	e111      	b.n	8001b9e <__aeabi_ddiv+0x496>
 800197a:	2301      	movs	r3, #1
 800197c:	425b      	negs	r3, r3
 800197e:	469c      	mov	ip, r3
 8001980:	002e      	movs	r6, r5
 8001982:	4640      	mov	r0, r8
 8001984:	2500      	movs	r5, #0
 8001986:	44e3      	add	fp, ip
 8001988:	0223      	lsls	r3, r4, #8
 800198a:	0e14      	lsrs	r4, r2, #24
 800198c:	431c      	orrs	r4, r3
 800198e:	0c1b      	lsrs	r3, r3, #16
 8001990:	4699      	mov	r9, r3
 8001992:	0423      	lsls	r3, r4, #16
 8001994:	0c1f      	lsrs	r7, r3, #16
 8001996:	0212      	lsls	r2, r2, #8
 8001998:	4649      	mov	r1, r9
 800199a:	9200      	str	r2, [sp, #0]
 800199c:	9701      	str	r7, [sp, #4]
 800199e:	f7fe fc55 	bl	800024c <__aeabi_uidivmod>
 80019a2:	0002      	movs	r2, r0
 80019a4:	437a      	muls	r2, r7
 80019a6:	040b      	lsls	r3, r1, #16
 80019a8:	0c31      	lsrs	r1, r6, #16
 80019aa:	4680      	mov	r8, r0
 80019ac:	4319      	orrs	r1, r3
 80019ae:	428a      	cmp	r2, r1
 80019b0:	d90b      	bls.n	80019ca <__aeabi_ddiv+0x2c2>
 80019b2:	2301      	movs	r3, #1
 80019b4:	425b      	negs	r3, r3
 80019b6:	469c      	mov	ip, r3
 80019b8:	1909      	adds	r1, r1, r4
 80019ba:	44e0      	add	r8, ip
 80019bc:	428c      	cmp	r4, r1
 80019be:	d804      	bhi.n	80019ca <__aeabi_ddiv+0x2c2>
 80019c0:	428a      	cmp	r2, r1
 80019c2:	d902      	bls.n	80019ca <__aeabi_ddiv+0x2c2>
 80019c4:	1e83      	subs	r3, r0, #2
 80019c6:	4698      	mov	r8, r3
 80019c8:	1909      	adds	r1, r1, r4
 80019ca:	1a88      	subs	r0, r1, r2
 80019cc:	4649      	mov	r1, r9
 80019ce:	f7fe fc3d 	bl	800024c <__aeabi_uidivmod>
 80019d2:	0409      	lsls	r1, r1, #16
 80019d4:	468c      	mov	ip, r1
 80019d6:	0431      	lsls	r1, r6, #16
 80019d8:	4666      	mov	r6, ip
 80019da:	9a01      	ldr	r2, [sp, #4]
 80019dc:	0c09      	lsrs	r1, r1, #16
 80019de:	4342      	muls	r2, r0
 80019e0:	0003      	movs	r3, r0
 80019e2:	4331      	orrs	r1, r6
 80019e4:	428a      	cmp	r2, r1
 80019e6:	d904      	bls.n	80019f2 <__aeabi_ddiv+0x2ea>
 80019e8:	1909      	adds	r1, r1, r4
 80019ea:	3b01      	subs	r3, #1
 80019ec:	428c      	cmp	r4, r1
 80019ee:	d800      	bhi.n	80019f2 <__aeabi_ddiv+0x2ea>
 80019f0:	e111      	b.n	8001c16 <__aeabi_ddiv+0x50e>
 80019f2:	1a89      	subs	r1, r1, r2
 80019f4:	4642      	mov	r2, r8
 80019f6:	9e00      	ldr	r6, [sp, #0]
 80019f8:	0412      	lsls	r2, r2, #16
 80019fa:	431a      	orrs	r2, r3
 80019fc:	0c33      	lsrs	r3, r6, #16
 80019fe:	001f      	movs	r7, r3
 8001a00:	0c10      	lsrs	r0, r2, #16
 8001a02:	4690      	mov	r8, r2
 8001a04:	9302      	str	r3, [sp, #8]
 8001a06:	0413      	lsls	r3, r2, #16
 8001a08:	0432      	lsls	r2, r6, #16
 8001a0a:	0c16      	lsrs	r6, r2, #16
 8001a0c:	0032      	movs	r2, r6
 8001a0e:	0c1b      	lsrs	r3, r3, #16
 8001a10:	435a      	muls	r2, r3
 8001a12:	9603      	str	r6, [sp, #12]
 8001a14:	437b      	muls	r3, r7
 8001a16:	4346      	muls	r6, r0
 8001a18:	4378      	muls	r0, r7
 8001a1a:	0c17      	lsrs	r7, r2, #16
 8001a1c:	46bc      	mov	ip, r7
 8001a1e:	199b      	adds	r3, r3, r6
 8001a20:	4463      	add	r3, ip
 8001a22:	429e      	cmp	r6, r3
 8001a24:	d903      	bls.n	8001a2e <__aeabi_ddiv+0x326>
 8001a26:	2680      	movs	r6, #128	; 0x80
 8001a28:	0276      	lsls	r6, r6, #9
 8001a2a:	46b4      	mov	ip, r6
 8001a2c:	4460      	add	r0, ip
 8001a2e:	0c1e      	lsrs	r6, r3, #16
 8001a30:	1830      	adds	r0, r6, r0
 8001a32:	0416      	lsls	r6, r2, #16
 8001a34:	041b      	lsls	r3, r3, #16
 8001a36:	0c36      	lsrs	r6, r6, #16
 8001a38:	199e      	adds	r6, r3, r6
 8001a3a:	4281      	cmp	r1, r0
 8001a3c:	d200      	bcs.n	8001a40 <__aeabi_ddiv+0x338>
 8001a3e:	e09c      	b.n	8001b7a <__aeabi_ddiv+0x472>
 8001a40:	d100      	bne.n	8001a44 <__aeabi_ddiv+0x33c>
 8001a42:	e097      	b.n	8001b74 <__aeabi_ddiv+0x46c>
 8001a44:	1bae      	subs	r6, r5, r6
 8001a46:	1a09      	subs	r1, r1, r0
 8001a48:	42b5      	cmp	r5, r6
 8001a4a:	4180      	sbcs	r0, r0
 8001a4c:	4240      	negs	r0, r0
 8001a4e:	1a08      	subs	r0, r1, r0
 8001a50:	4284      	cmp	r4, r0
 8001a52:	d100      	bne.n	8001a56 <__aeabi_ddiv+0x34e>
 8001a54:	e111      	b.n	8001c7a <__aeabi_ddiv+0x572>
 8001a56:	4649      	mov	r1, r9
 8001a58:	f7fe fbf8 	bl	800024c <__aeabi_uidivmod>
 8001a5c:	9a01      	ldr	r2, [sp, #4]
 8001a5e:	040b      	lsls	r3, r1, #16
 8001a60:	4342      	muls	r2, r0
 8001a62:	0c31      	lsrs	r1, r6, #16
 8001a64:	0005      	movs	r5, r0
 8001a66:	4319      	orrs	r1, r3
 8001a68:	428a      	cmp	r2, r1
 8001a6a:	d907      	bls.n	8001a7c <__aeabi_ddiv+0x374>
 8001a6c:	1909      	adds	r1, r1, r4
 8001a6e:	3d01      	subs	r5, #1
 8001a70:	428c      	cmp	r4, r1
 8001a72:	d803      	bhi.n	8001a7c <__aeabi_ddiv+0x374>
 8001a74:	428a      	cmp	r2, r1
 8001a76:	d901      	bls.n	8001a7c <__aeabi_ddiv+0x374>
 8001a78:	1e85      	subs	r5, r0, #2
 8001a7a:	1909      	adds	r1, r1, r4
 8001a7c:	1a88      	subs	r0, r1, r2
 8001a7e:	4649      	mov	r1, r9
 8001a80:	f7fe fbe4 	bl	800024c <__aeabi_uidivmod>
 8001a84:	0409      	lsls	r1, r1, #16
 8001a86:	468c      	mov	ip, r1
 8001a88:	0431      	lsls	r1, r6, #16
 8001a8a:	4666      	mov	r6, ip
 8001a8c:	9a01      	ldr	r2, [sp, #4]
 8001a8e:	0c09      	lsrs	r1, r1, #16
 8001a90:	4342      	muls	r2, r0
 8001a92:	0003      	movs	r3, r0
 8001a94:	4331      	orrs	r1, r6
 8001a96:	428a      	cmp	r2, r1
 8001a98:	d907      	bls.n	8001aaa <__aeabi_ddiv+0x3a2>
 8001a9a:	1909      	adds	r1, r1, r4
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	428c      	cmp	r4, r1
 8001aa0:	d803      	bhi.n	8001aaa <__aeabi_ddiv+0x3a2>
 8001aa2:	428a      	cmp	r2, r1
 8001aa4:	d901      	bls.n	8001aaa <__aeabi_ddiv+0x3a2>
 8001aa6:	1e83      	subs	r3, r0, #2
 8001aa8:	1909      	adds	r1, r1, r4
 8001aaa:	9e03      	ldr	r6, [sp, #12]
 8001aac:	1a89      	subs	r1, r1, r2
 8001aae:	0032      	movs	r2, r6
 8001ab0:	042d      	lsls	r5, r5, #16
 8001ab2:	431d      	orrs	r5, r3
 8001ab4:	9f02      	ldr	r7, [sp, #8]
 8001ab6:	042b      	lsls	r3, r5, #16
 8001ab8:	0c1b      	lsrs	r3, r3, #16
 8001aba:	435a      	muls	r2, r3
 8001abc:	437b      	muls	r3, r7
 8001abe:	469c      	mov	ip, r3
 8001ac0:	0c28      	lsrs	r0, r5, #16
 8001ac2:	4346      	muls	r6, r0
 8001ac4:	0c13      	lsrs	r3, r2, #16
 8001ac6:	44b4      	add	ip, r6
 8001ac8:	4463      	add	r3, ip
 8001aca:	4378      	muls	r0, r7
 8001acc:	429e      	cmp	r6, r3
 8001ace:	d903      	bls.n	8001ad8 <__aeabi_ddiv+0x3d0>
 8001ad0:	2680      	movs	r6, #128	; 0x80
 8001ad2:	0276      	lsls	r6, r6, #9
 8001ad4:	46b4      	mov	ip, r6
 8001ad6:	4460      	add	r0, ip
 8001ad8:	0c1e      	lsrs	r6, r3, #16
 8001ada:	0412      	lsls	r2, r2, #16
 8001adc:	041b      	lsls	r3, r3, #16
 8001ade:	0c12      	lsrs	r2, r2, #16
 8001ae0:	1830      	adds	r0, r6, r0
 8001ae2:	189b      	adds	r3, r3, r2
 8001ae4:	4281      	cmp	r1, r0
 8001ae6:	d306      	bcc.n	8001af6 <__aeabi_ddiv+0x3ee>
 8001ae8:	d002      	beq.n	8001af0 <__aeabi_ddiv+0x3e8>
 8001aea:	2301      	movs	r3, #1
 8001aec:	431d      	orrs	r5, r3
 8001aee:	e6ce      	b.n	800188e <__aeabi_ddiv+0x186>
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d100      	bne.n	8001af6 <__aeabi_ddiv+0x3ee>
 8001af4:	e6cb      	b.n	800188e <__aeabi_ddiv+0x186>
 8001af6:	1861      	adds	r1, r4, r1
 8001af8:	1e6e      	subs	r6, r5, #1
 8001afa:	42a1      	cmp	r1, r4
 8001afc:	d200      	bcs.n	8001b00 <__aeabi_ddiv+0x3f8>
 8001afe:	e0a4      	b.n	8001c4a <__aeabi_ddiv+0x542>
 8001b00:	4281      	cmp	r1, r0
 8001b02:	d200      	bcs.n	8001b06 <__aeabi_ddiv+0x3fe>
 8001b04:	e0c9      	b.n	8001c9a <__aeabi_ddiv+0x592>
 8001b06:	d100      	bne.n	8001b0a <__aeabi_ddiv+0x402>
 8001b08:	e0d9      	b.n	8001cbe <__aeabi_ddiv+0x5b6>
 8001b0a:	0035      	movs	r5, r6
 8001b0c:	e7ed      	b.n	8001aea <__aeabi_ddiv+0x3e2>
 8001b0e:	2501      	movs	r5, #1
 8001b10:	426d      	negs	r5, r5
 8001b12:	2101      	movs	r1, #1
 8001b14:	1a89      	subs	r1, r1, r2
 8001b16:	2938      	cmp	r1, #56	; 0x38
 8001b18:	dd00      	ble.n	8001b1c <__aeabi_ddiv+0x414>
 8001b1a:	e64c      	b.n	80017b6 <__aeabi_ddiv+0xae>
 8001b1c:	291f      	cmp	r1, #31
 8001b1e:	dc00      	bgt.n	8001b22 <__aeabi_ddiv+0x41a>
 8001b20:	e07f      	b.n	8001c22 <__aeabi_ddiv+0x51a>
 8001b22:	231f      	movs	r3, #31
 8001b24:	425b      	negs	r3, r3
 8001b26:	1a9a      	subs	r2, r3, r2
 8001b28:	4643      	mov	r3, r8
 8001b2a:	40d3      	lsrs	r3, r2
 8001b2c:	2920      	cmp	r1, #32
 8001b2e:	d004      	beq.n	8001b3a <__aeabi_ddiv+0x432>
 8001b30:	4644      	mov	r4, r8
 8001b32:	4a65      	ldr	r2, [pc, #404]	; (8001cc8 <__aeabi_ddiv+0x5c0>)
 8001b34:	445a      	add	r2, fp
 8001b36:	4094      	lsls	r4, r2
 8001b38:	4325      	orrs	r5, r4
 8001b3a:	1e6a      	subs	r2, r5, #1
 8001b3c:	4195      	sbcs	r5, r2
 8001b3e:	2207      	movs	r2, #7
 8001b40:	432b      	orrs	r3, r5
 8001b42:	0015      	movs	r5, r2
 8001b44:	2400      	movs	r4, #0
 8001b46:	401d      	ands	r5, r3
 8001b48:	421a      	tst	r2, r3
 8001b4a:	d100      	bne.n	8001b4e <__aeabi_ddiv+0x446>
 8001b4c:	e0a1      	b.n	8001c92 <__aeabi_ddiv+0x58a>
 8001b4e:	220f      	movs	r2, #15
 8001b50:	2400      	movs	r4, #0
 8001b52:	401a      	ands	r2, r3
 8001b54:	2a04      	cmp	r2, #4
 8001b56:	d100      	bne.n	8001b5a <__aeabi_ddiv+0x452>
 8001b58:	e098      	b.n	8001c8c <__aeabi_ddiv+0x584>
 8001b5a:	1d1a      	adds	r2, r3, #4
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	419b      	sbcs	r3, r3
 8001b60:	425b      	negs	r3, r3
 8001b62:	18e4      	adds	r4, r4, r3
 8001b64:	0013      	movs	r3, r2
 8001b66:	0222      	lsls	r2, r4, #8
 8001b68:	d400      	bmi.n	8001b6c <__aeabi_ddiv+0x464>
 8001b6a:	e08f      	b.n	8001c8c <__aeabi_ddiv+0x584>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	2400      	movs	r4, #0
 8001b70:	2500      	movs	r5, #0
 8001b72:	e623      	b.n	80017bc <__aeabi_ddiv+0xb4>
 8001b74:	42b5      	cmp	r5, r6
 8001b76:	d300      	bcc.n	8001b7a <__aeabi_ddiv+0x472>
 8001b78:	e764      	b.n	8001a44 <__aeabi_ddiv+0x33c>
 8001b7a:	4643      	mov	r3, r8
 8001b7c:	1e5a      	subs	r2, r3, #1
 8001b7e:	9b00      	ldr	r3, [sp, #0]
 8001b80:	469c      	mov	ip, r3
 8001b82:	4465      	add	r5, ip
 8001b84:	001f      	movs	r7, r3
 8001b86:	429d      	cmp	r5, r3
 8001b88:	419b      	sbcs	r3, r3
 8001b8a:	425b      	negs	r3, r3
 8001b8c:	191b      	adds	r3, r3, r4
 8001b8e:	18c9      	adds	r1, r1, r3
 8001b90:	428c      	cmp	r4, r1
 8001b92:	d23a      	bcs.n	8001c0a <__aeabi_ddiv+0x502>
 8001b94:	4288      	cmp	r0, r1
 8001b96:	d863      	bhi.n	8001c60 <__aeabi_ddiv+0x558>
 8001b98:	d060      	beq.n	8001c5c <__aeabi_ddiv+0x554>
 8001b9a:	4690      	mov	r8, r2
 8001b9c:	e752      	b.n	8001a44 <__aeabi_ddiv+0x33c>
 8001b9e:	42aa      	cmp	r2, r5
 8001ba0:	d900      	bls.n	8001ba4 <__aeabi_ddiv+0x49c>
 8001ba2:	e6ea      	b.n	800197a <__aeabi_ddiv+0x272>
 8001ba4:	4643      	mov	r3, r8
 8001ba6:	07de      	lsls	r6, r3, #31
 8001ba8:	0858      	lsrs	r0, r3, #1
 8001baa:	086b      	lsrs	r3, r5, #1
 8001bac:	431e      	orrs	r6, r3
 8001bae:	07ed      	lsls	r5, r5, #31
 8001bb0:	e6ea      	b.n	8001988 <__aeabi_ddiv+0x280>
 8001bb2:	4648      	mov	r0, r9
 8001bb4:	f001 f8de 	bl	8002d74 <__clzsi2>
 8001bb8:	0001      	movs	r1, r0
 8001bba:	0002      	movs	r2, r0
 8001bbc:	3115      	adds	r1, #21
 8001bbe:	3220      	adds	r2, #32
 8001bc0:	291c      	cmp	r1, #28
 8001bc2:	dc00      	bgt.n	8001bc6 <__aeabi_ddiv+0x4be>
 8001bc4:	e61a      	b.n	80017fc <__aeabi_ddiv+0xf4>
 8001bc6:	464b      	mov	r3, r9
 8001bc8:	3808      	subs	r0, #8
 8001bca:	4083      	lsls	r3, r0
 8001bcc:	2500      	movs	r5, #0
 8001bce:	4698      	mov	r8, r3
 8001bd0:	e620      	b.n	8001814 <__aeabi_ddiv+0x10c>
 8001bd2:	f001 f8cf 	bl	8002d74 <__clzsi2>
 8001bd6:	0003      	movs	r3, r0
 8001bd8:	001a      	movs	r2, r3
 8001bda:	3215      	adds	r2, #21
 8001bdc:	3020      	adds	r0, #32
 8001bde:	2a1c      	cmp	r2, #28
 8001be0:	dc00      	bgt.n	8001be4 <__aeabi_ddiv+0x4dc>
 8001be2:	e630      	b.n	8001846 <__aeabi_ddiv+0x13e>
 8001be4:	4654      	mov	r4, sl
 8001be6:	3b08      	subs	r3, #8
 8001be8:	2200      	movs	r2, #0
 8001bea:	409c      	lsls	r4, r3
 8001bec:	e635      	b.n	800185a <__aeabi_ddiv+0x152>
 8001bee:	230f      	movs	r3, #15
 8001bf0:	402b      	ands	r3, r5
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_ddiv+0x4f0>
 8001bf6:	e652      	b.n	800189e <__aeabi_ddiv+0x196>
 8001bf8:	2305      	movs	r3, #5
 8001bfa:	425b      	negs	r3, r3
 8001bfc:	42ab      	cmp	r3, r5
 8001bfe:	419b      	sbcs	r3, r3
 8001c00:	3504      	adds	r5, #4
 8001c02:	425b      	negs	r3, r3
 8001c04:	08ed      	lsrs	r5, r5, #3
 8001c06:	4498      	add	r8, r3
 8001c08:	e64a      	b.n	80018a0 <__aeabi_ddiv+0x198>
 8001c0a:	428c      	cmp	r4, r1
 8001c0c:	d1c5      	bne.n	8001b9a <__aeabi_ddiv+0x492>
 8001c0e:	42af      	cmp	r7, r5
 8001c10:	d9c0      	bls.n	8001b94 <__aeabi_ddiv+0x48c>
 8001c12:	4690      	mov	r8, r2
 8001c14:	e716      	b.n	8001a44 <__aeabi_ddiv+0x33c>
 8001c16:	428a      	cmp	r2, r1
 8001c18:	d800      	bhi.n	8001c1c <__aeabi_ddiv+0x514>
 8001c1a:	e6ea      	b.n	80019f2 <__aeabi_ddiv+0x2ea>
 8001c1c:	1e83      	subs	r3, r0, #2
 8001c1e:	1909      	adds	r1, r1, r4
 8001c20:	e6e7      	b.n	80019f2 <__aeabi_ddiv+0x2ea>
 8001c22:	4a2a      	ldr	r2, [pc, #168]	; (8001ccc <__aeabi_ddiv+0x5c4>)
 8001c24:	0028      	movs	r0, r5
 8001c26:	445a      	add	r2, fp
 8001c28:	4643      	mov	r3, r8
 8001c2a:	4095      	lsls	r5, r2
 8001c2c:	4093      	lsls	r3, r2
 8001c2e:	40c8      	lsrs	r0, r1
 8001c30:	1e6a      	subs	r2, r5, #1
 8001c32:	4195      	sbcs	r5, r2
 8001c34:	4644      	mov	r4, r8
 8001c36:	4303      	orrs	r3, r0
 8001c38:	432b      	orrs	r3, r5
 8001c3a:	40cc      	lsrs	r4, r1
 8001c3c:	075a      	lsls	r2, r3, #29
 8001c3e:	d092      	beq.n	8001b66 <__aeabi_ddiv+0x45e>
 8001c40:	220f      	movs	r2, #15
 8001c42:	401a      	ands	r2, r3
 8001c44:	2a04      	cmp	r2, #4
 8001c46:	d188      	bne.n	8001b5a <__aeabi_ddiv+0x452>
 8001c48:	e78d      	b.n	8001b66 <__aeabi_ddiv+0x45e>
 8001c4a:	0035      	movs	r5, r6
 8001c4c:	4281      	cmp	r1, r0
 8001c4e:	d000      	beq.n	8001c52 <__aeabi_ddiv+0x54a>
 8001c50:	e74b      	b.n	8001aea <__aeabi_ddiv+0x3e2>
 8001c52:	9a00      	ldr	r2, [sp, #0]
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d000      	beq.n	8001c5a <__aeabi_ddiv+0x552>
 8001c58:	e747      	b.n	8001aea <__aeabi_ddiv+0x3e2>
 8001c5a:	e618      	b.n	800188e <__aeabi_ddiv+0x186>
 8001c5c:	42ae      	cmp	r6, r5
 8001c5e:	d99c      	bls.n	8001b9a <__aeabi_ddiv+0x492>
 8001c60:	2302      	movs	r3, #2
 8001c62:	425b      	negs	r3, r3
 8001c64:	469c      	mov	ip, r3
 8001c66:	9b00      	ldr	r3, [sp, #0]
 8001c68:	44e0      	add	r8, ip
 8001c6a:	469c      	mov	ip, r3
 8001c6c:	4465      	add	r5, ip
 8001c6e:	429d      	cmp	r5, r3
 8001c70:	419b      	sbcs	r3, r3
 8001c72:	425b      	negs	r3, r3
 8001c74:	191b      	adds	r3, r3, r4
 8001c76:	18c9      	adds	r1, r1, r3
 8001c78:	e6e4      	b.n	8001a44 <__aeabi_ddiv+0x33c>
 8001c7a:	4a15      	ldr	r2, [pc, #84]	; (8001cd0 <__aeabi_ddiv+0x5c8>)
 8001c7c:	445a      	add	r2, fp
 8001c7e:	2a00      	cmp	r2, #0
 8001c80:	dc00      	bgt.n	8001c84 <__aeabi_ddiv+0x57c>
 8001c82:	e744      	b.n	8001b0e <__aeabi_ddiv+0x406>
 8001c84:	2301      	movs	r3, #1
 8001c86:	2500      	movs	r5, #0
 8001c88:	4498      	add	r8, r3
 8001c8a:	e609      	b.n	80018a0 <__aeabi_ddiv+0x198>
 8001c8c:	0765      	lsls	r5, r4, #29
 8001c8e:	0264      	lsls	r4, r4, #9
 8001c90:	0b24      	lsrs	r4, r4, #12
 8001c92:	08db      	lsrs	r3, r3, #3
 8001c94:	431d      	orrs	r5, r3
 8001c96:	2300      	movs	r3, #0
 8001c98:	e590      	b.n	80017bc <__aeabi_ddiv+0xb4>
 8001c9a:	9e00      	ldr	r6, [sp, #0]
 8001c9c:	3d02      	subs	r5, #2
 8001c9e:	0072      	lsls	r2, r6, #1
 8001ca0:	42b2      	cmp	r2, r6
 8001ca2:	41bf      	sbcs	r7, r7
 8001ca4:	427f      	negs	r7, r7
 8001ca6:	193c      	adds	r4, r7, r4
 8001ca8:	1909      	adds	r1, r1, r4
 8001caa:	9200      	str	r2, [sp, #0]
 8001cac:	e7ce      	b.n	8001c4c <__aeabi_ddiv+0x544>
 8001cae:	2480      	movs	r4, #128	; 0x80
 8001cb0:	4643      	mov	r3, r8
 8001cb2:	0324      	lsls	r4, r4, #12
 8001cb4:	431c      	orrs	r4, r3
 8001cb6:	0324      	lsls	r4, r4, #12
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <__aeabi_ddiv+0x5cc>)
 8001cba:	0b24      	lsrs	r4, r4, #12
 8001cbc:	e57e      	b.n	80017bc <__aeabi_ddiv+0xb4>
 8001cbe:	9a00      	ldr	r2, [sp, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d3ea      	bcc.n	8001c9a <__aeabi_ddiv+0x592>
 8001cc4:	0035      	movs	r5, r6
 8001cc6:	e7c4      	b.n	8001c52 <__aeabi_ddiv+0x54a>
 8001cc8:	0000043e 	.word	0x0000043e
 8001ccc:	0000041e 	.word	0x0000041e
 8001cd0:	000003ff 	.word	0x000003ff
 8001cd4:	000007ff 	.word	0x000007ff

08001cd8 <__eqdf2>:
 8001cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cda:	464f      	mov	r7, r9
 8001cdc:	4646      	mov	r6, r8
 8001cde:	46d6      	mov	lr, sl
 8001ce0:	4694      	mov	ip, r2
 8001ce2:	4691      	mov	r9, r2
 8001ce4:	031a      	lsls	r2, r3, #12
 8001ce6:	0b12      	lsrs	r2, r2, #12
 8001ce8:	4d18      	ldr	r5, [pc, #96]	; (8001d4c <__eqdf2+0x74>)
 8001cea:	b5c0      	push	{r6, r7, lr}
 8001cec:	004c      	lsls	r4, r1, #1
 8001cee:	030f      	lsls	r7, r1, #12
 8001cf0:	4692      	mov	sl, r2
 8001cf2:	005a      	lsls	r2, r3, #1
 8001cf4:	0006      	movs	r6, r0
 8001cf6:	4680      	mov	r8, r0
 8001cf8:	0b3f      	lsrs	r7, r7, #12
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	0d64      	lsrs	r4, r4, #21
 8001cfe:	0fc9      	lsrs	r1, r1, #31
 8001d00:	0d52      	lsrs	r2, r2, #21
 8001d02:	0fdb      	lsrs	r3, r3, #31
 8001d04:	42ac      	cmp	r4, r5
 8001d06:	d00a      	beq.n	8001d1e <__eqdf2+0x46>
 8001d08:	42aa      	cmp	r2, r5
 8001d0a:	d003      	beq.n	8001d14 <__eqdf2+0x3c>
 8001d0c:	4294      	cmp	r4, r2
 8001d0e:	d101      	bne.n	8001d14 <__eqdf2+0x3c>
 8001d10:	4557      	cmp	r7, sl
 8001d12:	d00d      	beq.n	8001d30 <__eqdf2+0x58>
 8001d14:	bce0      	pop	{r5, r6, r7}
 8001d16:	46ba      	mov	sl, r7
 8001d18:	46b1      	mov	r9, r6
 8001d1a:	46a8      	mov	r8, r5
 8001d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1e:	003d      	movs	r5, r7
 8001d20:	4335      	orrs	r5, r6
 8001d22:	d1f7      	bne.n	8001d14 <__eqdf2+0x3c>
 8001d24:	42a2      	cmp	r2, r4
 8001d26:	d1f5      	bne.n	8001d14 <__eqdf2+0x3c>
 8001d28:	4652      	mov	r2, sl
 8001d2a:	4665      	mov	r5, ip
 8001d2c:	432a      	orrs	r2, r5
 8001d2e:	d1f1      	bne.n	8001d14 <__eqdf2+0x3c>
 8001d30:	2001      	movs	r0, #1
 8001d32:	45c8      	cmp	r8, r9
 8001d34:	d1ee      	bne.n	8001d14 <__eqdf2+0x3c>
 8001d36:	4299      	cmp	r1, r3
 8001d38:	d006      	beq.n	8001d48 <__eqdf2+0x70>
 8001d3a:	2c00      	cmp	r4, #0
 8001d3c:	d1ea      	bne.n	8001d14 <__eqdf2+0x3c>
 8001d3e:	433e      	orrs	r6, r7
 8001d40:	0030      	movs	r0, r6
 8001d42:	1e46      	subs	r6, r0, #1
 8001d44:	41b0      	sbcs	r0, r6
 8001d46:	e7e5      	b.n	8001d14 <__eqdf2+0x3c>
 8001d48:	2000      	movs	r0, #0
 8001d4a:	e7e3      	b.n	8001d14 <__eqdf2+0x3c>
 8001d4c:	000007ff 	.word	0x000007ff

08001d50 <__gedf2>:
 8001d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d52:	464e      	mov	r6, r9
 8001d54:	4645      	mov	r5, r8
 8001d56:	4657      	mov	r7, sl
 8001d58:	46de      	mov	lr, fp
 8001d5a:	0004      	movs	r4, r0
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	b5e0      	push	{r5, r6, r7, lr}
 8001d60:	0016      	movs	r6, r2
 8001d62:	031b      	lsls	r3, r3, #12
 8001d64:	0b1b      	lsrs	r3, r3, #12
 8001d66:	4d32      	ldr	r5, [pc, #200]	; (8001e30 <__gedf2+0xe0>)
 8001d68:	030f      	lsls	r7, r1, #12
 8001d6a:	004a      	lsls	r2, r1, #1
 8001d6c:	4699      	mov	r9, r3
 8001d6e:	0043      	lsls	r3, r0, #1
 8001d70:	46a4      	mov	ip, r4
 8001d72:	46b0      	mov	r8, r6
 8001d74:	0b3f      	lsrs	r7, r7, #12
 8001d76:	0d52      	lsrs	r2, r2, #21
 8001d78:	0fc9      	lsrs	r1, r1, #31
 8001d7a:	0d5b      	lsrs	r3, r3, #21
 8001d7c:	0fc0      	lsrs	r0, r0, #31
 8001d7e:	42aa      	cmp	r2, r5
 8001d80:	d029      	beq.n	8001dd6 <__gedf2+0x86>
 8001d82:	42ab      	cmp	r3, r5
 8001d84:	d018      	beq.n	8001db8 <__gedf2+0x68>
 8001d86:	2a00      	cmp	r2, #0
 8001d88:	d12a      	bne.n	8001de0 <__gedf2+0x90>
 8001d8a:	433c      	orrs	r4, r7
 8001d8c:	46a3      	mov	fp, r4
 8001d8e:	4265      	negs	r5, r4
 8001d90:	4165      	adcs	r5, r4
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d102      	bne.n	8001d9c <__gedf2+0x4c>
 8001d96:	464c      	mov	r4, r9
 8001d98:	4326      	orrs	r6, r4
 8001d9a:	d027      	beq.n	8001dec <__gedf2+0x9c>
 8001d9c:	2d00      	cmp	r5, #0
 8001d9e:	d115      	bne.n	8001dcc <__gedf2+0x7c>
 8001da0:	4281      	cmp	r1, r0
 8001da2:	d028      	beq.n	8001df6 <__gedf2+0xa6>
 8001da4:	2002      	movs	r0, #2
 8001da6:	3901      	subs	r1, #1
 8001da8:	4008      	ands	r0, r1
 8001daa:	3801      	subs	r0, #1
 8001dac:	bcf0      	pop	{r4, r5, r6, r7}
 8001dae:	46bb      	mov	fp, r7
 8001db0:	46b2      	mov	sl, r6
 8001db2:	46a9      	mov	r9, r5
 8001db4:	46a0      	mov	r8, r4
 8001db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001db8:	464d      	mov	r5, r9
 8001dba:	432e      	orrs	r6, r5
 8001dbc:	d12f      	bne.n	8001e1e <__gedf2+0xce>
 8001dbe:	2a00      	cmp	r2, #0
 8001dc0:	d1ee      	bne.n	8001da0 <__gedf2+0x50>
 8001dc2:	433c      	orrs	r4, r7
 8001dc4:	4265      	negs	r5, r4
 8001dc6:	4165      	adcs	r5, r4
 8001dc8:	2d00      	cmp	r5, #0
 8001dca:	d0e9      	beq.n	8001da0 <__gedf2+0x50>
 8001dcc:	2800      	cmp	r0, #0
 8001dce:	d1ed      	bne.n	8001dac <__gedf2+0x5c>
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	4240      	negs	r0, r0
 8001dd4:	e7ea      	b.n	8001dac <__gedf2+0x5c>
 8001dd6:	003d      	movs	r5, r7
 8001dd8:	4325      	orrs	r5, r4
 8001dda:	d120      	bne.n	8001e1e <__gedf2+0xce>
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d0eb      	beq.n	8001db8 <__gedf2+0x68>
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1dd      	bne.n	8001da0 <__gedf2+0x50>
 8001de4:	464c      	mov	r4, r9
 8001de6:	4326      	orrs	r6, r4
 8001de8:	d1da      	bne.n	8001da0 <__gedf2+0x50>
 8001dea:	e7db      	b.n	8001da4 <__gedf2+0x54>
 8001dec:	465b      	mov	r3, fp
 8001dee:	2000      	movs	r0, #0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0db      	beq.n	8001dac <__gedf2+0x5c>
 8001df4:	e7d6      	b.n	8001da4 <__gedf2+0x54>
 8001df6:	429a      	cmp	r2, r3
 8001df8:	dc0a      	bgt.n	8001e10 <__gedf2+0xc0>
 8001dfa:	dbe7      	blt.n	8001dcc <__gedf2+0x7c>
 8001dfc:	454f      	cmp	r7, r9
 8001dfe:	d8d1      	bhi.n	8001da4 <__gedf2+0x54>
 8001e00:	d010      	beq.n	8001e24 <__gedf2+0xd4>
 8001e02:	2000      	movs	r0, #0
 8001e04:	454f      	cmp	r7, r9
 8001e06:	d2d1      	bcs.n	8001dac <__gedf2+0x5c>
 8001e08:	2900      	cmp	r1, #0
 8001e0a:	d0e1      	beq.n	8001dd0 <__gedf2+0x80>
 8001e0c:	0008      	movs	r0, r1
 8001e0e:	e7cd      	b.n	8001dac <__gedf2+0x5c>
 8001e10:	4243      	negs	r3, r0
 8001e12:	4158      	adcs	r0, r3
 8001e14:	2302      	movs	r3, #2
 8001e16:	4240      	negs	r0, r0
 8001e18:	4018      	ands	r0, r3
 8001e1a:	3801      	subs	r0, #1
 8001e1c:	e7c6      	b.n	8001dac <__gedf2+0x5c>
 8001e1e:	2002      	movs	r0, #2
 8001e20:	4240      	negs	r0, r0
 8001e22:	e7c3      	b.n	8001dac <__gedf2+0x5c>
 8001e24:	45c4      	cmp	ip, r8
 8001e26:	d8bd      	bhi.n	8001da4 <__gedf2+0x54>
 8001e28:	2000      	movs	r0, #0
 8001e2a:	45c4      	cmp	ip, r8
 8001e2c:	d2be      	bcs.n	8001dac <__gedf2+0x5c>
 8001e2e:	e7eb      	b.n	8001e08 <__gedf2+0xb8>
 8001e30:	000007ff 	.word	0x000007ff

08001e34 <__ledf2>:
 8001e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e36:	464e      	mov	r6, r9
 8001e38:	4645      	mov	r5, r8
 8001e3a:	4657      	mov	r7, sl
 8001e3c:	46de      	mov	lr, fp
 8001e3e:	0004      	movs	r4, r0
 8001e40:	0018      	movs	r0, r3
 8001e42:	b5e0      	push	{r5, r6, r7, lr}
 8001e44:	0016      	movs	r6, r2
 8001e46:	031b      	lsls	r3, r3, #12
 8001e48:	0b1b      	lsrs	r3, r3, #12
 8001e4a:	4d31      	ldr	r5, [pc, #196]	; (8001f10 <__ledf2+0xdc>)
 8001e4c:	030f      	lsls	r7, r1, #12
 8001e4e:	004a      	lsls	r2, r1, #1
 8001e50:	4699      	mov	r9, r3
 8001e52:	0043      	lsls	r3, r0, #1
 8001e54:	46a4      	mov	ip, r4
 8001e56:	46b0      	mov	r8, r6
 8001e58:	0b3f      	lsrs	r7, r7, #12
 8001e5a:	0d52      	lsrs	r2, r2, #21
 8001e5c:	0fc9      	lsrs	r1, r1, #31
 8001e5e:	0d5b      	lsrs	r3, r3, #21
 8001e60:	0fc0      	lsrs	r0, r0, #31
 8001e62:	42aa      	cmp	r2, r5
 8001e64:	d011      	beq.n	8001e8a <__ledf2+0x56>
 8001e66:	42ab      	cmp	r3, r5
 8001e68:	d014      	beq.n	8001e94 <__ledf2+0x60>
 8001e6a:	2a00      	cmp	r2, #0
 8001e6c:	d12f      	bne.n	8001ece <__ledf2+0x9a>
 8001e6e:	433c      	orrs	r4, r7
 8001e70:	46a3      	mov	fp, r4
 8001e72:	4265      	negs	r5, r4
 8001e74:	4165      	adcs	r5, r4
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d114      	bne.n	8001ea4 <__ledf2+0x70>
 8001e7a:	464c      	mov	r4, r9
 8001e7c:	4326      	orrs	r6, r4
 8001e7e:	d111      	bne.n	8001ea4 <__ledf2+0x70>
 8001e80:	465b      	mov	r3, fp
 8001e82:	2000      	movs	r0, #0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d017      	beq.n	8001eb8 <__ledf2+0x84>
 8001e88:	e010      	b.n	8001eac <__ledf2+0x78>
 8001e8a:	003d      	movs	r5, r7
 8001e8c:	4325      	orrs	r5, r4
 8001e8e:	d112      	bne.n	8001eb6 <__ledf2+0x82>
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d11c      	bne.n	8001ece <__ledf2+0x9a>
 8001e94:	464d      	mov	r5, r9
 8001e96:	432e      	orrs	r6, r5
 8001e98:	d10d      	bne.n	8001eb6 <__ledf2+0x82>
 8001e9a:	2a00      	cmp	r2, #0
 8001e9c:	d104      	bne.n	8001ea8 <__ledf2+0x74>
 8001e9e:	433c      	orrs	r4, r7
 8001ea0:	4265      	negs	r5, r4
 8001ea2:	4165      	adcs	r5, r4
 8001ea4:	2d00      	cmp	r5, #0
 8001ea6:	d10d      	bne.n	8001ec4 <__ledf2+0x90>
 8001ea8:	4281      	cmp	r1, r0
 8001eaa:	d016      	beq.n	8001eda <__ledf2+0xa6>
 8001eac:	2002      	movs	r0, #2
 8001eae:	3901      	subs	r1, #1
 8001eb0:	4008      	ands	r0, r1
 8001eb2:	3801      	subs	r0, #1
 8001eb4:	e000      	b.n	8001eb8 <__ledf2+0x84>
 8001eb6:	2002      	movs	r0, #2
 8001eb8:	bcf0      	pop	{r4, r5, r6, r7}
 8001eba:	46bb      	mov	fp, r7
 8001ebc:	46b2      	mov	sl, r6
 8001ebe:	46a9      	mov	r9, r5
 8001ec0:	46a0      	mov	r8, r4
 8001ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ec4:	2800      	cmp	r0, #0
 8001ec6:	d1f7      	bne.n	8001eb8 <__ledf2+0x84>
 8001ec8:	2001      	movs	r0, #1
 8001eca:	4240      	negs	r0, r0
 8001ecc:	e7f4      	b.n	8001eb8 <__ledf2+0x84>
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1ea      	bne.n	8001ea8 <__ledf2+0x74>
 8001ed2:	464c      	mov	r4, r9
 8001ed4:	4326      	orrs	r6, r4
 8001ed6:	d1e7      	bne.n	8001ea8 <__ledf2+0x74>
 8001ed8:	e7e8      	b.n	8001eac <__ledf2+0x78>
 8001eda:	429a      	cmp	r2, r3
 8001edc:	dd06      	ble.n	8001eec <__ledf2+0xb8>
 8001ede:	4243      	negs	r3, r0
 8001ee0:	4158      	adcs	r0, r3
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	4240      	negs	r0, r0
 8001ee6:	4018      	ands	r0, r3
 8001ee8:	3801      	subs	r0, #1
 8001eea:	e7e5      	b.n	8001eb8 <__ledf2+0x84>
 8001eec:	429a      	cmp	r2, r3
 8001eee:	dbe9      	blt.n	8001ec4 <__ledf2+0x90>
 8001ef0:	454f      	cmp	r7, r9
 8001ef2:	d8db      	bhi.n	8001eac <__ledf2+0x78>
 8001ef4:	d006      	beq.n	8001f04 <__ledf2+0xd0>
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	454f      	cmp	r7, r9
 8001efa:	d2dd      	bcs.n	8001eb8 <__ledf2+0x84>
 8001efc:	2900      	cmp	r1, #0
 8001efe:	d0e3      	beq.n	8001ec8 <__ledf2+0x94>
 8001f00:	0008      	movs	r0, r1
 8001f02:	e7d9      	b.n	8001eb8 <__ledf2+0x84>
 8001f04:	45c4      	cmp	ip, r8
 8001f06:	d8d1      	bhi.n	8001eac <__ledf2+0x78>
 8001f08:	2000      	movs	r0, #0
 8001f0a:	45c4      	cmp	ip, r8
 8001f0c:	d2d4      	bcs.n	8001eb8 <__ledf2+0x84>
 8001f0e:	e7f5      	b.n	8001efc <__ledf2+0xc8>
 8001f10:	000007ff 	.word	0x000007ff

08001f14 <__aeabi_dmul>:
 8001f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f16:	4657      	mov	r7, sl
 8001f18:	464e      	mov	r6, r9
 8001f1a:	4645      	mov	r5, r8
 8001f1c:	46de      	mov	lr, fp
 8001f1e:	b5e0      	push	{r5, r6, r7, lr}
 8001f20:	4698      	mov	r8, r3
 8001f22:	030c      	lsls	r4, r1, #12
 8001f24:	004b      	lsls	r3, r1, #1
 8001f26:	0006      	movs	r6, r0
 8001f28:	4692      	mov	sl, r2
 8001f2a:	b087      	sub	sp, #28
 8001f2c:	0b24      	lsrs	r4, r4, #12
 8001f2e:	0d5b      	lsrs	r3, r3, #21
 8001f30:	0fcf      	lsrs	r7, r1, #31
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d06c      	beq.n	8002010 <__aeabi_dmul+0xfc>
 8001f36:	4add      	ldr	r2, [pc, #884]	; (80022ac <__aeabi_dmul+0x398>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d100      	bne.n	8001f3e <__aeabi_dmul+0x2a>
 8001f3c:	e086      	b.n	800204c <__aeabi_dmul+0x138>
 8001f3e:	0f42      	lsrs	r2, r0, #29
 8001f40:	00e4      	lsls	r4, r4, #3
 8001f42:	4314      	orrs	r4, r2
 8001f44:	2280      	movs	r2, #128	; 0x80
 8001f46:	0412      	lsls	r2, r2, #16
 8001f48:	4314      	orrs	r4, r2
 8001f4a:	4ad9      	ldr	r2, [pc, #868]	; (80022b0 <__aeabi_dmul+0x39c>)
 8001f4c:	00c5      	lsls	r5, r0, #3
 8001f4e:	4694      	mov	ip, r2
 8001f50:	4463      	add	r3, ip
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	2300      	movs	r3, #0
 8001f56:	4699      	mov	r9, r3
 8001f58:	469b      	mov	fp, r3
 8001f5a:	4643      	mov	r3, r8
 8001f5c:	4642      	mov	r2, r8
 8001f5e:	031e      	lsls	r6, r3, #12
 8001f60:	0fd2      	lsrs	r2, r2, #31
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4650      	mov	r0, sl
 8001f66:	4690      	mov	r8, r2
 8001f68:	0b36      	lsrs	r6, r6, #12
 8001f6a:	0d5b      	lsrs	r3, r3, #21
 8001f6c:	d100      	bne.n	8001f70 <__aeabi_dmul+0x5c>
 8001f6e:	e078      	b.n	8002062 <__aeabi_dmul+0x14e>
 8001f70:	4ace      	ldr	r2, [pc, #824]	; (80022ac <__aeabi_dmul+0x398>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d01d      	beq.n	8001fb2 <__aeabi_dmul+0x9e>
 8001f76:	49ce      	ldr	r1, [pc, #824]	; (80022b0 <__aeabi_dmul+0x39c>)
 8001f78:	0f42      	lsrs	r2, r0, #29
 8001f7a:	468c      	mov	ip, r1
 8001f7c:	9900      	ldr	r1, [sp, #0]
 8001f7e:	4463      	add	r3, ip
 8001f80:	00f6      	lsls	r6, r6, #3
 8001f82:	468c      	mov	ip, r1
 8001f84:	4316      	orrs	r6, r2
 8001f86:	2280      	movs	r2, #128	; 0x80
 8001f88:	449c      	add	ip, r3
 8001f8a:	0412      	lsls	r2, r2, #16
 8001f8c:	4663      	mov	r3, ip
 8001f8e:	4316      	orrs	r6, r2
 8001f90:	00c2      	lsls	r2, r0, #3
 8001f92:	2000      	movs	r0, #0
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	9900      	ldr	r1, [sp, #0]
 8001f98:	4643      	mov	r3, r8
 8001f9a:	3101      	adds	r1, #1
 8001f9c:	468c      	mov	ip, r1
 8001f9e:	4649      	mov	r1, r9
 8001fa0:	407b      	eors	r3, r7
 8001fa2:	9301      	str	r3, [sp, #4]
 8001fa4:	290f      	cmp	r1, #15
 8001fa6:	d900      	bls.n	8001faa <__aeabi_dmul+0x96>
 8001fa8:	e07e      	b.n	80020a8 <__aeabi_dmul+0x194>
 8001faa:	4bc2      	ldr	r3, [pc, #776]	; (80022b4 <__aeabi_dmul+0x3a0>)
 8001fac:	0089      	lsls	r1, r1, #2
 8001fae:	5859      	ldr	r1, [r3, r1]
 8001fb0:	468f      	mov	pc, r1
 8001fb2:	4652      	mov	r2, sl
 8001fb4:	9b00      	ldr	r3, [sp, #0]
 8001fb6:	4332      	orrs	r2, r6
 8001fb8:	d000      	beq.n	8001fbc <__aeabi_dmul+0xa8>
 8001fba:	e156      	b.n	800226a <__aeabi_dmul+0x356>
 8001fbc:	49bb      	ldr	r1, [pc, #748]	; (80022ac <__aeabi_dmul+0x398>)
 8001fbe:	2600      	movs	r6, #0
 8001fc0:	468c      	mov	ip, r1
 8001fc2:	4463      	add	r3, ip
 8001fc4:	4649      	mov	r1, r9
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	2302      	movs	r3, #2
 8001fca:	4319      	orrs	r1, r3
 8001fcc:	4689      	mov	r9, r1
 8001fce:	2002      	movs	r0, #2
 8001fd0:	e7e1      	b.n	8001f96 <__aeabi_dmul+0x82>
 8001fd2:	4643      	mov	r3, r8
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	0034      	movs	r4, r6
 8001fd8:	0015      	movs	r5, r2
 8001fda:	4683      	mov	fp, r0
 8001fdc:	465b      	mov	r3, fp
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d05e      	beq.n	80020a0 <__aeabi_dmul+0x18c>
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dmul+0xd4>
 8001fe6:	e1f3      	b.n	80023d0 <__aeabi_dmul+0x4bc>
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d000      	beq.n	8001fee <__aeabi_dmul+0xda>
 8001fec:	e118      	b.n	8002220 <__aeabi_dmul+0x30c>
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2400      	movs	r4, #0
 8001ff2:	2500      	movs	r5, #0
 8001ff4:	9b01      	ldr	r3, [sp, #4]
 8001ff6:	0512      	lsls	r2, r2, #20
 8001ff8:	4322      	orrs	r2, r4
 8001ffa:	07db      	lsls	r3, r3, #31
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	0028      	movs	r0, r5
 8002000:	0011      	movs	r1, r2
 8002002:	b007      	add	sp, #28
 8002004:	bcf0      	pop	{r4, r5, r6, r7}
 8002006:	46bb      	mov	fp, r7
 8002008:	46b2      	mov	sl, r6
 800200a:	46a9      	mov	r9, r5
 800200c:	46a0      	mov	r8, r4
 800200e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002010:	0025      	movs	r5, r4
 8002012:	4305      	orrs	r5, r0
 8002014:	d100      	bne.n	8002018 <__aeabi_dmul+0x104>
 8002016:	e141      	b.n	800229c <__aeabi_dmul+0x388>
 8002018:	2c00      	cmp	r4, #0
 800201a:	d100      	bne.n	800201e <__aeabi_dmul+0x10a>
 800201c:	e1ad      	b.n	800237a <__aeabi_dmul+0x466>
 800201e:	0020      	movs	r0, r4
 8002020:	f000 fea8 	bl	8002d74 <__clzsi2>
 8002024:	0001      	movs	r1, r0
 8002026:	0002      	movs	r2, r0
 8002028:	390b      	subs	r1, #11
 800202a:	231d      	movs	r3, #29
 800202c:	0010      	movs	r0, r2
 800202e:	1a5b      	subs	r3, r3, r1
 8002030:	0031      	movs	r1, r6
 8002032:	0035      	movs	r5, r6
 8002034:	3808      	subs	r0, #8
 8002036:	4084      	lsls	r4, r0
 8002038:	40d9      	lsrs	r1, r3
 800203a:	4085      	lsls	r5, r0
 800203c:	430c      	orrs	r4, r1
 800203e:	489e      	ldr	r0, [pc, #632]	; (80022b8 <__aeabi_dmul+0x3a4>)
 8002040:	1a83      	subs	r3, r0, r2
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	2300      	movs	r3, #0
 8002046:	4699      	mov	r9, r3
 8002048:	469b      	mov	fp, r3
 800204a:	e786      	b.n	8001f5a <__aeabi_dmul+0x46>
 800204c:	0005      	movs	r5, r0
 800204e:	4325      	orrs	r5, r4
 8002050:	d000      	beq.n	8002054 <__aeabi_dmul+0x140>
 8002052:	e11c      	b.n	800228e <__aeabi_dmul+0x37a>
 8002054:	2208      	movs	r2, #8
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	2302      	movs	r3, #2
 800205a:	2400      	movs	r4, #0
 800205c:	4691      	mov	r9, r2
 800205e:	469b      	mov	fp, r3
 8002060:	e77b      	b.n	8001f5a <__aeabi_dmul+0x46>
 8002062:	4652      	mov	r2, sl
 8002064:	4332      	orrs	r2, r6
 8002066:	d100      	bne.n	800206a <__aeabi_dmul+0x156>
 8002068:	e10a      	b.n	8002280 <__aeabi_dmul+0x36c>
 800206a:	2e00      	cmp	r6, #0
 800206c:	d100      	bne.n	8002070 <__aeabi_dmul+0x15c>
 800206e:	e176      	b.n	800235e <__aeabi_dmul+0x44a>
 8002070:	0030      	movs	r0, r6
 8002072:	f000 fe7f 	bl	8002d74 <__clzsi2>
 8002076:	0002      	movs	r2, r0
 8002078:	3a0b      	subs	r2, #11
 800207a:	231d      	movs	r3, #29
 800207c:	0001      	movs	r1, r0
 800207e:	1a9b      	subs	r3, r3, r2
 8002080:	4652      	mov	r2, sl
 8002082:	3908      	subs	r1, #8
 8002084:	40da      	lsrs	r2, r3
 8002086:	408e      	lsls	r6, r1
 8002088:	4316      	orrs	r6, r2
 800208a:	4652      	mov	r2, sl
 800208c:	408a      	lsls	r2, r1
 800208e:	9b00      	ldr	r3, [sp, #0]
 8002090:	4989      	ldr	r1, [pc, #548]	; (80022b8 <__aeabi_dmul+0x3a4>)
 8002092:	1a18      	subs	r0, r3, r0
 8002094:	0003      	movs	r3, r0
 8002096:	468c      	mov	ip, r1
 8002098:	4463      	add	r3, ip
 800209a:	2000      	movs	r0, #0
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	e77a      	b.n	8001f96 <__aeabi_dmul+0x82>
 80020a0:	2400      	movs	r4, #0
 80020a2:	2500      	movs	r5, #0
 80020a4:	4a81      	ldr	r2, [pc, #516]	; (80022ac <__aeabi_dmul+0x398>)
 80020a6:	e7a5      	b.n	8001ff4 <__aeabi_dmul+0xe0>
 80020a8:	0c2f      	lsrs	r7, r5, #16
 80020aa:	042d      	lsls	r5, r5, #16
 80020ac:	0c2d      	lsrs	r5, r5, #16
 80020ae:	002b      	movs	r3, r5
 80020b0:	0c11      	lsrs	r1, r2, #16
 80020b2:	0412      	lsls	r2, r2, #16
 80020b4:	0c12      	lsrs	r2, r2, #16
 80020b6:	4353      	muls	r3, r2
 80020b8:	4698      	mov	r8, r3
 80020ba:	0013      	movs	r3, r2
 80020bc:	0028      	movs	r0, r5
 80020be:	437b      	muls	r3, r7
 80020c0:	4699      	mov	r9, r3
 80020c2:	4348      	muls	r0, r1
 80020c4:	4448      	add	r0, r9
 80020c6:	4683      	mov	fp, r0
 80020c8:	4640      	mov	r0, r8
 80020ca:	000b      	movs	r3, r1
 80020cc:	0c00      	lsrs	r0, r0, #16
 80020ce:	4682      	mov	sl, r0
 80020d0:	4658      	mov	r0, fp
 80020d2:	437b      	muls	r3, r7
 80020d4:	4450      	add	r0, sl
 80020d6:	9302      	str	r3, [sp, #8]
 80020d8:	4581      	cmp	r9, r0
 80020da:	d906      	bls.n	80020ea <__aeabi_dmul+0x1d6>
 80020dc:	469a      	mov	sl, r3
 80020de:	2380      	movs	r3, #128	; 0x80
 80020e0:	025b      	lsls	r3, r3, #9
 80020e2:	4699      	mov	r9, r3
 80020e4:	44ca      	add	sl, r9
 80020e6:	4653      	mov	r3, sl
 80020e8:	9302      	str	r3, [sp, #8]
 80020ea:	0c03      	lsrs	r3, r0, #16
 80020ec:	469b      	mov	fp, r3
 80020ee:	4643      	mov	r3, r8
 80020f0:	041b      	lsls	r3, r3, #16
 80020f2:	0400      	lsls	r0, r0, #16
 80020f4:	0c1b      	lsrs	r3, r3, #16
 80020f6:	4698      	mov	r8, r3
 80020f8:	0003      	movs	r3, r0
 80020fa:	4443      	add	r3, r8
 80020fc:	9304      	str	r3, [sp, #16]
 80020fe:	0c33      	lsrs	r3, r6, #16
 8002100:	4699      	mov	r9, r3
 8002102:	002b      	movs	r3, r5
 8002104:	0436      	lsls	r6, r6, #16
 8002106:	0c36      	lsrs	r6, r6, #16
 8002108:	4373      	muls	r3, r6
 800210a:	4698      	mov	r8, r3
 800210c:	0033      	movs	r3, r6
 800210e:	437b      	muls	r3, r7
 8002110:	469a      	mov	sl, r3
 8002112:	464b      	mov	r3, r9
 8002114:	435d      	muls	r5, r3
 8002116:	435f      	muls	r7, r3
 8002118:	4643      	mov	r3, r8
 800211a:	4455      	add	r5, sl
 800211c:	0c18      	lsrs	r0, r3, #16
 800211e:	1940      	adds	r0, r0, r5
 8002120:	4582      	cmp	sl, r0
 8002122:	d903      	bls.n	800212c <__aeabi_dmul+0x218>
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	025b      	lsls	r3, r3, #9
 8002128:	469a      	mov	sl, r3
 800212a:	4457      	add	r7, sl
 800212c:	0c05      	lsrs	r5, r0, #16
 800212e:	19eb      	adds	r3, r5, r7
 8002130:	9305      	str	r3, [sp, #20]
 8002132:	4643      	mov	r3, r8
 8002134:	041d      	lsls	r5, r3, #16
 8002136:	0c2d      	lsrs	r5, r5, #16
 8002138:	0400      	lsls	r0, r0, #16
 800213a:	1940      	adds	r0, r0, r5
 800213c:	0c25      	lsrs	r5, r4, #16
 800213e:	0424      	lsls	r4, r4, #16
 8002140:	0c24      	lsrs	r4, r4, #16
 8002142:	0027      	movs	r7, r4
 8002144:	4357      	muls	r7, r2
 8002146:	436a      	muls	r2, r5
 8002148:	4690      	mov	r8, r2
 800214a:	002a      	movs	r2, r5
 800214c:	0c3b      	lsrs	r3, r7, #16
 800214e:	469a      	mov	sl, r3
 8002150:	434a      	muls	r2, r1
 8002152:	4361      	muls	r1, r4
 8002154:	4441      	add	r1, r8
 8002156:	4451      	add	r1, sl
 8002158:	4483      	add	fp, r0
 800215a:	4588      	cmp	r8, r1
 800215c:	d903      	bls.n	8002166 <__aeabi_dmul+0x252>
 800215e:	2380      	movs	r3, #128	; 0x80
 8002160:	025b      	lsls	r3, r3, #9
 8002162:	4698      	mov	r8, r3
 8002164:	4442      	add	r2, r8
 8002166:	043f      	lsls	r7, r7, #16
 8002168:	0c0b      	lsrs	r3, r1, #16
 800216a:	0c3f      	lsrs	r7, r7, #16
 800216c:	0409      	lsls	r1, r1, #16
 800216e:	19c9      	adds	r1, r1, r7
 8002170:	0027      	movs	r7, r4
 8002172:	4698      	mov	r8, r3
 8002174:	464b      	mov	r3, r9
 8002176:	4377      	muls	r7, r6
 8002178:	435c      	muls	r4, r3
 800217a:	436e      	muls	r6, r5
 800217c:	435d      	muls	r5, r3
 800217e:	0c3b      	lsrs	r3, r7, #16
 8002180:	4699      	mov	r9, r3
 8002182:	19a4      	adds	r4, r4, r6
 8002184:	444c      	add	r4, r9
 8002186:	4442      	add	r2, r8
 8002188:	9503      	str	r5, [sp, #12]
 800218a:	42a6      	cmp	r6, r4
 800218c:	d904      	bls.n	8002198 <__aeabi_dmul+0x284>
 800218e:	2380      	movs	r3, #128	; 0x80
 8002190:	025b      	lsls	r3, r3, #9
 8002192:	4698      	mov	r8, r3
 8002194:	4445      	add	r5, r8
 8002196:	9503      	str	r5, [sp, #12]
 8002198:	9b02      	ldr	r3, [sp, #8]
 800219a:	043f      	lsls	r7, r7, #16
 800219c:	445b      	add	r3, fp
 800219e:	001e      	movs	r6, r3
 80021a0:	4283      	cmp	r3, r0
 80021a2:	4180      	sbcs	r0, r0
 80021a4:	0423      	lsls	r3, r4, #16
 80021a6:	4698      	mov	r8, r3
 80021a8:	9b05      	ldr	r3, [sp, #20]
 80021aa:	0c3f      	lsrs	r7, r7, #16
 80021ac:	4447      	add	r7, r8
 80021ae:	4698      	mov	r8, r3
 80021b0:	1876      	adds	r6, r6, r1
 80021b2:	428e      	cmp	r6, r1
 80021b4:	4189      	sbcs	r1, r1
 80021b6:	4447      	add	r7, r8
 80021b8:	4240      	negs	r0, r0
 80021ba:	183d      	adds	r5, r7, r0
 80021bc:	46a8      	mov	r8, r5
 80021be:	4693      	mov	fp, r2
 80021c0:	4249      	negs	r1, r1
 80021c2:	468a      	mov	sl, r1
 80021c4:	44c3      	add	fp, r8
 80021c6:	429f      	cmp	r7, r3
 80021c8:	41bf      	sbcs	r7, r7
 80021ca:	4580      	cmp	r8, r0
 80021cc:	4180      	sbcs	r0, r0
 80021ce:	9b03      	ldr	r3, [sp, #12]
 80021d0:	44da      	add	sl, fp
 80021d2:	4698      	mov	r8, r3
 80021d4:	4653      	mov	r3, sl
 80021d6:	4240      	negs	r0, r0
 80021d8:	427f      	negs	r7, r7
 80021da:	4307      	orrs	r7, r0
 80021dc:	0c24      	lsrs	r4, r4, #16
 80021de:	4593      	cmp	fp, r2
 80021e0:	4192      	sbcs	r2, r2
 80021e2:	458a      	cmp	sl, r1
 80021e4:	4189      	sbcs	r1, r1
 80021e6:	193f      	adds	r7, r7, r4
 80021e8:	0ddc      	lsrs	r4, r3, #23
 80021ea:	9b04      	ldr	r3, [sp, #16]
 80021ec:	0275      	lsls	r5, r6, #9
 80021ee:	431d      	orrs	r5, r3
 80021f0:	1e68      	subs	r0, r5, #1
 80021f2:	4185      	sbcs	r5, r0
 80021f4:	4653      	mov	r3, sl
 80021f6:	4252      	negs	r2, r2
 80021f8:	4249      	negs	r1, r1
 80021fa:	430a      	orrs	r2, r1
 80021fc:	18bf      	adds	r7, r7, r2
 80021fe:	4447      	add	r7, r8
 8002200:	0df6      	lsrs	r6, r6, #23
 8002202:	027f      	lsls	r7, r7, #9
 8002204:	4335      	orrs	r5, r6
 8002206:	025a      	lsls	r2, r3, #9
 8002208:	433c      	orrs	r4, r7
 800220a:	4315      	orrs	r5, r2
 800220c:	01fb      	lsls	r3, r7, #7
 800220e:	d400      	bmi.n	8002212 <__aeabi_dmul+0x2fe>
 8002210:	e0c1      	b.n	8002396 <__aeabi_dmul+0x482>
 8002212:	2101      	movs	r1, #1
 8002214:	086a      	lsrs	r2, r5, #1
 8002216:	400d      	ands	r5, r1
 8002218:	4315      	orrs	r5, r2
 800221a:	07e2      	lsls	r2, r4, #31
 800221c:	4315      	orrs	r5, r2
 800221e:	0864      	lsrs	r4, r4, #1
 8002220:	4926      	ldr	r1, [pc, #152]	; (80022bc <__aeabi_dmul+0x3a8>)
 8002222:	4461      	add	r1, ip
 8002224:	2900      	cmp	r1, #0
 8002226:	dd56      	ble.n	80022d6 <__aeabi_dmul+0x3c2>
 8002228:	076b      	lsls	r3, r5, #29
 800222a:	d009      	beq.n	8002240 <__aeabi_dmul+0x32c>
 800222c:	220f      	movs	r2, #15
 800222e:	402a      	ands	r2, r5
 8002230:	2a04      	cmp	r2, #4
 8002232:	d005      	beq.n	8002240 <__aeabi_dmul+0x32c>
 8002234:	1d2a      	adds	r2, r5, #4
 8002236:	42aa      	cmp	r2, r5
 8002238:	41ad      	sbcs	r5, r5
 800223a:	426d      	negs	r5, r5
 800223c:	1964      	adds	r4, r4, r5
 800223e:	0015      	movs	r5, r2
 8002240:	01e3      	lsls	r3, r4, #7
 8002242:	d504      	bpl.n	800224e <__aeabi_dmul+0x33a>
 8002244:	2180      	movs	r1, #128	; 0x80
 8002246:	4a1e      	ldr	r2, [pc, #120]	; (80022c0 <__aeabi_dmul+0x3ac>)
 8002248:	00c9      	lsls	r1, r1, #3
 800224a:	4014      	ands	r4, r2
 800224c:	4461      	add	r1, ip
 800224e:	4a1d      	ldr	r2, [pc, #116]	; (80022c4 <__aeabi_dmul+0x3b0>)
 8002250:	4291      	cmp	r1, r2
 8002252:	dd00      	ble.n	8002256 <__aeabi_dmul+0x342>
 8002254:	e724      	b.n	80020a0 <__aeabi_dmul+0x18c>
 8002256:	0762      	lsls	r2, r4, #29
 8002258:	08ed      	lsrs	r5, r5, #3
 800225a:	0264      	lsls	r4, r4, #9
 800225c:	0549      	lsls	r1, r1, #21
 800225e:	4315      	orrs	r5, r2
 8002260:	0b24      	lsrs	r4, r4, #12
 8002262:	0d4a      	lsrs	r2, r1, #21
 8002264:	e6c6      	b.n	8001ff4 <__aeabi_dmul+0xe0>
 8002266:	9701      	str	r7, [sp, #4]
 8002268:	e6b8      	b.n	8001fdc <__aeabi_dmul+0xc8>
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <__aeabi_dmul+0x398>)
 800226c:	2003      	movs	r0, #3
 800226e:	4694      	mov	ip, r2
 8002270:	4463      	add	r3, ip
 8002272:	464a      	mov	r2, r9
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	2303      	movs	r3, #3
 8002278:	431a      	orrs	r2, r3
 800227a:	4691      	mov	r9, r2
 800227c:	4652      	mov	r2, sl
 800227e:	e68a      	b.n	8001f96 <__aeabi_dmul+0x82>
 8002280:	4649      	mov	r1, r9
 8002282:	2301      	movs	r3, #1
 8002284:	4319      	orrs	r1, r3
 8002286:	4689      	mov	r9, r1
 8002288:	2600      	movs	r6, #0
 800228a:	2001      	movs	r0, #1
 800228c:	e683      	b.n	8001f96 <__aeabi_dmul+0x82>
 800228e:	220c      	movs	r2, #12
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	2303      	movs	r3, #3
 8002294:	0005      	movs	r5, r0
 8002296:	4691      	mov	r9, r2
 8002298:	469b      	mov	fp, r3
 800229a:	e65e      	b.n	8001f5a <__aeabi_dmul+0x46>
 800229c:	2304      	movs	r3, #4
 800229e:	4699      	mov	r9, r3
 80022a0:	2300      	movs	r3, #0
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	3301      	adds	r3, #1
 80022a6:	2400      	movs	r4, #0
 80022a8:	469b      	mov	fp, r3
 80022aa:	e656      	b.n	8001f5a <__aeabi_dmul+0x46>
 80022ac:	000007ff 	.word	0x000007ff
 80022b0:	fffffc01 	.word	0xfffffc01
 80022b4:	0800e2a4 	.word	0x0800e2a4
 80022b8:	fffffc0d 	.word	0xfffffc0d
 80022bc:	000003ff 	.word	0x000003ff
 80022c0:	feffffff 	.word	0xfeffffff
 80022c4:	000007fe 	.word	0x000007fe
 80022c8:	2300      	movs	r3, #0
 80022ca:	2480      	movs	r4, #128	; 0x80
 80022cc:	2500      	movs	r5, #0
 80022ce:	4a44      	ldr	r2, [pc, #272]	; (80023e0 <__aeabi_dmul+0x4cc>)
 80022d0:	9301      	str	r3, [sp, #4]
 80022d2:	0324      	lsls	r4, r4, #12
 80022d4:	e68e      	b.n	8001ff4 <__aeabi_dmul+0xe0>
 80022d6:	2001      	movs	r0, #1
 80022d8:	1a40      	subs	r0, r0, r1
 80022da:	2838      	cmp	r0, #56	; 0x38
 80022dc:	dd00      	ble.n	80022e0 <__aeabi_dmul+0x3cc>
 80022de:	e686      	b.n	8001fee <__aeabi_dmul+0xda>
 80022e0:	281f      	cmp	r0, #31
 80022e2:	dd5b      	ble.n	800239c <__aeabi_dmul+0x488>
 80022e4:	221f      	movs	r2, #31
 80022e6:	0023      	movs	r3, r4
 80022e8:	4252      	negs	r2, r2
 80022ea:	1a51      	subs	r1, r2, r1
 80022ec:	40cb      	lsrs	r3, r1
 80022ee:	0019      	movs	r1, r3
 80022f0:	2820      	cmp	r0, #32
 80022f2:	d003      	beq.n	80022fc <__aeabi_dmul+0x3e8>
 80022f4:	4a3b      	ldr	r2, [pc, #236]	; (80023e4 <__aeabi_dmul+0x4d0>)
 80022f6:	4462      	add	r2, ip
 80022f8:	4094      	lsls	r4, r2
 80022fa:	4325      	orrs	r5, r4
 80022fc:	1e6a      	subs	r2, r5, #1
 80022fe:	4195      	sbcs	r5, r2
 8002300:	002a      	movs	r2, r5
 8002302:	430a      	orrs	r2, r1
 8002304:	2107      	movs	r1, #7
 8002306:	000d      	movs	r5, r1
 8002308:	2400      	movs	r4, #0
 800230a:	4015      	ands	r5, r2
 800230c:	4211      	tst	r1, r2
 800230e:	d05b      	beq.n	80023c8 <__aeabi_dmul+0x4b4>
 8002310:	210f      	movs	r1, #15
 8002312:	2400      	movs	r4, #0
 8002314:	4011      	ands	r1, r2
 8002316:	2904      	cmp	r1, #4
 8002318:	d053      	beq.n	80023c2 <__aeabi_dmul+0x4ae>
 800231a:	1d11      	adds	r1, r2, #4
 800231c:	4291      	cmp	r1, r2
 800231e:	4192      	sbcs	r2, r2
 8002320:	4252      	negs	r2, r2
 8002322:	18a4      	adds	r4, r4, r2
 8002324:	000a      	movs	r2, r1
 8002326:	0223      	lsls	r3, r4, #8
 8002328:	d54b      	bpl.n	80023c2 <__aeabi_dmul+0x4ae>
 800232a:	2201      	movs	r2, #1
 800232c:	2400      	movs	r4, #0
 800232e:	2500      	movs	r5, #0
 8002330:	e660      	b.n	8001ff4 <__aeabi_dmul+0xe0>
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	031b      	lsls	r3, r3, #12
 8002336:	421c      	tst	r4, r3
 8002338:	d009      	beq.n	800234e <__aeabi_dmul+0x43a>
 800233a:	421e      	tst	r6, r3
 800233c:	d107      	bne.n	800234e <__aeabi_dmul+0x43a>
 800233e:	4333      	orrs	r3, r6
 8002340:	031c      	lsls	r4, r3, #12
 8002342:	4643      	mov	r3, r8
 8002344:	0015      	movs	r5, r2
 8002346:	0b24      	lsrs	r4, r4, #12
 8002348:	4a25      	ldr	r2, [pc, #148]	; (80023e0 <__aeabi_dmul+0x4cc>)
 800234a:	9301      	str	r3, [sp, #4]
 800234c:	e652      	b.n	8001ff4 <__aeabi_dmul+0xe0>
 800234e:	2280      	movs	r2, #128	; 0x80
 8002350:	0312      	lsls	r2, r2, #12
 8002352:	4314      	orrs	r4, r2
 8002354:	0324      	lsls	r4, r4, #12
 8002356:	4a22      	ldr	r2, [pc, #136]	; (80023e0 <__aeabi_dmul+0x4cc>)
 8002358:	0b24      	lsrs	r4, r4, #12
 800235a:	9701      	str	r7, [sp, #4]
 800235c:	e64a      	b.n	8001ff4 <__aeabi_dmul+0xe0>
 800235e:	f000 fd09 	bl	8002d74 <__clzsi2>
 8002362:	0003      	movs	r3, r0
 8002364:	001a      	movs	r2, r3
 8002366:	3215      	adds	r2, #21
 8002368:	3020      	adds	r0, #32
 800236a:	2a1c      	cmp	r2, #28
 800236c:	dc00      	bgt.n	8002370 <__aeabi_dmul+0x45c>
 800236e:	e684      	b.n	800207a <__aeabi_dmul+0x166>
 8002370:	4656      	mov	r6, sl
 8002372:	3b08      	subs	r3, #8
 8002374:	2200      	movs	r2, #0
 8002376:	409e      	lsls	r6, r3
 8002378:	e689      	b.n	800208e <__aeabi_dmul+0x17a>
 800237a:	f000 fcfb 	bl	8002d74 <__clzsi2>
 800237e:	0001      	movs	r1, r0
 8002380:	0002      	movs	r2, r0
 8002382:	3115      	adds	r1, #21
 8002384:	3220      	adds	r2, #32
 8002386:	291c      	cmp	r1, #28
 8002388:	dc00      	bgt.n	800238c <__aeabi_dmul+0x478>
 800238a:	e64e      	b.n	800202a <__aeabi_dmul+0x116>
 800238c:	0034      	movs	r4, r6
 800238e:	3808      	subs	r0, #8
 8002390:	2500      	movs	r5, #0
 8002392:	4084      	lsls	r4, r0
 8002394:	e653      	b.n	800203e <__aeabi_dmul+0x12a>
 8002396:	9b00      	ldr	r3, [sp, #0]
 8002398:	469c      	mov	ip, r3
 800239a:	e741      	b.n	8002220 <__aeabi_dmul+0x30c>
 800239c:	4912      	ldr	r1, [pc, #72]	; (80023e8 <__aeabi_dmul+0x4d4>)
 800239e:	0022      	movs	r2, r4
 80023a0:	4461      	add	r1, ip
 80023a2:	002e      	movs	r6, r5
 80023a4:	408d      	lsls	r5, r1
 80023a6:	408a      	lsls	r2, r1
 80023a8:	40c6      	lsrs	r6, r0
 80023aa:	1e69      	subs	r1, r5, #1
 80023ac:	418d      	sbcs	r5, r1
 80023ae:	4332      	orrs	r2, r6
 80023b0:	432a      	orrs	r2, r5
 80023b2:	40c4      	lsrs	r4, r0
 80023b4:	0753      	lsls	r3, r2, #29
 80023b6:	d0b6      	beq.n	8002326 <__aeabi_dmul+0x412>
 80023b8:	210f      	movs	r1, #15
 80023ba:	4011      	ands	r1, r2
 80023bc:	2904      	cmp	r1, #4
 80023be:	d1ac      	bne.n	800231a <__aeabi_dmul+0x406>
 80023c0:	e7b1      	b.n	8002326 <__aeabi_dmul+0x412>
 80023c2:	0765      	lsls	r5, r4, #29
 80023c4:	0264      	lsls	r4, r4, #9
 80023c6:	0b24      	lsrs	r4, r4, #12
 80023c8:	08d2      	lsrs	r2, r2, #3
 80023ca:	4315      	orrs	r5, r2
 80023cc:	2200      	movs	r2, #0
 80023ce:	e611      	b.n	8001ff4 <__aeabi_dmul+0xe0>
 80023d0:	2280      	movs	r2, #128	; 0x80
 80023d2:	0312      	lsls	r2, r2, #12
 80023d4:	4314      	orrs	r4, r2
 80023d6:	0324      	lsls	r4, r4, #12
 80023d8:	4a01      	ldr	r2, [pc, #4]	; (80023e0 <__aeabi_dmul+0x4cc>)
 80023da:	0b24      	lsrs	r4, r4, #12
 80023dc:	e60a      	b.n	8001ff4 <__aeabi_dmul+0xe0>
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	000007ff 	.word	0x000007ff
 80023e4:	0000043e 	.word	0x0000043e
 80023e8:	0000041e 	.word	0x0000041e

080023ec <__aeabi_dsub>:
 80023ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ee:	4657      	mov	r7, sl
 80023f0:	464e      	mov	r6, r9
 80023f2:	4645      	mov	r5, r8
 80023f4:	46de      	mov	lr, fp
 80023f6:	0004      	movs	r4, r0
 80023f8:	b5e0      	push	{r5, r6, r7, lr}
 80023fa:	001f      	movs	r7, r3
 80023fc:	0010      	movs	r0, r2
 80023fe:	030b      	lsls	r3, r1, #12
 8002400:	0f62      	lsrs	r2, r4, #29
 8002402:	004e      	lsls	r6, r1, #1
 8002404:	0fcd      	lsrs	r5, r1, #31
 8002406:	0a5b      	lsrs	r3, r3, #9
 8002408:	0339      	lsls	r1, r7, #12
 800240a:	4313      	orrs	r3, r2
 800240c:	0a49      	lsrs	r1, r1, #9
 800240e:	00e2      	lsls	r2, r4, #3
 8002410:	0f44      	lsrs	r4, r0, #29
 8002412:	4321      	orrs	r1, r4
 8002414:	4cc2      	ldr	r4, [pc, #776]	; (8002720 <__aeabi_dsub+0x334>)
 8002416:	4691      	mov	r9, r2
 8002418:	4692      	mov	sl, r2
 800241a:	00c0      	lsls	r0, r0, #3
 800241c:	007a      	lsls	r2, r7, #1
 800241e:	4680      	mov	r8, r0
 8002420:	0d76      	lsrs	r6, r6, #21
 8002422:	0d52      	lsrs	r2, r2, #21
 8002424:	0fff      	lsrs	r7, r7, #31
 8002426:	42a2      	cmp	r2, r4
 8002428:	d100      	bne.n	800242c <__aeabi_dsub+0x40>
 800242a:	e0b4      	b.n	8002596 <__aeabi_dsub+0x1aa>
 800242c:	2401      	movs	r4, #1
 800242e:	4067      	eors	r7, r4
 8002430:	46bb      	mov	fp, r7
 8002432:	42bd      	cmp	r5, r7
 8002434:	d100      	bne.n	8002438 <__aeabi_dsub+0x4c>
 8002436:	e088      	b.n	800254a <__aeabi_dsub+0x15e>
 8002438:	1ab4      	subs	r4, r6, r2
 800243a:	46a4      	mov	ip, r4
 800243c:	2c00      	cmp	r4, #0
 800243e:	dc00      	bgt.n	8002442 <__aeabi_dsub+0x56>
 8002440:	e0b2      	b.n	80025a8 <__aeabi_dsub+0x1bc>
 8002442:	2a00      	cmp	r2, #0
 8002444:	d100      	bne.n	8002448 <__aeabi_dsub+0x5c>
 8002446:	e0c5      	b.n	80025d4 <__aeabi_dsub+0x1e8>
 8002448:	4ab5      	ldr	r2, [pc, #724]	; (8002720 <__aeabi_dsub+0x334>)
 800244a:	4296      	cmp	r6, r2
 800244c:	d100      	bne.n	8002450 <__aeabi_dsub+0x64>
 800244e:	e28b      	b.n	8002968 <__aeabi_dsub+0x57c>
 8002450:	2280      	movs	r2, #128	; 0x80
 8002452:	0412      	lsls	r2, r2, #16
 8002454:	4311      	orrs	r1, r2
 8002456:	4662      	mov	r2, ip
 8002458:	2a38      	cmp	r2, #56	; 0x38
 800245a:	dd00      	ble.n	800245e <__aeabi_dsub+0x72>
 800245c:	e1a1      	b.n	80027a2 <__aeabi_dsub+0x3b6>
 800245e:	2a1f      	cmp	r2, #31
 8002460:	dd00      	ble.n	8002464 <__aeabi_dsub+0x78>
 8002462:	e216      	b.n	8002892 <__aeabi_dsub+0x4a6>
 8002464:	2720      	movs	r7, #32
 8002466:	000c      	movs	r4, r1
 8002468:	1abf      	subs	r7, r7, r2
 800246a:	40bc      	lsls	r4, r7
 800246c:	0002      	movs	r2, r0
 800246e:	46a0      	mov	r8, r4
 8002470:	4664      	mov	r4, ip
 8002472:	40b8      	lsls	r0, r7
 8002474:	40e2      	lsrs	r2, r4
 8002476:	4644      	mov	r4, r8
 8002478:	4314      	orrs	r4, r2
 800247a:	0002      	movs	r2, r0
 800247c:	1e50      	subs	r0, r2, #1
 800247e:	4182      	sbcs	r2, r0
 8002480:	4660      	mov	r0, ip
 8002482:	40c1      	lsrs	r1, r0
 8002484:	4322      	orrs	r2, r4
 8002486:	1a5b      	subs	r3, r3, r1
 8002488:	4649      	mov	r1, r9
 800248a:	1a8c      	subs	r4, r1, r2
 800248c:	45a1      	cmp	r9, r4
 800248e:	4192      	sbcs	r2, r2
 8002490:	4252      	negs	r2, r2
 8002492:	1a9b      	subs	r3, r3, r2
 8002494:	4698      	mov	r8, r3
 8002496:	4643      	mov	r3, r8
 8002498:	021b      	lsls	r3, r3, #8
 800249a:	d400      	bmi.n	800249e <__aeabi_dsub+0xb2>
 800249c:	e117      	b.n	80026ce <__aeabi_dsub+0x2e2>
 800249e:	4643      	mov	r3, r8
 80024a0:	025b      	lsls	r3, r3, #9
 80024a2:	0a5b      	lsrs	r3, r3, #9
 80024a4:	4698      	mov	r8, r3
 80024a6:	4643      	mov	r3, r8
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d100      	bne.n	80024ae <__aeabi_dsub+0xc2>
 80024ac:	e16c      	b.n	8002788 <__aeabi_dsub+0x39c>
 80024ae:	4640      	mov	r0, r8
 80024b0:	f000 fc60 	bl	8002d74 <__clzsi2>
 80024b4:	0002      	movs	r2, r0
 80024b6:	3a08      	subs	r2, #8
 80024b8:	2120      	movs	r1, #32
 80024ba:	0020      	movs	r0, r4
 80024bc:	4643      	mov	r3, r8
 80024be:	1a89      	subs	r1, r1, r2
 80024c0:	4093      	lsls	r3, r2
 80024c2:	40c8      	lsrs	r0, r1
 80024c4:	4094      	lsls	r4, r2
 80024c6:	4303      	orrs	r3, r0
 80024c8:	4296      	cmp	r6, r2
 80024ca:	dd00      	ble.n	80024ce <__aeabi_dsub+0xe2>
 80024cc:	e157      	b.n	800277e <__aeabi_dsub+0x392>
 80024ce:	1b96      	subs	r6, r2, r6
 80024d0:	1c71      	adds	r1, r6, #1
 80024d2:	291f      	cmp	r1, #31
 80024d4:	dd00      	ble.n	80024d8 <__aeabi_dsub+0xec>
 80024d6:	e1cb      	b.n	8002870 <__aeabi_dsub+0x484>
 80024d8:	2220      	movs	r2, #32
 80024da:	0018      	movs	r0, r3
 80024dc:	0026      	movs	r6, r4
 80024de:	1a52      	subs	r2, r2, r1
 80024e0:	4094      	lsls	r4, r2
 80024e2:	4090      	lsls	r0, r2
 80024e4:	40ce      	lsrs	r6, r1
 80024e6:	40cb      	lsrs	r3, r1
 80024e8:	1e62      	subs	r2, r4, #1
 80024ea:	4194      	sbcs	r4, r2
 80024ec:	4330      	orrs	r0, r6
 80024ee:	4698      	mov	r8, r3
 80024f0:	2600      	movs	r6, #0
 80024f2:	4304      	orrs	r4, r0
 80024f4:	0763      	lsls	r3, r4, #29
 80024f6:	d009      	beq.n	800250c <__aeabi_dsub+0x120>
 80024f8:	230f      	movs	r3, #15
 80024fa:	4023      	ands	r3, r4
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d005      	beq.n	800250c <__aeabi_dsub+0x120>
 8002500:	1d23      	adds	r3, r4, #4
 8002502:	42a3      	cmp	r3, r4
 8002504:	41a4      	sbcs	r4, r4
 8002506:	4264      	negs	r4, r4
 8002508:	44a0      	add	r8, r4
 800250a:	001c      	movs	r4, r3
 800250c:	4643      	mov	r3, r8
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	d400      	bmi.n	8002514 <__aeabi_dsub+0x128>
 8002512:	e0df      	b.n	80026d4 <__aeabi_dsub+0x2e8>
 8002514:	4b82      	ldr	r3, [pc, #520]	; (8002720 <__aeabi_dsub+0x334>)
 8002516:	3601      	adds	r6, #1
 8002518:	429e      	cmp	r6, r3
 800251a:	d100      	bne.n	800251e <__aeabi_dsub+0x132>
 800251c:	e0fb      	b.n	8002716 <__aeabi_dsub+0x32a>
 800251e:	4642      	mov	r2, r8
 8002520:	4b80      	ldr	r3, [pc, #512]	; (8002724 <__aeabi_dsub+0x338>)
 8002522:	08e4      	lsrs	r4, r4, #3
 8002524:	401a      	ands	r2, r3
 8002526:	0013      	movs	r3, r2
 8002528:	0571      	lsls	r1, r6, #21
 800252a:	0752      	lsls	r2, r2, #29
 800252c:	025b      	lsls	r3, r3, #9
 800252e:	4322      	orrs	r2, r4
 8002530:	0b1b      	lsrs	r3, r3, #12
 8002532:	0d49      	lsrs	r1, r1, #21
 8002534:	0509      	lsls	r1, r1, #20
 8002536:	07ed      	lsls	r5, r5, #31
 8002538:	4319      	orrs	r1, r3
 800253a:	4329      	orrs	r1, r5
 800253c:	0010      	movs	r0, r2
 800253e:	bcf0      	pop	{r4, r5, r6, r7}
 8002540:	46bb      	mov	fp, r7
 8002542:	46b2      	mov	sl, r6
 8002544:	46a9      	mov	r9, r5
 8002546:	46a0      	mov	r8, r4
 8002548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800254a:	1ab4      	subs	r4, r6, r2
 800254c:	46a4      	mov	ip, r4
 800254e:	2c00      	cmp	r4, #0
 8002550:	dd58      	ble.n	8002604 <__aeabi_dsub+0x218>
 8002552:	2a00      	cmp	r2, #0
 8002554:	d100      	bne.n	8002558 <__aeabi_dsub+0x16c>
 8002556:	e09e      	b.n	8002696 <__aeabi_dsub+0x2aa>
 8002558:	4a71      	ldr	r2, [pc, #452]	; (8002720 <__aeabi_dsub+0x334>)
 800255a:	4296      	cmp	r6, r2
 800255c:	d100      	bne.n	8002560 <__aeabi_dsub+0x174>
 800255e:	e13b      	b.n	80027d8 <__aeabi_dsub+0x3ec>
 8002560:	2280      	movs	r2, #128	; 0x80
 8002562:	0412      	lsls	r2, r2, #16
 8002564:	4311      	orrs	r1, r2
 8002566:	4662      	mov	r2, ip
 8002568:	2a38      	cmp	r2, #56	; 0x38
 800256a:	dd00      	ble.n	800256e <__aeabi_dsub+0x182>
 800256c:	e0c1      	b.n	80026f2 <__aeabi_dsub+0x306>
 800256e:	2a1f      	cmp	r2, #31
 8002570:	dc00      	bgt.n	8002574 <__aeabi_dsub+0x188>
 8002572:	e1bb      	b.n	80028ec <__aeabi_dsub+0x500>
 8002574:	000c      	movs	r4, r1
 8002576:	3a20      	subs	r2, #32
 8002578:	40d4      	lsrs	r4, r2
 800257a:	0022      	movs	r2, r4
 800257c:	4664      	mov	r4, ip
 800257e:	2c20      	cmp	r4, #32
 8002580:	d004      	beq.n	800258c <__aeabi_dsub+0x1a0>
 8002582:	2740      	movs	r7, #64	; 0x40
 8002584:	1b3f      	subs	r7, r7, r4
 8002586:	40b9      	lsls	r1, r7
 8002588:	4308      	orrs	r0, r1
 800258a:	4680      	mov	r8, r0
 800258c:	4644      	mov	r4, r8
 800258e:	1e61      	subs	r1, r4, #1
 8002590:	418c      	sbcs	r4, r1
 8002592:	4314      	orrs	r4, r2
 8002594:	e0b1      	b.n	80026fa <__aeabi_dsub+0x30e>
 8002596:	000c      	movs	r4, r1
 8002598:	4304      	orrs	r4, r0
 800259a:	d02a      	beq.n	80025f2 <__aeabi_dsub+0x206>
 800259c:	46bb      	mov	fp, r7
 800259e:	42bd      	cmp	r5, r7
 80025a0:	d02d      	beq.n	80025fe <__aeabi_dsub+0x212>
 80025a2:	4c61      	ldr	r4, [pc, #388]	; (8002728 <__aeabi_dsub+0x33c>)
 80025a4:	46a4      	mov	ip, r4
 80025a6:	44b4      	add	ip, r6
 80025a8:	4664      	mov	r4, ip
 80025aa:	2c00      	cmp	r4, #0
 80025ac:	d05c      	beq.n	8002668 <__aeabi_dsub+0x27c>
 80025ae:	1b94      	subs	r4, r2, r6
 80025b0:	46a4      	mov	ip, r4
 80025b2:	2e00      	cmp	r6, #0
 80025b4:	d000      	beq.n	80025b8 <__aeabi_dsub+0x1cc>
 80025b6:	e115      	b.n	80027e4 <__aeabi_dsub+0x3f8>
 80025b8:	464d      	mov	r5, r9
 80025ba:	431d      	orrs	r5, r3
 80025bc:	d100      	bne.n	80025c0 <__aeabi_dsub+0x1d4>
 80025be:	e1c3      	b.n	8002948 <__aeabi_dsub+0x55c>
 80025c0:	1e65      	subs	r5, r4, #1
 80025c2:	2c01      	cmp	r4, #1
 80025c4:	d100      	bne.n	80025c8 <__aeabi_dsub+0x1dc>
 80025c6:	e20c      	b.n	80029e2 <__aeabi_dsub+0x5f6>
 80025c8:	4e55      	ldr	r6, [pc, #340]	; (8002720 <__aeabi_dsub+0x334>)
 80025ca:	42b4      	cmp	r4, r6
 80025cc:	d100      	bne.n	80025d0 <__aeabi_dsub+0x1e4>
 80025ce:	e1f8      	b.n	80029c2 <__aeabi_dsub+0x5d6>
 80025d0:	46ac      	mov	ip, r5
 80025d2:	e10e      	b.n	80027f2 <__aeabi_dsub+0x406>
 80025d4:	000a      	movs	r2, r1
 80025d6:	4302      	orrs	r2, r0
 80025d8:	d100      	bne.n	80025dc <__aeabi_dsub+0x1f0>
 80025da:	e136      	b.n	800284a <__aeabi_dsub+0x45e>
 80025dc:	0022      	movs	r2, r4
 80025de:	3a01      	subs	r2, #1
 80025e0:	2c01      	cmp	r4, #1
 80025e2:	d100      	bne.n	80025e6 <__aeabi_dsub+0x1fa>
 80025e4:	e1c6      	b.n	8002974 <__aeabi_dsub+0x588>
 80025e6:	4c4e      	ldr	r4, [pc, #312]	; (8002720 <__aeabi_dsub+0x334>)
 80025e8:	45a4      	cmp	ip, r4
 80025ea:	d100      	bne.n	80025ee <__aeabi_dsub+0x202>
 80025ec:	e0f4      	b.n	80027d8 <__aeabi_dsub+0x3ec>
 80025ee:	4694      	mov	ip, r2
 80025f0:	e731      	b.n	8002456 <__aeabi_dsub+0x6a>
 80025f2:	2401      	movs	r4, #1
 80025f4:	4067      	eors	r7, r4
 80025f6:	46bb      	mov	fp, r7
 80025f8:	42bd      	cmp	r5, r7
 80025fa:	d000      	beq.n	80025fe <__aeabi_dsub+0x212>
 80025fc:	e71c      	b.n	8002438 <__aeabi_dsub+0x4c>
 80025fe:	4c4a      	ldr	r4, [pc, #296]	; (8002728 <__aeabi_dsub+0x33c>)
 8002600:	46a4      	mov	ip, r4
 8002602:	44b4      	add	ip, r6
 8002604:	4664      	mov	r4, ip
 8002606:	2c00      	cmp	r4, #0
 8002608:	d100      	bne.n	800260c <__aeabi_dsub+0x220>
 800260a:	e0cf      	b.n	80027ac <__aeabi_dsub+0x3c0>
 800260c:	1b94      	subs	r4, r2, r6
 800260e:	46a4      	mov	ip, r4
 8002610:	2e00      	cmp	r6, #0
 8002612:	d100      	bne.n	8002616 <__aeabi_dsub+0x22a>
 8002614:	e15c      	b.n	80028d0 <__aeabi_dsub+0x4e4>
 8002616:	4e42      	ldr	r6, [pc, #264]	; (8002720 <__aeabi_dsub+0x334>)
 8002618:	42b2      	cmp	r2, r6
 800261a:	d100      	bne.n	800261e <__aeabi_dsub+0x232>
 800261c:	e1ec      	b.n	80029f8 <__aeabi_dsub+0x60c>
 800261e:	2680      	movs	r6, #128	; 0x80
 8002620:	0436      	lsls	r6, r6, #16
 8002622:	4333      	orrs	r3, r6
 8002624:	4664      	mov	r4, ip
 8002626:	2c38      	cmp	r4, #56	; 0x38
 8002628:	dd00      	ble.n	800262c <__aeabi_dsub+0x240>
 800262a:	e1b3      	b.n	8002994 <__aeabi_dsub+0x5a8>
 800262c:	2c1f      	cmp	r4, #31
 800262e:	dd00      	ble.n	8002632 <__aeabi_dsub+0x246>
 8002630:	e238      	b.n	8002aa4 <__aeabi_dsub+0x6b8>
 8002632:	2620      	movs	r6, #32
 8002634:	1b36      	subs	r6, r6, r4
 8002636:	001c      	movs	r4, r3
 8002638:	40b4      	lsls	r4, r6
 800263a:	464f      	mov	r7, r9
 800263c:	46a0      	mov	r8, r4
 800263e:	4664      	mov	r4, ip
 8002640:	40e7      	lsrs	r7, r4
 8002642:	4644      	mov	r4, r8
 8002644:	433c      	orrs	r4, r7
 8002646:	464f      	mov	r7, r9
 8002648:	40b7      	lsls	r7, r6
 800264a:	003e      	movs	r6, r7
 800264c:	1e77      	subs	r7, r6, #1
 800264e:	41be      	sbcs	r6, r7
 8002650:	4334      	orrs	r4, r6
 8002652:	4666      	mov	r6, ip
 8002654:	40f3      	lsrs	r3, r6
 8002656:	18c9      	adds	r1, r1, r3
 8002658:	1824      	adds	r4, r4, r0
 800265a:	4284      	cmp	r4, r0
 800265c:	419b      	sbcs	r3, r3
 800265e:	425b      	negs	r3, r3
 8002660:	4698      	mov	r8, r3
 8002662:	0016      	movs	r6, r2
 8002664:	4488      	add	r8, r1
 8002666:	e04e      	b.n	8002706 <__aeabi_dsub+0x31a>
 8002668:	4a30      	ldr	r2, [pc, #192]	; (800272c <__aeabi_dsub+0x340>)
 800266a:	1c74      	adds	r4, r6, #1
 800266c:	4214      	tst	r4, r2
 800266e:	d000      	beq.n	8002672 <__aeabi_dsub+0x286>
 8002670:	e0d6      	b.n	8002820 <__aeabi_dsub+0x434>
 8002672:	464a      	mov	r2, r9
 8002674:	431a      	orrs	r2, r3
 8002676:	2e00      	cmp	r6, #0
 8002678:	d000      	beq.n	800267c <__aeabi_dsub+0x290>
 800267a:	e15b      	b.n	8002934 <__aeabi_dsub+0x548>
 800267c:	2a00      	cmp	r2, #0
 800267e:	d100      	bne.n	8002682 <__aeabi_dsub+0x296>
 8002680:	e1a5      	b.n	80029ce <__aeabi_dsub+0x5e2>
 8002682:	000a      	movs	r2, r1
 8002684:	4302      	orrs	r2, r0
 8002686:	d000      	beq.n	800268a <__aeabi_dsub+0x29e>
 8002688:	e1bb      	b.n	8002a02 <__aeabi_dsub+0x616>
 800268a:	464a      	mov	r2, r9
 800268c:	0759      	lsls	r1, r3, #29
 800268e:	08d2      	lsrs	r2, r2, #3
 8002690:	430a      	orrs	r2, r1
 8002692:	08db      	lsrs	r3, r3, #3
 8002694:	e027      	b.n	80026e6 <__aeabi_dsub+0x2fa>
 8002696:	000a      	movs	r2, r1
 8002698:	4302      	orrs	r2, r0
 800269a:	d100      	bne.n	800269e <__aeabi_dsub+0x2b2>
 800269c:	e174      	b.n	8002988 <__aeabi_dsub+0x59c>
 800269e:	0022      	movs	r2, r4
 80026a0:	3a01      	subs	r2, #1
 80026a2:	2c01      	cmp	r4, #1
 80026a4:	d005      	beq.n	80026b2 <__aeabi_dsub+0x2c6>
 80026a6:	4c1e      	ldr	r4, [pc, #120]	; (8002720 <__aeabi_dsub+0x334>)
 80026a8:	45a4      	cmp	ip, r4
 80026aa:	d100      	bne.n	80026ae <__aeabi_dsub+0x2c2>
 80026ac:	e094      	b.n	80027d8 <__aeabi_dsub+0x3ec>
 80026ae:	4694      	mov	ip, r2
 80026b0:	e759      	b.n	8002566 <__aeabi_dsub+0x17a>
 80026b2:	4448      	add	r0, r9
 80026b4:	4548      	cmp	r0, r9
 80026b6:	4192      	sbcs	r2, r2
 80026b8:	185b      	adds	r3, r3, r1
 80026ba:	4698      	mov	r8, r3
 80026bc:	0004      	movs	r4, r0
 80026be:	4252      	negs	r2, r2
 80026c0:	4490      	add	r8, r2
 80026c2:	4643      	mov	r3, r8
 80026c4:	2602      	movs	r6, #2
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	d500      	bpl.n	80026cc <__aeabi_dsub+0x2e0>
 80026ca:	e0c4      	b.n	8002856 <__aeabi_dsub+0x46a>
 80026cc:	3e01      	subs	r6, #1
 80026ce:	0763      	lsls	r3, r4, #29
 80026d0:	d000      	beq.n	80026d4 <__aeabi_dsub+0x2e8>
 80026d2:	e711      	b.n	80024f8 <__aeabi_dsub+0x10c>
 80026d4:	4643      	mov	r3, r8
 80026d6:	46b4      	mov	ip, r6
 80026d8:	0759      	lsls	r1, r3, #29
 80026da:	08e2      	lsrs	r2, r4, #3
 80026dc:	430a      	orrs	r2, r1
 80026de:	08db      	lsrs	r3, r3, #3
 80026e0:	490f      	ldr	r1, [pc, #60]	; (8002720 <__aeabi_dsub+0x334>)
 80026e2:	458c      	cmp	ip, r1
 80026e4:	d040      	beq.n	8002768 <__aeabi_dsub+0x37c>
 80026e6:	4661      	mov	r1, ip
 80026e8:	031b      	lsls	r3, r3, #12
 80026ea:	0549      	lsls	r1, r1, #21
 80026ec:	0b1b      	lsrs	r3, r3, #12
 80026ee:	0d49      	lsrs	r1, r1, #21
 80026f0:	e720      	b.n	8002534 <__aeabi_dsub+0x148>
 80026f2:	4301      	orrs	r1, r0
 80026f4:	000c      	movs	r4, r1
 80026f6:	1e61      	subs	r1, r4, #1
 80026f8:	418c      	sbcs	r4, r1
 80026fa:	444c      	add	r4, r9
 80026fc:	454c      	cmp	r4, r9
 80026fe:	4192      	sbcs	r2, r2
 8002700:	4252      	negs	r2, r2
 8002702:	4690      	mov	r8, r2
 8002704:	4498      	add	r8, r3
 8002706:	4643      	mov	r3, r8
 8002708:	021b      	lsls	r3, r3, #8
 800270a:	d5e0      	bpl.n	80026ce <__aeabi_dsub+0x2e2>
 800270c:	4b04      	ldr	r3, [pc, #16]	; (8002720 <__aeabi_dsub+0x334>)
 800270e:	3601      	adds	r6, #1
 8002710:	429e      	cmp	r6, r3
 8002712:	d000      	beq.n	8002716 <__aeabi_dsub+0x32a>
 8002714:	e09f      	b.n	8002856 <__aeabi_dsub+0x46a>
 8002716:	0031      	movs	r1, r6
 8002718:	2300      	movs	r3, #0
 800271a:	2200      	movs	r2, #0
 800271c:	e70a      	b.n	8002534 <__aeabi_dsub+0x148>
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	000007ff 	.word	0x000007ff
 8002724:	ff7fffff 	.word	0xff7fffff
 8002728:	fffff801 	.word	0xfffff801
 800272c:	000007fe 	.word	0x000007fe
 8002730:	2a00      	cmp	r2, #0
 8002732:	d100      	bne.n	8002736 <__aeabi_dsub+0x34a>
 8002734:	e160      	b.n	80029f8 <__aeabi_dsub+0x60c>
 8002736:	000a      	movs	r2, r1
 8002738:	4302      	orrs	r2, r0
 800273a:	d04d      	beq.n	80027d8 <__aeabi_dsub+0x3ec>
 800273c:	464a      	mov	r2, r9
 800273e:	075c      	lsls	r4, r3, #29
 8002740:	08d2      	lsrs	r2, r2, #3
 8002742:	4322      	orrs	r2, r4
 8002744:	2480      	movs	r4, #128	; 0x80
 8002746:	08db      	lsrs	r3, r3, #3
 8002748:	0324      	lsls	r4, r4, #12
 800274a:	4223      	tst	r3, r4
 800274c:	d007      	beq.n	800275e <__aeabi_dsub+0x372>
 800274e:	08ce      	lsrs	r6, r1, #3
 8002750:	4226      	tst	r6, r4
 8002752:	d104      	bne.n	800275e <__aeabi_dsub+0x372>
 8002754:	465d      	mov	r5, fp
 8002756:	0033      	movs	r3, r6
 8002758:	08c2      	lsrs	r2, r0, #3
 800275a:	0749      	lsls	r1, r1, #29
 800275c:	430a      	orrs	r2, r1
 800275e:	0f51      	lsrs	r1, r2, #29
 8002760:	00d2      	lsls	r2, r2, #3
 8002762:	08d2      	lsrs	r2, r2, #3
 8002764:	0749      	lsls	r1, r1, #29
 8002766:	430a      	orrs	r2, r1
 8002768:	0011      	movs	r1, r2
 800276a:	4319      	orrs	r1, r3
 800276c:	d100      	bne.n	8002770 <__aeabi_dsub+0x384>
 800276e:	e1c8      	b.n	8002b02 <__aeabi_dsub+0x716>
 8002770:	2180      	movs	r1, #128	; 0x80
 8002772:	0309      	lsls	r1, r1, #12
 8002774:	430b      	orrs	r3, r1
 8002776:	031b      	lsls	r3, r3, #12
 8002778:	49d5      	ldr	r1, [pc, #852]	; (8002ad0 <__aeabi_dsub+0x6e4>)
 800277a:	0b1b      	lsrs	r3, r3, #12
 800277c:	e6da      	b.n	8002534 <__aeabi_dsub+0x148>
 800277e:	49d5      	ldr	r1, [pc, #852]	; (8002ad4 <__aeabi_dsub+0x6e8>)
 8002780:	1ab6      	subs	r6, r6, r2
 8002782:	400b      	ands	r3, r1
 8002784:	4698      	mov	r8, r3
 8002786:	e6b5      	b.n	80024f4 <__aeabi_dsub+0x108>
 8002788:	0020      	movs	r0, r4
 800278a:	f000 faf3 	bl	8002d74 <__clzsi2>
 800278e:	0002      	movs	r2, r0
 8002790:	3218      	adds	r2, #24
 8002792:	2a1f      	cmp	r2, #31
 8002794:	dc00      	bgt.n	8002798 <__aeabi_dsub+0x3ac>
 8002796:	e68f      	b.n	80024b8 <__aeabi_dsub+0xcc>
 8002798:	0023      	movs	r3, r4
 800279a:	3808      	subs	r0, #8
 800279c:	4083      	lsls	r3, r0
 800279e:	2400      	movs	r4, #0
 80027a0:	e692      	b.n	80024c8 <__aeabi_dsub+0xdc>
 80027a2:	4308      	orrs	r0, r1
 80027a4:	0002      	movs	r2, r0
 80027a6:	1e50      	subs	r0, r2, #1
 80027a8:	4182      	sbcs	r2, r0
 80027aa:	e66d      	b.n	8002488 <__aeabi_dsub+0x9c>
 80027ac:	4cca      	ldr	r4, [pc, #808]	; (8002ad8 <__aeabi_dsub+0x6ec>)
 80027ae:	1c72      	adds	r2, r6, #1
 80027b0:	4222      	tst	r2, r4
 80027b2:	d000      	beq.n	80027b6 <__aeabi_dsub+0x3ca>
 80027b4:	e0ad      	b.n	8002912 <__aeabi_dsub+0x526>
 80027b6:	464a      	mov	r2, r9
 80027b8:	431a      	orrs	r2, r3
 80027ba:	2e00      	cmp	r6, #0
 80027bc:	d1b8      	bne.n	8002730 <__aeabi_dsub+0x344>
 80027be:	2a00      	cmp	r2, #0
 80027c0:	d100      	bne.n	80027c4 <__aeabi_dsub+0x3d8>
 80027c2:	e158      	b.n	8002a76 <__aeabi_dsub+0x68a>
 80027c4:	000a      	movs	r2, r1
 80027c6:	4302      	orrs	r2, r0
 80027c8:	d000      	beq.n	80027cc <__aeabi_dsub+0x3e0>
 80027ca:	e159      	b.n	8002a80 <__aeabi_dsub+0x694>
 80027cc:	464a      	mov	r2, r9
 80027ce:	0759      	lsls	r1, r3, #29
 80027d0:	08d2      	lsrs	r2, r2, #3
 80027d2:	430a      	orrs	r2, r1
 80027d4:	08db      	lsrs	r3, r3, #3
 80027d6:	e786      	b.n	80026e6 <__aeabi_dsub+0x2fa>
 80027d8:	464a      	mov	r2, r9
 80027da:	0759      	lsls	r1, r3, #29
 80027dc:	08d2      	lsrs	r2, r2, #3
 80027de:	430a      	orrs	r2, r1
 80027e0:	08db      	lsrs	r3, r3, #3
 80027e2:	e7c1      	b.n	8002768 <__aeabi_dsub+0x37c>
 80027e4:	4dba      	ldr	r5, [pc, #744]	; (8002ad0 <__aeabi_dsub+0x6e4>)
 80027e6:	42aa      	cmp	r2, r5
 80027e8:	d100      	bne.n	80027ec <__aeabi_dsub+0x400>
 80027ea:	e11e      	b.n	8002a2a <__aeabi_dsub+0x63e>
 80027ec:	2580      	movs	r5, #128	; 0x80
 80027ee:	042d      	lsls	r5, r5, #16
 80027f0:	432b      	orrs	r3, r5
 80027f2:	4664      	mov	r4, ip
 80027f4:	2c38      	cmp	r4, #56	; 0x38
 80027f6:	dc5d      	bgt.n	80028b4 <__aeabi_dsub+0x4c8>
 80027f8:	2c1f      	cmp	r4, #31
 80027fa:	dd00      	ble.n	80027fe <__aeabi_dsub+0x412>
 80027fc:	e0d0      	b.n	80029a0 <__aeabi_dsub+0x5b4>
 80027fe:	2520      	movs	r5, #32
 8002800:	4667      	mov	r7, ip
 8002802:	1b2d      	subs	r5, r5, r4
 8002804:	464e      	mov	r6, r9
 8002806:	001c      	movs	r4, r3
 8002808:	40fe      	lsrs	r6, r7
 800280a:	40ac      	lsls	r4, r5
 800280c:	4334      	orrs	r4, r6
 800280e:	464e      	mov	r6, r9
 8002810:	40ae      	lsls	r6, r5
 8002812:	0035      	movs	r5, r6
 8002814:	40fb      	lsrs	r3, r7
 8002816:	1e6e      	subs	r6, r5, #1
 8002818:	41b5      	sbcs	r5, r6
 800281a:	1ac9      	subs	r1, r1, r3
 800281c:	432c      	orrs	r4, r5
 800281e:	e04e      	b.n	80028be <__aeabi_dsub+0x4d2>
 8002820:	464a      	mov	r2, r9
 8002822:	1a14      	subs	r4, r2, r0
 8002824:	45a1      	cmp	r9, r4
 8002826:	4192      	sbcs	r2, r2
 8002828:	4252      	negs	r2, r2
 800282a:	4690      	mov	r8, r2
 800282c:	1a5f      	subs	r7, r3, r1
 800282e:	003a      	movs	r2, r7
 8002830:	4647      	mov	r7, r8
 8002832:	1bd2      	subs	r2, r2, r7
 8002834:	4690      	mov	r8, r2
 8002836:	0212      	lsls	r2, r2, #8
 8002838:	d500      	bpl.n	800283c <__aeabi_dsub+0x450>
 800283a:	e08b      	b.n	8002954 <__aeabi_dsub+0x568>
 800283c:	4642      	mov	r2, r8
 800283e:	4322      	orrs	r2, r4
 8002840:	d000      	beq.n	8002844 <__aeabi_dsub+0x458>
 8002842:	e630      	b.n	80024a6 <__aeabi_dsub+0xba>
 8002844:	2300      	movs	r3, #0
 8002846:	2500      	movs	r5, #0
 8002848:	e74d      	b.n	80026e6 <__aeabi_dsub+0x2fa>
 800284a:	464a      	mov	r2, r9
 800284c:	0759      	lsls	r1, r3, #29
 800284e:	08d2      	lsrs	r2, r2, #3
 8002850:	430a      	orrs	r2, r1
 8002852:	08db      	lsrs	r3, r3, #3
 8002854:	e744      	b.n	80026e0 <__aeabi_dsub+0x2f4>
 8002856:	4642      	mov	r2, r8
 8002858:	4b9e      	ldr	r3, [pc, #632]	; (8002ad4 <__aeabi_dsub+0x6e8>)
 800285a:	0861      	lsrs	r1, r4, #1
 800285c:	401a      	ands	r2, r3
 800285e:	0013      	movs	r3, r2
 8002860:	2201      	movs	r2, #1
 8002862:	4014      	ands	r4, r2
 8002864:	430c      	orrs	r4, r1
 8002866:	07da      	lsls	r2, r3, #31
 8002868:	085b      	lsrs	r3, r3, #1
 800286a:	4698      	mov	r8, r3
 800286c:	4314      	orrs	r4, r2
 800286e:	e641      	b.n	80024f4 <__aeabi_dsub+0x108>
 8002870:	001a      	movs	r2, r3
 8002872:	3e1f      	subs	r6, #31
 8002874:	40f2      	lsrs	r2, r6
 8002876:	0016      	movs	r6, r2
 8002878:	2920      	cmp	r1, #32
 800287a:	d003      	beq.n	8002884 <__aeabi_dsub+0x498>
 800287c:	2240      	movs	r2, #64	; 0x40
 800287e:	1a51      	subs	r1, r2, r1
 8002880:	408b      	lsls	r3, r1
 8002882:	431c      	orrs	r4, r3
 8002884:	1e62      	subs	r2, r4, #1
 8002886:	4194      	sbcs	r4, r2
 8002888:	2300      	movs	r3, #0
 800288a:	4334      	orrs	r4, r6
 800288c:	4698      	mov	r8, r3
 800288e:	2600      	movs	r6, #0
 8002890:	e71d      	b.n	80026ce <__aeabi_dsub+0x2e2>
 8002892:	000c      	movs	r4, r1
 8002894:	3a20      	subs	r2, #32
 8002896:	40d4      	lsrs	r4, r2
 8002898:	0022      	movs	r2, r4
 800289a:	4664      	mov	r4, ip
 800289c:	2c20      	cmp	r4, #32
 800289e:	d004      	beq.n	80028aa <__aeabi_dsub+0x4be>
 80028a0:	2740      	movs	r7, #64	; 0x40
 80028a2:	1b3f      	subs	r7, r7, r4
 80028a4:	40b9      	lsls	r1, r7
 80028a6:	4308      	orrs	r0, r1
 80028a8:	4680      	mov	r8, r0
 80028aa:	4644      	mov	r4, r8
 80028ac:	1e61      	subs	r1, r4, #1
 80028ae:	418c      	sbcs	r4, r1
 80028b0:	4322      	orrs	r2, r4
 80028b2:	e5e9      	b.n	8002488 <__aeabi_dsub+0x9c>
 80028b4:	464c      	mov	r4, r9
 80028b6:	4323      	orrs	r3, r4
 80028b8:	001c      	movs	r4, r3
 80028ba:	1e63      	subs	r3, r4, #1
 80028bc:	419c      	sbcs	r4, r3
 80028be:	1b04      	subs	r4, r0, r4
 80028c0:	42a0      	cmp	r0, r4
 80028c2:	419b      	sbcs	r3, r3
 80028c4:	425b      	negs	r3, r3
 80028c6:	1acb      	subs	r3, r1, r3
 80028c8:	4698      	mov	r8, r3
 80028ca:	465d      	mov	r5, fp
 80028cc:	0016      	movs	r6, r2
 80028ce:	e5e2      	b.n	8002496 <__aeabi_dsub+0xaa>
 80028d0:	464e      	mov	r6, r9
 80028d2:	431e      	orrs	r6, r3
 80028d4:	d100      	bne.n	80028d8 <__aeabi_dsub+0x4ec>
 80028d6:	e0ae      	b.n	8002a36 <__aeabi_dsub+0x64a>
 80028d8:	1e66      	subs	r6, r4, #1
 80028da:	2c01      	cmp	r4, #1
 80028dc:	d100      	bne.n	80028e0 <__aeabi_dsub+0x4f4>
 80028de:	e0fd      	b.n	8002adc <__aeabi_dsub+0x6f0>
 80028e0:	4f7b      	ldr	r7, [pc, #492]	; (8002ad0 <__aeabi_dsub+0x6e4>)
 80028e2:	42bc      	cmp	r4, r7
 80028e4:	d100      	bne.n	80028e8 <__aeabi_dsub+0x4fc>
 80028e6:	e107      	b.n	8002af8 <__aeabi_dsub+0x70c>
 80028e8:	46b4      	mov	ip, r6
 80028ea:	e69b      	b.n	8002624 <__aeabi_dsub+0x238>
 80028ec:	4664      	mov	r4, ip
 80028ee:	2220      	movs	r2, #32
 80028f0:	1b12      	subs	r2, r2, r4
 80028f2:	000c      	movs	r4, r1
 80028f4:	4094      	lsls	r4, r2
 80028f6:	0007      	movs	r7, r0
 80028f8:	4090      	lsls	r0, r2
 80028fa:	46a0      	mov	r8, r4
 80028fc:	4664      	mov	r4, ip
 80028fe:	1e42      	subs	r2, r0, #1
 8002900:	4190      	sbcs	r0, r2
 8002902:	4662      	mov	r2, ip
 8002904:	40e7      	lsrs	r7, r4
 8002906:	4644      	mov	r4, r8
 8002908:	40d1      	lsrs	r1, r2
 800290a:	433c      	orrs	r4, r7
 800290c:	4304      	orrs	r4, r0
 800290e:	185b      	adds	r3, r3, r1
 8002910:	e6f3      	b.n	80026fa <__aeabi_dsub+0x30e>
 8002912:	4c6f      	ldr	r4, [pc, #444]	; (8002ad0 <__aeabi_dsub+0x6e4>)
 8002914:	42a2      	cmp	r2, r4
 8002916:	d100      	bne.n	800291a <__aeabi_dsub+0x52e>
 8002918:	e0d5      	b.n	8002ac6 <__aeabi_dsub+0x6da>
 800291a:	4448      	add	r0, r9
 800291c:	185b      	adds	r3, r3, r1
 800291e:	4548      	cmp	r0, r9
 8002920:	4189      	sbcs	r1, r1
 8002922:	4249      	negs	r1, r1
 8002924:	185b      	adds	r3, r3, r1
 8002926:	07dc      	lsls	r4, r3, #31
 8002928:	0840      	lsrs	r0, r0, #1
 800292a:	085b      	lsrs	r3, r3, #1
 800292c:	4698      	mov	r8, r3
 800292e:	0016      	movs	r6, r2
 8002930:	4304      	orrs	r4, r0
 8002932:	e6cc      	b.n	80026ce <__aeabi_dsub+0x2e2>
 8002934:	2a00      	cmp	r2, #0
 8002936:	d000      	beq.n	800293a <__aeabi_dsub+0x54e>
 8002938:	e082      	b.n	8002a40 <__aeabi_dsub+0x654>
 800293a:	000a      	movs	r2, r1
 800293c:	4302      	orrs	r2, r0
 800293e:	d140      	bne.n	80029c2 <__aeabi_dsub+0x5d6>
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	2500      	movs	r5, #0
 8002944:	031b      	lsls	r3, r3, #12
 8002946:	e713      	b.n	8002770 <__aeabi_dsub+0x384>
 8002948:	074b      	lsls	r3, r1, #29
 800294a:	08c2      	lsrs	r2, r0, #3
 800294c:	431a      	orrs	r2, r3
 800294e:	465d      	mov	r5, fp
 8002950:	08cb      	lsrs	r3, r1, #3
 8002952:	e6c5      	b.n	80026e0 <__aeabi_dsub+0x2f4>
 8002954:	464a      	mov	r2, r9
 8002956:	1a84      	subs	r4, r0, r2
 8002958:	42a0      	cmp	r0, r4
 800295a:	4192      	sbcs	r2, r2
 800295c:	1acb      	subs	r3, r1, r3
 800295e:	4252      	negs	r2, r2
 8002960:	1a9b      	subs	r3, r3, r2
 8002962:	4698      	mov	r8, r3
 8002964:	465d      	mov	r5, fp
 8002966:	e59e      	b.n	80024a6 <__aeabi_dsub+0xba>
 8002968:	464a      	mov	r2, r9
 800296a:	0759      	lsls	r1, r3, #29
 800296c:	08d2      	lsrs	r2, r2, #3
 800296e:	430a      	orrs	r2, r1
 8002970:	08db      	lsrs	r3, r3, #3
 8002972:	e6f9      	b.n	8002768 <__aeabi_dsub+0x37c>
 8002974:	464a      	mov	r2, r9
 8002976:	1a14      	subs	r4, r2, r0
 8002978:	45a1      	cmp	r9, r4
 800297a:	4192      	sbcs	r2, r2
 800297c:	1a5b      	subs	r3, r3, r1
 800297e:	4252      	negs	r2, r2
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	4698      	mov	r8, r3
 8002984:	2601      	movs	r6, #1
 8002986:	e586      	b.n	8002496 <__aeabi_dsub+0xaa>
 8002988:	464a      	mov	r2, r9
 800298a:	0759      	lsls	r1, r3, #29
 800298c:	08d2      	lsrs	r2, r2, #3
 800298e:	430a      	orrs	r2, r1
 8002990:	08db      	lsrs	r3, r3, #3
 8002992:	e6a5      	b.n	80026e0 <__aeabi_dsub+0x2f4>
 8002994:	464c      	mov	r4, r9
 8002996:	4323      	orrs	r3, r4
 8002998:	001c      	movs	r4, r3
 800299a:	1e63      	subs	r3, r4, #1
 800299c:	419c      	sbcs	r4, r3
 800299e:	e65b      	b.n	8002658 <__aeabi_dsub+0x26c>
 80029a0:	4665      	mov	r5, ip
 80029a2:	001e      	movs	r6, r3
 80029a4:	3d20      	subs	r5, #32
 80029a6:	40ee      	lsrs	r6, r5
 80029a8:	2c20      	cmp	r4, #32
 80029aa:	d005      	beq.n	80029b8 <__aeabi_dsub+0x5cc>
 80029ac:	2540      	movs	r5, #64	; 0x40
 80029ae:	1b2d      	subs	r5, r5, r4
 80029b0:	40ab      	lsls	r3, r5
 80029b2:	464c      	mov	r4, r9
 80029b4:	431c      	orrs	r4, r3
 80029b6:	46a2      	mov	sl, r4
 80029b8:	4654      	mov	r4, sl
 80029ba:	1e63      	subs	r3, r4, #1
 80029bc:	419c      	sbcs	r4, r3
 80029be:	4334      	orrs	r4, r6
 80029c0:	e77d      	b.n	80028be <__aeabi_dsub+0x4d2>
 80029c2:	074b      	lsls	r3, r1, #29
 80029c4:	08c2      	lsrs	r2, r0, #3
 80029c6:	431a      	orrs	r2, r3
 80029c8:	465d      	mov	r5, fp
 80029ca:	08cb      	lsrs	r3, r1, #3
 80029cc:	e6cc      	b.n	8002768 <__aeabi_dsub+0x37c>
 80029ce:	000a      	movs	r2, r1
 80029d0:	4302      	orrs	r2, r0
 80029d2:	d100      	bne.n	80029d6 <__aeabi_dsub+0x5ea>
 80029d4:	e736      	b.n	8002844 <__aeabi_dsub+0x458>
 80029d6:	074b      	lsls	r3, r1, #29
 80029d8:	08c2      	lsrs	r2, r0, #3
 80029da:	431a      	orrs	r2, r3
 80029dc:	465d      	mov	r5, fp
 80029de:	08cb      	lsrs	r3, r1, #3
 80029e0:	e681      	b.n	80026e6 <__aeabi_dsub+0x2fa>
 80029e2:	464a      	mov	r2, r9
 80029e4:	1a84      	subs	r4, r0, r2
 80029e6:	42a0      	cmp	r0, r4
 80029e8:	4192      	sbcs	r2, r2
 80029ea:	1acb      	subs	r3, r1, r3
 80029ec:	4252      	negs	r2, r2
 80029ee:	1a9b      	subs	r3, r3, r2
 80029f0:	4698      	mov	r8, r3
 80029f2:	465d      	mov	r5, fp
 80029f4:	2601      	movs	r6, #1
 80029f6:	e54e      	b.n	8002496 <__aeabi_dsub+0xaa>
 80029f8:	074b      	lsls	r3, r1, #29
 80029fa:	08c2      	lsrs	r2, r0, #3
 80029fc:	431a      	orrs	r2, r3
 80029fe:	08cb      	lsrs	r3, r1, #3
 8002a00:	e6b2      	b.n	8002768 <__aeabi_dsub+0x37c>
 8002a02:	464a      	mov	r2, r9
 8002a04:	1a14      	subs	r4, r2, r0
 8002a06:	45a1      	cmp	r9, r4
 8002a08:	4192      	sbcs	r2, r2
 8002a0a:	1a5f      	subs	r7, r3, r1
 8002a0c:	4252      	negs	r2, r2
 8002a0e:	1aba      	subs	r2, r7, r2
 8002a10:	4690      	mov	r8, r2
 8002a12:	0212      	lsls	r2, r2, #8
 8002a14:	d56b      	bpl.n	8002aee <__aeabi_dsub+0x702>
 8002a16:	464a      	mov	r2, r9
 8002a18:	1a84      	subs	r4, r0, r2
 8002a1a:	42a0      	cmp	r0, r4
 8002a1c:	4192      	sbcs	r2, r2
 8002a1e:	1acb      	subs	r3, r1, r3
 8002a20:	4252      	negs	r2, r2
 8002a22:	1a9b      	subs	r3, r3, r2
 8002a24:	4698      	mov	r8, r3
 8002a26:	465d      	mov	r5, fp
 8002a28:	e564      	b.n	80024f4 <__aeabi_dsub+0x108>
 8002a2a:	074b      	lsls	r3, r1, #29
 8002a2c:	08c2      	lsrs	r2, r0, #3
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	465d      	mov	r5, fp
 8002a32:	08cb      	lsrs	r3, r1, #3
 8002a34:	e698      	b.n	8002768 <__aeabi_dsub+0x37c>
 8002a36:	074b      	lsls	r3, r1, #29
 8002a38:	08c2      	lsrs	r2, r0, #3
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	08cb      	lsrs	r3, r1, #3
 8002a3e:	e64f      	b.n	80026e0 <__aeabi_dsub+0x2f4>
 8002a40:	000a      	movs	r2, r1
 8002a42:	4302      	orrs	r2, r0
 8002a44:	d090      	beq.n	8002968 <__aeabi_dsub+0x57c>
 8002a46:	464a      	mov	r2, r9
 8002a48:	075c      	lsls	r4, r3, #29
 8002a4a:	08d2      	lsrs	r2, r2, #3
 8002a4c:	4314      	orrs	r4, r2
 8002a4e:	2280      	movs	r2, #128	; 0x80
 8002a50:	08db      	lsrs	r3, r3, #3
 8002a52:	0312      	lsls	r2, r2, #12
 8002a54:	4213      	tst	r3, r2
 8002a56:	d008      	beq.n	8002a6a <__aeabi_dsub+0x67e>
 8002a58:	08ce      	lsrs	r6, r1, #3
 8002a5a:	4216      	tst	r6, r2
 8002a5c:	d105      	bne.n	8002a6a <__aeabi_dsub+0x67e>
 8002a5e:	08c0      	lsrs	r0, r0, #3
 8002a60:	0749      	lsls	r1, r1, #29
 8002a62:	4308      	orrs	r0, r1
 8002a64:	0004      	movs	r4, r0
 8002a66:	465d      	mov	r5, fp
 8002a68:	0033      	movs	r3, r6
 8002a6a:	0f61      	lsrs	r1, r4, #29
 8002a6c:	00e2      	lsls	r2, r4, #3
 8002a6e:	0749      	lsls	r1, r1, #29
 8002a70:	08d2      	lsrs	r2, r2, #3
 8002a72:	430a      	orrs	r2, r1
 8002a74:	e678      	b.n	8002768 <__aeabi_dsub+0x37c>
 8002a76:	074b      	lsls	r3, r1, #29
 8002a78:	08c2      	lsrs	r2, r0, #3
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	08cb      	lsrs	r3, r1, #3
 8002a7e:	e632      	b.n	80026e6 <__aeabi_dsub+0x2fa>
 8002a80:	4448      	add	r0, r9
 8002a82:	185b      	adds	r3, r3, r1
 8002a84:	4548      	cmp	r0, r9
 8002a86:	4192      	sbcs	r2, r2
 8002a88:	4698      	mov	r8, r3
 8002a8a:	4252      	negs	r2, r2
 8002a8c:	4490      	add	r8, r2
 8002a8e:	4643      	mov	r3, r8
 8002a90:	0004      	movs	r4, r0
 8002a92:	021b      	lsls	r3, r3, #8
 8002a94:	d400      	bmi.n	8002a98 <__aeabi_dsub+0x6ac>
 8002a96:	e61a      	b.n	80026ce <__aeabi_dsub+0x2e2>
 8002a98:	4642      	mov	r2, r8
 8002a9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <__aeabi_dsub+0x6e8>)
 8002a9c:	2601      	movs	r6, #1
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	4690      	mov	r8, r2
 8002aa2:	e614      	b.n	80026ce <__aeabi_dsub+0x2e2>
 8002aa4:	4666      	mov	r6, ip
 8002aa6:	001f      	movs	r7, r3
 8002aa8:	3e20      	subs	r6, #32
 8002aaa:	40f7      	lsrs	r7, r6
 8002aac:	2c20      	cmp	r4, #32
 8002aae:	d005      	beq.n	8002abc <__aeabi_dsub+0x6d0>
 8002ab0:	2640      	movs	r6, #64	; 0x40
 8002ab2:	1b36      	subs	r6, r6, r4
 8002ab4:	40b3      	lsls	r3, r6
 8002ab6:	464c      	mov	r4, r9
 8002ab8:	431c      	orrs	r4, r3
 8002aba:	46a2      	mov	sl, r4
 8002abc:	4654      	mov	r4, sl
 8002abe:	1e63      	subs	r3, r4, #1
 8002ac0:	419c      	sbcs	r4, r3
 8002ac2:	433c      	orrs	r4, r7
 8002ac4:	e5c8      	b.n	8002658 <__aeabi_dsub+0x26c>
 8002ac6:	0011      	movs	r1, r2
 8002ac8:	2300      	movs	r3, #0
 8002aca:	2200      	movs	r2, #0
 8002acc:	e532      	b.n	8002534 <__aeabi_dsub+0x148>
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	000007ff 	.word	0x000007ff
 8002ad4:	ff7fffff 	.word	0xff7fffff
 8002ad8:	000007fe 	.word	0x000007fe
 8002adc:	464a      	mov	r2, r9
 8002ade:	1814      	adds	r4, r2, r0
 8002ae0:	4284      	cmp	r4, r0
 8002ae2:	4192      	sbcs	r2, r2
 8002ae4:	185b      	adds	r3, r3, r1
 8002ae6:	4698      	mov	r8, r3
 8002ae8:	4252      	negs	r2, r2
 8002aea:	4490      	add	r8, r2
 8002aec:	e5e9      	b.n	80026c2 <__aeabi_dsub+0x2d6>
 8002aee:	4642      	mov	r2, r8
 8002af0:	4322      	orrs	r2, r4
 8002af2:	d100      	bne.n	8002af6 <__aeabi_dsub+0x70a>
 8002af4:	e6a6      	b.n	8002844 <__aeabi_dsub+0x458>
 8002af6:	e5ea      	b.n	80026ce <__aeabi_dsub+0x2e2>
 8002af8:	074b      	lsls	r3, r1, #29
 8002afa:	08c2      	lsrs	r2, r0, #3
 8002afc:	431a      	orrs	r2, r3
 8002afe:	08cb      	lsrs	r3, r1, #3
 8002b00:	e632      	b.n	8002768 <__aeabi_dsub+0x37c>
 8002b02:	2200      	movs	r2, #0
 8002b04:	4901      	ldr	r1, [pc, #4]	; (8002b0c <__aeabi_dsub+0x720>)
 8002b06:	0013      	movs	r3, r2
 8002b08:	e514      	b.n	8002534 <__aeabi_dsub+0x148>
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	000007ff 	.word	0x000007ff

08002b10 <__aeabi_dcmpun>:
 8002b10:	b570      	push	{r4, r5, r6, lr}
 8002b12:	0005      	movs	r5, r0
 8002b14:	480c      	ldr	r0, [pc, #48]	; (8002b48 <__aeabi_dcmpun+0x38>)
 8002b16:	030c      	lsls	r4, r1, #12
 8002b18:	0016      	movs	r6, r2
 8002b1a:	0049      	lsls	r1, r1, #1
 8002b1c:	031a      	lsls	r2, r3, #12
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	0b24      	lsrs	r4, r4, #12
 8002b22:	0d49      	lsrs	r1, r1, #21
 8002b24:	0b12      	lsrs	r2, r2, #12
 8002b26:	0d5b      	lsrs	r3, r3, #21
 8002b28:	4281      	cmp	r1, r0
 8002b2a:	d008      	beq.n	8002b3e <__aeabi_dcmpun+0x2e>
 8002b2c:	4906      	ldr	r1, [pc, #24]	; (8002b48 <__aeabi_dcmpun+0x38>)
 8002b2e:	2000      	movs	r0, #0
 8002b30:	428b      	cmp	r3, r1
 8002b32:	d103      	bne.n	8002b3c <__aeabi_dcmpun+0x2c>
 8002b34:	4332      	orrs	r2, r6
 8002b36:	0010      	movs	r0, r2
 8002b38:	1e42      	subs	r2, r0, #1
 8002b3a:	4190      	sbcs	r0, r2
 8002b3c:	bd70      	pop	{r4, r5, r6, pc}
 8002b3e:	2001      	movs	r0, #1
 8002b40:	432c      	orrs	r4, r5
 8002b42:	d1fb      	bne.n	8002b3c <__aeabi_dcmpun+0x2c>
 8002b44:	e7f2      	b.n	8002b2c <__aeabi_dcmpun+0x1c>
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	000007ff 	.word	0x000007ff

08002b4c <__aeabi_d2iz>:
 8002b4c:	000a      	movs	r2, r1
 8002b4e:	b530      	push	{r4, r5, lr}
 8002b50:	4c13      	ldr	r4, [pc, #76]	; (8002ba0 <__aeabi_d2iz+0x54>)
 8002b52:	0053      	lsls	r3, r2, #1
 8002b54:	0309      	lsls	r1, r1, #12
 8002b56:	0005      	movs	r5, r0
 8002b58:	0b09      	lsrs	r1, r1, #12
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	0d5b      	lsrs	r3, r3, #21
 8002b5e:	0fd2      	lsrs	r2, r2, #31
 8002b60:	42a3      	cmp	r3, r4
 8002b62:	dd04      	ble.n	8002b6e <__aeabi_d2iz+0x22>
 8002b64:	480f      	ldr	r0, [pc, #60]	; (8002ba4 <__aeabi_d2iz+0x58>)
 8002b66:	4283      	cmp	r3, r0
 8002b68:	dd02      	ble.n	8002b70 <__aeabi_d2iz+0x24>
 8002b6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <__aeabi_d2iz+0x5c>)
 8002b6c:	18d0      	adds	r0, r2, r3
 8002b6e:	bd30      	pop	{r4, r5, pc}
 8002b70:	2080      	movs	r0, #128	; 0x80
 8002b72:	0340      	lsls	r0, r0, #13
 8002b74:	4301      	orrs	r1, r0
 8002b76:	480d      	ldr	r0, [pc, #52]	; (8002bac <__aeabi_d2iz+0x60>)
 8002b78:	1ac0      	subs	r0, r0, r3
 8002b7a:	281f      	cmp	r0, #31
 8002b7c:	dd08      	ble.n	8002b90 <__aeabi_d2iz+0x44>
 8002b7e:	480c      	ldr	r0, [pc, #48]	; (8002bb0 <__aeabi_d2iz+0x64>)
 8002b80:	1ac3      	subs	r3, r0, r3
 8002b82:	40d9      	lsrs	r1, r3
 8002b84:	000b      	movs	r3, r1
 8002b86:	4258      	negs	r0, r3
 8002b88:	2a00      	cmp	r2, #0
 8002b8a:	d1f0      	bne.n	8002b6e <__aeabi_d2iz+0x22>
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	e7ee      	b.n	8002b6e <__aeabi_d2iz+0x22>
 8002b90:	4c08      	ldr	r4, [pc, #32]	; (8002bb4 <__aeabi_d2iz+0x68>)
 8002b92:	40c5      	lsrs	r5, r0
 8002b94:	46a4      	mov	ip, r4
 8002b96:	4463      	add	r3, ip
 8002b98:	4099      	lsls	r1, r3
 8002b9a:	000b      	movs	r3, r1
 8002b9c:	432b      	orrs	r3, r5
 8002b9e:	e7f2      	b.n	8002b86 <__aeabi_d2iz+0x3a>
 8002ba0:	000003fe 	.word	0x000003fe
 8002ba4:	0000041d 	.word	0x0000041d
 8002ba8:	7fffffff 	.word	0x7fffffff
 8002bac:	00000433 	.word	0x00000433
 8002bb0:	00000413 	.word	0x00000413
 8002bb4:	fffffbed 	.word	0xfffffbed

08002bb8 <__aeabi_i2d>:
 8002bb8:	b570      	push	{r4, r5, r6, lr}
 8002bba:	2800      	cmp	r0, #0
 8002bbc:	d016      	beq.n	8002bec <__aeabi_i2d+0x34>
 8002bbe:	17c3      	asrs	r3, r0, #31
 8002bc0:	18c5      	adds	r5, r0, r3
 8002bc2:	405d      	eors	r5, r3
 8002bc4:	0fc4      	lsrs	r4, r0, #31
 8002bc6:	0028      	movs	r0, r5
 8002bc8:	f000 f8d4 	bl	8002d74 <__clzsi2>
 8002bcc:	4a11      	ldr	r2, [pc, #68]	; (8002c14 <__aeabi_i2d+0x5c>)
 8002bce:	1a12      	subs	r2, r2, r0
 8002bd0:	280a      	cmp	r0, #10
 8002bd2:	dc16      	bgt.n	8002c02 <__aeabi_i2d+0x4a>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	002e      	movs	r6, r5
 8002bd8:	3315      	adds	r3, #21
 8002bda:	409e      	lsls	r6, r3
 8002bdc:	230b      	movs	r3, #11
 8002bde:	1a18      	subs	r0, r3, r0
 8002be0:	40c5      	lsrs	r5, r0
 8002be2:	0553      	lsls	r3, r2, #21
 8002be4:	032d      	lsls	r5, r5, #12
 8002be6:	0b2d      	lsrs	r5, r5, #12
 8002be8:	0d5b      	lsrs	r3, r3, #21
 8002bea:	e003      	b.n	8002bf4 <__aeabi_i2d+0x3c>
 8002bec:	2400      	movs	r4, #0
 8002bee:	2300      	movs	r3, #0
 8002bf0:	2500      	movs	r5, #0
 8002bf2:	2600      	movs	r6, #0
 8002bf4:	051b      	lsls	r3, r3, #20
 8002bf6:	432b      	orrs	r3, r5
 8002bf8:	07e4      	lsls	r4, r4, #31
 8002bfa:	4323      	orrs	r3, r4
 8002bfc:	0030      	movs	r0, r6
 8002bfe:	0019      	movs	r1, r3
 8002c00:	bd70      	pop	{r4, r5, r6, pc}
 8002c02:	380b      	subs	r0, #11
 8002c04:	4085      	lsls	r5, r0
 8002c06:	0553      	lsls	r3, r2, #21
 8002c08:	032d      	lsls	r5, r5, #12
 8002c0a:	2600      	movs	r6, #0
 8002c0c:	0b2d      	lsrs	r5, r5, #12
 8002c0e:	0d5b      	lsrs	r3, r3, #21
 8002c10:	e7f0      	b.n	8002bf4 <__aeabi_i2d+0x3c>
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	0000041e 	.word	0x0000041e

08002c18 <__aeabi_ui2d>:
 8002c18:	b510      	push	{r4, lr}
 8002c1a:	1e04      	subs	r4, r0, #0
 8002c1c:	d010      	beq.n	8002c40 <__aeabi_ui2d+0x28>
 8002c1e:	f000 f8a9 	bl	8002d74 <__clzsi2>
 8002c22:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <__aeabi_ui2d+0x48>)
 8002c24:	1a1b      	subs	r3, r3, r0
 8002c26:	280a      	cmp	r0, #10
 8002c28:	dc11      	bgt.n	8002c4e <__aeabi_ui2d+0x36>
 8002c2a:	220b      	movs	r2, #11
 8002c2c:	0021      	movs	r1, r4
 8002c2e:	1a12      	subs	r2, r2, r0
 8002c30:	40d1      	lsrs	r1, r2
 8002c32:	3015      	adds	r0, #21
 8002c34:	030a      	lsls	r2, r1, #12
 8002c36:	055b      	lsls	r3, r3, #21
 8002c38:	4084      	lsls	r4, r0
 8002c3a:	0b12      	lsrs	r2, r2, #12
 8002c3c:	0d5b      	lsrs	r3, r3, #21
 8002c3e:	e001      	b.n	8002c44 <__aeabi_ui2d+0x2c>
 8002c40:	2300      	movs	r3, #0
 8002c42:	2200      	movs	r2, #0
 8002c44:	051b      	lsls	r3, r3, #20
 8002c46:	4313      	orrs	r3, r2
 8002c48:	0020      	movs	r0, r4
 8002c4a:	0019      	movs	r1, r3
 8002c4c:	bd10      	pop	{r4, pc}
 8002c4e:	0022      	movs	r2, r4
 8002c50:	380b      	subs	r0, #11
 8002c52:	4082      	lsls	r2, r0
 8002c54:	055b      	lsls	r3, r3, #21
 8002c56:	0312      	lsls	r2, r2, #12
 8002c58:	2400      	movs	r4, #0
 8002c5a:	0b12      	lsrs	r2, r2, #12
 8002c5c:	0d5b      	lsrs	r3, r3, #21
 8002c5e:	e7f1      	b.n	8002c44 <__aeabi_ui2d+0x2c>
 8002c60:	0000041e 	.word	0x0000041e

08002c64 <__aeabi_d2f>:
 8002c64:	0002      	movs	r2, r0
 8002c66:	004b      	lsls	r3, r1, #1
 8002c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c6a:	0308      	lsls	r0, r1, #12
 8002c6c:	0d5b      	lsrs	r3, r3, #21
 8002c6e:	4e3d      	ldr	r6, [pc, #244]	; (8002d64 <__aeabi_d2f+0x100>)
 8002c70:	0fcc      	lsrs	r4, r1, #31
 8002c72:	0a40      	lsrs	r0, r0, #9
 8002c74:	0f51      	lsrs	r1, r2, #29
 8002c76:	1c5f      	adds	r7, r3, #1
 8002c78:	4308      	orrs	r0, r1
 8002c7a:	00d5      	lsls	r5, r2, #3
 8002c7c:	4237      	tst	r7, r6
 8002c7e:	d00a      	beq.n	8002c96 <__aeabi_d2f+0x32>
 8002c80:	4939      	ldr	r1, [pc, #228]	; (8002d68 <__aeabi_d2f+0x104>)
 8002c82:	185e      	adds	r6, r3, r1
 8002c84:	2efe      	cmp	r6, #254	; 0xfe
 8002c86:	dd16      	ble.n	8002cb6 <__aeabi_d2f+0x52>
 8002c88:	23ff      	movs	r3, #255	; 0xff
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	05db      	lsls	r3, r3, #23
 8002c8e:	430b      	orrs	r3, r1
 8002c90:	07e0      	lsls	r0, r4, #31
 8002c92:	4318      	orrs	r0, r3
 8002c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <__aeabi_d2f+0x44>
 8002c9a:	4328      	orrs	r0, r5
 8002c9c:	d027      	beq.n	8002cee <__aeabi_d2f+0x8a>
 8002c9e:	2105      	movs	r1, #5
 8002ca0:	0189      	lsls	r1, r1, #6
 8002ca2:	0a49      	lsrs	r1, r1, #9
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	e7f1      	b.n	8002c8c <__aeabi_d2f+0x28>
 8002ca8:	4305      	orrs	r5, r0
 8002caa:	d0ed      	beq.n	8002c88 <__aeabi_d2f+0x24>
 8002cac:	2180      	movs	r1, #128	; 0x80
 8002cae:	03c9      	lsls	r1, r1, #15
 8002cb0:	23ff      	movs	r3, #255	; 0xff
 8002cb2:	4301      	orrs	r1, r0
 8002cb4:	e7ea      	b.n	8002c8c <__aeabi_d2f+0x28>
 8002cb6:	2e00      	cmp	r6, #0
 8002cb8:	dd1c      	ble.n	8002cf4 <__aeabi_d2f+0x90>
 8002cba:	0192      	lsls	r2, r2, #6
 8002cbc:	0011      	movs	r1, r2
 8002cbe:	1e4a      	subs	r2, r1, #1
 8002cc0:	4191      	sbcs	r1, r2
 8002cc2:	00c0      	lsls	r0, r0, #3
 8002cc4:	0f6d      	lsrs	r5, r5, #29
 8002cc6:	4301      	orrs	r1, r0
 8002cc8:	4329      	orrs	r1, r5
 8002cca:	074b      	lsls	r3, r1, #29
 8002ccc:	d048      	beq.n	8002d60 <__aeabi_d2f+0xfc>
 8002cce:	230f      	movs	r3, #15
 8002cd0:	400b      	ands	r3, r1
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d000      	beq.n	8002cd8 <__aeabi_d2f+0x74>
 8002cd6:	3104      	adds	r1, #4
 8002cd8:	2380      	movs	r3, #128	; 0x80
 8002cda:	04db      	lsls	r3, r3, #19
 8002cdc:	400b      	ands	r3, r1
 8002cde:	d03f      	beq.n	8002d60 <__aeabi_d2f+0xfc>
 8002ce0:	1c72      	adds	r2, r6, #1
 8002ce2:	2efe      	cmp	r6, #254	; 0xfe
 8002ce4:	d0d0      	beq.n	8002c88 <__aeabi_d2f+0x24>
 8002ce6:	0189      	lsls	r1, r1, #6
 8002ce8:	0a49      	lsrs	r1, r1, #9
 8002cea:	b2d3      	uxtb	r3, r2
 8002cec:	e7ce      	b.n	8002c8c <__aeabi_d2f+0x28>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	e7cb      	b.n	8002c8c <__aeabi_d2f+0x28>
 8002cf4:	0032      	movs	r2, r6
 8002cf6:	3217      	adds	r2, #23
 8002cf8:	db22      	blt.n	8002d40 <__aeabi_d2f+0xdc>
 8002cfa:	2180      	movs	r1, #128	; 0x80
 8002cfc:	221e      	movs	r2, #30
 8002cfe:	0409      	lsls	r1, r1, #16
 8002d00:	4308      	orrs	r0, r1
 8002d02:	1b92      	subs	r2, r2, r6
 8002d04:	2a1f      	cmp	r2, #31
 8002d06:	dd1d      	ble.n	8002d44 <__aeabi_d2f+0xe0>
 8002d08:	2102      	movs	r1, #2
 8002d0a:	4249      	negs	r1, r1
 8002d0c:	1b8e      	subs	r6, r1, r6
 8002d0e:	0001      	movs	r1, r0
 8002d10:	40f1      	lsrs	r1, r6
 8002d12:	000e      	movs	r6, r1
 8002d14:	2a20      	cmp	r2, #32
 8002d16:	d004      	beq.n	8002d22 <__aeabi_d2f+0xbe>
 8002d18:	4a14      	ldr	r2, [pc, #80]	; (8002d6c <__aeabi_d2f+0x108>)
 8002d1a:	4694      	mov	ip, r2
 8002d1c:	4463      	add	r3, ip
 8002d1e:	4098      	lsls	r0, r3
 8002d20:	4305      	orrs	r5, r0
 8002d22:	0029      	movs	r1, r5
 8002d24:	1e4d      	subs	r5, r1, #1
 8002d26:	41a9      	sbcs	r1, r5
 8002d28:	4331      	orrs	r1, r6
 8002d2a:	2600      	movs	r6, #0
 8002d2c:	074b      	lsls	r3, r1, #29
 8002d2e:	d1ce      	bne.n	8002cce <__aeabi_d2f+0x6a>
 8002d30:	2080      	movs	r0, #128	; 0x80
 8002d32:	000b      	movs	r3, r1
 8002d34:	04c0      	lsls	r0, r0, #19
 8002d36:	2201      	movs	r2, #1
 8002d38:	4003      	ands	r3, r0
 8002d3a:	4201      	tst	r1, r0
 8002d3c:	d1d3      	bne.n	8002ce6 <__aeabi_d2f+0x82>
 8002d3e:	e7af      	b.n	8002ca0 <__aeabi_d2f+0x3c>
 8002d40:	2300      	movs	r3, #0
 8002d42:	e7ac      	b.n	8002c9e <__aeabi_d2f+0x3a>
 8002d44:	490a      	ldr	r1, [pc, #40]	; (8002d70 <__aeabi_d2f+0x10c>)
 8002d46:	468c      	mov	ip, r1
 8002d48:	0029      	movs	r1, r5
 8002d4a:	4463      	add	r3, ip
 8002d4c:	40d1      	lsrs	r1, r2
 8002d4e:	409d      	lsls	r5, r3
 8002d50:	000a      	movs	r2, r1
 8002d52:	0029      	movs	r1, r5
 8002d54:	4098      	lsls	r0, r3
 8002d56:	1e4d      	subs	r5, r1, #1
 8002d58:	41a9      	sbcs	r1, r5
 8002d5a:	4301      	orrs	r1, r0
 8002d5c:	4311      	orrs	r1, r2
 8002d5e:	e7e4      	b.n	8002d2a <__aeabi_d2f+0xc6>
 8002d60:	0033      	movs	r3, r6
 8002d62:	e79d      	b.n	8002ca0 <__aeabi_d2f+0x3c>
 8002d64:	000007fe 	.word	0x000007fe
 8002d68:	fffffc80 	.word	0xfffffc80
 8002d6c:	fffffca2 	.word	0xfffffca2
 8002d70:	fffffc82 	.word	0xfffffc82

08002d74 <__clzsi2>:
 8002d74:	211c      	movs	r1, #28
 8002d76:	2301      	movs	r3, #1
 8002d78:	041b      	lsls	r3, r3, #16
 8002d7a:	4298      	cmp	r0, r3
 8002d7c:	d301      	bcc.n	8002d82 <__clzsi2+0xe>
 8002d7e:	0c00      	lsrs	r0, r0, #16
 8002d80:	3910      	subs	r1, #16
 8002d82:	0a1b      	lsrs	r3, r3, #8
 8002d84:	4298      	cmp	r0, r3
 8002d86:	d301      	bcc.n	8002d8c <__clzsi2+0x18>
 8002d88:	0a00      	lsrs	r0, r0, #8
 8002d8a:	3908      	subs	r1, #8
 8002d8c:	091b      	lsrs	r3, r3, #4
 8002d8e:	4298      	cmp	r0, r3
 8002d90:	d301      	bcc.n	8002d96 <__clzsi2+0x22>
 8002d92:	0900      	lsrs	r0, r0, #4
 8002d94:	3904      	subs	r1, #4
 8002d96:	a202      	add	r2, pc, #8	; (adr r2, 8002da0 <__clzsi2+0x2c>)
 8002d98:	5c10      	ldrb	r0, [r2, r0]
 8002d9a:	1840      	adds	r0, r0, r1
 8002d9c:	4770      	bx	lr
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	02020304 	.word	0x02020304
 8002da4:	01010101 	.word	0x01010101
	...

08002db0 <__clzdi2>:
 8002db0:	b510      	push	{r4, lr}
 8002db2:	2900      	cmp	r1, #0
 8002db4:	d103      	bne.n	8002dbe <__clzdi2+0xe>
 8002db6:	f7ff ffdd 	bl	8002d74 <__clzsi2>
 8002dba:	3020      	adds	r0, #32
 8002dbc:	e002      	b.n	8002dc4 <__clzdi2+0x14>
 8002dbe:	1c08      	adds	r0, r1, #0
 8002dc0:	f7ff ffd8 	bl	8002d74 <__clzsi2>
 8002dc4:	bd10      	pop	{r4, pc}
 8002dc6:	46c0      	nop			; (mov r8, r8)

08002dc8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dc8:	b510      	push	{r4, lr}
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002dca:	4a08      	ldr	r2, [pc, #32]	; (8002dec <HAL_Init+0x24>)
 8002dcc:	6813      	ldr	r3, [r2, #0]
 8002dce:	2140      	movs	r1, #64	; 0x40
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002dd4:	2003      	movs	r0, #3
 8002dd6:	f006 f92f 	bl	8009038 <HAL_InitTick>
 8002dda:	1e04      	subs	r4, r0, #0
 8002ddc:	d002      	beq.n	8002de4 <HAL_Init+0x1c>
  {
    status = HAL_ERROR;
 8002dde:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8002de0:	0020      	movs	r0, r4
 8002de2:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8002de4:	f005 fff0 	bl	8008dc8 <HAL_MspInit>
 8002de8:	e7fa      	b.n	8002de0 <HAL_Init+0x18>
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	40022000 	.word	0x40022000

08002df0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002df0:	4a03      	ldr	r2, [pc, #12]	; (8002e00 <HAL_IncTick+0x10>)
 8002df2:	6811      	ldr	r1, [r2, #0]
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <HAL_IncTick+0x14>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	185b      	adds	r3, r3, r1
 8002dfa:	6013      	str	r3, [r2, #0]
}
 8002dfc:	4770      	bx	lr
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	20002d20 	.word	0x20002d20
 8002e04:	20000000 	.word	0x20000000

08002e08 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002e08:	4b01      	ldr	r3, [pc, #4]	; (8002e10 <HAL_GetTick+0x8>)
 8002e0a:	6818      	ldr	r0, [r3, #0]
}
 8002e0c:	4770      	bx	lr
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	20002d20 	.word	0x20002d20

08002e14 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002e14:	b510      	push	{r4, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	0004      	movs	r4, r0
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002e1a:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <ADC_DelayMicroSecond+0x28>)
 8002e1c:	6818      	ldr	r0, [r3, #0]
 8002e1e:	4908      	ldr	r1, [pc, #32]	; (8002e40 <ADC_DelayMicroSecond+0x2c>)
 8002e20:	f7fd f98e 	bl	8000140 <__udivsi3>
 8002e24:	4344      	muls	r4, r0
 8002e26:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 8002e28:	9b01      	ldr	r3, [sp, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <ADC_DelayMicroSecond+0x22>
  {
    waitLoopIndex--;
 8002e2e:	9b01      	ldr	r3, [sp, #4]
 8002e30:	3b01      	subs	r3, #1
 8002e32:	9301      	str	r3, [sp, #4]
 8002e34:	e7f8      	b.n	8002e28 <ADC_DelayMicroSecond+0x14>
  } 
}
 8002e36:	b002      	add	sp, #8
 8002e38:	bd10      	pop	{r4, pc}
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	2000000c 	.word	0x2000000c
 8002e40:	000f4240 	.word	0x000f4240

08002e44 <ADC_Enable>:
{
 8002e44:	b570      	push	{r4, r5, r6, lr}
 8002e46:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e48:	6802      	ldr	r2, [r0, #0]
 8002e4a:	6891      	ldr	r1, [r2, #8]
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	400b      	ands	r3, r1
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d00d      	beq.n	8002e70 <ADC_Enable+0x2c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002e54:	6891      	ldr	r1, [r2, #8]
 8002e56:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <ADC_Enable+0x7c>)
 8002e58:	4219      	tst	r1, r3
 8002e5a:	d00e      	beq.n	8002e7a <ADC_Enable+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e5e:	2210      	movs	r2, #16
 8002e60:	4313      	orrs	r3, r2
 8002e62:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e66:	3a0f      	subs	r2, #15
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8002e6c:	2001      	movs	r0, #1
}
 8002e6e:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e70:	6813      	ldr	r3, [r2, #0]
 8002e72:	07db      	lsls	r3, r3, #31
 8002e74:	d5ee      	bpl.n	8002e54 <ADC_Enable+0x10>
  return HAL_OK;
 8002e76:	2000      	movs	r0, #0
 8002e78:	e7f9      	b.n	8002e6e <ADC_Enable+0x2a>
    __HAL_ADC_ENABLE(hadc);
 8002e7a:	6893      	ldr	r3, [r2, #8]
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	430b      	orrs	r3, r1
 8002e80:	6093      	str	r3, [r2, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002e82:	2001      	movs	r0, #1
 8002e84:	f7ff ffc6 	bl	8002e14 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 8002e88:	f7ff ffbe 	bl	8002e08 <HAL_GetTick>
 8002e8c:	0005      	movs	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e8e:	6823      	ldr	r3, [r4, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	07db      	lsls	r3, r3, #31
 8002e94:	d412      	bmi.n	8002ebc <ADC_Enable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e96:	f7ff ffb7 	bl	8002e08 <HAL_GetTick>
 8002e9a:	1b40      	subs	r0, r0, r5
 8002e9c:	280a      	cmp	r0, #10
 8002e9e:	d9f6      	bls.n	8002e8e <ADC_Enable+0x4a>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002ea0:	6823      	ldr	r3, [r4, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	07db      	lsls	r3, r3, #31
 8002ea6:	d4f2      	bmi.n	8002e8e <ADC_Enable+0x4a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002eaa:	2210      	movs	r2, #16
 8002eac:	4313      	orrs	r3, r2
 8002eae:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002eb2:	3a0f      	subs	r2, #15
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8002eb8:	2001      	movs	r0, #1
 8002eba:	e7d8      	b.n	8002e6e <ADC_Enable+0x2a>
  return HAL_OK;
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	e7d6      	b.n	8002e6e <ADC_Enable+0x2a>
 8002ec0:	80000017 	.word	0x80000017

08002ec4 <HAL_ADC_Init>:
{
 8002ec4:	b570      	push	{r4, r5, r6, lr}
 8002ec6:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8002ec8:	d100      	bne.n	8002ecc <HAL_ADC_Init+0x8>
 8002eca:	e0e2      	b.n	8003092 <HAL_ADC_Init+0x1ce>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ecc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d030      	beq.n	8002f34 <HAL_ADC_Init+0x70>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002ed2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ed4:	06db      	lsls	r3, r3, #27
 8002ed6:	d433      	bmi.n	8002f40 <HAL_ADC_Init+0x7c>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8002ed8:	6822      	ldr	r2, [r4, #0]
 8002eda:	6891      	ldr	r1, [r2, #8]
 8002edc:	2004      	movs	r0, #4
 8002ede:	0005      	movs	r5, r0
 8002ee0:	400d      	ands	r5, r1
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002ee2:	4208      	tst	r0, r1
 8002ee4:	d12c      	bne.n	8002f40 <HAL_ADC_Init+0x7c>
  ADC_STATE_CLR_SET(hadc->State,
 8002ee6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002ee8:	4b6b      	ldr	r3, [pc, #428]	; (8003098 <HAL_ADC_Init+0x1d4>)
 8002eea:	4019      	ands	r1, r3
 8002eec:	3306      	adds	r3, #6
 8002eee:	33ff      	adds	r3, #255	; 0xff
 8002ef0:	4319      	orrs	r1, r3
 8002ef2:	6561      	str	r1, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ef4:	6891      	ldr	r1, [r2, #8]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	400b      	ands	r3, r1
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d029      	beq.n	8002f52 <HAL_ADC_Init+0x8e>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002efe:	6863      	ldr	r3, [r4, #4]
 8002f00:	21c0      	movs	r1, #192	; 0xc0
 8002f02:	0609      	lsls	r1, r1, #24
 8002f04:	428b      	cmp	r3, r1
 8002f06:	d028      	beq.n	8002f5a <HAL_ADC_Init+0x96>
 8002f08:	2180      	movs	r1, #128	; 0x80
 8002f0a:	05c9      	lsls	r1, r1, #23
 8002f0c:	428b      	cmp	r3, r1
 8002f0e:	d024      	beq.n	8002f5a <HAL_ADC_Init+0x96>
 8002f10:	2180      	movs	r1, #128	; 0x80
 8002f12:	0609      	lsls	r1, r1, #24
 8002f14:	428b      	cmp	r3, r1
 8002f16:	d020      	beq.n	8002f5a <HAL_ADC_Init+0x96>
 8002f18:	6913      	ldr	r3, [r2, #16]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	089b      	lsrs	r3, r3, #2
 8002f1e:	6113      	str	r3, [r2, #16]
 8002f20:	4b5e      	ldr	r3, [pc, #376]	; (800309c <HAL_ADC_Init+0x1d8>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	495e      	ldr	r1, [pc, #376]	; (80030a0 <HAL_ADC_Init+0x1dc>)
 8002f26:	400a      	ands	r2, r1
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	6861      	ldr	r1, [r4, #4]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	e01b      	b.n	8002f6c <HAL_ADC_Init+0xa8>
    ADC_CLEAR_ERRORCODE(hadc);
 8002f34:	6583      	str	r3, [r0, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8002f36:	2250      	movs	r2, #80	; 0x50
 8002f38:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8002f3a:	f005 ff71 	bl	8008e20 <HAL_ADC_MspInit>
 8002f3e:	e7c8      	b.n	8002ed2 <HAL_ADC_Init+0xe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f40:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f42:	2210      	movs	r2, #16
 8002f44:	4313      	orrs	r3, r2
 8002f46:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8002f48:	2350      	movs	r3, #80	; 0x50
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 8002f4e:	2001      	movs	r0, #1
}
 8002f50:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f52:	6813      	ldr	r3, [r2, #0]
 8002f54:	07db      	lsls	r3, r3, #31
 8002f56:	d413      	bmi.n	8002f80 <HAL_ADC_Init+0xbc>
 8002f58:	e7d1      	b.n	8002efe <HAL_ADC_Init+0x3a>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002f5a:	6913      	ldr	r3, [r2, #16]
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	089b      	lsrs	r3, r3, #2
 8002f60:	6113      	str	r3, [r2, #16]
 8002f62:	6822      	ldr	r2, [r4, #0]
 8002f64:	6913      	ldr	r3, [r2, #16]
 8002f66:	6861      	ldr	r1, [r4, #4]
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8002f6c:	6822      	ldr	r2, [r4, #0]
 8002f6e:	68d3      	ldr	r3, [r2, #12]
 8002f70:	2118      	movs	r1, #24
 8002f72:	438b      	bics	r3, r1
 8002f74:	60d3      	str	r3, [r2, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8002f76:	6822      	ldr	r2, [r4, #0]
 8002f78:	68d3      	ldr	r3, [r2, #12]
 8002f7a:	68a1      	ldr	r1, [r4, #8]
 8002f7c:	430b      	orrs	r3, r1
 8002f7e:	60d3      	str	r3, [r2, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002f80:	4a46      	ldr	r2, [pc, #280]	; (800309c <HAL_ADC_Init+0x1d8>)
 8002f82:	6813      	ldr	r3, [r2, #0]
 8002f84:	4947      	ldr	r1, [pc, #284]	; (80030a4 <HAL_ADC_Init+0x1e0>)
 8002f86:	400b      	ands	r3, r1
 8002f88:	6013      	str	r3, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8002f8a:	6813      	ldr	r3, [r2, #0]
 8002f8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f8e:	0649      	lsls	r1, r1, #25
 8002f90:	430b      	orrs	r3, r1
 8002f92:	6013      	str	r3, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002f94:	6823      	ldr	r3, [r4, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	00d2      	lsls	r2, r2, #3
 8002f9a:	d404      	bmi.n	8002fa6 <HAL_ADC_Init+0xe2>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002f9c:	6899      	ldr	r1, [r3, #8]
 8002f9e:	2280      	movs	r2, #128	; 0x80
 8002fa0:	0552      	lsls	r2, r2, #21
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002fa6:	6823      	ldr	r3, [r4, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	493f      	ldr	r1, [pc, #252]	; (80030a8 <HAL_ADC_Init+0x1e4>)
 8002fac:	400a      	ands	r2, r1
 8002fae:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002fb0:	6820      	ldr	r0, [r4, #0]
 8002fb2:	68c2      	ldr	r2, [r0, #12]
 8002fb4:	68e3      	ldr	r3, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002fb6:	6921      	ldr	r1, [r4, #16]
 8002fb8:	2902      	cmp	r1, #2
 8002fba:	d02d      	beq.n	8003018 <HAL_ADC_Init+0x154>
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002fbc:	432b      	orrs	r3, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002fbe:	2120      	movs	r1, #32
 8002fc0:	5c61      	ldrb	r1, [r4, r1]
 8002fc2:	0349      	lsls	r1, r1, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002fc4:	430b      	orrs	r3, r1
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002fc6:	212c      	movs	r1, #44	; 0x2c
 8002fc8:	5c61      	ldrb	r1, [r4, r1]
 8002fca:	0049      	lsls	r1, r1, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002fcc:	430b      	orrs	r3, r1
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002fce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002fd0:	430b      	orrs	r3, r1
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002fd2:	69a1      	ldr	r1, [r4, #24]
 8002fd4:	0389      	lsls	r1, r1, #14
                            hadc->Init.Overrun                               |
 8002fd6:	430b      	orrs	r3, r1
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002fd8:	69e1      	ldr	r1, [r4, #28]
 8002fda:	03c9      	lsls	r1, r1, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002fdc:	430b      	orrs	r3, r1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60c3      	str	r3, [r0, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fe4:	22c2      	movs	r2, #194	; 0xc2
 8002fe6:	32ff      	adds	r2, #255	; 0xff
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d005      	beq.n	8002ff8 <HAL_ADC_Init+0x134>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002fec:	6821      	ldr	r1, [r4, #0]
 8002fee:	68ca      	ldr	r2, [r1, #12]
 8002ff0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002ff2:	4303      	orrs	r3, r0
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	60cb      	str	r3, [r1, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ff8:	2321      	movs	r3, #33	; 0x21
 8002ffa:	5ce3      	ldrb	r3, [r4, r3]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d00d      	beq.n	800301c <HAL_ADC_Init+0x158>
  if (hadc->Init.OversamplingMode == ENABLE)
 8003000:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003002:	2b01      	cmp	r3, #1
 8003004:	d01e      	beq.n	8003044 <HAL_ADC_Init+0x180>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003006:	6823      	ldr	r3, [r4, #0]
 8003008:	691a      	ldr	r2, [r3, #16]
 800300a:	07d2      	lsls	r2, r2, #31
 800300c:	d52d      	bpl.n	800306a <HAL_ADC_Init+0x1a6>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	2101      	movs	r1, #1
 8003012:	438a      	bics	r2, r1
 8003014:	611a      	str	r2, [r3, #16]
 8003016:	e028      	b.n	800306a <HAL_ADC_Init+0x1a6>
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003018:	2504      	movs	r5, #4
 800301a:	e7cf      	b.n	8002fbc <HAL_ADC_Init+0xf8>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800301c:	331f      	adds	r3, #31
 800301e:	5ce3      	ldrb	r3, [r4, r3]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d106      	bne.n	8003032 <HAL_ADC_Init+0x16e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003024:	6822      	ldr	r2, [r4, #0]
 8003026:	68d1      	ldr	r1, [r2, #12]
 8003028:	2380      	movs	r3, #128	; 0x80
 800302a:	025b      	lsls	r3, r3, #9
 800302c:	430b      	orrs	r3, r1
 800302e:	60d3      	str	r3, [r2, #12]
 8003030:	e7e6      	b.n	8003000 <HAL_ADC_Init+0x13c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003032:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003034:	2220      	movs	r2, #32
 8003036:	4313      	orrs	r3, r2
 8003038:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800303a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800303c:	3a1f      	subs	r2, #31
 800303e:	4313      	orrs	r3, r2
 8003040:	65a3      	str	r3, [r4, #88]	; 0x58
 8003042:	e7dd      	b.n	8003000 <HAL_ADC_Init+0x13c>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003044:	6822      	ldr	r2, [r4, #0]
 8003046:	6913      	ldr	r3, [r2, #16]
 8003048:	4918      	ldr	r1, [pc, #96]	; (80030ac <HAL_ADC_Init+0x1e8>)
 800304a:	400b      	ands	r3, r1
 800304c:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800304e:	6821      	ldr	r1, [r4, #0]
 8003050:	690a      	ldr	r2, [r1, #16]
 8003052:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003054:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003056:	4303      	orrs	r3, r0
                               hadc->Init.Oversample.RightBitShift             |
 8003058:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800305a:	4303      	orrs	r3, r0
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800305c:	4313      	orrs	r3, r2
 800305e:	610b      	str	r3, [r1, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003060:	6822      	ldr	r2, [r4, #0]
 8003062:	6913      	ldr	r3, [r2, #16]
 8003064:	2101      	movs	r1, #1
 8003066:	430b      	orrs	r3, r1
 8003068:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800306a:	6822      	ldr	r2, [r4, #0]
 800306c:	6953      	ldr	r3, [r2, #20]
 800306e:	2107      	movs	r1, #7
 8003070:	438b      	bics	r3, r1
 8003072:	6153      	str	r3, [r2, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003074:	6822      	ldr	r2, [r4, #0]
 8003076:	6953      	ldr	r3, [r2, #20]
 8003078:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800307a:	430b      	orrs	r3, r1
 800307c:	6153      	str	r3, [r2, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 800307e:	2300      	movs	r3, #0
 8003080:	65a3      	str	r3, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8003082:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003084:	2203      	movs	r2, #3
 8003086:	4393      	bics	r3, r2
 8003088:	3a02      	subs	r2, #2
 800308a:	4313      	orrs	r3, r2
 800308c:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 800308e:	2000      	movs	r0, #0
 8003090:	e75e      	b.n	8002f50 <HAL_ADC_Init+0x8c>
    return HAL_ERROR;
 8003092:	2001      	movs	r0, #1
 8003094:	e75c      	b.n	8002f50 <HAL_ADC_Init+0x8c>
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	fffffefd 	.word	0xfffffefd
 800309c:	40012708 	.word	0x40012708
 80030a0:	ffc3ffff 	.word	0xffc3ffff
 80030a4:	fdffffff 	.word	0xfdffffff
 80030a8:	fffe0219 	.word	0xfffe0219
 80030ac:	fffffc03 	.word	0xfffffc03

080030b0 <HAL_ADC_Start_DMA>:
{
 80030b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b2:	0004      	movs	r4, r0
 80030b4:	000d      	movs	r5, r1
 80030b6:	0016      	movs	r6, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80030b8:	6803      	ldr	r3, [r0, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	0752      	lsls	r2, r2, #29
 80030be:	d43c      	bmi.n	800313a <HAL_ADC_Start_DMA+0x8a>
    __HAL_LOCK(hadc);
 80030c0:	2250      	movs	r2, #80	; 0x50
 80030c2:	5c82      	ldrb	r2, [r0, r2]
 80030c4:	2a01      	cmp	r2, #1
 80030c6:	d03a      	beq.n	800313e <HAL_ADC_Start_DMA+0x8e>
 80030c8:	2101      	movs	r1, #1
 80030ca:	2250      	movs	r2, #80	; 0x50
 80030cc:	5481      	strb	r1, [r0, r2]
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	60da      	str	r2, [r3, #12]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80030d4:	69c3      	ldr	r3, [r0, #28]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d004      	beq.n	80030e4 <HAL_ADC_Start_DMA+0x34>
      tmp_hal_status = ADC_Enable(hadc);
 80030da:	f7ff feb3 	bl	8002e44 <ADC_Enable>
 80030de:	1e07      	subs	r7, r0, #0
    if (tmp_hal_status == HAL_OK)
 80030e0:	d129      	bne.n	8003136 <HAL_ADC_Start_DMA+0x86>
 80030e2:	e000      	b.n	80030e6 <HAL_ADC_Start_DMA+0x36>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030e4:	2700      	movs	r7, #0
      ADC_STATE_CLR_SET(hadc->State,
 80030e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80030e8:	4a16      	ldr	r2, [pc, #88]	; (8003144 <HAL_ADC_Start_DMA+0x94>)
 80030ea:	401a      	ands	r2, r3
 80030ec:	2380      	movs	r3, #128	; 0x80
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4313      	orrs	r3, r2
 80030f2:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 80030f4:	2300      	movs	r3, #0
 80030f6:	65a3      	str	r3, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 80030f8:	2250      	movs	r2, #80	; 0x50
 80030fa:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030fc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80030fe:	4a12      	ldr	r2, [pc, #72]	; (8003148 <HAL_ADC_Start_DMA+0x98>)
 8003100:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003102:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003104:	4a11      	ldr	r2, [pc, #68]	; (800314c <HAL_ADC_Start_DMA+0x9c>)
 8003106:	631a      	str	r2, [r3, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003108:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800310a:	4a11      	ldr	r2, [pc, #68]	; (8003150 <HAL_ADC_Start_DMA+0xa0>)
 800310c:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800310e:	6823      	ldr	r3, [r4, #0]
 8003110:	221c      	movs	r2, #28
 8003112:	601a      	str	r2, [r3, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003114:	6822      	ldr	r2, [r4, #0]
 8003116:	6853      	ldr	r3, [r2, #4]
 8003118:	2110      	movs	r1, #16
 800311a:	430b      	orrs	r3, r1
 800311c:	6053      	str	r3, [r2, #4]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800311e:	6821      	ldr	r1, [r4, #0]
 8003120:	3140      	adds	r1, #64	; 0x40
 8003122:	0033      	movs	r3, r6
 8003124:	002a      	movs	r2, r5
 8003126:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003128:	f000 fac6 	bl	80036b8 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800312c:	6822      	ldr	r2, [r4, #0]
 800312e:	6893      	ldr	r3, [r2, #8]
 8003130:	2104      	movs	r1, #4
 8003132:	430b      	orrs	r3, r1
 8003134:	6093      	str	r3, [r2, #8]
}
 8003136:	0038      	movs	r0, r7
 8003138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_hal_status = HAL_BUSY;
 800313a:	2702      	movs	r7, #2
 800313c:	e7fb      	b.n	8003136 <HAL_ADC_Start_DMA+0x86>
    __HAL_LOCK(hadc);
 800313e:	2702      	movs	r7, #2
 8003140:	e7f9      	b.n	8003136 <HAL_ADC_Start_DMA+0x86>
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	fffff0fe 	.word	0xfffff0fe
 8003148:	08003159 	.word	0x08003159
 800314c:	080031cf 	.word	0x080031cf
 8003150:	080031dd 	.word	0x080031dd

08003154 <HAL_ADC_ConvCpltCallback>:
}
 8003154:	4770      	bx	lr
	...

08003158 <ADC_DMAConvCplt>:
{
 8003158:	b510      	push	{r4, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800315a:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800315c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800315e:	2150      	movs	r1, #80	; 0x50
 8003160:	4211      	tst	r1, r2
 8003162:	d12c      	bne.n	80031be <ADC_DMAConvCplt+0x66>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003164:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003166:	2280      	movs	r2, #128	; 0x80
 8003168:	0092      	lsls	r2, r2, #2
 800316a:	430a      	orrs	r2, r1
 800316c:	655a      	str	r2, [r3, #84]	; 0x54
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68d0      	ldr	r0, [r2, #12]
 8003172:	21c0      	movs	r1, #192	; 0xc0
 8003174:	0109      	lsls	r1, r1, #4
 8003176:	4208      	tst	r0, r1
 8003178:	d114      	bne.n	80031a4 <ADC_DMAConvCplt+0x4c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800317a:	2120      	movs	r1, #32
 800317c:	5c59      	ldrb	r1, [r3, r1]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800317e:	2900      	cmp	r1, #0
 8003180:	d110      	bne.n	80031a4 <ADC_DMAConvCplt+0x4c>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003182:	6811      	ldr	r1, [r2, #0]
 8003184:	0709      	lsls	r1, r1, #28
 8003186:	d50d      	bpl.n	80031a4 <ADC_DMAConvCplt+0x4c>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003188:	6891      	ldr	r1, [r2, #8]
 800318a:	0749      	lsls	r1, r1, #29
 800318c:	d40e      	bmi.n	80031ac <ADC_DMAConvCplt+0x54>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800318e:	6851      	ldr	r1, [r2, #4]
 8003190:	200c      	movs	r0, #12
 8003192:	4381      	bics	r1, r0
 8003194:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8003196:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003198:	490b      	ldr	r1, [pc, #44]	; (80031c8 <ADC_DMAConvCplt+0x70>)
 800319a:	400a      	ands	r2, r1
 800319c:	3104      	adds	r1, #4
 800319e:	31ff      	adds	r1, #255	; 0xff
 80031a0:	430a      	orrs	r2, r1
 80031a2:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80031a4:	0018      	movs	r0, r3
 80031a6:	f7ff ffd5 	bl	8003154 <HAL_ADC_ConvCpltCallback>
}
 80031aa:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031ae:	2120      	movs	r1, #32
 80031b0:	430a      	orrs	r2, r1
 80031b2:	655a      	str	r2, [r3, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80031b6:	391f      	subs	r1, #31
 80031b8:	430a      	orrs	r2, r1
 80031ba:	659a      	str	r2, [r3, #88]	; 0x58
 80031bc:	e7f2      	b.n	80031a4 <ADC_DMAConvCplt+0x4c>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80031be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c2:	4798      	blx	r3
}
 80031c4:	e7f1      	b.n	80031aa <ADC_DMAConvCplt+0x52>
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	fffffefe 	.word	0xfffffefe

080031cc <HAL_ADC_ConvHalfCpltCallback>:
}
 80031cc:	4770      	bx	lr

080031ce <ADC_DMAHalfConvCplt>:
{
 80031ce:	b510      	push	{r4, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031d0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80031d2:	f7ff fffb 	bl	80031cc <HAL_ADC_ConvHalfCpltCallback>
}
 80031d6:	bd10      	pop	{r4, pc}

080031d8 <HAL_ADC_LevelOutOfWindowCallback>:
}
 80031d8:	4770      	bx	lr

080031da <HAL_ADC_ErrorCallback>:
}
 80031da:	4770      	bx	lr

080031dc <ADC_DMAError>:
{
 80031dc:	b510      	push	{r4, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031de:	6a80      	ldr	r0, [r0, #40]	; 0x28
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031e0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80031e2:	2240      	movs	r2, #64	; 0x40
 80031e4:	4313      	orrs	r3, r2
 80031e6:	6543      	str	r3, [r0, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80031e8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80031ea:	3a3c      	subs	r2, #60	; 0x3c
 80031ec:	4313      	orrs	r3, r2
 80031ee:	6583      	str	r3, [r0, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc); 
 80031f0:	f7ff fff3 	bl	80031da <HAL_ADC_ErrorCallback>
}
 80031f4:	bd10      	pop	{r4, pc}
	...

080031f8 <HAL_ADC_IRQHandler>:
{
 80031f8:	b510      	push	{r4, lr}
 80031fa:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80031fc:	6803      	ldr	r3, [r0, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	0752      	lsls	r2, r2, #29
 8003202:	d502      	bpl.n	800320a <HAL_ADC_IRQHandler+0x12>
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	0752      	lsls	r2, r2, #29
 8003208:	d405      	bmi.n	8003216 <HAL_ADC_IRQHandler+0x1e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800320a:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800320c:	0712      	lsls	r2, r2, #28
 800320e:	d52d      	bpl.n	800326c <HAL_ADC_IRQHandler+0x74>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	0712      	lsls	r2, r2, #28
 8003214:	d52a      	bpl.n	800326c <HAL_ADC_IRQHandler+0x74>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003216:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003218:	06d2      	lsls	r2, r2, #27
 800321a:	d404      	bmi.n	8003226 <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800321c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800321e:	2280      	movs	r2, #128	; 0x80
 8003220:	0092      	lsls	r2, r2, #2
 8003222:	430a      	orrs	r2, r1
 8003224:	6562      	str	r2, [r4, #84]	; 0x54
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003226:	68d9      	ldr	r1, [r3, #12]
 8003228:	22c0      	movs	r2, #192	; 0xc0
 800322a:	0112      	lsls	r2, r2, #4
 800322c:	4211      	tst	r1, r2
 800322e:	d114      	bne.n	800325a <HAL_ADC_IRQHandler+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003230:	2220      	movs	r2, #32
 8003232:	5ca2      	ldrb	r2, [r4, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003234:	2a00      	cmp	r2, #0
 8003236:	d110      	bne.n	800325a <HAL_ADC_IRQHandler+0x62>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	0712      	lsls	r2, r2, #28
 800323c:	d50d      	bpl.n	800325a <HAL_ADC_IRQHandler+0x62>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	0752      	lsls	r2, r2, #29
 8003242:	d434      	bmi.n	80032ae <HAL_ADC_IRQHandler+0xb6>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	210c      	movs	r1, #12
 8003248:	438a      	bics	r2, r1
 800324a:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800324c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800324e:	4a22      	ldr	r2, [pc, #136]	; (80032d8 <HAL_ADC_IRQHandler+0xe0>)
 8003250:	4013      	ands	r3, r2
 8003252:	3204      	adds	r2, #4
 8003254:	32ff      	adds	r2, #255	; 0xff
 8003256:	4313      	orrs	r3, r2
 8003258:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 800325a:	0020      	movs	r0, r4
 800325c:	f7ff ff7a 	bl	8003154 <HAL_ADC_ConvCpltCallback>
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8003260:	69a3      	ldr	r3, [r4, #24]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d002      	beq.n	800326c <HAL_ADC_IRQHandler+0x74>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003266:	6823      	ldr	r3, [r4, #0]
 8003268:	220c      	movs	r2, #12
 800326a:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800326c:	6823      	ldr	r3, [r4, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	0612      	lsls	r2, r2, #24
 8003272:	d502      	bpl.n	800327a <HAL_ADC_IRQHandler+0x82>
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	061b      	lsls	r3, r3, #24
 8003278:	d422      	bmi.n	80032c0 <HAL_ADC_IRQHandler+0xc8>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800327a:	6823      	ldr	r3, [r4, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	06d2      	lsls	r2, r2, #27
 8003280:	d514      	bpl.n	80032ac <HAL_ADC_IRQHandler+0xb4>
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	06d2      	lsls	r2, r2, #27
 8003286:	d511      	bpl.n	80032ac <HAL_ADC_IRQHandler+0xb4>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003288:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800328a:	2a00      	cmp	r2, #0
 800328c:	d002      	beq.n	8003294 <HAL_ADC_IRQHandler+0x9c>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800328e:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003290:	07d2      	lsls	r2, r2, #31
 8003292:	d508      	bpl.n	80032a6 <HAL_ADC_IRQHandler+0xae>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003294:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003296:	2102      	movs	r1, #2
 8003298:	430a      	orrs	r2, r1
 800329a:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800329c:	2210      	movs	r2, #16
 800329e:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 80032a0:	0020      	movs	r0, r4
 80032a2:	f7ff ff9a 	bl	80031da <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80032a6:	6823      	ldr	r3, [r4, #0]
 80032a8:	2210      	movs	r2, #16
 80032aa:	601a      	str	r2, [r3, #0]
}
 80032ac:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80032b0:	2220      	movs	r2, #32
 80032b2:	4313      	orrs	r3, r2
 80032b4:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80032b8:	3a1f      	subs	r2, #31
 80032ba:	4313      	orrs	r3, r2
 80032bc:	65a3      	str	r3, [r4, #88]	; 0x58
 80032be:	e7cc      	b.n	800325a <HAL_ADC_IRQHandler+0x62>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80032c0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80032c2:	2380      	movs	r3, #128	; 0x80
 80032c4:	025b      	lsls	r3, r3, #9
 80032c6:	4313      	orrs	r3, r2
 80032c8:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80032ca:	0020      	movs	r0, r4
 80032cc:	f7ff ff84 	bl	80031d8 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80032d0:	6823      	ldr	r3, [r4, #0]
 80032d2:	2280      	movs	r2, #128	; 0x80
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	e7d0      	b.n	800327a <HAL_ADC_IRQHandler+0x82>
 80032d8:	fffffefe 	.word	0xfffffefe

080032dc <HAL_ADC_ConfigChannel>:
{
 80032dc:	b570      	push	{r4, r5, r6, lr}
 80032de:	0004      	movs	r4, r0
 80032e0:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 80032e2:	2350      	movs	r3, #80	; 0x50
 80032e4:	5cc3      	ldrb	r3, [r0, r3]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d04b      	beq.n	8003382 <HAL_ADC_ConfigChannel+0xa6>
 80032ea:	2350      	movs	r3, #80	; 0x50
 80032ec:	2201      	movs	r2, #1
 80032ee:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80032f0:	6803      	ldr	r3, [r0, #0]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	0752      	lsls	r2, r2, #29
 80032f6:	d41a      	bmi.n	800332e <HAL_ADC_ConfigChannel+0x52>
  if (sConfig->Rank != ADC_RANK_NONE)
 80032f8:	4a23      	ldr	r2, [pc, #140]	; (8003388 <HAL_ADC_ConfigChannel+0xac>)
 80032fa:	6849      	ldr	r1, [r1, #4]
 80032fc:	4291      	cmp	r1, r2
 80032fe:	d029      	beq.n	8003354 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003300:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003302:	682a      	ldr	r2, [r5, #0]
 8003304:	0352      	lsls	r2, r2, #13
 8003306:	0b52      	lsrs	r2, r2, #13
 8003308:	430a      	orrs	r2, r1
 800330a:	629a      	str	r2, [r3, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800330c:	682b      	ldr	r3, [r5, #0]
 800330e:	035b      	lsls	r3, r3, #13
 8003310:	d416      	bmi.n	8003340 <HAL_ADC_ConfigChannel+0x64>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003312:	682b      	ldr	r3, [r5, #0]
 8003314:	039b      	lsls	r3, r3, #14
 8003316:	d505      	bpl.n	8003324 <HAL_ADC_ConfigChannel+0x48>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8003318:	4a1c      	ldr	r2, [pc, #112]	; (800338c <HAL_ADC_ConfigChannel+0xb0>)
 800331a:	6811      	ldr	r1, [r2, #0]
 800331c:	2380      	movs	r3, #128	; 0x80
 800331e:	03db      	lsls	r3, r3, #15
 8003320:	430b      	orrs	r3, r1
 8003322:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8003324:	2350      	movs	r3, #80	; 0x50
 8003326:	2200      	movs	r2, #0
 8003328:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800332a:	2000      	movs	r0, #0
}
 800332c:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800332e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003330:	2220      	movs	r2, #32
 8003332:	4313      	orrs	r3, r2
 8003334:	6543      	str	r3, [r0, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8003336:	2350      	movs	r3, #80	; 0x50
 8003338:	2200      	movs	r2, #0
 800333a:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 800333c:	2001      	movs	r0, #1
 800333e:	e7f5      	b.n	800332c <HAL_ADC_ConfigChannel+0x50>
      ADC->CCR |= ADC_CCR_TSEN;   
 8003340:	4a12      	ldr	r2, [pc, #72]	; (800338c <HAL_ADC_ConfigChannel+0xb0>)
 8003342:	6811      	ldr	r1, [r2, #0]
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	041b      	lsls	r3, r3, #16
 8003348:	430b      	orrs	r3, r1
 800334a:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800334c:	200a      	movs	r0, #10
 800334e:	f7ff fd61 	bl	8002e14 <ADC_DelayMicroSecond>
 8003352:	e7de      	b.n	8003312 <HAL_ADC_ConfigChannel+0x36>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003354:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003356:	682a      	ldr	r2, [r5, #0]
 8003358:	0352      	lsls	r2, r2, #13
 800335a:	0b52      	lsrs	r2, r2, #13
 800335c:	4391      	bics	r1, r2
 800335e:	6299      	str	r1, [r3, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003360:	682b      	ldr	r3, [r5, #0]
 8003362:	035b      	lsls	r3, r3, #13
 8003364:	d504      	bpl.n	8003370 <HAL_ADC_ConfigChannel+0x94>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8003366:	4a09      	ldr	r2, [pc, #36]	; (800338c <HAL_ADC_ConfigChannel+0xb0>)
 8003368:	6813      	ldr	r3, [r2, #0]
 800336a:	4909      	ldr	r1, [pc, #36]	; (8003390 <HAL_ADC_ConfigChannel+0xb4>)
 800336c:	400b      	ands	r3, r1
 800336e:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003370:	682b      	ldr	r3, [r5, #0]
 8003372:	039b      	lsls	r3, r3, #14
 8003374:	d5d6      	bpl.n	8003324 <HAL_ADC_ConfigChannel+0x48>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003376:	4a05      	ldr	r2, [pc, #20]	; (800338c <HAL_ADC_ConfigChannel+0xb0>)
 8003378:	6813      	ldr	r3, [r2, #0]
 800337a:	4906      	ldr	r1, [pc, #24]	; (8003394 <HAL_ADC_ConfigChannel+0xb8>)
 800337c:	400b      	ands	r3, r1
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	e7d0      	b.n	8003324 <HAL_ADC_ConfigChannel+0x48>
  __HAL_LOCK(hadc);
 8003382:	2002      	movs	r0, #2
 8003384:	e7d2      	b.n	800332c <HAL_ADC_ConfigChannel+0x50>
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	00001001 	.word	0x00001001
 800338c:	40012708 	.word	0x40012708
 8003390:	ff7fffff 	.word	0xff7fffff
 8003394:	ffbfffff 	.word	0xffbfffff

08003398 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003398:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800339a:	2800      	cmp	r0, #0
 800339c:	db11      	blt.n	80033c2 <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800339e:	0883      	lsrs	r3, r0, #2
 80033a0:	4e13      	ldr	r6, [pc, #76]	; (80033f0 <HAL_NVIC_SetPriority+0x58>)
 80033a2:	33c0      	adds	r3, #192	; 0xc0
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	599d      	ldr	r5, [r3, r6]
 80033a8:	2403      	movs	r4, #3
 80033aa:	4020      	ands	r0, r4
 80033ac:	00c0      	lsls	r0, r0, #3
 80033ae:	22ff      	movs	r2, #255	; 0xff
 80033b0:	0014      	movs	r4, r2
 80033b2:	4084      	lsls	r4, r0
 80033b4:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033b6:	0189      	lsls	r1, r1, #6
 80033b8:	400a      	ands	r2, r1
 80033ba:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033bc:	432a      	orrs	r2, r5
 80033be:	519a      	str	r2, [r3, r6]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80033c0:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033c2:	230f      	movs	r3, #15
 80033c4:	4003      	ands	r3, r0
 80033c6:	3b08      	subs	r3, #8
 80033c8:	089b      	lsrs	r3, r3, #2
 80033ca:	3306      	adds	r3, #6
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4a09      	ldr	r2, [pc, #36]	; (80033f4 <HAL_NVIC_SetPriority+0x5c>)
 80033d0:	4694      	mov	ip, r2
 80033d2:	4463      	add	r3, ip
 80033d4:	685c      	ldr	r4, [r3, #4]
 80033d6:	2203      	movs	r2, #3
 80033d8:	4010      	ands	r0, r2
 80033da:	00c0      	lsls	r0, r0, #3
 80033dc:	32fc      	adds	r2, #252	; 0xfc
 80033de:	0015      	movs	r5, r2
 80033e0:	4085      	lsls	r5, r0
 80033e2:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033e4:	0189      	lsls	r1, r1, #6
 80033e6:	400a      	ands	r2, r1
 80033e8:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033ea:	4322      	orrs	r2, r4
 80033ec:	605a      	str	r2, [r3, #4]
 80033ee:	e7e7      	b.n	80033c0 <HAL_NVIC_SetPriority+0x28>
 80033f0:	e000e100 	.word	0xe000e100
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80033f8:	2800      	cmp	r0, #0
 80033fa:	db05      	blt.n	8003408 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033fc:	231f      	movs	r3, #31
 80033fe:	4018      	ands	r0, r3
 8003400:	3b1e      	subs	r3, #30
 8003402:	4083      	lsls	r3, r0
 8003404:	4a01      	ldr	r2, [pc, #4]	; (800340c <HAL_NVIC_EnableIRQ+0x14>)
 8003406:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003408:	4770      	bx	lr
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	e000e100 	.word	0xe000e100

08003410 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8003410:	b570      	push	{r4, r5, r6, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003412:	2500      	movs	r5, #0
 8003414:	0893      	lsrs	r3, r2, #2
 8003416:	42ab      	cmp	r3, r5
 8003418:	d90f      	bls.n	800343a <CRC_Handle_8+0x2a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800341a:	00ac      	lsls	r4, r5, #2
 800341c:	5d0b      	ldrb	r3, [r1, r4]
 800341e:	061b      	lsls	r3, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003420:	190c      	adds	r4, r1, r4
 8003422:	7866      	ldrb	r6, [r4, #1]
 8003424:	0436      	lsls	r6, r6, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003426:	4333      	orrs	r3, r6
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003428:	78a6      	ldrb	r6, [r4, #2]
 800342a:	0236      	lsls	r6, r6, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800342c:	4333      	orrs	r3, r6
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800342e:	78e6      	ldrb	r6, [r4, #3]
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003430:	6804      	ldr	r4, [r0, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003432:	4333      	orrs	r3, r6
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003434:	6023      	str	r3, [r4, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003436:	3501      	adds	r5, #1
 8003438:	e7ec      	b.n	8003414 <CRC_Handle_8+0x4>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800343a:	2303      	movs	r3, #3
 800343c:	001c      	movs	r4, r3
 800343e:	4014      	ands	r4, r2
 8003440:	4213      	tst	r3, r2
 8003442:	d005      	beq.n	8003450 <CRC_Handle_8+0x40>
  {
    if ((BufferLength % 4U) == 1U)
 8003444:	2c01      	cmp	r4, #1
 8003446:	d006      	beq.n	8003456 <CRC_Handle_8+0x46>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
    }
    if ((BufferLength % 4U) == 2U)
 8003448:	2c02      	cmp	r4, #2
 800344a:	d009      	beq.n	8003460 <CRC_Handle_8+0x50>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
      *pReg = data;
    }
    if ((BufferLength % 4U) == 3U)
 800344c:	2c03      	cmp	r4, #3
 800344e:	d010      	beq.n	8003472 <CRC_Handle_8+0x62>
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003450:	6803      	ldr	r3, [r0, #0]
 8003452:	6818      	ldr	r0, [r3, #0]
}
 8003454:	bd70      	pop	{r4, r5, r6, pc}
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8003456:	00ab      	lsls	r3, r5, #2
 8003458:	5ccb      	ldrb	r3, [r1, r3]
 800345a:	6802      	ldr	r2, [r0, #0]
 800345c:	7013      	strb	r3, [r2, #0]
 800345e:	e7f3      	b.n	8003448 <CRC_Handle_8+0x38>
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003460:	00ab      	lsls	r3, r5, #2
 8003462:	5cca      	ldrb	r2, [r1, r3]
 8003464:	0212      	lsls	r2, r2, #8
 8003466:	18cb      	adds	r3, r1, r3
 8003468:	785b      	ldrb	r3, [r3, #1]
 800346a:	4313      	orrs	r3, r2
      *pReg = data;
 800346c:	6802      	ldr	r2, [r0, #0]
 800346e:	8013      	strh	r3, [r2, #0]
 8003470:	e7ec      	b.n	800344c <CRC_Handle_8+0x3c>
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003472:	00ad      	lsls	r5, r5, #2
 8003474:	5d4a      	ldrb	r2, [r1, r5]
 8003476:	0212      	lsls	r2, r2, #8
 8003478:	194d      	adds	r5, r1, r5
 800347a:	786b      	ldrb	r3, [r5, #1]
 800347c:	4313      	orrs	r3, r2
      *pReg = data;
 800347e:	6802      	ldr	r2, [r0, #0]
 8003480:	8013      	strh	r3, [r2, #0]
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003482:	78ab      	ldrb	r3, [r5, #2]
 8003484:	6802      	ldr	r2, [r0, #0]
 8003486:	7013      	strb	r3, [r2, #0]
 8003488:	e7e2      	b.n	8003450 <CRC_Handle_8+0x40>

0800348a <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800348a:	b570      	push	{r4, r5, r6, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800348c:	2500      	movs	r5, #0
 800348e:	0853      	lsrs	r3, r2, #1
 8003490:	42ab      	cmp	r3, r5
 8003492:	d909      	bls.n	80034a8 <CRC_Handle_16+0x1e>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8003494:	00ac      	lsls	r4, r5, #2
 8003496:	5b0b      	ldrh	r3, [r1, r4]
 8003498:	041b      	lsls	r3, r3, #16
 800349a:	190c      	adds	r4, r1, r4
 800349c:	8866      	ldrh	r6, [r4, #2]
 800349e:	6804      	ldr	r4, [r0, #0]
 80034a0:	4333      	orrs	r3, r6
 80034a2:	6023      	str	r3, [r4, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80034a4:	3501      	adds	r5, #1
 80034a6:	e7f2      	b.n	800348e <CRC_Handle_16+0x4>
  }
  if ((BufferLength % 2U) != 0U)
 80034a8:	07d3      	lsls	r3, r2, #31
 80034aa:	d503      	bpl.n	80034b4 <CRC_Handle_16+0x2a>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
    *pReg = pBuffer[2U * i];
 80034ac:	00ad      	lsls	r5, r5, #2
 80034ae:	5a6b      	ldrh	r3, [r5, r1]
 80034b0:	6802      	ldr	r2, [r0, #0]
 80034b2:	8013      	strh	r3, [r2, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80034b4:	6803      	ldr	r3, [r0, #0]
 80034b6:	6818      	ldr	r0, [r3, #0]
}
 80034b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080034bc <HAL_CRC_Init>:
{
 80034bc:	b510      	push	{r4, lr}
 80034be:	1e04      	subs	r4, r0, #0
  if (hcrc == NULL)
 80034c0:	d039      	beq.n	8003536 <HAL_CRC_Init+0x7a>
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80034c2:	7f43      	ldrb	r3, [r0, #29]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d025      	beq.n	8003514 <HAL_CRC_Init+0x58>
  hcrc->State = HAL_CRC_STATE_BUSY;
 80034c8:	2302      	movs	r3, #2
 80034ca:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80034cc:	7923      	ldrb	r3, [r4, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d124      	bne.n	800351c <HAL_CRC_Init+0x60>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	4a19      	ldr	r2, [pc, #100]	; (800353c <HAL_CRC_Init+0x80>)
 80034d6:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80034d8:	6822      	ldr	r2, [r4, #0]
 80034da:	6893      	ldr	r3, [r2, #8]
 80034dc:	2118      	movs	r1, #24
 80034de:	438b      	bics	r3, r1
 80034e0:	6093      	str	r3, [r2, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80034e2:	7963      	ldrb	r3, [r4, #5]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d122      	bne.n	800352e <HAL_CRC_Init+0x72>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	2201      	movs	r2, #1
 80034ec:	4252      	negs	r2, r2
 80034ee:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80034f0:	6822      	ldr	r2, [r4, #0]
 80034f2:	6893      	ldr	r3, [r2, #8]
 80034f4:	2160      	movs	r1, #96	; 0x60
 80034f6:	438b      	bics	r3, r1
 80034f8:	6961      	ldr	r1, [r4, #20]
 80034fa:	430b      	orrs	r3, r1
 80034fc:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80034fe:	6822      	ldr	r2, [r4, #0]
 8003500:	6893      	ldr	r3, [r2, #8]
 8003502:	2180      	movs	r1, #128	; 0x80
 8003504:	438b      	bics	r3, r1
 8003506:	69a1      	ldr	r1, [r4, #24]
 8003508:	430b      	orrs	r3, r1
 800350a:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800350c:	2301      	movs	r3, #1
 800350e:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8003510:	2000      	movs	r0, #0
}
 8003512:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8003514:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8003516:	f005 fcd7 	bl	8008ec8 <HAL_CRC_MspInit>
 800351a:	e7d5      	b.n	80034c8 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800351c:	68e2      	ldr	r2, [r4, #12]
 800351e:	68a1      	ldr	r1, [r4, #8]
 8003520:	0020      	movs	r0, r4
 8003522:	f000 f835 	bl	8003590 <HAL_CRCEx_Polynomial_Set>
 8003526:	2800      	cmp	r0, #0
 8003528:	d0db      	beq.n	80034e2 <HAL_CRC_Init+0x26>
      return HAL_ERROR;
 800352a:	2001      	movs	r0, #1
 800352c:	e7f1      	b.n	8003512 <HAL_CRC_Init+0x56>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800352e:	6823      	ldr	r3, [r4, #0]
 8003530:	6922      	ldr	r2, [r4, #16]
 8003532:	611a      	str	r2, [r3, #16]
 8003534:	e7dc      	b.n	80034f0 <HAL_CRC_Init+0x34>
    return HAL_ERROR;
 8003536:	2001      	movs	r0, #1
 8003538:	e7eb      	b.n	8003512 <HAL_CRC_Init+0x56>
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	04c11db7 	.word	0x04c11db7

08003540 <HAL_CRC_Calculate>:
{
 8003540:	b570      	push	{r4, r5, r6, lr}
 8003542:	0004      	movs	r4, r0
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003544:	2302      	movs	r3, #2
 8003546:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8003548:	6800      	ldr	r0, [r0, #0]
 800354a:	6883      	ldr	r3, [r0, #8]
 800354c:	2501      	movs	r5, #1
 800354e:	432b      	orrs	r3, r5
 8003550:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 8003552:	6a23      	ldr	r3, [r4, #32]
 8003554:	2b02      	cmp	r3, #2
 8003556:	d017      	beq.n	8003588 <HAL_CRC_Calculate+0x48>
 8003558:	2b03      	cmp	r3, #3
 800355a:	d005      	beq.n	8003568 <HAL_CRC_Calculate+0x28>
 800355c:	2b01      	cmp	r3, #1
 800355e:	d00f      	beq.n	8003580 <HAL_CRC_Calculate+0x40>
 8003560:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8003562:	2301      	movs	r3, #1
 8003564:	7763      	strb	r3, [r4, #29]
}
 8003566:	bd70      	pop	{r4, r5, r6, pc}
  switch (hcrc->InputDataFormat)
 8003568:	2300      	movs	r3, #0
      for (index = 0U; index < BufferLength; index++)
 800356a:	4293      	cmp	r3, r2
 800356c:	d205      	bcs.n	800357a <HAL_CRC_Calculate+0x3a>
        hcrc->Instance->DR = pBuffer[index];
 800356e:	6820      	ldr	r0, [r4, #0]
 8003570:	009d      	lsls	r5, r3, #2
 8003572:	586d      	ldr	r5, [r5, r1]
 8003574:	6005      	str	r5, [r0, #0]
      for (index = 0U; index < BufferLength; index++)
 8003576:	3301      	adds	r3, #1
 8003578:	e7f7      	b.n	800356a <HAL_CRC_Calculate+0x2a>
      temp = hcrc->Instance->DR;
 800357a:	6823      	ldr	r3, [r4, #0]
 800357c:	6818      	ldr	r0, [r3, #0]
      break;
 800357e:	e7f0      	b.n	8003562 <HAL_CRC_Calculate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8003580:	0020      	movs	r0, r4
 8003582:	f7ff ff45 	bl	8003410 <CRC_Handle_8>
      break;
 8003586:	e7ec      	b.n	8003562 <HAL_CRC_Calculate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8003588:	0020      	movs	r0, r4
 800358a:	f7ff ff7e 	bl	800348a <CRC_Handle_16>
      break;
 800358e:	e7e8      	b.n	8003562 <HAL_CRC_Calculate+0x22>

08003590 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003590:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003592:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003594:	001c      	movs	r4, r3
 8003596:	3b01      	subs	r3, #1
 8003598:	2c00      	cmp	r4, #0
 800359a:	d006      	beq.n	80035aa <HAL_CRCEx_Polynomial_Set+0x1a>
 800359c:	241f      	movs	r4, #31
 800359e:	401c      	ands	r4, r3
 80035a0:	000d      	movs	r5, r1
 80035a2:	40e5      	lsrs	r5, r4
 80035a4:	002c      	movs	r4, r5
 80035a6:	07e4      	lsls	r4, r4, #31
 80035a8:	d5f4      	bpl.n	8003594 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 80035aa:	2a10      	cmp	r2, #16
 80035ac:	d018      	beq.n	80035e0 <HAL_CRCEx_Polynomial_Set+0x50>
 80035ae:	d809      	bhi.n	80035c4 <HAL_CRCEx_Polynomial_Set+0x34>
 80035b0:	2a00      	cmp	r2, #0
 80035b2:	d00b      	beq.n	80035cc <HAL_CRCEx_Polynomial_Set+0x3c>
 80035b4:	2a08      	cmp	r2, #8
 80035b6:	d103      	bne.n	80035c0 <HAL_CRCEx_Polynomial_Set+0x30>
      {
        status =   HAL_ERROR;
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80035b8:	2b0f      	cmp	r3, #15
 80035ba:	d907      	bls.n	80035cc <HAL_CRCEx_Polynomial_Set+0x3c>
      {
        status =   HAL_ERROR;
 80035bc:	2001      	movs	r0, #1
 80035be:	e00e      	b.n	80035de <HAL_CRCEx_Polynomial_Set+0x4e>
  switch (PolyLength)
 80035c0:	2001      	movs	r0, #1
 80035c2:	e00c      	b.n	80035de <HAL_CRCEx_Polynomial_Set+0x4e>
 80035c4:	2a18      	cmp	r2, #24
 80035c6:	d10f      	bne.n	80035e8 <HAL_CRCEx_Polynomial_Set+0x58>
      if (msb >= HAL_CRC_LENGTH_7B)
 80035c8:	2b06      	cmp	r3, #6
 80035ca:	d80f      	bhi.n	80035ec <HAL_CRCEx_Polynomial_Set+0x5c>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80035cc:	6803      	ldr	r3, [r0, #0]
 80035ce:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80035d0:	6801      	ldr	r1, [r0, #0]
 80035d2:	688b      	ldr	r3, [r1, #8]
 80035d4:	2018      	movs	r0, #24
 80035d6:	4383      	bics	r3, r0
 80035d8:	431a      	orrs	r2, r3
 80035da:	608a      	str	r2, [r1, #8]
 80035dc:	2000      	movs	r0, #0
  }
  /* Return function status */
  return status;
}
 80035de:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 80035e0:	2b07      	cmp	r3, #7
 80035e2:	d9f3      	bls.n	80035cc <HAL_CRCEx_Polynomial_Set+0x3c>
        status =   HAL_ERROR;
 80035e4:	2001      	movs	r0, #1
 80035e6:	e7fa      	b.n	80035de <HAL_CRCEx_Polynomial_Set+0x4e>
  switch (PolyLength)
 80035e8:	2001      	movs	r0, #1
 80035ea:	e7f8      	b.n	80035de <HAL_CRCEx_Polynomial_Set+0x4e>
        status =   HAL_ERROR;
 80035ec:	2001      	movs	r0, #1
 80035ee:	e7f6      	b.n	80035de <HAL_CRCEx_Polynomial_Set+0x4e>

080035f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035f0:	b570      	push	{r4, r5, r6, lr}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80035f2:	251c      	movs	r5, #28
 80035f4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80035f6:	4025      	ands	r5, r4
 80035f8:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80035fa:	2401      	movs	r4, #1
 80035fc:	40ac      	lsls	r4, r5
 80035fe:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003600:	6804      	ldr	r4, [r0, #0]
 8003602:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003604:	6883      	ldr	r3, [r0, #8]
 8003606:	2b10      	cmp	r3, #16
 8003608:	d004      	beq.n	8003614 <DMA_SetConfig+0x24>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800360a:	6803      	ldr	r3, [r0, #0]
 800360c:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800360e:	6803      	ldr	r3, [r0, #0]
 8003610:	60da      	str	r2, [r3, #12]
  }
}
 8003612:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 8003614:	6803      	ldr	r3, [r0, #0]
 8003616:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003618:	6803      	ldr	r3, [r0, #0]
 800361a:	60d9      	str	r1, [r3, #12]
 800361c:	e7f9      	b.n	8003612 <DMA_SetConfig+0x22>
	...

08003620 <HAL_DMA_Init>:
{
 8003620:	b570      	push	{r4, r5, r6, lr}
 8003622:	1e04      	subs	r4, r0, #0
  if(hdma == NULL)
 8003624:	d03d      	beq.n	80036a2 <HAL_DMA_Init+0x82>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003626:	6805      	ldr	r5, [r0, #0]
 8003628:	4b1f      	ldr	r3, [pc, #124]	; (80036a8 <HAL_DMA_Init+0x88>)
 800362a:	18e8      	adds	r0, r5, r3
 800362c:	2114      	movs	r1, #20
 800362e:	f7fc fd87 	bl	8000140 <__udivsi3>
 8003632:	0080      	lsls	r0, r0, #2
 8003634:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8003636:	4b1d      	ldr	r3, [pc, #116]	; (80036ac <HAL_DMA_Init+0x8c>)
 8003638:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800363a:	2325      	movs	r3, #37	; 0x25
 800363c:	2202      	movs	r2, #2
 800363e:	54e2      	strb	r2, [r4, r3]
  tmp = hdma->Instance->CCR;
 8003640:	682b      	ldr	r3, [r5, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003642:	4a1b      	ldr	r2, [pc, #108]	; (80036b0 <HAL_DMA_Init+0x90>)
 8003644:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8003646:	68a3      	ldr	r3, [r4, #8]
 8003648:	68e1      	ldr	r1, [r4, #12]
 800364a:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800364c:	6921      	ldr	r1, [r4, #16]
 800364e:	430b      	orrs	r3, r1
 8003650:	6961      	ldr	r1, [r4, #20]
 8003652:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003654:	69a1      	ldr	r1, [r4, #24]
 8003656:	430b      	orrs	r3, r1
 8003658:	69e1      	ldr	r1, [r4, #28]
 800365a:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800365c:	6a21      	ldr	r1, [r4, #32]
 800365e:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8003660:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8003662:	602b      	str	r3, [r5, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003664:	2380      	movs	r3, #128	; 0x80
 8003666:	01db      	lsls	r3, r3, #7
 8003668:	68a2      	ldr	r2, [r4, #8]
 800366a:	429a      	cmp	r2, r3
 800366c:	d010      	beq.n	8003690 <HAL_DMA_Init+0x70>
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800366e:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <HAL_DMA_Init+0x94>)
 8003670:	6819      	ldr	r1, [r3, #0]
 8003672:	221c      	movs	r2, #28
 8003674:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8003676:	4015      	ands	r5, r2
 8003678:	200f      	movs	r0, #15
 800367a:	40a8      	lsls	r0, r5
 800367c:	4381      	bics	r1, r0
 800367e:	6019      	str	r1, [r3, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003680:	6819      	ldr	r1, [r3, #0]
 8003682:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003684:	4002      	ands	r2, r0
 8003686:	6860      	ldr	r0, [r4, #4]
 8003688:	4090      	lsls	r0, r2
 800368a:	0002      	movs	r2, r0
 800368c:	430a      	orrs	r2, r1
 800368e:	601a      	str	r2, [r3, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003690:	2300      	movs	r3, #0
 8003692:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8003694:	2225      	movs	r2, #37	; 0x25
 8003696:	2101      	movs	r1, #1
 8003698:	54a1      	strb	r1, [r4, r2]
  hdma->Lock = HAL_UNLOCKED;
 800369a:	3a01      	subs	r2, #1
 800369c:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 800369e:	2000      	movs	r0, #0
}
 80036a0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80036a2:	2001      	movs	r0, #1
 80036a4:	e7fc      	b.n	80036a0 <HAL_DMA_Init+0x80>
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	bffdfff8 	.word	0xbffdfff8
 80036ac:	40020000 	.word	0x40020000
 80036b0:	ffff800f 	.word	0xffff800f
 80036b4:	400200a8 	.word	0x400200a8

080036b8 <HAL_DMA_Start_IT>:
{
 80036b8:	b570      	push	{r4, r5, r6, lr}
 80036ba:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 80036bc:	2024      	movs	r0, #36	; 0x24
 80036be:	5c20      	ldrb	r0, [r4, r0]
 80036c0:	2801      	cmp	r0, #1
 80036c2:	d032      	beq.n	800372a <HAL_DMA_Start_IT+0x72>
 80036c4:	2024      	movs	r0, #36	; 0x24
 80036c6:	2501      	movs	r5, #1
 80036c8:	5425      	strb	r5, [r4, r0]
  if(HAL_DMA_STATE_READY == hdma->State)
 80036ca:	3001      	adds	r0, #1
 80036cc:	5c20      	ldrb	r0, [r4, r0]
 80036ce:	2801      	cmp	r0, #1
 80036d0:	d004      	beq.n	80036dc <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 80036d2:	2324      	movs	r3, #36	; 0x24
 80036d4:	2200      	movs	r2, #0
 80036d6:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 80036d8:	2002      	movs	r0, #2
}
 80036da:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80036dc:	3024      	adds	r0, #36	; 0x24
 80036de:	3501      	adds	r5, #1
 80036e0:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036e2:	2000      	movs	r0, #0
 80036e4:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80036e6:	6825      	ldr	r5, [r4, #0]
 80036e8:	6828      	ldr	r0, [r5, #0]
 80036ea:	2601      	movs	r6, #1
 80036ec:	43b0      	bics	r0, r6
 80036ee:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036f0:	0020      	movs	r0, r4
 80036f2:	f7ff ff7d 	bl	80035f0 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 80036f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00b      	beq.n	8003714 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036fc:	6822      	ldr	r2, [r4, #0]
 80036fe:	6813      	ldr	r3, [r2, #0]
 8003700:	210e      	movs	r1, #14
 8003702:	430b      	orrs	r3, r1
 8003704:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8003706:	6822      	ldr	r2, [r4, #0]
 8003708:	6813      	ldr	r3, [r2, #0]
 800370a:	2101      	movs	r1, #1
 800370c:	430b      	orrs	r3, r1
 800370e:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003710:	2000      	movs	r0, #0
 8003712:	e7e2      	b.n	80036da <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003714:	6822      	ldr	r2, [r4, #0]
 8003716:	6813      	ldr	r3, [r2, #0]
 8003718:	2104      	movs	r1, #4
 800371a:	438b      	bics	r3, r1
 800371c:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800371e:	6822      	ldr	r2, [r4, #0]
 8003720:	6813      	ldr	r3, [r2, #0]
 8003722:	3106      	adds	r1, #6
 8003724:	430b      	orrs	r3, r1
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	e7ed      	b.n	8003706 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 800372a:	2002      	movs	r0, #2
 800372c:	e7d5      	b.n	80036da <HAL_DMA_Start_IT+0x22>

0800372e <HAL_DMA_Abort>:
{
 800372e:	b510      	push	{r4, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003730:	2325      	movs	r3, #37	; 0x25
 8003732:	5cc3      	ldrb	r3, [r0, r3]
 8003734:	2b02      	cmp	r3, #2
 8003736:	d006      	beq.n	8003746 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003738:	2304      	movs	r3, #4
 800373a:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800373c:	3320      	adds	r3, #32
 800373e:	2200      	movs	r2, #0
 8003740:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8003742:	2001      	movs	r0, #1
}
 8003744:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003746:	6802      	ldr	r2, [r0, #0]
 8003748:	6813      	ldr	r3, [r2, #0]
 800374a:	210e      	movs	r1, #14
 800374c:	438b      	bics	r3, r1
 800374e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003750:	6801      	ldr	r1, [r0, #0]
 8003752:	680a      	ldr	r2, [r1, #0]
 8003754:	2301      	movs	r3, #1
 8003756:	439a      	bics	r2, r3
 8003758:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800375a:	221c      	movs	r2, #28
 800375c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800375e:	400a      	ands	r2, r1
 8003760:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003762:	001c      	movs	r4, r3
 8003764:	4094      	lsls	r4, r2
 8003766:	604c      	str	r4, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003768:	2225      	movs	r2, #37	; 0x25
 800376a:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 800376c:	3323      	adds	r3, #35	; 0x23
 800376e:	2200      	movs	r2, #0
 8003770:	54c2      	strb	r2, [r0, r3]
    return status;
 8003772:	2000      	movs	r0, #0
 8003774:	e7e6      	b.n	8003744 <HAL_DMA_Abort+0x16>

08003776 <HAL_DMA_Abort_IT>:
{
 8003776:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003778:	2325      	movs	r3, #37	; 0x25
 800377a:	5cc3      	ldrb	r3, [r0, r3]
 800377c:	2b02      	cmp	r3, #2
 800377e:	d003      	beq.n	8003788 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003780:	2304      	movs	r3, #4
 8003782:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003784:	2001      	movs	r0, #1
}
 8003786:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003788:	6802      	ldr	r2, [r0, #0]
 800378a:	6813      	ldr	r3, [r2, #0]
 800378c:	210e      	movs	r1, #14
 800378e:	438b      	bics	r3, r1
 8003790:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003792:	6801      	ldr	r1, [r0, #0]
 8003794:	680a      	ldr	r2, [r1, #0]
 8003796:	2301      	movs	r3, #1
 8003798:	439a      	bics	r2, r3
 800379a:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800379c:	221c      	movs	r2, #28
 800379e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80037a0:	400a      	ands	r2, r1
 80037a2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80037a4:	001c      	movs	r4, r3
 80037a6:	4094      	lsls	r4, r2
 80037a8:	604c      	str	r4, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80037aa:	2225      	movs	r2, #37	; 0x25
 80037ac:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 80037ae:	3323      	adds	r3, #35	; 0x23
 80037b0:	2200      	movs	r2, #0
 80037b2:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 80037b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_DMA_Abort_IT+0x4a>
      hdma->XferAbortCallback(hdma);
 80037ba:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80037bc:	2000      	movs	r0, #0
 80037be:	e7e2      	b.n	8003786 <HAL_DMA_Abort_IT+0x10>
 80037c0:	2000      	movs	r0, #0
 80037c2:	e7e0      	b.n	8003786 <HAL_DMA_Abort_IT+0x10>

080037c4 <HAL_DMA_IRQHandler>:
{
 80037c4:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037c6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80037c8:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80037ca:	6804      	ldr	r4, [r0, #0]
 80037cc:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80037ce:	231c      	movs	r3, #28
 80037d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80037d2:	4013      	ands	r3, r2
 80037d4:	2204      	movs	r2, #4
 80037d6:	409a      	lsls	r2, r3
 80037d8:	4211      	tst	r1, r2
 80037da:	d014      	beq.n	8003806 <HAL_DMA_IRQHandler+0x42>
 80037dc:	076a      	lsls	r2, r5, #29
 80037de:	d512      	bpl.n	8003806 <HAL_DMA_IRQHandler+0x42>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	069b      	lsls	r3, r3, #26
 80037e4:	d403      	bmi.n	80037ee <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037e6:	6823      	ldr	r3, [r4, #0]
 80037e8:	2204      	movs	r2, #4
 80037ea:	4393      	bics	r3, r2
 80037ec:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80037ee:	221c      	movs	r2, #28
 80037f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80037f2:	401a      	ands	r2, r3
 80037f4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80037f6:	2304      	movs	r3, #4
 80037f8:	4093      	lsls	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 80037fc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d000      	beq.n	8003804 <HAL_DMA_IRQHandler+0x40>
        hdma->XferHalfCpltCallback(hdma);
 8003802:	4798      	blx	r3
}
 8003804:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003806:	2202      	movs	r2, #2
 8003808:	409a      	lsls	r2, r3
 800380a:	4211      	tst	r1, r2
 800380c:	d01a      	beq.n	8003844 <HAL_DMA_IRQHandler+0x80>
 800380e:	07aa      	lsls	r2, r5, #30
 8003810:	d518      	bpl.n	8003844 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	069b      	lsls	r3, r3, #26
 8003816:	d406      	bmi.n	8003826 <HAL_DMA_IRQHandler+0x62>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003818:	6823      	ldr	r3, [r4, #0]
 800381a:	220a      	movs	r2, #10
 800381c:	4393      	bics	r3, r2
 800381e:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003820:	2325      	movs	r3, #37	; 0x25
 8003822:	3a09      	subs	r2, #9
 8003824:	54c2      	strb	r2, [r0, r3]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003826:	221c      	movs	r2, #28
 8003828:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800382a:	401a      	ands	r2, r3
 800382c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800382e:	2302      	movs	r3, #2
 8003830:	4093      	lsls	r3, r2
 8003832:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003834:	2324      	movs	r3, #36	; 0x24
 8003836:	2200      	movs	r2, #0
 8003838:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferCpltCallback != NULL)
 800383a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0e1      	beq.n	8003804 <HAL_DMA_IRQHandler+0x40>
      hdma->XferCpltCallback(hdma);
 8003840:	4798      	blx	r3
 8003842:	e7df      	b.n	8003804 <HAL_DMA_IRQHandler+0x40>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003844:	2208      	movs	r2, #8
 8003846:	409a      	lsls	r2, r3
 8003848:	4211      	tst	r1, r2
 800384a:	d0db      	beq.n	8003804 <HAL_DMA_IRQHandler+0x40>
 800384c:	072b      	lsls	r3, r5, #28
 800384e:	d5d9      	bpl.n	8003804 <HAL_DMA_IRQHandler+0x40>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003850:	6823      	ldr	r3, [r4, #0]
 8003852:	220e      	movs	r2, #14
 8003854:	4393      	bics	r3, r2
 8003856:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003858:	320e      	adds	r2, #14
 800385a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800385c:	401a      	ands	r2, r3
 800385e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003860:	2301      	movs	r3, #1
 8003862:	001c      	movs	r4, r3
 8003864:	4094      	lsls	r4, r2
 8003866:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003868:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800386a:	2225      	movs	r2, #37	; 0x25
 800386c:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 800386e:	3323      	adds	r3, #35	; 0x23
 8003870:	2200      	movs	r2, #0
 8003872:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8003874:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0c4      	beq.n	8003804 <HAL_DMA_IRQHandler+0x40>
      hdma->XferErrorCallback(hdma);
 800387a:	4798      	blx	r3
  return;
 800387c:	e7c2      	b.n	8003804 <HAL_DMA_IRQHandler+0x40>
	...

08003880 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003880:	4b2b      	ldr	r3, [pc, #172]	; (8003930 <FLASH_SetErrorCode+0xb0>)
 8003882:	6999      	ldr	r1, [r3, #24]
 8003884:	2280      	movs	r2, #128	; 0x80
 8003886:	0052      	lsls	r2, r2, #1
 8003888:	000b      	movs	r3, r1
 800388a:	4013      	ands	r3, r2
 800388c:	4211      	tst	r1, r2
 800388e:	d006      	beq.n	800389e <FLASH_SetErrorCode+0x1e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003890:	4a28      	ldr	r2, [pc, #160]	; (8003934 <FLASH_SetErrorCode+0xb4>)
 8003892:	6953      	ldr	r3, [r2, #20]
 8003894:	2102      	movs	r1, #2
 8003896:	430b      	orrs	r3, r1
 8003898:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 800389a:	2380      	movs	r3, #128	; 0x80
 800389c:	005b      	lsls	r3, r3, #1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800389e:	4a24      	ldr	r2, [pc, #144]	; (8003930 <FLASH_SetErrorCode+0xb0>)
 80038a0:	6992      	ldr	r2, [r2, #24]
 80038a2:	0592      	lsls	r2, r2, #22
 80038a4:	d507      	bpl.n	80038b6 <FLASH_SetErrorCode+0x36>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80038a6:	4923      	ldr	r1, [pc, #140]	; (8003934 <FLASH_SetErrorCode+0xb4>)
 80038a8:	694a      	ldr	r2, [r1, #20]
 80038aa:	2001      	movs	r0, #1
 80038ac:	4302      	orrs	r2, r0
 80038ae:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_PGAERR;
 80038b0:	2280      	movs	r2, #128	; 0x80
 80038b2:	0092      	lsls	r2, r2, #2
 80038b4:	4313      	orrs	r3, r2
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80038b6:	4a1e      	ldr	r2, [pc, #120]	; (8003930 <FLASH_SetErrorCode+0xb0>)
 80038b8:	6992      	ldr	r2, [r2, #24]
 80038ba:	0552      	lsls	r2, r2, #21
 80038bc:	d507      	bpl.n	80038ce <FLASH_SetErrorCode+0x4e>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80038be:	491d      	ldr	r1, [pc, #116]	; (8003934 <FLASH_SetErrorCode+0xb4>)
 80038c0:	694a      	ldr	r2, [r1, #20]
 80038c2:	2008      	movs	r0, #8
 80038c4:	4302      	orrs	r2, r0
 80038c6:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_SIZERR;
 80038c8:	2280      	movs	r2, #128	; 0x80
 80038ca:	00d2      	lsls	r2, r2, #3
 80038cc:	4313      	orrs	r3, r2
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80038ce:	4a18      	ldr	r2, [pc, #96]	; (8003930 <FLASH_SetErrorCode+0xb0>)
 80038d0:	6992      	ldr	r2, [r2, #24]
 80038d2:	0512      	lsls	r2, r2, #20
 80038d4:	d507      	bpl.n	80038e6 <FLASH_SetErrorCode+0x66>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80038d6:	4917      	ldr	r1, [pc, #92]	; (8003934 <FLASH_SetErrorCode+0xb4>)
 80038d8:	694a      	ldr	r2, [r1, #20]
 80038da:	2004      	movs	r0, #4
 80038dc:	4302      	orrs	r2, r0
 80038de:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_OPTVERR;
 80038e0:	2280      	movs	r2, #128	; 0x80
 80038e2:	0112      	lsls	r2, r2, #4
 80038e4:	4313      	orrs	r3, r2
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 80038e6:	4a12      	ldr	r2, [pc, #72]	; (8003930 <FLASH_SetErrorCode+0xb0>)
 80038e8:	6992      	ldr	r2, [r2, #24]
 80038ea:	0492      	lsls	r2, r2, #18
 80038ec:	d507      	bpl.n	80038fe <FLASH_SetErrorCode+0x7e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80038ee:	4911      	ldr	r1, [pc, #68]	; (8003934 <FLASH_SetErrorCode+0xb4>)
 80038f0:	694a      	ldr	r2, [r1, #20]
 80038f2:	2010      	movs	r0, #16
 80038f4:	4302      	orrs	r2, r0
 80038f6:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_RDERR;
 80038f8:	2280      	movs	r2, #128	; 0x80
 80038fa:	0192      	lsls	r2, r2, #6
 80038fc:	4313      	orrs	r3, r2
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80038fe:	4a0c      	ldr	r2, [pc, #48]	; (8003930 <FLASH_SetErrorCode+0xb0>)
 8003900:	6992      	ldr	r2, [r2, #24]
 8003902:	0392      	lsls	r2, r2, #14
 8003904:	d505      	bpl.n	8003912 <FLASH_SetErrorCode+0x92>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8003906:	480b      	ldr	r0, [pc, #44]	; (8003934 <FLASH_SetErrorCode+0xb4>)
 8003908:	6942      	ldr	r2, [r0, #20]
 800390a:	2120      	movs	r1, #32
 800390c:	430a      	orrs	r2, r1
 800390e:	6142      	str	r2, [r0, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8003910:	430b      	orrs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8003912:	4a07      	ldr	r2, [pc, #28]	; (8003930 <FLASH_SetErrorCode+0xb0>)
 8003914:	6992      	ldr	r2, [r2, #24]
 8003916:	03d2      	lsls	r2, r2, #15
 8003918:	d507      	bpl.n	800392a <FLASH_SetErrorCode+0xaa>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800391a:	4906      	ldr	r1, [pc, #24]	; (8003934 <FLASH_SetErrorCode+0xb4>)
 800391c:	694a      	ldr	r2, [r1, #20]
 800391e:	2040      	movs	r0, #64	; 0x40
 8003920:	4302      	orrs	r2, r0
 8003922:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8003924:	2280      	movs	r2, #128	; 0x80
 8003926:	0252      	lsls	r2, r2, #9
 8003928:	4313      	orrs	r3, r2
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800392a:	4a01      	ldr	r2, [pc, #4]	; (8003930 <FLASH_SetErrorCode+0xb0>)
 800392c:	6193      	str	r3, [r2, #24]
}  
 800392e:	4770      	bx	lr
 8003930:	40022000 	.word	0x40022000
 8003934:	20002d24 	.word	0x20002d24

08003938 <FLASH_WaitForLastOperation>:
{
 8003938:	b570      	push	{r4, r5, r6, lr}
 800393a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800393c:	f7ff fa64 	bl	8002e08 <HAL_GetTick>
 8003940:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003942:	4b1c      	ldr	r3, [pc, #112]	; (80039b4 <FLASH_WaitForLastOperation+0x7c>)
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	07db      	lsls	r3, r3, #31
 8003948:	d50a      	bpl.n	8003960 <FLASH_WaitForLastOperation+0x28>
    if (Timeout != HAL_MAX_DELAY)
 800394a:	1c63      	adds	r3, r4, #1
 800394c:	d0f9      	beq.n	8003942 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800394e:	2c00      	cmp	r4, #0
 8003950:	d004      	beq.n	800395c <FLASH_WaitForLastOperation+0x24>
 8003952:	f7ff fa59 	bl	8002e08 <HAL_GetTick>
 8003956:	1b40      	subs	r0, r0, r5
 8003958:	42a0      	cmp	r0, r4
 800395a:	d9f2      	bls.n	8003942 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 800395c:	2003      	movs	r0, #3
 800395e:	e027      	b.n	80039b0 <FLASH_WaitForLastOperation+0x78>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003960:	4b14      	ldr	r3, [pc, #80]	; (80039b4 <FLASH_WaitForLastOperation+0x7c>)
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	079b      	lsls	r3, r3, #30
 8003966:	d502      	bpl.n	800396e <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003968:	4b12      	ldr	r3, [pc, #72]	; (80039b4 <FLASH_WaitForLastOperation+0x7c>)
 800396a:	2202      	movs	r2, #2
 800396c:	619a      	str	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800396e:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <FLASH_WaitForLastOperation+0x7c>)
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	05db      	lsls	r3, r3, #23
 8003974:	d419      	bmi.n	80039aa <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8003976:	4b0f      	ldr	r3, [pc, #60]	; (80039b4 <FLASH_WaitForLastOperation+0x7c>)
 8003978:	699b      	ldr	r3, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800397a:	059b      	lsls	r3, r3, #22
 800397c:	d415      	bmi.n	80039aa <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800397e:	4b0d      	ldr	r3, [pc, #52]	; (80039b4 <FLASH_WaitForLastOperation+0x7c>)
 8003980:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8003982:	055b      	lsls	r3, r3, #21
 8003984:	d411      	bmi.n	80039aa <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8003986:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <FLASH_WaitForLastOperation+0x7c>)
 8003988:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800398a:	051b      	lsls	r3, r3, #20
 800398c:	d40d      	bmi.n	80039aa <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800398e:	4b09      	ldr	r3, [pc, #36]	; (80039b4 <FLASH_WaitForLastOperation+0x7c>)
 8003990:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8003992:	049b      	lsls	r3, r3, #18
 8003994:	d409      	bmi.n	80039aa <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8003996:	4b07      	ldr	r3, [pc, #28]	; (80039b4 <FLASH_WaitForLastOperation+0x7c>)
 8003998:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800399a:	039b      	lsls	r3, r3, #14
 800399c:	d405      	bmi.n	80039aa <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800399e:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <FLASH_WaitForLastOperation+0x7c>)
 80039a0:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80039a2:	03db      	lsls	r3, r3, #15
 80039a4:	d401      	bmi.n	80039aa <FLASH_WaitForLastOperation+0x72>
  return HAL_OK;
 80039a6:	2000      	movs	r0, #0
 80039a8:	e002      	b.n	80039b0 <FLASH_WaitForLastOperation+0x78>
    FLASH_SetErrorCode();
 80039aa:	f7ff ff69 	bl	8003880 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80039ae:	2001      	movs	r0, #1
}
 80039b0:	bd70      	pop	{r4, r5, r6, pc}
 80039b2:	46c0      	nop			; (mov r8, r8)
 80039b4:	40022000 	.word	0x40022000

080039b8 <HAL_FLASHEx_DATAEEPROM_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80039b8:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x30>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	07db      	lsls	r3, r3, #31
 80039be:	d50e      	bpl.n	80039de <HAL_FLASHEx_DATAEEPROM_Unlock+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c0:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80039c4:	b672      	cpsid	i
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 80039c6:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x30>)
 80039c8:	4908      	ldr	r1, [pc, #32]	; (80039ec <HAL_FLASHEx_DATAEEPROM_Unlock+0x34>)
 80039ca:	60d9      	str	r1, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 80039cc:	4908      	ldr	r1, [pc, #32]	; (80039f0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x38>)
 80039ce:	60d9      	str	r1, [r3, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d0:	f382 8810 	msr	PRIMASK, r2

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	07db      	lsls	r3, r3, #31
 80039d8:	d403      	bmi.n	80039e2 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2a>
    {
      return HAL_ERROR;
    }
  }

  return HAL_OK;  
 80039da:	2000      	movs	r0, #0
 80039dc:	e000      	b.n	80039e0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>
 80039de:	2000      	movs	r0, #0
}
 80039e0:	4770      	bx	lr
      return HAL_ERROR;
 80039e2:	2001      	movs	r0, #1
 80039e4:	e7fc      	b.n	80039e0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	40022000 	.word	0x40022000
 80039ec:	89abcdef 	.word	0x89abcdef
 80039f0:	02030405 	.word	0x02030405

080039f4 <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80039f4:	4a03      	ldr	r2, [pc, #12]	; (8003a04 <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
 80039f6:	6853      	ldr	r3, [r2, #4]
 80039f8:	2101      	movs	r1, #1
 80039fa:	430b      	orrs	r3, r1
 80039fc:	6053      	str	r3, [r2, #4]
  
  return HAL_OK;
}
 80039fe:	2000      	movs	r0, #0
 8003a00:	4770      	bx	lr
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	40022000 	.word	0x40022000

08003a08 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8003a08:	b570      	push	{r4, r5, r6, lr}
 8003a0a:	0006      	movs	r6, r0
 8003a0c:	000d      	movs	r5, r1
 8003a0e:	0014      	movs	r4, r2
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003a10:	4b12      	ldr	r3, [pc, #72]	; (8003a5c <HAL_FLASHEx_DATAEEPROM_Program+0x54>)
 8003a12:	7c1b      	ldrb	r3, [r3, #16]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d01f      	beq.n	8003a58 <HAL_FLASHEx_DATAEEPROM_Program+0x50>
 8003a18:	4b10      	ldr	r3, [pc, #64]	; (8003a5c <HAL_FLASHEx_DATAEEPROM_Program+0x54>)
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003a1e:	4810      	ldr	r0, [pc, #64]	; (8003a60 <HAL_FLASHEx_DATAEEPROM_Program+0x58>)
 8003a20:	f7ff ff8a 	bl	8003938 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 8003a24:	2800      	cmp	r0, #0
 8003a26:	d10c      	bne.n	8003a42 <HAL_FLASHEx_DATAEEPROM_Program+0x3a>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003a28:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <HAL_FLASHEx_DATAEEPROM_Program+0x54>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8003a2e:	2e02      	cmp	r6, #2
 8003a30:	d006      	beq.n	8003a40 <HAL_FLASHEx_DATAEEPROM_Program+0x38>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8003a32:	2e01      	cmp	r6, #1
 8003a34:	d009      	beq.n	8003a4a <HAL_FLASHEx_DATAEEPROM_Program+0x42>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8003a36:	2e00      	cmp	r6, #0
 8003a38:	d10a      	bne.n	8003a50 <HAL_FLASHEx_DATAEEPROM_Program+0x48>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8003a3a:	b2e4      	uxtb	r4, r4
 8003a3c:	702c      	strb	r4, [r5, #0]
 8003a3e:	e000      	b.n	8003a42 <HAL_FLASHEx_DATAEEPROM_Program+0x3a>
      *(__IO uint32_t *)Address = Data;
 8003a40:	602c      	str	r4, [r5, #0]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003a42:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <HAL_FLASHEx_DATAEEPROM_Program+0x54>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	741a      	strb	r2, [r3, #16]

  return status;
}
 8003a48:	bd70      	pop	{r4, r5, r6, pc}
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8003a4a:	b2a4      	uxth	r4, r4
 8003a4c:	802c      	strh	r4, [r5, #0]
 8003a4e:	e7f8      	b.n	8003a42 <HAL_FLASHEx_DATAEEPROM_Program+0x3a>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003a50:	4803      	ldr	r0, [pc, #12]	; (8003a60 <HAL_FLASHEx_DATAEEPROM_Program+0x58>)
 8003a52:	f7ff ff71 	bl	8003938 <FLASH_WaitForLastOperation>
 8003a56:	e7f4      	b.n	8003a42 <HAL_FLASHEx_DATAEEPROM_Program+0x3a>
  __HAL_LOCK(&pFlash);
 8003a58:	2002      	movs	r0, #2
 8003a5a:	e7f5      	b.n	8003a48 <HAL_FLASHEx_DATAEEPROM_Program+0x40>
 8003a5c:	20002d24 	.word	0x20002d24
 8003a60:	0000c350 	.word	0x0000c350

08003a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a64:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00U;
 8003a66:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003a68:	e057      	b.n	8003b1a <HAL_GPIO_Init+0xb6>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a6a:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003a6c:	005f      	lsls	r7, r3, #1
 8003a6e:	2603      	movs	r6, #3
 8003a70:	40be      	lsls	r6, r7
 8003a72:	43b4      	bics	r4, r6
 8003a74:	0026      	movs	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a76:	68cc      	ldr	r4, [r1, #12]
 8003a78:	40bc      	lsls	r4, r7
 8003a7a:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8003a7c:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a7e:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a80:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a82:	684a      	ldr	r2, [r1, #4]
 8003a84:	0916      	lsrs	r6, r2, #4
 8003a86:	2201      	movs	r2, #1
 8003a88:	4032      	ands	r2, r6
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8003a8e:	6042      	str	r2, [r0, #4]
 8003a90:	e053      	b.n	8003b3a <HAL_GPIO_Init+0xd6>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a92:	08dc      	lsrs	r4, r3, #3
 8003a94:	3408      	adds	r4, #8
 8003a96:	00a4      	lsls	r4, r4, #2
 8003a98:	5826      	ldr	r6, [r4, r0]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003a9a:	3205      	adds	r2, #5
 8003a9c:	401a      	ands	r2, r3
 8003a9e:	0092      	lsls	r2, r2, #2
 8003aa0:	270f      	movs	r7, #15
 8003aa2:	4097      	lsls	r7, r2
 8003aa4:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003aa6:	690f      	ldr	r7, [r1, #16]
 8003aa8:	4097      	lsls	r7, r2
 8003aaa:	003a      	movs	r2, r7
 8003aac:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 8003aae:	5022      	str	r2, [r4, r0]
 8003ab0:	e057      	b.n	8003b62 <HAL_GPIO_Init+0xfe>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003ab2:	2605      	movs	r6, #5
 8003ab4:	e000      	b.n	8003ab8 <HAL_GPIO_Init+0x54>
 8003ab6:	2600      	movs	r6, #0
 8003ab8:	40a6      	lsls	r6, r4
 8003aba:	0034      	movs	r4, r6
 8003abc:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003abe:	3202      	adds	r2, #2
 8003ac0:	0092      	lsls	r2, r2, #2
 8003ac2:	4e47      	ldr	r6, [pc, #284]	; (8003be0 <HAL_GPIO_Init+0x17c>)
 8003ac4:	5194      	str	r4, [r2, r6]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ac6:	4a47      	ldr	r2, [pc, #284]	; (8003be4 <HAL_GPIO_Init+0x180>)
 8003ac8:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8003aca:	43ea      	mvns	r2, r5
 8003acc:	0026      	movs	r6, r4
 8003ace:	43ae      	bics	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ad0:	684f      	ldr	r7, [r1, #4]
 8003ad2:	03ff      	lsls	r7, r7, #15
 8003ad4:	d501      	bpl.n	8003ada <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8003ad6:	432c      	orrs	r4, r5
 8003ad8:	0026      	movs	r6, r4
        }
        EXTI->IMR = temp;
 8003ada:	4c42      	ldr	r4, [pc, #264]	; (8003be4 <HAL_GPIO_Init+0x180>)
 8003adc:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8003ade:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8003ae0:	0026      	movs	r6, r4
 8003ae2:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ae4:	684f      	ldr	r7, [r1, #4]
 8003ae6:	03bf      	lsls	r7, r7, #14
 8003ae8:	d501      	bpl.n	8003aee <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 8003aea:	432c      	orrs	r4, r5
 8003aec:	0026      	movs	r6, r4
        }
        EXTI->EMR = temp;
 8003aee:	4c3d      	ldr	r4, [pc, #244]	; (8003be4 <HAL_GPIO_Init+0x180>)
 8003af0:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003af2:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8003af4:	0026      	movs	r6, r4
 8003af6:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003af8:	684f      	ldr	r7, [r1, #4]
 8003afa:	02ff      	lsls	r7, r7, #11
 8003afc:	d501      	bpl.n	8003b02 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8003afe:	432c      	orrs	r4, r5
 8003b00:	0026      	movs	r6, r4
        }
        EXTI->RTSR = temp;
 8003b02:	4c38      	ldr	r4, [pc, #224]	; (8003be4 <HAL_GPIO_Init+0x180>)
 8003b04:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8003b06:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8003b08:	4022      	ands	r2, r4
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b0a:	684e      	ldr	r6, [r1, #4]
 8003b0c:	02b6      	lsls	r6, r6, #10
 8003b0e:	d501      	bpl.n	8003b14 <HAL_GPIO_Init+0xb0>
        {
          temp |= iocurrent;
 8003b10:	002a      	movs	r2, r5
 8003b12:	4322      	orrs	r2, r4
        }
        EXTI->FTSR = temp;
 8003b14:	4c33      	ldr	r4, [pc, #204]	; (8003be4 <HAL_GPIO_Init+0x180>)
 8003b16:	60e2      	str	r2, [r4, #12]
      }
    }
    position++;
 8003b18:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8003b1a:	680c      	ldr	r4, [r1, #0]
 8003b1c:	0022      	movs	r2, r4
 8003b1e:	40da      	lsrs	r2, r3
 8003b20:	d05d      	beq.n	8003bde <HAL_GPIO_Init+0x17a>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003b22:	2201      	movs	r2, #1
 8003b24:	409a      	lsls	r2, r3
 8003b26:	0025      	movs	r5, r4
 8003b28:	4015      	ands	r5, r2
    if (iocurrent)
 8003b2a:	4214      	tst	r4, r2
 8003b2c:	d0f4      	beq.n	8003b18 <HAL_GPIO_Init+0xb4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b2e:	2403      	movs	r4, #3
 8003b30:	684e      	ldr	r6, [r1, #4]
 8003b32:	4034      	ands	r4, r6
 8003b34:	3c01      	subs	r4, #1
 8003b36:	2c01      	cmp	r4, #1
 8003b38:	d997      	bls.n	8003a6a <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b3a:	2203      	movs	r2, #3
 8003b3c:	684c      	ldr	r4, [r1, #4]
 8003b3e:	4022      	ands	r2, r4
 8003b40:	2a03      	cmp	r2, #3
 8003b42:	d009      	beq.n	8003b58 <HAL_GPIO_Init+0xf4>
        temp = GPIOx->PUPDR;
 8003b44:	68c2      	ldr	r2, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b46:	005e      	lsls	r6, r3, #1
 8003b48:	2403      	movs	r4, #3
 8003b4a:	40b4      	lsls	r4, r6
 8003b4c:	43a2      	bics	r2, r4
 8003b4e:	0014      	movs	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b50:	688a      	ldr	r2, [r1, #8]
 8003b52:	40b2      	lsls	r2, r6
 8003b54:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8003b56:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b58:	2203      	movs	r2, #3
 8003b5a:	684c      	ldr	r4, [r1, #4]
 8003b5c:	4022      	ands	r2, r4
 8003b5e:	2a02      	cmp	r2, #2
 8003b60:	d097      	beq.n	8003a92 <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8003b62:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b64:	005e      	lsls	r6, r3, #1
 8003b66:	2203      	movs	r2, #3
 8003b68:	0017      	movs	r7, r2
 8003b6a:	40b7      	lsls	r7, r6
 8003b6c:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b6e:	684f      	ldr	r7, [r1, #4]
 8003b70:	403a      	ands	r2, r7
 8003b72:	40b2      	lsls	r2, r6
 8003b74:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8003b76:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b78:	22c0      	movs	r2, #192	; 0xc0
 8003b7a:	0292      	lsls	r2, r2, #10
 8003b7c:	684c      	ldr	r4, [r1, #4]
 8003b7e:	4214      	tst	r4, r2
 8003b80:	d0ca      	beq.n	8003b18 <HAL_GPIO_Init+0xb4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b82:	4c19      	ldr	r4, [pc, #100]	; (8003be8 <HAL_GPIO_Init+0x184>)
 8003b84:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003b86:	2601      	movs	r6, #1
 8003b88:	4332      	orrs	r2, r6
 8003b8a:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8003b8c:	089a      	lsrs	r2, r3, #2
 8003b8e:	1c94      	adds	r4, r2, #2
 8003b90:	00a4      	lsls	r4, r4, #2
 8003b92:	4e13      	ldr	r6, [pc, #76]	; (8003be0 <HAL_GPIO_Init+0x17c>)
 8003b94:	59a7      	ldr	r7, [r4, r6]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003b96:	2603      	movs	r6, #3
 8003b98:	401e      	ands	r6, r3
 8003b9a:	00b4      	lsls	r4, r6, #2
 8003b9c:	260f      	movs	r6, #15
 8003b9e:	40a6      	lsls	r6, r4
 8003ba0:	43b7      	bics	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003ba2:	26a0      	movs	r6, #160	; 0xa0
 8003ba4:	05f6      	lsls	r6, r6, #23
 8003ba6:	42b0      	cmp	r0, r6
 8003ba8:	d085      	beq.n	8003ab6 <HAL_GPIO_Init+0x52>
 8003baa:	4e10      	ldr	r6, [pc, #64]	; (8003bec <HAL_GPIO_Init+0x188>)
 8003bac:	42b0      	cmp	r0, r6
 8003bae:	d00e      	beq.n	8003bce <HAL_GPIO_Init+0x16a>
 8003bb0:	4e0f      	ldr	r6, [pc, #60]	; (8003bf0 <HAL_GPIO_Init+0x18c>)
 8003bb2:	42b0      	cmp	r0, r6
 8003bb4:	d00d      	beq.n	8003bd2 <HAL_GPIO_Init+0x16e>
 8003bb6:	4e0f      	ldr	r6, [pc, #60]	; (8003bf4 <HAL_GPIO_Init+0x190>)
 8003bb8:	42b0      	cmp	r0, r6
 8003bba:	d00c      	beq.n	8003bd6 <HAL_GPIO_Init+0x172>
 8003bbc:	4e0e      	ldr	r6, [pc, #56]	; (8003bf8 <HAL_GPIO_Init+0x194>)
 8003bbe:	42b0      	cmp	r0, r6
 8003bc0:	d00b      	beq.n	8003bda <HAL_GPIO_Init+0x176>
 8003bc2:	4e0e      	ldr	r6, [pc, #56]	; (8003bfc <HAL_GPIO_Init+0x198>)
 8003bc4:	42b0      	cmp	r0, r6
 8003bc6:	d100      	bne.n	8003bca <HAL_GPIO_Init+0x166>
 8003bc8:	e773      	b.n	8003ab2 <HAL_GPIO_Init+0x4e>
 8003bca:	2606      	movs	r6, #6
 8003bcc:	e774      	b.n	8003ab8 <HAL_GPIO_Init+0x54>
 8003bce:	2601      	movs	r6, #1
 8003bd0:	e772      	b.n	8003ab8 <HAL_GPIO_Init+0x54>
 8003bd2:	2602      	movs	r6, #2
 8003bd4:	e770      	b.n	8003ab8 <HAL_GPIO_Init+0x54>
 8003bd6:	2603      	movs	r6, #3
 8003bd8:	e76e      	b.n	8003ab8 <HAL_GPIO_Init+0x54>
 8003bda:	2604      	movs	r6, #4
 8003bdc:	e76c      	b.n	8003ab8 <HAL_GPIO_Init+0x54>
  }
}
 8003bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003be0:	40010000 	.word	0x40010000
 8003be4:	40010400 	.word	0x40010400
 8003be8:	40021000 	.word	0x40021000
 8003bec:	50000400 	.word	0x50000400
 8003bf0:	50000800 	.word	0x50000800
 8003bf4:	50000c00 	.word	0x50000c00
 8003bf8:	50001000 	.word	0x50001000
 8003bfc:	50001c00 	.word	0x50001c00

08003c00 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c00:	6903      	ldr	r3, [r0, #16]
 8003c02:	420b      	tst	r3, r1
 8003c04:	d001      	beq.n	8003c0a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8003c06:	2001      	movs	r0, #1
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003c08:	4770      	bx	lr
    bitstatus = GPIO_PIN_RESET;
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	e7fc      	b.n	8003c08 <HAL_GPIO_ReadPin+0x8>

08003c0e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c0e:	2a00      	cmp	r2, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c12:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003c14:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8003c16:	6281      	str	r1, [r0, #40]	; 0x28
}
 8003c18:	e7fc      	b.n	8003c14 <HAL_GPIO_WritePin+0x6>
	...

08003c1c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003c1c:	b570      	push	{r4, r5, r6, lr}
 8003c1e:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003c20:	d028      	beq.n	8003c74 <HAL_IWDG_Init+0x58>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003c22:	6803      	ldr	r3, [r0, #0]
 8003c24:	4a14      	ldr	r2, [pc, #80]	; (8003c78 <HAL_IWDG_Init+0x5c>)
 8003c26:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003c28:	6803      	ldr	r3, [r0, #0]
 8003c2a:	4a14      	ldr	r2, [pc, #80]	; (8003c7c <HAL_IWDG_Init+0x60>)
 8003c2c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003c2e:	6803      	ldr	r3, [r0, #0]
 8003c30:	6842      	ldr	r2, [r0, #4]
 8003c32:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003c34:	6803      	ldr	r3, [r0, #0]
 8003c36:	6882      	ldr	r2, [r0, #8]
 8003c38:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003c3a:	f7ff f8e5 	bl	8002e08 <HAL_GetTick>
 8003c3e:	0005      	movs	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003c40:	6823      	ldr	r3, [r4, #0]
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	0752      	lsls	r2, r2, #29
 8003c46:	d00a      	beq.n	8003c5e <HAL_IWDG_Init+0x42>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003c48:	f7ff f8de 	bl	8002e08 <HAL_GetTick>
 8003c4c:	1b40      	subs	r0, r0, r5
 8003c4e:	282a      	cmp	r0, #42	; 0x2a
 8003c50:	d9f6      	bls.n	8003c40 <HAL_IWDG_Init+0x24>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003c52:	6823      	ldr	r3, [r4, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	075b      	lsls	r3, r3, #29
 8003c58:	d0f2      	beq.n	8003c40 <HAL_IWDG_Init+0x24>
      {
        return HAL_TIMEOUT;
 8003c5a:	2003      	movs	r0, #3
 8003c5c:	e00b      	b.n	8003c76 <HAL_IWDG_Init+0x5a>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003c5e:	6919      	ldr	r1, [r3, #16]
 8003c60:	68e2      	ldr	r2, [r4, #12]
 8003c62:	4291      	cmp	r1, r2
 8003c64:	d002      	beq.n	8003c6c <HAL_IWDG_Init+0x50>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003c66:	611a      	str	r2, [r3, #16]
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
 8003c68:	2000      	movs	r0, #0
 8003c6a:	e004      	b.n	8003c76 <HAL_IWDG_Init+0x5a>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003c6c:	4a04      	ldr	r2, [pc, #16]	; (8003c80 <HAL_IWDG_Init+0x64>)
 8003c6e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003c70:	2000      	movs	r0, #0
 8003c72:	e000      	b.n	8003c76 <HAL_IWDG_Init+0x5a>
    return HAL_ERROR;
 8003c74:	2001      	movs	r0, #1
}
 8003c76:	bd70      	pop	{r4, r5, r6, pc}
 8003c78:	0000cccc 	.word	0x0000cccc
 8003c7c:	00005555 	.word	0x00005555
 8003c80:	0000aaaa 	.word	0x0000aaaa

08003c84 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003c84:	6803      	ldr	r3, [r0, #0]
 8003c86:	4a02      	ldr	r2, [pc, #8]	; (8003c90 <HAL_IWDG_Refresh+0xc>)
 8003c88:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	4770      	bx	lr
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	0000aaaa 	.word	0x0000aaaa

08003c94 <HAL_PWR_ConfigPVD>:
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 8003c94:	4a1c      	ldr	r2, [pc, #112]	; (8003d08 <HAL_PWR_ConfigPVD+0x74>)
 8003c96:	6813      	ldr	r3, [r2, #0]
 8003c98:	21e0      	movs	r1, #224	; 0xe0
 8003c9a:	438b      	bics	r3, r1
 8003c9c:	6801      	ldr	r1, [r0, #0]
 8003c9e:	430b      	orrs	r3, r1
 8003ca0:	6013      	str	r3, [r2, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8003ca2:	4b1a      	ldr	r3, [pc, #104]	; (8003d0c <HAL_PWR_ConfigPVD+0x78>)
 8003ca4:	6859      	ldr	r1, [r3, #4]
 8003ca6:	4a1a      	ldr	r2, [pc, #104]	; (8003d10 <HAL_PWR_ConfigPVD+0x7c>)
 8003ca8:	4011      	ands	r1, r2
 8003caa:	6059      	str	r1, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8003cac:	6819      	ldr	r1, [r3, #0]
 8003cae:	4011      	ands	r1, r2
 8003cb0:	6019      	str	r1, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8003cb2:	68d9      	ldr	r1, [r3, #12]
 8003cb4:	4011      	ands	r1, r2
 8003cb6:	60d9      	str	r1, [r3, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8003cb8:	6899      	ldr	r1, [r3, #8]
 8003cba:	400a      	ands	r2, r1
 8003cbc:	609a      	str	r2, [r3, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8003cbe:	6843      	ldr	r3, [r0, #4]
 8003cc0:	03db      	lsls	r3, r3, #15
 8003cc2:	d505      	bpl.n	8003cd0 <HAL_PWR_ConfigPVD+0x3c>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8003cc4:	4a11      	ldr	r2, [pc, #68]	; (8003d0c <HAL_PWR_ConfigPVD+0x78>)
 8003cc6:	6811      	ldr	r1, [r2, #0]
 8003cc8:	2380      	movs	r3, #128	; 0x80
 8003cca:	025b      	lsls	r3, r3, #9
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	6013      	str	r3, [r2, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8003cd0:	6843      	ldr	r3, [r0, #4]
 8003cd2:	039b      	lsls	r3, r3, #14
 8003cd4:	d505      	bpl.n	8003ce2 <HAL_PWR_ConfigPVD+0x4e>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8003cd6:	4a0d      	ldr	r2, [pc, #52]	; (8003d0c <HAL_PWR_ConfigPVD+0x78>)
 8003cd8:	6851      	ldr	r1, [r2, #4]
 8003cda:	2380      	movs	r3, #128	; 0x80
 8003cdc:	025b      	lsls	r3, r3, #9
 8003cde:	430b      	orrs	r3, r1
 8003ce0:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8003ce2:	6843      	ldr	r3, [r0, #4]
 8003ce4:	07db      	lsls	r3, r3, #31
 8003ce6:	d505      	bpl.n	8003cf4 <HAL_PWR_ConfigPVD+0x60>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8003ce8:	4a08      	ldr	r2, [pc, #32]	; (8003d0c <HAL_PWR_ConfigPVD+0x78>)
 8003cea:	6891      	ldr	r1, [r2, #8]
 8003cec:	2380      	movs	r3, #128	; 0x80
 8003cee:	025b      	lsls	r3, r3, #9
 8003cf0:	430b      	orrs	r3, r1
 8003cf2:	6093      	str	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8003cf4:	6843      	ldr	r3, [r0, #4]
 8003cf6:	079b      	lsls	r3, r3, #30
 8003cf8:	d505      	bpl.n	8003d06 <HAL_PWR_ConfigPVD+0x72>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8003cfa:	4a04      	ldr	r2, [pc, #16]	; (8003d0c <HAL_PWR_ConfigPVD+0x78>)
 8003cfc:	68d1      	ldr	r1, [r2, #12]
 8003cfe:	2380      	movs	r3, #128	; 0x80
 8003d00:	025b      	lsls	r3, r3, #9
 8003d02:	430b      	orrs	r3, r1
 8003d04:	60d3      	str	r3, [r2, #12]
  }
}
 8003d06:	4770      	bx	lr
 8003d08:	40007000 	.word	0x40007000
 8003d0c:	40010400 	.word	0x40010400
 8003d10:	fffeffff 	.word	0xfffeffff

08003d14 <HAL_PWR_EnablePVD>:
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR, PWR_CR_PVDE);
 8003d14:	4a02      	ldr	r2, [pc, #8]	; (8003d20 <HAL_PWR_EnablePVD+0xc>)
 8003d16:	6813      	ldr	r3, [r2, #0]
 8003d18:	2110      	movs	r1, #16
 8003d1a:	430b      	orrs	r3, r1
 8003d1c:	6013      	str	r3, [r2, #0]
}
 8003d1e:	4770      	bx	lr
 8003d20:	40007000 	.word	0x40007000

08003d24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d24:	b510      	push	{r4, lr}
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003d26:	4b26      	ldr	r3, [pc, #152]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d28:	68da      	ldr	r2, [r3, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d2a:	230c      	movs	r3, #12
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	d042      	beq.n	8003db8 <HAL_RCC_GetSysClockFreq+0x94>
 8003d32:	2b0c      	cmp	r3, #12
 8003d34:	d011      	beq.n	8003d5a <HAL_RCC_GetSysClockFreq+0x36>
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	d009      	beq.n	8003d4e <HAL_RCC_GetSysClockFreq+0x2a>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003d3a:	4b21      	ldr	r3, [pc, #132]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	0b52      	lsrs	r2, r2, #13
 8003d40:	2307      	movs	r3, #7
 8003d42:	4013      	ands	r3, r2
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003d44:	3301      	adds	r3, #1
 8003d46:	2080      	movs	r0, #128	; 0x80
 8003d48:	0200      	lsls	r0, r0, #8
 8003d4a:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 8003d4c:	bd10      	pop	{r4, pc}
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003d4e:	4b1c      	ldr	r3, [pc, #112]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	06db      	lsls	r3, r3, #27
 8003d54:	d532      	bpl.n	8003dbc <HAL_RCC_GetSysClockFreq+0x98>
        sysclockfreq =  (HSI_VALUE >> 2);
 8003d56:	481b      	ldr	r0, [pc, #108]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d58:	e7f8      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x28>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003d5a:	0c91      	lsrs	r1, r2, #18
 8003d5c:	230f      	movs	r3, #15
 8003d5e:	400b      	ands	r3, r1
 8003d60:	4919      	ldr	r1, [pc, #100]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d62:	5cc8      	ldrb	r0, [r1, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003d64:	0d92      	lsrs	r2, r2, #22
 8003d66:	2303      	movs	r3, #3
 8003d68:	401a      	ands	r2, r3
 8003d6a:	1c54      	adds	r4, r2, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d6c:	4b14      	ldr	r3, [pc, #80]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	03db      	lsls	r3, r3, #15
 8003d72:	d509      	bpl.n	8003d88 <HAL_RCC_GetSysClockFreq+0x64>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003d74:	4a15      	ldr	r2, [pc, #84]	; (8003dcc <HAL_RCC_GetSysClockFreq+0xa8>)
 8003d76:	2300      	movs	r3, #0
 8003d78:	2100      	movs	r1, #0
 8003d7a:	f7fc fbef 	bl	800055c <__aeabi_lmul>
 8003d7e:	0022      	movs	r2, r4
 8003d80:	2300      	movs	r3, #0
 8003d82:	f7fc fbcb 	bl	800051c <__aeabi_uldivmod>
 8003d86:	e7e1      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x28>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003d88:	4b0d      	ldr	r3, [pc, #52]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	06db      	lsls	r3, r3, #27
 8003d8e:	d509      	bpl.n	8003da4 <HAL_RCC_GetSysClockFreq+0x80>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003d90:	4a0c      	ldr	r2, [pc, #48]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d92:	2300      	movs	r3, #0
 8003d94:	2100      	movs	r1, #0
 8003d96:	f7fc fbe1 	bl	800055c <__aeabi_lmul>
 8003d9a:	0022      	movs	r2, r4
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	f7fc fbbd 	bl	800051c <__aeabi_uldivmod>
 8003da2:	e7d3      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x28>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003da4:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xac>)
 8003da6:	2300      	movs	r3, #0
 8003da8:	2100      	movs	r1, #0
 8003daa:	f7fc fbd7 	bl	800055c <__aeabi_lmul>
 8003dae:	0022      	movs	r2, r4
 8003db0:	2300      	movs	r3, #0
 8003db2:	f7fc fbb3 	bl	800051c <__aeabi_uldivmod>
 8003db6:	e7c9      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x28>
  switch (tmpreg & RCC_CFGR_SWS)
 8003db8:	4804      	ldr	r0, [pc, #16]	; (8003dcc <HAL_RCC_GetSysClockFreq+0xa8>)
 8003dba:	e7c7      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x28>
        sysclockfreq =  HSI_VALUE;
 8003dbc:	4804      	ldr	r0, [pc, #16]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xac>)
  return sysclockfreq;
 8003dbe:	e7c5      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x28>
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	003d0900 	.word	0x003d0900
 8003dc8:	0800e8e0 	.word	0x0800e8e0
 8003dcc:	007a1200 	.word	0x007a1200
 8003dd0:	00f42400 	.word	0x00f42400

08003dd4 <HAL_RCC_OscConfig>:
{
 8003dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	1e04      	subs	r4, r0, #0
  if(RCC_OscInitStruct == NULL)
 8003dda:	d100      	bne.n	8003dde <HAL_RCC_OscConfig+0xa>
 8003ddc:	e29f      	b.n	800431e <HAL_RCC_OscConfig+0x54a>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dde:	4bc5      	ldr	r3, [pc, #788]	; (80040f4 <HAL_RCC_OscConfig+0x320>)
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	250c      	movs	r5, #12
 8003de4:	4015      	ands	r5, r2
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003de6:	68de      	ldr	r6, [r3, #12]
 8003de8:	2380      	movs	r3, #128	; 0x80
 8003dea:	025b      	lsls	r3, r3, #9
 8003dec:	401e      	ands	r6, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dee:	6803      	ldr	r3, [r0, #0]
 8003df0:	07db      	lsls	r3, r3, #31
 8003df2:	d536      	bpl.n	8003e62 <HAL_RCC_OscConfig+0x8e>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003df4:	2d08      	cmp	r5, #8
 8003df6:	d02c      	beq.n	8003e52 <HAL_RCC_OscConfig+0x7e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003df8:	2d0c      	cmp	r5, #12
 8003dfa:	d028      	beq.n	8003e4e <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dfc:	6863      	ldr	r3, [r4, #4]
 8003dfe:	2280      	movs	r2, #128	; 0x80
 8003e00:	0252      	lsls	r2, r2, #9
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d055      	beq.n	8003eb2 <HAL_RCC_OscConfig+0xde>
 8003e06:	22a0      	movs	r2, #160	; 0xa0
 8003e08:	02d2      	lsls	r2, r2, #11
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d058      	beq.n	8003ec0 <HAL_RCC_OscConfig+0xec>
 8003e0e:	4bb9      	ldr	r3, [pc, #740]	; (80040f4 <HAL_RCC_OscConfig+0x320>)
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	49b9      	ldr	r1, [pc, #740]	; (80040f8 <HAL_RCC_OscConfig+0x324>)
 8003e14:	400a      	ands	r2, r1
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	2180      	movs	r1, #128	; 0x80
 8003e1c:	0249      	lsls	r1, r1, #9
 8003e1e:	400a      	ands	r2, r1
 8003e20:	9201      	str	r2, [sp, #4]
 8003e22:	9a01      	ldr	r2, [sp, #4]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	49b5      	ldr	r1, [pc, #724]	; (80040fc <HAL_RCC_OscConfig+0x328>)
 8003e28:	400a      	ands	r2, r1
 8003e2a:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e2c:	6863      	ldr	r3, [r4, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d052      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();
 8003e32:	f7fe ffe9 	bl	8002e08 <HAL_GetTick>
 8003e36:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e38:	4bae      	ldr	r3, [pc, #696]	; (80040f4 <HAL_RCC_OscConfig+0x320>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	039b      	lsls	r3, r3, #14
 8003e3e:	d410      	bmi.n	8003e62 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e40:	f7fe ffe2 	bl	8002e08 <HAL_GetTick>
 8003e44:	1bc0      	subs	r0, r0, r7
 8003e46:	2864      	cmp	r0, #100	; 0x64
 8003e48:	d9f6      	bls.n	8003e38 <HAL_RCC_OscConfig+0x64>
            return HAL_TIMEOUT;
 8003e4a:	2003      	movs	r0, #3
 8003e4c:	e268      	b.n	8004320 <HAL_RCC_OscConfig+0x54c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e4e:	2e00      	cmp	r6, #0
 8003e50:	d0d4      	beq.n	8003dfc <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e52:	4ba8      	ldr	r3, [pc, #672]	; (80040f4 <HAL_RCC_OscConfig+0x320>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	039b      	lsls	r3, r3, #14
 8003e58:	d503      	bpl.n	8003e62 <HAL_RCC_OscConfig+0x8e>
 8003e5a:	6863      	ldr	r3, [r4, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d100      	bne.n	8003e62 <HAL_RCC_OscConfig+0x8e>
 8003e60:	e260      	b.n	8004324 <HAL_RCC_OscConfig+0x550>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e62:	6823      	ldr	r3, [r4, #0]
 8003e64:	079b      	lsls	r3, r3, #30
 8003e66:	d56d      	bpl.n	8003f44 <HAL_RCC_OscConfig+0x170>
    hsi_state = RCC_OscInitStruct->HSIState;
 8003e68:	68e3      	ldr	r3, [r4, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003e6a:	069a      	lsls	r2, r3, #26
 8003e6c:	d505      	bpl.n	8003e7a <HAL_RCC_OscConfig+0xa6>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003e6e:	48a1      	ldr	r0, [pc, #644]	; (80040f4 <HAL_RCC_OscConfig+0x320>)
 8003e70:	6802      	ldr	r2, [r0, #0]
 8003e72:	2120      	movs	r1, #32
 8003e74:	430a      	orrs	r2, r1
 8003e76:	6002      	str	r2, [r0, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003e78:	438b      	bics	r3, r1
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e7a:	2d04      	cmp	r5, #4
 8003e7c:	d03c      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x124>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e7e:	2d0c      	cmp	r5, #12
 8003e80:	d038      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x120>
      if(hsi_state != RCC_HSI_OFF)
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d100      	bne.n	8003e88 <HAL_RCC_OscConfig+0xb4>
 8003e86:	e0b0      	b.n	8003fea <HAL_RCC_OscConfig+0x216>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003e88:	499a      	ldr	r1, [pc, #616]	; (80040f4 <HAL_RCC_OscConfig+0x320>)
 8003e8a:	680a      	ldr	r2, [r1, #0]
 8003e8c:	2009      	movs	r0, #9
 8003e8e:	4382      	bics	r2, r0
 8003e90:	4313      	orrs	r3, r2
 8003e92:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8003e94:	f7fe ffb8 	bl	8002e08 <HAL_GetTick>
 8003e98:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e9a:	4b96      	ldr	r3, [pc, #600]	; (80040f4 <HAL_RCC_OscConfig+0x320>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	075b      	lsls	r3, r3, #29
 8003ea0:	d500      	bpl.n	8003ea4 <HAL_RCC_OscConfig+0xd0>
 8003ea2:	e099      	b.n	8003fd8 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ea4:	f7fe ffb0 	bl	8002e08 <HAL_GetTick>
 8003ea8:	1b80      	subs	r0, r0, r6
 8003eaa:	2802      	cmp	r0, #2
 8003eac:	d9f5      	bls.n	8003e9a <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8003eae:	2003      	movs	r0, #3
 8003eb0:	e236      	b.n	8004320 <HAL_RCC_OscConfig+0x54c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eb2:	4a90      	ldr	r2, [pc, #576]	; (80040f4 <HAL_RCC_OscConfig+0x320>)
 8003eb4:	6811      	ldr	r1, [r2, #0]
 8003eb6:	2380      	movs	r3, #128	; 0x80
 8003eb8:	025b      	lsls	r3, r3, #9
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	e7b5      	b.n	8003e2c <HAL_RCC_OscConfig+0x58>
 8003ec0:	4b8c      	ldr	r3, [pc, #560]	; (80040f4 <HAL_RCC_OscConfig+0x320>)
 8003ec2:	6819      	ldr	r1, [r3, #0]
 8003ec4:	2280      	movs	r2, #128	; 0x80
 8003ec6:	02d2      	lsls	r2, r2, #11
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	6819      	ldr	r1, [r3, #0]
 8003ece:	2280      	movs	r2, #128	; 0x80
 8003ed0:	0252      	lsls	r2, r2, #9
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	e7a9      	b.n	8003e2c <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 8003ed8:	f7fe ff96 	bl	8002e08 <HAL_GetTick>
 8003edc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ede:	4b85      	ldr	r3, [pc, #532]	; (80040f4 <HAL_RCC_OscConfig+0x320>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	039b      	lsls	r3, r3, #14
 8003ee4:	d5bd      	bpl.n	8003e62 <HAL_RCC_OscConfig+0x8e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ee6:	f7fe ff8f 	bl	8002e08 <HAL_GetTick>
 8003eea:	1bc0      	subs	r0, r0, r7
 8003eec:	2864      	cmp	r0, #100	; 0x64
 8003eee:	d9f6      	bls.n	8003ede <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8003ef0:	2003      	movs	r0, #3
 8003ef2:	e215      	b.n	8004320 <HAL_RCC_OscConfig+0x54c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ef4:	2e00      	cmp	r6, #0
 8003ef6:	d1c4      	bne.n	8003e82 <HAL_RCC_OscConfig+0xae>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003ef8:	4a7e      	ldr	r2, [pc, #504]	; (80040f4 <HAL_RCC_OscConfig+0x320>)
 8003efa:	6812      	ldr	r2, [r2, #0]
 8003efc:	0752      	lsls	r2, r2, #29
 8003efe:	d502      	bpl.n	8003f06 <HAL_RCC_OscConfig+0x132>
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d100      	bne.n	8003f06 <HAL_RCC_OscConfig+0x132>
 8003f04:	e210      	b.n	8004328 <HAL_RCC_OscConfig+0x554>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f06:	4e7b      	ldr	r6, [pc, #492]	; (80040f4 <HAL_RCC_OscConfig+0x320>)
 8003f08:	6872      	ldr	r2, [r6, #4]
 8003f0a:	497d      	ldr	r1, [pc, #500]	; (8004100 <HAL_RCC_OscConfig+0x32c>)
 8003f0c:	400a      	ands	r2, r1
 8003f0e:	6921      	ldr	r1, [r4, #16]
 8003f10:	0209      	lsls	r1, r1, #8
 8003f12:	430a      	orrs	r2, r1
 8003f14:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003f16:	6832      	ldr	r2, [r6, #0]
 8003f18:	2109      	movs	r1, #9
 8003f1a:	438a      	bics	r2, r1
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f20:	f7ff ff00 	bl	8003d24 <HAL_RCC_GetSysClockFreq>
 8003f24:	68f2      	ldr	r2, [r6, #12]
 8003f26:	0912      	lsrs	r2, r2, #4
 8003f28:	230f      	movs	r3, #15
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	4a75      	ldr	r2, [pc, #468]	; (8004104 <HAL_RCC_OscConfig+0x330>)
 8003f2e:	5cd3      	ldrb	r3, [r2, r3]
 8003f30:	40d8      	lsrs	r0, r3
 8003f32:	4b75      	ldr	r3, [pc, #468]	; (8004108 <HAL_RCC_OscConfig+0x334>)
 8003f34:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8003f36:	4b75      	ldr	r3, [pc, #468]	; (800410c <HAL_RCC_OscConfig+0x338>)
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	f005 f87d 	bl	8009038 <HAL_InitTick>
      if(status != HAL_OK)
 8003f3e:	2800      	cmp	r0, #0
 8003f40:	d000      	beq.n	8003f44 <HAL_RCC_OscConfig+0x170>
 8003f42:	e1ed      	b.n	8004320 <HAL_RCC_OscConfig+0x54c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	06db      	lsls	r3, r3, #27
 8003f48:	d52d      	bpl.n	8003fa6 <HAL_RCC_OscConfig+0x1d2>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f4a:	2d00      	cmp	r5, #0
 8003f4c:	d160      	bne.n	8004010 <HAL_RCC_OscConfig+0x23c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f4e:	4b69      	ldr	r3, [pc, #420]	; (80040f4 <HAL_RCC_OscConfig+0x320>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	059b      	lsls	r3, r3, #22
 8003f54:	d503      	bpl.n	8003f5e <HAL_RCC_OscConfig+0x18a>
 8003f56:	69e3      	ldr	r3, [r4, #28]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d100      	bne.n	8003f5e <HAL_RCC_OscConfig+0x18a>
 8003f5c:	e1e6      	b.n	800432c <HAL_RCC_OscConfig+0x558>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f5e:	4a65      	ldr	r2, [pc, #404]	; (80040f4 <HAL_RCC_OscConfig+0x320>)
 8003f60:	6853      	ldr	r3, [r2, #4]
 8003f62:	496b      	ldr	r1, [pc, #428]	; (8004110 <HAL_RCC_OscConfig+0x33c>)
 8003f64:	400b      	ands	r3, r1
 8003f66:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f6c:	6853      	ldr	r3, [r2, #4]
 8003f6e:	021b      	lsls	r3, r3, #8
 8003f70:	0a1b      	lsrs	r3, r3, #8
 8003f72:	6a21      	ldr	r1, [r4, #32]
 8003f74:	0609      	lsls	r1, r1, #24
 8003f76:	430b      	orrs	r3, r1
 8003f78:	6053      	str	r3, [r2, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003f7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f7c:	0b59      	lsrs	r1, r3, #13
 8003f7e:	3101      	adds	r1, #1
 8003f80:	2380      	movs	r3, #128	; 0x80
 8003f82:	021b      	lsls	r3, r3, #8
 8003f84:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003f86:	68d1      	ldr	r1, [r2, #12]
 8003f88:	0909      	lsrs	r1, r1, #4
 8003f8a:	220f      	movs	r2, #15
 8003f8c:	400a      	ands	r2, r1
 8003f8e:	495d      	ldr	r1, [pc, #372]	; (8004104 <HAL_RCC_OscConfig+0x330>)
 8003f90:	5c8a      	ldrb	r2, [r1, r2]
 8003f92:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003f94:	4a5c      	ldr	r2, [pc, #368]	; (8004108 <HAL_RCC_OscConfig+0x334>)
 8003f96:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8003f98:	4b5c      	ldr	r3, [pc, #368]	; (800410c <HAL_RCC_OscConfig+0x338>)
 8003f9a:	6818      	ldr	r0, [r3, #0]
 8003f9c:	f005 f84c 	bl	8009038 <HAL_InitTick>
        if(status != HAL_OK)
 8003fa0:	2800      	cmp	r0, #0
 8003fa2:	d000      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x1d2>
 8003fa4:	e1bc      	b.n	8004320 <HAL_RCC_OscConfig+0x54c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	071b      	lsls	r3, r3, #28
 8003faa:	d57d      	bpl.n	80040a8 <HAL_RCC_OscConfig+0x2d4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fac:	6963      	ldr	r3, [r4, #20]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d067      	beq.n	8004082 <HAL_RCC_OscConfig+0x2ae>
      __HAL_RCC_LSI_ENABLE();
 8003fb2:	4a50      	ldr	r2, [pc, #320]	; (80040f4 <HAL_RCC_OscConfig+0x320>)
 8003fb4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	430b      	orrs	r3, r1
 8003fba:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003fbc:	f7fe ff24 	bl	8002e08 <HAL_GetTick>
 8003fc0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003fc2:	4b4c      	ldr	r3, [pc, #304]	; (80040f4 <HAL_RCC_OscConfig+0x320>)
 8003fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc6:	079b      	lsls	r3, r3, #30
 8003fc8:	d46e      	bmi.n	80040a8 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fca:	f7fe ff1d 	bl	8002e08 <HAL_GetTick>
 8003fce:	1b80      	subs	r0, r0, r6
 8003fd0:	2802      	cmp	r0, #2
 8003fd2:	d9f6      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x1ee>
          return HAL_TIMEOUT;
 8003fd4:	2003      	movs	r0, #3
 8003fd6:	e1a3      	b.n	8004320 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd8:	4946      	ldr	r1, [pc, #280]	; (80040f4 <HAL_RCC_OscConfig+0x320>)
 8003fda:	684b      	ldr	r3, [r1, #4]
 8003fdc:	4a48      	ldr	r2, [pc, #288]	; (8004100 <HAL_RCC_OscConfig+0x32c>)
 8003fde:	4013      	ands	r3, r2
 8003fe0:	6922      	ldr	r2, [r4, #16]
 8003fe2:	0212      	lsls	r2, r2, #8
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	604b      	str	r3, [r1, #4]
 8003fe8:	e7ac      	b.n	8003f44 <HAL_RCC_OscConfig+0x170>
        __HAL_RCC_HSI_DISABLE();
 8003fea:	4a42      	ldr	r2, [pc, #264]	; (80040f4 <HAL_RCC_OscConfig+0x320>)
 8003fec:	6813      	ldr	r3, [r2, #0]
 8003fee:	2101      	movs	r1, #1
 8003ff0:	438b      	bics	r3, r1
 8003ff2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003ff4:	f7fe ff08 	bl	8002e08 <HAL_GetTick>
 8003ff8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ffa:	4b3e      	ldr	r3, [pc, #248]	; (80040f4 <HAL_RCC_OscConfig+0x320>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	075b      	lsls	r3, r3, #29
 8004000:	d5a0      	bpl.n	8003f44 <HAL_RCC_OscConfig+0x170>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004002:	f7fe ff01 	bl	8002e08 <HAL_GetTick>
 8004006:	1b80      	subs	r0, r0, r6
 8004008:	2802      	cmp	r0, #2
 800400a:	d9f6      	bls.n	8003ffa <HAL_RCC_OscConfig+0x226>
            return HAL_TIMEOUT;
 800400c:	2003      	movs	r0, #3
 800400e:	e187      	b.n	8004320 <HAL_RCC_OscConfig+0x54c>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004010:	69e3      	ldr	r3, [r4, #28]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d022      	beq.n	800405c <HAL_RCC_OscConfig+0x288>
        __HAL_RCC_MSI_ENABLE();
 8004016:	4a37      	ldr	r2, [pc, #220]	; (80040f4 <HAL_RCC_OscConfig+0x320>)
 8004018:	6811      	ldr	r1, [r2, #0]
 800401a:	2380      	movs	r3, #128	; 0x80
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	430b      	orrs	r3, r1
 8004020:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004022:	f7fe fef1 	bl	8002e08 <HAL_GetTick>
 8004026:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004028:	4b32      	ldr	r3, [pc, #200]	; (80040f4 <HAL_RCC_OscConfig+0x320>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	059b      	lsls	r3, r3, #22
 800402e:	d406      	bmi.n	800403e <HAL_RCC_OscConfig+0x26a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004030:	f7fe feea 	bl	8002e08 <HAL_GetTick>
 8004034:	1b80      	subs	r0, r0, r6
 8004036:	2802      	cmp	r0, #2
 8004038:	d9f6      	bls.n	8004028 <HAL_RCC_OscConfig+0x254>
            return HAL_TIMEOUT;
 800403a:	2003      	movs	r0, #3
 800403c:	e170      	b.n	8004320 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800403e:	4a2d      	ldr	r2, [pc, #180]	; (80040f4 <HAL_RCC_OscConfig+0x320>)
 8004040:	6853      	ldr	r3, [r2, #4]
 8004042:	4933      	ldr	r1, [pc, #204]	; (8004110 <HAL_RCC_OscConfig+0x33c>)
 8004044:	400b      	ands	r3, r1
 8004046:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004048:	430b      	orrs	r3, r1
 800404a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800404c:	6853      	ldr	r3, [r2, #4]
 800404e:	021b      	lsls	r3, r3, #8
 8004050:	0a1b      	lsrs	r3, r3, #8
 8004052:	6a21      	ldr	r1, [r4, #32]
 8004054:	0609      	lsls	r1, r1, #24
 8004056:	430b      	orrs	r3, r1
 8004058:	6053      	str	r3, [r2, #4]
 800405a:	e7a4      	b.n	8003fa6 <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_MSI_DISABLE();
 800405c:	4a25      	ldr	r2, [pc, #148]	; (80040f4 <HAL_RCC_OscConfig+0x320>)
 800405e:	6813      	ldr	r3, [r2, #0]
 8004060:	492c      	ldr	r1, [pc, #176]	; (8004114 <HAL_RCC_OscConfig+0x340>)
 8004062:	400b      	ands	r3, r1
 8004064:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004066:	f7fe fecf 	bl	8002e08 <HAL_GetTick>
 800406a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800406c:	4b21      	ldr	r3, [pc, #132]	; (80040f4 <HAL_RCC_OscConfig+0x320>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	059b      	lsls	r3, r3, #22
 8004072:	d598      	bpl.n	8003fa6 <HAL_RCC_OscConfig+0x1d2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004074:	f7fe fec8 	bl	8002e08 <HAL_GetTick>
 8004078:	1b80      	subs	r0, r0, r6
 800407a:	2802      	cmp	r0, #2
 800407c:	d9f6      	bls.n	800406c <HAL_RCC_OscConfig+0x298>
            return HAL_TIMEOUT;
 800407e:	2003      	movs	r0, #3
 8004080:	e14e      	b.n	8004320 <HAL_RCC_OscConfig+0x54c>
      __HAL_RCC_LSI_DISABLE();
 8004082:	4a1c      	ldr	r2, [pc, #112]	; (80040f4 <HAL_RCC_OscConfig+0x320>)
 8004084:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004086:	2101      	movs	r1, #1
 8004088:	438b      	bics	r3, r1
 800408a:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 800408c:	f7fe febc 	bl	8002e08 <HAL_GetTick>
 8004090:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004092:	4b18      	ldr	r3, [pc, #96]	; (80040f4 <HAL_RCC_OscConfig+0x320>)
 8004094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004096:	079b      	lsls	r3, r3, #30
 8004098:	d506      	bpl.n	80040a8 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800409a:	f7fe feb5 	bl	8002e08 <HAL_GetTick>
 800409e:	1b80      	subs	r0, r0, r6
 80040a0:	2802      	cmp	r0, #2
 80040a2:	d9f6      	bls.n	8004092 <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 80040a4:	2003      	movs	r0, #3
 80040a6:	e13b      	b.n	8004320 <HAL_RCC_OscConfig+0x54c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	075b      	lsls	r3, r3, #29
 80040ac:	d400      	bmi.n	80040b0 <HAL_RCC_OscConfig+0x2dc>
 80040ae:	e08e      	b.n	80041ce <HAL_RCC_OscConfig+0x3fa>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040b0:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <HAL_RCC_OscConfig+0x320>)
 80040b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	d41b      	bmi.n	80040f0 <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_PWR_CLK_ENABLE();
 80040b8:	4a0e      	ldr	r2, [pc, #56]	; (80040f4 <HAL_RCC_OscConfig+0x320>)
 80040ba:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80040bc:	2380      	movs	r3, #128	; 0x80
 80040be:	055b      	lsls	r3, r3, #21
 80040c0:	430b      	orrs	r3, r1
 80040c2:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 80040c4:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c6:	4b14      	ldr	r3, [pc, #80]	; (8004118 <HAL_RCC_OscConfig+0x344>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	05db      	lsls	r3, r3, #23
 80040cc:	d528      	bpl.n	8004120 <HAL_RCC_OscConfig+0x34c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ce:	68a3      	ldr	r3, [r4, #8]
 80040d0:	2280      	movs	r2, #128	; 0x80
 80040d2:	0052      	lsls	r2, r2, #1
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d037      	beq.n	8004148 <HAL_RCC_OscConfig+0x374>
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d14d      	bne.n	8004178 <HAL_RCC_OscConfig+0x3a4>
 80040dc:	4b05      	ldr	r3, [pc, #20]	; (80040f4 <HAL_RCC_OscConfig+0x320>)
 80040de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80040e0:	490c      	ldr	r1, [pc, #48]	; (8004114 <HAL_RCC_OscConfig+0x340>)
 80040e2:	400a      	ands	r2, r1
 80040e4:	651a      	str	r2, [r3, #80]	; 0x50
 80040e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80040e8:	490c      	ldr	r1, [pc, #48]	; (800411c <HAL_RCC_OscConfig+0x348>)
 80040ea:	400a      	ands	r2, r1
 80040ec:	651a      	str	r2, [r3, #80]	; 0x50
 80040ee:	e031      	b.n	8004154 <HAL_RCC_OscConfig+0x380>
    FlagStatus       pwrclkchanged = RESET;
 80040f0:	2600      	movs	r6, #0
 80040f2:	e7e8      	b.n	80040c6 <HAL_RCC_OscConfig+0x2f2>
 80040f4:	40021000 	.word	0x40021000
 80040f8:	fffeffff 	.word	0xfffeffff
 80040fc:	fffbffff 	.word	0xfffbffff
 8004100:	ffffe0ff 	.word	0xffffe0ff
 8004104:	0800e8c8 	.word	0x0800e8c8
 8004108:	2000000c 	.word	0x2000000c
 800410c:	20000004 	.word	0x20000004
 8004110:	ffff1fff 	.word	0xffff1fff
 8004114:	fffffeff 	.word	0xfffffeff
 8004118:	40007000 	.word	0x40007000
 800411c:	fffffbff 	.word	0xfffffbff
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004120:	4a88      	ldr	r2, [pc, #544]	; (8004344 <HAL_RCC_OscConfig+0x570>)
 8004122:	6811      	ldr	r1, [r2, #0]
 8004124:	2380      	movs	r3, #128	; 0x80
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	430b      	orrs	r3, r1
 800412a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800412c:	f7fe fe6c 	bl	8002e08 <HAL_GetTick>
 8004130:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004132:	4b84      	ldr	r3, [pc, #528]	; (8004344 <HAL_RCC_OscConfig+0x570>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	05db      	lsls	r3, r3, #23
 8004138:	d4c9      	bmi.n	80040ce <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800413a:	f7fe fe65 	bl	8002e08 <HAL_GetTick>
 800413e:	1bc0      	subs	r0, r0, r7
 8004140:	2864      	cmp	r0, #100	; 0x64
 8004142:	d9f6      	bls.n	8004132 <HAL_RCC_OscConfig+0x35e>
          return HAL_TIMEOUT;
 8004144:	2003      	movs	r0, #3
 8004146:	e0eb      	b.n	8004320 <HAL_RCC_OscConfig+0x54c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004148:	4a7f      	ldr	r2, [pc, #508]	; (8004348 <HAL_RCC_OscConfig+0x574>)
 800414a:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800414c:	2380      	movs	r3, #128	; 0x80
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	430b      	orrs	r3, r1
 8004152:	6513      	str	r3, [r2, #80]	; 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004154:	68a3      	ldr	r3, [r4, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d028      	beq.n	80041ac <HAL_RCC_OscConfig+0x3d8>
      tickstart = HAL_GetTick();
 800415a:	f7fe fe55 	bl	8002e08 <HAL_GetTick>
 800415e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004160:	4b79      	ldr	r3, [pc, #484]	; (8004348 <HAL_RCC_OscConfig+0x574>)
 8004162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004164:	059b      	lsls	r3, r3, #22
 8004166:	d430      	bmi.n	80041ca <HAL_RCC_OscConfig+0x3f6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004168:	f7fe fe4e 	bl	8002e08 <HAL_GetTick>
 800416c:	1bc0      	subs	r0, r0, r7
 800416e:	4b77      	ldr	r3, [pc, #476]	; (800434c <HAL_RCC_OscConfig+0x578>)
 8004170:	4298      	cmp	r0, r3
 8004172:	d9f5      	bls.n	8004160 <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 8004174:	2003      	movs	r0, #3
 8004176:	e0d3      	b.n	8004320 <HAL_RCC_OscConfig+0x54c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004178:	22a0      	movs	r2, #160	; 0xa0
 800417a:	00d2      	lsls	r2, r2, #3
 800417c:	4293      	cmp	r3, r2
 800417e:	d009      	beq.n	8004194 <HAL_RCC_OscConfig+0x3c0>
 8004180:	4b71      	ldr	r3, [pc, #452]	; (8004348 <HAL_RCC_OscConfig+0x574>)
 8004182:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004184:	4972      	ldr	r1, [pc, #456]	; (8004350 <HAL_RCC_OscConfig+0x57c>)
 8004186:	400a      	ands	r2, r1
 8004188:	651a      	str	r2, [r3, #80]	; 0x50
 800418a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800418c:	4971      	ldr	r1, [pc, #452]	; (8004354 <HAL_RCC_OscConfig+0x580>)
 800418e:	400a      	ands	r2, r1
 8004190:	651a      	str	r2, [r3, #80]	; 0x50
 8004192:	e7df      	b.n	8004154 <HAL_RCC_OscConfig+0x380>
 8004194:	4b6c      	ldr	r3, [pc, #432]	; (8004348 <HAL_RCC_OscConfig+0x574>)
 8004196:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004198:	3a01      	subs	r2, #1
 800419a:	3aff      	subs	r2, #255	; 0xff
 800419c:	430a      	orrs	r2, r1
 800419e:	651a      	str	r2, [r3, #80]	; 0x50
 80041a0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80041a2:	2280      	movs	r2, #128	; 0x80
 80041a4:	0052      	lsls	r2, r2, #1
 80041a6:	430a      	orrs	r2, r1
 80041a8:	651a      	str	r2, [r3, #80]	; 0x50
 80041aa:	e7d3      	b.n	8004154 <HAL_RCC_OscConfig+0x380>
      tickstart = HAL_GetTick();
 80041ac:	f7fe fe2c 	bl	8002e08 <HAL_GetTick>
 80041b0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80041b2:	4b65      	ldr	r3, [pc, #404]	; (8004348 <HAL_RCC_OscConfig+0x574>)
 80041b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b6:	059b      	lsls	r3, r3, #22
 80041b8:	d507      	bpl.n	80041ca <HAL_RCC_OscConfig+0x3f6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041ba:	f7fe fe25 	bl	8002e08 <HAL_GetTick>
 80041be:	1bc0      	subs	r0, r0, r7
 80041c0:	4b62      	ldr	r3, [pc, #392]	; (800434c <HAL_RCC_OscConfig+0x578>)
 80041c2:	4298      	cmp	r0, r3
 80041c4:	d9f5      	bls.n	80041b2 <HAL_RCC_OscConfig+0x3de>
          return HAL_TIMEOUT;
 80041c6:	2003      	movs	r0, #3
 80041c8:	e0aa      	b.n	8004320 <HAL_RCC_OscConfig+0x54c>
    if(pwrclkchanged == SET)
 80041ca:	2e01      	cmp	r6, #1
 80041cc:	d021      	beq.n	8004212 <HAL_RCC_OscConfig+0x43e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	069b      	lsls	r3, r3, #26
 80041d2:	d53c      	bpl.n	800424e <HAL_RCC_OscConfig+0x47a>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041d4:	69a3      	ldr	r3, [r4, #24]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d021      	beq.n	800421e <HAL_RCC_OscConfig+0x44a>
        __HAL_RCC_HSI48_ENABLE();
 80041da:	4b5b      	ldr	r3, [pc, #364]	; (8004348 <HAL_RCC_OscConfig+0x574>)
 80041dc:	6899      	ldr	r1, [r3, #8]
 80041de:	2001      	movs	r0, #1
 80041e0:	4301      	orrs	r1, r0
 80041e2:	6099      	str	r1, [r3, #8]
 80041e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041e6:	4302      	orrs	r2, r0
 80041e8:	635a      	str	r2, [r3, #52]	; 0x34
 80041ea:	4a5b      	ldr	r2, [pc, #364]	; (8004358 <HAL_RCC_OscConfig+0x584>)
 80041ec:	6a11      	ldr	r1, [r2, #32]
 80041ee:	2380      	movs	r3, #128	; 0x80
 80041f0:	019b      	lsls	r3, r3, #6
 80041f2:	430b      	orrs	r3, r1
 80041f4:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80041f6:	f7fe fe07 	bl	8002e08 <HAL_GetTick>
 80041fa:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80041fc:	4b52      	ldr	r3, [pc, #328]	; (8004348 <HAL_RCC_OscConfig+0x574>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	079b      	lsls	r3, r3, #30
 8004202:	d424      	bmi.n	800424e <HAL_RCC_OscConfig+0x47a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004204:	f7fe fe00 	bl	8002e08 <HAL_GetTick>
 8004208:	1b80      	subs	r0, r0, r6
 800420a:	2802      	cmp	r0, #2
 800420c:	d9f6      	bls.n	80041fc <HAL_RCC_OscConfig+0x428>
            return HAL_TIMEOUT;
 800420e:	2003      	movs	r0, #3
 8004210:	e086      	b.n	8004320 <HAL_RCC_OscConfig+0x54c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004212:	4a4d      	ldr	r2, [pc, #308]	; (8004348 <HAL_RCC_OscConfig+0x574>)
 8004214:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004216:	4951      	ldr	r1, [pc, #324]	; (800435c <HAL_RCC_OscConfig+0x588>)
 8004218:	400b      	ands	r3, r1
 800421a:	6393      	str	r3, [r2, #56]	; 0x38
 800421c:	e7d7      	b.n	80041ce <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI48_DISABLE();
 800421e:	4a4a      	ldr	r2, [pc, #296]	; (8004348 <HAL_RCC_OscConfig+0x574>)
 8004220:	6893      	ldr	r3, [r2, #8]
 8004222:	2101      	movs	r1, #1
 8004224:	438b      	bics	r3, r1
 8004226:	6093      	str	r3, [r2, #8]
 8004228:	4a4b      	ldr	r2, [pc, #300]	; (8004358 <HAL_RCC_OscConfig+0x584>)
 800422a:	6a13      	ldr	r3, [r2, #32]
 800422c:	494c      	ldr	r1, [pc, #304]	; (8004360 <HAL_RCC_OscConfig+0x58c>)
 800422e:	400b      	ands	r3, r1
 8004230:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8004232:	f7fe fde9 	bl	8002e08 <HAL_GetTick>
 8004236:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004238:	4b43      	ldr	r3, [pc, #268]	; (8004348 <HAL_RCC_OscConfig+0x574>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	079b      	lsls	r3, r3, #30
 800423e:	d506      	bpl.n	800424e <HAL_RCC_OscConfig+0x47a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004240:	f7fe fde2 	bl	8002e08 <HAL_GetTick>
 8004244:	1b80      	subs	r0, r0, r6
 8004246:	2802      	cmp	r0, #2
 8004248:	d9f6      	bls.n	8004238 <HAL_RCC_OscConfig+0x464>
            return HAL_TIMEOUT;
 800424a:	2003      	movs	r0, #3
 800424c:	e068      	b.n	8004320 <HAL_RCC_OscConfig+0x54c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800424e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004250:	2b00      	cmp	r3, #0
 8004252:	d100      	bne.n	8004256 <HAL_RCC_OscConfig+0x482>
 8004254:	e06c      	b.n	8004330 <HAL_RCC_OscConfig+0x55c>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004256:	2d0c      	cmp	r5, #12
 8004258:	d049      	beq.n	80042ee <HAL_RCC_OscConfig+0x51a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800425a:	2b02      	cmp	r3, #2
 800425c:	d012      	beq.n	8004284 <HAL_RCC_OscConfig+0x4b0>
        __HAL_RCC_PLL_DISABLE();
 800425e:	4a3a      	ldr	r2, [pc, #232]	; (8004348 <HAL_RCC_OscConfig+0x574>)
 8004260:	6813      	ldr	r3, [r2, #0]
 8004262:	4940      	ldr	r1, [pc, #256]	; (8004364 <HAL_RCC_OscConfig+0x590>)
 8004264:	400b      	ands	r3, r1
 8004266:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004268:	f7fe fdce 	bl	8002e08 <HAL_GetTick>
 800426c:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800426e:	4b36      	ldr	r3, [pc, #216]	; (8004348 <HAL_RCC_OscConfig+0x574>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	019b      	lsls	r3, r3, #6
 8004274:	d539      	bpl.n	80042ea <HAL_RCC_OscConfig+0x516>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004276:	f7fe fdc7 	bl	8002e08 <HAL_GetTick>
 800427a:	1b00      	subs	r0, r0, r4
 800427c:	2802      	cmp	r0, #2
 800427e:	d9f6      	bls.n	800426e <HAL_RCC_OscConfig+0x49a>
            return HAL_TIMEOUT;
 8004280:	2003      	movs	r0, #3
 8004282:	e04d      	b.n	8004320 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_PLL_DISABLE();
 8004284:	4a30      	ldr	r2, [pc, #192]	; (8004348 <HAL_RCC_OscConfig+0x574>)
 8004286:	6813      	ldr	r3, [r2, #0]
 8004288:	4936      	ldr	r1, [pc, #216]	; (8004364 <HAL_RCC_OscConfig+0x590>)
 800428a:	400b      	ands	r3, r1
 800428c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800428e:	f7fe fdbb 	bl	8002e08 <HAL_GetTick>
 8004292:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004294:	4b2c      	ldr	r3, [pc, #176]	; (8004348 <HAL_RCC_OscConfig+0x574>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	019b      	lsls	r3, r3, #6
 800429a:	d506      	bpl.n	80042aa <HAL_RCC_OscConfig+0x4d6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800429c:	f7fe fdb4 	bl	8002e08 <HAL_GetTick>
 80042a0:	1b40      	subs	r0, r0, r5
 80042a2:	2802      	cmp	r0, #2
 80042a4:	d9f6      	bls.n	8004294 <HAL_RCC_OscConfig+0x4c0>
            return HAL_TIMEOUT;
 80042a6:	2003      	movs	r0, #3
 80042a8:	e03a      	b.n	8004320 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042aa:	4927      	ldr	r1, [pc, #156]	; (8004348 <HAL_RCC_OscConfig+0x574>)
 80042ac:	68cb      	ldr	r3, [r1, #12]
 80042ae:	4a2e      	ldr	r2, [pc, #184]	; (8004368 <HAL_RCC_OscConfig+0x594>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80042b4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80042b6:	4302      	orrs	r2, r0
 80042b8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80042ba:	4302      	orrs	r2, r0
 80042bc:	4313      	orrs	r3, r2
 80042be:	60cb      	str	r3, [r1, #12]
        __HAL_RCC_PLL_ENABLE();
 80042c0:	680a      	ldr	r2, [r1, #0]
 80042c2:	2380      	movs	r3, #128	; 0x80
 80042c4:	045b      	lsls	r3, r3, #17
 80042c6:	4313      	orrs	r3, r2
 80042c8:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 80042ca:	f7fe fd9d 	bl	8002e08 <HAL_GetTick>
 80042ce:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80042d0:	4b1d      	ldr	r3, [pc, #116]	; (8004348 <HAL_RCC_OscConfig+0x574>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	019b      	lsls	r3, r3, #6
 80042d6:	d406      	bmi.n	80042e6 <HAL_RCC_OscConfig+0x512>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d8:	f7fe fd96 	bl	8002e08 <HAL_GetTick>
 80042dc:	1b00      	subs	r0, r0, r4
 80042de:	2802      	cmp	r0, #2
 80042e0:	d9f6      	bls.n	80042d0 <HAL_RCC_OscConfig+0x4fc>
            return HAL_TIMEOUT;
 80042e2:	2003      	movs	r0, #3
 80042e4:	e01c      	b.n	8004320 <HAL_RCC_OscConfig+0x54c>
  return HAL_OK;
 80042e6:	2000      	movs	r0, #0
 80042e8:	e01a      	b.n	8004320 <HAL_RCC_OscConfig+0x54c>
 80042ea:	2000      	movs	r0, #0
 80042ec:	e018      	b.n	8004320 <HAL_RCC_OscConfig+0x54c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d020      	beq.n	8004334 <HAL_RCC_OscConfig+0x560>
        pll_config = RCC->CFGR;
 80042f2:	4b15      	ldr	r3, [pc, #84]	; (8004348 <HAL_RCC_OscConfig+0x574>)
 80042f4:	68da      	ldr	r2, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f6:	2380      	movs	r3, #128	; 0x80
 80042f8:	025b      	lsls	r3, r3, #9
 80042fa:	4013      	ands	r3, r2
 80042fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80042fe:	428b      	cmp	r3, r1
 8004300:	d11a      	bne.n	8004338 <HAL_RCC_OscConfig+0x564>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004302:	23f0      	movs	r3, #240	; 0xf0
 8004304:	039b      	lsls	r3, r3, #14
 8004306:	4013      	ands	r3, r2
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004308:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800430a:	428b      	cmp	r3, r1
 800430c:	d116      	bne.n	800433c <HAL_RCC_OscConfig+0x568>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800430e:	23c0      	movs	r3, #192	; 0xc0
 8004310:	041b      	lsls	r3, r3, #16
 8004312:	401a      	ands	r2, r3
 8004314:	6b63      	ldr	r3, [r4, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004316:	429a      	cmp	r2, r3
 8004318:	d112      	bne.n	8004340 <HAL_RCC_OscConfig+0x56c>
  return HAL_OK;
 800431a:	2000      	movs	r0, #0
 800431c:	e000      	b.n	8004320 <HAL_RCC_OscConfig+0x54c>
    return HAL_ERROR;
 800431e:	2001      	movs	r0, #1
}
 8004320:	b003      	add	sp, #12
 8004322:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8004324:	2001      	movs	r0, #1
 8004326:	e7fb      	b.n	8004320 <HAL_RCC_OscConfig+0x54c>
        return HAL_ERROR;
 8004328:	2001      	movs	r0, #1
 800432a:	e7f9      	b.n	8004320 <HAL_RCC_OscConfig+0x54c>
        return HAL_ERROR;
 800432c:	2001      	movs	r0, #1
 800432e:	e7f7      	b.n	8004320 <HAL_RCC_OscConfig+0x54c>
  return HAL_OK;
 8004330:	2000      	movs	r0, #0
 8004332:	e7f5      	b.n	8004320 <HAL_RCC_OscConfig+0x54c>
        return HAL_ERROR;
 8004334:	2001      	movs	r0, #1
 8004336:	e7f3      	b.n	8004320 <HAL_RCC_OscConfig+0x54c>
          return HAL_ERROR;
 8004338:	2001      	movs	r0, #1
 800433a:	e7f1      	b.n	8004320 <HAL_RCC_OscConfig+0x54c>
 800433c:	2001      	movs	r0, #1
 800433e:	e7ef      	b.n	8004320 <HAL_RCC_OscConfig+0x54c>
 8004340:	2001      	movs	r0, #1
 8004342:	e7ed      	b.n	8004320 <HAL_RCC_OscConfig+0x54c>
 8004344:	40007000 	.word	0x40007000
 8004348:	40021000 	.word	0x40021000
 800434c:	00001388 	.word	0x00001388
 8004350:	fffffeff 	.word	0xfffffeff
 8004354:	fffffbff 	.word	0xfffffbff
 8004358:	40010000 	.word	0x40010000
 800435c:	efffffff 	.word	0xefffffff
 8004360:	ffffdfff 	.word	0xffffdfff
 8004364:	feffffff 	.word	0xfeffffff
 8004368:	ff02ffff 	.word	0xff02ffff

0800436c <HAL_RCC_ClockConfig>:
{
 800436c:	b570      	push	{r4, r5, r6, lr}
 800436e:	0005      	movs	r5, r0
 8004370:	000c      	movs	r4, r1
  if(RCC_ClkInitStruct == NULL)
 8004372:	2800      	cmp	r0, #0
 8004374:	d100      	bne.n	8004378 <HAL_RCC_ClockConfig+0xc>
 8004376:	e0d1      	b.n	800451c <HAL_RCC_ClockConfig+0x1b0>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004378:	4b6a      	ldr	r3, [pc, #424]	; (8004524 <HAL_RCC_ClockConfig+0x1b8>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	2301      	movs	r3, #1
 800437e:	4013      	ands	r3, r2
 8004380:	428b      	cmp	r3, r1
 8004382:	d319      	bcc.n	80043b8 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004384:	682b      	ldr	r3, [r5, #0]
 8004386:	079b      	lsls	r3, r3, #30
 8004388:	d506      	bpl.n	8004398 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800438a:	4a67      	ldr	r2, [pc, #412]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 800438c:	68d3      	ldr	r3, [r2, #12]
 800438e:	21f0      	movs	r1, #240	; 0xf0
 8004390:	438b      	bics	r3, r1
 8004392:	68a9      	ldr	r1, [r5, #8]
 8004394:	430b      	orrs	r3, r1
 8004396:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004398:	682b      	ldr	r3, [r5, #0]
 800439a:	07db      	lsls	r3, r3, #31
 800439c:	d57b      	bpl.n	8004496 <HAL_RCC_ClockConfig+0x12a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800439e:	686b      	ldr	r3, [r5, #4]
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d020      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x7a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043a4:	2b03      	cmp	r3, #3
 80043a6:	d040      	beq.n	800442a <HAL_RCC_ClockConfig+0xbe>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d044      	beq.n	8004436 <HAL_RCC_ClockConfig+0xca>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80043ac:	4a5e      	ldr	r2, [pc, #376]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	6812      	ldr	r2, [r2, #0]
 80043b0:	0592      	lsls	r2, r2, #22
 80043b2:	d41d      	bmi.n	80043f0 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80043b4:	2001      	movs	r0, #1
 80043b6:	e099      	b.n	80044ec <HAL_RCC_ClockConfig+0x180>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b8:	4a5a      	ldr	r2, [pc, #360]	; (8004524 <HAL_RCC_ClockConfig+0x1b8>)
 80043ba:	6813      	ldr	r3, [r2, #0]
 80043bc:	2101      	movs	r1, #1
 80043be:	438b      	bics	r3, r1
 80043c0:	4323      	orrs	r3, r4
 80043c2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80043c4:	f7fe fd20 	bl	8002e08 <HAL_GetTick>
 80043c8:	0006      	movs	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ca:	4b56      	ldr	r3, [pc, #344]	; (8004524 <HAL_RCC_ClockConfig+0x1b8>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	2301      	movs	r3, #1
 80043d0:	4013      	ands	r3, r2
 80043d2:	42a3      	cmp	r3, r4
 80043d4:	d0d6      	beq.n	8004384 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043d6:	f7fe fd17 	bl	8002e08 <HAL_GetTick>
 80043da:	1b80      	subs	r0, r0, r6
 80043dc:	4a53      	ldr	r2, [pc, #332]	; (800452c <HAL_RCC_ClockConfig+0x1c0>)
 80043de:	4290      	cmp	r0, r2
 80043e0:	d9f3      	bls.n	80043ca <HAL_RCC_ClockConfig+0x5e>
        return HAL_TIMEOUT;
 80043e2:	2003      	movs	r0, #3
 80043e4:	e082      	b.n	80044ec <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043e6:	4a50      	ldr	r2, [pc, #320]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 80043e8:	6812      	ldr	r2, [r2, #0]
 80043ea:	0392      	lsls	r2, r2, #14
 80043ec:	d400      	bmi.n	80043f0 <HAL_RCC_ClockConfig+0x84>
 80043ee:	e097      	b.n	8004520 <HAL_RCC_ClockConfig+0x1b4>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043f0:	494d      	ldr	r1, [pc, #308]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 80043f2:	68ca      	ldr	r2, [r1, #12]
 80043f4:	2003      	movs	r0, #3
 80043f6:	4382      	bics	r2, r0
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 80043fc:	f7fe fd04 	bl	8002e08 <HAL_GetTick>
 8004400:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004402:	686b      	ldr	r3, [r5, #4]
 8004404:	2b02      	cmp	r3, #2
 8004406:	d01c      	beq.n	8004442 <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004408:	2b03      	cmp	r3, #3
 800440a:	d028      	beq.n	800445e <HAL_RCC_ClockConfig+0xf2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800440c:	2b01      	cmp	r3, #1
 800440e:	d034      	beq.n	800447a <HAL_RCC_ClockConfig+0x10e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004410:	4b45      	ldr	r3, [pc, #276]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	220c      	movs	r2, #12
 8004416:	421a      	tst	r2, r3
 8004418:	d03d      	beq.n	8004496 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800441a:	f7fe fcf5 	bl	8002e08 <HAL_GetTick>
 800441e:	1b80      	subs	r0, r0, r6
 8004420:	4b42      	ldr	r3, [pc, #264]	; (800452c <HAL_RCC_ClockConfig+0x1c0>)
 8004422:	4298      	cmp	r0, r3
 8004424:	d9f4      	bls.n	8004410 <HAL_RCC_ClockConfig+0xa4>
          return HAL_TIMEOUT;
 8004426:	2003      	movs	r0, #3
 8004428:	e060      	b.n	80044ec <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800442a:	4a3f      	ldr	r2, [pc, #252]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 800442c:	6812      	ldr	r2, [r2, #0]
 800442e:	0192      	lsls	r2, r2, #6
 8004430:	d4de      	bmi.n	80043f0 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8004432:	2001      	movs	r0, #1
 8004434:	e05a      	b.n	80044ec <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004436:	4a3c      	ldr	r2, [pc, #240]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 8004438:	6812      	ldr	r2, [r2, #0]
 800443a:	0752      	lsls	r2, r2, #29
 800443c:	d4d8      	bmi.n	80043f0 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800443e:	2001      	movs	r0, #1
 8004440:	e054      	b.n	80044ec <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004442:	4b39      	ldr	r3, [pc, #228]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	230c      	movs	r3, #12
 8004448:	4013      	ands	r3, r2
 800444a:	2b08      	cmp	r3, #8
 800444c:	d023      	beq.n	8004496 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800444e:	f7fe fcdb 	bl	8002e08 <HAL_GetTick>
 8004452:	1b80      	subs	r0, r0, r6
 8004454:	4a35      	ldr	r2, [pc, #212]	; (800452c <HAL_RCC_ClockConfig+0x1c0>)
 8004456:	4290      	cmp	r0, r2
 8004458:	d9f3      	bls.n	8004442 <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 800445a:	2003      	movs	r0, #3
 800445c:	e046      	b.n	80044ec <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800445e:	4b32      	ldr	r3, [pc, #200]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	230c      	movs	r3, #12
 8004464:	4013      	ands	r3, r2
 8004466:	2b0c      	cmp	r3, #12
 8004468:	d015      	beq.n	8004496 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800446a:	f7fe fccd 	bl	8002e08 <HAL_GetTick>
 800446e:	1b80      	subs	r0, r0, r6
 8004470:	4b2e      	ldr	r3, [pc, #184]	; (800452c <HAL_RCC_ClockConfig+0x1c0>)
 8004472:	4298      	cmp	r0, r3
 8004474:	d9f3      	bls.n	800445e <HAL_RCC_ClockConfig+0xf2>
          return HAL_TIMEOUT;
 8004476:	2003      	movs	r0, #3
 8004478:	e038      	b.n	80044ec <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800447a:	4b2b      	ldr	r3, [pc, #172]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 800447c:	68da      	ldr	r2, [r3, #12]
 800447e:	230c      	movs	r3, #12
 8004480:	4013      	ands	r3, r2
 8004482:	2b04      	cmp	r3, #4
 8004484:	d007      	beq.n	8004496 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004486:	f7fe fcbf 	bl	8002e08 <HAL_GetTick>
 800448a:	1b80      	subs	r0, r0, r6
 800448c:	4b27      	ldr	r3, [pc, #156]	; (800452c <HAL_RCC_ClockConfig+0x1c0>)
 800448e:	4298      	cmp	r0, r3
 8004490:	d9f3      	bls.n	800447a <HAL_RCC_ClockConfig+0x10e>
          return HAL_TIMEOUT;
 8004492:	2003      	movs	r0, #3
 8004494:	e02a      	b.n	80044ec <HAL_RCC_ClockConfig+0x180>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004496:	4b23      	ldr	r3, [pc, #140]	; (8004524 <HAL_RCC_ClockConfig+0x1b8>)
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	2301      	movs	r3, #1
 800449c:	4013      	ands	r3, r2
 800449e:	42a3      	cmp	r3, r4
 80044a0:	d825      	bhi.n	80044ee <HAL_RCC_ClockConfig+0x182>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a2:	682b      	ldr	r3, [r5, #0]
 80044a4:	075b      	lsls	r3, r3, #29
 80044a6:	d506      	bpl.n	80044b6 <HAL_RCC_ClockConfig+0x14a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044a8:	4a1f      	ldr	r2, [pc, #124]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	68d3      	ldr	r3, [r2, #12]
 80044ac:	4920      	ldr	r1, [pc, #128]	; (8004530 <HAL_RCC_ClockConfig+0x1c4>)
 80044ae:	400b      	ands	r3, r1
 80044b0:	68e9      	ldr	r1, [r5, #12]
 80044b2:	430b      	orrs	r3, r1
 80044b4:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b6:	682b      	ldr	r3, [r5, #0]
 80044b8:	071b      	lsls	r3, r3, #28
 80044ba:	d507      	bpl.n	80044cc <HAL_RCC_ClockConfig+0x160>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044bc:	491a      	ldr	r1, [pc, #104]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	68cb      	ldr	r3, [r1, #12]
 80044c0:	4a1c      	ldr	r2, [pc, #112]	; (8004534 <HAL_RCC_ClockConfig+0x1c8>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	692a      	ldr	r2, [r5, #16]
 80044c6:	00d2      	lsls	r2, r2, #3
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60cb      	str	r3, [r1, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044cc:	f7ff fc2a 	bl	8003d24 <HAL_RCC_GetSysClockFreq>
 80044d0:	4b15      	ldr	r3, [pc, #84]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	0912      	lsrs	r2, r2, #4
 80044d6:	230f      	movs	r3, #15
 80044d8:	4013      	ands	r3, r2
 80044da:	4a17      	ldr	r2, [pc, #92]	; (8004538 <HAL_RCC_ClockConfig+0x1cc>)
 80044dc:	5cd3      	ldrb	r3, [r2, r3]
 80044de:	40d8      	lsrs	r0, r3
 80044e0:	4b16      	ldr	r3, [pc, #88]	; (800453c <HAL_RCC_ClockConfig+0x1d0>)
 80044e2:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80044e4:	4b16      	ldr	r3, [pc, #88]	; (8004540 <HAL_RCC_ClockConfig+0x1d4>)
 80044e6:	6818      	ldr	r0, [r3, #0]
 80044e8:	f004 fda6 	bl	8009038 <HAL_InitTick>
}
 80044ec:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ee:	4a0d      	ldr	r2, [pc, #52]	; (8004524 <HAL_RCC_ClockConfig+0x1b8>)
 80044f0:	6813      	ldr	r3, [r2, #0]
 80044f2:	2101      	movs	r1, #1
 80044f4:	438b      	bics	r3, r1
 80044f6:	4323      	orrs	r3, r4
 80044f8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80044fa:	f7fe fc85 	bl	8002e08 <HAL_GetTick>
 80044fe:	0006      	movs	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004500:	4b08      	ldr	r3, [pc, #32]	; (8004524 <HAL_RCC_ClockConfig+0x1b8>)
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	2301      	movs	r3, #1
 8004506:	4013      	ands	r3, r2
 8004508:	42a3      	cmp	r3, r4
 800450a:	d0ca      	beq.n	80044a2 <HAL_RCC_ClockConfig+0x136>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800450c:	f7fe fc7c 	bl	8002e08 <HAL_GetTick>
 8004510:	1b80      	subs	r0, r0, r6
 8004512:	4b06      	ldr	r3, [pc, #24]	; (800452c <HAL_RCC_ClockConfig+0x1c0>)
 8004514:	4298      	cmp	r0, r3
 8004516:	d9f3      	bls.n	8004500 <HAL_RCC_ClockConfig+0x194>
        return HAL_TIMEOUT;
 8004518:	2003      	movs	r0, #3
 800451a:	e7e7      	b.n	80044ec <HAL_RCC_ClockConfig+0x180>
    return HAL_ERROR;
 800451c:	2001      	movs	r0, #1
 800451e:	e7e5      	b.n	80044ec <HAL_RCC_ClockConfig+0x180>
        return HAL_ERROR;
 8004520:	2001      	movs	r0, #1
 8004522:	e7e3      	b.n	80044ec <HAL_RCC_ClockConfig+0x180>
 8004524:	40022000 	.word	0x40022000
 8004528:	40021000 	.word	0x40021000
 800452c:	00001388 	.word	0x00001388
 8004530:	fffff8ff 	.word	0xfffff8ff
 8004534:	ffffc7ff 	.word	0xffffc7ff
 8004538:	0800e8c8 	.word	0x0800e8c8
 800453c:	2000000c 	.word	0x2000000c
 8004540:	20000004 	.word	0x20000004

08004544 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8004544:	4b01      	ldr	r3, [pc, #4]	; (800454c <HAL_RCC_GetHCLKFreq+0x8>)
 8004546:	6818      	ldr	r0, [r3, #0]
}
 8004548:	4770      	bx	lr
 800454a:	46c0      	nop			; (mov r8, r8)
 800454c:	2000000c 	.word	0x2000000c

08004550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004550:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004552:	f7ff fff7 	bl	8004544 <HAL_RCC_GetHCLKFreq>
 8004556:	4b04      	ldr	r3, [pc, #16]	; (8004568 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004558:	68da      	ldr	r2, [r3, #12]
 800455a:	0a12      	lsrs	r2, r2, #8
 800455c:	2307      	movs	r3, #7
 800455e:	4013      	ands	r3, r2
 8004560:	4a02      	ldr	r2, [pc, #8]	; (800456c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004562:	5cd3      	ldrb	r3, [r2, r3]
 8004564:	40d8      	lsrs	r0, r3
}
 8004566:	bd10      	pop	{r4, pc}
 8004568:	40021000 	.word	0x40021000
 800456c:	0800e8d8 	.word	0x0800e8d8

08004570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004570:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004572:	f7ff ffe7 	bl	8004544 <HAL_RCC_GetHCLKFreq>
 8004576:	4b04      	ldr	r3, [pc, #16]	; (8004588 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	0ad2      	lsrs	r2, r2, #11
 800457c:	2307      	movs	r3, #7
 800457e:	4013      	ands	r3, r2
 8004580:	4a02      	ldr	r2, [pc, #8]	; (800458c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004582:	5cd3      	ldrb	r3, [r2, r3]
 8004584:	40d8      	lsrs	r0, r3
}
 8004586:	bd10      	pop	{r4, pc}
 8004588:	40021000 	.word	0x40021000
 800458c:	0800e8d8 	.word	0x0800e8d8

08004590 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004590:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004592:	230f      	movs	r3, #15
 8004594:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004596:	4a0c      	ldr	r2, [pc, #48]	; (80045c8 <HAL_RCC_GetClockConfig+0x38>)
 8004598:	68d4      	ldr	r4, [r2, #12]
 800459a:	3b0c      	subs	r3, #12
 800459c:	4023      	ands	r3, r4
 800459e:	6043      	str	r3, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045a0:	68d4      	ldr	r4, [r2, #12]
 80045a2:	23f0      	movs	r3, #240	; 0xf0
 80045a4:	4023      	ands	r3, r4
 80045a6:	6083      	str	r3, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80045a8:	68d4      	ldr	r4, [r2, #12]
 80045aa:	25e0      	movs	r5, #224	; 0xe0
 80045ac:	00ed      	lsls	r5, r5, #3
 80045ae:	402c      	ands	r4, r5
 80045b0:	60c4      	str	r4, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80045b2:	68d3      	ldr	r3, [r2, #12]
 80045b4:	08db      	lsrs	r3, r3, #3
 80045b6:	402b      	ands	r3, r5
 80045b8:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80045ba:	4b04      	ldr	r3, [pc, #16]	; (80045cc <HAL_RCC_GetClockConfig+0x3c>)
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	2301      	movs	r3, #1
 80045c0:	4013      	ands	r3, r2
 80045c2:	600b      	str	r3, [r1, #0]
}
 80045c4:	bd30      	pop	{r4, r5, pc}
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	40021000 	.word	0x40021000
 80045cc:	40022000 	.word	0x40022000

080045d0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045d0:	b570      	push	{r4, r5, r6, lr}
 80045d2:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045d4:	6803      	ldr	r3, [r0, #0]
 80045d6:	069b      	lsls	r3, r3, #26
 80045d8:	d54f      	bpl.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xaa>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045da:	4b6b      	ldr	r3, [pc, #428]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	d500      	bpl.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x14>
 80045e2:	e092      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045e4:	4a68      	ldr	r2, [pc, #416]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045e6:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80045e8:	2380      	movs	r3, #128	; 0x80
 80045ea:	055b      	lsls	r3, r3, #21
 80045ec:	430b      	orrs	r3, r1
 80045ee:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 80045f0:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f2:	4b66      	ldr	r3, [pc, #408]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	05db      	lsls	r3, r3, #23
 80045f8:	d400      	bmi.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x2c>
 80045fa:	e088      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x13e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80045fc:	4b62      	ldr	r3, [pc, #392]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045fe:	6819      	ldr	r1, [r3, #0]
 8004600:	23c0      	movs	r3, #192	; 0xc0
 8004602:	039b      	lsls	r3, r3, #14
 8004604:	4019      	ands	r1, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004606:	6862      	ldr	r2, [r4, #4]
 8004608:	4013      	ands	r3, r2
 800460a:	428b      	cmp	r3, r1
 800460c:	d006      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x4c>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800460e:	23c0      	movs	r3, #192	; 0xc0
 8004610:	029b      	lsls	r3, r3, #10
 8004612:	0011      	movs	r1, r2
 8004614:	4019      	ands	r1, r3
 8004616:	4299      	cmp	r1, r3
 8004618:	d100      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x4c>
 800461a:	e08d      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x168>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800461c:	4b5a      	ldr	r3, [pc, #360]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800461e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004620:	23c0      	movs	r3, #192	; 0xc0
 8004622:	029b      	lsls	r3, r3, #10
 8004624:	0008      	movs	r0, r1
 8004626:	4018      	ands	r0, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004628:	4219      	tst	r1, r3
 800462a:	d015      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x88>
 800462c:	401a      	ands	r2, r3
 800462e:	4282      	cmp	r2, r0
 8004630:	d012      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x88>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	069b      	lsls	r3, r3, #26
 8004636:	d50f      	bpl.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x88>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004638:	4b53      	ldr	r3, [pc, #332]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800463a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800463c:	4a54      	ldr	r2, [pc, #336]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800463e:	4002      	ands	r2, r0

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004640:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 8004642:	2180      	movs	r1, #128	; 0x80
 8004644:	0309      	lsls	r1, r1, #12
 8004646:	4331      	orrs	r1, r6
 8004648:	6519      	str	r1, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800464a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800464c:	4e51      	ldr	r6, [pc, #324]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800464e:	4031      	ands	r1, r6
 8004650:	6519      	str	r1, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004652:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004654:	05c3      	lsls	r3, r0, #23
 8004656:	d476      	bmi.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x176>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004658:	6863      	ldr	r3, [r4, #4]
 800465a:	22c0      	movs	r2, #192	; 0xc0
 800465c:	0292      	lsls	r2, r2, #10
 800465e:	0019      	movs	r1, r3
 8004660:	4011      	ands	r1, r2
 8004662:	4291      	cmp	r1, r2
 8004664:	d07e      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8004666:	4948      	ldr	r1, [pc, #288]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004668:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800466a:	22c0      	movs	r2, #192	; 0xc0
 800466c:	0292      	lsls	r2, r2, #10
 800466e:	6860      	ldr	r0, [r4, #4]
 8004670:	4002      	ands	r2, r0
 8004672:	4313      	orrs	r3, r2
 8004674:	650b      	str	r3, [r1, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004676:	2d01      	cmp	r5, #1
 8004678:	d07e      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	07db      	lsls	r3, r3, #31
 800467e:	d506      	bpl.n	800468e <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004680:	4a41      	ldr	r2, [pc, #260]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004682:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004684:	2103      	movs	r1, #3
 8004686:	438b      	bics	r3, r1
 8004688:	68a1      	ldr	r1, [r4, #8]
 800468a:	430b      	orrs	r3, r1
 800468c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	079b      	lsls	r3, r3, #30
 8004692:	d506      	bpl.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004694:	4a3c      	ldr	r2, [pc, #240]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004696:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004698:	210c      	movs	r1, #12
 800469a:	438b      	bics	r3, r1
 800469c:	68e1      	ldr	r1, [r4, #12]
 800469e:	430b      	orrs	r3, r1
 80046a0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	075b      	lsls	r3, r3, #29
 80046a6:	d506      	bpl.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046a8:	4a37      	ldr	r2, [pc, #220]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046aa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80046ac:	493a      	ldr	r1, [pc, #232]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80046ae:	400b      	ands	r3, r1
 80046b0:	6921      	ldr	r1, [r4, #16]
 80046b2:	430b      	orrs	r3, r1
 80046b4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046b6:	6823      	ldr	r3, [r4, #0]
 80046b8:	071b      	lsls	r3, r3, #28
 80046ba:	d506      	bpl.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046bc:	4a32      	ldr	r2, [pc, #200]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046be:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80046c0:	4936      	ldr	r1, [pc, #216]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80046c2:	400b      	ands	r3, r1
 80046c4:	6961      	ldr	r1, [r4, #20]
 80046c6:	430b      	orrs	r3, r1
 80046c8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	05db      	lsls	r3, r3, #23
 80046ce:	d506      	bpl.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046d0:	4a2d      	ldr	r2, [pc, #180]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046d2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80046d4:	492e      	ldr	r1, [pc, #184]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046d6:	400b      	ands	r3, r1
 80046d8:	69a1      	ldr	r1, [r4, #24]
 80046da:	430b      	orrs	r3, r1
 80046dc:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	065b      	lsls	r3, r3, #25
 80046e2:	d506      	bpl.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046e4:	4a28      	ldr	r2, [pc, #160]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046e6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80046e8:	492d      	ldr	r1, [pc, #180]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ea:	400b      	ands	r3, r1
 80046ec:	6a21      	ldr	r1, [r4, #32]
 80046ee:	430b      	orrs	r3, r1
 80046f0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	061b      	lsls	r3, r3, #24
 80046f6:	d545      	bpl.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80046f8:	4a23      	ldr	r2, [pc, #140]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046fa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80046fc:	4929      	ldr	r1, [pc, #164]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046fe:	400b      	ands	r3, r1
 8004700:	69e1      	ldr	r1, [r4, #28]
 8004702:	430b      	orrs	r3, r1
 8004704:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  return HAL_OK;
 8004706:	2000      	movs	r0, #0
 8004708:	e03d      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  FlagStatus       pwrclkchanged = RESET;
 800470a:	2500      	movs	r5, #0
 800470c:	e771      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x22>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800470e:	4a1f      	ldr	r2, [pc, #124]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004710:	6811      	ldr	r1, [r2, #0]
 8004712:	2380      	movs	r3, #128	; 0x80
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	430b      	orrs	r3, r1
 8004718:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800471a:	f7fe fb75 	bl	8002e08 <HAL_GetTick>
 800471e:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004720:	4b1a      	ldr	r3, [pc, #104]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	05db      	lsls	r3, r3, #23
 8004726:	d500      	bpl.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004728:	e768      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800472a:	f7fe fb6d 	bl	8002e08 <HAL_GetTick>
 800472e:	1b80      	subs	r0, r0, r6
 8004730:	2864      	cmp	r0, #100	; 0x64
 8004732:	d9f5      	bls.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x150>
          return HAL_TIMEOUT;
 8004734:	2003      	movs	r0, #3
 8004736:	e026      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004738:	4b13      	ldr	r3, [pc, #76]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	039b      	lsls	r3, r3, #14
 800473e:	d400      	bmi.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8004740:	e76c      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x4c>
          return HAL_ERROR;
 8004742:	2001      	movs	r0, #1
 8004744:	e01f      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        tickstart = HAL_GetTick();
 8004746:	f7fe fb5f 	bl	8002e08 <HAL_GetTick>
 800474a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800474c:	4b0e      	ldr	r3, [pc, #56]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800474e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004750:	059b      	lsls	r3, r3, #22
 8004752:	d481      	bmi.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x88>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004754:	f7fe fb58 	bl	8002e08 <HAL_GetTick>
 8004758:	1b80      	subs	r0, r0, r6
 800475a:	4b13      	ldr	r3, [pc, #76]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800475c:	4298      	cmp	r0, r3
 800475e:	d9f5      	bls.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x17c>
            return HAL_TIMEOUT;
 8004760:	2003      	movs	r0, #3
 8004762:	e010      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004764:	4908      	ldr	r1, [pc, #32]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004766:	680a      	ldr	r2, [r1, #0]
 8004768:	4810      	ldr	r0, [pc, #64]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800476a:	4002      	ands	r2, r0
 800476c:	20c0      	movs	r0, #192	; 0xc0
 800476e:	0380      	lsls	r0, r0, #14
 8004770:	4003      	ands	r3, r0
 8004772:	4313      	orrs	r3, r2
 8004774:	600b      	str	r3, [r1, #0]
 8004776:	e776      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x96>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004778:	000a      	movs	r2, r1
 800477a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800477c:	490c      	ldr	r1, [pc, #48]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800477e:	400b      	ands	r3, r1
 8004780:	6393      	str	r3, [r2, #56]	; 0x38
 8004782:	e77a      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xaa>
  return HAL_OK;
 8004784:	2000      	movs	r0, #0
}
 8004786:	bd70      	pop	{r4, r5, r6, pc}
 8004788:	40021000 	.word	0x40021000
 800478c:	40007000 	.word	0x40007000
 8004790:	fffcffff 	.word	0xfffcffff
 8004794:	fff7ffff 	.word	0xfff7ffff
 8004798:	fffff3ff 	.word	0xfffff3ff
 800479c:	ffffcfff 	.word	0xffffcfff
 80047a0:	fbffffff 	.word	0xfbffffff
 80047a4:	fff3ffff 	.word	0xfff3ffff
 80047a8:	00001388 	.word	0x00001388
 80047ac:	ffcfffff 	.word	0xffcfffff
 80047b0:	efffffff 	.word	0xefffffff

080047b4 <TIM_Base_SetConfig>:
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047b4:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047b6:	2280      	movs	r2, #128	; 0x80
 80047b8:	05d2      	lsls	r2, r2, #23
 80047ba:	4290      	cmp	r0, r2
 80047bc:	d008      	beq.n	80047d0 <TIM_Base_SetConfig+0x1c>
 80047be:	4a15      	ldr	r2, [pc, #84]	; (8004814 <TIM_Base_SetConfig+0x60>)
 80047c0:	4290      	cmp	r0, r2
 80047c2:	d005      	beq.n	80047d0 <TIM_Base_SetConfig+0x1c>
 80047c4:	4a14      	ldr	r2, [pc, #80]	; (8004818 <TIM_Base_SetConfig+0x64>)
 80047c6:	4290      	cmp	r0, r2
 80047c8:	d002      	beq.n	80047d0 <TIM_Base_SetConfig+0x1c>
 80047ca:	4a14      	ldr	r2, [pc, #80]	; (800481c <TIM_Base_SetConfig+0x68>)
 80047cc:	4290      	cmp	r0, r2
 80047ce:	d103      	bne.n	80047d8 <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047d0:	2270      	movs	r2, #112	; 0x70
 80047d2:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80047d4:	684a      	ldr	r2, [r1, #4]
 80047d6:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047d8:	2280      	movs	r2, #128	; 0x80
 80047da:	05d2      	lsls	r2, r2, #23
 80047dc:	4290      	cmp	r0, r2
 80047de:	d008      	beq.n	80047f2 <TIM_Base_SetConfig+0x3e>
 80047e0:	4a0c      	ldr	r2, [pc, #48]	; (8004814 <TIM_Base_SetConfig+0x60>)
 80047e2:	4290      	cmp	r0, r2
 80047e4:	d005      	beq.n	80047f2 <TIM_Base_SetConfig+0x3e>
 80047e6:	4a0c      	ldr	r2, [pc, #48]	; (8004818 <TIM_Base_SetConfig+0x64>)
 80047e8:	4290      	cmp	r0, r2
 80047ea:	d002      	beq.n	80047f2 <TIM_Base_SetConfig+0x3e>
 80047ec:	4a0b      	ldr	r2, [pc, #44]	; (800481c <TIM_Base_SetConfig+0x68>)
 80047ee:	4290      	cmp	r0, r2
 80047f0:	d103      	bne.n	80047fa <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047f2:	4a0b      	ldr	r2, [pc, #44]	; (8004820 <TIM_Base_SetConfig+0x6c>)
 80047f4:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047f6:	68ca      	ldr	r2, [r1, #12]
 80047f8:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047fa:	2280      	movs	r2, #128	; 0x80
 80047fc:	4393      	bics	r3, r2
 80047fe:	690a      	ldr	r2, [r1, #16]
 8004800:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004802:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004804:	688b      	ldr	r3, [r1, #8]
 8004806:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004808:	680b      	ldr	r3, [r1, #0]
 800480a:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800480c:	2301      	movs	r3, #1
 800480e:	6143      	str	r3, [r0, #20]
}
 8004810:	4770      	bx	lr
 8004812:	46c0      	nop			; (mov r8, r8)
 8004814:	40000400 	.word	0x40000400
 8004818:	40010800 	.word	0x40010800
 800481c:	40011400 	.word	0x40011400
 8004820:	fffffcff 	.word	0xfffffcff

08004824 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004824:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004826:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004828:	6a04      	ldr	r4, [r0, #32]
 800482a:	2501      	movs	r5, #1
 800482c:	43ac      	bics	r4, r5
 800482e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004830:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004832:	35ef      	adds	r5, #239	; 0xef
 8004834:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004836:	0112      	lsls	r2, r2, #4
 8004838:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800483a:	240a      	movs	r4, #10
 800483c:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 800483e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004840:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004842:	6203      	str	r3, [r0, #32]
}
 8004844:	bd30      	pop	{r4, r5, pc}
	...

08004848 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004848:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800484a:	6a03      	ldr	r3, [r0, #32]
 800484c:	2410      	movs	r4, #16
 800484e:	43a3      	bics	r3, r4
 8004850:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004852:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004854:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004856:	4d05      	ldr	r5, [pc, #20]	; (800486c <TIM_TI2_ConfigInputStage+0x24>)
 8004858:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800485a:	0312      	lsls	r2, r2, #12
 800485c:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800485e:	24a0      	movs	r4, #160	; 0xa0
 8004860:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8004862:	0109      	lsls	r1, r1, #4
 8004864:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004866:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004868:	6201      	str	r1, [r0, #32]
}
 800486a:	bd30      	pop	{r4, r5, pc}
 800486c:	ffff0fff 	.word	0xffff0fff

08004870 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004870:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004872:	2270      	movs	r2, #112	; 0x70
 8004874:	4393      	bics	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004876:	430b      	orrs	r3, r1
 8004878:	2107      	movs	r1, #7
 800487a:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800487c:	6083      	str	r3, [r0, #8]
}
 800487e:	4770      	bx	lr

08004880 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004880:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004882:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004884:	4d03      	ldr	r5, [pc, #12]	; (8004894 <TIM_ETR_SetConfig+0x14>)
 8004886:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004888:	021b      	lsls	r3, r3, #8
 800488a:	4313      	orrs	r3, r2
 800488c:	430b      	orrs	r3, r1
 800488e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004890:	6083      	str	r3, [r0, #8]
}
 8004892:	bd30      	pop	{r4, r5, pc}
 8004894:	ffff00ff 	.word	0xffff00ff

08004898 <HAL_TIM_Base_Init>:
{
 8004898:	b570      	push	{r4, r5, r6, lr}
 800489a:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 800489c:	d01e      	beq.n	80048dc <HAL_TIM_Base_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 800489e:	2339      	movs	r3, #57	; 0x39
 80048a0:	5cc3      	ldrb	r3, [r0, r3]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d014      	beq.n	80048d0 <HAL_TIM_Base_Init+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 80048a6:	2539      	movs	r5, #57	; 0x39
 80048a8:	2302      	movs	r3, #2
 80048aa:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048ac:	0021      	movs	r1, r4
 80048ae:	c901      	ldmia	r1!, {r0}
 80048b0:	f7ff ff80 	bl	80047b4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048b4:	2301      	movs	r3, #1
 80048b6:	223e      	movs	r2, #62	; 0x3e
 80048b8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ba:	3a04      	subs	r2, #4
 80048bc:	54a3      	strb	r3, [r4, r2]
 80048be:	3201      	adds	r2, #1
 80048c0:	54a3      	strb	r3, [r4, r2]
 80048c2:	3201      	adds	r2, #1
 80048c4:	54a3      	strb	r3, [r4, r2]
 80048c6:	3201      	adds	r2, #1
 80048c8:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80048ca:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80048cc:	2000      	movs	r0, #0
}
 80048ce:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80048d0:	3338      	adds	r3, #56	; 0x38
 80048d2:	2200      	movs	r2, #0
 80048d4:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80048d6:	f004 fb0d 	bl	8008ef4 <HAL_TIM_Base_MspInit>
 80048da:	e7e4      	b.n	80048a6 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80048dc:	2001      	movs	r0, #1
 80048de:	e7f6      	b.n	80048ce <HAL_TIM_Base_Init+0x36>

080048e0 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80048e0:	2339      	movs	r3, #57	; 0x39
 80048e2:	5cc3      	ldrb	r3, [r0, r3]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d121      	bne.n	800492c <HAL_TIM_Base_Start+0x4c>
  htim->State = HAL_TIM_STATE_BUSY;
 80048e8:	3338      	adds	r3, #56	; 0x38
 80048ea:	2202      	movs	r2, #2
 80048ec:	54c2      	strb	r2, [r0, r3]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ee:	6803      	ldr	r3, [r0, #0]
 80048f0:	2280      	movs	r2, #128	; 0x80
 80048f2:	05d2      	lsls	r2, r2, #23
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d00e      	beq.n	8004916 <HAL_TIM_Base_Start+0x36>
 80048f8:	4a0e      	ldr	r2, [pc, #56]	; (8004934 <HAL_TIM_Base_Start+0x54>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d00b      	beq.n	8004916 <HAL_TIM_Base_Start+0x36>
 80048fe:	4a0e      	ldr	r2, [pc, #56]	; (8004938 <HAL_TIM_Base_Start+0x58>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d008      	beq.n	8004916 <HAL_TIM_Base_Start+0x36>
 8004904:	4a0d      	ldr	r2, [pc, #52]	; (800493c <HAL_TIM_Base_Start+0x5c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d005      	beq.n	8004916 <HAL_TIM_Base_Start+0x36>
    __HAL_TIM_ENABLE(htim);
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	2101      	movs	r1, #1
 800490e:	430a      	orrs	r2, r1
 8004910:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004912:	2000      	movs	r0, #0
 8004914:	e00b      	b.n	800492e <HAL_TIM_Base_Start+0x4e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004916:	6899      	ldr	r1, [r3, #8]
 8004918:	2207      	movs	r2, #7
 800491a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800491c:	2a06      	cmp	r2, #6
 800491e:	d007      	beq.n	8004930 <HAL_TIM_Base_Start+0x50>
      __HAL_TIM_ENABLE(htim);
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	2101      	movs	r1, #1
 8004924:	430a      	orrs	r2, r1
 8004926:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004928:	2000      	movs	r0, #0
 800492a:	e000      	b.n	800492e <HAL_TIM_Base_Start+0x4e>
    return HAL_ERROR;
 800492c:	2001      	movs	r0, #1
}
 800492e:	4770      	bx	lr
  return HAL_OK;
 8004930:	2000      	movs	r0, #0
 8004932:	e7fc      	b.n	800492e <HAL_TIM_Base_Start+0x4e>
 8004934:	40000400 	.word	0x40000400
 8004938:	40010800 	.word	0x40010800
 800493c:	40011400 	.word	0x40011400

08004940 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004940:	2339      	movs	r3, #57	; 0x39
 8004942:	5cc3      	ldrb	r3, [r0, r3]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d126      	bne.n	8004996 <HAL_TIM_Base_Start_IT+0x56>
  htim->State = HAL_TIM_STATE_BUSY;
 8004948:	3338      	adds	r3, #56	; 0x38
 800494a:	2202      	movs	r2, #2
 800494c:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800494e:	6802      	ldr	r2, [r0, #0]
 8004950:	68d3      	ldr	r3, [r2, #12]
 8004952:	2101      	movs	r1, #1
 8004954:	430b      	orrs	r3, r1
 8004956:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004958:	6803      	ldr	r3, [r0, #0]
 800495a:	2280      	movs	r2, #128	; 0x80
 800495c:	05d2      	lsls	r2, r2, #23
 800495e:	4293      	cmp	r3, r2
 8004960:	d00e      	beq.n	8004980 <HAL_TIM_Base_Start_IT+0x40>
 8004962:	4a0f      	ldr	r2, [pc, #60]	; (80049a0 <HAL_TIM_Base_Start_IT+0x60>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d00b      	beq.n	8004980 <HAL_TIM_Base_Start_IT+0x40>
 8004968:	4a0e      	ldr	r2, [pc, #56]	; (80049a4 <HAL_TIM_Base_Start_IT+0x64>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d008      	beq.n	8004980 <HAL_TIM_Base_Start_IT+0x40>
 800496e:	4a0e      	ldr	r2, [pc, #56]	; (80049a8 <HAL_TIM_Base_Start_IT+0x68>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d005      	beq.n	8004980 <HAL_TIM_Base_Start_IT+0x40>
    __HAL_TIM_ENABLE(htim);
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	2101      	movs	r1, #1
 8004978:	430a      	orrs	r2, r1
 800497a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800497c:	2000      	movs	r0, #0
 800497e:	e00b      	b.n	8004998 <HAL_TIM_Base_Start_IT+0x58>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004980:	6899      	ldr	r1, [r3, #8]
 8004982:	2207      	movs	r2, #7
 8004984:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004986:	2a06      	cmp	r2, #6
 8004988:	d007      	beq.n	800499a <HAL_TIM_Base_Start_IT+0x5a>
      __HAL_TIM_ENABLE(htim);
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	2101      	movs	r1, #1
 800498e:	430a      	orrs	r2, r1
 8004990:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004992:	2000      	movs	r0, #0
 8004994:	e000      	b.n	8004998 <HAL_TIM_Base_Start_IT+0x58>
    return HAL_ERROR;
 8004996:	2001      	movs	r0, #1
}
 8004998:	4770      	bx	lr
  return HAL_OK;
 800499a:	2000      	movs	r0, #0
 800499c:	e7fc      	b.n	8004998 <HAL_TIM_Base_Start_IT+0x58>
 800499e:	46c0      	nop			; (mov r8, r8)
 80049a0:	40000400 	.word	0x40000400
 80049a4:	40010800 	.word	0x40010800
 80049a8:	40011400 	.word	0x40011400

080049ac <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80049ac:	6802      	ldr	r2, [r0, #0]
 80049ae:	68d3      	ldr	r3, [r2, #12]
 80049b0:	2101      	movs	r1, #1
 80049b2:	438b      	bics	r3, r1
 80049b4:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 80049b6:	6803      	ldr	r3, [r0, #0]
 80049b8:	6a19      	ldr	r1, [r3, #32]
 80049ba:	4a06      	ldr	r2, [pc, #24]	; (80049d4 <HAL_TIM_Base_Stop_IT+0x28>)
 80049bc:	4211      	tst	r1, r2
 80049be:	d103      	bne.n	80049c8 <HAL_TIM_Base_Stop_IT+0x1c>
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	2101      	movs	r1, #1
 80049c4:	438a      	bics	r2, r1
 80049c6:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80049c8:	2339      	movs	r3, #57	; 0x39
 80049ca:	2201      	movs	r2, #1
 80049cc:	54c2      	strb	r2, [r0, r3]
}
 80049ce:	2000      	movs	r0, #0
 80049d0:	4770      	bx	lr
 80049d2:	46c0      	nop			; (mov r8, r8)
 80049d4:	00001111 	.word	0x00001111

080049d8 <HAL_TIM_ConfigClockSource>:
{
 80049d8:	b510      	push	{r4, lr}
 80049da:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80049dc:	2338      	movs	r3, #56	; 0x38
 80049de:	5cc3      	ldrb	r3, [r0, r3]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d100      	bne.n	80049e6 <HAL_TIM_ConfigClockSource+0xe>
 80049e4:	e078      	b.n	8004ad8 <HAL_TIM_ConfigClockSource+0x100>
 80049e6:	2338      	movs	r3, #56	; 0x38
 80049e8:	2201      	movs	r2, #1
 80049ea:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80049ec:	3301      	adds	r3, #1
 80049ee:	3201      	adds	r2, #1
 80049f0:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 80049f2:	6802      	ldr	r2, [r0, #0]
 80049f4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049f6:	4839      	ldr	r0, [pc, #228]	; (8004adc <HAL_TIM_ConfigClockSource+0x104>)
 80049f8:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80049fa:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80049fc:	680b      	ldr	r3, [r1, #0]
 80049fe:	2b60      	cmp	r3, #96	; 0x60
 8004a00:	d050      	beq.n	8004aa4 <HAL_TIM_ConfigClockSource+0xcc>
 8004a02:	d82a      	bhi.n	8004a5a <HAL_TIM_ConfigClockSource+0x82>
 8004a04:	2b40      	cmp	r3, #64	; 0x40
 8004a06:	d058      	beq.n	8004aba <HAL_TIM_ConfigClockSource+0xe2>
 8004a08:	d90c      	bls.n	8004a24 <HAL_TIM_ConfigClockSource+0x4c>
 8004a0a:	2b50      	cmp	r3, #80	; 0x50
 8004a0c:	d123      	bne.n	8004a56 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a0e:	68ca      	ldr	r2, [r1, #12]
 8004a10:	6849      	ldr	r1, [r1, #4]
 8004a12:	6820      	ldr	r0, [r4, #0]
 8004a14:	f7ff ff06 	bl	8004824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a18:	2150      	movs	r1, #80	; 0x50
 8004a1a:	6820      	ldr	r0, [r4, #0]
 8004a1c:	f7ff ff28 	bl	8004870 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004a20:	2000      	movs	r0, #0
      break;
 8004a22:	e005      	b.n	8004a30 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8004a24:	2b20      	cmp	r3, #32
 8004a26:	d00e      	beq.n	8004a46 <HAL_TIM_ConfigClockSource+0x6e>
 8004a28:	d909      	bls.n	8004a3e <HAL_TIM_ConfigClockSource+0x66>
 8004a2a:	2b30      	cmp	r3, #48	; 0x30
 8004a2c:	d00b      	beq.n	8004a46 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8004a2e:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8004a30:	2339      	movs	r3, #57	; 0x39
 8004a32:	2201      	movs	r2, #1
 8004a34:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8004a36:	3b01      	subs	r3, #1
 8004a38:	2200      	movs	r2, #0
 8004a3a:	54e2      	strb	r2, [r4, r3]
}
 8004a3c:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <HAL_TIM_ConfigClockSource+0x6e>
 8004a42:	2b10      	cmp	r3, #16
 8004a44:	d105      	bne.n	8004a52 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a46:	0019      	movs	r1, r3
 8004a48:	6820      	ldr	r0, [r4, #0]
 8004a4a:	f7ff ff11 	bl	8004870 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004a4e:	2000      	movs	r0, #0
      break;
 8004a50:	e7ee      	b.n	8004a30 <HAL_TIM_ConfigClockSource+0x58>
      status = HAL_ERROR;
 8004a52:	2001      	movs	r0, #1
 8004a54:	e7ec      	b.n	8004a30 <HAL_TIM_ConfigClockSource+0x58>
 8004a56:	2001      	movs	r0, #1
 8004a58:	e7ea      	b.n	8004a30 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8004a5a:	2280      	movs	r2, #128	; 0x80
 8004a5c:	0152      	lsls	r2, r2, #5
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d036      	beq.n	8004ad0 <HAL_TIM_ConfigClockSource+0xf8>
 8004a62:	2280      	movs	r2, #128	; 0x80
 8004a64:	0192      	lsls	r2, r2, #6
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d10d      	bne.n	8004a86 <HAL_TIM_ConfigClockSource+0xae>
      TIM_ETR_SetConfig(htim->Instance,
 8004a6a:	68cb      	ldr	r3, [r1, #12]
 8004a6c:	684a      	ldr	r2, [r1, #4]
 8004a6e:	6889      	ldr	r1, [r1, #8]
 8004a70:	6820      	ldr	r0, [r4, #0]
 8004a72:	f7ff ff05 	bl	8004880 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a76:	6822      	ldr	r2, [r4, #0]
 8004a78:	6891      	ldr	r1, [r2, #8]
 8004a7a:	2380      	movs	r3, #128	; 0x80
 8004a7c:	01db      	lsls	r3, r3, #7
 8004a7e:	430b      	orrs	r3, r1
 8004a80:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004a82:	2000      	movs	r0, #0
      break;
 8004a84:	e7d4      	b.n	8004a30 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8004a86:	2b70      	cmp	r3, #112	; 0x70
 8004a88:	d124      	bne.n	8004ad4 <HAL_TIM_ConfigClockSource+0xfc>
      TIM_ETR_SetConfig(htim->Instance,
 8004a8a:	68cb      	ldr	r3, [r1, #12]
 8004a8c:	684a      	ldr	r2, [r1, #4]
 8004a8e:	6889      	ldr	r1, [r1, #8]
 8004a90:	6820      	ldr	r0, [r4, #0]
 8004a92:	f7ff fef5 	bl	8004880 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a96:	6822      	ldr	r2, [r4, #0]
 8004a98:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a9a:	2177      	movs	r1, #119	; 0x77
 8004a9c:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8004a9e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa0:	2000      	movs	r0, #0
      break;
 8004aa2:	e7c5      	b.n	8004a30 <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aa4:	68ca      	ldr	r2, [r1, #12]
 8004aa6:	6849      	ldr	r1, [r1, #4]
 8004aa8:	6820      	ldr	r0, [r4, #0]
 8004aaa:	f7ff fecd 	bl	8004848 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004aae:	2160      	movs	r1, #96	; 0x60
 8004ab0:	6820      	ldr	r0, [r4, #0]
 8004ab2:	f7ff fedd 	bl	8004870 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004ab6:	2000      	movs	r0, #0
      break;
 8004ab8:	e7ba      	b.n	8004a30 <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aba:	68ca      	ldr	r2, [r1, #12]
 8004abc:	6849      	ldr	r1, [r1, #4]
 8004abe:	6820      	ldr	r0, [r4, #0]
 8004ac0:	f7ff feb0 	bl	8004824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ac4:	2140      	movs	r1, #64	; 0x40
 8004ac6:	6820      	ldr	r0, [r4, #0]
 8004ac8:	f7ff fed2 	bl	8004870 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004acc:	2000      	movs	r0, #0
      break;
 8004ace:	e7af      	b.n	8004a30 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8004ad0:	2000      	movs	r0, #0
 8004ad2:	e7ad      	b.n	8004a30 <HAL_TIM_ConfigClockSource+0x58>
      status = HAL_ERROR;
 8004ad4:	2001      	movs	r0, #1
 8004ad6:	e7ab      	b.n	8004a30 <HAL_TIM_ConfigClockSource+0x58>
  __HAL_LOCK(htim);
 8004ad8:	2002      	movs	r0, #2
 8004ada:	e7af      	b.n	8004a3c <HAL_TIM_ConfigClockSource+0x64>
 8004adc:	ffff0088 	.word	0xffff0088

08004ae0 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8004ae0:	4770      	bx	lr

08004ae2 <HAL_TIM_IC_CaptureCallback>:
}
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8004ae4:	4770      	bx	lr

08004ae6 <HAL_TIM_TriggerCallback>:
}
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_TIM_IRQHandler>:
{
 8004ae8:	b510      	push	{r4, lr}
 8004aea:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004aec:	6803      	ldr	r3, [r0, #0]
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	0792      	lsls	r2, r2, #30
 8004af2:	d50f      	bpl.n	8004b14 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	0792      	lsls	r2, r2, #30
 8004af8:	d50c      	bpl.n	8004b14 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004afa:	2203      	movs	r2, #3
 8004afc:	4252      	negs	r2, r2
 8004afe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b00:	2301      	movs	r3, #1
 8004b02:	7603      	strb	r3, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b04:	6803      	ldr	r3, [r0, #0]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	079b      	lsls	r3, r3, #30
 8004b0a:	d055      	beq.n	8004bb8 <HAL_TIM_IRQHandler+0xd0>
          HAL_TIM_IC_CaptureCallback(htim);
 8004b0c:	f7ff ffe9 	bl	8004ae2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b10:	2300      	movs	r3, #0
 8004b12:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b14:	6823      	ldr	r3, [r4, #0]
 8004b16:	691a      	ldr	r2, [r3, #16]
 8004b18:	0752      	lsls	r2, r2, #29
 8004b1a:	d512      	bpl.n	8004b42 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	0752      	lsls	r2, r2, #29
 8004b20:	d50f      	bpl.n	8004b42 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b22:	2205      	movs	r2, #5
 8004b24:	4252      	negs	r2, r2
 8004b26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b28:	2302      	movs	r3, #2
 8004b2a:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	699a      	ldr	r2, [r3, #24]
 8004b30:	23c0      	movs	r3, #192	; 0xc0
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	421a      	tst	r2, r3
 8004b36:	d045      	beq.n	8004bc4 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b38:	0020      	movs	r0, r4
 8004b3a:	f7ff ffd2 	bl	8004ae2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b42:	6823      	ldr	r3, [r4, #0]
 8004b44:	691a      	ldr	r2, [r3, #16]
 8004b46:	0712      	lsls	r2, r2, #28
 8004b48:	d510      	bpl.n	8004b6c <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	0712      	lsls	r2, r2, #28
 8004b4e:	d50d      	bpl.n	8004b6c <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b50:	2209      	movs	r2, #9
 8004b52:	4252      	negs	r2, r2
 8004b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b56:	2304      	movs	r3, #4
 8004b58:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	079b      	lsls	r3, r3, #30
 8004b60:	d037      	beq.n	8004bd2 <HAL_TIM_IRQHandler+0xea>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b62:	0020      	movs	r0, r4
 8004b64:	f7ff ffbd 	bl	8004ae2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b6c:	6823      	ldr	r3, [r4, #0]
 8004b6e:	691a      	ldr	r2, [r3, #16]
 8004b70:	06d2      	lsls	r2, r2, #27
 8004b72:	d512      	bpl.n	8004b9a <HAL_TIM_IRQHandler+0xb2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b74:	68da      	ldr	r2, [r3, #12]
 8004b76:	06d2      	lsls	r2, r2, #27
 8004b78:	d50f      	bpl.n	8004b9a <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b7a:	2211      	movs	r2, #17
 8004b7c:	4252      	negs	r2, r2
 8004b7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b80:	2308      	movs	r3, #8
 8004b82:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b84:	6823      	ldr	r3, [r4, #0]
 8004b86:	69da      	ldr	r2, [r3, #28]
 8004b88:	23c0      	movs	r3, #192	; 0xc0
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	421a      	tst	r2, r3
 8004b8e:	d027      	beq.n	8004be0 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b90:	0020      	movs	r0, r4
 8004b92:	f7ff ffa6 	bl	8004ae2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b96:	2300      	movs	r3, #0
 8004b98:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	691a      	ldr	r2, [r3, #16]
 8004b9e:	07d2      	lsls	r2, r2, #31
 8004ba0:	d502      	bpl.n	8004ba8 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	07d2      	lsls	r2, r2, #31
 8004ba6:	d422      	bmi.n	8004bee <HAL_TIM_IRQHandler+0x106>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	691a      	ldr	r2, [r3, #16]
 8004bac:	0652      	lsls	r2, r2, #25
 8004bae:	d502      	bpl.n	8004bb6 <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bb0:	68da      	ldr	r2, [r3, #12]
 8004bb2:	0652      	lsls	r2, r2, #25
 8004bb4:	d422      	bmi.n	8004bfc <HAL_TIM_IRQHandler+0x114>
}
 8004bb6:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb8:	f7ff ff92 	bl	8004ae0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bbc:	0020      	movs	r0, r4
 8004bbe:	f7ff ff91 	bl	8004ae4 <HAL_TIM_PWM_PulseFinishedCallback>
 8004bc2:	e7a5      	b.n	8004b10 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc4:	0020      	movs	r0, r4
 8004bc6:	f7ff ff8b 	bl	8004ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bca:	0020      	movs	r0, r4
 8004bcc:	f7ff ff8a 	bl	8004ae4 <HAL_TIM_PWM_PulseFinishedCallback>
 8004bd0:	e7b5      	b.n	8004b3e <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd2:	0020      	movs	r0, r4
 8004bd4:	f7ff ff84 	bl	8004ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd8:	0020      	movs	r0, r4
 8004bda:	f7ff ff83 	bl	8004ae4 <HAL_TIM_PWM_PulseFinishedCallback>
 8004bde:	e7c3      	b.n	8004b68 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be0:	0020      	movs	r0, r4
 8004be2:	f7ff ff7d 	bl	8004ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be6:	0020      	movs	r0, r4
 8004be8:	f7ff ff7c 	bl	8004ae4 <HAL_TIM_PWM_PulseFinishedCallback>
 8004bec:	e7d3      	b.n	8004b96 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bee:	2202      	movs	r2, #2
 8004bf0:	4252      	negs	r2, r2
 8004bf2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bf4:	0020      	movs	r0, r4
 8004bf6:	f002 ff2f 	bl	8007a58 <HAL_TIM_PeriodElapsedCallback>
 8004bfa:	e7d5      	b.n	8004ba8 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bfc:	2241      	movs	r2, #65	; 0x41
 8004bfe:	4252      	negs	r2, r2
 8004c00:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004c02:	0020      	movs	r0, r4
 8004c04:	f7ff ff6f 	bl	8004ae6 <HAL_TIM_TriggerCallback>
}
 8004c08:	e7d5      	b.n	8004bb6 <HAL_TIM_IRQHandler+0xce>
	...

08004c0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c0c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c0e:	2338      	movs	r3, #56	; 0x38
 8004c10:	5cc3      	ldrb	r3, [r0, r3]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d028      	beq.n	8004c68 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8004c16:	2338      	movs	r3, #56	; 0x38
 8004c18:	2201      	movs	r2, #1
 8004c1a:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	3201      	adds	r2, #1
 8004c20:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c22:	6803      	ldr	r3, [r0, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c26:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c28:	2570      	movs	r5, #112	; 0x70
 8004c2a:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c2c:	680d      	ldr	r5, [r1, #0]
 8004c2e:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c32:	6803      	ldr	r3, [r0, #0]
 8004c34:	2280      	movs	r2, #128	; 0x80
 8004c36:	05d2      	lsls	r2, r2, #23
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d008      	beq.n	8004c4e <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004c3c:	4a0b      	ldr	r2, [pc, #44]	; (8004c6c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d005      	beq.n	8004c4e <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004c42:	4a0b      	ldr	r2, [pc, #44]	; (8004c70 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d002      	beq.n	8004c4e <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004c48:	4a0a      	ldr	r2, [pc, #40]	; (8004c74 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d104      	bne.n	8004c58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c4e:	2280      	movs	r2, #128	; 0x80
 8004c50:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c52:	684a      	ldr	r2, [r1, #4]
 8004c54:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c56:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c58:	2339      	movs	r3, #57	; 0x39
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	2200      	movs	r2, #0
 8004c62:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8004c64:	2000      	movs	r0, #0
}
 8004c66:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8004c68:	2002      	movs	r0, #2
 8004c6a:	e7fc      	b.n	8004c66 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8004c6c:	40000400 	.word	0x40000400
 8004c70:	40010800 	.word	0x40010800
 8004c74:	40011400 	.word	0x40011400

08004c78 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004c78:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c7a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c7e:	2301      	movs	r3, #1
 8004c80:	f383 8810 	msr	PRIMASK, r3
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004c84:	6802      	ldr	r2, [r0, #0]
 8004c86:	6813      	ldr	r3, [r2, #0]
 8004c88:	24c0      	movs	r4, #192	; 0xc0
 8004c8a:	43a3      	bics	r3, r4
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	f381 8810 	msr	PRIMASK, r1

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c92:	2320      	movs	r3, #32
 8004c94:	6783      	str	r3, [r0, #120]	; 0x78
}
 8004c96:	bd10      	pop	{r4, pc}

08004c98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c98:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c9a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ca4:	6801      	ldr	r1, [r0, #0]
 8004ca6:	680b      	ldr	r3, [r1, #0]
 8004ca8:	4d11      	ldr	r5, [pc, #68]	; (8004cf0 <UART_EndRxTransfer+0x58>)
 8004caa:	402b      	ands	r3, r5
 8004cac:	600b      	str	r3, [r1, #0]
 8004cae:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cb2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cba:	6801      	ldr	r1, [r0, #0]
 8004cbc:	688b      	ldr	r3, [r1, #8]
 8004cbe:	4393      	bics	r3, r2
 8004cc0:	608b      	str	r3, [r1, #8]
 8004cc2:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cc6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d005      	beq.n	8004cd8 <UART_EndRxTransfer+0x40>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ccc:	2320      	movs	r3, #32
 8004cce:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cd4:	6643      	str	r3, [r0, #100]	; 0x64
}
 8004cd6:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cd8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cdc:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce0:	6802      	ldr	r2, [r0, #0]
 8004ce2:	6813      	ldr	r3, [r2, #0]
 8004ce4:	2410      	movs	r4, #16
 8004ce6:	43a3      	bics	r3, r4
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	f381 8810 	msr	PRIMASK, r1
}
 8004cee:	e7ed      	b.n	8004ccc <UART_EndRxTransfer+0x34>
 8004cf0:	fffffedf 	.word	0xfffffedf

08004cf4 <HAL_UART_Transmit_DMA>:
{
 8004cf4:	b510      	push	{r4, lr}
 8004cf6:	0004      	movs	r4, r0
 8004cf8:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004cfa:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8004cfc:	2a20      	cmp	r2, #32
 8004cfe:	d154      	bne.n	8004daa <HAL_UART_Transmit_DMA+0xb6>
    if ((pData == NULL) || (Size == 0U))
 8004d00:	2900      	cmp	r1, #0
 8004d02:	d054      	beq.n	8004dae <HAL_UART_Transmit_DMA+0xba>
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d054      	beq.n	8004db2 <HAL_UART_Transmit_DMA+0xbe>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d08:	2280      	movs	r2, #128	; 0x80
 8004d0a:	0152      	lsls	r2, r2, #5
 8004d0c:	6880      	ldr	r0, [r0, #8]
 8004d0e:	4290      	cmp	r0, r2
 8004d10:	d030      	beq.n	8004d74 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 8004d12:	2274      	movs	r2, #116	; 0x74
 8004d14:	5ca2      	ldrb	r2, [r4, r2]
 8004d16:	2a01      	cmp	r2, #1
 8004d18:	d04d      	beq.n	8004db6 <HAL_UART_Transmit_DMA+0xc2>
 8004d1a:	2274      	movs	r2, #116	; 0x74
 8004d1c:	2001      	movs	r0, #1
 8004d1e:	54a0      	strb	r0, [r4, r2]
    huart->pTxBuffPtr  = pData;
 8004d20:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004d22:	3a24      	subs	r2, #36	; 0x24
 8004d24:	52a3      	strh	r3, [r4, r2]
    huart->TxXferCount = Size;
 8004d26:	3202      	adds	r2, #2
 8004d28:	52a3      	strh	r3, [r4, r2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d2a:	322e      	adds	r2, #46	; 0x2e
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	50a1      	str	r1, [r4, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d30:	3a5f      	subs	r2, #95	; 0x5f
 8004d32:	67a2      	str	r2, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 8004d34:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004d36:	2a00      	cmp	r2, #0
 8004d38:	d023      	beq.n	8004d82 <HAL_UART_Transmit_DMA+0x8e>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004d3a:	4920      	ldr	r1, [pc, #128]	; (8004dbc <HAL_UART_Transmit_DMA+0xc8>)
 8004d3c:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004d3e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004d40:	491f      	ldr	r1, [pc, #124]	; (8004dc0 <HAL_UART_Transmit_DMA+0xcc>)
 8004d42:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004d44:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004d46:	491f      	ldr	r1, [pc, #124]	; (8004dc4 <HAL_UART_Transmit_DMA+0xd0>)
 8004d48:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8004d4a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004d50:	6822      	ldr	r2, [r4, #0]
 8004d52:	3228      	adds	r2, #40	; 0x28
 8004d54:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004d56:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004d58:	f7fe fcae 	bl	80036b8 <HAL_DMA_Start_IT>
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	d010      	beq.n	8004d82 <HAL_UART_Transmit_DMA+0x8e>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004d60:	2380      	movs	r3, #128	; 0x80
 8004d62:	2210      	movs	r2, #16
 8004d64:	50e2      	str	r2, [r4, r3]
        __HAL_UNLOCK(huart);
 8004d66:	3b0c      	subs	r3, #12
 8004d68:	2200      	movs	r2, #0
 8004d6a:	54e2      	strb	r2, [r4, r3]
        huart->gState = HAL_UART_STATE_READY;
 8004d6c:	3b54      	subs	r3, #84	; 0x54
 8004d6e:	67a3      	str	r3, [r4, #120]	; 0x78
        return HAL_ERROR;
 8004d70:	2001      	movs	r0, #1
 8004d72:	e01b      	b.n	8004dac <HAL_UART_Transmit_DMA+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d74:	6922      	ldr	r2, [r4, #16]
 8004d76:	2a00      	cmp	r2, #0
 8004d78:	d1cb      	bne.n	8004d12 <HAL_UART_Transmit_DMA+0x1e>
      if ((((uint32_t)pData) & 1U) != 0U)
 8004d7a:	07ca      	lsls	r2, r1, #31
 8004d7c:	d5c9      	bpl.n	8004d12 <HAL_UART_Transmit_DMA+0x1e>
        return  HAL_ERROR;
 8004d7e:	2001      	movs	r0, #1
 8004d80:	e014      	b.n	8004dac <HAL_UART_Transmit_DMA+0xb8>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	2240      	movs	r2, #64	; 0x40
 8004d86:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8004d88:	2374      	movs	r3, #116	; 0x74
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	54e2      	strb	r2, [r4, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d8e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d92:	3b73      	subs	r3, #115	; 0x73
 8004d94:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004d98:	6822      	ldr	r2, [r4, #0]
 8004d9a:	6893      	ldr	r3, [r2, #8]
 8004d9c:	2080      	movs	r0, #128	; 0x80
 8004d9e:	4303      	orrs	r3, r0
 8004da0:	6093      	str	r3, [r2, #8]
 8004da2:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 8004da6:	2000      	movs	r0, #0
 8004da8:	e000      	b.n	8004dac <HAL_UART_Transmit_DMA+0xb8>
    return HAL_BUSY;
 8004daa:	2002      	movs	r0, #2
}
 8004dac:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8004dae:	2001      	movs	r0, #1
 8004db0:	e7fc      	b.n	8004dac <HAL_UART_Transmit_DMA+0xb8>
 8004db2:	2001      	movs	r0, #1
 8004db4:	e7fa      	b.n	8004dac <HAL_UART_Transmit_DMA+0xb8>
    __HAL_LOCK(huart);
 8004db6:	2002      	movs	r0, #2
 8004db8:	e7f8      	b.n	8004dac <HAL_UART_Transmit_DMA+0xb8>
 8004dba:	46c0      	nop			; (mov r8, r8)
 8004dbc:	08004dcb 	.word	0x08004dcb
 8004dc0:	08004e3f 	.word	0x08004e3f
 8004dc4:	08004e4d 	.word	0x08004e4d

08004dc8 <HAL_UART_TxCpltCallback>:
}
 8004dc8:	4770      	bx	lr

08004dca <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004dca:	b570      	push	{r4, r5, r6, lr}
 8004dcc:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004dce:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	069b      	lsls	r3, r3, #26
 8004dd6:	d41a      	bmi.n	8004e0e <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 8004dd8:	2352      	movs	r3, #82	; 0x52
 8004dda:	2200      	movs	r2, #0
 8004ddc:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dde:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de2:	3201      	adds	r2, #1
 8004de4:	f382 8810 	msr	PRIMASK, r2

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004de8:	6801      	ldr	r1, [r0, #0]
 8004dea:	688b      	ldr	r3, [r1, #8]
 8004dec:	2580      	movs	r5, #128	; 0x80
 8004dee:	43ab      	bics	r3, r5
 8004df0:	608b      	str	r3, [r1, #8]
 8004df2:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004df6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dfa:	f382 8810 	msr	PRIMASK, r2

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dfe:	6802      	ldr	r2, [r0, #0]
 8004e00:	6813      	ldr	r3, [r2, #0]
 8004e02:	2040      	movs	r0, #64	; 0x40
 8004e04:	4303      	orrs	r3, r0
 8004e06:	6013      	str	r3, [r2, #0]
 8004e08:	f381 8810 	msr	PRIMASK, r1
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e0c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_TxCpltCallback(huart);
 8004e0e:	f7ff ffdb 	bl	8004dc8 <HAL_UART_TxCpltCallback>
}
 8004e12:	e7fb      	b.n	8004e0c <UART_DMATransmitCplt+0x42>

08004e14 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e14:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e16:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	f383 8810 	msr	PRIMASK, r3
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e20:	6802      	ldr	r2, [r0, #0]
 8004e22:	6813      	ldr	r3, [r2, #0]
 8004e24:	2440      	movs	r4, #64	; 0x40
 8004e26:	43a3      	bics	r3, r4
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	f381 8810 	msr	PRIMASK, r1

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e2e:	2320      	movs	r3, #32
 8004e30:	6783      	str	r3, [r0, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e32:	2300      	movs	r3, #0
 8004e34:	6683      	str	r3, [r0, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e36:	f7ff ffc7 	bl	8004dc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e3a:	bd10      	pop	{r4, pc}

08004e3c <HAL_UART_TxHalfCpltCallback>:
}
 8004e3c:	4770      	bx	lr

08004e3e <UART_DMATxHalfCplt>:
{
 8004e3e:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e40:	6a80      	ldr	r0, [r0, #40]	; 0x28
  HAL_UART_TxHalfCpltCallback(huart);
 8004e42:	f7ff fffb 	bl	8004e3c <HAL_UART_TxHalfCpltCallback>
}
 8004e46:	bd10      	pop	{r4, pc}

08004e48 <HAL_UART_RxHalfCpltCallback>:
}
 8004e48:	4770      	bx	lr

08004e4a <HAL_UART_ErrorCallback>:
}
 8004e4a:	4770      	bx	lr

08004e4c <UART_DMAError>:
{
 8004e4c:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e4e:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004e50:	6fa2      	ldr	r2, [r4, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004e52:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	061b      	lsls	r3, r3, #24
 8004e5a:	d501      	bpl.n	8004e60 <UART_DMAError+0x14>
 8004e5c:	2a21      	cmp	r2, #33	; 0x21
 8004e5e:	d00e      	beq.n	8004e7e <UART_DMAError+0x32>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004e60:	6823      	ldr	r3, [r4, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	065b      	lsls	r3, r3, #25
 8004e66:	d501      	bpl.n	8004e6c <UART_DMAError+0x20>
 8004e68:	2d22      	cmp	r5, #34	; 0x22
 8004e6a:	d00f      	beq.n	8004e8c <UART_DMAError+0x40>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e6c:	2280      	movs	r2, #128	; 0x80
 8004e6e:	58a3      	ldr	r3, [r4, r2]
 8004e70:	2110      	movs	r1, #16
 8004e72:	430b      	orrs	r3, r1
 8004e74:	50a3      	str	r3, [r4, r2]
  HAL_UART_ErrorCallback(huart);
 8004e76:	0020      	movs	r0, r4
 8004e78:	f7ff ffe7 	bl	8004e4a <HAL_UART_ErrorCallback>
}
 8004e7c:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 8004e7e:	2352      	movs	r3, #82	; 0x52
 8004e80:	2200      	movs	r2, #0
 8004e82:	52e2      	strh	r2, [r4, r3]
    UART_EndTxTransfer(huart);
 8004e84:	0020      	movs	r0, r4
 8004e86:	f7ff fef7 	bl	8004c78 <UART_EndTxTransfer>
 8004e8a:	e7e9      	b.n	8004e60 <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 8004e8c:	235a      	movs	r3, #90	; 0x5a
 8004e8e:	2200      	movs	r2, #0
 8004e90:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 8004e92:	0020      	movs	r0, r4
 8004e94:	f7ff ff00 	bl	8004c98 <UART_EndRxTransfer>
 8004e98:	e7e8      	b.n	8004e6c <UART_DMAError+0x20>

08004e9a <UART_DMAAbortOnError>:
{
 8004e9a:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e9c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	225a      	movs	r2, #90	; 0x5a
 8004ea2:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8004ea4:	3a08      	subs	r2, #8
 8004ea6:	5283      	strh	r3, [r0, r2]
  HAL_UART_ErrorCallback(huart);
 8004ea8:	f7ff ffcf 	bl	8004e4a <HAL_UART_ErrorCallback>
}
 8004eac:	bd10      	pop	{r4, pc}

08004eae <HAL_UARTEx_RxEventCallback>:
}
 8004eae:	4770      	bx	lr

08004eb0 <HAL_UART_IRQHandler>:
{
 8004eb0:	b570      	push	{r4, r5, r6, lr}
 8004eb2:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004eb4:	6802      	ldr	r2, [r0, #0]
 8004eb6:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004eb8:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004eba:	6895      	ldr	r5, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ebc:	49ab      	ldr	r1, [pc, #684]	; (800516c <HAL_UART_IRQHandler+0x2bc>)
 8004ebe:	001e      	movs	r6, r3
 8004ec0:	400e      	ands	r6, r1
  if (errorflags == 0U)
 8004ec2:	420b      	tst	r3, r1
 8004ec4:	d103      	bne.n	8004ece <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ec6:	0699      	lsls	r1, r3, #26
 8004ec8:	d501      	bpl.n	8004ece <HAL_UART_IRQHandler+0x1e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004eca:	0681      	lsls	r1, r0, #26
 8004ecc:	d41d      	bmi.n	8004f0a <HAL_UART_IRQHandler+0x5a>
  if ((errorflags != 0U)
 8004ece:	2e00      	cmp	r6, #0
 8004ed0:	d007      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x32>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	000e      	movs	r6, r1
 8004ed6:	402e      	ands	r6, r5
 8004ed8:	4229      	tst	r1, r5
 8004eda:	d11c      	bne.n	8004f16 <HAL_UART_IRQHandler+0x66>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004edc:	49a4      	ldr	r1, [pc, #656]	; (8005170 <HAL_UART_IRQHandler+0x2c0>)
 8004ede:	4208      	tst	r0, r1
 8004ee0:	d119      	bne.n	8004f16 <HAL_UART_IRQHandler+0x66>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ee2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004ee4:	2901      	cmp	r1, #1
 8004ee6:	d100      	bne.n	8004eea <HAL_UART_IRQHandler+0x3a>
 8004ee8:	e098      	b.n	800501c <HAL_UART_IRQHandler+0x16c>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004eea:	02d9      	lsls	r1, r3, #11
 8004eec:	d502      	bpl.n	8004ef4 <HAL_UART_IRQHandler+0x44>
 8004eee:	0269      	lsls	r1, r5, #9
 8004ef0:	d500      	bpl.n	8004ef4 <HAL_UART_IRQHandler+0x44>
 8004ef2:	e128      	b.n	8005146 <HAL_UART_IRQHandler+0x296>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ef4:	061a      	lsls	r2, r3, #24
 8004ef6:	d502      	bpl.n	8004efe <HAL_UART_IRQHandler+0x4e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004ef8:	0602      	lsls	r2, r0, #24
 8004efa:	d500      	bpl.n	8004efe <HAL_UART_IRQHandler+0x4e>
 8004efc:	e12a      	b.n	8005154 <HAL_UART_IRQHandler+0x2a4>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004efe:	065b      	lsls	r3, r3, #25
 8004f00:	d502      	bpl.n	8004f08 <HAL_UART_IRQHandler+0x58>
 8004f02:	0643      	lsls	r3, r0, #25
 8004f04:	d500      	bpl.n	8004f08 <HAL_UART_IRQHandler+0x58>
 8004f06:	e12c      	b.n	8005162 <HAL_UART_IRQHandler+0x2b2>
}
 8004f08:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8004f0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0fb      	beq.n	8004f08 <HAL_UART_IRQHandler+0x58>
        huart->RxISR(huart);
 8004f10:	0020      	movs	r0, r4
 8004f12:	4798      	blx	r3
      return;
 8004f14:	e7f8      	b.n	8004f08 <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f16:	07d9      	lsls	r1, r3, #31
 8004f18:	d507      	bpl.n	8004f2a <HAL_UART_IRQHandler+0x7a>
 8004f1a:	05c1      	lsls	r1, r0, #23
 8004f1c:	d505      	bpl.n	8004f2a <HAL_UART_IRQHandler+0x7a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f1e:	2501      	movs	r5, #1
 8004f20:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f22:	2180      	movs	r1, #128	; 0x80
 8004f24:	5862      	ldr	r2, [r4, r1]
 8004f26:	432a      	orrs	r2, r5
 8004f28:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f2a:	079a      	lsls	r2, r3, #30
 8004f2c:	d509      	bpl.n	8004f42 <HAL_UART_IRQHandler+0x92>
 8004f2e:	2e00      	cmp	r6, #0
 8004f30:	d007      	beq.n	8004f42 <HAL_UART_IRQHandler+0x92>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f32:	6822      	ldr	r2, [r4, #0]
 8004f34:	2102      	movs	r1, #2
 8004f36:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f38:	317e      	adds	r1, #126	; 0x7e
 8004f3a:	5862      	ldr	r2, [r4, r1]
 8004f3c:	2504      	movs	r5, #4
 8004f3e:	432a      	orrs	r2, r5
 8004f40:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f42:	075a      	lsls	r2, r3, #29
 8004f44:	d509      	bpl.n	8004f5a <HAL_UART_IRQHandler+0xaa>
 8004f46:	2e00      	cmp	r6, #0
 8004f48:	d007      	beq.n	8004f5a <HAL_UART_IRQHandler+0xaa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f4a:	6822      	ldr	r2, [r4, #0]
 8004f4c:	2104      	movs	r1, #4
 8004f4e:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f50:	317c      	adds	r1, #124	; 0x7c
 8004f52:	5862      	ldr	r2, [r4, r1]
 8004f54:	2502      	movs	r5, #2
 8004f56:	432a      	orrs	r2, r5
 8004f58:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f5a:	071a      	lsls	r2, r3, #28
 8004f5c:	d50a      	bpl.n	8004f74 <HAL_UART_IRQHandler+0xc4>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f5e:	0682      	lsls	r2, r0, #26
 8004f60:	d401      	bmi.n	8004f66 <HAL_UART_IRQHandler+0xb6>
 8004f62:	2e00      	cmp	r6, #0
 8004f64:	d006      	beq.n	8004f74 <HAL_UART_IRQHandler+0xc4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f66:	6822      	ldr	r2, [r4, #0]
 8004f68:	2508      	movs	r5, #8
 8004f6a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f6c:	2180      	movs	r1, #128	; 0x80
 8004f6e:	5862      	ldr	r2, [r4, r1]
 8004f70:	432a      	orrs	r2, r5
 8004f72:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f74:	051a      	lsls	r2, r3, #20
 8004f76:	d50a      	bpl.n	8004f8e <HAL_UART_IRQHandler+0xde>
 8004f78:	0142      	lsls	r2, r0, #5
 8004f7a:	d508      	bpl.n	8004f8e <HAL_UART_IRQHandler+0xde>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f7c:	6822      	ldr	r2, [r4, #0]
 8004f7e:	2180      	movs	r1, #128	; 0x80
 8004f80:	0109      	lsls	r1, r1, #4
 8004f82:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f84:	2180      	movs	r1, #128	; 0x80
 8004f86:	5862      	ldr	r2, [r4, r1]
 8004f88:	2520      	movs	r5, #32
 8004f8a:	432a      	orrs	r2, r5
 8004f8c:	5062      	str	r2, [r4, r1]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f8e:	2280      	movs	r2, #128	; 0x80
 8004f90:	58a2      	ldr	r2, [r4, r2]
 8004f92:	2a00      	cmp	r2, #0
 8004f94:	d0b8      	beq.n	8004f08 <HAL_UART_IRQHandler+0x58>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f96:	069b      	lsls	r3, r3, #26
 8004f98:	d506      	bpl.n	8004fa8 <HAL_UART_IRQHandler+0xf8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f9a:	0683      	lsls	r3, r0, #26
 8004f9c:	d504      	bpl.n	8004fa8 <HAL_UART_IRQHandler+0xf8>
        if (huart->RxISR != NULL)
 8004f9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <HAL_UART_IRQHandler+0xf8>
          huart->RxISR(huart);
 8004fa4:	0020      	movs	r0, r4
 8004fa6:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8004fa8:	2380      	movs	r3, #128	; 0x80
 8004faa:	58e2      	ldr	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	065b      	lsls	r3, r3, #25
 8004fb2:	d402      	bmi.n	8004fba <HAL_UART_IRQHandler+0x10a>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004fb4:	2328      	movs	r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fb6:	4213      	tst	r3, r2
 8004fb8:	d029      	beq.n	800500e <HAL_UART_IRQHandler+0x15e>
        UART_EndRxTransfer(huart);
 8004fba:	0020      	movs	r0, r4
 8004fbc:	f7ff fe6c 	bl	8004c98 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc0:	6823      	ldr	r3, [r4, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	065b      	lsls	r3, r3, #25
 8004fc6:	d51e      	bpl.n	8005006 <HAL_UART_IRQHandler+0x156>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fc8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fcc:	2301      	movs	r3, #1
 8004fce:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fd2:	6822      	ldr	r2, [r4, #0]
 8004fd4:	6893      	ldr	r3, [r2, #8]
 8004fd6:	2040      	movs	r0, #64	; 0x40
 8004fd8:	4383      	bics	r3, r0
 8004fda:	6093      	str	r3, [r2, #8]
 8004fdc:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8004fe0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00b      	beq.n	8004ffe <HAL_UART_IRQHandler+0x14e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fe6:	4a63      	ldr	r2, [pc, #396]	; (8005174 <HAL_UART_IRQHandler+0x2c4>)
 8004fe8:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fea:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004fec:	f7fe fbc3 	bl	8003776 <HAL_DMA_Abort_IT>
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	d100      	bne.n	8004ff6 <HAL_UART_IRQHandler+0x146>
 8004ff4:	e788      	b.n	8004f08 <HAL_UART_IRQHandler+0x58>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ff6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004ff8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004ffa:	4798      	blx	r3
 8004ffc:	e784      	b.n	8004f08 <HAL_UART_IRQHandler+0x58>
            HAL_UART_ErrorCallback(huart);
 8004ffe:	0020      	movs	r0, r4
 8005000:	f7ff ff23 	bl	8004e4a <HAL_UART_ErrorCallback>
 8005004:	e780      	b.n	8004f08 <HAL_UART_IRQHandler+0x58>
          HAL_UART_ErrorCallback(huart);
 8005006:	0020      	movs	r0, r4
 8005008:	f7ff ff1f 	bl	8004e4a <HAL_UART_ErrorCallback>
 800500c:	e77c      	b.n	8004f08 <HAL_UART_IRQHandler+0x58>
        HAL_UART_ErrorCallback(huart);
 800500e:	0020      	movs	r0, r4
 8005010:	f7ff ff1b 	bl	8004e4a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005014:	2380      	movs	r3, #128	; 0x80
 8005016:	2200      	movs	r2, #0
 8005018:	50e2      	str	r2, [r4, r3]
    return;
 800501a:	e775      	b.n	8004f08 <HAL_UART_IRQHandler+0x58>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800501c:	06d9      	lsls	r1, r3, #27
 800501e:	d400      	bmi.n	8005022 <HAL_UART_IRQHandler+0x172>
 8005020:	e763      	b.n	8004eea <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005022:	06c1      	lsls	r1, r0, #27
 8005024:	d400      	bmi.n	8005028 <HAL_UART_IRQHandler+0x178>
 8005026:	e760      	b.n	8004eea <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005028:	2310      	movs	r3, #16
 800502a:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800502c:	6823      	ldr	r3, [r4, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	065b      	lsls	r3, r3, #25
 8005032:	d550      	bpl.n	80050d6 <HAL_UART_IRQHandler+0x226>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005034:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8005036:	6813      	ldr	r3, [r2, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800503c:	2b00      	cmp	r3, #0
 800503e:	d100      	bne.n	8005042 <HAL_UART_IRQHandler+0x192>
 8005040:	e762      	b.n	8004f08 <HAL_UART_IRQHandler+0x58>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005042:	2158      	movs	r1, #88	; 0x58
 8005044:	5a61      	ldrh	r1, [r4, r1]
 8005046:	4299      	cmp	r1, r3
 8005048:	d800      	bhi.n	800504c <HAL_UART_IRQHandler+0x19c>
 800504a:	e75d      	b.n	8004f08 <HAL_UART_IRQHandler+0x58>
        huart->RxXferCount = nb_remaining_rx_data;
 800504c:	215a      	movs	r1, #90	; 0x5a
 800504e:	5263      	strh	r3, [r4, r1]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005050:	6813      	ldr	r3, [r2, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	069b      	lsls	r3, r3, #26
 8005056:	d509      	bpl.n	800506c <HAL_UART_IRQHandler+0x1bc>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005058:	2358      	movs	r3, #88	; 0x58
 800505a:	5ae1      	ldrh	r1, [r4, r3]
 800505c:	3302      	adds	r3, #2
 800505e:	5ae3      	ldrh	r3, [r4, r3]
 8005060:	1ac9      	subs	r1, r1, r3
 8005062:	b289      	uxth	r1, r1
 8005064:	0020      	movs	r0, r4
 8005066:	f7ff ff22 	bl	8004eae <HAL_UARTEx_RxEventCallback>
      return;
 800506a:	e74d      	b.n	8004f08 <HAL_UART_IRQHandler+0x58>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800506c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005070:	2301      	movs	r3, #1
 8005072:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005076:	6821      	ldr	r1, [r4, #0]
 8005078:	680a      	ldr	r2, [r1, #0]
 800507a:	4d3f      	ldr	r5, [pc, #252]	; (8005178 <HAL_UART_IRQHandler+0x2c8>)
 800507c:	402a      	ands	r2, r5
 800507e:	600a      	str	r2, [r1, #0]
 8005080:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005084:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005088:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508c:	6821      	ldr	r1, [r4, #0]
 800508e:	688a      	ldr	r2, [r1, #8]
 8005090:	439a      	bics	r2, r3
 8005092:	608a      	str	r2, [r1, #8]
 8005094:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005098:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800509c:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050a0:	6821      	ldr	r1, [r4, #0]
 80050a2:	688a      	ldr	r2, [r1, #8]
 80050a4:	3542      	adds	r5, #66	; 0x42
 80050a6:	35ff      	adds	r5, #255	; 0xff
 80050a8:	43aa      	bics	r2, r5
 80050aa:	608a      	str	r2, [r1, #8]
 80050ac:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 80050b0:	2220      	movs	r2, #32
 80050b2:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b4:	2200      	movs	r2, #0
 80050b6:	6622      	str	r2, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050b8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050bc:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c0:	6822      	ldr	r2, [r4, #0]
 80050c2:	6813      	ldr	r3, [r2, #0]
 80050c4:	2010      	movs	r0, #16
 80050c6:	4383      	bics	r3, r0
 80050c8:	6013      	str	r3, [r2, #0]
 80050ca:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050ce:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80050d0:	f7fe fb2d 	bl	800372e <HAL_DMA_Abort>
 80050d4:	e7c0      	b.n	8005058 <HAL_UART_IRQHandler+0x1a8>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050d6:	2358      	movs	r3, #88	; 0x58
 80050d8:	5ae1      	ldrh	r1, [r4, r3]
 80050da:	3302      	adds	r3, #2
 80050dc:	5ae2      	ldrh	r2, [r4, r3]
 80050de:	1a89      	subs	r1, r1, r2
 80050e0:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80050e2:	5ae3      	ldrh	r3, [r4, r3]
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d100      	bne.n	80050ec <HAL_UART_IRQHandler+0x23c>
 80050ea:	e70d      	b.n	8004f08 <HAL_UART_IRQHandler+0x58>
          && (nb_rx_data > 0U))
 80050ec:	2900      	cmp	r1, #0
 80050ee:	d100      	bne.n	80050f2 <HAL_UART_IRQHandler+0x242>
 80050f0:	e70a      	b.n	8004f08 <HAL_UART_IRQHandler+0x58>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050f2:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f6:	2301      	movs	r3, #1
 80050f8:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050fc:	6820      	ldr	r0, [r4, #0]
 80050fe:	6802      	ldr	r2, [r0, #0]
 8005100:	4e1e      	ldr	r6, [pc, #120]	; (800517c <HAL_UART_IRQHandler+0x2cc>)
 8005102:	4032      	ands	r2, r6
 8005104:	6002      	str	r2, [r0, #0]
 8005106:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800510a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800510e:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005112:	6820      	ldr	r0, [r4, #0]
 8005114:	6882      	ldr	r2, [r0, #8]
 8005116:	439a      	bics	r2, r3
 8005118:	6082      	str	r2, [r0, #8]
 800511a:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 800511e:	2220      	movs	r2, #32
 8005120:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005122:	2200      	movs	r2, #0
 8005124:	6622      	str	r2, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 8005126:	6662      	str	r2, [r4, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005128:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800512c:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005130:	6822      	ldr	r2, [r4, #0]
 8005132:	6813      	ldr	r3, [r2, #0]
 8005134:	2510      	movs	r5, #16
 8005136:	43ab      	bics	r3, r5
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	f380 8810 	msr	PRIMASK, r0
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800513e:	0020      	movs	r0, r4
 8005140:	f7ff feb5 	bl	8004eae <HAL_UARTEx_RxEventCallback>
      return;
 8005144:	e6e0      	b.n	8004f08 <HAL_UART_IRQHandler+0x58>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005146:	2380      	movs	r3, #128	; 0x80
 8005148:	035b      	lsls	r3, r3, #13
 800514a:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800514c:	0020      	movs	r0, r4
 800514e:	f000 fbb3 	bl	80058b8 <HAL_UARTEx_WakeupCallback>
    return;
 8005152:	e6d9      	b.n	8004f08 <HAL_UART_IRQHandler+0x58>
    if (huart->TxISR != NULL)
 8005154:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005156:	2b00      	cmp	r3, #0
 8005158:	d100      	bne.n	800515c <HAL_UART_IRQHandler+0x2ac>
 800515a:	e6d5      	b.n	8004f08 <HAL_UART_IRQHandler+0x58>
      huart->TxISR(huart);
 800515c:	0020      	movs	r0, r4
 800515e:	4798      	blx	r3
    return;
 8005160:	e6d2      	b.n	8004f08 <HAL_UART_IRQHandler+0x58>
    UART_EndTransmit_IT(huart);
 8005162:	0020      	movs	r0, r4
 8005164:	f7ff fe56 	bl	8004e14 <UART_EndTransmit_IT>
    return;
 8005168:	e6ce      	b.n	8004f08 <HAL_UART_IRQHandler+0x58>
 800516a:	46c0      	nop			; (mov r8, r8)
 800516c:	0000080f 	.word	0x0000080f
 8005170:	04000120 	.word	0x04000120
 8005174:	08004e9b 	.word	0x08004e9b
 8005178:	fffffeff 	.word	0xfffffeff
 800517c:	fffffedf 	.word	0xfffffedf

08005180 <UART_DMARxHalfCplt>:
{
 8005180:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005182:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005184:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005186:	2b01      	cmp	r3, #1
 8005188:	d002      	beq.n	8005190 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800518a:	f7ff fe5d 	bl	8004e48 <HAL_UART_RxHalfCpltCallback>
}
 800518e:	bd10      	pop	{r4, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005190:	3357      	adds	r3, #87	; 0x57
 8005192:	5ac1      	ldrh	r1, [r0, r3]
 8005194:	0849      	lsrs	r1, r1, #1
 8005196:	f7ff fe8a 	bl	8004eae <HAL_UARTEx_RxEventCallback>
 800519a:	e7f8      	b.n	800518e <UART_DMARxHalfCplt+0xe>

0800519c <UART_DMAReceiveCplt>:
{
 800519c:	b570      	push	{r4, r5, r6, lr}
 800519e:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051a0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	069b      	lsls	r3, r3, #26
 80051a8:	d428      	bmi.n	80051fc <UART_DMAReceiveCplt+0x60>
    huart->RxXferCount = 0U;
 80051aa:	235a      	movs	r3, #90	; 0x5a
 80051ac:	2200      	movs	r2, #0
 80051ae:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051b0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051b4:	3b59      	subs	r3, #89	; 0x59
 80051b6:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051ba:	6801      	ldr	r1, [r0, #0]
 80051bc:	680a      	ldr	r2, [r1, #0]
 80051be:	4d1b      	ldr	r5, [pc, #108]	; (800522c <UART_DMAReceiveCplt+0x90>)
 80051c0:	402a      	ands	r2, r5
 80051c2:	600a      	str	r2, [r1, #0]
 80051c4:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051c8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051cc:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d0:	6801      	ldr	r1, [r0, #0]
 80051d2:	688a      	ldr	r2, [r1, #8]
 80051d4:	439a      	bics	r2, r3
 80051d6:	608a      	str	r2, [r1, #8]
 80051d8:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051dc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051e0:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051e4:	6802      	ldr	r2, [r0, #0]
 80051e6:	6893      	ldr	r3, [r2, #8]
 80051e8:	2440      	movs	r4, #64	; 0x40
 80051ea:	43a3      	bics	r3, r4
 80051ec:	6093      	str	r3, [r2, #8]
 80051ee:	f381 8810 	msr	PRIMASK, r1
    huart->RxState = HAL_UART_STATE_READY;
 80051f2:	2320      	movs	r3, #32
 80051f4:	67c3      	str	r3, [r0, #124]	; 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d005      	beq.n	8005208 <UART_DMAReceiveCplt+0x6c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051fc:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d00e      	beq.n	8005220 <UART_DMAReceiveCplt+0x84>
    HAL_UART_RxCpltCallback(huart);
 8005202:	f002 fc19 	bl	8007a38 <HAL_UART_RxCpltCallback>
}
 8005206:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005208:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800520c:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005210:	6802      	ldr	r2, [r0, #0]
 8005212:	6813      	ldr	r3, [r2, #0]
 8005214:	3c30      	subs	r4, #48	; 0x30
 8005216:	43a3      	bics	r3, r4
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	f381 8810 	msr	PRIMASK, r1
}
 800521e:	e7ed      	b.n	80051fc <UART_DMAReceiveCplt+0x60>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005220:	3357      	adds	r3, #87	; 0x57
 8005222:	5ac1      	ldrh	r1, [r0, r3]
 8005224:	f7ff fe43 	bl	8004eae <HAL_UARTEx_RxEventCallback>
 8005228:	e7ed      	b.n	8005206 <UART_DMAReceiveCplt+0x6a>
 800522a:	46c0      	nop			; (mov r8, r8)
 800522c:	fffffeff 	.word	0xfffffeff

08005230 <UART_SetConfig>:
{
 8005230:	b5d0      	push	{r4, r6, r7, lr}
 8005232:	0004      	movs	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005234:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005236:	6883      	ldr	r3, [r0, #8]
 8005238:	6902      	ldr	r2, [r0, #16]
 800523a:	4313      	orrs	r3, r2
 800523c:	6942      	ldr	r2, [r0, #20]
 800523e:	4313      	orrs	r3, r2
 8005240:	69c2      	ldr	r2, [r0, #28]
 8005242:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005244:	680a      	ldr	r2, [r1, #0]
 8005246:	489b      	ldr	r0, [pc, #620]	; (80054b4 <UART_SetConfig+0x284>)
 8005248:	4002      	ands	r2, r0
 800524a:	4313      	orrs	r3, r2
 800524c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800524e:	6822      	ldr	r2, [r4, #0]
 8005250:	6853      	ldr	r3, [r2, #4]
 8005252:	4999      	ldr	r1, [pc, #612]	; (80054b8 <UART_SetConfig+0x288>)
 8005254:	400b      	ands	r3, r1
 8005256:	68e1      	ldr	r1, [r4, #12]
 8005258:	430b      	orrs	r3, r1
 800525a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800525c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800525e:	6822      	ldr	r2, [r4, #0]
 8005260:	4b96      	ldr	r3, [pc, #600]	; (80054bc <UART_SetConfig+0x28c>)
 8005262:	429a      	cmp	r2, r3
 8005264:	d001      	beq.n	800526a <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8005266:	6a23      	ldr	r3, [r4, #32]
 8005268:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800526a:	6893      	ldr	r3, [r2, #8]
 800526c:	4894      	ldr	r0, [pc, #592]	; (80054c0 <UART_SetConfig+0x290>)
 800526e:	4003      	ands	r3, r0
 8005270:	430b      	orrs	r3, r1
 8005272:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005274:	6822      	ldr	r2, [r4, #0]
 8005276:	4b93      	ldr	r3, [pc, #588]	; (80054c4 <UART_SetConfig+0x294>)
 8005278:	429a      	cmp	r2, r3
 800527a:	d00d      	beq.n	8005298 <UART_SetConfig+0x68>
 800527c:	4b92      	ldr	r3, [pc, #584]	; (80054c8 <UART_SetConfig+0x298>)
 800527e:	429a      	cmp	r2, r3
 8005280:	d02a      	beq.n	80052d8 <UART_SetConfig+0xa8>
 8005282:	4b92      	ldr	r3, [pc, #584]	; (80054cc <UART_SetConfig+0x29c>)
 8005284:	429a      	cmp	r2, r3
 8005286:	d05e      	beq.n	8005346 <UART_SetConfig+0x116>
 8005288:	4b91      	ldr	r3, [pc, #580]	; (80054d0 <UART_SetConfig+0x2a0>)
 800528a:	429a      	cmp	r2, r3
 800528c:	d05d      	beq.n	800534a <UART_SetConfig+0x11a>
 800528e:	4b8b      	ldr	r3, [pc, #556]	; (80054bc <UART_SetConfig+0x28c>)
 8005290:	429a      	cmp	r2, r3
 8005292:	d032      	beq.n	80052fa <UART_SetConfig+0xca>
 8005294:	2310      	movs	r3, #16
 8005296:	e00b      	b.n	80052b0 <UART_SetConfig+0x80>
 8005298:	4b8e      	ldr	r3, [pc, #568]	; (80054d4 <UART_SetConfig+0x2a4>)
 800529a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800529c:	2303      	movs	r3, #3
 800529e:	400b      	ands	r3, r1
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d042      	beq.n	800532a <UART_SetConfig+0xfa>
 80052a4:	d814      	bhi.n	80052d0 <UART_SetConfig+0xa0>
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d041      	beq.n	800532e <UART_SetConfig+0xfe>
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d141      	bne.n	8005332 <UART_SetConfig+0x102>
 80052ae:	3303      	adds	r3, #3
  if (UART_INSTANCE_LOWPOWER(huart))
 80052b0:	4982      	ldr	r1, [pc, #520]	; (80054bc <UART_SetConfig+0x28c>)
 80052b2:	428a      	cmp	r2, r1
 80052b4:	d053      	beq.n	800535e <UART_SetConfig+0x12e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052b6:	69e0      	ldr	r0, [r4, #28]
 80052b8:	2280      	movs	r2, #128	; 0x80
 80052ba:	0212      	lsls	r2, r2, #8
 80052bc:	4290      	cmp	r0, r2
 80052be:	d100      	bne.n	80052c2 <UART_SetConfig+0x92>
 80052c0:	e08a      	b.n	80053d8 <UART_SetConfig+0x1a8>
    switch (clocksource)
 80052c2:	2b08      	cmp	r3, #8
 80052c4:	d900      	bls.n	80052c8 <UART_SetConfig+0x98>
 80052c6:	e0ee      	b.n	80054a6 <UART_SetConfig+0x276>
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4a83      	ldr	r2, [pc, #524]	; (80054d8 <UART_SetConfig+0x2a8>)
 80052cc:	58d3      	ldr	r3, [r2, r3]
 80052ce:	469f      	mov	pc, r3
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052d0:	2b03      	cmp	r3, #3
 80052d2:	d130      	bne.n	8005336 <UART_SetConfig+0x106>
 80052d4:	3305      	adds	r3, #5
 80052d6:	e7eb      	b.n	80052b0 <UART_SetConfig+0x80>
 80052d8:	4b7e      	ldr	r3, [pc, #504]	; (80054d4 <UART_SetConfig+0x2a4>)
 80052da:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80052dc:	230c      	movs	r3, #12
 80052de:	400b      	ands	r3, r1
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d02a      	beq.n	800533a <UART_SetConfig+0x10a>
 80052e4:	d805      	bhi.n	80052f2 <UART_SetConfig+0xc2>
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d029      	beq.n	800533e <UART_SetConfig+0x10e>
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	d0e0      	beq.n	80052b0 <UART_SetConfig+0x80>
 80052ee:	2310      	movs	r3, #16
 80052f0:	e7de      	b.n	80052b0 <UART_SetConfig+0x80>
 80052f2:	2b0c      	cmp	r3, #12
 80052f4:	d125      	bne.n	8005342 <UART_SetConfig+0x112>
 80052f6:	3b04      	subs	r3, #4
 80052f8:	e7da      	b.n	80052b0 <UART_SetConfig+0x80>
 80052fa:	4b76      	ldr	r3, [pc, #472]	; (80054d4 <UART_SetConfig+0x2a4>)
 80052fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052fe:	21c0      	movs	r1, #192	; 0xc0
 8005300:	0109      	lsls	r1, r1, #4
 8005302:	400b      	ands	r3, r1
 8005304:	2180      	movs	r1, #128	; 0x80
 8005306:	0109      	lsls	r1, r1, #4
 8005308:	428b      	cmp	r3, r1
 800530a:	d020      	beq.n	800534e <UART_SetConfig+0x11e>
 800530c:	d807      	bhi.n	800531e <UART_SetConfig+0xee>
 800530e:	2b00      	cmp	r3, #0
 8005310:	d01f      	beq.n	8005352 <UART_SetConfig+0x122>
 8005312:	2180      	movs	r1, #128	; 0x80
 8005314:	00c9      	lsls	r1, r1, #3
 8005316:	428b      	cmp	r3, r1
 8005318:	d11d      	bne.n	8005356 <UART_SetConfig+0x126>
 800531a:	2304      	movs	r3, #4
 800531c:	e7c8      	b.n	80052b0 <UART_SetConfig+0x80>
 800531e:	21c0      	movs	r1, #192	; 0xc0
 8005320:	0109      	lsls	r1, r1, #4
 8005322:	428b      	cmp	r3, r1
 8005324:	d119      	bne.n	800535a <UART_SetConfig+0x12a>
 8005326:	2308      	movs	r3, #8
 8005328:	e7c2      	b.n	80052b0 <UART_SetConfig+0x80>
 800532a:	2302      	movs	r3, #2
 800532c:	e7c0      	b.n	80052b0 <UART_SetConfig+0x80>
 800532e:	2301      	movs	r3, #1
 8005330:	e7be      	b.n	80052b0 <UART_SetConfig+0x80>
 8005332:	2310      	movs	r3, #16
 8005334:	e7bc      	b.n	80052b0 <UART_SetConfig+0x80>
 8005336:	2310      	movs	r3, #16
 8005338:	e7ba      	b.n	80052b0 <UART_SetConfig+0x80>
 800533a:	2302      	movs	r3, #2
 800533c:	e7b8      	b.n	80052b0 <UART_SetConfig+0x80>
 800533e:	2300      	movs	r3, #0
 8005340:	e7b6      	b.n	80052b0 <UART_SetConfig+0x80>
 8005342:	2310      	movs	r3, #16
 8005344:	e7b4      	b.n	80052b0 <UART_SetConfig+0x80>
 8005346:	2300      	movs	r3, #0
 8005348:	e7b2      	b.n	80052b0 <UART_SetConfig+0x80>
 800534a:	2300      	movs	r3, #0
 800534c:	e7b0      	b.n	80052b0 <UART_SetConfig+0x80>
 800534e:	2302      	movs	r3, #2
 8005350:	e7ae      	b.n	80052b0 <UART_SetConfig+0x80>
 8005352:	2300      	movs	r3, #0
 8005354:	e7ac      	b.n	80052b0 <UART_SetConfig+0x80>
 8005356:	2310      	movs	r3, #16
 8005358:	e7aa      	b.n	80052b0 <UART_SetConfig+0x80>
 800535a:	2310      	movs	r3, #16
 800535c:	e7a8      	b.n	80052b0 <UART_SetConfig+0x80>
    switch (clocksource)
 800535e:	2b04      	cmp	r3, #4
 8005360:	d035      	beq.n	80053ce <UART_SetConfig+0x19e>
 8005362:	d80b      	bhi.n	800537c <UART_SetConfig+0x14c>
 8005364:	2b00      	cmp	r3, #0
 8005366:	d02c      	beq.n	80053c2 <UART_SetConfig+0x192>
 8005368:	2b02      	cmp	r3, #2
 800536a:	d105      	bne.n	8005378 <UART_SetConfig+0x148>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800536c:	4b59      	ldr	r3, [pc, #356]	; (80054d4 <UART_SetConfig+0x2a4>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	06db      	lsls	r3, r3, #27
 8005372:	d42f      	bmi.n	80053d4 <UART_SetConfig+0x1a4>
          pclk = (uint32_t) HSI_VALUE;
 8005374:	4859      	ldr	r0, [pc, #356]	; (80054dc <UART_SetConfig+0x2ac>)
 8005376:	e005      	b.n	8005384 <UART_SetConfig+0x154>
    switch (clocksource)
 8005378:	2001      	movs	r0, #1
 800537a:	e073      	b.n	8005464 <UART_SetConfig+0x234>
 800537c:	2b08      	cmp	r3, #8
 800537e:	d11e      	bne.n	80053be <UART_SetConfig+0x18e>
 8005380:	2080      	movs	r0, #128	; 0x80
 8005382:	0200      	lsls	r0, r0, #8
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005384:	6862      	ldr	r2, [r4, #4]
 8005386:	0053      	lsls	r3, r2, #1
 8005388:	189b      	adds	r3, r3, r2
 800538a:	4283      	cmp	r3, r0
 800538c:	d900      	bls.n	8005390 <UART_SetConfig+0x160>
 800538e:	e07e      	b.n	800548e <UART_SetConfig+0x25e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005390:	0313      	lsls	r3, r2, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005392:	4283      	cmp	r3, r0
 8005394:	d200      	bcs.n	8005398 <UART_SetConfig+0x168>
 8005396:	e07c      	b.n	8005492 <UART_SetConfig+0x262>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005398:	0e07      	lsrs	r7, r0, #24
 800539a:	0206      	lsls	r6, r0, #8
 800539c:	0850      	lsrs	r0, r2, #1
 800539e:	2100      	movs	r1, #0
 80053a0:	1980      	adds	r0, r0, r6
 80053a2:	4179      	adcs	r1, r7
 80053a4:	2300      	movs	r3, #0
 80053a6:	f7fb f8b9 	bl	800051c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053aa:	4b4d      	ldr	r3, [pc, #308]	; (80054e0 <UART_SetConfig+0x2b0>)
 80053ac:	18c2      	adds	r2, r0, r3
 80053ae:	4b4d      	ldr	r3, [pc, #308]	; (80054e4 <UART_SetConfig+0x2b4>)
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d900      	bls.n	80053b6 <UART_SetConfig+0x186>
 80053b4:	e06f      	b.n	8005496 <UART_SetConfig+0x266>
          huart->Instance->BRR = usartdiv;
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	60d8      	str	r0, [r3, #12]
 80053ba:	2000      	movs	r0, #0
 80053bc:	e052      	b.n	8005464 <UART_SetConfig+0x234>
    switch (clocksource)
 80053be:	2001      	movs	r0, #1
 80053c0:	e050      	b.n	8005464 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 80053c2:	f7ff f8c5 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80053c6:	2800      	cmp	r0, #0
 80053c8:	d1dc      	bne.n	8005384 <UART_SetConfig+0x154>
 80053ca:	2000      	movs	r0, #0
 80053cc:	e04a      	b.n	8005464 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetSysClockFreq();
 80053ce:	f7fe fca9 	bl	8003d24 <HAL_RCC_GetSysClockFreq>
        break;
 80053d2:	e7f8      	b.n	80053c6 <UART_SetConfig+0x196>
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80053d4:	4844      	ldr	r0, [pc, #272]	; (80054e8 <UART_SetConfig+0x2b8>)
 80053d6:	e7d5      	b.n	8005384 <UART_SetConfig+0x154>
    switch (clocksource)
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d85e      	bhi.n	800549a <UART_SetConfig+0x26a>
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4a43      	ldr	r2, [pc, #268]	; (80054ec <UART_SetConfig+0x2bc>)
 80053e0:	58d3      	ldr	r3, [r2, r3]
 80053e2:	469f      	mov	pc, r3
        pclk = HAL_RCC_GetPCLK1Freq();
 80053e4:	f7ff f8b4 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80053e8:	2800      	cmp	r0, #0
 80053ea:	d058      	beq.n	800549e <UART_SetConfig+0x26e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053ec:	0040      	lsls	r0, r0, #1
 80053ee:	6863      	ldr	r3, [r4, #4]
 80053f0:	085b      	lsrs	r3, r3, #1
 80053f2:	18c0      	adds	r0, r0, r3
 80053f4:	6861      	ldr	r1, [r4, #4]
 80053f6:	f7fa fea3 	bl	8000140 <__udivsi3>
 80053fa:	b283      	uxth	r3, r0
 80053fc:	0400      	lsls	r0, r0, #16
 80053fe:	0c00      	lsrs	r0, r0, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005400:	0001      	movs	r1, r0
 8005402:	3910      	subs	r1, #16
 8005404:	4a3a      	ldr	r2, [pc, #232]	; (80054f0 <UART_SetConfig+0x2c0>)
 8005406:	4291      	cmp	r1, r2
 8005408:	d84b      	bhi.n	80054a2 <UART_SetConfig+0x272>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800540a:	220f      	movs	r2, #15
 800540c:	4393      	bics	r3, r2
 800540e:	001a      	movs	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005410:	0840      	lsrs	r0, r0, #1
 8005412:	2307      	movs	r3, #7
 8005414:	4018      	ands	r0, r3
 8005416:	4310      	orrs	r0, r2
        huart->Instance->BRR = brrtemp;
 8005418:	6823      	ldr	r3, [r4, #0]
 800541a:	60d8      	str	r0, [r3, #12]
 800541c:	2000      	movs	r0, #0
 800541e:	e021      	b.n	8005464 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005420:	f7ff f8a6 	bl	8004570 <HAL_RCC_GetPCLK2Freq>
        break;
 8005424:	e7e0      	b.n	80053e8 <UART_SetConfig+0x1b8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005426:	4b2b      	ldr	r3, [pc, #172]	; (80054d4 <UART_SetConfig+0x2a4>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	06db      	lsls	r3, r3, #27
 800542c:	d404      	bmi.n	8005438 <UART_SetConfig+0x208>
          pclk = (uint32_t) HSI_VALUE;
 800542e:	482b      	ldr	r0, [pc, #172]	; (80054dc <UART_SetConfig+0x2ac>)
 8005430:	e7dc      	b.n	80053ec <UART_SetConfig+0x1bc>
        pclk = HAL_RCC_GetSysClockFreq();
 8005432:	f7fe fc77 	bl	8003d24 <HAL_RCC_GetSysClockFreq>
        break;
 8005436:	e7d7      	b.n	80053e8 <UART_SetConfig+0x1b8>
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005438:	482b      	ldr	r0, [pc, #172]	; (80054e8 <UART_SetConfig+0x2b8>)
 800543a:	e7d7      	b.n	80053ec <UART_SetConfig+0x1bc>
        pclk = HAL_RCC_GetPCLK1Freq();
 800543c:	f7ff f888 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005440:	2800      	cmp	r0, #0
 8005442:	d032      	beq.n	80054aa <UART_SetConfig+0x27a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005444:	6863      	ldr	r3, [r4, #4]
 8005446:	085b      	lsrs	r3, r3, #1
 8005448:	1818      	adds	r0, r3, r0
 800544a:	6861      	ldr	r1, [r4, #4]
 800544c:	f7fa fe78 	bl	8000140 <__udivsi3>
 8005450:	0400      	lsls	r0, r0, #16
 8005452:	0c00      	lsrs	r0, r0, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005454:	0002      	movs	r2, r0
 8005456:	3a10      	subs	r2, #16
 8005458:	4b25      	ldr	r3, [pc, #148]	; (80054f0 <UART_SetConfig+0x2c0>)
 800545a:	429a      	cmp	r2, r3
 800545c:	d827      	bhi.n	80054ae <UART_SetConfig+0x27e>
        huart->Instance->BRR = usartdiv;
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	60d8      	str	r0, [r3, #12]
 8005462:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8005464:	2300      	movs	r3, #0
 8005466:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8005468:	66a3      	str	r3, [r4, #104]	; 0x68
}
 800546a:	bdd0      	pop	{r4, r6, r7, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800546c:	f7ff f880 	bl	8004570 <HAL_RCC_GetPCLK2Freq>
        break;
 8005470:	e7e6      	b.n	8005440 <UART_SetConfig+0x210>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005472:	4b18      	ldr	r3, [pc, #96]	; (80054d4 <UART_SetConfig+0x2a4>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	06db      	lsls	r3, r3, #27
 8005478:	d407      	bmi.n	800548a <UART_SetConfig+0x25a>
          pclk = (uint32_t) HSI_VALUE;
 800547a:	4818      	ldr	r0, [pc, #96]	; (80054dc <UART_SetConfig+0x2ac>)
 800547c:	e7e2      	b.n	8005444 <UART_SetConfig+0x214>
        pclk = HAL_RCC_GetSysClockFreq();
 800547e:	f7fe fc51 	bl	8003d24 <HAL_RCC_GetSysClockFreq>
        break;
 8005482:	e7dd      	b.n	8005440 <UART_SetConfig+0x210>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005484:	2080      	movs	r0, #128	; 0x80
 8005486:	0200      	lsls	r0, r0, #8
 8005488:	e7dc      	b.n	8005444 <UART_SetConfig+0x214>
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800548a:	4817      	ldr	r0, [pc, #92]	; (80054e8 <UART_SetConfig+0x2b8>)
 800548c:	e7da      	b.n	8005444 <UART_SetConfig+0x214>
        ret = HAL_ERROR;
 800548e:	2001      	movs	r0, #1
 8005490:	e7e8      	b.n	8005464 <UART_SetConfig+0x234>
 8005492:	2001      	movs	r0, #1
 8005494:	e7e6      	b.n	8005464 <UART_SetConfig+0x234>
          ret = HAL_ERROR;
 8005496:	2001      	movs	r0, #1
 8005498:	e7e4      	b.n	8005464 <UART_SetConfig+0x234>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800549a:	2001      	movs	r0, #1
 800549c:	e7e2      	b.n	8005464 <UART_SetConfig+0x234>
 800549e:	2000      	movs	r0, #0
 80054a0:	e7e0      	b.n	8005464 <UART_SetConfig+0x234>
        ret = HAL_ERROR;
 80054a2:	2001      	movs	r0, #1
 80054a4:	e7de      	b.n	8005464 <UART_SetConfig+0x234>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054a6:	2001      	movs	r0, #1
 80054a8:	e7dc      	b.n	8005464 <UART_SetConfig+0x234>
 80054aa:	2000      	movs	r0, #0
 80054ac:	e7da      	b.n	8005464 <UART_SetConfig+0x234>
        ret = HAL_ERROR;
 80054ae:	2001      	movs	r0, #1
 80054b0:	e7d8      	b.n	8005464 <UART_SetConfig+0x234>
 80054b2:	46c0      	nop			; (mov r8, r8)
 80054b4:	efff69f3 	.word	0xefff69f3
 80054b8:	ffffcfff 	.word	0xffffcfff
 80054bc:	40004800 	.word	0x40004800
 80054c0:	fffff4ff 	.word	0xfffff4ff
 80054c4:	40013800 	.word	0x40013800
 80054c8:	40004400 	.word	0x40004400
 80054cc:	40004c00 	.word	0x40004c00
 80054d0:	40005000 	.word	0x40005000
 80054d4:	40021000 	.word	0x40021000
 80054d8:	0800e2e4 	.word	0x0800e2e4
 80054dc:	00f42400 	.word	0x00f42400
 80054e0:	fffffd00 	.word	0xfffffd00
 80054e4:	000ffcff 	.word	0x000ffcff
 80054e8:	003d0900 	.word	0x003d0900
 80054ec:	0800e308 	.word	0x0800e308
 80054f0:	0000ffef 	.word	0x0000ffef

080054f4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80054f6:	07db      	lsls	r3, r3, #31
 80054f8:	d506      	bpl.n	8005508 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054fa:	6802      	ldr	r2, [r0, #0]
 80054fc:	6853      	ldr	r3, [r2, #4]
 80054fe:	492c      	ldr	r1, [pc, #176]	; (80055b0 <UART_AdvFeatureConfig+0xbc>)
 8005500:	400b      	ands	r3, r1
 8005502:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8005504:	430b      	orrs	r3, r1
 8005506:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005508:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800550a:	079b      	lsls	r3, r3, #30
 800550c:	d506      	bpl.n	800551c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800550e:	6802      	ldr	r2, [r0, #0]
 8005510:	6853      	ldr	r3, [r2, #4]
 8005512:	4928      	ldr	r1, [pc, #160]	; (80055b4 <UART_AdvFeatureConfig+0xc0>)
 8005514:	400b      	ands	r3, r1
 8005516:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005518:	430b      	orrs	r3, r1
 800551a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800551c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800551e:	075b      	lsls	r3, r3, #29
 8005520:	d506      	bpl.n	8005530 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005522:	6802      	ldr	r2, [r0, #0]
 8005524:	6853      	ldr	r3, [r2, #4]
 8005526:	4924      	ldr	r1, [pc, #144]	; (80055b8 <UART_AdvFeatureConfig+0xc4>)
 8005528:	400b      	ands	r3, r1
 800552a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800552c:	430b      	orrs	r3, r1
 800552e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005530:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005532:	071b      	lsls	r3, r3, #28
 8005534:	d506      	bpl.n	8005544 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005536:	6802      	ldr	r2, [r0, #0]
 8005538:	6853      	ldr	r3, [r2, #4]
 800553a:	4920      	ldr	r1, [pc, #128]	; (80055bc <UART_AdvFeatureConfig+0xc8>)
 800553c:	400b      	ands	r3, r1
 800553e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005540:	430b      	orrs	r3, r1
 8005542:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005544:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005546:	06db      	lsls	r3, r3, #27
 8005548:	d506      	bpl.n	8005558 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800554a:	6802      	ldr	r2, [r0, #0]
 800554c:	6893      	ldr	r3, [r2, #8]
 800554e:	491c      	ldr	r1, [pc, #112]	; (80055c0 <UART_AdvFeatureConfig+0xcc>)
 8005550:	400b      	ands	r3, r1
 8005552:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005554:	430b      	orrs	r3, r1
 8005556:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005558:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800555a:	069b      	lsls	r3, r3, #26
 800555c:	d506      	bpl.n	800556c <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800555e:	6802      	ldr	r2, [r0, #0]
 8005560:	6893      	ldr	r3, [r2, #8]
 8005562:	4918      	ldr	r1, [pc, #96]	; (80055c4 <UART_AdvFeatureConfig+0xd0>)
 8005564:	400b      	ands	r3, r1
 8005566:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005568:	430b      	orrs	r3, r1
 800556a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800556c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800556e:	065b      	lsls	r3, r3, #25
 8005570:	d50b      	bpl.n	800558a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005572:	6802      	ldr	r2, [r0, #0]
 8005574:	6853      	ldr	r3, [r2, #4]
 8005576:	4914      	ldr	r1, [pc, #80]	; (80055c8 <UART_AdvFeatureConfig+0xd4>)
 8005578:	400b      	ands	r3, r1
 800557a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800557c:	430b      	orrs	r3, r1
 800557e:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005580:	2380      	movs	r3, #128	; 0x80
 8005582:	035b      	lsls	r3, r3, #13
 8005584:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005586:	429a      	cmp	r2, r3
 8005588:	d00a      	beq.n	80055a0 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800558a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800558c:	061b      	lsls	r3, r3, #24
 800558e:	d506      	bpl.n	800559e <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005590:	6802      	ldr	r2, [r0, #0]
 8005592:	6853      	ldr	r3, [r2, #4]
 8005594:	490d      	ldr	r1, [pc, #52]	; (80055cc <UART_AdvFeatureConfig+0xd8>)
 8005596:	400b      	ands	r3, r1
 8005598:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800559a:	430b      	orrs	r3, r1
 800559c:	6053      	str	r3, [r2, #4]
}
 800559e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055a0:	6802      	ldr	r2, [r0, #0]
 80055a2:	6853      	ldr	r3, [r2, #4]
 80055a4:	490a      	ldr	r1, [pc, #40]	; (80055d0 <UART_AdvFeatureConfig+0xdc>)
 80055a6:	400b      	ands	r3, r1
 80055a8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80055aa:	430b      	orrs	r3, r1
 80055ac:	6053      	str	r3, [r2, #4]
 80055ae:	e7ec      	b.n	800558a <UART_AdvFeatureConfig+0x96>
 80055b0:	fffdffff 	.word	0xfffdffff
 80055b4:	fffeffff 	.word	0xfffeffff
 80055b8:	fffbffff 	.word	0xfffbffff
 80055bc:	ffff7fff 	.word	0xffff7fff
 80055c0:	ffffefff 	.word	0xffffefff
 80055c4:	ffffdfff 	.word	0xffffdfff
 80055c8:	ffefffff 	.word	0xffefffff
 80055cc:	fff7ffff 	.word	0xfff7ffff
 80055d0:	ff9fffff 	.word	0xff9fffff

080055d4 <UART_WaitOnFlagUntilTimeout>:
{
 80055d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055d6:	46ce      	mov	lr, r9
 80055d8:	4647      	mov	r7, r8
 80055da:	b580      	push	{r7, lr}
 80055dc:	0006      	movs	r6, r0
 80055de:	000d      	movs	r5, r1
 80055e0:	0017      	movs	r7, r2
 80055e2:	4699      	mov	r9, r3
 80055e4:	9b08      	ldr	r3, [sp, #32]
 80055e6:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055e8:	6833      	ldr	r3, [r6, #0]
 80055ea:	69dc      	ldr	r4, [r3, #28]
 80055ec:	402c      	ands	r4, r5
 80055ee:	1b64      	subs	r4, r4, r5
 80055f0:	4263      	negs	r3, r4
 80055f2:	415c      	adcs	r4, r3
 80055f4:	42bc      	cmp	r4, r7
 80055f6:	d153      	bne.n	80056a0 <UART_WaitOnFlagUntilTimeout+0xcc>
    if (Timeout != HAL_MAX_DELAY)
 80055f8:	4643      	mov	r3, r8
 80055fa:	3301      	adds	r3, #1
 80055fc:	d0f4      	beq.n	80055e8 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055fe:	f7fd fc03 	bl	8002e08 <HAL_GetTick>
 8005602:	464b      	mov	r3, r9
 8005604:	1ac0      	subs	r0, r0, r3
 8005606:	4540      	cmp	r0, r8
 8005608:	d82c      	bhi.n	8005664 <UART_WaitOnFlagUntilTimeout+0x90>
 800560a:	4643      	mov	r3, r8
 800560c:	2b00      	cmp	r3, #0
 800560e:	d029      	beq.n	8005664 <UART_WaitOnFlagUntilTimeout+0x90>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005610:	6833      	ldr	r3, [r6, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	0752      	lsls	r2, r2, #29
 8005616:	d5e7      	bpl.n	80055e8 <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005618:	69da      	ldr	r2, [r3, #28]
 800561a:	0512      	lsls	r2, r2, #20
 800561c:	d5e4      	bpl.n	80055e8 <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800561e:	2280      	movs	r2, #128	; 0x80
 8005620:	0112      	lsls	r2, r2, #4
 8005622:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005624:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005628:	2201      	movs	r2, #1
 800562a:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800562e:	6831      	ldr	r1, [r6, #0]
 8005630:	680b      	ldr	r3, [r1, #0]
 8005632:	4c1e      	ldr	r4, [pc, #120]	; (80056ac <UART_WaitOnFlagUntilTimeout+0xd8>)
 8005634:	4023      	ands	r3, r4
 8005636:	600b      	str	r3, [r1, #0]
 8005638:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800563c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005640:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005644:	6831      	ldr	r1, [r6, #0]
 8005646:	688b      	ldr	r3, [r1, #8]
 8005648:	4393      	bics	r3, r2
 800564a:	608b      	str	r3, [r1, #8]
 800564c:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8005650:	2320      	movs	r3, #32
 8005652:	67b3      	str	r3, [r6, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005654:	67f3      	str	r3, [r6, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005656:	327f      	adds	r2, #127	; 0x7f
 8005658:	50b3      	str	r3, [r6, r2]
          __HAL_UNLOCK(huart);
 800565a:	3354      	adds	r3, #84	; 0x54
 800565c:	2200      	movs	r2, #0
 800565e:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8005660:	2003      	movs	r0, #3
 8005662:	e01e      	b.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xce>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005664:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005668:	2201      	movs	r2, #1
 800566a:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800566e:	6831      	ldr	r1, [r6, #0]
 8005670:	680b      	ldr	r3, [r1, #0]
 8005672:	4c0e      	ldr	r4, [pc, #56]	; (80056ac <UART_WaitOnFlagUntilTimeout+0xd8>)
 8005674:	4023      	ands	r3, r4
 8005676:	600b      	str	r3, [r1, #0]
 8005678:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800567c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005680:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005684:	6831      	ldr	r1, [r6, #0]
 8005686:	688b      	ldr	r3, [r1, #8]
 8005688:	4393      	bics	r3, r2
 800568a:	608b      	str	r3, [r1, #8]
 800568c:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8005690:	2320      	movs	r3, #32
 8005692:	67b3      	str	r3, [r6, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005694:	67f3      	str	r3, [r6, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8005696:	3354      	adds	r3, #84	; 0x54
 8005698:	2200      	movs	r2, #0
 800569a:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 800569c:	2003      	movs	r0, #3
 800569e:	e000      	b.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xce>
  return HAL_OK;
 80056a0:	2000      	movs	r0, #0
}
 80056a2:	bcc0      	pop	{r6, r7}
 80056a4:	46b9      	mov	r9, r7
 80056a6:	46b0      	mov	r8, r6
 80056a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	fffffe5f 	.word	0xfffffe5f

080056b0 <UART_CheckIdleState>:
{
 80056b0:	b530      	push	{r4, r5, lr}
 80056b2:	b083      	sub	sp, #12
 80056b4:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b6:	2380      	movs	r3, #128	; 0x80
 80056b8:	2200      	movs	r2, #0
 80056ba:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80056bc:	f7fd fba4 	bl	8002e08 <HAL_GetTick>
 80056c0:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	071b      	lsls	r3, r3, #28
 80056c8:	d40d      	bmi.n	80056e6 <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	075b      	lsls	r3, r3, #29
 80056d0:	d416      	bmi.n	8005700 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 80056d2:	2320      	movs	r3, #32
 80056d4:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80056d6:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d8:	2300      	movs	r3, #0
 80056da:	6623      	str	r3, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 80056dc:	2274      	movs	r2, #116	; 0x74
 80056de:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 80056e0:	2000      	movs	r0, #0
}
 80056e2:	b003      	add	sp, #12
 80056e4:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056e6:	2180      	movs	r1, #128	; 0x80
 80056e8:	4b0c      	ldr	r3, [pc, #48]	; (800571c <UART_CheckIdleState+0x6c>)
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	0003      	movs	r3, r0
 80056ee:	2200      	movs	r2, #0
 80056f0:	0389      	lsls	r1, r1, #14
 80056f2:	0020      	movs	r0, r4
 80056f4:	f7ff ff6e 	bl	80055d4 <UART_WaitOnFlagUntilTimeout>
 80056f8:	2800      	cmp	r0, #0
 80056fa:	d0e6      	beq.n	80056ca <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80056fc:	2003      	movs	r0, #3
 80056fe:	e7f0      	b.n	80056e2 <UART_CheckIdleState+0x32>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005700:	2180      	movs	r1, #128	; 0x80
 8005702:	4b06      	ldr	r3, [pc, #24]	; (800571c <UART_CheckIdleState+0x6c>)
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	002b      	movs	r3, r5
 8005708:	2200      	movs	r2, #0
 800570a:	03c9      	lsls	r1, r1, #15
 800570c:	0020      	movs	r0, r4
 800570e:	f7ff ff61 	bl	80055d4 <UART_WaitOnFlagUntilTimeout>
 8005712:	2800      	cmp	r0, #0
 8005714:	d0dd      	beq.n	80056d2 <UART_CheckIdleState+0x22>
      return HAL_TIMEOUT;
 8005716:	2003      	movs	r0, #3
 8005718:	e7e3      	b.n	80056e2 <UART_CheckIdleState+0x32>
 800571a:	46c0      	nop			; (mov r8, r8)
 800571c:	01ffffff 	.word	0x01ffffff

08005720 <HAL_UART_Init>:
{
 8005720:	b510      	push	{r4, lr}
 8005722:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8005724:	d02e      	beq.n	8005784 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005726:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005728:	2b00      	cmp	r3, #0
 800572a:	d021      	beq.n	8005770 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800572c:	2324      	movs	r3, #36	; 0x24
 800572e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8005730:	6822      	ldr	r2, [r4, #0]
 8005732:	6813      	ldr	r3, [r2, #0]
 8005734:	2101      	movs	r1, #1
 8005736:	438b      	bics	r3, r1
 8005738:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800573a:	0020      	movs	r0, r4
 800573c:	f7ff fd78 	bl	8005230 <UART_SetConfig>
 8005740:	2801      	cmp	r0, #1
 8005742:	d014      	beq.n	800576e <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005744:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005746:	2b00      	cmp	r3, #0
 8005748:	d118      	bne.n	800577c <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800574a:	6822      	ldr	r2, [r4, #0]
 800574c:	6853      	ldr	r3, [r2, #4]
 800574e:	490e      	ldr	r1, [pc, #56]	; (8005788 <HAL_UART_Init+0x68>)
 8005750:	400b      	ands	r3, r1
 8005752:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005754:	6822      	ldr	r2, [r4, #0]
 8005756:	6893      	ldr	r3, [r2, #8]
 8005758:	212a      	movs	r1, #42	; 0x2a
 800575a:	438b      	bics	r3, r1
 800575c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800575e:	6822      	ldr	r2, [r4, #0]
 8005760:	6813      	ldr	r3, [r2, #0]
 8005762:	3929      	subs	r1, #41	; 0x29
 8005764:	430b      	orrs	r3, r1
 8005766:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005768:	0020      	movs	r0, r4
 800576a:	f7ff ffa1 	bl	80056b0 <UART_CheckIdleState>
}
 800576e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005770:	3374      	adds	r3, #116	; 0x74
 8005772:	2200      	movs	r2, #0
 8005774:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8005776:	f003 fbeb 	bl	8008f50 <HAL_UART_MspInit>
 800577a:	e7d7      	b.n	800572c <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800577c:	0020      	movs	r0, r4
 800577e:	f7ff feb9 	bl	80054f4 <UART_AdvFeatureConfig>
 8005782:	e7e2      	b.n	800574a <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8005784:	2001      	movs	r0, #1
 8005786:	e7f2      	b.n	800576e <HAL_UART_Init+0x4e>
 8005788:	ffffb7ff 	.word	0xffffb7ff

0800578c <UART_Start_Receive_DMA>:
{
 800578c:	b570      	push	{r4, r5, r6, lr}
 800578e:	0004      	movs	r4, r0
 8005790:	0013      	movs	r3, r2
  huart->pRxBuffPtr = pData;
 8005792:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize = Size;
 8005794:	2258      	movs	r2, #88	; 0x58
 8005796:	5283      	strh	r3, [r0, r2]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005798:	3228      	adds	r2, #40	; 0x28
 800579a:	2100      	movs	r1, #0
 800579c:	5081      	str	r1, [r0, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800579e:	3a5e      	subs	r2, #94	; 0x5e
 80057a0:	67c2      	str	r2, [r0, #124]	; 0x7c
  if (huart->hdmarx != NULL)
 80057a2:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80057a4:	2a00      	cmp	r2, #0
 80057a6:	d012      	beq.n	80057ce <UART_Start_Receive_DMA+0x42>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80057a8:	4921      	ldr	r1, [pc, #132]	; (8005830 <UART_Start_Receive_DMA+0xa4>)
 80057aa:	62d1      	str	r1, [r2, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80057ac:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80057ae:	4921      	ldr	r1, [pc, #132]	; (8005834 <UART_Start_Receive_DMA+0xa8>)
 80057b0:	6311      	str	r1, [r2, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80057b2:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80057b4:	4920      	ldr	r1, [pc, #128]	; (8005838 <UART_Start_Receive_DMA+0xac>)
 80057b6:	6351      	str	r1, [r2, #52]	; 0x34
    huart->hdmarx->XferAbortCallback = NULL;
 80057b8:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80057ba:	2100      	movs	r1, #0
 80057bc:	6391      	str	r1, [r2, #56]	; 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80057be:	6801      	ldr	r1, [r0, #0]
 80057c0:	3124      	adds	r1, #36	; 0x24
 80057c2:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80057c4:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80057c6:	f7fd ff77 	bl	80036b8 <HAL_DMA_Start_IT>
 80057ca:	2800      	cmp	r0, #0
 80057cc:	d126      	bne.n	800581c <UART_Start_Receive_DMA+0x90>
  __HAL_UNLOCK(huart);
 80057ce:	2374      	movs	r3, #116	; 0x74
 80057d0:	2200      	movs	r2, #0
 80057d2:	54e2      	strb	r2, [r4, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057d4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d8:	3b73      	subs	r3, #115	; 0x73
 80057da:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057de:	6821      	ldr	r1, [r4, #0]
 80057e0:	680d      	ldr	r5, [r1, #0]
 80057e2:	3201      	adds	r2, #1
 80057e4:	32ff      	adds	r2, #255	; 0xff
 80057e6:	432a      	orrs	r2, r5
 80057e8:	600a      	str	r2, [r1, #0]
 80057ea:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057ee:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057f2:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f6:	6821      	ldr	r1, [r4, #0]
 80057f8:	688a      	ldr	r2, [r1, #8]
 80057fa:	431a      	orrs	r2, r3
 80057fc:	608a      	str	r2, [r1, #8]
 80057fe:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005802:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005806:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800580a:	6822      	ldr	r2, [r4, #0]
 800580c:	6893      	ldr	r3, [r2, #8]
 800580e:	2040      	movs	r0, #64	; 0x40
 8005810:	4303      	orrs	r3, r0
 8005812:	6093      	str	r3, [r2, #8]
 8005814:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 8005818:	2000      	movs	r0, #0
}
 800581a:	bd70      	pop	{r4, r5, r6, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800581c:	2380      	movs	r3, #128	; 0x80
 800581e:	2210      	movs	r2, #16
 8005820:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 8005822:	3b0c      	subs	r3, #12
 8005824:	2200      	movs	r2, #0
 8005826:	54e2      	strb	r2, [r4, r3]
      huart->RxState = HAL_UART_STATE_READY;
 8005828:	3b54      	subs	r3, #84	; 0x54
 800582a:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_ERROR;
 800582c:	2001      	movs	r0, #1
 800582e:	e7f4      	b.n	800581a <UART_Start_Receive_DMA+0x8e>
 8005830:	0800519d 	.word	0x0800519d
 8005834:	08005181 	.word	0x08005181
 8005838:	08004e4d 	.word	0x08004e4d

0800583c <HAL_UART_Receive_DMA>:
{
 800583c:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800583e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8005840:	2b20      	cmp	r3, #32
 8005842:	d12f      	bne.n	80058a4 <HAL_UART_Receive_DMA+0x68>
    if ((pData == NULL) || (Size == 0U))
 8005844:	2900      	cmp	r1, #0
 8005846:	d02f      	beq.n	80058a8 <HAL_UART_Receive_DMA+0x6c>
 8005848:	2a00      	cmp	r2, #0
 800584a:	d02f      	beq.n	80058ac <HAL_UART_Receive_DMA+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800584c:	2380      	movs	r3, #128	; 0x80
 800584e:	015b      	lsls	r3, r3, #5
 8005850:	6884      	ldr	r4, [r0, #8]
 8005852:	429c      	cmp	r4, r3
 8005854:	d01f      	beq.n	8005896 <HAL_UART_Receive_DMA+0x5a>
    __HAL_LOCK(huart);
 8005856:	2374      	movs	r3, #116	; 0x74
 8005858:	5cc3      	ldrb	r3, [r0, r3]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d028      	beq.n	80058b0 <HAL_UART_Receive_DMA+0x74>
 800585e:	2374      	movs	r3, #116	; 0x74
 8005860:	2401      	movs	r4, #1
 8005862:	54c4      	strb	r4, [r0, r3]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005864:	2300      	movs	r3, #0
 8005866:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005868:	6803      	ldr	r3, [r0, #0]
 800586a:	4c12      	ldr	r4, [pc, #72]	; (80058b4 <HAL_UART_Receive_DMA+0x78>)
 800586c:	42a3      	cmp	r3, r4
 800586e:	d00f      	beq.n	8005890 <HAL_UART_Receive_DMA+0x54>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	021b      	lsls	r3, r3, #8
 8005874:	d50c      	bpl.n	8005890 <HAL_UART_Receive_DMA+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005876:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800587a:	2301      	movs	r3, #1
 800587c:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005880:	6804      	ldr	r4, [r0, #0]
 8005882:	6826      	ldr	r6, [r4, #0]
 8005884:	2380      	movs	r3, #128	; 0x80
 8005886:	04db      	lsls	r3, r3, #19
 8005888:	4333      	orrs	r3, r6
 800588a:	6023      	str	r3, [r4, #0]
 800588c:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005890:	f7ff ff7c 	bl	800578c <UART_Start_Receive_DMA>
 8005894:	e007      	b.n	80058a6 <HAL_UART_Receive_DMA+0x6a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005896:	6903      	ldr	r3, [r0, #16]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1dc      	bne.n	8005856 <HAL_UART_Receive_DMA+0x1a>
      if ((((uint32_t)pData) & 1U) != 0U)
 800589c:	07cb      	lsls	r3, r1, #31
 800589e:	d5da      	bpl.n	8005856 <HAL_UART_Receive_DMA+0x1a>
        return  HAL_ERROR;
 80058a0:	2001      	movs	r0, #1
 80058a2:	e000      	b.n	80058a6 <HAL_UART_Receive_DMA+0x6a>
    return HAL_BUSY;
 80058a4:	2002      	movs	r0, #2
}
 80058a6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80058a8:	2001      	movs	r0, #1
 80058aa:	e7fc      	b.n	80058a6 <HAL_UART_Receive_DMA+0x6a>
 80058ac:	2001      	movs	r0, #1
 80058ae:	e7fa      	b.n	80058a6 <HAL_UART_Receive_DMA+0x6a>
    __HAL_LOCK(huart);
 80058b0:	2002      	movs	r0, #2
 80058b2:	e7f8      	b.n	80058a6 <HAL_UART_Receive_DMA+0x6a>
 80058b4:	40004800 	.word	0x40004800

080058b8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80058b8:	4770      	bx	lr

080058ba <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 80058ba:	2884      	cmp	r0, #132	; 0x84
 80058bc:	d001      	beq.n	80058c2 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 80058be:	3003      	adds	r0, #3
  }
  
  return fpriority;
}
 80058c0:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80058c2:	2000      	movs	r0, #0
  return fpriority;
 80058c4:	e7fc      	b.n	80058c0 <makeFreeRtosPriority+0x6>

080058c6 <inHandlerMode>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058c6:	f3ef 8005 	mrs	r0, IPSR


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
 80058ca:	1e43      	subs	r3, r0, #1
 80058cc:	4198      	sbcs	r0, r3
}
 80058ce:	4770      	bx	lr

080058d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80058d0:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 80058d2:	f000 fe25 	bl	8006520 <vTaskStartScheduler>
  
  return osOK;
}
 80058d6:	2000      	movs	r0, #0
 80058d8:	bd10      	pop	{r4, pc}

080058da <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80058da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058dc:	46ce      	mov	lr, r9
 80058de:	4647      	mov	r7, r8
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b087      	sub	sp, #28
 80058e4:	0004      	movs	r4, r0
 80058e6:	000f      	movs	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80058e8:	6945      	ldr	r5, [r0, #20]
 80058ea:	2d00      	cmp	r5, #0
 80058ec:	d01a      	beq.n	8005924 <osThreadCreate+0x4a>
 80058ee:	6986      	ldr	r6, [r0, #24]
 80058f0:	2e00      	cmp	r6, #0
 80058f2:	d017      	beq.n	8005924 <osThreadCreate+0x4a>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058f4:	6843      	ldr	r3, [r0, #4]
 80058f6:	4698      	mov	r8, r3
 80058f8:	6803      	ldr	r3, [r0, #0]
 80058fa:	4699      	mov	r9, r3
 80058fc:	2308      	movs	r3, #8
 80058fe:	5ec0      	ldrsh	r0, [r0, r3]
 8005900:	f7ff ffdb 	bl	80058ba <makeFreeRtosPriority>
 8005904:	6922      	ldr	r2, [r4, #16]
 8005906:	9602      	str	r6, [sp, #8]
 8005908:	9501      	str	r5, [sp, #4]
 800590a:	9000      	str	r0, [sp, #0]
 800590c:	003b      	movs	r3, r7
 800590e:	4649      	mov	r1, r9
 8005910:	4640      	mov	r0, r8
 8005912:	f000 fdab 	bl	800646c <xTaskCreateStatic>
 8005916:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005918:	9805      	ldr	r0, [sp, #20]
}
 800591a:	b007      	add	sp, #28
 800591c:	bcc0      	pop	{r6, r7}
 800591e:	46b9      	mov	r9, r7
 8005920:	46b0      	mov	r8, r6
 8005922:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005924:	6866      	ldr	r6, [r4, #4]
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	4698      	mov	r8, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800592a:	6925      	ldr	r5, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800592c:	2308      	movs	r3, #8
 800592e:	5ee0      	ldrsh	r0, [r4, r3]
 8005930:	f7ff ffc3 	bl	80058ba <makeFreeRtosPriority>
 8005934:	b2aa      	uxth	r2, r5
 8005936:	ab05      	add	r3, sp, #20
 8005938:	9301      	str	r3, [sp, #4]
 800593a:	9000      	str	r0, [sp, #0]
 800593c:	003b      	movs	r3, r7
 800593e:	4641      	mov	r1, r8
 8005940:	0030      	movs	r0, r6
 8005942:	f000 fdba 	bl	80064ba <xTaskCreate>
 8005946:	2801      	cmp	r0, #1
 8005948:	d0e6      	beq.n	8005918 <osThreadCreate+0x3e>
      return NULL;
 800594a:	2000      	movs	r0, #0
 800594c:	e7e5      	b.n	800591a <osThreadCreate+0x40>

0800594e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800594e:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005950:	2800      	cmp	r0, #0
 8005952:	d100      	bne.n	8005956 <osDelay+0x8>
 8005954:	3001      	adds	r0, #1
 8005956:	f000 ff19 	bl	800678c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800595a:	2000      	movs	r0, #0
 800595c:	bd10      	pop	{r4, pc}
	...

08005960 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8005960:	b530      	push	{r4, r5, lr}
 8005962:	b085      	sub	sp, #20
 8005964:	0004      	movs	r4, r0
 8005966:	000d      	movs	r5, r1
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8005968:	2300      	movs	r3, #0
 800596a:	9303      	str	r3, [sp, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800596c:	9302      	str	r3, [sp, #8]
  
  if (inHandlerMode())
 800596e:	f7ff ffaa 	bl	80058c6 <inHandlerMode>
 8005972:	2800      	cmp	r0, #0
 8005974:	d011      	beq.n	800599a <osSignalSet+0x3a>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8005976:	ab03      	add	r3, sp, #12
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	ab02      	add	r3, sp, #8
 800597c:	2201      	movs	r2, #1
 800597e:	0029      	movs	r1, r5
 8005980:	0020      	movs	r0, r4
 8005982:	f001 f8ef 	bl	8006b64 <xTaskGenericNotifyFromISR>
 8005986:	2801      	cmp	r0, #1
 8005988:	d112      	bne.n	80059b0 <osSignalSet+0x50>
      return 0x80000000;
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800598a:	9b03      	ldr	r3, [sp, #12]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00c      	beq.n	80059aa <osSignalSet+0x4a>
 8005990:	4b0a      	ldr	r3, [pc, #40]	; (80059bc <osSignalSet+0x5c>)
 8005992:	2280      	movs	r2, #128	; 0x80
 8005994:	0552      	lsls	r2, r2, #21
 8005996:	601a      	str	r2, [r3, #0]
 8005998:	e007      	b.n	80059aa <osSignalSet+0x4a>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800599a:	ab02      	add	r3, sp, #8
 800599c:	2201      	movs	r2, #1
 800599e:	0029      	movs	r1, r5
 80059a0:	0020      	movs	r0, r4
 80059a2:	f001 f879 	bl	8006a98 <xTaskGenericNotify>
 80059a6:	2801      	cmp	r0, #1
 80059a8:	d105      	bne.n	80059b6 <osSignalSet+0x56>
    return 0x80000000;
  
  return ulPreviousNotificationValue;
 80059aa:	9802      	ldr	r0, [sp, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80059ac:	b005      	add	sp, #20
 80059ae:	bd30      	pop	{r4, r5, pc}
      return 0x80000000;
 80059b0:	2080      	movs	r0, #128	; 0x80
 80059b2:	0600      	lsls	r0, r0, #24
 80059b4:	e7fa      	b.n	80059ac <osSignalSet+0x4c>
    return 0x80000000;
 80059b6:	2080      	movs	r0, #128	; 0x80
 80059b8:	0600      	lsls	r0, r0, #24
 80059ba:	e7f7      	b.n	80059ac <osSignalSet+0x4c>
 80059bc:	e000ed04 	.word	0xe000ed04

080059c0 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80059c0:	b570      	push	{r4, r5, r6, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	0004      	movs	r4, r0
 80059c6:	000e      	movs	r6, r1
 80059c8:	0015      	movs	r5, r2

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80059ca:	2300      	movs	r3, #0
 80059cc:	9302      	str	r3, [sp, #8]
    if (ticks == 0) {
      ticks = 1;
    }
  }  
  
  if (inHandlerMode())
 80059ce:	f7ff ff7a 	bl	80058c6 <inHandlerMode>
 80059d2:	2800      	cmp	r0, #0
 80059d4:	d008      	beq.n	80059e8 <osSignalWait+0x28>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80059d6:	2382      	movs	r3, #130	; 0x82
 80059d8:	9301      	str	r3, [sp, #4]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80059da:	ab01      	add	r3, sp, #4
 80059dc:	0022      	movs	r2, r4
 80059de:	cb23      	ldmia	r3!, {r0, r1, r5}
 80059e0:	c223      	stmia	r2!, {r0, r1, r5}
}
 80059e2:	0020      	movs	r0, r4
 80059e4:	b004      	add	sp, #16
 80059e6:	bd70      	pop	{r4, r5, r6, pc}
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80059e8:	002b      	movs	r3, r5
 80059ea:	aa02      	add	r2, sp, #8
 80059ec:	0031      	movs	r1, r6
 80059ee:	2000      	movs	r0, #0
 80059f0:	f001 f810 	bl	8006a14 <xTaskNotifyWait>
 80059f4:	2801      	cmp	r0, #1
 80059f6:	d007      	beq.n	8005a08 <osSignalWait+0x48>
      if(ticks == 0)  ret.status = osOK;
 80059f8:	2d00      	cmp	r5, #0
 80059fa:	d102      	bne.n	8005a02 <osSignalWait+0x42>
 80059fc:	2300      	movs	r3, #0
 80059fe:	9301      	str	r3, [sp, #4]
 8005a00:	e7eb      	b.n	80059da <osSignalWait+0x1a>
      else  ret.status = osEventTimeout;
 8005a02:	2340      	movs	r3, #64	; 0x40
 8005a04:	9301      	str	r3, [sp, #4]
 8005a06:	e7e8      	b.n	80059da <osSignalWait+0x1a>
    else if(ret.value.signals < 0)
 8005a08:	9b02      	ldr	r3, [sp, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	db02      	blt.n	8005a14 <osSignalWait+0x54>
    else  ret.status =  osEventSignal;
 8005a0e:	2308      	movs	r3, #8
 8005a10:	9301      	str	r3, [sp, #4]
 8005a12:	e7e2      	b.n	80059da <osSignalWait+0x1a>
      ret.status =  osErrorValue;     
 8005a14:	2386      	movs	r3, #134	; 0x86
 8005a16:	9301      	str	r3, [sp, #4]
 8005a18:	e7df      	b.n	80059da <osSignalWait+0x1a>

08005a1a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005a1a:	b510      	push	{r4, lr}
 8005a1c:	b082      	sub	sp, #8
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005a1e:	6882      	ldr	r2, [r0, #8]
 8005a20:	2a00      	cmp	r2, #0
 8005a22:	d009      	beq.n	8005a38 <osMessageCreate+0x1e>
 8005a24:	68c3      	ldr	r3, [r0, #12]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d006      	beq.n	8005a38 <osMessageCreate+0x1e>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005a2a:	6841      	ldr	r1, [r0, #4]
 8005a2c:	6800      	ldr	r0, [r0, #0]
 8005a2e:	2400      	movs	r4, #0
 8005a30:	9400      	str	r4, [sp, #0]
 8005a32:	f000 f9ae 	bl	8005d92 <xQueueGenericCreateStatic>
 8005a36:	e004      	b.n	8005a42 <osMessageCreate+0x28>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005a38:	6841      	ldr	r1, [r0, #4]
 8005a3a:	6800      	ldr	r0, [r0, #0]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f000 f9d2 	bl	8005de6 <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005a42:	b002      	add	sp, #8
 8005a44:	bd10      	pop	{r4, pc}
	...

08005a48 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005a48:	b530      	push	{r4, r5, lr}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	0005      	movs	r5, r0
 8005a4e:	9101      	str	r1, [sp, #4]
 8005a50:	0014      	movs	r4, r2
  portBASE_TYPE taskWoken = pdFALSE;
 8005a52:	2300      	movs	r3, #0
 8005a54:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 8005a56:	2a00      	cmp	r2, #0
 8005a58:	d100      	bne.n	8005a5c <osMessagePut+0x14>
    ticks = 1;
 8005a5a:	3401      	adds	r4, #1
  }
  
  if (inHandlerMode()) {
 8005a5c:	f7ff ff33 	bl	80058c6 <inHandlerMode>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d010      	beq.n	8005a86 <osMessagePut+0x3e>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005a64:	2300      	movs	r3, #0
 8005a66:	aa03      	add	r2, sp, #12
 8005a68:	a901      	add	r1, sp, #4
 8005a6a:	0028      	movs	r0, r5
 8005a6c:	f000 fa71 	bl	8005f52 <xQueueGenericSendFromISR>
 8005a70:	2801      	cmp	r0, #1
 8005a72:	d113      	bne.n	8005a9c <osMessagePut+0x54>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005a74:	9b03      	ldr	r3, [sp, #12]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d012      	beq.n	8005aa0 <osMessagePut+0x58>
 8005a7a:	4b0b      	ldr	r3, [pc, #44]	; (8005aa8 <osMessagePut+0x60>)
 8005a7c:	2280      	movs	r2, #128	; 0x80
 8005a7e:	0552      	lsls	r2, r2, #21
 8005a80:	601a      	str	r2, [r3, #0]
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8005a82:	2000      	movs	r0, #0
 8005a84:	e008      	b.n	8005a98 <osMessagePut+0x50>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005a86:	2300      	movs	r3, #0
 8005a88:	0022      	movs	r2, r4
 8005a8a:	a901      	add	r1, sp, #4
 8005a8c:	0028      	movs	r0, r5
 8005a8e:	f000 f9cc 	bl	8005e2a <xQueueGenericSend>
 8005a92:	2801      	cmp	r0, #1
 8005a94:	d106      	bne.n	8005aa4 <osMessagePut+0x5c>
  return osOK;
 8005a96:	2000      	movs	r0, #0
}
 8005a98:	b005      	add	sp, #20
 8005a9a:	bd30      	pop	{r4, r5, pc}
      return osErrorOS;
 8005a9c:	20ff      	movs	r0, #255	; 0xff
 8005a9e:	e7fb      	b.n	8005a98 <osMessagePut+0x50>
  return osOK;
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	e7f9      	b.n	8005a98 <osMessagePut+0x50>
      return osErrorOS;
 8005aa4:	20ff      	movs	r0, #255	; 0xff
 8005aa6:	e7f7      	b.n	8005a98 <osMessagePut+0x50>
 8005aa8:	e000ed04 	.word	0xe000ed04

08005aac <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005aac:	b570      	push	{r4, r5, r6, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	0004      	movs	r4, r0
 8005ab2:	000d      	movs	r5, r1
 8005ab4:	0016      	movs	r6, r2
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005ab6:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 8005abc:	2900      	cmp	r1, #0
 8005abe:	d016      	beq.n	8005aee <osMessageGet+0x42>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	9303      	str	r3, [sp, #12]
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8005ac4:	f7ff feff 	bl	80058c6 <inHandlerMode>
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	d01a      	beq.n	8005b02 <osMessageGet+0x56>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005acc:	aa03      	add	r2, sp, #12
 8005ace:	a901      	add	r1, sp, #4
 8005ad0:	0028      	movs	r0, r5
 8005ad2:	f000 fb1a 	bl	800610a <xQueueReceiveFromISR>
 8005ad6:	2801      	cmp	r0, #1
 8005ad8:	d010      	beq.n	8005afc <osMessageGet+0x50>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005ade:	9b03      	ldr	r3, [sp, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d019      	beq.n	8005b18 <osMessageGet+0x6c>
 8005ae4:	4b11      	ldr	r3, [pc, #68]	; (8005b2c <osMessageGet+0x80>)
 8005ae6:	2280      	movs	r2, #128	; 0x80
 8005ae8:	0552      	lsls	r2, r2, #21
 8005aea:	601a      	str	r2, [r3, #0]
 8005aec:	e014      	b.n	8005b18 <osMessageGet+0x6c>
    event.status = osErrorParameter;
 8005aee:	466b      	mov	r3, sp
 8005af0:	2280      	movs	r2, #128	; 0x80
 8005af2:	9200      	str	r2, [sp, #0]
    return event;
 8005af4:	0002      	movs	r2, r0
 8005af6:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005af8:	c223      	stmia	r2!, {r0, r1, r5}
 8005afa:	e011      	b.n	8005b20 <osMessageGet+0x74>
      event.status = osEventMessage;
 8005afc:	2310      	movs	r3, #16
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	e7ed      	b.n	8005ade <osMessageGet+0x32>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005b02:	0032      	movs	r2, r6
 8005b04:	a901      	add	r1, sp, #4
 8005b06:	0028      	movs	r0, r5
 8005b08:	f000 fa74 	bl	8005ff4 <xQueueReceive>
 8005b0c:	2801      	cmp	r0, #1
 8005b0e:	d00a      	beq.n	8005b26 <osMessageGet+0x7a>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005b10:	2e00      	cmp	r6, #0
 8005b12:	d000      	beq.n	8005b16 <osMessageGet+0x6a>
 8005b14:	2640      	movs	r6, #64	; 0x40
 8005b16:	9600      	str	r6, [sp, #0]
    }
  }
  
  return event;
 8005b18:	466b      	mov	r3, sp
 8005b1a:	0022      	movs	r2, r4
 8005b1c:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005b1e:	c223      	stmia	r2!, {r0, r1, r5}
}
 8005b20:	0020      	movs	r0, r4
 8005b22:	b004      	add	sp, #16
 8005b24:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 8005b26:	2310      	movs	r3, #16
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	e7f5      	b.n	8005b18 <osMessageGet+0x6c>
 8005b2c:	e000ed04 	.word	0xe000ed04

08005b30 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b30:	0003      	movs	r3, r0
 8005b32:	3308      	adds	r3, #8
 8005b34:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b36:	2201      	movs	r2, #1
 8005b38:	4252      	negs	r2, r2
 8005b3a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b3c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b3e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b44:	4770      	bx	lr

08005b46 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b4a:	4770      	bx	lr

08005b4c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b4c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b4e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b50:	689a      	ldr	r2, [r3, #8]
 8005b52:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b54:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b56:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b58:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005b5a:	6803      	ldr	r3, [r0, #0]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	6003      	str	r3, [r0, #0]
}
 8005b60:	4770      	bx	lr

08005b62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b62:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b64:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b66:	1c63      	adds	r3, r4, #1
 8005b68:	d010      	beq.n	8005b8c <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b6a:	0003      	movs	r3, r0
 8005b6c:	3308      	adds	r3, #8
 8005b6e:	001a      	movs	r2, r3
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	681d      	ldr	r5, [r3, #0]
 8005b74:	42a5      	cmp	r5, r4
 8005b76:	d9fa      	bls.n	8005b6e <vListInsert+0xc>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b78:	6853      	ldr	r3, [r2, #4]
 8005b7a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b7c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b7e:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b80:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b82:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005b84:	6803      	ldr	r3, [r0, #0]
 8005b86:	3301      	adds	r3, #1
 8005b88:	6003      	str	r3, [r0, #0]
}
 8005b8a:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b8c:	6902      	ldr	r2, [r0, #16]
 8005b8e:	e7f3      	b.n	8005b78 <vListInsert+0x16>

08005b90 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b90:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b92:	6841      	ldr	r1, [r0, #4]
 8005b94:	6882      	ldr	r2, [r0, #8]
 8005b96:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b98:	6841      	ldr	r1, [r0, #4]
 8005b9a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	4282      	cmp	r2, r0
 8005ba0:	d006      	beq.n	8005bb0 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	3a01      	subs	r2, #1
 8005baa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005bac:	6818      	ldr	r0, [r3, #0]
}
 8005bae:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005bb0:	6882      	ldr	r2, [r0, #8]
 8005bb2:	605a      	str	r2, [r3, #4]
 8005bb4:	e7f5      	b.n	8005ba2 <uxListRemove+0x12>

08005bb6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005bb6:	b510      	push	{r4, lr}
 8005bb8:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bba:	f001 f8d9 	bl	8006d70 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005bbe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005bc0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d004      	beq.n	8005bd0 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8005bc6:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8005bc8:	f001 f8de 	bl	8006d88 <vPortExitCritical>

	return xReturn;
}
 8005bcc:	0020      	movs	r0, r4
 8005bce:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8005bd0:	2401      	movs	r4, #1
 8005bd2:	e7f9      	b.n	8005bc8 <prvIsQueueFull+0x12>

08005bd4 <prvIsQueueEmpty>:
{
 8005bd4:	b510      	push	{r4, lr}
 8005bd6:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 8005bd8:	f001 f8ca 	bl	8006d70 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005bdc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d104      	bne.n	8005bec <prvIsQueueEmpty+0x18>
			xReturn = pdTRUE;
 8005be2:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8005be4:	f001 f8d0 	bl	8006d88 <vPortExitCritical>
}
 8005be8:	0020      	movs	r0, r4
 8005bea:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8005bec:	2400      	movs	r4, #0
 8005bee:	e7f9      	b.n	8005be4 <prvIsQueueEmpty+0x10>

08005bf0 <prvCopyDataToQueue>:
{
 8005bf0:	b570      	push	{r4, r5, r6, lr}
 8005bf2:	0004      	movs	r4, r0
 8005bf4:	0015      	movs	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bf6:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005bf8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005bfa:	2a00      	cmp	r2, #0
 8005bfc:	d10c      	bne.n	8005c18 <prvCopyDataToQueue+0x28>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bfe:	6803      	ldr	r3, [r0, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d003      	beq.n	8005c0c <prvCopyDataToQueue+0x1c>
BaseType_t xReturn = pdFALSE;
 8005c04:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c06:	3601      	adds	r6, #1
 8005c08:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8005c0a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c0c:	6880      	ldr	r0, [r0, #8]
 8005c0e:	f000 fec5 	bl	800699c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60a3      	str	r3, [r4, #8]
 8005c16:	e7f6      	b.n	8005c06 <prvCopyDataToQueue+0x16>
	else if( xPosition == queueSEND_TO_BACK )
 8005c18:	2d00      	cmp	r5, #0
 8005c1a:	d10e      	bne.n	8005c3a <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c1c:	6840      	ldr	r0, [r0, #4]
 8005c1e:	f003 fb78 	bl	8009312 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c22:	6863      	ldr	r3, [r4, #4]
 8005c24:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005c26:	4694      	mov	ip, r2
 8005c28:	4463      	add	r3, ip
 8005c2a:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c2c:	68a2      	ldr	r2, [r4, #8]
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d31b      	bcc.n	8005c6a <prvCopyDataToQueue+0x7a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c32:	6823      	ldr	r3, [r4, #0]
 8005c34:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8005c36:	0028      	movs	r0, r5
 8005c38:	e7e5      	b.n	8005c06 <prvCopyDataToQueue+0x16>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c3a:	68c0      	ldr	r0, [r0, #12]
 8005c3c:	f003 fb69 	bl	8009312 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c42:	425a      	negs	r2, r3
 8005c44:	68e1      	ldr	r1, [r4, #12]
 8005c46:	1acb      	subs	r3, r1, r3
 8005c48:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c4a:	6821      	ldr	r1, [r4, #0]
 8005c4c:	428b      	cmp	r3, r1
 8005c4e:	d203      	bcs.n	8005c58 <prvCopyDataToQueue+0x68>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c50:	68a3      	ldr	r3, [r4, #8]
 8005c52:	469c      	mov	ip, r3
 8005c54:	4462      	add	r2, ip
 8005c56:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005c58:	2d02      	cmp	r5, #2
 8005c5a:	d001      	beq.n	8005c60 <prvCopyDataToQueue+0x70>
BaseType_t xReturn = pdFALSE;
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	e7d2      	b.n	8005c06 <prvCopyDataToQueue+0x16>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c60:	2e00      	cmp	r6, #0
 8005c62:	d004      	beq.n	8005c6e <prvCopyDataToQueue+0x7e>
				--uxMessagesWaiting;
 8005c64:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8005c66:	2000      	movs	r0, #0
 8005c68:	e7cd      	b.n	8005c06 <prvCopyDataToQueue+0x16>
 8005c6a:	0028      	movs	r0, r5
 8005c6c:	e7cb      	b.n	8005c06 <prvCopyDataToQueue+0x16>
 8005c6e:	2000      	movs	r0, #0
 8005c70:	e7c9      	b.n	8005c06 <prvCopyDataToQueue+0x16>

08005c72 <prvCopyDataFromQueue>:
{
 8005c72:	b510      	push	{r4, lr}
 8005c74:	0003      	movs	r3, r0
 8005c76:	0008      	movs	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c7a:	2a00      	cmp	r2, #0
 8005c7c:	d00a      	beq.n	8005c94 <prvCopyDataFromQueue+0x22>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c7e:	68d9      	ldr	r1, [r3, #12]
 8005c80:	1889      	adds	r1, r1, r2
 8005c82:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c84:	689c      	ldr	r4, [r3, #8]
 8005c86:	42a1      	cmp	r1, r4
 8005c88:	d301      	bcc.n	8005c8e <prvCopyDataFromQueue+0x1c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c8a:	6819      	ldr	r1, [r3, #0]
 8005c8c:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c8e:	68d9      	ldr	r1, [r3, #12]
 8005c90:	f003 fb3f 	bl	8009312 <memcpy>
}
 8005c94:	bd10      	pop	{r4, pc}

08005c96 <prvUnlockQueue>:
{
 8005c96:	b570      	push	{r4, r5, r6, lr}
 8005c98:	0005      	movs	r5, r0
	taskENTER_CRITICAL();
 8005c9a:	f001 f869 	bl	8006d70 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005c9e:	2345      	movs	r3, #69	; 0x45
 8005ca0:	5cec      	ldrb	r4, [r5, r3]
 8005ca2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ca4:	e003      	b.n	8005cae <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8005ca6:	f000 fe61 	bl	800696c <vTaskMissedYield>
			--cTxLock;
 8005caa:	3c01      	subs	r4, #1
 8005cac:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cae:	2c00      	cmp	r4, #0
 8005cb0:	dd09      	ble.n	8005cc6 <prvUnlockQueue+0x30>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d006      	beq.n	8005cc6 <prvUnlockQueue+0x30>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cb8:	0028      	movs	r0, r5
 8005cba:	3024      	adds	r0, #36	; 0x24
 8005cbc:	f000 fdd4 	bl	8006868 <xTaskRemoveFromEventList>
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	d0f2      	beq.n	8005caa <prvUnlockQueue+0x14>
 8005cc4:	e7ef      	b.n	8005ca6 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8005cc6:	2345      	movs	r3, #69	; 0x45
 8005cc8:	22ff      	movs	r2, #255	; 0xff
 8005cca:	54ea      	strb	r2, [r5, r3]
	taskEXIT_CRITICAL();
 8005ccc:	f001 f85c 	bl	8006d88 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005cd0:	f001 f84e 	bl	8006d70 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005cd4:	2344      	movs	r3, #68	; 0x44
 8005cd6:	5cec      	ldrb	r4, [r5, r3]
 8005cd8:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cda:	e003      	b.n	8005ce4 <prvUnlockQueue+0x4e>
					vTaskMissedYield();
 8005cdc:	f000 fe46 	bl	800696c <vTaskMissedYield>
				--cRxLock;
 8005ce0:	3c01      	subs	r4, #1
 8005ce2:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ce4:	2c00      	cmp	r4, #0
 8005ce6:	dd09      	ble.n	8005cfc <prvUnlockQueue+0x66>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ce8:	692b      	ldr	r3, [r5, #16]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d006      	beq.n	8005cfc <prvUnlockQueue+0x66>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cee:	0028      	movs	r0, r5
 8005cf0:	3010      	adds	r0, #16
 8005cf2:	f000 fdb9 	bl	8006868 <xTaskRemoveFromEventList>
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	d0f2      	beq.n	8005ce0 <prvUnlockQueue+0x4a>
 8005cfa:	e7ef      	b.n	8005cdc <prvUnlockQueue+0x46>
		pxQueue->cRxLock = queueUNLOCKED;
 8005cfc:	2344      	movs	r3, #68	; 0x44
 8005cfe:	22ff      	movs	r2, #255	; 0xff
 8005d00:	54ea      	strb	r2, [r5, r3]
	taskEXIT_CRITICAL();
 8005d02:	f001 f841 	bl	8006d88 <vPortExitCritical>
}
 8005d06:	bd70      	pop	{r4, r5, r6, pc}

08005d08 <xQueueGenericReset>:
{
 8005d08:	b570      	push	{r4, r5, r6, lr}
 8005d0a:	0004      	movs	r4, r0
 8005d0c:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	d01d      	beq.n	8005d4e <xQueueGenericReset+0x46>
	taskENTER_CRITICAL();
 8005d12:	f001 f82d 	bl	8006d70 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d16:	6822      	ldr	r2, [r4, #0]
 8005d18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005d1a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005d1c:	0001      	movs	r1, r0
 8005d1e:	4359      	muls	r1, r3
 8005d20:	1851      	adds	r1, r2, r1
 8005d22:	60a1      	str	r1, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d24:	2100      	movs	r1, #0
 8005d26:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d28:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	4343      	muls	r3, r0
 8005d2e:	18d3      	adds	r3, r2, r3
 8005d30:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d32:	23ff      	movs	r3, #255	; 0xff
 8005d34:	2244      	movs	r2, #68	; 0x44
 8005d36:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8005d38:	3201      	adds	r2, #1
 8005d3a:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
 8005d3c:	2d00      	cmp	r5, #0
 8005d3e:	d111      	bne.n	8005d64 <xQueueGenericReset+0x5c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d40:	6923      	ldr	r3, [r4, #16]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d105      	bne.n	8005d52 <xQueueGenericReset+0x4a>
	taskEXIT_CRITICAL();
 8005d46:	f001 f81f 	bl	8006d88 <vPortExitCritical>
}
 8005d4a:	2001      	movs	r0, #1
 8005d4c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
 8005d4e:	b672      	cpsid	i
 8005d50:	e7fe      	b.n	8005d50 <xQueueGenericReset+0x48>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d52:	0020      	movs	r0, r4
 8005d54:	3010      	adds	r0, #16
 8005d56:	f000 fd87 	bl	8006868 <xTaskRemoveFromEventList>
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d0f3      	beq.n	8005d46 <xQueueGenericReset+0x3e>
					queueYIELD_IF_USING_PREEMPTION();
 8005d5e:	f000 fffb 	bl	8006d58 <vPortYield>
 8005d62:	e7f0      	b.n	8005d46 <xQueueGenericReset+0x3e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d64:	0020      	movs	r0, r4
 8005d66:	3010      	adds	r0, #16
 8005d68:	f7ff fee2 	bl	8005b30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d6c:	0020      	movs	r0, r4
 8005d6e:	3024      	adds	r0, #36	; 0x24
 8005d70:	f7ff fede 	bl	8005b30 <vListInitialise>
 8005d74:	e7e7      	b.n	8005d46 <xQueueGenericReset+0x3e>

08005d76 <prvInitialiseNewQueue>:
{
 8005d76:	b510      	push	{r4, lr}
 8005d78:	0003      	movs	r3, r0
 8005d7a:	9802      	ldr	r0, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d7c:	2900      	cmp	r1, #0
 8005d7e:	d106      	bne.n	8005d8e <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d80:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8005d82:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d84:	6401      	str	r1, [r0, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d86:	2101      	movs	r1, #1
 8005d88:	f7ff ffbe 	bl	8005d08 <xQueueGenericReset>
}
 8005d8c:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d8e:	6002      	str	r2, [r0, #0]
 8005d90:	e7f7      	b.n	8005d82 <prvInitialiseNewQueue+0xc>

08005d92 <xQueueGenericCreateStatic>:
	{
 8005d92:	b570      	push	{r4, r5, r6, lr}
 8005d94:	b084      	sub	sp, #16
 8005d96:	001c      	movs	r4, r3
 8005d98:	ab08      	add	r3, sp, #32
 8005d9a:	781b      	ldrb	r3, [r3, #0]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	d101      	bne.n	8005da4 <xQueueGenericCreateStatic+0x12>
 8005da0:	b672      	cpsid	i
 8005da2:	e7fe      	b.n	8005da2 <xQueueGenericCreateStatic+0x10>
		configASSERT( pxStaticQueue != NULL );
 8005da4:	2c00      	cmp	r4, #0
 8005da6:	d005      	beq.n	8005db4 <xQueueGenericCreateStatic+0x22>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005da8:	2a00      	cmp	r2, #0
 8005daa:	d005      	beq.n	8005db8 <xQueueGenericCreateStatic+0x26>
 8005dac:	2900      	cmp	r1, #0
 8005dae:	d103      	bne.n	8005db8 <xQueueGenericCreateStatic+0x26>
 8005db0:	b672      	cpsid	i
 8005db2:	e7fe      	b.n	8005db2 <xQueueGenericCreateStatic+0x20>
		configASSERT( pxStaticQueue != NULL );
 8005db4:	b672      	cpsid	i
 8005db6:	e7fe      	b.n	8005db6 <xQueueGenericCreateStatic+0x24>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005db8:	2a00      	cmp	r2, #0
 8005dba:	d006      	beq.n	8005dca <xQueueGenericCreateStatic+0x38>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005dbc:	2548      	movs	r5, #72	; 0x48
 8005dbe:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005dc0:	9d03      	ldr	r5, [sp, #12]
 8005dc2:	2d48      	cmp	r5, #72	; 0x48
 8005dc4:	d005      	beq.n	8005dd2 <xQueueGenericCreateStatic+0x40>
 8005dc6:	b672      	cpsid	i
 8005dc8:	e7fe      	b.n	8005dc8 <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005dca:	2900      	cmp	r1, #0
 8005dcc:	d0f6      	beq.n	8005dbc <xQueueGenericCreateStatic+0x2a>
 8005dce:	b672      	cpsid	i
 8005dd0:	e7fe      	b.n	8005dd0 <xQueueGenericCreateStatic+0x3e>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005dd2:	9d03      	ldr	r5, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005dd4:	2546      	movs	r5, #70	; 0x46
 8005dd6:	2601      	movs	r6, #1
 8005dd8:	5566      	strb	r6, [r4, r5]
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005dda:	9400      	str	r4, [sp, #0]
 8005ddc:	f7ff ffcb 	bl	8005d76 <prvInitialiseNewQueue>
	}
 8005de0:	0020      	movs	r0, r4
 8005de2:	b004      	add	sp, #16
 8005de4:	bd70      	pop	{r4, r5, r6, pc}

08005de6 <xQueueGenericCreate>:
	{
 8005de6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005de8:	b083      	sub	sp, #12
 8005dea:	0006      	movs	r6, r0
 8005dec:	000d      	movs	r5, r1
 8005dee:	0017      	movs	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005df0:	2800      	cmp	r0, #0
 8005df2:	d101      	bne.n	8005df8 <xQueueGenericCreate+0x12>
 8005df4:	b672      	cpsid	i
 8005df6:	e7fe      	b.n	8005df6 <xQueueGenericCreate+0x10>
		if( uxItemSize == ( UBaseType_t ) 0 )
 8005df8:	2900      	cmp	r1, #0
 8005dfa:	d014      	beq.n	8005e26 <xQueueGenericCreate+0x40>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dfc:	0008      	movs	r0, r1
 8005dfe:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005e00:	3048      	adds	r0, #72	; 0x48
 8005e02:	f001 f86d 	bl	8006ee0 <pvPortMalloc>
 8005e06:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
 8005e08:	d00a      	beq.n	8005e20 <xQueueGenericCreate+0x3a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e0a:	0002      	movs	r2, r0
 8005e0c:	3248      	adds	r2, #72	; 0x48
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005e0e:	2346      	movs	r3, #70	; 0x46
 8005e10:	2100      	movs	r1, #0
 8005e12:	54c1      	strb	r1, [r0, r3]
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e14:	9000      	str	r0, [sp, #0]
 8005e16:	003b      	movs	r3, r7
 8005e18:	0029      	movs	r1, r5
 8005e1a:	0030      	movs	r0, r6
 8005e1c:	f7ff ffab 	bl	8005d76 <prvInitialiseNewQueue>
	}
 8005e20:	0020      	movs	r0, r4
 8005e22:	b003      	add	sp, #12
 8005e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
 8005e26:	0008      	movs	r0, r1
 8005e28:	e7ea      	b.n	8005e00 <xQueueGenericCreate+0x1a>

08005e2a <xQueueGenericSend>:
{
 8005e2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e2c:	b085      	sub	sp, #20
 8005e2e:	0004      	movs	r4, r0
 8005e30:	000f      	movs	r7, r1
 8005e32:	9201      	str	r2, [sp, #4]
 8005e34:	001e      	movs	r6, r3
	configASSERT( pxQueue );
 8005e36:	2800      	cmp	r0, #0
 8005e38:	d008      	beq.n	8005e4c <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e3a:	2900      	cmp	r1, #0
 8005e3c:	d008      	beq.n	8005e50 <xQueueGenericSend+0x26>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e3e:	2e02      	cmp	r6, #2
 8005e40:	d10b      	bne.n	8005e5a <xQueueGenericSend+0x30>
 8005e42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d008      	beq.n	8005e5a <xQueueGenericSend+0x30>
 8005e48:	b672      	cpsid	i
 8005e4a:	e7fe      	b.n	8005e4a <xQueueGenericSend+0x20>
	configASSERT( pxQueue );
 8005e4c:	b672      	cpsid	i
 8005e4e:	e7fe      	b.n	8005e4e <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e50:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0f3      	beq.n	8005e3e <xQueueGenericSend+0x14>
 8005e56:	b672      	cpsid	i
 8005e58:	e7fe      	b.n	8005e58 <xQueueGenericSend+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e5a:	f000 fd8d 	bl	8006978 <xTaskGetSchedulerState>
 8005e5e:	1e05      	subs	r5, r0, #0
 8005e60:	d104      	bne.n	8005e6c <xQueueGenericSend+0x42>
 8005e62:	9b01      	ldr	r3, [sp, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d034      	beq.n	8005ed2 <xQueueGenericSend+0xa8>
 8005e68:	b672      	cpsid	i
 8005e6a:	e7fe      	b.n	8005e6a <xQueueGenericSend+0x40>
 8005e6c:	2500      	movs	r5, #0
 8005e6e:	e030      	b.n	8005ed2 <xQueueGenericSend+0xa8>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e70:	0032      	movs	r2, r6
 8005e72:	0039      	movs	r1, r7
 8005e74:	0020      	movs	r0, r4
 8005e76:	f7ff febb 	bl	8005bf0 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d106      	bne.n	8005e8e <xQueueGenericSend+0x64>
					else if( xYieldRequired != pdFALSE )
 8005e80:	2800      	cmp	r0, #0
 8005e82:	d10d      	bne.n	8005ea0 <xQueueGenericSend+0x76>
				taskEXIT_CRITICAL();
 8005e84:	f000 ff80 	bl	8006d88 <vPortExitCritical>
				return pdPASS;
 8005e88:	2001      	movs	r0, #1
}
 8005e8a:	b005      	add	sp, #20
 8005e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e8e:	0020      	movs	r0, r4
 8005e90:	3024      	adds	r0, #36	; 0x24
 8005e92:	f000 fce9 	bl	8006868 <xTaskRemoveFromEventList>
 8005e96:	2800      	cmp	r0, #0
 8005e98:	d0f4      	beq.n	8005e84 <xQueueGenericSend+0x5a>
							queueYIELD_IF_USING_PREEMPTION();
 8005e9a:	f000 ff5d 	bl	8006d58 <vPortYield>
 8005e9e:	e7f1      	b.n	8005e84 <xQueueGenericSend+0x5a>
						queueYIELD_IF_USING_PREEMPTION();
 8005ea0:	f000 ff5a 	bl	8006d58 <vPortYield>
 8005ea4:	e7ee      	b.n	8005e84 <xQueueGenericSend+0x5a>
					taskEXIT_CRITICAL();
 8005ea6:	f000 ff6f 	bl	8006d88 <vPortExitCritical>
					return errQUEUE_FULL;
 8005eaa:	2000      	movs	r0, #0
 8005eac:	e7ed      	b.n	8005e8a <xQueueGenericSend+0x60>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005eae:	a802      	add	r0, sp, #8
 8005eb0:	f000 fd1c 	bl	80068ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005eb4:	3501      	adds	r5, #1
 8005eb6:	e019      	b.n	8005eec <xQueueGenericSend+0xc2>
		prvLockQueue( pxQueue );
 8005eb8:	2344      	movs	r3, #68	; 0x44
 8005eba:	2200      	movs	r2, #0
 8005ebc:	54e2      	strb	r2, [r4, r3]
 8005ebe:	e020      	b.n	8005f02 <xQueueGenericSend+0xd8>
 8005ec0:	2345      	movs	r3, #69	; 0x45
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	54e2      	strb	r2, [r4, r3]
 8005ec6:	e021      	b.n	8005f0c <xQueueGenericSend+0xe2>
				prvUnlockQueue( pxQueue );
 8005ec8:	0020      	movs	r0, r4
 8005eca:	f7ff fee4 	bl	8005c96 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ece:	f000 fbe9 	bl	80066a4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8005ed2:	f000 ff4d 	bl	8006d70 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ed6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ed8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d3c8      	bcc.n	8005e70 <xQueueGenericSend+0x46>
 8005ede:	2e02      	cmp	r6, #2
 8005ee0:	d0c6      	beq.n	8005e70 <xQueueGenericSend+0x46>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ee2:	9b01      	ldr	r3, [sp, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d0de      	beq.n	8005ea6 <xQueueGenericSend+0x7c>
				else if( xEntryTimeSet == pdFALSE )
 8005ee8:	2d00      	cmp	r5, #0
 8005eea:	d0e0      	beq.n	8005eae <xQueueGenericSend+0x84>
		taskEXIT_CRITICAL();
 8005eec:	f000 ff4c 	bl	8006d88 <vPortExitCritical>
		vTaskSuspendAll();
 8005ef0:	f000 fb46 	bl	8006580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ef4:	f000 ff3c 	bl	8006d70 <vPortEnterCritical>
 8005ef8:	2344      	movs	r3, #68	; 0x44
 8005efa:	5ce3      	ldrb	r3, [r4, r3]
 8005efc:	b25b      	sxtb	r3, r3
 8005efe:	3301      	adds	r3, #1
 8005f00:	d0da      	beq.n	8005eb8 <xQueueGenericSend+0x8e>
 8005f02:	2345      	movs	r3, #69	; 0x45
 8005f04:	5ce3      	ldrb	r3, [r4, r3]
 8005f06:	b25b      	sxtb	r3, r3
 8005f08:	3301      	adds	r3, #1
 8005f0a:	d0d9      	beq.n	8005ec0 <xQueueGenericSend+0x96>
 8005f0c:	f000 ff3c 	bl	8006d88 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f10:	a901      	add	r1, sp, #4
 8005f12:	a802      	add	r0, sp, #8
 8005f14:	f000 fcf6 	bl	8006904 <xTaskCheckForTimeOut>
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	d113      	bne.n	8005f44 <xQueueGenericSend+0x11a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f1c:	0020      	movs	r0, r4
 8005f1e:	f7ff fe4a 	bl	8005bb6 <prvIsQueueFull>
 8005f22:	2800      	cmp	r0, #0
 8005f24:	d0d0      	beq.n	8005ec8 <xQueueGenericSend+0x9e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f26:	0020      	movs	r0, r4
 8005f28:	3010      	adds	r0, #16
 8005f2a:	9901      	ldr	r1, [sp, #4]
 8005f2c:	f000 fc8a 	bl	8006844 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f30:	0020      	movs	r0, r4
 8005f32:	f7ff feb0 	bl	8005c96 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f36:	f000 fbb5 	bl	80066a4 <xTaskResumeAll>
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	d1c9      	bne.n	8005ed2 <xQueueGenericSend+0xa8>
					portYIELD_WITHIN_API();
 8005f3e:	f000 ff0b 	bl	8006d58 <vPortYield>
 8005f42:	e7c6      	b.n	8005ed2 <xQueueGenericSend+0xa8>
			prvUnlockQueue( pxQueue );
 8005f44:	0020      	movs	r0, r4
 8005f46:	f7ff fea6 	bl	8005c96 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f4a:	f000 fbab 	bl	80066a4 <xTaskResumeAll>
			return errQUEUE_FULL;
 8005f4e:	2000      	movs	r0, #0
 8005f50:	e79b      	b.n	8005e8a <xQueueGenericSend+0x60>

08005f52 <xQueueGenericSendFromISR>:
{
 8005f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f54:	46ce      	mov	lr, r9
 8005f56:	4647      	mov	r7, r8
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	0004      	movs	r4, r0
 8005f5c:	4689      	mov	r9, r1
 8005f5e:	0017      	movs	r7, r2
 8005f60:	001e      	movs	r6, r3
	configASSERT( pxQueue );
 8005f62:	2800      	cmp	r0, #0
 8005f64:	d008      	beq.n	8005f78 <xQueueGenericSendFromISR+0x26>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f66:	2900      	cmp	r1, #0
 8005f68:	d008      	beq.n	8005f7c <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f6a:	2e02      	cmp	r6, #2
 8005f6c:	d10b      	bne.n	8005f86 <xQueueGenericSendFromISR+0x34>
 8005f6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d008      	beq.n	8005f86 <xQueueGenericSendFromISR+0x34>
 8005f74:	b672      	cpsid	i
 8005f76:	e7fe      	b.n	8005f76 <xQueueGenericSendFromISR+0x24>
	configASSERT( pxQueue );
 8005f78:	b672      	cpsid	i
 8005f7a:	e7fe      	b.n	8005f7a <xQueueGenericSendFromISR+0x28>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f7c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d0f3      	beq.n	8005f6a <xQueueGenericSendFromISR+0x18>
 8005f82:	b672      	cpsid	i
 8005f84:	e7fe      	b.n	8005f84 <xQueueGenericSendFromISR+0x32>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f86:	f000 ff0f 	bl	8006da8 <ulSetInterruptMaskFromISR>
 8005f8a:	4680      	mov	r8, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f8e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d30a      	bcc.n	8005faa <xQueueGenericSendFromISR+0x58>
 8005f94:	2e02      	cmp	r6, #2
 8005f96:	d008      	beq.n	8005faa <xQueueGenericSendFromISR+0x58>
			xReturn = errQUEUE_FULL;
 8005f98:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005f9a:	4640      	mov	r0, r8
 8005f9c:	f000 ff08 	bl	8006db0 <vClearInterruptMaskFromISR>
}
 8005fa0:	0020      	movs	r0, r4
 8005fa2:	bcc0      	pop	{r6, r7}
 8005fa4:	46b9      	mov	r9, r7
 8005fa6:	46b0      	mov	r8, r6
 8005fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8005faa:	2345      	movs	r3, #69	; 0x45
 8005fac:	5ce5      	ldrb	r5, [r4, r3]
 8005fae:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fb0:	0032      	movs	r2, r6
 8005fb2:	4649      	mov	r1, r9
 8005fb4:	0020      	movs	r0, r4
 8005fb6:	f7ff fe1b 	bl	8005bf0 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8005fba:	1c6b      	adds	r3, r5, #1
 8005fbc:	d005      	beq.n	8005fca <xQueueGenericSendFromISR+0x78>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005fbe:	3501      	adds	r5, #1
 8005fc0:	b26d      	sxtb	r5, r5
 8005fc2:	2345      	movs	r3, #69	; 0x45
 8005fc4:	54e5      	strb	r5, [r4, r3]
			xReturn = pdPASS;
 8005fc6:	2401      	movs	r4, #1
 8005fc8:	e7e7      	b.n	8005f9a <xQueueGenericSendFromISR+0x48>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <xQueueGenericSendFromISR+0x82>
			xReturn = pdPASS;
 8005fd0:	2401      	movs	r4, #1
 8005fd2:	e7e2      	b.n	8005f9a <xQueueGenericSendFromISR+0x48>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fd4:	0020      	movs	r0, r4
 8005fd6:	3024      	adds	r0, #36	; 0x24
 8005fd8:	f000 fc46 	bl	8006868 <xTaskRemoveFromEventList>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d005      	beq.n	8005fec <xQueueGenericSendFromISR+0x9a>
							if( pxHigherPriorityTaskWoken != NULL )
 8005fe0:	2f00      	cmp	r7, #0
 8005fe2:	d005      	beq.n	8005ff0 <xQueueGenericSendFromISR+0x9e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8005fe8:	2401      	movs	r4, #1
 8005fea:	e7d6      	b.n	8005f9a <xQueueGenericSendFromISR+0x48>
 8005fec:	2401      	movs	r4, #1
 8005fee:	e7d4      	b.n	8005f9a <xQueueGenericSendFromISR+0x48>
 8005ff0:	2401      	movs	r4, #1
 8005ff2:	e7d2      	b.n	8005f9a <xQueueGenericSendFromISR+0x48>

08005ff4 <xQueueReceive>:
{
 8005ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	0004      	movs	r4, r0
 8005ffa:	000f      	movs	r7, r1
 8005ffc:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005ffe:	2800      	cmp	r0, #0
 8006000:	d00a      	beq.n	8006018 <xQueueReceive+0x24>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006002:	2900      	cmp	r1, #0
 8006004:	d00a      	beq.n	800601c <xQueueReceive+0x28>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006006:	f000 fcb7 	bl	8006978 <xTaskGetSchedulerState>
 800600a:	1e05      	subs	r5, r0, #0
 800600c:	d10b      	bne.n	8006026 <xQueueReceive+0x32>
 800600e:	9b01      	ldr	r3, [sp, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d042      	beq.n	800609a <xQueueReceive+0xa6>
 8006014:	b672      	cpsid	i
 8006016:	e7fe      	b.n	8006016 <xQueueReceive+0x22>
	configASSERT( ( pxQueue ) );
 8006018:	b672      	cpsid	i
 800601a:	e7fe      	b.n	800601a <xQueueReceive+0x26>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800601c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0f1      	beq.n	8006006 <xQueueReceive+0x12>
 8006022:	b672      	cpsid	i
 8006024:	e7fe      	b.n	8006024 <xQueueReceive+0x30>
 8006026:	2500      	movs	r5, #0
 8006028:	e037      	b.n	800609a <xQueueReceive+0xa6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800602a:	0039      	movs	r1, r7
 800602c:	0020      	movs	r0, r4
 800602e:	f7ff fe20 	bl	8005c72 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006032:	3e01      	subs	r6, #1
 8006034:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006036:	6923      	ldr	r3, [r4, #16]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d104      	bne.n	8006046 <xQueueReceive+0x52>
				taskEXIT_CRITICAL();
 800603c:	f000 fea4 	bl	8006d88 <vPortExitCritical>
				return pdPASS;
 8006040:	2001      	movs	r0, #1
}
 8006042:	b005      	add	sp, #20
 8006044:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006046:	0020      	movs	r0, r4
 8006048:	3010      	adds	r0, #16
 800604a:	f000 fc0d 	bl	8006868 <xTaskRemoveFromEventList>
 800604e:	2800      	cmp	r0, #0
 8006050:	d0f4      	beq.n	800603c <xQueueReceive+0x48>
						queueYIELD_IF_USING_PREEMPTION();
 8006052:	f000 fe81 	bl	8006d58 <vPortYield>
 8006056:	e7f1      	b.n	800603c <xQueueReceive+0x48>
					taskEXIT_CRITICAL();
 8006058:	f000 fe96 	bl	8006d88 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800605c:	2000      	movs	r0, #0
 800605e:	e7f0      	b.n	8006042 <xQueueReceive+0x4e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006060:	a802      	add	r0, sp, #8
 8006062:	f000 fc43 	bl	80068ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006066:	3501      	adds	r5, #1
 8006068:	e021      	b.n	80060ae <xQueueReceive+0xba>
		prvLockQueue( pxQueue );
 800606a:	2344      	movs	r3, #68	; 0x44
 800606c:	2200      	movs	r2, #0
 800606e:	54e2      	strb	r2, [r4, r3]
 8006070:	e028      	b.n	80060c4 <xQueueReceive+0xd0>
 8006072:	2345      	movs	r3, #69	; 0x45
 8006074:	2200      	movs	r2, #0
 8006076:	54e2      	strb	r2, [r4, r3]
 8006078:	e029      	b.n	80060ce <xQueueReceive+0xda>
				prvUnlockQueue( pxQueue );
 800607a:	0020      	movs	r0, r4
 800607c:	f7ff fe0b 	bl	8005c96 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006080:	f000 fb10 	bl	80066a4 <xTaskResumeAll>
 8006084:	e009      	b.n	800609a <xQueueReceive+0xa6>
			prvUnlockQueue( pxQueue );
 8006086:	0020      	movs	r0, r4
 8006088:	f7ff fe05 	bl	8005c96 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800608c:	f000 fb0a 	bl	80066a4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006090:	0020      	movs	r0, r4
 8006092:	f7ff fd9f 	bl	8005bd4 <prvIsQueueEmpty>
 8006096:	2800      	cmp	r0, #0
 8006098:	d135      	bne.n	8006106 <xQueueReceive+0x112>
		taskENTER_CRITICAL();
 800609a:	f000 fe69 	bl	8006d70 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800609e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060a0:	2e00      	cmp	r6, #0
 80060a2:	d1c2      	bne.n	800602a <xQueueReceive+0x36>
				if( xTicksToWait == ( TickType_t ) 0 )
 80060a4:	9b01      	ldr	r3, [sp, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d0d6      	beq.n	8006058 <xQueueReceive+0x64>
				else if( xEntryTimeSet == pdFALSE )
 80060aa:	2d00      	cmp	r5, #0
 80060ac:	d0d8      	beq.n	8006060 <xQueueReceive+0x6c>
		taskEXIT_CRITICAL();
 80060ae:	f000 fe6b 	bl	8006d88 <vPortExitCritical>
		vTaskSuspendAll();
 80060b2:	f000 fa65 	bl	8006580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060b6:	f000 fe5b 	bl	8006d70 <vPortEnterCritical>
 80060ba:	2344      	movs	r3, #68	; 0x44
 80060bc:	5ce3      	ldrb	r3, [r4, r3]
 80060be:	b25b      	sxtb	r3, r3
 80060c0:	3301      	adds	r3, #1
 80060c2:	d0d2      	beq.n	800606a <xQueueReceive+0x76>
 80060c4:	2345      	movs	r3, #69	; 0x45
 80060c6:	5ce3      	ldrb	r3, [r4, r3]
 80060c8:	b25b      	sxtb	r3, r3
 80060ca:	3301      	adds	r3, #1
 80060cc:	d0d1      	beq.n	8006072 <xQueueReceive+0x7e>
 80060ce:	f000 fe5b 	bl	8006d88 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060d2:	a901      	add	r1, sp, #4
 80060d4:	a802      	add	r0, sp, #8
 80060d6:	f000 fc15 	bl	8006904 <xTaskCheckForTimeOut>
 80060da:	2800      	cmp	r0, #0
 80060dc:	d1d3      	bne.n	8006086 <xQueueReceive+0x92>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060de:	0020      	movs	r0, r4
 80060e0:	f7ff fd78 	bl	8005bd4 <prvIsQueueEmpty>
 80060e4:	2800      	cmp	r0, #0
 80060e6:	d0c8      	beq.n	800607a <xQueueReceive+0x86>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060e8:	0020      	movs	r0, r4
 80060ea:	3024      	adds	r0, #36	; 0x24
 80060ec:	9901      	ldr	r1, [sp, #4]
 80060ee:	f000 fba9 	bl	8006844 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060f2:	0020      	movs	r0, r4
 80060f4:	f7ff fdcf 	bl	8005c96 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060f8:	f000 fad4 	bl	80066a4 <xTaskResumeAll>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	d1cc      	bne.n	800609a <xQueueReceive+0xa6>
					portYIELD_WITHIN_API();
 8006100:	f000 fe2a 	bl	8006d58 <vPortYield>
 8006104:	e7c9      	b.n	800609a <xQueueReceive+0xa6>
				return errQUEUE_EMPTY;
 8006106:	2000      	movs	r0, #0
 8006108:	e79b      	b.n	8006042 <xQueueReceive+0x4e>

0800610a <xQueueReceiveFromISR>:
{
 800610a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610c:	46ce      	mov	lr, r9
 800610e:	4647      	mov	r7, r8
 8006110:	b580      	push	{r7, lr}
 8006112:	0004      	movs	r4, r0
 8006114:	4689      	mov	r9, r1
 8006116:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 8006118:	2800      	cmp	r0, #0
 800611a:	d010      	beq.n	800613e <xQueueReceiveFromISR+0x34>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800611c:	2900      	cmp	r1, #0
 800611e:	d010      	beq.n	8006142 <xQueueReceiveFromISR+0x38>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006120:	f000 fe42 	bl	8006da8 <ulSetInterruptMaskFromISR>
 8006124:	4680      	mov	r8, r0
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006126:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006128:	2f00      	cmp	r7, #0
 800612a:	d10f      	bne.n	800614c <xQueueReceiveFromISR+0x42>
			xReturn = pdFAIL;
 800612c:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800612e:	4640      	mov	r0, r8
 8006130:	f000 fe3e 	bl	8006db0 <vClearInterruptMaskFromISR>
}
 8006134:	0020      	movs	r0, r4
 8006136:	bcc0      	pop	{r6, r7}
 8006138:	46b9      	mov	r9, r7
 800613a:	46b0      	mov	r8, r6
 800613c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
 800613e:	b672      	cpsid	i
 8006140:	e7fe      	b.n	8006140 <xQueueReceiveFromISR+0x36>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006142:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006144:	2b00      	cmp	r3, #0
 8006146:	d0eb      	beq.n	8006120 <xQueueReceiveFromISR+0x16>
 8006148:	b672      	cpsid	i
 800614a:	e7fe      	b.n	800614a <xQueueReceiveFromISR+0x40>
			const int8_t cRxLock = pxQueue->cRxLock;
 800614c:	2344      	movs	r3, #68	; 0x44
 800614e:	5ce5      	ldrb	r5, [r4, r3]
 8006150:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006152:	4649      	mov	r1, r9
 8006154:	0020      	movs	r0, r4
 8006156:	f7ff fd8c 	bl	8005c72 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800615a:	1e7b      	subs	r3, r7, #1
 800615c:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800615e:	1c6b      	adds	r3, r5, #1
 8006160:	d005      	beq.n	800616e <xQueueReceiveFromISR+0x64>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006162:	3501      	adds	r5, #1
 8006164:	b26d      	sxtb	r5, r5
 8006166:	2344      	movs	r3, #68	; 0x44
 8006168:	54e5      	strb	r5, [r4, r3]
			xReturn = pdPASS;
 800616a:	2401      	movs	r4, #1
 800616c:	e7df      	b.n	800612e <xQueueReceiveFromISR+0x24>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800616e:	6923      	ldr	r3, [r4, #16]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <xQueueReceiveFromISR+0x6e>
			xReturn = pdPASS;
 8006174:	2401      	movs	r4, #1
 8006176:	e7da      	b.n	800612e <xQueueReceiveFromISR+0x24>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006178:	0020      	movs	r0, r4
 800617a:	3010      	adds	r0, #16
 800617c:	f000 fb74 	bl	8006868 <xTaskRemoveFromEventList>
 8006180:	2800      	cmp	r0, #0
 8006182:	d005      	beq.n	8006190 <xQueueReceiveFromISR+0x86>
						if( pxHigherPriorityTaskWoken != NULL )
 8006184:	2e00      	cmp	r6, #0
 8006186:	d005      	beq.n	8006194 <xQueueReceiveFromISR+0x8a>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006188:	2301      	movs	r3, #1
 800618a:	6033      	str	r3, [r6, #0]
			xReturn = pdPASS;
 800618c:	2401      	movs	r4, #1
 800618e:	e7ce      	b.n	800612e <xQueueReceiveFromISR+0x24>
 8006190:	2401      	movs	r4, #1
 8006192:	e7cc      	b.n	800612e <xQueueReceiveFromISR+0x24>
 8006194:	2401      	movs	r4, #1
 8006196:	e7ca      	b.n	800612e <xQueueReceiveFromISR+0x24>

08006198 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006198:	4b08      	ldr	r3, [pc, #32]	; (80061bc <prvResetNextTaskUnblockTime+0x24>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d104      	bne.n	80061ac <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80061a2:	4b07      	ldr	r3, [pc, #28]	; (80061c0 <prvResetNextTaskUnblockTime+0x28>)
 80061a4:	2201      	movs	r2, #1
 80061a6:	4252      	negs	r2, r2
 80061a8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80061aa:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061ac:	4b03      	ldr	r3, [pc, #12]	; (80061bc <prvResetNextTaskUnblockTime+0x24>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	4b02      	ldr	r3, [pc, #8]	; (80061c0 <prvResetNextTaskUnblockTime+0x28>)
 80061b8:	601a      	str	r2, [r3, #0]
}
 80061ba:	e7f6      	b.n	80061aa <prvResetNextTaskUnblockTime+0x12>
 80061bc:	200009e0 	.word	0x200009e0
 80061c0:	20000ab4 	.word	0x20000ab4

080061c4 <prvInitialiseNewTask>:
{
 80061c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061c6:	46d6      	mov	lr, sl
 80061c8:	464f      	mov	r7, r9
 80061ca:	b580      	push	{r7, lr}
 80061cc:	4681      	mov	r9, r0
 80061ce:	469a      	mov	sl, r3
 80061d0:	9d08      	ldr	r5, [sp, #32]
 80061d2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061d4:	4b21      	ldr	r3, [pc, #132]	; (800625c <prvInitialiseNewTask+0x98>)
 80061d6:	469c      	mov	ip, r3
 80061d8:	4462      	add	r2, ip
 80061da:	0092      	lsls	r2, r2, #2
 80061dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061de:	469c      	mov	ip, r3
 80061e0:	4462      	add	r2, ip
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80061e2:	2307      	movs	r3, #7
 80061e4:	439a      	bics	r2, r3
 80061e6:	0016      	movs	r6, r2
	if( pcName != NULL )
 80061e8:	2900      	cmp	r1, #0
 80061ea:	d032      	beq.n	8006252 <prvInitialiseNewTask+0x8e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061ec:	2200      	movs	r2, #0
 80061ee:	2a0f      	cmp	r2, #15
 80061f0:	d808      	bhi.n	8006204 <prvInitialiseNewTask+0x40>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80061f2:	5c8b      	ldrb	r3, [r1, r2]
 80061f4:	18bc      	adds	r4, r7, r2
 80061f6:	3434      	adds	r4, #52	; 0x34
 80061f8:	7023      	strb	r3, [r4, #0]
			if( pcName[ x ] == ( char ) 0x00 )
 80061fa:	5c8b      	ldrb	r3, [r1, r2]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <prvInitialiseNewTask+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006200:	3201      	adds	r2, #1
 8006202:	e7f4      	b.n	80061ee <prvInitialiseNewTask+0x2a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006204:	2343      	movs	r3, #67	; 0x43
 8006206:	2200      	movs	r2, #0
 8006208:	54fa      	strb	r2, [r7, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800620a:	2d06      	cmp	r5, #6
 800620c:	d900      	bls.n	8006210 <prvInitialiseNewTask+0x4c>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800620e:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8006210:	62fd      	str	r5, [r7, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006212:	647d      	str	r5, [r7, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006214:	2400      	movs	r4, #0
 8006216:	64bc      	str	r4, [r7, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006218:	1d38      	adds	r0, r7, #4
 800621a:	f7ff fc94 	bl	8005b46 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800621e:	0038      	movs	r0, r7
 8006220:	3018      	adds	r0, #24
 8006222:	f7ff fc90 	bl	8005b46 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006226:	613f      	str	r7, [r7, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006228:	2307      	movs	r3, #7
 800622a:	1b5d      	subs	r5, r3, r5
 800622c:	61bd      	str	r5, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800622e:	627f      	str	r7, [r7, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8006230:	64fc      	str	r4, [r7, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006232:	3349      	adds	r3, #73	; 0x49
 8006234:	54fc      	strb	r4, [r7, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006236:	4652      	mov	r2, sl
 8006238:	4649      	mov	r1, r9
 800623a:	0030      	movs	r0, r6
 800623c:	f000 fd5c 	bl	8006cf8 <pxPortInitialiseStack>
 8006240:	6038      	str	r0, [r7, #0]
	if( pxCreatedTask != NULL )
 8006242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006244:	2b00      	cmp	r3, #0
 8006246:	d000      	beq.n	800624a <prvInitialiseNewTask+0x86>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006248:	601f      	str	r7, [r3, #0]
}
 800624a:	bcc0      	pop	{r6, r7}
 800624c:	46ba      	mov	sl, r7
 800624e:	46b1      	mov	r9, r6
 8006250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006252:	2334      	movs	r3, #52	; 0x34
 8006254:	2200      	movs	r2, #0
 8006256:	54fa      	strb	r2, [r7, r3]
 8006258:	e7d7      	b.n	800620a <prvInitialiseNewTask+0x46>
 800625a:	46c0      	nop			; (mov r8, r8)
 800625c:	3fffffff 	.word	0x3fffffff

08006260 <prvInitialiseTaskLists>:
{
 8006260:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006262:	2400      	movs	r4, #0
 8006264:	e007      	b.n	8006276 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006266:	00a3      	lsls	r3, r4, #2
 8006268:	191b      	adds	r3, r3, r4
 800626a:	0098      	lsls	r0, r3, #2
 800626c:	4b0e      	ldr	r3, [pc, #56]	; (80062a8 <prvInitialiseTaskLists+0x48>)
 800626e:	18c0      	adds	r0, r0, r3
 8006270:	f7ff fc5e 	bl	8005b30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006274:	3401      	adds	r4, #1
 8006276:	2c06      	cmp	r4, #6
 8006278:	d9f5      	bls.n	8006266 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800627a:	4d0c      	ldr	r5, [pc, #48]	; (80062ac <prvInitialiseTaskLists+0x4c>)
 800627c:	0028      	movs	r0, r5
 800627e:	f7ff fc57 	bl	8005b30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006282:	4c0b      	ldr	r4, [pc, #44]	; (80062b0 <prvInitialiseTaskLists+0x50>)
 8006284:	0020      	movs	r0, r4
 8006286:	f7ff fc53 	bl	8005b30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800628a:	480a      	ldr	r0, [pc, #40]	; (80062b4 <prvInitialiseTaskLists+0x54>)
 800628c:	f7ff fc50 	bl	8005b30 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8006290:	4809      	ldr	r0, [pc, #36]	; (80062b8 <prvInitialiseTaskLists+0x58>)
 8006292:	f7ff fc4d 	bl	8005b30 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8006296:	4809      	ldr	r0, [pc, #36]	; (80062bc <prvInitialiseTaskLists+0x5c>)
 8006298:	f7ff fc4a 	bl	8005b30 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800629c:	4b08      	ldr	r3, [pc, #32]	; (80062c0 <prvInitialiseTaskLists+0x60>)
 800629e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062a0:	4b08      	ldr	r3, [pc, #32]	; (80062c4 <prvInitialiseTaskLists+0x64>)
 80062a2:	601c      	str	r4, [r3, #0]
}
 80062a4:	bd70      	pop	{r4, r5, r6, pc}
 80062a6:	46c0      	nop			; (mov r8, r8)
 80062a8:	200009e8 	.word	0x200009e8
 80062ac:	20000a8c 	.word	0x20000a8c
 80062b0:	20000aa0 	.word	0x20000aa0
 80062b4:	20000abc 	.word	0x20000abc
 80062b8:	20000ae8 	.word	0x20000ae8
 80062bc:	20000ad4 	.word	0x20000ad4
 80062c0:	200009e0 	.word	0x200009e0
 80062c4:	200009e4 	.word	0x200009e4

080062c8 <prvAddNewTaskToReadyList>:
{
 80062c8:	b510      	push	{r4, lr}
 80062ca:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 80062cc:	f000 fd50 	bl	8006d70 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80062d0:	4a1f      	ldr	r2, [pc, #124]	; (8006350 <prvAddNewTaskToReadyList+0x88>)
 80062d2:	6813      	ldr	r3, [r2, #0]
 80062d4:	3301      	adds	r3, #1
 80062d6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80062d8:	4b1e      	ldr	r3, [pc, #120]	; (8006354 <prvAddNewTaskToReadyList+0x8c>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00c      	beq.n	80062fa <prvAddNewTaskToReadyList+0x32>
			if( xSchedulerRunning == pdFALSE )
 80062e0:	4b1d      	ldr	r3, [pc, #116]	; (8006358 <prvAddNewTaskToReadyList+0x90>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10d      	bne.n	8006304 <prvAddNewTaskToReadyList+0x3c>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80062e8:	4b1a      	ldr	r3, [pc, #104]	; (8006354 <prvAddNewTaskToReadyList+0x8c>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d807      	bhi.n	8006304 <prvAddNewTaskToReadyList+0x3c>
					pxCurrentTCB = pxNewTCB;
 80062f4:	4b17      	ldr	r3, [pc, #92]	; (8006354 <prvAddNewTaskToReadyList+0x8c>)
 80062f6:	601c      	str	r4, [r3, #0]
 80062f8:	e004      	b.n	8006304 <prvAddNewTaskToReadyList+0x3c>
			pxCurrentTCB = pxNewTCB;
 80062fa:	4b16      	ldr	r3, [pc, #88]	; (8006354 <prvAddNewTaskToReadyList+0x8c>)
 80062fc:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80062fe:	6813      	ldr	r3, [r2, #0]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d01f      	beq.n	8006344 <prvAddNewTaskToReadyList+0x7c>
		uxTaskNumber++;
 8006304:	4a15      	ldr	r2, [pc, #84]	; (800635c <prvAddNewTaskToReadyList+0x94>)
 8006306:	6813      	ldr	r3, [r2, #0]
 8006308:	3301      	adds	r3, #1
 800630a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800630c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800630e:	4a14      	ldr	r2, [pc, #80]	; (8006360 <prvAddNewTaskToReadyList+0x98>)
 8006310:	6812      	ldr	r2, [r2, #0]
 8006312:	4293      	cmp	r3, r2
 8006314:	d901      	bls.n	800631a <prvAddNewTaskToReadyList+0x52>
 8006316:	4a12      	ldr	r2, [pc, #72]	; (8006360 <prvAddNewTaskToReadyList+0x98>)
 8006318:	6013      	str	r3, [r2, #0]
 800631a:	1d21      	adds	r1, r4, #4
 800631c:	0098      	lsls	r0, r3, #2
 800631e:	18c0      	adds	r0, r0, r3
 8006320:	0080      	lsls	r0, r0, #2
 8006322:	4b10      	ldr	r3, [pc, #64]	; (8006364 <prvAddNewTaskToReadyList+0x9c>)
 8006324:	18c0      	adds	r0, r0, r3
 8006326:	f7ff fc11 	bl	8005b4c <vListInsertEnd>
	taskEXIT_CRITICAL();
 800632a:	f000 fd2d 	bl	8006d88 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800632e:	4b0a      	ldr	r3, [pc, #40]	; (8006358 <prvAddNewTaskToReadyList+0x90>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d005      	beq.n	8006342 <prvAddNewTaskToReadyList+0x7a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006336:	4b07      	ldr	r3, [pc, #28]	; (8006354 <prvAddNewTaskToReadyList+0x8c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800633c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800633e:	429a      	cmp	r2, r3
 8006340:	d303      	bcc.n	800634a <prvAddNewTaskToReadyList+0x82>
}
 8006342:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8006344:	f7ff ff8c 	bl	8006260 <prvInitialiseTaskLists>
 8006348:	e7dc      	b.n	8006304 <prvAddNewTaskToReadyList+0x3c>
			taskYIELD_IF_USING_PREEMPTION();
 800634a:	f000 fd05 	bl	8006d58 <vPortYield>
}
 800634e:	e7f8      	b.n	8006342 <prvAddNewTaskToReadyList+0x7a>
 8006350:	20000a74 	.word	0x20000a74
 8006354:	200009dc 	.word	0x200009dc
 8006358:	20000ad0 	.word	0x20000ad0
 800635c:	20000a84 	.word	0x20000a84
 8006360:	20000a88 	.word	0x20000a88
 8006364:	200009e8 	.word	0x200009e8

08006368 <prvDeleteTCB>:
	{
 8006368:	b510      	push	{r4, lr}
 800636a:	0004      	movs	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800636c:	2351      	movs	r3, #81	; 0x51
 800636e:	5cc3      	ldrb	r3, [r0, r3]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d005      	beq.n	8006380 <prvDeleteTCB+0x18>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006374:	2b01      	cmp	r3, #1
 8006376:	d00a      	beq.n	800638e <prvDeleteTCB+0x26>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006378:	2b02      	cmp	r3, #2
 800637a:	d007      	beq.n	800638c <prvDeleteTCB+0x24>
 800637c:	b672      	cpsid	i
 800637e:	e7fe      	b.n	800637e <prvDeleteTCB+0x16>
				vPortFree( pxTCB->pxStack );
 8006380:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8006382:	f000 fe15 	bl	8006fb0 <vPortFree>
				vPortFree( pxTCB );
 8006386:	0020      	movs	r0, r4
 8006388:	f000 fe12 	bl	8006fb0 <vPortFree>
	}
 800638c:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800638e:	f000 fe0f 	bl	8006fb0 <vPortFree>
 8006392:	e7fb      	b.n	800638c <prvDeleteTCB+0x24>

08006394 <prvCheckTasksWaitingTermination>:
{
 8006394:	b510      	push	{r4, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006396:	4b0d      	ldr	r3, [pc, #52]	; (80063cc <prvCheckTasksWaitingTermination+0x38>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d015      	beq.n	80063ca <prvCheckTasksWaitingTermination+0x36>
			taskENTER_CRITICAL();
 800639e:	f000 fce7 	bl	8006d70 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063a2:	4b0b      	ldr	r3, [pc, #44]	; (80063d0 <prvCheckTasksWaitingTermination+0x3c>)
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063a8:	1d20      	adds	r0, r4, #4
 80063aa:	f7ff fbf1 	bl	8005b90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80063ae:	4a09      	ldr	r2, [pc, #36]	; (80063d4 <prvCheckTasksWaitingTermination+0x40>)
 80063b0:	6813      	ldr	r3, [r2, #0]
 80063b2:	3b01      	subs	r3, #1
 80063b4:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80063b6:	4a05      	ldr	r2, [pc, #20]	; (80063cc <prvCheckTasksWaitingTermination+0x38>)
 80063b8:	6813      	ldr	r3, [r2, #0]
 80063ba:	3b01      	subs	r3, #1
 80063bc:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80063be:	f000 fce3 	bl	8006d88 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80063c2:	0020      	movs	r0, r4
 80063c4:	f7ff ffd0 	bl	8006368 <prvDeleteTCB>
 80063c8:	e7e5      	b.n	8006396 <prvCheckTasksWaitingTermination+0x2>
}
 80063ca:	bd10      	pop	{r4, pc}
 80063cc:	20000a78 	.word	0x20000a78
 80063d0:	20000ae8 	.word	0x20000ae8
 80063d4:	20000a74 	.word	0x20000a74

080063d8 <prvIdleTask>:
{
 80063d8:	b510      	push	{r4, lr}
		prvCheckTasksWaitingTermination();
 80063da:	f7ff ffdb 	bl	8006394 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80063de:	4b03      	ldr	r3, [pc, #12]	; (80063ec <prvIdleTask+0x14>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d9f9      	bls.n	80063da <prvIdleTask+0x2>
				taskYIELD();
 80063e6:	f000 fcb7 	bl	8006d58 <vPortYield>
 80063ea:	e7f6      	b.n	80063da <prvIdleTask+0x2>
 80063ec:	200009e8 	.word	0x200009e8

080063f0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80063f0:	b570      	push	{r4, r5, r6, lr}
 80063f2:	0004      	movs	r4, r0
 80063f4:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80063f6:	4b17      	ldr	r3, [pc, #92]	; (8006454 <prvAddCurrentTaskToDelayedList+0x64>)
 80063f8:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063fa:	4b17      	ldr	r3, [pc, #92]	; (8006458 <prvAddCurrentTaskToDelayedList+0x68>)
 80063fc:	6818      	ldr	r0, [r3, #0]
 80063fe:	3004      	adds	r0, #4
 8006400:	f7ff fbc6 	bl	8005b90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006404:	1c63      	adds	r3, r4, #1
 8006406:	d00d      	beq.n	8006424 <prvAddCurrentTaskToDelayedList+0x34>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006408:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800640a:	4b13      	ldr	r3, [pc, #76]	; (8006458 <prvAddCurrentTaskToDelayedList+0x68>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8006410:	42a6      	cmp	r6, r4
 8006412:	d910      	bls.n	8006436 <prvAddCurrentTaskToDelayedList+0x46>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006414:	4b11      	ldr	r3, [pc, #68]	; (800645c <prvAddCurrentTaskToDelayedList+0x6c>)
 8006416:	6818      	ldr	r0, [r3, #0]
 8006418:	4b0f      	ldr	r3, [pc, #60]	; (8006458 <prvAddCurrentTaskToDelayedList+0x68>)
 800641a:	6819      	ldr	r1, [r3, #0]
 800641c:	3104      	adds	r1, #4
 800641e:	f7ff fba0 	bl	8005b62 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006422:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006424:	2d00      	cmp	r5, #0
 8006426:	d0ef      	beq.n	8006408 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006428:	4b0b      	ldr	r3, [pc, #44]	; (8006458 <prvAddCurrentTaskToDelayedList+0x68>)
 800642a:	6819      	ldr	r1, [r3, #0]
 800642c:	3104      	adds	r1, #4
 800642e:	480c      	ldr	r0, [pc, #48]	; (8006460 <prvAddCurrentTaskToDelayedList+0x70>)
 8006430:	f7ff fb8c 	bl	8005b4c <vListInsertEnd>
 8006434:	e7f5      	b.n	8006422 <prvAddCurrentTaskToDelayedList+0x32>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006436:	4b0b      	ldr	r3, [pc, #44]	; (8006464 <prvAddCurrentTaskToDelayedList+0x74>)
 8006438:	6818      	ldr	r0, [r3, #0]
 800643a:	4b07      	ldr	r3, [pc, #28]	; (8006458 <prvAddCurrentTaskToDelayedList+0x68>)
 800643c:	6819      	ldr	r1, [r3, #0]
 800643e:	3104      	adds	r1, #4
 8006440:	f7ff fb8f 	bl	8005b62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006444:	4b08      	ldr	r3, [pc, #32]	; (8006468 <prvAddCurrentTaskToDelayedList+0x78>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	42a3      	cmp	r3, r4
 800644a:	d9ea      	bls.n	8006422 <prvAddCurrentTaskToDelayedList+0x32>
					xNextTaskUnblockTime = xTimeToWake;
 800644c:	4b06      	ldr	r3, [pc, #24]	; (8006468 <prvAddCurrentTaskToDelayedList+0x78>)
 800644e:	601c      	str	r4, [r3, #0]
}
 8006450:	e7e7      	b.n	8006422 <prvAddCurrentTaskToDelayedList+0x32>
 8006452:	46c0      	nop			; (mov r8, r8)
 8006454:	20000afc 	.word	0x20000afc
 8006458:	200009dc 	.word	0x200009dc
 800645c:	200009e4 	.word	0x200009e4
 8006460:	20000ad4 	.word	0x20000ad4
 8006464:	200009e0 	.word	0x200009e0
 8006468:	20000ab4 	.word	0x20000ab4

0800646c <xTaskCreateStatic>:
	{
 800646c:	b570      	push	{r4, r5, r6, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006472:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8006474:	2d00      	cmp	r5, #0
 8006476:	d008      	beq.n	800648a <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 8006478:	2c00      	cmp	r4, #0
 800647a:	d008      	beq.n	800648e <xTaskCreateStatic+0x22>
			volatile size_t xSize = sizeof( StaticTask_t );
 800647c:	2654      	movs	r6, #84	; 0x54
 800647e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006480:	9e04      	ldr	r6, [sp, #16]
 8006482:	2e54      	cmp	r6, #84	; 0x54
 8006484:	d005      	beq.n	8006492 <xTaskCreateStatic+0x26>
 8006486:	b672      	cpsid	i
 8006488:	e7fe      	b.n	8006488 <xTaskCreateStatic+0x1c>
		configASSERT( puxStackBuffer != NULL );
 800648a:	b672      	cpsid	i
 800648c:	e7fe      	b.n	800648c <xTaskCreateStatic+0x20>
		configASSERT( pxTaskBuffer != NULL );
 800648e:	b672      	cpsid	i
 8006490:	e7fe      	b.n	8006490 <xTaskCreateStatic+0x24>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006492:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006494:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006496:	2551      	movs	r5, #81	; 0x51
 8006498:	2602      	movs	r6, #2
 800649a:	5566      	strb	r6, [r4, r5]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800649c:	2500      	movs	r5, #0
 800649e:	9503      	str	r5, [sp, #12]
 80064a0:	9402      	str	r4, [sp, #8]
 80064a2:	ad05      	add	r5, sp, #20
 80064a4:	9501      	str	r5, [sp, #4]
 80064a6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80064a8:	9500      	str	r5, [sp, #0]
 80064aa:	f7ff fe8b 	bl	80061c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064ae:	0020      	movs	r0, r4
 80064b0:	f7ff ff0a 	bl	80062c8 <prvAddNewTaskToReadyList>
	}
 80064b4:	9805      	ldr	r0, [sp, #20]
 80064b6:	b006      	add	sp, #24
 80064b8:	bd70      	pop	{r4, r5, r6, pc}

080064ba <xTaskCreate>:
	{
 80064ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064bc:	b087      	sub	sp, #28
 80064be:	9004      	str	r0, [sp, #16]
 80064c0:	9105      	str	r1, [sp, #20]
 80064c2:	0016      	movs	r6, r2
 80064c4:	001f      	movs	r7, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80064c6:	0090      	lsls	r0, r2, #2
 80064c8:	f000 fd0a 	bl	8006ee0 <pvPortMalloc>
 80064cc:	1e04      	subs	r4, r0, #0
			if( pxStack != NULL )
 80064ce:	d01f      	beq.n	8006510 <xTaskCreate+0x56>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80064d0:	2054      	movs	r0, #84	; 0x54
 80064d2:	f000 fd05 	bl	8006ee0 <pvPortMalloc>
 80064d6:	1e05      	subs	r5, r0, #0
				if( pxNewTCB != NULL )
 80064d8:	d016      	beq.n	8006508 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 80064da:	6304      	str	r4, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80064dc:	2d00      	cmp	r5, #0
 80064de:	d01b      	beq.n	8006518 <xTaskCreate+0x5e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80064e0:	2300      	movs	r3, #0
 80064e2:	2251      	movs	r2, #81	; 0x51
 80064e4:	54ab      	strb	r3, [r5, r2]
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80064e6:	9303      	str	r3, [sp, #12]
 80064e8:	9502      	str	r5, [sp, #8]
 80064ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064ec:	9301      	str	r3, [sp, #4]
 80064ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	003b      	movs	r3, r7
 80064f4:	0032      	movs	r2, r6
 80064f6:	9905      	ldr	r1, [sp, #20]
 80064f8:	9804      	ldr	r0, [sp, #16]
 80064fa:	f7ff fe63 	bl	80061c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064fe:	0028      	movs	r0, r5
 8006500:	f7ff fee2 	bl	80062c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006504:	2001      	movs	r0, #1
 8006506:	e005      	b.n	8006514 <xTaskCreate+0x5a>
					vPortFree( pxStack );
 8006508:	0020      	movs	r0, r4
 800650a:	f000 fd51 	bl	8006fb0 <vPortFree>
 800650e:	e7e5      	b.n	80064dc <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006510:	2001      	movs	r0, #1
 8006512:	4240      	negs	r0, r0
	}
 8006514:	b007      	add	sp, #28
 8006516:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006518:	2001      	movs	r0, #1
 800651a:	4240      	negs	r0, r0
		return xReturn;
 800651c:	e7fa      	b.n	8006514 <xTaskCreate+0x5a>
	...

08006520 <vTaskStartScheduler>:
{
 8006520:	b510      	push	{r4, lr}
 8006522:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006524:	2400      	movs	r4, #0
 8006526:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006528:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800652a:	aa07      	add	r2, sp, #28
 800652c:	a906      	add	r1, sp, #24
 800652e:	a805      	add	r0, sp, #20
 8006530:	f000 fea8 	bl	8007284 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006534:	9b05      	ldr	r3, [sp, #20]
 8006536:	9302      	str	r3, [sp, #8]
 8006538:	9b06      	ldr	r3, [sp, #24]
 800653a:	9301      	str	r3, [sp, #4]
 800653c:	9400      	str	r4, [sp, #0]
 800653e:	2300      	movs	r3, #0
 8006540:	9a07      	ldr	r2, [sp, #28]
 8006542:	490a      	ldr	r1, [pc, #40]	; (800656c <vTaskStartScheduler+0x4c>)
 8006544:	480a      	ldr	r0, [pc, #40]	; (8006570 <vTaskStartScheduler+0x50>)
 8006546:	f7ff ff91 	bl	800646c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800654a:	2800      	cmp	r0, #0
 800654c:	d00c      	beq.n	8006568 <vTaskStartScheduler+0x48>
		portDISABLE_INTERRUPTS();
 800654e:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8006550:	4b08      	ldr	r3, [pc, #32]	; (8006574 <vTaskStartScheduler+0x54>)
 8006552:	2201      	movs	r2, #1
 8006554:	4252      	negs	r2, r2
 8006556:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006558:	4b07      	ldr	r3, [pc, #28]	; (8006578 <vTaskStartScheduler+0x58>)
 800655a:	3202      	adds	r2, #2
 800655c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800655e:	4b07      	ldr	r3, [pc, #28]	; (800657c <vTaskStartScheduler+0x5c>)
 8006560:	2200      	movs	r2, #0
 8006562:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8006564:	f000 fbda 	bl	8006d1c <xPortStartScheduler>
}
 8006568:	b008      	add	sp, #32
 800656a:	bd10      	pop	{r4, pc}
 800656c:	0800e32c 	.word	0x0800e32c
 8006570:	080063d9 	.word	0x080063d9
 8006574:	20000ab4 	.word	0x20000ab4
 8006578:	20000ad0 	.word	0x20000ad0
 800657c:	20000afc 	.word	0x20000afc

08006580 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006580:	4a02      	ldr	r2, [pc, #8]	; (800658c <vTaskSuspendAll+0xc>)
 8006582:	6813      	ldr	r3, [r2, #0]
 8006584:	3301      	adds	r3, #1
 8006586:	6013      	str	r3, [r2, #0]
}
 8006588:	4770      	bx	lr
 800658a:	46c0      	nop			; (mov r8, r8)
 800658c:	20000a80 	.word	0x20000a80

08006590 <xTaskIncrementTick>:
{
 8006590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006592:	4b39      	ldr	r3, [pc, #228]	; (8006678 <xTaskIncrementTick+0xe8>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d161      	bne.n	800665e <xTaskIncrementTick+0xce>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800659a:	4b38      	ldr	r3, [pc, #224]	; (800667c <xTaskIncrementTick+0xec>)
 800659c:	681d      	ldr	r5, [r3, #0]
 800659e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80065a0:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065a2:	2d00      	cmp	r5, #0
 80065a4:	d112      	bne.n	80065cc <xTaskIncrementTick+0x3c>
			taskSWITCH_DELAYED_LISTS();
 80065a6:	4b36      	ldr	r3, [pc, #216]	; (8006680 <xTaskIncrementTick+0xf0>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <xTaskIncrementTick+0x24>
 80065b0:	b672      	cpsid	i
 80065b2:	e7fe      	b.n	80065b2 <xTaskIncrementTick+0x22>
 80065b4:	4a32      	ldr	r2, [pc, #200]	; (8006680 <xTaskIncrementTick+0xf0>)
 80065b6:	6811      	ldr	r1, [r2, #0]
 80065b8:	4b32      	ldr	r3, [pc, #200]	; (8006684 <xTaskIncrementTick+0xf4>)
 80065ba:	6818      	ldr	r0, [r3, #0]
 80065bc:	6010      	str	r0, [r2, #0]
 80065be:	6019      	str	r1, [r3, #0]
 80065c0:	4a31      	ldr	r2, [pc, #196]	; (8006688 <xTaskIncrementTick+0xf8>)
 80065c2:	6813      	ldr	r3, [r2, #0]
 80065c4:	3301      	adds	r3, #1
 80065c6:	6013      	str	r3, [r2, #0]
 80065c8:	f7ff fde6 	bl	8006198 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80065cc:	4b2f      	ldr	r3, [pc, #188]	; (800668c <xTaskIncrementTick+0xfc>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	42ab      	cmp	r3, r5
 80065d2:	d90c      	bls.n	80065ee <xTaskIncrementTick+0x5e>
BaseType_t xSwitchRequired = pdFALSE;
 80065d4:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80065d6:	4b2e      	ldr	r3, [pc, #184]	; (8006690 <xTaskIncrementTick+0x100>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065dc:	0093      	lsls	r3, r2, #2
 80065de:	189b      	adds	r3, r3, r2
 80065e0:	009a      	lsls	r2, r3, #2
 80065e2:	4b2c      	ldr	r3, [pc, #176]	; (8006694 <xTaskIncrementTick+0x104>)
 80065e4:	58d3      	ldr	r3, [r2, r3]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d93e      	bls.n	8006668 <xTaskIncrementTick+0xd8>
				xSwitchRequired = pdTRUE;
 80065ea:	2401      	movs	r4, #1
 80065ec:	e03c      	b.n	8006668 <xTaskIncrementTick+0xd8>
BaseType_t xSwitchRequired = pdFALSE;
 80065ee:	2400      	movs	r4, #0
 80065f0:	e016      	b.n	8006620 <xTaskIncrementTick+0x90>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065f2:	4b26      	ldr	r3, [pc, #152]	; (800668c <xTaskIncrementTick+0xfc>)
 80065f4:	2201      	movs	r2, #1
 80065f6:	4252      	negs	r2, r2
 80065f8:	601a      	str	r2, [r3, #0]
					break;
 80065fa:	e7ec      	b.n	80065d6 <xTaskIncrementTick+0x46>
						xNextTaskUnblockTime = xItemValue;
 80065fc:	4a23      	ldr	r2, [pc, #140]	; (800668c <xTaskIncrementTick+0xfc>)
 80065fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006600:	e7e9      	b.n	80065d6 <xTaskIncrementTick+0x46>
					prvAddTaskToReadyList( pxTCB );
 8006602:	0093      	lsls	r3, r2, #2
 8006604:	189b      	adds	r3, r3, r2
 8006606:	0098      	lsls	r0, r3, #2
 8006608:	4b22      	ldr	r3, [pc, #136]	; (8006694 <xTaskIncrementTick+0x104>)
 800660a:	18c0      	adds	r0, r0, r3
 800660c:	0039      	movs	r1, r7
 800660e:	f7ff fa9d 	bl	8005b4c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006612:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8006614:	4b1e      	ldr	r3, [pc, #120]	; (8006690 <xTaskIncrementTick+0x100>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661a:	429a      	cmp	r2, r3
 800661c:	d300      	bcc.n	8006620 <xTaskIncrementTick+0x90>
							xSwitchRequired = pdTRUE;
 800661e:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006620:	4b17      	ldr	r3, [pc, #92]	; (8006680 <xTaskIncrementTick+0xf0>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d0e3      	beq.n	80065f2 <xTaskIncrementTick+0x62>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800662a:	4b15      	ldr	r3, [pc, #84]	; (8006680 <xTaskIncrementTick+0xf0>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006632:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8006634:	429d      	cmp	r5, r3
 8006636:	d3e1      	bcc.n	80065fc <xTaskIncrementTick+0x6c>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006638:	1d37      	adds	r7, r6, #4
 800663a:	0038      	movs	r0, r7
 800663c:	f7ff faa8 	bl	8005b90 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006640:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <xTaskIncrementTick+0xbe>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006646:	0030      	movs	r0, r6
 8006648:	3018      	adds	r0, #24
 800664a:	f7ff faa1 	bl	8005b90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800664e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8006650:	4b11      	ldr	r3, [pc, #68]	; (8006698 <xTaskIncrementTick+0x108>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	429a      	cmp	r2, r3
 8006656:	d9d4      	bls.n	8006602 <xTaskIncrementTick+0x72>
 8006658:	4b0f      	ldr	r3, [pc, #60]	; (8006698 <xTaskIncrementTick+0x108>)
 800665a:	601a      	str	r2, [r3, #0]
 800665c:	e7d1      	b.n	8006602 <xTaskIncrementTick+0x72>
		++uxPendedTicks;
 800665e:	4a0f      	ldr	r2, [pc, #60]	; (800669c <xTaskIncrementTick+0x10c>)
 8006660:	6813      	ldr	r3, [r2, #0]
 8006662:	3301      	adds	r3, #1
 8006664:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8006666:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8006668:	4b0d      	ldr	r3, [pc, #52]	; (80066a0 <xTaskIncrementTick+0x110>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d000      	beq.n	8006672 <xTaskIncrementTick+0xe2>
			xSwitchRequired = pdTRUE;
 8006670:	2401      	movs	r4, #1
}
 8006672:	0020      	movs	r0, r4
 8006674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006676:	46c0      	nop			; (mov r8, r8)
 8006678:	20000a80 	.word	0x20000a80
 800667c:	20000afc 	.word	0x20000afc
 8006680:	200009e0 	.word	0x200009e0
 8006684:	200009e4 	.word	0x200009e4
 8006688:	20000ab8 	.word	0x20000ab8
 800668c:	20000ab4 	.word	0x20000ab4
 8006690:	200009dc 	.word	0x200009dc
 8006694:	200009e8 	.word	0x200009e8
 8006698:	20000a88 	.word	0x20000a88
 800669c:	20000a7c 	.word	0x20000a7c
 80066a0:	20000b00 	.word	0x20000b00

080066a4 <xTaskResumeAll>:
{
 80066a4:	b570      	push	{r4, r5, r6, lr}
	configASSERT( uxSchedulerSuspended );
 80066a6:	4b31      	ldr	r3, [pc, #196]	; (800676c <xTaskResumeAll+0xc8>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <xTaskResumeAll+0xe>
 80066ae:	b672      	cpsid	i
 80066b0:	e7fe      	b.n	80066b0 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 80066b2:	f000 fb5d 	bl	8006d70 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80066b6:	4b2d      	ldr	r3, [pc, #180]	; (800676c <xTaskResumeAll+0xc8>)
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	3a01      	subs	r2, #1
 80066bc:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d14d      	bne.n	8006760 <xTaskResumeAll+0xbc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80066c4:	4b2a      	ldr	r3, [pc, #168]	; (8006770 <xTaskResumeAll+0xcc>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <xTaskResumeAll+0x2c>
BaseType_t xAlreadyYielded = pdFALSE;
 80066cc:	2400      	movs	r4, #0
 80066ce:	e048      	b.n	8006762 <xTaskResumeAll+0xbe>
TCB_t *pxTCB = NULL;
 80066d0:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066d2:	4b28      	ldr	r3, [pc, #160]	; (8006774 <xTaskResumeAll+0xd0>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d023      	beq.n	8006722 <xTaskResumeAll+0x7e>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066da:	4b26      	ldr	r3, [pc, #152]	; (8006774 <xTaskResumeAll+0xd0>)
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066e0:	0020      	movs	r0, r4
 80066e2:	3018      	adds	r0, #24
 80066e4:	f7ff fa54 	bl	8005b90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066e8:	1d25      	adds	r5, r4, #4
 80066ea:	0028      	movs	r0, r5
 80066ec:	f7ff fa50 	bl	8005b90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80066f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80066f2:	4a21      	ldr	r2, [pc, #132]	; (8006778 <xTaskResumeAll+0xd4>)
 80066f4:	6812      	ldr	r2, [r2, #0]
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d901      	bls.n	80066fe <xTaskResumeAll+0x5a>
 80066fa:	4a1f      	ldr	r2, [pc, #124]	; (8006778 <xTaskResumeAll+0xd4>)
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	0098      	lsls	r0, r3, #2
 8006700:	18c0      	adds	r0, r0, r3
 8006702:	0080      	lsls	r0, r0, #2
 8006704:	4b1d      	ldr	r3, [pc, #116]	; (800677c <xTaskResumeAll+0xd8>)
 8006706:	18c0      	adds	r0, r0, r3
 8006708:	0029      	movs	r1, r5
 800670a:	f7ff fa1f 	bl	8005b4c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800670e:	4b1c      	ldr	r3, [pc, #112]	; (8006780 <xTaskResumeAll+0xdc>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006714:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006716:	429a      	cmp	r2, r3
 8006718:	d3db      	bcc.n	80066d2 <xTaskResumeAll+0x2e>
						xYieldPending = pdTRUE;
 800671a:	4b1a      	ldr	r3, [pc, #104]	; (8006784 <xTaskResumeAll+0xe0>)
 800671c:	2201      	movs	r2, #1
 800671e:	601a      	str	r2, [r3, #0]
 8006720:	e7d7      	b.n	80066d2 <xTaskResumeAll+0x2e>
				if( pxTCB != NULL )
 8006722:	2c00      	cmp	r4, #0
 8006724:	d001      	beq.n	800672a <xTaskResumeAll+0x86>
					prvResetNextTaskUnblockTime();
 8006726:	f7ff fd37 	bl	8006198 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800672a:	4b17      	ldr	r3, [pc, #92]	; (8006788 <xTaskResumeAll+0xe4>)
 800672c:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800672e:	2c00      	cmp	r4, #0
 8006730:	d10a      	bne.n	8006748 <xTaskResumeAll+0xa4>
				if( xYieldPending != pdFALSE )
 8006732:	4b14      	ldr	r3, [pc, #80]	; (8006784 <xTaskResumeAll+0xe0>)
 8006734:	681c      	ldr	r4, [r3, #0]
 8006736:	2c00      	cmp	r4, #0
 8006738:	d013      	beq.n	8006762 <xTaskResumeAll+0xbe>
					taskYIELD_IF_USING_PREEMPTION();
 800673a:	f000 fb0d 	bl	8006d58 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800673e:	2401      	movs	r4, #1
 8006740:	e00f      	b.n	8006762 <xTaskResumeAll+0xbe>
							--uxPendedCounts;
 8006742:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006744:	2c00      	cmp	r4, #0
 8006746:	d007      	beq.n	8006758 <xTaskResumeAll+0xb4>
							if( xTaskIncrementTick() != pdFALSE )
 8006748:	f7ff ff22 	bl	8006590 <xTaskIncrementTick>
 800674c:	2800      	cmp	r0, #0
 800674e:	d0f8      	beq.n	8006742 <xTaskResumeAll+0x9e>
								xYieldPending = pdTRUE;
 8006750:	4b0c      	ldr	r3, [pc, #48]	; (8006784 <xTaskResumeAll+0xe0>)
 8006752:	2201      	movs	r2, #1
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	e7f4      	b.n	8006742 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8006758:	4b0b      	ldr	r3, [pc, #44]	; (8006788 <xTaskResumeAll+0xe4>)
 800675a:	2200      	movs	r2, #0
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	e7e8      	b.n	8006732 <xTaskResumeAll+0x8e>
BaseType_t xAlreadyYielded = pdFALSE;
 8006760:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006762:	f000 fb11 	bl	8006d88 <vPortExitCritical>
}
 8006766:	0020      	movs	r0, r4
 8006768:	bd70      	pop	{r4, r5, r6, pc}
 800676a:	46c0      	nop			; (mov r8, r8)
 800676c:	20000a80 	.word	0x20000a80
 8006770:	20000a74 	.word	0x20000a74
 8006774:	20000abc 	.word	0x20000abc
 8006778:	20000a88 	.word	0x20000a88
 800677c:	200009e8 	.word	0x200009e8
 8006780:	200009dc 	.word	0x200009dc
 8006784:	20000b00 	.word	0x20000b00
 8006788:	20000a7c 	.word	0x20000a7c

0800678c <vTaskDelay>:
	{
 800678c:	b510      	push	{r4, lr}
 800678e:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006790:	d00f      	beq.n	80067b2 <vTaskDelay+0x26>
			configASSERT( uxSchedulerSuspended == 0 );
 8006792:	4b09      	ldr	r3, [pc, #36]	; (80067b8 <vTaskDelay+0x2c>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <vTaskDelay+0x12>
 800679a:	b672      	cpsid	i
 800679c:	e7fe      	b.n	800679c <vTaskDelay+0x10>
			vTaskSuspendAll();
 800679e:	f7ff feef 	bl	8006580 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80067a2:	2100      	movs	r1, #0
 80067a4:	0020      	movs	r0, r4
 80067a6:	f7ff fe23 	bl	80063f0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80067aa:	f7ff ff7b 	bl	80066a4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80067ae:	2800      	cmp	r0, #0
 80067b0:	d101      	bne.n	80067b6 <vTaskDelay+0x2a>
			portYIELD_WITHIN_API();
 80067b2:	f000 fad1 	bl	8006d58 <vPortYield>
	}
 80067b6:	bd10      	pop	{r4, pc}
 80067b8:	20000a80 	.word	0x20000a80

080067bc <vTaskSwitchContext>:
{
 80067bc:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80067be:	4b1c      	ldr	r3, [pc, #112]	; (8006830 <vTaskSwitchContext+0x74>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d003      	beq.n	80067ce <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 80067c6:	4b1b      	ldr	r3, [pc, #108]	; (8006834 <vTaskSwitchContext+0x78>)
 80067c8:	2201      	movs	r2, #1
 80067ca:	601a      	str	r2, [r3, #0]
}
 80067cc:	bd30      	pop	{r4, r5, pc}
		xYieldPending = pdFALSE;
 80067ce:	4b19      	ldr	r3, [pc, #100]	; (8006834 <vTaskSwitchContext+0x78>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067d4:	4b18      	ldr	r3, [pc, #96]	; (8006838 <vTaskSwitchContext+0x7c>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	009a      	lsls	r2, r3, #2
 80067da:	18d2      	adds	r2, r2, r3
 80067dc:	0091      	lsls	r1, r2, #2
 80067de:	4a17      	ldr	r2, [pc, #92]	; (800683c <vTaskSwitchContext+0x80>)
 80067e0:	588a      	ldr	r2, [r1, r2]
 80067e2:	2a00      	cmp	r2, #0
 80067e4:	d105      	bne.n	80067f2 <vTaskSwitchContext+0x36>
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <vTaskSwitchContext+0x32>
 80067ea:	3b01      	subs	r3, #1
 80067ec:	e7f4      	b.n	80067d8 <vTaskSwitchContext+0x1c>
 80067ee:	b672      	cpsid	i
 80067f0:	e7fe      	b.n	80067f0 <vTaskSwitchContext+0x34>
 80067f2:	4d12      	ldr	r5, [pc, #72]	; (800683c <vTaskSwitchContext+0x80>)
 80067f4:	0099      	lsls	r1, r3, #2
 80067f6:	18ca      	adds	r2, r1, r3
 80067f8:	0090      	lsls	r0, r2, #2
 80067fa:	1828      	adds	r0, r5, r0
 80067fc:	6842      	ldr	r2, [r0, #4]
 80067fe:	6854      	ldr	r4, [r2, #4]
 8006800:	6044      	str	r4, [r0, #4]
 8006802:	18c9      	adds	r1, r1, r3
 8006804:	008a      	lsls	r2, r1, #2
 8006806:	0011      	movs	r1, r2
 8006808:	3208      	adds	r2, #8
 800680a:	1952      	adds	r2, r2, r5
 800680c:	4294      	cmp	r4, r2
 800680e:	d00b      	beq.n	8006828 <vTaskSwitchContext+0x6c>
 8006810:	009a      	lsls	r2, r3, #2
 8006812:	18d2      	adds	r2, r2, r3
 8006814:	0091      	lsls	r1, r2, #2
 8006816:	4a09      	ldr	r2, [pc, #36]	; (800683c <vTaskSwitchContext+0x80>)
 8006818:	1852      	adds	r2, r2, r1
 800681a:	6852      	ldr	r2, [r2, #4]
 800681c:	68d1      	ldr	r1, [r2, #12]
 800681e:	4a08      	ldr	r2, [pc, #32]	; (8006840 <vTaskSwitchContext+0x84>)
 8006820:	6011      	str	r1, [r2, #0]
 8006822:	4a05      	ldr	r2, [pc, #20]	; (8006838 <vTaskSwitchContext+0x7c>)
 8006824:	6013      	str	r3, [r2, #0]
}
 8006826:	e7d1      	b.n	80067cc <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006828:	6860      	ldr	r0, [r4, #4]
 800682a:	186a      	adds	r2, r5, r1
 800682c:	6050      	str	r0, [r2, #4]
 800682e:	e7ef      	b.n	8006810 <vTaskSwitchContext+0x54>
 8006830:	20000a80 	.word	0x20000a80
 8006834:	20000b00 	.word	0x20000b00
 8006838:	20000a88 	.word	0x20000a88
 800683c:	200009e8 	.word	0x200009e8
 8006840:	200009dc 	.word	0x200009dc

08006844 <vTaskPlaceOnEventList>:
{
 8006844:	b510      	push	{r4, lr}
 8006846:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 8006848:	2800      	cmp	r0, #0
 800684a:	d009      	beq.n	8006860 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800684c:	4b05      	ldr	r3, [pc, #20]	; (8006864 <vTaskPlaceOnEventList+0x20>)
 800684e:	6819      	ldr	r1, [r3, #0]
 8006850:	3118      	adds	r1, #24
 8006852:	f7ff f986 	bl	8005b62 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006856:	2101      	movs	r1, #1
 8006858:	0020      	movs	r0, r4
 800685a:	f7ff fdc9 	bl	80063f0 <prvAddCurrentTaskToDelayedList>
}
 800685e:	bd10      	pop	{r4, pc}
	configASSERT( pxEventList );
 8006860:	b672      	cpsid	i
 8006862:	e7fe      	b.n	8006862 <vTaskPlaceOnEventList+0x1e>
 8006864:	200009dc 	.word	0x200009dc

08006868 <xTaskRemoveFromEventList>:
{
 8006868:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800686a:	68c3      	ldr	r3, [r0, #12]
 800686c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800686e:	2c00      	cmp	r4, #0
 8006870:	d026      	beq.n	80068c0 <xTaskRemoveFromEventList+0x58>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006872:	0025      	movs	r5, r4
 8006874:	3518      	adds	r5, #24
 8006876:	0028      	movs	r0, r5
 8006878:	f7ff f98a 	bl	8005b90 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800687c:	4b15      	ldr	r3, [pc, #84]	; (80068d4 <xTaskRemoveFromEventList+0x6c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d11f      	bne.n	80068c4 <xTaskRemoveFromEventList+0x5c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006884:	1d25      	adds	r5, r4, #4
 8006886:	0028      	movs	r0, r5
 8006888:	f7ff f982 	bl	8005b90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800688c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800688e:	4a12      	ldr	r2, [pc, #72]	; (80068d8 <xTaskRemoveFromEventList+0x70>)
 8006890:	6812      	ldr	r2, [r2, #0]
 8006892:	4293      	cmp	r3, r2
 8006894:	d901      	bls.n	800689a <xTaskRemoveFromEventList+0x32>
 8006896:	4a10      	ldr	r2, [pc, #64]	; (80068d8 <xTaskRemoveFromEventList+0x70>)
 8006898:	6013      	str	r3, [r2, #0]
 800689a:	0098      	lsls	r0, r3, #2
 800689c:	18c0      	adds	r0, r0, r3
 800689e:	0080      	lsls	r0, r0, #2
 80068a0:	4b0e      	ldr	r3, [pc, #56]	; (80068dc <xTaskRemoveFromEventList+0x74>)
 80068a2:	18c0      	adds	r0, r0, r3
 80068a4:	0029      	movs	r1, r5
 80068a6:	f7ff f951 	bl	8005b4c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80068ac:	4b0c      	ldr	r3, [pc, #48]	; (80068e0 <xTaskRemoveFromEventList+0x78>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d90b      	bls.n	80068ce <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 80068b6:	4b0b      	ldr	r3, [pc, #44]	; (80068e4 <xTaskRemoveFromEventList+0x7c>)
 80068b8:	2201      	movs	r2, #1
 80068ba:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 80068bc:	2001      	movs	r0, #1
 80068be:	e007      	b.n	80068d0 <xTaskRemoveFromEventList+0x68>
	configASSERT( pxUnblockedTCB );
 80068c0:	b672      	cpsid	i
 80068c2:	e7fe      	b.n	80068c2 <xTaskRemoveFromEventList+0x5a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80068c4:	0029      	movs	r1, r5
 80068c6:	4808      	ldr	r0, [pc, #32]	; (80068e8 <xTaskRemoveFromEventList+0x80>)
 80068c8:	f7ff f940 	bl	8005b4c <vListInsertEnd>
 80068cc:	e7ed      	b.n	80068aa <xTaskRemoveFromEventList+0x42>
		xReturn = pdFALSE;
 80068ce:	2000      	movs	r0, #0
}
 80068d0:	bd70      	pop	{r4, r5, r6, pc}
 80068d2:	46c0      	nop			; (mov r8, r8)
 80068d4:	20000a80 	.word	0x20000a80
 80068d8:	20000a88 	.word	0x20000a88
 80068dc:	200009e8 	.word	0x200009e8
 80068e0:	200009dc 	.word	0x200009dc
 80068e4:	20000b00 	.word	0x20000b00
 80068e8:	20000abc 	.word	0x20000abc

080068ec <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80068ec:	4b03      	ldr	r3, [pc, #12]	; (80068fc <vTaskInternalSetTimeOutState+0x10>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80068f2:	4b03      	ldr	r3, [pc, #12]	; (8006900 <vTaskInternalSetTimeOutState+0x14>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6043      	str	r3, [r0, #4]
}
 80068f8:	4770      	bx	lr
 80068fa:	46c0      	nop			; (mov r8, r8)
 80068fc:	20000ab8 	.word	0x20000ab8
 8006900:	20000afc 	.word	0x20000afc

08006904 <xTaskCheckForTimeOut>:
{
 8006904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006906:	0005      	movs	r5, r0
 8006908:	000c      	movs	r4, r1
	configASSERT( pxTimeOut );
 800690a:	2800      	cmp	r0, #0
 800690c:	d017      	beq.n	800693e <xTaskCheckForTimeOut+0x3a>
	configASSERT( pxTicksToWait );
 800690e:	2900      	cmp	r1, #0
 8006910:	d017      	beq.n	8006942 <xTaskCheckForTimeOut+0x3e>
	taskENTER_CRITICAL();
 8006912:	f000 fa2d 	bl	8006d70 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8006916:	4b13      	ldr	r3, [pc, #76]	; (8006964 <xTaskCheckForTimeOut+0x60>)
 8006918:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800691a:	686b      	ldr	r3, [r5, #4]
 800691c:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800691e:	6822      	ldr	r2, [r4, #0]
 8006920:	1c56      	adds	r6, r2, #1
 8006922:	d018      	beq.n	8006956 <xTaskCheckForTimeOut+0x52>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006924:	4e10      	ldr	r6, [pc, #64]	; (8006968 <xTaskCheckForTimeOut+0x64>)
 8006926:	6836      	ldr	r6, [r6, #0]
 8006928:	682f      	ldr	r7, [r5, #0]
 800692a:	42b7      	cmp	r7, r6
 800692c:	d001      	beq.n	8006932 <xTaskCheckForTimeOut+0x2e>
 800692e:	428b      	cmp	r3, r1
 8006930:	d916      	bls.n	8006960 <xTaskCheckForTimeOut+0x5c>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006932:	4282      	cmp	r2, r0
 8006934:	d807      	bhi.n	8006946 <xTaskCheckForTimeOut+0x42>
			*pxTicksToWait = 0;
 8006936:	2300      	movs	r3, #0
 8006938:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800693a:	2401      	movs	r4, #1
 800693c:	e00c      	b.n	8006958 <xTaskCheckForTimeOut+0x54>
	configASSERT( pxTimeOut );
 800693e:	b672      	cpsid	i
 8006940:	e7fe      	b.n	8006940 <xTaskCheckForTimeOut+0x3c>
	configASSERT( pxTicksToWait );
 8006942:	b672      	cpsid	i
 8006944:	e7fe      	b.n	8006944 <xTaskCheckForTimeOut+0x40>
			*pxTicksToWait -= xElapsedTime;
 8006946:	1a5b      	subs	r3, r3, r1
 8006948:	189b      	adds	r3, r3, r2
 800694a:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800694c:	0028      	movs	r0, r5
 800694e:	f7ff ffcd 	bl	80068ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006952:	2400      	movs	r4, #0
 8006954:	e000      	b.n	8006958 <xTaskCheckForTimeOut+0x54>
				xReturn = pdFALSE;
 8006956:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006958:	f000 fa16 	bl	8006d88 <vPortExitCritical>
}
 800695c:	0020      	movs	r0, r4
 800695e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8006960:	2401      	movs	r4, #1
 8006962:	e7f9      	b.n	8006958 <xTaskCheckForTimeOut+0x54>
 8006964:	20000afc 	.word	0x20000afc
 8006968:	20000ab8 	.word	0x20000ab8

0800696c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800696c:	4b01      	ldr	r3, [pc, #4]	; (8006974 <vTaskMissedYield+0x8>)
 800696e:	2201      	movs	r2, #1
 8006970:	601a      	str	r2, [r3, #0]
}
 8006972:	4770      	bx	lr
 8006974:	20000b00 	.word	0x20000b00

08006978 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006978:	4b06      	ldr	r3, [pc, #24]	; (8006994 <xTaskGetSchedulerState+0x1c>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d007      	beq.n	8006990 <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006980:	4b05      	ldr	r3, [pc, #20]	; (8006998 <xTaskGetSchedulerState+0x20>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 8006988:	2000      	movs	r0, #0
		return xReturn;
 800698a:	e002      	b.n	8006992 <xTaskGetSchedulerState+0x1a>
				xReturn = taskSCHEDULER_RUNNING;
 800698c:	2002      	movs	r0, #2
 800698e:	e000      	b.n	8006992 <xTaskGetSchedulerState+0x1a>
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006990:	2001      	movs	r0, #1
	}
 8006992:	4770      	bx	lr
 8006994:	20000ad0 	.word	0x20000ad0
 8006998:	20000a80 	.word	0x20000a80

0800699c <xTaskPriorityDisinherit>:
	{
 800699c:	b570      	push	{r4, r5, r6, lr}
 800699e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 80069a0:	d02d      	beq.n	80069fe <xTaskPriorityDisinherit+0x62>
			configASSERT( pxTCB == pxCurrentTCB );
 80069a2:	4b19      	ldr	r3, [pc, #100]	; (8006a08 <xTaskPriorityDisinherit+0x6c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4283      	cmp	r3, r0
 80069a8:	d001      	beq.n	80069ae <xTaskPriorityDisinherit+0x12>
 80069aa:	b672      	cpsid	i
 80069ac:	e7fe      	b.n	80069ac <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 80069ae:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <xTaskPriorityDisinherit+0x1c>
 80069b4:	b672      	cpsid	i
 80069b6:	e7fe      	b.n	80069b6 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 80069b8:	3b01      	subs	r3, #1
 80069ba:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80069bc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80069be:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80069c0:	428a      	cmp	r2, r1
 80069c2:	d01e      	beq.n	8006a02 <xTaskPriorityDisinherit+0x66>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <xTaskPriorityDisinherit+0x30>
	BaseType_t xReturn = pdFALSE;
 80069c8:	2000      	movs	r0, #0
		return xReturn;
 80069ca:	e019      	b.n	8006a00 <xTaskPriorityDisinherit+0x64>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069cc:	1d05      	adds	r5, r0, #4
 80069ce:	0028      	movs	r0, r5
 80069d0:	f7ff f8de 	bl	8005b90 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80069d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80069d6:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069d8:	2207      	movs	r2, #7
 80069da:	1ad2      	subs	r2, r2, r3
 80069dc:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80069de:	4a0b      	ldr	r2, [pc, #44]	; (8006a0c <xTaskPriorityDisinherit+0x70>)
 80069e0:	6812      	ldr	r2, [r2, #0]
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d901      	bls.n	80069ea <xTaskPriorityDisinherit+0x4e>
 80069e6:	4a09      	ldr	r2, [pc, #36]	; (8006a0c <xTaskPriorityDisinherit+0x70>)
 80069e8:	6013      	str	r3, [r2, #0]
 80069ea:	0098      	lsls	r0, r3, #2
 80069ec:	18c0      	adds	r0, r0, r3
 80069ee:	0080      	lsls	r0, r0, #2
 80069f0:	4b07      	ldr	r3, [pc, #28]	; (8006a10 <xTaskPriorityDisinherit+0x74>)
 80069f2:	18c0      	adds	r0, r0, r3
 80069f4:	0029      	movs	r1, r5
 80069f6:	f7ff f8a9 	bl	8005b4c <vListInsertEnd>
					xReturn = pdTRUE;
 80069fa:	2001      	movs	r0, #1
 80069fc:	e000      	b.n	8006a00 <xTaskPriorityDisinherit+0x64>
	BaseType_t xReturn = pdFALSE;
 80069fe:	2000      	movs	r0, #0
	}
 8006a00:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 8006a02:	2000      	movs	r0, #0
 8006a04:	e7fc      	b.n	8006a00 <xTaskPriorityDisinherit+0x64>
 8006a06:	46c0      	nop			; (mov r8, r8)
 8006a08:	200009dc 	.word	0x200009dc
 8006a0c:	20000a88 	.word	0x20000a88
 8006a10:	200009e8 	.word	0x200009e8

08006a14 <xTaskNotifyWait>:
	{
 8006a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a16:	0006      	movs	r6, r0
 8006a18:	000f      	movs	r7, r1
 8006a1a:	0014      	movs	r4, r2
 8006a1c:	001d      	movs	r5, r3
		taskENTER_CRITICAL();
 8006a1e:	f000 f9a7 	bl	8006d70 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006a22:	4b1c      	ldr	r3, [pc, #112]	; (8006a94 <xTaskNotifyWait+0x80>)
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	2350      	movs	r3, #80	; 0x50
 8006a28:	5cd3      	ldrb	r3, [r2, r3]
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d00a      	beq.n	8006a44 <xTaskNotifyWait+0x30>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006a2e:	4a19      	ldr	r2, [pc, #100]	; (8006a94 <xTaskNotifyWait+0x80>)
 8006a30:	6811      	ldr	r1, [r2, #0]
 8006a32:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8006a34:	43b3      	bics	r3, r6
 8006a36:	64cb      	str	r3, [r1, #76]	; 0x4c
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006a38:	6812      	ldr	r2, [r2, #0]
 8006a3a:	2350      	movs	r3, #80	; 0x50
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	54d1      	strb	r1, [r2, r3]
				if( xTicksToWait > ( TickType_t ) 0 )
 8006a40:	2d00      	cmp	r5, #0
 8006a42:	d119      	bne.n	8006a78 <xTaskNotifyWait+0x64>
		taskEXIT_CRITICAL();
 8006a44:	f000 f9a0 	bl	8006d88 <vPortExitCritical>
		taskENTER_CRITICAL();
 8006a48:	f000 f992 	bl	8006d70 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 8006a4c:	2c00      	cmp	r4, #0
 8006a4e:	d003      	beq.n	8006a58 <xTaskNotifyWait+0x44>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006a50:	4b10      	ldr	r3, [pc, #64]	; (8006a94 <xTaskNotifyWait+0x80>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a56:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006a58:	4b0e      	ldr	r3, [pc, #56]	; (8006a94 <xTaskNotifyWait+0x80>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	2350      	movs	r3, #80	; 0x50
 8006a5e:	5cd3      	ldrb	r3, [r2, r3]
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d00f      	beq.n	8006a84 <xTaskNotifyWait+0x70>
				xReturn = pdFALSE;
 8006a64:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a66:	4b0b      	ldr	r3, [pc, #44]	; (8006a94 <xTaskNotifyWait+0x80>)
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	2350      	movs	r3, #80	; 0x50
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	54d1      	strb	r1, [r2, r3]
		taskEXIT_CRITICAL();
 8006a70:	f000 f98a 	bl	8006d88 <vPortExitCritical>
	}
 8006a74:	0020      	movs	r0, r4
 8006a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a78:	0028      	movs	r0, r5
 8006a7a:	f7ff fcb9 	bl	80063f0 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8006a7e:	f000 f96b 	bl	8006d58 <vPortYield>
 8006a82:	e7df      	b.n	8006a44 <xTaskNotifyWait+0x30>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8006a84:	4b03      	ldr	r3, [pc, #12]	; (8006a94 <xTaskNotifyWait+0x80>)
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8006a8a:	43bb      	bics	r3, r7
 8006a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
				xReturn = pdTRUE;
 8006a8e:	2401      	movs	r4, #1
 8006a90:	e7e9      	b.n	8006a66 <xTaskNotifyWait+0x52>
 8006a92:	46c0      	nop			; (mov r8, r8)
 8006a94:	200009dc 	.word	0x200009dc

08006a98 <xTaskGenericNotify>:
	{
 8006a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9a:	0004      	movs	r4, r0
 8006a9c:	000e      	movs	r6, r1
 8006a9e:	0015      	movs	r5, r2
 8006aa0:	001f      	movs	r7, r3
		configASSERT( xTaskToNotify );
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	d010      	beq.n	8006ac8 <xTaskGenericNotify+0x30>
		taskENTER_CRITICAL();
 8006aa6:	f000 f963 	bl	8006d70 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8006aaa:	2f00      	cmp	r7, #0
 8006aac:	d001      	beq.n	8006ab2 <xTaskGenericNotify+0x1a>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006aae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006ab0:	603b      	str	r3, [r7, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006ab2:	2250      	movs	r2, #80	; 0x50
 8006ab4:	5ca3      	ldrb	r3, [r4, r2]
 8006ab6:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006ab8:	2102      	movs	r1, #2
 8006aba:	54a1      	strb	r1, [r4, r2]
			switch( eAction )
 8006abc:	2d04      	cmp	r5, #4
 8006abe:	d817      	bhi.n	8006af0 <xTaskGenericNotify+0x58>
 8006ac0:	00ad      	lsls	r5, r5, #2
 8006ac2:	4a24      	ldr	r2, [pc, #144]	; (8006b54 <xTaskGenericNotify+0xbc>)
 8006ac4:	5952      	ldr	r2, [r2, r5]
 8006ac6:	4697      	mov	pc, r2
		configASSERT( xTaskToNotify );
 8006ac8:	b672      	cpsid	i
 8006aca:	e7fe      	b.n	8006aca <xTaskGenericNotify+0x32>
					pxTCB->ulNotifiedValue |= ulValue;
 8006acc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006ace:	4316      	orrs	r6, r2
 8006ad0:	64e6      	str	r6, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 8006ad2:	2501      	movs	r5, #1
					break;
 8006ad4:	e012      	b.n	8006afc <xTaskGenericNotify+0x64>
					( pxTCB->ulNotifiedValue )++;
 8006ad6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006ad8:	3201      	adds	r2, #1
 8006ada:	64e2      	str	r2, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 8006adc:	2501      	movs	r5, #1
					break;
 8006ade:	e00d      	b.n	8006afc <xTaskGenericNotify+0x64>
					pxTCB->ulNotifiedValue = ulValue;
 8006ae0:	64e6      	str	r6, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 8006ae2:	2501      	movs	r5, #1
					break;
 8006ae4:	e00a      	b.n	8006afc <xTaskGenericNotify+0x64>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d00e      	beq.n	8006b08 <xTaskGenericNotify+0x70>
						pxTCB->ulNotifiedValue = ulValue;
 8006aea:	64e6      	str	r6, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 8006aec:	2501      	movs	r5, #1
 8006aee:	e005      	b.n	8006afc <xTaskGenericNotify+0x64>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006af0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006af2:	3201      	adds	r2, #1
 8006af4:	d00a      	beq.n	8006b0c <xTaskGenericNotify+0x74>
 8006af6:	b672      	cpsid	i
 8006af8:	e7fe      	b.n	8006af8 <xTaskGenericNotify+0x60>
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006afa:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d007      	beq.n	8006b10 <xTaskGenericNotify+0x78>
		taskEXIT_CRITICAL();
 8006b00:	f000 f942 	bl	8006d88 <vPortExitCritical>
	}
 8006b04:	0028      	movs	r0, r5
 8006b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xReturn = pdFAIL;
 8006b08:	2500      	movs	r5, #0
 8006b0a:	e7f7      	b.n	8006afc <xTaskGenericNotify+0x64>
	BaseType_t xReturn = pdPASS;
 8006b0c:	2501      	movs	r5, #1
 8006b0e:	e7f5      	b.n	8006afc <xTaskGenericNotify+0x64>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b10:	1d26      	adds	r6, r4, #4
 8006b12:	0030      	movs	r0, r6
 8006b14:	f7ff f83c 	bl	8005b90 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006b18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006b1a:	4a0f      	ldr	r2, [pc, #60]	; (8006b58 <xTaskGenericNotify+0xc0>)
 8006b1c:	6812      	ldr	r2, [r2, #0]
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d901      	bls.n	8006b26 <xTaskGenericNotify+0x8e>
 8006b22:	4a0d      	ldr	r2, [pc, #52]	; (8006b58 <xTaskGenericNotify+0xc0>)
 8006b24:	6013      	str	r3, [r2, #0]
 8006b26:	0098      	lsls	r0, r3, #2
 8006b28:	18c0      	adds	r0, r0, r3
 8006b2a:	0080      	lsls	r0, r0, #2
 8006b2c:	4b0b      	ldr	r3, [pc, #44]	; (8006b5c <xTaskGenericNotify+0xc4>)
 8006b2e:	18c0      	adds	r0, r0, r3
 8006b30:	0031      	movs	r1, r6
 8006b32:	f7ff f80b 	bl	8005b4c <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006b36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <xTaskGenericNotify+0xa8>
 8006b3c:	b672      	cpsid	i
 8006b3e:	e7fe      	b.n	8006b3e <xTaskGenericNotify+0xa6>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b40:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006b42:	4b07      	ldr	r3, [pc, #28]	; (8006b60 <xTaskGenericNotify+0xc8>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d9d9      	bls.n	8006b00 <xTaskGenericNotify+0x68>
					taskYIELD_IF_USING_PREEMPTION();
 8006b4c:	f000 f904 	bl	8006d58 <vPortYield>
 8006b50:	e7d6      	b.n	8006b00 <xTaskGenericNotify+0x68>
 8006b52:	46c0      	nop			; (mov r8, r8)
 8006b54:	0800e334 	.word	0x0800e334
 8006b58:	20000a88 	.word	0x20000a88
 8006b5c:	200009e8 	.word	0x200009e8
 8006b60:	200009dc 	.word	0x200009dc

08006b64 <xTaskGenericNotifyFromISR>:
	{
 8006b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b66:	46c6      	mov	lr, r8
 8006b68:	b500      	push	{lr}
 8006b6a:	0004      	movs	r4, r0
 8006b6c:	000f      	movs	r7, r1
 8006b6e:	0015      	movs	r5, r2
 8006b70:	001e      	movs	r6, r3
		configASSERT( xTaskToNotify );
 8006b72:	2800      	cmp	r0, #0
 8006b74:	d011      	beq.n	8006b9a <xTaskGenericNotifyFromISR+0x36>
		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b76:	f000 f917 	bl	8006da8 <ulSetInterruptMaskFromISR>
 8006b7a:	4680      	mov	r8, r0
			if( pulPreviousNotificationValue != NULL )
 8006b7c:	2e00      	cmp	r6, #0
 8006b7e:	d001      	beq.n	8006b84 <xTaskGenericNotifyFromISR+0x20>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006b80:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006b82:	6033      	str	r3, [r6, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006b84:	2250      	movs	r2, #80	; 0x50
 8006b86:	5ca3      	ldrb	r3, [r4, r2]
 8006b88:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006b8a:	2102      	movs	r1, #2
 8006b8c:	54a1      	strb	r1, [r4, r2]
			switch( eAction )
 8006b8e:	2d04      	cmp	r5, #4
 8006b90:	d817      	bhi.n	8006bc2 <xTaskGenericNotifyFromISR+0x5e>
 8006b92:	00ad      	lsls	r5, r5, #2
 8006b94:	4a2d      	ldr	r2, [pc, #180]	; (8006c4c <xTaskGenericNotifyFromISR+0xe8>)
 8006b96:	5952      	ldr	r2, [r2, r5]
 8006b98:	4697      	mov	pc, r2
		configASSERT( xTaskToNotify );
 8006b9a:	b672      	cpsid	i
 8006b9c:	e7fe      	b.n	8006b9c <xTaskGenericNotifyFromISR+0x38>
					pxTCB->ulNotifiedValue |= ulValue;
 8006b9e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006ba0:	4339      	orrs	r1, r7
 8006ba2:	64e1      	str	r1, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 8006ba4:	2501      	movs	r5, #1
					break;
 8006ba6:	e012      	b.n	8006bce <xTaskGenericNotifyFromISR+0x6a>
					( pxTCB->ulNotifiedValue )++;
 8006ba8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006baa:	3201      	adds	r2, #1
 8006bac:	64e2      	str	r2, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 8006bae:	2501      	movs	r5, #1
					break;
 8006bb0:	e00d      	b.n	8006bce <xTaskGenericNotifyFromISR+0x6a>
					pxTCB->ulNotifiedValue = ulValue;
 8006bb2:	64e7      	str	r7, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 8006bb4:	2501      	movs	r5, #1
					break;
 8006bb6:	e00a      	b.n	8006bce <xTaskGenericNotifyFromISR+0x6a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d00f      	beq.n	8006bdc <xTaskGenericNotifyFromISR+0x78>
						pxTCB->ulNotifiedValue = ulValue;
 8006bbc:	64e7      	str	r7, [r4, #76]	; 0x4c
	BaseType_t xReturn = pdPASS;
 8006bbe:	2501      	movs	r5, #1
 8006bc0:	e005      	b.n	8006bce <xTaskGenericNotifyFromISR+0x6a>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006bc2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006bc4:	3201      	adds	r2, #1
 8006bc6:	d00b      	beq.n	8006be0 <xTaskGenericNotifyFromISR+0x7c>
 8006bc8:	b672      	cpsid	i
 8006bca:	e7fe      	b.n	8006bca <xTaskGenericNotifyFromISR+0x66>
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006bcc:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d12e      	bne.n	8006c30 <xTaskGenericNotifyFromISR+0xcc>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006bd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d005      	beq.n	8006be4 <xTaskGenericNotifyFromISR+0x80>
 8006bd8:	b672      	cpsid	i
 8006bda:	e7fe      	b.n	8006bda <xTaskGenericNotifyFromISR+0x76>
						xReturn = pdFAIL;
 8006bdc:	2500      	movs	r5, #0
 8006bde:	e7f6      	b.n	8006bce <xTaskGenericNotifyFromISR+0x6a>
	BaseType_t xReturn = pdPASS;
 8006be0:	2501      	movs	r5, #1
 8006be2:	e7f4      	b.n	8006bce <xTaskGenericNotifyFromISR+0x6a>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006be4:	4b1a      	ldr	r3, [pc, #104]	; (8006c50 <xTaskGenericNotifyFromISR+0xec>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d128      	bne.n	8006c3e <xTaskGenericNotifyFromISR+0xda>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bec:	1d27      	adds	r7, r4, #4
 8006bee:	0038      	movs	r0, r7
 8006bf0:	f7fe ffce 	bl	8005b90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006bf4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006bf6:	4a17      	ldr	r2, [pc, #92]	; (8006c54 <xTaskGenericNotifyFromISR+0xf0>)
 8006bf8:	6812      	ldr	r2, [r2, #0]
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d901      	bls.n	8006c02 <xTaskGenericNotifyFromISR+0x9e>
 8006bfe:	4a15      	ldr	r2, [pc, #84]	; (8006c54 <xTaskGenericNotifyFromISR+0xf0>)
 8006c00:	6013      	str	r3, [r2, #0]
 8006c02:	0098      	lsls	r0, r3, #2
 8006c04:	18c0      	adds	r0, r0, r3
 8006c06:	0080      	lsls	r0, r0, #2
 8006c08:	4b13      	ldr	r3, [pc, #76]	; (8006c58 <xTaskGenericNotifyFromISR+0xf4>)
 8006c0a:	18c0      	adds	r0, r0, r3
 8006c0c:	0039      	movs	r1, r7
 8006c0e:	f7fe ff9d 	bl	8005b4c <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006c14:	4b11      	ldr	r3, [pc, #68]	; (8006c5c <xTaskGenericNotifyFromISR+0xf8>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d908      	bls.n	8006c30 <xTaskGenericNotifyFromISR+0xcc>
					if( pxHigherPriorityTaskWoken != NULL )
 8006c1e:	9b06      	ldr	r3, [sp, #24]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d002      	beq.n	8006c2a <xTaskGenericNotifyFromISR+0xc6>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006c24:	2301      	movs	r3, #1
 8006c26:	9a06      	ldr	r2, [sp, #24]
 8006c28:	6013      	str	r3, [r2, #0]
					xYieldPending = pdTRUE;
 8006c2a:	4b0d      	ldr	r3, [pc, #52]	; (8006c60 <xTaskGenericNotifyFromISR+0xfc>)
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	601a      	str	r2, [r3, #0]
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8006c30:	4640      	mov	r0, r8
 8006c32:	f000 f8bd 	bl	8006db0 <vClearInterruptMaskFromISR>
	}
 8006c36:	0028      	movs	r0, r5
 8006c38:	bc80      	pop	{r7}
 8006c3a:	46b8      	mov	r8, r7
 8006c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006c3e:	0021      	movs	r1, r4
 8006c40:	3118      	adds	r1, #24
 8006c42:	4808      	ldr	r0, [pc, #32]	; (8006c64 <xTaskGenericNotifyFromISR+0x100>)
 8006c44:	f7fe ff82 	bl	8005b4c <vListInsertEnd>
 8006c48:	e7e3      	b.n	8006c12 <xTaskGenericNotifyFromISR+0xae>
 8006c4a:	46c0      	nop			; (mov r8, r8)
 8006c4c:	0800e348 	.word	0x0800e348
 8006c50:	20000a80 	.word	0x20000a80
 8006c54:	20000a88 	.word	0x20000a88
 8006c58:	200009e8 	.word	0x200009e8
 8006c5c:	200009dc 	.word	0x200009dc
 8006c60:	20000b00 	.word	0x20000b00
 8006c64:	20000abc 	.word	0x20000abc

08006c68 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c68:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c6e:	4b06      	ldr	r3, [pc, #24]	; (8006c88 <prvTaskExitError+0x20>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	3301      	adds	r3, #1
 8006c74:	d001      	beq.n	8006c7a <prvTaskExitError+0x12>
 8006c76:	b672      	cpsid	i
 8006c78:	e7fe      	b.n	8006c78 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
 8006c7a:	b672      	cpsid	i
	while( ulDummy == 0 )
 8006c7c:	9b01      	ldr	r3, [sp, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d0fc      	beq.n	8006c7c <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c82:	b002      	add	sp, #8
 8006c84:	4770      	bx	lr
 8006c86:	46c0      	nop			; (mov r8, r8)
 8006c88:	20000008 	.word	0x20000008
 8006c8c:	00000000 	.word	0x00000000

08006c90 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8006c90:	4a0b      	ldr	r2, [pc, #44]	; (8006cc0 <pxCurrentTCBConst2>)
 8006c92:	6813      	ldr	r3, [r2, #0]
 8006c94:	6818      	ldr	r0, [r3, #0]
 8006c96:	3020      	adds	r0, #32
 8006c98:	f380 8809 	msr	PSP, r0
 8006c9c:	2002      	movs	r0, #2
 8006c9e:	f380 8814 	msr	CONTROL, r0
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8006ca8:	46ae      	mov	lr, r5
 8006caa:	bc08      	pop	{r3}
 8006cac:	bc04      	pop	{r2}
 8006cae:	b662      	cpsie	i
 8006cb0:	4718      	bx	r3
 8006cb2:	46c0      	nop			; (mov r8, r8)
 8006cb4:	46c0      	nop			; (mov r8, r8)
 8006cb6:	46c0      	nop			; (mov r8, r8)
 8006cb8:	46c0      	nop			; (mov r8, r8)
 8006cba:	46c0      	nop			; (mov r8, r8)
 8006cbc:	46c0      	nop			; (mov r8, r8)
 8006cbe:	46c0      	nop			; (mov r8, r8)

08006cc0 <pxCurrentTCBConst2>:
 8006cc0:	200009dc 	.word	0x200009dc

08006cc4 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8006cc4:	b510      	push	{r4, lr}
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8006cc6:	4c08      	ldr	r4, [pc, #32]	; (8006ce8 <prvSetupTimerInterrupt+0x24>)
 8006cc8:	2300      	movs	r3, #0
 8006cca:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8006ccc:	4a07      	ldr	r2, [pc, #28]	; (8006cec <prvSetupTimerInterrupt+0x28>)
 8006cce:	6013      	str	r3, [r2, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006cd0:	4b07      	ldr	r3, [pc, #28]	; (8006cf0 <prvSetupTimerInterrupt+0x2c>)
 8006cd2:	6818      	ldr	r0, [r3, #0]
 8006cd4:	21fa      	movs	r1, #250	; 0xfa
 8006cd6:	0089      	lsls	r1, r1, #2
 8006cd8:	f7f9 fa32 	bl	8000140 <__udivsi3>
 8006cdc:	3801      	subs	r0, #1
 8006cde:	4b05      	ldr	r3, [pc, #20]	; (8006cf4 <prvSetupTimerInterrupt+0x30>)
 8006ce0:	6018      	str	r0, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8006ce2:	2307      	movs	r3, #7
 8006ce4:	6023      	str	r3, [r4, #0]
}
 8006ce6:	bd10      	pop	{r4, pc}
 8006ce8:	e000e010 	.word	0xe000e010
 8006cec:	e000e018 	.word	0xe000e018
 8006cf0:	2000000c 	.word	0x2000000c
 8006cf4:	e000e014 	.word	0xe000e014

08006cf8 <pxPortInitialiseStack>:
{
 8006cf8:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006cfa:	1f03      	subs	r3, r0, #4
 8006cfc:	2480      	movs	r4, #128	; 0x80
 8006cfe:	0464      	lsls	r4, r4, #17
 8006d00:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8006d02:	3b04      	subs	r3, #4
 8006d04:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d06:	3b04      	subs	r3, #4
 8006d08:	4902      	ldr	r1, [pc, #8]	; (8006d14 <pxPortInitialiseStack+0x1c>)
 8006d0a:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d0c:	3b14      	subs	r3, #20
 8006d0e:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8006d10:	3840      	subs	r0, #64	; 0x40
}
 8006d12:	bd10      	pop	{r4, pc}
 8006d14:	08006c69 	.word	0x08006c69

08006d18 <SVC_Handler>:
}
 8006d18:	4770      	bx	lr
	...

08006d1c <xPortStartScheduler>:
{
 8006d1c:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8006d1e:	4b0c      	ldr	r3, [pc, #48]	; (8006d50 <xPortStartScheduler+0x34>)
 8006d20:	6819      	ldr	r1, [r3, #0]
 8006d22:	22ff      	movs	r2, #255	; 0xff
 8006d24:	0412      	lsls	r2, r2, #16
 8006d26:	430a      	orrs	r2, r1
 8006d28:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8006d2a:	6819      	ldr	r1, [r3, #0]
 8006d2c:	22ff      	movs	r2, #255	; 0xff
 8006d2e:	0612      	lsls	r2, r2, #24
 8006d30:	430a      	orrs	r2, r1
 8006d32:	601a      	str	r2, [r3, #0]
	prvSetupTimerInterrupt();
 8006d34:	f7ff ffc6 	bl	8006cc4 <prvSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006d38:	4b06      	ldr	r3, [pc, #24]	; (8006d54 <xPortStartScheduler+0x38>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 8006d3e:	f7ff ffa7 	bl	8006c90 <vPortStartFirstTask>
	vTaskSwitchContext();
 8006d42:	f7ff fd3b 	bl	80067bc <vTaskSwitchContext>
	prvTaskExitError();
 8006d46:	f7ff ff8f 	bl	8006c68 <prvTaskExitError>
}
 8006d4a:	2000      	movs	r0, #0
 8006d4c:	bd10      	pop	{r4, pc}
 8006d4e:	46c0      	nop			; (mov r8, r8)
 8006d50:	e000ed20 	.word	0xe000ed20
 8006d54:	20000008 	.word	0x20000008

08006d58 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8006d58:	4b04      	ldr	r3, [pc, #16]	; (8006d6c <vPortYield+0x14>)
 8006d5a:	2280      	movs	r2, #128	; 0x80
 8006d5c:	0552      	lsls	r2, r2, #21
 8006d5e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8006d60:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006d64:	f3bf 8f6f 	isb	sy
}
 8006d68:	4770      	bx	lr
 8006d6a:	46c0      	nop			; (mov r8, r8)
 8006d6c:	e000ed04 	.word	0xe000ed04

08006d70 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 8006d70:	b672      	cpsid	i
    uxCriticalNesting++;
 8006d72:	4a04      	ldr	r2, [pc, #16]	; (8006d84 <vPortEnterCritical+0x14>)
 8006d74:	6813      	ldr	r3, [r2, #0]
 8006d76:	3301      	adds	r3, #1
 8006d78:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
 8006d7a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006d7e:	f3bf 8f6f 	isb	sy
}
 8006d82:	4770      	bx	lr
 8006d84:	20000008 	.word	0x20000008

08006d88 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006d88:	4b06      	ldr	r3, [pc, #24]	; (8006da4 <vPortExitCritical+0x1c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <vPortExitCritical+0xc>
 8006d90:	b672      	cpsid	i
 8006d92:	e7fe      	b.n	8006d92 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 8006d94:	3b01      	subs	r3, #1
 8006d96:	4a03      	ldr	r2, [pc, #12]	; (8006da4 <vPortExitCritical+0x1c>)
 8006d98:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d100      	bne.n	8006da0 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 8006d9e:	b662      	cpsie	i
}
 8006da0:	4770      	bx	lr
 8006da2:	46c0      	nop			; (mov r8, r8)
 8006da4:	20000008 	.word	0x20000008

08006da8 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 8006da8:	f3ef 8010 	mrs	r0, PRIMASK
 8006dac:	b672      	cpsid	i
 8006dae:	4770      	bx	lr

08006db0 <vClearInterruptMaskFromISR>:
	__asm volatile(
 8006db0:	f380 8810 	msr	PRIMASK, r0
 8006db4:	4770      	bx	lr
	...

08006dc0 <PendSV_Handler>:
	__asm volatile
 8006dc0:	f3ef 8009 	mrs	r0, PSP
 8006dc4:	4b0e      	ldr	r3, [pc, #56]	; (8006e00 <pxCurrentTCBConst>)
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	3820      	subs	r0, #32
 8006dca:	6010      	str	r0, [r2, #0]
 8006dcc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006dce:	4644      	mov	r4, r8
 8006dd0:	464d      	mov	r5, r9
 8006dd2:	4656      	mov	r6, sl
 8006dd4:	465f      	mov	r7, fp
 8006dd6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006dd8:	b508      	push	{r3, lr}
 8006dda:	b672      	cpsid	i
 8006ddc:	f7ff fcee 	bl	80067bc <vTaskSwitchContext>
 8006de0:	b662      	cpsie	i
 8006de2:	bc0c      	pop	{r2, r3}
 8006de4:	6811      	ldr	r1, [r2, #0]
 8006de6:	6808      	ldr	r0, [r1, #0]
 8006de8:	3010      	adds	r0, #16
 8006dea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8006dec:	46a0      	mov	r8, r4
 8006dee:	46a9      	mov	r9, r5
 8006df0:	46b2      	mov	sl, r6
 8006df2:	46bb      	mov	fp, r7
 8006df4:	f380 8809 	msr	PSP, r0
 8006df8:	3820      	subs	r0, #32
 8006dfa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8006dfc:	4718      	bx	r3
 8006dfe:	46c0      	nop			; (mov r8, r8)

08006e00 <pxCurrentTCBConst>:
 8006e00:	200009dc 	.word	0x200009dc

08006e04 <SysTick_Handler>:
{
 8006e04:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e06:	f7ff ffcf 	bl	8006da8 <ulSetInterruptMaskFromISR>
 8006e0a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 8006e0c:	f7ff fbc0 	bl	8006590 <xTaskIncrementTick>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	d003      	beq.n	8006e1c <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8006e14:	4b03      	ldr	r3, [pc, #12]	; (8006e24 <SysTick_Handler+0x20>)
 8006e16:	2280      	movs	r2, #128	; 0x80
 8006e18:	0552      	lsls	r2, r2, #21
 8006e1a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8006e1c:	0020      	movs	r0, r4
 8006e1e:	f7ff ffc7 	bl	8006db0 <vClearInterruptMaskFromISR>
}
 8006e22:	bd10      	pop	{r4, pc}
 8006e24:	e000ed04 	.word	0xe000ed04

08006e28 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e28:	4a12      	ldr	r2, [pc, #72]	; (8006e74 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e2a:	0753      	lsls	r3, r2, #29
 8006e2c:	d01f      	beq.n	8006e6e <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e2e:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e30:	2307      	movs	r3, #7
 8006e32:	4399      	bics	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e34:	23c0      	movs	r3, #192	; 0xc0
 8006e36:	015b      	lsls	r3, r3, #5
 8006e38:	1a5b      	subs	r3, r3, r1
 8006e3a:	189b      	adds	r3, r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e3c:	000a      	movs	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e3e:	480e      	ldr	r0, [pc, #56]	; (8006e78 <prvHeapInit+0x50>)
 8006e40:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e42:	2100      	movs	r1, #0
 8006e44:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e46:	18d3      	adds	r3, r2, r3
	uxAddress -= xHeapStructSize;
 8006e48:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e4a:	2007      	movs	r0, #7
 8006e4c:	4383      	bics	r3, r0
	pxEnd = ( void * ) uxAddress;
 8006e4e:	480b      	ldr	r0, [pc, #44]	; (8006e7c <prvHeapInit+0x54>)
 8006e50:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8006e52:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e54:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e56:	1a99      	subs	r1, r3, r2
 8006e58:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e5a:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e5c:	4b08      	ldr	r3, [pc, #32]	; (8006e80 <prvHeapInit+0x58>)
 8006e5e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e60:	4b08      	ldr	r3, [pc, #32]	; (8006e84 <prvHeapInit+0x5c>)
 8006e62:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e64:	4b08      	ldr	r3, [pc, #32]	; (8006e88 <prvHeapInit+0x60>)
 8006e66:	2280      	movs	r2, #128	; 0x80
 8006e68:	0612      	lsls	r2, r2, #24
 8006e6a:	601a      	str	r2, [r3, #0]
}
 8006e6c:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e6e:	23c0      	movs	r3, #192	; 0xc0
 8006e70:	015b      	lsls	r3, r3, #5
 8006e72:	e7e4      	b.n	8006e3e <prvHeapInit+0x16>
 8006e74:	20000b08 	.word	0x20000b08
 8006e78:	20002314 	.word	0x20002314
 8006e7c:	20000b04 	.word	0x20000b04
 8006e80:	20002310 	.word	0x20002310
 8006e84:	2000230c 	.word	0x2000230c
 8006e88:	20002308 	.word	0x20002308

08006e8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e8c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e8e:	4b12      	ldr	r3, [pc, #72]	; (8006ed8 <prvInsertBlockIntoFreeList+0x4c>)
 8006e90:	001a      	movs	r2, r3
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4283      	cmp	r3, r0
 8006e96:	d3fb      	bcc.n	8006e90 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e98:	6851      	ldr	r1, [r2, #4]
 8006e9a:	1854      	adds	r4, r2, r1
 8006e9c:	4284      	cmp	r4, r0
 8006e9e:	d008      	beq.n	8006eb2 <prvInsertBlockIntoFreeList+0x26>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006ea0:	6841      	ldr	r1, [r0, #4]
 8006ea2:	1844      	adds	r4, r0, r1
 8006ea4:	42a3      	cmp	r3, r4
 8006ea6:	d009      	beq.n	8006ebc <prvInsertBlockIntoFreeList+0x30>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ea8:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006eaa:	4290      	cmp	r0, r2
 8006eac:	d000      	beq.n	8006eb0 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006eae:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006eb0:	bd10      	pop	{r4, pc}
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006eb2:	6840      	ldr	r0, [r0, #4]
 8006eb4:	1809      	adds	r1, r1, r0
 8006eb6:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8006eb8:	0010      	movs	r0, r2
 8006eba:	e7f1      	b.n	8006ea0 <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006ebc:	4c07      	ldr	r4, [pc, #28]	; (8006edc <prvInsertBlockIntoFreeList+0x50>)
 8006ebe:	6824      	ldr	r4, [r4, #0]
 8006ec0:	42a3      	cmp	r3, r4
 8006ec2:	d006      	beq.n	8006ed2 <prvInsertBlockIntoFreeList+0x46>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	18c9      	adds	r1, r1, r3
 8006ec8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006eca:	6813      	ldr	r3, [r2, #0]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	6003      	str	r3, [r0, #0]
 8006ed0:	e7eb      	b.n	8006eaa <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ed2:	6004      	str	r4, [r0, #0]
 8006ed4:	e7e9      	b.n	8006eaa <prvInsertBlockIntoFreeList+0x1e>
 8006ed6:	46c0      	nop			; (mov r8, r8)
 8006ed8:	20002314 	.word	0x20002314
 8006edc:	20000b04 	.word	0x20000b04

08006ee0 <pvPortMalloc>:
{
 8006ee0:	b570      	push	{r4, r5, r6, lr}
 8006ee2:	0004      	movs	r4, r0
	vTaskSuspendAll();
 8006ee4:	f7ff fb4c 	bl	8006580 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006ee8:	4b2c      	ldr	r3, [pc, #176]	; (8006f9c <pvPortMalloc+0xbc>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d014      	beq.n	8006f1a <pvPortMalloc+0x3a>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ef0:	4b2b      	ldr	r3, [pc, #172]	; (8006fa0 <pvPortMalloc+0xc0>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4223      	tst	r3, r4
 8006ef6:	d142      	bne.n	8006f7e <pvPortMalloc+0x9e>
			if( xWantedSize > 0 )
 8006ef8:	2c00      	cmp	r4, #0
 8006efa:	d005      	beq.n	8006f08 <pvPortMalloc+0x28>
				xWantedSize += xHeapStructSize;
 8006efc:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006efe:	0763      	lsls	r3, r4, #29
 8006f00:	d002      	beq.n	8006f08 <pvPortMalloc+0x28>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f02:	2307      	movs	r3, #7
 8006f04:	439c      	bics	r4, r3
 8006f06:	3408      	adds	r4, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f08:	2c00      	cmp	r4, #0
 8006f0a:	d03a      	beq.n	8006f82 <pvPortMalloc+0xa2>
 8006f0c:	4b25      	ldr	r3, [pc, #148]	; (8006fa4 <pvPortMalloc+0xc4>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	42a3      	cmp	r3, r4
 8006f12:	d33d      	bcc.n	8006f90 <pvPortMalloc+0xb0>
				pxBlock = xStart.pxNextFreeBlock;
 8006f14:	4b24      	ldr	r3, [pc, #144]	; (8006fa8 <pvPortMalloc+0xc8>)
 8006f16:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f18:	e004      	b.n	8006f24 <pvPortMalloc+0x44>
			prvHeapInit();
 8006f1a:	f7ff ff85 	bl	8006e28 <prvHeapInit>
 8006f1e:	e7e7      	b.n	8006ef0 <pvPortMalloc+0x10>
					pxPreviousBlock = pxBlock;
 8006f20:	002b      	movs	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f22:	0015      	movs	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f24:	686a      	ldr	r2, [r5, #4]
 8006f26:	42a2      	cmp	r2, r4
 8006f28:	d202      	bcs.n	8006f30 <pvPortMalloc+0x50>
 8006f2a:	682a      	ldr	r2, [r5, #0]
 8006f2c:	2a00      	cmp	r2, #0
 8006f2e:	d1f7      	bne.n	8006f20 <pvPortMalloc+0x40>
				if( pxBlock != pxEnd )
 8006f30:	4a1a      	ldr	r2, [pc, #104]	; (8006f9c <pvPortMalloc+0xbc>)
 8006f32:	6812      	ldr	r2, [r2, #0]
 8006f34:	42aa      	cmp	r2, r5
 8006f36:	d02d      	beq.n	8006f94 <pvPortMalloc+0xb4>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f38:	681e      	ldr	r6, [r3, #0]
 8006f3a:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f3c:	682a      	ldr	r2, [r5, #0]
 8006f3e:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f40:	686b      	ldr	r3, [r5, #4]
 8006f42:	1b1b      	subs	r3, r3, r4
 8006f44:	2b10      	cmp	r3, #16
 8006f46:	d908      	bls.n	8006f5a <pvPortMalloc+0x7a>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f48:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f4a:	0742      	lsls	r2, r0, #29
 8006f4c:	d001      	beq.n	8006f52 <pvPortMalloc+0x72>
 8006f4e:	b672      	cpsid	i
 8006f50:	e7fe      	b.n	8006f50 <pvPortMalloc+0x70>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f52:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f54:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f56:	f7ff ff99 	bl	8006e8c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f5a:	686a      	ldr	r2, [r5, #4]
 8006f5c:	4911      	ldr	r1, [pc, #68]	; (8006fa4 <pvPortMalloc+0xc4>)
 8006f5e:	680b      	ldr	r3, [r1, #0]
 8006f60:	1a9b      	subs	r3, r3, r2
 8006f62:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f64:	4911      	ldr	r1, [pc, #68]	; (8006fac <pvPortMalloc+0xcc>)
 8006f66:	6809      	ldr	r1, [r1, #0]
 8006f68:	428b      	cmp	r3, r1
 8006f6a:	d201      	bcs.n	8006f70 <pvPortMalloc+0x90>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f6c:	490f      	ldr	r1, [pc, #60]	; (8006fac <pvPortMalloc+0xcc>)
 8006f6e:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f70:	4b0b      	ldr	r3, [pc, #44]	; (8006fa0 <pvPortMalloc+0xc0>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	602b      	str	r3, [r5, #0]
 8006f7c:	e002      	b.n	8006f84 <pvPortMalloc+0xa4>
void *pvReturn = NULL;
 8006f7e:	2600      	movs	r6, #0
 8006f80:	e000      	b.n	8006f84 <pvPortMalloc+0xa4>
 8006f82:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 8006f84:	f7ff fb8e 	bl	80066a4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f88:	0773      	lsls	r3, r6, #29
 8006f8a:	d005      	beq.n	8006f98 <pvPortMalloc+0xb8>
 8006f8c:	b672      	cpsid	i
 8006f8e:	e7fe      	b.n	8006f8e <pvPortMalloc+0xae>
void *pvReturn = NULL;
 8006f90:	2600      	movs	r6, #0
 8006f92:	e7f7      	b.n	8006f84 <pvPortMalloc+0xa4>
 8006f94:	2600      	movs	r6, #0
 8006f96:	e7f5      	b.n	8006f84 <pvPortMalloc+0xa4>
}
 8006f98:	0030      	movs	r0, r6
 8006f9a:	bd70      	pop	{r4, r5, r6, pc}
 8006f9c:	20000b04 	.word	0x20000b04
 8006fa0:	20002308 	.word	0x20002308
 8006fa4:	2000230c 	.word	0x2000230c
 8006fa8:	20002314 	.word	0x20002314
 8006fac:	20002310 	.word	0x20002310

08006fb0 <vPortFree>:
{
 8006fb0:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	d020      	beq.n	8006ff8 <vPortFree+0x48>
		puc -= xHeapStructSize;
 8006fb6:	0005      	movs	r5, r0
 8006fb8:	3d08      	subs	r5, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006fba:	686b      	ldr	r3, [r5, #4]
 8006fbc:	4a0f      	ldr	r2, [pc, #60]	; (8006ffc <vPortFree+0x4c>)
 8006fbe:	6812      	ldr	r2, [r2, #0]
 8006fc0:	421a      	tst	r2, r3
 8006fc2:	d101      	bne.n	8006fc8 <vPortFree+0x18>
 8006fc4:	b672      	cpsid	i
 8006fc6:	e7fe      	b.n	8006fc6 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006fc8:	0001      	movs	r1, r0
 8006fca:	3908      	subs	r1, #8
 8006fcc:	6809      	ldr	r1, [r1, #0]
 8006fce:	2900      	cmp	r1, #0
 8006fd0:	d001      	beq.n	8006fd6 <vPortFree+0x26>
 8006fd2:	b672      	cpsid	i
 8006fd4:	e7fe      	b.n	8006fd4 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006fd6:	3808      	subs	r0, #8
 8006fd8:	0004      	movs	r4, r0
 8006fda:	4393      	bics	r3, r2
 8006fdc:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 8006fde:	f7ff facf 	bl	8006580 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006fe2:	6863      	ldr	r3, [r4, #4]
 8006fe4:	4a06      	ldr	r2, [pc, #24]	; (8007000 <vPortFree+0x50>)
 8006fe6:	6811      	ldr	r1, [r2, #0]
 8006fe8:	468c      	mov	ip, r1
 8006fea:	4463      	add	r3, ip
 8006fec:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006fee:	0028      	movs	r0, r5
 8006ff0:	f7ff ff4c 	bl	8006e8c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8006ff4:	f7ff fb56 	bl	80066a4 <xTaskResumeAll>
}
 8006ff8:	bd70      	pop	{r4, r5, r6, pc}
 8006ffa:	46c0      	nop			; (mov r8, r8)
 8006ffc:	20002308 	.word	0x20002308
 8007000:	2000230c 	.word	0x2000230c

08007004 <SCP_Tick>:
    }
}
/************************************************************************************************
************************************************************************************************/
void SCP_Tick(uint32_t msecTick)
 {
 8007004:	b530      	push	{r4, r5, lr}
     if (SCPHandler.timer > 0)
 8007006:	4b09      	ldr	r3, [pc, #36]	; (800702c <SCP_Tick+0x28>)
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	dd07      	ble.n	8007020 <SCP_Tick+0x1c>
     {
         SCPHandler.timer = SCPHandler.timer - msecTick;
 8007010:	0004      	movs	r4, r0
 8007012:	2500      	movs	r5, #0
 8007014:	1b12      	subs	r2, r2, r4
 8007016:	41ab      	sbcs	r3, r5
 8007018:	4904      	ldr	r1, [pc, #16]	; (800702c <SCP_Tick+0x28>)
 800701a:	600a      	str	r2, [r1, #0]
 800701c:	604b      	str	r3, [r1, #4]
     }
 }
 800701e:	bd30      	pop	{r4, r5, pc}
     if (SCPHandler.timer > 0)
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1fc      	bne.n	800701e <SCP_Tick+0x1a>
 8007024:	2a00      	cmp	r2, #0
 8007026:	d1f3      	bne.n	8007010 <SCP_Tick+0xc>
 8007028:	e7f9      	b.n	800701e <SCP_Tick+0x1a>
 800702a:	46c0      	nop			; (mov r8, r8)
 800702c:	20002d40 	.word	0x20002d40

08007030 <SCP_UpCase>:
/************************************************************************************************
************************************************************************************************/
char SCP_UpCase(char ch )
{
 if ((ch >= 'a')&&(ch <= 'z')) return (ch & ~0x20);
 8007030:	0003      	movs	r3, r0
 8007032:	3b61      	subs	r3, #97	; 0x61
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b19      	cmp	r3, #25
 8007038:	d900      	bls.n	800703c <SCP_UpCase+0xc>
 return ch;
}
 800703a:	4770      	bx	lr
 if ((ch >= 'a')&&(ch <= 'z')) return (ch & ~0x20);
 800703c:	2320      	movs	r3, #32
 800703e:	4398      	bics	r0, r3
 8007040:	e7fb      	b.n	800703a <SCP_UpCase+0xa>
	...

08007044 <SCP_Init>:

void SCP_Init(uint32_t (*fSendData)(uint8_t *pData, uint32_t lenght), uint32_t (*fReadByte)(uint8_t *pData))
{
 8007044:	b530      	push	{r4, r5, lr}
    SCPHandler.RxIndex = 0;
 8007046:	4b0c      	ldr	r3, [pc, #48]	; (8007078 <SCP_Init+0x34>)
 8007048:	2200      	movs	r2, #0
 800704a:	609a      	str	r2, [r3, #8]
    SCPHandler.timer = 0;
 800704c:	2400      	movs	r4, #0
 800704e:	2500      	movs	r5, #0
 8007050:	601c      	str	r4, [r3, #0]
 8007052:	605d      	str	r5, [r3, #4]
    SCPHandler.fSendData = fSendData;
 8007054:	4a09      	ldr	r2, [pc, #36]	; (800707c <SCP_Init+0x38>)
 8007056:	5098      	str	r0, [r3, r2]
    SCPHandler.fReadByte = fReadByte;
 8007058:	3204      	adds	r2, #4
 800705a:	5099      	str	r1, [r3, r2]

    for (int i = 0; i < SCP_MAX_CALLBACKS; i++)
 800705c:	2200      	movs	r2, #0
 800705e:	2a09      	cmp	r2, #9
 8007060:	dc09      	bgt.n	8007076 <SCP_Init+0x32>
    {
        SCPHandler.scpCallbacks[i].fOnExecute = 0;
 8007062:	0011      	movs	r1, r2
 8007064:	3181      	adds	r1, #129	; 0x81
 8007066:	00c9      	lsls	r1, r1, #3
 8007068:	4b03      	ldr	r3, [pc, #12]	; (8007078 <SCP_Init+0x34>)
 800706a:	185b      	adds	r3, r3, r1
 800706c:	2100      	movs	r1, #0
 800706e:	6099      	str	r1, [r3, #8]
        SCPHandler.scpCallbacks[i].pWaitForString = 0;
 8007070:	6059      	str	r1, [r3, #4]
    for (int i = 0; i < SCP_MAX_CALLBACKS; i++)
 8007072:	3201      	adds	r2, #1
 8007074:	e7f3      	b.n	800705e <SCP_Init+0x1a>
    }
}
 8007076:	bd30      	pop	{r4, r5, pc}
 8007078:	20002d40 	.word	0x20002d40
 800707c:	0000060c 	.word	0x0000060c

08007080 <SCP_CheckCommand>:
 * Returns
 * If success returns pointer to the last byte of found string in rx buffer
 * if fail returns 0
******************************************************************************************/
const char * SCP_CheckCommand(const char * str)
{
 8007080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007082:	46c6      	mov	lr, r8
 8007084:	b500      	push	{lr}
 8007086:	1e07      	subs	r7, r0, #0

uint32_t i=0;
uint32_t rxInx = 0;

 if (str)
 8007088:	d022      	beq.n	80070d0 <SCP_CheckCommand+0x50>
uint32_t rxInx = 0;
 800708a:	2400      	movs	r4, #0
uint32_t i=0;
 800708c:	2600      	movs	r6, #0
 800708e:	e005      	b.n	800709c <SCP_CheckCommand+0x1c>
    {
     /*Low case or Up case characters may occur*/
     if (SCP_UpCase((char)str[i]) == SCP_UpCase((char)SCPHandler.RxBuffer[rxInx++])) // UpCase
      {
       /*Match found*/
       i++;
 8007090:	1c73      	adds	r3, r6, #1

       /*If the end of the string reached*/
       if (str[i] == 0)
 8007092:	5cfa      	ldrb	r2, [r7, r3]
 8007094:	2a00      	cmp	r2, #0
 8007096:	d014      	beq.n	80070c2 <SCP_CheckCommand+0x42>
       i++;
 8007098:	001e      	movs	r6, r3
 800709a:	4644      	mov	r4, r8
   while (rxInx < SCPHandler.RxIndex)
 800709c:	4b0e      	ldr	r3, [pc, #56]	; (80070d8 <SCP_CheckCommand+0x58>)
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	42a3      	cmp	r3, r4
 80070a2:	d914      	bls.n	80070ce <SCP_CheckCommand+0x4e>
     if (SCP_UpCase((char)str[i]) == SCP_UpCase((char)SCPHandler.RxBuffer[rxInx++])) // UpCase
 80070a4:	5db8      	ldrb	r0, [r7, r6]
 80070a6:	f7ff ffc3 	bl	8007030 <SCP_UpCase>
 80070aa:	0005      	movs	r5, r0
 80070ac:	1c63      	adds	r3, r4, #1
 80070ae:	4698      	mov	r8, r3
 80070b0:	4b09      	ldr	r3, [pc, #36]	; (80070d8 <SCP_CheckCommand+0x58>)
 80070b2:	191b      	adds	r3, r3, r4
 80070b4:	7b18      	ldrb	r0, [r3, #12]
 80070b6:	f7ff ffbb 	bl	8007030 <SCP_UpCase>
 80070ba:	4285      	cmp	r5, r0
 80070bc:	d0e8      	beq.n	8007090 <SCP_CheckCommand+0x10>
       }

      }

     /*No match, reset string pointer*/
     else i=0;
 80070be:	2600      	movs	r6, #0
 80070c0:	e7eb      	b.n	800709a <SCP_CheckCommand+0x1a>
           return (const char *)&SCPHandler.RxBuffer[rxInx - i];
 80070c2:	1ba0      	subs	r0, r4, r6
 80070c4:	3008      	adds	r0, #8
 80070c6:	4f04      	ldr	r7, [pc, #16]	; (80070d8 <SCP_CheckCommand+0x58>)
 80070c8:	19c0      	adds	r0, r0, r7
 80070ca:	3004      	adds	r0, #4
 80070cc:	e000      	b.n	80070d0 <SCP_CheckCommand+0x50>
    }
  }
return NULL;
 80070ce:	2000      	movs	r0, #0
}
 80070d0:	bc80      	pop	{r7}
 80070d2:	46b8      	mov	r8, r7
 80070d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070d6:	46c0      	nop			; (mov r8, r8)
 80070d8:	20002d40 	.word	0x20002d40

080070dc <SCP_Process>:
{
 80070dc:	b570      	push	{r4, r5, r6, lr}
    for (int i = 0; i < SCP_MAX_CALLBACKS; i++)
 80070de:	2400      	movs	r4, #0
 80070e0:	e000      	b.n	80070e4 <SCP_Process+0x8>
 80070e2:	3401      	adds	r4, #1
 80070e4:	2c09      	cmp	r4, #9
 80070e6:	dc15      	bgt.n	8007114 <SCP_Process+0x38>
        if (SCPHandler.scpCallbacks[i].pWaitForString && SCPHandler.scpCallbacks[i].fOnExecute)
 80070e8:	0022      	movs	r2, r4
 80070ea:	3281      	adds	r2, #129	; 0x81
 80070ec:	00d2      	lsls	r2, r2, #3
 80070ee:	4b0a      	ldr	r3, [pc, #40]	; (8007118 <SCP_Process+0x3c>)
 80070f0:	189b      	adds	r3, r3, r2
 80070f2:	6858      	ldr	r0, [r3, #4]
 80070f4:	2800      	cmp	r0, #0
 80070f6:	d0f4      	beq.n	80070e2 <SCP_Process+0x6>
 80070f8:	0022      	movs	r2, r4
 80070fa:	3281      	adds	r2, #129	; 0x81
 80070fc:	00d2      	lsls	r2, r2, #3
 80070fe:	4b06      	ldr	r3, [pc, #24]	; (8007118 <SCP_Process+0x3c>)
 8007100:	189b      	adds	r3, r3, r2
 8007102:	689d      	ldr	r5, [r3, #8]
 8007104:	2d00      	cmp	r5, #0
 8007106:	d0ec      	beq.n	80070e2 <SCP_Process+0x6>
            pReceivedString  = SCP_CheckCommand(SCPHandler.scpCallbacks[i].pWaitForString);
 8007108:	f7ff ffba 	bl	8007080 <SCP_CheckCommand>
            if(pReceivedString)
 800710c:	2800      	cmp	r0, #0
 800710e:	d0e8      	beq.n	80070e2 <SCP_Process+0x6>
                SCPHandler.scpCallbacks[i].fOnExecute(pReceivedString);
 8007110:	47a8      	blx	r5
 8007112:	e7e6      	b.n	80070e2 <SCP_Process+0x6>
}
 8007114:	bd70      	pop	{r4, r5, r6, pc}
 8007116:	46c0      	nop			; (mov r8, r8)
 8007118:	20002d40 	.word	0x20002d40

0800711c <SCP_SendCommandWaitAnswer>:
* RETURN:
* 0 if error
* pointer to answer if success
************************************************************************************************/
 char * SCP_SendCommandWaitAnswer(char *pCmd, char *pAnswer, uint32_t timeout, uint8_t retry)
 {
 800711c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800711e:	46d6      	mov	lr, sl
 8007120:	464f      	mov	r7, r9
 8007122:	4646      	mov	r6, r8
 8007124:	b5c0      	push	{r6, r7, lr}
 8007126:	0007      	movs	r7, r0
 8007128:	000e      	movs	r6, r1
 800712a:	4692      	mov	sl, r2
 800712c:	4699      	mov	r9, r3
     int    inx =0;
     char * pResult = NULL;

     /* flush RX */
     SCPHandler.RxIndex = 0;
 800712e:	481b      	ldr	r0, [pc, #108]	; (800719c <SCP_SendCommandWaitAnswer+0x80>)
 8007130:	2300      	movs	r3, #0
 8007132:	6083      	str	r3, [r0, #8]
     memset(SCPHandler.RxBuffer, 0x00, SCP_RX_BUFF_LENGTH);
 8007134:	300c      	adds	r0, #12
 8007136:	2280      	movs	r2, #128	; 0x80
 8007138:	00d2      	lsls	r2, r2, #3
 800713a:	2100      	movs	r1, #0
 800713c:	f002 f8f2 	bl	8009324 <memset>
     char * pResult = NULL;
 8007140:	2400      	movs	r4, #0
     int    inx =0;
 8007142:	2300      	movs	r3, #0

     while (!pResult && (inx++ < retry))
 8007144:	e002      	b.n	800714c <SCP_SendCommandWaitAnswer+0x30>
 8007146:	4643      	mov	r3, r8
 8007148:	e000      	b.n	800714c <SCP_SendCommandWaitAnswer+0x30>
 800714a:	4643      	mov	r3, r8
 800714c:	2c00      	cmp	r4, #0
 800714e:	d11e      	bne.n	800718e <SCP_SendCommandWaitAnswer+0x72>
 8007150:	1c5a      	adds	r2, r3, #1
 8007152:	4690      	mov	r8, r2
 8007154:	4599      	cmp	r9, r3
 8007156:	dd1a      	ble.n	800718e <SCP_SendCommandWaitAnswer+0x72>
     {
             SCPHandler.timer = timeout;
 8007158:	4b10      	ldr	r3, [pc, #64]	; (800719c <SCP_SendCommandWaitAnswer+0x80>)
 800715a:	4652      	mov	r2, sl
 800715c:	601a      	str	r2, [r3, #0]
 800715e:	2200      	movs	r2, #0
 8007160:	605a      	str	r2, [r3, #4]
             SCPHandler.fSendData((uint8_t *)pCmd, strlen(pCmd));
 8007162:	4a0f      	ldr	r2, [pc, #60]	; (80071a0 <SCP_SendCommandWaitAnswer+0x84>)
 8007164:	589d      	ldr	r5, [r3, r2]
 8007166:	0038      	movs	r0, r7
 8007168:	f7f8 ffce 	bl	8000108 <strlen>
 800716c:	0001      	movs	r1, r0
 800716e:	0038      	movs	r0, r7
 8007170:	47a8      	blx	r5
             while ( (!pResult) && (SCPHandler.timer))
 8007172:	2c00      	cmp	r4, #0
 8007174:	d1e9      	bne.n	800714a <SCP_SendCommandWaitAnswer+0x2e>
 8007176:	4b09      	ldr	r3, [pc, #36]	; (800719c <SCP_SendCommandWaitAnswer+0x80>)
 8007178:	681d      	ldr	r5, [r3, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	431d      	orrs	r5, r3
 800717e:	d0e2      	beq.n	8007146 <SCP_SendCommandWaitAnswer+0x2a>
             {
                 pResult = (char *)SCP_CheckCommand(pAnswer);
 8007180:	0030      	movs	r0, r6
 8007182:	f7ff ff7d 	bl	8007080 <SCP_CheckCommand>
 8007186:	0004      	movs	r4, r0
                 SCP_Process();
 8007188:	f7ff ffa8 	bl	80070dc <SCP_Process>
 800718c:	e7f1      	b.n	8007172 <SCP_SendCommandWaitAnswer+0x56>
             }
     }
     return pResult;

 }
 800718e:	0020      	movs	r0, r4
 8007190:	bce0      	pop	{r5, r6, r7}
 8007192:	46ba      	mov	sl, r7
 8007194:	46b1      	mov	r9, r6
 8007196:	46a8      	mov	r8, r5
 8007198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800719a:	46c0      	nop			; (mov r8, r8)
 800719c:	20002d40 	.word	0x20002d40
 80071a0:	0000060c 	.word	0x0000060c

080071a4 <SCP_InitRx>:

     return pResult;
 }

 void SCP_InitRx(void)
 {
 80071a4:	b510      	push	{r4, lr}
     SCPHandler.RxIndex = 0;
 80071a6:	4805      	ldr	r0, [pc, #20]	; (80071bc <SCP_InitRx+0x18>)
 80071a8:	2300      	movs	r3, #0
 80071aa:	6083      	str	r3, [r0, #8]
     memset(SCPHandler.RxBuffer, 0x00, SCP_RX_BUFF_LENGTH);
 80071ac:	300c      	adds	r0, #12
 80071ae:	2280      	movs	r2, #128	; 0x80
 80071b0:	00d2      	lsls	r2, r2, #3
 80071b2:	2100      	movs	r1, #0
 80071b4:	f002 f8b6 	bl	8009324 <memset>
 }
 80071b8:	bd10      	pop	{r4, pc}
 80071ba:	46c0      	nop			; (mov r8, r8)
 80071bc:	20002d40 	.word	0x20002d40

080071c0 <SCP_ByteReceived>:
{
 80071c0:	b510      	push	{r4, lr}
 80071c2:	0004      	movs	r4, r0
    if (SCPHandler.RxIndex < SCP_RX_BUFF_LENGTH)
 80071c4:	4b0a      	ldr	r3, [pc, #40]	; (80071f0 <SCP_ByteReceived+0x30>)
 80071c6:	689a      	ldr	r2, [r3, #8]
 80071c8:	2380      	movs	r3, #128	; 0x80
 80071ca:	00db      	lsls	r3, r3, #3
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d205      	bcs.n	80071dc <SCP_ByteReceived+0x1c>
        SCPHandler.RxBuffer[SCPHandler.RxIndex++] = rxByte;
 80071d0:	4b07      	ldr	r3, [pc, #28]	; (80071f0 <SCP_ByteReceived+0x30>)
 80071d2:	1c51      	adds	r1, r2, #1
 80071d4:	6099      	str	r1, [r3, #8]
 80071d6:	189b      	adds	r3, r3, r2
 80071d8:	7318      	strb	r0, [r3, #12]
}
 80071da:	bd10      	pop	{r4, pc}
    	SCP_InitRx();
 80071dc:	f7ff ffe2 	bl	80071a4 <SCP_InitRx>
        SCPHandler.RxBuffer[SCPHandler.RxIndex++] = rxByte;
 80071e0:	4b03      	ldr	r3, [pc, #12]	; (80071f0 <SCP_ByteReceived+0x30>)
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	1c51      	adds	r1, r2, #1
 80071e6:	6099      	str	r1, [r3, #8]
 80071e8:	189b      	adds	r3, r3, r2
 80071ea:	731c      	strb	r4, [r3, #12]
}
 80071ec:	e7f5      	b.n	80071da <SCP_ByteReceived+0x1a>
 80071ee:	46c0      	nop			; (mov r8, r8)
 80071f0:	20002d40 	.word	0x20002d40

080071f4 <SCP_WaitForAnswer>:
 {
     SCPHandler.fSendData((uint8_t *)pData, length);
 }

 char *SCP_WaitForAnswer(char *pAnswer, uint32_t timeout)
 {
 80071f4:	b570      	push	{r4, r5, r6, lr}
 80071f6:	0005      	movs	r5, r0
     char * pResult = NULL;

     SCPHandler.timer = timeout;
 80071f8:	4b0a      	ldr	r3, [pc, #40]	; (8007224 <SCP_WaitForAnswer+0x30>)
 80071fa:	6019      	str	r1, [r3, #0]
 80071fc:	2200      	movs	r2, #0
 80071fe:	605a      	str	r2, [r3, #4]
     char * pResult = NULL;
 8007200:	2400      	movs	r4, #0
     while ( (!pResult) && (SCPHandler.timer))
 8007202:	2c00      	cmp	r4, #0
 8007204:	d10b      	bne.n	800721e <SCP_WaitForAnswer+0x2a>
 8007206:	4a07      	ldr	r2, [pc, #28]	; (8007224 <SCP_WaitForAnswer+0x30>)
 8007208:	6813      	ldr	r3, [r2, #0]
 800720a:	6852      	ldr	r2, [r2, #4]
 800720c:	4313      	orrs	r3, r2
 800720e:	d006      	beq.n	800721e <SCP_WaitForAnswer+0x2a>
      {
          pResult = (char *)SCP_CheckCommand(pAnswer);
 8007210:	0028      	movs	r0, r5
 8007212:	f7ff ff35 	bl	8007080 <SCP_CheckCommand>
 8007216:	0004      	movs	r4, r0
          SCP_Process();
 8007218:	f7ff ff60 	bl	80070dc <SCP_Process>
 800721c:	e7f1      	b.n	8007202 <SCP_WaitForAnswer+0xe>
      }
     return pResult;
 }
 800721e:	0020      	movs	r0, r4
 8007220:	bd70      	pop	{r4, r5, r6, pc}
 8007222:	46c0      	nop			; (mov r8, r8)
 8007224:	20002d40 	.word	0x20002d40

08007228 <writeEEPROMData>:
  HAL_FLASHEx_DATAEEPROM_Lock();  // Reprotect the EEPROM
  return status;
  }

HAL_StatusTypeDef writeEEPROMData(uint32_t address, uint8_t* data, uint16_t len)
  {
 8007228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800722a:	46c6      	mov	lr, r8
 800722c:	b500      	push	{lr}
 800722e:	000f      	movs	r7, r1
 8007230:	4690      	mov	r8, r2
	HAL_StatusTypeDef  status;
	uint16_t i;

	address = address + EEPROM_BASE_ADDRESS;
 8007232:	4b12      	ldr	r3, [pc, #72]	; (800727c <writeEEPROMData+0x54>)
 8007234:	18c6      	adds	r6, r0, r3

	if(address+len > EEPROM_LAST_ADDR)
 8007236:	1992      	adds	r2, r2, r6
 8007238:	4b11      	ldr	r3, [pc, #68]	; (8007280 <writeEEPROMData+0x58>)
 800723a:	429a      	cmp	r2, r3
 800723c:	d904      	bls.n	8007248 <writeEEPROMData+0x20>
	{return HAL_ERROR;}
 800723e:	2501      	movs	r5, #1
		}
	}

	HAL_FLASHEx_DATAEEPROM_Lock();  // Reprotect the EEPROM
	return HAL_OK;
  }
 8007240:	0028      	movs	r0, r5
 8007242:	bc80      	pop	{r7}
 8007244:	46b8      	mov	r8, r7
 8007246:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_FLASHEx_DATAEEPROM_Unlock();  //Unprotect the EEPROM to allow writing
 8007248:	f7fc fbb6 	bl	80039b8 <HAL_FLASHEx_DATAEEPROM_Unlock>
	for(i = 0; i < len; i++)
 800724c:	2400      	movs	r4, #0
 800724e:	e001      	b.n	8007254 <writeEEPROMData+0x2c>
 8007250:	3401      	adds	r4, #1
 8007252:	b2a4      	uxth	r4, r4
 8007254:	4544      	cmp	r4, r8
 8007256:	d20c      	bcs.n	8007272 <writeEEPROMData+0x4a>
		status = HAL_FLASHEx_DATAEEPROM_Program(TYPEPROGRAMDATA_BYTE, address, *data);
 8007258:	783a      	ldrb	r2, [r7, #0]
 800725a:	0031      	movs	r1, r6
 800725c:	2000      	movs	r0, #0
 800725e:	f7fc fbd3 	bl	8003a08 <HAL_FLASHEx_DATAEEPROM_Program>
 8007262:	0005      	movs	r5, r0
		data++;
 8007264:	3701      	adds	r7, #1
		address++;
 8007266:	3601      	adds	r6, #1
		if(status != HAL_OK )
 8007268:	2800      	cmp	r0, #0
 800726a:	d0f1      	beq.n	8007250 <writeEEPROMData+0x28>
			HAL_FLASHEx_DATAEEPROM_Lock();  // Reprotect the EEPROM
 800726c:	f7fc fbc2 	bl	80039f4 <HAL_FLASHEx_DATAEEPROM_Lock>
			return status;
 8007270:	e7e6      	b.n	8007240 <writeEEPROMData+0x18>
	HAL_FLASHEx_DATAEEPROM_Lock();  // Reprotect the EEPROM
 8007272:	f7fc fbbf 	bl	80039f4 <HAL_FLASHEx_DATAEEPROM_Lock>
	return HAL_OK;
 8007276:	2500      	movs	r5, #0
 8007278:	e7e2      	b.n	8007240 <writeEEPROMData+0x18>
 800727a:	46c0      	nop			; (mov r8, r8)
 800727c:	08080000 	.word	0x08080000
 8007280:	080817ff 	.word	0x080817ff

08007284 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8007284:	4b03      	ldr	r3, [pc, #12]	; (8007294 <vApplicationGetIdleTaskMemory+0x10>)
 8007286:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8007288:	4b03      	ldr	r3, [pc, #12]	; (8007298 <vApplicationGetIdleTaskMemory+0x14>)
 800728a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800728c:	2340      	movs	r3, #64	; 0x40
 800728e:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 8007290:	4770      	bx	lr
 8007292:	46c0      	nop			; (mov r8, r8)
 8007294:	2000241c 	.word	0x2000241c
 8007298:	2000231c 	.word	0x2000231c

0800729c <ind_green>:
	}

}

void ind_green(void)
{
 800729c:	b530      	push	{r4, r5, lr}
 800729e:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072a0:	2214      	movs	r2, #20
 80072a2:	2100      	movs	r1, #0
 80072a4:	a801      	add	r0, sp, #4
 80072a6:	f002 f83d 	bl	8009324 <memset>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80072aa:	2580      	movs	r5, #128	; 0x80
 80072ac:	006d      	lsls	r5, r5, #1
 80072ae:	24a0      	movs	r4, #160	; 0xa0
 80072b0:	05e4      	lsls	r4, r4, #23
 80072b2:	2200      	movs	r2, #0
 80072b4:	0029      	movs	r1, r5
 80072b6:	0020      	movs	r0, r4
 80072b8:	f7fc fca9 	bl	8003c0e <HAL_GPIO_WritePin>

	/*Configure GPIO pin:*/
	GPIO_InitStruct.Pin = LED_IND_Pin;
 80072bc:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072be:	2301      	movs	r3, #1
 80072c0:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072c2:	2300      	movs	r3, #0
 80072c4:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072c6:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072c8:	a901      	add	r1, sp, #4
 80072ca:	0020      	movs	r0, r4
 80072cc:	f7fc fbca 	bl	8003a64 <HAL_GPIO_Init>
}
 80072d0:	b007      	add	sp, #28
 80072d2:	bd30      	pop	{r4, r5, pc}

080072d4 <ind_red>:

void ind_red(void)
{
 80072d4:	b530      	push	{r4, r5, lr}
 80072d6:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072d8:	2214      	movs	r2, #20
 80072da:	2100      	movs	r1, #0
 80072dc:	a801      	add	r0, sp, #4
 80072de:	f002 f821 	bl	8009324 <memset>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80072e2:	2580      	movs	r5, #128	; 0x80
 80072e4:	006d      	lsls	r5, r5, #1
 80072e6:	24a0      	movs	r4, #160	; 0xa0
 80072e8:	05e4      	lsls	r4, r4, #23
 80072ea:	2201      	movs	r2, #1
 80072ec:	0029      	movs	r1, r5
 80072ee:	0020      	movs	r0, r4
 80072f0:	f7fc fc8d 	bl	8003c0e <HAL_GPIO_WritePin>

	/*Configure GPIO pin:*/
	GPIO_InitStruct.Pin = LED_IND_Pin;
 80072f4:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072f6:	2301      	movs	r3, #1
 80072f8:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072fa:	2300      	movs	r3, #0
 80072fc:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072fe:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007300:	a901      	add	r1, sp, #4
 8007302:	0020      	movs	r0, r4
 8007304:	f7fc fbae 	bl	8003a64 <HAL_GPIO_Init>
}
 8007308:	b007      	add	sp, #28
 800730a:	bd30      	pop	{r4, r5, pc}

0800730c <ind_off>:

void ind_off(void)
{
 800730c:	b500      	push	{lr}
 800730e:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007310:	2300      	movs	r3, #0
 8007312:	9305      	str	r3, [sp, #20]

	/*Configure GPIO pin:*/
	GPIO_InitStruct.Pin = LED_IND_Pin;
 8007314:	2280      	movs	r2, #128	; 0x80
 8007316:	0052      	lsls	r2, r2, #1
 8007318:	9201      	str	r2, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800731a:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800731c:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800731e:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007320:	20a0      	movs	r0, #160	; 0xa0
 8007322:	a901      	add	r1, sp, #4
 8007324:	05c0      	lsls	r0, r0, #23
 8007326:	f7fc fb9d 	bl	8003a64 <HAL_GPIO_Init>
}
 800732a:	b007      	add	sp, #28
 800732c:	bd00      	pop	{pc}
	...

08007330 <IndicationTask>:
{
 8007330:	b500      	push	{lr}
 8007332:	b085      	sub	sp, #20
 8007334:	e001      	b.n	800733a <IndicationTask+0xa>
			  		  ind_off();
 8007336:	f7ff ffe9 	bl	800730c <ind_off>
		  evt = osMessageGet (ind_msg,  osWaitForever);
 800733a:	2201      	movs	r2, #1
 800733c:	4b0c      	ldr	r3, [pc, #48]	; (8007370 <IndicationTask+0x40>)
 800733e:	6819      	ldr	r1, [r3, #0]
 8007340:	4252      	negs	r2, r2
 8007342:	a801      	add	r0, sp, #4
 8007344:	f7fe fbb2 	bl	8005aac <osMessageGet>
		  if (evt.status == osEventMessage)
 8007348:	9b01      	ldr	r3, [sp, #4]
 800734a:	2b10      	cmp	r3, #16
 800734c:	d1f5      	bne.n	800733a <IndicationTask+0xa>
			  switch(evt.value.v)
 800734e:	9b02      	ldr	r3, [sp, #8]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d006      	beq.n	8007362 <IndicationTask+0x32>
 8007354:	2b02      	cmp	r3, #2
 8007356:	d007      	beq.n	8007368 <IndicationTask+0x38>
 8007358:	2b00      	cmp	r3, #0
 800735a:	d0ec      	beq.n	8007336 <IndicationTask+0x6>
			  		  ind_off();
 800735c:	f7ff ffd6 	bl	800730c <ind_off>
 8007360:	e7eb      	b.n	800733a <IndicationTask+0xa>
			  		  ind_green();
 8007362:	f7ff ff9b 	bl	800729c <ind_green>
			  		  break;
 8007366:	e7e8      	b.n	800733a <IndicationTask+0xa>
			  		  ind_red();
 8007368:	f7ff ffb4 	bl	80072d4 <ind_red>
			  		  break;
 800736c:	e7e5      	b.n	800733a <IndicationTask+0xa>
 800736e:	46c0      	nop			; (mov r8, r8)
 8007370:	2000335c 	.word	0x2000335c

08007374 <delay_us>:

/*Hardware Timer Microsecond Delay*/
void delay_us (uint16_t us)
{
	/*Set the counter value a 0*/
	__HAL_TIM_SET_COUNTER(&htim22,0);
 8007374:	4b03      	ldr	r3, [pc, #12]	; (8007384 <delay_us+0x10>)
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	2300      	movs	r3, #0
 800737a:	6253      	str	r3, [r2, #36]	; 0x24

	/*Wait for the counter to reach the us input in the parameter*/
	while (__HAL_TIM_GET_COUNTER(&htim22) < us);
 800737c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800737e:	4283      	cmp	r3, r0
 8007380:	d3fc      	bcc.n	800737c <delay_us+0x8>
}
 8007382:	4770      	bx	lr
 8007384:	2000344c 	.word	0x2000344c

08007388 <set_intensity>:

/*Sets driver current using EasyScale Protocol*/
void set_intensity(uint32_t ref)
{
 8007388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800738a:	b083      	sub	sp, #12
 800738c:	9001      	str	r0, [sp, #4]
  unsigned char byte = 0, j = 0, k = 0;
  byte = 0x72;       //device address byte

  /*Shut down driver and enter into EasyScale control mode*/
  HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 800738e:	4c2f      	ldr	r4, [pc, #188]	; (800744c <set_intensity+0xc4>)
 8007390:	2201      	movs	r2, #1
 8007392:	2102      	movs	r1, #2
 8007394:	0020      	movs	r0, r4
 8007396:	f7fc fc3a 	bl	8003c0e <HAL_GPIO_WritePin>
  delay_us(110);
 800739a:	206e      	movs	r0, #110	; 0x6e
 800739c:	f7ff ffea 	bl	8007374 <delay_us>
  HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET);
 80073a0:	2200      	movs	r2, #0
 80073a2:	2102      	movs	r1, #2
 80073a4:	0020      	movs	r0, r4
 80073a6:	f7fc fc32 	bl	8003c0e <HAL_GPIO_WritePin>
  delay_us(1100);
 80073aa:	4829      	ldr	r0, [pc, #164]	; (8007450 <set_intensity+0xc8>)
 80073ac:	f7ff ffe2 	bl	8007374 <delay_us>

  /*Send address and data*/
  for(k=2; k>0; k--)
 80073b0:	2602      	movs	r6, #2
  byte = 0x72;       //device address byte
 80073b2:	2572      	movs	r5, #114	; 0x72
  for(k=2; k>0; k--)
 80073b4:	e037      	b.n	8007426 <set_intensity+0x9e>

    for(j=8; j>0; j--)
    {
      if(byte & 0x80)
      {
    	HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET); //encoding bit 1
 80073b6:	4f25      	ldr	r7, [pc, #148]	; (800744c <set_intensity+0xc4>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	2102      	movs	r1, #2
 80073bc:	0038      	movs	r0, r7
 80073be:	f7fc fc26 	bl	8003c0e <HAL_GPIO_WritePin>
    	delay_us(24);
 80073c2:	2018      	movs	r0, #24
 80073c4:	f7ff ffd6 	bl	8007374 <delay_us>
        HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 80073c8:	2201      	movs	r2, #1
 80073ca:	2102      	movs	r1, #2
 80073cc:	0038      	movs	r0, r7
 80073ce:	f7fc fc1e 	bl	8003c0e <HAL_GPIO_WritePin>
        delay_us(48);
 80073d2:	2030      	movs	r0, #48	; 0x30
 80073d4:	f7ff ffce 	bl	8007374 <delay_us>
    	HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET); //encoding bit 0
    	delay_us(48);
        HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
        delay_us(24);
      }
      byte += byte; //left shift
 80073d8:	006d      	lsls	r5, r5, #1
 80073da:	b2ed      	uxtb	r5, r5
    for(j=8; j>0; j--)
 80073dc:	3c01      	subs	r4, #1
 80073de:	b2e4      	uxtb	r4, r4
 80073e0:	2c00      	cmp	r4, #0
 80073e2:	d014      	beq.n	800740e <set_intensity+0x86>
      if(byte & 0x80)
 80073e4:	b26b      	sxtb	r3, r5
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	dbe5      	blt.n	80073b6 <set_intensity+0x2e>
    	HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET); //encoding bit 0
 80073ea:	4f18      	ldr	r7, [pc, #96]	; (800744c <set_intensity+0xc4>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	2102      	movs	r1, #2
 80073f0:	0038      	movs	r0, r7
 80073f2:	f7fc fc0c 	bl	8003c0e <HAL_GPIO_WritePin>
    	delay_us(48);
 80073f6:	2030      	movs	r0, #48	; 0x30
 80073f8:	f7ff ffbc 	bl	8007374 <delay_us>
        HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 80073fc:	2201      	movs	r2, #1
 80073fe:	2102      	movs	r1, #2
 8007400:	0038      	movs	r0, r7
 8007402:	f7fc fc04 	bl	8003c0e <HAL_GPIO_WritePin>
        delay_us(24);
 8007406:	2018      	movs	r0, #24
 8007408:	f7ff ffb4 	bl	8007374 <delay_us>
 800740c:	e7e4      	b.n	80073d8 <set_intensity+0x50>
    }

    HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET); //End of stream delay
 800740e:	2200      	movs	r2, #0
 8007410:	2102      	movs	r1, #2
 8007412:	480e      	ldr	r0, [pc, #56]	; (800744c <set_intensity+0xc4>)
 8007414:	f7fc fbfb 	bl	8003c0e <HAL_GPIO_WritePin>
    delay_us(48);
 8007418:	2030      	movs	r0, #48	; 0x30
 800741a:	f7ff ffab 	bl	8007374 <delay_us>

    byte = ref; //read data byte
 800741e:	466b      	mov	r3, sp
 8007420:	791d      	ldrb	r5, [r3, #4]
  for(k=2; k>0; k--)
 8007422:	3e01      	subs	r6, #1
 8007424:	b2f6      	uxtb	r6, r6
 8007426:	2e00      	cmp	r6, #0
 8007428:	d009      	beq.n	800743e <set_intensity+0xb6>
	HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 800742a:	2201      	movs	r2, #1
 800742c:	2102      	movs	r1, #2
 800742e:	4807      	ldr	r0, [pc, #28]	; (800744c <set_intensity+0xc4>)
 8007430:	f7fc fbed 	bl	8003c0e <HAL_GPIO_WritePin>
	delay_us(48);
 8007434:	2030      	movs	r0, #48	; 0x30
 8007436:	f7ff ff9d 	bl	8007374 <delay_us>
    for(j=8; j>0; j--)
 800743a:	2408      	movs	r4, #8
 800743c:	e7d0      	b.n	80073e0 <set_intensity+0x58>
  }
  HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_SET);
 800743e:	2201      	movs	r2, #1
 8007440:	2102      	movs	r1, #2
 8007442:	4802      	ldr	r0, [pc, #8]	; (800744c <set_intensity+0xc4>)
 8007444:	f7fc fbe3 	bl	8003c0e <HAL_GPIO_WritePin>
}
 8007448:	b003      	add	sp, #12
 800744a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800744c:	50000400 	.word	0x50000400
 8007450:	0000044c 	.word	0x0000044c

08007454 <LEDControlTask>:
{
 8007454:	b500      	push	{lr}
 8007456:	b085      	sub	sp, #20
 8007458:	e002      	b.n	8007460 <LEDControlTask+0xc>
		  set_intensity(evt.value.v);
 800745a:	9802      	ldr	r0, [sp, #8]
 800745c:	f7ff ff94 	bl	8007388 <set_intensity>
	  evt = osMessageGet (led_msg,  osWaitForever);
 8007460:	2201      	movs	r2, #1
 8007462:	4b05      	ldr	r3, [pc, #20]	; (8007478 <LEDControlTask+0x24>)
 8007464:	6819      	ldr	r1, [r3, #0]
 8007466:	4252      	negs	r2, r2
 8007468:	a801      	add	r0, sp, #4
 800746a:	f7fe fb1f 	bl	8005aac <osMessageGet>
	  if (evt.status == osEventMessage)
 800746e:	9b01      	ldr	r3, [sp, #4]
 8007470:	2b10      	cmp	r3, #16
 8007472:	d1f5      	bne.n	8007460 <LEDControlTask+0xc>
 8007474:	e7f1      	b.n	800745a <LEDControlTask+0x6>
 8007476:	46c0      	nop			; (mov r8, r8)
 8007478:	20003364 	.word	0x20003364

0800747c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800747c:	b510      	push	{r4, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800747e:	4806      	ldr	r0, [pc, #24]	; (8007498 <MX_CRC_Init+0x1c>)
 8007480:	4b06      	ldr	r3, [pc, #24]	; (800749c <MX_CRC_Init+0x20>)
 8007482:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8007484:	2300      	movs	r3, #0
 8007486:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8007488:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800748a:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800748c:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800748e:	3301      	adds	r3, #1
 8007490:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8007492:	f7fc f813 	bl	80034bc <HAL_CRC_Init>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8007496:	bd10      	pop	{r4, pc}
 8007498:	20003398 	.word	0x20003398
 800749c:	40023000 	.word	0x40023000

080074a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80074a0:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80074a2:	4809      	ldr	r0, [pc, #36]	; (80074c8 <MX_USART1_UART_Init+0x28>)
 80074a4:	4b09      	ldr	r3, [pc, #36]	; (80074cc <MX_USART1_UART_Init+0x2c>)
 80074a6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80074a8:	23e1      	movs	r3, #225	; 0xe1
 80074aa:	025b      	lsls	r3, r3, #9
 80074ac:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80074ae:	2300      	movs	r3, #0
 80074b0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80074b2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80074b4:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80074b6:	220c      	movs	r2, #12
 80074b8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80074ba:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80074bc:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80074be:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80074c0:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80074c2:	f7fe f92d 	bl	8005720 <HAL_UART_Init>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80074c6:	bd10      	pop	{r4, pc}
 80074c8:	2000348c 	.word	0x2000348c
 80074cc:	40013800 	.word	0x40013800

080074d0 <MX_TIM7_Init>:
{
 80074d0:	b530      	push	{r4, r5, lr}
 80074d2:	b083      	sub	sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80074d4:	2208      	movs	r2, #8
 80074d6:	2100      	movs	r1, #0
 80074d8:	4668      	mov	r0, sp
 80074da:	f001 ff23 	bl	8009324 <memset>
  htim7.Instance = TIM7;
 80074de:	4c0b      	ldr	r4, [pc, #44]	; (800750c <MX_TIM7_Init+0x3c>)
 80074e0:	4b0b      	ldr	r3, [pc, #44]	; (8007510 <MX_TIM7_Init+0x40>)
 80074e2:	6023      	str	r3, [r4, #0]
  htim7.Init.Prescaler = 32;
 80074e4:	2320      	movs	r3, #32
 80074e6:	6063      	str	r3, [r4, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80074e8:	2500      	movs	r5, #0
 80074ea:	60a5      	str	r5, [r4, #8]
  htim7.Init.Period = 10000;
 80074ec:	4b09      	ldr	r3, [pc, #36]	; (8007514 <MX_TIM7_Init+0x44>)
 80074ee:	60e3      	str	r3, [r4, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80074f0:	2380      	movs	r3, #128	; 0x80
 80074f2:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80074f4:	0020      	movs	r0, r4
 80074f6:	f7fd f9cf 	bl	8004898 <HAL_TIM_Base_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80074fa:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80074fc:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80074fe:	4669      	mov	r1, sp
 8007500:	0020      	movs	r0, r4
 8007502:	f7fd fb83 	bl	8004c0c <HAL_TIMEx_MasterConfigSynchronization>
}
 8007506:	b003      	add	sp, #12
 8007508:	bd30      	pop	{r4, r5, pc}
 800750a:	46c0      	nop			; (mov r8, r8)
 800750c:	200035b8 	.word	0x200035b8
 8007510:	40001400 	.word	0x40001400
 8007514:	00002710 	.word	0x00002710

08007518 <MX_IWDG_Init>:
{
 8007518:	b510      	push	{r4, lr}
  hiwdg.Instance = IWDG;
 800751a:	4805      	ldr	r0, [pc, #20]	; (8007530 <MX_IWDG_Init+0x18>)
 800751c:	4b05      	ldr	r3, [pc, #20]	; (8007534 <MX_IWDG_Init+0x1c>)
 800751e:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8007520:	2306      	movs	r3, #6
 8007522:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Window = 4095;
 8007524:	4b04      	ldr	r3, [pc, #16]	; (8007538 <MX_IWDG_Init+0x20>)
 8007526:	60c3      	str	r3, [r0, #12]
  hiwdg.Init.Reload = 4095;
 8007528:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800752a:	f7fc fb77 	bl	8003c1c <HAL_IWDG_Init>
}
 800752e:	bd10      	pop	{r4, pc}
 8007530:	20003388 	.word	0x20003388
 8007534:	40003000 	.word	0x40003000
 8007538:	00000fff 	.word	0x00000fff

0800753c <MX_NVIC_Init>:
{
 800753c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriority(TIM21_IRQn, 3, 0);
 800753e:	2200      	movs	r2, #0
 8007540:	2103      	movs	r1, #3
 8007542:	2014      	movs	r0, #20
 8007544:	f7fb ff28 	bl	8003398 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8007548:	2014      	movs	r0, #20
 800754a:	f7fb ff55 	bl	80033f8 <HAL_NVIC_EnableIRQ>
}
 800754e:	bd10      	pop	{r4, pc}

08007550 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8007550:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8007552:	2001      	movs	r0, #1
 8007554:	f7fe f9fb 	bl	800594e <osDelay>
  for(;;)
 8007558:	e7fb      	b.n	8007552 <StartDefaultTask+0x2>
	...

0800755c <SystemClock_Config>:
{
 800755c:	b570      	push	{r4, r5, r6, lr}
 800755e:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007560:	2238      	movs	r2, #56	; 0x38
 8007562:	2100      	movs	r1, #0
 8007564:	a80e      	add	r0, sp, #56	; 0x38
 8007566:	f001 fedd 	bl	8009324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800756a:	2214      	movs	r2, #20
 800756c:	2100      	movs	r1, #0
 800756e:	a809      	add	r0, sp, #36	; 0x24
 8007570:	f001 fed8 	bl	8009324 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007574:	2224      	movs	r2, #36	; 0x24
 8007576:	2100      	movs	r1, #0
 8007578:	4668      	mov	r0, sp
 800757a:	f001 fed3 	bl	8009324 <memset>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800757e:	4917      	ldr	r1, [pc, #92]	; (80075dc <SystemClock_Config+0x80>)
 8007580:	680b      	ldr	r3, [r1, #0]
 8007582:	4a17      	ldr	r2, [pc, #92]	; (80075e0 <SystemClock_Config+0x84>)
 8007584:	401a      	ands	r2, r3
 8007586:	2380      	movs	r3, #128	; 0x80
 8007588:	011b      	lsls	r3, r3, #4
 800758a:	4313      	orrs	r3, r2
 800758c:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800758e:	230a      	movs	r3, #10
 8007590:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007592:	2501      	movs	r5, #1
 8007594:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007596:	3306      	adds	r3, #6
 8007598:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800759a:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800759c:	2602      	movs	r6, #2
 800759e:	9618      	str	r6, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80075a0:	2400      	movs	r4, #0
 80075a2:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80075a4:	2380      	movs	r3, #128	; 0x80
 80075a6:	02db      	lsls	r3, r3, #11
 80075a8:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80075aa:	2380      	movs	r3, #128	; 0x80
 80075ac:	03db      	lsls	r3, r3, #15
 80075ae:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80075b0:	a80e      	add	r0, sp, #56	; 0x38
 80075b2:	f7fc fc0f 	bl	8003dd4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80075b6:	230f      	movs	r3, #15
 80075b8:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80075ba:	3b0c      	subs	r3, #12
 80075bc:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80075be:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80075c0:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80075c2:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80075c4:	2101      	movs	r1, #1
 80075c6:	a809      	add	r0, sp, #36	; 0x24
 80075c8:	f7fc fed0 	bl	800436c <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80075cc:	9500      	str	r5, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 80075ce:	9602      	str	r6, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80075d0:	4668      	mov	r0, sp
 80075d2:	f7fc fffd 	bl	80045d0 <HAL_RCCEx_PeriphCLKConfig>
}
 80075d6:	b01c      	add	sp, #112	; 0x70
 80075d8:	bd70      	pop	{r4, r5, r6, pc}
 80075da:	46c0      	nop			; (mov r8, r8)
 80075dc:	40007000 	.word	0x40007000
 80075e0:	ffffe7ff 	.word	0xffffe7ff

080075e4 <MX_ADC_Init>:
{
 80075e4:	b570      	push	{r4, r5, r6, lr}
 80075e6:	b082      	sub	sp, #8
  ADC_ChannelConfTypeDef sConfig = {0};
 80075e8:	2208      	movs	r2, #8
 80075ea:	2100      	movs	r1, #0
 80075ec:	4668      	mov	r0, sp
 80075ee:	f001 fe99 	bl	8009324 <memset>
  hadc.Instance = ADC1;
 80075f2:	4c22      	ldr	r4, [pc, #136]	; (800767c <MX_ADC_Init+0x98>)
 80075f4:	4b22      	ldr	r3, [pc, #136]	; (8007680 <MX_ADC_Init+0x9c>)
 80075f6:	6023      	str	r3, [r4, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80075f8:	2300      	movs	r3, #0
 80075fa:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80075fc:	2280      	movs	r2, #128	; 0x80
 80075fe:	0312      	lsls	r2, r2, #12
 8007600:	6062      	str	r2, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8007602:	60a3      	str	r3, [r4, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_39CYCLES_5;
 8007604:	2205      	movs	r2, #5
 8007606:	63a2      	str	r2, [r4, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8007608:	2501      	movs	r5, #1
 800760a:	6125      	str	r5, [r4, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800760c:	60e3      	str	r3, [r4, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 800760e:	321b      	adds	r2, #27
 8007610:	54a5      	strb	r5, [r4, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8007612:	3201      	adds	r2, #1
 8007614:	54a3      	strb	r3, [r4, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007616:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007618:	22c2      	movs	r2, #194	; 0xc2
 800761a:	32ff      	adds	r2, #255	; 0xff
 800761c:	6262      	str	r2, [r4, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 800761e:	3a96      	subs	r2, #150	; 0x96
 8007620:	3aff      	subs	r2, #255	; 0xff
 8007622:	54a5      	strb	r5, [r4, r2]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007624:	3a24      	subs	r2, #36	; 0x24
 8007626:	6162      	str	r2, [r4, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8007628:	2680      	movs	r6, #128	; 0x80
 800762a:	0176      	lsls	r6, r6, #5
 800762c:	6326      	str	r6, [r4, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800762e:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8007630:	6363      	str	r3, [r4, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8007632:	61e3      	str	r3, [r4, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8007634:	0020      	movs	r0, r4
 8007636:	f7fb fc45 	bl	8002ec4 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_0;
 800763a:	9500      	str	r5, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800763c:	9601      	str	r6, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800763e:	4669      	mov	r1, sp
 8007640:	0020      	movs	r0, r4
 8007642:	f7fb fe4b 	bl	80032dc <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_1;
 8007646:	4b0f      	ldr	r3, [pc, #60]	; (8007684 <MX_ADC_Init+0xa0>)
 8007648:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800764a:	4669      	mov	r1, sp
 800764c:	0020      	movs	r0, r4
 800764e:	f7fb fe45 	bl	80032dc <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_2;
 8007652:	4b0d      	ldr	r3, [pc, #52]	; (8007688 <MX_ADC_Init+0xa4>)
 8007654:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007656:	4669      	mov	r1, sp
 8007658:	0020      	movs	r0, r4
 800765a:	f7fb fe3f 	bl	80032dc <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_3;
 800765e:	4b0b      	ldr	r3, [pc, #44]	; (800768c <MX_ADC_Init+0xa8>)
 8007660:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007662:	4669      	mov	r1, sp
 8007664:	0020      	movs	r0, r4
 8007666:	f7fb fe39 	bl	80032dc <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_4;
 800766a:	4b09      	ldr	r3, [pc, #36]	; (8007690 <MX_ADC_Init+0xac>)
 800766c:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800766e:	4669      	mov	r1, sp
 8007670:	0020      	movs	r0, r4
 8007672:	f7fb fe33 	bl	80032dc <HAL_ADC_ConfigChannel>
}
 8007676:	b002      	add	sp, #8
 8007678:	bd70      	pop	{r4, r5, r6, pc}
 800767a:	46c0      	nop			; (mov r8, r8)
 800767c:	2000355c 	.word	0x2000355c
 8007680:	40012400 	.word	0x40012400
 8007684:	04000002 	.word	0x04000002
 8007688:	08000004 	.word	0x08000004
 800768c:	0c000008 	.word	0x0c000008
 8007690:	10000010 	.word	0x10000010

08007694 <MX_TIM21_Init>:
{
 8007694:	b530      	push	{r4, r5, lr}
 8007696:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007698:	2210      	movs	r2, #16
 800769a:	2100      	movs	r1, #0
 800769c:	a802      	add	r0, sp, #8
 800769e:	f001 fe41 	bl	8009324 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80076a2:	2208      	movs	r2, #8
 80076a4:	2100      	movs	r1, #0
 80076a6:	4668      	mov	r0, sp
 80076a8:	f001 fe3c 	bl	8009324 <memset>
  htim21.Instance = TIM21;
 80076ac:	4c0e      	ldr	r4, [pc, #56]	; (80076e8 <MX_TIM21_Init+0x54>)
 80076ae:	4b0f      	ldr	r3, [pc, #60]	; (80076ec <MX_TIM21_Init+0x58>)
 80076b0:	6023      	str	r3, [r4, #0]
  htim21.Init.Prescaler = 32000-1;
 80076b2:	4b0f      	ldr	r3, [pc, #60]	; (80076f0 <MX_TIM21_Init+0x5c>)
 80076b4:	6063      	str	r3, [r4, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 80076b6:	2500      	movs	r5, #0
 80076b8:	60a5      	str	r5, [r4, #8]
  htim21.Init.Period = 100-1;
 80076ba:	2363      	movs	r3, #99	; 0x63
 80076bc:	60e3      	str	r3, [r4, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80076be:	6125      	str	r5, [r4, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80076c0:	331d      	adds	r3, #29
 80076c2:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 80076c4:	0020      	movs	r0, r4
 80076c6:	f7fd f8e7 	bl	8004898 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80076ca:	2380      	movs	r3, #128	; 0x80
 80076cc:	015b      	lsls	r3, r3, #5
 80076ce:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80076d0:	a902      	add	r1, sp, #8
 80076d2:	0020      	movs	r0, r4
 80076d4:	f7fd f980 	bl	80049d8 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80076d8:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80076da:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80076dc:	4669      	mov	r1, sp
 80076de:	0020      	movs	r0, r4
 80076e0:	f7fd fa94 	bl	8004c0c <HAL_TIMEx_MasterConfigSynchronization>
}
 80076e4:	b007      	add	sp, #28
 80076e6:	bd30      	pop	{r4, r5, pc}
 80076e8:	200035f8 	.word	0x200035f8
 80076ec:	40010800 	.word	0x40010800
 80076f0:	00007cff 	.word	0x00007cff

080076f4 <MX_TIM22_Init>:
{
 80076f4:	b530      	push	{r4, r5, lr}
 80076f6:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80076f8:	2210      	movs	r2, #16
 80076fa:	2100      	movs	r1, #0
 80076fc:	a802      	add	r0, sp, #8
 80076fe:	f001 fe11 	bl	8009324 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007702:	2208      	movs	r2, #8
 8007704:	2100      	movs	r1, #0
 8007706:	4668      	mov	r0, sp
 8007708:	f001 fe0c 	bl	8009324 <memset>
  htim22.Instance = TIM22;
 800770c:	4c0f      	ldr	r4, [pc, #60]	; (800774c <MX_TIM22_Init+0x58>)
 800770e:	4b10      	ldr	r3, [pc, #64]	; (8007750 <MX_TIM22_Init+0x5c>)
 8007710:	6023      	str	r3, [r4, #0]
  htim22.Init.Prescaler = 32-1;
 8007712:	231f      	movs	r3, #31
 8007714:	6063      	str	r3, [r4, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007716:	2500      	movs	r5, #0
 8007718:	60a5      	str	r5, [r4, #8]
  htim22.Init.Period = 0xFFFF-1;
 800771a:	4b0e      	ldr	r3, [pc, #56]	; (8007754 <MX_TIM22_Init+0x60>)
 800771c:	60e3      	str	r3, [r4, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800771e:	6125      	str	r5, [r4, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007720:	6165      	str	r5, [r4, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8007722:	0020      	movs	r0, r4
 8007724:	f7fd f8b8 	bl	8004898 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007728:	2380      	movs	r3, #128	; 0x80
 800772a:	015b      	lsls	r3, r3, #5
 800772c:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 800772e:	a902      	add	r1, sp, #8
 8007730:	0020      	movs	r0, r4
 8007732:	f7fd f951 	bl	80049d8 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007736:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007738:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 800773a:	4669      	mov	r1, sp
 800773c:	0020      	movs	r0, r4
 800773e:	f7fd fa65 	bl	8004c0c <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Base_Start(&htim22);
 8007742:	0020      	movs	r0, r4
 8007744:	f7fd f8cc 	bl	80048e0 <HAL_TIM_Base_Start>
}
 8007748:	b007      	add	sp, #28
 800774a:	bd30      	pop	{r4, r5, pc}
 800774c:	2000344c 	.word	0x2000344c
 8007750:	40011400 	.word	0x40011400
 8007754:	0000fffe 	.word	0x0000fffe

08007758 <MX_DMA_Init>:
{
 8007758:	b500      	push	{lr}
 800775a:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 800775c:	4a0d      	ldr	r2, [pc, #52]	; (8007794 <MX_DMA_Init+0x3c>)
 800775e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007760:	2301      	movs	r3, #1
 8007762:	4319      	orrs	r1, r3
 8007764:	6311      	str	r1, [r2, #48]	; 0x30
 8007766:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007768:	4013      	ands	r3, r2
 800776a:	9301      	str	r3, [sp, #4]
 800776c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 800776e:	2200      	movs	r2, #0
 8007770:	2103      	movs	r1, #3
 8007772:	2009      	movs	r0, #9
 8007774:	f7fb fe10 	bl	8003398 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007778:	2009      	movs	r0, #9
 800777a:	f7fb fe3d 	bl	80033f8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 800777e:	2200      	movs	r2, #0
 8007780:	2103      	movs	r1, #3
 8007782:	200a      	movs	r0, #10
 8007784:	f7fb fe08 	bl	8003398 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8007788:	200a      	movs	r0, #10
 800778a:	f7fb fe35 	bl	80033f8 <HAL_NVIC_EnableIRQ>
}
 800778e:	b003      	add	sp, #12
 8007790:	bd00      	pop	{pc}
 8007792:	46c0      	nop			; (mov r8, r8)
 8007794:	40021000 	.word	0x40021000

08007798 <MX_GPIO_Init>:
{
 8007798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800779a:	46c6      	mov	lr, r8
 800779c:	b500      	push	{lr}
 800779e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077a0:	2214      	movs	r2, #20
 80077a2:	2100      	movs	r1, #0
 80077a4:	a803      	add	r0, sp, #12
 80077a6:	f001 fdbd 	bl	8009324 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80077aa:	4b2b      	ldr	r3, [pc, #172]	; (8007858 <MX_GPIO_Init+0xc0>)
 80077ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ae:	2501      	movs	r5, #1
 80077b0:	432a      	orrs	r2, r5
 80077b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80077b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b6:	402a      	ands	r2, r5
 80077b8:	9201      	str	r2, [sp, #4]
 80077ba:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80077bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077be:	2702      	movs	r7, #2
 80077c0:	433a      	orrs	r2, r7
 80077c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80077c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c6:	403b      	ands	r3, r7
 80077c8:	9302      	str	r3, [sp, #8]
 80077ca:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, WAKE_Pin|RESET_Pin|VMON_CLK_Pin, GPIO_PIN_RESET);
 80077cc:	26a0      	movs	r6, #160	; 0xa0
 80077ce:	05f6      	lsls	r6, r6, #23
 80077d0:	2200      	movs	r2, #0
 80077d2:	4922      	ldr	r1, [pc, #136]	; (800785c <MX_GPIO_Init+0xc4>)
 80077d4:	0030      	movs	r0, r6
 80077d6:	f7fc fa1a 	bl	8003c0e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LDO_OFF_GPIO_Port, LDO_OFF_Pin, GPIO_PIN_SET);
 80077da:	2201      	movs	r2, #1
 80077dc:	2140      	movs	r1, #64	; 0x40
 80077de:	0030      	movs	r0, r6
 80077e0:	f7fc fa15 	bl	8003c0e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_CTRL_Pin|CHR_CTRL_Pin, GPIO_PIN_RESET);
 80077e4:	4b1e      	ldr	r3, [pc, #120]	; (8007860 <MX_GPIO_Init+0xc8>)
 80077e6:	4698      	mov	r8, r3
 80077e8:	2200      	movs	r2, #0
 80077ea:	210a      	movs	r1, #10
 80077ec:	0018      	movs	r0, r3
 80077ee:	f7fc fa0e 	bl	8003c0e <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = WAKE_Pin|LDO_OFF_Pin|RESET_Pin;
 80077f2:	23e0      	movs	r3, #224	; 0xe0
 80077f4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077f6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80077f8:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077fa:	2400      	movs	r4, #0
 80077fc:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077fe:	a903      	add	r1, sp, #12
 8007800:	0030      	movs	r0, r6
 8007802:	f7fc f92f 	bl	8003a64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LDO_OK_Pin|STAT2_Pin|STAT1_Pin;
 8007806:	2331      	movs	r3, #49	; 0x31
 8007808:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800780a:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800780c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800780e:	a903      	add	r1, sp, #12
 8007810:	4640      	mov	r0, r8
 8007812:	f7fc f927 	bl	8003a64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_CTRL_Pin|CHR_CTRL_Pin;
 8007816:	230a      	movs	r3, #10
 8007818:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800781a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800781c:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800781e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007820:	a903      	add	r1, sp, #12
 8007822:	4640      	mov	r0, r8
 8007824:	f7fc f91e 	bl	8003a64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_IND_Pin;
 8007828:	2380      	movs	r3, #128	; 0x80
 800782a:	005b      	lsls	r3, r3, #1
 800782c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800782e:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007830:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(LED_IND_GPIO_Port, &GPIO_InitStruct);
 8007832:	a903      	add	r1, sp, #12
 8007834:	0030      	movs	r0, r6
 8007836:	f7fc f915 	bl	8003a64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VMON_CLK_Pin;
 800783a:	2380      	movs	r3, #128	; 0x80
 800783c:	021b      	lsls	r3, r3, #8
 800783e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007840:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007842:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007844:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(VMON_CLK_GPIO_Port, &GPIO_InitStruct);
 8007846:	a903      	add	r1, sp, #12
 8007848:	0030      	movs	r0, r6
 800784a:	f7fc f90b 	bl	8003a64 <HAL_GPIO_Init>
}
 800784e:	b008      	add	sp, #32
 8007850:	bc80      	pop	{r7}
 8007852:	46b8      	mov	r8, r7
 8007854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007856:	46c0      	nop			; (mov r8, r8)
 8007858:	40021000 	.word	0x40021000
 800785c:	000080a0 	.word	0x000080a0
 8007860:	50000400 	.word	0x50000400

08007864 <eeprom_ram_init>:
{
 8007864:	b510      	push	{r4, lr}
 8007866:	0004      	movs	r4, r0
	memcpy(eeprom, (uint32_t*)EEPROM_BASE_ADDRESS, sizeof(EEPROMStorageTypDef));
 8007868:	2218      	movs	r2, #24
 800786a:	4910      	ldr	r1, [pc, #64]	; (80078ac <eeprom_ram_init+0x48>)
 800786c:	f001 fd51 	bl	8009312 <memcpy>
	crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)eeprom, sizeof(EEPROMStorageTypDef)-sizeof(uint32_t));
 8007870:	2214      	movs	r2, #20
 8007872:	0021      	movs	r1, r4
 8007874:	480e      	ldr	r0, [pc, #56]	; (80078b0 <eeprom_ram_init+0x4c>)
 8007876:	f7fb fe63 	bl	8003540 <HAL_CRC_Calculate>
	if(crc != eeprom->crc)
 800787a:	6963      	ldr	r3, [r4, #20]
 800787c:	4283      	cmp	r3, r0
 800787e:	d00f      	beq.n	80078a0 <eeprom_ram_init+0x3c>
		eeprom->batt_full_mah = FULL_BATT_MAH;
 8007880:	23c8      	movs	r3, #200	; 0xc8
 8007882:	019b      	lsls	r3, r3, #6
 8007884:	81e3      	strh	r3, [r4, #14]
		eeprom->batt_full_mv = FULL_BATT_MV;
 8007886:	4b0b      	ldr	r3, [pc, #44]	; (80078b4 <eeprom_ram_init+0x50>)
 8007888:	81a3      	strh	r3, [r4, #12]
		eeprom->batt_low_mv = BATT_LOW_MV;
 800788a:	4b0b      	ldr	r3, [pc, #44]	; (80078b8 <eeprom_ram_init+0x54>)
 800788c:	8223      	strh	r3, [r4, #16]
		eeprom->vin_hys_mv = VINPUT_HYS;
 800788e:	4b0b      	ldr	r3, [pc, #44]	; (80078bc <eeprom_ram_init+0x58>)
 8007890:	8163      	strh	r3, [r4, #10]
		eeprom->vin_limit_mv = VINPUT_LIMIT;
 8007892:	4b0b      	ldr	r3, [pc, #44]	; (80078c0 <eeprom_ram_init+0x5c>)
 8007894:	8123      	strh	r3, [r4, #8]
		eeprom->total_batt_ouput_ah = 0;
 8007896:	2200      	movs	r2, #0
 8007898:	2300      	movs	r3, #0
 800789a:	6022      	str	r2, [r4, #0]
 800789c:	6063      	str	r3, [r4, #4]
}
 800789e:	bd10      	pop	{r4, pc}
		storage.total_batt_ouput_ah = eeprom->total_batt_ouput_ah;
 80078a0:	6820      	ldr	r0, [r4, #0]
 80078a2:	6861      	ldr	r1, [r4, #4]
 80078a4:	4b07      	ldr	r3, [pc, #28]	; (80078c4 <eeprom_ram_init+0x60>)
 80078a6:	6298      	str	r0, [r3, #40]	; 0x28
 80078a8:	62d9      	str	r1, [r3, #44]	; 0x2c
}
 80078aa:	e7f8      	b.n	800789e <eeprom_ram_init+0x3a>
 80078ac:	08080000 	.word	0x08080000
 80078b0:	20003398 	.word	0x20003398
 80078b4:	00003138 	.word	0x00003138
 80078b8:	00002710 	.word	0x00002710
 80078bc:	00001388 	.word	0x00001388
 80078c0:	000033f4 	.word	0x000033f4
 80078c4:	20003af0 	.word	0x20003af0

080078c8 <eeprom_save>:
{
 80078c8:	b510      	push	{r4, lr}
 80078ca:	0004      	movs	r4, r0
	crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)eeprom, sizeof(EEPROMStorageTypDef)-sizeof(uint32_t));
 80078cc:	2214      	movs	r2, #20
 80078ce:	0001      	movs	r1, r0
 80078d0:	4806      	ldr	r0, [pc, #24]	; (80078ec <eeprom_save+0x24>)
 80078d2:	f7fb fe35 	bl	8003540 <HAL_CRC_Calculate>
	if(eeprom->crc != crc)
 80078d6:	6963      	ldr	r3, [r4, #20]
 80078d8:	4283      	cmp	r3, r0
 80078da:	d100      	bne.n	80078de <eeprom_save+0x16>
}
 80078dc:	bd10      	pop	{r4, pc}
		eeprom->crc = crc;
 80078de:	6160      	str	r0, [r4, #20]
		writeEEPROMData(0, (uint8_t*)eeprom, sizeof(EEPROMStorageTypDef));
 80078e0:	2218      	movs	r2, #24
 80078e2:	0021      	movs	r1, r4
 80078e4:	2000      	movs	r0, #0
 80078e6:	f7ff fc9f 	bl	8007228 <writeEEPROMData>
}
 80078ea:	e7f7      	b.n	80078dc <eeprom_save+0x14>
 80078ec:	20003398 	.word	0x20003398

080078f0 <main>:
{
 80078f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078f2:	46c6      	mov	lr, r8
 80078f4:	b500      	push	{lr}
 80078f6:	b0a4      	sub	sp, #144	; 0x90
  HAL_Init();
 80078f8:	f7fb fa66 	bl	8002dc8 <HAL_Init>
  SystemClock_Config();
 80078fc:	f7ff fe2e 	bl	800755c <SystemClock_Config>
  MX_GPIO_Init();
 8007900:	f7ff ff4a 	bl	8007798 <MX_GPIO_Init>
  MX_DMA_Init();
 8007904:	f7ff ff28 	bl	8007758 <MX_DMA_Init>
  MX_ADC_Init();
 8007908:	f7ff fe6c 	bl	80075e4 <MX_ADC_Init>
  MX_TIM22_Init();
 800790c:	f7ff fef2 	bl	80076f4 <MX_TIM22_Init>
  MX_TIM21_Init();
 8007910:	f7ff fec0 	bl	8007694 <MX_TIM21_Init>
  MX_CRC_Init();
 8007914:	f7ff fdb2 	bl	800747c <MX_CRC_Init>
  MX_USART1_UART_Init();
 8007918:	f7ff fdc2 	bl	80074a0 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 800791c:	f7ff fdd8 	bl	80074d0 <MX_TIM7_Init>
  MX_IWDG_Init();
 8007920:	f7ff fdfa 	bl	8007518 <MX_IWDG_Init>
  MX_NVIC_Init();
 8007924:	f7ff fe0a 	bl	800753c <MX_NVIC_Init>
  eeprom_ram_init(&eeprom_info);
 8007928:	4c35      	ldr	r4, [pc, #212]	; (8007a00 <main+0x110>)
 800792a:	0020      	movs	r0, r4
 800792c:	f7ff ff9a 	bl	8007864 <eeprom_ram_init>
  eeprom_save(&eeprom_info);
 8007930:	0020      	movs	r0, r4
 8007932:	f7ff ffc9 	bl	80078c8 <eeprom_save>
  HAL_IWDG_Refresh(&hiwdg);
 8007936:	4833      	ldr	r0, [pc, #204]	; (8007a04 <main+0x114>)
 8007938:	f7fc f9a4 	bl	8003c84 <HAL_IWDG_Refresh>
 SCP_Init(uart_send_buff, uart_read_byte);
 800793c:	4932      	ldr	r1, [pc, #200]	; (8007a08 <main+0x118>)
 800793e:	4833      	ldr	r0, [pc, #204]	; (8007a0c <main+0x11c>)
 8007940:	f7ff fb80 	bl	8007044 <SCP_Init>
 SCP_InitRx();
 8007944:	f7ff fc2e 	bl	80071a4 <SCP_InitRx>
  led_msg = osMessageCreate (&led_msg_def, LEDControlTaskHandle);
 8007948:	4e31      	ldr	r6, [pc, #196]	; (8007a10 <main+0x120>)
 800794a:	6831      	ldr	r1, [r6, #0]
 800794c:	4831      	ldr	r0, [pc, #196]	; (8007a14 <main+0x124>)
 800794e:	f7fe f864 	bl	8005a1a <osMessageCreate>
 8007952:	4b31      	ldr	r3, [pc, #196]	; (8007a18 <main+0x128>)
 8007954:	6018      	str	r0, [r3, #0]
  ind_msg = osMessageCreate (&ind_msg_def, IndicationTaskHandle);
 8007956:	4b31      	ldr	r3, [pc, #196]	; (8007a1c <main+0x12c>)
 8007958:	4698      	mov	r8, r3
 800795a:	6819      	ldr	r1, [r3, #0]
 800795c:	4830      	ldr	r0, [pc, #192]	; (8007a20 <main+0x130>)
 800795e:	f7fe f85c 	bl	8005a1a <osMessageCreate>
 8007962:	4b30      	ldr	r3, [pc, #192]	; (8007a24 <main+0x134>)
 8007964:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 64);
 8007966:	a81d      	add	r0, sp, #116	; 0x74
 8007968:	4c2f      	ldr	r4, [pc, #188]	; (8007a28 <main+0x138>)
 800796a:	0003      	movs	r3, r0
 800796c:	0022      	movs	r2, r4
 800796e:	caa2      	ldmia	r2!, {r1, r5, r7}
 8007970:	c3a2      	stmia	r3!, {r1, r5, r7}
 8007972:	caa2      	ldmia	r2!, {r1, r5, r7}
 8007974:	c3a2      	stmia	r3!, {r1, r5, r7}
 8007976:	6812      	ldr	r2, [r2, #0]
 8007978:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800797a:	2100      	movs	r1, #0
 800797c:	f7fd ffad 	bl	80058da <osThreadCreate>
 8007980:	4b2a      	ldr	r3, [pc, #168]	; (8007a2c <main+0x13c>)
 8007982:	6018      	str	r0, [r3, #0]
  osThreadDef(ledcontrol, LEDControlTask, osPriorityAboveNormal, 0, 64);
 8007984:	a816      	add	r0, sp, #88	; 0x58
 8007986:	0023      	movs	r3, r4
 8007988:	331c      	adds	r3, #28
 800798a:	0002      	movs	r2, r0
 800798c:	cba2      	ldmia	r3!, {r1, r5, r7}
 800798e:	c2a2      	stmia	r2!, {r1, r5, r7}
 8007990:	cba2      	ldmia	r3!, {r1, r5, r7}
 8007992:	c2a2      	stmia	r2!, {r1, r5, r7}
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	6013      	str	r3, [r2, #0]
  LEDControlTaskHandle = osThreadCreate(osThread(ledcontrol), NULL);
 8007998:	2100      	movs	r1, #0
 800799a:	f7fd ff9e 	bl	80058da <osThreadCreate>
 800799e:	6030      	str	r0, [r6, #0]
  osThreadDef(monitoring, MonitorTask, osPriorityHigh, 0, 64);
 80079a0:	a80f      	add	r0, sp, #60	; 0x3c
 80079a2:	0023      	movs	r3, r4
 80079a4:	3338      	adds	r3, #56	; 0x38
 80079a6:	0002      	movs	r2, r0
 80079a8:	cb62      	ldmia	r3!, {r1, r5, r6}
 80079aa:	c262      	stmia	r2!, {r1, r5, r6}
 80079ac:	cb62      	ldmia	r3!, {r1, r5, r6}
 80079ae:	c262      	stmia	r2!, {r1, r5, r6}
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	6013      	str	r3, [r2, #0]
  MonitorTaskHandle = osThreadCreate(osThread(monitoring), NULL);
 80079b4:	2100      	movs	r1, #0
 80079b6:	f7fd ff90 	bl	80058da <osThreadCreate>
 80079ba:	4b1d      	ldr	r3, [pc, #116]	; (8007a30 <main+0x140>)
 80079bc:	6018      	str	r0, [r3, #0]
  osThreadDef(indication, IndicationTask, osPriorityAboveNormal, 0, 64);
 80079be:	a808      	add	r0, sp, #32
 80079c0:	0023      	movs	r3, r4
 80079c2:	3354      	adds	r3, #84	; 0x54
 80079c4:	0002      	movs	r2, r0
 80079c6:	cb62      	ldmia	r3!, {r1, r5, r6}
 80079c8:	c262      	stmia	r2!, {r1, r5, r6}
 80079ca:	cb62      	ldmia	r3!, {r1, r5, r6}
 80079cc:	c262      	stmia	r2!, {r1, r5, r6}
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6013      	str	r3, [r2, #0]
  IndicationTaskHandle = osThreadCreate(osThread(indication), NULL);
 80079d2:	2100      	movs	r1, #0
 80079d4:	f7fd ff81 	bl	80058da <osThreadCreate>
 80079d8:	4643      	mov	r3, r8
 80079da:	6018      	str	r0, [r3, #0]
  osThreadDef(management, ManagementTask, osPriorityNormal, 0, 1024);
 80079dc:	a801      	add	r0, sp, #4
 80079de:	3470      	adds	r4, #112	; 0x70
 80079e0:	0002      	movs	r2, r0
 80079e2:	cc2a      	ldmia	r4!, {r1, r3, r5}
 80079e4:	c22a      	stmia	r2!, {r1, r3, r5}
 80079e6:	cc2a      	ldmia	r4!, {r1, r3, r5}
 80079e8:	c22a      	stmia	r2!, {r1, r3, r5}
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	6013      	str	r3, [r2, #0]
  ManagementTaskHandle = osThreadCreate(osThread(management), NULL);
 80079ee:	2100      	movs	r1, #0
 80079f0:	f7fd ff73 	bl	80058da <osThreadCreate>
 80079f4:	4b0f      	ldr	r3, [pc, #60]	; (8007a34 <main+0x144>)
 80079f6:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80079f8:	f7fd ff6a 	bl	80058d0 <osKernelStart>
  while (1)
 80079fc:	e7fe      	b.n	80079fc <main+0x10c>
 80079fe:	46c0      	nop			; (mov r8, r8)
 8007a00:	20003370 	.word	0x20003370
 8007a04:	20003388 	.word	0x20003388
 8007a08:	08008811 	.word	0x08008811
 8007a0c:	080087fd 	.word	0x080087fd
 8007a10:	20003360 	.word	0x20003360
 8007a14:	0800e36c 	.word	0x0800e36c
 8007a18:	20003364 	.word	0x20003364
 8007a1c:	20003358 	.word	0x20003358
 8007a20:	0800e35c 	.word	0x0800e35c
 8007a24:	2000335c 	.word	0x2000335c
 8007a28:	0800e1d8 	.word	0x0800e1d8
 8007a2c:	20003368 	.word	0x20003368
 8007a30:	20003b28 	.word	0x20003b28
 8007a34:	20003638 	.word	0x20003638

08007a38 <HAL_UART_RxCpltCallback>:
{
 8007a38:	b510      	push	{r4, lr}
  if(huart->Instance == USART1)
 8007a3a:	6802      	ldr	r2, [r0, #0]
 8007a3c:	4b04      	ldr	r3, [pc, #16]	; (8007a50 <HAL_UART_RxCpltCallback+0x18>)
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d000      	beq.n	8007a44 <HAL_UART_RxCpltCallback+0xc>
}
 8007a42:	bd10      	pop	{r4, pc}
    SCP_ByteReceived(aRxBuffer);
 8007a44:	4b03      	ldr	r3, [pc, #12]	; (8007a54 <HAL_UART_RxCpltCallback+0x1c>)
 8007a46:	7818      	ldrb	r0, [r3, #0]
 8007a48:	f7ff fbba 	bl	80071c0 <SCP_ByteReceived>
}
 8007a4c:	e7f9      	b.n	8007a42 <HAL_UART_RxCpltCallback+0xa>
 8007a4e:	46c0      	nop			; (mov r8, r8)
 8007a50:	40013800 	.word	0x40013800
 8007a54:	20003510 	.word	0x20003510

08007a58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a58:	b510      	push	{r4, lr}
 8007a5a:	0004      	movs	r4, r0
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8007a5c:	2380      	movs	r3, #128	; 0x80
 8007a5e:	05db      	lsls	r3, r3, #23
 8007a60:	6802      	ldr	r2, [r0, #0]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d008      	beq.n	8007a78 <HAL_TIM_PeriodElapsedCallback+0x20>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM21)
 8007a66:	4b0b      	ldr	r3, [pc, #44]	; (8007a94 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8007a68:	6822      	ldr	r2, [r4, #0]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d007      	beq.n	8007a7e <HAL_TIM_PeriodElapsedCallback+0x26>
  {
	  osSignalSet (MonitorTaskHandle, 0x00000001);
  }

  if (htim->Instance == TIM7)
 8007a6e:	6822      	ldr	r2, [r4, #0]
 8007a70:	4b09      	ldr	r3, [pc, #36]	; (8007a98 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d009      	beq.n	8007a8a <HAL_TIM_PeriodElapsedCallback+0x32>
  {
	  SCP_Tick(10);
  }

  /* USER CODE END Callback 1 */
}
 8007a76:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8007a78:	f7fb f9ba 	bl	8002df0 <HAL_IncTick>
 8007a7c:	e7f3      	b.n	8007a66 <HAL_TIM_PeriodElapsedCallback+0xe>
	  osSignalSet (MonitorTaskHandle, 0x00000001);
 8007a7e:	4b07      	ldr	r3, [pc, #28]	; (8007a9c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8007a80:	6818      	ldr	r0, [r3, #0]
 8007a82:	2101      	movs	r1, #1
 8007a84:	f7fd ff6c 	bl	8005960 <osSignalSet>
 8007a88:	e7f1      	b.n	8007a6e <HAL_TIM_PeriodElapsedCallback+0x16>
	  SCP_Tick(10);
 8007a8a:	200a      	movs	r0, #10
 8007a8c:	f7ff faba 	bl	8007004 <SCP_Tick>
}
 8007a90:	e7f1      	b.n	8007a76 <HAL_TIM_PeriodElapsedCallback+0x1e>
 8007a92:	46c0      	nop			; (mov r8, r8)
 8007a94:	40010800 	.word	0x40010800
 8007a98:	40001400 	.word	0x40001400
 8007a9c:	20003b28 	.word	0x20003b28

08007aa0 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007aa0:	4770      	bx	lr
	...

08007aa4 <charger_enable>:
		}
	}
}

void charger_enable(void)
{
 8007aa4:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(CHR_CTRL_GPIO_Port, CHR_CTRL_Pin, GPIO_PIN_RESET);
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	2108      	movs	r1, #8
 8007aaa:	4802      	ldr	r0, [pc, #8]	; (8007ab4 <charger_enable+0x10>)
 8007aac:	f7fc f8af 	bl	8003c0e <HAL_GPIO_WritePin>
}
 8007ab0:	bd10      	pop	{r4, pc}
 8007ab2:	46c0      	nop			; (mov r8, r8)
 8007ab4:	50000400 	.word	0x50000400

08007ab8 <charger_disable>:
void charger_disable(void)
{
 8007ab8:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(CHR_CTRL_GPIO_Port, CHR_CTRL_Pin, GPIO_PIN_SET);
 8007aba:	2201      	movs	r2, #1
 8007abc:	2108      	movs	r1, #8
 8007abe:	4802      	ldr	r0, [pc, #8]	; (8007ac8 <charger_disable+0x10>)
 8007ac0:	f7fc f8a5 	bl	8003c0e <HAL_GPIO_WritePin>
}
 8007ac4:	bd10      	pop	{r4, pc}
 8007ac6:	46c0      	nop			; (mov r8, r8)
 8007ac8:	50000400 	.word	0x50000400

08007acc <charger_status>:

ch_state_t charger_status(void)
{
 8007acc:	b510      	push	{r4, lr}
	_Bool stat1;
	_Bool stat2;

	/*Read STAT1 pin*/
	if(HAL_GPIO_ReadPin(STAT1_GPIO_Port, STAT1_Pin) == GPIO_PIN_RESET)
 8007ace:	2120      	movs	r1, #32
 8007ad0:	4813      	ldr	r0, [pc, #76]	; (8007b20 <charger_status+0x54>)
 8007ad2:	f7fc f895 	bl	8003c00 <HAL_GPIO_ReadPin>
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	d115      	bne.n	8007b06 <charger_status+0x3a>
		{stat1 = 0;}
 8007ada:	2400      	movs	r4, #0
	else
		{stat1 = 1;}

	/*Read STAT2 pin*/
	if(HAL_GPIO_ReadPin(STAT2_GPIO_Port, STAT2_Pin) == GPIO_PIN_RESET)
 8007adc:	2110      	movs	r1, #16
 8007ade:	4810      	ldr	r0, [pc, #64]	; (8007b20 <charger_status+0x54>)
 8007ae0:	f7fc f88e 	bl	8003c00 <HAL_GPIO_ReadPin>
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	d110      	bne.n	8007b0a <charger_status+0x3e>
		{stat2 = 0;}
 8007ae8:	2300      	movs	r3, #0
	else
		{stat2 = 1;}

	/*Decode logic*/
	if(stat1 && !stat2)
 8007aea:	2c00      	cmp	r4, #0
 8007aec:	d001      	beq.n	8007af2 <charger_status+0x26>
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00d      	beq.n	8007b0e <charger_status+0x42>
	{
		return IN_PROGRESS;
	}
	if(!stat1 && stat2)
 8007af2:	2c00      	cmp	r4, #0
 8007af4:	d101      	bne.n	8007afa <charger_status+0x2e>
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d10b      	bne.n	8007b12 <charger_status+0x46>
	{
		return COMPLETED;
	}
	if(!stat1 && !stat2)
 8007afa:	2c00      	cmp	r4, #0
 8007afc:	d10b      	bne.n	8007b16 <charger_status+0x4a>
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00b      	beq.n	8007b1a <charger_status+0x4e>
	{
		return INACTIVE;
	}

	return UNKNOWN;
 8007b02:	2002      	movs	r0, #2
}
 8007b04:	bd10      	pop	{r4, pc}
		{stat1 = 1;}
 8007b06:	2401      	movs	r4, #1
 8007b08:	e7e8      	b.n	8007adc <charger_status+0x10>
		{stat2 = 1;}
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e7ed      	b.n	8007aea <charger_status+0x1e>
		return IN_PROGRESS;
 8007b0e:	2001      	movs	r0, #1
 8007b10:	e7f8      	b.n	8007b04 <charger_status+0x38>
		return COMPLETED;
 8007b12:	2000      	movs	r0, #0
 8007b14:	e7f6      	b.n	8007b04 <charger_status+0x38>
	return UNKNOWN;
 8007b16:	2002      	movs	r0, #2
 8007b18:	e7f4      	b.n	8007b04 <charger_status+0x38>
		return INACTIVE;
 8007b1a:	2001      	movs	r0, #1
 8007b1c:	4240      	negs	r0, r0
 8007b1e:	e7f1      	b.n	8007b04 <charger_status+0x38>
 8007b20:	50000400 	.word	0x50000400

08007b24 <load_setup>:

uint32_t load_setup(uint32_t capacity, uint32_t nightitme)
{
 8007b24:	b570      	push	{r4, r5, r6, lr}
 8007b26:	000e      	movs	r6, r1
	float capfix;

	/*BMS decreases the capacity?*/
	//capfix = (COEFF_K * capacity) - COEFF_B;

	capfix = 0.70 * capacity;
 8007b28:	f7fb f876 	bl	8002c18 <__aeabi_ui2d>
 8007b2c:	4a15      	ldr	r2, [pc, #84]	; (8007b84 <load_setup+0x60>)
 8007b2e:	4b16      	ldr	r3, [pc, #88]	; (8007b88 <load_setup+0x64>)
 8007b30:	f7fa f9f0 	bl	8001f14 <__aeabi_dmul>
 8007b34:	f7fb f896 	bl	8002c64 <__aeabi_d2f>
	capacity = (uint32_t)capfix;
 8007b38:	f7f8 fd38 	bl	80005ac <__aeabi_f2uiz>
		osMessagePut(led_msg, intensity, osWaitForever);
		return intensity;
	}

	/*Convert capacity to mAs*/
	mAseconds = capacity*3600;
 8007b3c:	0105      	lsls	r5, r0, #4
 8007b3e:	1a28      	subs	r0, r5, r0
 8007b40:	0105      	lsls	r5, r0, #4
 8007b42:	1a2d      	subs	r5, r5, r0
 8007b44:	012d      	lsls	r5, r5, #4

	/*Look for load to have LEDs operational over night time*/
	for(intensity = 0; intensity < 32; intensity++)
 8007b46:	2400      	movs	r4, #0
 8007b48:	2c1f      	cmp	r4, #31
 8007b4a:	d819      	bhi.n	8007b80 <load_setup+0x5c>
	{
		osMessagePut(led_msg, intensity, osWaitForever);
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	4b0f      	ldr	r3, [pc, #60]	; (8007b8c <load_setup+0x68>)
 8007b50:	6818      	ldr	r0, [r3, #0]
 8007b52:	4252      	negs	r2, r2
 8007b54:	0021      	movs	r1, r4
 8007b56:	f7fd ff77 	bl	8005a48 <osMessagePut>
		osDelay(300);
 8007b5a:	2096      	movs	r0, #150	; 0x96
 8007b5c:	0040      	lsls	r0, r0, #1
 8007b5e:	f7fd fef6 	bl	800594e <osDelay>
		if(storage.coutput_ma*nightitme > mAseconds)
 8007b62:	4b0b      	ldr	r3, [pc, #44]	; (8007b90 <load_setup+0x6c>)
 8007b64:	69db      	ldr	r3, [r3, #28]
 8007b66:	4373      	muls	r3, r6
 8007b68:	42ab      	cmp	r3, r5
 8007b6a:	d801      	bhi.n	8007b70 <load_setup+0x4c>
	for(intensity = 0; intensity < 32; intensity++)
 8007b6c:	3401      	adds	r4, #1
 8007b6e:	e7eb      	b.n	8007b48 <load_setup+0x24>
		{
			osMessagePut(led_msg, intensity-1, osWaitForever);
 8007b70:	3c01      	subs	r4, #1
 8007b72:	2201      	movs	r2, #1
 8007b74:	4b05      	ldr	r3, [pc, #20]	; (8007b8c <load_setup+0x68>)
 8007b76:	6818      	ldr	r0, [r3, #0]
 8007b78:	4252      	negs	r2, r2
 8007b7a:	0021      	movs	r1, r4
 8007b7c:	f7fd ff64 	bl	8005a48 <osMessagePut>
			return intensity-1;
		}
	}

	return intensity;
}
 8007b80:	0020      	movs	r0, r4
 8007b82:	bd70      	pop	{r4, r5, r6, pc}
 8007b84:	66666666 	.word	0x66666666
 8007b88:	3fe66666 	.word	0x3fe66666
 8007b8c:	20003364 	.word	0x20003364
 8007b90:	20003af0 	.word	0x20003af0

08007b94 <ManagementTask>:
{
 8007b94:	b570      	push	{r4, r5, r6, lr}
 8007b96:	e064      	b.n	8007c62 <ManagementTask+0xce>
				charger_enable();
 8007b98:	f7ff ff84 	bl	8007aa4 <charger_enable>
				osDelay(5000);
 8007b9c:	488f      	ldr	r0, [pc, #572]	; (8007ddc <ManagementTask+0x248>)
 8007b9e:	f7fd fed6 	bl	800594e <osDelay>
				ch_status = charger_status();
 8007ba2:	f7ff ff93 	bl	8007acc <charger_status>
				while(ch_status == IN_PROGRESS)
 8007ba6:	2801      	cmp	r0, #1
 8007ba8:	d116      	bne.n	8007bd8 <ManagementTask+0x44>
					osDelay(1000);
 8007baa:	20fa      	movs	r0, #250	; 0xfa
 8007bac:	0080      	lsls	r0, r0, #2
 8007bae:	f7fd fece 	bl	800594e <osDelay>
					discharge_lock = 0;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	4a8a      	ldr	r2, [pc, #552]	; (8007de0 <ManagementTask+0x24c>)
 8007bb6:	7013      	strb	r3, [r2, #0]
					battery_charged = 0;
 8007bb8:	4a8a      	ldr	r2, [pc, #552]	; (8007de4 <ManagementTask+0x250>)
 8007bba:	7013      	strb	r3, [r2, #0]
					osMessagePut(ind_msg, IND_RED, osWaitForever);
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	4b8a      	ldr	r3, [pc, #552]	; (8007de8 <ManagementTask+0x254>)
 8007bc0:	6818      	ldr	r0, [r3, #0]
 8007bc2:	4252      	negs	r2, r2
 8007bc4:	2102      	movs	r1, #2
 8007bc6:	f7fd ff3f 	bl	8005a48 <osMessagePut>
					ch_status = charger_status();
 8007bca:	f7ff ff7f 	bl	8007acc <charger_status>
					if(!storage.daytime_flag)/*Fail-safe*/
 8007bce:	4a87      	ldr	r2, [pc, #540]	; (8007dec <ManagementTask+0x258>)
 8007bd0:	2335      	movs	r3, #53	; 0x35
 8007bd2:	5cd3      	ldrb	r3, [r2, r3]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1e6      	bne.n	8007ba6 <ManagementTask+0x12>
				if(ch_status == COMPLETED)
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	d110      	bne.n	8007bfe <ManagementTask+0x6a>
					battery_charged = 1;
 8007bdc:	4b81      	ldr	r3, [pc, #516]	; (8007de4 <ManagementTask+0x250>)
 8007bde:	2201      	movs	r2, #1
 8007be0:	701a      	strb	r2, [r3, #0]
					discharge_lock = 0;
 8007be2:	4b7f      	ldr	r3, [pc, #508]	; (8007de0 <ManagementTask+0x24c>)
 8007be4:	2200      	movs	r2, #0
 8007be6:	701a      	strb	r2, [r3, #0]
					osMessagePut(ind_msg, IND_GREEN, osWaitForever);
 8007be8:	3201      	adds	r2, #1
 8007bea:	4b7f      	ldr	r3, [pc, #508]	; (8007de8 <ManagementTask+0x254>)
 8007bec:	6818      	ldr	r0, [r3, #0]
 8007bee:	4252      	negs	r2, r2
 8007bf0:	2101      	movs	r1, #1
 8007bf2:	f7fd ff29 	bl	8005a48 <osMessagePut>
					storage.energy_stored_mah = FULL_BATT_MAH;
 8007bf6:	4b7d      	ldr	r3, [pc, #500]	; (8007dec <ManagementTask+0x258>)
 8007bf8:	4a7d      	ldr	r2, [pc, #500]	; (8007df0 <ManagementTask+0x25c>)
 8007bfa:	621a      	str	r2, [r3, #32]
 8007bfc:	e02c      	b.n	8007c58 <ManagementTask+0xc4>
					osMessagePut(ind_msg, IND_RED, osWaitForever);
 8007bfe:	2501      	movs	r5, #1
 8007c00:	426d      	negs	r5, r5
 8007c02:	4e79      	ldr	r6, [pc, #484]	; (8007de8 <ManagementTask+0x254>)
 8007c04:	002a      	movs	r2, r5
 8007c06:	2102      	movs	r1, #2
 8007c08:	6830      	ldr	r0, [r6, #0]
 8007c0a:	f7fd ff1d 	bl	8005a48 <osMessagePut>
					charger_disable();
 8007c0e:	f7ff ff53 	bl	8007ab8 <charger_disable>
					osDelay(5000);
 8007c12:	4c72      	ldr	r4, [pc, #456]	; (8007ddc <ManagementTask+0x248>)
 8007c14:	0020      	movs	r0, r4
 8007c16:	f7fd fe9a 	bl	800594e <osDelay>
					osMessagePut(ind_msg, IND_OFF, osWaitForever);
 8007c1a:	6830      	ldr	r0, [r6, #0]
 8007c1c:	002a      	movs	r2, r5
 8007c1e:	2100      	movs	r1, #0
 8007c20:	f7fd ff12 	bl	8005a48 <osMessagePut>
					charger_enable();
 8007c24:	f7ff ff3e 	bl	8007aa4 <charger_enable>
					osDelay(5000);
 8007c28:	0020      	movs	r0, r4
 8007c2a:	f7fd fe90 	bl	800594e <osDelay>
 8007c2e:	e013      	b.n	8007c58 <ManagementTask+0xc4>
			charger_disable();
 8007c30:	f7ff ff42 	bl	8007ab8 <charger_disable>
			osMessagePut(ind_msg, IND_OFF, osWaitForever);
 8007c34:	2401      	movs	r4, #1
 8007c36:	4264      	negs	r4, r4
 8007c38:	4b6b      	ldr	r3, [pc, #428]	; (8007de8 <ManagementTask+0x254>)
 8007c3a:	6818      	ldr	r0, [r3, #0]
 8007c3c:	0022      	movs	r2, r4
 8007c3e:	2100      	movs	r1, #0
 8007c40:	f7fd ff02 	bl	8005a48 <osMessagePut>
			osMessagePut(led_msg, 0, osWaitForever);
 8007c44:	4b6b      	ldr	r3, [pc, #428]	; (8007df4 <ManagementTask+0x260>)
 8007c46:	6818      	ldr	r0, [r3, #0]
 8007c48:	0022      	movs	r2, r4
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	f7fd fefc 	bl	8005a48 <osMessagePut>
			if(!discharge_lock)
 8007c50:	4b63      	ldr	r3, [pc, #396]	; (8007de0 <ManagementTask+0x24c>)
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d021      	beq.n	8007c9c <ManagementTask+0x108>
		if(battery_charged)
 8007c58:	4b62      	ldr	r3, [pc, #392]	; (8007de4 <ManagementTask+0x250>)
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d000      	beq.n	8007c62 <ManagementTask+0xce>
 8007c60:	e09f      	b.n	8007da2 <ManagementTask+0x20e>
		osDelay(1000);
 8007c62:	20fa      	movs	r0, #250	; 0xfa
 8007c64:	0080      	lsls	r0, r0, #2
 8007c66:	f7fd fe72 	bl	800594e <osDelay>
		if(storage.daytime_flag)
 8007c6a:	4a60      	ldr	r2, [pc, #384]	; (8007dec <ManagementTask+0x258>)
 8007c6c:	2335      	movs	r3, #53	; 0x35
 8007c6e:	5cd3      	ldrb	r3, [r2, r3]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d0dd      	beq.n	8007c30 <ManagementTask+0x9c>
			if(storage.vinput_mv+100 > MPPT_MV)
 8007c74:	68d3      	ldr	r3, [r2, #12]
 8007c76:	0019      	movs	r1, r3
 8007c78:	3164      	adds	r1, #100	; 0x64
 8007c7a:	4a5f      	ldr	r2, [pc, #380]	; (8007df8 <ManagementTask+0x264>)
 8007c7c:	4291      	cmp	r1, r2
 8007c7e:	d88b      	bhi.n	8007b98 <ManagementTask+0x4>
			else if(storage.vinput_mv-100 < MPPT_MV)
 8007c80:	3b64      	subs	r3, #100	; 0x64
 8007c82:	4a5e      	ldr	r2, [pc, #376]	; (8007dfc <ManagementTask+0x268>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d8e7      	bhi.n	8007c58 <ManagementTask+0xc4>
				charger_disable();
 8007c88:	f7ff ff16 	bl	8007ab8 <charger_disable>
				osMessagePut(ind_msg, IND_OFF, osWaitForever);
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	4b56      	ldr	r3, [pc, #344]	; (8007de8 <ManagementTask+0x254>)
 8007c90:	6818      	ldr	r0, [r3, #0]
 8007c92:	4252      	negs	r2, r2
 8007c94:	2100      	movs	r1, #0
 8007c96:	f7fd fed7 	bl	8005a48 <osMessagePut>
 8007c9a:	e7dd      	b.n	8007c58 <ManagementTask+0xc4>
				if(storage.daylength_s < MIN_DAY_DUR)
 8007c9c:	4b53      	ldr	r3, [pc, #332]	; (8007dec <ManagementTask+0x258>)
 8007c9e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8007ca0:	4b57      	ldr	r3, [pc, #348]	; (8007e00 <ManagementTask+0x26c>)
 8007ca2:	429d      	cmp	r5, r3
 8007ca4:	d914      	bls.n	8007cd0 <ManagementTask+0x13c>
				else if(battery_charged)
 8007ca6:	4b4f      	ldr	r3, [pc, #316]	; (8007de4 <ManagementTask+0x250>)
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d156      	bne.n	8007d5c <ManagementTask+0x1c8>
					storage.energy_stored_mah -= storage.energy_released_mah;
 8007cae:	4e4f      	ldr	r6, [pc, #316]	; (8007dec <ManagementTask+0x258>)
 8007cb0:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8007cb2:	6a30      	ldr	r0, [r6, #32]
 8007cb4:	f7f8 ffd6 	bl	8000c64 <__aeabi_fsub>
 8007cb8:	1c04      	adds	r4, r0, #0
 8007cba:	6230      	str	r0, [r6, #32]
					storage.energy_released_mah = 0;
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	6271      	str	r1, [r6, #36]	; 0x24
					if(storage.energy_stored_mah > 0)
 8007cc0:	f7f8 fc18 	bl	80004f4 <__aeabi_fcmpgt>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	d153      	bne.n	8007d70 <ManagementTask+0x1dc>
						storage.energy_stored_mah = 0;
 8007cc8:	4b48      	ldr	r3, [pc, #288]	; (8007dec <ManagementTask+0x258>)
 8007cca:	2200      	movs	r2, #0
 8007ccc:	621a      	str	r2, [r3, #32]
 8007cce:	e007      	b.n	8007ce0 <ManagementTask+0x14c>
					storage.led_level = load_setup(HALF_BATT_MAH, HOURS_24);
 8007cd0:	20c8      	movs	r0, #200	; 0xc8
 8007cd2:	494c      	ldr	r1, [pc, #304]	; (8007e04 <ManagementTask+0x270>)
 8007cd4:	0140      	lsls	r0, r0, #5
 8007cd6:	f7ff ff25 	bl	8007b24 <load_setup>
 8007cda:	4a44      	ldr	r2, [pc, #272]	; (8007dec <ManagementTask+0x258>)
 8007cdc:	2334      	movs	r3, #52	; 0x34
 8007cde:	54d0      	strb	r0, [r2, r3]
				osMessagePut(ind_msg, IND_RED, osWaitForever);
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	4b41      	ldr	r3, [pc, #260]	; (8007de8 <ManagementTask+0x254>)
 8007ce4:	6818      	ldr	r0, [r3, #0]
 8007ce6:	4252      	negs	r2, r2
 8007ce8:	2102      	movs	r1, #2
 8007cea:	f7fd fead 	bl	8005a48 <osMessagePut>
				modem_data.day_lenght_store = storage.daylength_s;
 8007cee:	4b3f      	ldr	r3, [pc, #252]	; (8007dec <ManagementTask+0x258>)
 8007cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cf2:	4b45      	ldr	r3, [pc, #276]	; (8007e08 <ManagementTask+0x274>)
 8007cf4:	66da      	str	r2, [r3, #108]	; 0x6c
					osDelay(1000);
 8007cf6:	20fa      	movs	r0, #250	; 0xfa
 8007cf8:	0080      	lsls	r0, r0, #2
 8007cfa:	f7fd fe28 	bl	800594e <osDelay>
					if(storage.daytime_flag)
 8007cfe:	4a3b      	ldr	r2, [pc, #236]	; (8007dec <ManagementTask+0x258>)
 8007d00:	2335      	movs	r3, #53	; 0x35
 8007d02:	5cd3      	ldrb	r3, [r2, r3]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d106      	bne.n	8007d16 <ManagementTask+0x182>
					if(storage.vbatt_mv < BATT_LOW_MV)
 8007d08:	6912      	ldr	r2, [r2, #16]
 8007d0a:	4b40      	ldr	r3, [pc, #256]	; (8007e0c <ManagementTask+0x278>)
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d8f2      	bhi.n	8007cf6 <ManagementTask+0x162>
						discharge_lock = 1;
 8007d10:	4b33      	ldr	r3, [pc, #204]	; (8007de0 <ManagementTask+0x24c>)
 8007d12:	2201      	movs	r2, #1
 8007d14:	701a      	strb	r2, [r3, #0]
				osMessagePut(led_msg, 0, osWaitForever);
 8007d16:	2401      	movs	r4, #1
 8007d18:	4264      	negs	r4, r4
 8007d1a:	4b36      	ldr	r3, [pc, #216]	; (8007df4 <ManagementTask+0x260>)
 8007d1c:	6818      	ldr	r0, [r3, #0]
 8007d1e:	0022      	movs	r2, r4
 8007d20:	2100      	movs	r1, #0
 8007d22:	f7fd fe91 	bl	8005a48 <osMessagePut>
				osMessagePut(ind_msg, IND_OFF, osWaitForever);
 8007d26:	4b30      	ldr	r3, [pc, #192]	; (8007de8 <ManagementTask+0x254>)
 8007d28:	6818      	ldr	r0, [r3, #0]
 8007d2a:	0022      	movs	r2, r4
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	f7fd fe8b 	bl	8005a48 <osMessagePut>
				eeprom_info.total_batt_ouput_ah = storage.total_batt_ouput_ah;
 8007d32:	4c2e      	ldr	r4, [pc, #184]	; (8007dec <ManagementTask+0x258>)
 8007d34:	4836      	ldr	r0, [pc, #216]	; (8007e10 <ManagementTask+0x27c>)
 8007d36:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007d38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007d3a:	6002      	str	r2, [r0, #0]
 8007d3c:	6043      	str	r3, [r0, #4]
				eeprom_save(&eeprom_info);
 8007d3e:	f7ff fdc3 	bl	80078c8 <eeprom_save>
				if(storage.vbatt_mv > BATT_LOW_MV - 500)
 8007d42:	6922      	ldr	r2, [r4, #16]
 8007d44:	4b33      	ldr	r3, [pc, #204]	; (8007e14 <ManagementTask+0x280>)
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d829      	bhi.n	8007d9e <ManagementTask+0x20a>
				battery_charged = 0;
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	4b25      	ldr	r3, [pc, #148]	; (8007de4 <ManagementTask+0x250>)
 8007d4e:	701a      	strb	r2, [r3, #0]
				storage.daylength_s = 0;
 8007d50:	4b26      	ldr	r3, [pc, #152]	; (8007dec <ManagementTask+0x258>)
 8007d52:	631a      	str	r2, [r3, #48]	; 0x30
				storage.energy_stored_mah = 0;
 8007d54:	2200      	movs	r2, #0
 8007d56:	621a      	str	r2, [r3, #32]
				storage.energy_released_mah = 0;
 8007d58:	625a      	str	r2, [r3, #36]	; 0x24
 8007d5a:	e77d      	b.n	8007c58 <ManagementTask+0xc4>
					storage.led_level = load_setup(FULL_BATT_MAH, HOURS_24 - storage.daylength_s);
 8007d5c:	4929      	ldr	r1, [pc, #164]	; (8007e04 <ManagementTask+0x270>)
 8007d5e:	1b49      	subs	r1, r1, r5
 8007d60:	20c8      	movs	r0, #200	; 0xc8
 8007d62:	0180      	lsls	r0, r0, #6
 8007d64:	f7ff fede 	bl	8007b24 <load_setup>
 8007d68:	4a20      	ldr	r2, [pc, #128]	; (8007dec <ManagementTask+0x258>)
 8007d6a:	2334      	movs	r3, #52	; 0x34
 8007d6c:	54d0      	strb	r0, [r2, r3]
 8007d6e:	e7b7      	b.n	8007ce0 <ManagementTask+0x14c>
						storage.led_level = load_setup(storage.energy_stored_mah, HOURS_24 - storage.daylength_s);
 8007d70:	4b24      	ldr	r3, [pc, #144]	; (8007e04 <ManagementTask+0x270>)
 8007d72:	1b5d      	subs	r5, r3, r5
 8007d74:	1c20      	adds	r0, r4, #0
 8007d76:	f7f8 fc19 	bl	80005ac <__aeabi_f2uiz>
 8007d7a:	0029      	movs	r1, r5
 8007d7c:	f7ff fed2 	bl	8007b24 <load_setup>
 8007d80:	4a1a      	ldr	r2, [pc, #104]	; (8007dec <ManagementTask+0x258>)
 8007d82:	2334      	movs	r3, #52	; 0x34
 8007d84:	54d0      	strb	r0, [r2, r3]
 8007d86:	e7ab      	b.n	8007ce0 <ManagementTask+0x14c>
					for(i = 0; i < 5; i++)
 8007d88:	3401      	adds	r4, #1
 8007d8a:	b2e4      	uxtb	r4, r4
 8007d8c:	2c04      	cmp	r4, #4
 8007d8e:	d8dc      	bhi.n	8007d4a <ManagementTask+0x1b6>
						sts = TelitCloudUpload();
 8007d90:	f000 fd48 	bl	8008824 <TelitCloudUpload>
						if(sts == UPLOAD_OK)
 8007d94:	2800      	cmp	r0, #0
 8007d96:	d0d8      	beq.n	8007d4a <ManagementTask+0x1b6>
						if(sts == MODEM_NO_OPERATOR_PRESENT)
 8007d98:	2808      	cmp	r0, #8
 8007d9a:	d1f5      	bne.n	8007d88 <ManagementTask+0x1f4>
 8007d9c:	e7d5      	b.n	8007d4a <ManagementTask+0x1b6>
					for(i = 0; i < 5; i++)
 8007d9e:	2400      	movs	r4, #0
 8007da0:	e7f4      	b.n	8007d8c <ManagementTask+0x1f8>
			if(storage.coutput_ma > max_idle_current)
 8007da2:	4b12      	ldr	r3, [pc, #72]	; (8007dec <ManagementTask+0x258>)
 8007da4:	69db      	ldr	r3, [r3, #28]
 8007da6:	4a1c      	ldr	r2, [pc, #112]	; (8007e18 <ManagementTask+0x284>)
 8007da8:	6812      	ldr	r2, [r2, #0]
 8007daa:	4293      	cmp	r3, r2
 8007dac:	dd01      	ble.n	8007db2 <ManagementTask+0x21e>
				max_idle_current = storage.coutput_ma;
 8007dae:	4a1a      	ldr	r2, [pc, #104]	; (8007e18 <ManagementTask+0x284>)
 8007db0:	6013      	str	r3, [r2, #0]
			if(max_idle_current > IDLE_CURR_MA)
 8007db2:	4b19      	ldr	r3, [pc, #100]	; (8007e18 <ManagementTask+0x284>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b14      	cmp	r3, #20
 8007db8:	dd04      	ble.n	8007dc4 <ManagementTask+0x230>
				max_idle_current = 0;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	4a16      	ldr	r2, [pc, #88]	; (8007e18 <ManagementTask+0x284>)
 8007dbe:	6013      	str	r3, [r2, #0]
				battery_charged = 0;
 8007dc0:	4a08      	ldr	r2, [pc, #32]	; (8007de4 <ManagementTask+0x250>)
 8007dc2:	7013      	strb	r3, [r2, #0]
			if(storage.energy_released_mah > IDLE_CURR_MAH)
 8007dc4:	4b09      	ldr	r3, [pc, #36]	; (8007dec <ManagementTask+0x258>)
 8007dc6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007dc8:	4914      	ldr	r1, [pc, #80]	; (8007e1c <ManagementTask+0x288>)
 8007dca:	f7f8 fb93 	bl	80004f4 <__aeabi_fcmpgt>
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	d100      	bne.n	8007dd4 <ManagementTask+0x240>
 8007dd2:	e746      	b.n	8007c62 <ManagementTask+0xce>
				battery_charged = 0;
 8007dd4:	4b03      	ldr	r3, [pc, #12]	; (8007de4 <ManagementTask+0x250>)
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	701a      	strb	r2, [r3, #0]
 8007dda:	e742      	b.n	8007c62 <ManagementTask+0xce>
 8007ddc:	00001388 	.word	0x00001388
 8007de0:	20002471 	.word	0x20002471
 8007de4:	20002470 	.word	0x20002470
 8007de8:	2000335c 	.word	0x2000335c
 8007dec:	20003af0 	.word	0x20003af0
 8007df0:	46480000 	.word	0x46480000
 8007df4:	20003364 	.word	0x20003364
 8007df8:	0000445c 	.word	0x0000445c
 8007dfc:	0000445b 	.word	0x0000445b
 8007e00:	0000464f 	.word	0x0000464f
 8007e04:	00015180 	.word	0x00015180
 8007e08:	20003a3c 	.word	0x20003a3c
 8007e0c:	0000270f 	.word	0x0000270f
 8007e10:	20003370 	.word	0x20003370
 8007e14:	0000251c 	.word	0x0000251c
 8007e18:	20002474 	.word	0x20002474
 8007e1c:	43480000 	.word	0x43480000

08007e20 <ContextDisconnect>:

    return false;
}

static _Bool ContextDisconnect(void)
{
 8007e20:	b510      	push	{r4, lr}
  char *result = NULL;
  result = SCP_SendCommandWaitAnswer("AT+CGACT=1,0\r\n", "OK", 1000, 1);
 8007e22:	22fa      	movs	r2, #250	; 0xfa
 8007e24:	2301      	movs	r3, #1
 8007e26:	0092      	lsls	r2, r2, #2
 8007e28:	4904      	ldr	r1, [pc, #16]	; (8007e3c <ContextDisconnect+0x1c>)
 8007e2a:	4805      	ldr	r0, [pc, #20]	; (8007e40 <ContextDisconnect+0x20>)
 8007e2c:	f7ff f976 	bl	800711c <SCP_SendCommandWaitAnswer>
  if(result)
 8007e30:	2800      	cmp	r0, #0
 8007e32:	d001      	beq.n	8007e38 <ContextDisconnect+0x18>
  {
    return true;
 8007e34:	2001      	movs	r0, #1
  }
  else return false;
}
 8007e36:	bd10      	pop	{r4, pc}
  else return false;
 8007e38:	2000      	movs	r0, #0
 8007e3a:	e7fc      	b.n	8007e36 <ContextDisconnect+0x16>
 8007e3c:	0800e3b8 	.word	0x0800e3b8
 8007e40:	0800e3bc 	.word	0x0800e3bc

08007e44 <GetIMEI>:
    return NULL;
}

/*Returns pointer to IMEI string of 15 numbers*/
static char* GetIMEI(void)
{
 8007e44:	b510      	push	{r4, lr}
    static char imei[16];
    _Bool isDigit = false;
    uint32_t j = 0, i=0;

    /*Request IMEI*/
    result = SCP_SendCommandWaitAnswer("AT+CGSN\r\n", "OK", 100, 1);
 8007e46:	2301      	movs	r3, #1
 8007e48:	2264      	movs	r2, #100	; 0x64
 8007e4a:	491a      	ldr	r1, [pc, #104]	; (8007eb4 <GetIMEI+0x70>)
 8007e4c:	481a      	ldr	r0, [pc, #104]	; (8007eb8 <GetIMEI+0x74>)
 8007e4e:	f7ff f965 	bl	800711c <SCP_SendCommandWaitAnswer>
 8007e52:	1e04      	subs	r4, r0, #0

    /*We have response, lets look for the info in the receiver buffer*/
    if(result)
 8007e54:	d02a      	beq.n	8007eac <GetIMEI+0x68>
    uint32_t j = 0, i=0;
 8007e56:	2400      	movs	r4, #0
    {
        result = NULL;

        /*Lets look for a ASCII number...*/
        while((j < strlen((char*)SCPHandler.RxBuffer)) && (!isDigit))
 8007e58:	4818      	ldr	r0, [pc, #96]	; (8007ebc <GetIMEI+0x78>)
 8007e5a:	f7f8 f955 	bl	8000108 <strlen>
 8007e5e:	42a0      	cmp	r0, r4
 8007e60:	d90d      	bls.n	8007e7e <GetIMEI+0x3a>
        {
          if((SCPHandler.RxBuffer[j] > 47) && (SCPHandler.RxBuffer[j] < 58))
 8007e62:	4b17      	ldr	r3, [pc, #92]	; (8007ec0 <GetIMEI+0x7c>)
 8007e64:	191b      	adds	r3, r3, r4
 8007e66:	7b1b      	ldrb	r3, [r3, #12]
 8007e68:	3b30      	subs	r3, #48	; 0x30
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b09      	cmp	r3, #9
 8007e6e:	d901      	bls.n	8007e74 <GetIMEI+0x30>
              isDigit = true;
              result = (char*)&SCPHandler.RxBuffer[j];
              break;
          }

          j++;
 8007e70:	3401      	adds	r4, #1
 8007e72:	e7f1      	b.n	8007e58 <GetIMEI+0x14>
              result = (char*)&SCPHandler.RxBuffer[j];
 8007e74:	3408      	adds	r4, #8
 8007e76:	4812      	ldr	r0, [pc, #72]	; (8007ec0 <GetIMEI+0x7c>)
 8007e78:	1824      	adds	r4, r4, r0
 8007e7a:	3404      	adds	r4, #4
              break;
 8007e7c:	e000      	b.n	8007e80 <GetIMEI+0x3c>
        result = NULL;
 8007e7e:	2400      	movs	r4, #0
        }

        /*First number of IMEI found, copy the number to the RAM and return */
        if(result)
 8007e80:	2c00      	cmp	r4, #0
 8007e82:	d013      	beq.n	8007eac <GetIMEI+0x68>
        {
            memset(imei, 0x00, 16);
 8007e84:	2210      	movs	r2, #16
 8007e86:	2100      	movs	r1, #0
 8007e88:	480e      	ldr	r0, [pc, #56]	; (8007ec4 <GetIMEI+0x80>)
 8007e8a:	f001 fa4b 	bl	8009324 <memset>

            /*Maximum 15 chars for IMEI is allowed*/
            for(i = 0; i < 15; i++)
 8007e8e:	2300      	movs	r3, #0
 8007e90:	2b0e      	cmp	r3, #14
 8007e92:	d80a      	bhi.n	8007eaa <GetIMEI+0x66>
            {
                /*Not a number in IMEI shall be treated as error*/
                if(!(*result > 47 && *result < 58))
 8007e94:	7821      	ldrb	r1, [r4, #0]
 8007e96:	000a      	movs	r2, r1
 8007e98:	3a30      	subs	r2, #48	; 0x30
 8007e9a:	b2d2      	uxtb	r2, r2
 8007e9c:	2a09      	cmp	r2, #9
 8007e9e:	d807      	bhi.n	8007eb0 <GetIMEI+0x6c>
                {
                    return NULL;
                }

                imei[i] = *result;
 8007ea0:	4a08      	ldr	r2, [pc, #32]	; (8007ec4 <GetIMEI+0x80>)
 8007ea2:	54d1      	strb	r1, [r2, r3]

                result++;
 8007ea4:	3401      	adds	r4, #1
            for(i = 0; i < 15; i++)
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	e7f2      	b.n	8007e90 <GetIMEI+0x4c>
            }

            return imei;
 8007eaa:	4c06      	ldr	r4, [pc, #24]	; (8007ec4 <GetIMEI+0x80>)
        }
    }

    return NULL;
}
 8007eac:	0020      	movs	r0, r4
 8007eae:	bd10      	pop	{r4, pc}
                    return NULL;
 8007eb0:	2400      	movs	r4, #0
 8007eb2:	e7fb      	b.n	8007eac <GetIMEI+0x68>
 8007eb4:	0800e3b8 	.word	0x0800e3b8
 8007eb8:	0800e3cc 	.word	0x0800e3cc
 8007ebc:	20002d4c 	.word	0x20002d4c
 8007ec0:	20002d40 	.word	0x20002d40
 8007ec4:	20002ca8 	.word	0x20002ca8

08007ec8 <GetID>:

/*Request model identification*/
static char* GetID(void)
{
 8007ec8:	b510      	push	{r4, lr}
    char *result = NULL;
    static char device_id[21];

    /*Request model identification*/
    result = SCP_SendCommandWaitAnswer("AT+CGMM\r\n", "OK", 100, 1);
 8007eca:	2301      	movs	r3, #1
 8007ecc:	2264      	movs	r2, #100	; 0x64
 8007ece:	4911      	ldr	r1, [pc, #68]	; (8007f14 <GetID+0x4c>)
 8007ed0:	4811      	ldr	r0, [pc, #68]	; (8007f18 <GetID+0x50>)
 8007ed2:	f7ff f923 	bl	800711c <SCP_SendCommandWaitAnswer>

    /*We have response, lets look for the info in the receiver buffer*/
    if(result)
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	d01b      	beq.n	8007f12 <GetID+0x4a>
    {
        result = NULL;
        /*Lets look for a (\n) char as the begining of device name*/
        result = strchr((char*)SCPHandler.RxBuffer, '\n');
 8007eda:	210a      	movs	r1, #10
 8007edc:	480f      	ldr	r0, [pc, #60]	; (8007f1c <GetID+0x54>)
 8007ede:	f001 fa56 	bl	800938e <strchr>

        if(result)
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	d015      	beq.n	8007f12 <GetID+0x4a>
        {
            result++;
 8007ee6:	1c44      	adds	r4, r0, #1

            /*Copy operator to the RAM and return*/
            memset(device_id, 0x00, 21);
 8007ee8:	2215      	movs	r2, #21
 8007eea:	2100      	movs	r1, #0
 8007eec:	480c      	ldr	r0, [pc, #48]	; (8007f20 <GetID+0x58>)
 8007eee:	f001 fa19 	bl	8009324 <memset>

            /*Maximum 20 chars for model identification allowed*/
            for(uint8_t i = 0; i < 20; i++)
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	2b13      	cmp	r3, #19
 8007ef6:	d809      	bhi.n	8007f0c <GetID+0x44>
            {
                device_id[i] = *result;
 8007ef8:	7821      	ldrb	r1, [r4, #0]
 8007efa:	4a09      	ldr	r2, [pc, #36]	; (8007f20 <GetID+0x58>)
 8007efc:	54d1      	strb	r1, [r2, r3]
                result++;
 8007efe:	3401      	adds	r4, #1

                /*Device_id end*/
                if(*result == '\r')
 8007f00:	7822      	ldrb	r2, [r4, #0]
 8007f02:	2a0d      	cmp	r2, #13
 8007f04:	d004      	beq.n	8007f10 <GetID+0x48>
            for(uint8_t i = 0; i < 20; i++)
 8007f06:	3301      	adds	r3, #1
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	e7f3      	b.n	8007ef4 <GetID+0x2c>
            }
        }

    }

    return NULL;
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	e000      	b.n	8007f12 <GetID+0x4a>
                    return device_id;
 8007f10:	4803      	ldr	r0, [pc, #12]	; (8007f20 <GetID+0x58>)
}
 8007f12:	bd10      	pop	{r4, pc}
 8007f14:	0800e3b8 	.word	0x0800e3b8
 8007f18:	0800e3d8 	.word	0x0800e3d8
 8007f1c:	20002d4c 	.word	0x20002d4c
 8007f20:	20002c90 	.word	0x20002c90

08007f24 <GetVersion>:

/*Returns pointer to firmware version*/
static char* GetVersion(void)
{
 8007f24:	b510      	push	{r4, lr}
    char *result = NULL;
    static char version[16];
    uint32_t i=0;

    /*Request IMEI*/
    result = SCP_SendCommandWaitAnswer("AT+CGMR\r\n", "OK", 100, 1);
 8007f26:	2301      	movs	r3, #1
 8007f28:	2264      	movs	r2, #100	; 0x64
 8007f2a:	4910      	ldr	r1, [pc, #64]	; (8007f6c <GetVersion+0x48>)
 8007f2c:	4810      	ldr	r0, [pc, #64]	; (8007f70 <GetVersion+0x4c>)
 8007f2e:	f7ff f8f5 	bl	800711c <SCP_SendCommandWaitAnswer>

    /*We have response, lets look for the info in the receiver buffer*/
    if(result)
 8007f32:	2800      	cmp	r0, #0
 8007f34:	d018      	beq.n	8007f68 <GetVersion+0x44>
    {
        result = NULL;

        /*Lets look for a (\n) char as the begining of firmware version string*/
        result = strchr((char*)SCPHandler.RxBuffer, '\n');
 8007f36:	210a      	movs	r1, #10
 8007f38:	480e      	ldr	r0, [pc, #56]	; (8007f74 <GetVersion+0x50>)
 8007f3a:	f001 fa28 	bl	800938e <strchr>

        /*Copy string to RAM */
        if(result)
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	d012      	beq.n	8007f68 <GetVersion+0x44>
        {
            result++;
 8007f42:	1c44      	adds	r4, r0, #1
            memset(version, 0x00, 16);
 8007f44:	2210      	movs	r2, #16
 8007f46:	2100      	movs	r1, #0
 8007f48:	480b      	ldr	r0, [pc, #44]	; (8007f78 <GetVersion+0x54>)
 8007f4a:	f001 f9eb 	bl	8009324 <memset>

            /*Maximum 15 chars limit*/
            for(i = 0; i < 15; i++)
 8007f4e:	2300      	movs	r3, #0
 8007f50:	2b0e      	cmp	r3, #14
 8007f52:	d808      	bhi.n	8007f66 <GetVersion+0x42>
            {

                version[i] = *result;
 8007f54:	7821      	ldrb	r1, [r4, #0]
 8007f56:	4a08      	ldr	r2, [pc, #32]	; (8007f78 <GetVersion+0x54>)
 8007f58:	54d1      	strb	r1, [r2, r3]
                result++;
 8007f5a:	3401      	adds	r4, #1

                if(*result == '\r')
 8007f5c:	7822      	ldrb	r2, [r4, #0]
 8007f5e:	2a0d      	cmp	r2, #13
 8007f60:	d001      	beq.n	8007f66 <GetVersion+0x42>
            for(i = 0; i < 15; i++)
 8007f62:	3301      	adds	r3, #1
 8007f64:	e7f4      	b.n	8007f50 <GetVersion+0x2c>
                {
                    break;
                }
            }

            return version;
 8007f66:	4804      	ldr	r0, [pc, #16]	; (8007f78 <GetVersion+0x54>)
        }
    }

    return NULL;
}
 8007f68:	bd10      	pop	{r4, pc}
 8007f6a:	46c0      	nop			; (mov r8, r8)
 8007f6c:	0800e3b8 	.word	0x0800e3b8
 8007f70:	0800e3e4 	.word	0x0800e3e4
 8007f74:	20002d4c 	.word	0x20002d4c
 8007f78:	20002ccc 	.word	0x20002ccc

08007f7c <ModemCloseTcpSocket>:
    return false;
}

/* Close socket */
static _Bool ModemCloseTcpSocket(int socket_id)
{
 8007f7c:	b510      	push	{r4, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	0004      	movs	r4, r0
    char *result = NULL;
    char buff[15];

    memset(buff, 0, sizeof(buff));
 8007f82:	220f      	movs	r2, #15
 8007f84:	2100      	movs	r1, #0
 8007f86:	4668      	mov	r0, sp
 8007f88:	f001 f9cc 	bl	8009324 <memset>

    /* Close selected socket */
    sprintf(buff, "AT+ETL=0,%d\r\n", socket_id);
 8007f8c:	0022      	movs	r2, r4
 8007f8e:	4908      	ldr	r1, [pc, #32]	; (8007fb0 <ModemCloseTcpSocket+0x34>)
 8007f90:	4668      	mov	r0, sp
 8007f92:	f001 f9cf 	bl	8009334 <sprintf>
    result = SCP_SendCommandWaitAnswer(buff, "OK", 2000, 1);
 8007f96:	22fa      	movs	r2, #250	; 0xfa
 8007f98:	2301      	movs	r3, #1
 8007f9a:	00d2      	lsls	r2, r2, #3
 8007f9c:	4905      	ldr	r1, [pc, #20]	; (8007fb4 <ModemCloseTcpSocket+0x38>)
 8007f9e:	4668      	mov	r0, sp
 8007fa0:	f7ff f8bc 	bl	800711c <SCP_SendCommandWaitAnswer>

    if(result)
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	d000      	beq.n	8007faa <ModemCloseTcpSocket+0x2e>
    {
      return true;
 8007fa8:	2001      	movs	r0, #1
    }

     return false;
}
 8007faa:	b004      	add	sp, #16
 8007fac:	bd10      	pop	{r4, pc}
 8007fae:	46c0      	nop			; (mov r8, r8)
 8007fb0:	0800e3f0 	.word	0x0800e3f0
 8007fb4:	0800e3b8 	.word	0x0800e3b8

08007fb8 <SetLED>:
{
 8007fb8:	b510      	push	{r4, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	0004      	movs	r4, r0
    memset(led_buff, 0, sizeof(led_buff));
 8007fbe:	2210      	movs	r2, #16
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	4668      	mov	r0, sp
 8007fc4:	f001 f9ae 	bl	8009324 <memset>
    sprintf(led_buff, "AT#GPIO=8,%d,1\r\n",state);
 8007fc8:	0022      	movs	r2, r4
 8007fca:	4906      	ldr	r1, [pc, #24]	; (8007fe4 <SetLED+0x2c>)
 8007fcc:	4668      	mov	r0, sp
 8007fce:	f001 f9b1 	bl	8009334 <sprintf>
    result = SCP_SendCommandWaitAnswer(led_buff, "OK", 2000, 1);
 8007fd2:	22fa      	movs	r2, #250	; 0xfa
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	00d2      	lsls	r2, r2, #3
 8007fd8:	4903      	ldr	r1, [pc, #12]	; (8007fe8 <SetLED+0x30>)
 8007fda:	4668      	mov	r0, sp
 8007fdc:	f7ff f89e 	bl	800711c <SCP_SendCommandWaitAnswer>
}
 8007fe0:	b004      	add	sp, #16
 8007fe2:	bd10      	pop	{r4, pc}
 8007fe4:	0800e400 	.word	0x0800e400
 8007fe8:	0800e3b8 	.word	0x0800e3b8

08007fec <SocketSend>:

/*GL865 V4 Socket send procedure*/
static char* SocketSend(int socket_id, char *string, unsigned int length)
{
 8007fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	0006      	movs	r6, r0
 8007ff2:	000c      	movs	r4, r1
 8007ff4:	0017      	movs	r7, r2
    char symbol[3];
    static char buffer[1024];
    static char cmd_buffer[1048];

    /*GL865 V4 Limitation*/
    if(strlen(string) > 512)
 8007ff6:	0008      	movs	r0, r1
 8007ff8:	f7f8 f886 	bl	8000108 <strlen>
 8007ffc:	2380      	movs	r3, #128	; 0x80
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	4298      	cmp	r0, r3
 8008002:	d82e      	bhi.n	8008062 <SocketSend+0x76>
    {
        return NULL;
    }

    /*Clean buffers to be used*/
    memset(symbol, 0, sizeof(symbol));
 8008004:	2203      	movs	r2, #3
 8008006:	2100      	movs	r1, #0
 8008008:	a801      	add	r0, sp, #4
 800800a:	f001 f98b 	bl	8009324 <memset>
    memset(buffer, 0, sizeof(buffer));
 800800e:	2280      	movs	r2, #128	; 0x80
 8008010:	00d2      	lsls	r2, r2, #3
 8008012:	2100      	movs	r1, #0
 8008014:	4814      	ldr	r0, [pc, #80]	; (8008068 <SocketSend+0x7c>)
 8008016:	f001 f985 	bl	8009324 <memset>
    memset(cmd_buffer, 0, sizeof(cmd_buffer));
 800801a:	2283      	movs	r2, #131	; 0x83
 800801c:	00d2      	lsls	r2, r2, #3
 800801e:	2100      	movs	r1, #0
 8008020:	4812      	ldr	r0, [pc, #72]	; (800806c <SocketSend+0x80>)
 8008022:	f001 f97f 	bl	8009324 <memset>

    /*Convert data to Hex format string*/
    for(i = 0; i < length; i++)
 8008026:	2500      	movs	r5, #0
 8008028:	42bd      	cmp	r5, r7
 800802a:	d20b      	bcs.n	8008044 <SocketSend+0x58>
    {
        sprintf(symbol, "%02X", *string);
 800802c:	7822      	ldrb	r2, [r4, #0]
 800802e:	4910      	ldr	r1, [pc, #64]	; (8008070 <SocketSend+0x84>)
 8008030:	a801      	add	r0, sp, #4
 8008032:	f001 f97f 	bl	8009334 <sprintf>
        strcat(buffer,symbol);
 8008036:	a901      	add	r1, sp, #4
 8008038:	480b      	ldr	r0, [pc, #44]	; (8008068 <SocketSend+0x7c>)
 800803a:	f001 f99b 	bl	8009374 <strcat>
        string++;
 800803e:	3401      	adds	r4, #1
    for(i = 0; i < length; i++)
 8008040:	3501      	adds	r5, #1
 8008042:	e7f1      	b.n	8008028 <SocketSend+0x3c>
    }

    /*Create command to be sent*/
    sprintf(cmd_buffer, "AT+EIPSEND=%d,\"%s\"\r\n", socket_id, buffer);
 8008044:	4c09      	ldr	r4, [pc, #36]	; (800806c <SocketSend+0x80>)
 8008046:	4b08      	ldr	r3, [pc, #32]	; (8008068 <SocketSend+0x7c>)
 8008048:	0032      	movs	r2, r6
 800804a:	490a      	ldr	r1, [pc, #40]	; (8008074 <SocketSend+0x88>)
 800804c:	0020      	movs	r0, r4
 800804e:	f001 f971 	bl	8009334 <sprintf>

    /*attempt to send*/
    result = SCP_SendCommandWaitAnswer(cmd_buffer, "OK", 60000, 1);
 8008052:	2301      	movs	r3, #1
 8008054:	4a08      	ldr	r2, [pc, #32]	; (8008078 <SocketSend+0x8c>)
 8008056:	4909      	ldr	r1, [pc, #36]	; (800807c <SocketSend+0x90>)
 8008058:	0020      	movs	r0, r4
 800805a:	f7ff f85f 	bl	800711c <SCP_SendCommandWaitAnswer>

    return result;
}
 800805e:	b003      	add	sp, #12
 8008060:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return NULL;
 8008062:	2000      	movs	r0, #0
 8008064:	e7fb      	b.n	800805e <SocketSend+0x72>
 8008066:	46c0      	nop			; (mov r8, r8)
 8008068:	20002478 	.word	0x20002478
 800806c:	20002878 	.word	0x20002878
 8008070:	0800e414 	.word	0x0800e414
 8008074:	0800e41c 	.word	0x0800e41c
 8008078:	0000ea60 	.word	0x0000ea60
 800807c:	0800e3b8 	.word	0x0800e3b8

08008080 <memmem>:
{
 8008080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008082:	0004      	movs	r4, r0
 8008084:	0016      	movs	r6, r2
 8008086:	1e1f      	subs	r7, r3, #0
	if (s_len == 0)
 8008088:	d01d      	beq.n	80080c6 <memmem+0x46>
	if (l_len < s_len)
 800808a:	428b      	cmp	r3, r1
 800808c:	d81c      	bhi.n	80080c8 <memmem+0x48>
	if (s_len == 1)
 800808e:	2b01      	cmp	r3, #1
 8008090:	d002      	beq.n	8008098 <memmem+0x18>
	last = cl + l_len - s_len;
 8008092:	1acd      	subs	r5, r1, r3
 8008094:	1945      	adds	r5, r0, r5
	for (cur = cl; cur <= last; cur++)
 8008096:	e006      	b.n	80080a6 <memmem+0x26>
		return memchr(l, *cs, l_len);
 8008098:	7813      	ldrb	r3, [r2, #0]
 800809a:	000a      	movs	r2, r1
 800809c:	0019      	movs	r1, r3
 800809e:	f001 f91f 	bl	80092e0 <memchr>
 80080a2:	e010      	b.n	80080c6 <memmem+0x46>
	for (cur = cl; cur <= last; cur++)
 80080a4:	3401      	adds	r4, #1
 80080a6:	42ac      	cmp	r4, r5
 80080a8:	d80c      	bhi.n	80080c4 <memmem+0x44>
		if (cur[0] == cs[0] && memcmp(cur, cs, s_len) == 0)
 80080aa:	7820      	ldrb	r0, [r4, #0]
 80080ac:	7831      	ldrb	r1, [r6, #0]
 80080ae:	4288      	cmp	r0, r1
 80080b0:	d1f8      	bne.n	80080a4 <memmem+0x24>
 80080b2:	003a      	movs	r2, r7
 80080b4:	0031      	movs	r1, r6
 80080b6:	0020      	movs	r0, r4
 80080b8:	f001 f91d 	bl	80092f6 <memcmp>
 80080bc:	2800      	cmp	r0, #0
 80080be:	d1f1      	bne.n	80080a4 <memmem+0x24>
			return (void *)cur;
 80080c0:	0020      	movs	r0, r4
 80080c2:	e000      	b.n	80080c6 <memmem+0x46>
	return NULL;
 80080c4:	2000      	movs	r0, #0
}
 80080c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
 80080c8:	2000      	movs	r0, #0
 80080ca:	e7fc      	b.n	80080c6 <memmem+0x46>

080080cc <SignalQuality>:
{
 80080cc:	b510      	push	{r4, lr}
    result = SCP_SendCommandWaitAnswer("AT+CSQ\r\n", "OK", 2000, 1);
 80080ce:	22fa      	movs	r2, #250	; 0xfa
 80080d0:	2301      	movs	r3, #1
 80080d2:	00d2      	lsls	r2, r2, #3
 80080d4:	490b      	ldr	r1, [pc, #44]	; (8008104 <SignalQuality+0x38>)
 80080d6:	480c      	ldr	r0, [pc, #48]	; (8008108 <SignalQuality+0x3c>)
 80080d8:	f7ff f820 	bl	800711c <SCP_SendCommandWaitAnswer>
    if(result)
 80080dc:	2800      	cmp	r0, #0
 80080de:	d00c      	beq.n	80080fa <SignalQuality+0x2e>
        result = memmem((char*)SCPHandler.RxBuffer, CMD_BUFF_LENGTH, "+CSQ:", sizeof("+CSQ:")-1);
 80080e0:	2180      	movs	r1, #128	; 0x80
 80080e2:	2305      	movs	r3, #5
 80080e4:	4a09      	ldr	r2, [pc, #36]	; (800810c <SignalQuality+0x40>)
 80080e6:	00c9      	lsls	r1, r1, #3
 80080e8:	4809      	ldr	r0, [pc, #36]	; (8008110 <SignalQuality+0x44>)
 80080ea:	f7ff ffc9 	bl	8008080 <memmem>
        if(result)
 80080ee:	2800      	cmp	r0, #0
 80080f0:	d005      	beq.n	80080fe <SignalQuality+0x32>
            result += 6;
 80080f2:	3006      	adds	r0, #6
            signal_level = atoi(result);
 80080f4:	f001 f8c3 	bl	800927e <atoi>
}
 80080f8:	bd10      	pop	{r4, pc}
        return 0;
 80080fa:	2000      	movs	r0, #0
 80080fc:	e7fc      	b.n	80080f8 <SignalQuality+0x2c>
    int32_t signal_level = 0;
 80080fe:	2000      	movs	r0, #0
 8008100:	e7fa      	b.n	80080f8 <SignalQuality+0x2c>
 8008102:	46c0      	nop			; (mov r8, r8)
 8008104:	0800e3b8 	.word	0x0800e3b8
 8008108:	0800e434 	.word	0x0800e434
 800810c:	0800e440 	.word	0x0800e440
 8008110:	20002d4c 	.word	0x20002d4c

08008114 <NetworkRegistrationCheck>:
{
 8008114:	b510      	push	{r4, lr}
    result = SCP_SendCommandWaitAnswer("AT+CREG?\r\n", "OK", 500, 5);
 8008116:	22fa      	movs	r2, #250	; 0xfa
 8008118:	2305      	movs	r3, #5
 800811a:	0052      	lsls	r2, r2, #1
 800811c:	490b      	ldr	r1, [pc, #44]	; (800814c <NetworkRegistrationCheck+0x38>)
 800811e:	480c      	ldr	r0, [pc, #48]	; (8008150 <NetworkRegistrationCheck+0x3c>)
 8008120:	f7fe fffc 	bl	800711c <SCP_SendCommandWaitAnswer>
    if(result)
 8008124:	2800      	cmp	r0, #0
 8008126:	d00c      	beq.n	8008142 <NetworkRegistrationCheck+0x2e>
        result = memmem((char*)SCPHandler.RxBuffer, CMD_BUFF_LENGTH, "+CREG: ", sizeof("+CREG: ")-1);
 8008128:	2180      	movs	r1, #128	; 0x80
 800812a:	2307      	movs	r3, #7
 800812c:	4a09      	ldr	r2, [pc, #36]	; (8008154 <NetworkRegistrationCheck+0x40>)
 800812e:	00c9      	lsls	r1, r1, #3
 8008130:	4809      	ldr	r0, [pc, #36]	; (8008158 <NetworkRegistrationCheck+0x44>)
 8008132:	f7ff ffa5 	bl	8008080 <memmem>
        if(result)
 8008136:	2800      	cmp	r0, #0
 8008138:	d005      	beq.n	8008146 <NetworkRegistrationCheck+0x32>
            result += 9;
 800813a:	3009      	adds	r0, #9
            ntwrk_stat = atoi(result);
 800813c:	f001 f89f 	bl	800927e <atoi>
}
 8008140:	bd10      	pop	{r4, pc}
        return 0;
 8008142:	2000      	movs	r0, #0
 8008144:	e7fc      	b.n	8008140 <NetworkRegistrationCheck+0x2c>
    int32_t ntwrk_stat = 0;
 8008146:	2000      	movs	r0, #0
 8008148:	e7fa      	b.n	8008140 <NetworkRegistrationCheck+0x2c>
 800814a:	46c0      	nop			; (mov r8, r8)
 800814c:	0800e3b8 	.word	0x0800e3b8
 8008150:	0800e448 	.word	0x0800e448
 8008154:	0800e454 	.word	0x0800e454
 8008158:	20002d4c 	.word	0x20002d4c

0800815c <WaitForNetwork>:
{
 800815c:	b570      	push	{r4, r5, r6, lr}
    for(uint32_t i=0; i < WAIT_FOR_NETWORK_S; i++)
 800815e:	2400      	movs	r4, #0
    _Bool led = false;
 8008160:	2500      	movs	r5, #0
    for(uint32_t i=0; i < WAIT_FOR_NETWORK_S; i++)
 8008162:	e00e      	b.n	8008182 <WaitForNetwork+0x26>
          signal = SignalQuality();
 8008164:	f7ff ffb2 	bl	80080cc <SignalQuality>
          if(signal != 99)
 8008168:	2863      	cmp	r0, #99	; 0x63
 800816a:	d119      	bne.n	80081a0 <WaitForNetwork+0x44>
            osDelay(1000);
 800816c:	20fa      	movs	r0, #250	; 0xfa
 800816e:	0080      	lsls	r0, r0, #2
 8008170:	f7fd fbed 	bl	800594e <osDelay>
        led = !led;
 8008174:	2001      	movs	r0, #1
 8008176:	4045      	eors	r5, r0
 8008178:	b2ed      	uxtb	r5, r5
        SetLED(led);
 800817a:	0028      	movs	r0, r5
 800817c:	f7ff ff1c 	bl	8007fb8 <SetLED>
    for(uint32_t i=0; i < WAIT_FOR_NETWORK_S; i++)
 8008180:	3401      	adds	r4, #1
 8008182:	23e1      	movs	r3, #225	; 0xe1
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	429c      	cmp	r4, r3
 8008188:	d20f      	bcs.n	80081aa <WaitForNetwork+0x4e>
        test = NetworkRegistrationCheck();
 800818a:	f7ff ffc3 	bl	8008114 <NetworkRegistrationCheck>
        if((test == 1) || (test == 5))
 800818e:	2801      	cmp	r0, #1
 8008190:	d0e8      	beq.n	8008164 <WaitForNetwork+0x8>
 8008192:	2805      	cmp	r0, #5
 8008194:	d0e6      	beq.n	8008164 <WaitForNetwork+0x8>
            osDelay(1000);
 8008196:	20fa      	movs	r0, #250	; 0xfa
 8008198:	0080      	lsls	r0, r0, #2
 800819a:	f7fd fbd8 	bl	800594e <osDelay>
 800819e:	e7e9      	b.n	8008174 <WaitForNetwork+0x18>
        	SetLED(false);
 80081a0:	2000      	movs	r0, #0
 80081a2:	f7ff ff09 	bl	8007fb8 <SetLED>
            return true;
 80081a6:	2001      	movs	r0, #1
}
 80081a8:	bd70      	pop	{r4, r5, r6, pc}
    SetLED(false);
 80081aa:	2000      	movs	r0, #0
 80081ac:	f7ff ff04 	bl	8007fb8 <SetLED>
    return false;
 80081b0:	2000      	movs	r0, #0
 80081b2:	e7f9      	b.n	80081a8 <WaitForNetwork+0x4c>

080081b4 <GetOperator>:
{
 80081b4:	b510      	push	{r4, lr}
    result = SCP_SendCommandWaitAnswer("AT+COPS?\r\n", "OK", 30000, 1);
 80081b6:	2301      	movs	r3, #1
 80081b8:	4a17      	ldr	r2, [pc, #92]	; (8008218 <GetOperator+0x64>)
 80081ba:	4918      	ldr	r1, [pc, #96]	; (800821c <GetOperator+0x68>)
 80081bc:	4818      	ldr	r0, [pc, #96]	; (8008220 <GetOperator+0x6c>)
 80081be:	f7fe ffad 	bl	800711c <SCP_SendCommandWaitAnswer>
 80081c2:	1e04      	subs	r4, r0, #0
    if(result)
 80081c4:	d025      	beq.n	8008212 <GetOperator+0x5e>
        result = memmem((char*)SCPHandler.RxBuffer, CMD_BUFF_LENGTH, "+COPS:", sizeof("+COPS:")-1);
 80081c6:	2180      	movs	r1, #128	; 0x80
 80081c8:	2306      	movs	r3, #6
 80081ca:	4a16      	ldr	r2, [pc, #88]	; (8008224 <GetOperator+0x70>)
 80081cc:	00c9      	lsls	r1, r1, #3
 80081ce:	4816      	ldr	r0, [pc, #88]	; (8008228 <GetOperator+0x74>)
 80081d0:	f7ff ff56 	bl	8008080 <memmem>
 80081d4:	1e04      	subs	r4, r0, #0
        if(result)
 80081d6:	d01c      	beq.n	8008212 <GetOperator+0x5e>
            result = strchr(result, '"');
 80081d8:	2122      	movs	r1, #34	; 0x22
 80081da:	f001 f8d8 	bl	800938e <strchr>
 80081de:	1e04      	subs	r4, r0, #0
            if(result)
 80081e0:	d017      	beq.n	8008212 <GetOperator+0x5e>
                memset(operator, 0x00, 17);
 80081e2:	2211      	movs	r2, #17
 80081e4:	2100      	movs	r1, #0
 80081e6:	4811      	ldr	r0, [pc, #68]	; (800822c <GetOperator+0x78>)
 80081e8:	f001 f89c 	bl	8009324 <memset>
                for(uint8_t i = 0; i < 16; i++)
 80081ec:	2300      	movs	r3, #0
 80081ee:	2b0f      	cmp	r3, #15
 80081f0:	d80e      	bhi.n	8008210 <GetOperator+0x5c>
                    operator[i] = *result;
 80081f2:	7821      	ldrb	r1, [r4, #0]
 80081f4:	4a0d      	ldr	r2, [pc, #52]	; (800822c <GetOperator+0x78>)
 80081f6:	54d1      	strb	r1, [r2, r3]
                    result++;
 80081f8:	3401      	adds	r4, #1
                    if(*result == '"')
 80081fa:	7822      	ldrb	r2, [r4, #0]
 80081fc:	2a22      	cmp	r2, #34	; 0x22
 80081fe:	d002      	beq.n	8008206 <GetOperator+0x52>
                for(uint8_t i = 0; i < 16; i++)
 8008200:	3301      	adds	r3, #1
 8008202:	b2db      	uxtb	r3, r3
 8008204:	e7f3      	b.n	80081ee <GetOperator+0x3a>
                        i++;
 8008206:	3301      	adds	r3, #1
 8008208:	b2db      	uxtb	r3, r3
                        operator[i] = *result;
 800820a:	4c08      	ldr	r4, [pc, #32]	; (800822c <GetOperator+0x78>)
 800820c:	54e2      	strb	r2, [r4, r3]
                        return operator;
 800820e:	e000      	b.n	8008212 <GetOperator+0x5e>
                return operator;
 8008210:	4c06      	ldr	r4, [pc, #24]	; (800822c <GetOperator+0x78>)
}
 8008212:	0020      	movs	r0, r4
 8008214:	bd10      	pop	{r4, pc}
 8008216:	46c0      	nop			; (mov r8, r8)
 8008218:	00007530 	.word	0x00007530
 800821c:	0800e3b8 	.word	0x0800e3b8
 8008220:	0800e45c 	.word	0x0800e45c
 8008224:	0800e468 	.word	0x0800e468
 8008228:	20002d4c 	.word	0x20002d4c
 800822c:	20002cb8 	.word	0x20002cb8

08008230 <ContextStatusCheck>:
{
 8008230:	b510      	push	{r4, lr}
    result = SCP_SendCommandWaitAnswer("AT+CGACT?\r\n", "OK", 1000, 1);
 8008232:	22fa      	movs	r2, #250	; 0xfa
 8008234:	2301      	movs	r3, #1
 8008236:	0092      	lsls	r2, r2, #2
 8008238:	490b      	ldr	r1, [pc, #44]	; (8008268 <ContextStatusCheck+0x38>)
 800823a:	480c      	ldr	r0, [pc, #48]	; (800826c <ContextStatusCheck+0x3c>)
 800823c:	f7fe ff6e 	bl	800711c <SCP_SendCommandWaitAnswer>
    if(result)
 8008240:	2800      	cmp	r0, #0
 8008242:	d00c      	beq.n	800825e <ContextStatusCheck+0x2e>
        result = memmem((char*)SCPHandler.RxBuffer, CMD_BUFF_LENGTH, "+CGACT: 1", sizeof("+CGACT: 1")-1);
 8008244:	2180      	movs	r1, #128	; 0x80
 8008246:	2309      	movs	r3, #9
 8008248:	4a09      	ldr	r2, [pc, #36]	; (8008270 <ContextStatusCheck+0x40>)
 800824a:	00c9      	lsls	r1, r1, #3
 800824c:	4809      	ldr	r0, [pc, #36]	; (8008274 <ContextStatusCheck+0x44>)
 800824e:	f7ff ff17 	bl	8008080 <memmem>
        if(result)
 8008252:	2800      	cmp	r0, #0
 8008254:	d005      	beq.n	8008262 <ContextStatusCheck+0x32>
            result += 11;
 8008256:	300b      	adds	r0, #11
            context = atoi(result);
 8008258:	f001 f811 	bl	800927e <atoi>
}
 800825c:	bd10      	pop	{r4, pc}
        return 0;
 800825e:	2000      	movs	r0, #0
 8008260:	e7fc      	b.n	800825c <ContextStatusCheck+0x2c>
    int32_t context = 0;
 8008262:	2000      	movs	r0, #0
 8008264:	e7fa      	b.n	800825c <ContextStatusCheck+0x2c>
 8008266:	46c0      	nop			; (mov r8, r8)
 8008268:	0800e3b8 	.word	0x0800e3b8
 800826c:	0800e470 	.word	0x0800e470
 8008270:	0800e47c 	.word	0x0800e47c
 8008274:	20002d4c 	.word	0x20002d4c

08008278 <ContextConnect>:
{
 8008278:	b570      	push	{r4, r5, r6, lr}
 800827a:	0004      	movs	r4, r0
    check = NetworkRegistrationCheck();
 800827c:	f7ff ff4a 	bl	8008114 <NetworkRegistrationCheck>
    if(!check)
 8008280:	2800      	cmp	r0, #0
 8008282:	d032      	beq.n	80082ea <ContextConnect+0x72>
    result = SCP_SendCommandWaitAnswer("AT+CGATT?\r\n", "+CGATT: 1", 1000, 1);
 8008284:	22fa      	movs	r2, #250	; 0xfa
 8008286:	2301      	movs	r3, #1
 8008288:	0092      	lsls	r2, r2, #2
 800828a:	492d      	ldr	r1, [pc, #180]	; (8008340 <ContextConnect+0xc8>)
 800828c:	482d      	ldr	r0, [pc, #180]	; (8008344 <ContextConnect+0xcc>)
 800828e:	f7fe ff45 	bl	800711c <SCP_SendCommandWaitAnswer>
    if(!result) return false;
 8008292:	2800      	cmp	r0, #0
 8008294:	d04d      	beq.n	8008332 <ContextConnect+0xba>
    result = SCP_SendCommandWaitAnswer("AT+CGACT=1,1\r\n", "OK", 1000, 1);
 8008296:	22fa      	movs	r2, #250	; 0xfa
 8008298:	2301      	movs	r3, #1
 800829a:	0092      	lsls	r2, r2, #2
 800829c:	492a      	ldr	r1, [pc, #168]	; (8008348 <ContextConnect+0xd0>)
 800829e:	482b      	ldr	r0, [pc, #172]	; (800834c <ContextConnect+0xd4>)
 80082a0:	f7fe ff3c 	bl	800711c <SCP_SendCommandWaitAnswer>
 80082a4:	0005      	movs	r5, r0
    osDelay(2000);
 80082a6:	20fa      	movs	r0, #250	; 0xfa
 80082a8:	00c0      	lsls	r0, r0, #3
 80082aa:	f7fd fb50 	bl	800594e <osDelay>
    if(result)
 80082ae:	2d00      	cmp	r5, #0
 80082b0:	d041      	beq.n	8008336 <ContextConnect+0xbe>
        result = SCP_SendCommandWaitAnswer("AT+CGPADDR=1\r\n", "OK", 1000, 1);
 80082b2:	22fa      	movs	r2, #250	; 0xfa
 80082b4:	2301      	movs	r3, #1
 80082b6:	0092      	lsls	r2, r2, #2
 80082b8:	4923      	ldr	r1, [pc, #140]	; (8008348 <ContextConnect+0xd0>)
 80082ba:	4825      	ldr	r0, [pc, #148]	; (8008350 <ContextConnect+0xd8>)
 80082bc:	f7fe ff2e 	bl	800711c <SCP_SendCommandWaitAnswer>
        if(result)
 80082c0:	2800      	cmp	r0, #0
 80082c2:	d03a      	beq.n	800833a <ContextConnect+0xc2>
            result = memmem((char*)SCPHandler.RxBuffer, CMD_BUFF_LENGTH, "+CGPADDR: 1, ", sizeof("+CGPADDR: 1, ")-1);
 80082c4:	2180      	movs	r1, #128	; 0x80
 80082c6:	230d      	movs	r3, #13
 80082c8:	4a22      	ldr	r2, [pc, #136]	; (8008354 <ContextConnect+0xdc>)
 80082ca:	00c9      	lsls	r1, r1, #3
 80082cc:	4822      	ldr	r0, [pc, #136]	; (8008358 <ContextConnect+0xe0>)
 80082ce:	f7ff fed7 	bl	8008080 <memmem>
            result += 13;
 80082d2:	0005      	movs	r5, r0
 80082d4:	350d      	adds	r5, #13
            if(result)
 80082d6:	300d      	adds	r0, #13
 80082d8:	d029      	beq.n	800832e <ContextConnect+0xb6>
                memset(ip_address, 0x00, 15);
 80082da:	220f      	movs	r2, #15
 80082dc:	2100      	movs	r1, #0
 80082de:	0020      	movs	r0, r4
 80082e0:	f001 f820 	bl	8009324 <memset>
    temp = ip_address;
 80082e4:	0020      	movs	r0, r4
                for(uint8_t i = 0; i < 15; i++)
 80082e6:	2300      	movs	r3, #0
 80082e8:	e00b      	b.n	8008302 <ContextConnect+0x8a>
      WaitForNetwork();
 80082ea:	f7ff ff37 	bl	800815c <WaitForNetwork>
 80082ee:	e7c9      	b.n	8008284 <ContextConnect+0xc>
                        result++;
 80082f0:	3501      	adds	r5, #1
 80082f2:	e00b      	b.n	800830c <ContextConnect+0x94>
                    if(*result == '\r')
 80082f4:	2a0d      	cmp	r2, #13
 80082f6:	d01a      	beq.n	800832e <ContextConnect+0xb6>
                    *temp = *result;
 80082f8:	7002      	strb	r2, [r0, #0]
                    result++;
 80082fa:	3501      	adds	r5, #1
                    temp++;
 80082fc:	3001      	adds	r0, #1
                for(uint8_t i = 0; i < 15; i++)
 80082fe:	3301      	adds	r3, #1
 8008300:	b2db      	uxtb	r3, r3
 8008302:	2b0e      	cmp	r3, #14
 8008304:	d813      	bhi.n	800832e <ContextConnect+0xb6>
                    if(*result == '"')
 8008306:	782a      	ldrb	r2, [r5, #0]
 8008308:	2a22      	cmp	r2, #34	; 0x22
 800830a:	d0f1      	beq.n	80082f0 <ContextConnect+0x78>
                    if(!(*result > 47 && *result < 58) && !(*result == '.') && (!(*result == '\r')))
 800830c:	782a      	ldrb	r2, [r5, #0]
 800830e:	0011      	movs	r1, r2
 8008310:	3930      	subs	r1, #48	; 0x30
 8008312:	b2c9      	uxtb	r1, r1
 8008314:	2909      	cmp	r1, #9
 8008316:	d9ed      	bls.n	80082f4 <ContextConnect+0x7c>
 8008318:	2a2e      	cmp	r2, #46	; 0x2e
 800831a:	d0eb      	beq.n	80082f4 <ContextConnect+0x7c>
 800831c:	2a0d      	cmp	r2, #13
 800831e:	d0e9      	beq.n	80082f4 <ContextConnect+0x7c>
                        memset(ip_address, 0x00, 15);
 8008320:	220f      	movs	r2, #15
 8008322:	2100      	movs	r1, #0
 8008324:	0020      	movs	r0, r4
 8008326:	f000 fffd 	bl	8009324 <memset>
                        return false;
 800832a:	2000      	movs	r0, #0
 800832c:	e004      	b.n	8008338 <ContextConnect+0xc0>
            return true;
 800832e:	2001      	movs	r0, #1
 8008330:	e002      	b.n	8008338 <ContextConnect+0xc0>
    if(!result) return false;
 8008332:	2000      	movs	r0, #0
 8008334:	e000      	b.n	8008338 <ContextConnect+0xc0>
    return false;
 8008336:	2000      	movs	r0, #0
}
 8008338:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 800833a:	2000      	movs	r0, #0
 800833c:	e7fc      	b.n	8008338 <ContextConnect+0xc0>
 800833e:	46c0      	nop			; (mov r8, r8)
 8008340:	0800e488 	.word	0x0800e488
 8008344:	0800e494 	.word	0x0800e494
 8008348:	0800e3b8 	.word	0x0800e3b8
 800834c:	0800e4a0 	.word	0x0800e4a0
 8008350:	0800e4b0 	.word	0x0800e4b0
 8008354:	0800e4c0 	.word	0x0800e4c0
 8008358:	20002d4c 	.word	0x20002d4c

0800835c <SocketReceive>:

/*GL865 V4 Socket receive procedure*/
static char* SocketReceive(int socket_id)
{
 800835c:	b530      	push	{r4, r5, lr}
 800835e:	b083      	sub	sp, #12
 8008360:	0005      	movs	r5, r0
    char *result = NULL;
    unsigned int i;
    long number;
    char symbol[3];

    memset(post_buff, 0, sizeof(post_buff));
 8008362:	4c22      	ldr	r4, [pc, #136]	; (80083ec <SocketReceive+0x90>)
 8008364:	2280      	movs	r2, #128	; 0x80
 8008366:	00d2      	lsls	r2, r2, #3
 8008368:	2100      	movs	r1, #0
 800836a:	0020      	movs	r0, r4
 800836c:	f000 ffda 	bl	8009324 <memset>
    memset(symbol, 0, sizeof(symbol));
 8008370:	2203      	movs	r2, #3
 8008372:	2100      	movs	r1, #0
 8008374:	a801      	add	r0, sp, #4
 8008376:	f000 ffd5 	bl	8009324 <memset>

    /*Create command to for socket reception*/
    sprintf(post_buff, "AT+EIPRECV=%d\r\n", socket_id);
 800837a:	002a      	movs	r2, r5
 800837c:	491c      	ldr	r1, [pc, #112]	; (80083f0 <SocketReceive+0x94>)
 800837e:	0020      	movs	r0, r4
 8008380:	f000 ffd8 	bl	8009334 <sprintf>

    /*attempt to receive*/
    result = SCP_SendCommandWaitAnswer(post_buff, "OK", 60000, 1);
 8008384:	2301      	movs	r3, #1
 8008386:	4a1b      	ldr	r2, [pc, #108]	; (80083f4 <SocketReceive+0x98>)
 8008388:	491b      	ldr	r1, [pc, #108]	; (80083f8 <SocketReceive+0x9c>)
 800838a:	0020      	movs	r0, r4
 800838c:	f7fe fec6 	bl	800711c <SCP_SendCommandWaitAnswer>

    /*Data received, lets convert to ASCII*/
    if(result)
 8008390:	2800      	cmp	r0, #0
 8008392:	d027      	beq.n	80083e4 <SocketReceive+0x88>
    {
        memset(post_buff, 0, sizeof(post_buff));
 8008394:	2480      	movs	r4, #128	; 0x80
 8008396:	00e4      	lsls	r4, r4, #3
 8008398:	0022      	movs	r2, r4
 800839a:	2100      	movs	r1, #0
 800839c:	4813      	ldr	r0, [pc, #76]	; (80083ec <SocketReceive+0x90>)
 800839e:	f000 ffc1 	bl	8009324 <memset>
        result = NULL;
        result = memmem((char*)SCPHandler.RxBuffer, CMD_BUFF_LENGTH, "+EIPRECV: ", sizeof("+EIPRECV: ")-1);
 80083a2:	230a      	movs	r3, #10
 80083a4:	4a15      	ldr	r2, [pc, #84]	; (80083fc <SocketReceive+0xa0>)
 80083a6:	0021      	movs	r1, r4
 80083a8:	4815      	ldr	r0, [pc, #84]	; (8008400 <SocketReceive+0xa4>)
 80083aa:	f7ff fe69 	bl	8008080 <memmem>
        if(result)
 80083ae:	2800      	cmp	r0, #0
 80083b0:	d017      	beq.n	80083e2 <SocketReceive+0x86>
        {
            result += 13;
 80083b2:	300d      	adds	r0, #13
 80083b4:	0004      	movs	r4, r0
            i = 0;
 80083b6:	2500      	movs	r5, #0
            while(*result != '"')
 80083b8:	7823      	ldrb	r3, [r4, #0]
 80083ba:	2b22      	cmp	r3, #34	; 0x22
 80083bc:	d011      	beq.n	80083e2 <SocketReceive+0x86>
            {
                symbol[0] = *result;
 80083be:	466a      	mov	r2, sp
 80083c0:	7113      	strb	r3, [r2, #4]
                result++;
                symbol[1] = *result;
 80083c2:	7863      	ldrb	r3, [r4, #1]
 80083c4:	7153      	strb	r3, [r2, #5]
                result++;
 80083c6:	3402      	adds	r4, #2

                number = strtol(symbol, (char **)NULL,16);
 80083c8:	2210      	movs	r2, #16
 80083ca:	2100      	movs	r1, #0
 80083cc:	a801      	add	r0, sp, #4
 80083ce:	f001 f899 	bl	8009504 <strtol>
                post_buff[i] = (char)number;
 80083d2:	4b06      	ldr	r3, [pc, #24]	; (80083ec <SocketReceive+0x90>)
 80083d4:	5558      	strb	r0, [r3, r5]

                if(i > 1023)
 80083d6:	2380      	movs	r3, #128	; 0x80
 80083d8:	00db      	lsls	r3, r3, #3
 80083da:	429d      	cmp	r5, r3
 80083dc:	d204      	bcs.n	80083e8 <SocketReceive+0x8c>
                {
                    return NULL;
                }
                i++;
 80083de:	3501      	adds	r5, #1
 80083e0:	e7ea      	b.n	80083b8 <SocketReceive+0x5c>

            }
        }

        return post_buff;
 80083e2:	4802      	ldr	r0, [pc, #8]	; (80083ec <SocketReceive+0x90>)
    }

    return NULL;
}
 80083e4:	b003      	add	sp, #12
 80083e6:	bd30      	pop	{r4, r5, pc}
                    return NULL;
 80083e8:	2000      	movs	r0, #0
 80083ea:	e7fb      	b.n	80083e4 <SocketReceive+0x88>
 80083ec:	2000363c 	.word	0x2000363c
 80083f0:	0800e4d0 	.word	0x0800e4d0
 80083f4:	0000ea60 	.word	0x0000ea60
 80083f8:	0800e3b8 	.word	0x0800e3b8
 80083fc:	0800e4e0 	.word	0x0800e4e0
 8008400:	20002d4c 	.word	0x20002d4c

08008404 <TelitPortalAuthenticate>:

/*Telit portal authentication procedure */
static _Bool TelitPortalAuthenticate(int socket_id)
{
 8008404:	b570      	push	{r4, r5, r6, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	0004      	movs	r4, r0
    char *result = NULL;
    memset(post_buff, 0, sizeof(post_buff));
 800840a:	4d45      	ldr	r5, [pc, #276]	; (8008520 <TelitPortalAuthenticate+0x11c>)
 800840c:	2280      	movs	r2, #128	; 0x80
 800840e:	00d2      	lsls	r2, r2, #3
 8008410:	2100      	movs	r1, #0
 8008412:	0028      	movs	r0, r5
 8008414:	f000 ff86 	bl	8009324 <memset>
    memset(telit_sessionId, 0, sizeof(telit_sessionId));
 8008418:	2230      	movs	r2, #48	; 0x30
 800841a:	2100      	movs	r1, #0
 800841c:	4841      	ldr	r0, [pc, #260]	; (8008524 <TelitPortalAuthenticate+0x120>)
 800841e:	f000 ff81 	bl	8009324 <memset>
    memset(post_length, 0, sizeof(post_length));
 8008422:	4e41      	ldr	r6, [pc, #260]	; (8008528 <TelitPortalAuthenticate+0x124>)
 8008424:	2210      	movs	r2, #16
 8008426:	2100      	movs	r1, #0
 8008428:	0030      	movs	r0, r6
 800842a:	f000 ff7b 	bl	8009324 <memset>
    int i;

    /*Reset rx buffer for data reception*/
    SCP_InitRx();
 800842e:	f7fe feb9 	bl	80071a4 <SCP_InitRx>

    // form data to be posted
    sprintf(post_buff, fcmd_dW_auth, telit_appToken, telit_appID, modem_data.imei);
 8008432:	4b3e      	ldr	r3, [pc, #248]	; (800852c <TelitPortalAuthenticate+0x128>)
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	4b3e      	ldr	r3, [pc, #248]	; (8008530 <TelitPortalAuthenticate+0x12c>)
 8008438:	4a3e      	ldr	r2, [pc, #248]	; (8008534 <TelitPortalAuthenticate+0x130>)
 800843a:	493f      	ldr	r1, [pc, #252]	; (8008538 <TelitPortalAuthenticate+0x134>)
 800843c:	0028      	movs	r0, r5
 800843e:	f000 ff79 	bl	8009334 <sprintf>

    // form data length
    sprintf(post_length, "%d\r\n\r\n", strlen(post_buff)-2);
 8008442:	0028      	movs	r0, r5
 8008444:	f7f7 fe60 	bl	8000108 <strlen>
 8008448:	1e82      	subs	r2, r0, #2
 800844a:	493c      	ldr	r1, [pc, #240]	; (800853c <TelitPortalAuthenticate+0x138>)
 800844c:	0030      	movs	r0, r6
 800844e:	f000 ff71 	bl	8009334 <sprintf>

    // send http post header
    result = SocketSend(socket_id, (char *)fcmd_HTTPPOST, strlen(fcmd_HTTPPOST));
 8008452:	2260      	movs	r2, #96	; 0x60
 8008454:	493a      	ldr	r1, [pc, #232]	; (8008540 <TelitPortalAuthenticate+0x13c>)
 8008456:	0020      	movs	r0, r4
 8008458:	f7ff fdc8 	bl	8007fec <SocketSend>

    // send data length
    if(result) result = SocketSend(socket_id, post_length, strlen(post_length));
 800845c:	2800      	cmp	r0, #0
 800845e:	d008      	beq.n	8008472 <TelitPortalAuthenticate+0x6e>
 8008460:	4d31      	ldr	r5, [pc, #196]	; (8008528 <TelitPortalAuthenticate+0x124>)
 8008462:	0028      	movs	r0, r5
 8008464:	f7f7 fe50 	bl	8000108 <strlen>
 8008468:	0002      	movs	r2, r0
 800846a:	0029      	movs	r1, r5
 800846c:	0020      	movs	r0, r4
 800846e:	f7ff fdbd 	bl	8007fec <SocketSend>

    // send post data
    if(result) result = SocketSend(socket_id, post_buff, strlen(post_buff));
 8008472:	2800      	cmp	r0, #0
 8008474:	d008      	beq.n	8008488 <TelitPortalAuthenticate+0x84>
 8008476:	4d2a      	ldr	r5, [pc, #168]	; (8008520 <TelitPortalAuthenticate+0x11c>)
 8008478:	0028      	movs	r0, r5
 800847a:	f7f7 fe45 	bl	8000108 <strlen>
 800847e:	0002      	movs	r2, r0
 8008480:	0029      	movs	r1, r5
 8008482:	0020      	movs	r0, r4
 8008484:	f7ff fdb2 	bl	8007fec <SocketSend>

    if(!result)
 8008488:	2800      	cmp	r0, #0
 800848a:	d045      	beq.n	8008518 <TelitPortalAuthenticate+0x114>
    {return false;}

    /* Wait for URC */
    result = SCP_WaitForAnswer("READY RECV\r\n", 20000);
 800848c:	492d      	ldr	r1, [pc, #180]	; (8008544 <TelitPortalAuthenticate+0x140>)
 800848e:	482e      	ldr	r0, [pc, #184]	; (8008548 <TelitPortalAuthenticate+0x144>)
 8008490:	f7fe feb0 	bl	80071f4 <SCP_WaitForAnswer>
    if (result)
 8008494:	2800      	cmp	r0, #0
 8008496:	d038      	beq.n	800850a <TelitPortalAuthenticate+0x106>
    {
        result = SocketReceive(modem_data.socket_id);
 8008498:	4b2c      	ldr	r3, [pc, #176]	; (800854c <TelitPortalAuthenticate+0x148>)
 800849a:	68d8      	ldr	r0, [r3, #12]
 800849c:	f7ff ff5e 	bl	800835c <SocketReceive>
        if(result)
 80084a0:	2800      	cmp	r0, #0
 80084a2:	d032      	beq.n	800850a <TelitPortalAuthenticate+0x106>
        {
            result = strstr(result, "sessionId\":\"");
 80084a4:	492a      	ldr	r1, [pc, #168]	; (8008550 <TelitPortalAuthenticate+0x14c>)
 80084a6:	f000 ff88 	bl	80093ba <strstr>
            if(result)
 80084aa:	2800      	cmp	r0, #0
 80084ac:	d02d      	beq.n	800850a <TelitPortalAuthenticate+0x106>
            {
                result += strlen("sessionId\":\"");
 80084ae:	0002      	movs	r2, r0
 80084b0:	320c      	adds	r2, #12

                i=0;
 80084b2:	2100      	movs	r1, #0
                while ((*result != '\"')&& (*result != 0))
 80084b4:	7813      	ldrb	r3, [r2, #0]
 80084b6:	2b22      	cmp	r3, #34	; 0x22
 80084b8:	d006      	beq.n	80084c8 <TelitPortalAuthenticate+0xc4>
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d004      	beq.n	80084c8 <TelitPortalAuthenticate+0xc4>
                {
                    telit_sessionId[i++]=*(result++);
 80084be:	3201      	adds	r2, #1
 80084c0:	4818      	ldr	r0, [pc, #96]	; (8008524 <TelitPortalAuthenticate+0x120>)
 80084c2:	5443      	strb	r3, [r0, r1]
 80084c4:	3101      	adds	r1, #1
 80084c6:	e7f5      	b.n	80084b4 <TelitPortalAuthenticate+0xb0>

                }

                memset(post_buff, 0, sizeof(post_buff));
 80084c8:	4d15      	ldr	r5, [pc, #84]	; (8008520 <TelitPortalAuthenticate+0x11c>)
 80084ca:	2280      	movs	r2, #128	; 0x80
 80084cc:	00d2      	lsls	r2, r2, #3
 80084ce:	2100      	movs	r1, #0
 80084d0:	0028      	movs	r0, r5
 80084d2:	f000 ff27 	bl	8009324 <memset>
                result = NULL;
                sprintf(post_buff, "+ESOCK: %d CLOSE", socket_id);
 80084d6:	0022      	movs	r2, r4
 80084d8:	491e      	ldr	r1, [pc, #120]	; (8008554 <TelitPortalAuthenticate+0x150>)
 80084da:	0028      	movs	r0, r5
 80084dc:	f000 ff2a 	bl	8009334 <sprintf>
                for(i = 5; i > 0; i--)
 80084e0:	2405      	movs	r4, #5
 80084e2:	2c00      	cmp	r4, #0
 80084e4:	dd0b      	ble.n	80084fe <TelitPortalAuthenticate+0xfa>
                {
                  osDelay(1000);
 80084e6:	20fa      	movs	r0, #250	; 0xfa
 80084e8:	0080      	lsls	r0, r0, #2
 80084ea:	f7fd fa30 	bl	800594e <osDelay>
                  result = strstr((char*)SCPHandler.RxBuffer, post_buff);
 80084ee:	490c      	ldr	r1, [pc, #48]	; (8008520 <TelitPortalAuthenticate+0x11c>)
 80084f0:	4819      	ldr	r0, [pc, #100]	; (8008558 <TelitPortalAuthenticate+0x154>)
 80084f2:	f000 ff62 	bl	80093ba <strstr>
                  if(result)
 80084f6:	2800      	cmp	r0, #0
 80084f8:	d110      	bne.n	800851c <TelitPortalAuthenticate+0x118>
                for(i = 5; i > 0; i--)
 80084fa:	3c01      	subs	r4, #1
 80084fc:	e7f1      	b.n	80084e2 <TelitPortalAuthenticate+0xde>
                  {
                    return true;
                  }
                }
                ModemCloseTcpSocket(modem_data.socket_id);
 80084fe:	4b13      	ldr	r3, [pc, #76]	; (800854c <TelitPortalAuthenticate+0x148>)
 8008500:	68d8      	ldr	r0, [r3, #12]
 8008502:	f7ff fd3b 	bl	8007f7c <ModemCloseTcpSocket>
                return true;
 8008506:	2001      	movs	r0, #1
 8008508:	e004      	b.n	8008514 <TelitPortalAuthenticate+0x110>
            }
        }
    }

    ModemCloseTcpSocket(modem_data.socket_id);
 800850a:	4b10      	ldr	r3, [pc, #64]	; (800854c <TelitPortalAuthenticate+0x148>)
 800850c:	68d8      	ldr	r0, [r3, #12]
 800850e:	f7ff fd35 	bl	8007f7c <ModemCloseTcpSocket>
    return false;
 8008512:	2000      	movs	r0, #0
}
 8008514:	b002      	add	sp, #8
 8008516:	bd70      	pop	{r4, r5, r6, pc}
    {return false;}
 8008518:	2000      	movs	r0, #0
 800851a:	e7fb      	b.n	8008514 <TelitPortalAuthenticate+0x110>
                    return true;
 800851c:	2001      	movs	r0, #1
 800851e:	e7f9      	b.n	8008514 <TelitPortalAuthenticate+0x110>
 8008520:	2000363c 	.word	0x2000363c
 8008524:	20003abc 	.word	0x20003abc
 8008528:	20003aac 	.word	0x20003aac
 800852c:	20003a61 	.word	0x20003a61
 8008530:	0800e898 	.word	0x0800e898
 8008534:	0800e8b4 	.word	0x0800e8b4
 8008538:	0800e648 	.word	0x0800e648
 800853c:	0800e4ec 	.word	0x0800e4ec
 8008540:	0800e5e4 	.word	0x0800e5e4
 8008544:	00004e20 	.word	0x00004e20
 8008548:	0800e4f4 	.word	0x0800e4f4
 800854c:	20003a3c 	.word	0x20003a3c
 8008550:	0800e504 	.word	0x0800e504
 8008554:	0800e514 	.word	0x0800e514
 8008558:	20002d4c 	.word	0x20002d4c

0800855c <TelitPortalPostData>:

/*Post*/
static _Bool TelitPortalPostData(int socket_id)
{
 800855c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800855e:	46ce      	mov	lr, r9
 8008560:	4647      	mov	r7, r8
 8008562:	b580      	push	{r7, lr}
 8008564:	b08b      	sub	sp, #44	; 0x2c
 8008566:	0005      	movs	r5, r0
  char *result = NULL;
  uint32_t len;
  
  memset(post_buff, 0, sizeof(post_buff));
 8008568:	4e77      	ldr	r6, [pc, #476]	; (8008748 <TelitPortalPostData+0x1ec>)
 800856a:	2280      	movs	r2, #128	; 0x80
 800856c:	00d2      	lsls	r2, r2, #3
 800856e:	2100      	movs	r1, #0
 8008570:	0030      	movs	r0, r6
 8008572:	f000 fed7 	bl	8009324 <memset>
  
  /*Reset rx buffer for data reception*/
  SCP_InitRx();
 8008576:	f7fe fe15 	bl	80071a4 <SCP_InitRx>
            modem_data.imei,
            modem_data.imei,
            modem_data.imei,
            modem_data.imei,
            modem_data.imei,
			(int)storage.energy_stored_mah,
 800857a:	4b74      	ldr	r3, [pc, #464]	; (800874c <TelitPortalPostData+0x1f0>)
 800857c:	6a1f      	ldr	r7, [r3, #32]
			(int)storage.energy_released_mah,
 800857e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008580:	4690      	mov	r8, r2
			(int)modem_data.day_lenght_store,
 8008582:	4c73      	ldr	r4, [pc, #460]	; (8008750 <TelitPortalPostData+0x1f4>)
 8008584:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8008586:	4691      	mov	r9, r2
			(int)storage.total_batt_ouput_ah,
 8008588:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800858a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
			(int)storage.vbatt_mv
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	9308      	str	r3, [sp, #32]
    sprintf(
 8008590:	3425      	adds	r4, #37	; 0x25
 8008592:	f7fa fadb 	bl	8002b4c <__aeabi_d2iz>
 8008596:	9007      	str	r0, [sp, #28]
 8008598:	464b      	mov	r3, r9
 800859a:	9306      	str	r3, [sp, #24]
 800859c:	4640      	mov	r0, r8
 800859e:	f7f8 fd29 	bl	8000ff4 <__aeabi_f2iz>
 80085a2:	9005      	str	r0, [sp, #20]
 80085a4:	1c38      	adds	r0, r7, #0
 80085a6:	f7f8 fd25 	bl	8000ff4 <__aeabi_f2iz>
 80085aa:	9004      	str	r0, [sp, #16]
 80085ac:	9403      	str	r4, [sp, #12]
 80085ae:	9402      	str	r4, [sp, #8]
 80085b0:	9401      	str	r4, [sp, #4]
 80085b2:	9400      	str	r4, [sp, #0]
 80085b4:	0023      	movs	r3, r4
 80085b6:	4a67      	ldr	r2, [pc, #412]	; (8008754 <TelitPortalPostData+0x1f8>)
 80085b8:	4967      	ldr	r1, [pc, #412]	; (8008758 <TelitPortalPostData+0x1fc>)
 80085ba:	0030      	movs	r0, r6
 80085bc:	f000 feba 	bl	8009334 <sprintf>
              );

    len += strlen((char *)post_buff);
 80085c0:	0030      	movs	r0, r6
 80085c2:	f7f7 fda1 	bl	8000108 <strlen>
 80085c6:	30c8      	adds	r0, #200	; 0xc8
 80085c8:	30ff      	adds	r0, #255	; 0xff
 80085ca:	0007      	movs	r7, r0
    
    // form the buffer with post header
    result = SocketSend(socket_id, (char *)fcmd_HTTPPOST, strlen(fcmd_HTTPPOST));
 80085cc:	2260      	movs	r2, #96	; 0x60
 80085ce:	4963      	ldr	r1, [pc, #396]	; (800875c <TelitPortalPostData+0x200>)
 80085d0:	0028      	movs	r0, r5
 80085d2:	f7ff fd0b 	bl	8007fec <SocketSend>
 80085d6:	0004      	movs	r4, r0

    sprintf((char *)post_buff,"%d\r\n\r\n", (int)len);
 80085d8:	003a      	movs	r2, r7
 80085da:	4961      	ldr	r1, [pc, #388]	; (8008760 <TelitPortalPostData+0x204>)
 80085dc:	0030      	movs	r0, r6
 80085de:	f000 fea9 	bl	8009334 <sprintf>
    if(result) result = SocketSend(socket_id, post_buff, strlen(post_buff));
 80085e2:	2c00      	cmp	r4, #0
 80085e4:	d009      	beq.n	80085fa <TelitPortalPostData+0x9e>
 80085e6:	4c58      	ldr	r4, [pc, #352]	; (8008748 <TelitPortalPostData+0x1ec>)
 80085e8:	0020      	movs	r0, r4
 80085ea:	f7f7 fd8d 	bl	8000108 <strlen>
 80085ee:	0002      	movs	r2, r0
 80085f0:	0021      	movs	r1, r4
 80085f2:	0028      	movs	r0, r5
 80085f4:	f7ff fcfa 	bl	8007fec <SocketSend>
 80085f8:	0004      	movs	r4, r0

    sprintf((char *)post_buff, fcmd_dw_post_auth, telit_sessionId);
 80085fa:	4a56      	ldr	r2, [pc, #344]	; (8008754 <TelitPortalPostData+0x1f8>)
 80085fc:	4959      	ldr	r1, [pc, #356]	; (8008764 <TelitPortalPostData+0x208>)
 80085fe:	4852      	ldr	r0, [pc, #328]	; (8008748 <TelitPortalPostData+0x1ec>)
 8008600:	f000 fe98 	bl	8009334 <sprintf>
    if(result) result = SocketSend(socket_id, post_buff, strlen(post_buff));
 8008604:	2c00      	cmp	r4, #0
 8008606:	d009      	beq.n	800861c <TelitPortalPostData+0xc0>
 8008608:	4c4f      	ldr	r4, [pc, #316]	; (8008748 <TelitPortalPostData+0x1ec>)
 800860a:	0020      	movs	r0, r4
 800860c:	f7f7 fd7c 	bl	8000108 <strlen>
 8008610:	0002      	movs	r2, r0
 8008612:	0021      	movs	r1, r4
 8008614:	0028      	movs	r0, r5
 8008616:	f7ff fce9 	bl	8007fec <SocketSend>
 800861a:	0004      	movs	r4, r0

    // post first line
    sprintf((char *)post_buff, fcmd_dw_post_p1, modem_data.imei, (int)storage.energy_stored_mah);
 800861c:	4b4b      	ldr	r3, [pc, #300]	; (800874c <TelitPortalPostData+0x1f0>)
 800861e:	6a18      	ldr	r0, [r3, #32]
 8008620:	f7f8 fce8 	bl	8000ff4 <__aeabi_f2iz>
 8008624:	0003      	movs	r3, r0
 8008626:	4a50      	ldr	r2, [pc, #320]	; (8008768 <TelitPortalPostData+0x20c>)
 8008628:	4950      	ldr	r1, [pc, #320]	; (800876c <TelitPortalPostData+0x210>)
 800862a:	4847      	ldr	r0, [pc, #284]	; (8008748 <TelitPortalPostData+0x1ec>)
 800862c:	f000 fe82 	bl	8009334 <sprintf>
    if(result) result = SocketSend(socket_id, post_buff, strlen(post_buff));
 8008630:	2c00      	cmp	r4, #0
 8008632:	d009      	beq.n	8008648 <TelitPortalPostData+0xec>
 8008634:	4c44      	ldr	r4, [pc, #272]	; (8008748 <TelitPortalPostData+0x1ec>)
 8008636:	0020      	movs	r0, r4
 8008638:	f7f7 fd66 	bl	8000108 <strlen>
 800863c:	0002      	movs	r2, r0
 800863e:	0021      	movs	r1, r4
 8008640:	0028      	movs	r0, r5
 8008642:	f7ff fcd3 	bl	8007fec <SocketSend>
 8008646:	0004      	movs	r4, r0

    // post second line
    sprintf((char *)post_buff, fcmd_dw_post_p2, modem_data.imei, (int)storage.energy_released_mah);
 8008648:	4b40      	ldr	r3, [pc, #256]	; (800874c <TelitPortalPostData+0x1f0>)
 800864a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800864c:	f7f8 fcd2 	bl	8000ff4 <__aeabi_f2iz>
 8008650:	0003      	movs	r3, r0
 8008652:	4a45      	ldr	r2, [pc, #276]	; (8008768 <TelitPortalPostData+0x20c>)
 8008654:	4946      	ldr	r1, [pc, #280]	; (8008770 <TelitPortalPostData+0x214>)
 8008656:	483c      	ldr	r0, [pc, #240]	; (8008748 <TelitPortalPostData+0x1ec>)
 8008658:	f000 fe6c 	bl	8009334 <sprintf>
    if(result) result = SocketSend(socket_id, post_buff, strlen(post_buff));
 800865c:	2c00      	cmp	r4, #0
 800865e:	d009      	beq.n	8008674 <TelitPortalPostData+0x118>
 8008660:	4c39      	ldr	r4, [pc, #228]	; (8008748 <TelitPortalPostData+0x1ec>)
 8008662:	0020      	movs	r0, r4
 8008664:	f7f7 fd50 	bl	8000108 <strlen>
 8008668:	0002      	movs	r2, r0
 800866a:	0021      	movs	r1, r4
 800866c:	0028      	movs	r0, r5
 800866e:	f7ff fcbd 	bl	8007fec <SocketSend>
 8008672:	0004      	movs	r4, r0

    // post third line
    sprintf((char *)post_buff, fcmd_dw_post_p3, modem_data.imei, (int)modem_data.day_lenght_store);
 8008674:	4a36      	ldr	r2, [pc, #216]	; (8008750 <TelitPortalPostData+0x1f4>)
 8008676:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 8008678:	3225      	adds	r2, #37	; 0x25
 800867a:	493e      	ldr	r1, [pc, #248]	; (8008774 <TelitPortalPostData+0x218>)
 800867c:	4832      	ldr	r0, [pc, #200]	; (8008748 <TelitPortalPostData+0x1ec>)
 800867e:	f000 fe59 	bl	8009334 <sprintf>
    if(result) result = SocketSend(socket_id, post_buff, strlen(post_buff));
 8008682:	2c00      	cmp	r4, #0
 8008684:	d009      	beq.n	800869a <TelitPortalPostData+0x13e>
 8008686:	4c30      	ldr	r4, [pc, #192]	; (8008748 <TelitPortalPostData+0x1ec>)
 8008688:	0020      	movs	r0, r4
 800868a:	f7f7 fd3d 	bl	8000108 <strlen>
 800868e:	0002      	movs	r2, r0
 8008690:	0021      	movs	r1, r4
 8008692:	0028      	movs	r0, r5
 8008694:	f7ff fcaa 	bl	8007fec <SocketSend>
 8008698:	0004      	movs	r4, r0

    // post fourth line
    sprintf((char *)post_buff, fcmd_dw_post_p4, modem_data.imei, (int)storage.total_batt_ouput_ah);
 800869a:	4b2c      	ldr	r3, [pc, #176]	; (800874c <TelitPortalPostData+0x1f0>)
 800869c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800869e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80086a0:	f7fa fa54 	bl	8002b4c <__aeabi_d2iz>
 80086a4:	0003      	movs	r3, r0
 80086a6:	4a30      	ldr	r2, [pc, #192]	; (8008768 <TelitPortalPostData+0x20c>)
 80086a8:	4933      	ldr	r1, [pc, #204]	; (8008778 <TelitPortalPostData+0x21c>)
 80086aa:	4827      	ldr	r0, [pc, #156]	; (8008748 <TelitPortalPostData+0x1ec>)
 80086ac:	f000 fe42 	bl	8009334 <sprintf>
    if(result) result = SocketSend(socket_id, post_buff, strlen(post_buff));
 80086b0:	2c00      	cmp	r4, #0
 80086b2:	d009      	beq.n	80086c8 <TelitPortalPostData+0x16c>
 80086b4:	4c24      	ldr	r4, [pc, #144]	; (8008748 <TelitPortalPostData+0x1ec>)
 80086b6:	0020      	movs	r0, r4
 80086b8:	f7f7 fd26 	bl	8000108 <strlen>
 80086bc:	0002      	movs	r2, r0
 80086be:	0021      	movs	r1, r4
 80086c0:	0028      	movs	r0, r5
 80086c2:	f7ff fc93 	bl	8007fec <SocketSend>
 80086c6:	0004      	movs	r4, r0

    // post fifth line
    sprintf((char *)post_buff, fcmd_dw_post_p5, modem_data.imei, (int)storage.vbatt_mv);
 80086c8:	4b20      	ldr	r3, [pc, #128]	; (800874c <TelitPortalPostData+0x1f0>)
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	4a26      	ldr	r2, [pc, #152]	; (8008768 <TelitPortalPostData+0x20c>)
 80086ce:	492b      	ldr	r1, [pc, #172]	; (800877c <TelitPortalPostData+0x220>)
 80086d0:	481d      	ldr	r0, [pc, #116]	; (8008748 <TelitPortalPostData+0x1ec>)
 80086d2:	f000 fe2f 	bl	8009334 <sprintf>
    if(result) result = SocketSend(socket_id, post_buff, strlen(post_buff));
 80086d6:	2c00      	cmp	r4, #0
 80086d8:	d009      	beq.n	80086ee <TelitPortalPostData+0x192>
 80086da:	4c1b      	ldr	r4, [pc, #108]	; (8008748 <TelitPortalPostData+0x1ec>)
 80086dc:	0020      	movs	r0, r4
 80086de:	f7f7 fd13 	bl	8000108 <strlen>
 80086e2:	0002      	movs	r2, r0
 80086e4:	0021      	movs	r1, r4
 80086e6:	0028      	movs	r0, r5
 80086e8:	f7ff fc80 	bl	8007fec <SocketSend>
 80086ec:	0004      	movs	r4, r0

    if(result) result = SocketSend(socket_id, "\r\n", strlen("\r\n"));
 80086ee:	2c00      	cmp	r4, #0
 80086f0:	d005      	beq.n	80086fe <TelitPortalPostData+0x1a2>
 80086f2:	2202      	movs	r2, #2
 80086f4:	4922      	ldr	r1, [pc, #136]	; (8008780 <TelitPortalPostData+0x224>)
 80086f6:	0028      	movs	r0, r5
 80086f8:	f7ff fc78 	bl	8007fec <SocketSend>
 80086fc:	0004      	movs	r4, r0

    if(!result)
 80086fe:	2c00      	cmp	r4, #0
 8008700:	d020      	beq.n	8008744 <TelitPortalPostData+0x1e8>
    {return false;}
    
    /* Wait for URC */
    result = SCP_WaitForAnswer("READY RECV\r\n", 20000);
 8008702:	4920      	ldr	r1, [pc, #128]	; (8008784 <TelitPortalPostData+0x228>)
 8008704:	4820      	ldr	r0, [pc, #128]	; (8008788 <TelitPortalPostData+0x22c>)
 8008706:	f7fe fd75 	bl	80071f4 <SCP_WaitForAnswer>
    
    if (result)
 800870a:	2800      	cmp	r0, #0
 800870c:	d00a      	beq.n	8008724 <TelitPortalPostData+0x1c8>
    {
        result = SocketReceive(modem_data.socket_id);
 800870e:	4b10      	ldr	r3, [pc, #64]	; (8008750 <TelitPortalPostData+0x1f4>)
 8008710:	68d8      	ldr	r0, [r3, #12]
 8008712:	f7ff fe23 	bl	800835c <SocketReceive>
        if(result)
 8008716:	2800      	cmp	r0, #0
 8008718:	d004      	beq.n	8008724 <TelitPortalPostData+0x1c8>
        {
            result = strstr(result, "}}");
 800871a:	491c      	ldr	r1, [pc, #112]	; (800878c <TelitPortalPostData+0x230>)
 800871c:	f000 fe4d 	bl	80093ba <strstr>
            if(result)
 8008720:	2800      	cmp	r0, #0
 8008722:	d109      	bne.n	8008738 <TelitPortalPostData+0x1dc>
            }
        }
    }
  
  /*Timeout. In case of error, no }} received*/
  ModemCloseTcpSocket(modem_data.socket_id);
 8008724:	4b0a      	ldr	r3, [pc, #40]	; (8008750 <TelitPortalPostData+0x1f4>)
 8008726:	68d8      	ldr	r0, [r3, #12]
 8008728:	f7ff fc28 	bl	8007f7c <ModemCloseTcpSocket>
  return false;
 800872c:	2000      	movs	r0, #0
}
 800872e:	b00b      	add	sp, #44	; 0x2c
 8008730:	bcc0      	pop	{r6, r7}
 8008732:	46b9      	mov	r9, r7
 8008734:	46b0      	mov	r8, r6
 8008736:	bdf0      	pop	{r4, r5, r6, r7, pc}
                  ModemCloseTcpSocket(modem_data.socket_id);
 8008738:	4b05      	ldr	r3, [pc, #20]	; (8008750 <TelitPortalPostData+0x1f4>)
 800873a:	68d8      	ldr	r0, [r3, #12]
 800873c:	f7ff fc1e 	bl	8007f7c <ModemCloseTcpSocket>
                  return true;
 8008740:	2001      	movs	r0, #1
 8008742:	e7f4      	b.n	800872e <TelitPortalPostData+0x1d2>
    {return false;}
 8008744:	2000      	movs	r0, #0
 8008746:	e7f2      	b.n	800872e <TelitPortalPostData+0x1d2>
 8008748:	2000363c 	.word	0x2000363c
 800874c:	20003af0 	.word	0x20003af0
 8008750:	20003a3c 	.word	0x20003a3c
 8008754:	20003abc 	.word	0x20003abc
 8008758:	0800e528 	.word	0x0800e528
 800875c:	0800e5e4 	.word	0x0800e5e4
 8008760:	0800e4ec 	.word	0x0800e4ec
 8008764:	0800e6ac 	.word	0x0800e6ac
 8008768:	20003a61 	.word	0x20003a61
 800876c:	0800e6c8 	.word	0x0800e6c8
 8008770:	0800e724 	.word	0x0800e724
 8008774:	0800e784 	.word	0x0800e784
 8008778:	0800e7dc 	.word	0x0800e7dc
 800877c:	0800e83c 	.word	0x0800e83c
 8008780:	0800e4f0 	.word	0x0800e4f0
 8008784:	00004e20 	.word	0x00004e20
 8008788:	0800e4f4 	.word	0x0800e4f4
 800878c:	0800e540 	.word	0x0800e540

08008790 <ModemOpenTcpSocket>:
{
 8008790:	b570      	push	{r4, r5, r6, lr}
 8008792:	b08a      	sub	sp, #40	; 0x28
 8008794:	0004      	movs	r4, r0
 8008796:	000d      	movs	r5, r1
 8008798:	0016      	movs	r6, r2
    memset(buff, 0, sizeof(buff));
 800879a:	2223      	movs	r2, #35	; 0x23
 800879c:	2100      	movs	r1, #0
 800879e:	a801      	add	r0, sp, #4
 80087a0:	f000 fdc0 	bl	8009324 <memset>
    sprintf(buff, "AT+ETL=1,0,0,\"%s\",%d\r\n", pAddress, (int)port);
 80087a4:	002b      	movs	r3, r5
 80087a6:	0022      	movs	r2, r4
 80087a8:	490f      	ldr	r1, [pc, #60]	; (80087e8 <ModemOpenTcpSocket+0x58>)
 80087aa:	a801      	add	r0, sp, #4
 80087ac:	f000 fdc2 	bl	8009334 <sprintf>
    result = SCP_SendCommandWaitAnswer(buff, "OK", 10000, 1);
 80087b0:	2301      	movs	r3, #1
 80087b2:	4a0e      	ldr	r2, [pc, #56]	; (80087ec <ModemOpenTcpSocket+0x5c>)
 80087b4:	490e      	ldr	r1, [pc, #56]	; (80087f0 <ModemOpenTcpSocket+0x60>)
 80087b6:	a801      	add	r0, sp, #4
 80087b8:	f7fe fcb0 	bl	800711c <SCP_SendCommandWaitAnswer>
    if(result)
 80087bc:	2800      	cmp	r0, #0
 80087be:	d011      	beq.n	80087e4 <ModemOpenTcpSocket+0x54>
        result = memmem((char*)SCPHandler.RxBuffer, CMD_BUFF_LENGTH, "+ETL:", sizeof("+ETL:")-1);
 80087c0:	2180      	movs	r1, #128	; 0x80
 80087c2:	2305      	movs	r3, #5
 80087c4:	4a0b      	ldr	r2, [pc, #44]	; (80087f4 <ModemOpenTcpSocket+0x64>)
 80087c6:	00c9      	lsls	r1, r1, #3
 80087c8:	480b      	ldr	r0, [pc, #44]	; (80087f8 <ModemOpenTcpSocket+0x68>)
 80087ca:	f7ff fc59 	bl	8008080 <memmem>
        if(result)
 80087ce:	2800      	cmp	r0, #0
 80087d0:	d102      	bne.n	80087d8 <ModemOpenTcpSocket+0x48>
    return false;
 80087d2:	2000      	movs	r0, #0
}
 80087d4:	b00a      	add	sp, #40	; 0x28
 80087d6:	bd70      	pop	{r4, r5, r6, pc}
            result += 6;
 80087d8:	3006      	adds	r0, #6
            *socket_id = atoi(result);
 80087da:	f000 fd50 	bl	800927e <atoi>
 80087de:	6030      	str	r0, [r6, #0]
            return true;
 80087e0:	2001      	movs	r0, #1
 80087e2:	e7f7      	b.n	80087d4 <ModemOpenTcpSocket+0x44>
    return false;
 80087e4:	2000      	movs	r0, #0
 80087e6:	e7f5      	b.n	80087d4 <ModemOpenTcpSocket+0x44>
 80087e8:	0800e544 	.word	0x0800e544
 80087ec:	00002710 	.word	0x00002710
 80087f0:	0800e3b8 	.word	0x0800e3b8
 80087f4:	0800e55c 	.word	0x0800e55c
 80087f8:	20002d4c 	.word	0x20002d4c

080087fc <uart_send_buff>:
{
 80087fc:	b510      	push	{r4, lr}
	return HAL_UART_Transmit_DMA(&huart1, data_out, (uint16_t)size);
 80087fe:	b28a      	uxth	r2, r1
 8008800:	0001      	movs	r1, r0
 8008802:	4802      	ldr	r0, [pc, #8]	; (800880c <uart_send_buff+0x10>)
 8008804:	f7fc fa76 	bl	8004cf4 <HAL_UART_Transmit_DMA>
}
 8008808:	bd10      	pop	{r4, pc}
 800880a:	46c0      	nop			; (mov r8, r8)
 800880c:	2000348c 	.word	0x2000348c

08008810 <uart_read_byte>:
{
 8008810:	b510      	push	{r4, lr}
 8008812:	0001      	movs	r1, r0
	return HAL_UART_Receive_DMA(&huart1, pData, 1);
 8008814:	2201      	movs	r2, #1
 8008816:	4802      	ldr	r0, [pc, #8]	; (8008820 <uart_read_byte+0x10>)
 8008818:	f7fd f810 	bl	800583c <HAL_UART_Receive_DMA>
}
 800881c:	bd10      	pop	{r4, pc}
 800881e:	46c0      	nop			; (mov r8, r8)
 8008820:	2000348c 	.word	0x2000348c

08008824 <TelitCloudUpload>:

upload_error_t TelitCloudUpload(void)
{
 8008824:	b570      	push	{r4, r5, r6, lr}
  if(*pwr_level < PWRONLVL)
 8008826:	4bc3      	ldr	r3, [pc, #780]	; (8008b34 <TelitCloudUpload+0x310>)
 8008828:	891a      	ldrh	r2, [r3, #8]
 800882a:	4bc3      	ldr	r3, [pc, #780]	; (8008b38 <TelitCloudUpload+0x314>)
 800882c:	429a      	cmp	r2, r3
 800882e:	d918      	bls.n	8008862 <TelitCloudUpload+0x3e>
    return true;
 8008830:	2301      	movs	r3, #1
  _Bool result = false;  
  char * scp_result = NULL;
  upload_error_t return_error = UPLOAD_OK;
  
  /*Apply power for IoT LTE module*/
  if(!ModemOn(&storage.adc_data[4]))
 8008832:	2b00      	cmp	r3, #0
 8008834:	d12b      	bne.n	800888e <TelitCloudUpload+0x6a>
  {
    return_error = MODEM_POWER_ON_FAIL;
 8008836:	2401      	movs	r4, #1
  modem_data.modem_power_en = false;
  return return_error;
  
error_exit:
  /*Turn off LED*/
  SetLED(false);
 8008838:	2000      	movs	r0, #0
 800883a:	f7ff fbbd 	bl	8007fb8 <SetLED>

  /*Turn off Modem*/
/*Stop Timer*/
HAL_TIM_Base_Stop_IT(&htim7);
 800883e:	48bf      	ldr	r0, [pc, #764]	; (8008b3c <TelitCloudUpload+0x318>)
 8008840:	f7fc f8b4 	bl	80049ac <HAL_TIM_Base_Stop_IT>
  if(*pwr_level >= PWRONLVL)
 8008844:	4bbb      	ldr	r3, [pc, #748]	; (8008b34 <TelitCloudUpload+0x310>)
 8008846:	891a      	ldrh	r2, [r3, #8]
 8008848:	4bbb      	ldr	r3, [pc, #748]	; (8008b38 <TelitCloudUpload+0x314>)
 800884a:	429a      	cmp	r2, r3
 800884c:	d900      	bls.n	8008850 <TelitCloudUpload+0x2c>
 800884e:	e159      	b.n	8008b04 <TelitCloudUpload+0x2e0>
    return true;
 8008850:	2301      	movs	r3, #1
  if(!ModemOff(&storage.adc_data[4]))
 8008852:	2b00      	cmp	r3, #0
 8008854:	d100      	bne.n	8008858 <TelitCloudUpload+0x34>
 8008856:	e167      	b.n	8008b28 <TelitCloudUpload+0x304>
  {
    return_error = MODEM_POWER_OFF_FAIL;
    modem_data.modem_power_en = false;
    return return_error;
  }
  modem_data.modem_power_en = false;
 8008858:	4bb9      	ldr	r3, [pc, #740]	; (8008b40 <TelitCloudUpload+0x31c>)
 800885a:	2200      	movs	r2, #0
 800885c:	701a      	strb	r2, [r3, #0]
  return return_error;
}
 800885e:	0020      	movs	r0, r4
 8008860:	bd70      	pop	{r4, r5, r6, pc}
	HAL_GPIO_WritePin(LDO_OFF_GPIO_Port, LDO_OFF_Pin, GPIO_PIN_RESET);
 8008862:	20a0      	movs	r0, #160	; 0xa0
 8008864:	2200      	movs	r2, #0
 8008866:	2140      	movs	r1, #64	; 0x40
 8008868:	05c0      	lsls	r0, r0, #23
 800886a:	f7fb f9d0 	bl	8003c0e <HAL_GPIO_WritePin>
	osDelay(3000);
 800886e:	48b5      	ldr	r0, [pc, #724]	; (8008b44 <TelitCloudUpload+0x320>)
 8008870:	f7fd f86d 	bl	800594e <osDelay>
    if(*pwr_level >= PWRONLVL)
 8008874:	4baf      	ldr	r3, [pc, #700]	; (8008b34 <TelitCloudUpload+0x310>)
 8008876:	891a      	ldrh	r2, [r3, #8]
 8008878:	4baf      	ldr	r3, [pc, #700]	; (8008b38 <TelitCloudUpload+0x314>)
 800887a:	429a      	cmp	r2, r3
 800887c:	d801      	bhi.n	8008882 <TelitCloudUpload+0x5e>
      return false;
 800887e:	2300      	movs	r3, #0
 8008880:	e7d7      	b.n	8008832 <TelitCloudUpload+0xe>
      osDelay(1000);
 8008882:	20fa      	movs	r0, #250	; 0xfa
 8008884:	0080      	lsls	r0, r0, #2
 8008886:	f7fd f862 	bl	800594e <osDelay>
      return true;
 800888a:	2301      	movs	r3, #1
 800888c:	e7d1      	b.n	8008832 <TelitCloudUpload+0xe>
  HAL_TIM_Base_Start_IT(&htim7);
 800888e:	48ab      	ldr	r0, [pc, #684]	; (8008b3c <TelitCloudUpload+0x318>)
 8008890:	f7fc f856 	bl	8004940 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart1, &aRxBuffer, 1);
 8008894:	2201      	movs	r2, #1
 8008896:	49ac      	ldr	r1, [pc, #688]	; (8008b48 <TelitCloudUpload+0x324>)
 8008898:	48ac      	ldr	r0, [pc, #688]	; (8008b4c <TelitCloudUpload+0x328>)
 800889a:	f7fc ffcf 	bl	800583c <HAL_UART_Receive_DMA>
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 800889e:	24a0      	movs	r4, #160	; 0xa0
 80088a0:	05e4      	lsls	r4, r4, #23
 80088a2:	2201      	movs	r2, #1
 80088a4:	2180      	movs	r1, #128	; 0x80
 80088a6:	0020      	movs	r0, r4
 80088a8:	f7fb f9b1 	bl	8003c0e <HAL_GPIO_WritePin>
	osDelay(200);
 80088ac:	20c8      	movs	r0, #200	; 0xc8
 80088ae:	f7fd f84e 	bl	800594e <osDelay>
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 80088b2:	2200      	movs	r2, #0
 80088b4:	2180      	movs	r1, #128	; 0x80
 80088b6:	0020      	movs	r0, r4
 80088b8:	f7fb f9a9 	bl	8003c0e <HAL_GPIO_WritePin>
	osDelay(1000);
 80088bc:	20fa      	movs	r0, #250	; 0xfa
 80088be:	0080      	lsls	r0, r0, #2
 80088c0:	f7fd f845 	bl	800594e <osDelay>
  scp_result =SCP_WaitForAnswer("+EIND: 1", 10000);
 80088c4:	49a2      	ldr	r1, [pc, #648]	; (8008b50 <TelitCloudUpload+0x32c>)
 80088c6:	48a3      	ldr	r0, [pc, #652]	; (8008b54 <TelitCloudUpload+0x330>)
 80088c8:	f7fe fc94 	bl	80071f4 <SCP_WaitForAnswer>
  scp_result = SCP_SendCommandWaitAnswer("AT\r\n", "OK", 200, 1);
 80088cc:	2301      	movs	r3, #1
 80088ce:	22c8      	movs	r2, #200	; 0xc8
 80088d0:	49a1      	ldr	r1, [pc, #644]	; (8008b58 <TelitCloudUpload+0x334>)
 80088d2:	48a2      	ldr	r0, [pc, #648]	; (8008b5c <TelitCloudUpload+0x338>)
 80088d4:	f7fe fc22 	bl	800711c <SCP_SendCommandWaitAnswer>
 80088d8:	1e04      	subs	r4, r0, #0
  if(!scp_result)
 80088da:	d071      	beq.n	80089c0 <TelitCloudUpload+0x19c>
  if (scp_result)  scp_result = SCP_SendCommandWaitAnswer("AT+ESLP=0\r\n", "OK", 2000, 1);
 80088dc:	2c00      	cmp	r4, #0
 80088de:	d007      	beq.n	80088f0 <TelitCloudUpload+0xcc>
 80088e0:	22fa      	movs	r2, #250	; 0xfa
 80088e2:	2301      	movs	r3, #1
 80088e4:	00d2      	lsls	r2, r2, #3
 80088e6:	499c      	ldr	r1, [pc, #624]	; (8008b58 <TelitCloudUpload+0x334>)
 80088e8:	489d      	ldr	r0, [pc, #628]	; (8008b60 <TelitCloudUpload+0x33c>)
 80088ea:	f7fe fc17 	bl	800711c <SCP_SendCommandWaitAnswer>
 80088ee:	0004      	movs	r4, r0
  osDelay(5000);
 80088f0:	489c      	ldr	r0, [pc, #624]	; (8008b64 <TelitCloudUpload+0x340>)
 80088f2:	f7fd f82c 	bl	800594e <osDelay>
  if (scp_result) modem_data.modem_power_en = true;
 80088f6:	2c00      	cmp	r4, #0
 80088f8:	d002      	beq.n	8008900 <TelitCloudUpload+0xdc>
 80088fa:	4b91      	ldr	r3, [pc, #580]	; (8008b40 <TelitCloudUpload+0x31c>)
 80088fc:	2201      	movs	r2, #1
 80088fe:	701a      	strb	r2, [r3, #0]
  if (scp_result) scp_result = SCP_SendCommandWaitAnswer("AT+CPIN?\r\n", "+CPIN: READY", 2000, 1);
 8008900:	2c00      	cmp	r4, #0
 8008902:	d007      	beq.n	8008914 <TelitCloudUpload+0xf0>
 8008904:	22fa      	movs	r2, #250	; 0xfa
 8008906:	2301      	movs	r3, #1
 8008908:	00d2      	lsls	r2, r2, #3
 800890a:	4997      	ldr	r1, [pc, #604]	; (8008b68 <TelitCloudUpload+0x344>)
 800890c:	4897      	ldr	r0, [pc, #604]	; (8008b6c <TelitCloudUpload+0x348>)
 800890e:	f7fe fc05 	bl	800711c <SCP_SendCommandWaitAnswer>
 8008912:	0004      	movs	r4, r0
  if (scp_result) scp_result = SCP_SendCommandWaitAnswer("ATE0\r\n", "OK", 2000, 1);
 8008914:	2c00      	cmp	r4, #0
 8008916:	d007      	beq.n	8008928 <TelitCloudUpload+0x104>
 8008918:	22fa      	movs	r2, #250	; 0xfa
 800891a:	2301      	movs	r3, #1
 800891c:	00d2      	lsls	r2, r2, #3
 800891e:	498e      	ldr	r1, [pc, #568]	; (8008b58 <TelitCloudUpload+0x334>)
 8008920:	4893      	ldr	r0, [pc, #588]	; (8008b70 <TelitCloudUpload+0x34c>)
 8008922:	f7fe fbfb 	bl	800711c <SCP_SendCommandWaitAnswer>
 8008926:	0004      	movs	r4, r0
  if (scp_result) scp_result = SCP_SendCommandWaitAnswer("AT+CMEE=2\r\n", "OK", 2000, 1);
 8008928:	2c00      	cmp	r4, #0
 800892a:	d007      	beq.n	800893c <TelitCloudUpload+0x118>
 800892c:	22fa      	movs	r2, #250	; 0xfa
 800892e:	2301      	movs	r3, #1
 8008930:	00d2      	lsls	r2, r2, #3
 8008932:	4989      	ldr	r1, [pc, #548]	; (8008b58 <TelitCloudUpload+0x334>)
 8008934:	488f      	ldr	r0, [pc, #572]	; (8008b74 <TelitCloudUpload+0x350>)
 8008936:	f7fe fbf1 	bl	800711c <SCP_SendCommandWaitAnswer>
 800893a:	0004      	movs	r4, r0
  osDelay(5000);
 800893c:	4889      	ldr	r0, [pc, #548]	; (8008b64 <TelitCloudUpload+0x340>)
 800893e:	f7fd f806 	bl	800594e <osDelay>
  if(scp_result)
 8008942:	2c00      	cmp	r4, #0
 8008944:	d029      	beq.n	800899a <TelitCloudUpload+0x176>
    scp_result = GetIMEI();
 8008946:	f7ff fa7d 	bl	8007e44 <GetIMEI>
 800894a:	1e04      	subs	r4, r0, #0
    if(scp_result)
 800894c:	d009      	beq.n	8008962 <TelitCloudUpload+0x13e>
      memset(modem_data.imei, 0x00, 16);
 800894e:	4d8a      	ldr	r5, [pc, #552]	; (8008b78 <TelitCloudUpload+0x354>)
 8008950:	2210      	movs	r2, #16
 8008952:	2100      	movs	r1, #0
 8008954:	0028      	movs	r0, r5
 8008956:	f000 fce5 	bl	8009324 <memset>
      strcpy(modem_data.imei, scp_result);
 800895a:	0021      	movs	r1, r4
 800895c:	0028      	movs	r0, r5
 800895e:	f000 fd24 	bl	80093aa <strcpy>
    scp_result = GetID();
 8008962:	f7ff fab1 	bl	8007ec8 <GetID>
 8008966:	1e04      	subs	r4, r0, #0
    if(scp_result)
 8008968:	d009      	beq.n	800897e <TelitCloudUpload+0x15a>
      memset(modem_data.device_name, 0x00, 21);
 800896a:	4d84      	ldr	r5, [pc, #528]	; (8008b7c <TelitCloudUpload+0x358>)
 800896c:	2215      	movs	r2, #21
 800896e:	2100      	movs	r1, #0
 8008970:	0028      	movs	r0, r5
 8008972:	f000 fcd7 	bl	8009324 <memset>
      strcpy(modem_data.device_name, scp_result);
 8008976:	0021      	movs	r1, r4
 8008978:	0028      	movs	r0, r5
 800897a:	f000 fd16 	bl	80093aa <strcpy>
    scp_result = GetVersion();
 800897e:	f7ff fad1 	bl	8007f24 <GetVersion>
 8008982:	1e04      	subs	r4, r0, #0
    if(scp_result)
 8008984:	d009      	beq.n	800899a <TelitCloudUpload+0x176>
      memset(modem_data.fw_version, 0x00, 16);
 8008986:	4d7e      	ldr	r5, [pc, #504]	; (8008b80 <TelitCloudUpload+0x35c>)
 8008988:	2210      	movs	r2, #16
 800898a:	2100      	movs	r1, #0
 800898c:	0028      	movs	r0, r5
 800898e:	f000 fcc9 	bl	8009324 <memset>
      strcpy(modem_data.fw_version, scp_result);
 8008992:	0021      	movs	r1, r4
 8008994:	0028      	movs	r0, r5
 8008996:	f000 fd08 	bl	80093aa <strcpy>
  if(!scp_result)
 800899a:	2c00      	cmp	r4, #0
 800899c:	d100      	bne.n	80089a0 <TelitCloudUpload+0x17c>
 800899e:	e0ab      	b.n	8008af8 <TelitCloudUpload+0x2d4>
  if (scp_result) scp_result = SCP_SendCommandWaitAnswer("AT+EGDCONT=0,\"IP\",\"omnitel\"\r", "OK", 2000, 1);
 80089a0:	22fa      	movs	r2, #250	; 0xfa
 80089a2:	2301      	movs	r3, #1
 80089a4:	00d2      	lsls	r2, r2, #3
 80089a6:	496c      	ldr	r1, [pc, #432]	; (8008b58 <TelitCloudUpload+0x334>)
 80089a8:	4876      	ldr	r0, [pc, #472]	; (8008b84 <TelitCloudUpload+0x360>)
 80089aa:	f7fe fbb7 	bl	800711c <SCP_SendCommandWaitAnswer>
  if (scp_result)
 80089ae:	2800      	cmp	r0, #0
 80089b0:	d100      	bne.n	80089b4 <TelitCloudUpload+0x190>
 80089b2:	e0a3      	b.n	8008afc <TelitCloudUpload+0x2d8>
    if(!WaitForNetwork())
 80089b4:	f7ff fbd2 	bl	800815c <WaitForNetwork>
 80089b8:	2800      	cmp	r0, #0
 80089ba:	d114      	bne.n	80089e6 <TelitCloudUpload+0x1c2>
      return_error = MODEM_NO_OPERATOR_PRESENT;
 80089bc:	2408      	movs	r4, #8
 80089be:	e73b      	b.n	8008838 <TelitCloudUpload+0x14>
    osDelay(5000);
 80089c0:	4868      	ldr	r0, [pc, #416]	; (8008b64 <TelitCloudUpload+0x340>)
 80089c2:	f7fc ffc4 	bl	800594e <osDelay>
    HAL_UART_Receive_DMA(&huart1, &aRxBuffer, 1);
 80089c6:	2201      	movs	r2, #1
 80089c8:	495f      	ldr	r1, [pc, #380]	; (8008b48 <TelitCloudUpload+0x324>)
 80089ca:	4860      	ldr	r0, [pc, #384]	; (8008b4c <TelitCloudUpload+0x328>)
 80089cc:	f7fc ff36 	bl	800583c <HAL_UART_Receive_DMA>
    scp_result = SCP_SendCommandWaitAnswer("AT\r\n", "OK", 200, 1);
 80089d0:	2301      	movs	r3, #1
 80089d2:	22c8      	movs	r2, #200	; 0xc8
 80089d4:	4960      	ldr	r1, [pc, #384]	; (8008b58 <TelitCloudUpload+0x334>)
 80089d6:	4861      	ldr	r0, [pc, #388]	; (8008b5c <TelitCloudUpload+0x338>)
 80089d8:	f7fe fba0 	bl	800711c <SCP_SendCommandWaitAnswer>
 80089dc:	1e04      	subs	r4, r0, #0
    if(!scp_result)
 80089de:	d000      	beq.n	80089e2 <TelitCloudUpload+0x1be>
 80089e0:	e77c      	b.n	80088dc <TelitCloudUpload+0xb8>
      return_error = MODEM_CMD_NO_RESPONSE;
 80089e2:	2403      	movs	r4, #3
 80089e4:	e728      	b.n	8008838 <TelitCloudUpload+0x14>
  osDelay(5000);
 80089e6:	485f      	ldr	r0, [pc, #380]	; (8008b64 <TelitCloudUpload+0x340>)
 80089e8:	f7fc ffb1 	bl	800594e <osDelay>
  modem_data.signal = SignalQuality();
 80089ec:	f7ff fb6e 	bl	80080cc <SignalQuality>
 80089f0:	4c53      	ldr	r4, [pc, #332]	; (8008b40 <TelitCloudUpload+0x31c>)
 80089f2:	6120      	str	r0, [r4, #16]
  modem_data.network_status =  NetworkRegistrationCheck();
 80089f4:	f7ff fb8e 	bl	8008114 <NetworkRegistrationCheck>
 80089f8:	6060      	str	r0, [r4, #4]
  if((modem_data.network_status == 1) || (modem_data.network_status == 5))
 80089fa:	2801      	cmp	r0, #1
 80089fc:	d001      	beq.n	8008a02 <TelitCloudUpload+0x1de>
 80089fe:	2805      	cmp	r0, #5
 8008a00:	d130      	bne.n	8008a64 <TelitCloudUpload+0x240>
    scp_result = GetOperator();
 8008a02:	f7ff fbd7 	bl	80081b4 <GetOperator>
 8008a06:	1e04      	subs	r4, r0, #0
    if(scp_result)
 8008a08:	d07a      	beq.n	8008b00 <TelitCloudUpload+0x2dc>
      memset(modem_data.operator, 0x00, 17);
 8008a0a:	4d5f      	ldr	r5, [pc, #380]	; (8008b88 <TelitCloudUpload+0x364>)
 8008a0c:	2211      	movs	r2, #17
 8008a0e:	2100      	movs	r1, #0
 8008a10:	0028      	movs	r0, r5
 8008a12:	f000 fc87 	bl	8009324 <memset>
      strcpy(modem_data.operator, scp_result);
 8008a16:	0021      	movs	r1, r4
 8008a18:	0028      	movs	r0, r5
 8008a1a:	f000 fcc6 	bl	80093aa <strcpy>
    modem_data.context = ContextStatusCheck();
 8008a1e:	f7ff fc07 	bl	8008230 <ContextStatusCheck>
 8008a22:	3d14      	subs	r5, #20
 8008a24:	60a8      	str	r0, [r5, #8]
    if(!modem_data.context)
 8008a26:	2800      	cmp	r0, #0
 8008a28:	d107      	bne.n	8008a3a <TelitCloudUpload+0x216>
      modem_data.context = ContextConnect(modem_data.ip_address);
 8008a2a:	4c58      	ldr	r4, [pc, #352]	; (8008b8c <TelitCloudUpload+0x368>)
 8008a2c:	0020      	movs	r0, r4
 8008a2e:	f7ff fc23 	bl	8008278 <ContextConnect>
 8008a32:	3c35      	subs	r4, #53	; 0x35
 8008a34:	60a0      	str	r0, [r4, #8]
      if(!modem_data.context)
 8008a36:	2800      	cmp	r0, #0
 8008a38:	d010      	beq.n	8008a5c <TelitCloudUpload+0x238>
  SetLED(true);
 8008a3a:	2001      	movs	r0, #1
 8008a3c:	f7ff fabc 	bl	8007fb8 <SetLED>
  result = ModemOpenTcpSocket("54.93.92.219", 80, &modem_data.socket_id);
 8008a40:	4a53      	ldr	r2, [pc, #332]	; (8008b90 <TelitCloudUpload+0x36c>)
 8008a42:	2150      	movs	r1, #80	; 0x50
 8008a44:	4853      	ldr	r0, [pc, #332]	; (8008b94 <TelitCloudUpload+0x370>)
 8008a46:	f7ff fea3 	bl	8008790 <ModemOpenTcpSocket>
 8008a4a:	0004      	movs	r4, r0
  osDelay(1000);
 8008a4c:	20fa      	movs	r0, #250	; 0xfa
 8008a4e:	0080      	lsls	r0, r0, #2
 8008a50:	f7fc ff7d 	bl	800594e <osDelay>
  if(result)
 8008a54:	2c00      	cmp	r4, #0
 8008a56:	d10a      	bne.n	8008a6e <TelitCloudUpload+0x24a>
	return_error = CLOUD_OPEN_SOCKET_ERROR;
 8008a58:	2406      	movs	r4, #6
 8008a5a:	e6ed      	b.n	8008838 <TelitCloudUpload+0x14>
        ContextDisconnect();
 8008a5c:	f7ff f9e0 	bl	8007e20 <ContextDisconnect>
        return_error = MODEM_NO_DATA_SERVICE;
 8008a60:	240b      	movs	r4, #11
        goto error_exit;
 8008a62:	e6e9      	b.n	8008838 <TelitCloudUpload+0x14>
    modem_data.context = 0;
 8008a64:	4b36      	ldr	r3, [pc, #216]	; (8008b40 <TelitCloudUpload+0x31c>)
 8008a66:	2200      	movs	r2, #0
 8008a68:	609a      	str	r2, [r3, #8]
    return_error = MODEM_NOT_REGISTERED;
 8008a6a:	240a      	movs	r4, #10
    goto error_exit;
 8008a6c:	e6e4      	b.n	8008838 <TelitCloudUpload+0x14>
	result = TelitPortalAuthenticate(modem_data.socket_id);
 8008a6e:	4b34      	ldr	r3, [pc, #208]	; (8008b40 <TelitCloudUpload+0x31c>)
 8008a70:	68d8      	ldr	r0, [r3, #12]
 8008a72:	f7ff fcc7 	bl	8008404 <TelitPortalAuthenticate>
    if(result)
 8008a76:	2800      	cmp	r0, #0
 8008a78:	d101      	bne.n	8008a7e <TelitCloudUpload+0x25a>
    	return_error = CLOUD_AUTH_ERROR;
 8008a7a:	2404      	movs	r4, #4
 8008a7c:	e6dc      	b.n	8008838 <TelitCloudUpload+0x14>
  	  result = ModemOpenTcpSocket("54.93.92.219", 80, &modem_data.socket_id);
 8008a7e:	4a44      	ldr	r2, [pc, #272]	; (8008b90 <TelitCloudUpload+0x36c>)
 8008a80:	2150      	movs	r1, #80	; 0x50
 8008a82:	4844      	ldr	r0, [pc, #272]	; (8008b94 <TelitCloudUpload+0x370>)
 8008a84:	f7ff fe84 	bl	8008790 <ModemOpenTcpSocket>
 8008a88:	0004      	movs	r4, r0
  	  osDelay(1000);
 8008a8a:	20fa      	movs	r0, #250	; 0xfa
 8008a8c:	0080      	lsls	r0, r0, #2
 8008a8e:	f7fc ff5e 	bl	800594e <osDelay>
      if (result)
 8008a92:	2c00      	cmp	r4, #0
 8008a94:	d101      	bne.n	8008a9a <TelitCloudUpload+0x276>
    	return_error = CLOUD_OPEN_SOCKET_ERROR;
 8008a96:	2406      	movs	r4, #6
 8008a98:	e6ce      	b.n	8008838 <TelitCloudUpload+0x14>
    	result = TelitPortalPostData(modem_data.socket_id);
 8008a9a:	4b29      	ldr	r3, [pc, #164]	; (8008b40 <TelitCloudUpload+0x31c>)
 8008a9c:	68d8      	ldr	r0, [r3, #12]
 8008a9e:	f7ff fd5d 	bl	800855c <TelitPortalPostData>
 8008aa2:	1e04      	subs	r4, r0, #0
        if(!result)
 8008aa4:	d101      	bne.n	8008aaa <TelitCloudUpload+0x286>
          return_error = CLOUD_POST_ERROR;
 8008aa6:	2405      	movs	r4, #5
 8008aa8:	e6c6      	b.n	8008838 <TelitCloudUpload+0x14>
  SetLED(false);
 8008aaa:	2000      	movs	r0, #0
 8008aac:	f7ff fa84 	bl	8007fb8 <SetLED>
  HAL_TIM_Base_Stop_IT(&htim7);
 8008ab0:	4822      	ldr	r0, [pc, #136]	; (8008b3c <TelitCloudUpload+0x318>)
 8008ab2:	f7fb ff7b 	bl	80049ac <HAL_TIM_Base_Stop_IT>
  if(*pwr_level >= PWRONLVL)
 8008ab6:	4b1f      	ldr	r3, [pc, #124]	; (8008b34 <TelitCloudUpload+0x310>)
 8008ab8:	891a      	ldrh	r2, [r3, #8]
 8008aba:	4b1f      	ldr	r3, [pc, #124]	; (8008b38 <TelitCloudUpload+0x314>)
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d806      	bhi.n	8008ace <TelitCloudUpload+0x2aa>
  if(!ModemOff(&storage.adc_data[4]))
 8008ac0:	2c00      	cmp	r4, #0
 8008ac2:	d014      	beq.n	8008aee <TelitCloudUpload+0x2ca>
  modem_data.modem_power_en = false;
 8008ac4:	4b1e      	ldr	r3, [pc, #120]	; (8008b40 <TelitCloudUpload+0x31c>)
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	701a      	strb	r2, [r3, #0]
  return return_error;
 8008aca:	2400      	movs	r4, #0
 8008acc:	e6c7      	b.n	800885e <TelitCloudUpload+0x3a>
    HAL_GPIO_WritePin(LDO_OFF_GPIO_Port, LDO_OFF_Pin, GPIO_PIN_SET);
 8008ace:	20a0      	movs	r0, #160	; 0xa0
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	2140      	movs	r1, #64	; 0x40
 8008ad4:	05c0      	lsls	r0, r0, #23
 8008ad6:	f7fb f89a 	bl	8003c0e <HAL_GPIO_WritePin>
    osDelay(3000);
 8008ada:	481a      	ldr	r0, [pc, #104]	; (8008b44 <TelitCloudUpload+0x320>)
 8008adc:	f7fc ff37 	bl	800594e <osDelay>
    if(*pwr_level < PWRONLVL)
 8008ae0:	4b14      	ldr	r3, [pc, #80]	; (8008b34 <TelitCloudUpload+0x310>)
 8008ae2:	891a      	ldrh	r2, [r3, #8]
 8008ae4:	4b14      	ldr	r3, [pc, #80]	; (8008b38 <TelitCloudUpload+0x314>)
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d9ea      	bls.n	8008ac0 <TelitCloudUpload+0x29c>
      return false;
 8008aea:	2400      	movs	r4, #0
 8008aec:	e7e8      	b.n	8008ac0 <TelitCloudUpload+0x29c>
    modem_data.modem_power_en = false;
 8008aee:	4b14      	ldr	r3, [pc, #80]	; (8008b40 <TelitCloudUpload+0x31c>)
 8008af0:	2200      	movs	r2, #0
 8008af2:	701a      	strb	r2, [r3, #0]
    return return_error;
 8008af4:	3402      	adds	r4, #2
 8008af6:	e6b2      	b.n	800885e <TelitCloudUpload+0x3a>
    return_error = MODEM_CMD_NO_RESPONSE;
 8008af8:	2403      	movs	r4, #3
 8008afa:	e69d      	b.n	8008838 <TelitCloudUpload+0x14>
    return_error = MODEM_CMD_NO_RESPONSE;
 8008afc:	2403      	movs	r4, #3
 8008afe:	e69b      	b.n	8008838 <TelitCloudUpload+0x14>
      return_error = MODEM_NO_OPERATOR_PRESENT;
 8008b00:	2408      	movs	r4, #8
 8008b02:	e699      	b.n	8008838 <TelitCloudUpload+0x14>
    HAL_GPIO_WritePin(LDO_OFF_GPIO_Port, LDO_OFF_Pin, GPIO_PIN_SET);
 8008b04:	20a0      	movs	r0, #160	; 0xa0
 8008b06:	2201      	movs	r2, #1
 8008b08:	2140      	movs	r1, #64	; 0x40
 8008b0a:	05c0      	lsls	r0, r0, #23
 8008b0c:	f7fb f87f 	bl	8003c0e <HAL_GPIO_WritePin>
    osDelay(3000);
 8008b10:	480c      	ldr	r0, [pc, #48]	; (8008b44 <TelitCloudUpload+0x320>)
 8008b12:	f7fc ff1c 	bl	800594e <osDelay>
    if(*pwr_level < PWRONLVL)
 8008b16:	4b07      	ldr	r3, [pc, #28]	; (8008b34 <TelitCloudUpload+0x310>)
 8008b18:	891a      	ldrh	r2, [r3, #8]
 8008b1a:	4b07      	ldr	r3, [pc, #28]	; (8008b38 <TelitCloudUpload+0x314>)
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d801      	bhi.n	8008b24 <TelitCloudUpload+0x300>
      return true;
 8008b20:	2301      	movs	r3, #1
 8008b22:	e696      	b.n	8008852 <TelitCloudUpload+0x2e>
      return false;
 8008b24:	2300      	movs	r3, #0
 8008b26:	e694      	b.n	8008852 <TelitCloudUpload+0x2e>
    modem_data.modem_power_en = false;
 8008b28:	4b05      	ldr	r3, [pc, #20]	; (8008b40 <TelitCloudUpload+0x31c>)
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	701a      	strb	r2, [r3, #0]
    return return_error;
 8008b2e:	2402      	movs	r4, #2
 8008b30:	e695      	b.n	800885e <TelitCloudUpload+0x3a>
 8008b32:	46c0      	nop			; (mov r8, r8)
 8008b34:	20003af0 	.word	0x20003af0
 8008b38:	00000dab 	.word	0x00000dab
 8008b3c:	200035b8 	.word	0x200035b8
 8008b40:	20003a3c 	.word	0x20003a3c
 8008b44:	00000bb8 	.word	0x00000bb8
 8008b48:	20003510 	.word	0x20003510
 8008b4c:	2000348c 	.word	0x2000348c
 8008b50:	00002710 	.word	0x00002710
 8008b54:	0800e564 	.word	0x0800e564
 8008b58:	0800e3b8 	.word	0x0800e3b8
 8008b5c:	0800e570 	.word	0x0800e570
 8008b60:	0800e578 	.word	0x0800e578
 8008b64:	00001388 	.word	0x00001388
 8008b68:	0800e584 	.word	0x0800e584
 8008b6c:	0800e594 	.word	0x0800e594
 8008b70:	0800e5a0 	.word	0x0800e5a0
 8008b74:	0800e5a8 	.word	0x0800e5a8
 8008b78:	20003a61 	.word	0x20003a61
 8008b7c:	20003a81 	.word	0x20003a81
 8008b80:	20003a96 	.word	0x20003a96
 8008b84:	0800e5b4 	.word	0x0800e5b4
 8008b88:	20003a50 	.word	0x20003a50
 8008b8c:	20003a71 	.word	0x20003a71
 8008b90:	20003a48 	.word	0x20003a48
 8008b94:	0800e5d4 	.word	0x0800e5d4

08008b98 <MonitorTask>:
extern EEPROMStorageTypDef eeprom_info;
osThreadId MonitorTaskHandle;
DevStorageTypDef storage;

void MonitorTask(void const * argument)
{
 8008b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b9a:	b087      	sub	sp, #28
  static uint32_t mon_dayticks = 0;
  static uint32_t daytime_counter= 0;
  static uint32_t nighttime_counter= 0;

  /*Start ADC DMA Process*/
  if(HAL_ADC_Start_DMA(&hadc, (uint32_t *)storage.adc_data, 5) != HAL_OK)
 8008b9c:	2205      	movs	r2, #5
 8008b9e:	4975      	ldr	r1, [pc, #468]	; (8008d74 <MonitorTask+0x1dc>)
 8008ba0:	4875      	ldr	r0, [pc, #468]	; (8008d78 <MonitorTask+0x1e0>)
 8008ba2:	f7fa fa85 	bl	80030b0 <HAL_ADC_Start_DMA>
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	d103      	bne.n	8008bb2 <MonitorTask+0x1a>
  {
	  Error_Handler();
  }

  /*Start timer*/
  HAL_TIM_Base_Start_IT(&htim21);
 8008baa:	4874      	ldr	r0, [pc, #464]	; (8008d7c <MonitorTask+0x1e4>)
 8008bac:	f7fb fec8 	bl	8004940 <HAL_TIM_Base_Start_IT>
 8008bb0:	e018      	b.n	8008be4 <MonitorTask+0x4c>
	  Error_Handler();
 8008bb2:	f7fe ff75 	bl	8007aa0 <Error_Handler>
 8008bb6:	e7f8      	b.n	8008baa <MonitorTask+0x12>
		  storage.vard_input_mv = (uint32_t)(local_adc_data[4] * VARD_CONST);

		  /*Convert&Store Input Current*/
		  storage.cinput_ma = (int32_t)((local_adc_data[0] - COFFSET_CONST) * CSENSE_CONST);
		  if(storage.cinput_ma < 0)
		  {storage.cinput_ma = 0;}
 8008bb8:	4b6e      	ldr	r3, [pc, #440]	; (8008d74 <MonitorTask+0x1dc>)
 8008bba:	2200      	movs	r2, #0
 8008bbc:	619a      	str	r2, [r3, #24]
 8008bbe:	e053      	b.n	8008c68 <MonitorTask+0xd0>

		  /*Convert&Store Output Current*/
		  storage.coutput_ma = (int32_t)((local_adc_data[1] -COFFSET_CONST) * CSENSE_CONST);
		  if(storage.coutput_ma < 0)
		  {storage.coutput_ma = 0;}
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	61da      	str	r2, [r3, #28]
 8008bc4:	e05f      	b.n	8008c86 <MonitorTask+0xee>
		  if((int)(storage.vinput_mv+eeprom_info.vin_hys_mv) > eeprom_info.vin_limit_mv)
		  {
			  daytime_counter++;
			  nighttime_counter= 0;
		  }
		  else if((int)(storage.vinput_mv-eeprom_info.vin_hys_mv) < eeprom_info.vin_limit_mv)
 8008bc6:	1a24      	subs	r4, r4, r0
 8008bc8:	42a3      	cmp	r3, r4
 8008bca:	dc00      	bgt.n	8008bce <MonitorTask+0x36>
 8008bcc:	e0a4      	b.n	8008d18 <MonitorTask+0x180>
		  {
			  daytime_counter= 0;
 8008bce:	4b6c      	ldr	r3, [pc, #432]	; (8008d80 <MonitorTask+0x1e8>)
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	601a      	str	r2, [r3, #0]
			  nighttime_counter++;
 8008bd4:	4a6b      	ldr	r2, [pc, #428]	; (8008d84 <MonitorTask+0x1ec>)
 8008bd6:	6813      	ldr	r3, [r2, #0]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	6013      	str	r3, [r2, #0]
 8008bdc:	e09c      	b.n	8008d18 <MonitorTask+0x180>
			  if(storage.daylength_s > HOURS_24)
			  {storage.daylength_s = HOURS_24;}
		  }
		  else
		  {
			  mon_dayticks = 0;
 8008bde:	4b6a      	ldr	r3, [pc, #424]	; (8008d88 <MonitorTask+0x1f0>)
 8008be0:	2200      	movs	r2, #0
 8008be2:	601a      	str	r2, [r3, #0]
	  evt = osSignalWait (0x00000001, osWaitForever);
 8008be4:	2201      	movs	r2, #1
 8008be6:	4252      	negs	r2, r2
 8008be8:	2101      	movs	r1, #1
 8008bea:	a803      	add	r0, sp, #12
 8008bec:	f7fc fee8 	bl	80059c0 <osSignalWait>
	  if (evt.status == osEventSignal)
 8008bf0:	9b03      	ldr	r3, [sp, #12]
 8008bf2:	2b08      	cmp	r3, #8
 8008bf4:	d1f6      	bne.n	8008be4 <MonitorTask+0x4c>
		  HAL_IWDG_Refresh(&hiwdg);
 8008bf6:	4865      	ldr	r0, [pc, #404]	; (8008d8c <MonitorTask+0x1f4>)
 8008bf8:	f7fb f844 	bl	8003c84 <HAL_IWDG_Refresh>
		  memcpy(local_adc_data, storage.adc_data, sizeof(storage.adc_data));
 8008bfc:	4d5d      	ldr	r5, [pc, #372]	; (8008d74 <MonitorTask+0x1dc>)
 8008bfe:	220a      	movs	r2, #10
 8008c00:	0029      	movs	r1, r5
 8008c02:	4668      	mov	r0, sp
 8008c04:	f000 fb85 	bl	8009312 <memcpy>
		  storage.vinput_mv = (uint32_t)(local_adc_data[2] * VINPUT_CONST);
 8008c08:	466b      	mov	r3, sp
 8008c0a:	8898      	ldrh	r0, [r3, #4]
 8008c0c:	f7f9 ffd4 	bl	8002bb8 <__aeabi_i2d>
 8008c10:	4a5f      	ldr	r2, [pc, #380]	; (8008d90 <MonitorTask+0x1f8>)
 8008c12:	4b60      	ldr	r3, [pc, #384]	; (8008d94 <MonitorTask+0x1fc>)
 8008c14:	f7f9 f97e 	bl	8001f14 <__aeabi_dmul>
 8008c18:	f7f7 fce0 	bl	80005dc <__aeabi_d2uiz>
 8008c1c:	0004      	movs	r4, r0
 8008c1e:	60e8      	str	r0, [r5, #12]
		  storage.vbatt_mv = (uint32_t)(local_adc_data[3] * VBATT_CONST);
 8008c20:	466b      	mov	r3, sp
 8008c22:	88d8      	ldrh	r0, [r3, #6]
 8008c24:	f7f9 ffc8 	bl	8002bb8 <__aeabi_i2d>
 8008c28:	2200      	movs	r2, #0
 8008c2a:	4b5b      	ldr	r3, [pc, #364]	; (8008d98 <MonitorTask+0x200>)
 8008c2c:	f7f9 f972 	bl	8001f14 <__aeabi_dmul>
 8008c30:	f7f7 fcd4 	bl	80005dc <__aeabi_d2uiz>
 8008c34:	6128      	str	r0, [r5, #16]
		  storage.vard_input_mv = (uint32_t)(local_adc_data[4] * VARD_CONST);
 8008c36:	466b      	mov	r3, sp
 8008c38:	8918      	ldrh	r0, [r3, #8]
 8008c3a:	f7f9 ffbd 	bl	8002bb8 <__aeabi_i2d>
 8008c3e:	4a57      	ldr	r2, [pc, #348]	; (8008d9c <MonitorTask+0x204>)
 8008c40:	4b57      	ldr	r3, [pc, #348]	; (8008da0 <MonitorTask+0x208>)
 8008c42:	f7f9 f967 	bl	8001f14 <__aeabi_dmul>
 8008c46:	f7f7 fcc9 	bl	80005dc <__aeabi_d2uiz>
 8008c4a:	6168      	str	r0, [r5, #20]
		  storage.cinput_ma = (int32_t)((local_adc_data[0] - COFFSET_CONST) * CSENSE_CONST);
 8008c4c:	466b      	mov	r3, sp
 8008c4e:	8818      	ldrh	r0, [r3, #0]
 8008c50:	3841      	subs	r0, #65	; 0x41
 8008c52:	f7f9 ffb1 	bl	8002bb8 <__aeabi_i2d>
 8008c56:	4a53      	ldr	r2, [pc, #332]	; (8008da4 <MonitorTask+0x20c>)
 8008c58:	4b53      	ldr	r3, [pc, #332]	; (8008da8 <MonitorTask+0x210>)
 8008c5a:	f7f9 f95b 	bl	8001f14 <__aeabi_dmul>
 8008c5e:	f7f9 ff75 	bl	8002b4c <__aeabi_d2iz>
 8008c62:	61a8      	str	r0, [r5, #24]
		  if(storage.cinput_ma < 0)
 8008c64:	2800      	cmp	r0, #0
 8008c66:	dba7      	blt.n	8008bb8 <MonitorTask+0x20>
		  storage.coutput_ma = (int32_t)((local_adc_data[1] -COFFSET_CONST) * CSENSE_CONST);
 8008c68:	466b      	mov	r3, sp
 8008c6a:	8858      	ldrh	r0, [r3, #2]
 8008c6c:	3841      	subs	r0, #65	; 0x41
 8008c6e:	f7f9 ffa3 	bl	8002bb8 <__aeabi_i2d>
 8008c72:	4a4c      	ldr	r2, [pc, #304]	; (8008da4 <MonitorTask+0x20c>)
 8008c74:	4b4c      	ldr	r3, [pc, #304]	; (8008da8 <MonitorTask+0x210>)
 8008c76:	f7f9 f94d 	bl	8001f14 <__aeabi_dmul>
 8008c7a:	f7f9 ff67 	bl	8002b4c <__aeabi_d2iz>
 8008c7e:	4b3d      	ldr	r3, [pc, #244]	; (8008d74 <MonitorTask+0x1dc>)
 8008c80:	61d8      	str	r0, [r3, #28]
		  if(storage.coutput_ma < 0)
 8008c82:	2800      	cmp	r0, #0
 8008c84:	db9c      	blt.n	8008bc0 <MonitorTask+0x28>
		  storage.energy_stored_mah += (float)(storage.cinput_ma * ETIME_CONST);
 8008c86:	4d3b      	ldr	r5, [pc, #236]	; (8008d74 <MonitorTask+0x1dc>)
 8008c88:	69a8      	ldr	r0, [r5, #24]
 8008c8a:	f7f9 ff95 	bl	8002bb8 <__aeabi_i2d>
 8008c8e:	4a47      	ldr	r2, [pc, #284]	; (8008dac <MonitorTask+0x214>)
 8008c90:	4b47      	ldr	r3, [pc, #284]	; (8008db0 <MonitorTask+0x218>)
 8008c92:	f7f9 f93f 	bl	8001f14 <__aeabi_dmul>
 8008c96:	f7f9 ffe5 	bl	8002c64 <__aeabi_d2f>
 8008c9a:	6a29      	ldr	r1, [r5, #32]
 8008c9c:	f7f7 fd88 	bl	80007b0 <__aeabi_fadd>
 8008ca0:	6228      	str	r0, [r5, #32]
		  if(storage.energy_stored_mah > FULL_BATT_MAH)
 8008ca2:	4944      	ldr	r1, [pc, #272]	; (8008db4 <MonitorTask+0x21c>)
 8008ca4:	f7f7 fc26 	bl	80004f4 <__aeabi_fcmpgt>
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	d001      	beq.n	8008cb0 <MonitorTask+0x118>
		  {storage.energy_stored_mah = FULL_BATT_MAH;}
 8008cac:	4a41      	ldr	r2, [pc, #260]	; (8008db4 <MonitorTask+0x21c>)
 8008cae:	622a      	str	r2, [r5, #32]
		  storage.energy_released_mah += (float)(storage.coutput_ma * ETIME_CONST);
 8008cb0:	4d30      	ldr	r5, [pc, #192]	; (8008d74 <MonitorTask+0x1dc>)
 8008cb2:	69e8      	ldr	r0, [r5, #28]
 8008cb4:	f7f9 ff80 	bl	8002bb8 <__aeabi_i2d>
 8008cb8:	4a3c      	ldr	r2, [pc, #240]	; (8008dac <MonitorTask+0x214>)
 8008cba:	4b3d      	ldr	r3, [pc, #244]	; (8008db0 <MonitorTask+0x218>)
 8008cbc:	f7f9 f92a 	bl	8001f14 <__aeabi_dmul>
 8008cc0:	0006      	movs	r6, r0
 8008cc2:	000f      	movs	r7, r1
 8008cc4:	f7f9 ffce 	bl	8002c64 <__aeabi_d2f>
 8008cc8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8008cca:	f7f7 fd71 	bl	80007b0 <__aeabi_fadd>
 8008cce:	6268      	str	r0, [r5, #36]	; 0x24
		  if(storage.energy_released_mah > FULL_BATT_MAH)
 8008cd0:	4938      	ldr	r1, [pc, #224]	; (8008db4 <MonitorTask+0x21c>)
 8008cd2:	f7f7 fc0f 	bl	80004f4 <__aeabi_fcmpgt>
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	d001      	beq.n	8008cde <MonitorTask+0x146>
		  {storage.energy_released_mah = FULL_BATT_MAH;}
 8008cda:	4a36      	ldr	r2, [pc, #216]	; (8008db4 <MonitorTask+0x21c>)
 8008cdc:	626a      	str	r2, [r5, #36]	; 0x24
		  storage.total_batt_ouput_ah += (double)(storage.coutput_ma * ETIME_CONST/1000);
 8008cde:	2200      	movs	r2, #0
 8008ce0:	4b35      	ldr	r3, [pc, #212]	; (8008db8 <MonitorTask+0x220>)
 8008ce2:	0030      	movs	r0, r6
 8008ce4:	0039      	movs	r1, r7
 8008ce6:	f7f8 fd0f 	bl	8001708 <__aeabi_ddiv>
 8008cea:	0002      	movs	r2, r0
 8008cec:	000b      	movs	r3, r1
 8008cee:	4d21      	ldr	r5, [pc, #132]	; (8008d74 <MonitorTask+0x1dc>)
 8008cf0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8008cf2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8008cf4:	f7f8 f99e 	bl	8001034 <__aeabi_dadd>
 8008cf8:	62a8      	str	r0, [r5, #40]	; 0x28
 8008cfa:	62e9      	str	r1, [r5, #44]	; 0x2c
		  if((int)(storage.vinput_mv+eeprom_info.vin_hys_mv) > eeprom_info.vin_limit_mv)
 8008cfc:	4b2f      	ldr	r3, [pc, #188]	; (8008dbc <MonitorTask+0x224>)
 8008cfe:	8958      	ldrh	r0, [r3, #10]
 8008d00:	1822      	adds	r2, r4, r0
 8008d02:	891b      	ldrh	r3, [r3, #8]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	dc00      	bgt.n	8008d0a <MonitorTask+0x172>
 8008d08:	e75d      	b.n	8008bc6 <MonitorTask+0x2e>
			  daytime_counter++;
 8008d0a:	4a1d      	ldr	r2, [pc, #116]	; (8008d80 <MonitorTask+0x1e8>)
 8008d0c:	6813      	ldr	r3, [r2, #0]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	6013      	str	r3, [r2, #0]
			  nighttime_counter= 0;
 8008d12:	4b1c      	ldr	r3, [pc, #112]	; (8008d84 <MonitorTask+0x1ec>)
 8008d14:	2200      	movs	r2, #0
 8008d16:	601a      	str	r2, [r3, #0]
		  if(daytime_counter > TIME_INTEG)
 8008d18:	4b19      	ldr	r3, [pc, #100]	; (8008d80 <MonitorTask+0x1e8>)
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	4b28      	ldr	r3, [pc, #160]	; (8008dc0 <MonitorTask+0x228>)
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d906      	bls.n	8008d30 <MonitorTask+0x198>
			  storage.daytime_flag = 1;
 8008d22:	4a14      	ldr	r2, [pc, #80]	; (8008d74 <MonitorTask+0x1dc>)
 8008d24:	2335      	movs	r3, #53	; 0x35
 8008d26:	2101      	movs	r1, #1
 8008d28:	54d1      	strb	r1, [r2, r3]
			  daytime_counter= 0;
 8008d2a:	4b15      	ldr	r3, [pc, #84]	; (8008d80 <MonitorTask+0x1e8>)
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	601a      	str	r2, [r3, #0]
		  if(nighttime_counter > TIME_INTEG)
 8008d30:	4b14      	ldr	r3, [pc, #80]	; (8008d84 <MonitorTask+0x1ec>)
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	4b22      	ldr	r3, [pc, #136]	; (8008dc0 <MonitorTask+0x228>)
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d905      	bls.n	8008d46 <MonitorTask+0x1ae>
			  storage.daytime_flag = 0;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	490d      	ldr	r1, [pc, #52]	; (8008d74 <MonitorTask+0x1dc>)
 8008d3e:	2235      	movs	r2, #53	; 0x35
 8008d40:	548b      	strb	r3, [r1, r2]
			  nighttime_counter= 0;
 8008d42:	4a10      	ldr	r2, [pc, #64]	; (8008d84 <MonitorTask+0x1ec>)
 8008d44:	6013      	str	r3, [r2, #0]
		  if(storage.daytime_flag)
 8008d46:	4a0b      	ldr	r2, [pc, #44]	; (8008d74 <MonitorTask+0x1dc>)
 8008d48:	2335      	movs	r3, #53	; 0x35
 8008d4a:	5cd3      	ldrb	r3, [r2, r3]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d100      	bne.n	8008d52 <MonitorTask+0x1ba>
 8008d50:	e745      	b.n	8008bde <MonitorTask+0x46>
			  mon_dayticks++;
 8008d52:	4b0d      	ldr	r3, [pc, #52]	; (8008d88 <MonitorTask+0x1f0>)
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	1c50      	adds	r0, r2, #1
 8008d58:	6018      	str	r0, [r3, #0]
			  storage.daylength_s = (uint32_t)(mon_dayticks/10);
 8008d5a:	210a      	movs	r1, #10
 8008d5c:	f7f7 f9f0 	bl	8000140 <__udivsi3>
 8008d60:	4b04      	ldr	r3, [pc, #16]	; (8008d74 <MonitorTask+0x1dc>)
 8008d62:	6318      	str	r0, [r3, #48]	; 0x30
			  if(storage.daylength_s > HOURS_24)
 8008d64:	4b17      	ldr	r3, [pc, #92]	; (8008dc4 <MonitorTask+0x22c>)
 8008d66:	4298      	cmp	r0, r3
 8008d68:	d800      	bhi.n	8008d6c <MonitorTask+0x1d4>
 8008d6a:	e73b      	b.n	8008be4 <MonitorTask+0x4c>
			  {storage.daylength_s = HOURS_24;}
 8008d6c:	4b01      	ldr	r3, [pc, #4]	; (8008d74 <MonitorTask+0x1dc>)
 8008d6e:	4a15      	ldr	r2, [pc, #84]	; (8008dc4 <MonitorTask+0x22c>)
 8008d70:	631a      	str	r2, [r3, #48]	; 0x30
 8008d72:	e737      	b.n	8008be4 <MonitorTask+0x4c>
 8008d74:	20003af0 	.word	0x20003af0
 8008d78:	2000355c 	.word	0x2000355c
 8008d7c:	200035f8 	.word	0x200035f8
 8008d80:	20002cdc 	.word	0x20002cdc
 8008d84:	20002ce4 	.word	0x20002ce4
 8008d88:	20002ce0 	.word	0x20002ce0
 8008d8c:	20003388 	.word	0x20003388
 8008d90:	6c8b4396 	.word	0x6c8b4396
 8008d94:	401d7be7 	.word	0x401d7be7
 8008d98:	40100000 	.word	0x40100000
 8008d9c:	83126e98 	.word	0x83126e98
 8008da0:	3fe9cac0 	.word	0x3fe9cac0
 8008da4:	2b020c4a 	.word	0x2b020c4a
 8008da8:	3fff1687 	.word	0x3fff1687
 8008dac:	e1812c13 	.word	0xe1812c13
 8008db0:	3efd208b 	.word	0x3efd208b
 8008db4:	46480000 	.word	0x46480000
 8008db8:	408f4000 	.word	0x408f4000
 8008dbc:	20003370 	.word	0x20003370
 8008dc0:	00001770 	.word	0x00001770
 8008dc4:	00015180 	.word	0x00015180

08008dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008dc8:	b500      	push	{lr}
 8008dca:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8008dcc:	2208      	movs	r2, #8
 8008dce:	2100      	movs	r1, #0
 8008dd0:	4668      	mov	r0, sp
 8008dd2:	f000 faa7 	bl	8009324 <memset>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008dd6:	4b11      	ldr	r3, [pc, #68]	; (8008e1c <HAL_MspInit+0x54>)
 8008dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dda:	2101      	movs	r1, #1
 8008ddc:	430a      	orrs	r2, r1
 8008dde:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8008de0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008de2:	2280      	movs	r2, #128	; 0x80
 8008de4:	0552      	lsls	r2, r2, #21
 8008de6:	430a      	orrs	r2, r1
 8008de8:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8008dea:	2002      	movs	r0, #2
 8008dec:	2200      	movs	r2, #0
 8008dee:	2103      	movs	r1, #3
 8008df0:	4240      	negs	r0, r0
 8008df2:	f7fa fad1 	bl	8003398 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 3, 0);
 8008df6:	2200      	movs	r2, #0
 8008df8:	2103      	movs	r1, #3
 8008dfa:	2004      	movs	r0, #4
 8008dfc:	f7fa facc 	bl	8003398 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8008e00:	2004      	movs	r0, #4
 8008e02:	f7fa faf9 	bl	80033f8 <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8008e06:	23c0      	movs	r3, #192	; 0xc0
 8008e08:	9300      	str	r3, [sp, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	9301      	str	r3, [sp, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8008e0e:	4668      	mov	r0, sp
 8008e10:	f7fa ff40 	bl	8003c94 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8008e14:	f7fa ff7e 	bl	8003d14 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008e18:	b003      	add	sp, #12
 8008e1a:	bd00      	pop	{pc}
 8008e1c:	40021000 	.word	0x40021000

08008e20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008e20:	b530      	push	{r4, r5, lr}
 8008e22:	b087      	sub	sp, #28
 8008e24:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e26:	2214      	movs	r2, #20
 8008e28:	2100      	movs	r1, #0
 8008e2a:	a801      	add	r0, sp, #4
 8008e2c:	f000 fa7a 	bl	8009324 <memset>
  if(hadc->Instance==ADC1)
 8008e30:	4b21      	ldr	r3, [pc, #132]	; (8008eb8 <HAL_ADC_MspInit+0x98>)
 8008e32:	6822      	ldr	r2, [r4, #0]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d001      	beq.n	8008e3c <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8008e38:	b007      	add	sp, #28
 8008e3a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008e3c:	4b1f      	ldr	r3, [pc, #124]	; (8008ebc <HAL_ADC_MspInit+0x9c>)
 8008e3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008e40:	2280      	movs	r2, #128	; 0x80
 8008e42:	0092      	lsls	r2, r2, #2
 8008e44:	430a      	orrs	r2, r1
 8008e46:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	4311      	orrs	r1, r2
 8008e4e:	62d9      	str	r1, [r3, #44]	; 0x2c
 8008e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e52:	401a      	ands	r2, r3
 8008e54:	9200      	str	r2, [sp, #0]
 8008e56:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = ISENS1_Pin|ISENS2_Pin|VINPUT_Pin|VBAT_Pin
 8008e58:	231f      	movs	r3, #31
 8008e5a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008e5c:	3b1c      	subs	r3, #28
 8008e5e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e60:	2500      	movs	r5, #0
 8008e62:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e64:	20a0      	movs	r0, #160	; 0xa0
 8008e66:	a901      	add	r1, sp, #4
 8008e68:	05c0      	lsls	r0, r0, #23
 8008e6a:	f7fa fdfb 	bl	8003a64 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8008e6e:	4814      	ldr	r0, [pc, #80]	; (8008ec0 <HAL_ADC_MspInit+0xa0>)
 8008e70:	4b14      	ldr	r3, [pc, #80]	; (8008ec4 <HAL_ADC_MspInit+0xa4>)
 8008e72:	6003      	str	r3, [r0, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8008e74:	6045      	str	r5, [r0, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008e76:	6085      	str	r5, [r0, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8008e78:	60c5      	str	r5, [r0, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8008e7a:	2380      	movs	r3, #128	; 0x80
 8008e7c:	6103      	str	r3, [r0, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008e7e:	3380      	adds	r3, #128	; 0x80
 8008e80:	6143      	str	r3, [r0, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008e82:	2380      	movs	r3, #128	; 0x80
 8008e84:	00db      	lsls	r3, r3, #3
 8008e86:	6183      	str	r3, [r0, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8008e88:	2320      	movs	r3, #32
 8008e8a:	61c3      	str	r3, [r0, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8008e8c:	2380      	movs	r3, #128	; 0x80
 8008e8e:	019b      	lsls	r3, r3, #6
 8008e90:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8008e92:	f7fa fbc5 	bl	8003620 <HAL_DMA_Init>
 8008e96:	2800      	cmp	r0, #0
 8008e98:	d10b      	bne.n	8008eb2 <HAL_ADC_MspInit+0x92>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8008e9a:	4b09      	ldr	r3, [pc, #36]	; (8008ec0 <HAL_ADC_MspInit+0xa0>)
 8008e9c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008e9e:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 3, 0);
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	2103      	movs	r1, #3
 8008ea4:	200c      	movs	r0, #12
 8008ea6:	f7fa fa77 	bl	8003398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8008eaa:	200c      	movs	r0, #12
 8008eac:	f7fa faa4 	bl	80033f8 <HAL_NVIC_EnableIRQ>
}
 8008eb0:	e7c2      	b.n	8008e38 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8008eb2:	f7fe fdf5 	bl	8007aa0 <Error_Handler>
 8008eb6:	e7f0      	b.n	8008e9a <HAL_ADC_MspInit+0x7a>
 8008eb8:	40012400 	.word	0x40012400
 8008ebc:	40021000 	.word	0x40021000
 8008ec0:	20003514 	.word	0x20003514
 8008ec4:	40020008 	.word	0x40020008

08008ec8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8008ec8:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8008eca:	6802      	ldr	r2, [r0, #0]
 8008ecc:	4b07      	ldr	r3, [pc, #28]	; (8008eec <HAL_CRC_MspInit+0x24>)
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d001      	beq.n	8008ed6 <HAL_CRC_MspInit+0xe>
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8008ed2:	b002      	add	sp, #8
 8008ed4:	4770      	bx	lr
    __HAL_RCC_CRC_CLK_ENABLE();
 8008ed6:	4a06      	ldr	r2, [pc, #24]	; (8008ef0 <HAL_CRC_MspInit+0x28>)
 8008ed8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008eda:	2080      	movs	r0, #128	; 0x80
 8008edc:	0140      	lsls	r0, r0, #5
 8008ede:	4301      	orrs	r1, r0
 8008ee0:	6311      	str	r1, [r2, #48]	; 0x30
 8008ee2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008ee4:	4003      	ands	r3, r0
 8008ee6:	9301      	str	r3, [sp, #4]
 8008ee8:	9b01      	ldr	r3, [sp, #4]
}
 8008eea:	e7f2      	b.n	8008ed2 <HAL_CRC_MspInit+0xa>
 8008eec:	40023000 	.word	0x40023000
 8008ef0:	40021000 	.word	0x40021000

08008ef4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008ef4:	b510      	push	{r4, lr}
  if(htim_base->Instance==TIM7)
 8008ef6:	6803      	ldr	r3, [r0, #0]
 8008ef8:	4a11      	ldr	r2, [pc, #68]	; (8008f40 <HAL_TIM_Base_MspInit+0x4c>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d006      	beq.n	8008f0c <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(htim_base->Instance==TIM21)
 8008efe:	4a11      	ldr	r2, [pc, #68]	; (8008f44 <HAL_TIM_Base_MspInit+0x50>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d011      	beq.n	8008f28 <HAL_TIM_Base_MspInit+0x34>
    __HAL_RCC_TIM21_CLK_ENABLE();
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
  else if(htim_base->Instance==TIM22)
 8008f04:	4a10      	ldr	r2, [pc, #64]	; (8008f48 <HAL_TIM_Base_MspInit+0x54>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d014      	beq.n	8008f34 <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8008f0a:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 8008f0c:	4a0f      	ldr	r2, [pc, #60]	; (8008f4c <HAL_TIM_Base_MspInit+0x58>)
 8008f0e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008f10:	2120      	movs	r1, #32
 8008f12:	430b      	orrs	r3, r1
 8008f14:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 8008f16:	2200      	movs	r2, #0
 8008f18:	391d      	subs	r1, #29
 8008f1a:	2012      	movs	r0, #18
 8008f1c:	f7fa fa3c 	bl	8003398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8008f20:	2012      	movs	r0, #18
 8008f22:	f7fa fa69 	bl	80033f8 <HAL_NVIC_EnableIRQ>
 8008f26:	e7f0      	b.n	8008f0a <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8008f28:	4a08      	ldr	r2, [pc, #32]	; (8008f4c <HAL_TIM_Base_MspInit+0x58>)
 8008f2a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8008f2c:	2104      	movs	r1, #4
 8008f2e:	430b      	orrs	r3, r1
 8008f30:	6353      	str	r3, [r2, #52]	; 0x34
 8008f32:	e7ea      	b.n	8008f0a <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8008f34:	4a05      	ldr	r2, [pc, #20]	; (8008f4c <HAL_TIM_Base_MspInit+0x58>)
 8008f36:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8008f38:	2120      	movs	r1, #32
 8008f3a:	430b      	orrs	r3, r1
 8008f3c:	6353      	str	r3, [r2, #52]	; 0x34
}
 8008f3e:	e7e4      	b.n	8008f0a <HAL_TIM_Base_MspInit+0x16>
 8008f40:	40001400 	.word	0x40001400
 8008f44:	40010800 	.word	0x40010800
 8008f48:	40011400 	.word	0x40011400
 8008f4c:	40021000 	.word	0x40021000

08008f50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008f50:	b530      	push	{r4, r5, lr}
 8008f52:	b087      	sub	sp, #28
 8008f54:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f56:	2214      	movs	r2, #20
 8008f58:	2100      	movs	r1, #0
 8008f5a:	a801      	add	r0, sp, #4
 8008f5c:	f000 f9e2 	bl	8009324 <memset>
  if(huart->Instance==USART1)
 8008f60:	4b2e      	ldr	r3, [pc, #184]	; (800901c <HAL_UART_MspInit+0xcc>)
 8008f62:	6822      	ldr	r2, [r4, #0]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d001      	beq.n	8008f6c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008f68:	b007      	add	sp, #28
 8008f6a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8008f6c:	4b2c      	ldr	r3, [pc, #176]	; (8009020 <HAL_UART_MspInit+0xd0>)
 8008f6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008f70:	2280      	movs	r2, #128	; 0x80
 8008f72:	01d2      	lsls	r2, r2, #7
 8008f74:	430a      	orrs	r2, r1
 8008f76:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008f7a:	2202      	movs	r2, #2
 8008f7c:	4311      	orrs	r1, r2
 8008f7e:	62d9      	str	r1, [r3, #44]	; 0x2c
 8008f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f82:	4013      	ands	r3, r2
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008f88:	23c0      	movs	r3, #192	; 0xc0
 8008f8a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f8c:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008f8e:	3bbf      	subs	r3, #191	; 0xbf
 8008f90:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8008f92:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8008f94:	2500      	movs	r5, #0
 8008f96:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f98:	a901      	add	r1, sp, #4
 8008f9a:	4822      	ldr	r0, [pc, #136]	; (8009024 <HAL_UART_MspInit+0xd4>)
 8008f9c:	f7fa fd62 	bl	8003a64 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8008fa0:	4821      	ldr	r0, [pc, #132]	; (8009028 <HAL_UART_MspInit+0xd8>)
 8008fa2:	4b22      	ldr	r3, [pc, #136]	; (800902c <HAL_UART_MspInit+0xdc>)
 8008fa4:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008faa:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008fac:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008fae:	337d      	adds	r3, #125	; 0x7d
 8008fb0:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008fb2:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008fb4:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8008fb6:	3b60      	subs	r3, #96	; 0x60
 8008fb8:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8008fba:	2380      	movs	r3, #128	; 0x80
 8008fbc:	019b      	lsls	r3, r3, #6
 8008fbe:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008fc0:	f7fa fb2e 	bl	8003620 <HAL_DMA_Init>
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	d123      	bne.n	8009010 <HAL_UART_MspInit+0xc0>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8008fc8:	4b17      	ldr	r3, [pc, #92]	; (8009028 <HAL_UART_MspInit+0xd8>)
 8008fca:	6723      	str	r3, [r4, #112]	; 0x70
 8008fcc:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8008fce:	4818      	ldr	r0, [pc, #96]	; (8009030 <HAL_UART_MspInit+0xe0>)
 8008fd0:	4b18      	ldr	r3, [pc, #96]	; (8009034 <HAL_UART_MspInit+0xe4>)
 8008fd2:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
 8008fd4:	2303      	movs	r3, #3
 8008fd6:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008fd8:	330d      	adds	r3, #13
 8008fda:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008fe0:	2280      	movs	r2, #128	; 0x80
 8008fe2:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008fe4:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008fe6:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8008fe8:	61c3      	str	r3, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008fea:	2380      	movs	r3, #128	; 0x80
 8008fec:	015b      	lsls	r3, r3, #5
 8008fee:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8008ff0:	f7fa fb16 	bl	8003620 <HAL_DMA_Init>
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	d10e      	bne.n	8009016 <HAL_UART_MspInit+0xc6>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8008ff8:	4b0d      	ldr	r3, [pc, #52]	; (8009030 <HAL_UART_MspInit+0xe0>)
 8008ffa:	66e3      	str	r3, [r4, #108]	; 0x6c
 8008ffc:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8008ffe:	2200      	movs	r2, #0
 8009000:	2103      	movs	r1, #3
 8009002:	201b      	movs	r0, #27
 8009004:	f7fa f9c8 	bl	8003398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009008:	201b      	movs	r0, #27
 800900a:	f7fa f9f5 	bl	80033f8 <HAL_NVIC_EnableIRQ>
}
 800900e:	e7ab      	b.n	8008f68 <HAL_UART_MspInit+0x18>
      Error_Handler();
 8009010:	f7fe fd46 	bl	8007aa0 <Error_Handler>
 8009014:	e7d8      	b.n	8008fc8 <HAL_UART_MspInit+0x78>
      Error_Handler();
 8009016:	f7fe fd43 	bl	8007aa0 <Error_Handler>
 800901a:	e7ed      	b.n	8008ff8 <HAL_UART_MspInit+0xa8>
 800901c:	40013800 	.word	0x40013800
 8009020:	40021000 	.word	0x40021000
 8009024:	50000400 	.word	0x50000400
 8009028:	20003404 	.word	0x20003404
 800902c:	40020030 	.word	0x40020030
 8009030:	200033bc 	.word	0x200033bc
 8009034:	4002001c 	.word	0x4002001c

08009038 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009038:	b500      	push	{lr}
 800903a:	b087      	sub	sp, #28
 800903c:	0001      	movs	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800903e:	2200      	movs	r2, #0
 8009040:	200f      	movs	r0, #15
 8009042:	f7fa f9a9 	bl	8003398 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009046:	200f      	movs	r0, #15
 8009048:	f7fa f9d6 	bl	80033f8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800904c:	4a11      	ldr	r2, [pc, #68]	; (8009094 <HAL_InitTick+0x5c>)
 800904e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009050:	2101      	movs	r1, #1
 8009052:	430b      	orrs	r3, r1
 8009054:	6393      	str	r3, [r2, #56]	; 0x38

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009056:	4669      	mov	r1, sp
 8009058:	a801      	add	r0, sp, #4
 800905a:	f7fb fa99 	bl	8004590 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800905e:	f7fb fa77 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8009062:	490d      	ldr	r1, [pc, #52]	; (8009098 <HAL_InitTick+0x60>)
 8009064:	f7f7 f86c 	bl	8000140 <__udivsi3>
 8009068:	1e43      	subs	r3, r0, #1

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800906a:	480c      	ldr	r0, [pc, #48]	; (800909c <HAL_InitTick+0x64>)
 800906c:	2280      	movs	r2, #128	; 0x80
 800906e:	05d2      	lsls	r2, r2, #23
 8009070:	6002      	str	r2, [r0, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8009072:	4a0b      	ldr	r2, [pc, #44]	; (80090a0 <HAL_InitTick+0x68>)
 8009074:	60c2      	str	r2, [r0, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8009076:	6043      	str	r3, [r0, #4]
  htim2.Init.ClockDivision = 0;
 8009078:	2300      	movs	r3, #0
 800907a:	6103      	str	r3, [r0, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800907c:	6083      	str	r3, [r0, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800907e:	f7fb fc0b 	bl	8004898 <HAL_TIM_Base_Init>
 8009082:	2800      	cmp	r0, #0
 8009084:	d002      	beq.n	800908c <HAL_InitTick+0x54>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
  }

  /* Return function status */
  return HAL_ERROR;
 8009086:	2001      	movs	r0, #1
}
 8009088:	b007      	add	sp, #28
 800908a:	bd00      	pop	{pc}
    return HAL_TIM_Base_Start_IT(&htim2);
 800908c:	4803      	ldr	r0, [pc, #12]	; (800909c <HAL_InitTick+0x64>)
 800908e:	f7fb fc57 	bl	8004940 <HAL_TIM_Base_Start_IT>
 8009092:	e7f9      	b.n	8009088 <HAL_InitTick+0x50>
 8009094:	40021000 	.word	0x40021000
 8009098:	000f4240 	.word	0x000f4240
 800909c:	20003b2c 	.word	0x20003b2c
 80090a0:	000003e7 	.word	0x000003e7

080090a4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80090a4:	4770      	bx	lr

080090a6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80090a6:	e7fe      	b.n	80090a6 <HardFault_Handler>

080090a8 <RCC_CRS_IRQHandler>:

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 80090a8:	4770      	bx	lr
	...

080090ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80090ac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80090ae:	4802      	ldr	r0, [pc, #8]	; (80090b8 <DMA1_Channel1_IRQHandler+0xc>)
 80090b0:	f7fa fb88 	bl	80037c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80090b4:	bd10      	pop	{r4, pc}
 80090b6:	46c0      	nop			; (mov r8, r8)
 80090b8:	20003514 	.word	0x20003514

080090bc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80090bc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80090be:	4803      	ldr	r0, [pc, #12]	; (80090cc <DMA1_Channel2_3_IRQHandler+0x10>)
 80090c0:	f7fa fb80 	bl	80037c4 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80090c4:	4802      	ldr	r0, [pc, #8]	; (80090d0 <DMA1_Channel2_3_IRQHandler+0x14>)
 80090c6:	f7fa fb7d 	bl	80037c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80090ca:	bd10      	pop	{r4, pc}
 80090cc:	200033bc 	.word	0x200033bc
 80090d0:	20003404 	.word	0x20003404

080090d4 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 80090d4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80090d6:	4802      	ldr	r0, [pc, #8]	; (80090e0 <ADC1_COMP_IRQHandler+0xc>)
 80090d8:	f7fa f88e 	bl	80031f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80090dc:	bd10      	pop	{r4, pc}
 80090de:	46c0      	nop			; (mov r8, r8)
 80090e0:	2000355c 	.word	0x2000355c

080090e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80090e4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80090e6:	4802      	ldr	r0, [pc, #8]	; (80090f0 <TIM2_IRQHandler+0xc>)
 80090e8:	f7fb fcfe 	bl	8004ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80090ec:	bd10      	pop	{r4, pc}
 80090ee:	46c0      	nop			; (mov r8, r8)
 80090f0:	20003b2c 	.word	0x20003b2c

080090f4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80090f4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80090f6:	4802      	ldr	r0, [pc, #8]	; (8009100 <TIM7_IRQHandler+0xc>)
 80090f8:	f7fb fcf6 	bl	8004ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80090fc:	bd10      	pop	{r4, pc}
 80090fe:	46c0      	nop			; (mov r8, r8)
 8009100:	200035b8 	.word	0x200035b8

08009104 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8009104:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8009106:	4802      	ldr	r0, [pc, #8]	; (8009110 <TIM21_IRQHandler+0xc>)
 8009108:	f7fb fcee 	bl	8004ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 800910c:	bd10      	pop	{r4, pc}
 800910e:	46c0      	nop			; (mov r8, r8)
 8009110:	200035f8 	.word	0x200035f8

08009114 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8009114:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009116:	4802      	ldr	r0, [pc, #8]	; (8009120 <USART1_IRQHandler+0xc>)
 8009118:	f7fb feca 	bl	8004eb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800911c:	bd10      	pop	{r4, pc}
 800911e:	46c0      	nop			; (mov r8, r8)
 8009120:	2000348c 	.word	0x2000348c

08009124 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8009124:	2001      	movs	r0, #1
 8009126:	4770      	bx	lr

08009128 <_kill>:

int _kill(int pid, int sig)
{
 8009128:	b510      	push	{r4, lr}
	errno = EINVAL;
 800912a:	f000 f8af 	bl	800928c <__errno>
 800912e:	2316      	movs	r3, #22
 8009130:	6003      	str	r3, [r0, #0]
	return -1;
 8009132:	2001      	movs	r0, #1
}
 8009134:	4240      	negs	r0, r0
 8009136:	bd10      	pop	{r4, pc}

08009138 <_exit>:

void _exit (int status)
{
 8009138:	b510      	push	{r4, lr}
	_kill(status, -1);
 800913a:	2101      	movs	r1, #1
 800913c:	4249      	negs	r1, r1
 800913e:	f7ff fff3 	bl	8009128 <_kill>
	while (1) {}		/* Make sure we hang here */
 8009142:	e7fe      	b.n	8009142 <_exit+0xa>

08009144 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009144:	b570      	push	{r4, r5, r6, lr}
 8009146:	000c      	movs	r4, r1
 8009148:	0016      	movs	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800914a:	2500      	movs	r5, #0
 800914c:	42b5      	cmp	r5, r6
 800914e:	da05      	bge.n	800915c <_read+0x18>
	{
		*ptr++ = __io_getchar();
 8009150:	e000      	b.n	8009154 <_read+0x10>
 8009152:	bf00      	nop
 8009154:	7020      	strb	r0, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009156:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8009158:	3401      	adds	r4, #1
 800915a:	e7f7      	b.n	800914c <_read+0x8>
	}

return len;
}
 800915c:	0030      	movs	r0, r6
 800915e:	bd70      	pop	{r4, r5, r6, pc}

08009160 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009160:	b570      	push	{r4, r5, r6, lr}
 8009162:	0016      	movs	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009164:	2400      	movs	r4, #0
 8009166:	42b4      	cmp	r4, r6
 8009168:	da06      	bge.n	8009178 <_write+0x18>
	{
		__io_putchar(*ptr++);
 800916a:	1c4d      	adds	r5, r1, #1
 800916c:	7808      	ldrb	r0, [r1, #0]
 800916e:	e000      	b.n	8009172 <_write+0x12>
 8009170:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009172:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 8009174:	0029      	movs	r1, r5
 8009176:	e7f6      	b.n	8009166 <_write+0x6>
	}
	return len;
}
 8009178:	0030      	movs	r0, r6
 800917a:	bd70      	pop	{r4, r5, r6, pc}

0800917c <_close>:

int _close(int file)
{
	return -1;
 800917c:	2001      	movs	r0, #1
}
 800917e:	4240      	negs	r0, r0
 8009180:	4770      	bx	lr

08009182 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8009182:	2380      	movs	r3, #128	; 0x80
 8009184:	019b      	lsls	r3, r3, #6
 8009186:	604b      	str	r3, [r1, #4]
	return 0;
}
 8009188:	2000      	movs	r0, #0
 800918a:	4770      	bx	lr

0800918c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800918c:	2001      	movs	r0, #1
 800918e:	4770      	bx	lr

08009190 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8009190:	2000      	movs	r0, #0
 8009192:	4770      	bx	lr

08009194 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009194:	b510      	push	{r4, lr}
 8009196:	0003      	movs	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009198:	4a0b      	ldr	r2, [pc, #44]	; (80091c8 <_sbrk+0x34>)
 800919a:	6812      	ldr	r2, [r2, #0]
 800919c:	2a00      	cmp	r2, #0
 800919e:	d008      	beq.n	80091b2 <_sbrk+0x1e>
		heap_end = &end;

	prev_heap_end = heap_end;
 80091a0:	4a09      	ldr	r2, [pc, #36]	; (80091c8 <_sbrk+0x34>)
 80091a2:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80091a4:	18c3      	adds	r3, r0, r3
 80091a6:	466a      	mov	r2, sp
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d806      	bhi.n	80091ba <_sbrk+0x26>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80091ac:	4a06      	ldr	r2, [pc, #24]	; (80091c8 <_sbrk+0x34>)
 80091ae:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80091b0:	bd10      	pop	{r4, pc}
		heap_end = &end;
 80091b2:	4a05      	ldr	r2, [pc, #20]	; (80091c8 <_sbrk+0x34>)
 80091b4:	4905      	ldr	r1, [pc, #20]	; (80091cc <_sbrk+0x38>)
 80091b6:	6011      	str	r1, [r2, #0]
 80091b8:	e7f2      	b.n	80091a0 <_sbrk+0xc>
		errno = ENOMEM;
 80091ba:	f000 f867 	bl	800928c <__errno>
 80091be:	230c      	movs	r3, #12
 80091c0:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80091c2:	2001      	movs	r0, #1
 80091c4:	4240      	negs	r0, r0
 80091c6:	e7f3      	b.n	80091b0 <_sbrk+0x1c>
 80091c8:	20002ce8 	.word	0x20002ce8
 80091cc:	20003b80 	.word	0x20003b80

080091d0 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80091d0:	4b10      	ldr	r3, [pc, #64]	; (8009214 <SystemInit+0x44>)
 80091d2:	6819      	ldr	r1, [r3, #0]
 80091d4:	2280      	movs	r2, #128	; 0x80
 80091d6:	0052      	lsls	r2, r2, #1
 80091d8:	430a      	orrs	r2, r1
 80091da:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80091dc:	68da      	ldr	r2, [r3, #12]
 80091de:	490e      	ldr	r1, [pc, #56]	; (8009218 <SystemInit+0x48>)
 80091e0:	400a      	ands	r2, r1
 80091e2:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	490d      	ldr	r1, [pc, #52]	; (800921c <SystemInit+0x4c>)
 80091e8:	400a      	ands	r2, r1
 80091ea:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80091ec:	689a      	ldr	r2, [r3, #8]
 80091ee:	2101      	movs	r1, #1
 80091f0:	438a      	bics	r2, r1
 80091f2:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	490a      	ldr	r1, [pc, #40]	; (8009220 <SystemInit+0x50>)
 80091f8:	400a      	ands	r2, r1
 80091fa:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80091fc:	68da      	ldr	r2, [r3, #12]
 80091fe:	4909      	ldr	r1, [pc, #36]	; (8009224 <SystemInit+0x54>)
 8009200:	400a      	ands	r2, r1
 8009202:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8009204:	2200      	movs	r2, #0
 8009206:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009208:	4b07      	ldr	r3, [pc, #28]	; (8009228 <SystemInit+0x58>)
 800920a:	2280      	movs	r2, #128	; 0x80
 800920c:	0512      	lsls	r2, r2, #20
 800920e:	609a      	str	r2, [r3, #8]
#endif
}
 8009210:	4770      	bx	lr
 8009212:	46c0      	nop			; (mov r8, r8)
 8009214:	40021000 	.word	0x40021000
 8009218:	88ff400c 	.word	0x88ff400c
 800921c:	fef6fff6 	.word	0xfef6fff6
 8009220:	fffbffff 	.word	0xfffbffff
 8009224:	ff02ffff 	.word	0xff02ffff
 8009228:	e000ed00 	.word	0xe000ed00

0800922c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800922c:	480d      	ldr	r0, [pc, #52]	; (8009264 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800922e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8009230:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009232:	e003      	b.n	800923c <LoopCopyDataInit>

08009234 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009234:	4b0c      	ldr	r3, [pc, #48]	; (8009268 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8009236:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009238:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800923a:	3104      	adds	r1, #4

0800923c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800923c:	480b      	ldr	r0, [pc, #44]	; (800926c <LoopForever+0xa>)
  ldr  r3, =_edata
 800923e:	4b0c      	ldr	r3, [pc, #48]	; (8009270 <LoopForever+0xe>)
  adds  r2, r0, r1
 8009240:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009242:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009244:	d3f6      	bcc.n	8009234 <CopyDataInit>
  ldr  r2, =_sbss
 8009246:	4a0b      	ldr	r2, [pc, #44]	; (8009274 <LoopForever+0x12>)
  b  LoopFillZerobss
 8009248:	e002      	b.n	8009250 <LoopFillZerobss>

0800924a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800924a:	2300      	movs	r3, #0
  str  r3, [r2]
 800924c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800924e:	3204      	adds	r2, #4

08009250 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8009250:	4b09      	ldr	r3, [pc, #36]	; (8009278 <LoopForever+0x16>)
  cmp  r2, r3
 8009252:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009254:	d3f9      	bcc.n	800924a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8009256:	f7ff ffbb 	bl	80091d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800925a:	f000 f81d 	bl	8009298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800925e:	f7fe fb47 	bl	80078f0 <main>

08009262 <LoopForever>:

LoopForever:
    b LoopForever
 8009262:	e7fe      	b.n	8009262 <LoopForever>
   ldr   r0, =_estack
 8009264:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8009268:	0800eca0 	.word	0x0800eca0
  ldr  r0, =_sdata
 800926c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009270:	200009c0 	.word	0x200009c0
  ldr  r2, =_sbss
 8009274:	200009c0 	.word	0x200009c0
  ldr  r3, = _ebss
 8009278:	20003b7c 	.word	0x20003b7c

0800927c <DMA1_Channel4_5_6_7_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800927c:	e7fe      	b.n	800927c <DMA1_Channel4_5_6_7_IRQHandler>

0800927e <atoi>:
 800927e:	b510      	push	{r4, lr}
 8009280:	220a      	movs	r2, #10
 8009282:	2100      	movs	r1, #0
 8009284:	f000 f93e 	bl	8009504 <strtol>
 8009288:	bd10      	pop	{r4, pc}
	...

0800928c <__errno>:
 800928c:	4b01      	ldr	r3, [pc, #4]	; (8009294 <__errno+0x8>)
 800928e:	6818      	ldr	r0, [r3, #0]
 8009290:	4770      	bx	lr
 8009292:	46c0      	nop			; (mov r8, r8)
 8009294:	20000010 	.word	0x20000010

08009298 <__libc_init_array>:
 8009298:	b570      	push	{r4, r5, r6, lr}
 800929a:	2600      	movs	r6, #0
 800929c:	4d0c      	ldr	r5, [pc, #48]	; (80092d0 <__libc_init_array+0x38>)
 800929e:	4c0d      	ldr	r4, [pc, #52]	; (80092d4 <__libc_init_array+0x3c>)
 80092a0:	1b64      	subs	r4, r4, r5
 80092a2:	10a4      	asrs	r4, r4, #2
 80092a4:	42a6      	cmp	r6, r4
 80092a6:	d109      	bne.n	80092bc <__libc_init_array+0x24>
 80092a8:	2600      	movs	r6, #0
 80092aa:	f004 ff89 	bl	800e1c0 <_init>
 80092ae:	4d0a      	ldr	r5, [pc, #40]	; (80092d8 <__libc_init_array+0x40>)
 80092b0:	4c0a      	ldr	r4, [pc, #40]	; (80092dc <__libc_init_array+0x44>)
 80092b2:	1b64      	subs	r4, r4, r5
 80092b4:	10a4      	asrs	r4, r4, #2
 80092b6:	42a6      	cmp	r6, r4
 80092b8:	d105      	bne.n	80092c6 <__libc_init_array+0x2e>
 80092ba:	bd70      	pop	{r4, r5, r6, pc}
 80092bc:	00b3      	lsls	r3, r6, #2
 80092be:	58eb      	ldr	r3, [r5, r3]
 80092c0:	4798      	blx	r3
 80092c2:	3601      	adds	r6, #1
 80092c4:	e7ee      	b.n	80092a4 <__libc_init_array+0xc>
 80092c6:	00b3      	lsls	r3, r6, #2
 80092c8:	58eb      	ldr	r3, [r5, r3]
 80092ca:	4798      	blx	r3
 80092cc:	3601      	adds	r6, #1
 80092ce:	e7f2      	b.n	80092b6 <__libc_init_array+0x1e>
 80092d0:	0800ec94 	.word	0x0800ec94
 80092d4:	0800ec94 	.word	0x0800ec94
 80092d8:	0800ec94 	.word	0x0800ec94
 80092dc:	0800ec9c 	.word	0x0800ec9c

080092e0 <memchr>:
 80092e0:	b2c9      	uxtb	r1, r1
 80092e2:	1882      	adds	r2, r0, r2
 80092e4:	4290      	cmp	r0, r2
 80092e6:	d101      	bne.n	80092ec <memchr+0xc>
 80092e8:	2000      	movs	r0, #0
 80092ea:	4770      	bx	lr
 80092ec:	7803      	ldrb	r3, [r0, #0]
 80092ee:	428b      	cmp	r3, r1
 80092f0:	d0fb      	beq.n	80092ea <memchr+0xa>
 80092f2:	3001      	adds	r0, #1
 80092f4:	e7f6      	b.n	80092e4 <memchr+0x4>

080092f6 <memcmp>:
 80092f6:	b530      	push	{r4, r5, lr}
 80092f8:	2400      	movs	r4, #0
 80092fa:	3901      	subs	r1, #1
 80092fc:	42a2      	cmp	r2, r4
 80092fe:	d101      	bne.n	8009304 <memcmp+0xe>
 8009300:	2000      	movs	r0, #0
 8009302:	e005      	b.n	8009310 <memcmp+0x1a>
 8009304:	5d03      	ldrb	r3, [r0, r4]
 8009306:	3401      	adds	r4, #1
 8009308:	5d0d      	ldrb	r5, [r1, r4]
 800930a:	42ab      	cmp	r3, r5
 800930c:	d0f6      	beq.n	80092fc <memcmp+0x6>
 800930e:	1b58      	subs	r0, r3, r5
 8009310:	bd30      	pop	{r4, r5, pc}

08009312 <memcpy>:
 8009312:	2300      	movs	r3, #0
 8009314:	b510      	push	{r4, lr}
 8009316:	429a      	cmp	r2, r3
 8009318:	d100      	bne.n	800931c <memcpy+0xa>
 800931a:	bd10      	pop	{r4, pc}
 800931c:	5ccc      	ldrb	r4, [r1, r3]
 800931e:	54c4      	strb	r4, [r0, r3]
 8009320:	3301      	adds	r3, #1
 8009322:	e7f8      	b.n	8009316 <memcpy+0x4>

08009324 <memset>:
 8009324:	0003      	movs	r3, r0
 8009326:	1882      	adds	r2, r0, r2
 8009328:	4293      	cmp	r3, r2
 800932a:	d100      	bne.n	800932e <memset+0xa>
 800932c:	4770      	bx	lr
 800932e:	7019      	strb	r1, [r3, #0]
 8009330:	3301      	adds	r3, #1
 8009332:	e7f9      	b.n	8009328 <memset+0x4>

08009334 <sprintf>:
 8009334:	b40e      	push	{r1, r2, r3}
 8009336:	b500      	push	{lr}
 8009338:	490b      	ldr	r1, [pc, #44]	; (8009368 <sprintf+0x34>)
 800933a:	b09c      	sub	sp, #112	; 0x70
 800933c:	ab1d      	add	r3, sp, #116	; 0x74
 800933e:	9002      	str	r0, [sp, #8]
 8009340:	9006      	str	r0, [sp, #24]
 8009342:	9107      	str	r1, [sp, #28]
 8009344:	9104      	str	r1, [sp, #16]
 8009346:	4809      	ldr	r0, [pc, #36]	; (800936c <sprintf+0x38>)
 8009348:	4909      	ldr	r1, [pc, #36]	; (8009370 <sprintf+0x3c>)
 800934a:	cb04      	ldmia	r3!, {r2}
 800934c:	9105      	str	r1, [sp, #20]
 800934e:	6800      	ldr	r0, [r0, #0]
 8009350:	a902      	add	r1, sp, #8
 8009352:	9301      	str	r3, [sp, #4]
 8009354:	f000 f8e2 	bl	800951c <_svfprintf_r>
 8009358:	2300      	movs	r3, #0
 800935a:	9a02      	ldr	r2, [sp, #8]
 800935c:	7013      	strb	r3, [r2, #0]
 800935e:	b01c      	add	sp, #112	; 0x70
 8009360:	bc08      	pop	{r3}
 8009362:	b003      	add	sp, #12
 8009364:	4718      	bx	r3
 8009366:	46c0      	nop			; (mov r8, r8)
 8009368:	7fffffff 	.word	0x7fffffff
 800936c:	20000010 	.word	0x20000010
 8009370:	ffff0208 	.word	0xffff0208

08009374 <strcat>:
 8009374:	0002      	movs	r2, r0
 8009376:	b510      	push	{r4, lr}
 8009378:	7813      	ldrb	r3, [r2, #0]
 800937a:	0014      	movs	r4, r2
 800937c:	3201      	adds	r2, #1
 800937e:	2b00      	cmp	r3, #0
 8009380:	d1fa      	bne.n	8009378 <strcat+0x4>
 8009382:	5cca      	ldrb	r2, [r1, r3]
 8009384:	54e2      	strb	r2, [r4, r3]
 8009386:	3301      	adds	r3, #1
 8009388:	2a00      	cmp	r2, #0
 800938a:	d1fa      	bne.n	8009382 <strcat+0xe>
 800938c:	bd10      	pop	{r4, pc}

0800938e <strchr>:
 800938e:	b2c9      	uxtb	r1, r1
 8009390:	7803      	ldrb	r3, [r0, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d004      	beq.n	80093a0 <strchr+0x12>
 8009396:	428b      	cmp	r3, r1
 8009398:	d100      	bne.n	800939c <strchr+0xe>
 800939a:	4770      	bx	lr
 800939c:	3001      	adds	r0, #1
 800939e:	e7f7      	b.n	8009390 <strchr+0x2>
 80093a0:	424b      	negs	r3, r1
 80093a2:	4159      	adcs	r1, r3
 80093a4:	4249      	negs	r1, r1
 80093a6:	4008      	ands	r0, r1
 80093a8:	e7f7      	b.n	800939a <strchr+0xc>

080093aa <strcpy>:
 80093aa:	0003      	movs	r3, r0
 80093ac:	780a      	ldrb	r2, [r1, #0]
 80093ae:	3101      	adds	r1, #1
 80093b0:	701a      	strb	r2, [r3, #0]
 80093b2:	3301      	adds	r3, #1
 80093b4:	2a00      	cmp	r2, #0
 80093b6:	d1f9      	bne.n	80093ac <strcpy+0x2>
 80093b8:	4770      	bx	lr

080093ba <strstr>:
 80093ba:	780a      	ldrb	r2, [r1, #0]
 80093bc:	b530      	push	{r4, r5, lr}
 80093be:	2a00      	cmp	r2, #0
 80093c0:	d10c      	bne.n	80093dc <strstr+0x22>
 80093c2:	bd30      	pop	{r4, r5, pc}
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d108      	bne.n	80093da <strstr+0x20>
 80093c8:	2301      	movs	r3, #1
 80093ca:	5ccc      	ldrb	r4, [r1, r3]
 80093cc:	2c00      	cmp	r4, #0
 80093ce:	d0f8      	beq.n	80093c2 <strstr+0x8>
 80093d0:	5cc5      	ldrb	r5, [r0, r3]
 80093d2:	42a5      	cmp	r5, r4
 80093d4:	d101      	bne.n	80093da <strstr+0x20>
 80093d6:	3301      	adds	r3, #1
 80093d8:	e7f7      	b.n	80093ca <strstr+0x10>
 80093da:	3001      	adds	r0, #1
 80093dc:	7803      	ldrb	r3, [r0, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d1f0      	bne.n	80093c4 <strstr+0xa>
 80093e2:	0018      	movs	r0, r3
 80093e4:	e7ed      	b.n	80093c2 <strstr+0x8>
	...

080093e8 <_strtol_l.isra.0>:
 80093e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ea:	b087      	sub	sp, #28
 80093ec:	001e      	movs	r6, r3
 80093ee:	9005      	str	r0, [sp, #20]
 80093f0:	9101      	str	r1, [sp, #4]
 80093f2:	9202      	str	r2, [sp, #8]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d045      	beq.n	8009484 <_strtol_l.isra.0+0x9c>
 80093f8:	0008      	movs	r0, r1
 80093fa:	2b24      	cmp	r3, #36	; 0x24
 80093fc:	d842      	bhi.n	8009484 <_strtol_l.isra.0+0x9c>
 80093fe:	4b3f      	ldr	r3, [pc, #252]	; (80094fc <_strtol_l.isra.0+0x114>)
 8009400:	2208      	movs	r2, #8
 8009402:	469c      	mov	ip, r3
 8009404:	0003      	movs	r3, r0
 8009406:	4661      	mov	r1, ip
 8009408:	781c      	ldrb	r4, [r3, #0]
 800940a:	1c45      	adds	r5, r0, #1
 800940c:	5d09      	ldrb	r1, [r1, r4]
 800940e:	0028      	movs	r0, r5
 8009410:	000f      	movs	r7, r1
 8009412:	4017      	ands	r7, r2
 8009414:	4211      	tst	r1, r2
 8009416:	d1f5      	bne.n	8009404 <_strtol_l.isra.0+0x1c>
 8009418:	2c2d      	cmp	r4, #45	; 0x2d
 800941a:	d13a      	bne.n	8009492 <_strtol_l.isra.0+0xaa>
 800941c:	2701      	movs	r7, #1
 800941e:	782c      	ldrb	r4, [r5, #0]
 8009420:	1c9d      	adds	r5, r3, #2
 8009422:	2e00      	cmp	r6, #0
 8009424:	d065      	beq.n	80094f2 <_strtol_l.isra.0+0x10a>
 8009426:	2e10      	cmp	r6, #16
 8009428:	d109      	bne.n	800943e <_strtol_l.isra.0+0x56>
 800942a:	2c30      	cmp	r4, #48	; 0x30
 800942c:	d107      	bne.n	800943e <_strtol_l.isra.0+0x56>
 800942e:	2220      	movs	r2, #32
 8009430:	782b      	ldrb	r3, [r5, #0]
 8009432:	4393      	bics	r3, r2
 8009434:	2b58      	cmp	r3, #88	; 0x58
 8009436:	d157      	bne.n	80094e8 <_strtol_l.isra.0+0x100>
 8009438:	2610      	movs	r6, #16
 800943a:	786c      	ldrb	r4, [r5, #1]
 800943c:	3502      	adds	r5, #2
 800943e:	4b30      	ldr	r3, [pc, #192]	; (8009500 <_strtol_l.isra.0+0x118>)
 8009440:	0031      	movs	r1, r6
 8009442:	18fb      	adds	r3, r7, r3
 8009444:	0018      	movs	r0, r3
 8009446:	9303      	str	r3, [sp, #12]
 8009448:	f7f6 ff00 	bl	800024c <__aeabi_uidivmod>
 800944c:	2300      	movs	r3, #0
 800944e:	2201      	movs	r2, #1
 8009450:	4684      	mov	ip, r0
 8009452:	0018      	movs	r0, r3
 8009454:	9104      	str	r1, [sp, #16]
 8009456:	4252      	negs	r2, r2
 8009458:	0021      	movs	r1, r4
 800945a:	3930      	subs	r1, #48	; 0x30
 800945c:	2909      	cmp	r1, #9
 800945e:	d81d      	bhi.n	800949c <_strtol_l.isra.0+0xb4>
 8009460:	000c      	movs	r4, r1
 8009462:	42a6      	cmp	r6, r4
 8009464:	dd28      	ble.n	80094b8 <_strtol_l.isra.0+0xd0>
 8009466:	2b00      	cmp	r3, #0
 8009468:	db24      	blt.n	80094b4 <_strtol_l.isra.0+0xcc>
 800946a:	0013      	movs	r3, r2
 800946c:	4584      	cmp	ip, r0
 800946e:	d306      	bcc.n	800947e <_strtol_l.isra.0+0x96>
 8009470:	d102      	bne.n	8009478 <_strtol_l.isra.0+0x90>
 8009472:	9904      	ldr	r1, [sp, #16]
 8009474:	42a1      	cmp	r1, r4
 8009476:	db02      	blt.n	800947e <_strtol_l.isra.0+0x96>
 8009478:	2301      	movs	r3, #1
 800947a:	4370      	muls	r0, r6
 800947c:	1820      	adds	r0, r4, r0
 800947e:	782c      	ldrb	r4, [r5, #0]
 8009480:	3501      	adds	r5, #1
 8009482:	e7e9      	b.n	8009458 <_strtol_l.isra.0+0x70>
 8009484:	f7ff ff02 	bl	800928c <__errno>
 8009488:	2316      	movs	r3, #22
 800948a:	6003      	str	r3, [r0, #0]
 800948c:	2000      	movs	r0, #0
 800948e:	b007      	add	sp, #28
 8009490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009492:	2c2b      	cmp	r4, #43	; 0x2b
 8009494:	d1c5      	bne.n	8009422 <_strtol_l.isra.0+0x3a>
 8009496:	782c      	ldrb	r4, [r5, #0]
 8009498:	1c9d      	adds	r5, r3, #2
 800949a:	e7c2      	b.n	8009422 <_strtol_l.isra.0+0x3a>
 800949c:	0021      	movs	r1, r4
 800949e:	3941      	subs	r1, #65	; 0x41
 80094a0:	2919      	cmp	r1, #25
 80094a2:	d801      	bhi.n	80094a8 <_strtol_l.isra.0+0xc0>
 80094a4:	3c37      	subs	r4, #55	; 0x37
 80094a6:	e7dc      	b.n	8009462 <_strtol_l.isra.0+0x7a>
 80094a8:	0021      	movs	r1, r4
 80094aa:	3961      	subs	r1, #97	; 0x61
 80094ac:	2919      	cmp	r1, #25
 80094ae:	d803      	bhi.n	80094b8 <_strtol_l.isra.0+0xd0>
 80094b0:	3c57      	subs	r4, #87	; 0x57
 80094b2:	e7d6      	b.n	8009462 <_strtol_l.isra.0+0x7a>
 80094b4:	0013      	movs	r3, r2
 80094b6:	e7e2      	b.n	800947e <_strtol_l.isra.0+0x96>
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	da09      	bge.n	80094d0 <_strtol_l.isra.0+0xe8>
 80094bc:	2322      	movs	r3, #34	; 0x22
 80094be:	9a05      	ldr	r2, [sp, #20]
 80094c0:	9803      	ldr	r0, [sp, #12]
 80094c2:	6013      	str	r3, [r2, #0]
 80094c4:	9b02      	ldr	r3, [sp, #8]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d0e1      	beq.n	800948e <_strtol_l.isra.0+0xa6>
 80094ca:	1e6b      	subs	r3, r5, #1
 80094cc:	9301      	str	r3, [sp, #4]
 80094ce:	e007      	b.n	80094e0 <_strtol_l.isra.0+0xf8>
 80094d0:	2f00      	cmp	r7, #0
 80094d2:	d000      	beq.n	80094d6 <_strtol_l.isra.0+0xee>
 80094d4:	4240      	negs	r0, r0
 80094d6:	9a02      	ldr	r2, [sp, #8]
 80094d8:	2a00      	cmp	r2, #0
 80094da:	d0d8      	beq.n	800948e <_strtol_l.isra.0+0xa6>
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d1f4      	bne.n	80094ca <_strtol_l.isra.0+0xe2>
 80094e0:	9b02      	ldr	r3, [sp, #8]
 80094e2:	9a01      	ldr	r2, [sp, #4]
 80094e4:	601a      	str	r2, [r3, #0]
 80094e6:	e7d2      	b.n	800948e <_strtol_l.isra.0+0xa6>
 80094e8:	2430      	movs	r4, #48	; 0x30
 80094ea:	2e00      	cmp	r6, #0
 80094ec:	d1a7      	bne.n	800943e <_strtol_l.isra.0+0x56>
 80094ee:	3608      	adds	r6, #8
 80094f0:	e7a5      	b.n	800943e <_strtol_l.isra.0+0x56>
 80094f2:	2c30      	cmp	r4, #48	; 0x30
 80094f4:	d09b      	beq.n	800942e <_strtol_l.isra.0+0x46>
 80094f6:	260a      	movs	r6, #10
 80094f8:	e7a1      	b.n	800943e <_strtol_l.isra.0+0x56>
 80094fa:	46c0      	nop			; (mov r8, r8)
 80094fc:	0800e945 	.word	0x0800e945
 8009500:	7fffffff 	.word	0x7fffffff

08009504 <strtol>:
 8009504:	b510      	push	{r4, lr}
 8009506:	0013      	movs	r3, r2
 8009508:	000a      	movs	r2, r1
 800950a:	0001      	movs	r1, r0
 800950c:	4802      	ldr	r0, [pc, #8]	; (8009518 <strtol+0x14>)
 800950e:	6800      	ldr	r0, [r0, #0]
 8009510:	f7ff ff6a 	bl	80093e8 <_strtol_l.isra.0>
 8009514:	bd10      	pop	{r4, pc}
 8009516:	46c0      	nop			; (mov r8, r8)
 8009518:	20000010 	.word	0x20000010

0800951c <_svfprintf_r>:
 800951c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800951e:	b0d9      	sub	sp, #356	; 0x164
 8009520:	001c      	movs	r4, r3
 8009522:	910b      	str	r1, [sp, #44]	; 0x2c
 8009524:	9208      	str	r2, [sp, #32]
 8009526:	900a      	str	r0, [sp, #40]	; 0x28
 8009528:	f002 fa1c 	bl	800b964 <_localeconv_r>
 800952c:	6803      	ldr	r3, [r0, #0]
 800952e:	0018      	movs	r0, r3
 8009530:	931c      	str	r3, [sp, #112]	; 0x70
 8009532:	f7f6 fde9 	bl	8000108 <strlen>
 8009536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009538:	9016      	str	r0, [sp, #88]	; 0x58
 800953a:	899b      	ldrh	r3, [r3, #12]
 800953c:	061b      	lsls	r3, r3, #24
 800953e:	d518      	bpl.n	8009572 <_svfprintf_r+0x56>
 8009540:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009542:	691b      	ldr	r3, [r3, #16]
 8009544:	9309      	str	r3, [sp, #36]	; 0x24
 8009546:	2b00      	cmp	r3, #0
 8009548:	d113      	bne.n	8009572 <_svfprintf_r+0x56>
 800954a:	2140      	movs	r1, #64	; 0x40
 800954c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800954e:	f002 fa11 	bl	800b974 <_malloc_r>
 8009552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009554:	6018      	str	r0, [r3, #0]
 8009556:	6118      	str	r0, [r3, #16]
 8009558:	2800      	cmp	r0, #0
 800955a:	d107      	bne.n	800956c <_svfprintf_r+0x50>
 800955c:	230c      	movs	r3, #12
 800955e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009560:	6013      	str	r3, [r2, #0]
 8009562:	3b0d      	subs	r3, #13
 8009564:	9317      	str	r3, [sp, #92]	; 0x5c
 8009566:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009568:	b059      	add	sp, #356	; 0x164
 800956a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800956c:	2340      	movs	r3, #64	; 0x40
 800956e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009570:	6153      	str	r3, [r2, #20]
 8009572:	2300      	movs	r3, #0
 8009574:	2200      	movs	r2, #0
 8009576:	932e      	str	r3, [sp, #184]	; 0xb8
 8009578:	932d      	str	r3, [sp, #180]	; 0xb4
 800957a:	930d      	str	r3, [sp, #52]	; 0x34
 800957c:	2300      	movs	r3, #0
 800957e:	9214      	str	r2, [sp, #80]	; 0x50
 8009580:	9315      	str	r3, [sp, #84]	; 0x54
 8009582:	2300      	movs	r3, #0
 8009584:	af2f      	add	r7, sp, #188	; 0xbc
 8009586:	972c      	str	r7, [sp, #176]	; 0xb0
 8009588:	931f      	str	r3, [sp, #124]	; 0x7c
 800958a:	931e      	str	r3, [sp, #120]	; 0x78
 800958c:	9312      	str	r3, [sp, #72]	; 0x48
 800958e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009590:	931d      	str	r3, [sp, #116]	; 0x74
 8009592:	9317      	str	r3, [sp, #92]	; 0x5c
 8009594:	9d08      	ldr	r5, [sp, #32]
 8009596:	782b      	ldrb	r3, [r5, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d002      	beq.n	80095a2 <_svfprintf_r+0x86>
 800959c:	2b25      	cmp	r3, #37	; 0x25
 800959e:	d000      	beq.n	80095a2 <_svfprintf_r+0x86>
 80095a0:	e092      	b.n	80096c8 <_svfprintf_r+0x1ac>
 80095a2:	9b08      	ldr	r3, [sp, #32]
 80095a4:	1aee      	subs	r6, r5, r3
 80095a6:	429d      	cmp	r5, r3
 80095a8:	d017      	beq.n	80095da <_svfprintf_r+0xbe>
 80095aa:	603b      	str	r3, [r7, #0]
 80095ac:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80095ae:	607e      	str	r6, [r7, #4]
 80095b0:	199b      	adds	r3, r3, r6
 80095b2:	932e      	str	r3, [sp, #184]	; 0xb8
 80095b4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80095b6:	3708      	adds	r7, #8
 80095b8:	9309      	str	r3, [sp, #36]	; 0x24
 80095ba:	3301      	adds	r3, #1
 80095bc:	932d      	str	r3, [sp, #180]	; 0xb4
 80095be:	2b07      	cmp	r3, #7
 80095c0:	dd08      	ble.n	80095d4 <_svfprintf_r+0xb8>
 80095c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80095c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80095c6:	aa2c      	add	r2, sp, #176	; 0xb0
 80095c8:	f002 ff9e 	bl	800c508 <__ssprint_r>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	d000      	beq.n	80095d2 <_svfprintf_r+0xb6>
 80095d0:	e2aa      	b.n	8009b28 <_svfprintf_r+0x60c>
 80095d2:	af2f      	add	r7, sp, #188	; 0xbc
 80095d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095d6:	199b      	adds	r3, r3, r6
 80095d8:	9317      	str	r3, [sp, #92]	; 0x5c
 80095da:	782b      	ldrb	r3, [r5, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d101      	bne.n	80095e4 <_svfprintf_r+0xc8>
 80095e0:	f001 f9d2 	bl	800a988 <_svfprintf_r+0x146c>
 80095e4:	221b      	movs	r2, #27
 80095e6:	2300      	movs	r3, #0
 80095e8:	a91e      	add	r1, sp, #120	; 0x78
 80095ea:	1852      	adds	r2, r2, r1
 80095ec:	7013      	strb	r3, [r2, #0]
 80095ee:	2201      	movs	r2, #1
 80095f0:	001e      	movs	r6, r3
 80095f2:	4252      	negs	r2, r2
 80095f4:	3501      	adds	r5, #1
 80095f6:	9209      	str	r2, [sp, #36]	; 0x24
 80095f8:	9318      	str	r3, [sp, #96]	; 0x60
 80095fa:	1c6b      	adds	r3, r5, #1
 80095fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80095fe:	782b      	ldrb	r3, [r5, #0]
 8009600:	930f      	str	r3, [sp, #60]	; 0x3c
 8009602:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009604:	3820      	subs	r0, #32
 8009606:	285a      	cmp	r0, #90	; 0x5a
 8009608:	d901      	bls.n	800960e <_svfprintf_r+0xf2>
 800960a:	f000 fe2e 	bl	800a26a <_svfprintf_r+0xd4e>
 800960e:	f7f6 fd8d 	bl	800012c <__gnu_thumb1_case_uhi>
 8009612:	0078      	.short	0x0078
 8009614:	062c062c 	.word	0x062c062c
 8009618:	062c0082 	.word	0x062c0082
 800961c:	062c062c 	.word	0x062c062c
 8009620:	062c005d 	.word	0x062c005d
 8009624:	0084062c 	.word	0x0084062c
 8009628:	062c008c 	.word	0x062c008c
 800962c:	0091008a 	.word	0x0091008a
 8009630:	00b2062c 	.word	0x00b2062c
 8009634:	00b400b4 	.word	0x00b400b4
 8009638:	00b400b4 	.word	0x00b400b4
 800963c:	00b400b4 	.word	0x00b400b4
 8009640:	00b400b4 	.word	0x00b400b4
 8009644:	062c00b4 	.word	0x062c00b4
 8009648:	062c062c 	.word	0x062c062c
 800964c:	062c062c 	.word	0x062c062c
 8009650:	062c062c 	.word	0x062c062c
 8009654:	062c0216 	.word	0x062c0216
 8009658:	01cf00e0 	.word	0x01cf00e0
 800965c:	02160216 	.word	0x02160216
 8009660:	062c0216 	.word	0x062c0216
 8009664:	062c062c 	.word	0x062c062c
 8009668:	00c7062c 	.word	0x00c7062c
 800966c:	062c062c 	.word	0x062c062c
 8009670:	062c04d6 	.word	0x062c04d6
 8009674:	062c062c 	.word	0x062c062c
 8009678:	062c051d 	.word	0x062c051d
 800967c:	062c053d 	.word	0x062c053d
 8009680:	056e062c 	.word	0x056e062c
 8009684:	062c062c 	.word	0x062c062c
 8009688:	062c062c 	.word	0x062c062c
 800968c:	062c062c 	.word	0x062c062c
 8009690:	062c062c 	.word	0x062c062c
 8009694:	062c0216 	.word	0x062c0216
 8009698:	01d100e0 	.word	0x01d100e0
 800969c:	02160216 	.word	0x02160216
 80096a0:	00c90216 	.word	0x00c90216
 80096a4:	00dc01d1 	.word	0x00dc01d1
 80096a8:	00d5062c 	.word	0x00d5062c
 80096ac:	04b9062c 	.word	0x04b9062c
 80096b0:	050d04d8 	.word	0x050d04d8
 80096b4:	062c00dc 	.word	0x062c00dc
 80096b8:	0080051d 	.word	0x0080051d
 80096bc:	062c053f 	.word	0x062c053f
 80096c0:	058e062c 	.word	0x058e062c
 80096c4:	0080062c 	.word	0x0080062c
 80096c8:	3501      	adds	r5, #1
 80096ca:	e764      	b.n	8009596 <_svfprintf_r+0x7a>
 80096cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80096ce:	f002 f949 	bl	800b964 <_localeconv_r>
 80096d2:	6843      	ldr	r3, [r0, #4]
 80096d4:	0018      	movs	r0, r3
 80096d6:	931d      	str	r3, [sp, #116]	; 0x74
 80096d8:	f7f6 fd16 	bl	8000108 <strlen>
 80096dc:	901b      	str	r0, [sp, #108]	; 0x6c
 80096de:	980a      	ldr	r0, [sp, #40]	; 0x28
 80096e0:	f002 f940 	bl	800b964 <_localeconv_r>
 80096e4:	6883      	ldr	r3, [r0, #8]
 80096e6:	9312      	str	r3, [sp, #72]	; 0x48
 80096e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d011      	beq.n	8009712 <_svfprintf_r+0x1f6>
 80096ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00e      	beq.n	8009712 <_svfprintf_r+0x1f6>
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d00b      	beq.n	8009712 <_svfprintf_r+0x1f6>
 80096fa:	2380      	movs	r3, #128	; 0x80
 80096fc:	00db      	lsls	r3, r3, #3
 80096fe:	431e      	orrs	r6, r3
 8009700:	e007      	b.n	8009712 <_svfprintf_r+0x1f6>
 8009702:	231b      	movs	r3, #27
 8009704:	aa1e      	add	r2, sp, #120	; 0x78
 8009706:	189b      	adds	r3, r3, r2
 8009708:	781a      	ldrb	r2, [r3, #0]
 800970a:	2a00      	cmp	r2, #0
 800970c:	d101      	bne.n	8009712 <_svfprintf_r+0x1f6>
 800970e:	3220      	adds	r2, #32
 8009710:	701a      	strb	r2, [r3, #0]
 8009712:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8009714:	e771      	b.n	80095fa <_svfprintf_r+0xde>
 8009716:	2301      	movs	r3, #1
 8009718:	e7f1      	b.n	80096fe <_svfprintf_r+0x1e2>
 800971a:	cc08      	ldmia	r4!, {r3}
 800971c:	9318      	str	r3, [sp, #96]	; 0x60
 800971e:	2b00      	cmp	r3, #0
 8009720:	daf7      	bge.n	8009712 <_svfprintf_r+0x1f6>
 8009722:	425b      	negs	r3, r3
 8009724:	9318      	str	r3, [sp, #96]	; 0x60
 8009726:	2304      	movs	r3, #4
 8009728:	e7e9      	b.n	80096fe <_svfprintf_r+0x1e2>
 800972a:	231b      	movs	r3, #27
 800972c:	aa1e      	add	r2, sp, #120	; 0x78
 800972e:	189b      	adds	r3, r3, r2
 8009730:	222b      	movs	r2, #43	; 0x2b
 8009732:	e7ed      	b.n	8009710 <_svfprintf_r+0x1f4>
 8009734:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009736:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009738:	7812      	ldrb	r2, [r2, #0]
 800973a:	3301      	adds	r3, #1
 800973c:	920f      	str	r2, [sp, #60]	; 0x3c
 800973e:	2a2a      	cmp	r2, #42	; 0x2a
 8009740:	d010      	beq.n	8009764 <_svfprintf_r+0x248>
 8009742:	2200      	movs	r2, #0
 8009744:	9209      	str	r2, [sp, #36]	; 0x24
 8009746:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009748:	9313      	str	r3, [sp, #76]	; 0x4c
 800974a:	3a30      	subs	r2, #48	; 0x30
 800974c:	2a09      	cmp	r2, #9
 800974e:	d900      	bls.n	8009752 <_svfprintf_r+0x236>
 8009750:	e757      	b.n	8009602 <_svfprintf_r+0xe6>
 8009752:	210a      	movs	r1, #10
 8009754:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009756:	4348      	muls	r0, r1
 8009758:	1882      	adds	r2, r0, r2
 800975a:	9209      	str	r2, [sp, #36]	; 0x24
 800975c:	781a      	ldrb	r2, [r3, #0]
 800975e:	3301      	adds	r3, #1
 8009760:	920f      	str	r2, [sp, #60]	; 0x3c
 8009762:	e7f0      	b.n	8009746 <_svfprintf_r+0x22a>
 8009764:	cc04      	ldmia	r4!, {r2}
 8009766:	9209      	str	r2, [sp, #36]	; 0x24
 8009768:	2a00      	cmp	r2, #0
 800976a:	da02      	bge.n	8009772 <_svfprintf_r+0x256>
 800976c:	2201      	movs	r2, #1
 800976e:	4252      	negs	r2, r2
 8009770:	9209      	str	r2, [sp, #36]	; 0x24
 8009772:	9313      	str	r3, [sp, #76]	; 0x4c
 8009774:	e7cd      	b.n	8009712 <_svfprintf_r+0x1f6>
 8009776:	2380      	movs	r3, #128	; 0x80
 8009778:	e7c1      	b.n	80096fe <_svfprintf_r+0x1e2>
 800977a:	2200      	movs	r2, #0
 800977c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800977e:	9218      	str	r2, [sp, #96]	; 0x60
 8009780:	210a      	movs	r1, #10
 8009782:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009784:	434a      	muls	r2, r1
 8009786:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009788:	3930      	subs	r1, #48	; 0x30
 800978a:	188a      	adds	r2, r1, r2
 800978c:	9218      	str	r2, [sp, #96]	; 0x60
 800978e:	001a      	movs	r2, r3
 8009790:	7812      	ldrb	r2, [r2, #0]
 8009792:	3301      	adds	r3, #1
 8009794:	920f      	str	r2, [sp, #60]	; 0x3c
 8009796:	3a30      	subs	r2, #48	; 0x30
 8009798:	9313      	str	r3, [sp, #76]	; 0x4c
 800979a:	2a09      	cmp	r2, #9
 800979c:	d9f0      	bls.n	8009780 <_svfprintf_r+0x264>
 800979e:	e730      	b.n	8009602 <_svfprintf_r+0xe6>
 80097a0:	2308      	movs	r3, #8
 80097a2:	e7ac      	b.n	80096fe <_svfprintf_r+0x1e2>
 80097a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	2b68      	cmp	r3, #104	; 0x68
 80097aa:	d105      	bne.n	80097b8 <_svfprintf_r+0x29c>
 80097ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80097ae:	3301      	adds	r3, #1
 80097b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80097b2:	2380      	movs	r3, #128	; 0x80
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	e7a2      	b.n	80096fe <_svfprintf_r+0x1e2>
 80097b8:	2340      	movs	r3, #64	; 0x40
 80097ba:	e7a0      	b.n	80096fe <_svfprintf_r+0x1e2>
 80097bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	2b6c      	cmp	r3, #108	; 0x6c
 80097c2:	d104      	bne.n	80097ce <_svfprintf_r+0x2b2>
 80097c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80097c6:	3301      	adds	r3, #1
 80097c8:	9313      	str	r3, [sp, #76]	; 0x4c
 80097ca:	2320      	movs	r3, #32
 80097cc:	e797      	b.n	80096fe <_svfprintf_r+0x1e2>
 80097ce:	2310      	movs	r3, #16
 80097d0:	e795      	b.n	80096fe <_svfprintf_r+0x1e2>
 80097d2:	0022      	movs	r2, r4
 80097d4:	ca08      	ldmia	r2!, {r3}
 80097d6:	a83f      	add	r0, sp, #252	; 0xfc
 80097d8:	920e      	str	r2, [sp, #56]	; 0x38
 80097da:	221b      	movs	r2, #27
 80097dc:	7003      	strb	r3, [r0, #0]
 80097de:	2300      	movs	r3, #0
 80097e0:	a91e      	add	r1, sp, #120	; 0x78
 80097e2:	1852      	adds	r2, r2, r1
 80097e4:	7013      	strb	r3, [r2, #0]
 80097e6:	930c      	str	r3, [sp, #48]	; 0x30
 80097e8:	3301      	adds	r3, #1
 80097ea:	9309      	str	r3, [sp, #36]	; 0x24
 80097ec:	2300      	movs	r3, #0
 80097ee:	001d      	movs	r5, r3
 80097f0:	9319      	str	r3, [sp, #100]	; 0x64
 80097f2:	9310      	str	r3, [sp, #64]	; 0x40
 80097f4:	9311      	str	r3, [sp, #68]	; 0x44
 80097f6:	9008      	str	r0, [sp, #32]
 80097f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80097fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097fc:	931a      	str	r3, [sp, #104]	; 0x68
 80097fe:	4293      	cmp	r3, r2
 8009800:	da00      	bge.n	8009804 <_svfprintf_r+0x2e8>
 8009802:	921a      	str	r2, [sp, #104]	; 0x68
 8009804:	231b      	movs	r3, #27
 8009806:	aa1e      	add	r2, sp, #120	; 0x78
 8009808:	189b      	adds	r3, r3, r2
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	1e5a      	subs	r2, r3, #1
 800980e:	4193      	sbcs	r3, r2
 8009810:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009812:	18d3      	adds	r3, r2, r3
 8009814:	931a      	str	r3, [sp, #104]	; 0x68
 8009816:	0032      	movs	r2, r6
 8009818:	2302      	movs	r3, #2
 800981a:	401a      	ands	r2, r3
 800981c:	9220      	str	r2, [sp, #128]	; 0x80
 800981e:	421e      	tst	r6, r3
 8009820:	d002      	beq.n	8009828 <_svfprintf_r+0x30c>
 8009822:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009824:	3302      	adds	r3, #2
 8009826:	931a      	str	r3, [sp, #104]	; 0x68
 8009828:	2384      	movs	r3, #132	; 0x84
 800982a:	0032      	movs	r2, r6
 800982c:	401a      	ands	r2, r3
 800982e:	9221      	str	r2, [sp, #132]	; 0x84
 8009830:	421e      	tst	r6, r3
 8009832:	d121      	bne.n	8009878 <_svfprintf_r+0x35c>
 8009834:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009836:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009838:	1a9c      	subs	r4, r3, r2
 800983a:	2c00      	cmp	r4, #0
 800983c:	dd1c      	ble.n	8009878 <_svfprintf_r+0x35c>
 800983e:	0039      	movs	r1, r7
 8009840:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009842:	48c5      	ldr	r0, [pc, #788]	; (8009b58 <_svfprintf_r+0x63c>)
 8009844:	9322      	str	r3, [sp, #136]	; 0x88
 8009846:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009848:	3301      	adds	r3, #1
 800984a:	3108      	adds	r1, #8
 800984c:	6038      	str	r0, [r7, #0]
 800984e:	2c10      	cmp	r4, #16
 8009850:	dd01      	ble.n	8009856 <_svfprintf_r+0x33a>
 8009852:	f000 fd1d 	bl	800a290 <_svfprintf_r+0xd74>
 8009856:	607c      	str	r4, [r7, #4]
 8009858:	18a4      	adds	r4, r4, r2
 800985a:	000f      	movs	r7, r1
 800985c:	942e      	str	r4, [sp, #184]	; 0xb8
 800985e:	932d      	str	r3, [sp, #180]	; 0xb4
 8009860:	2b07      	cmp	r3, #7
 8009862:	dd09      	ble.n	8009878 <_svfprintf_r+0x35c>
 8009864:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009866:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009868:	aa2c      	add	r2, sp, #176	; 0xb0
 800986a:	f002 fe4d 	bl	800c508 <__ssprint_r>
 800986e:	2800      	cmp	r0, #0
 8009870:	d001      	beq.n	8009876 <_svfprintf_r+0x35a>
 8009872:	f001 f868 	bl	800a946 <_svfprintf_r+0x142a>
 8009876:	af2f      	add	r7, sp, #188	; 0xbc
 8009878:	231b      	movs	r3, #27
 800987a:	aa1e      	add	r2, sp, #120	; 0x78
 800987c:	189b      	adds	r3, r3, r2
 800987e:	781a      	ldrb	r2, [r3, #0]
 8009880:	2a00      	cmp	r2, #0
 8009882:	d017      	beq.n	80098b4 <_svfprintf_r+0x398>
 8009884:	603b      	str	r3, [r7, #0]
 8009886:	2301      	movs	r3, #1
 8009888:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800988a:	607b      	str	r3, [r7, #4]
 800988c:	0013      	movs	r3, r2
 800988e:	3301      	adds	r3, #1
 8009890:	932e      	str	r3, [sp, #184]	; 0xb8
 8009892:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009894:	3708      	adds	r7, #8
 8009896:	9322      	str	r3, [sp, #136]	; 0x88
 8009898:	3301      	adds	r3, #1
 800989a:	932d      	str	r3, [sp, #180]	; 0xb4
 800989c:	2b07      	cmp	r3, #7
 800989e:	dd09      	ble.n	80098b4 <_svfprintf_r+0x398>
 80098a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80098a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80098a4:	aa2c      	add	r2, sp, #176	; 0xb0
 80098a6:	f002 fe2f 	bl	800c508 <__ssprint_r>
 80098aa:	2800      	cmp	r0, #0
 80098ac:	d001      	beq.n	80098b2 <_svfprintf_r+0x396>
 80098ae:	f001 f84a 	bl	800a946 <_svfprintf_r+0x142a>
 80098b2:	af2f      	add	r7, sp, #188	; 0xbc
 80098b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d019      	beq.n	80098ee <_svfprintf_r+0x3d2>
 80098ba:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80098bc:	9320      	str	r3, [sp, #128]	; 0x80
 80098be:	ab25      	add	r3, sp, #148	; 0x94
 80098c0:	603b      	str	r3, [r7, #0]
 80098c2:	2302      	movs	r3, #2
 80098c4:	607b      	str	r3, [r7, #4]
 80098c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80098c8:	3708      	adds	r7, #8
 80098ca:	3302      	adds	r3, #2
 80098cc:	932e      	str	r3, [sp, #184]	; 0xb8
 80098ce:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80098d0:	9320      	str	r3, [sp, #128]	; 0x80
 80098d2:	3301      	adds	r3, #1
 80098d4:	932d      	str	r3, [sp, #180]	; 0xb4
 80098d6:	2b07      	cmp	r3, #7
 80098d8:	dd09      	ble.n	80098ee <_svfprintf_r+0x3d2>
 80098da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80098dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80098de:	aa2c      	add	r2, sp, #176	; 0xb0
 80098e0:	f002 fe12 	bl	800c508 <__ssprint_r>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	d001      	beq.n	80098ec <_svfprintf_r+0x3d0>
 80098e8:	f001 f82d 	bl	800a946 <_svfprintf_r+0x142a>
 80098ec:	af2f      	add	r7, sp, #188	; 0xbc
 80098ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098f0:	2b80      	cmp	r3, #128	; 0x80
 80098f2:	d121      	bne.n	8009938 <_svfprintf_r+0x41c>
 80098f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80098f6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80098f8:	1a9c      	subs	r4, r3, r2
 80098fa:	2c00      	cmp	r4, #0
 80098fc:	dd1c      	ble.n	8009938 <_svfprintf_r+0x41c>
 80098fe:	0039      	movs	r1, r7
 8009900:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009902:	4896      	ldr	r0, [pc, #600]	; (8009b5c <_svfprintf_r+0x640>)
 8009904:	9320      	str	r3, [sp, #128]	; 0x80
 8009906:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009908:	3301      	adds	r3, #1
 800990a:	3108      	adds	r1, #8
 800990c:	6038      	str	r0, [r7, #0]
 800990e:	2c10      	cmp	r4, #16
 8009910:	dd01      	ble.n	8009916 <_svfprintf_r+0x3fa>
 8009912:	f000 fcd1 	bl	800a2b8 <_svfprintf_r+0xd9c>
 8009916:	607c      	str	r4, [r7, #4]
 8009918:	18a4      	adds	r4, r4, r2
 800991a:	000f      	movs	r7, r1
 800991c:	942e      	str	r4, [sp, #184]	; 0xb8
 800991e:	932d      	str	r3, [sp, #180]	; 0xb4
 8009920:	2b07      	cmp	r3, #7
 8009922:	dd09      	ble.n	8009938 <_svfprintf_r+0x41c>
 8009924:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009926:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009928:	aa2c      	add	r2, sp, #176	; 0xb0
 800992a:	f002 fded 	bl	800c508 <__ssprint_r>
 800992e:	2800      	cmp	r0, #0
 8009930:	d001      	beq.n	8009936 <_svfprintf_r+0x41a>
 8009932:	f001 f808 	bl	800a946 <_svfprintf_r+0x142a>
 8009936:	af2f      	add	r7, sp, #188	; 0xbc
 8009938:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800993a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800993c:	1a9c      	subs	r4, r3, r2
 800993e:	2c00      	cmp	r4, #0
 8009940:	dd1c      	ble.n	800997c <_svfprintf_r+0x460>
 8009942:	0039      	movs	r1, r7
 8009944:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009946:	4885      	ldr	r0, [pc, #532]	; (8009b5c <_svfprintf_r+0x640>)
 8009948:	9319      	str	r3, [sp, #100]	; 0x64
 800994a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800994c:	3301      	adds	r3, #1
 800994e:	3108      	adds	r1, #8
 8009950:	6038      	str	r0, [r7, #0]
 8009952:	2c10      	cmp	r4, #16
 8009954:	dd01      	ble.n	800995a <_svfprintf_r+0x43e>
 8009956:	f000 fcc3 	bl	800a2e0 <_svfprintf_r+0xdc4>
 800995a:	1912      	adds	r2, r2, r4
 800995c:	607c      	str	r4, [r7, #4]
 800995e:	922e      	str	r2, [sp, #184]	; 0xb8
 8009960:	000f      	movs	r7, r1
 8009962:	932d      	str	r3, [sp, #180]	; 0xb4
 8009964:	2b07      	cmp	r3, #7
 8009966:	dd09      	ble.n	800997c <_svfprintf_r+0x460>
 8009968:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800996a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800996c:	aa2c      	add	r2, sp, #176	; 0xb0
 800996e:	f002 fdcb 	bl	800c508 <__ssprint_r>
 8009972:	2800      	cmp	r0, #0
 8009974:	d001      	beq.n	800997a <_svfprintf_r+0x45e>
 8009976:	f000 ffe6 	bl	800a946 <_svfprintf_r+0x142a>
 800997a:	af2f      	add	r7, sp, #188	; 0xbc
 800997c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800997e:	9319      	str	r3, [sp, #100]	; 0x64
 8009980:	05f3      	lsls	r3, r6, #23
 8009982:	d501      	bpl.n	8009988 <_svfprintf_r+0x46c>
 8009984:	f000 fcc8 	bl	800a318 <_svfprintf_r+0xdfc>
 8009988:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800998a:	9b08      	ldr	r3, [sp, #32]
 800998c:	4694      	mov	ip, r2
 800998e:	603b      	str	r3, [r7, #0]
 8009990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009992:	607b      	str	r3, [r7, #4]
 8009994:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009996:	4463      	add	r3, ip
 8009998:	932e      	str	r3, [sp, #184]	; 0xb8
 800999a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800999c:	9308      	str	r3, [sp, #32]
 800999e:	3301      	adds	r3, #1
 80099a0:	932d      	str	r3, [sp, #180]	; 0xb4
 80099a2:	2b07      	cmp	r3, #7
 80099a4:	dd01      	ble.n	80099aa <_svfprintf_r+0x48e>
 80099a6:	f000 fda8 	bl	800a4fa <_svfprintf_r+0xfde>
 80099aa:	3708      	adds	r7, #8
 80099ac:	f000 fcfb 	bl	800a3a6 <_svfprintf_r+0xe8a>
 80099b0:	2310      	movs	r3, #16
 80099b2:	431e      	orrs	r6, r3
 80099b4:	06b3      	lsls	r3, r6, #26
 80099b6:	d530      	bpl.n	8009a1a <_svfprintf_r+0x4fe>
 80099b8:	2307      	movs	r3, #7
 80099ba:	3407      	adds	r4, #7
 80099bc:	439c      	bics	r4, r3
 80099be:	0022      	movs	r2, r4
 80099c0:	ca18      	ldmia	r2!, {r3, r4}
 80099c2:	9306      	str	r3, [sp, #24]
 80099c4:	9407      	str	r4, [sp, #28]
 80099c6:	920e      	str	r2, [sp, #56]	; 0x38
 80099c8:	9a07      	ldr	r2, [sp, #28]
 80099ca:	2301      	movs	r3, #1
 80099cc:	2a00      	cmp	r2, #0
 80099ce:	da0b      	bge.n	80099e8 <_svfprintf_r+0x4cc>
 80099d0:	9c06      	ldr	r4, [sp, #24]
 80099d2:	9d07      	ldr	r5, [sp, #28]
 80099d4:	2200      	movs	r2, #0
 80099d6:	4261      	negs	r1, r4
 80099d8:	41aa      	sbcs	r2, r5
 80099da:	9106      	str	r1, [sp, #24]
 80099dc:	9207      	str	r2, [sp, #28]
 80099de:	221b      	movs	r2, #27
 80099e0:	a91e      	add	r1, sp, #120	; 0x78
 80099e2:	1852      	adds	r2, r2, r1
 80099e4:	212d      	movs	r1, #45	; 0x2d
 80099e6:	7011      	strb	r1, [r2, #0]
 80099e8:	9907      	ldr	r1, [sp, #28]
 80099ea:	9a06      	ldr	r2, [sp, #24]
 80099ec:	430a      	orrs	r2, r1
 80099ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099f0:	3101      	adds	r1, #1
 80099f2:	d101      	bne.n	80099f8 <_svfprintf_r+0x4dc>
 80099f4:	f000 ffd5 	bl	800a9a2 <_svfprintf_r+0x1486>
 80099f8:	2180      	movs	r1, #128	; 0x80
 80099fa:	0035      	movs	r5, r6
 80099fc:	438d      	bics	r5, r1
 80099fe:	2a00      	cmp	r2, #0
 8009a00:	d001      	beq.n	8009a06 <_svfprintf_r+0x4ea>
 8009a02:	f000 ffd3 	bl	800a9ac <_svfprintf_r+0x1490>
 8009a06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a08:	2a00      	cmp	r2, #0
 8009a0a:	d101      	bne.n	8009a10 <_svfprintf_r+0x4f4>
 8009a0c:	f000 fc20 	bl	800a250 <_svfprintf_r+0xd34>
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d001      	beq.n	8009a18 <_svfprintf_r+0x4fc>
 8009a14:	f000 ffce 	bl	800a9b4 <_svfprintf_r+0x1498>
 8009a18:	e3b1      	b.n	800a17e <_svfprintf_r+0xc62>
 8009a1a:	1d23      	adds	r3, r4, #4
 8009a1c:	930e      	str	r3, [sp, #56]	; 0x38
 8009a1e:	06f3      	lsls	r3, r6, #27
 8009a20:	d504      	bpl.n	8009a2c <_svfprintf_r+0x510>
 8009a22:	6823      	ldr	r3, [r4, #0]
 8009a24:	9306      	str	r3, [sp, #24]
 8009a26:	17db      	asrs	r3, r3, #31
 8009a28:	9307      	str	r3, [sp, #28]
 8009a2a:	e7cd      	b.n	80099c8 <_svfprintf_r+0x4ac>
 8009a2c:	6823      	ldr	r3, [r4, #0]
 8009a2e:	0672      	lsls	r2, r6, #25
 8009a30:	d501      	bpl.n	8009a36 <_svfprintf_r+0x51a>
 8009a32:	b21b      	sxth	r3, r3
 8009a34:	e7f6      	b.n	8009a24 <_svfprintf_r+0x508>
 8009a36:	05b2      	lsls	r2, r6, #22
 8009a38:	d5f4      	bpl.n	8009a24 <_svfprintf_r+0x508>
 8009a3a:	b25b      	sxtb	r3, r3
 8009a3c:	e7f2      	b.n	8009a24 <_svfprintf_r+0x508>
 8009a3e:	2307      	movs	r3, #7
 8009a40:	3407      	adds	r4, #7
 8009a42:	439c      	bics	r4, r3
 8009a44:	0022      	movs	r2, r4
 8009a46:	ca18      	ldmia	r2!, {r3, r4}
 8009a48:	920e      	str	r2, [sp, #56]	; 0x38
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	9314      	str	r3, [sp, #80]	; 0x50
 8009a4e:	9415      	str	r4, [sp, #84]	; 0x54
 8009a50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a52:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8009a54:	005c      	lsls	r4, r3, #1
 8009a56:	0864      	lsrs	r4, r4, #1
 8009a58:	0028      	movs	r0, r5
 8009a5a:	0021      	movs	r1, r4
 8009a5c:	4b40      	ldr	r3, [pc, #256]	; (8009b60 <_svfprintf_r+0x644>)
 8009a5e:	4252      	negs	r2, r2
 8009a60:	f7f9 f856 	bl	8002b10 <__aeabi_dcmpun>
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d126      	bne.n	8009ab6 <_svfprintf_r+0x59a>
 8009a68:	2201      	movs	r2, #1
 8009a6a:	0028      	movs	r0, r5
 8009a6c:	0021      	movs	r1, r4
 8009a6e:	4b3c      	ldr	r3, [pc, #240]	; (8009b60 <_svfprintf_r+0x644>)
 8009a70:	4252      	negs	r2, r2
 8009a72:	f7f6 fcfb 	bl	800046c <__aeabi_dcmple>
 8009a76:	2800      	cmp	r0, #0
 8009a78:	d11d      	bne.n	8009ab6 <_svfprintf_r+0x59a>
 8009a7a:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009a7c:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009a7e:	2200      	movs	r2, #0
 8009a80:	2300      	movs	r3, #0
 8009a82:	f7f6 fce9 	bl	8000458 <__aeabi_dcmplt>
 8009a86:	2800      	cmp	r0, #0
 8009a88:	d004      	beq.n	8009a94 <_svfprintf_r+0x578>
 8009a8a:	231b      	movs	r3, #27
 8009a8c:	aa1e      	add	r2, sp, #120	; 0x78
 8009a8e:	189b      	adds	r3, r3, r2
 8009a90:	222d      	movs	r2, #45	; 0x2d
 8009a92:	701a      	strb	r2, [r3, #0]
 8009a94:	4b33      	ldr	r3, [pc, #204]	; (8009b64 <_svfprintf_r+0x648>)
 8009a96:	9308      	str	r3, [sp, #32]
 8009a98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a9a:	2b47      	cmp	r3, #71	; 0x47
 8009a9c:	dd01      	ble.n	8009aa2 <_svfprintf_r+0x586>
 8009a9e:	4b32      	ldr	r3, [pc, #200]	; (8009b68 <_svfprintf_r+0x64c>)
 8009aa0:	9308      	str	r3, [sp, #32]
 8009aa2:	2380      	movs	r3, #128	; 0x80
 8009aa4:	439e      	bics	r6, r3
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	930c      	str	r3, [sp, #48]	; 0x30
 8009aaa:	3303      	adds	r3, #3
 8009aac:	9309      	str	r3, [sp, #36]	; 0x24
 8009aae:	2300      	movs	r3, #0
 8009ab0:	9319      	str	r3, [sp, #100]	; 0x64
 8009ab2:	f000 ffae 	bl	800aa12 <_svfprintf_r+0x14f6>
 8009ab6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009ab8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009aba:	0010      	movs	r0, r2
 8009abc:	0019      	movs	r1, r3
 8009abe:	f7f9 f827 	bl	8002b10 <__aeabi_dcmpun>
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	d00e      	beq.n	8009ae4 <_svfprintf_r+0x5c8>
 8009ac6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	da04      	bge.n	8009ad6 <_svfprintf_r+0x5ba>
 8009acc:	231b      	movs	r3, #27
 8009ace:	aa1e      	add	r2, sp, #120	; 0x78
 8009ad0:	189b      	adds	r3, r3, r2
 8009ad2:	222d      	movs	r2, #45	; 0x2d
 8009ad4:	701a      	strb	r2, [r3, #0]
 8009ad6:	4b25      	ldr	r3, [pc, #148]	; (8009b6c <_svfprintf_r+0x650>)
 8009ad8:	9308      	str	r3, [sp, #32]
 8009ada:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009adc:	2b47      	cmp	r3, #71	; 0x47
 8009ade:	dde0      	ble.n	8009aa2 <_svfprintf_r+0x586>
 8009ae0:	4b23      	ldr	r3, [pc, #140]	; (8009b70 <_svfprintf_r+0x654>)
 8009ae2:	e7dd      	b.n	8009aa0 <_svfprintf_r+0x584>
 8009ae4:	2320      	movs	r3, #32
 8009ae6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ae8:	439a      	bics	r2, r3
 8009aea:	9210      	str	r2, [sp, #64]	; 0x40
 8009aec:	2a41      	cmp	r2, #65	; 0x41
 8009aee:	d123      	bne.n	8009b38 <_svfprintf_r+0x61c>
 8009af0:	2230      	movs	r2, #48	; 0x30
 8009af2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009af4:	ab25      	add	r3, sp, #148	; 0x94
 8009af6:	701a      	strb	r2, [r3, #0]
 8009af8:	3248      	adds	r2, #72	; 0x48
 8009afa:	2961      	cmp	r1, #97	; 0x61
 8009afc:	d000      	beq.n	8009b00 <_svfprintf_r+0x5e4>
 8009afe:	3a20      	subs	r2, #32
 8009b00:	705a      	strb	r2, [r3, #1]
 8009b02:	2302      	movs	r3, #2
 8009b04:	431e      	orrs	r6, r3
 8009b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b08:	2b63      	cmp	r3, #99	; 0x63
 8009b0a:	dd33      	ble.n	8009b74 <_svfprintf_r+0x658>
 8009b0c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009b0e:	1c59      	adds	r1, r3, #1
 8009b10:	f001 ff30 	bl	800b974 <_malloc_r>
 8009b14:	9008      	str	r0, [sp, #32]
 8009b16:	2800      	cmp	r0, #0
 8009b18:	d000      	beq.n	8009b1c <_svfprintf_r+0x600>
 8009b1a:	e141      	b.n	8009da0 <_svfprintf_r+0x884>
 8009b1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b1e:	899a      	ldrh	r2, [r3, #12]
 8009b20:	2340      	movs	r3, #64	; 0x40
 8009b22:	4313      	orrs	r3, r2
 8009b24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b26:	8193      	strh	r3, [r2, #12]
 8009b28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b2a:	899b      	ldrh	r3, [r3, #12]
 8009b2c:	065b      	lsls	r3, r3, #25
 8009b2e:	d400      	bmi.n	8009b32 <_svfprintf_r+0x616>
 8009b30:	e519      	b.n	8009566 <_svfprintf_r+0x4a>
 8009b32:	2301      	movs	r3, #1
 8009b34:	425b      	negs	r3, r3
 8009b36:	e515      	b.n	8009564 <_svfprintf_r+0x48>
 8009b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b3a:	900c      	str	r0, [sp, #48]	; 0x30
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	d100      	bne.n	8009b42 <_svfprintf_r+0x626>
 8009b40:	e131      	b.n	8009da6 <_svfprintf_r+0x88a>
 8009b42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b44:	2b47      	cmp	r3, #71	; 0x47
 8009b46:	d119      	bne.n	8009b7c <_svfprintf_r+0x660>
 8009b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d116      	bne.n	8009b7c <_svfprintf_r+0x660>
 8009b4e:	930c      	str	r3, [sp, #48]	; 0x30
 8009b50:	3301      	adds	r3, #1
 8009b52:	9309      	str	r3, [sp, #36]	; 0x24
 8009b54:	e012      	b.n	8009b7c <_svfprintf_r+0x660>
 8009b56:	46c0      	nop			; (mov r8, r8)
 8009b58:	0800e924 	.word	0x0800e924
 8009b5c:	0800e934 	.word	0x0800e934
 8009b60:	7fefffff 	.word	0x7fefffff
 8009b64:	0800e8f0 	.word	0x0800e8f0
 8009b68:	0800e8f4 	.word	0x0800e8f4
 8009b6c:	0800e8f8 	.word	0x0800e8f8
 8009b70:	0800e8fc 	.word	0x0800e8fc
 8009b74:	2300      	movs	r3, #0
 8009b76:	930c      	str	r3, [sp, #48]	; 0x30
 8009b78:	ab3f      	add	r3, sp, #252	; 0xfc
 8009b7a:	9308      	str	r3, [sp, #32]
 8009b7c:	2380      	movs	r3, #128	; 0x80
 8009b7e:	005b      	lsls	r3, r3, #1
 8009b80:	4333      	orrs	r3, r6
 8009b82:	9320      	str	r3, [sp, #128]	; 0x80
 8009b84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b86:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	db00      	blt.n	8009b8e <_svfprintf_r+0x672>
 8009b8c:	e10d      	b.n	8009daa <_svfprintf_r+0x88e>
 8009b8e:	2280      	movs	r2, #128	; 0x80
 8009b90:	0612      	lsls	r2, r2, #24
 8009b92:	4694      	mov	ip, r2
 8009b94:	4463      	add	r3, ip
 8009b96:	930d      	str	r3, [sp, #52]	; 0x34
 8009b98:	232d      	movs	r3, #45	; 0x2d
 8009b9a:	9322      	str	r3, [sp, #136]	; 0x88
 8009b9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b9e:	2b41      	cmp	r3, #65	; 0x41
 8009ba0:	d000      	beq.n	8009ba4 <_svfprintf_r+0x688>
 8009ba2:	e11b      	b.n	8009ddc <_svfprintf_r+0x8c0>
 8009ba4:	0020      	movs	r0, r4
 8009ba6:	aa26      	add	r2, sp, #152	; 0x98
 8009ba8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009baa:	f002 fc55 	bl	800c458 <frexp>
 8009bae:	23ff      	movs	r3, #255	; 0xff
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	059b      	lsls	r3, r3, #22
 8009bb4:	f7f8 f9ae 	bl	8001f14 <__aeabi_dmul>
 8009bb8:	2200      	movs	r2, #0
 8009bba:	2300      	movs	r3, #0
 8009bbc:	0004      	movs	r4, r0
 8009bbe:	000d      	movs	r5, r1
 8009bc0:	f7f6 fc44 	bl	800044c <__aeabi_dcmpeq>
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	d001      	beq.n	8009bcc <_svfprintf_r+0x6b0>
 8009bc8:	2301      	movs	r3, #1
 8009bca:	9326      	str	r3, [sp, #152]	; 0x98
 8009bcc:	4bc6      	ldr	r3, [pc, #792]	; (8009ee8 <_svfprintf_r+0x9cc>)
 8009bce:	9319      	str	r3, [sp, #100]	; 0x64
 8009bd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bd2:	2b61      	cmp	r3, #97	; 0x61
 8009bd4:	d001      	beq.n	8009bda <_svfprintf_r+0x6be>
 8009bd6:	4bc5      	ldr	r3, [pc, #788]	; (8009eec <_svfprintf_r+0x9d0>)
 8009bd8:	9319      	str	r3, [sp, #100]	; 0x64
 8009bda:	9b08      	ldr	r3, [sp, #32]
 8009bdc:	930d      	str	r3, [sp, #52]	; 0x34
 8009bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009be0:	3b01      	subs	r3, #1
 8009be2:	9311      	str	r3, [sp, #68]	; 0x44
 8009be4:	2200      	movs	r2, #0
 8009be6:	4bc2      	ldr	r3, [pc, #776]	; (8009ef0 <_svfprintf_r+0x9d4>)
 8009be8:	0020      	movs	r0, r4
 8009bea:	0029      	movs	r1, r5
 8009bec:	f7f8 f992 	bl	8001f14 <__aeabi_dmul>
 8009bf0:	000d      	movs	r5, r1
 8009bf2:	0004      	movs	r4, r0
 8009bf4:	f7f8 ffaa 	bl	8002b4c <__aeabi_d2iz>
 8009bf8:	9021      	str	r0, [sp, #132]	; 0x84
 8009bfa:	f7f8 ffdd 	bl	8002bb8 <__aeabi_i2d>
 8009bfe:	0002      	movs	r2, r0
 8009c00:	000b      	movs	r3, r1
 8009c02:	0020      	movs	r0, r4
 8009c04:	0029      	movs	r1, r5
 8009c06:	f7f8 fbf1 	bl	80023ec <__aeabi_dsub>
 8009c0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c0c:	000d      	movs	r5, r1
 8009c0e:	001a      	movs	r2, r3
 8009c10:	3201      	adds	r2, #1
 8009c12:	9921      	ldr	r1, [sp, #132]	; 0x84
 8009c14:	920d      	str	r2, [sp, #52]	; 0x34
 8009c16:	9223      	str	r2, [sp, #140]	; 0x8c
 8009c18:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009c1a:	0004      	movs	r4, r0
 8009c1c:	5c52      	ldrb	r2, [r2, r1]
 8009c1e:	701a      	strb	r2, [r3, #0]
 8009c20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c22:	931a      	str	r3, [sp, #104]	; 0x68
 8009c24:	3301      	adds	r3, #1
 8009c26:	d00a      	beq.n	8009c3e <_svfprintf_r+0x722>
 8009c28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	3b01      	subs	r3, #1
 8009c2e:	9311      	str	r3, [sp, #68]	; 0x44
 8009c30:	0020      	movs	r0, r4
 8009c32:	2300      	movs	r3, #0
 8009c34:	0029      	movs	r1, r5
 8009c36:	f7f6 fc09 	bl	800044c <__aeabi_dcmpeq>
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	d0d2      	beq.n	8009be4 <_svfprintf_r+0x6c8>
 8009c3e:	2200      	movs	r2, #0
 8009c40:	0020      	movs	r0, r4
 8009c42:	0029      	movs	r1, r5
 8009c44:	4bab      	ldr	r3, [pc, #684]	; (8009ef4 <_svfprintf_r+0x9d8>)
 8009c46:	f7f6 fc1b 	bl	8000480 <__aeabi_dcmpgt>
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	d10c      	bne.n	8009c68 <_svfprintf_r+0x74c>
 8009c4e:	2200      	movs	r2, #0
 8009c50:	0020      	movs	r0, r4
 8009c52:	0029      	movs	r1, r5
 8009c54:	4ba7      	ldr	r3, [pc, #668]	; (8009ef4 <_svfprintf_r+0x9d8>)
 8009c56:	f7f6 fbf9 	bl	800044c <__aeabi_dcmpeq>
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	d100      	bne.n	8009c60 <_svfprintf_r+0x744>
 8009c5e:	e0b7      	b.n	8009dd0 <_svfprintf_r+0x8b4>
 8009c60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c62:	07db      	lsls	r3, r3, #31
 8009c64:	d400      	bmi.n	8009c68 <_svfprintf_r+0x74c>
 8009c66:	e0b3      	b.n	8009dd0 <_svfprintf_r+0x8b4>
 8009c68:	2030      	movs	r0, #48	; 0x30
 8009c6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c6c:	932a      	str	r3, [sp, #168]	; 0xa8
 8009c6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c70:	7bdb      	ldrb	r3, [r3, #15]
 8009c72:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8009c74:	3a01      	subs	r2, #1
 8009c76:	922a      	str	r2, [sp, #168]	; 0xa8
 8009c78:	7811      	ldrb	r1, [r2, #0]
 8009c7a:	4299      	cmp	r1, r3
 8009c7c:	d100      	bne.n	8009c80 <_svfprintf_r+0x764>
 8009c7e:	e097      	b.n	8009db0 <_svfprintf_r+0x894>
 8009c80:	1c4b      	adds	r3, r1, #1
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	2939      	cmp	r1, #57	; 0x39
 8009c86:	d101      	bne.n	8009c8c <_svfprintf_r+0x770>
 8009c88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c8a:	7a9b      	ldrb	r3, [r3, #10]
 8009c8c:	7013      	strb	r3, [r2, #0]
 8009c8e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c90:	9a08      	ldr	r2, [sp, #32]
 8009c92:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8009c94:	1a9b      	subs	r3, r3, r2
 8009c96:	930d      	str	r3, [sp, #52]	; 0x34
 8009c98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c9a:	2b47      	cmp	r3, #71	; 0x47
 8009c9c:	d000      	beq.n	8009ca0 <_svfprintf_r+0x784>
 8009c9e:	e0eb      	b.n	8009e78 <_svfprintf_r+0x95c>
 8009ca0:	1ceb      	adds	r3, r5, #3
 8009ca2:	db03      	blt.n	8009cac <_svfprintf_r+0x790>
 8009ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ca6:	42ab      	cmp	r3, r5
 8009ca8:	db00      	blt.n	8009cac <_svfprintf_r+0x790>
 8009caa:	e113      	b.n	8009ed4 <_svfprintf_r+0x9b8>
 8009cac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009cae:	3b02      	subs	r3, #2
 8009cb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009cb2:	223c      	movs	r2, #60	; 0x3c
 8009cb4:	466b      	mov	r3, sp
 8009cb6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009cb8:	189b      	adds	r3, r3, r2
 8009cba:	1e6c      	subs	r4, r5, #1
 8009cbc:	3a1c      	subs	r2, #28
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	9426      	str	r4, [sp, #152]	; 0x98
 8009cc4:	4391      	bics	r1, r2
 8009cc6:	2941      	cmp	r1, #65	; 0x41
 8009cc8:	d102      	bne.n	8009cd0 <_svfprintf_r+0x7b4>
 8009cca:	330f      	adds	r3, #15
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	3001      	adds	r0, #1
 8009cd0:	a928      	add	r1, sp, #160	; 0xa0
 8009cd2:	700b      	strb	r3, [r1, #0]
 8009cd4:	232b      	movs	r3, #43	; 0x2b
 8009cd6:	2c00      	cmp	r4, #0
 8009cd8:	da02      	bge.n	8009ce0 <_svfprintf_r+0x7c4>
 8009cda:	2401      	movs	r4, #1
 8009cdc:	3302      	adds	r3, #2
 8009cde:	1b64      	subs	r4, r4, r5
 8009ce0:	704b      	strb	r3, [r1, #1]
 8009ce2:	2c09      	cmp	r4, #9
 8009ce4:	dc00      	bgt.n	8009ce8 <_svfprintf_r+0x7cc>
 8009ce6:	e0e1      	b.n	8009eac <_svfprintf_r+0x990>
 8009ce8:	2337      	movs	r3, #55	; 0x37
 8009cea:	250a      	movs	r5, #10
 8009cec:	aa1e      	add	r2, sp, #120	; 0x78
 8009cee:	189b      	adds	r3, r3, r2
 8009cf0:	9310      	str	r3, [sp, #64]	; 0x40
 8009cf2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009cf4:	0020      	movs	r0, r4
 8009cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8009cf8:	0029      	movs	r1, r5
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	9310      	str	r3, [sp, #64]	; 0x40
 8009cfe:	f7f6 fb8f 	bl	8000420 <__aeabi_idivmod>
 8009d02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d04:	3130      	adds	r1, #48	; 0x30
 8009d06:	7019      	strb	r1, [r3, #0]
 8009d08:	0020      	movs	r0, r4
 8009d0a:	0029      	movs	r1, r5
 8009d0c:	9411      	str	r4, [sp, #68]	; 0x44
 8009d0e:	f7f6 faa1 	bl	8000254 <__divsi3>
 8009d12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d14:	0004      	movs	r4, r0
 8009d16:	2b63      	cmp	r3, #99	; 0x63
 8009d18:	dceb      	bgt.n	8009cf2 <_svfprintf_r+0x7d6>
 8009d1a:	222a      	movs	r2, #42	; 0x2a
 8009d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d1e:	a81e      	add	r0, sp, #120	; 0x78
 8009d20:	1e99      	subs	r1, r3, #2
 8009d22:	1812      	adds	r2, r2, r0
 8009d24:	2037      	movs	r0, #55	; 0x37
 8009d26:	000b      	movs	r3, r1
 8009d28:	3430      	adds	r4, #48	; 0x30
 8009d2a:	700c      	strb	r4, [r1, #0]
 8009d2c:	ac1e      	add	r4, sp, #120	; 0x78
 8009d2e:	1900      	adds	r0, r0, r4
 8009d30:	4283      	cmp	r3, r0
 8009d32:	d200      	bcs.n	8009d36 <_svfprintf_r+0x81a>
 8009d34:	e0b5      	b.n	8009ea2 <_svfprintf_r+0x986>
 8009d36:	2300      	movs	r3, #0
 8009d38:	4281      	cmp	r1, r0
 8009d3a:	d804      	bhi.n	8009d46 <_svfprintf_r+0x82a>
 8009d3c:	aa1e      	add	r2, sp, #120	; 0x78
 8009d3e:	3339      	adds	r3, #57	; 0x39
 8009d40:	189b      	adds	r3, r3, r2
 8009d42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d44:	1a9b      	subs	r3, r3, r2
 8009d46:	222a      	movs	r2, #42	; 0x2a
 8009d48:	a91e      	add	r1, sp, #120	; 0x78
 8009d4a:	1852      	adds	r2, r2, r1
 8009d4c:	18d3      	adds	r3, r2, r3
 8009d4e:	aa28      	add	r2, sp, #160	; 0xa0
 8009d50:	1a9b      	subs	r3, r3, r2
 8009d52:	931e      	str	r3, [sp, #120]	; 0x78
 8009d54:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009d56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d58:	4694      	mov	ip, r2
 8009d5a:	4463      	add	r3, ip
 8009d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	dc01      	bgt.n	8009d68 <_svfprintf_r+0x84c>
 8009d64:	07f3      	lsls	r3, r6, #31
 8009d66:	d504      	bpl.n	8009d72 <_svfprintf_r+0x856>
 8009d68:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d6c:	4694      	mov	ip, r2
 8009d6e:	4463      	add	r3, ip
 8009d70:	9309      	str	r3, [sp, #36]	; 0x24
 8009d72:	2280      	movs	r2, #128	; 0x80
 8009d74:	4b60      	ldr	r3, [pc, #384]	; (8009ef8 <_svfprintf_r+0x9dc>)
 8009d76:	0052      	lsls	r2, r2, #1
 8009d78:	4033      	ands	r3, r6
 8009d7a:	431a      	orrs	r2, r3
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	001d      	movs	r5, r3
 8009d80:	9220      	str	r2, [sp, #128]	; 0x80
 8009d82:	9310      	str	r3, [sp, #64]	; 0x40
 8009d84:	9311      	str	r3, [sp, #68]	; 0x44
 8009d86:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d100      	bne.n	8009d8e <_svfprintf_r+0x872>
 8009d8c:	e27b      	b.n	800a286 <_svfprintf_r+0xd6a>
 8009d8e:	231b      	movs	r3, #27
 8009d90:	aa1e      	add	r2, sp, #120	; 0x78
 8009d92:	189b      	adds	r3, r3, r2
 8009d94:	222d      	movs	r2, #45	; 0x2d
 8009d96:	701a      	strb	r2, [r3, #0]
 8009d98:	2300      	movs	r3, #0
 8009d9a:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8009d9c:	9319      	str	r3, [sp, #100]	; 0x64
 8009d9e:	e52b      	b.n	80097f8 <_svfprintf_r+0x2dc>
 8009da0:	9b08      	ldr	r3, [sp, #32]
 8009da2:	930c      	str	r3, [sp, #48]	; 0x30
 8009da4:	e6ea      	b.n	8009b7c <_svfprintf_r+0x660>
 8009da6:	2306      	movs	r3, #6
 8009da8:	e6d3      	b.n	8009b52 <_svfprintf_r+0x636>
 8009daa:	930d      	str	r3, [sp, #52]	; 0x34
 8009dac:	2300      	movs	r3, #0
 8009dae:	e6f4      	b.n	8009b9a <_svfprintf_r+0x67e>
 8009db0:	7010      	strb	r0, [r2, #0]
 8009db2:	e75e      	b.n	8009c72 <_svfprintf_r+0x756>
 8009db4:	7018      	strb	r0, [r3, #0]
 8009db6:	3301      	adds	r3, #1
 8009db8:	1aca      	subs	r2, r1, r3
 8009dba:	d5fb      	bpl.n	8009db4 <_svfprintf_r+0x898>
 8009dbc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	3201      	adds	r2, #1
 8009dc2:	db01      	blt.n	8009dc8 <_svfprintf_r+0x8ac>
 8009dc4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009dca:	18d3      	adds	r3, r2, r3
 8009dcc:	9323      	str	r3, [sp, #140]	; 0x8c
 8009dce:	e75e      	b.n	8009c8e <_svfprintf_r+0x772>
 8009dd0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009dd2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009dd4:	2030      	movs	r0, #48	; 0x30
 8009dd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dd8:	1851      	adds	r1, r2, r1
 8009dda:	e7ed      	b.n	8009db8 <_svfprintf_r+0x89c>
 8009ddc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009dde:	2b46      	cmp	r3, #70	; 0x46
 8009de0:	d006      	beq.n	8009df0 <_svfprintf_r+0x8d4>
 8009de2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009de4:	2b45      	cmp	r3, #69	; 0x45
 8009de6:	d101      	bne.n	8009dec <_svfprintf_r+0x8d0>
 8009de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dea:	1c5d      	adds	r5, r3, #1
 8009dec:	2302      	movs	r3, #2
 8009dee:	e001      	b.n	8009df4 <_svfprintf_r+0x8d8>
 8009df0:	2303      	movs	r3, #3
 8009df2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009df4:	aa2a      	add	r2, sp, #168	; 0xa8
 8009df6:	9204      	str	r2, [sp, #16]
 8009df8:	aa27      	add	r2, sp, #156	; 0x9c
 8009dfa:	9203      	str	r2, [sp, #12]
 8009dfc:	aa26      	add	r2, sp, #152	; 0x98
 8009dfe:	9202      	str	r2, [sp, #8]
 8009e00:	9300      	str	r3, [sp, #0]
 8009e02:	0022      	movs	r2, r4
 8009e04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e06:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009e08:	9501      	str	r5, [sp, #4]
 8009e0a:	f000 feab 	bl	800ab64 <_dtoa_r>
 8009e0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e10:	9008      	str	r0, [sp, #32]
 8009e12:	2b47      	cmp	r3, #71	; 0x47
 8009e14:	d103      	bne.n	8009e1e <_svfprintf_r+0x902>
 8009e16:	07f3      	lsls	r3, r6, #31
 8009e18:	d401      	bmi.n	8009e1e <_svfprintf_r+0x902>
 8009e1a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009e1c:	e738      	b.n	8009c90 <_svfprintf_r+0x774>
 8009e1e:	9b08      	ldr	r3, [sp, #32]
 8009e20:	195b      	adds	r3, r3, r5
 8009e22:	9311      	str	r3, [sp, #68]	; 0x44
 8009e24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e26:	2b46      	cmp	r3, #70	; 0x46
 8009e28:	d113      	bne.n	8009e52 <_svfprintf_r+0x936>
 8009e2a:	9b08      	ldr	r3, [sp, #32]
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	2b30      	cmp	r3, #48	; 0x30
 8009e30:	d10a      	bne.n	8009e48 <_svfprintf_r+0x92c>
 8009e32:	2200      	movs	r2, #0
 8009e34:	2300      	movs	r3, #0
 8009e36:	0020      	movs	r0, r4
 8009e38:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009e3a:	f7f6 fb07 	bl	800044c <__aeabi_dcmpeq>
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	d102      	bne.n	8009e48 <_svfprintf_r+0x92c>
 8009e42:	2301      	movs	r3, #1
 8009e44:	1b5d      	subs	r5, r3, r5
 8009e46:	9526      	str	r5, [sp, #152]	; 0x98
 8009e48:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009e4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e4c:	4694      	mov	ip, r2
 8009e4e:	4463      	add	r3, ip
 8009e50:	9311      	str	r3, [sp, #68]	; 0x44
 8009e52:	2200      	movs	r2, #0
 8009e54:	2300      	movs	r3, #0
 8009e56:	0020      	movs	r0, r4
 8009e58:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009e5a:	f7f6 faf7 	bl	800044c <__aeabi_dcmpeq>
 8009e5e:	2800      	cmp	r0, #0
 8009e60:	d001      	beq.n	8009e66 <_svfprintf_r+0x94a>
 8009e62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e64:	932a      	str	r3, [sp, #168]	; 0xa8
 8009e66:	2230      	movs	r2, #48	; 0x30
 8009e68:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009e6a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009e6c:	4299      	cmp	r1, r3
 8009e6e:	d9d4      	bls.n	8009e1a <_svfprintf_r+0x8fe>
 8009e70:	1c59      	adds	r1, r3, #1
 8009e72:	912a      	str	r1, [sp, #168]	; 0xa8
 8009e74:	701a      	strb	r2, [r3, #0]
 8009e76:	e7f7      	b.n	8009e68 <_svfprintf_r+0x94c>
 8009e78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e7a:	2b46      	cmp	r3, #70	; 0x46
 8009e7c:	d000      	beq.n	8009e80 <_svfprintf_r+0x964>
 8009e7e:	e718      	b.n	8009cb2 <_svfprintf_r+0x796>
 8009e80:	2201      	movs	r2, #1
 8009e82:	0033      	movs	r3, r6
 8009e84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e86:	4013      	ands	r3, r2
 8009e88:	430b      	orrs	r3, r1
 8009e8a:	2d00      	cmp	r5, #0
 8009e8c:	dd1c      	ble.n	8009ec8 <_svfprintf_r+0x9ac>
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d04f      	beq.n	8009f32 <_svfprintf_r+0xa16>
 8009e92:	000a      	movs	r2, r1
 8009e94:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009e96:	18eb      	adds	r3, r5, r3
 8009e98:	18d3      	adds	r3, r2, r3
 8009e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e9c:	2366      	movs	r3, #102	; 0x66
 8009e9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ea0:	e039      	b.n	8009f16 <_svfprintf_r+0x9fa>
 8009ea2:	781c      	ldrb	r4, [r3, #0]
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	7014      	strb	r4, [r2, #0]
 8009ea8:	3201      	adds	r2, #1
 8009eaa:	e741      	b.n	8009d30 <_svfprintf_r+0x814>
 8009eac:	222a      	movs	r2, #42	; 0x2a
 8009eae:	ab1e      	add	r3, sp, #120	; 0x78
 8009eb0:	18d2      	adds	r2, r2, r3
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	d104      	bne.n	8009ec0 <_svfprintf_r+0x9a4>
 8009eb6:	2330      	movs	r3, #48	; 0x30
 8009eb8:	222b      	movs	r2, #43	; 0x2b
 8009eba:	708b      	strb	r3, [r1, #2]
 8009ebc:	ab1e      	add	r3, sp, #120	; 0x78
 8009ebe:	18d2      	adds	r2, r2, r3
 8009ec0:	3430      	adds	r4, #48	; 0x30
 8009ec2:	1c53      	adds	r3, r2, #1
 8009ec4:	7014      	strb	r4, [r2, #0]
 8009ec6:	e742      	b.n	8009d4e <_svfprintf_r+0x832>
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d034      	beq.n	8009f36 <_svfprintf_r+0xa1a>
 8009ecc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	e7e1      	b.n	8009e98 <_svfprintf_r+0x97c>
 8009ed4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ed6:	429d      	cmp	r5, r3
 8009ed8:	db10      	blt.n	8009efc <_svfprintf_r+0x9e0>
 8009eda:	07f3      	lsls	r3, r6, #31
 8009edc:	d52f      	bpl.n	8009f3e <_svfprintf_r+0xa22>
 8009ede:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009ee0:	18eb      	adds	r3, r5, r3
 8009ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ee4:	2367      	movs	r3, #103	; 0x67
 8009ee6:	e7da      	b.n	8009e9e <_svfprintf_r+0x982>
 8009ee8:	0800e900 	.word	0x0800e900
 8009eec:	0800e911 	.word	0x0800e911
 8009ef0:	40300000 	.word	0x40300000
 8009ef4:	3fe00000 	.word	0x3fe00000
 8009ef8:	fffffbff 	.word	0xfffffbff
 8009efc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009efe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f00:	4694      	mov	ip, r2
 8009f02:	4463      	add	r3, ip
 8009f04:	9309      	str	r3, [sp, #36]	; 0x24
 8009f06:	2367      	movs	r3, #103	; 0x67
 8009f08:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f0a:	2d00      	cmp	r5, #0
 8009f0c:	dc03      	bgt.n	8009f16 <_svfprintf_r+0x9fa>
 8009f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f10:	1b58      	subs	r0, r3, r5
 8009f12:	1c43      	adds	r3, r0, #1
 8009f14:	9309      	str	r3, [sp, #36]	; 0x24
 8009f16:	2380      	movs	r3, #128	; 0x80
 8009f18:	0032      	movs	r2, r6
 8009f1a:	00db      	lsls	r3, r3, #3
 8009f1c:	401a      	ands	r2, r3
 8009f1e:	9211      	str	r2, [sp, #68]	; 0x44
 8009f20:	2200      	movs	r2, #0
 8009f22:	9210      	str	r2, [sp, #64]	; 0x40
 8009f24:	421e      	tst	r6, r3
 8009f26:	d100      	bne.n	8009f2a <_svfprintf_r+0xa0e>
 8009f28:	e72d      	b.n	8009d86 <_svfprintf_r+0x86a>
 8009f2a:	4295      	cmp	r5, r2
 8009f2c:	dc27      	bgt.n	8009f7e <_svfprintf_r+0xa62>
 8009f2e:	9211      	str	r2, [sp, #68]	; 0x44
 8009f30:	e729      	b.n	8009d86 <_svfprintf_r+0x86a>
 8009f32:	9509      	str	r5, [sp, #36]	; 0x24
 8009f34:	e7b2      	b.n	8009e9c <_svfprintf_r+0x980>
 8009f36:	2366      	movs	r3, #102	; 0x66
 8009f38:	9209      	str	r2, [sp, #36]	; 0x24
 8009f3a:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f3c:	e7eb      	b.n	8009f16 <_svfprintf_r+0x9fa>
 8009f3e:	9509      	str	r5, [sp, #36]	; 0x24
 8009f40:	e7d0      	b.n	8009ee4 <_svfprintf_r+0x9c8>
 8009f42:	42ab      	cmp	r3, r5
 8009f44:	da0e      	bge.n	8009f64 <_svfprintf_r+0xa48>
 8009f46:	1aed      	subs	r5, r5, r3
 8009f48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f4a:	785b      	ldrb	r3, [r3, #1]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d012      	beq.n	8009f76 <_svfprintf_r+0xa5a>
 8009f50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f52:	3301      	adds	r3, #1
 8009f54:	9311      	str	r3, [sp, #68]	; 0x44
 8009f56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f58:	3301      	adds	r3, #1
 8009f5a:	9312      	str	r3, [sp, #72]	; 0x48
 8009f5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	2bff      	cmp	r3, #255	; 0xff
 8009f62:	d1ee      	bne.n	8009f42 <_svfprintf_r+0xa26>
 8009f64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f68:	189b      	adds	r3, r3, r2
 8009f6a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009f6c:	4353      	muls	r3, r2
 8009f6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f70:	189b      	adds	r3, r3, r2
 8009f72:	9309      	str	r3, [sp, #36]	; 0x24
 8009f74:	e707      	b.n	8009d86 <_svfprintf_r+0x86a>
 8009f76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f78:	3301      	adds	r3, #1
 8009f7a:	9310      	str	r3, [sp, #64]	; 0x40
 8009f7c:	e7ee      	b.n	8009f5c <_svfprintf_r+0xa40>
 8009f7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f80:	9311      	str	r3, [sp, #68]	; 0x44
 8009f82:	e7eb      	b.n	8009f5c <_svfprintf_r+0xa40>
 8009f84:	0022      	movs	r2, r4
 8009f86:	ca08      	ldmia	r2!, {r3}
 8009f88:	920e      	str	r2, [sp, #56]	; 0x38
 8009f8a:	06b2      	lsls	r2, r6, #26
 8009f8c:	d508      	bpl.n	8009fa0 <_svfprintf_r+0xa84>
 8009f8e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009f90:	601a      	str	r2, [r3, #0]
 8009f92:	17d2      	asrs	r2, r2, #31
 8009f94:	605a      	str	r2, [r3, #4]
 8009f96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f98:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8009f9a:	9308      	str	r3, [sp, #32]
 8009f9c:	f7ff fafa 	bl	8009594 <_svfprintf_r+0x78>
 8009fa0:	06f2      	lsls	r2, r6, #27
 8009fa2:	d502      	bpl.n	8009faa <_svfprintf_r+0xa8e>
 8009fa4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009fa6:	601a      	str	r2, [r3, #0]
 8009fa8:	e7f5      	b.n	8009f96 <_svfprintf_r+0xa7a>
 8009faa:	0672      	lsls	r2, r6, #25
 8009fac:	d502      	bpl.n	8009fb4 <_svfprintf_r+0xa98>
 8009fae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009fb0:	801a      	strh	r2, [r3, #0]
 8009fb2:	e7f0      	b.n	8009f96 <_svfprintf_r+0xa7a>
 8009fb4:	05b2      	lsls	r2, r6, #22
 8009fb6:	d5f5      	bpl.n	8009fa4 <_svfprintf_r+0xa88>
 8009fb8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009fba:	701a      	strb	r2, [r3, #0]
 8009fbc:	e7eb      	b.n	8009f96 <_svfprintf_r+0xa7a>
 8009fbe:	2310      	movs	r3, #16
 8009fc0:	431e      	orrs	r6, r3
 8009fc2:	2320      	movs	r3, #32
 8009fc4:	0031      	movs	r1, r6
 8009fc6:	4019      	ands	r1, r3
 8009fc8:	421e      	tst	r6, r3
 8009fca:	d00f      	beq.n	8009fec <_svfprintf_r+0xad0>
 8009fcc:	3b19      	subs	r3, #25
 8009fce:	3407      	adds	r4, #7
 8009fd0:	439c      	bics	r4, r3
 8009fd2:	0022      	movs	r2, r4
 8009fd4:	ca18      	ldmia	r2!, {r3, r4}
 8009fd6:	9306      	str	r3, [sp, #24]
 8009fd8:	9407      	str	r4, [sp, #28]
 8009fda:	920e      	str	r2, [sp, #56]	; 0x38
 8009fdc:	4bca      	ldr	r3, [pc, #808]	; (800a308 <_svfprintf_r+0xdec>)
 8009fde:	401e      	ands	r6, r3
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	221b      	movs	r2, #27
 8009fe4:	a91e      	add	r1, sp, #120	; 0x78
 8009fe6:	1852      	adds	r2, r2, r1
 8009fe8:	2100      	movs	r1, #0
 8009fea:	e4fc      	b.n	80099e6 <_svfprintf_r+0x4ca>
 8009fec:	1d23      	adds	r3, r4, #4
 8009fee:	0032      	movs	r2, r6
 8009ff0:	930e      	str	r3, [sp, #56]	; 0x38
 8009ff2:	2310      	movs	r3, #16
 8009ff4:	401a      	ands	r2, r3
 8009ff6:	421e      	tst	r6, r3
 8009ff8:	d003      	beq.n	800a002 <_svfprintf_r+0xae6>
 8009ffa:	6823      	ldr	r3, [r4, #0]
 8009ffc:	9306      	str	r3, [sp, #24]
 8009ffe:	9107      	str	r1, [sp, #28]
 800a000:	e7ec      	b.n	8009fdc <_svfprintf_r+0xac0>
 800a002:	2340      	movs	r3, #64	; 0x40
 800a004:	0031      	movs	r1, r6
 800a006:	4019      	ands	r1, r3
 800a008:	421e      	tst	r6, r3
 800a00a:	d004      	beq.n	800a016 <_svfprintf_r+0xafa>
 800a00c:	6823      	ldr	r3, [r4, #0]
 800a00e:	b29b      	uxth	r3, r3
 800a010:	9306      	str	r3, [sp, #24]
 800a012:	9207      	str	r2, [sp, #28]
 800a014:	e7e2      	b.n	8009fdc <_svfprintf_r+0xac0>
 800a016:	2380      	movs	r3, #128	; 0x80
 800a018:	0032      	movs	r2, r6
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	401a      	ands	r2, r3
 800a01e:	421e      	tst	r6, r3
 800a020:	d002      	beq.n	800a028 <_svfprintf_r+0xb0c>
 800a022:	6823      	ldr	r3, [r4, #0]
 800a024:	b2db      	uxtb	r3, r3
 800a026:	e7e9      	b.n	8009ffc <_svfprintf_r+0xae0>
 800a028:	6823      	ldr	r3, [r4, #0]
 800a02a:	e7f1      	b.n	800a010 <_svfprintf_r+0xaf4>
 800a02c:	0023      	movs	r3, r4
 800a02e:	cb04      	ldmia	r3!, {r2}
 800a030:	49b6      	ldr	r1, [pc, #728]	; (800a30c <_svfprintf_r+0xdf0>)
 800a032:	9206      	str	r2, [sp, #24]
 800a034:	aa25      	add	r2, sp, #148	; 0x94
 800a036:	8011      	strh	r1, [r2, #0]
 800a038:	4ab5      	ldr	r2, [pc, #724]	; (800a310 <_svfprintf_r+0xdf4>)
 800a03a:	930e      	str	r3, [sp, #56]	; 0x38
 800a03c:	2300      	movs	r3, #0
 800a03e:	921f      	str	r2, [sp, #124]	; 0x7c
 800a040:	2278      	movs	r2, #120	; 0x78
 800a042:	9307      	str	r3, [sp, #28]
 800a044:	3302      	adds	r3, #2
 800a046:	431e      	orrs	r6, r3
 800a048:	920f      	str	r2, [sp, #60]	; 0x3c
 800a04a:	e7ca      	b.n	8009fe2 <_svfprintf_r+0xac6>
 800a04c:	0023      	movs	r3, r4
 800a04e:	cb04      	ldmia	r3!, {r2}
 800a050:	2400      	movs	r4, #0
 800a052:	930e      	str	r3, [sp, #56]	; 0x38
 800a054:	231b      	movs	r3, #27
 800a056:	9208      	str	r2, [sp, #32]
 800a058:	aa1e      	add	r2, sp, #120	; 0x78
 800a05a:	189b      	adds	r3, r3, r2
 800a05c:	701c      	strb	r4, [r3, #0]
 800a05e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a060:	3301      	adds	r3, #1
 800a062:	d00e      	beq.n	800a082 <_svfprintf_r+0xb66>
 800a064:	0021      	movs	r1, r4
 800a066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a068:	9808      	ldr	r0, [sp, #32]
 800a06a:	f7ff f939 	bl	80092e0 <memchr>
 800a06e:	900c      	str	r0, [sp, #48]	; 0x30
 800a070:	42a0      	cmp	r0, r4
 800a072:	d100      	bne.n	800a076 <_svfprintf_r+0xb5a>
 800a074:	e10a      	b.n	800a28c <_svfprintf_r+0xd70>
 800a076:	9a08      	ldr	r2, [sp, #32]
 800a078:	1a83      	subs	r3, r0, r2
 800a07a:	9309      	str	r3, [sp, #36]	; 0x24
 800a07c:	0023      	movs	r3, r4
 800a07e:	940c      	str	r4, [sp, #48]	; 0x30
 800a080:	e516      	b.n	8009ab0 <_svfprintf_r+0x594>
 800a082:	9808      	ldr	r0, [sp, #32]
 800a084:	f7f6 f840 	bl	8000108 <strlen>
 800a088:	9009      	str	r0, [sp, #36]	; 0x24
 800a08a:	e7f7      	b.n	800a07c <_svfprintf_r+0xb60>
 800a08c:	2310      	movs	r3, #16
 800a08e:	431e      	orrs	r6, r3
 800a090:	2320      	movs	r3, #32
 800a092:	0031      	movs	r1, r6
 800a094:	4019      	ands	r1, r3
 800a096:	421e      	tst	r6, r3
 800a098:	d009      	beq.n	800a0ae <_svfprintf_r+0xb92>
 800a09a:	3b19      	subs	r3, #25
 800a09c:	3407      	adds	r4, #7
 800a09e:	439c      	bics	r4, r3
 800a0a0:	0022      	movs	r2, r4
 800a0a2:	ca18      	ldmia	r2!, {r3, r4}
 800a0a4:	9306      	str	r3, [sp, #24]
 800a0a6:	9407      	str	r4, [sp, #28]
 800a0a8:	920e      	str	r2, [sp, #56]	; 0x38
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e799      	b.n	8009fe2 <_svfprintf_r+0xac6>
 800a0ae:	1d23      	adds	r3, r4, #4
 800a0b0:	0032      	movs	r2, r6
 800a0b2:	930e      	str	r3, [sp, #56]	; 0x38
 800a0b4:	2310      	movs	r3, #16
 800a0b6:	401a      	ands	r2, r3
 800a0b8:	421e      	tst	r6, r3
 800a0ba:	d003      	beq.n	800a0c4 <_svfprintf_r+0xba8>
 800a0bc:	6823      	ldr	r3, [r4, #0]
 800a0be:	9306      	str	r3, [sp, #24]
 800a0c0:	9107      	str	r1, [sp, #28]
 800a0c2:	e7f2      	b.n	800a0aa <_svfprintf_r+0xb8e>
 800a0c4:	2340      	movs	r3, #64	; 0x40
 800a0c6:	0031      	movs	r1, r6
 800a0c8:	4019      	ands	r1, r3
 800a0ca:	421e      	tst	r6, r3
 800a0cc:	d004      	beq.n	800a0d8 <_svfprintf_r+0xbbc>
 800a0ce:	6823      	ldr	r3, [r4, #0]
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	9306      	str	r3, [sp, #24]
 800a0d4:	9207      	str	r2, [sp, #28]
 800a0d6:	e7e8      	b.n	800a0aa <_svfprintf_r+0xb8e>
 800a0d8:	2380      	movs	r3, #128	; 0x80
 800a0da:	0032      	movs	r2, r6
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	401a      	ands	r2, r3
 800a0e0:	421e      	tst	r6, r3
 800a0e2:	d002      	beq.n	800a0ea <_svfprintf_r+0xbce>
 800a0e4:	6823      	ldr	r3, [r4, #0]
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	e7e9      	b.n	800a0be <_svfprintf_r+0xba2>
 800a0ea:	6823      	ldr	r3, [r4, #0]
 800a0ec:	e7f1      	b.n	800a0d2 <_svfprintf_r+0xbb6>
 800a0ee:	4b89      	ldr	r3, [pc, #548]	; (800a314 <_svfprintf_r+0xdf8>)
 800a0f0:	0031      	movs	r1, r6
 800a0f2:	931f      	str	r3, [sp, #124]	; 0x7c
 800a0f4:	2320      	movs	r3, #32
 800a0f6:	4019      	ands	r1, r3
 800a0f8:	421e      	tst	r6, r3
 800a0fa:	d01a      	beq.n	800a132 <_svfprintf_r+0xc16>
 800a0fc:	3b19      	subs	r3, #25
 800a0fe:	3407      	adds	r4, #7
 800a100:	439c      	bics	r4, r3
 800a102:	0022      	movs	r2, r4
 800a104:	ca18      	ldmia	r2!, {r3, r4}
 800a106:	9306      	str	r3, [sp, #24]
 800a108:	9407      	str	r4, [sp, #28]
 800a10a:	920e      	str	r2, [sp, #56]	; 0x38
 800a10c:	07f3      	lsls	r3, r6, #31
 800a10e:	d50a      	bpl.n	800a126 <_svfprintf_r+0xc0a>
 800a110:	9b06      	ldr	r3, [sp, #24]
 800a112:	9a07      	ldr	r2, [sp, #28]
 800a114:	4313      	orrs	r3, r2
 800a116:	d006      	beq.n	800a126 <_svfprintf_r+0xc0a>
 800a118:	2230      	movs	r2, #48	; 0x30
 800a11a:	ab25      	add	r3, sp, #148	; 0x94
 800a11c:	701a      	strb	r2, [r3, #0]
 800a11e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a120:	705a      	strb	r2, [r3, #1]
 800a122:	2302      	movs	r3, #2
 800a124:	431e      	orrs	r6, r3
 800a126:	4b78      	ldr	r3, [pc, #480]	; (800a308 <_svfprintf_r+0xdec>)
 800a128:	401e      	ands	r6, r3
 800a12a:	2302      	movs	r3, #2
 800a12c:	e759      	b.n	8009fe2 <_svfprintf_r+0xac6>
 800a12e:	4b78      	ldr	r3, [pc, #480]	; (800a310 <_svfprintf_r+0xdf4>)
 800a130:	e7de      	b.n	800a0f0 <_svfprintf_r+0xbd4>
 800a132:	1d23      	adds	r3, r4, #4
 800a134:	0032      	movs	r2, r6
 800a136:	930e      	str	r3, [sp, #56]	; 0x38
 800a138:	2310      	movs	r3, #16
 800a13a:	401a      	ands	r2, r3
 800a13c:	421e      	tst	r6, r3
 800a13e:	d003      	beq.n	800a148 <_svfprintf_r+0xc2c>
 800a140:	6823      	ldr	r3, [r4, #0]
 800a142:	9306      	str	r3, [sp, #24]
 800a144:	9107      	str	r1, [sp, #28]
 800a146:	e7e1      	b.n	800a10c <_svfprintf_r+0xbf0>
 800a148:	2340      	movs	r3, #64	; 0x40
 800a14a:	0031      	movs	r1, r6
 800a14c:	4019      	ands	r1, r3
 800a14e:	421e      	tst	r6, r3
 800a150:	d004      	beq.n	800a15c <_svfprintf_r+0xc40>
 800a152:	6823      	ldr	r3, [r4, #0]
 800a154:	b29b      	uxth	r3, r3
 800a156:	9306      	str	r3, [sp, #24]
 800a158:	9207      	str	r2, [sp, #28]
 800a15a:	e7d7      	b.n	800a10c <_svfprintf_r+0xbf0>
 800a15c:	2380      	movs	r3, #128	; 0x80
 800a15e:	0032      	movs	r2, r6
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	401a      	ands	r2, r3
 800a164:	421e      	tst	r6, r3
 800a166:	d002      	beq.n	800a16e <_svfprintf_r+0xc52>
 800a168:	6823      	ldr	r3, [r4, #0]
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	e7e9      	b.n	800a142 <_svfprintf_r+0xc26>
 800a16e:	6823      	ldr	r3, [r4, #0]
 800a170:	e7f1      	b.n	800a156 <_svfprintf_r+0xc3a>
 800a172:	9b07      	ldr	r3, [sp, #28]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d10b      	bne.n	800a190 <_svfprintf_r+0xc74>
 800a178:	9b06      	ldr	r3, [sp, #24]
 800a17a:	2b09      	cmp	r3, #9
 800a17c:	d808      	bhi.n	800a190 <_svfprintf_r+0xc74>
 800a17e:	20e7      	movs	r0, #231	; 0xe7
 800a180:	ab1e      	add	r3, sp, #120	; 0x78
 800a182:	18c0      	adds	r0, r0, r3
 800a184:	9b06      	ldr	r3, [sp, #24]
 800a186:	3330      	adds	r3, #48	; 0x30
 800a188:	7003      	strb	r3, [r0, #0]
 800a18a:	9008      	str	r0, [sp, #32]
 800a18c:	f000 fc38 	bl	800aa00 <_svfprintf_r+0x14e4>
 800a190:	2480      	movs	r4, #128	; 0x80
 800a192:	2300      	movs	r3, #0
 800a194:	00e4      	lsls	r4, r4, #3
 800a196:	930d      	str	r3, [sp, #52]	; 0x34
 800a198:	a858      	add	r0, sp, #352	; 0x160
 800a19a:	402c      	ands	r4, r5
 800a19c:	1e43      	subs	r3, r0, #1
 800a19e:	9308      	str	r3, [sp, #32]
 800a1a0:	220a      	movs	r2, #10
 800a1a2:	9806      	ldr	r0, [sp, #24]
 800a1a4:	9907      	ldr	r1, [sp, #28]
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	f7f6 f9b8 	bl	800051c <__aeabi_uldivmod>
 800a1ac:	9b08      	ldr	r3, [sp, #32]
 800a1ae:	3230      	adds	r2, #48	; 0x30
 800a1b0:	701a      	strb	r2, [r3, #0]
 800a1b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	930d      	str	r3, [sp, #52]	; 0x34
 800a1b8:	2c00      	cmp	r4, #0
 800a1ba:	d01d      	beq.n	800a1f8 <_svfprintf_r+0xcdc>
 800a1bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d118      	bne.n	800a1f8 <_svfprintf_r+0xcdc>
 800a1c6:	2aff      	cmp	r2, #255	; 0xff
 800a1c8:	d016      	beq.n	800a1f8 <_svfprintf_r+0xcdc>
 800a1ca:	9b07      	ldr	r3, [sp, #28]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d102      	bne.n	800a1d6 <_svfprintf_r+0xcba>
 800a1d0:	9b06      	ldr	r3, [sp, #24]
 800a1d2:	2b09      	cmp	r3, #9
 800a1d4:	d910      	bls.n	800a1f8 <_svfprintf_r+0xcdc>
 800a1d6:	9b08      	ldr	r3, [sp, #32]
 800a1d8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a1da:	991d      	ldr	r1, [sp, #116]	; 0x74
 800a1dc:	1a9b      	subs	r3, r3, r2
 800a1de:	0018      	movs	r0, r3
 800a1e0:	9308      	str	r3, [sp, #32]
 800a1e2:	f002 f97d 	bl	800c4e0 <strncpy>
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1ea:	920d      	str	r2, [sp, #52]	; 0x34
 800a1ec:	785b      	ldrb	r3, [r3, #1]
 800a1ee:	1e5a      	subs	r2, r3, #1
 800a1f0:	4193      	sbcs	r3, r2
 800a1f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a1f4:	18d3      	adds	r3, r2, r3
 800a1f6:	9312      	str	r3, [sp, #72]	; 0x48
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	9806      	ldr	r0, [sp, #24]
 800a1fc:	9907      	ldr	r1, [sp, #28]
 800a1fe:	220a      	movs	r2, #10
 800a200:	f7f6 f98c 	bl	800051c <__aeabi_uldivmod>
 800a204:	9b07      	ldr	r3, [sp, #28]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d104      	bne.n	800a214 <_svfprintf_r+0xcf8>
 800a20a:	9b06      	ldr	r3, [sp, #24]
 800a20c:	2b09      	cmp	r3, #9
 800a20e:	d801      	bhi.n	800a214 <_svfprintf_r+0xcf8>
 800a210:	f000 fbf6 	bl	800aa00 <_svfprintf_r+0x14e4>
 800a214:	9006      	str	r0, [sp, #24]
 800a216:	9107      	str	r1, [sp, #28]
 800a218:	9808      	ldr	r0, [sp, #32]
 800a21a:	e7bf      	b.n	800a19c <_svfprintf_r+0xc80>
 800a21c:	200f      	movs	r0, #15
 800a21e:	ab58      	add	r3, sp, #352	; 0x160
 800a220:	9308      	str	r3, [sp, #32]
 800a222:	9b08      	ldr	r3, [sp, #32]
 800a224:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a226:	3b01      	subs	r3, #1
 800a228:	9308      	str	r3, [sp, #32]
 800a22a:	9b06      	ldr	r3, [sp, #24]
 800a22c:	4003      	ands	r3, r0
 800a22e:	5cd3      	ldrb	r3, [r2, r3]
 800a230:	9a08      	ldr	r2, [sp, #32]
 800a232:	7013      	strb	r3, [r2, #0]
 800a234:	9b07      	ldr	r3, [sp, #28]
 800a236:	0719      	lsls	r1, r3, #28
 800a238:	9b06      	ldr	r3, [sp, #24]
 800a23a:	091a      	lsrs	r2, r3, #4
 800a23c:	9b07      	ldr	r3, [sp, #28]
 800a23e:	4311      	orrs	r1, r2
 800a240:	091b      	lsrs	r3, r3, #4
 800a242:	9307      	str	r3, [sp, #28]
 800a244:	000b      	movs	r3, r1
 800a246:	9a07      	ldr	r2, [sp, #28]
 800a248:	9106      	str	r1, [sp, #24]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	d1e9      	bne.n	800a222 <_svfprintf_r+0xd06>
 800a24e:	e3d7      	b.n	800aa00 <_svfprintf_r+0x14e4>
 800a250:	aa58      	add	r2, sp, #352	; 0x160
 800a252:	9208      	str	r2, [sp, #32]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d000      	beq.n	800a25a <_svfprintf_r+0xd3e>
 800a258:	e3d2      	b.n	800aa00 <_svfprintf_r+0x14e4>
 800a25a:	07f3      	lsls	r3, r6, #31
 800a25c:	d400      	bmi.n	800a260 <_svfprintf_r+0xd44>
 800a25e:	e3cf      	b.n	800aa00 <_svfprintf_r+0x14e4>
 800a260:	20e7      	movs	r0, #231	; 0xe7
 800a262:	ab1e      	add	r3, sp, #120	; 0x78
 800a264:	18c0      	adds	r0, r0, r3
 800a266:	2330      	movs	r3, #48	; 0x30
 800a268:	e78e      	b.n	800a188 <_svfprintf_r+0xc6c>
 800a26a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d100      	bne.n	800a272 <_svfprintf_r+0xd56>
 800a270:	e38a      	b.n	800a988 <_svfprintf_r+0x146c>
 800a272:	221b      	movs	r2, #27
 800a274:	a83f      	add	r0, sp, #252	; 0xfc
 800a276:	7003      	strb	r3, [r0, #0]
 800a278:	2300      	movs	r3, #0
 800a27a:	a91e      	add	r1, sp, #120	; 0x78
 800a27c:	1852      	adds	r2, r2, r1
 800a27e:	7013      	strb	r3, [r2, #0]
 800a280:	940e      	str	r4, [sp, #56]	; 0x38
 800a282:	f7ff fab0 	bl	80097e6 <_svfprintf_r+0x2ca>
 800a286:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800a288:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a28a:	e587      	b.n	8009d9c <_svfprintf_r+0x880>
 800a28c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a28e:	e40f      	b.n	8009ab0 <_svfprintf_r+0x594>
 800a290:	2010      	movs	r0, #16
 800a292:	1812      	adds	r2, r2, r0
 800a294:	6078      	str	r0, [r7, #4]
 800a296:	922e      	str	r2, [sp, #184]	; 0xb8
 800a298:	932d      	str	r3, [sp, #180]	; 0xb4
 800a29a:	2b07      	cmp	r3, #7
 800a29c:	dd08      	ble.n	800a2b0 <_svfprintf_r+0xd94>
 800a29e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a2a2:	aa2c      	add	r2, sp, #176	; 0xb0
 800a2a4:	f002 f930 	bl	800c508 <__ssprint_r>
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	d000      	beq.n	800a2ae <_svfprintf_r+0xd92>
 800a2ac:	e34b      	b.n	800a946 <_svfprintf_r+0x142a>
 800a2ae:	a92f      	add	r1, sp, #188	; 0xbc
 800a2b0:	000f      	movs	r7, r1
 800a2b2:	3c10      	subs	r4, #16
 800a2b4:	f7ff fac3 	bl	800983e <_svfprintf_r+0x322>
 800a2b8:	2010      	movs	r0, #16
 800a2ba:	1812      	adds	r2, r2, r0
 800a2bc:	6078      	str	r0, [r7, #4]
 800a2be:	922e      	str	r2, [sp, #184]	; 0xb8
 800a2c0:	932d      	str	r3, [sp, #180]	; 0xb4
 800a2c2:	2b07      	cmp	r3, #7
 800a2c4:	dd08      	ble.n	800a2d8 <_svfprintf_r+0xdbc>
 800a2c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a2ca:	aa2c      	add	r2, sp, #176	; 0xb0
 800a2cc:	f002 f91c 	bl	800c508 <__ssprint_r>
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	d000      	beq.n	800a2d6 <_svfprintf_r+0xdba>
 800a2d4:	e337      	b.n	800a946 <_svfprintf_r+0x142a>
 800a2d6:	a92f      	add	r1, sp, #188	; 0xbc
 800a2d8:	000f      	movs	r7, r1
 800a2da:	3c10      	subs	r4, #16
 800a2dc:	f7ff fb0f 	bl	80098fe <_svfprintf_r+0x3e2>
 800a2e0:	2010      	movs	r0, #16
 800a2e2:	1812      	adds	r2, r2, r0
 800a2e4:	6078      	str	r0, [r7, #4]
 800a2e6:	922e      	str	r2, [sp, #184]	; 0xb8
 800a2e8:	932d      	str	r3, [sp, #180]	; 0xb4
 800a2ea:	2b07      	cmp	r3, #7
 800a2ec:	dd08      	ble.n	800a300 <_svfprintf_r+0xde4>
 800a2ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a2f2:	aa2c      	add	r2, sp, #176	; 0xb0
 800a2f4:	f002 f908 	bl	800c508 <__ssprint_r>
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	d000      	beq.n	800a2fe <_svfprintf_r+0xde2>
 800a2fc:	e323      	b.n	800a946 <_svfprintf_r+0x142a>
 800a2fe:	a92f      	add	r1, sp, #188	; 0xbc
 800a300:	000f      	movs	r7, r1
 800a302:	3c10      	subs	r4, #16
 800a304:	f7ff fb1d 	bl	8009942 <_svfprintf_r+0x426>
 800a308:	fffffbff 	.word	0xfffffbff
 800a30c:	00007830 	.word	0x00007830
 800a310:	0800e900 	.word	0x0800e900
 800a314:	0800e911 	.word	0x0800e911
 800a318:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a31a:	2b65      	cmp	r3, #101	; 0x65
 800a31c:	dc00      	bgt.n	800a320 <_svfprintf_r+0xe04>
 800a31e:	e258      	b.n	800a7d2 <_svfprintf_r+0x12b6>
 800a320:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a322:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a324:	2200      	movs	r2, #0
 800a326:	2300      	movs	r3, #0
 800a328:	f7f6 f890 	bl	800044c <__aeabi_dcmpeq>
 800a32c:	2800      	cmp	r0, #0
 800a32e:	d07c      	beq.n	800a42a <_svfprintf_r+0xf0e>
 800a330:	4b80      	ldr	r3, [pc, #512]	; (800a534 <_svfprintf_r+0x1018>)
 800a332:	603b      	str	r3, [r7, #0]
 800a334:	2301      	movs	r3, #1
 800a336:	607b      	str	r3, [r7, #4]
 800a338:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a33a:	3708      	adds	r7, #8
 800a33c:	3301      	adds	r3, #1
 800a33e:	932e      	str	r3, [sp, #184]	; 0xb8
 800a340:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a342:	9308      	str	r3, [sp, #32]
 800a344:	3301      	adds	r3, #1
 800a346:	932d      	str	r3, [sp, #180]	; 0xb4
 800a348:	2b07      	cmp	r3, #7
 800a34a:	dd08      	ble.n	800a35e <_svfprintf_r+0xe42>
 800a34c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a34e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a350:	aa2c      	add	r2, sp, #176	; 0xb0
 800a352:	f002 f8d9 	bl	800c508 <__ssprint_r>
 800a356:	2800      	cmp	r0, #0
 800a358:	d000      	beq.n	800a35c <_svfprintf_r+0xe40>
 800a35a:	e2f4      	b.n	800a946 <_svfprintf_r+0x142a>
 800a35c:	af2f      	add	r7, sp, #188	; 0xbc
 800a35e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a360:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a362:	4293      	cmp	r3, r2
 800a364:	db01      	blt.n	800a36a <_svfprintf_r+0xe4e>
 800a366:	07f3      	lsls	r3, r6, #31
 800a368:	d51d      	bpl.n	800a3a6 <_svfprintf_r+0xe8a>
 800a36a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a36c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a36e:	4694      	mov	ip, r2
 800a370:	603b      	str	r3, [r7, #0]
 800a372:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a374:	607b      	str	r3, [r7, #4]
 800a376:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a378:	3708      	adds	r7, #8
 800a37a:	4463      	add	r3, ip
 800a37c:	932e      	str	r3, [sp, #184]	; 0xb8
 800a37e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a380:	9308      	str	r3, [sp, #32]
 800a382:	3301      	adds	r3, #1
 800a384:	932d      	str	r3, [sp, #180]	; 0xb4
 800a386:	2b07      	cmp	r3, #7
 800a388:	dd08      	ble.n	800a39c <_svfprintf_r+0xe80>
 800a38a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a38c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a38e:	aa2c      	add	r2, sp, #176	; 0xb0
 800a390:	f002 f8ba 	bl	800c508 <__ssprint_r>
 800a394:	2800      	cmp	r0, #0
 800a396:	d000      	beq.n	800a39a <_svfprintf_r+0xe7e>
 800a398:	e2d5      	b.n	800a946 <_svfprintf_r+0x142a>
 800a39a:	af2f      	add	r7, sp, #188	; 0xbc
 800a39c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a39e:	2510      	movs	r5, #16
 800a3a0:	1e5c      	subs	r4, r3, #1
 800a3a2:	2c00      	cmp	r4, #0
 800a3a4:	dc2f      	bgt.n	800a406 <_svfprintf_r+0xeea>
 800a3a6:	0773      	lsls	r3, r6, #29
 800a3a8:	d500      	bpl.n	800a3ac <_svfprintf_r+0xe90>
 800a3aa:	e2ae      	b.n	800a90a <_svfprintf_r+0x13ee>
 800a3ac:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a3ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	da00      	bge.n	800a3b6 <_svfprintf_r+0xe9a>
 800a3b4:	0013      	movs	r3, r2
 800a3b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a3b8:	18d3      	adds	r3, r2, r3
 800a3ba:	9317      	str	r3, [sp, #92]	; 0x5c
 800a3bc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a3be:	9308      	str	r3, [sp, #32]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d007      	beq.n	800a3d4 <_svfprintf_r+0xeb8>
 800a3c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a3c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a3c8:	aa2c      	add	r2, sp, #176	; 0xb0
 800a3ca:	f002 f89d 	bl	800c508 <__ssprint_r>
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	d000      	beq.n	800a3d4 <_svfprintf_r+0xeb8>
 800a3d2:	e2b8      	b.n	800a946 <_svfprintf_r+0x142a>
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	932d      	str	r3, [sp, #180]	; 0xb4
 800a3d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d000      	beq.n	800a3e0 <_svfprintf_r+0xec4>
 800a3de:	e2ce      	b.n	800a97e <_svfprintf_r+0x1462>
 800a3e0:	af2f      	add	r7, sp, #188	; 0xbc
 800a3e2:	e5d8      	b.n	8009f96 <_svfprintf_r+0xa7a>
 800a3e4:	3210      	adds	r2, #16
 800a3e6:	607d      	str	r5, [r7, #4]
 800a3e8:	922e      	str	r2, [sp, #184]	; 0xb8
 800a3ea:	932d      	str	r3, [sp, #180]	; 0xb4
 800a3ec:	2b07      	cmp	r3, #7
 800a3ee:	dd08      	ble.n	800a402 <_svfprintf_r+0xee6>
 800a3f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a3f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a3f4:	aa2c      	add	r2, sp, #176	; 0xb0
 800a3f6:	f002 f887 	bl	800c508 <__ssprint_r>
 800a3fa:	2800      	cmp	r0, #0
 800a3fc:	d000      	beq.n	800a400 <_svfprintf_r+0xee4>
 800a3fe:	e2a2      	b.n	800a946 <_svfprintf_r+0x142a>
 800a400:	a92f      	add	r1, sp, #188	; 0xbc
 800a402:	000f      	movs	r7, r1
 800a404:	3c10      	subs	r4, #16
 800a406:	0039      	movs	r1, r7
 800a408:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a40a:	484b      	ldr	r0, [pc, #300]	; (800a538 <_svfprintf_r+0x101c>)
 800a40c:	9308      	str	r3, [sp, #32]
 800a40e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a410:	3301      	adds	r3, #1
 800a412:	3108      	adds	r1, #8
 800a414:	6038      	str	r0, [r7, #0]
 800a416:	2c10      	cmp	r4, #16
 800a418:	dce4      	bgt.n	800a3e4 <_svfprintf_r+0xec8>
 800a41a:	607c      	str	r4, [r7, #4]
 800a41c:	18a4      	adds	r4, r4, r2
 800a41e:	000f      	movs	r7, r1
 800a420:	942e      	str	r4, [sp, #184]	; 0xb8
 800a422:	932d      	str	r3, [sp, #180]	; 0xb4
 800a424:	2b07      	cmp	r3, #7
 800a426:	ddbe      	ble.n	800a3a6 <_svfprintf_r+0xe8a>
 800a428:	e067      	b.n	800a4fa <_svfprintf_r+0xfde>
 800a42a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	dd00      	ble.n	800a432 <_svfprintf_r+0xf16>
 800a430:	e084      	b.n	800a53c <_svfprintf_r+0x1020>
 800a432:	4b40      	ldr	r3, [pc, #256]	; (800a534 <_svfprintf_r+0x1018>)
 800a434:	603b      	str	r3, [r7, #0]
 800a436:	2301      	movs	r3, #1
 800a438:	607b      	str	r3, [r7, #4]
 800a43a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a43c:	3708      	adds	r7, #8
 800a43e:	3301      	adds	r3, #1
 800a440:	932e      	str	r3, [sp, #184]	; 0xb8
 800a442:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a444:	9309      	str	r3, [sp, #36]	; 0x24
 800a446:	3301      	adds	r3, #1
 800a448:	932d      	str	r3, [sp, #180]	; 0xb4
 800a44a:	2b07      	cmp	r3, #7
 800a44c:	dd08      	ble.n	800a460 <_svfprintf_r+0xf44>
 800a44e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a450:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a452:	aa2c      	add	r2, sp, #176	; 0xb0
 800a454:	f002 f858 	bl	800c508 <__ssprint_r>
 800a458:	2800      	cmp	r0, #0
 800a45a:	d000      	beq.n	800a45e <_svfprintf_r+0xf42>
 800a45c:	e273      	b.n	800a946 <_svfprintf_r+0x142a>
 800a45e:	af2f      	add	r7, sp, #188	; 0xbc
 800a460:	9926      	ldr	r1, [sp, #152]	; 0x98
 800a462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a464:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a466:	430b      	orrs	r3, r1
 800a468:	2101      	movs	r1, #1
 800a46a:	4031      	ands	r1, r6
 800a46c:	430b      	orrs	r3, r1
 800a46e:	d09a      	beq.n	800a3a6 <_svfprintf_r+0xe8a>
 800a470:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a472:	603b      	str	r3, [r7, #0]
 800a474:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a476:	607b      	str	r3, [r7, #4]
 800a478:	189a      	adds	r2, r3, r2
 800a47a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a47c:	922e      	str	r2, [sp, #184]	; 0xb8
 800a47e:	9309      	str	r3, [sp, #36]	; 0x24
 800a480:	3301      	adds	r3, #1
 800a482:	932d      	str	r3, [sp, #180]	; 0xb4
 800a484:	3708      	adds	r7, #8
 800a486:	2b07      	cmp	r3, #7
 800a488:	dd08      	ble.n	800a49c <_svfprintf_r+0xf80>
 800a48a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a48c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a48e:	aa2c      	add	r2, sp, #176	; 0xb0
 800a490:	f002 f83a 	bl	800c508 <__ssprint_r>
 800a494:	2800      	cmp	r0, #0
 800a496:	d000      	beq.n	800a49a <_svfprintf_r+0xf7e>
 800a498:	e255      	b.n	800a946 <_svfprintf_r+0x142a>
 800a49a:	af2f      	add	r7, sp, #188	; 0xbc
 800a49c:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800a49e:	2c00      	cmp	r4, #0
 800a4a0:	da1a      	bge.n	800a4d8 <_svfprintf_r+0xfbc>
 800a4a2:	0039      	movs	r1, r7
 800a4a4:	2510      	movs	r5, #16
 800a4a6:	4264      	negs	r4, r4
 800a4a8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a4aa:	982e      	ldr	r0, [sp, #184]	; 0xb8
 800a4ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ae:	1c5a      	adds	r2, r3, #1
 800a4b0:	4b21      	ldr	r3, [pc, #132]	; (800a538 <_svfprintf_r+0x101c>)
 800a4b2:	3708      	adds	r7, #8
 800a4b4:	600b      	str	r3, [r1, #0]
 800a4b6:	2c10      	cmp	r4, #16
 800a4b8:	dc29      	bgt.n	800a50e <_svfprintf_r+0xff2>
 800a4ba:	604c      	str	r4, [r1, #4]
 800a4bc:	1824      	adds	r4, r4, r0
 800a4be:	942e      	str	r4, [sp, #184]	; 0xb8
 800a4c0:	922d      	str	r2, [sp, #180]	; 0xb4
 800a4c2:	2a07      	cmp	r2, #7
 800a4c4:	dd08      	ble.n	800a4d8 <_svfprintf_r+0xfbc>
 800a4c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a4ca:	aa2c      	add	r2, sp, #176	; 0xb0
 800a4cc:	f002 f81c 	bl	800c508 <__ssprint_r>
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	d000      	beq.n	800a4d6 <_svfprintf_r+0xfba>
 800a4d4:	e237      	b.n	800a946 <_svfprintf_r+0x142a>
 800a4d6:	af2f      	add	r7, sp, #188	; 0xbc
 800a4d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a4da:	9b08      	ldr	r3, [sp, #32]
 800a4dc:	468c      	mov	ip, r1
 800a4de:	603b      	str	r3, [r7, #0]
 800a4e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4e2:	607b      	str	r3, [r7, #4]
 800a4e4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a4e6:	4463      	add	r3, ip
 800a4e8:	932e      	str	r3, [sp, #184]	; 0xb8
 800a4ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a4ec:	1c5a      	adds	r2, r3, #1
 800a4ee:	9308      	str	r3, [sp, #32]
 800a4f0:	922d      	str	r2, [sp, #180]	; 0xb4
 800a4f2:	2a07      	cmp	r2, #7
 800a4f4:	dc01      	bgt.n	800a4fa <_svfprintf_r+0xfde>
 800a4f6:	f7ff fa58 	bl	80099aa <_svfprintf_r+0x48e>
 800a4fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a4fe:	aa2c      	add	r2, sp, #176	; 0xb0
 800a500:	f002 f802 	bl	800c508 <__ssprint_r>
 800a504:	2800      	cmp	r0, #0
 800a506:	d000      	beq.n	800a50a <_svfprintf_r+0xfee>
 800a508:	e21d      	b.n	800a946 <_svfprintf_r+0x142a>
 800a50a:	af2f      	add	r7, sp, #188	; 0xbc
 800a50c:	e74b      	b.n	800a3a6 <_svfprintf_r+0xe8a>
 800a50e:	3010      	adds	r0, #16
 800a510:	604d      	str	r5, [r1, #4]
 800a512:	902e      	str	r0, [sp, #184]	; 0xb8
 800a514:	922d      	str	r2, [sp, #180]	; 0xb4
 800a516:	2a07      	cmp	r2, #7
 800a518:	dd08      	ble.n	800a52c <_svfprintf_r+0x1010>
 800a51a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a51c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a51e:	aa2c      	add	r2, sp, #176	; 0xb0
 800a520:	f001 fff2 	bl	800c508 <__ssprint_r>
 800a524:	2800      	cmp	r0, #0
 800a526:	d000      	beq.n	800a52a <_svfprintf_r+0x100e>
 800a528:	e20d      	b.n	800a946 <_svfprintf_r+0x142a>
 800a52a:	af2f      	add	r7, sp, #188	; 0xbc
 800a52c:	0039      	movs	r1, r7
 800a52e:	3c10      	subs	r4, #16
 800a530:	e7ba      	b.n	800a4a8 <_svfprintf_r+0xf8c>
 800a532:	46c0      	nop			; (mov r8, r8)
 800a534:	0800e922 	.word	0x0800e922
 800a538:	0800e934 	.word	0x0800e934
 800a53c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a53e:	002c      	movs	r4, r5
 800a540:	429d      	cmp	r5, r3
 800a542:	dd00      	ble.n	800a546 <_svfprintf_r+0x102a>
 800a544:	001c      	movs	r4, r3
 800a546:	2c00      	cmp	r4, #0
 800a548:	dd15      	ble.n	800a576 <_svfprintf_r+0x105a>
 800a54a:	9b08      	ldr	r3, [sp, #32]
 800a54c:	607c      	str	r4, [r7, #4]
 800a54e:	603b      	str	r3, [r7, #0]
 800a550:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a552:	3708      	adds	r7, #8
 800a554:	18e3      	adds	r3, r4, r3
 800a556:	932e      	str	r3, [sp, #184]	; 0xb8
 800a558:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a55a:	9309      	str	r3, [sp, #36]	; 0x24
 800a55c:	3301      	adds	r3, #1
 800a55e:	932d      	str	r3, [sp, #180]	; 0xb4
 800a560:	2b07      	cmp	r3, #7
 800a562:	dd08      	ble.n	800a576 <_svfprintf_r+0x105a>
 800a564:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a566:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a568:	aa2c      	add	r2, sp, #176	; 0xb0
 800a56a:	f001 ffcd 	bl	800c508 <__ssprint_r>
 800a56e:	2800      	cmp	r0, #0
 800a570:	d000      	beq.n	800a574 <_svfprintf_r+0x1058>
 800a572:	e1e8      	b.n	800a946 <_svfprintf_r+0x142a>
 800a574:	af2f      	add	r7, sp, #188	; 0xbc
 800a576:	43e3      	mvns	r3, r4
 800a578:	17db      	asrs	r3, r3, #31
 800a57a:	401c      	ands	r4, r3
 800a57c:	1b2c      	subs	r4, r5, r4
 800a57e:	2c00      	cmp	r4, #0
 800a580:	dd1a      	ble.n	800a5b8 <_svfprintf_r+0x109c>
 800a582:	0039      	movs	r1, r7
 800a584:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a586:	48ca      	ldr	r0, [pc, #808]	; (800a8b0 <_svfprintf_r+0x1394>)
 800a588:	9309      	str	r3, [sp, #36]	; 0x24
 800a58a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a58c:	3301      	adds	r3, #1
 800a58e:	3108      	adds	r1, #8
 800a590:	6038      	str	r0, [r7, #0]
 800a592:	2c10      	cmp	r4, #16
 800a594:	dd00      	ble.n	800a598 <_svfprintf_r+0x107c>
 800a596:	e08a      	b.n	800a6ae <_svfprintf_r+0x1192>
 800a598:	607c      	str	r4, [r7, #4]
 800a59a:	18a4      	adds	r4, r4, r2
 800a59c:	000f      	movs	r7, r1
 800a59e:	942e      	str	r4, [sp, #184]	; 0xb8
 800a5a0:	932d      	str	r3, [sp, #180]	; 0xb4
 800a5a2:	2b07      	cmp	r3, #7
 800a5a4:	dd08      	ble.n	800a5b8 <_svfprintf_r+0x109c>
 800a5a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a5a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a5aa:	aa2c      	add	r2, sp, #176	; 0xb0
 800a5ac:	f001 ffac 	bl	800c508 <__ssprint_r>
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	d000      	beq.n	800a5b6 <_svfprintf_r+0x109a>
 800a5b4:	e1c7      	b.n	800a946 <_svfprintf_r+0x142a>
 800a5b6:	af2f      	add	r7, sp, #188	; 0xbc
 800a5b8:	9b08      	ldr	r3, [sp, #32]
 800a5ba:	195d      	adds	r5, r3, r5
 800a5bc:	0573      	lsls	r3, r6, #21
 800a5be:	d50d      	bpl.n	800a5dc <_svfprintf_r+0x10c0>
 800a5c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d000      	beq.n	800a5c8 <_svfprintf_r+0x10ac>
 800a5c6:	e085      	b.n	800a6d4 <_svfprintf_r+0x11b8>
 800a5c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d000      	beq.n	800a5d0 <_svfprintf_r+0x10b4>
 800a5ce:	e084      	b.n	800a6da <_svfprintf_r+0x11be>
 800a5d0:	9b08      	ldr	r3, [sp, #32]
 800a5d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a5d4:	189b      	adds	r3, r3, r2
 800a5d6:	429d      	cmp	r5, r3
 800a5d8:	d900      	bls.n	800a5dc <_svfprintf_r+0x10c0>
 800a5da:	001d      	movs	r5, r3
 800a5dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a5de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	db01      	blt.n	800a5e8 <_svfprintf_r+0x10cc>
 800a5e4:	07f3      	lsls	r3, r6, #31
 800a5e6:	d518      	bpl.n	800a61a <_svfprintf_r+0x10fe>
 800a5e8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a5ea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a5ec:	4694      	mov	ip, r2
 800a5ee:	603b      	str	r3, [r7, #0]
 800a5f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a5f2:	607b      	str	r3, [r7, #4]
 800a5f4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a5f6:	3708      	adds	r7, #8
 800a5f8:	4463      	add	r3, ip
 800a5fa:	932e      	str	r3, [sp, #184]	; 0xb8
 800a5fc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a5fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a600:	3301      	adds	r3, #1
 800a602:	932d      	str	r3, [sp, #180]	; 0xb4
 800a604:	2b07      	cmp	r3, #7
 800a606:	dd08      	ble.n	800a61a <_svfprintf_r+0x10fe>
 800a608:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a60a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a60c:	aa2c      	add	r2, sp, #176	; 0xb0
 800a60e:	f001 ff7b 	bl	800c508 <__ssprint_r>
 800a612:	2800      	cmp	r0, #0
 800a614:	d000      	beq.n	800a618 <_svfprintf_r+0x10fc>
 800a616:	e196      	b.n	800a946 <_svfprintf_r+0x142a>
 800a618:	af2f      	add	r7, sp, #188	; 0xbc
 800a61a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a61c:	9b08      	ldr	r3, [sp, #32]
 800a61e:	4694      	mov	ip, r2
 800a620:	4463      	add	r3, ip
 800a622:	1b58      	subs	r0, r3, r5
 800a624:	0013      	movs	r3, r2
 800a626:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a628:	1a9c      	subs	r4, r3, r2
 800a62a:	4284      	cmp	r4, r0
 800a62c:	dd00      	ble.n	800a630 <_svfprintf_r+0x1114>
 800a62e:	0004      	movs	r4, r0
 800a630:	2c00      	cmp	r4, #0
 800a632:	dd14      	ble.n	800a65e <_svfprintf_r+0x1142>
 800a634:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a636:	603d      	str	r5, [r7, #0]
 800a638:	18e3      	adds	r3, r4, r3
 800a63a:	932e      	str	r3, [sp, #184]	; 0xb8
 800a63c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a63e:	607c      	str	r4, [r7, #4]
 800a640:	9308      	str	r3, [sp, #32]
 800a642:	3301      	adds	r3, #1
 800a644:	932d      	str	r3, [sp, #180]	; 0xb4
 800a646:	3708      	adds	r7, #8
 800a648:	2b07      	cmp	r3, #7
 800a64a:	dd08      	ble.n	800a65e <_svfprintf_r+0x1142>
 800a64c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a64e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a650:	aa2c      	add	r2, sp, #176	; 0xb0
 800a652:	f001 ff59 	bl	800c508 <__ssprint_r>
 800a656:	2800      	cmp	r0, #0
 800a658:	d000      	beq.n	800a65c <_svfprintf_r+0x1140>
 800a65a:	e174      	b.n	800a946 <_svfprintf_r+0x142a>
 800a65c:	af2f      	add	r7, sp, #188	; 0xbc
 800a65e:	43e3      	mvns	r3, r4
 800a660:	17db      	asrs	r3, r3, #31
 800a662:	401c      	ands	r4, r3
 800a664:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a666:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a668:	2510      	movs	r5, #16
 800a66a:	1a9b      	subs	r3, r3, r2
 800a66c:	1b1c      	subs	r4, r3, r4
 800a66e:	2c00      	cmp	r4, #0
 800a670:	dc00      	bgt.n	800a674 <_svfprintf_r+0x1158>
 800a672:	e698      	b.n	800a3a6 <_svfprintf_r+0xe8a>
 800a674:	0039      	movs	r1, r7
 800a676:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a678:	488d      	ldr	r0, [pc, #564]	; (800a8b0 <_svfprintf_r+0x1394>)
 800a67a:	9308      	str	r3, [sp, #32]
 800a67c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a67e:	3301      	adds	r3, #1
 800a680:	3108      	adds	r1, #8
 800a682:	6038      	str	r0, [r7, #0]
 800a684:	2c10      	cmp	r4, #16
 800a686:	dc00      	bgt.n	800a68a <_svfprintf_r+0x116e>
 800a688:	e6c7      	b.n	800a41a <_svfprintf_r+0xefe>
 800a68a:	3210      	adds	r2, #16
 800a68c:	607d      	str	r5, [r7, #4]
 800a68e:	922e      	str	r2, [sp, #184]	; 0xb8
 800a690:	932d      	str	r3, [sp, #180]	; 0xb4
 800a692:	2b07      	cmp	r3, #7
 800a694:	dd08      	ble.n	800a6a8 <_svfprintf_r+0x118c>
 800a696:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a698:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a69a:	aa2c      	add	r2, sp, #176	; 0xb0
 800a69c:	f001 ff34 	bl	800c508 <__ssprint_r>
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	d000      	beq.n	800a6a6 <_svfprintf_r+0x118a>
 800a6a4:	e14f      	b.n	800a946 <_svfprintf_r+0x142a>
 800a6a6:	a92f      	add	r1, sp, #188	; 0xbc
 800a6a8:	000f      	movs	r7, r1
 800a6aa:	3c10      	subs	r4, #16
 800a6ac:	e7e2      	b.n	800a674 <_svfprintf_r+0x1158>
 800a6ae:	2010      	movs	r0, #16
 800a6b0:	1812      	adds	r2, r2, r0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	922e      	str	r2, [sp, #184]	; 0xb8
 800a6b6:	932d      	str	r3, [sp, #180]	; 0xb4
 800a6b8:	2b07      	cmp	r3, #7
 800a6ba:	dd08      	ble.n	800a6ce <_svfprintf_r+0x11b2>
 800a6bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a6be:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a6c0:	aa2c      	add	r2, sp, #176	; 0xb0
 800a6c2:	f001 ff21 	bl	800c508 <__ssprint_r>
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	d000      	beq.n	800a6cc <_svfprintf_r+0x11b0>
 800a6ca:	e13c      	b.n	800a946 <_svfprintf_r+0x142a>
 800a6cc:	a92f      	add	r1, sp, #188	; 0xbc
 800a6ce:	000f      	movs	r7, r1
 800a6d0:	3c10      	subs	r4, #16
 800a6d2:	e756      	b.n	800a582 <_svfprintf_r+0x1066>
 800a6d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d061      	beq.n	800a79e <_svfprintf_r+0x1282>
 800a6da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a6dc:	3b01      	subs	r3, #1
 800a6de:	9310      	str	r3, [sp, #64]	; 0x40
 800a6e0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a6e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a6e4:	4694      	mov	ip, r2
 800a6e6:	603b      	str	r3, [r7, #0]
 800a6e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a6ea:	607b      	str	r3, [r7, #4]
 800a6ec:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	4463      	add	r3, ip
 800a6f2:	932e      	str	r3, [sp, #184]	; 0xb8
 800a6f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a6f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	932d      	str	r3, [sp, #180]	; 0xb4
 800a6fc:	2b07      	cmp	r3, #7
 800a6fe:	dd08      	ble.n	800a712 <_svfprintf_r+0x11f6>
 800a700:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a702:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a704:	aa2c      	add	r2, sp, #176	; 0xb0
 800a706:	f001 feff 	bl	800c508 <__ssprint_r>
 800a70a:	2800      	cmp	r0, #0
 800a70c:	d000      	beq.n	800a710 <_svfprintf_r+0x11f4>
 800a70e:	e11a      	b.n	800a946 <_svfprintf_r+0x142a>
 800a710:	af2f      	add	r7, sp, #188	; 0xbc
 800a712:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a714:	9b08      	ldr	r3, [sp, #32]
 800a716:	189b      	adds	r3, r3, r2
 800a718:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a71a:	1b5b      	subs	r3, r3, r5
 800a71c:	7814      	ldrb	r4, [r2, #0]
 800a71e:	429c      	cmp	r4, r3
 800a720:	dd00      	ble.n	800a724 <_svfprintf_r+0x1208>
 800a722:	001c      	movs	r4, r3
 800a724:	2c00      	cmp	r4, #0
 800a726:	dd14      	ble.n	800a752 <_svfprintf_r+0x1236>
 800a728:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a72a:	603d      	str	r5, [r7, #0]
 800a72c:	18e3      	adds	r3, r4, r3
 800a72e:	932e      	str	r3, [sp, #184]	; 0xb8
 800a730:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a732:	607c      	str	r4, [r7, #4]
 800a734:	9309      	str	r3, [sp, #36]	; 0x24
 800a736:	3301      	adds	r3, #1
 800a738:	932d      	str	r3, [sp, #180]	; 0xb4
 800a73a:	3708      	adds	r7, #8
 800a73c:	2b07      	cmp	r3, #7
 800a73e:	dd08      	ble.n	800a752 <_svfprintf_r+0x1236>
 800a740:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a742:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a744:	aa2c      	add	r2, sp, #176	; 0xb0
 800a746:	f001 fedf 	bl	800c508 <__ssprint_r>
 800a74a:	2800      	cmp	r0, #0
 800a74c:	d000      	beq.n	800a750 <_svfprintf_r+0x1234>
 800a74e:	e0fa      	b.n	800a946 <_svfprintf_r+0x142a>
 800a750:	af2f      	add	r7, sp, #188	; 0xbc
 800a752:	43e3      	mvns	r3, r4
 800a754:	17db      	asrs	r3, r3, #31
 800a756:	401c      	ands	r4, r3
 800a758:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a75a:	781b      	ldrb	r3, [r3, #0]
 800a75c:	1b1c      	subs	r4, r3, r4
 800a75e:	2c00      	cmp	r4, #0
 800a760:	dd19      	ble.n	800a796 <_svfprintf_r+0x127a>
 800a762:	0039      	movs	r1, r7
 800a764:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a766:	4852      	ldr	r0, [pc, #328]	; (800a8b0 <_svfprintf_r+0x1394>)
 800a768:	9309      	str	r3, [sp, #36]	; 0x24
 800a76a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a76c:	3301      	adds	r3, #1
 800a76e:	3108      	adds	r1, #8
 800a770:	6038      	str	r0, [r7, #0]
 800a772:	2c10      	cmp	r4, #16
 800a774:	dc1a      	bgt.n	800a7ac <_svfprintf_r+0x1290>
 800a776:	607c      	str	r4, [r7, #4]
 800a778:	18a4      	adds	r4, r4, r2
 800a77a:	000f      	movs	r7, r1
 800a77c:	942e      	str	r4, [sp, #184]	; 0xb8
 800a77e:	932d      	str	r3, [sp, #180]	; 0xb4
 800a780:	2b07      	cmp	r3, #7
 800a782:	dd08      	ble.n	800a796 <_svfprintf_r+0x127a>
 800a784:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a786:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a788:	aa2c      	add	r2, sp, #176	; 0xb0
 800a78a:	f001 febd 	bl	800c508 <__ssprint_r>
 800a78e:	2800      	cmp	r0, #0
 800a790:	d000      	beq.n	800a794 <_svfprintf_r+0x1278>
 800a792:	e0d8      	b.n	800a946 <_svfprintf_r+0x142a>
 800a794:	af2f      	add	r7, sp, #188	; 0xbc
 800a796:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	18ed      	adds	r5, r5, r3
 800a79c:	e710      	b.n	800a5c0 <_svfprintf_r+0x10a4>
 800a79e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a7a0:	3b01      	subs	r3, #1
 800a7a2:	9312      	str	r3, [sp, #72]	; 0x48
 800a7a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7a6:	3b01      	subs	r3, #1
 800a7a8:	9311      	str	r3, [sp, #68]	; 0x44
 800a7aa:	e799      	b.n	800a6e0 <_svfprintf_r+0x11c4>
 800a7ac:	2010      	movs	r0, #16
 800a7ae:	1812      	adds	r2, r2, r0
 800a7b0:	6078      	str	r0, [r7, #4]
 800a7b2:	922e      	str	r2, [sp, #184]	; 0xb8
 800a7b4:	932d      	str	r3, [sp, #180]	; 0xb4
 800a7b6:	2b07      	cmp	r3, #7
 800a7b8:	dd08      	ble.n	800a7cc <_svfprintf_r+0x12b0>
 800a7ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a7bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a7be:	aa2c      	add	r2, sp, #176	; 0xb0
 800a7c0:	f001 fea2 	bl	800c508 <__ssprint_r>
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	d000      	beq.n	800a7ca <_svfprintf_r+0x12ae>
 800a7c8:	e0bd      	b.n	800a946 <_svfprintf_r+0x142a>
 800a7ca:	a92f      	add	r1, sp, #188	; 0xbc
 800a7cc:	000f      	movs	r7, r1
 800a7ce:	3c10      	subs	r4, #16
 800a7d0:	e7c7      	b.n	800a762 <_svfprintf_r+0x1246>
 800a7d2:	003c      	movs	r4, r7
 800a7d4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a7d6:	9919      	ldr	r1, [sp, #100]	; 0x64
 800a7d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a7da:	9309      	str	r3, [sp, #36]	; 0x24
 800a7dc:	3101      	adds	r1, #1
 800a7de:	3301      	adds	r3, #1
 800a7e0:	3408      	adds	r4, #8
 800a7e2:	2a01      	cmp	r2, #1
 800a7e4:	dc03      	bgt.n	800a7ee <_svfprintf_r+0x12d2>
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	4216      	tst	r6, r2
 800a7ea:	d100      	bne.n	800a7ee <_svfprintf_r+0x12d2>
 800a7ec:	e088      	b.n	800a900 <_svfprintf_r+0x13e4>
 800a7ee:	9a08      	ldr	r2, [sp, #32]
 800a7f0:	912e      	str	r1, [sp, #184]	; 0xb8
 800a7f2:	603a      	str	r2, [r7, #0]
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	932d      	str	r3, [sp, #180]	; 0xb4
 800a7f8:	607a      	str	r2, [r7, #4]
 800a7fa:	2b07      	cmp	r3, #7
 800a7fc:	dd08      	ble.n	800a810 <_svfprintf_r+0x12f4>
 800a7fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a800:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a802:	aa2c      	add	r2, sp, #176	; 0xb0
 800a804:	f001 fe80 	bl	800c508 <__ssprint_r>
 800a808:	2800      	cmp	r0, #0
 800a80a:	d000      	beq.n	800a80e <_svfprintf_r+0x12f2>
 800a80c:	e09b      	b.n	800a946 <_svfprintf_r+0x142a>
 800a80e:	ac2f      	add	r4, sp, #188	; 0xbc
 800a810:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a812:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a814:	4694      	mov	ip, r2
 800a816:	6023      	str	r3, [r4, #0]
 800a818:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a81a:	6063      	str	r3, [r4, #4]
 800a81c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a81e:	3408      	adds	r4, #8
 800a820:	4463      	add	r3, ip
 800a822:	932e      	str	r3, [sp, #184]	; 0xb8
 800a824:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a826:	9309      	str	r3, [sp, #36]	; 0x24
 800a828:	3301      	adds	r3, #1
 800a82a:	932d      	str	r3, [sp, #180]	; 0xb4
 800a82c:	2b07      	cmp	r3, #7
 800a82e:	dd08      	ble.n	800a842 <_svfprintf_r+0x1326>
 800a830:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a832:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a834:	aa2c      	add	r2, sp, #176	; 0xb0
 800a836:	f001 fe67 	bl	800c508 <__ssprint_r>
 800a83a:	2800      	cmp	r0, #0
 800a83c:	d000      	beq.n	800a840 <_svfprintf_r+0x1324>
 800a83e:	e082      	b.n	800a946 <_svfprintf_r+0x142a>
 800a840:	ac2f      	add	r4, sp, #188	; 0xbc
 800a842:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a844:	2200      	movs	r2, #0
 800a846:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a848:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a84a:	1e5d      	subs	r5, r3, #1
 800a84c:	2300      	movs	r3, #0
 800a84e:	f7f5 fdfd 	bl	800044c <__aeabi_dcmpeq>
 800a852:	2800      	cmp	r0, #0
 800a854:	d12e      	bne.n	800a8b4 <_svfprintf_r+0x1398>
 800a856:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a858:	9808      	ldr	r0, [sp, #32]
 800a85a:	9309      	str	r3, [sp, #36]	; 0x24
 800a85c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a85e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a860:	1c59      	adds	r1, r3, #1
 800a862:	930f      	str	r3, [sp, #60]	; 0x3c
 800a864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a866:	3001      	adds	r0, #1
 800a868:	3b01      	subs	r3, #1
 800a86a:	189b      	adds	r3, r3, r2
 800a86c:	6020      	str	r0, [r4, #0]
 800a86e:	6065      	str	r5, [r4, #4]
 800a870:	932e      	str	r3, [sp, #184]	; 0xb8
 800a872:	912d      	str	r1, [sp, #180]	; 0xb4
 800a874:	3408      	adds	r4, #8
 800a876:	2907      	cmp	r1, #7
 800a878:	dd07      	ble.n	800a88a <_svfprintf_r+0x136e>
 800a87a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a87c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a87e:	aa2c      	add	r2, sp, #176	; 0xb0
 800a880:	f001 fe42 	bl	800c508 <__ssprint_r>
 800a884:	2800      	cmp	r0, #0
 800a886:	d15e      	bne.n	800a946 <_svfprintf_r+0x142a>
 800a888:	ac2f      	add	r4, sp, #188	; 0xbc
 800a88a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a88c:	ab28      	add	r3, sp, #160	; 0xa0
 800a88e:	4694      	mov	ip, r2
 800a890:	6023      	str	r3, [r4, #0]
 800a892:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a894:	6063      	str	r3, [r4, #4]
 800a896:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a898:	4463      	add	r3, ip
 800a89a:	932e      	str	r3, [sp, #184]	; 0xb8
 800a89c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a89e:	9308      	str	r3, [sp, #32]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	932d      	str	r3, [sp, #180]	; 0xb4
 800a8a4:	2b07      	cmp	r3, #7
 800a8a6:	dd00      	ble.n	800a8aa <_svfprintf_r+0x138e>
 800a8a8:	e627      	b.n	800a4fa <_svfprintf_r+0xfde>
 800a8aa:	3408      	adds	r4, #8
 800a8ac:	0027      	movs	r7, r4
 800a8ae:	e57a      	b.n	800a3a6 <_svfprintf_r+0xe8a>
 800a8b0:	0800e934 	.word	0x0800e934
 800a8b4:	2710      	movs	r7, #16
 800a8b6:	2d00      	cmp	r5, #0
 800a8b8:	dde7      	ble.n	800a88a <_svfprintf_r+0x136e>
 800a8ba:	0021      	movs	r1, r4
 800a8bc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a8be:	4857      	ldr	r0, [pc, #348]	; (800aa1c <_svfprintf_r+0x1500>)
 800a8c0:	9308      	str	r3, [sp, #32]
 800a8c2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	3108      	adds	r1, #8
 800a8c8:	6020      	str	r0, [r4, #0]
 800a8ca:	2d10      	cmp	r5, #16
 800a8cc:	dc07      	bgt.n	800a8de <_svfprintf_r+0x13c2>
 800a8ce:	6065      	str	r5, [r4, #4]
 800a8d0:	000c      	movs	r4, r1
 800a8d2:	18ad      	adds	r5, r5, r2
 800a8d4:	952e      	str	r5, [sp, #184]	; 0xb8
 800a8d6:	932d      	str	r3, [sp, #180]	; 0xb4
 800a8d8:	2b07      	cmp	r3, #7
 800a8da:	ddd6      	ble.n	800a88a <_svfprintf_r+0x136e>
 800a8dc:	e7cd      	b.n	800a87a <_svfprintf_r+0x135e>
 800a8de:	3210      	adds	r2, #16
 800a8e0:	6067      	str	r7, [r4, #4]
 800a8e2:	922e      	str	r2, [sp, #184]	; 0xb8
 800a8e4:	932d      	str	r3, [sp, #180]	; 0xb4
 800a8e6:	2b07      	cmp	r3, #7
 800a8e8:	dd07      	ble.n	800a8fa <_svfprintf_r+0x13de>
 800a8ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a8ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a8ee:	aa2c      	add	r2, sp, #176	; 0xb0
 800a8f0:	f001 fe0a 	bl	800c508 <__ssprint_r>
 800a8f4:	2800      	cmp	r0, #0
 800a8f6:	d126      	bne.n	800a946 <_svfprintf_r+0x142a>
 800a8f8:	a92f      	add	r1, sp, #188	; 0xbc
 800a8fa:	000c      	movs	r4, r1
 800a8fc:	3d10      	subs	r5, #16
 800a8fe:	e7dc      	b.n	800a8ba <_svfprintf_r+0x139e>
 800a900:	9808      	ldr	r0, [sp, #32]
 800a902:	912e      	str	r1, [sp, #184]	; 0xb8
 800a904:	c705      	stmia	r7!, {r0, r2}
 800a906:	932d      	str	r3, [sp, #180]	; 0xb4
 800a908:	e7e6      	b.n	800a8d8 <_svfprintf_r+0x13bc>
 800a90a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a90c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a90e:	2510      	movs	r5, #16
 800a910:	1a9c      	subs	r4, r3, r2
 800a912:	2c00      	cmp	r4, #0
 800a914:	dc00      	bgt.n	800a918 <_svfprintf_r+0x13fc>
 800a916:	e549      	b.n	800a3ac <_svfprintf_r+0xe90>
 800a918:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a91a:	4941      	ldr	r1, [pc, #260]	; (800aa20 <_svfprintf_r+0x1504>)
 800a91c:	9308      	str	r3, [sp, #32]
 800a91e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a920:	3301      	adds	r3, #1
 800a922:	6039      	str	r1, [r7, #0]
 800a924:	2c10      	cmp	r4, #16
 800a926:	dc19      	bgt.n	800a95c <_svfprintf_r+0x1440>
 800a928:	607c      	str	r4, [r7, #4]
 800a92a:	1914      	adds	r4, r2, r4
 800a92c:	942e      	str	r4, [sp, #184]	; 0xb8
 800a92e:	932d      	str	r3, [sp, #180]	; 0xb4
 800a930:	2b07      	cmp	r3, #7
 800a932:	dc00      	bgt.n	800a936 <_svfprintf_r+0x141a>
 800a934:	e53a      	b.n	800a3ac <_svfprintf_r+0xe90>
 800a936:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a938:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a93a:	aa2c      	add	r2, sp, #176	; 0xb0
 800a93c:	f001 fde4 	bl	800c508 <__ssprint_r>
 800a940:	2800      	cmp	r0, #0
 800a942:	d100      	bne.n	800a946 <_svfprintf_r+0x142a>
 800a944:	e532      	b.n	800a3ac <_svfprintf_r+0xe90>
 800a946:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d101      	bne.n	800a950 <_svfprintf_r+0x1434>
 800a94c:	f7ff f8ec 	bl	8009b28 <_svfprintf_r+0x60c>
 800a950:	0019      	movs	r1, r3
 800a952:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a954:	f000 ff54 	bl	800b800 <_free_r>
 800a958:	f7ff f8e6 	bl	8009b28 <_svfprintf_r+0x60c>
 800a95c:	3210      	adds	r2, #16
 800a95e:	607d      	str	r5, [r7, #4]
 800a960:	922e      	str	r2, [sp, #184]	; 0xb8
 800a962:	932d      	str	r3, [sp, #180]	; 0xb4
 800a964:	3708      	adds	r7, #8
 800a966:	2b07      	cmp	r3, #7
 800a968:	dd07      	ble.n	800a97a <_svfprintf_r+0x145e>
 800a96a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a96c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a96e:	aa2c      	add	r2, sp, #176	; 0xb0
 800a970:	f001 fdca 	bl	800c508 <__ssprint_r>
 800a974:	2800      	cmp	r0, #0
 800a976:	d1e6      	bne.n	800a946 <_svfprintf_r+0x142a>
 800a978:	af2f      	add	r7, sp, #188	; 0xbc
 800a97a:	3c10      	subs	r4, #16
 800a97c:	e7cc      	b.n	800a918 <_svfprintf_r+0x13fc>
 800a97e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a980:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a982:	f000 ff3d 	bl	800b800 <_free_r>
 800a986:	e52b      	b.n	800a3e0 <_svfprintf_r+0xec4>
 800a988:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a98a:	9306      	str	r3, [sp, #24]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d101      	bne.n	800a994 <_svfprintf_r+0x1478>
 800a990:	f7ff f8ca 	bl	8009b28 <_svfprintf_r+0x60c>
 800a994:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a996:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a998:	aa2c      	add	r2, sp, #176	; 0xb0
 800a99a:	f001 fdb5 	bl	800c508 <__ssprint_r>
 800a99e:	f7ff f8c3 	bl	8009b28 <_svfprintf_r+0x60c>
 800a9a2:	0035      	movs	r5, r6
 800a9a4:	2a00      	cmp	r2, #0
 800a9a6:	d101      	bne.n	800a9ac <_svfprintf_r+0x1490>
 800a9a8:	f7ff f832 	bl	8009a10 <_svfprintf_r+0x4f4>
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d101      	bne.n	800a9b4 <_svfprintf_r+0x1498>
 800a9b0:	f7ff fbdf 	bl	800a172 <_svfprintf_r+0xc56>
 800a9b4:	2b02      	cmp	r3, #2
 800a9b6:	d100      	bne.n	800a9ba <_svfprintf_r+0x149e>
 800a9b8:	e430      	b.n	800a21c <_svfprintf_r+0xd00>
 800a9ba:	2607      	movs	r6, #7
 800a9bc:	ab58      	add	r3, sp, #352	; 0x160
 800a9be:	9308      	str	r3, [sp, #32]
 800a9c0:	9908      	ldr	r1, [sp, #32]
 800a9c2:	000b      	movs	r3, r1
 800a9c4:	3b01      	subs	r3, #1
 800a9c6:	9308      	str	r3, [sp, #32]
 800a9c8:	9b06      	ldr	r3, [sp, #24]
 800a9ca:	9a08      	ldr	r2, [sp, #32]
 800a9cc:	4033      	ands	r3, r6
 800a9ce:	3330      	adds	r3, #48	; 0x30
 800a9d0:	7013      	strb	r3, [r2, #0]
 800a9d2:	9a07      	ldr	r2, [sp, #28]
 800a9d4:	0754      	lsls	r4, r2, #29
 800a9d6:	9a06      	ldr	r2, [sp, #24]
 800a9d8:	08d0      	lsrs	r0, r2, #3
 800a9da:	9a07      	ldr	r2, [sp, #28]
 800a9dc:	4304      	orrs	r4, r0
 800a9de:	08d2      	lsrs	r2, r2, #3
 800a9e0:	9207      	str	r2, [sp, #28]
 800a9e2:	0022      	movs	r2, r4
 800a9e4:	9807      	ldr	r0, [sp, #28]
 800a9e6:	9406      	str	r4, [sp, #24]
 800a9e8:	4302      	orrs	r2, r0
 800a9ea:	d1e9      	bne.n	800a9c0 <_svfprintf_r+0x14a4>
 800a9ec:	07ea      	lsls	r2, r5, #31
 800a9ee:	d507      	bpl.n	800aa00 <_svfprintf_r+0x14e4>
 800a9f0:	2b30      	cmp	r3, #48	; 0x30
 800a9f2:	d005      	beq.n	800aa00 <_svfprintf_r+0x14e4>
 800a9f4:	2330      	movs	r3, #48	; 0x30
 800a9f6:	9808      	ldr	r0, [sp, #32]
 800a9f8:	3801      	subs	r0, #1
 800a9fa:	7003      	strb	r3, [r0, #0]
 800a9fc:	1e8b      	subs	r3, r1, #2
 800a9fe:	9308      	str	r3, [sp, #32]
 800aa00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa02:	9a08      	ldr	r2, [sp, #32]
 800aa04:	9319      	str	r3, [sp, #100]	; 0x64
 800aa06:	ab58      	add	r3, sp, #352	; 0x160
 800aa08:	1a9b      	subs	r3, r3, r2
 800aa0a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	002e      	movs	r6, r5
 800aa10:	930c      	str	r3, [sp, #48]	; 0x30
 800aa12:	001d      	movs	r5, r3
 800aa14:	9310      	str	r3, [sp, #64]	; 0x40
 800aa16:	9311      	str	r3, [sp, #68]	; 0x44
 800aa18:	f7fe feee 	bl	80097f8 <_svfprintf_r+0x2dc>
 800aa1c:	0800e934 	.word	0x0800e934
 800aa20:	0800e924 	.word	0x0800e924

0800aa24 <register_fini>:
 800aa24:	4b03      	ldr	r3, [pc, #12]	; (800aa34 <register_fini+0x10>)
 800aa26:	b510      	push	{r4, lr}
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d002      	beq.n	800aa32 <register_fini+0xe>
 800aa2c:	4802      	ldr	r0, [pc, #8]	; (800aa38 <register_fini+0x14>)
 800aa2e:	f000 f805 	bl	800aa3c <atexit>
 800aa32:	bd10      	pop	{r4, pc}
 800aa34:	00000000 	.word	0x00000000
 800aa38:	0800b731 	.word	0x0800b731

0800aa3c <atexit>:
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	b510      	push	{r4, lr}
 800aa40:	0001      	movs	r1, r0
 800aa42:	001a      	movs	r2, r3
 800aa44:	0018      	movs	r0, r3
 800aa46:	f001 fdeb 	bl	800c620 <__register_exitproc>
 800aa4a:	bd10      	pop	{r4, pc}

0800aa4c <quorem>:
 800aa4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa4e:	0006      	movs	r6, r0
 800aa50:	690d      	ldr	r5, [r1, #16]
 800aa52:	6933      	ldr	r3, [r6, #16]
 800aa54:	b087      	sub	sp, #28
 800aa56:	2000      	movs	r0, #0
 800aa58:	9102      	str	r1, [sp, #8]
 800aa5a:	42ab      	cmp	r3, r5
 800aa5c:	db6b      	blt.n	800ab36 <quorem+0xea>
 800aa5e:	000b      	movs	r3, r1
 800aa60:	3d01      	subs	r5, #1
 800aa62:	00ac      	lsls	r4, r5, #2
 800aa64:	3314      	adds	r3, #20
 800aa66:	9305      	str	r3, [sp, #20]
 800aa68:	191b      	adds	r3, r3, r4
 800aa6a:	9303      	str	r3, [sp, #12]
 800aa6c:	0033      	movs	r3, r6
 800aa6e:	3314      	adds	r3, #20
 800aa70:	9301      	str	r3, [sp, #4]
 800aa72:	191c      	adds	r4, r3, r4
 800aa74:	9b03      	ldr	r3, [sp, #12]
 800aa76:	6827      	ldr	r7, [r4, #0]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	0038      	movs	r0, r7
 800aa7c:	9300      	str	r3, [sp, #0]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	0019      	movs	r1, r3
 800aa82:	9304      	str	r3, [sp, #16]
 800aa84:	f7f5 fb5c 	bl	8000140 <__udivsi3>
 800aa88:	9b04      	ldr	r3, [sp, #16]
 800aa8a:	9000      	str	r0, [sp, #0]
 800aa8c:	429f      	cmp	r7, r3
 800aa8e:	d329      	bcc.n	800aae4 <quorem+0x98>
 800aa90:	2300      	movs	r3, #0
 800aa92:	469c      	mov	ip, r3
 800aa94:	9801      	ldr	r0, [sp, #4]
 800aa96:	9f05      	ldr	r7, [sp, #20]
 800aa98:	9304      	str	r3, [sp, #16]
 800aa9a:	cf08      	ldmia	r7!, {r3}
 800aa9c:	9a00      	ldr	r2, [sp, #0]
 800aa9e:	b299      	uxth	r1, r3
 800aaa0:	4351      	muls	r1, r2
 800aaa2:	0c1b      	lsrs	r3, r3, #16
 800aaa4:	4353      	muls	r3, r2
 800aaa6:	4461      	add	r1, ip
 800aaa8:	0c0a      	lsrs	r2, r1, #16
 800aaaa:	189b      	adds	r3, r3, r2
 800aaac:	0c1a      	lsrs	r2, r3, #16
 800aaae:	9305      	str	r3, [sp, #20]
 800aab0:	6803      	ldr	r3, [r0, #0]
 800aab2:	4694      	mov	ip, r2
 800aab4:	b29a      	uxth	r2, r3
 800aab6:	9b04      	ldr	r3, [sp, #16]
 800aab8:	b289      	uxth	r1, r1
 800aaba:	18d2      	adds	r2, r2, r3
 800aabc:	6803      	ldr	r3, [r0, #0]
 800aabe:	1a52      	subs	r2, r2, r1
 800aac0:	0c19      	lsrs	r1, r3, #16
 800aac2:	466b      	mov	r3, sp
 800aac4:	8a9b      	ldrh	r3, [r3, #20]
 800aac6:	1acb      	subs	r3, r1, r3
 800aac8:	1411      	asrs	r1, r2, #16
 800aaca:	185b      	adds	r3, r3, r1
 800aacc:	1419      	asrs	r1, r3, #16
 800aace:	b292      	uxth	r2, r2
 800aad0:	041b      	lsls	r3, r3, #16
 800aad2:	431a      	orrs	r2, r3
 800aad4:	9b03      	ldr	r3, [sp, #12]
 800aad6:	9104      	str	r1, [sp, #16]
 800aad8:	c004      	stmia	r0!, {r2}
 800aada:	42bb      	cmp	r3, r7
 800aadc:	d2dd      	bcs.n	800aa9a <quorem+0x4e>
 800aade:	6823      	ldr	r3, [r4, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d02e      	beq.n	800ab42 <quorem+0xf6>
 800aae4:	0030      	movs	r0, r6
 800aae6:	9902      	ldr	r1, [sp, #8]
 800aae8:	f001 fb9e 	bl	800c228 <__mcmp>
 800aaec:	2800      	cmp	r0, #0
 800aaee:	db21      	blt.n	800ab34 <quorem+0xe8>
 800aaf0:	0030      	movs	r0, r6
 800aaf2:	2400      	movs	r4, #0
 800aaf4:	9b00      	ldr	r3, [sp, #0]
 800aaf6:	9902      	ldr	r1, [sp, #8]
 800aaf8:	3301      	adds	r3, #1
 800aafa:	9300      	str	r3, [sp, #0]
 800aafc:	3014      	adds	r0, #20
 800aafe:	3114      	adds	r1, #20
 800ab00:	6802      	ldr	r2, [r0, #0]
 800ab02:	c908      	ldmia	r1!, {r3}
 800ab04:	b292      	uxth	r2, r2
 800ab06:	1914      	adds	r4, r2, r4
 800ab08:	b29a      	uxth	r2, r3
 800ab0a:	1aa2      	subs	r2, r4, r2
 800ab0c:	6804      	ldr	r4, [r0, #0]
 800ab0e:	0c1b      	lsrs	r3, r3, #16
 800ab10:	0c24      	lsrs	r4, r4, #16
 800ab12:	1ae3      	subs	r3, r4, r3
 800ab14:	1414      	asrs	r4, r2, #16
 800ab16:	191b      	adds	r3, r3, r4
 800ab18:	141c      	asrs	r4, r3, #16
 800ab1a:	b292      	uxth	r2, r2
 800ab1c:	041b      	lsls	r3, r3, #16
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	c008      	stmia	r0!, {r3}
 800ab22:	9b03      	ldr	r3, [sp, #12]
 800ab24:	428b      	cmp	r3, r1
 800ab26:	d2eb      	bcs.n	800ab00 <quorem+0xb4>
 800ab28:	9a01      	ldr	r2, [sp, #4]
 800ab2a:	00ab      	lsls	r3, r5, #2
 800ab2c:	18d3      	adds	r3, r2, r3
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	2a00      	cmp	r2, #0
 800ab32:	d010      	beq.n	800ab56 <quorem+0x10a>
 800ab34:	9800      	ldr	r0, [sp, #0]
 800ab36:	b007      	add	sp, #28
 800ab38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab3a:	6823      	ldr	r3, [r4, #0]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d104      	bne.n	800ab4a <quorem+0xfe>
 800ab40:	3d01      	subs	r5, #1
 800ab42:	9b01      	ldr	r3, [sp, #4]
 800ab44:	3c04      	subs	r4, #4
 800ab46:	42a3      	cmp	r3, r4
 800ab48:	d3f7      	bcc.n	800ab3a <quorem+0xee>
 800ab4a:	6135      	str	r5, [r6, #16]
 800ab4c:	e7ca      	b.n	800aae4 <quorem+0x98>
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	2a00      	cmp	r2, #0
 800ab52:	d104      	bne.n	800ab5e <quorem+0x112>
 800ab54:	3d01      	subs	r5, #1
 800ab56:	9a01      	ldr	r2, [sp, #4]
 800ab58:	3b04      	subs	r3, #4
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d3f7      	bcc.n	800ab4e <quorem+0x102>
 800ab5e:	6135      	str	r5, [r6, #16]
 800ab60:	e7e8      	b.n	800ab34 <quorem+0xe8>
	...

0800ab64 <_dtoa_r>:
 800ab64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab66:	0014      	movs	r4, r2
 800ab68:	001d      	movs	r5, r3
 800ab6a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800ab6c:	b09d      	sub	sp, #116	; 0x74
 800ab6e:	940a      	str	r4, [sp, #40]	; 0x28
 800ab70:	950b      	str	r5, [sp, #44]	; 0x2c
 800ab72:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800ab74:	9003      	str	r0, [sp, #12]
 800ab76:	2900      	cmp	r1, #0
 800ab78:	d009      	beq.n	800ab8e <_dtoa_r+0x2a>
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ab7e:	4093      	lsls	r3, r2
 800ab80:	604a      	str	r2, [r1, #4]
 800ab82:	608b      	str	r3, [r1, #8]
 800ab84:	f001 f942 	bl	800be0c <_Bfree>
 800ab88:	2300      	movs	r3, #0
 800ab8a:	9a03      	ldr	r2, [sp, #12]
 800ab8c:	6413      	str	r3, [r2, #64]	; 0x40
 800ab8e:	2d00      	cmp	r5, #0
 800ab90:	da1f      	bge.n	800abd2 <_dtoa_r+0x6e>
 800ab92:	2301      	movs	r3, #1
 800ab94:	6033      	str	r3, [r6, #0]
 800ab96:	006b      	lsls	r3, r5, #1
 800ab98:	085b      	lsrs	r3, r3, #1
 800ab9a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab9c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800ab9e:	4bb9      	ldr	r3, [pc, #740]	; (800ae84 <_dtoa_r+0x320>)
 800aba0:	003a      	movs	r2, r7
 800aba2:	9318      	str	r3, [sp, #96]	; 0x60
 800aba4:	401a      	ands	r2, r3
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d116      	bne.n	800abd8 <_dtoa_r+0x74>
 800abaa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800abac:	4bb6      	ldr	r3, [pc, #728]	; (800ae88 <_dtoa_r+0x324>)
 800abae:	6013      	str	r3, [r2, #0]
 800abb0:	033a      	lsls	r2, r7, #12
 800abb2:	0b12      	lsrs	r2, r2, #12
 800abb4:	4314      	orrs	r4, r2
 800abb6:	d101      	bne.n	800abbc <_dtoa_r+0x58>
 800abb8:	f000 fda4 	bl	800b704 <_dtoa_r+0xba0>
 800abbc:	48b3      	ldr	r0, [pc, #716]	; (800ae8c <_dtoa_r+0x328>)
 800abbe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800abc0:	9005      	str	r0, [sp, #20]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d002      	beq.n	800abcc <_dtoa_r+0x68>
 800abc6:	4bb2      	ldr	r3, [pc, #712]	; (800ae90 <_dtoa_r+0x32c>)
 800abc8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800abca:	6013      	str	r3, [r2, #0]
 800abcc:	9805      	ldr	r0, [sp, #20]
 800abce:	b01d      	add	sp, #116	; 0x74
 800abd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abd2:	2300      	movs	r3, #0
 800abd4:	6033      	str	r3, [r6, #0]
 800abd6:	e7e1      	b.n	800ab9c <_dtoa_r+0x38>
 800abd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abdc:	9210      	str	r2, [sp, #64]	; 0x40
 800abde:	9311      	str	r3, [sp, #68]	; 0x44
 800abe0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800abe2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800abe4:	2200      	movs	r2, #0
 800abe6:	2300      	movs	r3, #0
 800abe8:	f7f5 fc30 	bl	800044c <__aeabi_dcmpeq>
 800abec:	1e06      	subs	r6, r0, #0
 800abee:	d00b      	beq.n	800ac08 <_dtoa_r+0xa4>
 800abf0:	2301      	movs	r3, #1
 800abf2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800abf4:	6013      	str	r3, [r2, #0]
 800abf6:	4ba7      	ldr	r3, [pc, #668]	; (800ae94 <_dtoa_r+0x330>)
 800abf8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800abfa:	9305      	str	r3, [sp, #20]
 800abfc:	2a00      	cmp	r2, #0
 800abfe:	d0e5      	beq.n	800abcc <_dtoa_r+0x68>
 800ac00:	4aa5      	ldr	r2, [pc, #660]	; (800ae98 <_dtoa_r+0x334>)
 800ac02:	9926      	ldr	r1, [sp, #152]	; 0x98
 800ac04:	600a      	str	r2, [r1, #0]
 800ac06:	e7e1      	b.n	800abcc <_dtoa_r+0x68>
 800ac08:	ab1a      	add	r3, sp, #104	; 0x68
 800ac0a:	9301      	str	r3, [sp, #4]
 800ac0c:	ab1b      	add	r3, sp, #108	; 0x6c
 800ac0e:	9300      	str	r3, [sp, #0]
 800ac10:	9803      	ldr	r0, [sp, #12]
 800ac12:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ac14:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac16:	f001 fbbb 	bl	800c390 <__d2b>
 800ac1a:	007b      	lsls	r3, r7, #1
 800ac1c:	9004      	str	r0, [sp, #16]
 800ac1e:	0d5b      	lsrs	r3, r3, #21
 800ac20:	d100      	bne.n	800ac24 <_dtoa_r+0xc0>
 800ac22:	e07c      	b.n	800ad1e <_dtoa_r+0x1ba>
 800ac24:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ac26:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ac28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ac2a:	4c9c      	ldr	r4, [pc, #624]	; (800ae9c <_dtoa_r+0x338>)
 800ac2c:	0312      	lsls	r2, r2, #12
 800ac2e:	0b12      	lsrs	r2, r2, #12
 800ac30:	4314      	orrs	r4, r2
 800ac32:	0021      	movs	r1, r4
 800ac34:	4a9a      	ldr	r2, [pc, #616]	; (800aea0 <_dtoa_r+0x33c>)
 800ac36:	9616      	str	r6, [sp, #88]	; 0x58
 800ac38:	189f      	adds	r7, r3, r2
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	4b99      	ldr	r3, [pc, #612]	; (800aea4 <_dtoa_r+0x340>)
 800ac3e:	f7f7 fbd5 	bl	80023ec <__aeabi_dsub>
 800ac42:	4a99      	ldr	r2, [pc, #612]	; (800aea8 <_dtoa_r+0x344>)
 800ac44:	4b99      	ldr	r3, [pc, #612]	; (800aeac <_dtoa_r+0x348>)
 800ac46:	f7f7 f965 	bl	8001f14 <__aeabi_dmul>
 800ac4a:	4a99      	ldr	r2, [pc, #612]	; (800aeb0 <_dtoa_r+0x34c>)
 800ac4c:	4b99      	ldr	r3, [pc, #612]	; (800aeb4 <_dtoa_r+0x350>)
 800ac4e:	f7f6 f9f1 	bl	8001034 <__aeabi_dadd>
 800ac52:	0004      	movs	r4, r0
 800ac54:	0038      	movs	r0, r7
 800ac56:	000d      	movs	r5, r1
 800ac58:	f7f7 ffae 	bl	8002bb8 <__aeabi_i2d>
 800ac5c:	4a96      	ldr	r2, [pc, #600]	; (800aeb8 <_dtoa_r+0x354>)
 800ac5e:	4b97      	ldr	r3, [pc, #604]	; (800aebc <_dtoa_r+0x358>)
 800ac60:	f7f7 f958 	bl	8001f14 <__aeabi_dmul>
 800ac64:	0002      	movs	r2, r0
 800ac66:	000b      	movs	r3, r1
 800ac68:	0020      	movs	r0, r4
 800ac6a:	0029      	movs	r1, r5
 800ac6c:	f7f6 f9e2 	bl	8001034 <__aeabi_dadd>
 800ac70:	0004      	movs	r4, r0
 800ac72:	000d      	movs	r5, r1
 800ac74:	f7f7 ff6a 	bl	8002b4c <__aeabi_d2iz>
 800ac78:	2200      	movs	r2, #0
 800ac7a:	9002      	str	r0, [sp, #8]
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	0020      	movs	r0, r4
 800ac80:	0029      	movs	r1, r5
 800ac82:	f7f5 fbe9 	bl	8000458 <__aeabi_dcmplt>
 800ac86:	2800      	cmp	r0, #0
 800ac88:	d00b      	beq.n	800aca2 <_dtoa_r+0x13e>
 800ac8a:	9802      	ldr	r0, [sp, #8]
 800ac8c:	f7f7 ff94 	bl	8002bb8 <__aeabi_i2d>
 800ac90:	002b      	movs	r3, r5
 800ac92:	0022      	movs	r2, r4
 800ac94:	f7f5 fbda 	bl	800044c <__aeabi_dcmpeq>
 800ac98:	4243      	negs	r3, r0
 800ac9a:	4158      	adcs	r0, r3
 800ac9c:	9b02      	ldr	r3, [sp, #8]
 800ac9e:	1a1b      	subs	r3, r3, r0
 800aca0:	9302      	str	r3, [sp, #8]
 800aca2:	2301      	movs	r3, #1
 800aca4:	9314      	str	r3, [sp, #80]	; 0x50
 800aca6:	9b02      	ldr	r3, [sp, #8]
 800aca8:	2b16      	cmp	r3, #22
 800acaa:	d80f      	bhi.n	800accc <_dtoa_r+0x168>
 800acac:	9810      	ldr	r0, [sp, #64]	; 0x40
 800acae:	9911      	ldr	r1, [sp, #68]	; 0x44
 800acb0:	00da      	lsls	r2, r3, #3
 800acb2:	4b83      	ldr	r3, [pc, #524]	; (800aec0 <_dtoa_r+0x35c>)
 800acb4:	189b      	adds	r3, r3, r2
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	f7f5 fbcd 	bl	8000458 <__aeabi_dcmplt>
 800acbe:	2800      	cmp	r0, #0
 800acc0:	d049      	beq.n	800ad56 <_dtoa_r+0x1f2>
 800acc2:	9b02      	ldr	r3, [sp, #8]
 800acc4:	3b01      	subs	r3, #1
 800acc6:	9302      	str	r3, [sp, #8]
 800acc8:	2300      	movs	r3, #0
 800acca:	9314      	str	r3, [sp, #80]	; 0x50
 800accc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800acce:	1bdf      	subs	r7, r3, r7
 800acd0:	2300      	movs	r3, #0
 800acd2:	9309      	str	r3, [sp, #36]	; 0x24
 800acd4:	003b      	movs	r3, r7
 800acd6:	3b01      	subs	r3, #1
 800acd8:	930d      	str	r3, [sp, #52]	; 0x34
 800acda:	d504      	bpl.n	800ace6 <_dtoa_r+0x182>
 800acdc:	2301      	movs	r3, #1
 800acde:	1bdb      	subs	r3, r3, r7
 800ace0:	9309      	str	r3, [sp, #36]	; 0x24
 800ace2:	2300      	movs	r3, #0
 800ace4:	930d      	str	r3, [sp, #52]	; 0x34
 800ace6:	9b02      	ldr	r3, [sp, #8]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	db36      	blt.n	800ad5a <_dtoa_r+0x1f6>
 800acec:	9a02      	ldr	r2, [sp, #8]
 800acee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acf0:	4694      	mov	ip, r2
 800acf2:	4463      	add	r3, ip
 800acf4:	930d      	str	r3, [sp, #52]	; 0x34
 800acf6:	2300      	movs	r3, #0
 800acf8:	9213      	str	r2, [sp, #76]	; 0x4c
 800acfa:	930e      	str	r3, [sp, #56]	; 0x38
 800acfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800acfe:	2401      	movs	r4, #1
 800ad00:	2b09      	cmp	r3, #9
 800ad02:	d865      	bhi.n	800add0 <_dtoa_r+0x26c>
 800ad04:	2b05      	cmp	r3, #5
 800ad06:	dd02      	ble.n	800ad0e <_dtoa_r+0x1aa>
 800ad08:	2400      	movs	r4, #0
 800ad0a:	3b04      	subs	r3, #4
 800ad0c:	9322      	str	r3, [sp, #136]	; 0x88
 800ad0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad10:	1e98      	subs	r0, r3, #2
 800ad12:	2803      	cmp	r0, #3
 800ad14:	d865      	bhi.n	800ade2 <_dtoa_r+0x27e>
 800ad16:	f7f5 f9ff 	bl	8000118 <__gnu_thumb1_case_uqi>
 800ad1a:	3629      	.short	0x3629
 800ad1c:	5934      	.short	0x5934
 800ad1e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ad20:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ad22:	189e      	adds	r6, r3, r2
 800ad24:	4b67      	ldr	r3, [pc, #412]	; (800aec4 <_dtoa_r+0x360>)
 800ad26:	18f2      	adds	r2, r6, r3
 800ad28:	2a20      	cmp	r2, #32
 800ad2a:	dd0f      	ble.n	800ad4c <_dtoa_r+0x1e8>
 800ad2c:	2340      	movs	r3, #64	; 0x40
 800ad2e:	0038      	movs	r0, r7
 800ad30:	1a9b      	subs	r3, r3, r2
 800ad32:	4098      	lsls	r0, r3
 800ad34:	4b64      	ldr	r3, [pc, #400]	; (800aec8 <_dtoa_r+0x364>)
 800ad36:	18f3      	adds	r3, r6, r3
 800ad38:	40dc      	lsrs	r4, r3
 800ad3a:	4320      	orrs	r0, r4
 800ad3c:	f7f7 ff6c 	bl	8002c18 <__aeabi_ui2d>
 800ad40:	2301      	movs	r3, #1
 800ad42:	4c62      	ldr	r4, [pc, #392]	; (800aecc <_dtoa_r+0x368>)
 800ad44:	1e77      	subs	r7, r6, #1
 800ad46:	1909      	adds	r1, r1, r4
 800ad48:	9316      	str	r3, [sp, #88]	; 0x58
 800ad4a:	e776      	b.n	800ac3a <_dtoa_r+0xd6>
 800ad4c:	2320      	movs	r3, #32
 800ad4e:	0020      	movs	r0, r4
 800ad50:	1a9b      	subs	r3, r3, r2
 800ad52:	4098      	lsls	r0, r3
 800ad54:	e7f2      	b.n	800ad3c <_dtoa_r+0x1d8>
 800ad56:	9014      	str	r0, [sp, #80]	; 0x50
 800ad58:	e7b8      	b.n	800accc <_dtoa_r+0x168>
 800ad5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad5c:	9a02      	ldr	r2, [sp, #8]
 800ad5e:	1a9b      	subs	r3, r3, r2
 800ad60:	9309      	str	r3, [sp, #36]	; 0x24
 800ad62:	4253      	negs	r3, r2
 800ad64:	930e      	str	r3, [sp, #56]	; 0x38
 800ad66:	2300      	movs	r3, #0
 800ad68:	9313      	str	r3, [sp, #76]	; 0x4c
 800ad6a:	e7c7      	b.n	800acfc <_dtoa_r+0x198>
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	9312      	str	r3, [sp, #72]	; 0x48
 800ad70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	dc39      	bgt.n	800adea <_dtoa_r+0x286>
 800ad76:	2301      	movs	r3, #1
 800ad78:	001a      	movs	r2, r3
 800ad7a:	930c      	str	r3, [sp, #48]	; 0x30
 800ad7c:	9308      	str	r3, [sp, #32]
 800ad7e:	9223      	str	r2, [sp, #140]	; 0x8c
 800ad80:	e00d      	b.n	800ad9e <_dtoa_r+0x23a>
 800ad82:	2301      	movs	r3, #1
 800ad84:	e7f3      	b.n	800ad6e <_dtoa_r+0x20a>
 800ad86:	2300      	movs	r3, #0
 800ad88:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800ad8a:	9312      	str	r3, [sp, #72]	; 0x48
 800ad8c:	4694      	mov	ip, r2
 800ad8e:	9b02      	ldr	r3, [sp, #8]
 800ad90:	4463      	add	r3, ip
 800ad92:	930c      	str	r3, [sp, #48]	; 0x30
 800ad94:	3301      	adds	r3, #1
 800ad96:	9308      	str	r3, [sp, #32]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	dc00      	bgt.n	800ad9e <_dtoa_r+0x23a>
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	2200      	movs	r2, #0
 800ada0:	9903      	ldr	r1, [sp, #12]
 800ada2:	644a      	str	r2, [r1, #68]	; 0x44
 800ada4:	3204      	adds	r2, #4
 800ada6:	0010      	movs	r0, r2
 800ada8:	9903      	ldr	r1, [sp, #12]
 800adaa:	3014      	adds	r0, #20
 800adac:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800adae:	4298      	cmp	r0, r3
 800adb0:	d91f      	bls.n	800adf2 <_dtoa_r+0x28e>
 800adb2:	9803      	ldr	r0, [sp, #12]
 800adb4:	f001 f802 	bl	800bdbc <_Balloc>
 800adb8:	9005      	str	r0, [sp, #20]
 800adba:	2800      	cmp	r0, #0
 800adbc:	d11e      	bne.n	800adfc <_dtoa_r+0x298>
 800adbe:	21d5      	movs	r1, #213	; 0xd5
 800adc0:	0002      	movs	r2, r0
 800adc2:	4b43      	ldr	r3, [pc, #268]	; (800aed0 <_dtoa_r+0x36c>)
 800adc4:	0049      	lsls	r1, r1, #1
 800adc6:	4843      	ldr	r0, [pc, #268]	; (800aed4 <_dtoa_r+0x370>)
 800adc8:	f001 fc6c 	bl	800c6a4 <__assert_func>
 800adcc:	2301      	movs	r3, #1
 800adce:	e7db      	b.n	800ad88 <_dtoa_r+0x224>
 800add0:	2300      	movs	r3, #0
 800add2:	9412      	str	r4, [sp, #72]	; 0x48
 800add4:	9322      	str	r3, [sp, #136]	; 0x88
 800add6:	3b01      	subs	r3, #1
 800add8:	930c      	str	r3, [sp, #48]	; 0x30
 800adda:	9308      	str	r3, [sp, #32]
 800addc:	2200      	movs	r2, #0
 800adde:	3313      	adds	r3, #19
 800ade0:	e7cd      	b.n	800ad7e <_dtoa_r+0x21a>
 800ade2:	2301      	movs	r3, #1
 800ade4:	9312      	str	r3, [sp, #72]	; 0x48
 800ade6:	3b02      	subs	r3, #2
 800ade8:	e7f6      	b.n	800add8 <_dtoa_r+0x274>
 800adea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800adec:	930c      	str	r3, [sp, #48]	; 0x30
 800adee:	9308      	str	r3, [sp, #32]
 800adf0:	e7d5      	b.n	800ad9e <_dtoa_r+0x23a>
 800adf2:	9803      	ldr	r0, [sp, #12]
 800adf4:	3101      	adds	r1, #1
 800adf6:	6441      	str	r1, [r0, #68]	; 0x44
 800adf8:	0052      	lsls	r2, r2, #1
 800adfa:	e7d4      	b.n	800ada6 <_dtoa_r+0x242>
 800adfc:	9b03      	ldr	r3, [sp, #12]
 800adfe:	9a05      	ldr	r2, [sp, #20]
 800ae00:	641a      	str	r2, [r3, #64]	; 0x40
 800ae02:	9b08      	ldr	r3, [sp, #32]
 800ae04:	2b0e      	cmp	r3, #14
 800ae06:	d900      	bls.n	800ae0a <_dtoa_r+0x2a6>
 800ae08:	e0df      	b.n	800afca <_dtoa_r+0x466>
 800ae0a:	2c00      	cmp	r4, #0
 800ae0c:	d100      	bne.n	800ae10 <_dtoa_r+0x2ac>
 800ae0e:	e0dc      	b.n	800afca <_dtoa_r+0x466>
 800ae10:	9b02      	ldr	r3, [sp, #8]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	dd62      	ble.n	800aedc <_dtoa_r+0x378>
 800ae16:	001a      	movs	r2, r3
 800ae18:	210f      	movs	r1, #15
 800ae1a:	4b29      	ldr	r3, [pc, #164]	; (800aec0 <_dtoa_r+0x35c>)
 800ae1c:	400a      	ands	r2, r1
 800ae1e:	00d2      	lsls	r2, r2, #3
 800ae20:	189b      	adds	r3, r3, r2
 800ae22:	681d      	ldr	r5, [r3, #0]
 800ae24:	685e      	ldr	r6, [r3, #4]
 800ae26:	9b02      	ldr	r3, [sp, #8]
 800ae28:	2702      	movs	r7, #2
 800ae2a:	111c      	asrs	r4, r3, #4
 800ae2c:	05db      	lsls	r3, r3, #23
 800ae2e:	d50a      	bpl.n	800ae46 <_dtoa_r+0x2e2>
 800ae30:	4b29      	ldr	r3, [pc, #164]	; (800aed8 <_dtoa_r+0x374>)
 800ae32:	400c      	ands	r4, r1
 800ae34:	6a1a      	ldr	r2, [r3, #32]
 800ae36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae38:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ae3a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ae3c:	f7f6 fc64 	bl	8001708 <__aeabi_ddiv>
 800ae40:	900a      	str	r0, [sp, #40]	; 0x28
 800ae42:	910b      	str	r1, [sp, #44]	; 0x2c
 800ae44:	3701      	adds	r7, #1
 800ae46:	4b24      	ldr	r3, [pc, #144]	; (800aed8 <_dtoa_r+0x374>)
 800ae48:	9306      	str	r3, [sp, #24]
 800ae4a:	2c00      	cmp	r4, #0
 800ae4c:	d108      	bne.n	800ae60 <_dtoa_r+0x2fc>
 800ae4e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ae50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae52:	002a      	movs	r2, r5
 800ae54:	0033      	movs	r3, r6
 800ae56:	f7f6 fc57 	bl	8001708 <__aeabi_ddiv>
 800ae5a:	900a      	str	r0, [sp, #40]	; 0x28
 800ae5c:	910b      	str	r1, [sp, #44]	; 0x2c
 800ae5e:	e058      	b.n	800af12 <_dtoa_r+0x3ae>
 800ae60:	2301      	movs	r3, #1
 800ae62:	421c      	tst	r4, r3
 800ae64:	d009      	beq.n	800ae7a <_dtoa_r+0x316>
 800ae66:	18ff      	adds	r7, r7, r3
 800ae68:	9b06      	ldr	r3, [sp, #24]
 800ae6a:	0028      	movs	r0, r5
 800ae6c:	681a      	ldr	r2, [r3, #0]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	0031      	movs	r1, r6
 800ae72:	f7f7 f84f 	bl	8001f14 <__aeabi_dmul>
 800ae76:	0005      	movs	r5, r0
 800ae78:	000e      	movs	r6, r1
 800ae7a:	9b06      	ldr	r3, [sp, #24]
 800ae7c:	1064      	asrs	r4, r4, #1
 800ae7e:	3308      	adds	r3, #8
 800ae80:	e7e2      	b.n	800ae48 <_dtoa_r+0x2e4>
 800ae82:	46c0      	nop			; (mov r8, r8)
 800ae84:	7ff00000 	.word	0x7ff00000
 800ae88:	0000270f 	.word	0x0000270f
 800ae8c:	0800ea45 	.word	0x0800ea45
 800ae90:	0800ea48 	.word	0x0800ea48
 800ae94:	0800e922 	.word	0x0800e922
 800ae98:	0800e923 	.word	0x0800e923
 800ae9c:	3ff00000 	.word	0x3ff00000
 800aea0:	fffffc01 	.word	0xfffffc01
 800aea4:	3ff80000 	.word	0x3ff80000
 800aea8:	636f4361 	.word	0x636f4361
 800aeac:	3fd287a7 	.word	0x3fd287a7
 800aeb0:	8b60c8b3 	.word	0x8b60c8b3
 800aeb4:	3fc68a28 	.word	0x3fc68a28
 800aeb8:	509f79fb 	.word	0x509f79fb
 800aebc:	3fd34413 	.word	0x3fd34413
 800aec0:	0800eb50 	.word	0x0800eb50
 800aec4:	00000432 	.word	0x00000432
 800aec8:	00000412 	.word	0x00000412
 800aecc:	fe100000 	.word	0xfe100000
 800aed0:	0800ea52 	.word	0x0800ea52
 800aed4:	0800ea63 	.word	0x0800ea63
 800aed8:	0800eb28 	.word	0x0800eb28
 800aedc:	9b02      	ldr	r3, [sp, #8]
 800aede:	2702      	movs	r7, #2
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d016      	beq.n	800af12 <_dtoa_r+0x3ae>
 800aee4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800aee6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800aee8:	425c      	negs	r4, r3
 800aeea:	230f      	movs	r3, #15
 800aeec:	4ad4      	ldr	r2, [pc, #848]	; (800b240 <_dtoa_r+0x6dc>)
 800aeee:	4023      	ands	r3, r4
 800aef0:	00db      	lsls	r3, r3, #3
 800aef2:	18d3      	adds	r3, r2, r3
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	f7f7 f80c 	bl	8001f14 <__aeabi_dmul>
 800aefc:	2601      	movs	r6, #1
 800aefe:	2300      	movs	r3, #0
 800af00:	900a      	str	r0, [sp, #40]	; 0x28
 800af02:	910b      	str	r1, [sp, #44]	; 0x2c
 800af04:	4dcf      	ldr	r5, [pc, #828]	; (800b244 <_dtoa_r+0x6e0>)
 800af06:	1124      	asrs	r4, r4, #4
 800af08:	2c00      	cmp	r4, #0
 800af0a:	d000      	beq.n	800af0e <_dtoa_r+0x3aa>
 800af0c:	e08d      	b.n	800b02a <_dtoa_r+0x4c6>
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d1a3      	bne.n	800ae5a <_dtoa_r+0x2f6>
 800af12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af14:	2b00      	cmp	r3, #0
 800af16:	d100      	bne.n	800af1a <_dtoa_r+0x3b6>
 800af18:	e092      	b.n	800b040 <_dtoa_r+0x4dc>
 800af1a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800af1c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800af1e:	2200      	movs	r2, #0
 800af20:	0020      	movs	r0, r4
 800af22:	0029      	movs	r1, r5
 800af24:	4bc8      	ldr	r3, [pc, #800]	; (800b248 <_dtoa_r+0x6e4>)
 800af26:	f7f5 fa97 	bl	8000458 <__aeabi_dcmplt>
 800af2a:	2800      	cmp	r0, #0
 800af2c:	d100      	bne.n	800af30 <_dtoa_r+0x3cc>
 800af2e:	e087      	b.n	800b040 <_dtoa_r+0x4dc>
 800af30:	9b08      	ldr	r3, [sp, #32]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d100      	bne.n	800af38 <_dtoa_r+0x3d4>
 800af36:	e083      	b.n	800b040 <_dtoa_r+0x4dc>
 800af38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	dd41      	ble.n	800afc2 <_dtoa_r+0x45e>
 800af3e:	9b02      	ldr	r3, [sp, #8]
 800af40:	2200      	movs	r2, #0
 800af42:	3b01      	subs	r3, #1
 800af44:	930f      	str	r3, [sp, #60]	; 0x3c
 800af46:	0020      	movs	r0, r4
 800af48:	0029      	movs	r1, r5
 800af4a:	4bc0      	ldr	r3, [pc, #768]	; (800b24c <_dtoa_r+0x6e8>)
 800af4c:	f7f6 ffe2 	bl	8001f14 <__aeabi_dmul>
 800af50:	900a      	str	r0, [sp, #40]	; 0x28
 800af52:	910b      	str	r1, [sp, #44]	; 0x2c
 800af54:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800af56:	3701      	adds	r7, #1
 800af58:	0038      	movs	r0, r7
 800af5a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800af5c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800af5e:	f7f7 fe2b 	bl	8002bb8 <__aeabi_i2d>
 800af62:	0022      	movs	r2, r4
 800af64:	002b      	movs	r3, r5
 800af66:	f7f6 ffd5 	bl	8001f14 <__aeabi_dmul>
 800af6a:	2200      	movs	r2, #0
 800af6c:	4bb8      	ldr	r3, [pc, #736]	; (800b250 <_dtoa_r+0x6ec>)
 800af6e:	f7f6 f861 	bl	8001034 <__aeabi_dadd>
 800af72:	900a      	str	r0, [sp, #40]	; 0x28
 800af74:	910b      	str	r1, [sp, #44]	; 0x2c
 800af76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af7a:	9206      	str	r2, [sp, #24]
 800af7c:	9307      	str	r3, [sp, #28]
 800af7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af80:	4ab4      	ldr	r2, [pc, #720]	; (800b254 <_dtoa_r+0x6f0>)
 800af82:	189f      	adds	r7, r3, r2
 800af84:	9707      	str	r7, [sp, #28]
 800af86:	2e00      	cmp	r6, #0
 800af88:	d15e      	bne.n	800b048 <_dtoa_r+0x4e4>
 800af8a:	2200      	movs	r2, #0
 800af8c:	0020      	movs	r0, r4
 800af8e:	0029      	movs	r1, r5
 800af90:	4bb1      	ldr	r3, [pc, #708]	; (800b258 <_dtoa_r+0x6f4>)
 800af92:	f7f7 fa2b 	bl	80023ec <__aeabi_dsub>
 800af96:	003b      	movs	r3, r7
 800af98:	9a06      	ldr	r2, [sp, #24]
 800af9a:	0004      	movs	r4, r0
 800af9c:	000d      	movs	r5, r1
 800af9e:	f7f5 fa6f 	bl	8000480 <__aeabi_dcmpgt>
 800afa2:	2800      	cmp	r0, #0
 800afa4:	d000      	beq.n	800afa8 <_dtoa_r+0x444>
 800afa6:	e2aa      	b.n	800b4fe <_dtoa_r+0x99a>
 800afa8:	48ac      	ldr	r0, [pc, #688]	; (800b25c <_dtoa_r+0x6f8>)
 800afaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800afac:	4684      	mov	ip, r0
 800afae:	4461      	add	r1, ip
 800afb0:	000b      	movs	r3, r1
 800afb2:	0020      	movs	r0, r4
 800afb4:	0029      	movs	r1, r5
 800afb6:	9a06      	ldr	r2, [sp, #24]
 800afb8:	f7f5 fa4e 	bl	8000458 <__aeabi_dcmplt>
 800afbc:	2800      	cmp	r0, #0
 800afbe:	d000      	beq.n	800afc2 <_dtoa_r+0x45e>
 800afc0:	e29b      	b.n	800b4fa <_dtoa_r+0x996>
 800afc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800afc4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800afc6:	930a      	str	r3, [sp, #40]	; 0x28
 800afc8:	940b      	str	r4, [sp, #44]	; 0x2c
 800afca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800afcc:	2b00      	cmp	r3, #0
 800afce:	da00      	bge.n	800afd2 <_dtoa_r+0x46e>
 800afd0:	e16a      	b.n	800b2a8 <_dtoa_r+0x744>
 800afd2:	9a02      	ldr	r2, [sp, #8]
 800afd4:	2a0e      	cmp	r2, #14
 800afd6:	dd00      	ble.n	800afda <_dtoa_r+0x476>
 800afd8:	e166      	b.n	800b2a8 <_dtoa_r+0x744>
 800afda:	4b99      	ldr	r3, [pc, #612]	; (800b240 <_dtoa_r+0x6dc>)
 800afdc:	00d2      	lsls	r2, r2, #3
 800afde:	189b      	adds	r3, r3, r2
 800afe0:	681e      	ldr	r6, [r3, #0]
 800afe2:	685f      	ldr	r7, [r3, #4]
 800afe4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	db00      	blt.n	800afec <_dtoa_r+0x488>
 800afea:	e0d7      	b.n	800b19c <_dtoa_r+0x638>
 800afec:	9b08      	ldr	r3, [sp, #32]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	dd00      	ble.n	800aff4 <_dtoa_r+0x490>
 800aff2:	e0d3      	b.n	800b19c <_dtoa_r+0x638>
 800aff4:	d000      	beq.n	800aff8 <_dtoa_r+0x494>
 800aff6:	e27f      	b.n	800b4f8 <_dtoa_r+0x994>
 800aff8:	2200      	movs	r2, #0
 800affa:	0030      	movs	r0, r6
 800affc:	0039      	movs	r1, r7
 800affe:	4b96      	ldr	r3, [pc, #600]	; (800b258 <_dtoa_r+0x6f4>)
 800b000:	f7f6 ff88 	bl	8001f14 <__aeabi_dmul>
 800b004:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b008:	f7f5 fa44 	bl	8000494 <__aeabi_dcmpge>
 800b00c:	9e08      	ldr	r6, [sp, #32]
 800b00e:	0037      	movs	r7, r6
 800b010:	2800      	cmp	r0, #0
 800b012:	d000      	beq.n	800b016 <_dtoa_r+0x4b2>
 800b014:	e256      	b.n	800b4c4 <_dtoa_r+0x960>
 800b016:	9b05      	ldr	r3, [sp, #20]
 800b018:	9a05      	ldr	r2, [sp, #20]
 800b01a:	3301      	adds	r3, #1
 800b01c:	9306      	str	r3, [sp, #24]
 800b01e:	2331      	movs	r3, #49	; 0x31
 800b020:	7013      	strb	r3, [r2, #0]
 800b022:	9b02      	ldr	r3, [sp, #8]
 800b024:	3301      	adds	r3, #1
 800b026:	9302      	str	r3, [sp, #8]
 800b028:	e251      	b.n	800b4ce <_dtoa_r+0x96a>
 800b02a:	4234      	tst	r4, r6
 800b02c:	d005      	beq.n	800b03a <_dtoa_r+0x4d6>
 800b02e:	682a      	ldr	r2, [r5, #0]
 800b030:	686b      	ldr	r3, [r5, #4]
 800b032:	f7f6 ff6f 	bl	8001f14 <__aeabi_dmul>
 800b036:	0033      	movs	r3, r6
 800b038:	3701      	adds	r7, #1
 800b03a:	1064      	asrs	r4, r4, #1
 800b03c:	3508      	adds	r5, #8
 800b03e:	e763      	b.n	800af08 <_dtoa_r+0x3a4>
 800b040:	9b02      	ldr	r3, [sp, #8]
 800b042:	9e08      	ldr	r6, [sp, #32]
 800b044:	930f      	str	r3, [sp, #60]	; 0x3c
 800b046:	e787      	b.n	800af58 <_dtoa_r+0x3f4>
 800b048:	4b7d      	ldr	r3, [pc, #500]	; (800b240 <_dtoa_r+0x6dc>)
 800b04a:	1e72      	subs	r2, r6, #1
 800b04c:	00d2      	lsls	r2, r2, #3
 800b04e:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b050:	189b      	adds	r3, r3, r2
 800b052:	681a      	ldr	r2, [r3, #0]
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	2900      	cmp	r1, #0
 800b058:	d04e      	beq.n	800b0f8 <_dtoa_r+0x594>
 800b05a:	2000      	movs	r0, #0
 800b05c:	4980      	ldr	r1, [pc, #512]	; (800b260 <_dtoa_r+0x6fc>)
 800b05e:	f7f6 fb53 	bl	8001708 <__aeabi_ddiv>
 800b062:	9a06      	ldr	r2, [sp, #24]
 800b064:	9b07      	ldr	r3, [sp, #28]
 800b066:	f7f7 f9c1 	bl	80023ec <__aeabi_dsub>
 800b06a:	9b05      	ldr	r3, [sp, #20]
 800b06c:	900a      	str	r0, [sp, #40]	; 0x28
 800b06e:	910b      	str	r1, [sp, #44]	; 0x2c
 800b070:	9315      	str	r3, [sp, #84]	; 0x54
 800b072:	18f3      	adds	r3, r6, r3
 800b074:	9319      	str	r3, [sp, #100]	; 0x64
 800b076:	0020      	movs	r0, r4
 800b078:	0029      	movs	r1, r5
 800b07a:	f7f7 fd67 	bl	8002b4c <__aeabi_d2iz>
 800b07e:	9017      	str	r0, [sp, #92]	; 0x5c
 800b080:	f7f7 fd9a 	bl	8002bb8 <__aeabi_i2d>
 800b084:	0002      	movs	r2, r0
 800b086:	000b      	movs	r3, r1
 800b088:	0020      	movs	r0, r4
 800b08a:	0029      	movs	r1, r5
 800b08c:	f7f7 f9ae 	bl	80023ec <__aeabi_dsub>
 800b090:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b092:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800b094:	3301      	adds	r3, #1
 800b096:	9306      	str	r3, [sp, #24]
 800b098:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b09a:	3430      	adds	r4, #48	; 0x30
 800b09c:	701c      	strb	r4, [r3, #0]
 800b09e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0a2:	0006      	movs	r6, r0
 800b0a4:	000f      	movs	r7, r1
 800b0a6:	f7f5 f9d7 	bl	8000458 <__aeabi_dcmplt>
 800b0aa:	2800      	cmp	r0, #0
 800b0ac:	d16c      	bne.n	800b188 <_dtoa_r+0x624>
 800b0ae:	0032      	movs	r2, r6
 800b0b0:	003b      	movs	r3, r7
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	4964      	ldr	r1, [pc, #400]	; (800b248 <_dtoa_r+0x6e4>)
 800b0b6:	f7f7 f999 	bl	80023ec <__aeabi_dsub>
 800b0ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0be:	f7f5 f9cb 	bl	8000458 <__aeabi_dcmplt>
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	d000      	beq.n	800b0c8 <_dtoa_r+0x564>
 800b0c6:	e0cf      	b.n	800b268 <_dtoa_r+0x704>
 800b0c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b0ca:	9a06      	ldr	r2, [sp, #24]
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d100      	bne.n	800b0d2 <_dtoa_r+0x56e>
 800b0d0:	e777      	b.n	800afc2 <_dtoa_r+0x45e>
 800b0d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b0d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	4b5c      	ldr	r3, [pc, #368]	; (800b24c <_dtoa_r+0x6e8>)
 800b0da:	f7f6 ff1b 	bl	8001f14 <__aeabi_dmul>
 800b0de:	4b5b      	ldr	r3, [pc, #364]	; (800b24c <_dtoa_r+0x6e8>)
 800b0e0:	900a      	str	r0, [sp, #40]	; 0x28
 800b0e2:	910b      	str	r1, [sp, #44]	; 0x2c
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	0030      	movs	r0, r6
 800b0e8:	0039      	movs	r1, r7
 800b0ea:	f7f6 ff13 	bl	8001f14 <__aeabi_dmul>
 800b0ee:	9b06      	ldr	r3, [sp, #24]
 800b0f0:	0004      	movs	r4, r0
 800b0f2:	000d      	movs	r5, r1
 800b0f4:	9315      	str	r3, [sp, #84]	; 0x54
 800b0f6:	e7be      	b.n	800b076 <_dtoa_r+0x512>
 800b0f8:	9806      	ldr	r0, [sp, #24]
 800b0fa:	9907      	ldr	r1, [sp, #28]
 800b0fc:	f7f6 ff0a 	bl	8001f14 <__aeabi_dmul>
 800b100:	9f05      	ldr	r7, [sp, #20]
 800b102:	900a      	str	r0, [sp, #40]	; 0x28
 800b104:	910b      	str	r1, [sp, #44]	; 0x2c
 800b106:	19bb      	adds	r3, r7, r6
 800b108:	9315      	str	r3, [sp, #84]	; 0x54
 800b10a:	0029      	movs	r1, r5
 800b10c:	0020      	movs	r0, r4
 800b10e:	f7f7 fd1d 	bl	8002b4c <__aeabi_d2iz>
 800b112:	9006      	str	r0, [sp, #24]
 800b114:	f7f7 fd50 	bl	8002bb8 <__aeabi_i2d>
 800b118:	000b      	movs	r3, r1
 800b11a:	0002      	movs	r2, r0
 800b11c:	0029      	movs	r1, r5
 800b11e:	0020      	movs	r0, r4
 800b120:	f7f7 f964 	bl	80023ec <__aeabi_dsub>
 800b124:	9b06      	ldr	r3, [sp, #24]
 800b126:	0004      	movs	r4, r0
 800b128:	3330      	adds	r3, #48	; 0x30
 800b12a:	703b      	strb	r3, [r7, #0]
 800b12c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b12e:	3701      	adds	r7, #1
 800b130:	000d      	movs	r5, r1
 800b132:	429f      	cmp	r7, r3
 800b134:	d12b      	bne.n	800b18e <_dtoa_r+0x62a>
 800b136:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b138:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b13a:	9b05      	ldr	r3, [sp, #20]
 800b13c:	2200      	movs	r2, #0
 800b13e:	199b      	adds	r3, r3, r6
 800b140:	9306      	str	r3, [sp, #24]
 800b142:	4b47      	ldr	r3, [pc, #284]	; (800b260 <_dtoa_r+0x6fc>)
 800b144:	f7f5 ff76 	bl	8001034 <__aeabi_dadd>
 800b148:	0002      	movs	r2, r0
 800b14a:	000b      	movs	r3, r1
 800b14c:	0020      	movs	r0, r4
 800b14e:	0029      	movs	r1, r5
 800b150:	f7f5 f996 	bl	8000480 <__aeabi_dcmpgt>
 800b154:	2800      	cmp	r0, #0
 800b156:	d000      	beq.n	800b15a <_dtoa_r+0x5f6>
 800b158:	e086      	b.n	800b268 <_dtoa_r+0x704>
 800b15a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b15c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b15e:	2000      	movs	r0, #0
 800b160:	493f      	ldr	r1, [pc, #252]	; (800b260 <_dtoa_r+0x6fc>)
 800b162:	f7f7 f943 	bl	80023ec <__aeabi_dsub>
 800b166:	0002      	movs	r2, r0
 800b168:	000b      	movs	r3, r1
 800b16a:	0020      	movs	r0, r4
 800b16c:	0029      	movs	r1, r5
 800b16e:	f7f5 f973 	bl	8000458 <__aeabi_dcmplt>
 800b172:	2800      	cmp	r0, #0
 800b174:	d100      	bne.n	800b178 <_dtoa_r+0x614>
 800b176:	e724      	b.n	800afc2 <_dtoa_r+0x45e>
 800b178:	9b06      	ldr	r3, [sp, #24]
 800b17a:	001a      	movs	r2, r3
 800b17c:	3a01      	subs	r2, #1
 800b17e:	9206      	str	r2, [sp, #24]
 800b180:	7812      	ldrb	r2, [r2, #0]
 800b182:	2a30      	cmp	r2, #48	; 0x30
 800b184:	d0f8      	beq.n	800b178 <_dtoa_r+0x614>
 800b186:	9306      	str	r3, [sp, #24]
 800b188:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b18a:	9302      	str	r3, [sp, #8]
 800b18c:	e046      	b.n	800b21c <_dtoa_r+0x6b8>
 800b18e:	2200      	movs	r2, #0
 800b190:	4b2e      	ldr	r3, [pc, #184]	; (800b24c <_dtoa_r+0x6e8>)
 800b192:	f7f6 febf 	bl	8001f14 <__aeabi_dmul>
 800b196:	0004      	movs	r4, r0
 800b198:	000d      	movs	r5, r1
 800b19a:	e7b6      	b.n	800b10a <_dtoa_r+0x5a6>
 800b19c:	9b05      	ldr	r3, [sp, #20]
 800b19e:	9a05      	ldr	r2, [sp, #20]
 800b1a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b1a2:	9b08      	ldr	r3, [sp, #32]
 800b1a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b1a6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b1a8:	3b01      	subs	r3, #1
 800b1aa:	189b      	adds	r3, r3, r2
 800b1ac:	930a      	str	r3, [sp, #40]	; 0x28
 800b1ae:	0032      	movs	r2, r6
 800b1b0:	003b      	movs	r3, r7
 800b1b2:	0020      	movs	r0, r4
 800b1b4:	0029      	movs	r1, r5
 800b1b6:	f7f6 faa7 	bl	8001708 <__aeabi_ddiv>
 800b1ba:	f7f7 fcc7 	bl	8002b4c <__aeabi_d2iz>
 800b1be:	9008      	str	r0, [sp, #32]
 800b1c0:	f7f7 fcfa 	bl	8002bb8 <__aeabi_i2d>
 800b1c4:	0032      	movs	r2, r6
 800b1c6:	003b      	movs	r3, r7
 800b1c8:	f7f6 fea4 	bl	8001f14 <__aeabi_dmul>
 800b1cc:	0002      	movs	r2, r0
 800b1ce:	000b      	movs	r3, r1
 800b1d0:	0020      	movs	r0, r4
 800b1d2:	0029      	movs	r1, r5
 800b1d4:	f7f7 f90a 	bl	80023ec <__aeabi_dsub>
 800b1d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1da:	001a      	movs	r2, r3
 800b1dc:	3201      	adds	r2, #1
 800b1de:	9209      	str	r2, [sp, #36]	; 0x24
 800b1e0:	9206      	str	r2, [sp, #24]
 800b1e2:	9a08      	ldr	r2, [sp, #32]
 800b1e4:	3230      	adds	r2, #48	; 0x30
 800b1e6:	701a      	strb	r2, [r3, #0]
 800b1e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d14f      	bne.n	800b28e <_dtoa_r+0x72a>
 800b1ee:	0002      	movs	r2, r0
 800b1f0:	000b      	movs	r3, r1
 800b1f2:	f7f5 ff1f 	bl	8001034 <__aeabi_dadd>
 800b1f6:	0032      	movs	r2, r6
 800b1f8:	003b      	movs	r3, r7
 800b1fa:	0004      	movs	r4, r0
 800b1fc:	000d      	movs	r5, r1
 800b1fe:	f7f5 f93f 	bl	8000480 <__aeabi_dcmpgt>
 800b202:	2800      	cmp	r0, #0
 800b204:	d12e      	bne.n	800b264 <_dtoa_r+0x700>
 800b206:	0032      	movs	r2, r6
 800b208:	003b      	movs	r3, r7
 800b20a:	0020      	movs	r0, r4
 800b20c:	0029      	movs	r1, r5
 800b20e:	f7f5 f91d 	bl	800044c <__aeabi_dcmpeq>
 800b212:	2800      	cmp	r0, #0
 800b214:	d002      	beq.n	800b21c <_dtoa_r+0x6b8>
 800b216:	9b08      	ldr	r3, [sp, #32]
 800b218:	07db      	lsls	r3, r3, #31
 800b21a:	d423      	bmi.n	800b264 <_dtoa_r+0x700>
 800b21c:	9803      	ldr	r0, [sp, #12]
 800b21e:	9904      	ldr	r1, [sp, #16]
 800b220:	f000 fdf4 	bl	800be0c <_Bfree>
 800b224:	2300      	movs	r3, #0
 800b226:	9a06      	ldr	r2, [sp, #24]
 800b228:	9802      	ldr	r0, [sp, #8]
 800b22a:	7013      	strb	r3, [r2, #0]
 800b22c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b22e:	3001      	adds	r0, #1
 800b230:	6018      	str	r0, [r3, #0]
 800b232:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b234:	2b00      	cmp	r3, #0
 800b236:	d100      	bne.n	800b23a <_dtoa_r+0x6d6>
 800b238:	e4c8      	b.n	800abcc <_dtoa_r+0x68>
 800b23a:	601a      	str	r2, [r3, #0]
 800b23c:	e4c6      	b.n	800abcc <_dtoa_r+0x68>
 800b23e:	46c0      	nop			; (mov r8, r8)
 800b240:	0800eb50 	.word	0x0800eb50
 800b244:	0800eb28 	.word	0x0800eb28
 800b248:	3ff00000 	.word	0x3ff00000
 800b24c:	40240000 	.word	0x40240000
 800b250:	401c0000 	.word	0x401c0000
 800b254:	fcc00000 	.word	0xfcc00000
 800b258:	40140000 	.word	0x40140000
 800b25c:	7cc00000 	.word	0x7cc00000
 800b260:	3fe00000 	.word	0x3fe00000
 800b264:	9b02      	ldr	r3, [sp, #8]
 800b266:	930f      	str	r3, [sp, #60]	; 0x3c
 800b268:	9b06      	ldr	r3, [sp, #24]
 800b26a:	9306      	str	r3, [sp, #24]
 800b26c:	3b01      	subs	r3, #1
 800b26e:	781a      	ldrb	r2, [r3, #0]
 800b270:	2a39      	cmp	r2, #57	; 0x39
 800b272:	d108      	bne.n	800b286 <_dtoa_r+0x722>
 800b274:	9a05      	ldr	r2, [sp, #20]
 800b276:	429a      	cmp	r2, r3
 800b278:	d1f7      	bne.n	800b26a <_dtoa_r+0x706>
 800b27a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b27c:	9905      	ldr	r1, [sp, #20]
 800b27e:	3201      	adds	r2, #1
 800b280:	920f      	str	r2, [sp, #60]	; 0x3c
 800b282:	2230      	movs	r2, #48	; 0x30
 800b284:	700a      	strb	r2, [r1, #0]
 800b286:	781a      	ldrb	r2, [r3, #0]
 800b288:	3201      	adds	r2, #1
 800b28a:	701a      	strb	r2, [r3, #0]
 800b28c:	e77c      	b.n	800b188 <_dtoa_r+0x624>
 800b28e:	2200      	movs	r2, #0
 800b290:	4baa      	ldr	r3, [pc, #680]	; (800b53c <_dtoa_r+0x9d8>)
 800b292:	f7f6 fe3f 	bl	8001f14 <__aeabi_dmul>
 800b296:	2200      	movs	r2, #0
 800b298:	2300      	movs	r3, #0
 800b29a:	0004      	movs	r4, r0
 800b29c:	000d      	movs	r5, r1
 800b29e:	f7f5 f8d5 	bl	800044c <__aeabi_dcmpeq>
 800b2a2:	2800      	cmp	r0, #0
 800b2a4:	d083      	beq.n	800b1ae <_dtoa_r+0x64a>
 800b2a6:	e7b9      	b.n	800b21c <_dtoa_r+0x6b8>
 800b2a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b2aa:	2a00      	cmp	r2, #0
 800b2ac:	d100      	bne.n	800b2b0 <_dtoa_r+0x74c>
 800b2ae:	e08a      	b.n	800b3c6 <_dtoa_r+0x862>
 800b2b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b2b2:	2a01      	cmp	r2, #1
 800b2b4:	dc6e      	bgt.n	800b394 <_dtoa_r+0x830>
 800b2b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b2b8:	2a00      	cmp	r2, #0
 800b2ba:	d067      	beq.n	800b38c <_dtoa_r+0x828>
 800b2bc:	4aa0      	ldr	r2, [pc, #640]	; (800b540 <_dtoa_r+0x9dc>)
 800b2be:	189b      	adds	r3, r3, r2
 800b2c0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b2c2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b2c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2c6:	2101      	movs	r1, #1
 800b2c8:	18d2      	adds	r2, r2, r3
 800b2ca:	9209      	str	r2, [sp, #36]	; 0x24
 800b2cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2ce:	9803      	ldr	r0, [sp, #12]
 800b2d0:	18d3      	adds	r3, r2, r3
 800b2d2:	930d      	str	r3, [sp, #52]	; 0x34
 800b2d4:	f000 fe30 	bl	800bf38 <__i2b>
 800b2d8:	0007      	movs	r7, r0
 800b2da:	2c00      	cmp	r4, #0
 800b2dc:	dd0e      	ble.n	800b2fc <_dtoa_r+0x798>
 800b2de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	dd0b      	ble.n	800b2fc <_dtoa_r+0x798>
 800b2e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2e6:	0023      	movs	r3, r4
 800b2e8:	4294      	cmp	r4, r2
 800b2ea:	dd00      	ble.n	800b2ee <_dtoa_r+0x78a>
 800b2ec:	0013      	movs	r3, r2
 800b2ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2f0:	1ae4      	subs	r4, r4, r3
 800b2f2:	1ad2      	subs	r2, r2, r3
 800b2f4:	9209      	str	r2, [sp, #36]	; 0x24
 800b2f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2f8:	1ad3      	subs	r3, r2, r3
 800b2fa:	930d      	str	r3, [sp, #52]	; 0x34
 800b2fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d01e      	beq.n	800b340 <_dtoa_r+0x7dc>
 800b302:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b304:	2b00      	cmp	r3, #0
 800b306:	d062      	beq.n	800b3ce <_dtoa_r+0x86a>
 800b308:	2d00      	cmp	r5, #0
 800b30a:	dd10      	ble.n	800b32e <_dtoa_r+0x7ca>
 800b30c:	0039      	movs	r1, r7
 800b30e:	002a      	movs	r2, r5
 800b310:	9803      	ldr	r0, [sp, #12]
 800b312:	f000 fed7 	bl	800c0c4 <__pow5mult>
 800b316:	9a04      	ldr	r2, [sp, #16]
 800b318:	0001      	movs	r1, r0
 800b31a:	0007      	movs	r7, r0
 800b31c:	9803      	ldr	r0, [sp, #12]
 800b31e:	f000 fe21 	bl	800bf64 <__multiply>
 800b322:	0006      	movs	r6, r0
 800b324:	9904      	ldr	r1, [sp, #16]
 800b326:	9803      	ldr	r0, [sp, #12]
 800b328:	f000 fd70 	bl	800be0c <_Bfree>
 800b32c:	9604      	str	r6, [sp, #16]
 800b32e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b330:	1b5a      	subs	r2, r3, r5
 800b332:	42ab      	cmp	r3, r5
 800b334:	d004      	beq.n	800b340 <_dtoa_r+0x7dc>
 800b336:	9904      	ldr	r1, [sp, #16]
 800b338:	9803      	ldr	r0, [sp, #12]
 800b33a:	f000 fec3 	bl	800c0c4 <__pow5mult>
 800b33e:	9004      	str	r0, [sp, #16]
 800b340:	2101      	movs	r1, #1
 800b342:	9803      	ldr	r0, [sp, #12]
 800b344:	f000 fdf8 	bl	800bf38 <__i2b>
 800b348:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b34a:	0006      	movs	r6, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	dd40      	ble.n	800b3d2 <_dtoa_r+0x86e>
 800b350:	001a      	movs	r2, r3
 800b352:	0001      	movs	r1, r0
 800b354:	9803      	ldr	r0, [sp, #12]
 800b356:	f000 feb5 	bl	800c0c4 <__pow5mult>
 800b35a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b35c:	0006      	movs	r6, r0
 800b35e:	2500      	movs	r5, #0
 800b360:	2b01      	cmp	r3, #1
 800b362:	dc3e      	bgt.n	800b3e2 <_dtoa_r+0x87e>
 800b364:	2500      	movs	r5, #0
 800b366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b368:	42ab      	cmp	r3, r5
 800b36a:	d136      	bne.n	800b3da <_dtoa_r+0x876>
 800b36c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b36e:	031b      	lsls	r3, r3, #12
 800b370:	42ab      	cmp	r3, r5
 800b372:	d132      	bne.n	800b3da <_dtoa_r+0x876>
 800b374:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b376:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b378:	4213      	tst	r3, r2
 800b37a:	d02e      	beq.n	800b3da <_dtoa_r+0x876>
 800b37c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b37e:	3501      	adds	r5, #1
 800b380:	3301      	adds	r3, #1
 800b382:	9309      	str	r3, [sp, #36]	; 0x24
 800b384:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b386:	3301      	adds	r3, #1
 800b388:	930d      	str	r3, [sp, #52]	; 0x34
 800b38a:	e026      	b.n	800b3da <_dtoa_r+0x876>
 800b38c:	2336      	movs	r3, #54	; 0x36
 800b38e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b390:	1a9b      	subs	r3, r3, r2
 800b392:	e795      	b.n	800b2c0 <_dtoa_r+0x75c>
 800b394:	9b08      	ldr	r3, [sp, #32]
 800b396:	1e5d      	subs	r5, r3, #1
 800b398:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b39a:	42ab      	cmp	r3, r5
 800b39c:	db08      	blt.n	800b3b0 <_dtoa_r+0x84c>
 800b39e:	1b5d      	subs	r5, r3, r5
 800b3a0:	9b08      	ldr	r3, [sp, #32]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	da0c      	bge.n	800b3c0 <_dtoa_r+0x85c>
 800b3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3a8:	9a08      	ldr	r2, [sp, #32]
 800b3aa:	1a9c      	subs	r4, r3, r2
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	e789      	b.n	800b2c4 <_dtoa_r+0x760>
 800b3b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b3b4:	1aeb      	subs	r3, r5, r3
 800b3b6:	18d3      	adds	r3, r2, r3
 800b3b8:	950e      	str	r5, [sp, #56]	; 0x38
 800b3ba:	9313      	str	r3, [sp, #76]	; 0x4c
 800b3bc:	2500      	movs	r5, #0
 800b3be:	e7ef      	b.n	800b3a0 <_dtoa_r+0x83c>
 800b3c0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b3c2:	9b08      	ldr	r3, [sp, #32]
 800b3c4:	e77e      	b.n	800b2c4 <_dtoa_r+0x760>
 800b3c6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b3c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b3ca:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800b3cc:	e785      	b.n	800b2da <_dtoa_r+0x776>
 800b3ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b3d0:	e7b1      	b.n	800b336 <_dtoa_r+0x7d2>
 800b3d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b3d4:	2500      	movs	r5, #0
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	ddc4      	ble.n	800b364 <_dtoa_r+0x800>
 800b3da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b3dc:	2001      	movs	r0, #1
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d008      	beq.n	800b3f4 <_dtoa_r+0x890>
 800b3e2:	6933      	ldr	r3, [r6, #16]
 800b3e4:	3303      	adds	r3, #3
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	18f3      	adds	r3, r6, r3
 800b3ea:	6858      	ldr	r0, [r3, #4]
 800b3ec:	f000 fd5c 	bl	800bea8 <__hi0bits>
 800b3f0:	2320      	movs	r3, #32
 800b3f2:	1a18      	subs	r0, r3, r0
 800b3f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3f6:	221f      	movs	r2, #31
 800b3f8:	1818      	adds	r0, r3, r0
 800b3fa:	0003      	movs	r3, r0
 800b3fc:	4013      	ands	r3, r2
 800b3fe:	4210      	tst	r0, r2
 800b400:	d046      	beq.n	800b490 <_dtoa_r+0x92c>
 800b402:	3201      	adds	r2, #1
 800b404:	1ad2      	subs	r2, r2, r3
 800b406:	2a04      	cmp	r2, #4
 800b408:	dd3f      	ble.n	800b48a <_dtoa_r+0x926>
 800b40a:	221c      	movs	r2, #28
 800b40c:	1ad3      	subs	r3, r2, r3
 800b40e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b410:	18e4      	adds	r4, r4, r3
 800b412:	18d2      	adds	r2, r2, r3
 800b414:	9209      	str	r2, [sp, #36]	; 0x24
 800b416:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b418:	18d3      	adds	r3, r2, r3
 800b41a:	930d      	str	r3, [sp, #52]	; 0x34
 800b41c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b41e:	2b00      	cmp	r3, #0
 800b420:	dd05      	ble.n	800b42e <_dtoa_r+0x8ca>
 800b422:	001a      	movs	r2, r3
 800b424:	9904      	ldr	r1, [sp, #16]
 800b426:	9803      	ldr	r0, [sp, #12]
 800b428:	f000 fe8e 	bl	800c148 <__lshift>
 800b42c:	9004      	str	r0, [sp, #16]
 800b42e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b430:	2b00      	cmp	r3, #0
 800b432:	dd05      	ble.n	800b440 <_dtoa_r+0x8dc>
 800b434:	0031      	movs	r1, r6
 800b436:	001a      	movs	r2, r3
 800b438:	9803      	ldr	r0, [sp, #12]
 800b43a:	f000 fe85 	bl	800c148 <__lshift>
 800b43e:	0006      	movs	r6, r0
 800b440:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b442:	2b00      	cmp	r3, #0
 800b444:	d026      	beq.n	800b494 <_dtoa_r+0x930>
 800b446:	0031      	movs	r1, r6
 800b448:	9804      	ldr	r0, [sp, #16]
 800b44a:	f000 feed 	bl	800c228 <__mcmp>
 800b44e:	2800      	cmp	r0, #0
 800b450:	da20      	bge.n	800b494 <_dtoa_r+0x930>
 800b452:	9b02      	ldr	r3, [sp, #8]
 800b454:	220a      	movs	r2, #10
 800b456:	3b01      	subs	r3, #1
 800b458:	9302      	str	r3, [sp, #8]
 800b45a:	9904      	ldr	r1, [sp, #16]
 800b45c:	2300      	movs	r3, #0
 800b45e:	9803      	ldr	r0, [sp, #12]
 800b460:	f000 fcde 	bl	800be20 <__multadd>
 800b464:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b466:	9004      	str	r0, [sp, #16]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d100      	bne.n	800b46e <_dtoa_r+0x90a>
 800b46c:	e154      	b.n	800b718 <_dtoa_r+0xbb4>
 800b46e:	2300      	movs	r3, #0
 800b470:	0039      	movs	r1, r7
 800b472:	220a      	movs	r2, #10
 800b474:	9803      	ldr	r0, [sp, #12]
 800b476:	f000 fcd3 	bl	800be20 <__multadd>
 800b47a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b47c:	0007      	movs	r7, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	dc47      	bgt.n	800b512 <_dtoa_r+0x9ae>
 800b482:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b484:	2b02      	cmp	r3, #2
 800b486:	dc0d      	bgt.n	800b4a4 <_dtoa_r+0x940>
 800b488:	e043      	b.n	800b512 <_dtoa_r+0x9ae>
 800b48a:	2a04      	cmp	r2, #4
 800b48c:	d0c6      	beq.n	800b41c <_dtoa_r+0x8b8>
 800b48e:	0013      	movs	r3, r2
 800b490:	331c      	adds	r3, #28
 800b492:	e7bc      	b.n	800b40e <_dtoa_r+0x8aa>
 800b494:	9b08      	ldr	r3, [sp, #32]
 800b496:	2b00      	cmp	r3, #0
 800b498:	dc35      	bgt.n	800b506 <_dtoa_r+0x9a2>
 800b49a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b49c:	2b02      	cmp	r3, #2
 800b49e:	dd32      	ble.n	800b506 <_dtoa_r+0x9a2>
 800b4a0:	9b08      	ldr	r3, [sp, #32]
 800b4a2:	930c      	str	r3, [sp, #48]	; 0x30
 800b4a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d10c      	bne.n	800b4c4 <_dtoa_r+0x960>
 800b4aa:	0031      	movs	r1, r6
 800b4ac:	2205      	movs	r2, #5
 800b4ae:	9803      	ldr	r0, [sp, #12]
 800b4b0:	f000 fcb6 	bl	800be20 <__multadd>
 800b4b4:	0006      	movs	r6, r0
 800b4b6:	0001      	movs	r1, r0
 800b4b8:	9804      	ldr	r0, [sp, #16]
 800b4ba:	f000 feb5 	bl	800c228 <__mcmp>
 800b4be:	2800      	cmp	r0, #0
 800b4c0:	dd00      	ble.n	800b4c4 <_dtoa_r+0x960>
 800b4c2:	e5a8      	b.n	800b016 <_dtoa_r+0x4b2>
 800b4c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b4c6:	43db      	mvns	r3, r3
 800b4c8:	9302      	str	r3, [sp, #8]
 800b4ca:	9b05      	ldr	r3, [sp, #20]
 800b4cc:	9306      	str	r3, [sp, #24]
 800b4ce:	2500      	movs	r5, #0
 800b4d0:	0031      	movs	r1, r6
 800b4d2:	9803      	ldr	r0, [sp, #12]
 800b4d4:	f000 fc9a 	bl	800be0c <_Bfree>
 800b4d8:	2f00      	cmp	r7, #0
 800b4da:	d100      	bne.n	800b4de <_dtoa_r+0x97a>
 800b4dc:	e69e      	b.n	800b21c <_dtoa_r+0x6b8>
 800b4de:	2d00      	cmp	r5, #0
 800b4e0:	d005      	beq.n	800b4ee <_dtoa_r+0x98a>
 800b4e2:	42bd      	cmp	r5, r7
 800b4e4:	d003      	beq.n	800b4ee <_dtoa_r+0x98a>
 800b4e6:	0029      	movs	r1, r5
 800b4e8:	9803      	ldr	r0, [sp, #12]
 800b4ea:	f000 fc8f 	bl	800be0c <_Bfree>
 800b4ee:	0039      	movs	r1, r7
 800b4f0:	9803      	ldr	r0, [sp, #12]
 800b4f2:	f000 fc8b 	bl	800be0c <_Bfree>
 800b4f6:	e691      	b.n	800b21c <_dtoa_r+0x6b8>
 800b4f8:	2600      	movs	r6, #0
 800b4fa:	0037      	movs	r7, r6
 800b4fc:	e7e2      	b.n	800b4c4 <_dtoa_r+0x960>
 800b4fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b500:	0037      	movs	r7, r6
 800b502:	9302      	str	r3, [sp, #8]
 800b504:	e587      	b.n	800b016 <_dtoa_r+0x4b2>
 800b506:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d100      	bne.n	800b50e <_dtoa_r+0x9aa>
 800b50c:	e0bc      	b.n	800b688 <_dtoa_r+0xb24>
 800b50e:	9b08      	ldr	r3, [sp, #32]
 800b510:	930c      	str	r3, [sp, #48]	; 0x30
 800b512:	2c00      	cmp	r4, #0
 800b514:	dd05      	ble.n	800b522 <_dtoa_r+0x9be>
 800b516:	0039      	movs	r1, r7
 800b518:	0022      	movs	r2, r4
 800b51a:	9803      	ldr	r0, [sp, #12]
 800b51c:	f000 fe14 	bl	800c148 <__lshift>
 800b520:	0007      	movs	r7, r0
 800b522:	0038      	movs	r0, r7
 800b524:	2d00      	cmp	r5, #0
 800b526:	d01e      	beq.n	800b566 <_dtoa_r+0xa02>
 800b528:	6879      	ldr	r1, [r7, #4]
 800b52a:	9803      	ldr	r0, [sp, #12]
 800b52c:	f000 fc46 	bl	800bdbc <_Balloc>
 800b530:	1e04      	subs	r4, r0, #0
 800b532:	d10b      	bne.n	800b54c <_dtoa_r+0x9e8>
 800b534:	0002      	movs	r2, r0
 800b536:	4b03      	ldr	r3, [pc, #12]	; (800b544 <_dtoa_r+0x9e0>)
 800b538:	4903      	ldr	r1, [pc, #12]	; (800b548 <_dtoa_r+0x9e4>)
 800b53a:	e444      	b.n	800adc6 <_dtoa_r+0x262>
 800b53c:	40240000 	.word	0x40240000
 800b540:	00000433 	.word	0x00000433
 800b544:	0800ea52 	.word	0x0800ea52
 800b548:	000002ea 	.word	0x000002ea
 800b54c:	0039      	movs	r1, r7
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	310c      	adds	r1, #12
 800b552:	1c9a      	adds	r2, r3, #2
 800b554:	0092      	lsls	r2, r2, #2
 800b556:	300c      	adds	r0, #12
 800b558:	f7fd fedb 	bl	8009312 <memcpy>
 800b55c:	2201      	movs	r2, #1
 800b55e:	0021      	movs	r1, r4
 800b560:	9803      	ldr	r0, [sp, #12]
 800b562:	f000 fdf1 	bl	800c148 <__lshift>
 800b566:	003d      	movs	r5, r7
 800b568:	0007      	movs	r7, r0
 800b56a:	9b05      	ldr	r3, [sp, #20]
 800b56c:	9308      	str	r3, [sp, #32]
 800b56e:	0031      	movs	r1, r6
 800b570:	9804      	ldr	r0, [sp, #16]
 800b572:	f7ff fa6b 	bl	800aa4c <quorem>
 800b576:	0029      	movs	r1, r5
 800b578:	0004      	movs	r4, r0
 800b57a:	900d      	str	r0, [sp, #52]	; 0x34
 800b57c:	9804      	ldr	r0, [sp, #16]
 800b57e:	f000 fe53 	bl	800c228 <__mcmp>
 800b582:	003a      	movs	r2, r7
 800b584:	900e      	str	r0, [sp, #56]	; 0x38
 800b586:	0031      	movs	r1, r6
 800b588:	9803      	ldr	r0, [sp, #12]
 800b58a:	f000 fe69 	bl	800c260 <__mdiff>
 800b58e:	68c3      	ldr	r3, [r0, #12]
 800b590:	3430      	adds	r4, #48	; 0x30
 800b592:	930f      	str	r3, [sp, #60]	; 0x3c
 800b594:	2301      	movs	r3, #1
 800b596:	9309      	str	r3, [sp, #36]	; 0x24
 800b598:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b59a:	9006      	str	r0, [sp, #24]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d104      	bne.n	800b5aa <_dtoa_r+0xa46>
 800b5a0:	0001      	movs	r1, r0
 800b5a2:	9804      	ldr	r0, [sp, #16]
 800b5a4:	f000 fe40 	bl	800c228 <__mcmp>
 800b5a8:	9009      	str	r0, [sp, #36]	; 0x24
 800b5aa:	9803      	ldr	r0, [sp, #12]
 800b5ac:	9906      	ldr	r1, [sp, #24]
 800b5ae:	f000 fc2d 	bl	800be0c <_Bfree>
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b5b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5b8:	4018      	ands	r0, r3
 800b5ba:	9b08      	ldr	r3, [sp, #32]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	9306      	str	r3, [sp, #24]
 800b5c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	4303      	orrs	r3, r0
 800b5c6:	d109      	bne.n	800b5dc <_dtoa_r+0xa78>
 800b5c8:	2c39      	cmp	r4, #57	; 0x39
 800b5ca:	d021      	beq.n	800b610 <_dtoa_r+0xaac>
 800b5cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	dd01      	ble.n	800b5d6 <_dtoa_r+0xa72>
 800b5d2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b5d4:	3431      	adds	r4, #49	; 0x31
 800b5d6:	9b08      	ldr	r3, [sp, #32]
 800b5d8:	701c      	strb	r4, [r3, #0]
 800b5da:	e779      	b.n	800b4d0 <_dtoa_r+0x96c>
 800b5dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	db03      	blt.n	800b5ea <_dtoa_r+0xa86>
 800b5e2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	4303      	orrs	r3, r0
 800b5e8:	d11e      	bne.n	800b628 <_dtoa_r+0xac4>
 800b5ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	ddf2      	ble.n	800b5d6 <_dtoa_r+0xa72>
 800b5f0:	9904      	ldr	r1, [sp, #16]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	9803      	ldr	r0, [sp, #12]
 800b5f6:	f000 fda7 	bl	800c148 <__lshift>
 800b5fa:	0031      	movs	r1, r6
 800b5fc:	9004      	str	r0, [sp, #16]
 800b5fe:	f000 fe13 	bl	800c228 <__mcmp>
 800b602:	2800      	cmp	r0, #0
 800b604:	dc02      	bgt.n	800b60c <_dtoa_r+0xaa8>
 800b606:	d1e6      	bne.n	800b5d6 <_dtoa_r+0xa72>
 800b608:	07e3      	lsls	r3, r4, #31
 800b60a:	d5e4      	bpl.n	800b5d6 <_dtoa_r+0xa72>
 800b60c:	2c39      	cmp	r4, #57	; 0x39
 800b60e:	d1e0      	bne.n	800b5d2 <_dtoa_r+0xa6e>
 800b610:	2339      	movs	r3, #57	; 0x39
 800b612:	9a08      	ldr	r2, [sp, #32]
 800b614:	7013      	strb	r3, [r2, #0]
 800b616:	9b06      	ldr	r3, [sp, #24]
 800b618:	9306      	str	r3, [sp, #24]
 800b61a:	3b01      	subs	r3, #1
 800b61c:	781a      	ldrb	r2, [r3, #0]
 800b61e:	2a39      	cmp	r2, #57	; 0x39
 800b620:	d067      	beq.n	800b6f2 <_dtoa_r+0xb8e>
 800b622:	3201      	adds	r2, #1
 800b624:	701a      	strb	r2, [r3, #0]
 800b626:	e753      	b.n	800b4d0 <_dtoa_r+0x96c>
 800b628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	dd03      	ble.n	800b636 <_dtoa_r+0xad2>
 800b62e:	2c39      	cmp	r4, #57	; 0x39
 800b630:	d0ee      	beq.n	800b610 <_dtoa_r+0xaac>
 800b632:	3401      	adds	r4, #1
 800b634:	e7cf      	b.n	800b5d6 <_dtoa_r+0xa72>
 800b636:	9b08      	ldr	r3, [sp, #32]
 800b638:	9a05      	ldr	r2, [sp, #20]
 800b63a:	701c      	strb	r4, [r3, #0]
 800b63c:	2301      	movs	r3, #1
 800b63e:	1a9b      	subs	r3, r3, r2
 800b640:	9a08      	ldr	r2, [sp, #32]
 800b642:	189b      	adds	r3, r3, r2
 800b644:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b646:	429a      	cmp	r2, r3
 800b648:	d03e      	beq.n	800b6c8 <_dtoa_r+0xb64>
 800b64a:	2300      	movs	r3, #0
 800b64c:	220a      	movs	r2, #10
 800b64e:	9904      	ldr	r1, [sp, #16]
 800b650:	9803      	ldr	r0, [sp, #12]
 800b652:	f000 fbe5 	bl	800be20 <__multadd>
 800b656:	2300      	movs	r3, #0
 800b658:	9004      	str	r0, [sp, #16]
 800b65a:	220a      	movs	r2, #10
 800b65c:	0029      	movs	r1, r5
 800b65e:	9803      	ldr	r0, [sp, #12]
 800b660:	42bd      	cmp	r5, r7
 800b662:	d106      	bne.n	800b672 <_dtoa_r+0xb0e>
 800b664:	f000 fbdc 	bl	800be20 <__multadd>
 800b668:	0005      	movs	r5, r0
 800b66a:	0007      	movs	r7, r0
 800b66c:	9b06      	ldr	r3, [sp, #24]
 800b66e:	9308      	str	r3, [sp, #32]
 800b670:	e77d      	b.n	800b56e <_dtoa_r+0xa0a>
 800b672:	f000 fbd5 	bl	800be20 <__multadd>
 800b676:	0039      	movs	r1, r7
 800b678:	0005      	movs	r5, r0
 800b67a:	2300      	movs	r3, #0
 800b67c:	220a      	movs	r2, #10
 800b67e:	9803      	ldr	r0, [sp, #12]
 800b680:	f000 fbce 	bl	800be20 <__multadd>
 800b684:	0007      	movs	r7, r0
 800b686:	e7f1      	b.n	800b66c <_dtoa_r+0xb08>
 800b688:	9b08      	ldr	r3, [sp, #32]
 800b68a:	930c      	str	r3, [sp, #48]	; 0x30
 800b68c:	2500      	movs	r5, #0
 800b68e:	0031      	movs	r1, r6
 800b690:	9804      	ldr	r0, [sp, #16]
 800b692:	f7ff f9db 	bl	800aa4c <quorem>
 800b696:	9b05      	ldr	r3, [sp, #20]
 800b698:	3030      	adds	r0, #48	; 0x30
 800b69a:	5558      	strb	r0, [r3, r5]
 800b69c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b69e:	3501      	adds	r5, #1
 800b6a0:	0004      	movs	r4, r0
 800b6a2:	42ab      	cmp	r3, r5
 800b6a4:	dd07      	ble.n	800b6b6 <_dtoa_r+0xb52>
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	220a      	movs	r2, #10
 800b6aa:	9904      	ldr	r1, [sp, #16]
 800b6ac:	9803      	ldr	r0, [sp, #12]
 800b6ae:	f000 fbb7 	bl	800be20 <__multadd>
 800b6b2:	9004      	str	r0, [sp, #16]
 800b6b4:	e7eb      	b.n	800b68e <_dtoa_r+0xb2a>
 800b6b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6b8:	2001      	movs	r0, #1
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	dd00      	ble.n	800b6c0 <_dtoa_r+0xb5c>
 800b6be:	0018      	movs	r0, r3
 800b6c0:	2500      	movs	r5, #0
 800b6c2:	9b05      	ldr	r3, [sp, #20]
 800b6c4:	181b      	adds	r3, r3, r0
 800b6c6:	9306      	str	r3, [sp, #24]
 800b6c8:	9904      	ldr	r1, [sp, #16]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	9803      	ldr	r0, [sp, #12]
 800b6ce:	f000 fd3b 	bl	800c148 <__lshift>
 800b6d2:	0031      	movs	r1, r6
 800b6d4:	9004      	str	r0, [sp, #16]
 800b6d6:	f000 fda7 	bl	800c228 <__mcmp>
 800b6da:	2800      	cmp	r0, #0
 800b6dc:	dc9b      	bgt.n	800b616 <_dtoa_r+0xab2>
 800b6de:	d101      	bne.n	800b6e4 <_dtoa_r+0xb80>
 800b6e0:	07e3      	lsls	r3, r4, #31
 800b6e2:	d498      	bmi.n	800b616 <_dtoa_r+0xab2>
 800b6e4:	9b06      	ldr	r3, [sp, #24]
 800b6e6:	9306      	str	r3, [sp, #24]
 800b6e8:	3b01      	subs	r3, #1
 800b6ea:	781a      	ldrb	r2, [r3, #0]
 800b6ec:	2a30      	cmp	r2, #48	; 0x30
 800b6ee:	d0fa      	beq.n	800b6e6 <_dtoa_r+0xb82>
 800b6f0:	e6ee      	b.n	800b4d0 <_dtoa_r+0x96c>
 800b6f2:	9a05      	ldr	r2, [sp, #20]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d18f      	bne.n	800b618 <_dtoa_r+0xab4>
 800b6f8:	9b02      	ldr	r3, [sp, #8]
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	9302      	str	r3, [sp, #8]
 800b6fe:	2331      	movs	r3, #49	; 0x31
 800b700:	7013      	strb	r3, [r2, #0]
 800b702:	e6e5      	b.n	800b4d0 <_dtoa_r+0x96c>
 800b704:	4b08      	ldr	r3, [pc, #32]	; (800b728 <_dtoa_r+0xbc4>)
 800b706:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b708:	9305      	str	r3, [sp, #20]
 800b70a:	4b08      	ldr	r3, [pc, #32]	; (800b72c <_dtoa_r+0xbc8>)
 800b70c:	2a00      	cmp	r2, #0
 800b70e:	d001      	beq.n	800b714 <_dtoa_r+0xbb0>
 800b710:	f7ff fa5a 	bl	800abc8 <_dtoa_r+0x64>
 800b714:	f7ff fa5a 	bl	800abcc <_dtoa_r+0x68>
 800b718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	dcb6      	bgt.n	800b68c <_dtoa_r+0xb28>
 800b71e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b720:	2b02      	cmp	r3, #2
 800b722:	dd00      	ble.n	800b726 <_dtoa_r+0xbc2>
 800b724:	e6be      	b.n	800b4a4 <_dtoa_r+0x940>
 800b726:	e7b1      	b.n	800b68c <_dtoa_r+0xb28>
 800b728:	0800ea49 	.word	0x0800ea49
 800b72c:	0800ea51 	.word	0x0800ea51

0800b730 <__libc_fini_array>:
 800b730:	b570      	push	{r4, r5, r6, lr}
 800b732:	4d07      	ldr	r5, [pc, #28]	; (800b750 <__libc_fini_array+0x20>)
 800b734:	4c07      	ldr	r4, [pc, #28]	; (800b754 <__libc_fini_array+0x24>)
 800b736:	1b64      	subs	r4, r4, r5
 800b738:	10a4      	asrs	r4, r4, #2
 800b73a:	2c00      	cmp	r4, #0
 800b73c:	d102      	bne.n	800b744 <__libc_fini_array+0x14>
 800b73e:	f002 fd45 	bl	800e1cc <_fini>
 800b742:	bd70      	pop	{r4, r5, r6, pc}
 800b744:	3c01      	subs	r4, #1
 800b746:	00a3      	lsls	r3, r4, #2
 800b748:	58eb      	ldr	r3, [r5, r3]
 800b74a:	4798      	blx	r3
 800b74c:	e7f5      	b.n	800b73a <__libc_fini_array+0xa>
 800b74e:	46c0      	nop			; (mov r8, r8)
 800b750:	0800ec9c 	.word	0x0800ec9c
 800b754:	0800eca0 	.word	0x0800eca0

0800b758 <_malloc_trim_r>:
 800b758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b75a:	0004      	movs	r4, r0
 800b75c:	2008      	movs	r0, #8
 800b75e:	000d      	movs	r5, r1
 800b760:	f000 ff52 	bl	800c608 <sysconf>
 800b764:	0006      	movs	r6, r0
 800b766:	0020      	movs	r0, r4
 800b768:	f000 fb18 	bl	800bd9c <__malloc_lock>
 800b76c:	2203      	movs	r2, #3
 800b76e:	4f21      	ldr	r7, [pc, #132]	; (800b7f4 <_malloc_trim_r+0x9c>)
 800b770:	0031      	movs	r1, r6
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	4393      	bics	r3, r2
 800b778:	1b58      	subs	r0, r3, r5
 800b77a:	3811      	subs	r0, #17
 800b77c:	1980      	adds	r0, r0, r6
 800b77e:	9301      	str	r3, [sp, #4]
 800b780:	f7f4 fcde 	bl	8000140 <__udivsi3>
 800b784:	1e45      	subs	r5, r0, #1
 800b786:	4375      	muls	r5, r6
 800b788:	42ae      	cmp	r6, r5
 800b78a:	dd04      	ble.n	800b796 <_malloc_trim_r+0x3e>
 800b78c:	0020      	movs	r0, r4
 800b78e:	f000 fb0d 	bl	800bdac <__malloc_unlock>
 800b792:	2000      	movs	r0, #0
 800b794:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b796:	2100      	movs	r1, #0
 800b798:	0020      	movs	r0, r4
 800b79a:	f000 fe8f 	bl	800c4bc <_sbrk_r>
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	9a01      	ldr	r2, [sp, #4]
 800b7a2:	189b      	adds	r3, r3, r2
 800b7a4:	4298      	cmp	r0, r3
 800b7a6:	d1f1      	bne.n	800b78c <_malloc_trim_r+0x34>
 800b7a8:	0020      	movs	r0, r4
 800b7aa:	4269      	negs	r1, r5
 800b7ac:	f000 fe86 	bl	800c4bc <_sbrk_r>
 800b7b0:	1c43      	adds	r3, r0, #1
 800b7b2:	d110      	bne.n	800b7d6 <_malloc_trim_r+0x7e>
 800b7b4:	2100      	movs	r1, #0
 800b7b6:	0020      	movs	r0, r4
 800b7b8:	f000 fe80 	bl	800c4bc <_sbrk_r>
 800b7bc:	68ba      	ldr	r2, [r7, #8]
 800b7be:	1a81      	subs	r1, r0, r2
 800b7c0:	290f      	cmp	r1, #15
 800b7c2:	dde3      	ble.n	800b78c <_malloc_trim_r+0x34>
 800b7c4:	4b0c      	ldr	r3, [pc, #48]	; (800b7f8 <_malloc_trim_r+0xa0>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	1ac0      	subs	r0, r0, r3
 800b7ca:	4b0c      	ldr	r3, [pc, #48]	; (800b7fc <_malloc_trim_r+0xa4>)
 800b7cc:	6018      	str	r0, [r3, #0]
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	430b      	orrs	r3, r1
 800b7d2:	6053      	str	r3, [r2, #4]
 800b7d4:	e7da      	b.n	800b78c <_malloc_trim_r+0x34>
 800b7d6:	2601      	movs	r6, #1
 800b7d8:	9b01      	ldr	r3, [sp, #4]
 800b7da:	68ba      	ldr	r2, [r7, #8]
 800b7dc:	1b5b      	subs	r3, r3, r5
 800b7de:	4333      	orrs	r3, r6
 800b7e0:	6053      	str	r3, [r2, #4]
 800b7e2:	4b06      	ldr	r3, [pc, #24]	; (800b7fc <_malloc_trim_r+0xa4>)
 800b7e4:	0020      	movs	r0, r4
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	1b55      	subs	r5, r2, r5
 800b7ea:	601d      	str	r5, [r3, #0]
 800b7ec:	f000 fade 	bl	800bdac <__malloc_unlock>
 800b7f0:	0030      	movs	r0, r6
 800b7f2:	e7cf      	b.n	800b794 <_malloc_trim_r+0x3c>
 800b7f4:	20000444 	.word	0x20000444
 800b7f8:	2000084c 	.word	0x2000084c
 800b7fc:	20002cec 	.word	0x20002cec

0800b800 <_free_r>:
 800b800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b802:	1e0d      	subs	r5, r1, #0
 800b804:	9001      	str	r0, [sp, #4]
 800b806:	d02d      	beq.n	800b864 <_free_r+0x64>
 800b808:	f000 fac8 	bl	800bd9c <__malloc_lock>
 800b80c:	2301      	movs	r3, #1
 800b80e:	0029      	movs	r1, r5
 800b810:	469c      	mov	ip, r3
 800b812:	3908      	subs	r1, #8
 800b814:	684f      	ldr	r7, [r1, #4]
 800b816:	4662      	mov	r2, ip
 800b818:	003b      	movs	r3, r7
 800b81a:	4666      	mov	r6, ip
 800b81c:	4393      	bics	r3, r2
 800b81e:	18c8      	adds	r0, r1, r3
 800b820:	6845      	ldr	r5, [r0, #4]
 800b822:	3202      	adds	r2, #2
 800b824:	4395      	bics	r5, r2
 800b826:	4a4a      	ldr	r2, [pc, #296]	; (800b950 <_free_r+0x150>)
 800b828:	4037      	ands	r7, r6
 800b82a:	6896      	ldr	r6, [r2, #8]
 800b82c:	4286      	cmp	r6, r0
 800b82e:	d11a      	bne.n	800b866 <_free_r+0x66>
 800b830:	195b      	adds	r3, r3, r5
 800b832:	2f00      	cmp	r7, #0
 800b834:	d106      	bne.n	800b844 <_free_r+0x44>
 800b836:	6808      	ldr	r0, [r1, #0]
 800b838:	1a09      	subs	r1, r1, r0
 800b83a:	688d      	ldr	r5, [r1, #8]
 800b83c:	181b      	adds	r3, r3, r0
 800b83e:	68c8      	ldr	r0, [r1, #12]
 800b840:	60e8      	str	r0, [r5, #12]
 800b842:	6085      	str	r5, [r0, #8]
 800b844:	2001      	movs	r0, #1
 800b846:	4318      	orrs	r0, r3
 800b848:	6048      	str	r0, [r1, #4]
 800b84a:	6091      	str	r1, [r2, #8]
 800b84c:	4a41      	ldr	r2, [pc, #260]	; (800b954 <_free_r+0x154>)
 800b84e:	6812      	ldr	r2, [r2, #0]
 800b850:	429a      	cmp	r2, r3
 800b852:	d804      	bhi.n	800b85e <_free_r+0x5e>
 800b854:	4b40      	ldr	r3, [pc, #256]	; (800b958 <_free_r+0x158>)
 800b856:	9801      	ldr	r0, [sp, #4]
 800b858:	6819      	ldr	r1, [r3, #0]
 800b85a:	f7ff ff7d 	bl	800b758 <_malloc_trim_r>
 800b85e:	9801      	ldr	r0, [sp, #4]
 800b860:	f000 faa4 	bl	800bdac <__malloc_unlock>
 800b864:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b866:	2600      	movs	r6, #0
 800b868:	6045      	str	r5, [r0, #4]
 800b86a:	42b7      	cmp	r7, r6
 800b86c:	d109      	bne.n	800b882 <_free_r+0x82>
 800b86e:	680f      	ldr	r7, [r1, #0]
 800b870:	4c3a      	ldr	r4, [pc, #232]	; (800b95c <_free_r+0x15c>)
 800b872:	1bc9      	subs	r1, r1, r7
 800b874:	19db      	adds	r3, r3, r7
 800b876:	688f      	ldr	r7, [r1, #8]
 800b878:	42a7      	cmp	r7, r4
 800b87a:	d02c      	beq.n	800b8d6 <_free_r+0xd6>
 800b87c:	68cc      	ldr	r4, [r1, #12]
 800b87e:	60fc      	str	r4, [r7, #12]
 800b880:	60a7      	str	r7, [r4, #8]
 800b882:	1947      	adds	r7, r0, r5
 800b884:	687c      	ldr	r4, [r7, #4]
 800b886:	2701      	movs	r7, #1
 800b888:	423c      	tst	r4, r7
 800b88a:	d10b      	bne.n	800b8a4 <_free_r+0xa4>
 800b88c:	195b      	adds	r3, r3, r5
 800b88e:	6885      	ldr	r5, [r0, #8]
 800b890:	2e00      	cmp	r6, #0
 800b892:	d122      	bne.n	800b8da <_free_r+0xda>
 800b894:	4c31      	ldr	r4, [pc, #196]	; (800b95c <_free_r+0x15c>)
 800b896:	42a5      	cmp	r5, r4
 800b898:	d11f      	bne.n	800b8da <_free_r+0xda>
 800b89a:	003e      	movs	r6, r7
 800b89c:	6151      	str	r1, [r2, #20]
 800b89e:	6111      	str	r1, [r2, #16]
 800b8a0:	60cd      	str	r5, [r1, #12]
 800b8a2:	608d      	str	r5, [r1, #8]
 800b8a4:	2501      	movs	r5, #1
 800b8a6:	0028      	movs	r0, r5
 800b8a8:	4318      	orrs	r0, r3
 800b8aa:	6048      	str	r0, [r1, #4]
 800b8ac:	50cb      	str	r3, [r1, r3]
 800b8ae:	2e00      	cmp	r6, #0
 800b8b0:	d1d5      	bne.n	800b85e <_free_r+0x5e>
 800b8b2:	2080      	movs	r0, #128	; 0x80
 800b8b4:	0080      	lsls	r0, r0, #2
 800b8b6:	4283      	cmp	r3, r0
 800b8b8:	d213      	bcs.n	800b8e2 <_free_r+0xe2>
 800b8ba:	08d8      	lsrs	r0, r3, #3
 800b8bc:	095b      	lsrs	r3, r3, #5
 800b8be:	409d      	lsls	r5, r3
 800b8c0:	6853      	ldr	r3, [r2, #4]
 800b8c2:	00c0      	lsls	r0, r0, #3
 800b8c4:	431d      	orrs	r5, r3
 800b8c6:	6055      	str	r5, [r2, #4]
 800b8c8:	1882      	adds	r2, r0, r2
 800b8ca:	6893      	ldr	r3, [r2, #8]
 800b8cc:	60ca      	str	r2, [r1, #12]
 800b8ce:	608b      	str	r3, [r1, #8]
 800b8d0:	6091      	str	r1, [r2, #8]
 800b8d2:	60d9      	str	r1, [r3, #12]
 800b8d4:	e7c3      	b.n	800b85e <_free_r+0x5e>
 800b8d6:	4666      	mov	r6, ip
 800b8d8:	e7d3      	b.n	800b882 <_free_r+0x82>
 800b8da:	68c0      	ldr	r0, [r0, #12]
 800b8dc:	60e8      	str	r0, [r5, #12]
 800b8de:	6085      	str	r5, [r0, #8]
 800b8e0:	e7e0      	b.n	800b8a4 <_free_r+0xa4>
 800b8e2:	0a5d      	lsrs	r5, r3, #9
 800b8e4:	2d04      	cmp	r5, #4
 800b8e6:	d812      	bhi.n	800b90e <_free_r+0x10e>
 800b8e8:	0998      	lsrs	r0, r3, #6
 800b8ea:	3038      	adds	r0, #56	; 0x38
 800b8ec:	00c6      	lsls	r6, r0, #3
 800b8ee:	18b6      	adds	r6, r6, r2
 800b8f0:	68b5      	ldr	r5, [r6, #8]
 800b8f2:	2703      	movs	r7, #3
 800b8f4:	42ae      	cmp	r6, r5
 800b8f6:	d125      	bne.n	800b944 <_free_r+0x144>
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	1080      	asrs	r0, r0, #2
 800b8fc:	4083      	lsls	r3, r0
 800b8fe:	6850      	ldr	r0, [r2, #4]
 800b900:	4303      	orrs	r3, r0
 800b902:	6053      	str	r3, [r2, #4]
 800b904:	60ce      	str	r6, [r1, #12]
 800b906:	608d      	str	r5, [r1, #8]
 800b908:	60b1      	str	r1, [r6, #8]
 800b90a:	60e9      	str	r1, [r5, #12]
 800b90c:	e7a7      	b.n	800b85e <_free_r+0x5e>
 800b90e:	2d14      	cmp	r5, #20
 800b910:	d802      	bhi.n	800b918 <_free_r+0x118>
 800b912:	0028      	movs	r0, r5
 800b914:	305b      	adds	r0, #91	; 0x5b
 800b916:	e7e9      	b.n	800b8ec <_free_r+0xec>
 800b918:	2d54      	cmp	r5, #84	; 0x54
 800b91a:	d802      	bhi.n	800b922 <_free_r+0x122>
 800b91c:	0b18      	lsrs	r0, r3, #12
 800b91e:	306e      	adds	r0, #110	; 0x6e
 800b920:	e7e4      	b.n	800b8ec <_free_r+0xec>
 800b922:	20aa      	movs	r0, #170	; 0xaa
 800b924:	0040      	lsls	r0, r0, #1
 800b926:	4285      	cmp	r5, r0
 800b928:	d802      	bhi.n	800b930 <_free_r+0x130>
 800b92a:	0bd8      	lsrs	r0, r3, #15
 800b92c:	3077      	adds	r0, #119	; 0x77
 800b92e:	e7dd      	b.n	800b8ec <_free_r+0xec>
 800b930:	4e0b      	ldr	r6, [pc, #44]	; (800b960 <_free_r+0x160>)
 800b932:	207e      	movs	r0, #126	; 0x7e
 800b934:	42b5      	cmp	r5, r6
 800b936:	d8d9      	bhi.n	800b8ec <_free_r+0xec>
 800b938:	0c98      	lsrs	r0, r3, #18
 800b93a:	307c      	adds	r0, #124	; 0x7c
 800b93c:	e7d6      	b.n	800b8ec <_free_r+0xec>
 800b93e:	68ad      	ldr	r5, [r5, #8]
 800b940:	42ae      	cmp	r6, r5
 800b942:	d003      	beq.n	800b94c <_free_r+0x14c>
 800b944:	686a      	ldr	r2, [r5, #4]
 800b946:	43ba      	bics	r2, r7
 800b948:	429a      	cmp	r2, r3
 800b94a:	d8f8      	bhi.n	800b93e <_free_r+0x13e>
 800b94c:	68ee      	ldr	r6, [r5, #12]
 800b94e:	e7d9      	b.n	800b904 <_free_r+0x104>
 800b950:	20000444 	.word	0x20000444
 800b954:	20000850 	.word	0x20000850
 800b958:	20002d1c 	.word	0x20002d1c
 800b95c:	2000044c 	.word	0x2000044c
 800b960:	00000554 	.word	0x00000554

0800b964 <_localeconv_r>:
 800b964:	4800      	ldr	r0, [pc, #0]	; (800b968 <_localeconv_r+0x4>)
 800b966:	4770      	bx	lr
 800b968:	20000944 	.word	0x20000944

0800b96c <__retarget_lock_init_recursive>:
 800b96c:	4770      	bx	lr

0800b96e <__retarget_lock_close_recursive>:
 800b96e:	4770      	bx	lr

0800b970 <__retarget_lock_acquire_recursive>:
 800b970:	4770      	bx	lr

0800b972 <__retarget_lock_release_recursive>:
 800b972:	4770      	bx	lr

0800b974 <_malloc_r>:
 800b974:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b976:	000d      	movs	r5, r1
 800b978:	b087      	sub	sp, #28
 800b97a:	350b      	adds	r5, #11
 800b97c:	9001      	str	r0, [sp, #4]
 800b97e:	2d16      	cmp	r5, #22
 800b980:	d908      	bls.n	800b994 <_malloc_r+0x20>
 800b982:	2207      	movs	r2, #7
 800b984:	4395      	bics	r5, r2
 800b986:	d506      	bpl.n	800b996 <_malloc_r+0x22>
 800b988:	230c      	movs	r3, #12
 800b98a:	9a01      	ldr	r2, [sp, #4]
 800b98c:	6013      	str	r3, [r2, #0]
 800b98e:	2000      	movs	r0, #0
 800b990:	b007      	add	sp, #28
 800b992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b994:	2510      	movs	r5, #16
 800b996:	42a9      	cmp	r1, r5
 800b998:	d8f6      	bhi.n	800b988 <_malloc_r+0x14>
 800b99a:	9801      	ldr	r0, [sp, #4]
 800b99c:	f000 f9fe 	bl	800bd9c <__malloc_lock>
 800b9a0:	23fc      	movs	r3, #252	; 0xfc
 800b9a2:	48bd      	ldr	r0, [pc, #756]	; (800bc98 <_malloc_r+0x324>)
 800b9a4:	005b      	lsls	r3, r3, #1
 800b9a6:	429d      	cmp	r5, r3
 800b9a8:	d21a      	bcs.n	800b9e0 <_malloc_r+0x6c>
 800b9aa:	002a      	movs	r2, r5
 800b9ac:	3208      	adds	r2, #8
 800b9ae:	1882      	adds	r2, r0, r2
 800b9b0:	0011      	movs	r1, r2
 800b9b2:	6854      	ldr	r4, [r2, #4]
 800b9b4:	3908      	subs	r1, #8
 800b9b6:	08eb      	lsrs	r3, r5, #3
 800b9b8:	428c      	cmp	r4, r1
 800b9ba:	d103      	bne.n	800b9c4 <_malloc_r+0x50>
 800b9bc:	68d4      	ldr	r4, [r2, #12]
 800b9be:	3302      	adds	r3, #2
 800b9c0:	42a2      	cmp	r2, r4
 800b9c2:	d023      	beq.n	800ba0c <_malloc_r+0x98>
 800b9c4:	2303      	movs	r3, #3
 800b9c6:	6862      	ldr	r2, [r4, #4]
 800b9c8:	68a1      	ldr	r1, [r4, #8]
 800b9ca:	439a      	bics	r2, r3
 800b9cc:	0013      	movs	r3, r2
 800b9ce:	68e2      	ldr	r2, [r4, #12]
 800b9d0:	18e3      	adds	r3, r4, r3
 800b9d2:	60ca      	str	r2, [r1, #12]
 800b9d4:	6091      	str	r1, [r2, #8]
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	6859      	ldr	r1, [r3, #4]
 800b9da:	430a      	orrs	r2, r1
 800b9dc:	605a      	str	r2, [r3, #4]
 800b9de:	e02b      	b.n	800ba38 <_malloc_r+0xc4>
 800b9e0:	233f      	movs	r3, #63	; 0x3f
 800b9e2:	0a6a      	lsrs	r2, r5, #9
 800b9e4:	d003      	beq.n	800b9ee <_malloc_r+0x7a>
 800b9e6:	2a04      	cmp	r2, #4
 800b9e8:	d82c      	bhi.n	800ba44 <_malloc_r+0xd0>
 800b9ea:	09ab      	lsrs	r3, r5, #6
 800b9ec:	3338      	adds	r3, #56	; 0x38
 800b9ee:	2203      	movs	r2, #3
 800b9f0:	4694      	mov	ip, r2
 800b9f2:	00d9      	lsls	r1, r3, #3
 800b9f4:	1809      	adds	r1, r1, r0
 800b9f6:	68cc      	ldr	r4, [r1, #12]
 800b9f8:	428c      	cmp	r4, r1
 800b9fa:	d006      	beq.n	800ba0a <_malloc_r+0x96>
 800b9fc:	4666      	mov	r6, ip
 800b9fe:	6862      	ldr	r2, [r4, #4]
 800ba00:	43b2      	bics	r2, r6
 800ba02:	1b57      	subs	r7, r2, r5
 800ba04:	2f0f      	cmp	r7, #15
 800ba06:	dd35      	ble.n	800ba74 <_malloc_r+0x100>
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	3301      	adds	r3, #1
 800ba0c:	6904      	ldr	r4, [r0, #16]
 800ba0e:	49a3      	ldr	r1, [pc, #652]	; (800bc9c <_malloc_r+0x328>)
 800ba10:	428c      	cmp	r4, r1
 800ba12:	d056      	beq.n	800bac2 <_malloc_r+0x14e>
 800ba14:	2203      	movs	r2, #3
 800ba16:	6866      	ldr	r6, [r4, #4]
 800ba18:	4396      	bics	r6, r2
 800ba1a:	0032      	movs	r2, r6
 800ba1c:	1b76      	subs	r6, r6, r5
 800ba1e:	2e0f      	cmp	r6, #15
 800ba20:	dd36      	ble.n	800ba90 <_malloc_r+0x11c>
 800ba22:	2701      	movs	r7, #1
 800ba24:	1963      	adds	r3, r4, r5
 800ba26:	433d      	orrs	r5, r7
 800ba28:	4337      	orrs	r7, r6
 800ba2a:	6065      	str	r5, [r4, #4]
 800ba2c:	6143      	str	r3, [r0, #20]
 800ba2e:	6103      	str	r3, [r0, #16]
 800ba30:	60d9      	str	r1, [r3, #12]
 800ba32:	6099      	str	r1, [r3, #8]
 800ba34:	605f      	str	r7, [r3, #4]
 800ba36:	50a6      	str	r6, [r4, r2]
 800ba38:	9801      	ldr	r0, [sp, #4]
 800ba3a:	f000 f9b7 	bl	800bdac <__malloc_unlock>
 800ba3e:	0020      	movs	r0, r4
 800ba40:	3008      	adds	r0, #8
 800ba42:	e7a5      	b.n	800b990 <_malloc_r+0x1c>
 800ba44:	2a14      	cmp	r2, #20
 800ba46:	d802      	bhi.n	800ba4e <_malloc_r+0xda>
 800ba48:	0013      	movs	r3, r2
 800ba4a:	335b      	adds	r3, #91	; 0x5b
 800ba4c:	e7cf      	b.n	800b9ee <_malloc_r+0x7a>
 800ba4e:	2a54      	cmp	r2, #84	; 0x54
 800ba50:	d802      	bhi.n	800ba58 <_malloc_r+0xe4>
 800ba52:	0b2b      	lsrs	r3, r5, #12
 800ba54:	336e      	adds	r3, #110	; 0x6e
 800ba56:	e7ca      	b.n	800b9ee <_malloc_r+0x7a>
 800ba58:	23aa      	movs	r3, #170	; 0xaa
 800ba5a:	005b      	lsls	r3, r3, #1
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d802      	bhi.n	800ba66 <_malloc_r+0xf2>
 800ba60:	0beb      	lsrs	r3, r5, #15
 800ba62:	3377      	adds	r3, #119	; 0x77
 800ba64:	e7c3      	b.n	800b9ee <_malloc_r+0x7a>
 800ba66:	498e      	ldr	r1, [pc, #568]	; (800bca0 <_malloc_r+0x32c>)
 800ba68:	237e      	movs	r3, #126	; 0x7e
 800ba6a:	428a      	cmp	r2, r1
 800ba6c:	d8bf      	bhi.n	800b9ee <_malloc_r+0x7a>
 800ba6e:	0cab      	lsrs	r3, r5, #18
 800ba70:	337c      	adds	r3, #124	; 0x7c
 800ba72:	e7bc      	b.n	800b9ee <_malloc_r+0x7a>
 800ba74:	68e6      	ldr	r6, [r4, #12]
 800ba76:	2f00      	cmp	r7, #0
 800ba78:	db08      	blt.n	800ba8c <_malloc_r+0x118>
 800ba7a:	68a3      	ldr	r3, [r4, #8]
 800ba7c:	60de      	str	r6, [r3, #12]
 800ba7e:	60b3      	str	r3, [r6, #8]
 800ba80:	2301      	movs	r3, #1
 800ba82:	18a2      	adds	r2, r4, r2
 800ba84:	6851      	ldr	r1, [r2, #4]
 800ba86:	430b      	orrs	r3, r1
 800ba88:	6053      	str	r3, [r2, #4]
 800ba8a:	e7d5      	b.n	800ba38 <_malloc_r+0xc4>
 800ba8c:	0034      	movs	r4, r6
 800ba8e:	e7b3      	b.n	800b9f8 <_malloc_r+0x84>
 800ba90:	6141      	str	r1, [r0, #20]
 800ba92:	6101      	str	r1, [r0, #16]
 800ba94:	2e00      	cmp	r6, #0
 800ba96:	daf3      	bge.n	800ba80 <_malloc_r+0x10c>
 800ba98:	6841      	ldr	r1, [r0, #4]
 800ba9a:	468c      	mov	ip, r1
 800ba9c:	2180      	movs	r1, #128	; 0x80
 800ba9e:	0089      	lsls	r1, r1, #2
 800baa0:	428a      	cmp	r2, r1
 800baa2:	d300      	bcc.n	800baa6 <_malloc_r+0x132>
 800baa4:	e089      	b.n	800bbba <_malloc_r+0x246>
 800baa6:	0956      	lsrs	r6, r2, #5
 800baa8:	08d1      	lsrs	r1, r2, #3
 800baaa:	2201      	movs	r2, #1
 800baac:	40b2      	lsls	r2, r6
 800baae:	4666      	mov	r6, ip
 800bab0:	00c9      	lsls	r1, r1, #3
 800bab2:	4332      	orrs	r2, r6
 800bab4:	6042      	str	r2, [r0, #4]
 800bab6:	1808      	adds	r0, r1, r0
 800bab8:	6882      	ldr	r2, [r0, #8]
 800baba:	60e0      	str	r0, [r4, #12]
 800babc:	60a2      	str	r2, [r4, #8]
 800babe:	6084      	str	r4, [r0, #8]
 800bac0:	60d4      	str	r4, [r2, #12]
 800bac2:	2201      	movs	r2, #1
 800bac4:	4874      	ldr	r0, [pc, #464]	; (800bc98 <_malloc_r+0x324>)
 800bac6:	1099      	asrs	r1, r3, #2
 800bac8:	408a      	lsls	r2, r1
 800baca:	6841      	ldr	r1, [r0, #4]
 800bacc:	4291      	cmp	r1, r2
 800bace:	d325      	bcc.n	800bb1c <_malloc_r+0x1a8>
 800bad0:	420a      	tst	r2, r1
 800bad2:	d105      	bne.n	800bae0 <_malloc_r+0x16c>
 800bad4:	2403      	movs	r4, #3
 800bad6:	43a3      	bics	r3, r4
 800bad8:	0052      	lsls	r2, r2, #1
 800bada:	3304      	adds	r3, #4
 800badc:	420a      	tst	r2, r1
 800bade:	d0fb      	beq.n	800bad8 <_malloc_r+0x164>
 800bae0:	00d9      	lsls	r1, r3, #3
 800bae2:	1841      	adds	r1, r0, r1
 800bae4:	468c      	mov	ip, r1
 800bae6:	9302      	str	r3, [sp, #8]
 800bae8:	68cc      	ldr	r4, [r1, #12]
 800baea:	428c      	cmp	r4, r1
 800baec:	d000      	beq.n	800baf0 <_malloc_r+0x17c>
 800baee:	e09b      	b.n	800bc28 <_malloc_r+0x2b4>
 800baf0:	2603      	movs	r6, #3
 800baf2:	9c02      	ldr	r4, [sp, #8]
 800baf4:	3108      	adds	r1, #8
 800baf6:	3401      	adds	r4, #1
 800baf8:	9402      	str	r4, [sp, #8]
 800bafa:	4234      	tst	r4, r6
 800bafc:	d1f4      	bne.n	800bae8 <_malloc_r+0x174>
 800bafe:	2103      	movs	r1, #3
 800bb00:	420b      	tst	r3, r1
 800bb02:	d000      	beq.n	800bb06 <_malloc_r+0x192>
 800bb04:	e0b7      	b.n	800bc76 <_malloc_r+0x302>
 800bb06:	6843      	ldr	r3, [r0, #4]
 800bb08:	4393      	bics	r3, r2
 800bb0a:	6043      	str	r3, [r0, #4]
 800bb0c:	4b62      	ldr	r3, [pc, #392]	; (800bc98 <_malloc_r+0x324>)
 800bb0e:	0052      	lsls	r2, r2, #1
 800bb10:	6859      	ldr	r1, [r3, #4]
 800bb12:	4291      	cmp	r1, r2
 800bb14:	d302      	bcc.n	800bb1c <_malloc_r+0x1a8>
 800bb16:	2a00      	cmp	r2, #0
 800bb18:	d000      	beq.n	800bb1c <_malloc_r+0x1a8>
 800bb1a:	e0bb      	b.n	800bc94 <_malloc_r+0x320>
 800bb1c:	2303      	movs	r3, #3
 800bb1e:	6886      	ldr	r6, [r0, #8]
 800bb20:	6872      	ldr	r2, [r6, #4]
 800bb22:	439a      	bics	r2, r3
 800bb24:	9202      	str	r2, [sp, #8]
 800bb26:	42aa      	cmp	r2, r5
 800bb28:	d303      	bcc.n	800bb32 <_malloc_r+0x1be>
 800bb2a:	1b51      	subs	r1, r2, r5
 800bb2c:	290f      	cmp	r1, #15
 800bb2e:	dd00      	ble.n	800bb32 <_malloc_r+0x1be>
 800bb30:	e125      	b.n	800bd7e <_malloc_r+0x40a>
 800bb32:	9b02      	ldr	r3, [sp, #8]
 800bb34:	2008      	movs	r0, #8
 800bb36:	18f3      	adds	r3, r6, r3
 800bb38:	9303      	str	r3, [sp, #12]
 800bb3a:	4b5a      	ldr	r3, [pc, #360]	; (800bca4 <_malloc_r+0x330>)
 800bb3c:	681f      	ldr	r7, [r3, #0]
 800bb3e:	f000 fd63 	bl	800c608 <sysconf>
 800bb42:	4b59      	ldr	r3, [pc, #356]	; (800bca8 <_malloc_r+0x334>)
 800bb44:	3710      	adds	r7, #16
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	197f      	adds	r7, r7, r5
 800bb4a:	9004      	str	r0, [sp, #16]
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	d003      	beq.n	800bb58 <_malloc_r+0x1e4>
 800bb50:	3f01      	subs	r7, #1
 800bb52:	183f      	adds	r7, r7, r0
 800bb54:	4243      	negs	r3, r0
 800bb56:	401f      	ands	r7, r3
 800bb58:	0039      	movs	r1, r7
 800bb5a:	9801      	ldr	r0, [sp, #4]
 800bb5c:	f000 fcae 	bl	800c4bc <_sbrk_r>
 800bb60:	0004      	movs	r4, r0
 800bb62:	1c43      	adds	r3, r0, #1
 800bb64:	d100      	bne.n	800bb68 <_malloc_r+0x1f4>
 800bb66:	e0de      	b.n	800bd26 <_malloc_r+0x3b2>
 800bb68:	9b03      	ldr	r3, [sp, #12]
 800bb6a:	4283      	cmp	r3, r0
 800bb6c:	d903      	bls.n	800bb76 <_malloc_r+0x202>
 800bb6e:	4b4a      	ldr	r3, [pc, #296]	; (800bc98 <_malloc_r+0x324>)
 800bb70:	429e      	cmp	r6, r3
 800bb72:	d000      	beq.n	800bb76 <_malloc_r+0x202>
 800bb74:	e0d7      	b.n	800bd26 <_malloc_r+0x3b2>
 800bb76:	4b4d      	ldr	r3, [pc, #308]	; (800bcac <_malloc_r+0x338>)
 800bb78:	9903      	ldr	r1, [sp, #12]
 800bb7a:	681a      	ldr	r2, [r3, #0]
 800bb7c:	18ba      	adds	r2, r7, r2
 800bb7e:	601a      	str	r2, [r3, #0]
 800bb80:	9b04      	ldr	r3, [sp, #16]
 800bb82:	3b01      	subs	r3, #1
 800bb84:	42a1      	cmp	r1, r4
 800bb86:	d000      	beq.n	800bb8a <_malloc_r+0x216>
 800bb88:	e096      	b.n	800bcb8 <_malloc_r+0x344>
 800bb8a:	4219      	tst	r1, r3
 800bb8c:	d000      	beq.n	800bb90 <_malloc_r+0x21c>
 800bb8e:	e093      	b.n	800bcb8 <_malloc_r+0x344>
 800bb90:	2601      	movs	r6, #1
 800bb92:	4b41      	ldr	r3, [pc, #260]	; (800bc98 <_malloc_r+0x324>)
 800bb94:	9a02      	ldr	r2, [sp, #8]
 800bb96:	689b      	ldr	r3, [r3, #8]
 800bb98:	19d7      	adds	r7, r2, r7
 800bb9a:	433e      	orrs	r6, r7
 800bb9c:	605e      	str	r6, [r3, #4]
 800bb9e:	4b43      	ldr	r3, [pc, #268]	; (800bcac <_malloc_r+0x338>)
 800bba0:	4a43      	ldr	r2, [pc, #268]	; (800bcb0 <_malloc_r+0x33c>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	6811      	ldr	r1, [r2, #0]
 800bba6:	428b      	cmp	r3, r1
 800bba8:	d900      	bls.n	800bbac <_malloc_r+0x238>
 800bbaa:	6013      	str	r3, [r2, #0]
 800bbac:	4a41      	ldr	r2, [pc, #260]	; (800bcb4 <_malloc_r+0x340>)
 800bbae:	6811      	ldr	r1, [r2, #0]
 800bbb0:	428b      	cmp	r3, r1
 800bbb2:	d800      	bhi.n	800bbb6 <_malloc_r+0x242>
 800bbb4:	e0b7      	b.n	800bd26 <_malloc_r+0x3b2>
 800bbb6:	6013      	str	r3, [r2, #0]
 800bbb8:	e0b5      	b.n	800bd26 <_malloc_r+0x3b2>
 800bbba:	0a56      	lsrs	r6, r2, #9
 800bbbc:	2e04      	cmp	r6, #4
 800bbbe:	d811      	bhi.n	800bbe4 <_malloc_r+0x270>
 800bbc0:	0991      	lsrs	r1, r2, #6
 800bbc2:	3138      	adds	r1, #56	; 0x38
 800bbc4:	00cf      	lsls	r7, r1, #3
 800bbc6:	183f      	adds	r7, r7, r0
 800bbc8:	68be      	ldr	r6, [r7, #8]
 800bbca:	42b7      	cmp	r7, r6
 800bbcc:	d125      	bne.n	800bc1a <_malloc_r+0x2a6>
 800bbce:	2201      	movs	r2, #1
 800bbd0:	1089      	asrs	r1, r1, #2
 800bbd2:	408a      	lsls	r2, r1
 800bbd4:	4661      	mov	r1, ip
 800bbd6:	430a      	orrs	r2, r1
 800bbd8:	6042      	str	r2, [r0, #4]
 800bbda:	60e7      	str	r7, [r4, #12]
 800bbdc:	60a6      	str	r6, [r4, #8]
 800bbde:	60bc      	str	r4, [r7, #8]
 800bbe0:	60f4      	str	r4, [r6, #12]
 800bbe2:	e76e      	b.n	800bac2 <_malloc_r+0x14e>
 800bbe4:	2e14      	cmp	r6, #20
 800bbe6:	d802      	bhi.n	800bbee <_malloc_r+0x27a>
 800bbe8:	0031      	movs	r1, r6
 800bbea:	315b      	adds	r1, #91	; 0x5b
 800bbec:	e7ea      	b.n	800bbc4 <_malloc_r+0x250>
 800bbee:	2e54      	cmp	r6, #84	; 0x54
 800bbf0:	d802      	bhi.n	800bbf8 <_malloc_r+0x284>
 800bbf2:	0b11      	lsrs	r1, r2, #12
 800bbf4:	316e      	adds	r1, #110	; 0x6e
 800bbf6:	e7e5      	b.n	800bbc4 <_malloc_r+0x250>
 800bbf8:	21aa      	movs	r1, #170	; 0xaa
 800bbfa:	0049      	lsls	r1, r1, #1
 800bbfc:	428e      	cmp	r6, r1
 800bbfe:	d802      	bhi.n	800bc06 <_malloc_r+0x292>
 800bc00:	0bd1      	lsrs	r1, r2, #15
 800bc02:	3177      	adds	r1, #119	; 0x77
 800bc04:	e7de      	b.n	800bbc4 <_malloc_r+0x250>
 800bc06:	4f26      	ldr	r7, [pc, #152]	; (800bca0 <_malloc_r+0x32c>)
 800bc08:	217e      	movs	r1, #126	; 0x7e
 800bc0a:	42be      	cmp	r6, r7
 800bc0c:	d8da      	bhi.n	800bbc4 <_malloc_r+0x250>
 800bc0e:	0c91      	lsrs	r1, r2, #18
 800bc10:	317c      	adds	r1, #124	; 0x7c
 800bc12:	e7d7      	b.n	800bbc4 <_malloc_r+0x250>
 800bc14:	68b6      	ldr	r6, [r6, #8]
 800bc16:	42b7      	cmp	r7, r6
 800bc18:	d004      	beq.n	800bc24 <_malloc_r+0x2b0>
 800bc1a:	2003      	movs	r0, #3
 800bc1c:	6871      	ldr	r1, [r6, #4]
 800bc1e:	4381      	bics	r1, r0
 800bc20:	4291      	cmp	r1, r2
 800bc22:	d8f7      	bhi.n	800bc14 <_malloc_r+0x2a0>
 800bc24:	68f7      	ldr	r7, [r6, #12]
 800bc26:	e7d8      	b.n	800bbda <_malloc_r+0x266>
 800bc28:	2703      	movs	r7, #3
 800bc2a:	6866      	ldr	r6, [r4, #4]
 800bc2c:	43be      	bics	r6, r7
 800bc2e:	9603      	str	r6, [sp, #12]
 800bc30:	1b77      	subs	r7, r6, r5
 800bc32:	68e6      	ldr	r6, [r4, #12]
 800bc34:	2f0f      	cmp	r7, #15
 800bc36:	dd10      	ble.n	800bc5a <_malloc_r+0x2e6>
 800bc38:	2201      	movs	r2, #1
 800bc3a:	68a1      	ldr	r1, [r4, #8]
 800bc3c:	1963      	adds	r3, r4, r5
 800bc3e:	4315      	orrs	r5, r2
 800bc40:	6065      	str	r5, [r4, #4]
 800bc42:	60ce      	str	r6, [r1, #12]
 800bc44:	60b1      	str	r1, [r6, #8]
 800bc46:	6143      	str	r3, [r0, #20]
 800bc48:	6103      	str	r3, [r0, #16]
 800bc4a:	4814      	ldr	r0, [pc, #80]	; (800bc9c <_malloc_r+0x328>)
 800bc4c:	433a      	orrs	r2, r7
 800bc4e:	60d8      	str	r0, [r3, #12]
 800bc50:	6098      	str	r0, [r3, #8]
 800bc52:	605a      	str	r2, [r3, #4]
 800bc54:	9b03      	ldr	r3, [sp, #12]
 800bc56:	50e7      	str	r7, [r4, r3]
 800bc58:	e6ee      	b.n	800ba38 <_malloc_r+0xc4>
 800bc5a:	2f00      	cmp	r7, #0
 800bc5c:	db09      	blt.n	800bc72 <_malloc_r+0x2fe>
 800bc5e:	9b03      	ldr	r3, [sp, #12]
 800bc60:	18e1      	adds	r1, r4, r3
 800bc62:	2301      	movs	r3, #1
 800bc64:	684a      	ldr	r2, [r1, #4]
 800bc66:	4313      	orrs	r3, r2
 800bc68:	604b      	str	r3, [r1, #4]
 800bc6a:	68a3      	ldr	r3, [r4, #8]
 800bc6c:	60de      	str	r6, [r3, #12]
 800bc6e:	60b3      	str	r3, [r6, #8]
 800bc70:	e6e2      	b.n	800ba38 <_malloc_r+0xc4>
 800bc72:	0034      	movs	r4, r6
 800bc74:	e739      	b.n	800baea <_malloc_r+0x176>
 800bc76:	2108      	movs	r1, #8
 800bc78:	4249      	negs	r1, r1
 800bc7a:	448c      	add	ip, r1
 800bc7c:	4661      	mov	r1, ip
 800bc7e:	6889      	ldr	r1, [r1, #8]
 800bc80:	3b01      	subs	r3, #1
 800bc82:	4561      	cmp	r1, ip
 800bc84:	d100      	bne.n	800bc88 <_malloc_r+0x314>
 800bc86:	e73a      	b.n	800bafe <_malloc_r+0x18a>
 800bc88:	e740      	b.n	800bb0c <_malloc_r+0x198>
 800bc8a:	3304      	adds	r3, #4
 800bc8c:	0052      	lsls	r2, r2, #1
 800bc8e:	420a      	tst	r2, r1
 800bc90:	d0fb      	beq.n	800bc8a <_malloc_r+0x316>
 800bc92:	e725      	b.n	800bae0 <_malloc_r+0x16c>
 800bc94:	9b02      	ldr	r3, [sp, #8]
 800bc96:	e7fa      	b.n	800bc8e <_malloc_r+0x31a>
 800bc98:	20000444 	.word	0x20000444
 800bc9c:	2000044c 	.word	0x2000044c
 800bca0:	00000554 	.word	0x00000554
 800bca4:	20002d1c 	.word	0x20002d1c
 800bca8:	2000084c 	.word	0x2000084c
 800bcac:	20002cec 	.word	0x20002cec
 800bcb0:	20002d14 	.word	0x20002d14
 800bcb4:	20002d18 	.word	0x20002d18
 800bcb8:	4935      	ldr	r1, [pc, #212]	; (800bd90 <_malloc_r+0x41c>)
 800bcba:	6808      	ldr	r0, [r1, #0]
 800bcbc:	3001      	adds	r0, #1
 800bcbe:	d140      	bne.n	800bd42 <_malloc_r+0x3ce>
 800bcc0:	600c      	str	r4, [r1, #0]
 800bcc2:	2207      	movs	r2, #7
 800bcc4:	0021      	movs	r1, r4
 800bcc6:	4011      	ands	r1, r2
 800bcc8:	2000      	movs	r0, #0
 800bcca:	9103      	str	r1, [sp, #12]
 800bccc:	4214      	tst	r4, r2
 800bcce:	d002      	beq.n	800bcd6 <_malloc_r+0x362>
 800bcd0:	3008      	adds	r0, #8
 800bcd2:	1a40      	subs	r0, r0, r1
 800bcd4:	1824      	adds	r4, r4, r0
 800bcd6:	19e2      	adds	r2, r4, r7
 800bcd8:	9205      	str	r2, [sp, #20]
 800bcda:	9f05      	ldr	r7, [sp, #20]
 800bcdc:	9a04      	ldr	r2, [sp, #16]
 800bcde:	401f      	ands	r7, r3
 800bce0:	1810      	adds	r0, r2, r0
 800bce2:	1bc7      	subs	r7, r0, r7
 800bce4:	401f      	ands	r7, r3
 800bce6:	0039      	movs	r1, r7
 800bce8:	9801      	ldr	r0, [sp, #4]
 800bcea:	f000 fbe7 	bl	800c4bc <_sbrk_r>
 800bcee:	1c43      	adds	r3, r0, #1
 800bcf0:	d107      	bne.n	800bd02 <_malloc_r+0x38e>
 800bcf2:	9b03      	ldr	r3, [sp, #12]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d02a      	beq.n	800bd4e <_malloc_r+0x3da>
 800bcf8:	0018      	movs	r0, r3
 800bcfa:	2700      	movs	r7, #0
 800bcfc:	9b05      	ldr	r3, [sp, #20]
 800bcfe:	3808      	subs	r0, #8
 800bd00:	1818      	adds	r0, r3, r0
 800bd02:	4a24      	ldr	r2, [pc, #144]	; (800bd94 <_malloc_r+0x420>)
 800bd04:	1b00      	subs	r0, r0, r4
 800bd06:	6813      	ldr	r3, [r2, #0]
 800bd08:	19db      	adds	r3, r3, r7
 800bd0a:	6013      	str	r3, [r2, #0]
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	4b22      	ldr	r3, [pc, #136]	; (800bd98 <_malloc_r+0x424>)
 800bd10:	19c7      	adds	r7, r0, r7
 800bd12:	4317      	orrs	r7, r2
 800bd14:	609c      	str	r4, [r3, #8]
 800bd16:	6067      	str	r7, [r4, #4]
 800bd18:	429e      	cmp	r6, r3
 800bd1a:	d100      	bne.n	800bd1e <_malloc_r+0x3aa>
 800bd1c:	e73f      	b.n	800bb9e <_malloc_r+0x22a>
 800bd1e:	9b02      	ldr	r3, [sp, #8]
 800bd20:	2b0f      	cmp	r3, #15
 800bd22:	d817      	bhi.n	800bd54 <_malloc_r+0x3e0>
 800bd24:	6062      	str	r2, [r4, #4]
 800bd26:	2203      	movs	r2, #3
 800bd28:	4b1b      	ldr	r3, [pc, #108]	; (800bd98 <_malloc_r+0x424>)
 800bd2a:	689b      	ldr	r3, [r3, #8]
 800bd2c:	685b      	ldr	r3, [r3, #4]
 800bd2e:	4393      	bics	r3, r2
 800bd30:	1b59      	subs	r1, r3, r5
 800bd32:	42ab      	cmp	r3, r5
 800bd34:	d301      	bcc.n	800bd3a <_malloc_r+0x3c6>
 800bd36:	290f      	cmp	r1, #15
 800bd38:	dc21      	bgt.n	800bd7e <_malloc_r+0x40a>
 800bd3a:	9801      	ldr	r0, [sp, #4]
 800bd3c:	f000 f836 	bl	800bdac <__malloc_unlock>
 800bd40:	e625      	b.n	800b98e <_malloc_r+0x1a>
 800bd42:	9903      	ldr	r1, [sp, #12]
 800bd44:	1a61      	subs	r1, r4, r1
 800bd46:	1889      	adds	r1, r1, r2
 800bd48:	4a12      	ldr	r2, [pc, #72]	; (800bd94 <_malloc_r+0x420>)
 800bd4a:	6011      	str	r1, [r2, #0]
 800bd4c:	e7b9      	b.n	800bcc2 <_malloc_r+0x34e>
 800bd4e:	9805      	ldr	r0, [sp, #20]
 800bd50:	9f03      	ldr	r7, [sp, #12]
 800bd52:	e7d6      	b.n	800bd02 <_malloc_r+0x38e>
 800bd54:	2307      	movs	r3, #7
 800bd56:	9f02      	ldr	r7, [sp, #8]
 800bd58:	3f0c      	subs	r7, #12
 800bd5a:	439f      	bics	r7, r3
 800bd5c:	6873      	ldr	r3, [r6, #4]
 800bd5e:	401a      	ands	r2, r3
 800bd60:	433a      	orrs	r2, r7
 800bd62:	6072      	str	r2, [r6, #4]
 800bd64:	2205      	movs	r2, #5
 800bd66:	19f3      	adds	r3, r6, r7
 800bd68:	605a      	str	r2, [r3, #4]
 800bd6a:	609a      	str	r2, [r3, #8]
 800bd6c:	2f0f      	cmp	r7, #15
 800bd6e:	d800      	bhi.n	800bd72 <_malloc_r+0x3fe>
 800bd70:	e715      	b.n	800bb9e <_malloc_r+0x22a>
 800bd72:	0031      	movs	r1, r6
 800bd74:	9801      	ldr	r0, [sp, #4]
 800bd76:	3108      	adds	r1, #8
 800bd78:	f7ff fd42 	bl	800b800 <_free_r>
 800bd7c:	e70f      	b.n	800bb9e <_malloc_r+0x22a>
 800bd7e:	2201      	movs	r2, #1
 800bd80:	0013      	movs	r3, r2
 800bd82:	4805      	ldr	r0, [pc, #20]	; (800bd98 <_malloc_r+0x424>)
 800bd84:	432b      	orrs	r3, r5
 800bd86:	6884      	ldr	r4, [r0, #8]
 800bd88:	6063      	str	r3, [r4, #4]
 800bd8a:	1963      	adds	r3, r4, r5
 800bd8c:	6083      	str	r3, [r0, #8]
 800bd8e:	e624      	b.n	800b9da <_malloc_r+0x66>
 800bd90:	2000084c 	.word	0x2000084c
 800bd94:	20002cec 	.word	0x20002cec
 800bd98:	20000444 	.word	0x20000444

0800bd9c <__malloc_lock>:
 800bd9c:	b510      	push	{r4, lr}
 800bd9e:	4802      	ldr	r0, [pc, #8]	; (800bda8 <__malloc_lock+0xc>)
 800bda0:	f7ff fde6 	bl	800b970 <__retarget_lock_acquire_recursive>
 800bda4:	bd10      	pop	{r4, pc}
 800bda6:	46c0      	nop			; (mov r8, r8)
 800bda8:	20003b70 	.word	0x20003b70

0800bdac <__malloc_unlock>:
 800bdac:	b510      	push	{r4, lr}
 800bdae:	4802      	ldr	r0, [pc, #8]	; (800bdb8 <__malloc_unlock+0xc>)
 800bdb0:	f7ff fddf 	bl	800b972 <__retarget_lock_release_recursive>
 800bdb4:	bd10      	pop	{r4, pc}
 800bdb6:	46c0      	nop			; (mov r8, r8)
 800bdb8:	20003b70 	.word	0x20003b70

0800bdbc <_Balloc>:
 800bdbc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800bdbe:	b570      	push	{r4, r5, r6, lr}
 800bdc0:	0006      	movs	r6, r0
 800bdc2:	000c      	movs	r4, r1
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d012      	beq.n	800bdee <_Balloc+0x32>
 800bdc8:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 800bdca:	00a3      	lsls	r3, r4, #2
 800bdcc:	18d3      	adds	r3, r2, r3
 800bdce:	6818      	ldr	r0, [r3, #0]
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	d115      	bne.n	800be00 <_Balloc+0x44>
 800bdd4:	2101      	movs	r1, #1
 800bdd6:	000d      	movs	r5, r1
 800bdd8:	40a5      	lsls	r5, r4
 800bdda:	1d6a      	adds	r2, r5, #5
 800bddc:	0030      	movs	r0, r6
 800bdde:	0092      	lsls	r2, r2, #2
 800bde0:	f000 fc7e 	bl	800c6e0 <_calloc_r>
 800bde4:	2800      	cmp	r0, #0
 800bde6:	d009      	beq.n	800bdfc <_Balloc+0x40>
 800bde8:	6044      	str	r4, [r0, #4]
 800bdea:	6085      	str	r5, [r0, #8]
 800bdec:	e00a      	b.n	800be04 <_Balloc+0x48>
 800bdee:	2221      	movs	r2, #33	; 0x21
 800bdf0:	2104      	movs	r1, #4
 800bdf2:	f000 fc75 	bl	800c6e0 <_calloc_r>
 800bdf6:	64f0      	str	r0, [r6, #76]	; 0x4c
 800bdf8:	2800      	cmp	r0, #0
 800bdfa:	d1e5      	bne.n	800bdc8 <_Balloc+0xc>
 800bdfc:	2000      	movs	r0, #0
 800bdfe:	bd70      	pop	{r4, r5, r6, pc}
 800be00:	6802      	ldr	r2, [r0, #0]
 800be02:	601a      	str	r2, [r3, #0]
 800be04:	2300      	movs	r3, #0
 800be06:	6103      	str	r3, [r0, #16]
 800be08:	60c3      	str	r3, [r0, #12]
 800be0a:	e7f8      	b.n	800bdfe <_Balloc+0x42>

0800be0c <_Bfree>:
 800be0c:	2900      	cmp	r1, #0
 800be0e:	d006      	beq.n	800be1e <_Bfree+0x12>
 800be10:	684b      	ldr	r3, [r1, #4]
 800be12:	009a      	lsls	r2, r3, #2
 800be14:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800be16:	189b      	adds	r3, r3, r2
 800be18:	681a      	ldr	r2, [r3, #0]
 800be1a:	600a      	str	r2, [r1, #0]
 800be1c:	6019      	str	r1, [r3, #0]
 800be1e:	4770      	bx	lr

0800be20 <__multadd>:
 800be20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be22:	000e      	movs	r6, r1
 800be24:	9001      	str	r0, [sp, #4]
 800be26:	000c      	movs	r4, r1
 800be28:	001d      	movs	r5, r3
 800be2a:	2000      	movs	r0, #0
 800be2c:	690f      	ldr	r7, [r1, #16]
 800be2e:	3614      	adds	r6, #20
 800be30:	6833      	ldr	r3, [r6, #0]
 800be32:	3001      	adds	r0, #1
 800be34:	b299      	uxth	r1, r3
 800be36:	4351      	muls	r1, r2
 800be38:	0c1b      	lsrs	r3, r3, #16
 800be3a:	4353      	muls	r3, r2
 800be3c:	1949      	adds	r1, r1, r5
 800be3e:	0c0d      	lsrs	r5, r1, #16
 800be40:	195b      	adds	r3, r3, r5
 800be42:	0c1d      	lsrs	r5, r3, #16
 800be44:	b289      	uxth	r1, r1
 800be46:	041b      	lsls	r3, r3, #16
 800be48:	185b      	adds	r3, r3, r1
 800be4a:	c608      	stmia	r6!, {r3}
 800be4c:	4287      	cmp	r7, r0
 800be4e:	dcef      	bgt.n	800be30 <__multadd+0x10>
 800be50:	2d00      	cmp	r5, #0
 800be52:	d022      	beq.n	800be9a <__multadd+0x7a>
 800be54:	68a3      	ldr	r3, [r4, #8]
 800be56:	42bb      	cmp	r3, r7
 800be58:	dc19      	bgt.n	800be8e <__multadd+0x6e>
 800be5a:	6863      	ldr	r3, [r4, #4]
 800be5c:	9801      	ldr	r0, [sp, #4]
 800be5e:	1c59      	adds	r1, r3, #1
 800be60:	f7ff ffac 	bl	800bdbc <_Balloc>
 800be64:	1e06      	subs	r6, r0, #0
 800be66:	d105      	bne.n	800be74 <__multadd+0x54>
 800be68:	0002      	movs	r2, r0
 800be6a:	21b5      	movs	r1, #181	; 0xb5
 800be6c:	4b0c      	ldr	r3, [pc, #48]	; (800bea0 <__multadd+0x80>)
 800be6e:	480d      	ldr	r0, [pc, #52]	; (800bea4 <__multadd+0x84>)
 800be70:	f000 fc18 	bl	800c6a4 <__assert_func>
 800be74:	0021      	movs	r1, r4
 800be76:	6923      	ldr	r3, [r4, #16]
 800be78:	310c      	adds	r1, #12
 800be7a:	1c9a      	adds	r2, r3, #2
 800be7c:	0092      	lsls	r2, r2, #2
 800be7e:	300c      	adds	r0, #12
 800be80:	f7fd fa47 	bl	8009312 <memcpy>
 800be84:	0021      	movs	r1, r4
 800be86:	9801      	ldr	r0, [sp, #4]
 800be88:	f7ff ffc0 	bl	800be0c <_Bfree>
 800be8c:	0034      	movs	r4, r6
 800be8e:	1d3b      	adds	r3, r7, #4
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	18e3      	adds	r3, r4, r3
 800be94:	605d      	str	r5, [r3, #4]
 800be96:	1c7b      	adds	r3, r7, #1
 800be98:	6123      	str	r3, [r4, #16]
 800be9a:	0020      	movs	r0, r4
 800be9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800be9e:	46c0      	nop			; (mov r8, r8)
 800bea0:	0800ea52 	.word	0x0800ea52
 800bea4:	0800eac2 	.word	0x0800eac2

0800bea8 <__hi0bits>:
 800bea8:	0003      	movs	r3, r0
 800beaa:	0c02      	lsrs	r2, r0, #16
 800beac:	2000      	movs	r0, #0
 800beae:	4282      	cmp	r2, r0
 800beb0:	d101      	bne.n	800beb6 <__hi0bits+0xe>
 800beb2:	041b      	lsls	r3, r3, #16
 800beb4:	3010      	adds	r0, #16
 800beb6:	0e1a      	lsrs	r2, r3, #24
 800beb8:	d101      	bne.n	800bebe <__hi0bits+0x16>
 800beba:	3008      	adds	r0, #8
 800bebc:	021b      	lsls	r3, r3, #8
 800bebe:	0f1a      	lsrs	r2, r3, #28
 800bec0:	d101      	bne.n	800bec6 <__hi0bits+0x1e>
 800bec2:	3004      	adds	r0, #4
 800bec4:	011b      	lsls	r3, r3, #4
 800bec6:	0f9a      	lsrs	r2, r3, #30
 800bec8:	d101      	bne.n	800bece <__hi0bits+0x26>
 800beca:	3002      	adds	r0, #2
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	2b00      	cmp	r3, #0
 800bed0:	db03      	blt.n	800beda <__hi0bits+0x32>
 800bed2:	3001      	adds	r0, #1
 800bed4:	005b      	lsls	r3, r3, #1
 800bed6:	d400      	bmi.n	800beda <__hi0bits+0x32>
 800bed8:	2020      	movs	r0, #32
 800beda:	4770      	bx	lr

0800bedc <__lo0bits>:
 800bedc:	6803      	ldr	r3, [r0, #0]
 800bede:	0002      	movs	r2, r0
 800bee0:	2107      	movs	r1, #7
 800bee2:	0018      	movs	r0, r3
 800bee4:	4008      	ands	r0, r1
 800bee6:	420b      	tst	r3, r1
 800bee8:	d00d      	beq.n	800bf06 <__lo0bits+0x2a>
 800beea:	3906      	subs	r1, #6
 800beec:	2000      	movs	r0, #0
 800beee:	420b      	tst	r3, r1
 800bef0:	d105      	bne.n	800befe <__lo0bits+0x22>
 800bef2:	3002      	adds	r0, #2
 800bef4:	4203      	tst	r3, r0
 800bef6:	d003      	beq.n	800bf00 <__lo0bits+0x24>
 800bef8:	40cb      	lsrs	r3, r1
 800befa:	0008      	movs	r0, r1
 800befc:	6013      	str	r3, [r2, #0]
 800befe:	4770      	bx	lr
 800bf00:	089b      	lsrs	r3, r3, #2
 800bf02:	6013      	str	r3, [r2, #0]
 800bf04:	e7fb      	b.n	800befe <__lo0bits+0x22>
 800bf06:	b299      	uxth	r1, r3
 800bf08:	2900      	cmp	r1, #0
 800bf0a:	d101      	bne.n	800bf10 <__lo0bits+0x34>
 800bf0c:	2010      	movs	r0, #16
 800bf0e:	0c1b      	lsrs	r3, r3, #16
 800bf10:	b2d9      	uxtb	r1, r3
 800bf12:	2900      	cmp	r1, #0
 800bf14:	d101      	bne.n	800bf1a <__lo0bits+0x3e>
 800bf16:	3008      	adds	r0, #8
 800bf18:	0a1b      	lsrs	r3, r3, #8
 800bf1a:	0719      	lsls	r1, r3, #28
 800bf1c:	d101      	bne.n	800bf22 <__lo0bits+0x46>
 800bf1e:	3004      	adds	r0, #4
 800bf20:	091b      	lsrs	r3, r3, #4
 800bf22:	0799      	lsls	r1, r3, #30
 800bf24:	d101      	bne.n	800bf2a <__lo0bits+0x4e>
 800bf26:	3002      	adds	r0, #2
 800bf28:	089b      	lsrs	r3, r3, #2
 800bf2a:	07d9      	lsls	r1, r3, #31
 800bf2c:	d4e9      	bmi.n	800bf02 <__lo0bits+0x26>
 800bf2e:	3001      	adds	r0, #1
 800bf30:	085b      	lsrs	r3, r3, #1
 800bf32:	d1e6      	bne.n	800bf02 <__lo0bits+0x26>
 800bf34:	2020      	movs	r0, #32
 800bf36:	e7e2      	b.n	800befe <__lo0bits+0x22>

0800bf38 <__i2b>:
 800bf38:	b510      	push	{r4, lr}
 800bf3a:	000c      	movs	r4, r1
 800bf3c:	2101      	movs	r1, #1
 800bf3e:	f7ff ff3d 	bl	800bdbc <_Balloc>
 800bf42:	2800      	cmp	r0, #0
 800bf44:	d106      	bne.n	800bf54 <__i2b+0x1c>
 800bf46:	21a0      	movs	r1, #160	; 0xa0
 800bf48:	0002      	movs	r2, r0
 800bf4a:	4b04      	ldr	r3, [pc, #16]	; (800bf5c <__i2b+0x24>)
 800bf4c:	4804      	ldr	r0, [pc, #16]	; (800bf60 <__i2b+0x28>)
 800bf4e:	0049      	lsls	r1, r1, #1
 800bf50:	f000 fba8 	bl	800c6a4 <__assert_func>
 800bf54:	2301      	movs	r3, #1
 800bf56:	6144      	str	r4, [r0, #20]
 800bf58:	6103      	str	r3, [r0, #16]
 800bf5a:	bd10      	pop	{r4, pc}
 800bf5c:	0800ea52 	.word	0x0800ea52
 800bf60:	0800eac2 	.word	0x0800eac2

0800bf64 <__multiply>:
 800bf64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf66:	690b      	ldr	r3, [r1, #16]
 800bf68:	0014      	movs	r4, r2
 800bf6a:	6912      	ldr	r2, [r2, #16]
 800bf6c:	000d      	movs	r5, r1
 800bf6e:	b089      	sub	sp, #36	; 0x24
 800bf70:	4293      	cmp	r3, r2
 800bf72:	da01      	bge.n	800bf78 <__multiply+0x14>
 800bf74:	0025      	movs	r5, r4
 800bf76:	000c      	movs	r4, r1
 800bf78:	692f      	ldr	r7, [r5, #16]
 800bf7a:	6926      	ldr	r6, [r4, #16]
 800bf7c:	6869      	ldr	r1, [r5, #4]
 800bf7e:	19bb      	adds	r3, r7, r6
 800bf80:	9302      	str	r3, [sp, #8]
 800bf82:	68ab      	ldr	r3, [r5, #8]
 800bf84:	19ba      	adds	r2, r7, r6
 800bf86:	4293      	cmp	r3, r2
 800bf88:	da00      	bge.n	800bf8c <__multiply+0x28>
 800bf8a:	3101      	adds	r1, #1
 800bf8c:	f7ff ff16 	bl	800bdbc <_Balloc>
 800bf90:	9001      	str	r0, [sp, #4]
 800bf92:	2800      	cmp	r0, #0
 800bf94:	d106      	bne.n	800bfa4 <__multiply+0x40>
 800bf96:	215e      	movs	r1, #94	; 0x5e
 800bf98:	0002      	movs	r2, r0
 800bf9a:	4b48      	ldr	r3, [pc, #288]	; (800c0bc <__multiply+0x158>)
 800bf9c:	4848      	ldr	r0, [pc, #288]	; (800c0c0 <__multiply+0x15c>)
 800bf9e:	31ff      	adds	r1, #255	; 0xff
 800bfa0:	f000 fb80 	bl	800c6a4 <__assert_func>
 800bfa4:	9b01      	ldr	r3, [sp, #4]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	3314      	adds	r3, #20
 800bfaa:	469c      	mov	ip, r3
 800bfac:	19bb      	adds	r3, r7, r6
 800bfae:	009b      	lsls	r3, r3, #2
 800bfb0:	4463      	add	r3, ip
 800bfb2:	9303      	str	r3, [sp, #12]
 800bfb4:	4663      	mov	r3, ip
 800bfb6:	9903      	ldr	r1, [sp, #12]
 800bfb8:	428b      	cmp	r3, r1
 800bfba:	d32c      	bcc.n	800c016 <__multiply+0xb2>
 800bfbc:	002b      	movs	r3, r5
 800bfbe:	0022      	movs	r2, r4
 800bfc0:	3314      	adds	r3, #20
 800bfc2:	00bf      	lsls	r7, r7, #2
 800bfc4:	3214      	adds	r2, #20
 800bfc6:	9306      	str	r3, [sp, #24]
 800bfc8:	00b6      	lsls	r6, r6, #2
 800bfca:	19db      	adds	r3, r3, r7
 800bfcc:	9304      	str	r3, [sp, #16]
 800bfce:	1993      	adds	r3, r2, r6
 800bfd0:	9307      	str	r3, [sp, #28]
 800bfd2:	2304      	movs	r3, #4
 800bfd4:	9305      	str	r3, [sp, #20]
 800bfd6:	002b      	movs	r3, r5
 800bfd8:	9904      	ldr	r1, [sp, #16]
 800bfda:	3315      	adds	r3, #21
 800bfdc:	9200      	str	r2, [sp, #0]
 800bfde:	4299      	cmp	r1, r3
 800bfe0:	d305      	bcc.n	800bfee <__multiply+0x8a>
 800bfe2:	1b4b      	subs	r3, r1, r5
 800bfe4:	3b15      	subs	r3, #21
 800bfe6:	089b      	lsrs	r3, r3, #2
 800bfe8:	3301      	adds	r3, #1
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	9305      	str	r3, [sp, #20]
 800bfee:	9b07      	ldr	r3, [sp, #28]
 800bff0:	9a00      	ldr	r2, [sp, #0]
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d311      	bcc.n	800c01a <__multiply+0xb6>
 800bff6:	9b02      	ldr	r3, [sp, #8]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	dd06      	ble.n	800c00a <__multiply+0xa6>
 800bffc:	9b03      	ldr	r3, [sp, #12]
 800bffe:	3b04      	subs	r3, #4
 800c000:	9303      	str	r3, [sp, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	9300      	str	r3, [sp, #0]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d054      	beq.n	800c0b4 <__multiply+0x150>
 800c00a:	9b01      	ldr	r3, [sp, #4]
 800c00c:	9a02      	ldr	r2, [sp, #8]
 800c00e:	0018      	movs	r0, r3
 800c010:	611a      	str	r2, [r3, #16]
 800c012:	b009      	add	sp, #36	; 0x24
 800c014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c016:	c304      	stmia	r3!, {r2}
 800c018:	e7cd      	b.n	800bfb6 <__multiply+0x52>
 800c01a:	9b00      	ldr	r3, [sp, #0]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	b298      	uxth	r0, r3
 800c020:	2800      	cmp	r0, #0
 800c022:	d01c      	beq.n	800c05e <__multiply+0xfa>
 800c024:	4667      	mov	r7, ip
 800c026:	2400      	movs	r4, #0
 800c028:	9e06      	ldr	r6, [sp, #24]
 800c02a:	ce02      	ldmia	r6!, {r1}
 800c02c:	683a      	ldr	r2, [r7, #0]
 800c02e:	b28b      	uxth	r3, r1
 800c030:	4343      	muls	r3, r0
 800c032:	0c09      	lsrs	r1, r1, #16
 800c034:	4341      	muls	r1, r0
 800c036:	b292      	uxth	r2, r2
 800c038:	189b      	adds	r3, r3, r2
 800c03a:	191b      	adds	r3, r3, r4
 800c03c:	000c      	movs	r4, r1
 800c03e:	683a      	ldr	r2, [r7, #0]
 800c040:	0c11      	lsrs	r1, r2, #16
 800c042:	1861      	adds	r1, r4, r1
 800c044:	0c1c      	lsrs	r4, r3, #16
 800c046:	1909      	adds	r1, r1, r4
 800c048:	0c0c      	lsrs	r4, r1, #16
 800c04a:	b29b      	uxth	r3, r3
 800c04c:	0409      	lsls	r1, r1, #16
 800c04e:	430b      	orrs	r3, r1
 800c050:	c708      	stmia	r7!, {r3}
 800c052:	9b04      	ldr	r3, [sp, #16]
 800c054:	42b3      	cmp	r3, r6
 800c056:	d8e8      	bhi.n	800c02a <__multiply+0xc6>
 800c058:	4663      	mov	r3, ip
 800c05a:	9a05      	ldr	r2, [sp, #20]
 800c05c:	509c      	str	r4, [r3, r2]
 800c05e:	9b00      	ldr	r3, [sp, #0]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	0c1e      	lsrs	r6, r3, #16
 800c064:	d020      	beq.n	800c0a8 <__multiply+0x144>
 800c066:	4663      	mov	r3, ip
 800c068:	002c      	movs	r4, r5
 800c06a:	4660      	mov	r0, ip
 800c06c:	2700      	movs	r7, #0
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	3414      	adds	r4, #20
 800c072:	6822      	ldr	r2, [r4, #0]
 800c074:	b29b      	uxth	r3, r3
 800c076:	b291      	uxth	r1, r2
 800c078:	4371      	muls	r1, r6
 800c07a:	6802      	ldr	r2, [r0, #0]
 800c07c:	0c12      	lsrs	r2, r2, #16
 800c07e:	1889      	adds	r1, r1, r2
 800c080:	19cf      	adds	r7, r1, r7
 800c082:	0439      	lsls	r1, r7, #16
 800c084:	430b      	orrs	r3, r1
 800c086:	6003      	str	r3, [r0, #0]
 800c088:	cc02      	ldmia	r4!, {r1}
 800c08a:	6843      	ldr	r3, [r0, #4]
 800c08c:	0c09      	lsrs	r1, r1, #16
 800c08e:	4371      	muls	r1, r6
 800c090:	b29b      	uxth	r3, r3
 800c092:	0c3f      	lsrs	r7, r7, #16
 800c094:	18cb      	adds	r3, r1, r3
 800c096:	9a04      	ldr	r2, [sp, #16]
 800c098:	19db      	adds	r3, r3, r7
 800c09a:	0c1f      	lsrs	r7, r3, #16
 800c09c:	3004      	adds	r0, #4
 800c09e:	42a2      	cmp	r2, r4
 800c0a0:	d8e7      	bhi.n	800c072 <__multiply+0x10e>
 800c0a2:	4662      	mov	r2, ip
 800c0a4:	9905      	ldr	r1, [sp, #20]
 800c0a6:	5053      	str	r3, [r2, r1]
 800c0a8:	9b00      	ldr	r3, [sp, #0]
 800c0aa:	3304      	adds	r3, #4
 800c0ac:	9300      	str	r3, [sp, #0]
 800c0ae:	2304      	movs	r3, #4
 800c0b0:	449c      	add	ip, r3
 800c0b2:	e79c      	b.n	800bfee <__multiply+0x8a>
 800c0b4:	9b02      	ldr	r3, [sp, #8]
 800c0b6:	3b01      	subs	r3, #1
 800c0b8:	9302      	str	r3, [sp, #8]
 800c0ba:	e79c      	b.n	800bff6 <__multiply+0x92>
 800c0bc:	0800ea52 	.word	0x0800ea52
 800c0c0:	0800eac2 	.word	0x0800eac2

0800c0c4 <__pow5mult>:
 800c0c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0c6:	2303      	movs	r3, #3
 800c0c8:	0015      	movs	r5, r2
 800c0ca:	0007      	movs	r7, r0
 800c0cc:	000e      	movs	r6, r1
 800c0ce:	401a      	ands	r2, r3
 800c0d0:	421d      	tst	r5, r3
 800c0d2:	d008      	beq.n	800c0e6 <__pow5mult+0x22>
 800c0d4:	491a      	ldr	r1, [pc, #104]	; (800c140 <__pow5mult+0x7c>)
 800c0d6:	3a01      	subs	r2, #1
 800c0d8:	0092      	lsls	r2, r2, #2
 800c0da:	5852      	ldr	r2, [r2, r1]
 800c0dc:	2300      	movs	r3, #0
 800c0de:	0031      	movs	r1, r6
 800c0e0:	f7ff fe9e 	bl	800be20 <__multadd>
 800c0e4:	0006      	movs	r6, r0
 800c0e6:	10ad      	asrs	r5, r5, #2
 800c0e8:	d027      	beq.n	800c13a <__pow5mult+0x76>
 800c0ea:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800c0ec:	2c00      	cmp	r4, #0
 800c0ee:	d107      	bne.n	800c100 <__pow5mult+0x3c>
 800c0f0:	0038      	movs	r0, r7
 800c0f2:	4914      	ldr	r1, [pc, #80]	; (800c144 <__pow5mult+0x80>)
 800c0f4:	f7ff ff20 	bl	800bf38 <__i2b>
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	0004      	movs	r4, r0
 800c0fc:	64b8      	str	r0, [r7, #72]	; 0x48
 800c0fe:	6003      	str	r3, [r0, #0]
 800c100:	2301      	movs	r3, #1
 800c102:	421d      	tst	r5, r3
 800c104:	d00a      	beq.n	800c11c <__pow5mult+0x58>
 800c106:	0031      	movs	r1, r6
 800c108:	0022      	movs	r2, r4
 800c10a:	0038      	movs	r0, r7
 800c10c:	f7ff ff2a 	bl	800bf64 <__multiply>
 800c110:	0031      	movs	r1, r6
 800c112:	9001      	str	r0, [sp, #4]
 800c114:	0038      	movs	r0, r7
 800c116:	f7ff fe79 	bl	800be0c <_Bfree>
 800c11a:	9e01      	ldr	r6, [sp, #4]
 800c11c:	106d      	asrs	r5, r5, #1
 800c11e:	d00c      	beq.n	800c13a <__pow5mult+0x76>
 800c120:	6820      	ldr	r0, [r4, #0]
 800c122:	2800      	cmp	r0, #0
 800c124:	d107      	bne.n	800c136 <__pow5mult+0x72>
 800c126:	0022      	movs	r2, r4
 800c128:	0021      	movs	r1, r4
 800c12a:	0038      	movs	r0, r7
 800c12c:	f7ff ff1a 	bl	800bf64 <__multiply>
 800c130:	2300      	movs	r3, #0
 800c132:	6020      	str	r0, [r4, #0]
 800c134:	6003      	str	r3, [r0, #0]
 800c136:	0004      	movs	r4, r0
 800c138:	e7e2      	b.n	800c100 <__pow5mult+0x3c>
 800c13a:	0030      	movs	r0, r6
 800c13c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c13e:	46c0      	nop			; (mov r8, r8)
 800c140:	0800ec18 	.word	0x0800ec18
 800c144:	00000271 	.word	0x00000271

0800c148 <__lshift>:
 800c148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c14a:	000c      	movs	r4, r1
 800c14c:	0017      	movs	r7, r2
 800c14e:	6923      	ldr	r3, [r4, #16]
 800c150:	1155      	asrs	r5, r2, #5
 800c152:	b087      	sub	sp, #28
 800c154:	18eb      	adds	r3, r5, r3
 800c156:	9302      	str	r3, [sp, #8]
 800c158:	3301      	adds	r3, #1
 800c15a:	9301      	str	r3, [sp, #4]
 800c15c:	6849      	ldr	r1, [r1, #4]
 800c15e:	68a3      	ldr	r3, [r4, #8]
 800c160:	9004      	str	r0, [sp, #16]
 800c162:	9a01      	ldr	r2, [sp, #4]
 800c164:	4293      	cmp	r3, r2
 800c166:	db11      	blt.n	800c18c <__lshift+0x44>
 800c168:	9804      	ldr	r0, [sp, #16]
 800c16a:	f7ff fe27 	bl	800bdbc <_Balloc>
 800c16e:	0002      	movs	r2, r0
 800c170:	2300      	movs	r3, #0
 800c172:	3214      	adds	r2, #20
 800c174:	0006      	movs	r6, r0
 800c176:	0011      	movs	r1, r2
 800c178:	9203      	str	r2, [sp, #12]
 800c17a:	4298      	cmp	r0, r3
 800c17c:	d10d      	bne.n	800c19a <__lshift+0x52>
 800c17e:	21da      	movs	r1, #218	; 0xda
 800c180:	0002      	movs	r2, r0
 800c182:	4b27      	ldr	r3, [pc, #156]	; (800c220 <__lshift+0xd8>)
 800c184:	4827      	ldr	r0, [pc, #156]	; (800c224 <__lshift+0xdc>)
 800c186:	31ff      	adds	r1, #255	; 0xff
 800c188:	f000 fa8c 	bl	800c6a4 <__assert_func>
 800c18c:	3101      	adds	r1, #1
 800c18e:	005b      	lsls	r3, r3, #1
 800c190:	e7e7      	b.n	800c162 <__lshift+0x1a>
 800c192:	2200      	movs	r2, #0
 800c194:	0098      	lsls	r0, r3, #2
 800c196:	500a      	str	r2, [r1, r0]
 800c198:	3301      	adds	r3, #1
 800c19a:	42ab      	cmp	r3, r5
 800c19c:	dbf9      	blt.n	800c192 <__lshift+0x4a>
 800c19e:	43eb      	mvns	r3, r5
 800c1a0:	17db      	asrs	r3, r3, #31
 800c1a2:	401d      	ands	r5, r3
 800c1a4:	9b03      	ldr	r3, [sp, #12]
 800c1a6:	00ad      	lsls	r5, r5, #2
 800c1a8:	211f      	movs	r1, #31
 800c1aa:	0038      	movs	r0, r7
 800c1ac:	195d      	adds	r5, r3, r5
 800c1ae:	0023      	movs	r3, r4
 800c1b0:	6922      	ldr	r2, [r4, #16]
 800c1b2:	3314      	adds	r3, #20
 800c1b4:	0092      	lsls	r2, r2, #2
 800c1b6:	4008      	ands	r0, r1
 800c1b8:	4684      	mov	ip, r0
 800c1ba:	189a      	adds	r2, r3, r2
 800c1bc:	420f      	tst	r7, r1
 800c1be:	d02a      	beq.n	800c216 <__lshift+0xce>
 800c1c0:	3101      	adds	r1, #1
 800c1c2:	1a09      	subs	r1, r1, r0
 800c1c4:	9105      	str	r1, [sp, #20]
 800c1c6:	2100      	movs	r1, #0
 800c1c8:	9503      	str	r5, [sp, #12]
 800c1ca:	4667      	mov	r7, ip
 800c1cc:	6818      	ldr	r0, [r3, #0]
 800c1ce:	40b8      	lsls	r0, r7
 800c1d0:	4301      	orrs	r1, r0
 800c1d2:	9803      	ldr	r0, [sp, #12]
 800c1d4:	c002      	stmia	r0!, {r1}
 800c1d6:	cb02      	ldmia	r3!, {r1}
 800c1d8:	9003      	str	r0, [sp, #12]
 800c1da:	9805      	ldr	r0, [sp, #20]
 800c1dc:	40c1      	lsrs	r1, r0
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d8f3      	bhi.n	800c1ca <__lshift+0x82>
 800c1e2:	0020      	movs	r0, r4
 800c1e4:	3015      	adds	r0, #21
 800c1e6:	2304      	movs	r3, #4
 800c1e8:	4282      	cmp	r2, r0
 800c1ea:	d304      	bcc.n	800c1f6 <__lshift+0xae>
 800c1ec:	1b13      	subs	r3, r2, r4
 800c1ee:	3b15      	subs	r3, #21
 800c1f0:	089b      	lsrs	r3, r3, #2
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	50e9      	str	r1, [r5, r3]
 800c1f8:	2900      	cmp	r1, #0
 800c1fa:	d002      	beq.n	800c202 <__lshift+0xba>
 800c1fc:	9b02      	ldr	r3, [sp, #8]
 800c1fe:	3302      	adds	r3, #2
 800c200:	9301      	str	r3, [sp, #4]
 800c202:	9b01      	ldr	r3, [sp, #4]
 800c204:	9804      	ldr	r0, [sp, #16]
 800c206:	3b01      	subs	r3, #1
 800c208:	0021      	movs	r1, r4
 800c20a:	6133      	str	r3, [r6, #16]
 800c20c:	f7ff fdfe 	bl	800be0c <_Bfree>
 800c210:	0030      	movs	r0, r6
 800c212:	b007      	add	sp, #28
 800c214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c216:	cb02      	ldmia	r3!, {r1}
 800c218:	c502      	stmia	r5!, {r1}
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d8fb      	bhi.n	800c216 <__lshift+0xce>
 800c21e:	e7f0      	b.n	800c202 <__lshift+0xba>
 800c220:	0800ea52 	.word	0x0800ea52
 800c224:	0800eac2 	.word	0x0800eac2

0800c228 <__mcmp>:
 800c228:	6902      	ldr	r2, [r0, #16]
 800c22a:	690b      	ldr	r3, [r1, #16]
 800c22c:	b530      	push	{r4, r5, lr}
 800c22e:	0004      	movs	r4, r0
 800c230:	1ad0      	subs	r0, r2, r3
 800c232:	429a      	cmp	r2, r3
 800c234:	d10d      	bne.n	800c252 <__mcmp+0x2a>
 800c236:	009b      	lsls	r3, r3, #2
 800c238:	3414      	adds	r4, #20
 800c23a:	3114      	adds	r1, #20
 800c23c:	18e2      	adds	r2, r4, r3
 800c23e:	18c9      	adds	r1, r1, r3
 800c240:	3a04      	subs	r2, #4
 800c242:	3904      	subs	r1, #4
 800c244:	6815      	ldr	r5, [r2, #0]
 800c246:	680b      	ldr	r3, [r1, #0]
 800c248:	429d      	cmp	r5, r3
 800c24a:	d003      	beq.n	800c254 <__mcmp+0x2c>
 800c24c:	2001      	movs	r0, #1
 800c24e:	429d      	cmp	r5, r3
 800c250:	d303      	bcc.n	800c25a <__mcmp+0x32>
 800c252:	bd30      	pop	{r4, r5, pc}
 800c254:	4294      	cmp	r4, r2
 800c256:	d3f3      	bcc.n	800c240 <__mcmp+0x18>
 800c258:	e7fb      	b.n	800c252 <__mcmp+0x2a>
 800c25a:	4240      	negs	r0, r0
 800c25c:	e7f9      	b.n	800c252 <__mcmp+0x2a>
	...

0800c260 <__mdiff>:
 800c260:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c262:	000e      	movs	r6, r1
 800c264:	0007      	movs	r7, r0
 800c266:	0011      	movs	r1, r2
 800c268:	0030      	movs	r0, r6
 800c26a:	b087      	sub	sp, #28
 800c26c:	0014      	movs	r4, r2
 800c26e:	f7ff ffdb 	bl	800c228 <__mcmp>
 800c272:	1e05      	subs	r5, r0, #0
 800c274:	d110      	bne.n	800c298 <__mdiff+0x38>
 800c276:	0001      	movs	r1, r0
 800c278:	0038      	movs	r0, r7
 800c27a:	f7ff fd9f 	bl	800bdbc <_Balloc>
 800c27e:	1e02      	subs	r2, r0, #0
 800c280:	d104      	bne.n	800c28c <__mdiff+0x2c>
 800c282:	4b40      	ldr	r3, [pc, #256]	; (800c384 <__mdiff+0x124>)
 800c284:	4940      	ldr	r1, [pc, #256]	; (800c388 <__mdiff+0x128>)
 800c286:	4841      	ldr	r0, [pc, #260]	; (800c38c <__mdiff+0x12c>)
 800c288:	f000 fa0c 	bl	800c6a4 <__assert_func>
 800c28c:	2301      	movs	r3, #1
 800c28e:	6145      	str	r5, [r0, #20]
 800c290:	6103      	str	r3, [r0, #16]
 800c292:	0010      	movs	r0, r2
 800c294:	b007      	add	sp, #28
 800c296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c298:	2301      	movs	r3, #1
 800c29a:	9301      	str	r3, [sp, #4]
 800c29c:	2800      	cmp	r0, #0
 800c29e:	db04      	blt.n	800c2aa <__mdiff+0x4a>
 800c2a0:	0023      	movs	r3, r4
 800c2a2:	0034      	movs	r4, r6
 800c2a4:	001e      	movs	r6, r3
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	9301      	str	r3, [sp, #4]
 800c2aa:	0038      	movs	r0, r7
 800c2ac:	6861      	ldr	r1, [r4, #4]
 800c2ae:	f7ff fd85 	bl	800bdbc <_Balloc>
 800c2b2:	1e02      	subs	r2, r0, #0
 800c2b4:	d103      	bne.n	800c2be <__mdiff+0x5e>
 800c2b6:	2190      	movs	r1, #144	; 0x90
 800c2b8:	4b32      	ldr	r3, [pc, #200]	; (800c384 <__mdiff+0x124>)
 800c2ba:	0089      	lsls	r1, r1, #2
 800c2bc:	e7e3      	b.n	800c286 <__mdiff+0x26>
 800c2be:	9b01      	ldr	r3, [sp, #4]
 800c2c0:	2700      	movs	r7, #0
 800c2c2:	60c3      	str	r3, [r0, #12]
 800c2c4:	6920      	ldr	r0, [r4, #16]
 800c2c6:	3414      	adds	r4, #20
 800c2c8:	9401      	str	r4, [sp, #4]
 800c2ca:	9b01      	ldr	r3, [sp, #4]
 800c2cc:	0084      	lsls	r4, r0, #2
 800c2ce:	191b      	adds	r3, r3, r4
 800c2d0:	0034      	movs	r4, r6
 800c2d2:	9302      	str	r3, [sp, #8]
 800c2d4:	6933      	ldr	r3, [r6, #16]
 800c2d6:	3414      	adds	r4, #20
 800c2d8:	0099      	lsls	r1, r3, #2
 800c2da:	1863      	adds	r3, r4, r1
 800c2dc:	9303      	str	r3, [sp, #12]
 800c2de:	0013      	movs	r3, r2
 800c2e0:	3314      	adds	r3, #20
 800c2e2:	469c      	mov	ip, r3
 800c2e4:	9305      	str	r3, [sp, #20]
 800c2e6:	9b01      	ldr	r3, [sp, #4]
 800c2e8:	9304      	str	r3, [sp, #16]
 800c2ea:	9b04      	ldr	r3, [sp, #16]
 800c2ec:	cc02      	ldmia	r4!, {r1}
 800c2ee:	cb20      	ldmia	r3!, {r5}
 800c2f0:	9304      	str	r3, [sp, #16]
 800c2f2:	b2ab      	uxth	r3, r5
 800c2f4:	19df      	adds	r7, r3, r7
 800c2f6:	b28b      	uxth	r3, r1
 800c2f8:	1afb      	subs	r3, r7, r3
 800c2fa:	0c2d      	lsrs	r5, r5, #16
 800c2fc:	0c09      	lsrs	r1, r1, #16
 800c2fe:	1a69      	subs	r1, r5, r1
 800c300:	141d      	asrs	r5, r3, #16
 800c302:	1949      	adds	r1, r1, r5
 800c304:	140f      	asrs	r7, r1, #16
 800c306:	b29b      	uxth	r3, r3
 800c308:	0409      	lsls	r1, r1, #16
 800c30a:	430b      	orrs	r3, r1
 800c30c:	4661      	mov	r1, ip
 800c30e:	c108      	stmia	r1!, {r3}
 800c310:	9b03      	ldr	r3, [sp, #12]
 800c312:	468c      	mov	ip, r1
 800c314:	42a3      	cmp	r3, r4
 800c316:	d8e8      	bhi.n	800c2ea <__mdiff+0x8a>
 800c318:	0031      	movs	r1, r6
 800c31a:	9c03      	ldr	r4, [sp, #12]
 800c31c:	3115      	adds	r1, #21
 800c31e:	2304      	movs	r3, #4
 800c320:	428c      	cmp	r4, r1
 800c322:	d304      	bcc.n	800c32e <__mdiff+0xce>
 800c324:	1ba3      	subs	r3, r4, r6
 800c326:	3b15      	subs	r3, #21
 800c328:	089b      	lsrs	r3, r3, #2
 800c32a:	3301      	adds	r3, #1
 800c32c:	009b      	lsls	r3, r3, #2
 800c32e:	9901      	ldr	r1, [sp, #4]
 800c330:	18cc      	adds	r4, r1, r3
 800c332:	9905      	ldr	r1, [sp, #20]
 800c334:	0026      	movs	r6, r4
 800c336:	18cb      	adds	r3, r1, r3
 800c338:	469c      	mov	ip, r3
 800c33a:	9902      	ldr	r1, [sp, #8]
 800c33c:	428e      	cmp	r6, r1
 800c33e:	d310      	bcc.n	800c362 <__mdiff+0x102>
 800c340:	9e02      	ldr	r6, [sp, #8]
 800c342:	1ee5      	subs	r5, r4, #3
 800c344:	2100      	movs	r1, #0
 800c346:	42ae      	cmp	r6, r5
 800c348:	d304      	bcc.n	800c354 <__mdiff+0xf4>
 800c34a:	0031      	movs	r1, r6
 800c34c:	3103      	adds	r1, #3
 800c34e:	1b09      	subs	r1, r1, r4
 800c350:	0889      	lsrs	r1, r1, #2
 800c352:	0089      	lsls	r1, r1, #2
 800c354:	185b      	adds	r3, r3, r1
 800c356:	3b04      	subs	r3, #4
 800c358:	6819      	ldr	r1, [r3, #0]
 800c35a:	2900      	cmp	r1, #0
 800c35c:	d00f      	beq.n	800c37e <__mdiff+0x11e>
 800c35e:	6110      	str	r0, [r2, #16]
 800c360:	e797      	b.n	800c292 <__mdiff+0x32>
 800c362:	ce02      	ldmia	r6!, {r1}
 800c364:	b28d      	uxth	r5, r1
 800c366:	19ed      	adds	r5, r5, r7
 800c368:	0c0f      	lsrs	r7, r1, #16
 800c36a:	1429      	asrs	r1, r5, #16
 800c36c:	1879      	adds	r1, r7, r1
 800c36e:	140f      	asrs	r7, r1, #16
 800c370:	b2ad      	uxth	r5, r5
 800c372:	0409      	lsls	r1, r1, #16
 800c374:	430d      	orrs	r5, r1
 800c376:	4661      	mov	r1, ip
 800c378:	c120      	stmia	r1!, {r5}
 800c37a:	468c      	mov	ip, r1
 800c37c:	e7dd      	b.n	800c33a <__mdiff+0xda>
 800c37e:	3801      	subs	r0, #1
 800c380:	e7e9      	b.n	800c356 <__mdiff+0xf6>
 800c382:	46c0      	nop			; (mov r8, r8)
 800c384:	0800ea52 	.word	0x0800ea52
 800c388:	00000232 	.word	0x00000232
 800c38c:	0800eac2 	.word	0x0800eac2

0800c390 <__d2b>:
 800c390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c392:	2101      	movs	r1, #1
 800c394:	0014      	movs	r4, r2
 800c396:	001e      	movs	r6, r3
 800c398:	9f08      	ldr	r7, [sp, #32]
 800c39a:	f7ff fd0f 	bl	800bdbc <_Balloc>
 800c39e:	1e05      	subs	r5, r0, #0
 800c3a0:	d105      	bne.n	800c3ae <__d2b+0x1e>
 800c3a2:	0002      	movs	r2, r0
 800c3a4:	4b26      	ldr	r3, [pc, #152]	; (800c440 <__d2b+0xb0>)
 800c3a6:	4927      	ldr	r1, [pc, #156]	; (800c444 <__d2b+0xb4>)
 800c3a8:	4827      	ldr	r0, [pc, #156]	; (800c448 <__d2b+0xb8>)
 800c3aa:	f000 f97b 	bl	800c6a4 <__assert_func>
 800c3ae:	0333      	lsls	r3, r6, #12
 800c3b0:	0076      	lsls	r6, r6, #1
 800c3b2:	0b1b      	lsrs	r3, r3, #12
 800c3b4:	0d76      	lsrs	r6, r6, #21
 800c3b6:	d124      	bne.n	800c402 <__d2b+0x72>
 800c3b8:	9301      	str	r3, [sp, #4]
 800c3ba:	2c00      	cmp	r4, #0
 800c3bc:	d027      	beq.n	800c40e <__d2b+0x7e>
 800c3be:	4668      	mov	r0, sp
 800c3c0:	9400      	str	r4, [sp, #0]
 800c3c2:	f7ff fd8b 	bl	800bedc <__lo0bits>
 800c3c6:	9c00      	ldr	r4, [sp, #0]
 800c3c8:	2800      	cmp	r0, #0
 800c3ca:	d01e      	beq.n	800c40a <__d2b+0x7a>
 800c3cc:	9b01      	ldr	r3, [sp, #4]
 800c3ce:	2120      	movs	r1, #32
 800c3d0:	001a      	movs	r2, r3
 800c3d2:	1a09      	subs	r1, r1, r0
 800c3d4:	408a      	lsls	r2, r1
 800c3d6:	40c3      	lsrs	r3, r0
 800c3d8:	4322      	orrs	r2, r4
 800c3da:	616a      	str	r2, [r5, #20]
 800c3dc:	9301      	str	r3, [sp, #4]
 800c3de:	9c01      	ldr	r4, [sp, #4]
 800c3e0:	61ac      	str	r4, [r5, #24]
 800c3e2:	1e63      	subs	r3, r4, #1
 800c3e4:	419c      	sbcs	r4, r3
 800c3e6:	3401      	adds	r4, #1
 800c3e8:	612c      	str	r4, [r5, #16]
 800c3ea:	2e00      	cmp	r6, #0
 800c3ec:	d018      	beq.n	800c420 <__d2b+0x90>
 800c3ee:	4b17      	ldr	r3, [pc, #92]	; (800c44c <__d2b+0xbc>)
 800c3f0:	18f6      	adds	r6, r6, r3
 800c3f2:	2335      	movs	r3, #53	; 0x35
 800c3f4:	1836      	adds	r6, r6, r0
 800c3f6:	1a18      	subs	r0, r3, r0
 800c3f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3fa:	603e      	str	r6, [r7, #0]
 800c3fc:	6018      	str	r0, [r3, #0]
 800c3fe:	0028      	movs	r0, r5
 800c400:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c402:	2280      	movs	r2, #128	; 0x80
 800c404:	0352      	lsls	r2, r2, #13
 800c406:	4313      	orrs	r3, r2
 800c408:	e7d6      	b.n	800c3b8 <__d2b+0x28>
 800c40a:	616c      	str	r4, [r5, #20]
 800c40c:	e7e7      	b.n	800c3de <__d2b+0x4e>
 800c40e:	a801      	add	r0, sp, #4
 800c410:	f7ff fd64 	bl	800bedc <__lo0bits>
 800c414:	2401      	movs	r4, #1
 800c416:	9b01      	ldr	r3, [sp, #4]
 800c418:	612c      	str	r4, [r5, #16]
 800c41a:	616b      	str	r3, [r5, #20]
 800c41c:	3020      	adds	r0, #32
 800c41e:	e7e4      	b.n	800c3ea <__d2b+0x5a>
 800c420:	4b0b      	ldr	r3, [pc, #44]	; (800c450 <__d2b+0xc0>)
 800c422:	18c0      	adds	r0, r0, r3
 800c424:	4b0b      	ldr	r3, [pc, #44]	; (800c454 <__d2b+0xc4>)
 800c426:	6038      	str	r0, [r7, #0]
 800c428:	18e3      	adds	r3, r4, r3
 800c42a:	009b      	lsls	r3, r3, #2
 800c42c:	18eb      	adds	r3, r5, r3
 800c42e:	6958      	ldr	r0, [r3, #20]
 800c430:	f7ff fd3a 	bl	800bea8 <__hi0bits>
 800c434:	0164      	lsls	r4, r4, #5
 800c436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c438:	1a24      	subs	r4, r4, r0
 800c43a:	601c      	str	r4, [r3, #0]
 800c43c:	e7df      	b.n	800c3fe <__d2b+0x6e>
 800c43e:	46c0      	nop			; (mov r8, r8)
 800c440:	0800ea52 	.word	0x0800ea52
 800c444:	0000030a 	.word	0x0000030a
 800c448:	0800eac2 	.word	0x0800eac2
 800c44c:	fffffbcd 	.word	0xfffffbcd
 800c450:	fffffbce 	.word	0xfffffbce
 800c454:	3fffffff 	.word	0x3fffffff

0800c458 <frexp>:
 800c458:	b570      	push	{r4, r5, r6, lr}
 800c45a:	0014      	movs	r4, r2
 800c45c:	2500      	movs	r5, #0
 800c45e:	6025      	str	r5, [r4, #0]
 800c460:	4d10      	ldr	r5, [pc, #64]	; (800c4a4 <frexp+0x4c>)
 800c462:	004b      	lsls	r3, r1, #1
 800c464:	000a      	movs	r2, r1
 800c466:	085b      	lsrs	r3, r3, #1
 800c468:	42ab      	cmp	r3, r5
 800c46a:	dc1a      	bgt.n	800c4a2 <frexp+0x4a>
 800c46c:	001d      	movs	r5, r3
 800c46e:	4305      	orrs	r5, r0
 800c470:	d017      	beq.n	800c4a2 <frexp+0x4a>
 800c472:	4d0d      	ldr	r5, [pc, #52]	; (800c4a8 <frexp+0x50>)
 800c474:	4229      	tst	r1, r5
 800c476:	d109      	bne.n	800c48c <frexp+0x34>
 800c478:	2200      	movs	r2, #0
 800c47a:	4b0c      	ldr	r3, [pc, #48]	; (800c4ac <frexp+0x54>)
 800c47c:	f7f5 fd4a 	bl	8001f14 <__aeabi_dmul>
 800c480:	2536      	movs	r5, #54	; 0x36
 800c482:	000a      	movs	r2, r1
 800c484:	004b      	lsls	r3, r1, #1
 800c486:	426d      	negs	r5, r5
 800c488:	085b      	lsrs	r3, r3, #1
 800c48a:	6025      	str	r5, [r4, #0]
 800c48c:	4d08      	ldr	r5, [pc, #32]	; (800c4b0 <frexp+0x58>)
 800c48e:	151b      	asrs	r3, r3, #20
 800c490:	195b      	adds	r3, r3, r5
 800c492:	6825      	ldr	r5, [r4, #0]
 800c494:	18eb      	adds	r3, r5, r3
 800c496:	6023      	str	r3, [r4, #0]
 800c498:	4b06      	ldr	r3, [pc, #24]	; (800c4b4 <frexp+0x5c>)
 800c49a:	401a      	ands	r2, r3
 800c49c:	4b06      	ldr	r3, [pc, #24]	; (800c4b8 <frexp+0x60>)
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	0019      	movs	r1, r3
 800c4a2:	bd70      	pop	{r4, r5, r6, pc}
 800c4a4:	7fefffff 	.word	0x7fefffff
 800c4a8:	7ff00000 	.word	0x7ff00000
 800c4ac:	43500000 	.word	0x43500000
 800c4b0:	fffffc02 	.word	0xfffffc02
 800c4b4:	800fffff 	.word	0x800fffff
 800c4b8:	3fe00000 	.word	0x3fe00000

0800c4bc <_sbrk_r>:
 800c4bc:	2300      	movs	r3, #0
 800c4be:	b570      	push	{r4, r5, r6, lr}
 800c4c0:	4d06      	ldr	r5, [pc, #24]	; (800c4dc <_sbrk_r+0x20>)
 800c4c2:	0004      	movs	r4, r0
 800c4c4:	0008      	movs	r0, r1
 800c4c6:	602b      	str	r3, [r5, #0]
 800c4c8:	f7fc fe64 	bl	8009194 <_sbrk>
 800c4cc:	1c43      	adds	r3, r0, #1
 800c4ce:	d103      	bne.n	800c4d8 <_sbrk_r+0x1c>
 800c4d0:	682b      	ldr	r3, [r5, #0]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d000      	beq.n	800c4d8 <_sbrk_r+0x1c>
 800c4d6:	6023      	str	r3, [r4, #0]
 800c4d8:	bd70      	pop	{r4, r5, r6, pc}
 800c4da:	46c0      	nop			; (mov r8, r8)
 800c4dc:	20003b78 	.word	0x20003b78

0800c4e0 <strncpy>:
 800c4e0:	0003      	movs	r3, r0
 800c4e2:	b530      	push	{r4, r5, lr}
 800c4e4:	001d      	movs	r5, r3
 800c4e6:	2a00      	cmp	r2, #0
 800c4e8:	d006      	beq.n	800c4f8 <strncpy+0x18>
 800c4ea:	780c      	ldrb	r4, [r1, #0]
 800c4ec:	3a01      	subs	r2, #1
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	702c      	strb	r4, [r5, #0]
 800c4f2:	3101      	adds	r1, #1
 800c4f4:	2c00      	cmp	r4, #0
 800c4f6:	d1f5      	bne.n	800c4e4 <strncpy+0x4>
 800c4f8:	2100      	movs	r1, #0
 800c4fa:	189a      	adds	r2, r3, r2
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d100      	bne.n	800c502 <strncpy+0x22>
 800c500:	bd30      	pop	{r4, r5, pc}
 800c502:	7019      	strb	r1, [r3, #0]
 800c504:	3301      	adds	r3, #1
 800c506:	e7f9      	b.n	800c4fc <strncpy+0x1c>

0800c508 <__ssprint_r>:
 800c508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c50a:	6893      	ldr	r3, [r2, #8]
 800c50c:	b087      	sub	sp, #28
 800c50e:	000c      	movs	r4, r1
 800c510:	0017      	movs	r7, r2
 800c512:	9002      	str	r0, [sp, #8]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d065      	beq.n	800c5e4 <__ssprint_r+0xdc>
 800c518:	6813      	ldr	r3, [r2, #0]
 800c51a:	9303      	str	r3, [sp, #12]
 800c51c:	2300      	movs	r3, #0
 800c51e:	9305      	str	r3, [sp, #20]
 800c520:	9301      	str	r3, [sp, #4]
 800c522:	9b01      	ldr	r3, [sp, #4]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d02d      	beq.n	800c584 <__ssprint_r+0x7c>
 800c528:	68a6      	ldr	r6, [r4, #8]
 800c52a:	42b3      	cmp	r3, r6
 800c52c:	d346      	bcc.n	800c5bc <__ssprint_r+0xb4>
 800c52e:	2390      	movs	r3, #144	; 0x90
 800c530:	89a2      	ldrh	r2, [r4, #12]
 800c532:	00db      	lsls	r3, r3, #3
 800c534:	421a      	tst	r2, r3
 800c536:	d041      	beq.n	800c5bc <__ssprint_r+0xb4>
 800c538:	6921      	ldr	r1, [r4, #16]
 800c53a:	6823      	ldr	r3, [r4, #0]
 800c53c:	6965      	ldr	r5, [r4, #20]
 800c53e:	1a5b      	subs	r3, r3, r1
 800c540:	9304      	str	r3, [sp, #16]
 800c542:	2303      	movs	r3, #3
 800c544:	435d      	muls	r5, r3
 800c546:	0feb      	lsrs	r3, r5, #31
 800c548:	195d      	adds	r5, r3, r5
 800c54a:	9b04      	ldr	r3, [sp, #16]
 800c54c:	9801      	ldr	r0, [sp, #4]
 800c54e:	3301      	adds	r3, #1
 800c550:	181b      	adds	r3, r3, r0
 800c552:	106d      	asrs	r5, r5, #1
 800c554:	42ab      	cmp	r3, r5
 800c556:	d900      	bls.n	800c55a <__ssprint_r+0x52>
 800c558:	001d      	movs	r5, r3
 800c55a:	0553      	lsls	r3, r2, #21
 800c55c:	d546      	bpl.n	800c5ec <__ssprint_r+0xe4>
 800c55e:	0029      	movs	r1, r5
 800c560:	9802      	ldr	r0, [sp, #8]
 800c562:	f7ff fa07 	bl	800b974 <_malloc_r>
 800c566:	1e06      	subs	r6, r0, #0
 800c568:	d116      	bne.n	800c598 <__ssprint_r+0x90>
 800c56a:	230c      	movs	r3, #12
 800c56c:	9a02      	ldr	r2, [sp, #8]
 800c56e:	2001      	movs	r0, #1
 800c570:	6013      	str	r3, [r2, #0]
 800c572:	2340      	movs	r3, #64	; 0x40
 800c574:	89a2      	ldrh	r2, [r4, #12]
 800c576:	4240      	negs	r0, r0
 800c578:	4313      	orrs	r3, r2
 800c57a:	81a3      	strh	r3, [r4, #12]
 800c57c:	2300      	movs	r3, #0
 800c57e:	60bb      	str	r3, [r7, #8]
 800c580:	607b      	str	r3, [r7, #4]
 800c582:	e031      	b.n	800c5e8 <__ssprint_r+0xe0>
 800c584:	9b03      	ldr	r3, [sp, #12]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	9305      	str	r3, [sp, #20]
 800c58a:	9b03      	ldr	r3, [sp, #12]
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	9301      	str	r3, [sp, #4]
 800c590:	9b03      	ldr	r3, [sp, #12]
 800c592:	3308      	adds	r3, #8
 800c594:	9303      	str	r3, [sp, #12]
 800c596:	e7c4      	b.n	800c522 <__ssprint_r+0x1a>
 800c598:	9a04      	ldr	r2, [sp, #16]
 800c59a:	6921      	ldr	r1, [r4, #16]
 800c59c:	f7fc feb9 	bl	8009312 <memcpy>
 800c5a0:	89a3      	ldrh	r3, [r4, #12]
 800c5a2:	4a18      	ldr	r2, [pc, #96]	; (800c604 <__ssprint_r+0xfc>)
 800c5a4:	401a      	ands	r2, r3
 800c5a6:	2380      	movs	r3, #128	; 0x80
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	81a3      	strh	r3, [r4, #12]
 800c5ac:	9b04      	ldr	r3, [sp, #16]
 800c5ae:	6126      	str	r6, [r4, #16]
 800c5b0:	18f6      	adds	r6, r6, r3
 800c5b2:	6026      	str	r6, [r4, #0]
 800c5b4:	6165      	str	r5, [r4, #20]
 800c5b6:	9e01      	ldr	r6, [sp, #4]
 800c5b8:	1aed      	subs	r5, r5, r3
 800c5ba:	60a5      	str	r5, [r4, #8]
 800c5bc:	9b01      	ldr	r3, [sp, #4]
 800c5be:	429e      	cmp	r6, r3
 800c5c0:	d900      	bls.n	800c5c4 <__ssprint_r+0xbc>
 800c5c2:	001e      	movs	r6, r3
 800c5c4:	0032      	movs	r2, r6
 800c5c6:	9905      	ldr	r1, [sp, #20]
 800c5c8:	6820      	ldr	r0, [r4, #0]
 800c5ca:	f000 f8df 	bl	800c78c <memmove>
 800c5ce:	68a3      	ldr	r3, [r4, #8]
 800c5d0:	9a01      	ldr	r2, [sp, #4]
 800c5d2:	1b9b      	subs	r3, r3, r6
 800c5d4:	60a3      	str	r3, [r4, #8]
 800c5d6:	6823      	ldr	r3, [r4, #0]
 800c5d8:	199e      	adds	r6, r3, r6
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	6026      	str	r6, [r4, #0]
 800c5de:	1a9b      	subs	r3, r3, r2
 800c5e0:	60bb      	str	r3, [r7, #8]
 800c5e2:	d1cf      	bne.n	800c584 <__ssprint_r+0x7c>
 800c5e4:	2000      	movs	r0, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	b007      	add	sp, #28
 800c5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5ec:	002a      	movs	r2, r5
 800c5ee:	9802      	ldr	r0, [sp, #8]
 800c5f0:	f000 f8e0 	bl	800c7b4 <_realloc_r>
 800c5f4:	1e06      	subs	r6, r0, #0
 800c5f6:	d1d9      	bne.n	800c5ac <__ssprint_r+0xa4>
 800c5f8:	6921      	ldr	r1, [r4, #16]
 800c5fa:	9802      	ldr	r0, [sp, #8]
 800c5fc:	f7ff f900 	bl	800b800 <_free_r>
 800c600:	e7b3      	b.n	800c56a <__ssprint_r+0x62>
 800c602:	46c0      	nop			; (mov r8, r8)
 800c604:	fffffb7f 	.word	0xfffffb7f

0800c608 <sysconf>:
 800c608:	2380      	movs	r3, #128	; 0x80
 800c60a:	b510      	push	{r4, lr}
 800c60c:	015b      	lsls	r3, r3, #5
 800c60e:	2808      	cmp	r0, #8
 800c610:	d004      	beq.n	800c61c <sysconf+0x14>
 800c612:	f7fc fe3b 	bl	800928c <__errno>
 800c616:	2316      	movs	r3, #22
 800c618:	6003      	str	r3, [r0, #0]
 800c61a:	3b17      	subs	r3, #23
 800c61c:	0018      	movs	r0, r3
 800c61e:	bd10      	pop	{r4, pc}

0800c620 <__register_exitproc>:
 800c620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c622:	4f1e      	ldr	r7, [pc, #120]	; (800c69c <__register_exitproc+0x7c>)
 800c624:	0004      	movs	r4, r0
 800c626:	6838      	ldr	r0, [r7, #0]
 800c628:	0016      	movs	r6, r2
 800c62a:	9100      	str	r1, [sp, #0]
 800c62c:	9301      	str	r3, [sp, #4]
 800c62e:	f7ff f99f 	bl	800b970 <__retarget_lock_acquire_recursive>
 800c632:	4b1b      	ldr	r3, [pc, #108]	; (800c6a0 <__register_exitproc+0x80>)
 800c634:	6819      	ldr	r1, [r3, #0]
 800c636:	000b      	movs	r3, r1
 800c638:	33fc      	adds	r3, #252	; 0xfc
 800c63a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c63c:	2a00      	cmp	r2, #0
 800c63e:	d103      	bne.n	800c648 <__register_exitproc+0x28>
 800c640:	000a      	movs	r2, r1
 800c642:	324d      	adds	r2, #77	; 0x4d
 800c644:	32ff      	adds	r2, #255	; 0xff
 800c646:	64da      	str	r2, [r3, #76]	; 0x4c
 800c648:	6853      	ldr	r3, [r2, #4]
 800c64a:	6838      	ldr	r0, [r7, #0]
 800c64c:	2b1f      	cmp	r3, #31
 800c64e:	dd04      	ble.n	800c65a <__register_exitproc+0x3a>
 800c650:	f7ff f98f 	bl	800b972 <__retarget_lock_release_recursive>
 800c654:	2001      	movs	r0, #1
 800c656:	4240      	negs	r0, r0
 800c658:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c65a:	2c00      	cmp	r4, #0
 800c65c:	d014      	beq.n	800c688 <__register_exitproc+0x68>
 800c65e:	0099      	lsls	r1, r3, #2
 800c660:	1851      	adds	r1, r2, r1
 800c662:	000f      	movs	r7, r1
 800c664:	3788      	adds	r7, #136	; 0x88
 800c666:	603e      	str	r6, [r7, #0]
 800c668:	2701      	movs	r7, #1
 800c66a:	0016      	movs	r6, r2
 800c66c:	409f      	lsls	r7, r3
 800c66e:	3685      	adds	r6, #133	; 0x85
 800c670:	36ff      	adds	r6, #255	; 0xff
 800c672:	6875      	ldr	r5, [r6, #4]
 800c674:	31fc      	adds	r1, #252	; 0xfc
 800c676:	433d      	orrs	r5, r7
 800c678:	6075      	str	r5, [r6, #4]
 800c67a:	9d01      	ldr	r5, [sp, #4]
 800c67c:	60cd      	str	r5, [r1, #12]
 800c67e:	2c02      	cmp	r4, #2
 800c680:	d102      	bne.n	800c688 <__register_exitproc+0x68>
 800c682:	68b1      	ldr	r1, [r6, #8]
 800c684:	430f      	orrs	r7, r1
 800c686:	60b7      	str	r7, [r6, #8]
 800c688:	1c59      	adds	r1, r3, #1
 800c68a:	6051      	str	r1, [r2, #4]
 800c68c:	3302      	adds	r3, #2
 800c68e:	9900      	ldr	r1, [sp, #0]
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	5099      	str	r1, [r3, r2]
 800c694:	f7ff f96d 	bl	800b972 <__retarget_lock_release_recursive>
 800c698:	2000      	movs	r0, #0
 800c69a:	e7dd      	b.n	800c658 <__register_exitproc+0x38>
 800c69c:	20000440 	.word	0x20000440
 800c6a0:	0800e8ec 	.word	0x0800e8ec

0800c6a4 <__assert_func>:
 800c6a4:	b530      	push	{r4, r5, lr}
 800c6a6:	0014      	movs	r4, r2
 800c6a8:	001a      	movs	r2, r3
 800c6aa:	4b09      	ldr	r3, [pc, #36]	; (800c6d0 <__assert_func+0x2c>)
 800c6ac:	0005      	movs	r5, r0
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	b085      	sub	sp, #20
 800c6b2:	68d8      	ldr	r0, [r3, #12]
 800c6b4:	4b07      	ldr	r3, [pc, #28]	; (800c6d4 <__assert_func+0x30>)
 800c6b6:	2c00      	cmp	r4, #0
 800c6b8:	d101      	bne.n	800c6be <__assert_func+0x1a>
 800c6ba:	4b07      	ldr	r3, [pc, #28]	; (800c6d8 <__assert_func+0x34>)
 800c6bc:	001c      	movs	r4, r3
 800c6be:	9301      	str	r3, [sp, #4]
 800c6c0:	9100      	str	r1, [sp, #0]
 800c6c2:	002b      	movs	r3, r5
 800c6c4:	4905      	ldr	r1, [pc, #20]	; (800c6dc <__assert_func+0x38>)
 800c6c6:	9402      	str	r4, [sp, #8]
 800c6c8:	f000 f836 	bl	800c738 <fiprintf>
 800c6cc:	f001 f800 	bl	800d6d0 <abort>
 800c6d0:	20000010 	.word	0x20000010
 800c6d4:	0800ec24 	.word	0x0800ec24
 800c6d8:	0800ec5f 	.word	0x0800ec5f
 800c6dc:	0800ec31 	.word	0x0800ec31

0800c6e0 <_calloc_r>:
 800c6e0:	b510      	push	{r4, lr}
 800c6e2:	4351      	muls	r1, r2
 800c6e4:	f7ff f946 	bl	800b974 <_malloc_r>
 800c6e8:	1e04      	subs	r4, r0, #0
 800c6ea:	d01a      	beq.n	800c722 <_calloc_r+0x42>
 800c6ec:	0003      	movs	r3, r0
 800c6ee:	3b08      	subs	r3, #8
 800c6f0:	685a      	ldr	r2, [r3, #4]
 800c6f2:	2303      	movs	r3, #3
 800c6f4:	439a      	bics	r2, r3
 800c6f6:	3a04      	subs	r2, #4
 800c6f8:	2a24      	cmp	r2, #36	; 0x24
 800c6fa:	d819      	bhi.n	800c730 <_calloc_r+0x50>
 800c6fc:	0003      	movs	r3, r0
 800c6fe:	2a13      	cmp	r2, #19
 800c700:	d90b      	bls.n	800c71a <_calloc_r+0x3a>
 800c702:	2100      	movs	r1, #0
 800c704:	3308      	adds	r3, #8
 800c706:	6001      	str	r1, [r0, #0]
 800c708:	6041      	str	r1, [r0, #4]
 800c70a:	2a1b      	cmp	r2, #27
 800c70c:	d905      	bls.n	800c71a <_calloc_r+0x3a>
 800c70e:	6081      	str	r1, [r0, #8]
 800c710:	60c1      	str	r1, [r0, #12]
 800c712:	2a24      	cmp	r2, #36	; 0x24
 800c714:	d007      	beq.n	800c726 <_calloc_r+0x46>
 800c716:	0003      	movs	r3, r0
 800c718:	3310      	adds	r3, #16
 800c71a:	2200      	movs	r2, #0
 800c71c:	601a      	str	r2, [r3, #0]
 800c71e:	605a      	str	r2, [r3, #4]
 800c720:	609a      	str	r2, [r3, #8]
 800c722:	0020      	movs	r0, r4
 800c724:	bd10      	pop	{r4, pc}
 800c726:	0003      	movs	r3, r0
 800c728:	6101      	str	r1, [r0, #16]
 800c72a:	3318      	adds	r3, #24
 800c72c:	6141      	str	r1, [r0, #20]
 800c72e:	e7f4      	b.n	800c71a <_calloc_r+0x3a>
 800c730:	2100      	movs	r1, #0
 800c732:	f7fc fdf7 	bl	8009324 <memset>
 800c736:	e7f4      	b.n	800c722 <_calloc_r+0x42>

0800c738 <fiprintf>:
 800c738:	b40e      	push	{r1, r2, r3}
 800c73a:	b503      	push	{r0, r1, lr}
 800c73c:	0001      	movs	r1, r0
 800c73e:	ab03      	add	r3, sp, #12
 800c740:	4804      	ldr	r0, [pc, #16]	; (800c754 <fiprintf+0x1c>)
 800c742:	cb04      	ldmia	r3!, {r2}
 800c744:	6800      	ldr	r0, [r0, #0]
 800c746:	9301      	str	r3, [sp, #4]
 800c748:	f000 fa0e 	bl	800cb68 <_vfiprintf_r>
 800c74c:	b002      	add	sp, #8
 800c74e:	bc08      	pop	{r3}
 800c750:	b003      	add	sp, #12
 800c752:	4718      	bx	r3
 800c754:	20000010 	.word	0x20000010

0800c758 <__locale_mb_cur_max>:
 800c758:	2394      	movs	r3, #148	; 0x94
 800c75a:	4a02      	ldr	r2, [pc, #8]	; (800c764 <__locale_mb_cur_max+0xc>)
 800c75c:	005b      	lsls	r3, r3, #1
 800c75e:	5cd0      	ldrb	r0, [r2, r3]
 800c760:	4770      	bx	lr
 800c762:	46c0      	nop			; (mov r8, r8)
 800c764:	20000854 	.word	0x20000854

0800c768 <__ascii_mbtowc>:
 800c768:	b082      	sub	sp, #8
 800c76a:	2900      	cmp	r1, #0
 800c76c:	d100      	bne.n	800c770 <__ascii_mbtowc+0x8>
 800c76e:	a901      	add	r1, sp, #4
 800c770:	1e10      	subs	r0, r2, #0
 800c772:	d006      	beq.n	800c782 <__ascii_mbtowc+0x1a>
 800c774:	2b00      	cmp	r3, #0
 800c776:	d006      	beq.n	800c786 <__ascii_mbtowc+0x1e>
 800c778:	7813      	ldrb	r3, [r2, #0]
 800c77a:	600b      	str	r3, [r1, #0]
 800c77c:	7810      	ldrb	r0, [r2, #0]
 800c77e:	1e43      	subs	r3, r0, #1
 800c780:	4198      	sbcs	r0, r3
 800c782:	b002      	add	sp, #8
 800c784:	4770      	bx	lr
 800c786:	2002      	movs	r0, #2
 800c788:	4240      	negs	r0, r0
 800c78a:	e7fa      	b.n	800c782 <__ascii_mbtowc+0x1a>

0800c78c <memmove>:
 800c78c:	b510      	push	{r4, lr}
 800c78e:	4288      	cmp	r0, r1
 800c790:	d902      	bls.n	800c798 <memmove+0xc>
 800c792:	188b      	adds	r3, r1, r2
 800c794:	4298      	cmp	r0, r3
 800c796:	d303      	bcc.n	800c7a0 <memmove+0x14>
 800c798:	2300      	movs	r3, #0
 800c79a:	e007      	b.n	800c7ac <memmove+0x20>
 800c79c:	5c8b      	ldrb	r3, [r1, r2]
 800c79e:	5483      	strb	r3, [r0, r2]
 800c7a0:	3a01      	subs	r2, #1
 800c7a2:	d2fb      	bcs.n	800c79c <memmove+0x10>
 800c7a4:	bd10      	pop	{r4, pc}
 800c7a6:	5ccc      	ldrb	r4, [r1, r3]
 800c7a8:	54c4      	strb	r4, [r0, r3]
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d1fa      	bne.n	800c7a6 <memmove+0x1a>
 800c7b0:	e7f8      	b.n	800c7a4 <memmove+0x18>
	...

0800c7b4 <_realloc_r>:
 800c7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7b6:	b087      	sub	sp, #28
 800c7b8:	1e0c      	subs	r4, r1, #0
 800c7ba:	9002      	str	r0, [sp, #8]
 800c7bc:	9205      	str	r2, [sp, #20]
 800c7be:	d106      	bne.n	800c7ce <_realloc_r+0x1a>
 800c7c0:	0011      	movs	r1, r2
 800c7c2:	f7ff f8d7 	bl	800b974 <_malloc_r>
 800c7c6:	0007      	movs	r7, r0
 800c7c8:	0038      	movs	r0, r7
 800c7ca:	b007      	add	sp, #28
 800c7cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7ce:	9802      	ldr	r0, [sp, #8]
 800c7d0:	f7ff fae4 	bl	800bd9c <__malloc_lock>
 800c7d4:	9e05      	ldr	r6, [sp, #20]
 800c7d6:	360b      	adds	r6, #11
 800c7d8:	2e16      	cmp	r6, #22
 800c7da:	d908      	bls.n	800c7ee <_realloc_r+0x3a>
 800c7dc:	2307      	movs	r3, #7
 800c7de:	439e      	bics	r6, r3
 800c7e0:	9601      	str	r6, [sp, #4]
 800c7e2:	d506      	bpl.n	800c7f2 <_realloc_r+0x3e>
 800c7e4:	230c      	movs	r3, #12
 800c7e6:	9a02      	ldr	r2, [sp, #8]
 800c7e8:	2700      	movs	r7, #0
 800c7ea:	6013      	str	r3, [r2, #0]
 800c7ec:	e7ec      	b.n	800c7c8 <_realloc_r+0x14>
 800c7ee:	2310      	movs	r3, #16
 800c7f0:	9301      	str	r3, [sp, #4]
 800c7f2:	9b01      	ldr	r3, [sp, #4]
 800c7f4:	9a05      	ldr	r2, [sp, #20]
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d3f4      	bcc.n	800c7e4 <_realloc_r+0x30>
 800c7fa:	0023      	movs	r3, r4
 800c7fc:	3b08      	subs	r3, #8
 800c7fe:	685f      	ldr	r7, [r3, #4]
 800c800:	9304      	str	r3, [sp, #16]
 800c802:	003a      	movs	r2, r7
 800c804:	2303      	movs	r3, #3
 800c806:	439a      	bics	r2, r3
 800c808:	9b01      	ldr	r3, [sp, #4]
 800c80a:	9203      	str	r2, [sp, #12]
 800c80c:	4293      	cmp	r3, r2
 800c80e:	dc00      	bgt.n	800c812 <_realloc_r+0x5e>
 800c810:	e16b      	b.n	800caea <_realloc_r+0x336>
 800c812:	9b04      	ldr	r3, [sp, #16]
 800c814:	48b9      	ldr	r0, [pc, #740]	; (800cafc <_realloc_r+0x348>)
 800c816:	189b      	adds	r3, r3, r2
 800c818:	6882      	ldr	r2, [r0, #8]
 800c81a:	4694      	mov	ip, r2
 800c81c:	685a      	ldr	r2, [r3, #4]
 800c81e:	459c      	cmp	ip, r3
 800c820:	d006      	beq.n	800c830 <_realloc_r+0x7c>
 800c822:	2501      	movs	r5, #1
 800c824:	0011      	movs	r1, r2
 800c826:	43a9      	bics	r1, r5
 800c828:	1859      	adds	r1, r3, r1
 800c82a:	6849      	ldr	r1, [r1, #4]
 800c82c:	4229      	tst	r1, r5
 800c82e:	d126      	bne.n	800c87e <_realloc_r+0xca>
 800c830:	2103      	movs	r1, #3
 800c832:	438a      	bics	r2, r1
 800c834:	9903      	ldr	r1, [sp, #12]
 800c836:	188e      	adds	r6, r1, r2
 800c838:	9901      	ldr	r1, [sp, #4]
 800c83a:	459c      	cmp	ip, r3
 800c83c:	d117      	bne.n	800c86e <_realloc_r+0xba>
 800c83e:	3110      	adds	r1, #16
 800c840:	42b1      	cmp	r1, r6
 800c842:	dc1e      	bgt.n	800c882 <_realloc_r+0xce>
 800c844:	9901      	ldr	r1, [sp, #4]
 800c846:	9b04      	ldr	r3, [sp, #16]
 800c848:	468c      	mov	ip, r1
 800c84a:	4463      	add	r3, ip
 800c84c:	6083      	str	r3, [r0, #8]
 800c84e:	001a      	movs	r2, r3
 800c850:	1a73      	subs	r3, r6, r1
 800c852:	2601      	movs	r6, #1
 800c854:	4333      	orrs	r3, r6
 800c856:	6053      	str	r3, [r2, #4]
 800c858:	0023      	movs	r3, r4
 800c85a:	3b08      	subs	r3, #8
 800c85c:	685a      	ldr	r2, [r3, #4]
 800c85e:	9802      	ldr	r0, [sp, #8]
 800c860:	4016      	ands	r6, r2
 800c862:	430e      	orrs	r6, r1
 800c864:	605e      	str	r6, [r3, #4]
 800c866:	f7ff faa1 	bl	800bdac <__malloc_unlock>
 800c86a:	0027      	movs	r7, r4
 800c86c:	e7ac      	b.n	800c7c8 <_realloc_r+0x14>
 800c86e:	42b1      	cmp	r1, r6
 800c870:	dc07      	bgt.n	800c882 <_realloc_r+0xce>
 800c872:	68da      	ldr	r2, [r3, #12]
 800c874:	689b      	ldr	r3, [r3, #8]
 800c876:	60da      	str	r2, [r3, #12]
 800c878:	6093      	str	r3, [r2, #8]
 800c87a:	9d04      	ldr	r5, [sp, #16]
 800c87c:	e07f      	b.n	800c97e <_realloc_r+0x1ca>
 800c87e:	2200      	movs	r2, #0
 800c880:	0013      	movs	r3, r2
 800c882:	07f9      	lsls	r1, r7, #31
 800c884:	d500      	bpl.n	800c888 <_realloc_r+0xd4>
 800c886:	e0e2      	b.n	800ca4e <_realloc_r+0x29a>
 800c888:	0021      	movs	r1, r4
 800c88a:	3908      	subs	r1, #8
 800c88c:	680d      	ldr	r5, [r1, #0]
 800c88e:	9904      	ldr	r1, [sp, #16]
 800c890:	1b4d      	subs	r5, r1, r5
 800c892:	2103      	movs	r1, #3
 800c894:	686f      	ldr	r7, [r5, #4]
 800c896:	438f      	bics	r7, r1
 800c898:	9903      	ldr	r1, [sp, #12]
 800c89a:	187f      	adds	r7, r7, r1
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d100      	bne.n	800c8a2 <_realloc_r+0xee>
 800c8a0:	e0a0      	b.n	800c9e4 <_realloc_r+0x230>
 800c8a2:	19d6      	adds	r6, r2, r7
 800c8a4:	459c      	cmp	ip, r3
 800c8a6:	d149      	bne.n	800c93c <_realloc_r+0x188>
 800c8a8:	9b01      	ldr	r3, [sp, #4]
 800c8aa:	3310      	adds	r3, #16
 800c8ac:	42b3      	cmp	r3, r6
 800c8ae:	dd00      	ble.n	800c8b2 <_realloc_r+0xfe>
 800c8b0:	e098      	b.n	800c9e4 <_realloc_r+0x230>
 800c8b2:	68aa      	ldr	r2, [r5, #8]
 800c8b4:	68eb      	ldr	r3, [r5, #12]
 800c8b6:	002f      	movs	r7, r5
 800c8b8:	60d3      	str	r3, [r2, #12]
 800c8ba:	609a      	str	r2, [r3, #8]
 800c8bc:	000a      	movs	r2, r1
 800c8be:	3a04      	subs	r2, #4
 800c8c0:	3708      	adds	r7, #8
 800c8c2:	2a24      	cmp	r2, #36	; 0x24
 800c8c4:	d835      	bhi.n	800c932 <_realloc_r+0x17e>
 800c8c6:	003b      	movs	r3, r7
 800c8c8:	2a13      	cmp	r2, #19
 800c8ca:	d908      	bls.n	800c8de <_realloc_r+0x12a>
 800c8cc:	6823      	ldr	r3, [r4, #0]
 800c8ce:	60ab      	str	r3, [r5, #8]
 800c8d0:	6863      	ldr	r3, [r4, #4]
 800c8d2:	60eb      	str	r3, [r5, #12]
 800c8d4:	2a1b      	cmp	r2, #27
 800c8d6:	d81a      	bhi.n	800c90e <_realloc_r+0x15a>
 800c8d8:	002b      	movs	r3, r5
 800c8da:	3408      	adds	r4, #8
 800c8dc:	3310      	adds	r3, #16
 800c8de:	6822      	ldr	r2, [r4, #0]
 800c8e0:	601a      	str	r2, [r3, #0]
 800c8e2:	6862      	ldr	r2, [r4, #4]
 800c8e4:	605a      	str	r2, [r3, #4]
 800c8e6:	68a2      	ldr	r2, [r4, #8]
 800c8e8:	609a      	str	r2, [r3, #8]
 800c8ea:	9b01      	ldr	r3, [sp, #4]
 800c8ec:	18ea      	adds	r2, r5, r3
 800c8ee:	4b83      	ldr	r3, [pc, #524]	; (800cafc <_realloc_r+0x348>)
 800c8f0:	609a      	str	r2, [r3, #8]
 800c8f2:	9b01      	ldr	r3, [sp, #4]
 800c8f4:	1af3      	subs	r3, r6, r3
 800c8f6:	2601      	movs	r6, #1
 800c8f8:	4333      	orrs	r3, r6
 800c8fa:	6053      	str	r3, [r2, #4]
 800c8fc:	686b      	ldr	r3, [r5, #4]
 800c8fe:	401e      	ands	r6, r3
 800c900:	9b01      	ldr	r3, [sp, #4]
 800c902:	431e      	orrs	r6, r3
 800c904:	606e      	str	r6, [r5, #4]
 800c906:	9802      	ldr	r0, [sp, #8]
 800c908:	f7ff fa50 	bl	800bdac <__malloc_unlock>
 800c90c:	e75c      	b.n	800c7c8 <_realloc_r+0x14>
 800c90e:	68a3      	ldr	r3, [r4, #8]
 800c910:	612b      	str	r3, [r5, #16]
 800c912:	68e3      	ldr	r3, [r4, #12]
 800c914:	616b      	str	r3, [r5, #20]
 800c916:	2a24      	cmp	r2, #36	; 0x24
 800c918:	d003      	beq.n	800c922 <_realloc_r+0x16e>
 800c91a:	002b      	movs	r3, r5
 800c91c:	3410      	adds	r4, #16
 800c91e:	3318      	adds	r3, #24
 800c920:	e7dd      	b.n	800c8de <_realloc_r+0x12a>
 800c922:	6923      	ldr	r3, [r4, #16]
 800c924:	61ab      	str	r3, [r5, #24]
 800c926:	002b      	movs	r3, r5
 800c928:	6962      	ldr	r2, [r4, #20]
 800c92a:	3320      	adds	r3, #32
 800c92c:	61ea      	str	r2, [r5, #28]
 800c92e:	3418      	adds	r4, #24
 800c930:	e7d5      	b.n	800c8de <_realloc_r+0x12a>
 800c932:	0021      	movs	r1, r4
 800c934:	0038      	movs	r0, r7
 800c936:	f7ff ff29 	bl	800c78c <memmove>
 800c93a:	e7d6      	b.n	800c8ea <_realloc_r+0x136>
 800c93c:	9a01      	ldr	r2, [sp, #4]
 800c93e:	42b2      	cmp	r2, r6
 800c940:	dc50      	bgt.n	800c9e4 <_realloc_r+0x230>
 800c942:	0028      	movs	r0, r5
 800c944:	68da      	ldr	r2, [r3, #12]
 800c946:	689b      	ldr	r3, [r3, #8]
 800c948:	3008      	adds	r0, #8
 800c94a:	60da      	str	r2, [r3, #12]
 800c94c:	6093      	str	r3, [r2, #8]
 800c94e:	68aa      	ldr	r2, [r5, #8]
 800c950:	68eb      	ldr	r3, [r5, #12]
 800c952:	60d3      	str	r3, [r2, #12]
 800c954:	609a      	str	r2, [r3, #8]
 800c956:	9a03      	ldr	r2, [sp, #12]
 800c958:	3a04      	subs	r2, #4
 800c95a:	2a24      	cmp	r2, #36	; 0x24
 800c95c:	d83e      	bhi.n	800c9dc <_realloc_r+0x228>
 800c95e:	2a13      	cmp	r2, #19
 800c960:	d907      	bls.n	800c972 <_realloc_r+0x1be>
 800c962:	6823      	ldr	r3, [r4, #0]
 800c964:	60ab      	str	r3, [r5, #8]
 800c966:	6863      	ldr	r3, [r4, #4]
 800c968:	60eb      	str	r3, [r5, #12]
 800c96a:	2a1b      	cmp	r2, #27
 800c96c:	d824      	bhi.n	800c9b8 <_realloc_r+0x204>
 800c96e:	3408      	adds	r4, #8
 800c970:	3008      	adds	r0, #8
 800c972:	6823      	ldr	r3, [r4, #0]
 800c974:	6003      	str	r3, [r0, #0]
 800c976:	6863      	ldr	r3, [r4, #4]
 800c978:	6043      	str	r3, [r0, #4]
 800c97a:	68a3      	ldr	r3, [r4, #8]
 800c97c:	6083      	str	r3, [r0, #8]
 800c97e:	9b01      	ldr	r3, [sp, #4]
 800c980:	6868      	ldr	r0, [r5, #4]
 800c982:	1af4      	subs	r4, r6, r3
 800c984:	2301      	movs	r3, #1
 800c986:	19aa      	adds	r2, r5, r6
 800c988:	4018      	ands	r0, r3
 800c98a:	2c0f      	cmp	r4, #15
 800c98c:	d800      	bhi.n	800c990 <_realloc_r+0x1dc>
 800c98e:	e0ae      	b.n	800caee <_realloc_r+0x33a>
 800c990:	9901      	ldr	r1, [sp, #4]
 800c992:	9e01      	ldr	r6, [sp, #4]
 800c994:	1869      	adds	r1, r5, r1
 800c996:	4330      	orrs	r0, r6
 800c998:	431c      	orrs	r4, r3
 800c99a:	6068      	str	r0, [r5, #4]
 800c99c:	604c      	str	r4, [r1, #4]
 800c99e:	6850      	ldr	r0, [r2, #4]
 800c9a0:	3108      	adds	r1, #8
 800c9a2:	4303      	orrs	r3, r0
 800c9a4:	6053      	str	r3, [r2, #4]
 800c9a6:	9802      	ldr	r0, [sp, #8]
 800c9a8:	f7fe ff2a 	bl	800b800 <_free_r>
 800c9ac:	9802      	ldr	r0, [sp, #8]
 800c9ae:	3508      	adds	r5, #8
 800c9b0:	f7ff f9fc 	bl	800bdac <__malloc_unlock>
 800c9b4:	002f      	movs	r7, r5
 800c9b6:	e707      	b.n	800c7c8 <_realloc_r+0x14>
 800c9b8:	68a3      	ldr	r3, [r4, #8]
 800c9ba:	612b      	str	r3, [r5, #16]
 800c9bc:	68e3      	ldr	r3, [r4, #12]
 800c9be:	616b      	str	r3, [r5, #20]
 800c9c0:	2a24      	cmp	r2, #36	; 0x24
 800c9c2:	d003      	beq.n	800c9cc <_realloc_r+0x218>
 800c9c4:	0028      	movs	r0, r5
 800c9c6:	3410      	adds	r4, #16
 800c9c8:	3018      	adds	r0, #24
 800c9ca:	e7d2      	b.n	800c972 <_realloc_r+0x1be>
 800c9cc:	0028      	movs	r0, r5
 800c9ce:	6923      	ldr	r3, [r4, #16]
 800c9d0:	3020      	adds	r0, #32
 800c9d2:	61ab      	str	r3, [r5, #24]
 800c9d4:	6963      	ldr	r3, [r4, #20]
 800c9d6:	3418      	adds	r4, #24
 800c9d8:	61eb      	str	r3, [r5, #28]
 800c9da:	e7ca      	b.n	800c972 <_realloc_r+0x1be>
 800c9dc:	0021      	movs	r1, r4
 800c9de:	f7ff fed5 	bl	800c78c <memmove>
 800c9e2:	e7cc      	b.n	800c97e <_realloc_r+0x1ca>
 800c9e4:	9b01      	ldr	r3, [sp, #4]
 800c9e6:	42bb      	cmp	r3, r7
 800c9e8:	dc31      	bgt.n	800ca4e <_realloc_r+0x29a>
 800c9ea:	0028      	movs	r0, r5
 800c9ec:	68aa      	ldr	r2, [r5, #8]
 800c9ee:	68eb      	ldr	r3, [r5, #12]
 800c9f0:	3008      	adds	r0, #8
 800c9f2:	60d3      	str	r3, [r2, #12]
 800c9f4:	609a      	str	r2, [r3, #8]
 800c9f6:	9a03      	ldr	r2, [sp, #12]
 800c9f8:	3a04      	subs	r2, #4
 800c9fa:	2a24      	cmp	r2, #36	; 0x24
 800c9fc:	d823      	bhi.n	800ca46 <_realloc_r+0x292>
 800c9fe:	2a13      	cmp	r2, #19
 800ca00:	d907      	bls.n	800ca12 <_realloc_r+0x25e>
 800ca02:	6823      	ldr	r3, [r4, #0]
 800ca04:	60ab      	str	r3, [r5, #8]
 800ca06:	6863      	ldr	r3, [r4, #4]
 800ca08:	60eb      	str	r3, [r5, #12]
 800ca0a:	2a1b      	cmp	r2, #27
 800ca0c:	d809      	bhi.n	800ca22 <_realloc_r+0x26e>
 800ca0e:	3408      	adds	r4, #8
 800ca10:	3008      	adds	r0, #8
 800ca12:	6823      	ldr	r3, [r4, #0]
 800ca14:	6003      	str	r3, [r0, #0]
 800ca16:	6863      	ldr	r3, [r4, #4]
 800ca18:	6043      	str	r3, [r0, #4]
 800ca1a:	68a3      	ldr	r3, [r4, #8]
 800ca1c:	6083      	str	r3, [r0, #8]
 800ca1e:	003e      	movs	r6, r7
 800ca20:	e7ad      	b.n	800c97e <_realloc_r+0x1ca>
 800ca22:	68a3      	ldr	r3, [r4, #8]
 800ca24:	612b      	str	r3, [r5, #16]
 800ca26:	68e3      	ldr	r3, [r4, #12]
 800ca28:	616b      	str	r3, [r5, #20]
 800ca2a:	2a24      	cmp	r2, #36	; 0x24
 800ca2c:	d003      	beq.n	800ca36 <_realloc_r+0x282>
 800ca2e:	0028      	movs	r0, r5
 800ca30:	3410      	adds	r4, #16
 800ca32:	3018      	adds	r0, #24
 800ca34:	e7ed      	b.n	800ca12 <_realloc_r+0x25e>
 800ca36:	0028      	movs	r0, r5
 800ca38:	6923      	ldr	r3, [r4, #16]
 800ca3a:	3020      	adds	r0, #32
 800ca3c:	61ab      	str	r3, [r5, #24]
 800ca3e:	6963      	ldr	r3, [r4, #20]
 800ca40:	3418      	adds	r4, #24
 800ca42:	61eb      	str	r3, [r5, #28]
 800ca44:	e7e5      	b.n	800ca12 <_realloc_r+0x25e>
 800ca46:	0021      	movs	r1, r4
 800ca48:	f7ff fea0 	bl	800c78c <memmove>
 800ca4c:	e7e7      	b.n	800ca1e <_realloc_r+0x26a>
 800ca4e:	9905      	ldr	r1, [sp, #20]
 800ca50:	9802      	ldr	r0, [sp, #8]
 800ca52:	f7fe ff8f 	bl	800b974 <_malloc_r>
 800ca56:	1e07      	subs	r7, r0, #0
 800ca58:	d100      	bne.n	800ca5c <_realloc_r+0x2a8>
 800ca5a:	e754      	b.n	800c906 <_realloc_r+0x152>
 800ca5c:	0023      	movs	r3, r4
 800ca5e:	2201      	movs	r2, #1
 800ca60:	3b08      	subs	r3, #8
 800ca62:	685b      	ldr	r3, [r3, #4]
 800ca64:	4393      	bics	r3, r2
 800ca66:	9a04      	ldr	r2, [sp, #16]
 800ca68:	18d3      	adds	r3, r2, r3
 800ca6a:	0002      	movs	r2, r0
 800ca6c:	3a08      	subs	r2, #8
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d105      	bne.n	800ca7e <_realloc_r+0x2ca>
 800ca72:	685e      	ldr	r6, [r3, #4]
 800ca74:	2303      	movs	r3, #3
 800ca76:	439e      	bics	r6, r3
 800ca78:	9b03      	ldr	r3, [sp, #12]
 800ca7a:	18f6      	adds	r6, r6, r3
 800ca7c:	e6fd      	b.n	800c87a <_realloc_r+0xc6>
 800ca7e:	9a03      	ldr	r2, [sp, #12]
 800ca80:	3a04      	subs	r2, #4
 800ca82:	2a24      	cmp	r2, #36	; 0x24
 800ca84:	d82d      	bhi.n	800cae2 <_realloc_r+0x32e>
 800ca86:	2a13      	cmp	r2, #19
 800ca88:	d928      	bls.n	800cadc <_realloc_r+0x328>
 800ca8a:	6823      	ldr	r3, [r4, #0]
 800ca8c:	6003      	str	r3, [r0, #0]
 800ca8e:	6863      	ldr	r3, [r4, #4]
 800ca90:	6043      	str	r3, [r0, #4]
 800ca92:	2a1b      	cmp	r2, #27
 800ca94:	d80e      	bhi.n	800cab4 <_realloc_r+0x300>
 800ca96:	0022      	movs	r2, r4
 800ca98:	0003      	movs	r3, r0
 800ca9a:	3208      	adds	r2, #8
 800ca9c:	3308      	adds	r3, #8
 800ca9e:	6811      	ldr	r1, [r2, #0]
 800caa0:	6019      	str	r1, [r3, #0]
 800caa2:	6851      	ldr	r1, [r2, #4]
 800caa4:	6059      	str	r1, [r3, #4]
 800caa6:	6892      	ldr	r2, [r2, #8]
 800caa8:	609a      	str	r2, [r3, #8]
 800caaa:	0021      	movs	r1, r4
 800caac:	9802      	ldr	r0, [sp, #8]
 800caae:	f7fe fea7 	bl	800b800 <_free_r>
 800cab2:	e728      	b.n	800c906 <_realloc_r+0x152>
 800cab4:	68a3      	ldr	r3, [r4, #8]
 800cab6:	6083      	str	r3, [r0, #8]
 800cab8:	68e3      	ldr	r3, [r4, #12]
 800caba:	60c3      	str	r3, [r0, #12]
 800cabc:	2a24      	cmp	r2, #36	; 0x24
 800cabe:	d004      	beq.n	800caca <_realloc_r+0x316>
 800cac0:	0022      	movs	r2, r4
 800cac2:	0003      	movs	r3, r0
 800cac4:	3210      	adds	r2, #16
 800cac6:	3310      	adds	r3, #16
 800cac8:	e7e9      	b.n	800ca9e <_realloc_r+0x2ea>
 800caca:	6923      	ldr	r3, [r4, #16]
 800cacc:	0022      	movs	r2, r4
 800cace:	6103      	str	r3, [r0, #16]
 800cad0:	0003      	movs	r3, r0
 800cad2:	6961      	ldr	r1, [r4, #20]
 800cad4:	3218      	adds	r2, #24
 800cad6:	3318      	adds	r3, #24
 800cad8:	6141      	str	r1, [r0, #20]
 800cada:	e7e0      	b.n	800ca9e <_realloc_r+0x2ea>
 800cadc:	0003      	movs	r3, r0
 800cade:	0022      	movs	r2, r4
 800cae0:	e7dd      	b.n	800ca9e <_realloc_r+0x2ea>
 800cae2:	0021      	movs	r1, r4
 800cae4:	f7ff fe52 	bl	800c78c <memmove>
 800cae8:	e7df      	b.n	800caaa <_realloc_r+0x2f6>
 800caea:	9e03      	ldr	r6, [sp, #12]
 800caec:	e6c5      	b.n	800c87a <_realloc_r+0xc6>
 800caee:	4306      	orrs	r6, r0
 800caf0:	606e      	str	r6, [r5, #4]
 800caf2:	6851      	ldr	r1, [r2, #4]
 800caf4:	430b      	orrs	r3, r1
 800caf6:	6053      	str	r3, [r2, #4]
 800caf8:	e758      	b.n	800c9ac <_realloc_r+0x1f8>
 800cafa:	46c0      	nop			; (mov r8, r8)
 800cafc:	20000444 	.word	0x20000444

0800cb00 <__sprint_r>:
 800cb00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb02:	b085      	sub	sp, #20
 800cb04:	9001      	str	r0, [sp, #4]
 800cb06:	6890      	ldr	r0, [r2, #8]
 800cb08:	000d      	movs	r5, r1
 800cb0a:	0014      	movs	r4, r2
 800cb0c:	2800      	cmp	r0, #0
 800cb0e:	d102      	bne.n	800cb16 <__sprint_r+0x16>
 800cb10:	6050      	str	r0, [r2, #4]
 800cb12:	b005      	add	sp, #20
 800cb14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb16:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800cb18:	049b      	lsls	r3, r3, #18
 800cb1a:	d521      	bpl.n	800cb60 <__sprint_r+0x60>
 800cb1c:	6817      	ldr	r7, [r2, #0]
 800cb1e:	2600      	movs	r6, #0
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	9302      	str	r3, [sp, #8]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	9300      	str	r3, [sp, #0]
 800cb28:	089b      	lsrs	r3, r3, #2
 800cb2a:	9303      	str	r3, [sp, #12]
 800cb2c:	9b03      	ldr	r3, [sp, #12]
 800cb2e:	42b3      	cmp	r3, r6
 800cb30:	dc0b      	bgt.n	800cb4a <__sprint_r+0x4a>
 800cb32:	2303      	movs	r3, #3
 800cb34:	9800      	ldr	r0, [sp, #0]
 800cb36:	3708      	adds	r7, #8
 800cb38:	4398      	bics	r0, r3
 800cb3a:	68a3      	ldr	r3, [r4, #8]
 800cb3c:	1a18      	subs	r0, r3, r0
 800cb3e:	60a0      	str	r0, [r4, #8]
 800cb40:	d1ed      	bne.n	800cb1e <__sprint_r+0x1e>
 800cb42:	2300      	movs	r3, #0
 800cb44:	60a3      	str	r3, [r4, #8]
 800cb46:	6063      	str	r3, [r4, #4]
 800cb48:	e7e3      	b.n	800cb12 <__sprint_r+0x12>
 800cb4a:	9902      	ldr	r1, [sp, #8]
 800cb4c:	00b3      	lsls	r3, r6, #2
 800cb4e:	58c9      	ldr	r1, [r1, r3]
 800cb50:	002a      	movs	r2, r5
 800cb52:	9801      	ldr	r0, [sp, #4]
 800cb54:	f000 ff3a 	bl	800d9cc <_fputwc_r>
 800cb58:	1c43      	adds	r3, r0, #1
 800cb5a:	d0f2      	beq.n	800cb42 <__sprint_r+0x42>
 800cb5c:	3601      	adds	r6, #1
 800cb5e:	e7e5      	b.n	800cb2c <__sprint_r+0x2c>
 800cb60:	9801      	ldr	r0, [sp, #4]
 800cb62:	f000 ff5d 	bl	800da20 <__sfvwrite_r>
 800cb66:	e7ec      	b.n	800cb42 <__sprint_r+0x42>

0800cb68 <_vfiprintf_r>:
 800cb68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb6a:	b0c3      	sub	sp, #268	; 0x10c
 800cb6c:	001c      	movs	r4, r3
 800cb6e:	001d      	movs	r5, r3
 800cb70:	9006      	str	r0, [sp, #24]
 800cb72:	9103      	str	r1, [sp, #12]
 800cb74:	9207      	str	r2, [sp, #28]
 800cb76:	2800      	cmp	r0, #0
 800cb78:	d005      	beq.n	800cb86 <_vfiprintf_r+0x1e>
 800cb7a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800cb7c:	9304      	str	r3, [sp, #16]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d101      	bne.n	800cb86 <_vfiprintf_r+0x1e>
 800cb82:	f000 febb 	bl	800d8fc <__sinit>
 800cb86:	9b03      	ldr	r3, [sp, #12]
 800cb88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb8a:	07db      	lsls	r3, r3, #31
 800cb8c:	d407      	bmi.n	800cb9e <_vfiprintf_r+0x36>
 800cb8e:	9b03      	ldr	r3, [sp, #12]
 800cb90:	899b      	ldrh	r3, [r3, #12]
 800cb92:	059b      	lsls	r3, r3, #22
 800cb94:	d403      	bmi.n	800cb9e <_vfiprintf_r+0x36>
 800cb96:	9b03      	ldr	r3, [sp, #12]
 800cb98:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800cb9a:	f7fe fee9 	bl	800b970 <__retarget_lock_acquire_recursive>
 800cb9e:	9b03      	ldr	r3, [sp, #12]
 800cba0:	220c      	movs	r2, #12
 800cba2:	5e9a      	ldrsh	r2, [r3, r2]
 800cba4:	2380      	movs	r3, #128	; 0x80
 800cba6:	019b      	lsls	r3, r3, #6
 800cba8:	421a      	tst	r2, r3
 800cbaa:	d107      	bne.n	800cbbc <_vfiprintf_r+0x54>
 800cbac:	4313      	orrs	r3, r2
 800cbae:	9a03      	ldr	r2, [sp, #12]
 800cbb0:	8193      	strh	r3, [r2, #12]
 800cbb2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800cbb4:	4ba7      	ldr	r3, [pc, #668]	; (800ce54 <_vfiprintf_r+0x2ec>)
 800cbb6:	4013      	ands	r3, r2
 800cbb8:	9a03      	ldr	r2, [sp, #12]
 800cbba:	6653      	str	r3, [r2, #100]	; 0x64
 800cbbc:	9b03      	ldr	r3, [sp, #12]
 800cbbe:	899b      	ldrh	r3, [r3, #12]
 800cbc0:	071b      	lsls	r3, r3, #28
 800cbc2:	d503      	bpl.n	800cbcc <_vfiprintf_r+0x64>
 800cbc4:	9b03      	ldr	r3, [sp, #12]
 800cbc6:	691b      	ldr	r3, [r3, #16]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d118      	bne.n	800cbfe <_vfiprintf_r+0x96>
 800cbcc:	9903      	ldr	r1, [sp, #12]
 800cbce:	9806      	ldr	r0, [sp, #24]
 800cbd0:	f000 fd1a 	bl	800d608 <__swsetup_r>
 800cbd4:	2800      	cmp	r0, #0
 800cbd6:	d012      	beq.n	800cbfe <_vfiprintf_r+0x96>
 800cbd8:	9b03      	ldr	r3, [sp, #12]
 800cbda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cbdc:	07db      	lsls	r3, r3, #31
 800cbde:	d505      	bpl.n	800cbec <_vfiprintf_r+0x84>
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	425b      	negs	r3, r3
 800cbe4:	9308      	str	r3, [sp, #32]
 800cbe6:	9808      	ldr	r0, [sp, #32]
 800cbe8:	b043      	add	sp, #268	; 0x10c
 800cbea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbec:	9b03      	ldr	r3, [sp, #12]
 800cbee:	899b      	ldrh	r3, [r3, #12]
 800cbf0:	059b      	lsls	r3, r3, #22
 800cbf2:	d4f5      	bmi.n	800cbe0 <_vfiprintf_r+0x78>
 800cbf4:	9b03      	ldr	r3, [sp, #12]
 800cbf6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800cbf8:	f7fe febb 	bl	800b972 <__retarget_lock_release_recursive>
 800cbfc:	e7f0      	b.n	800cbe0 <_vfiprintf_r+0x78>
 800cbfe:	9b03      	ldr	r3, [sp, #12]
 800cc00:	899a      	ldrh	r2, [r3, #12]
 800cc02:	231a      	movs	r3, #26
 800cc04:	4013      	ands	r3, r2
 800cc06:	2b0a      	cmp	r3, #10
 800cc08:	d116      	bne.n	800cc38 <_vfiprintf_r+0xd0>
 800cc0a:	9b03      	ldr	r3, [sp, #12]
 800cc0c:	210e      	movs	r1, #14
 800cc0e:	5e5b      	ldrsh	r3, [r3, r1]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	db11      	blt.n	800cc38 <_vfiprintf_r+0xd0>
 800cc14:	9b03      	ldr	r3, [sp, #12]
 800cc16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc18:	07db      	lsls	r3, r3, #31
 800cc1a:	d405      	bmi.n	800cc28 <_vfiprintf_r+0xc0>
 800cc1c:	0593      	lsls	r3, r2, #22
 800cc1e:	d403      	bmi.n	800cc28 <_vfiprintf_r+0xc0>
 800cc20:	9b03      	ldr	r3, [sp, #12]
 800cc22:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800cc24:	f7fe fea5 	bl	800b972 <__retarget_lock_release_recursive>
 800cc28:	0023      	movs	r3, r4
 800cc2a:	9a07      	ldr	r2, [sp, #28]
 800cc2c:	9903      	ldr	r1, [sp, #12]
 800cc2e:	9806      	ldr	r0, [sp, #24]
 800cc30:	f000 fc98 	bl	800d564 <__sbprintf>
 800cc34:	9008      	str	r0, [sp, #32]
 800cc36:	e7d6      	b.n	800cbe6 <_vfiprintf_r+0x7e>
 800cc38:	2300      	movs	r3, #0
 800cc3a:	af19      	add	r7, sp, #100	; 0x64
 800cc3c:	9716      	str	r7, [sp, #88]	; 0x58
 800cc3e:	9318      	str	r3, [sp, #96]	; 0x60
 800cc40:	9317      	str	r3, [sp, #92]	; 0x5c
 800cc42:	930c      	str	r3, [sp, #48]	; 0x30
 800cc44:	930d      	str	r3, [sp, #52]	; 0x34
 800cc46:	930e      	str	r3, [sp, #56]	; 0x38
 800cc48:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc4a:	9308      	str	r3, [sp, #32]
 800cc4c:	9c07      	ldr	r4, [sp, #28]
 800cc4e:	7823      	ldrb	r3, [r4, #0]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d002      	beq.n	800cc5a <_vfiprintf_r+0xf2>
 800cc54:	2b25      	cmp	r3, #37	; 0x25
 800cc56:	d000      	beq.n	800cc5a <_vfiprintf_r+0xf2>
 800cc58:	e093      	b.n	800cd82 <_vfiprintf_r+0x21a>
 800cc5a:	9b07      	ldr	r3, [sp, #28]
 800cc5c:	1ae3      	subs	r3, r4, r3
 800cc5e:	001e      	movs	r6, r3
 800cc60:	9b07      	ldr	r3, [sp, #28]
 800cc62:	429c      	cmp	r4, r3
 800cc64:	d01a      	beq.n	800cc9c <_vfiprintf_r+0x134>
 800cc66:	46b4      	mov	ip, r6
 800cc68:	603b      	str	r3, [r7, #0]
 800cc6a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800cc6c:	607e      	str	r6, [r7, #4]
 800cc6e:	4463      	add	r3, ip
 800cc70:	9318      	str	r3, [sp, #96]	; 0x60
 800cc72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cc74:	3708      	adds	r7, #8
 800cc76:	9304      	str	r3, [sp, #16]
 800cc78:	3301      	adds	r3, #1
 800cc7a:	9317      	str	r3, [sp, #92]	; 0x5c
 800cc7c:	2b07      	cmp	r3, #7
 800cc7e:	dd09      	ble.n	800cc94 <_vfiprintf_r+0x12c>
 800cc80:	9903      	ldr	r1, [sp, #12]
 800cc82:	9806      	ldr	r0, [sp, #24]
 800cc84:	aa16      	add	r2, sp, #88	; 0x58
 800cc86:	f7ff ff3b 	bl	800cb00 <__sprint_r>
 800cc8a:	2800      	cmp	r0, #0
 800cc8c:	d001      	beq.n	800cc92 <_vfiprintf_r+0x12a>
 800cc8e:	f000 fc00 	bl	800d492 <_vfiprintf_r+0x92a>
 800cc92:	af19      	add	r7, sp, #100	; 0x64
 800cc94:	46b4      	mov	ip, r6
 800cc96:	9b08      	ldr	r3, [sp, #32]
 800cc98:	4463      	add	r3, ip
 800cc9a:	9308      	str	r3, [sp, #32]
 800cc9c:	7823      	ldrb	r3, [r4, #0]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d101      	bne.n	800cca6 <_vfiprintf_r+0x13e>
 800cca2:	f000 fc1b 	bl	800d4dc <_vfiprintf_r+0x974>
 800cca6:	2200      	movs	r2, #0
 800cca8:	a914      	add	r1, sp, #80	; 0x50
 800ccaa:	70ca      	strb	r2, [r1, #3]
 800ccac:	2101      	movs	r1, #1
 800ccae:	1c63      	adds	r3, r4, #1
 800ccb0:	0014      	movs	r4, r2
 800ccb2:	4249      	negs	r1, r1
 800ccb4:	9105      	str	r1, [sp, #20]
 800ccb6:	9209      	str	r2, [sp, #36]	; 0x24
 800ccb8:	1c5a      	adds	r2, r3, #1
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	9207      	str	r2, [sp, #28]
 800ccbe:	0018      	movs	r0, r3
 800ccc0:	3820      	subs	r0, #32
 800ccc2:	285a      	cmp	r0, #90	; 0x5a
 800ccc4:	d900      	bls.n	800ccc8 <_vfiprintf_r+0x160>
 800ccc6:	e37c      	b.n	800d3c2 <_vfiprintf_r+0x85a>
 800ccc8:	f7f3 fa30 	bl	800012c <__gnu_thumb1_case_uhi>
 800cccc:	037b0098 	.word	0x037b0098
 800ccd0:	00a1037b 	.word	0x00a1037b
 800ccd4:	037b037b 	.word	0x037b037b
 800ccd8:	007d037b 	.word	0x007d037b
 800ccdc:	037b037b 	.word	0x037b037b
 800cce0:	00ab00a3 	.word	0x00ab00a3
 800cce4:	00a9037b 	.word	0x00a9037b
 800cce8:	037b00af 	.word	0x037b00af
 800ccec:	00d500d3 	.word	0x00d500d3
 800ccf0:	00d500d5 	.word	0x00d500d5
 800ccf4:	00d500d5 	.word	0x00d500d5
 800ccf8:	00d500d5 	.word	0x00d500d5
 800ccfc:	00d500d5 	.word	0x00d500d5
 800cd00:	037b037b 	.word	0x037b037b
 800cd04:	037b037b 	.word	0x037b037b
 800cd08:	037b037b 	.word	0x037b037b
 800cd0c:	037b037b 	.word	0x037b037b
 800cd10:	00fe037b 	.word	0x00fe037b
 800cd14:	037b01f9 	.word	0x037b01f9
 800cd18:	037b037b 	.word	0x037b037b
 800cd1c:	037b037b 	.word	0x037b037b
 800cd20:	037b037b 	.word	0x037b037b
 800cd24:	037b037b 	.word	0x037b037b
 800cd28:	0252037b 	.word	0x0252037b
 800cd2c:	037b037b 	.word	0x037b037b
 800cd30:	0295037b 	.word	0x0295037b
 800cd34:	02b1037b 	.word	0x02b1037b
 800cd38:	037b037b 	.word	0x037b037b
 800cd3c:	037b02ec 	.word	0x037b02ec
 800cd40:	037b037b 	.word	0x037b037b
 800cd44:	037b037b 	.word	0x037b037b
 800cd48:	037b037b 	.word	0x037b037b
 800cd4c:	037b037b 	.word	0x037b037b
 800cd50:	00fe037b 	.word	0x00fe037b
 800cd54:	037b01fb 	.word	0x037b01fb
 800cd58:	037b037b 	.word	0x037b037b
 800cd5c:	01fb00e7 	.word	0x01fb00e7
 800cd60:	037b00fa 	.word	0x037b00fa
 800cd64:	037b00f3 	.word	0x037b00f3
 800cd68:	0254023b 	.word	0x0254023b
 800cd6c:	00fa0287 	.word	0x00fa0287
 800cd70:	0295037b 	.word	0x0295037b
 800cd74:	02b3009f 	.word	0x02b3009f
 800cd78:	037b037b 	.word	0x037b037b
 800cd7c:	037b005d 	.word	0x037b005d
 800cd80:	009f      	.short	0x009f
 800cd82:	3401      	adds	r4, #1
 800cd84:	e763      	b.n	800cc4e <_vfiprintf_r+0xe6>
 800cd86:	4a34      	ldr	r2, [pc, #208]	; (800ce58 <_vfiprintf_r+0x2f0>)
 800cd88:	0020      	movs	r0, r4
 800cd8a:	920c      	str	r2, [sp, #48]	; 0x30
 800cd8c:	2220      	movs	r2, #32
 800cd8e:	4010      	ands	r0, r2
 800cd90:	4214      	tst	r4, r2
 800cd92:	d100      	bne.n	800cd96 <_vfiprintf_r+0x22e>
 800cd94:	e288      	b.n	800d2a8 <_vfiprintf_r+0x740>
 800cd96:	3a19      	subs	r2, #25
 800cd98:	3507      	adds	r5, #7
 800cd9a:	4395      	bics	r5, r2
 800cd9c:	0028      	movs	r0, r5
 800cd9e:	c806      	ldmia	r0!, {r1, r2}
 800cda0:	9100      	str	r1, [sp, #0]
 800cda2:	9201      	str	r2, [sp, #4]
 800cda4:	9004      	str	r0, [sp, #16]
 800cda6:	07e2      	lsls	r2, r4, #31
 800cda8:	d509      	bpl.n	800cdbe <_vfiprintf_r+0x256>
 800cdaa:	9a00      	ldr	r2, [sp, #0]
 800cdac:	9901      	ldr	r1, [sp, #4]
 800cdae:	430a      	orrs	r2, r1
 800cdb0:	d005      	beq.n	800cdbe <_vfiprintf_r+0x256>
 800cdb2:	aa15      	add	r2, sp, #84	; 0x54
 800cdb4:	2130      	movs	r1, #48	; 0x30
 800cdb6:	7053      	strb	r3, [r2, #1]
 800cdb8:	2302      	movs	r3, #2
 800cdba:	7011      	strb	r1, [r2, #0]
 800cdbc:	431c      	orrs	r4, r3
 800cdbe:	4b27      	ldr	r3, [pc, #156]	; (800ce5c <_vfiprintf_r+0x2f4>)
 800cdc0:	401c      	ands	r4, r3
 800cdc2:	2302      	movs	r3, #2
 800cdc4:	e1e6      	b.n	800d194 <_vfiprintf_r+0x62c>
 800cdc6:	9806      	ldr	r0, [sp, #24]
 800cdc8:	f7fe fdcc 	bl	800b964 <_localeconv_r>
 800cdcc:	6843      	ldr	r3, [r0, #4]
 800cdce:	0018      	movs	r0, r3
 800cdd0:	930f      	str	r3, [sp, #60]	; 0x3c
 800cdd2:	f7f3 f999 	bl	8000108 <strlen>
 800cdd6:	900e      	str	r0, [sp, #56]	; 0x38
 800cdd8:	9806      	ldr	r0, [sp, #24]
 800cdda:	f7fe fdc3 	bl	800b964 <_localeconv_r>
 800cdde:	6883      	ldr	r3, [r0, #8]
 800cde0:	930d      	str	r3, [sp, #52]	; 0x34
 800cde2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d010      	beq.n	800ce0a <_vfiprintf_r+0x2a2>
 800cde8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d00d      	beq.n	800ce0a <_vfiprintf_r+0x2a2>
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d00a      	beq.n	800ce0a <_vfiprintf_r+0x2a2>
 800cdf4:	2380      	movs	r3, #128	; 0x80
 800cdf6:	00db      	lsls	r3, r3, #3
 800cdf8:	431c      	orrs	r4, r3
 800cdfa:	e006      	b.n	800ce0a <_vfiprintf_r+0x2a2>
 800cdfc:	ab14      	add	r3, sp, #80	; 0x50
 800cdfe:	78da      	ldrb	r2, [r3, #3]
 800ce00:	3303      	adds	r3, #3
 800ce02:	2a00      	cmp	r2, #0
 800ce04:	d101      	bne.n	800ce0a <_vfiprintf_r+0x2a2>
 800ce06:	3220      	adds	r2, #32
 800ce08:	701a      	strb	r2, [r3, #0]
 800ce0a:	9b07      	ldr	r3, [sp, #28]
 800ce0c:	e754      	b.n	800ccb8 <_vfiprintf_r+0x150>
 800ce0e:	2301      	movs	r3, #1
 800ce10:	e7f2      	b.n	800cdf8 <_vfiprintf_r+0x290>
 800ce12:	cd08      	ldmia	r5!, {r3}
 800ce14:	9309      	str	r3, [sp, #36]	; 0x24
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	daf7      	bge.n	800ce0a <_vfiprintf_r+0x2a2>
 800ce1a:	425b      	negs	r3, r3
 800ce1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce1e:	2304      	movs	r3, #4
 800ce20:	e7ea      	b.n	800cdf8 <_vfiprintf_r+0x290>
 800ce22:	222b      	movs	r2, #43	; 0x2b
 800ce24:	ab14      	add	r3, sp, #80	; 0x50
 800ce26:	70da      	strb	r2, [r3, #3]
 800ce28:	e7ef      	b.n	800ce0a <_vfiprintf_r+0x2a2>
 800ce2a:	9b07      	ldr	r3, [sp, #28]
 800ce2c:	1c5a      	adds	r2, r3, #1
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	2b2a      	cmp	r3, #42	; 0x2a
 800ce32:	d015      	beq.n	800ce60 <_vfiprintf_r+0x2f8>
 800ce34:	2100      	movs	r1, #0
 800ce36:	9105      	str	r1, [sp, #20]
 800ce38:	0019      	movs	r1, r3
 800ce3a:	3930      	subs	r1, #48	; 0x30
 800ce3c:	9207      	str	r2, [sp, #28]
 800ce3e:	2909      	cmp	r1, #9
 800ce40:	d900      	bls.n	800ce44 <_vfiprintf_r+0x2dc>
 800ce42:	e73c      	b.n	800ccbe <_vfiprintf_r+0x156>
 800ce44:	230a      	movs	r3, #10
 800ce46:	9805      	ldr	r0, [sp, #20]
 800ce48:	4358      	muls	r0, r3
 800ce4a:	1843      	adds	r3, r0, r1
 800ce4c:	9305      	str	r3, [sp, #20]
 800ce4e:	7813      	ldrb	r3, [r2, #0]
 800ce50:	3201      	adds	r2, #1
 800ce52:	e7f1      	b.n	800ce38 <_vfiprintf_r+0x2d0>
 800ce54:	ffffdfff 	.word	0xffffdfff
 800ce58:	0800e900 	.word	0x0800e900
 800ce5c:	fffffbff 	.word	0xfffffbff
 800ce60:	cd08      	ldmia	r5!, {r3}
 800ce62:	9305      	str	r3, [sp, #20]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	da02      	bge.n	800ce6e <_vfiprintf_r+0x306>
 800ce68:	2301      	movs	r3, #1
 800ce6a:	425b      	negs	r3, r3
 800ce6c:	9305      	str	r3, [sp, #20]
 800ce6e:	9207      	str	r2, [sp, #28]
 800ce70:	e7cb      	b.n	800ce0a <_vfiprintf_r+0x2a2>
 800ce72:	2380      	movs	r3, #128	; 0x80
 800ce74:	e7c0      	b.n	800cdf8 <_vfiprintf_r+0x290>
 800ce76:	2100      	movs	r1, #0
 800ce78:	9a07      	ldr	r2, [sp, #28]
 800ce7a:	9109      	str	r1, [sp, #36]	; 0x24
 800ce7c:	200a      	movs	r0, #10
 800ce7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce80:	3b30      	subs	r3, #48	; 0x30
 800ce82:	4341      	muls	r1, r0
 800ce84:	185b      	adds	r3, r3, r1
 800ce86:	9309      	str	r3, [sp, #36]	; 0x24
 800ce88:	0013      	movs	r3, r2
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	3201      	adds	r2, #1
 800ce8e:	0019      	movs	r1, r3
 800ce90:	3930      	subs	r1, #48	; 0x30
 800ce92:	9207      	str	r2, [sp, #28]
 800ce94:	2909      	cmp	r1, #9
 800ce96:	d9f1      	bls.n	800ce7c <_vfiprintf_r+0x314>
 800ce98:	e711      	b.n	800ccbe <_vfiprintf_r+0x156>
 800ce9a:	9b07      	ldr	r3, [sp, #28]
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	2b68      	cmp	r3, #104	; 0x68
 800cea0:	d105      	bne.n	800ceae <_vfiprintf_r+0x346>
 800cea2:	9b07      	ldr	r3, [sp, #28]
 800cea4:	3301      	adds	r3, #1
 800cea6:	9307      	str	r3, [sp, #28]
 800cea8:	2380      	movs	r3, #128	; 0x80
 800ceaa:	009b      	lsls	r3, r3, #2
 800ceac:	e7a4      	b.n	800cdf8 <_vfiprintf_r+0x290>
 800ceae:	2340      	movs	r3, #64	; 0x40
 800ceb0:	e7a2      	b.n	800cdf8 <_vfiprintf_r+0x290>
 800ceb2:	9b07      	ldr	r3, [sp, #28]
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	2b6c      	cmp	r3, #108	; 0x6c
 800ceb8:	d104      	bne.n	800cec4 <_vfiprintf_r+0x35c>
 800ceba:	9b07      	ldr	r3, [sp, #28]
 800cebc:	3301      	adds	r3, #1
 800cebe:	9307      	str	r3, [sp, #28]
 800cec0:	2320      	movs	r3, #32
 800cec2:	e799      	b.n	800cdf8 <_vfiprintf_r+0x290>
 800cec4:	2310      	movs	r3, #16
 800cec6:	e797      	b.n	800cdf8 <_vfiprintf_r+0x290>
 800cec8:	9504      	str	r5, [sp, #16]
 800ceca:	9a04      	ldr	r2, [sp, #16]
 800cecc:	ad29      	add	r5, sp, #164	; 0xa4
 800cece:	ca08      	ldmia	r2!, {r3}
 800ced0:	9204      	str	r2, [sp, #16]
 800ced2:	2200      	movs	r2, #0
 800ced4:	702b      	strb	r3, [r5, #0]
 800ced6:	ab14      	add	r3, sp, #80	; 0x50
 800ced8:	70da      	strb	r2, [r3, #3]
 800ceda:	2301      	movs	r3, #1
 800cedc:	920b      	str	r2, [sp, #44]	; 0x2c
 800cede:	9305      	str	r3, [sp, #20]
 800cee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cee2:	9a05      	ldr	r2, [sp, #20]
 800cee4:	930a      	str	r3, [sp, #40]	; 0x28
 800cee6:	4293      	cmp	r3, r2
 800cee8:	da00      	bge.n	800ceec <_vfiprintf_r+0x384>
 800ceea:	920a      	str	r2, [sp, #40]	; 0x28
 800ceec:	ab14      	add	r3, sp, #80	; 0x50
 800ceee:	3303      	adds	r3, #3
 800cef0:	781b      	ldrb	r3, [r3, #0]
 800cef2:	1e5a      	subs	r2, r3, #1
 800cef4:	4193      	sbcs	r3, r2
 800cef6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cef8:	18d3      	adds	r3, r2, r3
 800cefa:	930a      	str	r3, [sp, #40]	; 0x28
 800cefc:	0022      	movs	r2, r4
 800cefe:	2302      	movs	r3, #2
 800cf00:	401a      	ands	r2, r3
 800cf02:	9210      	str	r2, [sp, #64]	; 0x40
 800cf04:	421c      	tst	r4, r3
 800cf06:	d002      	beq.n	800cf0e <_vfiprintf_r+0x3a6>
 800cf08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf0a:	3302      	adds	r3, #2
 800cf0c:	930a      	str	r3, [sp, #40]	; 0x28
 800cf0e:	2384      	movs	r3, #132	; 0x84
 800cf10:	0022      	movs	r2, r4
 800cf12:	401a      	ands	r2, r3
 800cf14:	9211      	str	r2, [sp, #68]	; 0x44
 800cf16:	421c      	tst	r4, r3
 800cf18:	d11f      	bne.n	800cf5a <_vfiprintf_r+0x3f2>
 800cf1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf1e:	1a9b      	subs	r3, r3, r2
 800cf20:	1e1e      	subs	r6, r3, #0
 800cf22:	dd1a      	ble.n	800cf5a <_vfiprintf_r+0x3f2>
 800cf24:	0039      	movs	r1, r7
 800cf26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cf28:	48c9      	ldr	r0, [pc, #804]	; (800d250 <_vfiprintf_r+0x6e8>)
 800cf2a:	9312      	str	r3, [sp, #72]	; 0x48
 800cf2c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cf2e:	3301      	adds	r3, #1
 800cf30:	3108      	adds	r1, #8
 800cf32:	6038      	str	r0, [r7, #0]
 800cf34:	2e10      	cmp	r6, #16
 800cf36:	dd00      	ble.n	800cf3a <_vfiprintf_r+0x3d2>
 800cf38:	e251      	b.n	800d3de <_vfiprintf_r+0x876>
 800cf3a:	18b2      	adds	r2, r6, r2
 800cf3c:	607e      	str	r6, [r7, #4]
 800cf3e:	9218      	str	r2, [sp, #96]	; 0x60
 800cf40:	000f      	movs	r7, r1
 800cf42:	9317      	str	r3, [sp, #92]	; 0x5c
 800cf44:	2b07      	cmp	r3, #7
 800cf46:	dd08      	ble.n	800cf5a <_vfiprintf_r+0x3f2>
 800cf48:	9903      	ldr	r1, [sp, #12]
 800cf4a:	9806      	ldr	r0, [sp, #24]
 800cf4c:	aa16      	add	r2, sp, #88	; 0x58
 800cf4e:	f7ff fdd7 	bl	800cb00 <__sprint_r>
 800cf52:	2800      	cmp	r0, #0
 800cf54:	d000      	beq.n	800cf58 <_vfiprintf_r+0x3f0>
 800cf56:	e29c      	b.n	800d492 <_vfiprintf_r+0x92a>
 800cf58:	af19      	add	r7, sp, #100	; 0x64
 800cf5a:	ab14      	add	r3, sp, #80	; 0x50
 800cf5c:	1cda      	adds	r2, r3, #3
 800cf5e:	78db      	ldrb	r3, [r3, #3]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d017      	beq.n	800cf94 <_vfiprintf_r+0x42c>
 800cf64:	603a      	str	r2, [r7, #0]
 800cf66:	2201      	movs	r2, #1
 800cf68:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800cf6a:	607a      	str	r2, [r7, #4]
 800cf6c:	9312      	str	r3, [sp, #72]	; 0x48
 800cf6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cf70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cf72:	3201      	adds	r2, #1
 800cf74:	9313      	str	r3, [sp, #76]	; 0x4c
 800cf76:	3301      	adds	r3, #1
 800cf78:	9218      	str	r2, [sp, #96]	; 0x60
 800cf7a:	9317      	str	r3, [sp, #92]	; 0x5c
 800cf7c:	3708      	adds	r7, #8
 800cf7e:	2b07      	cmp	r3, #7
 800cf80:	dd08      	ble.n	800cf94 <_vfiprintf_r+0x42c>
 800cf82:	9903      	ldr	r1, [sp, #12]
 800cf84:	9806      	ldr	r0, [sp, #24]
 800cf86:	aa16      	add	r2, sp, #88	; 0x58
 800cf88:	f7ff fdba 	bl	800cb00 <__sprint_r>
 800cf8c:	2800      	cmp	r0, #0
 800cf8e:	d000      	beq.n	800cf92 <_vfiprintf_r+0x42a>
 800cf90:	e27f      	b.n	800d492 <_vfiprintf_r+0x92a>
 800cf92:	af19      	add	r7, sp, #100	; 0x64
 800cf94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d018      	beq.n	800cfcc <_vfiprintf_r+0x464>
 800cf9a:	aa15      	add	r2, sp, #84	; 0x54
 800cf9c:	603a      	str	r2, [r7, #0]
 800cf9e:	2202      	movs	r2, #2
 800cfa0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800cfa2:	607a      	str	r2, [r7, #4]
 800cfa4:	9310      	str	r3, [sp, #64]	; 0x40
 800cfa6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cfa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cfaa:	3202      	adds	r2, #2
 800cfac:	9312      	str	r3, [sp, #72]	; 0x48
 800cfae:	3301      	adds	r3, #1
 800cfb0:	9218      	str	r2, [sp, #96]	; 0x60
 800cfb2:	9317      	str	r3, [sp, #92]	; 0x5c
 800cfb4:	3708      	adds	r7, #8
 800cfb6:	2b07      	cmp	r3, #7
 800cfb8:	dd08      	ble.n	800cfcc <_vfiprintf_r+0x464>
 800cfba:	9903      	ldr	r1, [sp, #12]
 800cfbc:	9806      	ldr	r0, [sp, #24]
 800cfbe:	aa16      	add	r2, sp, #88	; 0x58
 800cfc0:	f7ff fd9e 	bl	800cb00 <__sprint_r>
 800cfc4:	2800      	cmp	r0, #0
 800cfc6:	d000      	beq.n	800cfca <_vfiprintf_r+0x462>
 800cfc8:	e263      	b.n	800d492 <_vfiprintf_r+0x92a>
 800cfca:	af19      	add	r7, sp, #100	; 0x64
 800cfcc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cfce:	2b80      	cmp	r3, #128	; 0x80
 800cfd0:	d11f      	bne.n	800d012 <_vfiprintf_r+0x4aa>
 800cfd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cfd6:	1a9b      	subs	r3, r3, r2
 800cfd8:	1e1e      	subs	r6, r3, #0
 800cfda:	dd1a      	ble.n	800d012 <_vfiprintf_r+0x4aa>
 800cfdc:	0039      	movs	r1, r7
 800cfde:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cfe0:	489c      	ldr	r0, [pc, #624]	; (800d254 <_vfiprintf_r+0x6ec>)
 800cfe2:	9310      	str	r3, [sp, #64]	; 0x40
 800cfe4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	3108      	adds	r1, #8
 800cfea:	6038      	str	r0, [r7, #0]
 800cfec:	2e10      	cmp	r6, #16
 800cfee:	dd00      	ble.n	800cff2 <_vfiprintf_r+0x48a>
 800cff0:	e209      	b.n	800d406 <_vfiprintf_r+0x89e>
 800cff2:	18b2      	adds	r2, r6, r2
 800cff4:	607e      	str	r6, [r7, #4]
 800cff6:	9218      	str	r2, [sp, #96]	; 0x60
 800cff8:	000f      	movs	r7, r1
 800cffa:	9317      	str	r3, [sp, #92]	; 0x5c
 800cffc:	2b07      	cmp	r3, #7
 800cffe:	dd08      	ble.n	800d012 <_vfiprintf_r+0x4aa>
 800d000:	9903      	ldr	r1, [sp, #12]
 800d002:	9806      	ldr	r0, [sp, #24]
 800d004:	aa16      	add	r2, sp, #88	; 0x58
 800d006:	f7ff fd7b 	bl	800cb00 <__sprint_r>
 800d00a:	2800      	cmp	r0, #0
 800d00c:	d000      	beq.n	800d010 <_vfiprintf_r+0x4a8>
 800d00e:	e240      	b.n	800d492 <_vfiprintf_r+0x92a>
 800d010:	af19      	add	r7, sp, #100	; 0x64
 800d012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d014:	9a05      	ldr	r2, [sp, #20]
 800d016:	1a9b      	subs	r3, r3, r2
 800d018:	1e1e      	subs	r6, r3, #0
 800d01a:	dd1a      	ble.n	800d052 <_vfiprintf_r+0x4ea>
 800d01c:	0039      	movs	r1, r7
 800d01e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d020:	488c      	ldr	r0, [pc, #560]	; (800d254 <_vfiprintf_r+0x6ec>)
 800d022:	930b      	str	r3, [sp, #44]	; 0x2c
 800d024:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d026:	3301      	adds	r3, #1
 800d028:	3108      	adds	r1, #8
 800d02a:	6038      	str	r0, [r7, #0]
 800d02c:	2e10      	cmp	r6, #16
 800d02e:	dd00      	ble.n	800d032 <_vfiprintf_r+0x4ca>
 800d030:	e1fd      	b.n	800d42e <_vfiprintf_r+0x8c6>
 800d032:	18b2      	adds	r2, r6, r2
 800d034:	607e      	str	r6, [r7, #4]
 800d036:	9218      	str	r2, [sp, #96]	; 0x60
 800d038:	000f      	movs	r7, r1
 800d03a:	9317      	str	r3, [sp, #92]	; 0x5c
 800d03c:	2b07      	cmp	r3, #7
 800d03e:	dd08      	ble.n	800d052 <_vfiprintf_r+0x4ea>
 800d040:	9903      	ldr	r1, [sp, #12]
 800d042:	9806      	ldr	r0, [sp, #24]
 800d044:	aa16      	add	r2, sp, #88	; 0x58
 800d046:	f7ff fd5b 	bl	800cb00 <__sprint_r>
 800d04a:	2800      	cmp	r0, #0
 800d04c:	d000      	beq.n	800d050 <_vfiprintf_r+0x4e8>
 800d04e:	e220      	b.n	800d492 <_vfiprintf_r+0x92a>
 800d050:	af19      	add	r7, sp, #100	; 0x64
 800d052:	9b05      	ldr	r3, [sp, #20]
 800d054:	603d      	str	r5, [r7, #0]
 800d056:	607b      	str	r3, [r7, #4]
 800d058:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d05a:	3708      	adds	r7, #8
 800d05c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d05e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d060:	9b05      	ldr	r3, [sp, #20]
 800d062:	4694      	mov	ip, r2
 800d064:	4463      	add	r3, ip
 800d066:	9318      	str	r3, [sp, #96]	; 0x60
 800d068:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d06a:	9305      	str	r3, [sp, #20]
 800d06c:	3301      	adds	r3, #1
 800d06e:	9317      	str	r3, [sp, #92]	; 0x5c
 800d070:	2b07      	cmp	r3, #7
 800d072:	dd08      	ble.n	800d086 <_vfiprintf_r+0x51e>
 800d074:	9903      	ldr	r1, [sp, #12]
 800d076:	9806      	ldr	r0, [sp, #24]
 800d078:	aa16      	add	r2, sp, #88	; 0x58
 800d07a:	f7ff fd41 	bl	800cb00 <__sprint_r>
 800d07e:	2800      	cmp	r0, #0
 800d080:	d000      	beq.n	800d084 <_vfiprintf_r+0x51c>
 800d082:	e206      	b.n	800d492 <_vfiprintf_r+0x92a>
 800d084:	af19      	add	r7, sp, #100	; 0x64
 800d086:	0763      	lsls	r3, r4, #29
 800d088:	d500      	bpl.n	800d08c <_vfiprintf_r+0x524>
 800d08a:	e1e4      	b.n	800d456 <_vfiprintf_r+0x8ee>
 800d08c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d08e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d090:	4293      	cmp	r3, r2
 800d092:	da00      	bge.n	800d096 <_vfiprintf_r+0x52e>
 800d094:	0013      	movs	r3, r2
 800d096:	9a08      	ldr	r2, [sp, #32]
 800d098:	18d3      	adds	r3, r2, r3
 800d09a:	9308      	str	r3, [sp, #32]
 800d09c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d09e:	9305      	str	r3, [sp, #20]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d007      	beq.n	800d0b4 <_vfiprintf_r+0x54c>
 800d0a4:	9903      	ldr	r1, [sp, #12]
 800d0a6:	9806      	ldr	r0, [sp, #24]
 800d0a8:	aa16      	add	r2, sp, #88	; 0x58
 800d0aa:	f7ff fd29 	bl	800cb00 <__sprint_r>
 800d0ae:	2800      	cmp	r0, #0
 800d0b0:	d000      	beq.n	800d0b4 <_vfiprintf_r+0x54c>
 800d0b2:	e1ee      	b.n	800d492 <_vfiprintf_r+0x92a>
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	9d04      	ldr	r5, [sp, #16]
 800d0b8:	9317      	str	r3, [sp, #92]	; 0x5c
 800d0ba:	af19      	add	r7, sp, #100	; 0x64
 800d0bc:	e5c6      	b.n	800cc4c <_vfiprintf_r+0xe4>
 800d0be:	2310      	movs	r3, #16
 800d0c0:	431c      	orrs	r4, r3
 800d0c2:	06a3      	lsls	r3, r4, #26
 800d0c4:	d52b      	bpl.n	800d11e <_vfiprintf_r+0x5b6>
 800d0c6:	2307      	movs	r3, #7
 800d0c8:	3507      	adds	r5, #7
 800d0ca:	439d      	bics	r5, r3
 800d0cc:	0029      	movs	r1, r5
 800d0ce:	c90c      	ldmia	r1!, {r2, r3}
 800d0d0:	9200      	str	r2, [sp, #0]
 800d0d2:	9301      	str	r3, [sp, #4]
 800d0d4:	9104      	str	r1, [sp, #16]
 800d0d6:	9a01      	ldr	r2, [sp, #4]
 800d0d8:	2301      	movs	r3, #1
 800d0da:	2a00      	cmp	r2, #0
 800d0dc:	da09      	bge.n	800d0f2 <_vfiprintf_r+0x58a>
 800d0de:	9d00      	ldr	r5, [sp, #0]
 800d0e0:	9e01      	ldr	r6, [sp, #4]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	4269      	negs	r1, r5
 800d0e6:	41b2      	sbcs	r2, r6
 800d0e8:	9100      	str	r1, [sp, #0]
 800d0ea:	9201      	str	r2, [sp, #4]
 800d0ec:	212d      	movs	r1, #45	; 0x2d
 800d0ee:	aa14      	add	r2, sp, #80	; 0x50
 800d0f0:	70d1      	strb	r1, [r2, #3]
 800d0f2:	9901      	ldr	r1, [sp, #4]
 800d0f4:	9a00      	ldr	r2, [sp, #0]
 800d0f6:	430a      	orrs	r2, r1
 800d0f8:	9905      	ldr	r1, [sp, #20]
 800d0fa:	3101      	adds	r1, #1
 800d0fc:	d100      	bne.n	800d100 <_vfiprintf_r+0x598>
 800d0fe:	e1fc      	b.n	800d4fa <_vfiprintf_r+0x992>
 800d100:	2180      	movs	r1, #128	; 0x80
 800d102:	0020      	movs	r0, r4
 800d104:	4388      	bics	r0, r1
 800d106:	0006      	movs	r6, r0
 800d108:	2a00      	cmp	r2, #0
 800d10a:	d000      	beq.n	800d10e <_vfiprintf_r+0x5a6>
 800d10c:	e1f9      	b.n	800d502 <_vfiprintf_r+0x99a>
 800d10e:	9a05      	ldr	r2, [sp, #20]
 800d110:	2a00      	cmp	r2, #0
 800d112:	d100      	bne.n	800d116 <_vfiprintf_r+0x5ae>
 800d114:	e149      	b.n	800d3aa <_vfiprintf_r+0x842>
 800d116:	2b01      	cmp	r3, #1
 800d118:	d000      	beq.n	800d11c <_vfiprintf_r+0x5b4>
 800d11a:	e1f5      	b.n	800d508 <_vfiprintf_r+0x9a0>
 800d11c:	e0ea      	b.n	800d2f4 <_vfiprintf_r+0x78c>
 800d11e:	1d2b      	adds	r3, r5, #4
 800d120:	9304      	str	r3, [sp, #16]
 800d122:	06e3      	lsls	r3, r4, #27
 800d124:	d504      	bpl.n	800d130 <_vfiprintf_r+0x5c8>
 800d126:	682b      	ldr	r3, [r5, #0]
 800d128:	9300      	str	r3, [sp, #0]
 800d12a:	17db      	asrs	r3, r3, #31
 800d12c:	9301      	str	r3, [sp, #4]
 800d12e:	e7d2      	b.n	800d0d6 <_vfiprintf_r+0x56e>
 800d130:	682b      	ldr	r3, [r5, #0]
 800d132:	0662      	lsls	r2, r4, #25
 800d134:	d501      	bpl.n	800d13a <_vfiprintf_r+0x5d2>
 800d136:	b21b      	sxth	r3, r3
 800d138:	e7f6      	b.n	800d128 <_vfiprintf_r+0x5c0>
 800d13a:	05a2      	lsls	r2, r4, #22
 800d13c:	d5f4      	bpl.n	800d128 <_vfiprintf_r+0x5c0>
 800d13e:	b25b      	sxtb	r3, r3
 800d140:	e7f2      	b.n	800d128 <_vfiprintf_r+0x5c0>
 800d142:	cd08      	ldmia	r5!, {r3}
 800d144:	06a2      	lsls	r2, r4, #26
 800d146:	d504      	bpl.n	800d152 <_vfiprintf_r+0x5ea>
 800d148:	9a08      	ldr	r2, [sp, #32]
 800d14a:	601a      	str	r2, [r3, #0]
 800d14c:	17d2      	asrs	r2, r2, #31
 800d14e:	605a      	str	r2, [r3, #4]
 800d150:	e57c      	b.n	800cc4c <_vfiprintf_r+0xe4>
 800d152:	06e2      	lsls	r2, r4, #27
 800d154:	d502      	bpl.n	800d15c <_vfiprintf_r+0x5f4>
 800d156:	9a08      	ldr	r2, [sp, #32]
 800d158:	601a      	str	r2, [r3, #0]
 800d15a:	e577      	b.n	800cc4c <_vfiprintf_r+0xe4>
 800d15c:	0662      	lsls	r2, r4, #25
 800d15e:	d502      	bpl.n	800d166 <_vfiprintf_r+0x5fe>
 800d160:	9a08      	ldr	r2, [sp, #32]
 800d162:	801a      	strh	r2, [r3, #0]
 800d164:	e572      	b.n	800cc4c <_vfiprintf_r+0xe4>
 800d166:	05a2      	lsls	r2, r4, #22
 800d168:	d5f5      	bpl.n	800d156 <_vfiprintf_r+0x5ee>
 800d16a:	9a08      	ldr	r2, [sp, #32]
 800d16c:	701a      	strb	r2, [r3, #0]
 800d16e:	e56d      	b.n	800cc4c <_vfiprintf_r+0xe4>
 800d170:	2310      	movs	r3, #16
 800d172:	431c      	orrs	r4, r3
 800d174:	2320      	movs	r3, #32
 800d176:	0021      	movs	r1, r4
 800d178:	4019      	ands	r1, r3
 800d17a:	421c      	tst	r4, r3
 800d17c:	d00d      	beq.n	800d19a <_vfiprintf_r+0x632>
 800d17e:	3b19      	subs	r3, #25
 800d180:	3507      	adds	r5, #7
 800d182:	439d      	bics	r5, r3
 800d184:	0029      	movs	r1, r5
 800d186:	c90c      	ldmia	r1!, {r2, r3}
 800d188:	9200      	str	r2, [sp, #0]
 800d18a:	9301      	str	r3, [sp, #4]
 800d18c:	9104      	str	r1, [sp, #16]
 800d18e:	4b32      	ldr	r3, [pc, #200]	; (800d258 <_vfiprintf_r+0x6f0>)
 800d190:	401c      	ands	r4, r3
 800d192:	2300      	movs	r3, #0
 800d194:	2100      	movs	r1, #0
 800d196:	aa14      	add	r2, sp, #80	; 0x50
 800d198:	e7aa      	b.n	800d0f0 <_vfiprintf_r+0x588>
 800d19a:	1d2b      	adds	r3, r5, #4
 800d19c:	0022      	movs	r2, r4
 800d19e:	9304      	str	r3, [sp, #16]
 800d1a0:	2310      	movs	r3, #16
 800d1a2:	401a      	ands	r2, r3
 800d1a4:	421c      	tst	r4, r3
 800d1a6:	d003      	beq.n	800d1b0 <_vfiprintf_r+0x648>
 800d1a8:	682b      	ldr	r3, [r5, #0]
 800d1aa:	9300      	str	r3, [sp, #0]
 800d1ac:	9101      	str	r1, [sp, #4]
 800d1ae:	e7ee      	b.n	800d18e <_vfiprintf_r+0x626>
 800d1b0:	2340      	movs	r3, #64	; 0x40
 800d1b2:	0021      	movs	r1, r4
 800d1b4:	4019      	ands	r1, r3
 800d1b6:	421c      	tst	r4, r3
 800d1b8:	d004      	beq.n	800d1c4 <_vfiprintf_r+0x65c>
 800d1ba:	682b      	ldr	r3, [r5, #0]
 800d1bc:	b29b      	uxth	r3, r3
 800d1be:	9300      	str	r3, [sp, #0]
 800d1c0:	9201      	str	r2, [sp, #4]
 800d1c2:	e7e4      	b.n	800d18e <_vfiprintf_r+0x626>
 800d1c4:	2380      	movs	r3, #128	; 0x80
 800d1c6:	0022      	movs	r2, r4
 800d1c8:	009b      	lsls	r3, r3, #2
 800d1ca:	401a      	ands	r2, r3
 800d1cc:	421c      	tst	r4, r3
 800d1ce:	d002      	beq.n	800d1d6 <_vfiprintf_r+0x66e>
 800d1d0:	682b      	ldr	r3, [r5, #0]
 800d1d2:	b2db      	uxtb	r3, r3
 800d1d4:	e7e9      	b.n	800d1aa <_vfiprintf_r+0x642>
 800d1d6:	682b      	ldr	r3, [r5, #0]
 800d1d8:	e7f1      	b.n	800d1be <_vfiprintf_r+0x656>
 800d1da:	002b      	movs	r3, r5
 800d1dc:	cb04      	ldmia	r3!, {r2}
 800d1de:	491f      	ldr	r1, [pc, #124]	; (800d25c <_vfiprintf_r+0x6f4>)
 800d1e0:	9304      	str	r3, [sp, #16]
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	9200      	str	r2, [sp, #0]
 800d1e6:	aa15      	add	r2, sp, #84	; 0x54
 800d1e8:	8011      	strh	r1, [r2, #0]
 800d1ea:	4a1d      	ldr	r2, [pc, #116]	; (800d260 <_vfiprintf_r+0x6f8>)
 800d1ec:	9301      	str	r3, [sp, #4]
 800d1ee:	3302      	adds	r3, #2
 800d1f0:	431c      	orrs	r4, r3
 800d1f2:	920c      	str	r2, [sp, #48]	; 0x30
 800d1f4:	e7ce      	b.n	800d194 <_vfiprintf_r+0x62c>
 800d1f6:	002b      	movs	r3, r5
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	cb20      	ldmia	r3!, {r5}
 800d1fc:	9304      	str	r3, [sp, #16]
 800d1fe:	ab14      	add	r3, sp, #80	; 0x50
 800d200:	70da      	strb	r2, [r3, #3]
 800d202:	9b05      	ldr	r3, [sp, #20]
 800d204:	3301      	adds	r3, #1
 800d206:	d00d      	beq.n	800d224 <_vfiprintf_r+0x6bc>
 800d208:	2100      	movs	r1, #0
 800d20a:	0028      	movs	r0, r5
 800d20c:	9a05      	ldr	r2, [sp, #20]
 800d20e:	f7fc f867 	bl	80092e0 <memchr>
 800d212:	900b      	str	r0, [sp, #44]	; 0x2c
 800d214:	2800      	cmp	r0, #0
 800d216:	d100      	bne.n	800d21a <_vfiprintf_r+0x6b2>
 800d218:	e662      	b.n	800cee0 <_vfiprintf_r+0x378>
 800d21a:	1b43      	subs	r3, r0, r5
 800d21c:	9305      	str	r3, [sp, #20]
 800d21e:	2300      	movs	r3, #0
 800d220:	930b      	str	r3, [sp, #44]	; 0x2c
 800d222:	e65d      	b.n	800cee0 <_vfiprintf_r+0x378>
 800d224:	0028      	movs	r0, r5
 800d226:	f7f2 ff6f 	bl	8000108 <strlen>
 800d22a:	9005      	str	r0, [sp, #20]
 800d22c:	e7f7      	b.n	800d21e <_vfiprintf_r+0x6b6>
 800d22e:	2310      	movs	r3, #16
 800d230:	431c      	orrs	r4, r3
 800d232:	2320      	movs	r3, #32
 800d234:	0021      	movs	r1, r4
 800d236:	4019      	ands	r1, r3
 800d238:	421c      	tst	r4, r3
 800d23a:	d013      	beq.n	800d264 <_vfiprintf_r+0x6fc>
 800d23c:	3b19      	subs	r3, #25
 800d23e:	3507      	adds	r5, #7
 800d240:	439d      	bics	r5, r3
 800d242:	0029      	movs	r1, r5
 800d244:	c90c      	ldmia	r1!, {r2, r3}
 800d246:	9200      	str	r2, [sp, #0]
 800d248:	9301      	str	r3, [sp, #4]
 800d24a:	9104      	str	r1, [sp, #16]
 800d24c:	2301      	movs	r3, #1
 800d24e:	e7a1      	b.n	800d194 <_vfiprintf_r+0x62c>
 800d250:	0800ec6a 	.word	0x0800ec6a
 800d254:	0800ec7a 	.word	0x0800ec7a
 800d258:	fffffbff 	.word	0xfffffbff
 800d25c:	00007830 	.word	0x00007830
 800d260:	0800e900 	.word	0x0800e900
 800d264:	1d2b      	adds	r3, r5, #4
 800d266:	0022      	movs	r2, r4
 800d268:	9304      	str	r3, [sp, #16]
 800d26a:	2310      	movs	r3, #16
 800d26c:	401a      	ands	r2, r3
 800d26e:	421c      	tst	r4, r3
 800d270:	d003      	beq.n	800d27a <_vfiprintf_r+0x712>
 800d272:	682b      	ldr	r3, [r5, #0]
 800d274:	9300      	str	r3, [sp, #0]
 800d276:	9101      	str	r1, [sp, #4]
 800d278:	e7e8      	b.n	800d24c <_vfiprintf_r+0x6e4>
 800d27a:	2340      	movs	r3, #64	; 0x40
 800d27c:	0021      	movs	r1, r4
 800d27e:	4019      	ands	r1, r3
 800d280:	421c      	tst	r4, r3
 800d282:	d004      	beq.n	800d28e <_vfiprintf_r+0x726>
 800d284:	682b      	ldr	r3, [r5, #0]
 800d286:	b29b      	uxth	r3, r3
 800d288:	9300      	str	r3, [sp, #0]
 800d28a:	9201      	str	r2, [sp, #4]
 800d28c:	e7de      	b.n	800d24c <_vfiprintf_r+0x6e4>
 800d28e:	2380      	movs	r3, #128	; 0x80
 800d290:	0022      	movs	r2, r4
 800d292:	009b      	lsls	r3, r3, #2
 800d294:	401a      	ands	r2, r3
 800d296:	421c      	tst	r4, r3
 800d298:	d002      	beq.n	800d2a0 <_vfiprintf_r+0x738>
 800d29a:	682b      	ldr	r3, [r5, #0]
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	e7e9      	b.n	800d274 <_vfiprintf_r+0x70c>
 800d2a0:	682b      	ldr	r3, [r5, #0]
 800d2a2:	e7f1      	b.n	800d288 <_vfiprintf_r+0x720>
 800d2a4:	4aad      	ldr	r2, [pc, #692]	; (800d55c <_vfiprintf_r+0x9f4>)
 800d2a6:	e56f      	b.n	800cd88 <_vfiprintf_r+0x220>
 800d2a8:	1d2a      	adds	r2, r5, #4
 800d2aa:	0021      	movs	r1, r4
 800d2ac:	9204      	str	r2, [sp, #16]
 800d2ae:	2210      	movs	r2, #16
 800d2b0:	4011      	ands	r1, r2
 800d2b2:	4214      	tst	r4, r2
 800d2b4:	d003      	beq.n	800d2be <_vfiprintf_r+0x756>
 800d2b6:	682a      	ldr	r2, [r5, #0]
 800d2b8:	9200      	str	r2, [sp, #0]
 800d2ba:	9001      	str	r0, [sp, #4]
 800d2bc:	e573      	b.n	800cda6 <_vfiprintf_r+0x23e>
 800d2be:	2240      	movs	r2, #64	; 0x40
 800d2c0:	0020      	movs	r0, r4
 800d2c2:	4010      	ands	r0, r2
 800d2c4:	4214      	tst	r4, r2
 800d2c6:	d004      	beq.n	800d2d2 <_vfiprintf_r+0x76a>
 800d2c8:	682a      	ldr	r2, [r5, #0]
 800d2ca:	b292      	uxth	r2, r2
 800d2cc:	9200      	str	r2, [sp, #0]
 800d2ce:	9101      	str	r1, [sp, #4]
 800d2d0:	e569      	b.n	800cda6 <_vfiprintf_r+0x23e>
 800d2d2:	2280      	movs	r2, #128	; 0x80
 800d2d4:	0021      	movs	r1, r4
 800d2d6:	0092      	lsls	r2, r2, #2
 800d2d8:	4011      	ands	r1, r2
 800d2da:	4214      	tst	r4, r2
 800d2dc:	d002      	beq.n	800d2e4 <_vfiprintf_r+0x77c>
 800d2de:	682a      	ldr	r2, [r5, #0]
 800d2e0:	b2d2      	uxtb	r2, r2
 800d2e2:	e7e9      	b.n	800d2b8 <_vfiprintf_r+0x750>
 800d2e4:	682a      	ldr	r2, [r5, #0]
 800d2e6:	e7f1      	b.n	800d2cc <_vfiprintf_r+0x764>
 800d2e8:	9b01      	ldr	r3, [sp, #4]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d109      	bne.n	800d302 <_vfiprintf_r+0x79a>
 800d2ee:	9b00      	ldr	r3, [sp, #0]
 800d2f0:	2b09      	cmp	r3, #9
 800d2f2:	d806      	bhi.n	800d302 <_vfiprintf_r+0x79a>
 800d2f4:	25b7      	movs	r5, #183	; 0xb7
 800d2f6:	ab14      	add	r3, sp, #80	; 0x50
 800d2f8:	18ed      	adds	r5, r5, r3
 800d2fa:	9b00      	ldr	r3, [sp, #0]
 800d2fc:	3330      	adds	r3, #48	; 0x30
 800d2fe:	702b      	strb	r3, [r5, #0]
 800d300:	e125      	b.n	800d54e <_vfiprintf_r+0x9e6>
 800d302:	2380      	movs	r3, #128	; 0x80
 800d304:	0032      	movs	r2, r6
 800d306:	2400      	movs	r4, #0
 800d308:	00db      	lsls	r3, r3, #3
 800d30a:	401a      	ands	r2, r3
 800d30c:	ad42      	add	r5, sp, #264	; 0x108
 800d30e:	920a      	str	r2, [sp, #40]	; 0x28
 800d310:	220a      	movs	r2, #10
 800d312:	9800      	ldr	r0, [sp, #0]
 800d314:	9901      	ldr	r1, [sp, #4]
 800d316:	2300      	movs	r3, #0
 800d318:	f7f3 f900 	bl	800051c <__aeabi_uldivmod>
 800d31c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d31e:	3d01      	subs	r5, #1
 800d320:	3230      	adds	r2, #48	; 0x30
 800d322:	702a      	strb	r2, [r5, #0]
 800d324:	3401      	adds	r4, #1
 800d326:	2b00      	cmp	r3, #0
 800d328:	d01a      	beq.n	800d360 <_vfiprintf_r+0x7f8>
 800d32a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	42a3      	cmp	r3, r4
 800d330:	d116      	bne.n	800d360 <_vfiprintf_r+0x7f8>
 800d332:	2cff      	cmp	r4, #255	; 0xff
 800d334:	d014      	beq.n	800d360 <_vfiprintf_r+0x7f8>
 800d336:	9b01      	ldr	r3, [sp, #4]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d102      	bne.n	800d342 <_vfiprintf_r+0x7da>
 800d33c:	9b00      	ldr	r3, [sp, #0]
 800d33e:	2b09      	cmp	r3, #9
 800d340:	d90e      	bls.n	800d360 <_vfiprintf_r+0x7f8>
 800d342:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d344:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d346:	1aed      	subs	r5, r5, r3
 800d348:	001a      	movs	r2, r3
 800d34a:	0028      	movs	r0, r5
 800d34c:	f7ff f8c8 	bl	800c4e0 <strncpy>
 800d350:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d352:	2400      	movs	r4, #0
 800d354:	785b      	ldrb	r3, [r3, #1]
 800d356:	1e5a      	subs	r2, r3, #1
 800d358:	4193      	sbcs	r3, r2
 800d35a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d35c:	18d3      	adds	r3, r2, r3
 800d35e:	930d      	str	r3, [sp, #52]	; 0x34
 800d360:	2300      	movs	r3, #0
 800d362:	9800      	ldr	r0, [sp, #0]
 800d364:	9901      	ldr	r1, [sp, #4]
 800d366:	220a      	movs	r2, #10
 800d368:	f7f3 f8d8 	bl	800051c <__aeabi_uldivmod>
 800d36c:	9b01      	ldr	r3, [sp, #4]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d103      	bne.n	800d37a <_vfiprintf_r+0x812>
 800d372:	9b00      	ldr	r3, [sp, #0]
 800d374:	2b09      	cmp	r3, #9
 800d376:	d800      	bhi.n	800d37a <_vfiprintf_r+0x812>
 800d378:	e0e9      	b.n	800d54e <_vfiprintf_r+0x9e6>
 800d37a:	9000      	str	r0, [sp, #0]
 800d37c:	9101      	str	r1, [sp, #4]
 800d37e:	e7c7      	b.n	800d310 <_vfiprintf_r+0x7a8>
 800d380:	200f      	movs	r0, #15
 800d382:	9b00      	ldr	r3, [sp, #0]
 800d384:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d386:	4003      	ands	r3, r0
 800d388:	5cd3      	ldrb	r3, [r2, r3]
 800d38a:	3d01      	subs	r5, #1
 800d38c:	702b      	strb	r3, [r5, #0]
 800d38e:	9b01      	ldr	r3, [sp, #4]
 800d390:	0719      	lsls	r1, r3, #28
 800d392:	9b00      	ldr	r3, [sp, #0]
 800d394:	091a      	lsrs	r2, r3, #4
 800d396:	9b01      	ldr	r3, [sp, #4]
 800d398:	4311      	orrs	r1, r2
 800d39a:	091b      	lsrs	r3, r3, #4
 800d39c:	9301      	str	r3, [sp, #4]
 800d39e:	000b      	movs	r3, r1
 800d3a0:	9a01      	ldr	r2, [sp, #4]
 800d3a2:	9100      	str	r1, [sp, #0]
 800d3a4:	4313      	orrs	r3, r2
 800d3a6:	d1ec      	bne.n	800d382 <_vfiprintf_r+0x81a>
 800d3a8:	e0d1      	b.n	800d54e <_vfiprintf_r+0x9e6>
 800d3aa:	ad42      	add	r5, sp, #264	; 0x108
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d000      	beq.n	800d3b2 <_vfiprintf_r+0x84a>
 800d3b0:	e0cd      	b.n	800d54e <_vfiprintf_r+0x9e6>
 800d3b2:	07e3      	lsls	r3, r4, #31
 800d3b4:	d400      	bmi.n	800d3b8 <_vfiprintf_r+0x850>
 800d3b6:	e0ca      	b.n	800d54e <_vfiprintf_r+0x9e6>
 800d3b8:	25b7      	movs	r5, #183	; 0xb7
 800d3ba:	ab14      	add	r3, sp, #80	; 0x50
 800d3bc:	18ed      	adds	r5, r5, r3
 800d3be:	2330      	movs	r3, #48	; 0x30
 800d3c0:	e79d      	b.n	800d2fe <_vfiprintf_r+0x796>
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d100      	bne.n	800d3c8 <_vfiprintf_r+0x860>
 800d3c6:	e089      	b.n	800d4dc <_vfiprintf_r+0x974>
 800d3c8:	2100      	movs	r1, #0
 800d3ca:	aa29      	add	r2, sp, #164	; 0xa4
 800d3cc:	7013      	strb	r3, [r2, #0]
 800d3ce:	ab14      	add	r3, sp, #80	; 0x50
 800d3d0:	70d9      	strb	r1, [r3, #3]
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	9504      	str	r5, [sp, #16]
 800d3d6:	9305      	str	r3, [sp, #20]
 800d3d8:	0015      	movs	r5, r2
 800d3da:	910b      	str	r1, [sp, #44]	; 0x2c
 800d3dc:	e580      	b.n	800cee0 <_vfiprintf_r+0x378>
 800d3de:	2010      	movs	r0, #16
 800d3e0:	1812      	adds	r2, r2, r0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	9218      	str	r2, [sp, #96]	; 0x60
 800d3e6:	9317      	str	r3, [sp, #92]	; 0x5c
 800d3e8:	2b07      	cmp	r3, #7
 800d3ea:	dd07      	ble.n	800d3fc <_vfiprintf_r+0x894>
 800d3ec:	9903      	ldr	r1, [sp, #12]
 800d3ee:	9806      	ldr	r0, [sp, #24]
 800d3f0:	aa16      	add	r2, sp, #88	; 0x58
 800d3f2:	f7ff fb85 	bl	800cb00 <__sprint_r>
 800d3f6:	2800      	cmp	r0, #0
 800d3f8:	d14b      	bne.n	800d492 <_vfiprintf_r+0x92a>
 800d3fa:	a919      	add	r1, sp, #100	; 0x64
 800d3fc:	0033      	movs	r3, r6
 800d3fe:	3b10      	subs	r3, #16
 800d400:	001e      	movs	r6, r3
 800d402:	000f      	movs	r7, r1
 800d404:	e58e      	b.n	800cf24 <_vfiprintf_r+0x3bc>
 800d406:	2010      	movs	r0, #16
 800d408:	1812      	adds	r2, r2, r0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	9218      	str	r2, [sp, #96]	; 0x60
 800d40e:	9317      	str	r3, [sp, #92]	; 0x5c
 800d410:	2b07      	cmp	r3, #7
 800d412:	dd07      	ble.n	800d424 <_vfiprintf_r+0x8bc>
 800d414:	9903      	ldr	r1, [sp, #12]
 800d416:	9806      	ldr	r0, [sp, #24]
 800d418:	aa16      	add	r2, sp, #88	; 0x58
 800d41a:	f7ff fb71 	bl	800cb00 <__sprint_r>
 800d41e:	2800      	cmp	r0, #0
 800d420:	d137      	bne.n	800d492 <_vfiprintf_r+0x92a>
 800d422:	a919      	add	r1, sp, #100	; 0x64
 800d424:	0033      	movs	r3, r6
 800d426:	3b10      	subs	r3, #16
 800d428:	001e      	movs	r6, r3
 800d42a:	000f      	movs	r7, r1
 800d42c:	e5d6      	b.n	800cfdc <_vfiprintf_r+0x474>
 800d42e:	2010      	movs	r0, #16
 800d430:	1812      	adds	r2, r2, r0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	9218      	str	r2, [sp, #96]	; 0x60
 800d436:	9317      	str	r3, [sp, #92]	; 0x5c
 800d438:	2b07      	cmp	r3, #7
 800d43a:	dd07      	ble.n	800d44c <_vfiprintf_r+0x8e4>
 800d43c:	9903      	ldr	r1, [sp, #12]
 800d43e:	9806      	ldr	r0, [sp, #24]
 800d440:	aa16      	add	r2, sp, #88	; 0x58
 800d442:	f7ff fb5d 	bl	800cb00 <__sprint_r>
 800d446:	2800      	cmp	r0, #0
 800d448:	d123      	bne.n	800d492 <_vfiprintf_r+0x92a>
 800d44a:	a919      	add	r1, sp, #100	; 0x64
 800d44c:	0033      	movs	r3, r6
 800d44e:	3b10      	subs	r3, #16
 800d450:	001e      	movs	r6, r3
 800d452:	000f      	movs	r7, r1
 800d454:	e5e2      	b.n	800d01c <_vfiprintf_r+0x4b4>
 800d456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d458:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d45a:	2510      	movs	r5, #16
 800d45c:	1a9c      	subs	r4, r3, r2
 800d45e:	2c00      	cmp	r4, #0
 800d460:	dc00      	bgt.n	800d464 <_vfiprintf_r+0x8fc>
 800d462:	e613      	b.n	800d08c <_vfiprintf_r+0x524>
 800d464:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d466:	483e      	ldr	r0, [pc, #248]	; (800d560 <_vfiprintf_r+0x9f8>)
 800d468:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d46a:	9305      	str	r3, [sp, #20]
 800d46c:	1c5a      	adds	r2, r3, #1
 800d46e:	6038      	str	r0, [r7, #0]
 800d470:	2c10      	cmp	r4, #16
 800d472:	dc22      	bgt.n	800d4ba <_vfiprintf_r+0x952>
 800d474:	607c      	str	r4, [r7, #4]
 800d476:	190c      	adds	r4, r1, r4
 800d478:	9418      	str	r4, [sp, #96]	; 0x60
 800d47a:	9217      	str	r2, [sp, #92]	; 0x5c
 800d47c:	2a07      	cmp	r2, #7
 800d47e:	dc00      	bgt.n	800d482 <_vfiprintf_r+0x91a>
 800d480:	e604      	b.n	800d08c <_vfiprintf_r+0x524>
 800d482:	9903      	ldr	r1, [sp, #12]
 800d484:	9806      	ldr	r0, [sp, #24]
 800d486:	aa16      	add	r2, sp, #88	; 0x58
 800d488:	f7ff fb3a 	bl	800cb00 <__sprint_r>
 800d48c:	2800      	cmp	r0, #0
 800d48e:	d100      	bne.n	800d492 <_vfiprintf_r+0x92a>
 800d490:	e5fc      	b.n	800d08c <_vfiprintf_r+0x524>
 800d492:	9b03      	ldr	r3, [sp, #12]
 800d494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d496:	07db      	lsls	r3, r3, #31
 800d498:	d407      	bmi.n	800d4aa <_vfiprintf_r+0x942>
 800d49a:	9b03      	ldr	r3, [sp, #12]
 800d49c:	899b      	ldrh	r3, [r3, #12]
 800d49e:	059b      	lsls	r3, r3, #22
 800d4a0:	d403      	bmi.n	800d4aa <_vfiprintf_r+0x942>
 800d4a2:	9b03      	ldr	r3, [sp, #12]
 800d4a4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800d4a6:	f7fe fa64 	bl	800b972 <__retarget_lock_release_recursive>
 800d4aa:	9b03      	ldr	r3, [sp, #12]
 800d4ac:	899b      	ldrh	r3, [r3, #12]
 800d4ae:	065b      	lsls	r3, r3, #25
 800d4b0:	d401      	bmi.n	800d4b6 <_vfiprintf_r+0x94e>
 800d4b2:	f7ff fb98 	bl	800cbe6 <_vfiprintf_r+0x7e>
 800d4b6:	f7ff fb93 	bl	800cbe0 <_vfiprintf_r+0x78>
 800d4ba:	3110      	adds	r1, #16
 800d4bc:	607d      	str	r5, [r7, #4]
 800d4be:	9118      	str	r1, [sp, #96]	; 0x60
 800d4c0:	9217      	str	r2, [sp, #92]	; 0x5c
 800d4c2:	3708      	adds	r7, #8
 800d4c4:	2a07      	cmp	r2, #7
 800d4c6:	dd07      	ble.n	800d4d8 <_vfiprintf_r+0x970>
 800d4c8:	9903      	ldr	r1, [sp, #12]
 800d4ca:	9806      	ldr	r0, [sp, #24]
 800d4cc:	aa16      	add	r2, sp, #88	; 0x58
 800d4ce:	f7ff fb17 	bl	800cb00 <__sprint_r>
 800d4d2:	2800      	cmp	r0, #0
 800d4d4:	d1dd      	bne.n	800d492 <_vfiprintf_r+0x92a>
 800d4d6:	af19      	add	r7, sp, #100	; 0x64
 800d4d8:	3c10      	subs	r4, #16
 800d4da:	e7c3      	b.n	800d464 <_vfiprintf_r+0x8fc>
 800d4dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d4de:	9300      	str	r3, [sp, #0]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d102      	bne.n	800d4ea <_vfiprintf_r+0x982>
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	9317      	str	r3, [sp, #92]	; 0x5c
 800d4e8:	e7d3      	b.n	800d492 <_vfiprintf_r+0x92a>
 800d4ea:	9903      	ldr	r1, [sp, #12]
 800d4ec:	9806      	ldr	r0, [sp, #24]
 800d4ee:	aa16      	add	r2, sp, #88	; 0x58
 800d4f0:	f7ff fb06 	bl	800cb00 <__sprint_r>
 800d4f4:	2800      	cmp	r0, #0
 800d4f6:	d0f5      	beq.n	800d4e4 <_vfiprintf_r+0x97c>
 800d4f8:	e7cb      	b.n	800d492 <_vfiprintf_r+0x92a>
 800d4fa:	0026      	movs	r6, r4
 800d4fc:	2a00      	cmp	r2, #0
 800d4fe:	d100      	bne.n	800d502 <_vfiprintf_r+0x99a>
 800d500:	e609      	b.n	800d116 <_vfiprintf_r+0x5ae>
 800d502:	2b01      	cmp	r3, #1
 800d504:	d100      	bne.n	800d508 <_vfiprintf_r+0x9a0>
 800d506:	e6ef      	b.n	800d2e8 <_vfiprintf_r+0x780>
 800d508:	ad42      	add	r5, sp, #264	; 0x108
 800d50a:	2b02      	cmp	r3, #2
 800d50c:	d100      	bne.n	800d510 <_vfiprintf_r+0x9a8>
 800d50e:	e737      	b.n	800d380 <_vfiprintf_r+0x818>
 800d510:	2307      	movs	r3, #7
 800d512:	469c      	mov	ip, r3
 800d514:	4663      	mov	r3, ip
 800d516:	9900      	ldr	r1, [sp, #0]
 800d518:	002a      	movs	r2, r5
 800d51a:	400b      	ands	r3, r1
 800d51c:	9901      	ldr	r1, [sp, #4]
 800d51e:	3d01      	subs	r5, #1
 800d520:	074c      	lsls	r4, r1, #29
 800d522:	9900      	ldr	r1, [sp, #0]
 800d524:	3330      	adds	r3, #48	; 0x30
 800d526:	08c8      	lsrs	r0, r1, #3
 800d528:	9901      	ldr	r1, [sp, #4]
 800d52a:	4304      	orrs	r4, r0
 800d52c:	08c9      	lsrs	r1, r1, #3
 800d52e:	9101      	str	r1, [sp, #4]
 800d530:	0021      	movs	r1, r4
 800d532:	9801      	ldr	r0, [sp, #4]
 800d534:	702b      	strb	r3, [r5, #0]
 800d536:	9400      	str	r4, [sp, #0]
 800d538:	4301      	orrs	r1, r0
 800d53a:	d1eb      	bne.n	800d514 <_vfiprintf_r+0x9ac>
 800d53c:	0031      	movs	r1, r6
 800d53e:	07c9      	lsls	r1, r1, #31
 800d540:	d505      	bpl.n	800d54e <_vfiprintf_r+0x9e6>
 800d542:	2b30      	cmp	r3, #48	; 0x30
 800d544:	d003      	beq.n	800d54e <_vfiprintf_r+0x9e6>
 800d546:	2330      	movs	r3, #48	; 0x30
 800d548:	3d01      	subs	r5, #1
 800d54a:	702b      	strb	r3, [r5, #0]
 800d54c:	1e95      	subs	r5, r2, #2
 800d54e:	9b05      	ldr	r3, [sp, #20]
 800d550:	0034      	movs	r4, r6
 800d552:	930b      	str	r3, [sp, #44]	; 0x2c
 800d554:	ab42      	add	r3, sp, #264	; 0x108
 800d556:	1b5b      	subs	r3, r3, r5
 800d558:	9305      	str	r3, [sp, #20]
 800d55a:	e4c1      	b.n	800cee0 <_vfiprintf_r+0x378>
 800d55c:	0800e911 	.word	0x0800e911
 800d560:	0800ec6a 	.word	0x0800ec6a

0800d564 <__sbprintf>:
 800d564:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d566:	0015      	movs	r5, r2
 800d568:	2202      	movs	r2, #2
 800d56a:	4c1e      	ldr	r4, [pc, #120]	; (800d5e4 <__sbprintf+0x80>)
 800d56c:	001f      	movs	r7, r3
 800d56e:	898b      	ldrh	r3, [r1, #12]
 800d570:	44a5      	add	sp, r4
 800d572:	4393      	bics	r3, r2
 800d574:	466a      	mov	r2, sp
 800d576:	8193      	strh	r3, [r2, #12]
 800d578:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800d57a:	0006      	movs	r6, r0
 800d57c:	9319      	str	r3, [sp, #100]	; 0x64
 800d57e:	89cb      	ldrh	r3, [r1, #14]
 800d580:	a816      	add	r0, sp, #88	; 0x58
 800d582:	81d3      	strh	r3, [r2, #14]
 800d584:	69cb      	ldr	r3, [r1, #28]
 800d586:	000c      	movs	r4, r1
 800d588:	9307      	str	r3, [sp, #28]
 800d58a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800d58c:	9309      	str	r3, [sp, #36]	; 0x24
 800d58e:	ab1a      	add	r3, sp, #104	; 0x68
 800d590:	9300      	str	r3, [sp, #0]
 800d592:	9304      	str	r3, [sp, #16]
 800d594:	2380      	movs	r3, #128	; 0x80
 800d596:	00db      	lsls	r3, r3, #3
 800d598:	9302      	str	r3, [sp, #8]
 800d59a:	9305      	str	r3, [sp, #20]
 800d59c:	2300      	movs	r3, #0
 800d59e:	9306      	str	r3, [sp, #24]
 800d5a0:	f7fe f9e4 	bl	800b96c <__retarget_lock_init_recursive>
 800d5a4:	002a      	movs	r2, r5
 800d5a6:	003b      	movs	r3, r7
 800d5a8:	4669      	mov	r1, sp
 800d5aa:	0030      	movs	r0, r6
 800d5ac:	f7ff fadc 	bl	800cb68 <_vfiprintf_r>
 800d5b0:	1e05      	subs	r5, r0, #0
 800d5b2:	db07      	blt.n	800d5c4 <__sbprintf+0x60>
 800d5b4:	4669      	mov	r1, sp
 800d5b6:	0030      	movs	r0, r6
 800d5b8:	f000 f92a 	bl	800d810 <_fflush_r>
 800d5bc:	2800      	cmp	r0, #0
 800d5be:	d001      	beq.n	800d5c4 <__sbprintf+0x60>
 800d5c0:	2501      	movs	r5, #1
 800d5c2:	426d      	negs	r5, r5
 800d5c4:	466b      	mov	r3, sp
 800d5c6:	899a      	ldrh	r2, [r3, #12]
 800d5c8:	2340      	movs	r3, #64	; 0x40
 800d5ca:	421a      	tst	r2, r3
 800d5cc:	d002      	beq.n	800d5d4 <__sbprintf+0x70>
 800d5ce:	89a2      	ldrh	r2, [r4, #12]
 800d5d0:	4313      	orrs	r3, r2
 800d5d2:	81a3      	strh	r3, [r4, #12]
 800d5d4:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d5d6:	f7fe f9ca 	bl	800b96e <__retarget_lock_close_recursive>
 800d5da:	0028      	movs	r0, r5
 800d5dc:	4b02      	ldr	r3, [pc, #8]	; (800d5e8 <__sbprintf+0x84>)
 800d5de:	449d      	add	sp, r3
 800d5e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5e2:	46c0      	nop			; (mov r8, r8)
 800d5e4:	fffffb94 	.word	0xfffffb94
 800d5e8:	0000046c 	.word	0x0000046c

0800d5ec <__ascii_wctomb>:
 800d5ec:	0003      	movs	r3, r0
 800d5ee:	1e08      	subs	r0, r1, #0
 800d5f0:	d005      	beq.n	800d5fe <__ascii_wctomb+0x12>
 800d5f2:	2aff      	cmp	r2, #255	; 0xff
 800d5f4:	d904      	bls.n	800d600 <__ascii_wctomb+0x14>
 800d5f6:	228a      	movs	r2, #138	; 0x8a
 800d5f8:	2001      	movs	r0, #1
 800d5fa:	601a      	str	r2, [r3, #0]
 800d5fc:	4240      	negs	r0, r0
 800d5fe:	4770      	bx	lr
 800d600:	2001      	movs	r0, #1
 800d602:	700a      	strb	r2, [r1, #0]
 800d604:	e7fb      	b.n	800d5fe <__ascii_wctomb+0x12>
	...

0800d608 <__swsetup_r>:
 800d608:	4b30      	ldr	r3, [pc, #192]	; (800d6cc <__swsetup_r+0xc4>)
 800d60a:	b570      	push	{r4, r5, r6, lr}
 800d60c:	0005      	movs	r5, r0
 800d60e:	6818      	ldr	r0, [r3, #0]
 800d610:	000c      	movs	r4, r1
 800d612:	2800      	cmp	r0, #0
 800d614:	d004      	beq.n	800d620 <__swsetup_r+0x18>
 800d616:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d101      	bne.n	800d620 <__swsetup_r+0x18>
 800d61c:	f000 f96e 	bl	800d8fc <__sinit>
 800d620:	230c      	movs	r3, #12
 800d622:	5ee2      	ldrsh	r2, [r4, r3]
 800d624:	b293      	uxth	r3, r2
 800d626:	0711      	lsls	r1, r2, #28
 800d628:	d423      	bmi.n	800d672 <__swsetup_r+0x6a>
 800d62a:	06d9      	lsls	r1, r3, #27
 800d62c:	d407      	bmi.n	800d63e <__swsetup_r+0x36>
 800d62e:	2309      	movs	r3, #9
 800d630:	2001      	movs	r0, #1
 800d632:	602b      	str	r3, [r5, #0]
 800d634:	3337      	adds	r3, #55	; 0x37
 800d636:	4313      	orrs	r3, r2
 800d638:	81a3      	strh	r3, [r4, #12]
 800d63a:	4240      	negs	r0, r0
 800d63c:	bd70      	pop	{r4, r5, r6, pc}
 800d63e:	075b      	lsls	r3, r3, #29
 800d640:	d513      	bpl.n	800d66a <__swsetup_r+0x62>
 800d642:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d644:	2900      	cmp	r1, #0
 800d646:	d008      	beq.n	800d65a <__swsetup_r+0x52>
 800d648:	0023      	movs	r3, r4
 800d64a:	3340      	adds	r3, #64	; 0x40
 800d64c:	4299      	cmp	r1, r3
 800d64e:	d002      	beq.n	800d656 <__swsetup_r+0x4e>
 800d650:	0028      	movs	r0, r5
 800d652:	f7fe f8d5 	bl	800b800 <_free_r>
 800d656:	2300      	movs	r3, #0
 800d658:	6323      	str	r3, [r4, #48]	; 0x30
 800d65a:	2224      	movs	r2, #36	; 0x24
 800d65c:	89a3      	ldrh	r3, [r4, #12]
 800d65e:	4393      	bics	r3, r2
 800d660:	81a3      	strh	r3, [r4, #12]
 800d662:	2300      	movs	r3, #0
 800d664:	6063      	str	r3, [r4, #4]
 800d666:	6923      	ldr	r3, [r4, #16]
 800d668:	6023      	str	r3, [r4, #0]
 800d66a:	2308      	movs	r3, #8
 800d66c:	89a2      	ldrh	r2, [r4, #12]
 800d66e:	4313      	orrs	r3, r2
 800d670:	81a3      	strh	r3, [r4, #12]
 800d672:	6923      	ldr	r3, [r4, #16]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d10b      	bne.n	800d690 <__swsetup_r+0x88>
 800d678:	21a0      	movs	r1, #160	; 0xa0
 800d67a:	2280      	movs	r2, #128	; 0x80
 800d67c:	89a3      	ldrh	r3, [r4, #12]
 800d67e:	0089      	lsls	r1, r1, #2
 800d680:	0092      	lsls	r2, r2, #2
 800d682:	400b      	ands	r3, r1
 800d684:	4293      	cmp	r3, r2
 800d686:	d003      	beq.n	800d690 <__swsetup_r+0x88>
 800d688:	0021      	movs	r1, r4
 800d68a:	0028      	movs	r0, r5
 800d68c:	f000 fb80 	bl	800dd90 <__smakebuf_r>
 800d690:	220c      	movs	r2, #12
 800d692:	5ea3      	ldrsh	r3, [r4, r2]
 800d694:	2001      	movs	r0, #1
 800d696:	001a      	movs	r2, r3
 800d698:	b299      	uxth	r1, r3
 800d69a:	4002      	ands	r2, r0
 800d69c:	4203      	tst	r3, r0
 800d69e:	d00f      	beq.n	800d6c0 <__swsetup_r+0xb8>
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	60a2      	str	r2, [r4, #8]
 800d6a4:	6962      	ldr	r2, [r4, #20]
 800d6a6:	4252      	negs	r2, r2
 800d6a8:	61a2      	str	r2, [r4, #24]
 800d6aa:	2000      	movs	r0, #0
 800d6ac:	6922      	ldr	r2, [r4, #16]
 800d6ae:	4282      	cmp	r2, r0
 800d6b0:	d1c4      	bne.n	800d63c <__swsetup_r+0x34>
 800d6b2:	060a      	lsls	r2, r1, #24
 800d6b4:	d5c2      	bpl.n	800d63c <__swsetup_r+0x34>
 800d6b6:	2240      	movs	r2, #64	; 0x40
 800d6b8:	4313      	orrs	r3, r2
 800d6ba:	81a3      	strh	r3, [r4, #12]
 800d6bc:	3801      	subs	r0, #1
 800d6be:	e7bd      	b.n	800d63c <__swsetup_r+0x34>
 800d6c0:	0788      	lsls	r0, r1, #30
 800d6c2:	d400      	bmi.n	800d6c6 <__swsetup_r+0xbe>
 800d6c4:	6962      	ldr	r2, [r4, #20]
 800d6c6:	60a2      	str	r2, [r4, #8]
 800d6c8:	e7ef      	b.n	800d6aa <__swsetup_r+0xa2>
 800d6ca:	46c0      	nop			; (mov r8, r8)
 800d6cc:	20000010 	.word	0x20000010

0800d6d0 <abort>:
 800d6d0:	2006      	movs	r0, #6
 800d6d2:	b510      	push	{r4, lr}
 800d6d4:	f000 fbcc 	bl	800de70 <raise>
 800d6d8:	2001      	movs	r0, #1
 800d6da:	f7fb fd2d 	bl	8009138 <_exit>
	...

0800d6e0 <__sflush_r>:
 800d6e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6e2:	230c      	movs	r3, #12
 800d6e4:	5eca      	ldrsh	r2, [r1, r3]
 800d6e6:	000c      	movs	r4, r1
 800d6e8:	0005      	movs	r5, r0
 800d6ea:	b291      	uxth	r1, r2
 800d6ec:	0713      	lsls	r3, r2, #28
 800d6ee:	d467      	bmi.n	800d7c0 <__sflush_r+0xe0>
 800d6f0:	2380      	movs	r3, #128	; 0x80
 800d6f2:	011b      	lsls	r3, r3, #4
 800d6f4:	4313      	orrs	r3, r2
 800d6f6:	6862      	ldr	r2, [r4, #4]
 800d6f8:	81a3      	strh	r3, [r4, #12]
 800d6fa:	2a00      	cmp	r2, #0
 800d6fc:	dc04      	bgt.n	800d708 <__sflush_r+0x28>
 800d6fe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d700:	2a00      	cmp	r2, #0
 800d702:	dc01      	bgt.n	800d708 <__sflush_r+0x28>
 800d704:	2000      	movs	r0, #0
 800d706:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d708:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800d70a:	2f00      	cmp	r7, #0
 800d70c:	d0fa      	beq.n	800d704 <__sflush_r+0x24>
 800d70e:	2200      	movs	r2, #0
 800d710:	2180      	movs	r1, #128	; 0x80
 800d712:	682e      	ldr	r6, [r5, #0]
 800d714:	602a      	str	r2, [r5, #0]
 800d716:	001a      	movs	r2, r3
 800d718:	0149      	lsls	r1, r1, #5
 800d71a:	400a      	ands	r2, r1
 800d71c:	420b      	tst	r3, r1
 800d71e:	d038      	beq.n	800d792 <__sflush_r+0xb2>
 800d720:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800d722:	89a3      	ldrh	r3, [r4, #12]
 800d724:	075b      	lsls	r3, r3, #29
 800d726:	d506      	bpl.n	800d736 <__sflush_r+0x56>
 800d728:	6863      	ldr	r3, [r4, #4]
 800d72a:	1ac0      	subs	r0, r0, r3
 800d72c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d001      	beq.n	800d736 <__sflush_r+0x56>
 800d732:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d734:	1ac0      	subs	r0, r0, r3
 800d736:	0002      	movs	r2, r0
 800d738:	69e1      	ldr	r1, [r4, #28]
 800d73a:	2300      	movs	r3, #0
 800d73c:	0028      	movs	r0, r5
 800d73e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800d740:	47b8      	blx	r7
 800d742:	89a1      	ldrh	r1, [r4, #12]
 800d744:	1c43      	adds	r3, r0, #1
 800d746:	d106      	bne.n	800d756 <__sflush_r+0x76>
 800d748:	682b      	ldr	r3, [r5, #0]
 800d74a:	2b1d      	cmp	r3, #29
 800d74c:	d835      	bhi.n	800d7ba <__sflush_r+0xda>
 800d74e:	4a2e      	ldr	r2, [pc, #184]	; (800d808 <__sflush_r+0x128>)
 800d750:	40da      	lsrs	r2, r3
 800d752:	07d3      	lsls	r3, r2, #31
 800d754:	d531      	bpl.n	800d7ba <__sflush_r+0xda>
 800d756:	2200      	movs	r2, #0
 800d758:	4b2c      	ldr	r3, [pc, #176]	; (800d80c <__sflush_r+0x12c>)
 800d75a:	6062      	str	r2, [r4, #4]
 800d75c:	400b      	ands	r3, r1
 800d75e:	6922      	ldr	r2, [r4, #16]
 800d760:	b21b      	sxth	r3, r3
 800d762:	81a3      	strh	r3, [r4, #12]
 800d764:	6022      	str	r2, [r4, #0]
 800d766:	04db      	lsls	r3, r3, #19
 800d768:	d505      	bpl.n	800d776 <__sflush_r+0x96>
 800d76a:	1c43      	adds	r3, r0, #1
 800d76c:	d102      	bne.n	800d774 <__sflush_r+0x94>
 800d76e:	682b      	ldr	r3, [r5, #0]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d100      	bne.n	800d776 <__sflush_r+0x96>
 800d774:	6520      	str	r0, [r4, #80]	; 0x50
 800d776:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d778:	602e      	str	r6, [r5, #0]
 800d77a:	2900      	cmp	r1, #0
 800d77c:	d0c2      	beq.n	800d704 <__sflush_r+0x24>
 800d77e:	0023      	movs	r3, r4
 800d780:	3340      	adds	r3, #64	; 0x40
 800d782:	4299      	cmp	r1, r3
 800d784:	d002      	beq.n	800d78c <__sflush_r+0xac>
 800d786:	0028      	movs	r0, r5
 800d788:	f7fe f83a 	bl	800b800 <_free_r>
 800d78c:	2000      	movs	r0, #0
 800d78e:	6320      	str	r0, [r4, #48]	; 0x30
 800d790:	e7b9      	b.n	800d706 <__sflush_r+0x26>
 800d792:	2301      	movs	r3, #1
 800d794:	0028      	movs	r0, r5
 800d796:	69e1      	ldr	r1, [r4, #28]
 800d798:	47b8      	blx	r7
 800d79a:	1c43      	adds	r3, r0, #1
 800d79c:	d1c1      	bne.n	800d722 <__sflush_r+0x42>
 800d79e:	682b      	ldr	r3, [r5, #0]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d0be      	beq.n	800d722 <__sflush_r+0x42>
 800d7a4:	2b1d      	cmp	r3, #29
 800d7a6:	d001      	beq.n	800d7ac <__sflush_r+0xcc>
 800d7a8:	2b16      	cmp	r3, #22
 800d7aa:	d101      	bne.n	800d7b0 <__sflush_r+0xd0>
 800d7ac:	602e      	str	r6, [r5, #0]
 800d7ae:	e7a9      	b.n	800d704 <__sflush_r+0x24>
 800d7b0:	2340      	movs	r3, #64	; 0x40
 800d7b2:	89a2      	ldrh	r2, [r4, #12]
 800d7b4:	4313      	orrs	r3, r2
 800d7b6:	81a3      	strh	r3, [r4, #12]
 800d7b8:	e7a5      	b.n	800d706 <__sflush_r+0x26>
 800d7ba:	2340      	movs	r3, #64	; 0x40
 800d7bc:	430b      	orrs	r3, r1
 800d7be:	e7fa      	b.n	800d7b6 <__sflush_r+0xd6>
 800d7c0:	6927      	ldr	r7, [r4, #16]
 800d7c2:	2f00      	cmp	r7, #0
 800d7c4:	d09e      	beq.n	800d704 <__sflush_r+0x24>
 800d7c6:	6823      	ldr	r3, [r4, #0]
 800d7c8:	6027      	str	r7, [r4, #0]
 800d7ca:	1bdb      	subs	r3, r3, r7
 800d7cc:	9301      	str	r3, [sp, #4]
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	078a      	lsls	r2, r1, #30
 800d7d2:	d100      	bne.n	800d7d6 <__sflush_r+0xf6>
 800d7d4:	6963      	ldr	r3, [r4, #20]
 800d7d6:	60a3      	str	r3, [r4, #8]
 800d7d8:	9b01      	ldr	r3, [sp, #4]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	dc00      	bgt.n	800d7e0 <__sflush_r+0x100>
 800d7de:	e791      	b.n	800d704 <__sflush_r+0x24>
 800d7e0:	003a      	movs	r2, r7
 800d7e2:	0028      	movs	r0, r5
 800d7e4:	9b01      	ldr	r3, [sp, #4]
 800d7e6:	69e1      	ldr	r1, [r4, #28]
 800d7e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d7ea:	47b0      	blx	r6
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	dc06      	bgt.n	800d7fe <__sflush_r+0x11e>
 800d7f0:	2340      	movs	r3, #64	; 0x40
 800d7f2:	2001      	movs	r0, #1
 800d7f4:	89a2      	ldrh	r2, [r4, #12]
 800d7f6:	4240      	negs	r0, r0
 800d7f8:	4313      	orrs	r3, r2
 800d7fa:	81a3      	strh	r3, [r4, #12]
 800d7fc:	e783      	b.n	800d706 <__sflush_r+0x26>
 800d7fe:	9b01      	ldr	r3, [sp, #4]
 800d800:	183f      	adds	r7, r7, r0
 800d802:	1a1b      	subs	r3, r3, r0
 800d804:	9301      	str	r3, [sp, #4]
 800d806:	e7e7      	b.n	800d7d8 <__sflush_r+0xf8>
 800d808:	20400001 	.word	0x20400001
 800d80c:	fffff7ff 	.word	0xfffff7ff

0800d810 <_fflush_r>:
 800d810:	b570      	push	{r4, r5, r6, lr}
 800d812:	0005      	movs	r5, r0
 800d814:	000c      	movs	r4, r1
 800d816:	2800      	cmp	r0, #0
 800d818:	d004      	beq.n	800d824 <_fflush_r+0x14>
 800d81a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d101      	bne.n	800d824 <_fflush_r+0x14>
 800d820:	f000 f86c 	bl	800d8fc <__sinit>
 800d824:	220c      	movs	r2, #12
 800d826:	5ea3      	ldrsh	r3, [r4, r2]
 800d828:	1e1e      	subs	r6, r3, #0
 800d82a:	d015      	beq.n	800d858 <_fflush_r+0x48>
 800d82c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d82e:	07d2      	lsls	r2, r2, #31
 800d830:	d404      	bmi.n	800d83c <_fflush_r+0x2c>
 800d832:	059b      	lsls	r3, r3, #22
 800d834:	d402      	bmi.n	800d83c <_fflush_r+0x2c>
 800d836:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d838:	f7fe f89a 	bl	800b970 <__retarget_lock_acquire_recursive>
 800d83c:	0021      	movs	r1, r4
 800d83e:	0028      	movs	r0, r5
 800d840:	f7ff ff4e 	bl	800d6e0 <__sflush_r>
 800d844:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d846:	0006      	movs	r6, r0
 800d848:	07db      	lsls	r3, r3, #31
 800d84a:	d405      	bmi.n	800d858 <_fflush_r+0x48>
 800d84c:	89a3      	ldrh	r3, [r4, #12]
 800d84e:	059b      	lsls	r3, r3, #22
 800d850:	d402      	bmi.n	800d858 <_fflush_r+0x48>
 800d852:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d854:	f7fe f88d 	bl	800b972 <__retarget_lock_release_recursive>
 800d858:	0030      	movs	r0, r6
 800d85a:	bd70      	pop	{r4, r5, r6, pc}

0800d85c <std>:
 800d85c:	2300      	movs	r3, #0
 800d85e:	b510      	push	{r4, lr}
 800d860:	0004      	movs	r4, r0
 800d862:	6003      	str	r3, [r0, #0]
 800d864:	6043      	str	r3, [r0, #4]
 800d866:	6083      	str	r3, [r0, #8]
 800d868:	8181      	strh	r1, [r0, #12]
 800d86a:	6643      	str	r3, [r0, #100]	; 0x64
 800d86c:	0019      	movs	r1, r3
 800d86e:	81c2      	strh	r2, [r0, #14]
 800d870:	6103      	str	r3, [r0, #16]
 800d872:	2208      	movs	r2, #8
 800d874:	6143      	str	r3, [r0, #20]
 800d876:	6183      	str	r3, [r0, #24]
 800d878:	305c      	adds	r0, #92	; 0x5c
 800d87a:	f7fb fd53 	bl	8009324 <memset>
 800d87e:	0020      	movs	r0, r4
 800d880:	4b06      	ldr	r3, [pc, #24]	; (800d89c <std+0x40>)
 800d882:	61e4      	str	r4, [r4, #28]
 800d884:	6223      	str	r3, [r4, #32]
 800d886:	4b06      	ldr	r3, [pc, #24]	; (800d8a0 <std+0x44>)
 800d888:	3058      	adds	r0, #88	; 0x58
 800d88a:	6263      	str	r3, [r4, #36]	; 0x24
 800d88c:	4b05      	ldr	r3, [pc, #20]	; (800d8a4 <std+0x48>)
 800d88e:	62a3      	str	r3, [r4, #40]	; 0x28
 800d890:	4b05      	ldr	r3, [pc, #20]	; (800d8a8 <std+0x4c>)
 800d892:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d894:	f7fe f86a 	bl	800b96c <__retarget_lock_init_recursive>
 800d898:	bd10      	pop	{r4, pc}
 800d89a:	46c0      	nop			; (mov r8, r8)
 800d89c:	0800deb1 	.word	0x0800deb1
 800d8a0:	0800ded9 	.word	0x0800ded9
 800d8a4:	0800df11 	.word	0x0800df11
 800d8a8:	0800df3d 	.word	0x0800df3d

0800d8ac <_cleanup_r>:
 800d8ac:	b510      	push	{r4, lr}
 800d8ae:	4902      	ldr	r1, [pc, #8]	; (800d8b8 <_cleanup_r+0xc>)
 800d8b0:	f000 fa1c 	bl	800dcec <_fwalk_reent>
 800d8b4:	bd10      	pop	{r4, pc}
 800d8b6:	46c0      	nop			; (mov r8, r8)
 800d8b8:	0800e069 	.word	0x0800e069

0800d8bc <__sfp_lock_acquire>:
 800d8bc:	b510      	push	{r4, lr}
 800d8be:	4802      	ldr	r0, [pc, #8]	; (800d8c8 <__sfp_lock_acquire+0xc>)
 800d8c0:	f7fe f856 	bl	800b970 <__retarget_lock_acquire_recursive>
 800d8c4:	bd10      	pop	{r4, pc}
 800d8c6:	46c0      	nop			; (mov r8, r8)
 800d8c8:	20003b74 	.word	0x20003b74

0800d8cc <__sfp_lock_release>:
 800d8cc:	b510      	push	{r4, lr}
 800d8ce:	4802      	ldr	r0, [pc, #8]	; (800d8d8 <__sfp_lock_release+0xc>)
 800d8d0:	f7fe f84f 	bl	800b972 <__retarget_lock_release_recursive>
 800d8d4:	bd10      	pop	{r4, pc}
 800d8d6:	46c0      	nop			; (mov r8, r8)
 800d8d8:	20003b74 	.word	0x20003b74

0800d8dc <__sinit_lock_acquire>:
 800d8dc:	b510      	push	{r4, lr}
 800d8de:	4802      	ldr	r0, [pc, #8]	; (800d8e8 <__sinit_lock_acquire+0xc>)
 800d8e0:	f7fe f846 	bl	800b970 <__retarget_lock_acquire_recursive>
 800d8e4:	bd10      	pop	{r4, pc}
 800d8e6:	46c0      	nop			; (mov r8, r8)
 800d8e8:	20003b6f 	.word	0x20003b6f

0800d8ec <__sinit_lock_release>:
 800d8ec:	b510      	push	{r4, lr}
 800d8ee:	4802      	ldr	r0, [pc, #8]	; (800d8f8 <__sinit_lock_release+0xc>)
 800d8f0:	f7fe f83f 	bl	800b972 <__retarget_lock_release_recursive>
 800d8f4:	bd10      	pop	{r4, pc}
 800d8f6:	46c0      	nop			; (mov r8, r8)
 800d8f8:	20003b6f 	.word	0x20003b6f

0800d8fc <__sinit>:
 800d8fc:	b510      	push	{r4, lr}
 800d8fe:	0004      	movs	r4, r0
 800d900:	f7ff ffec 	bl	800d8dc <__sinit_lock_acquire>
 800d904:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d906:	2a00      	cmp	r2, #0
 800d908:	d002      	beq.n	800d910 <__sinit+0x14>
 800d90a:	f7ff ffef 	bl	800d8ec <__sinit_lock_release>
 800d90e:	bd10      	pop	{r4, pc}
 800d910:	4b0e      	ldr	r3, [pc, #56]	; (800d94c <__sinit+0x50>)
 800d912:	2103      	movs	r1, #3
 800d914:	63e3      	str	r3, [r4, #60]	; 0x3c
 800d916:	23b8      	movs	r3, #184	; 0xb8
 800d918:	009b      	lsls	r3, r3, #2
 800d91a:	50e2      	str	r2, [r4, r3]
 800d91c:	3304      	adds	r3, #4
 800d91e:	50e1      	str	r1, [r4, r3]
 800d920:	3308      	adds	r3, #8
 800d922:	18e1      	adds	r1, r4, r3
 800d924:	3b04      	subs	r3, #4
 800d926:	50e1      	str	r1, [r4, r3]
 800d928:	6860      	ldr	r0, [r4, #4]
 800d92a:	2104      	movs	r1, #4
 800d92c:	f7ff ff96 	bl	800d85c <std>
 800d930:	2201      	movs	r2, #1
 800d932:	2109      	movs	r1, #9
 800d934:	68a0      	ldr	r0, [r4, #8]
 800d936:	f7ff ff91 	bl	800d85c <std>
 800d93a:	2202      	movs	r2, #2
 800d93c:	2112      	movs	r1, #18
 800d93e:	68e0      	ldr	r0, [r4, #12]
 800d940:	f7ff ff8c 	bl	800d85c <std>
 800d944:	2301      	movs	r3, #1
 800d946:	63a3      	str	r3, [r4, #56]	; 0x38
 800d948:	e7df      	b.n	800d90a <__sinit+0xe>
 800d94a:	46c0      	nop			; (mov r8, r8)
 800d94c:	0800d8ad 	.word	0x0800d8ad

0800d950 <__fputwc>:
 800d950:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d952:	b085      	sub	sp, #20
 800d954:	000e      	movs	r6, r1
 800d956:	0015      	movs	r5, r2
 800d958:	9001      	str	r0, [sp, #4]
 800d95a:	f7fe fefd 	bl	800c758 <__locale_mb_cur_max>
 800d95e:	0004      	movs	r4, r0
 800d960:	2801      	cmp	r0, #1
 800d962:	d119      	bne.n	800d998 <__fputwc+0x48>
 800d964:	1e73      	subs	r3, r6, #1
 800d966:	2bfe      	cmp	r3, #254	; 0xfe
 800d968:	d816      	bhi.n	800d998 <__fputwc+0x48>
 800d96a:	ab02      	add	r3, sp, #8
 800d96c:	711e      	strb	r6, [r3, #4]
 800d96e:	2700      	movs	r7, #0
 800d970:	42a7      	cmp	r7, r4
 800d972:	d020      	beq.n	800d9b6 <__fputwc+0x66>
 800d974:	ab03      	add	r3, sp, #12
 800d976:	5dd9      	ldrb	r1, [r3, r7]
 800d978:	68ab      	ldr	r3, [r5, #8]
 800d97a:	3b01      	subs	r3, #1
 800d97c:	60ab      	str	r3, [r5, #8]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	da04      	bge.n	800d98c <__fputwc+0x3c>
 800d982:	69aa      	ldr	r2, [r5, #24]
 800d984:	4293      	cmp	r3, r2
 800d986:	db19      	blt.n	800d9bc <__fputwc+0x6c>
 800d988:	290a      	cmp	r1, #10
 800d98a:	d017      	beq.n	800d9bc <__fputwc+0x6c>
 800d98c:	682b      	ldr	r3, [r5, #0]
 800d98e:	1c5a      	adds	r2, r3, #1
 800d990:	602a      	str	r2, [r5, #0]
 800d992:	7019      	strb	r1, [r3, #0]
 800d994:	3701      	adds	r7, #1
 800d996:	e7eb      	b.n	800d970 <__fputwc+0x20>
 800d998:	002b      	movs	r3, r5
 800d99a:	0032      	movs	r2, r6
 800d99c:	9801      	ldr	r0, [sp, #4]
 800d99e:	335c      	adds	r3, #92	; 0x5c
 800d9a0:	a903      	add	r1, sp, #12
 800d9a2:	f000 fb23 	bl	800dfec <_wcrtomb_r>
 800d9a6:	0004      	movs	r4, r0
 800d9a8:	1c43      	adds	r3, r0, #1
 800d9aa:	d1e0      	bne.n	800d96e <__fputwc+0x1e>
 800d9ac:	2340      	movs	r3, #64	; 0x40
 800d9ae:	0006      	movs	r6, r0
 800d9b0:	89aa      	ldrh	r2, [r5, #12]
 800d9b2:	4313      	orrs	r3, r2
 800d9b4:	81ab      	strh	r3, [r5, #12]
 800d9b6:	0030      	movs	r0, r6
 800d9b8:	b005      	add	sp, #20
 800d9ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9bc:	002a      	movs	r2, r5
 800d9be:	9801      	ldr	r0, [sp, #4]
 800d9c0:	f000 fac2 	bl	800df48 <__swbuf_r>
 800d9c4:	1c43      	adds	r3, r0, #1
 800d9c6:	d1e5      	bne.n	800d994 <__fputwc+0x44>
 800d9c8:	0006      	movs	r6, r0
 800d9ca:	e7f4      	b.n	800d9b6 <__fputwc+0x66>

0800d9cc <_fputwc_r>:
 800d9cc:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800d9ce:	b570      	push	{r4, r5, r6, lr}
 800d9d0:	0005      	movs	r5, r0
 800d9d2:	000e      	movs	r6, r1
 800d9d4:	0014      	movs	r4, r2
 800d9d6:	07db      	lsls	r3, r3, #31
 800d9d8:	d405      	bmi.n	800d9e6 <_fputwc_r+0x1a>
 800d9da:	8993      	ldrh	r3, [r2, #12]
 800d9dc:	059b      	lsls	r3, r3, #22
 800d9de:	d402      	bmi.n	800d9e6 <_fputwc_r+0x1a>
 800d9e0:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800d9e2:	f7fd ffc5 	bl	800b970 <__retarget_lock_acquire_recursive>
 800d9e6:	230c      	movs	r3, #12
 800d9e8:	5ee2      	ldrsh	r2, [r4, r3]
 800d9ea:	2380      	movs	r3, #128	; 0x80
 800d9ec:	019b      	lsls	r3, r3, #6
 800d9ee:	421a      	tst	r2, r3
 800d9f0:	d104      	bne.n	800d9fc <_fputwc_r+0x30>
 800d9f2:	431a      	orrs	r2, r3
 800d9f4:	81a2      	strh	r2, [r4, #12]
 800d9f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d9f8:	4313      	orrs	r3, r2
 800d9fa:	6663      	str	r3, [r4, #100]	; 0x64
 800d9fc:	0028      	movs	r0, r5
 800d9fe:	0022      	movs	r2, r4
 800da00:	0031      	movs	r1, r6
 800da02:	f7ff ffa5 	bl	800d950 <__fputwc>
 800da06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da08:	0005      	movs	r5, r0
 800da0a:	07db      	lsls	r3, r3, #31
 800da0c:	d405      	bmi.n	800da1a <_fputwc_r+0x4e>
 800da0e:	89a3      	ldrh	r3, [r4, #12]
 800da10:	059b      	lsls	r3, r3, #22
 800da12:	d402      	bmi.n	800da1a <_fputwc_r+0x4e>
 800da14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da16:	f7fd ffac 	bl	800b972 <__retarget_lock_release_recursive>
 800da1a:	0028      	movs	r0, r5
 800da1c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800da20 <__sfvwrite_r>:
 800da20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da22:	6893      	ldr	r3, [r2, #8]
 800da24:	b087      	sub	sp, #28
 800da26:	000c      	movs	r4, r1
 800da28:	9002      	str	r0, [sp, #8]
 800da2a:	9203      	str	r2, [sp, #12]
 800da2c:	9300      	str	r3, [sp, #0]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d102      	bne.n	800da38 <__sfvwrite_r+0x18>
 800da32:	2000      	movs	r0, #0
 800da34:	b007      	add	sp, #28
 800da36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da38:	898b      	ldrh	r3, [r1, #12]
 800da3a:	071b      	lsls	r3, r3, #28
 800da3c:	d559      	bpl.n	800daf2 <__sfvwrite_r+0xd2>
 800da3e:	690b      	ldr	r3, [r1, #16]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d056      	beq.n	800daf2 <__sfvwrite_r+0xd2>
 800da44:	9b03      	ldr	r3, [sp, #12]
 800da46:	2202      	movs	r2, #2
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	9301      	str	r3, [sp, #4]
 800da4c:	89a3      	ldrh	r3, [r4, #12]
 800da4e:	001f      	movs	r7, r3
 800da50:	4017      	ands	r7, r2
 800da52:	4213      	tst	r3, r2
 800da54:	d173      	bne.n	800db3e <__sfvwrite_r+0x11e>
 800da56:	2201      	movs	r2, #1
 800da58:	0019      	movs	r1, r3
 800da5a:	4011      	ands	r1, r2
 800da5c:	4213      	tst	r3, r2
 800da5e:	d100      	bne.n	800da62 <__sfvwrite_r+0x42>
 800da60:	e0a8      	b.n	800dbb4 <__sfvwrite_r+0x194>
 800da62:	0038      	movs	r0, r7
 800da64:	003e      	movs	r6, r7
 800da66:	9700      	str	r7, [sp, #0]
 800da68:	9205      	str	r2, [sp, #20]
 800da6a:	9b00      	ldr	r3, [sp, #0]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d100      	bne.n	800da72 <__sfvwrite_r+0x52>
 800da70:	e112      	b.n	800dc98 <__sfvwrite_r+0x278>
 800da72:	2800      	cmp	r0, #0
 800da74:	d10a      	bne.n	800da8c <__sfvwrite_r+0x6c>
 800da76:	001a      	movs	r2, r3
 800da78:	210a      	movs	r1, #10
 800da7a:	0030      	movs	r0, r6
 800da7c:	f7fb fc30 	bl	80092e0 <memchr>
 800da80:	9b00      	ldr	r3, [sp, #0]
 800da82:	1c5f      	adds	r7, r3, #1
 800da84:	2800      	cmp	r0, #0
 800da86:	d001      	beq.n	800da8c <__sfvwrite_r+0x6c>
 800da88:	3001      	adds	r0, #1
 800da8a:	1b87      	subs	r7, r0, r6
 800da8c:	9b00      	ldr	r3, [sp, #0]
 800da8e:	9704      	str	r7, [sp, #16]
 800da90:	429f      	cmp	r7, r3
 800da92:	d900      	bls.n	800da96 <__sfvwrite_r+0x76>
 800da94:	9304      	str	r3, [sp, #16]
 800da96:	6820      	ldr	r0, [r4, #0]
 800da98:	6922      	ldr	r2, [r4, #16]
 800da9a:	6963      	ldr	r3, [r4, #20]
 800da9c:	4290      	cmp	r0, r2
 800da9e:	d800      	bhi.n	800daa2 <__sfvwrite_r+0x82>
 800daa0:	e103      	b.n	800dcaa <__sfvwrite_r+0x28a>
 800daa2:	68a2      	ldr	r2, [r4, #8]
 800daa4:	189d      	adds	r5, r3, r2
 800daa6:	9a04      	ldr	r2, [sp, #16]
 800daa8:	42aa      	cmp	r2, r5
 800daaa:	dc00      	bgt.n	800daae <__sfvwrite_r+0x8e>
 800daac:	e0fd      	b.n	800dcaa <__sfvwrite_r+0x28a>
 800daae:	0031      	movs	r1, r6
 800dab0:	002a      	movs	r2, r5
 800dab2:	f7fe fe6b 	bl	800c78c <memmove>
 800dab6:	6823      	ldr	r3, [r4, #0]
 800dab8:	0021      	movs	r1, r4
 800daba:	195b      	adds	r3, r3, r5
 800dabc:	9802      	ldr	r0, [sp, #8]
 800dabe:	6023      	str	r3, [r4, #0]
 800dac0:	f7ff fea6 	bl	800d810 <_fflush_r>
 800dac4:	2800      	cmp	r0, #0
 800dac6:	d170      	bne.n	800dbaa <__sfvwrite_r+0x18a>
 800dac8:	9805      	ldr	r0, [sp, #20]
 800daca:	1b7f      	subs	r7, r7, r5
 800dacc:	d105      	bne.n	800dada <__sfvwrite_r+0xba>
 800dace:	0021      	movs	r1, r4
 800dad0:	9802      	ldr	r0, [sp, #8]
 800dad2:	f7ff fe9d 	bl	800d810 <_fflush_r>
 800dad6:	2800      	cmp	r0, #0
 800dad8:	d167      	bne.n	800dbaa <__sfvwrite_r+0x18a>
 800dada:	9b00      	ldr	r3, [sp, #0]
 800dadc:	1976      	adds	r6, r6, r5
 800dade:	1b5b      	subs	r3, r3, r5
 800dae0:	9300      	str	r3, [sp, #0]
 800dae2:	9b03      	ldr	r3, [sp, #12]
 800dae4:	689b      	ldr	r3, [r3, #8]
 800dae6:	1b5d      	subs	r5, r3, r5
 800dae8:	9304      	str	r3, [sp, #16]
 800daea:	9b03      	ldr	r3, [sp, #12]
 800daec:	609d      	str	r5, [r3, #8]
 800daee:	d1bc      	bne.n	800da6a <__sfvwrite_r+0x4a>
 800daf0:	e79f      	b.n	800da32 <__sfvwrite_r+0x12>
 800daf2:	0021      	movs	r1, r4
 800daf4:	9802      	ldr	r0, [sp, #8]
 800daf6:	f7ff fd87 	bl	800d608 <__swsetup_r>
 800dafa:	2800      	cmp	r0, #0
 800dafc:	d0a2      	beq.n	800da44 <__sfvwrite_r+0x24>
 800dafe:	2001      	movs	r0, #1
 800db00:	4240      	negs	r0, r0
 800db02:	e797      	b.n	800da34 <__sfvwrite_r+0x14>
 800db04:	9b01      	ldr	r3, [sp, #4]
 800db06:	681e      	ldr	r6, [r3, #0]
 800db08:	685d      	ldr	r5, [r3, #4]
 800db0a:	3308      	adds	r3, #8
 800db0c:	9301      	str	r3, [sp, #4]
 800db0e:	2d00      	cmp	r5, #0
 800db10:	d0f8      	beq.n	800db04 <__sfvwrite_r+0xe4>
 800db12:	4a72      	ldr	r2, [pc, #456]	; (800dcdc <__sfvwrite_r+0x2bc>)
 800db14:	002b      	movs	r3, r5
 800db16:	4295      	cmp	r5, r2
 800db18:	d900      	bls.n	800db1c <__sfvwrite_r+0xfc>
 800db1a:	0013      	movs	r3, r2
 800db1c:	0032      	movs	r2, r6
 800db1e:	69e1      	ldr	r1, [r4, #28]
 800db20:	9802      	ldr	r0, [sp, #8]
 800db22:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800db24:	47b8      	blx	r7
 800db26:	2800      	cmp	r0, #0
 800db28:	dd3f      	ble.n	800dbaa <__sfvwrite_r+0x18a>
 800db2a:	9b03      	ldr	r3, [sp, #12]
 800db2c:	1836      	adds	r6, r6, r0
 800db2e:	689b      	ldr	r3, [r3, #8]
 800db30:	1a2d      	subs	r5, r5, r0
 800db32:	9300      	str	r3, [sp, #0]
 800db34:	1a18      	subs	r0, r3, r0
 800db36:	9b03      	ldr	r3, [sp, #12]
 800db38:	6098      	str	r0, [r3, #8]
 800db3a:	d1e8      	bne.n	800db0e <__sfvwrite_r+0xee>
 800db3c:	e779      	b.n	800da32 <__sfvwrite_r+0x12>
 800db3e:	2600      	movs	r6, #0
 800db40:	0035      	movs	r5, r6
 800db42:	e7e4      	b.n	800db0e <__sfvwrite_r+0xee>
 800db44:	9b01      	ldr	r3, [sp, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	9304      	str	r3, [sp, #16]
 800db4a:	9b01      	ldr	r3, [sp, #4]
 800db4c:	685b      	ldr	r3, [r3, #4]
 800db4e:	9300      	str	r3, [sp, #0]
 800db50:	9b01      	ldr	r3, [sp, #4]
 800db52:	3308      	adds	r3, #8
 800db54:	9301      	str	r3, [sp, #4]
 800db56:	9b00      	ldr	r3, [sp, #0]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d0f3      	beq.n	800db44 <__sfvwrite_r+0x124>
 800db5c:	2380      	movs	r3, #128	; 0x80
 800db5e:	89a2      	ldrh	r2, [r4, #12]
 800db60:	009b      	lsls	r3, r3, #2
 800db62:	68a5      	ldr	r5, [r4, #8]
 800db64:	6820      	ldr	r0, [r4, #0]
 800db66:	421a      	tst	r2, r3
 800db68:	d064      	beq.n	800dc34 <__sfvwrite_r+0x214>
 800db6a:	9b00      	ldr	r3, [sp, #0]
 800db6c:	429d      	cmp	r5, r3
 800db6e:	d835      	bhi.n	800dbdc <__sfvwrite_r+0x1bc>
 800db70:	2390      	movs	r3, #144	; 0x90
 800db72:	00db      	lsls	r3, r3, #3
 800db74:	421a      	tst	r2, r3
 800db76:	d031      	beq.n	800dbdc <__sfvwrite_r+0x1bc>
 800db78:	2603      	movs	r6, #3
 800db7a:	6963      	ldr	r3, [r4, #20]
 800db7c:	6921      	ldr	r1, [r4, #16]
 800db7e:	435e      	muls	r6, r3
 800db80:	1a47      	subs	r7, r0, r1
 800db82:	0ff0      	lsrs	r0, r6, #31
 800db84:	1986      	adds	r6, r0, r6
 800db86:	9800      	ldr	r0, [sp, #0]
 800db88:	1c7b      	adds	r3, r7, #1
 800db8a:	181b      	adds	r3, r3, r0
 800db8c:	1076      	asrs	r6, r6, #1
 800db8e:	42b3      	cmp	r3, r6
 800db90:	d900      	bls.n	800db94 <__sfvwrite_r+0x174>
 800db92:	001e      	movs	r6, r3
 800db94:	0553      	lsls	r3, r2, #21
 800db96:	d53e      	bpl.n	800dc16 <__sfvwrite_r+0x1f6>
 800db98:	0031      	movs	r1, r6
 800db9a:	9802      	ldr	r0, [sp, #8]
 800db9c:	f7fd feea 	bl	800b974 <_malloc_r>
 800dba0:	1e05      	subs	r5, r0, #0
 800dba2:	d10a      	bne.n	800dbba <__sfvwrite_r+0x19a>
 800dba4:	230c      	movs	r3, #12
 800dba6:	9a02      	ldr	r2, [sp, #8]
 800dba8:	6013      	str	r3, [r2, #0]
 800dbaa:	2340      	movs	r3, #64	; 0x40
 800dbac:	89a2      	ldrh	r2, [r4, #12]
 800dbae:	4313      	orrs	r3, r2
 800dbb0:	81a3      	strh	r3, [r4, #12]
 800dbb2:	e7a4      	b.n	800dafe <__sfvwrite_r+0xde>
 800dbb4:	9104      	str	r1, [sp, #16]
 800dbb6:	9100      	str	r1, [sp, #0]
 800dbb8:	e7cd      	b.n	800db56 <__sfvwrite_r+0x136>
 800dbba:	003a      	movs	r2, r7
 800dbbc:	6921      	ldr	r1, [r4, #16]
 800dbbe:	f7fb fba8 	bl	8009312 <memcpy>
 800dbc2:	89a3      	ldrh	r3, [r4, #12]
 800dbc4:	4a46      	ldr	r2, [pc, #280]	; (800dce0 <__sfvwrite_r+0x2c0>)
 800dbc6:	401a      	ands	r2, r3
 800dbc8:	2380      	movs	r3, #128	; 0x80
 800dbca:	4313      	orrs	r3, r2
 800dbcc:	81a3      	strh	r3, [r4, #12]
 800dbce:	6125      	str	r5, [r4, #16]
 800dbd0:	19ed      	adds	r5, r5, r7
 800dbd2:	6025      	str	r5, [r4, #0]
 800dbd4:	6166      	str	r6, [r4, #20]
 800dbd6:	9d00      	ldr	r5, [sp, #0]
 800dbd8:	1bf6      	subs	r6, r6, r7
 800dbda:	60a6      	str	r6, [r4, #8]
 800dbdc:	9f00      	ldr	r7, [sp, #0]
 800dbde:	42bd      	cmp	r5, r7
 800dbe0:	d900      	bls.n	800dbe4 <__sfvwrite_r+0x1c4>
 800dbe2:	003d      	movs	r5, r7
 800dbe4:	002a      	movs	r2, r5
 800dbe6:	9904      	ldr	r1, [sp, #16]
 800dbe8:	6820      	ldr	r0, [r4, #0]
 800dbea:	f7fe fdcf 	bl	800c78c <memmove>
 800dbee:	68a3      	ldr	r3, [r4, #8]
 800dbf0:	1b5b      	subs	r3, r3, r5
 800dbf2:	60a3      	str	r3, [r4, #8]
 800dbf4:	6823      	ldr	r3, [r4, #0]
 800dbf6:	195d      	adds	r5, r3, r5
 800dbf8:	6025      	str	r5, [r4, #0]
 800dbfa:	9b04      	ldr	r3, [sp, #16]
 800dbfc:	19db      	adds	r3, r3, r7
 800dbfe:	9304      	str	r3, [sp, #16]
 800dc00:	9b00      	ldr	r3, [sp, #0]
 800dc02:	1bdb      	subs	r3, r3, r7
 800dc04:	9300      	str	r3, [sp, #0]
 800dc06:	9b03      	ldr	r3, [sp, #12]
 800dc08:	689b      	ldr	r3, [r3, #8]
 800dc0a:	1bdf      	subs	r7, r3, r7
 800dc0c:	9305      	str	r3, [sp, #20]
 800dc0e:	9b03      	ldr	r3, [sp, #12]
 800dc10:	609f      	str	r7, [r3, #8]
 800dc12:	d1a0      	bne.n	800db56 <__sfvwrite_r+0x136>
 800dc14:	e70d      	b.n	800da32 <__sfvwrite_r+0x12>
 800dc16:	0032      	movs	r2, r6
 800dc18:	9802      	ldr	r0, [sp, #8]
 800dc1a:	f7fe fdcb 	bl	800c7b4 <_realloc_r>
 800dc1e:	1e05      	subs	r5, r0, #0
 800dc20:	d1d5      	bne.n	800dbce <__sfvwrite_r+0x1ae>
 800dc22:	6921      	ldr	r1, [r4, #16]
 800dc24:	9802      	ldr	r0, [sp, #8]
 800dc26:	f7fd fdeb 	bl	800b800 <_free_r>
 800dc2a:	2280      	movs	r2, #128	; 0x80
 800dc2c:	89a3      	ldrh	r3, [r4, #12]
 800dc2e:	4393      	bics	r3, r2
 800dc30:	81a3      	strh	r3, [r4, #12]
 800dc32:	e7b7      	b.n	800dba4 <__sfvwrite_r+0x184>
 800dc34:	6923      	ldr	r3, [r4, #16]
 800dc36:	4283      	cmp	r3, r0
 800dc38:	d303      	bcc.n	800dc42 <__sfvwrite_r+0x222>
 800dc3a:	6967      	ldr	r7, [r4, #20]
 800dc3c:	9b00      	ldr	r3, [sp, #0]
 800dc3e:	429f      	cmp	r7, r3
 800dc40:	d917      	bls.n	800dc72 <__sfvwrite_r+0x252>
 800dc42:	9b00      	ldr	r3, [sp, #0]
 800dc44:	429d      	cmp	r5, r3
 800dc46:	d900      	bls.n	800dc4a <__sfvwrite_r+0x22a>
 800dc48:	001d      	movs	r5, r3
 800dc4a:	002a      	movs	r2, r5
 800dc4c:	9904      	ldr	r1, [sp, #16]
 800dc4e:	f7fe fd9d 	bl	800c78c <memmove>
 800dc52:	68a3      	ldr	r3, [r4, #8]
 800dc54:	6822      	ldr	r2, [r4, #0]
 800dc56:	1b5b      	subs	r3, r3, r5
 800dc58:	1952      	adds	r2, r2, r5
 800dc5a:	002f      	movs	r7, r5
 800dc5c:	60a3      	str	r3, [r4, #8]
 800dc5e:	6022      	str	r2, [r4, #0]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d1ca      	bne.n	800dbfa <__sfvwrite_r+0x1da>
 800dc64:	0021      	movs	r1, r4
 800dc66:	9802      	ldr	r0, [sp, #8]
 800dc68:	f7ff fdd2 	bl	800d810 <_fflush_r>
 800dc6c:	2800      	cmp	r0, #0
 800dc6e:	d0c4      	beq.n	800dbfa <__sfvwrite_r+0x1da>
 800dc70:	e79b      	b.n	800dbaa <__sfvwrite_r+0x18a>
 800dc72:	9a00      	ldr	r2, [sp, #0]
 800dc74:	4b1b      	ldr	r3, [pc, #108]	; (800dce4 <__sfvwrite_r+0x2c4>)
 800dc76:	0010      	movs	r0, r2
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	d900      	bls.n	800dc7e <__sfvwrite_r+0x25e>
 800dc7c:	481a      	ldr	r0, [pc, #104]	; (800dce8 <__sfvwrite_r+0x2c8>)
 800dc7e:	0039      	movs	r1, r7
 800dc80:	f7f2 fae8 	bl	8000254 <__divsi3>
 800dc84:	003b      	movs	r3, r7
 800dc86:	9a04      	ldr	r2, [sp, #16]
 800dc88:	4343      	muls	r3, r0
 800dc8a:	69e1      	ldr	r1, [r4, #28]
 800dc8c:	9802      	ldr	r0, [sp, #8]
 800dc8e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800dc90:	47a8      	blx	r5
 800dc92:	1e07      	subs	r7, r0, #0
 800dc94:	dcb1      	bgt.n	800dbfa <__sfvwrite_r+0x1da>
 800dc96:	e788      	b.n	800dbaa <__sfvwrite_r+0x18a>
 800dc98:	9b01      	ldr	r3, [sp, #4]
 800dc9a:	2000      	movs	r0, #0
 800dc9c:	681e      	ldr	r6, [r3, #0]
 800dc9e:	685b      	ldr	r3, [r3, #4]
 800dca0:	9300      	str	r3, [sp, #0]
 800dca2:	9b01      	ldr	r3, [sp, #4]
 800dca4:	3308      	adds	r3, #8
 800dca6:	9301      	str	r3, [sp, #4]
 800dca8:	e6df      	b.n	800da6a <__sfvwrite_r+0x4a>
 800dcaa:	9a04      	ldr	r2, [sp, #16]
 800dcac:	4293      	cmp	r3, r2
 800dcae:	dc08      	bgt.n	800dcc2 <__sfvwrite_r+0x2a2>
 800dcb0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800dcb2:	0032      	movs	r2, r6
 800dcb4:	69e1      	ldr	r1, [r4, #28]
 800dcb6:	9802      	ldr	r0, [sp, #8]
 800dcb8:	47a8      	blx	r5
 800dcba:	1e05      	subs	r5, r0, #0
 800dcbc:	dd00      	ble.n	800dcc0 <__sfvwrite_r+0x2a0>
 800dcbe:	e703      	b.n	800dac8 <__sfvwrite_r+0xa8>
 800dcc0:	e773      	b.n	800dbaa <__sfvwrite_r+0x18a>
 800dcc2:	9a04      	ldr	r2, [sp, #16]
 800dcc4:	0031      	movs	r1, r6
 800dcc6:	f7fe fd61 	bl	800c78c <memmove>
 800dcca:	9a04      	ldr	r2, [sp, #16]
 800dccc:	68a3      	ldr	r3, [r4, #8]
 800dcce:	0015      	movs	r5, r2
 800dcd0:	1a9b      	subs	r3, r3, r2
 800dcd2:	60a3      	str	r3, [r4, #8]
 800dcd4:	6823      	ldr	r3, [r4, #0]
 800dcd6:	189b      	adds	r3, r3, r2
 800dcd8:	6023      	str	r3, [r4, #0]
 800dcda:	e6f5      	b.n	800dac8 <__sfvwrite_r+0xa8>
 800dcdc:	7ffffc00 	.word	0x7ffffc00
 800dce0:	fffffb7f 	.word	0xfffffb7f
 800dce4:	7ffffffe 	.word	0x7ffffffe
 800dce8:	7fffffff 	.word	0x7fffffff

0800dcec <_fwalk_reent>:
 800dcec:	23b8      	movs	r3, #184	; 0xb8
 800dcee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dcf0:	0006      	movs	r6, r0
 800dcf2:	2700      	movs	r7, #0
 800dcf4:	009b      	lsls	r3, r3, #2
 800dcf6:	9101      	str	r1, [sp, #4]
 800dcf8:	18c4      	adds	r4, r0, r3
 800dcfa:	6863      	ldr	r3, [r4, #4]
 800dcfc:	68a5      	ldr	r5, [r4, #8]
 800dcfe:	9300      	str	r3, [sp, #0]
 800dd00:	9b00      	ldr	r3, [sp, #0]
 800dd02:	3b01      	subs	r3, #1
 800dd04:	9300      	str	r3, [sp, #0]
 800dd06:	d504      	bpl.n	800dd12 <_fwalk_reent+0x26>
 800dd08:	6824      	ldr	r4, [r4, #0]
 800dd0a:	2c00      	cmp	r4, #0
 800dd0c:	d1f5      	bne.n	800dcfa <_fwalk_reent+0xe>
 800dd0e:	0038      	movs	r0, r7
 800dd10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dd12:	89ab      	ldrh	r3, [r5, #12]
 800dd14:	2b01      	cmp	r3, #1
 800dd16:	d908      	bls.n	800dd2a <_fwalk_reent+0x3e>
 800dd18:	220e      	movs	r2, #14
 800dd1a:	5eab      	ldrsh	r3, [r5, r2]
 800dd1c:	3301      	adds	r3, #1
 800dd1e:	d004      	beq.n	800dd2a <_fwalk_reent+0x3e>
 800dd20:	0029      	movs	r1, r5
 800dd22:	0030      	movs	r0, r6
 800dd24:	9b01      	ldr	r3, [sp, #4]
 800dd26:	4798      	blx	r3
 800dd28:	4307      	orrs	r7, r0
 800dd2a:	3568      	adds	r5, #104	; 0x68
 800dd2c:	e7e8      	b.n	800dd00 <_fwalk_reent+0x14>
	...

0800dd30 <__swhatbuf_r>:
 800dd30:	b570      	push	{r4, r5, r6, lr}
 800dd32:	000e      	movs	r6, r1
 800dd34:	001d      	movs	r5, r3
 800dd36:	230e      	movs	r3, #14
 800dd38:	5ec9      	ldrsh	r1, [r1, r3]
 800dd3a:	0014      	movs	r4, r2
 800dd3c:	b096      	sub	sp, #88	; 0x58
 800dd3e:	2900      	cmp	r1, #0
 800dd40:	da0b      	bge.n	800dd5a <__swhatbuf_r+0x2a>
 800dd42:	2300      	movs	r3, #0
 800dd44:	602b      	str	r3, [r5, #0]
 800dd46:	89b1      	ldrh	r1, [r6, #12]
 800dd48:	2280      	movs	r2, #128	; 0x80
 800dd4a:	0008      	movs	r0, r1
 800dd4c:	4010      	ands	r0, r2
 800dd4e:	4211      	tst	r1, r2
 800dd50:	d117      	bne.n	800dd82 <__swhatbuf_r+0x52>
 800dd52:	2380      	movs	r3, #128	; 0x80
 800dd54:	00db      	lsls	r3, r3, #3
 800dd56:	6023      	str	r3, [r4, #0]
 800dd58:	e016      	b.n	800dd88 <__swhatbuf_r+0x58>
 800dd5a:	466a      	mov	r2, sp
 800dd5c:	f000 f9e4 	bl	800e128 <_fstat_r>
 800dd60:	2800      	cmp	r0, #0
 800dd62:	dbee      	blt.n	800dd42 <__swhatbuf_r+0x12>
 800dd64:	23f0      	movs	r3, #240	; 0xf0
 800dd66:	9901      	ldr	r1, [sp, #4]
 800dd68:	021b      	lsls	r3, r3, #8
 800dd6a:	4019      	ands	r1, r3
 800dd6c:	4b07      	ldr	r3, [pc, #28]	; (800dd8c <__swhatbuf_r+0x5c>)
 800dd6e:	2080      	movs	r0, #128	; 0x80
 800dd70:	18c9      	adds	r1, r1, r3
 800dd72:	424b      	negs	r3, r1
 800dd74:	4159      	adcs	r1, r3
 800dd76:	2380      	movs	r3, #128	; 0x80
 800dd78:	00db      	lsls	r3, r3, #3
 800dd7a:	6029      	str	r1, [r5, #0]
 800dd7c:	0100      	lsls	r0, r0, #4
 800dd7e:	6023      	str	r3, [r4, #0]
 800dd80:	e002      	b.n	800dd88 <__swhatbuf_r+0x58>
 800dd82:	2240      	movs	r2, #64	; 0x40
 800dd84:	0018      	movs	r0, r3
 800dd86:	6022      	str	r2, [r4, #0]
 800dd88:	b016      	add	sp, #88	; 0x58
 800dd8a:	bd70      	pop	{r4, r5, r6, pc}
 800dd8c:	ffffe000 	.word	0xffffe000

0800dd90 <__smakebuf_r>:
 800dd90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd92:	2602      	movs	r6, #2
 800dd94:	898b      	ldrh	r3, [r1, #12]
 800dd96:	0005      	movs	r5, r0
 800dd98:	000c      	movs	r4, r1
 800dd9a:	4233      	tst	r3, r6
 800dd9c:	d006      	beq.n	800ddac <__smakebuf_r+0x1c>
 800dd9e:	0023      	movs	r3, r4
 800dda0:	3343      	adds	r3, #67	; 0x43
 800dda2:	6023      	str	r3, [r4, #0]
 800dda4:	6123      	str	r3, [r4, #16]
 800dda6:	2301      	movs	r3, #1
 800dda8:	6163      	str	r3, [r4, #20]
 800ddaa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ddac:	466a      	mov	r2, sp
 800ddae:	ab01      	add	r3, sp, #4
 800ddb0:	f7ff ffbe 	bl	800dd30 <__swhatbuf_r>
 800ddb4:	9900      	ldr	r1, [sp, #0]
 800ddb6:	0007      	movs	r7, r0
 800ddb8:	0028      	movs	r0, r5
 800ddba:	f7fd fddb 	bl	800b974 <_malloc_r>
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	d108      	bne.n	800ddd4 <__smakebuf_r+0x44>
 800ddc2:	220c      	movs	r2, #12
 800ddc4:	5ea3      	ldrsh	r3, [r4, r2]
 800ddc6:	059a      	lsls	r2, r3, #22
 800ddc8:	d4ef      	bmi.n	800ddaa <__smakebuf_r+0x1a>
 800ddca:	2203      	movs	r2, #3
 800ddcc:	4393      	bics	r3, r2
 800ddce:	431e      	orrs	r6, r3
 800ddd0:	81a6      	strh	r6, [r4, #12]
 800ddd2:	e7e4      	b.n	800dd9e <__smakebuf_r+0xe>
 800ddd4:	4b0f      	ldr	r3, [pc, #60]	; (800de14 <__smakebuf_r+0x84>)
 800ddd6:	63eb      	str	r3, [r5, #60]	; 0x3c
 800ddd8:	2380      	movs	r3, #128	; 0x80
 800ddda:	89a2      	ldrh	r2, [r4, #12]
 800dddc:	6020      	str	r0, [r4, #0]
 800ddde:	4313      	orrs	r3, r2
 800dde0:	81a3      	strh	r3, [r4, #12]
 800dde2:	9b00      	ldr	r3, [sp, #0]
 800dde4:	6120      	str	r0, [r4, #16]
 800dde6:	6163      	str	r3, [r4, #20]
 800dde8:	9b01      	ldr	r3, [sp, #4]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d00d      	beq.n	800de0a <__smakebuf_r+0x7a>
 800ddee:	0028      	movs	r0, r5
 800ddf0:	230e      	movs	r3, #14
 800ddf2:	5ee1      	ldrsh	r1, [r4, r3]
 800ddf4:	f000 f9aa 	bl	800e14c <_isatty_r>
 800ddf8:	2800      	cmp	r0, #0
 800ddfa:	d006      	beq.n	800de0a <__smakebuf_r+0x7a>
 800ddfc:	2203      	movs	r2, #3
 800ddfe:	89a3      	ldrh	r3, [r4, #12]
 800de00:	4393      	bics	r3, r2
 800de02:	001a      	movs	r2, r3
 800de04:	2301      	movs	r3, #1
 800de06:	4313      	orrs	r3, r2
 800de08:	81a3      	strh	r3, [r4, #12]
 800de0a:	89a0      	ldrh	r0, [r4, #12]
 800de0c:	4307      	orrs	r7, r0
 800de0e:	81a7      	strh	r7, [r4, #12]
 800de10:	e7cb      	b.n	800ddaa <__smakebuf_r+0x1a>
 800de12:	46c0      	nop			; (mov r8, r8)
 800de14:	0800d8ad 	.word	0x0800d8ad

0800de18 <_raise_r>:
 800de18:	b570      	push	{r4, r5, r6, lr}
 800de1a:	0004      	movs	r4, r0
 800de1c:	000d      	movs	r5, r1
 800de1e:	291f      	cmp	r1, #31
 800de20:	d904      	bls.n	800de2c <_raise_r+0x14>
 800de22:	2316      	movs	r3, #22
 800de24:	6003      	str	r3, [r0, #0]
 800de26:	2001      	movs	r0, #1
 800de28:	4240      	negs	r0, r0
 800de2a:	bd70      	pop	{r4, r5, r6, pc}
 800de2c:	23b7      	movs	r3, #183	; 0xb7
 800de2e:	009b      	lsls	r3, r3, #2
 800de30:	58c3      	ldr	r3, [r0, r3]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d004      	beq.n	800de40 <_raise_r+0x28>
 800de36:	008a      	lsls	r2, r1, #2
 800de38:	189b      	adds	r3, r3, r2
 800de3a:	681a      	ldr	r2, [r3, #0]
 800de3c:	2a00      	cmp	r2, #0
 800de3e:	d108      	bne.n	800de52 <_raise_r+0x3a>
 800de40:	0020      	movs	r0, r4
 800de42:	f000 f831 	bl	800dea8 <_getpid_r>
 800de46:	002a      	movs	r2, r5
 800de48:	0001      	movs	r1, r0
 800de4a:	0020      	movs	r0, r4
 800de4c:	f000 f81a 	bl	800de84 <_kill_r>
 800de50:	e7eb      	b.n	800de2a <_raise_r+0x12>
 800de52:	2000      	movs	r0, #0
 800de54:	2a01      	cmp	r2, #1
 800de56:	d0e8      	beq.n	800de2a <_raise_r+0x12>
 800de58:	1c51      	adds	r1, r2, #1
 800de5a:	d103      	bne.n	800de64 <_raise_r+0x4c>
 800de5c:	2316      	movs	r3, #22
 800de5e:	3001      	adds	r0, #1
 800de60:	6023      	str	r3, [r4, #0]
 800de62:	e7e2      	b.n	800de2a <_raise_r+0x12>
 800de64:	2400      	movs	r4, #0
 800de66:	0028      	movs	r0, r5
 800de68:	601c      	str	r4, [r3, #0]
 800de6a:	4790      	blx	r2
 800de6c:	0020      	movs	r0, r4
 800de6e:	e7dc      	b.n	800de2a <_raise_r+0x12>

0800de70 <raise>:
 800de70:	b510      	push	{r4, lr}
 800de72:	4b03      	ldr	r3, [pc, #12]	; (800de80 <raise+0x10>)
 800de74:	0001      	movs	r1, r0
 800de76:	6818      	ldr	r0, [r3, #0]
 800de78:	f7ff ffce 	bl	800de18 <_raise_r>
 800de7c:	bd10      	pop	{r4, pc}
 800de7e:	46c0      	nop			; (mov r8, r8)
 800de80:	20000010 	.word	0x20000010

0800de84 <_kill_r>:
 800de84:	2300      	movs	r3, #0
 800de86:	b570      	push	{r4, r5, r6, lr}
 800de88:	4d06      	ldr	r5, [pc, #24]	; (800dea4 <_kill_r+0x20>)
 800de8a:	0004      	movs	r4, r0
 800de8c:	0008      	movs	r0, r1
 800de8e:	0011      	movs	r1, r2
 800de90:	602b      	str	r3, [r5, #0]
 800de92:	f7fb f949 	bl	8009128 <_kill>
 800de96:	1c43      	adds	r3, r0, #1
 800de98:	d103      	bne.n	800dea2 <_kill_r+0x1e>
 800de9a:	682b      	ldr	r3, [r5, #0]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d000      	beq.n	800dea2 <_kill_r+0x1e>
 800dea0:	6023      	str	r3, [r4, #0]
 800dea2:	bd70      	pop	{r4, r5, r6, pc}
 800dea4:	20003b78 	.word	0x20003b78

0800dea8 <_getpid_r>:
 800dea8:	b510      	push	{r4, lr}
 800deaa:	f7fb f93b 	bl	8009124 <_getpid>
 800deae:	bd10      	pop	{r4, pc}

0800deb0 <__sread>:
 800deb0:	b570      	push	{r4, r5, r6, lr}
 800deb2:	000c      	movs	r4, r1
 800deb4:	250e      	movs	r5, #14
 800deb6:	5f49      	ldrsh	r1, [r1, r5]
 800deb8:	f000 f96e 	bl	800e198 <_read_r>
 800debc:	2800      	cmp	r0, #0
 800debe:	db03      	blt.n	800dec8 <__sread+0x18>
 800dec0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800dec2:	181b      	adds	r3, r3, r0
 800dec4:	6523      	str	r3, [r4, #80]	; 0x50
 800dec6:	bd70      	pop	{r4, r5, r6, pc}
 800dec8:	89a3      	ldrh	r3, [r4, #12]
 800deca:	4a02      	ldr	r2, [pc, #8]	; (800ded4 <__sread+0x24>)
 800decc:	4013      	ands	r3, r2
 800dece:	81a3      	strh	r3, [r4, #12]
 800ded0:	e7f9      	b.n	800dec6 <__sread+0x16>
 800ded2:	46c0      	nop			; (mov r8, r8)
 800ded4:	ffffefff 	.word	0xffffefff

0800ded8 <__swrite>:
 800ded8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deda:	001f      	movs	r7, r3
 800dedc:	898b      	ldrh	r3, [r1, #12]
 800dede:	0005      	movs	r5, r0
 800dee0:	000c      	movs	r4, r1
 800dee2:	0016      	movs	r6, r2
 800dee4:	05db      	lsls	r3, r3, #23
 800dee6:	d505      	bpl.n	800def4 <__swrite+0x1c>
 800dee8:	230e      	movs	r3, #14
 800deea:	5ec9      	ldrsh	r1, [r1, r3]
 800deec:	2200      	movs	r2, #0
 800deee:	2302      	movs	r3, #2
 800def0:	f000 f93e 	bl	800e170 <_lseek_r>
 800def4:	89a3      	ldrh	r3, [r4, #12]
 800def6:	4a05      	ldr	r2, [pc, #20]	; (800df0c <__swrite+0x34>)
 800def8:	0028      	movs	r0, r5
 800defa:	4013      	ands	r3, r2
 800defc:	81a3      	strh	r3, [r4, #12]
 800defe:	0032      	movs	r2, r6
 800df00:	230e      	movs	r3, #14
 800df02:	5ee1      	ldrsh	r1, [r4, r3]
 800df04:	003b      	movs	r3, r7
 800df06:	f000 f889 	bl	800e01c <_write_r>
 800df0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df0c:	ffffefff 	.word	0xffffefff

0800df10 <__sseek>:
 800df10:	b570      	push	{r4, r5, r6, lr}
 800df12:	000c      	movs	r4, r1
 800df14:	250e      	movs	r5, #14
 800df16:	5f49      	ldrsh	r1, [r1, r5]
 800df18:	f000 f92a 	bl	800e170 <_lseek_r>
 800df1c:	89a3      	ldrh	r3, [r4, #12]
 800df1e:	1c42      	adds	r2, r0, #1
 800df20:	d103      	bne.n	800df2a <__sseek+0x1a>
 800df22:	4a05      	ldr	r2, [pc, #20]	; (800df38 <__sseek+0x28>)
 800df24:	4013      	ands	r3, r2
 800df26:	81a3      	strh	r3, [r4, #12]
 800df28:	bd70      	pop	{r4, r5, r6, pc}
 800df2a:	2280      	movs	r2, #128	; 0x80
 800df2c:	0152      	lsls	r2, r2, #5
 800df2e:	4313      	orrs	r3, r2
 800df30:	81a3      	strh	r3, [r4, #12]
 800df32:	6520      	str	r0, [r4, #80]	; 0x50
 800df34:	e7f8      	b.n	800df28 <__sseek+0x18>
 800df36:	46c0      	nop			; (mov r8, r8)
 800df38:	ffffefff 	.word	0xffffefff

0800df3c <__sclose>:
 800df3c:	b510      	push	{r4, lr}
 800df3e:	230e      	movs	r3, #14
 800df40:	5ec9      	ldrsh	r1, [r1, r3]
 800df42:	f000 f87f 	bl	800e044 <_close_r>
 800df46:	bd10      	pop	{r4, pc}

0800df48 <__swbuf_r>:
 800df48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df4a:	0006      	movs	r6, r0
 800df4c:	000d      	movs	r5, r1
 800df4e:	0014      	movs	r4, r2
 800df50:	2800      	cmp	r0, #0
 800df52:	d004      	beq.n	800df5e <__swbuf_r+0x16>
 800df54:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800df56:	2b00      	cmp	r3, #0
 800df58:	d101      	bne.n	800df5e <__swbuf_r+0x16>
 800df5a:	f7ff fccf 	bl	800d8fc <__sinit>
 800df5e:	69a3      	ldr	r3, [r4, #24]
 800df60:	60a3      	str	r3, [r4, #8]
 800df62:	89a3      	ldrh	r3, [r4, #12]
 800df64:	071b      	lsls	r3, r3, #28
 800df66:	d52e      	bpl.n	800dfc6 <__swbuf_r+0x7e>
 800df68:	6923      	ldr	r3, [r4, #16]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d02b      	beq.n	800dfc6 <__swbuf_r+0x7e>
 800df6e:	230c      	movs	r3, #12
 800df70:	5ee2      	ldrsh	r2, [r4, r3]
 800df72:	2380      	movs	r3, #128	; 0x80
 800df74:	019b      	lsls	r3, r3, #6
 800df76:	b2ef      	uxtb	r7, r5
 800df78:	b2ed      	uxtb	r5, r5
 800df7a:	421a      	tst	r2, r3
 800df7c:	d02c      	beq.n	800dfd8 <__swbuf_r+0x90>
 800df7e:	6823      	ldr	r3, [r4, #0]
 800df80:	6922      	ldr	r2, [r4, #16]
 800df82:	1a98      	subs	r0, r3, r2
 800df84:	6963      	ldr	r3, [r4, #20]
 800df86:	4283      	cmp	r3, r0
 800df88:	dc05      	bgt.n	800df96 <__swbuf_r+0x4e>
 800df8a:	0021      	movs	r1, r4
 800df8c:	0030      	movs	r0, r6
 800df8e:	f7ff fc3f 	bl	800d810 <_fflush_r>
 800df92:	2800      	cmp	r0, #0
 800df94:	d11d      	bne.n	800dfd2 <__swbuf_r+0x8a>
 800df96:	68a3      	ldr	r3, [r4, #8]
 800df98:	3001      	adds	r0, #1
 800df9a:	3b01      	subs	r3, #1
 800df9c:	60a3      	str	r3, [r4, #8]
 800df9e:	6823      	ldr	r3, [r4, #0]
 800dfa0:	1c5a      	adds	r2, r3, #1
 800dfa2:	6022      	str	r2, [r4, #0]
 800dfa4:	701f      	strb	r7, [r3, #0]
 800dfa6:	6963      	ldr	r3, [r4, #20]
 800dfa8:	4283      	cmp	r3, r0
 800dfaa:	d004      	beq.n	800dfb6 <__swbuf_r+0x6e>
 800dfac:	89a3      	ldrh	r3, [r4, #12]
 800dfae:	07db      	lsls	r3, r3, #31
 800dfb0:	d507      	bpl.n	800dfc2 <__swbuf_r+0x7a>
 800dfb2:	2d0a      	cmp	r5, #10
 800dfb4:	d105      	bne.n	800dfc2 <__swbuf_r+0x7a>
 800dfb6:	0021      	movs	r1, r4
 800dfb8:	0030      	movs	r0, r6
 800dfba:	f7ff fc29 	bl	800d810 <_fflush_r>
 800dfbe:	2800      	cmp	r0, #0
 800dfc0:	d107      	bne.n	800dfd2 <__swbuf_r+0x8a>
 800dfc2:	0028      	movs	r0, r5
 800dfc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfc6:	0021      	movs	r1, r4
 800dfc8:	0030      	movs	r0, r6
 800dfca:	f7ff fb1d 	bl	800d608 <__swsetup_r>
 800dfce:	2800      	cmp	r0, #0
 800dfd0:	d0cd      	beq.n	800df6e <__swbuf_r+0x26>
 800dfd2:	2501      	movs	r5, #1
 800dfd4:	426d      	negs	r5, r5
 800dfd6:	e7f4      	b.n	800dfc2 <__swbuf_r+0x7a>
 800dfd8:	4313      	orrs	r3, r2
 800dfda:	81a3      	strh	r3, [r4, #12]
 800dfdc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dfde:	4b02      	ldr	r3, [pc, #8]	; (800dfe8 <__swbuf_r+0xa0>)
 800dfe0:	4013      	ands	r3, r2
 800dfe2:	6663      	str	r3, [r4, #100]	; 0x64
 800dfe4:	e7cb      	b.n	800df7e <__swbuf_r+0x36>
 800dfe6:	46c0      	nop			; (mov r8, r8)
 800dfe8:	ffffdfff 	.word	0xffffdfff

0800dfec <_wcrtomb_r>:
 800dfec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dfee:	001d      	movs	r5, r3
 800dff0:	4b09      	ldr	r3, [pc, #36]	; (800e018 <_wcrtomb_r+0x2c>)
 800dff2:	0004      	movs	r4, r0
 800dff4:	33e0      	adds	r3, #224	; 0xe0
 800dff6:	681e      	ldr	r6, [r3, #0]
 800dff8:	002b      	movs	r3, r5
 800dffa:	2900      	cmp	r1, #0
 800dffc:	d101      	bne.n	800e002 <_wcrtomb_r+0x16>
 800dffe:	000a      	movs	r2, r1
 800e000:	a901      	add	r1, sp, #4
 800e002:	0020      	movs	r0, r4
 800e004:	47b0      	blx	r6
 800e006:	1c43      	adds	r3, r0, #1
 800e008:	d103      	bne.n	800e012 <_wcrtomb_r+0x26>
 800e00a:	2300      	movs	r3, #0
 800e00c:	602b      	str	r3, [r5, #0]
 800e00e:	338a      	adds	r3, #138	; 0x8a
 800e010:	6023      	str	r3, [r4, #0]
 800e012:	b004      	add	sp, #16
 800e014:	bd70      	pop	{r4, r5, r6, pc}
 800e016:	46c0      	nop			; (mov r8, r8)
 800e018:	20000854 	.word	0x20000854

0800e01c <_write_r>:
 800e01c:	b570      	push	{r4, r5, r6, lr}
 800e01e:	0004      	movs	r4, r0
 800e020:	0008      	movs	r0, r1
 800e022:	0011      	movs	r1, r2
 800e024:	001a      	movs	r2, r3
 800e026:	2300      	movs	r3, #0
 800e028:	4d05      	ldr	r5, [pc, #20]	; (800e040 <_write_r+0x24>)
 800e02a:	602b      	str	r3, [r5, #0]
 800e02c:	f7fb f898 	bl	8009160 <_write>
 800e030:	1c43      	adds	r3, r0, #1
 800e032:	d103      	bne.n	800e03c <_write_r+0x20>
 800e034:	682b      	ldr	r3, [r5, #0]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d000      	beq.n	800e03c <_write_r+0x20>
 800e03a:	6023      	str	r3, [r4, #0]
 800e03c:	bd70      	pop	{r4, r5, r6, pc}
 800e03e:	46c0      	nop			; (mov r8, r8)
 800e040:	20003b78 	.word	0x20003b78

0800e044 <_close_r>:
 800e044:	2300      	movs	r3, #0
 800e046:	b570      	push	{r4, r5, r6, lr}
 800e048:	4d06      	ldr	r5, [pc, #24]	; (800e064 <_close_r+0x20>)
 800e04a:	0004      	movs	r4, r0
 800e04c:	0008      	movs	r0, r1
 800e04e:	602b      	str	r3, [r5, #0]
 800e050:	f7fb f894 	bl	800917c <_close>
 800e054:	1c43      	adds	r3, r0, #1
 800e056:	d103      	bne.n	800e060 <_close_r+0x1c>
 800e058:	682b      	ldr	r3, [r5, #0]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d000      	beq.n	800e060 <_close_r+0x1c>
 800e05e:	6023      	str	r3, [r4, #0]
 800e060:	bd70      	pop	{r4, r5, r6, pc}
 800e062:	46c0      	nop			; (mov r8, r8)
 800e064:	20003b78 	.word	0x20003b78

0800e068 <_fclose_r>:
 800e068:	b570      	push	{r4, r5, r6, lr}
 800e06a:	0005      	movs	r5, r0
 800e06c:	1e0c      	subs	r4, r1, #0
 800e06e:	d102      	bne.n	800e076 <_fclose_r+0xe>
 800e070:	2600      	movs	r6, #0
 800e072:	0030      	movs	r0, r6
 800e074:	bd70      	pop	{r4, r5, r6, pc}
 800e076:	2800      	cmp	r0, #0
 800e078:	d004      	beq.n	800e084 <_fclose_r+0x1c>
 800e07a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d101      	bne.n	800e084 <_fclose_r+0x1c>
 800e080:	f7ff fc3c 	bl	800d8fc <__sinit>
 800e084:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e086:	07db      	lsls	r3, r3, #31
 800e088:	d405      	bmi.n	800e096 <_fclose_r+0x2e>
 800e08a:	89a3      	ldrh	r3, [r4, #12]
 800e08c:	059b      	lsls	r3, r3, #22
 800e08e:	d402      	bmi.n	800e096 <_fclose_r+0x2e>
 800e090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e092:	f7fd fc6d 	bl	800b970 <__retarget_lock_acquire_recursive>
 800e096:	220c      	movs	r2, #12
 800e098:	5ea3      	ldrsh	r3, [r4, r2]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d109      	bne.n	800e0b2 <_fclose_r+0x4a>
 800e09e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e0a0:	3301      	adds	r3, #1
 800e0a2:	0016      	movs	r6, r2
 800e0a4:	401e      	ands	r6, r3
 800e0a6:	421a      	tst	r2, r3
 800e0a8:	d1e2      	bne.n	800e070 <_fclose_r+0x8>
 800e0aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0ac:	f7fd fc61 	bl	800b972 <__retarget_lock_release_recursive>
 800e0b0:	e7df      	b.n	800e072 <_fclose_r+0xa>
 800e0b2:	0021      	movs	r1, r4
 800e0b4:	0028      	movs	r0, r5
 800e0b6:	f7ff fb13 	bl	800d6e0 <__sflush_r>
 800e0ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e0bc:	0006      	movs	r6, r0
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d006      	beq.n	800e0d0 <_fclose_r+0x68>
 800e0c2:	0028      	movs	r0, r5
 800e0c4:	69e1      	ldr	r1, [r4, #28]
 800e0c6:	4798      	blx	r3
 800e0c8:	2800      	cmp	r0, #0
 800e0ca:	da01      	bge.n	800e0d0 <_fclose_r+0x68>
 800e0cc:	2601      	movs	r6, #1
 800e0ce:	4276      	negs	r6, r6
 800e0d0:	89a3      	ldrh	r3, [r4, #12]
 800e0d2:	061b      	lsls	r3, r3, #24
 800e0d4:	d503      	bpl.n	800e0de <_fclose_r+0x76>
 800e0d6:	0028      	movs	r0, r5
 800e0d8:	6921      	ldr	r1, [r4, #16]
 800e0da:	f7fd fb91 	bl	800b800 <_free_r>
 800e0de:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e0e0:	2900      	cmp	r1, #0
 800e0e2:	d008      	beq.n	800e0f6 <_fclose_r+0x8e>
 800e0e4:	0023      	movs	r3, r4
 800e0e6:	3340      	adds	r3, #64	; 0x40
 800e0e8:	4299      	cmp	r1, r3
 800e0ea:	d002      	beq.n	800e0f2 <_fclose_r+0x8a>
 800e0ec:	0028      	movs	r0, r5
 800e0ee:	f7fd fb87 	bl	800b800 <_free_r>
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	6323      	str	r3, [r4, #48]	; 0x30
 800e0f6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e0f8:	2900      	cmp	r1, #0
 800e0fa:	d004      	beq.n	800e106 <_fclose_r+0x9e>
 800e0fc:	0028      	movs	r0, r5
 800e0fe:	f7fd fb7f 	bl	800b800 <_free_r>
 800e102:	2300      	movs	r3, #0
 800e104:	6463      	str	r3, [r4, #68]	; 0x44
 800e106:	f7ff fbd9 	bl	800d8bc <__sfp_lock_acquire>
 800e10a:	2300      	movs	r3, #0
 800e10c:	81a3      	strh	r3, [r4, #12]
 800e10e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e110:	07db      	lsls	r3, r3, #31
 800e112:	d402      	bmi.n	800e11a <_fclose_r+0xb2>
 800e114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e116:	f7fd fc2c 	bl	800b972 <__retarget_lock_release_recursive>
 800e11a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e11c:	f7fd fc27 	bl	800b96e <__retarget_lock_close_recursive>
 800e120:	f7ff fbd4 	bl	800d8cc <__sfp_lock_release>
 800e124:	e7a5      	b.n	800e072 <_fclose_r+0xa>
	...

0800e128 <_fstat_r>:
 800e128:	2300      	movs	r3, #0
 800e12a:	b570      	push	{r4, r5, r6, lr}
 800e12c:	4d06      	ldr	r5, [pc, #24]	; (800e148 <_fstat_r+0x20>)
 800e12e:	0004      	movs	r4, r0
 800e130:	0008      	movs	r0, r1
 800e132:	0011      	movs	r1, r2
 800e134:	602b      	str	r3, [r5, #0]
 800e136:	f7fb f824 	bl	8009182 <_fstat>
 800e13a:	1c43      	adds	r3, r0, #1
 800e13c:	d103      	bne.n	800e146 <_fstat_r+0x1e>
 800e13e:	682b      	ldr	r3, [r5, #0]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d000      	beq.n	800e146 <_fstat_r+0x1e>
 800e144:	6023      	str	r3, [r4, #0]
 800e146:	bd70      	pop	{r4, r5, r6, pc}
 800e148:	20003b78 	.word	0x20003b78

0800e14c <_isatty_r>:
 800e14c:	2300      	movs	r3, #0
 800e14e:	b570      	push	{r4, r5, r6, lr}
 800e150:	4d06      	ldr	r5, [pc, #24]	; (800e16c <_isatty_r+0x20>)
 800e152:	0004      	movs	r4, r0
 800e154:	0008      	movs	r0, r1
 800e156:	602b      	str	r3, [r5, #0]
 800e158:	f7fb f818 	bl	800918c <_isatty>
 800e15c:	1c43      	adds	r3, r0, #1
 800e15e:	d103      	bne.n	800e168 <_isatty_r+0x1c>
 800e160:	682b      	ldr	r3, [r5, #0]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d000      	beq.n	800e168 <_isatty_r+0x1c>
 800e166:	6023      	str	r3, [r4, #0]
 800e168:	bd70      	pop	{r4, r5, r6, pc}
 800e16a:	46c0      	nop			; (mov r8, r8)
 800e16c:	20003b78 	.word	0x20003b78

0800e170 <_lseek_r>:
 800e170:	b570      	push	{r4, r5, r6, lr}
 800e172:	0004      	movs	r4, r0
 800e174:	0008      	movs	r0, r1
 800e176:	0011      	movs	r1, r2
 800e178:	001a      	movs	r2, r3
 800e17a:	2300      	movs	r3, #0
 800e17c:	4d05      	ldr	r5, [pc, #20]	; (800e194 <_lseek_r+0x24>)
 800e17e:	602b      	str	r3, [r5, #0]
 800e180:	f7fb f806 	bl	8009190 <_lseek>
 800e184:	1c43      	adds	r3, r0, #1
 800e186:	d103      	bne.n	800e190 <_lseek_r+0x20>
 800e188:	682b      	ldr	r3, [r5, #0]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d000      	beq.n	800e190 <_lseek_r+0x20>
 800e18e:	6023      	str	r3, [r4, #0]
 800e190:	bd70      	pop	{r4, r5, r6, pc}
 800e192:	46c0      	nop			; (mov r8, r8)
 800e194:	20003b78 	.word	0x20003b78

0800e198 <_read_r>:
 800e198:	b570      	push	{r4, r5, r6, lr}
 800e19a:	0004      	movs	r4, r0
 800e19c:	0008      	movs	r0, r1
 800e19e:	0011      	movs	r1, r2
 800e1a0:	001a      	movs	r2, r3
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	4d05      	ldr	r5, [pc, #20]	; (800e1bc <_read_r+0x24>)
 800e1a6:	602b      	str	r3, [r5, #0]
 800e1a8:	f7fa ffcc 	bl	8009144 <_read>
 800e1ac:	1c43      	adds	r3, r0, #1
 800e1ae:	d103      	bne.n	800e1b8 <_read_r+0x20>
 800e1b0:	682b      	ldr	r3, [r5, #0]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d000      	beq.n	800e1b8 <_read_r+0x20>
 800e1b6:	6023      	str	r3, [r4, #0]
 800e1b8:	bd70      	pop	{r4, r5, r6, pc}
 800e1ba:	46c0      	nop			; (mov r8, r8)
 800e1bc:	20003b78 	.word	0x20003b78

0800e1c0 <_init>:
 800e1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1c2:	46c0      	nop			; (mov r8, r8)
 800e1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1c6:	bc08      	pop	{r3}
 800e1c8:	469e      	mov	lr, r3
 800e1ca:	4770      	bx	lr

0800e1cc <_fini>:
 800e1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ce:	46c0      	nop			; (mov r8, r8)
 800e1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1d2:	bc08      	pop	{r3}
 800e1d4:	469e      	mov	lr, r3
 800e1d6:	4770      	bx	lr
